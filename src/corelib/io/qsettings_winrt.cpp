begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qsettings.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_SETTINGS
end_ifndef
begin_include
include|#
directive|include
file|"qsettings_p.h"
end_include
begin_include
include|#
directive|include
file|"qvector.h"
end_include
begin_include
include|#
directive|include
file|"qmap.h"
end_include
begin_include
include|#
directive|include
file|"qdebug.h"
end_include
begin_include
include|#
directive|include
file|"qfunctions_winrt.h"
end_include
begin_include
include|#
directive|include
file|<wrl.h>
end_include
begin_include
include|#
directive|include
file|<wrl/event.h>
end_include
begin_include
include|#
directive|include
file|<Windows.ApplicationModel.h>
end_include
begin_include
include|#
directive|include
file|<windows.storage.h>
end_include
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|ApplicationModel
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|Storage
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|Foundation
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|Foundation
operator|::
name|Collections
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|Microsoft
operator|::
name|WRL
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|Microsoft
operator|::
name|WRL
operator|::
name|Wrappers
namespace|;
end_using
begin_typedef
DECL|typedef|DataHandler
typedef|typedef
name|ITypedEventHandler
argument_list|<
name|ApplicationData
modifier|*
argument_list|,
name|IInspectable
modifier|*
argument_list|>
name|DataHandler
typedef|;
end_typedef
begin_typedef
DECL|typedef|ContainerItem
typedef|typedef
name|Collections
operator|::
name|IKeyValuePair
argument_list|<
name|HSTRING
argument_list|,
name|ApplicationDataContainer
modifier|*
argument_list|>
name|ContainerItem
typedef|;
end_typedef
begin_typedef
DECL|typedef|ContainerIterable
typedef|typedef
name|Collections
operator|::
name|IIterable
argument_list|<
name|ContainerItem
modifier|*
argument_list|>
name|ContainerIterable
typedef|;
end_typedef
begin_typedef
DECL|typedef|ContainerIterator
typedef|typedef
name|Collections
operator|::
name|IIterator
argument_list|<
name|ContainerItem
modifier|*
argument_list|>
name|ContainerIterator
typedef|;
end_typedef
begin_typedef
DECL|typedef|ValueItem
typedef|typedef
name|Collections
operator|::
name|IKeyValuePair
argument_list|<
name|HSTRING
argument_list|,
name|IInspectable
modifier|*
argument_list|>
name|ValueItem
typedef|;
end_typedef
begin_typedef
DECL|typedef|ValueIterable
typedef|typedef
name|Collections
operator|::
name|IIterable
argument_list|<
name|ValueItem
modifier|*
argument_list|>
name|ValueIterable
typedef|;
end_typedef
begin_typedef
DECL|typedef|ValueIterator
typedef|typedef
name|Collections
operator|::
name|IIterator
argument_list|<
name|ValueItem
modifier|*
argument_list|>
name|ValueIterator
typedef|;
end_typedef
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|subContainer
specifier|static
name|IApplicationDataContainer
modifier|*
name|subContainer
parameter_list|(
name|IApplicationDataContainer
modifier|*
name|parent
parameter_list|,
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
block|{
name|ComPtr
argument_list|<
name|IMapView
argument_list|<
name|HSTRING
argument_list|,
name|ApplicationDataContainer
modifier|*
argument_list|>
argument_list|>
name|childrenContainer
decl_stmt|;
name|HRESULT
name|hr
init|=
name|parent
operator|->
name|get_Containers
argument_list|(
operator|&
name|childrenContainer
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
return|return
literal|0
return|;
name|ComPtr
argument_list|<
name|ContainerIterable
argument_list|>
name|iterable
decl_stmt|;
name|ComPtr
argument_list|<
name|ContainerIterator
argument_list|>
name|iterator
decl_stmt|;
name|hr
operator|=
name|childrenContainer
operator|.
name|As
argument_list|(
operator|&
name|iterable
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
return|return
literal|0
return|;
name|hr
operator|=
name|iterable
operator|->
name|First
argument_list|(
operator|&
name|iterator
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
return|return
literal|0
return|;
name|boolean
name|current
decl_stmt|;
name|hr
operator|=
name|iterator
operator|->
name|get_HasCurrent
argument_list|(
operator|&
name|current
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
return|return
literal|0
return|;
while|while
condition|(
name|SUCCEEDED
argument_list|(
name|S_OK
argument_list|)
operator|&&
name|current
condition|)
block|{
name|ComPtr
argument_list|<
name|ContainerItem
argument_list|>
name|item
decl_stmt|;
name|hr
operator|=
name|iterator
operator|->
name|get_Current
argument_list|(
operator|&
name|item
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
return|return
literal|0
return|;
name|HString
name|key
decl_stmt|;
name|hr
operator|=
name|item
operator|->
name|get_Key
argument_list|(
name|key
operator|.
name|GetAddressOf
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
continue|continue;
name|QString
name|subName
init|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|key
operator|.
name|GetRawBuffer
argument_list|(
literal|nullptr
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
name|subName
condition|)
block|{
name|IApplicationDataContainer
modifier|*
name|container
decl_stmt|;
name|hr
operator|=
name|item
operator|->
name|get_Value
argument_list|(
operator|&
name|container
argument_list|)
expr_stmt|;
return|return
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
condition|?
name|container
else|:
literal|0
return|;
block|}
name|hr
operator|=
name|iterator
operator|->
name|MoveNext
argument_list|(
operator|&
name|current
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|subContainerNames
specifier|static
name|QStringList
name|subContainerNames
parameter_list|(
name|IApplicationDataContainer
modifier|*
name|container
parameter_list|,
name|bool
name|recursive
init|=
literal|false
parameter_list|)
block|{
name|QStringList
name|result
decl_stmt|;
name|ComPtr
argument_list|<
name|IMapView
argument_list|<
name|HSTRING
argument_list|,
name|ApplicationDataContainer
modifier|*
argument_list|>
argument_list|>
name|childrenContainer
decl_stmt|;
name|HRESULT
name|hr
init|=
name|container
operator|->
name|get_Containers
argument_list|(
operator|&
name|childrenContainer
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
return|return
name|result
return|;
name|ComPtr
argument_list|<
name|ContainerIterable
argument_list|>
name|iterable
decl_stmt|;
name|ComPtr
argument_list|<
name|ContainerIterator
argument_list|>
name|iterator
decl_stmt|;
name|hr
operator|=
name|childrenContainer
operator|.
name|As
argument_list|(
operator|&
name|iterable
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
return|return
name|result
return|;
name|hr
operator|=
name|iterable
operator|->
name|First
argument_list|(
operator|&
name|iterator
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
return|return
name|result
return|;
name|boolean
name|current
decl_stmt|;
name|hr
operator|=
name|iterator
operator|->
name|get_HasCurrent
argument_list|(
operator|&
name|current
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
return|return
name|result
return|;
while|while
condition|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
operator|&&
name|current
condition|)
block|{
name|ComPtr
argument_list|<
name|ContainerItem
argument_list|>
name|item
decl_stmt|;
name|hr
operator|=
name|iterator
operator|->
name|get_Current
argument_list|(
operator|&
name|item
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
return|return
name|result
return|;
name|HString
name|key
decl_stmt|;
name|hr
operator|=
name|item
operator|->
name|get_Key
argument_list|(
name|key
operator|.
name|GetAddressOf
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|QString
name|subName
init|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|key
operator|.
name|GetRawBuffer
argument_list|(
literal|nullptr
argument_list|)
argument_list|)
decl_stmt|;
name|result
operator|.
name|append
argument_list|(
name|subName
argument_list|)
expr_stmt|;
if|if
condition|(
name|recursive
condition|)
block|{
name|ComPtr
argument_list|<
name|IApplicationDataContainer
argument_list|>
name|sub
init|=
name|subContainer
argument_list|(
name|container
argument_list|,
name|subName
argument_list|)
decl_stmt|;
name|QStringList
name|subSubNames
init|=
name|subContainerNames
argument_list|(
name|sub
operator|.
name|Get
argument_list|()
argument_list|,
name|recursive
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subSubNames
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|subSubNames
index|[
name|i
index|]
operator|=
name|subName
operator|+
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
operator|+
name|subSubNames
index|[
name|i
index|]
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
name|subSubNames
argument_list|)
expr_stmt|;
block|}
name|hr
operator|=
name|iterator
operator|->
name|MoveNext
argument_list|(
operator|&
name|current
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|keyNames
specifier|static
name|QStringList
name|keyNames
parameter_list|(
name|IApplicationDataContainer
modifier|*
name|container
parameter_list|)
block|{
name|HRESULT
name|hr
decl_stmt|;
name|QStringList
name|result
decl_stmt|;
name|ComPtr
argument_list|<
name|IPropertySet
argument_list|>
name|values
decl_stmt|;
name|hr
operator|=
name|container
operator|->
name|get_Values
argument_list|(
operator|&
name|values
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
return|return
name|result
return|;
name|ComPtr
argument_list|<
name|IMap
argument_list|<
name|HSTRING
argument_list|,
name|IInspectable
modifier|*
argument_list|>
argument_list|>
name|settingsMap
decl_stmt|;
name|hr
operator|=
name|values
operator|.
name|As
argument_list|(
operator|&
name|settingsMap
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
return|return
name|result
return|;
name|ComPtr
argument_list|<
name|IMapView
argument_list|<
name|HSTRING
argument_list|,
name|IInspectable
modifier|*
argument_list|>
argument_list|>
name|mapView
decl_stmt|;
name|hr
operator|=
name|settingsMap
operator|->
name|GetView
argument_list|(
operator|&
name|mapView
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
return|return
name|result
return|;
name|ComPtr
argument_list|<
name|ValueIterable
argument_list|>
name|iterable
decl_stmt|;
name|ComPtr
argument_list|<
name|ValueIterator
argument_list|>
name|iterator
decl_stmt|;
name|hr
operator|=
name|mapView
operator|.
name|As
argument_list|(
operator|&
name|iterable
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
return|return
name|result
return|;
name|boolean
name|current
init|=
literal|false
decl_stmt|;
name|hr
operator|=
name|iterable
operator|->
name|First
argument_list|(
operator|&
name|iterator
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
return|return
name|result
return|;
name|hr
operator|=
name|iterator
operator|->
name|get_HasCurrent
argument_list|(
operator|&
name|current
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
return|return
name|result
return|;
while|while
condition|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
operator|&&
name|current
condition|)
block|{
name|ComPtr
argument_list|<
name|ValueItem
argument_list|>
name|item
decl_stmt|;
name|hr
operator|=
name|iterator
operator|->
name|get_Current
argument_list|(
operator|&
name|item
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
return|return
name|result
return|;
name|HString
name|key
decl_stmt|;
name|hr
operator|=
name|item
operator|->
name|get_Key
argument_list|(
name|key
operator|.
name|GetAddressOf
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|result
operator|+=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|key
operator|.
name|GetRawBuffer
argument_list|(
literal|nullptr
argument_list|)
argument_list|)
expr_stmt|;
name|hr
operator|=
name|iterator
operator|->
name|MoveNext
argument_list|(
operator|&
name|current
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|createSubContainer
specifier|static
name|IApplicationDataContainer
modifier|*
name|createSubContainer
parameter_list|(
name|IApplicationDataContainer
modifier|*
name|parent
parameter_list|,
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
block|{
name|HStringReference
name|childGroupNativeName
argument_list|(
operator|(
specifier|const
name|wchar_t
operator|*
operator|)
name|name
operator|.
name|utf16
argument_list|()
argument_list|,
name|name
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|IApplicationDataContainer
modifier|*
name|result
init|=
name|subContainer
argument_list|(
name|parent
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|result
condition|)
name|parent
operator|->
name|CreateContainer
argument_list|(
name|childGroupNativeName
operator|.
name|Get
argument_list|()
argument_list|,
name|ApplicationDataCreateDisposition_Always
argument_list|,
operator|&
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_define
DECL|macro|PROP_CASE_TO_VARIANT
define|#
directive|define
name|PROP_CASE_TO_VARIANT
parameter_list|(
name|TYPE
parameter_list|,
name|VARTYPE
parameter_list|,
name|QTYPE
parameter_list|)
define|\
value|case PropertyType_##TYPE: { \         VARTYPE v; \         value->Get##TYPE(&v); \         result.setValue( QTYPE(v) ); \         break; \     }
end_define
begin_function
DECL|function|propertyValueToQVariant
specifier|static
name|QVariant
name|propertyValueToQVariant
parameter_list|(
name|IPropertyValue
modifier|*
name|value
parameter_list|)
block|{
name|QVariant
name|result
decl_stmt|;
name|PropertyType
name|type
decl_stmt|;
name|value
operator|->
name|get_Type
argument_list|(
operator|&
name|type
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
name|PROP_CASE_TO_VARIANT
argument_list|(
argument|Boolean
argument_list|,
argument|boolean
argument_list|,
argument|bool
argument_list|)
name|PROP_CASE_TO_VARIANT
argument_list|(
argument|UInt8
argument_list|,
argument|UINT8
argument_list|,
argument|quint8
argument_list|)
name|PROP_CASE_TO_VARIANT
argument_list|(
argument|Int16
argument_list|,
argument|INT16
argument_list|,
argument|qint16
argument_list|)
name|PROP_CASE_TO_VARIANT
argument_list|(
argument|UInt16
argument_list|,
argument|UINT16
argument_list|,
argument|quint16
argument_list|)
name|PROP_CASE_TO_VARIANT
argument_list|(
argument|Int32
argument_list|,
argument|INT32
argument_list|,
argument|qint32
argument_list|)
name|PROP_CASE_TO_VARIANT
argument_list|(
argument|UInt32
argument_list|,
argument|UINT32
argument_list|,
argument|quint32
argument_list|)
name|PROP_CASE_TO_VARIANT
argument_list|(
argument|Int64
argument_list|,
argument|INT64
argument_list|,
argument|qint64
argument_list|)
name|PROP_CASE_TO_VARIANT
argument_list|(
argument|UInt64
argument_list|,
argument|UINT64
argument_list|,
argument|quint64
argument_list|)
name|PROP_CASE_TO_VARIANT
argument_list|(
argument|Single
argument_list|,
argument|FLOAT
argument_list|,
argument|float
argument_list|)
name|PROP_CASE_TO_VARIANT
argument_list|(
argument|Double
argument_list|,
argument|DOUBLE
argument_list|,
argument|double
argument_list|)
case|case
name|PropertyType_StringArray
case|:
block|{
name|UINT32
name|size
decl_stmt|;
name|HSTRING
modifier|*
name|content
decl_stmt|;
name|value
operator|->
name|GetStringArray
argument_list|(
operator|&
name|size
argument_list|,
operator|&
name|content
argument_list|)
expr_stmt|;
name|QStringList
name|list
decl_stmt|;
comment|// The last item is assumed to be added by us
for|for
control|(
name|UINT32
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
operator|-
literal|1
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|s
init|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|WindowsGetStringRawBuffer
argument_list|(
name|content
index|[
name|i
index|]
argument_list|,
literal|nullptr
argument_list|)
argument_list|)
decl_stmt|;
name|list
operator|.
name|append
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|QSettingsPrivate
operator|::
name|stringListToVariantList
argument_list|(
name|list
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|PropertyType_String
case|:
block|{
name|HString
name|v
decl_stmt|;
name|value
operator|->
name|GetString
argument_list|(
name|v
operator|.
name|GetAddressOf
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|QSettingsPrivate
operator|::
name|stringToVariant
argument_list|(
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|v
operator|.
name|GetRawBuffer
argument_list|(
literal|nullptr
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
name|UINT32
name|size
decl_stmt|;
name|BYTE
modifier|*
name|arr
decl_stmt|;
name|value
operator|->
name|GetUInt8Array
argument_list|(
operator|&
name|size
argument_list|,
operator|&
name|arr
argument_list|)
expr_stmt|;
name|QByteArray
name|data
init|=
name|QByteArray
operator|::
name|fromRawData
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|)
name|arr
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|QString
name|s
decl_stmt|;
if|if
condition|(
name|size
condition|)
block|{
comment|// We assume this is our qt stored data like on other platforms
comment|// as well. QList and others are converted to byte arrays
name|s
operator|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
operator|(
specifier|const
name|wchar_t
operator|*
operator|)
name|data
operator|.
name|constData
argument_list|()
argument_list|,
name|data
operator|.
name|size
argument_list|()
operator|/
literal|2
argument_list|)
expr_stmt|;
name|result
operator|=
name|QSettingsPrivate
operator|::
name|stringToVariant
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
return|return
name|result
return|;
block|}
end_function
begin_class
DECL|class|QWinRTSettingsPrivate
class|class
name|QWinRTSettingsPrivate
super|:
specifier|public
name|QSettingsPrivate
block|{
public|public:
name|QWinRTSettingsPrivate
parameter_list|(
name|QSettings
operator|::
name|Scope
name|scope
parameter_list|,
specifier|const
name|QString
modifier|&
name|organization
parameter_list|,
specifier|const
name|QString
modifier|&
name|application
parameter_list|)
constructor_decl|;
name|QWinRTSettingsPrivate
parameter_list|(
name|QString
name|rKey
parameter_list|)
constructor_decl|;
name|~
name|QWinRTSettingsPrivate
parameter_list|()
destructor_decl|;
name|void
name|remove
parameter_list|(
specifier|const
name|QString
modifier|&
name|uKey
parameter_list|)
function_decl|;
name|void
name|set
parameter_list|(
specifier|const
name|QString
modifier|&
name|uKey
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|value
parameter_list|)
function_decl|;
name|bool
name|get
parameter_list|(
specifier|const
name|QString
modifier|&
name|uKey
parameter_list|,
name|QVariant
modifier|*
name|value
parameter_list|)
specifier|const
function_decl|;
name|QStringList
name|children
parameter_list|(
specifier|const
name|QString
modifier|&
name|uKey
parameter_list|,
name|ChildSpec
name|spec
parameter_list|)
specifier|const
function_decl|;
name|void
name|clear
parameter_list|()
function_decl|;
name|void
name|sync
parameter_list|()
function_decl|;
name|void
name|flush
parameter_list|()
function_decl|;
name|bool
name|isWritable
parameter_list|()
specifier|const
function_decl|;
name|QString
name|fileName
parameter_list|()
specifier|const
function_decl|;
private|private:
name|void
name|init
parameter_list|(
name|QSettings
operator|::
name|Scope
name|scope
parameter_list|)
function_decl|;
name|IApplicationDataContainer
modifier|*
name|getContainer
parameter_list|(
name|IApplicationDataContainer
modifier|*
name|parent
parameter_list|,
specifier|const
name|QString
modifier|&
name|group
parameter_list|,
name|bool
name|create
init|=
literal|false
parameter_list|)
specifier|const
function_decl|;
name|void
name|clearContainerMaps
parameter_list|()
function_decl|;
name|HRESULT
name|onDataChanged
parameter_list|(
name|IApplicationData
modifier|*
parameter_list|,
name|IInspectable
modifier|*
parameter_list|)
function_decl|;
DECL|member|applicationData
name|ComPtr
argument_list|<
name|IApplicationData
argument_list|>
name|applicationData
decl_stmt|;
DECL|member|readContainers
name|QVector
argument_list|<
name|ComPtr
argument_list|<
name|IApplicationDataContainer
argument_list|>
argument_list|>
name|readContainers
decl_stmt|;
DECL|member|writeContainer
name|ComPtr
argument_list|<
name|IApplicationDataContainer
argument_list|>
name|writeContainer
decl_stmt|;
DECL|member|dataChangedToken
name|EventRegistrationToken
name|dataChangedToken
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|QWinRTSettingsPrivate
name|QWinRTSettingsPrivate
operator|::
name|QWinRTSettingsPrivate
parameter_list|(
name|QSettings
operator|::
name|Scope
name|scope
parameter_list|,
specifier|const
name|QString
modifier|&
name|organization
parameter_list|,
specifier|const
name|QString
modifier|&
name|application
parameter_list|)
member_init_list|:
name|QSettingsPrivate
argument_list|(
name|QSettings
operator|::
name|NativeFormat
argument_list|,
name|scope
argument_list|,
name|organization
argument_list|,
name|application
argument_list|)
member_init_list|,
name|writeContainer
argument_list|(
literal|0
argument_list|)
block|{
name|init
argument_list|(
name|scope
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_constructor
DECL|function|QWinRTSettingsPrivate
name|QWinRTSettingsPrivate
operator|::
name|QWinRTSettingsPrivate
parameter_list|(
name|QString
name|rPath
parameter_list|)
member_init_list|:
name|QSettingsPrivate
argument_list|(
name|QSettings
operator|::
name|NativeFormat
argument_list|,
name|QSettings
operator|::
name|UserScope
argument_list|,
name|rPath
argument_list|,
name|QString
argument_list|()
argument_list|)
member_init_list|,
name|writeContainer
argument_list|(
literal|0
argument_list|)
block|{
name|init
argument_list|(
name|QSettings
operator|::
name|UserScope
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QWinRTSettingsPrivate
name|QWinRTSettingsPrivate
operator|::
name|~
name|QWinRTSettingsPrivate
parameter_list|()
block|{
name|clearContainerMaps
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|remove
name|void
name|QWinRTSettingsPrivate
operator|::
name|remove
parameter_list|(
specifier|const
name|QString
modifier|&
name|uKey
parameter_list|)
block|{
name|int
name|lastIndex
init|=
name|uKey
operator|.
name|lastIndexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
decl_stmt|;
name|QString
name|groupName
init|=
operator|(
name|lastIndex
operator|>
literal|0
operator|)
condition|?
name|uKey
operator|.
name|left
argument_list|(
name|lastIndex
argument_list|)
else|:
name|QString
argument_list|()
decl_stmt|;
name|QString
name|groupKey
init|=
name|uKey
operator|.
name|mid
argument_list|(
name|lastIndex
operator|+
literal|1
argument_list|)
decl_stmt|;
name|ComPtr
argument_list|<
name|IApplicationDataContainer
argument_list|>
name|container
init|=
name|getContainer
argument_list|(
name|writeContainer
operator|.
name|Get
argument_list|()
argument_list|,
name|groupName
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|container
condition|)
return|return;
name|HRESULT
name|hr
decl_stmt|;
name|ComPtr
argument_list|<
name|IPropertySet
argument_list|>
name|values
decl_stmt|;
name|hr
operator|=
name|container
operator|->
name|get_Values
argument_list|(
operator|&
name|values
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
return|return;
name|ComPtr
argument_list|<
name|IMap
argument_list|<
name|HSTRING
argument_list|,
name|IInspectable
modifier|*
argument_list|>
argument_list|>
name|settingsMap
decl_stmt|;
name|hr
operator|=
name|values
operator|.
name|As
argument_list|(
operator|&
name|settingsMap
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
return|return;
name|HStringReference
name|ref
argument_list|(
operator|(
specifier|const
name|wchar_t
operator|*
operator|)
name|groupKey
operator|.
name|utf16
argument_list|()
argument_list|,
name|groupKey
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|hr
operator|=
name|settingsMap
operator|->
name|Remove
argument_list|(
name|ref
operator|.
name|Get
argument_list|()
argument_list|)
expr_stmt|;
comment|// groupKey can be a container as well
name|hr
operator|=
name|container
operator|->
name|DeleteContainer
argument_list|(
name|ref
operator|.
name|Get
argument_list|()
argument_list|)
expr_stmt|;
name|init
argument_list|(
name|scope
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|set
name|void
name|QWinRTSettingsPrivate
operator|::
name|set
parameter_list|(
specifier|const
name|QString
modifier|&
name|uKey
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|value
parameter_list|)
block|{
name|int
name|lastIndex
init|=
name|uKey
operator|.
name|lastIndexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
decl_stmt|;
name|QString
name|groupName
init|=
operator|(
name|lastIndex
operator|>
literal|0
operator|)
condition|?
name|uKey
operator|.
name|left
argument_list|(
name|lastIndex
argument_list|)
else|:
name|QString
argument_list|()
decl_stmt|;
name|QString
name|groupKey
init|=
name|uKey
operator|.
name|mid
argument_list|(
name|lastIndex
operator|+
literal|1
argument_list|)
decl_stmt|;
name|ComPtr
argument_list|<
name|IApplicationDataContainer
argument_list|>
name|container
init|=
name|getContainer
argument_list|(
name|writeContainer
operator|.
name|Get
argument_list|()
argument_list|,
name|groupName
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ComPtr
argument_list|<
name|IPropertySet
argument_list|>
name|values
decl_stmt|;
name|HRESULT
name|hr
init|=
name|container
operator|->
name|get_Values
argument_list|(
operator|&
name|values
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|qErrnoWarning
argument_list|(
name|hr
argument_list|,
literal|"Could not access Windows container values"
argument_list|)
expr_stmt|;
name|setStatus
argument_list|(
name|QSettings
operator|::
name|AccessError
argument_list|)
expr_stmt|;
return|return;
block|}
name|ComPtr
argument_list|<
name|IMap
argument_list|<
name|HSTRING
argument_list|,
name|IInspectable
modifier|*
argument_list|>
argument_list|>
name|settingsMap
decl_stmt|;
name|hr
operator|=
name|values
operator|.
name|As
argument_list|(
operator|&
name|settingsMap
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|setStatus
argument_list|(
name|QSettings
operator|::
name|AccessError
argument_list|)
expr_stmt|;
return|return;
block|}
name|ComPtr
argument_list|<
name|IPropertyValueStatics
argument_list|>
name|valueStatics
decl_stmt|;
name|hr
operator|=
name|GetActivationFactory
argument_list|(
name|HString
operator|::
name|MakeReference
argument_list|(
name|RuntimeClass_Windows_Foundation_PropertyValue
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|valueStatics
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|setStatus
argument_list|(
name|QSettings
operator|::
name|AccessError
argument_list|)
expr_stmt|;
return|return;
block|}
name|ComPtr
argument_list|<
name|IInspectable
argument_list|>
name|val
decl_stmt|;
switch|switch
condition|(
name|value
operator|.
name|type
argument_list|()
condition|)
block|{
case|case
name|QVariant
operator|::
name|List
case|:
case|case
name|QVariant
operator|::
name|StringList
case|:
block|{
name|QStringList
name|l
init|=
name|variantListToStringList
argument_list|(
name|value
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|QStringList
operator|::
name|const_iterator
name|it
init|=
name|l
operator|.
name|constBegin
argument_list|()
decl_stmt|;
name|bool
name|containsNull
init|=
literal|false
decl_stmt|;
for|for
control|(
init|;
name|it
operator|!=
name|l
operator|.
name|constEnd
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
if|if
condition|(
operator|(
operator|*
name|it
operator|)
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|||
name|it
operator|->
name|indexOf
argument_list|(
name|QChar
operator|::
name|Null
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
comment|// We can only store as binary
name|containsNull
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|containsNull
condition|)
block|{
comment|// Store binary
specifier|const
name|QString
name|s
init|=
name|variantToString
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|hr
operator|=
name|valueStatics
operator|->
name|CreateUInt8Array
argument_list|(
name|s
operator|.
name|length
argument_list|()
operator|*
literal|2
argument_list|,
operator|(
name|BYTE
operator|*
operator|)
name|s
operator|.
name|utf16
argument_list|()
argument_list|,
operator|&
name|val
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Store as native string list
name|int
name|size
init|=
name|l
operator|.
name|size
argument_list|()
decl_stmt|;
name|HSTRING
modifier|*
name|nativeHandleList
init|=
operator|new
name|HSTRING
index|[
name|size
operator|+
literal|1
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
operator|++
name|i
control|)
name|hr
operator|=
name|WindowsCreateString
argument_list|(
operator|(
specifier|const
name|wchar_t
operator|*
operator|)
name|l
index|[
name|i
index|]
operator|.
name|utf16
argument_list|()
argument_list|,
name|l
index|[
name|i
index|]
operator|.
name|size
argument_list|()
argument_list|,
operator|&
name|nativeHandleList
index|[
name|i
index|]
argument_list|)
expr_stmt|;
comment|// Add end marker
name|hr
operator|=
name|WindowsCreateString
argument_list|(
operator|(
specifier|const
name|wchar_t
operator|*
operator|)
literal|L"\0\0@"
argument_list|,
literal|3
argument_list|,
operator|&
name|nativeHandleList
index|[
name|size
index|]
argument_list|)
expr_stmt|;
name|hr
operator|=
name|valueStatics
operator|->
name|CreateStringArray
argument_list|(
name|size
operator|+
literal|1
argument_list|,
name|nativeHandleList
argument_list|,
operator|&
name|val
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
operator|++
name|i
control|)
name|hr
operator|=
name|WindowsDeleteString
argument_list|(
name|nativeHandleList
index|[
name|i
index|]
argument_list|)
expr_stmt|;
operator|delete
index|[]
name|nativeHandleList
expr_stmt|;
block|}
break|break;
block|}
case|case
name|QVariant
operator|::
name|Bool
case|:
name|hr
operator|=
name|valueStatics
operator|->
name|CreateBoolean
argument_list|(
name|boolean
argument_list|(
name|value
operator|.
name|toBool
argument_list|()
argument_list|)
argument_list|,
operator|&
name|val
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|Int
case|:
name|hr
operator|=
name|valueStatics
operator|->
name|CreateInt32
argument_list|(
name|INT32
argument_list|(
name|value
operator|.
name|toInt
argument_list|()
argument_list|)
argument_list|,
operator|&
name|val
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|UInt
case|:
name|hr
operator|=
name|valueStatics
operator|->
name|CreateUInt32
argument_list|(
name|UINT32
argument_list|(
name|value
operator|.
name|toUInt
argument_list|()
argument_list|)
argument_list|,
operator|&
name|val
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|LongLong
case|:
name|hr
operator|=
name|valueStatics
operator|->
name|CreateInt64
argument_list|(
name|INT64
argument_list|(
name|value
operator|.
name|toLongLong
argument_list|()
argument_list|)
argument_list|,
operator|&
name|val
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|ULongLong
case|:
name|hr
operator|=
name|valueStatics
operator|->
name|CreateUInt64
argument_list|(
name|UINT64
argument_list|(
name|value
operator|.
name|toULongLong
argument_list|()
argument_list|)
argument_list|,
operator|&
name|val
argument_list|)
expr_stmt|;
break|break;
default|default:
block|{
specifier|const
name|QString
name|s
init|=
name|variantToString
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|indexOf
argument_list|(
name|QChar
operator|::
name|Null
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|hr
operator|=
name|valueStatics
operator|->
name|CreateUInt8Array
argument_list|(
name|s
operator|.
name|length
argument_list|()
operator|*
literal|2
argument_list|,
operator|(
name|BYTE
operator|*
operator|)
name|s
operator|.
name|utf16
argument_list|()
argument_list|,
operator|&
name|val
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|HStringReference
name|ref
argument_list|(
operator|(
specifier|const
name|wchar_t
operator|*
operator|)
name|s
operator|.
name|utf16
argument_list|()
argument_list|,
name|s
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|hr
operator|=
name|valueStatics
operator|->
name|CreateString
argument_list|(
name|ref
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|val
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
name|RETURN_VOID_IF_FAILED
argument_list|(
literal|"QSettings: Could not save QVariant value into IInspectable"
argument_list|)
expr_stmt|;
name|HStringReference
name|key
argument_list|(
operator|(
specifier|const
name|wchar_t
operator|*
operator|)
name|groupKey
operator|.
name|utf16
argument_list|()
argument_list|,
name|groupKey
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|rep
decl_stmt|;
name|hr
operator|=
name|settingsMap
operator|->
name|Insert
argument_list|(
name|key
operator|.
name|Get
argument_list|()
argument_list|,
name|val
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|rep
argument_list|)
expr_stmt|;
name|RETURN_VOID_IF_FAILED
argument_list|(
literal|"QSettings: Could not store value"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|get
name|bool
name|QWinRTSettingsPrivate
operator|::
name|get
parameter_list|(
specifier|const
name|QString
modifier|&
name|uKey
parameter_list|,
name|QVariant
modifier|*
name|value
parameter_list|)
specifier|const
block|{
name|int
name|lastIndex
init|=
name|uKey
operator|.
name|lastIndexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
decl_stmt|;
name|QString
name|groupName
init|=
operator|(
name|lastIndex
operator|>
literal|0
operator|)
condition|?
name|uKey
operator|.
name|left
argument_list|(
name|lastIndex
argument_list|)
else|:
name|QString
argument_list|()
decl_stmt|;
name|QString
name|groupKey
init|=
name|uKey
operator|.
name|mid
argument_list|(
name|lastIndex
operator|+
literal|1
argument_list|)
decl_stmt|;
name|HRESULT
name|hr
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|readContainers
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|ComPtr
argument_list|<
name|IApplicationDataContainer
argument_list|>
name|container
init|=
cast|const_cast
argument_list|<
name|QWinRTSettingsPrivate
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
operator|->
name|getContainer
argument_list|(
name|readContainers
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
name|groupName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|container
condition|)
continue|continue;
name|ComPtr
argument_list|<
name|IPropertySet
argument_list|>
name|values
decl_stmt|;
name|hr
operator|=
name|container
operator|->
name|get_Values
argument_list|(
operator|&
name|values
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
continue|continue;
name|ComPtr
argument_list|<
name|IMap
argument_list|<
name|HSTRING
argument_list|,
name|IInspectable
modifier|*
argument_list|>
argument_list|>
name|settingsMap
decl_stmt|;
name|hr
operator|=
name|values
operator|.
name|As
argument_list|(
operator|&
name|settingsMap
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
continue|continue;
name|HStringReference
name|key
argument_list|(
operator|(
specifier|const
name|wchar_t
operator|*
operator|)
name|groupKey
operator|.
name|utf16
argument_list|()
argument_list|,
name|groupKey
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|exists
decl_stmt|;
name|hr
operator|=
name|settingsMap
operator|.
name|Get
argument_list|()
operator|->
name|HasKey
argument_list|(
name|key
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|exists
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
continue|continue;
if|if
condition|(
operator|!
name|exists
condition|)
block|{
if|if
condition|(
operator|!
name|fallbacks
condition|)
break|break;
else|else
continue|continue;
block|}
if|if
condition|(
name|value
condition|)
block|{
name|ComPtr
argument_list|<
name|IInspectable
argument_list|>
name|val
decl_stmt|;
name|hr
operator|=
name|settingsMap
operator|->
name|Lookup
argument_list|(
name|key
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|val
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
return|return
literal|false
return|;
name|ComPtr
argument_list|<
name|IPropertyValue
argument_list|>
name|pVal
decl_stmt|;
name|hr
operator|=
name|val
operator|.
name|As
argument_list|(
operator|&
name|pVal
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
return|return
literal|false
return|;
operator|*
name|value
operator|=
name|propertyValueToQVariant
argument_list|(
name|pVal
operator|.
name|Get
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
name|setStatus
argument_list|(
name|QSettings
operator|::
name|AccessError
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|children
name|QStringList
name|QWinRTSettingsPrivate
operator|::
name|children
parameter_list|(
specifier|const
name|QString
modifier|&
name|uKey
parameter_list|,
name|ChildSpec
name|spec
parameter_list|)
specifier|const
block|{
name|QStringList
name|result
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|readContainers
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|ComPtr
argument_list|<
name|IApplicationDataContainer
argument_list|>
name|container
init|=
name|getContainer
argument_list|(
name|readContainers
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
name|uKey
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|container
operator|.
name|Get
argument_list|()
condition|)
continue|continue;
comment|// Get Keys in this container
if|if
condition|(
name|spec
operator|==
name|AllKeys
operator|||
name|spec
operator|==
name|ChildKeys
condition|)
name|result
operator|+=
name|keyNames
argument_list|(
name|container
operator|.
name|Get
argument_list|()
argument_list|)
expr_stmt|;
comment|// Get Subcontainer(s)
if|if
condition|(
name|spec
operator|==
name|AllKeys
operator|||
name|spec
operator|==
name|ChildGroups
condition|)
block|{
specifier|const
name|QStringList
name|subContainerList
init|=
name|subContainerNames
argument_list|(
name|container
operator|.
name|Get
argument_list|()
argument_list|,
name|spec
operator|==
name|AllKeys
argument_list|)
decl_stmt|;
if|if
condition|(
name|spec
operator|==
name|AllKeys
condition|)
block|{
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|item
decl|,
name|subContainerList
control|)
block|{
specifier|const
name|QString
name|subChildren
init|=
name|uKey
operator|.
name|isEmpty
argument_list|()
condition|?
name|item
else|:
operator|(
name|uKey
operator|+
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
operator|+
name|item
operator|)
decl_stmt|;
specifier|const
name|QStringList
name|subResult
init|=
name|children
argument_list|(
name|subChildren
argument_list|,
name|ChildKeys
argument_list|)
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|subItem
decl|,
name|subResult
control|)
name|result
operator|+=
name|item
operator|+
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
operator|+
name|subItem
expr_stmt|;
block|}
block|}
if|if
condition|(
name|spec
operator|==
name|ChildGroups
condition|)
name|result
operator|+=
name|subContainerList
expr_stmt|;
block|}
block|}
name|result
operator|.
name|removeDuplicates
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|QWinRTSettingsPrivate
operator|::
name|clear
parameter_list|()
block|{
name|ComPtr
argument_list|<
name|IApplicationDataContainer
argument_list|>
name|container
decl_stmt|;
name|HRESULT
name|hr
decl_stmt|;
if|if
condition|(
name|scope
operator|==
name|QSettings
operator|::
name|UserScope
condition|)
name|hr
operator|=
name|applicationData
operator|->
name|get_LocalSettings
argument_list|(
operator|&
name|container
argument_list|)
expr_stmt|;
else|else
name|hr
operator|=
name|applicationData
operator|->
name|get_RoamingSettings
argument_list|(
operator|&
name|container
argument_list|)
expr_stmt|;
name|RETURN_VOID_IF_FAILED
argument_list|(
literal|"Could not access settings container"
argument_list|)
expr_stmt|;
name|QString
name|containerName
init|=
name|applicationName
operator|.
name|isEmpty
argument_list|()
condition|?
name|organizationName
else|:
name|applicationName
decl_stmt|;
name|HStringReference
name|containerNativeName
argument_list|(
operator|(
specifier|const
name|wchar_t
operator|*
operator|)
name|containerName
operator|.
name|utf16
argument_list|()
argument_list|,
name|containerName
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|hr
operator|=
name|container
operator|->
name|DeleteContainer
argument_list|(
name|containerNativeName
operator|.
name|Get
argument_list|()
argument_list|)
expr_stmt|;
name|RETURN_VOID_IF_FAILED
argument_list|(
literal|"Could not delete Container"
argument_list|)
expr_stmt|;
name|init
argument_list|(
name|scope
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sync
name|void
name|QWinRTSettingsPrivate
operator|::
name|sync
parameter_list|()
block|{
comment|// No native sync available
block|}
end_function
begin_function
DECL|function|flush
name|void
name|QWinRTSettingsPrivate
operator|::
name|flush
parameter_list|()
block|{
comment|// No native flush available
block|}
end_function
begin_function
DECL|function|fileName
name|QString
name|QWinRTSettingsPrivate
operator|::
name|fileName
parameter_list|()
specifier|const
block|{
name|Q_UNIMPLEMENTED
argument_list|()
expr_stmt|;
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|onDataChanged
name|HRESULT
name|QWinRTSettingsPrivate
operator|::
name|onDataChanged
parameter_list|(
name|IApplicationData
modifier|*
parameter_list|,
name|IInspectable
modifier|*
parameter_list|)
block|{
comment|// This only happens, if roaming data is changed by the OS.
comment|// To ensure sanity we clean up the map and start from scratch
name|init
argument_list|(
name|scope
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
block|}
end_function
begin_function
DECL|function|init
name|void
name|QWinRTSettingsPrivate
operator|::
name|init
parameter_list|(
name|QSettings
operator|::
name|Scope
name|scope
parameter_list|)
block|{
name|clearContainerMaps
argument_list|()
expr_stmt|;
name|ComPtr
argument_list|<
name|IApplicationDataStatics
argument_list|>
name|applicationDataStatics
decl_stmt|;
name|HRESULT
name|hr
init|=
name|GetActivationFactory
argument_list|(
name|HString
operator|::
name|MakeReference
argument_list|(
name|RuntimeClass_Windows_Storage_ApplicationData
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|applicationDataStatics
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|qErrnoWarning
argument_list|(
name|hr
argument_list|,
literal|"Could not access Storage Factory"
argument_list|)
expr_stmt|;
name|setStatus
argument_list|(
name|QSettings
operator|::
name|AccessError
argument_list|)
expr_stmt|;
return|return;
block|}
name|hr
operator|=
name|applicationDataStatics
operator|->
name|get_Current
argument_list|(
operator|&
name|applicationData
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|qErrnoWarning
argument_list|(
name|hr
argument_list|,
literal|"Could not access application data statics"
argument_list|)
expr_stmt|;
name|setStatus
argument_list|(
name|QSettings
operator|::
name|AccessError
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|const
name|QString
name|organizationString
init|=
name|organizationName
operator|.
name|isEmpty
argument_list|()
condition|?
name|QLatin1String
argument_list|(
literal|"OrganizationDefaults"
argument_list|)
else|:
name|organizationName
decl_stmt|;
name|ComPtr
argument_list|<
name|IApplicationDataContainer
argument_list|>
name|localContainer
decl_stmt|;
if|if
condition|(
name|scope
operator|==
name|QSettings
operator|::
name|UserScope
operator|&&
name|SUCCEEDED
argument_list|(
name|applicationData
operator|->
name|get_LocalSettings
argument_list|(
operator|&
name|localContainer
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|applicationName
operator|.
name|isEmpty
argument_list|()
condition|)
name|readContainers
operator|.
name|append
argument_list|(
name|createSubContainer
argument_list|(
name|localContainer
operator|.
name|Get
argument_list|()
argument_list|,
name|applicationName
argument_list|)
argument_list|)
expr_stmt|;
name|readContainers
operator|.
name|append
argument_list|(
name|createSubContainer
argument_list|(
name|localContainer
operator|.
name|Get
argument_list|()
argument_list|,
name|organizationString
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ComPtr
argument_list|<
name|IApplicationDataContainer
argument_list|>
name|roamingContainer
decl_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|applicationData
operator|->
name|get_RoamingSettings
argument_list|(
operator|&
name|roamingContainer
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|applicationName
operator|.
name|isEmpty
argument_list|()
condition|)
name|readContainers
operator|.
name|append
argument_list|(
name|createSubContainer
argument_list|(
name|roamingContainer
operator|.
name|Get
argument_list|()
argument_list|,
name|applicationName
argument_list|)
argument_list|)
expr_stmt|;
name|readContainers
operator|.
name|append
argument_list|(
name|createSubContainer
argument_list|(
name|roamingContainer
operator|.
name|Get
argument_list|()
argument_list|,
name|organizationString
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ComPtr
argument_list|<
name|IApplicationDataContainer
argument_list|>
name|writeRootContainer
init|=
operator|(
name|scope
operator|==
name|QSettings
operator|::
name|UserScope
operator|)
condition|?
name|localContainer
else|:
name|roamingContainer
decl_stmt|;
if|if
condition|(
operator|!
name|applicationName
operator|.
name|isEmpty
argument_list|()
condition|)
name|writeContainer
operator|=
name|createSubContainer
argument_list|(
name|writeRootContainer
operator|.
name|Get
argument_list|()
argument_list|,
name|applicationName
argument_list|)
expr_stmt|;
else|else
name|writeContainer
operator|=
name|createSubContainer
argument_list|(
name|writeRootContainer
operator|.
name|Get
argument_list|()
argument_list|,
name|organizationString
argument_list|)
expr_stmt|;
name|hr
operator|=
name|applicationData
operator|->
name|add_DataChanged
argument_list|(
name|Callback
argument_list|<
name|DataHandler
argument_list|>
argument_list|(
name|this
argument_list|,
operator|&
name|QWinRTSettingsPrivate
operator|::
name|onDataChanged
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|dataChangedToken
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|getContainer
name|IApplicationDataContainer
modifier|*
name|QWinRTSettingsPrivate
operator|::
name|getContainer
parameter_list|(
name|IApplicationDataContainer
modifier|*
name|parent
parameter_list|,
specifier|const
name|QString
modifier|&
name|group
parameter_list|,
name|bool
name|create
parameter_list|)
specifier|const
block|{
name|IApplicationDataContainer
modifier|*
name|current
init|=
name|parent
decl_stmt|;
if|if
condition|(
name|group
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|current
return|;
specifier|const
name|QStringList
name|groupPath
init|=
name|group
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|,
name|QString
operator|::
name|SkipEmptyParts
argument_list|)
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|subGroup
decl|,
name|groupPath
control|)
block|{
name|ComPtr
argument_list|<
name|IApplicationDataContainer
argument_list|>
name|sub
init|=
name|subContainer
argument_list|(
name|current
argument_list|,
name|subGroup
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|sub
operator|&&
name|create
condition|)
name|sub
operator|=
name|createSubContainer
argument_list|(
name|current
argument_list|,
name|subGroup
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|sub
condition|)
return|return
literal|0
return|;
comment|// Something seriously went wrong
name|current
operator|=
name|sub
operator|.
name|Detach
argument_list|()
expr_stmt|;
block|}
return|return
name|current
return|;
block|}
end_function
begin_function
DECL|function|clearContainerMaps
name|void
name|QWinRTSettingsPrivate
operator|::
name|clearContainerMaps
parameter_list|()
block|{
name|readContainers
operator|.
name|clear
argument_list|()
expr_stmt|;
name|writeContainer
operator|.
name|Reset
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isWritable
name|bool
name|QWinRTSettingsPrivate
operator|::
name|isWritable
parameter_list|()
specifier|const
block|{
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|create
name|QSettingsPrivate
modifier|*
name|QSettingsPrivate
operator|::
name|create
parameter_list|(
name|QSettings
operator|::
name|Format
name|format
parameter_list|,
name|QSettings
operator|::
name|Scope
name|scope
parameter_list|,
specifier|const
name|QString
modifier|&
name|organization
parameter_list|,
specifier|const
name|QString
modifier|&
name|application
parameter_list|)
block|{
if|if
condition|(
name|format
operator|==
name|QSettings
operator|::
name|NativeFormat
condition|)
return|return
operator|new
name|QWinRTSettingsPrivate
argument_list|(
name|scope
argument_list|,
name|organization
argument_list|,
name|application
argument_list|)
return|;
else|else
return|return
operator|new
name|QConfFileSettingsPrivate
argument_list|(
name|format
argument_list|,
name|scope
argument_list|,
name|organization
argument_list|,
name|application
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|create
name|QSettingsPrivate
modifier|*
name|QSettingsPrivate
operator|::
name|create
parameter_list|(
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|,
name|QSettings
operator|::
name|Format
name|format
parameter_list|)
block|{
if|if
condition|(
name|format
operator|==
name|QSettings
operator|::
name|NativeFormat
condition|)
return|return
operator|new
name|QWinRTSettingsPrivate
argument_list|(
name|fileName
argument_list|)
return|;
else|else
return|return
operator|new
name|QConfFileSettingsPrivate
argument_list|(
name|fileName
argument_list|,
name|format
argument_list|)
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_SETTINGS
end_comment
end_unit
