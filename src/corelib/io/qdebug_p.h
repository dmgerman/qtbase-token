begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QDEBUG_P_H
end_ifndef
begin_define
DECL|macro|QDEBUG_P_H
define|#
directive|define
name|QDEBUG_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists for the convenience
end_comment
begin_comment
comment|// of other Qt classes.  This header file may change from version to
end_comment
begin_comment
comment|// version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"QtCore/qdebug.h"
end_include
begin_include
include|#
directive|include
file|"QtCore/qmetaobject.h"
end_include
begin_include
include|#
directive|include
file|"QtCore/qflags.h"
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
name|namespace
name|QtDebugUtils
block|{
comment|// inline helpers for formatting basic classes.
name|template
operator|<
name|class
name|Point
operator|>
specifier|static
specifier|inline
name|void
name|formatQPoint
argument_list|(
argument|QDebug&debug
argument_list|,
argument|const Point&point
argument_list|)
block|{
name|debug
operator|<<
name|point
operator|.
name|x
argument_list|()
operator|<<
literal|','
operator|<<
name|point
operator|.
name|y
argument_list|()
block|; }
name|template
operator|<
name|class
name|Size
operator|>
specifier|static
specifier|inline
name|void
name|formatQSize
argument_list|(
argument|QDebug&debug
argument_list|,
argument|const Size&size
argument_list|)
block|{
name|debug
operator|<<
name|size
operator|.
name|width
argument_list|()
operator|<<
literal|", "
operator|<<
name|size
operator|.
name|height
argument_list|()
block|; }
name|template
operator|<
name|class
name|Rect
operator|>
specifier|static
specifier|inline
name|void
name|formatQRect
argument_list|(
argument|QDebug&debug
argument_list|,
argument|const Rect&rect
argument_list|)
block|{
name|debug
operator|<<
name|rect
operator|.
name|x
argument_list|()
operator|<<
literal|','
operator|<<
name|rect
operator|.
name|y
argument_list|()
operator|<<
literal|' '
operator|<<
name|rect
operator|.
name|width
argument_list|()
operator|<<
literal|'x'
operator|<<
name|rect
operator|.
name|height
argument_list|()
block|; }
name|template
operator|<
name|class
name|Margins
operator|>
specifier|static
specifier|inline
name|void
name|formatQMargins
argument_list|(
argument|QDebug&debug
argument_list|,
argument|const Margins&margins
argument_list|)
block|{
name|debug
operator|<<
name|margins
operator|.
name|left
argument_list|()
operator|<<
literal|", "
operator|<<
name|margins
operator|.
name|top
argument_list|()
operator|<<
literal|", "
operator|<<
name|margins
operator|.
name|right
argument_list|()
operator|<<
literal|", "
operator|<<
name|margins
operator|.
name|bottom
argument_list|()
block|; }
ifndef|#
directive|ifndef
name|QT_NO_QOBJECT
name|template
operator|<
name|class
name|QEnum
operator|>
specifier|static
specifier|inline
name|void
name|formatQEnum
argument_list|(
argument|QDebug&debug
argument_list|,
argument|QEnum value
argument_list|)
block|{
specifier|const
name|QMetaObject
operator|*
name|metaObject
operator|=
name|qt_getEnumMetaObject
argument_list|(
name|value
argument_list|)
block|;
specifier|const
name|QMetaEnum
name|me
operator|=
name|metaObject
operator|->
name|enumerator
argument_list|(
name|metaObject
operator|->
name|indexOfEnumerator
argument_list|(
name|qt_getEnumName
argument_list|(
name|value
argument_list|)
argument_list|)
argument_list|)
block|;
if|if
condition|(
specifier|const
name|char
modifier|*
name|key
init|=
name|me
operator|.
name|valueToKey
argument_list|(
name|value
argument_list|)
condition|)
name|debug
operator|<<
name|key
expr_stmt|;
else|else
name|debug
operator|<<
name|int
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|template
operator|<
name|class
name|QEnum
operator|>
specifier|static
specifier|inline
name|void
name|formatNonNullQEnum
argument_list|(
argument|QDebug&debug
argument_list|,
argument|const char *prefix
argument_list|,
argument|QEnum value
argument_list|)
block|{
if|if
condition|(
name|value
condition|)
block|{
name|debug
operator|<<
name|prefix
expr_stmt|;
name|formatQEnum
argument_list|(
name|debug
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
name|template
operator|<
name|class
name|Enum
operator|>
specifier|static
specifier|inline
name|void
name|formatQFlags
argument_list|(
argument|QDebug&debug
argument_list|,
argument|const QFlags<Enum>&value
argument_list|)
block|{
specifier|const
name|QMetaObject
operator|*
name|metaObject
operator|=
name|qt_getEnumMetaObject
argument_list|(
name|Enum
argument_list|()
argument_list|)
block|;
specifier|const
name|QMetaEnum
name|me
operator|=
name|metaObject
operator|->
name|enumerator
argument_list|(
name|metaObject
operator|->
name|indexOfEnumerator
argument_list|(
name|qt_getEnumName
argument_list|(
name|Enum
argument_list|()
argument_list|)
argument_list|)
argument_list|)
block|;
specifier|const
name|QDebugStateSaver
name|saver
argument_list|(
name|debug
argument_list|)
block|;
name|debug
operator|.
name|noquote
argument_list|()
block|;
name|debug
operator|<<
name|me
operator|.
name|valueToKeys
argument_list|(
name|value
argument_list|)
block|; }
name|template
operator|<
name|class
name|Enum
operator|>
specifier|static
specifier|inline
name|void
name|formatNonNullQFlags
argument_list|(
argument|QDebug&debug
argument_list|,
argument|const char *prefix
argument_list|,
argument|const QFlags<Enum>&value
argument_list|)
block|{
if|if
condition|(
name|value
condition|)
block|{
name|debug
operator|<<
name|prefix
expr_stmt|;
name|formatQFlags
argument_list|(
name|debug
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
endif|#
directive|endif
comment|// !QT_NO_QOBJECT
block|}
end_decl_stmt
begin_comment
comment|// namespace QtDebugUtils
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QDEBUG_P_H
end_comment
end_unit
