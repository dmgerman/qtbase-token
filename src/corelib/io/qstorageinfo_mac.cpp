begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Ivan Komissarov<ABBAPOH@gmail.com> ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qstorageinfo_p.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/qfileinfo.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/private/qcore_mac_p.h>
end_include
begin_include
include|#
directive|include
file|<CoreFoundation/CoreFoundation.h>
end_include
begin_include
include|#
directive|include
file|<CoreFoundation/CFURLEnumerator.h>
end_include
begin_include
include|#
directive|include
file|<sys/mount.h>
end_include
begin_define
DECL|macro|QT_STATFSBUF
define|#
directive|define
name|QT_STATFSBUF
value|struct statfs
end_define
begin_define
DECL|macro|QT_STATFS
define|#
directive|define
name|QT_STATFS
value|::statfs
end_define
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|initRootPath
name|void
name|QStorageInfoPrivate
operator|::
name|initRootPath
parameter_list|()
block|{
name|rootPath
operator|=
name|QFileInfo
argument_list|(
name|rootPath
argument_list|)
operator|.
name|canonicalFilePath
argument_list|()
expr_stmt|;
if|if
condition|(
name|rootPath
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|retrieveUrlProperties
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|doStat
name|void
name|QStorageInfoPrivate
operator|::
name|doStat
parameter_list|()
block|{
name|initRootPath
argument_list|()
expr_stmt|;
if|if
condition|(
name|rootPath
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|retrieveLabel
argument_list|()
expr_stmt|;
name|retrievePosixInfo
argument_list|()
expr_stmt|;
name|retrieveUrlProperties
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|retrievePosixInfo
name|void
name|QStorageInfoPrivate
operator|::
name|retrievePosixInfo
parameter_list|()
block|{
name|QT_STATFSBUF
name|statfs_buf
decl_stmt|;
name|int
name|result
init|=
name|QT_STATFS
argument_list|(
name|QFile
operator|::
name|encodeName
argument_list|(
name|rootPath
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|,
operator|&
name|statfs_buf
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|0
condition|)
block|{
name|device
operator|=
name|QByteArray
argument_list|(
name|statfs_buf
operator|.
name|f_mntfromname
argument_list|)
expr_stmt|;
name|readOnly
operator|=
operator|(
name|statfs_buf
operator|.
name|f_flags
operator|&
name|MNT_RDONLY
operator|)
operator|!=
literal|0
expr_stmt|;
name|fileSystemType
operator|=
name|QByteArray
argument_list|(
name|statfs_buf
operator|.
name|f_fstypename
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|CFDictionaryGetInt64
specifier|static
specifier|inline
name|qint64
name|CFDictionaryGetInt64
parameter_list|(
name|CFDictionaryRef
name|dictionary
parameter_list|,
specifier|const
name|void
modifier|*
name|key
parameter_list|)
block|{
name|CFNumberRef
name|cfNumber
init|=
operator|(
name|CFNumberRef
operator|)
name|CFDictionaryGetValue
argument_list|(
name|dictionary
argument_list|,
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|cfNumber
condition|)
return|return
operator|-
literal|1
return|;
name|qint64
name|result
decl_stmt|;
name|bool
name|ok
init|=
name|CFNumberGetValue
argument_list|(
name|cfNumber
argument_list|,
name|kCFNumberSInt64Type
argument_list|,
operator|&
name|result
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ok
condition|)
return|return
operator|-
literal|1
return|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|retrieveUrlProperties
name|void
name|QStorageInfoPrivate
operator|::
name|retrieveUrlProperties
parameter_list|(
name|bool
name|initRootPath
parameter_list|)
block|{
specifier|static
specifier|const
name|void
modifier|*
name|rootPathKeys
index|[]
init|=
block|{
name|kCFURLVolumeURLKey
block|}
decl_stmt|;
specifier|static
specifier|const
name|void
modifier|*
name|propertyKeys
index|[]
init|=
block|{
comment|// kCFURLVolumeNameKey, // 10.7
comment|// kCFURLVolumeLocalizedNameKey, // 10.7
name|kCFURLVolumeTotalCapacityKey
block|,
name|kCFURLVolumeAvailableCapacityKey
block|,
comment|// kCFURLVolumeIsReadOnlyKey // 10.7
block|}
decl_stmt|;
name|size_t
name|size
init|=
operator|(
name|initRootPath
condition|?
sizeof|sizeof
argument_list|(
name|rootPathKeys
argument_list|)
else|:
sizeof|sizeof
argument_list|(
name|propertyKeys
argument_list|)
operator|)
operator|/
sizeof|sizeof
argument_list|(
name|void
operator|*
argument_list|)
decl_stmt|;
name|QCFType
argument_list|<
name|CFArrayRef
argument_list|>
name|keys
init|=
name|CFArrayCreate
argument_list|(
name|kCFAllocatorDefault
argument_list|,
name|initRootPath
condition|?
name|rootPathKeys
else|:
name|propertyKeys
argument_list|,
name|size
argument_list|,
name|Q_NULLPTR
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|keys
condition|)
return|return;
specifier|const
name|QCFString
name|cfPath
init|=
name|rootPath
decl_stmt|;
if|if
condition|(
name|initRootPath
condition|)
name|rootPath
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QCFType
argument_list|<
name|CFURLRef
argument_list|>
name|url
init|=
name|CFURLCreateWithFileSystemPath
argument_list|(
name|kCFAllocatorDefault
argument_list|,
name|cfPath
argument_list|,
name|kCFURLPOSIXPathStyle
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|url
condition|)
return|return;
name|CFErrorRef
name|error
decl_stmt|;
name|QCFType
argument_list|<
name|CFDictionaryRef
argument_list|>
name|map
init|=
name|CFURLCopyResourcePropertiesForKeys
argument_list|(
name|url
argument_list|,
name|keys
argument_list|,
operator|&
name|error
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|map
condition|)
return|return;
if|if
condition|(
name|initRootPath
condition|)
block|{
specifier|const
name|CFURLRef
name|rootUrl
init|=
operator|(
name|CFURLRef
operator|)
name|CFDictionaryGetValue
argument_list|(
name|map
argument_list|,
name|kCFURLVolumeURLKey
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|rootUrl
condition|)
return|return;
name|rootPath
operator|=
name|QCFString
argument_list|(
name|CFURLCopyFileSystemPath
argument_list|(
name|rootUrl
argument_list|,
name|kCFURLPOSIXPathStyle
argument_list|)
argument_list|)
expr_stmt|;
name|valid
operator|=
literal|true
expr_stmt|;
name|ready
operator|=
literal|true
expr_stmt|;
return|return;
block|}
name|bytesTotal
operator|=
name|CFDictionaryGetInt64
argument_list|(
name|map
argument_list|,
name|kCFURLVolumeTotalCapacityKey
argument_list|)
expr_stmt|;
name|bytesAvailable
operator|=
name|CFDictionaryGetInt64
argument_list|(
name|map
argument_list|,
name|kCFURLVolumeAvailableCapacityKey
argument_list|)
expr_stmt|;
name|bytesFree
operator|=
name|bytesAvailable
expr_stmt|;
block|}
end_function
begin_function
DECL|function|retrieveLabel
name|void
name|QStorageInfoPrivate
operator|::
name|retrieveLabel
parameter_list|()
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_IOS
argument_list|)
comment|// deprecated since 10.8
name|FSRef
name|ref
decl_stmt|;
name|FSPathMakeRef
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|UInt8
operator|*
argument_list|>
argument_list|(
name|QFile
operator|::
name|encodeName
argument_list|(
name|rootPath
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|,
operator|&
name|ref
argument_list|,
name|Q_NULLPTR
argument_list|)
expr_stmt|;
comment|// deprecated since 10.8
name|FSCatalogInfo
name|catalogInfo
decl_stmt|;
name|OSErr
name|error
decl_stmt|;
name|error
operator|=
name|FSGetCatalogInfo
argument_list|(
operator|&
name|ref
argument_list|,
name|kFSCatInfoVolume
argument_list|,
operator|&
name|catalogInfo
argument_list|,
name|Q_NULLPTR
argument_list|,
name|Q_NULLPTR
argument_list|,
name|Q_NULLPTR
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
operator|!=
name|noErr
condition|)
return|return;
comment|// deprecated (use CFURLCopyResourcePropertiesForKeys for 10.7 and higher)
name|HFSUniStr255
name|volumeName
decl_stmt|;
name|error
operator|=
name|FSGetVolumeInfo
argument_list|(
name|catalogInfo
operator|.
name|volume
argument_list|,
literal|0
argument_list|,
name|Q_NULLPTR
argument_list|,
name|kFSVolInfoFSInfo
argument_list|,
name|Q_NULLPTR
argument_list|,
operator|&
name|volumeName
argument_list|,
name|Q_NULLPTR
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
operator|==
name|noErr
condition|)
name|name
operator|=
name|QCFString
argument_list|(
name|FSCreateStringFromHFSUniStr
argument_list|(
name|Q_NULLPTR
argument_list|,
operator|&
name|volumeName
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|mountedVolumes
name|QList
argument_list|<
name|QStorageInfo
argument_list|>
name|QStorageInfoPrivate
operator|::
name|mountedVolumes
parameter_list|()
block|{
name|QList
argument_list|<
name|QStorageInfo
argument_list|>
name|volumes
decl_stmt|;
name|QCFType
argument_list|<
name|CFURLEnumeratorRef
argument_list|>
name|enumerator
decl_stmt|;
name|enumerator
operator|=
name|CFURLEnumeratorCreateForMountedVolumes
argument_list|(
name|Q_NULLPTR
argument_list|,
name|kCFURLEnumeratorSkipInvisibles
argument_list|,
name|Q_NULLPTR
argument_list|)
expr_stmt|;
name|CFURLEnumeratorResult
name|result
init|=
name|kCFURLEnumeratorSuccess
decl_stmt|;
do|do
block|{
name|CFURLRef
name|url
decl_stmt|;
name|CFErrorRef
name|error
decl_stmt|;
name|result
operator|=
name|CFURLEnumeratorGetNextURL
argument_list|(
name|enumerator
argument_list|,
operator|&
name|url
argument_list|,
operator|&
name|error
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|==
name|kCFURLEnumeratorSuccess
condition|)
block|{
specifier|const
name|QCFString
name|urlString
init|=
name|CFURLCopyFileSystemPath
argument_list|(
name|url
argument_list|,
name|kCFURLPOSIXPathStyle
argument_list|)
decl_stmt|;
name|volumes
operator|.
name|append
argument_list|(
name|QStorageInfo
argument_list|(
name|urlString
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
name|result
operator|!=
name|kCFURLEnumeratorEnd
condition|)
do|;
return|return
name|volumes
return|;
block|}
end_function
begin_function
DECL|function|root
name|QStorageInfo
name|QStorageInfoPrivate
operator|::
name|root
parameter_list|()
block|{
return|return
name|QStorageInfo
argument_list|(
name|QStringLiteral
argument_list|(
literal|"/"
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
