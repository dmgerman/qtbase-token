begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Copyright (C) 2013 Samuel Gaist<samuel.gaist@edeltech.ch> ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qplatformdefs.h"
end_include
begin_include
include|#
directive|include
file|"qfilesystemengine_p.h"
end_include
begin_include
include|#
directive|include
file|"qfile.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/qvarlengtharray.h>
end_include
begin_include
include|#
directive|include
file|<stdlib.h>
end_include
begin_comment
comment|// for realpath()
end_comment
begin_include
include|#
directive|include
file|<sys/types.h>
end_include
begin_include
include|#
directive|include
file|<sys/stat.h>
end_include
begin_include
include|#
directive|include
file|<unistd.h>
end_include
begin_include
include|#
directive|include
file|<stdio.h>
end_include
begin_include
include|#
directive|include
file|<errno.h>
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
end_if
begin_include
include|#
directive|include
file|<QtCore/private/qcore_mac_p.h>
end_include
begin_include
include|#
directive|include
file|<CoreFoundation/CFBundle.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_OSX
end_ifdef
begin_include
include|#
directive|include
file|<CoreServices/CoreServices.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_IOS
end_ifdef
begin_include
include|#
directive|include
file|<MobileCoreServices/MobileCoreServices.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_function
name|QT_BEGIN_NAMESPACE
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_DARWIN
argument_list|)
DECL|function|hasResourcePropertyFlag
specifier|static
specifier|inline
name|bool
name|hasResourcePropertyFlag
parameter_list|(
specifier|const
name|QFileSystemMetaData
modifier|&
name|data
parameter_list|,
specifier|const
name|QFileSystemEntry
modifier|&
name|entry
parameter_list|,
name|CFStringRef
name|key
parameter_list|)
block|{
name|QCFString
name|path
init|=
name|CFStringCreateWithFileSystemRepresentation
argument_list|(
literal|0
argument_list|,
name|entry
operator|.
name|nativeFilePath
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|path
condition|)
return|return
literal|false
return|;
name|QCFType
argument_list|<
name|CFURLRef
argument_list|>
name|url
init|=
name|CFURLCreateWithFileSystemPath
argument_list|(
literal|0
argument_list|,
name|path
argument_list|,
name|kCFURLPOSIXPathStyle
argument_list|,
name|data
operator|.
name|hasFlags
argument_list|(
name|QFileSystemMetaData
operator|::
name|DirectoryType
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|url
condition|)
return|return
literal|false
return|;
name|CFBooleanRef
name|value
decl_stmt|;
if|if
condition|(
name|CFURLCopyResourcePropertyForKey
argument_list|(
name|url
argument_list|,
name|key
argument_list|,
operator|&
name|value
argument_list|,
name|NULL
argument_list|)
condition|)
block|{
if|if
condition|(
name|value
operator|==
name|kCFBooleanTrue
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|isPackage
specifier|static
name|bool
name|isPackage
parameter_list|(
specifier|const
name|QFileSystemMetaData
modifier|&
name|data
parameter_list|,
specifier|const
name|QFileSystemEntry
modifier|&
name|entry
parameter_list|)
block|{
if|if
condition|(
operator|!
name|data
operator|.
name|isDirectory
argument_list|()
condition|)
return|return
literal|false
return|;
name|QFileInfo
name|info
argument_list|(
name|entry
operator|.
name|filePath
argument_list|()
argument_list|)
decl_stmt|;
name|QString
name|suffix
init|=
name|info
operator|.
name|suffix
argument_list|()
decl_stmt|;
if|if
condition|(
name|suffix
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// First step: is the extension known ?
name|QCFType
argument_list|<
name|CFStringRef
argument_list|>
name|extensionRef
init|=
name|QCFString
operator|::
name|toCFStringRef
argument_list|(
name|suffix
argument_list|)
decl_stmt|;
name|QCFType
argument_list|<
name|CFStringRef
argument_list|>
name|uniformTypeIdentifier
init|=
name|UTTypeCreatePreferredIdentifierForTag
argument_list|(
name|kUTTagClassFilenameExtension
argument_list|,
name|extensionRef
argument_list|,
name|NULL
argument_list|)
decl_stmt|;
if|if
condition|(
name|UTTypeConformsTo
argument_list|(
name|uniformTypeIdentifier
argument_list|,
name|kUTTypeBundle
argument_list|)
condition|)
return|return
literal|true
return|;
comment|// Second step: check if an application knows the package type
name|QCFType
argument_list|<
name|CFStringRef
argument_list|>
name|path
init|=
name|QCFString
operator|::
name|toCFStringRef
argument_list|(
name|entry
operator|.
name|filePath
argument_list|()
argument_list|)
decl_stmt|;
name|QCFType
argument_list|<
name|CFURLRef
argument_list|>
name|url
init|=
name|CFURLCreateWithFileSystemPath
argument_list|(
literal|0
argument_list|,
name|path
argument_list|,
name|kCFURLPOSIXPathStyle
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|UInt32
name|type
decl_stmt|,
name|creator
decl_stmt|;
comment|// Well created packages have the PkgInfo file
if|if
condition|(
name|CFBundleGetPackageInfoInDirectory
argument_list|(
name|url
argument_list|,
operator|&
name|type
argument_list|,
operator|&
name|creator
argument_list|)
condition|)
return|return
literal|true
return|;
ifdef|#
directive|ifdef
name|Q_OS_OSX
comment|// Find if an application other than Finder claims to know how to handle the package
name|QCFType
argument_list|<
name|CFURLRef
argument_list|>
name|application
decl_stmt|;
name|LSGetApplicationForURL
argument_list|(
name|url
argument_list|,
name|kLSRolesEditor
operator||
name|kLSRolesViewer
argument_list|,
name|NULL
argument_list|,
operator|&
name|application
argument_list|)
expr_stmt|;
if|if
condition|(
name|application
condition|)
block|{
name|QCFType
argument_list|<
name|CFBundleRef
argument_list|>
name|bundle
init|=
name|CFBundleCreate
argument_list|(
name|kCFAllocatorDefault
argument_list|,
name|application
argument_list|)
decl_stmt|;
name|CFStringRef
name|identifier
init|=
name|CFBundleGetIdentifier
argument_list|(
name|bundle
argument_list|)
decl_stmt|;
name|QString
name|applicationId
init|=
name|QCFString
operator|::
name|toQString
argument_list|(
name|identifier
argument_list|)
decl_stmt|;
if|if
condition|(
name|applicationId
operator|!=
name|QLatin1String
argument_list|(
literal|"com.apple.finder"
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
endif|#
directive|endif
block|}
comment|// Third step: check if the directory has the package bit set
return|return
name|hasResourcePropertyFlag
argument_list|(
name|data
argument_list|,
name|entry
argument_list|,
name|kCFURLIsPackageKey
argument_list|)
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//static
end_comment
begin_function
DECL|function|getLinkTarget
name|QFileSystemEntry
name|QFileSystemEngine
operator|::
name|getLinkTarget
parameter_list|(
specifier|const
name|QFileSystemEntry
modifier|&
name|link
parameter_list|,
name|QFileSystemMetaData
modifier|&
name|data
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|__GLIBC__
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|PATH_MAX
argument_list|)
DECL|macro|PATH_CHUNK_SIZE
define|#
directive|define
name|PATH_CHUNK_SIZE
value|256
name|char
modifier|*
name|s
init|=
literal|0
decl_stmt|;
name|int
name|len
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|size
init|=
name|PATH_CHUNK_SIZE
decl_stmt|;
while|while
condition|(
literal|1
condition|)
block|{
name|s
operator|=
operator|(
name|char
operator|*
operator|)
operator|::
name|realloc
argument_list|(
name|s
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|Q_CHECK_PTR
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|len
operator|=
operator|::
name|readlink
argument_list|(
name|link
operator|.
name|nativeFilePath
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|s
argument_list|,
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|len
operator|<
literal|0
condition|)
block|{
operator|::
name|free
argument_list|(
name|s
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|len
operator|<
name|size
condition|)
block|{
break|break;
block|}
name|size
operator|*=
literal|2
expr_stmt|;
block|}
else|#
directive|else
name|char
name|s
index|[
name|PATH_MAX
operator|+
literal|1
index|]
decl_stmt|;
name|int
name|len
init|=
name|readlink
argument_list|(
name|link
operator|.
name|nativeFilePath
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|s
argument_list|,
name|PATH_MAX
argument_list|)
decl_stmt|;
endif|#
directive|endif
if|if
condition|(
name|len
operator|>
literal|0
condition|)
block|{
name|QString
name|ret
decl_stmt|;
if|if
condition|(
operator|!
name|data
operator|.
name|hasFlags
argument_list|(
name|QFileSystemMetaData
operator|::
name|DirectoryType
argument_list|)
condition|)
name|fillMetaData
argument_list|(
name|link
argument_list|,
name|data
argument_list|,
name|QFileSystemMetaData
operator|::
name|DirectoryType
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
operator|.
name|isDirectory
argument_list|()
operator|&&
name|s
index|[
literal|0
index|]
operator|!=
literal|'/'
condition|)
block|{
name|QDir
name|parent
argument_list|(
name|link
operator|.
name|filePath
argument_list|()
argument_list|)
decl_stmt|;
name|parent
operator|.
name|cdUp
argument_list|()
expr_stmt|;
name|ret
operator|=
name|parent
operator|.
name|path
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|ret
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|ret
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
condition|)
name|ret
operator|+=
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
block|}
name|s
index|[
name|len
index|]
operator|=
literal|'\0'
expr_stmt|;
name|ret
operator|+=
name|QFile
operator|::
name|decodeName
argument_list|(
name|QByteArray
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|__GLIBC__
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|PATH_MAX
argument_list|)
operator|::
name|free
argument_list|(
name|s
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|ret
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|link
operator|.
name|filePath
argument_list|()
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
condition|)
block|{
name|ret
operator|.
name|prepend
argument_list|(
name|link
operator|.
name|filePath
argument_list|()
operator|.
name|left
argument_list|(
name|link
operator|.
name|filePath
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|.
name|prepend
argument_list|(
name|QDir
operator|::
name|currentPath
argument_list|()
operator|+
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|ret
operator|=
name|QDir
operator|::
name|cleanPath
argument_list|(
name|ret
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
operator|.
name|size
argument_list|()
operator|>
literal|1
operator|&&
name|ret
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
condition|)
name|ret
operator|.
name|chop
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|QFileSystemEntry
argument_list|(
name|ret
argument_list|)
return|;
block|}
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_DARWIN
argument_list|)
block|{
name|QCFString
name|path
init|=
name|CFStringCreateWithFileSystemRepresentation
argument_list|(
literal|0
argument_list|,
name|QFile
operator|::
name|encodeName
argument_list|(
name|QDir
operator|::
name|cleanPath
argument_list|(
name|link
operator|.
name|filePath
argument_list|()
argument_list|)
argument_list|)
operator|.
name|data
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|path
condition|)
return|return
name|QFileSystemEntry
argument_list|()
return|;
name|QCFType
argument_list|<
name|CFURLRef
argument_list|>
name|url
init|=
name|CFURLCreateWithFileSystemPath
argument_list|(
literal|0
argument_list|,
name|path
argument_list|,
name|kCFURLPOSIXPathStyle
argument_list|,
name|data
operator|.
name|hasFlags
argument_list|(
name|QFileSystemMetaData
operator|::
name|DirectoryType
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|url
condition|)
return|return
name|QFileSystemEntry
argument_list|()
return|;
name|QCFType
argument_list|<
name|CFDataRef
argument_list|>
name|bookmarkData
init|=
name|CFURLCreateBookmarkDataFromFile
argument_list|(
literal|0
argument_list|,
name|url
argument_list|,
name|NULL
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|bookmarkData
condition|)
return|return
name|QFileSystemEntry
argument_list|()
return|;
name|QCFType
argument_list|<
name|CFURLRef
argument_list|>
name|resolvedUrl
init|=
name|CFURLCreateByResolvingBookmarkData
argument_list|(
literal|0
argument_list|,
name|bookmarkData
argument_list|,
call|(
name|CFURLBookmarkResolutionOptions
call|)
argument_list|(
name|kCFBookmarkResolutionWithoutUIMask
operator||
name|kCFBookmarkResolutionWithoutMountingMask
argument_list|)
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|resolvedUrl
condition|)
return|return
name|QFileSystemEntry
argument_list|()
return|;
name|QCFString
name|cfstr
argument_list|(
name|CFURLCopyFileSystemPath
argument_list|(
name|resolvedUrl
argument_list|,
name|kCFURLPOSIXPathStyle
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|cfstr
condition|)
return|return
name|QFileSystemEntry
argument_list|()
return|;
return|return
name|QFileSystemEntry
argument_list|(
name|QCFString
operator|::
name|toQString
argument_list|(
name|cfstr
argument_list|)
argument_list|)
return|;
block|}
endif|#
directive|endif
return|return
name|QFileSystemEntry
argument_list|()
return|;
block|}
end_function
begin_comment
comment|//static
end_comment
begin_function
DECL|function|canonicalName
name|QFileSystemEntry
name|QFileSystemEngine
operator|::
name|canonicalName
parameter_list|(
specifier|const
name|QFileSystemEntry
modifier|&
name|entry
parameter_list|,
name|QFileSystemMetaData
modifier|&
name|data
parameter_list|)
block|{
if|if
condition|(
name|entry
operator|.
name|isEmpty
argument_list|()
operator|||
name|entry
operator|.
name|isRoot
argument_list|()
condition|)
return|return
name|entry
return|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_QNX
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_ANDROID
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_HAIKU
argument_list|)
operator|&&
name|_POSIX_VERSION
operator|<
literal|200809L
comment|// realpath(X,0) is not supported
name|Q_UNUSED
argument_list|(
name|data
argument_list|)
expr_stmt|;
return|return
name|QFileSystemEntry
argument_list|(
name|slowCanonicalized
argument_list|(
name|absoluteName
argument_list|(
name|entry
argument_list|)
operator|.
name|filePath
argument_list|()
argument_list|)
argument_list|)
return|;
else|#
directive|else
name|char
modifier|*
name|ret
init|=
literal|0
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_DARWIN
argument_list|)
name|ret
operator|=
operator|(
name|char
operator|*
operator|)
name|malloc
argument_list|(
name|PATH_MAX
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
operator|&&
name|realpath
argument_list|(
name|entry
operator|.
name|nativeFilePath
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
operator|(
name|char
operator|*
operator|)
name|ret
argument_list|)
operator|==
literal|0
condition|)
block|{
specifier|const
name|int
name|savedErrno
init|=
name|errno
decl_stmt|;
comment|// errno is checked below, and free() might change it
name|free
argument_list|(
name|ret
argument_list|)
expr_stmt|;
name|errno
operator|=
name|savedErrno
expr_stmt|;
name|ret
operator|=
literal|0
expr_stmt|;
block|}
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_ANDROID
argument_list|)
comment|// On some Android versions, realpath() will return a path even if it does not exist
comment|// To work around this, we check existence in advance.
if|if
condition|(
operator|!
name|data
operator|.
name|hasFlags
argument_list|(
name|QFileSystemMetaData
operator|::
name|ExistsAttribute
argument_list|)
condition|)
name|fillMetaData
argument_list|(
name|entry
argument_list|,
name|data
argument_list|,
name|QFileSystemMetaData
operator|::
name|ExistsAttribute
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|data
operator|.
name|exists
argument_list|()
condition|)
block|{
name|ret
operator|=
literal|0
expr_stmt|;
name|errno
operator|=
name|ENOENT
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
operator|(
name|char
operator|*
operator|)
name|malloc
argument_list|(
name|PATH_MAX
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|realpath
argument_list|(
name|entry
operator|.
name|nativeFilePath
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
operator|(
name|char
operator|*
operator|)
name|ret
argument_list|)
operator|==
literal|0
condition|)
block|{
specifier|const
name|int
name|savedErrno
init|=
name|errno
decl_stmt|;
comment|// errno is checked below, and free() might change it
name|free
argument_list|(
name|ret
argument_list|)
expr_stmt|;
name|errno
operator|=
name|savedErrno
expr_stmt|;
name|ret
operator|=
literal|0
expr_stmt|;
block|}
block|}
else|#
directive|else
if|#
directive|if
name|_POSIX_VERSION
operator|>=
literal|200801L
name|ret
operator|=
name|realpath
argument_list|(
name|entry
operator|.
name|nativeFilePath
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
operator|(
name|char
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
else|#
directive|else
name|ret
operator|=
operator|(
name|char
operator|*
operator|)
name|malloc
argument_list|(
name|PATH_MAX
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|realpath
argument_list|(
name|entry
operator|.
name|nativeFilePath
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
operator|(
name|char
operator|*
operator|)
name|ret
argument_list|)
operator|==
literal|0
condition|)
block|{
specifier|const
name|int
name|savedErrno
init|=
name|errno
decl_stmt|;
comment|// errno is checked below, and free() might change it
name|free
argument_list|(
name|ret
argument_list|)
expr_stmt|;
name|errno
operator|=
name|savedErrno
expr_stmt|;
name|ret
operator|=
literal|0
expr_stmt|;
block|}
endif|#
directive|endif
endif|#
directive|endif
if|if
condition|(
name|ret
condition|)
block|{
name|data
operator|.
name|knownFlagsMask
operator||=
name|QFileSystemMetaData
operator|::
name|ExistsAttribute
expr_stmt|;
name|data
operator|.
name|entryFlags
operator||=
name|QFileSystemMetaData
operator|::
name|ExistsAttribute
expr_stmt|;
name|QString
name|canonicalPath
init|=
name|QDir
operator|::
name|cleanPath
argument_list|(
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|ret
argument_list|)
argument_list|)
decl_stmt|;
name|free
argument_list|(
name|ret
argument_list|)
expr_stmt|;
return|return
name|QFileSystemEntry
argument_list|(
name|canonicalPath
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|errno
operator|==
name|ENOENT
condition|)
block|{
comment|// file doesn't exist
name|data
operator|.
name|knownFlagsMask
operator||=
name|QFileSystemMetaData
operator|::
name|ExistsAttribute
expr_stmt|;
name|data
operator|.
name|entryFlags
operator|&=
operator|~
operator|(
name|QFileSystemMetaData
operator|::
name|ExistsAttribute
operator|)
expr_stmt|;
return|return
name|QFileSystemEntry
argument_list|()
return|;
block|}
return|return
name|entry
return|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|//static
end_comment
begin_function
DECL|function|absoluteName
name|QFileSystemEntry
name|QFileSystemEngine
operator|::
name|absoluteName
parameter_list|(
specifier|const
name|QFileSystemEntry
modifier|&
name|entry
parameter_list|)
block|{
if|if
condition|(
name|entry
operator|.
name|isAbsolute
argument_list|()
operator|&&
name|entry
operator|.
name|isClean
argument_list|()
condition|)
return|return
name|entry
return|;
name|QByteArray
name|orig
init|=
name|entry
operator|.
name|nativeFilePath
argument_list|()
decl_stmt|;
name|QByteArray
name|result
decl_stmt|;
if|if
condition|(
name|orig
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|orig
operator|.
name|startsWith
argument_list|(
literal|'/'
argument_list|)
condition|)
block|{
name|QFileSystemEntry
name|cur
argument_list|(
name|currentPath
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|=
name|cur
operator|.
name|nativeFilePath
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|orig
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
operator|(
name|orig
operator|.
name|length
argument_list|()
operator|==
literal|1
operator|&&
name|orig
index|[
literal|0
index|]
operator|==
literal|'.'
operator|)
condition|)
block|{
if|if
condition|(
operator|!
name|result
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|result
operator|.
name|endsWith
argument_list|(
literal|'/'
argument_list|)
condition|)
name|result
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
name|orig
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|.
name|length
argument_list|()
operator|==
literal|1
operator|&&
name|result
index|[
literal|0
index|]
operator|==
literal|'/'
condition|)
return|return
name|QFileSystemEntry
argument_list|(
name|result
argument_list|,
name|QFileSystemEntry
operator|::
name|FromNativePath
argument_list|()
argument_list|)
return|;
specifier|const
name|bool
name|isDir
init|=
name|result
operator|.
name|endsWith
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
comment|/* as long as QDir::cleanPath() operates on a QString we have to convert to a string here.      * ideally we never convert to a string since that loses information. Please fix after      * we get a QByteArray version of QDir::cleanPath()      */
name|QFileSystemEntry
name|resultingEntry
argument_list|(
name|result
argument_list|,
name|QFileSystemEntry
operator|::
name|FromNativePath
argument_list|()
argument_list|)
decl_stmt|;
name|QString
name|stringVersion
init|=
name|QDir
operator|::
name|cleanPath
argument_list|(
name|resultingEntry
operator|.
name|filePath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|isDir
condition|)
name|stringVersion
operator|.
name|append
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|QFileSystemEntry
argument_list|(
name|stringVersion
argument_list|)
return|;
block|}
end_function
begin_comment
comment|//static
end_comment
begin_function
DECL|function|id
name|QByteArray
name|QFileSystemEngine
operator|::
name|id
parameter_list|(
specifier|const
name|QFileSystemEntry
modifier|&
name|entry
parameter_list|)
block|{
name|struct
name|stat
name|statResult
decl_stmt|;
if|if
condition|(
name|stat
argument_list|(
name|entry
operator|.
name|nativeFilePath
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
operator|&
name|statResult
argument_list|)
condition|)
block|{
name|qErrnoWarning
argument_list|(
literal|"stat() failed for '%s'"
argument_list|,
name|entry
operator|.
name|nativeFilePath
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|QByteArray
argument_list|()
return|;
block|}
name|QByteArray
name|result
init|=
name|QByteArray
operator|::
name|number
argument_list|(
name|quint64
argument_list|(
name|statResult
operator|.
name|st_dev
argument_list|)
argument_list|,
literal|16
argument_list|)
decl_stmt|;
name|result
operator|+=
literal|':'
expr_stmt|;
name|result
operator|+=
name|QByteArray
operator|::
name|number
argument_list|(
name|quint64
argument_list|(
name|statResult
operator|.
name|st_ino
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_comment
comment|//static
end_comment
begin_function
DECL|function|resolveUserName
name|QString
name|QFileSystemEngine
operator|::
name|resolveUserName
parameter_list|(
name|uint
name|userId
parameter_list|)
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_THREAD
argument_list|)
operator|&&
name|defined
argument_list|(
name|_POSIX_THREAD_SAFE_FUNCTIONS
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_OPENBSD
argument_list|)
name|int
name|size_max
init|=
name|sysconf
argument_list|(
name|_SC_GETPW_R_SIZE_MAX
argument_list|)
decl_stmt|;
if|if
condition|(
name|size_max
operator|==
operator|-
literal|1
condition|)
name|size_max
operator|=
literal|1024
expr_stmt|;
name|QVarLengthArray
argument_list|<
name|char
argument_list|,
literal|1024
argument_list|>
name|buf
argument_list|(
name|size_max
argument_list|)
decl_stmt|;
endif|#
directive|endif
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_INTEGRITY
argument_list|)
name|struct
name|passwd
modifier|*
name|pw
init|=
literal|0
decl_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_THREAD
argument_list|)
operator|&&
name|defined
argument_list|(
name|_POSIX_THREAD_SAFE_FUNCTIONS
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_OPENBSD
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_VXWORKS
argument_list|)
name|struct
name|passwd
name|entry
decl_stmt|;
name|getpwuid_r
argument_list|(
name|userId
argument_list|,
operator|&
name|entry
argument_list|,
name|buf
operator|.
name|data
argument_list|()
argument_list|,
name|buf
operator|.
name|size
argument_list|()
argument_list|,
operator|&
name|pw
argument_list|)
expr_stmt|;
else|#
directive|else
name|pw
operator|=
name|getpwuid
argument_list|(
name|userId
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|pw
condition|)
return|return
name|QFile
operator|::
name|decodeName
argument_list|(
name|QByteArray
argument_list|(
name|pw
operator|->
name|pw_name
argument_list|)
argument_list|)
return|;
endif|#
directive|endif
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_comment
comment|//static
end_comment
begin_function
DECL|function|resolveGroupName
name|QString
name|QFileSystemEngine
operator|::
name|resolveGroupName
parameter_list|(
name|uint
name|groupId
parameter_list|)
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_THREAD
argument_list|)
operator|&&
name|defined
argument_list|(
name|_POSIX_THREAD_SAFE_FUNCTIONS
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_OPENBSD
argument_list|)
name|int
name|size_max
init|=
name|sysconf
argument_list|(
name|_SC_GETPW_R_SIZE_MAX
argument_list|)
decl_stmt|;
if|if
condition|(
name|size_max
operator|==
operator|-
literal|1
condition|)
name|size_max
operator|=
literal|1024
expr_stmt|;
name|QVarLengthArray
argument_list|<
name|char
argument_list|,
literal|1024
argument_list|>
name|buf
argument_list|(
name|size_max
argument_list|)
decl_stmt|;
endif|#
directive|endif
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_INTEGRITY
argument_list|)
name|struct
name|group
modifier|*
name|gr
init|=
literal|0
decl_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_THREAD
argument_list|)
operator|&&
name|defined
argument_list|(
name|_POSIX_THREAD_SAFE_FUNCTIONS
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_OPENBSD
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_VXWORKS
argument_list|)
name|size_max
operator|=
name|sysconf
argument_list|(
name|_SC_GETGR_R_SIZE_MAX
argument_list|)
expr_stmt|;
if|if
condition|(
name|size_max
operator|==
operator|-
literal|1
condition|)
name|size_max
operator|=
literal|1024
expr_stmt|;
name|buf
operator|.
name|resize
argument_list|(
name|size_max
argument_list|)
expr_stmt|;
name|struct
name|group
name|entry
decl_stmt|;
comment|// Some large systems have more members than the POSIX max size
comment|// Loop over by doubling the buffer size (upper limit 250k)
for|for
control|(
name|unsigned
name|size
init|=
name|size_max
init|;
name|size
operator|<
literal|256000
condition|;
name|size
operator|+=
name|size
control|)
block|{
name|buf
operator|.
name|resize
argument_list|(
name|size
argument_list|)
expr_stmt|;
comment|// ERANGE indicates that the buffer was too small
if|if
condition|(
operator|!
name|getgrgid_r
argument_list|(
name|groupId
argument_list|,
operator|&
name|entry
argument_list|,
name|buf
operator|.
name|data
argument_list|()
argument_list|,
name|buf
operator|.
name|size
argument_list|()
argument_list|,
operator|&
name|gr
argument_list|)
operator|||
name|errno
operator|!=
name|ERANGE
condition|)
break|break;
block|}
else|#
directive|else
name|gr
operator|=
name|getgrgid
argument_list|(
name|groupId
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|gr
condition|)
return|return
name|QFile
operator|::
name|decodeName
argument_list|(
name|QByteArray
argument_list|(
name|gr
operator|->
name|gr_name
argument_list|)
argument_list|)
return|;
endif|#
directive|endif
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_DARWIN
argument_list|)
end_if
begin_comment
comment|//static
end_comment
begin_function
DECL|function|bundleName
name|QString
name|QFileSystemEngine
operator|::
name|bundleName
parameter_list|(
specifier|const
name|QFileSystemEntry
modifier|&
name|entry
parameter_list|)
block|{
name|QCFType
argument_list|<
name|CFURLRef
argument_list|>
name|url
init|=
name|CFURLCreateWithFileSystemPath
argument_list|(
literal|0
argument_list|,
name|QCFString
argument_list|(
name|entry
operator|.
name|filePath
argument_list|()
argument_list|)
argument_list|,
name|kCFURLPOSIXPathStyle
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|QCFType
argument_list|<
name|CFDictionaryRef
argument_list|>
name|dict
init|=
name|CFBundleCopyInfoDictionaryForURL
argument_list|(
name|url
argument_list|)
condition|)
block|{
if|if
condition|(
name|CFTypeRef
name|name
init|=
operator|(
name|CFTypeRef
operator|)
name|CFDictionaryGetValue
argument_list|(
name|dict
argument_list|,
name|kCFBundleNameKey
argument_list|)
condition|)
block|{
if|if
condition|(
name|CFGetTypeID
argument_list|(
name|name
argument_list|)
operator|==
name|CFStringGetTypeID
argument_list|()
condition|)
return|return
name|QCFString
operator|::
name|toQString
argument_list|(
operator|(
name|CFStringRef
operator|)
name|name
argument_list|)
return|;
block|}
block|}
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//static
end_comment
begin_function
DECL|function|fillMetaData
name|bool
name|QFileSystemEngine
operator|::
name|fillMetaData
parameter_list|(
specifier|const
name|QFileSystemEntry
modifier|&
name|entry
parameter_list|,
name|QFileSystemMetaData
modifier|&
name|data
parameter_list|,
name|QFileSystemMetaData
operator|::
name|MetaDataFlags
name|what
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_DARWIN
argument_list|)
if|if
condition|(
name|what
operator|&
name|QFileSystemMetaData
operator|::
name|BundleType
condition|)
block|{
if|if
condition|(
operator|!
name|data
operator|.
name|hasFlags
argument_list|(
name|QFileSystemMetaData
operator|::
name|DirectoryType
argument_list|)
condition|)
name|what
operator||=
name|QFileSystemMetaData
operator|::
name|DirectoryType
expr_stmt|;
block|}
if|if
condition|(
name|what
operator|&
name|QFileSystemMetaData
operator|::
name|HiddenAttribute
condition|)
block|{
comment|// OS X>= 10.5: st_flags& UF_HIDDEN
name|what
operator||=
name|QFileSystemMetaData
operator|::
name|PosixStatFlags
expr_stmt|;
block|}
endif|#
directive|endif
comment|// defined(Q_OS_DARWIN)
if|if
condition|(
name|what
operator|&
name|QFileSystemMetaData
operator|::
name|PosixStatFlags
condition|)
name|what
operator||=
name|QFileSystemMetaData
operator|::
name|PosixStatFlags
expr_stmt|;
if|if
condition|(
name|what
operator|&
name|QFileSystemMetaData
operator|::
name|ExistsAttribute
condition|)
block|{
comment|//  FIXME:  Would other queries being performed provide this bit?
name|what
operator||=
name|QFileSystemMetaData
operator|::
name|PosixStatFlags
expr_stmt|;
block|}
name|data
operator|.
name|entryFlags
operator|&=
operator|~
name|what
expr_stmt|;
specifier|const
name|char
modifier|*
name|nativeFilePath
decl_stmt|;
name|int
name|nativeFilePathLength
decl_stmt|;
block|{
specifier|const
name|QByteArray
modifier|&
name|path
init|=
name|entry
operator|.
name|nativeFilePath
argument_list|()
decl_stmt|;
name|nativeFilePath
operator|=
name|path
operator|.
name|constData
argument_list|()
expr_stmt|;
name|nativeFilePathLength
operator|=
name|path
operator|.
name|size
argument_list|()
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|nativeFilePathLength
argument_list|)
expr_stmt|;
block|}
name|bool
name|entryExists
init|=
literal|true
decl_stmt|;
comment|// innocent until proven otherwise
name|QT_STATBUF
name|statBuffer
decl_stmt|;
name|bool
name|statBufferValid
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|what
operator|&
name|QFileSystemMetaData
operator|::
name|LinkType
condition|)
block|{
if|if
condition|(
name|QT_LSTAT
argument_list|(
name|nativeFilePath
argument_list|,
operator|&
name|statBuffer
argument_list|)
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|S_ISLNK
argument_list|(
name|statBuffer
operator|.
name|st_mode
argument_list|)
condition|)
block|{
name|data
operator|.
name|entryFlags
operator||=
name|QFileSystemMetaData
operator|::
name|LinkType
expr_stmt|;
block|}
else|else
block|{
name|statBufferValid
operator|=
literal|true
expr_stmt|;
name|data
operator|.
name|entryFlags
operator|&=
operator|~
name|QFileSystemMetaData
operator|::
name|PosixStatFlags
expr_stmt|;
block|}
block|}
else|else
block|{
name|entryExists
operator|=
literal|false
expr_stmt|;
block|}
name|data
operator|.
name|knownFlagsMask
operator||=
name|QFileSystemMetaData
operator|::
name|LinkType
expr_stmt|;
block|}
if|if
condition|(
name|statBufferValid
operator|||
operator|(
name|what
operator|&
name|QFileSystemMetaData
operator|::
name|PosixStatFlags
operator|)
condition|)
block|{
if|if
condition|(
name|entryExists
operator|&&
operator|!
name|statBufferValid
condition|)
name|statBufferValid
operator|=
operator|(
name|QT_STAT
argument_list|(
name|nativeFilePath
argument_list|,
operator|&
name|statBuffer
argument_list|)
operator|==
literal|0
operator|)
expr_stmt|;
if|if
condition|(
name|statBufferValid
condition|)
name|data
operator|.
name|fillFromStatBuf
argument_list|(
name|statBuffer
argument_list|)
expr_stmt|;
else|else
block|{
name|entryExists
operator|=
literal|false
expr_stmt|;
name|data
operator|.
name|creationTime_
operator|=
literal|0
expr_stmt|;
name|data
operator|.
name|modificationTime_
operator|=
literal|0
expr_stmt|;
name|data
operator|.
name|accessTime_
operator|=
literal|0
expr_stmt|;
name|data
operator|.
name|size_
operator|=
literal|0
expr_stmt|;
name|data
operator|.
name|userId_
operator|=
operator|(
name|uint
operator|)
operator|-
literal|2
expr_stmt|;
name|data
operator|.
name|groupId_
operator|=
operator|(
name|uint
operator|)
operator|-
literal|2
expr_stmt|;
block|}
comment|// reset the mask
name|data
operator|.
name|knownFlagsMask
operator||=
name|QFileSystemMetaData
operator|::
name|PosixStatFlags
operator||
name|QFileSystemMetaData
operator|::
name|ExistsAttribute
expr_stmt|;
block|}
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_DARWIN
argument_list|)
if|if
condition|(
name|what
operator|&
name|QFileSystemMetaData
operator|::
name|AliasType
condition|)
block|{
if|if
condition|(
name|entryExists
operator|&&
name|hasResourcePropertyFlag
argument_list|(
name|data
argument_list|,
name|entry
argument_list|,
name|kCFURLIsAliasFileKey
argument_list|)
condition|)
name|data
operator|.
name|entryFlags
operator||=
name|QFileSystemMetaData
operator|::
name|AliasType
expr_stmt|;
name|data
operator|.
name|knownFlagsMask
operator||=
name|QFileSystemMetaData
operator|::
name|AliasType
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
name|what
operator|&
name|QFileSystemMetaData
operator|::
name|UserPermissions
condition|)
block|{
comment|// calculate user permissions
if|if
condition|(
name|entryExists
condition|)
block|{
if|if
condition|(
name|what
operator|&
name|QFileSystemMetaData
operator|::
name|UserReadPermission
condition|)
block|{
if|if
condition|(
name|QT_ACCESS
argument_list|(
name|nativeFilePath
argument_list|,
name|R_OK
argument_list|)
operator|==
literal|0
condition|)
name|data
operator|.
name|entryFlags
operator||=
name|QFileSystemMetaData
operator|::
name|UserReadPermission
expr_stmt|;
block|}
if|if
condition|(
name|what
operator|&
name|QFileSystemMetaData
operator|::
name|UserWritePermission
condition|)
block|{
if|if
condition|(
name|QT_ACCESS
argument_list|(
name|nativeFilePath
argument_list|,
name|W_OK
argument_list|)
operator|==
literal|0
condition|)
name|data
operator|.
name|entryFlags
operator||=
name|QFileSystemMetaData
operator|::
name|UserWritePermission
expr_stmt|;
block|}
if|if
condition|(
name|what
operator|&
name|QFileSystemMetaData
operator|::
name|UserExecutePermission
condition|)
block|{
if|if
condition|(
name|QT_ACCESS
argument_list|(
name|nativeFilePath
argument_list|,
name|X_OK
argument_list|)
operator|==
literal|0
condition|)
name|data
operator|.
name|entryFlags
operator||=
name|QFileSystemMetaData
operator|::
name|UserExecutePermission
expr_stmt|;
block|}
block|}
name|data
operator|.
name|knownFlagsMask
operator||=
operator|(
name|what
operator|&
name|QFileSystemMetaData
operator|::
name|UserPermissions
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|what
operator|&
name|QFileSystemMetaData
operator|::
name|HiddenAttribute
operator|&&
operator|!
name|data
operator|.
name|isHidden
argument_list|()
condition|)
block|{
name|QString
name|fileName
init|=
name|entry
operator|.
name|fileName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|fileName
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|&&
name|fileName
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|==
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
operator|)
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_DARWIN
argument_list|)
operator|||
operator|(
name|entryExists
operator|&&
name|hasResourcePropertyFlag
argument_list|(
name|data
argument_list|,
name|entry
argument_list|,
name|kCFURLIsHiddenKey
argument_list|)
operator|)
endif|#
directive|endif
condition|)
name|data
operator|.
name|entryFlags
operator||=
name|QFileSystemMetaData
operator|::
name|HiddenAttribute
expr_stmt|;
name|data
operator|.
name|knownFlagsMask
operator||=
name|QFileSystemMetaData
operator|::
name|HiddenAttribute
expr_stmt|;
block|}
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_DARWIN
argument_list|)
if|if
condition|(
name|what
operator|&
name|QFileSystemMetaData
operator|::
name|BundleType
condition|)
block|{
if|if
condition|(
name|entryExists
operator|&&
name|isPackage
argument_list|(
name|data
argument_list|,
name|entry
argument_list|)
condition|)
name|data
operator|.
name|entryFlags
operator||=
name|QFileSystemMetaData
operator|::
name|BundleType
expr_stmt|;
name|data
operator|.
name|knownFlagsMask
operator||=
name|QFileSystemMetaData
operator|::
name|BundleType
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
operator|!
name|entryExists
condition|)
block|{
name|data
operator|.
name|clearFlags
argument_list|(
name|what
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
name|data
operator|.
name|hasFlags
argument_list|(
name|what
argument_list|)
return|;
block|}
end_function
begin_comment
comment|//static
end_comment
begin_function
DECL|function|createDirectory
name|bool
name|QFileSystemEngine
operator|::
name|createDirectory
parameter_list|(
specifier|const
name|QFileSystemEntry
modifier|&
name|entry
parameter_list|,
name|bool
name|createParents
parameter_list|)
block|{
name|QString
name|dirName
init|=
name|entry
operator|.
name|filePath
argument_list|()
decl_stmt|;
if|if
condition|(
name|createParents
condition|)
block|{
name|dirName
operator|=
name|QDir
operator|::
name|cleanPath
argument_list|(
name|dirName
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|oldslash
init|=
operator|-
literal|1
init|,
name|slash
init|=
literal|0
init|;
name|slash
operator|!=
operator|-
literal|1
condition|;
name|oldslash
operator|=
name|slash
control|)
block|{
name|slash
operator|=
name|dirName
operator|.
name|indexOf
argument_list|(
name|QDir
operator|::
name|separator
argument_list|()
argument_list|,
name|oldslash
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|slash
operator|==
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|oldslash
operator|==
name|dirName
operator|.
name|length
argument_list|()
condition|)
break|break;
name|slash
operator|=
name|dirName
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|slash
condition|)
block|{
specifier|const
name|QByteArray
name|chunk
init|=
name|QFile
operator|::
name|encodeName
argument_list|(
name|dirName
operator|.
name|left
argument_list|(
name|slash
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|QT_MKDIR
argument_list|(
name|chunk
operator|.
name|constData
argument_list|()
argument_list|,
literal|0777
argument_list|)
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|errno
operator|==
name|EEXIST
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_QNX
argument_list|)
comment|// On QNX the QNet (VFS paths of other hosts mounted under a directory
comment|// such as /net) mountpoint returns ENOENT, despite existing. stat()
comment|// on the QNet mountpoint returns successfully and reports S_IFDIR.
operator|||
name|errno
operator|==
name|ENOENT
endif|#
directive|endif
condition|)
block|{
name|QT_STATBUF
name|st
decl_stmt|;
if|if
condition|(
name|QT_STAT
argument_list|(
name|chunk
operator|.
name|constData
argument_list|()
argument_list|,
operator|&
name|st
argument_list|)
operator|==
literal|0
operator|&&
operator|(
name|st
operator|.
name|st_mode
operator|&
name|S_IFMT
operator|)
operator|==
name|S_IFDIR
condition|)
continue|continue;
block|}
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_DARWIN
argument_list|)
comment|// Mac X doesn't support trailing /'s
if|if
condition|(
name|dirName
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
condition|)
name|dirName
operator|.
name|chop
argument_list|(
literal|1
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
operator|(
name|QT_MKDIR
argument_list|(
name|QFile
operator|::
name|encodeName
argument_list|(
name|dirName
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|,
literal|0777
argument_list|)
operator|==
literal|0
operator|)
return|;
block|}
end_function
begin_comment
comment|//static
end_comment
begin_function
DECL|function|removeDirectory
name|bool
name|QFileSystemEngine
operator|::
name|removeDirectory
parameter_list|(
specifier|const
name|QFileSystemEntry
modifier|&
name|entry
parameter_list|,
name|bool
name|removeEmptyParents
parameter_list|)
block|{
if|if
condition|(
name|removeEmptyParents
condition|)
block|{
name|QString
name|dirName
init|=
name|QDir
operator|::
name|cleanPath
argument_list|(
name|entry
operator|.
name|filePath
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|oldslash
init|=
literal|0
init|,
name|slash
init|=
name|dirName
operator|.
name|length
argument_list|()
init|;
name|slash
operator|>
literal|0
condition|;
name|oldslash
operator|=
name|slash
control|)
block|{
specifier|const
name|QByteArray
name|chunk
init|=
name|QFile
operator|::
name|encodeName
argument_list|(
name|dirName
operator|.
name|left
argument_list|(
name|slash
argument_list|)
argument_list|)
decl_stmt|;
name|QT_STATBUF
name|st
decl_stmt|;
if|if
condition|(
name|QT_STAT
argument_list|(
name|chunk
operator|.
name|constData
argument_list|()
argument_list|,
operator|&
name|st
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
operator|(
name|st
operator|.
name|st_mode
operator|&
name|S_IFMT
operator|)
operator|!=
name|S_IFDIR
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|::
name|rmdir
argument_list|(
name|chunk
operator|.
name|constData
argument_list|()
argument_list|)
operator|!=
literal|0
condition|)
return|return
name|oldslash
operator|!=
literal|0
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
name|slash
operator|=
name|dirName
operator|.
name|lastIndexOf
argument_list|(
name|QDir
operator|::
name|separator
argument_list|()
argument_list|,
name|oldslash
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
return|return
name|rmdir
argument_list|(
name|QFile
operator|::
name|encodeName
argument_list|(
name|entry
operator|.
name|filePath
argument_list|()
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|)
operator|==
literal|0
return|;
block|}
end_function
begin_comment
comment|//static
end_comment
begin_function
DECL|function|createLink
name|bool
name|QFileSystemEngine
operator|::
name|createLink
parameter_list|(
specifier|const
name|QFileSystemEntry
modifier|&
name|source
parameter_list|,
specifier|const
name|QFileSystemEntry
modifier|&
name|target
parameter_list|,
name|QSystemError
modifier|&
name|error
parameter_list|)
block|{
if|if
condition|(
operator|::
name|symlink
argument_list|(
name|source
operator|.
name|nativeFilePath
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|target
operator|.
name|nativeFilePath
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
operator|==
literal|0
condition|)
return|return
literal|true
return|;
name|error
operator|=
name|QSystemError
argument_list|(
name|errno
argument_list|,
name|QSystemError
operator|::
name|StandardLibraryError
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|//static
end_comment
begin_function
DECL|function|copyFile
name|bool
name|QFileSystemEngine
operator|::
name|copyFile
parameter_list|(
specifier|const
name|QFileSystemEntry
modifier|&
name|source
parameter_list|,
specifier|const
name|QFileSystemEntry
modifier|&
name|target
parameter_list|,
name|QSystemError
modifier|&
name|error
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|error
operator|=
name|QSystemError
argument_list|(
name|ENOSYS
argument_list|,
name|QSystemError
operator|::
name|StandardLibraryError
argument_list|)
expr_stmt|;
comment|//Function not implemented
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|//static
end_comment
begin_function
DECL|function|renameFile
name|bool
name|QFileSystemEngine
operator|::
name|renameFile
parameter_list|(
specifier|const
name|QFileSystemEntry
modifier|&
name|source
parameter_list|,
specifier|const
name|QFileSystemEntry
modifier|&
name|target
parameter_list|,
name|QSystemError
modifier|&
name|error
parameter_list|)
block|{
if|if
condition|(
operator|::
name|rename
argument_list|(
name|source
operator|.
name|nativeFilePath
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|target
operator|.
name|nativeFilePath
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
operator|==
literal|0
condition|)
return|return
literal|true
return|;
name|error
operator|=
name|QSystemError
argument_list|(
name|errno
argument_list|,
name|QSystemError
operator|::
name|StandardLibraryError
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|//static
end_comment
begin_function
DECL|function|removeFile
name|bool
name|QFileSystemEngine
operator|::
name|removeFile
parameter_list|(
specifier|const
name|QFileSystemEntry
modifier|&
name|entry
parameter_list|,
name|QSystemError
modifier|&
name|error
parameter_list|)
block|{
if|if
condition|(
name|unlink
argument_list|(
name|entry
operator|.
name|nativeFilePath
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
operator|==
literal|0
condition|)
return|return
literal|true
return|;
name|error
operator|=
name|QSystemError
argument_list|(
name|errno
argument_list|,
name|QSystemError
operator|::
name|StandardLibraryError
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|//static
end_comment
begin_function
DECL|function|setPermissions
name|bool
name|QFileSystemEngine
operator|::
name|setPermissions
parameter_list|(
specifier|const
name|QFileSystemEntry
modifier|&
name|entry
parameter_list|,
name|QFile
operator|::
name|Permissions
name|permissions
parameter_list|,
name|QSystemError
modifier|&
name|error
parameter_list|,
name|QFileSystemMetaData
modifier|*
name|data
parameter_list|)
block|{
name|mode_t
name|mode
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|permissions
operator|&
operator|(
name|QFile
operator|::
name|ReadOwner
operator||
name|QFile
operator|::
name|ReadUser
operator|)
condition|)
name|mode
operator||=
name|S_IRUSR
expr_stmt|;
if|if
condition|(
name|permissions
operator|&
operator|(
name|QFile
operator|::
name|WriteOwner
operator||
name|QFile
operator|::
name|WriteUser
operator|)
condition|)
name|mode
operator||=
name|S_IWUSR
expr_stmt|;
if|if
condition|(
name|permissions
operator|&
operator|(
name|QFile
operator|::
name|ExeOwner
operator||
name|QFile
operator|::
name|ExeUser
operator|)
condition|)
name|mode
operator||=
name|S_IXUSR
expr_stmt|;
if|if
condition|(
name|permissions
operator|&
name|QFile
operator|::
name|ReadGroup
condition|)
name|mode
operator||=
name|S_IRGRP
expr_stmt|;
if|if
condition|(
name|permissions
operator|&
name|QFile
operator|::
name|WriteGroup
condition|)
name|mode
operator||=
name|S_IWGRP
expr_stmt|;
if|if
condition|(
name|permissions
operator|&
name|QFile
operator|::
name|ExeGroup
condition|)
name|mode
operator||=
name|S_IXGRP
expr_stmt|;
if|if
condition|(
name|permissions
operator|&
name|QFile
operator|::
name|ReadOther
condition|)
name|mode
operator||=
name|S_IROTH
expr_stmt|;
if|if
condition|(
name|permissions
operator|&
name|QFile
operator|::
name|WriteOther
condition|)
name|mode
operator||=
name|S_IWOTH
expr_stmt|;
if|if
condition|(
name|permissions
operator|&
name|QFile
operator|::
name|ExeOther
condition|)
name|mode
operator||=
name|S_IXOTH
expr_stmt|;
name|bool
name|success
init|=
operator|::
name|chmod
argument_list|(
name|entry
operator|.
name|nativeFilePath
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|mode
argument_list|)
operator|==
literal|0
decl_stmt|;
if|if
condition|(
name|success
operator|&&
name|data
condition|)
block|{
name|data
operator|->
name|entryFlags
operator|&=
operator|~
name|QFileSystemMetaData
operator|::
name|Permissions
expr_stmt|;
name|data
operator|->
name|entryFlags
operator||=
name|QFileSystemMetaData
operator|::
name|MetaDataFlag
argument_list|(
name|uint
argument_list|(
name|permissions
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|->
name|knownFlagsMask
operator||=
name|QFileSystemMetaData
operator|::
name|Permissions
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|success
condition|)
name|error
operator|=
name|QSystemError
argument_list|(
name|errno
argument_list|,
name|QSystemError
operator|::
name|StandardLibraryError
argument_list|)
expr_stmt|;
return|return
name|success
return|;
block|}
end_function
begin_function
DECL|function|homePath
name|QString
name|QFileSystemEngine
operator|::
name|homePath
parameter_list|()
block|{
name|QString
name|home
init|=
name|QFile
operator|::
name|decodeName
argument_list|(
name|qgetenv
argument_list|(
literal|"HOME"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|home
operator|.
name|isEmpty
argument_list|()
condition|)
name|home
operator|=
name|rootPath
argument_list|()
expr_stmt|;
return|return
name|QDir
operator|::
name|cleanPath
argument_list|(
name|home
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|rootPath
name|QString
name|QFileSystemEngine
operator|::
name|rootPath
parameter_list|()
block|{
return|return
name|QLatin1String
argument_list|(
literal|"/"
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|tempPath
name|QString
name|QFileSystemEngine
operator|::
name|tempPath
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|QT_UNIX_TEMP_PATH_OVERRIDE
return|return
name|QLatin1String
argument_list|(
name|QT_UNIX_TEMP_PATH_OVERRIDE
argument_list|)
return|;
else|#
directive|else
name|QString
name|temp
init|=
name|QFile
operator|::
name|decodeName
argument_list|(
name|qgetenv
argument_list|(
literal|"TMPDIR"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|temp
operator|.
name|isEmpty
argument_list|()
condition|)
name|temp
operator|=
name|QLatin1String
argument_list|(
literal|"/tmp"
argument_list|)
expr_stmt|;
return|return
name|QDir
operator|::
name|cleanPath
argument_list|(
name|temp
argument_list|)
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|setCurrentPath
name|bool
name|QFileSystemEngine
operator|::
name|setCurrentPath
parameter_list|(
specifier|const
name|QFileSystemEntry
modifier|&
name|path
parameter_list|)
block|{
name|int
name|r
decl_stmt|;
name|r
operator|=
name|QT_CHDIR
argument_list|(
name|path
operator|.
name|nativeFilePath
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|r
operator|>=
literal|0
return|;
block|}
end_function
begin_function
DECL|function|currentPath
name|QFileSystemEntry
name|QFileSystemEngine
operator|::
name|currentPath
parameter_list|()
block|{
name|QFileSystemEntry
name|result
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|__GLIBC__
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|PATH_MAX
argument_list|)
name|char
modifier|*
name|currentName
init|=
operator|::
name|get_current_dir_name
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentName
condition|)
block|{
name|result
operator|=
name|QFileSystemEntry
argument_list|(
name|QByteArray
argument_list|(
name|currentName
argument_list|)
argument_list|,
name|QFileSystemEntry
operator|::
name|FromNativePath
argument_list|()
argument_list|)
expr_stmt|;
operator|::
name|free
argument_list|(
name|currentName
argument_list|)
expr_stmt|;
block|}
else|#
directive|else
name|char
name|currentName
index|[
name|PATH_MAX
operator|+
literal|1
index|]
decl_stmt|;
if|if
condition|(
operator|::
name|getcwd
argument_list|(
name|currentName
argument_list|,
name|PATH_MAX
argument_list|)
condition|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_VXWORKS
argument_list|)
operator|&&
name|defined
argument_list|(
name|VXWORKS_VXSIM
argument_list|)
name|QByteArray
name|dir
argument_list|(
name|currentName
argument_list|)
decl_stmt|;
if|if
condition|(
name|dir
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
operator|<
name|dir
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
condition|)
name|dir
operator|.
name|remove
argument_list|(
literal|0
argument_list|,
name|dir
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
name|qstrncpy
argument_list|(
name|currentName
argument_list|,
name|dir
operator|.
name|constData
argument_list|()
argument_list|,
name|PATH_MAX
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|result
operator|=
name|QFileSystemEntry
argument_list|(
name|QByteArray
argument_list|(
name|currentName
argument_list|)
argument_list|,
name|QFileSystemEntry
operator|::
name|FromNativePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|#
directive|if
name|defined
argument_list|(
name|QT_DEBUG
argument_list|)
if|if
condition|(
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
name|qWarning
argument_list|(
literal|"QFileSystemEngine::currentPath: getcwd() failed"
argument_list|)
expr_stmt|;
endif|#
directive|endif
endif|#
directive|endif
return|return
name|result
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
