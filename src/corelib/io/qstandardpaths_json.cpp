begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qstandardpaths.h"
end_include
begin_include
include|#
directive|include
file|<QString>
end_include
begin_include
include|#
directive|include
file|<QJsonDocument>
end_include
begin_include
include|#
directive|include
file|<QJsonObject>
end_include
begin_include
include|#
directive|include
file|<QJsonValue>
end_include
begin_include
include|#
directive|include
file|<QJsonArray>
end_include
begin_include
include|#
directive|include
file|<QFile>
end_include
begin_include
include|#
directive|include
file|<QDir>
end_include
begin_include
include|#
directive|include
file|<QAtomicPointer>
end_include
begin_include
include|#
directive|include
file|<QCoreApplication>
end_include
begin_include
include|#
directive|include
file|<QRegularExpression>
end_include
begin_include
include|#
directive|include
file|<QRegularExpressionMatchIterator>
end_include
begin_include
include|#
directive|include
file|<QRegularExpressionMatch>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_STANDARDPATHS
end_ifndef
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_class
DECL|class|QStandardPathsPrivate
class|class
name|QStandardPathsPrivate
block|{
public|public:
DECL|function|QStandardPathsPrivate
name|QStandardPathsPrivate
parameter_list|()
member_init_list|:
name|object
argument_list|(
literal|0
argument_list|)
block|{}
DECL|function|~QStandardPathsPrivate
name|~
name|QStandardPathsPrivate
parameter_list|()
block|{
operator|delete
name|object
operator|.
name|load
argument_list|()
expr_stmt|;
block|}
DECL|member|object
name|QAtomicPointer
argument_list|<
name|QJsonObject
argument_list|>
name|object
decl_stmt|;
block|}
class|;
end_class
begin_expr_stmt
name|Q_GLOBAL_STATIC
argument_list|(
name|QStandardPathsPrivate
argument_list|,
name|configCache
argument_list|)
expr_stmt|;
end_expr_stmt
begin_decl_stmt
DECL|variable|qsp_testMode
specifier|static
name|bool
name|qsp_testMode
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_comment
comment|/*!     \internal     Substitute environment variables in the form ${name}      The JSON QStandardPaths implementation can be configured on a per user     (or per application) basis through the use of environment variables,     which are evaluated each time a location is queried. This function     performs that evaluation on \a value. No substitution is performed     for undefined variables.      This slightly underselects according to the 2009-09-20 version of     the GNU setenv(3) manual page: It disallows '}' within the variable     name. ${var}} will look for a variable named "var", not "var}".  */
end_comment
begin_function
DECL|function|substituteEnvVars
specifier|static
name|QString
name|substituteEnvVars
parameter_list|(
specifier|const
name|QJsonValue
modifier|&
name|value
parameter_list|)
block|{
name|QString
name|str
init|=
name|value
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|str
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|str
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"${"
argument_list|)
argument_list|)
condition|)
return|return
name|str
return|;
comment|// optimize for a common case
name|str
operator|.
name|replace
argument_list|(
name|QLatin1String
argument_list|(
literal|"${HOME}"
argument_list|)
argument_list|,
name|QDir
operator|::
name|homePath
argument_list|()
argument_list|)
expr_stmt|;
comment|// Do ${} format environment variable substitution if necessary
comment|// repeat this test because ${HOME} might expand to the empty string
if|if
condition|(
operator|!
name|str
operator|.
name|isEmpty
argument_list|()
operator|&&
name|str
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"${"
argument_list|)
argument_list|)
condition|)
block|{
name|QRegularExpression
name|varRegExp
argument_list|(
name|QLatin1String
argument_list|(
literal|"\\$\\{([^\\}=]*)\\}"
argument_list|)
argument_list|)
decl_stmt|;
name|QRegularExpressionMatchIterator
name|matchIterator
init|=
name|varRegExp
operator|.
name|globalMatch
argument_list|(
name|str
argument_list|)
decl_stmt|;
while|while
condition|(
name|matchIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|QRegularExpressionMatch
name|match
init|=
name|matchIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|QByteArray
name|envValue
init|=
name|qgetenv
argument_list|(
name|match
operator|.
name|captured
argument_list|(
literal|1
argument_list|)
operator|.
name|toLatin1
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|envValue
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|QString
name|replacement
init|=
name|QFile
operator|::
name|decodeName
argument_list|(
name|envValue
argument_list|)
decl_stmt|;
name|str
operator|.
name|replace
argument_list|(
name|match
operator|.
name|captured
argument_list|(
literal|0
argument_list|)
argument_list|,
name|replacement
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|str
return|;
block|}
end_function
begin_function
DECL|function|enableTestMode
name|void
name|QStandardPaths
operator|::
name|enableTestMode
parameter_list|(
name|bool
name|testMode
parameter_list|)
block|{
name|qsp_testMode
operator|=
name|testMode
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isTestModeEnabled
name|bool
name|QStandardPaths
operator|::
name|isTestModeEnabled
parameter_list|()
block|{
return|return
name|qsp_testMode
return|;
block|}
end_function
begin_function
DECL|function|appendOrganizationAndApp
specifier|static
name|void
name|appendOrganizationAndApp
parameter_list|(
name|QString
modifier|&
name|path
parameter_list|)
block|{
specifier|const
name|QString
name|org
init|=
name|QCoreApplication
operator|::
name|organizationName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|org
operator|.
name|isEmpty
argument_list|()
condition|)
name|path
operator|+=
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
operator|+
name|org
expr_stmt|;
specifier|const
name|QString
name|appName
init|=
name|QCoreApplication
operator|::
name|applicationName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|appName
operator|.
name|isEmpty
argument_list|()
condition|)
name|path
operator|+=
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
operator|+
name|appName
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writableLocation
name|QString
name|QStandardPaths
operator|::
name|writableLocation
parameter_list|(
name|StandardLocation
name|type
parameter_list|)
block|{
name|QStringList
name|locations
init|=
name|QStandardPaths
operator|::
name|standardLocations
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|locations
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|QString
argument_list|()
return|;
return|return
name|locations
operator|.
name|first
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|standardLocations
name|QStringList
name|QStandardPaths
operator|::
name|standardLocations
parameter_list|(
name|StandardLocation
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|HomeLocation
case|:
return|return
name|QStringList
argument_list|(
name|QDir
operator|::
name|homePath
argument_list|()
argument_list|)
return|;
comment|// set $HOME
case|case
name|TempLocation
case|:
return|return
name|QStringList
argument_list|(
name|QDir
operator|::
name|tempPath
argument_list|()
argument_list|)
return|;
comment|// set $TMPDIR
default|default:
break|break;
block|}
if|if
condition|(
name|qsp_testMode
condition|)
block|{
specifier|const
name|QString
name|qttestDir
init|=
name|QDir
operator|::
name|homePath
argument_list|()
operator|+
name|QLatin1String
argument_list|(
literal|"/.qttest"
argument_list|)
decl_stmt|;
name|QString
name|path
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GenericDataLocation
case|:
case|case
name|DataLocation
case|:
name|path
operator|=
name|qttestDir
operator|+
name|QLatin1String
argument_list|(
literal|"/share"
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|==
name|DataLocation
condition|)
name|appendOrganizationAndApp
argument_list|(
name|path
argument_list|)
expr_stmt|;
return|return
name|QStringList
argument_list|(
name|path
argument_list|)
return|;
case|case
name|GenericCacheLocation
case|:
case|case
name|CacheLocation
case|:
name|path
operator|=
name|qttestDir
operator|+
name|QLatin1String
argument_list|(
literal|"/cache"
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|==
name|CacheLocation
condition|)
name|appendOrganizationAndApp
argument_list|(
name|path
argument_list|)
expr_stmt|;
return|return
name|QStringList
argument_list|(
name|path
argument_list|)
return|;
case|case
name|ConfigLocation
case|:
return|return
name|QStringList
argument_list|(
name|qttestDir
operator|+
name|QLatin1String
argument_list|(
literal|"/config"
argument_list|)
argument_list|)
return|;
default|default:
break|break;
block|}
block|}
name|QJsonObject
modifier|*
name|localConfigObject
init|=
name|configCache
argument_list|()
operator|->
name|object
operator|.
name|loadAcquire
argument_list|()
decl_stmt|;
if|if
condition|(
name|localConfigObject
operator|==
literal|0
condition|)
block|{
name|QString
name|configHome
init|=
name|QFile
operator|::
name|decodeName
argument_list|(
name|qgetenv
argument_list|(
literal|"PATH_CONFIG_HOME"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|configHome
operator|.
name|isEmpty
argument_list|()
condition|)
name|configHome
operator|=
name|QLatin1String
argument_list|(
literal|"/etc/user-dirs.json"
argument_list|)
expr_stmt|;
name|QFile
name|file
argument_list|(
name|configHome
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
condition|)
block|{
name|QJsonDocument
name|configDoc
init|=
name|QJsonDocument
operator|::
name|fromJson
argument_list|(
name|file
operator|.
name|readAll
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|configDoc
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|QStringList
argument_list|()
return|;
name|QJsonObject
name|myConfigObject
init|=
name|configDoc
operator|.
name|object
argument_list|()
decl_stmt|;
name|localConfigObject
operator|=
operator|new
name|QJsonObject
argument_list|(
name|myConfigObject
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|configCache
argument_list|()
operator|->
name|object
operator|.
name|testAndSetRelease
argument_list|(
literal|0
argument_list|,
name|localConfigObject
argument_list|)
condition|)
block|{
operator|delete
name|localConfigObject
expr_stmt|;
name|localConfigObject
operator|=
name|configCache
argument_list|()
operator|->
name|object
operator|.
name|loadAcquire
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
return|return
name|QStringList
argument_list|()
return|;
block|}
block|}
name|QLatin1String
name|key
argument_list|(
literal|""
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|DocumentsLocation
case|:
name|key
operator|=
name|QLatin1String
argument_list|(
literal|"DOCUMENTS"
argument_list|)
expr_stmt|;
break|break;
case|case
name|PicturesLocation
case|:
name|key
operator|=
name|QLatin1String
argument_list|(
literal|"PICTURES"
argument_list|)
expr_stmt|;
break|break;
case|case
name|MusicLocation
case|:
name|key
operator|=
name|QLatin1String
argument_list|(
literal|"MUSIC"
argument_list|)
expr_stmt|;
break|break;
case|case
name|MoviesLocation
case|:
name|key
operator|=
name|QLatin1String
argument_list|(
literal|"VIDEOS"
argument_list|)
expr_stmt|;
break|break;
case|case
name|DownloadLocation
case|:
name|key
operator|=
name|QLatin1String
argument_list|(
literal|"DOWNLOAD"
argument_list|)
expr_stmt|;
break|break;
case|case
name|ApplicationsLocation
case|:
name|key
operator|=
name|QLatin1String
argument_list|(
literal|"APPLICATIONS"
argument_list|)
expr_stmt|;
break|break;
case|case
name|CacheLocation
case|:
name|key
operator|=
name|QLatin1String
argument_list|(
literal|"CACHE"
argument_list|)
expr_stmt|;
break|break;
case|case
name|GenericCacheLocation
case|:
name|key
operator|=
name|QLatin1String
argument_list|(
literal|"GENERIC_CACHE"
argument_list|)
expr_stmt|;
break|break;
case|case
name|DataLocation
case|:
name|key
operator|=
name|QLatin1String
argument_list|(
literal|"DATA"
argument_list|)
expr_stmt|;
break|break;
case|case
name|GenericDataLocation
case|:
name|key
operator|=
name|QLatin1String
argument_list|(
literal|"GENERIC_DATA"
argument_list|)
expr_stmt|;
break|break;
case|case
name|ConfigLocation
case|:
name|key
operator|=
name|QLatin1String
argument_list|(
literal|"CONFIG"
argument_list|)
expr_stmt|;
break|break;
case|case
name|RuntimeLocation
case|:
name|key
operator|=
name|QLatin1String
argument_list|(
literal|"RUNTIME"
argument_list|)
expr_stmt|;
break|break;
case|case
name|DesktopLocation
case|:
name|key
operator|=
name|QLatin1String
argument_list|(
literal|"DESKTOP"
argument_list|)
expr_stmt|;
break|break;
case|case
name|FontsLocation
case|:
name|key
operator|=
name|QLatin1String
argument_list|(
literal|"FONTS"
argument_list|)
expr_stmt|;
break|break;
default|default:
return|return
name|QStringList
argument_list|()
return|;
block|}
name|QJsonObject
operator|::
name|const_iterator
name|iter
init|=
name|localConfigObject
operator|->
name|constFind
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|iter
operator|==
name|localConfigObject
operator|->
name|constEnd
argument_list|()
condition|)
return|return
name|QStringList
argument_list|()
return|;
switch|switch
condition|(
name|iter
operator|.
name|value
argument_list|()
operator|.
name|type
argument_list|()
condition|)
block|{
case|case
name|QJsonValue
operator|::
name|Array
case|:
block|{
name|QStringList
name|resultList
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QJsonValue
modifier|&
name|item
decl|,
name|iter
operator|.
name|value
argument_list|()
operator|.
name|toArray
argument_list|()
control|)
name|resultList
operator|.
name|append
argument_list|(
name|substituteEnvVars
argument_list|(
name|item
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|resultList
return|;
block|}
case|case
name|QJsonValue
operator|::
name|String
case|:
return|return
name|QStringList
argument_list|(
name|substituteEnvVars
argument_list|(
name|iter
operator|.
name|value
argument_list|()
argument_list|)
argument_list|)
return|;
default|default:
break|break;
block|}
return|return
name|QStringList
argument_list|()
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_STANDARDPATHS
end_comment
end_unit
