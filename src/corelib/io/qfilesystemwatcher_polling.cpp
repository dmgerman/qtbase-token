begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qfilesystemwatcher_polling_p.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/qtimer.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_FILESYSTEMWATCHER
end_ifndef
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_constructor
DECL|function|QPollingFileSystemWatcherEngine
name|QPollingFileSystemWatcherEngine
operator|::
name|QPollingFileSystemWatcherEngine
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QFileSystemWatcherEngine
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|timer
argument_list|(
name|this
argument_list|)
block|{
name|connect
argument_list|(
operator|&
name|timer
argument_list|,
name|SIGNAL
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|addPaths
name|QStringList
name|QPollingFileSystemWatcherEngine
operator|::
name|addPaths
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|paths
parameter_list|,
name|QStringList
modifier|*
name|files
parameter_list|,
name|QStringList
modifier|*
name|directories
parameter_list|)
block|{
name|QStringList
name|p
init|=
name|paths
decl_stmt|;
name|QMutableListIterator
argument_list|<
name|QString
argument_list|>
name|it
argument_list|(
name|p
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|QString
name|path
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|QFileInfo
name|fi
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fi
operator|.
name|exists
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|fi
operator|.
name|isDir
argument_list|()
condition|)
block|{
if|if
condition|(
name|directories
operator|->
name|contains
argument_list|(
name|path
argument_list|)
condition|)
continue|continue;
name|directories
operator|->
name|append
argument_list|(
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|path
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
condition|)
name|fi
operator|=
name|QFileInfo
argument_list|(
name|path
operator|+
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|->
name|directories
operator|.
name|insert
argument_list|(
name|path
argument_list|,
name|fi
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|files
operator|->
name|contains
argument_list|(
name|path
argument_list|)
condition|)
continue|continue;
name|files
operator|->
name|append
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|this
operator|->
name|files
operator|.
name|insert
argument_list|(
name|path
argument_list|,
name|fi
argument_list|)
expr_stmt|;
block|}
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|!
name|this
operator|->
name|files
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|this
operator|->
name|directories
operator|.
name|isEmpty
argument_list|()
operator|)
operator|&&
operator|!
name|timer
operator|.
name|isActive
argument_list|()
condition|)
block|{
name|timer
operator|.
name|start
argument_list|(
name|PollingInterval
argument_list|)
expr_stmt|;
block|}
return|return
name|p
return|;
block|}
end_function
begin_function
DECL|function|removePaths
name|QStringList
name|QPollingFileSystemWatcherEngine
operator|::
name|removePaths
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|paths
parameter_list|,
name|QStringList
modifier|*
name|files
parameter_list|,
name|QStringList
modifier|*
name|directories
parameter_list|)
block|{
name|QStringList
name|p
init|=
name|paths
decl_stmt|;
name|QMutableListIterator
argument_list|<
name|QString
argument_list|>
name|it
argument_list|(
name|p
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|QString
name|path
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|->
name|directories
operator|.
name|remove
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|directories
operator|->
name|removeAll
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|->
name|files
operator|.
name|remove
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|files
operator|->
name|removeAll
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|this
operator|->
name|files
operator|.
name|isEmpty
argument_list|()
operator|&&
name|this
operator|->
name|directories
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|timer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
return|return
name|p
return|;
block|}
end_function
begin_function
DECL|function|timeout
name|void
name|QPollingFileSystemWatcherEngine
operator|::
name|timeout
parameter_list|()
block|{
name|QMutableHashIterator
argument_list|<
name|QString
argument_list|,
name|FileInfo
argument_list|>
name|fit
argument_list|(
name|files
argument_list|)
decl_stmt|;
while|while
condition|(
name|fit
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|QHash
argument_list|<
name|QString
argument_list|,
name|FileInfo
argument_list|>
operator|::
name|iterator
name|x
init|=
name|fit
operator|.
name|next
argument_list|()
decl_stmt|;
name|QString
name|path
init|=
name|x
operator|.
name|key
argument_list|()
decl_stmt|;
name|QFileInfo
name|fi
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fi
operator|.
name|exists
argument_list|()
condition|)
block|{
name|fit
operator|.
name|remove
argument_list|()
expr_stmt|;
emit|emit
name|fileChanged
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
emit|;
block|}
elseif|else
if|if
condition|(
name|x
operator|.
name|value
argument_list|()
operator|!=
name|fi
condition|)
block|{
name|x
operator|.
name|value
argument_list|()
operator|=
name|fi
expr_stmt|;
emit|emit
name|fileChanged
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
emit|;
block|}
block|}
name|QMutableHashIterator
argument_list|<
name|QString
argument_list|,
name|FileInfo
argument_list|>
name|dit
argument_list|(
name|directories
argument_list|)
decl_stmt|;
while|while
condition|(
name|dit
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|QHash
argument_list|<
name|QString
argument_list|,
name|FileInfo
argument_list|>
operator|::
name|iterator
name|x
init|=
name|dit
operator|.
name|next
argument_list|()
decl_stmt|;
name|QString
name|path
init|=
name|x
operator|.
name|key
argument_list|()
decl_stmt|;
name|QFileInfo
name|fi
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|path
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
condition|)
name|fi
operator|=
name|QFileInfo
argument_list|(
name|path
operator|+
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fi
operator|.
name|exists
argument_list|()
condition|)
block|{
name|dit
operator|.
name|remove
argument_list|()
expr_stmt|;
emit|emit
name|directoryChanged
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
emit|;
block|}
elseif|else
if|if
condition|(
name|x
operator|.
name|value
argument_list|()
operator|!=
name|fi
condition|)
block|{
name|fi
operator|.
name|refresh
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|fi
operator|.
name|exists
argument_list|()
condition|)
block|{
name|dit
operator|.
name|remove
argument_list|()
expr_stmt|;
emit|emit
name|directoryChanged
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
emit|;
block|}
else|else
block|{
name|x
operator|.
name|value
argument_list|()
operator|=
name|fi
expr_stmt|;
emit|emit
name|directoryChanged
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
emit|;
block|}
block|}
block|}
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// !QT_NO_FILESYSTEMWATCHER
end_comment
end_unit
