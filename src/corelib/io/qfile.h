begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Copyright (C) 2016 Intel Corporation. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QFILE_H
end_ifndef
begin_define
DECL|macro|QFILE_H
define|#
directive|define
name|QFILE_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qfiledevice.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qstring.h>
end_include
begin_include
include|#
directive|include
file|<stdio.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|open
end_ifdef
begin_error
error|#
directive|error
error|qfile.h must be included before any header file that defines open
end_error
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QTemporaryFile
name|class
name|QTemporaryFile
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QFilePrivate
name|class
name|QFilePrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_CORE_EXPORT
name|QFile
range|:
name|public
name|QFileDevice
block|{
ifndef|#
directive|ifndef
name|QT_NO_QOBJECT
name|Q_OBJECT
endif|#
directive|endif
name|Q_DECLARE_PRIVATE
argument_list|(
argument|QFile
argument_list|)
name|public
operator|:
name|QFile
argument_list|()
block|;
name|QFile
argument_list|(
specifier|const
name|QString
operator|&
name|name
argument_list|)
block|;
ifndef|#
directive|ifndef
name|QT_NO_QOBJECT
name|explicit
name|QFile
argument_list|(
name|QObject
operator|*
name|parent
argument_list|)
block|;
name|QFile
argument_list|(
specifier|const
name|QString
operator|&
name|name
argument_list|,
name|QObject
operator|*
name|parent
argument_list|)
block|;
endif|#
directive|endif
operator|~
name|QFile
argument_list|()
block|;
name|QString
name|fileName
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|;
name|void
name|setFileName
argument_list|(
specifier|const
name|QString
operator|&
name|name
argument_list|)
block|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_DARWIN
argument_list|)
comment|// Mac always expects filenames in UTF-8... and decomposed...
specifier|static
specifier|inline
name|QByteArray
name|encodeName
argument_list|(
argument|const QString&fileName
argument_list|)
block|{
return|return
name|fileName
operator|.
name|normalized
argument_list|(
name|QString
operator|::
name|NormalizationForm_D
argument_list|)
operator|.
name|toUtf8
argument_list|()
return|;
block|}
specifier|static
name|QString
name|decodeName
argument_list|(
argument|const QByteArray&localFileName
argument_list|)
block|{
return|return
name|QString
operator|::
name|fromUtf8
argument_list|(
name|localFileName
argument_list|)
operator|.
name|normalized
argument_list|(
name|QString
operator|::
name|NormalizationForm_C
argument_list|)
return|;
block|}
else|#
directive|else
specifier|static
specifier|inline
name|QByteArray
name|encodeName
argument_list|(
argument|const QString&fileName
argument_list|)
block|{
return|return
name|fileName
operator|.
name|toLocal8Bit
argument_list|()
return|;
block|}
specifier|static
name|QString
name|decodeName
argument_list|(
argument|const QByteArray&localFileName
argument_list|)
block|{
return|return
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|localFileName
argument_list|)
return|;
block|}
endif|#
directive|endif
specifier|inline
specifier|static
name|QString
name|decodeName
argument_list|(
argument|const char *localFileName
argument_list|)
block|{
return|return
name|decodeName
argument_list|(
name|QByteArray
argument_list|(
name|localFileName
argument_list|)
argument_list|)
return|;
block|}
if|#
directive|if
name|QT_DEPRECATED_SINCE
argument_list|(
literal|5
operator|,
literal|0
argument_list|)
typedef|typedef
name|QByteArray
function_decl|(
modifier|*
name|EncoderFn
function_decl|)
parameter_list|(
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|)
function_decl|;
end_decl_stmt
begin_typedef
typedef|typedef
name|QString
function_decl|(
modifier|*
name|DecoderFn
function_decl|)
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|localfileName
parameter_list|)
function_decl|;
end_typedef
begin_function
name|QT_DEPRECATED
specifier|static
name|void
name|setEncodingFunction
parameter_list|(
name|EncoderFn
parameter_list|)
block|{}
end_function
begin_function
name|QT_DEPRECATED
specifier|static
name|void
name|setDecodingFunction
parameter_list|(
name|DecoderFn
parameter_list|)
block|{}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
name|bool
name|exists
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_function_decl
specifier|static
name|bool
name|exists
parameter_list|(
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|QString
name|readLink
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_function_decl
specifier|static
name|QString
name|readLink
parameter_list|(
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
specifier|inline
name|QString
name|symLinkTarget
argument_list|()
specifier|const
block|{
return|return
name|readLink
argument_list|()
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
specifier|static
name|QString
name|symLinkTarget
parameter_list|(
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|)
block|{
return|return
name|readLink
argument_list|(
name|fileName
argument_list|)
return|;
block|}
end_function
begin_function_decl
name|bool
name|remove
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|bool
name|remove
parameter_list|(
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|bool
name|rename
parameter_list|(
specifier|const
name|QString
modifier|&
name|newName
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|bool
name|rename
parameter_list|(
specifier|const
name|QString
modifier|&
name|oldName
parameter_list|,
specifier|const
name|QString
modifier|&
name|newName
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|bool
name|link
parameter_list|(
specifier|const
name|QString
modifier|&
name|newName
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|bool
name|link
parameter_list|(
specifier|const
name|QString
modifier|&
name|oldname
parameter_list|,
specifier|const
name|QString
modifier|&
name|newName
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|bool
name|copy
parameter_list|(
specifier|const
name|QString
modifier|&
name|newName
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|bool
name|copy
parameter_list|(
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|,
specifier|const
name|QString
modifier|&
name|newName
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
name|bool
name|open
argument_list|(
name|OpenMode
name|flags
argument_list|)
name|Q_DECL_OVERRIDE
decl_stmt|;
end_decl_stmt
begin_function_decl
name|bool
name|open
parameter_list|(
name|FILE
modifier|*
name|f
parameter_list|,
name|OpenMode
name|ioFlags
parameter_list|,
name|FileHandleFlags
name|handleFlags
init|=
name|DontCloseHandle
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|bool
name|open
parameter_list|(
name|int
name|fd
parameter_list|,
name|OpenMode
name|ioFlags
parameter_list|,
name|FileHandleFlags
name|handleFlags
init|=
name|DontCloseHandle
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|qint64
name|size
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|bool
name|resize
argument_list|(
name|qint64
name|sz
argument_list|)
name|Q_DECL_OVERRIDE
decl_stmt|;
end_decl_stmt
begin_function_decl
specifier|static
name|bool
name|resize
parameter_list|(
specifier|const
name|QString
modifier|&
name|filename
parameter_list|,
name|qint64
name|sz
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|Permissions
name|permissions
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
expr_stmt|;
end_expr_stmt
begin_function_decl
specifier|static
name|Permissions
name|permissions
parameter_list|(
specifier|const
name|QString
modifier|&
name|filename
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
name|bool
name|setPermissions
argument_list|(
name|Permissions
name|permissionSpec
argument_list|)
name|Q_DECL_OVERRIDE
decl_stmt|;
end_decl_stmt
begin_function_decl
specifier|static
name|bool
name|setPermissions
parameter_list|(
specifier|const
name|QString
modifier|&
name|filename
parameter_list|,
name|Permissions
name|permissionSpec
parameter_list|)
function_decl|;
end_function_decl
begin_label
name|protected
label|:
end_label
begin_ifdef
ifdef|#
directive|ifdef
name|QT_NO_QOBJECT
end_ifdef
begin_expr_stmt
name|QFile
argument_list|(
name|QFilePrivate
operator|&
name|dd
argument_list|)
expr_stmt|;
end_expr_stmt
begin_else
else|#
directive|else
end_else
begin_expr_stmt
name|QFile
argument_list|(
name|QFilePrivate
operator|&
name|dd
argument_list|,
name|QObject
operator|*
name|parent
operator|=
name|Q_NULLPTR
argument_list|)
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_label
name|private
label|:
end_label
begin_decl_stmt
name|friend
name|class
name|QTemporaryFile
decl_stmt|;
end_decl_stmt
begin_macro
name|Q_DISABLE_COPY
argument_list|(
argument|QFile
argument_list|)
end_macro
begin_macro
unit|};
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QFILE_H
end_comment
end_unit
