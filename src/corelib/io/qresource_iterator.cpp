begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qresource.h"
end_include
begin_include
include|#
directive|include
file|"qresource_iterator_p.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/qvariant.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_constructor
DECL|function|QResourceFileEngineIterator
name|QResourceFileEngineIterator
operator|::
name|QResourceFileEngineIterator
parameter_list|(
name|QDir
operator|::
name|Filters
name|filters
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|filterNames
parameter_list|)
member_init_list|:
name|QAbstractFileEngineIterator
argument_list|(
name|filters
argument_list|,
name|filterNames
argument_list|)
member_init_list|,
name|index
argument_list|(
operator|-
literal|1
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QResourceFileEngineIterator
name|QResourceFileEngineIterator
operator|::
name|~
name|QResourceFileEngineIterator
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|next
name|QString
name|QResourceFileEngineIterator
operator|::
name|next
parameter_list|()
block|{
if|if
condition|(
operator|!
name|hasNext
argument_list|()
condition|)
return|return
name|QString
argument_list|()
return|;
operator|++
name|index
expr_stmt|;
return|return
name|currentFilePath
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|hasNext
name|bool
name|QResourceFileEngineIterator
operator|::
name|hasNext
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|index
operator|==
operator|-
literal|1
condition|)
block|{
comment|// Lazy initialization of the iterator
name|QResource
name|resource
argument_list|(
name|path
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|resource
operator|.
name|isValid
argument_list|()
condition|)
return|return
literal|false
return|;
comment|// Initialize and move to the next entry.
name|entries
operator|=
name|resource
operator|.
name|children
argument_list|()
expr_stmt|;
name|index
operator|=
literal|0
expr_stmt|;
block|}
return|return
name|index
operator|<
name|entries
operator|.
name|size
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|currentFileName
name|QString
name|QResourceFileEngineIterator
operator|::
name|currentFileName
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|index
operator|<=
literal|0
operator|||
name|index
operator|>
name|entries
operator|.
name|size
argument_list|()
condition|)
return|return
name|QString
argument_list|()
return|;
return|return
name|entries
operator|.
name|at
argument_list|(
name|index
operator|-
literal|1
argument_list|)
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
