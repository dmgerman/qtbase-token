begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qstandardpaths.h"
end_include
begin_include
include|#
directive|include
file|<qdir.h>
end_include
begin_include
include|#
directive|include
file|<private/qcore_mac_p.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_BOOTSTRAPPED
end_ifndef
begin_include
include|#
directive|include
file|<qcoreapplication.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<CoreFoundation/CoreFoundation.h>
end_include
begin_include
include|#
directive|include
file|<ApplicationServices/ApplicationServices.h>
end_include
begin_function
name|QT_BEGIN_NAMESPACE
comment|/*     Translates a QStandardPaths::StandardLocation into the mac equivalent. */
DECL|function|translateLocation
name|OSType
name|translateLocation
parameter_list|(
name|QStandardPaths
operator|::
name|StandardLocation
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|QStandardPaths
operator|::
name|ConfigLocation
case|:
case|case
name|QStandardPaths
operator|::
name|GenericConfigLocation
case|:
return|return
name|kPreferencesFolderType
return|;
case|case
name|QStandardPaths
operator|::
name|DesktopLocation
case|:
return|return
name|kDesktopFolderType
return|;
case|case
name|QStandardPaths
operator|::
name|DownloadLocation
case|:
comment|// needs NSSearchPathForDirectoriesInDomains with NSDownloadsDirectory
comment|// which needs an objective-C *.mm file...
case|case
name|QStandardPaths
operator|::
name|DocumentsLocation
case|:
return|return
name|kDocumentsFolderType
return|;
case|case
name|QStandardPaths
operator|::
name|FontsLocation
case|:
comment|// There are at least two different font directories on the mac: /Library/Fonts and ~/Library/Fonts.
comment|// To select a specific one we have to specify a different first parameter when calling FSFindFolder.
return|return
name|kFontsFolderType
return|;
case|case
name|QStandardPaths
operator|::
name|ApplicationsLocation
case|:
return|return
name|kApplicationsFolderType
return|;
case|case
name|QStandardPaths
operator|::
name|MusicLocation
case|:
return|return
name|kMusicDocumentsFolderType
return|;
case|case
name|QStandardPaths
operator|::
name|MoviesLocation
case|:
return|return
name|kMovieDocumentsFolderType
return|;
case|case
name|QStandardPaths
operator|::
name|PicturesLocation
case|:
return|return
name|kPictureDocumentsFolderType
return|;
case|case
name|QStandardPaths
operator|::
name|TempLocation
case|:
return|return
name|kTemporaryFolderType
return|;
case|case
name|QStandardPaths
operator|::
name|GenericDataLocation
case|:
case|case
name|QStandardPaths
operator|::
name|RuntimeLocation
case|:
case|case
name|QStandardPaths
operator|::
name|DataLocation
case|:
return|return
name|kApplicationSupportFolderType
return|;
case|case
name|QStandardPaths
operator|::
name|GenericCacheLocation
case|:
case|case
name|QStandardPaths
operator|::
name|CacheLocation
case|:
return|return
name|kCachedDataFolderType
return|;
default|default:
return|return
name|kDesktopFolderType
return|;
block|}
block|}
end_function
begin_comment
comment|/*     Constructs a full unicode path from a FSRef. */
end_comment
begin_function
DECL|function|getFullPath
specifier|static
name|QString
name|getFullPath
parameter_list|(
specifier|const
name|FSRef
modifier|&
name|ref
parameter_list|)
block|{
name|QByteArray
name|ba
argument_list|(
literal|2048
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|FSRefMakePath
argument_list|(
operator|&
name|ref
argument_list|,
cast|reinterpret_cast
argument_list|<
name|UInt8
operator|*
argument_list|>
argument_list|(
name|ba
operator|.
name|data
argument_list|()
argument_list|)
argument_list|,
name|ba
operator|.
name|size
argument_list|()
argument_list|)
operator|==
name|noErr
condition|)
return|return
name|QString
operator|::
name|fromUtf8
argument_list|(
name|ba
operator|.
name|constData
argument_list|()
argument_list|)
operator|.
name|normalized
argument_list|(
name|QString
operator|::
name|NormalizationForm_C
argument_list|)
return|;
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|appendOrganizationAndApp
specifier|static
name|void
name|appendOrganizationAndApp
parameter_list|(
name|QString
modifier|&
name|path
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_BOOTSTRAPPED
specifier|const
name|QString
name|org
init|=
name|QCoreApplication
operator|::
name|organizationName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|org
operator|.
name|isEmpty
argument_list|()
condition|)
name|path
operator|+=
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
operator|+
name|org
expr_stmt|;
specifier|const
name|QString
name|appName
init|=
name|QCoreApplication
operator|::
name|applicationName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|appName
operator|.
name|isEmpty
argument_list|()
condition|)
name|path
operator|+=
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
operator|+
name|appName
expr_stmt|;
else|#
directive|else
name|Q_UNUSED
argument_list|(
name|path
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|macLocation
specifier|static
name|QString
name|macLocation
parameter_list|(
name|QStandardPaths
operator|::
name|StandardLocation
name|type
parameter_list|,
name|short
name|domain
parameter_list|)
block|{
comment|// http://developer.apple.com/documentation/Carbon/Reference/Folder_Manager/Reference/reference.html
name|FSRef
name|ref
decl_stmt|;
name|OSErr
name|err
init|=
name|FSFindFolder
argument_list|(
name|domain
argument_list|,
name|translateLocation
argument_list|(
name|type
argument_list|)
argument_list|,
literal|false
argument_list|,
operator|&
name|ref
argument_list|)
decl_stmt|;
if|if
condition|(
name|err
condition|)
return|return
name|QString
argument_list|()
return|;
name|QString
name|path
init|=
name|getFullPath
argument_list|(
name|ref
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|QStandardPaths
operator|::
name|DataLocation
operator|||
name|type
operator|==
name|QStandardPaths
operator|::
name|CacheLocation
condition|)
name|appendOrganizationAndApp
argument_list|(
name|path
argument_list|)
expr_stmt|;
return|return
name|path
return|;
block|}
end_function
begin_function
DECL|function|writableLocation
name|QString
name|QStandardPaths
operator|::
name|writableLocation
parameter_list|(
name|StandardLocation
name|type
parameter_list|)
block|{
if|if
condition|(
name|isTestModeEnabled
argument_list|()
condition|)
block|{
specifier|const
name|QString
name|qttestDir
init|=
name|QDir
operator|::
name|homePath
argument_list|()
operator|+
name|QLatin1String
argument_list|(
literal|"/.qttest"
argument_list|)
decl_stmt|;
name|QString
name|path
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GenericDataLocation
case|:
case|case
name|DataLocation
case|:
name|path
operator|=
name|qttestDir
operator|+
name|QLatin1String
argument_list|(
literal|"/Application Support"
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|==
name|DataLocation
condition|)
name|appendOrganizationAndApp
argument_list|(
name|path
argument_list|)
expr_stmt|;
return|return
name|path
return|;
case|case
name|GenericCacheLocation
case|:
case|case
name|CacheLocation
case|:
name|path
operator|=
name|qttestDir
operator|+
name|QLatin1String
argument_list|(
literal|"/Cache"
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|==
name|CacheLocation
condition|)
name|appendOrganizationAndApp
argument_list|(
name|path
argument_list|)
expr_stmt|;
return|return
name|path
return|;
case|case
name|GenericConfigLocation
case|:
case|case
name|ConfigLocation
case|:
return|return
name|qttestDir
operator|+
name|QLatin1String
argument_list|(
literal|"/Preferences"
argument_list|)
return|;
default|default:
break|break;
block|}
block|}
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|HomeLocation
case|:
return|return
name|QDir
operator|::
name|homePath
argument_list|()
return|;
case|case
name|TempLocation
case|:
return|return
name|QDir
operator|::
name|tempPath
argument_list|()
return|;
case|case
name|GenericDataLocation
case|:
case|case
name|DataLocation
case|:
case|case
name|GenericCacheLocation
case|:
case|case
name|CacheLocation
case|:
case|case
name|RuntimeLocation
case|:
return|return
name|macLocation
argument_list|(
name|type
argument_list|,
name|kUserDomain
argument_list|)
return|;
default|default:
return|return
name|macLocation
argument_list|(
name|type
argument_list|,
name|kOnAppropriateDisk
argument_list|)
return|;
block|}
block|}
end_function
begin_function
DECL|function|standardLocations
name|QStringList
name|QStandardPaths
operator|::
name|standardLocations
parameter_list|(
name|StandardLocation
name|type
parameter_list|)
block|{
name|QStringList
name|dirs
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|GenericDataLocation
operator|||
name|type
operator|==
name|DataLocation
operator|||
name|type
operator|==
name|GenericCacheLocation
operator|||
name|type
operator|==
name|CacheLocation
condition|)
block|{
specifier|const
name|QString
name|path
init|=
name|macLocation
argument_list|(
name|type
argument_list|,
name|kOnAppropriateDisk
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|path
operator|.
name|isEmpty
argument_list|()
condition|)
name|dirs
operator|.
name|append
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|type
operator|==
name|DataLocation
condition|)
block|{
name|CFBundleRef
name|mainBundle
init|=
name|CFBundleGetMainBundle
argument_list|()
decl_stmt|;
if|if
condition|(
name|mainBundle
condition|)
block|{
name|CFURLRef
name|bundleUrl
init|=
name|CFBundleCopyBundleURL
argument_list|(
name|mainBundle
argument_list|)
decl_stmt|;
name|CFStringRef
name|cfBundlePath
init|=
name|CFURLCopyPath
argument_list|(
name|bundleUrl
argument_list|)
decl_stmt|;
name|QString
name|bundlePath
init|=
name|QCFString
operator|::
name|toQString
argument_list|(
name|cfBundlePath
argument_list|)
decl_stmt|;
name|CFRelease
argument_list|(
name|cfBundlePath
argument_list|)
expr_stmt|;
name|CFRelease
argument_list|(
name|bundleUrl
argument_list|)
expr_stmt|;
name|CFURLRef
name|resourcesUrl
init|=
name|CFBundleCopyResourcesDirectoryURL
argument_list|(
name|mainBundle
argument_list|)
decl_stmt|;
name|CFStringRef
name|cfResourcesPath
init|=
name|CFURLCopyPath
argument_list|(
name|bundleUrl
argument_list|)
decl_stmt|;
name|QString
name|resourcesPath
init|=
name|QCFString
operator|::
name|toQString
argument_list|(
name|cfResourcesPath
argument_list|)
decl_stmt|;
name|CFRelease
argument_list|(
name|cfResourcesPath
argument_list|)
expr_stmt|;
name|CFRelease
argument_list|(
name|resourcesUrl
argument_list|)
expr_stmt|;
comment|// Handle bundled vs unbundled executables. CFBundleGetMainBundle() returns
comment|// a valid bundle in both cases. CFBundleCopyResourcesDirectoryURL() returns
comment|// an absolute path for unbundled executables.
if|if
condition|(
name|resourcesPath
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
condition|)
name|dirs
operator|.
name|append
argument_list|(
name|resourcesPath
argument_list|)
expr_stmt|;
else|else
name|dirs
operator|.
name|append
argument_list|(
name|bundlePath
operator|+
name|resourcesPath
argument_list|)
expr_stmt|;
block|}
block|}
specifier|const
name|QString
name|localDir
init|=
name|writableLocation
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|dirs
operator|.
name|prepend
argument_list|(
name|localDir
argument_list|)
expr_stmt|;
return|return
name|dirs
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_BOOTSTRAPPED
end_ifndef
begin_function
DECL|function|displayName
name|QString
name|QStandardPaths
operator|::
name|displayName
parameter_list|(
name|StandardLocation
name|type
parameter_list|)
block|{
if|if
condition|(
name|QStandardPaths
operator|::
name|HomeLocation
operator|==
name|type
condition|)
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QStandardPaths"
argument_list|,
literal|"Home"
argument_list|)
return|;
name|FSRef
name|ref
decl_stmt|;
name|OSErr
name|err
init|=
name|FSFindFolder
argument_list|(
name|kOnAppropriateDisk
argument_list|,
name|translateLocation
argument_list|(
name|type
argument_list|)
argument_list|,
literal|false
argument_list|,
operator|&
name|ref
argument_list|)
decl_stmt|;
if|if
condition|(
name|err
condition|)
return|return
name|QString
argument_list|()
return|;
name|QCFString
name|displayName
decl_stmt|;
name|err
operator|=
name|LSCopyDisplayNameForRef
argument_list|(
operator|&
name|ref
argument_list|,
operator|&
name|displayName
argument_list|)
expr_stmt|;
if|if
condition|(
name|err
condition|)
return|return
name|QString
argument_list|()
return|;
return|return
cast|static_cast
argument_list|<
name|QString
argument_list|>
argument_list|(
name|displayName
argument_list|)
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
