begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|/*!     \class QPropertyAnimation     \inmodule QtCore     \brief The QPropertyAnimation class animates Qt properties     \since 4.6      \ingroup animation      QPropertyAnimation interpolates over \l{Qt's Property System}{Qt     properties}. As property values are stored in \l{QVariant}s, the     class inherits QVariantAnimation, and supports animation of the     same \l{QMetaType::Type}{meta types} as its super class.      A class declaring properties must be a QObject. To make it     possible to animate a property, it must provide a setter (so that     QPropertyAnimation can set the property's value). Note that this     makes it possible to animate many of Qt's widgets. Let's look at     an example:      \code         QPropertyAnimation *animation = new QPropertyAnimation(myWidget, "geometry");         animation->setDuration(10000);         animation->setStartValue(QRect(0, 0, 100, 30));         animation->setEndValue(QRect(250, 250, 100, 30));          animation->start();     \endcode      The property name and the QObject instance of which property     should be animated are passed to the constructor. You can then     specify the start and end value of the property. The procedure is     equal for properties in classes you have implemented     yourself--just check with QVariantAnimation that your QVariant     type is supported.      The QVariantAnimation class description explains how to set up the     animation in detail. Note, however, that if a start value is not     set, the property will start at the value it had when the     QPropertyAnimation instance was created.      QPropertyAnimation works like a charm on its own. For complex     animations that, for instance, contain several objects,     QAnimationGroup is provided. An animation group is an animation     that can contain other animations, and that can manage when its     animations are played. Look at QParallelAnimationGroup for an     example.      \sa QVariantAnimation, QAnimationGroup, {The Animation Framework} */
end_comment
begin_include
include|#
directive|include
file|"qpropertyanimation.h"
end_include
begin_include
include|#
directive|include
file|"qanimationgroup.h"
end_include
begin_include
include|#
directive|include
file|"qpropertyanimation_p.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/QMutex>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_ANIMATION
end_ifndef
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|updateMetaProperty
name|void
name|QPropertyAnimationPrivate
operator|::
name|updateMetaProperty
parameter_list|()
block|{
if|if
condition|(
operator|!
name|target
operator|||
name|propertyName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|propertyType
operator|=
name|QVariant
operator|::
name|Invalid
expr_stmt|;
name|propertyIndex
operator|=
operator|-
literal|1
expr_stmt|;
return|return;
block|}
comment|//propertyType will be set to a valid type only if there is a Q_PROPERTY
comment|//otherwise it will be set to QVariant::Invalid at the end of this function
name|propertyType
operator|=
name|targetValue
operator|->
name|property
argument_list|(
name|propertyName
argument_list|)
operator|.
name|userType
argument_list|()
expr_stmt|;
name|propertyIndex
operator|=
name|targetValue
operator|->
name|metaObject
argument_list|()
operator|->
name|indexOfProperty
argument_list|(
name|propertyName
argument_list|)
expr_stmt|;
if|if
condition|(
name|propertyType
operator|!=
name|QVariant
operator|::
name|Invalid
condition|)
name|convertValues
argument_list|(
name|propertyType
argument_list|)
expr_stmt|;
if|if
condition|(
name|propertyIndex
operator|==
operator|-
literal|1
condition|)
block|{
comment|//there is no Q_PROPERTY on the object
name|propertyType
operator|=
name|QVariant
operator|::
name|Invalid
expr_stmt|;
if|if
condition|(
operator|!
name|targetValue
operator|->
name|dynamicPropertyNames
argument_list|()
operator|.
name|contains
argument_list|(
name|propertyName
argument_list|)
condition|)
name|qWarning
argument_list|(
literal|"QPropertyAnimation: you're trying to animate a non-existing property %s of your QObject"
argument_list|,
name|propertyName
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|targetValue
operator|->
name|metaObject
argument_list|()
operator|->
name|property
argument_list|(
name|propertyIndex
argument_list|)
operator|.
name|isWritable
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"QPropertyAnimation: you're trying to animate the non-writable property %s of your QObject"
argument_list|,
name|propertyName
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|updateProperty
name|void
name|QPropertyAnimationPrivate
operator|::
name|updateProperty
parameter_list|(
specifier|const
name|QVariant
modifier|&
name|newValue
parameter_list|)
block|{
if|if
condition|(
name|state
operator|==
name|QAbstractAnimation
operator|::
name|Stopped
condition|)
return|return;
if|if
condition|(
operator|!
name|target
condition|)
block|{
name|q_func
argument_list|()
operator|->
name|stop
argument_list|()
expr_stmt|;
comment|//the target was destroyed we need to stop the animation
return|return;
block|}
if|if
condition|(
name|newValue
operator|.
name|userType
argument_list|()
operator|==
name|propertyType
condition|)
block|{
comment|//no conversion is needed, we directly call the QMetaObject::metacall
name|void
modifier|*
name|data
init|=
cast|const_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
name|newValue
operator|.
name|constData
argument_list|()
argument_list|)
decl_stmt|;
name|QMetaObject
operator|::
name|metacall
argument_list|(
name|targetValue
argument_list|,
name|QMetaObject
operator|::
name|WriteProperty
argument_list|,
name|propertyIndex
argument_list|,
operator|&
name|data
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|targetValue
operator|->
name|setProperty
argument_list|(
name|propertyName
operator|.
name|constData
argument_list|()
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     Construct a QPropertyAnimation object. \a parent is passed to QObject's     constructor. */
end_comment
begin_constructor
DECL|function|QPropertyAnimation
name|QPropertyAnimation
operator|::
name|QPropertyAnimation
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QVariantAnimation
argument_list|(
operator|*
operator|new
name|QPropertyAnimationPrivate
argument_list|,
name|parent
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Construct a QPropertyAnimation object. \a parent is passed to QObject's     constructor. The animation changes the property \a propertyName on \a     target. The default duration is 250ms.      \sa targetObject, propertyName */
end_comment
begin_constructor
DECL|function|QPropertyAnimation
name|QPropertyAnimation
operator|::
name|QPropertyAnimation
parameter_list|(
name|QObject
modifier|*
name|target
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|propertyName
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QVariantAnimation
argument_list|(
operator|*
operator|new
name|QPropertyAnimationPrivate
argument_list|,
name|parent
argument_list|)
block|{
name|setTargetObject
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|setPropertyName
argument_list|(
name|propertyName
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Destroys the QPropertyAnimation instance.  */
end_comment
begin_destructor
DECL|function|~QPropertyAnimation
name|QPropertyAnimation
operator|::
name|~
name|QPropertyAnimation
parameter_list|()
block|{
name|stop
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_comment
comment|/*!     \property QPropertyAnimation::targetObject     \brief the target QObject for this animation.      This property defines the target QObject for this animation.  */
end_comment
begin_function
DECL|function|targetObject
name|QObject
modifier|*
name|QPropertyAnimation
operator|::
name|targetObject
parameter_list|()
specifier|const
block|{
return|return
name|d_func
argument_list|()
operator|->
name|target
operator|.
name|data
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setTargetObject
name|void
name|QPropertyAnimation
operator|::
name|setTargetObject
parameter_list|(
name|QObject
modifier|*
name|target
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPropertyAnimation
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|target
operator|.
name|data
argument_list|()
operator|==
name|target
condition|)
return|return;
if|if
condition|(
name|d
operator|->
name|state
operator|!=
name|QAbstractAnimation
operator|::
name|Stopped
condition|)
block|{
name|qWarning
argument_list|(
literal|"QPropertyAnimation::setTargetObject: you can't change the target of a running animation"
argument_list|)
expr_stmt|;
return|return;
block|}
name|d
operator|->
name|target
operator|=
name|d
operator|->
name|targetValue
operator|=
name|target
expr_stmt|;
name|d
operator|->
name|updateMetaProperty
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \property QPropertyAnimation::propertyName     \brief the target property name for this animation      This property defines the target property name for this animation. The     property name is required for the animation to operate.  */
end_comment
begin_function
DECL|function|propertyName
name|QByteArray
name|QPropertyAnimation
operator|::
name|propertyName
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPropertyAnimation
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|propertyName
return|;
block|}
end_function
begin_function
DECL|function|setPropertyName
name|void
name|QPropertyAnimation
operator|::
name|setPropertyName
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|propertyName
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPropertyAnimation
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|state
operator|!=
name|QAbstractAnimation
operator|::
name|Stopped
condition|)
block|{
name|qWarning
argument_list|(
literal|"QPropertyAnimation::setPropertyName: you can't change the property name of a running animation"
argument_list|)
expr_stmt|;
return|return;
block|}
name|d
operator|->
name|propertyName
operator|=
name|propertyName
expr_stmt|;
name|d
operator|->
name|updateMetaProperty
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp  */
end_comment
begin_function
DECL|function|event
name|bool
name|QPropertyAnimation
operator|::
name|event
parameter_list|(
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
return|return
name|QVariantAnimation
operator|::
name|event
argument_list|(
name|event
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     This virtual function is called by QVariantAnimation whenever the current value     changes. \a value is the new, updated value. It updates the current value     of the property on the target object.      \sa currentValue, currentTime  */
end_comment
begin_function
DECL|function|updateCurrentValue
name|void
name|QPropertyAnimation
operator|::
name|updateCurrentValue
parameter_list|(
specifier|const
name|QVariant
modifier|&
name|value
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPropertyAnimation
argument_list|)
expr_stmt|;
name|d
operator|->
name|updateProperty
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp      If the startValue is not defined when the state of the animation changes from Stopped to Running,     the current property value is used as the initial value for the animation. */
end_comment
begin_function
DECL|function|updateState
name|void
name|QPropertyAnimation
operator|::
name|updateState
parameter_list|(
name|QAbstractAnimation
operator|::
name|State
name|newState
parameter_list|,
name|QAbstractAnimation
operator|::
name|State
name|oldState
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPropertyAnimation
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|target
operator|&&
name|oldState
operator|==
name|Stopped
condition|)
block|{
name|qWarning
argument_list|(
literal|"QPropertyAnimation::updateState (%s): Changing state of an animation without target"
argument_list|,
name|d
operator|->
name|propertyName
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|QVariantAnimation
operator|::
name|updateState
argument_list|(
name|newState
argument_list|,
name|oldState
argument_list|)
expr_stmt|;
name|QPropertyAnimation
modifier|*
name|animToStop
init|=
literal|0
decl_stmt|;
block|{
ifndef|#
directive|ifndef
name|QT_NO_THREAD
specifier|static
name|QBasicMutex
name|mutex
decl_stmt|;
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
endif|#
directive|endif
typedef|typedef
name|QPair
argument_list|<
name|QObject
modifier|*
argument_list|,
name|QByteArray
argument_list|>
name|QPropertyAnimationPair
typedef|;
typedef|typedef
name|QHash
argument_list|<
name|QPropertyAnimationPair
argument_list|,
name|QPropertyAnimation
modifier|*
argument_list|>
name|QPropertyAnimationHash
typedef|;
specifier|static
name|QPropertyAnimationHash
name|hash
decl_stmt|;
comment|//here we need to use value because we need to know to which pointer
comment|//the animation was referring in case stopped because the target was destroyed
name|QPropertyAnimationPair
name|key
argument_list|(
name|d
operator|->
name|targetValue
argument_list|,
name|d
operator|->
name|propertyName
argument_list|)
decl_stmt|;
if|if
condition|(
name|newState
operator|==
name|Running
condition|)
block|{
name|d
operator|->
name|updateMetaProperty
argument_list|()
expr_stmt|;
name|animToStop
operator|=
name|hash
operator|.
name|value
argument_list|(
name|key
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|hash
operator|.
name|insert
argument_list|(
name|key
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|locker
operator|.
name|unlock
argument_list|()
expr_stmt|;
comment|// update the default start value
if|if
condition|(
name|oldState
operator|==
name|Stopped
condition|)
block|{
name|d
operator|->
name|setDefaultStartEndValue
argument_list|(
name|d
operator|->
name|targetValue
operator|->
name|property
argument_list|(
name|d
operator|->
name|propertyName
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//let's check if we have a start value and an end value
if|if
condition|(
operator|!
name|startValue
argument_list|()
operator|.
name|isValid
argument_list|()
operator|&&
operator|(
name|d
operator|->
name|direction
operator|==
name|Backward
operator|||
operator|!
name|d
operator|->
name|defaultStartEndValue
operator|.
name|isValid
argument_list|()
operator|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"QPropertyAnimation::updateState (%s, %s, %s): starting an animation without start value"
argument_list|,
name|d
operator|->
name|propertyName
operator|.
name|constData
argument_list|()
argument_list|,
name|d
operator|->
name|target
operator|.
name|data
argument_list|()
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
argument_list|,
name|qPrintable
argument_list|(
name|d
operator|->
name|target
operator|.
name|data
argument_list|()
operator|->
name|objectName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|endValue
argument_list|()
operator|.
name|isValid
argument_list|()
operator|&&
operator|(
name|d
operator|->
name|direction
operator|==
name|Forward
operator|||
operator|!
name|d
operator|->
name|defaultStartEndValue
operator|.
name|isValid
argument_list|()
operator|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"QPropertyAnimation::updateState (%s, %s, %s): starting an animation without end value"
argument_list|,
name|d
operator|->
name|propertyName
operator|.
name|constData
argument_list|()
argument_list|,
name|d
operator|->
name|target
operator|.
name|data
argument_list|()
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
argument_list|,
name|qPrintable
argument_list|(
name|d
operator|->
name|target
operator|.
name|data
argument_list|()
operator|->
name|objectName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|hash
operator|.
name|value
argument_list|(
name|key
argument_list|)
operator|==
name|this
condition|)
block|{
name|hash
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
comment|//we need to do that after the mutex was unlocked
if|if
condition|(
name|animToStop
condition|)
block|{
comment|// try to stop the top level group
name|QAbstractAnimation
modifier|*
name|current
init|=
name|animToStop
decl_stmt|;
while|while
condition|(
name|current
operator|->
name|group
argument_list|()
operator|&&
name|current
operator|->
name|state
argument_list|()
operator|!=
name|Stopped
condition|)
name|current
operator|=
name|current
operator|->
name|group
argument_list|()
expr_stmt|;
name|current
operator|->
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_include
include|#
directive|include
file|"moc_qpropertyanimation.cpp"
end_include
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QT_NO_ANIMATION
end_comment
end_unit
