begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|/*!     \class QAnimationGroup     \inmodule QtCore     \brief The QAnimationGroup class is an abstract base class for groups of animations.     \since 4.6     \ingroup animation      An animation group is a container for animations (subclasses of     QAbstractAnimation). A group is usually responsible for managing     the \l{QAbstractAnimation::State}{state} of its animations, i.e.,     it decides when to start, stop, resume, and pause them. Currently,     Qt provides two such groups: QParallelAnimationGroup and     QSequentialAnimationGroup. Look up their class descriptions for     details.      Since QAnimationGroup inherits from QAbstractAnimation, you can     combine groups, and easily construct complex animation graphs.     You can query QAbstractAnimation for the group it belongs to     (using the \l{QAbstractAnimation::}{group()} function).      To start a top-level animation group, you simply use the     \l{QAbstractAnimation::}{start()} function from     QAbstractAnimation. By a top-level animation group, we think of a     group that itself is not contained within another group. Starting     sub groups directly is not supported, and may lead to unexpected     behavior.      \omit OK, we'll put in a snippet on this here \endomit      QAnimationGroup provides methods for adding and retrieving     animations. Besides that, you can remove animations by calling     \l removeAnimation(), and clear the animation group by calling     clear(). You may keep track of changes in the group's     animations by listening to QEvent::ChildAdded and     QEvent::ChildRemoved events.      \omit OK, let's find a snippet here as well. \endomit      QAnimationGroup takes ownership of the animations it manages, and     ensures that they are deleted when the animation group is deleted.      \sa QAbstractAnimation, QVariantAnimation, {The Animation Framework} */
end_comment
begin_include
include|#
directive|include
file|"qanimationgroup.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/qdebug.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qcoreevent.h>
end_include
begin_include
include|#
directive|include
file|"qanimationgroup_p.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_ANIMATION
end_ifndef
begin_include
include|#
directive|include
file|<algorithm>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_comment
comment|/*!     Constructs a QAnimationGroup.     \a parent is passed to QObject's constructor. */
end_comment
begin_constructor
DECL|function|QAnimationGroup
name|QAnimationGroup
operator|::
name|QAnimationGroup
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QAbstractAnimation
argument_list|(
operator|*
operator|new
name|QAnimationGroupPrivate
argument_list|,
name|parent
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     \internal */
end_comment
begin_constructor
DECL|function|QAnimationGroup
name|QAnimationGroup
operator|::
name|QAnimationGroup
parameter_list|(
name|QAnimationGroupPrivate
modifier|&
name|dd
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QAbstractAnimation
argument_list|(
name|dd
argument_list|,
name|parent
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Destroys the animation group. It will also destroy all its animations. */
end_comment
begin_destructor
DECL|function|~QAnimationGroup
name|QAnimationGroup
operator|::
name|~
name|QAnimationGroup
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     Returns a pointer to the animation at \a index in this group. This     function is useful when you need access to a particular animation.  \a     index is between 0 and animationCount() - 1.      \sa animationCount(), indexOfAnimation() */
end_comment
begin_function
DECL|function|animationAt
name|QAbstractAnimation
modifier|*
name|QAnimationGroup
operator|::
name|animationAt
parameter_list|(
name|int
name|index
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QAnimationGroup
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
operator|||
name|index
operator|>=
name|d
operator|->
name|animations
operator|.
name|size
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"QAnimationGroup::animationAt: index is out of bounds"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
return|return
name|d
operator|->
name|animations
operator|.
name|at
argument_list|(
name|index
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the number of animations managed by this group.      \sa indexOfAnimation(), addAnimation(), animationAt() */
end_comment
begin_function
DECL|function|animationCount
name|int
name|QAnimationGroup
operator|::
name|animationCount
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QAnimationGroup
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|animations
operator|.
name|size
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the index of \a animation. The returned index can be passed     to the other functions that take an index as an argument.      \sa insertAnimation(), animationAt(), takeAnimation() */
end_comment
begin_function
DECL|function|indexOfAnimation
name|int
name|QAnimationGroup
operator|::
name|indexOfAnimation
parameter_list|(
name|QAbstractAnimation
modifier|*
name|animation
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QAnimationGroup
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|animations
operator|.
name|indexOf
argument_list|(
name|animation
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Adds \a animation to this group. This will call insertAnimation with     index equals to animationCount().      \note The group takes ownership of the animation.      \sa removeAnimation() */
end_comment
begin_function
DECL|function|addAnimation
name|void
name|QAnimationGroup
operator|::
name|addAnimation
parameter_list|(
name|QAbstractAnimation
modifier|*
name|animation
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QAnimationGroup
argument_list|)
expr_stmt|;
name|insertAnimation
argument_list|(
name|d
operator|->
name|animations
operator|.
name|count
argument_list|()
argument_list|,
name|animation
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Inserts \a animation into this animation group at \a index.     If \a index is 0 the animation is inserted at the beginning.     If \a index is animationCount(), the animation is inserted at the end.      \note The group takes ownership of the animation.      \sa takeAnimation(), addAnimation(), indexOfAnimation(), removeAnimation() */
end_comment
begin_function
DECL|function|insertAnimation
name|void
name|QAnimationGroup
operator|::
name|insertAnimation
parameter_list|(
name|int
name|index
parameter_list|,
name|QAbstractAnimation
modifier|*
name|animation
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QAnimationGroup
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
argument_list|<
literal|0
operator|||
name|index
argument_list|>
name|d
operator|->
name|animations
operator|.
name|size
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"QAnimationGroup::insertAnimation: index is out of bounds"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|QAnimationGroup
modifier|*
name|oldGroup
init|=
name|animation
operator|->
name|group
argument_list|()
condition|)
name|oldGroup
operator|->
name|removeAnimation
argument_list|(
name|animation
argument_list|)
expr_stmt|;
name|d
operator|->
name|animations
operator|.
name|insert
argument_list|(
name|index
argument_list|,
name|animation
argument_list|)
expr_stmt|;
name|QAbstractAnimationPrivate
operator|::
name|get
argument_list|(
name|animation
argument_list|)
operator|->
name|group
operator|=
name|this
expr_stmt|;
comment|// this will make sure that ChildAdded event is sent to 'this'
name|animation
operator|->
name|setParent
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|d
operator|->
name|animationInsertedAt
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Removes \a animation from this group. The ownership of \a animation is     transferred to the caller.      \sa takeAnimation(), insertAnimation(), addAnimation() */
end_comment
begin_function
DECL|function|removeAnimation
name|void
name|QAnimationGroup
operator|::
name|removeAnimation
parameter_list|(
name|QAbstractAnimation
modifier|*
name|animation
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QAnimationGroup
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|animation
condition|)
block|{
name|qWarning
argument_list|(
literal|"QAnimationGroup::remove: cannot remove null animation"
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|index
init|=
name|d
operator|->
name|animations
operator|.
name|indexOf
argument_list|(
name|animation
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|==
operator|-
literal|1
condition|)
block|{
name|qWarning
argument_list|(
literal|"QAnimationGroup::remove: animation is not part of this group"
argument_list|)
expr_stmt|;
return|return;
block|}
name|takeAnimation
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the animation at \a index and removes it from the animation group.      \note The ownership of the animation is transferred to the caller.      \sa removeAnimation(), addAnimation(), insertAnimation(), indexOfAnimation() */
end_comment
begin_function
DECL|function|takeAnimation
name|QAbstractAnimation
modifier|*
name|QAnimationGroup
operator|::
name|takeAnimation
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QAnimationGroup
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
operator|||
name|index
operator|>=
name|d
operator|->
name|animations
operator|.
name|size
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"QAnimationGroup::takeAnimation: no animation at index %d"
argument_list|,
name|index
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
name|QAbstractAnimation
modifier|*
name|animation
init|=
name|d
operator|->
name|animations
operator|.
name|at
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|QAbstractAnimationPrivate
operator|::
name|get
argument_list|(
name|animation
argument_list|)
operator|->
name|group
operator|=
literal|0
expr_stmt|;
comment|// ### removing from list before doing setParent to avoid inifinite recursion
comment|// in ChildRemoved event
name|d
operator|->
name|animations
operator|.
name|removeAt
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|animation
operator|->
name|setParent
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|d
operator|->
name|animationRemoved
argument_list|(
name|index
argument_list|,
name|animation
argument_list|)
expr_stmt|;
return|return
name|animation
return|;
block|}
end_function
begin_comment
comment|/*!     Removes and deletes all animations in this animation group, and resets the current     time to 0.      \sa addAnimation(), removeAnimation() */
end_comment
begin_function
DECL|function|clear
name|void
name|QAnimationGroup
operator|::
name|clear
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QAnimationGroup
argument_list|)
expr_stmt|;
name|qDeleteAll
argument_list|(
name|d
operator|->
name|animations
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|event
name|bool
name|QAnimationGroup
operator|::
name|event
parameter_list|(
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QAnimationGroup
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|ChildAdded
condition|)
block|{
name|QChildEvent
modifier|*
name|childEvent
init|=
cast|static_cast
argument_list|<
name|QChildEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
decl_stmt|;
if|if
condition|(
name|QAbstractAnimation
modifier|*
name|a
init|=
name|qobject_cast
argument_list|<
name|QAbstractAnimation
operator|*
argument_list|>
argument_list|(
name|childEvent
operator|->
name|child
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|a
operator|->
name|group
argument_list|()
operator|!=
name|this
condition|)
name|addAnimation
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|ChildRemoved
condition|)
block|{
name|QChildEvent
modifier|*
name|childEvent
init|=
cast|static_cast
argument_list|<
name|QChildEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
decl_stmt|;
comment|// You can only rely on the child being a QObject because in the QEvent::ChildRemoved
comment|// case it might be called from the destructor. Casting down to QAbstractAnimation then
comment|// entails undefined behavior, so compare items as QObjects (which std::find does internally):
specifier|const
name|QList
argument_list|<
name|QAbstractAnimation
modifier|*
argument_list|>
operator|::
name|const_iterator
name|it
init|=
name|std
operator|::
name|find
argument_list|(
name|d
operator|->
name|animations
operator|.
name|cbegin
argument_list|()
argument_list|,
name|d
operator|->
name|animations
operator|.
name|cend
argument_list|()
argument_list|,
name|childEvent
operator|->
name|child
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|!=
name|d
operator|->
name|animations
operator|.
name|cend
argument_list|()
condition|)
name|takeAnimation
argument_list|(
name|it
operator|-
name|d
operator|->
name|animations
operator|.
name|cbegin
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|QAbstractAnimation
operator|::
name|event
argument_list|(
name|event
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|animationRemoved
name|void
name|QAnimationGroupPrivate
operator|::
name|animationRemoved
parameter_list|(
name|int
name|index
parameter_list|,
name|QAbstractAnimation
modifier|*
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QAnimationGroup
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|index
argument_list|)
expr_stmt|;
if|if
condition|(
name|animations
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|currentTime
operator|=
literal|0
expr_stmt|;
name|q
operator|->
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_include
include|#
directive|include
file|"moc_qanimationgroup.cpp"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QT_NO_ANIMATION
end_comment
end_unit
