begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Thiago Macieira<thiago@kde.org> ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QATOMIC_CXX11_H
end_ifndef
begin_define
DECL|macro|QATOMIC_CXX11_H
define|#
directive|define
name|QATOMIC_CXX11_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qgenericatomic.h>
end_include
begin_include
include|#
directive|include
file|<atomic>
end_include
begin_expr_stmt
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
if|#
directive|if
literal|0
comment|// silence syncqt warnings
expr|QT_END_NAMESPACE QT_END_HEADER
pragma|#
directive|pragma
name|qt_sync_stop_processing
endif|#
directive|endif
DECL|macro|Q_ATOMIC_INT_REFERENCE_COUNTING_IS_SOMETIMES_NATIVE
define|#
directive|define
name|Q_ATOMIC_INT_REFERENCE_COUNTING_IS_SOMETIMES_NATIVE
DECL|macro|Q_ATOMIC_INT_TEST_AND_SET_IS_SOMETIMES_NATIVE
define|#
directive|define
name|Q_ATOMIC_INT_TEST_AND_SET_IS_SOMETIMES_NATIVE
DECL|macro|Q_ATOMIC_INT_FETCH_AND_STORE_IS_SOMETIMES_NATIVE
define|#
directive|define
name|Q_ATOMIC_INT_FETCH_AND_STORE_IS_SOMETIMES_NATIVE
DECL|macro|Q_ATOMIC_INT_FETCH_AND_ADD_IS_SOMETIMES_NATIVE
define|#
directive|define
name|Q_ATOMIC_INT_FETCH_AND_ADD_IS_SOMETIMES_NATIVE
DECL|macro|Q_ATOMIC_INT32_IS_SUPPORTED
define|#
directive|define
name|Q_ATOMIC_INT32_IS_SUPPORTED
DECL|macro|Q_ATOMIC_INT32_REFERENCE_COUNTING_IS_SOMETIMES_NATIVE
define|#
directive|define
name|Q_ATOMIC_INT32_REFERENCE_COUNTING_IS_SOMETIMES_NATIVE
DECL|macro|Q_ATOMIC_INT32_TEST_AND_SET_IS_SOMETIMES_NATIVE
define|#
directive|define
name|Q_ATOMIC_INT32_TEST_AND_SET_IS_SOMETIMES_NATIVE
DECL|macro|Q_ATOMIC_INT32_FETCH_AND_STORE_IS_SOMETIMES_NATIVE
define|#
directive|define
name|Q_ATOMIC_INT32_FETCH_AND_STORE_IS_SOMETIMES_NATIVE
DECL|macro|Q_ATOMIC_INT32_FETCH_AND_ADD_IS_SOMETIMES_NATIVE
define|#
directive|define
name|Q_ATOMIC_INT32_FETCH_AND_ADD_IS_SOMETIMES_NATIVE
DECL|macro|Q_ATOMIC_POINTER_REFERENCE_COUNTING_IS_SOMETIMES_NATIVE
define|#
directive|define
name|Q_ATOMIC_POINTER_REFERENCE_COUNTING_IS_SOMETIMES_NATIVE
DECL|macro|Q_ATOMIC_POINTER_TEST_AND_SET_IS_SOMETIMES_NATIVE
define|#
directive|define
name|Q_ATOMIC_POINTER_TEST_AND_SET_IS_SOMETIMES_NATIVE
DECL|macro|Q_ATOMIC_POINTER_FETCH_AND_STORE_IS_SOMETIMES_NATIVE
define|#
directive|define
name|Q_ATOMIC_POINTER_FETCH_AND_STORE_IS_SOMETIMES_NATIVE
DECL|macro|Q_ATOMIC_POINTER_FETCH_AND_ADD_IS_SOMETIMES_NATIVE
define|#
directive|define
name|Q_ATOMIC_POINTER_FETCH_AND_ADD_IS_SOMETIMES_NATIVE
name|template
operator|<
operator|>
expr|struct
name|QAtomicIntegerTraits
operator|<
name|int
operator|>
block|{ enum
block|{
name|IsInteger
operator|=
literal|1
block|}
block|; }
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
operator|>
expr|struct
name|QAtomicIntegerTraits
operator|<
name|unsigned
name|int
operator|>
block|{ enum
block|{
name|IsInteger
operator|=
literal|1
block|}
block|; }
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
operator|>
expr|struct
name|QAtomicIntegerTraits
operator|<
name|char
operator|>
block|{ enum
block|{
name|IsInteger
operator|=
literal|1
block|}
block|; }
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
operator|>
expr|struct
name|QAtomicIntegerTraits
operator|<
name|signed
name|char
operator|>
block|{ enum
block|{
name|IsInteger
operator|=
literal|1
block|}
block|; }
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
operator|>
expr|struct
name|QAtomicIntegerTraits
operator|<
name|unsigned
name|char
operator|>
block|{ enum
block|{
name|IsInteger
operator|=
literal|1
block|}
block|; }
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
operator|>
expr|struct
name|QAtomicIntegerTraits
operator|<
name|short
operator|>
block|{ enum
block|{
name|IsInteger
operator|=
literal|1
block|}
block|; }
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
operator|>
expr|struct
name|QAtomicIntegerTraits
operator|<
name|unsigned
name|short
operator|>
block|{ enum
block|{
name|IsInteger
operator|=
literal|1
block|}
block|; }
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
operator|>
expr|struct
name|QAtomicIntegerTraits
operator|<
name|long
operator|>
block|{ enum
block|{
name|IsInteger
operator|=
literal|1
block|}
block|; }
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
operator|>
expr|struct
name|QAtomicIntegerTraits
operator|<
name|unsigned
name|long
operator|>
block|{ enum
block|{
name|IsInteger
operator|=
literal|1
block|}
block|; }
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
operator|>
expr|struct
name|QAtomicIntegerTraits
operator|<
name|long
name|long
operator|>
block|{ enum
block|{
name|IsInteger
operator|=
literal|1
block|}
block|; }
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
operator|>
expr|struct
name|QAtomicIntegerTraits
operator|<
name|unsigned
name|long
name|long
operator|>
block|{ enum
block|{
name|IsInteger
operator|=
literal|1
block|}
block|; }
expr_stmt|;
end_expr_stmt
begin_define
DECL|macro|Q_ATOMIC_INT8_IS_SUPPORTED
define|#
directive|define
name|Q_ATOMIC_INT8_IS_SUPPORTED
end_define
begin_define
DECL|macro|Q_ATOMIC_INT8_REFERENCE_COUNTING_IS_ALWAYS_NATIVE
define|#
directive|define
name|Q_ATOMIC_INT8_REFERENCE_COUNTING_IS_ALWAYS_NATIVE
end_define
begin_define
DECL|macro|Q_ATOMIC_INT8_TEST_AND_SET_IS_ALWAYS_NATIVE
define|#
directive|define
name|Q_ATOMIC_INT8_TEST_AND_SET_IS_ALWAYS_NATIVE
end_define
begin_define
DECL|macro|Q_ATOMIC_INT8_FETCH_AND_STORE_IS_ALWAYS_NATIVE
define|#
directive|define
name|Q_ATOMIC_INT8_FETCH_AND_STORE_IS_ALWAYS_NATIVE
end_define
begin_define
DECL|macro|Q_ATOMIC_INT8_FETCH_AND_ADD_IS_ALWAYS_NATIVE
define|#
directive|define
name|Q_ATOMIC_INT8_FETCH_AND_ADD_IS_ALWAYS_NATIVE
end_define
begin_define
DECL|macro|Q_ATOMIC_INT16_IS_SUPPORTED
define|#
directive|define
name|Q_ATOMIC_INT16_IS_SUPPORTED
end_define
begin_define
DECL|macro|Q_ATOMIC_INT16_REFERENCE_COUNTING_IS_ALWAYS_NATIVE
define|#
directive|define
name|Q_ATOMIC_INT16_REFERENCE_COUNTING_IS_ALWAYS_NATIVE
end_define
begin_define
DECL|macro|Q_ATOMIC_INT16_TEST_AND_SET_IS_ALWAYS_NATIVE
define|#
directive|define
name|Q_ATOMIC_INT16_TEST_AND_SET_IS_ALWAYS_NATIVE
end_define
begin_define
DECL|macro|Q_ATOMIC_INT16_FETCH_AND_STORE_IS_ALWAYS_NATIVE
define|#
directive|define
name|Q_ATOMIC_INT16_FETCH_AND_STORE_IS_ALWAYS_NATIVE
end_define
begin_define
DECL|macro|Q_ATOMIC_INT16_FETCH_AND_ADD_IS_ALWAYS_NATIVE
define|#
directive|define
name|Q_ATOMIC_INT16_FETCH_AND_ADD_IS_ALWAYS_NATIVE
end_define
begin_define
DECL|macro|Q_ATOMIC_INT64_IS_SUPPORTED
define|#
directive|define
name|Q_ATOMIC_INT64_IS_SUPPORTED
end_define
begin_define
DECL|macro|Q_ATOMIC_INT64_REFERENCE_COUNTING_IS_ALWAYS_NATIVE
define|#
directive|define
name|Q_ATOMIC_INT64_REFERENCE_COUNTING_IS_ALWAYS_NATIVE
end_define
begin_define
DECL|macro|Q_ATOMIC_INT64_TEST_AND_SET_IS_ALWAYS_NATIVE
define|#
directive|define
name|Q_ATOMIC_INT64_TEST_AND_SET_IS_ALWAYS_NATIVE
end_define
begin_define
DECL|macro|Q_ATOMIC_INT64_FETCH_AND_STORE_IS_ALWAYS_NATIVE
define|#
directive|define
name|Q_ATOMIC_INT64_FETCH_AND_STORE_IS_ALWAYS_NATIVE
end_define
begin_define
DECL|macro|Q_ATOMIC_INT64_FETCH_AND_ADD_IS_ALWAYS_NATIVE
define|#
directive|define
name|Q_ATOMIC_INT64_FETCH_AND_ADD_IS_ALWAYS_NATIVE
end_define
begin_expr_stmt
DECL|struct|QAtomicOps
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|QAtomicOps
block|{
DECL|typedef|Type
typedef|typedef
name|std
operator|::
name|atomic
operator|<
name|T
operator|>
name|Type
expr_stmt|;
end_expr_stmt
begin_typedef
DECL|typedef|_AdditiveType
typedef|typedef
name|typename
name|QAtomicAdditiveType
operator|<
name|T
operator|>
operator|::
name|AdditiveT
name|_AdditiveType
expr_stmt|;
end_typedef
begin_decl_stmt
DECL|member|AddScale
specifier|static
specifier|const
name|int
name|AddScale
init|=
name|QAtomicAdditiveType
operator|<
name|T
operator|>
operator|::
name|AddScale
decl_stmt|;
end_decl_stmt
begin_function
specifier|static
specifier|inline
DECL|function|load
name|T
name|load
parameter_list|(
specifier|const
name|Type
modifier|&
name|_q_value
parameter_list|)
block|{
return|return
name|_q_value
operator|.
name|load
argument_list|(
name|std
operator|::
name|memory_order_relaxed
argument_list|)
return|;
block|}
end_function
begin_function
specifier|static
specifier|inline
DECL|function|load
name|T
name|load
parameter_list|(
specifier|const
specifier|volatile
name|Type
modifier|&
name|_q_value
parameter_list|)
block|{
return|return
name|_q_value
operator|.
name|load
argument_list|(
name|std
operator|::
name|memory_order_relaxed
argument_list|)
return|;
block|}
end_function
begin_function
specifier|static
specifier|inline
DECL|function|loadAcquire
name|T
name|loadAcquire
parameter_list|(
specifier|const
name|Type
modifier|&
name|_q_value
parameter_list|)
block|{
return|return
name|_q_value
operator|.
name|load
argument_list|(
name|std
operator|::
name|memory_order_acquire
argument_list|)
return|;
block|}
end_function
begin_function
specifier|static
specifier|inline
DECL|function|loadAcquire
name|T
name|loadAcquire
parameter_list|(
specifier|const
specifier|volatile
name|Type
modifier|&
name|_q_value
parameter_list|)
block|{
return|return
name|_q_value
operator|.
name|load
argument_list|(
name|std
operator|::
name|memory_order_acquire
argument_list|)
return|;
block|}
end_function
begin_function
specifier|static
specifier|inline
DECL|function|store
name|void
name|store
parameter_list|(
name|Type
modifier|&
name|_q_value
parameter_list|,
name|T
name|newValue
parameter_list|)
block|{
name|_q_value
operator|.
name|store
argument_list|(
name|newValue
argument_list|,
name|std
operator|::
name|memory_order_relaxed
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
specifier|static
specifier|inline
DECL|function|storeRelease
name|void
name|storeRelease
parameter_list|(
name|Type
modifier|&
name|_q_value
parameter_list|,
name|T
name|newValue
parameter_list|)
block|{
name|_q_value
operator|.
name|store
argument_list|(
name|newValue
argument_list|,
name|std
operator|::
name|memory_order_release
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isReferenceCountingNative
specifier|static
specifier|inline
name|bool
name|isReferenceCountingNative
parameter_list|()
block|{
return|return
name|true
return|;
block|}
end_function
begin_function
DECL|function|isReferenceCountingWaitFree
specifier|static
specifier|inline
name|bool
name|isReferenceCountingWaitFree
parameter_list|()
block|{
return|return
name|false
return|;
block|}
end_function
begin_function
DECL|function|ref
specifier|static
specifier|inline
name|bool
name|ref
parameter_list|(
name|Type
modifier|&
name|_q_value
parameter_list|)
block|{
return|return
operator|++
name|_q_value
operator|!=
literal|0
return|;
block|}
end_function
begin_function
DECL|function|deref
specifier|static
specifier|inline
name|bool
name|deref
parameter_list|(
name|Type
modifier|&
name|_q_value
parameter_list|)
block|{
return|return
operator|--
name|_q_value
operator|!=
literal|0
return|;
block|}
end_function
begin_function
DECL|function|isTestAndSetNative
specifier|static
specifier|inline
name|bool
name|isTestAndSetNative
parameter_list|()
block|{
return|return
name|false
return|;
block|}
end_function
begin_function
DECL|function|isTestAndSetWaitFree
specifier|static
specifier|inline
name|bool
name|isTestAndSetWaitFree
parameter_list|()
block|{
return|return
name|false
return|;
block|}
end_function
begin_function
specifier|static
DECL|function|testAndSetRelaxed
name|bool
name|testAndSetRelaxed
parameter_list|(
name|Type
modifier|&
name|_q_value
parameter_list|,
name|T
name|expectedValue
parameter_list|,
name|T
name|newValue
parameter_list|)
block|{
return|return
name|_q_value
operator|.
name|compare_exchange_strong
argument_list|(
name|expectedValue
argument_list|,
name|newValue
argument_list|,
name|std
operator|::
name|memory_order_relaxed
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|testAndSetAcquire
specifier|static
name|bool
name|testAndSetAcquire
parameter_list|(
name|Type
modifier|&
name|_q_value
parameter_list|,
name|T
name|expectedValue
parameter_list|,
name|T
name|newValue
parameter_list|)
block|{
return|return
name|_q_value
operator|.
name|compare_exchange_strong
argument_list|(
name|expectedValue
argument_list|,
name|newValue
argument_list|,
name|std
operator|::
name|memory_order_acquire
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|testAndSetRelease
specifier|static
name|bool
name|testAndSetRelease
parameter_list|(
name|Type
modifier|&
name|_q_value
parameter_list|,
name|T
name|expectedValue
parameter_list|,
name|T
name|newValue
parameter_list|)
block|{
return|return
name|_q_value
operator|.
name|compare_exchange_strong
argument_list|(
name|expectedValue
argument_list|,
name|newValue
argument_list|,
name|std
operator|::
name|memory_order_release
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|testAndSetOrdered
specifier|static
name|bool
name|testAndSetOrdered
parameter_list|(
name|Type
modifier|&
name|_q_value
parameter_list|,
name|T
name|expectedValue
parameter_list|,
name|T
name|newValue
parameter_list|)
block|{
return|return
name|_q_value
operator|.
name|compare_exchange_strong
argument_list|(
name|expectedValue
argument_list|,
name|newValue
argument_list|,
name|std
operator|::
name|memory_order_acq_rel
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|isFetchAndStoreNative
specifier|static
specifier|inline
name|bool
name|isFetchAndStoreNative
parameter_list|()
block|{
return|return
name|false
return|;
block|}
end_function
begin_function
DECL|function|isFetchAndStoreWaitFree
specifier|static
specifier|inline
name|bool
name|isFetchAndStoreWaitFree
parameter_list|()
block|{
return|return
name|false
return|;
block|}
end_function
begin_function
DECL|function|fetchAndStoreRelaxed
specifier|static
name|T
name|fetchAndStoreRelaxed
parameter_list|(
name|Type
modifier|&
name|_q_value
parameter_list|,
name|T
name|newValue
parameter_list|)
block|{
return|return
name|_q_value
operator|.
name|exchange
argument_list|(
name|newValue
argument_list|,
name|std
operator|::
name|memory_order_relaxed
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|fetchAndStoreAcquire
specifier|static
name|T
name|fetchAndStoreAcquire
parameter_list|(
name|Type
modifier|&
name|_q_value
parameter_list|,
name|T
name|newValue
parameter_list|)
block|{
return|return
name|_q_value
operator|.
name|exchange
argument_list|(
name|newValue
argument_list|,
name|std
operator|::
name|memory_order_acquire
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|fetchAndStoreRelease
specifier|static
name|T
name|fetchAndStoreRelease
parameter_list|(
name|Type
modifier|&
name|_q_value
parameter_list|,
name|T
name|newValue
parameter_list|)
block|{
return|return
name|_q_value
operator|.
name|exchange
argument_list|(
name|newValue
argument_list|,
name|std
operator|::
name|memory_order_release
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|fetchAndStoreOrdered
specifier|static
name|T
name|fetchAndStoreOrdered
parameter_list|(
name|Type
modifier|&
name|_q_value
parameter_list|,
name|T
name|newValue
parameter_list|)
block|{
return|return
name|_q_value
operator|.
name|exchange
argument_list|(
name|newValue
argument_list|,
name|std
operator|::
name|memory_order_acq_rel
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|isFetchAndAddNative
specifier|static
specifier|inline
name|bool
name|isFetchAndAddNative
parameter_list|()
block|{
return|return
name|false
return|;
block|}
end_function
begin_function
DECL|function|isFetchAndAddWaitFree
specifier|static
specifier|inline
name|bool
name|isFetchAndAddWaitFree
parameter_list|()
block|{
return|return
name|false
return|;
block|}
end_function
begin_function
specifier|static
DECL|function|fetchAndAddRelaxed
name|T
name|fetchAndAddRelaxed
parameter_list|(
name|Type
modifier|&
name|_q_value
parameter_list|,
name|_AdditiveType
name|valueToAdd
parameter_list|)
block|{
return|return
name|_q_value
operator|.
name|fetch_add
argument_list|(
name|valueToAdd
operator|*
name|AddScale
argument_list|,
name|std
operator|::
name|memory_order_relaxed
argument_list|)
return|;
block|}
end_function
begin_function
specifier|static
DECL|function|fetchAndAddAcquire
name|T
name|fetchAndAddAcquire
parameter_list|(
name|Type
modifier|&
name|_q_value
parameter_list|,
name|_AdditiveType
name|valueToAdd
parameter_list|)
block|{
return|return
name|_q_value
operator|.
name|fetch_add
argument_list|(
name|valueToAdd
operator|*
name|AddScale
argument_list|,
name|std
operator|::
name|memory_order_acquire
argument_list|)
return|;
block|}
end_function
begin_function
specifier|static
DECL|function|fetchAndAddRelease
name|T
name|fetchAndAddRelease
parameter_list|(
name|Type
modifier|&
name|_q_value
parameter_list|,
name|_AdditiveType
name|valueToAdd
parameter_list|)
block|{
return|return
name|_q_value
operator|.
name|fetch_add
argument_list|(
name|valueToAdd
operator|*
name|AddScale
argument_list|,
name|std
operator|::
name|memory_order_release
argument_list|)
return|;
block|}
end_function
begin_function
specifier|static
DECL|function|fetchAndAddOrdered
name|T
name|fetchAndAddOrdered
parameter_list|(
name|Type
modifier|&
name|_q_value
parameter_list|,
name|_AdditiveType
name|valueToAdd
parameter_list|)
block|{
return|return
name|_q_value
operator|.
name|fetch_add
argument_list|(
name|valueToAdd
operator|*
name|AddScale
argument_list|,
name|std
operator|::
name|memory_order_acq_rel
argument_list|)
return|;
block|}
end_function
begin_ifdef
unit|};
ifdef|#
directive|ifdef
name|ATOMIC_VAR_INIT
end_ifdef
begin_define
DECL|macro|Q_BASIC_ATOMIC_INITIALIZER
define|#
directive|define
name|Q_BASIC_ATOMIC_INITIALIZER
parameter_list|(
name|a
parameter_list|)
value|{ ATOMIC_VAR_INIT(a) }
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|Q_BASIC_ATOMIC_INITIALIZER
define|#
directive|define
name|Q_BASIC_ATOMIC_INITIALIZER
parameter_list|(
name|a
parameter_list|)
value|{ {a} }
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
name|QT_END_NAMESPACE
name|QT_END_HEADER
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QATOMIC_CXX0X_H
end_comment
end_unit
