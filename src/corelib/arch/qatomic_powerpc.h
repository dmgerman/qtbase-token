begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QATOMIC_POWERPC_H
end_ifndef
begin_define
DECL|macro|QATOMIC_POWERPC_H
define|#
directive|define
name|QATOMIC_POWERPC_H
end_define
begin_expr_stmt
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
DECL|macro|Q_ATOMIC_INT_REFERENCE_COUNTING_IS_ALWAYS_NATIVE
define|#
directive|define
name|Q_ATOMIC_INT_REFERENCE_COUNTING_IS_ALWAYS_NATIVE
DECL|function|isReferenceCountingNative
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|isReferenceCountingNative
argument_list|()
block|{
return|return
name|true
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|isReferenceCountingWaitFree
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|isReferenceCountingWaitFree
argument_list|()
block|{
return|return
name|false
return|;
block|}
end_expr_stmt
begin_define
DECL|macro|Q_ATOMIC_INT_TEST_AND_SET_IS_ALWAYS_NATIVE
define|#
directive|define
name|Q_ATOMIC_INT_TEST_AND_SET_IS_ALWAYS_NATIVE
end_define
begin_expr_stmt
DECL|function|isTestAndSetNative
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|isTestAndSetNative
argument_list|()
block|{
return|return
name|true
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|isTestAndSetWaitFree
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|isTestAndSetWaitFree
argument_list|()
block|{
return|return
name|false
return|;
block|}
end_expr_stmt
begin_define
DECL|macro|Q_ATOMIC_INT_FETCH_AND_STORE_IS_ALWAYS_NATIVE
define|#
directive|define
name|Q_ATOMIC_INT_FETCH_AND_STORE_IS_ALWAYS_NATIVE
end_define
begin_expr_stmt
DECL|function|isFetchAndStoreNative
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|isFetchAndStoreNative
argument_list|()
block|{
return|return
name|true
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|isFetchAndStoreWaitFree
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|isFetchAndStoreWaitFree
argument_list|()
block|{
return|return
name|false
return|;
block|}
end_expr_stmt
begin_define
DECL|macro|Q_ATOMIC_INT_FETCH_AND_ADD_IS_ALWAYS_NATIVE
define|#
directive|define
name|Q_ATOMIC_INT_FETCH_AND_ADD_IS_ALWAYS_NATIVE
end_define
begin_expr_stmt
DECL|function|isFetchAndAddNative
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|isFetchAndAddNative
argument_list|()
block|{
return|return
name|true
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|isFetchAndAddWaitFree
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|isFetchAndAddWaitFree
argument_list|()
block|{
return|return
name|false
return|;
block|}
end_expr_stmt
begin_define
DECL|macro|Q_ATOMIC_POINTER_TEST_AND_SET_IS_ALWAYS_NATIVE
define|#
directive|define
name|Q_ATOMIC_POINTER_TEST_AND_SET_IS_ALWAYS_NATIVE
end_define
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|isTestAndSetNative
name|Q_INLINE_TEMPLATE
name|bool
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|isTestAndSetNative
argument_list|()
block|{
return|return
name|true
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|isTestAndSetWaitFree
name|Q_INLINE_TEMPLATE
name|bool
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|isTestAndSetWaitFree
argument_list|()
block|{
return|return
name|false
return|;
block|}
end_expr_stmt
begin_define
DECL|macro|Q_ATOMIC_POINTER_FETCH_AND_STORE_IS_ALWAYS_NATIVE
define|#
directive|define
name|Q_ATOMIC_POINTER_FETCH_AND_STORE_IS_ALWAYS_NATIVE
end_define
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|isFetchAndStoreNative
name|Q_INLINE_TEMPLATE
name|bool
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|isFetchAndStoreNative
argument_list|()
block|{
return|return
name|true
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|isFetchAndStoreWaitFree
name|Q_INLINE_TEMPLATE
name|bool
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|isFetchAndStoreWaitFree
argument_list|()
block|{
return|return
name|false
return|;
block|}
end_expr_stmt
begin_define
DECL|macro|Q_ATOMIC_POINTER_FETCH_AND_ADD_IS_ALWAYS_NATIVE
define|#
directive|define
name|Q_ATOMIC_POINTER_FETCH_AND_ADD_IS_ALWAYS_NATIVE
end_define
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|isFetchAndAddNative
name|Q_INLINE_TEMPLATE
name|bool
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|isFetchAndAddNative
argument_list|()
block|{
return|return
name|true
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|isFetchAndAddWaitFree
name|Q_INLINE_TEMPLATE
name|bool
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|isFetchAndAddWaitFree
argument_list|()
block|{
return|return
name|false
return|;
block|}
end_expr_stmt
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_CC_GNU
argument_list|)
end_if
begin_if
if|#
directive|if
name|__GNUC__
operator|<
literal|4
operator|||
operator|(
name|__GNUC__
operator|==
literal|4
operator|&&
name|__GNUC_MINOR__
operator|<
literal|2
operator|)
expr|\
operator|||
operator|(
operator|!
name|defined
argument_list|(
name|__64BIT__
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__powerpc64__
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__ppc64__
argument_list|)
operator|)
end_if
begin_define
DECL|macro|_Q_VALUE
define|#
directive|define
name|_Q_VALUE
value|"0, %[_q_value]"
end_define
begin_define
DECL|macro|_Q_VALUE_MEMORY_OPERAND
define|#
directive|define
name|_Q_VALUE_MEMORY_OPERAND
value|"+m" (_q_value)
end_define
begin_define
DECL|macro|_Q_VALUE_REGISTER_OPERAND
define|#
directive|define
name|_Q_VALUE_REGISTER_OPERAND
value|[_q_value] "r" (&_q_value),
end_define
begin_else
else|#
directive|else
end_else
begin_comment
comment|// On 64-bit with gcc>= 4.2
end_comment
begin_define
DECL|macro|_Q_VALUE
define|#
directive|define
name|_Q_VALUE
value|"%y[_q_value]"
end_define
begin_define
DECL|macro|_Q_VALUE_MEMORY_OPERAND
define|#
directive|define
name|_Q_VALUE_MEMORY_OPERAND
value|[_q_value] "+Z" (_q_value)
end_define
begin_define
DECL|macro|_Q_VALUE_REGISTER_OPERAND
define|#
directive|define
name|_Q_VALUE_REGISTER_OPERAND
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
DECL|function|ref
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|ref
argument_list|()
block|{
specifier|register
name|int
name|originalValue
block|;
specifier|register
name|int
name|newValue
block|;
name|asm
specifier|volatile
operator|(
literal|"lwarx  %[originalValue],"
name|_Q_VALUE
literal|"\n"
literal|"addi   %[newValue], %[originalValue], %[one]\n"
literal|"stwcx. %[newValue],"
name|_Q_VALUE
literal|"\n"
literal|"bne-   $-12\n"
operator|:
index|[
name|originalValue
index|]
literal|"=&b"
operator|(
name|originalValue
operator|)
operator|,
index|[
name|newValue
index|]
literal|"=&r"
operator|(
name|newValue
operator|)
operator|,
name|_Q_VALUE_MEMORY_OPERAND
operator|:
name|_Q_VALUE_REGISTER_OPERAND
index|[
name|one
index|]
literal|"i"
operator|(
literal|1
operator|)
operator|:
literal|"cc"
operator|,
literal|"memory"
operator|)
block|;
return|return
name|newValue
operator|!=
literal|0
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|deref
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|deref
argument_list|()
block|{
specifier|register
name|int
name|originalValue
block|;
specifier|register
name|int
name|newValue
block|;
name|asm
specifier|volatile
operator|(
literal|"lwarx  %[originalValue],"
name|_Q_VALUE
literal|"\n"
literal|"addi   %[newValue], %[originalValue], %[minusOne]\n"
literal|"stwcx. %[newValue],"
name|_Q_VALUE
literal|"\n"
literal|"bne-   $-12\n"
operator|:
index|[
name|originalValue
index|]
literal|"=&b"
operator|(
name|originalValue
operator|)
operator|,
index|[
name|newValue
index|]
literal|"=&r"
operator|(
name|newValue
operator|)
operator|,
name|_Q_VALUE_MEMORY_OPERAND
operator|:
name|_Q_VALUE_REGISTER_OPERAND
index|[
name|minusOne
index|]
literal|"i"
operator|(
operator|-
literal|1
operator|)
operator|:
literal|"cc"
operator|,
literal|"memory"
operator|)
block|;
return|return
name|newValue
operator|!=
literal|0
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|testAndSetRelaxed
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|testAndSetRelaxed
argument_list|(
argument|int expectedValue
argument_list|,
argument|int newValue
argument_list|)
block|{
specifier|register
name|int
name|result
block|;
name|asm
specifier|volatile
operator|(
literal|"lwarx  %[result],"
name|_Q_VALUE
literal|"\n"
literal|"xor.   %[result], %[result], %[expectedValue]\n"
literal|"bne    $+12\n"
literal|"stwcx. %[newValue],"
name|_Q_VALUE
literal|"\n"
literal|"bne-   $-16\n"
operator|:
index|[
name|result
index|]
literal|"=&r"
operator|(
name|result
operator|)
operator|,
name|_Q_VALUE_MEMORY_OPERAND
operator|:
name|_Q_VALUE_REGISTER_OPERAND
index|[
name|expectedValue
index|]
literal|"r"
operator|(
name|expectedValue
operator|)
operator|,
index|[
name|newValue
index|]
literal|"r"
operator|(
name|newValue
operator|)
operator|:
literal|"cc"
operator|,
literal|"memory"
operator|)
block|;
return|return
name|result
operator|==
literal|0
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|testAndSetAcquire
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|testAndSetAcquire
argument_list|(
argument|int expectedValue
argument_list|,
argument|int newValue
argument_list|)
block|{
specifier|register
name|int
name|result
block|;
name|asm
specifier|volatile
operator|(
literal|"lwarx  %[result],"
name|_Q_VALUE
literal|"\n"
literal|"xor.   %[result], %[result], %[expectedValue]\n"
literal|"bne    $+16\n"
literal|"stwcx. %[newValue],"
name|_Q_VALUE
literal|"\n"
literal|"bne-   $-16\n"
literal|"isync\n"
operator|:
index|[
name|result
index|]
literal|"=&r"
operator|(
name|result
operator|)
operator|,
name|_Q_VALUE_MEMORY_OPERAND
operator|:
name|_Q_VALUE_REGISTER_OPERAND
index|[
name|expectedValue
index|]
literal|"r"
operator|(
name|expectedValue
operator|)
operator|,
index|[
name|newValue
index|]
literal|"r"
operator|(
name|newValue
operator|)
operator|:
literal|"cc"
operator|,
literal|"memory"
operator|)
block|;
return|return
name|result
operator|==
literal|0
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|testAndSetRelease
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|testAndSetRelease
argument_list|(
argument|int expectedValue
argument_list|,
argument|int newValue
argument_list|)
block|{
specifier|register
name|int
name|result
block|;
name|asm
specifier|volatile
operator|(
literal|"eieio\n"
literal|"lwarx  %[result],"
name|_Q_VALUE
literal|"\n"
literal|"xor.   %[result], %[result], %[expectedValue]\n"
literal|"bne    $+12\n"
literal|"stwcx. %[newValue],"
name|_Q_VALUE
literal|"\n"
literal|"bne-   $-16\n"
operator|:
index|[
name|result
index|]
literal|"=&r"
operator|(
name|result
operator|)
operator|,
name|_Q_VALUE_MEMORY_OPERAND
operator|:
name|_Q_VALUE_REGISTER_OPERAND
index|[
name|expectedValue
index|]
literal|"r"
operator|(
name|expectedValue
operator|)
operator|,
index|[
name|newValue
index|]
literal|"r"
operator|(
name|newValue
operator|)
operator|:
literal|"cc"
operator|,
literal|"memory"
operator|)
block|;
return|return
name|result
operator|==
literal|0
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|fetchAndStoreRelaxed
specifier|inline
name|int
name|QBasicAtomicInt
operator|::
name|fetchAndStoreRelaxed
argument_list|(
argument|int newValue
argument_list|)
block|{
specifier|register
name|int
name|originalValue
block|;
name|asm
specifier|volatile
operator|(
literal|"lwarx  %[originalValue],"
name|_Q_VALUE
literal|"\n"
literal|"stwcx. %[newValue],"
name|_Q_VALUE
literal|"\n"
literal|"bne-   $-8\n"
operator|:
index|[
name|originalValue
index|]
literal|"=&r"
operator|(
name|originalValue
operator|)
operator|,
name|_Q_VALUE_MEMORY_OPERAND
operator|:
name|_Q_VALUE_REGISTER_OPERAND
index|[
name|newValue
index|]
literal|"r"
operator|(
name|newValue
operator|)
operator|:
literal|"cc"
operator|,
literal|"memory"
operator|)
block|;
return|return
name|originalValue
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|fetchAndStoreAcquire
specifier|inline
name|int
name|QBasicAtomicInt
operator|::
name|fetchAndStoreAcquire
argument_list|(
argument|int newValue
argument_list|)
block|{
specifier|register
name|int
name|originalValue
block|;
name|asm
specifier|volatile
operator|(
literal|"lwarx  %[originalValue],"
name|_Q_VALUE
literal|"\n"
literal|"stwcx. %[newValue],"
name|_Q_VALUE
literal|"\n"
literal|"bne-   $-8\n"
literal|"isync\n"
operator|:
index|[
name|originalValue
index|]
literal|"=&r"
operator|(
name|originalValue
operator|)
operator|,
name|_Q_VALUE_MEMORY_OPERAND
operator|:
name|_Q_VALUE_REGISTER_OPERAND
index|[
name|newValue
index|]
literal|"r"
operator|(
name|newValue
operator|)
operator|:
literal|"cc"
operator|,
literal|"memory"
operator|)
block|;
return|return
name|originalValue
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|fetchAndStoreRelease
specifier|inline
name|int
name|QBasicAtomicInt
operator|::
name|fetchAndStoreRelease
argument_list|(
argument|int newValue
argument_list|)
block|{
specifier|register
name|int
name|originalValue
block|;
name|asm
specifier|volatile
operator|(
literal|"eieio\n"
literal|"lwarx  %[originalValue],"
name|_Q_VALUE
literal|"\n"
literal|"stwcx. %[newValue],"
name|_Q_VALUE
literal|"\n"
literal|"bne-   $-8\n"
operator|:
index|[
name|originalValue
index|]
literal|"=&r"
operator|(
name|originalValue
operator|)
operator|,
name|_Q_VALUE_MEMORY_OPERAND
operator|:
name|_Q_VALUE_REGISTER_OPERAND
index|[
name|newValue
index|]
literal|"r"
operator|(
name|newValue
operator|)
operator|:
literal|"cc"
operator|,
literal|"memory"
operator|)
block|;
return|return
name|originalValue
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|fetchAndAddRelaxed
specifier|inline
name|int
name|QBasicAtomicInt
operator|::
name|fetchAndAddRelaxed
argument_list|(
argument|int valueToAdd
argument_list|)
block|{
specifier|register
name|int
name|originalValue
block|;
specifier|register
name|int
name|newValue
block|;
name|asm
specifier|volatile
operator|(
literal|"lwarx  %[originalValue],"
name|_Q_VALUE
literal|"\n"
literal|"add    %[newValue], %[originalValue], %[valueToAdd]\n"
literal|"stwcx. %[newValue],"
name|_Q_VALUE
literal|"\n"
literal|"bne-   $-12\n"
operator|:
index|[
name|originalValue
index|]
literal|"=&r"
operator|(
name|originalValue
operator|)
operator|,
index|[
name|newValue
index|]
literal|"=&r"
operator|(
name|newValue
operator|)
operator|,
name|_Q_VALUE_MEMORY_OPERAND
operator|:
name|_Q_VALUE_REGISTER_OPERAND
index|[
name|valueToAdd
index|]
literal|"r"
operator|(
name|valueToAdd
operator|)
operator|:
literal|"cc"
operator|,
literal|"memory"
operator|)
block|;
return|return
name|originalValue
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|fetchAndAddAcquire
specifier|inline
name|int
name|QBasicAtomicInt
operator|::
name|fetchAndAddAcquire
argument_list|(
argument|int valueToAdd
argument_list|)
block|{
specifier|register
name|int
name|originalValue
block|;
specifier|register
name|int
name|newValue
block|;
name|asm
specifier|volatile
operator|(
literal|"lwarx  %[originalValue],"
name|_Q_VALUE
literal|"\n"
literal|"add    %[newValue], %[originalValue], %[valueToAdd]\n"
literal|"stwcx. %[newValue],"
name|_Q_VALUE
literal|"\n"
literal|"bne-   $-12\n"
literal|"isync\n"
operator|:
index|[
name|originalValue
index|]
literal|"=&r"
operator|(
name|originalValue
operator|)
operator|,
index|[
name|newValue
index|]
literal|"=&r"
operator|(
name|newValue
operator|)
operator|,
name|_Q_VALUE_MEMORY_OPERAND
operator|:
name|_Q_VALUE_REGISTER_OPERAND
index|[
name|valueToAdd
index|]
literal|"r"
operator|(
name|valueToAdd
operator|)
operator|:
literal|"cc"
operator|,
literal|"memory"
operator|)
block|;
return|return
name|originalValue
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|fetchAndAddRelease
specifier|inline
name|int
name|QBasicAtomicInt
operator|::
name|fetchAndAddRelease
argument_list|(
argument|int valueToAdd
argument_list|)
block|{
specifier|register
name|int
name|originalValue
block|;
specifier|register
name|int
name|newValue
block|;
name|asm
specifier|volatile
operator|(
literal|"eieio\n"
literal|"lwarx  %[originalValue],"
name|_Q_VALUE
literal|"\n"
literal|"add    %[newValue], %[originalValue], %[valueToAdd]\n"
literal|"stwcx. %[newValue],"
name|_Q_VALUE
literal|"\n"
literal|"bne-   $-12\n"
operator|:
index|[
name|originalValue
index|]
literal|"=&r"
operator|(
name|originalValue
operator|)
operator|,
index|[
name|newValue
index|]
literal|"=&r"
operator|(
name|newValue
operator|)
operator|,
name|_Q_VALUE_MEMORY_OPERAND
operator|:
name|_Q_VALUE_REGISTER_OPERAND
index|[
name|valueToAdd
index|]
literal|"r"
operator|(
name|valueToAdd
operator|)
operator|:
literal|"cc"
operator|,
literal|"memory"
operator|)
block|;
return|return
name|originalValue
return|;
block|}
end_expr_stmt
begin_if
if|#
directive|if
name|defined
argument_list|(
name|__64BIT__
argument_list|)
operator|||
name|defined
argument_list|(
name|__powerpc64__
argument_list|)
operator|||
name|defined
argument_list|(
name|__ppc64__
argument_list|)
end_if
begin_define
DECL|macro|LPARX
define|#
directive|define
name|LPARX
value|"ldarx"
end_define
begin_define
DECL|macro|STPCX
define|#
directive|define
name|STPCX
value|"stdcx."
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|LPARX
define|#
directive|define
name|LPARX
value|"lwarx"
end_define
begin_define
DECL|macro|STPCX
define|#
directive|define
name|STPCX
value|"stwcx."
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|testAndSetRelaxed
name|Q_INLINE_TEMPLATE
name|bool
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|testAndSetRelaxed
argument_list|(
argument|T *expectedValue
argument_list|,
argument|T *newValue
argument_list|)
block|{
specifier|register
name|void
operator|*
name|result
block|;
name|asm
specifier|volatile
operator|(
name|LPARX
literal|"  %[result],"
name|_Q_VALUE
literal|"\n"
literal|"xor.   %[result], %[result], %[expectedValue]\n"
literal|"bne    $+12\n"
name|STPCX
literal|"  %[newValue],"
name|_Q_VALUE
literal|"\n"
literal|"bne-   $-16\n"
operator|:
index|[
name|result
index|]
literal|"=&r"
operator|(
name|result
operator|)
operator|,
name|_Q_VALUE_MEMORY_OPERAND
operator|:
name|_Q_VALUE_REGISTER_OPERAND
index|[
name|expectedValue
index|]
literal|"r"
operator|(
name|expectedValue
operator|)
operator|,
index|[
name|newValue
index|]
literal|"r"
operator|(
name|newValue
operator|)
operator|:
literal|"cc"
operator|,
literal|"memory"
operator|)
block|;
return|return
name|result
operator|==
literal|0
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|testAndSetAcquire
name|Q_INLINE_TEMPLATE
name|bool
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|testAndSetAcquire
argument_list|(
argument|T *expectedValue
argument_list|,
argument|T *newValue
argument_list|)
block|{
specifier|register
name|void
operator|*
name|result
block|;
name|asm
specifier|volatile
operator|(
name|LPARX
literal|"  %[result],"
name|_Q_VALUE
literal|"\n"
literal|"xor.   %[result], %[result], %[expectedValue]\n"
literal|"bne    $+16\n"
name|STPCX
literal|"  %[newValue],"
name|_Q_VALUE
literal|"\n"
literal|"bne-   $-16\n"
literal|"isync\n"
operator|:
index|[
name|result
index|]
literal|"=&r"
operator|(
name|result
operator|)
operator|,
name|_Q_VALUE_MEMORY_OPERAND
operator|:
name|_Q_VALUE_REGISTER_OPERAND
index|[
name|expectedValue
index|]
literal|"r"
operator|(
name|expectedValue
operator|)
operator|,
index|[
name|newValue
index|]
literal|"r"
operator|(
name|newValue
operator|)
operator|:
literal|"cc"
operator|,
literal|"memory"
operator|)
block|;
return|return
name|result
operator|==
literal|0
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|testAndSetRelease
name|Q_INLINE_TEMPLATE
name|bool
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|testAndSetRelease
argument_list|(
argument|T *expectedValue
argument_list|,
argument|T *newValue
argument_list|)
block|{
specifier|register
name|void
operator|*
name|result
block|;
name|asm
specifier|volatile
operator|(
literal|"eieio\n"
name|LPARX
literal|"  %[result],"
name|_Q_VALUE
literal|"\n"
literal|"xor.   %[result], %[result], %[expectedValue]\n"
literal|"bne    $+12\n"
name|STPCX
literal|"  %[newValue],"
name|_Q_VALUE
literal|"\n"
literal|"bne-   $-16\n"
operator|:
index|[
name|result
index|]
literal|"=&r"
operator|(
name|result
operator|)
operator|,
name|_Q_VALUE_MEMORY_OPERAND
operator|:
name|_Q_VALUE_REGISTER_OPERAND
index|[
name|expectedValue
index|]
literal|"r"
operator|(
name|expectedValue
operator|)
operator|,
index|[
name|newValue
index|]
literal|"r"
operator|(
name|newValue
operator|)
operator|:
literal|"cc"
operator|,
literal|"memory"
operator|)
block|;
return|return
name|result
operator|==
literal|0
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|fetchAndStoreRelaxed
name|Q_INLINE_TEMPLATE
name|T
operator|*
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|fetchAndStoreRelaxed
argument_list|(
argument|T *newValue
argument_list|)
block|{
specifier|register
name|T
operator|*
name|originalValue
block|;
name|asm
specifier|volatile
operator|(
name|LPARX
literal|"  %[originalValue],"
name|_Q_VALUE
literal|"\n"
name|STPCX
literal|"  %[newValue],"
name|_Q_VALUE
literal|"\n"
literal|"bne-   $-8\n"
operator|:
index|[
name|originalValue
index|]
literal|"=&r"
operator|(
name|originalValue
operator|)
operator|,
name|_Q_VALUE_MEMORY_OPERAND
operator|:
name|_Q_VALUE_REGISTER_OPERAND
index|[
name|newValue
index|]
literal|"r"
operator|(
name|newValue
operator|)
operator|:
literal|"cc"
operator|,
literal|"memory"
operator|)
block|;
return|return
name|originalValue
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|fetchAndStoreAcquire
name|Q_INLINE_TEMPLATE
name|T
operator|*
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|fetchAndStoreAcquire
argument_list|(
argument|T *newValue
argument_list|)
block|{
specifier|register
name|T
operator|*
name|originalValue
block|;
name|asm
specifier|volatile
operator|(
name|LPARX
literal|"  %[originalValue],"
name|_Q_VALUE
literal|"\n"
name|STPCX
literal|"  %[newValue],"
name|_Q_VALUE
literal|"\n"
literal|"bne-   $-8\n"
literal|"isync\n"
operator|:
index|[
name|originalValue
index|]
literal|"=&r"
operator|(
name|originalValue
operator|)
operator|,
name|_Q_VALUE_MEMORY_OPERAND
operator|:
name|_Q_VALUE_REGISTER_OPERAND
index|[
name|newValue
index|]
literal|"r"
operator|(
name|newValue
operator|)
operator|:
literal|"cc"
operator|,
literal|"memory"
operator|)
block|;
return|return
name|originalValue
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|fetchAndStoreRelease
name|Q_INLINE_TEMPLATE
name|T
operator|*
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|fetchAndStoreRelease
argument_list|(
argument|T *newValue
argument_list|)
block|{
specifier|register
name|T
operator|*
name|originalValue
block|;
name|asm
specifier|volatile
operator|(
literal|"eieio\n"
name|LPARX
literal|"  %[originalValue],"
name|_Q_VALUE
literal|"\n"
name|STPCX
literal|"  %[newValue],"
name|_Q_VALUE
literal|"\n"
literal|"bne-   $-8\n"
operator|:
index|[
name|originalValue
index|]
literal|"=&r"
operator|(
name|originalValue
operator|)
operator|,
name|_Q_VALUE_MEMORY_OPERAND
operator|:
name|_Q_VALUE_REGISTER_OPERAND
index|[
name|newValue
index|]
literal|"r"
operator|(
name|newValue
operator|)
operator|:
literal|"cc"
operator|,
literal|"memory"
operator|)
block|;
return|return
name|originalValue
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|fetchAndAddRelaxed
name|Q_INLINE_TEMPLATE
name|T
operator|*
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|fetchAndAddRelaxed
argument_list|(
argument|qptrdiff valueToAdd
argument_list|)
block|{
specifier|register
name|T
operator|*
name|originalValue
block|;
specifier|register
name|T
operator|*
name|newValue
block|;
name|asm
specifier|volatile
operator|(
name|LPARX
literal|"  %[originalValue],"
name|_Q_VALUE
literal|"\n"
literal|"add    %[newValue], %[originalValue], %[valueToAdd]\n"
name|STPCX
literal|"  %[newValue],"
name|_Q_VALUE
literal|"\n"
literal|"bne-   $-12\n"
operator|:
index|[
name|originalValue
index|]
literal|"=&r"
operator|(
name|originalValue
operator|)
operator|,
index|[
name|newValue
index|]
literal|"=&r"
operator|(
name|newValue
operator|)
operator|,
name|_Q_VALUE_MEMORY_OPERAND
operator|:
name|_Q_VALUE_REGISTER_OPERAND
index|[
name|valueToAdd
index|]
literal|"r"
operator|(
name|valueToAdd
operator|*
sizeof|sizeof
argument_list|(
name|T
argument_list|)
operator|)
operator|:
literal|"cc"
operator|,
literal|"memory"
operator|)
block|;
return|return
name|originalValue
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|fetchAndAddAcquire
name|Q_INLINE_TEMPLATE
name|T
operator|*
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|fetchAndAddAcquire
argument_list|(
argument|qptrdiff valueToAdd
argument_list|)
block|{
specifier|register
name|T
operator|*
name|originalValue
block|;
specifier|register
name|T
operator|*
name|newValue
block|;
name|asm
specifier|volatile
operator|(
name|LPARX
literal|"  %[originalValue],"
name|_Q_VALUE
literal|"\n"
literal|"add    %[newValue], %[originalValue], %[valueToAdd]\n"
name|STPCX
literal|"  %[newValue],"
name|_Q_VALUE
literal|"\n"
literal|"bne-   $-12\n"
literal|"isync\n"
operator|:
index|[
name|originalValue
index|]
literal|"=&r"
operator|(
name|originalValue
operator|)
operator|,
index|[
name|newValue
index|]
literal|"=&r"
operator|(
name|newValue
operator|)
operator|,
name|_Q_VALUE_MEMORY_OPERAND
operator|:
name|_Q_VALUE_REGISTER_OPERAND
index|[
name|valueToAdd
index|]
literal|"r"
operator|(
name|valueToAdd
operator|*
sizeof|sizeof
argument_list|(
name|T
argument_list|)
operator|)
operator|:
literal|"cc"
operator|,
literal|"memory"
operator|)
block|;
return|return
name|originalValue
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|fetchAndAddRelease
name|Q_INLINE_TEMPLATE
name|T
operator|*
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|fetchAndAddRelease
argument_list|(
argument|qptrdiff valueToAdd
argument_list|)
block|{
specifier|register
name|T
operator|*
name|originalValue
block|;
specifier|register
name|T
operator|*
name|newValue
block|;
name|asm
specifier|volatile
operator|(
literal|"eieio\n"
name|LPARX
literal|"  %[originalValue],"
name|_Q_VALUE
literal|"\n"
literal|"add    %[newValue], %[originalValue], %[valueToAdd]\n"
name|STPCX
literal|"  %[newValue],"
name|_Q_VALUE
literal|"\n"
literal|"bne-   $-12\n"
operator|:
index|[
name|originalValue
index|]
literal|"=&r"
operator|(
name|originalValue
operator|)
operator|,
index|[
name|newValue
index|]
literal|"=&r"
operator|(
name|newValue
operator|)
operator|,
name|_Q_VALUE_MEMORY_OPERAND
operator|:
name|_Q_VALUE_REGISTER_OPERAND
index|[
name|valueToAdd
index|]
literal|"r"
operator|(
name|valueToAdd
operator|*
sizeof|sizeof
argument_list|(
name|T
argument_list|)
operator|)
operator|:
literal|"cc"
operator|,
literal|"memory"
operator|)
block|;
return|return
name|originalValue
return|;
block|}
end_expr_stmt
begin_undef
DECL|macro|LPARX
undef|#
directive|undef
name|LPARX
end_undef
begin_undef
DECL|macro|STPCX
undef|#
directive|undef
name|STPCX
end_undef
begin_undef
DECL|macro|_Q_VALUE
undef|#
directive|undef
name|_Q_VALUE
end_undef
begin_undef
DECL|macro|_Q_VALUE_MEMORY_OPERAND
undef|#
directive|undef
name|_Q_VALUE_MEMORY_OPERAND
end_undef
begin_undef
DECL|macro|_Q_VALUE_REGISTER_OPERAND
undef|#
directive|undef
name|_Q_VALUE_REGISTER_OPERAND
end_undef
begin_else
else|#
directive|else
end_else
begin_extern
extern|extern
literal|"C"
block|{
name|int
name|q_atomic_test_and_set_int
parameter_list|(
specifier|volatile
name|int
modifier|*
name|ptr
parameter_list|,
name|int
name|expectedValue
parameter_list|,
name|int
name|newValue
parameter_list|)
function_decl|;
name|int
name|q_atomic_test_and_set_acquire_int
parameter_list|(
specifier|volatile
name|int
modifier|*
name|ptr
parameter_list|,
name|int
name|expectedValue
parameter_list|,
name|int
name|newValue
parameter_list|)
function_decl|;
name|int
name|q_atomic_test_and_set_release_int
parameter_list|(
specifier|volatile
name|int
modifier|*
name|ptr
parameter_list|,
name|int
name|expectedValue
parameter_list|,
name|int
name|newValue
parameter_list|)
function_decl|;
name|int
name|q_atomic_test_and_set_ptr
parameter_list|(
specifier|volatile
name|void
modifier|*
name|ptr
parameter_list|,
name|void
modifier|*
name|expectedValue
parameter_list|,
name|void
modifier|*
name|newValue
parameter_list|)
function_decl|;
name|int
name|q_atomic_test_and_set_acquire_ptr
parameter_list|(
specifier|volatile
name|void
modifier|*
name|ptr
parameter_list|,
name|void
modifier|*
name|expectedValue
parameter_list|,
name|void
modifier|*
name|newValue
parameter_list|)
function_decl|;
name|int
name|q_atomic_test_and_set_release_ptr
parameter_list|(
specifier|volatile
name|void
modifier|*
name|ptr
parameter_list|,
name|void
modifier|*
name|expectedValue
parameter_list|,
name|void
modifier|*
name|newValue
parameter_list|)
function_decl|;
name|int
name|q_atomic_increment
parameter_list|(
specifier|volatile
name|int
modifier|*
parameter_list|)
function_decl|;
name|int
name|q_atomic_decrement
parameter_list|(
specifier|volatile
name|int
modifier|*
parameter_list|)
function_decl|;
name|int
name|q_atomic_set_int
parameter_list|(
specifier|volatile
name|int
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|int
name|q_atomic_fetch_and_store_acquire_int
parameter_list|(
specifier|volatile
name|int
modifier|*
name|ptr
parameter_list|,
name|int
name|newValue
parameter_list|)
function_decl|;
name|int
name|q_atomic_fetch_and_store_release_int
parameter_list|(
specifier|volatile
name|int
modifier|*
name|ptr
parameter_list|,
name|int
name|newValue
parameter_list|)
function_decl|;
name|void
modifier|*
name|q_atomic_set_ptr
parameter_list|(
specifier|volatile
name|void
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|int
name|q_atomic_fetch_and_store_acquire_ptr
parameter_list|(
specifier|volatile
name|void
modifier|*
name|ptr
parameter_list|,
name|void
modifier|*
name|newValue
parameter_list|)
function_decl|;
name|int
name|q_atomic_fetch_and_store_release_ptr
parameter_list|(
specifier|volatile
name|void
modifier|*
name|ptr
parameter_list|,
name|void
modifier|*
name|newValue
parameter_list|)
function_decl|;
name|int
name|q_atomic_fetch_and_add_int
parameter_list|(
specifier|volatile
name|int
modifier|*
name|ptr
parameter_list|,
name|int
name|valueToAdd
parameter_list|)
function_decl|;
name|int
name|q_atomic_fetch_and_add_acquire_int
parameter_list|(
specifier|volatile
name|int
modifier|*
name|ptr
parameter_list|,
name|int
name|valueToAdd
parameter_list|)
function_decl|;
name|int
name|q_atomic_fetch_and_add_release_int
parameter_list|(
specifier|volatile
name|int
modifier|*
name|ptr
parameter_list|,
name|int
name|valueToAdd
parameter_list|)
function_decl|;
name|void
modifier|*
name|q_atomic_fetch_and_add_ptr
parameter_list|(
specifier|volatile
name|void
modifier|*
name|ptr
parameter_list|,
name|qptrdiff
name|valueToAdd
parameter_list|)
function_decl|;
name|void
modifier|*
name|q_atomic_fetch_and_add_acquire_ptr
parameter_list|(
specifier|volatile
name|void
modifier|*
name|ptr
parameter_list|,
name|qptrdiff
name|valueToAdd
parameter_list|)
function_decl|;
name|void
modifier|*
name|q_atomic_fetch_and_add_release_ptr
parameter_list|(
specifier|volatile
name|void
modifier|*
name|ptr
parameter_list|,
name|qptrdiff
name|valueToAdd
parameter_list|)
function_decl|;
block|}
end_extern
begin_comment
comment|// extern "C"
end_comment
begin_expr_stmt
DECL|function|ref
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|ref
argument_list|()
block|{
return|return
name|q_atomic_increment
argument_list|(
operator|&
name|_q_value
argument_list|)
operator|!=
literal|0
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|deref
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|deref
argument_list|()
block|{
return|return
name|q_atomic_decrement
argument_list|(
operator|&
name|_q_value
argument_list|)
operator|!=
literal|0
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|testAndSetRelaxed
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|testAndSetRelaxed
argument_list|(
argument|int expectedValue
argument_list|,
argument|int newValue
argument_list|)
block|{
return|return
name|q_atomic_test_and_set_int
argument_list|(
operator|&
name|_q_value
argument_list|,
name|expectedValue
argument_list|,
name|newValue
argument_list|)
operator|!=
literal|0
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|testAndSetAcquire
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|testAndSetAcquire
argument_list|(
argument|int expectedValue
argument_list|,
argument|int newValue
argument_list|)
block|{
return|return
name|q_atomic_test_and_set_acquire_int
argument_list|(
operator|&
name|_q_value
argument_list|,
name|expectedValue
argument_list|,
name|newValue
argument_list|)
operator|!=
literal|0
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|testAndSetRelease
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|testAndSetRelease
argument_list|(
argument|int expectedValue
argument_list|,
argument|int newValue
argument_list|)
block|{
return|return
name|q_atomic_test_and_set_release_int
argument_list|(
operator|&
name|_q_value
argument_list|,
name|expectedValue
argument_list|,
name|newValue
argument_list|)
operator|!=
literal|0
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|fetchAndStoreRelaxed
specifier|inline
name|int
name|QBasicAtomicInt
operator|::
name|fetchAndStoreRelaxed
argument_list|(
argument|int newValue
argument_list|)
block|{
return|return
name|q_atomic_set_int
argument_list|(
operator|&
name|_q_value
argument_list|,
name|newValue
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|fetchAndStoreAcquire
specifier|inline
name|int
name|QBasicAtomicInt
operator|::
name|fetchAndStoreAcquire
argument_list|(
argument|int newValue
argument_list|)
block|{
return|return
name|q_atomic_fetch_and_store_acquire_int
argument_list|(
operator|&
name|_q_value
argument_list|,
name|newValue
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|fetchAndStoreRelease
specifier|inline
name|int
name|QBasicAtomicInt
operator|::
name|fetchAndStoreRelease
argument_list|(
argument|int newValue
argument_list|)
block|{
return|return
name|q_atomic_fetch_and_store_release_int
argument_list|(
operator|&
name|_q_value
argument_list|,
name|newValue
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|fetchAndAddRelaxed
specifier|inline
name|int
name|QBasicAtomicInt
operator|::
name|fetchAndAddRelaxed
argument_list|(
argument|int valueToAdd
argument_list|)
block|{
return|return
name|q_atomic_fetch_and_add_int
argument_list|(
operator|&
name|_q_value
argument_list|,
name|valueToAdd
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|fetchAndAddAcquire
specifier|inline
name|int
name|QBasicAtomicInt
operator|::
name|fetchAndAddAcquire
argument_list|(
argument|int valueToAdd
argument_list|)
block|{
return|return
name|q_atomic_fetch_and_add_acquire_int
argument_list|(
operator|&
name|_q_value
argument_list|,
name|valueToAdd
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|fetchAndAddRelease
specifier|inline
name|int
name|QBasicAtomicInt
operator|::
name|fetchAndAddRelease
argument_list|(
argument|int valueToAdd
argument_list|)
block|{
return|return
name|q_atomic_fetch_and_add_release_int
argument_list|(
operator|&
name|_q_value
argument_list|,
name|valueToAdd
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|testAndSetRelaxed
name|Q_INLINE_TEMPLATE
name|bool
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|testAndSetRelaxed
argument_list|(
argument|T *expectedValue
argument_list|,
argument|T *newValue
argument_list|)
block|{
return|return
name|q_atomic_test_and_set_ptr
argument_list|(
operator|&
name|_q_value
argument_list|,
name|expectedValue
argument_list|,
name|newValue
argument_list|)
operator|!=
literal|0
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|testAndSetAcquire
name|Q_INLINE_TEMPLATE
name|bool
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|testAndSetAcquire
argument_list|(
argument|T *expectedValue
argument_list|,
argument|T *newValue
argument_list|)
block|{
return|return
name|q_atomic_test_and_set_acquire_ptr
argument_list|(
operator|&
name|_q_value
argument_list|,
name|expectedValue
argument_list|,
name|newValue
argument_list|)
operator|!=
literal|0
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|testAndSetRelease
name|Q_INLINE_TEMPLATE
name|bool
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|testAndSetRelease
argument_list|(
argument|T *expectedValue
argument_list|,
argument|T *newValue
argument_list|)
block|{
return|return
name|q_atomic_test_and_set_release_ptr
argument_list|(
operator|&
name|_q_value
argument_list|,
name|expectedValue
argument_list|,
name|newValue
argument_list|)
operator|!=
literal|0
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|fetchAndStoreRelaxed
name|Q_INLINE_TEMPLATE
name|T
operator|*
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|fetchAndStoreRelaxed
argument_list|(
argument|T *newValue
argument_list|)
block|{
return|return
name|reinterpret_cast
operator|<
name|T
operator|*
operator|>
operator|(
name|q_atomic_set_ptr
argument_list|(
operator|&
name|_q_value
argument_list|,
name|newValue
argument_list|)
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|fetchAndStoreAcquire
name|Q_INLINE_TEMPLATE
name|T
operator|*
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|fetchAndStoreAcquire
argument_list|(
argument|T *newValue
argument_list|)
block|{
return|return
name|reinterpret_cast
operator|<
name|T
operator|*
operator|>
operator|(
name|q_atomic_fetch_and_store_acquire_ptr
argument_list|(
operator|&
name|_q_value
argument_list|,
name|newValue
argument_list|)
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|fetchAndStoreRelease
name|Q_INLINE_TEMPLATE
name|T
operator|*
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|fetchAndStoreRelease
argument_list|(
argument|T *newValue
argument_list|)
block|{
return|return
name|reinterpret_cast
operator|<
name|T
operator|*
operator|>
operator|(
name|q_atomic_fetch_and_store_release_ptr
argument_list|(
operator|&
name|_q_value
argument_list|,
name|newValue
argument_list|)
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|fetchAndAddRelaxed
name|Q_INLINE_TEMPLATE
name|T
operator|*
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|fetchAndAddRelaxed
argument_list|(
argument|qptrdiff valueToAdd
argument_list|)
block|{
return|return
name|reinterpret_cast
operator|<
name|T
operator|*
operator|>
operator|(
name|q_atomic_fetch_and_add_ptr
argument_list|(
operator|&
name|_q_value
argument_list|,
name|valueToAdd
operator|*
sizeof|sizeof
argument_list|(
name|T
argument_list|)
argument_list|)
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|fetchAndAddAcquire
name|Q_INLINE_TEMPLATE
name|T
operator|*
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|fetchAndAddAcquire
argument_list|(
argument|qptrdiff valueToAdd
argument_list|)
block|{
return|return
name|reinterpret_cast
operator|<
name|T
operator|*
operator|>
operator|(
name|q_atomic_fetch_and_add_acquire_ptr
argument_list|(
operator|&
name|_q_value
argument_list|,
name|valueToAdd
operator|*
sizeof|sizeof
argument_list|(
name|T
argument_list|)
argument_list|)
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|fetchAndAddRelease
name|Q_INLINE_TEMPLATE
name|T
operator|*
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|fetchAndAddRelease
argument_list|(
argument|qptrdiff valueToAdd
argument_list|)
block|{
return|return
name|reinterpret_cast
operator|<
name|T
operator|*
operator|>
operator|(
name|q_atomic_fetch_and_add_release_ptr
argument_list|(
operator|&
name|_q_value
argument_list|,
name|valueToAdd
operator|*
sizeof|sizeof
argument_list|(
name|T
argument_list|)
argument_list|)
operator|)
return|;
block|}
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
DECL|function|testAndSetOrdered
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|testAndSetOrdered
argument_list|(
argument|int expectedValue
argument_list|,
argument|int newValue
argument_list|)
block|{
return|return
name|testAndSetAcquire
argument_list|(
name|expectedValue
argument_list|,
name|newValue
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|fetchAndStoreOrdered
specifier|inline
name|int
name|QBasicAtomicInt
operator|::
name|fetchAndStoreOrdered
argument_list|(
argument|int newValue
argument_list|)
block|{
return|return
name|fetchAndStoreAcquire
argument_list|(
name|newValue
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|fetchAndAddOrdered
specifier|inline
name|int
name|QBasicAtomicInt
operator|::
name|fetchAndAddOrdered
argument_list|(
argument|int valueToAdd
argument_list|)
block|{
return|return
name|fetchAndAddAcquire
argument_list|(
name|valueToAdd
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|testAndSetOrdered
name|Q_INLINE_TEMPLATE
name|bool
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|testAndSetOrdered
argument_list|(
argument|T *expectedValue
argument_list|,
argument|T *newValue
argument_list|)
block|{
return|return
name|testAndSetAcquire
argument_list|(
name|expectedValue
argument_list|,
name|newValue
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|fetchAndStoreOrdered
name|Q_INLINE_TEMPLATE
name|T
operator|*
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|fetchAndStoreOrdered
argument_list|(
argument|T *newValue
argument_list|)
block|{
return|return
name|fetchAndStoreAcquire
argument_list|(
name|newValue
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|fetchAndAddOrdered
name|Q_INLINE_TEMPLATE
name|T
operator|*
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|fetchAndAddOrdered
argument_list|(
argument|qptrdiff valueToAdd
argument_list|)
block|{
return|return
name|fetchAndAddAcquire
argument_list|(
name|valueToAdd
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|QT_END_NAMESPACE
name|QT_END_HEADER
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QATOMIC_POWERPC_H
end_comment
end_unit
