begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QATOMIC_SPARC_H
end_ifndef
begin_define
DECL|macro|QATOMIC_SPARC_H
define|#
directive|define
name|QATOMIC_SPARC_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qoldbasicatomic.h>
end_include
begin_expr_stmt
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
if|#
directive|if
name|defined
argument_list|(
name|_LP64
argument_list|)
DECL|macro|Q_ATOMIC_INT_REFERENCE_COUNTING_IS_ALWAYS_NATIVE
define|#
directive|define
name|Q_ATOMIC_INT_REFERENCE_COUNTING_IS_ALWAYS_NATIVE
DECL|function|isReferenceCountingNative
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|isReferenceCountingNative
argument_list|()
block|{
return|return
name|true
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|isReferenceCountingWaitFree
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|isReferenceCountingWaitFree
argument_list|()
block|{
return|return
name|false
return|;
block|}
end_expr_stmt
begin_define
DECL|macro|Q_ATOMIC_INT_TEST_AND_SET_IS_ALWAYS_NATIVE
define|#
directive|define
name|Q_ATOMIC_INT_TEST_AND_SET_IS_ALWAYS_NATIVE
end_define
begin_define
DECL|macro|Q_ATOMIC_INT_TEST_AND_SET_IS_WAIT_FREE
define|#
directive|define
name|Q_ATOMIC_INT_TEST_AND_SET_IS_WAIT_FREE
end_define
begin_expr_stmt
DECL|function|isTestAndSetNative
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|isTestAndSetNative
argument_list|()
block|{
return|return
name|true
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|isTestAndSetWaitFree
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|isTestAndSetWaitFree
argument_list|()
block|{
return|return
name|true
return|;
block|}
end_expr_stmt
begin_define
DECL|macro|Q_ATOMIC_INT_FETCH_AND_STORE_IS_ALWAYS_NATIVE
define|#
directive|define
name|Q_ATOMIC_INT_FETCH_AND_STORE_IS_ALWAYS_NATIVE
end_define
begin_define
DECL|macro|Q_ATOMIC_INT_FETCH_AND_STORE_IS_WAIT_FREE
define|#
directive|define
name|Q_ATOMIC_INT_FETCH_AND_STORE_IS_WAIT_FREE
end_define
begin_expr_stmt
DECL|function|isFetchAndStoreNative
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|isFetchAndStoreNative
argument_list|()
block|{
return|return
name|true
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|isFetchAndStoreWaitFree
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|isFetchAndStoreWaitFree
argument_list|()
block|{
return|return
name|true
return|;
block|}
end_expr_stmt
begin_define
DECL|macro|Q_ATOMIC_INT_FETCH_AND_ADD_IS_ALWAYS_NATIVE
define|#
directive|define
name|Q_ATOMIC_INT_FETCH_AND_ADD_IS_ALWAYS_NATIVE
end_define
begin_expr_stmt
DECL|function|isFetchAndAddNative
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|isFetchAndAddNative
argument_list|()
block|{
return|return
name|true
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|isFetchAndAddWaitFree
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|isFetchAndAddWaitFree
argument_list|()
block|{
return|return
name|false
return|;
block|}
end_expr_stmt
begin_define
DECL|macro|Q_ATOMIC_POINTER_TEST_AND_SET_IS_ALWAYS_NATIVE
define|#
directive|define
name|Q_ATOMIC_POINTER_TEST_AND_SET_IS_ALWAYS_NATIVE
end_define
begin_define
DECL|macro|Q_ATOMIC_POINTER_TEST_AND_SET_IS_WAIT_FREE
define|#
directive|define
name|Q_ATOMIC_POINTER_TEST_AND_SET_IS_WAIT_FREE
end_define
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|isTestAndSetNative
name|Q_INLINE_TEMPLATE
name|bool
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|isTestAndSetNative
argument_list|()
block|{
return|return
name|true
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|isTestAndSetWaitFree
name|Q_INLINE_TEMPLATE
name|bool
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|isTestAndSetWaitFree
argument_list|()
block|{
return|return
name|true
return|;
block|}
end_expr_stmt
begin_define
DECL|macro|Q_ATOMIC_POINTER_FETCH_AND_STORE_IS_ALWAYS_NATIVE
define|#
directive|define
name|Q_ATOMIC_POINTER_FETCH_AND_STORE_IS_ALWAYS_NATIVE
end_define
begin_define
DECL|macro|Q_ATOMIC_POINTER_FETCH_AND_STORE_IS_WAIT_FREE
define|#
directive|define
name|Q_ATOMIC_POINTER_FETCH_AND_STORE_IS_WAIT_FREE
end_define
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|isFetchAndStoreNative
name|Q_INLINE_TEMPLATE
name|bool
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|isFetchAndStoreNative
argument_list|()
block|{
return|return
name|true
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|isFetchAndStoreWaitFree
name|Q_INLINE_TEMPLATE
name|bool
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|isFetchAndStoreWaitFree
argument_list|()
block|{
return|return
name|true
return|;
block|}
end_expr_stmt
begin_define
DECL|macro|Q_ATOMIC_POINTER_FETCH_AND_ADD_IS_ALWAYS_NATIVE
define|#
directive|define
name|Q_ATOMIC_POINTER_FETCH_AND_ADD_IS_ALWAYS_NATIVE
end_define
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|isFetchAndAddNative
name|Q_INLINE_TEMPLATE
name|bool
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|isFetchAndAddNative
argument_list|()
block|{
return|return
name|true
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|isFetchAndAddWaitFree
name|Q_INLINE_TEMPLATE
name|bool
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|isFetchAndAddWaitFree
argument_list|()
block|{
return|return
name|false
return|;
block|}
end_expr_stmt
begin_extern
extern|extern
literal|"C"
block|{
name|Q_CORE_EXPORT
name|int
name|q_atomic_increment
parameter_list|(
specifier|volatile
name|int
modifier|*
name|ptr
parameter_list|)
function_decl|;
name|Q_CORE_EXPORT
name|int
name|q_atomic_decrement
parameter_list|(
specifier|volatile
name|int
modifier|*
name|ptr
parameter_list|)
function_decl|;
name|Q_CORE_EXPORT
name|int
name|q_atomic_test_and_set_int
parameter_list|(
specifier|volatile
name|int
modifier|*
name|ptr
parameter_list|,
name|int
name|expected
parameter_list|,
name|int
name|newval
parameter_list|)
function_decl|;
name|Q_CORE_EXPORT
name|int
name|q_atomic_test_and_set_acquire_int
parameter_list|(
specifier|volatile
name|int
modifier|*
name|ptr
parameter_list|,
name|int
name|expected
parameter_list|,
name|int
name|newval
parameter_list|)
function_decl|;
name|Q_CORE_EXPORT
name|int
name|q_atomic_test_and_set_release_int
parameter_list|(
specifier|volatile
name|int
modifier|*
name|ptr
parameter_list|,
name|int
name|expected
parameter_list|,
name|int
name|newval
parameter_list|)
function_decl|;
name|Q_CORE_EXPORT
name|int
name|q_atomic_set_int
parameter_list|(
specifier|volatile
name|int
modifier|*
name|ptr
parameter_list|,
name|int
name|newval
parameter_list|)
function_decl|;
name|Q_CORE_EXPORT
name|int
name|q_atomic_fetch_and_store_acquire_int
parameter_list|(
specifier|volatile
name|int
modifier|*
name|ptr
parameter_list|,
name|int
name|newval
parameter_list|)
function_decl|;
name|Q_CORE_EXPORT
name|int
name|q_atomic_fetch_and_store_release_int
parameter_list|(
specifier|volatile
name|int
modifier|*
name|ptr
parameter_list|,
name|int
name|newval
parameter_list|)
function_decl|;
name|Q_CORE_EXPORT
name|int
name|q_atomic_fetch_and_add_int
parameter_list|(
specifier|volatile
name|int
modifier|*
name|ptr
parameter_list|,
name|int
name|value
parameter_list|)
function_decl|;
name|Q_CORE_EXPORT
name|int
name|q_atomic_fetch_and_add_acquire_int
parameter_list|(
specifier|volatile
name|int
modifier|*
name|ptr
parameter_list|,
name|int
name|value
parameter_list|)
function_decl|;
name|Q_CORE_EXPORT
name|int
name|q_atomic_fetch_and_add_release_int
parameter_list|(
specifier|volatile
name|int
modifier|*
name|ptr
parameter_list|,
name|int
name|value
parameter_list|)
function_decl|;
name|Q_CORE_EXPORT
name|int
name|q_atomic_test_and_set_ptr
parameter_list|(
specifier|volatile
name|void
modifier|*
name|ptr
parameter_list|,
name|void
modifier|*
name|expected
parameter_list|,
name|void
modifier|*
name|newval
parameter_list|)
function_decl|;
name|Q_CORE_EXPORT
name|int
name|q_atomic_test_and_set_acquire_ptr
parameter_list|(
specifier|volatile
name|void
modifier|*
name|ptr
parameter_list|,
name|void
modifier|*
name|expected
parameter_list|,
name|void
modifier|*
name|newval
parameter_list|)
function_decl|;
name|Q_CORE_EXPORT
name|int
name|q_atomic_test_and_set_release_ptr
parameter_list|(
specifier|volatile
name|void
modifier|*
name|ptr
parameter_list|,
name|void
modifier|*
name|expected
parameter_list|,
name|void
modifier|*
name|newval
parameter_list|)
function_decl|;
name|Q_CORE_EXPORT
name|void
modifier|*
name|q_atomic_set_ptr
parameter_list|(
specifier|volatile
name|void
modifier|*
name|ptr
parameter_list|,
name|void
modifier|*
name|newval
parameter_list|)
function_decl|;
name|Q_CORE_EXPORT
name|void
modifier|*
name|q_atomic_fetch_and_store_acquire_ptr
parameter_list|(
specifier|volatile
name|void
modifier|*
name|ptr
parameter_list|,
name|void
modifier|*
name|newval
parameter_list|)
function_decl|;
name|Q_CORE_EXPORT
name|void
modifier|*
name|q_atomic_fetch_and_store_release_ptr
parameter_list|(
specifier|volatile
name|void
modifier|*
name|ptr
parameter_list|,
name|void
modifier|*
name|newval
parameter_list|)
function_decl|;
name|Q_CORE_EXPORT
name|void
modifier|*
name|q_atomic_fetch_and_add_ptr
parameter_list|(
specifier|volatile
name|void
modifier|*
name|ptr
parameter_list|,
name|int
name|value
parameter_list|)
function_decl|;
name|Q_CORE_EXPORT
name|void
modifier|*
name|q_atomic_fetch_and_add_acquire_ptr
parameter_list|(
specifier|volatile
name|void
modifier|*
name|ptr
parameter_list|,
name|int
name|value
parameter_list|)
function_decl|;
name|Q_CORE_EXPORT
name|void
modifier|*
name|q_atomic_fetch_and_add_release_ptr
parameter_list|(
specifier|volatile
name|void
modifier|*
name|ptr
parameter_list|,
name|int
name|value
parameter_list|)
function_decl|;
block|}
end_extern
begin_expr_stmt
DECL|function|ref
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|ref
argument_list|()
block|{
return|return
name|fetchAndAddRelaxed
argument_list|(
literal|1
argument_list|)
operator|!=
operator|-
literal|1
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|deref
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|deref
argument_list|()
block|{
return|return
name|fetchAndAddRelaxed
argument_list|(
operator|-
literal|1
argument_list|)
operator|!=
literal|1
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|testAndSetRelaxed
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|testAndSetRelaxed
argument_list|(
argument|int expectedValue
argument_list|,
argument|int newValue
argument_list|)
block|{
return|return
name|q_atomic_test_and_set_int
argument_list|(
operator|&
name|_q_value
argument_list|,
name|expectedValue
argument_list|,
name|newValue
argument_list|)
operator|!=
literal|0
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|testAndSetAcquire
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|testAndSetAcquire
argument_list|(
argument|int expectedValue
argument_list|,
argument|int newValue
argument_list|)
block|{
return|return
name|q_atomic_test_and_set_acquire_int
argument_list|(
operator|&
name|_q_value
argument_list|,
name|expectedValue
argument_list|,
name|newValue
argument_list|)
operator|!=
literal|0
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|testAndSetRelease
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|testAndSetRelease
argument_list|(
argument|int expectedValue
argument_list|,
argument|int newValue
argument_list|)
block|{
return|return
name|q_atomic_test_and_set_release_int
argument_list|(
operator|&
name|_q_value
argument_list|,
name|expectedValue
argument_list|,
name|newValue
argument_list|)
operator|!=
literal|0
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|testAndSetOrdered
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|testAndSetOrdered
argument_list|(
argument|int expectedValue
argument_list|,
argument|int newValue
argument_list|)
block|{
return|return
name|q_atomic_test_and_set_acquire_int
argument_list|(
operator|&
name|_q_value
argument_list|,
name|expectedValue
argument_list|,
name|newValue
argument_list|)
operator|!=
literal|0
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|fetchAndStoreRelaxed
specifier|inline
name|int
name|QBasicAtomicInt
operator|::
name|fetchAndStoreRelaxed
argument_list|(
argument|int newValue
argument_list|)
block|{
return|return
name|q_atomic_set_int
argument_list|(
operator|&
name|_q_value
argument_list|,
name|newValue
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|fetchAndStoreAcquire
specifier|inline
name|int
name|QBasicAtomicInt
operator|::
name|fetchAndStoreAcquire
argument_list|(
argument|int newValue
argument_list|)
block|{
return|return
name|q_atomic_fetch_and_store_acquire_int
argument_list|(
operator|&
name|_q_value
argument_list|,
name|newValue
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|fetchAndStoreRelease
specifier|inline
name|int
name|QBasicAtomicInt
operator|::
name|fetchAndStoreRelease
argument_list|(
argument|int newValue
argument_list|)
block|{
return|return
name|q_atomic_fetch_and_store_release_int
argument_list|(
operator|&
name|_q_value
argument_list|,
name|newValue
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|fetchAndStoreOrdered
specifier|inline
name|int
name|QBasicAtomicInt
operator|::
name|fetchAndStoreOrdered
argument_list|(
argument|int newValue
argument_list|)
block|{
return|return
name|q_atomic_fetch_and_store_acquire_int
argument_list|(
operator|&
name|_q_value
argument_list|,
name|newValue
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|fetchAndAddRelaxed
specifier|inline
name|int
name|QBasicAtomicInt
operator|::
name|fetchAndAddRelaxed
argument_list|(
argument|int newValue
argument_list|)
block|{
return|return
name|q_atomic_fetch_and_add_int
argument_list|(
operator|&
name|_q_value
argument_list|,
name|newValue
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|fetchAndAddAcquire
specifier|inline
name|int
name|QBasicAtomicInt
operator|::
name|fetchAndAddAcquire
argument_list|(
argument|int newValue
argument_list|)
block|{
return|return
name|q_atomic_fetch_and_add_acquire_int
argument_list|(
operator|&
name|_q_value
argument_list|,
name|newValue
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|fetchAndAddRelease
specifier|inline
name|int
name|QBasicAtomicInt
operator|::
name|fetchAndAddRelease
argument_list|(
argument|int newValue
argument_list|)
block|{
return|return
name|q_atomic_fetch_and_add_release_int
argument_list|(
operator|&
name|_q_value
argument_list|,
name|newValue
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|fetchAndAddOrdered
specifier|inline
name|int
name|QBasicAtomicInt
operator|::
name|fetchAndAddOrdered
argument_list|(
argument|int newValue
argument_list|)
block|{
return|return
name|q_atomic_fetch_and_add_acquire_int
argument_list|(
operator|&
name|_q_value
argument_list|,
name|newValue
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|testAndSetRelaxed
name|Q_INLINE_TEMPLATE
name|bool
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|testAndSetRelaxed
argument_list|(
argument|T *expectedValue
argument_list|,
argument|T *newValue
argument_list|)
block|{
return|return
name|q_atomic_test_and_set_ptr
argument_list|(
operator|&
name|_q_value
argument_list|,
name|expectedValue
argument_list|,
name|newValue
argument_list|)
operator|!=
literal|0
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|testAndSetAcquire
name|Q_INLINE_TEMPLATE
name|bool
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|testAndSetAcquire
argument_list|(
argument|T *expectedValue
argument_list|,
argument|T *newValue
argument_list|)
block|{
return|return
name|q_atomic_test_and_set_acquire_ptr
argument_list|(
operator|&
name|_q_value
argument_list|,
name|expectedValue
argument_list|,
name|newValue
argument_list|)
operator|!=
literal|0
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|testAndSetRelease
name|Q_INLINE_TEMPLATE
name|bool
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|testAndSetRelease
argument_list|(
argument|T *expectedValue
argument_list|,
argument|T *newValue
argument_list|)
block|{
return|return
name|q_atomic_test_and_set_release_ptr
argument_list|(
operator|&
name|_q_value
argument_list|,
name|expectedValue
argument_list|,
name|newValue
argument_list|)
operator|!=
literal|0
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|testAndSetOrdered
name|Q_INLINE_TEMPLATE
name|bool
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|testAndSetOrdered
argument_list|(
argument|T *expectedValue
argument_list|,
argument|T *newValue
argument_list|)
block|{
return|return
name|q_atomic_test_and_set_acquire_ptr
argument_list|(
operator|&
name|_q_value
argument_list|,
name|expectedValue
argument_list|,
name|newValue
argument_list|)
operator|!=
literal|0
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|fetchAndStoreRelaxed
name|Q_INLINE_TEMPLATE
name|T
operator|*
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|fetchAndStoreRelaxed
argument_list|(
argument|T *newValue
argument_list|)
block|{
return|return
name|reinterpret_cast
operator|<
name|T
operator|*
operator|>
operator|(
name|q_atomic_set_ptr
argument_list|(
operator|&
name|_q_value
argument_list|,
name|newValue
argument_list|)
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|fetchAndStoreAcquire
name|Q_INLINE_TEMPLATE
name|T
operator|*
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|fetchAndStoreAcquire
argument_list|(
argument|T *newValue
argument_list|)
block|{
return|return
name|reinterpret_cast
operator|<
name|T
operator|*
operator|>
operator|(
name|q_atomic_fetch_and_store_acquire_ptr
argument_list|(
operator|&
name|_q_value
argument_list|,
name|newValue
argument_list|)
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|fetchAndStoreRelease
name|Q_INLINE_TEMPLATE
name|T
operator|*
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|fetchAndStoreRelease
argument_list|(
argument|T *newValue
argument_list|)
block|{
return|return
name|reinterpret_cast
operator|<
name|T
operator|*
operator|>
operator|(
name|q_atomic_fetch_and_store_release_ptr
argument_list|(
operator|&
name|_q_value
argument_list|,
name|newValue
argument_list|)
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|fetchAndStoreOrdered
name|Q_INLINE_TEMPLATE
name|T
operator|*
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|fetchAndStoreOrdered
argument_list|(
argument|T *newValue
argument_list|)
block|{
return|return
name|reinterpret_cast
operator|<
name|T
operator|*
operator|>
operator|(
name|q_atomic_fetch_and_store_acquire_ptr
argument_list|(
operator|&
name|_q_value
argument_list|,
name|newValue
argument_list|)
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|fetchAndAddRelaxed
name|Q_INLINE_TEMPLATE
name|T
operator|*
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|fetchAndAddRelaxed
argument_list|(
argument|qptrdiff valueToAdd
argument_list|)
block|{
return|return
name|reinterpret_cast
operator|<
name|T
operator|*
operator|>
operator|(
name|q_atomic_fetch_and_add_ptr
argument_list|(
operator|&
name|_q_value
argument_list|,
name|valueToAdd
operator|*
sizeof|sizeof
argument_list|(
name|T
argument_list|)
argument_list|)
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|Q_INLINE_TEMPLATE
DECL|function|fetchAndAddAcquire
name|T
operator|*
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|fetchAndAddAcquire
argument_list|(
argument|qptrdiff valueToAdd
argument_list|)
block|{
return|return
name|reinterpret_cast
operator|<
name|T
operator|*
operator|>
operator|(
name|q_atomic_fetch_and_add_acquire_ptr
argument_list|(
operator|&
name|_q_value
argument_list|,
name|valueToAdd
operator|*
sizeof|sizeof
argument_list|(
name|T
argument_list|)
argument_list|)
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|fetchAndAddRelease
name|Q_INLINE_TEMPLATE
name|T
operator|*
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|fetchAndAddRelease
argument_list|(
argument|qptrdiff valueToAdd
argument_list|)
block|{
return|return
name|reinterpret_cast
operator|<
name|T
operator|*
operator|>
operator|(
name|q_atomic_fetch_and_add_release_ptr
argument_list|(
operator|&
name|_q_value
argument_list|,
name|valueToAdd
operator|*
sizeof|sizeof
argument_list|(
name|T
argument_list|)
argument_list|)
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|fetchAndAddOrdered
name|Q_INLINE_TEMPLATE
name|T
operator|*
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|fetchAndAddOrdered
argument_list|(
argument|qptrdiff valueToAdd
argument_list|)
block|{
return|return
name|reinterpret_cast
operator|<
name|T
operator|*
operator|>
operator|(
name|q_atomic_fetch_and_add_acquire_ptr
argument_list|(
operator|&
name|_q_value
argument_list|,
name|valueToAdd
operator|*
sizeof|sizeof
argument_list|(
name|T
argument_list|)
argument_list|)
operator|)
return|;
block|}
end_expr_stmt
begin_else
else|#
directive|else
end_else
begin_define
define|#
directive|define
name|Q_ATOMIC_INT_REFERENCE_COUNTING_IS_NOT_NATIVE
end_define
begin_expr_stmt
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|isReferenceCountingNative
argument_list|()
block|{
return|return
name|false
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|isReferenceCountingWaitFree
argument_list|()
block|{
return|return
name|false
return|;
block|}
end_expr_stmt
begin_define
define|#
directive|define
name|Q_ATOMIC_INT_TEST_AND_SET_IS_NOT_NATIVE
end_define
begin_expr_stmt
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|isTestAndSetNative
argument_list|()
block|{
return|return
name|false
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|isTestAndSetWaitFree
argument_list|()
block|{
return|return
name|false
return|;
block|}
end_expr_stmt
begin_define
define|#
directive|define
name|Q_ATOMIC_INT_FETCH_AND_STORE_IS_ALWAYS_NATIVE
end_define
begin_define
define|#
directive|define
name|Q_ATOMIC_INT_FETCH_AND_STORE_IS_WAIT_FREE
end_define
begin_expr_stmt
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|isFetchAndStoreNative
argument_list|()
block|{
return|return
name|true
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|isFetchAndStoreWaitFree
argument_list|()
block|{
return|return
name|true
return|;
block|}
end_expr_stmt
begin_define
define|#
directive|define
name|Q_ATOMIC_INT_FETCH_AND_ADD_IS_NOT_NATIVE
end_define
begin_expr_stmt
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|isFetchAndAddNative
argument_list|()
block|{
return|return
name|false
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|isFetchAndAddWaitFree
argument_list|()
block|{
return|return
name|false
return|;
block|}
end_expr_stmt
begin_define
define|#
directive|define
name|Q_ATOMIC_POINTER_TEST_AND_SET_IS_NOT_NATIVE
end_define
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|Q_INLINE_TEMPLATE
name|bool
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|isTestAndSetNative
argument_list|()
block|{
return|return
name|false
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|Q_INLINE_TEMPLATE
name|bool
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|isTestAndSetWaitFree
argument_list|()
block|{
return|return
name|false
return|;
block|}
end_expr_stmt
begin_define
define|#
directive|define
name|Q_ATOMIC_POINTER_FETCH_AND_STORE_IS_ALWAYS_NATIVE
end_define
begin_define
define|#
directive|define
name|Q_ATOMIC_POINTER_FETCH_AND_STORE_IS_WAIT_FREE
end_define
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|Q_INLINE_TEMPLATE
name|bool
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|isFetchAndStoreNative
argument_list|()
block|{
return|return
name|true
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|Q_INLINE_TEMPLATE
name|bool
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|isFetchAndStoreWaitFree
argument_list|()
block|{
return|return
name|true
return|;
block|}
end_expr_stmt
begin_define
define|#
directive|define
name|Q_ATOMIC_POINTER_FETCH_AND_ADD_IS_NOT_NATIVE
end_define
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|Q_INLINE_TEMPLATE
name|bool
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|isFetchAndAddNative
argument_list|()
block|{
return|return
name|false
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|Q_INLINE_TEMPLATE
name|bool
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|isFetchAndAddWaitFree
argument_list|()
block|{
return|return
name|false
return|;
block|}
end_expr_stmt
begin_extern
extern|extern
literal|"C"
block|{
name|Q_CORE_EXPORT
name|int
name|q_atomic_lock_int
parameter_list|(
specifier|volatile
name|int
modifier|*
name|addr
parameter_list|)
function_decl|;
name|Q_CORE_EXPORT
name|int
name|q_atomic_lock_ptr
parameter_list|(
specifier|volatile
name|void
modifier|*
name|addr
parameter_list|)
function_decl|;
name|Q_CORE_EXPORT
name|void
name|q_atomic_unlock
parameter_list|(
specifier|volatile
name|void
modifier|*
name|addr
parameter_list|,
name|int
name|value
parameter_list|)
function_decl|;
name|Q_CORE_EXPORT
name|int
name|q_atomic_set_int
parameter_list|(
specifier|volatile
name|int
modifier|*
name|ptr
parameter_list|,
name|int
name|newval
parameter_list|)
function_decl|;
name|Q_CORE_EXPORT
name|void
modifier|*
name|q_atomic_set_ptr
parameter_list|(
specifier|volatile
name|void
modifier|*
name|ptr
parameter_list|,
name|void
modifier|*
name|newval
parameter_list|)
function_decl|;
block|}
end_extern
begin_comment
comment|// extern "C"
end_comment
begin_expr_stmt
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|ref
argument_list|()
block|{
specifier|const
name|int
name|val
operator|=
name|q_atomic_lock_int
argument_list|(
operator|&
name|_q_value
argument_list|)
block|;
name|q_atomic_unlock
argument_list|(
operator|&
name|_q_value
argument_list|,
name|val
operator|+
literal|1
argument_list|)
block|;
return|return
name|val
operator|!=
operator|-
literal|1
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|deref
argument_list|()
block|{
specifier|const
name|int
name|val
operator|=
name|q_atomic_lock_int
argument_list|(
operator|&
name|_q_value
argument_list|)
block|;
name|q_atomic_unlock
argument_list|(
operator|&
name|_q_value
argument_list|,
name|val
operator|-
literal|1
argument_list|)
block|;
return|return
name|val
operator|!=
literal|1
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|testAndSetOrdered
argument_list|(
argument|int expectedValue
argument_list|,
argument|int newValue
argument_list|)
block|{
name|int
name|val
operator|=
name|q_atomic_lock_int
argument_list|(
operator|&
name|_q_value
argument_list|)
block|;
if|if
condition|(
name|val
operator|==
name|expectedValue
condition|)
block|{
name|q_atomic_unlock
argument_list|(
operator|&
name|_q_value
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
return|return
name|true
return|;
block|}
name|q_atomic_unlock
argument_list|(
operator|&
name|_q_value
argument_list|,
name|val
argument_list|)
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|false
return|;
end_return
begin_expr_stmt
unit|}  inline
name|bool
name|QBasicAtomicInt
operator|::
name|testAndSetRelaxed
argument_list|(
argument|int expectedValue
argument_list|,
argument|int newValue
argument_list|)
block|{
return|return
name|testAndSetOrdered
argument_list|(
name|expectedValue
argument_list|,
name|newValue
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|testAndSetAcquire
argument_list|(
argument|int expectedValue
argument_list|,
argument|int newValue
argument_list|)
block|{
return|return
name|testAndSetOrdered
argument_list|(
name|expectedValue
argument_list|,
name|newValue
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|testAndSetRelease
argument_list|(
argument|int expectedValue
argument_list|,
argument|int newValue
argument_list|)
block|{
return|return
name|testAndSetOrdered
argument_list|(
name|expectedValue
argument_list|,
name|newValue
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|int
name|QBasicAtomicInt
operator|::
name|fetchAndStoreOrdered
argument_list|(
argument|int newValue
argument_list|)
block|{
return|return
name|q_atomic_set_int
argument_list|(
operator|&
name|_q_value
argument_list|,
name|newValue
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|int
name|QBasicAtomicInt
operator|::
name|fetchAndStoreRelaxed
argument_list|(
argument|int newValue
argument_list|)
block|{
return|return
name|fetchAndStoreOrdered
argument_list|(
name|newValue
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|int
name|QBasicAtomicInt
operator|::
name|fetchAndStoreAcquire
argument_list|(
argument|int newValue
argument_list|)
block|{
return|return
name|fetchAndStoreOrdered
argument_list|(
name|newValue
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|int
name|QBasicAtomicInt
operator|::
name|fetchAndStoreRelease
argument_list|(
argument|int newValue
argument_list|)
block|{
return|return
name|fetchAndStoreOrdered
argument_list|(
name|newValue
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|int
name|QBasicAtomicInt
operator|::
name|fetchAndAddOrdered
argument_list|(
argument|int valueToAdd
argument_list|)
block|{
specifier|const
name|int
name|originalValue
operator|=
name|q_atomic_lock_int
argument_list|(
operator|&
name|_q_value
argument_list|)
block|;
name|q_atomic_unlock
argument_list|(
operator|&
name|_q_value
argument_list|,
name|originalValue
operator|+
name|valueToAdd
argument_list|)
block|;
return|return
name|originalValue
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|int
name|QBasicAtomicInt
operator|::
name|fetchAndAddRelaxed
argument_list|(
argument|int valueToAdd
argument_list|)
block|{
return|return
name|fetchAndAddOrdered
argument_list|(
name|valueToAdd
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|int
name|QBasicAtomicInt
operator|::
name|fetchAndAddAcquire
argument_list|(
argument|int valueToAdd
argument_list|)
block|{
return|return
name|fetchAndAddOrdered
argument_list|(
name|valueToAdd
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|int
name|QBasicAtomicInt
operator|::
name|fetchAndAddRelease
argument_list|(
argument|int valueToAdd
argument_list|)
block|{
return|return
name|fetchAndAddOrdered
argument_list|(
name|valueToAdd
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|Q_INLINE_TEMPLATE
name|bool
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|testAndSetOrdered
argument_list|(
argument|T *expectedValue
argument_list|,
argument|T *newValue
argument_list|)
block|{
name|T
operator|*
name|val
operator|=
name|reinterpret_cast
operator|<
name|T
operator|*
operator|>
operator|(
name|q_atomic_lock_ptr
argument_list|(
operator|&
name|_q_value
argument_list|)
operator|)
block|;
if|if
condition|(
name|val
operator|==
name|expectedValue
condition|)
block|{
name|q_atomic_unlock
argument_list|(
operator|&
name|_q_value
argument_list|,
name|reinterpret_cast
operator|<
name|int
operator|>
operator|(
name|newValue
operator|)
argument_list|)
expr_stmt|;
return|return
name|true
return|;
block|}
name|q_atomic_unlock
argument_list|(
operator|&
name|_q_value
argument_list|,
name|reinterpret_cast
operator|<
name|int
operator|>
operator|(
name|val
operator|)
argument_list|)
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|false
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|typename
name|T
operator|>
name|Q_INLINE_TEMPLATE
name|bool
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|testAndSetRelaxed
argument_list|(
argument|T *expectedValue
argument_list|,
argument|T *newValue
argument_list|)
block|{
return|return
name|testAndSetOrdered
argument_list|(
name|expectedValue
argument_list|,
name|newValue
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|Q_INLINE_TEMPLATE
name|bool
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|testAndSetAcquire
argument_list|(
argument|T *expectedValue
argument_list|,
argument|T *newValue
argument_list|)
block|{
return|return
name|testAndSetOrdered
argument_list|(
name|expectedValue
argument_list|,
name|newValue
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|Q_INLINE_TEMPLATE
name|bool
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|testAndSetRelease
argument_list|(
argument|T *expectedValue
argument_list|,
argument|T *newValue
argument_list|)
block|{
return|return
name|testAndSetOrdered
argument_list|(
name|expectedValue
argument_list|,
name|newValue
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|Q_INLINE_TEMPLATE
name|T
operator|*
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|fetchAndStoreOrdered
argument_list|(
argument|T *newValue
argument_list|)
block|{
return|return
name|reinterpret_cast
operator|<
name|T
operator|*
operator|>
operator|(
name|q_atomic_set_ptr
argument_list|(
operator|&
name|_q_value
argument_list|,
name|newValue
argument_list|)
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|Q_INLINE_TEMPLATE
name|T
operator|*
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|fetchAndStoreRelaxed
argument_list|(
argument|T *newValue
argument_list|)
block|{
return|return
name|fetchAndStoreOrdered
argument_list|(
name|newValue
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|Q_INLINE_TEMPLATE
name|T
operator|*
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|fetchAndStoreAcquire
argument_list|(
argument|T *newValue
argument_list|)
block|{
return|return
name|fetchAndStoreOrdered
argument_list|(
name|newValue
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|Q_INLINE_TEMPLATE
name|T
operator|*
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|fetchAndStoreRelease
argument_list|(
argument|T *newValue
argument_list|)
block|{
return|return
name|fetchAndStoreOrdered
argument_list|(
name|newValue
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|Q_INLINE_TEMPLATE
name|T
operator|*
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|fetchAndAddOrdered
argument_list|(
argument|qptrdiff valueToAdd
argument_list|)
block|{
name|T
operator|*
name|originalValue
operator|=
name|reinterpret_cast
operator|<
name|T
operator|*
operator|>
operator|(
name|q_atomic_lock_ptr
argument_list|(
operator|&
name|_q_value
argument_list|)
operator|)
block|;
name|q_atomic_unlock
argument_list|(
operator|&
name|_q_value
argument_list|,
name|int
argument_list|(
name|originalValue
operator|+
name|valueToAdd
argument_list|)
argument_list|)
block|;
return|return
name|originalValue
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|Q_INLINE_TEMPLATE
name|T
operator|*
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|fetchAndAddRelaxed
argument_list|(
argument|qptrdiff valueToAdd
argument_list|)
block|{
return|return
name|fetchAndAddOrdered
argument_list|(
name|valueToAdd
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|Q_INLINE_TEMPLATE
name|T
operator|*
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|fetchAndAddAcquire
argument_list|(
argument|qptrdiff valueToAdd
argument_list|)
block|{
return|return
name|fetchAndAddOrdered
argument_list|(
name|valueToAdd
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|Q_INLINE_TEMPLATE
name|T
operator|*
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|fetchAndAddRelease
argument_list|(
argument|qptrdiff valueToAdd
argument_list|)
block|{
return|return
name|fetchAndAddOrdered
argument_list|(
name|valueToAdd
argument_list|)
return|;
block|}
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// _LP64
end_comment
begin_expr_stmt
name|QT_END_NAMESPACE
name|QT_END_HEADER
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QATOMIC_SPARC_H
end_comment
end_unit
