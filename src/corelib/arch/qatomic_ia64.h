begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Copyright (C) 2011 Thiago Macieira<thiago@kde.org> ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QATOMIC_IA64_H
end_ifndef
begin_define
DECL|macro|QATOMIC_IA64_H
define|#
directive|define
name|QATOMIC_IA64_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qgenericatomic.h>
end_include
begin_expr_stmt
name|QT_BEGIN_NAMESPACE
if|#
directive|if
literal|0
comment|// silence syncqt warnings
expr|QT_END_NAMESPACE
pragma|#
directive|pragma
name|qt_sync_skip_header_check
pragma|#
directive|pragma
name|qt_sync_stop_processing
endif|#
directive|endif
DECL|macro|Q_ATOMIC_INT_REFERENCE_COUNTING_IS_ALWAYS_NATIVE
define|#
directive|define
name|Q_ATOMIC_INT_REFERENCE_COUNTING_IS_ALWAYS_NATIVE
DECL|macro|Q_ATOMIC_INT_REFERENCE_COUNTING_IS_WAIT_FREE
define|#
directive|define
name|Q_ATOMIC_INT_REFERENCE_COUNTING_IS_WAIT_FREE
DECL|macro|Q_ATOMIC_INT_TEST_AND_SET_IS_ALWAYS_NATIVE
define|#
directive|define
name|Q_ATOMIC_INT_TEST_AND_SET_IS_ALWAYS_NATIVE
DECL|macro|Q_ATOMIC_INT_TEST_AND_SET_IS_WAIT_FREE
define|#
directive|define
name|Q_ATOMIC_INT_TEST_AND_SET_IS_WAIT_FREE
DECL|macro|Q_ATOMIC_INT_FETCH_AND_STORE_IS_ALWAYS_NATIVE
define|#
directive|define
name|Q_ATOMIC_INT_FETCH_AND_STORE_IS_ALWAYS_NATIVE
DECL|macro|Q_ATOMIC_INT_FETCH_AND_STORE_IS_WAIT_FREE
define|#
directive|define
name|Q_ATOMIC_INT_FETCH_AND_STORE_IS_WAIT_FREE
DECL|macro|Q_ATOMIC_INT_FETCH_AND_ADD_IS_ALWAYS_NATIVE
define|#
directive|define
name|Q_ATOMIC_INT_FETCH_AND_ADD_IS_ALWAYS_NATIVE
DECL|macro|Q_ATOMIC_INT32_IS_SUPPORTED
define|#
directive|define
name|Q_ATOMIC_INT32_IS_SUPPORTED
DECL|macro|Q_ATOMIC_INT32_REFERENCE_COUNTING_IS_ALWAYS_NATIVE
define|#
directive|define
name|Q_ATOMIC_INT32_REFERENCE_COUNTING_IS_ALWAYS_NATIVE
DECL|macro|Q_ATOMIC_INT32_REFERENCE_COUNTING_IS_WAIT_FREE
define|#
directive|define
name|Q_ATOMIC_INT32_REFERENCE_COUNTING_IS_WAIT_FREE
DECL|macro|Q_ATOMIC_INT32_TEST_AND_SET_IS_ALWAYS_NATIVE
define|#
directive|define
name|Q_ATOMIC_INT32_TEST_AND_SET_IS_ALWAYS_NATIVE
DECL|macro|Q_ATOMIC_INT32_TEST_AND_SET_IS_WAIT_FREE
define|#
directive|define
name|Q_ATOMIC_INT32_TEST_AND_SET_IS_WAIT_FREE
DECL|macro|Q_ATOMIC_INT32_FETCH_AND_STORE_IS_ALWAYS_NATIVE
define|#
directive|define
name|Q_ATOMIC_INT32_FETCH_AND_STORE_IS_ALWAYS_NATIVE
DECL|macro|Q_ATOMIC_INT32_FETCH_AND_STORE_IS_WAIT_FREE
define|#
directive|define
name|Q_ATOMIC_INT32_FETCH_AND_STORE_IS_WAIT_FREE
DECL|macro|Q_ATOMIC_INT32_FETCH_AND_ADD_IS_ALWAYS_NATIVE
define|#
directive|define
name|Q_ATOMIC_INT32_FETCH_AND_ADD_IS_ALWAYS_NATIVE
DECL|macro|Q_ATOMIC_POINTER_TEST_AND_SET_IS_ALWAYS_NATIVE
define|#
directive|define
name|Q_ATOMIC_POINTER_TEST_AND_SET_IS_ALWAYS_NATIVE
DECL|macro|Q_ATOMIC_POINTER_TEST_AND_SET_IS_WAIT_FREE
define|#
directive|define
name|Q_ATOMIC_POINTER_TEST_AND_SET_IS_WAIT_FREE
DECL|macro|Q_ATOMIC_POINTER_FETCH_AND_STORE_IS_ALWAYS_NATIVE
define|#
directive|define
name|Q_ATOMIC_POINTER_FETCH_AND_STORE_IS_ALWAYS_NATIVE
DECL|macro|Q_ATOMIC_POINTER_FETCH_AND_STORE_IS_WAIT_FREE
define|#
directive|define
name|Q_ATOMIC_POINTER_FETCH_AND_STORE_IS_WAIT_FREE
DECL|macro|Q_ATOMIC_POINTER_FETCH_AND_ADD_IS_ALWAYS_NATIVE
define|#
directive|define
name|Q_ATOMIC_POINTER_FETCH_AND_ADD_IS_ALWAYS_NATIVE
DECL|macro|Q_ATOMIC_INT8_IS_SUPPORTED
define|#
directive|define
name|Q_ATOMIC_INT8_IS_SUPPORTED
DECL|macro|Q_ATOMIC_INT8_REFERENCE_COUNTING_IS_ALWAYS_NATIVE
define|#
directive|define
name|Q_ATOMIC_INT8_REFERENCE_COUNTING_IS_ALWAYS_NATIVE
DECL|macro|Q_ATOMIC_INT8_TEST_AND_SET_IS_ALWAYS_NATIVE
define|#
directive|define
name|Q_ATOMIC_INT8_TEST_AND_SET_IS_ALWAYS_NATIVE
DECL|macro|Q_ATOMIC_INT8_TEST_AND_SET_IS_WAIT_FREE
define|#
directive|define
name|Q_ATOMIC_INT8_TEST_AND_SET_IS_WAIT_FREE
DECL|macro|Q_ATOMIC_INT8_FETCH_AND_STORE_IS_ALWAYS_NATIVE
define|#
directive|define
name|Q_ATOMIC_INT8_FETCH_AND_STORE_IS_ALWAYS_NATIVE
DECL|macro|Q_ATOMIC_INT8_FETCH_AND_STORE_IS_WAIT_FREE
define|#
directive|define
name|Q_ATOMIC_INT8_FETCH_AND_STORE_IS_WAIT_FREE
DECL|macro|Q_ATOMIC_INT8_FETCH_AND_ADD_IS_ALWAYS_NATIVE
define|#
directive|define
name|Q_ATOMIC_INT8_FETCH_AND_ADD_IS_ALWAYS_NATIVE
DECL|macro|Q_ATOMIC_INT16_IS_SUPPORTED
define|#
directive|define
name|Q_ATOMIC_INT16_IS_SUPPORTED
DECL|macro|Q_ATOMIC_INT16_REFERENCE_COUNTING_IS_ALWAYS_NATIVE
define|#
directive|define
name|Q_ATOMIC_INT16_REFERENCE_COUNTING_IS_ALWAYS_NATIVE
DECL|macro|Q_ATOMIC_INT16_TEST_AND_SET_IS_ALWAYS_NATIVE
define|#
directive|define
name|Q_ATOMIC_INT16_TEST_AND_SET_IS_ALWAYS_NATIVE
DECL|macro|Q_ATOMIC_INT16_TEST_AND_SET_IS_WAIT_FREE
define|#
directive|define
name|Q_ATOMIC_INT16_TEST_AND_SET_IS_WAIT_FREE
DECL|macro|Q_ATOMIC_INT16_FETCH_AND_STORE_IS_ALWAYS_NATIVE
define|#
directive|define
name|Q_ATOMIC_INT16_FETCH_AND_STORE_IS_ALWAYS_NATIVE
DECL|macro|Q_ATOMIC_INT16_FETCH_AND_STORE_IS_WAIT_FREE
define|#
directive|define
name|Q_ATOMIC_INT16_FETCH_AND_STORE_IS_WAIT_FREE
DECL|macro|Q_ATOMIC_INT16_FETCH_AND_ADD_IS_ALWAYS_NATIVE
define|#
directive|define
name|Q_ATOMIC_INT16_FETCH_AND_ADD_IS_ALWAYS_NATIVE
DECL|macro|Q_ATOMIC_INT64_IS_SUPPORTED
define|#
directive|define
name|Q_ATOMIC_INT64_IS_SUPPORTED
DECL|macro|Q_ATOMIC_INT64_REFERENCE_COUNTING_IS_ALWAYS_NATIVE
define|#
directive|define
name|Q_ATOMIC_INT64_REFERENCE_COUNTING_IS_ALWAYS_NATIVE
DECL|macro|Q_ATOMIC_INT64_REFERENCE_COUNTING_IS_WAIT_FREE
define|#
directive|define
name|Q_ATOMIC_INT64_REFERENCE_COUNTING_IS_WAIT_FREE
DECL|macro|Q_ATOMIC_INT64_TEST_AND_SET_IS_ALWAYS_NATIVE
define|#
directive|define
name|Q_ATOMIC_INT64_TEST_AND_SET_IS_ALWAYS_NATIVE
DECL|macro|Q_ATOMIC_INT64_TEST_AND_SET_IS_WAIT_FREE
define|#
directive|define
name|Q_ATOMIC_INT64_TEST_AND_SET_IS_WAIT_FREE
DECL|macro|Q_ATOMIC_INT64_FETCH_AND_STORE_IS_ALWAYS_NATIVE
define|#
directive|define
name|Q_ATOMIC_INT64_FETCH_AND_STORE_IS_ALWAYS_NATIVE
DECL|macro|Q_ATOMIC_INT64_FETCH_AND_STORE_IS_WAIT_FREE
define|#
directive|define
name|Q_ATOMIC_INT64_FETCH_AND_STORE_IS_WAIT_FREE
DECL|macro|Q_ATOMIC_INT64_FETCH_AND_ADD_IS_ALWAYS_NATIVE
define|#
directive|define
name|Q_ATOMIC_INT64_FETCH_AND_ADD_IS_ALWAYS_NATIVE
name|template
operator|<
operator|>
expr|struct
name|QAtomicIntegerTraits
operator|<
name|char
operator|>
block|{ enum
block|{
name|IsInteger
operator|=
literal|1
block|}
block|; }
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
operator|>
expr|struct
name|QAtomicIntegerTraits
operator|<
name|signed
name|char
operator|>
block|{ enum
block|{
name|IsInteger
operator|=
literal|1
block|}
block|; }
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
operator|>
expr|struct
name|QAtomicIntegerTraits
operator|<
name|unsigned
name|char
operator|>
block|{ enum
block|{
name|IsInteger
operator|=
literal|1
block|}
block|; }
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
operator|>
expr|struct
name|QAtomicIntegerTraits
operator|<
name|short
operator|>
block|{ enum
block|{
name|IsInteger
operator|=
literal|1
block|}
block|; }
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
operator|>
expr|struct
name|QAtomicIntegerTraits
operator|<
name|unsigned
name|short
operator|>
block|{ enum
block|{
name|IsInteger
operator|=
literal|1
block|}
block|; }
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
operator|>
expr|struct
name|QAtomicIntegerTraits
operator|<
name|long
name|long
operator|>
block|{ enum
block|{
name|IsInteger
operator|=
literal|1
block|}
block|; }
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
operator|>
expr|struct
name|QAtomicIntegerTraits
operator|<
name|unsigned
name|long
name|long
operator|>
block|{ enum
block|{
name|IsInteger
operator|=
literal|1
block|}
block|; }
expr_stmt|;
end_expr_stmt
begin_ifdef
ifdef|#
directive|ifdef
name|Q_COMPILER_UNICODE_STRINGS
end_ifdef
begin_expr_stmt
DECL|struct|char16_t
DECL|enumerator|IsInteger
name|template
operator|<
operator|>
expr|struct
name|QAtomicIntegerTraits
operator|<
name|char16_t
operator|>
block|{ enum
block|{
name|IsInteger
operator|=
literal|1
block|}
block|; }
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
DECL|struct|size
name|template
operator|<
name|int
name|size
operator|>
expr|struct
name|QBasicAtomicOps
operator|:
name|QGenericAtomicOps
operator|<
name|QBasicAtomicOps
operator|<
name|size
operator|>
expr|>
block|{
name|template
operator|<
name|typename
name|T
operator|>
DECL|member|Q_DECL_NOTHROW
specifier|static
name|void
name|orderedMemoryFence
argument_list|(
argument|const T&
argument_list|)
name|Q_DECL_NOTHROW
block|;
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
specifier|inline
name|T
name|loadAcquire
argument_list|(
argument|const T&_q_value
argument_list|)
name|Q_DECL_NOTHROW
block|{
return|return
operator|*
name|static_cast
operator|<
specifier|const
specifier|volatile
name|T
operator|*
operator|>
operator|(
operator|&
name|_q_value
operator|)
return|;
block|}
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
specifier|inline
name|void
name|storeRelease
argument_list|(
argument|T&_q_value
argument_list|,
argument|T newValue
argument_list|)
name|Q_DECL_NOTHROW
block|{
operator|*
name|static_cast
operator|<
specifier|volatile
name|T
operator|*
operator|>
operator|(
operator|&
name|_q_value
operator|)
operator|=
name|newValue
block|;     }
specifier|static
specifier|inline
name|Q_DECL_CONSTEXPR
name|bool
name|isReferenceCountingNative
argument_list|()
name|Q_DECL_NOTHROW
block|{
return|return
name|true
return|;
block|}
end_expr_stmt
begin_function
specifier|static
specifier|inline
name|Q_DECL_CONSTEXPR
name|bool
name|isReferenceCountingWaitFree
parameter_list|()
function|Q_DECL_NOTHROW
block|{
return|return
name|size
operator|==
literal|4
operator|||
name|size
operator|==
literal|8
return|;
block|}
end_function
begin_expr_stmt
DECL|member|Q_DECL_NOTHROW
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
name|bool
name|ref
argument_list|(
argument|T&_q_value
argument_list|)
name|Q_DECL_NOTHROW
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|member|Q_DECL_NOTHROW
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
name|bool
name|deref
argument_list|(
argument|T&_q_value
argument_list|)
name|Q_DECL_NOTHROW
expr_stmt|;
end_expr_stmt
begin_function
specifier|static
specifier|inline
name|Q_DECL_CONSTEXPR
name|bool
name|isTestAndSetNative
parameter_list|()
function|Q_DECL_NOTHROW
block|{
return|return
name|true
return|;
block|}
end_function
begin_function
specifier|static
specifier|inline
name|Q_DECL_CONSTEXPR
name|bool
name|isTestAndSetWaitFree
parameter_list|()
function|Q_DECL_NOTHROW
block|{
return|return
name|true
return|;
block|}
end_function
begin_expr_stmt
DECL|member|Q_DECL_NOTHROW
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
name|bool
name|testAndSetRelaxed
argument_list|(
argument|T&_q_value
argument_list|,
argument|T expectedValue
argument_list|,
argument|T newValue
argument_list|)
name|Q_DECL_NOTHROW
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|member|Q_DECL_NOTHROW
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
name|bool
name|testAndSetAcquire
argument_list|(
argument|T&_q_value
argument_list|,
argument|T expectedValue
argument_list|,
argument|T newValue
argument_list|)
name|Q_DECL_NOTHROW
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|member|Q_DECL_NOTHROW
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
name|bool
name|testAndSetRelease
argument_list|(
argument|T&_q_value
argument_list|,
argument|T expectedValue
argument_list|,
argument|T newValue
argument_list|)
name|Q_DECL_NOTHROW
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|member|Q_DECL_NOTHROW
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
name|bool
name|testAndSetOrdered
argument_list|(
argument|T&_q_value
argument_list|,
argument|T expectedValue
argument_list|,
argument|T newValue
argument_list|)
name|Q_DECL_NOTHROW
expr_stmt|;
end_expr_stmt
begin_function
specifier|static
specifier|inline
name|Q_DECL_CONSTEXPR
name|bool
name|isFetchAndStoreNative
parameter_list|()
function|Q_DECL_NOTHROW
block|{
return|return
name|true
return|;
block|}
end_function
begin_function
specifier|static
specifier|inline
name|Q_DECL_CONSTEXPR
name|bool
name|isFetchAndStoreWaitFree
parameter_list|()
function|Q_DECL_NOTHROW
block|{
return|return
name|true
return|;
block|}
end_function
begin_expr_stmt
DECL|member|Q_DECL_NOTHROW
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
name|T
name|fetchAndStoreRelaxed
argument_list|(
argument|T&_q_value
argument_list|,
argument|T newValue
argument_list|)
name|Q_DECL_NOTHROW
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|member|Q_DECL_NOTHROW
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
name|T
name|fetchAndStoreAcquire
argument_list|(
argument|T&_q_value
argument_list|,
argument|T newValue
argument_list|)
name|Q_DECL_NOTHROW
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|member|Q_DECL_NOTHROW
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
name|T
name|fetchAndStoreRelease
argument_list|(
argument|T&_q_value
argument_list|,
argument|T newValue
argument_list|)
name|Q_DECL_NOTHROW
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|member|Q_DECL_NOTHROW
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
name|T
name|fetchAndStoreOrdered
argument_list|(
argument|T&_q_value
argument_list|,
argument|T newValue
argument_list|)
name|Q_DECL_NOTHROW
expr_stmt|;
end_expr_stmt
begin_function
specifier|static
specifier|inline
name|Q_DECL_CONSTEXPR
name|bool
name|isFetchAndAddNative
parameter_list|()
function|Q_DECL_NOTHROW
block|{
return|return
name|true
return|;
block|}
end_function
begin_function
specifier|static
specifier|inline
name|Q_DECL_CONSTEXPR
name|bool
name|isFetchAndAddWaitFree
parameter_list|()
function|Q_DECL_NOTHROW
block|{
return|return
name|false
return|;
block|}
end_function
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
DECL|member|Q_DECL_NOTHROW
name|T
name|fetchAndAddRelaxed
argument_list|(
argument|T&_q_value
argument_list|,
argument|typename QAtomicAdditiveType<T>::AdditiveT valueToAdd
argument_list|)
name|Q_DECL_NOTHROW
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
DECL|member|Q_DECL_NOTHROW
name|T
name|fetchAndAddAcquire
argument_list|(
argument|T&_q_value
argument_list|,
argument|typename QAtomicAdditiveType<T>::AdditiveT valueToAdd
argument_list|)
name|Q_DECL_NOTHROW
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
DECL|member|Q_DECL_NOTHROW
name|T
name|fetchAndAddRelease
argument_list|(
argument|T&_q_value
argument_list|,
argument|typename QAtomicAdditiveType<T>::AdditiveT valueToAdd
argument_list|)
name|Q_DECL_NOTHROW
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
DECL|member|Q_DECL_NOTHROW
name|T
name|fetchAndAddOrdered
argument_list|(
argument|T&_q_value
argument_list|,
argument|typename QAtomicAdditiveType<T>::AdditiveT valueToAdd
argument_list|)
name|Q_DECL_NOTHROW
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|member|Q_DECL_NOTHROW
unit|};
DECL|function|sizeof
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|QAtomicOps
operator|:
name|QBasicAtomicOps
operator|<
sizeof|sizeof
argument_list|(
name|T
argument_list|)
operator|>
block|{
typedef|typedef
name|T
name|Type
typedef|;
block|}
end_expr_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_function
DECL|function|_q_ia64_fetchadd_immediate
specifier|inline
name|bool
name|_q_ia64_fetchadd_immediate
parameter_list|(
name|int
name|value
parameter_list|)
block|{
return|return
name|value
operator|==
literal|1
operator|||
name|value
operator|==
operator|-
literal|1
operator|||
name|value
operator|==
literal|4
operator|||
name|value
operator|==
operator|-
literal|4
operator|||
name|value
operator|==
literal|8
operator|||
name|value
operator|==
operator|-
literal|8
operator|||
name|value
operator|==
literal|16
operator|||
name|value
operator|==
operator|-
literal|16
return|;
block|}
end_function
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_CC_INTEL
argument_list|)
end_if
begin_comment
comment|// intrinsics provided by the Intel C++ Compiler
end_comment
begin_include
include|#
directive|include
file|<ia64intrin.h>
end_include
begin_expr_stmt
name|template
operator|<
name|int
name|size
operator|>
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
DECL|function|orderedMemoryFence
name|void
name|QBasicAtomicOps
operator|<
name|size
operator|>
operator|::
name|orderedMemoryFence
argument_list|(
argument|const T&
argument_list|)
block|{
name|__memory_barrier
argument_list|()
block|; }
DECL|function|fetchAndStoreAcquire
specifier|inline
name|int
name|QBasicAtomicInt
operator|::
name|fetchAndStoreAcquire
argument_list|(
argument|int newValue
argument_list|)
block|{
return|return
name|static_cast
operator|<
name|int
operator|>
operator|(
name|_InterlockedExchange
argument_list|(
operator|&
name|_q_value
argument_list|,
name|newValue
argument_list|)
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|testAndSetRelaxed
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|testAndSetRelaxed
argument_list|(
argument|int expectedValue
argument_list|,
argument|int newValue
argument_list|)
block|{
name|int
name|expectedValueCopy
operator|=
name|expectedValue
block|;
return|return
operator|(
name|static_cast
operator|<
name|int
operator|>
operator|(
name|_InterlockedCompareExchange
argument_list|(
operator|&
name|_q_value
argument_list|,
name|newValue
argument_list|,
name|expectedValueCopy
argument_list|)
operator|)
operator|==
name|expectedValue
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|testAndSetAcquire
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|testAndSetAcquire
argument_list|(
argument|int expectedValue
argument_list|,
argument|int newValue
argument_list|)
block|{
name|int
name|expectedValueCopy
operator|=
name|expectedValue
block|;
return|return
operator|(
name|static_cast
operator|<
name|int
operator|>
operator|(
name|_InterlockedCompareExchange_acq
argument_list|(
name|reinterpret_cast
operator|<
specifier|volatile
name|uint
operator|*
operator|>
operator|(
operator|&
name|_q_value
operator|)
argument_list|,
name|newValue
argument_list|,
name|expectedValueCopy
argument_list|)
operator|)
operator|==
name|expectedValue
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|testAndSetRelease
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|testAndSetRelease
argument_list|(
argument|int expectedValue
argument_list|,
argument|int newValue
argument_list|)
block|{
name|int
name|expectedValueCopy
operator|=
name|expectedValue
block|;
return|return
operator|(
name|static_cast
operator|<
name|int
operator|>
operator|(
name|_InterlockedCompareExchange_rel
argument_list|(
name|reinterpret_cast
operator|<
specifier|volatile
name|uint
operator|*
operator|>
operator|(
operator|&
name|_q_value
operator|)
argument_list|,
name|newValue
argument_list|,
name|expectedValueCopy
argument_list|)
operator|)
operator|==
name|expectedValue
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|fetchAndAddAcquire
specifier|inline
name|int
name|QBasicAtomicInt
operator|::
name|fetchAndAddAcquire
argument_list|(
argument|int valueToAdd
argument_list|)
block|{
if|if
condition|(
name|__builtin_constant_p
argument_list|(
name|valueToAdd
argument_list|)
condition|)
block|{
if|if
condition|(
name|valueToAdd
operator|==
literal|1
condition|)
return|return
name|__fetchadd4_acq
argument_list|(
operator|(
name|unsigned
name|int
operator|*
operator|)
operator|&
name|_q_value
argument_list|,
literal|1
argument_list|)
return|;
if|if
condition|(
name|valueToAdd
operator|==
operator|-
literal|1
condition|)
return|return
name|__fetchadd4_acq
argument_list|(
operator|(
name|unsigned
name|int
operator|*
operator|)
operator|&
name|_q_value
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
end_expr_stmt
begin_return
return|return
name|_InterlockedExchangeAdd
argument_list|(
operator|&
name|_q_value
argument_list|,
name|valueToAdd
argument_list|)
return|;
end_return
begin_expr_stmt
unit|}  inline
DECL|function|fetchAndAddRelease
name|int
name|QBasicAtomicInt
operator|::
name|fetchAndAddRelease
argument_list|(
argument|int valueToAdd
argument_list|)
block|{
if|if
condition|(
name|__builtin_constant_p
argument_list|(
name|valueToAdd
argument_list|)
condition|)
block|{
if|if
condition|(
name|valueToAdd
operator|==
literal|1
condition|)
return|return
name|__fetchadd4_rel
argument_list|(
operator|(
name|unsigned
name|int
operator|*
operator|)
operator|&
name|_q_value
argument_list|,
literal|1
argument_list|)
return|;
if|if
condition|(
name|valueToAdd
operator|==
operator|-
literal|1
condition|)
return|return
name|__fetchadd4_rel
argument_list|(
operator|(
name|unsigned
name|int
operator|*
operator|)
operator|&
name|_q_value
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
name|__memory_barrier
argument_list|()
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|_InterlockedExchangeAdd
argument_list|(
operator|&
name|_q_value
argument_list|,
name|valueToAdd
argument_list|)
return|;
end_return
begin_expr_stmt
unit|}  inline
DECL|function|ref
name|bool
name|QBasicAtomicInt
operator|::
name|ref
argument_list|()
block|{
return|return
name|_InterlockedIncrement
argument_list|(
operator|&
name|_q_value
argument_list|)
operator|!=
literal|0
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|deref
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|deref
argument_list|()
block|{
return|return
name|_InterlockedDecrement
argument_list|(
operator|&
name|_q_value
argument_list|)
operator|!=
literal|0
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|fetchAndStoreAcquire
name|Q_INLINE_TEMPLATE
name|T
operator|*
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|fetchAndStoreAcquire
argument_list|(
argument|T *newValue
argument_list|)
block|{
return|return
operator|(
name|T
operator|*
operator|)
name|_InterlockedExchangePointer
argument_list|(
name|reinterpret_cast
operator|<
name|void
operator|*
specifier|volatile
operator|*
operator|>
operator|(
operator|&
name|_q_value
operator|)
argument_list|,
name|newValue
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|testAndSetRelaxed
name|Q_INLINE_TEMPLATE
name|bool
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|testAndSetRelaxed
argument_list|(
argument|T *expectedValue
argument_list|,
argument|T *newValue
argument_list|)
block|{
name|T
operator|*
name|expectedValueCopy
operator|=
name|expectedValue
block|;
return|return
operator|(
name|_InterlockedCompareExchangePointer
argument_list|(
name|reinterpret_cast
operator|<
name|void
operator|*
specifier|volatile
operator|*
operator|>
operator|(
operator|&
name|_q_value
operator|)
argument_list|,
name|newValue
argument_list|,
name|expectedValueCopy
argument_list|)
operator|==
name|expectedValue
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|testAndSetAcquire
name|Q_INLINE_TEMPLATE
name|bool
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|testAndSetAcquire
argument_list|(
argument|T *expectedValue
argument_list|,
argument|T *newValue
argument_list|)
block|{
expr|union
block|{
specifier|volatile
name|void
operator|*
name|x
block|;
specifier|volatile
name|unsigned
name|long
operator|*
name|p
block|;     }
block|;
name|x
operator|=
operator|&
name|_q_value
block|;
name|T
operator|*
name|expectedValueCopy
operator|=
name|expectedValue
block|;
return|return
operator|(
name|_InterlockedCompareExchange64_acq
argument_list|(
name|p
argument_list|,
name|quintptr
argument_list|(
name|newValue
argument_list|)
argument_list|,
name|quintptr
argument_list|(
name|expectedValueCopy
argument_list|)
argument_list|)
operator|==
name|quintptr
argument_list|(
name|expectedValue
argument_list|)
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|testAndSetRelease
name|Q_INLINE_TEMPLATE
name|bool
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|testAndSetRelease
argument_list|(
argument|T *expectedValue
argument_list|,
argument|T *newValue
argument_list|)
block|{
expr|union
block|{
specifier|volatile
name|void
operator|*
name|x
block|;
specifier|volatile
name|unsigned
name|long
operator|*
name|p
block|;     }
block|;
name|x
operator|=
operator|&
name|_q_value
block|;
name|T
operator|*
name|expectedValueCopy
operator|=
name|expectedValue
block|;
return|return
operator|(
name|_InterlockedCompareExchange64_rel
argument_list|(
name|p
argument_list|,
name|quintptr
argument_list|(
name|newValue
argument_list|)
argument_list|,
name|quintptr
argument_list|(
name|expectedValueCopy
argument_list|)
argument_list|)
operator|==
name|quintptr
argument_list|(
name|expectedValue
argument_list|)
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|fetchAndAddAcquire
name|Q_INLINE_TEMPLATE
name|T
operator|*
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|fetchAndAddAcquire
argument_list|(
argument|qptrdiff valueToAdd
argument_list|)
block|{
return|return
operator|(
name|T
operator|*
operator|)
name|_InterlockedExchangeAdd64
argument_list|(
operator|(
specifier|volatile
name|long
operator|*
operator|)
operator|&
name|_q_value
argument_list|,
name|valueToAdd
operator|*
sizeof|sizeof
argument_list|(
name|T
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|fetchAndAddRelease
name|Q_INLINE_TEMPLATE
name|T
operator|*
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|fetchAndAddRelease
argument_list|(
argument|qptrdiff valueToAdd
argument_list|)
block|{
name|__memory_barrier
argument_list|()
block|;
return|return
operator|(
name|T
operator|*
operator|)
name|_InterlockedExchangeAdd64
argument_list|(
operator|(
specifier|volatile
name|long
operator|*
operator|)
operator|&
name|_q_value
argument_list|,
name|valueToAdd
operator|*
sizeof|sizeof
argument_list|(
name|T
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|Q_CC_GNU
argument_list|)
end_elif
begin_expr_stmt
name|template
operator|<
name|int
name|size
operator|>
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|void
name|QBasicAtomicOps
operator|<
name|size
operator|>
operator|::
name|orderedMemoryFence
argument_list|(
argument|const T&
argument_list|)
name|Q_DECL_NOTHROW
block|{
name|asm
specifier|volatile
operator|(
literal|"mf"
operator|::
operator|:
literal|"memory"
operator|)
block|; }
name|template
operator|<
operator|>
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|bool
name|QBasicAtomicOps
operator|<
literal|4
operator|>
operator|::
name|ref
argument_list|(
argument|T&_q_value
argument_list|)
name|Q_DECL_NOTHROW
block|{
name|T
name|ret
block|;
name|asm
specifier|volatile
operator|(
literal|"fetchadd4.acq %0=%1,1\n"
operator|:
literal|"=r"
operator|(
name|ret
operator|)
operator|,
literal|"+m"
operator|(
name|_q_value
operator|)
operator|:
operator|:
literal|"memory"
operator|)
block|;
return|return
name|ret
operator|!=
operator|-
literal|1
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
operator|>
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|bool
name|QBasicAtomicOps
operator|<
literal|4
operator|>
operator|::
name|deref
argument_list|(
argument|T&_q_value
argument_list|)
name|Q_DECL_NOTHROW
block|{
name|T
name|ret
block|;
name|asm
specifier|volatile
operator|(
literal|"fetchadd4.rel %0=%1,-1\n"
operator|:
literal|"=r"
operator|(
name|ret
operator|)
operator|,
literal|"+m"
operator|(
name|_q_value
operator|)
operator|:
operator|:
literal|"memory"
operator|)
block|;
return|return
name|ret
operator|!=
literal|1
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
operator|>
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|bool
name|QBasicAtomicOps
operator|<
literal|8
operator|>
operator|::
name|ref
argument_list|(
argument|T&_q_value
argument_list|)
name|Q_DECL_NOTHROW
block|{
name|T
name|ret
block|;
name|asm
specifier|volatile
operator|(
literal|"fetchadd8.acq %0=%1,1\n"
operator|:
literal|"=r"
operator|(
name|ret
operator|)
operator|,
literal|"+m"
operator|(
name|_q_value
operator|)
operator|:
operator|:
literal|"memory"
operator|)
block|;
return|return
name|ret
operator|!=
operator|-
literal|1
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
operator|>
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|bool
name|QBasicAtomicOps
operator|<
literal|8
operator|>
operator|::
name|deref
argument_list|(
argument|T&_q_value
argument_list|)
name|Q_DECL_NOTHROW
block|{
name|T
name|ret
block|;
name|asm
specifier|volatile
operator|(
literal|"fetchadd8.rel %0=%1,-1\n"
operator|:
literal|"=r"
operator|(
name|ret
operator|)
operator|,
literal|"+m"
operator|(
name|_q_value
operator|)
operator|:
operator|:
literal|"memory"
operator|)
block|;
return|return
name|ret
operator|!=
literal|1
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
operator|>
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|bool
name|QBasicAtomicOps
operator|<
literal|1
operator|>
operator|::
name|testAndSetAcquire
argument_list|(
argument|T&_q_value
argument_list|,
argument|T expectedValue
argument_list|,
argument|T newValue
argument_list|)
name|Q_DECL_NOTHROW
block|{
name|T
name|ret
block|;
name|asm
specifier|volatile
operator|(
literal|"mov ar.ccv=%2\n"
literal|";;\n"
literal|"cmpxchg1.acq %0=%1,%3,ar.ccv\n"
operator|:
literal|"=r"
operator|(
name|ret
operator|)
operator|,
literal|"+m"
operator|(
name|_q_value
operator|)
operator|:
literal|"r"
operator|(
name|expectedValue
operator|)
operator|,
literal|"r"
operator|(
name|newValue
operator|)
operator|:
literal|"memory"
operator|)
block|;
return|return
name|ret
operator|==
name|expectedValue
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
operator|>
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|bool
name|QBasicAtomicOps
operator|<
literal|1
operator|>
operator|::
name|testAndSetRelease
argument_list|(
argument|T&_q_value
argument_list|,
argument|T expectedValue
argument_list|,
argument|T newValue
argument_list|)
name|Q_DECL_NOTHROW
block|{
name|T
name|ret
block|;
name|asm
specifier|volatile
operator|(
literal|"mov ar.ccv=%2\n"
literal|";;\n"
literal|"cmpxchg1.rel %0=%1,%3,ar.ccv\n"
operator|:
literal|"=r"
operator|(
name|ret
operator|)
operator|,
literal|"+m"
operator|(
name|_q_value
operator|)
operator|:
literal|"r"
operator|(
name|expectedValue
operator|)
operator|,
literal|"r"
operator|(
name|newValue
operator|)
operator|:
literal|"memory"
operator|)
block|;
return|return
name|ret
operator|==
name|expectedValue
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
operator|>
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|bool
name|QBasicAtomicOps
operator|<
literal|2
operator|>
operator|::
name|testAndSetAcquire
argument_list|(
argument|T&_q_value
argument_list|,
argument|T expectedValue
argument_list|,
argument|T newValue
argument_list|)
name|Q_DECL_NOTHROW
block|{
name|T
name|ret
block|;
name|asm
specifier|volatile
operator|(
literal|"mov ar.ccv=%2\n"
literal|";;\n"
literal|"cmpxchg2.acq %0=%1,%3,ar.ccv\n"
operator|:
literal|"=r"
operator|(
name|ret
operator|)
operator|,
literal|"+m"
operator|(
name|_q_value
operator|)
operator|:
literal|"r"
operator|(
name|expectedValue
operator|)
operator|,
literal|"r"
operator|(
name|newValue
operator|)
operator|:
literal|"memory"
operator|)
block|;
return|return
name|ret
operator|==
name|expectedValue
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
operator|>
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|bool
name|QBasicAtomicOps
operator|<
literal|2
operator|>
operator|::
name|testAndSetRelease
argument_list|(
argument|T&_q_value
argument_list|,
argument|T expectedValue
argument_list|,
argument|T newValue
argument_list|)
name|Q_DECL_NOTHROW
block|{
name|T
name|ret
block|;
name|asm
specifier|volatile
operator|(
literal|"mov ar.ccv=%2\n"
literal|";;\n"
literal|"cmpxchg2.rel %0=%1,%3,ar.ccv\n"
operator|:
literal|"=r"
operator|(
name|ret
operator|)
operator|,
literal|"+m"
operator|(
name|_q_value
operator|)
operator|:
literal|"r"
operator|(
name|expectedValue
operator|)
operator|,
literal|"r"
operator|(
name|newValue
operator|)
operator|:
literal|"memory"
operator|)
block|;
return|return
name|ret
operator|==
name|expectedValue
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
operator|>
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|bool
name|QBasicAtomicOps
operator|<
literal|4
operator|>
operator|::
name|testAndSetAcquire
argument_list|(
argument|T&_q_value
argument_list|,
argument|T expectedValue
argument_list|,
argument|T newValue
argument_list|)
name|Q_DECL_NOTHROW
block|{
name|T
name|ret
block|;
name|asm
specifier|volatile
operator|(
literal|"mov ar.ccv=%2\n"
literal|";;\n"
literal|"cmpxchg4.acq %0=%1,%3,ar.ccv\n"
operator|:
literal|"=r"
operator|(
name|ret
operator|)
operator|,
literal|"+m"
operator|(
name|_q_value
operator|)
operator|:
literal|"r"
operator|(
name|expectedValue
operator|)
operator|,
literal|"r"
operator|(
name|newValue
operator|)
operator|:
literal|"memory"
operator|)
block|;
return|return
name|ret
operator|==
name|expectedValue
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
operator|>
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|bool
name|QBasicAtomicOps
operator|<
literal|4
operator|>
operator|::
name|testAndSetRelease
argument_list|(
argument|T&_q_value
argument_list|,
argument|T expectedValue
argument_list|,
argument|T newValue
argument_list|)
name|Q_DECL_NOTHROW
block|{
name|T
name|ret
block|;
name|asm
specifier|volatile
operator|(
literal|"mov ar.ccv=%2\n"
literal|";;\n"
literal|"cmpxchg4.rel %0=%1,%3,ar.ccv\n"
operator|:
literal|"=r"
operator|(
name|ret
operator|)
operator|,
literal|"+m"
operator|(
name|_q_value
operator|)
operator|:
literal|"r"
operator|(
name|expectedValue
operator|)
operator|,
literal|"r"
operator|(
name|newValue
operator|)
operator|:
literal|"memory"
operator|)
block|;
return|return
name|ret
operator|==
name|expectedValue
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
operator|>
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|bool
name|QBasicAtomicOps
operator|<
literal|8
operator|>
operator|::
name|testAndSetAcquire
argument_list|(
argument|T&_q_value
argument_list|,
argument|T expectedValue
argument_list|,
argument|T newValue
argument_list|)
name|Q_DECL_NOTHROW
block|{
name|T
name|ret
block|;
name|asm
specifier|volatile
operator|(
literal|"mov ar.ccv=%2\n"
literal|";;\n"
literal|"cmpxchg8.acq %0=%1,%3,ar.ccv\n"
operator|:
literal|"=r"
operator|(
name|ret
operator|)
operator|,
literal|"+m"
operator|(
name|_q_value
operator|)
operator|:
literal|"r"
operator|(
name|expectedValue
operator|)
operator|,
literal|"r"
operator|(
name|newValue
operator|)
operator|:
literal|"memory"
operator|)
block|;
return|return
name|ret
operator|==
name|expectedValue
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
operator|>
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|bool
name|QBasicAtomicOps
operator|<
literal|8
operator|>
operator|::
name|testAndSetRelease
argument_list|(
argument|T&_q_value
argument_list|,
argument|T expectedValue
argument_list|,
argument|T newValue
argument_list|)
name|Q_DECL_NOTHROW
block|{
name|T
name|ret
block|;
name|asm
specifier|volatile
operator|(
literal|"mov ar.ccv=%2\n"
literal|";;\n"
literal|"cmpxchg8.rel %0=%1,%3,ar.ccv\n"
operator|:
literal|"=r"
operator|(
name|ret
operator|)
operator|,
literal|"+m"
operator|(
name|_q_value
operator|)
operator|:
literal|"r"
operator|(
name|expectedValue
operator|)
operator|,
literal|"r"
operator|(
name|newValue
operator|)
operator|:
literal|"memory"
operator|)
block|;
return|return
name|ret
operator|==
name|expectedValue
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
operator|>
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|T
name|QBasicAtomicOps
operator|<
literal|1
operator|>
operator|::
name|fetchAndStoreAcquire
argument_list|(
argument|T&_q_value
argument_list|,
argument|T newValue
argument_list|)
name|Q_DECL_NOTHROW
block|{
name|T
name|ret
block|;
name|asm
specifier|volatile
operator|(
literal|"xchg1 %0=%1,%2\n"
operator|:
literal|"=r"
operator|(
name|ret
operator|)
operator|,
literal|"+m"
operator|(
name|_q_value
operator|)
operator|:
literal|"r"
operator|(
name|newValue
operator|)
operator|:
literal|"memory"
operator|)
block|;
return|return
name|ret
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
operator|>
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|T
name|QBasicAtomicOps
operator|<
literal|2
operator|>
operator|::
name|fetchAndStoreAcquire
argument_list|(
argument|T&_q_value
argument_list|,
argument|T newValue
argument_list|)
name|Q_DECL_NOTHROW
block|{
name|T
name|ret
block|;
name|asm
specifier|volatile
operator|(
literal|"xchg2 %0=%1,%2\n"
operator|:
literal|"=r"
operator|(
name|ret
operator|)
operator|,
literal|"+m"
operator|(
name|_q_value
operator|)
operator|:
literal|"r"
operator|(
name|newValue
operator|)
operator|:
literal|"memory"
operator|)
block|;
return|return
name|ret
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
operator|>
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|T
name|QBasicAtomicOps
operator|<
literal|4
operator|>
operator|::
name|fetchAndStoreAcquire
argument_list|(
argument|T&_q_value
argument_list|,
argument|T newValue
argument_list|)
name|Q_DECL_NOTHROW
block|{
name|T
name|ret
block|;
name|asm
specifier|volatile
operator|(
literal|"xchg4 %0=%1,%2\n"
operator|:
literal|"=r"
operator|(
name|ret
operator|)
operator|,
literal|"+m"
operator|(
name|_q_value
operator|)
operator|:
literal|"r"
operator|(
name|newValue
operator|)
operator|:
literal|"memory"
operator|)
block|;
return|return
name|ret
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
operator|>
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|T
name|QBasicAtomicOps
operator|<
literal|8
operator|>
operator|::
name|fetchAndStoreAcquire
argument_list|(
argument|T&_q_value
argument_list|,
argument|T newValue
argument_list|)
name|Q_DECL_NOTHROW
block|{
name|T
name|ret
block|;
name|asm
specifier|volatile
operator|(
literal|"xchg8 %0=%1,%2\n"
operator|:
literal|"=r"
operator|(
name|ret
operator|)
operator|,
literal|"+m"
operator|(
name|_q_value
operator|)
operator|:
literal|"r"
operator|(
name|newValue
operator|)
operator|:
literal|"memory"
operator|)
block|;
return|return
name|ret
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
operator|>
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|T
name|QBasicAtomicOps
operator|<
literal|1
operator|>
operator|::
name|fetchAndAddAcquire
argument_list|(
argument|T&_q_value
argument_list|,
argument|typename QAtomicAdditiveType<T>::AdditiveT valueToAdd
argument_list|)
name|Q_DECL_NOTHROW
block|{
name|T
name|ret
block|;
name|valueToAdd
operator|*=
name|QAtomicAdditiveType
operator|<
name|T
operator|>
operator|::
name|AddScale
block|;
name|ret
operator|=
name|_q_value
block|;
name|asm
specifier|volatile
operator|(
literal|"0:\n"
literal|"      mov           r9=%0\n"
literal|"      mov           ar.ccv=%0\n"
literal|"      add           %0=%0, %2\n"
literal|"      ;;\n"
literal|"      cmpxchg1.acq %0=%1,%0,ar.ccv\n"
literal|"      ;;\n"
literal|"      cmp.ne       p6,p0 = %0, r9\n"
literal|"(p6)  br.dptk      0b\n"
literal|"1:\n"
operator|:
literal|"+r"
operator|(
name|ret
operator|)
operator|,
literal|"+m"
operator|(
name|_q_value
operator|)
operator|:
literal|"r"
operator|(
name|valueToAdd
operator|)
operator|:
literal|"r9"
operator|,
literal|"p6"
operator|,
literal|"memory"
operator|)
block|;
return|return
name|ret
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
operator|>
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|T
name|QBasicAtomicOps
operator|<
literal|1
operator|>
operator|::
name|fetchAndAddRelease
argument_list|(
argument|T&_q_value
argument_list|,
argument|typename QAtomicAdditiveType<T>::AdditiveT valueToAdd
argument_list|)
name|Q_DECL_NOTHROW
block|{
name|T
name|ret
block|;
name|valueToAdd
operator|*=
name|QAtomicAdditiveType
operator|<
name|T
operator|>
operator|::
name|AddScale
block|;
name|ret
operator|=
name|_q_value
block|;
name|asm
specifier|volatile
operator|(
literal|"0:\n"
literal|"      mov           r9=%0\n"
literal|"      mov           ar.ccv=%0\n"
literal|"      add           %0=%0, %2\n"
literal|"      ;;\n"
literal|"      cmpxchg1.rel %0=%1,%0,ar.ccv\n"
literal|"      ;;\n"
literal|"      cmp.ne       p6,p0 = %0, r9\n"
literal|"(p6)  br.dptk      0b\n"
literal|"1:\n"
operator|:
literal|"+r"
operator|(
name|ret
operator|)
operator|,
literal|"+m"
operator|(
name|_q_value
operator|)
operator|:
literal|"r"
operator|(
name|valueToAdd
operator|)
operator|:
literal|"r9"
operator|,
literal|"p6"
operator|,
literal|"memory"
operator|)
block|;
return|return
name|ret
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
operator|>
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|T
name|QBasicAtomicOps
operator|<
literal|2
operator|>
operator|::
name|fetchAndAddAcquire
argument_list|(
argument|T&_q_value
argument_list|,
argument|typename QAtomicAdditiveType<T>::AdditiveT valueToAdd
argument_list|)
name|Q_DECL_NOTHROW
block|{
name|T
name|ret
block|;
name|valueToAdd
operator|*=
name|QAtomicAdditiveType
operator|<
name|T
operator|>
operator|::
name|AddScale
block|;
name|ret
operator|=
name|_q_value
block|;
name|asm
specifier|volatile
operator|(
literal|"0:\n"
literal|"      mov           r9=%0\n"
literal|"      mov           ar.ccv=%0\n"
literal|"      add           %0=%0, %2\n"
literal|"      ;;\n"
literal|"      cmpxchg2.acq %0=%1,%0,ar.ccv\n"
literal|"      ;;\n"
literal|"      cmp.ne       p6,p0 = %0, r9\n"
literal|"(p6)  br.dptk      0b\n"
literal|"1:\n"
operator|:
literal|"+r"
operator|(
name|ret
operator|)
operator|,
literal|"+m"
operator|(
name|_q_value
operator|)
operator|:
literal|"r"
operator|(
name|valueToAdd
operator|)
operator|:
literal|"r9"
operator|,
literal|"p6"
operator|,
literal|"memory"
operator|)
block|;
return|return
name|ret
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
operator|>
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|T
name|QBasicAtomicOps
operator|<
literal|2
operator|>
operator|::
name|fetchAndAddRelease
argument_list|(
argument|T&_q_value
argument_list|,
argument|typename QAtomicAdditiveType<T>::AdditiveT valueToAdd
argument_list|)
name|Q_DECL_NOTHROW
block|{
name|T
name|ret
block|;
name|valueToAdd
operator|*=
name|QAtomicAdditiveType
operator|<
name|T
operator|>
operator|::
name|AddScale
block|;
name|ret
operator|=
name|_q_value
block|;
name|asm
specifier|volatile
operator|(
literal|"0:\n"
literal|"      mov           r9=%0\n"
literal|"      mov           ar.ccv=%0\n"
literal|"      add           %0=%0, %2\n"
literal|"      ;;\n"
literal|"      cmpxchg2.rel %0=%1,%0,ar.ccv\n"
literal|"      ;;\n"
literal|"      cmp.ne       p6,p0 = %0, r9\n"
literal|"(p6)  br.dptk      0b\n"
literal|"1:\n"
operator|:
literal|"+r"
operator|(
name|ret
operator|)
operator|,
literal|"+m"
operator|(
name|_q_value
operator|)
operator|:
literal|"r"
operator|(
name|valueToAdd
operator|)
operator|:
literal|"r9"
operator|,
literal|"p6"
operator|,
literal|"memory"
operator|)
block|;
return|return
name|ret
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
operator|>
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|T
name|QBasicAtomicOps
operator|<
literal|4
operator|>
operator|::
name|fetchAndAddAcquire
argument_list|(
argument|T&_q_value
argument_list|,
argument|typename QAtomicAdditiveType<T>::AdditiveT valueToAdd
argument_list|)
name|Q_DECL_NOTHROW
block|{
name|T
name|ret
block|;
name|valueToAdd
operator|*=
name|QAtomicAdditiveType
operator|<
name|T
operator|>
operator|::
name|AddScale
block|;
if|#
directive|if
operator|(
name|__GNUC__
operator|>=
literal|4
operator|)
comment|// We implement a fast fetch-and-add when we can
if|if
condition|(
name|__builtin_constant_p
argument_list|(
name|valueToAdd
argument_list|)
operator|&&
name|_q_ia64_fetchadd_immediate
argument_list|(
name|valueToAdd
argument_list|)
condition|)
block|{
asm|asm
specifier|volatile
asm|("fetchadd4.acq  %0=%1,%2\n"                      : "=r" (ret), "+m" (_q_value)                      : "i" (valueToAdd)                      : "memory");
return|return
name|ret
return|;
block|}
endif|#
directive|endif
comment|// otherwise, use a loop around test-and-set
name|ret
operator|=
name|_q_value
expr_stmt|;
end_expr_stmt
begin_asm
asm|asm
specifier|volatile
asm|("0:\n"                  "      mov           r9=%0\n"                  "      mov           ar.ccv=%0\n"                  "      add           %0=%0, %2\n"                  "      ;;\n"                  "      cmpxchg4.acq %0=%1,%0,ar.ccv\n"                  "      ;;\n"                  "      cmp.ne       p6,p0 = %0, r9\n"                  "(p6)  br.dptk      0b\n"                  "1:\n"                  : "+r" (ret), "+m" (_q_value)                  : "r" (valueToAdd)                  : "r9", "p6", "memory");
end_asm
begin_return
return|return
name|ret
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
operator|>
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|T
name|QBasicAtomicOps
operator|<
literal|4
operator|>
operator|::
name|fetchAndAddRelease
argument_list|(
argument|T&_q_value
argument_list|,
argument|typename QAtomicAdditiveType<T>::AdditiveT valueToAdd
argument_list|)
name|Q_DECL_NOTHROW
block|{
name|T
name|ret
block|;
name|valueToAdd
operator|*=
name|QAtomicAdditiveType
operator|<
name|T
operator|>
operator|::
name|AddScale
block|;
if|#
directive|if
operator|(
name|__GNUC__
operator|>=
literal|4
operator|)
comment|// We implement a fast fetch-and-add when we can
if|if
condition|(
name|__builtin_constant_p
argument_list|(
name|valueToAdd
argument_list|)
operator|&&
name|_q_ia64_fetchadd_immediate
argument_list|(
name|valueToAdd
argument_list|)
condition|)
block|{
asm|asm
specifier|volatile
asm|("fetchadd4.rel  %0=%1,%2\n"                      : "=r" (ret), "+m" (_q_value)                      : "i" (valueToAdd)                      : "memory");
return|return
name|ret
return|;
block|}
endif|#
directive|endif
comment|// otherwise, use a loop around test-and-set
name|ret
operator|=
name|_q_value
expr_stmt|;
end_expr_stmt
begin_asm
asm|asm
specifier|volatile
asm|("0:\n"                  "      mov           r9=%0\n"                  "      mov           ar.ccv=%0\n"                  "      add           %0=%0, %2\n"                  "      ;;\n"                  "      cmpxchg4.rel %0=%1,%0,ar.ccv\n"                  "      ;;\n"                  "      cmp.ne       p6,p0 = %0, r9\n"                  "(p6)  br.dptk      0b\n"                  "1:\n"                  : "+r" (ret), "+m" (_q_value)                  : "r" (valueToAdd)                  : "r9", "p6", "memory");
end_asm
begin_return
return|return
name|ret
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
operator|>
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|T
name|QBasicAtomicOps
operator|<
literal|8
operator|>
operator|::
name|fetchAndAddAcquire
argument_list|(
argument|T&_q_value
argument_list|,
argument|typename QAtomicAdditiveType<T>::AdditiveT valueToAdd
argument_list|)
name|Q_DECL_NOTHROW
block|{
name|T
name|ret
block|;
name|valueToAdd
operator|*=
name|QAtomicAdditiveType
operator|<
name|T
operator|>
operator|::
name|AddScale
block|;
if|#
directive|if
operator|(
name|__GNUC__
operator|>=
literal|4
operator|)
comment|// We implement a fast fetch-and-add when we can
if|if
condition|(
name|__builtin_constant_p
argument_list|(
name|valueToAdd
argument_list|)
operator|&&
name|_q_ia64_fetchadd_immediate
argument_list|(
name|valueToAdd
argument_list|)
condition|)
block|{
asm|asm
specifier|volatile
asm|("fetchadd8.acq  %0=%1,%2\n"                      : "=r" (ret), "+m" (_q_value)                      : "i" (valueToAdd)                      : "memory");
return|return
name|ret
return|;
block|}
endif|#
directive|endif
comment|// otherwise, use a loop around test-and-set
name|ret
operator|=
name|_q_value
expr_stmt|;
end_expr_stmt
begin_asm
asm|asm
specifier|volatile
asm|("0:\n"                  "      mov           r9=%0\n"                  "      mov           ar.ccv=%0\n"                  "      add           %0=%0, %2\n"                  "      ;;\n"                  "      cmpxchg8.acq %0=%1,%0,ar.ccv\n"                  "      ;;\n"                  "      cmp.ne       p6,p0 = %0, r9\n"                  "(p6)  br.dptk      0b\n"                  "1:\n"                  : "+r" (ret), "+m" (_q_value)                  : "r" (valueToAdd)                  : "r9", "p6", "memory");
end_asm
begin_return
return|return
name|ret
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
operator|>
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|T
name|QBasicAtomicOps
operator|<
literal|8
operator|>
operator|::
name|fetchAndAddRelease
argument_list|(
argument|T&_q_value
argument_list|,
argument|typename QAtomicAdditiveType<T>::AdditiveT valueToAdd
argument_list|)
name|Q_DECL_NOTHROW
block|{
name|T
name|ret
block|;
name|valueToAdd
operator|*=
name|QAtomicAdditiveType
operator|<
name|T
operator|>
operator|::
name|AddScale
block|;
if|#
directive|if
operator|(
name|__GNUC__
operator|>=
literal|4
operator|)
comment|// We implement a fast fetch-and-add when we can
if|if
condition|(
name|__builtin_constant_p
argument_list|(
name|valueToAdd
argument_list|)
operator|&&
name|_q_ia64_fetchadd_immediate
argument_list|(
name|valueToAdd
argument_list|)
condition|)
block|{
asm|asm
specifier|volatile
asm|("fetchadd8.rel  %0=%1,%2\n"                      : "=r" (ret), "+m" (_q_value)                      : "i" (valueToAdd)                      : "memory");
return|return
name|ret
return|;
block|}
endif|#
directive|endif
comment|// otherwise, use a loop around test-and-set
name|ret
operator|=
name|_q_value
expr_stmt|;
end_expr_stmt
begin_asm
asm|asm
specifier|volatile
asm|("0:\n"                  "      mov           r9=%0\n"                  "      mov           ar.ccv=%0\n"                  "      add           %0=%0, %2\n"                  "      ;;\n"                  "      cmpxchg8.rel %0=%1,%0,ar.ccv\n"                  "      ;;\n"                  "      cmp.ne       p6,p0 = %0, r9\n"                  "(p6)  br.dptk      0b\n"                  "1:\n"                  : "+r" (ret), "+m" (_q_value)                  : "r" (valueToAdd)                  : "r9", "p6", "memory");
end_asm
begin_return
return|return
name|ret
return|;
end_return
begin_elif
unit|}
elif|#
directive|elif
name|defined
name|Q_CC_HPACC
end_elif
begin_include
unit|QT_BEGIN_INCLUDE_NAMESPACE
include|#
directive|include
file|<ia64/sys/inline.h>
end_include
begin_expr_stmt
name|QT_END_INCLUDE_NAMESPACE
DECL|macro|FENCE
define|#
directive|define
name|FENCE
value|(_Asm_fence)(_UP_CALL_FENCE | _UP_SYS_FENCE | _DOWN_CALL_FENCE | _DOWN_SYS_FENCE)
name|template
operator|<
name|int
name|size
operator|>
specifier|inline
name|void
name|QBasicAtomicOps
operator|<
name|size
operator|>
operator|::
name|orderedMemoryFence
argument_list|()
name|Q_DECL_NOTHROW
block|{
name|_Asm_mf
argument_list|(
name|FENCE
argument_list|)
block|; }
name|template
operator|<
operator|>
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|bool
name|QBasicAtomicOps
operator|<
literal|4
operator|>
operator|::
name|ref
argument_list|(
argument|T&_q_value
argument_list|)
name|Q_DECL_NOTHROW
block|{
return|return
operator|(
name|T
operator|)
name|_Asm_fetchadd
argument_list|(
operator|(
name|_Asm_fasz
operator|)
name|_FASZ_W
argument_list|,
operator|(
name|_Asm_sem
operator|)
name|_SEM_ACQ
argument_list|,
operator|&
name|_q_value
argument_list|,
literal|1
argument_list|,
operator|(
name|_Asm_ldhint
operator|)
name|_LDHINT_NONE
argument_list|,
name|FENCE
argument_list|)
operator|!=
operator|-
literal|1
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
operator|>
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|bool
name|QBasicAtomicOps
operator|<
literal|4
operator|>
operator|::
name|deref
argument_list|(
argument|T&_q_value
argument_list|)
name|Q_DECL_NOTHROW
block|{
return|return
operator|(
name|T
operator|)
name|_Asm_fetchadd
argument_list|(
operator|(
name|_Asm_fasz
operator|)
name|_FASZ_W
argument_list|,
operator|(
name|_Asm_sem
operator|)
name|_SEM_REL
argument_list|,
operator|&
name|_q_value
argument_list|,
operator|-
literal|1
argument_list|,
operator|(
name|_Asm_ldhint
operator|)
name|_LDHINT_NONE
argument_list|,
name|FENCE
argument_list|)
operator|!=
literal|1
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
operator|>
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|bool
name|QBasicAtomicOps
operator|<
literal|8
operator|>
operator|::
name|ref
argument_list|(
argument|T&_q_value
argument_list|)
name|Q_DECL_NOTHROW
block|{
return|return
operator|(
name|T
operator|)
name|_Asm_fetchadd
argument_list|(
operator|(
name|_Asm_fasz
operator|)
name|_FASZ_D
argument_list|,
operator|(
name|_Asm_sem
operator|)
name|_SEM_ACQ
argument_list|,
operator|&
name|_q_value
argument_list|,
literal|1
argument_list|,
operator|(
name|_Asm_ldhint
operator|)
name|_LDHINT_NONE
argument_list|,
name|FENCE
argument_list|)
operator|!=
operator|-
literal|1
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
operator|>
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|bool
name|QBasicAtomicOps
operator|<
literal|8
operator|>
operator|::
name|deref
argument_list|(
argument|T&_q_value
argument_list|)
name|Q_DECL_NOTHROW
block|{
return|return
operator|(
name|T
operator|)
name|_Asm_fetchadd
argument_list|(
operator|(
name|_Asm_fasz
operator|)
name|_FASZ_D
argument_list|,
operator|(
name|_Asm_sem
operator|)
name|_SEM_REL
argument_list|,
operator|&
name|_q_value
argument_list|,
operator|-
literal|1
argument_list|,
operator|(
name|_Asm_ldhint
operator|)
name|_LDHINT_NONE
argument_list|,
name|FENCE
argument_list|)
operator|!=
literal|1
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
operator|>
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|bool
name|QBasicAtomicOps
operator|<
literal|1
operator|>
operator|::
name|testAndSetAcquire
argument_list|(
argument|T&_q_value
argument_list|,
argument|T expectedValue
argument_list|,
argument|T newValue
argument_list|)
name|Q_DECL_NOTHROW
block|{
name|_Asm_mov_to_ar
argument_list|(
operator|(
name|_Asm_app_reg
operator|)
name|_AREG_CCV
argument_list|,
operator|(
name|quint8
operator|)
name|expectedValue
argument_list|,
name|FENCE
argument_list|)
block|;
name|T
name|ret
operator|=
operator|(
name|T
operator|)
name|_Asm_cmpxchg
argument_list|(
operator|(
name|_Asm_sz
operator|)
name|_SZ_B
argument_list|,
operator|(
name|_Asm_sem
operator|)
name|_SEM_ACQ
argument_list|,
operator|&
name|_q_value
argument_list|,
operator|(
name|quint8
operator|)
name|newValue
argument_list|,
operator|(
name|_Asm_ldhint
operator|)
name|_LDHINT_NONE
argument_list|)
block|;
return|return
name|ret
operator|==
name|expectedValue
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
operator|>
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|bool
name|QBasicAtomicOps
operator|<
literal|1
operator|>
operator|::
name|testAndSetRelease
argument_list|(
argument|T&_q_value
argument_list|,
argument|T expectedValue
argument_list|,
argument|T newValue
argument_list|)
name|Q_DECL_NOTHROW
block|{
name|_Asm_mov_to_ar
argument_list|(
operator|(
name|_Asm_app_reg
operator|)
name|_AREG_CCV
argument_list|,
operator|(
name|quint8
operator|)
name|expectedValue
argument_list|,
name|FENCE
argument_list|)
block|;
name|T
name|ret
operator|=
operator|(
name|T
operator|)
name|_Asm_cmpxchg
argument_list|(
operator|(
name|_Asm_sz
operator|)
name|_SZ_B
argument_list|,
operator|(
name|_Asm_sem
operator|)
name|_SEM_REL
argument_list|,
operator|&
name|_q_value
argument_list|,
operator|(
name|quint8
operator|)
name|newValue
argument_list|,
operator|(
name|_Asm_ldhint
operator|)
name|_LDHINT_NONE
argument_list|)
block|;
return|return
name|ret
operator|==
name|expectedValue
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
operator|>
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|bool
name|QBasicAtomicOps
operator|<
literal|2
operator|>
operator|::
name|testAndSetAcquire
argument_list|(
argument|T&_q_value
argument_list|,
argument|T expectedValue
argument_list|,
argument|T newValue
argument_list|)
name|Q_DECL_NOTHROW
block|{
name|_Asm_mov_to_ar
argument_list|(
operator|(
name|_Asm_app_reg
operator|)
name|_AREG_CCV
argument_list|,
operator|(
name|quint16
operator|)
name|expectedValue
argument_list|,
name|FENCE
argument_list|)
block|;
name|T
name|ret
operator|=
operator|(
name|T
operator|)
name|_Asm_cmpxchg
argument_list|(
operator|(
name|_Asm_sz
operator|)
name|_SZ_H
argument_list|,
operator|(
name|_Asm_sem
operator|)
name|_SEM_ACQ
argument_list|,
operator|&
name|_q_value
argument_list|,
operator|(
name|quint16
operator|)
name|newValue
argument_list|,
operator|(
name|_Asm_ldhint
operator|)
name|_LDHINT_NONE
argument_list|)
block|;
return|return
name|ret
operator|==
name|expectedValue
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
operator|>
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|bool
name|QBasicAtomicOps
operator|<
literal|2
operator|>
operator|::
name|testAndSetRelease
argument_list|(
argument|T&_q_value
argument_list|,
argument|T expectedValue
argument_list|,
argument|T newValue
argument_list|)
name|Q_DECL_NOTHROW
block|{
name|_Asm_mov_to_ar
argument_list|(
operator|(
name|_Asm_app_reg
operator|)
name|_AREG_CCV
argument_list|,
operator|(
name|quint16
operator|)
name|expectedValue
argument_list|,
name|FENCE
argument_list|)
block|;
name|T
name|ret
operator|=
operator|(
name|T
operator|)
name|_Asm_cmpxchg
argument_list|(
operator|(
name|_Asm_sz
operator|)
name|_SZ_H
argument_list|,
operator|(
name|_Asm_sem
operator|)
name|_SEM_REL
argument_list|,
operator|&
name|_q_value
argument_list|,
operator|(
name|quint16
operator|)
name|newValue
argument_list|,
operator|(
name|_Asm_ldhint
operator|)
name|_LDHINT_NONE
argument_list|)
block|;
return|return
name|ret
operator|==
name|expectedValue
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
operator|>
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|bool
name|QBasicAtomicOps
operator|<
literal|4
operator|>
operator|::
name|testAndSetAcquire
argument_list|(
argument|T&_q_value
argument_list|,
argument|T expectedValue
argument_list|,
argument|T newValue
argument_list|)
name|Q_DECL_NOTHROW
block|{
name|_Asm_mov_to_ar
argument_list|(
operator|(
name|_Asm_app_reg
operator|)
name|_AREG_CCV
argument_list|,
operator|(
name|unsigned
operator|)
name|expectedValue
argument_list|,
name|FENCE
argument_list|)
block|;
name|T
name|ret
operator|=
operator|(
name|T
operator|)
name|_Asm_cmpxchg
argument_list|(
operator|(
name|_Asm_sz
operator|)
name|_SZ_W
argument_list|,
operator|(
name|_Asm_sem
operator|)
name|_SEM_ACQ
argument_list|,
operator|&
name|_q_value
argument_list|,
operator|(
name|unsigned
operator|)
name|newValue
argument_list|,
operator|(
name|_Asm_ldhint
operator|)
name|_LDHINT_NONE
argument_list|)
block|;
return|return
name|ret
operator|==
name|expectedValue
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
operator|>
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|bool
name|QBasicAtomicOps
operator|<
literal|4
operator|>
operator|::
name|testAndSetRelease
argument_list|(
argument|T&_q_value
argument_list|,
argument|T expectedValue
argument_list|,
argument|T newValue
argument_list|)
name|Q_DECL_NOTHROW
block|{
name|_Asm_mov_to_ar
argument_list|(
operator|(
name|_Asm_app_reg
operator|)
name|_AREG_CCV
argument_list|,
operator|(
name|unsigned
operator|)
name|expectedValue
argument_list|,
name|FENCE
argument_list|)
block|;
name|T
name|ret
operator|=
operator|(
name|T
operator|)
name|_Asm_cmpxchg
argument_list|(
operator|(
name|_Asm_sz
operator|)
name|_SZ_W
argument_list|,
operator|(
name|_Asm_sem
operator|)
name|_SEM_REL
argument_list|,
operator|&
name|_q_value
argument_list|,
name|newValue
argument_list|,
operator|(
name|_Asm_ldhint
operator|)
name|_LDHINT_NONE
argument_list|)
block|;
return|return
name|ret
operator|==
name|expectedValue
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
operator|>
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|bool
name|QBasicAtomicOps
operator|<
literal|8
operator|>
operator|::
name|testAndSetAcquire
argument_list|(
argument|T&_q_value
argument_list|,
argument|T expectedValue
argument_list|,
argument|T newValue
argument_list|)
name|Q_DECL_NOTHROW
block|{
name|_Asm_mov_to_ar
argument_list|(
operator|(
name|_Asm_app_reg
operator|)
name|_AREG_CCV
argument_list|,
operator|(
name|quint64
operator|)
name|expectedValue
argument_list|,
name|FENCE
argument_list|)
block|;
name|T
name|ret
operator|=
operator|(
name|T
operator|)
name|_Asm_cmpxchg
argument_list|(
operator|(
name|_Asm_sz
operator|)
name|_SZ_D
argument_list|,
operator|(
name|_Asm_sem
operator|)
name|_SEM_ACQ
argument_list|,
operator|&
name|_q_value
argument_list|,
operator|(
name|quint64
operator|)
name|newValue
argument_list|,
operator|(
name|_Asm_ldhint
operator|)
name|_LDHINT_NONE
argument_list|)
block|;
return|return
name|ret
operator|==
name|expectedValue
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
operator|>
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|bool
name|QBasicAtomicOps
operator|<
literal|8
operator|>
operator|::
name|testAndSetRelease
argument_list|(
argument|T&_q_value
argument_list|,
argument|T expectedValue
argument_list|,
argument|T newValue
argument_list|)
name|Q_DECL_NOTHROW
block|{
name|_Asm_mov_to_ar
argument_list|(
operator|(
name|_Asm_app_reg
operator|)
name|_AREG_CCV
argument_list|,
operator|(
name|quint64
operator|)
name|expectedValue
argument_list|,
name|FENCE
argument_list|)
block|;
name|T
name|ret
operator|=
operator|(
name|T
operator|)
name|_Asm_cmpxchg
argument_list|(
operator|(
name|_Asm_sz
operator|)
name|_SZ_D
argument_list|,
operator|(
name|_Asm_sem
operator|)
name|_SEM_REL
argument_list|,
operator|&
name|_q_value
argument_list|,
operator|(
name|quint64
operator|)
name|newValue
argument_list|,
operator|(
name|_Asm_ldhint
operator|)
name|_LDHINT_NONE
argument_list|)
block|;
return|return
name|ret
operator|==
name|expectedValue
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
operator|>
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|T
name|QBasicAtomicOps
operator|<
literal|1
operator|>
operator|::
name|fetchAndStoreAcquire
argument_list|(
argument|T&_q_value
argument_list|,
argument|T newValue
argument_list|)
name|Q_DECL_NOTHROW
block|{
return|return
operator|(
name|T
operator|)
name|_Asm_xchg
argument_list|(
operator|(
name|_Asm_sz
operator|)
name|_SZ_B
argument_list|,
operator|&
name|_q_value
argument_list|,
operator|(
name|quint8
operator|)
name|newValue
argument_list|,
operator|(
name|_Asm_ldhint
operator|)
name|_LDHINT_NONE
argument_list|,
name|FENCE
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
operator|>
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|T
name|QBasicAtomicOps
operator|<
literal|2
operator|>
operator|::
name|fetchAndStoreAcquire
argument_list|(
argument|T&_q_value
argument_list|,
argument|T newValue
argument_list|)
name|Q_DECL_NOTHROW
block|{
return|return
operator|(
name|T
operator|)
name|_Asm_xchg
argument_list|(
operator|(
name|_Asm_sz
operator|)
name|_SZ_H
argument_list|,
operator|&
name|_q_value
argument_list|,
operator|(
name|quint16
operator|)
name|newValue
argument_list|,
operator|(
name|_Asm_ldhint
operator|)
name|_LDHINT_NONE
argument_list|,
name|FENCE
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
operator|>
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|T
name|QBasicAtomicOps
operator|<
literal|4
operator|>
operator|::
name|fetchAndStoreAcquire
argument_list|(
argument|T&_q_value
argument_list|,
argument|T newValue
argument_list|)
name|Q_DECL_NOTHROW
block|{
return|return
operator|(
name|T
operator|)
name|_Asm_xchg
argument_list|(
operator|(
name|_Asm_sz
operator|)
name|_SZ_W
argument_list|,
operator|&
name|_q_value
argument_list|,
operator|(
name|unsigned
operator|)
name|newValue
argument_list|,
operator|(
name|_Asm_ldhint
operator|)
name|_LDHINT_NONE
argument_list|,
name|FENCE
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
operator|>
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|T
name|QBasicAtomicOps
operator|<
literal|8
operator|>
operator|::
name|fetchAndStoreAcquire
argument_list|(
argument|T&_q_value
argument_list|,
argument|T newValue
argument_list|)
name|Q_DECL_NOTHROW
block|{
return|return
operator|(
name|T
operator|)
name|_Asm_xchg
argument_list|(
operator|(
name|_Asm_sz
operator|)
name|_SZ_D
argument_list|,
operator|&
name|_q_value
argument_list|,
operator|(
name|quint64
operator|)
name|newValue
argument_list|,
operator|(
name|_Asm_ldhint
operator|)
name|_LDHINT_NONE
argument_list|,
name|FENCE
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
operator|>
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|T
name|QBasicAtomicOps
operator|<
literal|1
operator|>
operator|::
name|fetchAndAddAcquire
argument_list|(
argument|T&_q_value
argument_list|,
argument|typename QAtomicAdditiveType<T>::AdditiveT valueToAdd
argument_list|)
name|Q_DECL_NOTHROW
block|{
name|valueToAdd
operator|*=
name|QAtomicAdditiveType
operator|<
name|T
operator|>
operator|::
name|AddScale
block|;
comment|// implement the test-and-set loop
name|T
name|old
block|,
name|ret
block|;
do|do
block|{
name|old
operator|=
name|_q_value
expr_stmt|;
name|_Asm_mov_to_ar
argument_list|(
operator|(
name|_Asm_app_reg
operator|)
name|_AREG_CCV
argument_list|,
operator|(
name|quint8
operator|)
name|old
argument_list|,
name|FENCE
argument_list|)
expr_stmt|;
name|ret
operator|=
name|_Asm_cmpxchg
argument_list|(
operator|(
name|_Asm_sz
operator|)
name|_SZ_B
argument_list|,
operator|(
name|_Asm_sem
operator|)
name|_SEM_ACQ
argument_list|,
operator|&
name|_q_value
argument_list|,
name|old
operator|+
name|valueToAdd
argument_list|,
operator|(
name|_Asm_ldhint
operator|)
name|_LDHINT_NONE
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_while
while|while
condition|(
name|ret
operator|!=
name|old
condition|)
empty_stmt|;
end_while
begin_return
return|return
name|old
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
operator|>
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|T
name|QBasicAtomicOps
operator|<
literal|1
operator|>
operator|::
name|fetchAndAddRelaxed
argument_list|(
argument|T&_q_value
argument_list|,
argument|typename QAtomicAdditiveType<T>::AdditiveT valueToAdd
argument_list|)
name|Q_DECL_NOTHROW
block|{
comment|// implement the test-and-set loop
name|T
name|old
block|,
name|ret
block|;
do|do
block|{
name|old
operator|=
name|_q_value
expr_stmt|;
name|_Asm_mov_to_ar
argument_list|(
operator|(
name|_Asm_app_reg
operator|)
name|_AREG_CCV
argument_list|,
operator|(
name|quint8
operator|)
name|old
argument_list|,
name|FENCE
argument_list|)
expr_stmt|;
name|ret
operator|=
name|_Asm_cmpxchg
argument_list|(
operator|(
name|_Asm_sz
operator|)
name|_SZ_B
argument_list|,
operator|(
name|_Asm_sem
operator|)
name|_SEM_REL
argument_list|,
operator|&
name|_q_value
argument_list|,
name|old
operator|+
name|valueToAdd
argument_list|,
operator|(
name|_Asm_ldhint
operator|)
name|_LDHINT_NONE
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_while
while|while
condition|(
name|ret
operator|!=
name|old
condition|)
empty_stmt|;
end_while
begin_return
return|return
name|old
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
operator|>
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|T
name|QBasicAtomicOps
operator|<
literal|2
operator|>
operator|::
name|fetchAndAddAcquire
argument_list|(
argument|T&_q_value
argument_list|,
argument|typename QAtomicAdditiveType<T>::AdditiveT valueToAdd
argument_list|)
name|Q_DECL_NOTHROW
block|{
name|valueToAdd
operator|*=
name|QAtomicAdditiveType
operator|<
name|T
operator|>
operator|::
name|AddScale
block|;
comment|// implement the test-and-set loop
name|T
name|old
block|,
name|ret
block|;
do|do
block|{
name|old
operator|=
name|_q_value
expr_stmt|;
name|_Asm_mov_to_ar
argument_list|(
operator|(
name|_Asm_app_reg
operator|)
name|_AREG_CCV
argument_list|,
operator|(
name|quint16
operator|)
name|old
argument_list|,
name|FENCE
argument_list|)
expr_stmt|;
name|ret
operator|=
name|_Asm_cmpxchg
argument_list|(
operator|(
name|_Asm_sz
operator|)
name|_SZ_H
argument_list|,
operator|(
name|_Asm_sem
operator|)
name|_SEM_ACQ
argument_list|,
operator|&
name|_q_value
argument_list|,
name|old
operator|+
name|valueToAdd
argument_list|,
operator|(
name|_Asm_ldhint
operator|)
name|_LDHINT_NONE
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_while
while|while
condition|(
name|ret
operator|!=
name|old
condition|)
empty_stmt|;
end_while
begin_return
return|return
name|old
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
operator|>
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|T
name|QBasicAtomicOps
operator|<
literal|2
operator|>
operator|::
name|fetchAndAddRelaxed
argument_list|(
argument|T&_q_value
argument_list|,
argument|typename QAtomicAdditiveType<T>::AdditiveT valueToAdd
argument_list|)
name|Q_DECL_NOTHROW
block|{
comment|// implement the test-and-set loop
name|T
name|old
block|,
name|ret
block|;
do|do
block|{
name|old
operator|=
name|_q_value
expr_stmt|;
name|_Asm_mov_to_ar
argument_list|(
operator|(
name|_Asm_app_reg
operator|)
name|_AREG_CCV
argument_list|,
operator|(
name|quint16
operator|)
name|old
argument_list|,
name|FENCE
argument_list|)
expr_stmt|;
name|ret
operator|=
name|_Asm_cmpxchg
argument_list|(
operator|(
name|_Asm_sz
operator|)
name|_SZ_H
argument_list|,
operator|(
name|_Asm_sem
operator|)
name|_SEM_REL
argument_list|,
operator|&
name|_q_value
argument_list|,
name|old
operator|+
name|valueToAdd
argument_list|,
operator|(
name|_Asm_ldhint
operator|)
name|_LDHINT_NONE
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_while
while|while
condition|(
name|ret
operator|!=
name|old
condition|)
empty_stmt|;
end_while
begin_return
return|return
name|old
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
operator|>
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|T
name|QBasicAtomicOps
operator|<
literal|4
operator|>
operator|::
name|fetchAndAddAcquire
argument_list|(
argument|T&_q_value
argument_list|,
argument|typename QAtomicAdditiveType<T>::AdditiveT valueToAdd
argument_list|)
name|Q_DECL_NOTHROW
block|{
name|valueToAdd
operator|*=
name|QAtomicAdditiveType
operator|<
name|T
operator|>
operator|::
name|AddScale
block|;
comment|// implement the test-and-set loop
name|T
name|old
block|,
name|ret
block|;
do|do
block|{
name|old
operator|=
name|_q_value
expr_stmt|;
name|_Asm_mov_to_ar
argument_list|(
operator|(
name|_Asm_app_reg
operator|)
name|_AREG_CCV
argument_list|,
operator|(
name|unsigned
operator|)
name|old
argument_list|,
name|FENCE
argument_list|)
expr_stmt|;
name|ret
operator|=
name|_Asm_cmpxchg
argument_list|(
operator|(
name|_Asm_sz
operator|)
name|_SZ_W
argument_list|,
operator|(
name|_Asm_sem
operator|)
name|_SEM_ACQ
argument_list|,
operator|&
name|_q_value
argument_list|,
name|old
operator|+
name|valueToAdd
argument_list|,
operator|(
name|_Asm_ldhint
operator|)
name|_LDHINT_NONE
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_while
while|while
condition|(
name|ret
operator|!=
name|old
condition|)
empty_stmt|;
end_while
begin_return
return|return
name|old
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
operator|>
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|T
name|QBasicAtomicOps
operator|<
literal|4
operator|>
operator|::
name|fetchAndAddRelaxed
argument_list|(
argument|T&_q_value
argument_list|,
argument|typename QAtomicAdditiveType<T>::AdditiveT valueToAdd
argument_list|)
name|Q_DECL_NOTHROW
block|{
comment|// implement the test-and-set loop
name|T
name|old
block|,
name|ret
block|;
do|do
block|{
name|old
operator|=
name|_q_value
expr_stmt|;
name|_Asm_mov_to_ar
argument_list|(
operator|(
name|_Asm_app_reg
operator|)
name|_AREG_CCV
argument_list|,
operator|(
name|unsigned
operator|)
name|old
argument_list|,
name|FENCE
argument_list|)
expr_stmt|;
name|ret
operator|=
name|_Asm_cmpxchg
argument_list|(
operator|(
name|_Asm_sz
operator|)
name|_SZ_W
argument_list|,
operator|(
name|_Asm_sem
operator|)
name|_SEM_REL
argument_list|,
operator|&
name|_q_value
argument_list|,
name|old
operator|+
name|valueToAdd
argument_list|,
operator|(
name|_Asm_ldhint
operator|)
name|_LDHINT_NONE
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_while
while|while
condition|(
name|ret
operator|!=
name|old
condition|)
empty_stmt|;
end_while
begin_return
return|return
name|old
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
operator|>
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|T
name|QBasicAtomicOps
operator|<
literal|8
operator|>
operator|::
name|fetchAndAddAcquire
argument_list|(
argument|T&_q_value
argument_list|,
argument|typename QAtomicAdditiveType<T>::AdditiveT valueToAdd
argument_list|)
name|Q_DECL_NOTHROW
block|{
name|valueToAdd
operator|*=
name|QAtomicAdditiveType
operator|<
name|T
operator|>
operator|::
name|AddScale
block|;
comment|// implement the test-and-set loop
name|T
name|old
block|,
name|ret
block|;
do|do
block|{
name|old
operator|=
name|_q_value
expr_stmt|;
name|_Asm_mov_to_ar
argument_list|(
operator|(
name|_Asm_app_reg
operator|)
name|_AREG_CCV
argument_list|,
operator|(
name|quint64
operator|)
name|old
argument_list|,
name|FENCE
argument_list|)
expr_stmt|;
name|ret
operator|=
name|_Asm_cmpxchg
argument_list|(
operator|(
name|_Asm_sz
operator|)
name|_SZ_D
argument_list|,
operator|(
name|_Asm_sem
operator|)
name|_SEM_ACQ
argument_list|,
operator|&
name|_q_value
argument_list|,
name|old
operator|+
name|valueToAdd
argument_list|,
operator|(
name|_Asm_ldhint
operator|)
name|_LDHINT_NONE
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_while
while|while
condition|(
name|ret
operator|!=
name|old
condition|)
empty_stmt|;
end_while
begin_return
return|return
name|old
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
operator|>
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|T
name|QBasicAtomicOps
operator|<
literal|8
operator|>
operator|::
name|fetchAndAddRelaxed
argument_list|(
argument|T&_q_value
argument_list|,
argument|typename QAtomicAdditiveType<T>::AdditiveT valueToAdd
argument_list|)
name|Q_DECL_NOTHROW
block|{
comment|// implement the test-and-set loop
name|T
name|old
block|,
name|ret
block|;
do|do
block|{
name|old
operator|=
name|_q_value
expr_stmt|;
name|_Asm_mov_to_ar
argument_list|(
operator|(
name|_Asm_app_reg
operator|)
name|_AREG_CCV
argument_list|,
operator|(
name|quint64
operator|)
name|old
argument_list|,
name|FENCE
argument_list|)
expr_stmt|;
name|ret
operator|=
name|_Asm_cmpxchg
argument_list|(
operator|(
name|_Asm_sz
operator|)
name|_SZ_D
argument_list|,
operator|(
name|_Asm_sem
operator|)
name|_SEM_REL
argument_list|,
operator|&
name|_q_value
argument_list|,
name|old
operator|+
name|valueToAdd
argument_list|,
operator|(
name|_Asm_ldhint
operator|)
name|_LDHINT_NONE
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_while
while|while
condition|(
name|ret
operator|!=
name|old
condition|)
empty_stmt|;
end_while
begin_return
return|return
name|old
return|;
end_return
begin_endif
unit|}
endif|#
directive|endif
end_endif
begin_expr_stmt
unit|template
operator|<
name|int
name|size
operator|>
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|bool
name|QBasicAtomicOps
operator|<
name|size
operator|>
operator|::
name|ref
argument_list|(
argument|T&_q_value
argument_list|)
name|Q_DECL_NOTHROW
block|{
comment|// no fetchadd for 1 or 2 bytes
return|return
name|fetchAndAddRelaxed
argument_list|(
name|_q_value
argument_list|,
literal|1
argument_list|)
operator|==
operator|-
literal|1
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|int
name|size
operator|>
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|bool
name|QBasicAtomicOps
operator|<
name|size
operator|>
operator|::
name|deref
argument_list|(
argument|T&_q_value
argument_list|)
name|Q_DECL_NOTHROW
block|{
comment|// no fetchadd for 1 or 2 bytes
return|return
name|fetchAndAddRelaxed
argument_list|(
name|_q_value
argument_list|,
operator|-
literal|1
argument_list|)
operator|==
literal|1
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|int
name|size
operator|>
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|bool
name|QBasicAtomicOps
operator|<
name|size
operator|>
operator|::
name|testAndSetRelaxed
argument_list|(
argument|T&_q_value
argument_list|,
argument|T expectedValue
argument_list|,
argument|T newValue
argument_list|)
name|Q_DECL_NOTHROW
block|{
return|return
name|testAndSetAcquire
argument_list|(
name|_q_value
argument_list|,
name|expectedValue
argument_list|,
name|newValue
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|int
name|size
operator|>
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|bool
name|QBasicAtomicOps
operator|<
name|size
operator|>
operator|::
name|testAndSetOrdered
argument_list|(
argument|T&_q_value
argument_list|,
argument|T expectedValue
argument_list|,
argument|T newValue
argument_list|)
name|Q_DECL_NOTHROW
block|{
name|orderedMemoryFence
argument_list|(
name|_q_value
argument_list|)
block|;
return|return
name|testAndSetAcquire
argument_list|(
name|_q_value
argument_list|,
name|expectedValue
argument_list|,
name|newValue
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|int
name|size
operator|>
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|T
name|QBasicAtomicOps
operator|<
name|size
operator|>
operator|::
name|fetchAndStoreRelaxed
argument_list|(
argument|T&_q_value
argument_list|,
argument|T newValue
argument_list|)
name|Q_DECL_NOTHROW
block|{
return|return
name|fetchAndStoreAcquire
argument_list|(
name|_q_value
argument_list|,
name|newValue
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|int
name|size
operator|>
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|T
name|QBasicAtomicOps
operator|<
name|size
operator|>
operator|::
name|fetchAndStoreRelease
argument_list|(
argument|T&_q_value
argument_list|,
argument|T newValue
argument_list|)
name|Q_DECL_NOTHROW
block|{
name|orderedMemoryFence
argument_list|(
name|_q_value
argument_list|)
block|;
return|return
name|fetchAndStoreAcquire
argument_list|(
name|_q_value
argument_list|,
name|newValue
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|int
name|size
operator|>
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|T
name|QBasicAtomicOps
operator|<
name|size
operator|>
operator|::
name|fetchAndStoreOrdered
argument_list|(
argument|T&_q_value
argument_list|,
argument|T newValue
argument_list|)
name|Q_DECL_NOTHROW
block|{
return|return
name|fetchAndStoreRelease
argument_list|(
name|_q_value
argument_list|,
name|newValue
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|int
name|size
operator|>
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|T
name|QBasicAtomicOps
operator|<
name|size
operator|>
operator|::
name|fetchAndAddRelaxed
argument_list|(
argument|T&_q_value
argument_list|,
argument|typename QAtomicAdditiveType<T>::AdditiveT valueToAdd
argument_list|)
name|Q_DECL_NOTHROW
block|{
return|return
name|fetchAndAddAcquire
argument_list|(
name|_q_value
argument_list|,
name|valueToAdd
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|int
name|size
operator|>
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|T
name|QBasicAtomicOps
operator|<
name|size
operator|>
operator|::
name|fetchAndAddOrdered
argument_list|(
argument|T&_q_value
argument_list|,
argument|typename QAtomicAdditiveType<T>::AdditiveT valueToAdd
argument_list|)
name|Q_DECL_NOTHROW
block|{
name|orderedMemoryFence
argument_list|(
name|_q_value
argument_list|)
block|;
return|return
name|fetchAndAddRelease
argument_list|(
name|_q_value
argument_list|,
name|valueToAdd
argument_list|)
return|;
block|}
end_expr_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QATOMIC_IA64_H
end_comment
end_unit
