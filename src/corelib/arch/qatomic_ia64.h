begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QATOMIC_IA64_H
end_ifndef
begin_define
DECL|macro|QATOMIC_IA64_H
define|#
directive|define
name|QATOMIC_IA64_H
end_define
begin_expr_stmt
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
DECL|macro|Q_ATOMIC_INT_REFERENCE_COUNTING_IS_ALWAYS_NATIVE
define|#
directive|define
name|Q_ATOMIC_INT_REFERENCE_COUNTING_IS_ALWAYS_NATIVE
DECL|macro|Q_ATOMIC_INT_REFERENCE_COUNTING_IS_WAIT_FREE
define|#
directive|define
name|Q_ATOMIC_INT_REFERENCE_COUNTING_IS_WAIT_FREE
DECL|function|isReferenceCountingNative
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|isReferenceCountingNative
argument_list|()
block|{
return|return
name|true
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|isReferenceCountingWaitFree
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|isReferenceCountingWaitFree
argument_list|()
block|{
return|return
name|true
return|;
block|}
end_expr_stmt
begin_define
DECL|macro|Q_ATOMIC_INT_TEST_AND_SET_IS_ALWAYS_NATIVE
define|#
directive|define
name|Q_ATOMIC_INT_TEST_AND_SET_IS_ALWAYS_NATIVE
end_define
begin_define
DECL|macro|Q_ATOMIC_INT_TEST_AND_SET_IS_WAIT_FREE
define|#
directive|define
name|Q_ATOMIC_INT_TEST_AND_SET_IS_WAIT_FREE
end_define
begin_expr_stmt
DECL|function|isTestAndSetNative
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|isTestAndSetNative
argument_list|()
block|{
return|return
name|true
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|isTestAndSetWaitFree
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|isTestAndSetWaitFree
argument_list|()
block|{
return|return
name|true
return|;
block|}
end_expr_stmt
begin_define
DECL|macro|Q_ATOMIC_INT_FETCH_AND_STORE_IS_ALWAYS_NATIVE
define|#
directive|define
name|Q_ATOMIC_INT_FETCH_AND_STORE_IS_ALWAYS_NATIVE
end_define
begin_define
DECL|macro|Q_ATOMIC_INT_FETCH_AND_STORE_IS_WAIT_FREE
define|#
directive|define
name|Q_ATOMIC_INT_FETCH_AND_STORE_IS_WAIT_FREE
end_define
begin_expr_stmt
DECL|function|isFetchAndStoreNative
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|isFetchAndStoreNative
argument_list|()
block|{
return|return
name|true
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|isFetchAndStoreWaitFree
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|isFetchAndStoreWaitFree
argument_list|()
block|{
return|return
name|true
return|;
block|}
end_expr_stmt
begin_define
DECL|macro|Q_ATOMIC_INT_FETCH_AND_ADD_IS_ALWAYS_NATIVE
define|#
directive|define
name|Q_ATOMIC_INT_FETCH_AND_ADD_IS_ALWAYS_NATIVE
end_define
begin_expr_stmt
DECL|function|isFetchAndAddNative
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|isFetchAndAddNative
argument_list|()
block|{
return|return
name|true
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|isFetchAndAddWaitFree
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|isFetchAndAddWaitFree
argument_list|()
block|{
return|return
name|false
return|;
block|}
end_expr_stmt
begin_define
DECL|macro|Q_ATOMIC_POINTER_TEST_AND_SET_IS_ALWAYS_NATIVE
define|#
directive|define
name|Q_ATOMIC_POINTER_TEST_AND_SET_IS_ALWAYS_NATIVE
end_define
begin_define
DECL|macro|Q_ATOMIC_POINTER_TEST_AND_SET_IS_WAIT_FREE
define|#
directive|define
name|Q_ATOMIC_POINTER_TEST_AND_SET_IS_WAIT_FREE
end_define
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|isTestAndSetNative
name|Q_INLINE_TEMPLATE
name|bool
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|isTestAndSetNative
argument_list|()
block|{
return|return
name|true
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|isTestAndSetWaitFree
name|Q_INLINE_TEMPLATE
name|bool
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|isTestAndSetWaitFree
argument_list|()
block|{
return|return
name|true
return|;
block|}
end_expr_stmt
begin_define
DECL|macro|Q_ATOMIC_POINTER_FETCH_AND_STORE_IS_ALWAYS_NATIVE
define|#
directive|define
name|Q_ATOMIC_POINTER_FETCH_AND_STORE_IS_ALWAYS_NATIVE
end_define
begin_define
DECL|macro|Q_ATOMIC_POINTER_FETCH_AND_STORE_IS_WAIT_FREE
define|#
directive|define
name|Q_ATOMIC_POINTER_FETCH_AND_STORE_IS_WAIT_FREE
end_define
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|isFetchAndStoreNative
name|Q_INLINE_TEMPLATE
name|bool
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|isFetchAndStoreNative
argument_list|()
block|{
return|return
name|true
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|isFetchAndStoreWaitFree
name|Q_INLINE_TEMPLATE
name|bool
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|isFetchAndStoreWaitFree
argument_list|()
block|{
return|return
name|true
return|;
block|}
end_expr_stmt
begin_define
DECL|macro|Q_ATOMIC_POINTER_FETCH_AND_ADD_IS_ALWAYS_NATIVE
define|#
directive|define
name|Q_ATOMIC_POINTER_FETCH_AND_ADD_IS_ALWAYS_NATIVE
end_define
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|isFetchAndAddNative
name|Q_INLINE_TEMPLATE
name|bool
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|isFetchAndAddNative
argument_list|()
block|{
return|return
name|true
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|isFetchAndAddWaitFree
name|Q_INLINE_TEMPLATE
name|bool
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|isFetchAndAddWaitFree
argument_list|()
block|{
return|return
name|false
return|;
block|}
end_expr_stmt
begin_function
DECL|function|_q_ia64_fetchadd_immediate
specifier|inline
name|bool
name|_q_ia64_fetchadd_immediate
parameter_list|(
specifier|register
name|int
name|value
parameter_list|)
block|{
return|return
name|value
operator|==
literal|1
operator|||
name|value
operator|==
operator|-
literal|1
operator|||
name|value
operator|==
literal|4
operator|||
name|value
operator|==
operator|-
literal|4
operator|||
name|value
operator|==
literal|8
operator|||
name|value
operator|==
operator|-
literal|8
operator|||
name|value
operator|==
literal|16
operator|||
name|value
operator|==
operator|-
literal|16
return|;
block|}
end_function
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_CC_INTEL
argument_list|)
end_if
begin_comment
comment|// intrinsics provided by the Intel C++ Compiler
end_comment
begin_include
include|#
directive|include
file|<ia64intrin.h>
end_include
begin_expr_stmt
DECL|function|fetchAndStoreAcquire
specifier|inline
name|int
name|QBasicAtomicInt
operator|::
name|fetchAndStoreAcquire
argument_list|(
argument|int newValue
argument_list|)
block|{
return|return
name|static_cast
operator|<
name|int
operator|>
operator|(
name|_InterlockedExchange
argument_list|(
operator|&
name|_q_value
argument_list|,
name|newValue
argument_list|)
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|fetchAndStoreRelease
specifier|inline
name|int
name|QBasicAtomicInt
operator|::
name|fetchAndStoreRelease
argument_list|(
argument|int newValue
argument_list|)
block|{
name|__memory_barrier
argument_list|()
block|;
return|return
name|static_cast
operator|<
name|int
operator|>
operator|(
name|_InterlockedExchange
argument_list|(
operator|&
name|_q_value
argument_list|,
name|newValue
argument_list|)
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|testAndSetRelaxed
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|testAndSetRelaxed
argument_list|(
argument|int expectedValue
argument_list|,
argument|int newValue
argument_list|)
block|{
specifier|register
name|int
name|expectedValueCopy
operator|=
name|expectedValue
block|;
return|return
operator|(
name|static_cast
operator|<
name|int
operator|>
operator|(
name|_InterlockedCompareExchange
argument_list|(
operator|&
name|_q_value
argument_list|,
name|newValue
argument_list|,
name|expectedValueCopy
argument_list|)
operator|)
operator|==
name|expectedValue
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|testAndSetAcquire
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|testAndSetAcquire
argument_list|(
argument|int expectedValue
argument_list|,
argument|int newValue
argument_list|)
block|{
specifier|register
name|int
name|expectedValueCopy
operator|=
name|expectedValue
block|;
return|return
operator|(
name|static_cast
operator|<
name|int
operator|>
operator|(
name|_InterlockedCompareExchange_acq
argument_list|(
name|reinterpret_cast
operator|<
specifier|volatile
name|uint
operator|*
operator|>
operator|(
operator|&
name|_q_value
operator|)
argument_list|,
name|newValue
argument_list|,
name|expectedValueCopy
argument_list|)
operator|)
operator|==
name|expectedValue
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|testAndSetRelease
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|testAndSetRelease
argument_list|(
argument|int expectedValue
argument_list|,
argument|int newValue
argument_list|)
block|{
specifier|register
name|int
name|expectedValueCopy
operator|=
name|expectedValue
block|;
return|return
operator|(
name|static_cast
operator|<
name|int
operator|>
operator|(
name|_InterlockedCompareExchange_rel
argument_list|(
name|reinterpret_cast
operator|<
specifier|volatile
name|uint
operator|*
operator|>
operator|(
operator|&
name|_q_value
operator|)
argument_list|,
name|newValue
argument_list|,
name|expectedValueCopy
argument_list|)
operator|)
operator|==
name|expectedValue
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|testAndSetOrdered
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|testAndSetOrdered
argument_list|(
argument|int expectedValue
argument_list|,
argument|int newValue
argument_list|)
block|{
name|__memory_barrier
argument_list|()
block|;
return|return
name|testAndSetAcquire
argument_list|(
name|expectedValue
argument_list|,
name|newValue
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|fetchAndAddAcquire
specifier|inline
name|int
name|QBasicAtomicInt
operator|::
name|fetchAndAddAcquire
argument_list|(
argument|int valueToAdd
argument_list|)
block|{
if|if
condition|(
name|__builtin_constant_p
argument_list|(
name|valueToAdd
argument_list|)
condition|)
block|{
if|if
condition|(
name|valueToAdd
operator|==
literal|1
condition|)
return|return
name|__fetchadd4_acq
argument_list|(
operator|(
name|unsigned
name|int
operator|*
operator|)
operator|&
name|_q_value
argument_list|,
literal|1
argument_list|)
return|;
if|if
condition|(
name|valueToAdd
operator|==
operator|-
literal|1
condition|)
return|return
name|__fetchadd4_acq
argument_list|(
operator|(
name|unsigned
name|int
operator|*
operator|)
operator|&
name|_q_value
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
end_expr_stmt
begin_return
return|return
name|_InterlockedExchangeAdd
argument_list|(
operator|&
name|_q_value
argument_list|,
name|valueToAdd
argument_list|)
return|;
end_return
begin_expr_stmt
unit|}  inline
DECL|function|fetchAndAddRelease
name|int
name|QBasicAtomicInt
operator|::
name|fetchAndAddRelease
argument_list|(
argument|int valueToAdd
argument_list|)
block|{
if|if
condition|(
name|__builtin_constant_p
argument_list|(
name|valueToAdd
argument_list|)
condition|)
block|{
if|if
condition|(
name|valueToAdd
operator|==
literal|1
condition|)
return|return
name|__fetchadd4_rel
argument_list|(
operator|(
name|unsigned
name|int
operator|*
operator|)
operator|&
name|_q_value
argument_list|,
literal|1
argument_list|)
return|;
if|if
condition|(
name|valueToAdd
operator|==
operator|-
literal|1
condition|)
return|return
name|__fetchadd4_rel
argument_list|(
operator|(
name|unsigned
name|int
operator|*
operator|)
operator|&
name|_q_value
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
name|__memory_barrier
argument_list|()
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|_InterlockedExchangeAdd
argument_list|(
operator|&
name|_q_value
argument_list|,
name|valueToAdd
argument_list|)
return|;
end_return
begin_expr_stmt
unit|}  inline
DECL|function|fetchAndAddOrdered
name|int
name|QBasicAtomicInt
operator|::
name|fetchAndAddOrdered
argument_list|(
argument|int valueToAdd
argument_list|)
block|{
name|__memory_barrier
argument_list|()
block|;
return|return
name|fetchAndAddAcquire
argument_list|(
name|valueToAdd
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|ref
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|ref
argument_list|()
block|{
return|return
name|_InterlockedIncrement
argument_list|(
operator|&
name|_q_value
argument_list|)
operator|!=
literal|0
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|deref
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|deref
argument_list|()
block|{
return|return
name|_InterlockedDecrement
argument_list|(
operator|&
name|_q_value
argument_list|)
operator|!=
literal|0
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|fetchAndStoreAcquire
name|Q_INLINE_TEMPLATE
name|T
operator|*
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|fetchAndStoreAcquire
argument_list|(
argument|T *newValue
argument_list|)
block|{
return|return
operator|(
name|T
operator|*
operator|)
name|_InterlockedExchangePointer
argument_list|(
name|reinterpret_cast
operator|<
name|void
operator|*
specifier|volatile
operator|*
operator|>
operator|(
operator|&
name|_q_value
operator|)
argument_list|,
name|newValue
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|fetchAndStoreRelease
name|Q_INLINE_TEMPLATE
name|T
operator|*
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|fetchAndStoreRelease
argument_list|(
argument|T *newValue
argument_list|)
block|{
name|__memory_barrier
argument_list|()
block|;
return|return
name|fetchAndStoreAcquire
argument_list|(
name|newValue
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|testAndSetRelaxed
name|Q_INLINE_TEMPLATE
name|bool
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|testAndSetRelaxed
argument_list|(
argument|T *expectedValue
argument_list|,
argument|T *newValue
argument_list|)
block|{
specifier|register
name|T
operator|*
name|expectedValueCopy
operator|=
name|expectedValue
block|;
return|return
operator|(
name|_InterlockedCompareExchangePointer
argument_list|(
name|reinterpret_cast
operator|<
name|void
operator|*
specifier|volatile
operator|*
operator|>
operator|(
operator|&
name|_q_value
operator|)
argument_list|,
name|newValue
argument_list|,
name|expectedValueCopy
argument_list|)
operator|==
name|expectedValue
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|testAndSetAcquire
name|Q_INLINE_TEMPLATE
name|bool
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|testAndSetAcquire
argument_list|(
argument|T *expectedValue
argument_list|,
argument|T *newValue
argument_list|)
block|{
expr|union
block|{
specifier|volatile
name|void
operator|*
name|x
block|;
specifier|volatile
name|unsigned
name|long
operator|*
name|p
block|;     }
block|;
name|x
operator|=
operator|&
name|_q_value
block|;
specifier|register
name|T
operator|*
name|expectedValueCopy
operator|=
name|expectedValue
block|;
return|return
operator|(
name|_InterlockedCompareExchange64_acq
argument_list|(
name|p
argument_list|,
name|quintptr
argument_list|(
name|newValue
argument_list|)
argument_list|,
name|quintptr
argument_list|(
name|expectedValueCopy
argument_list|)
argument_list|)
operator|==
name|quintptr
argument_list|(
name|expectedValue
argument_list|)
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|testAndSetRelease
name|Q_INLINE_TEMPLATE
name|bool
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|testAndSetRelease
argument_list|(
argument|T *expectedValue
argument_list|,
argument|T *newValue
argument_list|)
block|{
expr|union
block|{
specifier|volatile
name|void
operator|*
name|x
block|;
specifier|volatile
name|unsigned
name|long
operator|*
name|p
block|;     }
block|;
name|x
operator|=
operator|&
name|_q_value
block|;
specifier|register
name|T
operator|*
name|expectedValueCopy
operator|=
name|expectedValue
block|;
return|return
operator|(
name|_InterlockedCompareExchange64_rel
argument_list|(
name|p
argument_list|,
name|quintptr
argument_list|(
name|newValue
argument_list|)
argument_list|,
name|quintptr
argument_list|(
name|expectedValueCopy
argument_list|)
argument_list|)
operator|==
name|quintptr
argument_list|(
name|expectedValue
argument_list|)
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|testAndSetOrdered
name|Q_INLINE_TEMPLATE
name|bool
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|testAndSetOrdered
argument_list|(
argument|T *expectedValue
argument_list|,
argument|T *newValue
argument_list|)
block|{
name|__memory_barrier
argument_list|()
block|;
return|return
name|testAndSetAcquire
argument_list|(
name|expectedValue
argument_list|,
name|newValue
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|fetchAndAddAcquire
name|Q_INLINE_TEMPLATE
name|T
operator|*
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|fetchAndAddAcquire
argument_list|(
argument|qptrdiff valueToAdd
argument_list|)
block|{
return|return
operator|(
name|T
operator|*
operator|)
name|_InterlockedExchangeAdd64
argument_list|(
operator|(
specifier|volatile
name|long
operator|*
operator|)
operator|&
name|_q_value
argument_list|,
name|valueToAdd
operator|*
sizeof|sizeof
argument_list|(
name|T
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|fetchAndAddRelease
name|Q_INLINE_TEMPLATE
name|T
operator|*
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|fetchAndAddRelease
argument_list|(
argument|qptrdiff valueToAdd
argument_list|)
block|{
name|__memory_barrier
argument_list|()
block|;
return|return
operator|(
name|T
operator|*
operator|)
name|_InterlockedExchangeAdd64
argument_list|(
operator|(
specifier|volatile
name|long
operator|*
operator|)
operator|&
name|_q_value
argument_list|,
name|valueToAdd
operator|*
sizeof|sizeof
argument_list|(
name|T
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|fetchAndAddOrdered
name|Q_INLINE_TEMPLATE
name|T
operator|*
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|fetchAndAddOrdered
argument_list|(
argument|qptrdiff valueToAdd
argument_list|)
block|{
name|__memory_barrier
argument_list|()
block|;
return|return
name|fetchAndAddAcquire
argument_list|(
name|valueToAdd
argument_list|)
return|;
block|}
end_expr_stmt
begin_else
else|#
directive|else
end_else
begin_comment
comment|// !Q_CC_INTEL
end_comment
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_CC_GNU
argument_list|)
end_if
begin_expr_stmt
DECL|function|fetchAndStoreAcquire
specifier|inline
name|int
name|QBasicAtomicInt
operator|::
name|fetchAndStoreAcquire
argument_list|(
argument|int newValue
argument_list|)
block|{
name|int
name|ret
block|;
name|asm
specifier|volatile
operator|(
literal|"xchg4 %0=%1,%2\n"
operator|:
literal|"=r"
operator|(
name|ret
operator|)
operator|,
literal|"+m"
operator|(
name|_q_value
operator|)
operator|:
literal|"r"
operator|(
name|newValue
operator|)
operator|:
literal|"memory"
operator|)
block|;
return|return
name|ret
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|fetchAndStoreRelease
specifier|inline
name|int
name|QBasicAtomicInt
operator|::
name|fetchAndStoreRelease
argument_list|(
argument|int newValue
argument_list|)
block|{
name|int
name|ret
block|;
name|asm
specifier|volatile
operator|(
literal|"mf\n"
literal|"xchg4 %0=%1,%2\n"
operator|:
literal|"=r"
operator|(
name|ret
operator|)
operator|,
literal|"+m"
operator|(
name|_q_value
operator|)
operator|:
literal|"r"
operator|(
name|newValue
operator|)
operator|:
literal|"memory"
operator|)
block|;
return|return
name|ret
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|testAndSetAcquire
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|testAndSetAcquire
argument_list|(
argument|int expectedValue
argument_list|,
argument|int newValue
argument_list|)
block|{
name|int
name|ret
block|;
name|asm
specifier|volatile
operator|(
literal|"mov ar.ccv=%2\n"
literal|";;\n"
literal|"cmpxchg4.acq %0=%1,%3,ar.ccv\n"
operator|:
literal|"=r"
operator|(
name|ret
operator|)
operator|,
literal|"+m"
operator|(
name|_q_value
operator|)
operator|:
literal|"r"
operator|(
name|expectedValue
operator|)
operator|,
literal|"r"
operator|(
name|newValue
operator|)
operator|:
literal|"memory"
operator|)
block|;
return|return
name|ret
operator|==
name|expectedValue
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|testAndSetRelease
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|testAndSetRelease
argument_list|(
argument|int expectedValue
argument_list|,
argument|int newValue
argument_list|)
block|{
name|int
name|ret
block|;
name|asm
specifier|volatile
operator|(
literal|"mov ar.ccv=%2\n"
literal|";;\n"
literal|"cmpxchg4.rel %0=%1,%3,ar.ccv\n"
operator|:
literal|"=r"
operator|(
name|ret
operator|)
operator|,
literal|"+m"
operator|(
name|_q_value
operator|)
operator|:
literal|"r"
operator|(
name|expectedValue
operator|)
operator|,
literal|"r"
operator|(
name|newValue
operator|)
operator|:
literal|"memory"
operator|)
block|;
return|return
name|ret
operator|==
name|expectedValue
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|fetchAndAddAcquire
specifier|inline
name|int
name|QBasicAtomicInt
operator|::
name|fetchAndAddAcquire
argument_list|(
argument|int valueToAdd
argument_list|)
block|{
name|int
name|ret
block|;
if|#
directive|if
operator|(
name|__GNUC__
operator|>=
literal|4
operator|)
comment|// We implement a fast fetch-and-add when we can
if|if
condition|(
name|__builtin_constant_p
argument_list|(
name|valueToAdd
argument_list|)
operator|&&
name|_q_ia64_fetchadd_immediate
argument_list|(
name|valueToAdd
argument_list|)
condition|)
block|{
asm|asm
specifier|volatile
asm|("fetchadd4.acq  %0=%1,%2\n"                      : "=r" (ret), "+m" (_q_value)                      : "i" (valueToAdd)                      : "memory");
return|return
name|ret
return|;
block|}
endif|#
directive|endif
comment|// otherwise, use a loop around test-and-set
name|ret
operator|=
name|_q_value
expr_stmt|;
end_expr_stmt
begin_asm
asm|asm
specifier|volatile
asm|("0:\n"                  "      mov           r9=%0\n"                  "      mov           ar.ccv=%0\n"                  "      add           %0=%0, %2\n"                  "      ;;\n"                  "      cmpxchg4.acq %0=%1,%0,ar.ccv\n"                  "      ;;\n"                  "      cmp.ne       p6,p0 = %0, r9\n"                  "(p6)  br.dptk      0b\n"                  "1:\n"                  : "+r" (ret), "+m" (_q_value)                  : "r" (valueToAdd)                  : "r9", "p6", "memory");
end_asm
begin_return
return|return
name|ret
return|;
end_return
begin_expr_stmt
unit|}  inline
DECL|function|fetchAndAddRelease
name|int
name|QBasicAtomicInt
operator|::
name|fetchAndAddRelease
argument_list|(
argument|int valueToAdd
argument_list|)
block|{
name|int
name|ret
block|;
if|#
directive|if
operator|(
name|__GNUC__
operator|>=
literal|4
operator|)
comment|// We implement a fast fetch-and-add when we can
if|if
condition|(
name|__builtin_constant_p
argument_list|(
name|valueToAdd
argument_list|)
operator|&&
name|_q_ia64_fetchadd_immediate
argument_list|(
name|valueToAdd
argument_list|)
condition|)
block|{
asm|asm
specifier|volatile
asm|("fetchadd4.rel  %0=%1,%2\n"                      : "=r" (ret), "+m" (_q_value)                      : "i" (valueToAdd)                      : "memory");
return|return
name|ret
return|;
block|}
endif|#
directive|endif
comment|// otherwise, use a loop around test-and-set
name|ret
operator|=
name|_q_value
expr_stmt|;
end_expr_stmt
begin_asm
asm|asm
specifier|volatile
asm|("0:\n"                  "      mov           r9=%0\n"                  "      mov           ar.ccv=%0\n"                  "      add           %0=%0, %2\n"                  "      ;;\n"                  "      cmpxchg4.rel %0=%1,%0,ar.ccv\n"                  "      ;;\n"                  "      cmp.ne       p6,p0 = %0, r9\n"                  "(p6)  br.dptk      0b\n"                  "1:\n"                  : "+r" (ret), "+m" (_q_value)                  : "r" (valueToAdd)                  : "r9", "p6", "memory");
end_asm
begin_return
return|return
name|ret
return|;
end_return
begin_expr_stmt
unit|}  inline
DECL|function|fetchAndAddOrdered
name|int
name|QBasicAtomicInt
operator|::
name|fetchAndAddOrdered
argument_list|(
argument|int valueToAdd
argument_list|)
block|{
name|asm
specifier|volatile
operator|(
literal|"mf"
operator|::
operator|:
literal|"memory"
operator|)
block|;
return|return
name|fetchAndAddRelease
argument_list|(
name|valueToAdd
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|ref
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|ref
argument_list|()
block|{
name|int
name|ret
block|;
name|asm
specifier|volatile
operator|(
literal|"fetchadd4.acq %0=%1,1\n"
operator|:
literal|"=r"
operator|(
name|ret
operator|)
operator|,
literal|"+m"
operator|(
name|_q_value
operator|)
operator|:
operator|:
literal|"memory"
operator|)
block|;
return|return
name|ret
operator|!=
operator|-
literal|1
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|deref
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|deref
argument_list|()
block|{
name|int
name|ret
block|;
name|asm
specifier|volatile
operator|(
literal|"fetchadd4.rel %0=%1,-1\n"
operator|:
literal|"=r"
operator|(
name|ret
operator|)
operator|,
literal|"+m"
operator|(
name|_q_value
operator|)
operator|:
operator|:
literal|"memory"
operator|)
block|;
return|return
name|ret
operator|!=
literal|1
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|fetchAndStoreAcquire
name|Q_INLINE_TEMPLATE
name|T
operator|*
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|fetchAndStoreAcquire
argument_list|(
argument|T *newValue
argument_list|)
block|{
name|T
operator|*
name|ret
block|;
name|asm
specifier|volatile
operator|(
literal|"xchg8 %0=%1,%2\n"
operator|:
literal|"=r"
operator|(
name|ret
operator|)
operator|,
literal|"+m"
operator|(
name|_q_value
operator|)
operator|:
literal|"r"
operator|(
name|newValue
operator|)
operator|:
literal|"memory"
operator|)
block|;
return|return
name|ret
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|fetchAndStoreRelease
name|Q_INLINE_TEMPLATE
name|T
operator|*
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|fetchAndStoreRelease
argument_list|(
argument|T *newValue
argument_list|)
block|{
name|T
operator|*
name|ret
block|;
name|asm
specifier|volatile
operator|(
literal|"mf\n"
literal|"xchg8 %0=%1,%2\n"
operator|:
literal|"=r"
operator|(
name|ret
operator|)
operator|,
literal|"+m"
operator|(
name|_q_value
operator|)
operator|:
literal|"r"
operator|(
name|newValue
operator|)
operator|:
literal|"memory"
operator|)
block|;
return|return
name|ret
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|testAndSetAcquire
name|Q_INLINE_TEMPLATE
name|bool
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|testAndSetAcquire
argument_list|(
argument|T *expectedValue
argument_list|,
argument|T *newValue
argument_list|)
block|{
name|T
operator|*
name|ret
block|;
name|asm
specifier|volatile
operator|(
literal|"mov ar.ccv=%2\n"
literal|";;\n"
literal|"cmpxchg8.acq %0=%1,%3,ar.ccv\n"
operator|:
literal|"=r"
operator|(
name|ret
operator|)
operator|,
literal|"+m"
operator|(
name|_q_value
operator|)
operator|:
literal|"r"
operator|(
name|expectedValue
operator|)
operator|,
literal|"r"
operator|(
name|newValue
operator|)
operator|:
literal|"memory"
operator|)
block|;
return|return
name|ret
operator|==
name|expectedValue
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|testAndSetRelease
name|Q_INLINE_TEMPLATE
name|bool
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|testAndSetRelease
argument_list|(
argument|T *expectedValue
argument_list|,
argument|T *newValue
argument_list|)
block|{
name|T
operator|*
name|ret
block|;
name|asm
specifier|volatile
operator|(
literal|"mov ar.ccv=%2\n"
literal|";;\n"
literal|"cmpxchg8.rel %0=%1,%3,ar.ccv\n"
operator|:
literal|"=r"
operator|(
name|ret
operator|)
operator|,
literal|"+m"
operator|(
name|_q_value
operator|)
operator|:
literal|"r"
operator|(
name|expectedValue
operator|)
operator|,
literal|"r"
operator|(
name|newValue
operator|)
operator|:
literal|"memory"
operator|)
block|;
return|return
name|ret
operator|==
name|expectedValue
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|fetchAndAddAcquire
name|Q_INLINE_TEMPLATE
name|T
operator|*
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|fetchAndAddAcquire
argument_list|(
argument|qptrdiff valueToAdd
argument_list|)
block|{
name|T
operator|*
name|ret
block|;
if|#
directive|if
operator|(
name|__GNUC__
operator|>=
literal|4
operator|)
comment|// We implement a fast fetch-and-add when we can
if|if
condition|(
name|__builtin_constant_p
argument_list|(
name|valueToAdd
argument_list|)
operator|&&
name|_q_ia64_fetchadd_immediate
argument_list|(
name|valueToAdd
operator|*
sizeof|sizeof
argument_list|(
name|T
argument_list|)
argument_list|)
condition|)
block|{
asm|asm
specifier|volatile
asm|("fetchadd8.acq  %0=%1,%2\n"                      : "=r" (ret), "+m" (_q_value)                      : "i" (valueToAdd * sizeof(T))                      : "memory");
return|return
name|ret
return|;
block|}
endif|#
directive|endif
comment|// otherwise, use a loop around test-and-set
name|ret
operator|=
name|_q_value
expr_stmt|;
end_expr_stmt
begin_asm
asm|asm
specifier|volatile
asm|("0:\n"                  "      mov           r9=%0\n"                  "      mov           ar.ccv=%0\n"                  "      add           %0=%0, %2\n"                  "      ;;\n"                  "      cmpxchg8.acq %0=%1,%0,ar.ccv\n"                  "      ;;\n"                  "      cmp.ne       p6,p0 = %0, r9\n"                  "(p6)  br.dptk      0b\n"                  "1:\n"                  : "+r" (ret), "+m" (_q_value)                  : "r" (valueToAdd * sizeof(T))                  : "r9", "p6", "memory");
end_asm
begin_return
return|return
name|ret
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|typename
name|T
operator|>
DECL|function|fetchAndAddRelease
name|Q_INLINE_TEMPLATE
name|T
operator|*
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|fetchAndAddRelease
argument_list|(
argument|qptrdiff valueToAdd
argument_list|)
block|{
name|T
operator|*
name|ret
block|;
if|#
directive|if
operator|(
name|__GNUC__
operator|>=
literal|4
operator|)
comment|// We implement a fast fetch-and-add when we can
if|if
condition|(
name|__builtin_constant_p
argument_list|(
name|valueToAdd
argument_list|)
operator|&&
name|_q_ia64_fetchadd_immediate
argument_list|(
name|valueToAdd
operator|*
sizeof|sizeof
argument_list|(
name|T
argument_list|)
argument_list|)
condition|)
block|{
asm|asm
specifier|volatile
asm|("fetchadd8.rel  %0=%1,%2\n"                      : "=r" (ret), "+m" (_q_value)                      : "i" (valueToAdd * sizeof(T))                      : "memory");
return|return
name|ret
return|;
block|}
endif|#
directive|endif
comment|// otherwise, use a loop around test-and-set
name|ret
operator|=
name|_q_value
expr_stmt|;
end_expr_stmt
begin_asm
asm|asm
specifier|volatile
asm|("0:\n"                  "      mov           r9=%0\n"                  "      mov           ar.ccv=%0\n"                  "      add           %0=%0, %2\n"                  "      ;;\n"                  "      cmpxchg8.rel %0=%1,%0,ar.ccv\n"                  "      ;;\n"                  "      cmp.ne       p6,p0 = %0, r9\n"                  "(p6)  br.dptk      0b\n"                  "1:\n"                  : "+r" (ret), "+m" (_q_value)                  : "r" (valueToAdd * sizeof(T))                  : "r9", "p6", "memory");
end_asm
begin_return
return|return
name|ret
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|typename
name|T
operator|>
DECL|function|fetchAndAddOrdered
name|Q_INLINE_TEMPLATE
name|T
operator|*
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|fetchAndAddOrdered
argument_list|(
argument|qptrdiff valueToAdd
argument_list|)
block|{
name|asm
specifier|volatile
operator|(
literal|"mf"
operator|::
operator|:
literal|"memory"
operator|)
block|;
return|return
name|fetchAndAddRelease
argument_list|(
name|valueToAdd
argument_list|)
return|;
block|}
end_expr_stmt
begin_elif
elif|#
directive|elif
name|defined
name|Q_CC_HPACC
end_elif
begin_expr_stmt
name|QT_BEGIN_INCLUDE_NAMESPACE
include|#
directive|include
file|<ia64/sys/inline.h>
name|QT_END_INCLUDE_NAMESPACE
DECL|macro|FENCE
define|#
directive|define
name|FENCE
value|(_Asm_fence)(_UP_CALL_FENCE | _UP_SYS_FENCE | _DOWN_CALL_FENCE | _DOWN_SYS_FENCE)
DECL|function|fetchAndStoreAcquire
specifier|inline
name|int
name|QBasicAtomicInt
operator|::
name|fetchAndStoreAcquire
argument_list|(
argument|int newValue
argument_list|)
block|{
return|return
name|_Asm_xchg
argument_list|(
operator|(
name|_Asm_sz
operator|)
name|_SZ_W
argument_list|,
operator|&
name|_q_value
argument_list|,
operator|(
name|unsigned
operator|)
name|newValue
argument_list|,
operator|(
name|_Asm_ldhint
operator|)
name|_LDHINT_NONE
argument_list|,
name|FENCE
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|fetchAndStoreRelease
specifier|inline
name|int
name|QBasicAtomicInt
operator|::
name|fetchAndStoreRelease
argument_list|(
argument|int newValue
argument_list|)
block|{
name|_Asm_mf
argument_list|(
name|FENCE
argument_list|)
block|;
return|return
name|_Asm_xchg
argument_list|(
operator|(
name|_Asm_sz
operator|)
name|_SZ_W
argument_list|,
operator|&
name|_q_value
argument_list|,
operator|(
name|unsigned
operator|)
name|newValue
argument_list|,
operator|(
name|_Asm_ldhint
operator|)
name|_LDHINT_NONE
argument_list|,
name|FENCE
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|testAndSetAcquire
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|testAndSetAcquire
argument_list|(
argument|int expectedValue
argument_list|,
argument|int newValue
argument_list|)
block|{
name|_Asm_mov_to_ar
argument_list|(
operator|(
name|_Asm_app_reg
operator|)
name|_AREG_CCV
argument_list|,
operator|(
name|unsigned
operator|)
name|expectedValue
argument_list|,
name|FENCE
argument_list|)
block|;
name|int
name|ret
operator|=
name|_Asm_cmpxchg
argument_list|(
operator|(
name|_Asm_sz
operator|)
name|_SZ_W
argument_list|,
operator|(
name|_Asm_sem
operator|)
name|_SEM_ACQ
argument_list|,
operator|&
name|_q_value
argument_list|,
operator|(
name|unsigned
operator|)
name|newValue
argument_list|,
operator|(
name|_Asm_ldhint
operator|)
name|_LDHINT_NONE
argument_list|)
block|;
return|return
name|ret
operator|==
name|expectedValue
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|testAndSetRelease
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|testAndSetRelease
argument_list|(
argument|int expectedValue
argument_list|,
argument|int newValue
argument_list|)
block|{
name|_Asm_mov_to_ar
argument_list|(
operator|(
name|_Asm_app_reg
operator|)
name|_AREG_CCV
argument_list|,
operator|(
name|unsigned
operator|)
name|expectedValue
argument_list|,
name|FENCE
argument_list|)
block|;
name|int
name|ret
operator|=
name|_Asm_cmpxchg
argument_list|(
operator|(
name|_Asm_sz
operator|)
name|_SZ_W
argument_list|,
operator|(
name|_Asm_sem
operator|)
name|_SEM_REL
argument_list|,
operator|&
name|_q_value
argument_list|,
name|newValue
argument_list|,
operator|(
name|_Asm_ldhint
operator|)
name|_LDHINT_NONE
argument_list|)
block|;
return|return
name|ret
operator|==
name|expectedValue
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|fetchAndAddAcquire
specifier|inline
name|int
name|QBasicAtomicInt
operator|::
name|fetchAndAddAcquire
argument_list|(
argument|int valueToAdd
argument_list|)
block|{
if|if
condition|(
name|valueToAdd
operator|==
literal|1
condition|)
return|return
name|_Asm_fetchadd
argument_list|(
operator|(
name|_Asm_fasz
operator|)
name|_FASZ_W
argument_list|,
operator|(
name|_Asm_sem
operator|)
name|_SEM_ACQ
argument_list|,
operator|&
name|_q_value
argument_list|,
literal|1
argument_list|,
operator|(
name|_Asm_ldhint
operator|)
name|_LDHINT_NONE
argument_list|,
name|FENCE
argument_list|)
return|;
elseif|else
if|if
condition|(
name|valueToAdd
operator|==
operator|-
literal|1
condition|)
return|return
name|_Asm_fetchadd
argument_list|(
operator|(
name|_Asm_fasz
operator|)
name|_FASZ_W
argument_list|,
operator|(
name|_Asm_sem
operator|)
name|_SEM_ACQ
argument_list|,
operator|&
name|_q_value
argument_list|,
operator|-
literal|1
argument_list|,
operator|(
name|_Asm_ldhint
operator|)
name|_LDHINT_NONE
argument_list|,
name|FENCE
argument_list|)
return|;
comment|// implement the test-and-set loop
specifier|register
name|int
name|old
operator|,
name|ret
expr_stmt|;
end_expr_stmt
begin_do
do|do
block|{
name|old
operator|=
name|_q_value
expr_stmt|;
name|_Asm_mov_to_ar
argument_list|(
operator|(
name|_Asm_app_reg
operator|)
name|_AREG_CCV
argument_list|,
operator|(
name|unsigned
operator|)
name|old
argument_list|,
name|FENCE
argument_list|)
expr_stmt|;
name|ret
operator|=
name|_Asm_cmpxchg
argument_list|(
operator|(
name|_Asm_sz
operator|)
name|_SZ_W
argument_list|,
operator|(
name|_Asm_sem
operator|)
name|_SEM_ACQ
argument_list|,
operator|&
name|_q_value
argument_list|,
name|old
operator|+
name|valueToAdd
argument_list|,
operator|(
name|_Asm_ldhint
operator|)
name|_LDHINT_NONE
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|ret
operator|!=
name|old
condition|)
do|;
end_do
begin_return
return|return
name|old
return|;
end_return
begin_expr_stmt
unit|}  inline
DECL|function|fetchAndAddRelease
name|int
name|QBasicAtomicInt
operator|::
name|fetchAndAddRelease
argument_list|(
argument|int valueToAdd
argument_list|)
block|{
if|if
condition|(
name|valueToAdd
operator|==
literal|1
condition|)
return|return
name|_Asm_fetchadd
argument_list|(
operator|(
name|_Asm_fasz
operator|)
name|_FASZ_W
argument_list|,
operator|(
name|_Asm_sem
operator|)
name|_SEM_REL
argument_list|,
operator|&
name|_q_value
argument_list|,
literal|1
argument_list|,
operator|(
name|_Asm_ldhint
operator|)
name|_LDHINT_NONE
argument_list|,
name|FENCE
argument_list|)
return|;
elseif|else
if|if
condition|(
name|valueToAdd
operator|==
operator|-
literal|1
condition|)
return|return
name|_Asm_fetchadd
argument_list|(
operator|(
name|_Asm_fasz
operator|)
name|_FASZ_W
argument_list|,
operator|(
name|_Asm_sem
operator|)
name|_SEM_REL
argument_list|,
operator|&
name|_q_value
argument_list|,
operator|-
literal|1
argument_list|,
operator|(
name|_Asm_ldhint
operator|)
name|_LDHINT_NONE
argument_list|,
name|FENCE
argument_list|)
return|;
comment|// implement the test-and-set loop
specifier|register
name|int
name|old
operator|,
name|ret
expr_stmt|;
end_expr_stmt
begin_do
do|do
block|{
name|old
operator|=
name|_q_value
expr_stmt|;
name|_Asm_mov_to_ar
argument_list|(
operator|(
name|_Asm_app_reg
operator|)
name|_AREG_CCV
argument_list|,
operator|(
name|unsigned
operator|)
name|old
argument_list|,
name|FENCE
argument_list|)
expr_stmt|;
name|ret
operator|=
name|_Asm_cmpxchg
argument_list|(
operator|(
name|_Asm_sz
operator|)
name|_SZ_W
argument_list|,
operator|(
name|_Asm_sem
operator|)
name|_SEM_REL
argument_list|,
operator|&
name|_q_value
argument_list|,
name|old
operator|+
name|valueToAdd
argument_list|,
operator|(
name|_Asm_ldhint
operator|)
name|_LDHINT_NONE
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|ret
operator|!=
name|old
condition|)
do|;
end_do
begin_return
return|return
name|old
return|;
end_return
begin_expr_stmt
unit|}  inline
DECL|function|fetchAndAddOrdered
name|int
name|QBasicAtomicInt
operator|::
name|fetchAndAddOrdered
argument_list|(
argument|int valueToAdd
argument_list|)
block|{
name|_Asm_mf
argument_list|(
name|FENCE
argument_list|)
block|;
return|return
name|fetchAndAddAcquire
argument_list|(
name|valueToAdd
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|ref
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|ref
argument_list|()
block|{
return|return
operator|(
name|int
operator|)
name|_Asm_fetchadd
argument_list|(
operator|(
name|_Asm_fasz
operator|)
name|_FASZ_W
argument_list|,
operator|(
name|_Asm_sem
operator|)
name|_SEM_ACQ
argument_list|,
operator|&
name|_q_value
argument_list|,
literal|1
argument_list|,
operator|(
name|_Asm_ldhint
operator|)
name|_LDHINT_NONE
argument_list|,
name|FENCE
argument_list|)
operator|!=
operator|-
literal|1
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|deref
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|deref
argument_list|()
block|{
return|return
operator|(
name|int
operator|)
name|_Asm_fetchadd
argument_list|(
operator|(
name|_Asm_fasz
operator|)
name|_FASZ_W
argument_list|,
operator|(
name|_Asm_sem
operator|)
name|_SEM_REL
argument_list|,
operator|&
name|_q_value
argument_list|,
operator|-
literal|1
argument_list|,
operator|(
name|_Asm_ldhint
operator|)
name|_LDHINT_NONE
argument_list|,
name|FENCE
argument_list|)
operator|!=
literal|1
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|fetchAndStoreAcquire
name|Q_INLINE_TEMPLATE
name|T
operator|*
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|fetchAndStoreAcquire
argument_list|(
argument|T *newValue
argument_list|)
block|{
ifdef|#
directive|ifdef
name|__LP64__
return|return
operator|(
name|T
operator|*
operator|)
name|_Asm_xchg
argument_list|(
operator|(
name|_Asm_sz
operator|)
name|_SZ_D
argument_list|,
operator|&
name|_q_value
argument_list|,
operator|(
name|quint64
operator|)
name|newValue
argument_list|,
operator|(
name|_Asm_ldhint
operator|)
name|_LDHINT_NONE
argument_list|,
name|FENCE
argument_list|)
return|;
end_expr_stmt
begin_else
else|#
directive|else
end_else
begin_return
return|return
operator|(
name|T
operator|*
operator|)
name|_Asm_xchg
argument_list|(
operator|(
name|_Asm_sz
operator|)
name|_SZ_W
argument_list|,
operator|&
name|_q_value
argument_list|,
operator|(
name|quint32
operator|)
name|newValue
argument_list|,
operator|(
name|_Asm_ldhint
operator|)
name|_LDHINT_NONE
argument_list|,
name|FENCE
argument_list|)
return|;
end_return
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
unit|}  template
operator|<
name|typename
name|T
operator|>
DECL|function|fetchAndStoreRelease
name|Q_INLINE_TEMPLATE
name|T
operator|*
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|fetchAndStoreRelease
argument_list|(
argument|T *newValue
argument_list|)
block|{
name|_Asm_mf
argument_list|(
name|FENCE
argument_list|)
block|;
return|return
name|fetchAndStoreAcquire
argument_list|(
name|newValue
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|testAndSetAcquire
name|Q_INLINE_TEMPLATE
name|bool
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|testAndSetAcquire
argument_list|(
argument|T *expectedValue
argument_list|,
argument|T *newValue
argument_list|)
block|{
ifdef|#
directive|ifdef
name|__LP64__
name|_Asm_mov_to_ar
argument_list|(
operator|(
name|_Asm_app_reg
operator|)
name|_AREG_CCV
argument_list|,
operator|(
name|quint64
operator|)
name|expectedValue
argument_list|,
name|FENCE
argument_list|)
block|;
name|T
operator|*
name|ret
operator|=
operator|(
name|T
operator|*
operator|)
name|_Asm_cmpxchg
argument_list|(
operator|(
name|_Asm_sz
operator|)
name|_SZ_D
argument_list|,
operator|(
name|_Asm_sem
operator|)
name|_SEM_ACQ
argument_list|,
operator|&
name|_q_value
argument_list|,
operator|(
name|quint64
operator|)
name|newValue
argument_list|,
operator|(
name|_Asm_ldhint
operator|)
name|_LDHINT_NONE
argument_list|)
block|;
else|#
directive|else
name|_Asm_mov_to_ar
argument_list|(
operator|(
name|_Asm_app_reg
operator|)
name|_AREG_CCV
argument_list|,
operator|(
name|quint32
operator|)
name|expectedValue
argument_list|,
name|FENCE
argument_list|)
block|;
name|T
operator|*
name|ret
operator|=
operator|(
name|T
operator|*
operator|)
name|_Asm_cmpxchg
argument_list|(
operator|(
name|_Asm_sz
operator|)
name|_SZ_W
argument_list|,
operator|(
name|_Asm_sem
operator|)
name|_SEM_ACQ
argument_list|,
operator|&
name|_q_value
argument_list|,
operator|(
name|quint32
operator|)
name|newValue
argument_list|,
operator|(
name|_Asm_ldhint
operator|)
name|_LDHINT_NONE
argument_list|)
block|;
endif|#
directive|endif
return|return
name|ret
operator|==
name|expectedValue
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|testAndSetRelease
name|Q_INLINE_TEMPLATE
name|bool
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|testAndSetRelease
argument_list|(
argument|T *expectedValue
argument_list|,
argument|T *newValue
argument_list|)
block|{
ifdef|#
directive|ifdef
name|__LP64__
name|_Asm_mov_to_ar
argument_list|(
operator|(
name|_Asm_app_reg
operator|)
name|_AREG_CCV
argument_list|,
operator|(
name|quint64
operator|)
name|expectedValue
argument_list|,
name|FENCE
argument_list|)
block|;
name|T
operator|*
name|ret
operator|=
operator|(
name|T
operator|*
operator|)
name|_Asm_cmpxchg
argument_list|(
operator|(
name|_Asm_sz
operator|)
name|_SZ_D
argument_list|,
operator|(
name|_Asm_sem
operator|)
name|_SEM_REL
argument_list|,
operator|&
name|_q_value
argument_list|,
operator|(
name|quint64
operator|)
name|newValue
argument_list|,
operator|(
name|_Asm_ldhint
operator|)
name|_LDHINT_NONE
argument_list|)
block|;
else|#
directive|else
name|_Asm_mov_to_ar
argument_list|(
operator|(
name|_Asm_app_reg
operator|)
name|_AREG_CCV
argument_list|,
operator|(
name|quint32
operator|)
name|expectedValue
argument_list|,
name|FENCE
argument_list|)
block|;
name|T
operator|*
name|ret
operator|=
operator|(
name|T
operator|*
operator|)
name|_Asm_cmpxchg
argument_list|(
operator|(
name|_Asm_sz
operator|)
name|_SZ_W
argument_list|,
operator|(
name|_Asm_sem
operator|)
name|_SEM_REL
argument_list|,
operator|&
name|_q_value
argument_list|,
operator|(
name|quint32
operator|)
name|newValue
argument_list|,
operator|(
name|_Asm_ldhint
operator|)
name|_LDHINT_NONE
argument_list|)
block|;
endif|#
directive|endif
return|return
name|ret
operator|==
name|expectedValue
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|fetchAndAddAcquire
name|Q_INLINE_TEMPLATE
name|T
operator|*
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|fetchAndAddAcquire
argument_list|(
argument|qptrdiff valueToAdd
argument_list|)
block|{
comment|// implement the test-and-set loop
specifier|register
name|T
operator|*
name|old
block|,
operator|*
name|ret
block|;
do|do
block|{
name|old
operator|=
name|_q_value
expr_stmt|;
ifdef|#
directive|ifdef
name|__LP64__
name|_Asm_mov_to_ar
argument_list|(
operator|(
name|_Asm_app_reg
operator|)
name|_AREG_CCV
argument_list|,
operator|(
name|quint64
operator|)
name|old
argument_list|,
name|FENCE
argument_list|)
expr_stmt|;
name|ret
operator|=
operator|(
name|T
operator|*
operator|)
name|_Asm_cmpxchg
argument_list|(
operator|(
name|_Asm_sz
operator|)
name|_SZ_D
argument_list|,
operator|(
name|_Asm_sem
operator|)
name|_SEM_ACQ
argument_list|,
operator|&
name|_q_value
argument_list|,
call|(
name|quint64
call|)
argument_list|(
name|old
operator|+
name|valueToAdd
argument_list|)
argument_list|,
operator|(
name|_Asm_ldhint
operator|)
name|_LDHINT_NONE
argument_list|)
expr_stmt|;
else|#
directive|else
name|_Asm_mov_to_ar
argument_list|(
operator|(
name|_Asm_app_reg
operator|)
name|_AREG_CCV
argument_list|,
operator|(
name|quint32
operator|)
name|old
argument_list|,
name|FENCE
argument_list|)
expr_stmt|;
name|ret
operator|=
operator|(
name|T
operator|*
operator|)
name|_Asm_cmpxchg
argument_list|(
operator|(
name|_Asm_sz
operator|)
name|_SZ_W
argument_list|,
operator|(
name|_Asm_sem
operator|)
name|_SEM_ACQ
argument_list|,
operator|&
name|_q_value
argument_list|,
call|(
name|quint32
call|)
argument_list|(
name|old
operator|+
name|valueToAdd
argument_list|)
argument_list|,
operator|(
name|_Asm_ldhint
operator|)
name|_LDHINT_NONE
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_expr_stmt
begin_while
while|while
condition|(
name|old
operator|!=
name|ret
condition|)
empty_stmt|;
end_while
begin_return
return|return
name|old
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|typename
name|T
operator|>
DECL|function|fetchAndAddRelease
name|Q_INLINE_TEMPLATE
name|T
operator|*
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|fetchAndAddRelease
argument_list|(
argument|qptrdiff valueToAdd
argument_list|)
block|{
comment|// implement the test-and-set loop
specifier|register
name|T
operator|*
name|old
block|,
operator|*
name|ret
block|;
do|do
block|{
name|old
operator|=
name|_q_value
expr_stmt|;
ifdef|#
directive|ifdef
name|__LP64__
name|_Asm_mov_to_ar
argument_list|(
operator|(
name|_Asm_app_reg
operator|)
name|_AREG_CCV
argument_list|,
operator|(
name|quint64
operator|)
name|old
argument_list|,
name|FENCE
argument_list|)
expr_stmt|;
name|ret
operator|=
operator|(
name|T
operator|*
operator|)
name|_Asm_cmpxchg
argument_list|(
operator|(
name|_Asm_sz
operator|)
name|_SZ_D
argument_list|,
operator|(
name|_Asm_sem
operator|)
name|_SEM_REL
argument_list|,
operator|&
name|_q_value
argument_list|,
call|(
name|quint64
call|)
argument_list|(
name|old
operator|+
name|valueToAdd
argument_list|)
argument_list|,
operator|(
name|_Asm_ldhint
operator|)
name|_LDHINT_NONE
argument_list|)
expr_stmt|;
else|#
directive|else
name|_Asm_mov_to_ar
argument_list|(
operator|(
name|_Asm_app_reg
operator|)
name|_AREG_CCV
argument_list|,
operator|(
name|quint32
operator|)
name|old
argument_list|,
name|FENCE
argument_list|)
expr_stmt|;
name|ret
operator|=
operator|(
name|T
operator|*
operator|)
name|_Asm_cmpxchg
argument_list|(
operator|(
name|_Asm_sz
operator|)
name|_SZ_W
argument_list|,
operator|(
name|_Asm_sem
operator|)
name|_SEM_REL
argument_list|,
operator|&
name|_q_value
argument_list|,
call|(
name|quint32
call|)
argument_list|(
name|old
operator|+
name|valueToAdd
argument_list|)
argument_list|,
operator|(
name|_Asm_ldhint
operator|)
name|_LDHINT_NONE
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_expr_stmt
begin_while
while|while
condition|(
name|old
operator|!=
name|ret
condition|)
empty_stmt|;
end_while
begin_return
return|return
name|old
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|typename
name|T
operator|>
DECL|function|fetchAndAddOrdered
name|Q_INLINE_TEMPLATE
name|T
operator|*
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|fetchAndAddOrdered
argument_list|(
argument|qptrdiff valueToAdd
argument_list|)
block|{
name|_Asm_mf
argument_list|(
name|FENCE
argument_list|)
block|;
return|return
name|fetchAndAddAcquire
argument_list|(
name|valueToAdd
argument_list|)
return|;
block|}
end_expr_stmt
begin_else
else|#
directive|else
end_else
begin_extern
extern|extern
literal|"C"
block|{
name|Q_CORE_EXPORT
name|int
name|q_atomic_test_and_set_int
parameter_list|(
specifier|volatile
name|int
modifier|*
name|ptr
parameter_list|,
name|int
name|expected
parameter_list|,
name|int
name|newval
parameter_list|)
function_decl|;
name|Q_CORE_EXPORT
name|int
name|q_atomic_test_and_set_ptr
parameter_list|(
specifier|volatile
name|void
modifier|*
name|ptr
parameter_list|,
name|void
modifier|*
name|expected
parameter_list|,
name|void
modifier|*
name|newval
parameter_list|)
function_decl|;
block|}
end_extern
begin_comment
comment|// extern "C"
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
DECL|function|testAndSetRelaxed
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|testAndSetRelaxed
argument_list|(
argument|int expectedValue
argument_list|,
argument|int newValue
argument_list|)
block|{
return|return
name|testAndSetAcquire
argument_list|(
name|expectedValue
argument_list|,
name|newValue
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|testAndSetOrdered
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|testAndSetOrdered
argument_list|(
argument|int expectedValue
argument_list|,
argument|int newValue
argument_list|)
block|{
return|return
name|testAndSetAcquire
argument_list|(
name|expectedValue
argument_list|,
name|newValue
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|testAndSetRelaxed
name|Q_INLINE_TEMPLATE
name|bool
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|testAndSetRelaxed
argument_list|(
argument|T *expectedValue
argument_list|,
argument|T *newValue
argument_list|)
block|{
return|return
name|testAndSetAcquire
argument_list|(
name|expectedValue
argument_list|,
name|newValue
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|testAndSetOrdered
name|Q_INLINE_TEMPLATE
name|bool
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|testAndSetOrdered
argument_list|(
argument|T *expectedValue
argument_list|,
argument|T *newValue
argument_list|)
block|{
return|return
name|testAndSetAcquire
argument_list|(
name|expectedValue
argument_list|,
name|newValue
argument_list|)
return|;
block|}
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Q_CC_INTEL
end_comment
begin_expr_stmt
DECL|function|fetchAndStoreRelaxed
specifier|inline
name|int
name|QBasicAtomicInt
operator|::
name|fetchAndStoreRelaxed
argument_list|(
argument|int newValue
argument_list|)
block|{
return|return
name|fetchAndStoreAcquire
argument_list|(
name|newValue
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|fetchAndStoreOrdered
specifier|inline
name|int
name|QBasicAtomicInt
operator|::
name|fetchAndStoreOrdered
argument_list|(
argument|int newValue
argument_list|)
block|{
return|return
name|fetchAndStoreRelease
argument_list|(
name|newValue
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|fetchAndAddRelaxed
specifier|inline
name|int
name|QBasicAtomicInt
operator|::
name|fetchAndAddRelaxed
argument_list|(
argument|int valueToAdd
argument_list|)
block|{
return|return
name|fetchAndAddAcquire
argument_list|(
name|valueToAdd
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|fetchAndStoreRelaxed
name|Q_INLINE_TEMPLATE
name|T
operator|*
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|fetchAndStoreRelaxed
argument_list|(
argument|T *newValue
argument_list|)
block|{
return|return
name|fetchAndStoreAcquire
argument_list|(
name|newValue
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|fetchAndStoreOrdered
name|Q_INLINE_TEMPLATE
name|T
operator|*
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|fetchAndStoreOrdered
argument_list|(
argument|T *newValue
argument_list|)
block|{
return|return
name|fetchAndStoreRelaxed
argument_list|(
name|newValue
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|fetchAndAddRelaxed
name|Q_INLINE_TEMPLATE
name|T
operator|*
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|fetchAndAddRelaxed
argument_list|(
argument|qptrdiff valueToAdd
argument_list|)
block|{
return|return
name|fetchAndAddAcquire
argument_list|(
name|valueToAdd
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|QT_END_NAMESPACE
name|QT_END_HEADER
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QATOMIC_IA64_H
end_comment
end_unit
