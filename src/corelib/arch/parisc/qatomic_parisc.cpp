begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtCore/qglobal.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qhash.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
name|QT_USE_NAMESPACE
DECL|macro|UNLOCKED
define|#
directive|define
name|UNLOCKED
value|{-1,-1,-1,-1}
DECL|macro|UNLOCKED2
define|#
directive|define
name|UNLOCKED2
value|UNLOCKED,UNLOCKED
DECL|macro|UNLOCKED4
define|#
directive|define
name|UNLOCKED4
value|UNLOCKED2,UNLOCKED2
DECL|macro|UNLOCKED8
define|#
directive|define
name|UNLOCKED8
value|UNLOCKED4,UNLOCKED4
DECL|macro|UNLOCKED16
define|#
directive|define
name|UNLOCKED16
value|UNLOCKED8,UNLOCKED8
DECL|macro|UNLOCKED32
define|#
directive|define
name|UNLOCKED32
value|UNLOCKED16,UNLOCKED16
DECL|macro|UNLOCKED64
define|#
directive|define
name|UNLOCKED64
value|UNLOCKED32,UNLOCKED32
DECL|macro|UNLOCKED128
define|#
directive|define
name|UNLOCKED128
value|UNLOCKED64,UNLOCKED64
DECL|macro|UNLOCKED256
define|#
directive|define
name|UNLOCKED256
value|UNLOCKED128,UNLOCKED128
comment|// use a 4k page for locks
DECL|variable|locks
specifier|static
name|int
name|locks
index|[
literal|256
index|]
index|[
literal|4
index|]
init|=
block|{
name|UNLOCKED256
block|}
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|getLock
name|int
modifier|*
name|getLock
parameter_list|(
specifier|volatile
name|void
modifier|*
name|addr
parameter_list|)
block|{
return|return
name|locks
index|[
name|qHash
argument_list|(
cast|const_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
name|addr
argument_list|)
argument_list|)
operator|%
literal|256
index|]
return|;
block|}
end_function
begin_function
DECL|function|align16
specifier|static
name|int
modifier|*
name|align16
parameter_list|(
name|int
modifier|*
name|lock
parameter_list|)
block|{
name|ulong
name|off
init|=
operator|(
operator|(
operator|(
name|ulong
operator|)
name|lock
operator|)
operator|%
literal|16
operator|)
decl_stmt|;
return|return
name|off
condition|?
operator|(
name|int
operator|*
operator|)
operator|(
name|ulong
argument_list|(
name|lock
argument_list|)
operator|+
literal|16
operator|-
name|off
operator|)
else|:
name|lock
return|;
block|}
end_function
begin_extern
extern|extern
literal|"C"
block|{
name|int
name|q_ldcw
parameter_list|(
specifier|volatile
name|int
modifier|*
name|addr
parameter_list|)
function_decl|;
DECL|function|q_atomic_lock
name|void
name|q_atomic_lock
parameter_list|(
name|int
modifier|*
name|lock
parameter_list|)
block|{
comment|// ldcw requires a 16-byte aligned address
specifier|volatile
name|int
modifier|*
name|x
init|=
name|align16
argument_list|(
name|lock
argument_list|)
decl_stmt|;
while|while
condition|(
name|q_ldcw
argument_list|(
name|x
argument_list|)
operator|==
literal|0
condition|)
empty_stmt|;
block|}
DECL|function|q_atomic_unlock
name|void
name|q_atomic_unlock
parameter_list|(
name|int
modifier|*
name|lock
parameter_list|)
block|{
name|lock
index|[
literal|0
index|]
operator|=
name|lock
index|[
literal|1
index|]
operator|=
name|lock
index|[
literal|2
index|]
operator|=
name|lock
index|[
literal|3
index|]
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
end_extern
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
