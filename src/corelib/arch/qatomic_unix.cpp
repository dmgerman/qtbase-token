begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qplatformdefs.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/qatomic.h>
end_include
begin_comment
comment|// If operating system, processor, and compiler detection fails, we fall back
end_comment
begin_comment
comment|// to this generic, out-of-line implementation
end_comment
begin_if
if|#
directive|if
name|defined
argument_list|(
name|QATOMIC_UNIX_H
argument_list|)
end_if
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|qAtomicMutex
specifier|static
name|pthread_mutex_t
name|qAtomicMutex
init|=
name|PTHREAD_MUTEX_INITIALIZER
decl_stmt|;
end_decl_stmt
begin_function
name|Q_CORE_EXPORT
name|bool
name|QAtomicOps
argument_list|<
name|int
argument_list|>
operator|::
name|testAndSetRelaxed
parameter_list|(
name|int
modifier|&
name|_q_value
parameter_list|,
name|int
name|expectedValue
parameter_list|,
name|int
name|newValue
parameter_list|)
name|Q_DECL_NOTHROW
block|{
name|bool
name|returnValue
init|=
literal|false
decl_stmt|;
name|pthread_mutex_lock
argument_list|(
operator|&
name|qAtomicMutex
argument_list|)
expr_stmt|;
if|if
condition|(
name|_q_value
operator|==
name|expectedValue
condition|)
block|{
name|_q_value
operator|=
name|newValue
expr_stmt|;
name|returnValue
operator|=
literal|true
expr_stmt|;
block|}
name|pthread_mutex_unlock
argument_list|(
operator|&
name|qAtomicMutex
argument_list|)
expr_stmt|;
return|return
name|returnValue
return|;
block|}
end_function
begin_function
name|Q_CORE_EXPORT
name|bool
name|QAtomicOps
argument_list|<
name|long
name|long
argument_list|>
operator|::
name|testAndSetRelaxed
parameter_list|(
name|Type
modifier|&
name|_q_value
parameter_list|,
name|Type
name|expectedValue
parameter_list|,
name|Type
name|newValue
parameter_list|)
name|Q_DECL_NOTHROW
block|{
name|bool
name|returnValue
init|=
literal|false
decl_stmt|;
name|pthread_mutex_lock
argument_list|(
operator|&
name|qAtomicMutex
argument_list|)
expr_stmt|;
if|if
condition|(
name|_q_value
operator|==
name|expectedValue
condition|)
block|{
name|_q_value
operator|=
name|newValue
expr_stmt|;
name|returnValue
operator|=
literal|true
expr_stmt|;
block|}
name|pthread_mutex_unlock
argument_list|(
operator|&
name|qAtomicMutex
argument_list|)
expr_stmt|;
return|return
name|returnValue
return|;
block|}
end_function
begin_function
name|Q_CORE_EXPORT
name|bool
name|QAtomicOps
argument_list|<
name|void
modifier|*
argument_list|>
operator|::
name|testAndSetRelaxed
parameter_list|(
name|void
modifier|*
modifier|&
name|_q_value
parameter_list|,
name|void
modifier|*
name|expectedValue
parameter_list|,
name|void
modifier|*
name|newValue
parameter_list|)
name|Q_DECL_NOTHROW
block|{
name|bool
name|returnValue
init|=
literal|false
decl_stmt|;
name|pthread_mutex_lock
argument_list|(
operator|&
name|qAtomicMutex
argument_list|)
expr_stmt|;
if|if
condition|(
name|_q_value
operator|==
name|expectedValue
condition|)
block|{
name|_q_value
operator|=
name|newValue
expr_stmt|;
name|returnValue
operator|=
literal|true
expr_stmt|;
block|}
name|pthread_mutex_unlock
argument_list|(
operator|&
name|qAtomicMutex
argument_list|)
expr_stmt|;
return|return
name|returnValue
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QATOMIC_UNIX_H
end_comment
end_unit
