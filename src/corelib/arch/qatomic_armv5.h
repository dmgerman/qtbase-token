begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Copyright (C) 2011 Thiago Macieira<thiago@kde.org> ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QATOMIC_ARMV5_H
end_ifndef
begin_define
DECL|macro|QATOMIC_ARMV5_H
define|#
directive|define
name|QATOMIC_ARMV5_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qgenericatomic.h>
end_include
begin_expr_stmt
name|QT_BEGIN_NAMESPACE
if|#
directive|if
literal|0
comment|// silence syncqt warnings
expr|QT_END_NAMESPACE
pragma|#
directive|pragma
name|qt_sync_skip_header_check
pragma|#
directive|pragma
name|qt_sync_stop_processing
endif|#
directive|endif
DECL|macro|Q_ATOMIC_INT32_IS_SUPPORTED
define|#
directive|define
name|Q_ATOMIC_INT32_IS_SUPPORTED
DECL|macro|Q_ATOMIC_INT_REFERENCE_COUNTING_IS_NOT_NATIVE
define|#
directive|define
name|Q_ATOMIC_INT_REFERENCE_COUNTING_IS_NOT_NATIVE
DECL|macro|Q_ATOMIC_INT_TEST_AND_SET_IS_NOT_NATIVE
define|#
directive|define
name|Q_ATOMIC_INT_TEST_AND_SET_IS_NOT_NATIVE
DECL|macro|Q_ATOMIC_INT_FETCH_AND_STORE_IS_ALWAYS_NATIVE
define|#
directive|define
name|Q_ATOMIC_INT_FETCH_AND_STORE_IS_ALWAYS_NATIVE
DECL|macro|Q_ATOMIC_INT_FETCH_AND_STORE_IS_WAIT_FREE
define|#
directive|define
name|Q_ATOMIC_INT_FETCH_AND_STORE_IS_WAIT_FREE
DECL|macro|Q_ATOMIC_INT_FETCH_AND_ADD_IS_NOT_NATIVE
define|#
directive|define
name|Q_ATOMIC_INT_FETCH_AND_ADD_IS_NOT_NATIVE
DECL|macro|Q_ATOMIC_POINTER_TEST_AND_SET_IS_NOT_NATIVE
define|#
directive|define
name|Q_ATOMIC_POINTER_TEST_AND_SET_IS_NOT_NATIVE
DECL|macro|Q_ATOMIC_POINTER_FETCH_AND_STORE_IS_ALWAYS_NATIVE
define|#
directive|define
name|Q_ATOMIC_POINTER_FETCH_AND_STORE_IS_ALWAYS_NATIVE
DECL|macro|Q_ATOMIC_POINTER_FETCH_AND_STORE_IS_WAIT_FREE
define|#
directive|define
name|Q_ATOMIC_POINTER_FETCH_AND_STORE_IS_WAIT_FREE
DECL|macro|Q_ATOMIC_POINTER_FETCH_AND_ADD_IS_NOT_NATIVE
define|#
directive|define
name|Q_ATOMIC_POINTER_FETCH_AND_ADD_IS_NOT_NATIVE
ifdef|#
directive|ifdef
name|QT_NO_ARM_EABI
error|#
directive|error
literal|"Sorry, ARM without EABI is no longer supported"
endif|#
directive|endif
ifndef|#
directive|ifndef
name|Q_OS_LINUX
error|#
directive|error
literal|"Qt is misconfigured: this ARMv5 implementation is only possible on Linux"
endif|#
directive|endif
DECL|struct|size
name|template
operator|<
name|int
name|size
operator|>
expr|struct
name|QBasicAtomicOps
operator|:
name|QGenericAtomicOps
operator|<
name|QBasicAtomicOps
operator|<
name|size
operator|>
expr|>
block|{
comment|// kernel places a restartable cmpxchg implementation at a fixed address
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
name|int
name|_q_cmpxchg
argument_list|(
argument|T oldval
argument_list|,
argument|T newval
argument_list|,
argument|volatile T *ptr
argument_list|)
name|Q_DECL_NOTHROW
block|{
typedef|typedef
name|int
function_decl|(
modifier|*
name|kernel_cmpxchg_t
function_decl|)
parameter_list|(
name|T
name|oldval
parameter_list|,
name|T
name|newval
parameter_list|,
specifier|volatile
name|T
modifier|*
name|ptr
parameter_list|)
function_decl|;
name|kernel_cmpxchg_t
name|kernel_cmpxchg
operator|=
operator|*
name|reinterpret_cast
operator|<
name|kernel_cmpxchg_t
operator|>
operator|(
literal|0xffff0fc0
operator|)
block|;
return|return
name|kernel_cmpxchg
argument_list|(
name|oldval
argument_list|,
name|newval
argument_list|,
name|ptr
argument_list|)
return|;
block|}
end_expr_stmt
begin_function
specifier|static
name|void
name|_q_dmb
parameter_list|()
function|Q_DECL_NOTHROW
block|{
typedef|typedef
name|void
function_decl|(
modifier|*
name|kernel_dmb_t
function_decl|)
parameter_list|()
function_decl|;
name|kernel_dmb_t
name|kernel_dmb
init|=
operator|*
name|reinterpret_cast
operator|<
name|kernel_dmb_t
operator|>
operator|(
literal|0xffff0fa0
operator|)
decl_stmt|;
name|kernel_dmb
argument_list|()
expr_stmt|;
block|}
end_function
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
name|void
name|orderedMemoryFence
argument_list|(
argument|const T&
argument_list|)
name|Q_DECL_NOTHROW
block|{
name|_q_dmb
argument_list|()
block|; }
DECL|member|Q_DECL_NOTHROW
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
name|bool
name|ref
argument_list|(
argument|T&_q_value
argument_list|)
name|Q_DECL_NOTHROW
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|member|Q_DECL_NOTHROW
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
name|bool
name|deref
argument_list|(
argument|T&_q_value
argument_list|)
name|Q_DECL_NOTHROW
expr_stmt|;
end_expr_stmt
begin_function
specifier|static
name|Q_DECL_CONSTEXPR
name|bool
name|isTestAndSetNative
parameter_list|()
function|Q_DECL_NOTHROW
block|{
return|return
name|false
return|;
block|}
end_function
begin_function
specifier|static
name|Q_DECL_CONSTEXPR
name|bool
name|isTestAndSetWaitFree
parameter_list|()
function|Q_DECL_NOTHROW
block|{
return|return
name|false
return|;
block|}
end_function
begin_expr_stmt
DECL|member|Q_DECL_NOTHROW
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
name|bool
name|testAndSetRelaxed
argument_list|(
argument|T&_q_value
argument_list|,
argument|T expectedValue
argument_list|,
argument|T newValue
argument_list|)
name|Q_DECL_NOTHROW
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|member|Q_DECL_NOTHROW
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
name|bool
name|testAndSetRelaxed
argument_list|(
argument|T&_q_value
argument_list|,
argument|T expectedValue
argument_list|,
argument|T newValue
argument_list|,
argument|T *currentValue
argument_list|)
name|Q_DECL_NOTHROW
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|member|Q_DECL_NOTHROW
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
name|T
name|fetchAndStoreRelaxed
argument_list|(
argument|T&_q_value
argument_list|,
argument|T newValue
argument_list|)
name|Q_DECL_NOTHROW
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
DECL|member|Q_DECL_NOTHROW
name|T
name|fetchAndAddRelaxed
argument_list|(
argument|T&_q_value
argument_list|,
argument|typename QAtomicAdditiveType<T>::AdditiveT valueToAdd
argument_list|)
name|Q_DECL_NOTHROW
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|member|Q_DECL_NOTHROW
unit|};
DECL|function|sizeof
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|QAtomicOps
operator|:
name|QBasicAtomicOps
operator|<
sizeof|sizeof
argument_list|(
name|T
argument_list|)
operator|>
block|{
typedef|typedef
name|T
name|Type
typedef|;
block|}
end_expr_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_expr_stmt
name|template
operator|<
operator|>
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|bool
name|QBasicAtomicOps
operator|<
literal|4
operator|>
operator|::
name|ref
argument_list|(
argument|T&_q_value
argument_list|)
name|Q_DECL_NOTHROW
block|{
name|T
name|originalValue
block|;
name|T
name|newValue
block|;
do|do
block|{
name|originalValue
operator|=
name|_q_value
expr_stmt|;
name|newValue
operator|=
name|originalValue
operator|+
literal|1
expr_stmt|;
block|}
end_expr_stmt
begin_while
while|while
condition|(
name|_q_cmpxchg
argument_list|(
name|originalValue
argument_list|,
name|newValue
argument_list|,
operator|&
name|_q_value
argument_list|)
operator|!=
literal|0
condition|)
empty_stmt|;
end_while
begin_return
return|return
name|newValue
operator|!=
literal|0
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
operator|>
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|bool
name|QBasicAtomicOps
operator|<
literal|4
operator|>
operator|::
name|deref
argument_list|(
argument|T&_q_value
argument_list|)
name|Q_DECL_NOTHROW
block|{
name|T
name|originalValue
block|;
name|T
name|newValue
block|;
do|do
block|{
name|originalValue
operator|=
name|_q_value
expr_stmt|;
name|newValue
operator|=
name|originalValue
operator|-
literal|1
expr_stmt|;
block|}
end_expr_stmt
begin_while
while|while
condition|(
name|_q_cmpxchg
argument_list|(
name|originalValue
argument_list|,
name|newValue
argument_list|,
operator|&
name|_q_value
argument_list|)
operator|!=
literal|0
condition|)
empty_stmt|;
end_while
begin_return
return|return
name|newValue
operator|!=
literal|0
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
operator|>
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|bool
name|QBasicAtomicOps
operator|<
literal|4
operator|>
operator|::
name|testAndSetRelaxed
argument_list|(
argument|T&_q_value
argument_list|,
argument|T expectedValue
argument_list|,
argument|T newValue
argument_list|)
name|Q_DECL_NOTHROW
block|{
name|T
name|originalValue
block|;
do|do
block|{
name|originalValue
operator|=
name|_q_value
expr_stmt|;
if|if
condition|(
name|originalValue
operator|!=
name|expectedValue
condition|)
return|return
name|false
return|;
block|}
end_expr_stmt
begin_while
while|while
condition|(
name|_q_cmpxchg
argument_list|(
name|expectedValue
argument_list|,
name|newValue
argument_list|,
operator|&
name|_q_value
argument_list|)
operator|!=
literal|0
condition|)
empty_stmt|;
end_while
begin_return
return|return
name|true
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
operator|>
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|bool
name|QBasicAtomicOps
operator|<
literal|4
operator|>
operator|::
name|testAndSetRelaxed
argument_list|(
argument|T&_q_value
argument_list|,
argument|T expectedValue
argument_list|,
argument|T newValue
argument_list|,
argument|T *currentValue
argument_list|)
name|Q_DECL_NOTHROW
block|{
name|T
name|originalValue
block|;
do|do
block|{
name|originalValue
operator|=
name|_q_value
expr_stmt|;
if|if
condition|(
name|originalValue
operator|!=
name|expectedValue
condition|)
block|{
if|if
condition|(
name|currentValue
condition|)
operator|*
name|currentValue
operator|=
name|originalValue
expr_stmt|;
return|return
name|false
return|;
block|}
end_expr_stmt
begin_expr_stmt
unit|} while
operator|(
name|_q_cmpxchg
argument_list|(
name|expectedValue
argument_list|,
name|newValue
argument_list|,
operator|&
name|_q_value
argument_list|)
operator|!=
literal|0
operator|)
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|true
return|;
end_return
begin_comment
unit|}
comment|// Fetch and store for integers
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|Q_CC_RVCT
end_ifdef
begin_expr_stmt
unit|template
operator|<
operator|>
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
asm|__asm T QBasicAtomicOps<4>::fetchAndStoreRelaxed(T&_q_value, T newValue) Q_DECL_NOTHROW
block|{
name|add
name|r2
block|,
name|pc
block|,
operator|#
literal|0
name|bx
name|r2
name|arm
name|swp
name|r2
block|,
name|r1
block|,
index|[
name|r0
index|]
name|mov
name|r0
block|,
name|r2
name|bx
name|lr
name|thumb
block|}
else|#
directive|else
name|template
operator|<
operator|>
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|T
name|QBasicAtomicOps
operator|<
literal|4
operator|>
operator|::
name|fetchAndStoreRelaxed
argument_list|(
argument|T&_q_value
argument_list|,
argument|T newValue
argument_list|)
name|Q_DECL_NOTHROW
block|{
if|#
directive|if
name|defined
argument_list|(
name|__thumb__
argument_list|)
name|T
name|originalValue
block|;
do|do
block|{
name|originalValue
operator|=
name|_q_value
expr_stmt|;
block|}
end_expr_stmt
begin_while
while|while
condition|(
name|_q_cmpxchg
argument_list|(
name|originalValue
argument_list|,
name|newValue
argument_list|,
operator|&
name|_q_value
argument_list|)
operator|!=
literal|0
condition|)
empty_stmt|;
end_while
begin_return
return|return
name|originalValue
return|;
end_return
begin_else
else|#
directive|else
end_else
begin_decl_stmt
name|T
name|originalValue
decl_stmt|;
end_decl_stmt
begin_asm
asm|asm
specifier|volatile
asm|("swp %0,%2,[%3]"                  : "=&r"(originalValue), "=m" (_q_value)                  : "r"(newValue), "r"(&_q_value)                  : "cc", "memory");
end_asm
begin_return
return|return
name|originalValue
return|;
end_return
begin_endif
endif|#
directive|endif
end_endif
begin_endif
unit|}
endif|#
directive|endif
end_endif
begin_comment
comment|// Q_CC_RVCT
end_comment
begin_expr_stmt
unit|template
operator|<
operator|>
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|T
name|QBasicAtomicOps
operator|<
literal|4
operator|>
operator|::
name|fetchAndAddRelaxed
argument_list|(
argument|T&_q_value
argument_list|,
argument|typename QAtomicAdditiveType<T>::AdditiveT valueToAdd
argument_list|)
name|Q_DECL_NOTHROW
block|{
name|T
name|originalValue
block|;
name|T
name|newValue
block|;
do|do
block|{
name|originalValue
operator|=
name|_q_value
expr_stmt|;
name|newValue
operator|=
name|originalValue
operator|+
name|valueToAdd
expr_stmt|;
block|}
end_expr_stmt
begin_while
while|while
condition|(
name|_q_cmpxchg
argument_list|(
name|originalValue
argument_list|,
name|newValue
argument_list|,
operator|&
name|_q_value
argument_list|)
operator|!=
literal|0
condition|)
empty_stmt|;
end_while
begin_return
return|return
name|originalValue
return|;
end_return
begin_endif
unit|}  QT_END_NAMESPACE
endif|#
directive|endif
end_endif
begin_comment
comment|// QATOMIC_ARMV5_H
end_comment
end_unit
