begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Copyright (C) 2011 Thiago Macieira<thiago@kde.org> ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QATOMIC_ARMV5_H
end_ifndef
begin_define
DECL|macro|QATOMIC_ARMV5_H
define|#
directive|define
name|QATOMIC_ARMV5_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qgenericatomic.h>
end_include
begin_expr_stmt
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
if|#
directive|if
literal|0
comment|// silence syncqt warnings
expr|QT_END_NAMESPACE QT_END_HEADER
pragma|#
directive|pragma
name|qt_sync_stop_processing
endif|#
directive|endif
DECL|macro|Q_ATOMIC_INT_REFERENCE_COUNTING_IS_NOT_NATIVE
define|#
directive|define
name|Q_ATOMIC_INT_REFERENCE_COUNTING_IS_NOT_NATIVE
DECL|macro|Q_ATOMIC_INT_TEST_AND_SET_IS_NOT_NATIVE
define|#
directive|define
name|Q_ATOMIC_INT_TEST_AND_SET_IS_NOT_NATIVE
DECL|macro|Q_ATOMIC_INT_FETCH_AND_STORE_IS_ALWAYS_NATIVE
define|#
directive|define
name|Q_ATOMIC_INT_FETCH_AND_STORE_IS_ALWAYS_NATIVE
DECL|macro|Q_ATOMIC_INT_FETCH_AND_STORE_IS_WAIT_FREE
define|#
directive|define
name|Q_ATOMIC_INT_FETCH_AND_STORE_IS_WAIT_FREE
DECL|macro|Q_ATOMIC_INT_FETCH_AND_ADD_IS_NOT_NATIVE
define|#
directive|define
name|Q_ATOMIC_INT_FETCH_AND_ADD_IS_NOT_NATIVE
DECL|macro|Q_ATOMIC_POINTER_TEST_AND_SET_IS_NOT_NATIVE
define|#
directive|define
name|Q_ATOMIC_POINTER_TEST_AND_SET_IS_NOT_NATIVE
DECL|macro|Q_ATOMIC_POINTER_FETCH_AND_STORE_IS_ALWAYS_NATIVE
define|#
directive|define
name|Q_ATOMIC_POINTER_FETCH_AND_STORE_IS_ALWAYS_NATIVE
DECL|macro|Q_ATOMIC_POINTER_FETCH_AND_STORE_IS_WAIT_FREE
define|#
directive|define
name|Q_ATOMIC_POINTER_FETCH_AND_STORE_IS_WAIT_FREE
DECL|macro|Q_ATOMIC_POINTER_FETCH_AND_ADD_IS_NOT_NATIVE
define|#
directive|define
name|Q_ATOMIC_POINTER_FETCH_AND_ADD_IS_NOT_NATIVE
ifdef|#
directive|ifdef
name|QT_NO_ARM_EABI
error|#
directive|error
literal|"Sorry, ARM without EABI is no longer supported"
endif|#
directive|endif
ifndef|#
directive|ifndef
name|Q_OS_LINUX
error|#
directive|error
literal|"Qt is misconfigured: this ARMv5 implementation is only possible on Linux"
endif|#
directive|endif
name|template
operator|<
operator|>
expr|struct
name|QAtomicIntegerTraits
operator|<
name|int
operator|>
block|{ enum
block|{
name|IsInteger
operator|=
literal|1
block|}
block|; }
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
operator|>
expr|struct
name|QAtomicIntegerTraits
operator|<
name|unsigned
name|int
operator|>
block|{ enum
block|{
name|IsInteger
operator|=
literal|1
block|}
block|; }
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|struct|size
name|template
operator|<
name|int
name|size
operator|>
expr|struct
name|QBasicAtomicOps
operator|:
name|QGenericAtomicOps
operator|<
name|QBasicAtomicOps
operator|<
name|size
operator|>
expr|>
block|{
comment|// kernel places a restartable cmpxchg implementation at a fixed address
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|_q_cmpxchg
specifier|static
name|int
name|_q_cmpxchg
argument_list|(
argument|T oldval
argument_list|,
argument|T newval
argument_list|,
argument|volatile T *ptr
argument_list|)
block|{
typedef|typedef
name|int
function_decl|(
modifier|*
name|kernel_cmpxchg_t
function_decl|)
parameter_list|(
name|T
name|oldval
parameter_list|,
name|T
name|newval
parameter_list|,
specifier|volatile
name|T
modifier|*
name|ptr
parameter_list|)
function_decl|;
name|kernel_cmpxchg_t
name|kernel_cmpxchg
operator|=
operator|*
name|reinterpret_cast
operator|<
name|kernel_cmpxchg_t
operator|>
operator|(
literal|0xffff0fc0
operator|)
block|;
return|return
name|kernel_cmpxchg
argument_list|(
name|oldval
argument_list|,
name|newval
argument_list|,
name|ptr
argument_list|)
return|;
block|}
end_expr_stmt
begin_function
DECL|function|_q_dmb
specifier|static
name|void
name|_q_dmb
parameter_list|()
block|{
typedef|typedef
name|void
function_decl|(
modifier|*
name|kernel_dmb_t
function_decl|)
parameter_list|()
function_decl|;
name|kernel_dmb_t
name|kernel_dmb
init|=
operator|*
name|reinterpret_cast
operator|<
name|kernel_dmb_t
operator|>
operator|(
literal|0xffff0fa0
operator|)
decl_stmt|;
name|kernel_dmb
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|orderedMemoryFence
specifier|static
name|void
name|orderedMemoryFence
parameter_list|()
block|{
name|_q_dmb
argument_list|()
expr_stmt|;
block|}
end_function
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
name|bool
name|ref
argument_list|(
name|T
operator|&
name|_q_value
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
name|bool
name|deref
argument_list|(
name|T
operator|&
name|_q_value
argument_list|)
expr_stmt|;
end_expr_stmt
begin_function
DECL|function|isTestAndSetNative
specifier|static
name|bool
name|isTestAndSetNative
parameter_list|()
block|{
return|return
name|false
return|;
block|}
end_function
begin_function
DECL|function|isTestAndSetWaitFree
specifier|static
name|bool
name|isTestAndSetWaitFree
parameter_list|()
block|{
return|return
name|false
return|;
block|}
end_function
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
name|bool
name|testAndSetRelaxed
argument_list|(
argument|T&_q_value
argument_list|,
argument|T expectedValue
argument_list|,
argument|T newValue
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
name|T
name|fetchAndStoreRelaxed
argument_list|(
argument|T&_q_value
argument_list|,
argument|T newValue
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
name|T
name|fetchAndAddRelaxed
argument_list|(
argument|T&_q_value
argument_list|,
argument|typename QAtomicAdditiveType<T>::AdditiveT valueToAdd
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
unit|};
DECL|function|sizeof
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|QAtomicOps
operator|:
name|QBasicAtomicOps
operator|<
sizeof|sizeof
argument_list|(
name|T
argument_list|)
operator|>
block|{
typedef|typedef
name|T
name|Type
typedef|;
block|}
end_expr_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_expr_stmt
name|template
operator|<
operator|>
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
DECL|function|ref
name|bool
name|QBasicAtomicOps
operator|<
literal|4
operator|>
operator|::
name|ref
argument_list|(
argument|T&_q_value
argument_list|)
block|{
specifier|register
name|T
name|originalValue
block|;
specifier|register
name|T
name|newValue
block|;
do|do
block|{
name|originalValue
operator|=
name|_q_value
expr_stmt|;
name|newValue
operator|=
name|originalValue
operator|+
literal|1
expr_stmt|;
block|}
end_expr_stmt
begin_while
while|while
condition|(
name|_q_cmpxchg
argument_list|(
name|originalValue
argument_list|,
name|newValue
argument_list|,
operator|&
name|_q_value
argument_list|)
operator|!=
literal|0
condition|)
empty_stmt|;
end_while
begin_return
return|return
name|newValue
operator|!=
literal|0
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
operator|>
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
DECL|function|deref
name|bool
name|QBasicAtomicOps
operator|<
literal|4
operator|>
operator|::
name|deref
argument_list|(
argument|T&_q_value
argument_list|)
block|{
specifier|register
name|T
name|originalValue
block|;
specifier|register
name|T
name|newValue
block|;
do|do
block|{
name|originalValue
operator|=
name|_q_value
expr_stmt|;
name|newValue
operator|=
name|originalValue
operator|-
literal|1
expr_stmt|;
block|}
end_expr_stmt
begin_while
while|while
condition|(
name|_q_cmpxchg
argument_list|(
name|originalValue
argument_list|,
name|newValue
argument_list|,
operator|&
name|_q_value
argument_list|)
operator|!=
literal|0
condition|)
empty_stmt|;
end_while
begin_return
return|return
name|newValue
operator|!=
literal|0
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
operator|>
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
DECL|function|testAndSetRelaxed
name|bool
name|QBasicAtomicOps
operator|<
literal|4
operator|>
operator|::
name|testAndSetRelaxed
argument_list|(
argument|T&_q_value
argument_list|,
argument|T expectedValue
argument_list|,
argument|T newValue
argument_list|)
block|{
specifier|register
name|T
name|originalValue
block|;
do|do
block|{
name|originalValue
operator|=
name|_q_value
expr_stmt|;
if|if
condition|(
name|originalValue
operator|!=
name|expectedValue
condition|)
return|return
name|false
return|;
block|}
end_expr_stmt
begin_while
while|while
condition|(
name|_q_cmpxchg
argument_list|(
name|expectedValue
argument_list|,
name|newValue
argument_list|,
operator|&
name|_q_value
argument_list|)
operator|!=
literal|0
condition|)
empty_stmt|;
end_while
begin_return
return|return
name|true
return|;
end_return
begin_comment
unit|}
comment|// Fetch and store for integers
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|Q_CC_RVCT
end_ifdef
begin_expr_stmt
unit|template
operator|<
operator|>
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
DECL|function|fetchAndStoreRelaxed
asm|__asm T QBasicAtomicOps<4>::fetchAndStoreRelaxed(T&_q_value, T newValue)
block|{
name|add
name|r2
block|,
name|pc
block|,
operator|#
literal|0
name|bx
name|r2
name|arm
name|swp
name|r2
block|,
name|r1
block|,
index|[
name|r0
index|]
name|mov
name|r0
block|,
name|r2
name|bx
name|lr
name|thumb
block|}
else|#
directive|else
name|template
operator|<
operator|>
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
DECL|function|fetchAndStoreRelaxed
name|T
name|QBasicAtomicOps
operator|<
literal|4
operator|>
operator|::
name|fetchAndStoreRelaxed
argument_list|(
argument|T&_q_value
argument_list|,
argument|T newValue
argument_list|)
block|{
name|T
name|originalValue
block|;
name|asm
specifier|volatile
operator|(
literal|"swp %0,%2,[%3]"
operator|:
literal|"=&r"
operator|(
name|originalValue
operator|)
operator|,
literal|"=m"
operator|(
name|_q_value
operator|)
operator|:
literal|"r"
operator|(
name|newValue
operator|)
operator|,
literal|"r"
operator|(
operator|&
name|_q_value
operator|)
operator|:
literal|"cc"
operator|,
literal|"memory"
operator|)
block|;
return|return
name|originalValue
return|;
block|}
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Q_CC_RVCT
end_comment
begin_expr_stmt
name|template
operator|<
operator|>
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
DECL|function|fetchAndAddRelaxed
name|T
name|QBasicAtomicOps
operator|<
literal|4
operator|>
operator|::
name|fetchAndAddRelaxed
argument_list|(
argument|T&_q_value
argument_list|,
argument|typename QAtomicAdditiveType<T>::AdditiveT valueToAdd
argument_list|)
block|{
specifier|register
name|T
name|originalValue
block|;
specifier|register
name|T
name|newValue
block|;
do|do
block|{
name|originalValue
operator|=
name|_q_value
expr_stmt|;
name|newValue
operator|=
name|originalValue
operator|+
name|valueToAdd
expr_stmt|;
block|}
end_expr_stmt
begin_while
while|while
condition|(
name|_q_cmpxchg
argument_list|(
name|originalValue
argument_list|,
name|newValue
argument_list|,
operator|&
name|_q_value
argument_list|)
operator|!=
literal|0
condition|)
empty_stmt|;
end_while
begin_return
return|return
name|originalValue
return|;
end_return
begin_macro
unit|}  QT_END_NAMESPACE
name|QT_END_HEADER
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QATOMIC_ARMV5_H
end_comment
end_unit
