begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QATOMIC_WINDOWS_H
end_ifndef
begin_define
DECL|macro|QATOMIC_WINDOWS_H
define|#
directive|define
name|QATOMIC_WINDOWS_H
end_define
begin_ifndef
ifndef|#
directive|ifndef
name|Q_CC_MSVC
end_ifndef
begin_comment
comment|// Mingw and other GCC platforms get inline assembly
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|__i386__
end_ifdef
begin_include
include|#
directive|include
file|"QtCore/qatomic_i386.h"
end_include
begin_else
else|#
directive|else
end_else
begin_include
include|#
directive|include
file|"QtCore/qatomic_x86_64.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_else
else|#
directive|else
end_else
begin_comment
comment|// Q_CC_MSVC
end_comment
begin_comment
comment|////////////////////////////////////////////////////////////////////////////////////////////////////
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|Q_OS_WINCE
end_ifndef
begin_comment
comment|// use compiler intrinsics for all atomic functions
end_comment
begin_define
DECL|macro|QT_INTERLOCKED_PREFIX
define|#
directive|define
name|QT_INTERLOCKED_PREFIX
value|_
end_define
begin_define
DECL|macro|QT_INTERLOCKED_PROTOTYPE
define|#
directive|define
name|QT_INTERLOCKED_PROTOTYPE
value|__cdecl
end_define
begin_define
DECL|macro|QT_INTERLOCKED_DECLARE_PROTOTYPES
define|#
directive|define
name|QT_INTERLOCKED_DECLARE_PROTOTYPES
end_define
begin_define
DECL|macro|QT_INTERLOCKED_INTRINSIC
define|#
directive|define
name|QT_INTERLOCKED_INTRINSIC
end_define
begin_else
else|#
directive|else
end_else
begin_comment
comment|// Q_OS_WINCE
end_comment
begin_if
if|#
directive|if
name|_WIN32_WCE
operator|<
literal|0x600
operator|&&
name|defined
argument_list|(
name|_X86_
argument_list|)
end_if
begin_comment
comment|// For X86 Windows CE, include winbase.h to catch inline functions which
end_comment
begin_comment
comment|// override the regular definitions inside of coredll.dll.
end_comment
begin_comment
comment|// Though one could use the original version of Increment/Decrement, others are
end_comment
begin_comment
comment|// not exported at all.
end_comment
begin_include
include|#
directive|include
file|<winbase.h>
end_include
begin_comment
comment|// It's safer to remove the volatile and let the compiler add it as needed.
end_comment
begin_define
DECL|macro|QT_INTERLOCKED_NO_VOLATILE
define|#
directive|define
name|QT_INTERLOCKED_NO_VOLATILE
end_define
begin_else
else|#
directive|else
end_else
begin_comment
comment|// _WIN32_WCE>= 0x600 || !_X86_
end_comment
begin_define
DECL|macro|QT_INTERLOCKED_PROTOTYPE
define|#
directive|define
name|QT_INTERLOCKED_PROTOTYPE
value|__cdecl
end_define
begin_define
DECL|macro|QT_INTERLOCKED_DECLARE_PROTOTYPES
define|#
directive|define
name|QT_INTERLOCKED_DECLARE_PROTOTYPES
end_define
begin_if
if|#
directive|if
name|_WIN32_WCE
operator|>=
literal|0x600
end_if
begin_if
if|#
directive|if
name|defined
argument_list|(
name|_X86_
argument_list|)
end_if
begin_define
DECL|macro|QT_INTERLOCKED_PREFIX
define|#
directive|define
name|QT_INTERLOCKED_PREFIX
value|_
end_define
begin_define
DECL|macro|QT_INTERLOCKED_INTRINSIC
define|#
directive|define
name|QT_INTERLOCKED_INTRINSIC
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|QT_INTERLOCKED_NO_VOLATILE
define|#
directive|define
name|QT_INTERLOCKED_NO_VOLATILE
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// _WIN32_WCE>= 0x600 || !_X86_
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Q_OS_WINCE
end_comment
begin_comment
comment|////////////////////////////////////////////////////////////////////////////////////////////////////
end_comment
begin_comment
comment|// Prototype declaration
end_comment
begin_define
DECL|macro|QT_INTERLOCKED_CONCAT_I
define|#
directive|define
name|QT_INTERLOCKED_CONCAT_I
parameter_list|(
name|prefix
parameter_list|,
name|suffix
parameter_list|)
define|\
value|prefix ## suffix
end_define
begin_define
DECL|macro|QT_INTERLOCKED_CONCAT
define|#
directive|define
name|QT_INTERLOCKED_CONCAT
parameter_list|(
name|prefix
parameter_list|,
name|suffix
parameter_list|)
define|\
value|QT_INTERLOCKED_CONCAT_I(prefix, suffix)
end_define
begin_comment
comment|// MSVC intrinsics prefix function names with an underscore. Also, if platform
end_comment
begin_comment
comment|// SDK headers have been included, the Interlocked names may be defined as
end_comment
begin_comment
comment|// macros.
end_comment
begin_comment
comment|// To avoid double underscores, we paste the prefix with Interlocked first and
end_comment
begin_comment
comment|// then the remainder of the function name.
end_comment
begin_define
DECL|macro|QT_INTERLOCKED_FUNCTION
define|#
directive|define
name|QT_INTERLOCKED_FUNCTION
parameter_list|(
name|name
parameter_list|)
define|\
value|QT_INTERLOCKED_CONCAT( \         QT_INTERLOCKED_CONCAT(QT_INTERLOCKED_PREFIX, Interlocked), name)
end_define
begin_ifdef
ifdef|#
directive|ifdef
name|QT_INTERLOCKED_NO_VOLATILE
end_ifdef
begin_define
DECL|macro|QT_INTERLOCKED_VOLATILE
define|#
directive|define
name|QT_INTERLOCKED_VOLATILE
end_define
begin_define
DECL|macro|QT_INTERLOCKED_REMOVE_VOLATILE
define|#
directive|define
name|QT_INTERLOCKED_REMOVE_VOLATILE
parameter_list|(
name|a
parameter_list|)
value|qt_interlocked_remove_volatile(a)
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|QT_INTERLOCKED_VOLATILE
define|#
directive|define
name|QT_INTERLOCKED_VOLATILE
value|volatile
end_define
begin_define
DECL|macro|QT_INTERLOCKED_REMOVE_VOLATILE
define|#
directive|define
name|QT_INTERLOCKED_REMOVE_VOLATILE
parameter_list|(
name|a
parameter_list|)
value|a
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_INTERLOCKED_PREFIX
end_ifndef
begin_define
DECL|macro|QT_INTERLOCKED_PREFIX
define|#
directive|define
name|QT_INTERLOCKED_PREFIX
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_INTERLOCKED_PROTOTYPE
end_ifndef
begin_define
DECL|macro|QT_INTERLOCKED_PROTOTYPE
define|#
directive|define
name|QT_INTERLOCKED_PROTOTYPE
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|QT_INTERLOCKED_DECLARE_PROTOTYPES
end_ifdef
begin_undef
DECL|macro|QT_INTERLOCKED_DECLARE_PROTOTYPES
undef|#
directive|undef
name|QT_INTERLOCKED_DECLARE_PROTOTYPES
end_undef
begin_extern
extern|extern
literal|"C"
block|{
name|long
name|QT_INTERLOCKED_PROTOTYPE
name|QT_INTERLOCKED_FUNCTION
function_decl|(
name|Increment
function_decl|)
parameter_list|(
name|long
name|QT_INTERLOCKED_VOLATILE
modifier|*
parameter_list|)
function_decl|;
name|long
name|QT_INTERLOCKED_PROTOTYPE
name|QT_INTERLOCKED_FUNCTION
function_decl|(
name|Decrement
function_decl|)
parameter_list|(
name|long
name|QT_INTERLOCKED_VOLATILE
modifier|*
parameter_list|)
function_decl|;
name|long
name|QT_INTERLOCKED_PROTOTYPE
name|QT_INTERLOCKED_FUNCTION
function_decl|(
name|CompareExchange
function_decl|)
parameter_list|(
name|long
name|QT_INTERLOCKED_VOLATILE
modifier|*
parameter_list|,
name|long
parameter_list|,
name|long
parameter_list|)
function_decl|;
name|long
name|QT_INTERLOCKED_PROTOTYPE
name|QT_INTERLOCKED_FUNCTION
function_decl|(
name|Exchange
function_decl|)
parameter_list|(
name|long
name|QT_INTERLOCKED_VOLATILE
modifier|*
parameter_list|,
name|long
parameter_list|)
function_decl|;
name|long
name|QT_INTERLOCKED_PROTOTYPE
name|QT_INTERLOCKED_FUNCTION
function_decl|(
name|ExchangeAdd
function_decl|)
parameter_list|(
name|long
name|QT_INTERLOCKED_VOLATILE
modifier|*
parameter_list|,
name|long
parameter_list|)
function_decl|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__i386__
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|_M_IX86
argument_list|)
name|void
modifier|*
name|QT_INTERLOCKED_FUNCTION
function_decl|(
name|CompareExchangePointer
function_decl|)
parameter_list|(
name|void
modifier|*
name|QT_INTERLOCKED_VOLATILE
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|void
modifier|*
name|QT_INTERLOCKED_FUNCTION
function_decl|(
name|ExchangePointer
function_decl|)
parameter_list|(
name|void
modifier|*
name|QT_INTERLOCKED_VOLATILE
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|__int64
name|QT_INTERLOCKED_FUNCTION
function_decl|(
name|ExchangeAdd64
function_decl|)
parameter_list|(
name|__int64
name|QT_INTERLOCKED_VOLATILE
modifier|*
parameter_list|,
name|__int64
parameter_list|)
function_decl|;
endif|#
directive|endif
block|}
end_extern
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_INTERLOCKED_DECLARE_PROTOTYPES
end_comment
begin_undef
DECL|macro|QT_INTERLOCKED_PROTOTYPE
undef|#
directive|undef
name|QT_INTERLOCKED_PROTOTYPE
end_undef
begin_comment
comment|////////////////////////////////////////////////////////////////////////////////////////////////////
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|QT_INTERLOCKED_INTRINSIC
end_ifdef
begin_undef
DECL|macro|QT_INTERLOCKED_INTRINSIC
undef|#
directive|undef
name|QT_INTERLOCKED_INTRINSIC
end_undef
begin_pragma
pragma|#
directive|pragma
name|intrinsic
name|(
name|_InterlockedIncrement
name|)
end_pragma
begin_pragma
pragma|#
directive|pragma
name|intrinsic
name|(
name|_InterlockedDecrement
name|)
end_pragma
begin_pragma
pragma|#
directive|pragma
name|intrinsic
name|(
name|_InterlockedExchange
name|)
end_pragma
begin_pragma
pragma|#
directive|pragma
name|intrinsic
name|(
name|_InterlockedCompareExchange
name|)
end_pragma
begin_pragma
pragma|#
directive|pragma
name|intrinsic
name|(
name|_InterlockedExchangeAdd
name|)
end_pragma
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|_M_IX86
argument_list|)
end_if
begin_pragma
pragma|#
directive|pragma
name|intrinsic
name|(
name|_InterlockedCompareExchangePointer
name|)
end_pragma
begin_pragma
pragma|#
directive|pragma
name|intrinsic
name|(
name|_InterlockedExchangePointer
name|)
end_pragma
begin_pragma
pragma|#
directive|pragma
name|intrinsic
name|(
name|_InterlockedExchangeAdd64
name|)
end_pragma
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_INTERLOCKED_INTRINSIC
end_comment
begin_comment
comment|////////////////////////////////////////////////////////////////////////////////////////////////////
end_comment
begin_comment
comment|// Interlocked* replacement macros
end_comment
begin_define
DECL|macro|QT_INTERLOCKED_INCREMENT
define|#
directive|define
name|QT_INTERLOCKED_INCREMENT
parameter_list|(
name|value
parameter_list|)
define|\
value|QT_INTERLOCKED_FUNCTION( Increment )( \             QT_INTERLOCKED_REMOVE_VOLATILE( value ) )
end_define
begin_define
DECL|macro|QT_INTERLOCKED_DECREMENT
define|#
directive|define
name|QT_INTERLOCKED_DECREMENT
parameter_list|(
name|value
parameter_list|)
define|\
value|QT_INTERLOCKED_FUNCTION( Decrement )( \             QT_INTERLOCKED_REMOVE_VOLATILE( value ) )
end_define
begin_define
DECL|macro|QT_INTERLOCKED_COMPARE_EXCHANGE
define|#
directive|define
name|QT_INTERLOCKED_COMPARE_EXCHANGE
parameter_list|(
name|value
parameter_list|,
name|newValue
parameter_list|,
name|expectedValue
parameter_list|)
define|\
value|QT_INTERLOCKED_FUNCTION( CompareExchange )( \             QT_INTERLOCKED_REMOVE_VOLATILE( value ), \             newValue, \             expectedValue )
end_define
begin_define
DECL|macro|QT_INTERLOCKED_EXCHANGE
define|#
directive|define
name|QT_INTERLOCKED_EXCHANGE
parameter_list|(
name|value
parameter_list|,
name|newValue
parameter_list|)
define|\
value|QT_INTERLOCKED_FUNCTION( Exchange )( \             QT_INTERLOCKED_REMOVE_VOLATILE( value ), \             newValue )
end_define
begin_define
DECL|macro|QT_INTERLOCKED_EXCHANGE_ADD
define|#
directive|define
name|QT_INTERLOCKED_EXCHANGE_ADD
parameter_list|(
name|value
parameter_list|,
name|valueToAdd
parameter_list|)
define|\
value|QT_INTERLOCKED_FUNCTION( ExchangeAdd )( \             QT_INTERLOCKED_REMOVE_VOLATILE( value ), \             valueToAdd )
end_define
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
operator|||
name|defined
argument_list|(
name|__i386__
argument_list|)
operator|||
name|defined
argument_list|(
name|_M_IX86
argument_list|)
end_if
begin_define
DECL|macro|QT_INTERLOCKED_COMPARE_EXCHANGE_POINTER
define|#
directive|define
name|QT_INTERLOCKED_COMPARE_EXCHANGE_POINTER
parameter_list|(
name|value
parameter_list|,
name|newValue
parameter_list|,
name|expectedValue
parameter_list|)
define|\
value|reinterpret_cast<void *>( \         QT_INTERLOCKED_FUNCTION( CompareExchange )( \                 QT_INTERLOCKED_REMOVE_VOLATILE( value ## _integral ), \                 (long)( newValue ), \                 (long)( expectedValue ) ))
end_define
begin_define
DECL|macro|QT_INTERLOCKED_EXCHANGE_POINTER
define|#
directive|define
name|QT_INTERLOCKED_EXCHANGE_POINTER
parameter_list|(
name|value
parameter_list|,
name|newValue
parameter_list|)
define|\
value|QT_INTERLOCKED_FUNCTION( Exchange )( \             QT_INTERLOCKED_REMOVE_VOLATILE( value ## _integral ), \             (quintptr)( newValue ) )
end_define
begin_define
DECL|macro|QT_INTERLOCKED_EXCHANGE_ADD_POINTER
define|#
directive|define
name|QT_INTERLOCKED_EXCHANGE_ADD_POINTER
parameter_list|(
name|value
parameter_list|,
name|valueToAdd
parameter_list|)
define|\
value|QT_INTERLOCKED_FUNCTION( ExchangeAdd )( \             QT_INTERLOCKED_REMOVE_VOLATILE( value ## _integral ), \             valueToAdd )
end_define
begin_else
else|#
directive|else
end_else
begin_comment
comment|// !defined(Q_OS_WINCE)&& !defined(__i386__)&& !defined(_M_IX86)
end_comment
begin_define
DECL|macro|QT_INTERLOCKED_COMPARE_EXCHANGE_POINTER
define|#
directive|define
name|QT_INTERLOCKED_COMPARE_EXCHANGE_POINTER
parameter_list|(
name|value
parameter_list|,
name|newValue
parameter_list|,
name|expectedValue
parameter_list|)
define|\
value|QT_INTERLOCKED_FUNCTION( CompareExchangePointer )( \             (void * QT_INTERLOCKED_VOLATILE *)( QT_INTERLOCKED_REMOVE_VOLATILE(value) ), \             newValue, \             expectedValue )
end_define
begin_define
DECL|macro|QT_INTERLOCKED_EXCHANGE_POINTER
define|#
directive|define
name|QT_INTERLOCKED_EXCHANGE_POINTER
parameter_list|(
name|value
parameter_list|,
name|newValue
parameter_list|)
define|\
value|QT_INTERLOCKED_FUNCTION( ExchangePointer )( \             (void * QT_INTERLOCKED_VOLATILE *)( QT_INTERLOCKED_REMOVE_VOLATILE(value) ), \             newValue )
end_define
begin_define
DECL|macro|QT_INTERLOCKED_EXCHANGE_ADD_POINTER
define|#
directive|define
name|QT_INTERLOCKED_EXCHANGE_ADD_POINTER
parameter_list|(
name|value
parameter_list|,
name|valueToAdd
parameter_list|)
define|\
value|QT_INTERLOCKED_FUNCTION( ExchangeAdd64 )( \             QT_INTERLOCKED_REMOVE_VOLATILE( value ## _integral ), \             valueToAdd )
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// !defined(Q_OS_WINCE)&& !defined(__i386__)&& !defined(_M_IX86)
end_comment
begin_comment
comment|////////////////////////////////////////////////////////////////////////////////////////////////////
end_comment
begin_expr_stmt
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
DECL|macro|Q_ATOMIC_INT_REFERENCE_COUNTING_IS_ALWAYS_NATIVE
define|#
directive|define
name|Q_ATOMIC_INT_REFERENCE_COUNTING_IS_ALWAYS_NATIVE
DECL|macro|Q_ATOMIC_INT_REFERENCE_COUNTING_IS_WAIT_FREE
define|#
directive|define
name|Q_ATOMIC_INT_REFERENCE_COUNTING_IS_WAIT_FREE
DECL|function|isReferenceCountingNative
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|isReferenceCountingNative
argument_list|()
block|{
return|return
name|true
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|isReferenceCountingWaitFree
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|isReferenceCountingWaitFree
argument_list|()
block|{
return|return
name|true
return|;
block|}
end_expr_stmt
begin_define
DECL|macro|Q_ATOMIC_INT_TEST_AND_SET_IS_ALWAYS_NATIVE
define|#
directive|define
name|Q_ATOMIC_INT_TEST_AND_SET_IS_ALWAYS_NATIVE
end_define
begin_define
DECL|macro|Q_ATOMIC_INT_TEST_AND_SET_IS_WAIT_FREE
define|#
directive|define
name|Q_ATOMIC_INT_TEST_AND_SET_IS_WAIT_FREE
end_define
begin_expr_stmt
DECL|function|isTestAndSetNative
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|isTestAndSetNative
argument_list|()
block|{
return|return
name|true
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|isTestAndSetWaitFree
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|isTestAndSetWaitFree
argument_list|()
block|{
return|return
name|true
return|;
block|}
end_expr_stmt
begin_define
DECL|macro|Q_ATOMIC_INT_FETCH_AND_STORE_IS_ALWAYS_NATIVE
define|#
directive|define
name|Q_ATOMIC_INT_FETCH_AND_STORE_IS_ALWAYS_NATIVE
end_define
begin_define
DECL|macro|Q_ATOMIC_INT_FETCH_AND_STORE_IS_WAIT_FREE
define|#
directive|define
name|Q_ATOMIC_INT_FETCH_AND_STORE_IS_WAIT_FREE
end_define
begin_expr_stmt
DECL|function|isFetchAndStoreNative
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|isFetchAndStoreNative
argument_list|()
block|{
return|return
name|true
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|isFetchAndStoreWaitFree
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|isFetchAndStoreWaitFree
argument_list|()
block|{
return|return
name|true
return|;
block|}
end_expr_stmt
begin_define
DECL|macro|Q_ATOMIC_INT_FETCH_AND_ADD_IS_ALWAYS_NATIVE
define|#
directive|define
name|Q_ATOMIC_INT_FETCH_AND_ADD_IS_ALWAYS_NATIVE
end_define
begin_define
DECL|macro|Q_ATOMIC_INT_FETCH_AND_ADD_IS_WAIT_FREE
define|#
directive|define
name|Q_ATOMIC_INT_FETCH_AND_ADD_IS_WAIT_FREE
end_define
begin_expr_stmt
DECL|function|isFetchAndAddNative
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|isFetchAndAddNative
argument_list|()
block|{
return|return
name|true
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|isFetchAndAddWaitFree
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|isFetchAndAddWaitFree
argument_list|()
block|{
return|return
name|true
return|;
block|}
end_expr_stmt
begin_define
DECL|macro|Q_ATOMIC_POINTER_TEST_AND_SET_IS_ALWAYS_NATIVE
define|#
directive|define
name|Q_ATOMIC_POINTER_TEST_AND_SET_IS_ALWAYS_NATIVE
end_define
begin_define
DECL|macro|Q_ATOMIC_POINTER_TEST_AND_SET_IS_WAIT_FREE
define|#
directive|define
name|Q_ATOMIC_POINTER_TEST_AND_SET_IS_WAIT_FREE
end_define
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|isTestAndSetNative
name|Q_INLINE_TEMPLATE
name|bool
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|isTestAndSetNative
argument_list|()
block|{
return|return
name|true
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|isTestAndSetWaitFree
name|Q_INLINE_TEMPLATE
name|bool
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|isTestAndSetWaitFree
argument_list|()
block|{
return|return
name|true
return|;
block|}
end_expr_stmt
begin_define
DECL|macro|Q_ATOMIC_POINTER_FETCH_AND_STORE_IS_ALWAYS_NATIVE
define|#
directive|define
name|Q_ATOMIC_POINTER_FETCH_AND_STORE_IS_ALWAYS_NATIVE
end_define
begin_define
DECL|macro|Q_ATOMIC_POINTER_FETCH_AND_STORE_IS_WAIT_FREE
define|#
directive|define
name|Q_ATOMIC_POINTER_FETCH_AND_STORE_IS_WAIT_FREE
end_define
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|isFetchAndStoreNative
name|Q_INLINE_TEMPLATE
name|bool
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|isFetchAndStoreNative
argument_list|()
block|{
return|return
name|true
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|isFetchAndStoreWaitFree
name|Q_INLINE_TEMPLATE
name|bool
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|isFetchAndStoreWaitFree
argument_list|()
block|{
return|return
name|true
return|;
block|}
end_expr_stmt
begin_define
DECL|macro|Q_ATOMIC_POINTER_FETCH_AND_ADD_IS_ALWAYS_NATIVE
define|#
directive|define
name|Q_ATOMIC_POINTER_FETCH_AND_ADD_IS_ALWAYS_NATIVE
end_define
begin_define
DECL|macro|Q_ATOMIC_POINTER_FETCH_AND_ADD_IS_WAIT_FREE
define|#
directive|define
name|Q_ATOMIC_POINTER_FETCH_AND_ADD_IS_WAIT_FREE
end_define
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|isFetchAndAddNative
name|Q_INLINE_TEMPLATE
name|bool
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|isFetchAndAddNative
argument_list|()
block|{
return|return
name|true
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|isFetchAndAddWaitFree
name|Q_INLINE_TEMPLATE
name|bool
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|isFetchAndAddWaitFree
argument_list|()
block|{
return|return
name|true
return|;
block|}
end_expr_stmt
begin_comment
comment|////////////////////////////////////////////////////////////////////////////////////////////////////
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|QT_INTERLOCKED_NO_VOLATILE
end_ifdef
begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
DECL|function|qt_interlocked_remove_volatile
name|Q_INLINE_TEMPLATE
name|T
operator|*
name|qt_interlocked_remove_volatile
argument_list|(
argument|T volatile *t
argument_list|)
block|{
return|return
name|const_cast
operator|<
name|T
operator|*
operator|>
operator|(
name|t
operator|)
return|;
block|}
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// !QT_INTERLOCKED_NO_VOLATILE
end_comment
begin_comment
comment|////////////////////////////////////////////////////////////////////////////////////////////////////
end_comment
begin_expr_stmt
DECL|function|ref
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|ref
argument_list|()
block|{
return|return
name|QT_INTERLOCKED_INCREMENT
argument_list|(
operator|&
name|_q_value
argument_list|)
operator|!=
literal|0
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|deref
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|deref
argument_list|()
block|{
return|return
name|QT_INTERLOCKED_DECREMENT
argument_list|(
operator|&
name|_q_value
argument_list|)
operator|!=
literal|0
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|testAndSetOrdered
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|testAndSetOrdered
argument_list|(
argument|int expectedValue
argument_list|,
argument|int newValue
argument_list|)
block|{
return|return
name|QT_INTERLOCKED_COMPARE_EXCHANGE
argument_list|(
operator|&
name|_q_value
argument_list|,
name|newValue
argument_list|,
name|expectedValue
argument_list|)
operator|==
name|expectedValue
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|fetchAndStoreOrdered
specifier|inline
name|int
name|QBasicAtomicInt
operator|::
name|fetchAndStoreOrdered
argument_list|(
argument|int newValue
argument_list|)
block|{
return|return
name|QT_INTERLOCKED_EXCHANGE
argument_list|(
operator|&
name|_q_value
argument_list|,
name|newValue
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|fetchAndAddOrdered
specifier|inline
name|int
name|QBasicAtomicInt
operator|::
name|fetchAndAddOrdered
argument_list|(
argument|int valueToAdd
argument_list|)
block|{
return|return
name|QT_INTERLOCKED_EXCHANGE_ADD
argument_list|(
operator|&
name|_q_value
argument_list|,
name|valueToAdd
argument_list|)
return|;
block|}
end_expr_stmt
begin_comment
comment|////////////////////////////////////////////////////////////////////////////////////////////////////
end_comment
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|testAndSetOrdered
name|Q_INLINE_TEMPLATE
name|bool
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|testAndSetOrdered
argument_list|(
argument|T *expectedValue
argument_list|,
argument|T *newValue
argument_list|)
block|{
return|return
name|QT_INTERLOCKED_COMPARE_EXCHANGE_POINTER
argument_list|(
operator|&
name|_q_value
argument_list|,
operator|(
name|void
operator|*
operator|)
name|newValue
argument_list|,
operator|(
name|void
operator|*
operator|)
name|expectedValue
argument_list|)
operator|==
name|expectedValue
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|fetchAndStoreOrdered
name|Q_INLINE_TEMPLATE
name|T
operator|*
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|fetchAndStoreOrdered
argument_list|(
argument|T* newValue
argument_list|)
block|{
return|return
name|reinterpret_cast
operator|<
name|T
operator|*
operator|>
operator|(
name|QT_INTERLOCKED_EXCHANGE_POINTER
argument_list|(
operator|&
name|_q_value
argument_list|,
operator|(
name|void
operator|*
operator|)
name|newValue
argument_list|)
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|fetchAndAddOrdered
name|Q_INLINE_TEMPLATE
name|T
operator|*
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|fetchAndAddOrdered
argument_list|(
argument|qptrdiff valueToAdd
argument_list|)
block|{
return|return
name|reinterpret_cast
operator|<
name|T
operator|*
operator|>
operator|(
name|QT_INTERLOCKED_EXCHANGE_ADD_POINTER
argument_list|(
operator|&
name|_q_value
argument_list|,
name|valueToAdd
operator|*
sizeof|sizeof
argument_list|(
name|T
argument_list|)
argument_list|)
operator|)
return|;
block|}
end_expr_stmt
begin_comment
comment|////////////////////////////////////////////////////////////////////////////////////////////////////
end_comment
begin_expr_stmt
DECL|function|testAndSetRelaxed
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|testAndSetRelaxed
argument_list|(
argument|int expectedValue
argument_list|,
argument|int newValue
argument_list|)
block|{
return|return
name|testAndSetOrdered
argument_list|(
name|expectedValue
argument_list|,
name|newValue
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|testAndSetAcquire
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|testAndSetAcquire
argument_list|(
argument|int expectedValue
argument_list|,
argument|int newValue
argument_list|)
block|{
return|return
name|testAndSetOrdered
argument_list|(
name|expectedValue
argument_list|,
name|newValue
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|testAndSetRelease
specifier|inline
name|bool
name|QBasicAtomicInt
operator|::
name|testAndSetRelease
argument_list|(
argument|int expectedValue
argument_list|,
argument|int newValue
argument_list|)
block|{
return|return
name|testAndSetOrdered
argument_list|(
name|expectedValue
argument_list|,
name|newValue
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|fetchAndStoreRelaxed
specifier|inline
name|int
name|QBasicAtomicInt
operator|::
name|fetchAndStoreRelaxed
argument_list|(
argument|int newValue
argument_list|)
block|{
return|return
name|fetchAndStoreOrdered
argument_list|(
name|newValue
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|fetchAndStoreAcquire
specifier|inline
name|int
name|QBasicAtomicInt
operator|::
name|fetchAndStoreAcquire
argument_list|(
argument|int newValue
argument_list|)
block|{
return|return
name|fetchAndStoreOrdered
argument_list|(
name|newValue
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|fetchAndStoreRelease
specifier|inline
name|int
name|QBasicAtomicInt
operator|::
name|fetchAndStoreRelease
argument_list|(
argument|int newValue
argument_list|)
block|{
return|return
name|fetchAndStoreOrdered
argument_list|(
name|newValue
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|fetchAndAddRelaxed
specifier|inline
name|int
name|QBasicAtomicInt
operator|::
name|fetchAndAddRelaxed
argument_list|(
argument|int valueToAdd
argument_list|)
block|{
return|return
name|fetchAndAddOrdered
argument_list|(
name|valueToAdd
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|fetchAndAddAcquire
specifier|inline
name|int
name|QBasicAtomicInt
operator|::
name|fetchAndAddAcquire
argument_list|(
argument|int valueToAdd
argument_list|)
block|{
return|return
name|fetchAndAddOrdered
argument_list|(
name|valueToAdd
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|fetchAndAddRelease
specifier|inline
name|int
name|QBasicAtomicInt
operator|::
name|fetchAndAddRelease
argument_list|(
argument|int valueToAdd
argument_list|)
block|{
return|return
name|fetchAndAddOrdered
argument_list|(
name|valueToAdd
argument_list|)
return|;
block|}
end_expr_stmt
begin_comment
comment|////////////////////////////////////////////////////////////////////////////////////////////////////
end_comment
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|testAndSetRelaxed
name|Q_INLINE_TEMPLATE
name|bool
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|testAndSetRelaxed
argument_list|(
argument|T *expectedValue
argument_list|,
argument|T *newValue
argument_list|)
block|{
return|return
name|testAndSetOrdered
argument_list|(
name|expectedValue
argument_list|,
name|newValue
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|testAndSetAcquire
name|Q_INLINE_TEMPLATE
name|bool
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|testAndSetAcquire
argument_list|(
argument|T *expectedValue
argument_list|,
argument|T *newValue
argument_list|)
block|{
return|return
name|testAndSetOrdered
argument_list|(
name|expectedValue
argument_list|,
name|newValue
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|testAndSetRelease
name|Q_INLINE_TEMPLATE
name|bool
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|testAndSetRelease
argument_list|(
argument|T *expectedValue
argument_list|,
argument|T *newValue
argument_list|)
block|{
return|return
name|testAndSetOrdered
argument_list|(
name|expectedValue
argument_list|,
name|newValue
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|fetchAndStoreRelaxed
name|Q_INLINE_TEMPLATE
name|T
operator|*
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|fetchAndStoreRelaxed
argument_list|(
argument|T *newValue
argument_list|)
block|{
return|return
name|fetchAndStoreOrdered
argument_list|(
name|newValue
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|fetchAndStoreAcquire
name|Q_INLINE_TEMPLATE
name|T
operator|*
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|fetchAndStoreAcquire
argument_list|(
argument|T *newValue
argument_list|)
block|{
return|return
name|fetchAndStoreOrdered
argument_list|(
name|newValue
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|fetchAndStoreRelease
name|Q_INLINE_TEMPLATE
name|T
operator|*
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|fetchAndStoreRelease
argument_list|(
argument|T *newValue
argument_list|)
block|{
return|return
name|fetchAndStoreOrdered
argument_list|(
name|newValue
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|fetchAndAddRelaxed
name|Q_INLINE_TEMPLATE
name|T
operator|*
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|fetchAndAddRelaxed
argument_list|(
argument|qptrdiff valueToAdd
argument_list|)
block|{
return|return
name|fetchAndAddOrdered
argument_list|(
name|valueToAdd
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|fetchAndAddAcquire
name|Q_INLINE_TEMPLATE
name|T
operator|*
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|fetchAndAddAcquire
argument_list|(
argument|qptrdiff valueToAdd
argument_list|)
block|{
return|return
name|fetchAndAddOrdered
argument_list|(
name|valueToAdd
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|fetchAndAddRelease
name|Q_INLINE_TEMPLATE
name|T
operator|*
name|QBasicAtomicPointer
operator|<
name|T
operator|>
operator|::
name|fetchAndAddRelease
argument_list|(
argument|qptrdiff valueToAdd
argument_list|)
block|{
return|return
name|fetchAndAddOrdered
argument_list|(
name|valueToAdd
argument_list|)
return|;
block|}
end_expr_stmt
begin_comment
comment|////////////////////////////////////////////////////////////////////////////////////////////////////
end_comment
begin_comment
comment|// Cleanup
end_comment
begin_undef
DECL|macro|QT_INTERLOCKED_CONCAT_I
undef|#
directive|undef
name|QT_INTERLOCKED_CONCAT_I
end_undef
begin_undef
DECL|macro|QT_INTERLOCKED_CONCAT
undef|#
directive|undef
name|QT_INTERLOCKED_CONCAT
end_undef
begin_undef
DECL|macro|QT_INTERLOCKED_FUNCTION
undef|#
directive|undef
name|QT_INTERLOCKED_FUNCTION
end_undef
begin_undef
DECL|macro|QT_INTERLOCKED_PREFIX
undef|#
directive|undef
name|QT_INTERLOCKED_PREFIX
end_undef
begin_undef
DECL|macro|QT_INTERLOCKED_NO_VOLATILE
undef|#
directive|undef
name|QT_INTERLOCKED_NO_VOLATILE
end_undef
begin_undef
DECL|macro|QT_INTERLOCKED_VOLATILE
undef|#
directive|undef
name|QT_INTERLOCKED_VOLATILE
end_undef
begin_undef
DECL|macro|QT_INTERLOCKED_REMOVE_VOLATILE
undef|#
directive|undef
name|QT_INTERLOCKED_REMOVE_VOLATILE
end_undef
begin_undef
DECL|macro|QT_INTERLOCKED_INCREMENT
undef|#
directive|undef
name|QT_INTERLOCKED_INCREMENT
end_undef
begin_undef
DECL|macro|QT_INTERLOCKED_DECREMENT
undef|#
directive|undef
name|QT_INTERLOCKED_DECREMENT
end_undef
begin_undef
DECL|macro|QT_INTERLOCKED_COMPARE_EXCHANGE
undef|#
directive|undef
name|QT_INTERLOCKED_COMPARE_EXCHANGE
end_undef
begin_undef
DECL|macro|QT_INTERLOCKED_EXCHANGE
undef|#
directive|undef
name|QT_INTERLOCKED_EXCHANGE
end_undef
begin_undef
DECL|macro|QT_INTERLOCKED_EXCHANGE_ADD
undef|#
directive|undef
name|QT_INTERLOCKED_EXCHANGE_ADD
end_undef
begin_undef
DECL|macro|QT_INTERLOCKED_COMPARE_EXCHANGE_POINTER
undef|#
directive|undef
name|QT_INTERLOCKED_COMPARE_EXCHANGE_POINTER
end_undef
begin_undef
DECL|macro|QT_INTERLOCKED_EXCHANGE_POINTER
undef|#
directive|undef
name|QT_INTERLOCKED_EXCHANGE_POINTER
end_undef
begin_undef
DECL|macro|QT_INTERLOCKED_EXCHANGE_ADD_POINTER
undef|#
directive|undef
name|QT_INTERLOCKED_EXCHANGE_ADD_POINTER
end_undef
begin_expr_stmt
name|QT_END_NAMESPACE
name|QT_END_HEADER
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Q_CC_MSVC
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QATOMIC_WINDOWS_H
end_comment
end_unit
