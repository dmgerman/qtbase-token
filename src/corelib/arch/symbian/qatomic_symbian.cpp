begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtCore/qglobal.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qatomic.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|SYMBIAN_E32_ATOMIC_API
end_ifdef
begin_include
include|#
directive|include
file|<e32atomics.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<e32debug.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_comment
comment|// Heap and handle info printer.
end_comment
begin_comment
comment|// This way we can report on heap cells and handles that are really not owned by anything which still exists.
end_comment
begin_comment
comment|// This information can be used to detect whether memory leaks are happening, particularly if these numbers grow as the app is used more.
end_comment
begin_comment
comment|// This code is placed here as it happens to make it the very last static to be destroyed in a Qt app. The
end_comment
begin_comment
comment|// reason assumed is that this file appears before any other file declaring static data in the generated
end_comment
begin_comment
comment|// Symbian MMP file. This particular file was chosen as it is the earliest symbian specific file.
end_comment
begin_struct
DECL|struct|QSymbianPrintExitInfo
struct|struct
name|QSymbianPrintExitInfo
block|{
DECL|function|QSymbianPrintExitInfo
name|QSymbianPrintExitInfo
parameter_list|()
block|{
name|RThread
argument_list|()
operator|.
name|HandleCount
argument_list|(
name|initProcessHandleCount
argument_list|,
name|initThreadHandleCount
argument_list|)
expr_stmt|;
name|initCells
operator|=
name|User
operator|::
name|CountAllocCells
argument_list|()
expr_stmt|;
block|}
DECL|function|~QSymbianPrintExitInfo
name|~
name|QSymbianPrintExitInfo
parameter_list|()
block|{
name|RProcess
name|myProc
decl_stmt|;
name|TFullName
name|fullName
init|=
name|myProc
operator|.
name|FileName
argument_list|()
decl_stmt|;
name|TInt
name|cells
init|=
name|User
operator|::
name|CountAllocCells
argument_list|()
decl_stmt|;
name|TInt
name|processHandleCount
init|=
literal|0
decl_stmt|;
name|TInt
name|threadHandleCount
init|=
literal|0
decl_stmt|;
name|RThread
argument_list|()
operator|.
name|HandleCount
argument_list|(
name|processHandleCount
argument_list|,
name|threadHandleCount
argument_list|)
expr_stmt|;
name|RDebug
operator|::
name|Print
argument_list|(
name|_L
argument_list|(
literal|"%S exiting with %d allocated cells, %d handles"
argument_list|)
argument_list|,
operator|&
name|fullName
argument_list|,
name|cells
operator|-
name|initCells
argument_list|,
operator|(
name|processHandleCount
operator|+
name|threadHandleCount
operator|)
operator|-
operator|(
name|initProcessHandleCount
operator|+
name|initThreadHandleCount
operator|)
argument_list|)
expr_stmt|;
block|}
DECL|member|initCells
name|TInt
name|initCells
decl_stmt|;
DECL|member|initProcessHandleCount
name|TInt
name|initProcessHandleCount
decl_stmt|;
DECL|member|initThreadHandleCount
name|TInt
name|initThreadHandleCount
decl_stmt|;
block|}
DECL|variable|symbian_printExitInfo
name|symbian_printExitInfo
struct|;
end_struct
begin_function
DECL|function|isReferenceCountingNative
name|Q_CORE_EXPORT
name|bool
name|QBasicAtomicInt
operator|::
name|isReferenceCountingNative
parameter_list|()
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|SYMBIAN_E32_ATOMIC_API
argument_list|)
operator|&&
name|defined
argument_list|(
name|QT_HAVE_ARMV6
argument_list|)
return|return
literal|true
return|;
else|#
directive|else
return|return
literal|false
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|isTestAndSetNative
name|Q_CORE_EXPORT
name|bool
name|QBasicAtomicInt
operator|::
name|isTestAndSetNative
parameter_list|()
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|SYMBIAN_E32_ATOMIC_API
argument_list|)
operator|&&
name|defined
argument_list|(
name|QT_HAVE_ARMV6
argument_list|)
return|return
literal|true
return|;
else|#
directive|else
return|return
literal|false
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|isFetchAndStoreNative
name|Q_CORE_EXPORT
name|bool
name|QBasicAtomicInt
operator|::
name|isFetchAndStoreNative
parameter_list|()
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|SYMBIAN_E32_ATOMIC_API
argument_list|)
operator|&&
name|defined
argument_list|(
name|QT_HAVE_ARMV6
argument_list|)
return|return
literal|true
return|;
else|#
directive|else
return|return
literal|false
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|isFetchAndAddNative
name|Q_CORE_EXPORT
name|bool
name|QBasicAtomicInt
operator|::
name|isFetchAndAddNative
parameter_list|()
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|SYMBIAN_E32_ATOMIC_API
argument_list|)
operator|&&
name|defined
argument_list|(
name|QT_HAVE_ARMV6
argument_list|)
return|return
literal|true
return|;
else|#
directive|else
return|return
literal|false
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|QBasicAtomicPointer_isTestAndSetNative
name|Q_CORE_EXPORT
name|bool
name|QBasicAtomicPointer_isTestAndSetNative
parameter_list|()
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|SYMBIAN_E32_ATOMIC_API
argument_list|)
operator|&&
name|defined
argument_list|(
name|QT_HAVE_ARMV6
argument_list|)
return|return
literal|true
return|;
else|#
directive|else
return|return
literal|false
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|QBasicAtomicPointer_isFetchAndStoreNative
name|Q_CORE_EXPORT
name|bool
name|QBasicAtomicPointer_isFetchAndStoreNative
parameter_list|()
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|SYMBIAN_E32_ATOMIC_API
argument_list|)
operator|&&
name|defined
argument_list|(
name|QT_HAVE_ARMV6
argument_list|)
return|return
literal|true
return|;
else|#
directive|else
return|return
literal|false
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|QBasicAtomicPointer_isFetchAndAddNative
name|Q_CORE_EXPORT
name|bool
name|QBasicAtomicPointer_isFetchAndAddNative
parameter_list|()
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|SYMBIAN_E32_ATOMIC_API
argument_list|)
operator|&&
name|defined
argument_list|(
name|QT_HAVE_ARMV6
argument_list|)
return|return
literal|true
return|;
else|#
directive|else
return|return
literal|false
return|;
endif|#
directive|endif
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|SYMBIAN_E32_ATOMIC_API
end_ifdef
begin_comment
comment|//Symbian's API is SMP-safe when using SMP kernel, and cheap when using uniprocessor kernel
end_comment
begin_comment
comment|//generate compiler error if casting assumptions are wrong (symbian64?)
end_comment
begin_expr_stmt
DECL|variable|sizeof
name|__ASSERT_COMPILE
argument_list|(
sizeof|sizeof
argument_list|(
name|int
argument_list|)
operator|==
sizeof|sizeof
argument_list|(
name|TUint32
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|variable|sizeof
name|__ASSERT_COMPILE
argument_list|(
sizeof|sizeof
argument_list|(
name|void
operator|*
argument_list|)
operator|==
sizeof|sizeof
argument_list|(
name|TUint32
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt
begin_function
name|Q_CORE_EXPORT
DECL|function|QBasicAtomicInt_testAndSetOrdered
name|bool
name|QBasicAtomicInt_testAndSetOrdered
parameter_list|(
specifier|volatile
name|int
modifier|*
name|_q_value
parameter_list|,
name|int
name|expectedValue
parameter_list|,
name|int
name|newValue
parameter_list|)
block|{
return|return
cast|static_cast
argument_list|<
name|bool
argument_list|>
argument_list|(
name|__e32_atomic_cas_ord32
argument_list|(
name|_q_value
argument_list|,
cast|reinterpret_cast
argument_list|<
name|TUint32
operator|*
argument_list|>
argument_list|(
operator|&
name|expectedValue
argument_list|)
argument_list|,
name|newValue
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
name|Q_CORE_EXPORT
DECL|function|QBasicAtomicInt_testAndSetRelaxed
name|bool
name|QBasicAtomicInt_testAndSetRelaxed
parameter_list|(
specifier|volatile
name|int
modifier|*
name|_q_value
parameter_list|,
name|int
name|expectedValue
parameter_list|,
name|int
name|newValue
parameter_list|)
block|{
return|return
cast|static_cast
argument_list|<
name|bool
argument_list|>
argument_list|(
name|__e32_atomic_cas_rlx32
argument_list|(
name|_q_value
argument_list|,
cast|reinterpret_cast
argument_list|<
name|TUint32
operator|*
argument_list|>
argument_list|(
operator|&
name|expectedValue
argument_list|)
argument_list|,
name|newValue
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
name|Q_CORE_EXPORT
DECL|function|QBasicAtomicInt_testAndSetAcquire
name|bool
name|QBasicAtomicInt_testAndSetAcquire
parameter_list|(
specifier|volatile
name|int
modifier|*
name|_q_value
parameter_list|,
name|int
name|expectedValue
parameter_list|,
name|int
name|newValue
parameter_list|)
block|{
return|return
cast|static_cast
argument_list|<
name|bool
argument_list|>
argument_list|(
name|__e32_atomic_cas_acq32
argument_list|(
name|_q_value
argument_list|,
cast|reinterpret_cast
argument_list|<
name|TUint32
operator|*
argument_list|>
argument_list|(
operator|&
name|expectedValue
argument_list|)
argument_list|,
name|newValue
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
name|Q_CORE_EXPORT
DECL|function|QBasicAtomicInt_testAndSetRelease
name|bool
name|QBasicAtomicInt_testAndSetRelease
parameter_list|(
specifier|volatile
name|int
modifier|*
name|_q_value
parameter_list|,
name|int
name|expectedValue
parameter_list|,
name|int
name|newValue
parameter_list|)
block|{
return|return
cast|static_cast
argument_list|<
name|bool
argument_list|>
argument_list|(
name|__e32_atomic_cas_rel32
argument_list|(
name|_q_value
argument_list|,
cast|reinterpret_cast
argument_list|<
name|TUint32
operator|*
argument_list|>
argument_list|(
operator|&
name|expectedValue
argument_list|)
argument_list|,
name|newValue
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
name|Q_CORE_EXPORT
DECL|function|QBasicAtomicInt_fetchAndStoreOrdered
name|int
name|QBasicAtomicInt_fetchAndStoreOrdered
parameter_list|(
specifier|volatile
name|int
modifier|*
name|_q_value
parameter_list|,
name|int
name|newValue
parameter_list|)
block|{
return|return
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|__e32_atomic_swp_ord32
argument_list|(
name|_q_value
argument_list|,
name|newValue
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
name|Q_CORE_EXPORT
DECL|function|QBasicAtomicInt_fetchAndStoreRelaxed
name|int
name|QBasicAtomicInt_fetchAndStoreRelaxed
parameter_list|(
specifier|volatile
name|int
modifier|*
name|_q_value
parameter_list|,
name|int
name|newValue
parameter_list|)
block|{
return|return
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|__e32_atomic_swp_rlx32
argument_list|(
name|_q_value
argument_list|,
name|newValue
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
name|Q_CORE_EXPORT
DECL|function|QBasicAtomicInt_fetchAndStoreAcquire
name|int
name|QBasicAtomicInt_fetchAndStoreAcquire
parameter_list|(
specifier|volatile
name|int
modifier|*
name|_q_value
parameter_list|,
name|int
name|newValue
parameter_list|)
block|{
return|return
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|__e32_atomic_swp_acq32
argument_list|(
name|_q_value
argument_list|,
name|newValue
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
name|Q_CORE_EXPORT
DECL|function|QBasicAtomicInt_fetchAndStoreRelease
name|int
name|QBasicAtomicInt_fetchAndStoreRelease
parameter_list|(
specifier|volatile
name|int
modifier|*
name|_q_value
parameter_list|,
name|int
name|newValue
parameter_list|)
block|{
return|return
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|__e32_atomic_swp_rel32
argument_list|(
name|_q_value
argument_list|,
name|newValue
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
name|Q_CORE_EXPORT
DECL|function|QBasicAtomicInt_fetchAndAddOrdered
name|int
name|QBasicAtomicInt_fetchAndAddOrdered
parameter_list|(
specifier|volatile
name|int
modifier|*
name|_q_value
parameter_list|,
name|int
name|valueToAdd
parameter_list|)
block|{
return|return
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|__e32_atomic_add_ord32
argument_list|(
name|_q_value
argument_list|,
name|valueToAdd
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
name|Q_CORE_EXPORT
DECL|function|QBasicAtomicInt_fetchAndAddRelaxed
name|int
name|QBasicAtomicInt_fetchAndAddRelaxed
parameter_list|(
specifier|volatile
name|int
modifier|*
name|_q_value
parameter_list|,
name|int
name|valueToAdd
parameter_list|)
block|{
return|return
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|__e32_atomic_add_rlx32
argument_list|(
name|_q_value
argument_list|,
name|valueToAdd
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
name|Q_CORE_EXPORT
DECL|function|QBasicAtomicInt_fetchAndAddAcquire
name|int
name|QBasicAtomicInt_fetchAndAddAcquire
parameter_list|(
specifier|volatile
name|int
modifier|*
name|_q_value
parameter_list|,
name|int
name|valueToAdd
parameter_list|)
block|{
return|return
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|__e32_atomic_add_acq32
argument_list|(
name|_q_value
argument_list|,
name|valueToAdd
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
name|Q_CORE_EXPORT
DECL|function|QBasicAtomicInt_fetchAndAddRelease
name|int
name|QBasicAtomicInt_fetchAndAddRelease
parameter_list|(
specifier|volatile
name|int
modifier|*
name|_q_value
parameter_list|,
name|int
name|valueToAdd
parameter_list|)
block|{
return|return
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|__e32_atomic_add_rel32
argument_list|(
name|_q_value
argument_list|,
name|valueToAdd
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
name|Q_CORE_EXPORT
DECL|function|QBasicAtomicPointer_testAndSetOrdered
name|bool
name|QBasicAtomicPointer_testAndSetOrdered
parameter_list|(
name|void
modifier|*
specifier|volatile
modifier|*
name|_q_value
parameter_list|,
name|void
modifier|*
name|expectedValue
parameter_list|,
name|void
modifier|*
name|newValue
parameter_list|)
block|{
return|return
cast|static_cast
argument_list|<
name|bool
argument_list|>
argument_list|(
name|__e32_atomic_cas_ord_ptr
argument_list|(
name|_q_value
argument_list|,
operator|&
name|expectedValue
argument_list|,
name|newValue
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
name|Q_CORE_EXPORT
DECL|function|QBasicAtomicPointer_testAndSetRelaxed
name|bool
name|QBasicAtomicPointer_testAndSetRelaxed
parameter_list|(
name|void
modifier|*
specifier|volatile
modifier|*
name|_q_value
parameter_list|,
name|void
modifier|*
name|expectedValue
parameter_list|,
name|void
modifier|*
name|newValue
parameter_list|)
block|{
return|return
cast|static_cast
argument_list|<
name|bool
argument_list|>
argument_list|(
name|__e32_atomic_cas_rlx_ptr
argument_list|(
name|_q_value
argument_list|,
operator|&
name|expectedValue
argument_list|,
name|newValue
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
name|Q_CORE_EXPORT
DECL|function|QBasicAtomicPointer_testAndSetAcquire
name|bool
name|QBasicAtomicPointer_testAndSetAcquire
parameter_list|(
name|void
modifier|*
specifier|volatile
modifier|*
name|_q_value
parameter_list|,
name|void
modifier|*
name|expectedValue
parameter_list|,
name|void
modifier|*
name|newValue
parameter_list|)
block|{
return|return
cast|static_cast
argument_list|<
name|bool
argument_list|>
argument_list|(
name|__e32_atomic_cas_acq_ptr
argument_list|(
name|_q_value
argument_list|,
operator|&
name|expectedValue
argument_list|,
name|newValue
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
name|Q_CORE_EXPORT
DECL|function|QBasicAtomicPointer_testAndSetRelease
name|bool
name|QBasicAtomicPointer_testAndSetRelease
parameter_list|(
name|void
modifier|*
specifier|volatile
modifier|*
name|_q_value
parameter_list|,
name|void
modifier|*
name|expectedValue
parameter_list|,
name|void
modifier|*
name|newValue
parameter_list|)
block|{
return|return
cast|static_cast
argument_list|<
name|bool
argument_list|>
argument_list|(
name|__e32_atomic_cas_rel_ptr
argument_list|(
name|_q_value
argument_list|,
operator|&
name|expectedValue
argument_list|,
name|newValue
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
name|Q_CORE_EXPORT
DECL|function|QBasicAtomicPointer_fetchAndStoreOrdered
name|void
modifier|*
name|QBasicAtomicPointer_fetchAndStoreOrdered
parameter_list|(
name|void
modifier|*
specifier|volatile
modifier|*
name|_q_value
parameter_list|,
name|void
modifier|*
name|newValue
parameter_list|)
block|{
return|return
name|__e32_atomic_swp_ord_ptr
argument_list|(
name|_q_value
argument_list|,
name|newValue
argument_list|)
return|;
block|}
end_function
begin_function
name|Q_CORE_EXPORT
DECL|function|QBasicAtomicPointer_fetchAndStoreRelaxed
name|void
modifier|*
name|QBasicAtomicPointer_fetchAndStoreRelaxed
parameter_list|(
name|void
modifier|*
specifier|volatile
modifier|*
name|_q_value
parameter_list|,
name|void
modifier|*
name|newValue
parameter_list|)
block|{
return|return
name|__e32_atomic_swp_rlx_ptr
argument_list|(
name|_q_value
argument_list|,
name|newValue
argument_list|)
return|;
block|}
end_function
begin_function
name|Q_CORE_EXPORT
DECL|function|QBasicAtomicPointer_fetchAndStoreAcquire
name|void
modifier|*
name|QBasicAtomicPointer_fetchAndStoreAcquire
parameter_list|(
name|void
modifier|*
specifier|volatile
modifier|*
name|_q_value
parameter_list|,
name|void
modifier|*
name|newValue
parameter_list|)
block|{
return|return
name|__e32_atomic_swp_acq_ptr
argument_list|(
name|_q_value
argument_list|,
name|newValue
argument_list|)
return|;
block|}
end_function
begin_function
name|Q_CORE_EXPORT
DECL|function|QBasicAtomicPointer_fetchAndStoreRelease
name|void
modifier|*
name|QBasicAtomicPointer_fetchAndStoreRelease
parameter_list|(
name|void
modifier|*
specifier|volatile
modifier|*
name|_q_value
parameter_list|,
name|void
modifier|*
name|newValue
parameter_list|)
block|{
return|return
name|__e32_atomic_swp_rel_ptr
argument_list|(
name|_q_value
argument_list|,
name|newValue
argument_list|)
return|;
block|}
end_function
begin_function
name|Q_CORE_EXPORT
DECL|function|QBasicAtomicPointer_fetchAndAddOrdered
name|void
modifier|*
name|QBasicAtomicPointer_fetchAndAddOrdered
parameter_list|(
name|void
modifier|*
specifier|volatile
modifier|*
name|_q_value
parameter_list|,
name|qptrdiff
name|valueToAdd
parameter_list|)
block|{
return|return
name|__e32_atomic_add_ord_ptr
argument_list|(
name|_q_value
argument_list|,
name|valueToAdd
argument_list|)
return|;
block|}
end_function
begin_function
name|Q_CORE_EXPORT
DECL|function|QBasicAtomicPointer_fetchAndAddRelaxed
name|void
modifier|*
name|QBasicAtomicPointer_fetchAndAddRelaxed
parameter_list|(
name|void
modifier|*
specifier|volatile
modifier|*
name|_q_value
parameter_list|,
name|qptrdiff
name|valueToAdd
parameter_list|)
block|{
return|return
name|__e32_atomic_add_rlx_ptr
argument_list|(
name|_q_value
argument_list|,
name|valueToAdd
argument_list|)
return|;
block|}
end_function
begin_function
name|Q_CORE_EXPORT
DECL|function|QBasicAtomicPointer_fetchAndAddAcquire
name|void
modifier|*
name|QBasicAtomicPointer_fetchAndAddAcquire
parameter_list|(
name|void
modifier|*
specifier|volatile
modifier|*
name|_q_value
parameter_list|,
name|qptrdiff
name|valueToAdd
parameter_list|)
block|{
return|return
name|__e32_atomic_add_acq_ptr
argument_list|(
name|_q_value
argument_list|,
name|valueToAdd
argument_list|)
return|;
block|}
end_function
begin_function
name|Q_CORE_EXPORT
DECL|function|QBasicAtomicPointer_fetchAndAddRelease
name|void
modifier|*
name|QBasicAtomicPointer_fetchAndAddRelease
parameter_list|(
name|void
modifier|*
specifier|volatile
modifier|*
name|_q_value
parameter_list|,
name|qptrdiff
name|valueToAdd
parameter_list|)
block|{
return|return
name|__e32_atomic_add_rel_ptr
argument_list|(
name|_q_value
argument_list|,
name|valueToAdd
argument_list|)
return|;
block|}
end_function
begin_else
else|#
directive|else
end_else
begin_comment
comment|//Symbian kernels 9.4 and earlier don't expose a suitable API
end_comment
begin_comment
comment|//For ARMv6, the generic atomics are machine coded
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_HAVE_ARMV6
end_ifndef
begin_class
DECL|class|QCriticalSection
class|class
name|QCriticalSection
block|{
public|public:
DECL|function|QCriticalSection
name|QCriticalSection
parameter_list|()
block|{
name|fastlock
operator|.
name|CreateLocal
argument_list|()
expr_stmt|;
block|}
DECL|function|~QCriticalSection
name|~
name|QCriticalSection
parameter_list|()
block|{
name|fastlock
operator|.
name|Close
argument_list|()
expr_stmt|;
block|}
DECL|function|lock
name|void
name|lock
parameter_list|()
block|{
name|fastlock
operator|.
name|Wait
argument_list|()
expr_stmt|;
block|}
DECL|function|unlock
name|void
name|unlock
parameter_list|()
block|{
name|fastlock
operator|.
name|Signal
argument_list|()
expr_stmt|;
block|}
private|private:
DECL|member|fastlock
name|RFastLock
name|fastlock
decl_stmt|;
block|}
class|;
end_class
begin_decl_stmt
DECL|variable|qAtomicCriticalSection
name|QCriticalSection
name|qAtomicCriticalSection
decl_stmt|;
end_decl_stmt
begin_function
name|Q_CORE_EXPORT
DECL|function|QBasicAtomicInt_testAndSetOrdered
name|bool
name|QBasicAtomicInt_testAndSetOrdered
parameter_list|(
specifier|volatile
name|int
modifier|*
name|_q_value
parameter_list|,
name|int
name|expectedValue
parameter_list|,
name|int
name|newValue
parameter_list|)
block|{
name|bool
name|returnValue
init|=
literal|false
decl_stmt|;
name|qAtomicCriticalSection
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
operator|*
name|_q_value
operator|==
name|expectedValue
condition|)
block|{
operator|*
name|_q_value
operator|=
name|newValue
expr_stmt|;
name|returnValue
operator|=
literal|true
expr_stmt|;
block|}
name|qAtomicCriticalSection
operator|.
name|unlock
argument_list|()
expr_stmt|;
return|return
name|returnValue
return|;
block|}
end_function
begin_function
name|Q_CORE_EXPORT
DECL|function|QBasicAtomicInt_fetchAndStoreOrdered
name|int
name|QBasicAtomicInt_fetchAndStoreOrdered
parameter_list|(
specifier|volatile
name|int
modifier|*
name|_q_value
parameter_list|,
name|int
name|newValue
parameter_list|)
block|{
name|int
name|returnValue
decl_stmt|;
name|qAtomicCriticalSection
operator|.
name|lock
argument_list|()
expr_stmt|;
name|returnValue
operator|=
operator|*
name|_q_value
expr_stmt|;
operator|*
name|_q_value
operator|=
name|newValue
expr_stmt|;
name|qAtomicCriticalSection
operator|.
name|unlock
argument_list|()
expr_stmt|;
return|return
name|returnValue
return|;
block|}
end_function
begin_function
name|Q_CORE_EXPORT
DECL|function|QBasicAtomicInt_fetchAndAddOrdered
name|int
name|QBasicAtomicInt_fetchAndAddOrdered
parameter_list|(
specifier|volatile
name|int
modifier|*
name|_q_value
parameter_list|,
name|int
name|valueToAdd
parameter_list|)
block|{
name|int
name|returnValue
decl_stmt|;
name|qAtomicCriticalSection
operator|.
name|lock
argument_list|()
expr_stmt|;
name|returnValue
operator|=
operator|*
name|_q_value
expr_stmt|;
operator|*
name|_q_value
operator|+=
name|valueToAdd
expr_stmt|;
name|qAtomicCriticalSection
operator|.
name|unlock
argument_list|()
expr_stmt|;
return|return
name|returnValue
return|;
block|}
end_function
begin_function
name|Q_CORE_EXPORT
DECL|function|QBasicAtomicPointer_testAndSetOrdered
name|bool
name|QBasicAtomicPointer_testAndSetOrdered
parameter_list|(
name|void
modifier|*
specifier|volatile
modifier|*
name|_q_value
parameter_list|,
name|void
modifier|*
name|expectedValue
parameter_list|,
name|void
modifier|*
name|newValue
parameter_list|)
block|{
name|bool
name|returnValue
init|=
literal|false
decl_stmt|;
name|qAtomicCriticalSection
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
operator|*
name|_q_value
operator|==
name|expectedValue
condition|)
block|{
operator|*
name|_q_value
operator|=
name|newValue
expr_stmt|;
name|returnValue
operator|=
literal|true
expr_stmt|;
block|}
name|qAtomicCriticalSection
operator|.
name|unlock
argument_list|()
expr_stmt|;
return|return
name|returnValue
return|;
block|}
end_function
begin_function
name|Q_CORE_EXPORT
DECL|function|QBasicAtomicPointer_fetchAndStoreOrdered
name|void
modifier|*
name|QBasicAtomicPointer_fetchAndStoreOrdered
parameter_list|(
name|void
modifier|*
specifier|volatile
modifier|*
name|_q_value
parameter_list|,
name|void
modifier|*
name|newValue
parameter_list|)
block|{
name|void
modifier|*
name|returnValue
decl_stmt|;
name|qAtomicCriticalSection
operator|.
name|lock
argument_list|()
expr_stmt|;
name|returnValue
operator|=
operator|*
name|_q_value
expr_stmt|;
operator|*
name|_q_value
operator|=
name|newValue
expr_stmt|;
name|qAtomicCriticalSection
operator|.
name|unlock
argument_list|()
expr_stmt|;
return|return
name|returnValue
return|;
block|}
end_function
begin_function
name|Q_CORE_EXPORT
DECL|function|QBasicAtomicPointer_fetchAndAddOrdered
name|void
modifier|*
name|QBasicAtomicPointer_fetchAndAddOrdered
parameter_list|(
name|void
modifier|*
specifier|volatile
modifier|*
name|_q_value
parameter_list|,
name|qptrdiff
name|valueToAdd
parameter_list|)
block|{
name|void
modifier|*
name|returnValue
decl_stmt|;
name|qAtomicCriticalSection
operator|.
name|lock
argument_list|()
expr_stmt|;
name|returnValue
operator|=
operator|*
name|_q_value
expr_stmt|;
operator|*
name|_q_value
operator|=
cast|reinterpret_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
name|returnValue
argument_list|)
operator|+
name|valueToAdd
expr_stmt|;
name|qAtomicCriticalSection
operator|.
name|unlock
argument_list|()
expr_stmt|;
return|return
name|returnValue
return|;
block|}
end_function
begin_function
name|Q_CORE_EXPORT
DECL|function|QBasicAtomicInt_testAndSetRelaxed
name|bool
name|QBasicAtomicInt_testAndSetRelaxed
parameter_list|(
specifier|volatile
name|int
modifier|*
name|_q_value
parameter_list|,
name|int
name|expectedValue
parameter_list|,
name|int
name|newValue
parameter_list|)
block|{
return|return
name|QBasicAtomicInt_testAndSetOrdered
argument_list|(
name|_q_value
argument_list|,
name|expectedValue
argument_list|,
name|newValue
argument_list|)
return|;
block|}
end_function
begin_function
name|Q_CORE_EXPORT
DECL|function|QBasicAtomicInt_testAndSetAcquire
name|bool
name|QBasicAtomicInt_testAndSetAcquire
parameter_list|(
specifier|volatile
name|int
modifier|*
name|_q_value
parameter_list|,
name|int
name|expectedValue
parameter_list|,
name|int
name|newValue
parameter_list|)
block|{
return|return
name|QBasicAtomicInt_testAndSetOrdered
argument_list|(
name|_q_value
argument_list|,
name|expectedValue
argument_list|,
name|newValue
argument_list|)
return|;
block|}
end_function
begin_function
name|Q_CORE_EXPORT
DECL|function|QBasicAtomicInt_testAndSetRelease
name|bool
name|QBasicAtomicInt_testAndSetRelease
parameter_list|(
specifier|volatile
name|int
modifier|*
name|_q_value
parameter_list|,
name|int
name|expectedValue
parameter_list|,
name|int
name|newValue
parameter_list|)
block|{
return|return
name|QBasicAtomicInt_testAndSetOrdered
argument_list|(
name|_q_value
argument_list|,
name|expectedValue
argument_list|,
name|newValue
argument_list|)
return|;
block|}
end_function
begin_function
name|Q_CORE_EXPORT
DECL|function|QBasicAtomicInt_fetchAndStoreRelaxed
name|int
name|QBasicAtomicInt_fetchAndStoreRelaxed
parameter_list|(
specifier|volatile
name|int
modifier|*
name|_q_value
parameter_list|,
name|int
name|newValue
parameter_list|)
block|{
return|return
name|QBasicAtomicInt_fetchAndStoreOrdered
argument_list|(
name|_q_value
argument_list|,
name|newValue
argument_list|)
return|;
block|}
end_function
begin_function
name|Q_CORE_EXPORT
DECL|function|QBasicAtomicInt_fetchAndStoreAcquire
name|int
name|QBasicAtomicInt_fetchAndStoreAcquire
parameter_list|(
specifier|volatile
name|int
modifier|*
name|_q_value
parameter_list|,
name|int
name|newValue
parameter_list|)
block|{
return|return
name|QBasicAtomicInt_fetchAndStoreOrdered
argument_list|(
name|_q_value
argument_list|,
name|newValue
argument_list|)
return|;
block|}
end_function
begin_function
name|Q_CORE_EXPORT
DECL|function|QBasicAtomicInt_fetchAndStoreRelease
name|int
name|QBasicAtomicInt_fetchAndStoreRelease
parameter_list|(
specifier|volatile
name|int
modifier|*
name|_q_value
parameter_list|,
name|int
name|newValue
parameter_list|)
block|{
return|return
name|QBasicAtomicInt_fetchAndStoreOrdered
argument_list|(
name|_q_value
argument_list|,
name|newValue
argument_list|)
return|;
block|}
end_function
begin_function
name|Q_CORE_EXPORT
DECL|function|QBasicAtomicInt_fetchAndAddRelaxed
name|int
name|QBasicAtomicInt_fetchAndAddRelaxed
parameter_list|(
specifier|volatile
name|int
modifier|*
name|_q_value
parameter_list|,
name|int
name|valueToAdd
parameter_list|)
block|{
return|return
name|QBasicAtomicInt_fetchAndAddOrdered
argument_list|(
name|_q_value
argument_list|,
name|valueToAdd
argument_list|)
return|;
block|}
end_function
begin_function
name|Q_CORE_EXPORT
DECL|function|QBasicAtomicInt_fetchAndAddAcquire
name|int
name|QBasicAtomicInt_fetchAndAddAcquire
parameter_list|(
specifier|volatile
name|int
modifier|*
name|_q_value
parameter_list|,
name|int
name|valueToAdd
parameter_list|)
block|{
return|return
name|QBasicAtomicInt_fetchAndAddOrdered
argument_list|(
name|_q_value
argument_list|,
name|valueToAdd
argument_list|)
return|;
block|}
end_function
begin_function
name|Q_CORE_EXPORT
DECL|function|QBasicAtomicInt_fetchAndAddRelease
name|int
name|QBasicAtomicInt_fetchAndAddRelease
parameter_list|(
specifier|volatile
name|int
modifier|*
name|_q_value
parameter_list|,
name|int
name|valueToAdd
parameter_list|)
block|{
return|return
name|QBasicAtomicInt_fetchAndAddOrdered
argument_list|(
name|_q_value
argument_list|,
name|valueToAdd
argument_list|)
return|;
block|}
end_function
begin_function
name|Q_CORE_EXPORT
DECL|function|QBasicAtomicPointer_testAndSetRelaxed
name|bool
name|QBasicAtomicPointer_testAndSetRelaxed
parameter_list|(
name|void
modifier|*
specifier|volatile
modifier|*
name|_q_value
parameter_list|,
name|void
modifier|*
name|expectedValue
parameter_list|,
name|void
modifier|*
name|newValue
parameter_list|)
block|{
return|return
name|QBasicAtomicPointer_testAndSetOrdered
argument_list|(
name|_q_value
argument_list|,
name|expectedValue
argument_list|,
name|newValue
argument_list|)
return|;
block|}
end_function
begin_function
name|Q_CORE_EXPORT
DECL|function|QBasicAtomicPointer_testAndSetAcquire
name|bool
name|QBasicAtomicPointer_testAndSetAcquire
parameter_list|(
name|void
modifier|*
specifier|volatile
modifier|*
name|_q_value
parameter_list|,
name|void
modifier|*
name|expectedValue
parameter_list|,
name|void
modifier|*
name|newValue
parameter_list|)
block|{
return|return
name|QBasicAtomicPointer_testAndSetOrdered
argument_list|(
name|_q_value
argument_list|,
name|expectedValue
argument_list|,
name|newValue
argument_list|)
return|;
block|}
end_function
begin_function
name|Q_CORE_EXPORT
DECL|function|QBasicAtomicPointer_testAndSetRelease
name|bool
name|QBasicAtomicPointer_testAndSetRelease
parameter_list|(
name|void
modifier|*
specifier|volatile
modifier|*
name|_q_value
parameter_list|,
name|void
modifier|*
name|expectedValue
parameter_list|,
name|void
modifier|*
name|newValue
parameter_list|)
block|{
return|return
name|QBasicAtomicPointer_testAndSetOrdered
argument_list|(
name|_q_value
argument_list|,
name|expectedValue
argument_list|,
name|newValue
argument_list|)
return|;
block|}
end_function
begin_function
name|Q_CORE_EXPORT
DECL|function|QBasicAtomicPointer_fetchAndStoreRelaxed
name|void
modifier|*
name|QBasicAtomicPointer_fetchAndStoreRelaxed
parameter_list|(
name|void
modifier|*
specifier|volatile
modifier|*
name|_q_value
parameter_list|,
name|void
modifier|*
name|newValue
parameter_list|)
block|{
return|return
name|QBasicAtomicPointer_fetchAndStoreOrdered
argument_list|(
name|_q_value
argument_list|,
name|newValue
argument_list|)
return|;
block|}
end_function
begin_function
name|Q_CORE_EXPORT
DECL|function|QBasicAtomicPointer_fetchAndStoreAcquire
name|void
modifier|*
name|QBasicAtomicPointer_fetchAndStoreAcquire
parameter_list|(
name|void
modifier|*
specifier|volatile
modifier|*
name|_q_value
parameter_list|,
name|void
modifier|*
name|newValue
parameter_list|)
block|{
return|return
name|QBasicAtomicPointer_fetchAndStoreOrdered
argument_list|(
name|_q_value
argument_list|,
name|newValue
argument_list|)
return|;
block|}
end_function
begin_function
name|Q_CORE_EXPORT
DECL|function|QBasicAtomicPointer_fetchAndStoreRelease
name|void
modifier|*
name|QBasicAtomicPointer_fetchAndStoreRelease
parameter_list|(
name|void
modifier|*
specifier|volatile
modifier|*
name|_q_value
parameter_list|,
name|void
modifier|*
name|newValue
parameter_list|)
block|{
return|return
name|QBasicAtomicPointer_fetchAndStoreOrdered
argument_list|(
name|_q_value
argument_list|,
name|newValue
argument_list|)
return|;
block|}
end_function
begin_function
name|Q_CORE_EXPORT
DECL|function|QBasicAtomicPointer_fetchAndAddRelaxed
name|void
modifier|*
name|QBasicAtomicPointer_fetchAndAddRelaxed
parameter_list|(
name|void
modifier|*
specifier|volatile
modifier|*
name|_q_value
parameter_list|,
name|qptrdiff
name|valueToAdd
parameter_list|)
block|{
return|return
name|QBasicAtomicPointer_fetchAndAddOrdered
argument_list|(
name|_q_value
argument_list|,
name|valueToAdd
argument_list|)
return|;
block|}
end_function
begin_function
name|Q_CORE_EXPORT
DECL|function|QBasicAtomicPointer_fetchAndAddAcquire
name|void
modifier|*
name|QBasicAtomicPointer_fetchAndAddAcquire
parameter_list|(
name|void
modifier|*
specifier|volatile
modifier|*
name|_q_value
parameter_list|,
name|qptrdiff
name|valueToAdd
parameter_list|)
block|{
return|return
name|QBasicAtomicPointer_fetchAndAddOrdered
argument_list|(
name|_q_value
argument_list|,
name|valueToAdd
argument_list|)
return|;
block|}
end_function
begin_function
name|Q_CORE_EXPORT
DECL|function|QBasicAtomicPointer_fetchAndAddRelease
name|void
modifier|*
name|QBasicAtomicPointer_fetchAndAddRelease
parameter_list|(
name|void
modifier|*
specifier|volatile
modifier|*
name|_q_value
parameter_list|,
name|qptrdiff
name|valueToAdd
parameter_list|)
block|{
return|return
name|QBasicAtomicPointer_fetchAndAddOrdered
argument_list|(
name|_q_value
argument_list|,
name|valueToAdd
argument_list|)
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_HAVE_ARMV6
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// SYMBIAN_E32_ATOMIC_API
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
