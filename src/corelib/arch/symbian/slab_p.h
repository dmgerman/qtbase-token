begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|__KERNEL_MODE__
end_ifndef
begin_decl_stmt
DECL|variable|slab
name|class
name|slab
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|slabhdr
name|class
name|slabhdr
decl_stmt|;
end_decl_stmt
begin_define
DECL|macro|MAXSLABSIZE
define|#
directive|define
name|MAXSLABSIZE
value|56
end_define
begin_define
DECL|macro|PAGESHIFT
define|#
directive|define
name|PAGESHIFT
value|12
end_define
begin_define
DECL|macro|PAGESIZE
define|#
directive|define
name|PAGESIZE
value|(1<<PAGESHIFT)
end_define
begin_define
DECL|macro|SLABSHIFT
define|#
directive|define
name|SLABSHIFT
value|10
end_define
begin_define
DECL|macro|SLABSIZE
define|#
directive|define
name|SLABSIZE
value|(1<< SLABSHIFT)
end_define
begin_define
DECL|macro|CELLALIGN
define|#
directive|define
name|CELLALIGN
value|8
end_define
begin_decl_stmt
DECL|variable|slabfull
specifier|const
name|unsigned
name|slabfull
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|slabsperpage
specifier|const
name|TInt
name|slabsperpage
init|=
call|(
name|int
call|)
argument_list|(
name|PAGESIZE
operator|/
name|SLABSIZE
argument_list|)
decl_stmt|;
end_decl_stmt
begin_define
DECL|macro|HIBIT
define|#
directive|define
name|HIBIT
parameter_list|(
name|bits
parameter_list|)
value|(((unsigned)bits& 0xc) ? 2 + ((unsigned)bits>>3) : ((unsigned) bits>>1))
end_define
begin_define
DECL|macro|LOWBIT
define|#
directive|define
name|LOWBIT
parameter_list|(
name|bits
parameter_list|)
value|(((unsigned) bits&3) ? 1 - ((unsigned)bits&1) : 3 - (((unsigned)bits>>2)&1))
end_define
begin_define
DECL|macro|ZEROBITS
define|#
directive|define
name|ZEROBITS
parameter_list|(
name|header
parameter_list|)
value|(((unsigned)header& 0x70000000) ? 0 : 1)
end_define
begin_decl_stmt
name|class
name|slabhdr
block|{
name|public
label|:
name|unsigned
name|iHeader
decl_stmt|;
comment|// made up of
comment|// bits   |    31    | 30..28 | 27..18 | 17..12 |  11..8  |   7..0   |
comment|//        +----------+--------+--------+--------+---------+----------+
comment|// field  | floating |  zero  | used-4 |  size  | pagemap | free pos |
comment|//
name|slab
modifier|*
modifier|*
name|iParent
decl_stmt|;
comment|// reference to iParent's pointer to this slab in tree
name|slab
modifier|*
name|iChild1
decl_stmt|;
comment|// 1st iChild in tree
name|slab
modifier|*
name|iChild2
decl_stmt|;
comment|// 2nd iChild in tree
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
DECL|variable|KMaxSlabPayload
specifier|const
name|TInt
name|KMaxSlabPayload
init|=
name|SLABSIZE
operator|-
sizeof|sizeof
argument_list|(
name|slabhdr
argument_list|)
decl_stmt|;
end_decl_stmt
begin_define
DECL|macro|MAXUSEDM4BITS
define|#
directive|define
name|MAXUSEDM4BITS
value|0x0fc00000
end_define
begin_define
DECL|macro|FLOATING_BIT
define|#
directive|define
name|FLOATING_BIT
value|0x80000000
end_define
begin_function
DECL|function|HeaderFloating
specifier|inline
name|unsigned
name|HeaderFloating
parameter_list|(
name|unsigned
name|h
parameter_list|)
block|{
return|return
operator|(
name|h
operator|&
literal|0x80000000
operator|)
return|;
block|}
end_function
begin_decl_stmt
DECL|variable|maxuse
specifier|const
name|unsigned
name|maxuse
init|=
operator|(
name|SLABSIZE
operator|-
sizeof|sizeof
argument_list|(
name|slabhdr
argument_list|)
operator|)
operator|>>
literal|2
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|firstpos
specifier|const
name|unsigned
name|firstpos
init|=
sizeof|sizeof
argument_list|(
name|slabhdr
argument_list|)
operator|>>
literal|2
decl_stmt|;
end_decl_stmt
begin_ifdef
ifdef|#
directive|ifdef
name|_DEBUG
end_ifdef
begin_define
DECL|macro|CHECKTREE
define|#
directive|define
name|CHECKTREE
parameter_list|(
name|x
parameter_list|)
value|DoCheckSlabTree(x,EFalse)
end_define
begin_define
DECL|macro|CHECKSLAB
define|#
directive|define
name|CHECKSLAB
parameter_list|(
name|s
parameter_list|,
name|t
parameter_list|,
name|p
parameter_list|)
value|DoCheckSlab(s,t,p)
end_define
begin_define
DECL|macro|CHECKSLABBFR
define|#
directive|define
name|CHECKSLABBFR
parameter_list|(
name|s
parameter_list|,
name|p
parameter_list|)
value|{TUint32 b[4]; BuildPartialSlabBitmap(b,s,p);}
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|CHECKTREE
define|#
directive|define
name|CHECKTREE
parameter_list|(
name|x
parameter_list|)
value|(void)0
end_define
begin_define
DECL|macro|CHECKSLAB
define|#
directive|define
name|CHECKSLAB
parameter_list|(
name|s
parameter_list|,
name|t
parameter_list|,
name|p
parameter_list|)
value|(void)0
end_define
begin_define
DECL|macro|CHECKSLABBFR
define|#
directive|define
name|CHECKSLABBFR
parameter_list|(
name|s
parameter_list|,
name|p
parameter_list|)
value|(void)0
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|class
name|slabset
block|{
name|public
label|:
name|slab
modifier|*
name|iPartial
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
name|class
name|slab
range|:
name|public
name|slabhdr
block|{
name|public
operator|:
name|void
name|Init
argument_list|(
argument|unsigned clz
argument_list|)
block|;
comment|//static slab* SlabFor( void* p);
specifier|static
name|slab
operator|*
name|SlabFor
argument_list|(
specifier|const
name|void
operator|*
name|p
argument_list|)
block|;
name|unsigned
name|char
name|iPayload
index|[
name|SLABSIZE
operator|-
sizeof|sizeof
argument_list|(
name|slabhdr
argument_list|)
index|]
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|page
block|{
name|public
label|:
specifier|inline
specifier|static
name|page
modifier|*
name|PageFor
parameter_list|(
name|slab
modifier|*
name|s
parameter_list|)
function_decl|;
comment|//slab iSlabs;
name|slab
name|iSlabs
index|[
name|slabsperpage
index|]
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_expr_stmt
DECL|function|PageFor
specifier|inline
name|page
operator|*
name|page
operator|::
name|PageFor
argument_list|(
argument|slab* s
argument_list|)
block|{
return|return
name|reinterpret_cast
operator|<
name|page
operator|*
operator|>
operator|(
operator|(
name|unsigned
argument_list|(
name|s
argument_list|)
operator|)
operator|&
operator|~
operator|(
name|PAGESIZE
operator|-
literal|1
operator|)
operator|)
return|;
block|}
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// __KERNEL_MODE__
end_comment
end_unit
