begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qt_hybridheap_symbian_p.h"
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|QT_USE_NEW_SYMBIAN_ALLOCATOR
end_ifdef
begin_decl_stmt
DECL|variable|KHeapShrinkHysRatio
specifier|extern
specifier|const
name|TInt
name|KHeapShrinkHysRatio
init|=
literal|0x800
decl_stmt|;
end_decl_stmt
begin_comment
comment|/*  * \internal  * Called from the qtmain.lib application wrapper.  * Create a new heap as requested, but use the new allocator  */
end_comment
begin_function
DECL|function|qt_symbian_SetupThreadHeap
name|Q_CORE_EXPORT
name|TInt
name|qt_symbian_SetupThreadHeap
parameter_list|(
name|TBool
name|aNotFirst
parameter_list|,
name|SStdEpocThreadCreateInfo
modifier|&
name|aInfo
parameter_list|)
block|{
name|TInt
name|r
init|=
name|KErrNone
decl_stmt|;
if|if
condition|(
operator|!
name|aInfo
operator|.
name|iAllocator
operator|&&
name|aInfo
operator|.
name|iHeapInitialSize
operator|>
literal|0
condition|)
block|{
comment|// new heap required
name|RHeap
modifier|*
name|pH
init|=
name|NULL
decl_stmt|;
name|r
operator|=
name|UserHeap
operator|::
name|CreateThreadHeap
argument_list|(
name|aInfo
argument_list|,
name|pH
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|aInfo
operator|.
name|iAllocator
condition|)
block|{
comment|// sharing a heap
name|RAllocator
modifier|*
name|pA
init|=
name|aInfo
operator|.
name|iAllocator
decl_stmt|;
name|pA
operator|->
name|Open
argument_list|()
expr_stmt|;
name|User
operator|::
name|SwitchAllocator
argument_list|(
name|pA
argument_list|)
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|NO_NAMED_LOCAL_CHUNKS
end_ifndef
begin_function
DECL|function|SetThreadHeap
name|void
name|TChunkCreateInfo
operator|::
name|SetThreadHeap
parameter_list|(
name|TInt
name|aInitialSize
parameter_list|,
name|TInt
name|aMaxSize
parameter_list|,
specifier|const
name|TDesC
modifier|&
name|aName
parameter_list|)
block|{
name|iType
operator|=
name|TChunkCreate
operator|::
name|ENormal
operator||
name|TChunkCreate
operator|::
name|EData
expr_stmt|;
name|iMaxSize
operator|=
name|aMaxSize
expr_stmt|;
name|iInitialBottom
operator|=
literal|0
expr_stmt|;
name|iInitialTop
operator|=
name|aInitialSize
expr_stmt|;
name|iAttributes
operator||=
name|TChunkCreate
operator|::
name|ELocalNamed
expr_stmt|;
name|iName
operator|=
operator|&
name|aName
expr_stmt|;
name|iOwnerType
operator|=
name|EOwnerThread
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// NO_NAMED_LOCAL_CHUNKS
end_comment
begin_function
DECL|function|Panic
name|void
name|Panic
parameter_list|(
name|TCdtPanic
name|reason
parameter_list|)
block|{
name|_LIT
argument_list|(
name|KCat
argument_list|,
literal|"QtHybridHeap"
argument_list|)
expr_stmt|;
name|User
operator|::
name|Panic
argument_list|(
name|KCat
argument_list|,
name|reason
argument_list|)
expr_stmt|;
block|}
end_function
begin_else
else|#
directive|else
end_else
begin_comment
comment|/* QT_USE_NEW_SYMBIAN_ALLOCATOR */
end_comment
begin_include
include|#
directive|include
file|<e32std.h>
end_include
begin_comment
comment|/*  * \internal  * Called from the qtmain.lib application wrapper.  * Create a new heap as requested, using the default system allocator  */
end_comment
begin_function
DECL|function|qt_symbian_SetupThreadHeap
name|Q_CORE_EXPORT
name|TInt
name|qt_symbian_SetupThreadHeap
parameter_list|(
name|TBool
name|aNotFirst
parameter_list|,
name|SStdEpocThreadCreateInfo
modifier|&
name|aInfo
parameter_list|)
block|{
return|return
name|UserHeap
operator|::
name|SetupThreadHeap
argument_list|(
name|aNotFirst
argument_list|,
name|aInfo
argument_list|)
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* QT_USE_NEW_SYMBIAN_ALLOCATOR */
end_comment
end_unit
