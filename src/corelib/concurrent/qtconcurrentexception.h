begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QTCONCURRENT_EXCEPTION_H
end_ifndef
begin_define
DECL|macro|QTCONCURRENT_EXCEPTION_H
define|#
directive|define
name|QTCONCURRENT_EXCEPTION_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qglobal.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QFUTURE
end_ifndef
begin_include
include|#
directive|include
file|<QtCore/qatomic.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qshareddata.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_EXCEPTIONS
end_ifndef
begin_include
include|#
directive|include
file|<exception>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_function
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
DECL|function|QT_MODULE
name|QT_MODULE
parameter_list|(
name|Core
parameter_list|)
name|namespace
name|QtConcurrent
decl_stmt|{
ifndef|#
directive|ifndef
name|QT_NO_EXCEPTIONS
decl_stmt|class Q_CORE_EXPORT Exception : public std::exception
block|{
name|public
label|:
name|virtual
name|void
name|raise
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|Exception
operator|*
name|clone
argument_list|()
specifier|const
expr_stmt|;
block|}
end_function
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
name|class
name|Q_CORE_EXPORT
name|UnhandledException
range|:
name|public
name|Exception
block|{
name|public
operator|:
name|void
name|raise
argument_list|()
specifier|const
block|;
name|Exception
operator|*
name|clone
argument_list|()
specifier|const
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|namespace
name|internal
block|{
name|class
name|Base
decl_stmt|;
name|class
name|ExceptionHolder
block|{
name|public
label|:
name|ExceptionHolder
argument_list|(
name|Exception
operator|*
name|exception
operator|=
literal|0
argument_list|)
expr_stmt|;
name|ExceptionHolder
argument_list|(
specifier|const
name|ExceptionHolder
operator|&
name|other
argument_list|)
expr_stmt|;
name|void
name|operator
init|=
operator|(
specifier|const
name|ExceptionHolder
operator|&
name|other
operator|)
decl_stmt|;
operator|~
name|ExceptionHolder
argument_list|()
expr_stmt|;
name|Exception
operator|*
name|exception
argument_list|()
specifier|const
expr_stmt|;
name|QExplicitlySharedDataPointer
operator|<
name|Base
operator|>
name|base
expr_stmt|;
block|}
empty_stmt|;
name|class
name|Q_CORE_EXPORT
name|ExceptionStore
block|{
name|public
label|:
name|void
name|setException
parameter_list|(
specifier|const
name|Exception
modifier|&
name|e
parameter_list|)
function_decl|;
name|bool
name|hasException
argument_list|()
specifier|const
expr_stmt|;
name|ExceptionHolder
name|exception
parameter_list|()
function_decl|;
name|void
name|throwPossibleException
parameter_list|()
function_decl|;
name|bool
name|hasThrown
argument_list|()
specifier|const
expr_stmt|;
name|ExceptionHolder
name|exceptionHolder
decl_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt
begin_comment
comment|// namespace internal
end_comment
begin_else
else|#
directive|else
end_else
begin_comment
comment|// QT_NO_EXCEPTIONS
end_comment
begin_decl_stmt
name|namespace
name|internal
block|{
name|class
name|Q_CORE_EXPORT
name|ExceptionStore
block|{
name|public
label|:
name|ExceptionStore
argument_list|()
block|{ }
specifier|inline
name|void
name|throwPossibleException
argument_list|()
specifier|const
block|{}
block|}
empty_stmt|;
block|}
end_decl_stmt
begin_comment
comment|// namespace internal
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
unit|}
comment|// namespace QtConcurrent
end_comment
begin_macro
unit|QT_END_NAMESPACE
name|QT_END_HEADER
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_CONCURRENT
end_comment
begin_endif
endif|#
directive|endif
end_endif
end_unit
