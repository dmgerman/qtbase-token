begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QTCONCURRENT_MAP_H
end_ifndef
begin_define
DECL|macro|QTCONCURRENT_MAP_H
define|#
directive|define
name|QTCONCURRENT_MAP_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qglobal.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CONCURRENT
end_ifndef
begin_include
include|#
directive|include
file|<QtCore/qtconcurrentmapkernel.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qtconcurrentreducekernel.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qtconcurrentfunctionwrappers.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qstringlist.h>
end_include
begin_function
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
DECL|function|QT_MODULE
name|QT_MODULE
parameter_list|(
name|Core
parameter_list|)
ifdef|#
directive|ifdef
name|qdoc
name|namespace
name|QtConcurrent
decl_stmt|{      QFuture<void> map(Sequence&sequence
operator|,
decl_stmt|MapFunction function
end_function
begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt
begin_expr_stmt
name|QFuture
operator|<
name|void
operator|>
name|map
argument_list|(
argument|Iterator begin
argument_list|,
argument|Iterator end
argument_list|,
argument|MapFunction function
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|QFuture
operator|<
name|T
operator|>
name|mapped
argument_list|(
argument|const Sequence&sequence
argument_list|,
argument|MapFunction function
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|QFuture
operator|<
name|T
operator|>
name|mapped
argument_list|(
argument|ConstIterator begin
argument_list|,
argument|ConstIterator end
argument_list|,
argument|MapFunction function
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|QFuture
operator|<
name|T
operator|>
name|mappedReduced
argument_list|(
argument|const Sequence&sequence
argument_list|,
argument|MapFunction function
argument_list|,
argument|ReduceFunction function
argument_list|,
argument|QtConcurrent::ReduceOptions options = UnorderedReduce | SequentialReduce
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|QFuture
operator|<
name|T
operator|>
name|mappedReduced
argument_list|(
argument|ConstIterator begin
argument_list|,
argument|ConstIterator end
argument_list|,
argument|MapFunction function
argument_list|,
argument|ReduceFunction function
argument_list|,
argument|QtConcurrent::ReduceOptions options = UnorderedReduce | SequentialReduce
argument_list|)
expr_stmt|;
end_expr_stmt
begin_function_decl
name|void
name|blockingMap
parameter_list|(
name|Sequence
modifier|&
name|sequence
parameter_list|,
name|MapFunction
name|function
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|blockingMap
parameter_list|(
name|Iterator
name|begin
parameter_list|,
name|Iterator
name|end
parameter_list|,
name|MapFunction
name|function
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|T
name|blockingMapped
argument_list|(
argument|const Sequence&sequence
argument_list|,
argument|MapFunction function
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|T
name|blockingMapped
argument_list|(
argument|ConstIterator begin
argument_list|,
argument|ConstIterator end
argument_list|,
argument|MapFunction function
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|T
name|blockingMappedReduced
argument_list|(
argument|const Sequence&sequence
argument_list|,
argument|MapFunction function
argument_list|,
argument|ReduceFunction function
argument_list|,
argument|QtConcurrent::ReduceOptions options = UnorderedReduce | SequentialReduce
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|T
name|blockingMappedReduced
argument_list|(
argument|ConstIterator begin
argument_list|,
argument|ConstIterator end
argument_list|,
argument|MapFunction function
argument_list|,
argument|ReduceFunction function
argument_list|,
argument|QtConcurrent::ReduceOptions options = UnorderedReduce | SequentialReduce
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
unit|}
comment|// namespace QtConcurrent
end_comment
begin_else
else|#
directive|else
end_else
begin_macro
unit|namespace
name|QtConcurrent
end_macro
begin_block
block|{
comment|// map() on sequences
name|template
operator|<
name|typename
name|Sequence
operator|,
name|typename
name|MapFunctor
operator|>
name|QFuture
operator|<
name|void
operator|>
name|map
argument_list|(
argument|Sequence&sequence
argument_list|,
argument|MapFunctor map
argument_list|)
block|{
return|return
name|startMap
argument_list|(
name|sequence
operator|.
name|begin
argument_list|()
argument_list|,
name|sequence
operator|.
name|end
argument_list|()
argument_list|,
name|map
argument_list|)
return|;
block|}
name|template
operator|<
name|typename
name|Sequence
operator|,
name|typename
name|T
operator|,
name|typename
name|U
operator|>
name|QFuture
operator|<
name|void
operator|>
name|map
argument_list|(
argument|Sequence&sequence
argument_list|,
argument|T (map)(U)
argument_list|)
block|{
return|return
name|startMap
argument_list|(
name|sequence
operator|.
name|begin
argument_list|()
argument_list|,
name|sequence
operator|.
name|end
argument_list|()
argument_list|,
name|FunctionWrapper1
operator|<
name|T
argument_list|,
name|U
operator|>
operator|(
name|map
operator|)
argument_list|)
return|;
block|}
name|template
operator|<
name|typename
name|Sequence
operator|,
name|typename
name|T
operator|,
name|typename
name|C
operator|>
name|QFuture
operator|<
name|void
operator|>
name|map
argument_list|(
argument|Sequence&sequence
argument_list|,
argument|T (C::*map)()
argument_list|)
block|{
return|return
name|startMap
argument_list|(
name|sequence
operator|.
name|begin
argument_list|()
argument_list|,
name|sequence
operator|.
name|end
argument_list|()
argument_list|,
name|MemberFunctionWrapper
operator|<
name|T
argument_list|,
name|C
operator|>
operator|(
name|map
operator|)
argument_list|)
return|;
block|}
comment|// map() on iterators
name|template
operator|<
name|typename
name|Iterator
operator|,
name|typename
name|MapFunctor
operator|>
name|QFuture
operator|<
name|void
operator|>
name|map
argument_list|(
argument|Iterator begin
argument_list|,
argument|Iterator end
argument_list|,
argument|MapFunctor map
argument_list|)
block|{
return|return
name|startMap
argument_list|(
name|begin
argument_list|,
name|end
argument_list|,
name|map
argument_list|)
return|;
block|}
name|template
operator|<
name|typename
name|Iterator
operator|,
name|typename
name|T
operator|,
name|typename
name|U
operator|>
name|QFuture
operator|<
name|void
operator|>
name|map
argument_list|(
argument|Iterator begin
argument_list|,
argument|Iterator end
argument_list|,
argument|T (map)(U)
argument_list|)
block|{
return|return
name|startMap
argument_list|(
name|begin
argument_list|,
name|end
argument_list|,
name|FunctionWrapper1
operator|<
name|T
argument_list|,
name|U
operator|>
operator|(
name|map
operator|)
argument_list|)
return|;
block|}
name|template
operator|<
name|typename
name|Iterator
operator|,
name|typename
name|T
operator|,
name|typename
name|C
operator|>
name|QFuture
operator|<
name|void
operator|>
name|map
argument_list|(
argument|Iterator begin
argument_list|,
argument|Iterator end
argument_list|,
argument|T (C::*map)()
argument_list|)
block|{
return|return
name|startMap
argument_list|(
name|begin
argument_list|,
name|end
argument_list|,
name|MemberFunctionWrapper
operator|<
name|T
argument_list|,
name|C
operator|>
operator|(
name|map
operator|)
argument_list|)
return|;
block|}
comment|// mappedReduced() for sequences.
name|template
operator|<
name|typename
name|ResultType
operator|,
name|typename
name|Sequence
operator|,
name|typename
name|MapFunctor
operator|,
name|typename
name|ReduceFunctor
operator|>
name|QFuture
operator|<
name|ResultType
operator|>
name|mappedReduced
argument_list|(
argument|const Sequence&sequence
argument_list|,
argument|MapFunctor map
argument_list|,
argument|ReduceFunctor reduce
argument_list|,
argument|ReduceOptions options = ReduceOptions(UnorderedReduce | SequentialReduce)
argument_list|)
block|{
return|return
name|startMappedReduced
operator|<
name|typename
name|MapFunctor
operator|::
name|result_type
operator|,
name|ResultType
operator|>
operator|(
name|sequence
operator|,
name|map
operator|,
name|reduce
operator|,
name|options
operator|)
return|;
block|}
name|template
operator|<
name|typename
name|Sequence
operator|,
name|typename
name|MapFunctor
operator|,
name|typename
name|T
operator|,
name|typename
name|U
operator|,
name|typename
name|V
operator|>
name|QFuture
operator|<
name|U
operator|>
name|mappedReduced
argument_list|(
argument|const Sequence&sequence
argument_list|,
argument|MapFunctor map
argument_list|,
argument|T (reduce)(U&, V)
argument_list|,
argument|ReduceOptions options = ReduceOptions(UnorderedReduce | SequentialReduce)
argument_list|)
block|{
return|return
name|startMappedReduced
operator|<
name|typename
name|MapFunctor
operator|::
name|result_type
operator|,
name|U
operator|>
operator|(
name|sequence
operator|,
name|map
operator|,
name|FunctionWrapper2
operator|<
name|T
operator|,
name|U
operator|&
operator|,
name|V
operator|>
operator|(
name|reduce
operator|)
operator|,
name|options
operator|)
return|;
block|}
name|template
operator|<
name|typename
name|Sequence
operator|,
name|typename
name|MapFunctor
operator|,
name|typename
name|T
operator|,
name|typename
name|C
operator|,
name|typename
name|U
operator|>
name|QFuture
operator|<
name|C
operator|>
name|mappedReduced
argument_list|(
argument|const Sequence&sequence
argument_list|,
argument|MapFunctor map
argument_list|,
argument|T (C::*reduce)(U)
argument_list|,
argument|ReduceOptions options = ReduceOptions(UnorderedReduce | SequentialReduce)
argument_list|)
block|{
return|return
name|startMappedReduced
operator|<
name|typename
name|MapFunctor
operator|::
name|result_type
operator|,
name|C
operator|>
operator|(
name|sequence
operator|,
name|map
operator|,
name|MemberFunctionWrapper1
operator|<
name|T
operator|,
name|C
operator|,
name|U
operator|>
operator|(
name|reduce
operator|)
operator|,
name|options
operator|)
return|;
block|}
name|template
operator|<
name|typename
name|ResultType
operator|,
name|typename
name|Sequence
operator|,
name|typename
name|T
operator|,
name|typename
name|U
operator|,
name|typename
name|ReduceFunctor
operator|>
name|QFuture
operator|<
name|ResultType
operator|>
name|mappedReduced
argument_list|(
argument|const Sequence&sequence
argument_list|,
argument|T (map)(U)
argument_list|,
argument|ReduceFunctor reduce
argument_list|,
argument|ReduceOptions options = ReduceOptions(UnorderedReduce | SequentialReduce)
argument_list|)
block|{
return|return
name|startMappedReduced
operator|<
name|T
operator|,
name|ResultType
operator|>
operator|(
name|sequence
operator|,
name|FunctionWrapper1
operator|<
name|T
operator|,
name|U
operator|>
operator|(
name|map
operator|)
operator|,
name|reduce
operator|,
name|options
operator|)
return|;
block|}
name|template
operator|<
name|typename
name|ResultType
operator|,
name|typename
name|Sequence
operator|,
name|typename
name|T
operator|,
name|typename
name|C
operator|,
name|typename
name|ReduceFunctor
operator|>
name|QFuture
operator|<
name|ResultType
operator|>
name|mappedReduced
argument_list|(
argument|const Sequence&sequence
argument_list|,
argument|T (C::*map)() const
argument_list|,
argument|ReduceFunctor reduce
argument_list|,
argument|ReduceOptions options = ReduceOptions(UnorderedReduce | SequentialReduce)
argument_list|)
block|{
return|return
name|startMappedReduced
operator|<
name|T
operator|,
name|ResultType
operator|>
operator|(
name|sequence
operator|,
name|ConstMemberFunctionWrapper
operator|<
name|T
operator|,
name|C
operator|>
operator|(
name|map
operator|)
operator|,
name|reduce
operator|,
name|options
operator|)
return|;
block|}
name|template
operator|<
name|typename
name|Sequence
operator|,
name|typename
name|T
operator|,
name|typename
name|U
operator|,
name|typename
name|V
operator|,
name|typename
name|W
operator|,
name|typename
name|X
operator|>
name|QFuture
operator|<
name|W
operator|>
name|mappedReduced
argument_list|(
argument|const Sequence&sequence
argument_list|,
argument|T (map)(U)
argument_list|,
argument|V (reduce)(W&, X)
argument_list|,
argument|ReduceOptions options = ReduceOptions(UnorderedReduce | SequentialReduce)
argument_list|)
block|{
return|return
name|startMappedReduced
operator|<
name|T
operator|,
name|W
operator|>
operator|(
name|sequence
operator|,
name|FunctionWrapper1
operator|<
name|T
operator|,
name|U
operator|>
operator|(
name|map
operator|)
operator|,
name|FunctionWrapper2
operator|<
name|V
operator|,
name|W
operator|&
operator|,
name|X
operator|>
operator|(
name|reduce
operator|)
operator|,
name|options
operator|)
return|;
block|}
name|template
operator|<
name|typename
name|Sequence
operator|,
name|typename
name|T
operator|,
name|typename
name|C
operator|,
name|typename
name|U
operator|,
name|typename
name|V
operator|,
name|typename
name|W
operator|>
name|QFuture
operator|<
name|V
operator|>
name|mappedReduced
argument_list|(
argument|const Sequence&sequence
argument_list|,
argument|T (C::*map)() const
argument_list|,
argument|U (reduce)(V&, W)
argument_list|,
argument|ReduceOptions options = ReduceOptions(UnorderedReduce | SequentialReduce)
argument_list|)
block|{
return|return
name|startMappedReduced
operator|<
name|T
operator|,
name|V
operator|>
operator|(
name|sequence
operator|,
name|ConstMemberFunctionWrapper
operator|<
name|T
operator|,
name|C
operator|>
operator|(
name|map
operator|)
operator|,
name|FunctionWrapper2
operator|<
name|U
operator|,
name|V
operator|&
operator|,
name|W
operator|>
operator|(
name|reduce
operator|)
operator|,
name|options
operator|)
return|;
block|}
name|template
operator|<
name|typename
name|Sequence
operator|,
name|typename
name|T
operator|,
name|typename
name|U
operator|,
name|typename
name|V
operator|,
name|typename
name|C
operator|,
name|typename
name|W
operator|>
name|QFuture
operator|<
name|C
operator|>
name|mappedReduced
argument_list|(
argument|const Sequence&sequence
argument_list|,
argument|T (map)(U)
argument_list|,
argument|V (C::*reduce)(W)
argument_list|,
argument|ReduceOptions options = ReduceOptions(UnorderedReduce | SequentialReduce)
argument_list|)
block|{
return|return
name|startMappedReduced
operator|<
name|T
operator|,
name|C
operator|>
operator|(
name|sequence
operator|,
name|FunctionWrapper1
operator|<
name|T
operator|,
name|U
operator|>
operator|(
name|map
operator|)
operator|,
name|MemberFunctionWrapper1
operator|<
name|V
operator|,
name|C
operator|,
name|W
operator|>
operator|(
name|reduce
operator|)
operator|,
name|options
operator|)
return|;
block|}
name|template
operator|<
name|typename
name|Sequence
operator|,
name|typename
name|T
operator|,
name|typename
name|C
operator|,
name|typename
name|U
operator|,
name|typename
name|D
operator|,
name|typename
name|V
operator|>
name|QFuture
operator|<
name|D
operator|>
name|mappedReduced
argument_list|(
argument|const Sequence&sequence
argument_list|,
argument|T (C::*map)() const
argument_list|,
argument|U (D::*reduce)(V)
argument_list|,
argument|ReduceOptions options = ReduceOptions(UnorderedReduce | SequentialReduce)
argument_list|)
block|{
return|return
name|startMappedReduced
operator|<
name|T
operator|,
name|D
operator|>
operator|(
name|sequence
operator|,
name|ConstMemberFunctionWrapper
operator|<
name|T
operator|,
name|C
operator|>
operator|(
name|map
operator|)
operator|,
name|MemberFunctionWrapper1
operator|<
name|U
operator|,
name|D
operator|,
name|V
operator|>
operator|(
name|reduce
operator|)
operator|,
name|options
operator|)
return|;
block|}
comment|// mappedReduced() for iterators
name|template
operator|<
name|typename
name|ResultType
operator|,
name|typename
name|Iterator
operator|,
name|typename
name|MapFunctor
operator|,
name|typename
name|ReduceFunctor
operator|>
name|QFuture
operator|<
name|ResultType
operator|>
name|mappedReduced
argument_list|(
argument|Iterator begin
argument_list|,
argument|Iterator end
argument_list|,
argument|MapFunctor map
argument_list|,
argument|ReduceFunctor reduce
argument_list|,
argument|ReduceOptions options = ReduceOptions(UnorderedReduce | SequentialReduce)
argument_list|)
block|{
return|return
name|startMappedReduced
operator|<
name|ResultType
operator|,
name|typename
name|MapFunctor
operator|::
name|result_type
operator|>
operator|(
name|begin
operator|,
name|end
operator|,
name|map
operator|,
name|reduce
operator|,
name|options
operator|)
return|;
block|}
name|template
operator|<
name|typename
name|Iterator
operator|,
name|typename
name|MapFunctor
operator|,
name|typename
name|T
operator|,
name|typename
name|U
operator|,
name|typename
name|V
operator|>
name|QFuture
operator|<
name|U
operator|>
name|mappedReduced
argument_list|(
argument|Iterator begin
argument_list|,
argument|Iterator end
argument_list|,
argument|MapFunctor map
argument_list|,
argument|T (reduce)(U&, V)
argument_list|,
argument|ReduceOptions options = ReduceOptions(UnorderedReduce | SequentialReduce)
argument_list|)
block|{
return|return
name|startMappedReduced
operator|<
name|typename
name|MapFunctor
operator|::
name|result_type
operator|,
name|U
operator|>
operator|(
name|begin
operator|,
name|end
operator|,
name|map
operator|,
name|FunctionWrapper2
operator|<
name|T
operator|,
name|U
operator|&
operator|,
name|V
operator|>
operator|(
name|reduce
operator|)
operator|,
name|options
operator|)
return|;
block|}
name|template
operator|<
name|typename
name|Iterator
operator|,
name|typename
name|MapFunctor
operator|,
name|typename
name|T
operator|,
name|typename
name|C
operator|,
name|typename
name|U
operator|>
name|QFuture
operator|<
name|C
operator|>
name|mappedReduced
argument_list|(
argument|Iterator begin
argument_list|,
argument|Iterator end
argument_list|,
argument|MapFunctor map
argument_list|,
argument|T (C::*reduce)(U)
argument_list|,
argument|ReduceOptions options = ReduceOptions(UnorderedReduce | SequentialReduce)
argument_list|)
block|{
return|return
name|startMappedReduced
operator|<
name|typename
name|MapFunctor
operator|::
name|result_type
operator|,
name|C
operator|>
operator|(
name|begin
operator|,
name|end
operator|,
name|map
operator|,
name|MemberFunctionWrapper1
operator|<
name|T
operator|,
name|C
operator|,
name|U
operator|>
operator|(
name|reduce
operator|)
operator|,
name|options
operator|)
return|;
block|}
name|template
operator|<
name|typename
name|ResultType
operator|,
name|typename
name|Iterator
operator|,
name|typename
name|T
operator|,
name|typename
name|U
operator|,
name|typename
name|ReduceFunctor
operator|>
name|QFuture
operator|<
name|ResultType
operator|>
name|mappedReduced
argument_list|(
argument|Iterator begin
argument_list|,
argument|Iterator end
argument_list|,
argument|T (map)(U)
argument_list|,
argument|ReduceFunctor reduce
argument_list|,
argument|ReduceOptions options = ReduceOptions(UnorderedReduce | SequentialReduce)
argument_list|)
block|{
return|return
name|startMappedReduced
operator|<
name|T
operator|,
name|ResultType
operator|>
operator|(
name|begin
operator|,
name|end
operator|,
name|FunctionWrapper1
operator|<
name|T
operator|,
name|U
operator|>
operator|(
name|map
operator|)
operator|,
name|reduce
operator|,
name|options
operator|)
return|;
block|}
name|template
operator|<
name|typename
name|ResultType
operator|,
name|typename
name|Iterator
operator|,
name|typename
name|T
operator|,
name|typename
name|C
operator|,
name|typename
name|ReduceFunctor
operator|>
name|QFuture
operator|<
name|ResultType
operator|>
name|mappedReduced
argument_list|(
argument|Iterator begin
argument_list|,
argument|Iterator end
argument_list|,
argument|T (C::*map)() const
argument_list|,
argument|ReduceFunctor reduce
argument_list|,
argument|ReduceOptions options = ReduceOptions(UnorderedReduce | SequentialReduce)
argument_list|)
block|{
return|return
name|startMappedReduced
operator|<
name|T
operator|,
name|ResultType
operator|>
operator|(
name|begin
operator|,
name|end
operator|,
name|ConstMemberFunctionWrapper
operator|<
name|T
operator|,
name|C
operator|>
operator|(
name|map
operator|)
operator|,
name|reduce
operator|,
name|options
operator|)
return|;
block|}
name|template
operator|<
name|typename
name|Iterator
operator|,
name|typename
name|T
operator|,
name|typename
name|U
operator|,
name|typename
name|V
operator|,
name|typename
name|W
operator|,
name|typename
name|X
operator|>
name|QFuture
operator|<
name|W
operator|>
name|mappedReduced
argument_list|(
argument|Iterator begin
argument_list|,
argument|Iterator end
argument_list|,
argument|T (map)(U)
argument_list|,
argument|V (reduce)(W&, X)
argument_list|,
argument|ReduceOptions options = ReduceOptions(UnorderedReduce | SequentialReduce)
argument_list|)
block|{
return|return
name|startMappedReduced
operator|<
name|T
operator|,
name|W
operator|>
operator|(
name|begin
operator|,
name|end
operator|,
name|FunctionWrapper1
operator|<
name|T
operator|,
name|U
operator|>
operator|(
name|map
operator|)
operator|,
name|FunctionWrapper2
operator|<
name|V
operator|,
name|W
operator|&
operator|,
name|X
operator|>
operator|(
name|reduce
operator|)
operator|,
name|options
operator|)
return|;
block|}
name|template
operator|<
name|typename
name|Iterator
operator|,
name|typename
name|T
operator|,
name|typename
name|C
operator|,
name|typename
name|U
operator|,
name|typename
name|V
operator|,
name|typename
name|W
operator|>
name|QFuture
operator|<
name|V
operator|>
name|mappedReduced
argument_list|(
argument|Iterator begin
argument_list|,
argument|Iterator end
argument_list|,
argument|T (C::*map)() const
argument_list|,
argument|U (reduce)(V&, W)
argument_list|,
argument|ReduceOptions options = ReduceOptions(UnorderedReduce | SequentialReduce)
argument_list|)
block|{
return|return
name|startMappedReduced
operator|<
name|T
operator|,
name|V
operator|>
operator|(
name|begin
operator|,
name|end
operator|,
name|ConstMemberFunctionWrapper
operator|<
name|T
operator|,
name|C
operator|>
operator|(
name|map
operator|)
operator|,
name|FunctionWrapper2
operator|<
name|U
operator|,
name|V
operator|&
operator|,
name|W
operator|>
operator|(
name|reduce
operator|)
operator|,
name|options
operator|)
return|;
block|}
name|template
operator|<
name|typename
name|Iterator
operator|,
name|typename
name|T
operator|,
name|typename
name|U
operator|,
name|typename
name|V
operator|,
name|typename
name|C
operator|,
name|typename
name|W
operator|>
name|QFuture
operator|<
name|C
operator|>
name|mappedReduced
argument_list|(
argument|Iterator begin
argument_list|,
argument|Iterator end
argument_list|,
argument|T (map)(U)
argument_list|,
argument|V (C::*reduce)(W)
argument_list|,
argument|ReduceOptions options = ReduceOptions(UnorderedReduce | SequentialReduce)
argument_list|)
block|{
return|return
name|startMappedReduced
operator|<
name|T
operator|,
name|C
operator|>
operator|(
name|begin
operator|,
name|end
operator|,
name|FunctionWrapper1
operator|<
name|T
operator|,
name|U
operator|>
operator|(
name|map
operator|)
operator|,
name|MemberFunctionWrapper1
operator|<
name|V
operator|,
name|C
operator|,
name|W
operator|>
operator|(
name|reduce
operator|)
operator|,
name|options
operator|)
return|;
block|}
name|template
operator|<
name|typename
name|Iterator
operator|,
name|typename
name|T
operator|,
name|typename
name|C
operator|,
name|typename
name|U
operator|,
name|typename
name|D
operator|,
name|typename
name|V
operator|>
name|QFuture
operator|<
name|D
operator|>
name|mappedReduced
argument_list|(
argument|Iterator begin
argument_list|,
argument|Iterator end
argument_list|,
argument|T (C::*map)() const
argument_list|,
argument|U (D::*reduce)(V)
argument_list|,
argument|ReduceOptions options = ReduceOptions(UnorderedReduce | SequentialReduce)
argument_list|)
block|{
return|return
name|startMappedReduced
operator|<
name|T
operator|,
name|D
operator|>
operator|(
name|begin
operator|,
name|end
operator|,
name|ConstMemberFunctionWrapper
operator|<
name|T
operator|,
name|C
operator|>
operator|(
name|map
operator|)
operator|,
name|MemberFunctionWrapper1
operator|<
name|U
operator|,
name|D
operator|,
name|V
operator|>
operator|(
name|reduce
operator|)
operator|,
name|options
operator|)
return|;
block|}
comment|// mapped() for sequences
name|template
operator|<
name|typename
name|Sequence
operator|,
name|typename
name|MapFunctor
operator|>
name|QFuture
operator|<
name|typename
name|MapFunctor
operator|::
name|result_type
operator|>
name|mapped
argument_list|(
argument|const Sequence&sequence
argument_list|,
argument|MapFunctor map
argument_list|)
block|{
return|return
name|startMapped
operator|<
name|typename
name|MapFunctor
operator|::
name|result_type
operator|>
operator|(
name|sequence
operator|,
name|map
operator|)
return|;
block|}
name|template
operator|<
name|typename
name|Sequence
operator|,
name|typename
name|T
operator|,
name|typename
name|U
operator|>
name|QFuture
operator|<
name|T
operator|>
name|mapped
argument_list|(
argument|const Sequence&sequence
argument_list|,
argument|T (map)(U)
argument_list|)
block|{
return|return
name|startMapped
operator|<
name|T
operator|>
operator|(
name|sequence
operator|,
name|FunctionWrapper1
operator|<
name|T
operator|,
name|U
operator|>
operator|(
name|map
operator|)
operator|)
return|;
block|}
name|template
operator|<
name|typename
name|Sequence
operator|,
name|typename
name|T
operator|,
name|typename
name|C
operator|>
name|QFuture
operator|<
name|T
operator|>
name|mapped
argument_list|(
argument|const Sequence&sequence
argument_list|,
argument|T (C::*map)() const
argument_list|)
block|{
return|return
name|startMapped
operator|<
name|T
operator|>
operator|(
name|sequence
operator|,
name|ConstMemberFunctionWrapper
operator|<
name|T
operator|,
name|C
operator|>
operator|(
name|map
operator|)
operator|)
return|;
block|}
comment|// mapped() for iterator ranges.
name|template
operator|<
name|typename
name|Iterator
operator|,
name|typename
name|MapFunctor
operator|>
name|QFuture
operator|<
name|typename
name|MapFunctor
operator|::
name|result_type
operator|>
name|mapped
argument_list|(
argument|Iterator begin
argument_list|,
argument|Iterator end
argument_list|,
argument|MapFunctor map
argument_list|)
block|{
return|return
name|startMapped
operator|<
name|Q_TYPENAME
name|MapFunctor
operator|::
name|result_type
operator|>
operator|(
name|begin
operator|,
name|end
operator|,
name|map
operator|)
return|;
block|}
name|template
operator|<
name|typename
name|Iterator
operator|,
name|typename
name|T
operator|,
name|typename
name|U
operator|>
name|QFuture
operator|<
name|T
operator|>
name|mapped
argument_list|(
argument|Iterator begin
argument_list|,
argument|Iterator end
argument_list|,
argument|T (map)(U)
argument_list|)
block|{
return|return
name|startMapped
operator|<
name|T
operator|>
operator|(
name|begin
operator|,
name|end
operator|,
name|FunctionWrapper1
operator|<
name|T
operator|,
name|U
operator|>
operator|(
name|map
operator|)
operator|)
return|;
block|}
name|template
operator|<
name|typename
name|Iterator
operator|,
name|typename
name|T
operator|,
name|typename
name|C
operator|>
name|QFuture
operator|<
name|T
operator|>
name|mapped
argument_list|(
argument|Iterator begin
argument_list|,
argument|Iterator end
argument_list|,
argument|T (C::*map)() const
argument_list|)
block|{
return|return
name|startMapped
operator|<
name|T
operator|>
operator|(
name|begin
operator|,
name|end
operator|,
name|ConstMemberFunctionWrapper
operator|<
name|T
operator|,
name|C
operator|>
operator|(
name|map
operator|)
operator|)
return|;
block|}
name|template
operator|<
name|typename
name|Sequence
operator|,
name|typename
name|MapFunctor
operator|>
name|void
name|blockingMap
argument_list|(
argument|Sequence&sequence
argument_list|,
argument|MapFunctor map
argument_list|)
block|{
name|startMap
argument_list|(
name|sequence
operator|.
name|begin
argument_list|()
argument_list|,
name|sequence
operator|.
name|end
argument_list|()
argument_list|,
name|map
argument_list|)
operator|.
name|startBlocking
argument_list|()
block|; }
name|template
operator|<
name|typename
name|Sequence
operator|,
name|typename
name|T
operator|,
name|typename
name|U
operator|>
name|void
name|blockingMap
argument_list|(
argument|Sequence&sequence
argument_list|,
argument|T (map)(U)
argument_list|)
block|{
name|startMap
argument_list|(
name|sequence
operator|.
name|begin
argument_list|()
argument_list|,
name|sequence
operator|.
name|end
argument_list|()
argument_list|,
name|QtConcurrent
operator|::
name|FunctionWrapper1
operator|<
name|T
argument_list|,
name|U
operator|>
operator|(
name|map
operator|)
argument_list|)
operator|.
name|startBlocking
argument_list|()
block|; }
name|template
operator|<
name|typename
name|Sequence
operator|,
name|typename
name|T
operator|,
name|typename
name|C
operator|>
name|void
name|blockingMap
argument_list|(
argument|Sequence&sequence
argument_list|,
argument|T (C::*map)()
argument_list|)
block|{
name|startMap
argument_list|(
name|sequence
operator|.
name|begin
argument_list|()
argument_list|,
name|sequence
operator|.
name|end
argument_list|()
argument_list|,
name|QtConcurrent
operator|::
name|MemberFunctionWrapper
operator|<
name|T
argument_list|,
name|C
operator|>
operator|(
name|map
operator|)
argument_list|)
operator|.
name|startBlocking
argument_list|()
block|; }
name|template
operator|<
name|typename
name|Iterator
operator|,
name|typename
name|MapFunctor
operator|>
name|void
name|blockingMap
argument_list|(
argument|Iterator begin
argument_list|,
argument|Iterator end
argument_list|,
argument|MapFunctor map
argument_list|)
block|{
name|startMap
argument_list|(
name|begin
argument_list|,
name|end
argument_list|,
name|map
argument_list|)
operator|.
name|startBlocking
argument_list|()
block|; }
name|template
operator|<
name|typename
name|Iterator
operator|,
name|typename
name|T
operator|,
name|typename
name|U
operator|>
name|void
name|blockingMap
argument_list|(
argument|Iterator begin
argument_list|,
argument|Iterator end
argument_list|,
argument|T (map)(U)
argument_list|)
block|{
name|startMap
argument_list|(
name|begin
argument_list|,
name|end
argument_list|,
name|QtConcurrent
operator|::
name|FunctionWrapper1
operator|<
name|T
argument_list|,
name|U
operator|>
operator|(
name|map
operator|)
argument_list|)
operator|.
name|startBlocking
argument_list|()
block|; }
name|template
operator|<
name|typename
name|Iterator
operator|,
name|typename
name|T
operator|,
name|typename
name|C
operator|>
name|void
name|blockingMap
argument_list|(
argument|Iterator begin
argument_list|,
argument|Iterator end
argument_list|,
argument|T (C::*map)()
argument_list|)
block|{
name|startMap
argument_list|(
name|begin
argument_list|,
name|end
argument_list|,
name|QtConcurrent
operator|::
name|MemberFunctionWrapper
operator|<
name|T
argument_list|,
name|C
operator|>
operator|(
name|map
operator|)
argument_list|)
operator|.
name|startBlocking
argument_list|()
block|; }
name|template
operator|<
name|typename
name|ResultType
operator|,
name|typename
name|Sequence
operator|,
name|typename
name|MapFunctor
operator|,
name|typename
name|ReduceFunctor
operator|>
name|ResultType
name|blockingMappedReduced
argument_list|(
argument|const Sequence&sequence
argument_list|,
argument|MapFunctor map
argument_list|,
argument|ReduceFunctor reduce
argument_list|,
argument|ReduceOptions options = ReduceOptions(UnorderedReduce | SequentialReduce)
argument_list|)
block|{
return|return
name|QtConcurrent
operator|::
name|startMappedReduced
operator|<
name|typename
name|MapFunctor
operator|::
name|result_type
operator|,
name|ResultType
operator|>
operator|(
name|sequence
operator|,
name|map
operator|,
name|reduce
operator|,
name|options
operator|)
operator|.
name|startBlocking
argument_list|()
return|;
block|}
name|template
operator|<
name|typename
name|Sequence
operator|,
name|typename
name|MapFunctor
operator|,
name|typename
name|T
operator|,
name|typename
name|U
operator|,
name|typename
name|V
operator|>
name|U
name|blockingMappedReduced
argument_list|(
argument|const Sequence&sequence
argument_list|,
argument|MapFunctor map
argument_list|,
argument|T (reduce)(U&, V)
argument_list|,
argument|QtConcurrent::ReduceOptions options = QtConcurrent::ReduceOptions(QtConcurrent::UnorderedReduce | QtConcurrent::SequentialReduce)
argument_list|)
block|{
return|return
name|QtConcurrent
operator|::
name|startMappedReduced
operator|<
name|typename
name|MapFunctor
operator|::
name|result_type
operator|,
name|U
operator|>
operator|(
name|sequence
operator|,
name|map
operator|,
name|QtConcurrent
operator|::
name|FunctionWrapper2
operator|<
name|T
operator|,
name|U
operator|&
operator|,
name|V
operator|>
operator|(
name|reduce
operator|)
operator|,
name|options
operator|)
operator|.
name|startBlocking
argument_list|()
return|;
block|}
name|template
operator|<
name|typename
name|Sequence
operator|,
name|typename
name|MapFunctor
operator|,
name|typename
name|T
operator|,
name|typename
name|C
operator|,
name|typename
name|U
operator|>
name|C
name|blockingMappedReduced
argument_list|(
argument|const Sequence&sequence
argument_list|,
argument|MapFunctor map
argument_list|,
argument|T (C::*reduce)(U)
argument_list|,
argument|QtConcurrent::ReduceOptions options = QtConcurrent::ReduceOptions(QtConcurrent::UnorderedReduce | QtConcurrent::SequentialReduce)
argument_list|)
block|{
return|return
name|QtConcurrent
operator|::
name|startMappedReduced
operator|<
name|typename
name|MapFunctor
operator|::
name|result_type
operator|,
name|C
operator|>
operator|(
name|sequence
operator|,
name|map
operator|,
name|QtConcurrent
operator|::
name|MemberFunctionWrapper1
operator|<
name|T
operator|,
name|C
operator|,
name|U
operator|>
operator|(
name|reduce
operator|)
operator|,
name|options
operator|)
operator|.
name|startBlocking
argument_list|()
return|;
block|}
name|template
operator|<
name|typename
name|ResultType
operator|,
name|typename
name|Sequence
operator|,
name|typename
name|T
operator|,
name|typename
name|U
operator|,
name|typename
name|ReduceFunctor
operator|>
name|ResultType
name|blockingMappedReduced
argument_list|(
argument|const Sequence&sequence
argument_list|,
argument|T (map)(U)
argument_list|,
argument|ReduceFunctor reduce
argument_list|,
argument|QtConcurrent::ReduceOptions options = QtConcurrent::ReduceOptions(QtConcurrent::UnorderedReduce | QtConcurrent::SequentialReduce)
argument_list|)
block|{
return|return
name|QtConcurrent
operator|::
name|startMappedReduced
operator|<
name|T
operator|,
name|ResultType
operator|>
operator|(
name|sequence
operator|,
name|QtConcurrent
operator|::
name|FunctionWrapper1
operator|<
name|T
operator|,
name|U
operator|>
operator|(
name|map
operator|)
operator|,
name|reduce
operator|,
name|options
operator|)
operator|.
name|startBlocking
argument_list|()
return|;
block|}
name|template
operator|<
name|typename
name|ResultType
operator|,
name|typename
name|Sequence
operator|,
name|typename
name|T
operator|,
name|typename
name|C
operator|,
name|typename
name|ReduceFunctor
operator|>
name|ResultType
name|blockingMappedReduced
argument_list|(
argument|const Sequence&sequence
argument_list|,
argument|T (C::*map)() const
argument_list|,
argument|ReduceFunctor reduce
argument_list|,
argument|QtConcurrent::ReduceOptions options = QtConcurrent::ReduceOptions(QtConcurrent::UnorderedReduce | QtConcurrent::SequentialReduce)
argument_list|)
block|{
return|return
name|QtConcurrent
operator|::
name|startMappedReduced
operator|<
name|T
operator|,
name|ResultType
operator|>
operator|(
name|sequence
operator|,
name|QtConcurrent
operator|::
name|ConstMemberFunctionWrapper
operator|<
name|T
operator|,
name|C
operator|>
operator|(
name|map
operator|)
operator|,
name|reduce
operator|,
name|options
operator|)
operator|.
name|startBlocking
argument_list|()
return|;
block|}
name|template
operator|<
name|typename
name|Sequence
operator|,
name|typename
name|T
operator|,
name|typename
name|U
operator|,
name|typename
name|V
operator|,
name|typename
name|W
operator|,
name|typename
name|X
operator|>
name|W
name|blockingMappedReduced
argument_list|(
argument|const Sequence&sequence
argument_list|,
argument|T (map)(U)
argument_list|,
argument|V (reduce)(W&, X)
argument_list|,
argument|QtConcurrent::ReduceOptions options = QtConcurrent::ReduceOptions(QtConcurrent::UnorderedReduce | QtConcurrent::SequentialReduce)
argument_list|)
block|{
return|return
name|QtConcurrent
operator|::
name|startMappedReduced
operator|<
name|T
operator|,
name|W
operator|>
operator|(
name|sequence
operator|,
name|QtConcurrent
operator|::
name|FunctionWrapper1
operator|<
name|T
operator|,
name|U
operator|>
operator|(
name|map
operator|)
operator|,
name|QtConcurrent
operator|::
name|FunctionWrapper2
operator|<
name|V
operator|,
name|W
operator|&
operator|,
name|X
operator|>
operator|(
name|reduce
operator|)
operator|,
name|options
operator|)
operator|.
name|startBlocking
argument_list|()
return|;
block|}
name|template
operator|<
name|typename
name|Sequence
operator|,
name|typename
name|T
operator|,
name|typename
name|C
operator|,
name|typename
name|U
operator|,
name|typename
name|V
operator|,
name|typename
name|W
operator|>
name|V
name|blockingMappedReduced
argument_list|(
argument|const Sequence&sequence
argument_list|,
argument|T (C::*map)() const
argument_list|,
argument|U (reduce)(V&, W)
argument_list|,
argument|QtConcurrent::ReduceOptions options = QtConcurrent::ReduceOptions(QtConcurrent::UnorderedReduce | QtConcurrent::SequentialReduce)
argument_list|)
block|{
return|return
name|QtConcurrent
operator|::
name|startMappedReduced
operator|<
name|T
operator|,
name|V
operator|>
operator|(
name|sequence
operator|,
name|QtConcurrent
operator|::
name|ConstMemberFunctionWrapper
operator|<
name|T
operator|,
name|C
operator|>
operator|(
name|map
operator|)
operator|,
name|QtConcurrent
operator|::
name|FunctionWrapper2
operator|<
name|U
operator|,
name|V
operator|&
operator|,
name|W
operator|>
operator|(
name|reduce
operator|)
operator|,
name|options
operator|)
operator|.
name|startBlocking
argument_list|()
return|;
block|}
name|template
operator|<
name|typename
name|Sequence
operator|,
name|typename
name|T
operator|,
name|typename
name|U
operator|,
name|typename
name|V
operator|,
name|typename
name|C
operator|,
name|typename
name|W
operator|>
name|C
name|blockingMappedReduced
argument_list|(
argument|const Sequence&sequence
argument_list|,
argument|T (map)(U)
argument_list|,
argument|V (C::*reduce)(W)
argument_list|,
argument|QtConcurrent::ReduceOptions options = QtConcurrent::ReduceOptions(QtConcurrent::UnorderedReduce | QtConcurrent::SequentialReduce)
argument_list|)
block|{
return|return
name|QtConcurrent
operator|::
name|startMappedReduced
operator|<
name|T
operator|,
name|C
operator|>
operator|(
name|sequence
operator|,
name|QtConcurrent
operator|::
name|FunctionWrapper1
operator|<
name|T
operator|,
name|U
operator|>
operator|(
name|map
operator|)
operator|,
name|QtConcurrent
operator|::
name|MemberFunctionWrapper1
operator|<
name|V
operator|,
name|C
operator|,
name|W
operator|>
operator|(
name|reduce
operator|)
operator|,
name|options
operator|)
operator|.
name|startBlocking
argument_list|()
return|;
block|}
name|template
operator|<
name|typename
name|Sequence
operator|,
name|typename
name|T
operator|,
name|typename
name|C
operator|,
name|typename
name|U
operator|,
name|typename
name|D
operator|,
name|typename
name|V
operator|>
name|D
name|blockingMappedReduced
argument_list|(
argument|const Sequence&sequence
argument_list|,
argument|T (C::*map)() const
argument_list|,
argument|U (D::*reduce)(V)
argument_list|,
argument|QtConcurrent::ReduceOptions options = QtConcurrent::ReduceOptions(QtConcurrent::UnorderedReduce | QtConcurrent::SequentialReduce)
argument_list|)
block|{
return|return
name|QtConcurrent
operator|::
name|startMappedReduced
operator|<
name|T
operator|,
name|D
operator|>
operator|(
name|sequence
operator|,
name|QtConcurrent
operator|::
name|ConstMemberFunctionWrapper
operator|<
name|T
operator|,
name|C
operator|>
operator|(
name|map
operator|)
operator|,
name|QtConcurrent
operator|::
name|MemberFunctionWrapper1
operator|<
name|U
operator|,
name|D
operator|,
name|V
operator|>
operator|(
name|reduce
operator|)
operator|,
name|options
operator|)
operator|.
name|startBlocking
argument_list|()
return|;
block|}
name|template
operator|<
name|typename
name|ResultType
operator|,
name|typename
name|Iterator
operator|,
name|typename
name|MapFunctor
operator|,
name|typename
name|ReduceFunctor
operator|>
name|ResultType
name|blockingMappedReduced
argument_list|(
argument|Iterator begin
argument_list|,
argument|Iterator end
argument_list|,
argument|MapFunctor map
argument_list|,
argument|ReduceFunctor reduce
argument_list|,
argument|QtConcurrent::ReduceOptions options = QtConcurrent::ReduceOptions(QtConcurrent::UnorderedReduce | QtConcurrent::SequentialReduce)
argument_list|)
block|{
return|return
name|QtConcurrent
operator|::
name|startMappedReduced
operator|<
name|typename
name|MapFunctor
operator|::
name|result_type
operator|,
name|ResultType
operator|>
operator|(
name|begin
operator|,
name|end
operator|,
name|map
operator|,
name|reduce
operator|,
name|options
operator|)
operator|.
name|startBlocking
argument_list|()
return|;
block|}
name|template
operator|<
name|typename
name|Iterator
operator|,
name|typename
name|MapFunctor
operator|,
name|typename
name|T
operator|,
name|typename
name|U
operator|,
name|typename
name|V
operator|>
name|U
name|blockingMappedReduced
argument_list|(
argument|Iterator begin
argument_list|,
argument|Iterator end
argument_list|,
argument|MapFunctor map
argument_list|,
argument|T (reduce)(U&, V)
argument_list|,
argument|QtConcurrent::ReduceOptions options = QtConcurrent::ReduceOptions(QtConcurrent::UnorderedReduce | QtConcurrent::SequentialReduce)
argument_list|)
block|{
return|return
name|QtConcurrent
operator|::
name|startMappedReduced
operator|<
name|typename
name|MapFunctor
operator|::
name|result_type
operator|,
name|U
operator|>
operator|(
name|begin
operator|,
name|end
operator|,
name|map
operator|,
name|QtConcurrent
operator|::
name|FunctionWrapper2
operator|<
name|T
operator|,
name|U
operator|&
operator|,
name|V
operator|>
operator|(
name|reduce
operator|)
operator|,
name|options
operator|)
operator|.
name|startBlocking
argument_list|()
return|;
block|}
name|template
operator|<
name|typename
name|Iterator
operator|,
name|typename
name|MapFunctor
operator|,
name|typename
name|T
operator|,
name|typename
name|C
operator|,
name|typename
name|U
operator|>
name|C
name|blockingMappedReduced
argument_list|(
argument|Iterator begin
argument_list|,
argument|Iterator end
argument_list|,
argument|MapFunctor map
argument_list|,
argument|T (C::*reduce)(U)
argument_list|,
argument|QtConcurrent::ReduceOptions options = QtConcurrent::ReduceOptions(QtConcurrent::UnorderedReduce | QtConcurrent::SequentialReduce)
argument_list|)
block|{
return|return
name|QtConcurrent
operator|::
name|startMappedReduced
operator|<
name|typename
name|MapFunctor
operator|::
name|result_type
operator|,
name|C
operator|>
operator|(
name|begin
operator|,
name|end
operator|,
name|map
operator|,
name|QtConcurrent
operator|::
name|MemberFunctionWrapper1
operator|<
name|T
operator|,
name|C
operator|,
name|U
operator|>
operator|(
name|reduce
operator|)
operator|,
name|options
operator|)
operator|.
name|startBlocking
argument_list|()
return|;
block|}
name|template
operator|<
name|typename
name|ResultType
operator|,
name|typename
name|Iterator
operator|,
name|typename
name|T
operator|,
name|typename
name|U
operator|,
name|typename
name|ReduceFunctor
operator|>
name|ResultType
name|blockingMappedReduced
argument_list|(
argument|Iterator begin
argument_list|,
argument|Iterator end
argument_list|,
argument|T (map)(U)
argument_list|,
argument|ReduceFunctor reduce
argument_list|,
argument|QtConcurrent::ReduceOptions options = QtConcurrent::ReduceOptions(QtConcurrent::UnorderedReduce | QtConcurrent::SequentialReduce)
argument_list|)
block|{
return|return
name|QtConcurrent
operator|::
name|startMappedReduced
operator|<
name|T
operator|,
name|ResultType
operator|>
operator|(
name|begin
operator|,
name|end
operator|,
name|QtConcurrent
operator|::
name|FunctionWrapper1
operator|<
name|T
operator|,
name|U
operator|>
operator|(
name|map
operator|)
operator|,
name|reduce
operator|,
name|options
operator|)
operator|.
name|startBlocking
argument_list|()
return|;
block|}
name|template
operator|<
name|typename
name|ResultType
operator|,
name|typename
name|Iterator
operator|,
name|typename
name|T
operator|,
name|typename
name|C
operator|,
name|typename
name|ReduceFunctor
operator|>
name|ResultType
name|blockingMappedReduced
argument_list|(
argument|Iterator begin
argument_list|,
argument|Iterator end
argument_list|,
argument|T (C::*map)() const
argument_list|,
argument|ReduceFunctor reduce
argument_list|,
argument|QtConcurrent::ReduceOptions options = QtConcurrent::ReduceOptions(QtConcurrent::UnorderedReduce | QtConcurrent::SequentialReduce)
argument_list|)
block|{
return|return
name|QtConcurrent
operator|::
name|startMappedReduced
operator|<
name|T
operator|,
name|ResultType
operator|>
operator|(
name|begin
operator|,
name|end
operator|,
name|QtConcurrent
operator|::
name|ConstMemberFunctionWrapper
operator|<
name|T
operator|,
name|C
operator|>
operator|(
name|map
operator|)
operator|,
name|reduce
operator|,
name|options
operator|)
operator|.
name|startBlocking
argument_list|()
return|;
block|}
name|template
operator|<
name|typename
name|Iterator
operator|,
name|typename
name|T
operator|,
name|typename
name|U
operator|,
name|typename
name|V
operator|,
name|typename
name|W
operator|,
name|typename
name|X
operator|>
name|W
name|blockingMappedReduced
argument_list|(
argument|Iterator begin
argument_list|,
argument|Iterator end
argument_list|,
argument|T (map)(U)
argument_list|,
argument|V (reduce)(W&, X)
argument_list|,
argument|QtConcurrent::ReduceOptions options = QtConcurrent::ReduceOptions(QtConcurrent::UnorderedReduce | QtConcurrent::SequentialReduce)
argument_list|)
block|{
return|return
name|QtConcurrent
operator|::
name|startMappedReduced
operator|<
name|T
operator|,
name|W
operator|>
operator|(
name|begin
operator|,
name|end
operator|,
name|QtConcurrent
operator|::
name|FunctionWrapper1
operator|<
name|T
operator|,
name|U
operator|>
operator|(
name|map
operator|)
operator|,
name|QtConcurrent
operator|::
name|FunctionWrapper2
operator|<
name|V
operator|,
name|W
operator|&
operator|,
name|X
operator|>
operator|(
name|reduce
operator|)
operator|,
name|options
operator|)
operator|.
name|startBlocking
argument_list|()
return|;
block|}
name|template
operator|<
name|typename
name|Iterator
operator|,
name|typename
name|T
operator|,
name|typename
name|C
operator|,
name|typename
name|U
operator|,
name|typename
name|V
operator|,
name|typename
name|W
operator|>
name|V
name|blockingMappedReduced
argument_list|(
argument|Iterator begin
argument_list|,
argument|Iterator end
argument_list|,
argument|T (C::*map)() const
argument_list|,
argument|U (reduce)(V&, W)
argument_list|,
argument|QtConcurrent::ReduceOptions options = QtConcurrent::ReduceOptions(QtConcurrent::UnorderedReduce | QtConcurrent::SequentialReduce)
argument_list|)
block|{
return|return
name|QtConcurrent
operator|::
name|startMappedReduced
operator|<
name|T
operator|,
name|V
operator|>
operator|(
name|begin
operator|,
name|end
operator|,
name|QtConcurrent
operator|::
name|ConstMemberFunctionWrapper
operator|<
name|T
operator|,
name|C
operator|>
operator|(
name|map
operator|)
operator|,
name|QtConcurrent
operator|::
name|FunctionWrapper2
operator|<
name|U
operator|,
name|V
operator|&
operator|,
name|W
operator|>
operator|(
name|reduce
operator|)
operator|,
name|options
operator|)
operator|.
name|startBlocking
argument_list|()
return|;
block|}
name|template
operator|<
name|typename
name|Iterator
operator|,
name|typename
name|T
operator|,
name|typename
name|U
operator|,
name|typename
name|V
operator|,
name|typename
name|C
operator|,
name|typename
name|W
operator|>
name|C
name|blockingMappedReduced
argument_list|(
argument|Iterator begin
argument_list|,
argument|Iterator end
argument_list|,
argument|T (map)(U)
argument_list|,
argument|V (C::*reduce)(W)
argument_list|,
argument|QtConcurrent::ReduceOptions options = QtConcurrent::ReduceOptions(QtConcurrent::UnorderedReduce | QtConcurrent::SequentialReduce)
argument_list|)
block|{
return|return
name|QtConcurrent
operator|::
name|startMappedReduced
operator|<
name|T
operator|,
name|C
operator|>
operator|(
name|begin
operator|,
name|end
operator|,
name|QtConcurrent
operator|::
name|FunctionWrapper1
operator|<
name|T
operator|,
name|U
operator|>
operator|(
name|map
operator|)
operator|,
name|QtConcurrent
operator|::
name|MemberFunctionWrapper1
operator|<
name|V
operator|,
name|C
operator|,
name|W
operator|>
operator|(
name|reduce
operator|)
operator|,
name|options
operator|)
operator|.
name|startBlocking
argument_list|()
return|;
block|}
name|template
operator|<
name|typename
name|Iterator
operator|,
name|typename
name|T
operator|,
name|typename
name|C
operator|,
name|typename
name|U
operator|,
name|typename
name|D
operator|,
name|typename
name|V
operator|>
name|D
name|blockingMappedReduced
argument_list|(
argument|Iterator begin
argument_list|,
argument|Iterator end
argument_list|,
argument|T (C::*map)() const
argument_list|,
argument|U (D::*reduce)(V)
argument_list|,
argument|QtConcurrent::ReduceOptions options = QtConcurrent::ReduceOptions(QtConcurrent::UnorderedReduce | QtConcurrent::SequentialReduce)
argument_list|)
block|{
return|return
name|QtConcurrent
operator|::
name|startMappedReduced
operator|<
name|T
operator|,
name|D
operator|>
operator|(
name|begin
operator|,
name|end
operator|,
name|QtConcurrent
operator|::
name|ConstMemberFunctionWrapper
operator|<
name|T
operator|,
name|C
operator|>
operator|(
name|map
operator|)
operator|,
name|QtConcurrent
operator|::
name|MemberFunctionWrapper1
operator|<
name|U
operator|,
name|D
operator|,
name|V
operator|>
operator|(
name|reduce
operator|)
operator|,
name|options
operator|)
operator|.
name|startBlocking
argument_list|()
return|;
block|}
comment|// mapped() for sequences with a different putput sequence type.
name|template
operator|<
name|typename
name|OutputSequence
operator|,
name|typename
name|InputSequence
operator|,
name|typename
name|MapFunctor
operator|>
name|OutputSequence
name|blockingMapped
argument_list|(
argument|const InputSequence&sequence
argument_list|,
argument|MapFunctor map
argument_list|)
block|{
return|return
name|blockingMappedReduced
argument_list|(
name|sequence
argument_list|,
name|map
argument_list|,
operator|&
name|OutputSequence
operator|::
name|push_back
argument_list|,
name|QtConcurrent
operator|::
name|OrderedReduce
argument_list|)
return|;
block|}
name|template
operator|<
name|typename
name|OutputSequence
operator|,
name|typename
name|InputSequence
operator|,
name|typename
name|T
operator|,
name|typename
name|U
operator|>
name|OutputSequence
name|blockingMapped
argument_list|(
argument|const InputSequence&sequence
argument_list|,
argument|T (map)(U)
argument_list|)
block|{
return|return
name|blockingMappedReduced
argument_list|(
name|sequence
argument_list|,
name|map
argument_list|,
operator|&
name|OutputSequence
operator|::
name|push_back
argument_list|,
name|QtConcurrent
operator|::
name|OrderedReduce
argument_list|)
return|;
block|}
name|template
operator|<
name|typename
name|OutputSequence
operator|,
name|typename
name|InputSequence
operator|,
name|typename
name|T
operator|,
name|typename
name|C
operator|>
name|OutputSequence
name|blockingMapped
argument_list|(
argument|const InputSequence&sequence
argument_list|,
argument|T (C::*map)() const
argument_list|)
block|{
return|return
name|blockingMappedReduced
argument_list|(
name|sequence
argument_list|,
name|map
argument_list|,
operator|&
name|OutputSequence
operator|::
name|push_back
argument_list|,
name|QtConcurrent
operator|::
name|OrderedReduce
argument_list|)
return|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_TEMPLATE_TEMPLATE_PARAMETERS
comment|// overloads for changing the container value type:
name|template
operator|<
name|template
operator|<
name|typename
operator|>
name|class
name|Sequence
operator|,
name|typename
name|MapFunctor
operator|,
name|typename
name|T
operator|>
name|Sequence
operator|<
name|typename
name|MapFunctor
operator|::
name|result_type
operator|>
name|blockingMapped
argument_list|(
argument|const Sequence<T>&sequence
argument_list|,
argument|MapFunctor map
argument_list|)
block|{
typedef|typedef
name|Sequence
operator|<
name|typename
name|MapFunctor
operator|::
name|result_type
operator|>
name|OutputSequence
expr_stmt|;
return|return
name|blockingMappedReduced
argument_list|(
name|sequence
argument_list|,
name|map
argument_list|,
operator|&
name|OutputSequence
operator|::
name|push_back
argument_list|,
name|QtConcurrent
operator|::
name|OrderedReduce
argument_list|)
return|;
block|}
end_block
begin_expr_stmt
name|template
operator|<
name|template
operator|<
name|typename
operator|>
name|class
name|Sequence
operator|,
name|typename
name|T
operator|,
name|typename
name|U
operator|,
name|typename
name|V
operator|>
name|Sequence
operator|<
name|U
operator|>
name|blockingMapped
argument_list|(
argument|const Sequence<T>&sequence
argument_list|,
argument|U (map)(V)
argument_list|)
block|{
typedef|typedef
name|Sequence
operator|<
name|U
operator|>
name|OutputSequence
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|blockingMappedReduced
argument_list|(
name|sequence
argument_list|,
name|map
argument_list|,
operator|&
name|OutputSequence
operator|::
name|push_back
argument_list|,
name|QtConcurrent
operator|::
name|OrderedReduce
argument_list|)
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|template
operator|<
name|typename
operator|>
name|class
name|Sequence
operator|,
name|typename
name|T
operator|,
name|typename
name|U
operator|,
name|typename
name|C
operator|>
name|Sequence
operator|<
name|U
operator|>
name|blockingMapped
argument_list|(
argument|const Sequence<T>&sequence
argument_list|,
argument|U (C::*map)() const
argument_list|)
block|{
typedef|typedef
name|Sequence
operator|<
name|U
operator|>
name|OutputSequence
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|blockingMappedReduced
argument_list|(
name|sequence
argument_list|,
name|map
argument_list|,
operator|&
name|OutputSequence
operator|::
name|push_back
argument_list|,
name|QtConcurrent
operator|::
name|OrderedReduce
argument_list|)
return|;
end_return
begin_endif
unit|}
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_TEMPLATE_TEMPLATE_PARAMETER
end_comment
begin_comment
comment|// overloads for changing the container value type from a QStringList:
end_comment
begin_expr_stmt
unit|template
operator|<
name|typename
name|MapFunctor
operator|>
name|QList
operator|<
name|typename
name|MapFunctor
operator|::
name|result_type
operator|>
name|blockingMapped
argument_list|(
argument|const QStringList&sequence
argument_list|,
argument|MapFunctor map
argument_list|)
block|{
typedef|typedef
name|QList
operator|<
name|typename
name|MapFunctor
operator|::
name|result_type
operator|>
name|OutputSequence
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|blockingMappedReduced
argument_list|(
name|sequence
argument_list|,
name|map
argument_list|,
operator|&
name|OutputSequence
operator|::
name|push_back
argument_list|,
name|QtConcurrent
operator|::
name|OrderedReduce
argument_list|)
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|typename
name|U
operator|,
name|typename
name|V
operator|>
name|QList
operator|<
name|U
operator|>
name|blockingMapped
argument_list|(
argument|const QStringList&sequence
argument_list|,
argument|U (map)(V)
argument_list|)
block|{
typedef|typedef
name|QList
operator|<
name|U
operator|>
name|OutputSequence
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|blockingMappedReduced
argument_list|(
name|sequence
argument_list|,
name|map
argument_list|,
operator|&
name|OutputSequence
operator|::
name|push_back
argument_list|,
name|QtConcurrent
operator|::
name|OrderedReduce
argument_list|)
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|typename
name|U
operator|,
name|typename
name|C
operator|>
name|QList
operator|<
name|U
operator|>
name|blockingMapped
argument_list|(
argument|const QStringList&sequence
argument_list|,
argument|U (C::*map)() const
argument_list|)
block|{
typedef|typedef
name|QList
operator|<
name|U
operator|>
name|OutputSequence
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|blockingMappedReduced
argument_list|(
name|sequence
argument_list|,
name|map
argument_list|,
operator|&
name|OutputSequence
operator|::
name|push_back
argument_list|,
name|QtConcurrent
operator|::
name|OrderedReduce
argument_list|)
return|;
end_return
begin_comment
unit|}
comment|// mapped()  for iterator ranges
end_comment
begin_expr_stmt
unit|template
operator|<
name|typename
name|Sequence
operator|,
name|typename
name|Iterator
operator|,
name|typename
name|MapFunctor
operator|>
name|Sequence
name|blockingMapped
argument_list|(
argument|Iterator begin
argument_list|,
argument|Iterator end
argument_list|,
argument|MapFunctor map
argument_list|)
block|{
return|return
name|blockingMappedReduced
argument_list|(
name|begin
argument_list|,
name|end
argument_list|,
name|map
argument_list|,
operator|&
name|Sequence
operator|::
name|push_back
argument_list|,
name|QtConcurrent
operator|::
name|OrderedReduce
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|Sequence
operator|,
name|typename
name|Iterator
operator|,
name|typename
name|T
operator|,
name|typename
name|U
operator|>
name|Sequence
name|blockingMapped
argument_list|(
argument|Iterator begin
argument_list|,
argument|Iterator end
argument_list|,
argument|T (map)(U)
argument_list|)
block|{
return|return
name|blockingMappedReduced
argument_list|(
name|begin
argument_list|,
name|end
argument_list|,
name|map
argument_list|,
operator|&
name|Sequence
operator|::
name|push_back
argument_list|,
name|QtConcurrent
operator|::
name|OrderedReduce
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|Sequence
operator|,
name|typename
name|Iterator
operator|,
name|typename
name|T
operator|,
name|typename
name|C
operator|>
name|Sequence
name|blockingMapped
argument_list|(
argument|Iterator begin
argument_list|,
argument|Iterator end
argument_list|,
argument|T (C::*map)() const
argument_list|)
block|{
return|return
name|blockingMappedReduced
argument_list|(
name|begin
argument_list|,
name|end
argument_list|,
name|map
argument_list|,
operator|&
name|Sequence
operator|::
name|push_back
argument_list|,
name|QtConcurrent
operator|::
name|OrderedReduce
argument_list|)
return|;
block|}
end_expr_stmt
begin_comment
unit|}
comment|// namespace QtConcurrent
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// qdoc
end_comment
begin_macro
unit|QT_END_NAMESPACE
name|QT_END_HEADER
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_CONCURRENT
end_comment
begin_endif
endif|#
directive|endif
end_endif
end_unit
