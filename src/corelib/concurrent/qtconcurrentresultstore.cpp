begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qtconcurrentresultstore.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QFUTURE
end_ifndef
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_namespace
DECL|namespace|QtConcurrent
namespace|namespace
name|QtConcurrent
block|{
DECL|function|ResultIteratorBase
name|ResultIteratorBase
operator|::
name|ResultIteratorBase
parameter_list|()
member_init_list|:
name|mapIterator
argument_list|(
name|QMap
argument_list|<
name|int
argument_list|,
name|ResultItem
argument_list|>
operator|::
name|const_iterator
argument_list|()
argument_list|)
member_init_list|,
name|m_vectorIndex
argument_list|(
literal|0
argument_list|)
block|{ }
DECL|function|ResultIteratorBase
name|ResultIteratorBase
operator|::
name|ResultIteratorBase
parameter_list|(
name|QMap
argument_list|<
name|int
argument_list|,
name|ResultItem
argument_list|>
operator|::
name|const_iterator
name|_mapIterator
parameter_list|,
name|int
name|_vectorIndex
parameter_list|)
member_init_list|:
name|mapIterator
argument_list|(
name|_mapIterator
argument_list|)
member_init_list|,
name|m_vectorIndex
argument_list|(
name|_vectorIndex
argument_list|)
block|{ }
DECL|function|vectorIndex
name|int
name|ResultIteratorBase
operator|::
name|vectorIndex
parameter_list|()
specifier|const
block|{
return|return
name|m_vectorIndex
return|;
block|}
DECL|function|resultIndex
name|int
name|ResultIteratorBase
operator|::
name|resultIndex
parameter_list|()
specifier|const
block|{
return|return
name|mapIterator
operator|.
name|key
argument_list|()
operator|+
name|m_vectorIndex
return|;
block|}
DECL|function|operator ++
name|ResultIteratorBase
name|ResultIteratorBase
operator|::
name|operator
name|++
parameter_list|()
block|{
if|if
condition|(
name|canIncrementVectorIndex
argument_list|()
condition|)
block|{
operator|++
name|m_vectorIndex
expr_stmt|;
block|}
else|else
block|{
operator|++
name|mapIterator
expr_stmt|;
name|m_vectorIndex
operator|=
literal|0
expr_stmt|;
block|}
return|return
operator|*
name|this
return|;
block|}
DECL|function|batchSize
name|int
name|ResultIteratorBase
operator|::
name|batchSize
parameter_list|()
specifier|const
block|{
return|return
name|mapIterator
operator|.
name|value
argument_list|()
operator|.
name|count
argument_list|()
return|;
block|}
DECL|function|batchedAdvance
name|void
name|ResultIteratorBase
operator|::
name|batchedAdvance
parameter_list|()
block|{
operator|++
name|mapIterator
expr_stmt|;
name|m_vectorIndex
operator|=
literal|0
expr_stmt|;
block|}
DECL|function|operator ==
name|bool
name|ResultIteratorBase
operator|::
name|operator
name|==
parameter_list|(
specifier|const
name|ResultIteratorBase
modifier|&
name|other
parameter_list|)
specifier|const
block|{
return|return
operator|(
name|mapIterator
operator|==
name|other
operator|.
name|mapIterator
operator|&&
name|m_vectorIndex
operator|==
name|other
operator|.
name|m_vectorIndex
operator|)
return|;
block|}
DECL|function|operator !=
name|bool
name|ResultIteratorBase
operator|::
name|operator
name|!=
parameter_list|(
specifier|const
name|ResultIteratorBase
modifier|&
name|other
parameter_list|)
specifier|const
block|{
return|return
operator|!
name|operator
name|==
argument_list|(
name|other
argument_list|)
return|;
block|}
DECL|function|isVector
name|bool
name|ResultIteratorBase
operator|::
name|isVector
parameter_list|()
specifier|const
block|{
return|return
name|mapIterator
operator|.
name|value
argument_list|()
operator|.
name|isVector
argument_list|()
return|;
block|}
DECL|function|canIncrementVectorIndex
name|bool
name|ResultIteratorBase
operator|::
name|canIncrementVectorIndex
parameter_list|()
specifier|const
block|{
return|return
operator|(
name|m_vectorIndex
operator|+
literal|1
operator|<
name|mapIterator
operator|.
name|value
argument_list|()
operator|.
name|m_count
operator|)
return|;
block|}
DECL|function|ResultStoreBase
name|ResultStoreBase
operator|::
name|ResultStoreBase
parameter_list|()
member_init_list|:
name|insertIndex
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|resultCount
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_filterMode
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|filteredResults
argument_list|(
literal|0
argument_list|)
block|{ }
DECL|function|setFilterMode
name|void
name|ResultStoreBase
operator|::
name|setFilterMode
parameter_list|(
name|bool
name|enable
parameter_list|)
block|{
name|m_filterMode
operator|=
name|enable
expr_stmt|;
block|}
DECL|function|filterMode
name|bool
name|ResultStoreBase
operator|::
name|filterMode
parameter_list|()
specifier|const
block|{
return|return
name|m_filterMode
return|;
block|}
DECL|function|syncResultCount
name|void
name|ResultStoreBase
operator|::
name|syncResultCount
parameter_list|()
block|{
name|ResultIteratorBase
name|it
init|=
name|resultAt
argument_list|(
name|resultCount
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|end
argument_list|()
condition|)
block|{
name|resultCount
operator|+=
name|it
operator|.
name|batchSize
argument_list|()
expr_stmt|;
name|it
operator|=
name|resultAt
argument_list|(
name|resultCount
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|insertResultItemIfValid
name|void
name|ResultStoreBase
operator|::
name|insertResultItemIfValid
parameter_list|(
name|int
name|index
parameter_list|,
name|ResultItem
modifier|&
name|resultItem
parameter_list|)
block|{
if|if
condition|(
name|resultItem
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|m_results
index|[
name|index
index|]
operator|=
name|resultItem
expr_stmt|;
name|syncResultCount
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|filteredResults
operator|+=
name|resultItem
operator|.
name|count
argument_list|()
expr_stmt|;
block|}
block|}
DECL|function|insertResultItem
name|int
name|ResultStoreBase
operator|::
name|insertResultItem
parameter_list|(
name|int
name|index
parameter_list|,
name|ResultItem
modifier|&
name|resultItem
parameter_list|)
block|{
name|int
name|storeIndex
decl_stmt|;
if|if
condition|(
name|m_filterMode
operator|&&
name|index
operator|!=
operator|-
literal|1
operator|&&
name|index
operator|>
name|insertIndex
condition|)
block|{
name|pendingResults
index|[
name|index
index|]
operator|=
name|resultItem
expr_stmt|;
name|storeIndex
operator|=
name|index
expr_stmt|;
block|}
else|else
block|{
name|storeIndex
operator|=
name|updateInsertIndex
argument_list|(
name|index
argument_list|,
name|resultItem
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|insertResultItemIfValid
argument_list|(
name|storeIndex
operator|-
name|filteredResults
argument_list|,
name|resultItem
argument_list|)
expr_stmt|;
block|}
name|syncPendingResults
argument_list|()
expr_stmt|;
return|return
name|storeIndex
return|;
block|}
DECL|function|syncPendingResults
name|void
name|ResultStoreBase
operator|::
name|syncPendingResults
parameter_list|()
block|{
comment|// check if we can insert any of the pending results:
name|QMap
argument_list|<
name|int
argument_list|,
name|ResultItem
argument_list|>
operator|::
name|iterator
name|it
init|=
name|pendingResults
operator|.
name|begin
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|pendingResults
operator|.
name|end
argument_list|()
condition|)
block|{
name|int
name|index
init|=
name|it
operator|.
name|key
argument_list|()
decl_stmt|;
if|if
condition|(
name|index
operator|!=
name|resultCount
operator|+
name|filteredResults
condition|)
break|break;
name|ResultItem
name|result
init|=
name|it
operator|.
name|value
argument_list|()
decl_stmt|;
name|insertResultItemIfValid
argument_list|(
name|index
operator|-
name|filteredResults
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|pendingResults
operator|.
name|erase
argument_list|(
name|it
argument_list|)
expr_stmt|;
name|it
operator|=
name|pendingResults
operator|.
name|begin
argument_list|()
expr_stmt|;
block|}
block|}
DECL|function|addResult
name|int
name|ResultStoreBase
operator|::
name|addResult
parameter_list|(
name|int
name|index
parameter_list|,
specifier|const
name|void
modifier|*
name|result
parameter_list|)
block|{
name|ResultItem
name|resultItem
argument_list|(
name|result
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// 0 means "not a vector"
return|return
name|insertResultItem
argument_list|(
name|index
argument_list|,
name|resultItem
argument_list|)
return|;
block|}
DECL|function|addResults
name|int
name|ResultStoreBase
operator|::
name|addResults
parameter_list|(
name|int
name|index
parameter_list|,
specifier|const
name|void
modifier|*
name|results
parameter_list|,
name|int
name|vectorSize
parameter_list|,
name|int
name|totalCount
parameter_list|)
block|{
if|if
condition|(
name|m_filterMode
operator|==
literal|false
operator|||
name|vectorSize
operator|==
name|totalCount
condition|)
block|{
name|ResultItem
name|resultItem
argument_list|(
name|results
argument_list|,
name|vectorSize
argument_list|)
decl_stmt|;
return|return
name|insertResultItem
argument_list|(
name|index
argument_list|,
name|resultItem
argument_list|)
return|;
block|}
else|else
block|{
if|if
condition|(
name|vectorSize
operator|>
literal|0
condition|)
block|{
name|ResultItem
name|filteredIn
argument_list|(
name|results
argument_list|,
name|vectorSize
argument_list|)
decl_stmt|;
name|insertResultItem
argument_list|(
name|index
argument_list|,
name|filteredIn
argument_list|)
expr_stmt|;
block|}
name|ResultItem
name|filteredAway
argument_list|(
literal|0
argument_list|,
name|totalCount
operator|-
name|vectorSize
argument_list|)
decl_stmt|;
return|return
name|insertResultItem
argument_list|(
name|index
operator|+
name|vectorSize
argument_list|,
name|filteredAway
argument_list|)
return|;
block|}
block|}
DECL|function|begin
name|ResultIteratorBase
name|ResultStoreBase
operator|::
name|begin
parameter_list|()
specifier|const
block|{
return|return
name|ResultIteratorBase
argument_list|(
name|m_results
operator|.
name|begin
argument_list|()
argument_list|)
return|;
block|}
DECL|function|end
name|ResultIteratorBase
name|ResultStoreBase
operator|::
name|end
parameter_list|()
specifier|const
block|{
return|return
name|ResultIteratorBase
argument_list|(
name|m_results
operator|.
name|end
argument_list|()
argument_list|)
return|;
block|}
DECL|function|hasNextResult
name|bool
name|ResultStoreBase
operator|::
name|hasNextResult
parameter_list|()
specifier|const
block|{
return|return
name|begin
argument_list|()
operator|!=
name|end
argument_list|()
return|;
block|}
DECL|function|resultAt
name|ResultIteratorBase
name|ResultStoreBase
operator|::
name|resultAt
parameter_list|(
name|int
name|index
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|m_results
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|ResultIteratorBase
argument_list|(
name|m_results
operator|.
name|end
argument_list|()
argument_list|)
return|;
name|QMap
argument_list|<
name|int
argument_list|,
name|ResultItem
argument_list|>
operator|::
name|const_iterator
name|it
init|=
name|m_results
operator|.
name|lowerBound
argument_list|(
name|index
argument_list|)
decl_stmt|;
comment|// lowerBound returns either an iterator to the result or an iterator
comment|// to the nearest greater index. If the latter happens it might be
comment|// that the result is stored in a vector at the previous index.
if|if
condition|(
name|it
operator|==
name|m_results
operator|.
name|end
argument_list|()
condition|)
block|{
operator|--
name|it
expr_stmt|;
if|if
condition|(
name|it
operator|.
name|value
argument_list|()
operator|.
name|isVector
argument_list|()
operator|==
literal|false
condition|)
block|{
return|return
name|ResultIteratorBase
argument_list|(
name|m_results
operator|.
name|end
argument_list|()
argument_list|)
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|it
operator|.
name|key
argument_list|()
operator|>
name|index
condition|)
block|{
if|if
condition|(
name|it
operator|==
name|m_results
operator|.
name|begin
argument_list|()
condition|)
return|return
name|ResultIteratorBase
argument_list|(
name|m_results
operator|.
name|end
argument_list|()
argument_list|)
return|;
operator|--
name|it
expr_stmt|;
block|}
block|}
specifier|const
name|int
name|vectorIndex
init|=
name|index
operator|-
name|it
operator|.
name|key
argument_list|()
decl_stmt|;
if|if
condition|(
name|vectorIndex
operator|>=
name|it
operator|.
name|value
argument_list|()
operator|.
name|count
argument_list|()
condition|)
return|return
name|ResultIteratorBase
argument_list|(
name|m_results
operator|.
name|end
argument_list|()
argument_list|)
return|;
elseif|else
if|if
condition|(
name|it
operator|.
name|value
argument_list|()
operator|.
name|isVector
argument_list|()
operator|==
literal|false
operator|&&
name|vectorIndex
operator|!=
literal|0
condition|)
return|return
name|ResultIteratorBase
argument_list|(
name|m_results
operator|.
name|end
argument_list|()
argument_list|)
return|;
return|return
name|ResultIteratorBase
argument_list|(
name|it
argument_list|,
name|vectorIndex
argument_list|)
return|;
block|}
DECL|function|contains
name|bool
name|ResultStoreBase
operator|::
name|contains
parameter_list|(
name|int
name|index
parameter_list|)
specifier|const
block|{
return|return
operator|(
name|resultAt
argument_list|(
name|index
argument_list|)
operator|!=
name|end
argument_list|()
operator|)
return|;
block|}
DECL|function|count
name|int
name|ResultStoreBase
operator|::
name|count
parameter_list|()
specifier|const
block|{
return|return
name|resultCount
return|;
block|}
comment|// returns the insert index, calling this function with
comment|// index equal to -1 returns the next available index.
DECL|function|updateInsertIndex
name|int
name|ResultStoreBase
operator|::
name|updateInsertIndex
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|_count
parameter_list|)
block|{
if|if
condition|(
name|index
operator|==
operator|-
literal|1
condition|)
block|{
name|index
operator|=
name|insertIndex
expr_stmt|;
name|insertIndex
operator|+=
name|_count
expr_stmt|;
block|}
else|else
block|{
name|insertIndex
operator|=
name|qMax
argument_list|(
name|index
operator|+
name|_count
argument_list|,
name|insertIndex
argument_list|)
expr_stmt|;
block|}
return|return
name|index
return|;
block|}
block|}
end_namespace
begin_comment
comment|// namespace QtConcurrent
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_CONCURRENT
end_comment
end_unit
