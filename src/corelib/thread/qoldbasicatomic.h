begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QOLDBASICATOMIC_H
end_ifndef
begin_define
DECL|macro|QOLDBASICATOMIC_H
define|#
directive|define
name|QOLDBASICATOMIC_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qglobal.h>
end_include
begin_decl_stmt
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
if|#
directive|if
literal|0
comment|// silence syncqt warnings
type|QT_END_NAMESPACE QT_END_HEADER
pragma|#
directive|pragma
name|qt_no_master_include
pragma|#
directive|pragma
name|qt_sync_stop_processing
endif|#
directive|endif
name|class
name|Q_CORE_EXPORT
name|QBasicAtomicInt
block|{
name|public
label|:
if|#
directive|if
name|defined
argument_list|(
name|QT_ARCH_WINDOWS
argument_list|)
operator|||
name|defined
argument_list|(
name|QT_ARCH_WINDOWSCE
argument_list|)
union|union
block|{
comment|// needed for Q_BASIC_ATOMIC_INITIALIZER
specifier|volatile
name|long
name|_q_value
decl_stmt|;
block|}
union|;
else|#
directive|else
specifier|volatile
name|int
name|_q_value
decl_stmt|;
endif|#
directive|endif
comment|// Atomic API, implemented in qatomic_XXX.h
name|int
name|load
argument_list|()
specifier|const
block|{
return|return
name|_q_value
return|;
block|}
name|int
name|loadAcquire
parameter_list|()
block|{
return|return
name|_q_value
return|;
block|}
name|void
name|store
parameter_list|(
name|int
name|newValue
parameter_list|)
block|{
name|_q_value
operator|=
name|newValue
expr_stmt|;
block|}
name|void
name|storeRelease
parameter_list|(
name|int
name|newValue
parameter_list|)
block|{
name|_q_value
operator|=
name|newValue
expr_stmt|;
block|}
specifier|static
name|bool
name|isReferenceCountingNative
parameter_list|()
function_decl|;
specifier|static
name|bool
name|isReferenceCountingWaitFree
parameter_list|()
function_decl|;
name|bool
name|ref
parameter_list|()
function_decl|;
name|bool
name|deref
parameter_list|()
function_decl|;
specifier|static
name|bool
name|isTestAndSetNative
parameter_list|()
function_decl|;
specifier|static
name|bool
name|isTestAndSetWaitFree
parameter_list|()
function_decl|;
name|bool
name|testAndSetRelaxed
parameter_list|(
name|int
name|expectedValue
parameter_list|,
name|int
name|newValue
parameter_list|)
function_decl|;
name|bool
name|testAndSetAcquire
parameter_list|(
name|int
name|expectedValue
parameter_list|,
name|int
name|newValue
parameter_list|)
function_decl|;
name|bool
name|testAndSetRelease
parameter_list|(
name|int
name|expectedValue
parameter_list|,
name|int
name|newValue
parameter_list|)
function_decl|;
name|bool
name|testAndSetOrdered
parameter_list|(
name|int
name|expectedValue
parameter_list|,
name|int
name|newValue
parameter_list|)
function_decl|;
specifier|static
name|bool
name|isFetchAndStoreNative
parameter_list|()
function_decl|;
specifier|static
name|bool
name|isFetchAndStoreWaitFree
parameter_list|()
function_decl|;
name|int
name|fetchAndStoreRelaxed
parameter_list|(
name|int
name|newValue
parameter_list|)
function_decl|;
name|int
name|fetchAndStoreAcquire
parameter_list|(
name|int
name|newValue
parameter_list|)
function_decl|;
name|int
name|fetchAndStoreRelease
parameter_list|(
name|int
name|newValue
parameter_list|)
function_decl|;
name|int
name|fetchAndStoreOrdered
parameter_list|(
name|int
name|newValue
parameter_list|)
function_decl|;
specifier|static
name|bool
name|isFetchAndAddNative
parameter_list|()
function_decl|;
specifier|static
name|bool
name|isFetchAndAddWaitFree
parameter_list|()
function_decl|;
name|int
name|fetchAndAddRelaxed
parameter_list|(
name|int
name|valueToAdd
parameter_list|)
function_decl|;
name|int
name|fetchAndAddAcquire
parameter_list|(
name|int
name|valueToAdd
parameter_list|)
function_decl|;
name|int
name|fetchAndAddRelease
parameter_list|(
name|int
name|valueToAdd
parameter_list|)
function_decl|;
name|int
name|fetchAndAddOrdered
parameter_list|(
name|int
name|valueToAdd
parameter_list|)
function_decl|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|class
name|QBasicAtomicPointer
block|{
name|public
operator|:
if|#
directive|if
name|defined
argument_list|(
name|QT_ARCH_WINDOWS
argument_list|)
operator|||
name|defined
argument_list|(
name|QT_ARCH_WINDOWSCE
argument_list|)
expr|union
block|{
name|T
operator|*
specifier|volatile
name|_q_value
block|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__i386__
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|_M_IX86
argument_list|)
name|qint64
else|#
directive|else
name|long
endif|#
directive|endif
specifier|volatile
name|_q_value_integral
block|;     }
block|;
else|#
directive|else
name|T
operator|*
specifier|volatile
name|_q_value
block|;
endif|#
directive|endif
comment|// Atomic API, implemented in qatomic_XXX.h
name|T
operator|*
name|load
argument_list|()
specifier|const
block|{
return|return
name|_q_value
return|;
block|}
name|T
operator|*
name|loadAcquire
argument_list|()
block|{
return|return
name|_q_value
return|;
block|}
end_expr_stmt
begin_function
name|void
name|store
parameter_list|(
name|T
modifier|*
name|newValue
parameter_list|)
block|{
name|_q_value
operator|=
name|newValue
expr_stmt|;
block|}
end_function
begin_function
name|void
name|storeRelease
parameter_list|(
name|T
modifier|*
name|newValue
parameter_list|)
block|{
name|_q_value
operator|=
name|newValue
expr_stmt|;
block|}
end_function
begin_function_decl
specifier|static
name|bool
name|isTestAndSetNative
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|bool
name|isTestAndSetWaitFree
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|bool
name|testAndSetRelaxed
parameter_list|(
name|T
modifier|*
name|expectedValue
parameter_list|,
name|T
modifier|*
name|newValue
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|bool
name|testAndSetAcquire
parameter_list|(
name|T
modifier|*
name|expectedValue
parameter_list|,
name|T
modifier|*
name|newValue
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|bool
name|testAndSetRelease
parameter_list|(
name|T
modifier|*
name|expectedValue
parameter_list|,
name|T
modifier|*
name|newValue
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|bool
name|testAndSetOrdered
parameter_list|(
name|T
modifier|*
name|expectedValue
parameter_list|,
name|T
modifier|*
name|newValue
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|bool
name|isFetchAndStoreNative
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|bool
name|isFetchAndStoreWaitFree
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|T
modifier|*
name|fetchAndStoreRelaxed
parameter_list|(
name|T
modifier|*
name|newValue
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|T
modifier|*
name|fetchAndStoreAcquire
parameter_list|(
name|T
modifier|*
name|newValue
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|T
modifier|*
name|fetchAndStoreRelease
parameter_list|(
name|T
modifier|*
name|newValue
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|T
modifier|*
name|fetchAndStoreOrdered
parameter_list|(
name|T
modifier|*
name|newValue
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|bool
name|isFetchAndAddNative
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|bool
name|isFetchAndAddWaitFree
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|T
modifier|*
name|fetchAndAddRelaxed
parameter_list|(
name|qptrdiff
name|valueToAdd
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|T
modifier|*
name|fetchAndAddAcquire
parameter_list|(
name|qptrdiff
name|valueToAdd
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|T
modifier|*
name|fetchAndAddRelease
parameter_list|(
name|qptrdiff
name|valueToAdd
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|T
modifier|*
name|fetchAndAddOrdered
parameter_list|(
name|qptrdiff
name|valueToAdd
parameter_list|)
function_decl|;
end_function_decl
begin_if
unit|};
if|#
directive|if
name|defined
argument_list|(
name|QT_ARCH_WINDOWS
argument_list|)
operator|||
name|defined
argument_list|(
name|QT_ARCH_WINDOWSCE
argument_list|)
end_if
begin_define
DECL|macro|Q_BASIC_ATOMIC_INITIALIZER
define|#
directive|define
name|Q_BASIC_ATOMIC_INITIALIZER
parameter_list|(
name|a
parameter_list|)
value|{ {(a)} }
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|Q_BASIC_ATOMIC_INITIALIZER
define|#
directive|define
name|Q_BASIC_ATOMIC_INITIALIZER
parameter_list|(
name|a
parameter_list|)
value|{ (a) }
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
name|QT_END_NAMESPACE
name|QT_END_HEADER
end_expr_stmt
begin_include
include|#
directive|include
file|<QtCore/qatomic_arch.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QBASIC_ATOMIC
end_comment
end_unit
