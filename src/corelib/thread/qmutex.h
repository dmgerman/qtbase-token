begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QMUTEX_H
end_ifndef
begin_define
DECL|macro|QMUTEX_H
define|#
directive|define
name|QMUTEX_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qglobal.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qatomic.h>
end_include
begin_include
include|#
directive|include
file|<new>
end_include
begin_decl_stmt
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_THREAD
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_QDOC
argument_list|)
ifdef|#
directive|ifdef
name|Q_OS_LINUX
DECL|macro|QT_MUTEX_LOCK_NOEXCEPT
define|#
directive|define
name|QT_MUTEX_LOCK_NOEXCEPT
value|Q_DECL_NOTHROW
else|#
directive|else
define|#
directive|define
name|QT_MUTEX_LOCK_NOEXCEPT
endif|#
directive|endif
DECL|variable|QMutexData
name|class
name|QMutexData
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_CORE_EXPORT
name|QBasicMutex
block|{
name|public
label|:
specifier|inline
name|void
name|lock
parameter_list|()
function|QT_MUTEX_LOCK_NOEXCEPT
block|{
if|if
condition|(
operator|!
name|fastTryLock
argument_list|()
condition|)
name|lockInternal
argument_list|()
expr_stmt|;
block|}
specifier|inline
name|void
name|unlock
parameter_list|()
function|Q_DECL_NOTHROW
block|{
name|Q_ASSERT
argument_list|(
name|d_ptr
operator|.
name|load
argument_list|()
argument_list|)
expr_stmt|;
comment|//mutex must be locked
if|if
condition|(
operator|!
name|fastTryUnlock
argument_list|()
condition|)
name|unlockInternal
argument_list|()
expr_stmt|;
block|}
name|bool
name|tryLock
parameter_list|()
function|Q_DECL_NOTHROW
block|{
return|return
name|fastTryLock
argument_list|()
return|;
block|}
name|bool
name|isRecursive
parameter_list|()
function_decl|;
name|private
label|:
specifier|inline
name|bool
name|fastTryLock
parameter_list|()
function|Q_DECL_NOTHROW
block|{
return|return
name|d_ptr
operator|.
name|testAndSetAcquire
argument_list|(
literal|0
argument_list|,
name|dummyLocked
argument_list|()
argument_list|)
return|;
block|}
specifier|inline
name|bool
name|fastTryUnlock
parameter_list|()
function|Q_DECL_NOTHROW
block|{
return|return
name|d_ptr
operator|.
name|testAndSetRelease
argument_list|(
name|dummyLocked
argument_list|()
argument_list|,
literal|0
argument_list|)
return|;
block|}
name|void
name|lockInternal
argument_list|()
name|QT_MUTEX_LOCK_NOEXCEPT
expr_stmt|;
name|bool
name|lockInternal
argument_list|(
name|int
name|timeout
argument_list|)
name|QT_MUTEX_LOCK_NOEXCEPT
decl_stmt|;
name|void
name|unlockInternal
argument_list|()
name|Q_DECL_NOTHROW
expr_stmt|;
name|QBasicAtomicPointer
operator|<
name|QMutexData
operator|>
name|d_ptr
expr_stmt|;
specifier|static
specifier|inline
name|QMutexData
modifier|*
name|dummyLocked
parameter_list|()
block|{
return|return
name|reinterpret_cast
operator|<
name|QMutexData
operator|*
operator|>
operator|(
name|quintptr
argument_list|(
literal|1
argument_list|)
operator|)
return|;
block|}
name|friend
name|class
name|QMutex
decl_stmt|;
name|friend
name|class
name|QMutexData
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
name|class
name|Q_CORE_EXPORT
name|QMutex
range|:
name|public
name|QBasicMutex
block|{
name|public
operator|:
expr|enum
name|RecursionMode
block|{
name|NonRecursive
block|,
name|Recursive
block|}
block|;
name|explicit
name|QMutex
argument_list|(
argument|RecursionMode mode = NonRecursive
argument_list|)
block|;
operator|~
name|QMutex
argument_list|()
block|;
name|void
name|lock
argument_list|()
name|QT_MUTEX_LOCK_NOEXCEPT
block|;
name|bool
name|tryLock
argument_list|(
argument|int timeout =
literal|0
argument_list|)
name|QT_MUTEX_LOCK_NOEXCEPT
block|;
name|void
name|unlock
argument_list|()
name|Q_DECL_NOTHROW
block|;
name|using
name|QBasicMutex
operator|::
name|isRecursive
block|;
name|private
operator|:
name|Q_DISABLE_COPY
argument_list|(
argument|QMutex
argument_list|)
name|friend
name|class
name|QMutexLocker
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_CORE_EXPORT
name|QMutexLocker
block|{
name|public
label|:
specifier|inline
name|explicit
name|QMutexLocker
parameter_list|(
name|QBasicMutex
modifier|*
name|m
parameter_list|)
function|QT_MUTEX_LOCK_NOEXCEPT
block|{
name|Q_ASSERT_X
argument_list|(
operator|(
name|reinterpret_cast
operator|<
name|quintptr
operator|>
operator|(
name|m
operator|)
operator|&
name|quintptr
argument_list|(
literal|1u
argument_list|)
operator|)
operator|==
name|quintptr
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"QMutexLocker"
argument_list|,
literal|"QMutex pointer is misaligned"
argument_list|)
expr_stmt|;
name|val
operator|=
name|quintptr
argument_list|(
name|m
argument_list|)
expr_stmt|;
if|if
condition|(
name|Q_LIKELY
argument_list|(
name|m
argument_list|)
condition|)
block|{
comment|// call QMutex::lock() instead of QBasicMutex::lock()
name|static_cast
operator|<
name|QMutex
operator|*
operator|>
operator|(
name|m
operator|)
operator|->
name|lock
argument_list|()
expr_stmt|;
name|val
operator||=
literal|1
expr_stmt|;
block|}
block|}
specifier|inline
operator|~
name|QMutexLocker
argument_list|()
block|{
name|unlock
argument_list|()
block|; }
specifier|inline
name|void
name|unlock
argument_list|()
name|Q_DECL_NOTHROW
block|{
if|if
condition|(
operator|(
name|val
operator|&
name|quintptr
argument_list|(
literal|1u
argument_list|)
operator|)
operator|==
name|quintptr
argument_list|(
literal|1u
argument_list|)
condition|)
block|{
name|val
operator|&=
operator|~
name|quintptr
argument_list|(
literal|1u
argument_list|)
expr_stmt|;
name|mutex
argument_list|()
operator|->
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|inline
name|void
name|relock
argument_list|()
name|QT_MUTEX_LOCK_NOEXCEPT
block|{
if|if
condition|(
name|val
condition|)
block|{
if|if
condition|(
operator|(
name|val
operator|&
name|quintptr
argument_list|(
literal|1u
argument_list|)
operator|)
operator|==
name|quintptr
argument_list|(
literal|0u
argument_list|)
condition|)
block|{
name|mutex
argument_list|()
operator|->
name|lock
argument_list|()
expr_stmt|;
name|val
operator||=
name|quintptr
argument_list|(
literal|1u
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|#
directive|if
name|defined
argument_list|(
name|Q_CC_MSVC
argument_list|)
pragma|#
directive|pragma
name|warning
name|(
name|push
name|)
pragma|#
directive|pragma
name|warning
name|(
name|disable
name|:
name|4312
name|)
comment|// ignoring the warning from /Wp64
endif|#
directive|endif
specifier|inline
name|QMutex
operator|*
name|mutex
argument_list|()
specifier|const
block|{
return|return
name|reinterpret_cast
operator|<
name|QMutex
operator|*
operator|>
operator|(
name|val
operator|&
operator|~
name|quintptr
argument_list|(
literal|1u
argument_list|)
operator|)
return|;
block|}
if|#
directive|if
name|defined
argument_list|(
name|Q_CC_MSVC
argument_list|)
pragma|#
directive|pragma
name|warning
name|(
name|pop
name|)
endif|#
directive|endif
name|private
label|:
name|Q_DISABLE_COPY
argument_list|(
argument|QMutexLocker
argument_list|)
name|quintptr
name|val
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_else
else|#
directive|else
end_else
begin_comment
comment|// QT_NO_THREAD or Q_QDOC
end_comment
begin_decl_stmt
name|class
name|Q_CORE_EXPORT
name|QMutex
block|{
name|public
label|:
enum|enum
name|RecursionMode
block|{
name|NonRecursive
block|,
name|Recursive
block|}
enum|;
specifier|inline
name|explicit
name|QMutex
parameter_list|(
name|RecursionMode
name|mode
init|=
name|NonRecursive
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|mode
argument_list|)
expr_stmt|;
block|}
specifier|static
specifier|inline
name|void
name|lock
parameter_list|()
block|{}
specifier|static
specifier|inline
name|bool
name|tryLock
parameter_list|(
name|int
name|timeout
init|=
literal|0
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
return|return
name|true
return|;
block|}
specifier|static
specifier|inline
name|void
name|unlock
parameter_list|()
block|{}
specifier|static
specifier|inline
name|bool
name|isRecursive
parameter_list|()
block|{
return|return
name|true
return|;
block|}
name|private
label|:
name|Q_DISABLE_COPY
argument_list|(
argument|QMutex
argument_list|)
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
name|class
name|Q_CORE_EXPORT
name|QMutexLocker
block|{
name|public
label|:
specifier|inline
name|explicit
name|QMutexLocker
parameter_list|(
name|QMutex
modifier|*
parameter_list|)
block|{}
specifier|inline
operator|~
name|QMutexLocker
argument_list|()
block|{}
specifier|static
specifier|inline
name|void
name|unlock
argument_list|()
block|{}
specifier|static
name|void
name|relock
argument_list|()
block|{}
specifier|static
specifier|inline
name|QMutex
operator|*
name|mutex
argument_list|()
block|{
return|return
literal|0
return|;
block|}
name|private
label|:
name|Q_DISABLE_COPY
argument_list|(
argument|QMutexLocker
argument_list|)
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_typedef
typedef|typedef
name|QMutex
name|QBasicMutex
typedef|;
end_typedef
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_THREAD or Q_QDOC
end_comment
begin_expr_stmt
name|QT_END_NAMESPACE
name|QT_END_HEADER
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QMUTEX_H
end_comment
end_unit
