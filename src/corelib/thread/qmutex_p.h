begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QMUTEX_P_H
end_ifndef
begin_define
DECL|macro|QMUTEX_P_H
define|#
directive|define
name|QMUTEX_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists for the convenience
end_comment
begin_comment
comment|// of qmutex.cpp, qmutex_unix.cpp, and qmutex_win.cpp.  This header
end_comment
begin_comment
comment|// file may change from version to version without notice, or even be
end_comment
begin_comment
comment|// removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|<QtCore/qglobal.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qnamespace.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qmutex.h>
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
end_if
begin_include
include|#
directive|include
file|<mach/semaphore.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
end_if
begin_include
include|#
directive|include
file|<e32std.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
name|class
name|QMutexPrivate
range|:
name|public
name|QMutexData
block|{
name|public
operator|:
name|QMutexPrivate
argument_list|(
argument|QMutex::RecursionMode mode
argument_list|)
block|;
operator|~
name|QMutexPrivate
argument_list|()
block|;
name|bool
name|wait
argument_list|(
argument|int timeout = -
literal|1
argument_list|)
block|;
name|void
name|wakeUp
argument_list|()
block|;
comment|// 1ms = 1000000ns
block|enum
block|{
name|MaximumSpinTimeThreshold
operator|=
literal|1000000
block|}
block|;
specifier|volatile
name|qint64
name|maximumSpinTime
block|;
specifier|volatile
name|qint64
name|averageWaitTime
block|;
name|Qt
operator|::
name|HANDLE
name|owner
block|;
name|uint
name|count
block|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
name|semaphore_t
name|mach_semaphore
block|;
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_LINUX
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
specifier|volatile
name|bool
name|wakeup
block|;
name|pthread_mutex_t
name|mutex
block|;
name|pthread_cond_t
name|cond
block|;
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_WIN32
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|HANDLE
name|event
block|;
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
name|RSemaphore
name|lock
block|;
endif|#
directive|endif
block|}
decl_stmt|;
end_decl_stmt
begin_expr_stmt
DECL|function|QMutexData
specifier|inline
name|QMutexData
operator|::
name|QMutexData
argument_list|(
argument|QMutex::RecursionMode mode
argument_list|)
operator|:
name|recursive
argument_list|(
argument|mode == QMutex::Recursive
argument_list|)
block|{}
DECL|function|~QMutexData
specifier|inline
name|QMutexData
operator|::
operator|~
name|QMutexData
argument_list|()
block|{}
name|QT_END_NAMESPACE
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QMUTEX_P_H
end_comment
end_unit
