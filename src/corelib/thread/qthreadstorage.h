begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia. For licensing terms and ** conditions see http://qt.digia.com/licensing. For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights. These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QTHREADSTORAGE_H
end_ifndef
begin_define
DECL|macro|QTHREADSTORAGE_H
define|#
directive|define
name|QTHREADSTORAGE_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qglobal.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_THREAD
end_ifndef
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
name|class
name|Q_CORE_EXPORT
name|QThreadStorageData
block|{
name|public
label|:
name|explicit
name|QThreadStorageData
parameter_list|(
name|void
function_decl|(
modifier|*
name|func
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
parameter_list|)
function_decl|;
operator|~
name|QThreadStorageData
argument_list|()
expr_stmt|;
name|void
operator|*
operator|*
name|get
argument_list|()
specifier|const
expr_stmt|;
name|void
modifier|*
modifier|*
name|set
parameter_list|(
name|void
modifier|*
name|p
parameter_list|)
function_decl|;
specifier|static
name|void
name|finish
parameter_list|(
name|void
modifier|*
modifier|*
parameter_list|)
function_decl|;
name|int
name|id
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_MOC_CPP
argument_list|)
end_if
begin_comment
comment|// MOC_SKIP_BEGIN
end_comment
begin_comment
comment|// pointer specialization
end_comment
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
DECL|function|qThreadStorage_localData
name|T
operator|*
operator|&
name|qThreadStorage_localData
argument_list|(
argument|QThreadStorageData&d
argument_list|,
argument|T **
argument_list|)
block|{
name|void
operator|*
operator|*
name|v
operator|=
name|d
operator|.
name|get
argument_list|()
block|;
if|if
condition|(
operator|!
name|v
condition|)
name|v
operator|=
name|d
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
end_expr_stmt
begin_return
return|return
operator|*
operator|(
name|reinterpret_cast
operator|<
name|T
operator|*
operator|*
operator|>
operator|(
name|v
operator|)
operator|)
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|typename
name|T
operator|>
specifier|inline
DECL|function|qThreadStorage_localData_const
name|T
operator|*
name|qThreadStorage_localData_const
argument_list|(
argument|const QThreadStorageData&d
argument_list|,
argument|T **
argument_list|)
block|{
name|void
operator|*
operator|*
name|v
operator|=
name|d
operator|.
name|get
argument_list|()
block|;
return|return
name|v
condition|?
operator|*
operator|(
name|reinterpret_cast
operator|<
name|T
operator|*
operator|*
operator|>
operator|(
name|v
operator|)
operator|)
else|:
literal|0
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
DECL|function|qThreadStorage_setLocalData
name|void
name|qThreadStorage_setLocalData
argument_list|(
argument|QThreadStorageData&d
argument_list|,
argument|T **t
argument_list|)
block|{
operator|(
name|void
operator|)
name|d
operator|.
name|set
argument_list|(
operator|*
name|t
argument_list|)
block|; }
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
DECL|function|qThreadStorage_deleteData
name|void
name|qThreadStorage_deleteData
argument_list|(
argument|void *d
argument_list|,
argument|T **
argument_list|)
block|{
name|delete
name|static_cast
operator|<
name|T
operator|*
operator|>
operator|(
name|d
operator|)
block|; }
comment|// value-based specialization
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
DECL|function|qThreadStorage_localData
name|T
operator|&
name|qThreadStorage_localData
argument_list|(
argument|QThreadStorageData&d
argument_list|,
argument|T *
argument_list|)
block|{
name|void
operator|*
operator|*
name|v
operator|=
name|d
operator|.
name|get
argument_list|()
block|;
if|if
condition|(
operator|!
name|v
condition|)
name|v
operator|=
name|d
operator|.
name|set
argument_list|(
argument|new T()
argument_list|)
expr_stmt|;
end_expr_stmt
begin_return
return|return
operator|*
operator|(
name|reinterpret_cast
operator|<
name|T
operator|*
operator|>
operator|(
operator|*
name|v
operator|)
operator|)
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|typename
name|T
operator|>
specifier|inline
DECL|function|qThreadStorage_localData_const
name|T
name|qThreadStorage_localData_const
argument_list|(
argument|const QThreadStorageData&d
argument_list|,
argument|T *
argument_list|)
block|{
name|void
operator|*
operator|*
name|v
operator|=
name|d
operator|.
name|get
argument_list|()
block|;
return|return
name|v
condition|?
operator|*
operator|(
name|reinterpret_cast
operator|<
name|T
operator|*
operator|>
operator|(
operator|*
name|v
operator|)
operator|)
else|:
name|T
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
DECL|function|qThreadStorage_setLocalData
name|void
name|qThreadStorage_setLocalData
argument_list|(
argument|QThreadStorageData&d
argument_list|,
argument|T *t
argument_list|)
block|{
operator|(
name|void
operator|)
name|d
operator|.
name|set
argument_list|(
argument|new T(*t)
argument_list|)
block|; }
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
DECL|function|qThreadStorage_deleteData
name|void
name|qThreadStorage_deleteData
argument_list|(
argument|void *d
argument_list|,
argument|T *
argument_list|)
block|{
name|delete
name|static_cast
operator|<
name|T
operator|*
operator|>
operator|(
name|d
operator|)
block|; }
comment|// MOC_SKIP_END
endif|#
directive|endif
name|template
operator|<
name|class
name|T
operator|>
name|class
name|QThreadStorage
block|{
name|private
operator|:
name|QThreadStorageData
name|d
block|;
name|Q_DISABLE_COPY
argument_list|(
argument|QThreadStorage
argument_list|)
specifier|static
specifier|inline
name|void
name|deleteData
argument_list|(
argument|void *x
argument_list|)
block|{
name|qThreadStorage_deleteData
argument_list|(
name|x
argument_list|,
name|reinterpret_cast
operator|<
name|T
operator|*
operator|>
operator|(
literal|0
operator|)
argument_list|)
block|; }
name|public
operator|:
specifier|inline
name|QThreadStorage
argument_list|()
operator|:
name|d
argument_list|(
argument|deleteData
argument_list|)
block|{ }
specifier|inline
operator|~
name|QThreadStorage
argument_list|()
block|{ }
specifier|inline
name|bool
name|hasLocalData
argument_list|()
specifier|const
block|{
return|return
name|d
operator|.
name|get
argument_list|()
operator|!=
literal|0
return|;
block|}
specifier|inline
name|T
operator|&
name|localData
argument_list|()
block|{
return|return
name|qThreadStorage_localData
argument_list|(
name|d
argument_list|,
name|reinterpret_cast
operator|<
name|T
operator|*
operator|>
operator|(
literal|0
operator|)
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|T
name|localData
argument_list|()
specifier|const
block|{
return|return
name|qThreadStorage_localData_const
argument_list|(
name|d
argument_list|,
name|reinterpret_cast
operator|<
name|T
operator|*
operator|>
operator|(
literal|0
operator|)
argument_list|)
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|void
name|setLocalData
parameter_list|(
name|T
name|t
parameter_list|)
block|{
name|qThreadStorage_setLocalData
argument_list|(
name|d
argument_list|,
operator|&
name|t
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
unit|};
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_THREAD
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QTHREADSTORAGE_H
end_comment
end_unit
