begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qplatformdefs.h"
end_include
begin_include
include|#
directive|include
file|"qreadwritelock.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_THREAD
end_ifndef
begin_include
include|#
directive|include
file|"qmutex.h"
end_include
begin_include
include|#
directive|include
file|"qthread.h"
end_include
begin_include
include|#
directive|include
file|"qwaitcondition.h"
end_include
begin_include
include|#
directive|include
file|"qreadwritelock_p.h"
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_comment
comment|/*! \class QReadWriteLock     \brief The QReadWriteLock class provides read-write locking.      \threadsafe      \ingroup thread      A read-write lock is a synchronization tool for protecting     resources that can be accessed for reading and writing. This type     of lock is useful if you want to allow multiple threads to have     simultaneous read-only access, but as soon as one thread wants to     write to the resource, all other threads must be blocked until     the writing is complete.      In many cases, QReadWriteLock is a direct competitor to QMutex.     QReadWriteLock is a good choice if there are many concurrent     reads and writing occurs infrequently.      Example:      \snippet doc/src/snippets/code/src_corelib_thread_qreadwritelock.cpp 0      To ensure that writers aren't blocked forever by readers, readers     attempting to obtain a lock will not succeed if there is a blocked     writer waiting for access, even if the lock is currently only     accessed by other readers. Also, if the lock is accessed by a     writer and another writer comes in, that writer will have     priority over any readers that might also be waiting.      Like QMutex, a QReadWriteLock can be recursively locked by the     same thread when constructed in     \l{QReadWriteLock::RecursionMode}. In such cases,     unlock() must be called the same number of times lockForWrite() or     lockForRead() was called. Note that the lock type cannot be     changed when trying to lock recursively, i.e. it is not possible     to lock for reading in a thread that already has locked for     writing (and vice versa).      \sa QReadLocker, QWriteLocker, QMutex, QSemaphore */
end_comment
begin_comment
comment|/*!      \enum QReadWriteLock::RecursionMode     \since 4.4      \value Recursive In this mode, a thread can lock the same     QReadWriteLock multiple times and the mutex won't be unlocked     until a corresponding number of unlock() calls have been made.      \value NonRecursive In this mode, a thread may only lock a     QReadWriteLock once.      \sa QReadWriteLock() */
end_comment
begin_comment
comment|/*!     \since 4.4      Constructs a QReadWriteLock object in the given \a recursionMode.      The default recursion mode is NonRecursive.      \sa lockForRead(), lockForWrite(), RecursionMode */
end_comment
begin_constructor
DECL|function|QReadWriteLock
name|QReadWriteLock
operator|::
name|QReadWriteLock
parameter_list|(
name|RecursionMode
name|recursionMode
parameter_list|)
member_init_list|:
name|d
argument_list|(
operator|new
name|QReadWriteLockPrivate
argument_list|(
name|recursionMode
argument_list|)
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Destroys the QReadWriteLock object.      \warning Destroying a read-write lock that is in use may result     in undefined behavior. */
end_comment
begin_destructor
DECL|function|~QReadWriteLock
name|QReadWriteLock
operator|::
name|~
name|QReadWriteLock
parameter_list|()
block|{
operator|delete
name|d
expr_stmt|;
block|}
end_destructor
begin_comment
comment|/*!     Locks the lock for reading. This function will block the current     thread if any thread (including the current) has locked for     writing.      \sa unlock() lockForWrite() tryLockForRead() */
end_comment
begin_function
DECL|function|lockForRead
name|void
name|QReadWriteLock
operator|::
name|lockForRead
parameter_list|()
block|{
name|QMutexLocker
name|lock
argument_list|(
operator|&
name|d
operator|->
name|mutex
argument_list|)
decl_stmt|;
name|Qt
operator|::
name|HANDLE
name|self
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|recursive
condition|)
block|{
name|self
operator|=
name|QThread
operator|::
name|currentThreadId
argument_list|()
expr_stmt|;
name|QHash
argument_list|<
name|Qt
operator|::
name|HANDLE
argument_list|,
name|int
argument_list|>
operator|::
name|iterator
name|it
init|=
name|d
operator|->
name|currentReaders
operator|.
name|find
argument_list|(
name|self
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|!=
name|d
operator|->
name|currentReaders
operator|.
name|end
argument_list|()
condition|)
block|{
operator|++
name|it
operator|.
name|value
argument_list|()
expr_stmt|;
operator|++
name|d
operator|->
name|accessCount
expr_stmt|;
name|Q_ASSERT_X
argument_list|(
name|d
operator|->
name|accessCount
operator|>
literal|0
argument_list|,
literal|"QReadWriteLock::lockForRead()"
argument_list|,
literal|"Overflow in lock counter"
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
while|while
condition|(
name|d
operator|->
name|accessCount
operator|<
literal|0
operator|||
name|d
operator|->
name|waitingWriters
condition|)
block|{
operator|++
name|d
operator|->
name|waitingReaders
expr_stmt|;
name|d
operator|->
name|readerWait
operator|.
name|wait
argument_list|(
operator|&
name|d
operator|->
name|mutex
argument_list|)
expr_stmt|;
operator|--
name|d
operator|->
name|waitingReaders
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|->
name|recursive
condition|)
name|d
operator|->
name|currentReaders
operator|.
name|insert
argument_list|(
name|self
argument_list|,
literal|1
argument_list|)
expr_stmt|;
operator|++
name|d
operator|->
name|accessCount
expr_stmt|;
name|Q_ASSERT_X
argument_list|(
name|d
operator|->
name|accessCount
operator|>
literal|0
argument_list|,
literal|"QReadWriteLock::lockForRead()"
argument_list|,
literal|"Overflow in lock counter"
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Attempts to lock for reading. If the lock was obtained, this     function returns true, otherwise it returns false instead of     waiting for the lock to become available, i.e. it does not block.      The lock attempt will fail if another thread has locked for     writing.      If the lock was obtained, the lock must be unlocked with unlock()     before another thread can successfully lock it.      \sa unlock() lockForRead() */
end_comment
begin_function
DECL|function|tryLockForRead
name|bool
name|QReadWriteLock
operator|::
name|tryLockForRead
parameter_list|()
block|{
name|QMutexLocker
name|lock
argument_list|(
operator|&
name|d
operator|->
name|mutex
argument_list|)
decl_stmt|;
name|Qt
operator|::
name|HANDLE
name|self
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|recursive
condition|)
block|{
name|self
operator|=
name|QThread
operator|::
name|currentThreadId
argument_list|()
expr_stmt|;
name|QHash
argument_list|<
name|Qt
operator|::
name|HANDLE
argument_list|,
name|int
argument_list|>
operator|::
name|iterator
name|it
init|=
name|d
operator|->
name|currentReaders
operator|.
name|find
argument_list|(
name|self
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|!=
name|d
operator|->
name|currentReaders
operator|.
name|end
argument_list|()
condition|)
block|{
operator|++
name|it
operator|.
name|value
argument_list|()
expr_stmt|;
operator|++
name|d
operator|->
name|accessCount
expr_stmt|;
name|Q_ASSERT_X
argument_list|(
name|d
operator|->
name|accessCount
operator|>
literal|0
argument_list|,
literal|"QReadWriteLock::tryLockForRead()"
argument_list|,
literal|"Overflow in lock counter"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
if|if
condition|(
name|d
operator|->
name|accessCount
operator|<
literal|0
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|d
operator|->
name|recursive
condition|)
name|d
operator|->
name|currentReaders
operator|.
name|insert
argument_list|(
name|self
argument_list|,
literal|1
argument_list|)
expr_stmt|;
operator|++
name|d
operator|->
name|accessCount
expr_stmt|;
name|Q_ASSERT_X
argument_list|(
name|d
operator|->
name|accessCount
operator|>
literal|0
argument_list|,
literal|"QReadWriteLock::tryLockForRead()"
argument_list|,
literal|"Overflow in lock counter"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/*! \overload      Attempts to lock for reading. This function returns true if the     lock was obtained; otherwise it returns false. If another thread     has locked for writing, this function will wait for at most \a     timeout milliseconds for the lock to become available.      Note: Passing a negative number as the \a timeout is equivalent to     calling lockForRead(), i.e. this function will wait forever until     lock can be locked for reading when \a timeout is negative.      If the lock was obtained, the lock must be unlocked with unlock()     before another thread can successfully lock it.      \sa unlock() lockForRead() */
end_comment
begin_function
DECL|function|tryLockForRead
name|bool
name|QReadWriteLock
operator|::
name|tryLockForRead
parameter_list|(
name|int
name|timeout
parameter_list|)
block|{
name|QMutexLocker
name|lock
argument_list|(
operator|&
name|d
operator|->
name|mutex
argument_list|)
decl_stmt|;
name|Qt
operator|::
name|HANDLE
name|self
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|recursive
condition|)
block|{
name|self
operator|=
name|QThread
operator|::
name|currentThreadId
argument_list|()
expr_stmt|;
name|QHash
argument_list|<
name|Qt
operator|::
name|HANDLE
argument_list|,
name|int
argument_list|>
operator|::
name|iterator
name|it
init|=
name|d
operator|->
name|currentReaders
operator|.
name|find
argument_list|(
name|self
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|!=
name|d
operator|->
name|currentReaders
operator|.
name|end
argument_list|()
condition|)
block|{
operator|++
name|it
operator|.
name|value
argument_list|()
expr_stmt|;
operator|++
name|d
operator|->
name|accessCount
expr_stmt|;
name|Q_ASSERT_X
argument_list|(
name|d
operator|->
name|accessCount
operator|>
literal|0
argument_list|,
literal|"QReadWriteLock::tryLockForRead()"
argument_list|,
literal|"Overflow in lock counter"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
while|while
condition|(
name|d
operator|->
name|accessCount
operator|<
literal|0
operator|||
name|d
operator|->
name|waitingWriters
condition|)
block|{
operator|++
name|d
operator|->
name|waitingReaders
expr_stmt|;
name|bool
name|success
init|=
name|d
operator|->
name|readerWait
operator|.
name|wait
argument_list|(
operator|&
name|d
operator|->
name|mutex
argument_list|,
name|timeout
operator|<
literal|0
condition|?
name|ULONG_MAX
else|:
name|ulong
argument_list|(
name|timeout
argument_list|)
argument_list|)
decl_stmt|;
operator|--
name|d
operator|->
name|waitingReaders
expr_stmt|;
if|if
condition|(
operator|!
name|success
condition|)
return|return
literal|false
return|;
block|}
if|if
condition|(
name|d
operator|->
name|recursive
condition|)
name|d
operator|->
name|currentReaders
operator|.
name|insert
argument_list|(
name|self
argument_list|,
literal|1
argument_list|)
expr_stmt|;
operator|++
name|d
operator|->
name|accessCount
expr_stmt|;
name|Q_ASSERT_X
argument_list|(
name|d
operator|->
name|accessCount
operator|>
literal|0
argument_list|,
literal|"QReadWriteLock::tryLockForRead()"
argument_list|,
literal|"Overflow in lock counter"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/*!     Locks the lock for writing. This function will block the current     thread if another thread has locked for reading or writing.      \sa unlock() lockForRead() tryLockForWrite() */
end_comment
begin_function
DECL|function|lockForWrite
name|void
name|QReadWriteLock
operator|::
name|lockForWrite
parameter_list|()
block|{
name|QMutexLocker
name|lock
argument_list|(
operator|&
name|d
operator|->
name|mutex
argument_list|)
decl_stmt|;
name|Qt
operator|::
name|HANDLE
name|self
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|recursive
condition|)
block|{
name|self
operator|=
name|QThread
operator|::
name|currentThreadId
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|currentWriter
operator|==
name|self
condition|)
block|{
operator|--
name|d
operator|->
name|accessCount
expr_stmt|;
name|Q_ASSERT_X
argument_list|(
name|d
operator|->
name|accessCount
operator|<
literal|0
argument_list|,
literal|"QReadWriteLock::lockForWrite()"
argument_list|,
literal|"Overflow in lock counter"
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
while|while
condition|(
name|d
operator|->
name|accessCount
operator|!=
literal|0
condition|)
block|{
operator|++
name|d
operator|->
name|waitingWriters
expr_stmt|;
name|d
operator|->
name|writerWait
operator|.
name|wait
argument_list|(
operator|&
name|d
operator|->
name|mutex
argument_list|)
expr_stmt|;
operator|--
name|d
operator|->
name|waitingWriters
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|->
name|recursive
condition|)
name|d
operator|->
name|currentWriter
operator|=
name|self
expr_stmt|;
operator|--
name|d
operator|->
name|accessCount
expr_stmt|;
name|Q_ASSERT_X
argument_list|(
name|d
operator|->
name|accessCount
operator|<
literal|0
argument_list|,
literal|"QReadWriteLock::lockForWrite()"
argument_list|,
literal|"Overflow in lock counter"
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Attempts to lock for writing. If the lock was obtained, this     function returns true; otherwise, it returns false immediately.      The lock attempt will fail if another thread has locked for     reading or writing.      If the lock was obtained, the lock must be unlocked with unlock()     before another thread can successfully lock it.      \sa unlock() lockForWrite() */
end_comment
begin_function
DECL|function|tryLockForWrite
name|bool
name|QReadWriteLock
operator|::
name|tryLockForWrite
parameter_list|()
block|{
name|QMutexLocker
name|lock
argument_list|(
operator|&
name|d
operator|->
name|mutex
argument_list|)
decl_stmt|;
name|Qt
operator|::
name|HANDLE
name|self
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|recursive
condition|)
block|{
name|self
operator|=
name|QThread
operator|::
name|currentThreadId
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|currentWriter
operator|==
name|self
condition|)
block|{
operator|--
name|d
operator|->
name|accessCount
expr_stmt|;
name|Q_ASSERT_X
argument_list|(
name|d
operator|->
name|accessCount
operator|<
literal|0
argument_list|,
literal|"QReadWriteLock::lockForWrite()"
argument_list|,
literal|"Overflow in lock counter"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
if|if
condition|(
name|d
operator|->
name|accessCount
operator|!=
literal|0
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|d
operator|->
name|recursive
condition|)
name|d
operator|->
name|currentWriter
operator|=
name|self
expr_stmt|;
operator|--
name|d
operator|->
name|accessCount
expr_stmt|;
name|Q_ASSERT_X
argument_list|(
name|d
operator|->
name|accessCount
operator|<
literal|0
argument_list|,
literal|"QReadWriteLock::tryLockForWrite()"
argument_list|,
literal|"Overflow in lock counter"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/*! \overload      Attempts to lock for writing. This function returns true if the     lock was obtained; otherwise it returns false. If another thread     has locked for reading or writing, this function will wait for at     most \a timeout milliseconds for the lock to become available.      Note: Passing a negative number as the \a timeout is equivalent to     calling lockForWrite(), i.e. this function will wait forever until     lock can be locked for writing when \a timeout is negative.      If the lock was obtained, the lock must be unlocked with unlock()     before another thread can successfully lock it.      \sa unlock() lockForWrite() */
end_comment
begin_function
DECL|function|tryLockForWrite
name|bool
name|QReadWriteLock
operator|::
name|tryLockForWrite
parameter_list|(
name|int
name|timeout
parameter_list|)
block|{
name|QMutexLocker
name|lock
argument_list|(
operator|&
name|d
operator|->
name|mutex
argument_list|)
decl_stmt|;
name|Qt
operator|::
name|HANDLE
name|self
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|recursive
condition|)
block|{
name|self
operator|=
name|QThread
operator|::
name|currentThreadId
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|currentWriter
operator|==
name|self
condition|)
block|{
operator|--
name|d
operator|->
name|accessCount
expr_stmt|;
name|Q_ASSERT_X
argument_list|(
name|d
operator|->
name|accessCount
operator|<
literal|0
argument_list|,
literal|"QReadWriteLock::lockForWrite()"
argument_list|,
literal|"Overflow in lock counter"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
while|while
condition|(
name|d
operator|->
name|accessCount
operator|!=
literal|0
condition|)
block|{
operator|++
name|d
operator|->
name|waitingWriters
expr_stmt|;
name|bool
name|success
init|=
name|d
operator|->
name|writerWait
operator|.
name|wait
argument_list|(
operator|&
name|d
operator|->
name|mutex
argument_list|,
name|timeout
operator|<
literal|0
condition|?
name|ULONG_MAX
else|:
name|ulong
argument_list|(
name|timeout
argument_list|)
argument_list|)
decl_stmt|;
operator|--
name|d
operator|->
name|waitingWriters
expr_stmt|;
if|if
condition|(
operator|!
name|success
condition|)
return|return
literal|false
return|;
block|}
if|if
condition|(
name|d
operator|->
name|recursive
condition|)
name|d
operator|->
name|currentWriter
operator|=
name|self
expr_stmt|;
operator|--
name|d
operator|->
name|accessCount
expr_stmt|;
name|Q_ASSERT_X
argument_list|(
name|d
operator|->
name|accessCount
operator|<
literal|0
argument_list|,
literal|"QReadWriteLock::tryLockForWrite()"
argument_list|,
literal|"Overflow in lock counter"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/*!     Unlocks the lock.      Attempting to unlock a lock that is not locked is an error, and will result     in program termination.      \sa lockForRead() lockForWrite() tryLockForRead() tryLockForWrite() */
end_comment
begin_function
DECL|function|unlock
name|void
name|QReadWriteLock
operator|::
name|unlock
parameter_list|()
block|{
name|QMutexLocker
name|lock
argument_list|(
operator|&
name|d
operator|->
name|mutex
argument_list|)
decl_stmt|;
name|Q_ASSERT_X
argument_list|(
name|d
operator|->
name|accessCount
operator|!=
literal|0
argument_list|,
literal|"QReadWriteLock::unlock()"
argument_list|,
literal|"Cannot unlock an unlocked lock"
argument_list|)
expr_stmt|;
name|bool
name|unlocked
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|accessCount
operator|>
literal|0
condition|)
block|{
comment|// releasing a read lock
if|if
condition|(
name|d
operator|->
name|recursive
condition|)
block|{
name|Qt
operator|::
name|HANDLE
name|self
init|=
name|QThread
operator|::
name|currentThreadId
argument_list|()
decl_stmt|;
name|QHash
argument_list|<
name|Qt
operator|::
name|HANDLE
argument_list|,
name|int
argument_list|>
operator|::
name|iterator
name|it
init|=
name|d
operator|->
name|currentReaders
operator|.
name|find
argument_list|(
name|self
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|!=
name|d
operator|->
name|currentReaders
operator|.
name|end
argument_list|()
condition|)
block|{
if|if
condition|(
operator|--
name|it
operator|.
name|value
argument_list|()
operator|<=
literal|0
condition|)
name|d
operator|->
name|currentReaders
operator|.
name|erase
argument_list|(
name|it
argument_list|)
expr_stmt|;
block|}
block|}
name|unlocked
operator|=
operator|--
name|d
operator|->
name|accessCount
operator|==
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|d
operator|->
name|accessCount
operator|<
literal|0
operator|&&
operator|++
name|d
operator|->
name|accessCount
operator|==
literal|0
condition|)
block|{
comment|// released a write lock
name|unlocked
operator|=
literal|true
expr_stmt|;
name|d
operator|->
name|currentWriter
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|unlocked
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|waitingWriters
condition|)
block|{
name|d
operator|->
name|writerWait
operator|.
name|wakeOne
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|d
operator|->
name|waitingReaders
condition|)
block|{
name|d
operator|->
name|readerWait
operator|.
name|wakeAll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|/*!     \class QReadLocker     \brief The QReadLocker class is a convenience class that     simplifies locking and unlocking read-write locks for read access.      \threadsafe      \ingroup thread      The purpose of QReadLocker (and QWriteLocker) is to simplify     QReadWriteLock locking and unlocking. Locking and unlocking     statements or in exception handling code is error-prone and     difficult to debug. QReadLocker can be used in such situations     to ensure that the state of the lock is always well-defined.      Here's an example that uses QReadLocker to lock and unlock a     read-write lock for reading:      \snippet doc/src/snippets/code/src_corelib_thread_qreadwritelock.cpp 1      It is equivalent to the following code:      \snippet doc/src/snippets/code/src_corelib_thread_qreadwritelock.cpp 2      The QMutexLocker documentation shows examples where the use of a     locker object greatly simplifies programming.      \sa QWriteLocker, QReadWriteLock */
end_comment
begin_comment
comment|/*!     \fn QReadLocker::QReadLocker(QReadWriteLock *lock)      Constructs a QReadLocker and locks \a lock for reading. The lock     will be unlocked when the QReadLocker is destroyed. If \c lock is     zero, QReadLocker does nothing.      \sa QReadWriteLock::lockForRead() */
end_comment
begin_comment
comment|/*!     \fn QReadLocker::~QReadLocker()      Destroys the QReadLocker and unlocks the lock that was passed to     the constructor.      \sa QReadWriteLock::unlock() */
end_comment
begin_comment
comment|/*!     \fn void QReadLocker::unlock()      Unlocks the lock associated with this locker.      \sa QReadWriteLock::unlock() */
end_comment
begin_comment
comment|/*!     \fn void QReadLocker::relock()      Relocks an unlocked lock.      \sa unlock() */
end_comment
begin_comment
comment|/*!     \fn QReadWriteLock *QReadLocker::readWriteLock() const      Returns a pointer to the read-write lock that was passed     to the constructor. */
end_comment
begin_comment
comment|/*!     \class QWriteLocker     \brief The QWriteLocker class is a convenience class that     simplifies locking and unlocking read-write locks for write access.      \threadsafe      \ingroup thread      The purpose of QWriteLocker (and QReadLocker) is to simplify     QReadWriteLock locking and unlocking. Locking and unlocking     statements or in exception handling code is error-prone and     difficult to debug. QWriteLocker can be used in such situations     to ensure that the state of the lock is always well-defined.      Here's an example that uses QWriteLocker to lock and unlock a     read-write lock for writing:      \snippet doc/src/snippets/code/src_corelib_thread_qreadwritelock.cpp 3      It is equivalent to the following code:      \snippet doc/src/snippets/code/src_corelib_thread_qreadwritelock.cpp 4      The QMutexLocker documentation shows examples where the use of a     locker object greatly simplifies programming.      \sa QReadLocker, QReadWriteLock */
end_comment
begin_comment
comment|/*!     \fn QWriteLocker::QWriteLocker(QReadWriteLock *lock)      Constructs a QWriteLocker and locks \a lock for writing. The lock     will be unlocked when the QWriteLocker is destroyed. If \c lock is     zero, QWriteLocker does nothing.      \sa QReadWriteLock::lockForWrite() */
end_comment
begin_comment
comment|/*!     \fn QWriteLocker::~QWriteLocker()      Destroys the QWriteLocker and unlocks the lock that was passed to     the constructor.      \sa QReadWriteLock::unlock() */
end_comment
begin_comment
comment|/*!     \fn void QWriteLocker::unlock()      Unlocks the lock associated with this locker.      \sa QReadWriteLock::unlock() */
end_comment
begin_comment
comment|/*!     \fn void QWriteLocker::relock()      Relocks an unlocked lock.      \sa unlock() */
end_comment
begin_comment
comment|/*!     \fn QReadWriteLock *QWriteLocker::readWriteLock() const      Returns a pointer to the read-write lock that was passed     to the constructor. */
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_THREAD
end_comment
end_unit
