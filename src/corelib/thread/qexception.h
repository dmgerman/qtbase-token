begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QTCORE_QEXCEPTION_H
end_ifndef
begin_define
DECL|macro|QTCORE_QEXCEPTION_H
define|#
directive|define
name|QTCORE_QEXCEPTION_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qglobal.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QFUTURE
end_ifndef
begin_include
include|#
directive|include
file|<QtCore/qatomic.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qshareddata.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_EXCEPTIONS
end_ifndef
begin_include
include|#
directive|include
file|<exception>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
ifndef|#
directive|ifndef
name|QT_NO_EXCEPTIONS
name|class
name|Q_CORE_EXPORT
name|QException
range|:
name|public
name|std
operator|::
name|exception
block|{
name|public
operator|:
operator|~
name|QException
argument_list|()
ifdef|#
directive|ifdef
name|Q_COMPILER_NOEXCEPT
name|noexcept
else|#
directive|else
name|throw
argument_list|()
endif|#
directive|endif
block|;
name|virtual
name|void
name|raise
argument_list|()
specifier|const
block|;
name|virtual
name|QException
operator|*
name|clone
argument_list|()
specifier|const
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_CORE_EXPORT
name|QUnhandledException
range|:
name|public
name|QException
block|{
name|public
operator|:
operator|~
name|QUnhandledException
argument_list|()
ifdef|#
directive|ifdef
name|Q_COMPILER_NOEXCEPT
name|noexcept
else|#
directive|else
name|throw
argument_list|()
endif|#
directive|endif
block|;
name|void
name|raise
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|;
name|QUnhandledException
operator|*
name|clone
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|namespace
name|QtPrivate
block|{
name|class
name|Base
decl_stmt|;
name|class
name|Q_CORE_EXPORT
name|ExceptionHolder
block|{
name|public
label|:
name|ExceptionHolder
argument_list|(
name|QException
operator|*
name|exception
operator|=
name|Q_NULLPTR
argument_list|)
expr_stmt|;
name|ExceptionHolder
argument_list|(
specifier|const
name|ExceptionHolder
operator|&
name|other
argument_list|)
expr_stmt|;
name|void
name|operator
init|=
operator|(
specifier|const
name|ExceptionHolder
operator|&
name|other
operator|)
decl_stmt|;
operator|~
name|ExceptionHolder
argument_list|()
expr_stmt|;
name|QException
operator|*
name|exception
argument_list|()
specifier|const
expr_stmt|;
name|QExplicitlySharedDataPointer
operator|<
name|Base
operator|>
name|base
expr_stmt|;
block|}
empty_stmt|;
name|class
name|Q_CORE_EXPORT
name|ExceptionStore
block|{
name|public
label|:
name|void
name|setException
parameter_list|(
specifier|const
name|QException
modifier|&
name|e
parameter_list|)
function_decl|;
name|bool
name|hasException
argument_list|()
specifier|const
expr_stmt|;
name|ExceptionHolder
name|exception
parameter_list|()
function_decl|;
name|void
name|throwPossibleException
parameter_list|()
function_decl|;
name|bool
name|hasThrown
argument_list|()
specifier|const
expr_stmt|;
name|ExceptionHolder
name|exceptionHolder
decl_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt
begin_comment
comment|// namespace QtPrivate
end_comment
begin_else
else|#
directive|else
end_else
begin_comment
comment|// QT_NO_EXCEPTIONS
end_comment
begin_decl_stmt
name|namespace
name|QtPrivate
block|{
name|class
name|Q_CORE_EXPORT
name|ExceptionStore
block|{
name|public
label|:
name|ExceptionStore
argument_list|()
block|{ }
specifier|inline
name|void
name|throwPossibleException
parameter_list|()
block|{}
block|}
empty_stmt|;
block|}
end_decl_stmt
begin_comment
comment|// namespace QtPrivate
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_EXCEPTIONS
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_QFUTURE
end_comment
begin_endif
endif|#
directive|endif
end_endif
end_unit
