begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qplatformdefs.h"
end_include
begin_include
include|#
directive|include
file|"qmutex.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_THREAD
end_ifndef
begin_include
include|#
directive|include
file|"qatomic.h"
end_include
begin_include
include|#
directive|include
file|"qelapsedtimer.h"
end_include
begin_include
include|#
directive|include
file|"qthread.h"
end_include
begin_include
include|#
directive|include
file|"qmutex_p.h"
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_constructor
DECL|function|QMutexPrivate
name|QMutexPrivate
operator|::
name|QMutexPrivate
parameter_list|(
name|QMutex
operator|::
name|RecursionMode
name|mode
parameter_list|)
member_init_list|:
name|QMutexData
argument_list|(
name|mode
argument_list|)
member_init_list|,
name|maximumSpinTime
argument_list|(
name|MaximumSpinTimeThreshold
argument_list|)
member_init_list|,
name|averageWaitTime
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|owner
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|count
argument_list|(
literal|0
argument_list|)
block|{
name|int
name|r
init|=
name|lock
operator|.
name|CreateLocal
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
name|KErrNone
condition|)
name|qWarning
argument_list|(
literal|"QMutex: failed to create lock, error %d"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|qt_symbian_throwIfError
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QMutexPrivate
name|QMutexPrivate
operator|::
name|~
name|QMutexPrivate
parameter_list|()
block|{
name|lock
operator|.
name|Close
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|wait
name|bool
name|QMutexPrivate
operator|::
name|wait
parameter_list|(
name|int
name|timeout
parameter_list|)
block|{
if|if
condition|(
name|contenders
operator|.
name|fetchAndAddAcquire
argument_list|(
literal|1
argument_list|)
operator|==
literal|0
condition|)
block|{
comment|// lock acquired without waiting
return|return
literal|true
return|;
block|}
name|int
name|r
init|=
name|KErrTimedOut
decl_stmt|;
if|if
condition|(
name|timeout
operator|<
literal|0
condition|)
block|{
name|lock
operator|.
name|Wait
argument_list|()
expr_stmt|;
name|r
operator|=
name|KErrNone
expr_stmt|;
block|}
else|else
block|{
comment|// Symbian lock waits are specified in microseconds.
comment|// The wait is therefore chunked.
comment|// KErrNone indicates success, KErrGeneral and KErrArgument are real fails, anything else is a timeout
do|do
block|{
name|int
name|waitTime
init|=
name|qMin
argument_list|(
name|KMaxTInt
operator|/
literal|1000
argument_list|,
name|timeout
argument_list|)
decl_stmt|;
name|timeout
operator|-=
name|waitTime
expr_stmt|;
comment|// Symbian undocumented feature - 0us means no timeout! Use a minimum of 1
name|r
operator|=
name|lock
operator|.
name|Wait
argument_list|(
name|qMax
argument_list|(
literal|1
argument_list|,
name|waitTime
operator|*
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|r
operator|!=
name|KErrNone
operator|&&
name|r
operator|!=
name|KErrGeneral
operator|&&
name|r
operator|!=
name|KErrArgument
operator|&&
name|timeout
operator|>
literal|0
condition|)
do|;
block|}
name|bool
name|returnValue
init|=
operator|(
name|r
operator|==
name|KErrNone
operator|)
decl_stmt|;
name|contenders
operator|.
name|deref
argument_list|()
expr_stmt|;
return|return
name|returnValue
return|;
block|}
end_function
begin_function
DECL|function|wakeUp
name|void
name|QMutexPrivate
operator|::
name|wakeUp
parameter_list|()
block|{
name|lock
operator|.
name|Signal
argument_list|()
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_THREAD
end_comment
end_unit
