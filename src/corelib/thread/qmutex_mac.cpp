begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qplatformdefs.h"
end_include
begin_include
include|#
directive|include
file|"qmutex.h"
end_include
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_THREAD
argument_list|)
end_if
begin_include
include|#
directive|include
file|"qmutex_p.h"
end_include
begin_include
include|#
directive|include
file|<mach/mach.h>
end_include
begin_include
include|#
directive|include
file|<mach/task.h>
end_include
begin_include
include|#
directive|include
file|<errno.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_constructor
DECL|function|QMutexPrivate
name|QMutexPrivate
operator|::
name|QMutexPrivate
parameter_list|(
name|QMutex
operator|::
name|RecursionMode
name|mode
parameter_list|)
member_init_list|:
name|recursive
argument_list|(
name|mode
operator|==
name|QMutex
operator|::
name|Recursive
argument_list|)
block|{
name|kern_return_t
name|r
init|=
name|semaphore_create
argument_list|(
name|mach_task_self
argument_list|()
argument_list|,
operator|&
name|mach_semaphore
argument_list|,
name|SYNC_POLICY_FIFO
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
name|KERN_SUCCESS
condition|)
name|qWarning
argument_list|(
literal|"QMutex: failed to create semaphore, error %d"
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QMutexPrivate
name|QMutexPrivate
operator|::
name|~
name|QMutexPrivate
parameter_list|()
block|{
name|kern_return_t
name|r
init|=
name|semaphore_destroy
argument_list|(
name|mach_task_self
argument_list|()
argument_list|,
name|mach_semaphore
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
name|KERN_SUCCESS
condition|)
name|qWarning
argument_list|(
literal|"QMutex: failed to destroy semaphore, error %d"
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|wait
name|bool
name|QMutexPrivate
operator|::
name|wait
parameter_list|(
name|int
name|timeout
parameter_list|)
block|{
name|kern_return_t
name|r
decl_stmt|;
if|if
condition|(
name|timeout
operator|<
literal|0
condition|)
block|{
do|do
block|{
name|r
operator|=
name|semaphore_wait
argument_list|(
name|mach_semaphore
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|r
operator|==
name|KERN_ABORTED
condition|)
do|;
name|Q_ASSERT
argument_list|(
name|r
operator|==
name|KERN_SUCCESS
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mach_timespec_t
name|ts
decl_stmt|;
name|ts
operator|.
name|tv_nsec
operator|=
operator|(
operator|(
name|timeout
operator|%
literal|1000
operator|)
operator|*
literal|1000
operator|)
operator|*
literal|1000
expr_stmt|;
name|ts
operator|.
name|tv_sec
operator|=
operator|(
name|timeout
operator|/
literal|1000
operator|)
expr_stmt|;
name|r
operator|=
name|semaphore_timedwait
argument_list|(
name|mach_semaphore
argument_list|,
name|ts
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|r
operator|==
name|KERN_SUCCESS
operator|)
return|;
block|}
end_function
begin_function
DECL|function|wakeUp
name|void
name|QMutexPrivate
operator|::
name|wakeUp
parameter_list|()
block|{
name|semaphore_signal
argument_list|(
name|mach_semaphore
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QT_NO_THREAD
end_comment
end_unit
