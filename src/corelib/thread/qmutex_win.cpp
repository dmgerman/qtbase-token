begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qmutex.h"
end_include
begin_include
include|#
directive|include
file|<qatomic.h>
end_include
begin_include
include|#
directive|include
file|"qmutex_p.h"
end_include
begin_include
include|#
directive|include
file|<qt_windows.h>
end_include
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|QMutexPrivate
name|QMutexPrivate
operator|::
name|QMutexPrivate
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|Q_OS_WINRT
name|event
operator|=
name|CreateEvent
argument_list|(
literal|0
argument_list|,
name|FALSE
argument_list|,
name|FALSE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
else|#
directive|else
name|event
operator|=
name|CreateEventEx
argument_list|(
literal|0
argument_list|,
name|NULL
argument_list|,
literal|0
argument_list|,
name|EVENT_ALL_ACCESS
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|event
condition|)
name|qWarning
argument_list|(
literal|"QMutexData::QMutexData: Cannot create event"
argument_list|)
expr_stmt|;
block|}
end_function
begin_destructor
DECL|function|~QMutexPrivate
name|QMutexPrivate
operator|::
name|~
name|QMutexPrivate
parameter_list|()
block|{
name|CloseHandle
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|wait
name|bool
name|QMutexPrivate
operator|::
name|wait
parameter_list|(
name|int
name|timeout
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|Q_OS_WINCE
return|return
operator|(
name|WaitForSingleObjectEx
argument_list|(
name|event
argument_list|,
name|timeout
operator|<
literal|0
condition|?
name|INFINITE
else|:
name|timeout
argument_list|,
name|FALSE
argument_list|)
operator|==
name|WAIT_OBJECT_0
operator|)
return|;
else|#
directive|else
return|return
operator|(
name|WaitForSingleObject
argument_list|(
name|event
argument_list|,
name|timeout
operator|<
literal|0
condition|?
name|INFINITE
else|:
name|timeout
argument_list|)
operator|==
name|WAIT_OBJECT_0
operator|)
return|;
endif|#
directive|endif
block|}
end_function
begin_function
name|void
name|QMutexPrivate
operator|::
name|wakeUp
parameter_list|()
name|Q_DECL_NOTHROW
block|{
name|SetEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
