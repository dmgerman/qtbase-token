begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Thiago Macieira<thiago@kde.org> ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QGENERICATOMIC_H
end_ifndef
begin_define
DECL|macro|QGENERICATOMIC_H
define|#
directive|define
name|QGENERICATOMIC_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qglobal.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qtypeinfo.h>
end_include
begin_expr_stmt
name|QT_BEGIN_NAMESPACE
if|#
directive|if
literal|0
comment|// silence syncqt warnings
expr|QT_END_NAMESPACE
pragma|#
directive|pragma
name|qt_sync_skip_header_check
pragma|#
directive|pragma
name|qt_sync_stop_processing
endif|#
directive|endif
ifdef|#
directive|ifdef
name|Q_CC_GNU
comment|// lowercase is fine, we'll undef it below
DECL|macro|always_inline
define|#
directive|define
name|always_inline
value|__attribute__((always_inline, gnu_inline))
else|#
directive|else
define|#
directive|define
name|always_inline
endif|#
directive|endif
DECL|struct|QAtomicOpsSupport
DECL|enumerator|IsSupported
name|template
operator|<
name|int
operator|>
expr|struct
name|QAtomicOpsSupport
block|{ enum
block|{
name|IsSupported
operator|=
literal|0
block|}
block|; }
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|struct|QAtomicOpsSupport
DECL|enumerator|IsSupported
name|template
operator|<
operator|>
expr|struct
name|QAtomicOpsSupport
operator|<
literal|4
operator|>
block|{ enum
block|{
name|IsSupported
operator|=
literal|1
block|}
block|; }
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|struct|QAtomicAdditiveType
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|QAtomicAdditiveType
block|{
DECL|typedef|AdditiveT
typedef|typedef
name|T
name|AdditiveT
typedef|;
DECL|member|AddScale
specifier|static
specifier|const
name|int
name|AddScale
operator|=
literal|1
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|member|AddScale
unit|};
DECL|struct|T
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|QAtomicAdditiveType
operator|<
name|T
operator|*
operator|>
block|{
DECL|typedef|AdditiveT
typedef|typedef
name|qptrdiff
name|AdditiveT
typedef|;
DECL|member|AddScale
specifier|static
specifier|const
name|int
name|AddScale
operator|=
sizeof|sizeof
argument_list|(
name|T
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
unit|};
comment|// not really atomic...
end_comment
begin_expr_stmt
DECL|struct|QGenericAtomicOps
name|template
operator|<
name|typename
name|BaseClass
operator|>
expr|struct
name|QGenericAtomicOps
block|{
DECL|struct|AtomicType
DECL|typedef|Type
DECL|typedef|PointerType
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|AtomicType
block|{
typedef|typedef
name|T
name|Type
typedef|;
typedef|typedef
name|T
modifier|*
name|PointerType
typedef|;
block|}
end_expr_stmt
begin_empty_stmt
DECL|struct|AtomicType
DECL|typedef|Type
DECL|typedef|PointerType
empty_stmt|;
end_empty_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
name|void
name|acquireMemoryFence
argument_list|(
argument|const T&_q_value
argument_list|)
name|Q_DECL_NOTHROW
block|{
name|BaseClass
operator|::
name|orderedMemoryFence
argument_list|(
name|_q_value
argument_list|)
block|;     }
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
name|void
name|releaseMemoryFence
argument_list|(
argument|const T&_q_value
argument_list|)
name|Q_DECL_NOTHROW
block|{
name|BaseClass
operator|::
name|orderedMemoryFence
argument_list|(
name|_q_value
argument_list|)
block|;     }
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
name|void
name|orderedMemoryFence
argument_list|(
argument|const T&
argument_list|)
name|Q_DECL_NOTHROW
block|{     }
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
specifier|inline
name|always_inline
name|T
name|load
argument_list|(
argument|const T&_q_value
argument_list|)
name|Q_DECL_NOTHROW
block|{
return|return
name|_q_value
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|member|T
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|X
operator|>
specifier|static
specifier|inline
name|always_inline
name|void
name|store
argument_list|(
argument|T&_q_value
argument_list|,
argument|X newValue
argument_list|)
name|Q_DECL_NOTHROW
block|{
name|_q_value
operator|=
name|newValue
block|;     }
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
specifier|inline
name|always_inline
name|T
name|loadAcquire
argument_list|(
argument|const T&_q_value
argument_list|)
name|Q_DECL_NOTHROW
block|{
name|T
name|tmp
operator|=
operator|*
name|static_cast
operator|<
specifier|const
specifier|volatile
name|T
operator|*
operator|>
operator|(
operator|&
name|_q_value
operator|)
block|;
name|BaseClass
operator|::
name|acquireMemoryFence
argument_list|(
name|_q_value
argument_list|)
block|;
return|return
name|tmp
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|member|T
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|X
operator|>
specifier|static
specifier|inline
name|always_inline
name|void
name|storeRelease
argument_list|(
argument|T&_q_value
argument_list|,
argument|X newValue
argument_list|)
name|Q_DECL_NOTHROW
block|{
name|BaseClass
operator|::
name|releaseMemoryFence
argument_list|(
name|_q_value
argument_list|)
block|;
operator|*
name|static_cast
operator|<
specifier|volatile
name|T
operator|*
operator|>
operator|(
operator|&
name|_q_value
operator|)
operator|=
name|newValue
block|;     }
specifier|static
specifier|inline
name|Q_DECL_CONSTEXPR
name|bool
name|isReferenceCountingNative
argument_list|()
name|Q_DECL_NOTHROW
block|{
return|return
name|BaseClass
operator|::
name|isFetchAndAddNative
argument_list|()
return|;
block|}
end_expr_stmt
begin_function
specifier|static
specifier|inline
name|Q_DECL_CONSTEXPR
name|bool
name|isReferenceCountingWaitFree
parameter_list|()
function|Q_DECL_NOTHROW
block|{
return|return
name|BaseClass
operator|::
name|isFetchAndAddWaitFree
argument_list|()
return|;
block|}
end_function
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
specifier|inline
name|always_inline
name|bool
name|ref
argument_list|(
argument|T&_q_value
argument_list|)
name|Q_DECL_NOTHROW
block|{
return|return
name|BaseClass
operator|::
name|fetchAndAddRelaxed
argument_list|(
name|_q_value
argument_list|,
literal|1
argument_list|)
operator|!=
name|T
argument_list|(
operator|-
literal|1
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
specifier|inline
name|always_inline
name|bool
name|deref
argument_list|(
argument|T&_q_value
argument_list|)
name|Q_DECL_NOTHROW
block|{
return|return
name|BaseClass
operator|::
name|fetchAndAddRelaxed
argument_list|(
name|_q_value
argument_list|,
operator|-
literal|1
argument_list|)
operator|!=
literal|1
return|;
block|}
end_expr_stmt
begin_if
if|#
directive|if
literal|0
end_if
begin_comment
comment|// These functions have no default implementation
end_comment
begin_comment
comment|// Archictectures must implement them
end_comment
begin_endif
unit|static inline Q_DECL_CONSTEXPR bool isTestAndSetNative() Q_DECL_NOTHROW;     static inline Q_DECL_CONSTEXPR bool isTestAndSetWaitFree() Q_DECL_NOTHROW;     template<typename T, typename X> static inline     bool testAndSetRelaxed(T&_q_value, X expectedValue, X newValue) Q_DECL_NOTHROW;     template<typename T, typename X> static inline     bool testAndSetRelaxed(T&_q_value, X expectedValue, X newValue, X *currentValue) Q_DECL_NOTHROW;
endif|#
directive|endif
end_endif
begin_expr_stmt
DECL|member|T
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|X
operator|>
specifier|static
specifier|inline
name|always_inline
name|bool
name|testAndSetAcquire
argument_list|(
argument|T&_q_value
argument_list|,
argument|X expectedValue
argument_list|,
argument|X newValue
argument_list|)
name|Q_DECL_NOTHROW
block|{
name|bool
name|tmp
operator|=
name|BaseClass
operator|::
name|testAndSetRelaxed
argument_list|(
name|_q_value
argument_list|,
name|expectedValue
argument_list|,
name|newValue
argument_list|)
block|;
name|BaseClass
operator|::
name|acquireMemoryFence
argument_list|(
name|_q_value
argument_list|)
block|;
return|return
name|tmp
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|member|T
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|X
operator|>
specifier|static
specifier|inline
name|always_inline
name|bool
name|testAndSetRelease
argument_list|(
argument|T&_q_value
argument_list|,
argument|X expectedValue
argument_list|,
argument|X newValue
argument_list|)
name|Q_DECL_NOTHROW
block|{
name|BaseClass
operator|::
name|releaseMemoryFence
argument_list|(
name|_q_value
argument_list|)
block|;
return|return
name|BaseClass
operator|::
name|testAndSetRelaxed
argument_list|(
name|_q_value
argument_list|,
name|expectedValue
argument_list|,
name|newValue
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|member|T
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|X
operator|>
specifier|static
specifier|inline
name|always_inline
name|bool
name|testAndSetOrdered
argument_list|(
argument|T&_q_value
argument_list|,
argument|X expectedValue
argument_list|,
argument|X newValue
argument_list|)
name|Q_DECL_NOTHROW
block|{
name|BaseClass
operator|::
name|orderedMemoryFence
argument_list|(
name|_q_value
argument_list|)
block|;
return|return
name|BaseClass
operator|::
name|testAndSetRelaxed
argument_list|(
name|_q_value
argument_list|,
name|expectedValue
argument_list|,
name|newValue
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|member|T
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|X
operator|>
specifier|static
specifier|inline
name|always_inline
name|bool
name|testAndSetAcquire
argument_list|(
argument|T&_q_value
argument_list|,
argument|X expectedValue
argument_list|,
argument|X newValue
argument_list|,
argument|X *currentValue
argument_list|)
name|Q_DECL_NOTHROW
block|{
name|bool
name|tmp
operator|=
name|BaseClass
operator|::
name|testAndSetRelaxed
argument_list|(
name|_q_value
argument_list|,
name|expectedValue
argument_list|,
name|newValue
argument_list|,
name|currentValue
argument_list|)
block|;
name|BaseClass
operator|::
name|acquireMemoryFence
argument_list|(
name|_q_value
argument_list|)
block|;
return|return
name|tmp
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|member|T
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|X
operator|>
specifier|static
specifier|inline
name|always_inline
name|bool
name|testAndSetRelease
argument_list|(
argument|T&_q_value
argument_list|,
argument|X expectedValue
argument_list|,
argument|X newValue
argument_list|,
argument|X *currentValue
argument_list|)
name|Q_DECL_NOTHROW
block|{
name|BaseClass
operator|::
name|releaseMemoryFence
argument_list|(
name|_q_value
argument_list|)
block|;
return|return
name|BaseClass
operator|::
name|testAndSetRelaxed
argument_list|(
name|_q_value
argument_list|,
name|expectedValue
argument_list|,
name|newValue
argument_list|,
name|currentValue
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|member|T
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|X
operator|>
specifier|static
specifier|inline
name|always_inline
name|bool
name|testAndSetOrdered
argument_list|(
argument|T&_q_value
argument_list|,
argument|X expectedValue
argument_list|,
argument|X newValue
argument_list|,
argument|X *currentValue
argument_list|)
name|Q_DECL_NOTHROW
block|{
name|BaseClass
operator|::
name|orderedMemoryFence
argument_list|(
name|_q_value
argument_list|)
block|;
return|return
name|BaseClass
operator|::
name|testAndSetRelaxed
argument_list|(
name|_q_value
argument_list|,
name|expectedValue
argument_list|,
name|newValue
argument_list|,
name|currentValue
argument_list|)
return|;
block|}
end_expr_stmt
begin_function
specifier|static
specifier|inline
name|Q_DECL_CONSTEXPR
name|bool
name|isFetchAndStoreNative
parameter_list|()
function|Q_DECL_NOTHROW
block|{
return|return
name|false
return|;
block|}
end_function
begin_function
specifier|static
specifier|inline
name|Q_DECL_CONSTEXPR
name|bool
name|isFetchAndStoreWaitFree
parameter_list|()
function|Q_DECL_NOTHROW
block|{
return|return
name|false
return|;
block|}
end_function
begin_expr_stmt
DECL|member|T
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|X
operator|>
specifier|static
specifier|inline
name|always_inline
name|T
name|fetchAndStoreRelaxed
argument_list|(
argument|T&_q_value
argument_list|,
argument|X newValue
argument_list|)
name|Q_DECL_NOTHROW
block|{
comment|// implement fetchAndStore on top of testAndSet
name|Q_FOREVER
block|{
name|T
name|tmp
operator|=
name|load
argument_list|(
name|_q_value
argument_list|)
block|;
if|if
condition|(
name|BaseClass
operator|::
name|testAndSetRelaxed
argument_list|(
name|_q_value
argument_list|,
name|tmp
argument_list|,
name|newValue
argument_list|)
condition|)
return|return
name|tmp
return|;
block|}
end_expr_stmt
begin_expr_stmt
unit|}      template
DECL|member|T
operator|<
name|typename
name|T
operator|,
name|typename
name|X
operator|>
specifier|static
specifier|inline
name|always_inline
name|T
name|fetchAndStoreAcquire
argument_list|(
argument|T&_q_value
argument_list|,
argument|X newValue
argument_list|)
name|Q_DECL_NOTHROW
block|{
name|T
name|tmp
operator|=
name|BaseClass
operator|::
name|fetchAndStoreRelaxed
argument_list|(
name|_q_value
argument_list|,
name|newValue
argument_list|)
block|;
name|BaseClass
operator|::
name|acquireMemoryFence
argument_list|(
name|_q_value
argument_list|)
block|;
return|return
name|tmp
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|member|T
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|X
operator|>
specifier|static
specifier|inline
name|always_inline
name|T
name|fetchAndStoreRelease
argument_list|(
argument|T&_q_value
argument_list|,
argument|X newValue
argument_list|)
name|Q_DECL_NOTHROW
block|{
name|BaseClass
operator|::
name|releaseMemoryFence
argument_list|(
name|_q_value
argument_list|)
block|;
return|return
name|BaseClass
operator|::
name|fetchAndStoreRelaxed
argument_list|(
name|_q_value
argument_list|,
name|newValue
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|member|T
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|X
operator|>
specifier|static
specifier|inline
name|always_inline
name|T
name|fetchAndStoreOrdered
argument_list|(
argument|T&_q_value
argument_list|,
argument|X newValue
argument_list|)
name|Q_DECL_NOTHROW
block|{
name|BaseClass
operator|::
name|orderedMemoryFence
argument_list|(
name|_q_value
argument_list|)
block|;
return|return
name|BaseClass
operator|::
name|fetchAndStoreRelaxed
argument_list|(
name|_q_value
argument_list|,
name|newValue
argument_list|)
return|;
block|}
end_expr_stmt
begin_function
specifier|static
specifier|inline
name|Q_DECL_CONSTEXPR
name|bool
name|isFetchAndAddNative
parameter_list|()
function|Q_DECL_NOTHROW
block|{
return|return
name|false
return|;
block|}
end_function
begin_function
specifier|static
specifier|inline
name|Q_DECL_CONSTEXPR
name|bool
name|isFetchAndAddWaitFree
parameter_list|()
function|Q_DECL_NOTHROW
block|{
return|return
name|false
return|;
block|}
end_function
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
specifier|inline
name|always_inline
name|T
name|fetchAndAddRelaxed
argument_list|(
argument|T&_q_value
argument_list|,
argument|typename QAtomicAdditiveType<T>::AdditiveT valueToAdd
argument_list|)
name|Q_DECL_NOTHROW
block|{
comment|// implement fetchAndAdd on top of testAndSet
name|Q_FOREVER
block|{
name|T
name|tmp
operator|=
name|BaseClass
operator|::
name|load
argument_list|(
name|_q_value
argument_list|)
block|;
if|if
condition|(
name|BaseClass
operator|::
name|testAndSetRelaxed
argument_list|(
name|_q_value
argument_list|,
name|tmp
argument_list|,
name|T
argument_list|(
name|tmp
operator|+
name|valueToAdd
argument_list|)
argument_list|)
condition|)
return|return
name|tmp
return|;
block|}
end_expr_stmt
begin_expr_stmt
unit|}      template
operator|<
name|typename
name|T
operator|>
specifier|static
specifier|inline
name|always_inline
name|T
name|fetchAndAddAcquire
argument_list|(
argument|T&_q_value
argument_list|,
argument|typename QAtomicAdditiveType<T>::AdditiveT valueToAdd
argument_list|)
name|Q_DECL_NOTHROW
block|{
name|T
name|tmp
operator|=
name|BaseClass
operator|::
name|fetchAndAddRelaxed
argument_list|(
name|_q_value
argument_list|,
name|valueToAdd
argument_list|)
block|;
name|BaseClass
operator|::
name|acquireMemoryFence
argument_list|(
name|_q_value
argument_list|)
block|;
return|return
name|tmp
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
specifier|inline
name|always_inline
name|T
name|fetchAndAddRelease
argument_list|(
argument|T&_q_value
argument_list|,
argument|typename QAtomicAdditiveType<T>::AdditiveT valueToAdd
argument_list|)
name|Q_DECL_NOTHROW
block|{
name|BaseClass
operator|::
name|releaseMemoryFence
argument_list|(
name|_q_value
argument_list|)
block|;
return|return
name|BaseClass
operator|::
name|fetchAndAddRelaxed
argument_list|(
name|_q_value
argument_list|,
name|valueToAdd
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
specifier|inline
name|always_inline
name|T
name|fetchAndAddOrdered
argument_list|(
argument|T&_q_value
argument_list|,
argument|typename QAtomicAdditiveType<T>::AdditiveT valueToAdd
argument_list|)
name|Q_DECL_NOTHROW
block|{
name|BaseClass
operator|::
name|orderedMemoryFence
argument_list|(
name|_q_value
argument_list|)
block|;
return|return
name|BaseClass
operator|::
name|fetchAndAddRelaxed
argument_list|(
name|_q_value
argument_list|,
name|valueToAdd
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
specifier|inline
name|always_inline
name|T
name|fetchAndSubRelaxed
argument_list|(
argument|T&_q_value
argument_list|,
argument|typename QAtomicAdditiveType<T>::AdditiveT operand
argument_list|)
name|Q_DECL_NOTHROW
block|{
comment|// implement fetchAndSub on top of fetchAndAdd
return|return
name|fetchAndAddRelaxed
argument_list|(
name|_q_value
argument_list|,
operator|-
name|operand
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
specifier|inline
name|always_inline
name|T
name|fetchAndSubAcquire
argument_list|(
argument|T&_q_value
argument_list|,
argument|typename QAtomicAdditiveType<T>::AdditiveT operand
argument_list|)
name|Q_DECL_NOTHROW
block|{
name|T
name|tmp
operator|=
name|BaseClass
operator|::
name|fetchAndSubRelaxed
argument_list|(
name|_q_value
argument_list|,
name|operand
argument_list|)
block|;
name|BaseClass
operator|::
name|acquireMemoryFence
argument_list|(
name|_q_value
argument_list|)
block|;
return|return
name|tmp
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
specifier|inline
name|always_inline
name|T
name|fetchAndSubRelease
argument_list|(
argument|T&_q_value
argument_list|,
argument|typename QAtomicAdditiveType<T>::AdditiveT operand
argument_list|)
name|Q_DECL_NOTHROW
block|{
name|BaseClass
operator|::
name|releaseMemoryFence
argument_list|(
name|_q_value
argument_list|)
block|;
return|return
name|BaseClass
operator|::
name|fetchAndSubRelaxed
argument_list|(
name|_q_value
argument_list|,
name|operand
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
specifier|inline
name|always_inline
name|T
name|fetchAndSubOrdered
argument_list|(
argument|T&_q_value
argument_list|,
argument|typename QAtomicAdditiveType<T>::AdditiveT operand
argument_list|)
name|Q_DECL_NOTHROW
block|{
name|BaseClass
operator|::
name|orderedMemoryFence
argument_list|(
name|_q_value
argument_list|)
block|;
return|return
name|BaseClass
operator|::
name|fetchAndSubRelaxed
argument_list|(
name|_q_value
argument_list|,
name|operand
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
specifier|inline
name|always_inline
name|T
name|fetchAndAndRelaxed
argument_list|(
argument|T&_q_value
argument_list|,
argument|typename QtPrivate::QEnableIf<QTypeInfo<T>::isIntegral
argument_list|,
argument|T>::Type operand
argument_list|)
name|Q_DECL_NOTHROW
block|{
comment|// implement fetchAndAnd on top of testAndSet
name|T
name|tmp
operator|=
name|BaseClass
operator|::
name|load
argument_list|(
name|_q_value
argument_list|)
block|;
name|Q_FOREVER
block|{
if|if
condition|(
name|BaseClass
operator|::
name|testAndSetRelaxed
argument_list|(
name|_q_value
argument_list|,
name|tmp
argument_list|,
name|T
argument_list|(
name|tmp
operator|&
name|operand
argument_list|)
argument_list|,
operator|&
name|tmp
argument_list|)
condition|)
return|return
name|tmp
return|;
block|}
end_expr_stmt
begin_expr_stmt
unit|}      template
operator|<
name|typename
name|T
operator|>
specifier|static
specifier|inline
name|always_inline
name|T
name|fetchAndAndAcquire
argument_list|(
argument|T&_q_value
argument_list|,
argument|typename QtPrivate::QEnableIf<QTypeInfo<T>::isIntegral
argument_list|,
argument|T>::Type operand
argument_list|)
name|Q_DECL_NOTHROW
block|{
name|T
name|tmp
operator|=
name|BaseClass
operator|::
name|fetchAndAndRelaxed
argument_list|(
name|_q_value
argument_list|,
name|operand
argument_list|)
block|;
name|BaseClass
operator|::
name|acquireMemoryFence
argument_list|(
name|_q_value
argument_list|)
block|;
return|return
name|tmp
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
specifier|inline
name|always_inline
name|T
name|fetchAndAndRelease
argument_list|(
argument|T&_q_value
argument_list|,
argument|typename QtPrivate::QEnableIf<QTypeInfo<T>::isIntegral
argument_list|,
argument|T>::Type operand
argument_list|)
name|Q_DECL_NOTHROW
block|{
name|BaseClass
operator|::
name|releaseMemoryFence
argument_list|(
name|_q_value
argument_list|)
block|;
return|return
name|BaseClass
operator|::
name|fetchAndAndRelaxed
argument_list|(
name|_q_value
argument_list|,
name|operand
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
specifier|inline
name|always_inline
name|T
name|fetchAndAndOrdered
argument_list|(
argument|T&_q_value
argument_list|,
argument|typename QtPrivate::QEnableIf<QTypeInfo<T>::isIntegral
argument_list|,
argument|T>::Type operand
argument_list|)
name|Q_DECL_NOTHROW
block|{
name|BaseClass
operator|::
name|orderedMemoryFence
argument_list|(
name|_q_value
argument_list|)
block|;
return|return
name|BaseClass
operator|::
name|fetchAndAndRelaxed
argument_list|(
name|_q_value
argument_list|,
name|operand
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
specifier|inline
name|always_inline
name|T
name|fetchAndOrRelaxed
argument_list|(
argument|T&_q_value
argument_list|,
argument|typename QtPrivate::QEnableIf<QTypeInfo<T>::isIntegral
argument_list|,
argument|T>::Type operand
argument_list|)
name|Q_DECL_NOTHROW
block|{
comment|// implement fetchAndOr on top of testAndSet
name|T
name|tmp
operator|=
name|BaseClass
operator|::
name|load
argument_list|(
name|_q_value
argument_list|)
block|;
name|Q_FOREVER
block|{
if|if
condition|(
name|BaseClass
operator|::
name|testAndSetRelaxed
argument_list|(
name|_q_value
argument_list|,
name|tmp
argument_list|,
name|T
argument_list|(
name|tmp
operator||
name|operand
argument_list|)
argument_list|,
operator|&
name|tmp
argument_list|)
condition|)
return|return
name|tmp
return|;
block|}
end_expr_stmt
begin_expr_stmt
unit|}      template
operator|<
name|typename
name|T
operator|>
specifier|static
specifier|inline
name|always_inline
name|T
name|fetchAndOrAcquire
argument_list|(
argument|T&_q_value
argument_list|,
argument|typename QtPrivate::QEnableIf<QTypeInfo<T>::isIntegral
argument_list|,
argument|T>::Type operand
argument_list|)
name|Q_DECL_NOTHROW
block|{
name|T
name|tmp
operator|=
name|BaseClass
operator|::
name|fetchAndOrRelaxed
argument_list|(
name|_q_value
argument_list|,
name|operand
argument_list|)
block|;
name|BaseClass
operator|::
name|acquireMemoryFence
argument_list|(
name|_q_value
argument_list|)
block|;
return|return
name|tmp
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
specifier|inline
name|always_inline
name|T
name|fetchAndOrRelease
argument_list|(
argument|T&_q_value
argument_list|,
argument|typename QtPrivate::QEnableIf<QTypeInfo<T>::isIntegral
argument_list|,
argument|T>::Type operand
argument_list|)
name|Q_DECL_NOTHROW
block|{
name|BaseClass
operator|::
name|releaseMemoryFence
argument_list|(
name|_q_value
argument_list|)
block|;
return|return
name|BaseClass
operator|::
name|fetchAndOrRelaxed
argument_list|(
name|_q_value
argument_list|,
name|operand
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
specifier|inline
name|always_inline
name|T
name|fetchAndOrOrdered
argument_list|(
argument|T&_q_value
argument_list|,
argument|typename QtPrivate::QEnableIf<QTypeInfo<T>::isIntegral
argument_list|,
argument|T>::Type operand
argument_list|)
name|Q_DECL_NOTHROW
block|{
name|BaseClass
operator|::
name|orderedMemoryFence
argument_list|(
name|_q_value
argument_list|)
block|;
return|return
name|BaseClass
operator|::
name|fetchAndOrRelaxed
argument_list|(
name|_q_value
argument_list|,
name|operand
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
specifier|inline
name|always_inline
name|T
name|fetchAndXorRelaxed
argument_list|(
argument|T&_q_value
argument_list|,
argument|typename QtPrivate::QEnableIf<QTypeInfo<T>::isIntegral
argument_list|,
argument|T>::Type operand
argument_list|)
name|Q_DECL_NOTHROW
block|{
comment|// implement fetchAndXor on top of testAndSet
name|T
name|tmp
operator|=
name|BaseClass
operator|::
name|load
argument_list|(
name|_q_value
argument_list|)
block|;
name|Q_FOREVER
block|{
if|if
condition|(
name|BaseClass
operator|::
name|testAndSetRelaxed
argument_list|(
name|_q_value
argument_list|,
name|tmp
argument_list|,
name|T
argument_list|(
name|tmp
operator|^
name|operand
argument_list|)
argument_list|,
operator|&
name|tmp
argument_list|)
condition|)
return|return
name|tmp
return|;
block|}
end_expr_stmt
begin_expr_stmt
unit|}      template
operator|<
name|typename
name|T
operator|>
specifier|static
specifier|inline
name|always_inline
name|T
name|fetchAndXorAcquire
argument_list|(
argument|T&_q_value
argument_list|,
argument|typename QtPrivate::QEnableIf<QTypeInfo<T>::isIntegral
argument_list|,
argument|T>::Type operand
argument_list|)
name|Q_DECL_NOTHROW
block|{
name|T
name|tmp
operator|=
name|BaseClass
operator|::
name|fetchAndXorRelaxed
argument_list|(
name|_q_value
argument_list|,
name|operand
argument_list|)
block|;
name|BaseClass
operator|::
name|acquireMemoryFence
argument_list|(
name|_q_value
argument_list|)
block|;
return|return
name|tmp
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
specifier|inline
name|always_inline
name|T
name|fetchAndXorRelease
argument_list|(
argument|T&_q_value
argument_list|,
argument|typename QtPrivate::QEnableIf<QTypeInfo<T>::isIntegral
argument_list|,
argument|T>::Type operand
argument_list|)
name|Q_DECL_NOTHROW
block|{
name|BaseClass
operator|::
name|releaseMemoryFence
argument_list|(
name|_q_value
argument_list|)
block|;
return|return
name|BaseClass
operator|::
name|fetchAndXorRelaxed
argument_list|(
name|_q_value
argument_list|,
name|operand
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
specifier|inline
name|always_inline
name|T
name|fetchAndXorOrdered
argument_list|(
argument|T&_q_value
argument_list|,
argument|typename QtPrivate::QEnableIf<QTypeInfo<T>::isIntegral
argument_list|,
argument|T>::Type operand
argument_list|)
name|Q_DECL_NOTHROW
block|{
name|BaseClass
operator|::
name|orderedMemoryFence
argument_list|(
name|_q_value
argument_list|)
block|;
return|return
name|BaseClass
operator|::
name|fetchAndXorRelaxed
argument_list|(
name|_q_value
argument_list|,
name|operand
argument_list|)
return|;
block|}
end_expr_stmt
begin_undef
DECL|macro|always_inline
unit|};
undef|#
directive|undef
name|always_inline
end_undef
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QGENERICATOMIC_H
end_comment
end_unit
