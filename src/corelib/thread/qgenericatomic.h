begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Thiago Macieira<thiago@kde.org> ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QGENERICATOMIC_H
end_ifndef
begin_define
DECL|macro|QGENERICATOMIC_H
define|#
directive|define
name|QGENERICATOMIC_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qglobal.h>
end_include
begin_expr_stmt
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
if|#
directive|if
literal|0
pragma|#
directive|pragma
name|qt_sync_stop_processing
endif|#
directive|endif
ifdef|#
directive|ifdef
name|Q_CC_GNU
comment|// lowercase is fine, we'll undef it below
DECL|macro|always_inline
define|#
directive|define
name|always_inline
value|__attribute__((always_inline, gnu_inline))
else|#
directive|else
define|#
directive|define
name|always_inline
endif|#
directive|endif
DECL|struct|QAtomicIntegerTraits
DECL|enumerator|IsInteger
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|QAtomicIntegerTraits
block|{ enum
block|{
name|IsInteger
operator|=
literal|0
block|}
block|; }
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|struct|QAtomicAdditiveType
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|QAtomicAdditiveType
block|{
DECL|typedef|AdditiveT
typedef|typedef
name|T
name|AdditiveT
typedef|;
DECL|member|AddScale
specifier|static
specifier|const
name|int
name|AddScale
operator|=
literal|1
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|member|AddScale
unit|};
DECL|struct|T
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|QAtomicAdditiveType
operator|<
name|T
operator|*
operator|>
block|{
DECL|typedef|AdditiveT
typedef|typedef
name|qptrdiff
name|AdditiveT
typedef|;
DECL|member|AddScale
specifier|static
specifier|const
name|int
name|AddScale
operator|=
sizeof|sizeof
argument_list|(
name|T
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
unit|};
comment|// not really atomic...
end_comment
begin_expr_stmt
DECL|struct|QGenericAtomicOps
name|template
operator|<
name|typename
name|BaseClass
operator|>
expr|struct
name|QGenericAtomicOps
block|{
DECL|struct|AtomicType
DECL|typedef|Type
DECL|typedef|PointerType
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|AtomicType
block|{
typedef|typedef
name|T
name|Type
typedef|;
typedef|typedef
name|T
modifier|*
name|PointerType
typedef|;
block|}
end_expr_stmt
begin_empty_stmt
DECL|struct|AtomicType
DECL|typedef|Type
DECL|typedef|PointerType
empty_stmt|;
end_empty_stmt
begin_function
DECL|function|acquireMemoryFence
specifier|static
name|void
name|acquireMemoryFence
parameter_list|()
block|{
name|BaseClass
operator|::
name|orderedMemoryFence
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|releaseMemoryFence
specifier|static
name|void
name|releaseMemoryFence
parameter_list|()
block|{
name|BaseClass
operator|::
name|orderedMemoryFence
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|orderedMemoryFence
specifier|static
name|void
name|orderedMemoryFence
parameter_list|()
block|{ }
end_function
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
specifier|inline
name|always_inline
DECL|function|load
name|T
name|load
argument_list|(
argument|T&_q_value
argument_list|)
block|{
return|return
name|_q_value
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
specifier|inline
name|always_inline
DECL|function|store
name|void
name|store
argument_list|(
argument|T&_q_value
argument_list|,
argument|T newValue
argument_list|)
block|{
name|_q_value
operator|=
name|newValue
block|;     }
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
specifier|inline
name|always_inline
DECL|function|loadAcquire
name|T
name|loadAcquire
argument_list|(
argument|T&_q_value
argument_list|)
block|{
name|T
name|tmp
operator|=
operator|*
name|static_cast
operator|<
specifier|volatile
name|T
operator|*
operator|>
operator|(
operator|&
name|_q_value
operator|)
block|;
name|BaseClass
operator|::
name|acquireMemoryFence
argument_list|()
block|;
return|return
name|tmp
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
specifier|inline
name|always_inline
DECL|function|storeRelease
name|void
name|storeRelease
argument_list|(
argument|T&_q_value
argument_list|,
argument|T newValue
argument_list|)
block|{
name|BaseClass
operator|::
name|releaseMemoryFence
argument_list|()
block|;
operator|*
name|static_cast
operator|<
specifier|volatile
name|T
operator|*
operator|>
operator|(
operator|&
name|_q_value
operator|)
operator|=
name|newValue
block|;     }
DECL|function|isReferenceCountingNative
specifier|static
specifier|inline
name|bool
name|isReferenceCountingNative
argument_list|()
block|{
return|return
name|BaseClass
operator|::
name|isFetchAndAddNative
argument_list|()
return|;
block|}
end_expr_stmt
begin_function
DECL|function|isReferenceCountingWaitFree
specifier|static
specifier|inline
name|bool
name|isReferenceCountingWaitFree
parameter_list|()
block|{
return|return
name|BaseClass
operator|::
name|isFetchAndAddWaitFree
argument_list|()
return|;
block|}
end_function
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
specifier|inline
name|always_inline
DECL|function|ref
name|bool
name|ref
argument_list|(
argument|T&_q_value
argument_list|)
block|{
return|return
name|BaseClass
operator|::
name|fetchAndAddRelaxed
argument_list|(
name|_q_value
argument_list|,
literal|1
argument_list|)
operator|!=
name|T
argument_list|(
operator|-
literal|1
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
specifier|inline
name|always_inline
DECL|function|deref
name|bool
name|deref
argument_list|(
argument|T&_q_value
argument_list|)
block|{
return|return
name|BaseClass
operator|::
name|fetchAndAddRelaxed
argument_list|(
name|_q_value
argument_list|,
operator|-
literal|1
argument_list|)
operator|!=
literal|1
return|;
block|}
end_expr_stmt
begin_if
if|#
directive|if
literal|0
end_if
begin_comment
comment|// These functions have no default implementation
end_comment
begin_comment
comment|// Archictectures must implement them
end_comment
begin_endif
unit|static inline bool isTestAndSetNative();     static inline bool isTestAndSetWaitFree();     template<typename T> static inline     bool testAndSetRelaxed(T&_q_value, T expectedValue, T newValue);
endif|#
directive|endif
end_endif
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
specifier|inline
name|always_inline
DECL|function|testAndSetAcquire
name|bool
name|testAndSetAcquire
argument_list|(
argument|T&_q_value
argument_list|,
argument|T expectedValue
argument_list|,
argument|T newValue
argument_list|)
block|{
name|bool
name|tmp
operator|=
name|BaseClass
operator|::
name|testAndSetRelaxed
argument_list|(
name|_q_value
argument_list|,
name|expectedValue
argument_list|,
name|newValue
argument_list|)
block|;
name|BaseClass
operator|::
name|acquireMemoryFence
argument_list|()
block|;
return|return
name|tmp
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
specifier|inline
name|always_inline
DECL|function|testAndSetRelease
name|bool
name|testAndSetRelease
argument_list|(
argument|T&_q_value
argument_list|,
argument|T expectedValue
argument_list|,
argument|T newValue
argument_list|)
block|{
name|BaseClass
operator|::
name|releaseMemoryFence
argument_list|()
block|;
return|return
name|BaseClass
operator|::
name|testAndSetRelaxed
argument_list|(
name|_q_value
argument_list|,
name|expectedValue
argument_list|,
name|newValue
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
specifier|inline
name|always_inline
DECL|function|testAndSetOrdered
name|bool
name|testAndSetOrdered
argument_list|(
argument|T&_q_value
argument_list|,
argument|T expectedValue
argument_list|,
argument|T newValue
argument_list|)
block|{
name|BaseClass
operator|::
name|orderedMemoryFence
argument_list|()
block|;
return|return
name|BaseClass
operator|::
name|testAndSetRelaxed
argument_list|(
name|_q_value
argument_list|,
name|expectedValue
argument_list|,
name|newValue
argument_list|)
return|;
block|}
end_expr_stmt
begin_function
DECL|function|isFetchAndStoreNative
specifier|static
specifier|inline
name|bool
name|isFetchAndStoreNative
parameter_list|()
block|{
return|return
name|false
return|;
block|}
end_function
begin_function
DECL|function|isFetchAndStoreWaitFree
specifier|static
specifier|inline
name|bool
name|isFetchAndStoreWaitFree
parameter_list|()
block|{
return|return
name|false
return|;
block|}
end_function
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
specifier|inline
name|always_inline
DECL|function|fetchAndStoreRelaxed
name|T
name|fetchAndStoreRelaxed
argument_list|(
argument|T&_q_value
argument_list|,
argument|T newValue
argument_list|)
block|{
comment|// implement fetchAndStore on top of testAndSet
name|Q_FOREVER
block|{
specifier|register
name|T
name|tmp
operator|=
name|load
argument_list|(
name|_q_value
argument_list|)
block|;
if|if
condition|(
name|BaseClass
operator|::
name|testAndSetRelaxed
argument_list|(
name|_q_value
argument_list|,
name|tmp
argument_list|,
name|newValue
argument_list|)
condition|)
return|return
name|tmp
return|;
block|}
end_expr_stmt
begin_expr_stmt
unit|}      template
operator|<
name|typename
name|T
operator|>
specifier|static
specifier|inline
name|always_inline
DECL|function|fetchAndStoreAcquire
name|T
name|fetchAndStoreAcquire
argument_list|(
argument|T&_q_value
argument_list|,
argument|T newValue
argument_list|)
block|{
name|T
name|tmp
operator|=
name|BaseClass
operator|::
name|fetchAndStoreRelaxed
argument_list|(
name|_q_value
argument_list|,
name|newValue
argument_list|)
block|;
name|BaseClass
operator|::
name|acquireMemoryFence
argument_list|()
block|;
return|return
name|tmp
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
specifier|inline
name|always_inline
DECL|function|fetchAndStoreRelease
name|T
name|fetchAndStoreRelease
argument_list|(
argument|T&_q_value
argument_list|,
argument|T newValue
argument_list|)
block|{
name|BaseClass
operator|::
name|releaseMemoryFence
argument_list|()
block|;
return|return
name|BaseClass
operator|::
name|fetchAndStoreRelaxed
argument_list|(
name|_q_value
argument_list|,
name|newValue
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
specifier|inline
name|always_inline
DECL|function|fetchAndStoreOrdered
name|T
name|fetchAndStoreOrdered
argument_list|(
argument|T&_q_value
argument_list|,
argument|T newValue
argument_list|)
block|{
name|BaseClass
operator|::
name|orderedMemoryFence
argument_list|()
block|;
return|return
name|BaseClass
operator|::
name|fetchAndStoreRelaxed
argument_list|(
name|_q_value
argument_list|,
name|newValue
argument_list|)
return|;
block|}
end_expr_stmt
begin_function
DECL|function|isFetchAndAddNative
specifier|static
specifier|inline
name|bool
name|isFetchAndAddNative
parameter_list|()
block|{
return|return
name|false
return|;
block|}
end_function
begin_function
DECL|function|isFetchAndAddWaitFree
specifier|static
specifier|inline
name|bool
name|isFetchAndAddWaitFree
parameter_list|()
block|{
return|return
name|false
return|;
block|}
end_function
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
specifier|inline
name|always_inline
DECL|function|fetchAndAddRelaxed
name|T
name|fetchAndAddRelaxed
argument_list|(
argument|T&_q_value
argument_list|,
argument|typename QAtomicAdditiveType<T>::AdditiveT valueToAdd
argument_list|)
block|{
comment|// implement fetchAndAdd on top of testAndSet
name|Q_FOREVER
block|{
specifier|register
name|T
name|tmp
operator|=
name|BaseClass
operator|::
name|load
argument_list|(
name|_q_value
argument_list|)
block|;
if|if
condition|(
name|BaseClass
operator|::
name|testAndSetRelaxed
argument_list|(
name|_q_value
argument_list|,
name|tmp
argument_list|,
name|T
argument_list|(
name|tmp
operator|+
name|valueToAdd
argument_list|)
argument_list|)
condition|)
return|return
name|tmp
return|;
block|}
end_expr_stmt
begin_expr_stmt
unit|}      template
operator|<
name|typename
name|T
operator|>
specifier|static
specifier|inline
name|always_inline
DECL|function|fetchAndAddAcquire
name|T
name|fetchAndAddAcquire
argument_list|(
argument|T&_q_value
argument_list|,
argument|typename QAtomicAdditiveType<T>::AdditiveT valueToAdd
argument_list|)
block|{
name|T
name|tmp
operator|=
name|BaseClass
operator|::
name|fetchAndAddRelaxed
argument_list|(
name|_q_value
argument_list|,
name|valueToAdd
argument_list|)
block|;
name|BaseClass
operator|::
name|acquireMemoryFence
argument_list|()
block|;
return|return
name|tmp
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
specifier|inline
name|always_inline
DECL|function|fetchAndAddRelease
name|T
name|fetchAndAddRelease
argument_list|(
argument|T&_q_value
argument_list|,
argument|typename QAtomicAdditiveType<T>::AdditiveT valueToAdd
argument_list|)
block|{
name|BaseClass
operator|::
name|releaseMemoryFence
argument_list|()
block|;
return|return
name|BaseClass
operator|::
name|fetchAndAddRelaxed
argument_list|(
name|_q_value
argument_list|,
name|valueToAdd
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
specifier|inline
name|always_inline
DECL|function|fetchAndAddOrdered
name|T
name|fetchAndAddOrdered
argument_list|(
argument|T&_q_value
argument_list|,
argument|typename QAtomicAdditiveType<T>::AdditiveT valueToAdd
argument_list|)
block|{
name|BaseClass
operator|::
name|orderedMemoryFence
argument_list|()
block|;
return|return
name|BaseClass
operator|::
name|fetchAndAddRelaxed
argument_list|(
name|_q_value
argument_list|,
name|valueToAdd
argument_list|)
return|;
block|}
end_expr_stmt
begin_undef
DECL|macro|always_inline
unit|};
undef|#
directive|undef
name|always_inline
end_undef
begin_expr_stmt
name|QT_END_NAMESPACE
name|QT_END_HEADER
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QGENERICATOMIC_H
end_comment
end_unit
