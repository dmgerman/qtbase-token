begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Copyright (C) 2016 Olivier Goffart<ogoffart@woboq.com> ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QREADWRITELOCK_P_H
end_ifndef
begin_define
DECL|macro|QREADWRITELOCK_P_H
define|#
directive|define
name|QREADWRITELOCK_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists for the convenience
end_comment
begin_comment
comment|// of the implementation.  This header file may change from version to
end_comment
begin_comment
comment|// version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|<QtCore/qglobal.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qhash.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/QWaitCondition>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_THREAD
end_ifndef
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
name|class
name|QReadWriteLockPrivate
block|{
name|public
label|:
name|QReadWriteLockPrivate
argument_list|(
argument|bool isRecursive = false
argument_list|)
block|:
name|readerCount
argument_list|(
literal|0
argument_list|)
operator|,
name|writerCount
argument_list|(
literal|0
argument_list|)
operator|,
name|waitingReaders
argument_list|(
literal|0
argument_list|)
operator|,
name|waitingWriters
argument_list|(
literal|0
argument_list|)
operator|,
name|recursive
argument_list|(
name|isRecursive
argument_list|)
operator|,
name|id
argument_list|(
literal|0
argument_list|)
block|{}
name|QMutex
name|mutex
expr_stmt|;
name|QWaitCondition
name|writerCond
decl_stmt|;
name|QWaitCondition
name|readerCond
decl_stmt|;
name|int
name|readerCount
decl_stmt|;
name|int
name|writerCount
decl_stmt|;
name|int
name|waitingReaders
decl_stmt|;
name|int
name|waitingWriters
decl_stmt|;
name|bool
name|recursive
decl_stmt|;
comment|//Called with the mutex locked
name|bool
name|lockForWrite
parameter_list|(
name|int
name|timeout
parameter_list|)
function_decl|;
name|bool
name|lockForRead
parameter_list|(
name|int
name|timeout
parameter_list|)
function_decl|;
name|void
name|unlock
parameter_list|()
function_decl|;
comment|//memory management
name|int
name|id
decl_stmt|;
name|void
name|release
parameter_list|()
function_decl|;
specifier|static
name|QReadWriteLockPrivate
modifier|*
name|allocate
parameter_list|()
function_decl|;
comment|// Recusive mutex handling
name|Qt
operator|::
name|HANDLE
name|currentWriter
expr_stmt|;
name|QHash
operator|<
name|Qt
operator|::
name|HANDLE
operator|,
name|int
operator|>
name|currentReaders
expr_stmt|;
comment|// called with the mutex unlocked
name|bool
name|recursiveLockForWrite
parameter_list|(
name|int
name|timeout
parameter_list|)
function_decl|;
name|bool
name|recursiveLockForRead
parameter_list|(
name|int
name|timeout
parameter_list|)
function_decl|;
name|void
name|recursiveUnlock
parameter_list|()
function_decl|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_THREAD
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QREADWRITELOCK_P_H
end_comment
end_unit
