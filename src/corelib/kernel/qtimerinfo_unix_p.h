begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QTIMERINFO_UNIX_P_H
end_ifndef
begin_define
DECL|macro|QTIMERINFO_UNIX_P_H
define|#
directive|define
name|QTIMERINFO_UNIX_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists purely as an
end_comment
begin_comment
comment|// implementation detail.  This header file may change from version to
end_comment
begin_comment
comment|// version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// #define QTIMERINFO_DEBUG
end_comment
begin_include
include|#
directive|include
file|"qabstracteventdispatcher.h"
end_include
begin_include
include|#
directive|include
file|<sys/time.h>
end_include
begin_comment
comment|// struct timeval
end_comment
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_comment
comment|// internal timer info
end_comment
begin_struct
DECL|struct|QTimerInfo
struct|struct
name|QTimerInfo
block|{
DECL|member|id
name|int
name|id
decl_stmt|;
comment|// - timer identifier
DECL|member|interval
name|int
name|interval
decl_stmt|;
comment|// - timer interval in milliseconds
DECL|member|timerType
name|Qt
operator|::
name|TimerType
name|timerType
expr_stmt|;
comment|// - timer type
DECL|member|timeout
name|timespec
name|timeout
decl_stmt|;
comment|// - when to actually fire
DECL|member|obj
name|QObject
modifier|*
name|obj
decl_stmt|;
comment|// - object to receive event
DECL|member|activateRef
name|QTimerInfo
modifier|*
modifier|*
name|activateRef
decl_stmt|;
comment|// - ref from activateTimers
ifdef|#
directive|ifdef
name|QTIMERINFO_DEBUG
DECL|member|expected
name|timeval
name|expected
decl_stmt|;
comment|// when timer is expected to fire
DECL|member|cumulativeError
name|float
name|cumulativeError
decl_stmt|;
DECL|member|count
name|uint
name|count
decl_stmt|;
endif|#
directive|endif
block|}
struct|;
end_struct
begin_decl_stmt
name|class
name|Q_CORE_EXPORT
name|QTimerInfoList
range|:
name|public
name|QList
operator|<
name|QTimerInfo
operator|*
operator|>
block|{
if|#
directive|if
operator|(
operator|(
name|_POSIX_MONOTONIC_CLOCK
operator|-
literal|0
operator|<=
literal|0
operator|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
operator|)
operator|||
name|defined
argument_list|(
name|QT_BOOTSTRAPPED
argument_list|)
name|timespec
name|previousTime
block|;
name|clock_t
name|previousTicks
block|;
name|int
name|ticksPerSecond
block|;
name|int
name|msPerTick
block|;
name|bool
name|timeChanged
argument_list|(
name|timespec
operator|*
name|delta
argument_list|)
block|;
name|void
name|timerRepair
argument_list|(
specifier|const
name|timespec
operator|&
argument_list|)
block|;
endif|#
directive|endif
comment|// state variables used by activateTimers()
name|QTimerInfo
operator|*
name|firstTimerInfo
block|;
name|public
operator|:
name|QTimerInfoList
argument_list|()
block|;
name|timespec
name|currentTime
block|;
name|timespec
name|updateCurrentTime
argument_list|()
block|;
comment|// must call updateCurrentTime() first!
name|void
name|repairTimersIfNeeded
argument_list|()
block|;
name|bool
name|timerWait
argument_list|(
name|timespec
operator|&
argument_list|)
block|;
name|void
name|timerInsert
argument_list|(
name|QTimerInfo
operator|*
argument_list|)
block|;
name|int
name|timerRemainingTime
argument_list|(
argument|int timerId
argument_list|)
block|;
name|void
name|registerTimer
argument_list|(
argument|int timerId
argument_list|,
argument|int interval
argument_list|,
argument|Qt::TimerType timerType
argument_list|,
argument|QObject *object
argument_list|)
block|;
name|bool
name|unregisterTimer
argument_list|(
argument|int timerId
argument_list|)
block|;
name|bool
name|unregisterTimers
argument_list|(
name|QObject
operator|*
name|object
argument_list|)
block|;
name|QList
operator|<
name|QAbstractEventDispatcher
operator|::
name|TimerInfo
operator|>
name|registeredTimers
argument_list|(
argument|QObject *object
argument_list|)
specifier|const
block|;
name|int
name|activateTimers
argument_list|()
block|; }
decl_stmt|;
end_decl_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QTIMERINFO_UNIX_P_H
end_comment
end_unit
