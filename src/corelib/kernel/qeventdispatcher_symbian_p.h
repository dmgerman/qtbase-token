begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QEVENTDISPATCHER_SYMBIAN_P_H
end_ifndef
begin_define
DECL|macro|QEVENTDISPATCHER_SYMBIAN_P_H
define|#
directive|define
name|QEVENTDISPATCHER_SYMBIAN_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists purely as an
end_comment
begin_comment
comment|// implementation detail.  This header file may change from version to
end_comment
begin_comment
comment|// version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|<qhash.h>
end_include
begin_include
include|#
directive|include
file|<qset.h>
end_include
begin_include
include|#
directive|include
file|<qshareddata.h>
end_include
begin_include
include|#
directive|include
file|<qabstracteventdispatcher.h>
end_include
begin_include
include|#
directive|include
file|<private/qabstracteventdispatcher_p.h>
end_include
begin_include
include|#
directive|include
file|<qthread.h>
end_include
begin_include
include|#
directive|include
file|<qmutex.h>
end_include
begin_include
include|#
directive|include
file|<qwaitcondition.h>
end_include
begin_include
include|#
directive|include
file|<qsocketnotifier.h>
end_include
begin_include
include|#
directive|include
file|<qdatetime.h>
end_include
begin_include
include|#
directive|include
file|<qelapsedtimer.h>
end_include
begin_include
include|#
directive|include
file|<e32base.h>
end_include
begin_include
include|#
directive|include
file|<sys/types.h>
end_include
begin_include
include|#
directive|include
file|<sys/socket.h>
end_include
begin_include
include|#
directive|include
file|<sys/select.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QEventDispatcherSymbian
name|class
name|QEventDispatcherSymbian
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QTimerActiveObject
name|class
name|QTimerActiveObject
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_CORE_EXPORT
name|QActiveObject
range|:
name|public
name|CActive
block|{
name|public
operator|:
name|QActiveObject
argument_list|(
argument|TInt priority
argument_list|,
argument|QEventDispatcherSymbian *dispatcher
argument_list|)
block|;
operator|~
name|QActiveObject
argument_list|()
block|;
name|bool
name|maybeQueueForLater
argument_list|()
block|;
name|bool
name|maybeDeferSocketEvent
argument_list|()
block|;
name|void
name|reactivateAndComplete
argument_list|()
block|;
specifier|static
name|bool
name|wait
argument_list|(
argument|CActive* ao
argument_list|,
argument|int ms
argument_list|)
block|;
specifier|static
name|bool
name|wait
argument_list|(
argument|QList<CActive*> aos
argument_list|,
argument|int ms
argument_list|)
block|;
name|protected
operator|:
name|QEventDispatcherSymbian
operator|*
name|m_dispatcher
block|;
name|private
operator|:
name|bool
name|m_hasAlreadyRun
operator|:
literal|1
block|;
name|bool
name|m_hasRunAgain
operator|:
literal|1
block|;
name|int
name|m_iterationCount
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QWakeUpActiveObject
range|:
name|public
name|QActiveObject
block|{
name|public
operator|:
name|QWakeUpActiveObject
argument_list|(
name|QEventDispatcherSymbian
operator|*
name|dispatcher
argument_list|)
block|;
operator|~
name|QWakeUpActiveObject
argument_list|()
block|;
name|void
name|Complete
argument_list|()
block|;
name|protected
operator|:
name|void
name|DoCancel
argument_list|()
block|;
name|void
name|RunL
argument_list|()
block|;
name|private
operator|:
name|TThreadId
name|m_hostThreadId
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|struct|QSharedData
name|struct
name|SymbianTimerInfo
range|:
name|public
name|QSharedData
block|{
name|SymbianTimerInfo
argument_list|()
block|;
operator|~
name|SymbianTimerInfo
argument_list|()
block|;
DECL|member|timerId
name|int
name|timerId
block|;
DECL|member|interval
name|int
name|interval
block|;
DECL|member|msLeft
name|int
name|msLeft
block|;
DECL|member|inTimerEvent
name|bool
name|inTimerEvent
block|;
DECL|member|receiver
name|QObject
operator|*
name|receiver
block|;
DECL|member|timerAO
name|QTimerActiveObject
operator|*
name|timerAO
block|;
DECL|member|dispatcher
name|QEventDispatcherSymbian
operator|*
name|dispatcher
block|; }
decl_stmt|;
end_decl_stmt
begin_typedef
DECL|typedef|SymbianTimerInfoPtr
typedef|typedef
name|QExplicitlySharedDataPointer
operator|<
name|SymbianTimerInfo
operator|>
name|SymbianTimerInfoPtr
expr_stmt|;
end_typedef
begin_comment
comment|// This is a bit of a proxy class. See comments in SetActive and Start for details.
end_comment
begin_decl_stmt
name|class
name|QTimerActiveObject
range|:
name|public
name|QActiveObject
block|{
name|public
operator|:
name|QTimerActiveObject
argument_list|(
name|QEventDispatcherSymbian
operator|*
name|dispatcher
argument_list|,
name|SymbianTimerInfo
operator|*
name|timerInfo
argument_list|)
block|;
operator|~
name|QTimerActiveObject
argument_list|()
block|;
name|void
name|Start
argument_list|()
block|;
name|protected
operator|:
name|void
name|DoCancel
argument_list|()
block|;
name|void
name|RunL
argument_list|()
block|;
name|private
operator|:
name|void
name|Run
argument_list|()
block|;
name|void
name|StartTimer
argument_list|()
block|;
name|private
operator|:
name|SymbianTimerInfo
operator|*
name|m_timerInfo
block|;
name|QElapsedTimer
name|m_timeoutTimer
block|;
name|int
name|m_expectedTimeSinceLastEvent
block|;
name|RTimer
name|m_rTimer
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QCompleteDeferredAOs
range|:
name|public
name|CActive
block|{
name|public
operator|:
name|QCompleteDeferredAOs
argument_list|(
name|QEventDispatcherSymbian
operator|*
name|dispatcher
argument_list|)
block|;
operator|~
name|QCompleteDeferredAOs
argument_list|()
block|;
name|void
name|complete
argument_list|()
block|;
name|protected
operator|:
name|void
name|DoCancel
argument_list|()
block|;
name|void
name|RunL
argument_list|()
block|;
name|private
operator|:
name|QEventDispatcherSymbian
operator|*
name|m_dispatcher
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QSocketActiveObject
range|:
name|public
name|QActiveObject
block|{
name|public
operator|:
name|QSocketActiveObject
argument_list|(
name|QEventDispatcherSymbian
operator|*
name|dispatcher
argument_list|,
name|QSocketNotifier
operator|*
name|notifier
argument_list|)
block|;
operator|~
name|QSocketActiveObject
argument_list|()
block|;
name|void
name|deleteLater
argument_list|()
block|;
name|protected
operator|:
name|void
name|DoCancel
argument_list|()
block|;
name|void
name|RunL
argument_list|()
block|;
name|void
name|run
argument_list|()
block|;
name|private
operator|:
name|QSocketNotifier
operator|*
name|m_notifier
block|;
name|bool
name|m_inSocketEvent
block|;
name|bool
name|m_deleteLater
block|;
name|friend
name|class
name|QEventDispatcherSymbian
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QSelectThread
range|:
name|public
name|QThread
block|{
name|Q_DECLARE_PRIVATE
argument_list|(
argument|QThread
argument_list|)
name|public
operator|:
name|QSelectThread
argument_list|()
block|;
operator|~
name|QSelectThread
argument_list|()
block|;
name|void
name|requestSocketEvents
argument_list|(
name|QSocketNotifier
operator|*
name|notifier
argument_list|,
name|TRequestStatus
operator|*
name|status
argument_list|)
block|;
name|void
name|cancelSocketEvents
argument_list|(
name|QSocketNotifier
operator|*
name|notifier
argument_list|)
block|;
name|void
name|restart
argument_list|()
block|;
name|void
name|stop
argument_list|()
block|;
name|protected
operator|:
name|void
name|run
argument_list|()
block|;
name|private
operator|:
name|int
name|updateSocketSet
argument_list|(
argument|QSocketNotifier::Type type
argument_list|,
argument|fd_set *fds
argument_list|)
block|;
name|void
name|updateActivatedNotifiers
argument_list|(
argument|QSocketNotifier::Type type
argument_list|,
argument|fd_set *fds
argument_list|)
block|;
name|private
operator|:
name|int
name|m_pipeEnds
index|[
literal|2
index|]
block|;
name|QHash
operator|<
name|QSocketNotifier
operator|*
block|,
name|TRequestStatus
operator|*
operator|>
name|m_AOStatuses
block|;
name|QMutex
name|m_mutex
block|;
name|QWaitCondition
name|m_waitCond
block|;
name|bool
name|m_quit
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_CORE_EXPORT
name|CQtActiveScheduler
range|:
name|public
name|CActiveScheduler
block|{
name|public
operator|:
comment|// from CActiveScheduler
name|virtual
name|void
name|Error
argument_list|(
argument|TInt aError
argument_list|)
specifier|const
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_CORE_EXPORT
name|QEventDispatcherSymbian
range|:
name|public
name|QAbstractEventDispatcher
block|{
name|Q_OBJECT
name|Q_DECLARE_PRIVATE
argument_list|(
argument|QAbstractEventDispatcher
argument_list|)
name|public
operator|:
name|QEventDispatcherSymbian
argument_list|(
name|QObject
operator|*
name|parent
operator|=
literal|0
argument_list|)
block|;
operator|~
name|QEventDispatcherSymbian
argument_list|()
block|;
name|void
name|flush
argument_list|()
block|;
name|bool
name|hasPendingEvents
argument_list|()
block|;
name|void
name|interrupt
argument_list|()
block|;
name|bool
name|processEvents
argument_list|(
argument|QEventLoop::ProcessEventsFlags flags
argument_list|)
block|;
name|void
name|registerSocketNotifier
argument_list|(
name|QSocketNotifier
operator|*
name|notifier
argument_list|)
block|;
name|void
name|registerTimer
argument_list|(
argument|int timerId
argument_list|,
argument|int interval
argument_list|,
argument|QObject * object
argument_list|)
block|;
name|QList
operator|<
name|TimerInfo
operator|>
name|registeredTimers
argument_list|(
argument|QObject * object
argument_list|)
specifier|const
block|;
name|void
name|unregisterSocketNotifier
argument_list|(
name|QSocketNotifier
operator|*
name|notifier
argument_list|)
block|;
name|bool
name|unregisterTimer
argument_list|(
argument|int timerId
argument_list|)
block|;
name|bool
name|unregisterTimers
argument_list|(
name|QObject
operator|*
name|object
argument_list|)
block|;
name|void
name|wakeUp
argument_list|()
block|;
name|void
name|startingUp
argument_list|()
block|;
name|void
name|closingDown
argument_list|()
block|;
name|void
name|timerFired
argument_list|(
argument|int timerId
argument_list|)
block|;
name|void
name|wakeUpWasCalled
argument_list|()
block|;
name|void
name|reactivateSocketNotifier
argument_list|(
name|QSocketNotifier
operator|*
name|notifier
argument_list|)
block|;
name|void
name|addDeferredActiveObject
argument_list|(
name|QActiveObject
operator|*
name|object
argument_list|)
block|;
name|void
name|removeDeferredActiveObject
argument_list|(
name|QActiveObject
operator|*
name|object
argument_list|)
block|;
name|void
name|queueDeferredActiveObjectsCompletion
argument_list|()
block|;
comment|// Can be overridden to activate local active objects too, but do call baseclass!
name|virtual
name|void
name|reactivateDeferredActiveObjects
argument_list|()
block|;
specifier|inline
name|int
name|iterationCount
argument_list|()
specifier|const
block|{
return|return
name|m_iterationCount
return|;
block|}
name|void
name|addDeferredSocketActiveObject
argument_list|(
name|QActiveObject
operator|*
name|object
argument_list|)
block|;
specifier|inline
name|bool
name|areSocketEventsBlocked
argument_list|()
specifier|const
block|{
return|return
name|m_noSocketEvents
return|;
block|}
specifier|static
name|void
name|RequestComplete
argument_list|(
argument|TRequestStatus *&status
argument_list|,
argument|TInt reason
argument_list|)
block|;
specifier|static
name|void
name|RequestComplete
argument_list|(
argument|RThread&threadHandle
argument_list|,
argument|TRequestStatus *&status
argument_list|,
argument|TInt reason
argument_list|)
block|;
name|private
operator|:
name|bool
name|sendPostedEvents
argument_list|()
block|;
name|bool
name|sendDeferredSocketEvents
argument_list|()
block|;
name|QSelectThread
operator|&
name|selectThread
argument_list|()
block|;
name|private
operator|:
name|QSelectThread
operator|*
name|m_selectThread
block|;
name|CQtActiveScheduler
operator|*
name|m_activeScheduler
block|;
name|QHash
operator|<
name|int
block|,
name|SymbianTimerInfoPtr
operator|>
name|m_timerList
block|;
name|QHash
operator|<
name|QSocketNotifier
operator|*
block|,
name|QSocketActiveObject
operator|*
operator|>
name|m_notifiers
block|;
name|QWakeUpActiveObject
operator|*
name|m_wakeUpAO
block|;
name|QCompleteDeferredAOs
operator|*
name|m_completeDeferredAOs
block|;
specifier|volatile
name|bool
name|m_interrupt
block|;
name|QAtomicInt
name|m_wakeUpDone
block|;
name|unsigned
name|char
name|m_iterationCount
block|;
name|bool
name|m_insideTimerEvent
block|;
name|bool
name|m_noSocketEvents
block|;
comment|//deferred until socket events are enabled
name|QList
operator|<
name|QActiveObject
operator|*
operator|>
name|m_deferredSocketEvents
block|;
comment|//deferred until idle
name|QList
operator|<
name|QActiveObject
operator|*
operator|>
name|m_deferredActiveObjects
block|;
name|int
name|m_delay
block|;
name|int
name|m_avgEventTime
block|;
name|QElapsedTimer
name|m_lastIdleRequestTimer
block|; }
decl_stmt|;
end_decl_stmt
begin_ifdef
ifdef|#
directive|ifdef
name|QT_DEBUG
end_ifdef
begin_define
DECL|macro|VERIFY_PENDING_REQUEST_STATUS
define|#
directive|define
name|VERIFY_PENDING_REQUEST_STATUS
define|\
value|Q_ASSERT(status->Int() == KRequestPending);
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|VERIFY_PENDING_REQUEST_STATUS
define|#
directive|define
name|VERIFY_PENDING_REQUEST_STATUS
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Convenience functions for doing some sanity checking on our own complete code.
end_comment
begin_comment
comment|// Unless QT_DEBUG is defined, it is exactly equivalent to the Symbian version.
end_comment
begin_expr_stmt
DECL|function|RequestComplete
specifier|inline
name|void
name|QEventDispatcherSymbian
operator|::
name|RequestComplete
argument_list|(
argument|TRequestStatus *&status
argument_list|,
argument|TInt reason
argument_list|)
block|{
name|VERIFY_PENDING_REQUEST_STATUS
name|User
operator|::
name|RequestComplete
argument_list|(
name|status
argument_list|,
name|reason
argument_list|)
block|; }
DECL|function|RequestComplete
specifier|inline
name|void
name|QEventDispatcherSymbian
operator|::
name|RequestComplete
argument_list|(
argument|RThread&threadHandle
argument_list|,
argument|TRequestStatus *&status
argument_list|,
argument|TInt reason
argument_list|)
block|{
name|VERIFY_PENDING_REQUEST_STATUS
name|threadHandle
operator|.
name|RequestComplete
argument_list|(
name|status
argument_list|,
name|reason
argument_list|)
block|; }
DECL|macro|VERIFY_PENDING_REQUEST_STATUS
undef|#
directive|undef
name|VERIFY_PENDING_REQUEST_STATUS
name|QT_END_NAMESPACE
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QEVENTDISPATCHER_SYMBIAN_P_H
end_comment
end_unit
