begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QABSTRACTEVENTDISPATCHER_H
end_ifndef
begin_define
DECL|macro|QABSTRACTEVENTDISPATCHER_H
define|#
directive|define
name|QABSTRACTEVENTDISPATCHER_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qobject.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qeventloop.h>
end_include
begin_decl_stmt
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
name|QT_MODULE
argument_list|(
name|Core
argument_list|)
name|class
name|QAbstractEventDispatcherPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QSocketNotifier
name|class
name|QSocketNotifier
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_CORE_EXPORT
name|QAbstractEventDispatcher
range|:
name|public
name|QObject
block|{
name|Q_OBJECT
name|Q_DECLARE_PRIVATE
argument_list|(
argument|QAbstractEventDispatcher
argument_list|)
name|public
operator|:
expr|struct
name|TimerInfo
block|{
name|int
name|timerId
block|;
name|int
name|interval
block|;
name|Qt
operator|::
name|TimerType
name|timerType
block|;
specifier|inline
name|TimerInfo
argument_list|(
argument|int id
argument_list|,
argument|int i
argument_list|,
argument|Qt::TimerType t
argument_list|)
operator|:
name|timerId
argument_list|(
name|id
argument_list|)
block|,
name|interval
argument_list|(
name|i
argument_list|)
block|,
name|timerType
argument_list|(
argument|t
argument_list|)
block|{ }
block|}
block|;
name|explicit
name|QAbstractEventDispatcher
argument_list|(
name|QObject
operator|*
name|parent
operator|=
literal|0
argument_list|)
block|;
operator|~
name|QAbstractEventDispatcher
argument_list|()
block|;
specifier|static
name|QAbstractEventDispatcher
operator|*
name|instance
argument_list|(
name|QThread
operator|*
name|thread
operator|=
literal|0
argument_list|)
block|;
name|virtual
name|bool
name|processEvents
argument_list|(
argument|QEventLoop::ProcessEventsFlags flags
argument_list|)
operator|=
literal|0
block|;
name|virtual
name|bool
name|hasPendingEvents
argument_list|()
operator|=
literal|0
block|;
name|virtual
name|void
name|registerSocketNotifier
argument_list|(
name|QSocketNotifier
operator|*
name|notifier
argument_list|)
operator|=
literal|0
block|;
name|virtual
name|void
name|unregisterSocketNotifier
argument_list|(
name|QSocketNotifier
operator|*
name|notifier
argument_list|)
operator|=
literal|0
block|;
if|#
directive|if
name|QT_DEPRECATED_SINCE
argument_list|(
literal|5
operator|,
literal|0
argument_list|)
name|QT_DEPRECATED
specifier|inline
name|int
name|registerTimer
argument_list|(
argument|int interval
argument_list|,
argument|QObject *object
argument_list|)
block|{
return|return
name|registerTimer
argument_list|(
name|interval
argument_list|,
name|Qt
operator|::
name|CoarseTimer
argument_list|,
name|object
argument_list|)
return|;
block|}
name|QT_DEPRECATED
specifier|inline
name|void
name|registerTimer
argument_list|(
argument|int timerId
argument_list|,
argument|int interval
argument_list|,
argument|QObject *object
argument_list|)
block|{
name|registerTimer
argument_list|(
name|timerId
argument_list|,
name|interval
argument_list|,
name|Qt
operator|::
name|CoarseTimer
argument_list|,
name|object
argument_list|)
block|; }
endif|#
directive|endif
name|int
name|registerTimer
argument_list|(
argument|int interval
argument_list|,
argument|Qt::TimerType timerType
argument_list|,
argument|QObject *object
argument_list|)
block|;
name|virtual
name|void
name|registerTimer
argument_list|(
argument|int timerId
argument_list|,
argument|int interval
argument_list|,
argument|Qt::TimerType timerType
argument_list|,
argument|QObject *object
argument_list|)
operator|=
literal|0
block|;
name|virtual
name|bool
name|unregisterTimer
argument_list|(
argument|int timerId
argument_list|)
operator|=
literal|0
block|;
name|virtual
name|bool
name|unregisterTimers
argument_list|(
name|QObject
operator|*
name|object
argument_list|)
operator|=
literal|0
block|;
name|virtual
name|QList
operator|<
name|TimerInfo
operator|>
name|registeredTimers
argument_list|(
argument|QObject *object
argument_list|)
specifier|const
operator|=
literal|0
block|;
name|virtual
name|void
name|wakeUp
argument_list|()
operator|=
literal|0
block|;
name|virtual
name|void
name|interrupt
argument_list|()
operator|=
literal|0
block|;
name|virtual
name|void
name|flush
argument_list|()
operator|=
literal|0
block|;
name|virtual
name|void
name|startingUp
argument_list|()
block|;
name|virtual
name|void
name|closingDown
argument_list|()
block|;
typedef|typedef
name|bool
function_decl|(
modifier|*
name|EventFilter
function_decl|)
parameter_list|(
name|void
modifier|*
name|message
parameter_list|)
function_decl|;
name|EventFilter
name|setEventFilter
argument_list|(
argument|EventFilter filter
argument_list|)
decl_stmt|;
end_decl_stmt
begin_function_decl
name|bool
name|filterEvent
parameter_list|(
name|void
modifier|*
name|message
parameter_list|)
function_decl|;
end_function_decl
begin_label
name|Q_SIGNALS
label|:
end_label
begin_function_decl
name|void
name|aboutToBlock
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|void
name|awake
parameter_list|()
function_decl|;
end_function_decl
begin_label
name|protected
label|:
end_label
begin_expr_stmt
name|QAbstractEventDispatcher
argument_list|(
name|QAbstractEventDispatcherPrivate
operator|&
argument_list|,
name|QObject
operator|*
name|parent
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
unit|};
name|QT_END_NAMESPACE
name|QT_END_HEADER
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QABSTRACTEVENTDISPATCHER_H
end_comment
end_unit
