begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QABSTRACTEVENTDISPATCHER_H
end_ifndef
begin_define
DECL|macro|QABSTRACTEVENTDISPATCHER_H
define|#
directive|define
name|QABSTRACTEVENTDISPATCHER_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qobject.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qeventloop.h>
end_include
begin_decl_stmt
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
name|QT_MODULE
argument_list|(
name|Core
argument_list|)
name|class
name|QAbstractEventDispatcherPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QSocketNotifier
name|class
name|QSocketNotifier
decl_stmt|;
end_decl_stmt
begin_expr_stmt
DECL|variable|T1
name|template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|>
expr|struct
name|QPair
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|class
name|Q_CORE_EXPORT
name|QAbstractEventDispatcher
range|:
name|public
name|QObject
block|{
name|Q_OBJECT
name|Q_DECLARE_PRIVATE
argument_list|(
argument|QAbstractEventDispatcher
argument_list|)
name|public
operator|:
typedef|typedef
name|QPair
operator|<
name|int
operator|,
name|int
operator|>
name|TimerInfo
expr_stmt|;
name|explicit
name|QAbstractEventDispatcher
argument_list|(
name|QObject
operator|*
name|parent
operator|=
literal|0
argument_list|)
decl_stmt|;
end_decl_stmt
begin_expr_stmt
operator|~
name|QAbstractEventDispatcher
argument_list|()
expr_stmt|;
end_expr_stmt
begin_function_decl
specifier|static
name|QAbstractEventDispatcher
modifier|*
name|instance
parameter_list|(
name|QThread
modifier|*
name|thread
init|=
literal|0
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
name|virtual
name|bool
name|processEvents
argument_list|(
name|QEventLoop
operator|::
name|ProcessEventsFlags
name|flags
argument_list|)
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_function_decl
name|virtual
name|bool
name|hasPendingEvents
parameter_list|()
init|=
literal|0
function_decl|;
end_function_decl
begin_function_decl
name|virtual
name|void
name|registerSocketNotifier
parameter_list|(
name|QSocketNotifier
modifier|*
name|notifier
parameter_list|)
init|=
literal|0
function_decl|;
end_function_decl
begin_function_decl
name|virtual
name|void
name|unregisterSocketNotifier
parameter_list|(
name|QSocketNotifier
modifier|*
name|notifier
parameter_list|)
init|=
literal|0
function_decl|;
end_function_decl
begin_function_decl
name|int
name|registerTimer
parameter_list|(
name|int
name|interval
parameter_list|,
name|QObject
modifier|*
name|object
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|virtual
name|void
name|registerTimer
parameter_list|(
name|int
name|timerId
parameter_list|,
name|int
name|interval
parameter_list|,
name|QObject
modifier|*
name|object
parameter_list|)
init|=
literal|0
function_decl|;
end_function_decl
begin_function_decl
name|virtual
name|bool
name|unregisterTimer
parameter_list|(
name|int
name|timerId
parameter_list|)
init|=
literal|0
function_decl|;
end_function_decl
begin_function_decl
name|virtual
name|bool
name|unregisterTimers
parameter_list|(
name|QObject
modifier|*
name|object
parameter_list|)
init|=
literal|0
function_decl|;
end_function_decl
begin_expr_stmt
name|virtual
name|QList
operator|<
name|TimerInfo
operator|>
name|registeredTimers
argument_list|(
argument|QObject *object
argument_list|)
specifier|const
operator|=
literal|0
expr_stmt|;
end_expr_stmt
begin_function_decl
name|virtual
name|void
name|wakeUp
parameter_list|()
init|=
literal|0
function_decl|;
end_function_decl
begin_function_decl
name|virtual
name|void
name|interrupt
parameter_list|()
init|=
literal|0
function_decl|;
end_function_decl
begin_function_decl
name|virtual
name|void
name|flush
parameter_list|()
init|=
literal|0
function_decl|;
end_function_decl
begin_function_decl
name|virtual
name|void
name|startingUp
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|virtual
name|void
name|closingDown
parameter_list|()
function_decl|;
end_function_decl
begin_typedef
typedef|typedef
name|bool
function_decl|(
modifier|*
name|EventFilter
function_decl|)
parameter_list|(
name|void
modifier|*
name|message
parameter_list|)
function_decl|;
end_typedef
begin_function_decl
name|EventFilter
name|setEventFilter
parameter_list|(
name|EventFilter
name|filter
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|bool
name|filterEvent
parameter_list|(
name|void
modifier|*
name|message
parameter_list|)
function_decl|;
end_function_decl
begin_label
name|Q_SIGNALS
label|:
end_label
begin_function_decl
name|void
name|aboutToBlock
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|void
name|awake
parameter_list|()
function_decl|;
end_function_decl
begin_label
name|protected
label|:
end_label
begin_expr_stmt
name|QAbstractEventDispatcher
argument_list|(
name|QAbstractEventDispatcherPrivate
operator|&
argument_list|,
name|QObject
operator|*
name|parent
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
unit|};
name|QT_END_NAMESPACE
name|QT_END_HEADER
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QABSTRACTEVENTDISPATCHER_H
end_comment
end_unit
