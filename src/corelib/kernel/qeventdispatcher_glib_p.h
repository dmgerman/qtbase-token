begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia. For licensing terms and ** conditions see http://qt.digia.com/licensing. For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights. These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QEVENTDISPATCHER_GLIB_P_H
end_ifndef
begin_define
DECL|macro|QEVENTDISPATCHER_GLIB_P_H
define|#
directive|define
name|QEVENTDISPATCHER_GLIB_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists for the convenience
end_comment
begin_comment
comment|// of the QLibrary class.  This header file may change from
end_comment
begin_comment
comment|// version to version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"qabstracteventdispatcher.h"
end_include
begin_include
include|#
directive|include
file|"qabstracteventdispatcher_p.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/qhash.h>
end_include
begin_typedef
DECL|typedef|GMainContext
typedef|typedef
name|struct
name|_GMainContext
name|GMainContext
typedef|;
end_typedef
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QEventDispatcherGlibPrivate
name|class
name|QEventDispatcherGlibPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_CORE_EXPORT
name|QEventDispatcherGlib
range|:
name|public
name|QAbstractEventDispatcher
block|{
name|Q_OBJECT
name|Q_DECLARE_PRIVATE
argument_list|(
argument|QEventDispatcherGlib
argument_list|)
name|public
operator|:
name|explicit
name|QEventDispatcherGlib
argument_list|(
name|QObject
operator|*
name|parent
operator|=
literal|0
argument_list|)
block|;
name|explicit
name|QEventDispatcherGlib
argument_list|(
name|GMainContext
operator|*
name|context
argument_list|,
name|QObject
operator|*
name|parent
operator|=
literal|0
argument_list|)
block|;
operator|~
name|QEventDispatcherGlib
argument_list|()
block|;
name|bool
name|processEvents
argument_list|(
argument|QEventLoop::ProcessEventsFlags flags
argument_list|)
block|;
name|bool
name|hasPendingEvents
argument_list|()
block|;
name|void
name|registerSocketNotifier
argument_list|(
argument|QSocketNotifier *socketNotifier
argument_list|)
name|Q_DECL_FINAL
block|;
name|void
name|unregisterSocketNotifier
argument_list|(
argument|QSocketNotifier *socketNotifier
argument_list|)
name|Q_DECL_FINAL
block|;
name|void
name|registerTimer
argument_list|(
argument|int timerId
argument_list|,
argument|int interval
argument_list|,
argument|Qt::TimerType timerType
argument_list|,
argument|QObject *object
argument_list|)
name|Q_DECL_FINAL
block|;
name|bool
name|unregisterTimer
argument_list|(
argument|int timerId
argument_list|)
name|Q_DECL_FINAL
block|;
name|bool
name|unregisterTimers
argument_list|(
argument|QObject *object
argument_list|)
name|Q_DECL_FINAL
block|;
name|QList
operator|<
name|TimerInfo
operator|>
name|registeredTimers
argument_list|(
argument|QObject *object
argument_list|)
specifier|const
name|Q_DECL_FINAL
block|;
name|int
name|remainingTime
argument_list|(
argument|int timerId
argument_list|)
name|Q_DECL_FINAL
block|;
name|void
name|wakeUp
argument_list|()
name|Q_DECL_FINAL
block|;
name|void
name|interrupt
argument_list|()
name|Q_DECL_FINAL
block|;
name|void
name|flush
argument_list|()
name|Q_DECL_FINAL
block|;
specifier|static
name|bool
name|versionSupported
argument_list|()
block|;
name|protected
operator|:
name|QEventDispatcherGlib
argument_list|(
name|QEventDispatcherGlibPrivate
operator|&
name|dd
argument_list|,
name|QObject
operator|*
name|parent
argument_list|)
block|; }
decl_stmt|;
end_decl_stmt
begin_struct_decl
struct_decl|struct
name|GPostEventSource
struct_decl|;
end_struct_decl
begin_struct_decl
struct_decl|struct
name|GSocketNotifierSource
struct_decl|;
end_struct_decl
begin_struct_decl
struct_decl|struct
name|GTimerSource
struct_decl|;
end_struct_decl
begin_struct_decl
struct_decl|struct
name|GIdleTimerSource
struct_decl|;
end_struct_decl
begin_decl_stmt
name|class
name|Q_CORE_EXPORT
name|QEventDispatcherGlibPrivate
range|:
name|public
name|QAbstractEventDispatcherPrivate
block|{
name|public
operator|:
name|QEventDispatcherGlibPrivate
argument_list|(
name|GMainContext
operator|*
name|context
operator|=
literal|0
argument_list|)
block|;
name|GMainContext
operator|*
name|mainContext
block|;
name|GPostEventSource
operator|*
name|postEventSource
block|;
name|GSocketNotifierSource
operator|*
name|socketNotifierSource
block|;
name|GTimerSource
operator|*
name|timerSource
block|;
name|GIdleTimerSource
operator|*
name|idleTimerSource
block|;
name|void
name|runTimersOnceWithNormalPriority
argument_list|()
block|; }
decl_stmt|;
end_decl_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QEVENTDISPATCHER_GLIB_P_H
end_comment
end_unit
