begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QMATH_H
end_ifndef
begin_define
DECL|macro|QMATH_H
define|#
directive|define
name|QMATH_H
end_define
begin_if
if|#
directive|if
literal|0
end_if
begin_pragma
pragma|#
directive|pragma
name|qt_class
name|(
name|QtMath
name|)
end_pragma
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<math.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qglobal.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qcompilerdetection.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|macro|QT_SINE_TABLE_SIZE
define|#
directive|define
name|QT_SINE_TABLE_SIZE
value|256
specifier|extern
name|Q_CORE_EXPORT
specifier|const
name|qreal
name|qt_sine_table
index|[
name|QT_SINE_TABLE_SIZE
index|]
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|qCeil
specifier|inline
name|int
name|qCeil
parameter_list|(
name|qreal
name|v
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_USE_MATH_H_FLOATS
if|if
condition|(
sizeof|sizeof
argument_list|(
name|qreal
argument_list|)
operator|==
sizeof|sizeof
argument_list|(
name|float
argument_list|)
condition|)
return|return
name|int
argument_list|(
name|ceilf
argument_list|(
name|float
argument_list|(
name|v
argument_list|)
argument_list|)
argument_list|)
return|;
else|else
endif|#
directive|endif
return|return
name|int
argument_list|(
name|ceil
argument_list|(
name|v
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qFloor
specifier|inline
name|int
name|qFloor
parameter_list|(
name|qreal
name|v
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_USE_MATH_H_FLOATS
if|if
condition|(
sizeof|sizeof
argument_list|(
name|qreal
argument_list|)
operator|==
sizeof|sizeof
argument_list|(
name|float
argument_list|)
condition|)
return|return
name|int
argument_list|(
name|floorf
argument_list|(
name|float
argument_list|(
name|v
argument_list|)
argument_list|)
argument_list|)
return|;
else|else
endif|#
directive|endif
return|return
name|int
argument_list|(
name|floor
argument_list|(
name|v
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qFabs
specifier|inline
name|qreal
name|qFabs
parameter_list|(
name|qreal
name|v
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_USE_MATH_H_FLOATS
if|if
condition|(
sizeof|sizeof
argument_list|(
name|qreal
argument_list|)
operator|==
sizeof|sizeof
argument_list|(
name|float
argument_list|)
condition|)
return|return
name|fabsf
argument_list|(
name|float
argument_list|(
name|v
argument_list|)
argument_list|)
return|;
else|else
endif|#
directive|endif
return|return
name|fabs
argument_list|(
name|v
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qSin
specifier|inline
name|qreal
name|qSin
parameter_list|(
name|qreal
name|v
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_USE_MATH_H_FLOATS
if|if
condition|(
sizeof|sizeof
argument_list|(
name|qreal
argument_list|)
operator|==
sizeof|sizeof
argument_list|(
name|float
argument_list|)
condition|)
return|return
name|sinf
argument_list|(
name|float
argument_list|(
name|v
argument_list|)
argument_list|)
return|;
else|else
endif|#
directive|endif
return|return
name|sin
argument_list|(
name|v
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qCos
specifier|inline
name|qreal
name|qCos
parameter_list|(
name|qreal
name|v
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_USE_MATH_H_FLOATS
if|if
condition|(
sizeof|sizeof
argument_list|(
name|qreal
argument_list|)
operator|==
sizeof|sizeof
argument_list|(
name|float
argument_list|)
condition|)
return|return
name|cosf
argument_list|(
name|float
argument_list|(
name|v
argument_list|)
argument_list|)
return|;
else|else
endif|#
directive|endif
return|return
name|cos
argument_list|(
name|v
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qTan
specifier|inline
name|qreal
name|qTan
parameter_list|(
name|qreal
name|v
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_USE_MATH_H_FLOATS
if|if
condition|(
sizeof|sizeof
argument_list|(
name|qreal
argument_list|)
operator|==
sizeof|sizeof
argument_list|(
name|float
argument_list|)
condition|)
return|return
name|tanf
argument_list|(
name|float
argument_list|(
name|v
argument_list|)
argument_list|)
return|;
else|else
endif|#
directive|endif
return|return
name|tan
argument_list|(
name|v
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qAcos
specifier|inline
name|qreal
name|qAcos
parameter_list|(
name|qreal
name|v
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_USE_MATH_H_FLOATS
if|if
condition|(
sizeof|sizeof
argument_list|(
name|qreal
argument_list|)
operator|==
sizeof|sizeof
argument_list|(
name|float
argument_list|)
condition|)
return|return
name|acosf
argument_list|(
name|float
argument_list|(
name|v
argument_list|)
argument_list|)
return|;
else|else
endif|#
directive|endif
return|return
name|acos
argument_list|(
name|v
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qAsin
specifier|inline
name|qreal
name|qAsin
parameter_list|(
name|qreal
name|v
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_USE_MATH_H_FLOATS
if|if
condition|(
sizeof|sizeof
argument_list|(
name|qreal
argument_list|)
operator|==
sizeof|sizeof
argument_list|(
name|float
argument_list|)
condition|)
return|return
name|asinf
argument_list|(
name|float
argument_list|(
name|v
argument_list|)
argument_list|)
return|;
else|else
endif|#
directive|endif
return|return
name|asin
argument_list|(
name|v
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qAtan
specifier|inline
name|qreal
name|qAtan
parameter_list|(
name|qreal
name|v
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_USE_MATH_H_FLOATS
if|if
condition|(
sizeof|sizeof
argument_list|(
name|qreal
argument_list|)
operator|==
sizeof|sizeof
argument_list|(
name|float
argument_list|)
condition|)
return|return
name|atanf
argument_list|(
name|float
argument_list|(
name|v
argument_list|)
argument_list|)
return|;
else|else
endif|#
directive|endif
return|return
name|atan
argument_list|(
name|v
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qAtan2
specifier|inline
name|qreal
name|qAtan2
parameter_list|(
name|qreal
name|y
parameter_list|,
name|qreal
name|x
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_USE_MATH_H_FLOATS
if|if
condition|(
sizeof|sizeof
argument_list|(
name|qreal
argument_list|)
operator|==
sizeof|sizeof
argument_list|(
name|float
argument_list|)
condition|)
return|return
name|atan2f
argument_list|(
name|float
argument_list|(
name|y
argument_list|)
argument_list|,
name|float
argument_list|(
name|x
argument_list|)
argument_list|)
return|;
else|else
endif|#
directive|endif
return|return
name|atan2
argument_list|(
name|y
argument_list|,
name|x
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qSqrt
specifier|inline
name|qreal
name|qSqrt
parameter_list|(
name|qreal
name|v
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_USE_MATH_H_FLOATS
if|if
condition|(
sizeof|sizeof
argument_list|(
name|qreal
argument_list|)
operator|==
sizeof|sizeof
argument_list|(
name|float
argument_list|)
condition|)
return|return
name|sqrtf
argument_list|(
name|float
argument_list|(
name|v
argument_list|)
argument_list|)
return|;
else|else
endif|#
directive|endif
return|return
name|sqrt
argument_list|(
name|v
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qLn
specifier|inline
name|qreal
name|qLn
parameter_list|(
name|qreal
name|v
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_USE_MATH_H_FLOATS
if|if
condition|(
sizeof|sizeof
argument_list|(
name|qreal
argument_list|)
operator|==
sizeof|sizeof
argument_list|(
name|float
argument_list|)
condition|)
return|return
name|logf
argument_list|(
name|float
argument_list|(
name|v
argument_list|)
argument_list|)
return|;
else|else
endif|#
directive|endif
return|return
name|log
argument_list|(
name|v
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qExp
specifier|inline
name|qreal
name|qExp
parameter_list|(
name|qreal
name|v
parameter_list|)
block|{
comment|// only one signature
comment|// exists, exp(double)
return|return
name|exp
argument_list|(
name|v
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qPow
specifier|inline
name|qreal
name|qPow
parameter_list|(
name|qreal
name|x
parameter_list|,
name|qreal
name|y
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_USE_MATH_H_FLOATS
if|if
condition|(
sizeof|sizeof
argument_list|(
name|qreal
argument_list|)
operator|==
sizeof|sizeof
argument_list|(
name|float
argument_list|)
condition|)
return|return
name|powf
argument_list|(
name|float
argument_list|(
name|x
argument_list|)
argument_list|,
name|float
argument_list|(
name|y
argument_list|)
argument_list|)
return|;
else|else
endif|#
directive|endif
return|return
name|pow
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|M_E
end_ifndef
begin_define
DECL|macro|M_E
define|#
directive|define
name|M_E
value|(2.7182818284590452354)
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|M_LOG2E
end_ifndef
begin_define
DECL|macro|M_LOG2E
define|#
directive|define
name|M_LOG2E
value|(1.4426950408889634074)
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|M_LOG10E
end_ifndef
begin_define
DECL|macro|M_LOG10E
define|#
directive|define
name|M_LOG10E
value|(0.43429448190325182765)
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|M_LN2
end_ifndef
begin_define
DECL|macro|M_LN2
define|#
directive|define
name|M_LN2
value|(0.69314718055994530942)
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|M_LN10
end_ifndef
begin_define
DECL|macro|M_LN10
define|#
directive|define
name|M_LN10
value|(2.30258509299404568402)
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|M_PI
end_ifndef
begin_define
DECL|macro|M_PI
define|#
directive|define
name|M_PI
value|(3.14159265358979323846)
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|M_PI_2
end_ifndef
begin_define
DECL|macro|M_PI_2
define|#
directive|define
name|M_PI_2
value|(1.57079632679489661923)
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|M_PI_4
end_ifndef
begin_define
DECL|macro|M_PI_4
define|#
directive|define
name|M_PI_4
value|(0.78539816339744830962)
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|M_1_PI
end_ifndef
begin_define
DECL|macro|M_1_PI
define|#
directive|define
name|M_1_PI
value|(0.31830988618379067154)
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|M_2_PI
end_ifndef
begin_define
DECL|macro|M_2_PI
define|#
directive|define
name|M_2_PI
value|(0.63661977236758134308)
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|M_2_SQRTPI
end_ifndef
begin_define
DECL|macro|M_2_SQRTPI
define|#
directive|define
name|M_2_SQRTPI
value|(1.12837916709551257390)
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|M_SQRT2
end_ifndef
begin_define
DECL|macro|M_SQRT2
define|#
directive|define
name|M_SQRT2
value|(1.41421356237309504880)
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|M_SQRT1_2
end_ifndef
begin_define
DECL|macro|M_SQRT1_2
define|#
directive|define
name|M_SQRT1_2
value|(0.70710678118654752440)
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|qFastSin
specifier|inline
name|qreal
name|qFastSin
parameter_list|(
name|qreal
name|x
parameter_list|)
block|{
name|int
name|si
init|=
name|int
argument_list|(
name|x
operator|*
operator|(
literal|0.5
operator|*
name|QT_SINE_TABLE_SIZE
operator|/
name|M_PI
operator|)
argument_list|)
decl_stmt|;
comment|// Would be more accurate with qRound, but slower.
name|qreal
name|d
init|=
name|x
operator|-
name|si
operator|*
operator|(
literal|2.0
operator|*
name|M_PI
operator|/
name|QT_SINE_TABLE_SIZE
operator|)
decl_stmt|;
name|int
name|ci
init|=
name|si
operator|+
name|QT_SINE_TABLE_SIZE
operator|/
literal|4
decl_stmt|;
name|si
operator|&=
name|QT_SINE_TABLE_SIZE
operator|-
literal|1
expr_stmt|;
name|ci
operator|&=
name|QT_SINE_TABLE_SIZE
operator|-
literal|1
expr_stmt|;
return|return
name|qt_sine_table
index|[
name|si
index|]
operator|+
operator|(
name|qt_sine_table
index|[
name|ci
index|]
operator|-
literal|0.5
operator|*
name|qt_sine_table
index|[
name|si
index|]
operator|*
name|d
operator|)
operator|*
name|d
return|;
block|}
end_function
begin_function
DECL|function|qFastCos
specifier|inline
name|qreal
name|qFastCos
parameter_list|(
name|qreal
name|x
parameter_list|)
block|{
name|int
name|ci
init|=
name|int
argument_list|(
name|x
operator|*
operator|(
literal|0.5
operator|*
name|QT_SINE_TABLE_SIZE
operator|/
name|M_PI
operator|)
argument_list|)
decl_stmt|;
comment|// Would be more accurate with qRound, but slower.
name|qreal
name|d
init|=
name|x
operator|-
name|ci
operator|*
operator|(
literal|2.0
operator|*
name|M_PI
operator|/
name|QT_SINE_TABLE_SIZE
operator|)
decl_stmt|;
name|int
name|si
init|=
name|ci
operator|+
name|QT_SINE_TABLE_SIZE
operator|/
literal|4
decl_stmt|;
name|si
operator|&=
name|QT_SINE_TABLE_SIZE
operator|-
literal|1
expr_stmt|;
name|ci
operator|&=
name|QT_SINE_TABLE_SIZE
operator|-
literal|1
expr_stmt|;
return|return
name|qt_sine_table
index|[
name|si
index|]
operator|-
operator|(
name|qt_sine_table
index|[
name|ci
index|]
operator|+
literal|0.5
operator|*
name|qt_sine_table
index|[
name|si
index|]
operator|*
name|d
operator|)
operator|*
name|d
return|;
block|}
end_function
begin_function
DECL|function|qDegreesToRadians
name|Q_DECL_CONSTEXPR
specifier|inline
name|float
name|qDegreesToRadians
parameter_list|(
name|float
name|degrees
parameter_list|)
block|{
return|return
name|degrees
operator|*
name|float
argument_list|(
name|M_PI
operator|/
literal|180
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qDegreesToRadians
name|Q_DECL_CONSTEXPR
specifier|inline
name|double
name|qDegreesToRadians
parameter_list|(
name|double
name|degrees
parameter_list|)
block|{
return|return
name|degrees
operator|*
operator|(
name|M_PI
operator|/
literal|180
operator|)
return|;
block|}
end_function
begin_function
DECL|function|qRadiansToDegrees
name|Q_DECL_CONSTEXPR
specifier|inline
name|float
name|qRadiansToDegrees
parameter_list|(
name|float
name|radians
parameter_list|)
block|{
return|return
name|radians
operator|*
name|float
argument_list|(
literal|180
operator|/
name|M_PI
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qRadiansToDegrees
name|Q_DECL_CONSTEXPR
specifier|inline
name|double
name|qRadiansToDegrees
parameter_list|(
name|double
name|radians
parameter_list|)
block|{
return|return
name|radians
operator|*
operator|(
literal|180
operator|/
name|M_PI
operator|)
return|;
block|}
end_function
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_CC_GNU
argument_list|)
end_if
begin_comment
comment|// clz instructions exist in at least MIPS, ARM, PowerPC and X86, so we can assume this builtin always maps to an efficient instruction.
end_comment
begin_function
DECL|function|qNextPowerOfTwo
specifier|inline
name|quint32
name|qNextPowerOfTwo
parameter_list|(
name|quint32
name|v
parameter_list|)
block|{
if|if
condition|(
name|v
operator|==
literal|0
condition|)
return|return
literal|1
return|;
return|return
literal|2U
operator|<<
operator|(
literal|31
operator|^
name|__builtin_clz
argument_list|(
name|v
argument_list|)
operator|)
return|;
block|}
end_function
begin_function
DECL|function|qNextPowerOfTwo
specifier|inline
name|quint64
name|qNextPowerOfTwo
parameter_list|(
name|quint64
name|v
parameter_list|)
block|{
if|if
condition|(
name|v
operator|==
literal|0
condition|)
return|return
literal|1
return|;
return|return
name|Q_UINT64_C
argument_list|(
literal|2
argument_list|)
operator|<<
operator|(
literal|63
operator|^
name|__builtin_clzll
argument_list|(
name|v
argument_list|)
operator|)
return|;
block|}
end_function
begin_else
else|#
directive|else
end_else
begin_function
DECL|function|qNextPowerOfTwo
specifier|inline
name|quint32
name|qNextPowerOfTwo
parameter_list|(
name|quint32
name|v
parameter_list|)
block|{
name|v
operator||=
name|v
operator|>>
literal|1
expr_stmt|;
name|v
operator||=
name|v
operator|>>
literal|2
expr_stmt|;
name|v
operator||=
name|v
operator|>>
literal|4
expr_stmt|;
name|v
operator||=
name|v
operator|>>
literal|8
expr_stmt|;
name|v
operator||=
name|v
operator|>>
literal|16
expr_stmt|;
operator|++
name|v
expr_stmt|;
return|return
name|v
return|;
block|}
end_function
begin_function
DECL|function|qNextPowerOfTwo
specifier|inline
name|quint64
name|qNextPowerOfTwo
parameter_list|(
name|quint64
name|v
parameter_list|)
block|{
name|v
operator||=
name|v
operator|>>
literal|1
expr_stmt|;
name|v
operator||=
name|v
operator|>>
literal|2
expr_stmt|;
name|v
operator||=
name|v
operator|>>
literal|4
expr_stmt|;
name|v
operator||=
name|v
operator|>>
literal|8
expr_stmt|;
name|v
operator||=
name|v
operator|>>
literal|16
expr_stmt|;
name|v
operator||=
name|v
operator|>>
literal|32
expr_stmt|;
operator|++
name|v
expr_stmt|;
return|return
name|v
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|qNextPowerOfTwo
specifier|inline
name|quint32
name|qNextPowerOfTwo
parameter_list|(
name|qint32
name|v
parameter_list|)
block|{
return|return
name|qNextPowerOfTwo
argument_list|(
name|quint32
argument_list|(
name|v
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qNextPowerOfTwo
specifier|inline
name|quint64
name|qNextPowerOfTwo
parameter_list|(
name|qint64
name|v
parameter_list|)
block|{
return|return
name|qNextPowerOfTwo
argument_list|(
name|quint64
argument_list|(
name|v
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QMATH_H
end_comment
end_unit
