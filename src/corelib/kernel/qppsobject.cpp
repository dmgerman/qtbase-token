begin_unit
begin_comment
comment|/****************************************************************************  **  ** Copyright (C) 2013 BlackBerry Limited. All rights reserved.  ** Contact: http://www.qt.io/licensing/  **  ** This file is part of the QtCore module of the Qt Toolkit.  **  ** $QT_BEGIN_LICENSE:LGPL21$  ** Commercial License Usage  ** Licensees holding valid commercial Qt licenses may use this file in  ** accordance with the commercial license agreement provided with the  ** Software or, alternatively, in accordance with the terms contained in  ** a written agreement between you and The Qt Company. For licensing terms  ** and conditions see http://www.qt.io/terms-conditions. For further  ** information use the contact form at http://www.qt.io/contact-us.  **  ** GNU Lesser General Public License Usage  ** Alternatively, this file may be used under the terms of the GNU Lesser  ** General Public License version 2.1 or version 3 as published by the Free  ** Software Foundation and appearing in the file LICENSE.LGPLv21 and  ** LICENSE.LGPLv3 included in the packaging of this file. Please review the  ** following information to ensure the GNU Lesser General Public License  ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and  ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.  **  ** As a special exception, The Qt Company gives you certain additional  ** rights. These rights are described in The Qt Company LGPL Exception  ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.  **  ** $QT_END_LICENSE$  **  ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qppsobject_p.h"
end_include
begin_include
include|#
directive|include
file|"qppsobjectprivate_p.h"
end_include
begin_include
include|#
directive|include
file|"qppsattribute_p.h"
end_include
begin_include
include|#
directive|include
file|"qppsattributeprivate_p.h"
end_include
begin_include
include|#
directive|include
file|"qcore_unix_p.h"
end_include
begin_include
include|#
directive|include
file|<QObject>
end_include
begin_include
include|#
directive|include
file|<QSocketNotifier>
end_include
begin_include
include|#
directive|include
file|<unistd.h>
end_include
begin_include
include|#
directive|include
file|<fcntl.h>
end_include
begin_include
include|#
directive|include
file|<errno.h>
end_include
begin_include
include|#
directive|include
file|<string.h>
end_include
begin_include
include|#
directive|include
file|<confname.h>
end_include
begin_include
include|#
directive|include
file|<sys/pps.h>
end_include
begin_function
name|QT_BEGIN_NAMESPACE
comment|///////////////////////////////////////////////////////////////////////////////
DECL|function|safeAssign
specifier|static
specifier|inline
name|void
name|safeAssign
parameter_list|(
name|bool
modifier|*
name|pointer
parameter_list|,
name|bool
name|value
parameter_list|)
block|{
if|if
condition|(
name|pointer
condition|)
operator|*
name|pointer
operator|=
name|value
expr_stmt|;
block|}
end_function
begin_class
DECL|class|QPpsMaxSize
class|class
name|QPpsMaxSize
block|{
public|public:
DECL|function|QPpsMaxSize
name|QPpsMaxSize
parameter_list|()
block|{
name|int
name|fd
init|=
name|qt_safe_open
argument_list|(
literal|"/pps/.all"
argument_list|,
name|O_RDONLY
argument_list|)
decl_stmt|;
if|if
condition|(
name|fd
operator|==
operator|-
literal|1
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"qppsobject.cpp: qt_safe_open failed"
expr_stmt|;
name|value
operator|=
operator|-
literal|1
expr_stmt|;
block|}
comment|// This tells us the maximum transfer size across PPS
name|value
operator|=
operator|::
name|fpathconf
argument_list|(
name|fd
argument_list|,
name|_PC_REC_MAX_XFER_SIZE
argument_list|)
expr_stmt|;
name|qt_safe_close
argument_list|(
name|fd
argument_list|)
expr_stmt|;
block|}
DECL|member|value
name|int
name|value
decl_stmt|;
block|}
class|;
end_class
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|QPpsMaxSize
argument_list|,
argument|ppsMaxSize
argument_list|)
end_macro
begin_comment
comment|///////////////////////////////////////////////////////////////////////////////
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// QPpsObjectPrivate
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|///////////////////////////////////////////////////////////////////////////////
end_comment
begin_constructor
DECL|function|QPpsObjectPrivate
name|QPpsObjectPrivate
operator|::
name|QPpsObjectPrivate
parameter_list|(
specifier|const
name|QString
modifier|&
name|path
parameter_list|)
member_init_list|:
name|notifier
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|path
argument_list|(
name|path
argument_list|)
member_init_list|,
name|error
argument_list|(
name|EOK
argument_list|)
member_init_list|,
name|fd
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|readyReadEnabled
argument_list|(
literal|true
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|decode
name|QPpsAttributeMap
name|QPpsObjectPrivate
operator|::
name|decode
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|rawData
parameter_list|,
name|bool
modifier|*
name|ok
parameter_list|)
block|{
name|QPpsAttributeMap
name|attributeMap
decl_stmt|;
name|pps_decoder_t
name|decoder
decl_stmt|;
name|QByteArray
name|mutableData
argument_list|(
name|rawData
argument_list|)
decl_stmt|;
name|pps_decoder_error_t
name|error
init|=
name|pps_decoder_initialize
argument_list|(
operator|&
name|decoder
argument_list|,
name|mutableData
operator|.
name|data
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|==
name|PPS_DECODER_OK
condition|)
block|{
comment|// no need to check ok in this case
name|attributeMap
operator|=
name|decodeObject
argument_list|(
operator|&
name|decoder
argument_list|,
name|ok
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|()
operator|<<
literal|"QPpsObjectPrivate::decode: pps_decoder_initialize failed"
expr_stmt|;
operator|*
name|ok
operator|=
literal|false
expr_stmt|;
block|}
name|pps_decoder_cleanup
argument_list|(
operator|&
name|decoder
argument_list|)
expr_stmt|;
return|return
name|attributeMap
return|;
block|}
end_function
begin_function
DECL|function|variantMapFromPpsAttributeMap
name|QVariantMap
name|QPpsObjectPrivate
operator|::
name|variantMapFromPpsAttributeMap
parameter_list|(
specifier|const
name|QPpsAttributeMap
modifier|&
name|data
parameter_list|)
block|{
name|QVariantMap
name|variantMap
decl_stmt|;
for|for
control|(
name|QPpsAttributeMap
operator|::
name|const_iterator
name|it
init|=
name|data
operator|.
name|constBegin
argument_list|()
init|;
name|it
operator|!=
name|data
operator|.
name|constEnd
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|QVariant
name|variant
init|=
name|variantFromPpsAttribute
argument_list|(
name|it
operator|.
name|value
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|variant
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|QVariantMap
argument_list|()
return|;
name|variantMap
index|[
name|it
operator|.
name|key
argument_list|()
index|]
operator|=
name|variant
expr_stmt|;
block|}
return|return
name|variantMap
return|;
block|}
end_function
begin_function
DECL|function|readFlags
name|QPpsAttribute
operator|::
name|Flags
name|QPpsObjectPrivate
operator|::
name|readFlags
parameter_list|(
name|pps_decoder_t
modifier|*
name|decoder
parameter_list|)
block|{
name|int
name|rawFlags
init|=
name|pps_decoder_flags
argument_list|(
name|decoder
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QPpsAttribute
operator|::
name|Flags
name|attributeFlags
decl_stmt|;
if|if
condition|(
name|rawFlags
operator|&
name|PPS_INCOMPLETE
condition|)
name|attributeFlags
operator||=
name|QPpsAttribute
operator|::
name|Incomplete
expr_stmt|;
if|if
condition|(
name|rawFlags
operator|&
name|PPS_DELETED
condition|)
name|attributeFlags
operator||=
name|QPpsAttribute
operator|::
name|Deleted
expr_stmt|;
if|if
condition|(
name|rawFlags
operator|&
name|PPS_CREATED
condition|)
name|attributeFlags
operator||=
name|QPpsAttribute
operator|::
name|Created
expr_stmt|;
if|if
condition|(
name|rawFlags
operator|&
name|PPS_TRUNCATED
condition|)
name|attributeFlags
operator||=
name|QPpsAttribute
operator|::
name|Truncated
expr_stmt|;
if|if
condition|(
name|rawFlags
operator|&
name|PPS_PURGED
condition|)
name|attributeFlags
operator||=
name|QPpsAttribute
operator|::
name|Purged
expr_stmt|;
return|return
name|attributeFlags
return|;
block|}
end_function
begin_function
DECL|function|decodeString
name|QPpsAttribute
name|QPpsObjectPrivate
operator|::
name|decodeString
parameter_list|(
name|pps_decoder_t
modifier|*
name|decoder
parameter_list|)
block|{
specifier|const
name|char
modifier|*
name|value
init|=
literal|0
decl_stmt|;
name|pps_decoder_error_t
name|error
init|=
name|pps_decoder_get_string
argument_list|(
name|decoder
argument_list|,
literal|0
argument_list|,
operator|&
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|!=
name|PPS_DECODER_OK
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"QPpsObjectPrivate::decodeString: PPS_DECODER_GET_STRING failed"
expr_stmt|;
return|return
name|QPpsAttribute
argument_list|()
return|;
block|}
name|QPpsAttribute
operator|::
name|Flags
name|flags
init|=
name|readFlags
argument_list|(
name|decoder
argument_list|)
decl_stmt|;
return|return
name|QPpsAttributePrivate
operator|::
name|createPpsAttribute
argument_list|(
name|QString
operator|::
name|fromUtf8
argument_list|(
name|value
argument_list|)
argument_list|,
name|flags
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|decodeNumber
name|QPpsAttribute
name|QPpsObjectPrivate
operator|::
name|decodeNumber
parameter_list|(
name|pps_decoder_t
modifier|*
name|decoder
parameter_list|)
block|{
comment|// In order to support more number types, we have to do something stupid because the PPS
comment|// library won't let us work any other way. Basically, we have to probe the encoded type in
comment|// order to try to get exactly what we want.
name|long
name|long
name|llValue
decl_stmt|;
name|double
name|dValue
decl_stmt|;
name|int
name|iValue
decl_stmt|;
name|QPpsAttribute
operator|::
name|Flags
name|flags
decl_stmt|;
if|if
condition|(
name|pps_decoder_is_integer
argument_list|(
name|decoder
argument_list|,
literal|0
argument_list|)
condition|)
block|{
name|pps_decoder_error_t
name|error
init|=
name|pps_decoder_get_int
argument_list|(
name|decoder
argument_list|,
literal|0
argument_list|,
operator|&
name|iValue
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|error
condition|)
block|{
case|case
name|PPS_DECODER_OK
case|:
name|flags
operator|=
name|readFlags
argument_list|(
name|decoder
argument_list|)
expr_stmt|;
return|return
name|QPpsAttributePrivate
operator|::
name|createPpsAttribute
argument_list|(
name|iValue
argument_list|,
name|flags
argument_list|)
return|;
case|case
name|PPS_DECODER_CONVERSION_FAILED
case|:
name|error
operator|=
name|pps_decoder_get_int64
argument_list|(
name|decoder
argument_list|,
literal|0
argument_list|,
operator|&
name|llValue
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
operator|!=
name|PPS_DECODER_OK
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"QPpsObjectPrivate::decodeNumber: failed to decode integer"
expr_stmt|;
return|return
name|QPpsAttribute
argument_list|()
return|;
block|}
name|flags
operator|=
name|readFlags
argument_list|(
name|decoder
argument_list|)
expr_stmt|;
return|return
name|QPpsAttributePrivate
operator|::
name|createPpsAttribute
argument_list|(
name|llValue
argument_list|,
name|flags
argument_list|)
return|;
default|default:
name|qWarning
argument_list|()
operator|<<
literal|"QPpsObjectPrivate::decodeNumber: pps_decoder_get_int failed"
expr_stmt|;
return|return
name|QPpsAttribute
argument_list|()
return|;
block|}
block|}
else|else
block|{
name|pps_decoder_error_t
name|error
init|=
name|pps_decoder_get_double
argument_list|(
name|decoder
argument_list|,
literal|0
argument_list|,
operator|&
name|dValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|!=
name|PPS_DECODER_OK
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"QPpsObjectPrivate::decodeNumber: pps_decoder_get_double failed"
expr_stmt|;
return|return
name|QPpsAttribute
argument_list|()
return|;
block|}
name|flags
operator|=
name|readFlags
argument_list|(
name|decoder
argument_list|)
expr_stmt|;
return|return
name|QPpsAttributePrivate
operator|::
name|createPpsAttribute
argument_list|(
name|dValue
argument_list|,
name|flags
argument_list|)
return|;
block|}
block|}
end_function
begin_function
DECL|function|decodeBool
name|QPpsAttribute
name|QPpsObjectPrivate
operator|::
name|decodeBool
parameter_list|(
name|pps_decoder_t
modifier|*
name|decoder
parameter_list|)
block|{
name|bool
name|value
decl_stmt|;
name|pps_decoder_error_t
name|error
init|=
name|pps_decoder_get_bool
argument_list|(
name|decoder
argument_list|,
literal|0
argument_list|,
operator|&
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|!=
name|PPS_DECODER_OK
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"QPpsObjectPrivate::decodeBool: pps_decoder_get_bool failed"
expr_stmt|;
return|return
name|QPpsAttribute
argument_list|()
return|;
block|}
name|QPpsAttribute
operator|::
name|Flags
name|flags
init|=
name|readFlags
argument_list|(
name|decoder
argument_list|)
decl_stmt|;
return|return
name|QPpsAttributePrivate
operator|::
name|createPpsAttribute
argument_list|(
name|value
argument_list|,
name|flags
argument_list|)
return|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|decodeNestedData
name|QPpsAttribute
name|QPpsObjectPrivate
operator|::
name|decodeNestedData
parameter_list|(
name|T
function_decl|(
modifier|*
name|decodeFunction
function_decl|)
parameter_list|(
name|pps_decoder_t
modifier|*
parameter_list|,
name|bool
modifier|*
parameter_list|)
parameter_list|,
name|pps_decoder_t
modifier|*
name|decoder
parameter_list|)
block|{
comment|// We must read the flags before we push into the object,
comment|// otherwise we'll get the flags for the first element in the object.
name|QPpsAttribute
operator|::
name|Flags
name|flags
init|=
name|readFlags
argument_list|(
name|decoder
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|decoderPush
argument_list|(
name|decoder
argument_list|)
condition|)
return|return
name|QPpsAttribute
argument_list|()
return|;
name|bool
name|ok
init|=
literal|false
decl_stmt|;
name|T
name|attributeContainer
init|=
name|decodeFunction
argument_list|(
name|decoder
argument_list|,
operator|&
name|ok
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ok
condition|)
return|return
name|QPpsAttribute
argument_list|()
return|;
name|QPpsAttribute
name|returnVal
init|=
name|QPpsAttributePrivate
operator|::
name|createPpsAttribute
argument_list|(
name|attributeContainer
argument_list|,
name|flags
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|decoderPop
argument_list|(
name|decoder
argument_list|)
condition|)
return|return
name|QPpsAttribute
argument_list|()
return|;
return|return
name|returnVal
return|;
block|}
end_function
begin_function
DECL|function|decodeData
name|QPpsAttribute
name|QPpsObjectPrivate
operator|::
name|decodeData
parameter_list|(
name|pps_decoder_t
modifier|*
name|decoder
parameter_list|)
block|{
name|pps_node_type_t
name|nodeType
init|=
name|pps_decoder_type
argument_list|(
name|decoder
argument_list|,
literal|0
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|nodeType
condition|)
block|{
case|case
name|PPS_TYPE_BOOL
case|:
return|return
name|decodeBool
argument_list|(
name|decoder
argument_list|)
return|;
case|case
name|PPS_TYPE_NUMBER
case|:
return|return
name|decodeNumber
argument_list|(
name|decoder
argument_list|)
return|;
case|case
name|PPS_TYPE_STRING
case|:
return|return
name|decodeString
argument_list|(
name|decoder
argument_list|)
return|;
case|case
name|PPS_TYPE_ARRAY
case|:
return|return
name|decodeNestedData
argument_list|(
operator|&
name|QPpsObjectPrivate
operator|::
name|decodeArray
argument_list|,
name|decoder
argument_list|)
return|;
case|case
name|PPS_TYPE_OBJECT
case|:
return|return
name|decodeNestedData
argument_list|(
operator|&
name|QPpsObjectPrivate
operator|::
name|decodeObject
argument_list|,
name|decoder
argument_list|)
return|;
case|case
name|PPS_TYPE_DELETED
case|:
block|{
comment|// This should create an attribute with the flags set to PpsAttribute::Deleted.
comment|// However, we need to create a valid QPpsAttribute while doing so. To do this,
comment|// I'll create an empty map as a sentinel. Note that the readFlags() call with produce
comment|// the correct set of flags. While I suspect that there will never be any other flags
comment|// set in conjunction with this one, I'd rather not be surprised later.
name|QPpsAttributeMap
name|emptyMap
decl_stmt|;
name|QPpsAttribute
operator|::
name|Flags
name|flags
init|=
name|readFlags
argument_list|(
name|decoder
argument_list|)
decl_stmt|;
name|QPpsAttribute
name|returnVal
init|=
name|QPpsAttributePrivate
operator|::
name|createPpsAttribute
argument_list|(
name|emptyMap
argument_list|,
name|flags
argument_list|)
decl_stmt|;
return|return
name|returnVal
return|;
block|}
case|case
name|PPS_TYPE_NULL
case|:
case|case
name|PPS_TYPE_NONE
case|:
case|case
name|PPS_TYPE_UNKNOWN
case|:
default|default:
name|qWarning
argument_list|()
operator|<<
literal|"QPpsObjectPrivate::decodeData: invalid pps_node_type"
expr_stmt|;
return|return
name|QPpsAttribute
argument_list|()
return|;
block|}
block|}
end_function
begin_function
DECL|function|decodeArray
name|QPpsAttributeList
name|QPpsObjectPrivate
operator|::
name|decodeArray
parameter_list|(
name|pps_decoder_t
modifier|*
name|decoder
parameter_list|,
name|bool
modifier|*
name|ok
parameter_list|)
block|{
name|QPpsAttributeList
name|list
decl_stmt|;
name|int
name|length
init|=
name|pps_decoder_length
argument_list|(
name|decoder
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
comment|// Force movement to a specific index.
name|pps_decoder_error_t
name|error
init|=
name|pps_decoder_goto_index
argument_list|(
name|decoder
argument_list|,
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|!=
name|PPS_DECODER_OK
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"QPpsObjectPrivate::decodeArray: pps_decoder_goto_index failed"
expr_stmt|;
operator|*
name|ok
operator|=
literal|false
expr_stmt|;
return|return
name|QPpsAttributeList
argument_list|()
return|;
block|}
name|QPpsAttribute
name|ppsAttribute
init|=
name|decodeData
argument_list|(
name|decoder
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ppsAttribute
operator|.
name|isValid
argument_list|()
condition|)
block|{
operator|*
name|ok
operator|=
literal|false
expr_stmt|;
return|return
name|QPpsAttributeList
argument_list|()
return|;
block|}
name|list
operator|<<
name|ppsAttribute
expr_stmt|;
block|}
operator|*
name|ok
operator|=
literal|true
expr_stmt|;
return|return
name|list
return|;
block|}
end_function
begin_function
DECL|function|decodeObject
name|QPpsAttributeMap
name|QPpsObjectPrivate
operator|::
name|decodeObject
parameter_list|(
name|pps_decoder_t
modifier|*
name|decoder
parameter_list|,
name|bool
modifier|*
name|ok
parameter_list|)
block|{
name|QPpsAttributeMap
name|map
decl_stmt|;
name|int
name|length
init|=
name|pps_decoder_length
argument_list|(
name|decoder
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
comment|// Force movement to a specific index.
name|pps_decoder_error_t
name|error
init|=
name|pps_decoder_goto_index
argument_list|(
name|decoder
argument_list|,
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|!=
name|PPS_DECODER_OK
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"QPpsObjectPrivate::decodeObject: pps_decoder_goto_index failed"
expr_stmt|;
operator|*
name|ok
operator|=
literal|false
expr_stmt|;
return|return
name|QPpsAttributeMap
argument_list|()
return|;
block|}
name|QString
name|name
init|=
name|QString
operator|::
name|fromUtf8
argument_list|(
name|pps_decoder_name
argument_list|(
name|decoder
argument_list|)
argument_list|)
decl_stmt|;
name|QPpsAttribute
name|ppsAttribute
init|=
name|decodeData
argument_list|(
name|decoder
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ppsAttribute
operator|.
name|isValid
argument_list|()
condition|)
block|{
operator|*
name|ok
operator|=
literal|false
expr_stmt|;
return|return
name|QPpsAttributeMap
argument_list|()
return|;
block|}
name|map
index|[
name|name
index|]
operator|=
name|ppsAttribute
expr_stmt|;
block|}
operator|*
name|ok
operator|=
literal|true
expr_stmt|;
return|return
name|map
return|;
block|}
end_function
begin_function
DECL|function|variantFromPpsAttribute
name|QVariant
name|QPpsObjectPrivate
operator|::
name|variantFromPpsAttribute
parameter_list|(
specifier|const
name|QPpsAttribute
modifier|&
name|attribute
parameter_list|)
block|{
switch|switch
condition|(
name|attribute
operator|.
name|type
argument_list|()
condition|)
block|{
case|case
name|QPpsAttribute
operator|::
name|Number
case|:
switch|switch
condition|(
name|attribute
operator|.
name|toVariant
argument_list|()
operator|.
name|type
argument_list|()
condition|)
block|{
case|case
name|QVariant
operator|::
name|Int
case|:
return|return
name|attribute
operator|.
name|toInt
argument_list|()
return|;
case|case
name|QVariant
operator|::
name|LongLong
case|:
return|return
name|attribute
operator|.
name|toLongLong
argument_list|()
return|;
default|default:
return|return
name|attribute
operator|.
name|toDouble
argument_list|()
return|;
block|}
break|break;
case|case
name|QPpsAttribute
operator|::
name|Bool
case|:
return|return
name|attribute
operator|.
name|toBool
argument_list|()
return|;
case|case
name|QPpsAttribute
operator|::
name|String
case|:
return|return
name|attribute
operator|.
name|toString
argument_list|()
return|;
case|case
name|QPpsAttribute
operator|::
name|Array
case|:
block|{
name|QVariantList
name|variantList
decl_stmt|;
specifier|const
specifier|auto
name|attrs
init|=
name|attribute
operator|.
name|toList
argument_list|()
decl_stmt|;
for|for
control|(
specifier|const
name|QPpsAttribute
modifier|&
name|attr
range|:
name|attrs
control|)
block|{
name|QVariant
name|variant
init|=
name|variantFromPpsAttribute
argument_list|(
name|attr
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|variant
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|QVariantList
argument_list|()
return|;
name|variantList
operator|<<
name|variant
expr_stmt|;
block|}
return|return
name|variantList
return|;
block|}
case|case
name|QPpsAttribute
operator|::
name|Object
case|:
return|return
name|variantMapFromPpsAttributeMap
argument_list|(
name|attribute
operator|.
name|toMap
argument_list|()
argument_list|)
return|;
case|case
name|QPpsAttribute
operator|::
name|None
case|:
default|default:
name|qWarning
argument_list|()
operator|<<
literal|"QPpsObjectPrivate::variantFromPpsAttribute: invalid attribute parameter"
expr_stmt|;
return|return
name|QVariant
argument_list|()
return|;
block|}
block|}
end_function
begin_function
DECL|function|encode
name|QByteArray
name|QPpsObjectPrivate
operator|::
name|encode
parameter_list|(
specifier|const
name|QVariantMap
modifier|&
name|ppsData
parameter_list|,
name|bool
modifier|*
name|ok
parameter_list|)
block|{
name|pps_encoder_t
name|encoder
decl_stmt|;
name|pps_encoder_initialize
argument_list|(
operator|&
name|encoder
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|encodeObject
argument_list|(
operator|&
name|encoder
argument_list|,
name|ppsData
argument_list|,
name|ok
argument_list|)
expr_stmt|;
specifier|const
name|char
modifier|*
name|rawData
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|*
name|ok
condition|)
block|{
comment|// rawData points to a memory owned by encoder.
comment|// The memory will be freed when pps_encoder_cleanup is called.
name|rawData
operator|=
name|pps_encoder_buffer
argument_list|(
operator|&
name|encoder
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|rawData
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"QPpsObjectPrivate::encode: pps_encoder_buffer failed"
expr_stmt|;
operator|*
name|ok
operator|=
literal|false
expr_stmt|;
block|}
block|}
name|pps_encoder_cleanup
argument_list|(
operator|&
name|encoder
argument_list|)
expr_stmt|;
return|return
name|QByteArray
argument_list|(
name|rawData
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|encodeData
name|void
name|QPpsObjectPrivate
operator|::
name|encodeData
parameter_list|(
name|pps_encoder_t
modifier|*
name|encoder
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|data
parameter_list|,
name|bool
modifier|*
name|ok
parameter_list|)
block|{
name|QString
name|errorFunction
decl_stmt|;
name|pps_encoder_error_t
name|error
init|=
name|PPS_ENCODER_OK
decl_stmt|;
switch|switch
condition|(
name|data
operator|.
name|type
argument_list|()
condition|)
block|{
case|case
name|QVariant
operator|::
name|Bool
case|:
name|error
operator|=
name|pps_encoder_add_bool
argument_list|(
name|encoder
argument_list|,
name|name
argument_list|,
name|data
operator|.
name|toBool
argument_list|()
argument_list|)
expr_stmt|;
name|errorFunction
operator|=
name|QStringLiteral
argument_list|(
literal|"pps_encoder_add_bool"
argument_list|)
expr_stmt|;
break|break;
comment|// We want to support encoding uint even though libpps doesn't support it directly.
comment|// We can't encode uint as an int since that will lose precision (e.g. 2^31+1 can't be
comment|// encoded that way). However, we can convert uint to double without losing precision.
comment|// QVariant.toDouble() conveniently takes care of the conversion for us.
case|case
name|QVariant
operator|::
name|UInt
case|:
case|case
name|QVariant
operator|::
name|Double
case|:
name|error
operator|=
name|pps_encoder_add_double
argument_list|(
name|encoder
argument_list|,
name|name
argument_list|,
name|data
operator|.
name|toDouble
argument_list|()
argument_list|)
expr_stmt|;
name|errorFunction
operator|=
name|QStringLiteral
argument_list|(
literal|"pps_encoder_add_double"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|Int
case|:
name|error
operator|=
name|pps_encoder_add_int
argument_list|(
name|encoder
argument_list|,
name|name
argument_list|,
name|data
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
name|errorFunction
operator|=
name|QStringLiteral
argument_list|(
literal|"pps_encoder_add_int"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|LongLong
case|:
name|error
operator|=
name|pps_encoder_add_int64
argument_list|(
name|encoder
argument_list|,
name|name
argument_list|,
name|data
operator|.
name|toLongLong
argument_list|()
argument_list|)
expr_stmt|;
name|errorFunction
operator|=
name|QStringLiteral
argument_list|(
literal|"pps_encoder_add_int64"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|String
case|:
name|error
operator|=
name|pps_encoder_add_string
argument_list|(
name|encoder
argument_list|,
name|name
argument_list|,
name|data
operator|.
name|toString
argument_list|()
operator|.
name|toUtf8
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|errorFunction
operator|=
name|QStringLiteral
argument_list|(
literal|"pps_encoder_add_string"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|List
case|:
name|error
operator|=
name|pps_encoder_start_array
argument_list|(
name|encoder
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|errorFunction
operator|=
name|QStringLiteral
argument_list|(
literal|"pps_encoder_start_array"
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
operator|==
name|PPS_ENCODER_OK
condition|)
block|{
name|encodeArray
argument_list|(
name|encoder
argument_list|,
name|data
operator|.
name|toList
argument_list|()
argument_list|,
name|ok
argument_list|)
expr_stmt|;
name|error
operator|=
name|pps_encoder_end_array
argument_list|(
name|encoder
argument_list|)
expr_stmt|;
name|errorFunction
operator|=
name|QStringLiteral
argument_list|(
literal|"pps_encoder_end_array"
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QVariant
operator|::
name|Map
case|:
name|error
operator|=
name|pps_encoder_start_object
argument_list|(
name|encoder
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|errorFunction
operator|=
name|QStringLiteral
argument_list|(
literal|"pps_encoder_start_object"
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
operator|==
name|PPS_ENCODER_OK
condition|)
block|{
name|encodeObject
argument_list|(
name|encoder
argument_list|,
name|data
operator|.
name|toMap
argument_list|()
argument_list|,
name|ok
argument_list|)
expr_stmt|;
name|error
operator|=
name|pps_encoder_end_object
argument_list|(
name|encoder
argument_list|)
expr_stmt|;
name|errorFunction
operator|=
name|QStringLiteral
argument_list|(
literal|"pps_encoder_end_object"
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QVariant
operator|::
name|Invalid
case|:
name|error
operator|=
name|pps_encoder_add_null
argument_list|(
name|encoder
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|errorFunction
operator|=
name|QStringLiteral
argument_list|(
literal|"pps_encoder_add_null"
argument_list|)
expr_stmt|;
break|break;
default|default:
name|qWarning
argument_list|()
operator|<<
literal|"QPpsObjectPrivate::encodeData: the type of the parameter data is invalid"
expr_stmt|;
operator|*
name|ok
operator|=
literal|false
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|error
operator|!=
name|PPS_ENCODER_OK
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"QPpsObjectPrivate::encodeData: "
operator|<<
name|errorFunction
operator|<<
literal|" failed"
expr_stmt|;
operator|*
name|ok
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
operator|*
name|ok
operator|=
literal|true
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|encodeArray
name|void
name|QPpsObjectPrivate
operator|::
name|encodeArray
parameter_list|(
name|pps_encoder_t
modifier|*
name|encoder
parameter_list|,
specifier|const
name|QVariantList
modifier|&
name|data
parameter_list|,
name|bool
modifier|*
name|ok
parameter_list|)
block|{
for|for
control|(
name|QVariantList
operator|::
name|const_iterator
name|it
init|=
name|data
operator|.
name|constBegin
argument_list|()
init|;
name|it
operator|!=
name|data
operator|.
name|constEnd
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|encodeData
argument_list|(
name|encoder
argument_list|,
literal|0
argument_list|,
operator|*
name|it
argument_list|,
name|ok
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
operator|*
name|ok
operator|)
condition|)
return|return;
block|}
comment|// if the passed data is empty, nothing went wrong and ok is set to true
operator|*
name|ok
operator|=
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|encodeObject
name|void
name|QPpsObjectPrivate
operator|::
name|encodeObject
parameter_list|(
name|pps_encoder_t
modifier|*
name|encoder
parameter_list|,
specifier|const
name|QVariantMap
modifier|&
name|data
parameter_list|,
name|bool
modifier|*
name|ok
parameter_list|)
block|{
for|for
control|(
name|QVariantMap
operator|::
name|const_iterator
name|it
init|=
name|data
operator|.
name|constBegin
argument_list|()
init|;
name|it
operator|!=
name|data
operator|.
name|constEnd
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|encodeData
argument_list|(
name|encoder
argument_list|,
name|it
operator|.
name|key
argument_list|()
operator|.
name|toUtf8
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|it
operator|.
name|value
argument_list|()
argument_list|,
name|ok
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
operator|*
name|ok
operator|)
condition|)
return|return;
block|}
comment|// if the passed data is empty, nothing went wrong and ok is set to true
operator|*
name|ok
operator|=
literal|true
expr_stmt|;
block|}
end_function
begin_comment
comment|///////////////////////////////////////////////////////////////////////////////
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// QPpsObjectPrivate
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|///////////////////////////////////////////////////////////////////////////////
end_comment
begin_constructor
DECL|function|QPpsObject
name|QPpsObject
operator|::
name|QPpsObject
parameter_list|(
specifier|const
name|QString
modifier|&
name|path
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|d_ptr
argument_list|(
operator|new
name|QPpsObjectPrivate
argument_list|(
name|path
argument_list|)
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QPpsObject
name|QPpsObject
operator|::
name|~
name|QPpsObject
parameter_list|()
block|{
comment|// RAII - ensure file gets closed
if|if
condition|(
name|isOpen
argument_list|()
condition|)
name|close
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|error
name|int
name|QPpsObject
operator|::
name|error
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPpsObject
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|error
return|;
block|}
end_function
begin_function
DECL|function|errorString
name|QString
name|QPpsObject
operator|::
name|errorString
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPpsObject
argument_list|)
expr_stmt|;
return|return
name|qt_error_string
argument_list|(
name|d
operator|->
name|error
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|isReadyReadEnabled
name|bool
name|QPpsObject
operator|::
name|isReadyReadEnabled
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPpsObject
argument_list|)
expr_stmt|;
comment|// query state of read ready signal
return|return
name|d
operator|->
name|readyReadEnabled
return|;
block|}
end_function
begin_function
DECL|function|setReadyReadEnabled
name|void
name|QPpsObject
operator|::
name|setReadyReadEnabled
parameter_list|(
name|bool
name|enable
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPpsObject
argument_list|)
expr_stmt|;
comment|// toggle whether socket notifier will emit a signal on read ready
name|d
operator|->
name|readyReadEnabled
operator|=
name|enable
expr_stmt|;
if|if
condition|(
name|isOpen
argument_list|()
condition|)
name|d
operator|->
name|notifier
operator|->
name|setEnabled
argument_list|(
name|enable
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isBlocking
name|bool
name|QPpsObject
operator|::
name|isBlocking
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPpsObject
argument_list|)
expr_stmt|;
comment|// reset last error
name|d
operator|->
name|error
operator|=
name|EOK
expr_stmt|;
comment|// abort if file not open
if|if
condition|(
operator|!
name|isOpen
argument_list|()
condition|)
block|{
name|d
operator|->
name|error
operator|=
name|EBADF
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// query file status flags
name|int
name|flags
init|=
name|fcntl
argument_list|(
name|d
operator|->
name|fd
argument_list|,
name|F_GETFL
argument_list|)
decl_stmt|;
if|if
condition|(
name|flags
operator|==
operator|-
literal|1
condition|)
block|{
name|d
operator|->
name|error
operator|=
name|errno
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// check if non-blocking flag is unset
return|return
operator|(
operator|(
name|flags
operator|&
name|O_NONBLOCK
operator|)
operator|!=
name|O_NONBLOCK
operator|)
return|;
block|}
end_function
begin_function
DECL|function|setBlocking
name|bool
name|QPpsObject
operator|::
name|setBlocking
parameter_list|(
name|bool
name|enable
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPpsObject
argument_list|)
expr_stmt|;
comment|// reset last error
name|d
operator|->
name|error
operator|=
name|EOK
expr_stmt|;
comment|// abort if file not open
if|if
condition|(
operator|!
name|isOpen
argument_list|()
condition|)
block|{
name|d
operator|->
name|error
operator|=
name|EBADF
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// query file status flags
name|int
name|flags
init|=
name|fcntl
argument_list|(
name|d
operator|->
name|fd
argument_list|,
name|F_GETFL
argument_list|)
decl_stmt|;
if|if
condition|(
name|flags
operator|==
operator|-
literal|1
condition|)
block|{
name|d
operator|->
name|error
operator|=
name|errno
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// configure non-blocking flag
if|if
condition|(
name|enable
condition|)
name|flags
operator|&=
operator|~
name|O_NONBLOCK
expr_stmt|;
else|else
name|flags
operator||=
name|O_NONBLOCK
expr_stmt|;
comment|// update file status flags
name|flags
operator|=
name|fcntl
argument_list|(
name|d
operator|->
name|fd
argument_list|,
name|F_SETFL
argument_list|,
name|flags
argument_list|)
expr_stmt|;
if|if
condition|(
name|flags
operator|==
operator|-
literal|1
condition|)
block|{
name|d
operator|->
name|error
operator|=
name|errno
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|isOpen
name|bool
name|QPpsObject
operator|::
name|isOpen
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPpsObject
argument_list|)
expr_stmt|;
return|return
operator|(
name|d
operator|->
name|fd
operator|!=
operator|-
literal|1
operator|)
return|;
block|}
end_function
begin_function
DECL|function|open
name|bool
name|QPpsObject
operator|::
name|open
parameter_list|(
name|QPpsObject
operator|::
name|OpenModes
name|mode
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPpsObject
argument_list|)
expr_stmt|;
comment|// reset last error
name|d
operator|->
name|error
operator|=
name|EOK
expr_stmt|;
comment|// abort if file already open
if|if
condition|(
name|isOpen
argument_list|()
condition|)
block|{
name|d
operator|->
name|error
operator|=
name|EBUSY
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// convert pps flags to open flags
name|int
name|oflags
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|(
name|mode
operator|&
name|QPpsObject
operator|::
name|Publish
operator|)
operator|&&
operator|(
name|mode
operator|&
name|QPpsObject
operator|::
name|Subscribe
operator|)
condition|)
name|oflags
operator||=
name|O_RDWR
expr_stmt|;
elseif|else
if|if
condition|(
name|mode
operator|&
name|QPpsObject
operator|::
name|Publish
condition|)
name|oflags
operator||=
name|O_WRONLY
expr_stmt|;
elseif|else
if|if
condition|(
name|mode
operator|&
name|QPpsObject
operator|::
name|Subscribe
condition|)
name|oflags
operator||=
name|O_RDONLY
expr_stmt|;
if|if
condition|(
name|mode
operator|&
name|QPpsObject
operator|::
name|Create
condition|)
name|oflags
operator||=
name|O_CREAT
operator||
name|O_EXCL
expr_stmt|;
if|if
condition|(
name|mode
operator|&
name|QPpsObject
operator|::
name|DeleteContents
condition|)
name|oflags
operator||=
name|O_TRUNC
expr_stmt|;
comment|// open pps file
name|d
operator|->
name|fd
operator|=
name|qt_safe_open
argument_list|(
name|d
operator|->
name|path
operator|.
name|toUtf8
argument_list|()
operator|.
name|data
argument_list|()
argument_list|,
name|oflags
argument_list|,
literal|0666
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|fd
operator|==
operator|-
literal|1
condition|)
block|{
name|d
operator|->
name|error
operator|=
name|errno
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// wire up socket notifier to know when reads are ready
name|d
operator|->
name|notifier
operator|=
operator|new
name|QSocketNotifier
argument_list|(
name|d
operator|->
name|fd
argument_list|,
name|QSocketNotifier
operator|::
name|Read
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|d
operator|->
name|notifier
operator|->
name|setEnabled
argument_list|(
name|d
operator|->
name|readyReadEnabled
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|d
operator|->
name|notifier
argument_list|,
operator|&
name|QSocketNotifier
operator|::
name|activated
argument_list|,
name|this
argument_list|,
operator|&
name|QPpsObject
operator|::
name|readyRead
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|close
name|bool
name|QPpsObject
operator|::
name|close
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QPpsObject
argument_list|)
expr_stmt|;
comment|// reset last error
name|d
operator|->
name|error
operator|=
name|EOK
expr_stmt|;
comment|// abort if file not open
if|if
condition|(
operator|!
name|isOpen
argument_list|()
condition|)
block|{
name|d
operator|->
name|error
operator|=
name|EBADF
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// shutdown socket notifier
operator|delete
name|d
operator|->
name|notifier
expr_stmt|;
name|d
operator|->
name|notifier
operator|=
literal|0
expr_stmt|;
comment|// close pps file
specifier|const
name|int
name|result
init|=
name|qt_safe_close
argument_list|(
name|d
operator|->
name|fd
argument_list|)
decl_stmt|;
name|d
operator|->
name|fd
operator|=
operator|-
literal|1
expr_stmt|;
comment|// check success of operation
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
name|d
operator|->
name|error
operator|=
name|errno
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|read
name|QByteArray
name|QPpsObject
operator|::
name|read
parameter_list|(
name|bool
modifier|*
name|ok
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPpsObject
argument_list|)
expr_stmt|;
comment|// reset last error
name|d
operator|->
name|error
operator|=
name|EOK
expr_stmt|;
comment|// abort if file not open
if|if
condition|(
operator|!
name|isOpen
argument_list|()
condition|)
block|{
name|d
operator|->
name|error
operator|=
name|EBADF
expr_stmt|;
name|safeAssign
argument_list|(
name|ok
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|QByteArray
argument_list|()
return|;
block|}
specifier|const
name|int
name|maxSize
init|=
name|ppsMaxSize
operator|->
name|value
decl_stmt|;
if|if
condition|(
name|maxSize
operator|==
operator|-
literal|1
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"QPpsObject::read: maxSize is equal to -1"
expr_stmt|;
name|safeAssign
argument_list|(
name|ok
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|QByteArray
argument_list|()
return|;
block|}
name|QByteArray
name|byteArray
decl_stmt|;
name|byteArray
operator|.
name|resize
argument_list|(
name|maxSize
argument_list|)
expr_stmt|;
comment|// resize doesn't initialize the data
specifier|const
name|int
name|result
init|=
name|qt_safe_read
argument_list|(
name|d
operator|->
name|fd
argument_list|,
name|byteArray
operator|.
name|data
argument_list|()
argument_list|,
name|byteArray
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
operator|-
literal|1
condition|)
block|{
name|d
operator|->
name|error
operator|=
name|errno
expr_stmt|;
name|qWarning
argument_list|()
operator|<<
literal|"QPpsObject::read failed to read pps data, error "
operator|<<
name|errorString
argument_list|()
expr_stmt|;
name|safeAssign
argument_list|(
name|ok
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|QByteArray
argument_list|()
return|;
comment|// Specifically return a default-constructed QByteArray.
block|}
if|if
condition|(
name|result
operator|==
literal|0
condition|)
block|{
comment|// normalize the behavior of read() when no data is ready so a pps object
comment|// put in non-blocking mode via opening w/o wait (read returns 0) looks
comment|// the same as a pps object put in non-blocking mode by setting O_NONBLOCK
comment|// (read returns EAGAIN)
name|d
operator|->
name|error
operator|=
name|EAGAIN
expr_stmt|;
name|safeAssign
argument_list|(
name|ok
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|QByteArray
argument_list|()
return|;
comment|// Specifically return a default-constructed QByteArray.
block|}
comment|// resize byte array to amount actually read
name|byteArray
operator|.
name|resize
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|safeAssign
argument_list|(
name|ok
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|byteArray
return|;
block|}
end_function
begin_function
DECL|function|write
name|bool
name|QPpsObject
operator|::
name|write
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|byteArray
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPpsObject
argument_list|)
expr_stmt|;
comment|// reset last error
name|d
operator|->
name|error
operator|=
name|EOK
expr_stmt|;
comment|// abort if file not open
if|if
condition|(
operator|!
name|isOpen
argument_list|()
condition|)
block|{
name|d
operator|->
name|error
operator|=
name|EBADF
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// write entire byte array to pps file
specifier|const
name|int
name|result
init|=
name|qt_safe_write
argument_list|(
name|d
operator|->
name|fd
argument_list|,
name|byteArray
operator|.
name|data
argument_list|()
argument_list|,
name|byteArray
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
operator|-
literal|1
condition|)
name|d
operator|->
name|error
operator|=
name|errno
expr_stmt|;
return|return
operator|(
name|result
operator|==
name|byteArray
operator|.
name|size
argument_list|()
operator|)
return|;
block|}
end_function
begin_function
DECL|function|writeMessage
name|int
name|QPpsObject
operator|::
name|writeMessage
parameter_list|(
specifier|const
name|QString
modifier|&
name|msg
parameter_list|,
specifier|const
name|QVariantMap
modifier|&
name|dat
parameter_list|)
block|{
comment|// Treat empty msg as an encoding error
if|if
condition|(
name|msg
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
name|bool
name|ok
decl_stmt|;
name|QByteArray
name|byteArray
init|=
name|encodeMessage
argument_list|(
name|msg
argument_list|,
name|dat
argument_list|,
operator|&
name|ok
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ok
condition|)
return|return
operator|-
literal|1
return|;
name|ok
operator|=
name|write
argument_list|(
name|byteArray
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ok
condition|)
return|return
name|error
argument_list|()
return|;
return|return
name|EOK
return|;
block|}
end_function
begin_function
DECL|function|writeMessage
name|int
name|QPpsObject
operator|::
name|writeMessage
parameter_list|(
specifier|const
name|QString
modifier|&
name|msg
parameter_list|,
specifier|const
name|QString
modifier|&
name|id
parameter_list|,
specifier|const
name|QVariantMap
modifier|&
name|dat
parameter_list|)
block|{
comment|// Treat empty msg or id as an encoding error
if|if
condition|(
name|msg
operator|.
name|isEmpty
argument_list|()
operator|||
name|id
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
name|bool
name|ok
decl_stmt|;
name|QByteArray
name|byteArray
init|=
name|encodeMessage
argument_list|(
name|msg
argument_list|,
name|id
argument_list|,
name|dat
argument_list|,
operator|&
name|ok
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ok
condition|)
return|return
operator|-
literal|1
return|;
name|ok
operator|=
name|write
argument_list|(
name|byteArray
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ok
condition|)
return|return
name|error
argument_list|()
return|;
return|return
name|EOK
return|;
block|}
end_function
begin_function
DECL|function|remove
name|bool
name|QPpsObject
operator|::
name|remove
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QPpsObject
argument_list|)
expr_stmt|;
comment|// reset last error
name|d
operator|->
name|error
operator|=
name|EOK
expr_stmt|;
comment|// delete pps file
specifier|const
name|int
name|result
init|=
name|unlink
argument_list|(
name|d
operator|->
name|path
operator|.
name|toUtf8
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
decl_stmt|;
comment|// check success of operation
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
name|d
operator|->
name|error
operator|=
name|errno
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|// static
end_comment
begin_function
DECL|function|decode
name|QVariantMap
name|QPpsObject
operator|::
name|decode
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|rawData
parameter_list|,
name|bool
modifier|*
name|ok
parameter_list|)
block|{
name|QPpsAttributeMap
name|mapData
init|=
name|decodeWithFlags
argument_list|(
name|rawData
argument_list|,
literal|0
argument_list|,
name|ok
argument_list|)
decl_stmt|;
comment|// If *ok is false, then mapData is empty, so the resulting QVariantMap
comment|// will also be empty, as desired.
return|return
name|QPpsObjectPrivate
operator|::
name|variantMapFromPpsAttributeMap
argument_list|(
name|mapData
argument_list|)
return|;
block|}
end_function
begin_comment
comment|// static
end_comment
begin_function
DECL|function|decodeWithFlags
name|QPpsAttributeMap
name|QPpsObject
operator|::
name|decodeWithFlags
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|rawData
parameter_list|,
name|bool
modifier|*
name|ok
parameter_list|)
block|{
return|return
name|QPpsObject
operator|::
name|decodeWithFlags
argument_list|(
name|rawData
argument_list|,
literal|0
argument_list|,
name|ok
argument_list|)
return|;
block|}
end_function
begin_comment
comment|// static
end_comment
begin_function
DECL|function|decodeWithFlags
name|QPpsAttributeMap
name|QPpsObject
operator|::
name|decodeWithFlags
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|rawData
parameter_list|,
name|QPpsAttribute
modifier|*
name|objectAttribute
parameter_list|,
name|bool
modifier|*
name|ok
parameter_list|)
block|{
name|safeAssign
argument_list|(
name|ok
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|bool
name|success
init|=
literal|false
decl_stmt|;
name|QPpsAttributeMap
name|mapData
init|=
name|QPpsObjectPrivate
operator|::
name|decode
argument_list|(
name|rawData
argument_list|,
operator|&
name|success
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|safeAssign
argument_list|(
name|ok
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|QPpsAttributeMap
argument_list|()
return|;
block|}
comment|// The object name is the key of the first element, and the flags of that attribute
comment|// give the status for the object as a whole.
if|if
condition|(
operator|!
name|mapData
operator|.
name|isEmpty
argument_list|()
operator|&&
name|objectAttribute
condition|)
block|{
name|QString
name|extractedName
init|=
name|mapData
operator|.
name|begin
argument_list|()
operator|.
name|key
argument_list|()
decl_stmt|;
name|QPpsAttribute
name|topmostAttribute
init|=
name|mapData
operator|.
name|begin
argument_list|()
operator|.
name|value
argument_list|()
decl_stmt|;
name|QPpsAttribute
operator|::
name|Flags
name|topmostFlags
init|=
name|topmostAttribute
operator|.
name|flags
argument_list|()
decl_stmt|;
name|QPpsAttribute
name|toplevelAttribute
init|=
name|QPpsAttributePrivate
operator|::
name|createPpsAttribute
argument_list|(
name|extractedName
argument_list|,
name|topmostFlags
argument_list|)
decl_stmt|;
operator|*
name|objectAttribute
operator|=
name|toplevelAttribute
expr_stmt|;
block|}
return|return
name|mapData
return|;
block|}
end_function
begin_comment
comment|// static
end_comment
begin_function
DECL|function|encode
name|QByteArray
name|QPpsObject
operator|::
name|encode
parameter_list|(
specifier|const
name|QVariantMap
modifier|&
name|ppsData
parameter_list|,
name|bool
modifier|*
name|ok
parameter_list|)
block|{
name|safeAssign
argument_list|(
name|ok
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|bool
name|success
init|=
literal|false
decl_stmt|;
name|QByteArray
name|byteArray
init|=
name|QPpsObjectPrivate
operator|::
name|encode
argument_list|(
name|ppsData
argument_list|,
operator|&
name|success
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|safeAssign
argument_list|(
name|ok
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|QByteArray
argument_list|()
return|;
block|}
return|return
name|byteArray
return|;
block|}
end_function
begin_comment
comment|// static
end_comment
begin_function
DECL|function|encodeMessage
name|QByteArray
name|QPpsObject
operator|::
name|encodeMessage
parameter_list|(
specifier|const
name|QString
modifier|&
name|msg
parameter_list|,
specifier|const
name|QVariantMap
modifier|&
name|dat
parameter_list|,
name|bool
modifier|*
name|ok
parameter_list|)
block|{
name|safeAssign
argument_list|(
name|ok
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Treat empty msg as an encoding error
if|if
condition|(
name|msg
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|safeAssign
argument_list|(
name|ok
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|QByteArray
argument_list|()
return|;
block|}
name|QVariantMap
name|ppsData
decl_stmt|;
name|ppsData
index|[
name|QStringLiteral
argument_list|(
literal|"msg"
argument_list|)
index|]
operator|=
name|msg
expr_stmt|;
name|ppsData
index|[
name|QStringLiteral
argument_list|(
literal|"dat"
argument_list|)
index|]
operator|=
name|dat
expr_stmt|;
return|return
name|QPpsObject
operator|::
name|encode
argument_list|(
name|ppsData
argument_list|,
name|ok
argument_list|)
return|;
block|}
end_function
begin_comment
comment|// static
end_comment
begin_function
DECL|function|encodeMessage
name|QByteArray
name|QPpsObject
operator|::
name|encodeMessage
parameter_list|(
specifier|const
name|QString
modifier|&
name|msg
parameter_list|,
specifier|const
name|QString
modifier|&
name|id
parameter_list|,
specifier|const
name|QVariantMap
modifier|&
name|dat
parameter_list|,
name|bool
modifier|*
name|ok
parameter_list|)
block|{
name|safeAssign
argument_list|(
name|ok
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Treat empty msg or id as an encoding error
if|if
condition|(
name|msg
operator|.
name|isEmpty
argument_list|()
operator|||
name|id
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|safeAssign
argument_list|(
name|ok
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|QByteArray
argument_list|()
return|;
block|}
name|QVariantMap
name|ppsData
decl_stmt|;
name|ppsData
index|[
name|QStringLiteral
argument_list|(
literal|"msg"
argument_list|)
index|]
operator|=
name|msg
expr_stmt|;
name|ppsData
index|[
name|QStringLiteral
argument_list|(
literal|"id"
argument_list|)
index|]
operator|=
name|id
expr_stmt|;
name|ppsData
index|[
name|QStringLiteral
argument_list|(
literal|"dat"
argument_list|)
index|]
operator|=
name|dat
expr_stmt|;
return|return
name|QPpsObject
operator|::
name|encode
argument_list|(
name|ppsData
argument_list|,
name|ok
argument_list|)
return|;
block|}
end_function
begin_comment
comment|// static
end_comment
begin_function
DECL|function|sendMessage
name|int
name|QPpsObject
operator|::
name|sendMessage
parameter_list|(
specifier|const
name|QString
modifier|&
name|path
parameter_list|,
specifier|const
name|QString
modifier|&
name|message
parameter_list|)
block|{
name|QPpsObject
name|pps
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|bool
name|ok
init|=
name|pps
operator|.
name|open
argument_list|(
name|QPpsObject
operator|::
name|Publish
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ok
condition|)
return|return
name|pps
operator|.
name|error
argument_list|()
return|;
name|ok
operator|=
name|pps
operator|.
name|write
argument_list|(
name|message
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ok
condition|)
return|return
name|pps
operator|.
name|error
argument_list|()
return|;
return|return
name|EOK
return|;
block|}
end_function
begin_comment
comment|// static
end_comment
begin_function
DECL|function|sendMessage
name|int
name|QPpsObject
operator|::
name|sendMessage
parameter_list|(
specifier|const
name|QString
modifier|&
name|path
parameter_list|,
specifier|const
name|QVariantMap
modifier|&
name|message
parameter_list|)
block|{
name|QPpsObject
name|pps
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|bool
name|ok
init|=
name|pps
operator|.
name|open
argument_list|(
name|QPpsObject
operator|::
name|Publish
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ok
condition|)
return|return
name|pps
operator|.
name|error
argument_list|()
return|;
name|QByteArray
name|payload
init|=
name|QPpsObject
operator|::
name|encode
argument_list|(
name|message
argument_list|,
operator|&
name|ok
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ok
condition|)
return|return
operator|-
literal|1
return|;
name|ok
operator|=
name|pps
operator|.
name|write
argument_list|(
name|payload
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ok
condition|)
return|return
name|pps
operator|.
name|error
argument_list|()
return|;
return|return
name|EOK
return|;
block|}
end_function
begin_comment
comment|// static
end_comment
begin_function
DECL|function|sendMessage
name|int
name|QPpsObject
operator|::
name|sendMessage
parameter_list|(
specifier|const
name|QString
modifier|&
name|path
parameter_list|,
specifier|const
name|QString
modifier|&
name|msg
parameter_list|,
specifier|const
name|QVariantMap
modifier|&
name|dat
parameter_list|)
block|{
comment|// Treat empty msg as an encoding error
if|if
condition|(
name|msg
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
name|QPpsObject
name|pps
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|bool
name|ok
init|=
name|pps
operator|.
name|open
argument_list|(
name|QPpsObject
operator|::
name|Publish
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ok
condition|)
return|return
name|pps
operator|.
name|error
argument_list|()
return|;
name|QByteArray
name|payload
init|=
name|QPpsObject
operator|::
name|encodeMessage
argument_list|(
name|msg
argument_list|,
name|dat
argument_list|,
operator|&
name|ok
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ok
condition|)
return|return
operator|-
literal|1
return|;
name|ok
operator|=
name|pps
operator|.
name|write
argument_list|(
name|payload
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ok
condition|)
return|return
name|pps
operator|.
name|error
argument_list|()
return|;
return|return
name|EOK
return|;
block|}
end_function
begin_comment
comment|// static
end_comment
begin_function
DECL|function|sendMessage
name|int
name|QPpsObject
operator|::
name|sendMessage
parameter_list|(
specifier|const
name|QString
modifier|&
name|path
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|ppsData
parameter_list|)
block|{
name|QPpsObject
name|pps
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|bool
name|ok
init|=
name|pps
operator|.
name|open
argument_list|(
name|QPpsObject
operator|::
name|Publish
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ok
condition|)
return|return
name|pps
operator|.
name|error
argument_list|()
return|;
name|ok
operator|=
name|pps
operator|.
name|write
argument_list|(
name|ppsData
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ok
condition|)
return|return
name|pps
operator|.
name|error
argument_list|()
return|;
return|return
name|EOK
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
