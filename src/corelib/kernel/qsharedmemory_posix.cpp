begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 Konstantin Ritt<ritt.ks@gmail.com> ** Copyright (C) 2015 The Qt Company Ltd. ** Copyright (C) 2015 KlarÃ¤lvdalens Datakonsult AB, a KDAB Group company, info@kdab.com, author Tobias Koenig<tobias.koenig@kdab.com> ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qplatformdefs.h"
end_include
begin_include
include|#
directive|include
file|"qsharedmemory.h"
end_include
begin_include
include|#
directive|include
file|"qsharedmemory_p.h"
end_include
begin_include
include|#
directive|include
file|"qsystemsemaphore.h"
end_include
begin_include
include|#
directive|include
file|<qfile.h>
end_include
begin_include
include|#
directive|include
file|<errno.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|QT_POSIX_IPC
end_ifdef
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_SHAREDMEMORY
end_ifndef
begin_include
include|#
directive|include
file|<sys/types.h>
end_include
begin_include
include|#
directive|include
file|<sys/ipc.h>
end_include
begin_include
include|#
directive|include
file|<sys/mman.h>
end_include
begin_include
include|#
directive|include
file|<sys/stat.h>
end_include
begin_include
include|#
directive|include
file|<fcntl.h>
end_include
begin_include
include|#
directive|include
file|<unistd.h>
end_include
begin_include
include|#
directive|include
file|"private/qcore_unix_p.h"
end_include
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|handle
name|int
name|QSharedMemoryPrivate
operator|::
name|handle
parameter_list|()
block|{
comment|// don't allow making handles on empty keys
specifier|const
name|QString
name|safeKey
init|=
name|makePlatformSafeKey
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|safeKey
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|errorString
operator|=
name|QSharedMemory
operator|::
name|tr
argument_list|(
literal|"%1: key is empty"
argument_list|)
operator|.
name|arg
argument_list|(
name|QLatin1String
argument_list|(
literal|"QSharedMemory::handle"
argument_list|)
argument_list|)
expr_stmt|;
name|error
operator|=
name|QSharedMemory
operator|::
name|KeyError
expr_stmt|;
return|return
literal|0
return|;
block|}
return|return
literal|1
return|;
block|}
end_function
begin_function
DECL|function|cleanHandle
name|bool
name|QSharedMemoryPrivate
operator|::
name|cleanHandle
parameter_list|()
block|{
name|qt_safe_close
argument_list|(
name|hand
argument_list|)
expr_stmt|;
name|hand
operator|=
operator|-
literal|1
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|create
name|bool
name|QSharedMemoryPrivate
operator|::
name|create
parameter_list|(
name|int
name|size
parameter_list|)
block|{
if|if
condition|(
operator|!
name|handle
argument_list|()
condition|)
return|return
literal|false
return|;
specifier|const
name|QByteArray
name|shmName
init|=
name|QFile
operator|::
name|encodeName
argument_list|(
name|makePlatformSafeKey
argument_list|(
name|key
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|fd
decl_stmt|;
ifdef|#
directive|ifdef
name|O_CLOEXEC
comment|// First try with O_CLOEXEC flag, if that fails, fall back to normal flags
name|EINTR_LOOP
argument_list|(
name|fd
argument_list|,
operator|::
name|shm_open
argument_list|(
name|shmName
operator|.
name|constData
argument_list|()
argument_list|,
name|O_RDWR
operator||
name|O_CREAT
operator||
name|O_EXCL
operator||
name|O_CLOEXEC
argument_list|,
literal|0600
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|fd
operator|==
operator|-
literal|1
condition|)
name|EINTR_LOOP
argument_list|(
name|fd
argument_list|,
operator|::
name|shm_open
argument_list|(
name|shmName
operator|.
name|constData
argument_list|()
argument_list|,
name|O_RDWR
operator||
name|O_CREAT
operator||
name|O_EXCL
argument_list|,
literal|0600
argument_list|)
argument_list|)
expr_stmt|;
else|#
directive|else
name|EINTR_LOOP
argument_list|(
name|fd
argument_list|,
operator|::
name|shm_open
argument_list|(
name|shmName
operator|.
name|constData
argument_list|()
argument_list|,
name|O_RDWR
operator||
name|O_CREAT
operator||
name|O_EXCL
argument_list|,
literal|0600
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|fd
operator|==
operator|-
literal|1
condition|)
block|{
specifier|const
name|int
name|errorNumber
init|=
name|errno
decl_stmt|;
specifier|const
name|QString
name|function
init|=
name|QLatin1String
argument_list|(
literal|"QSharedMemory::create"
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|errorNumber
condition|)
block|{
case|case
name|ENAMETOOLONG
case|:
case|case
name|EINVAL
case|:
name|errorString
operator|=
name|QSharedMemory
operator|::
name|tr
argument_list|(
literal|"%1: bad name"
argument_list|)
operator|.
name|arg
argument_list|(
name|function
argument_list|)
expr_stmt|;
name|error
operator|=
name|QSharedMemory
operator|::
name|KeyError
expr_stmt|;
break|break;
default|default:
name|setErrorString
argument_list|(
name|function
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
comment|// the size may only be set once
name|int
name|ret
decl_stmt|;
name|EINTR_LOOP
argument_list|(
name|ret
argument_list|,
name|QT_FTRUNCATE
argument_list|(
name|fd
argument_list|,
name|size
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
operator|==
operator|-
literal|1
condition|)
block|{
name|setErrorString
argument_list|(
name|QLatin1String
argument_list|(
literal|"QSharedMemory::create (ftruncate)"
argument_list|)
argument_list|)
expr_stmt|;
name|qt_safe_close
argument_list|(
name|fd
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|qt_safe_close
argument_list|(
name|fd
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|attach
name|bool
name|QSharedMemoryPrivate
operator|::
name|attach
parameter_list|(
name|QSharedMemory
operator|::
name|AccessMode
name|mode
parameter_list|)
block|{
specifier|const
name|QByteArray
name|shmName
init|=
name|QFile
operator|::
name|encodeName
argument_list|(
name|makePlatformSafeKey
argument_list|(
name|key
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|int
name|oflag
init|=
operator|(
name|mode
operator|==
name|QSharedMemory
operator|::
name|ReadOnly
condition|?
name|O_RDONLY
else|:
name|O_RDWR
operator|)
decl_stmt|;
specifier|const
name|mode_t
name|omode
init|=
operator|(
name|mode
operator|==
name|QSharedMemory
operator|::
name|ReadOnly
condition|?
literal|0400
else|:
literal|0600
operator|)
decl_stmt|;
ifdef|#
directive|ifdef
name|O_CLOEXEC
comment|// First try with O_CLOEXEC flag, if that fails, fall back to normal flags
name|EINTR_LOOP
argument_list|(
name|hand
argument_list|,
operator|::
name|shm_open
argument_list|(
name|shmName
operator|.
name|constData
argument_list|()
argument_list|,
name|oflag
operator||
name|O_CLOEXEC
argument_list|,
name|omode
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|hand
operator|==
operator|-
literal|1
condition|)
name|EINTR_LOOP
argument_list|(
name|hand
argument_list|,
operator|::
name|shm_open
argument_list|(
name|shmName
operator|.
name|constData
argument_list|()
argument_list|,
name|oflag
argument_list|,
name|omode
argument_list|)
argument_list|)
expr_stmt|;
else|#
directive|else
name|EINTR_LOOP
argument_list|(
name|hand
argument_list|,
operator|::
name|shm_open
argument_list|(
name|shmName
operator|.
name|constData
argument_list|()
argument_list|,
name|oflag
argument_list|,
name|omode
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|hand
operator|==
operator|-
literal|1
condition|)
block|{
specifier|const
name|int
name|errorNumber
init|=
name|errno
decl_stmt|;
specifier|const
name|QString
name|function
init|=
name|QLatin1String
argument_list|(
literal|"QSharedMemory::attach (shm_open)"
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|errorNumber
condition|)
block|{
case|case
name|ENAMETOOLONG
case|:
case|case
name|EINVAL
case|:
name|errorString
operator|=
name|QSharedMemory
operator|::
name|tr
argument_list|(
literal|"%1: bad name"
argument_list|)
operator|.
name|arg
argument_list|(
name|function
argument_list|)
expr_stmt|;
name|error
operator|=
name|QSharedMemory
operator|::
name|KeyError
expr_stmt|;
break|break;
default|default:
name|setErrorString
argument_list|(
name|function
argument_list|)
expr_stmt|;
block|}
name|hand
operator|=
operator|-
literal|1
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// grab the size
name|QT_STATBUF
name|st
decl_stmt|;
if|if
condition|(
name|QT_FSTAT
argument_list|(
name|hand
argument_list|,
operator|&
name|st
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
name|setErrorString
argument_list|(
name|QLatin1String
argument_list|(
literal|"QSharedMemory::attach (fstat)"
argument_list|)
argument_list|)
expr_stmt|;
name|cleanHandle
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
name|size
operator|=
name|st
operator|.
name|st_size
expr_stmt|;
comment|// grab the memory
specifier|const
name|int
name|mprot
init|=
operator|(
name|mode
operator|==
name|QSharedMemory
operator|::
name|ReadOnly
condition|?
name|PROT_READ
else|:
name|PROT_READ
operator||
name|PROT_WRITE
operator|)
decl_stmt|;
name|memory
operator|=
name|QT_MMAP
argument_list|(
literal|0
argument_list|,
name|size
argument_list|,
name|mprot
argument_list|,
name|MAP_SHARED
argument_list|,
name|hand
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|memory
operator|==
name|MAP_FAILED
operator|||
operator|!
name|memory
condition|)
block|{
name|setErrorString
argument_list|(
name|QLatin1String
argument_list|(
literal|"QSharedMemory::attach (mmap)"
argument_list|)
argument_list|)
expr_stmt|;
name|cleanHandle
argument_list|()
expr_stmt|;
name|memory
operator|=
literal|0
expr_stmt|;
name|size
operator|=
literal|0
expr_stmt|;
return|return
literal|false
return|;
block|}
ifdef|#
directive|ifdef
name|F_ADD_SEALS
comment|// Make sure the shared memory region will not shrink
comment|// otherwise someone could cause SIGBUS on us.
comment|// (see http://lwn.net/Articles/594919/)
name|fcntl
argument_list|(
name|hand
argument_list|,
name|F_ADD_SEALS
argument_list|,
name|F_SEAL_SHRINK
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|detach
name|bool
name|QSharedMemoryPrivate
operator|::
name|detach
parameter_list|()
block|{
comment|// detach from the memory segment
if|if
condition|(
operator|::
name|munmap
argument_list|(
name|memory
argument_list|,
name|size
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
name|setErrorString
argument_list|(
name|QLatin1String
argument_list|(
literal|"QSharedMemory::detach (munmap)"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|memory
operator|=
literal|0
expr_stmt|;
name|size
operator|=
literal|0
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_QNX
comment|// On QNX the st_nlink field of struct stat contains the number of
comment|// active shm_open() connections to the shared memory file, so we
comment|// can use it to automatically clean up the file once the last
comment|// user has detached from it.
comment|// get the number of current attachments
name|int
name|shm_nattch
init|=
literal|0
decl_stmt|;
name|QT_STATBUF
name|st
decl_stmt|;
if|if
condition|(
name|QT_FSTAT
argument_list|(
name|hand
argument_list|,
operator|&
name|st
argument_list|)
operator|==
literal|0
condition|)
block|{
comment|// subtract 2 from linkcount: one for our own open and one for the dir entry
name|shm_nattch
operator|=
name|st
operator|.
name|st_nlink
operator|-
literal|2
expr_stmt|;
block|}
name|cleanHandle
argument_list|()
expr_stmt|;
comment|// if there are no attachments then unlink the shared memory
if|if
condition|(
name|shm_nattch
operator|==
literal|0
condition|)
block|{
specifier|const
name|QByteArray
name|shmName
init|=
name|QFile
operator|::
name|encodeName
argument_list|(
name|makePlatformSafeKey
argument_list|(
name|key
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|::
name|shm_unlink
argument_list|(
name|shmName
operator|.
name|constData
argument_list|()
argument_list|)
operator|==
operator|-
literal|1
operator|&&
name|errno
operator|!=
name|ENOENT
condition|)
name|setErrorString
argument_list|(
name|QLatin1String
argument_list|(
literal|"QSharedMemory::detach (shm_unlink)"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|#
directive|else
comment|// On non-QNX systems (tested Linux and Haiku), the st_nlink field is always 1,
comment|// so we'll simply leak the shared memory files.
name|cleanHandle
argument_list|()
expr_stmt|;
endif|#
directive|endif
return|return
literal|true
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_SHAREDMEMORY
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_POSIX_IPC
end_comment
end_unit
