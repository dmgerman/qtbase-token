begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qcoreapplication.h"
end_include
begin_include
include|#
directive|include
file|"qcoreapplication_p.h"
end_include
begin_include
include|#
directive|include
file|"qstringlist.h"
end_include
begin_include
include|#
directive|include
file|"qt_windows.h"
end_include
begin_include
include|#
directive|include
file|"qvector.h"
end_include
begin_include
include|#
directive|include
file|"qmutex.h"
end_include
begin_include
include|#
directive|include
file|"qfileinfo.h"
end_include
begin_include
include|#
directive|include
file|"qcorecmdlineargs_p.h"
end_include
begin_include
include|#
directive|include
file|<private/qthread_p.h>
end_include
begin_include
include|#
directive|include
file|<ctype.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|usingWinMain
name|bool
name|usingWinMain
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|usingWinMain
comment|// whether the qWinMain() is used or not
end_comment
begin_decl_stmt
DECL|variable|appCmdShow
name|int
name|appCmdShow
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|qWinAppInst
name|Q_CORE_EXPORT
name|HINSTANCE
name|qWinAppInst
parameter_list|()
comment|// get Windows app handle
block|{
return|return
name|GetModuleHandle
argument_list|(
literal|0
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qWinAppPrevInst
name|Q_CORE_EXPORT
name|HINSTANCE
name|qWinAppPrevInst
parameter_list|()
comment|// get Windows prev app handle
block|{
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|qWinAppCmdShow
name|Q_CORE_EXPORT
name|int
name|qWinAppCmdShow
parameter_list|()
comment|// get main window show command
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
return|return
name|appCmdShow
return|;
else|#
directive|else
name|STARTUPINFO
name|startupInfo
decl_stmt|;
name|GetStartupInfo
argument_list|(
operator|&
name|startupInfo
argument_list|)
expr_stmt|;
return|return
operator|(
name|startupInfo
operator|.
name|dwFlags
operator|&
name|STARTF_USESHOWWINDOW
operator|)
condition|?
name|startupInfo
operator|.
name|wShowWindow
else|:
name|SW_SHOWDEFAULT
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|qAppFileName
name|Q_CORE_EXPORT
name|QString
name|qAppFileName
parameter_list|()
comment|// get application file name
block|{
comment|// We do MAX_PATH + 2 here, and request with MAX_PATH + 1, so we can handle all paths
comment|// up to, and including MAX_PATH size perfectly fine with string termination, as well
comment|// as easily detect if the file path is indeed larger than MAX_PATH, in which case we
comment|// need to use the heap instead. This is a work-around, since contrary to what the
comment|// MSDN documentation states, GetModuleFileName sometimes doesn't set the
comment|// ERROR_INSUFFICIENT_BUFFER error number, and we thus cannot rely on this value if
comment|// GetModuleFileName(0, buffer, MAX_PATH) == MAX_PATH.
comment|// GetModuleFileName(0, buffer, MAX_PATH + 1) == MAX_PATH just means we hit the normal
comment|// file path limit, and we handle it normally, if the result is MAX_PATH + 1, we use
comment|// heap (even if the result _might_ be exactly MAX_PATH + 1, but that's ok).
name|wchar_t
name|buffer
index|[
name|MAX_PATH
operator|+
literal|2
index|]
decl_stmt|;
name|DWORD
name|v
init|=
name|GetModuleFileName
argument_list|(
literal|0
argument_list|,
name|buffer
argument_list|,
name|MAX_PATH
operator|+
literal|1
argument_list|)
decl_stmt|;
name|buffer
index|[
name|MAX_PATH
operator|+
literal|1
index|]
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|v
operator|==
literal|0
condition|)
return|return
name|QString
argument_list|()
return|;
elseif|else
if|if
condition|(
name|v
operator|<=
name|MAX_PATH
condition|)
return|return
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|buffer
argument_list|)
return|;
comment|// MAX_PATH sized buffer wasn't large enough to contain the full path, use heap
name|wchar_t
modifier|*
name|b
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|1
decl_stmt|;
name|size_t
name|size
decl_stmt|;
do|do
block|{
operator|++
name|i
expr_stmt|;
name|size
operator|=
name|MAX_PATH
operator|*
name|i
expr_stmt|;
name|b
operator|=
cast|reinterpret_cast
argument_list|<
name|wchar_t
operator|*
argument_list|>
argument_list|(
name|realloc
argument_list|(
name|b
argument_list|,
operator|(
name|size
operator|+
literal|1
operator|)
operator|*
sizeof|sizeof
argument_list|(
name|wchar_t
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|b
condition|)
name|v
operator|=
name|GetModuleFileName
argument_list|(
name|NULL
argument_list|,
name|b
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|b
operator|&&
name|v
operator|==
name|size
condition|)
do|;
if|if
condition|(
name|b
condition|)
operator|*
operator|(
name|b
operator|+
name|size
operator|)
operator|=
literal|0
expr_stmt|;
name|QString
name|res
init|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|b
argument_list|)
decl_stmt|;
name|free
argument_list|(
name|b
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
end_function
begin_function
DECL|function|appName
name|QString
name|QCoreApplicationPrivate
operator|::
name|appName
parameter_list|()
specifier|const
block|{
return|return
name|QFileInfo
argument_list|(
name|qAppFileName
argument_list|()
argument_list|)
operator|.
name|baseName
argument_list|()
return|;
block|}
end_function
begin_class
DECL|class|QWinMsgHandlerCriticalSection
class|class
name|QWinMsgHandlerCriticalSection
block|{
DECL|member|cs
name|CRITICAL_SECTION
name|cs
decl_stmt|;
public|public:
DECL|function|QWinMsgHandlerCriticalSection
name|QWinMsgHandlerCriticalSection
parameter_list|()
block|{
name|InitializeCriticalSection
argument_list|(
operator|&
name|cs
argument_list|)
expr_stmt|;
block|}
DECL|function|~QWinMsgHandlerCriticalSection
name|~
name|QWinMsgHandlerCriticalSection
parameter_list|()
block|{
name|DeleteCriticalSection
argument_list|(
operator|&
name|cs
argument_list|)
expr_stmt|;
block|}
DECL|function|lock
name|void
name|lock
parameter_list|()
block|{
name|EnterCriticalSection
argument_list|(
operator|&
name|cs
argument_list|)
expr_stmt|;
block|}
DECL|function|unlock
name|void
name|unlock
parameter_list|()
block|{
name|LeaveCriticalSection
argument_list|(
operator|&
name|cs
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|qWinMsgHandler
name|Q_CORE_EXPORT
name|void
name|qWinMsgHandler
parameter_list|(
name|QtMsgType
name|t
parameter_list|,
specifier|const
name|char
modifier|*
name|str
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|t
argument_list|)
expr_stmt|;
comment|// OutputDebugString is not threadsafe.
comment|// cannot use QMutex here, because qWarning()s in the QMutex
comment|// implementation may cause this function to recurse
specifier|static
name|QWinMsgHandlerCriticalSection
name|staticCriticalSection
decl_stmt|;
if|if
condition|(
operator|!
name|str
condition|)
name|str
operator|=
literal|"(null)"
expr_stmt|;
name|staticCriticalSection
operator|.
name|lock
argument_list|()
expr_stmt|;
name|QString
name|s
argument_list|(
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|str
argument_list|)
argument_list|)
decl_stmt|;
name|s
operator|+=
name|QLatin1Char
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|OutputDebugString
argument_list|(
operator|(
name|wchar_t
operator|*
operator|)
name|s
operator|.
name|utf16
argument_list|()
argument_list|)
expr_stmt|;
name|staticCriticalSection
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qWinMessageHandler
name|Q_CORE_EXPORT
name|void
name|qWinMessageHandler
parameter_list|(
name|QtMsgType
name|t
parameter_list|,
specifier|const
name|QMessageLogContext
modifier|&
parameter_list|,
specifier|const
name|char
modifier|*
name|str
parameter_list|)
block|{
name|qWinMsgHandler
argument_list|(
name|t
argument_list|,
name|str
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*****************************************************************************   qWinMain() - Initializes Windows. Called from WinMain() in qtmain_win.cpp  *****************************************************************************/
end_comment
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
end_if
begin_decl_stmt
DECL|function|qWinMain
name|Q_CORE_EXPORT
name|void
name|__cdecl
name|qWinMain
argument_list|(
name|HINSTANCE
name|instance
argument_list|,
name|HINSTANCE
name|prevInstance
argument_list|,
name|LPSTR
name|cmdParam
argument_list|,
name|int
name|cmdShow
argument_list|,
name|int
operator|&
name|argc
argument_list|,
name|QVector
argument_list|<
name|char
operator|*
argument_list|>
operator|&
name|argv
argument_list|)
else|#
directive|else
name|Q_CORE_EXPORT
name|void
name|qWinMain
argument_list|(
name|HINSTANCE
name|instance
argument_list|,
name|HINSTANCE
name|prevInstance
argument_list|,
name|LPSTR
name|cmdParam
argument_list|,
name|int
name|cmdShow
argument_list|,
name|int
operator|&
name|argc
argument_list|,
name|QVector
argument_list|<
name|char
operator|*
argument_list|>
operator|&
name|argv
argument_list|)
endif|#
directive|endif
argument_list|{
specifier|static
name|bool
name|already_called
operator|=
literal|false
argument_list|;      if
operator|(
name|already_called
operator|)
block|{
name|qWarning
argument_list|(
literal|"Qt: Internal error: qWinMain should be called only once"
argument_list|)
block|;
return|return;
block|}
name|already_called
operator|=
literal|true
argument_list|;
name|usingWinMain
operator|=
literal|true
argument_list|;
comment|// Install default debug handler
name|qInstallMsgHandler
argument_list|(
name|qWinMsgHandler
argument_list|)
argument_list|;
comment|// Create command line
name|argv
operator|=
name|qWinCmdLine
argument_list|<
name|char
argument_list|>
argument_list|(
name|cmdParam
argument_list|,
name|int
argument_list|(
name|strlen
argument_list|(
name|cmdParam
argument_list|)
argument_list|)
argument_list|,
name|argc
argument_list|)
argument_list|;
name|appCmdShow
operator|=
name|cmdShow
argument_list|;
comment|// Ignore Windows parameters
name|Q_UNUSED
argument_list|(
name|instance
argument_list|)
argument_list|;
name|Q_UNUSED
argument_list|(
name|prevInstance
argument_list|)
argument_list|; }
comment|/*!     The message procedure calls this function for every message     received. Reimplement this function if you want to process window     messages \a msg that are not processed by Qt. If you don't want     the event to be processed by Qt, then return true and set \a result     to the value that the window procedure should return. Otherwise     return false.      It is only directly addressed messages that are filtered. To     handle system wide messages, such as messages from a registered     hot key, you need to install an event filter on the event     dispatcher, which is returned from     QAbstractEventDispatcher::instance(). */
DECL|function|winEventFilter
name|bool
name|QCoreApplication
operator|::
name|winEventFilter
argument_list|(
name|MSG
operator|*
name|msg
argument_list|,
name|long
operator|*
name|result
argument_list|)
comment|// Windows event filter
argument_list|{
name|Q_UNUSED
argument_list|(
name|msg
argument_list|)
argument_list|;
name|Q_UNUSED
argument_list|(
name|result
argument_list|)
argument_list|;     return
literal|false
argument_list|; }
DECL|function|removePostedTimerEvent
name|void
name|QCoreApplicationPrivate
operator|::
name|removePostedTimerEvent
argument_list|(
name|QObject
operator|*
name|object
argument_list|,
name|int
name|timerId
argument_list|)
argument_list|{
name|QThreadData
operator|*
name|data
operator|=
name|object
operator|->
name|d_func
argument_list|()
operator|->
name|threadData
argument_list|;
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|data
operator|->
name|postEventList
operator|.
name|mutex
argument_list|)
argument_list|;     if
operator|(
name|data
operator|->
name|postEventList
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|)
return|return;
end_decl_stmt
begin_for
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|->
name|postEventList
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QPostEvent
modifier|&
name|pe
init|=
name|data
operator|->
name|postEventList
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|pe
operator|.
name|receiver
operator|==
name|object
operator|&&
name|pe
operator|.
name|event
operator|&&
operator|(
name|pe
operator|.
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|Timer
operator|||
name|pe
operator|.
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|ZeroTimerEvent
operator|)
operator|&&
cast|static_cast
argument_list|<
name|QTimerEvent
operator|*
argument_list|>
argument_list|(
name|pe
operator|.
name|event
argument_list|)
operator|->
name|timerId
argument_list|()
operator|==
name|timerId
condition|)
block|{
operator|--
name|pe
operator|.
name|receiver
operator|->
name|d_func
argument_list|()
operator|->
name|postedEvents
expr_stmt|;
name|pe
operator|.
name|event
operator|->
name|posted
operator|=
literal|false
expr_stmt|;
operator|delete
name|pe
operator|.
name|event
expr_stmt|;
cast|const_cast
argument_list|<
name|QPostEvent
operator|&
argument_list|>
argument_list|(
name|pe
argument_list|)
operator|.
name|event
operator|=
literal|0
expr_stmt|;
return|return;
block|}
block|}
end_for
begin_if
unit|}
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_DEBUG_STREAM
argument_list|)
end_if
begin_comment
comment|/*****************************************************************************   Convenience functions for convert WM_* messages into human readable strings,   including a nifty QDebug operator<< for simpel QDebug()<< msg output.  *****************************************************************************/
end_comment
begin_include
unit|QT_BEGIN_INCLUDE_NAMESPACE
include|#
directive|include
file|<windowsx.h>
end_include
begin_include
include|#
directive|include
file|"qdebug.h"
end_include
begin_macro
name|QT_END_INCLUDE_NAMESPACE
end_macro
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|GET_X_LPARAM
argument_list|)
end_if
begin_define
DECL|macro|GET_X_LPARAM
define|#
directive|define
name|GET_X_LPARAM
parameter_list|(
name|lp
parameter_list|)
value|((int)(short)LOWORD(lp))
end_define
begin_define
DECL|macro|GET_Y_LPARAM
define|#
directive|define
name|GET_Y_LPARAM
parameter_list|(
name|lp
parameter_list|)
value|((int)(short)HIWORD(lp))
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|_WIN32_WCE
end_ifdef
begin_ifndef
ifndef|#
directive|ifndef
name|WM_NCACTIVATE
end_ifndef
begin_define
DECL|macro|WM_NCACTIVATE
define|#
directive|define
name|WM_NCACTIVATE
value|0x86
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// The values below should never change. Note that none of the usual
end_comment
begin_comment
comment|// WM_...FIRST& WM_...LAST values are in the list, as they normally have other
end_comment
begin_comment
comment|// WM_... representations
end_comment
begin_struct
DECL|struct|KnownWM
struct|struct
name|KnownWM
block|{
DECL|member|WM
name|uint
name|WM
decl_stmt|;
DECL|member|str
specifier|const
name|char
modifier|*
name|str
decl_stmt|;
block|}
DECL|variable|knownWM
name|knownWM
index|[]
init|=
block|{
block|{
literal|0x0000
block|,
literal|"WM_NULL"
block|}
block|,
block|{
literal|0x0001
block|,
literal|"WM_CREATE"
block|}
block|,
block|{
literal|0x0002
block|,
literal|"WM_DESTROY"
block|}
block|,
block|{
literal|0x0003
block|,
literal|"WM_MOVE"
block|}
block|,
block|{
literal|0x0005
block|,
literal|"WM_SIZE"
block|}
block|,
block|{
literal|0x0006
block|,
literal|"WM_ACTIVATE"
block|}
block|,
block|{
literal|0x0007
block|,
literal|"WM_SETFOCUS"
block|}
block|,
block|{
literal|0x0008
block|,
literal|"WM_KILLFOCUS"
block|}
block|,
block|{
literal|0x000A
block|,
literal|"WM_ENABLE"
block|}
block|,
block|{
literal|0x000B
block|,
literal|"WM_SETREDRAW"
block|}
block|,
block|{
literal|0x000C
block|,
literal|"WM_SETTEXT"
block|}
block|,
block|{
literal|0x000D
block|,
literal|"WM_GETTEXT"
block|}
block|,
block|{
literal|0x000E
block|,
literal|"WM_GETTEXTLENGTH"
block|}
block|,
block|{
literal|0x000F
block|,
literal|"WM_PAINT"
block|}
block|,
block|{
literal|0x0010
block|,
literal|"WM_CLOSE"
block|}
block|,
block|{
literal|0x0011
block|,
literal|"WM_QUERYENDSESSION"
block|}
block|,
block|{
literal|0x0013
block|,
literal|"WM_QUERYOPEN"
block|}
block|,
block|{
literal|0x0016
block|,
literal|"WM_ENDSESSION"
block|}
block|,
block|{
literal|0x0012
block|,
literal|"WM_QUIT"
block|}
block|,
block|{
literal|0x0014
block|,
literal|"WM_ERASEBKGND"
block|}
block|,
block|{
literal|0x0015
block|,
literal|"WM_SYSCOLORCHANGE"
block|}
block|,
block|{
literal|0x0018
block|,
literal|"WM_SHOWWINDOW"
block|}
block|,
block|{
literal|0x001A
block|,
literal|"WM_WININICHANGE"
block|}
block|,
block|{
literal|0x001B
block|,
literal|"WM_DEVMODECHANGE"
block|}
block|,
block|{
literal|0x001C
block|,
literal|"WM_ACTIVATEAPP"
block|}
block|,
block|{
literal|0x001D
block|,
literal|"WM_FONTCHANGE"
block|}
block|,
block|{
literal|0x001E
block|,
literal|"WM_TIMECHANGE"
block|}
block|,
block|{
literal|0x001F
block|,
literal|"WM_CANCELMODE"
block|}
block|,
block|{
literal|0x0020
block|,
literal|"WM_SETCURSOR"
block|}
block|,
block|{
literal|0x0021
block|,
literal|"WM_MOUSEACTIVATE"
block|}
block|,
block|{
literal|0x0022
block|,
literal|"WM_CHILDACTIVATE"
block|}
block|,
block|{
literal|0x0023
block|,
literal|"WM_QUEUESYNC"
block|}
block|,
block|{
literal|0x0024
block|,
literal|"WM_GETMINMAXINFO"
block|}
block|,
block|{
literal|0x0026
block|,
literal|"WM_PAINTICON"
block|}
block|,
block|{
literal|0x0027
block|,
literal|"WM_ICONERASEBKGND"
block|}
block|,
block|{
literal|0x0028
block|,
literal|"WM_NEXTDLGCTL"
block|}
block|,
block|{
literal|0x002A
block|,
literal|"WM_SPOOLERSTATUS"
block|}
block|,
block|{
literal|0x002B
block|,
literal|"WM_DRAWITEM"
block|}
block|,
block|{
literal|0x002C
block|,
literal|"WM_MEASUREITEM"
block|}
block|,
block|{
literal|0x002D
block|,
literal|"WM_DELETEITEM"
block|}
block|,
block|{
literal|0x002E
block|,
literal|"WM_VKEYTOITEM"
block|}
block|,
block|{
literal|0x002F
block|,
literal|"WM_CHARTOITEM"
block|}
block|,
block|{
literal|0x0030
block|,
literal|"WM_SETFONT"
block|}
block|,
block|{
literal|0x0031
block|,
literal|"WM_GETFONT"
block|}
block|,
block|{
literal|0x0032
block|,
literal|"WM_SETHOTKEY"
block|}
block|,
block|{
literal|0x0033
block|,
literal|"WM_GETHOTKEY"
block|}
block|,
block|{
literal|0x0037
block|,
literal|"WM_QUERYDRAGICON"
block|}
block|,
block|{
literal|0x0039
block|,
literal|"WM_COMPAREITEM"
block|}
block|,
block|{
literal|0x003D
block|,
literal|"WM_GETOBJECT"
block|}
block|,
block|{
literal|0x0041
block|,
literal|"WM_COMPACTING"
block|}
block|,
block|{
literal|0x0044
block|,
literal|"WM_COMMNOTIFY"
block|}
block|,
block|{
literal|0x0046
block|,
literal|"WM_WINDOWPOSCHANGING"
block|}
block|,
block|{
literal|0x0047
block|,
literal|"WM_WINDOWPOSCHANGED"
block|}
block|,
block|{
literal|0x0048
block|,
literal|"WM_POWER"
block|}
block|,
block|{
literal|0x004A
block|,
literal|"WM_COPYDATA"
block|}
block|,
block|{
literal|0x004B
block|,
literal|"WM_CANCELJOURNAL"
block|}
block|,
block|{
literal|0x004E
block|,
literal|"WM_NOTIFY"
block|}
block|,
block|{
literal|0x0050
block|,
literal|"WM_INPUTLANGCHANGEREQUEST"
block|}
block|,
block|{
literal|0x0051
block|,
literal|"WM_INPUTLANGCHANGE"
block|}
block|,
block|{
literal|0x0052
block|,
literal|"WM_TCARD"
block|}
block|,
block|{
literal|0x0053
block|,
literal|"WM_HELP"
block|}
block|,
block|{
literal|0x0054
block|,
literal|"WM_USERCHANGED"
block|}
block|,
block|{
literal|0x0055
block|,
literal|"WM_NOTIFYFORMAT"
block|}
block|,
block|{
literal|0x007B
block|,
literal|"WM_CONTEXTMENU"
block|}
block|,
block|{
literal|0x007C
block|,
literal|"WM_STYLECHANGING"
block|}
block|,
block|{
literal|0x007D
block|,
literal|"WM_STYLECHANGED"
block|}
block|,
block|{
literal|0x007E
block|,
literal|"WM_DISPLAYCHANGE"
block|}
block|,
block|{
literal|0x007F
block|,
literal|"WM_GETICON"
block|}
block|,
block|{
literal|0x0080
block|,
literal|"WM_SETICON"
block|}
block|,
block|{
literal|0x0081
block|,
literal|"WM_NCCREATE"
block|}
block|,
block|{
literal|0x0082
block|,
literal|"WM_NCDESTROY"
block|}
block|,
block|{
literal|0x0083
block|,
literal|"WM_NCCALCSIZE"
block|}
block|,
block|{
literal|0x0084
block|,
literal|"WM_NCHITTEST"
block|}
block|,
block|{
literal|0x0085
block|,
literal|"WM_NCPAINT"
block|}
block|,
block|{
literal|0x0086
block|,
literal|"WM_NCACTIVATE"
block|}
block|,
block|{
literal|0x0087
block|,
literal|"WM_GETDLGCODE"
block|}
block|,
block|{
literal|0x0088
block|,
literal|"WM_SYNCPAINT"
block|}
block|,
block|{
literal|0x00A0
block|,
literal|"WM_NCMOUSEMOVE"
block|}
block|,
block|{
literal|0x00A1
block|,
literal|"WM_NCLBUTTONDOWN"
block|}
block|,
block|{
literal|0x00A2
block|,
literal|"WM_NCLBUTTONUP"
block|}
block|,
block|{
literal|0x00A3
block|,
literal|"WM_NCLBUTTONDBLCLK"
block|}
block|,
block|{
literal|0x00A4
block|,
literal|"WM_NCRBUTTONDOWN"
block|}
block|,
block|{
literal|0x00A5
block|,
literal|"WM_NCRBUTTONUP"
block|}
block|,
block|{
literal|0x00A6
block|,
literal|"WM_NCRBUTTONDBLCLK"
block|}
block|,
block|{
literal|0x00A7
block|,
literal|"WM_NCMBUTTONDOWN"
block|}
block|,
block|{
literal|0x00A8
block|,
literal|"WM_NCMBUTTONUP"
block|}
block|,
block|{
literal|0x00A9
block|,
literal|"WM_NCMBUTTONDBLCLK"
block|}
block|,
block|{
literal|0x00AB
block|,
literal|"WM_NCXBUTTONDOWN"
block|}
block|,
block|{
literal|0x00AC
block|,
literal|"WM_NCXBUTTONUP"
block|}
block|,
block|{
literal|0x00AD
block|,
literal|"WM_NCXBUTTONDBLCLK"
block|}
block|,
block|{
literal|0x00FF
block|,
literal|"WM_INPUT"
block|}
block|,
block|{
literal|0x0100
block|,
literal|"WM_KEYDOWN"
block|}
block|,
block|{
literal|0x0101
block|,
literal|"WM_KEYUP"
block|}
block|,
block|{
literal|0x0102
block|,
literal|"WM_CHAR"
block|}
block|,
block|{
literal|0x0103
block|,
literal|"WM_DEADCHAR"
block|}
block|,
block|{
literal|0x0104
block|,
literal|"WM_SYSKEYDOWN"
block|}
block|,
block|{
literal|0x0105
block|,
literal|"WM_SYSKEYUP"
block|}
block|,
block|{
literal|0x0106
block|,
literal|"WM_SYSCHAR"
block|}
block|,
block|{
literal|0x0107
block|,
literal|"WM_SYSDEADCHAR"
block|}
block|,
block|{
literal|0x0109
block|,
literal|"WM_UNICHAR"
block|}
block|,
block|{
literal|0x010D
block|,
literal|"WM_IME_STARTCOMPOSITION"
block|}
block|,
block|{
literal|0x010E
block|,
literal|"WM_IME_ENDCOMPOSITION"
block|}
block|,
block|{
literal|0x010F
block|,
literal|"WM_IME_COMPOSITION"
block|}
block|,
block|{
literal|0x0110
block|,
literal|"WM_INITDIALOG"
block|}
block|,
block|{
literal|0x0111
block|,
literal|"WM_COMMAND"
block|}
block|,
block|{
literal|0x0112
block|,
literal|"WM_SYSCOMMAND"
block|}
block|,
block|{
literal|0x0113
block|,
literal|"WM_TIMER"
block|}
block|,
block|{
literal|0x0114
block|,
literal|"WM_HSCROLL"
block|}
block|,
block|{
literal|0x0115
block|,
literal|"WM_VSCROLL"
block|}
block|,
block|{
literal|0x0116
block|,
literal|"WM_INITMENU"
block|}
block|,
block|{
literal|0x0117
block|,
literal|"WM_INITMENUPOPUP"
block|}
block|,
block|{
literal|0x011F
block|,
literal|"WM_MENUSELECT"
block|}
block|,
block|{
literal|0x0120
block|,
literal|"WM_MENUCHAR"
block|}
block|,
block|{
literal|0x0121
block|,
literal|"WM_ENTERIDLE"
block|}
block|,
block|{
literal|0x0122
block|,
literal|"WM_MENURBUTTONUP"
block|}
block|,
block|{
literal|0x0123
block|,
literal|"WM_MENUDRAG"
block|}
block|,
block|{
literal|0x0124
block|,
literal|"WM_MENUGETOBJECT"
block|}
block|,
block|{
literal|0x0125
block|,
literal|"WM_UNINITMENUPOPUP"
block|}
block|,
block|{
literal|0x0126
block|,
literal|"WM_MENUCOMMAND"
block|}
block|,
block|{
literal|0x0127
block|,
literal|"WM_CHANGEUISTATE"
block|}
block|,
block|{
literal|0x0128
block|,
literal|"WM_UPDATEUISTATE"
block|}
block|,
block|{
literal|0x0129
block|,
literal|"WM_QUERYUISTATE"
block|}
block|,
block|{
literal|0x0132
block|,
literal|"WM_CTLCOLORMSGBOX"
block|}
block|,
block|{
literal|0x0133
block|,
literal|"WM_CTLCOLOREDIT"
block|}
block|,
block|{
literal|0x0134
block|,
literal|"WM_CTLCOLORLISTBOX"
block|}
block|,
block|{
literal|0x0135
block|,
literal|"WM_CTLCOLORBTN"
block|}
block|,
block|{
literal|0x0136
block|,
literal|"WM_CTLCOLORDLG"
block|}
block|,
block|{
literal|0x0137
block|,
literal|"WM_CTLCOLORSCROLLBAR"
block|}
block|,
block|{
literal|0x0138
block|,
literal|"WM_CTLCOLORSTATIC"
block|}
block|,
block|{
literal|0x0200
block|,
literal|"WM_MOUSEMOVE"
block|}
block|,
block|{
literal|0x0201
block|,
literal|"WM_LBUTTONDOWN"
block|}
block|,
block|{
literal|0x0202
block|,
literal|"WM_LBUTTONUP"
block|}
block|,
block|{
literal|0x0203
block|,
literal|"WM_LBUTTONDBLCLK"
block|}
block|,
block|{
literal|0x0204
block|,
literal|"WM_RBUTTONDOWN"
block|}
block|,
block|{
literal|0x0205
block|,
literal|"WM_RBUTTONUP"
block|}
block|,
block|{
literal|0x0206
block|,
literal|"WM_RBUTTONDBLCLK"
block|}
block|,
block|{
literal|0x0207
block|,
literal|"WM_MBUTTONDOWN"
block|}
block|,
block|{
literal|0x0208
block|,
literal|"WM_MBUTTONUP"
block|}
block|,
block|{
literal|0x0209
block|,
literal|"WM_MBUTTONDBLCLK"
block|}
block|,
block|{
literal|0x020A
block|,
literal|"WM_MOUSEWHEEL"
block|}
block|,
block|{
literal|0x020B
block|,
literal|"WM_XBUTTONDOWN"
block|}
block|,
block|{
literal|0x020C
block|,
literal|"WM_XBUTTONUP"
block|}
block|,
block|{
literal|0x020D
block|,
literal|"WM_XBUTTONDBLCLK"
block|}
block|,
block|{
literal|0x020E
block|,
literal|"WM_MOUSEHWHEEL"
block|}
block|,
block|{
literal|0x0210
block|,
literal|"WM_PARENTNOTIFY"
block|}
block|,
block|{
literal|0x0211
block|,
literal|"WM_ENTERMENULOOP"
block|}
block|,
block|{
literal|0x0212
block|,
literal|"WM_EXITMENULOOP"
block|}
block|,
block|{
literal|0x0213
block|,
literal|"WM_NEXTMENU"
block|}
block|,
block|{
literal|0x0214
block|,
literal|"WM_SIZING"
block|}
block|,
block|{
literal|0x0215
block|,
literal|"WM_CAPTURECHANGED"
block|}
block|,
block|{
literal|0x0216
block|,
literal|"WM_MOVING"
block|}
block|,
block|{
literal|0x0218
block|,
literal|"WM_POWERBROADCAST"
block|}
block|,
block|{
literal|0x0219
block|,
literal|"WM_DEVICECHANGE"
block|}
block|,
block|{
literal|0x0220
block|,
literal|"WM_MDICREATE"
block|}
block|,
block|{
literal|0x0221
block|,
literal|"WM_MDIDESTROY"
block|}
block|,
block|{
literal|0x0222
block|,
literal|"WM_MDIACTIVATE"
block|}
block|,
block|{
literal|0x0223
block|,
literal|"WM_MDIRESTORE"
block|}
block|,
block|{
literal|0x0224
block|,
literal|"WM_MDINEXT"
block|}
block|,
block|{
literal|0x0225
block|,
literal|"WM_MDIMAXIMIZE"
block|}
block|,
block|{
literal|0x0226
block|,
literal|"WM_MDITILE"
block|}
block|,
block|{
literal|0x0227
block|,
literal|"WM_MDICASCADE"
block|}
block|,
block|{
literal|0x0228
block|,
literal|"WM_MDIICONARRANGE"
block|}
block|,
block|{
literal|0x0229
block|,
literal|"WM_MDIGETACTIVE"
block|}
block|,
block|{
literal|0x0230
block|,
literal|"WM_MDISETMENU"
block|}
block|,
block|{
literal|0x0231
block|,
literal|"WM_ENTERSIZEMOVE"
block|}
block|,
block|{
literal|0x0232
block|,
literal|"WM_EXITSIZEMOVE"
block|}
block|,
block|{
literal|0x0233
block|,
literal|"WM_DROPFILES"
block|}
block|,
block|{
literal|0x0234
block|,
literal|"WM_MDIREFRESHMENU"
block|}
block|,
block|{
literal|0x0281
block|,
literal|"WM_IME_SETCONTEXT"
block|}
block|,
block|{
literal|0x0282
block|,
literal|"WM_IME_NOTIFY"
block|}
block|,
block|{
literal|0x0283
block|,
literal|"WM_IME_CONTROL"
block|}
block|,
block|{
literal|0x0284
block|,
literal|"WM_IME_COMPOSITIONFULL"
block|}
block|,
block|{
literal|0x0285
block|,
literal|"WM_IME_SELECT"
block|}
block|,
block|{
literal|0x0286
block|,
literal|"WM_IME_CHAR"
block|}
block|,
block|{
literal|0x0288
block|,
literal|"WM_IME_REQUEST"
block|}
block|,
block|{
literal|0x0290
block|,
literal|"WM_IME_KEYDOWN"
block|}
block|,
block|{
literal|0x0291
block|,
literal|"WM_IME_KEYUP"
block|}
block|,
block|{
literal|0x02A0
block|,
literal|"WM_NCMOUSEHOVER"
block|}
block|,
block|{
literal|0x02A1
block|,
literal|"WM_MOUSEHOVER"
block|}
block|,
block|{
literal|0x02A2
block|,
literal|"WM_NCMOUSELEAVE"
block|}
block|,
block|{
literal|0x02A3
block|,
literal|"WM_MOUSELEAVE"
block|}
block|,
block|{
literal|0x02B1
block|,
literal|"WM_WTSSESSION_CHANGE"
block|}
block|,
block|{
literal|0x02C0
block|,
literal|"WM_TABLET_FIRST"
block|}
block|,
block|{
literal|0x02C1
block|,
literal|"WM_TABLET_FIRST + 1"
block|}
block|,
block|{
literal|0x02C2
block|,
literal|"WM_TABLET_FIRST + 2"
block|}
block|,
block|{
literal|0x02C3
block|,
literal|"WM_TABLET_FIRST + 3"
block|}
block|,
block|{
literal|0x02C4
block|,
literal|"WM_TABLET_FIRST + 4"
block|}
block|,
block|{
literal|0x02C5
block|,
literal|"WM_TABLET_FIRST + 5"
block|}
block|,
block|{
literal|0x02C6
block|,
literal|"WM_TABLET_FIRST + 6"
block|}
block|,
block|{
literal|0x02C7
block|,
literal|"WM_TABLET_FIRST + 7"
block|}
block|,
block|{
literal|0x02C8
block|,
literal|"WM_TABLET_FIRST + 8"
block|}
block|,
block|{
literal|0x02C9
block|,
literal|"WM_TABLET_FIRST + 9"
block|}
block|,
block|{
literal|0x02CA
block|,
literal|"WM_TABLET_FIRST + 10"
block|}
block|,
block|{
literal|0x02CB
block|,
literal|"WM_TABLET_FIRST + 11"
block|}
block|,
block|{
literal|0x02CC
block|,
literal|"WM_TABLET_FIRST + 12"
block|}
block|,
block|{
literal|0x02CD
block|,
literal|"WM_TABLET_FIRST + 13"
block|}
block|,
block|{
literal|0x02CE
block|,
literal|"WM_TABLET_FIRST + 14"
block|}
block|,
block|{
literal|0x02CF
block|,
literal|"WM_TABLET_FIRST + 15"
block|}
block|,
block|{
literal|0x02D0
block|,
literal|"WM_TABLET_FIRST + 16"
block|}
block|,
block|{
literal|0x02D1
block|,
literal|"WM_TABLET_FIRST + 17"
block|}
block|,
block|{
literal|0x02D2
block|,
literal|"WM_TABLET_FIRST + 18"
block|}
block|,
block|{
literal|0x02D3
block|,
literal|"WM_TABLET_FIRST + 19"
block|}
block|,
block|{
literal|0x02D4
block|,
literal|"WM_TABLET_FIRST + 20"
block|}
block|,
block|{
literal|0x02D5
block|,
literal|"WM_TABLET_FIRST + 21"
block|}
block|,
block|{
literal|0x02D6
block|,
literal|"WM_TABLET_FIRST + 22"
block|}
block|,
block|{
literal|0x02D7
block|,
literal|"WM_TABLET_FIRST + 23"
block|}
block|,
block|{
literal|0x02D8
block|,
literal|"WM_TABLET_FIRST + 24"
block|}
block|,
block|{
literal|0x02D9
block|,
literal|"WM_TABLET_FIRST + 25"
block|}
block|,
block|{
literal|0x02DA
block|,
literal|"WM_TABLET_FIRST + 26"
block|}
block|,
block|{
literal|0x02DB
block|,
literal|"WM_TABLET_FIRST + 27"
block|}
block|,
block|{
literal|0x02DC
block|,
literal|"WM_TABLET_FIRST + 28"
block|}
block|,
block|{
literal|0x02DD
block|,
literal|"WM_TABLET_FIRST + 29"
block|}
block|,
block|{
literal|0x02DE
block|,
literal|"WM_TABLET_FIRST + 30"
block|}
block|,
block|{
literal|0x02DF
block|,
literal|"WM_TABLET_LAST"
block|}
block|,
block|{
literal|0x0300
block|,
literal|"WM_CUT"
block|}
block|,
block|{
literal|0x0301
block|,
literal|"WM_COPY"
block|}
block|,
block|{
literal|0x0302
block|,
literal|"WM_PASTE"
block|}
block|,
block|{
literal|0x0303
block|,
literal|"WM_CLEAR"
block|}
block|,
block|{
literal|0x0304
block|,
literal|"WM_UNDO"
block|}
block|,
block|{
literal|0x0305
block|,
literal|"WM_RENDERFORMAT"
block|}
block|,
block|{
literal|0x0306
block|,
literal|"WM_RENDERALLFORMATS"
block|}
block|,
block|{
literal|0x0307
block|,
literal|"WM_DESTROYCLIPBOARD"
block|}
block|,
block|{
literal|0x0308
block|,
literal|"WM_DRAWCLIPBOARD"
block|}
block|,
block|{
literal|0x0309
block|,
literal|"WM_PAINTCLIPBOARD"
block|}
block|,
block|{
literal|0x030A
block|,
literal|"WM_VSCROLLCLIPBOARD"
block|}
block|,
block|{
literal|0x030B
block|,
literal|"WM_SIZECLIPBOARD"
block|}
block|,
block|{
literal|0x030C
block|,
literal|"WM_ASKCBFORMATNAME"
block|}
block|,
block|{
literal|0x030D
block|,
literal|"WM_CHANGECBCHAIN"
block|}
block|,
block|{
literal|0x030E
block|,
literal|"WM_HSCROLLCLIPBOARD"
block|}
block|,
block|{
literal|0x030F
block|,
literal|"WM_QUERYNEWPALETTE"
block|}
block|,
block|{
literal|0x0310
block|,
literal|"WM_PALETTEISCHANGING"
block|}
block|,
block|{
literal|0x0311
block|,
literal|"WM_PALETTECHANGED"
block|}
block|,
block|{
literal|0x0312
block|,
literal|"WM_HOTKEY"
block|}
block|,
block|{
literal|0x0317
block|,
literal|"WM_PRINT"
block|}
block|,
block|{
literal|0x0318
block|,
literal|"WM_PRINTCLIENT"
block|}
block|,
block|{
literal|0x0319
block|,
literal|"WM_APPCOMMAND"
block|}
block|,
block|{
literal|0x031A
block|,
literal|"WM_THEMECHANGED"
block|}
block|,
block|{
literal|0x0358
block|,
literal|"WM_HANDHELDFIRST"
block|}
block|,
block|{
literal|0x0359
block|,
literal|"WM_HANDHELDFIRST + 1"
block|}
block|,
block|{
literal|0x035A
block|,
literal|"WM_HANDHELDFIRST + 2"
block|}
block|,
block|{
literal|0x035B
block|,
literal|"WM_HANDHELDFIRST + 3"
block|}
block|,
block|{
literal|0x035C
block|,
literal|"WM_HANDHELDFIRST + 4"
block|}
block|,
block|{
literal|0x035D
block|,
literal|"WM_HANDHELDFIRST + 5"
block|}
block|,
block|{
literal|0x035E
block|,
literal|"WM_HANDHELDFIRST + 6"
block|}
block|,
block|{
literal|0x035F
block|,
literal|"WM_HANDHELDLAST"
block|}
block|,
block|{
literal|0x0360
block|,
literal|"WM_AFXFIRST"
block|}
block|,
block|{
literal|0x0361
block|,
literal|"WM_AFXFIRST + 1"
block|}
block|,
block|{
literal|0x0362
block|,
literal|"WM_AFXFIRST + 2"
block|}
block|,
block|{
literal|0x0363
block|,
literal|"WM_AFXFIRST + 3"
block|}
block|,
block|{
literal|0x0364
block|,
literal|"WM_AFXFIRST + 4"
block|}
block|,
block|{
literal|0x0365
block|,
literal|"WM_AFXFIRST + 5"
block|}
block|,
block|{
literal|0x0366
block|,
literal|"WM_AFXFIRST + 6"
block|}
block|,
block|{
literal|0x0367
block|,
literal|"WM_AFXFIRST + 7"
block|}
block|,
block|{
literal|0x0368
block|,
literal|"WM_AFXFIRST + 8"
block|}
block|,
block|{
literal|0x0369
block|,
literal|"WM_AFXFIRST + 9"
block|}
block|,
block|{
literal|0x036A
block|,
literal|"WM_AFXFIRST + 10"
block|}
block|,
block|{
literal|0x036B
block|,
literal|"WM_AFXFIRST + 11"
block|}
block|,
block|{
literal|0x036C
block|,
literal|"WM_AFXFIRST + 12"
block|}
block|,
block|{
literal|0x036D
block|,
literal|"WM_AFXFIRST + 13"
block|}
block|,
block|{
literal|0x036E
block|,
literal|"WM_AFXFIRST + 14"
block|}
block|,
block|{
literal|0x036F
block|,
literal|"WM_AFXFIRST + 15"
block|}
block|,
block|{
literal|0x0370
block|,
literal|"WM_AFXFIRST + 16"
block|}
block|,
block|{
literal|0x0371
block|,
literal|"WM_AFXFIRST + 17"
block|}
block|,
block|{
literal|0x0372
block|,
literal|"WM_AFXFIRST + 18"
block|}
block|,
block|{
literal|0x0373
block|,
literal|"WM_AFXFIRST + 19"
block|}
block|,
block|{
literal|0x0374
block|,
literal|"WM_AFXFIRST + 20"
block|}
block|,
block|{
literal|0x0375
block|,
literal|"WM_AFXFIRST + 21"
block|}
block|,
block|{
literal|0x0376
block|,
literal|"WM_AFXFIRST + 22"
block|}
block|,
block|{
literal|0x0377
block|,
literal|"WM_AFXFIRST + 23"
block|}
block|,
block|{
literal|0x0378
block|,
literal|"WM_AFXFIRST + 24"
block|}
block|,
block|{
literal|0x0379
block|,
literal|"WM_AFXFIRST + 25"
block|}
block|,
block|{
literal|0x037A
block|,
literal|"WM_AFXFIRST + 26"
block|}
block|,
block|{
literal|0x037B
block|,
literal|"WM_AFXFIRST + 27"
block|}
block|,
block|{
literal|0x037C
block|,
literal|"WM_AFXFIRST + 28"
block|}
block|,
block|{
literal|0x037D
block|,
literal|"WM_AFXFIRST + 29"
block|}
block|,
block|{
literal|0x037E
block|,
literal|"WM_AFXFIRST + 30"
block|}
block|,
block|{
literal|0x037F
block|,
literal|"WM_AFXLAST"
block|}
block|,
block|{
literal|0x0380
block|,
literal|"WM_PENWINFIRST"
block|}
block|,
block|{
literal|0x0381
block|,
literal|"WM_PENWINFIRST + 1"
block|}
block|,
block|{
literal|0x0382
block|,
literal|"WM_PENWINFIRST + 2"
block|}
block|,
block|{
literal|0x0383
block|,
literal|"WM_PENWINFIRST + 3"
block|}
block|,
block|{
literal|0x0384
block|,
literal|"WM_PENWINFIRST + 4"
block|}
block|,
block|{
literal|0x0385
block|,
literal|"WM_PENWINFIRST + 5"
block|}
block|,
block|{
literal|0x0386
block|,
literal|"WM_PENWINFIRST + 6"
block|}
block|,
block|{
literal|0x0387
block|,
literal|"WM_PENWINFIRST + 7"
block|}
block|,
block|{
literal|0x0388
block|,
literal|"WM_PENWINFIRST + 8"
block|}
block|,
block|{
literal|0x0389
block|,
literal|"WM_PENWINFIRST + 9"
block|}
block|,
block|{
literal|0x038A
block|,
literal|"WM_PENWINFIRST + 10"
block|}
block|,
block|{
literal|0x038B
block|,
literal|"WM_PENWINFIRST + 11"
block|}
block|,
block|{
literal|0x038C
block|,
literal|"WM_PENWINFIRST + 12"
block|}
block|,
block|{
literal|0x038D
block|,
literal|"WM_PENWINFIRST + 13"
block|}
block|,
block|{
literal|0x038E
block|,
literal|"WM_PENWINFIRST + 14"
block|}
block|,
block|{
literal|0x038F
block|,
literal|"WM_PENWINLAST"
block|}
block|,
block|{
literal|0x0400
block|,
literal|"WM_USER"
block|}
block|,
block|{
literal|0x8000
block|,
literal|"WM_APP"
block|}
block|,
block|{
literal|0
block|,
literal|0
block|}
block|}
struct|;
end_struct
begin_comment
comment|// End of known messages
end_comment
begin_comment
comment|// Looks up the WM_ message in the table above
end_comment
begin_function
DECL|function|findWMstr
specifier|static
specifier|const
name|char
modifier|*
name|findWMstr
parameter_list|(
name|uint
name|msg
parameter_list|)
block|{
name|uint
name|i
init|=
literal|0
decl_stmt|;
specifier|const
name|char
modifier|*
name|result
init|=
literal|0
decl_stmt|;
comment|// Known WM_'s
while|while
condition|(
name|knownWM
index|[
name|i
index|]
operator|.
name|str
operator|&&
operator|(
name|knownWM
index|[
name|i
index|]
operator|.
name|WM
operator|!=
name|msg
operator|)
condition|)
operator|++
name|i
expr_stmt|;
name|result
operator|=
name|knownWM
index|[
name|i
index|]
operator|.
name|str
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_comment
comment|// Convenience function for converting flags and values into readable strings
end_comment
begin_struct
DECL|struct|FLAG_STRING_STRUCT
struct|struct
name|FLAG_STRING_STRUCT
block|{
DECL|member|value
name|uint
name|value
decl_stmt|;
DECL|member|str
specifier|const
name|char
modifier|*
name|str
decl_stmt|;
block|}
struct|;
end_struct
begin_function
DECL|function|FLAG_STRING
name|FLAG_STRING_STRUCT
name|FLAG_STRING
parameter_list|(
name|int
name|value
init|=
literal|0
parameter_list|,
specifier|const
name|char
modifier|*
name|c
init|=
literal|0
parameter_list|)
block|{
name|FLAG_STRING_STRUCT
name|s
init|=
block|{
name|value
block|,
name|c
block|}
decl_stmt|;
return|return
name|s
return|;
block|}
end_function
begin_define
DECL|macro|FLGSTR
define|#
directive|define
name|FLGSTR
parameter_list|(
name|x
parameter_list|)
value|FLAG_STRING(x, #x)
end_define
begin_comment
comment|// Returns an ORed (" | ") together string for the flags active in the actual
end_comment
begin_comment
comment|// value. (...) must consist of FLAG_STRING, with a FLAG_STRING() as the last
end_comment
begin_comment
comment|// value in the list passed to the function
end_comment
begin_function
DECL|function|flagCheck
name|QString
name|flagCheck
parameter_list|(
name|uint
name|actual
parameter_list|,
modifier|...
parameter_list|)
block|{
name|va_list
name|ap
decl_stmt|;
name|va_start
argument_list|(
name|ap
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|QString
name|result
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|FLAG_STRING_STRUCT
name|v
decl_stmt|;
while|while
condition|(
operator|(
name|v
operator|=
name|va_arg
argument_list|(
name|ap
argument_list|,
name|FLAG_STRING_STRUCT
argument_list|)
operator|)
operator|.
name|str
condition|)
block|{
if|if
condition|(
operator|(
name|actual
operator|&
name|v
operator|.
name|value
operator|)
operator|==
name|v
operator|.
name|value
condition|)
block|{
if|if
condition|(
name|count
operator|++
condition|)
name|result
operator|+=
name|QLatin1String
argument_list|(
literal|" | "
argument_list|)
expr_stmt|;
name|result
operator|+=
name|QString
operator|::
name|fromLatin1
argument_list|(
name|v
operator|.
name|str
argument_list|)
expr_stmt|;
block|}
block|}
name|va_end
argument_list|(
name|ap
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_comment
comment|// Returns the string representation of the value in 'actual'. (...) must
end_comment
begin_comment
comment|// consist of FLAG_STRING, with a FLAG_STRING() as the last value in the list
end_comment
begin_comment
comment|// passed to the function
end_comment
begin_function
DECL|function|valueCheck
name|QString
name|valueCheck
parameter_list|(
name|uint
name|actual
parameter_list|,
modifier|...
parameter_list|)
block|{
name|va_list
name|ap
decl_stmt|;
name|va_start
argument_list|(
name|ap
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|QString
name|result
decl_stmt|;
name|FLAG_STRING_STRUCT
name|v
decl_stmt|;
while|while
condition|(
operator|(
name|v
operator|=
name|va_arg
argument_list|(
name|ap
argument_list|,
name|FLAG_STRING_STRUCT
argument_list|)
operator|)
operator|.
name|str
operator|&&
operator|(
name|actual
operator|!=
name|v
operator|.
name|value
operator|)
condition|)
empty_stmt|;
name|result
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
name|v
operator|.
name|str
argument_list|)
expr_stmt|;
name|va_end
argument_list|(
name|ap
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_ifdef
ifdef|#
directive|ifdef
name|Q_CC_BOR
end_ifdef
begin_function
DECL|function|decodeMSG
name|QString
name|decodeMSG
parameter_list|(
specifier|const
name|MSG
modifier|&
name|msg
parameter_list|)
block|{
return|return
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"THis is not supported on Borland"
argument_list|)
return|;
block|}
end_function
begin_else
else|#
directive|else
end_else
begin_comment
comment|// Returns a "human readable" string representation of the MSG and the
end_comment
begin_comment
comment|// information it points to
end_comment
begin_function
DECL|function|decodeMSG
name|QString
name|decodeMSG
parameter_list|(
specifier|const
name|MSG
modifier|&
name|msg
parameter_list|)
block|{
specifier|const
name|WPARAM
name|wParam
init|=
name|msg
operator|.
name|wParam
decl_stmt|;
specifier|const
name|LPARAM
name|lParam
init|=
name|msg
operator|.
name|lParam
decl_stmt|;
name|QString
name|wmmsg
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
name|findWMstr
argument_list|(
name|msg
operator|.
name|message
argument_list|)
argument_list|)
decl_stmt|;
comment|// Unknown WM_, so use number
if|if
condition|(
name|wmmsg
operator|.
name|isEmpty
argument_list|()
condition|)
name|wmmsg
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"WM_(%1)"
argument_list|)
operator|.
name|arg
argument_list|(
name|msg
operator|.
name|message
argument_list|)
expr_stmt|;
name|QString
name|rawParameters
decl_stmt|;
name|rawParameters
operator|.
name|sprintf
argument_list|(
literal|"hwnd(0x%p) "
argument_list|,
operator|(
name|void
operator|*
operator|)
name|msg
operator|.
name|hwnd
argument_list|)
expr_stmt|;
comment|// Custom WM_'s
if|if
condition|(
name|msg
operator|.
name|message
operator|>
name|WM_APP
condition|)
name|wmmsg
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"WM_APP + %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|msg
operator|.
name|message
operator|-
name|WM_APP
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|msg
operator|.
name|message
operator|>
name|WM_USER
condition|)
name|wmmsg
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"WM_USER + %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|msg
operator|.
name|message
operator|-
name|WM_USER
argument_list|)
expr_stmt|;
name|QString
name|parameters
decl_stmt|;
switch|switch
condition|(
name|msg
operator|.
name|message
condition|)
block|{
ifdef|#
directive|ifdef
name|WM_ACTIVATE
case|case
name|WM_ACTIVATE
case|:
block|{
name|QString
name|activation
init|=
name|valueCheck
argument_list|(
name|wParam
argument_list|,
name|FLAG_STRING
argument_list|(
name|WA_ACTIVE
argument_list|,
literal|"Activate"
argument_list|)
argument_list|,
name|FLAG_STRING
argument_list|(
name|WA_INACTIVE
argument_list|,
literal|"Deactivate"
argument_list|)
argument_list|,
name|FLAG_STRING
argument_list|(
name|WA_CLICKACTIVE
argument_list|,
literal|"Activate by mouseclick"
argument_list|)
argument_list|,
name|FLAG_STRING
argument_list|()
argument_list|)
decl_stmt|;
name|parameters
operator|.
name|sprintf
argument_list|(
literal|"%s Hwnd (0x%p)"
argument_list|,
name|activation
operator|.
name|toLatin1
argument_list|()
operator|.
name|data
argument_list|()
argument_list|,
operator|(
name|void
operator|*
operator|)
name|msg
operator|.
name|hwnd
argument_list|)
expr_stmt|;
block|}
break|break;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|WM_CAPTURECHANGED
case|case
name|WM_CAPTURECHANGED
case|:
name|parameters
operator|.
name|sprintf
argument_list|(
literal|"Hwnd gaining capture (0x%p)"
argument_list|,
operator|(
name|void
operator|*
operator|)
name|lParam
argument_list|)
expr_stmt|;
break|break;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|WM_CREATE
case|case
name|WM_CREATE
case|:
block|{
name|LPCREATESTRUCT
name|lpcs
init|=
operator|(
name|LPCREATESTRUCT
operator|)
name|lParam
decl_stmt|;
name|QString
name|styles
init|=
name|flagCheck
argument_list|(
name|lpcs
operator|->
name|style
argument_list|,
name|FLGSTR
argument_list|(
name|WS_BORDER
argument_list|)
argument_list|,
name|FLGSTR
argument_list|(
name|WS_CAPTION
argument_list|)
argument_list|,
name|FLGSTR
argument_list|(
name|WS_CHILD
argument_list|)
argument_list|,
name|FLGSTR
argument_list|(
name|WS_CLIPCHILDREN
argument_list|)
argument_list|,
name|FLGSTR
argument_list|(
name|WS_CLIPSIBLINGS
argument_list|)
argument_list|,
name|FLGSTR
argument_list|(
name|WS_DISABLED
argument_list|)
argument_list|,
name|FLGSTR
argument_list|(
name|WS_DLGFRAME
argument_list|)
argument_list|,
name|FLGSTR
argument_list|(
name|WS_GROUP
argument_list|)
argument_list|,
name|FLGSTR
argument_list|(
name|WS_HSCROLL
argument_list|)
argument_list|,
name|FLGSTR
argument_list|(
name|WS_OVERLAPPED
argument_list|)
argument_list|,
if|#
directive|if
name|defined
argument_list|(
name|WS_OVERLAPPEDWINDOW
argument_list|)
operator|&&
operator|(
name|WS_OVERLAPPEDWINDOW
operator|!=
literal|0
operator|)
name|FLGSTR
argument_list|(
name|WS_OVERLAPPEDWINDOW
argument_list|)
argument_list|,
endif|#
directive|endif
ifdef|#
directive|ifdef
name|WS_ICONIC
name|FLGSTR
argument_list|(
name|WS_ICONIC
argument_list|)
argument_list|,
endif|#
directive|endif
name|FLGSTR
argument_list|(
name|WS_MAXIMIZE
argument_list|)
argument_list|,
name|FLGSTR
argument_list|(
name|WS_MAXIMIZEBOX
argument_list|)
argument_list|,
name|FLGSTR
argument_list|(
name|WS_MINIMIZE
argument_list|)
argument_list|,
name|FLGSTR
argument_list|(
name|WS_MINIMIZEBOX
argument_list|)
argument_list|,
name|FLGSTR
argument_list|(
name|WS_OVERLAPPEDWINDOW
argument_list|)
argument_list|,
name|FLGSTR
argument_list|(
name|WS_POPUP
argument_list|)
argument_list|,
ifdef|#
directive|ifdef
name|WS_POPUPWINDOW
name|FLGSTR
argument_list|(
name|WS_POPUPWINDOW
argument_list|)
argument_list|,
endif|#
directive|endif
name|FLGSTR
argument_list|(
name|WS_SIZEBOX
argument_list|)
argument_list|,
name|FLGSTR
argument_list|(
name|WS_SYSMENU
argument_list|)
argument_list|,
name|FLGSTR
argument_list|(
name|WS_TABSTOP
argument_list|)
argument_list|,
name|FLGSTR
argument_list|(
name|WS_THICKFRAME
argument_list|)
argument_list|,
ifdef|#
directive|ifdef
name|WS_TILED
name|FLGSTR
argument_list|(
name|WS_TILED
argument_list|)
argument_list|,
endif|#
directive|endif
ifdef|#
directive|ifdef
name|WS_TILEDWINDOW
name|FLGSTR
argument_list|(
name|WS_TILEDWINDOW
argument_list|)
argument_list|,
endif|#
directive|endif
name|FLGSTR
argument_list|(
name|WS_VISIBLE
argument_list|)
argument_list|,
name|FLGSTR
argument_list|(
name|WS_VSCROLL
argument_list|)
argument_list|,
name|FLAG_STRING
argument_list|()
argument_list|)
decl_stmt|;
name|QString
name|exStyles
init|=
name|flagCheck
argument_list|(
name|lpcs
operator|->
name|dwExStyle
argument_list|,
ifdef|#
directive|ifdef
name|WS_EX_ACCEPTFILES
name|FLGSTR
argument_list|(
name|WS_EX_ACCEPTFILES
argument_list|)
argument_list|,
endif|#
directive|endif
ifdef|#
directive|ifdef
name|WS_EX_APPWINDOW
name|FLGSTR
argument_list|(
name|WS_EX_APPWINDOW
argument_list|)
argument_list|,
endif|#
directive|endif
name|FLGSTR
argument_list|(
name|WS_EX_CLIENTEDGE
argument_list|)
argument_list|,
name|FLGSTR
argument_list|(
name|WS_EX_DLGMODALFRAME
argument_list|)
argument_list|,
ifdef|#
directive|ifdef
name|WS_EX_LEFT
name|FLGSTR
argument_list|(
name|WS_EX_LEFT
argument_list|)
argument_list|,
endif|#
directive|endif
name|FLGSTR
argument_list|(
name|WS_EX_LEFTSCROLLBAR
argument_list|)
argument_list|,
ifdef|#
directive|ifdef
name|WS_EX_LTRREADING
name|FLGSTR
argument_list|(
name|WS_EX_LTRREADING
argument_list|)
argument_list|,
endif|#
directive|endif
ifdef|#
directive|ifdef
name|WS_EX_MDICHILD
name|FLGSTR
argument_list|(
name|WS_EX_MDICHILD
argument_list|)
argument_list|,
endif|#
directive|endif
ifdef|#
directive|ifdef
name|WS_EX_NOACTIVATE
name|FLGSTR
argument_list|(
name|WS_EX_NOACTIVATE
argument_list|)
argument_list|,
endif|#
directive|endif
ifdef|#
directive|ifdef
name|WS_EX_NOANIMATION
name|FLGSTR
argument_list|(
name|WS_EX_NOANIMATION
argument_list|)
argument_list|,
endif|#
directive|endif
name|FLGSTR
argument_list|(
name|WS_EX_NOPARENTNOTIFY
argument_list|)
argument_list|,
name|FLGSTR
argument_list|(
name|WS_EX_OVERLAPPEDWINDOW
argument_list|)
argument_list|,
ifdef|#
directive|ifdef
name|WS_EX_PALETTEWINDOW
name|FLGSTR
argument_list|(
name|WS_EX_PALETTEWINDOW
argument_list|)
argument_list|,
endif|#
directive|endif
ifdef|#
directive|ifdef
name|WS_EX_RIGHT
name|FLGSTR
argument_list|(
name|WS_EX_RIGHT
argument_list|)
argument_list|,
endif|#
directive|endif
ifdef|#
directive|ifdef
name|WS_EX_RIGHTSCROLLBAR
name|FLGSTR
argument_list|(
name|WS_EX_RIGHTSCROLLBAR
argument_list|)
argument_list|,
endif|#
directive|endif
ifdef|#
directive|ifdef
name|WS_EX_RTLREADING
name|FLGSTR
argument_list|(
name|WS_EX_RTLREADING
argument_list|)
argument_list|,
endif|#
directive|endif
name|FLGSTR
argument_list|(
name|WS_EX_STATICEDGE
argument_list|)
argument_list|,
name|FLGSTR
argument_list|(
name|WS_EX_TOOLWINDOW
argument_list|)
argument_list|,
name|FLGSTR
argument_list|(
name|WS_EX_TOPMOST
argument_list|)
argument_list|,
ifdef|#
directive|ifdef
name|WS_EX_TRANSPARENT
name|FLGSTR
argument_list|(
name|WS_EX_TRANSPARENT
argument_list|)
argument_list|,
endif|#
directive|endif
name|FLGSTR
argument_list|(
name|WS_EX_WINDOWEDGE
argument_list|)
argument_list|,
ifdef|#
directive|ifdef
name|WS_EX_CAPTIONOKBTN
name|FLGSTR
argument_list|(
name|WS_EX_CAPTIONOKBTN
argument_list|)
argument_list|,
endif|#
directive|endif
name|FLAG_STRING
argument_list|()
argument_list|)
decl_stmt|;
name|QString
name|className
decl_stmt|;
if|if
condition|(
name|lpcs
operator|->
name|lpszClass
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|HIWORD
argument_list|(
name|lpcs
operator|->
name|lpszClass
argument_list|)
operator|==
literal|0
condition|)
comment|// Atom
name|className
operator|=
name|QString
operator|::
name|number
argument_list|(
name|LOWORD
argument_list|(
name|lpcs
operator|->
name|lpszClass
argument_list|)
argument_list|,
literal|16
argument_list|)
expr_stmt|;
else|else
comment|// String
name|className
operator|=
name|QString
argument_list|(
operator|(
name|QChar
operator|*
operator|)
name|lpcs
operator|->
name|lpszClass
argument_list|,
operator|(
name|int
operator|)
name|wcslen
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|wchar_t
operator|*
argument_list|>
argument_list|(
name|lpcs
operator|->
name|lpszClass
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QString
name|windowName
decl_stmt|;
if|if
condition|(
name|lpcs
operator|->
name|lpszName
operator|!=
literal|0
condition|)
name|windowName
operator|=
name|QString
argument_list|(
operator|(
name|QChar
operator|*
operator|)
name|lpcs
operator|->
name|lpszName
argument_list|,
operator|(
name|int
operator|)
name|wcslen
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|wchar_t
operator|*
argument_list|>
argument_list|(
name|lpcs
operator|->
name|lpszName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|sprintf
argument_list|(
literal|"x,y(%4d,%4d) w,h(%4d,%4d) className(%s) windowName(%s) parent(0x%p) style(%s) exStyle(%s)"
argument_list|,
name|lpcs
operator|->
name|x
argument_list|,
name|lpcs
operator|->
name|y
argument_list|,
name|lpcs
operator|->
name|cx
argument_list|,
name|lpcs
operator|->
name|cy
argument_list|,
name|className
operator|.
name|toLatin1
argument_list|()
operator|.
name|data
argument_list|()
argument_list|,
name|windowName
operator|.
name|toLatin1
argument_list|()
operator|.
name|data
argument_list|()
argument_list|,
operator|(
name|void
operator|*
operator|)
name|lpcs
operator|->
name|hwndParent
argument_list|,
name|styles
operator|.
name|toLatin1
argument_list|()
operator|.
name|data
argument_list|()
argument_list|,
name|exStyles
operator|.
name|toLatin1
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|WM_DESTROY
case|case
name|WM_DESTROY
case|:
name|parameters
operator|.
name|sprintf
argument_list|(
literal|"Destroy hwnd (0x%p)"
argument_list|,
operator|(
name|void
operator|*
operator|)
name|msg
operator|.
name|hwnd
argument_list|)
expr_stmt|;
break|break;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|WM_IME_NOTIFY
case|case
name|WM_IME_NOTIFY
case|:
block|{
name|QString
name|imnCommand
init|=
name|valueCheck
argument_list|(
name|wParam
argument_list|,
name|FLGSTR
argument_list|(
name|IMN_CHANGECANDIDATE
argument_list|)
argument_list|,
name|FLGSTR
argument_list|(
name|IMN_CLOSECANDIDATE
argument_list|)
argument_list|,
name|FLGSTR
argument_list|(
name|IMN_CLOSESTATUSWINDOW
argument_list|)
argument_list|,
name|FLGSTR
argument_list|(
name|IMN_GUIDELINE
argument_list|)
argument_list|,
name|FLGSTR
argument_list|(
name|IMN_OPENCANDIDATE
argument_list|)
argument_list|,
name|FLGSTR
argument_list|(
name|IMN_OPENSTATUSWINDOW
argument_list|)
argument_list|,
name|FLGSTR
argument_list|(
name|IMN_SETCANDIDATEPOS
argument_list|)
argument_list|,
name|FLGSTR
argument_list|(
name|IMN_SETCOMPOSITIONFONT
argument_list|)
argument_list|,
name|FLGSTR
argument_list|(
name|IMN_SETCOMPOSITIONWINDOW
argument_list|)
argument_list|,
name|FLGSTR
argument_list|(
name|IMN_SETCONVERSIONMODE
argument_list|)
argument_list|,
name|FLGSTR
argument_list|(
name|IMN_SETOPENSTATUS
argument_list|)
argument_list|,
name|FLGSTR
argument_list|(
name|IMN_SETSENTENCEMODE
argument_list|)
argument_list|,
name|FLGSTR
argument_list|(
name|IMN_SETSTATUSWINDOWPOS
argument_list|)
argument_list|,
name|FLAG_STRING
argument_list|()
argument_list|)
decl_stmt|;
name|parameters
operator|.
name|sprintf
argument_list|(
literal|"Command(%s : 0x%p)"
argument_list|,
name|imnCommand
operator|.
name|toLatin1
argument_list|()
operator|.
name|data
argument_list|()
argument_list|,
operator|(
name|void
operator|*
operator|)
name|lParam
argument_list|)
expr_stmt|;
block|}
break|break;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|WM_IME_SETCONTEXT
case|case
name|WM_IME_SETCONTEXT
case|:
block|{
name|bool
name|fSet
init|=
operator|(
name|BOOL
operator|)
name|wParam
decl_stmt|;
name|DWORD
name|fShow
init|=
operator|(
name|DWORD
operator|)
name|lParam
decl_stmt|;
name|QString
name|showFlgs
init|=
name|flagCheck
argument_list|(
name|fShow
argument_list|,
ifdef|#
directive|ifdef
name|ISC_SHOWUICOMPOSITIONWINDOW
name|FLGSTR
argument_list|(
name|ISC_SHOWUICOMPOSITIONWINDOW
argument_list|)
argument_list|,
endif|#
directive|endif
ifdef|#
directive|ifdef
name|ISC_SHOWUIGUIDWINDOW
name|FLGSTR
argument_list|(
name|ISC_SHOWUIGUIDWINDOW
argument_list|)
argument_list|,
endif|#
directive|endif
ifdef|#
directive|ifdef
name|ISC_SHOWUISOFTKBD
name|FLGSTR
argument_list|(
name|ISC_SHOWUISOFTKBD
argument_list|)
argument_list|,
endif|#
directive|endif
name|FLGSTR
argument_list|(
name|ISC_SHOWUICANDIDATEWINDOW
argument_list|)
argument_list|,
name|FLGSTR
argument_list|(
name|ISC_SHOWUICANDIDATEWINDOW
operator|<<
literal|1
argument_list|)
argument_list|,
name|FLGSTR
argument_list|(
name|ISC_SHOWUICANDIDATEWINDOW
operator|<<
literal|2
argument_list|)
argument_list|,
name|FLGSTR
argument_list|(
name|ISC_SHOWUICANDIDATEWINDOW
operator|<<
literal|3
argument_list|)
argument_list|,
name|FLAG_STRING
argument_list|()
argument_list|)
decl_stmt|;
name|parameters
operator|.
name|sprintf
argument_list|(
literal|"Input context(%s) Show flags(%s)"
argument_list|,
operator|(
name|fSet
condition|?
literal|"Active"
else|:
literal|"Inactive"
operator|)
argument_list|,
name|showFlgs
operator|.
name|toLatin1
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|WM_KILLFOCUS
case|case
name|WM_KILLFOCUS
case|:
name|parameters
operator|.
name|sprintf
argument_list|(
literal|"Hwnd gaining keyboard focus (0x%p)"
argument_list|,
operator|(
name|void
operator|*
operator|)
name|wParam
argument_list|)
expr_stmt|;
break|break;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|WM_CHAR
case|case
name|WM_CHAR
case|:
endif|#
directive|endif
ifdef|#
directive|ifdef
name|WM_IME_CHAR
case|case
name|WM_IME_CHAR
case|:
endif|#
directive|endif
ifdef|#
directive|ifdef
name|WM_KEYDOWN
case|case
name|WM_KEYDOWN
case|:
endif|#
directive|endif
ifdef|#
directive|ifdef
name|WM_KEYUP
case|case
name|WM_KEYUP
case|:
block|{
name|int
name|nVirtKey
init|=
operator|(
name|int
operator|)
name|wParam
decl_stmt|;
name|long
name|lKeyData
init|=
operator|(
name|long
operator|)
name|lParam
decl_stmt|;
name|int
name|repCount
init|=
operator|(
name|lKeyData
operator|&
literal|0xffff
operator|)
decl_stmt|;
comment|// Bit 0-15
name|int
name|scanCode
init|=
operator|(
name|lKeyData
operator|&
literal|0xf0000
operator|)
operator|>>
literal|16
decl_stmt|;
comment|// Bit 16-23
name|bool
name|contextCode
init|=
operator|!
operator|!
operator|(
name|lKeyData
operator|&
literal|0x20000000
operator|)
decl_stmt|;
comment|// Bit 29
name|bool
name|prevState
init|=
operator|!
operator|!
operator|(
name|lKeyData
operator|&
literal|0x40000000
operator|)
decl_stmt|;
comment|// Bit 30
name|bool
name|transState
init|=
operator|!
operator|!
operator|(
name|lKeyData
operator|&
literal|0x80000000
operator|)
decl_stmt|;
comment|// Bit 31
name|parameters
operator|.
name|sprintf
argument_list|(
literal|"Virual-key(0x%x) Scancode(%d) Rep(%d) Contextcode(%d), Prev state(%d), Trans state(%d)"
argument_list|,
name|nVirtKey
argument_list|,
name|scanCode
argument_list|,
name|repCount
argument_list|,
name|contextCode
argument_list|,
name|prevState
argument_list|,
name|transState
argument_list|)
expr_stmt|;
block|}
break|break;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|WM_NCACTIVATE
case|case
name|WM_NCACTIVATE
case|:
block|{
name|parameters
operator|=
operator|(
name|msg
operator|.
name|wParam
condition|?
name|QLatin1String
argument_list|(
literal|"Active Titlebar"
argument_list|)
else|:
name|QLatin1String
argument_list|(
literal|"Inactive Titlebar"
argument_list|)
operator|)
expr_stmt|;
block|}
break|break;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|WM_MOUSEACTIVATE
case|case
name|WM_MOUSEACTIVATE
case|:
block|{
name|QString
name|mouseMsg
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
name|findWMstr
argument_list|(
name|HIWORD
argument_list|(
name|lParam
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|parameters
operator|.
name|sprintf
argument_list|(
literal|"TLW(0x%p) HittestCode(0x%x) MouseMsg(%s)"
argument_list|,
operator|(
name|void
operator|*
operator|)
name|wParam
argument_list|,
name|LOWORD
argument_list|(
name|lParam
argument_list|)
argument_list|,
name|mouseMsg
operator|.
name|toLatin1
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|WM_MOUSELEAVE
case|case
name|WM_MOUSELEAVE
case|:
break|break;
comment|// wParam& lParam not used
endif|#
directive|endif
ifdef|#
directive|ifdef
name|WM_MOUSEHOVER
case|case
name|WM_MOUSEHOVER
case|:
endif|#
directive|endif
ifdef|#
directive|ifdef
name|WM_MOUSEWHEEL
case|case
name|WM_MOUSEWHEEL
case|:
endif|#
directive|endif
ifdef|#
directive|ifdef
name|WM_MOUSEHWHEEL
case|case
name|WM_MOUSEHWHEEL
case|:
endif|#
directive|endif
ifdef|#
directive|ifdef
name|WM_LBUTTONDBLCLK
case|case
name|WM_LBUTTONDBLCLK
case|:
endif|#
directive|endif
ifdef|#
directive|ifdef
name|WM_LBUTTONDOWN
case|case
name|WM_LBUTTONDOWN
case|:
endif|#
directive|endif
ifdef|#
directive|ifdef
name|WM_LBUTTONUP
case|case
name|WM_LBUTTONUP
case|:
endif|#
directive|endif
ifdef|#
directive|ifdef
name|WM_MBUTTONDBLCLK
case|case
name|WM_MBUTTONDBLCLK
case|:
endif|#
directive|endif
ifdef|#
directive|ifdef
name|WM_MBUTTONDOWN
case|case
name|WM_MBUTTONDOWN
case|:
endif|#
directive|endif
ifdef|#
directive|ifdef
name|WM_MBUTTONUP
case|case
name|WM_MBUTTONUP
case|:
endif|#
directive|endif
ifdef|#
directive|ifdef
name|WM_RBUTTONDBLCLK
case|case
name|WM_RBUTTONDBLCLK
case|:
endif|#
directive|endif
ifdef|#
directive|ifdef
name|WM_RBUTTONDOWN
case|case
name|WM_RBUTTONDOWN
case|:
endif|#
directive|endif
ifdef|#
directive|ifdef
name|WM_RBUTTONUP
case|case
name|WM_RBUTTONUP
case|:
endif|#
directive|endif
ifdef|#
directive|ifdef
name|WM_MOUSEMOVE
case|case
name|WM_MOUSEMOVE
case|:
block|{
name|QString
name|vrtKeys
init|=
name|flagCheck
argument_list|(
name|wParam
argument_list|,
name|FLGSTR
argument_list|(
name|MK_CONTROL
argument_list|)
argument_list|,
name|FLGSTR
argument_list|(
name|MK_LBUTTON
argument_list|)
argument_list|,
name|FLGSTR
argument_list|(
name|MK_MBUTTON
argument_list|)
argument_list|,
name|FLGSTR
argument_list|(
name|MK_RBUTTON
argument_list|)
argument_list|,
name|FLGSTR
argument_list|(
name|MK_SHIFT
argument_list|)
argument_list|,
ifdef|#
directive|ifdef
name|MK_XBUTTON1
name|FLGSTR
argument_list|(
name|MK_XBUTTON1
argument_list|)
argument_list|,
endif|#
directive|endif
ifdef|#
directive|ifdef
name|MK_XBUTTON2
name|FLGSTR
argument_list|(
name|MK_XBUTTON2
argument_list|)
argument_list|,
endif|#
directive|endif
name|FLAG_STRING
argument_list|()
argument_list|)
decl_stmt|;
name|parameters
operator|.
name|sprintf
argument_list|(
literal|"x,y(%4d,%4d) Virtual Keys(%s)"
argument_list|,
name|GET_X_LPARAM
argument_list|(
name|lParam
argument_list|)
argument_list|,
name|GET_Y_LPARAM
argument_list|(
name|lParam
argument_list|)
argument_list|,
name|vrtKeys
operator|.
name|toLatin1
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|WM_MOVE
case|case
name|WM_MOVE
case|:
name|parameters
operator|.
name|sprintf
argument_list|(
literal|"x,y(%4d,%4d)"
argument_list|,
name|LOWORD
argument_list|(
name|lParam
argument_list|)
argument_list|,
name|HIWORD
argument_list|(
name|lParam
argument_list|)
argument_list|)
expr_stmt|;
break|break;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|WM_PAINT
argument_list|)
operator|&&
name|defined
argument_list|(
name|WM_ERASEBKGND
argument_list|)
case|case
name|WM_ERASEBKGND
case|:
case|case
name|WM_PAINT
case|:
name|parameters
operator|.
name|sprintf
argument_list|(
literal|"hdc(0x%p)"
argument_list|,
operator|(
name|void
operator|*
operator|)
name|wParam
argument_list|)
expr_stmt|;
break|break;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|WM_QUERYNEWPALETTE
case|case
name|WM_QUERYNEWPALETTE
case|:
break|break;
comment|// lParam& wParam are unused
endif|#
directive|endif
ifdef|#
directive|ifdef
name|WM_SETCURSOR
case|case
name|WM_SETCURSOR
case|:
block|{
name|QString
name|mouseMsg
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
name|findWMstr
argument_list|(
name|HIWORD
argument_list|(
name|lParam
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|parameters
operator|.
name|sprintf
argument_list|(
literal|"HitTestCode(0x%x) MouseMsg(%s)"
argument_list|,
name|LOWORD
argument_list|(
name|lParam
argument_list|)
argument_list|,
name|mouseMsg
operator|.
name|toLatin1
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|WM_SETFOCUS
case|case
name|WM_SETFOCUS
case|:
name|parameters
operator|.
name|sprintf
argument_list|(
literal|"Lost Focus (0x%p)"
argument_list|,
operator|(
name|void
operator|*
operator|)
name|wParam
argument_list|)
expr_stmt|;
break|break;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|WM_SETTEXT
case|case
name|WM_SETTEXT
case|:
name|parameters
operator|.
name|sprintf
argument_list|(
literal|"Set Text (%s)"
argument_list|,
name|QString
argument_list|(
operator|(
name|QChar
operator|*
operator|)
name|lParam
argument_list|,
operator|(
name|int
operator|)
name|wcslen
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|wchar_t
operator|*
argument_list|>
argument_list|(
name|lParam
argument_list|)
argument_list|)
argument_list|)
operator|.
name|toLatin1
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
comment|//Unicode string
break|break;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|WM_SIZE
case|case
name|WM_SIZE
case|:
block|{
name|QString
name|showMode
init|=
name|valueCheck
argument_list|(
name|wParam
argument_list|,
name|FLGSTR
argument_list|(
name|SIZE_MAXHIDE
argument_list|)
argument_list|,
name|FLGSTR
argument_list|(
name|SIZE_MAXIMIZED
argument_list|)
argument_list|,
name|FLGSTR
argument_list|(
name|SIZE_MAXSHOW
argument_list|)
argument_list|,
name|FLGSTR
argument_list|(
name|SIZE_MINIMIZED
argument_list|)
argument_list|,
name|FLGSTR
argument_list|(
name|SIZE_RESTORED
argument_list|)
argument_list|,
name|FLAG_STRING
argument_list|()
argument_list|)
decl_stmt|;
name|parameters
operator|.
name|sprintf
argument_list|(
literal|"w,h(%4d,%4d) showmode(%s)"
argument_list|,
name|LOWORD
argument_list|(
name|lParam
argument_list|)
argument_list|,
name|HIWORD
argument_list|(
name|lParam
argument_list|)
argument_list|,
name|showMode
operator|.
name|toLatin1
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|WM_WINDOWPOSCHANGED
case|case
name|WM_WINDOWPOSCHANGED
case|:
block|{
name|LPWINDOWPOS
name|winPos
init|=
operator|(
name|LPWINDOWPOS
operator|)
name|lParam
decl_stmt|;
if|if
condition|(
operator|!
name|winPos
condition|)
break|break;
name|QString
name|hwndAfter
init|=
name|valueCheck
argument_list|(
name|quint64
argument_list|(
name|winPos
operator|->
name|hwndInsertAfter
argument_list|)
argument_list|,
name|FLAG_STRING
argument_list|(
operator|(
name|qptrdiff
operator|)
name|HWND_BOTTOM
argument_list|,
literal|"HWND_BOTTOM"
argument_list|)
argument_list|,
name|FLAG_STRING
argument_list|(
operator|(
name|qptrdiff
operator|)
name|HWND_NOTOPMOST
argument_list|,
literal|"HWND_NOTOPMOST"
argument_list|)
argument_list|,
name|FLAG_STRING
argument_list|(
operator|(
name|qptrdiff
operator|)
name|HWND_TOP
argument_list|,
literal|"HWND_TOP"
argument_list|)
argument_list|,
name|FLAG_STRING
argument_list|(
operator|(
name|qptrdiff
operator|)
name|HWND_TOPMOST
argument_list|,
literal|"HWND_TOPMOST"
argument_list|)
argument_list|,
name|FLAG_STRING
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|hwndAfter
operator|.
name|isEmpty
argument_list|()
condition|)
name|hwndAfter
operator|=
name|QString
operator|::
name|number
argument_list|(
operator|(
name|quintptr
operator|)
name|winPos
operator|->
name|hwndInsertAfter
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|QString
name|flags
init|=
name|flagCheck
argument_list|(
name|winPos
operator|->
name|flags
argument_list|,
name|FLGSTR
argument_list|(
name|SWP_DRAWFRAME
argument_list|)
argument_list|,
name|FLGSTR
argument_list|(
name|SWP_FRAMECHANGED
argument_list|)
argument_list|,
name|FLGSTR
argument_list|(
name|SWP_HIDEWINDOW
argument_list|)
argument_list|,
name|FLGSTR
argument_list|(
name|SWP_NOACTIVATE
argument_list|)
argument_list|,
ifdef|#
directive|ifdef
name|SWP_NOCOPYBITS
name|FLGSTR
argument_list|(
name|SWP_NOCOPYBITS
argument_list|)
argument_list|,
endif|#
directive|endif
name|FLGSTR
argument_list|(
name|SWP_NOMOVE
argument_list|)
argument_list|,
name|FLGSTR
argument_list|(
name|SWP_NOOWNERZORDER
argument_list|)
argument_list|,
name|FLGSTR
argument_list|(
name|SWP_NOREDRAW
argument_list|)
argument_list|,
name|FLGSTR
argument_list|(
name|SWP_NOREPOSITION
argument_list|)
argument_list|,
ifdef|#
directive|ifdef
name|SWP_NOSENDCHANGING
name|FLGSTR
argument_list|(
name|SWP_NOSENDCHANGING
argument_list|)
argument_list|,
endif|#
directive|endif
name|FLGSTR
argument_list|(
name|SWP_NOSIZE
argument_list|)
argument_list|,
name|FLGSTR
argument_list|(
name|SWP_NOZORDER
argument_list|)
argument_list|,
name|FLGSTR
argument_list|(
name|SWP_SHOWWINDOW
argument_list|)
argument_list|,
name|FLAG_STRING
argument_list|()
argument_list|)
decl_stmt|;
name|parameters
operator|.
name|sprintf
argument_list|(
literal|"x,y(%4d,%4d) w,h(%4d,%4d) flags(%s) hwndAfter(%s)"
argument_list|,
name|winPos
operator|->
name|x
argument_list|,
name|winPos
operator|->
name|y
argument_list|,
name|winPos
operator|->
name|cx
argument_list|,
name|winPos
operator|->
name|cy
argument_list|,
name|flags
operator|.
name|toLatin1
argument_list|()
operator|.
name|data
argument_list|()
argument_list|,
name|hwndAfter
operator|.
name|toLatin1
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
endif|#
directive|endif
default|default:
name|parameters
operator|.
name|sprintf
argument_list|(
literal|"wParam(0x%p) lParam(0x%p)"
argument_list|,
operator|(
name|void
operator|*
operator|)
name|wParam
argument_list|,
operator|(
name|void
operator|*
operator|)
name|lParam
argument_list|)
expr_stmt|;
break|break;
block|}
comment|// Yes, we want to give the WM_ names 20 chars of space before showing the
comment|// decoded message, since some of the common messages are quite long, and
comment|// we don't want the decoded information to vary in output position
name|QString
name|message
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"%1: "
argument_list|)
operator|.
name|arg
argument_list|(
name|wmmsg
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|message
operator|+=
name|rawParameters
expr_stmt|;
name|message
operator|+=
name|parameters
expr_stmt|;
return|return
name|message
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|operator <<
name|QDebug
name|operator
name|<<
parameter_list|(
name|QDebug
name|dbg
parameter_list|,
specifier|const
name|MSG
modifier|&
name|msg
parameter_list|)
block|{
name|dbg
operator|<<
name|decodeMSG
argument_list|(
name|msg
argument_list|)
expr_stmt|;
return|return
name|dbg
operator|.
name|nospace
argument_list|()
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
