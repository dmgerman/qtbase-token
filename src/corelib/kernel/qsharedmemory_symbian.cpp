begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qsharedmemory.h"
end_include
begin_include
include|#
directive|include
file|"qsharedmemory_p.h"
end_include
begin_include
include|#
directive|include
file|"qsystemsemaphore.h"
end_include
begin_include
include|#
directive|include
file|"qcore_symbian_p.h"
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_SHAREDMEMORY
end_ifndef
begin_define
DECL|macro|QSHAREDMEMORY_DEBUG
define|#
directive|define
name|QSHAREDMEMORY_DEBUG
end_define
begin_constructor
DECL|function|QSharedMemoryPrivate
name|QSharedMemoryPrivate
operator|::
name|QSharedMemoryPrivate
parameter_list|()
member_init_list|:
name|QObjectPrivate
argument_list|()
member_init_list|,
name|memory
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|size
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|error
argument_list|(
name|QSharedMemory
operator|::
name|NoError
argument_list|)
member_init_list|,
name|systemSemaphore
argument_list|(
name|QString
argument_list|()
argument_list|)
member_init_list|,
name|lockedByMe
argument_list|(
literal|false
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|setErrorString
name|void
name|QSharedMemoryPrivate
operator|::
name|setErrorString
parameter_list|(
specifier|const
name|QString
modifier|&
name|function
parameter_list|,
name|TInt
name|errorCode
parameter_list|)
block|{
if|if
condition|(
name|errorCode
operator|==
name|KErrNone
condition|)
return|return;
switch|switch
condition|(
name|errorCode
condition|)
block|{
case|case
name|KErrAlreadyExists
case|:
name|error
operator|=
name|QSharedMemory
operator|::
name|AlreadyExists
expr_stmt|;
name|errorString
operator|=
name|QSharedMemory
operator|::
name|tr
argument_list|(
literal|"%1: already exists"
argument_list|)
operator|.
name|arg
argument_list|(
name|function
argument_list|)
expr_stmt|;
break|break;
case|case
name|KErrNotFound
case|:
name|error
operator|=
name|QSharedMemory
operator|::
name|NotFound
expr_stmt|;
name|errorString
operator|=
name|QSharedMemory
operator|::
name|tr
argument_list|(
literal|"%1: doesn't exists"
argument_list|)
operator|.
name|arg
argument_list|(
name|function
argument_list|)
expr_stmt|;
break|break;
case|case
name|KErrArgument
case|:
name|error
operator|=
name|QSharedMemory
operator|::
name|InvalidSize
expr_stmt|;
name|errorString
operator|=
name|QSharedMemory
operator|::
name|tr
argument_list|(
literal|"%1: invalid size"
argument_list|)
operator|.
name|arg
argument_list|(
name|function
argument_list|)
expr_stmt|;
break|break;
case|case
name|KErrNoMemory
case|:
name|error
operator|=
name|QSharedMemory
operator|::
name|OutOfResources
expr_stmt|;
name|errorString
operator|=
name|QSharedMemory
operator|::
name|tr
argument_list|(
literal|"%1: out of resources"
argument_list|)
operator|.
name|arg
argument_list|(
name|function
argument_list|)
expr_stmt|;
break|break;
case|case
name|KErrPermissionDenied
case|:
name|error
operator|=
name|QSharedMemory
operator|::
name|PermissionDenied
expr_stmt|;
name|errorString
operator|=
name|QSharedMemory
operator|::
name|tr
argument_list|(
literal|"%1: permission denied"
argument_list|)
operator|.
name|arg
argument_list|(
name|function
argument_list|)
expr_stmt|;
break|break;
default|default:
name|errorString
operator|=
name|QSharedMemory
operator|::
name|tr
argument_list|(
literal|"%1: unknown error %2"
argument_list|)
operator|.
name|arg
argument_list|(
name|function
argument_list|)
operator|.
name|arg
argument_list|(
name|errorCode
argument_list|)
expr_stmt|;
name|error
operator|=
name|QSharedMemory
operator|::
name|UnknownError
expr_stmt|;
if|#
directive|if
name|defined
name|QSHAREDMEMORY_DEBUG
name|qDebug
argument_list|()
operator|<<
name|errorString
operator|<<
literal|"key"
operator|<<
name|key
expr_stmt|;
endif|#
directive|endif
block|}
block|}
end_function
begin_function
DECL|function|handle
name|key_t
name|QSharedMemoryPrivate
operator|::
name|handle
parameter_list|()
block|{
comment|// Not really cost effective to check here if shared memory is attachable, as it requires
comment|// exactly the same call as attaching, so always assume handle is valid and return failure
comment|// from attach.
return|return
literal|1
return|;
block|}
end_function
begin_function
DECL|function|cleanHandle
name|bool
name|QSharedMemoryPrivate
operator|::
name|cleanHandle
parameter_list|()
block|{
name|chunk
operator|.
name|Close
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|create
name|bool
name|QSharedMemoryPrivate
operator|::
name|create
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|QString
name|function
init|=
name|QLatin1String
argument_list|(
literal|"QSharedMemory::create"
argument_list|)
decl_stmt|;
if|if
condition|(
name|nativeKey
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|error
operator|=
name|QSharedMemory
operator|::
name|KeyError
expr_stmt|;
name|errorString
operator|=
name|QSharedMemory
operator|::
name|tr
argument_list|(
literal|"%1: key error"
argument_list|)
operator|.
name|arg
argument_list|(
name|function
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|TPtrC
name|ptr
argument_list|(
name|qt_QString2TPtrC
argument_list|(
name|nativeKey
argument_list|)
argument_list|)
decl_stmt|;
name|TInt
name|err
init|=
name|chunk
operator|.
name|CreateGlobal
argument_list|(
name|ptr
argument_list|,
name|size
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|setErrorString
argument_list|(
name|function
argument_list|,
name|err
argument_list|)
expr_stmt|;
if|if
condition|(
name|err
operator|!=
name|KErrNone
condition|)
return|return
literal|false
return|;
comment|// Zero out the created chunk
name|Mem
operator|::
name|FillZ
argument_list|(
name|chunk
operator|.
name|Base
argument_list|()
argument_list|,
name|chunk
operator|.
name|Size
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|attach
name|bool
name|QSharedMemoryPrivate
operator|::
name|attach
parameter_list|(
name|QSharedMemory
operator|::
name|AccessMode
comment|/* mode */
parameter_list|)
block|{
comment|// Grab a pointer to the memory block
if|if
condition|(
operator|!
name|chunk
operator|.
name|Handle
argument_list|()
condition|)
block|{
name|QString
name|function
init|=
name|QLatin1String
argument_list|(
literal|"QSharedMemory::handle"
argument_list|)
decl_stmt|;
if|if
condition|(
name|nativeKey
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|error
operator|=
name|QSharedMemory
operator|::
name|KeyError
expr_stmt|;
name|errorString
operator|=
name|QSharedMemory
operator|::
name|tr
argument_list|(
literal|"%1: unable to make key"
argument_list|)
operator|.
name|arg
argument_list|(
name|function
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|TPtrC
name|ptr
argument_list|(
name|qt_QString2TPtrC
argument_list|(
name|nativeKey
argument_list|)
argument_list|)
decl_stmt|;
name|TInt
name|err
init|=
name|KErrNoMemory
decl_stmt|;
name|err
operator|=
name|chunk
operator|.
name|OpenGlobal
argument_list|(
name|ptr
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|err
operator|!=
name|KErrNone
condition|)
block|{
name|setErrorString
argument_list|(
name|function
argument_list|,
name|err
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
name|size
operator|=
name|chunk
operator|.
name|Size
argument_list|()
expr_stmt|;
name|memory
operator|=
name|chunk
operator|.
name|Base
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|detach
name|bool
name|QSharedMemoryPrivate
operator|::
name|detach
parameter_list|()
block|{
name|chunk
operator|.
name|Close
argument_list|()
expr_stmt|;
name|memory
operator|=
literal|0
expr_stmt|;
name|size
operator|=
literal|0
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QT_NO_SHAREDMEMORY
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
