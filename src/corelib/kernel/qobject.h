begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QOBJECT_H
end_ifndef
begin_define
DECL|macro|QOBJECT_H
define|#
directive|define
name|QOBJECT_H
end_define
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QOBJECT
end_ifndef
begin_include
include|#
directive|include
file|<QtCore/qobjectdefs.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qstring.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qbytearray.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qlist.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|QT_INCLUDE_COMPAT
end_ifdef
begin_include
include|#
directive|include
file|<QtCore/qcoreevent.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<QtCore/qscopedpointer.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qmetatype.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qobject_impl.h>
end_include
begin_decl_stmt
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
DECL|variable|QEvent
name|class
name|QEvent
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QTimerEvent
name|class
name|QTimerEvent
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QChildEvent
name|class
name|QChildEvent
decl_stmt|;
end_decl_stmt
begin_struct_decl
struct_decl|struct
name|QMetaObject
struct_decl|;
end_struct_decl
begin_decl_stmt
DECL|variable|QVariant
name|class
name|QVariant
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QObjectPrivate
name|class
name|QObjectPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QObject
name|class
name|QObject
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QThread
name|class
name|QThread
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QWidget
name|class
name|QWidget
decl_stmt|;
end_decl_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_REGEXP
end_ifndef
begin_decl_stmt
DECL|variable|QRegExp
name|class
name|QRegExp
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_REGEXP
end_ifndef
begin_decl_stmt
DECL|variable|QRegularExpression
name|class
name|QRegularExpression
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_USERDATA
end_ifndef
begin_decl_stmt
DECL|variable|QObjectUserData
name|class
name|QObjectUserData
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_typedef
DECL|typedef|QObjectList
typedef|typedef
name|QList
operator|<
name|QObject
operator|*
operator|>
name|QObjectList
expr_stmt|;
end_typedef
begin_decl_stmt
name|Q_CORE_EXPORT
name|void
name|qt_qFindChildren_helper
argument_list|(
specifier|const
name|QObject
operator|*
name|parent
argument_list|,
specifier|const
name|QString
operator|&
name|name
argument_list|,
specifier|const
name|QMetaObject
operator|&
name|mo
argument_list|,
name|QList
operator|<
name|void
operator|*
operator|>
operator|*
name|list
argument_list|,
name|Qt
operator|::
name|FindChildOptions
name|options
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|Q_CORE_EXPORT
name|void
name|qt_qFindChildren_helper
argument_list|(
specifier|const
name|QObject
operator|*
name|parent
argument_list|,
specifier|const
name|QRegExp
operator|&
name|re
argument_list|,
specifier|const
name|QMetaObject
operator|&
name|mo
argument_list|,
name|QList
operator|<
name|void
operator|*
operator|>
operator|*
name|list
argument_list|,
name|Qt
operator|::
name|FindChildOptions
name|options
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|Q_CORE_EXPORT
name|void
name|qt_qFindChildren_helper
argument_list|(
specifier|const
name|QObject
operator|*
name|parent
argument_list|,
specifier|const
name|QRegularExpression
operator|&
name|re
argument_list|,
specifier|const
name|QMetaObject
operator|&
name|mo
argument_list|,
name|QList
operator|<
name|void
operator|*
operator|>
operator|*
name|list
argument_list|,
name|Qt
operator|::
name|FindChildOptions
name|options
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|Q_CORE_EXPORT
name|QObject
modifier|*
name|qt_qFindChild_helper
argument_list|(
specifier|const
name|QObject
operator|*
name|parent
argument_list|,
specifier|const
name|QString
operator|&
name|name
argument_list|,
specifier|const
name|QMetaObject
operator|&
name|mo
argument_list|,
name|Qt
operator|::
name|FindChildOptions
name|options
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
if|#
directive|if
name|defined
argument_list|(
name|__INTEL_COMPILER
argument_list|)
operator|&&
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
name|Q_CORE_EXPORT
endif|#
directive|endif
name|QObjectData
block|{
name|public
label|:
name|virtual
operator|~
name|QObjectData
argument_list|()
operator|=
literal|0
expr_stmt|;
name|QObject
modifier|*
name|q_ptr
decl_stmt|;
name|QObject
modifier|*
name|parent
decl_stmt|;
name|QObjectList
name|children
decl_stmt|;
name|uint
name|isWidget
range|:
literal|1
decl_stmt|;
name|uint
name|blockSig
range|:
literal|1
decl_stmt|;
name|uint
name|wasDeleted
range|:
literal|1
decl_stmt|;
name|uint
name|isDeletingChildren
range|:
literal|1
decl_stmt|;
name|uint
name|sendChildEvents
range|:
literal|1
decl_stmt|;
name|uint
name|receiveChildEvents
range|:
literal|1
decl_stmt|;
name|uint
name|isWindow
range|:
literal|1
decl_stmt|;
comment|//for QWindow
name|uint
name|unused
range|:
literal|25
decl_stmt|;
name|int
name|postedEvents
decl_stmt|;
name|QMetaObject
modifier|*
name|metaObject
decl_stmt|;
comment|// assert dynamic
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
name|class
name|Q_CORE_EXPORT
name|QObject
block|{
name|Q_OBJECT
name|Q_PROPERTY
argument_list|(
name|QString
name|objectName
name|READ
name|objectName
name|WRITE
name|setObjectName
name|NOTIFY
name|objectNameChanged
argument_list|)
name|Q_DECLARE_PRIVATE
argument_list|(
name|QObject
argument_list|)
name|public
range|:
name|Q_INVOKABLE
name|explicit
name|QObject
argument_list|(
name|QObject
operator|*
name|parent
operator|=
literal|0
argument_list|)
decl_stmt|;
name|virtual
operator|~
name|QObject
argument_list|()
expr_stmt|;
name|virtual
name|bool
name|event
parameter_list|(
name|QEvent
modifier|*
parameter_list|)
function_decl|;
name|virtual
name|bool
name|eventFilter
parameter_list|(
name|QObject
modifier|*
parameter_list|,
name|QEvent
modifier|*
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|qdoc
specifier|static
name|QString
name|tr
parameter_list|(
specifier|const
name|char
modifier|*
name|sourceText
parameter_list|,
specifier|const
name|char
modifier|*
name|comment
init|=
literal|0
parameter_list|,
name|int
name|n
init|=
operator|-
literal|1
parameter_list|)
function_decl|;
specifier|static
name|QString
name|trUtf8
parameter_list|(
specifier|const
name|char
modifier|*
name|sourceText
parameter_list|,
specifier|const
name|char
modifier|*
name|comment
init|=
literal|0
parameter_list|,
name|int
name|n
init|=
operator|-
literal|1
parameter_list|)
function_decl|;
name|virtual
specifier|const
name|QMetaObject
operator|*
name|metaObject
argument_list|()
specifier|const
expr_stmt|;
specifier|static
specifier|const
name|QMetaObject
name|staticMetaObject
decl_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|QT_NO_TRANSLATION
specifier|static
name|QString
name|tr
parameter_list|(
specifier|const
name|char
modifier|*
name|sourceText
parameter_list|,
specifier|const
name|char
modifier|*
init|=
literal|0
parameter_list|,
name|int
init|=
operator|-
literal|1
parameter_list|)
block|{
return|return
name|QString
operator|::
name|fromLatin1
argument_list|(
name|sourceText
argument_list|)
return|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_TEXTCODEC
specifier|static
name|QString
name|trUtf8
parameter_list|(
specifier|const
name|char
modifier|*
name|sourceText
parameter_list|,
specifier|const
name|char
modifier|*
init|=
literal|0
parameter_list|,
name|int
init|=
operator|-
literal|1
parameter_list|)
block|{
return|return
name|QString
operator|::
name|fromUtf8
argument_list|(
name|sourceText
argument_list|)
return|;
block|}
endif|#
directive|endif
endif|#
directive|endif
comment|//QT_NO_TRANSLATION
name|QString
name|objectName
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setObjectName
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
function_decl|;
specifier|inline
name|bool
name|isWidgetType
argument_list|()
specifier|const
block|{
return|return
name|d_ptr
operator|->
name|isWidget
return|;
block|}
specifier|inline
name|bool
name|isWindowType
argument_list|()
specifier|const
block|{
return|return
name|d_ptr
operator|->
name|isWindow
return|;
block|}
specifier|inline
name|bool
name|signalsBlocked
argument_list|()
specifier|const
block|{
return|return
name|d_ptr
operator|->
name|blockSig
return|;
block|}
name|bool
name|blockSignals
parameter_list|(
name|bool
name|b
parameter_list|)
function_decl|;
name|QThread
operator|*
name|thread
argument_list|()
specifier|const
expr_stmt|;
name|void
name|moveToThread
parameter_list|(
name|QThread
modifier|*
name|thread
parameter_list|)
function_decl|;
name|int
name|startTimer
argument_list|(
name|int
name|interval
argument_list|,
name|Qt
operator|::
name|TimerType
name|timerType
operator|=
name|Qt
operator|::
name|CoarseTimer
argument_list|)
decl_stmt|;
name|void
name|killTimer
parameter_list|(
name|int
name|id
parameter_list|)
function_decl|;
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|T
name|findChild
argument_list|(
argument|const QString&aName = QString()
argument_list|,
argument|Qt::FindChildOptions options = Qt::FindChildrenRecursively
argument_list|)
specifier|const
block|{
return|return
name|static_cast
operator|<
name|T
operator|>
operator|(
name|qt_qFindChild_helper
argument_list|(
name|this
argument_list|,
name|aName
argument_list|,
name|reinterpret_cast
operator|<
name|T
operator|>
operator|(
literal|0
operator|)
operator|->
name|staticMetaObject
argument_list|,
name|options
argument_list|)
operator|)
return|;
block|}
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|QList
operator|<
name|T
operator|>
name|findChildren
argument_list|(
argument|const QString&aName = QString()
argument_list|,
argument|Qt::FindChildOptions options = Qt::FindChildrenRecursively
argument_list|)
specifier|const
block|{
name|QList
operator|<
name|T
operator|>
name|list
block|;
expr|union
block|{
name|QList
operator|<
name|T
operator|>
operator|*
name|typedList
block|;
name|QList
operator|<
name|void
operator|*
operator|>
operator|*
name|voidList
block|;         }
name|u
block|;
name|u
operator|.
name|typedList
operator|=
operator|&
name|list
block|;
name|qt_qFindChildren_helper
argument_list|(
name|this
argument_list|,
name|aName
argument_list|,
name|reinterpret_cast
operator|<
name|T
operator|>
operator|(
literal|0
operator|)
operator|->
name|staticMetaObject
argument_list|,
name|u
operator|.
name|voidList
argument_list|,
name|options
argument_list|)
block|;
return|return
name|list
return|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_REGEXP
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|QList
operator|<
name|T
operator|>
name|findChildren
argument_list|(
argument|const QRegExp&re
argument_list|,
argument|Qt::FindChildOptions options = Qt::FindChildrenRecursively
argument_list|)
specifier|const
block|{
name|QList
operator|<
name|T
operator|>
name|list
block|;
expr|union
block|{
name|QList
operator|<
name|T
operator|>
operator|*
name|typedList
block|;
name|QList
operator|<
name|void
operator|*
operator|>
operator|*
name|voidList
block|;         }
name|u
block|;
name|u
operator|.
name|typedList
operator|=
operator|&
name|list
block|;
name|qt_qFindChildren_helper
argument_list|(
name|this
argument_list|,
name|re
argument_list|,
name|reinterpret_cast
operator|<
name|T
operator|>
operator|(
literal|0
operator|)
operator|->
name|staticMetaObject
argument_list|,
name|u
operator|.
name|voidList
argument_list|,
name|options
argument_list|)
block|;
return|return
name|list
return|;
block|}
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_REGEXP
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|QList
operator|<
name|T
operator|>
name|findChildren
argument_list|(
argument|const QRegularExpression&re
argument_list|,
argument|Qt::FindChildOptions options = Qt::FindChildrenRecursively
argument_list|)
specifier|const
block|{
name|QList
operator|<
name|T
operator|>
name|list
block|;
expr|union
block|{
name|QList
operator|<
name|T
operator|>
operator|*
name|typedList
block|;
name|QList
operator|<
name|void
operator|*
operator|>
operator|*
name|voidList
block|;         }
name|u
block|;
name|u
operator|.
name|typedList
operator|=
operator|&
name|list
block|;
name|qt_qFindChildren_helper
argument_list|(
name|this
argument_list|,
name|re
argument_list|,
name|reinterpret_cast
operator|<
name|T
operator|>
operator|(
literal|0
operator|)
operator|->
name|staticMetaObject
argument_list|,
name|u
operator|.
name|voidList
argument_list|,
name|options
argument_list|)
block|;
return|return
name|list
return|;
block|}
endif|#
directive|endif
specifier|inline
specifier|const
name|QObjectList
operator|&
name|children
argument_list|()
specifier|const
block|{
return|return
name|d_ptr
operator|->
name|children
return|;
block|}
name|void
name|setParent
parameter_list|(
name|QObject
modifier|*
parameter_list|)
function_decl|;
name|void
name|installEventFilter
parameter_list|(
name|QObject
modifier|*
parameter_list|)
function_decl|;
name|void
name|removeEventFilter
parameter_list|(
name|QObject
modifier|*
parameter_list|)
function_decl|;
specifier|static
name|QMetaObject
operator|::
name|Connection
name|connect
argument_list|(
specifier|const
name|QObject
operator|*
name|sender
argument_list|,
specifier|const
name|char
operator|*
name|signal
argument_list|,
specifier|const
name|QObject
operator|*
name|receiver
argument_list|,
specifier|const
name|char
operator|*
name|member
argument_list|,
name|Qt
operator|::
name|ConnectionType
operator|=
name|Qt
operator|::
name|AutoConnection
argument_list|)
expr_stmt|;
specifier|static
name|QMetaObject
operator|::
name|Connection
name|connect
argument_list|(
argument|const QObject *sender
argument_list|,
argument|const QMetaMethod&signal
argument_list|,
argument|const QObject *receiver
argument_list|,
argument|const QMetaMethod&method
argument_list|,
argument|Qt::ConnectionType type = Qt::AutoConnection
argument_list|)
expr_stmt|;
specifier|inline
name|QMetaObject
operator|::
name|Connection
name|connect
argument_list|(
argument|const QObject *sender
argument_list|,
argument|const char *signal
argument_list|,
argument|const char *member
argument_list|,
argument|Qt::ConnectionType type = Qt::AutoConnection
argument_list|)
specifier|const
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_QDOC
specifier|static
name|QMetaObject
operator|::
name|Connection
name|connect
argument_list|(
argument|const QObject *sender
argument_list|,
argument|PointerToMemberFunction signal
argument_list|,
argument|const QObject *receiver
argument_list|,
argument|PointerToMemberFunction method
argument_list|,
argument|Qt::ConnectionType type
argument_list|)
expr_stmt|;
specifier|static
name|QMetaObject
operator|::
name|Connection
name|connect
argument_list|(
argument|const QObject *sender
argument_list|,
argument|PointerToMemberFunction signal
argument_list|,
argument|Functor functor
argument_list|)
expr_stmt|;
else|#
directive|else
comment|//Connect a signal to a pointer to qobject member function
name|template
operator|<
name|typename
name|Func1
operator|,
name|typename
name|Func2
operator|>
specifier|static
specifier|inline
name|QMetaObject
operator|::
name|Connection
name|connect
argument_list|(
argument|const typename QtPrivate::FunctionPointer<Func1>::Object *sender
argument_list|,
argument|Func1 signal
argument_list|,
argument|const typename QtPrivate::FunctionPointer<Func2>::Object *receiver
argument_list|,
argument|Func2 slot
argument_list|,
argument|Qt::ConnectionType type = Qt::AutoConnection
argument_list|)
block|{
typedef|typedef
name|QtPrivate
operator|::
name|FunctionPointer
operator|<
name|Func1
operator|>
name|SignalType
expr_stmt|;
typedef|typedef
name|QtPrivate
operator|::
name|FunctionPointer
operator|<
name|Func2
operator|>
name|SlotType
expr_stmt|;
name|reinterpret_cast
operator|<
name|typename
name|SignalType
operator|::
name|Object
operator|*
operator|>
operator|(
literal|0
operator|)
operator|->
name|qt_check_for_QOBJECT_macro
argument_list|(
argument|*reinterpret_cast<typename SignalType::Object *>(
literal|0
argument|)
argument_list|)
expr_stmt|;
comment|//compilation error if the arguments does not match.
name|Q_STATIC_ASSERT_X
argument_list|(
name|int
argument_list|(
name|SignalType
operator|::
name|ArgumentCount
argument_list|)
operator|>=
name|int
argument_list|(
name|SlotType
operator|::
name|ArgumentCount
argument_list|)
argument_list|,
literal|"The slot requires more arguments than the signal provides."
argument_list|)
expr_stmt|;
name|Q_STATIC_ASSERT_X
argument_list|(
operator|(
name|QtPrivate
operator|::
name|CheckCompatibleArguments
operator|<
name|typename
name|SignalType
operator|::
name|Arguments
operator|,
name|typename
name|SlotType
operator|::
name|Arguments
operator|>
operator|::
name|value
operator|)
argument_list|,
literal|"Signal and slot arguments are not compatible."
argument_list|)
expr_stmt|;
name|Q_STATIC_ASSERT_X
argument_list|(
operator|(
name|QtPrivate
operator|::
name|AreArgumentsCompatible
operator|<
name|typename
name|SlotType
operator|::
name|ReturnType
operator|,
name|typename
name|SignalType
operator|::
name|ReturnType
operator|>
operator|::
name|value
operator|)
argument_list|,
literal|"Return type of the slot is not compatible with the return type of the signal."
argument_list|)
expr_stmt|;
specifier|const
name|int
modifier|*
name|types
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|Qt
operator|::
name|QueuedConnection
operator|||
name|type
operator|==
name|Qt
operator|::
name|BlockingQueuedConnection
condition|)
name|types
operator|=
name|QtPrivate
operator|::
name|ConnectionTypes
operator|<
name|typename
name|SignalType
operator|::
name|Arguments
operator|>
operator|::
name|types
argument_list|()
expr_stmt|;
return|return
name|connectImpl
argument_list|(
argument|sender
argument_list|,
argument|reinterpret_cast<void **>(&signal)
argument_list|,
argument|receiver
argument_list|,
argument|reinterpret_cast<void **>(&slot)
argument_list|,
argument|new QSlotObject<Func2
argument_list|,
argument|typename QtPrivate::List_Left<typename SignalType::Arguments
argument_list|,
argument|SlotType::ArgumentCount>::Value
argument_list|,
argument|typename SignalType::ReturnType>(slot)
argument_list|,
argument|type
argument_list|,
argument|types
argument_list|,
argument|&SignalType::Object::staticMetaObject
argument_list|)
return|;
block|}
end_decl_stmt
begin_comment
comment|//connect to a function pointer  (not a member)
end_comment
begin_expr_stmt
name|template
operator|<
name|typename
name|Func1
operator|,
name|typename
name|Func2
operator|>
specifier|static
specifier|inline
name|typename
name|QtPrivate
operator|::
name|QEnableIf
operator|<
name|int
argument_list|(
name|QtPrivate
operator|::
name|FunctionPointer
operator|<
name|Func2
operator|>
operator|::
name|ArgumentCount
argument_list|)
operator|>=
literal|0
operator|,
name|QMetaObject
operator|::
name|Connection
operator|>
operator|::
name|Type
name|connect
argument_list|(
argument|const typename QtPrivate::FunctionPointer<Func1>::Object *sender
argument_list|,
argument|Func1 signal
argument_list|,
argument|Func2 slot
argument_list|)
block|{
typedef|typedef
name|QtPrivate
operator|::
name|FunctionPointer
operator|<
name|Func1
operator|>
name|SignalType
expr_stmt|;
end_expr_stmt
begin_typedef
typedef|typedef
name|QtPrivate
operator|::
name|FunctionPointer
operator|<
name|Func2
operator|>
name|SlotType
expr_stmt|;
end_typedef
begin_comment
comment|//compilation error if the arguments does not match.
end_comment
begin_expr_stmt
name|Q_STATIC_ASSERT_X
argument_list|(
name|int
argument_list|(
name|SignalType
operator|::
name|ArgumentCount
argument_list|)
operator|>=
name|int
argument_list|(
name|SlotType
operator|::
name|ArgumentCount
argument_list|)
argument_list|,
literal|"The slot requires more arguments than the signal provides."
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_STATIC_ASSERT_X
argument_list|(
operator|(
name|QtPrivate
operator|::
name|CheckCompatibleArguments
operator|<
name|typename
name|SignalType
operator|::
name|Arguments
operator|,
name|typename
name|SlotType
operator|::
name|Arguments
operator|>
operator|::
name|value
operator|)
argument_list|,
literal|"Signal and slot arguments are not compatible."
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_STATIC_ASSERT_X
argument_list|(
operator|(
name|QtPrivate
operator|::
name|AreArgumentsCompatible
operator|<
name|typename
name|SlotType
operator|::
name|ReturnType
operator|,
name|typename
name|SignalType
operator|::
name|ReturnType
operator|>
operator|::
name|value
operator|)
argument_list|,
literal|"Return type of the slot is not compatible with the return type of the signal."
argument_list|)
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|connectImpl
argument_list|(
argument|sender
argument_list|,
argument|reinterpret_cast<void **>(&signal)
argument_list|,
argument|sender
argument_list|,
literal|0
argument_list|,
argument|new QStaticSlotObject<Func2
argument_list|,
argument|typename QtPrivate::List_Left<typename SignalType::Arguments
argument_list|,
argument|SlotType::ArgumentCount>::Value
argument_list|,
argument|typename SignalType::ReturnType>(slot)
argument_list|,
argument|Qt::DirectConnection
argument_list|,
literal|0
argument_list|,
argument|&SignalType::Object::staticMetaObject
argument_list|)
return|;
end_return
begin_comment
unit|}
comment|//connect to a functor
end_comment
begin_expr_stmt
unit|template
operator|<
name|typename
name|Func1
operator|,
name|typename
name|Func2
operator|>
specifier|static
specifier|inline
name|typename
name|QtPrivate
operator|::
name|QEnableIf
operator|<
name|QtPrivate
operator|::
name|FunctionPointer
operator|<
name|Func2
operator|>
operator|::
name|ArgumentCount
operator|==
operator|-
literal|1
operator|,
name|QMetaObject
operator|::
name|Connection
operator|>
operator|::
name|Type
name|connect
argument_list|(
argument|const typename QtPrivate::FunctionPointer<Func1>::Object *sender
argument_list|,
argument|Func1 signal
argument_list|,
argument|Func2 slot
argument_list|)
block|{
typedef|typedef
name|QtPrivate
operator|::
name|FunctionPointer
operator|<
name|Func1
operator|>
name|SignalType
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|connectImpl
argument_list|(
argument|sender
argument_list|,
argument|reinterpret_cast<void **>(&signal)
argument_list|,
argument|sender
argument_list|,
literal|0
argument_list|,
argument|new QFunctorSlotObject<Func2
argument_list|,
argument|SignalType::ArgumentCount
argument_list|,
argument|typename SignalType::Arguments
argument_list|,
argument|typename SignalType::ReturnType>(slot)
argument_list|,
argument|Qt::DirectConnection
argument_list|,
literal|0
argument_list|,
argument|&SignalType::Object::staticMetaObject
argument_list|)
return|;
end_return
begin_endif
unit|}
endif|#
directive|endif
end_endif
begin_comment
comment|//Q_QDOC
end_comment
begin_function_decl
unit|static
name|bool
name|disconnect
parameter_list|(
specifier|const
name|QObject
modifier|*
name|sender
parameter_list|,
specifier|const
name|char
modifier|*
name|signal
parameter_list|,
specifier|const
name|QObject
modifier|*
name|receiver
parameter_list|,
specifier|const
name|char
modifier|*
name|member
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|bool
name|disconnect
parameter_list|(
specifier|const
name|QObject
modifier|*
name|sender
parameter_list|,
specifier|const
name|QMetaMethod
modifier|&
name|signal
parameter_list|,
specifier|const
name|QObject
modifier|*
name|receiver
parameter_list|,
specifier|const
name|QMetaMethod
modifier|&
name|member
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
specifier|inline
name|bool
name|disconnect
argument_list|(
specifier|const
name|char
operator|*
name|signal
operator|=
literal|0
argument_list|,
specifier|const
name|QObject
operator|*
name|receiver
operator|=
literal|0
argument_list|,
specifier|const
name|char
operator|*
name|member
operator|=
literal|0
argument_list|)
decl|const
block|{
return|return
name|disconnect
argument_list|(
name|this
argument_list|,
name|signal
argument_list|,
name|receiver
argument_list|,
name|member
argument_list|)
return|;
block|}
end_decl_stmt
begin_decl_stmt
specifier|inline
name|bool
name|disconnect
argument_list|(
specifier|const
name|QObject
operator|*
name|receiver
argument_list|,
specifier|const
name|char
operator|*
name|member
operator|=
literal|0
argument_list|)
decl|const
block|{
return|return
name|disconnect
argument_list|(
name|this
argument_list|,
literal|0
argument_list|,
name|receiver
argument_list|,
name|member
argument_list|)
return|;
block|}
end_decl_stmt
begin_decl_stmt
specifier|static
name|bool
name|disconnect
argument_list|(
specifier|const
name|QMetaObject
operator|::
name|Connection
operator|&
argument_list|)
decl_stmt|;
end_decl_stmt
begin_ifdef
ifdef|#
directive|ifdef
name|Q_QDOC
end_ifdef
begin_function_decl
specifier|static
name|bool
name|disconnect
parameter_list|(
specifier|const
name|QObject
modifier|*
name|sender
parameter_list|,
name|PointerToMemberFunction
name|signal
parameter_list|,
specifier|const
name|QObject
modifier|*
name|receiver
parameter_list|,
name|PointerToMemberFunction
name|method
parameter_list|)
function_decl|;
end_function_decl
begin_else
else|#
directive|else
end_else
begin_expr_stmt
name|template
operator|<
name|typename
name|Func1
operator|,
name|typename
name|Func2
operator|>
specifier|static
specifier|inline
name|bool
name|disconnect
argument_list|(
argument|const typename QtPrivate::FunctionPointer<Func1>::Object *sender
argument_list|,
argument|Func1 signal
argument_list|,
argument|const typename QtPrivate::FunctionPointer<Func2>::Object *receiver
argument_list|,
argument|Func2 slot
argument_list|)
block|{
typedef|typedef
name|QtPrivate
operator|::
name|FunctionPointer
operator|<
name|Func1
operator|>
name|SignalType
expr_stmt|;
end_expr_stmt
begin_typedef
typedef|typedef
name|QtPrivate
operator|::
name|FunctionPointer
operator|<
name|Func2
operator|>
name|SlotType
expr_stmt|;
end_typedef
begin_expr_stmt
name|reinterpret_cast
operator|<
name|typename
name|SignalType
operator|::
name|Object
operator|*
operator|>
operator|(
literal|0
operator|)
operator|->
name|qt_check_for_QOBJECT_macro
argument_list|(
argument|*reinterpret_cast<typename SignalType::Object *>(
literal|0
argument|)
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|//compilation error if the arguments does not match.
end_comment
begin_expr_stmt
name|Q_STATIC_ASSERT_X
argument_list|(
operator|(
name|QtPrivate
operator|::
name|CheckCompatibleArguments
operator|<
name|typename
name|SignalType
operator|::
name|Arguments
operator|,
name|typename
name|SlotType
operator|::
name|Arguments
operator|>
operator|::
name|value
operator|)
argument_list|,
literal|"Signal and slot arguments are not compatible."
argument_list|)
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|disconnectImpl
argument_list|(
name|sender
argument_list|,
name|reinterpret_cast
operator|<
name|void
operator|*
operator|*
operator|>
operator|(
operator|&
name|signal
operator|)
argument_list|,
name|receiver
argument_list|,
name|reinterpret_cast
operator|<
name|void
operator|*
operator|*
operator|>
operator|(
operator|&
name|slot
operator|)
argument_list|,
operator|&
name|SignalType
operator|::
name|Object
operator|::
name|staticMetaObject
argument_list|)
return|;
end_return
begin_expr_stmt
unit|}     template
operator|<
name|typename
name|Func1
operator|>
specifier|static
specifier|inline
name|bool
name|disconnect
argument_list|(
argument|const typename QtPrivate::FunctionPointer<Func1>::Object *sender
argument_list|,
argument|Func1 signal
argument_list|,
argument|const QObject *receiver
argument_list|,
argument|void **zero
argument_list|)
block|{
comment|// This is the overload for when one wish to disconnect a signal from any slot. (slot=0)
comment|// Since the function template parameter cannot be deduced from '0', we use a
comment|// dummy void ** parameter that must be equal to 0
name|Q_ASSERT
argument_list|(
operator|!
name|zero
argument_list|)
block|;
typedef|typedef
name|QtPrivate
operator|::
name|FunctionPointer
operator|<
name|Func1
operator|>
name|SignalType
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|disconnectImpl
argument_list|(
name|sender
argument_list|,
name|reinterpret_cast
operator|<
name|void
operator|*
operator|*
operator|>
operator|(
operator|&
name|signal
operator|)
argument_list|,
name|receiver
argument_list|,
name|zero
argument_list|,
operator|&
name|SignalType
operator|::
name|Object
operator|::
name|staticMetaObject
argument_list|)
return|;
end_return
begin_endif
unit|}
endif|#
directive|endif
end_endif
begin_comment
comment|//Q_QDOC
end_comment
begin_expr_stmt
unit|void
name|dumpObjectTree
argument_list|()
expr_stmt|;
end_expr_stmt
begin_function_decl
name|void
name|dumpObjectInfo
parameter_list|()
function_decl|;
end_function_decl
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_PROPERTIES
end_ifndef
begin_function_decl
name|bool
name|setProperty
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|value
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
name|QVariant
name|property
argument_list|(
specifier|const
name|char
operator|*
name|name
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|QList
operator|<
name|QByteArray
operator|>
name|dynamicPropertyNames
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_PROPERTIES
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_USERDATA
end_ifndef
begin_function_decl
specifier|static
name|uint
name|registerUserData
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|void
name|setUserData
parameter_list|(
name|uint
name|id
parameter_list|,
name|QObjectUserData
modifier|*
name|data
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
name|QObjectUserData
modifier|*
name|userData
argument_list|(
name|uint
name|id
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_USERDATA
end_comment
begin_label
name|Q_SIGNALS
label|:
end_label
begin_function_decl
name|void
name|destroyed
parameter_list|(
name|QObject
modifier|*
init|=
literal|0
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|objectNameChanged
parameter_list|(
specifier|const
name|QString
modifier|&
name|objectName
parameter_list|)
function_decl|;
end_function_decl
begin_label
name|public
label|:
end_label
begin_expr_stmt
specifier|inline
name|QObject
operator|*
name|parent
argument_list|()
specifier|const
block|{
return|return
name|d_ptr
operator|->
name|parent
return|;
block|}
end_expr_stmt
begin_decl_stmt
specifier|inline
name|bool
name|inherits
argument_list|(
specifier|const
name|char
operator|*
name|classname
argument_list|)
decl|const
block|{
return|return
name|const_cast
operator|<
name|QObject
operator|*
operator|>
operator|(
name|this
operator|)
operator|->
name|qt_metacast
argument_list|(
name|classname
argument_list|)
operator|!=
literal|0
return|;
block|}
end_decl_stmt
begin_decl_stmt
name|public
name|Q_SLOTS
range|:
name|void
name|deleteLater
argument_list|()
decl_stmt|;
end_decl_stmt
begin_label
name|protected
label|:
end_label
begin_expr_stmt
name|QObject
operator|*
name|sender
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|int
name|senderSignalIndex
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|int
name|receivers
argument_list|(
specifier|const
name|char
operator|*
name|signal
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|bool
name|isSignalConnected
argument_list|(
specifier|const
name|QMetaMethod
operator|&
name|signal
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_function_decl
name|virtual
name|void
name|timerEvent
parameter_list|(
name|QTimerEvent
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|virtual
name|void
name|childEvent
parameter_list|(
name|QChildEvent
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|virtual
name|void
name|customEvent
parameter_list|(
name|QEvent
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|virtual
name|void
name|connectNotify
parameter_list|(
specifier|const
name|QMetaMethod
modifier|&
name|signal
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|virtual
name|void
name|disconnectNotify
parameter_list|(
specifier|const
name|QMetaMethod
modifier|&
name|signal
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|// Deprecated; to be removed before Qt 5.0
end_comment
begin_function_decl
name|virtual
name|void
name|connectNotify
parameter_list|(
specifier|const
name|char
modifier|*
name|signal
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|virtual
name|void
name|disconnectNotify
parameter_list|(
specifier|const
name|char
modifier|*
name|signal
parameter_list|)
function_decl|;
end_function_decl
begin_label
name|protected
label|:
end_label
begin_expr_stmt
name|QObject
argument_list|(
name|QObjectPrivate
operator|&
name|dd
argument_list|,
name|QObject
operator|*
name|parent
operator|=
literal|0
argument_list|)
expr_stmt|;
end_expr_stmt
begin_label
name|protected
label|:
end_label
begin_expr_stmt
name|QScopedPointer
operator|<
name|QObjectData
operator|>
name|d_ptr
expr_stmt|;
end_expr_stmt
begin_decl_stmt
specifier|static
specifier|const
name|QMetaObject
name|staticQtMetaObject
decl_stmt|;
end_decl_stmt
begin_macro
name|friend
end_macro
begin_struct_decl
struct_decl|struct
name|QMetaObject
struct_decl|;
end_struct_decl
begin_macro
name|friend
end_macro
begin_struct_decl
struct_decl|struct
name|QMetaObjectPrivate
struct_decl|;
end_struct_decl
begin_decl_stmt
name|friend
name|class
name|QMetaCallEvent
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|friend
name|class
name|QApplication
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|friend
name|class
name|QApplicationPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|friend
name|class
name|QCoreApplication
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|friend
name|class
name|QCoreApplicationPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|friend
name|class
name|QWidget
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|friend
name|class
name|QThreadData
decl_stmt|;
end_decl_stmt
begin_label
name|private
label|:
end_label
begin_macro
name|Q_DISABLE_COPY
argument_list|(
argument|QObject
argument_list|)
end_macro
begin_macro
name|Q_PRIVATE_SLOT
argument_list|(
argument|d_func()
argument_list|,
argument|void _q_reregisterTimers(void *)
argument_list|)
end_macro
begin_label
name|private
label|:
end_label
begin_comment
comment|// internal base class (interface) containing functions required to call a slot managed by a pointer to function.
end_comment
begin_struct
struct|struct
name|Q_CORE_EXPORT
name|QSlotObjectBase
block|{
name|QAtomicInt
name|ref
decl_stmt|;
name|QSlotObjectBase
argument_list|()
operator|:
name|ref
argument_list|(
literal|1
argument_list|)
block|{}
name|virtual
operator|~
name|QSlotObjectBase
argument_list|()
expr_stmt|;
name|virtual
name|void
name|call
parameter_list|(
name|QObject
modifier|*
name|receiver
parameter_list|,
name|void
modifier|*
modifier|*
name|a
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|bool
name|compare
parameter_list|(
name|void
modifier|*
modifier|*
parameter_list|)
function_decl|;
block|}
struct|;
end_struct
begin_comment
comment|// implementation of QSlotObjectBase for which the slot is a pointer to member function of a QObject
end_comment
begin_comment
comment|// Args and R are the List of arguments and the returntype of the signal to which the slot is connected.
end_comment
begin_expr_stmt
name|template
operator|<
name|typename
name|Func
operator|,
name|typename
name|Args
operator|,
name|typename
name|R
operator|>
expr|struct
name|QSlotObject
operator|:
name|QSlotObjectBase
block|{
typedef|typedef
name|QtPrivate
operator|::
name|FunctionPointer
operator|<
name|Func
operator|>
name|FuncType
expr_stmt|;
name|Func
name|function
expr_stmt|;
end_expr_stmt
begin_macro
name|QSlotObject
argument_list|(
argument|Func f
argument_list|)
end_macro
begin_macro
unit|:
name|function
argument_list|(
argument|f
argument_list|)
end_macro
begin_block
block|{}
end_block
begin_function
name|virtual
name|void
name|call
parameter_list|(
name|QObject
modifier|*
name|receiver
parameter_list|,
name|void
modifier|*
modifier|*
name|a
parameter_list|)
block|{
name|FuncType
operator|::
name|template
name|call
operator|<
name|Args
operator|,
name|R
operator|>
operator|(
name|function
operator|,
name|static_cast
operator|<
name|typename
name|FuncType
operator|::
name|Object
operator|*
operator|>
operator|(
name|receiver
operator|)
operator|,
name|a
operator|)
expr_stmt|;
block|}
end_function
begin_function
name|virtual
name|bool
name|compare
parameter_list|(
name|void
modifier|*
modifier|*
name|f
parameter_list|)
block|{
return|return
operator|*
name|reinterpret_cast
operator|<
name|Func
operator|*
operator|>
operator|(
name|f
operator|)
operator|==
name|function
return|;
block|}
end_function
begin_comment
unit|};
comment|// implementation of QSlotObjectBase for which the slot is a static function
end_comment
begin_comment
comment|// Args and R are the List of arguments and the returntype of the signal to which the slot is connected.
end_comment
begin_expr_stmt
name|template
operator|<
name|typename
name|Func
operator|,
name|typename
name|Args
operator|,
name|typename
name|R
operator|>
expr|struct
name|QStaticSlotObject
operator|:
name|QSlotObjectBase
block|{
typedef|typedef
name|QtPrivate
operator|::
name|FunctionPointer
operator|<
name|Func
operator|>
name|FuncType
expr_stmt|;
name|Func
name|function
expr_stmt|;
end_expr_stmt
begin_macro
name|QStaticSlotObject
argument_list|(
argument|Func f
argument_list|)
end_macro
begin_macro
unit|:
name|function
argument_list|(
argument|f
argument_list|)
end_macro
begin_block
block|{}
end_block
begin_function
name|virtual
name|void
name|call
parameter_list|(
name|QObject
modifier|*
name|receiver
parameter_list|,
name|void
modifier|*
modifier|*
name|a
parameter_list|)
block|{
name|FuncType
operator|::
name|template
name|call
operator|<
name|Args
operator|,
name|R
operator|>
operator|(
name|function
operator|,
name|receiver
operator|,
name|a
operator|)
expr_stmt|;
block|}
end_function
begin_comment
unit|};
comment|// implementation of QSlotObjectBase for which the slot is a functor (or lambda)
end_comment
begin_comment
comment|// N is the number of arguments
end_comment
begin_comment
comment|// Args and R are the List of arguments and the returntype of the signal to which the slot is connected.
end_comment
begin_expr_stmt
name|template
operator|<
name|typename
name|Func
operator|,
name|int
name|N
operator|,
name|typename
name|Args
operator|,
name|typename
name|R
operator|>
expr|struct
name|QFunctorSlotObject
operator|:
name|QSlotObjectBase
block|{
typedef|typedef
name|QtPrivate
operator|::
name|Functor
operator|<
name|Func
operator|,
name|N
operator|>
name|FuncType
expr_stmt|;
name|Func
name|function
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QFunctorSlotObject
argument_list|(
specifier|const
name|Func
operator|&
name|f
argument_list|)
operator|:
name|function
argument_list|(
argument|f
argument_list|)
block|{}
name|virtual
name|void
name|call
argument_list|(
argument|QObject *receiver
argument_list|,
argument|void **a
argument_list|)
block|{
name|FuncType
operator|::
name|template
name|call
operator|<
name|Args
block|,
name|R
operator|>
operator|(
name|function
operator|,
name|receiver
operator|,
name|a
operator|)
block|;         }
end_expr_stmt
begin_expr_stmt
unit|};
specifier|static
name|QMetaObject
operator|::
name|Connection
name|connectImpl
argument_list|(
argument|const QObject *sender
argument_list|,
argument|void **signal
argument_list|,
argument|const QObject *receiver
argument_list|,
argument|void **slotPtr
argument_list|,
argument|QSlotObjectBase *slot
argument_list|,
argument|Qt::ConnectionType type
argument_list|,
argument|const int *types
argument_list|,
argument|const QMetaObject *senderMetaObject
argument_list|)
expr_stmt|;
end_expr_stmt
begin_function_decl
specifier|static
name|bool
name|disconnectImpl
parameter_list|(
specifier|const
name|QObject
modifier|*
name|sender
parameter_list|,
name|void
modifier|*
modifier|*
name|signal
parameter_list|,
specifier|const
name|QObject
modifier|*
name|receiver
parameter_list|,
name|void
modifier|*
modifier|*
name|slot
parameter_list|,
specifier|const
name|QMetaObject
modifier|*
name|senderMetaObject
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
unit|};
DECL|function|connect
specifier|inline
name|QMetaObject
operator|::
name|Connection
name|QObject
operator|::
name|connect
argument_list|(
argument|const QObject *asender
argument_list|,
argument|const char *asignal
argument_list|,
argument|const char *amember
argument_list|,
argument|Qt::ConnectionType atype
argument_list|)
specifier|const
block|{
return|return
name|connect
argument_list|(
name|asender
argument_list|,
name|asignal
argument_list|,
name|this
argument_list|,
name|amember
argument_list|,
name|atype
argument_list|)
return|;
block|}
end_expr_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_USERDATA
end_ifndef
begin_decl_stmt
name|class
name|Q_CORE_EXPORT
name|QObjectUserData
block|{
name|public
label|:
name|virtual
operator|~
name|QObjectUserData
argument_list|()
expr_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|qdoc
end_ifdef
begin_function_decl
name|T
name|qFindChild
parameter_list|(
specifier|const
name|QObject
modifier|*
name|o
parameter_list|,
specifier|const
name|QString
modifier|&
name|name
init|=
name|QString
argument_list|()
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|QList
operator|<
name|T
operator|>
name|qFindChildren
argument_list|(
specifier|const
name|QObject
operator|*
name|oobj
argument_list|,
specifier|const
name|QString
operator|&
name|name
operator|=
name|QString
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QList
operator|<
name|T
operator|>
name|qFindChildren
argument_list|(
specifier|const
name|QObject
operator|*
name|o
argument_list|,
specifier|const
name|QRegExp
operator|&
name|re
argument_list|)
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|QT_DEPRECATED_SINCE
argument_list|(
literal|5
operator|,
literal|0
argument_list|)
end_if
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|qFindChild
specifier|inline
name|QT_DEPRECATED
name|T
name|qFindChild
argument_list|(
argument|const QObject *o
argument_list|,
argument|const QString&name = QString()
argument_list|)
block|{
return|return
name|o
operator|->
name|findChild
operator|<
name|T
operator|>
operator|(
name|name
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|qFindChildren
specifier|inline
name|QT_DEPRECATED
name|QList
operator|<
name|T
operator|>
name|qFindChildren
argument_list|(
argument|const QObject *o
argument_list|,
argument|const QString&name = QString()
argument_list|)
block|{
return|return
name|o
operator|->
name|findChildren
operator|<
name|T
operator|>
operator|(
name|name
operator|)
return|;
block|}
end_expr_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_REGEXP
end_ifndef
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|qFindChildren
specifier|inline
name|QT_DEPRECATED
name|QList
operator|<
name|T
operator|>
name|qFindChildren
argument_list|(
argument|const QObject *o
argument_list|,
argument|const QRegExp&re
argument_list|)
block|{
return|return
name|o
operator|->
name|findChildren
operator|<
name|T
operator|>
operator|(
name|re
operator|)
return|;
block|}
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QT_DEPRECATED
end_comment
begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
DECL|function|qobject_cast
specifier|inline
name|T
name|qobject_cast
argument_list|(
argument|QObject *object
argument_list|)
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_QOBJECT_CHECK
argument_list|)
name|reinterpret_cast
operator|<
name|T
operator|>
operator|(
name|object
operator|)
operator|->
name|qt_check_for_QOBJECT_macro
argument_list|(
operator|*
name|reinterpret_cast
operator|<
name|T
operator|>
operator|(
name|object
operator|)
argument_list|)
block|;
endif|#
directive|endif
return|return
name|static_cast
operator|<
name|T
operator|>
operator|(
name|reinterpret_cast
operator|<
name|T
operator|>
operator|(
name|object
operator|)
operator|->
name|staticMetaObject
operator|.
name|cast
argument_list|(
name|object
argument_list|)
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
DECL|function|qobject_cast
specifier|inline
name|T
name|qobject_cast
argument_list|(
argument|const QObject *object
argument_list|)
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_QOBJECT_CHECK
argument_list|)
name|reinterpret_cast
operator|<
name|T
operator|>
operator|(
name|object
operator|)
operator|->
name|qt_check_for_QOBJECT_macro
argument_list|(
operator|*
name|reinterpret_cast
operator|<
name|T
operator|>
operator|(
name|const_cast
operator|<
name|QObject
operator|*
operator|>
operator|(
name|object
operator|)
operator|)
argument_list|)
block|;
endif|#
directive|endif
return|return
name|static_cast
operator|<
name|T
operator|>
operator|(
name|reinterpret_cast
operator|<
name|T
operator|>
operator|(
name|object
operator|)
operator|->
name|staticMetaObject
operator|.
name|cast
argument_list|(
name|object
argument_list|)
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|qobject_interface_iid
name|template
operator|<
name|class
name|T
operator|>
specifier|inline
specifier|const
name|char
operator|*
name|qobject_interface_iid
argument_list|()
block|{
return|return
literal|0
return|;
block|}
end_expr_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|Q_MOC_RUN
end_ifndef
begin_define
DECL|macro|Q_DECLARE_INTERFACE
define|#
directive|define
name|Q_DECLARE_INTERFACE
parameter_list|(
name|IFace
parameter_list|,
name|IId
parameter_list|)
define|\
value|template<> inline const char *qobject_interface_iid<IFace *>() \     { return IId; } \     template<> inline IFace *qobject_cast<IFace *>(QObject *object) \     { return reinterpret_cast<IFace *>((object ? object->qt_metacast(IId) : 0)); } \     template<> inline IFace *qobject_cast<IFace *>(const QObject *object) \     { return reinterpret_cast<IFace *>((object ? const_cast<QObject *>(object)->qt_metacast(IId) : 0)); }
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Q_MOC_RUN
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DEBUG_STREAM
end_ifndef
begin_expr_stmt
name|Q_CORE_EXPORT
name|QDebug
name|operator
operator|<<
operator|(
name|QDebug
operator|,
specifier|const
name|QObject
operator|*
operator|)
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
name|QT_END_NAMESPACE
name|QT_END_HEADER
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QOBJECT_H
end_comment
end_unit
