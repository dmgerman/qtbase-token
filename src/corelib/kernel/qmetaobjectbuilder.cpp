begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qmetaobjectbuilder_p.h"
end_include
begin_include
include|#
directive|include
file|"qobject_p.h"
end_include
begin_include
include|#
directive|include
file|"qmetaobject_p.h"
end_include
begin_include
include|#
directive|include
file|<stdlib.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_comment
comment|/*!     \class QMetaObjectBuilder     \inmodule QtCore     \internal     \brief The QMetaObjectBuilder class supports building QMetaObject objects at runtime.  */
end_comment
begin_comment
comment|/*!     \enum QMetaObjectBuilder::AddMember     This enum defines which members of QMetaObject should be copied by QMetaObjectBuilder::addMetaObject()      \value ClassName Add the class name.     \value SuperClass Add the super class.     \value Methods Add methods that aren't signals or slots.     \value Signals Add signals.     \value Slots Add slots.     \value Constructors Add constructors.     \value Properties Add properties.     \value Enumerators Add enumerators.     \value ClassInfos Add items of class information.     \value RelatedMetaObjects Add related meta objects.     \value StaticMetacall Add the static metacall function.     \value PublicMethods Add public methods (ignored for signals).     \value ProtectedMethods Add protected methods (ignored for signals).     \value PrivateMethods All private methods (ignored for signals).     \value AllMembers Add all members.     \value AllPrimaryMembers Add everything except the class name, super class, and static metacall function. */
end_comment
begin_comment
comment|// copied from moc's generator.cpp
end_comment
begin_namespace
DECL|namespace|QtPrivate
namespace|namespace
name|QtPrivate
block|{
DECL|function|isBuiltinType
name|Q_CORE_EXPORT
name|bool
name|isBuiltinType
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|type
parameter_list|)
block|{
name|int
name|id
init|=
name|QMetaType
operator|::
name|type
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|id
operator|&&
operator|!
name|type
operator|.
name|isEmpty
argument_list|()
operator|&&
name|type
operator|!=
literal|"void"
condition|)
return|return
literal|false
return|;
return|return
operator|(
name|id
operator|<
name|QMetaType
operator|::
name|User
operator|)
return|;
block|}
block|}
end_namespace
begin_comment
comment|// namespace QtPrivate
end_comment
begin_comment
comment|// copied from qmetaobject.cpp
end_comment
begin_function
DECL|function|priv
specifier|static
specifier|inline
name|Q_DECL_UNUSED
specifier|const
name|QMetaObjectPrivate
modifier|*
name|priv
parameter_list|(
specifier|const
name|uint
modifier|*
name|data
parameter_list|)
block|{
return|return
cast|reinterpret_cast
argument_list|<
specifier|const
name|QMetaObjectPrivate
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
return|;
block|}
end_function
begin_class
DECL|class|QMetaMethodBuilderPrivate
class|class
name|QMetaMethodBuilderPrivate
block|{
public|public:
DECL|function|QMetaMethodBuilderPrivate
name|QMetaMethodBuilderPrivate
parameter_list|(
name|QMetaMethod
operator|::
name|MethodType
name|_methodType
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|_signature
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|_returnType
init|=
name|QByteArray
argument_list|(
literal|"void"
argument_list|)
parameter_list|,
name|QMetaMethod
operator|::
name|Access
name|_access
init|=
name|QMetaMethod
operator|::
name|Public
parameter_list|,
name|int
name|_revision
init|=
literal|0
parameter_list|)
member_init_list|:
name|signature
argument_list|(
name|QMetaObject
operator|::
name|normalizedSignature
argument_list|(
name|_signature
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|)
member_init_list|,
name|returnType
argument_list|(
name|QMetaObject
operator|::
name|normalizedType
argument_list|(
name|_returnType
argument_list|)
argument_list|)
member_init_list|,
name|attributes
argument_list|(
operator|(
operator|(
name|int
operator|)
name|_access
operator|)
operator||
operator|(
operator|(
operator|(
name|int
operator|)
name|_methodType
operator|)
operator|<<
literal|2
operator|)
argument_list|)
member_init_list|,
name|revision
argument_list|(
name|_revision
argument_list|)
block|{
name|Q_ASSERT
argument_list|(
operator|(
name|_methodType
operator|==
name|QMetaMethod
operator|::
name|Constructor
operator|)
operator|==
name|returnType
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|member|signature
name|QByteArray
name|signature
decl_stmt|;
DECL|member|returnType
name|QByteArray
name|returnType
decl_stmt|;
DECL|member|parameterNames
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|parameterNames
decl_stmt|;
DECL|member|tag
name|QByteArray
name|tag
decl_stmt|;
DECL|member|attributes
name|int
name|attributes
decl_stmt|;
DECL|member|revision
name|int
name|revision
decl_stmt|;
DECL|function|methodType
name|QMetaMethod
operator|::
name|MethodType
name|methodType
parameter_list|()
specifier|const
block|{
return|return
call|(
name|QMetaMethod
operator|::
name|MethodType
call|)
argument_list|(
operator|(
name|attributes
operator|&
name|MethodTypeMask
operator|)
operator|>>
literal|2
argument_list|)
return|;
block|}
DECL|function|access
name|QMetaMethod
operator|::
name|Access
name|access
parameter_list|()
specifier|const
block|{
return|return
call|(
name|QMetaMethod
operator|::
name|Access
call|)
argument_list|(
name|attributes
operator|&
name|AccessMask
argument_list|)
return|;
block|}
DECL|function|setAccess
name|void
name|setAccess
parameter_list|(
name|QMetaMethod
operator|::
name|Access
name|value
parameter_list|)
block|{
name|attributes
operator|=
operator|(
operator|(
name|attributes
operator|&
operator|~
name|AccessMask
operator|)
operator||
operator|(
name|int
operator|)
name|value
operator|)
expr_stmt|;
block|}
DECL|function|parameterTypes
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|parameterTypes
parameter_list|()
specifier|const
block|{
return|return
name|QMetaObjectPrivate
operator|::
name|parameterTypeNamesFromSignature
argument_list|(
name|signature
argument_list|)
return|;
block|}
DECL|function|parameterCount
name|int
name|parameterCount
parameter_list|()
specifier|const
block|{
return|return
name|parameterTypes
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
DECL|function|name
name|QByteArray
name|name
parameter_list|()
specifier|const
block|{
return|return
name|signature
operator|.
name|left
argument_list|(
name|qMax
argument_list|(
name|signature
operator|.
name|indexOf
argument_list|(
literal|'('
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
return|;
block|}
block|}
class|;
end_class
begin_class
DECL|class|QMetaPropertyBuilderPrivate
class|class
name|QMetaPropertyBuilderPrivate
block|{
public|public:
DECL|function|QMetaPropertyBuilderPrivate
name|QMetaPropertyBuilderPrivate
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|_name
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|_type
parameter_list|,
name|int
name|notifierIdx
init|=
operator|-
literal|1
parameter_list|,
name|int
name|_revision
init|=
literal|0
parameter_list|)
member_init_list|:
name|name
argument_list|(
name|_name
argument_list|)
member_init_list|,
name|type
argument_list|(
name|QMetaObject
operator|::
name|normalizedType
argument_list|(
name|_type
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|)
member_init_list|,
name|flags
argument_list|(
name|Readable
operator||
name|Writable
operator||
name|Scriptable
argument_list|)
member_init_list|,
name|notifySignal
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|revision
argument_list|(
name|_revision
argument_list|)
block|{
if|if
condition|(
name|notifierIdx
operator|>=
literal|0
condition|)
block|{
name|flags
operator||=
name|Notify
expr_stmt|;
name|notifySignal
operator|=
name|notifierIdx
expr_stmt|;
block|}
block|}
DECL|member|name
name|QByteArray
name|name
decl_stmt|;
DECL|member|type
name|QByteArray
name|type
decl_stmt|;
DECL|member|flags
name|int
name|flags
decl_stmt|;
DECL|member|notifySignal
name|int
name|notifySignal
decl_stmt|;
DECL|member|revision
name|int
name|revision
decl_stmt|;
DECL|function|flag
name|bool
name|flag
parameter_list|(
name|int
name|f
parameter_list|)
specifier|const
block|{
return|return
operator|(
operator|(
name|flags
operator|&
name|f
operator|)
operator|!=
literal|0
operator|)
return|;
block|}
DECL|function|setFlag
name|void
name|setFlag
parameter_list|(
name|int
name|f
parameter_list|,
name|bool
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
condition|)
name|flags
operator||=
name|f
expr_stmt|;
else|else
name|flags
operator|&=
operator|~
name|f
expr_stmt|;
block|}
block|}
class|;
end_class
begin_class
DECL|class|QMetaEnumBuilderPrivate
class|class
name|QMetaEnumBuilderPrivate
block|{
public|public:
DECL|function|QMetaEnumBuilderPrivate
name|QMetaEnumBuilderPrivate
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|_name
parameter_list|)
member_init_list|:
name|name
argument_list|(
name|_name
argument_list|)
member_init_list|,
name|isFlag
argument_list|(
literal|false
argument_list|)
block|{     }
DECL|member|name
name|QByteArray
name|name
decl_stmt|;
DECL|member|isFlag
name|bool
name|isFlag
decl_stmt|;
DECL|member|keys
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|keys
decl_stmt|;
DECL|member|values
name|QList
argument_list|<
name|int
argument_list|>
name|values
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|QMetaObjectBuilderPrivate
class|class
name|QMetaObjectBuilderPrivate
block|{
public|public:
DECL|function|QMetaObjectBuilderPrivate
name|QMetaObjectBuilderPrivate
parameter_list|()
member_init_list|:
name|flags
argument_list|(
literal|0
argument_list|)
block|{
name|superClass
operator|=
operator|&
name|QObject
operator|::
name|staticMetaObject
expr_stmt|;
name|staticMetacallFunction
operator|=
literal|0
expr_stmt|;
block|}
name|bool
name|hasRevisionedProperties
parameter_list|()
specifier|const
function_decl|;
name|bool
name|hasRevisionedMethods
parameter_list|()
specifier|const
function_decl|;
DECL|member|className
name|QByteArray
name|className
decl_stmt|;
DECL|member|superClass
specifier|const
name|QMetaObject
modifier|*
name|superClass
decl_stmt|;
DECL|member|staticMetacallFunction
name|QMetaObjectBuilder
operator|::
name|StaticMetacallFunction
name|staticMetacallFunction
decl_stmt|;
DECL|member|methods
name|QList
argument_list|<
name|QMetaMethodBuilderPrivate
argument_list|>
name|methods
decl_stmt|;
DECL|member|constructors
name|QList
argument_list|<
name|QMetaMethodBuilderPrivate
argument_list|>
name|constructors
decl_stmt|;
DECL|member|properties
name|QList
argument_list|<
name|QMetaPropertyBuilderPrivate
argument_list|>
name|properties
decl_stmt|;
DECL|member|classInfoNames
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|classInfoNames
decl_stmt|;
DECL|member|classInfoValues
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|classInfoValues
decl_stmt|;
DECL|member|enumerators
name|QList
argument_list|<
name|QMetaEnumBuilderPrivate
argument_list|>
name|enumerators
decl_stmt|;
DECL|member|relatedMetaObjects
name|QList
argument_list|<
specifier|const
name|QMetaObject
modifier|*
argument_list|>
name|relatedMetaObjects
decl_stmt|;
DECL|member|flags
name|int
name|flags
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|hasRevisionedProperties
name|bool
name|QMetaObjectBuilderPrivate
operator|::
name|hasRevisionedProperties
parameter_list|()
specifier|const
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|properties
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|properties
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|revision
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|hasRevisionedMethods
name|bool
name|QMetaObjectBuilderPrivate
operator|::
name|hasRevisionedMethods
parameter_list|()
specifier|const
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|methods
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|methods
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|revision
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/*!     Constructs a new QMetaObjectBuilder. */
end_comment
begin_constructor
DECL|function|QMetaObjectBuilder
name|QMetaObjectBuilder
operator|::
name|QMetaObjectBuilder
parameter_list|()
block|{
name|d
operator|=
operator|new
name|QMetaObjectBuilderPrivate
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Constructs a new QMetaObjectBuilder which is a copy of the     meta object information in \a prototype.  Note: the super class     contents for \a prototype are not copied, only the immediate     class that is defined by \a prototype.      The \a members parameter indicates which members of \a prototype     should be added.  The default is AllMembers.      \sa addMetaObject() */
end_comment
begin_constructor
DECL|function|QMetaObjectBuilder
name|QMetaObjectBuilder
operator|::
name|QMetaObjectBuilder
parameter_list|(
specifier|const
name|QMetaObject
modifier|*
name|prototype
parameter_list|,
name|QMetaObjectBuilder
operator|::
name|AddMembers
name|members
parameter_list|)
block|{
name|d
operator|=
operator|new
name|QMetaObjectBuilderPrivate
argument_list|()
expr_stmt|;
name|addMetaObject
argument_list|(
name|prototype
argument_list|,
name|members
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Destroys this meta object builder. */
end_comment
begin_destructor
DECL|function|~QMetaObjectBuilder
name|QMetaObjectBuilder
operator|::
name|~
name|QMetaObjectBuilder
parameter_list|()
block|{
operator|delete
name|d
expr_stmt|;
block|}
end_destructor
begin_comment
comment|/*!     Returns the name of the class being constructed by this     meta object builder.  The default value is an empty QByteArray.      \sa setClassName(), superClass() */
end_comment
begin_function
DECL|function|className
name|QByteArray
name|QMetaObjectBuilder
operator|::
name|className
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|className
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the \a name of the class being constructed by this     meta object builder.      \sa className(), setSuperClass() */
end_comment
begin_function
DECL|function|setClassName
name|void
name|QMetaObjectBuilder
operator|::
name|setClassName
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|name
parameter_list|)
block|{
name|d
operator|->
name|className
operator|=
name|name
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the superclass meta object of the class being constructed     by this meta object builder.  The default value is the meta object     for QObject.      \sa setSuperClass(), className() */
end_comment
begin_function
DECL|function|superClass
specifier|const
name|QMetaObject
modifier|*
name|QMetaObjectBuilder
operator|::
name|superClass
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|superClass
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the superclass meta object of the class being constructed     by this meta object builder to \a meta.  The \a meta parameter     must not be null.      \sa superClass(), setClassName() */
end_comment
begin_function
DECL|function|setSuperClass
name|void
name|QMetaObjectBuilder
operator|::
name|setSuperClass
parameter_list|(
specifier|const
name|QMetaObject
modifier|*
name|meta
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|meta
argument_list|)
expr_stmt|;
name|d
operator|->
name|superClass
operator|=
name|meta
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the flags of the class being constructed by this meta object     builder.      \sa setFlags() */
end_comment
begin_function
DECL|function|flags
name|QMetaObjectBuilder
operator|::
name|MetaObjectFlags
name|QMetaObjectBuilder
operator|::
name|flags
parameter_list|()
specifier|const
block|{
return|return
operator|(
name|QMetaObjectBuilder
operator|::
name|MetaObjectFlags
operator|)
name|d
operator|->
name|flags
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the \a flags of the class being constructed by this meta object     builder.      \sa flags() */
end_comment
begin_function
DECL|function|setFlags
name|void
name|QMetaObjectBuilder
operator|::
name|setFlags
parameter_list|(
name|MetaObjectFlags
name|flags
parameter_list|)
block|{
name|d
operator|->
name|flags
operator|=
name|flags
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the number of methods in this class, excluding the number     of methods in the base class.  These include signals and slots     as well as normal member functions.      \sa addMethod(), method(), removeMethod(), indexOfMethod() */
end_comment
begin_function
DECL|function|methodCount
name|int
name|QMetaObjectBuilder
operator|::
name|methodCount
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|methods
operator|.
name|size
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the number of constructors in this class.      \sa addConstructor(), constructor(), removeConstructor(), indexOfConstructor() */
end_comment
begin_function
DECL|function|constructorCount
name|int
name|QMetaObjectBuilder
operator|::
name|constructorCount
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|constructors
operator|.
name|size
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the number of properties in this class, excluding the number     of properties in the base class.      \sa addProperty(), property(), removeProperty(), indexOfProperty() */
end_comment
begin_function
DECL|function|propertyCount
name|int
name|QMetaObjectBuilder
operator|::
name|propertyCount
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|properties
operator|.
name|size
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the number of enumerators in this class, excluding the     number of enumerators in the base class.      \sa addEnumerator(), enumerator(), removeEnumerator()     \sa indexOfEnumerator() */
end_comment
begin_function
DECL|function|enumeratorCount
name|int
name|QMetaObjectBuilder
operator|::
name|enumeratorCount
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|enumerators
operator|.
name|size
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the number of items of class information in this class,     exclusing the number of items of class information in the base class.      \sa addClassInfo(), classInfoName(), classInfoValue(), removeClassInfo()     \sa indexOfClassInfo() */
end_comment
begin_function
DECL|function|classInfoCount
name|int
name|QMetaObjectBuilder
operator|::
name|classInfoCount
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|classInfoNames
operator|.
name|size
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the number of related meta objects that are associated     with this class.      Related meta objects are used when resolving the enumerated type     associated with a property, where the enumerated type is in a     different class from the property.      \sa addRelatedMetaObject(), relatedMetaObject()     \sa removeRelatedMetaObject() */
end_comment
begin_function
DECL|function|relatedMetaObjectCount
name|int
name|QMetaObjectBuilder
operator|::
name|relatedMetaObjectCount
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|relatedMetaObjects
operator|.
name|size
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Adds a new public method to this class with the specified \a signature.     Returns an object that can be used to adjust the other attributes     of the method.  The \a signature will be normalized before it is     added to the class.      \sa method(), methodCount(), removeMethod(), indexOfMethod() */
end_comment
begin_function
DECL|function|addMethod
name|QMetaMethodBuilder
name|QMetaObjectBuilder
operator|::
name|addMethod
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|signature
parameter_list|)
block|{
name|int
name|index
init|=
name|d
operator|->
name|methods
operator|.
name|size
argument_list|()
decl_stmt|;
name|d
operator|->
name|methods
operator|.
name|append
argument_list|(
name|QMetaMethodBuilderPrivate
argument_list|(
name|QMetaMethod
operator|::
name|Method
argument_list|,
name|signature
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|QMetaMethodBuilder
argument_list|(
name|this
argument_list|,
name|index
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Adds a new public method to this class with the specified     \a signature and \a returnType.  Returns an object that can be     used to adjust the other attributes of the method.  The \a signature     and \a returnType will be normalized before they are added to     the class.      \sa method(), methodCount(), removeMethod(), indexOfMethod() */
end_comment
begin_function
DECL|function|addMethod
name|QMetaMethodBuilder
name|QMetaObjectBuilder
operator|::
name|addMethod
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|signature
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|returnType
parameter_list|)
block|{
name|int
name|index
init|=
name|d
operator|->
name|methods
operator|.
name|size
argument_list|()
decl_stmt|;
name|d
operator|->
name|methods
operator|.
name|append
argument_list|(
name|QMetaMethodBuilderPrivate
argument_list|(
name|QMetaMethod
operator|::
name|Method
argument_list|,
name|signature
argument_list|,
name|returnType
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|QMetaMethodBuilder
argument_list|(
name|this
argument_list|,
name|index
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Adds a new public method to this class that has the same information as     \a prototype.  This is used to clone the methods of an existing     QMetaObject.  Returns an object that can be used to adjust the     attributes of the method.      This function will detect if \a prototype is an ordinary method,     signal, slot, or constructor and act accordingly.      \sa method(), methodCount(), removeMethod(), indexOfMethod() */
end_comment
begin_function
DECL|function|addMethod
name|QMetaMethodBuilder
name|QMetaObjectBuilder
operator|::
name|addMethod
parameter_list|(
specifier|const
name|QMetaMethod
modifier|&
name|prototype
parameter_list|)
block|{
name|QMetaMethodBuilder
name|method
decl_stmt|;
if|if
condition|(
name|prototype
operator|.
name|methodType
argument_list|()
operator|==
name|QMetaMethod
operator|::
name|Method
condition|)
name|method
operator|=
name|addMethod
argument_list|(
name|prototype
operator|.
name|methodSignature
argument_list|()
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|prototype
operator|.
name|methodType
argument_list|()
operator|==
name|QMetaMethod
operator|::
name|Signal
condition|)
name|method
operator|=
name|addSignal
argument_list|(
name|prototype
operator|.
name|methodSignature
argument_list|()
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|prototype
operator|.
name|methodType
argument_list|()
operator|==
name|QMetaMethod
operator|::
name|Slot
condition|)
name|method
operator|=
name|addSlot
argument_list|(
name|prototype
operator|.
name|methodSignature
argument_list|()
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|prototype
operator|.
name|methodType
argument_list|()
operator|==
name|QMetaMethod
operator|::
name|Constructor
condition|)
name|method
operator|=
name|addConstructor
argument_list|(
name|prototype
operator|.
name|methodSignature
argument_list|()
argument_list|)
expr_stmt|;
name|method
operator|.
name|setReturnType
argument_list|(
name|prototype
operator|.
name|typeName
argument_list|()
argument_list|)
expr_stmt|;
name|method
operator|.
name|setParameterNames
argument_list|(
name|prototype
operator|.
name|parameterNames
argument_list|()
argument_list|)
expr_stmt|;
name|method
operator|.
name|setTag
argument_list|(
name|prototype
operator|.
name|tag
argument_list|()
argument_list|)
expr_stmt|;
name|method
operator|.
name|setAccess
argument_list|(
name|prototype
operator|.
name|access
argument_list|()
argument_list|)
expr_stmt|;
name|method
operator|.
name|setAttributes
argument_list|(
name|prototype
operator|.
name|attributes
argument_list|()
argument_list|)
expr_stmt|;
name|method
operator|.
name|setRevision
argument_list|(
name|prototype
operator|.
name|revision
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|method
return|;
block|}
end_function
begin_comment
comment|/*!     Adds a new public slot to this class with the specified \a signature.     Returns an object that can be used to adjust the other attributes     of the slot.  The \a signature will be normalized before it is     added to the class.      \sa addMethod(), addSignal(), indexOfSlot() */
end_comment
begin_function
DECL|function|addSlot
name|QMetaMethodBuilder
name|QMetaObjectBuilder
operator|::
name|addSlot
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|signature
parameter_list|)
block|{
name|int
name|index
init|=
name|d
operator|->
name|methods
operator|.
name|size
argument_list|()
decl_stmt|;
name|d
operator|->
name|methods
operator|.
name|append
argument_list|(
name|QMetaMethodBuilderPrivate
argument_list|(
name|QMetaMethod
operator|::
name|Slot
argument_list|,
name|signature
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|QMetaMethodBuilder
argument_list|(
name|this
argument_list|,
name|index
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Adds a new signal to this class with the specified \a signature.     Returns an object that can be used to adjust the other attributes     of the signal.  The \a signature will be normalized before it is     added to the class.      \sa addMethod(), addSlot(), indexOfSignal() */
end_comment
begin_function
DECL|function|addSignal
name|QMetaMethodBuilder
name|QMetaObjectBuilder
operator|::
name|addSignal
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|signature
parameter_list|)
block|{
name|int
name|index
init|=
name|d
operator|->
name|methods
operator|.
name|size
argument_list|()
decl_stmt|;
name|d
operator|->
name|methods
operator|.
name|append
argument_list|(
name|QMetaMethodBuilderPrivate
argument_list|(
name|QMetaMethod
operator|::
name|Signal
argument_list|,
name|signature
argument_list|,
name|QByteArray
argument_list|(
literal|"void"
argument_list|)
argument_list|,
name|QMetaMethod
operator|::
name|Public
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|QMetaMethodBuilder
argument_list|(
name|this
argument_list|,
name|index
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Adds a new constructor to this class with the specified \a signature.     Returns an object that can be used to adjust the other attributes     of the constructor.  The \a signature will be normalized before it is     added to the class.      \sa constructor(), constructorCount(), removeConstructor()     \sa indexOfConstructor() */
end_comment
begin_function
DECL|function|addConstructor
name|QMetaMethodBuilder
name|QMetaObjectBuilder
operator|::
name|addConstructor
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|signature
parameter_list|)
block|{
name|int
name|index
init|=
name|d
operator|->
name|constructors
operator|.
name|size
argument_list|()
decl_stmt|;
name|d
operator|->
name|constructors
operator|.
name|append
argument_list|(
name|QMetaMethodBuilderPrivate
argument_list|(
name|QMetaMethod
operator|::
name|Constructor
argument_list|,
name|signature
argument_list|,
comment|/*returnType=*/
name|QByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|QMetaMethodBuilder
argument_list|(
name|this
argument_list|,
operator|-
operator|(
name|index
operator|+
literal|1
operator|)
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Adds a new constructor to this class that has the same information as     \a prototype.  This is used to clone the constructors of an existing     QMetaObject.  Returns an object that can be used to adjust the     attributes of the constructor.      This function requires that \a prototype be a constructor.      \sa constructor(), constructorCount(), removeConstructor()     \sa indexOfConstructor() */
end_comment
begin_function
DECL|function|addConstructor
name|QMetaMethodBuilder
name|QMetaObjectBuilder
operator|::
name|addConstructor
parameter_list|(
specifier|const
name|QMetaMethod
modifier|&
name|prototype
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|prototype
operator|.
name|methodType
argument_list|()
operator|==
name|QMetaMethod
operator|::
name|Constructor
argument_list|)
expr_stmt|;
name|QMetaMethodBuilder
name|ctor
init|=
name|addConstructor
argument_list|(
name|prototype
operator|.
name|methodSignature
argument_list|()
argument_list|)
decl_stmt|;
name|ctor
operator|.
name|setReturnType
argument_list|(
name|prototype
operator|.
name|typeName
argument_list|()
argument_list|)
expr_stmt|;
name|ctor
operator|.
name|setParameterNames
argument_list|(
name|prototype
operator|.
name|parameterNames
argument_list|()
argument_list|)
expr_stmt|;
name|ctor
operator|.
name|setTag
argument_list|(
name|prototype
operator|.
name|tag
argument_list|()
argument_list|)
expr_stmt|;
name|ctor
operator|.
name|setAccess
argument_list|(
name|prototype
operator|.
name|access
argument_list|()
argument_list|)
expr_stmt|;
name|ctor
operator|.
name|setAttributes
argument_list|(
name|prototype
operator|.
name|attributes
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ctor
return|;
block|}
end_function
begin_comment
comment|/*!     Adds a new readable/writable property to this class with the     specified \a name and \a type.  Returns an object that can be used     to adjust the other attributes of the property.  The \a type will     be normalized before it is added to the class. \a notifierId will     be registered as the property's \e notify signal.      \sa property(), propertyCount(), removeProperty(), indexOfProperty() */
end_comment
begin_function
DECL|function|addProperty
name|QMetaPropertyBuilder
name|QMetaObjectBuilder
operator|::
name|addProperty
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|name
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|type
parameter_list|,
name|int
name|notifierId
parameter_list|)
block|{
name|int
name|index
init|=
name|d
operator|->
name|properties
operator|.
name|size
argument_list|()
decl_stmt|;
name|d
operator|->
name|properties
operator|.
name|append
argument_list|(
name|QMetaPropertyBuilderPrivate
argument_list|(
name|name
argument_list|,
name|type
argument_list|,
name|notifierId
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|QMetaPropertyBuilder
argument_list|(
name|this
argument_list|,
name|index
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Adds a new property to this class that has the same information as     \a prototype.  This is used to clone the properties of an existing     QMetaObject.  Returns an object that can be used to adjust the     attributes of the property.      \sa property(), propertyCount(), removeProperty(), indexOfProperty() */
end_comment
begin_function
DECL|function|addProperty
name|QMetaPropertyBuilder
name|QMetaObjectBuilder
operator|::
name|addProperty
parameter_list|(
specifier|const
name|QMetaProperty
modifier|&
name|prototype
parameter_list|)
block|{
name|QMetaPropertyBuilder
name|property
init|=
name|addProperty
argument_list|(
name|prototype
operator|.
name|name
argument_list|()
argument_list|,
name|prototype
operator|.
name|typeName
argument_list|()
argument_list|)
decl_stmt|;
name|property
operator|.
name|setReadable
argument_list|(
name|prototype
operator|.
name|isReadable
argument_list|()
argument_list|)
expr_stmt|;
name|property
operator|.
name|setWritable
argument_list|(
name|prototype
operator|.
name|isWritable
argument_list|()
argument_list|)
expr_stmt|;
name|property
operator|.
name|setResettable
argument_list|(
name|prototype
operator|.
name|isResettable
argument_list|()
argument_list|)
expr_stmt|;
name|property
operator|.
name|setDesignable
argument_list|(
name|prototype
operator|.
name|isDesignable
argument_list|()
argument_list|)
expr_stmt|;
name|property
operator|.
name|setScriptable
argument_list|(
name|prototype
operator|.
name|isScriptable
argument_list|()
argument_list|)
expr_stmt|;
name|property
operator|.
name|setStored
argument_list|(
name|prototype
operator|.
name|isStored
argument_list|()
argument_list|)
expr_stmt|;
name|property
operator|.
name|setEditable
argument_list|(
name|prototype
operator|.
name|isEditable
argument_list|()
argument_list|)
expr_stmt|;
name|property
operator|.
name|setUser
argument_list|(
name|prototype
operator|.
name|isUser
argument_list|()
argument_list|)
expr_stmt|;
name|property
operator|.
name|setStdCppSet
argument_list|(
name|prototype
operator|.
name|hasStdCppSet
argument_list|()
argument_list|)
expr_stmt|;
name|property
operator|.
name|setEnumOrFlag
argument_list|(
name|prototype
operator|.
name|isEnumType
argument_list|()
argument_list|)
expr_stmt|;
name|property
operator|.
name|setConstant
argument_list|(
name|prototype
operator|.
name|isConstant
argument_list|()
argument_list|)
expr_stmt|;
name|property
operator|.
name|setFinal
argument_list|(
name|prototype
operator|.
name|isFinal
argument_list|()
argument_list|)
expr_stmt|;
name|property
operator|.
name|setRevision
argument_list|(
name|prototype
operator|.
name|revision
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|prototype
operator|.
name|hasNotifySignal
argument_list|()
condition|)
block|{
comment|// Find an existing method for the notify signal, or add a new one.
name|QMetaMethod
name|method
init|=
name|prototype
operator|.
name|notifySignal
argument_list|()
decl_stmt|;
name|int
name|index
init|=
name|indexOfMethod
argument_list|(
name|method
operator|.
name|methodSignature
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|==
operator|-
literal|1
condition|)
name|index
operator|=
name|addMethod
argument_list|(
name|method
argument_list|)
operator|.
name|index
argument_list|()
expr_stmt|;
name|d
operator|->
name|properties
index|[
name|property
operator|.
name|_index
index|]
operator|.
name|notifySignal
operator|=
name|index
expr_stmt|;
name|d
operator|->
name|properties
index|[
name|property
operator|.
name|_index
index|]
operator|.
name|setFlag
argument_list|(
name|Notify
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|property
return|;
block|}
end_function
begin_comment
comment|/*!     Adds a new enumerator to this class with the specified     \a name.  Returns an object that can be used to adjust     the other attributes of the enumerator.      \sa enumerator(), enumeratorCount(), removeEnumerator()     \sa indexOfEnumerator() */
end_comment
begin_function
DECL|function|addEnumerator
name|QMetaEnumBuilder
name|QMetaObjectBuilder
operator|::
name|addEnumerator
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|name
parameter_list|)
block|{
name|int
name|index
init|=
name|d
operator|->
name|enumerators
operator|.
name|size
argument_list|()
decl_stmt|;
name|d
operator|->
name|enumerators
operator|.
name|append
argument_list|(
name|QMetaEnumBuilderPrivate
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|QMetaEnumBuilder
argument_list|(
name|this
argument_list|,
name|index
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Adds a new enumerator to this class that has the same information as     \a prototype.  This is used to clone the enumerators of an existing     QMetaObject.  Returns an object that can be used to adjust the     attributes of the enumerator.      \sa enumerator(), enumeratorCount(), removeEnumerator()     \sa indexOfEnumerator() */
end_comment
begin_function
DECL|function|addEnumerator
name|QMetaEnumBuilder
name|QMetaObjectBuilder
operator|::
name|addEnumerator
parameter_list|(
specifier|const
name|QMetaEnum
modifier|&
name|prototype
parameter_list|)
block|{
name|QMetaEnumBuilder
name|en
init|=
name|addEnumerator
argument_list|(
name|prototype
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|en
operator|.
name|setIsFlag
argument_list|(
name|prototype
operator|.
name|isFlag
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|count
init|=
name|prototype
operator|.
name|keyCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|count
condition|;
operator|++
name|index
control|)
name|en
operator|.
name|addKey
argument_list|(
name|prototype
operator|.
name|key
argument_list|(
name|index
argument_list|)
argument_list|,
name|prototype
operator|.
name|value
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|en
return|;
block|}
end_function
begin_comment
comment|/*!     Adds \a name and \a value as an item of class information to this class.     Returns the index of the new item of class information.      \sa classInfoCount(), classInfoName(), classInfoValue(), removeClassInfo()     \sa indexOfClassInfo() */
end_comment
begin_function
DECL|function|addClassInfo
name|int
name|QMetaObjectBuilder
operator|::
name|addClassInfo
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|name
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|value
parameter_list|)
block|{
name|int
name|index
init|=
name|d
operator|->
name|classInfoNames
operator|.
name|size
argument_list|()
decl_stmt|;
name|d
operator|->
name|classInfoNames
operator|+=
name|name
expr_stmt|;
name|d
operator|->
name|classInfoValues
operator|+=
name|value
expr_stmt|;
return|return
name|index
return|;
block|}
end_function
begin_comment
comment|/*!     Adds \a meta to this class as a related meta object.  Returns     the index of the new related meta object entry.      Related meta objects are used when resolving the enumerated type     associated with a property, where the enumerated type is in a     different class from the property.      \sa relatedMetaObjectCount(), relatedMetaObject()     \sa removeRelatedMetaObject() */
end_comment
begin_function
DECL|function|addRelatedMetaObject
name|int
name|QMetaObjectBuilder
operator|::
name|addRelatedMetaObject
parameter_list|(
specifier|const
name|QMetaObject
modifier|*
name|meta
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|meta
argument_list|)
expr_stmt|;
name|int
name|index
init|=
name|d
operator|->
name|relatedMetaObjects
operator|.
name|size
argument_list|()
decl_stmt|;
name|d
operator|->
name|relatedMetaObjects
operator|.
name|append
argument_list|(
name|meta
argument_list|)
expr_stmt|;
return|return
name|index
return|;
block|}
end_function
begin_comment
comment|/*!     Adds the contents of \a prototype to this meta object builder.     This function is useful for cloning the contents of an existing QMetaObject.      The \a members parameter indicates which members of \a prototype     should be added.  The default is AllMembers. */
end_comment
begin_function
DECL|function|addMetaObject
name|void
name|QMetaObjectBuilder
operator|::
name|addMetaObject
parameter_list|(
specifier|const
name|QMetaObject
modifier|*
name|prototype
parameter_list|,
name|QMetaObjectBuilder
operator|::
name|AddMembers
name|members
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|prototype
argument_list|)
expr_stmt|;
name|int
name|index
decl_stmt|;
if|if
condition|(
operator|(
name|members
operator|&
name|ClassName
operator|)
operator|!=
literal|0
condition|)
name|d
operator|->
name|className
operator|=
name|prototype
operator|->
name|className
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|members
operator|&
name|SuperClass
operator|)
operator|!=
literal|0
condition|)
name|d
operator|->
name|superClass
operator|=
name|prototype
operator|->
name|superClass
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|members
operator|&
operator|(
name|Methods
operator||
name|Signals
operator||
name|Slots
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
for|for
control|(
name|index
operator|=
name|prototype
operator|->
name|methodOffset
argument_list|()
init|;
name|index
operator|<
name|prototype
operator|->
name|methodCount
argument_list|()
condition|;
operator|++
name|index
control|)
block|{
name|QMetaMethod
name|method
init|=
name|prototype
operator|->
name|method
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|method
operator|.
name|methodType
argument_list|()
operator|!=
name|QMetaMethod
operator|::
name|Signal
condition|)
block|{
if|if
condition|(
name|method
operator|.
name|access
argument_list|()
operator|==
name|QMetaMethod
operator|::
name|Public
operator|&&
operator|(
name|members
operator|&
name|PublicMethods
operator|)
operator|==
literal|0
condition|)
continue|continue;
if|if
condition|(
name|method
operator|.
name|access
argument_list|()
operator|==
name|QMetaMethod
operator|::
name|Private
operator|&&
operator|(
name|members
operator|&
name|PrivateMethods
operator|)
operator|==
literal|0
condition|)
continue|continue;
if|if
condition|(
name|method
operator|.
name|access
argument_list|()
operator|==
name|QMetaMethod
operator|::
name|Protected
operator|&&
operator|(
name|members
operator|&
name|ProtectedMethods
operator|)
operator|==
literal|0
condition|)
continue|continue;
block|}
if|if
condition|(
name|method
operator|.
name|methodType
argument_list|()
operator|==
name|QMetaMethod
operator|::
name|Method
operator|&&
operator|(
name|members
operator|&
name|Methods
operator|)
operator|!=
literal|0
condition|)
block|{
name|addMethod
argument_list|(
name|method
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|method
operator|.
name|methodType
argument_list|()
operator|==
name|QMetaMethod
operator|::
name|Signal
operator|&&
operator|(
name|members
operator|&
name|Signals
operator|)
operator|!=
literal|0
condition|)
block|{
name|addMethod
argument_list|(
name|method
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|method
operator|.
name|methodType
argument_list|()
operator|==
name|QMetaMethod
operator|::
name|Slot
operator|&&
operator|(
name|members
operator|&
name|Slots
operator|)
operator|!=
literal|0
condition|)
block|{
name|addMethod
argument_list|(
name|method
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|(
name|members
operator|&
name|Constructors
operator|)
operator|!=
literal|0
condition|)
block|{
for|for
control|(
name|index
operator|=
literal|0
init|;
name|index
operator|<
name|prototype
operator|->
name|constructorCount
argument_list|()
condition|;
operator|++
name|index
control|)
name|addConstructor
argument_list|(
name|prototype
operator|->
name|constructor
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|members
operator|&
name|Properties
operator|)
operator|!=
literal|0
condition|)
block|{
for|for
control|(
name|index
operator|=
name|prototype
operator|->
name|propertyOffset
argument_list|()
init|;
name|index
operator|<
name|prototype
operator|->
name|propertyCount
argument_list|()
condition|;
operator|++
name|index
control|)
name|addProperty
argument_list|(
name|prototype
operator|->
name|property
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|members
operator|&
name|Enumerators
operator|)
operator|!=
literal|0
condition|)
block|{
for|for
control|(
name|index
operator|=
name|prototype
operator|->
name|enumeratorOffset
argument_list|()
init|;
name|index
operator|<
name|prototype
operator|->
name|enumeratorCount
argument_list|()
condition|;
operator|++
name|index
control|)
name|addEnumerator
argument_list|(
name|prototype
operator|->
name|enumerator
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|members
operator|&
name|ClassInfos
operator|)
operator|!=
literal|0
condition|)
block|{
for|for
control|(
name|index
operator|=
name|prototype
operator|->
name|classInfoOffset
argument_list|()
init|;
name|index
operator|<
name|prototype
operator|->
name|classInfoCount
argument_list|()
condition|;
operator|++
name|index
control|)
block|{
name|QMetaClassInfo
name|ci
init|=
name|prototype
operator|->
name|classInfo
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|addClassInfo
argument_list|(
name|ci
operator|.
name|name
argument_list|()
argument_list|,
name|ci
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|(
name|members
operator|&
name|RelatedMetaObjects
operator|)
operator|!=
literal|0
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|priv
argument_list|(
name|prototype
operator|->
name|d
operator|.
name|data
argument_list|)
operator|->
name|revision
operator|>=
literal|2
argument_list|)
expr_stmt|;
specifier|const
name|QMetaObject
modifier|*
specifier|const
modifier|*
name|objects
init|=
name|prototype
operator|->
name|d
operator|.
name|relatedMetaObjects
decl_stmt|;
if|if
condition|(
name|objects
condition|)
block|{
while|while
condition|(
operator|*
name|objects
operator|!=
literal|0
condition|)
block|{
name|addRelatedMetaObject
argument_list|(
operator|*
name|objects
argument_list|)
expr_stmt|;
operator|++
name|objects
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|(
name|members
operator|&
name|StaticMetacall
operator|)
operator|!=
literal|0
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|priv
argument_list|(
name|prototype
operator|->
name|d
operator|.
name|data
argument_list|)
operator|->
name|revision
operator|>=
literal|6
argument_list|)
expr_stmt|;
if|if
condition|(
name|prototype
operator|->
name|d
operator|.
name|static_metacall
condition|)
name|setStaticMetacallFunction
argument_list|(
name|prototype
operator|->
name|d
operator|.
name|static_metacall
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     Returns the method at \a index in this class.      \sa methodCount(), addMethod(), removeMethod(), indexOfMethod() */
end_comment
begin_function
DECL|function|method
name|QMetaMethodBuilder
name|QMetaObjectBuilder
operator|::
name|method
parameter_list|(
name|int
name|index
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|index
operator|>=
literal|0
operator|&&
name|index
operator|<
name|d
operator|->
name|methods
operator|.
name|size
argument_list|()
condition|)
return|return
name|QMetaMethodBuilder
argument_list|(
name|this
argument_list|,
name|index
argument_list|)
return|;
else|else
return|return
name|QMetaMethodBuilder
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the constructor at \a index in this class.      \sa methodCount(), addMethod(), removeMethod(), indexOfConstructor() */
end_comment
begin_function
DECL|function|constructor
name|QMetaMethodBuilder
name|QMetaObjectBuilder
operator|::
name|constructor
parameter_list|(
name|int
name|index
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|index
operator|>=
literal|0
operator|&&
name|index
operator|<
name|d
operator|->
name|constructors
operator|.
name|size
argument_list|()
condition|)
return|return
name|QMetaMethodBuilder
argument_list|(
name|this
argument_list|,
operator|-
operator|(
name|index
operator|+
literal|1
operator|)
argument_list|)
return|;
else|else
return|return
name|QMetaMethodBuilder
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the property at \a index in this class.      \sa methodCount(), addMethod(), removeMethod(), indexOfProperty() */
end_comment
begin_function
DECL|function|property
name|QMetaPropertyBuilder
name|QMetaObjectBuilder
operator|::
name|property
parameter_list|(
name|int
name|index
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|index
operator|>=
literal|0
operator|&&
name|index
operator|<
name|d
operator|->
name|properties
operator|.
name|size
argument_list|()
condition|)
return|return
name|QMetaPropertyBuilder
argument_list|(
name|this
argument_list|,
name|index
argument_list|)
return|;
else|else
return|return
name|QMetaPropertyBuilder
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the enumerator at \a index in this class.      \sa enumeratorCount(), addEnumerator(), removeEnumerator()     \sa indexOfEnumerator() */
end_comment
begin_function
DECL|function|enumerator
name|QMetaEnumBuilder
name|QMetaObjectBuilder
operator|::
name|enumerator
parameter_list|(
name|int
name|index
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|index
operator|>=
literal|0
operator|&&
name|index
operator|<
name|d
operator|->
name|enumerators
operator|.
name|size
argument_list|()
condition|)
return|return
name|QMetaEnumBuilder
argument_list|(
name|this
argument_list|,
name|index
argument_list|)
return|;
else|else
return|return
name|QMetaEnumBuilder
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the related meta object at \a index in this class.      Related meta objects are used when resolving the enumerated type     associated with a property, where the enumerated type is in a     different class from the property.      \sa relatedMetaObjectCount(), addRelatedMetaObject()     \sa removeRelatedMetaObject() */
end_comment
begin_function
DECL|function|relatedMetaObject
specifier|const
name|QMetaObject
modifier|*
name|QMetaObjectBuilder
operator|::
name|relatedMetaObject
parameter_list|(
name|int
name|index
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|index
operator|>=
literal|0
operator|&&
name|index
operator|<
name|d
operator|->
name|relatedMetaObjects
operator|.
name|size
argument_list|()
condition|)
return|return
name|d
operator|->
name|relatedMetaObjects
index|[
name|index
index|]
return|;
else|else
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the name of the item of class information at \a index     in this class.      \sa classInfoCount(), addClassInfo(), classInfoValue(), removeClassInfo()     \sa indexOfClassInfo() */
end_comment
begin_function
DECL|function|classInfoName
name|QByteArray
name|QMetaObjectBuilder
operator|::
name|classInfoName
parameter_list|(
name|int
name|index
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|index
operator|>=
literal|0
operator|&&
name|index
operator|<
name|d
operator|->
name|classInfoNames
operator|.
name|size
argument_list|()
condition|)
return|return
name|d
operator|->
name|classInfoNames
index|[
name|index
index|]
return|;
else|else
return|return
name|QByteArray
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the value of the item of class information at \a index     in this class.      \sa classInfoCount(), addClassInfo(), classInfoName(), removeClassInfo()     \sa indexOfClassInfo() */
end_comment
begin_function
DECL|function|classInfoValue
name|QByteArray
name|QMetaObjectBuilder
operator|::
name|classInfoValue
parameter_list|(
name|int
name|index
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|index
operator|>=
literal|0
operator|&&
name|index
operator|<
name|d
operator|->
name|classInfoValues
operator|.
name|size
argument_list|()
condition|)
return|return
name|d
operator|->
name|classInfoValues
index|[
name|index
index|]
return|;
else|else
return|return
name|QByteArray
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Removes the method at \a index from this class.  The indices of     all following methods will be adjusted downwards by 1.  If the     method is registered as a notify signal on a property, then the     notify signal will be removed from the property.      \sa methodCount(), addMethod(), method(), indexOfMethod() */
end_comment
begin_function
DECL|function|removeMethod
name|void
name|QMetaObjectBuilder
operator|::
name|removeMethod
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|index
operator|>=
literal|0
operator|&&
name|index
operator|<
name|d
operator|->
name|methods
operator|.
name|size
argument_list|()
condition|)
block|{
name|d
operator|->
name|methods
operator|.
name|removeAt
argument_list|(
name|index
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|prop
init|=
literal|0
init|;
name|prop
operator|<
name|d
operator|->
name|properties
operator|.
name|size
argument_list|()
condition|;
operator|++
name|prop
control|)
block|{
comment|// Adjust the indices of property notify signal references.
if|if
condition|(
name|d
operator|->
name|properties
index|[
name|prop
index|]
operator|.
name|notifySignal
operator|==
name|index
condition|)
block|{
name|d
operator|->
name|properties
index|[
name|prop
index|]
operator|.
name|notifySignal
operator|=
operator|-
literal|1
expr_stmt|;
name|d
operator|->
name|properties
index|[
name|prop
index|]
operator|.
name|setFlag
argument_list|(
name|Notify
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|d
operator|->
name|properties
index|[
name|prop
index|]
operator|.
name|notifySignal
operator|>
name|index
condition|)
operator|(
name|d
operator|->
name|properties
index|[
name|prop
index|]
operator|.
name|notifySignal
operator|)
operator|--
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|/*!     Removes the constructor at \a index from this class.  The indices of     all following constructors will be adjusted downwards by 1.      \sa constructorCount(), addConstructor(), constructor()     \sa indexOfConstructor() */
end_comment
begin_function
DECL|function|removeConstructor
name|void
name|QMetaObjectBuilder
operator|::
name|removeConstructor
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|index
operator|>=
literal|0
operator|&&
name|index
operator|<
name|d
operator|->
name|constructors
operator|.
name|size
argument_list|()
condition|)
name|d
operator|->
name|constructors
operator|.
name|removeAt
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Removes the property at \a index from this class.  The indices of     all following properties will be adjusted downwards by 1.      \sa propertyCount(), addProperty(), property(), indexOfProperty() */
end_comment
begin_function
DECL|function|removeProperty
name|void
name|QMetaObjectBuilder
operator|::
name|removeProperty
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|index
operator|>=
literal|0
operator|&&
name|index
operator|<
name|d
operator|->
name|properties
operator|.
name|size
argument_list|()
condition|)
name|d
operator|->
name|properties
operator|.
name|removeAt
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Removes the enumerator at \a index from this class.  The indices of     all following enumerators will be adjusted downwards by 1.      \sa enumertorCount(), addEnumerator(), enumerator()     \sa indexOfEnumerator() */
end_comment
begin_function
DECL|function|removeEnumerator
name|void
name|QMetaObjectBuilder
operator|::
name|removeEnumerator
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|index
operator|>=
literal|0
operator|&&
name|index
operator|<
name|d
operator|->
name|enumerators
operator|.
name|size
argument_list|()
condition|)
name|d
operator|->
name|enumerators
operator|.
name|removeAt
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Removes the item of class information at \a index from this class.     The indices of all following items will be adjusted downwards by 1.      \sa classInfoCount(), addClassInfo(), classInfoName(), classInfoValue()     \sa indexOfClassInfo() */
end_comment
begin_function
DECL|function|removeClassInfo
name|void
name|QMetaObjectBuilder
operator|::
name|removeClassInfo
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|index
operator|>=
literal|0
operator|&&
name|index
operator|<
name|d
operator|->
name|classInfoNames
operator|.
name|size
argument_list|()
condition|)
block|{
name|d
operator|->
name|classInfoNames
operator|.
name|removeAt
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|d
operator|->
name|classInfoValues
operator|.
name|removeAt
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     Removes the related meta object at \a index from this class.     The indices of all following related meta objects will be adjusted     downwards by 1.      Related meta objects are used when resolving the enumerated type     associated with a property, where the enumerated type is in a     different class from the property.      \sa relatedMetaObjectCount(), addRelatedMetaObject()     \sa relatedMetaObject() */
end_comment
begin_function
DECL|function|removeRelatedMetaObject
name|void
name|QMetaObjectBuilder
operator|::
name|removeRelatedMetaObject
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|index
operator|>=
literal|0
operator|&&
name|index
operator|<
name|d
operator|->
name|relatedMetaObjects
operator|.
name|size
argument_list|()
condition|)
name|d
operator|->
name|relatedMetaObjects
operator|.
name|removeAt
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Finds a method with the specified \a signature and returns its index;     otherwise returns -1.  The \a signature will be normalized by this method.      \sa method(), methodCount(), addMethod(), removeMethod() */
end_comment
begin_function
DECL|function|indexOfMethod
name|int
name|QMetaObjectBuilder
operator|::
name|indexOfMethod
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|signature
parameter_list|)
block|{
name|QByteArray
name|sig
init|=
name|QMetaObject
operator|::
name|normalizedSignature
argument_list|(
name|signature
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|d
operator|->
name|methods
operator|.
name|size
argument_list|()
condition|;
operator|++
name|index
control|)
block|{
if|if
condition|(
name|sig
operator|==
name|d
operator|->
name|methods
index|[
name|index
index|]
operator|.
name|signature
condition|)
return|return
name|index
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_comment
comment|/*!     Finds a signal with the specified \a signature and returns its index;     otherwise returns -1.  The \a signature will be normalized by this method.      \sa indexOfMethod(), indexOfSlot() */
end_comment
begin_function
DECL|function|indexOfSignal
name|int
name|QMetaObjectBuilder
operator|::
name|indexOfSignal
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|signature
parameter_list|)
block|{
name|QByteArray
name|sig
init|=
name|QMetaObject
operator|::
name|normalizedSignature
argument_list|(
name|signature
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|d
operator|->
name|methods
operator|.
name|size
argument_list|()
condition|;
operator|++
name|index
control|)
block|{
if|if
condition|(
name|sig
operator|==
name|d
operator|->
name|methods
index|[
name|index
index|]
operator|.
name|signature
operator|&&
name|d
operator|->
name|methods
index|[
name|index
index|]
operator|.
name|methodType
argument_list|()
operator|==
name|QMetaMethod
operator|::
name|Signal
condition|)
return|return
name|index
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_comment
comment|/*!     Finds a slot with the specified \a signature and returns its index;     otherwise returns -1.  The \a signature will be normalized by this method.      \sa indexOfMethod(), indexOfSignal() */
end_comment
begin_function
DECL|function|indexOfSlot
name|int
name|QMetaObjectBuilder
operator|::
name|indexOfSlot
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|signature
parameter_list|)
block|{
name|QByteArray
name|sig
init|=
name|QMetaObject
operator|::
name|normalizedSignature
argument_list|(
name|signature
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|d
operator|->
name|methods
operator|.
name|size
argument_list|()
condition|;
operator|++
name|index
control|)
block|{
if|if
condition|(
name|sig
operator|==
name|d
operator|->
name|methods
index|[
name|index
index|]
operator|.
name|signature
operator|&&
name|d
operator|->
name|methods
index|[
name|index
index|]
operator|.
name|methodType
argument_list|()
operator|==
name|QMetaMethod
operator|::
name|Slot
condition|)
return|return
name|index
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_comment
comment|/*!     Finds a constructor with the specified \a signature and returns its index;     otherwise returns -1.  The \a signature will be normalized by this method.      \sa constructor(), constructorCount(), addConstructor(), removeConstructor() */
end_comment
begin_function
DECL|function|indexOfConstructor
name|int
name|QMetaObjectBuilder
operator|::
name|indexOfConstructor
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|signature
parameter_list|)
block|{
name|QByteArray
name|sig
init|=
name|QMetaObject
operator|::
name|normalizedSignature
argument_list|(
name|signature
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|d
operator|->
name|constructors
operator|.
name|size
argument_list|()
condition|;
operator|++
name|index
control|)
block|{
if|if
condition|(
name|sig
operator|==
name|d
operator|->
name|constructors
index|[
name|index
index|]
operator|.
name|signature
condition|)
return|return
name|index
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_comment
comment|/*!     Finds a property with the specified \a name and returns its index;     otherwise returns -1.      \sa property(), propertyCount(), addProperty(), removeProperty() */
end_comment
begin_function
DECL|function|indexOfProperty
name|int
name|QMetaObjectBuilder
operator|::
name|indexOfProperty
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|name
parameter_list|)
block|{
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|d
operator|->
name|properties
operator|.
name|size
argument_list|()
condition|;
operator|++
name|index
control|)
block|{
if|if
condition|(
name|name
operator|==
name|d
operator|->
name|properties
index|[
name|index
index|]
operator|.
name|name
condition|)
return|return
name|index
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_comment
comment|/*!     Finds an enumerator with the specified \a name and returns its index;     otherwise returns -1.      \sa enumertor(), enumeratorCount(), addEnumerator(), removeEnumerator() */
end_comment
begin_function
DECL|function|indexOfEnumerator
name|int
name|QMetaObjectBuilder
operator|::
name|indexOfEnumerator
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|name
parameter_list|)
block|{
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|d
operator|->
name|enumerators
operator|.
name|size
argument_list|()
condition|;
operator|++
name|index
control|)
block|{
if|if
condition|(
name|name
operator|==
name|d
operator|->
name|enumerators
index|[
name|index
index|]
operator|.
name|name
condition|)
return|return
name|index
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_comment
comment|/*!     Finds an item of class information with the specified \a name and     returns its index; otherwise returns -1.      \sa classInfoName(), classInfoValue(), classInfoCount(), addClassInfo()     \sa removeClassInfo() */
end_comment
begin_function
DECL|function|indexOfClassInfo
name|int
name|QMetaObjectBuilder
operator|::
name|indexOfClassInfo
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|name
parameter_list|)
block|{
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|d
operator|->
name|classInfoNames
operator|.
name|size
argument_list|()
condition|;
operator|++
name|index
control|)
block|{
if|if
condition|(
name|name
operator|==
name|d
operator|->
name|classInfoNames
index|[
name|index
index|]
condition|)
return|return
name|index
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_comment
comment|// Align on a specific type boundary.
end_comment
begin_define
DECL|macro|ALIGN
define|#
directive|define
name|ALIGN
parameter_list|(
name|size
parameter_list|,
name|type
parameter_list|)
define|\
value|(size) = ((size) + sizeof(type) - 1)& ~(sizeof(type) - 1)
end_define
begin_comment
comment|/*!     \class QMetaStringTable     \inmodule QtCore     \internal     \brief The QMetaStringTable class can generate a meta-object string table at runtime. */
end_comment
begin_constructor
DECL|function|QMetaStringTable
name|QMetaStringTable
operator|::
name|QMetaStringTable
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|className
parameter_list|)
member_init_list|:
name|m_index
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_className
argument_list|(
name|className
argument_list|)
block|{
specifier|const
name|int
name|index
init|=
name|enter
argument_list|(
name|m_className
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|index
operator|==
literal|0
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|// Enters the given value into the string table (if it hasn't already been
end_comment
begin_comment
comment|// entered). Returns the index of the string.
end_comment
begin_function
DECL|function|enter
name|int
name|QMetaStringTable
operator|::
name|enter
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|value
parameter_list|)
block|{
name|Entries
operator|::
name|iterator
name|it
init|=
name|m_entries
operator|.
name|find
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|!=
name|m_entries
operator|.
name|end
argument_list|()
condition|)
return|return
name|it
operator|.
name|value
argument_list|()
return|;
name|int
name|pos
init|=
name|m_index
decl_stmt|;
name|m_entries
operator|.
name|insert
argument_list|(
name|value
argument_list|,
name|pos
argument_list|)
expr_stmt|;
operator|++
name|m_index
expr_stmt|;
return|return
name|pos
return|;
block|}
end_function
begin_function
DECL|function|preferredAlignment
name|int
name|QMetaStringTable
operator|::
name|preferredAlignment
parameter_list|()
block|{
return|return
name|Q_ALIGNOF
argument_list|(
name|QByteArrayData
argument_list|)
return|;
block|}
end_function
begin_comment
comment|// Returns the size (in bytes) required for serializing this string table.
end_comment
begin_function
DECL|function|blobSize
name|int
name|QMetaStringTable
operator|::
name|blobSize
parameter_list|()
specifier|const
block|{
name|int
name|size
init|=
name|m_entries
operator|.
name|size
argument_list|()
operator|*
sizeof|sizeof
argument_list|(
name|QByteArrayData
argument_list|)
decl_stmt|;
name|Entries
operator|::
name|const_iterator
name|it
decl_stmt|;
for|for
control|(
name|it
operator|=
name|m_entries
operator|.
name|constBegin
argument_list|()
init|;
name|it
operator|!=
name|m_entries
operator|.
name|constEnd
argument_list|()
condition|;
operator|++
name|it
control|)
name|size
operator|+=
name|it
operator|.
name|key
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|1
expr_stmt|;
return|return
name|size
return|;
block|}
end_function
begin_function
DECL|function|writeString
specifier|static
name|void
name|writeString
parameter_list|(
name|char
modifier|*
name|out
parameter_list|,
name|int
name|i
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|str
parameter_list|,
specifier|const
name|int
name|offsetOfStringdataMember
parameter_list|,
name|int
modifier|&
name|stringdataOffset
parameter_list|)
block|{
name|int
name|size
init|=
name|str
operator|.
name|size
argument_list|()
decl_stmt|;
name|qptrdiff
name|offset
init|=
name|offsetOfStringdataMember
operator|+
name|stringdataOffset
operator|-
name|i
operator|*
sizeof|sizeof
argument_list|(
name|QByteArrayData
argument_list|)
decl_stmt|;
specifier|const
name|QByteArrayData
name|data
init|=
name|Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET
argument_list|(
name|size
argument_list|,
name|offset
argument_list|)
decl_stmt|;
name|memcpy
argument_list|(
name|out
operator|+
name|i
operator|*
sizeof|sizeof
argument_list|(
name|QByteArrayData
argument_list|)
argument_list|,
operator|&
name|data
argument_list|,
sizeof|sizeof
argument_list|(
name|QByteArrayData
argument_list|)
argument_list|)
expr_stmt|;
name|memcpy
argument_list|(
name|out
operator|+
name|offsetOfStringdataMember
operator|+
name|stringdataOffset
argument_list|,
name|str
operator|.
name|constData
argument_list|()
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|out
index|[
name|offsetOfStringdataMember
operator|+
name|stringdataOffset
operator|+
name|size
index|]
operator|=
literal|'\0'
expr_stmt|;
name|stringdataOffset
operator|+=
name|size
operator|+
literal|1
expr_stmt|;
block|}
end_function
begin_comment
comment|// Writes strings to string data struct.
end_comment
begin_comment
comment|// The struct consists of an array of QByteArrayData, followed by a char array
end_comment
begin_comment
comment|// containing the actual strings. This format must match the one produced by
end_comment
begin_comment
comment|// moc (see generator.cpp).
end_comment
begin_function
DECL|function|writeBlob
name|void
name|QMetaStringTable
operator|::
name|writeBlob
parameter_list|(
name|char
modifier|*
name|out
parameter_list|)
specifier|const
block|{
name|Q_ASSERT
argument_list|(
operator|!
operator|(
cast|reinterpret_cast
argument_list|<
name|quintptr
argument_list|>
argument_list|(
name|out
argument_list|)
operator|&
operator|(
name|preferredAlignment
argument_list|()
operator|-
literal|1
operator|)
operator|)
argument_list|)
expr_stmt|;
name|int
name|offsetOfStringdataMember
init|=
name|m_entries
operator|.
name|size
argument_list|()
operator|*
sizeof|sizeof
argument_list|(
name|QByteArrayData
argument_list|)
decl_stmt|;
name|int
name|stringdataOffset
init|=
literal|0
decl_stmt|;
comment|// qt_metacast expects the first string in the string table to be the class name.
name|writeString
argument_list|(
name|out
argument_list|,
comment|/*index*/
literal|0
argument_list|,
name|m_className
argument_list|,
name|offsetOfStringdataMember
argument_list|,
name|stringdataOffset
argument_list|)
expr_stmt|;
for|for
control|(
name|Entries
operator|::
name|ConstIterator
name|it
init|=
name|m_entries
operator|.
name|constBegin
argument_list|()
init|,
name|end
init|=
name|m_entries
operator|.
name|constEnd
argument_list|()
init|;
name|it
operator|!=
name|end
condition|;
operator|++
name|it
control|)
block|{
specifier|const
name|int
name|i
init|=
name|it
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
continue|continue;
specifier|const
name|QByteArray
modifier|&
name|str
init|=
name|it
operator|.
name|key
argument_list|()
decl_stmt|;
name|writeString
argument_list|(
name|out
argument_list|,
name|i
argument_list|,
name|str
argument_list|,
name|offsetOfStringdataMember
argument_list|,
name|stringdataOffset
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|// Returns the sum of all parameters (including return type) for the given
end_comment
begin_comment
comment|// \a methods. This is needed for calculating the size of the methods'
end_comment
begin_comment
comment|// parameter type/name meta-data.
end_comment
begin_function
DECL|function|aggregateParameterCount
specifier|static
name|int
name|aggregateParameterCount
parameter_list|(
specifier|const
name|QList
argument_list|<
name|QMetaMethodBuilderPrivate
argument_list|>
modifier|&
name|methods
parameter_list|)
block|{
name|int
name|sum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|methods
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|sum
operator|+=
name|methods
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|parameterCount
argument_list|()
operator|+
literal|1
expr_stmt|;
comment|// +1 for return type
return|return
name|sum
return|;
block|}
end_function
begin_comment
comment|// Build a QMetaObject in "buf" based on the information in "d".
end_comment
begin_comment
comment|// If "buf" is null, then return the number of bytes needed to
end_comment
begin_comment
comment|// build the QMetaObject.  Returns -1 if the metaobject if
end_comment
begin_comment
comment|// relocatable is set, but the metaobject contains relatedMetaObjects.
end_comment
begin_function
DECL|function|buildMetaObject
specifier|static
name|int
name|buildMetaObject
parameter_list|(
name|QMetaObjectBuilderPrivate
modifier|*
name|d
parameter_list|,
name|char
modifier|*
name|buf
parameter_list|,
name|int
name|expectedSize
parameter_list|,
name|bool
name|relocatable
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|expectedSize
argument_list|)
expr_stmt|;
comment|// Avoid warning in release mode
name|int
name|size
init|=
literal|0
decl_stmt|;
name|int
name|dataIndex
decl_stmt|;
name|int
name|paramsIndex
decl_stmt|;
name|int
name|enumIndex
decl_stmt|;
name|int
name|index
decl_stmt|;
name|bool
name|hasRevisionedMethods
init|=
name|d
operator|->
name|hasRevisionedMethods
argument_list|()
decl_stmt|;
name|bool
name|hasRevisionedProperties
init|=
name|d
operator|->
name|hasRevisionedProperties
argument_list|()
decl_stmt|;
name|bool
name|hasNotifySignals
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|relocatable
operator|&&
operator|(
name|d
operator|->
name|relatedMetaObjects
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|||
name|d
operator|->
name|staticMetacallFunction
operator|)
condition|)
return|return
operator|-
literal|1
return|;
comment|// Create the main QMetaObject structure at the start of the buffer.
name|QMetaObject
modifier|*
name|meta
init|=
cast|reinterpret_cast
argument_list|<
name|QMetaObject
operator|*
argument_list|>
argument_list|(
name|buf
argument_list|)
decl_stmt|;
name|size
operator|+=
sizeof|sizeof
argument_list|(
name|QMetaObject
argument_list|)
expr_stmt|;
name|ALIGN
argument_list|(
name|size
argument_list|,
name|int
argument_list|)
expr_stmt|;
if|if
condition|(
name|buf
condition|)
block|{
if|if
condition|(
operator|!
name|relocatable
condition|)
name|meta
operator|->
name|d
operator|.
name|superdata
operator|=
name|d
operator|->
name|superClass
expr_stmt|;
name|meta
operator|->
name|d
operator|.
name|relatedMetaObjects
operator|=
literal|0
expr_stmt|;
name|meta
operator|->
name|d
operator|.
name|extradata
operator|=
literal|0
expr_stmt|;
name|meta
operator|->
name|d
operator|.
name|static_metacall
operator|=
name|d
operator|->
name|staticMetacallFunction
expr_stmt|;
block|}
comment|// Populate the QMetaObjectPrivate structure.
name|QMetaObjectPrivate
modifier|*
name|pmeta
init|=
cast|reinterpret_cast
argument_list|<
name|QMetaObjectPrivate
operator|*
argument_list|>
argument_list|(
name|buf
operator|+
name|size
argument_list|)
decl_stmt|;
name|int
name|pmetaSize
init|=
name|size
decl_stmt|;
name|dataIndex
operator|=
name|MetaObjectPrivateFieldCount
expr_stmt|;
for|for
control|(
name|index
operator|=
literal|0
init|;
name|index
operator|<
name|d
operator|->
name|properties
operator|.
name|size
argument_list|()
condition|;
operator|++
name|index
control|)
block|{
if|if
condition|(
name|d
operator|->
name|properties
index|[
name|index
index|]
operator|.
name|notifySignal
operator|!=
operator|-
literal|1
condition|)
block|{
name|hasNotifySignals
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|int
name|methodParametersDataSize
init|=
operator|(
operator|(
name|aggregateParameterCount
argument_list|(
name|d
operator|->
name|methods
argument_list|)
operator|+
name|aggregateParameterCount
argument_list|(
name|d
operator|->
name|constructors
argument_list|)
operator|)
operator|*
literal|2
operator|)
comment|// types and parameter names
operator|-
name|d
operator|->
name|methods
operator|.
name|size
argument_list|()
comment|// return "parameters" don't have names
operator|-
name|d
operator|->
name|constructors
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// "this" parameters don't have names
if|if
condition|(
name|buf
condition|)
block|{
name|Q_STATIC_ASSERT_X
argument_list|(
name|QMetaObjectPrivate
operator|::
name|OutputRevision
operator|==
literal|7
argument_list|,
literal|"QMetaObjectBuilder should generate the same version as moc"
argument_list|)
expr_stmt|;
name|pmeta
operator|->
name|revision
operator|=
name|QMetaObjectPrivate
operator|::
name|OutputRevision
expr_stmt|;
name|pmeta
operator|->
name|flags
operator|=
name|d
operator|->
name|flags
expr_stmt|;
name|pmeta
operator|->
name|className
operator|=
literal|0
expr_stmt|;
comment|// Class name is always the first string.
comment|//pmeta->signalCount is handled in the "output method loop" as an optimization.
name|pmeta
operator|->
name|classInfoCount
operator|=
name|d
operator|->
name|classInfoNames
operator|.
name|size
argument_list|()
expr_stmt|;
name|pmeta
operator|->
name|classInfoData
operator|=
name|dataIndex
expr_stmt|;
name|dataIndex
operator|+=
literal|2
operator|*
name|d
operator|->
name|classInfoNames
operator|.
name|size
argument_list|()
expr_stmt|;
name|pmeta
operator|->
name|methodCount
operator|=
name|d
operator|->
name|methods
operator|.
name|size
argument_list|()
expr_stmt|;
name|pmeta
operator|->
name|methodData
operator|=
name|dataIndex
expr_stmt|;
name|dataIndex
operator|+=
literal|5
operator|*
name|d
operator|->
name|methods
operator|.
name|size
argument_list|()
expr_stmt|;
if|if
condition|(
name|hasRevisionedMethods
condition|)
name|dataIndex
operator|+=
name|d
operator|->
name|methods
operator|.
name|size
argument_list|()
expr_stmt|;
name|paramsIndex
operator|=
name|dataIndex
expr_stmt|;
name|dataIndex
operator|+=
name|methodParametersDataSize
expr_stmt|;
name|pmeta
operator|->
name|propertyCount
operator|=
name|d
operator|->
name|properties
operator|.
name|size
argument_list|()
expr_stmt|;
name|pmeta
operator|->
name|propertyData
operator|=
name|dataIndex
expr_stmt|;
name|dataIndex
operator|+=
literal|3
operator|*
name|d
operator|->
name|properties
operator|.
name|size
argument_list|()
expr_stmt|;
if|if
condition|(
name|hasNotifySignals
condition|)
name|dataIndex
operator|+=
name|d
operator|->
name|properties
operator|.
name|size
argument_list|()
expr_stmt|;
if|if
condition|(
name|hasRevisionedProperties
condition|)
name|dataIndex
operator|+=
name|d
operator|->
name|properties
operator|.
name|size
argument_list|()
expr_stmt|;
name|pmeta
operator|->
name|enumeratorCount
operator|=
name|d
operator|->
name|enumerators
operator|.
name|size
argument_list|()
expr_stmt|;
name|pmeta
operator|->
name|enumeratorData
operator|=
name|dataIndex
expr_stmt|;
name|dataIndex
operator|+=
literal|4
operator|*
name|d
operator|->
name|enumerators
operator|.
name|size
argument_list|()
expr_stmt|;
name|pmeta
operator|->
name|constructorCount
operator|=
name|d
operator|->
name|constructors
operator|.
name|size
argument_list|()
expr_stmt|;
name|pmeta
operator|->
name|constructorData
operator|=
name|dataIndex
expr_stmt|;
name|dataIndex
operator|+=
literal|5
operator|*
name|d
operator|->
name|constructors
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|dataIndex
operator|+=
literal|2
operator|*
name|d
operator|->
name|classInfoNames
operator|.
name|size
argument_list|()
expr_stmt|;
name|dataIndex
operator|+=
literal|5
operator|*
name|d
operator|->
name|methods
operator|.
name|size
argument_list|()
expr_stmt|;
if|if
condition|(
name|hasRevisionedMethods
condition|)
name|dataIndex
operator|+=
name|d
operator|->
name|methods
operator|.
name|size
argument_list|()
expr_stmt|;
name|paramsIndex
operator|=
name|dataIndex
expr_stmt|;
name|dataIndex
operator|+=
name|methodParametersDataSize
expr_stmt|;
name|dataIndex
operator|+=
literal|3
operator|*
name|d
operator|->
name|properties
operator|.
name|size
argument_list|()
expr_stmt|;
if|if
condition|(
name|hasNotifySignals
condition|)
name|dataIndex
operator|+=
name|d
operator|->
name|properties
operator|.
name|size
argument_list|()
expr_stmt|;
if|if
condition|(
name|hasRevisionedProperties
condition|)
name|dataIndex
operator|+=
name|d
operator|->
name|properties
operator|.
name|size
argument_list|()
expr_stmt|;
name|dataIndex
operator|+=
literal|4
operator|*
name|d
operator|->
name|enumerators
operator|.
name|size
argument_list|()
expr_stmt|;
name|dataIndex
operator|+=
literal|5
operator|*
name|d
operator|->
name|constructors
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
comment|// Allocate space for the enumerator key names and values.
name|enumIndex
operator|=
name|dataIndex
expr_stmt|;
for|for
control|(
name|index
operator|=
literal|0
init|;
name|index
operator|<
name|d
operator|->
name|enumerators
operator|.
name|size
argument_list|()
condition|;
operator|++
name|index
control|)
block|{
name|QMetaEnumBuilderPrivate
modifier|*
name|enumerator
init|=
operator|&
operator|(
name|d
operator|->
name|enumerators
index|[
name|index
index|]
operator|)
decl_stmt|;
name|dataIndex
operator|+=
literal|2
operator|*
name|enumerator
operator|->
name|keys
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
comment|// Zero terminator at the end of the data offset table.
operator|++
name|dataIndex
expr_stmt|;
comment|// Find the start of the data and string tables.
name|int
modifier|*
name|data
init|=
cast|reinterpret_cast
argument_list|<
name|int
operator|*
argument_list|>
argument_list|(
name|pmeta
argument_list|)
decl_stmt|;
name|size
operator|+=
name|dataIndex
operator|*
sizeof|sizeof
argument_list|(
name|int
argument_list|)
expr_stmt|;
name|ALIGN
argument_list|(
name|size
argument_list|,
name|void
operator|*
argument_list|)
expr_stmt|;
name|char
modifier|*
name|str
init|=
cast|reinterpret_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
name|buf
operator|+
name|size
argument_list|)
decl_stmt|;
if|if
condition|(
name|buf
condition|)
block|{
if|if
condition|(
name|relocatable
condition|)
block|{
name|meta
operator|->
name|d
operator|.
name|stringdata
operator|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|QByteArrayData
operator|*
argument_list|>
argument_list|(
operator|(
name|quintptr
operator|)
name|size
argument_list|)
expr_stmt|;
name|meta
operator|->
name|d
operator|.
name|data
operator|=
cast|reinterpret_cast
argument_list|<
name|uint
operator|*
argument_list|>
argument_list|(
operator|(
name|quintptr
operator|)
name|pmetaSize
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|meta
operator|->
name|d
operator|.
name|stringdata
operator|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|QByteArrayData
operator|*
argument_list|>
argument_list|(
name|str
argument_list|)
expr_stmt|;
name|meta
operator|->
name|d
operator|.
name|data
operator|=
cast|reinterpret_cast
argument_list|<
name|uint
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Reset the current data position to just past the QMetaObjectPrivate.
name|dataIndex
operator|=
name|MetaObjectPrivateFieldCount
expr_stmt|;
name|QMetaStringTable
name|strings
argument_list|(
name|d
operator|->
name|className
argument_list|)
decl_stmt|;
comment|// Output the class infos,
name|Q_ASSERT
argument_list|(
operator|!
name|buf
operator|||
name|dataIndex
operator|==
name|pmeta
operator|->
name|classInfoData
argument_list|)
expr_stmt|;
for|for
control|(
name|index
operator|=
literal|0
init|;
name|index
operator|<
name|d
operator|->
name|classInfoNames
operator|.
name|size
argument_list|()
condition|;
operator|++
name|index
control|)
block|{
name|int
name|name
init|=
name|strings
operator|.
name|enter
argument_list|(
name|d
operator|->
name|classInfoNames
index|[
name|index
index|]
argument_list|)
decl_stmt|;
name|int
name|value
init|=
name|strings
operator|.
name|enter
argument_list|(
name|d
operator|->
name|classInfoValues
index|[
name|index
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|buf
condition|)
block|{
name|data
index|[
name|dataIndex
index|]
operator|=
name|name
expr_stmt|;
name|data
index|[
name|dataIndex
operator|+
literal|1
index|]
operator|=
name|value
expr_stmt|;
block|}
name|dataIndex
operator|+=
literal|2
expr_stmt|;
block|}
comment|// Output the methods in the class.
name|Q_ASSERT
argument_list|(
operator|!
name|buf
operator|||
name|dataIndex
operator|==
name|pmeta
operator|->
name|methodData
argument_list|)
expr_stmt|;
for|for
control|(
name|index
operator|=
literal|0
init|;
name|index
operator|<
name|d
operator|->
name|methods
operator|.
name|size
argument_list|()
condition|;
operator|++
name|index
control|)
block|{
name|QMetaMethodBuilderPrivate
modifier|*
name|method
init|=
operator|&
operator|(
name|d
operator|->
name|methods
index|[
name|index
index|]
operator|)
decl_stmt|;
name|int
name|name
init|=
name|strings
operator|.
name|enter
argument_list|(
name|method
operator|->
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|argc
init|=
name|method
operator|->
name|parameterCount
argument_list|()
decl_stmt|;
name|int
name|tag
init|=
name|strings
operator|.
name|enter
argument_list|(
name|method
operator|->
name|tag
argument_list|)
decl_stmt|;
name|int
name|attrs
init|=
name|method
operator|->
name|attributes
decl_stmt|;
if|if
condition|(
name|buf
condition|)
block|{
name|data
index|[
name|dataIndex
index|]
operator|=
name|name
expr_stmt|;
name|data
index|[
name|dataIndex
operator|+
literal|1
index|]
operator|=
name|argc
expr_stmt|;
name|data
index|[
name|dataIndex
operator|+
literal|2
index|]
operator|=
name|paramsIndex
expr_stmt|;
name|data
index|[
name|dataIndex
operator|+
literal|3
index|]
operator|=
name|tag
expr_stmt|;
name|data
index|[
name|dataIndex
operator|+
literal|4
index|]
operator|=
name|attrs
expr_stmt|;
if|if
condition|(
name|method
operator|->
name|methodType
argument_list|()
operator|==
name|QMetaMethod
operator|::
name|Signal
condition|)
name|pmeta
operator|->
name|signalCount
operator|++
expr_stmt|;
block|}
name|dataIndex
operator|+=
literal|5
expr_stmt|;
name|paramsIndex
operator|+=
literal|1
operator|+
name|argc
operator|*
literal|2
expr_stmt|;
block|}
if|if
condition|(
name|hasRevisionedMethods
condition|)
block|{
for|for
control|(
name|index
operator|=
literal|0
init|;
name|index
operator|<
name|d
operator|->
name|methods
operator|.
name|size
argument_list|()
condition|;
operator|++
name|index
control|)
block|{
name|QMetaMethodBuilderPrivate
modifier|*
name|method
init|=
operator|&
operator|(
name|d
operator|->
name|methods
index|[
name|index
index|]
operator|)
decl_stmt|;
if|if
condition|(
name|buf
condition|)
name|data
index|[
name|dataIndex
index|]
operator|=
name|method
operator|->
name|revision
expr_stmt|;
operator|++
name|dataIndex
expr_stmt|;
block|}
block|}
comment|// Output the method parameters in the class.
name|Q_ASSERT
argument_list|(
operator|!
name|buf
operator|||
name|dataIndex
operator|==
name|pmeta
operator|->
name|methodData
operator|+
name|d
operator|->
name|methods
operator|.
name|size
argument_list|()
operator|*
literal|5
operator|+
operator|(
name|hasRevisionedMethods
condition|?
name|d
operator|->
name|methods
operator|.
name|size
argument_list|()
else|:
literal|0
operator|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
literal|2
condition|;
operator|++
name|x
control|)
block|{
name|QList
argument_list|<
name|QMetaMethodBuilderPrivate
argument_list|>
modifier|&
name|methods
init|=
operator|(
name|x
operator|==
literal|0
operator|)
condition|?
name|d
operator|->
name|methods
else|:
name|d
operator|->
name|constructors
decl_stmt|;
for|for
control|(
name|index
operator|=
literal|0
init|;
name|index
operator|<
name|methods
operator|.
name|size
argument_list|()
condition|;
operator|++
name|index
control|)
block|{
name|QMetaMethodBuilderPrivate
modifier|*
name|method
init|=
operator|&
operator|(
name|methods
index|[
name|index
index|]
operator|)
decl_stmt|;
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|paramTypeNames
init|=
name|method
operator|->
name|parameterTypes
argument_list|()
decl_stmt|;
name|int
name|paramCount
init|=
name|paramTypeNames
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
operator|-
literal|1
init|;
name|i
operator|<
name|paramCount
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QByteArray
modifier|&
name|typeName
init|=
operator|(
name|i
operator|<
literal|0
operator|)
condition|?
name|method
operator|->
name|returnType
else|:
name|paramTypeNames
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|int
name|typeInfo
decl_stmt|;
if|if
condition|(
name|QtPrivate
operator|::
name|isBuiltinType
argument_list|(
name|typeName
argument_list|)
condition|)
name|typeInfo
operator|=
name|QMetaType
operator|::
name|type
argument_list|(
name|typeName
argument_list|)
expr_stmt|;
else|else
name|typeInfo
operator|=
name|IsUnresolvedType
operator||
name|strings
operator|.
name|enter
argument_list|(
name|typeName
argument_list|)
expr_stmt|;
if|if
condition|(
name|buf
condition|)
name|data
index|[
name|dataIndex
index|]
operator|=
name|typeInfo
expr_stmt|;
operator|++
name|dataIndex
expr_stmt|;
block|}
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|paramNames
init|=
name|method
operator|->
name|parameterNames
decl_stmt|;
while|while
condition|(
name|paramNames
operator|.
name|size
argument_list|()
operator|<
name|paramCount
condition|)
name|paramNames
operator|.
name|append
argument_list|(
name|QByteArray
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|paramCount
condition|;
operator|++
name|i
control|)
block|{
name|int
name|stringIndex
init|=
name|strings
operator|.
name|enter
argument_list|(
name|paramNames
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|buf
condition|)
name|data
index|[
name|dataIndex
index|]
operator|=
name|stringIndex
expr_stmt|;
operator|++
name|dataIndex
expr_stmt|;
block|}
block|}
block|}
comment|// Output the properties in the class.
name|Q_ASSERT
argument_list|(
operator|!
name|buf
operator|||
name|dataIndex
operator|==
name|pmeta
operator|->
name|propertyData
argument_list|)
expr_stmt|;
for|for
control|(
name|index
operator|=
literal|0
init|;
name|index
operator|<
name|d
operator|->
name|properties
operator|.
name|size
argument_list|()
condition|;
operator|++
name|index
control|)
block|{
name|QMetaPropertyBuilderPrivate
modifier|*
name|prop
init|=
operator|&
operator|(
name|d
operator|->
name|properties
index|[
name|index
index|]
operator|)
decl_stmt|;
name|int
name|name
init|=
name|strings
operator|.
name|enter
argument_list|(
name|prop
operator|->
name|name
argument_list|)
decl_stmt|;
name|int
name|typeInfo
decl_stmt|;
if|if
condition|(
name|QtPrivate
operator|::
name|isBuiltinType
argument_list|(
name|prop
operator|->
name|type
argument_list|)
condition|)
name|typeInfo
operator|=
name|QMetaType
operator|::
name|type
argument_list|(
name|prop
operator|->
name|type
argument_list|)
expr_stmt|;
else|else
name|typeInfo
operator|=
name|IsUnresolvedType
operator||
name|strings
operator|.
name|enter
argument_list|(
name|prop
operator|->
name|type
argument_list|)
expr_stmt|;
name|int
name|flags
init|=
name|prop
operator|->
name|flags
decl_stmt|;
if|if
condition|(
operator|!
name|QtPrivate
operator|::
name|isBuiltinType
argument_list|(
name|prop
operator|->
name|type
argument_list|)
condition|)
name|flags
operator||=
name|EnumOrFlag
expr_stmt|;
if|if
condition|(
name|buf
condition|)
block|{
name|data
index|[
name|dataIndex
index|]
operator|=
name|name
expr_stmt|;
name|data
index|[
name|dataIndex
operator|+
literal|1
index|]
operator|=
name|typeInfo
expr_stmt|;
name|data
index|[
name|dataIndex
operator|+
literal|2
index|]
operator|=
name|flags
expr_stmt|;
block|}
name|dataIndex
operator|+=
literal|3
expr_stmt|;
block|}
if|if
condition|(
name|hasNotifySignals
condition|)
block|{
for|for
control|(
name|index
operator|=
literal|0
init|;
name|index
operator|<
name|d
operator|->
name|properties
operator|.
name|size
argument_list|()
condition|;
operator|++
name|index
control|)
block|{
name|QMetaPropertyBuilderPrivate
modifier|*
name|prop
init|=
operator|&
operator|(
name|d
operator|->
name|properties
index|[
name|index
index|]
operator|)
decl_stmt|;
if|if
condition|(
name|buf
condition|)
block|{
if|if
condition|(
name|prop
operator|->
name|notifySignal
operator|!=
operator|-
literal|1
condition|)
name|data
index|[
name|dataIndex
index|]
operator|=
name|prop
operator|->
name|notifySignal
expr_stmt|;
else|else
name|data
index|[
name|dataIndex
index|]
operator|=
literal|0
expr_stmt|;
block|}
operator|++
name|dataIndex
expr_stmt|;
block|}
block|}
if|if
condition|(
name|hasRevisionedProperties
condition|)
block|{
for|for
control|(
name|index
operator|=
literal|0
init|;
name|index
operator|<
name|d
operator|->
name|properties
operator|.
name|size
argument_list|()
condition|;
operator|++
name|index
control|)
block|{
name|QMetaPropertyBuilderPrivate
modifier|*
name|prop
init|=
operator|&
operator|(
name|d
operator|->
name|properties
index|[
name|index
index|]
operator|)
decl_stmt|;
if|if
condition|(
name|buf
condition|)
name|data
index|[
name|dataIndex
index|]
operator|=
name|prop
operator|->
name|revision
expr_stmt|;
operator|++
name|dataIndex
expr_stmt|;
block|}
block|}
comment|// Output the enumerators in the class.
name|Q_ASSERT
argument_list|(
operator|!
name|buf
operator|||
name|dataIndex
operator|==
name|pmeta
operator|->
name|enumeratorData
argument_list|)
expr_stmt|;
for|for
control|(
name|index
operator|=
literal|0
init|;
name|index
operator|<
name|d
operator|->
name|enumerators
operator|.
name|size
argument_list|()
condition|;
operator|++
name|index
control|)
block|{
name|QMetaEnumBuilderPrivate
modifier|*
name|enumerator
init|=
operator|&
operator|(
name|d
operator|->
name|enumerators
index|[
name|index
index|]
operator|)
decl_stmt|;
name|int
name|name
init|=
name|strings
operator|.
name|enter
argument_list|(
name|enumerator
operator|->
name|name
argument_list|)
decl_stmt|;
name|int
name|isFlag
init|=
call|(
name|int
call|)
argument_list|(
name|enumerator
operator|->
name|isFlag
argument_list|)
decl_stmt|;
name|int
name|count
init|=
name|enumerator
operator|->
name|keys
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|enumOffset
init|=
name|enumIndex
decl_stmt|;
if|if
condition|(
name|buf
condition|)
block|{
name|data
index|[
name|dataIndex
index|]
operator|=
name|name
expr_stmt|;
name|data
index|[
name|dataIndex
operator|+
literal|1
index|]
operator|=
name|isFlag
expr_stmt|;
name|data
index|[
name|dataIndex
operator|+
literal|2
index|]
operator|=
name|count
expr_stmt|;
name|data
index|[
name|dataIndex
operator|+
literal|3
index|]
operator|=
name|enumOffset
expr_stmt|;
block|}
for|for
control|(
name|int
name|key
init|=
literal|0
init|;
name|key
operator|<
name|count
condition|;
operator|++
name|key
control|)
block|{
name|int
name|keyIndex
init|=
name|strings
operator|.
name|enter
argument_list|(
name|enumerator
operator|->
name|keys
index|[
name|key
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|buf
condition|)
block|{
name|data
index|[
name|enumOffset
operator|++
index|]
operator|=
name|keyIndex
expr_stmt|;
name|data
index|[
name|enumOffset
operator|++
index|]
operator|=
name|enumerator
operator|->
name|values
index|[
name|key
index|]
expr_stmt|;
block|}
block|}
name|dataIndex
operator|+=
literal|4
expr_stmt|;
name|enumIndex
operator|+=
literal|2
operator|*
name|count
expr_stmt|;
block|}
comment|// Output the constructors in the class.
name|Q_ASSERT
argument_list|(
operator|!
name|buf
operator|||
name|dataIndex
operator|==
name|pmeta
operator|->
name|constructorData
argument_list|)
expr_stmt|;
for|for
control|(
name|index
operator|=
literal|0
init|;
name|index
operator|<
name|d
operator|->
name|constructors
operator|.
name|size
argument_list|()
condition|;
operator|++
name|index
control|)
block|{
name|QMetaMethodBuilderPrivate
modifier|*
name|method
init|=
operator|&
operator|(
name|d
operator|->
name|constructors
index|[
name|index
index|]
operator|)
decl_stmt|;
name|int
name|name
init|=
name|strings
operator|.
name|enter
argument_list|(
name|method
operator|->
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|argc
init|=
name|method
operator|->
name|parameterCount
argument_list|()
decl_stmt|;
name|int
name|tag
init|=
name|strings
operator|.
name|enter
argument_list|(
name|method
operator|->
name|tag
argument_list|)
decl_stmt|;
name|int
name|attrs
init|=
name|method
operator|->
name|attributes
decl_stmt|;
if|if
condition|(
name|buf
condition|)
block|{
name|data
index|[
name|dataIndex
index|]
operator|=
name|name
expr_stmt|;
name|data
index|[
name|dataIndex
operator|+
literal|1
index|]
operator|=
name|argc
expr_stmt|;
name|data
index|[
name|dataIndex
operator|+
literal|2
index|]
operator|=
name|paramsIndex
expr_stmt|;
name|data
index|[
name|dataIndex
operator|+
literal|3
index|]
operator|=
name|tag
expr_stmt|;
name|data
index|[
name|dataIndex
operator|+
literal|4
index|]
operator|=
name|attrs
expr_stmt|;
block|}
name|dataIndex
operator|+=
literal|5
expr_stmt|;
name|paramsIndex
operator|+=
literal|1
operator|+
name|argc
operator|*
literal|2
expr_stmt|;
block|}
name|size
operator|+=
name|strings
operator|.
name|blobSize
argument_list|()
expr_stmt|;
if|if
condition|(
name|buf
condition|)
name|strings
operator|.
name|writeBlob
argument_list|(
name|str
argument_list|)
expr_stmt|;
comment|// Output the zero terminator in the data array.
if|if
condition|(
name|buf
condition|)
name|data
index|[
name|enumIndex
index|]
operator|=
literal|0
expr_stmt|;
comment|// Create the relatedMetaObjects block if we need one.
if|if
condition|(
name|d
operator|->
name|relatedMetaObjects
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ALIGN
argument_list|(
name|size
argument_list|,
name|QMetaObject
operator|*
argument_list|)
expr_stmt|;
specifier|const
name|QMetaObject
modifier|*
modifier|*
name|objects
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|QMetaObject
operator|*
operator|*
argument_list|>
argument_list|(
name|buf
operator|+
name|size
argument_list|)
decl_stmt|;
if|if
condition|(
name|buf
condition|)
block|{
name|meta
operator|->
name|d
operator|.
name|relatedMetaObjects
operator|=
name|objects
expr_stmt|;
for|for
control|(
name|index
operator|=
literal|0
init|;
name|index
operator|<
name|d
operator|->
name|relatedMetaObjects
operator|.
name|size
argument_list|()
condition|;
operator|++
name|index
control|)
name|objects
index|[
name|index
index|]
operator|=
name|d
operator|->
name|relatedMetaObjects
index|[
name|index
index|]
expr_stmt|;
name|objects
index|[
name|index
index|]
operator|=
literal|0
expr_stmt|;
block|}
name|size
operator|+=
sizeof|sizeof
argument_list|(
name|QMetaObject
operator|*
argument_list|)
operator|*
operator|(
name|d
operator|->
name|relatedMetaObjects
operator|.
name|size
argument_list|()
operator|+
literal|1
operator|)
expr_stmt|;
block|}
comment|// Align the final size and return it.
name|ALIGN
argument_list|(
name|size
argument_list|,
name|void
operator|*
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
operator|!
name|buf
operator|||
name|size
operator|==
name|expectedSize
argument_list|)
expr_stmt|;
return|return
name|size
return|;
block|}
end_function
begin_comment
comment|/*!     Converts this meta object builder into a concrete QMetaObject.     The return value should be deallocated using free() once it     is no longer needed.      The returned meta object is a snapshot of the state of the     QMetaObjectBuilder.  Any further modifications to the QMetaObjectBuilder     will not be reflected in previous meta objects returned by     this method. */
end_comment
begin_function
DECL|function|toMetaObject
name|QMetaObject
modifier|*
name|QMetaObjectBuilder
operator|::
name|toMetaObject
parameter_list|()
specifier|const
block|{
name|int
name|size
init|=
name|buildMetaObject
argument_list|(
name|d
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|char
modifier|*
name|buf
init|=
cast|reinterpret_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
name|malloc
argument_list|(
name|size
argument_list|)
argument_list|)
decl_stmt|;
name|memset
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|buildMetaObject
argument_list|(
name|d
argument_list|,
name|buf
argument_list|,
name|size
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
cast|reinterpret_cast
argument_list|<
name|QMetaObject
operator|*
argument_list|>
argument_list|(
name|buf
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*     \internal      Converts this meta object builder into relocatable data.  This data can     be stored, copied and later passed to fromRelocatableData() to create a     concrete QMetaObject.      The data is specific to the architecture on which it was created, but is not     specific to the process that created it.  Not all meta object builder's can     be converted to data in this way.  If \a ok is provided, it will be set to     true if the conversion succeeds, and false otherwise.  If a     staticMetacallFunction() or any relatedMetaObject()'s are specified the     conversion to relocatable data will fail. */
end_comment
begin_function
DECL|function|toRelocatableData
name|QByteArray
name|QMetaObjectBuilder
operator|::
name|toRelocatableData
parameter_list|(
name|bool
modifier|*
name|ok
parameter_list|)
specifier|const
block|{
name|int
name|size
init|=
name|buildMetaObject
argument_list|(
name|d
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|size
operator|==
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|ok
condition|)
operator|*
name|ok
operator|=
literal|false
expr_stmt|;
return|return
name|QByteArray
argument_list|()
return|;
block|}
name|QByteArray
name|data
decl_stmt|;
name|data
operator|.
name|resize
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|char
modifier|*
name|buf
init|=
name|data
operator|.
name|data
argument_list|()
decl_stmt|;
name|memset
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|buildMetaObject
argument_list|(
name|d
argument_list|,
name|buf
argument_list|,
name|size
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|ok
condition|)
operator|*
name|ok
operator|=
literal|true
expr_stmt|;
return|return
name|data
return|;
block|}
end_function
begin_comment
comment|/*     \internal      Sets the \a data returned from toRelocatableData() onto a concrete     QMetaObject instance, \a output.  As the meta object's super class is not     saved in the relocatable data, it must be passed as \a superClass. */
end_comment
begin_function
DECL|function|fromRelocatableData
name|void
name|QMetaObjectBuilder
operator|::
name|fromRelocatableData
parameter_list|(
name|QMetaObject
modifier|*
name|output
parameter_list|,
specifier|const
name|QMetaObject
modifier|*
name|superclass
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|data
parameter_list|)
block|{
if|if
condition|(
operator|!
name|output
condition|)
return|return;
specifier|const
name|char
modifier|*
name|buf
init|=
name|data
operator|.
name|constData
argument_list|()
decl_stmt|;
specifier|const
name|QMetaObject
modifier|*
name|dataMo
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|QMetaObject
operator|*
argument_list|>
argument_list|(
name|buf
argument_list|)
decl_stmt|;
name|quintptr
name|stringdataOffset
init|=
operator|(
name|quintptr
operator|)
name|dataMo
operator|->
name|d
operator|.
name|stringdata
decl_stmt|;
name|quintptr
name|dataOffset
init|=
operator|(
name|quintptr
operator|)
name|dataMo
operator|->
name|d
operator|.
name|data
decl_stmt|;
name|output
operator|->
name|d
operator|.
name|superdata
operator|=
name|superclass
expr_stmt|;
name|output
operator|->
name|d
operator|.
name|stringdata
operator|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|QByteArrayData
operator|*
argument_list|>
argument_list|(
name|buf
operator|+
name|stringdataOffset
argument_list|)
expr_stmt|;
name|output
operator|->
name|d
operator|.
name|data
operator|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|uint
operator|*
argument_list|>
argument_list|(
name|buf
operator|+
name|dataOffset
argument_list|)
expr_stmt|;
name|output
operator|->
name|d
operator|.
name|extradata
operator|=
literal|0
expr_stmt|;
name|output
operator|->
name|d
operator|.
name|relatedMetaObjects
operator|=
literal|0
expr_stmt|;
name|output
operator|->
name|d
operator|.
name|static_metacall
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \typedef QMetaObjectBuilder::StaticMetacallFunction      Typedef for static metacall functions.  The three parameters are     the call type value, the constructor index, and the     array of parameters. */
end_comment
begin_comment
comment|/*!     Returns the static metacall function to use to construct objects     of this class.  The default value is null.      \sa setStaticMetacallFunction() */
end_comment
begin_function
DECL|function|staticMetacallFunction
name|QMetaObjectBuilder
operator|::
name|StaticMetacallFunction
name|QMetaObjectBuilder
operator|::
name|staticMetacallFunction
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|staticMetacallFunction
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the static metacall function to use to construct objects     of this class to \a value.  The default value is null.      \sa staticMetacallFunction() */
end_comment
begin_function
DECL|function|setStaticMetacallFunction
name|void
name|QMetaObjectBuilder
operator|::
name|setStaticMetacallFunction
parameter_list|(
name|QMetaObjectBuilder
operator|::
name|StaticMetacallFunction
name|value
parameter_list|)
block|{
name|d
operator|->
name|staticMetacallFunction
operator|=
name|value
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DATASTREAM
end_ifndef
begin_comment
comment|/*!     Serializes the contents of the meta object builder onto \a stream.      \sa deserialize() */
end_comment
begin_function
DECL|function|serialize
name|void
name|QMetaObjectBuilder
operator|::
name|serialize
parameter_list|(
name|QDataStream
modifier|&
name|stream
parameter_list|)
specifier|const
block|{
name|int
name|index
decl_stmt|;
comment|// Write the class and super class names.
name|stream
operator|<<
name|d
operator|->
name|className
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|superClass
condition|)
name|stream
operator|<<
name|QByteArray
argument_list|(
name|d
operator|->
name|superClass
operator|->
name|className
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|stream
operator|<<
name|QByteArray
argument_list|()
expr_stmt|;
comment|// Write the counts for each type of class member.
name|stream
operator|<<
name|d
operator|->
name|classInfoNames
operator|.
name|size
argument_list|()
expr_stmt|;
name|stream
operator|<<
name|d
operator|->
name|methods
operator|.
name|size
argument_list|()
expr_stmt|;
name|stream
operator|<<
name|d
operator|->
name|properties
operator|.
name|size
argument_list|()
expr_stmt|;
name|stream
operator|<<
name|d
operator|->
name|enumerators
operator|.
name|size
argument_list|()
expr_stmt|;
name|stream
operator|<<
name|d
operator|->
name|constructors
operator|.
name|size
argument_list|()
expr_stmt|;
name|stream
operator|<<
name|d
operator|->
name|relatedMetaObjects
operator|.
name|size
argument_list|()
expr_stmt|;
comment|// Write the items of class information.
for|for
control|(
name|index
operator|=
literal|0
init|;
name|index
operator|<
name|d
operator|->
name|classInfoNames
operator|.
name|size
argument_list|()
condition|;
operator|++
name|index
control|)
block|{
name|stream
operator|<<
name|d
operator|->
name|classInfoNames
index|[
name|index
index|]
expr_stmt|;
name|stream
operator|<<
name|d
operator|->
name|classInfoValues
index|[
name|index
index|]
expr_stmt|;
block|}
comment|// Write the methods.
for|for
control|(
name|index
operator|=
literal|0
init|;
name|index
operator|<
name|d
operator|->
name|methods
operator|.
name|size
argument_list|()
condition|;
operator|++
name|index
control|)
block|{
specifier|const
name|QMetaMethodBuilderPrivate
modifier|*
name|method
init|=
operator|&
operator|(
name|d
operator|->
name|methods
index|[
name|index
index|]
operator|)
decl_stmt|;
name|stream
operator|<<
name|method
operator|->
name|signature
expr_stmt|;
name|stream
operator|<<
name|method
operator|->
name|returnType
expr_stmt|;
name|stream
operator|<<
name|method
operator|->
name|parameterNames
expr_stmt|;
name|stream
operator|<<
name|method
operator|->
name|tag
expr_stmt|;
name|stream
operator|<<
name|method
operator|->
name|attributes
expr_stmt|;
if|if
condition|(
name|method
operator|->
name|revision
condition|)
name|stream
operator|<<
name|method
operator|->
name|revision
expr_stmt|;
block|}
comment|// Write the properties.
for|for
control|(
name|index
operator|=
literal|0
init|;
name|index
operator|<
name|d
operator|->
name|properties
operator|.
name|size
argument_list|()
condition|;
operator|++
name|index
control|)
block|{
specifier|const
name|QMetaPropertyBuilderPrivate
modifier|*
name|property
init|=
operator|&
operator|(
name|d
operator|->
name|properties
index|[
name|index
index|]
operator|)
decl_stmt|;
name|stream
operator|<<
name|property
operator|->
name|name
expr_stmt|;
name|stream
operator|<<
name|property
operator|->
name|type
expr_stmt|;
name|stream
operator|<<
name|property
operator|->
name|flags
expr_stmt|;
name|stream
operator|<<
name|property
operator|->
name|notifySignal
expr_stmt|;
if|if
condition|(
name|property
operator|->
name|revision
condition|)
name|stream
operator|<<
name|property
operator|->
name|revision
expr_stmt|;
block|}
comment|// Write the enumerators.
for|for
control|(
name|index
operator|=
literal|0
init|;
name|index
operator|<
name|d
operator|->
name|enumerators
operator|.
name|size
argument_list|()
condition|;
operator|++
name|index
control|)
block|{
specifier|const
name|QMetaEnumBuilderPrivate
modifier|*
name|enumerator
init|=
operator|&
operator|(
name|d
operator|->
name|enumerators
index|[
name|index
index|]
operator|)
decl_stmt|;
name|stream
operator|<<
name|enumerator
operator|->
name|name
expr_stmt|;
name|stream
operator|<<
name|enumerator
operator|->
name|isFlag
expr_stmt|;
name|stream
operator|<<
name|enumerator
operator|->
name|keys
expr_stmt|;
name|stream
operator|<<
name|enumerator
operator|->
name|values
expr_stmt|;
block|}
comment|// Write the constructors.
for|for
control|(
name|index
operator|=
literal|0
init|;
name|index
operator|<
name|d
operator|->
name|constructors
operator|.
name|size
argument_list|()
condition|;
operator|++
name|index
control|)
block|{
specifier|const
name|QMetaMethodBuilderPrivate
modifier|*
name|method
init|=
operator|&
operator|(
name|d
operator|->
name|constructors
index|[
name|index
index|]
operator|)
decl_stmt|;
name|stream
operator|<<
name|method
operator|->
name|signature
expr_stmt|;
name|stream
operator|<<
name|method
operator|->
name|returnType
expr_stmt|;
name|stream
operator|<<
name|method
operator|->
name|parameterNames
expr_stmt|;
name|stream
operator|<<
name|method
operator|->
name|tag
expr_stmt|;
name|stream
operator|<<
name|method
operator|->
name|attributes
expr_stmt|;
block|}
comment|// Write the related meta objects.
for|for
control|(
name|index
operator|=
literal|0
init|;
name|index
operator|<
name|d
operator|->
name|relatedMetaObjects
operator|.
name|size
argument_list|()
condition|;
operator|++
name|index
control|)
block|{
specifier|const
name|QMetaObject
modifier|*
name|meta
init|=
name|d
operator|->
name|relatedMetaObjects
index|[
name|index
index|]
decl_stmt|;
name|stream
operator|<<
name|QByteArray
argument_list|(
name|meta
operator|->
name|className
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Add an extra empty QByteArray for additional data in future versions.
comment|// This should help maintain backwards compatibility, allowing older
comment|// versions to read newer data.
name|stream
operator|<<
name|QByteArray
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|// Resolve a class name using the name reference map.
end_comment
begin_function
DECL|function|resolveClassName
specifier|static
specifier|const
name|QMetaObject
modifier|*
name|resolveClassName
parameter_list|(
specifier|const
name|QMap
argument_list|<
name|QByteArray
argument_list|,
specifier|const
name|QMetaObject
modifier|*
argument_list|>
modifier|&
name|references
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
name|QByteArray
argument_list|(
literal|"QObject"
argument_list|)
condition|)
return|return
operator|&
name|QObject
operator|::
name|staticMetaObject
return|;
else|else
return|return
name|references
operator|.
name|value
argument_list|(
name|name
argument_list|,
literal|0
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Deserializes a meta object builder from \a stream into     this meta object builder.      The \a references parameter specifies a mapping from class names     to QMetaObject instances for resolving the super class name and     related meta objects in the object that is deserialized.     The meta object for QObject is implicitly added to \a references     and does not need to be supplied.      The QDataStream::status() value on \a stream will be set to     QDataStream::ReadCorruptData if the input data is corrupt.     The status will be set to QDataStream::ReadPastEnd if the     input was exhausted before the full meta object was read.      \sa serialize() */
end_comment
begin_function
DECL|function|deserialize
name|void
name|QMetaObjectBuilder
operator|::
name|deserialize
parameter_list|(
name|QDataStream
modifier|&
name|stream
parameter_list|,
specifier|const
name|QMap
argument_list|<
name|QByteArray
argument_list|,
specifier|const
name|QMetaObject
modifier|*
argument_list|>
modifier|&
name|references
parameter_list|)
block|{
name|QByteArray
name|name
decl_stmt|;
specifier|const
name|QMetaObject
modifier|*
name|cl
decl_stmt|;
name|int
name|index
decl_stmt|;
comment|// Clear all members in the builder to their default states.
name|d
operator|->
name|className
operator|.
name|clear
argument_list|()
expr_stmt|;
name|d
operator|->
name|superClass
operator|=
operator|&
name|QObject
operator|::
name|staticMetaObject
expr_stmt|;
name|d
operator|->
name|classInfoNames
operator|.
name|clear
argument_list|()
expr_stmt|;
name|d
operator|->
name|classInfoValues
operator|.
name|clear
argument_list|()
expr_stmt|;
name|d
operator|->
name|methods
operator|.
name|clear
argument_list|()
expr_stmt|;
name|d
operator|->
name|properties
operator|.
name|clear
argument_list|()
expr_stmt|;
name|d
operator|->
name|enumerators
operator|.
name|clear
argument_list|()
expr_stmt|;
name|d
operator|->
name|constructors
operator|.
name|clear
argument_list|()
expr_stmt|;
name|d
operator|->
name|relatedMetaObjects
operator|.
name|clear
argument_list|()
expr_stmt|;
name|d
operator|->
name|staticMetacallFunction
operator|=
literal|0
expr_stmt|;
comment|// Read the class and super class names.
name|stream
operator|>>
name|d
operator|->
name|className
expr_stmt|;
name|stream
operator|>>
name|name
expr_stmt|;
if|if
condition|(
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|d
operator|->
name|superClass
operator|=
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|cl
operator|=
name|resolveClassName
argument_list|(
name|references
argument_list|,
name|name
argument_list|)
operator|)
operator|!=
literal|0
condition|)
block|{
name|d
operator|->
name|superClass
operator|=
name|cl
expr_stmt|;
block|}
else|else
block|{
name|stream
operator|.
name|setStatus
argument_list|(
name|QDataStream
operator|::
name|ReadCorruptData
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Read the counts for each type of class member.
name|int
name|classInfoCount
decl_stmt|,
name|methodCount
decl_stmt|,
name|propertyCount
decl_stmt|;
name|int
name|enumeratorCount
decl_stmt|,
name|constructorCount
decl_stmt|,
name|relatedMetaObjectCount
decl_stmt|;
name|stream
operator|>>
name|classInfoCount
expr_stmt|;
name|stream
operator|>>
name|methodCount
expr_stmt|;
name|stream
operator|>>
name|propertyCount
expr_stmt|;
name|stream
operator|>>
name|enumeratorCount
expr_stmt|;
name|stream
operator|>>
name|constructorCount
expr_stmt|;
name|stream
operator|>>
name|relatedMetaObjectCount
expr_stmt|;
if|if
condition|(
name|classInfoCount
operator|<
literal|0
operator|||
name|methodCount
operator|<
literal|0
operator|||
name|propertyCount
operator|<
literal|0
operator|||
name|enumeratorCount
operator|<
literal|0
operator|||
name|constructorCount
operator|<
literal|0
operator|||
name|relatedMetaObjectCount
operator|<
literal|0
condition|)
block|{
name|stream
operator|.
name|setStatus
argument_list|(
name|QDataStream
operator|::
name|ReadCorruptData
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Read the items of class information.
for|for
control|(
name|index
operator|=
literal|0
init|;
name|index
operator|<
name|classInfoCount
condition|;
operator|++
name|index
control|)
block|{
if|if
condition|(
name|stream
operator|.
name|status
argument_list|()
operator|!=
name|QDataStream
operator|::
name|Ok
condition|)
return|return;
name|QByteArray
name|value
decl_stmt|;
name|stream
operator|>>
name|name
expr_stmt|;
name|stream
operator|>>
name|value
expr_stmt|;
name|addClassInfo
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|// Read the member methods.
for|for
control|(
name|index
operator|=
literal|0
init|;
name|index
operator|<
name|methodCount
condition|;
operator|++
name|index
control|)
block|{
if|if
condition|(
name|stream
operator|.
name|status
argument_list|()
operator|!=
name|QDataStream
operator|::
name|Ok
condition|)
return|return;
name|stream
operator|>>
name|name
expr_stmt|;
name|addMethod
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|QMetaMethodBuilderPrivate
modifier|*
name|method
init|=
operator|&
operator|(
name|d
operator|->
name|methods
index|[
name|index
index|]
operator|)
decl_stmt|;
name|stream
operator|>>
name|method
operator|->
name|returnType
expr_stmt|;
name|stream
operator|>>
name|method
operator|->
name|parameterNames
expr_stmt|;
name|stream
operator|>>
name|method
operator|->
name|tag
expr_stmt|;
name|stream
operator|>>
name|method
operator|->
name|attributes
expr_stmt|;
if|if
condition|(
name|method
operator|->
name|attributes
operator|&
name|MethodRevisioned
condition|)
name|stream
operator|>>
name|method
operator|->
name|revision
expr_stmt|;
if|if
condition|(
name|method
operator|->
name|methodType
argument_list|()
operator|==
name|QMetaMethod
operator|::
name|Constructor
condition|)
block|{
comment|// Cannot add a constructor in this set of methods.
name|stream
operator|.
name|setStatus
argument_list|(
name|QDataStream
operator|::
name|ReadCorruptData
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
comment|// Read the properties.
for|for
control|(
name|index
operator|=
literal|0
init|;
name|index
operator|<
name|propertyCount
condition|;
operator|++
name|index
control|)
block|{
if|if
condition|(
name|stream
operator|.
name|status
argument_list|()
operator|!=
name|QDataStream
operator|::
name|Ok
condition|)
return|return;
name|QByteArray
name|type
decl_stmt|;
name|stream
operator|>>
name|name
expr_stmt|;
name|stream
operator|>>
name|type
expr_stmt|;
name|addProperty
argument_list|(
name|name
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|QMetaPropertyBuilderPrivate
modifier|*
name|property
init|=
operator|&
operator|(
name|d
operator|->
name|properties
index|[
name|index
index|]
operator|)
decl_stmt|;
name|stream
operator|>>
name|property
operator|->
name|flags
expr_stmt|;
name|stream
operator|>>
name|property
operator|->
name|notifySignal
expr_stmt|;
if|if
condition|(
name|property
operator|->
name|notifySignal
operator|<
operator|-
literal|1
operator|||
name|property
operator|->
name|notifySignal
operator|>=
name|d
operator|->
name|methods
operator|.
name|size
argument_list|()
condition|)
block|{
comment|// Notify signal method index is out of range.
name|stream
operator|.
name|setStatus
argument_list|(
name|QDataStream
operator|::
name|ReadCorruptData
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|property
operator|->
name|notifySignal
operator|>=
literal|0
operator|&&
name|d
operator|->
name|methods
index|[
name|property
operator|->
name|notifySignal
index|]
operator|.
name|methodType
argument_list|()
operator|!=
name|QMetaMethod
operator|::
name|Signal
condition|)
block|{
comment|// Notify signal method index does not refer to a signal.
name|stream
operator|.
name|setStatus
argument_list|(
name|QDataStream
operator|::
name|ReadCorruptData
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|property
operator|->
name|flags
operator|&
name|Revisioned
condition|)
name|stream
operator|>>
name|property
operator|->
name|revision
expr_stmt|;
block|}
comment|// Read the enumerators.
for|for
control|(
name|index
operator|=
literal|0
init|;
name|index
operator|<
name|enumeratorCount
condition|;
operator|++
name|index
control|)
block|{
if|if
condition|(
name|stream
operator|.
name|status
argument_list|()
operator|!=
name|QDataStream
operator|::
name|Ok
condition|)
return|return;
name|stream
operator|>>
name|name
expr_stmt|;
name|addEnumerator
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|QMetaEnumBuilderPrivate
modifier|*
name|enumerator
init|=
operator|&
operator|(
name|d
operator|->
name|enumerators
index|[
name|index
index|]
operator|)
decl_stmt|;
name|stream
operator|>>
name|enumerator
operator|->
name|isFlag
expr_stmt|;
name|stream
operator|>>
name|enumerator
operator|->
name|keys
expr_stmt|;
name|stream
operator|>>
name|enumerator
operator|->
name|values
expr_stmt|;
if|if
condition|(
name|enumerator
operator|->
name|keys
operator|.
name|size
argument_list|()
operator|!=
name|enumerator
operator|->
name|values
operator|.
name|size
argument_list|()
condition|)
block|{
comment|// Mismatch between number of keys and number of values.
name|stream
operator|.
name|setStatus
argument_list|(
name|QDataStream
operator|::
name|ReadCorruptData
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
comment|// Read the constructor methods.
for|for
control|(
name|index
operator|=
literal|0
init|;
name|index
operator|<
name|constructorCount
condition|;
operator|++
name|index
control|)
block|{
if|if
condition|(
name|stream
operator|.
name|status
argument_list|()
operator|!=
name|QDataStream
operator|::
name|Ok
condition|)
return|return;
name|stream
operator|>>
name|name
expr_stmt|;
name|addConstructor
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|QMetaMethodBuilderPrivate
modifier|*
name|method
init|=
operator|&
operator|(
name|d
operator|->
name|constructors
index|[
name|index
index|]
operator|)
decl_stmt|;
name|stream
operator|>>
name|method
operator|->
name|returnType
expr_stmt|;
name|stream
operator|>>
name|method
operator|->
name|parameterNames
expr_stmt|;
name|stream
operator|>>
name|method
operator|->
name|tag
expr_stmt|;
name|stream
operator|>>
name|method
operator|->
name|attributes
expr_stmt|;
if|if
condition|(
name|method
operator|->
name|methodType
argument_list|()
operator|!=
name|QMetaMethod
operator|::
name|Constructor
condition|)
block|{
comment|// The type must be Constructor.
name|stream
operator|.
name|setStatus
argument_list|(
name|QDataStream
operator|::
name|ReadCorruptData
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
comment|// Read the related meta objects.
for|for
control|(
name|index
operator|=
literal|0
init|;
name|index
operator|<
name|relatedMetaObjectCount
condition|;
operator|++
name|index
control|)
block|{
if|if
condition|(
name|stream
operator|.
name|status
argument_list|()
operator|!=
name|QDataStream
operator|::
name|Ok
condition|)
return|return;
name|stream
operator|>>
name|name
expr_stmt|;
name|cl
operator|=
name|resolveClassName
argument_list|(
name|references
argument_list|,
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|cl
condition|)
block|{
name|stream
operator|.
name|setStatus
argument_list|(
name|QDataStream
operator|::
name|ReadCorruptData
argument_list|)
expr_stmt|;
return|return;
block|}
name|addRelatedMetaObject
argument_list|(
name|cl
argument_list|)
expr_stmt|;
block|}
comment|// Read the extra data block, which is reserved for future use.
name|stream
operator|>>
name|name
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// !QT_NO_DATASTREAM
end_comment
begin_comment
comment|/*!     \class QMetaMethodBuilder     \inmodule QtCore     \internal     \brief The QMetaMethodBuilder class enables modifications to a method definition on a meta object builder. */
end_comment
begin_function
DECL|function|d_func
name|QMetaMethodBuilderPrivate
modifier|*
name|QMetaMethodBuilder
operator|::
name|d_func
parameter_list|()
specifier|const
block|{
comment|// Positive indices indicate methods, negative indices indicate constructors.
if|if
condition|(
name|_mobj
operator|&&
name|_index
operator|>=
literal|0
operator|&&
name|_index
operator|<
name|_mobj
operator|->
name|d
operator|->
name|methods
operator|.
name|size
argument_list|()
condition|)
return|return
operator|&
operator|(
name|_mobj
operator|->
name|d
operator|->
name|methods
index|[
name|_index
index|]
operator|)
return|;
elseif|else
if|if
condition|(
name|_mobj
operator|&&
operator|-
name|_index
operator|>=
literal|1
operator|&&
operator|-
name|_index
operator|<=
name|_mobj
operator|->
name|d
operator|->
name|constructors
operator|.
name|size
argument_list|()
condition|)
return|return
operator|&
operator|(
name|_mobj
operator|->
name|d
operator|->
name|constructors
index|[
operator|(
operator|-
name|_index
operator|)
operator|-
literal|1
index|]
operator|)
return|;
else|else
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     \fn QMetaMethodBuilder::QMetaMethodBuilder()     \internal */
end_comment
begin_comment
comment|/*!     Returns the index of this method within its QMetaObjectBuilder. */
end_comment
begin_function
DECL|function|index
name|int
name|QMetaMethodBuilder
operator|::
name|index
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|_index
operator|>=
literal|0
condition|)
return|return
name|_index
return|;
comment|// Method, signal, or slot
else|else
return|return
operator|(
operator|-
name|_index
operator|)
operator|-
literal|1
return|;
comment|// Constructor
block|}
end_function
begin_comment
comment|/*!     Returns the type of this method (signal, slot, method, or constructor). */
end_comment
begin_function
DECL|function|methodType
name|QMetaMethod
operator|::
name|MethodType
name|QMetaMethodBuilder
operator|::
name|methodType
parameter_list|()
specifier|const
block|{
name|QMetaMethodBuilderPrivate
modifier|*
name|d
init|=
name|d_func
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
condition|)
return|return
name|d
operator|->
name|methodType
argument_list|()
return|;
else|else
return|return
name|QMetaMethod
operator|::
name|Method
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the signature of this method.      \sa parameterNames(), returnType() */
end_comment
begin_function
DECL|function|signature
name|QByteArray
name|QMetaMethodBuilder
operator|::
name|signature
parameter_list|()
specifier|const
block|{
name|QMetaMethodBuilderPrivate
modifier|*
name|d
init|=
name|d_func
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
condition|)
return|return
name|d
operator|->
name|signature
return|;
else|else
return|return
name|QByteArray
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the return type for this method; empty if the method's     return type is \c{void}.      \sa setReturnType(), signature() */
end_comment
begin_function
DECL|function|returnType
name|QByteArray
name|QMetaMethodBuilder
operator|::
name|returnType
parameter_list|()
specifier|const
block|{
name|QMetaMethodBuilderPrivate
modifier|*
name|d
init|=
name|d_func
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
condition|)
return|return
name|d
operator|->
name|returnType
return|;
else|else
return|return
name|QByteArray
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the return type for this method to \a value.  If \a value     is empty, then the method's return type is \c{void}.  The \a value     will be normalized before it is added to the method.      \sa returnType(), parameterTypes(), signature() */
end_comment
begin_function
DECL|function|setReturnType
name|void
name|QMetaMethodBuilder
operator|::
name|setReturnType
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|value
parameter_list|)
block|{
name|QMetaMethodBuilderPrivate
modifier|*
name|d
init|=
name|d_func
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
condition|)
name|d
operator|->
name|returnType
operator|=
name|QMetaObject
operator|::
name|normalizedType
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the list of parameter types for this method.      \sa returnType(), parameterNames() */
end_comment
begin_function
DECL|function|parameterTypes
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|QMetaMethodBuilder
operator|::
name|parameterTypes
parameter_list|()
specifier|const
block|{
name|QMetaMethodBuilderPrivate
modifier|*
name|d
init|=
name|d_func
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
condition|)
return|return
name|d
operator|->
name|parameterTypes
argument_list|()
return|;
else|else
return|return
name|QList
argument_list|<
name|QByteArray
argument_list|>
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the list of parameter names for this method.      \sa setParameterNames() */
end_comment
begin_function
DECL|function|parameterNames
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|QMetaMethodBuilder
operator|::
name|parameterNames
parameter_list|()
specifier|const
block|{
name|QMetaMethodBuilderPrivate
modifier|*
name|d
init|=
name|d_func
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
condition|)
return|return
name|d
operator|->
name|parameterNames
return|;
else|else
return|return
name|QList
argument_list|<
name|QByteArray
argument_list|>
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the list of parameter names for this method to \a value.      \sa parameterNames() */
end_comment
begin_function
DECL|function|setParameterNames
name|void
name|QMetaMethodBuilder
operator|::
name|setParameterNames
parameter_list|(
specifier|const
name|QList
argument_list|<
name|QByteArray
argument_list|>
modifier|&
name|value
parameter_list|)
block|{
name|QMetaMethodBuilderPrivate
modifier|*
name|d
init|=
name|d_func
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
condition|)
name|d
operator|->
name|parameterNames
operator|=
name|value
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the tag associated with this method.      \sa setTag() */
end_comment
begin_function
DECL|function|tag
name|QByteArray
name|QMetaMethodBuilder
operator|::
name|tag
parameter_list|()
specifier|const
block|{
name|QMetaMethodBuilderPrivate
modifier|*
name|d
init|=
name|d_func
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
condition|)
return|return
name|d
operator|->
name|tag
return|;
else|else
return|return
name|QByteArray
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the tag associated with this method to \a value.      \sa setTag() */
end_comment
begin_function
DECL|function|setTag
name|void
name|QMetaMethodBuilder
operator|::
name|setTag
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|value
parameter_list|)
block|{
name|QMetaMethodBuilderPrivate
modifier|*
name|d
init|=
name|d_func
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
condition|)
name|d
operator|->
name|tag
operator|=
name|value
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the access specification of this method (private, protected,     or public).  The default value is QMetaMethod::Public for methods,     slots, signals and constructors.      \sa setAccess() */
end_comment
begin_function
DECL|function|access
name|QMetaMethod
operator|::
name|Access
name|QMetaMethodBuilder
operator|::
name|access
parameter_list|()
specifier|const
block|{
name|QMetaMethodBuilderPrivate
modifier|*
name|d
init|=
name|d_func
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
condition|)
return|return
name|d
operator|->
name|access
argument_list|()
return|;
else|else
return|return
name|QMetaMethod
operator|::
name|Public
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the access specification of this method (private, protected,     or public) to \a value.  If the method is a signal, this function     will be ignored.      \sa access() */
end_comment
begin_function
DECL|function|setAccess
name|void
name|QMetaMethodBuilder
operator|::
name|setAccess
parameter_list|(
name|QMetaMethod
operator|::
name|Access
name|value
parameter_list|)
block|{
name|QMetaMethodBuilderPrivate
modifier|*
name|d
init|=
name|d_func
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
operator|&&
name|d
operator|->
name|methodType
argument_list|()
operator|!=
name|QMetaMethod
operator|::
name|Signal
condition|)
name|d
operator|->
name|setAccess
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the additional attributes for this method.      \sa setAttributes() */
end_comment
begin_function
DECL|function|attributes
name|int
name|QMetaMethodBuilder
operator|::
name|attributes
parameter_list|()
specifier|const
block|{
name|QMetaMethodBuilderPrivate
modifier|*
name|d
init|=
name|d_func
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
condition|)
return|return
operator|(
name|d
operator|->
name|attributes
operator|>>
literal|4
operator|)
return|;
else|else
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the additional attributes for this method to \a value.      \sa attributes() */
end_comment
begin_function
DECL|function|setAttributes
name|void
name|QMetaMethodBuilder
operator|::
name|setAttributes
parameter_list|(
name|int
name|value
parameter_list|)
block|{
name|QMetaMethodBuilderPrivate
modifier|*
name|d
init|=
name|d_func
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
condition|)
name|d
operator|->
name|attributes
operator|=
operator|(
operator|(
name|d
operator|->
name|attributes
operator|&
literal|0x0f
operator|)
operator||
operator|(
name|value
operator|<<
literal|4
operator|)
operator|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the revision of this method.      \sa setRevision() */
end_comment
begin_function
DECL|function|revision
name|int
name|QMetaMethodBuilder
operator|::
name|revision
parameter_list|()
specifier|const
block|{
name|QMetaMethodBuilderPrivate
modifier|*
name|d
init|=
name|d_func
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
condition|)
return|return
name|d
operator|->
name|revision
return|;
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the \a revision of this method.      \sa revision() */
end_comment
begin_function
DECL|function|setRevision
name|void
name|QMetaMethodBuilder
operator|::
name|setRevision
parameter_list|(
name|int
name|revision
parameter_list|)
block|{
name|QMetaMethodBuilderPrivate
modifier|*
name|d
init|=
name|d_func
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
condition|)
block|{
name|d
operator|->
name|revision
operator|=
name|revision
expr_stmt|;
if|if
condition|(
name|revision
condition|)
name|d
operator|->
name|attributes
operator||=
name|MethodRevisioned
expr_stmt|;
else|else
name|d
operator|->
name|attributes
operator|&=
operator|~
name|MethodRevisioned
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \class QMetaPropertyBuilder     \inmodule QtCore     \internal     \brief The QMetaPropertyBuilder class enables modifications to a property definition on a meta object builder. */
end_comment
begin_function
DECL|function|d_func
name|QMetaPropertyBuilderPrivate
modifier|*
name|QMetaPropertyBuilder
operator|::
name|d_func
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|_mobj
operator|&&
name|_index
operator|>=
literal|0
operator|&&
name|_index
operator|<
name|_mobj
operator|->
name|d
operator|->
name|properties
operator|.
name|size
argument_list|()
condition|)
return|return
operator|&
operator|(
name|_mobj
operator|->
name|d
operator|->
name|properties
index|[
name|_index
index|]
operator|)
return|;
else|else
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     \fn QMetaPropertyBuilder::QMetaPropertyBuilder()     \internal */
end_comment
begin_comment
comment|/*!     \fn int QMetaPropertyBuilder::index() const      Returns the index of this property within its QMetaObjectBuilder. */
end_comment
begin_comment
comment|/*!     Returns the name associated with this property.      \sa type() */
end_comment
begin_function
DECL|function|name
name|QByteArray
name|QMetaPropertyBuilder
operator|::
name|name
parameter_list|()
specifier|const
block|{
name|QMetaPropertyBuilderPrivate
modifier|*
name|d
init|=
name|d_func
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
condition|)
return|return
name|d
operator|->
name|name
return|;
else|else
return|return
name|QByteArray
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the type associated with this property.      \sa name() */
end_comment
begin_function
DECL|function|type
name|QByteArray
name|QMetaPropertyBuilder
operator|::
name|type
parameter_list|()
specifier|const
block|{
name|QMetaPropertyBuilderPrivate
modifier|*
name|d
init|=
name|d_func
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
condition|)
return|return
name|d
operator|->
name|type
return|;
else|else
return|return
name|QByteArray
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns \c true if this property has a notify signal; false otherwise.      \sa notifySignal(), setNotifySignal(), removeNotifySignal() */
end_comment
begin_function
DECL|function|hasNotifySignal
name|bool
name|QMetaPropertyBuilder
operator|::
name|hasNotifySignal
parameter_list|()
specifier|const
block|{
name|QMetaPropertyBuilderPrivate
modifier|*
name|d
init|=
name|d_func
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
condition|)
return|return
name|d
operator|->
name|flag
argument_list|(
name|Notify
argument_list|)
return|;
else|else
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the notify signal associated with this property.      \sa hasNotifySignal(), setNotifySignal(), removeNotifySignal() */
end_comment
begin_function
DECL|function|notifySignal
name|QMetaMethodBuilder
name|QMetaPropertyBuilder
operator|::
name|notifySignal
parameter_list|()
specifier|const
block|{
name|QMetaPropertyBuilderPrivate
modifier|*
name|d
init|=
name|d_func
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
operator|&&
name|d
operator|->
name|notifySignal
operator|>=
literal|0
condition|)
return|return
name|QMetaMethodBuilder
argument_list|(
name|_mobj
argument_list|,
name|d
operator|->
name|notifySignal
argument_list|)
return|;
else|else
return|return
name|QMetaMethodBuilder
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the notify signal associated with this property to \a value.      \sa hasNotifySignal(), notifySignal(), removeNotifySignal() */
end_comment
begin_function
DECL|function|setNotifySignal
name|void
name|QMetaPropertyBuilder
operator|::
name|setNotifySignal
parameter_list|(
specifier|const
name|QMetaMethodBuilder
modifier|&
name|value
parameter_list|)
block|{
name|QMetaPropertyBuilderPrivate
modifier|*
name|d
init|=
name|d_func
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
condition|)
block|{
if|if
condition|(
name|value
operator|.
name|_mobj
condition|)
block|{
name|d
operator|->
name|notifySignal
operator|=
name|value
operator|.
name|_index
expr_stmt|;
name|d
operator|->
name|setFlag
argument_list|(
name|Notify
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|notifySignal
operator|=
operator|-
literal|1
expr_stmt|;
name|d
operator|->
name|setFlag
argument_list|(
name|Notify
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|/*!     Removes the notify signal from this property.      \sa hasNotifySignal(), notifySignal(), setNotifySignal() */
end_comment
begin_function
DECL|function|removeNotifySignal
name|void
name|QMetaPropertyBuilder
operator|::
name|removeNotifySignal
parameter_list|()
block|{
name|QMetaPropertyBuilderPrivate
modifier|*
name|d
init|=
name|d_func
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
condition|)
block|{
name|d
operator|->
name|notifySignal
operator|=
operator|-
literal|1
expr_stmt|;
name|d
operator|->
name|setFlag
argument_list|(
name|Notify
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     Returns \c true if this property is readable; otherwise returns \c false.     The default value is true.      \sa setReadable(), isWritable() */
end_comment
begin_function
DECL|function|isReadable
name|bool
name|QMetaPropertyBuilder
operator|::
name|isReadable
parameter_list|()
specifier|const
block|{
name|QMetaPropertyBuilderPrivate
modifier|*
name|d
init|=
name|d_func
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
condition|)
return|return
name|d
operator|->
name|flag
argument_list|(
name|Readable
argument_list|)
return|;
else|else
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/*!     Returns \c true if this property is writable; otherwise returns \c false.     The default value is true.      \sa setWritable(), isReadable() */
end_comment
begin_function
DECL|function|isWritable
name|bool
name|QMetaPropertyBuilder
operator|::
name|isWritable
parameter_list|()
specifier|const
block|{
name|QMetaPropertyBuilderPrivate
modifier|*
name|d
init|=
name|d_func
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
condition|)
return|return
name|d
operator|->
name|flag
argument_list|(
name|Writable
argument_list|)
return|;
else|else
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/*!     Returns \c true if this property can be reset to a default value; otherwise     returns \c false.  The default value is false.      \sa setResettable() */
end_comment
begin_function
DECL|function|isResettable
name|bool
name|QMetaPropertyBuilder
operator|::
name|isResettable
parameter_list|()
specifier|const
block|{
name|QMetaPropertyBuilderPrivate
modifier|*
name|d
init|=
name|d_func
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
condition|)
return|return
name|d
operator|->
name|flag
argument_list|(
name|Resettable
argument_list|)
return|;
else|else
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/*!     Returns \c true if this property is designable; otherwise returns \c false.     This default value is false.      \sa setDesignable(), isScriptable(), isStored() */
end_comment
begin_function
DECL|function|isDesignable
name|bool
name|QMetaPropertyBuilder
operator|::
name|isDesignable
parameter_list|()
specifier|const
block|{
name|QMetaPropertyBuilderPrivate
modifier|*
name|d
init|=
name|d_func
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
condition|)
return|return
name|d
operator|->
name|flag
argument_list|(
name|Designable
argument_list|)
return|;
else|else
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/*!     Returns \c true if the property is scriptable; otherwise returns \c false.     This default value is true.      \sa setScriptable(), isDesignable(), isStored() */
end_comment
begin_function
DECL|function|isScriptable
name|bool
name|QMetaPropertyBuilder
operator|::
name|isScriptable
parameter_list|()
specifier|const
block|{
name|QMetaPropertyBuilderPrivate
modifier|*
name|d
init|=
name|d_func
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
condition|)
return|return
name|d
operator|->
name|flag
argument_list|(
name|Scriptable
argument_list|)
return|;
else|else
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/*!     Returns \c true if the property is stored; otherwise returns \c false.     This default value is false.      \sa setStored(), isDesignable(), isScriptable() */
end_comment
begin_function
DECL|function|isStored
name|bool
name|QMetaPropertyBuilder
operator|::
name|isStored
parameter_list|()
specifier|const
block|{
name|QMetaPropertyBuilderPrivate
modifier|*
name|d
init|=
name|d_func
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
condition|)
return|return
name|d
operator|->
name|flag
argument_list|(
name|Stored
argument_list|)
return|;
else|else
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/*!     Returns \c true if the property is editable; otherwise returns \c false.     This default value is false.      \sa setEditable(), isDesignable(), isScriptable(), isStored() */
end_comment
begin_function
DECL|function|isEditable
name|bool
name|QMetaPropertyBuilder
operator|::
name|isEditable
parameter_list|()
specifier|const
block|{
name|QMetaPropertyBuilderPrivate
modifier|*
name|d
init|=
name|d_func
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
condition|)
return|return
name|d
operator|->
name|flag
argument_list|(
name|Editable
argument_list|)
return|;
else|else
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/*!     Returns \c true if this property is designated as the \c USER     property, i.e., the one that the user can edit or that is     significant in some other way.  Otherwise it returns     false.  This default value is false.      \sa setUser(), isDesignable(), isScriptable() */
end_comment
begin_function
DECL|function|isUser
name|bool
name|QMetaPropertyBuilder
operator|::
name|isUser
parameter_list|()
specifier|const
block|{
name|QMetaPropertyBuilderPrivate
modifier|*
name|d
init|=
name|d_func
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
condition|)
return|return
name|d
operator|->
name|flag
argument_list|(
name|User
argument_list|)
return|;
else|else
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/*!     Returns \c true if the property has a C++ setter function that     follows Qt's standard "name" / "setName" pattern. Designer and uic     query hasStdCppSet() in order to avoid expensive     QObject::setProperty() calls. All properties in Qt [should] follow     this pattern.  The default value is false.      \sa setStdCppSet() */
end_comment
begin_function
DECL|function|hasStdCppSet
name|bool
name|QMetaPropertyBuilder
operator|::
name|hasStdCppSet
parameter_list|()
specifier|const
block|{
name|QMetaPropertyBuilderPrivate
modifier|*
name|d
init|=
name|d_func
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
condition|)
return|return
name|d
operator|->
name|flag
argument_list|(
name|StdCppSet
argument_list|)
return|;
else|else
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/*!     Returns \c true if the property is an enumerator or flag type;     otherwise returns \c false.  This default value is false.      \sa setEnumOrFlag() */
end_comment
begin_function
DECL|function|isEnumOrFlag
name|bool
name|QMetaPropertyBuilder
operator|::
name|isEnumOrFlag
parameter_list|()
specifier|const
block|{
name|QMetaPropertyBuilderPrivate
modifier|*
name|d
init|=
name|d_func
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
condition|)
return|return
name|d
operator|->
name|flag
argument_list|(
name|EnumOrFlag
argument_list|)
return|;
else|else
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/*!     Returns \c true if the property is constant; otherwise returns \c false.     The default value is false. */
end_comment
begin_function
DECL|function|isConstant
name|bool
name|QMetaPropertyBuilder
operator|::
name|isConstant
parameter_list|()
specifier|const
block|{
name|QMetaPropertyBuilderPrivate
modifier|*
name|d
init|=
name|d_func
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
condition|)
return|return
name|d
operator|->
name|flag
argument_list|(
name|Constant
argument_list|)
return|;
else|else
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/*!     Returns \c true if the property is final; otherwise returns \c false.     The default value is false. */
end_comment
begin_function
DECL|function|isFinal
name|bool
name|QMetaPropertyBuilder
operator|::
name|isFinal
parameter_list|()
specifier|const
block|{
name|QMetaPropertyBuilderPrivate
modifier|*
name|d
init|=
name|d_func
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
condition|)
return|return
name|d
operator|->
name|flag
argument_list|(
name|Final
argument_list|)
return|;
else|else
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/*!     Sets this property to readable if \a value is true.      \sa isReadable(), setWritable() */
end_comment
begin_function
DECL|function|setReadable
name|void
name|QMetaPropertyBuilder
operator|::
name|setReadable
parameter_list|(
name|bool
name|value
parameter_list|)
block|{
name|QMetaPropertyBuilderPrivate
modifier|*
name|d
init|=
name|d_func
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
condition|)
name|d
operator|->
name|setFlag
argument_list|(
name|Readable
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets this property to writable if \a value is true.      \sa isWritable(), setReadable() */
end_comment
begin_function
DECL|function|setWritable
name|void
name|QMetaPropertyBuilder
operator|::
name|setWritable
parameter_list|(
name|bool
name|value
parameter_list|)
block|{
name|QMetaPropertyBuilderPrivate
modifier|*
name|d
init|=
name|d_func
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
condition|)
name|d
operator|->
name|setFlag
argument_list|(
name|Writable
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets this property to resettable if \a value is true.      \sa isResettable() */
end_comment
begin_function
DECL|function|setResettable
name|void
name|QMetaPropertyBuilder
operator|::
name|setResettable
parameter_list|(
name|bool
name|value
parameter_list|)
block|{
name|QMetaPropertyBuilderPrivate
modifier|*
name|d
init|=
name|d_func
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
condition|)
name|d
operator|->
name|setFlag
argument_list|(
name|Resettable
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets this property to designable if \a value is true.      \sa isDesignable(), setScriptable(), setStored() */
end_comment
begin_function
DECL|function|setDesignable
name|void
name|QMetaPropertyBuilder
operator|::
name|setDesignable
parameter_list|(
name|bool
name|value
parameter_list|)
block|{
name|QMetaPropertyBuilderPrivate
modifier|*
name|d
init|=
name|d_func
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
condition|)
name|d
operator|->
name|setFlag
argument_list|(
name|Designable
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets this property to scriptable if \a value is true.      \sa isScriptable(), setDesignable(), setStored() */
end_comment
begin_function
DECL|function|setScriptable
name|void
name|QMetaPropertyBuilder
operator|::
name|setScriptable
parameter_list|(
name|bool
name|value
parameter_list|)
block|{
name|QMetaPropertyBuilderPrivate
modifier|*
name|d
init|=
name|d_func
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
condition|)
name|d
operator|->
name|setFlag
argument_list|(
name|Scriptable
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets this property to storable if \a value is true.      \sa isStored(), setDesignable(), setScriptable() */
end_comment
begin_function
DECL|function|setStored
name|void
name|QMetaPropertyBuilder
operator|::
name|setStored
parameter_list|(
name|bool
name|value
parameter_list|)
block|{
name|QMetaPropertyBuilderPrivate
modifier|*
name|d
init|=
name|d_func
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
condition|)
name|d
operator|->
name|setFlag
argument_list|(
name|Stored
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets this property to editable if \a value is true.      \sa isEditable(), setDesignable(), setScriptable(), setStored() */
end_comment
begin_function
DECL|function|setEditable
name|void
name|QMetaPropertyBuilder
operator|::
name|setEditable
parameter_list|(
name|bool
name|value
parameter_list|)
block|{
name|QMetaPropertyBuilderPrivate
modifier|*
name|d
init|=
name|d_func
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
condition|)
name|d
operator|->
name|setFlag
argument_list|(
name|Editable
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the \c USER flag on this property to \a value.      \sa isUser(), setDesignable(), setScriptable() */
end_comment
begin_function
DECL|function|setUser
name|void
name|QMetaPropertyBuilder
operator|::
name|setUser
parameter_list|(
name|bool
name|value
parameter_list|)
block|{
name|QMetaPropertyBuilderPrivate
modifier|*
name|d
init|=
name|d_func
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
condition|)
name|d
operator|->
name|setFlag
argument_list|(
name|User
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the C++ setter flag on this property to \a value, which is     true if the property has a C++ setter function that follows Qt's     standard "name" / "setName" pattern.      \sa hasStdCppSet() */
end_comment
begin_function
DECL|function|setStdCppSet
name|void
name|QMetaPropertyBuilder
operator|::
name|setStdCppSet
parameter_list|(
name|bool
name|value
parameter_list|)
block|{
name|QMetaPropertyBuilderPrivate
modifier|*
name|d
init|=
name|d_func
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
condition|)
name|d
operator|->
name|setFlag
argument_list|(
name|StdCppSet
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets this property to be of an enumerator or flag type if     \a value is true.      \sa isEnumOrFlag() */
end_comment
begin_function
DECL|function|setEnumOrFlag
name|void
name|QMetaPropertyBuilder
operator|::
name|setEnumOrFlag
parameter_list|(
name|bool
name|value
parameter_list|)
block|{
name|QMetaPropertyBuilderPrivate
modifier|*
name|d
init|=
name|d_func
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
condition|)
name|d
operator|->
name|setFlag
argument_list|(
name|EnumOrFlag
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the \c CONSTANT flag on this property to \a value.      \sa isConstant() */
end_comment
begin_function
DECL|function|setConstant
name|void
name|QMetaPropertyBuilder
operator|::
name|setConstant
parameter_list|(
name|bool
name|value
parameter_list|)
block|{
name|QMetaPropertyBuilderPrivate
modifier|*
name|d
init|=
name|d_func
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
condition|)
name|d
operator|->
name|setFlag
argument_list|(
name|Constant
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the \c FINAL flag on this property to \a value.      \sa isFinal() */
end_comment
begin_function
DECL|function|setFinal
name|void
name|QMetaPropertyBuilder
operator|::
name|setFinal
parameter_list|(
name|bool
name|value
parameter_list|)
block|{
name|QMetaPropertyBuilderPrivate
modifier|*
name|d
init|=
name|d_func
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
condition|)
name|d
operator|->
name|setFlag
argument_list|(
name|Final
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the revision of this property.      \sa setRevision() */
end_comment
begin_function
DECL|function|revision
name|int
name|QMetaPropertyBuilder
operator|::
name|revision
parameter_list|()
specifier|const
block|{
name|QMetaPropertyBuilderPrivate
modifier|*
name|d
init|=
name|d_func
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
condition|)
return|return
name|d
operator|->
name|revision
return|;
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the \a revision of this property.      \sa revision() */
end_comment
begin_function
DECL|function|setRevision
name|void
name|QMetaPropertyBuilder
operator|::
name|setRevision
parameter_list|(
name|int
name|revision
parameter_list|)
block|{
name|QMetaPropertyBuilderPrivate
modifier|*
name|d
init|=
name|d_func
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
condition|)
block|{
name|d
operator|->
name|revision
operator|=
name|revision
expr_stmt|;
name|d
operator|->
name|setFlag
argument_list|(
name|Revisioned
argument_list|,
name|revision
operator|!=
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \class QMetaEnumBuilder     \inmodule QtCore     \internal     \brief The QMetaEnumBuilder class enables modifications to an enumerator definition on a meta object builder. */
end_comment
begin_function
DECL|function|d_func
name|QMetaEnumBuilderPrivate
modifier|*
name|QMetaEnumBuilder
operator|::
name|d_func
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|_mobj
operator|&&
name|_index
operator|>=
literal|0
operator|&&
name|_index
operator|<
name|_mobj
operator|->
name|d
operator|->
name|enumerators
operator|.
name|size
argument_list|()
condition|)
return|return
operator|&
operator|(
name|_mobj
operator|->
name|d
operator|->
name|enumerators
index|[
name|_index
index|]
operator|)
return|;
else|else
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     \fn QMetaEnumBuilder::QMetaEnumBuilder()     \internal */
end_comment
begin_comment
comment|/*!     \fn int QMetaEnumBuilder::index() const      Returns the index of this enumerator within its QMetaObjectBuilder. */
end_comment
begin_comment
comment|/*!     Returns the name of the enumerator (without the scope). */
end_comment
begin_function
DECL|function|name
name|QByteArray
name|QMetaEnumBuilder
operator|::
name|name
parameter_list|()
specifier|const
block|{
name|QMetaEnumBuilderPrivate
modifier|*
name|d
init|=
name|d_func
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
condition|)
return|return
name|d
operator|->
name|name
return|;
else|else
return|return
name|QByteArray
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns \c true if this enumerator is used as a flag; otherwise returns     false.      \sa setIsFlag() */
end_comment
begin_function
DECL|function|isFlag
name|bool
name|QMetaEnumBuilder
operator|::
name|isFlag
parameter_list|()
specifier|const
block|{
name|QMetaEnumBuilderPrivate
modifier|*
name|d
init|=
name|d_func
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
condition|)
return|return
name|d
operator|->
name|isFlag
return|;
else|else
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/*!     Sets this enumerator to be used as a flag if \a value is true.      \sa isFlag() */
end_comment
begin_function
DECL|function|setIsFlag
name|void
name|QMetaEnumBuilder
operator|::
name|setIsFlag
parameter_list|(
name|bool
name|value
parameter_list|)
block|{
name|QMetaEnumBuilderPrivate
modifier|*
name|d
init|=
name|d_func
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
condition|)
name|d
operator|->
name|isFlag
operator|=
name|value
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the number of keys.      \sa key(), addKey() */
end_comment
begin_function
DECL|function|keyCount
name|int
name|QMetaEnumBuilder
operator|::
name|keyCount
parameter_list|()
specifier|const
block|{
name|QMetaEnumBuilderPrivate
modifier|*
name|d
init|=
name|d_func
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
condition|)
return|return
name|d
operator|->
name|keys
operator|.
name|size
argument_list|()
return|;
else|else
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the key with the given \a index, or an empty QByteArray     if no such key exists.      \sa keyCount(), addKey(), value() */
end_comment
begin_function
DECL|function|key
name|QByteArray
name|QMetaEnumBuilder
operator|::
name|key
parameter_list|(
name|int
name|index
parameter_list|)
specifier|const
block|{
name|QMetaEnumBuilderPrivate
modifier|*
name|d
init|=
name|d_func
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
operator|&&
name|index
operator|>=
literal|0
operator|&&
name|index
operator|<
name|d
operator|->
name|keys
operator|.
name|size
argument_list|()
condition|)
return|return
name|d
operator|->
name|keys
index|[
name|index
index|]
return|;
else|else
return|return
name|QByteArray
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the value with the given \a index; or returns -1 if there     is no such value.      \sa keyCount(), addKey(), key() */
end_comment
begin_function
DECL|function|value
name|int
name|QMetaEnumBuilder
operator|::
name|value
parameter_list|(
name|int
name|index
parameter_list|)
specifier|const
block|{
name|QMetaEnumBuilderPrivate
modifier|*
name|d
init|=
name|d_func
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
operator|&&
name|index
operator|>=
literal|0
operator|&&
name|index
operator|<
name|d
operator|->
name|keys
operator|.
name|size
argument_list|()
condition|)
return|return
name|d
operator|->
name|values
index|[
name|index
index|]
return|;
else|else
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_comment
comment|/*!     Adds a new key called \a name to this enumerator, associated     with \a value.  Returns the index of the new key.      \sa keyCount(), key(), value(), removeKey() */
end_comment
begin_function
DECL|function|addKey
name|int
name|QMetaEnumBuilder
operator|::
name|addKey
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|name
parameter_list|,
name|int
name|value
parameter_list|)
block|{
name|QMetaEnumBuilderPrivate
modifier|*
name|d
init|=
name|d_func
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
condition|)
block|{
name|int
name|index
init|=
name|d
operator|->
name|keys
operator|.
name|size
argument_list|()
decl_stmt|;
name|d
operator|->
name|keys
operator|+=
name|name
expr_stmt|;
name|d
operator|->
name|values
operator|+=
name|value
expr_stmt|;
return|return
name|index
return|;
block|}
else|else
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
end_function
begin_comment
comment|/*!     Removes the key at \a index from this enumerator.      \sa addKey() */
end_comment
begin_function
DECL|function|removeKey
name|void
name|QMetaEnumBuilder
operator|::
name|removeKey
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|QMetaEnumBuilderPrivate
modifier|*
name|d
init|=
name|d_func
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
operator|&&
name|index
operator|>=
literal|0
operator|&&
name|index
operator|<
name|d
operator|->
name|keys
operator|.
name|size
argument_list|()
condition|)
block|{
name|d
operator|->
name|keys
operator|.
name|removeAt
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|d
operator|->
name|values
operator|.
name|removeAt
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
