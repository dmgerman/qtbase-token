begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qeventdispatcher_glib_p.h"
end_include
begin_include
include|#
directive|include
file|"qeventdispatcher_unix_p.h"
end_include
begin_include
include|#
directive|include
file|<private/qthread_p.h>
end_include
begin_include
include|#
directive|include
file|"qcoreapplication.h"
end_include
begin_include
include|#
directive|include
file|"qsocketnotifier.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/qlist.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qpair.h>
end_include
begin_include
include|#
directive|include
file|<glib.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_struct
DECL|struct|GPollFDWithQSocketNotifier
struct|struct
name|GPollFDWithQSocketNotifier
block|{
DECL|member|pollfd
name|GPollFD
name|pollfd
decl_stmt|;
DECL|member|socketNotifier
name|QSocketNotifier
modifier|*
name|socketNotifier
decl_stmt|;
block|}
struct|;
end_struct
begin_struct
DECL|struct|GSocketNotifierSource
struct|struct
name|GSocketNotifierSource
block|{
DECL|member|source
name|GSource
name|source
decl_stmt|;
DECL|member|pollfds
name|QList
argument_list|<
name|GPollFDWithQSocketNotifier
modifier|*
argument_list|>
name|pollfds
decl_stmt|;
block|}
struct|;
end_struct
begin_function
DECL|function|socketNotifierSourcePrepare
specifier|static
name|gboolean
name|socketNotifierSourcePrepare
parameter_list|(
name|GSource
modifier|*
parameter_list|,
name|gint
modifier|*
name|timeout
parameter_list|)
block|{
if|if
condition|(
name|timeout
condition|)
operator|*
name|timeout
operator|=
operator|-
literal|1
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|socketNotifierSourceCheck
specifier|static
name|gboolean
name|socketNotifierSourceCheck
parameter_list|(
name|GSource
modifier|*
name|source
parameter_list|)
block|{
name|GSocketNotifierSource
modifier|*
name|src
init|=
cast|reinterpret_cast
argument_list|<
name|GSocketNotifierSource
operator|*
argument_list|>
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|bool
name|pending
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
operator|!
name|pending
operator|&&
name|i
operator|<
name|src
operator|->
name|pollfds
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|GPollFDWithQSocketNotifier
modifier|*
name|p
init|=
name|src
operator|->
name|pollfds
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|->
name|pollfd
operator|.
name|revents
operator|&
name|G_IO_NVAL
condition|)
block|{
comment|// disable the invalid socket notifier
specifier|static
specifier|const
name|char
modifier|*
name|t
index|[]
init|=
block|{
literal|"Read"
block|,
literal|"Write"
block|,
literal|"Exception"
block|}
decl_stmt|;
name|qWarning
argument_list|(
literal|"QSocketNotifier: Invalid socket %d and type '%s', disabling..."
argument_list|,
name|p
operator|->
name|pollfd
operator|.
name|fd
argument_list|,
name|t
index|[
name|int
argument_list|(
name|p
operator|->
name|socketNotifier
operator|->
name|type
argument_list|()
argument_list|)
index|]
argument_list|)
expr_stmt|;
comment|// ### note, modifies src->pollfds!
name|p
operator|->
name|socketNotifier
operator|->
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|pending
operator|=
operator|(
operator|(
name|p
operator|->
name|pollfd
operator|.
name|revents
operator|&
name|p
operator|->
name|pollfd
operator|.
name|events
operator|)
operator|!=
literal|0
operator|)
expr_stmt|;
block|}
return|return
name|pending
return|;
block|}
end_function
begin_function
DECL|function|socketNotifierSourceDispatch
specifier|static
name|gboolean
name|socketNotifierSourceDispatch
parameter_list|(
name|GSource
modifier|*
name|source
parameter_list|,
name|GSourceFunc
parameter_list|,
name|gpointer
parameter_list|)
block|{
name|QEvent
name|event
argument_list|(
name|QEvent
operator|::
name|SockAct
argument_list|)
decl_stmt|;
name|GSocketNotifierSource
modifier|*
name|src
init|=
cast|reinterpret_cast
argument_list|<
name|GSocketNotifierSource
operator|*
argument_list|>
argument_list|(
name|source
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|src
operator|->
name|pollfds
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|GPollFDWithQSocketNotifier
modifier|*
name|p
init|=
name|src
operator|->
name|pollfds
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|p
operator|->
name|pollfd
operator|.
name|revents
operator|&
name|p
operator|->
name|pollfd
operator|.
name|events
operator|)
operator|!=
literal|0
condition|)
name|QCoreApplication
operator|::
name|sendEvent
argument_list|(
name|p
operator|->
name|socketNotifier
argument_list|,
operator|&
name|event
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
comment|// ??? don't remove, right?
block|}
end_function
begin_decl_stmt
DECL|variable|socketNotifierSourceFuncs
specifier|static
name|GSourceFuncs
name|socketNotifierSourceFuncs
init|=
block|{
name|socketNotifierSourcePrepare
block|,
name|socketNotifierSourceCheck
block|,
name|socketNotifierSourceDispatch
block|,
name|NULL
block|,
name|NULL
block|,
name|NULL
block|}
decl_stmt|;
end_decl_stmt
begin_struct
DECL|struct|GTimerSource
struct|struct
name|GTimerSource
block|{
DECL|member|source
name|GSource
name|source
decl_stmt|;
DECL|member|timerList
name|QTimerInfoList
name|timerList
decl_stmt|;
DECL|member|processEventsFlags
name|QEventLoop
operator|::
name|ProcessEventsFlags
name|processEventsFlags
decl_stmt|;
DECL|member|runWithIdlePriority
name|bool
name|runWithIdlePriority
decl_stmt|;
block|}
struct|;
end_struct
begin_function
DECL|function|timerSourcePrepareHelper
specifier|static
name|gboolean
name|timerSourcePrepareHelper
parameter_list|(
name|GTimerSource
modifier|*
name|src
parameter_list|,
name|gint
modifier|*
name|timeout
parameter_list|)
block|{
name|timespec
name|tv
init|=
block|{
literal|0l
block|,
literal|0l
block|}
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|src
operator|->
name|processEventsFlags
operator|&
name|QEventLoop
operator|::
name|X11ExcludeTimers
operator|)
operator|&&
name|src
operator|->
name|timerList
operator|.
name|timerWait
argument_list|(
name|tv
argument_list|)
condition|)
operator|*
name|timeout
operator|=
operator|(
name|tv
operator|.
name|tv_sec
operator|*
literal|1000
operator|)
operator|+
operator|(
operator|(
name|tv
operator|.
name|tv_nsec
operator|+
literal|999999
operator|)
operator|/
literal|1000
operator|/
literal|1000
operator|)
expr_stmt|;
else|else
operator|*
name|timeout
operator|=
operator|-
literal|1
expr_stmt|;
return|return
operator|(
operator|*
name|timeout
operator|==
literal|0
operator|)
return|;
block|}
end_function
begin_function
DECL|function|timerSourceCheckHelper
specifier|static
name|gboolean
name|timerSourceCheckHelper
parameter_list|(
name|GTimerSource
modifier|*
name|src
parameter_list|)
block|{
if|if
condition|(
name|src
operator|->
name|timerList
operator|.
name|isEmpty
argument_list|()
operator|||
operator|(
name|src
operator|->
name|processEventsFlags
operator|&
name|QEventLoop
operator|::
name|X11ExcludeTimers
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|src
operator|->
name|timerList
operator|.
name|updateCurrentTime
argument_list|()
operator|<
name|src
operator|->
name|timerList
operator|.
name|constFirst
argument_list|()
operator|->
name|timeout
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|timerSourcePrepare
specifier|static
name|gboolean
name|timerSourcePrepare
parameter_list|(
name|GSource
modifier|*
name|source
parameter_list|,
name|gint
modifier|*
name|timeout
parameter_list|)
block|{
name|gint
name|dummy
decl_stmt|;
if|if
condition|(
operator|!
name|timeout
condition|)
name|timeout
operator|=
operator|&
name|dummy
expr_stmt|;
name|GTimerSource
modifier|*
name|src
init|=
cast|reinterpret_cast
argument_list|<
name|GTimerSource
operator|*
argument_list|>
argument_list|(
name|source
argument_list|)
decl_stmt|;
if|if
condition|(
name|src
operator|->
name|runWithIdlePriority
condition|)
block|{
if|if
condition|(
name|timeout
condition|)
operator|*
name|timeout
operator|=
operator|-
literal|1
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
name|timerSourcePrepareHelper
argument_list|(
name|src
argument_list|,
name|timeout
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|timerSourceCheck
specifier|static
name|gboolean
name|timerSourceCheck
parameter_list|(
name|GSource
modifier|*
name|source
parameter_list|)
block|{
name|GTimerSource
modifier|*
name|src
init|=
cast|reinterpret_cast
argument_list|<
name|GTimerSource
operator|*
argument_list|>
argument_list|(
name|source
argument_list|)
decl_stmt|;
if|if
condition|(
name|src
operator|->
name|runWithIdlePriority
condition|)
return|return
literal|false
return|;
return|return
name|timerSourceCheckHelper
argument_list|(
name|src
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|timerSourceDispatch
specifier|static
name|gboolean
name|timerSourceDispatch
parameter_list|(
name|GSource
modifier|*
name|source
parameter_list|,
name|GSourceFunc
parameter_list|,
name|gpointer
parameter_list|)
block|{
name|GTimerSource
modifier|*
name|timerSource
init|=
cast|reinterpret_cast
argument_list|<
name|GTimerSource
operator|*
argument_list|>
argument_list|(
name|source
argument_list|)
decl_stmt|;
if|if
condition|(
name|timerSource
operator|->
name|processEventsFlags
operator|&
name|QEventLoop
operator|::
name|X11ExcludeTimers
condition|)
return|return
literal|true
return|;
name|timerSource
operator|->
name|runWithIdlePriority
operator|=
literal|true
expr_stmt|;
operator|(
name|void
operator|)
name|timerSource
operator|->
name|timerList
operator|.
name|activateTimers
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
comment|// ??? don't remove, right again?
block|}
end_function
begin_decl_stmt
DECL|variable|timerSourceFuncs
specifier|static
name|GSourceFuncs
name|timerSourceFuncs
init|=
block|{
name|timerSourcePrepare
block|,
name|timerSourceCheck
block|,
name|timerSourceDispatch
block|,
name|NULL
block|,
name|NULL
block|,
name|NULL
block|}
decl_stmt|;
end_decl_stmt
begin_struct
DECL|struct|GIdleTimerSource
struct|struct
name|GIdleTimerSource
block|{
DECL|member|source
name|GSource
name|source
decl_stmt|;
DECL|member|timerSource
name|GTimerSource
modifier|*
name|timerSource
decl_stmt|;
block|}
struct|;
end_struct
begin_function
DECL|function|idleTimerSourcePrepare
specifier|static
name|gboolean
name|idleTimerSourcePrepare
parameter_list|(
name|GSource
modifier|*
name|source
parameter_list|,
name|gint
modifier|*
name|timeout
parameter_list|)
block|{
name|GIdleTimerSource
modifier|*
name|idleTimerSource
init|=
cast|reinterpret_cast
argument_list|<
name|GIdleTimerSource
operator|*
argument_list|>
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|GTimerSource
modifier|*
name|timerSource
init|=
name|idleTimerSource
operator|->
name|timerSource
decl_stmt|;
if|if
condition|(
operator|!
name|timerSource
operator|->
name|runWithIdlePriority
condition|)
block|{
comment|// Yield to the normal priority timer source
if|if
condition|(
name|timeout
condition|)
operator|*
name|timeout
operator|=
operator|-
literal|1
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
name|timerSourcePrepareHelper
argument_list|(
name|timerSource
argument_list|,
name|timeout
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|idleTimerSourceCheck
specifier|static
name|gboolean
name|idleTimerSourceCheck
parameter_list|(
name|GSource
modifier|*
name|source
parameter_list|)
block|{
name|GIdleTimerSource
modifier|*
name|idleTimerSource
init|=
cast|reinterpret_cast
argument_list|<
name|GIdleTimerSource
operator|*
argument_list|>
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|GTimerSource
modifier|*
name|timerSource
init|=
name|idleTimerSource
operator|->
name|timerSource
decl_stmt|;
if|if
condition|(
operator|!
name|timerSource
operator|->
name|runWithIdlePriority
condition|)
block|{
comment|// Yield to the normal priority timer source
return|return
literal|false
return|;
block|}
return|return
name|timerSourceCheckHelper
argument_list|(
name|timerSource
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|idleTimerSourceDispatch
specifier|static
name|gboolean
name|idleTimerSourceDispatch
parameter_list|(
name|GSource
modifier|*
name|source
parameter_list|,
name|GSourceFunc
parameter_list|,
name|gpointer
parameter_list|)
block|{
name|GTimerSource
modifier|*
name|timerSource
init|=
cast|reinterpret_cast
argument_list|<
name|GIdleTimerSource
operator|*
argument_list|>
argument_list|(
name|source
argument_list|)
operator|->
name|timerSource
decl_stmt|;
operator|(
name|void
operator|)
name|timerSourceDispatch
argument_list|(
operator|&
name|timerSource
operator|->
name|source
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_decl_stmt
DECL|variable|idleTimerSourceFuncs
specifier|static
name|GSourceFuncs
name|idleTimerSourceFuncs
init|=
block|{
name|idleTimerSourcePrepare
block|,
name|idleTimerSourceCheck
block|,
name|idleTimerSourceDispatch
block|,
name|NULL
block|,
name|NULL
block|,
name|NULL
block|}
decl_stmt|;
end_decl_stmt
begin_struct
DECL|struct|GPostEventSource
struct|struct
name|GPostEventSource
block|{
DECL|member|source
name|GSource
name|source
decl_stmt|;
DECL|member|serialNumber
name|QAtomicInt
name|serialNumber
decl_stmt|;
DECL|member|lastSerialNumber
name|int
name|lastSerialNumber
decl_stmt|;
DECL|member|d
name|QEventDispatcherGlibPrivate
modifier|*
name|d
decl_stmt|;
block|}
struct|;
end_struct
begin_function
DECL|function|postEventSourcePrepare
specifier|static
name|gboolean
name|postEventSourcePrepare
parameter_list|(
name|GSource
modifier|*
name|s
parameter_list|,
name|gint
modifier|*
name|timeout
parameter_list|)
block|{
name|QThreadData
modifier|*
name|data
init|=
name|QThreadData
operator|::
name|current
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|data
condition|)
return|return
literal|false
return|;
name|gint
name|dummy
decl_stmt|;
if|if
condition|(
operator|!
name|timeout
condition|)
name|timeout
operator|=
operator|&
name|dummy
expr_stmt|;
specifier|const
name|bool
name|canWait
init|=
name|data
operator|->
name|canWaitLocked
argument_list|()
decl_stmt|;
operator|*
name|timeout
operator|=
name|canWait
condition|?
operator|-
literal|1
else|:
literal|0
expr_stmt|;
name|GPostEventSource
modifier|*
name|source
init|=
cast|reinterpret_cast
argument_list|<
name|GPostEventSource
operator|*
argument_list|>
argument_list|(
name|s
argument_list|)
decl_stmt|;
return|return
operator|(
operator|!
name|canWait
operator|||
operator|(
name|source
operator|->
name|serialNumber
operator|.
name|load
argument_list|()
operator|!=
name|source
operator|->
name|lastSerialNumber
operator|)
operator|)
return|;
block|}
end_function
begin_function
DECL|function|postEventSourceCheck
specifier|static
name|gboolean
name|postEventSourceCheck
parameter_list|(
name|GSource
modifier|*
name|source
parameter_list|)
block|{
return|return
name|postEventSourcePrepare
argument_list|(
name|source
argument_list|,
literal|0
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|postEventSourceDispatch
specifier|static
name|gboolean
name|postEventSourceDispatch
parameter_list|(
name|GSource
modifier|*
name|s
parameter_list|,
name|GSourceFunc
parameter_list|,
name|gpointer
parameter_list|)
block|{
name|GPostEventSource
modifier|*
name|source
init|=
cast|reinterpret_cast
argument_list|<
name|GPostEventSource
operator|*
argument_list|>
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|source
operator|->
name|lastSerialNumber
operator|=
name|source
operator|->
name|serialNumber
operator|.
name|load
argument_list|()
expr_stmt|;
name|QCoreApplication
operator|::
name|sendPostedEvents
argument_list|()
expr_stmt|;
name|source
operator|->
name|d
operator|->
name|runTimersOnceWithNormalPriority
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
comment|// i dunno, george...
block|}
end_function
begin_decl_stmt
DECL|variable|postEventSourceFuncs
specifier|static
name|GSourceFuncs
name|postEventSourceFuncs
init|=
block|{
name|postEventSourcePrepare
block|,
name|postEventSourceCheck
block|,
name|postEventSourceDispatch
block|,
name|NULL
block|,
name|NULL
block|,
name|NULL
block|}
decl_stmt|;
end_decl_stmt
begin_constructor
DECL|function|QEventDispatcherGlibPrivate
name|QEventDispatcherGlibPrivate
operator|::
name|QEventDispatcherGlibPrivate
parameter_list|(
name|GMainContext
modifier|*
name|context
parameter_list|)
member_init_list|:
name|mainContext
argument_list|(
name|context
argument_list|)
block|{
if|#
directive|if
name|GLIB_MAJOR_VERSION
operator|==
literal|2
operator|&&
name|GLIB_MINOR_VERSION
operator|<
literal|32
if|if
condition|(
name|qEnvironmentVariableIsEmpty
argument_list|(
literal|"QT_NO_THREADED_GLIB"
argument_list|)
condition|)
block|{
specifier|static
name|QBasicMutex
name|mutex
decl_stmt|;
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|g_thread_supported
argument_list|()
condition|)
name|g_thread_init
argument_list|(
name|NULL
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
name|mainContext
condition|)
block|{
name|g_main_context_ref
argument_list|(
name|mainContext
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QCoreApplication
modifier|*
name|app
init|=
name|QCoreApplication
operator|::
name|instance
argument_list|()
decl_stmt|;
if|if
condition|(
name|app
operator|&&
name|QThread
operator|::
name|currentThread
argument_list|()
operator|==
name|app
operator|->
name|thread
argument_list|()
condition|)
block|{
name|mainContext
operator|=
name|g_main_context_default
argument_list|()
expr_stmt|;
name|g_main_context_ref
argument_list|(
name|mainContext
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mainContext
operator|=
name|g_main_context_new
argument_list|()
expr_stmt|;
block|}
block|}
if|#
directive|if
name|GLIB_CHECK_VERSION
argument_list|(
literal|2
operator|,
literal|22
operator|,
literal|0
argument_list|)
name|g_main_context_push_thread_default
argument_list|(
name|mainContext
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// setup post event source
name|postEventSource
operator|=
cast|reinterpret_cast
argument_list|<
name|GPostEventSource
operator|*
argument_list|>
argument_list|(
name|g_source_new
argument_list|(
operator|&
name|postEventSourceFuncs
argument_list|,
sizeof|sizeof
argument_list|(
name|GPostEventSource
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|postEventSource
operator|->
name|serialNumber
operator|.
name|store
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|postEventSource
operator|->
name|d
operator|=
name|this
expr_stmt|;
name|g_source_set_can_recurse
argument_list|(
operator|&
name|postEventSource
operator|->
name|source
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|g_source_attach
argument_list|(
operator|&
name|postEventSource
operator|->
name|source
argument_list|,
name|mainContext
argument_list|)
expr_stmt|;
comment|// setup socketNotifierSource
name|socketNotifierSource
operator|=
cast|reinterpret_cast
argument_list|<
name|GSocketNotifierSource
operator|*
argument_list|>
argument_list|(
name|g_source_new
argument_list|(
operator|&
name|socketNotifierSourceFuncs
argument_list|,
sizeof|sizeof
argument_list|(
name|GSocketNotifierSource
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
operator|(
name|void
operator|)
operator|new
operator|(
operator|&
name|socketNotifierSource
operator|->
name|pollfds
operator|)
name|QList
argument_list|<
name|GPollFDWithQSocketNotifier
operator|*
argument_list|>
argument_list|()
expr_stmt|;
name|g_source_set_can_recurse
argument_list|(
operator|&
name|socketNotifierSource
operator|->
name|source
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|g_source_attach
argument_list|(
operator|&
name|socketNotifierSource
operator|->
name|source
argument_list|,
name|mainContext
argument_list|)
expr_stmt|;
comment|// setup normal and idle timer sources
name|timerSource
operator|=
cast|reinterpret_cast
argument_list|<
name|GTimerSource
operator|*
argument_list|>
argument_list|(
name|g_source_new
argument_list|(
operator|&
name|timerSourceFuncs
argument_list|,
sizeof|sizeof
argument_list|(
name|GTimerSource
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
operator|(
name|void
operator|)
operator|new
operator|(
operator|&
name|timerSource
operator|->
name|timerList
operator|)
name|QTimerInfoList
argument_list|()
expr_stmt|;
name|timerSource
operator|->
name|processEventsFlags
operator|=
name|QEventLoop
operator|::
name|AllEvents
expr_stmt|;
name|timerSource
operator|->
name|runWithIdlePriority
operator|=
literal|false
expr_stmt|;
name|g_source_set_can_recurse
argument_list|(
operator|&
name|timerSource
operator|->
name|source
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|g_source_attach
argument_list|(
operator|&
name|timerSource
operator|->
name|source
argument_list|,
name|mainContext
argument_list|)
expr_stmt|;
name|idleTimerSource
operator|=
cast|reinterpret_cast
argument_list|<
name|GIdleTimerSource
operator|*
argument_list|>
argument_list|(
name|g_source_new
argument_list|(
operator|&
name|idleTimerSourceFuncs
argument_list|,
sizeof|sizeof
argument_list|(
name|GIdleTimerSource
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|idleTimerSource
operator|->
name|timerSource
operator|=
name|timerSource
expr_stmt|;
name|g_source_set_can_recurse
argument_list|(
operator|&
name|idleTimerSource
operator|->
name|source
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|g_source_set_priority
argument_list|(
operator|&
name|idleTimerSource
operator|->
name|source
argument_list|,
name|G_PRIORITY_DEFAULT_IDLE
argument_list|)
expr_stmt|;
name|g_source_attach
argument_list|(
operator|&
name|idleTimerSource
operator|->
name|source
argument_list|,
name|mainContext
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|runTimersOnceWithNormalPriority
name|void
name|QEventDispatcherGlibPrivate
operator|::
name|runTimersOnceWithNormalPriority
parameter_list|()
block|{
name|timerSource
operator|->
name|runWithIdlePriority
operator|=
literal|false
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|QEventDispatcherGlib
name|QEventDispatcherGlib
operator|::
name|QEventDispatcherGlib
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QAbstractEventDispatcher
argument_list|(
operator|*
operator|(
operator|new
name|QEventDispatcherGlibPrivate
operator|)
argument_list|,
name|parent
argument_list|)
block|{ }
end_constructor
begin_constructor
DECL|function|QEventDispatcherGlib
name|QEventDispatcherGlib
operator|::
name|QEventDispatcherGlib
parameter_list|(
name|GMainContext
modifier|*
name|mainContext
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QAbstractEventDispatcher
argument_list|(
operator|*
operator|(
operator|new
name|QEventDispatcherGlibPrivate
argument_list|(
name|mainContext
argument_list|)
operator|)
argument_list|,
name|parent
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QEventDispatcherGlib
name|QEventDispatcherGlib
operator|::
name|~
name|QEventDispatcherGlib
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QEventDispatcherGlib
argument_list|)
expr_stmt|;
comment|// destroy all timer sources
name|qDeleteAll
argument_list|(
name|d
operator|->
name|timerSource
operator|->
name|timerList
argument_list|)
expr_stmt|;
name|d
operator|->
name|timerSource
operator|->
name|timerList
operator|.
name|~
name|QTimerInfoList
argument_list|()
expr_stmt|;
name|g_source_destroy
argument_list|(
operator|&
name|d
operator|->
name|timerSource
operator|->
name|source
argument_list|)
expr_stmt|;
name|g_source_unref
argument_list|(
operator|&
name|d
operator|->
name|timerSource
operator|->
name|source
argument_list|)
expr_stmt|;
name|d
operator|->
name|timerSource
operator|=
literal|0
expr_stmt|;
name|g_source_destroy
argument_list|(
operator|&
name|d
operator|->
name|idleTimerSource
operator|->
name|source
argument_list|)
expr_stmt|;
name|g_source_unref
argument_list|(
operator|&
name|d
operator|->
name|idleTimerSource
operator|->
name|source
argument_list|)
expr_stmt|;
name|d
operator|->
name|idleTimerSource
operator|=
literal|0
expr_stmt|;
comment|// destroy socket notifier source
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|socketNotifierSource
operator|->
name|pollfds
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|GPollFDWithQSocketNotifier
modifier|*
name|p
init|=
name|d
operator|->
name|socketNotifierSource
operator|->
name|pollfds
index|[
name|i
index|]
decl_stmt|;
name|g_source_remove_poll
argument_list|(
operator|&
name|d
operator|->
name|socketNotifierSource
operator|->
name|source
argument_list|,
operator|&
name|p
operator|->
name|pollfd
argument_list|)
expr_stmt|;
operator|delete
name|p
expr_stmt|;
block|}
name|d
operator|->
name|socketNotifierSource
operator|->
name|pollfds
operator|.
name|~
name|QList
argument_list|<
name|GPollFDWithQSocketNotifier
operator|*
argument_list|>
argument_list|()
expr_stmt|;
name|g_source_destroy
argument_list|(
operator|&
name|d
operator|->
name|socketNotifierSource
operator|->
name|source
argument_list|)
expr_stmt|;
name|g_source_unref
argument_list|(
operator|&
name|d
operator|->
name|socketNotifierSource
operator|->
name|source
argument_list|)
expr_stmt|;
name|d
operator|->
name|socketNotifierSource
operator|=
literal|0
expr_stmt|;
comment|// destroy post event source
name|g_source_destroy
argument_list|(
operator|&
name|d
operator|->
name|postEventSource
operator|->
name|source
argument_list|)
expr_stmt|;
name|g_source_unref
argument_list|(
operator|&
name|d
operator|->
name|postEventSource
operator|->
name|source
argument_list|)
expr_stmt|;
name|d
operator|->
name|postEventSource
operator|=
literal|0
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|d
operator|->
name|mainContext
operator|!=
literal|0
argument_list|)
expr_stmt|;
if|#
directive|if
name|GLIB_CHECK_VERSION
argument_list|(
literal|2
operator|,
literal|22
operator|,
literal|0
argument_list|)
name|g_main_context_pop_thread_default
argument_list|(
name|d
operator|->
name|mainContext
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|g_main_context_unref
argument_list|(
name|d
operator|->
name|mainContext
argument_list|)
expr_stmt|;
name|d
operator|->
name|mainContext
operator|=
literal|0
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|processEvents
name|bool
name|QEventDispatcherGlib
operator|::
name|processEvents
parameter_list|(
name|QEventLoop
operator|::
name|ProcessEventsFlags
name|flags
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QEventDispatcherGlib
argument_list|)
expr_stmt|;
specifier|const
name|bool
name|canWait
init|=
operator|(
name|flags
operator|&
name|QEventLoop
operator|::
name|WaitForMoreEvents
operator|)
decl_stmt|;
if|if
condition|(
name|canWait
condition|)
emit|emit
name|aboutToBlock
argument_list|()
emit|;
else|else
emit|emit
name|awake
argument_list|()
emit|;
comment|// tell postEventSourcePrepare() and timerSource about any new flags
name|QEventLoop
operator|::
name|ProcessEventsFlags
name|savedFlags
init|=
name|d
operator|->
name|timerSource
operator|->
name|processEventsFlags
decl_stmt|;
name|d
operator|->
name|timerSource
operator|->
name|processEventsFlags
operator|=
name|flags
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|QEventLoop
operator|::
name|EventLoopExec
operator|)
condition|)
block|{
comment|// force timers to be sent at normal priority
name|d
operator|->
name|timerSource
operator|->
name|runWithIdlePriority
operator|=
literal|false
expr_stmt|;
block|}
name|bool
name|result
init|=
name|g_main_context_iteration
argument_list|(
name|d
operator|->
name|mainContext
argument_list|,
name|canWait
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|result
operator|&&
name|canWait
condition|)
name|result
operator|=
name|g_main_context_iteration
argument_list|(
name|d
operator|->
name|mainContext
argument_list|,
name|canWait
argument_list|)
expr_stmt|;
name|d
operator|->
name|timerSource
operator|->
name|processEventsFlags
operator|=
name|savedFlags
expr_stmt|;
if|if
condition|(
name|canWait
condition|)
emit|emit
name|awake
argument_list|()
emit|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|hasPendingEvents
name|bool
name|QEventDispatcherGlib
operator|::
name|hasPendingEvents
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QEventDispatcherGlib
argument_list|)
expr_stmt|;
return|return
name|g_main_context_pending
argument_list|(
name|d
operator|->
name|mainContext
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|registerSocketNotifier
name|void
name|QEventDispatcherGlib
operator|::
name|registerSocketNotifier
parameter_list|(
name|QSocketNotifier
modifier|*
name|notifier
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|notifier
argument_list|)
expr_stmt|;
name|int
name|sockfd
init|=
name|notifier
operator|->
name|socket
argument_list|()
decl_stmt|;
name|int
name|type
init|=
name|notifier
operator|->
name|type
argument_list|()
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_DEBUG
if|if
condition|(
name|sockfd
operator|<
literal|0
condition|)
block|{
name|qWarning
argument_list|(
literal|"QSocketNotifier: Internal error"
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|notifier
operator|->
name|thread
argument_list|()
operator|!=
name|thread
argument_list|()
operator|||
name|thread
argument_list|()
operator|!=
name|QThread
operator|::
name|currentThread
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"QSocketNotifier: socket notifiers cannot be enabled from another thread"
argument_list|)
expr_stmt|;
return|return;
block|}
endif|#
directive|endif
name|Q_D
argument_list|(
name|QEventDispatcherGlib
argument_list|)
expr_stmt|;
name|GPollFDWithQSocketNotifier
modifier|*
name|p
init|=
operator|new
name|GPollFDWithQSocketNotifier
decl_stmt|;
name|p
operator|->
name|pollfd
operator|.
name|fd
operator|=
name|sockfd
expr_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|QSocketNotifier
operator|::
name|Read
case|:
name|p
operator|->
name|pollfd
operator|.
name|events
operator|=
name|G_IO_IN
operator||
name|G_IO_HUP
operator||
name|G_IO_ERR
expr_stmt|;
break|break;
case|case
name|QSocketNotifier
operator|::
name|Write
case|:
name|p
operator|->
name|pollfd
operator|.
name|events
operator|=
name|G_IO_OUT
operator||
name|G_IO_ERR
expr_stmt|;
break|break;
case|case
name|QSocketNotifier
operator|::
name|Exception
case|:
name|p
operator|->
name|pollfd
operator|.
name|events
operator|=
name|G_IO_PRI
operator||
name|G_IO_ERR
expr_stmt|;
break|break;
block|}
name|p
operator|->
name|socketNotifier
operator|=
name|notifier
expr_stmt|;
name|d
operator|->
name|socketNotifierSource
operator|->
name|pollfds
operator|.
name|append
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|g_source_add_poll
argument_list|(
operator|&
name|d
operator|->
name|socketNotifierSource
operator|->
name|source
argument_list|,
operator|&
name|p
operator|->
name|pollfd
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|unregisterSocketNotifier
name|void
name|QEventDispatcherGlib
operator|::
name|unregisterSocketNotifier
parameter_list|(
name|QSocketNotifier
modifier|*
name|notifier
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|notifier
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_DEBUG
name|int
name|sockfd
init|=
name|notifier
operator|->
name|socket
argument_list|()
decl_stmt|;
if|if
condition|(
name|sockfd
operator|<
literal|0
condition|)
block|{
name|qWarning
argument_list|(
literal|"QSocketNotifier: Internal error"
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|notifier
operator|->
name|thread
argument_list|()
operator|!=
name|thread
argument_list|()
operator|||
name|thread
argument_list|()
operator|!=
name|QThread
operator|::
name|currentThread
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"QSocketNotifier: socket notifiers cannot be disabled from another thread"
argument_list|)
expr_stmt|;
return|return;
block|}
endif|#
directive|endif
name|Q_D
argument_list|(
name|QEventDispatcherGlib
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|socketNotifierSource
operator|->
name|pollfds
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|GPollFDWithQSocketNotifier
modifier|*
name|p
init|=
name|d
operator|->
name|socketNotifierSource
operator|->
name|pollfds
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|->
name|socketNotifier
operator|==
name|notifier
condition|)
block|{
comment|// found it
name|g_source_remove_poll
argument_list|(
operator|&
name|d
operator|->
name|socketNotifierSource
operator|->
name|source
argument_list|,
operator|&
name|p
operator|->
name|pollfd
argument_list|)
expr_stmt|;
name|d
operator|->
name|socketNotifierSource
operator|->
name|pollfds
operator|.
name|removeAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
operator|delete
name|p
expr_stmt|;
return|return;
block|}
block|}
block|}
end_function
begin_function
DECL|function|registerTimer
name|void
name|QEventDispatcherGlib
operator|::
name|registerTimer
parameter_list|(
name|int
name|timerId
parameter_list|,
name|int
name|interval
parameter_list|,
name|Qt
operator|::
name|TimerType
name|timerType
parameter_list|,
name|QObject
modifier|*
name|object
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_DEBUG
if|if
condition|(
name|timerId
operator|<
literal|1
operator|||
name|interval
operator|<
literal|0
operator|||
operator|!
name|object
condition|)
block|{
name|qWarning
argument_list|(
literal|"QEventDispatcherGlib::registerTimer: invalid arguments"
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|object
operator|->
name|thread
argument_list|()
operator|!=
name|thread
argument_list|()
operator|||
name|thread
argument_list|()
operator|!=
name|QThread
operator|::
name|currentThread
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"QEventDispatcherGlib::registerTimer: timers cannot be started from another thread"
argument_list|)
expr_stmt|;
return|return;
block|}
endif|#
directive|endif
name|Q_D
argument_list|(
name|QEventDispatcherGlib
argument_list|)
expr_stmt|;
name|d
operator|->
name|timerSource
operator|->
name|timerList
operator|.
name|registerTimer
argument_list|(
name|timerId
argument_list|,
name|interval
argument_list|,
name|timerType
argument_list|,
name|object
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|unregisterTimer
name|bool
name|QEventDispatcherGlib
operator|::
name|unregisterTimer
parameter_list|(
name|int
name|timerId
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_DEBUG
if|if
condition|(
name|timerId
operator|<
literal|1
condition|)
block|{
name|qWarning
argument_list|(
literal|"QEventDispatcherGlib::unregisterTimer: invalid argument"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|thread
argument_list|()
operator|!=
name|QThread
operator|::
name|currentThread
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"QEventDispatcherGlib::unregisterTimer: timers cannot be stopped from another thread"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
endif|#
directive|endif
name|Q_D
argument_list|(
name|QEventDispatcherGlib
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|timerSource
operator|->
name|timerList
operator|.
name|unregisterTimer
argument_list|(
name|timerId
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|unregisterTimers
name|bool
name|QEventDispatcherGlib
operator|::
name|unregisterTimers
parameter_list|(
name|QObject
modifier|*
name|object
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_DEBUG
if|if
condition|(
operator|!
name|object
condition|)
block|{
name|qWarning
argument_list|(
literal|"QEventDispatcherGlib::unregisterTimers: invalid argument"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|object
operator|->
name|thread
argument_list|()
operator|!=
name|thread
argument_list|()
operator|||
name|thread
argument_list|()
operator|!=
name|QThread
operator|::
name|currentThread
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"QEventDispatcherGlib::unregisterTimers: timers cannot be stopped from another thread"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
endif|#
directive|endif
name|Q_D
argument_list|(
name|QEventDispatcherGlib
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|timerSource
operator|->
name|timerList
operator|.
name|unregisterTimers
argument_list|(
name|object
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|registeredTimers
name|QList
argument_list|<
name|QEventDispatcherGlib
operator|::
name|TimerInfo
argument_list|>
name|QEventDispatcherGlib
operator|::
name|registeredTimers
parameter_list|(
name|QObject
modifier|*
name|object
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|object
condition|)
block|{
name|qWarning
argument_list|(
literal|"QEventDispatcherUNIX:registeredTimers: invalid argument"
argument_list|)
expr_stmt|;
return|return
name|QList
argument_list|<
name|TimerInfo
argument_list|>
argument_list|()
return|;
block|}
name|Q_D
argument_list|(
specifier|const
name|QEventDispatcherGlib
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|timerSource
operator|->
name|timerList
operator|.
name|registeredTimers
argument_list|(
name|object
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|remainingTime
name|int
name|QEventDispatcherGlib
operator|::
name|remainingTime
parameter_list|(
name|int
name|timerId
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_DEBUG
if|if
condition|(
name|timerId
operator|<
literal|1
condition|)
block|{
name|qWarning
argument_list|(
literal|"QEventDispatcherGlib::remainingTimeTime: invalid argument"
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
endif|#
directive|endif
name|Q_D
argument_list|(
name|QEventDispatcherGlib
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|timerSource
operator|->
name|timerList
operator|.
name|timerRemainingTime
argument_list|(
name|timerId
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|interrupt
name|void
name|QEventDispatcherGlib
operator|::
name|interrupt
parameter_list|()
block|{
name|wakeUp
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|wakeUp
name|void
name|QEventDispatcherGlib
operator|::
name|wakeUp
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QEventDispatcherGlib
argument_list|)
expr_stmt|;
name|d
operator|->
name|postEventSource
operator|->
name|serialNumber
operator|.
name|ref
argument_list|()
expr_stmt|;
name|g_main_context_wakeup
argument_list|(
name|d
operator|->
name|mainContext
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|flush
name|void
name|QEventDispatcherGlib
operator|::
name|flush
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|versionSupported
name|bool
name|QEventDispatcherGlib
operator|::
name|versionSupported
parameter_list|()
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|GLIB_MAJOR_VERSION
argument_list|)
operator|||
operator|!
name|defined
argument_list|(
name|GLIB_MINOR_VERSION
argument_list|)
operator|||
operator|!
name|defined
argument_list|(
name|GLIB_MICRO_VERSION
argument_list|)
return|return
literal|false
return|;
else|#
directive|else
return|return
operator|(
operator|(
name|GLIB_MAJOR_VERSION
operator|<<
literal|16
operator|)
operator|+
operator|(
name|GLIB_MINOR_VERSION
operator|<<
literal|8
operator|)
operator|+
name|GLIB_MICRO_VERSION
operator|)
operator|>=
literal|0x020301
return|;
endif|#
directive|endif
block|}
end_function
begin_constructor
DECL|function|QEventDispatcherGlib
name|QEventDispatcherGlib
operator|::
name|QEventDispatcherGlib
parameter_list|(
name|QEventDispatcherGlibPrivate
modifier|&
name|dd
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QAbstractEventDispatcher
argument_list|(
name|dd
argument_list|,
name|parent
argument_list|)
block|{ }
end_constructor
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
