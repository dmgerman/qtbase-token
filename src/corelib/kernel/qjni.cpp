begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qjni_p.h"
end_include
begin_include
include|#
directive|include
file|"qjnihelpers_p.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/qthreadstorage.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qhash.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qstring.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/QThread>
end_include
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|keyBase
specifier|static
specifier|inline
name|QString
name|keyBase
parameter_list|()
block|{
return|return
name|QStringLiteral
argument_list|(
literal|"%1%2%3"
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|threadBaseName
specifier|static
specifier|inline
name|QByteArray
name|threadBaseName
parameter_list|()
block|{
return|return
name|QByteArrayLiteral
argument_list|(
literal|"QtThread-"
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qt_convertJString
specifier|static
name|QString
name|qt_convertJString
parameter_list|(
name|jstring
name|string
parameter_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|int
name|strLength
init|=
name|env
operator|->
name|GetStringLength
argument_list|(
name|string
argument_list|)
decl_stmt|;
name|QString
name|res
argument_list|(
name|strLength
argument_list|,
name|Qt
operator|::
name|Uninitialized
argument_list|)
decl_stmt|;
name|env
operator|->
name|GetStringRegion
argument_list|(
name|string
argument_list|,
literal|0
argument_list|,
name|strLength
argument_list|,
cast|reinterpret_cast
argument_list|<
name|jchar
operator|*
argument_list|>
argument_list|(
name|res
operator|.
name|data
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
end_function
begin_typedef
DECL|typedef|JClassHash
typedef|typedef
name|QHash
argument_list|<
name|QString
argument_list|,
name|jclass
argument_list|>
name|JClassHash
typedef|;
end_typedef
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|JClassHash
argument_list|,
argument|cachedClasses
argument_list|)
end_macro
begin_function
DECL|function|getCachedClass
specifier|static
name|jclass
name|getCachedClass
parameter_list|(
name|JNIEnv
modifier|*
name|env
parameter_list|,
specifier|const
name|char
modifier|*
name|className
parameter_list|)
block|{
name|jclass
name|clazz
init|=
literal|0
decl_stmt|;
name|QString
name|key
init|=
name|QLatin1String
argument_list|(
name|className
argument_list|)
decl_stmt|;
name|QHash
argument_list|<
name|QString
argument_list|,
name|jclass
argument_list|>
operator|::
name|iterator
name|it
init|=
name|cachedClasses
operator|->
name|find
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|==
name|cachedClasses
operator|->
name|end
argument_list|()
condition|)
block|{
name|QJNIObjectPrivate
name|classLoader
init|=
name|QtAndroidPrivate
operator|::
name|classLoader
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|classLoader
operator|.
name|isValid
argument_list|()
condition|)
return|return
literal|0
return|;
name|QJNIObjectPrivate
name|stringName
init|=
name|QJNIObjectPrivate
operator|::
name|fromString
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|className
argument_list|)
operator|.
name|replace
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|,
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QJNIObjectPrivate
name|classObject
init|=
name|classLoader
operator|.
name|callObjectMethod
argument_list|(
literal|"loadClass"
argument_list|,
literal|"(Ljava/lang/String;)Ljava/lang/Class;"
argument_list|,
name|stringName
operator|.
name|object
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|env
operator|->
name|ExceptionCheck
argument_list|()
condition|)
block|{
ifdef|#
directive|ifdef
name|QT_DEBUG
name|env
operator|->
name|ExceptionDescribe
argument_list|()
expr_stmt|;
endif|#
directive|endif
comment|// QT_DEBUG
name|env
operator|->
name|ExceptionClear
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|classObject
operator|.
name|isValid
argument_list|()
condition|)
name|clazz
operator|=
cast|static_cast
argument_list|<
name|jclass
argument_list|>
argument_list|(
name|env
operator|->
name|NewGlobalRef
argument_list|(
name|classObject
operator|.
name|object
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|cachedClasses
operator|->
name|insert
argument_list|(
name|key
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|clazz
operator|=
name|it
operator|.
name|value
argument_list|()
expr_stmt|;
block|}
return|return
name|clazz
return|;
block|}
end_function
begin_typedef
DECL|typedef|JMethodIDHash
typedef|typedef
name|QHash
argument_list|<
name|QString
argument_list|,
name|jmethodID
argument_list|>
name|JMethodIDHash
typedef|;
end_typedef
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|JMethodIDHash
argument_list|,
argument|cachedMethodID
argument_list|)
end_macro
begin_function
DECL|function|getCachedMethodID
specifier|static
name|jmethodID
name|getCachedMethodID
parameter_list|(
name|JNIEnv
modifier|*
name|env
parameter_list|,
name|jclass
name|clazz
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|char
modifier|*
name|sig
parameter_list|,
name|bool
name|isStatic
init|=
literal|false
parameter_list|)
block|{
name|jmethodID
name|id
init|=
literal|0
decl_stmt|;
comment|// TODO: We need to use something else then the ref. from clazz to avoid collisions.
name|QString
name|key
init|=
name|keyBase
argument_list|()
operator|.
name|arg
argument_list|(
name|size_t
argument_list|(
name|clazz
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|QLatin1String
argument_list|(
name|name
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|QLatin1String
argument_list|(
name|sig
argument_list|)
argument_list|)
decl_stmt|;
name|QHash
argument_list|<
name|QString
argument_list|,
name|jmethodID
argument_list|>
operator|::
name|iterator
name|it
init|=
name|cachedMethodID
operator|->
name|find
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|==
name|cachedMethodID
operator|->
name|end
argument_list|()
condition|)
block|{
if|if
condition|(
name|isStatic
condition|)
name|id
operator|=
name|env
operator|->
name|GetStaticMethodID
argument_list|(
name|clazz
argument_list|,
name|name
argument_list|,
name|sig
argument_list|)
expr_stmt|;
else|else
name|id
operator|=
name|env
operator|->
name|GetMethodID
argument_list|(
name|clazz
argument_list|,
name|name
argument_list|,
name|sig
argument_list|)
expr_stmt|;
if|if
condition|(
name|env
operator|->
name|ExceptionCheck
argument_list|()
condition|)
block|{
name|id
operator|=
literal|0
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_DEBUG
name|env
operator|->
name|ExceptionDescribe
argument_list|()
expr_stmt|;
endif|#
directive|endif
comment|// QT_DEBUG
name|env
operator|->
name|ExceptionClear
argument_list|()
expr_stmt|;
block|}
name|cachedMethodID
operator|->
name|insert
argument_list|(
name|key
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|id
operator|=
name|it
operator|.
name|value
argument_list|()
expr_stmt|;
block|}
return|return
name|id
return|;
block|}
end_function
begin_typedef
DECL|typedef|JFieldIDHash
typedef|typedef
name|QHash
argument_list|<
name|QString
argument_list|,
name|jfieldID
argument_list|>
name|JFieldIDHash
typedef|;
end_typedef
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|JFieldIDHash
argument_list|,
argument|cachedFieldID
argument_list|)
end_macro
begin_function
DECL|function|getCachedFieldID
specifier|static
name|jfieldID
name|getCachedFieldID
parameter_list|(
name|JNIEnv
modifier|*
name|env
parameter_list|,
name|jclass
name|clazz
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|char
modifier|*
name|sig
parameter_list|,
name|bool
name|isStatic
init|=
literal|false
parameter_list|)
block|{
name|jfieldID
name|id
init|=
literal|0
decl_stmt|;
name|QString
name|key
init|=
name|keyBase
argument_list|()
operator|.
name|arg
argument_list|(
name|size_t
argument_list|(
name|clazz
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|QLatin1String
argument_list|(
name|name
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|QLatin1String
argument_list|(
name|sig
argument_list|)
argument_list|)
decl_stmt|;
name|QHash
argument_list|<
name|QString
argument_list|,
name|jfieldID
argument_list|>
operator|::
name|iterator
name|it
init|=
name|cachedFieldID
operator|->
name|find
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|==
name|cachedFieldID
operator|->
name|end
argument_list|()
condition|)
block|{
if|if
condition|(
name|isStatic
condition|)
name|id
operator|=
name|env
operator|->
name|GetStaticFieldID
argument_list|(
name|clazz
argument_list|,
name|name
argument_list|,
name|sig
argument_list|)
expr_stmt|;
else|else
name|id
operator|=
name|env
operator|->
name|GetFieldID
argument_list|(
name|clazz
argument_list|,
name|name
argument_list|,
name|sig
argument_list|)
expr_stmt|;
if|if
condition|(
name|env
operator|->
name|ExceptionCheck
argument_list|()
condition|)
block|{
name|id
operator|=
literal|0
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_DEBUG
name|env
operator|->
name|ExceptionDescribe
argument_list|()
expr_stmt|;
endif|#
directive|endif
comment|// QT_DEBUG
name|env
operator|->
name|ExceptionClear
argument_list|()
expr_stmt|;
block|}
name|cachedFieldID
operator|->
name|insert
argument_list|(
name|key
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|id
operator|=
name|it
operator|.
name|value
argument_list|()
expr_stmt|;
block|}
return|return
name|id
return|;
block|}
end_function
begin_class
DECL|class|QJNIEnvironmentPrivateTLS
class|class
name|QJNIEnvironmentPrivateTLS
block|{
public|public:
DECL|function|~QJNIEnvironmentPrivateTLS
specifier|inline
name|~
name|QJNIEnvironmentPrivateTLS
parameter_list|()
block|{
name|QtAndroidPrivate
operator|::
name|javaVM
argument_list|()
operator|->
name|DetachCurrentThread
argument_list|()
expr_stmt|;
block|}
block|}
class|;
end_class
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|QThreadStorage<QJNIEnvironmentPrivateTLS *>
argument_list|,
argument|jniEnvTLS
argument_list|)
end_macro
begin_constructor
DECL|function|QJNIEnvironmentPrivate
name|QJNIEnvironmentPrivate
operator|::
name|QJNIEnvironmentPrivate
parameter_list|()
member_init_list|:
name|jniEnv
argument_list|(
literal|0
argument_list|)
block|{
name|JavaVM
modifier|*
name|vm
init|=
name|QtAndroidPrivate
operator|::
name|javaVM
argument_list|()
decl_stmt|;
if|if
condition|(
name|vm
operator|->
name|GetEnv
argument_list|(
operator|(
name|void
operator|*
operator|*
operator|)
operator|&
name|jniEnv
argument_list|,
name|JNI_VERSION_1_6
argument_list|)
operator|==
name|JNI_EDETACHED
condition|)
block|{
specifier|const
name|qulonglong
name|id
init|=
cast|reinterpret_cast
argument_list|<
name|qulonglong
argument_list|>
argument_list|(
name|QThread
operator|::
name|currentThreadId
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|QByteArray
name|threadName
init|=
name|threadBaseName
argument_list|()
operator|+
name|QByteArray
operator|::
name|number
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|JavaVMAttachArgs
name|args
init|=
block|{
name|JNI_VERSION_1_6
block|,
name|threadName
block|,
name|Q_NULLPTR
block|}
decl_stmt|;
if|if
condition|(
name|vm
operator|->
name|AttachCurrentThread
argument_list|(
operator|&
name|jniEnv
argument_list|,
operator|&
name|args
argument_list|)
operator|!=
name|JNI_OK
condition|)
return|return;
block|}
if|if
condition|(
operator|!
name|jniEnv
condition|)
return|return;
if|if
condition|(
operator|!
name|jniEnvTLS
operator|->
name|hasLocalData
argument_list|()
condition|)
name|jniEnvTLS
operator|->
name|setLocalData
argument_list|(
operator|new
name|QJNIEnvironmentPrivateTLS
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|operator ->
name|JNIEnv
modifier|*
name|QJNIEnvironmentPrivate
operator|::
name|operator
name|->
parameter_list|()
block|{
return|return
name|jniEnv
return|;
block|}
end_function
begin_function
DECL|function|operator JNIEnv*
name|QJNIEnvironmentPrivate
operator|::
name|operator
name|JNIEnv*
parameter_list|()
specifier|const
block|{
return|return
name|jniEnv
return|;
block|}
end_function
begin_destructor
DECL|function|~QJNIEnvironmentPrivate
name|QJNIEnvironmentPrivate
operator|::
name|~
name|QJNIEnvironmentPrivate
parameter_list|()
block|{ }
end_destructor
begin_constructor
DECL|function|QJNIObjectData
name|QJNIObjectData
operator|::
name|QJNIObjectData
parameter_list|()
member_init_list|:
name|m_jobject
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_jclass
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_own_jclass
argument_list|(
literal|true
argument_list|)
block|{  }
end_constructor
begin_destructor
DECL|function|~QJNIObjectData
name|QJNIObjectData
operator|::
name|~
name|QJNIObjectData
parameter_list|()
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
if|if
condition|(
name|m_jobject
condition|)
name|env
operator|->
name|DeleteGlobalRef
argument_list|(
name|m_jobject
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_jclass
operator|&&
name|m_own_jclass
condition|)
name|env
operator|->
name|DeleteGlobalRef
argument_list|(
name|m_jclass
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_constructor
DECL|function|QJNIObjectPrivate
name|QJNIObjectPrivate
operator|::
name|QJNIObjectPrivate
parameter_list|()
member_init_list|:
name|d
argument_list|(
operator|new
name|QJNIObjectData
argument_list|()
argument_list|)
block|{  }
end_constructor
begin_constructor
DECL|function|QJNIObjectPrivate
name|QJNIObjectPrivate
operator|::
name|QJNIObjectPrivate
parameter_list|(
specifier|const
name|char
modifier|*
name|className
parameter_list|)
member_init_list|:
name|d
argument_list|(
operator|new
name|QJNIObjectData
argument_list|()
argument_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|d
operator|->
name|m_jclass
operator|=
name|getCachedClass
argument_list|(
name|env
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|d
operator|->
name|m_own_jclass
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|m_jclass
condition|)
block|{
comment|// get default constructor
name|jmethodID
name|constructorId
init|=
name|getCachedMethodID
argument_list|(
name|env
argument_list|,
name|d
operator|->
name|m_jclass
argument_list|,
literal|"<init>"
argument_list|,
literal|"()V"
argument_list|)
decl_stmt|;
if|if
condition|(
name|constructorId
condition|)
block|{
name|jobject
name|obj
init|=
name|env
operator|->
name|NewObject
argument_list|(
name|d
operator|->
name|m_jclass
argument_list|,
name|constructorId
argument_list|)
decl_stmt|;
if|if
condition|(
name|obj
condition|)
block|{
name|d
operator|->
name|m_jobject
operator|=
name|env
operator|->
name|NewGlobalRef
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|env
operator|->
name|DeleteLocalRef
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_constructor
begin_constructor
DECL|function|QJNIObjectPrivate
name|QJNIObjectPrivate
operator|::
name|QJNIObjectPrivate
parameter_list|(
specifier|const
name|char
modifier|*
name|className
parameter_list|,
specifier|const
name|char
modifier|*
name|sig
parameter_list|,
modifier|...
parameter_list|)
member_init_list|:
name|d
argument_list|(
operator|new
name|QJNIObjectData
argument_list|()
argument_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|d
operator|->
name|m_jclass
operator|=
name|getCachedClass
argument_list|(
name|env
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|d
operator|->
name|m_own_jclass
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|m_jclass
condition|)
block|{
name|jmethodID
name|constructorId
init|=
name|getCachedMethodID
argument_list|(
name|env
argument_list|,
name|d
operator|->
name|m_jclass
argument_list|,
literal|"<init>"
argument_list|,
name|sig
argument_list|)
decl_stmt|;
if|if
condition|(
name|constructorId
condition|)
block|{
name|va_list
name|args
decl_stmt|;
name|va_start
argument_list|(
name|args
argument_list|,
name|sig
argument_list|)
expr_stmt|;
name|jobject
name|obj
init|=
name|env
operator|->
name|NewObjectV
argument_list|(
name|d
operator|->
name|m_jclass
argument_list|,
name|constructorId
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|va_end
argument_list|(
name|args
argument_list|)
expr_stmt|;
if|if
condition|(
name|obj
condition|)
block|{
name|d
operator|->
name|m_jobject
operator|=
name|env
operator|->
name|NewGlobalRef
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|env
operator|->
name|DeleteLocalRef
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_constructor
begin_constructor
DECL|function|QJNIObjectPrivate
name|QJNIObjectPrivate
operator|::
name|QJNIObjectPrivate
parameter_list|(
specifier|const
name|char
modifier|*
name|className
parameter_list|,
specifier|const
name|char
modifier|*
name|sig
parameter_list|,
name|va_list
name|args
parameter_list|)
member_init_list|:
name|d
argument_list|(
operator|new
name|QJNIObjectData
argument_list|()
argument_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|d
operator|->
name|m_jclass
operator|=
name|getCachedClass
argument_list|(
name|env
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|d
operator|->
name|m_own_jclass
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|m_jclass
condition|)
block|{
name|jmethodID
name|constructorId
init|=
name|getCachedMethodID
argument_list|(
name|env
argument_list|,
name|d
operator|->
name|m_jclass
argument_list|,
literal|"<init>"
argument_list|,
name|sig
argument_list|)
decl_stmt|;
if|if
condition|(
name|constructorId
condition|)
block|{
name|jobject
name|obj
init|=
name|env
operator|->
name|NewObjectV
argument_list|(
name|d
operator|->
name|m_jclass
argument_list|,
name|constructorId
argument_list|,
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|obj
condition|)
block|{
name|d
operator|->
name|m_jobject
operator|=
name|env
operator|->
name|NewGlobalRef
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|env
operator|->
name|DeleteLocalRef
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_constructor
begin_constructor
DECL|function|QJNIObjectPrivate
name|QJNIObjectPrivate
operator|::
name|QJNIObjectPrivate
parameter_list|(
name|jclass
name|clazz
parameter_list|)
member_init_list|:
name|d
argument_list|(
operator|new
name|QJNIObjectData
argument_list|()
argument_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|d
operator|->
name|m_jclass
operator|=
cast|static_cast
argument_list|<
name|jclass
argument_list|>
argument_list|(
name|env
operator|->
name|NewGlobalRef
argument_list|(
name|clazz
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|m_jclass
condition|)
block|{
comment|// get default constructor
name|jmethodID
name|constructorId
init|=
name|getCachedMethodID
argument_list|(
name|env
argument_list|,
name|d
operator|->
name|m_jclass
argument_list|,
literal|"<init>"
argument_list|,
literal|"()V"
argument_list|)
decl_stmt|;
if|if
condition|(
name|constructorId
condition|)
block|{
name|jobject
name|obj
init|=
name|env
operator|->
name|NewObject
argument_list|(
name|d
operator|->
name|m_jclass
argument_list|,
name|constructorId
argument_list|)
decl_stmt|;
if|if
condition|(
name|obj
condition|)
block|{
name|d
operator|->
name|m_jobject
operator|=
name|env
operator|->
name|NewGlobalRef
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|env
operator|->
name|DeleteLocalRef
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_constructor
begin_constructor
DECL|function|QJNIObjectPrivate
name|QJNIObjectPrivate
operator|::
name|QJNIObjectPrivate
parameter_list|(
name|jclass
name|clazz
parameter_list|,
specifier|const
name|char
modifier|*
name|sig
parameter_list|,
modifier|...
parameter_list|)
member_init_list|:
name|d
argument_list|(
operator|new
name|QJNIObjectData
argument_list|()
argument_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
if|if
condition|(
name|clazz
condition|)
block|{
name|d
operator|->
name|m_jclass
operator|=
cast|static_cast
argument_list|<
name|jclass
argument_list|>
argument_list|(
name|env
operator|->
name|NewGlobalRef
argument_list|(
name|clazz
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|m_jclass
condition|)
block|{
name|jmethodID
name|constructorId
init|=
name|getCachedMethodID
argument_list|(
name|env
argument_list|,
name|d
operator|->
name|m_jclass
argument_list|,
literal|"<init>"
argument_list|,
name|sig
argument_list|)
decl_stmt|;
if|if
condition|(
name|constructorId
condition|)
block|{
name|va_list
name|args
decl_stmt|;
name|va_start
argument_list|(
name|args
argument_list|,
name|sig
argument_list|)
expr_stmt|;
name|jobject
name|obj
init|=
name|env
operator|->
name|NewObjectV
argument_list|(
name|d
operator|->
name|m_jclass
argument_list|,
name|constructorId
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|va_end
argument_list|(
name|args
argument_list|)
expr_stmt|;
if|if
condition|(
name|obj
condition|)
block|{
name|d
operator|->
name|m_jobject
operator|=
name|env
operator|->
name|NewGlobalRef
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|env
operator|->
name|DeleteLocalRef
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_constructor
begin_constructor
DECL|function|QJNIObjectPrivate
name|QJNIObjectPrivate
operator|::
name|QJNIObjectPrivate
parameter_list|(
name|jclass
name|clazz
parameter_list|,
specifier|const
name|char
modifier|*
name|sig
parameter_list|,
name|va_list
name|args
parameter_list|)
member_init_list|:
name|d
argument_list|(
operator|new
name|QJNIObjectData
argument_list|()
argument_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
if|if
condition|(
name|clazz
condition|)
block|{
name|d
operator|->
name|m_jclass
operator|=
cast|static_cast
argument_list|<
name|jclass
argument_list|>
argument_list|(
name|env
operator|->
name|NewGlobalRef
argument_list|(
name|clazz
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|m_jclass
condition|)
block|{
name|jmethodID
name|constructorId
init|=
name|getCachedMethodID
argument_list|(
name|env
argument_list|,
name|d
operator|->
name|m_jclass
argument_list|,
literal|"<init>"
argument_list|,
name|sig
argument_list|)
decl_stmt|;
if|if
condition|(
name|constructorId
condition|)
block|{
name|jobject
name|obj
init|=
name|env
operator|->
name|NewObjectV
argument_list|(
name|d
operator|->
name|m_jclass
argument_list|,
name|constructorId
argument_list|,
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|obj
condition|)
block|{
name|d
operator|->
name|m_jobject
operator|=
name|env
operator|->
name|NewGlobalRef
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|env
operator|->
name|DeleteLocalRef
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_constructor
begin_constructor
DECL|function|QJNIObjectPrivate
name|QJNIObjectPrivate
operator|::
name|QJNIObjectPrivate
parameter_list|(
name|jobject
name|obj
parameter_list|)
member_init_list|:
name|d
argument_list|(
operator|new
name|QJNIObjectData
argument_list|()
argument_list|)
block|{
if|if
condition|(
operator|!
name|obj
condition|)
return|return;
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|d
operator|->
name|m_jobject
operator|=
name|env
operator|->
name|NewGlobalRef
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|jclass
name|objectClass
init|=
name|env
operator|->
name|GetObjectClass
argument_list|(
name|d
operator|->
name|m_jobject
argument_list|)
decl_stmt|;
name|d
operator|->
name|m_jclass
operator|=
cast|static_cast
argument_list|<
name|jclass
argument_list|>
argument_list|(
name|env
operator|->
name|NewGlobalRef
argument_list|(
name|objectClass
argument_list|)
argument_list|)
expr_stmt|;
name|env
operator|->
name|DeleteLocalRef
argument_list|(
name|objectClass
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
template|template
parameter_list|<>
DECL|function|callMethod
name|void
name|QJNIObjectPrivate
operator|::
name|callMethod
argument_list|<
name|void
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|methodName
parameter_list|,
specifier|const
name|char
modifier|*
name|sig
parameter_list|,
name|va_list
name|args
parameter_list|)
specifier|const
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jmethodID
name|id
init|=
name|getCachedMethodID
argument_list|(
name|env
argument_list|,
name|d
operator|->
name|m_jclass
argument_list|,
name|methodName
argument_list|,
name|sig
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
block|{
name|env
operator|->
name|CallVoidMethodV
argument_list|(
name|d
operator|->
name|m_jobject
argument_list|,
name|id
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callMethod
name|void
name|QJNIObjectPrivate
operator|::
name|callMethod
argument_list|<
name|void
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|methodName
parameter_list|,
specifier|const
name|char
modifier|*
name|sig
parameter_list|,
modifier|...
parameter_list|)
specifier|const
block|{
name|va_list
name|args
decl_stmt|;
name|va_start
argument_list|(
name|args
argument_list|,
name|sig
argument_list|)
expr_stmt|;
name|callMethod
argument_list|<
name|void
argument_list|>
argument_list|(
name|methodName
argument_list|,
name|sig
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|va_end
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callMethod
name|jboolean
name|QJNIObjectPrivate
operator|::
name|callMethod
argument_list|<
name|jboolean
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|methodName
parameter_list|,
specifier|const
name|char
modifier|*
name|sig
parameter_list|,
name|va_list
name|args
parameter_list|)
specifier|const
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jboolean
name|res
init|=
literal|0
decl_stmt|;
name|jmethodID
name|id
init|=
name|getCachedMethodID
argument_list|(
name|env
argument_list|,
name|d
operator|->
name|m_jclass
argument_list|,
name|methodName
argument_list|,
name|sig
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
block|{
name|res
operator|=
name|env
operator|->
name|CallBooleanMethodV
argument_list|(
name|d
operator|->
name|m_jobject
argument_list|,
name|id
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callMethod
name|jboolean
name|QJNIObjectPrivate
operator|::
name|callMethod
argument_list|<
name|jboolean
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|methodName
parameter_list|,
specifier|const
name|char
modifier|*
name|sig
parameter_list|,
modifier|...
parameter_list|)
specifier|const
block|{
name|va_list
name|args
decl_stmt|;
name|va_start
argument_list|(
name|args
argument_list|,
name|sig
argument_list|)
expr_stmt|;
name|jboolean
name|res
init|=
name|callMethod
argument_list|<
name|jboolean
argument_list|>
argument_list|(
name|methodName
argument_list|,
name|sig
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|va_end
argument_list|(
name|args
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callMethod
name|jbyte
name|QJNIObjectPrivate
operator|::
name|callMethod
argument_list|<
name|jbyte
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|methodName
parameter_list|,
specifier|const
name|char
modifier|*
name|sig
parameter_list|,
name|va_list
name|args
parameter_list|)
specifier|const
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jbyte
name|res
init|=
literal|0
decl_stmt|;
name|jmethodID
name|id
init|=
name|getCachedMethodID
argument_list|(
name|env
argument_list|,
name|d
operator|->
name|m_jclass
argument_list|,
name|methodName
argument_list|,
name|sig
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
block|{
name|res
operator|=
name|env
operator|->
name|CallByteMethodV
argument_list|(
name|d
operator|->
name|m_jobject
argument_list|,
name|id
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callMethod
name|jbyte
name|QJNIObjectPrivate
operator|::
name|callMethod
argument_list|<
name|jbyte
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|methodName
parameter_list|,
specifier|const
name|char
modifier|*
name|sig
parameter_list|,
modifier|...
parameter_list|)
specifier|const
block|{
name|va_list
name|args
decl_stmt|;
name|va_start
argument_list|(
name|args
argument_list|,
name|sig
argument_list|)
expr_stmt|;
name|jbyte
name|res
init|=
name|callMethod
argument_list|<
name|jbyte
argument_list|>
argument_list|(
name|methodName
argument_list|,
name|sig
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|va_end
argument_list|(
name|args
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callMethod
name|jchar
name|QJNIObjectPrivate
operator|::
name|callMethod
argument_list|<
name|jchar
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|methodName
parameter_list|,
specifier|const
name|char
modifier|*
name|sig
parameter_list|,
name|va_list
name|args
parameter_list|)
specifier|const
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jchar
name|res
init|=
literal|0
decl_stmt|;
name|jmethodID
name|id
init|=
name|getCachedMethodID
argument_list|(
name|env
argument_list|,
name|d
operator|->
name|m_jclass
argument_list|,
name|methodName
argument_list|,
name|sig
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
block|{
name|res
operator|=
name|env
operator|->
name|CallCharMethodV
argument_list|(
name|d
operator|->
name|m_jobject
argument_list|,
name|id
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callMethod
name|jchar
name|QJNIObjectPrivate
operator|::
name|callMethod
argument_list|<
name|jchar
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|methodName
parameter_list|,
specifier|const
name|char
modifier|*
name|sig
parameter_list|,
modifier|...
parameter_list|)
specifier|const
block|{
name|va_list
name|args
decl_stmt|;
name|va_start
argument_list|(
name|args
argument_list|,
name|sig
argument_list|)
expr_stmt|;
name|jchar
name|res
init|=
name|callMethod
argument_list|<
name|jchar
argument_list|>
argument_list|(
name|methodName
argument_list|,
name|sig
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|va_end
argument_list|(
name|args
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callMethod
name|jshort
name|QJNIObjectPrivate
operator|::
name|callMethod
argument_list|<
name|jshort
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|methodName
parameter_list|,
specifier|const
name|char
modifier|*
name|sig
parameter_list|,
name|va_list
name|args
parameter_list|)
specifier|const
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jshort
name|res
init|=
literal|0
decl_stmt|;
name|jmethodID
name|id
init|=
name|getCachedMethodID
argument_list|(
name|env
argument_list|,
name|d
operator|->
name|m_jclass
argument_list|,
name|methodName
argument_list|,
name|sig
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
block|{
name|res
operator|=
name|env
operator|->
name|CallShortMethodV
argument_list|(
name|d
operator|->
name|m_jobject
argument_list|,
name|id
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callMethod
name|jshort
name|QJNIObjectPrivate
operator|::
name|callMethod
argument_list|<
name|jshort
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|methodName
parameter_list|,
specifier|const
name|char
modifier|*
name|sig
parameter_list|,
modifier|...
parameter_list|)
specifier|const
block|{
name|va_list
name|args
decl_stmt|;
name|va_start
argument_list|(
name|args
argument_list|,
name|sig
argument_list|)
expr_stmt|;
name|jshort
name|res
init|=
name|callMethod
argument_list|<
name|jshort
argument_list|>
argument_list|(
name|methodName
argument_list|,
name|sig
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|va_end
argument_list|(
name|args
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callMethod
name|jint
name|QJNIObjectPrivate
operator|::
name|callMethod
argument_list|<
name|jint
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|methodName
parameter_list|,
specifier|const
name|char
modifier|*
name|sig
parameter_list|,
name|va_list
name|args
parameter_list|)
specifier|const
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jint
name|res
init|=
literal|0
decl_stmt|;
name|jmethodID
name|id
init|=
name|getCachedMethodID
argument_list|(
name|env
argument_list|,
name|d
operator|->
name|m_jclass
argument_list|,
name|methodName
argument_list|,
name|sig
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
block|{
name|res
operator|=
name|env
operator|->
name|CallIntMethodV
argument_list|(
name|d
operator|->
name|m_jobject
argument_list|,
name|id
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callMethod
name|jint
name|QJNIObjectPrivate
operator|::
name|callMethod
argument_list|<
name|jint
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|methodName
parameter_list|,
specifier|const
name|char
modifier|*
name|sig
parameter_list|,
modifier|...
parameter_list|)
specifier|const
block|{
name|va_list
name|args
decl_stmt|;
name|va_start
argument_list|(
name|args
argument_list|,
name|sig
argument_list|)
expr_stmt|;
name|jint
name|res
init|=
name|callMethod
argument_list|<
name|jint
argument_list|>
argument_list|(
name|methodName
argument_list|,
name|sig
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|va_end
argument_list|(
name|args
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callMethod
name|jlong
name|QJNIObjectPrivate
operator|::
name|callMethod
argument_list|<
name|jlong
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|methodName
parameter_list|,
specifier|const
name|char
modifier|*
name|sig
parameter_list|,
name|va_list
name|args
parameter_list|)
specifier|const
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jlong
name|res
init|=
literal|0
decl_stmt|;
name|jmethodID
name|id
init|=
name|getCachedMethodID
argument_list|(
name|env
argument_list|,
name|d
operator|->
name|m_jclass
argument_list|,
name|methodName
argument_list|,
name|sig
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
block|{
name|res
operator|=
name|env
operator|->
name|CallLongMethodV
argument_list|(
name|d
operator|->
name|m_jobject
argument_list|,
name|id
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callMethod
name|jlong
name|QJNIObjectPrivate
operator|::
name|callMethod
argument_list|<
name|jlong
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|methodName
parameter_list|,
specifier|const
name|char
modifier|*
name|sig
parameter_list|,
modifier|...
parameter_list|)
specifier|const
block|{
name|va_list
name|args
decl_stmt|;
name|va_start
argument_list|(
name|args
argument_list|,
name|sig
argument_list|)
expr_stmt|;
name|jlong
name|res
init|=
name|callMethod
argument_list|<
name|jlong
argument_list|>
argument_list|(
name|methodName
argument_list|,
name|sig
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|va_end
argument_list|(
name|args
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callMethod
name|jfloat
name|QJNIObjectPrivate
operator|::
name|callMethod
argument_list|<
name|jfloat
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|methodName
parameter_list|,
specifier|const
name|char
modifier|*
name|sig
parameter_list|,
name|va_list
name|args
parameter_list|)
specifier|const
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jfloat
name|res
init|=
literal|0.f
decl_stmt|;
name|jmethodID
name|id
init|=
name|getCachedMethodID
argument_list|(
name|env
argument_list|,
name|d
operator|->
name|m_jclass
argument_list|,
name|methodName
argument_list|,
name|sig
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
block|{
name|res
operator|=
name|env
operator|->
name|CallFloatMethodV
argument_list|(
name|d
operator|->
name|m_jobject
argument_list|,
name|id
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callMethod
name|jfloat
name|QJNIObjectPrivate
operator|::
name|callMethod
argument_list|<
name|jfloat
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|methodName
parameter_list|,
specifier|const
name|char
modifier|*
name|sig
parameter_list|,
modifier|...
parameter_list|)
specifier|const
block|{
name|va_list
name|args
decl_stmt|;
name|va_start
argument_list|(
name|args
argument_list|,
name|sig
argument_list|)
expr_stmt|;
name|jfloat
name|res
init|=
name|callMethod
argument_list|<
name|jfloat
argument_list|>
argument_list|(
name|methodName
argument_list|,
name|sig
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|va_end
argument_list|(
name|args
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callMethod
name|jdouble
name|QJNIObjectPrivate
operator|::
name|callMethod
argument_list|<
name|jdouble
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|methodName
parameter_list|,
specifier|const
name|char
modifier|*
name|sig
parameter_list|,
name|va_list
name|args
parameter_list|)
specifier|const
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jdouble
name|res
init|=
literal|0.
decl_stmt|;
name|jmethodID
name|id
init|=
name|getCachedMethodID
argument_list|(
name|env
argument_list|,
name|d
operator|->
name|m_jclass
argument_list|,
name|methodName
argument_list|,
name|sig
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
block|{
name|res
operator|=
name|env
operator|->
name|CallDoubleMethodV
argument_list|(
name|d
operator|->
name|m_jobject
argument_list|,
name|id
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callMethod
name|jdouble
name|QJNIObjectPrivate
operator|::
name|callMethod
argument_list|<
name|jdouble
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|methodName
parameter_list|,
specifier|const
name|char
modifier|*
name|sig
parameter_list|,
modifier|...
parameter_list|)
specifier|const
block|{
name|va_list
name|args
decl_stmt|;
name|va_start
argument_list|(
name|args
argument_list|,
name|sig
argument_list|)
expr_stmt|;
name|jdouble
name|res
init|=
name|callMethod
argument_list|<
name|jdouble
argument_list|>
argument_list|(
name|methodName
argument_list|,
name|sig
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|va_end
argument_list|(
name|args
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callMethod
name|void
name|QJNIObjectPrivate
operator|::
name|callMethod
argument_list|<
name|void
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|methodName
parameter_list|)
specifier|const
block|{
name|callMethod
argument_list|<
name|void
argument_list|>
argument_list|(
name|methodName
argument_list|,
literal|"()V"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callMethod
name|jboolean
name|QJNIObjectPrivate
operator|::
name|callMethod
argument_list|<
name|jboolean
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|methodName
parameter_list|)
specifier|const
block|{
return|return
name|callMethod
argument_list|<
name|jboolean
argument_list|>
argument_list|(
name|methodName
argument_list|,
literal|"()Z"
argument_list|)
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callMethod
name|jbyte
name|QJNIObjectPrivate
operator|::
name|callMethod
argument_list|<
name|jbyte
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|methodName
parameter_list|)
specifier|const
block|{
return|return
name|callMethod
argument_list|<
name|jbyte
argument_list|>
argument_list|(
name|methodName
argument_list|,
literal|"()B"
argument_list|)
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callMethod
name|jchar
name|QJNIObjectPrivate
operator|::
name|callMethod
argument_list|<
name|jchar
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|methodName
parameter_list|)
specifier|const
block|{
return|return
name|callMethod
argument_list|<
name|jchar
argument_list|>
argument_list|(
name|methodName
argument_list|,
literal|"()C"
argument_list|)
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callMethod
name|jshort
name|QJNIObjectPrivate
operator|::
name|callMethod
argument_list|<
name|jshort
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|methodName
parameter_list|)
specifier|const
block|{
return|return
name|callMethod
argument_list|<
name|jshort
argument_list|>
argument_list|(
name|methodName
argument_list|,
literal|"()S"
argument_list|)
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callMethod
name|jint
name|QJNIObjectPrivate
operator|::
name|callMethod
argument_list|<
name|jint
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|methodName
parameter_list|)
specifier|const
block|{
return|return
name|callMethod
argument_list|<
name|jint
argument_list|>
argument_list|(
name|methodName
argument_list|,
literal|"()I"
argument_list|)
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callMethod
name|jlong
name|QJNIObjectPrivate
operator|::
name|callMethod
argument_list|<
name|jlong
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|methodName
parameter_list|)
specifier|const
block|{
return|return
name|callMethod
argument_list|<
name|jlong
argument_list|>
argument_list|(
name|methodName
argument_list|,
literal|"()J"
argument_list|)
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callMethod
name|jfloat
name|QJNIObjectPrivate
operator|::
name|callMethod
argument_list|<
name|jfloat
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|methodName
parameter_list|)
specifier|const
block|{
return|return
name|callMethod
argument_list|<
name|jfloat
argument_list|>
argument_list|(
name|methodName
argument_list|,
literal|"()F"
argument_list|)
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callMethod
name|jdouble
name|QJNIObjectPrivate
operator|::
name|callMethod
argument_list|<
name|jdouble
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|methodName
parameter_list|)
specifier|const
block|{
return|return
name|callMethod
argument_list|<
name|jdouble
argument_list|>
argument_list|(
name|methodName
argument_list|,
literal|"()D"
argument_list|)
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callStaticMethod
name|void
name|QJNIObjectPrivate
operator|::
name|callStaticMethod
argument_list|<
name|void
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|className
parameter_list|,
specifier|const
name|char
modifier|*
name|methodName
parameter_list|,
specifier|const
name|char
modifier|*
name|sig
parameter_list|,
name|va_list
name|args
parameter_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jclass
name|clazz
init|=
name|getCachedClass
argument_list|(
name|env
argument_list|,
name|className
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
condition|)
block|{
name|jmethodID
name|id
init|=
name|getCachedMethodID
argument_list|(
name|env
argument_list|,
name|clazz
argument_list|,
name|methodName
argument_list|,
name|sig
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
block|{
name|env
operator|->
name|CallStaticVoidMethodV
argument_list|(
name|clazz
argument_list|,
name|id
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callStaticMethod
name|void
name|QJNIObjectPrivate
operator|::
name|callStaticMethod
argument_list|<
name|void
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|className
parameter_list|,
specifier|const
name|char
modifier|*
name|methodName
parameter_list|,
specifier|const
name|char
modifier|*
name|sig
parameter_list|,
modifier|...
parameter_list|)
block|{
name|va_list
name|args
decl_stmt|;
name|va_start
argument_list|(
name|args
argument_list|,
name|sig
argument_list|)
expr_stmt|;
name|callStaticMethod
argument_list|<
name|void
argument_list|>
argument_list|(
name|className
argument_list|,
name|methodName
argument_list|,
name|sig
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|va_end
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callStaticMethod
name|void
name|QJNIObjectPrivate
operator|::
name|callStaticMethod
argument_list|<
name|void
argument_list|>
parameter_list|(
name|jclass
name|clazz
parameter_list|,
specifier|const
name|char
modifier|*
name|methodName
parameter_list|,
specifier|const
name|char
modifier|*
name|sig
parameter_list|,
name|va_list
name|args
parameter_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jmethodID
name|id
init|=
name|getCachedMethodID
argument_list|(
name|env
argument_list|,
name|clazz
argument_list|,
name|methodName
argument_list|,
name|sig
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
block|{
name|env
operator|->
name|CallStaticVoidMethodV
argument_list|(
name|clazz
argument_list|,
name|id
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callStaticMethod
name|void
name|QJNIObjectPrivate
operator|::
name|callStaticMethod
argument_list|<
name|void
argument_list|>
parameter_list|(
name|jclass
name|clazz
parameter_list|,
specifier|const
name|char
modifier|*
name|methodName
parameter_list|,
specifier|const
name|char
modifier|*
name|sig
parameter_list|,
modifier|...
parameter_list|)
block|{
name|va_list
name|args
decl_stmt|;
name|va_start
argument_list|(
name|args
argument_list|,
name|sig
argument_list|)
expr_stmt|;
name|callStaticMethod
argument_list|<
name|void
argument_list|>
argument_list|(
name|clazz
argument_list|,
name|methodName
argument_list|,
name|sig
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|va_end
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callStaticMethod
name|jboolean
name|QJNIObjectPrivate
operator|::
name|callStaticMethod
argument_list|<
name|jboolean
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|className
parameter_list|,
specifier|const
name|char
modifier|*
name|methodName
parameter_list|,
specifier|const
name|char
modifier|*
name|sig
parameter_list|,
name|va_list
name|args
parameter_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jboolean
name|res
init|=
literal|0
decl_stmt|;
name|jclass
name|clazz
init|=
name|getCachedClass
argument_list|(
name|env
argument_list|,
name|className
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
condition|)
block|{
name|jmethodID
name|id
init|=
name|getCachedMethodID
argument_list|(
name|env
argument_list|,
name|clazz
argument_list|,
name|methodName
argument_list|,
name|sig
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
block|{
name|res
operator|=
name|env
operator|->
name|CallStaticBooleanMethodV
argument_list|(
name|clazz
argument_list|,
name|id
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|res
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callStaticMethod
name|jboolean
name|QJNIObjectPrivate
operator|::
name|callStaticMethod
argument_list|<
name|jboolean
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|className
parameter_list|,
specifier|const
name|char
modifier|*
name|methodName
parameter_list|,
specifier|const
name|char
modifier|*
name|sig
parameter_list|,
modifier|...
parameter_list|)
block|{
name|va_list
name|args
decl_stmt|;
name|va_start
argument_list|(
name|args
argument_list|,
name|sig
argument_list|)
expr_stmt|;
name|jboolean
name|res
init|=
name|callStaticMethod
argument_list|<
name|jboolean
argument_list|>
argument_list|(
name|className
argument_list|,
name|methodName
argument_list|,
name|sig
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|va_end
argument_list|(
name|args
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callStaticMethod
name|jboolean
name|QJNIObjectPrivate
operator|::
name|callStaticMethod
argument_list|<
name|jboolean
argument_list|>
parameter_list|(
name|jclass
name|clazz
parameter_list|,
specifier|const
name|char
modifier|*
name|methodName
parameter_list|,
specifier|const
name|char
modifier|*
name|sig
parameter_list|,
name|va_list
name|args
parameter_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jboolean
name|res
init|=
literal|0
decl_stmt|;
name|jmethodID
name|id
init|=
name|getCachedMethodID
argument_list|(
name|env
argument_list|,
name|clazz
argument_list|,
name|methodName
argument_list|,
name|sig
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
block|{
name|res
operator|=
name|env
operator|->
name|CallStaticBooleanMethodV
argument_list|(
name|clazz
argument_list|,
name|id
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callStaticMethod
name|jboolean
name|QJNIObjectPrivate
operator|::
name|callStaticMethod
argument_list|<
name|jboolean
argument_list|>
parameter_list|(
name|jclass
name|clazz
parameter_list|,
specifier|const
name|char
modifier|*
name|methodName
parameter_list|,
specifier|const
name|char
modifier|*
name|sig
parameter_list|,
modifier|...
parameter_list|)
block|{
name|va_list
name|args
decl_stmt|;
name|va_start
argument_list|(
name|args
argument_list|,
name|sig
argument_list|)
expr_stmt|;
name|jboolean
name|res
init|=
name|callStaticMethod
argument_list|<
name|jboolean
argument_list|>
argument_list|(
name|clazz
argument_list|,
name|methodName
argument_list|,
name|sig
argument_list|)
decl_stmt|;
name|va_end
argument_list|(
name|args
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callStaticMethod
name|jbyte
name|QJNIObjectPrivate
operator|::
name|callStaticMethod
argument_list|<
name|jbyte
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|className
parameter_list|,
specifier|const
name|char
modifier|*
name|methodName
parameter_list|,
specifier|const
name|char
modifier|*
name|sig
parameter_list|,
name|va_list
name|args
parameter_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jbyte
name|res
init|=
literal|0
decl_stmt|;
name|jclass
name|clazz
init|=
name|getCachedClass
argument_list|(
name|env
argument_list|,
name|className
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
condition|)
block|{
name|jmethodID
name|id
init|=
name|getCachedMethodID
argument_list|(
name|env
argument_list|,
name|clazz
argument_list|,
name|methodName
argument_list|,
name|sig
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
block|{
name|res
operator|=
name|env
operator|->
name|CallStaticByteMethodV
argument_list|(
name|clazz
argument_list|,
name|id
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|res
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callStaticMethod
name|jbyte
name|QJNIObjectPrivate
operator|::
name|callStaticMethod
argument_list|<
name|jbyte
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|className
parameter_list|,
specifier|const
name|char
modifier|*
name|methodName
parameter_list|,
specifier|const
name|char
modifier|*
name|sig
parameter_list|,
modifier|...
parameter_list|)
block|{
name|va_list
name|args
decl_stmt|;
name|va_start
argument_list|(
name|args
argument_list|,
name|sig
argument_list|)
expr_stmt|;
name|jbyte
name|res
init|=
name|callStaticMethod
argument_list|<
name|jbyte
argument_list|>
argument_list|(
name|className
argument_list|,
name|methodName
argument_list|,
name|sig
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|va_end
argument_list|(
name|args
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callStaticMethod
name|jbyte
name|QJNIObjectPrivate
operator|::
name|callStaticMethod
argument_list|<
name|jbyte
argument_list|>
parameter_list|(
name|jclass
name|clazz
parameter_list|,
specifier|const
name|char
modifier|*
name|methodName
parameter_list|,
specifier|const
name|char
modifier|*
name|sig
parameter_list|,
name|va_list
name|args
parameter_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jbyte
name|res
init|=
literal|0
decl_stmt|;
name|jmethodID
name|id
init|=
name|getCachedMethodID
argument_list|(
name|env
argument_list|,
name|clazz
argument_list|,
name|methodName
argument_list|,
name|sig
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
block|{
name|res
operator|=
name|env
operator|->
name|CallStaticByteMethodV
argument_list|(
name|clazz
argument_list|,
name|id
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callStaticMethod
name|jbyte
name|QJNIObjectPrivate
operator|::
name|callStaticMethod
argument_list|<
name|jbyte
argument_list|>
parameter_list|(
name|jclass
name|clazz
parameter_list|,
specifier|const
name|char
modifier|*
name|methodName
parameter_list|,
specifier|const
name|char
modifier|*
name|sig
parameter_list|,
modifier|...
parameter_list|)
block|{
name|va_list
name|args
decl_stmt|;
name|va_start
argument_list|(
name|args
argument_list|,
name|sig
argument_list|)
expr_stmt|;
name|jbyte
name|res
init|=
name|callStaticMethod
argument_list|<
name|jbyte
argument_list|>
argument_list|(
name|clazz
argument_list|,
name|methodName
argument_list|,
name|sig
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|va_end
argument_list|(
name|args
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callStaticMethod
name|jchar
name|QJNIObjectPrivate
operator|::
name|callStaticMethod
argument_list|<
name|jchar
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|className
parameter_list|,
specifier|const
name|char
modifier|*
name|methodName
parameter_list|,
specifier|const
name|char
modifier|*
name|sig
parameter_list|,
name|va_list
name|args
parameter_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jchar
name|res
init|=
literal|0
decl_stmt|;
name|jclass
name|clazz
init|=
name|getCachedClass
argument_list|(
name|env
argument_list|,
name|className
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
condition|)
block|{
name|jmethodID
name|id
init|=
name|getCachedMethodID
argument_list|(
name|env
argument_list|,
name|clazz
argument_list|,
name|methodName
argument_list|,
name|sig
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
block|{
name|res
operator|=
name|env
operator|->
name|CallStaticCharMethodV
argument_list|(
name|clazz
argument_list|,
name|id
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|res
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callStaticMethod
name|jchar
name|QJNIObjectPrivate
operator|::
name|callStaticMethod
argument_list|<
name|jchar
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|className
parameter_list|,
specifier|const
name|char
modifier|*
name|methodName
parameter_list|,
specifier|const
name|char
modifier|*
name|sig
parameter_list|,
modifier|...
parameter_list|)
block|{
name|va_list
name|args
decl_stmt|;
name|va_start
argument_list|(
name|args
argument_list|,
name|sig
argument_list|)
expr_stmt|;
name|jchar
name|res
init|=
name|callStaticMethod
argument_list|<
name|jchar
argument_list|>
argument_list|(
name|className
argument_list|,
name|methodName
argument_list|,
name|sig
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|va_end
argument_list|(
name|args
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callStaticMethod
name|jchar
name|QJNIObjectPrivate
operator|::
name|callStaticMethod
argument_list|<
name|jchar
argument_list|>
parameter_list|(
name|jclass
name|clazz
parameter_list|,
specifier|const
name|char
modifier|*
name|methodName
parameter_list|,
specifier|const
name|char
modifier|*
name|sig
parameter_list|,
name|va_list
name|args
parameter_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jchar
name|res
init|=
literal|0
decl_stmt|;
name|jmethodID
name|id
init|=
name|getCachedMethodID
argument_list|(
name|env
argument_list|,
name|clazz
argument_list|,
name|methodName
argument_list|,
name|sig
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
block|{
name|res
operator|=
name|env
operator|->
name|CallStaticCharMethodV
argument_list|(
name|clazz
argument_list|,
name|id
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callStaticMethod
name|jchar
name|QJNIObjectPrivate
operator|::
name|callStaticMethod
argument_list|<
name|jchar
argument_list|>
parameter_list|(
name|jclass
name|clazz
parameter_list|,
specifier|const
name|char
modifier|*
name|methodName
parameter_list|,
specifier|const
name|char
modifier|*
name|sig
parameter_list|,
modifier|...
parameter_list|)
block|{
name|va_list
name|args
decl_stmt|;
name|va_start
argument_list|(
name|args
argument_list|,
name|sig
argument_list|)
expr_stmt|;
name|jchar
name|res
init|=
name|callStaticMethod
argument_list|<
name|jchar
argument_list|>
argument_list|(
name|clazz
argument_list|,
name|methodName
argument_list|,
name|sig
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|va_end
argument_list|(
name|args
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callStaticMethod
name|jshort
name|QJNIObjectPrivate
operator|::
name|callStaticMethod
argument_list|<
name|jshort
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|className
parameter_list|,
specifier|const
name|char
modifier|*
name|methodName
parameter_list|,
specifier|const
name|char
modifier|*
name|sig
parameter_list|,
name|va_list
name|args
parameter_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jshort
name|res
init|=
literal|0
decl_stmt|;
name|jclass
name|clazz
init|=
name|getCachedClass
argument_list|(
name|env
argument_list|,
name|className
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
condition|)
block|{
name|jmethodID
name|id
init|=
name|getCachedMethodID
argument_list|(
name|env
argument_list|,
name|clazz
argument_list|,
name|methodName
argument_list|,
name|sig
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
block|{
name|res
operator|=
name|env
operator|->
name|CallStaticShortMethodV
argument_list|(
name|clazz
argument_list|,
name|id
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|res
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callStaticMethod
name|jshort
name|QJNIObjectPrivate
operator|::
name|callStaticMethod
argument_list|<
name|jshort
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|className
parameter_list|,
specifier|const
name|char
modifier|*
name|methodName
parameter_list|,
specifier|const
name|char
modifier|*
name|sig
parameter_list|,
modifier|...
parameter_list|)
block|{
name|va_list
name|args
decl_stmt|;
name|va_start
argument_list|(
name|args
argument_list|,
name|sig
argument_list|)
expr_stmt|;
name|jshort
name|res
init|=
name|callStaticMethod
argument_list|<
name|jshort
argument_list|>
argument_list|(
name|className
argument_list|,
name|methodName
argument_list|,
name|sig
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|va_end
argument_list|(
name|args
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callStaticMethod
name|jshort
name|QJNIObjectPrivate
operator|::
name|callStaticMethod
argument_list|<
name|jshort
argument_list|>
parameter_list|(
name|jclass
name|clazz
parameter_list|,
specifier|const
name|char
modifier|*
name|methodName
parameter_list|,
specifier|const
name|char
modifier|*
name|sig
parameter_list|,
name|va_list
name|args
parameter_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jshort
name|res
init|=
literal|0
decl_stmt|;
name|jmethodID
name|id
init|=
name|getCachedMethodID
argument_list|(
name|env
argument_list|,
name|clazz
argument_list|,
name|methodName
argument_list|,
name|sig
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
block|{
name|res
operator|=
name|env
operator|->
name|CallStaticShortMethodV
argument_list|(
name|clazz
argument_list|,
name|id
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callStaticMethod
name|jshort
name|QJNIObjectPrivate
operator|::
name|callStaticMethod
argument_list|<
name|jshort
argument_list|>
parameter_list|(
name|jclass
name|clazz
parameter_list|,
specifier|const
name|char
modifier|*
name|methodName
parameter_list|,
specifier|const
name|char
modifier|*
name|sig
parameter_list|,
modifier|...
parameter_list|)
block|{
name|va_list
name|args
decl_stmt|;
name|va_start
argument_list|(
name|args
argument_list|,
name|sig
argument_list|)
expr_stmt|;
name|jshort
name|res
init|=
name|callStaticMethod
argument_list|<
name|jshort
argument_list|>
argument_list|(
name|clazz
argument_list|,
name|methodName
argument_list|,
name|sig
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|va_end
argument_list|(
name|args
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callStaticMethod
name|jint
name|QJNIObjectPrivate
operator|::
name|callStaticMethod
argument_list|<
name|jint
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|className
parameter_list|,
specifier|const
name|char
modifier|*
name|methodName
parameter_list|,
specifier|const
name|char
modifier|*
name|sig
parameter_list|,
name|va_list
name|args
parameter_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jint
name|res
init|=
literal|0
decl_stmt|;
name|jclass
name|clazz
init|=
name|getCachedClass
argument_list|(
name|env
argument_list|,
name|className
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
condition|)
block|{
name|jmethodID
name|id
init|=
name|getCachedMethodID
argument_list|(
name|env
argument_list|,
name|clazz
argument_list|,
name|methodName
argument_list|,
name|sig
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
block|{
name|res
operator|=
name|env
operator|->
name|CallStaticIntMethodV
argument_list|(
name|clazz
argument_list|,
name|id
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|res
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callStaticMethod
name|jint
name|QJNIObjectPrivate
operator|::
name|callStaticMethod
argument_list|<
name|jint
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|className
parameter_list|,
specifier|const
name|char
modifier|*
name|methodName
parameter_list|,
specifier|const
name|char
modifier|*
name|sig
parameter_list|,
modifier|...
parameter_list|)
block|{
name|va_list
name|args
decl_stmt|;
name|va_start
argument_list|(
name|args
argument_list|,
name|sig
argument_list|)
expr_stmt|;
name|jint
name|res
init|=
name|callStaticMethod
argument_list|<
name|jint
argument_list|>
argument_list|(
name|className
argument_list|,
name|methodName
argument_list|,
name|sig
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|va_end
argument_list|(
name|args
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callStaticMethod
name|jint
name|QJNIObjectPrivate
operator|::
name|callStaticMethod
argument_list|<
name|jint
argument_list|>
parameter_list|(
name|jclass
name|clazz
parameter_list|,
specifier|const
name|char
modifier|*
name|methodName
parameter_list|,
specifier|const
name|char
modifier|*
name|sig
parameter_list|,
name|va_list
name|args
parameter_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jint
name|res
init|=
literal|0
decl_stmt|;
name|jmethodID
name|id
init|=
name|getCachedMethodID
argument_list|(
name|env
argument_list|,
name|clazz
argument_list|,
name|methodName
argument_list|,
name|sig
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
block|{
name|res
operator|=
name|env
operator|->
name|CallStaticIntMethodV
argument_list|(
name|clazz
argument_list|,
name|id
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callStaticMethod
name|jint
name|QJNIObjectPrivate
operator|::
name|callStaticMethod
argument_list|<
name|jint
argument_list|>
parameter_list|(
name|jclass
name|clazz
parameter_list|,
specifier|const
name|char
modifier|*
name|methodName
parameter_list|,
specifier|const
name|char
modifier|*
name|sig
parameter_list|,
modifier|...
parameter_list|)
block|{
name|va_list
name|args
decl_stmt|;
name|va_start
argument_list|(
name|args
argument_list|,
name|sig
argument_list|)
expr_stmt|;
name|jint
name|res
init|=
name|callStaticMethod
argument_list|<
name|jint
argument_list|>
argument_list|(
name|clazz
argument_list|,
name|methodName
argument_list|,
name|sig
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|va_end
argument_list|(
name|args
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callStaticMethod
name|jlong
name|QJNIObjectPrivate
operator|::
name|callStaticMethod
argument_list|<
name|jlong
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|className
parameter_list|,
specifier|const
name|char
modifier|*
name|methodName
parameter_list|,
specifier|const
name|char
modifier|*
name|sig
parameter_list|,
name|va_list
name|args
parameter_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jlong
name|res
init|=
literal|0
decl_stmt|;
name|jclass
name|clazz
init|=
name|getCachedClass
argument_list|(
name|env
argument_list|,
name|className
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
condition|)
block|{
name|jmethodID
name|id
init|=
name|getCachedMethodID
argument_list|(
name|env
argument_list|,
name|clazz
argument_list|,
name|methodName
argument_list|,
name|sig
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
block|{
name|res
operator|=
name|env
operator|->
name|CallStaticLongMethodV
argument_list|(
name|clazz
argument_list|,
name|id
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|res
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callStaticMethod
name|jlong
name|QJNIObjectPrivate
operator|::
name|callStaticMethod
argument_list|<
name|jlong
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|className
parameter_list|,
specifier|const
name|char
modifier|*
name|methodName
parameter_list|,
specifier|const
name|char
modifier|*
name|sig
parameter_list|,
modifier|...
parameter_list|)
block|{
name|va_list
name|args
decl_stmt|;
name|va_start
argument_list|(
name|args
argument_list|,
name|sig
argument_list|)
expr_stmt|;
name|jlong
name|res
init|=
name|callStaticMethod
argument_list|<
name|jlong
argument_list|>
argument_list|(
name|className
argument_list|,
name|methodName
argument_list|,
name|sig
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|va_end
argument_list|(
name|args
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callStaticMethod
name|jlong
name|QJNIObjectPrivate
operator|::
name|callStaticMethod
argument_list|<
name|jlong
argument_list|>
parameter_list|(
name|jclass
name|clazz
parameter_list|,
specifier|const
name|char
modifier|*
name|methodName
parameter_list|,
specifier|const
name|char
modifier|*
name|sig
parameter_list|,
name|va_list
name|args
parameter_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jlong
name|res
init|=
literal|0
decl_stmt|;
name|jmethodID
name|id
init|=
name|getCachedMethodID
argument_list|(
name|env
argument_list|,
name|clazz
argument_list|,
name|methodName
argument_list|,
name|sig
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
block|{
name|res
operator|=
name|env
operator|->
name|CallStaticLongMethodV
argument_list|(
name|clazz
argument_list|,
name|id
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callStaticMethod
name|jlong
name|QJNIObjectPrivate
operator|::
name|callStaticMethod
argument_list|<
name|jlong
argument_list|>
parameter_list|(
name|jclass
name|clazz
parameter_list|,
specifier|const
name|char
modifier|*
name|methodName
parameter_list|,
specifier|const
name|char
modifier|*
name|sig
parameter_list|,
modifier|...
parameter_list|)
block|{
name|va_list
name|args
decl_stmt|;
name|va_start
argument_list|(
name|args
argument_list|,
name|sig
argument_list|)
expr_stmt|;
name|jlong
name|res
init|=
name|callStaticMethod
argument_list|<
name|jlong
argument_list|>
argument_list|(
name|clazz
argument_list|,
name|methodName
argument_list|,
name|sig
argument_list|)
decl_stmt|;
name|va_end
argument_list|(
name|args
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callStaticMethod
name|jfloat
name|QJNIObjectPrivate
operator|::
name|callStaticMethod
argument_list|<
name|jfloat
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|className
parameter_list|,
specifier|const
name|char
modifier|*
name|methodName
parameter_list|,
specifier|const
name|char
modifier|*
name|sig
parameter_list|,
name|va_list
name|args
parameter_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jfloat
name|res
init|=
literal|0.f
decl_stmt|;
name|jclass
name|clazz
init|=
name|getCachedClass
argument_list|(
name|env
argument_list|,
name|className
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
condition|)
block|{
name|jmethodID
name|id
init|=
name|getCachedMethodID
argument_list|(
name|env
argument_list|,
name|clazz
argument_list|,
name|methodName
argument_list|,
name|sig
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
block|{
name|res
operator|=
name|env
operator|->
name|CallStaticFloatMethodV
argument_list|(
name|clazz
argument_list|,
name|id
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|res
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callStaticMethod
name|jfloat
name|QJNIObjectPrivate
operator|::
name|callStaticMethod
argument_list|<
name|jfloat
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|className
parameter_list|,
specifier|const
name|char
modifier|*
name|methodName
parameter_list|,
specifier|const
name|char
modifier|*
name|sig
parameter_list|,
modifier|...
parameter_list|)
block|{
name|va_list
name|args
decl_stmt|;
name|va_start
argument_list|(
name|args
argument_list|,
name|sig
argument_list|)
expr_stmt|;
name|jfloat
name|res
init|=
name|callStaticMethod
argument_list|<
name|jfloat
argument_list|>
argument_list|(
name|className
argument_list|,
name|methodName
argument_list|,
name|sig
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|va_end
argument_list|(
name|args
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callStaticMethod
name|jfloat
name|QJNIObjectPrivate
operator|::
name|callStaticMethod
argument_list|<
name|jfloat
argument_list|>
parameter_list|(
name|jclass
name|clazz
parameter_list|,
specifier|const
name|char
modifier|*
name|methodName
parameter_list|,
specifier|const
name|char
modifier|*
name|sig
parameter_list|,
name|va_list
name|args
parameter_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jfloat
name|res
init|=
literal|0.f
decl_stmt|;
name|jmethodID
name|id
init|=
name|getCachedMethodID
argument_list|(
name|env
argument_list|,
name|clazz
argument_list|,
name|methodName
argument_list|,
name|sig
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
block|{
name|res
operator|=
name|env
operator|->
name|CallStaticFloatMethodV
argument_list|(
name|clazz
argument_list|,
name|id
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callStaticMethod
name|jfloat
name|QJNIObjectPrivate
operator|::
name|callStaticMethod
argument_list|<
name|jfloat
argument_list|>
parameter_list|(
name|jclass
name|clazz
parameter_list|,
specifier|const
name|char
modifier|*
name|methodName
parameter_list|,
specifier|const
name|char
modifier|*
name|sig
parameter_list|,
modifier|...
parameter_list|)
block|{
name|va_list
name|args
decl_stmt|;
name|va_start
argument_list|(
name|args
argument_list|,
name|sig
argument_list|)
expr_stmt|;
name|jfloat
name|res
init|=
name|callStaticMethod
argument_list|<
name|jfloat
argument_list|>
argument_list|(
name|clazz
argument_list|,
name|methodName
argument_list|,
name|sig
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|va_end
argument_list|(
name|args
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callStaticMethod
name|jdouble
name|QJNIObjectPrivate
operator|::
name|callStaticMethod
argument_list|<
name|jdouble
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|className
parameter_list|,
specifier|const
name|char
modifier|*
name|methodName
parameter_list|,
specifier|const
name|char
modifier|*
name|sig
parameter_list|,
name|va_list
name|args
parameter_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jdouble
name|res
init|=
literal|0.
decl_stmt|;
name|jclass
name|clazz
init|=
name|getCachedClass
argument_list|(
name|env
argument_list|,
name|className
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
condition|)
block|{
name|jmethodID
name|id
init|=
name|getCachedMethodID
argument_list|(
name|env
argument_list|,
name|clazz
argument_list|,
name|methodName
argument_list|,
name|sig
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
block|{
name|res
operator|=
name|env
operator|->
name|CallStaticDoubleMethodV
argument_list|(
name|clazz
argument_list|,
name|id
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|res
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callStaticMethod
name|jdouble
name|QJNIObjectPrivate
operator|::
name|callStaticMethod
argument_list|<
name|jdouble
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|className
parameter_list|,
specifier|const
name|char
modifier|*
name|methodName
parameter_list|,
specifier|const
name|char
modifier|*
name|sig
parameter_list|,
modifier|...
parameter_list|)
block|{
name|va_list
name|args
decl_stmt|;
name|va_start
argument_list|(
name|args
argument_list|,
name|sig
argument_list|)
expr_stmt|;
name|jdouble
name|res
init|=
name|callStaticMethod
argument_list|<
name|jdouble
argument_list|>
argument_list|(
name|className
argument_list|,
name|methodName
argument_list|,
name|sig
argument_list|)
decl_stmt|;
name|va_end
argument_list|(
name|args
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callStaticMethod
name|jdouble
name|QJNIObjectPrivate
operator|::
name|callStaticMethod
argument_list|<
name|jdouble
argument_list|>
parameter_list|(
name|jclass
name|clazz
parameter_list|,
specifier|const
name|char
modifier|*
name|methodName
parameter_list|,
specifier|const
name|char
modifier|*
name|sig
parameter_list|,
name|va_list
name|args
parameter_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jdouble
name|res
init|=
literal|0.
decl_stmt|;
name|jmethodID
name|id
init|=
name|getCachedMethodID
argument_list|(
name|env
argument_list|,
name|clazz
argument_list|,
name|methodName
argument_list|,
name|sig
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
block|{
name|res
operator|=
name|env
operator|->
name|CallStaticDoubleMethodV
argument_list|(
name|clazz
argument_list|,
name|id
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callStaticMethod
name|jdouble
name|QJNIObjectPrivate
operator|::
name|callStaticMethod
argument_list|<
name|jdouble
argument_list|>
parameter_list|(
name|jclass
name|clazz
parameter_list|,
specifier|const
name|char
modifier|*
name|methodName
parameter_list|,
specifier|const
name|char
modifier|*
name|sig
parameter_list|,
modifier|...
parameter_list|)
block|{
name|va_list
name|args
decl_stmt|;
name|va_start
argument_list|(
name|args
argument_list|,
name|sig
argument_list|)
expr_stmt|;
name|jdouble
name|res
init|=
name|callStaticMethod
argument_list|<
name|jdouble
argument_list|>
argument_list|(
name|clazz
argument_list|,
name|methodName
argument_list|,
name|sig
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|va_end
argument_list|(
name|args
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callStaticMethod
name|void
name|QJNIObjectPrivate
operator|::
name|callStaticMethod
argument_list|<
name|void
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|className
parameter_list|,
specifier|const
name|char
modifier|*
name|methodName
parameter_list|)
block|{
name|callStaticMethod
argument_list|<
name|void
argument_list|>
argument_list|(
name|className
argument_list|,
name|methodName
argument_list|,
literal|"()V"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callStaticMethod
name|void
name|QJNIObjectPrivate
operator|::
name|callStaticMethod
argument_list|<
name|void
argument_list|>
parameter_list|(
name|jclass
name|clazz
parameter_list|,
specifier|const
name|char
modifier|*
name|methodName
parameter_list|)
block|{
name|callStaticMethod
argument_list|<
name|void
argument_list|>
argument_list|(
name|clazz
argument_list|,
name|methodName
argument_list|,
literal|"()V"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callStaticMethod
name|jboolean
name|QJNIObjectPrivate
operator|::
name|callStaticMethod
argument_list|<
name|jboolean
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|className
parameter_list|,
specifier|const
name|char
modifier|*
name|methodName
parameter_list|)
block|{
return|return
name|callStaticMethod
argument_list|<
name|jboolean
argument_list|>
argument_list|(
name|className
argument_list|,
name|methodName
argument_list|,
literal|"()Z"
argument_list|)
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callStaticMethod
name|jboolean
name|QJNIObjectPrivate
operator|::
name|callStaticMethod
argument_list|<
name|jboolean
argument_list|>
parameter_list|(
name|jclass
name|clazz
parameter_list|,
specifier|const
name|char
modifier|*
name|methodName
parameter_list|)
block|{
return|return
name|callStaticMethod
argument_list|<
name|jboolean
argument_list|>
argument_list|(
name|clazz
argument_list|,
name|methodName
argument_list|,
literal|"()Z"
argument_list|)
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callStaticMethod
name|jbyte
name|QJNIObjectPrivate
operator|::
name|callStaticMethod
argument_list|<
name|jbyte
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|className
parameter_list|,
specifier|const
name|char
modifier|*
name|methodName
parameter_list|)
block|{
return|return
name|callStaticMethod
argument_list|<
name|jbyte
argument_list|>
argument_list|(
name|className
argument_list|,
name|methodName
argument_list|,
literal|"()B"
argument_list|)
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callStaticMethod
name|jbyte
name|QJNIObjectPrivate
operator|::
name|callStaticMethod
argument_list|<
name|jbyte
argument_list|>
parameter_list|(
name|jclass
name|clazz
parameter_list|,
specifier|const
name|char
modifier|*
name|methodName
parameter_list|)
block|{
return|return
name|callStaticMethod
argument_list|<
name|jbyte
argument_list|>
argument_list|(
name|clazz
argument_list|,
name|methodName
argument_list|,
literal|"()B"
argument_list|)
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callStaticMethod
name|jchar
name|QJNIObjectPrivate
operator|::
name|callStaticMethod
argument_list|<
name|jchar
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|className
parameter_list|,
specifier|const
name|char
modifier|*
name|methodName
parameter_list|)
block|{
return|return
name|callStaticMethod
argument_list|<
name|jchar
argument_list|>
argument_list|(
name|className
argument_list|,
name|methodName
argument_list|,
literal|"()C"
argument_list|)
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callStaticMethod
name|jchar
name|QJNIObjectPrivate
operator|::
name|callStaticMethod
argument_list|<
name|jchar
argument_list|>
parameter_list|(
name|jclass
name|clazz
parameter_list|,
specifier|const
name|char
modifier|*
name|methodName
parameter_list|)
block|{
return|return
name|callStaticMethod
argument_list|<
name|jchar
argument_list|>
argument_list|(
name|clazz
argument_list|,
name|methodName
argument_list|,
literal|"()C"
argument_list|)
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callStaticMethod
name|jshort
name|QJNIObjectPrivate
operator|::
name|callStaticMethod
argument_list|<
name|jshort
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|className
parameter_list|,
specifier|const
name|char
modifier|*
name|methodName
parameter_list|)
block|{
return|return
name|callStaticMethod
argument_list|<
name|jshort
argument_list|>
argument_list|(
name|className
argument_list|,
name|methodName
argument_list|,
literal|"()S"
argument_list|)
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callStaticMethod
name|jshort
name|QJNIObjectPrivate
operator|::
name|callStaticMethod
argument_list|<
name|jshort
argument_list|>
parameter_list|(
name|jclass
name|clazz
parameter_list|,
specifier|const
name|char
modifier|*
name|methodName
parameter_list|)
block|{
return|return
name|callStaticMethod
argument_list|<
name|jshort
argument_list|>
argument_list|(
name|clazz
argument_list|,
name|methodName
argument_list|,
literal|"()S"
argument_list|)
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callStaticMethod
name|jint
name|QJNIObjectPrivate
operator|::
name|callStaticMethod
argument_list|<
name|jint
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|className
parameter_list|,
specifier|const
name|char
modifier|*
name|methodName
parameter_list|)
block|{
return|return
name|callStaticMethod
argument_list|<
name|jint
argument_list|>
argument_list|(
name|className
argument_list|,
name|methodName
argument_list|,
literal|"()I"
argument_list|)
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callStaticMethod
name|jint
name|QJNIObjectPrivate
operator|::
name|callStaticMethod
argument_list|<
name|jint
argument_list|>
parameter_list|(
name|jclass
name|clazz
parameter_list|,
specifier|const
name|char
modifier|*
name|methodName
parameter_list|)
block|{
return|return
name|callStaticMethod
argument_list|<
name|jint
argument_list|>
argument_list|(
name|clazz
argument_list|,
name|methodName
argument_list|,
literal|"()I"
argument_list|)
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callStaticMethod
name|jlong
name|QJNIObjectPrivate
operator|::
name|callStaticMethod
argument_list|<
name|jlong
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|className
parameter_list|,
specifier|const
name|char
modifier|*
name|methodName
parameter_list|)
block|{
return|return
name|callStaticMethod
argument_list|<
name|jlong
argument_list|>
argument_list|(
name|className
argument_list|,
name|methodName
argument_list|,
literal|"()J"
argument_list|)
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callStaticMethod
name|jlong
name|QJNIObjectPrivate
operator|::
name|callStaticMethod
argument_list|<
name|jlong
argument_list|>
parameter_list|(
name|jclass
name|clazz
parameter_list|,
specifier|const
name|char
modifier|*
name|methodName
parameter_list|)
block|{
return|return
name|callStaticMethod
argument_list|<
name|jlong
argument_list|>
argument_list|(
name|clazz
argument_list|,
name|methodName
argument_list|,
literal|"()J"
argument_list|)
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callStaticMethod
name|jfloat
name|QJNIObjectPrivate
operator|::
name|callStaticMethod
argument_list|<
name|jfloat
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|className
parameter_list|,
specifier|const
name|char
modifier|*
name|methodName
parameter_list|)
block|{
return|return
name|callStaticMethod
argument_list|<
name|jfloat
argument_list|>
argument_list|(
name|className
argument_list|,
name|methodName
argument_list|,
literal|"()F"
argument_list|)
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callStaticMethod
name|jfloat
name|QJNIObjectPrivate
operator|::
name|callStaticMethod
argument_list|<
name|jfloat
argument_list|>
parameter_list|(
name|jclass
name|clazz
parameter_list|,
specifier|const
name|char
modifier|*
name|methodName
parameter_list|)
block|{
return|return
name|callStaticMethod
argument_list|<
name|jfloat
argument_list|>
argument_list|(
name|clazz
argument_list|,
name|methodName
argument_list|,
literal|"()F"
argument_list|)
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callStaticMethod
name|jdouble
name|QJNIObjectPrivate
operator|::
name|callStaticMethod
argument_list|<
name|jdouble
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|className
parameter_list|,
specifier|const
name|char
modifier|*
name|methodName
parameter_list|)
block|{
return|return
name|callStaticMethod
argument_list|<
name|jdouble
argument_list|>
argument_list|(
name|className
argument_list|,
name|methodName
argument_list|,
literal|"()D"
argument_list|)
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callStaticMethod
name|jdouble
name|QJNIObjectPrivate
operator|::
name|callStaticMethod
argument_list|<
name|jdouble
argument_list|>
parameter_list|(
name|jclass
name|clazz
parameter_list|,
specifier|const
name|char
modifier|*
name|methodName
parameter_list|)
block|{
return|return
name|callStaticMethod
argument_list|<
name|jdouble
argument_list|>
argument_list|(
name|clazz
argument_list|,
name|methodName
argument_list|,
literal|"()D"
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|callObjectMethod
name|QJNIObjectPrivate
name|QJNIObjectPrivate
operator|::
name|callObjectMethod
parameter_list|(
specifier|const
name|char
modifier|*
name|methodName
parameter_list|,
specifier|const
name|char
modifier|*
name|sig
parameter_list|,
name|va_list
name|args
parameter_list|)
specifier|const
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jobject
name|res
init|=
literal|0
decl_stmt|;
name|jmethodID
name|id
init|=
name|getCachedMethodID
argument_list|(
name|env
argument_list|,
name|d
operator|->
name|m_jclass
argument_list|,
name|methodName
argument_list|,
name|sig
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
block|{
name|res
operator|=
name|env
operator|->
name|CallObjectMethodV
argument_list|(
name|d
operator|->
name|m_jobject
argument_list|,
name|id
argument_list|,
name|args
argument_list|)
expr_stmt|;
if|if
condition|(
name|res
operator|&&
name|env
operator|->
name|ExceptionCheck
argument_list|()
condition|)
name|res
operator|=
literal|0
expr_stmt|;
block|}
name|QJNIObjectPrivate
name|obj
argument_list|(
name|res
argument_list|)
decl_stmt|;
name|env
operator|->
name|DeleteLocalRef
argument_list|(
name|res
argument_list|)
expr_stmt|;
return|return
name|obj
return|;
block|}
end_function
begin_function
DECL|function|callObjectMethod
name|QJNIObjectPrivate
name|QJNIObjectPrivate
operator|::
name|callObjectMethod
parameter_list|(
specifier|const
name|char
modifier|*
name|methodName
parameter_list|,
specifier|const
name|char
modifier|*
name|sig
parameter_list|,
modifier|...
parameter_list|)
specifier|const
block|{
name|va_list
name|args
decl_stmt|;
name|va_start
argument_list|(
name|args
argument_list|,
name|sig
argument_list|)
expr_stmt|;
name|QJNIObjectPrivate
name|res
init|=
name|callObjectMethod
argument_list|(
name|methodName
argument_list|,
name|sig
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|va_end
argument_list|(
name|args
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callObjectMethod
name|QJNIObjectPrivate
name|QJNIObjectPrivate
operator|::
name|callObjectMethod
argument_list|<
name|jstring
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|methodName
parameter_list|)
specifier|const
block|{
return|return
name|callObjectMethod
argument_list|(
name|methodName
argument_list|,
literal|"()Ljava/lang/String;"
argument_list|)
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callObjectMethod
name|QJNIObjectPrivate
name|QJNIObjectPrivate
operator|::
name|callObjectMethod
argument_list|<
name|jbooleanArray
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|methodName
parameter_list|)
specifier|const
block|{
return|return
name|callObjectMethod
argument_list|(
name|methodName
argument_list|,
literal|"()[Z"
argument_list|)
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callObjectMethod
name|QJNIObjectPrivate
name|QJNIObjectPrivate
operator|::
name|callObjectMethod
argument_list|<
name|jbyteArray
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|methodName
parameter_list|)
specifier|const
block|{
return|return
name|callObjectMethod
argument_list|(
name|methodName
argument_list|,
literal|"()[B"
argument_list|)
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callObjectMethod
name|QJNIObjectPrivate
name|QJNIObjectPrivate
operator|::
name|callObjectMethod
argument_list|<
name|jshortArray
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|methodName
parameter_list|)
specifier|const
block|{
return|return
name|callObjectMethod
argument_list|(
name|methodName
argument_list|,
literal|"()[S"
argument_list|)
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callObjectMethod
name|QJNIObjectPrivate
name|QJNIObjectPrivate
operator|::
name|callObjectMethod
argument_list|<
name|jintArray
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|methodName
parameter_list|)
specifier|const
block|{
return|return
name|callObjectMethod
argument_list|(
name|methodName
argument_list|,
literal|"()[I"
argument_list|)
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callObjectMethod
name|QJNIObjectPrivate
name|QJNIObjectPrivate
operator|::
name|callObjectMethod
argument_list|<
name|jlongArray
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|methodName
parameter_list|)
specifier|const
block|{
return|return
name|callObjectMethod
argument_list|(
name|methodName
argument_list|,
literal|"()[J"
argument_list|)
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callObjectMethod
name|QJNIObjectPrivate
name|QJNIObjectPrivate
operator|::
name|callObjectMethod
argument_list|<
name|jfloatArray
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|methodName
parameter_list|)
specifier|const
block|{
return|return
name|callObjectMethod
argument_list|(
name|methodName
argument_list|,
literal|"()[F"
argument_list|)
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|callObjectMethod
name|QJNIObjectPrivate
name|QJNIObjectPrivate
operator|::
name|callObjectMethod
argument_list|<
name|jdoubleArray
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|methodName
parameter_list|)
specifier|const
block|{
return|return
name|callObjectMethod
argument_list|(
name|methodName
argument_list|,
literal|"()[D"
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|callStaticObjectMethod
name|QJNIObjectPrivate
name|QJNIObjectPrivate
operator|::
name|callStaticObjectMethod
parameter_list|(
specifier|const
name|char
modifier|*
name|className
parameter_list|,
specifier|const
name|char
modifier|*
name|methodName
parameter_list|,
specifier|const
name|char
modifier|*
name|sig
parameter_list|,
name|va_list
name|args
parameter_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jobject
name|res
init|=
literal|0
decl_stmt|;
name|jclass
name|clazz
init|=
name|getCachedClass
argument_list|(
name|env
argument_list|,
name|className
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
condition|)
block|{
name|jmethodID
name|id
init|=
name|getCachedMethodID
argument_list|(
name|env
argument_list|,
name|clazz
argument_list|,
name|methodName
argument_list|,
name|sig
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
block|{
name|res
operator|=
name|env
operator|->
name|CallStaticObjectMethodV
argument_list|(
name|clazz
argument_list|,
name|id
argument_list|,
name|args
argument_list|)
expr_stmt|;
if|if
condition|(
name|res
operator|&&
name|env
operator|->
name|ExceptionCheck
argument_list|()
condition|)
name|res
operator|=
literal|0
expr_stmt|;
block|}
block|}
name|QJNIObjectPrivate
name|obj
argument_list|(
name|res
argument_list|)
decl_stmt|;
name|env
operator|->
name|DeleteLocalRef
argument_list|(
name|res
argument_list|)
expr_stmt|;
return|return
name|obj
return|;
block|}
end_function
begin_function
DECL|function|callStaticObjectMethod
name|QJNIObjectPrivate
name|QJNIObjectPrivate
operator|::
name|callStaticObjectMethod
parameter_list|(
specifier|const
name|char
modifier|*
name|className
parameter_list|,
specifier|const
name|char
modifier|*
name|methodName
parameter_list|,
specifier|const
name|char
modifier|*
name|sig
parameter_list|,
modifier|...
parameter_list|)
block|{
name|va_list
name|args
decl_stmt|;
name|va_start
argument_list|(
name|args
argument_list|,
name|sig
argument_list|)
expr_stmt|;
name|QJNIObjectPrivate
name|res
init|=
name|callStaticObjectMethod
argument_list|(
name|className
argument_list|,
name|methodName
argument_list|,
name|sig
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|va_end
argument_list|(
name|args
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
end_function
begin_function
DECL|function|callStaticObjectMethod
name|QJNIObjectPrivate
name|QJNIObjectPrivate
operator|::
name|callStaticObjectMethod
parameter_list|(
name|jclass
name|clazz
parameter_list|,
specifier|const
name|char
modifier|*
name|methodName
parameter_list|,
specifier|const
name|char
modifier|*
name|sig
parameter_list|,
name|va_list
name|args
parameter_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jobject
name|res
init|=
literal|0
decl_stmt|;
name|jmethodID
name|id
init|=
name|getCachedMethodID
argument_list|(
name|env
argument_list|,
name|clazz
argument_list|,
name|methodName
argument_list|,
name|sig
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
block|{
name|res
operator|=
name|env
operator|->
name|CallStaticObjectMethodV
argument_list|(
name|clazz
argument_list|,
name|id
argument_list|,
name|args
argument_list|)
expr_stmt|;
if|if
condition|(
name|res
operator|&&
name|env
operator|->
name|ExceptionCheck
argument_list|()
condition|)
name|res
operator|=
literal|0
expr_stmt|;
block|}
name|QJNIObjectPrivate
name|obj
argument_list|(
name|res
argument_list|)
decl_stmt|;
name|env
operator|->
name|DeleteLocalRef
argument_list|(
name|res
argument_list|)
expr_stmt|;
return|return
name|obj
return|;
block|}
end_function
begin_function
DECL|function|callStaticObjectMethod
name|QJNIObjectPrivate
name|QJNIObjectPrivate
operator|::
name|callStaticObjectMethod
parameter_list|(
name|jclass
name|clazz
parameter_list|,
specifier|const
name|char
modifier|*
name|methodName
parameter_list|,
specifier|const
name|char
modifier|*
name|sig
parameter_list|,
modifier|...
parameter_list|)
block|{
name|va_list
name|args
decl_stmt|;
name|va_start
argument_list|(
name|args
argument_list|,
name|sig
argument_list|)
expr_stmt|;
name|QJNIObjectPrivate
name|res
init|=
name|callStaticObjectMethod
argument_list|(
name|clazz
argument_list|,
name|methodName
argument_list|,
name|sig
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|va_end
argument_list|(
name|args
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|getField
name|jboolean
name|QJNIObjectPrivate
operator|::
name|getField
argument_list|<
name|jboolean
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|fieldName
parameter_list|)
specifier|const
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jboolean
name|res
init|=
literal|0
decl_stmt|;
name|jfieldID
name|id
init|=
name|getCachedFieldID
argument_list|(
name|env
argument_list|,
name|d
operator|->
name|m_jclass
argument_list|,
name|fieldName
argument_list|,
literal|"Z"
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
name|res
operator|=
name|env
operator|->
name|GetBooleanField
argument_list|(
name|d
operator|->
name|m_jobject
argument_list|,
name|id
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|getField
name|jbyte
name|QJNIObjectPrivate
operator|::
name|getField
argument_list|<
name|jbyte
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|fieldName
parameter_list|)
specifier|const
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jbyte
name|res
init|=
literal|0
decl_stmt|;
name|jfieldID
name|id
init|=
name|getCachedFieldID
argument_list|(
name|env
argument_list|,
name|d
operator|->
name|m_jclass
argument_list|,
name|fieldName
argument_list|,
literal|"B"
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
name|res
operator|=
name|env
operator|->
name|GetByteField
argument_list|(
name|d
operator|->
name|m_jobject
argument_list|,
name|id
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|getField
name|jchar
name|QJNIObjectPrivate
operator|::
name|getField
argument_list|<
name|jchar
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|fieldName
parameter_list|)
specifier|const
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jchar
name|res
init|=
literal|0
decl_stmt|;
name|jfieldID
name|id
init|=
name|getCachedFieldID
argument_list|(
name|env
argument_list|,
name|d
operator|->
name|m_jclass
argument_list|,
name|fieldName
argument_list|,
literal|"C"
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
name|res
operator|=
name|env
operator|->
name|GetCharField
argument_list|(
name|d
operator|->
name|m_jobject
argument_list|,
name|id
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|getField
name|jshort
name|QJNIObjectPrivate
operator|::
name|getField
argument_list|<
name|jshort
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|fieldName
parameter_list|)
specifier|const
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jshort
name|res
init|=
literal|0
decl_stmt|;
name|jfieldID
name|id
init|=
name|getCachedFieldID
argument_list|(
name|env
argument_list|,
name|d
operator|->
name|m_jclass
argument_list|,
name|fieldName
argument_list|,
literal|"S"
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
name|res
operator|=
name|env
operator|->
name|GetShortField
argument_list|(
name|d
operator|->
name|m_jobject
argument_list|,
name|id
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|getField
name|jint
name|QJNIObjectPrivate
operator|::
name|getField
argument_list|<
name|jint
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|fieldName
parameter_list|)
specifier|const
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jint
name|res
init|=
literal|0
decl_stmt|;
name|jfieldID
name|id
init|=
name|getCachedFieldID
argument_list|(
name|env
argument_list|,
name|d
operator|->
name|m_jclass
argument_list|,
name|fieldName
argument_list|,
literal|"I"
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
name|res
operator|=
name|env
operator|->
name|GetIntField
argument_list|(
name|d
operator|->
name|m_jobject
argument_list|,
name|id
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|getField
name|jlong
name|QJNIObjectPrivate
operator|::
name|getField
argument_list|<
name|jlong
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|fieldName
parameter_list|)
specifier|const
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jlong
name|res
init|=
literal|0
decl_stmt|;
name|jfieldID
name|id
init|=
name|getCachedFieldID
argument_list|(
name|env
argument_list|,
name|d
operator|->
name|m_jclass
argument_list|,
name|fieldName
argument_list|,
literal|"J"
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
name|res
operator|=
name|env
operator|->
name|GetLongField
argument_list|(
name|d
operator|->
name|m_jobject
argument_list|,
name|id
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|getField
name|jfloat
name|QJNIObjectPrivate
operator|::
name|getField
argument_list|<
name|jfloat
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|fieldName
parameter_list|)
specifier|const
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jfloat
name|res
init|=
literal|0.f
decl_stmt|;
name|jfieldID
name|id
init|=
name|getCachedFieldID
argument_list|(
name|env
argument_list|,
name|d
operator|->
name|m_jclass
argument_list|,
name|fieldName
argument_list|,
literal|"F"
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
name|res
operator|=
name|env
operator|->
name|GetFloatField
argument_list|(
name|d
operator|->
name|m_jobject
argument_list|,
name|id
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|getField
name|jdouble
name|QJNIObjectPrivate
operator|::
name|getField
argument_list|<
name|jdouble
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|fieldName
parameter_list|)
specifier|const
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jdouble
name|res
init|=
literal|0.
decl_stmt|;
name|jfieldID
name|id
init|=
name|getCachedFieldID
argument_list|(
name|env
argument_list|,
name|d
operator|->
name|m_jclass
argument_list|,
name|fieldName
argument_list|,
literal|"D"
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
name|res
operator|=
name|env
operator|->
name|GetDoubleField
argument_list|(
name|d
operator|->
name|m_jobject
argument_list|,
name|id
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|getStaticField
name|jboolean
name|QJNIObjectPrivate
operator|::
name|getStaticField
argument_list|<
name|jboolean
argument_list|>
parameter_list|(
name|jclass
name|clazz
parameter_list|,
specifier|const
name|char
modifier|*
name|fieldName
parameter_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jboolean
name|res
init|=
literal|0
decl_stmt|;
name|jfieldID
name|id
init|=
name|getCachedFieldID
argument_list|(
name|env
argument_list|,
name|clazz
argument_list|,
name|fieldName
argument_list|,
literal|"Z"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
name|res
operator|=
name|env
operator|->
name|GetStaticBooleanField
argument_list|(
name|clazz
argument_list|,
name|id
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|getStaticField
name|jboolean
name|QJNIObjectPrivate
operator|::
name|getStaticField
argument_list|<
name|jboolean
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|className
parameter_list|,
specifier|const
name|char
modifier|*
name|fieldName
parameter_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jboolean
name|res
init|=
literal|0
decl_stmt|;
name|jclass
name|clazz
init|=
name|getCachedClass
argument_list|(
name|env
argument_list|,
name|className
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
condition|)
name|res
operator|=
name|getStaticField
argument_list|<
name|jboolean
argument_list|>
argument_list|(
name|clazz
argument_list|,
name|fieldName
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|getStaticField
name|jbyte
name|QJNIObjectPrivate
operator|::
name|getStaticField
argument_list|<
name|jbyte
argument_list|>
parameter_list|(
name|jclass
name|clazz
parameter_list|,
specifier|const
name|char
modifier|*
name|fieldName
parameter_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jbyte
name|res
init|=
literal|0
decl_stmt|;
name|jfieldID
name|id
init|=
name|getCachedFieldID
argument_list|(
name|env
argument_list|,
name|clazz
argument_list|,
name|fieldName
argument_list|,
literal|"B"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
name|res
operator|=
name|env
operator|->
name|GetStaticByteField
argument_list|(
name|clazz
argument_list|,
name|id
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|getStaticField
name|jbyte
name|QJNIObjectPrivate
operator|::
name|getStaticField
argument_list|<
name|jbyte
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|className
parameter_list|,
specifier|const
name|char
modifier|*
name|fieldName
parameter_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jbyte
name|res
init|=
literal|0
decl_stmt|;
name|jclass
name|clazz
init|=
name|getCachedClass
argument_list|(
name|env
argument_list|,
name|className
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
condition|)
name|res
operator|=
name|getStaticField
argument_list|<
name|jbyte
argument_list|>
argument_list|(
name|clazz
argument_list|,
name|fieldName
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|getStaticField
name|jchar
name|QJNIObjectPrivate
operator|::
name|getStaticField
argument_list|<
name|jchar
argument_list|>
parameter_list|(
name|jclass
name|clazz
parameter_list|,
specifier|const
name|char
modifier|*
name|fieldName
parameter_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jchar
name|res
init|=
literal|0
decl_stmt|;
name|jfieldID
name|id
init|=
name|getCachedFieldID
argument_list|(
name|env
argument_list|,
name|clazz
argument_list|,
name|fieldName
argument_list|,
literal|"C"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
name|res
operator|=
name|env
operator|->
name|GetStaticCharField
argument_list|(
name|clazz
argument_list|,
name|id
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|getStaticField
name|jchar
name|QJNIObjectPrivate
operator|::
name|getStaticField
argument_list|<
name|jchar
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|className
parameter_list|,
specifier|const
name|char
modifier|*
name|fieldName
parameter_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jchar
name|res
init|=
literal|0
decl_stmt|;
name|jclass
name|clazz
init|=
name|getCachedClass
argument_list|(
name|env
argument_list|,
name|className
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
condition|)
name|res
operator|=
name|getStaticField
argument_list|<
name|jchar
argument_list|>
argument_list|(
name|clazz
argument_list|,
name|fieldName
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|getStaticField
name|jshort
name|QJNIObjectPrivate
operator|::
name|getStaticField
argument_list|<
name|jshort
argument_list|>
parameter_list|(
name|jclass
name|clazz
parameter_list|,
specifier|const
name|char
modifier|*
name|fieldName
parameter_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jshort
name|res
init|=
literal|0
decl_stmt|;
name|jfieldID
name|id
init|=
name|getCachedFieldID
argument_list|(
name|env
argument_list|,
name|clazz
argument_list|,
name|fieldName
argument_list|,
literal|"S"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
name|res
operator|=
name|env
operator|->
name|GetStaticShortField
argument_list|(
name|clazz
argument_list|,
name|id
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|getStaticField
name|jshort
name|QJNIObjectPrivate
operator|::
name|getStaticField
argument_list|<
name|jshort
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|className
parameter_list|,
specifier|const
name|char
modifier|*
name|fieldName
parameter_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jshort
name|res
init|=
literal|0
decl_stmt|;
name|jclass
name|clazz
init|=
name|getCachedClass
argument_list|(
name|env
argument_list|,
name|className
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
condition|)
name|res
operator|=
name|getStaticField
argument_list|<
name|jshort
argument_list|>
argument_list|(
name|clazz
argument_list|,
name|fieldName
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|getStaticField
name|jint
name|QJNIObjectPrivate
operator|::
name|getStaticField
argument_list|<
name|jint
argument_list|>
parameter_list|(
name|jclass
name|clazz
parameter_list|,
specifier|const
name|char
modifier|*
name|fieldName
parameter_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jint
name|res
init|=
literal|0
decl_stmt|;
name|jfieldID
name|id
init|=
name|getCachedFieldID
argument_list|(
name|env
argument_list|,
name|clazz
argument_list|,
name|fieldName
argument_list|,
literal|"I"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
name|res
operator|=
name|env
operator|->
name|GetStaticIntField
argument_list|(
name|clazz
argument_list|,
name|id
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|getStaticField
name|jint
name|QJNIObjectPrivate
operator|::
name|getStaticField
argument_list|<
name|jint
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|className
parameter_list|,
specifier|const
name|char
modifier|*
name|fieldName
parameter_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jint
name|res
init|=
literal|0
decl_stmt|;
name|jclass
name|clazz
init|=
name|getCachedClass
argument_list|(
name|env
argument_list|,
name|className
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
condition|)
name|res
operator|=
name|getStaticField
argument_list|<
name|jint
argument_list|>
argument_list|(
name|clazz
argument_list|,
name|fieldName
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|getStaticField
name|jlong
name|QJNIObjectPrivate
operator|::
name|getStaticField
argument_list|<
name|jlong
argument_list|>
parameter_list|(
name|jclass
name|clazz
parameter_list|,
specifier|const
name|char
modifier|*
name|fieldName
parameter_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jlong
name|res
init|=
literal|0
decl_stmt|;
name|jfieldID
name|id
init|=
name|getCachedFieldID
argument_list|(
name|env
argument_list|,
name|clazz
argument_list|,
name|fieldName
argument_list|,
literal|"J"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
name|res
operator|=
name|env
operator|->
name|GetStaticLongField
argument_list|(
name|clazz
argument_list|,
name|id
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|getStaticField
name|jlong
name|QJNIObjectPrivate
operator|::
name|getStaticField
argument_list|<
name|jlong
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|className
parameter_list|,
specifier|const
name|char
modifier|*
name|fieldName
parameter_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jlong
name|res
init|=
literal|0
decl_stmt|;
name|jclass
name|clazz
init|=
name|getCachedClass
argument_list|(
name|env
argument_list|,
name|className
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
condition|)
name|res
operator|=
name|getStaticField
argument_list|<
name|jlong
argument_list|>
argument_list|(
name|clazz
argument_list|,
name|fieldName
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|getStaticField
name|jfloat
name|QJNIObjectPrivate
operator|::
name|getStaticField
argument_list|<
name|jfloat
argument_list|>
parameter_list|(
name|jclass
name|clazz
parameter_list|,
specifier|const
name|char
modifier|*
name|fieldName
parameter_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jfloat
name|res
init|=
literal|0.f
decl_stmt|;
name|jfieldID
name|id
init|=
name|getCachedFieldID
argument_list|(
name|env
argument_list|,
name|clazz
argument_list|,
name|fieldName
argument_list|,
literal|"F"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
name|res
operator|=
name|env
operator|->
name|GetStaticFloatField
argument_list|(
name|clazz
argument_list|,
name|id
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|getStaticField
name|jfloat
name|QJNIObjectPrivate
operator|::
name|getStaticField
argument_list|<
name|jfloat
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|className
parameter_list|,
specifier|const
name|char
modifier|*
name|fieldName
parameter_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jfloat
name|res
init|=
literal|0.f
decl_stmt|;
name|jclass
name|clazz
init|=
name|getCachedClass
argument_list|(
name|env
argument_list|,
name|className
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
condition|)
name|res
operator|=
name|getStaticField
argument_list|<
name|jfloat
argument_list|>
argument_list|(
name|clazz
argument_list|,
name|fieldName
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|getStaticField
name|jdouble
name|QJNIObjectPrivate
operator|::
name|getStaticField
argument_list|<
name|jdouble
argument_list|>
parameter_list|(
name|jclass
name|clazz
parameter_list|,
specifier|const
name|char
modifier|*
name|fieldName
parameter_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jdouble
name|res
init|=
literal|0.
decl_stmt|;
name|jfieldID
name|id
init|=
name|getCachedFieldID
argument_list|(
name|env
argument_list|,
name|clazz
argument_list|,
name|fieldName
argument_list|,
literal|"D"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
name|res
operator|=
name|env
operator|->
name|GetStaticDoubleField
argument_list|(
name|clazz
argument_list|,
name|id
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|getStaticField
name|jdouble
name|QJNIObjectPrivate
operator|::
name|getStaticField
argument_list|<
name|jdouble
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|className
parameter_list|,
specifier|const
name|char
modifier|*
name|fieldName
parameter_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jdouble
name|res
init|=
literal|0.
decl_stmt|;
name|jclass
name|clazz
init|=
name|getCachedClass
argument_list|(
name|env
argument_list|,
name|className
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
condition|)
name|res
operator|=
name|getStaticField
argument_list|<
name|jdouble
argument_list|>
argument_list|(
name|clazz
argument_list|,
name|fieldName
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
end_function
begin_function
DECL|function|getObjectField
name|QJNIObjectPrivate
name|QJNIObjectPrivate
operator|::
name|getObjectField
parameter_list|(
specifier|const
name|char
modifier|*
name|fieldName
parameter_list|,
specifier|const
name|char
modifier|*
name|sig
parameter_list|)
specifier|const
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jobject
name|res
init|=
literal|0
decl_stmt|;
name|jfieldID
name|id
init|=
name|getCachedFieldID
argument_list|(
name|env
argument_list|,
name|d
operator|->
name|m_jclass
argument_list|,
name|fieldName
argument_list|,
name|sig
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
block|{
name|res
operator|=
name|env
operator|->
name|GetObjectField
argument_list|(
name|d
operator|->
name|m_jobject
argument_list|,
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|res
operator|&&
name|env
operator|->
name|ExceptionCheck
argument_list|()
condition|)
name|res
operator|=
literal|0
expr_stmt|;
block|}
name|QJNIObjectPrivate
name|obj
argument_list|(
name|res
argument_list|)
decl_stmt|;
name|env
operator|->
name|DeleteLocalRef
argument_list|(
name|res
argument_list|)
expr_stmt|;
return|return
name|obj
return|;
block|}
end_function
begin_function
DECL|function|getStaticObjectField
name|QJNIObjectPrivate
name|QJNIObjectPrivate
operator|::
name|getStaticObjectField
parameter_list|(
specifier|const
name|char
modifier|*
name|className
parameter_list|,
specifier|const
name|char
modifier|*
name|fieldName
parameter_list|,
specifier|const
name|char
modifier|*
name|sig
parameter_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|QJNIObjectPrivate
name|res
decl_stmt|;
name|jclass
name|clazz
init|=
name|getCachedClass
argument_list|(
name|env
argument_list|,
name|className
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
condition|)
name|res
operator|=
name|getStaticObjectField
argument_list|(
name|clazz
argument_list|,
name|fieldName
argument_list|,
name|sig
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
end_function
begin_function
DECL|function|getStaticObjectField
name|QJNIObjectPrivate
name|QJNIObjectPrivate
operator|::
name|getStaticObjectField
parameter_list|(
name|jclass
name|clazz
parameter_list|,
specifier|const
name|char
modifier|*
name|fieldName
parameter_list|,
specifier|const
name|char
modifier|*
name|sig
parameter_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jobject
name|res
init|=
literal|0
decl_stmt|;
name|jfieldID
name|id
init|=
name|getCachedFieldID
argument_list|(
name|env
argument_list|,
name|clazz
argument_list|,
name|fieldName
argument_list|,
name|sig
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
block|{
name|res
operator|=
name|env
operator|->
name|GetStaticObjectField
argument_list|(
name|clazz
argument_list|,
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|res
operator|&&
name|env
operator|->
name|ExceptionCheck
argument_list|()
condition|)
name|res
operator|=
literal|0
expr_stmt|;
block|}
name|QJNIObjectPrivate
name|obj
argument_list|(
name|res
argument_list|)
decl_stmt|;
name|env
operator|->
name|DeleteLocalRef
argument_list|(
name|res
argument_list|)
expr_stmt|;
return|return
name|obj
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|setField
name|void
name|QJNIObjectPrivate
operator|::
name|setField
argument_list|<
name|jboolean
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|fieldName
parameter_list|,
name|jboolean
name|value
parameter_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jfieldID
name|id
init|=
name|getCachedFieldID
argument_list|(
name|env
argument_list|,
name|d
operator|->
name|m_jclass
argument_list|,
name|fieldName
argument_list|,
literal|"Z"
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
name|env
operator|->
name|SetBooleanField
argument_list|(
name|d
operator|->
name|m_jobject
argument_list|,
name|id
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|setField
name|void
name|QJNIObjectPrivate
operator|::
name|setField
argument_list|<
name|jbyte
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|fieldName
parameter_list|,
name|jbyte
name|value
parameter_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jfieldID
name|id
init|=
name|getCachedFieldID
argument_list|(
name|env
argument_list|,
name|d
operator|->
name|m_jclass
argument_list|,
name|fieldName
argument_list|,
literal|"B"
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
name|env
operator|->
name|SetByteField
argument_list|(
name|d
operator|->
name|m_jobject
argument_list|,
name|id
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|setField
name|void
name|QJNIObjectPrivate
operator|::
name|setField
argument_list|<
name|jchar
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|fieldName
parameter_list|,
name|jchar
name|value
parameter_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jfieldID
name|id
init|=
name|getCachedFieldID
argument_list|(
name|env
argument_list|,
name|d
operator|->
name|m_jclass
argument_list|,
name|fieldName
argument_list|,
literal|"C"
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
name|env
operator|->
name|SetCharField
argument_list|(
name|d
operator|->
name|m_jobject
argument_list|,
name|id
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|setField
name|void
name|QJNIObjectPrivate
operator|::
name|setField
argument_list|<
name|jshort
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|fieldName
parameter_list|,
name|jshort
name|value
parameter_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jfieldID
name|id
init|=
name|getCachedFieldID
argument_list|(
name|env
argument_list|,
name|d
operator|->
name|m_jclass
argument_list|,
name|fieldName
argument_list|,
literal|"S"
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
name|env
operator|->
name|SetShortField
argument_list|(
name|d
operator|->
name|m_jobject
argument_list|,
name|id
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|setField
name|void
name|QJNIObjectPrivate
operator|::
name|setField
argument_list|<
name|jint
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|fieldName
parameter_list|,
name|jint
name|value
parameter_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jfieldID
name|id
init|=
name|getCachedFieldID
argument_list|(
name|env
argument_list|,
name|d
operator|->
name|m_jclass
argument_list|,
name|fieldName
argument_list|,
literal|"I"
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
name|env
operator|->
name|SetIntField
argument_list|(
name|d
operator|->
name|m_jobject
argument_list|,
name|id
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|setField
name|void
name|QJNIObjectPrivate
operator|::
name|setField
argument_list|<
name|jlong
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|fieldName
parameter_list|,
name|jlong
name|value
parameter_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jfieldID
name|id
init|=
name|getCachedFieldID
argument_list|(
name|env
argument_list|,
name|d
operator|->
name|m_jclass
argument_list|,
name|fieldName
argument_list|,
literal|"J"
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
name|env
operator|->
name|SetLongField
argument_list|(
name|d
operator|->
name|m_jobject
argument_list|,
name|id
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|setField
name|void
name|QJNIObjectPrivate
operator|::
name|setField
argument_list|<
name|jfloat
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|fieldName
parameter_list|,
name|jfloat
name|value
parameter_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jfieldID
name|id
init|=
name|getCachedFieldID
argument_list|(
name|env
argument_list|,
name|d
operator|->
name|m_jclass
argument_list|,
name|fieldName
argument_list|,
literal|"F"
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
name|env
operator|->
name|SetFloatField
argument_list|(
name|d
operator|->
name|m_jobject
argument_list|,
name|id
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|setField
name|void
name|QJNIObjectPrivate
operator|::
name|setField
argument_list|<
name|jdouble
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|fieldName
parameter_list|,
name|jdouble
name|value
parameter_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jfieldID
name|id
init|=
name|getCachedFieldID
argument_list|(
name|env
argument_list|,
name|d
operator|->
name|m_jclass
argument_list|,
name|fieldName
argument_list|,
literal|"D"
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
name|env
operator|->
name|SetDoubleField
argument_list|(
name|d
operator|->
name|m_jobject
argument_list|,
name|id
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|setField
name|void
name|QJNIObjectPrivate
operator|::
name|setField
argument_list|<
name|jbooleanArray
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|fieldName
parameter_list|,
name|jbooleanArray
name|value
parameter_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jfieldID
name|id
init|=
name|getCachedFieldID
argument_list|(
name|env
argument_list|,
name|d
operator|->
name|m_jclass
argument_list|,
name|fieldName
argument_list|,
literal|"[Z"
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
name|env
operator|->
name|SetObjectField
argument_list|(
name|d
operator|->
name|m_jobject
argument_list|,
name|id
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|setField
name|void
name|QJNIObjectPrivate
operator|::
name|setField
argument_list|<
name|jbyteArray
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|fieldName
parameter_list|,
name|jbyteArray
name|value
parameter_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jfieldID
name|id
init|=
name|getCachedFieldID
argument_list|(
name|env
argument_list|,
name|d
operator|->
name|m_jclass
argument_list|,
name|fieldName
argument_list|,
literal|"[B"
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
name|env
operator|->
name|SetObjectField
argument_list|(
name|d
operator|->
name|m_jobject
argument_list|,
name|id
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|setField
name|void
name|QJNIObjectPrivate
operator|::
name|setField
argument_list|<
name|jcharArray
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|fieldName
parameter_list|,
name|jcharArray
name|value
parameter_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jfieldID
name|id
init|=
name|getCachedFieldID
argument_list|(
name|env
argument_list|,
name|d
operator|->
name|m_jclass
argument_list|,
name|fieldName
argument_list|,
literal|"[C"
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
name|env
operator|->
name|SetObjectField
argument_list|(
name|d
operator|->
name|m_jobject
argument_list|,
name|id
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|setField
name|void
name|QJNIObjectPrivate
operator|::
name|setField
argument_list|<
name|jshortArray
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|fieldName
parameter_list|,
name|jshortArray
name|value
parameter_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jfieldID
name|id
init|=
name|getCachedFieldID
argument_list|(
name|env
argument_list|,
name|d
operator|->
name|m_jclass
argument_list|,
name|fieldName
argument_list|,
literal|"[S"
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
name|env
operator|->
name|SetObjectField
argument_list|(
name|d
operator|->
name|m_jobject
argument_list|,
name|id
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|setField
name|void
name|QJNIObjectPrivate
operator|::
name|setField
argument_list|<
name|jintArray
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|fieldName
parameter_list|,
name|jintArray
name|value
parameter_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jfieldID
name|id
init|=
name|getCachedFieldID
argument_list|(
name|env
argument_list|,
name|d
operator|->
name|m_jclass
argument_list|,
name|fieldName
argument_list|,
literal|"[I"
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
name|env
operator|->
name|SetObjectField
argument_list|(
name|d
operator|->
name|m_jobject
argument_list|,
name|id
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|setField
name|void
name|QJNIObjectPrivate
operator|::
name|setField
argument_list|<
name|jlongArray
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|fieldName
parameter_list|,
name|jlongArray
name|value
parameter_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jfieldID
name|id
init|=
name|getCachedFieldID
argument_list|(
name|env
argument_list|,
name|d
operator|->
name|m_jclass
argument_list|,
name|fieldName
argument_list|,
literal|"[J"
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
name|env
operator|->
name|SetObjectField
argument_list|(
name|d
operator|->
name|m_jobject
argument_list|,
name|id
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|setField
name|void
name|QJNIObjectPrivate
operator|::
name|setField
argument_list|<
name|jfloatArray
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|fieldName
parameter_list|,
name|jfloatArray
name|value
parameter_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jfieldID
name|id
init|=
name|getCachedFieldID
argument_list|(
name|env
argument_list|,
name|d
operator|->
name|m_jclass
argument_list|,
name|fieldName
argument_list|,
literal|"[F"
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
name|env
operator|->
name|SetObjectField
argument_list|(
name|d
operator|->
name|m_jobject
argument_list|,
name|id
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|setField
name|void
name|QJNIObjectPrivate
operator|::
name|setField
argument_list|<
name|jdoubleArray
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|fieldName
parameter_list|,
name|jdoubleArray
name|value
parameter_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jfieldID
name|id
init|=
name|getCachedFieldID
argument_list|(
name|env
argument_list|,
name|d
operator|->
name|m_jclass
argument_list|,
name|fieldName
argument_list|,
literal|"[D"
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
name|env
operator|->
name|SetObjectField
argument_list|(
name|d
operator|->
name|m_jobject
argument_list|,
name|id
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|setField
name|void
name|QJNIObjectPrivate
operator|::
name|setField
argument_list|<
name|jstring
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|fieldName
parameter_list|,
name|jstring
name|value
parameter_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jfieldID
name|id
init|=
name|getCachedFieldID
argument_list|(
name|env
argument_list|,
name|d
operator|->
name|m_jclass
argument_list|,
name|fieldName
argument_list|,
literal|"Ljava/lang/String;"
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
name|env
operator|->
name|SetObjectField
argument_list|(
name|d
operator|->
name|m_jobject
argument_list|,
name|id
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|setField
name|void
name|QJNIObjectPrivate
operator|::
name|setField
argument_list|<
name|jobject
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|fieldName
parameter_list|,
specifier|const
name|char
modifier|*
name|sig
parameter_list|,
name|jobject
name|value
parameter_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jfieldID
name|id
init|=
name|getCachedFieldID
argument_list|(
name|env
argument_list|,
name|d
operator|->
name|m_jclass
argument_list|,
name|fieldName
argument_list|,
name|sig
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
name|env
operator|->
name|SetObjectField
argument_list|(
name|d
operator|->
name|m_jobject
argument_list|,
name|id
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|setField
name|void
name|QJNIObjectPrivate
operator|::
name|setField
argument_list|<
name|jobjectArray
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|fieldName
parameter_list|,
specifier|const
name|char
modifier|*
name|sig
parameter_list|,
name|jobjectArray
name|value
parameter_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jfieldID
name|id
init|=
name|getCachedFieldID
argument_list|(
name|env
argument_list|,
name|d
operator|->
name|m_jclass
argument_list|,
name|fieldName
argument_list|,
name|sig
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
name|env
operator|->
name|SetObjectField
argument_list|(
name|d
operator|->
name|m_jobject
argument_list|,
name|id
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|setStaticField
name|void
name|QJNIObjectPrivate
operator|::
name|setStaticField
argument_list|<
name|jboolean
argument_list|>
parameter_list|(
name|jclass
name|clazz
parameter_list|,
specifier|const
name|char
modifier|*
name|fieldName
parameter_list|,
name|jboolean
name|value
parameter_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jfieldID
name|id
init|=
name|getCachedFieldID
argument_list|(
name|env
argument_list|,
name|clazz
argument_list|,
name|fieldName
argument_list|,
literal|"Z"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
name|env
operator|->
name|SetStaticBooleanField
argument_list|(
name|clazz
argument_list|,
name|id
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|setStaticField
name|void
name|QJNIObjectPrivate
operator|::
name|setStaticField
argument_list|<
name|jboolean
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|className
parameter_list|,
specifier|const
name|char
modifier|*
name|fieldName
parameter_list|,
name|jboolean
name|value
parameter_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jclass
name|clazz
init|=
name|getCachedClass
argument_list|(
name|env
argument_list|,
name|className
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
condition|)
name|setStaticField
argument_list|<
name|jboolean
argument_list|>
argument_list|(
name|clazz
argument_list|,
name|fieldName
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|setStaticField
name|void
name|QJNIObjectPrivate
operator|::
name|setStaticField
argument_list|<
name|jbyte
argument_list|>
parameter_list|(
name|jclass
name|clazz
parameter_list|,
specifier|const
name|char
modifier|*
name|fieldName
parameter_list|,
name|jbyte
name|value
parameter_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jfieldID
name|id
init|=
name|getCachedFieldID
argument_list|(
name|env
argument_list|,
name|clazz
argument_list|,
name|fieldName
argument_list|,
literal|"B"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
name|env
operator|->
name|SetStaticByteField
argument_list|(
name|clazz
argument_list|,
name|id
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|setStaticField
name|void
name|QJNIObjectPrivate
operator|::
name|setStaticField
argument_list|<
name|jbyte
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|className
parameter_list|,
specifier|const
name|char
modifier|*
name|fieldName
parameter_list|,
name|jbyte
name|value
parameter_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jclass
name|clazz
init|=
name|getCachedClass
argument_list|(
name|env
argument_list|,
name|className
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
condition|)
name|setStaticField
argument_list|<
name|jbyte
argument_list|>
argument_list|(
name|clazz
argument_list|,
name|fieldName
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|setStaticField
name|void
name|QJNIObjectPrivate
operator|::
name|setStaticField
argument_list|<
name|jchar
argument_list|>
parameter_list|(
name|jclass
name|clazz
parameter_list|,
specifier|const
name|char
modifier|*
name|fieldName
parameter_list|,
name|jchar
name|value
parameter_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jfieldID
name|id
init|=
name|getCachedFieldID
argument_list|(
name|env
argument_list|,
name|clazz
argument_list|,
name|fieldName
argument_list|,
literal|"C"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
name|env
operator|->
name|SetStaticCharField
argument_list|(
name|clazz
argument_list|,
name|id
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|setStaticField
name|void
name|QJNIObjectPrivate
operator|::
name|setStaticField
argument_list|<
name|jchar
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|className
parameter_list|,
specifier|const
name|char
modifier|*
name|fieldName
parameter_list|,
name|jchar
name|value
parameter_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jclass
name|clazz
init|=
name|getCachedClass
argument_list|(
name|env
argument_list|,
name|className
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
condition|)
name|setStaticField
argument_list|<
name|jchar
argument_list|>
argument_list|(
name|clazz
argument_list|,
name|fieldName
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|setStaticField
name|void
name|QJNIObjectPrivate
operator|::
name|setStaticField
argument_list|<
name|jshort
argument_list|>
parameter_list|(
name|jclass
name|clazz
parameter_list|,
specifier|const
name|char
modifier|*
name|fieldName
parameter_list|,
name|jshort
name|value
parameter_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jfieldID
name|id
init|=
name|getCachedFieldID
argument_list|(
name|env
argument_list|,
name|clazz
argument_list|,
name|fieldName
argument_list|,
literal|"S"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
name|env
operator|->
name|SetStaticShortField
argument_list|(
name|clazz
argument_list|,
name|id
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|setStaticField
name|void
name|QJNIObjectPrivate
operator|::
name|setStaticField
argument_list|<
name|jshort
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|className
parameter_list|,
specifier|const
name|char
modifier|*
name|fieldName
parameter_list|,
name|jshort
name|value
parameter_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jclass
name|clazz
init|=
name|getCachedClass
argument_list|(
name|env
argument_list|,
name|className
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
condition|)
name|setStaticField
argument_list|<
name|jshort
argument_list|>
argument_list|(
name|clazz
argument_list|,
name|fieldName
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|setStaticField
name|void
name|QJNIObjectPrivate
operator|::
name|setStaticField
argument_list|<
name|jint
argument_list|>
parameter_list|(
name|jclass
name|clazz
parameter_list|,
specifier|const
name|char
modifier|*
name|fieldName
parameter_list|,
name|jint
name|value
parameter_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jfieldID
name|id
init|=
name|getCachedFieldID
argument_list|(
name|env
argument_list|,
name|clazz
argument_list|,
name|fieldName
argument_list|,
literal|"I"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
name|env
operator|->
name|SetStaticIntField
argument_list|(
name|clazz
argument_list|,
name|id
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|setStaticField
name|void
name|QJNIObjectPrivate
operator|::
name|setStaticField
argument_list|<
name|jint
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|className
parameter_list|,
specifier|const
name|char
modifier|*
name|fieldName
parameter_list|,
name|jint
name|value
parameter_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jclass
name|clazz
init|=
name|getCachedClass
argument_list|(
name|env
argument_list|,
name|className
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
condition|)
name|setStaticField
argument_list|<
name|jint
argument_list|>
argument_list|(
name|clazz
argument_list|,
name|fieldName
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|setStaticField
name|void
name|QJNIObjectPrivate
operator|::
name|setStaticField
argument_list|<
name|jlong
argument_list|>
parameter_list|(
name|jclass
name|clazz
parameter_list|,
specifier|const
name|char
modifier|*
name|fieldName
parameter_list|,
name|jlong
name|value
parameter_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jfieldID
name|id
init|=
name|getCachedFieldID
argument_list|(
name|env
argument_list|,
name|clazz
argument_list|,
name|fieldName
argument_list|,
literal|"J"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
name|env
operator|->
name|SetStaticLongField
argument_list|(
name|clazz
argument_list|,
name|id
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|setStaticField
name|void
name|QJNIObjectPrivate
operator|::
name|setStaticField
argument_list|<
name|jlong
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|className
parameter_list|,
specifier|const
name|char
modifier|*
name|fieldName
parameter_list|,
name|jlong
name|value
parameter_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jclass
name|clazz
init|=
name|getCachedClass
argument_list|(
name|env
argument_list|,
name|className
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
condition|)
name|setStaticField
argument_list|<
name|jlong
argument_list|>
argument_list|(
name|clazz
argument_list|,
name|fieldName
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|setStaticField
name|void
name|QJNIObjectPrivate
operator|::
name|setStaticField
argument_list|<
name|jfloat
argument_list|>
parameter_list|(
name|jclass
name|clazz
parameter_list|,
specifier|const
name|char
modifier|*
name|fieldName
parameter_list|,
name|jfloat
name|value
parameter_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jfieldID
name|id
init|=
name|getCachedFieldID
argument_list|(
name|env
argument_list|,
name|clazz
argument_list|,
name|fieldName
argument_list|,
literal|"F"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
name|env
operator|->
name|SetStaticFloatField
argument_list|(
name|clazz
argument_list|,
name|id
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|setStaticField
name|void
name|QJNIObjectPrivate
operator|::
name|setStaticField
argument_list|<
name|jfloat
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|className
parameter_list|,
specifier|const
name|char
modifier|*
name|fieldName
parameter_list|,
name|jfloat
name|value
parameter_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jclass
name|clazz
init|=
name|getCachedClass
argument_list|(
name|env
argument_list|,
name|className
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
condition|)
name|setStaticField
argument_list|<
name|jfloat
argument_list|>
argument_list|(
name|clazz
argument_list|,
name|fieldName
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|setStaticField
name|void
name|QJNIObjectPrivate
operator|::
name|setStaticField
argument_list|<
name|jdouble
argument_list|>
parameter_list|(
name|jclass
name|clazz
parameter_list|,
specifier|const
name|char
modifier|*
name|fieldName
parameter_list|,
name|jdouble
name|value
parameter_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jfieldID
name|id
init|=
name|getCachedFieldID
argument_list|(
name|env
argument_list|,
name|clazz
argument_list|,
name|fieldName
argument_list|,
literal|"D"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
name|env
operator|->
name|SetStaticDoubleField
argument_list|(
name|clazz
argument_list|,
name|id
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|setStaticField
name|void
name|QJNIObjectPrivate
operator|::
name|setStaticField
argument_list|<
name|jdouble
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|className
parameter_list|,
specifier|const
name|char
modifier|*
name|fieldName
parameter_list|,
name|jdouble
name|value
parameter_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jclass
name|clazz
init|=
name|getCachedClass
argument_list|(
name|env
argument_list|,
name|className
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
condition|)
name|setStaticField
argument_list|<
name|jdouble
argument_list|>
argument_list|(
name|clazz
argument_list|,
name|fieldName
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|setStaticField
name|void
name|QJNIObjectPrivate
operator|::
name|setStaticField
argument_list|<
name|jobject
argument_list|>
parameter_list|(
name|jclass
name|clazz
parameter_list|,
specifier|const
name|char
modifier|*
name|fieldName
parameter_list|,
specifier|const
name|char
modifier|*
name|sig
parameter_list|,
name|jobject
name|value
parameter_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jfieldID
name|id
init|=
name|getCachedFieldID
argument_list|(
name|env
argument_list|,
name|clazz
argument_list|,
name|fieldName
argument_list|,
name|sig
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
name|env
operator|->
name|SetStaticObjectField
argument_list|(
name|clazz
argument_list|,
name|id
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|setStaticField
name|void
name|QJNIObjectPrivate
operator|::
name|setStaticField
argument_list|<
name|jobject
argument_list|>
parameter_list|(
specifier|const
name|char
modifier|*
name|className
parameter_list|,
specifier|const
name|char
modifier|*
name|fieldName
parameter_list|,
specifier|const
name|char
modifier|*
name|sig
parameter_list|,
name|jobject
name|value
parameter_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jclass
name|clazz
init|=
name|getCachedClass
argument_list|(
name|env
argument_list|,
name|className
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
condition|)
name|setStaticField
argument_list|<
name|jobject
argument_list|>
argument_list|(
name|clazz
argument_list|,
name|fieldName
argument_list|,
name|sig
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fromString
name|QJNIObjectPrivate
name|QJNIObjectPrivate
operator|::
name|fromString
parameter_list|(
specifier|const
name|QString
modifier|&
name|string
parameter_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|jstring
name|res
init|=
name|env
operator|->
name|NewString
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|jchar
operator|*
argument_list|>
argument_list|(
name|string
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|,
name|string
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|QJNIObjectPrivate
name|obj
argument_list|(
name|res
argument_list|)
decl_stmt|;
name|env
operator|->
name|DeleteLocalRef
argument_list|(
name|res
argument_list|)
expr_stmt|;
return|return
name|obj
return|;
block|}
end_function
begin_function
DECL|function|toString
name|QString
name|QJNIObjectPrivate
operator|::
name|toString
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|isValid
argument_list|()
condition|)
return|return
name|QString
argument_list|()
return|;
name|QJNIObjectPrivate
name|string
init|=
name|callObjectMethod
argument_list|<
name|jstring
argument_list|>
argument_list|(
literal|"toString"
argument_list|)
decl_stmt|;
return|return
name|qt_convertJString
argument_list|(
cast|static_cast
argument_list|<
name|jstring
argument_list|>
argument_list|(
name|string
operator|.
name|object
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|isClassAvailable
name|bool
name|QJNIObjectPrivate
operator|::
name|isClassAvailable
parameter_list|(
specifier|const
name|char
modifier|*
name|className
parameter_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
if|if
condition|(
operator|!
name|env
condition|)
return|return
literal|false
return|;
name|jclass
name|clazz
init|=
name|getCachedClass
argument_list|(
name|env
argument_list|,
name|className
argument_list|)
decl_stmt|;
return|return
operator|(
name|clazz
operator|!=
literal|0
operator|)
return|;
block|}
end_function
begin_function
DECL|function|isValid
name|bool
name|QJNIObjectPrivate
operator|::
name|isValid
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|m_jobject
return|;
block|}
end_function
begin_function
DECL|function|isSameObject
name|bool
name|QJNIObjectPrivate
operator|::
name|isSameObject
parameter_list|(
name|jobject
name|obj
parameter_list|)
specifier|const
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
return|return
name|env
operator|->
name|IsSameObject
argument_list|(
name|d
operator|->
name|m_jobject
argument_list|,
name|obj
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|isSameObject
name|bool
name|QJNIObjectPrivate
operator|::
name|isSameObject
parameter_list|(
specifier|const
name|QJNIObjectPrivate
modifier|&
name|other
parameter_list|)
specifier|const
block|{
return|return
name|isSameObject
argument_list|(
name|other
operator|.
name|d
operator|->
name|m_jobject
argument_list|)
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
