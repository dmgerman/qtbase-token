begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QMETAOBJECT_P_H
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|UTILS_H
argument_list|)
end_if
begin_error
error|#
directive|error
literal|"Include qmetaobject_p.h (or moc's utils.h) before including this file."
end_error
begin_endif
endif|#
directive|endif
end_endif
begin_function
name|QT_BEGIN_NAMESPACE
comment|// This function is shared with moc.cpp. This file should be included where needed.
DECL|function|normalizeTypeInternal
specifier|static
name|QByteArray
name|normalizeTypeInternal
parameter_list|(
specifier|const
name|char
modifier|*
name|t
parameter_list|,
specifier|const
name|char
modifier|*
name|e
parameter_list|,
name|bool
name|fixScope
init|=
name|false
parameter_list|,
name|bool
name|adjustConst
init|=
name|true
parameter_list|)
block|{
name|int
name|len
init|=
name|e
operator|-
name|t
decl_stmt|;
comment|/*       Convert 'char const *' into 'const char *'. Start at index 1,       not 0, because 'const char *' is already OK.     */
name|QByteArray
name|constbuf
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|t
index|[
name|i
index|]
operator|==
literal|'c'
operator|&&
name|strncmp
argument_list|(
name|t
operator|+
name|i
operator|+
literal|1
argument_list|,
literal|"onst"
argument_list|,
literal|4
argument_list|)
operator|==
literal|0
operator|&&
operator|(
name|i
operator|+
literal|5
operator|>=
name|len
operator|||
operator|!
name|is_ident_char
argument_list|(
name|t
index|[
name|i
operator|+
literal|5
index|]
argument_list|)
operator|)
operator|&&
operator|!
name|is_ident_char
argument_list|(
name|t
index|[
name|i
operator|-
literal|1
index|]
argument_list|)
condition|)
block|{
name|constbuf
operator|=
name|QByteArray
argument_list|(
name|t
argument_list|,
name|len
argument_list|)
expr_stmt|;
if|if
condition|(
name|is_space
argument_list|(
name|t
index|[
name|i
operator|-
literal|1
index|]
argument_list|)
condition|)
name|constbuf
operator|.
name|remove
argument_list|(
name|i
operator|-
literal|1
argument_list|,
literal|6
argument_list|)
expr_stmt|;
else|else
name|constbuf
operator|.
name|remove
argument_list|(
name|i
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|constbuf
operator|.
name|prepend
argument_list|(
literal|"const "
argument_list|)
expr_stmt|;
name|t
operator|=
name|constbuf
operator|.
name|data
argument_list|()
expr_stmt|;
name|e
operator|=
name|constbuf
operator|.
name|data
argument_list|()
operator|+
name|constbuf
operator|.
name|length
argument_list|()
expr_stmt|;
break|break;
block|}
comment|/*           We musn't convert 'char * const *' into 'const char **'           and we must beware of 'Bar<const Bla>'.         */
if|if
condition|(
name|t
index|[
name|i
index|]
operator|==
literal|'&'
operator|||
name|t
index|[
name|i
index|]
operator|==
literal|'*'
operator|||
name|t
index|[
name|i
index|]
operator|==
literal|'<'
condition|)
break|break;
block|}
if|if
condition|(
name|adjustConst
operator|&&
name|e
operator|>
name|t
operator|+
literal|6
operator|&&
name|strncmp
argument_list|(
literal|"const "
argument_list|,
name|t
argument_list|,
literal|6
argument_list|)
operator|==
literal|0
condition|)
block|{
if|if
condition|(
operator|*
operator|(
name|e
operator|-
literal|1
operator|)
operator|==
literal|'&'
condition|)
block|{
comment|// treat const reference as value
name|t
operator|+=
literal|6
expr_stmt|;
operator|--
name|e
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|is_ident_char
argument_list|(
operator|*
operator|(
name|e
operator|-
literal|1
operator|)
argument_list|)
operator|||
operator|*
operator|(
name|e
operator|-
literal|1
operator|)
operator|==
literal|'>'
condition|)
block|{
comment|// treat const value as value
name|t
operator|+=
literal|6
expr_stmt|;
block|}
block|}
name|QByteArray
name|result
decl_stmt|;
name|result
operator|.
name|reserve
argument_list|(
name|len
argument_list|)
expr_stmt|;
if|#
directive|if
literal|1
comment|// consume initial 'const '
if|if
condition|(
name|strncmp
argument_list|(
literal|"const "
argument_list|,
name|t
argument_list|,
literal|6
argument_list|)
operator|==
literal|0
condition|)
block|{
name|t
operator|+=
literal|6
expr_stmt|;
name|result
operator|+=
literal|"const "
expr_stmt|;
block|}
endif|#
directive|endif
comment|// some type substitutions for 'unsigned x'
if|if
condition|(
name|strncmp
argument_list|(
literal|"unsigned"
argument_list|,
name|t
argument_list|,
literal|8
argument_list|)
operator|==
literal|0
condition|)
block|{
comment|// make sure "unsigned" is an isolated word before making substitutions
if|if
condition|(
operator|!
name|t
index|[
literal|8
index|]
operator|||
operator|!
name|is_ident_char
argument_list|(
name|t
index|[
literal|8
index|]
argument_list|)
condition|)
block|{
if|if
condition|(
name|strncmp
argument_list|(
literal|" int"
argument_list|,
name|t
operator|+
literal|8
argument_list|,
literal|4
argument_list|)
operator|==
literal|0
condition|)
block|{
name|t
operator|+=
literal|8
operator|+
literal|4
expr_stmt|;
name|result
operator|+=
literal|"uint"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|strncmp
argument_list|(
literal|" long"
argument_list|,
name|t
operator|+
literal|8
argument_list|,
literal|5
argument_list|)
operator|==
literal|0
condition|)
block|{
if|if
condition|(
operator|(
name|strlen
argument_list|(
name|t
operator|+
literal|8
operator|+
literal|5
argument_list|)
operator|<
literal|4
operator|||
name|strncmp
argument_list|(
name|t
operator|+
literal|8
operator|+
literal|5
argument_list|,
literal|" int"
argument_list|,
literal|4
argument_list|)
operator|!=
literal|0
operator|)
comment|// preserve '[unsigned] long int'
operator|&&
operator|(
name|strlen
argument_list|(
name|t
operator|+
literal|8
operator|+
literal|5
argument_list|)
operator|<
literal|5
operator|||
name|strncmp
argument_list|(
name|t
operator|+
literal|8
operator|+
literal|5
argument_list|,
literal|" long"
argument_list|,
literal|5
argument_list|)
operator|!=
literal|0
operator|)
comment|// preserve '[unsigned] long long'
condition|)
block|{
name|t
operator|+=
literal|8
operator|+
literal|5
expr_stmt|;
name|result
operator|+=
literal|"ulong"
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|strncmp
argument_list|(
literal|" short"
argument_list|,
name|t
operator|+
literal|8
argument_list|,
literal|6
argument_list|)
operator|!=
literal|0
comment|// preserve unsigned short
operator|&&
name|strncmp
argument_list|(
literal|" char"
argument_list|,
name|t
operator|+
literal|8
argument_list|,
literal|5
argument_list|)
operator|!=
literal|0
condition|)
block|{
comment|// preserve unsigned char
comment|//  treat rest (unsigned) as uint
name|t
operator|+=
literal|8
expr_stmt|;
name|result
operator|+=
literal|"uint"
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// discard 'struct', 'class', and 'enum'; they are optional
comment|// and we don't want them in the normalized signature
struct|struct
block|{
specifier|const
name|char
modifier|*
name|keyword
decl_stmt|;
name|int
name|len
decl_stmt|;
block|}
name|optional
index|[]
init|=
block|{
block|{
literal|"struct "
block|,
literal|7
block|}
block|,
block|{
literal|"class "
block|,
literal|6
block|}
block|,
block|{
literal|"enum "
block|,
literal|5
block|}
block|,
block|{
literal|0
block|,
literal|0
block|}
block|}
struct|;
name|int
name|i
init|=
literal|0
decl_stmt|;
do|do
block|{
if|if
condition|(
name|strncmp
argument_list|(
name|optional
index|[
name|i
index|]
operator|.
name|keyword
argument_list|,
name|t
argument_list|,
name|optional
index|[
name|i
index|]
operator|.
name|len
argument_list|)
operator|==
literal|0
condition|)
block|{
name|t
operator|+=
name|optional
index|[
name|i
index|]
operator|.
name|len
expr_stmt|;
break|break;
block|}
block|}
do|while
condition|(
name|optional
index|[
operator|++
name|i
index|]
operator|.
name|keyword
operator|!=
literal|0
condition|)
do|;
block|}
name|bool
name|star
init|=
name|false
decl_stmt|;
while|while
condition|(
name|t
operator|!=
name|e
condition|)
block|{
name|char
name|c
init|=
operator|*
name|t
operator|++
decl_stmt|;
if|if
condition|(
name|fixScope
operator|&&
name|c
operator|==
literal|':'
operator|&&
operator|*
name|t
operator|==
literal|':'
condition|)
block|{
operator|++
name|t
expr_stmt|;
name|c
operator|=
operator|*
name|t
operator|++
expr_stmt|;
name|int
name|i
init|=
name|result
operator|.
name|size
argument_list|()
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|i
operator|>=
literal|0
operator|&&
name|is_ident_char
argument_list|(
name|result
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
operator|--
name|i
expr_stmt|;
name|result
operator|.
name|resize
argument_list|(
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|star
operator|=
name|star
operator|||
name|c
operator|==
literal|'*'
expr_stmt|;
name|result
operator|+=
name|c
expr_stmt|;
if|if
condition|(
name|c
operator|==
literal|'<'
condition|)
block|{
comment|//template recursion
specifier|const
name|char
modifier|*
name|tt
init|=
name|t
decl_stmt|;
name|int
name|templdepth
init|=
literal|1
decl_stmt|;
while|while
condition|(
name|t
operator|!=
name|e
condition|)
block|{
name|c
operator|=
operator|*
name|t
operator|++
expr_stmt|;
if|if
condition|(
name|c
operator|==
literal|'<'
condition|)
operator|++
name|templdepth
expr_stmt|;
if|if
condition|(
name|c
operator|==
literal|'>'
condition|)
operator|--
name|templdepth
expr_stmt|;
if|if
condition|(
name|templdepth
operator|==
literal|0
operator|||
operator|(
name|templdepth
operator|==
literal|1
operator|&&
name|c
operator|==
literal|','
operator|)
condition|)
block|{
name|result
operator|+=
name|normalizeTypeInternal
argument_list|(
name|tt
argument_list|,
name|t
operator|-
literal|1
argument_list|,
name|fixScope
argument_list|,
name|false
argument_list|)
expr_stmt|;
name|result
operator|+=
name|c
expr_stmt|;
if|if
condition|(
name|templdepth
operator|==
literal|0
condition|)
block|{
if|if
condition|(
operator|*
name|t
operator|==
literal|'>'
condition|)
name|result
operator|+=
literal|' '
expr_stmt|;
comment|// avoid>>
break|break;
block|}
name|tt
operator|=
name|t
expr_stmt|;
block|}
block|}
block|}
comment|// cv qualifers can appear after the type as well
if|if
condition|(
operator|!
name|is_ident_char
argument_list|(
name|c
argument_list|)
operator|&&
name|t
operator|!=
name|e
operator|&&
operator|(
name|e
operator|-
name|t
operator|>=
literal|5
operator|&&
name|strncmp
argument_list|(
literal|"const"
argument_list|,
name|t
argument_list|,
literal|5
argument_list|)
operator|==
literal|0
operator|)
operator|&&
operator|(
name|e
operator|-
name|t
operator|==
literal|5
operator|||
operator|!
name|is_ident_char
argument_list|(
name|t
index|[
literal|5
index|]
argument_list|)
operator|)
condition|)
block|{
name|t
operator|+=
literal|5
expr_stmt|;
while|while
condition|(
name|t
operator|!=
name|e
operator|&&
name|is_space
argument_list|(
operator|*
name|t
argument_list|)
condition|)
operator|++
name|t
expr_stmt|;
if|if
condition|(
name|adjustConst
operator|&&
name|t
operator|!=
name|e
operator|&&
operator|*
name|t
operator|==
literal|'&'
condition|)
block|{
comment|// treat const ref as value
operator|++
name|t
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|adjustConst
operator|&&
operator|!
name|star
condition|)
block|{
comment|// treat const as value
block|}
elseif|else
if|if
condition|(
operator|!
name|star
condition|)
block|{
comment|// move const to the front (but not if const comes after a *)
name|result
operator|.
name|prepend
argument_list|(
literal|"const "
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// keep const after a *
name|result
operator|+=
literal|"const"
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
