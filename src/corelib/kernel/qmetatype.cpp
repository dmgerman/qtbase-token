begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qmetatype.h"
end_include
begin_include
include|#
directive|include
file|"qobjectdefs.h"
end_include
begin_include
include|#
directive|include
file|"qdatetime.h"
end_include
begin_include
include|#
directive|include
file|"qbytearray.h"
end_include
begin_include
include|#
directive|include
file|"qreadwritelock.h"
end_include
begin_include
include|#
directive|include
file|"qstring.h"
end_include
begin_include
include|#
directive|include
file|"qstringlist.h"
end_include
begin_include
include|#
directive|include
file|"qvector.h"
end_include
begin_include
include|#
directive|include
file|"qlocale.h"
end_include
begin_include
include|#
directive|include
file|"qeasingcurve.h"
end_include
begin_include
include|#
directive|include
file|"qvariant.h"
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|QT_BOOTSTRAPPED
end_ifdef
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_GEOM_VARIANT
end_ifndef
begin_define
DECL|macro|QT_NO_GEOM_VARIANT
define|#
directive|define
name|QT_NO_GEOM_VARIANT
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_else
else|#
directive|else
end_else
begin_include
include|#
directive|include
file|"qbitarray.h"
end_include
begin_include
include|#
directive|include
file|"qurl.h"
end_include
begin_include
include|#
directive|include
file|"qvariant.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_GEOM_VARIANT
end_ifndef
begin_include
include|#
directive|include
file|"qsize.h"
end_include
begin_include
include|#
directive|include
file|"qpoint.h"
end_include
begin_include
include|#
directive|include
file|"qrect.h"
end_include
begin_include
include|#
directive|include
file|"qline.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
name|QT_BEGIN_NAMESPACE
DECL|macro|NS
define|#
directive|define
name|NS
parameter_list|(
name|x
parameter_list|)
value|QT_PREPEND_NAMESPACE(x)
comment|/*!     \macro Q_DECLARE_METATYPE(Type)     \relates QMetaType      This macro makes the type \a Type known to QMetaType as long as it     provides a public default constructor, a public copy constructor and     a public destructor.     It is needed to use the type \a Type as a custom type in QVariant.      Ideally, this macro should be placed below the declaration of     the class or struct. If that is not possible, it can be put in     a private header file which has to be included every time that     type is used in a QVariant.      Adding a Q_DECLARE_METATYPE() makes the type known to all template     based functions, including QVariant. Note that if you intend to     use the type in \e queued signal and slot connections or in     QObject's property system, you also have to call     qRegisterMetaType() since the names are resolved at runtime.      This example shows a typical use case of Q_DECLARE_METATYPE():      \snippet doc/src/snippets/code/src_corelib_kernel_qmetatype.cpp 0      If \c MyStruct is in a namespace, the Q_DECLARE_METATYPE() macro     has to be outside the namespace:      \snippet doc/src/snippets/code/src_corelib_kernel_qmetatype.cpp 1      Since \c{MyStruct} is now known to QMetaType, it can be used in QVariant:      \snippet doc/src/snippets/code/src_corelib_kernel_qmetatype.cpp 2      \sa qRegisterMetaType() */
comment|/*!     \enum QMetaType::Type      These are the built-in types supported by QMetaType:      \value Void \c void     \value Bool \c bool     \value Int \c int     \value UInt \c{unsigned int}     \value Double \c double     \value QChar QChar     \value QString QString     \value QByteArray QByteArray      \value VoidStar \c{void *}     \value Long \c{long}     \value LongLong LongLong     \value Short \c{short}     \value Char \c{char}     \value ULong \c{unsigned long}     \value ULongLong ULongLong     \value UShort \c{unsigned short}     \value UChar \c{unsigned char}     \value Float \c float     \value QObjectStar QObject *     \value QWidgetStar QWidget *     \value QVariant QVariant      \value QCursor QCursor     \value QDate QDate     \value QSize QSize     \value QTime QTime     \value QVariantList QVariantList     \value QPolygon QPolygon     \value QPolygonF QPolygonF     \value QColor QColor     \value QSizeF QSizeF     \value QRectF QRectF     \value QLine QLine     \value QTextLength QTextLength     \value QStringList QStringList     \value QVariantMap QVariantMap     \value QVariantHash QVariantHash     \value QIcon QIcon     \value QPen QPen     \value QLineF QLineF     \value QTextFormat QTextFormat     \value QRect QRect     \value QPoint QPoint     \value QUrl QUrl     \value QRegExp QRegExp     \value QDateTime QDateTime     \value QPointF QPointF     \value QPalette QPalette     \value QFont QFont     \value QBrush QBrush     \value QRegion QRegion     \value QBitArray QBitArray     \value QImage QImage     \value QKeySequence QKeySequence     \value QSizePolicy QSizePolicy     \value QPixmap QPixmap     \value QLocale QLocale     \value QBitmap QBitmap     \value QMatrix QMatrix     \value QTransform QTransform     \value QMatrix4x4 QMatrix4x4     \value QVector2D QVector2D     \value QVector3D QVector3D     \value QVector4D QVector4D     \value QQuaternion QQuaternion     \value QEasingCurve QEasingCurve      \value User  Base value for user types      \omitvalue FirstCoreExtType     \omitvalue FirstGuiType     \omitvalue FirstWidgetsType     \omitvalue LastCoreExtType     \omitvalue LastCoreType     \omitvalue LastGuiType     \omitvalue LastWidgetsType     \omitvalue QReal      Additional types can be registered using Q_DECLARE_METATYPE().      \sa type(), typeName() */
comment|/*!     \class QMetaType     \brief The QMetaType class manages named types in the meta-object system.      \ingroup objectmodel     \threadsafe      The class is used as a helper to marshall types in QVariant and     in queued signals and slots connections. It associates a type     name to a type so that it can be created and destructed     dynamically at run-time. Declare new types with Q_DECLARE_METATYPE()     to make them available to QVariant and other template-based functions.     Call qRegisterMetaType() to make type available to non-template based     functions, such as the queued signal and slot connections.      Any class or struct that has a public default     constructor, a public copy constructor, and a public destructor     can be registered.      The following code allocates and destructs an instance of     \c{MyClass}:      \snippet doc/src/snippets/code/src_corelib_kernel_qmetatype.cpp 3      If we want the stream operators \c operator<<() and \c     operator>>() to work on QVariant objects that store custom types,     the custom type must provide \c operator<<() and \c operator>>()     operators.      \sa Q_DECLARE_METATYPE(), QVariant::setValue(), QVariant::value(), QVariant::fromValue() */
DECL|macro|QT_ADD_STATIC_METATYPE
define|#
directive|define
name|QT_ADD_STATIC_METATYPE
parameter_list|(
name|STR
parameter_list|,
name|TP
parameter_list|)
define|\
value|{ STR, sizeof(STR) - 1, TP }
DECL|macro|QT_ADD_STATIC_METATYPE_ALIASES_ITER
define|#
directive|define
name|QT_ADD_STATIC_METATYPE_ALIASES_ITER
parameter_list|(
name|MetaTypeName
parameter_list|,
name|TypeId
parameter_list|,
name|AliasingName
parameter_list|,
name|RealNameStr
parameter_list|)
define|\
value|QT_ADD_STATIC_METATYPE(RealNameStr, QMetaType::MetaTypeName),
DECL|macro|QT_ADD_STATIC_METATYPE_HACKS_ITER
define|#
directive|define
name|QT_ADD_STATIC_METATYPE_HACKS_ITER
parameter_list|(
name|MetaTypeName
parameter_list|,
name|TypeId
parameter_list|,
name|Name
parameter_list|)
define|\
value|QT_ADD_STATIC_METATYPE(#Name, MetaTypeName),
comment|/* Note: these MUST be in the order of the enums */
DECL|member|typeName
DECL|member|typeNameLength
DECL|member|type
DECL|variable|types
specifier|static
specifier|const
expr|struct
block|{
specifier|const
name|char
operator|*
name|typeName
block|;
name|int
name|typeNameLength
block|;
name|int
name|type
block|; }
name|types
index|[]
operator|=
block|{
comment|/* All Core types */
name|QT_ADD_STATIC_METATYPE
argument_list|(
literal|"void"
argument_list|,
name|QMetaType
operator|::
name|Void
argument_list|)
block|,
name|QT_ADD_STATIC_METATYPE
argument_list|(
literal|"bool"
argument_list|,
name|QMetaType
operator|::
name|Bool
argument_list|)
block|,
name|QT_ADD_STATIC_METATYPE
argument_list|(
literal|"int"
argument_list|,
name|QMetaType
operator|::
name|Int
argument_list|)
block|,
name|QT_ADD_STATIC_METATYPE
argument_list|(
literal|"uint"
argument_list|,
name|QMetaType
operator|::
name|UInt
argument_list|)
block|,
name|QT_ADD_STATIC_METATYPE
argument_list|(
literal|"qlonglong"
argument_list|,
name|QMetaType
operator|::
name|LongLong
argument_list|)
block|,
name|QT_ADD_STATIC_METATYPE
argument_list|(
literal|"qulonglong"
argument_list|,
name|QMetaType
operator|::
name|ULongLong
argument_list|)
block|,
name|QT_ADD_STATIC_METATYPE
argument_list|(
literal|"double"
argument_list|,
name|QMetaType
operator|::
name|Double
argument_list|)
block|,
name|QT_ADD_STATIC_METATYPE
argument_list|(
literal|"QChar"
argument_list|,
name|QMetaType
operator|::
name|QChar
argument_list|)
block|,
name|QT_ADD_STATIC_METATYPE
argument_list|(
literal|"QVariantMap"
argument_list|,
name|QMetaType
operator|::
name|QVariantMap
argument_list|)
block|,
name|QT_ADD_STATIC_METATYPE
argument_list|(
literal|"QVariantList"
argument_list|,
name|QMetaType
operator|::
name|QVariantList
argument_list|)
block|,
name|QT_ADD_STATIC_METATYPE
argument_list|(
literal|"QString"
argument_list|,
name|QMetaType
operator|::
name|QString
argument_list|)
block|,
name|QT_ADD_STATIC_METATYPE
argument_list|(
literal|"QStringList"
argument_list|,
name|QMetaType
operator|::
name|QStringList
argument_list|)
block|,
name|QT_ADD_STATIC_METATYPE
argument_list|(
literal|"QByteArray"
argument_list|,
name|QMetaType
operator|::
name|QByteArray
argument_list|)
block|,
name|QT_ADD_STATIC_METATYPE
argument_list|(
literal|"QBitArray"
argument_list|,
name|QMetaType
operator|::
name|QBitArray
argument_list|)
block|,
name|QT_ADD_STATIC_METATYPE
argument_list|(
literal|"QDate"
argument_list|,
name|QMetaType
operator|::
name|QDate
argument_list|)
block|,
name|QT_ADD_STATIC_METATYPE
argument_list|(
literal|"QTime"
argument_list|,
name|QMetaType
operator|::
name|QTime
argument_list|)
block|,
name|QT_ADD_STATIC_METATYPE
argument_list|(
literal|"QDateTime"
argument_list|,
name|QMetaType
operator|::
name|QDateTime
argument_list|)
block|,
name|QT_ADD_STATIC_METATYPE
argument_list|(
literal|"QUrl"
argument_list|,
name|QMetaType
operator|::
name|QUrl
argument_list|)
block|,
name|QT_ADD_STATIC_METATYPE
argument_list|(
literal|"QLocale"
argument_list|,
name|QMetaType
operator|::
name|QLocale
argument_list|)
block|,
name|QT_ADD_STATIC_METATYPE
argument_list|(
literal|"QRect"
argument_list|,
name|QMetaType
operator|::
name|QRect
argument_list|)
block|,
name|QT_ADD_STATIC_METATYPE
argument_list|(
literal|"QRectF"
argument_list|,
name|QMetaType
operator|::
name|QRectF
argument_list|)
block|,
name|QT_ADD_STATIC_METATYPE
argument_list|(
literal|"QSize"
argument_list|,
name|QMetaType
operator|::
name|QSize
argument_list|)
block|,
name|QT_ADD_STATIC_METATYPE
argument_list|(
literal|"QSizeF"
argument_list|,
name|QMetaType
operator|::
name|QSizeF
argument_list|)
block|,
name|QT_ADD_STATIC_METATYPE
argument_list|(
literal|"QLine"
argument_list|,
name|QMetaType
operator|::
name|QLine
argument_list|)
block|,
name|QT_ADD_STATIC_METATYPE
argument_list|(
literal|"QLineF"
argument_list|,
name|QMetaType
operator|::
name|QLineF
argument_list|)
block|,
name|QT_ADD_STATIC_METATYPE
argument_list|(
literal|"QPoint"
argument_list|,
name|QMetaType
operator|::
name|QPoint
argument_list|)
block|,
name|QT_ADD_STATIC_METATYPE
argument_list|(
literal|"QPointF"
argument_list|,
name|QMetaType
operator|::
name|QPointF
argument_list|)
block|,
name|QT_ADD_STATIC_METATYPE
argument_list|(
literal|"QRegExp"
argument_list|,
name|QMetaType
operator|::
name|QRegExp
argument_list|)
block|,
name|QT_ADD_STATIC_METATYPE
argument_list|(
literal|"QVariantHash"
argument_list|,
name|QMetaType
operator|::
name|QVariantHash
argument_list|)
block|,
name|QT_ADD_STATIC_METATYPE
argument_list|(
literal|"QEasingCurve"
argument_list|,
name|QMetaType
operator|::
name|QEasingCurve
argument_list|)
block|,
comment|/* All GUI types */
name|QT_ADD_STATIC_METATYPE
argument_list|(
literal|"QFont"
argument_list|,
name|QMetaType
operator|::
name|QFont
argument_list|)
block|,
name|QT_ADD_STATIC_METATYPE
argument_list|(
literal|"QPixmap"
argument_list|,
name|QMetaType
operator|::
name|QPixmap
argument_list|)
block|,
name|QT_ADD_STATIC_METATYPE
argument_list|(
literal|"QBrush"
argument_list|,
name|QMetaType
operator|::
name|QBrush
argument_list|)
block|,
name|QT_ADD_STATIC_METATYPE
argument_list|(
literal|"QColor"
argument_list|,
name|QMetaType
operator|::
name|QColor
argument_list|)
block|,
name|QT_ADD_STATIC_METATYPE
argument_list|(
literal|"QPalette"
argument_list|,
name|QMetaType
operator|::
name|QPalette
argument_list|)
block|,
name|QT_ADD_STATIC_METATYPE
argument_list|(
literal|"QImage"
argument_list|,
name|QMetaType
operator|::
name|QImage
argument_list|)
block|,
name|QT_ADD_STATIC_METATYPE
argument_list|(
literal|"QPolygon"
argument_list|,
name|QMetaType
operator|::
name|QPolygon
argument_list|)
block|,
name|QT_ADD_STATIC_METATYPE
argument_list|(
literal|"QRegion"
argument_list|,
name|QMetaType
operator|::
name|QRegion
argument_list|)
block|,
name|QT_ADD_STATIC_METATYPE
argument_list|(
literal|"QBitmap"
argument_list|,
name|QMetaType
operator|::
name|QBitmap
argument_list|)
block|,
name|QT_ADD_STATIC_METATYPE
argument_list|(
literal|"QCursor"
argument_list|,
name|QMetaType
operator|::
name|QCursor
argument_list|)
block|,
name|QT_ADD_STATIC_METATYPE
argument_list|(
literal|"QKeySequence"
argument_list|,
name|QMetaType
operator|::
name|QKeySequence
argument_list|)
block|,
name|QT_ADD_STATIC_METATYPE
argument_list|(
literal|"QPen"
argument_list|,
name|QMetaType
operator|::
name|QPen
argument_list|)
block|,
name|QT_ADD_STATIC_METATYPE
argument_list|(
literal|"QTextLength"
argument_list|,
name|QMetaType
operator|::
name|QTextLength
argument_list|)
block|,
name|QT_ADD_STATIC_METATYPE
argument_list|(
literal|"QTextFormat"
argument_list|,
name|QMetaType
operator|::
name|QTextFormat
argument_list|)
block|,
name|QT_ADD_STATIC_METATYPE
argument_list|(
literal|"QMatrix"
argument_list|,
name|QMetaType
operator|::
name|QMatrix
argument_list|)
block|,
name|QT_ADD_STATIC_METATYPE
argument_list|(
literal|"QTransform"
argument_list|,
name|QMetaType
operator|::
name|QTransform
argument_list|)
block|,
name|QT_ADD_STATIC_METATYPE
argument_list|(
literal|"QMatrix4x4"
argument_list|,
name|QMetaType
operator|::
name|QMatrix4x4
argument_list|)
block|,
name|QT_ADD_STATIC_METATYPE
argument_list|(
literal|"QVector2D"
argument_list|,
name|QMetaType
operator|::
name|QVector2D
argument_list|)
block|,
name|QT_ADD_STATIC_METATYPE
argument_list|(
literal|"QVector3D"
argument_list|,
name|QMetaType
operator|::
name|QVector3D
argument_list|)
block|,
name|QT_ADD_STATIC_METATYPE
argument_list|(
literal|"QVector4D"
argument_list|,
name|QMetaType
operator|::
name|QVector4D
argument_list|)
block|,
name|QT_ADD_STATIC_METATYPE
argument_list|(
literal|"QQuaternion"
argument_list|,
name|QMetaType
operator|::
name|QQuaternion
argument_list|)
block|,
name|QT_ADD_STATIC_METATYPE
argument_list|(
literal|"QPolygonF"
argument_list|,
name|QMetaType
operator|::
name|QPolygonF
argument_list|)
block|,
comment|/* All Widgets types */
name|QT_ADD_STATIC_METATYPE
argument_list|(
literal|"QIcon"
argument_list|,
name|QMetaType
operator|::
name|QIcon
argument_list|)
block|,
name|QT_ADD_STATIC_METATYPE
argument_list|(
literal|"QSizePolicy"
argument_list|,
name|QMetaType
operator|::
name|QSizePolicy
argument_list|)
block|,
comment|/* All Metatype builtins */
name|QT_ADD_STATIC_METATYPE
argument_list|(
literal|"void*"
argument_list|,
name|QMetaType
operator|::
name|VoidStar
argument_list|)
block|,
name|QT_ADD_STATIC_METATYPE
argument_list|(
literal|"long"
argument_list|,
name|QMetaType
operator|::
name|Long
argument_list|)
block|,
name|QT_ADD_STATIC_METATYPE
argument_list|(
literal|"short"
argument_list|,
name|QMetaType
operator|::
name|Short
argument_list|)
block|,
name|QT_ADD_STATIC_METATYPE
argument_list|(
literal|"char"
argument_list|,
name|QMetaType
operator|::
name|Char
argument_list|)
block|,
name|QT_ADD_STATIC_METATYPE
argument_list|(
literal|"ulong"
argument_list|,
name|QMetaType
operator|::
name|ULong
argument_list|)
block|,
name|QT_ADD_STATIC_METATYPE
argument_list|(
literal|"ushort"
argument_list|,
name|QMetaType
operator|::
name|UShort
argument_list|)
block|,
name|QT_ADD_STATIC_METATYPE
argument_list|(
literal|"uchar"
argument_list|,
name|QMetaType
operator|::
name|UChar
argument_list|)
block|,
name|QT_ADD_STATIC_METATYPE
argument_list|(
literal|"float"
argument_list|,
name|QMetaType
operator|::
name|Float
argument_list|)
block|,
name|QT_ADD_STATIC_METATYPE
argument_list|(
literal|"QObject*"
argument_list|,
name|QMetaType
operator|::
name|QObjectStar
argument_list|)
block|,
name|QT_ADD_STATIC_METATYPE
argument_list|(
literal|"QWidget*"
argument_list|,
name|QMetaType
operator|::
name|QWidgetStar
argument_list|)
block|,
name|QT_ADD_STATIC_METATYPE
argument_list|(
literal|"QVariant"
argument_list|,
name|QMetaType
operator|::
name|QVariant
argument_list|)
block|,
comment|/* Type aliases - order doesn't matter */
name|QT_FOR_EACH_STATIC_ALIAS_TYPE
argument_list|(
argument|QT_ADD_STATIC_METATYPE_ALIASES_ITER
argument_list|)
name|QT_FOR_EACH_STATIC_HACKS_TYPE
argument_list|(
argument|QT_ADD_STATIC_METATYPE_HACKS_ITER
argument_list|)
block|{
literal|0
block|,
literal|0
block|,
name|QMetaType
operator|::
name|Void
block|}
block|}
expr_stmt|;
end_expr_stmt
begin_struct
DECL|struct|QMetaTypeGuiHelper
struct|struct
name|QMetaTypeGuiHelper
block|{
DECL|member|creator
name|QMetaType
operator|::
name|Creator
name|creator
decl_stmt|;
DECL|member|deleter
name|QMetaType
operator|::
name|Deleter
name|deleter
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_DATASTREAM
DECL|member|saveOp
name|QMetaType
operator|::
name|SaveOperator
name|saveOp
decl_stmt|;
DECL|member|loadOp
name|QMetaType
operator|::
name|LoadOperator
name|loadOp
decl_stmt|;
endif|#
directive|endif
DECL|member|constructor
name|QMetaType
operator|::
name|Constructor
name|constructor
decl_stmt|;
DECL|member|destructor
name|QMetaType
operator|::
name|Destructor
name|destructor
decl_stmt|;
DECL|member|size
name|int
name|size
decl_stmt|;
block|}
struct|;
end_struct
begin_decl_stmt
DECL|variable|qMetaTypeGuiHelper
name|Q_CORE_EXPORT
specifier|const
name|QMetaTypeGuiHelper
modifier|*
name|qMetaTypeGuiHelper
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qMetaTypeWidgetsHelper
name|Q_CORE_EXPORT
specifier|const
name|QMetaTypeGuiHelper
modifier|*
name|qMetaTypeWidgetsHelper
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|QCustomTypeInfo
class|class
name|QCustomTypeInfo
block|{
public|public:
DECL|function|QCustomTypeInfo
name|QCustomTypeInfo
parameter_list|()
member_init_list|:
name|typeName
argument_list|()
member_init_list|,
name|creator
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|deleter
argument_list|(
literal|0
argument_list|)
ifndef|#
directive|ifndef
name|QT_NO_DATASTREAM
member_init_list|,
name|saveOp
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|loadOp
argument_list|(
literal|0
argument_list|)
endif|#
directive|endif
member_init_list|,
name|constructor
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|destructor
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|size
argument_list|(
literal|0
argument_list|)
block|{}
DECL|member|typeName
name|QByteArray
name|typeName
decl_stmt|;
DECL|member|creator
name|QMetaType
operator|::
name|Creator
name|creator
decl_stmt|;
DECL|member|deleter
name|QMetaType
operator|::
name|Deleter
name|deleter
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_DATASTREAM
DECL|member|saveOp
name|QMetaType
operator|::
name|SaveOperator
name|saveOp
decl_stmt|;
DECL|member|loadOp
name|QMetaType
operator|::
name|LoadOperator
name|loadOp
decl_stmt|;
endif|#
directive|endif
DECL|member|alias
name|int
name|alias
decl_stmt|;
DECL|member|constructor
name|QMetaType
operator|::
name|Constructor
name|constructor
decl_stmt|;
DECL|member|destructor
name|QMetaType
operator|::
name|Destructor
name|destructor
decl_stmt|;
DECL|member|size
name|int
name|size
decl_stmt|;
block|}
class|;
end_class
begin_expr_stmt
name|Q_DECLARE_TYPEINFO
argument_list|(
name|QCustomTypeInfo
argument_list|,
name|Q_MOVABLE_TYPE
argument_list|)
expr_stmt|;
end_expr_stmt
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|QVector<QCustomTypeInfo>
argument_list|,
argument|customTypes
argument_list|)
end_macro
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|QReadWriteLock
argument_list|,
argument|customTypesLock
argument_list|)
end_macro
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DATASTREAM
end_ifndef
begin_comment
comment|/*! \internal */
end_comment
begin_function
DECL|function|registerStreamOperators
name|void
name|QMetaType
operator|::
name|registerStreamOperators
parameter_list|(
specifier|const
name|char
modifier|*
name|typeName
parameter_list|,
name|SaveOperator
name|saveOp
parameter_list|,
name|LoadOperator
name|loadOp
parameter_list|)
block|{
name|int
name|idx
init|=
name|type
argument_list|(
name|typeName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|idx
condition|)
return|return;
name|registerStreamOperators
argument_list|(
name|idx
argument_list|,
name|saveOp
argument_list|,
name|loadOp
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*! \internal */
end_comment
begin_function
DECL|function|registerStreamOperators
name|void
name|QMetaType
operator|::
name|registerStreamOperators
parameter_list|(
name|int
name|idx
parameter_list|,
name|SaveOperator
name|saveOp
parameter_list|,
name|LoadOperator
name|loadOp
parameter_list|)
block|{
if|if
condition|(
name|idx
operator|<
name|User
condition|)
return|return;
comment|//builtin types should not be registered;
name|QVector
argument_list|<
name|QCustomTypeInfo
argument_list|>
modifier|*
name|ct
init|=
name|customTypes
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|ct
condition|)
return|return;
name|QWriteLocker
name|locker
argument_list|(
name|customTypesLock
argument_list|()
argument_list|)
decl_stmt|;
name|QCustomTypeInfo
modifier|&
name|inf
init|=
operator|(
operator|*
name|ct
operator|)
index|[
name|idx
operator|-
name|User
index|]
decl_stmt|;
name|inf
operator|.
name|saveOp
operator|=
name|saveOp
expr_stmt|;
name|inf
operator|.
name|loadOp
operator|=
name|loadOp
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DATASTREAM
end_comment
begin_comment
comment|/*!     Returns the type name associated with the given \a type, or 0 if no     matching type was found. The returned pointer must not be deleted.      \sa type(), isRegistered(), Type */
end_comment
begin_function
DECL|function|typeName
specifier|const
name|char
modifier|*
name|QMetaType
operator|::
name|typeName
parameter_list|(
name|int
name|type
parameter_list|)
block|{
enum|enum
block|{
name|GuiTypeCount
init|=
name|LastGuiType
operator|-
name|FirstGuiType
block|,
name|WidgetsTypeCount
init|=
name|LastWidgetsType
operator|-
name|FirstWidgetsType
block|}
enum|;
if|if
condition|(
name|type
operator|>=
literal|0
operator|&&
name|type
operator|<=
name|LastCoreType
condition|)
block|{
return|return
name|types
index|[
name|type
index|]
operator|.
name|typeName
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|>=
name|FirstGuiType
operator|&&
name|type
operator|<=
name|LastGuiType
condition|)
block|{
return|return
name|types
index|[
name|type
operator|-
name|FirstGuiType
operator|+
name|LastCoreType
operator|+
literal|1
index|]
operator|.
name|typeName
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|>=
name|FirstWidgetsType
operator|&&
name|type
operator|<=
name|LastWidgetsType
condition|)
block|{
return|return
name|types
index|[
name|type
operator|-
name|FirstWidgetsType
operator|+
name|GuiTypeCount
operator|+
name|LastCoreType
operator|+
literal|2
index|]
operator|.
name|typeName
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|>=
name|FirstCoreExtType
operator|&&
name|type
operator|<=
name|LastCoreExtType
condition|)
block|{
return|return
name|types
index|[
name|type
operator|-
name|FirstCoreExtType
operator|+
name|GuiTypeCount
operator|+
name|WidgetsTypeCount
operator|+
name|LastCoreType
operator|+
literal|3
index|]
operator|.
name|typeName
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|>=
name|User
condition|)
block|{
specifier|const
name|QVector
argument_list|<
name|QCustomTypeInfo
argument_list|>
modifier|*
specifier|const
name|ct
init|=
name|customTypes
argument_list|()
decl_stmt|;
name|QReadLocker
name|locker
argument_list|(
name|customTypesLock
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|ct
operator|&&
name|ct
operator|->
name|count
argument_list|()
operator|>
name|type
operator|-
name|User
operator|&&
operator|!
name|ct
operator|->
name|at
argument_list|(
name|type
operator|-
name|User
argument_list|)
operator|.
name|typeName
operator|.
name|isEmpty
argument_list|()
condition|?
name|ct
operator|->
name|at
argument_list|(
name|type
operator|-
name|User
argument_list|)
operator|.
name|typeName
operator|.
name|constData
argument_list|()
else|:
cast|static_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|/*! \internal     Similar to QMetaType::type(), but only looks in the static set of types. */
end_comment
begin_function
DECL|function|qMetaTypeStaticType
specifier|static
specifier|inline
name|int
name|qMetaTypeStaticType
parameter_list|(
specifier|const
name|char
modifier|*
name|typeName
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|types
index|[
name|i
index|]
operator|.
name|typeName
operator|&&
operator|(
operator|(
name|length
operator|!=
name|types
index|[
name|i
index|]
operator|.
name|typeNameLength
operator|)
operator|||
name|strcmp
argument_list|(
name|typeName
argument_list|,
name|types
index|[
name|i
index|]
operator|.
name|typeName
argument_list|)
operator|)
condition|)
block|{
operator|++
name|i
expr_stmt|;
block|}
return|return
name|types
index|[
name|i
index|]
operator|.
name|type
return|;
block|}
end_function
begin_comment
comment|/*! \internal     Similar to QMetaType::type(), but only looks in the custom set of     types, and doesn't lock the mutex. */
end_comment
begin_function
DECL|function|qMetaTypeCustomType_unlocked
specifier|static
name|int
name|qMetaTypeCustomType_unlocked
parameter_list|(
specifier|const
name|char
modifier|*
name|typeName
parameter_list|,
name|int
name|length
parameter_list|)
block|{
specifier|const
name|QVector
argument_list|<
name|QCustomTypeInfo
argument_list|>
modifier|*
specifier|const
name|ct
init|=
name|customTypes
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|ct
condition|)
return|return
literal|0
return|;
for|for
control|(
name|int
name|v
init|=
literal|0
init|;
name|v
operator|<
name|ct
operator|->
name|count
argument_list|()
condition|;
operator|++
name|v
control|)
block|{
specifier|const
name|QCustomTypeInfo
modifier|&
name|customInfo
init|=
name|ct
operator|->
name|at
argument_list|(
name|v
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|length
operator|==
name|customInfo
operator|.
name|typeName
operator|.
name|size
argument_list|()
operator|)
operator|&&
operator|!
name|strcmp
argument_list|(
name|typeName
argument_list|,
name|customInfo
operator|.
name|typeName
operator|.
name|constData
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|customInfo
operator|.
name|alias
operator|>=
literal|0
condition|)
return|return
name|customInfo
operator|.
name|alias
return|;
return|return
name|v
operator|+
name|QMetaType
operator|::
name|User
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|/*! \internal      This function is needed until existing code outside of qtbase     has been changed to call the new version of registerType().  */
end_comment
begin_function
DECL|function|registerType
name|int
name|QMetaType
operator|::
name|registerType
parameter_list|(
specifier|const
name|char
modifier|*
name|typeName
parameter_list|,
name|Deleter
name|deleter
parameter_list|,
name|Creator
name|creator
parameter_list|)
block|{
return|return
name|registerType
argument_list|(
name|typeName
argument_list|,
name|deleter
argument_list|,
name|creator
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*! \internal     \since 5.0      Registers a user type for marshalling, with \a typeName, a \a     deleter, a \a creator, a \a destructor, a \a constructor, and     a \a size. Returns the type's handle, or -1 if the type could     not be registered.  */
end_comment
begin_function
DECL|function|registerType
name|int
name|QMetaType
operator|::
name|registerType
parameter_list|(
specifier|const
name|char
modifier|*
name|typeName
parameter_list|,
name|Deleter
name|deleter
parameter_list|,
name|Creator
name|creator
parameter_list|,
name|Destructor
name|destructor
parameter_list|,
name|Constructor
name|constructor
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|QVector
argument_list|<
name|QCustomTypeInfo
argument_list|>
modifier|*
name|ct
init|=
name|customTypes
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|ct
operator|||
operator|!
name|typeName
operator|||
operator|!
name|deleter
operator|||
operator|!
name|creator
condition|)
return|return
operator|-
literal|1
return|;
ifdef|#
directive|ifdef
name|QT_NO_QOBJECT
name|NS
argument_list|(
argument|QByteArray
argument_list|)
name|normalizedTypeName
operator|=
name|typeName
expr_stmt|;
else|#
directive|else
name|NS
argument_list|(
argument|QByteArray
argument_list|)
name|normalizedTypeName
operator|=
name|QMetaObject
operator|::
name|normalizedType
argument_list|(
name|typeName
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|int
name|idx
init|=
name|qMetaTypeStaticType
argument_list|(
name|normalizedTypeName
operator|.
name|constData
argument_list|()
argument_list|,
name|normalizedTypeName
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|idx
condition|)
block|{
name|QWriteLocker
name|locker
argument_list|(
name|customTypesLock
argument_list|()
argument_list|)
decl_stmt|;
name|idx
operator|=
name|qMetaTypeCustomType_unlocked
argument_list|(
name|normalizedTypeName
operator|.
name|constData
argument_list|()
argument_list|,
name|normalizedTypeName
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|idx
condition|)
block|{
name|QCustomTypeInfo
name|inf
decl_stmt|;
name|inf
operator|.
name|typeName
operator|=
name|normalizedTypeName
expr_stmt|;
name|inf
operator|.
name|creator
operator|=
name|creator
expr_stmt|;
name|inf
operator|.
name|deleter
operator|=
name|deleter
expr_stmt|;
name|inf
operator|.
name|alias
operator|=
operator|-
literal|1
expr_stmt|;
name|inf
operator|.
name|constructor
operator|=
name|constructor
expr_stmt|;
name|inf
operator|.
name|destructor
operator|=
name|destructor
expr_stmt|;
name|inf
operator|.
name|size
operator|=
name|size
expr_stmt|;
name|idx
operator|=
name|ct
operator|->
name|size
argument_list|()
operator|+
name|User
expr_stmt|;
name|ct
operator|->
name|append
argument_list|(
name|inf
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|idx
return|;
block|}
end_function
begin_comment
comment|/*! \internal     \since 4.7      Registers a user type for marshalling, as an alias of another type (typedef) */
end_comment
begin_function
DECL|function|registerTypedef
name|int
name|QMetaType
operator|::
name|registerTypedef
parameter_list|(
specifier|const
name|char
modifier|*
name|typeName
parameter_list|,
name|int
name|aliasId
parameter_list|)
block|{
name|QVector
argument_list|<
name|QCustomTypeInfo
argument_list|>
modifier|*
name|ct
init|=
name|customTypes
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|ct
operator|||
operator|!
name|typeName
condition|)
return|return
operator|-
literal|1
return|;
ifdef|#
directive|ifdef
name|QT_NO_QOBJECT
name|NS
argument_list|(
argument|QByteArray
argument_list|)
name|normalizedTypeName
operator|=
name|typeName
expr_stmt|;
else|#
directive|else
name|NS
argument_list|(
argument|QByteArray
argument_list|)
name|normalizedTypeName
operator|=
name|QMetaObject
operator|::
name|normalizedType
argument_list|(
name|typeName
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|int
name|idx
init|=
name|qMetaTypeStaticType
argument_list|(
name|normalizedTypeName
operator|.
name|constData
argument_list|()
argument_list|,
name|normalizedTypeName
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|idx
operator|==
name|aliasId
argument_list|)
expr_stmt|;
return|return
name|idx
return|;
block|}
name|QWriteLocker
name|locker
argument_list|(
name|customTypesLock
argument_list|()
argument_list|)
decl_stmt|;
name|idx
operator|=
name|qMetaTypeCustomType_unlocked
argument_list|(
name|normalizedTypeName
operator|.
name|constData
argument_list|()
argument_list|,
name|normalizedTypeName
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|idx
condition|)
return|return
name|idx
return|;
name|QCustomTypeInfo
name|inf
decl_stmt|;
name|inf
operator|.
name|typeName
operator|=
name|normalizedTypeName
expr_stmt|;
name|inf
operator|.
name|alias
operator|=
name|aliasId
expr_stmt|;
name|inf
operator|.
name|creator
operator|=
literal|0
expr_stmt|;
name|inf
operator|.
name|deleter
operator|=
literal|0
expr_stmt|;
name|ct
operator|->
name|append
argument_list|(
name|inf
argument_list|)
expr_stmt|;
return|return
name|aliasId
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.4      Unregisters a user type, with \a typeName.      \sa type(), typeName()  */
end_comment
begin_function
DECL|function|unregisterType
name|void
name|QMetaType
operator|::
name|unregisterType
parameter_list|(
specifier|const
name|char
modifier|*
name|typeName
parameter_list|)
block|{
name|QVector
argument_list|<
name|QCustomTypeInfo
argument_list|>
modifier|*
name|ct
init|=
name|customTypes
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|ct
operator|||
operator|!
name|typeName
condition|)
return|return;
ifdef|#
directive|ifdef
name|QT_NO_QOBJECT
name|NS
argument_list|(
argument|QByteArray
argument_list|)
name|normalizedTypeName
operator|=
name|typeName
expr_stmt|;
else|#
directive|else
name|NS
argument_list|(
argument|QByteArray
argument_list|)
name|normalizedTypeName
operator|=
name|QMetaObject
operator|::
name|normalizedType
argument_list|(
name|typeName
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QWriteLocker
name|locker
argument_list|(
name|customTypesLock
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|v
init|=
literal|0
init|;
name|v
operator|<
name|ct
operator|->
name|count
argument_list|()
condition|;
operator|++
name|v
control|)
block|{
if|if
condition|(
name|ct
operator|->
name|at
argument_list|(
name|v
argument_list|)
operator|.
name|typeName
operator|==
name|typeName
condition|)
block|{
name|QCustomTypeInfo
modifier|&
name|inf
init|=
operator|(
operator|*
name|ct
operator|)
index|[
name|v
index|]
decl_stmt|;
name|inf
operator|.
name|typeName
operator|.
name|clear
argument_list|()
expr_stmt|;
name|inf
operator|.
name|creator
operator|=
literal|0
expr_stmt|;
name|inf
operator|.
name|deleter
operator|=
literal|0
expr_stmt|;
name|inf
operator|.
name|alias
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|/*!     Returns true if the datatype with ID \a type is registered;     otherwise returns false.      \sa type(), typeName(), Type */
end_comment
begin_function
DECL|function|isRegistered
name|bool
name|QMetaType
operator|::
name|isRegistered
parameter_list|(
name|int
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|>=
literal|0
operator|&&
name|type
operator|<
name|User
condition|)
block|{
comment|// predefined type
return|return
literal|true
return|;
block|}
name|QReadLocker
name|locker
argument_list|(
name|customTypesLock
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|QVector
argument_list|<
name|QCustomTypeInfo
argument_list|>
modifier|*
specifier|const
name|ct
init|=
name|customTypes
argument_list|()
decl_stmt|;
return|return
operator|(
operator|(
name|type
operator|>=
name|User
operator|)
operator|&&
operator|(
name|ct
operator|&&
name|ct
operator|->
name|count
argument_list|()
operator|>
name|type
operator|-
name|User
operator|)
operator|&&
operator|!
name|ct
operator|->
name|at
argument_list|(
name|type
operator|-
name|User
argument_list|)
operator|.
name|typeName
operator|.
name|isEmpty
argument_list|()
operator|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns a handle to the type called \a typeName, or 0 if there is     no such type.      \sa isRegistered(), typeName(), Type */
end_comment
begin_function
DECL|function|type
name|int
name|QMetaType
operator|::
name|type
parameter_list|(
specifier|const
name|char
modifier|*
name|typeName
parameter_list|)
block|{
name|int
name|length
init|=
name|qstrlen
argument_list|(
name|typeName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|length
condition|)
return|return
literal|0
return|;
name|int
name|type
init|=
name|qMetaTypeStaticType
argument_list|(
name|typeName
argument_list|,
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|type
condition|)
block|{
name|QReadLocker
name|locker
argument_list|(
name|customTypesLock
argument_list|()
argument_list|)
decl_stmt|;
name|type
operator|=
name|qMetaTypeCustomType_unlocked
argument_list|(
name|typeName
argument_list|,
name|length
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_QOBJECT
if|if
condition|(
operator|!
name|type
condition|)
block|{
specifier|const
name|NS
argument_list|(
argument|QByteArray
argument_list|)
name|normalizedTypeName
operator|=
name|QMetaObject
operator|::
name|normalizedType
argument_list|(
name|typeName
argument_list|)
expr_stmt|;
name|type
operator|=
name|qMetaTypeStaticType
argument_list|(
name|normalizedTypeName
operator|.
name|constData
argument_list|()
argument_list|,
name|normalizedTypeName
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|type
condition|)
block|{
name|type
operator|=
name|qMetaTypeCustomType_unlocked
argument_list|(
name|normalizedTypeName
operator|.
name|constData
argument_list|()
argument_list|,
name|normalizedTypeName
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
endif|#
directive|endif
block|}
return|return
name|type
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DATASTREAM
end_ifndef
begin_comment
comment|/*!     Writes the object pointed to by \a data with the ID \a type to     the given \a stream. Returns true if the object is saved     successfully; otherwise returns false.      The type must have been registered with qRegisterMetaType() and     qRegisterMetaTypeStreamOperators() beforehand.      Normally, you should not need to call this function directly.     Instead, use QVariant's \c operator<<(), which relies on save()     to stream custom types.      \sa load(), qRegisterMetaTypeStreamOperators() */
end_comment
begin_function
DECL|function|save
name|bool
name|QMetaType
operator|::
name|save
parameter_list|(
name|QDataStream
modifier|&
name|stream
parameter_list|,
name|int
name|type
parameter_list|,
specifier|const
name|void
modifier|*
name|data
parameter_list|)
block|{
if|if
condition|(
operator|!
name|data
operator|||
operator|!
name|isRegistered
argument_list|(
name|type
argument_list|)
condition|)
return|return
literal|false
return|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|QMetaType
operator|::
name|Void
case|:
case|case
name|QMetaType
operator|::
name|VoidStar
case|:
case|case
name|QMetaType
operator|::
name|QObjectStar
case|:
case|case
name|QMetaType
operator|::
name|QWidgetStar
case|:
return|return
literal|false
return|;
case|case
name|QMetaType
operator|::
name|Long
case|:
name|stream
operator|<<
name|qlonglong
argument_list|(
operator|*
cast|static_cast
argument_list|<
specifier|const
name|long
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|Int
case|:
name|stream
operator|<<
operator|*
cast|static_cast
argument_list|<
specifier|const
name|int
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|Short
case|:
name|stream
operator|<<
operator|*
cast|static_cast
argument_list|<
specifier|const
name|short
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|Char
case|:
comment|// force a char to be signed
name|stream
operator|<<
operator|*
cast|static_cast
argument_list|<
specifier|const
name|signed
name|char
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|ULong
case|:
name|stream
operator|<<
name|qulonglong
argument_list|(
operator|*
cast|static_cast
argument_list|<
specifier|const
name|ulong
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|UInt
case|:
name|stream
operator|<<
operator|*
cast|static_cast
argument_list|<
specifier|const
name|uint
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|LongLong
case|:
name|stream
operator|<<
operator|*
cast|static_cast
argument_list|<
specifier|const
name|qlonglong
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|ULongLong
case|:
name|stream
operator|<<
operator|*
cast|static_cast
argument_list|<
specifier|const
name|qulonglong
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|UShort
case|:
name|stream
operator|<<
operator|*
cast|static_cast
argument_list|<
specifier|const
name|ushort
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|UChar
case|:
name|stream
operator|<<
operator|*
cast|static_cast
argument_list|<
specifier|const
name|uchar
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|Bool
case|:
name|stream
operator|<<
name|qint8
argument_list|(
operator|*
cast|static_cast
argument_list|<
specifier|const
name|bool
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|Float
case|:
name|stream
operator|<<
operator|*
cast|static_cast
argument_list|<
specifier|const
name|float
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|Double
case|:
name|stream
operator|<<
operator|*
cast|static_cast
argument_list|<
specifier|const
name|double
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|QChar
case|:
name|stream
operator|<<
operator|*
expr|static_cast
operator|<
specifier|const
name|NS
argument_list|(
name|QChar
argument_list|)
operator|*
operator|>
operator|(
name|data
operator|)
expr_stmt|;
break|break;
ifndef|#
directive|ifndef
name|QT_BOOTSTRAPPED
case|case
name|QMetaType
operator|::
name|QVariantMap
case|:
name|stream
operator|<<
operator|*
expr|static_cast
operator|<
specifier|const
name|NS
argument_list|(
name|QVariantMap
argument_list|)
operator|*
operator|>
operator|(
name|data
operator|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|QVariantHash
case|:
name|stream
operator|<<
operator|*
expr|static_cast
operator|<
specifier|const
name|NS
argument_list|(
name|QVariantHash
argument_list|)
operator|*
operator|>
operator|(
name|data
operator|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|QVariantList
case|:
name|stream
operator|<<
operator|*
expr|static_cast
operator|<
specifier|const
name|NS
argument_list|(
name|QVariantList
argument_list|)
operator|*
operator|>
operator|(
name|data
operator|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|QVariant
case|:
name|stream
operator|<<
operator|*
expr|static_cast
operator|<
specifier|const
name|NS
argument_list|(
name|QVariant
argument_list|)
operator|*
operator|>
operator|(
name|data
operator|)
expr_stmt|;
break|break;
endif|#
directive|endif
case|case
name|QMetaType
operator|::
name|QByteArray
case|:
name|stream
operator|<<
operator|*
expr|static_cast
operator|<
specifier|const
name|NS
argument_list|(
name|QByteArray
argument_list|)
operator|*
operator|>
operator|(
name|data
operator|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|QString
case|:
name|stream
operator|<<
operator|*
expr|static_cast
operator|<
specifier|const
name|NS
argument_list|(
name|QString
argument_list|)
operator|*
operator|>
operator|(
name|data
operator|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|QStringList
case|:
name|stream
operator|<<
operator|*
expr|static_cast
operator|<
specifier|const
name|NS
argument_list|(
name|QStringList
argument_list|)
operator|*
operator|>
operator|(
name|data
operator|)
expr_stmt|;
break|break;
ifndef|#
directive|ifndef
name|QT_BOOTSTRAPPED
case|case
name|QMetaType
operator|::
name|QBitArray
case|:
name|stream
operator|<<
operator|*
expr|static_cast
operator|<
specifier|const
name|NS
argument_list|(
name|QBitArray
argument_list|)
operator|*
operator|>
operator|(
name|data
operator|)
expr_stmt|;
break|break;
endif|#
directive|endif
case|case
name|QMetaType
operator|::
name|QDate
case|:
name|stream
operator|<<
operator|*
expr|static_cast
operator|<
specifier|const
name|NS
argument_list|(
name|QDate
argument_list|)
operator|*
operator|>
operator|(
name|data
operator|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|QTime
case|:
name|stream
operator|<<
operator|*
expr|static_cast
operator|<
specifier|const
name|NS
argument_list|(
name|QTime
argument_list|)
operator|*
operator|>
operator|(
name|data
operator|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|QDateTime
case|:
name|stream
operator|<<
operator|*
expr|static_cast
operator|<
specifier|const
name|NS
argument_list|(
name|QDateTime
argument_list|)
operator|*
operator|>
operator|(
name|data
operator|)
expr_stmt|;
break|break;
ifndef|#
directive|ifndef
name|QT_BOOTSTRAPPED
case|case
name|QMetaType
operator|::
name|QUrl
case|:
name|stream
operator|<<
operator|*
expr|static_cast
operator|<
specifier|const
name|NS
argument_list|(
name|QUrl
argument_list|)
operator|*
operator|>
operator|(
name|data
operator|)
expr_stmt|;
break|break;
endif|#
directive|endif
case|case
name|QMetaType
operator|::
name|QLocale
case|:
name|stream
operator|<<
operator|*
expr|static_cast
operator|<
specifier|const
name|NS
argument_list|(
name|QLocale
argument_list|)
operator|*
operator|>
operator|(
name|data
operator|)
expr_stmt|;
break|break;
ifndef|#
directive|ifndef
name|QT_NO_GEOM_VARIANT
case|case
name|QMetaType
operator|::
name|QRect
case|:
name|stream
operator|<<
operator|*
expr|static_cast
operator|<
specifier|const
name|NS
argument_list|(
name|QRect
argument_list|)
operator|*
operator|>
operator|(
name|data
operator|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|QRectF
case|:
name|stream
operator|<<
operator|*
expr|static_cast
operator|<
specifier|const
name|NS
argument_list|(
name|QRectF
argument_list|)
operator|*
operator|>
operator|(
name|data
operator|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|QSize
case|:
name|stream
operator|<<
operator|*
expr|static_cast
operator|<
specifier|const
name|NS
argument_list|(
name|QSize
argument_list|)
operator|*
operator|>
operator|(
name|data
operator|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|QSizeF
case|:
name|stream
operator|<<
operator|*
expr|static_cast
operator|<
specifier|const
name|NS
argument_list|(
name|QSizeF
argument_list|)
operator|*
operator|>
operator|(
name|data
operator|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|QLine
case|:
name|stream
operator|<<
operator|*
expr|static_cast
operator|<
specifier|const
name|NS
argument_list|(
name|QLine
argument_list|)
operator|*
operator|>
operator|(
name|data
operator|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|QLineF
case|:
name|stream
operator|<<
operator|*
expr|static_cast
operator|<
specifier|const
name|NS
argument_list|(
name|QLineF
argument_list|)
operator|*
operator|>
operator|(
name|data
operator|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|QPoint
case|:
name|stream
operator|<<
operator|*
expr|static_cast
operator|<
specifier|const
name|NS
argument_list|(
name|QPoint
argument_list|)
operator|*
operator|>
operator|(
name|data
operator|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|QPointF
case|:
name|stream
operator|<<
operator|*
expr|static_cast
operator|<
specifier|const
name|NS
argument_list|(
name|QPointF
argument_list|)
operator|*
operator|>
operator|(
name|data
operator|)
expr_stmt|;
break|break;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_REGEXP
case|case
name|QMetaType
operator|::
name|QRegExp
case|:
name|stream
operator|<<
operator|*
expr|static_cast
operator|<
specifier|const
name|NS
argument_list|(
name|QRegExp
argument_list|)
operator|*
operator|>
operator|(
name|data
operator|)
expr_stmt|;
break|break;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_BOOTSTRAPPED
case|case
name|QMetaType
operator|::
name|QEasingCurve
case|:
name|stream
operator|<<
operator|*
expr|static_cast
operator|<
specifier|const
name|NS
argument_list|(
name|QEasingCurve
argument_list|)
operator|*
operator|>
operator|(
name|data
operator|)
expr_stmt|;
break|break;
endif|#
directive|endif
case|case
name|QMetaType
operator|::
name|QFont
case|:
case|case
name|QMetaType
operator|::
name|QPixmap
case|:
case|case
name|QMetaType
operator|::
name|QBrush
case|:
case|case
name|QMetaType
operator|::
name|QColor
case|:
case|case
name|QMetaType
operator|::
name|QPalette
case|:
case|case
name|QMetaType
operator|::
name|QImage
case|:
case|case
name|QMetaType
operator|::
name|QPolygon
case|:
case|case
name|QMetaType
operator|::
name|QPolygonF
case|:
case|case
name|QMetaType
operator|::
name|QRegion
case|:
case|case
name|QMetaType
operator|::
name|QBitmap
case|:
case|case
name|QMetaType
operator|::
name|QCursor
case|:
case|case
name|QMetaType
operator|::
name|QKeySequence
case|:
case|case
name|QMetaType
operator|::
name|QPen
case|:
case|case
name|QMetaType
operator|::
name|QTextLength
case|:
case|case
name|QMetaType
operator|::
name|QTextFormat
case|:
case|case
name|QMetaType
operator|::
name|QMatrix
case|:
case|case
name|QMetaType
operator|::
name|QTransform
case|:
case|case
name|QMetaType
operator|::
name|QMatrix4x4
case|:
case|case
name|QMetaType
operator|::
name|QVector2D
case|:
case|case
name|QMetaType
operator|::
name|QVector3D
case|:
case|case
name|QMetaType
operator|::
name|QVector4D
case|:
case|case
name|QMetaType
operator|::
name|QQuaternion
case|:
if|if
condition|(
operator|!
name|qMetaTypeGuiHelper
condition|)
return|return
literal|false
return|;
name|qMetaTypeGuiHelper
index|[
name|type
operator|-
name|FirstGuiType
index|]
operator|.
name|saveOp
argument_list|(
name|stream
argument_list|,
name|data
argument_list|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|QIcon
case|:
case|case
name|QMetaType
operator|::
name|QSizePolicy
case|:
if|if
condition|(
operator|!
name|qMetaTypeWidgetsHelper
condition|)
return|return
literal|false
return|;
name|qMetaTypeWidgetsHelper
index|[
name|type
operator|-
name|FirstWidgetsType
index|]
operator|.
name|saveOp
argument_list|(
name|stream
argument_list|,
name|data
argument_list|)
expr_stmt|;
break|break;
default|default:
block|{
specifier|const
name|QVector
argument_list|<
name|QCustomTypeInfo
argument_list|>
modifier|*
specifier|const
name|ct
init|=
name|customTypes
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|ct
condition|)
return|return
literal|false
return|;
name|SaveOperator
name|saveOp
init|=
literal|0
decl_stmt|;
block|{
name|QReadLocker
name|locker
argument_list|(
name|customTypesLock
argument_list|()
argument_list|)
decl_stmt|;
name|saveOp
operator|=
name|ct
operator|->
name|at
argument_list|(
name|type
operator|-
name|User
argument_list|)
operator|.
name|saveOp
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|saveOp
condition|)
return|return
literal|false
return|;
name|saveOp
argument_list|(
name|stream
argument_list|,
name|data
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/*!     Reads the object of the specified \a type from the given \a     stream into \a data. Returns true if the object is loaded     successfully; otherwise returns false.      The type must have been registered with qRegisterMetaType() and     qRegisterMetaTypeStreamOperators() beforehand.      Normally, you should not need to call this function directly.     Instead, use QVariant's \c operator>>(), which relies on load()     to stream custom types.      \sa save(), qRegisterMetaTypeStreamOperators() */
end_comment
begin_function
DECL|function|load
name|bool
name|QMetaType
operator|::
name|load
parameter_list|(
name|QDataStream
modifier|&
name|stream
parameter_list|,
name|int
name|type
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
block|{
if|if
condition|(
operator|!
name|data
operator|||
operator|!
name|isRegistered
argument_list|(
name|type
argument_list|)
condition|)
return|return
literal|false
return|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|QMetaType
operator|::
name|Void
case|:
case|case
name|QMetaType
operator|::
name|VoidStar
case|:
case|case
name|QMetaType
operator|::
name|QObjectStar
case|:
case|case
name|QMetaType
operator|::
name|QWidgetStar
case|:
return|return
literal|false
return|;
case|case
name|QMetaType
operator|::
name|Long
case|:
block|{
name|qlonglong
name|l
decl_stmt|;
name|stream
operator|>>
name|l
expr_stmt|;
operator|*
cast|static_cast
argument_list|<
name|long
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
operator|=
name|long
argument_list|(
name|l
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QMetaType
operator|::
name|Int
case|:
name|stream
operator|>>
operator|*
cast|static_cast
argument_list|<
name|int
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|Short
case|:
name|stream
operator|>>
operator|*
cast|static_cast
argument_list|<
name|short
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|Char
case|:
comment|// force a char to be signed
name|stream
operator|>>
operator|*
cast|static_cast
argument_list|<
name|signed
name|char
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|ULong
case|:
block|{
name|qulonglong
name|ul
decl_stmt|;
name|stream
operator|>>
name|ul
expr_stmt|;
operator|*
cast|static_cast
argument_list|<
name|ulong
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
operator|=
name|ulong
argument_list|(
name|ul
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QMetaType
operator|::
name|UInt
case|:
name|stream
operator|>>
operator|*
cast|static_cast
argument_list|<
name|uint
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|LongLong
case|:
name|stream
operator|>>
operator|*
cast|static_cast
argument_list|<
name|qlonglong
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|ULongLong
case|:
name|stream
operator|>>
operator|*
cast|static_cast
argument_list|<
name|qulonglong
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|UShort
case|:
name|stream
operator|>>
operator|*
cast|static_cast
argument_list|<
name|ushort
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|UChar
case|:
name|stream
operator|>>
operator|*
cast|static_cast
argument_list|<
name|uchar
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|Bool
case|:
block|{
name|qint8
name|b
decl_stmt|;
name|stream
operator|>>
name|b
expr_stmt|;
operator|*
cast|static_cast
argument_list|<
name|bool
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
operator|=
name|b
expr_stmt|;
break|break;
block|}
case|case
name|QMetaType
operator|::
name|Float
case|:
name|stream
operator|>>
operator|*
cast|static_cast
argument_list|<
name|float
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|Double
case|:
name|stream
operator|>>
operator|*
cast|static_cast
argument_list|<
name|double
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|QChar
case|:
name|stream
operator|>>
operator|*
expr|static_cast
operator|<
name|NS
argument_list|(
name|QChar
argument_list|)
operator|*
operator|>
operator|(
name|data
operator|)
expr_stmt|;
break|break;
ifndef|#
directive|ifndef
name|QT_BOOTSTRAPPED
case|case
name|QMetaType
operator|::
name|QVariantMap
case|:
name|stream
operator|>>
operator|*
expr|static_cast
operator|<
name|NS
argument_list|(
name|QVariantMap
argument_list|)
operator|*
operator|>
operator|(
name|data
operator|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|QVariantHash
case|:
name|stream
operator|>>
operator|*
expr|static_cast
operator|<
name|NS
argument_list|(
name|QVariantHash
argument_list|)
operator|*
operator|>
operator|(
name|data
operator|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|QVariantList
case|:
name|stream
operator|>>
operator|*
expr|static_cast
operator|<
name|NS
argument_list|(
name|QVariantList
argument_list|)
operator|*
operator|>
operator|(
name|data
operator|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|QVariant
case|:
name|stream
operator|>>
operator|*
expr|static_cast
operator|<
name|NS
argument_list|(
name|QVariant
argument_list|)
operator|*
operator|>
operator|(
name|data
operator|)
expr_stmt|;
break|break;
endif|#
directive|endif
case|case
name|QMetaType
operator|::
name|QByteArray
case|:
name|stream
operator|>>
operator|*
expr|static_cast
operator|<
name|NS
argument_list|(
name|QByteArray
argument_list|)
operator|*
operator|>
operator|(
name|data
operator|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|QString
case|:
name|stream
operator|>>
operator|*
expr|static_cast
operator|<
name|NS
argument_list|(
name|QString
argument_list|)
operator|*
operator|>
operator|(
name|data
operator|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|QStringList
case|:
name|stream
operator|>>
operator|*
expr|static_cast
operator|<
name|NS
argument_list|(
name|QStringList
argument_list|)
operator|*
operator|>
operator|(
name|data
operator|)
expr_stmt|;
break|break;
ifndef|#
directive|ifndef
name|QT_BOOTSTRAPPED
case|case
name|QMetaType
operator|::
name|QBitArray
case|:
name|stream
operator|>>
operator|*
expr|static_cast
operator|<
name|NS
argument_list|(
name|QBitArray
argument_list|)
operator|*
operator|>
operator|(
name|data
operator|)
expr_stmt|;
break|break;
endif|#
directive|endif
case|case
name|QMetaType
operator|::
name|QDate
case|:
name|stream
operator|>>
operator|*
expr|static_cast
operator|<
name|NS
argument_list|(
name|QDate
argument_list|)
operator|*
operator|>
operator|(
name|data
operator|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|QTime
case|:
name|stream
operator|>>
operator|*
expr|static_cast
operator|<
name|NS
argument_list|(
name|QTime
argument_list|)
operator|*
operator|>
operator|(
name|data
operator|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|QDateTime
case|:
name|stream
operator|>>
operator|*
expr|static_cast
operator|<
name|NS
argument_list|(
name|QDateTime
argument_list|)
operator|*
operator|>
operator|(
name|data
operator|)
expr_stmt|;
break|break;
ifndef|#
directive|ifndef
name|QT_BOOTSTRAPPED
case|case
name|QMetaType
operator|::
name|QUrl
case|:
name|stream
operator|>>
operator|*
expr|static_cast
operator|<
name|NS
argument_list|(
name|QUrl
argument_list|)
operator|*
operator|>
operator|(
name|data
operator|)
expr_stmt|;
break|break;
endif|#
directive|endif
case|case
name|QMetaType
operator|::
name|QLocale
case|:
name|stream
operator|>>
operator|*
expr|static_cast
operator|<
name|NS
argument_list|(
name|QLocale
argument_list|)
operator|*
operator|>
operator|(
name|data
operator|)
expr_stmt|;
break|break;
ifndef|#
directive|ifndef
name|QT_NO_GEOM_VARIANT
case|case
name|QMetaType
operator|::
name|QRect
case|:
name|stream
operator|>>
operator|*
expr|static_cast
operator|<
name|NS
argument_list|(
name|QRect
argument_list|)
operator|*
operator|>
operator|(
name|data
operator|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|QRectF
case|:
name|stream
operator|>>
operator|*
expr|static_cast
operator|<
name|NS
argument_list|(
name|QRectF
argument_list|)
operator|*
operator|>
operator|(
name|data
operator|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|QSize
case|:
name|stream
operator|>>
operator|*
expr|static_cast
operator|<
name|NS
argument_list|(
name|QSize
argument_list|)
operator|*
operator|>
operator|(
name|data
operator|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|QSizeF
case|:
name|stream
operator|>>
operator|*
expr|static_cast
operator|<
name|NS
argument_list|(
name|QSizeF
argument_list|)
operator|*
operator|>
operator|(
name|data
operator|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|QLine
case|:
name|stream
operator|>>
operator|*
expr|static_cast
operator|<
name|NS
argument_list|(
name|QLine
argument_list|)
operator|*
operator|>
operator|(
name|data
operator|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|QLineF
case|:
name|stream
operator|>>
operator|*
expr|static_cast
operator|<
name|NS
argument_list|(
name|QLineF
argument_list|)
operator|*
operator|>
operator|(
name|data
operator|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|QPoint
case|:
name|stream
operator|>>
operator|*
expr|static_cast
operator|<
name|NS
argument_list|(
name|QPoint
argument_list|)
operator|*
operator|>
operator|(
name|data
operator|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|QPointF
case|:
name|stream
operator|>>
operator|*
expr|static_cast
operator|<
name|NS
argument_list|(
name|QPointF
argument_list|)
operator|*
operator|>
operator|(
name|data
operator|)
expr_stmt|;
break|break;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_REGEXP
case|case
name|QMetaType
operator|::
name|QRegExp
case|:
name|stream
operator|>>
operator|*
expr|static_cast
operator|<
name|NS
argument_list|(
name|QRegExp
argument_list|)
operator|*
operator|>
operator|(
name|data
operator|)
expr_stmt|;
break|break;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_BOOTSTRAPPED
case|case
name|QMetaType
operator|::
name|QEasingCurve
case|:
name|stream
operator|>>
operator|*
expr|static_cast
operator|<
name|NS
argument_list|(
name|QEasingCurve
argument_list|)
operator|*
operator|>
operator|(
name|data
operator|)
expr_stmt|;
break|break;
endif|#
directive|endif
case|case
name|QMetaType
operator|::
name|QFont
case|:
case|case
name|QMetaType
operator|::
name|QPixmap
case|:
case|case
name|QMetaType
operator|::
name|QBrush
case|:
case|case
name|QMetaType
operator|::
name|QColor
case|:
case|case
name|QMetaType
operator|::
name|QPalette
case|:
case|case
name|QMetaType
operator|::
name|QImage
case|:
case|case
name|QMetaType
operator|::
name|QPolygon
case|:
case|case
name|QMetaType
operator|::
name|QPolygonF
case|:
case|case
name|QMetaType
operator|::
name|QRegion
case|:
case|case
name|QMetaType
operator|::
name|QBitmap
case|:
case|case
name|QMetaType
operator|::
name|QCursor
case|:
case|case
name|QMetaType
operator|::
name|QKeySequence
case|:
case|case
name|QMetaType
operator|::
name|QPen
case|:
case|case
name|QMetaType
operator|::
name|QTextLength
case|:
case|case
name|QMetaType
operator|::
name|QTextFormat
case|:
case|case
name|QMetaType
operator|::
name|QMatrix
case|:
case|case
name|QMetaType
operator|::
name|QTransform
case|:
case|case
name|QMetaType
operator|::
name|QMatrix4x4
case|:
case|case
name|QMetaType
operator|::
name|QVector2D
case|:
case|case
name|QMetaType
operator|::
name|QVector3D
case|:
case|case
name|QMetaType
operator|::
name|QVector4D
case|:
case|case
name|QMetaType
operator|::
name|QQuaternion
case|:
if|if
condition|(
operator|!
name|qMetaTypeGuiHelper
condition|)
return|return
literal|false
return|;
name|qMetaTypeGuiHelper
index|[
name|type
operator|-
name|FirstGuiType
index|]
operator|.
name|loadOp
argument_list|(
name|stream
argument_list|,
name|data
argument_list|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|QIcon
case|:
case|case
name|QMetaType
operator|::
name|QSizePolicy
case|:
if|if
condition|(
operator|!
name|qMetaTypeWidgetsHelper
condition|)
return|return
literal|false
return|;
name|qMetaTypeWidgetsHelper
index|[
name|type
operator|-
name|FirstWidgetsType
index|]
operator|.
name|loadOp
argument_list|(
name|stream
argument_list|,
name|data
argument_list|)
expr_stmt|;
break|break;
default|default:
block|{
specifier|const
name|QVector
argument_list|<
name|QCustomTypeInfo
argument_list|>
modifier|*
specifier|const
name|ct
init|=
name|customTypes
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|ct
condition|)
return|return
literal|false
return|;
name|LoadOperator
name|loadOp
init|=
literal|0
decl_stmt|;
block|{
name|QReadLocker
name|locker
argument_list|(
name|customTypesLock
argument_list|()
argument_list|)
decl_stmt|;
name|loadOp
operator|=
name|ct
operator|->
name|at
argument_list|(
name|type
operator|-
name|User
argument_list|)
operator|.
name|loadOp
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|loadOp
condition|)
return|return
literal|false
return|;
name|loadOp
argument_list|(
name|stream
argument_list|,
name|data
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
return|return
literal|true
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DATASTREAM
end_comment
begin_comment
comment|/*!     Returns a copy of \a copy, assuming it is of type \a type. If \a     copy is zero, creates a default type.      \sa destroy(), isRegistered(), Type */
end_comment
begin_function
DECL|function|create
name|void
modifier|*
name|QMetaType
operator|::
name|create
parameter_list|(
name|int
name|type
parameter_list|,
specifier|const
name|void
modifier|*
name|copy
parameter_list|)
block|{
if|if
condition|(
name|copy
condition|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|QMetaType
operator|::
name|VoidStar
case|:
case|case
name|QMetaType
operator|::
name|QObjectStar
case|:
case|case
name|QMetaType
operator|::
name|QWidgetStar
case|:
return|return
operator|new
name|void
operator|*
operator|(
operator|*
cast|static_cast
argument_list|<
name|void
operator|*
specifier|const
operator|*
argument_list|>
argument_list|(
name|copy
argument_list|)
operator|)
return|;
case|case
name|QMetaType
operator|::
name|Long
case|:
return|return
operator|new
name|long
argument_list|(
operator|*
cast|static_cast
argument_list|<
specifier|const
name|long
operator|*
argument_list|>
argument_list|(
name|copy
argument_list|)
argument_list|)
return|;
case|case
name|QMetaType
operator|::
name|Int
case|:
return|return
operator|new
name|int
argument_list|(
operator|*
cast|static_cast
argument_list|<
specifier|const
name|int
operator|*
argument_list|>
argument_list|(
name|copy
argument_list|)
argument_list|)
return|;
case|case
name|QMetaType
operator|::
name|Short
case|:
return|return
operator|new
name|short
argument_list|(
operator|*
cast|static_cast
argument_list|<
specifier|const
name|short
operator|*
argument_list|>
argument_list|(
name|copy
argument_list|)
argument_list|)
return|;
case|case
name|QMetaType
operator|::
name|Char
case|:
return|return
operator|new
name|char
argument_list|(
operator|*
cast|static_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|copy
argument_list|)
argument_list|)
return|;
case|case
name|QMetaType
operator|::
name|ULong
case|:
return|return
operator|new
name|ulong
argument_list|(
operator|*
cast|static_cast
argument_list|<
specifier|const
name|ulong
operator|*
argument_list|>
argument_list|(
name|copy
argument_list|)
argument_list|)
return|;
case|case
name|QMetaType
operator|::
name|UInt
case|:
return|return
operator|new
name|uint
argument_list|(
operator|*
cast|static_cast
argument_list|<
specifier|const
name|uint
operator|*
argument_list|>
argument_list|(
name|copy
argument_list|)
argument_list|)
return|;
case|case
name|QMetaType
operator|::
name|LongLong
case|:
return|return
operator|new
name|qlonglong
argument_list|(
operator|*
cast|static_cast
argument_list|<
specifier|const
name|qlonglong
operator|*
argument_list|>
argument_list|(
name|copy
argument_list|)
argument_list|)
return|;
case|case
name|QMetaType
operator|::
name|ULongLong
case|:
return|return
operator|new
name|qulonglong
argument_list|(
operator|*
cast|static_cast
argument_list|<
specifier|const
name|qulonglong
operator|*
argument_list|>
argument_list|(
name|copy
argument_list|)
argument_list|)
return|;
case|case
name|QMetaType
operator|::
name|UShort
case|:
return|return
operator|new
name|ushort
argument_list|(
operator|*
cast|static_cast
argument_list|<
specifier|const
name|ushort
operator|*
argument_list|>
argument_list|(
name|copy
argument_list|)
argument_list|)
return|;
case|case
name|QMetaType
operator|::
name|UChar
case|:
return|return
operator|new
name|uchar
argument_list|(
operator|*
cast|static_cast
argument_list|<
specifier|const
name|uchar
operator|*
argument_list|>
argument_list|(
name|copy
argument_list|)
argument_list|)
return|;
case|case
name|QMetaType
operator|::
name|Bool
case|:
return|return
operator|new
name|bool
argument_list|(
operator|*
cast|static_cast
argument_list|<
specifier|const
name|bool
operator|*
argument_list|>
argument_list|(
name|copy
argument_list|)
argument_list|)
return|;
case|case
name|QMetaType
operator|::
name|Float
case|:
return|return
operator|new
name|float
argument_list|(
operator|*
cast|static_cast
argument_list|<
specifier|const
name|float
operator|*
argument_list|>
argument_list|(
name|copy
argument_list|)
argument_list|)
return|;
case|case
name|QMetaType
operator|::
name|Double
case|:
return|return
operator|new
name|double
argument_list|(
operator|*
cast|static_cast
argument_list|<
specifier|const
name|double
operator|*
argument_list|>
argument_list|(
name|copy
argument_list|)
argument_list|)
return|;
case|case
name|QMetaType
operator|::
name|QChar
case|:
return|return
operator|new
name|NS
argument_list|(
argument|QChar
argument_list|)
operator|(
operator|*
expr|static_cast
operator|<
specifier|const
name|NS
argument_list|(
name|QChar
argument_list|)
operator|*
operator|>
operator|(
name|copy
operator|)
operator|)
return|;
ifndef|#
directive|ifndef
name|QT_BOOTSTRAPPED
case|case
name|QMetaType
operator|::
name|QVariantMap
case|:
return|return
operator|new
name|NS
argument_list|(
argument|QVariantMap
argument_list|)
operator|(
operator|*
expr|static_cast
operator|<
specifier|const
name|NS
argument_list|(
name|QVariantMap
argument_list|)
operator|*
operator|>
operator|(
name|copy
operator|)
operator|)
return|;
case|case
name|QMetaType
operator|::
name|QVariantHash
case|:
return|return
operator|new
name|NS
argument_list|(
argument|QVariantHash
argument_list|)
operator|(
operator|*
expr|static_cast
operator|<
specifier|const
name|NS
argument_list|(
name|QVariantHash
argument_list|)
operator|*
operator|>
operator|(
name|copy
operator|)
operator|)
return|;
case|case
name|QMetaType
operator|::
name|QVariantList
case|:
return|return
operator|new
name|NS
argument_list|(
argument|QVariantList
argument_list|)
operator|(
operator|*
expr|static_cast
operator|<
specifier|const
name|NS
argument_list|(
name|QVariantList
argument_list|)
operator|*
operator|>
operator|(
name|copy
operator|)
operator|)
return|;
case|case
name|QMetaType
operator|::
name|QVariant
case|:
return|return
operator|new
name|NS
argument_list|(
argument|QVariant
argument_list|)
operator|(
operator|*
expr|static_cast
operator|<
specifier|const
name|NS
argument_list|(
name|QVariant
argument_list|)
operator|*
operator|>
operator|(
name|copy
operator|)
operator|)
return|;
endif|#
directive|endif
case|case
name|QMetaType
operator|::
name|QByteArray
case|:
return|return
operator|new
name|NS
argument_list|(
argument|QByteArray
argument_list|)
operator|(
operator|*
expr|static_cast
operator|<
specifier|const
name|NS
argument_list|(
name|QByteArray
argument_list|)
operator|*
operator|>
operator|(
name|copy
operator|)
operator|)
return|;
case|case
name|QMetaType
operator|::
name|QString
case|:
return|return
operator|new
name|NS
argument_list|(
argument|QString
argument_list|)
operator|(
operator|*
expr|static_cast
operator|<
specifier|const
name|NS
argument_list|(
name|QString
argument_list|)
operator|*
operator|>
operator|(
name|copy
operator|)
operator|)
return|;
case|case
name|QMetaType
operator|::
name|QStringList
case|:
return|return
operator|new
name|NS
argument_list|(
argument|QStringList
argument_list|)
operator|(
operator|*
expr|static_cast
operator|<
specifier|const
name|NS
argument_list|(
name|QStringList
argument_list|)
operator|*
operator|>
operator|(
name|copy
operator|)
operator|)
return|;
ifndef|#
directive|ifndef
name|QT_BOOTSTRAPPED
case|case
name|QMetaType
operator|::
name|QBitArray
case|:
return|return
operator|new
name|NS
argument_list|(
argument|QBitArray
argument_list|)
operator|(
operator|*
expr|static_cast
operator|<
specifier|const
name|NS
argument_list|(
name|QBitArray
argument_list|)
operator|*
operator|>
operator|(
name|copy
operator|)
operator|)
return|;
endif|#
directive|endif
case|case
name|QMetaType
operator|::
name|QDate
case|:
return|return
operator|new
name|NS
argument_list|(
argument|QDate
argument_list|)
operator|(
operator|*
expr|static_cast
operator|<
specifier|const
name|NS
argument_list|(
name|QDate
argument_list|)
operator|*
operator|>
operator|(
name|copy
operator|)
operator|)
return|;
case|case
name|QMetaType
operator|::
name|QTime
case|:
return|return
operator|new
name|NS
argument_list|(
argument|QTime
argument_list|)
operator|(
operator|*
expr|static_cast
operator|<
specifier|const
name|NS
argument_list|(
name|QTime
argument_list|)
operator|*
operator|>
operator|(
name|copy
operator|)
operator|)
return|;
case|case
name|QMetaType
operator|::
name|QDateTime
case|:
return|return
operator|new
name|NS
argument_list|(
argument|QDateTime
argument_list|)
operator|(
operator|*
expr|static_cast
operator|<
specifier|const
name|NS
argument_list|(
name|QDateTime
argument_list|)
operator|*
operator|>
operator|(
name|copy
operator|)
operator|)
return|;
ifndef|#
directive|ifndef
name|QT_BOOTSTRAPPED
case|case
name|QMetaType
operator|::
name|QUrl
case|:
return|return
operator|new
name|NS
argument_list|(
argument|QUrl
argument_list|)
operator|(
operator|*
expr|static_cast
operator|<
specifier|const
name|NS
argument_list|(
name|QUrl
argument_list|)
operator|*
operator|>
operator|(
name|copy
operator|)
operator|)
return|;
endif|#
directive|endif
case|case
name|QMetaType
operator|::
name|QLocale
case|:
return|return
operator|new
name|NS
argument_list|(
argument|QLocale
argument_list|)
operator|(
operator|*
expr|static_cast
operator|<
specifier|const
name|NS
argument_list|(
name|QLocale
argument_list|)
operator|*
operator|>
operator|(
name|copy
operator|)
operator|)
return|;
ifndef|#
directive|ifndef
name|QT_NO_GEOM_VARIANT
case|case
name|QMetaType
operator|::
name|QRect
case|:
return|return
operator|new
name|NS
argument_list|(
argument|QRect
argument_list|)
operator|(
operator|*
expr|static_cast
operator|<
specifier|const
name|NS
argument_list|(
name|QRect
argument_list|)
operator|*
operator|>
operator|(
name|copy
operator|)
operator|)
return|;
case|case
name|QMetaType
operator|::
name|QRectF
case|:
return|return
operator|new
name|NS
argument_list|(
argument|QRectF
argument_list|)
operator|(
operator|*
expr|static_cast
operator|<
specifier|const
name|NS
argument_list|(
name|QRectF
argument_list|)
operator|*
operator|>
operator|(
name|copy
operator|)
operator|)
return|;
case|case
name|QMetaType
operator|::
name|QSize
case|:
return|return
operator|new
name|NS
argument_list|(
argument|QSize
argument_list|)
operator|(
operator|*
expr|static_cast
operator|<
specifier|const
name|NS
argument_list|(
name|QSize
argument_list|)
operator|*
operator|>
operator|(
name|copy
operator|)
operator|)
return|;
case|case
name|QMetaType
operator|::
name|QSizeF
case|:
return|return
operator|new
name|NS
argument_list|(
argument|QSizeF
argument_list|)
operator|(
operator|*
expr|static_cast
operator|<
specifier|const
name|NS
argument_list|(
name|QSizeF
argument_list|)
operator|*
operator|>
operator|(
name|copy
operator|)
operator|)
return|;
case|case
name|QMetaType
operator|::
name|QLine
case|:
return|return
operator|new
name|NS
argument_list|(
argument|QLine
argument_list|)
operator|(
operator|*
expr|static_cast
operator|<
specifier|const
name|NS
argument_list|(
name|QLine
argument_list|)
operator|*
operator|>
operator|(
name|copy
operator|)
operator|)
return|;
case|case
name|QMetaType
operator|::
name|QLineF
case|:
return|return
operator|new
name|NS
argument_list|(
argument|QLineF
argument_list|)
operator|(
operator|*
expr|static_cast
operator|<
specifier|const
name|NS
argument_list|(
name|QLineF
argument_list|)
operator|*
operator|>
operator|(
name|copy
operator|)
operator|)
return|;
case|case
name|QMetaType
operator|::
name|QPoint
case|:
return|return
operator|new
name|NS
argument_list|(
argument|QPoint
argument_list|)
operator|(
operator|*
expr|static_cast
operator|<
specifier|const
name|NS
argument_list|(
name|QPoint
argument_list|)
operator|*
operator|>
operator|(
name|copy
operator|)
operator|)
return|;
case|case
name|QMetaType
operator|::
name|QPointF
case|:
return|return
operator|new
name|NS
argument_list|(
argument|QPointF
argument_list|)
operator|(
operator|*
expr|static_cast
operator|<
specifier|const
name|NS
argument_list|(
name|QPointF
argument_list|)
operator|*
operator|>
operator|(
name|copy
operator|)
operator|)
return|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_REGEXP
case|case
name|QMetaType
operator|::
name|QRegExp
case|:
return|return
operator|new
name|NS
argument_list|(
argument|QRegExp
argument_list|)
operator|(
operator|*
expr|static_cast
operator|<
specifier|const
name|NS
argument_list|(
name|QRegExp
argument_list|)
operator|*
operator|>
operator|(
name|copy
operator|)
operator|)
return|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_BOOTSTRAPPED
case|case
name|QMetaType
operator|::
name|QEasingCurve
case|:
return|return
operator|new
name|NS
argument_list|(
argument|QEasingCurve
argument_list|)
operator|(
operator|*
expr|static_cast
operator|<
specifier|const
name|NS
argument_list|(
name|QEasingCurve
argument_list|)
operator|*
operator|>
operator|(
name|copy
operator|)
operator|)
return|;
endif|#
directive|endif
case|case
name|QMetaType
operator|::
name|Void
case|:
return|return
literal|0
return|;
default|default:
empty_stmt|;
block|}
block|}
else|else
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|QMetaType
operator|::
name|VoidStar
case|:
case|case
name|QMetaType
operator|::
name|QObjectStar
case|:
case|case
name|QMetaType
operator|::
name|QWidgetStar
case|:
return|return
operator|new
name|void
operator|*
return|;
case|case
name|QMetaType
operator|::
name|Long
case|:
return|return
operator|new
name|long
return|;
case|case
name|QMetaType
operator|::
name|Int
case|:
return|return
operator|new
name|int
return|;
case|case
name|QMetaType
operator|::
name|Short
case|:
return|return
operator|new
name|short
return|;
case|case
name|QMetaType
operator|::
name|Char
case|:
return|return
operator|new
name|char
return|;
case|case
name|QMetaType
operator|::
name|ULong
case|:
return|return
operator|new
name|ulong
return|;
case|case
name|QMetaType
operator|::
name|UInt
case|:
return|return
operator|new
name|uint
return|;
case|case
name|QMetaType
operator|::
name|LongLong
case|:
return|return
operator|new
name|qlonglong
return|;
case|case
name|QMetaType
operator|::
name|ULongLong
case|:
return|return
operator|new
name|qulonglong
return|;
case|case
name|QMetaType
operator|::
name|UShort
case|:
return|return
operator|new
name|ushort
return|;
case|case
name|QMetaType
operator|::
name|UChar
case|:
return|return
operator|new
name|uchar
return|;
case|case
name|QMetaType
operator|::
name|Bool
case|:
return|return
operator|new
name|bool
return|;
case|case
name|QMetaType
operator|::
name|Float
case|:
return|return
operator|new
name|float
return|;
case|case
name|QMetaType
operator|::
name|Double
case|:
return|return
operator|new
name|double
return|;
case|case
name|QMetaType
operator|::
name|QChar
case|:
return|return
operator|new
name|NS
argument_list|(
name|QChar
argument_list|)
return|;
ifndef|#
directive|ifndef
name|QT_BOOTSTRAPPED
case|case
name|QMetaType
operator|::
name|QVariantMap
case|:
return|return
operator|new
name|NS
argument_list|(
name|QVariantMap
argument_list|)
return|;
case|case
name|QMetaType
operator|::
name|QVariantHash
case|:
return|return
operator|new
name|NS
argument_list|(
name|QVariantHash
argument_list|)
return|;
case|case
name|QMetaType
operator|::
name|QVariantList
case|:
return|return
operator|new
name|NS
argument_list|(
name|QVariantList
argument_list|)
return|;
case|case
name|QMetaType
operator|::
name|QVariant
case|:
return|return
operator|new
name|NS
argument_list|(
name|QVariant
argument_list|)
return|;
endif|#
directive|endif
case|case
name|QMetaType
operator|::
name|QByteArray
case|:
return|return
operator|new
name|NS
argument_list|(
name|QByteArray
argument_list|)
return|;
case|case
name|QMetaType
operator|::
name|QString
case|:
return|return
operator|new
name|NS
argument_list|(
name|QString
argument_list|)
return|;
case|case
name|QMetaType
operator|::
name|QStringList
case|:
return|return
operator|new
name|NS
argument_list|(
name|QStringList
argument_list|)
return|;
ifndef|#
directive|ifndef
name|QT_BOOTSTRAPPED
case|case
name|QMetaType
operator|::
name|QBitArray
case|:
return|return
operator|new
name|NS
argument_list|(
name|QBitArray
argument_list|)
return|;
endif|#
directive|endif
case|case
name|QMetaType
operator|::
name|QDate
case|:
return|return
operator|new
name|NS
argument_list|(
name|QDate
argument_list|)
return|;
case|case
name|QMetaType
operator|::
name|QTime
case|:
return|return
operator|new
name|NS
argument_list|(
name|QTime
argument_list|)
return|;
case|case
name|QMetaType
operator|::
name|QDateTime
case|:
return|return
operator|new
name|NS
argument_list|(
name|QDateTime
argument_list|)
return|;
ifndef|#
directive|ifndef
name|QT_BOOTSTRAPPED
case|case
name|QMetaType
operator|::
name|QUrl
case|:
return|return
operator|new
name|NS
argument_list|(
name|QUrl
argument_list|)
return|;
endif|#
directive|endif
case|case
name|QMetaType
operator|::
name|QLocale
case|:
return|return
operator|new
name|NS
argument_list|(
name|QLocale
argument_list|)
return|;
ifndef|#
directive|ifndef
name|QT_NO_GEOM_VARIANT
case|case
name|QMetaType
operator|::
name|QRect
case|:
return|return
operator|new
name|NS
argument_list|(
name|QRect
argument_list|)
return|;
case|case
name|QMetaType
operator|::
name|QRectF
case|:
return|return
operator|new
name|NS
argument_list|(
name|QRectF
argument_list|)
return|;
case|case
name|QMetaType
operator|::
name|QSize
case|:
return|return
operator|new
name|NS
argument_list|(
name|QSize
argument_list|)
return|;
case|case
name|QMetaType
operator|::
name|QSizeF
case|:
return|return
operator|new
name|NS
argument_list|(
name|QSizeF
argument_list|)
return|;
case|case
name|QMetaType
operator|::
name|QLine
case|:
return|return
operator|new
name|NS
argument_list|(
name|QLine
argument_list|)
return|;
case|case
name|QMetaType
operator|::
name|QLineF
case|:
return|return
operator|new
name|NS
argument_list|(
name|QLineF
argument_list|)
return|;
case|case
name|QMetaType
operator|::
name|QPoint
case|:
return|return
operator|new
name|NS
argument_list|(
name|QPoint
argument_list|)
return|;
case|case
name|QMetaType
operator|::
name|QPointF
case|:
return|return
operator|new
name|NS
argument_list|(
name|QPointF
argument_list|)
return|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_REGEXP
case|case
name|QMetaType
operator|::
name|QRegExp
case|:
return|return
operator|new
name|NS
argument_list|(
name|QRegExp
argument_list|)
return|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_BOOTSTRAPPED
case|case
name|QMetaType
operator|::
name|QEasingCurve
case|:
return|return
operator|new
name|NS
argument_list|(
name|QEasingCurve
argument_list|)
return|;
endif|#
directive|endif
case|case
name|QMetaType
operator|::
name|Void
case|:
return|return
literal|0
return|;
default|default:
empty_stmt|;
block|}
block|}
name|Creator
name|creator
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|type
operator|>=
name|FirstGuiType
operator|&&
name|type
operator|<=
name|LastGuiType
condition|)
block|{
if|if
condition|(
operator|!
name|qMetaTypeGuiHelper
condition|)
return|return
literal|0
return|;
name|creator
operator|=
name|qMetaTypeGuiHelper
index|[
name|type
operator|-
name|FirstGuiType
index|]
operator|.
name|creator
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|>=
name|FirstWidgetsType
operator|&&
name|type
operator|<=
name|LastWidgetsType
condition|)
block|{
if|if
condition|(
operator|!
name|qMetaTypeWidgetsHelper
condition|)
return|return
literal|0
return|;
name|creator
operator|=
name|qMetaTypeWidgetsHelper
index|[
name|type
operator|-
name|FirstWidgetsType
index|]
operator|.
name|creator
expr_stmt|;
block|}
else|else
block|{
specifier|const
name|QVector
argument_list|<
name|QCustomTypeInfo
argument_list|>
modifier|*
specifier|const
name|ct
init|=
name|customTypes
argument_list|()
decl_stmt|;
name|QReadLocker
name|locker
argument_list|(
name|customTypesLock
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|<
name|User
operator|||
operator|!
name|ct
operator|||
name|ct
operator|->
name|count
argument_list|()
operator|<=
name|type
operator|-
name|User
condition|)
return|return
literal|0
return|;
if|if
condition|(
name|ct
operator|->
name|at
argument_list|(
name|type
operator|-
name|User
argument_list|)
operator|.
name|typeName
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|0
return|;
name|creator
operator|=
name|ct
operator|->
name|at
argument_list|(
name|type
operator|-
name|User
argument_list|)
operator|.
name|creator
expr_stmt|;
block|}
return|return
name|creator
argument_list|(
name|copy
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Destroys the \a data, assuming it is of the \a type given.      \sa create(), isRegistered(), Type */
end_comment
begin_function
DECL|function|destroy
name|void
name|QMetaType
operator|::
name|destroy
parameter_list|(
name|int
name|type
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
block|{
if|if
condition|(
operator|!
name|data
condition|)
return|return;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|QMetaType
operator|::
name|VoidStar
case|:
case|case
name|QMetaType
operator|::
name|QObjectStar
case|:
case|case
name|QMetaType
operator|::
name|QWidgetStar
case|:
operator|delete
cast|static_cast
argument_list|<
name|void
operator|*
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|Long
case|:
operator|delete
cast|static_cast
argument_list|<
name|long
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|Int
case|:
operator|delete
cast|static_cast
argument_list|<
name|int
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|Short
case|:
operator|delete
cast|static_cast
argument_list|<
name|short
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|Char
case|:
operator|delete
cast|static_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|ULong
case|:
operator|delete
cast|static_cast
argument_list|<
name|ulong
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|LongLong
case|:
operator|delete
cast|static_cast
argument_list|<
name|qlonglong
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|ULongLong
case|:
operator|delete
cast|static_cast
argument_list|<
name|qulonglong
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|UInt
case|:
operator|delete
cast|static_cast
argument_list|<
name|uint
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|UShort
case|:
operator|delete
cast|static_cast
argument_list|<
name|ushort
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|UChar
case|:
operator|delete
cast|static_cast
argument_list|<
name|uchar
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|Bool
case|:
operator|delete
cast|static_cast
argument_list|<
name|bool
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|Float
case|:
operator|delete
cast|static_cast
argument_list|<
name|float
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|Double
case|:
operator|delete
cast|static_cast
argument_list|<
name|double
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|QChar
case|:
operator|delete
expr|static_cast
operator|<
name|NS
argument_list|(
name|QChar
argument_list|)
operator|*
operator|>
operator|(
name|data
operator|)
expr_stmt|;
break|break;
ifndef|#
directive|ifndef
name|QT_BOOTSTRAPPED
case|case
name|QMetaType
operator|::
name|QVariantMap
case|:
operator|delete
expr|static_cast
operator|<
name|NS
argument_list|(
name|QVariantMap
argument_list|)
operator|*
operator|>
operator|(
name|data
operator|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|QVariantHash
case|:
operator|delete
expr|static_cast
operator|<
name|NS
argument_list|(
name|QVariantHash
argument_list|)
operator|*
operator|>
operator|(
name|data
operator|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|QVariantList
case|:
operator|delete
expr|static_cast
operator|<
name|NS
argument_list|(
name|QVariantList
argument_list|)
operator|*
operator|>
operator|(
name|data
operator|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|QVariant
case|:
operator|delete
expr|static_cast
operator|<
name|NS
argument_list|(
name|QVariant
argument_list|)
operator|*
operator|>
operator|(
name|data
operator|)
expr_stmt|;
break|break;
endif|#
directive|endif
case|case
name|QMetaType
operator|::
name|QByteArray
case|:
operator|delete
expr|static_cast
operator|<
name|NS
argument_list|(
name|QByteArray
argument_list|)
operator|*
operator|>
operator|(
name|data
operator|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|QString
case|:
operator|delete
expr|static_cast
operator|<
name|NS
argument_list|(
name|QString
argument_list|)
operator|*
operator|>
operator|(
name|data
operator|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|QStringList
case|:
operator|delete
expr|static_cast
operator|<
name|NS
argument_list|(
name|QStringList
argument_list|)
operator|*
operator|>
operator|(
name|data
operator|)
expr_stmt|;
break|break;
ifndef|#
directive|ifndef
name|QT_BOOTSTRAPPED
case|case
name|QMetaType
operator|::
name|QBitArray
case|:
operator|delete
expr|static_cast
operator|<
name|NS
argument_list|(
name|QBitArray
argument_list|)
operator|*
operator|>
operator|(
name|data
operator|)
expr_stmt|;
break|break;
endif|#
directive|endif
case|case
name|QMetaType
operator|::
name|QDate
case|:
operator|delete
expr|static_cast
operator|<
name|NS
argument_list|(
name|QDate
argument_list|)
operator|*
operator|>
operator|(
name|data
operator|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|QTime
case|:
operator|delete
expr|static_cast
operator|<
name|NS
argument_list|(
name|QTime
argument_list|)
operator|*
operator|>
operator|(
name|data
operator|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|QDateTime
case|:
operator|delete
expr|static_cast
operator|<
name|NS
argument_list|(
name|QDateTime
argument_list|)
operator|*
operator|>
operator|(
name|data
operator|)
expr_stmt|;
break|break;
ifndef|#
directive|ifndef
name|QT_BOOTSTRAPPED
case|case
name|QMetaType
operator|::
name|QUrl
case|:
operator|delete
expr|static_cast
operator|<
name|NS
argument_list|(
name|QUrl
argument_list|)
operator|*
operator|>
operator|(
name|data
operator|)
expr_stmt|;
endif|#
directive|endif
break|break;
case|case
name|QMetaType
operator|::
name|QLocale
case|:
operator|delete
expr|static_cast
operator|<
name|NS
argument_list|(
name|QLocale
argument_list|)
operator|*
operator|>
operator|(
name|data
operator|)
expr_stmt|;
break|break;
ifndef|#
directive|ifndef
name|QT_NO_GEOM_VARIANT
case|case
name|QMetaType
operator|::
name|QRect
case|:
operator|delete
expr|static_cast
operator|<
name|NS
argument_list|(
name|QRect
argument_list|)
operator|*
operator|>
operator|(
name|data
operator|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|QRectF
case|:
operator|delete
expr|static_cast
operator|<
name|NS
argument_list|(
name|QRectF
argument_list|)
operator|*
operator|>
operator|(
name|data
operator|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|QSize
case|:
operator|delete
expr|static_cast
operator|<
name|NS
argument_list|(
name|QSize
argument_list|)
operator|*
operator|>
operator|(
name|data
operator|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|QSizeF
case|:
operator|delete
expr|static_cast
operator|<
name|NS
argument_list|(
name|QSizeF
argument_list|)
operator|*
operator|>
operator|(
name|data
operator|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|QLine
case|:
operator|delete
expr|static_cast
operator|<
name|NS
argument_list|(
name|QLine
argument_list|)
operator|*
operator|>
operator|(
name|data
operator|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|QLineF
case|:
operator|delete
expr|static_cast
operator|<
name|NS
argument_list|(
name|QLineF
argument_list|)
operator|*
operator|>
operator|(
name|data
operator|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|QPoint
case|:
operator|delete
expr|static_cast
operator|<
name|NS
argument_list|(
name|QPoint
argument_list|)
operator|*
operator|>
operator|(
name|data
operator|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|QPointF
case|:
operator|delete
expr|static_cast
operator|<
name|NS
argument_list|(
name|QPointF
argument_list|)
operator|*
operator|>
operator|(
name|data
operator|)
expr_stmt|;
break|break;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_REGEXP
case|case
name|QMetaType
operator|::
name|QRegExp
case|:
operator|delete
expr|static_cast
operator|<
name|NS
argument_list|(
name|QRegExp
argument_list|)
operator|*
operator|>
operator|(
name|data
operator|)
expr_stmt|;
break|break;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_BOOTSTRAPPED
case|case
name|QMetaType
operator|::
name|QEasingCurve
case|:
operator|delete
expr|static_cast
operator|<
name|NS
argument_list|(
name|QEasingCurve
argument_list|)
operator|*
operator|>
operator|(
name|data
operator|)
expr_stmt|;
break|break;
endif|#
directive|endif
case|case
name|QMetaType
operator|::
name|Void
case|:
break|break;
default|default:
block|{
specifier|const
name|QVector
argument_list|<
name|QCustomTypeInfo
argument_list|>
modifier|*
specifier|const
name|ct
init|=
name|customTypes
argument_list|()
decl_stmt|;
name|Deleter
name|deleter
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|type
operator|>=
name|FirstGuiType
operator|&&
name|type
operator|<=
name|LastGuiType
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|qMetaTypeGuiHelper
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|qMetaTypeGuiHelper
condition|)
return|return;
name|deleter
operator|=
name|qMetaTypeGuiHelper
index|[
name|type
operator|-
name|FirstGuiType
index|]
operator|.
name|deleter
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|>=
name|FirstWidgetsType
operator|&&
name|type
operator|<=
name|LastWidgetsType
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|qMetaTypeWidgetsHelper
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|qMetaTypeWidgetsHelper
condition|)
return|return;
name|deleter
operator|=
name|qMetaTypeWidgetsHelper
index|[
name|type
operator|-
name|FirstWidgetsType
index|]
operator|.
name|deleter
expr_stmt|;
block|}
else|else
block|{
name|QReadLocker
name|locker
argument_list|(
name|customTypesLock
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|<
name|User
operator|||
operator|!
name|ct
operator|||
name|ct
operator|->
name|count
argument_list|()
operator|<=
name|type
operator|-
name|User
condition|)
break|break;
if|if
condition|(
name|ct
operator|->
name|at
argument_list|(
name|type
operator|-
name|User
argument_list|)
operator|.
name|typeName
operator|.
name|isEmpty
argument_list|()
condition|)
break|break;
name|deleter
operator|=
name|ct
operator|->
name|at
argument_list|(
name|type
operator|-
name|User
argument_list|)
operator|.
name|deleter
expr_stmt|;
block|}
name|deleter
argument_list|(
name|data
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
end_function
begin_comment
comment|/*!     \since 5.0      Constructs a value of the given \a type in the existing memory     addressed by \a where, that is a copy of \a copy, and returns     \a where. If \a copy is zero, the value is default constructed.      This is a low-level function for explicitly managing the memory     used to store the type. Consider calling create() if you don't     need this level of control (that is, use "new" rather than     "placement new").      You must ensure that \a where points to a location that can store     a value of type \a type, and that \a where is suitably aligned.     The type's size can be queried by calling sizeOf().      The rule of thumb for alignment is that a type is aligned to its     natural boundary, which is the smallest power of 2 that is bigger     than the type, unless that alignment is larger than the maximum     useful alignment for the platform. For practical purposes,     alignment larger than 2 * sizeof(void*) is only necessary for     special hardware instructions (e.g., aligned SSE loads and stores     on x86).      \sa destruct(), sizeOf() */
end_comment
begin_function
DECL|function|construct
name|void
modifier|*
name|QMetaType
operator|::
name|construct
parameter_list|(
name|int
name|type
parameter_list|,
name|void
modifier|*
name|where
parameter_list|,
specifier|const
name|void
modifier|*
name|copy
parameter_list|)
block|{
if|if
condition|(
operator|!
name|where
condition|)
return|return
literal|0
return|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|QMetaType
operator|::
name|VoidStar
case|:
case|case
name|QMetaType
operator|::
name|QObjectStar
case|:
case|case
name|QMetaType
operator|::
name|QWidgetStar
case|:
return|return
name|qMetaTypeConstructHelper
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
name|where
argument_list|,
cast|static_cast
argument_list|<
name|void
operator|*
specifier|const
operator|*
argument_list|>
argument_list|(
name|copy
argument_list|)
argument_list|)
return|;
case|case
name|QMetaType
operator|::
name|Long
case|:
return|return
name|qMetaTypeConstructHelper
argument_list|<
name|long
argument_list|>
argument_list|(
name|where
argument_list|,
cast|static_cast
argument_list|<
specifier|const
name|long
operator|*
argument_list|>
argument_list|(
name|copy
argument_list|)
argument_list|)
return|;
case|case
name|QMetaType
operator|::
name|Int
case|:
return|return
name|qMetaTypeConstructHelper
argument_list|<
name|int
argument_list|>
argument_list|(
name|where
argument_list|,
cast|static_cast
argument_list|<
specifier|const
name|int
operator|*
argument_list|>
argument_list|(
name|copy
argument_list|)
argument_list|)
return|;
case|case
name|QMetaType
operator|::
name|Short
case|:
return|return
name|qMetaTypeConstructHelper
argument_list|<
name|short
argument_list|>
argument_list|(
name|where
argument_list|,
cast|static_cast
argument_list|<
specifier|const
name|short
operator|*
argument_list|>
argument_list|(
name|copy
argument_list|)
argument_list|)
return|;
case|case
name|QMetaType
operator|::
name|Char
case|:
return|return
name|qMetaTypeConstructHelper
argument_list|<
name|char
argument_list|>
argument_list|(
name|where
argument_list|,
cast|static_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|copy
argument_list|)
argument_list|)
return|;
case|case
name|QMetaType
operator|::
name|ULong
case|:
return|return
name|qMetaTypeConstructHelper
argument_list|<
name|ulong
argument_list|>
argument_list|(
name|where
argument_list|,
cast|static_cast
argument_list|<
specifier|const
name|ulong
operator|*
argument_list|>
argument_list|(
name|copy
argument_list|)
argument_list|)
return|;
case|case
name|QMetaType
operator|::
name|UInt
case|:
return|return
name|qMetaTypeConstructHelper
argument_list|<
name|uint
argument_list|>
argument_list|(
name|where
argument_list|,
cast|static_cast
argument_list|<
specifier|const
name|uint
operator|*
argument_list|>
argument_list|(
name|copy
argument_list|)
argument_list|)
return|;
case|case
name|QMetaType
operator|::
name|LongLong
case|:
return|return
name|qMetaTypeConstructHelper
argument_list|<
name|qlonglong
argument_list|>
argument_list|(
name|where
argument_list|,
cast|static_cast
argument_list|<
specifier|const
name|qlonglong
operator|*
argument_list|>
argument_list|(
name|copy
argument_list|)
argument_list|)
return|;
case|case
name|QMetaType
operator|::
name|ULongLong
case|:
return|return
name|qMetaTypeConstructHelper
argument_list|<
name|qulonglong
argument_list|>
argument_list|(
name|where
argument_list|,
cast|static_cast
argument_list|<
specifier|const
name|qulonglong
operator|*
argument_list|>
argument_list|(
name|copy
argument_list|)
argument_list|)
return|;
case|case
name|QMetaType
operator|::
name|UShort
case|:
return|return
name|qMetaTypeConstructHelper
argument_list|<
name|ushort
argument_list|>
argument_list|(
name|where
argument_list|,
cast|static_cast
argument_list|<
specifier|const
name|ushort
operator|*
argument_list|>
argument_list|(
name|copy
argument_list|)
argument_list|)
return|;
case|case
name|QMetaType
operator|::
name|UChar
case|:
return|return
name|qMetaTypeConstructHelper
argument_list|<
name|uchar
argument_list|>
argument_list|(
name|where
argument_list|,
cast|static_cast
argument_list|<
specifier|const
name|uchar
operator|*
argument_list|>
argument_list|(
name|copy
argument_list|)
argument_list|)
return|;
case|case
name|QMetaType
operator|::
name|Bool
case|:
return|return
name|qMetaTypeConstructHelper
argument_list|<
name|bool
argument_list|>
argument_list|(
name|where
argument_list|,
cast|static_cast
argument_list|<
specifier|const
name|bool
operator|*
argument_list|>
argument_list|(
name|copy
argument_list|)
argument_list|)
return|;
case|case
name|QMetaType
operator|::
name|Float
case|:
return|return
name|qMetaTypeConstructHelper
argument_list|<
name|float
argument_list|>
argument_list|(
name|where
argument_list|,
cast|static_cast
argument_list|<
specifier|const
name|float
operator|*
argument_list|>
argument_list|(
name|copy
argument_list|)
argument_list|)
return|;
case|case
name|QMetaType
operator|::
name|Double
case|:
return|return
name|qMetaTypeConstructHelper
argument_list|<
name|double
argument_list|>
argument_list|(
name|where
argument_list|,
cast|static_cast
argument_list|<
specifier|const
name|double
operator|*
argument_list|>
argument_list|(
name|copy
argument_list|)
argument_list|)
return|;
case|case
name|QMetaType
operator|::
name|QChar
case|:
return|return
name|qMetaTypeConstructHelper
operator|<
name|NS
argument_list|(
name|QChar
argument_list|)
operator|>
operator|(
name|where
operator|,
expr|static_cast
operator|<
specifier|const
name|NS
argument_list|(
name|QChar
argument_list|)
operator|*
operator|>
operator|(
name|copy
operator|)
operator|)
return|;
ifndef|#
directive|ifndef
name|QT_BOOTSTRAPPED
case|case
name|QMetaType
operator|::
name|QVariantMap
case|:
return|return
name|qMetaTypeConstructHelper
operator|<
name|NS
argument_list|(
name|QVariantMap
argument_list|)
operator|>
operator|(
name|where
operator|,
expr|static_cast
operator|<
specifier|const
name|NS
argument_list|(
name|QVariantMap
argument_list|)
operator|*
operator|>
operator|(
name|copy
operator|)
operator|)
return|;
case|case
name|QMetaType
operator|::
name|QVariantHash
case|:
return|return
name|qMetaTypeConstructHelper
operator|<
name|NS
argument_list|(
name|QVariantHash
argument_list|)
operator|>
operator|(
name|where
operator|,
expr|static_cast
operator|<
specifier|const
name|NS
argument_list|(
name|QVariantHash
argument_list|)
operator|*
operator|>
operator|(
name|copy
operator|)
operator|)
return|;
case|case
name|QMetaType
operator|::
name|QVariantList
case|:
return|return
name|qMetaTypeConstructHelper
operator|<
name|NS
argument_list|(
name|QVariantList
argument_list|)
operator|>
operator|(
name|where
operator|,
expr|static_cast
operator|<
specifier|const
name|NS
argument_list|(
name|QVariantList
argument_list|)
operator|*
operator|>
operator|(
name|copy
operator|)
operator|)
return|;
case|case
name|QMetaType
operator|::
name|QVariant
case|:
return|return
name|qMetaTypeConstructHelper
operator|<
name|NS
argument_list|(
name|QVariant
argument_list|)
operator|>
operator|(
name|where
operator|,
expr|static_cast
operator|<
specifier|const
name|NS
argument_list|(
name|QVariant
argument_list|)
operator|*
operator|>
operator|(
name|copy
operator|)
operator|)
return|;
endif|#
directive|endif
case|case
name|QMetaType
operator|::
name|QByteArray
case|:
return|return
name|qMetaTypeConstructHelper
operator|<
name|NS
argument_list|(
name|QByteArray
argument_list|)
operator|>
operator|(
name|where
operator|,
expr|static_cast
operator|<
specifier|const
name|NS
argument_list|(
name|QByteArray
argument_list|)
operator|*
operator|>
operator|(
name|copy
operator|)
operator|)
return|;
case|case
name|QMetaType
operator|::
name|QString
case|:
return|return
name|qMetaTypeConstructHelper
operator|<
name|NS
argument_list|(
name|QString
argument_list|)
operator|>
operator|(
name|where
operator|,
expr|static_cast
operator|<
specifier|const
name|NS
argument_list|(
name|QString
argument_list|)
operator|*
operator|>
operator|(
name|copy
operator|)
operator|)
return|;
case|case
name|QMetaType
operator|::
name|QStringList
case|:
return|return
name|qMetaTypeConstructHelper
operator|<
name|NS
argument_list|(
name|QStringList
argument_list|)
operator|>
operator|(
name|where
operator|,
expr|static_cast
operator|<
specifier|const
name|NS
argument_list|(
name|QStringList
argument_list|)
operator|*
operator|>
operator|(
name|copy
operator|)
operator|)
return|;
ifndef|#
directive|ifndef
name|QT_BOOTSTRAPPED
case|case
name|QMetaType
operator|::
name|QBitArray
case|:
return|return
name|qMetaTypeConstructHelper
operator|<
name|NS
argument_list|(
name|QBitArray
argument_list|)
operator|>
operator|(
name|where
operator|,
expr|static_cast
operator|<
specifier|const
name|NS
argument_list|(
name|QBitArray
argument_list|)
operator|*
operator|>
operator|(
name|copy
operator|)
operator|)
return|;
endif|#
directive|endif
case|case
name|QMetaType
operator|::
name|QDate
case|:
return|return
name|qMetaTypeConstructHelper
operator|<
name|NS
argument_list|(
name|QDate
argument_list|)
operator|>
operator|(
name|where
operator|,
expr|static_cast
operator|<
specifier|const
name|NS
argument_list|(
name|QDate
argument_list|)
operator|*
operator|>
operator|(
name|copy
operator|)
operator|)
return|;
case|case
name|QMetaType
operator|::
name|QTime
case|:
return|return
name|qMetaTypeConstructHelper
operator|<
name|NS
argument_list|(
name|QTime
argument_list|)
operator|>
operator|(
name|where
operator|,
expr|static_cast
operator|<
specifier|const
name|NS
argument_list|(
name|QTime
argument_list|)
operator|*
operator|>
operator|(
name|copy
operator|)
operator|)
return|;
case|case
name|QMetaType
operator|::
name|QDateTime
case|:
return|return
name|qMetaTypeConstructHelper
operator|<
name|NS
argument_list|(
name|QDateTime
argument_list|)
operator|>
operator|(
name|where
operator|,
expr|static_cast
operator|<
specifier|const
name|NS
argument_list|(
name|QDateTime
argument_list|)
operator|*
operator|>
operator|(
name|copy
operator|)
operator|)
return|;
ifndef|#
directive|ifndef
name|QT_BOOTSTRAPPED
case|case
name|QMetaType
operator|::
name|QUrl
case|:
return|return
name|qMetaTypeConstructHelper
operator|<
name|NS
argument_list|(
name|QUrl
argument_list|)
operator|>
operator|(
name|where
operator|,
expr|static_cast
operator|<
specifier|const
name|NS
argument_list|(
name|QUrl
argument_list|)
operator|*
operator|>
operator|(
name|copy
operator|)
operator|)
return|;
endif|#
directive|endif
case|case
name|QMetaType
operator|::
name|QLocale
case|:
return|return
name|qMetaTypeConstructHelper
operator|<
name|NS
argument_list|(
name|QLocale
argument_list|)
operator|>
operator|(
name|where
operator|,
expr|static_cast
operator|<
specifier|const
name|NS
argument_list|(
name|QLocale
argument_list|)
operator|*
operator|>
operator|(
name|copy
operator|)
operator|)
return|;
ifndef|#
directive|ifndef
name|QT_NO_GEOM_VARIANT
case|case
name|QMetaType
operator|::
name|QRect
case|:
return|return
name|qMetaTypeConstructHelper
operator|<
name|NS
argument_list|(
name|QRect
argument_list|)
operator|>
operator|(
name|where
operator|,
expr|static_cast
operator|<
specifier|const
name|NS
argument_list|(
name|QRect
argument_list|)
operator|*
operator|>
operator|(
name|copy
operator|)
operator|)
return|;
case|case
name|QMetaType
operator|::
name|QRectF
case|:
return|return
name|qMetaTypeConstructHelper
operator|<
name|NS
argument_list|(
name|QRectF
argument_list|)
operator|>
operator|(
name|where
operator|,
expr|static_cast
operator|<
specifier|const
name|NS
argument_list|(
name|QRectF
argument_list|)
operator|*
operator|>
operator|(
name|copy
operator|)
operator|)
return|;
case|case
name|QMetaType
operator|::
name|QSize
case|:
return|return
name|qMetaTypeConstructHelper
operator|<
name|NS
argument_list|(
name|QSize
argument_list|)
operator|>
operator|(
name|where
operator|,
expr|static_cast
operator|<
specifier|const
name|NS
argument_list|(
name|QSize
argument_list|)
operator|*
operator|>
operator|(
name|copy
operator|)
operator|)
return|;
case|case
name|QMetaType
operator|::
name|QSizeF
case|:
return|return
name|qMetaTypeConstructHelper
operator|<
name|NS
argument_list|(
name|QSizeF
argument_list|)
operator|>
operator|(
name|where
operator|,
expr|static_cast
operator|<
specifier|const
name|NS
argument_list|(
name|QSizeF
argument_list|)
operator|*
operator|>
operator|(
name|copy
operator|)
operator|)
return|;
case|case
name|QMetaType
operator|::
name|QLine
case|:
return|return
name|qMetaTypeConstructHelper
operator|<
name|NS
argument_list|(
name|QLine
argument_list|)
operator|>
operator|(
name|where
operator|,
expr|static_cast
operator|<
specifier|const
name|NS
argument_list|(
name|QLine
argument_list|)
operator|*
operator|>
operator|(
name|copy
operator|)
operator|)
return|;
case|case
name|QMetaType
operator|::
name|QLineF
case|:
return|return
name|qMetaTypeConstructHelper
operator|<
name|NS
argument_list|(
name|QLineF
argument_list|)
operator|>
operator|(
name|where
operator|,
expr|static_cast
operator|<
specifier|const
name|NS
argument_list|(
name|QLineF
argument_list|)
operator|*
operator|>
operator|(
name|copy
operator|)
operator|)
return|;
case|case
name|QMetaType
operator|::
name|QPoint
case|:
return|return
name|qMetaTypeConstructHelper
operator|<
name|NS
argument_list|(
name|QPoint
argument_list|)
operator|>
operator|(
name|where
operator|,
expr|static_cast
operator|<
specifier|const
name|NS
argument_list|(
name|QPoint
argument_list|)
operator|*
operator|>
operator|(
name|copy
operator|)
operator|)
return|;
case|case
name|QMetaType
operator|::
name|QPointF
case|:
return|return
name|qMetaTypeConstructHelper
operator|<
name|NS
argument_list|(
name|QPointF
argument_list|)
operator|>
operator|(
name|where
operator|,
expr|static_cast
operator|<
specifier|const
name|NS
argument_list|(
name|QPointF
argument_list|)
operator|*
operator|>
operator|(
name|copy
operator|)
operator|)
return|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_REGEXP
case|case
name|QMetaType
operator|::
name|QRegExp
case|:
return|return
name|qMetaTypeConstructHelper
operator|<
name|NS
argument_list|(
name|QRegExp
argument_list|)
operator|>
operator|(
name|where
operator|,
expr|static_cast
operator|<
specifier|const
name|NS
argument_list|(
name|QRegExp
argument_list|)
operator|*
operator|>
operator|(
name|copy
operator|)
operator|)
return|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_BOOTSTRAPPED
case|case
name|QMetaType
operator|::
name|QEasingCurve
case|:
return|return
name|qMetaTypeConstructHelper
operator|<
name|NS
argument_list|(
name|QEasingCurve
argument_list|)
operator|>
operator|(
name|where
operator|,
expr|static_cast
operator|<
specifier|const
name|NS
argument_list|(
name|QEasingCurve
argument_list|)
operator|*
operator|>
operator|(
name|copy
operator|)
operator|)
return|;
endif|#
directive|endif
case|case
name|QMetaType
operator|::
name|Void
case|:
return|return
name|where
return|;
default|default:
empty_stmt|;
block|}
name|Constructor
name|ctor
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|type
operator|>=
name|FirstGuiType
operator|&&
name|type
operator|<=
name|LastGuiType
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|qMetaTypeGuiHelper
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|qMetaTypeGuiHelper
condition|)
return|return
literal|0
return|;
name|ctor
operator|=
name|qMetaTypeGuiHelper
index|[
name|type
operator|-
name|FirstGuiType
index|]
operator|.
name|constructor
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|>=
name|FirstWidgetsType
operator|&&
name|type
operator|<=
name|LastWidgetsType
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|qMetaTypeWidgetsHelper
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|qMetaTypeWidgetsHelper
condition|)
return|return
literal|0
return|;
name|ctor
operator|=
name|qMetaTypeWidgetsHelper
index|[
name|type
operator|-
name|FirstWidgetsType
index|]
operator|.
name|constructor
expr_stmt|;
block|}
else|else
block|{
specifier|const
name|QVector
argument_list|<
name|QCustomTypeInfo
argument_list|>
modifier|*
specifier|const
name|ct
init|=
name|customTypes
argument_list|()
decl_stmt|;
name|QReadLocker
name|locker
argument_list|(
name|customTypesLock
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|<
name|User
operator|||
operator|!
name|ct
operator|||
name|ct
operator|->
name|count
argument_list|()
operator|<=
name|type
operator|-
name|User
condition|)
return|return
literal|0
return|;
name|ctor
operator|=
name|ct
operator|->
name|at
argument_list|(
name|type
operator|-
name|User
argument_list|)
operator|.
name|constructor
expr_stmt|;
if|if
condition|(
operator|!
name|ctor
condition|)
return|return
literal|0
return|;
block|}
return|return
name|ctor
argument_list|(
name|where
argument_list|,
name|copy
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \since 5.0      Destructs the value of the given \a type, located at \a where.      Unlike destroy(), this function only invokes the type's     destructor, it doesn't invoke the delete operator.      \sa construct() */
end_comment
begin_function
DECL|function|destruct
name|void
name|QMetaType
operator|::
name|destruct
parameter_list|(
name|int
name|type
parameter_list|,
name|void
modifier|*
name|where
parameter_list|)
block|{
if|if
condition|(
operator|!
name|where
condition|)
return|return;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|QMetaType
operator|::
name|VoidStar
case|:
case|case
name|QMetaType
operator|::
name|QObjectStar
case|:
case|case
name|QMetaType
operator|::
name|QWidgetStar
case|:
break|break;
case|case
name|QMetaType
operator|::
name|Long
case|:
break|break;
case|case
name|QMetaType
operator|::
name|Int
case|:
break|break;
case|case
name|QMetaType
operator|::
name|Short
case|:
break|break;
case|case
name|QMetaType
operator|::
name|Char
case|:
break|break;
case|case
name|QMetaType
operator|::
name|ULong
case|:
break|break;
case|case
name|QMetaType
operator|::
name|LongLong
case|:
break|break;
case|case
name|QMetaType
operator|::
name|ULongLong
case|:
break|break;
case|case
name|QMetaType
operator|::
name|UInt
case|:
break|break;
case|case
name|QMetaType
operator|::
name|UShort
case|:
break|break;
case|case
name|QMetaType
operator|::
name|UChar
case|:
break|break;
case|case
name|QMetaType
operator|::
name|Bool
case|:
break|break;
case|case
name|QMetaType
operator|::
name|Float
case|:
break|break;
case|case
name|QMetaType
operator|::
name|Double
case|:
break|break;
case|case
name|QMetaType
operator|::
name|QChar
case|:
expr|static_cast
operator|<
name|NS
argument_list|(
name|QChar
argument_list|)
operator|*
operator|>
operator|(
name|where
operator|)
operator|->
name|NS
argument_list|(
name|QChar
argument_list|)
operator|::
name|~
name|QChar
argument_list|()
expr_stmt|;
break|break;
ifndef|#
directive|ifndef
name|QT_BOOTSTRAPPED
case|case
name|QMetaType
operator|::
name|QVariantMap
case|:
expr|static_cast
operator|<
name|NS
argument_list|(
name|QVariantMap
argument_list|)
operator|*
operator|>
operator|(
name|where
operator|)
operator|->
name|NS
argument_list|(
name|QVariantMap
argument_list|)
operator|::
name|~
name|QMap
argument_list|<
expr|class
name|QString
argument_list|,
expr|class
name|QVariant
argument_list|>
argument_list|()
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|QVariantHash
case|:
expr|static_cast
operator|<
name|NS
argument_list|(
name|QVariantHash
argument_list|)
operator|*
operator|>
operator|(
name|where
operator|)
operator|->
name|NS
argument_list|(
name|QVariantHash
argument_list|)
operator|::
name|~
name|QHash
argument_list|<
expr|class
name|QString
argument_list|,
expr|class
name|QVariant
argument_list|>
argument_list|()
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|QVariantList
case|:
block|{
expr|static_cast
operator|<
name|NS
argument_list|(
name|QVariantList
argument_list|)
operator|*
operator|>
operator|(
name|where
operator|)
operator|->
name|NS
argument_list|(
name|QVariantList
argument_list|)
operator|::
name|~
name|QList
argument_list|<
expr|class
name|QVariant
argument_list|>
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|QMetaType
operator|::
name|QVariant
case|:
expr|static_cast
operator|<
name|NS
argument_list|(
name|QVariant
argument_list|)
operator|*
operator|>
operator|(
name|where
operator|)
operator|->
name|NS
argument_list|(
name|QVariant
argument_list|)
operator|::
name|~
name|QVariant
argument_list|()
expr_stmt|;
break|break;
endif|#
directive|endif
case|case
name|QMetaType
operator|::
name|QByteArray
case|:
expr|static_cast
operator|<
name|NS
argument_list|(
name|QByteArray
argument_list|)
operator|*
operator|>
operator|(
name|where
operator|)
operator|->
name|NS
argument_list|(
name|QByteArray
argument_list|)
operator|::
name|~
name|QByteArray
argument_list|()
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|QString
case|:
expr|static_cast
operator|<
name|NS
argument_list|(
name|QString
argument_list|)
operator|*
operator|>
operator|(
name|where
operator|)
operator|->
name|NS
argument_list|(
name|QString
argument_list|)
operator|::
name|~
name|QString
argument_list|()
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|QStringList
case|:
expr|static_cast
operator|<
name|NS
argument_list|(
name|QStringList
argument_list|)
operator|*
operator|>
operator|(
name|where
operator|)
operator|->
name|NS
argument_list|(
name|QStringList
argument_list|)
operator|::
name|~
name|QStringList
argument_list|()
expr_stmt|;
break|break;
ifndef|#
directive|ifndef
name|QT_BOOTSTRAPPED
case|case
name|QMetaType
operator|::
name|QBitArray
case|:
expr|static_cast
operator|<
name|NS
argument_list|(
name|QBitArray
argument_list|)
operator|*
operator|>
operator|(
name|where
operator|)
operator|->
name|NS
argument_list|(
name|QBitArray
argument_list|)
operator|::
name|~
name|QBitArray
argument_list|()
expr_stmt|;
break|break;
endif|#
directive|endif
case|case
name|QMetaType
operator|::
name|QDate
case|:
expr|static_cast
operator|<
name|NS
argument_list|(
name|QDate
argument_list|)
operator|*
operator|>
operator|(
name|where
operator|)
operator|->
name|NS
argument_list|(
name|QDate
argument_list|)
operator|::
name|~
name|QDate
argument_list|()
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|QTime
case|:
expr|static_cast
operator|<
name|NS
argument_list|(
name|QTime
argument_list|)
operator|*
operator|>
operator|(
name|where
operator|)
operator|->
name|NS
argument_list|(
name|QTime
argument_list|)
operator|::
name|~
name|QTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|QDateTime
case|:
expr|static_cast
operator|<
name|NS
argument_list|(
name|QDateTime
argument_list|)
operator|*
operator|>
operator|(
name|where
operator|)
operator|->
name|NS
argument_list|(
name|QDateTime
argument_list|)
operator|::
name|~
name|QDateTime
argument_list|()
expr_stmt|;
break|break;
ifndef|#
directive|ifndef
name|QT_BOOTSTRAPPED
case|case
name|QMetaType
operator|::
name|QUrl
case|:
expr|static_cast
operator|<
name|NS
argument_list|(
name|QUrl
argument_list|)
operator|*
operator|>
operator|(
name|where
operator|)
operator|->
name|NS
argument_list|(
name|QUrl
argument_list|)
operator|::
name|~
name|QUrl
argument_list|()
expr_stmt|;
endif|#
directive|endif
break|break;
case|case
name|QMetaType
operator|::
name|QLocale
case|:
expr|static_cast
operator|<
name|NS
argument_list|(
name|QLocale
argument_list|)
operator|*
operator|>
operator|(
name|where
operator|)
operator|->
name|NS
argument_list|(
name|QLocale
argument_list|)
operator|::
name|~
name|QLocale
argument_list|()
expr_stmt|;
break|break;
ifndef|#
directive|ifndef
name|QT_NO_GEOM_VARIANT
case|case
name|QMetaType
operator|::
name|QRect
case|:
expr|static_cast
operator|<
name|NS
argument_list|(
name|QRect
argument_list|)
operator|*
operator|>
operator|(
name|where
operator|)
operator|->
name|NS
argument_list|(
name|QRect
argument_list|)
operator|::
name|~
name|QRect
argument_list|()
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|QRectF
case|:
expr|static_cast
operator|<
name|NS
argument_list|(
name|QRectF
argument_list|)
operator|*
operator|>
operator|(
name|where
operator|)
operator|->
name|NS
argument_list|(
name|QRectF
argument_list|)
operator|::
name|~
name|QRectF
argument_list|()
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|QSize
case|:
expr|static_cast
operator|<
name|NS
argument_list|(
name|QSize
argument_list|)
operator|*
operator|>
operator|(
name|where
operator|)
operator|->
name|NS
argument_list|(
name|QSize
argument_list|)
operator|::
name|~
name|QSize
argument_list|()
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|QSizeF
case|:
expr|static_cast
operator|<
name|NS
argument_list|(
name|QSizeF
argument_list|)
operator|*
operator|>
operator|(
name|where
operator|)
operator|->
name|NS
argument_list|(
name|QSizeF
argument_list|)
operator|::
name|~
name|QSizeF
argument_list|()
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|QLine
case|:
expr|static_cast
operator|<
name|NS
argument_list|(
name|QLine
argument_list|)
operator|*
operator|>
operator|(
name|where
operator|)
operator|->
name|NS
argument_list|(
name|QLine
argument_list|)
operator|::
name|~
name|QLine
argument_list|()
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|QLineF
case|:
expr|static_cast
operator|<
name|NS
argument_list|(
name|QLineF
argument_list|)
operator|*
operator|>
operator|(
name|where
operator|)
operator|->
name|NS
argument_list|(
name|QLineF
argument_list|)
operator|::
name|~
name|QLineF
argument_list|()
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|QPoint
case|:
expr|static_cast
operator|<
name|NS
argument_list|(
name|QPoint
argument_list|)
operator|*
operator|>
operator|(
name|where
operator|)
operator|->
name|NS
argument_list|(
name|QPoint
argument_list|)
operator|::
name|~
name|QPoint
argument_list|()
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|QPointF
case|:
expr|static_cast
operator|<
name|NS
argument_list|(
name|QPointF
argument_list|)
operator|*
operator|>
operator|(
name|where
operator|)
operator|->
name|NS
argument_list|(
name|QPointF
argument_list|)
operator|::
name|~
name|QPointF
argument_list|()
expr_stmt|;
break|break;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_REGEXP
case|case
name|QMetaType
operator|::
name|QRegExp
case|:
expr|static_cast
operator|<
name|NS
argument_list|(
name|QRegExp
argument_list|)
operator|*
operator|>
operator|(
name|where
operator|)
operator|->
name|NS
argument_list|(
name|QRegExp
argument_list|)
operator|::
name|~
name|QRegExp
argument_list|()
expr_stmt|;
break|break;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_BOOTSTRAPPED
case|case
name|QMetaType
operator|::
name|QEasingCurve
case|:
expr|static_cast
operator|<
name|NS
argument_list|(
name|QEasingCurve
argument_list|)
operator|*
operator|>
operator|(
name|where
operator|)
operator|->
name|NS
argument_list|(
name|QEasingCurve
argument_list|)
operator|::
name|~
name|QEasingCurve
argument_list|()
expr_stmt|;
break|break;
endif|#
directive|endif
case|case
name|QMetaType
operator|::
name|Void
case|:
break|break;
default|default:
block|{
specifier|const
name|QVector
argument_list|<
name|QCustomTypeInfo
argument_list|>
modifier|*
specifier|const
name|ct
init|=
name|customTypes
argument_list|()
decl_stmt|;
name|Destructor
name|dtor
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|type
operator|>=
name|FirstGuiType
operator|&&
name|type
operator|<=
name|LastGuiType
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|qMetaTypeGuiHelper
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|qMetaTypeGuiHelper
condition|)
return|return;
name|dtor
operator|=
name|qMetaTypeGuiHelper
index|[
name|type
operator|-
name|FirstGuiType
index|]
operator|.
name|destructor
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|>=
name|FirstWidgetsType
operator|&&
name|type
operator|<=
name|LastWidgetsType
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|qMetaTypeWidgetsHelper
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|qMetaTypeWidgetsHelper
condition|)
return|return;
name|dtor
operator|=
name|qMetaTypeWidgetsHelper
index|[
name|type
operator|-
name|FirstWidgetsType
index|]
operator|.
name|destructor
expr_stmt|;
block|}
else|else
block|{
name|QReadLocker
name|locker
argument_list|(
name|customTypesLock
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|<
name|User
operator|||
operator|!
name|ct
operator|||
name|ct
operator|->
name|count
argument_list|()
operator|<=
name|type
operator|-
name|User
condition|)
break|break;
name|dtor
operator|=
name|ct
operator|->
name|at
argument_list|(
name|type
operator|-
name|User
argument_list|)
operator|.
name|destructor
expr_stmt|;
if|if
condition|(
operator|!
name|dtor
condition|)
break|break;
block|}
name|dtor
argument_list|(
name|where
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
end_function
begin_comment
comment|/*!     \since 5.0      Returns the size of the given \a type in bytes (i.e., sizeof(T),     where T is the actual type identified by the \a type argument).      This function is typically used together with construct()     to perform low-level management of the memory used by a type.      \sa construct() */
end_comment
begin_function
DECL|function|sizeOf
name|int
name|QMetaType
operator|::
name|sizeOf
parameter_list|(
name|int
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|QMetaType
operator|::
name|VoidStar
case|:
case|case
name|QMetaType
operator|::
name|QObjectStar
case|:
case|case
name|QMetaType
operator|::
name|QWidgetStar
case|:
return|return
sizeof|sizeof
argument_list|(
name|void
operator|*
argument_list|)
return|;
case|case
name|QMetaType
operator|::
name|Long
case|:
return|return
sizeof|sizeof
argument_list|(
name|long
argument_list|)
return|;
case|case
name|QMetaType
operator|::
name|Int
case|:
return|return
sizeof|sizeof
argument_list|(
name|int
argument_list|)
return|;
case|case
name|QMetaType
operator|::
name|Short
case|:
return|return
sizeof|sizeof
argument_list|(
name|short
argument_list|)
return|;
case|case
name|QMetaType
operator|::
name|Char
case|:
return|return
sizeof|sizeof
argument_list|(
name|char
argument_list|)
return|;
case|case
name|QMetaType
operator|::
name|ULong
case|:
return|return
sizeof|sizeof
argument_list|(
name|ulong
argument_list|)
return|;
case|case
name|QMetaType
operator|::
name|UInt
case|:
return|return
sizeof|sizeof
argument_list|(
name|uint
argument_list|)
return|;
case|case
name|QMetaType
operator|::
name|LongLong
case|:
return|return
sizeof|sizeof
argument_list|(
name|qlonglong
argument_list|)
return|;
case|case
name|QMetaType
operator|::
name|ULongLong
case|:
return|return
sizeof|sizeof
argument_list|(
name|qulonglong
argument_list|)
return|;
case|case
name|QMetaType
operator|::
name|UShort
case|:
return|return
sizeof|sizeof
argument_list|(
name|ushort
argument_list|)
return|;
case|case
name|QMetaType
operator|::
name|UChar
case|:
return|return
sizeof|sizeof
argument_list|(
name|uchar
argument_list|)
return|;
case|case
name|QMetaType
operator|::
name|Bool
case|:
return|return
sizeof|sizeof
argument_list|(
name|bool
argument_list|)
return|;
case|case
name|QMetaType
operator|::
name|Float
case|:
return|return
sizeof|sizeof
argument_list|(
name|float
argument_list|)
return|;
case|case
name|QMetaType
operator|::
name|Double
case|:
return|return
sizeof|sizeof
argument_list|(
name|double
argument_list|)
return|;
case|case
name|QMetaType
operator|::
name|QChar
case|:
return|return
sizeof|sizeof
argument_list|(
name|NS
argument_list|(
name|QChar
argument_list|)
argument_list|)
return|;
ifndef|#
directive|ifndef
name|QT_BOOTSTRAPPED
case|case
name|QMetaType
operator|::
name|QVariantMap
case|:
return|return
sizeof|sizeof
argument_list|(
name|NS
argument_list|(
name|QVariantMap
argument_list|)
argument_list|)
return|;
case|case
name|QMetaType
operator|::
name|QVariantHash
case|:
return|return
sizeof|sizeof
argument_list|(
name|NS
argument_list|(
name|QVariantHash
argument_list|)
argument_list|)
return|;
case|case
name|QMetaType
operator|::
name|QVariantList
case|:
return|return
sizeof|sizeof
argument_list|(
name|NS
argument_list|(
name|QVariantList
argument_list|)
argument_list|)
return|;
case|case
name|QMetaType
operator|::
name|QVariant
case|:
return|return
sizeof|sizeof
argument_list|(
name|NS
argument_list|(
name|QVariant
argument_list|)
argument_list|)
return|;
endif|#
directive|endif
case|case
name|QMetaType
operator|::
name|QByteArray
case|:
return|return
sizeof|sizeof
argument_list|(
name|NS
argument_list|(
name|QByteArray
argument_list|)
argument_list|)
return|;
case|case
name|QMetaType
operator|::
name|QString
case|:
return|return
sizeof|sizeof
argument_list|(
name|NS
argument_list|(
name|QString
argument_list|)
argument_list|)
return|;
case|case
name|QMetaType
operator|::
name|QStringList
case|:
return|return
sizeof|sizeof
argument_list|(
name|NS
argument_list|(
name|QStringList
argument_list|)
argument_list|)
return|;
ifndef|#
directive|ifndef
name|QT_BOOTSTRAPPED
case|case
name|QMetaType
operator|::
name|QBitArray
case|:
return|return
sizeof|sizeof
argument_list|(
name|NS
argument_list|(
name|QBitArray
argument_list|)
argument_list|)
return|;
endif|#
directive|endif
case|case
name|QMetaType
operator|::
name|QDate
case|:
return|return
sizeof|sizeof
argument_list|(
name|NS
argument_list|(
name|QDate
argument_list|)
argument_list|)
return|;
case|case
name|QMetaType
operator|::
name|QTime
case|:
return|return
sizeof|sizeof
argument_list|(
name|NS
argument_list|(
name|QTime
argument_list|)
argument_list|)
return|;
case|case
name|QMetaType
operator|::
name|QDateTime
case|:
return|return
sizeof|sizeof
argument_list|(
name|NS
argument_list|(
name|QDateTime
argument_list|)
argument_list|)
return|;
ifndef|#
directive|ifndef
name|QT_BOOTSTRAPPED
case|case
name|QMetaType
operator|::
name|QUrl
case|:
return|return
sizeof|sizeof
argument_list|(
name|NS
argument_list|(
name|QUrl
argument_list|)
argument_list|)
return|;
endif|#
directive|endif
case|case
name|QMetaType
operator|::
name|QLocale
case|:
return|return
sizeof|sizeof
argument_list|(
name|NS
argument_list|(
name|QLocale
argument_list|)
argument_list|)
return|;
ifndef|#
directive|ifndef
name|QT_NO_GEOM_VARIANT
case|case
name|QMetaType
operator|::
name|QRect
case|:
return|return
sizeof|sizeof
argument_list|(
name|NS
argument_list|(
name|QRect
argument_list|)
argument_list|)
return|;
case|case
name|QMetaType
operator|::
name|QRectF
case|:
return|return
sizeof|sizeof
argument_list|(
name|NS
argument_list|(
name|QRectF
argument_list|)
argument_list|)
return|;
case|case
name|QMetaType
operator|::
name|QSize
case|:
return|return
sizeof|sizeof
argument_list|(
name|NS
argument_list|(
name|QSize
argument_list|)
argument_list|)
return|;
case|case
name|QMetaType
operator|::
name|QSizeF
case|:
return|return
sizeof|sizeof
argument_list|(
name|NS
argument_list|(
name|QSizeF
argument_list|)
argument_list|)
return|;
case|case
name|QMetaType
operator|::
name|QLine
case|:
return|return
sizeof|sizeof
argument_list|(
name|NS
argument_list|(
name|QLine
argument_list|)
argument_list|)
return|;
case|case
name|QMetaType
operator|::
name|QLineF
case|:
return|return
sizeof|sizeof
argument_list|(
name|NS
argument_list|(
name|QLineF
argument_list|)
argument_list|)
return|;
case|case
name|QMetaType
operator|::
name|QPoint
case|:
return|return
sizeof|sizeof
argument_list|(
name|NS
argument_list|(
name|QPoint
argument_list|)
argument_list|)
return|;
case|case
name|QMetaType
operator|::
name|QPointF
case|:
return|return
sizeof|sizeof
argument_list|(
name|NS
argument_list|(
name|QPointF
argument_list|)
argument_list|)
return|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_REGEXP
case|case
name|QMetaType
operator|::
name|QRegExp
case|:
return|return
sizeof|sizeof
argument_list|(
name|NS
argument_list|(
name|QRegExp
argument_list|)
argument_list|)
return|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_BOOTSTRAPPED
case|case
name|QMetaType
operator|::
name|QEasingCurve
case|:
return|return
sizeof|sizeof
argument_list|(
name|NS
argument_list|(
name|QEasingCurve
argument_list|)
argument_list|)
return|;
endif|#
directive|endif
case|case
name|QMetaType
operator|::
name|Void
case|:
return|return
literal|0
return|;
default|default:
empty_stmt|;
block|}
if|if
condition|(
name|type
operator|>=
name|FirstGuiType
operator|&&
name|type
operator|<=
name|LastGuiType
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|qMetaTypeGuiHelper
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|qMetaTypeGuiHelper
condition|)
return|return
literal|0
return|;
return|return
name|qMetaTypeGuiHelper
index|[
name|type
operator|-
name|FirstGuiType
index|]
operator|.
name|size
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|>=
name|FirstWidgetsType
operator|&&
name|type
operator|<=
name|LastWidgetsType
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|qMetaTypeWidgetsHelper
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|qMetaTypeWidgetsHelper
condition|)
return|return
literal|0
return|;
return|return
name|qMetaTypeWidgetsHelper
index|[
name|type
operator|-
name|FirstWidgetsType
index|]
operator|.
name|size
return|;
block|}
specifier|const
name|QVector
argument_list|<
name|QCustomTypeInfo
argument_list|>
modifier|*
specifier|const
name|ct
init|=
name|customTypes
argument_list|()
decl_stmt|;
name|QReadLocker
name|locker
argument_list|(
name|customTypesLock
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|<
name|User
operator|||
operator|!
name|ct
operator|||
name|ct
operator|->
name|count
argument_list|()
operator|<=
name|type
operator|-
name|User
condition|)
return|return
literal|0
return|;
return|return
name|ct
operator|->
name|at
argument_list|(
name|type
operator|-
name|User
argument_list|)
operator|.
name|size
return|;
block|}
end_function
begin_comment
comment|/*!     \fn int qRegisterMetaType(const char *typeName)     \relates QMetaType     \threadsafe      Registers the type name \a typeName for the type \c{T}. Returns     the internal ID used by QMetaType. Any class or struct that has a     public default constructor, a public copy constructor and a public     destructor can be registered.      After a type has been registered, you can create and destroy     objects of that type dynamically at run-time.      This example registers the class \c{MyClass}:      \snippet doc/src/snippets/code/src_corelib_kernel_qmetatype.cpp 4      This function is useful to register typedefs so they can be used     by QMetaProperty, or in QueuedConnections      \snippet doc/src/snippets/code/src_corelib_kernel_qmetatype.cpp 9      \sa qRegisterMetaTypeStreamOperators(), QMetaType::isRegistered(),         Q_DECLARE_METATYPE() */
end_comment
begin_comment
comment|/*!     \fn int qRegisterMetaTypeStreamOperators(const char *typeName)     \relates QMetaType     \threadsafe      Registers the stream operators for the type \c{T} called \a     typeName.      Afterward, the type can be streamed using QMetaType::load() and     QMetaType::save(). These functions are used when streaming a     QVariant.      \snippet doc/src/snippets/code/src_corelib_kernel_qmetatype.cpp 5      The stream operators should have the following signatures:      \snippet doc/src/snippets/code/src_corelib_kernel_qmetatype.cpp 6      \sa qRegisterMetaType(), QMetaType::isRegistered(), Q_DECLARE_METATYPE() */
end_comment
begin_comment
comment|/*! \typedef QMetaType::Deleter     \internal */
end_comment
begin_comment
comment|/*! \typedef QMetaType::Creator     \internal */
end_comment
begin_comment
comment|/*! \typedef QMetaType::SaveOperator     \internal */
end_comment
begin_comment
comment|/*! \typedef QMetaType::LoadOperator     \internal */
end_comment
begin_comment
comment|/*! \typedef QMetaType::Destructor     \internal */
end_comment
begin_comment
comment|/*! \typedef QMetaType::Constructor     \internal */
end_comment
begin_comment
comment|/*!     \fn int qRegisterMetaType()     \relates QMetaType     \threadsafe     \since 4.2      Call this function to register the type \c T. \c T must be declared with     Q_DECLARE_METATYPE(). Returns the meta type Id.      Example:      \snippet doc/src/snippets/code/src_corelib_kernel_qmetatype.cpp 7      To use the type \c T in QVariant, using Q_DECLARE_METATYPE() is     sufficient. To use the type \c T in queued signal and slot connections,     \c{qRegisterMetaType<T>()} must be called before the first connection     is established.      Also, to use type \c T with the QObject::property() API,     \c{qRegisterMetaType<T>()} must be called before it is used, typically     in the constructor of the class that uses \c T, or in the \c{main()}     function.      \sa Q_DECLARE_METATYPE()  */
end_comment
begin_comment
comment|/*! \fn int qMetaTypeId()     \relates QMetaType     \threadsafe     \since 4.1      Returns the meta type id of type \c T at compile time. If the     type was not declared with Q_DECLARE_METATYPE(), compilation will     fail.      Typical usage:      \snippet doc/src/snippets/code/src_corelib_kernel_qmetatype.cpp 8      QMetaType::type() returns the same ID as qMetaTypeId(), but does     a lookup at runtime based on the name of the type.     QMetaType::type() is a bit slower, but compilation succeeds if a     type is not registered.      \sa Q_DECLARE_METATYPE(), QMetaType::type() */
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
