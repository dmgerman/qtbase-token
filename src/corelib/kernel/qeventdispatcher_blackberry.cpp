begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Research In Motion ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qeventdispatcher_blackberry_p.h"
end_include
begin_include
include|#
directive|include
file|"qsocketnotifier.h"
end_include
begin_include
include|#
directive|include
file|"qdebug.h"
end_include
begin_include
include|#
directive|include
file|<bps/bps.h>
end_include
begin_include
include|#
directive|include
file|<bps/event.h>
end_include
begin_struct
DECL|struct|bpsIOHandlerData
struct|struct
name|bpsIOHandlerData
block|{
DECL|function|bpsIOHandlerData
name|bpsIOHandlerData
parameter_list|()
member_init_list|:
name|count
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|readfds
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|writefds
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|exceptfds
argument_list|(
literal|0
argument_list|)
block|{     }
DECL|member|count
name|int
name|count
decl_stmt|;
DECL|member|readfds
name|fd_set
modifier|*
name|readfds
decl_stmt|;
DECL|member|writefds
name|fd_set
modifier|*
name|writefds
decl_stmt|;
DECL|member|exceptfds
name|fd_set
modifier|*
name|exceptfds
decl_stmt|;
block|}
struct|;
end_struct
begin_decl_stmt
DECL|variable|bpsIOReadyDomain
specifier|static
name|int
name|bpsIOReadyDomain
init|=
operator|-
literal|1
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|bpsIOHandler
specifier|static
name|int
name|bpsIOHandler
parameter_list|(
name|int
name|fd
parameter_list|,
name|int
name|io_events
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
block|{
comment|// decode callback payload
name|bpsIOHandlerData
modifier|*
name|ioData
init|=
cast|static_cast
argument_list|<
name|bpsIOHandlerData
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
decl_stmt|;
comment|// check if first file is ready
name|bool
name|firstReady
init|=
operator|(
name|ioData
operator|->
name|count
operator|==
literal|0
operator|)
decl_stmt|;
comment|// update ready state of file
if|if
condition|(
name|io_events
operator|&
name|BPS_IO_INPUT
condition|)
block|{
name|FD_SET
argument_list|(
name|fd
argument_list|,
name|ioData
operator|->
name|readfds
argument_list|)
expr_stmt|;
name|ioData
operator|->
name|count
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|io_events
operator|&
name|BPS_IO_OUTPUT
condition|)
block|{
name|FD_SET
argument_list|(
name|fd
argument_list|,
name|ioData
operator|->
name|writefds
argument_list|)
expr_stmt|;
name|ioData
operator|->
name|count
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|io_events
operator|&
name|BPS_IO_EXCEPT
condition|)
block|{
name|FD_SET
argument_list|(
name|fd
argument_list|,
name|ioData
operator|->
name|exceptfds
argument_list|)
expr_stmt|;
name|ioData
operator|->
name|count
operator|++
expr_stmt|;
block|}
comment|// force bps_get_event() to return immediately by posting an event to ourselves;
comment|// but this only needs to happen once if multiple files become ready at the same time
if|if
condition|(
name|firstReady
condition|)
block|{
comment|// create IO ready event
name|bps_event_t
modifier|*
name|event
decl_stmt|;
name|int
name|result
init|=
name|bps_event_create
argument_list|(
operator|&
name|event
argument_list|,
name|bpsIOReadyDomain
argument_list|,
literal|0
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
name|BPS_SUCCESS
condition|)
block|{
name|qWarning
argument_list|(
literal|"QEventDispatcherBlackberryPrivate::QEventDispatcherBlackberry: bps_event_create() failed"
argument_list|)
expr_stmt|;
return|return
name|BPS_FAILURE
return|;
block|}
comment|// post IO ready event to our thread
name|result
operator|=
name|bps_push_event
argument_list|(
name|event
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
name|BPS_SUCCESS
condition|)
block|{
name|qWarning
argument_list|(
literal|"QEventDispatcherBlackberryPrivate::QEventDispatcherBlackberry: bps_push_event() failed"
argument_list|)
expr_stmt|;
name|bps_event_destroy
argument_list|(
name|event
argument_list|)
expr_stmt|;
return|return
name|BPS_FAILURE
return|;
block|}
block|}
return|return
name|BPS_SUCCESS
return|;
block|}
end_function
begin_constructor
DECL|function|QEventDispatcherBlackberryPrivate
name|QEventDispatcherBlackberryPrivate
operator|::
name|QEventDispatcherBlackberryPrivate
parameter_list|()
member_init_list|:
name|ioData
argument_list|(
operator|new
name|bpsIOHandlerData
argument_list|)
block|{
comment|// prepare to use BPS
name|int
name|result
init|=
name|bps_initialize
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|!=
name|BPS_SUCCESS
condition|)
name|qFatal
argument_list|(
literal|"QEventDispatcherBlackberryPrivate::QEventDispatcherBlackberry: bps_initialize() failed"
argument_list|)
expr_stmt|;
comment|// get domain for IO ready events - ignoring race condition here for now
if|if
condition|(
name|bpsIOReadyDomain
operator|==
operator|-
literal|1
condition|)
block|{
name|bpsIOReadyDomain
operator|=
name|bps_register_domain
argument_list|()
expr_stmt|;
if|if
condition|(
name|bpsIOReadyDomain
operator|==
operator|-
literal|1
condition|)
name|qWarning
argument_list|(
literal|"QEventDispatcherBlackberryPrivate::QEventDispatcherBlackberry: bps_register_domain() failed"
argument_list|)
expr_stmt|;
block|}
comment|// \TODO Reinstate this when bps is fixed. See comment in select() below.
comment|// Register thread_pipe[0] with bps
comment|/*     int io_events = BPS_IO_INPUT;     result = bps_add_fd(thread_pipe[0], io_events,&bpsIOHandler, ioData.data());     if (result != BPS_SUCCESS)         qWarning()<< Q_FUNC_INFO<< "bps_add_fd() failed";     */
block|}
end_constructor
begin_destructor
DECL|function|~QEventDispatcherBlackberryPrivate
name|QEventDispatcherBlackberryPrivate
operator|::
name|~
name|QEventDispatcherBlackberryPrivate
parameter_list|()
block|{
comment|// we're done using BPS
name|bps_shutdown
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_comment
comment|/////////////////////////////////////////////////////////////////////////////
end_comment
begin_constructor
DECL|function|QEventDispatcherBlackberry
name|QEventDispatcherBlackberry
operator|::
name|QEventDispatcherBlackberry
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QEventDispatcherUNIX
argument_list|(
operator|*
operator|new
name|QEventDispatcherBlackberryPrivate
argument_list|,
name|parent
argument_list|)
block|{ }
end_constructor
begin_constructor
DECL|function|QEventDispatcherBlackberry
name|QEventDispatcherBlackberry
operator|::
name|QEventDispatcherBlackberry
parameter_list|(
name|QEventDispatcherBlackberryPrivate
modifier|&
name|dd
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QEventDispatcherUNIX
argument_list|(
name|dd
argument_list|,
name|parent
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QEventDispatcherBlackberry
name|QEventDispatcherBlackberry
operator|::
name|~
name|QEventDispatcherBlackberry
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|registerSocketNotifier
name|void
name|QEventDispatcherBlackberry
operator|::
name|registerSocketNotifier
parameter_list|(
name|QSocketNotifier
modifier|*
name|notifier
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|notifier
argument_list|)
expr_stmt|;
comment|// Call the base Unix implementation. Needed to allow select() to be called correctly
name|QEventDispatcherUNIX
operator|::
name|registerSocketNotifier
argument_list|(
name|notifier
argument_list|)
expr_stmt|;
comment|// Register the fd with bps
name|int
name|sockfd
init|=
name|notifier
operator|->
name|socket
argument_list|()
decl_stmt|;
name|int
name|type
init|=
name|notifier
operator|->
name|type
argument_list|()
decl_stmt|;
name|int
name|io_events
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|QSocketNotifier
operator|::
name|Read
case|:
name|io_events
operator||=
name|BPS_IO_INPUT
expr_stmt|;
break|break;
case|case
name|QSocketNotifier
operator|::
name|Write
case|:
name|io_events
operator||=
name|BPS_IO_OUTPUT
expr_stmt|;
break|break;
case|case
name|QSocketNotifier
operator|::
name|Exception
case|:
default|default:
name|io_events
operator||=
name|BPS_IO_EXCEPT
expr_stmt|;
break|break;
block|}
name|Q_D
argument_list|(
name|QEventDispatcherBlackberry
argument_list|)
expr_stmt|;
name|int
name|result
init|=
name|bps_add_fd
argument_list|(
name|sockfd
argument_list|,
name|io_events
argument_list|,
operator|&
name|bpsIOHandler
argument_list|,
name|d
operator|->
name|ioData
operator|.
name|data
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
name|BPS_SUCCESS
condition|)
name|qWarning
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"bps_add_fd() failed"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|unregisterSocketNotifier
name|void
name|QEventDispatcherBlackberry
operator|::
name|unregisterSocketNotifier
parameter_list|(
name|QSocketNotifier
modifier|*
name|notifier
parameter_list|)
block|{
comment|// Unregister the fd with bps
name|int
name|sockfd
init|=
name|notifier
operator|->
name|socket
argument_list|()
decl_stmt|;
name|int
name|result
init|=
name|bps_remove_fd
argument_list|(
name|sockfd
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
name|BPS_SUCCESS
condition|)
name|qWarning
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"bps_remove_fd() failed"
expr_stmt|;
comment|// Allow the base Unix implementation to unregister the fd too
name|QEventDispatcherUNIX
operator|::
name|unregisterSocketNotifier
argument_list|(
name|notifier
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|select
name|int
name|QEventDispatcherBlackberry
operator|::
name|select
parameter_list|(
name|int
name|nfds
parameter_list|,
name|fd_set
modifier|*
name|readfds
parameter_list|,
name|fd_set
modifier|*
name|writefds
parameter_list|,
name|fd_set
modifier|*
name|exceptfds
parameter_list|,
name|timeval
modifier|*
name|timeout
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|nfds
argument_list|)
expr_stmt|;
comment|// prepare file sets for bps callback
name|Q_D
argument_list|(
name|QEventDispatcherBlackberry
argument_list|)
expr_stmt|;
name|d
operator|->
name|ioData
operator|->
name|count
operator|=
literal|0
expr_stmt|;
name|d
operator|->
name|ioData
operator|->
name|readfds
operator|=
name|readfds
expr_stmt|;
name|d
operator|->
name|ioData
operator|->
name|writefds
operator|=
name|writefds
expr_stmt|;
name|d
operator|->
name|ioData
operator|->
name|exceptfds
operator|=
name|exceptfds
expr_stmt|;
comment|// \TODO Remove this when bps is fixed
comment|//
comment|// Work around a bug in BPS with which if we register the thread_pipe[0] fd with bps in the
comment|// private class' ctor once only then we get spurious notifications that thread_pipe[0] is
comment|// ready for reading. The first time the notification is correct and the pipe is emptied in
comment|// the calling doSelect() function. The 2nd notification is an error and the resulting attempt
comment|// to read and call to wakeUps.testAndSetRelease(1, 0) fails as there has been no intervening
comment|// call to QEventDispatcherUNIX::wakeUp().
comment|//
comment|// Registering thread_pipe[0] here and unregistering it at the end of this call works around
comment|// this issue.
name|int
name|io_events
init|=
name|BPS_IO_INPUT
decl_stmt|;
name|int
name|result
init|=
name|bps_add_fd
argument_list|(
name|d
operator|->
name|thread_pipe
index|[
literal|0
index|]
argument_list|,
name|io_events
argument_list|,
operator|&
name|bpsIOHandler
argument_list|,
name|d
operator|->
name|ioData
operator|.
name|data
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
name|BPS_SUCCESS
condition|)
name|qWarning
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"bps_add_fd() failed"
expr_stmt|;
comment|// reset all file sets
if|if
condition|(
name|readfds
condition|)
name|FD_ZERO
argument_list|(
name|readfds
argument_list|)
expr_stmt|;
if|if
condition|(
name|writefds
condition|)
name|FD_ZERO
argument_list|(
name|writefds
argument_list|)
expr_stmt|;
if|if
condition|(
name|exceptfds
condition|)
name|FD_ZERO
argument_list|(
name|exceptfds
argument_list|)
expr_stmt|;
comment|// convert timeout to milliseconds
name|int
name|timeout_ms
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|timeout
condition|)
name|timeout_ms
operator|=
operator|(
name|timeout
operator|->
name|tv_sec
operator|*
literal|1000
operator|)
operator|+
operator|(
name|timeout
operator|->
name|tv_usec
operator|/
literal|1000
operator|)
expr_stmt|;
comment|// wait for event or file to be ready
name|bps_event_t
modifier|*
name|event
init|=
name|NULL
decl_stmt|;
name|result
operator|=
name|bps_get_event
argument_list|(
operator|&
name|event
argument_list|,
name|timeout_ms
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
name|BPS_SUCCESS
condition|)
name|qWarning
argument_list|(
literal|"QEventDispatcherBlackberry::select: bps_get_event() failed"
argument_list|)
expr_stmt|;
comment|// pass all received events through filter - except IO ready events
if|if
condition|(
name|event
operator|&&
name|bps_event_get_domain
argument_list|(
name|event
argument_list|)
operator|!=
name|bpsIOReadyDomain
condition|)
name|filterEvent
argument_list|(
operator|(
name|void
operator|*
operator|)
name|event
argument_list|)
expr_stmt|;
comment|// \TODO Remove this when bps is fixed (see comment above)
name|result
operator|=
name|bps_remove_fd
argument_list|(
name|d
operator|->
name|thread_pipe
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
name|BPS_SUCCESS
condition|)
name|qWarning
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"bps_remove_fd() failed"
expr_stmt|;
comment|// the number of bits set in the file sets
return|return
name|d
operator|->
name|ioData
operator|->
name|count
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
