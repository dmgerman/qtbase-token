begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qbasictimer.h"
end_include
begin_include
include|#
directive|include
file|"qabstracteventdispatcher.h"
end_include
begin_include
include|#
directive|include
file|"qabstracteventdispatcher_p.h"
end_include
begin_function
name|QT_BEGIN_NAMESPACE
comment|/*!     \class QBasicTimer     \inmodule QtCore     \brief The QBasicTimer class provides timer events for objects.      \ingroup events      This is a fast, lightweight, and low-level class used by Qt     internally. We recommend using the higher-level QTimer class     rather than this class if you want to use timers in your     applications. Note that this timer is a repeating timer that     will send subsequent timer events unless the stop() function is called.      To use this class, create a QBasicTimer, and call its start()     function with a timeout interval and with a pointer to a QObject     subclass. When the timer times out it will send a timer event to     the QObject subclass. The timer can be stopped at any time using     stop(). isActive() returns true for a timer that is running;     i.e. it has been started, has not reached the timeout time, and     has not been stopped. The timer's ID can be retrieved using     timerId().      The \l{widgets/wiggly}{Wiggly} example uses QBasicTimer to repaint     a widget at regular intervals.      \sa QTimer, QTimerEvent, QObject::timerEvent(), Timers, {Wiggly Example} */
comment|/*!     \fn QBasicTimer::QBasicTimer()      Contructs a basic timer.      \sa start() */
comment|/*!     \fn QBasicTimer::~QBasicTimer()      Destroys the basic timer. */
comment|/*!     \fn bool QBasicTimer::isActive() const      Returns true if the timer is running and has not been stopped; otherwise     returns false.      \sa start(), stop() */
comment|/*!     \fn int QBasicTimer::timerId() const      Returns the timer's ID.      \sa QTimerEvent::timerId() */
comment|/*!     \fn void QBasicTimer::start(int msec, QObject *object)      Starts (or restarts) the timer with a \a msec milliseconds timeout. The     timer will be a Qt::CoarseTimer. See Qt::TimerType for information on the     different timer types.      The given \a object will receive timer events.      \sa stop(), isActive(), QObject::timerEvent(), Qt::CoarseTimer  */
DECL|function|start
name|void
name|QBasicTimer
operator|::
name|start
parameter_list|(
name|int
name|msec
parameter_list|,
name|QObject
modifier|*
name|obj
parameter_list|)
block|{
name|QAbstractEventDispatcher
modifier|*
name|eventDispatcher
init|=
name|QAbstractEventDispatcher
operator|::
name|instance
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|eventDispatcher
condition|)
block|{
name|qWarning
argument_list|(
literal|"QBasicTimer::start: QBasicTimer can only be used with threads started with QThread"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|id
condition|)
block|{
name|eventDispatcher
operator|->
name|unregisterTimer
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|QAbstractEventDispatcherPrivate
operator|::
name|releaseTimerId
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
name|id
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|obj
condition|)
name|id
operator|=
name|eventDispatcher
operator|->
name|registerTimer
argument_list|(
name|msec
argument_list|,
name|Qt
operator|::
name|CoarseTimer
argument_list|,
name|obj
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \overload      Starts (or restarts) the timer with a \a msec milliseconds timeout and the     given \a timerType. See Qt::TimerType for information on the different     timer types.      \a obj will receive timer events.      \sa stop(), isActive(), QObject::timerEvent(), Qt::TimerType  */
end_comment
begin_function
DECL|function|start
name|void
name|QBasicTimer
operator|::
name|start
parameter_list|(
name|int
name|msec
parameter_list|,
name|Qt
operator|::
name|TimerType
name|timerType
parameter_list|,
name|QObject
modifier|*
name|obj
parameter_list|)
block|{
name|QAbstractEventDispatcher
modifier|*
name|eventDispatcher
init|=
name|QAbstractEventDispatcher
operator|::
name|instance
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|eventDispatcher
condition|)
block|{
name|qWarning
argument_list|(
literal|"QBasicTimer::start: QBasicTimer can only be used with threads started with QThread"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|id
condition|)
block|{
name|eventDispatcher
operator|->
name|unregisterTimer
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|QAbstractEventDispatcherPrivate
operator|::
name|releaseTimerId
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
name|id
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|obj
condition|)
name|id
operator|=
name|eventDispatcher
operator|->
name|registerTimer
argument_list|(
name|msec
argument_list|,
name|timerType
argument_list|,
name|obj
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Stops the timer.      \sa start(), isActive() */
end_comment
begin_function
DECL|function|stop
name|void
name|QBasicTimer
operator|::
name|stop
parameter_list|()
block|{
if|if
condition|(
name|id
condition|)
block|{
name|QAbstractEventDispatcher
modifier|*
name|eventDispatcher
init|=
name|QAbstractEventDispatcher
operator|::
name|instance
argument_list|()
decl_stmt|;
if|if
condition|(
name|eventDispatcher
condition|)
name|eventDispatcher
operator|->
name|unregisterTimer
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|QAbstractEventDispatcherPrivate
operator|::
name|releaseTimerId
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
name|id
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
