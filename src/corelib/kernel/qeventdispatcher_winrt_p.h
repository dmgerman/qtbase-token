begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QEVENTDISPATCHER_WINRT_P_H
end_ifndef
begin_define
DECL|macro|QEVENTDISPATCHER_WINRT_P_H
define|#
directive|define
name|QEVENTDISPATCHER_WINRT_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists purely as an
end_comment
begin_comment
comment|// implementation detail.  This header file may change from version to
end_comment
begin_comment
comment|// version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"QtCore/qabstracteventdispatcher.h"
end_include
begin_include
include|#
directive|include
file|"private/qabstracteventdispatcher_p.h"
end_include
begin_include
include|#
directive|include
file|<qt_windows.h>
end_include
begin_include
include|#
directive|include
file|<wrl.h>
end_include
begin_decl_stmt
name|namespace
name|ABI
block|{
name|namespace
name|Windows
block|{
name|namespace
name|System
block|{
name|namespace
name|Threading
block|{
struct_decl|struct
name|IThreadPoolTimer
struct_decl|;
struct_decl|struct
name|IThreadPoolTimerStatics
struct_decl|;
block|}
block|}
block|}
block|}
end_decl_stmt
begin_function_decl
name|QT_BEGIN_NAMESPACE
name|int
name|qt_msectime
parameter_list|()
function_decl|;
end_function_decl
begin_decl_stmt
DECL|variable|QEventDispatcherWinRTPrivate
name|class
name|QEventDispatcherWinRTPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_CORE_EXPORT
name|QEventDispatcherWinRT
range|:
name|public
name|QAbstractEventDispatcher
block|{
name|Q_OBJECT
name|Q_DECLARE_PRIVATE
argument_list|(
argument|QEventDispatcherWinRT
argument_list|)
name|public
operator|:
name|explicit
name|QEventDispatcherWinRT
argument_list|(
name|QObject
operator|*
name|parent
operator|=
literal|0
argument_list|)
block|;
operator|~
name|QEventDispatcherWinRT
argument_list|()
block|;
name|bool
name|processEvents
argument_list|(
argument|QEventLoop::ProcessEventsFlags flags
argument_list|)
block|;
name|bool
name|hasPendingEvents
argument_list|()
block|;
name|void
name|registerSocketNotifier
argument_list|(
name|QSocketNotifier
operator|*
name|notifier
argument_list|)
block|;
name|void
name|unregisterSocketNotifier
argument_list|(
name|QSocketNotifier
operator|*
name|notifier
argument_list|)
block|;
name|void
name|registerTimer
argument_list|(
argument|int timerId
argument_list|,
argument|int interval
argument_list|,
argument|Qt::TimerType timerType
argument_list|,
argument|QObject *object
argument_list|)
block|;
name|bool
name|unregisterTimer
argument_list|(
argument|int timerId
argument_list|)
block|;
name|bool
name|unregisterTimers
argument_list|(
name|QObject
operator|*
name|object
argument_list|)
block|;
name|QList
operator|<
name|TimerInfo
operator|>
name|registeredTimers
argument_list|(
argument|QObject *object
argument_list|)
specifier|const
block|;
name|int
name|remainingTime
argument_list|(
argument|int timerId
argument_list|)
block|;
name|bool
name|registerEventNotifier
argument_list|(
name|QWinEventNotifier
operator|*
name|notifier
argument_list|)
block|;
name|void
name|unregisterEventNotifier
argument_list|(
name|QWinEventNotifier
operator|*
name|notifier
argument_list|)
block|;
name|void
name|wakeUp
argument_list|()
block|;
name|void
name|interrupt
argument_list|()
block|;
name|void
name|flush
argument_list|()
block|;
name|void
name|startingUp
argument_list|()
block|;
name|void
name|closingDown
argument_list|()
block|;
name|protected
operator|:
name|QEventDispatcherWinRT
argument_list|(
name|QEventDispatcherWinRTPrivate
operator|&
name|dd
argument_list|,
name|QObject
operator|*
name|parent
operator|=
literal|0
argument_list|)
block|;
name|bool
name|event
argument_list|(
name|QEvent
operator|*
argument_list|)
block|;
name|int
name|activateTimers
argument_list|()
block|;
name|int
name|activateSocketNotifiers
argument_list|()
block|; }
decl_stmt|;
end_decl_stmt
begin_struct
DECL|struct|WinRTTimerInfo
struct|struct
name|WinRTTimerInfo
comment|// internal timer info
block|{
DECL|function|WinRTTimerInfo
name|WinRTTimerInfo
argument_list|()
operator|:
name|timer
argument_list|(
literal|0
argument_list|)
block|{}
DECL|member|dispatcher
name|QObject
operator|*
name|dispatcher
expr_stmt|;
DECL|member|timerId
name|int
name|timerId
decl_stmt|;
DECL|member|interval
name|int
name|interval
decl_stmt|;
DECL|member|timerType
name|Qt
operator|::
name|TimerType
name|timerType
expr_stmt|;
DECL|member|timeout
name|quint64
name|timeout
decl_stmt|;
comment|// - when to actually fire
DECL|member|obj
name|QObject
modifier|*
name|obj
decl_stmt|;
comment|// - object to receive events
DECL|member|inTimerEvent
name|bool
name|inTimerEvent
decl_stmt|;
DECL|member|timer
name|ABI
operator|::
name|Windows
operator|::
name|System
operator|::
name|Threading
operator|::
name|IThreadPoolTimer
operator|*
name|timer
expr_stmt|;
block|}
struct|;
end_struct
begin_decl_stmt
name|class
name|QZeroTimerEvent
range|:
name|public
name|QTimerEvent
block|{
name|public
operator|:
name|explicit
specifier|inline
name|QZeroTimerEvent
argument_list|(
argument|int timerId
argument_list|)
operator|:
name|QTimerEvent
argument_list|(
argument|timerId
argument_list|)
block|{
name|t
operator|=
name|QEvent
operator|::
name|ZeroTimerEvent
block|; }
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_CORE_EXPORT
name|QEventDispatcherWinRTPrivate
range|:
name|public
name|QAbstractEventDispatcherPrivate
block|{
name|Q_DECLARE_PUBLIC
argument_list|(
argument|QEventDispatcherWinRT
argument_list|)
name|public
operator|:
name|QEventDispatcherWinRTPrivate
argument_list|()
block|;
operator|~
name|QEventDispatcherWinRTPrivate
argument_list|()
block|;
name|QList
operator|<
name|WinRTTimerInfo
operator|*
operator|>
name|timerVec
block|;
name|QHash
operator|<
name|int
block|,
name|WinRTTimerInfo
operator|*
operator|>
name|timerDict
block|;
name|QHash
operator|<
name|ABI
operator|::
name|Windows
operator|::
name|System
operator|::
name|Threading
operator|::
name|IThreadPoolTimer
operator|*
block|,
name|WinRTTimerInfo
operator|*
operator|>
name|threadPoolTimerDict
block|;
name|void
name|registerTimer
argument_list|(
name|WinRTTimerInfo
operator|*
name|t
argument_list|)
block|;
name|void
name|unregisterTimer
argument_list|(
name|WinRTTimerInfo
operator|*
name|t
argument_list|)
block|;
name|void
name|sendTimerEvent
argument_list|(
argument|int timerId
argument_list|)
block|;
name|HRESULT
name|timerExpiredCallback
argument_list|(
name|ABI
operator|::
name|Windows
operator|::
name|System
operator|::
name|Threading
operator|::
name|IThreadPoolTimer
operator|*
name|source
argument_list|)
block|;
name|QAtomicInt
name|wakeUps
block|;
name|bool
name|interrupt
block|;
name|ABI
operator|::
name|Windows
operator|::
name|System
operator|::
name|Threading
operator|::
name|IThreadPoolTimerStatics
operator|*
name|timerFactory
block|; }
decl_stmt|;
end_decl_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QEVENTDISPATCHER_WINRT_P_H
end_comment
end_unit
