begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QMETATYPE_P_H
end_ifndef
begin_define
DECL|macro|QMETATYPE_P_H
define|#
directive|define
name|QMETATYPE_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists purely as an
end_comment
begin_comment
comment|// implementation detail.  This header file may change from version to
end_comment
begin_comment
comment|// version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"qmetatype.h"
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
name|enum
type|{
comment|/* TYPEMODULEINFO flags */
DECL|enumerator|Q_CORE_TYPE
name|Q_CORE_TYPE
init|=
literal|1
decl_stmt|,
DECL|enumerator|Q_GUI_TYPE
name|Q_GUI_TYPE
init|=
literal|2
decl_stmt|,
DECL|enumerator|Q_WIDGET_TYPE
name|Q_WIDGET_TYPE
init|=
literal|3
end_decl_stmt
begin_expr_stmt
DECL|enumerator|Q_WIDGET_TYPE
unit|};
name|template
operator|<
name|typename
name|T
operator|>
name|class
name|QTypeModuleInfo
block|{
name|public
operator|:
expr|enum
name|Module
block|{
name|IsCore
operator|=
operator|!
name|QTypeInfo
operator|<
name|T
operator|>
operator|::
name|isComplex
block|,
comment|// Primitive types are in Core
name|IsWidget
operator|=
name|false
block|,
name|IsGui
operator|=
name|false
block|,
name|IsUnknown
operator|=
operator|!
name|IsCore
block|}
block|;
specifier|static
specifier|inline
name|int
name|module
argument_list|()
block|{
return|return
name|IsCore
operator|?
name|Q_CORE_TYPE
operator|:
literal|0
return|;
block|}
end_expr_stmt
begin_define
DECL|macro|QT_ASSIGN_TYPE_TO_MODULE
unit|};
define|#
directive|define
name|QT_ASSIGN_TYPE_TO_MODULE
parameter_list|(
name|TYPE
parameter_list|,
name|MODULE
parameter_list|)
define|\
value|template<> \ class QTypeModuleInfo<TYPE> \ { \ public: \     enum Module { \         IsCore = (((MODULE) == (Q_CORE_TYPE))), \         IsWidget = (((MODULE) == (Q_WIDGET_TYPE))), \         IsGui = (((MODULE) == (Q_GUI_TYPE))), \         IsUnknown = !(IsCore || IsWidget || IsGui) \     }; \     static inline int module() { return MODULE; } \     Q_STATIC_ASSERT((IsUnknown&& !(IsCore || IsWidget || IsGui)) \                  || (IsCore&& !(IsUnknown || IsWidget || IsGui)) \                  || (IsWidget&& !(IsUnknown || IsCore || IsGui)) \                  || (IsGui&& !(IsUnknown || IsCore || IsWidget))); \ };
end_define
begin_define
DECL|macro|QT_DECLARE_CORE_MODULE_TYPES_ITER
define|#
directive|define
name|QT_DECLARE_CORE_MODULE_TYPES_ITER
parameter_list|(
name|TypeName
parameter_list|,
name|TypeId
parameter_list|,
name|Name
parameter_list|)
define|\
value|QT_ASSIGN_TYPE_TO_MODULE(Name, Q_CORE_TYPE);
end_define
begin_define
DECL|macro|QT_DECLARE_GUI_MODULE_TYPES_ITER
define|#
directive|define
name|QT_DECLARE_GUI_MODULE_TYPES_ITER
parameter_list|(
name|TypeName
parameter_list|,
name|TypeId
parameter_list|,
name|Name
parameter_list|)
define|\
value|QT_ASSIGN_TYPE_TO_MODULE(Name, Q_GUI_TYPE);
end_define
begin_define
DECL|macro|QT_DECLARE_WIDGETS_MODULE_TYPES_ITER
define|#
directive|define
name|QT_DECLARE_WIDGETS_MODULE_TYPES_ITER
parameter_list|(
name|TypeName
parameter_list|,
name|TypeId
parameter_list|,
name|Name
parameter_list|)
define|\
value|QT_ASSIGN_TYPE_TO_MODULE(Name, Q_WIDGET_TYPE);
end_define
begin_macro
name|QT_FOR_EACH_STATIC_CORE_CLASS
argument_list|(
argument|QT_DECLARE_CORE_MODULE_TYPES_ITER
argument_list|)
end_macro
begin_macro
name|QT_FOR_EACH_STATIC_CORE_TEMPLATE
argument_list|(
argument|QT_DECLARE_CORE_MODULE_TYPES_ITER
argument_list|)
end_macro
begin_macro
name|QT_FOR_EACH_STATIC_GUI_CLASS
argument_list|(
argument|QT_DECLARE_GUI_MODULE_TYPES_ITER
argument_list|)
end_macro
begin_macro
name|QT_FOR_EACH_STATIC_WIDGETS_CLASS
argument_list|(
argument|QT_DECLARE_WIDGETS_MODULE_TYPES_ITER
argument_list|)
end_macro
begin_undef
DECL|macro|QT_DECLARE_CORE_MODULE_TYPES_ITER
undef|#
directive|undef
name|QT_DECLARE_CORE_MODULE_TYPES_ITER
end_undef
begin_undef
DECL|macro|QT_DECLARE_GUI_MODULE_TYPES_ITER
undef|#
directive|undef
name|QT_DECLARE_GUI_MODULE_TYPES_ITER
end_undef
begin_undef
DECL|macro|QT_DECLARE_WIDGETS_MODULE_TYPES_ITER
undef|#
directive|undef
name|QT_DECLARE_WIDGETS_MODULE_TYPES_ITER
end_undef
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QMETATYPE_P_H
end_comment
end_unit
