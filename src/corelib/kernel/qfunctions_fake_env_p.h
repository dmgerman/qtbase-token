begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QFUNCTIONS_FAKE_ENV_P_H
end_ifndef
begin_define
DECL|macro|QFUNCTIONS_FAKE_ENV_P_H
define|#
directive|define
name|QFUNCTIONS_FAKE_ENV_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists for the convenience
end_comment
begin_comment
comment|// of the QLibrary class.  This header file may change from
end_comment
begin_comment
comment|// version to version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"qbytearray.h"
end_include
begin_include
include|#
directive|include
file|"qhash.h"
end_include
begin_expr_stmt
name|QT_BEGIN_NAMESPACE
comment|// Environment ------------------------------------------------------
DECL|variable|QByteArray
DECL|function|qt_app_environment
name|Q_CORE_EXPORT
name|QHash
operator|<
name|QByteArray
operator|,
name|QByteArray
operator|>
operator|&
name|qt_app_environment
argument_list|()
block|{
specifier|static
name|QHash
operator|<
name|QByteArray
block|,
name|QByteArray
operator|>
name|internalEnvironment
block|;
return|return
name|internalEnvironment
return|;
block|}
end_expr_stmt
begin_function
DECL|function|qt_fake_getenv_s
name|errno_t
name|qt_fake_getenv_s
parameter_list|(
name|size_t
modifier|*
name|sizeNeeded
parameter_list|,
name|char
modifier|*
name|buffer
parameter_list|,
name|size_t
name|bufferSize
parameter_list|,
specifier|const
name|char
modifier|*
name|varName
parameter_list|)
block|{
if|if
condition|(
operator|!
name|sizeNeeded
condition|)
return|return
name|EINVAL
return|;
name|QHash
operator|<
name|QByteArray
operator|,
name|QByteArray
operator|>
operator|::
name|const_iterator
name|iterator
operator|=
name|qt_app_environment
argument_list|()
operator|.
name|constFind
argument_list|(
name|varName
argument_list|)
expr_stmt|;
if|if
condition|(
name|iterator
operator|==
name|qt_app_environment
argument_list|()
operator|.
name|constEnd
argument_list|()
condition|)
block|{
if|if
condition|(
name|buffer
condition|)
name|buffer
index|[
literal|0
index|]
operator|=
literal|'\0'
expr_stmt|;
return|return
name|ENOENT
return|;
block|}
specifier|const
name|int
name|size
init|=
name|iterator
operator|->
name|size
argument_list|()
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|bufferSize
operator|<
name|size_t
argument_list|(
name|size
argument_list|)
condition|)
block|{
operator|*
name|sizeNeeded
operator|=
name|size
expr_stmt|;
return|return
name|ERANGE
return|;
block|}
name|qstrcpy
argument_list|(
name|buffer
argument_list|,
name|iterator
operator|->
name|constData
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|qt_fake__putenv_s
name|errno_t
name|qt_fake__putenv_s
parameter_list|(
specifier|const
name|char
modifier|*
name|varName
parameter_list|,
specifier|const
name|char
modifier|*
name|value
parameter_list|)
block|{
name|QHash
operator|<
name|QByteArray
operator|,
name|QByteArray
operator|>
operator|::
name|iterator
name|iterator
operator|=
name|qt_app_environment
argument_list|()
operator|.
name|find
argument_list|(
name|varName
argument_list|)
expr_stmt|;
name|QHash
operator|<
name|QByteArray
operator|,
name|QByteArray
operator|>
operator|::
name|iterator
name|end
operator|=
name|qt_app_environment
argument_list|()
operator|.
name|end
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|value
operator|||
operator|!
operator|*
name|value
condition|)
block|{
if|if
condition|(
name|iterator
operator|!=
name|end
condition|)
name|qt_app_environment
argument_list|()
operator|.
name|erase
argument_list|(
name|iterator
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|iterator
operator|==
name|end
condition|)
name|qt_app_environment
argument_list|()
index|[
name|varName
index|]
operator|=
name|QByteArray
argument_list|(
name|value
argument_list|)
expr_stmt|;
else|else
operator|(
operator|*
name|iterator
operator|)
operator|=
name|value
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QFUNCTIONS_FAKE_ENV_P_H
end_comment
end_unit
