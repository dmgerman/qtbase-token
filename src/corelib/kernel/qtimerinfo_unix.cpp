begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<qelapsedtimer.h>
end_include
begin_include
include|#
directive|include
file|<qcoreapplication.h>
end_include
begin_include
include|#
directive|include
file|"private/qcore_unix_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qtimerinfo_unix_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qobject_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qabstracteventdispatcher_p.h"
end_include
begin_include
include|#
directive|include
file|<sys/times.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|qt_disable_lowpriority_timers
name|Q_CORE_EXPORT
name|bool
name|qt_disable_lowpriority_timers
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_comment
comment|/*  * Internal functions for manipulating timer data structures.  The  * timerBitVec array is used for keeping track of timer identifiers.  */
end_comment
begin_constructor
DECL|function|QTimerInfoList
name|QTimerInfoList
operator|::
name|QTimerInfoList
parameter_list|()
block|{
if|#
directive|if
operator|(
name|_POSIX_MONOTONIC_CLOCK
operator|-
literal|0
operator|<=
literal|0
operator|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_NACL
argument_list|)
if|if
condition|(
operator|!
name|QElapsedTimer
operator|::
name|isMonotonic
argument_list|()
condition|)
block|{
comment|// not using monotonic timers, initialize the timeChanged() machinery
name|previousTime
operator|=
name|qt_gettime
argument_list|()
expr_stmt|;
name|tms
name|unused
decl_stmt|;
name|previousTicks
operator|=
name|times
argument_list|(
operator|&
name|unused
argument_list|)
expr_stmt|;
name|ticksPerSecond
operator|=
name|sysconf
argument_list|(
name|_SC_CLK_TCK
argument_list|)
expr_stmt|;
name|msPerTick
operator|=
literal|1000
operator|/
name|ticksPerSecond
expr_stmt|;
block|}
else|else
block|{
comment|// detected monotonic timers
name|previousTime
operator|.
name|tv_sec
operator|=
name|previousTime
operator|.
name|tv_usec
operator|=
literal|0
expr_stmt|;
name|previousTicks
operator|=
literal|0
expr_stmt|;
name|ticksPerSecond
operator|=
literal|0
expr_stmt|;
name|msPerTick
operator|=
literal|0
expr_stmt|;
block|}
endif|#
directive|endif
name|firstTimerInfo
operator|=
literal|0
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|updateCurrentTime
name|timeval
name|QTimerInfoList
operator|::
name|updateCurrentTime
parameter_list|()
block|{
return|return
operator|(
name|currentTime
operator|=
name|qt_gettime
argument_list|()
operator|)
return|;
block|}
end_function
begin_if
if|#
directive|if
operator|(
operator|(
name|_POSIX_MONOTONIC_CLOCK
operator|-
literal|0
operator|<=
literal|0
operator|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_INTEGRITY
argument_list|)
operator|)
operator|||
name|defined
argument_list|(
name|QT_BOOTSTRAPPED
argument_list|)
end_if
begin_function
template|template
parameter_list|<>
DECL|function|qAbs
name|timeval
name|qAbs
parameter_list|(
specifier|const
name|timeval
modifier|&
name|t
parameter_list|)
block|{
name|timeval
name|tmp
init|=
name|t
decl_stmt|;
if|if
condition|(
name|tmp
operator|.
name|tv_sec
operator|<
literal|0
condition|)
block|{
name|tmp
operator|.
name|tv_sec
operator|=
operator|-
name|tmp
operator|.
name|tv_sec
operator|-
literal|1
expr_stmt|;
name|tmp
operator|.
name|tv_usec
operator|-=
literal|1000000
expr_stmt|;
block|}
if|if
condition|(
name|tmp
operator|.
name|tv_sec
operator|==
literal|0
operator|&&
name|tmp
operator|.
name|tv_usec
operator|<
literal|0
condition|)
block|{
name|tmp
operator|.
name|tv_usec
operator|=
operator|-
name|tmp
operator|.
name|tv_usec
expr_stmt|;
block|}
return|return
name|normalizedTimeval
argument_list|(
name|tmp
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*   Returns true if the real time clock has changed by more than 10%   relative to the processor time since the last time this function was   called. This presumably means that the system time has been changed.    If /a delta is nonzero, delta is set to our best guess at how much the system clock was changed. */
end_comment
begin_function
DECL|function|timeChanged
name|bool
name|QTimerInfoList
operator|::
name|timeChanged
parameter_list|(
name|timeval
modifier|*
name|delta
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|Q_OS_NACL
name|Q_UNUSED
argument_list|(
argument|delta
argument_list|)
return|return
literal|false
return|;
comment|// Calling "times" crashes.
endif|#
directive|endif
name|struct
name|tms
name|unused
decl_stmt|;
name|clock_t
name|currentTicks
init|=
name|times
argument_list|(
operator|&
name|unused
argument_list|)
decl_stmt|;
name|clock_t
name|elapsedTicks
init|=
name|currentTicks
operator|-
name|previousTicks
decl_stmt|;
name|timeval
name|elapsedTime
init|=
name|currentTime
operator|-
name|previousTime
decl_stmt|;
name|timeval
name|elapsedTimeTicks
decl_stmt|;
name|elapsedTimeTicks
operator|.
name|tv_sec
operator|=
name|elapsedTicks
operator|/
name|ticksPerSecond
expr_stmt|;
name|elapsedTimeTicks
operator|.
name|tv_usec
operator|=
operator|(
operator|(
operator|(
name|elapsedTicks
operator|*
literal|1000
operator|)
operator|/
name|ticksPerSecond
operator|)
operator|%
literal|1000
operator|)
operator|*
literal|1000
expr_stmt|;
name|timeval
name|dummy
decl_stmt|;
if|if
condition|(
operator|!
name|delta
condition|)
name|delta
operator|=
operator|&
name|dummy
expr_stmt|;
operator|*
name|delta
operator|=
name|elapsedTime
operator|-
name|elapsedTimeTicks
expr_stmt|;
name|previousTicks
operator|=
name|currentTicks
expr_stmt|;
name|previousTime
operator|=
name|currentTime
expr_stmt|;
comment|// If tick drift is more than 10% off compared to realtime, we assume that the clock has
comment|// been set. Of course, we have to allow for the tick granularity as well.
name|timeval
name|tickGranularity
decl_stmt|;
name|tickGranularity
operator|.
name|tv_sec
operator|=
literal|0
expr_stmt|;
name|tickGranularity
operator|.
name|tv_usec
operator|=
name|msPerTick
operator|*
literal|1000
expr_stmt|;
return|return
name|elapsedTimeTicks
operator|<
operator|(
operator|(
name|qAbs
argument_list|(
operator|*
name|delta
argument_list|)
operator|-
name|tickGranularity
operator|)
operator|*
literal|10
operator|)
return|;
block|}
end_function
begin_function
DECL|function|repairTimersIfNeeded
name|void
name|QTimerInfoList
operator|::
name|repairTimersIfNeeded
parameter_list|()
block|{
if|if
condition|(
name|QElapsedTimer
operator|::
name|isMonotonic
argument_list|()
condition|)
return|return;
name|timeval
name|delta
decl_stmt|;
if|if
condition|(
name|timeChanged
argument_list|(
operator|&
name|delta
argument_list|)
condition|)
name|timerRepair
argument_list|(
name|delta
argument_list|)
expr_stmt|;
block|}
end_function
begin_else
else|#
directive|else
end_else
begin_comment
comment|// !(_POSIX_MONOTONIC_CLOCK-0<= 0)&& !defined(QT_BOOTSTRAPPED)
end_comment
begin_function
DECL|function|repairTimersIfNeeded
name|void
name|QTimerInfoList
operator|::
name|repairTimersIfNeeded
parameter_list|()
block|{ }
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*   insert timer info into list */
end_comment
begin_function
DECL|function|timerInsert
name|void
name|QTimerInfoList
operator|::
name|timerInsert
parameter_list|(
name|QTimerInfo
modifier|*
name|ti
parameter_list|)
block|{
name|int
name|index
init|=
name|size
argument_list|()
decl_stmt|;
while|while
condition|(
name|index
operator|--
condition|)
block|{
specifier|register
specifier|const
name|QTimerInfo
modifier|*
specifier|const
name|t
init|=
name|at
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|ti
operator|->
name|timeout
operator|<
name|t
operator|->
name|timeout
operator|)
condition|)
break|break;
block|}
name|insert
argument_list|(
name|index
operator|+
literal|1
argument_list|,
name|ti
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*   repair broken timer */
end_comment
begin_function
DECL|function|timerRepair
name|void
name|QTimerInfoList
operator|::
name|timerRepair
parameter_list|(
specifier|const
name|timeval
modifier|&
name|diff
parameter_list|)
block|{
comment|// repair all timers
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|register
name|QTimerInfo
modifier|*
name|t
init|=
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|t
operator|->
name|timeout
operator|=
name|t
operator|->
name|timeout
operator|+
name|diff
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|operator +=
specifier|inline
name|timeval
modifier|&
name|operator
name|+=
parameter_list|(
name|timeval
modifier|&
name|t1
parameter_list|,
name|int
name|ms
parameter_list|)
block|{
name|t1
operator|.
name|tv_sec
operator|+=
name|ms
operator|/
literal|1000
expr_stmt|;
name|t1
operator|.
name|tv_usec
operator|+=
name|ms
operator|%
literal|1000
operator|*
literal|1000
expr_stmt|;
return|return
name|normalizedTimeval
argument_list|(
name|t1
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|operator +
specifier|inline
name|timeval
name|operator
name|+
parameter_list|(
specifier|const
name|timeval
modifier|&
name|t1
parameter_list|,
name|int
name|ms
parameter_list|)
block|{
name|timeval
name|t2
init|=
name|t1
decl_stmt|;
return|return
name|t2
operator|+=
name|ms
return|;
block|}
end_function
begin_function
DECL|function|roundToMillisecond
specifier|static
name|timeval
name|roundToMillisecond
parameter_list|(
name|timeval
name|val
parameter_list|)
block|{
comment|// always round up
comment|// worst case scenario is that the first trigger of a 1-ms timer is 0.999 ms late
name|int
name|us
init|=
name|val
operator|.
name|tv_usec
operator|%
literal|1000
decl_stmt|;
name|val
operator|.
name|tv_usec
operator|+=
literal|1000
operator|-
name|us
expr_stmt|;
return|return
name|normalizedTimeval
argument_list|(
name|val
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*   Returns the time to wait for the next timer, or null if no timers   are waiting. */
end_comment
begin_function
DECL|function|timerWait
name|bool
name|QTimerInfoList
operator|::
name|timerWait
parameter_list|(
name|timeval
modifier|&
name|tm
parameter_list|)
block|{
name|timeval
name|currentTime
init|=
name|updateCurrentTime
argument_list|()
decl_stmt|;
name|repairTimersIfNeeded
argument_list|()
expr_stmt|;
comment|// Find first waiting timer not already active
name|QTimerInfo
modifier|*
name|t
init|=
literal|0
decl_stmt|;
for|for
control|(
name|QTimerInfoList
operator|::
name|const_iterator
name|it
init|=
name|constBegin
argument_list|()
init|;
name|it
operator|!=
name|constEnd
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
if|if
condition|(
operator|!
operator|(
operator|*
name|it
operator|)
operator|->
name|activateRef
condition|)
block|{
name|t
operator|=
operator|*
name|it
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|t
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|currentTime
operator|<
name|t
operator|->
name|timeout
condition|)
block|{
comment|// time to wait
name|tm
operator|=
name|roundToMillisecond
argument_list|(
name|t
operator|->
name|timeout
operator|-
name|currentTime
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// no time to wait
name|tm
operator|.
name|tv_sec
operator|=
literal|0
expr_stmt|;
name|tm
operator|.
name|tv_usec
operator|=
literal|0
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|registerTimer
name|void
name|QTimerInfoList
operator|::
name|registerTimer
parameter_list|(
name|int
name|timerId
parameter_list|,
name|int
name|interval
parameter_list|,
name|Qt
operator|::
name|TimerType
name|timerType
parameter_list|,
name|QObject
modifier|*
name|object
parameter_list|)
block|{
name|QTimerInfo
modifier|*
name|t
init|=
operator|new
name|QTimerInfo
decl_stmt|;
name|t
operator|->
name|id
operator|=
name|timerId
expr_stmt|;
name|t
operator|->
name|interval
operator|=
name|interval
expr_stmt|;
name|t
operator|->
name|timerType
operator|=
name|timerType
expr_stmt|;
name|t
operator|->
name|timeout
operator|=
name|updateCurrentTime
argument_list|()
operator|+
name|t
operator|->
name|interval
expr_stmt|;
name|t
operator|->
name|obj
operator|=
name|object
expr_stmt|;
name|t
operator|->
name|activateRef
operator|=
literal|0
expr_stmt|;
name|timerInsert
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|unregisterTimer
name|bool
name|QTimerInfoList
operator|::
name|unregisterTimer
parameter_list|(
name|int
name|timerId
parameter_list|)
block|{
comment|// set timer inactive
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|register
name|QTimerInfo
modifier|*
name|t
init|=
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|->
name|id
operator|==
name|timerId
condition|)
block|{
comment|// found it
name|removeAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|t
operator|==
name|firstTimerInfo
condition|)
name|firstTimerInfo
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|t
operator|->
name|activateRef
condition|)
operator|*
operator|(
name|t
operator|->
name|activateRef
operator|)
operator|=
literal|0
expr_stmt|;
operator|delete
name|t
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
comment|// id not found
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|unregisterTimers
name|bool
name|QTimerInfoList
operator|::
name|unregisterTimers
parameter_list|(
name|QObject
modifier|*
name|object
parameter_list|)
block|{
if|if
condition|(
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|register
name|QTimerInfo
modifier|*
name|t
init|=
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|->
name|obj
operator|==
name|object
condition|)
block|{
comment|// object found
name|removeAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|t
operator|==
name|firstTimerInfo
condition|)
name|firstTimerInfo
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|t
operator|->
name|activateRef
condition|)
operator|*
operator|(
name|t
operator|->
name|activateRef
operator|)
operator|=
literal|0
expr_stmt|;
operator|delete
name|t
expr_stmt|;
comment|// move back one so that we don't skip the new current item
operator|--
name|i
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|registeredTimers
name|QList
argument_list|<
name|QAbstractEventDispatcher
operator|::
name|TimerInfo
argument_list|>
name|QTimerInfoList
operator|::
name|registeredTimers
parameter_list|(
name|QObject
modifier|*
name|object
parameter_list|)
specifier|const
block|{
name|QList
argument_list|<
name|QAbstractEventDispatcher
operator|::
name|TimerInfo
argument_list|>
name|list
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|register
specifier|const
name|QTimerInfo
modifier|*
specifier|const
name|t
init|=
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|->
name|obj
operator|==
name|object
condition|)
name|list
operator|<<
name|QAbstractEventDispatcher
operator|::
name|TimerInfo
argument_list|(
name|t
operator|->
name|id
argument_list|,
name|t
operator|->
name|interval
argument_list|,
name|t
operator|->
name|timerType
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
end_function
begin_comment
comment|/*     Activate pending timers, returning how many where activated. */
end_comment
begin_function
DECL|function|activateTimers
name|int
name|QTimerInfoList
operator|::
name|activateTimers
parameter_list|()
block|{
if|if
condition|(
name|qt_disable_lowpriority_timers
operator|||
name|isEmpty
argument_list|()
condition|)
return|return
literal|0
return|;
comment|// nothing to do
name|int
name|n_act
init|=
literal|0
decl_stmt|,
name|maxCount
init|=
literal|0
decl_stmt|;
name|firstTimerInfo
operator|=
literal|0
expr_stmt|;
name|timeval
name|currentTime
init|=
name|updateCurrentTime
argument_list|()
decl_stmt|;
name|repairTimersIfNeeded
argument_list|()
expr_stmt|;
comment|// Find out how many timer have expired
for|for
control|(
name|QTimerInfoList
operator|::
name|const_iterator
name|it
init|=
name|constBegin
argument_list|()
init|;
name|it
operator|!=
name|constEnd
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
if|if
condition|(
name|currentTime
operator|<
operator|(
operator|*
name|it
operator|)
operator|->
name|timeout
condition|)
break|break;
name|maxCount
operator|++
expr_stmt|;
block|}
comment|//fire the timers.
while|while
condition|(
name|maxCount
operator|--
condition|)
block|{
if|if
condition|(
name|isEmpty
argument_list|()
condition|)
break|break;
name|QTimerInfo
modifier|*
name|currentTimerInfo
init|=
name|first
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentTime
operator|<
name|currentTimerInfo
operator|->
name|timeout
condition|)
break|break;
comment|// no timer has expired
if|if
condition|(
operator|!
name|firstTimerInfo
condition|)
block|{
name|firstTimerInfo
operator|=
name|currentTimerInfo
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|firstTimerInfo
operator|==
name|currentTimerInfo
condition|)
block|{
comment|// avoid sending the same timer multiple times
break|break;
block|}
elseif|else
if|if
condition|(
name|currentTimerInfo
operator|->
name|interval
operator|<
name|firstTimerInfo
operator|->
name|interval
operator|||
name|currentTimerInfo
operator|->
name|interval
operator|==
name|firstTimerInfo
operator|->
name|interval
condition|)
block|{
name|firstTimerInfo
operator|=
name|currentTimerInfo
expr_stmt|;
block|}
comment|// remove from list
name|removeFirst
argument_list|()
expr_stmt|;
comment|// determine next timeout time
name|currentTimerInfo
operator|->
name|timeout
operator|+=
name|currentTimerInfo
operator|->
name|interval
expr_stmt|;
if|if
condition|(
name|currentTimerInfo
operator|->
name|timeout
operator|<
name|currentTime
condition|)
name|currentTimerInfo
operator|->
name|timeout
operator|=
name|currentTime
operator|+
name|currentTimerInfo
operator|->
name|interval
expr_stmt|;
comment|// reinsert timer
name|timerInsert
argument_list|(
name|currentTimerInfo
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentTimerInfo
operator|->
name|interval
operator|>
literal|0
condition|)
name|n_act
operator|++
expr_stmt|;
if|if
condition|(
operator|!
name|currentTimerInfo
operator|->
name|activateRef
condition|)
block|{
comment|// send event, but don't allow it to recurse
name|currentTimerInfo
operator|->
name|activateRef
operator|=
operator|&
name|currentTimerInfo
expr_stmt|;
name|QTimerEvent
name|e
argument_list|(
name|currentTimerInfo
operator|->
name|id
argument_list|)
decl_stmt|;
name|QCoreApplication
operator|::
name|sendEvent
argument_list|(
name|currentTimerInfo
operator|->
name|obj
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentTimerInfo
condition|)
name|currentTimerInfo
operator|->
name|activateRef
operator|=
literal|0
expr_stmt|;
block|}
block|}
name|firstTimerInfo
operator|=
literal|0
expr_stmt|;
return|return
name|n_act
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
