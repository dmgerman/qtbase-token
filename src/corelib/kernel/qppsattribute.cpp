begin_unit
begin_comment
comment|/****************************************************************************  **  ** Copyright (C) 2013 BlackBerry Limited. All rights reserved.  ** Contact: http://www.qt-project.org/legal  **  ** This file is part of the QtCore module of the Qt Toolkit.  **  ** $QT_BEGIN_LICENSE:LGPL$  ** Commercial License Usage  ** Licensees holding valid commercial Qt licenses may use this file in  ** accordance with the commercial license agreement provided with the  ** Software or, alternatively, in accordance with the terms contained in  ** a written agreement between you and Digia.  For licensing terms and  ** conditions see http://qt.digia.com/licensing.  For further information  ** use the contact form at http://qt.digia.com/contact-us.  **  ** GNU Lesser General Public License Usage  ** Alternatively, this file may be used under the terms of the GNU Lesser  ** General Public License version 2.1 as published by the Free Software  ** Foundation and appearing in the file LICENSE.LGPL included in the  ** packaging of this file.  Please review the following information to  ** ensure the GNU Lesser General Public License version 2.1 requirements  ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.  **  ** In addition, as a special exception, Digia gives you certain additional  ** rights.  These rights are described in the Digia Qt LGPL Exception  ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.  **  ** GNU General Public License Usage  ** Alternatively, this file may be used under the terms of the GNU  ** General Public License version 3.0 as published by the Free Software  ** Foundation and appearing in the file LICENSE.GPL included in the  ** packaging of this file.  Please review the following information to  ** ensure the GNU General Public License version 3.0 requirements will be  ** met: http://www.gnu.org/copyleft/gpl.html.  **  **  ** $QT_END_LICENSE$  **  ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qppsattribute_p.h"
end_include
begin_include
include|#
directive|include
file|"qppsattributeprivate_p.h"
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_include
include|#
directive|include
file|<QVariant>
end_include
begin_comment
comment|///////////////////////////
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// QPpsAttributePrivate
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|///////////////////////////
end_comment
begin_constructor
DECL|function|QPpsAttributePrivate
name|QPpsAttributePrivate
operator|::
name|QPpsAttributePrivate
parameter_list|()
member_init_list|:
name|type
argument_list|(
name|QPpsAttribute
operator|::
name|None
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|createPpsAttribute
name|QPpsAttribute
name|QPpsAttributePrivate
operator|::
name|createPpsAttribute
parameter_list|(
name|int
name|value
parameter_list|,
name|QPpsAttribute
operator|::
name|Flags
name|flags
parameter_list|)
block|{
name|QPpsAttribute
name|attribute
decl_stmt|;
name|attribute
operator|.
name|d
operator|->
name|type
operator|=
name|QPpsAttribute
operator|::
name|Number
expr_stmt|;
name|attribute
operator|.
name|d
operator|->
name|data
operator|=
name|value
expr_stmt|;
name|attribute
operator|.
name|d
operator|->
name|flags
operator|=
name|flags
expr_stmt|;
return|return
name|attribute
return|;
block|}
end_function
begin_function
DECL|function|createPpsAttribute
name|QPpsAttribute
name|QPpsAttributePrivate
operator|::
name|createPpsAttribute
parameter_list|(
name|long
name|long
name|value
parameter_list|,
name|QPpsAttribute
operator|::
name|Flags
name|flags
parameter_list|)
block|{
name|QPpsAttribute
name|attribute
decl_stmt|;
name|attribute
operator|.
name|d
operator|->
name|type
operator|=
name|QPpsAttribute
operator|::
name|Number
expr_stmt|;
name|attribute
operator|.
name|d
operator|->
name|data
operator|=
name|value
expr_stmt|;
name|attribute
operator|.
name|d
operator|->
name|flags
operator|=
name|flags
expr_stmt|;
return|return
name|attribute
return|;
block|}
end_function
begin_function
DECL|function|createPpsAttribute
name|QPpsAttribute
name|QPpsAttributePrivate
operator|::
name|createPpsAttribute
parameter_list|(
name|double
name|value
parameter_list|,
name|QPpsAttribute
operator|::
name|Flags
name|flags
parameter_list|)
block|{
name|QPpsAttribute
name|attribute
decl_stmt|;
name|attribute
operator|.
name|d
operator|->
name|type
operator|=
name|QPpsAttribute
operator|::
name|Number
expr_stmt|;
name|attribute
operator|.
name|d
operator|->
name|data
operator|=
name|value
expr_stmt|;
name|attribute
operator|.
name|d
operator|->
name|flags
operator|=
name|flags
expr_stmt|;
return|return
name|attribute
return|;
block|}
end_function
begin_function
DECL|function|createPpsAttribute
name|QPpsAttribute
name|QPpsAttributePrivate
operator|::
name|createPpsAttribute
parameter_list|(
name|bool
name|value
parameter_list|,
name|QPpsAttribute
operator|::
name|Flags
name|flags
parameter_list|)
block|{
name|QPpsAttribute
name|attribute
decl_stmt|;
name|attribute
operator|.
name|d
operator|->
name|type
operator|=
name|QPpsAttribute
operator|::
name|Bool
expr_stmt|;
name|attribute
operator|.
name|d
operator|->
name|data
operator|=
name|value
expr_stmt|;
name|attribute
operator|.
name|d
operator|->
name|flags
operator|=
name|flags
expr_stmt|;
return|return
name|attribute
return|;
block|}
end_function
begin_function
DECL|function|createPpsAttribute
name|QPpsAttribute
name|QPpsAttributePrivate
operator|::
name|createPpsAttribute
parameter_list|(
specifier|const
name|QString
modifier|&
name|value
parameter_list|,
name|QPpsAttribute
operator|::
name|Flags
name|flags
parameter_list|)
block|{
name|QPpsAttribute
name|attribute
decl_stmt|;
name|attribute
operator|.
name|d
operator|->
name|type
operator|=
name|QPpsAttribute
operator|::
name|String
expr_stmt|;
name|attribute
operator|.
name|d
operator|->
name|data
operator|=
name|value
expr_stmt|;
name|attribute
operator|.
name|d
operator|->
name|flags
operator|=
name|flags
expr_stmt|;
return|return
name|attribute
return|;
block|}
end_function
begin_function
DECL|function|createPpsAttribute
name|QPpsAttribute
name|QPpsAttributePrivate
operator|::
name|createPpsAttribute
parameter_list|(
specifier|const
name|QPpsAttributeList
modifier|&
name|value
parameter_list|,
name|QPpsAttribute
operator|::
name|Flags
name|flags
parameter_list|)
block|{
name|QPpsAttribute
name|attribute
decl_stmt|;
name|attribute
operator|.
name|d
operator|->
name|type
operator|=
name|QPpsAttribute
operator|::
name|Array
expr_stmt|;
name|attribute
operator|.
name|d
operator|->
name|data
operator|=
name|QVariant
operator|::
name|fromValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|attribute
operator|.
name|d
operator|->
name|flags
operator|=
name|flags
expr_stmt|;
return|return
name|attribute
return|;
block|}
end_function
begin_function
DECL|function|createPpsAttribute
name|QPpsAttribute
name|QPpsAttributePrivate
operator|::
name|createPpsAttribute
parameter_list|(
specifier|const
name|QPpsAttributeMap
modifier|&
name|value
parameter_list|,
name|QPpsAttribute
operator|::
name|Flags
name|flags
parameter_list|)
block|{
name|QPpsAttribute
name|attribute
decl_stmt|;
name|attribute
operator|.
name|d
operator|->
name|type
operator|=
name|QPpsAttribute
operator|::
name|Object
expr_stmt|;
name|attribute
operator|.
name|d
operator|->
name|data
operator|=
name|QVariant
operator|::
name|fromValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|attribute
operator|.
name|d
operator|->
name|flags
operator|=
name|flags
expr_stmt|;
return|return
name|attribute
return|;
block|}
end_function
begin_comment
comment|///////////////////////////
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// QPpsAttribute
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|///////////////////////////
end_comment
begin_constructor
DECL|function|QPpsAttribute
name|QPpsAttribute
operator|::
name|QPpsAttribute
parameter_list|()
member_init_list|:
name|d
argument_list|(
operator|new
name|QPpsAttributePrivate
argument_list|()
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QPpsAttribute
name|QPpsAttribute
operator|::
name|~
name|QPpsAttribute
parameter_list|()
block|{ }
end_destructor
begin_constructor
DECL|function|QPpsAttribute
name|QPpsAttribute
operator|::
name|QPpsAttribute
parameter_list|(
specifier|const
name|QPpsAttribute
modifier|&
name|other
parameter_list|)
member_init_list|:
name|d
argument_list|(
name|other
operator|.
name|d
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|operator =
name|QPpsAttribute
modifier|&
name|QPpsAttribute
operator|::
name|operator
name|=
parameter_list|(
specifier|const
name|QPpsAttribute
modifier|&
name|other
parameter_list|)
block|{
name|d
operator|=
name|other
operator|.
name|d
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|Q_COMPILER_RVALUE_REFS
end_ifdef
begin_constructor
DECL|function|QPpsAttribute
name|QPpsAttribute
operator|::
name|QPpsAttribute
parameter_list|(
name|QPpsAttribute
modifier|&&
name|other
parameter_list|)
member_init_list|:
name|d
argument_list|(
name|other
operator|.
name|d
argument_list|)
block|{
name|other
operator|.
name|d
operator|->
name|type
operator|=
name|QPpsAttribute
operator|::
name|None
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|operator =
name|QPpsAttribute
modifier|&
name|QPpsAttribute
operator|::
name|operator
name|=
parameter_list|(
name|QPpsAttribute
modifier|&&
name|other
parameter_list|)
block|{
name|qSwap
argument_list|(
name|d
argument_list|,
name|other
operator|.
name|d
argument_list|)
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|operator ==
name|bool
name|QPpsAttribute
operator|::
name|operator
name|==
parameter_list|(
specifier|const
name|QPpsAttribute
modifier|&
name|other
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|type
argument_list|()
operator|!=
name|other
operator|.
name|type
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|flags
argument_list|()
operator|!=
name|other
operator|.
name|flags
argument_list|()
condition|)
return|return
literal|false
return|;
switch|switch
condition|(
name|type
argument_list|()
condition|)
block|{
case|case
name|QPpsAttribute
operator|::
name|Number
case|:
case|case
name|QPpsAttribute
operator|::
name|Bool
case|:
case|case
name|QPpsAttribute
operator|::
name|String
case|:
comment|// QVariant can compare double, int, longlong, bool, and QString for us.
return|return
name|d
operator|->
name|data
operator|==
name|other
operator|.
name|d
operator|->
name|data
return|;
case|case
name|QPpsAttribute
operator|::
name|Array
case|:
comment|// QVariant can't compare custom types (like QPpsAttributeList), always returning false.
comment|// So we pull the lists out manually and compare them.
return|return
name|toList
argument_list|()
operator|==
name|other
operator|.
name|toList
argument_list|()
return|;
case|case
name|QPpsAttribute
operator|::
name|Object
case|:
comment|// QVariant can't compare custom types (like QPpsAttributeMap), always returning false.
comment|// So we pull the maps out manually and compare them.
return|return
name|toMap
argument_list|()
operator|==
name|other
operator|.
name|toMap
argument_list|()
return|;
case|case
name|QPpsAttribute
operator|::
name|None
case|:
comment|// Both are "None" type, so the actual content doesn't matter.
return|return
literal|true
return|;
block|}
return|return
name|d
operator|->
name|data
operator|==
name|other
operator|.
name|d
operator|->
name|data
return|;
block|}
end_function
begin_function
DECL|function|isValid
name|bool
name|QPpsAttribute
operator|::
name|isValid
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|type
operator|!=
name|QPpsAttribute
operator|::
name|None
return|;
block|}
end_function
begin_function
DECL|function|type
name|QPpsAttribute
operator|::
name|Type
name|QPpsAttribute
operator|::
name|type
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|type
return|;
block|}
end_function
begin_function
DECL|function|isNumber
name|bool
name|QPpsAttribute
operator|::
name|isNumber
parameter_list|()
specifier|const
block|{
return|return
name|type
argument_list|()
operator|==
name|QPpsAttribute
operator|::
name|Number
return|;
block|}
end_function
begin_function
DECL|function|isBool
name|bool
name|QPpsAttribute
operator|::
name|isBool
parameter_list|()
specifier|const
block|{
return|return
name|type
argument_list|()
operator|==
name|QPpsAttribute
operator|::
name|Bool
return|;
block|}
end_function
begin_function
DECL|function|isString
name|bool
name|QPpsAttribute
operator|::
name|isString
parameter_list|()
specifier|const
block|{
return|return
name|type
argument_list|()
operator|==
name|QPpsAttribute
operator|::
name|String
return|;
block|}
end_function
begin_function
DECL|function|isArray
name|bool
name|QPpsAttribute
operator|::
name|isArray
parameter_list|()
specifier|const
block|{
return|return
name|type
argument_list|()
operator|==
name|QPpsAttribute
operator|::
name|Array
return|;
block|}
end_function
begin_function
DECL|function|isObject
name|bool
name|QPpsAttribute
operator|::
name|isObject
parameter_list|()
specifier|const
block|{
return|return
name|type
argument_list|()
operator|==
name|QPpsAttribute
operator|::
name|Object
return|;
block|}
end_function
begin_function
DECL|function|toDouble
name|double
name|QPpsAttribute
operator|::
name|toDouble
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|data
operator|.
name|toDouble
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|toLongLong
name|qlonglong
name|QPpsAttribute
operator|::
name|toLongLong
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|data
operator|.
name|toLongLong
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|toInt
name|int
name|QPpsAttribute
operator|::
name|toInt
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|data
operator|.
name|toInt
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|toBool
name|bool
name|QPpsAttribute
operator|::
name|toBool
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|data
operator|.
name|toBool
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|toString
name|QString
name|QPpsAttribute
operator|::
name|toString
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|data
operator|.
name|toString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|toList
name|QPpsAttributeList
name|QPpsAttribute
operator|::
name|toList
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|data
operator|.
name|value
argument_list|<
name|QPpsAttributeList
argument_list|>
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|toMap
name|QPpsAttributeMap
name|QPpsAttribute
operator|::
name|toMap
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|data
operator|.
name|value
argument_list|<
name|QPpsAttributeMap
argument_list|>
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|flags
name|QPpsAttribute
operator|::
name|Flags
name|QPpsAttribute
operator|::
name|flags
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|flags
return|;
block|}
end_function
begin_function
DECL|function|toVariant
name|QVariant
name|QPpsAttribute
operator|::
name|toVariant
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|data
return|;
block|}
end_function
begin_function
DECL|function|operator <<
name|QDebug
name|operator
name|<<
parameter_list|(
name|QDebug
name|dbg
parameter_list|,
specifier|const
name|QPpsAttribute
modifier|&
name|attribute
parameter_list|)
block|{
name|dbg
operator|<<
literal|"QPpsAttribute("
expr_stmt|;
switch|switch
condition|(
name|attribute
operator|.
name|type
argument_list|()
condition|)
block|{
case|case
name|QPpsAttribute
operator|::
name|Number
case|:
switch|switch
condition|(
name|attribute
operator|.
name|toVariant
argument_list|()
operator|.
name|type
argument_list|()
condition|)
block|{
case|case
name|QVariant
operator|::
name|Int
case|:
name|dbg
operator|<<
literal|"Number, "
operator|<<
name|attribute
operator|.
name|flags
argument_list|()
operator|<<
literal|", "
operator|<<
name|attribute
operator|.
name|toInt
argument_list|()
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|LongLong
case|:
name|dbg
operator|<<
literal|"Number, "
operator|<<
name|attribute
operator|.
name|flags
argument_list|()
operator|<<
literal|", "
operator|<<
name|attribute
operator|.
name|toLongLong
argument_list|()
expr_stmt|;
break|break;
default|default:
name|dbg
operator|<<
literal|"Number, "
operator|<<
name|attribute
operator|.
name|flags
argument_list|()
operator|<<
literal|", "
operator|<<
name|attribute
operator|.
name|toDouble
argument_list|()
expr_stmt|;
break|break;
block|}
break|break;
case|case
name|QPpsAttribute
operator|::
name|Bool
case|:
name|dbg
operator|<<
literal|"Bool, "
operator|<<
name|attribute
operator|.
name|flags
argument_list|()
operator|<<
literal|", "
operator|<<
name|attribute
operator|.
name|toBool
argument_list|()
expr_stmt|;
break|break;
case|case
name|QPpsAttribute
operator|::
name|String
case|:
name|dbg
operator|<<
literal|"String, "
operator|<<
name|attribute
operator|.
name|flags
argument_list|()
operator|<<
literal|", "
operator|<<
name|attribute
operator|.
name|toString
argument_list|()
expr_stmt|;
break|break;
case|case
name|QPpsAttribute
operator|::
name|Array
case|:
name|dbg
operator|<<
literal|"Array, "
operator|<<
name|attribute
operator|.
name|flags
argument_list|()
operator|<<
literal|", "
operator|<<
name|attribute
operator|.
name|toList
argument_list|()
expr_stmt|;
break|break;
case|case
name|QPpsAttribute
operator|::
name|Object
case|:
name|dbg
operator|<<
literal|"Object, "
operator|<<
name|attribute
operator|.
name|flags
argument_list|()
operator|<<
literal|", "
operator|<<
name|attribute
operator|.
name|toMap
argument_list|()
expr_stmt|;
break|break;
case|case
name|QPpsAttribute
operator|::
name|None
case|:
name|dbg
operator|<<
literal|"None"
expr_stmt|;
break|break;
block|}
name|dbg
operator|<<
literal|')'
expr_stmt|;
return|return
name|dbg
return|;
block|}
end_function
end_unit
