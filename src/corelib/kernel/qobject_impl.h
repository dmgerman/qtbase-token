begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|Q_QDOC
end_ifndef
begin_ifndef
ifndef|#
directive|ifndef
name|QOBJECT_H
end_ifndef
begin_error
error|#
directive|error
error|Do not include qobject_impl.h directly
end_error
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
name|namespace
name|QtPrivate
block|{
comment|/*         Logic to statically generate the array of qMetaTypeId         ConnectionTypes<FunctionPointer<Signal>::Arguments>::types() returns an array         of int that is suitable for the types arguments of the connection functions.          The array only exist of all the types are declared as a metatype         (detected using the TypesAreDeclaredMetaType helper struct)         If one of the type is not declared, the function return 0 and the signal         cannot be used in queued connection.     */
ifndef|#
directive|ifndef
name|Q_COMPILER_VARIADIC_TEMPLATES
name|template
operator|<
name|typename
name|ArgList
operator|>
expr|struct
name|TypesAreDeclaredMetaType
block|{ enum
block|{
name|Value
operator|=
name|false
block|}
block|; }
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|TypesAreDeclaredMetaType
operator|<
name|void
operator|>
block|{ enum
block|{
name|Value
operator|=
name|true
block|}
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|Arg
operator|,
name|typename
name|Tail
operator|>
expr|struct
name|TypesAreDeclaredMetaType
operator|<
name|List
operator|<
name|Arg
operator|,
name|Tail
operator|>
expr|>
block|{ enum
block|{
name|Value
operator|=
name|QMetaTypeId2
operator|<
name|Arg
operator|>
operator|::
name|Defined
operator|&&
name|TypesAreDeclaredMetaType
operator|<
name|Tail
operator|>
operator|::
name|Value
block|}
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|ArgList
operator|,
name|bool
name|Declared
operator|=
name|TypesAreDeclaredMetaType
operator|<
name|ArgList
operator|>
operator|::
name|Value
operator|>
expr|struct
name|ConnectionTypes
block|{
specifier|static
specifier|const
name|int
operator|*
name|types
argument_list|()
block|{
return|return
literal|0
return|;
block|}
expr|}
block|;
name|template
operator|<
operator|>
expr|struct
name|ConnectionTypes
operator|<
name|void
block|,
name|true
operator|>
block|{
specifier|static
specifier|const
name|int
operator|*
name|types
argument_list|()
block|{
specifier|static
specifier|const
name|int
name|t
index|[
literal|1
index|]
operator|=
block|{
literal|0
block|}
block|;
return|return
name|t
return|;
block|}
expr|}
block|;
name|template
operator|<
name|typename
name|Arg1
operator|>
expr|struct
name|ConnectionTypes
operator|<
name|List
operator|<
name|Arg1
block|,
name|void
operator|>
block|,
name|true
operator|>
block|{
specifier|static
specifier|const
name|int
operator|*
name|types
argument_list|()
block|{
specifier|static
specifier|const
name|int
name|t
index|[
literal|2
index|]
operator|=
block|{
name|QtPrivate
operator|::
name|QMetaTypeIdHelper
operator|<
name|Arg1
operator|>
operator|::
name|qt_metatype_id
argument_list|()
block|,
literal|0
block|}
block|;
return|return
name|t
return|;
block|}
expr|}
block|;
name|template
operator|<
name|typename
name|Arg1
block|,
name|typename
name|Arg2
operator|>
expr|struct
name|ConnectionTypes
operator|<
name|List
operator|<
name|Arg1
block|,
name|List
operator|<
name|Arg2
block|,
name|void
operator|>
expr|>
block|,
name|true
operator|>
block|{
specifier|static
specifier|const
name|int
operator|*
name|types
argument_list|()
block|{
specifier|static
specifier|const
name|int
name|t
index|[
literal|3
index|]
operator|=
block|{
name|QtPrivate
operator|::
name|QMetaTypeIdHelper
operator|<
name|Arg1
operator|>
operator|::
name|qt_metatype_id
argument_list|()
block|,
name|QtPrivate
operator|::
name|QMetaTypeIdHelper
operator|<
name|Arg2
operator|>
operator|::
name|qt_metatype_id
argument_list|()
block|,
literal|0
block|}
block|;
return|return
name|t
return|;
block|}
expr|}
block|;
name|template
operator|<
name|typename
name|Arg1
block|,
name|typename
name|Arg2
block|,
name|typename
name|Arg3
operator|>
expr|struct
name|ConnectionTypes
operator|<
name|List
operator|<
name|Arg1
block|,
name|List
operator|<
name|Arg2
block|,
name|List
operator|<
name|Arg3
block|,
name|void
operator|>
expr|>
operator|>
block|,
name|true
operator|>
block|{
specifier|static
specifier|const
name|int
operator|*
name|types
argument_list|()
block|{
specifier|static
specifier|const
name|int
name|t
index|[
literal|4
index|]
operator|=
block|{
name|QtPrivate
operator|::
name|QMetaTypeIdHelper
operator|<
name|Arg1
operator|>
operator|::
name|qt_metatype_id
argument_list|()
block|,
name|QtPrivate
operator|::
name|QMetaTypeIdHelper
operator|<
name|Arg2
operator|>
operator|::
name|qt_metatype_id
argument_list|()
block|,
name|QtPrivate
operator|::
name|QMetaTypeIdHelper
operator|<
name|Arg3
operator|>
operator|::
name|qt_metatype_id
argument_list|()
block|,
literal|0
block|}
block|;
return|return
name|t
return|;
block|}
expr|}
block|;
name|template
operator|<
name|typename
name|Arg1
block|,
name|typename
name|Arg2
block|,
name|typename
name|Arg3
block|,
name|typename
name|Arg4
operator|>
expr|struct
name|ConnectionTypes
operator|<
name|List
operator|<
name|Arg1
block|,
name|List
operator|<
name|Arg2
block|,
name|List
operator|<
name|Arg3
block|,
name|List
operator|<
name|Arg4
block|,
name|void
operator|>
expr|>
operator|>
expr|>
block|,
name|true
operator|>
block|{
specifier|static
specifier|const
name|int
operator|*
name|types
argument_list|()
block|{
specifier|static
specifier|const
name|int
name|t
index|[
literal|4
index|]
operator|=
block|{
name|QtPrivate
operator|::
name|QMetaTypeIdHelper
operator|<
name|Arg1
operator|>
operator|::
name|qt_metatype_id
argument_list|()
block|,
name|QtPrivate
operator|::
name|QMetaTypeIdHelper
operator|<
name|Arg2
operator|>
operator|::
name|qt_metatype_id
argument_list|()
block|,
name|QtPrivate
operator|::
name|QMetaTypeIdHelper
operator|<
name|Arg3
operator|>
operator|::
name|qt_metatype_id
argument_list|()
block|,
name|QtPrivate
operator|::
name|QMetaTypeIdHelper
operator|<
name|Arg4
operator|>
operator|::
name|qt_metatype_id
argument_list|()
block|,
literal|0
block|}
block|;
return|return
name|t
return|;
block|}
expr|}
block|;
name|template
operator|<
name|typename
name|Arg1
block|,
name|typename
name|Arg2
block|,
name|typename
name|Arg3
block|,
name|typename
name|Arg4
block|,
name|typename
name|Arg5
operator|>
expr|struct
name|ConnectionTypes
operator|<
name|List
operator|<
name|Arg1
block|,
name|List
operator|<
name|Arg2
block|,
name|List
operator|<
name|Arg3
block|,
name|List
operator|<
name|Arg4
block|,
name|List
operator|<
name|Arg5
block|,
name|void
operator|>
expr|>
operator|>
expr|>
operator|>
block|,
name|true
operator|>
block|{
specifier|static
specifier|const
name|int
operator|*
name|types
argument_list|()
block|{
specifier|static
specifier|const
name|int
name|t
index|[
literal|4
index|]
operator|=
block|{
name|QtPrivate
operator|::
name|QMetaTypeIdHelper
operator|<
name|Arg1
operator|>
operator|::
name|qt_metatype_id
argument_list|()
block|,
name|QtPrivate
operator|::
name|QMetaTypeIdHelper
operator|<
name|Arg2
operator|>
operator|::
name|qt_metatype_id
argument_list|()
block|,
name|QtPrivate
operator|::
name|QMetaTypeIdHelper
operator|<
name|Arg3
operator|>
operator|::
name|qt_metatype_id
argument_list|()
block|,
name|QtPrivate
operator|::
name|QMetaTypeIdHelper
operator|<
name|Arg4
operator|>
operator|::
name|qt_metatype_id
argument_list|()
block|,
name|QtPrivate
operator|::
name|QMetaTypeIdHelper
operator|<
name|Arg5
operator|>
operator|::
name|qt_metatype_id
argument_list|()
block|,
literal|0
block|}
block|;
return|return
name|t
return|;
block|}
expr|}
block|;
name|template
operator|<
name|typename
name|Arg1
block|,
name|typename
name|Arg2
block|,
name|typename
name|Arg3
block|,
name|typename
name|Arg4
block|,
name|typename
name|Arg5
block|,
name|typename
name|Arg6
operator|>
expr|struct
name|ConnectionTypes
operator|<
name|List
operator|<
name|Arg1
block|,
name|List
operator|<
name|Arg2
block|,
name|List
operator|<
name|Arg3
block|,
name|List
operator|<
name|Arg4
block|,
name|List
operator|<
name|Arg5
block|,
name|List
operator|<
name|Arg6
block|,
name|void
operator|>
expr|>
operator|>
expr|>
operator|>
expr|>
block|,
name|true
operator|>
block|{
specifier|static
specifier|const
name|int
operator|*
name|types
argument_list|()
block|{
specifier|static
specifier|const
name|int
name|t
index|[
literal|4
index|]
operator|=
block|{
name|QtPrivate
operator|::
name|QMetaTypeIdHelper
operator|<
name|Arg1
operator|>
operator|::
name|qt_metatype_id
argument_list|()
block|,
name|QtPrivate
operator|::
name|QMetaTypeIdHelper
operator|<
name|Arg2
operator|>
operator|::
name|qt_metatype_id
argument_list|()
block|,
name|QtPrivate
operator|::
name|QMetaTypeIdHelper
operator|<
name|Arg3
operator|>
operator|::
name|qt_metatype_id
argument_list|()
block|,
name|QtPrivate
operator|::
name|QMetaTypeIdHelper
operator|<
name|Arg4
operator|>
operator|::
name|qt_metatype_id
argument_list|()
block|,
name|QtPrivate
operator|::
name|QMetaTypeIdHelper
operator|<
name|Arg5
operator|>
operator|::
name|qt_metatype_id
argument_list|()
block|,
name|QtPrivate
operator|::
name|QMetaTypeIdHelper
operator|<
name|Arg6
operator|>
operator|::
name|qt_metatype_id
argument_list|()
block|,
literal|0
block|}
block|;
return|return
name|t
return|;
block|}
expr|}
block|;
else|#
directive|else
name|template
operator|<
name|typename
name|ArgList
operator|>
expr|struct
name|TypesAreDeclaredMetaType
block|{ enum
block|{
name|Value
operator|=
name|false
block|}
block|; }
block|;
name|template
operator|<
operator|>
expr|struct
name|TypesAreDeclaredMetaType
operator|<
name|List
operator|<
operator|>>
block|{ enum
block|{
name|Value
operator|=
name|true
block|}
block|; }
block|;
name|template
operator|<
name|typename
name|Arg
block|,
name|typename
operator|...
name|Tail
operator|>
expr|struct
name|TypesAreDeclaredMetaType
operator|<
name|List
operator|<
name|Arg
block|,
name|Tail
operator|...
operator|>
expr|>
block|{ enum
block|{
name|Value
operator|=
name|QMetaTypeId2
operator|<
name|Arg
operator|>
operator|::
name|Defined
operator|&&
name|TypesAreDeclaredMetaType
operator|<
name|List
operator|<
name|Tail
operator|...
operator|>>
operator|::
name|Value
block|}
block|; }
block|;
name|template
operator|<
name|typename
name|ArgList
block|,
name|bool
name|Declared
operator|=
name|TypesAreDeclaredMetaType
operator|<
name|ArgList
operator|>
operator|::
name|Value
operator|>
expr|struct
name|ConnectionTypes
block|{
specifier|static
specifier|const
name|int
operator|*
name|types
argument_list|()
block|{
return|return
literal|0
return|;
block|}
expr|}
block|;
name|template
operator|<
name|typename
operator|...
name|Args
operator|>
expr|struct
name|ConnectionTypes
operator|<
name|List
operator|<
name|Args
operator|...
operator|>
block|,
name|true
operator|>
block|{
specifier|static
specifier|const
name|int
operator|*
name|types
argument_list|()
block|{
specifier|static
specifier|const
name|int
name|t
index|[
sizeof|sizeof...
argument_list|(
name|Args
argument_list|)
operator|+
literal|1
index|]
operator|=
block|{
operator|(
name|QtPrivate
operator|::
name|QMetaTypeIdHelper
operator|<
name|Args
operator|>
operator|::
name|qt_metatype_id
argument_list|()
operator|)
operator|...
block|,
literal|0
block|}
block|;
return|return
name|t
return|;
block|}
expr|}
block|;
endif|#
directive|endif
block|}
name|QT_END_NAMESPACE
name|QT_END_HEADER
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
end_unit
