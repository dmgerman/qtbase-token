begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qplatformdefs.h"
end_include
begin_include
include|#
directive|include
file|"qcoreapplication.h"
end_include
begin_include
include|#
directive|include
file|"qpair.h"
end_include
begin_include
include|#
directive|include
file|"qsocketnotifier.h"
end_include
begin_include
include|#
directive|include
file|"qthread.h"
end_include
begin_include
include|#
directive|include
file|"qelapsedtimer.h"
end_include
begin_include
include|#
directive|include
file|"qeventdispatcher_unix_p.h"
end_include
begin_include
include|#
directive|include
file|<private/qthread_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qcoreapplication_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qcore_unix_p.h>
end_include
begin_include
include|#
directive|include
file|<errno.h>
end_include
begin_include
include|#
directive|include
file|<stdio.h>
end_include
begin_include
include|#
directive|include
file|<stdlib.h>
end_include
begin_comment
comment|// VxWorks doesn't correctly set the _POSIX_... options
end_comment
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_VXWORKS
argument_list|)
end_if
begin_if
if|#
directive|if
name|defined
argument_list|(
name|_POSIX_MONOTONIC_CLOCK
argument_list|)
operator|&&
operator|(
name|_POSIX_MONOTONIC_CLOCK
operator|<=
literal|0
operator|)
end_if
begin_undef
DECL|macro|_POSIX_MONOTONIC_CLOCK
undef|#
directive|undef
name|_POSIX_MONOTONIC_CLOCK
end_undef
begin_define
DECL|macro|_POSIX_MONOTONIC_CLOCK
define|#
directive|define
name|_POSIX_MONOTONIC_CLOCK
value|1
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<pipeDrv.h>
end_include
begin_include
include|#
directive|include
file|<selectLib.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
operator|(
name|_POSIX_MONOTONIC_CLOCK
operator|-
literal|0
operator|<=
literal|0
operator|)
operator|||
name|defined
argument_list|(
name|QT_BOOTSTRAPPED
argument_list|)
end_if
begin_include
include|#
directive|include
file|<sys/times.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|qt_disable_lowpriority_timers
name|Q_CORE_EXPORT
name|bool
name|qt_disable_lowpriority_timers
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_comment
comment|/*****************************************************************************  UNIX signal handling  *****************************************************************************/
end_comment
begin_decl_stmt
DECL|variable|signal_received
specifier|static
name|sig_atomic_t
name|signal_received
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|signals_fired
specifier|static
name|sig_atomic_t
name|signals_fired
index|[
name|NSIG
index|]
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|signalHandler
specifier|static
name|void
name|signalHandler
parameter_list|(
name|int
name|sig
parameter_list|)
block|{
name|signals_fired
index|[
name|sig
index|]
operator|=
literal|1
expr_stmt|;
name|signal_received
operator|=
literal|1
expr_stmt|;
block|}
end_function
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_INTEGRITY
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_OS_VXWORKS
argument_list|)
end_if
begin_function
DECL|function|initThreadPipeFD
specifier|static
name|void
name|initThreadPipeFD
parameter_list|(
name|int
name|fd
parameter_list|)
block|{
name|int
name|ret
init|=
name|fcntl
argument_list|(
name|fd
argument_list|,
name|F_SETFD
argument_list|,
name|FD_CLOEXEC
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|==
operator|-
literal|1
condition|)
name|perror
argument_list|(
literal|"QEventDispatcherUNIXPrivate: Unable to init thread pipe"
argument_list|)
expr_stmt|;
name|int
name|flags
init|=
name|fcntl
argument_list|(
name|fd
argument_list|,
name|F_GETFL
argument_list|)
decl_stmt|;
if|if
condition|(
name|flags
operator|==
operator|-
literal|1
condition|)
name|perror
argument_list|(
literal|"QEventDispatcherUNIXPrivate: Unable to get flags on thread pipe"
argument_list|)
expr_stmt|;
name|ret
operator|=
name|fcntl
argument_list|(
name|fd
argument_list|,
name|F_SETFL
argument_list|,
name|flags
operator||
name|O_NONBLOCK
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
operator|==
operator|-
literal|1
condition|)
name|perror
argument_list|(
literal|"QEventDispatcherUNIXPrivate: Unable to set flags on thread pipe"
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_constructor
DECL|function|QEventDispatcherUNIXPrivate
name|QEventDispatcherUNIXPrivate
operator|::
name|QEventDispatcherUNIXPrivate
parameter_list|()
block|{
specifier|extern
name|Qt
operator|::
name|HANDLE
name|qt_application_thread_id
decl_stmt|;
name|mainThread
operator|=
operator|(
name|QThread
operator|::
name|currentThreadId
argument_list|()
operator|==
name|qt_application_thread_id
operator|)
expr_stmt|;
name|bool
name|pipefail
init|=
literal|false
decl_stmt|;
comment|// initialize the common parts of the event loop
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_NACL
argument_list|)
comment|// do nothing.
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_INTEGRITY
argument_list|)
comment|// INTEGRITY doesn't like a "select" on pipes, so use socketpair instead
if|if
condition|(
name|socketpair
argument_list|(
name|AF_INET
argument_list|,
name|SOCK_STREAM
argument_list|,
literal|0
argument_list|,
name|thread_pipe
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
name|perror
argument_list|(
literal|"QEventDispatcherUNIXPrivate(): Unable to create socket pair"
argument_list|)
expr_stmt|;
name|pipefail
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|initThreadPipeFD
argument_list|(
name|thread_pipe
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|initThreadPipeFD
argument_list|(
name|thread_pipe
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_VXWORKS
argument_list|)
name|char
name|name
index|[
literal|20
index|]
decl_stmt|;
name|qsnprintf
argument_list|(
name|name
argument_list|,
sizeof|sizeof
argument_list|(
name|name
argument_list|)
argument_list|,
literal|"/pipe/qt_%08x"
argument_list|,
name|int
argument_list|(
name|taskIdCurrent
argument_list|)
argument_list|)
expr_stmt|;
comment|// make sure there is no pipe with this name
name|pipeDevDelete
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// create the pipe
if|if
condition|(
name|pipeDevCreate
argument_list|(
name|name
argument_list|,
literal|128
comment|/*maxMsg*/
argument_list|,
literal|1
comment|/*maxLength*/
argument_list|)
operator|!=
name|OK
condition|)
block|{
name|perror
argument_list|(
literal|"QEventDispatcherUNIXPrivate(): Unable to create thread pipe device"
argument_list|)
expr_stmt|;
name|pipefail
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|(
name|thread_pipe
index|[
literal|0
index|]
operator|=
name|open
argument_list|(
name|name
argument_list|,
name|O_RDWR
argument_list|,
literal|0
argument_list|)
operator|)
operator|<
literal|0
condition|)
block|{
name|perror
argument_list|(
literal|"QEventDispatcherUNIXPrivate(): Unable to create thread pipe"
argument_list|)
expr_stmt|;
name|pipefail
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|initThreadPipeFD
argument_list|(
name|thread_pipe
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|thread_pipe
index|[
literal|1
index|]
operator|=
name|thread_pipe
index|[
literal|0
index|]
expr_stmt|;
block|}
block|}
else|#
directive|else
if|if
condition|(
name|qt_safe_pipe
argument_list|(
name|thread_pipe
argument_list|,
name|O_NONBLOCK
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
name|perror
argument_list|(
literal|"QEventDispatcherUNIXPrivate(): Unable to create thread pipe"
argument_list|)
expr_stmt|;
name|pipefail
operator|=
literal|true
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
name|pipefail
condition|)
name|qFatal
argument_list|(
literal|"QEventDispatcherUNIXPrivate(): Can not continue without a thread pipe"
argument_list|)
expr_stmt|;
name|sn_highest
operator|=
operator|-
literal|1
expr_stmt|;
name|interrupt
operator|=
literal|false
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QEventDispatcherUNIXPrivate
name|QEventDispatcherUNIXPrivate
operator|::
name|~
name|QEventDispatcherUNIXPrivate
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_NACL
argument_list|)
comment|// do nothing.
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_VXWORKS
argument_list|)
name|close
argument_list|(
name|thread_pipe
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|char
name|name
index|[
literal|20
index|]
decl_stmt|;
name|qsnprintf
argument_list|(
name|name
argument_list|,
sizeof|sizeof
argument_list|(
name|name
argument_list|)
argument_list|,
literal|"/pipe/qt_%08x"
argument_list|,
name|int
argument_list|(
name|taskIdCurrent
argument_list|)
argument_list|)
expr_stmt|;
name|pipeDevDelete
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
expr_stmt|;
else|#
directive|else
comment|// cleanup the common parts of the event loop
name|close
argument_list|(
name|thread_pipe
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|thread_pipe
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// cleanup timers
name|qDeleteAll
argument_list|(
name|timerList
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|doSelect
name|int
name|QEventDispatcherUNIXPrivate
operator|::
name|doSelect
parameter_list|(
name|QEventLoop
operator|::
name|ProcessEventsFlags
name|flags
parameter_list|,
name|timeval
modifier|*
name|timeout
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QEventDispatcherUNIX
argument_list|)
expr_stmt|;
comment|// needed in QEventDispatcherUNIX::select()
name|timerList
operator|.
name|updateCurrentTime
argument_list|()
expr_stmt|;
name|int
name|nsel
decl_stmt|;
do|do
block|{
if|if
condition|(
name|mainThread
condition|)
block|{
while|while
condition|(
name|signal_received
condition|)
block|{
name|signal_received
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NSIG
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|signals_fired
index|[
name|i
index|]
condition|)
block|{
name|signals_fired
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
emit|emit
name|QCoreApplication
operator|::
name|instance
argument_list|()
operator|->
name|unixSignal
argument_list|(
name|i
argument_list|)
emit|;
block|}
block|}
block|}
block|}
comment|// Process timers and socket notifiers - the common UNIX stuff
name|int
name|highest
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|QEventLoop
operator|::
name|ExcludeSocketNotifiers
operator|)
operator|&&
operator|(
name|sn_highest
operator|>=
literal|0
operator|)
condition|)
block|{
comment|// return the highest fd we can wait for input on
name|sn_vec
index|[
literal|0
index|]
operator|.
name|select_fds
operator|=
name|sn_vec
index|[
literal|0
index|]
operator|.
name|enabled_fds
expr_stmt|;
name|sn_vec
index|[
literal|1
index|]
operator|.
name|select_fds
operator|=
name|sn_vec
index|[
literal|1
index|]
operator|.
name|enabled_fds
expr_stmt|;
name|sn_vec
index|[
literal|2
index|]
operator|.
name|select_fds
operator|=
name|sn_vec
index|[
literal|2
index|]
operator|.
name|enabled_fds
expr_stmt|;
name|highest
operator|=
name|sn_highest
expr_stmt|;
block|}
else|else
block|{
name|FD_ZERO
argument_list|(
operator|&
name|sn_vec
index|[
literal|0
index|]
operator|.
name|select_fds
argument_list|)
expr_stmt|;
name|FD_ZERO
argument_list|(
operator|&
name|sn_vec
index|[
literal|1
index|]
operator|.
name|select_fds
argument_list|)
expr_stmt|;
name|FD_ZERO
argument_list|(
operator|&
name|sn_vec
index|[
literal|2
index|]
operator|.
name|select_fds
argument_list|)
expr_stmt|;
block|}
name|FD_SET
argument_list|(
name|thread_pipe
index|[
literal|0
index|]
argument_list|,
operator|&
name|sn_vec
index|[
literal|0
index|]
operator|.
name|select_fds
argument_list|)
expr_stmt|;
name|highest
operator|=
name|qMax
argument_list|(
name|highest
argument_list|,
name|thread_pipe
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|nsel
operator|=
name|q
operator|->
name|select
argument_list|(
name|highest
operator|+
literal|1
argument_list|,
operator|&
name|sn_vec
index|[
literal|0
index|]
operator|.
name|select_fds
argument_list|,
operator|&
name|sn_vec
index|[
literal|1
index|]
operator|.
name|select_fds
argument_list|,
operator|&
name|sn_vec
index|[
literal|2
index|]
operator|.
name|select_fds
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|nsel
operator|==
operator|-
literal|1
operator|&&
operator|(
name|errno
operator|==
name|EINTR
operator|||
name|errno
operator|==
name|EAGAIN
operator|)
condition|)
do|;
if|if
condition|(
name|nsel
operator|==
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|errno
operator|==
name|EBADF
condition|)
block|{
comment|// it seems a socket notifier has a bad fd... find out
comment|// which one it is and disable it
name|fd_set
name|fdset
decl_stmt|;
name|timeval
name|tm
decl_stmt|;
name|tm
operator|.
name|tv_sec
operator|=
name|tm
operator|.
name|tv_usec
operator|=
literal|0l
expr_stmt|;
for|for
control|(
name|int
name|type
init|=
literal|0
init|;
name|type
operator|<
literal|3
condition|;
operator|++
name|type
control|)
block|{
name|QSockNotType
operator|::
name|List
modifier|&
name|list
init|=
name|sn_vec
index|[
name|type
index|]
operator|.
name|list
decl_stmt|;
if|if
condition|(
name|list
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
continue|continue;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QSockNot
modifier|*
name|sn
init|=
name|list
index|[
name|i
index|]
decl_stmt|;
name|FD_ZERO
argument_list|(
operator|&
name|fdset
argument_list|)
expr_stmt|;
name|FD_SET
argument_list|(
name|sn
operator|->
name|fd
argument_list|,
operator|&
name|fdset
argument_list|)
expr_stmt|;
name|int
name|ret
init|=
operator|-
literal|1
decl_stmt|;
do|do
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
literal|0
case|:
comment|// read
name|ret
operator|=
name|select
argument_list|(
name|sn
operator|->
name|fd
operator|+
literal|1
argument_list|,
operator|&
name|fdset
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|&
name|tm
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
comment|// write
name|ret
operator|=
name|select
argument_list|(
name|sn
operator|->
name|fd
operator|+
literal|1
argument_list|,
literal|0
argument_list|,
operator|&
name|fdset
argument_list|,
literal|0
argument_list|,
operator|&
name|tm
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
comment|// except
name|ret
operator|=
name|select
argument_list|(
name|sn
operator|->
name|fd
operator|+
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|&
name|fdset
argument_list|,
operator|&
name|tm
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
do|while
condition|(
name|ret
operator|==
operator|-
literal|1
operator|&&
operator|(
name|errno
operator|==
name|EINTR
operator|||
name|errno
operator|==
name|EAGAIN
operator|)
condition|)
do|;
if|if
condition|(
name|ret
operator|==
operator|-
literal|1
operator|&&
name|errno
operator|==
name|EBADF
condition|)
block|{
comment|// disable the invalid socket notifier
specifier|static
specifier|const
name|char
modifier|*
name|t
index|[]
init|=
block|{
literal|"Read"
block|,
literal|"Write"
block|,
literal|"Exception"
block|}
decl_stmt|;
name|qWarning
argument_list|(
literal|"QSocketNotifier: Invalid socket %d and type '%s', disabling..."
argument_list|,
name|sn
operator|->
name|fd
argument_list|,
name|t
index|[
name|type
index|]
argument_list|)
expr_stmt|;
name|sn
operator|->
name|obj
operator|->
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
comment|// EINVAL... shouldn't happen, so let's complain to stderr
comment|// and hope someone sends us a bug report
name|perror
argument_list|(
literal|"select"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// some other thread woke us up... consume the data on the thread pipe so that
comment|// select doesn't immediately return next time
name|int
name|nevents
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|nsel
operator|>
literal|0
operator|&&
name|FD_ISSET
argument_list|(
name|thread_pipe
index|[
literal|0
index|]
argument_list|,
operator|&
name|sn_vec
index|[
literal|0
index|]
operator|.
name|select_fds
argument_list|)
condition|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_VXWORKS
argument_list|)
name|char
name|c
index|[
literal|16
index|]
decl_stmt|;
operator|::
name|read
argument_list|(
name|thread_pipe
index|[
literal|0
index|]
argument_list|,
name|c
argument_list|,
sizeof|sizeof
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
operator|::
name|ioctl
argument_list|(
name|thread_pipe
index|[
literal|0
index|]
argument_list|,
name|FIOFLUSH
argument_list|,
literal|0
argument_list|)
expr_stmt|;
else|#
directive|else
name|char
name|c
index|[
literal|16
index|]
decl_stmt|;
while|while
condition|(
operator|::
name|read
argument_list|(
name|thread_pipe
index|[
literal|0
index|]
argument_list|,
name|c
argument_list|,
sizeof|sizeof
argument_list|(
name|c
argument_list|)
argument_list|)
operator|>
literal|0
condition|)
empty_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|wakeUps
operator|.
name|testAndSetRelease
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
condition|)
block|{
comment|// hopefully, this is dead code
name|qWarning
argument_list|(
literal|"QEventDispatcherUNIX: internal error, wakeUps.testAndSetRelease(1, 0) failed!"
argument_list|)
expr_stmt|;
block|}
operator|++
name|nevents
expr_stmt|;
block|}
comment|// activate socket notifiers
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|QEventLoop
operator|::
name|ExcludeSocketNotifiers
operator|)
operator|&&
name|nsel
operator|>
literal|0
operator|&&
name|sn_highest
operator|>=
literal|0
condition|)
block|{
comment|// if select says data is ready on any socket, then set the socket notifier
comment|// to pending
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|QSockNotType
operator|::
name|List
modifier|&
name|list
init|=
name|sn_vec
index|[
name|i
index|]
operator|.
name|list
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
name|QSockNot
modifier|*
name|sn
init|=
name|list
index|[
name|j
index|]
decl_stmt|;
if|if
condition|(
name|FD_ISSET
argument_list|(
name|sn
operator|->
name|fd
argument_list|,
operator|&
name|sn_vec
index|[
name|i
index|]
operator|.
name|select_fds
argument_list|)
condition|)
name|q
operator|->
name|setSocketNotifierPending
argument_list|(
name|sn
operator|->
name|obj
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
operator|(
name|nevents
operator|+
name|q
operator|->
name|activateSocketNotifiers
argument_list|()
operator|)
return|;
block|}
end_function
begin_comment
comment|/*  * Internal functions for manipulating timer data structures.  The  * timerBitVec array is used for keeping track of timer identifiers.  */
end_comment
begin_constructor
DECL|function|QTimerInfoList
name|QTimerInfoList
operator|::
name|QTimerInfoList
parameter_list|()
block|{
if|#
directive|if
operator|(
name|_POSIX_MONOTONIC_CLOCK
operator|-
literal|0
operator|<=
literal|0
operator|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_NACL
argument_list|)
if|if
condition|(
operator|!
name|QElapsedTimer
operator|::
name|isMonotonic
argument_list|()
condition|)
block|{
comment|// not using monotonic timers, initialize the timeChanged() machinery
name|previousTime
operator|=
name|qt_gettime
argument_list|()
expr_stmt|;
name|tms
name|unused
decl_stmt|;
name|previousTicks
operator|=
name|times
argument_list|(
operator|&
name|unused
argument_list|)
expr_stmt|;
name|ticksPerSecond
operator|=
name|sysconf
argument_list|(
name|_SC_CLK_TCK
argument_list|)
expr_stmt|;
name|msPerTick
operator|=
literal|1000
operator|/
name|ticksPerSecond
expr_stmt|;
block|}
else|else
block|{
comment|// detected monotonic timers
name|previousTime
operator|.
name|tv_sec
operator|=
name|previousTime
operator|.
name|tv_usec
operator|=
literal|0
expr_stmt|;
name|previousTicks
operator|=
literal|0
expr_stmt|;
name|ticksPerSecond
operator|=
literal|0
expr_stmt|;
name|msPerTick
operator|=
literal|0
expr_stmt|;
block|}
endif|#
directive|endif
name|firstTimerInfo
operator|=
literal|0
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|updateCurrentTime
name|timeval
name|QTimerInfoList
operator|::
name|updateCurrentTime
parameter_list|()
block|{
return|return
operator|(
name|currentTime
operator|=
name|qt_gettime
argument_list|()
operator|)
return|;
block|}
end_function
begin_if
if|#
directive|if
operator|(
operator|(
name|_POSIX_MONOTONIC_CLOCK
operator|-
literal|0
operator|<=
literal|0
operator|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_INTEGRITY
argument_list|)
operator|)
operator|||
name|defined
argument_list|(
name|QT_BOOTSTRAPPED
argument_list|)
end_if
begin_function
template|template
parameter_list|<>
DECL|function|qAbs
name|timeval
name|qAbs
parameter_list|(
specifier|const
name|timeval
modifier|&
name|t
parameter_list|)
block|{
name|timeval
name|tmp
init|=
name|t
decl_stmt|;
if|if
condition|(
name|tmp
operator|.
name|tv_sec
operator|<
literal|0
condition|)
block|{
name|tmp
operator|.
name|tv_sec
operator|=
operator|-
name|tmp
operator|.
name|tv_sec
operator|-
literal|1
expr_stmt|;
name|tmp
operator|.
name|tv_usec
operator|-=
literal|1000000
expr_stmt|;
block|}
if|if
condition|(
name|tmp
operator|.
name|tv_sec
operator|==
literal|0
operator|&&
name|tmp
operator|.
name|tv_usec
operator|<
literal|0
condition|)
block|{
name|tmp
operator|.
name|tv_usec
operator|=
operator|-
name|tmp
operator|.
name|tv_usec
expr_stmt|;
block|}
return|return
name|normalizedTimeval
argument_list|(
name|tmp
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*   Returns true if the real time clock has changed by more than 10%   relative to the processor time since the last time this function was   called. This presumably means that the system time has been changed.    If /a delta is nonzero, delta is set to our best guess at how much the system clock was changed. */
end_comment
begin_function
DECL|function|timeChanged
name|bool
name|QTimerInfoList
operator|::
name|timeChanged
parameter_list|(
name|timeval
modifier|*
name|delta
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|Q_OS_NACL
name|Q_UNUSED
argument_list|(
argument|delta
argument_list|)
return|return
literal|false
return|;
comment|// Calling "times" crashes.
endif|#
directive|endif
name|struct
name|tms
name|unused
decl_stmt|;
name|clock_t
name|currentTicks
init|=
name|times
argument_list|(
operator|&
name|unused
argument_list|)
decl_stmt|;
name|clock_t
name|elapsedTicks
init|=
name|currentTicks
operator|-
name|previousTicks
decl_stmt|;
name|timeval
name|elapsedTime
init|=
name|currentTime
operator|-
name|previousTime
decl_stmt|;
name|timeval
name|elapsedTimeTicks
decl_stmt|;
name|elapsedTimeTicks
operator|.
name|tv_sec
operator|=
name|elapsedTicks
operator|/
name|ticksPerSecond
expr_stmt|;
name|elapsedTimeTicks
operator|.
name|tv_usec
operator|=
operator|(
operator|(
operator|(
name|elapsedTicks
operator|*
literal|1000
operator|)
operator|/
name|ticksPerSecond
operator|)
operator|%
literal|1000
operator|)
operator|*
literal|1000
expr_stmt|;
name|timeval
name|dummy
decl_stmt|;
if|if
condition|(
operator|!
name|delta
condition|)
name|delta
operator|=
operator|&
name|dummy
expr_stmt|;
operator|*
name|delta
operator|=
name|elapsedTime
operator|-
name|elapsedTimeTicks
expr_stmt|;
name|previousTicks
operator|=
name|currentTicks
expr_stmt|;
name|previousTime
operator|=
name|currentTime
expr_stmt|;
comment|// If tick drift is more than 10% off compared to realtime, we assume that the clock has
comment|// been set. Of course, we have to allow for the tick granularity as well.
name|timeval
name|tickGranularity
decl_stmt|;
name|tickGranularity
operator|.
name|tv_sec
operator|=
literal|0
expr_stmt|;
name|tickGranularity
operator|.
name|tv_usec
operator|=
name|msPerTick
operator|*
literal|1000
expr_stmt|;
return|return
name|elapsedTimeTicks
operator|<
operator|(
operator|(
name|qAbs
argument_list|(
operator|*
name|delta
argument_list|)
operator|-
name|tickGranularity
operator|)
operator|*
literal|10
operator|)
return|;
block|}
end_function
begin_function
DECL|function|repairTimersIfNeeded
name|void
name|QTimerInfoList
operator|::
name|repairTimersIfNeeded
parameter_list|()
block|{
if|if
condition|(
name|QElapsedTimer
operator|::
name|isMonotonic
argument_list|()
condition|)
return|return;
name|timeval
name|delta
decl_stmt|;
if|if
condition|(
name|timeChanged
argument_list|(
operator|&
name|delta
argument_list|)
condition|)
name|timerRepair
argument_list|(
name|delta
argument_list|)
expr_stmt|;
block|}
end_function
begin_else
else|#
directive|else
end_else
begin_comment
comment|// !(_POSIX_MONOTONIC_CLOCK-0<= 0)&& !defined(QT_BOOTSTRAPPED)
end_comment
begin_function
DECL|function|repairTimersIfNeeded
name|void
name|QTimerInfoList
operator|::
name|repairTimersIfNeeded
parameter_list|()
block|{ }
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*   insert timer info into list */
end_comment
begin_function
DECL|function|timerInsert
name|void
name|QTimerInfoList
operator|::
name|timerInsert
parameter_list|(
name|QTimerInfo
modifier|*
name|ti
parameter_list|)
block|{
name|int
name|index
init|=
name|size
argument_list|()
decl_stmt|;
while|while
condition|(
name|index
operator|--
condition|)
block|{
specifier|register
specifier|const
name|QTimerInfo
modifier|*
specifier|const
name|t
init|=
name|at
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|ti
operator|->
name|timeout
operator|<
name|t
operator|->
name|timeout
operator|)
condition|)
break|break;
block|}
name|insert
argument_list|(
name|index
operator|+
literal|1
argument_list|,
name|ti
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*   repair broken timer */
end_comment
begin_function
DECL|function|timerRepair
name|void
name|QTimerInfoList
operator|::
name|timerRepair
parameter_list|(
specifier|const
name|timeval
modifier|&
name|diff
parameter_list|)
block|{
comment|// repair all timers
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|register
name|QTimerInfo
modifier|*
name|t
init|=
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|t
operator|->
name|timeout
operator|=
name|t
operator|->
name|timeout
operator|+
name|diff
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*   Returns the time to wait for the next timer, or null if no timers   are waiting. */
end_comment
begin_function
DECL|function|timerWait
name|bool
name|QTimerInfoList
operator|::
name|timerWait
parameter_list|(
name|timeval
modifier|&
name|tm
parameter_list|)
block|{
name|timeval
name|currentTime
init|=
name|updateCurrentTime
argument_list|()
decl_stmt|;
name|repairTimersIfNeeded
argument_list|()
expr_stmt|;
comment|// Find first waiting timer not already active
name|QTimerInfo
modifier|*
name|t
init|=
literal|0
decl_stmt|;
for|for
control|(
name|QTimerInfoList
operator|::
name|const_iterator
name|it
init|=
name|constBegin
argument_list|()
init|;
name|it
operator|!=
name|constEnd
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
if|if
condition|(
operator|!
operator|(
operator|*
name|it
operator|)
operator|->
name|activateRef
condition|)
block|{
name|t
operator|=
operator|*
name|it
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|t
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|currentTime
operator|<
name|t
operator|->
name|timeout
condition|)
block|{
comment|// time to wait
name|tm
operator|=
name|t
operator|->
name|timeout
operator|-
name|currentTime
expr_stmt|;
block|}
else|else
block|{
comment|// no time to wait
name|tm
operator|.
name|tv_sec
operator|=
literal|0
expr_stmt|;
name|tm
operator|.
name|tv_usec
operator|=
literal|0
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|registerTimer
name|void
name|QTimerInfoList
operator|::
name|registerTimer
parameter_list|(
name|int
name|timerId
parameter_list|,
name|int
name|interval
parameter_list|,
name|QObject
modifier|*
name|object
parameter_list|)
block|{
name|QTimerInfo
modifier|*
name|t
init|=
operator|new
name|QTimerInfo
decl_stmt|;
name|t
operator|->
name|id
operator|=
name|timerId
expr_stmt|;
name|t
operator|->
name|interval
operator|.
name|tv_sec
operator|=
name|interval
operator|/
literal|1000
expr_stmt|;
name|t
operator|->
name|interval
operator|.
name|tv_usec
operator|=
operator|(
name|interval
operator|%
literal|1000
operator|)
operator|*
literal|1000
expr_stmt|;
name|t
operator|->
name|timeout
operator|=
name|updateCurrentTime
argument_list|()
operator|+
name|t
operator|->
name|interval
expr_stmt|;
name|t
operator|->
name|obj
operator|=
name|object
expr_stmt|;
name|t
operator|->
name|activateRef
operator|=
literal|0
expr_stmt|;
name|timerInsert
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|unregisterTimer
name|bool
name|QTimerInfoList
operator|::
name|unregisterTimer
parameter_list|(
name|int
name|timerId
parameter_list|)
block|{
comment|// set timer inactive
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|register
name|QTimerInfo
modifier|*
name|t
init|=
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|->
name|id
operator|==
name|timerId
condition|)
block|{
comment|// found it
name|removeAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|t
operator|==
name|firstTimerInfo
condition|)
name|firstTimerInfo
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|t
operator|->
name|activateRef
condition|)
operator|*
operator|(
name|t
operator|->
name|activateRef
operator|)
operator|=
literal|0
expr_stmt|;
comment|// release the timer id
if|if
condition|(
operator|!
name|QObjectPrivate
operator|::
name|get
argument_list|(
name|t
operator|->
name|obj
argument_list|)
operator|->
name|inThreadChangeEvent
condition|)
name|QAbstractEventDispatcherPrivate
operator|::
name|releaseTimerId
argument_list|(
name|timerId
argument_list|)
expr_stmt|;
operator|delete
name|t
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
comment|// id not found
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|unregisterTimers
name|bool
name|QTimerInfoList
operator|::
name|unregisterTimers
parameter_list|(
name|QObject
modifier|*
name|object
parameter_list|)
block|{
if|if
condition|(
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|register
name|QTimerInfo
modifier|*
name|t
init|=
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|->
name|obj
operator|==
name|object
condition|)
block|{
comment|// object found
name|removeAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|t
operator|==
name|firstTimerInfo
condition|)
name|firstTimerInfo
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|t
operator|->
name|activateRef
condition|)
operator|*
operator|(
name|t
operator|->
name|activateRef
operator|)
operator|=
literal|0
expr_stmt|;
comment|// release the timer id
if|if
condition|(
operator|!
name|QObjectPrivate
operator|::
name|get
argument_list|(
name|t
operator|->
name|obj
argument_list|)
operator|->
name|inThreadChangeEvent
condition|)
name|QAbstractEventDispatcherPrivate
operator|::
name|releaseTimerId
argument_list|(
name|t
operator|->
name|id
argument_list|)
expr_stmt|;
operator|delete
name|t
expr_stmt|;
comment|// move back one so that we don't skip the new current item
operator|--
name|i
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|registeredTimers
name|QList
argument_list|<
name|QPair
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
argument_list|>
name|QTimerInfoList
operator|::
name|registeredTimers
parameter_list|(
name|QObject
modifier|*
name|object
parameter_list|)
specifier|const
block|{
name|QList
argument_list|<
name|QPair
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
argument_list|>
name|list
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|register
specifier|const
name|QTimerInfo
modifier|*
specifier|const
name|t
init|=
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|->
name|obj
operator|==
name|object
condition|)
name|list
operator|<<
name|QPair
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
argument_list|(
name|t
operator|->
name|id
argument_list|,
name|t
operator|->
name|interval
operator|.
name|tv_sec
operator|*
literal|1000
operator|+
name|t
operator|->
name|interval
operator|.
name|tv_usec
operator|/
literal|1000
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
end_function
begin_comment
comment|/*     Activate pending timers, returning how many where activated. */
end_comment
begin_function
DECL|function|activateTimers
name|int
name|QTimerInfoList
operator|::
name|activateTimers
parameter_list|()
block|{
if|if
condition|(
name|qt_disable_lowpriority_timers
operator|||
name|isEmpty
argument_list|()
condition|)
return|return
literal|0
return|;
comment|// nothing to do
name|int
name|n_act
init|=
literal|0
decl_stmt|,
name|maxCount
init|=
literal|0
decl_stmt|;
name|firstTimerInfo
operator|=
literal|0
expr_stmt|;
name|timeval
name|currentTime
init|=
name|updateCurrentTime
argument_list|()
decl_stmt|;
name|repairTimersIfNeeded
argument_list|()
expr_stmt|;
comment|// Find out how many timer have expired
for|for
control|(
name|QTimerInfoList
operator|::
name|const_iterator
name|it
init|=
name|constBegin
argument_list|()
init|;
name|it
operator|!=
name|constEnd
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
if|if
condition|(
name|currentTime
operator|<
operator|(
operator|*
name|it
operator|)
operator|->
name|timeout
condition|)
break|break;
name|maxCount
operator|++
expr_stmt|;
block|}
comment|//fire the timers.
while|while
condition|(
name|maxCount
operator|--
condition|)
block|{
if|if
condition|(
name|isEmpty
argument_list|()
condition|)
break|break;
name|QTimerInfo
modifier|*
name|currentTimerInfo
init|=
name|first
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentTime
operator|<
name|currentTimerInfo
operator|->
name|timeout
condition|)
break|break;
comment|// no timer has expired
if|if
condition|(
operator|!
name|firstTimerInfo
condition|)
block|{
name|firstTimerInfo
operator|=
name|currentTimerInfo
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|firstTimerInfo
operator|==
name|currentTimerInfo
condition|)
block|{
comment|// avoid sending the same timer multiple times
break|break;
block|}
elseif|else
if|if
condition|(
name|currentTimerInfo
operator|->
name|interval
operator|<
name|firstTimerInfo
operator|->
name|interval
operator|||
name|currentTimerInfo
operator|->
name|interval
operator|==
name|firstTimerInfo
operator|->
name|interval
condition|)
block|{
name|firstTimerInfo
operator|=
name|currentTimerInfo
expr_stmt|;
block|}
comment|// remove from list
name|removeFirst
argument_list|()
expr_stmt|;
comment|// determine next timeout time
name|currentTimerInfo
operator|->
name|timeout
operator|+=
name|currentTimerInfo
operator|->
name|interval
expr_stmt|;
if|if
condition|(
name|currentTimerInfo
operator|->
name|timeout
operator|<
name|currentTime
condition|)
name|currentTimerInfo
operator|->
name|timeout
operator|=
name|currentTime
operator|+
name|currentTimerInfo
operator|->
name|interval
expr_stmt|;
comment|// reinsert timer
name|timerInsert
argument_list|(
name|currentTimerInfo
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentTimerInfo
operator|->
name|interval
operator|.
name|tv_usec
operator|>
literal|0
operator|||
name|currentTimerInfo
operator|->
name|interval
operator|.
name|tv_sec
operator|>
literal|0
condition|)
name|n_act
operator|++
expr_stmt|;
if|if
condition|(
operator|!
name|currentTimerInfo
operator|->
name|activateRef
condition|)
block|{
comment|// send event, but don't allow it to recurse
name|currentTimerInfo
operator|->
name|activateRef
operator|=
operator|&
name|currentTimerInfo
expr_stmt|;
name|QTimerEvent
name|e
argument_list|(
name|currentTimerInfo
operator|->
name|id
argument_list|)
decl_stmt|;
name|QCoreApplication
operator|::
name|sendEvent
argument_list|(
name|currentTimerInfo
operator|->
name|obj
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentTimerInfo
condition|)
name|currentTimerInfo
operator|->
name|activateRef
operator|=
literal|0
expr_stmt|;
block|}
block|}
name|firstTimerInfo
operator|=
literal|0
expr_stmt|;
return|return
name|n_act
return|;
block|}
end_function
begin_constructor
DECL|function|QEventDispatcherUNIX
name|QEventDispatcherUNIX
operator|::
name|QEventDispatcherUNIX
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QAbstractEventDispatcher
argument_list|(
operator|*
operator|new
name|QEventDispatcherUNIXPrivate
argument_list|,
name|parent
argument_list|)
block|{ }
end_constructor
begin_constructor
DECL|function|QEventDispatcherUNIX
name|QEventDispatcherUNIX
operator|::
name|QEventDispatcherUNIX
parameter_list|(
name|QEventDispatcherUNIXPrivate
modifier|&
name|dd
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QAbstractEventDispatcher
argument_list|(
name|dd
argument_list|,
name|parent
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QEventDispatcherUNIX
name|QEventDispatcherUNIX
operator|::
name|~
name|QEventDispatcherUNIX
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QEventDispatcherUNIX
argument_list|)
expr_stmt|;
name|d
operator|->
name|threadData
operator|->
name|eventDispatcher
operator|=
literal|0
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|select
name|int
name|QEventDispatcherUNIX
operator|::
name|select
parameter_list|(
name|int
name|nfds
parameter_list|,
name|fd_set
modifier|*
name|readfds
parameter_list|,
name|fd_set
modifier|*
name|writefds
parameter_list|,
name|fd_set
modifier|*
name|exceptfds
parameter_list|,
name|timeval
modifier|*
name|timeout
parameter_list|)
block|{
return|return
name|qt_safe_select
argument_list|(
name|nfds
argument_list|,
name|readfds
argument_list|,
name|writefds
argument_list|,
name|exceptfds
argument_list|,
name|timeout
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|registerTimer
name|void
name|QEventDispatcherUNIX
operator|::
name|registerTimer
parameter_list|(
name|int
name|timerId
parameter_list|,
name|int
name|interval
parameter_list|,
name|QObject
modifier|*
name|obj
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_DEBUG
if|if
condition|(
name|timerId
operator|<
literal|1
operator|||
name|interval
operator|<
literal|0
operator|||
operator|!
name|obj
condition|)
block|{
name|qWarning
argument_list|(
literal|"QEventDispatcherUNIX::registerTimer: invalid arguments"
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|obj
operator|->
name|thread
argument_list|()
operator|!=
name|thread
argument_list|()
operator|||
name|thread
argument_list|()
operator|!=
name|QThread
operator|::
name|currentThread
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"QObject::startTimer: timers cannot be started from another thread"
argument_list|)
expr_stmt|;
return|return;
block|}
endif|#
directive|endif
name|Q_D
argument_list|(
name|QEventDispatcherUNIX
argument_list|)
expr_stmt|;
name|d
operator|->
name|timerList
operator|.
name|registerTimer
argument_list|(
name|timerId
argument_list|,
name|interval
argument_list|,
name|obj
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|unregisterTimer
name|bool
name|QEventDispatcherUNIX
operator|::
name|unregisterTimer
parameter_list|(
name|int
name|timerId
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_DEBUG
if|if
condition|(
name|timerId
operator|<
literal|1
condition|)
block|{
name|qWarning
argument_list|(
literal|"QEventDispatcherUNIX::unregisterTimer: invalid argument"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|thread
argument_list|()
operator|!=
name|QThread
operator|::
name|currentThread
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"QObject::killTimer: timers cannot be stopped from another thread"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
endif|#
directive|endif
name|Q_D
argument_list|(
name|QEventDispatcherUNIX
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|timerList
operator|.
name|unregisterTimer
argument_list|(
name|timerId
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|unregisterTimers
name|bool
name|QEventDispatcherUNIX
operator|::
name|unregisterTimers
parameter_list|(
name|QObject
modifier|*
name|object
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_DEBUG
if|if
condition|(
operator|!
name|object
condition|)
block|{
name|qWarning
argument_list|(
literal|"QEventDispatcherUNIX::unregisterTimers: invalid argument"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|object
operator|->
name|thread
argument_list|()
operator|!=
name|thread
argument_list|()
operator|||
name|thread
argument_list|()
operator|!=
name|QThread
operator|::
name|currentThread
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"QObject::killTimers: timers cannot be stopped from another thread"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
endif|#
directive|endif
name|Q_D
argument_list|(
name|QEventDispatcherUNIX
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|timerList
operator|.
name|unregisterTimers
argument_list|(
name|object
argument_list|)
return|;
block|}
end_function
begin_function
name|QList
argument_list|<
name|QEventDispatcherUNIX
operator|::
name|TimerInfo
argument_list|>
DECL|function|registeredTimers
name|QEventDispatcherUNIX
operator|::
name|registeredTimers
parameter_list|(
name|QObject
modifier|*
name|object
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|object
condition|)
block|{
name|qWarning
argument_list|(
literal|"QEventDispatcherUNIX:registeredTimers: invalid argument"
argument_list|)
expr_stmt|;
return|return
name|QList
argument_list|<
name|TimerInfo
argument_list|>
argument_list|()
return|;
block|}
name|Q_D
argument_list|(
specifier|const
name|QEventDispatcherUNIX
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|timerList
operator|.
name|registeredTimers
argument_list|(
name|object
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*****************************************************************************  Socket notifier type  *****************************************************************************/
end_comment
begin_constructor
DECL|function|QSockNotType
name|QSockNotType
operator|::
name|QSockNotType
parameter_list|()
block|{
name|FD_ZERO
argument_list|(
operator|&
name|select_fds
argument_list|)
expr_stmt|;
name|FD_ZERO
argument_list|(
operator|&
name|enabled_fds
argument_list|)
expr_stmt|;
name|FD_ZERO
argument_list|(
operator|&
name|pending_fds
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QSockNotType
name|QSockNotType
operator|::
name|~
name|QSockNotType
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
operator|delete
name|list
index|[
name|i
index|]
expr_stmt|;
block|}
end_destructor
begin_comment
comment|/*****************************************************************************  QEventDispatcher implementations for UNIX  *****************************************************************************/
end_comment
begin_function
DECL|function|registerSocketNotifier
name|void
name|QEventDispatcherUNIX
operator|::
name|registerSocketNotifier
parameter_list|(
name|QSocketNotifier
modifier|*
name|notifier
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|notifier
argument_list|)
expr_stmt|;
name|int
name|sockfd
init|=
name|notifier
operator|->
name|socket
argument_list|()
decl_stmt|;
name|int
name|type
init|=
name|notifier
operator|->
name|type
argument_list|()
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_DEBUG
if|if
condition|(
name|sockfd
operator|<
literal|0
operator|||
name|unsigned
argument_list|(
name|sockfd
argument_list|)
operator|>=
name|FD_SETSIZE
condition|)
block|{
name|qWarning
argument_list|(
literal|"QSocketNotifier: Internal error"
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|notifier
operator|->
name|thread
argument_list|()
operator|!=
name|thread
argument_list|()
operator|||
name|thread
argument_list|()
operator|!=
name|QThread
operator|::
name|currentThread
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"QSocketNotifier: socket notifiers cannot be enabled from another thread"
argument_list|)
expr_stmt|;
return|return;
block|}
endif|#
directive|endif
name|Q_D
argument_list|(
name|QEventDispatcherUNIX
argument_list|)
expr_stmt|;
name|QSockNotType
operator|::
name|List
modifier|&
name|list
init|=
name|d
operator|->
name|sn_vec
index|[
name|type
index|]
operator|.
name|list
decl_stmt|;
name|fd_set
modifier|*
name|fds
init|=
operator|&
name|d
operator|->
name|sn_vec
index|[
name|type
index|]
operator|.
name|enabled_fds
decl_stmt|;
name|QSockNot
modifier|*
name|sn
decl_stmt|;
name|sn
operator|=
operator|new
name|QSockNot
expr_stmt|;
name|sn
operator|->
name|obj
operator|=
name|notifier
expr_stmt|;
name|sn
operator|->
name|fd
operator|=
name|sockfd
expr_stmt|;
name|sn
operator|->
name|queue
operator|=
operator|&
name|d
operator|->
name|sn_vec
index|[
name|type
index|]
operator|.
name|pending_fds
expr_stmt|;
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QSockNot
modifier|*
name|p
init|=
name|list
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|p
operator|->
name|fd
operator|<
name|sockfd
condition|)
break|break;
if|if
condition|(
name|p
operator|->
name|fd
operator|==
name|sockfd
condition|)
block|{
specifier|static
specifier|const
name|char
modifier|*
name|t
index|[]
init|=
block|{
literal|"Read"
block|,
literal|"Write"
block|,
literal|"Exception"
block|}
decl_stmt|;
name|qWarning
argument_list|(
literal|"QSocketNotifier: Multiple socket notifiers for "
literal|"same socket %d and type %s"
argument_list|,
name|sockfd
argument_list|,
name|t
index|[
name|type
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|list
operator|.
name|insert
argument_list|(
name|i
argument_list|,
name|sn
argument_list|)
expr_stmt|;
name|FD_SET
argument_list|(
name|sockfd
argument_list|,
name|fds
argument_list|)
expr_stmt|;
name|d
operator|->
name|sn_highest
operator|=
name|qMax
argument_list|(
name|d
operator|->
name|sn_highest
argument_list|,
name|sockfd
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|unregisterSocketNotifier
name|void
name|QEventDispatcherUNIX
operator|::
name|unregisterSocketNotifier
parameter_list|(
name|QSocketNotifier
modifier|*
name|notifier
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|notifier
argument_list|)
expr_stmt|;
name|int
name|sockfd
init|=
name|notifier
operator|->
name|socket
argument_list|()
decl_stmt|;
name|int
name|type
init|=
name|notifier
operator|->
name|type
argument_list|()
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_DEBUG
if|if
condition|(
name|sockfd
operator|<
literal|0
operator|||
name|unsigned
argument_list|(
name|sockfd
argument_list|)
operator|>=
name|FD_SETSIZE
condition|)
block|{
name|qWarning
argument_list|(
literal|"QSocketNotifier: Internal error"
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|notifier
operator|->
name|thread
argument_list|()
operator|!=
name|thread
argument_list|()
operator|||
name|thread
argument_list|()
operator|!=
name|QThread
operator|::
name|currentThread
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"QSocketNotifier: socket notifiers cannot be disabled from another thread"
argument_list|)
expr_stmt|;
return|return;
block|}
endif|#
directive|endif
name|Q_D
argument_list|(
name|QEventDispatcherUNIX
argument_list|)
expr_stmt|;
name|QSockNotType
operator|::
name|List
modifier|&
name|list
init|=
name|d
operator|->
name|sn_vec
index|[
name|type
index|]
operator|.
name|list
decl_stmt|;
name|fd_set
modifier|*
name|fds
init|=
operator|&
name|d
operator|->
name|sn_vec
index|[
name|type
index|]
operator|.
name|enabled_fds
decl_stmt|;
name|QSockNot
modifier|*
name|sn
init|=
literal|0
decl_stmt|;
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|sn
operator|=
name|list
index|[
name|i
index|]
expr_stmt|;
if|if
condition|(
name|sn
operator|->
name|obj
operator|==
name|notifier
operator|&&
name|sn
operator|->
name|fd
operator|==
name|sockfd
condition|)
break|break;
block|}
if|if
condition|(
name|i
operator|==
name|list
operator|.
name|size
argument_list|()
condition|)
comment|// not found
return|return;
name|FD_CLR
argument_list|(
name|sockfd
argument_list|,
name|fds
argument_list|)
expr_stmt|;
comment|// clear fd bit
name|FD_CLR
argument_list|(
name|sockfd
argument_list|,
name|sn
operator|->
name|queue
argument_list|)
expr_stmt|;
name|d
operator|->
name|sn_pending_list
operator|.
name|removeAll
argument_list|(
name|sn
argument_list|)
expr_stmt|;
comment|// remove from activation list
name|list
operator|.
name|removeAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
comment|// remove notifier found above
operator|delete
name|sn
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|sn_highest
operator|==
name|sockfd
condition|)
block|{
comment|// find highest fd
name|d
operator|->
name|sn_highest
operator|=
operator|-
literal|1
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|sn_vec
index|[
name|i
index|]
operator|.
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
name|d
operator|->
name|sn_highest
operator|=
name|qMax
argument_list|(
name|d
operator|->
name|sn_highest
argument_list|,
comment|// list is fd-sorted
name|d
operator|->
name|sn_vec
index|[
name|i
index|]
operator|.
name|list
index|[
literal|0
index|]
operator|->
name|fd
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|setSocketNotifierPending
name|void
name|QEventDispatcherUNIX
operator|::
name|setSocketNotifierPending
parameter_list|(
name|QSocketNotifier
modifier|*
name|notifier
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|notifier
argument_list|)
expr_stmt|;
name|int
name|sockfd
init|=
name|notifier
operator|->
name|socket
argument_list|()
decl_stmt|;
name|int
name|type
init|=
name|notifier
operator|->
name|type
argument_list|()
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_DEBUG
if|if
condition|(
name|sockfd
operator|<
literal|0
operator|||
name|unsigned
argument_list|(
name|sockfd
argument_list|)
operator|>=
name|FD_SETSIZE
condition|)
block|{
name|qWarning
argument_list|(
literal|"QSocketNotifier: Internal error"
argument_list|)
expr_stmt|;
return|return;
block|}
name|Q_ASSERT
argument_list|(
name|notifier
operator|->
name|thread
argument_list|()
operator|==
name|thread
argument_list|()
operator|&&
name|thread
argument_list|()
operator|==
name|QThread
operator|::
name|currentThread
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|Q_D
argument_list|(
name|QEventDispatcherUNIX
argument_list|)
expr_stmt|;
name|QSockNotType
operator|::
name|List
modifier|&
name|list
init|=
name|d
operator|->
name|sn_vec
index|[
name|type
index|]
operator|.
name|list
decl_stmt|;
name|QSockNot
modifier|*
name|sn
init|=
literal|0
decl_stmt|;
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|sn
operator|=
name|list
index|[
name|i
index|]
expr_stmt|;
if|if
condition|(
name|sn
operator|->
name|obj
operator|==
name|notifier
operator|&&
name|sn
operator|->
name|fd
operator|==
name|sockfd
condition|)
break|break;
block|}
if|if
condition|(
name|i
operator|==
name|list
operator|.
name|size
argument_list|()
condition|)
comment|// not found
return|return;
comment|// We choose a random activation order to be more fair under high load.
comment|// If a constant order is used and a peer early in the list can
comment|// saturate the IO, it might grab our attention completely.
comment|// Also, if we're using a straight list, the callback routines may
comment|// delete other entries from the list before those other entries are
comment|// processed.
if|if
condition|(
operator|!
name|FD_ISSET
argument_list|(
name|sn
operator|->
name|fd
argument_list|,
name|sn
operator|->
name|queue
argument_list|)
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|sn_pending_list
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|d
operator|->
name|sn_pending_list
operator|.
name|append
argument_list|(
name|sn
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|sn_pending_list
operator|.
name|insert
argument_list|(
operator|(
name|qrand
argument_list|()
operator|&
literal|0xff
operator|)
operator|%
operator|(
name|d
operator|->
name|sn_pending_list
operator|.
name|size
argument_list|()
operator|+
literal|1
operator|)
argument_list|,
name|sn
argument_list|)
expr_stmt|;
block|}
name|FD_SET
argument_list|(
name|sn
operator|->
name|fd
argument_list|,
name|sn
operator|->
name|queue
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|activateTimers
name|int
name|QEventDispatcherUNIX
operator|::
name|activateTimers
parameter_list|()
block|{
name|Q_ASSERT
argument_list|(
name|thread
argument_list|()
operator|==
name|QThread
operator|::
name|currentThread
argument_list|()
argument_list|)
expr_stmt|;
name|Q_D
argument_list|(
name|QEventDispatcherUNIX
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|timerList
operator|.
name|activateTimers
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|activateSocketNotifiers
name|int
name|QEventDispatcherUNIX
operator|::
name|activateSocketNotifiers
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QEventDispatcherUNIX
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|sn_pending_list
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|0
return|;
comment|// activate entries
name|int
name|n_act
init|=
literal|0
decl_stmt|;
name|QEvent
name|event
argument_list|(
name|QEvent
operator|::
name|SockAct
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|d
operator|->
name|sn_pending_list
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QSockNot
modifier|*
name|sn
init|=
name|d
operator|->
name|sn_pending_list
operator|.
name|takeFirst
argument_list|()
decl_stmt|;
if|if
condition|(
name|FD_ISSET
argument_list|(
name|sn
operator|->
name|fd
argument_list|,
name|sn
operator|->
name|queue
argument_list|)
condition|)
block|{
name|FD_CLR
argument_list|(
name|sn
operator|->
name|fd
argument_list|,
name|sn
operator|->
name|queue
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|sendEvent
argument_list|(
name|sn
operator|->
name|obj
argument_list|,
operator|&
name|event
argument_list|)
expr_stmt|;
operator|++
name|n_act
expr_stmt|;
block|}
block|}
return|return
name|n_act
return|;
block|}
end_function
begin_function
DECL|function|processEvents
name|bool
name|QEventDispatcherUNIX
operator|::
name|processEvents
parameter_list|(
name|QEventLoop
operator|::
name|ProcessEventsFlags
name|flags
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QEventDispatcherUNIX
argument_list|)
expr_stmt|;
name|d
operator|->
name|interrupt
operator|=
literal|false
expr_stmt|;
comment|// we are awake, broadcast it
emit|emit
name|awake
argument_list|()
emit|;
name|QCoreApplicationPrivate
operator|::
name|sendPostedEvents
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|d
operator|->
name|threadData
argument_list|)
expr_stmt|;
name|int
name|nevents
init|=
literal|0
decl_stmt|;
specifier|const
name|bool
name|canWait
init|=
operator|(
name|d
operator|->
name|threadData
operator|->
name|canWait
operator|&&
operator|!
name|d
operator|->
name|interrupt
operator|&&
operator|(
name|flags
operator|&
name|QEventLoop
operator|::
name|WaitForMoreEvents
operator|)
operator|)
decl_stmt|;
if|if
condition|(
name|canWait
condition|)
emit|emit
name|aboutToBlock
argument_list|()
emit|;
if|if
condition|(
operator|!
name|d
operator|->
name|interrupt
condition|)
block|{
comment|// return the maximum time we can wait for an event.
name|timeval
modifier|*
name|tm
init|=
literal|0
decl_stmt|;
name|timeval
name|wait_tm
init|=
block|{
literal|0l
block|,
literal|0l
block|}
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|QEventLoop
operator|::
name|X11ExcludeTimers
operator|)
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|timerList
operator|.
name|timerWait
argument_list|(
name|wait_tm
argument_list|)
condition|)
name|tm
operator|=
operator|&
name|wait_tm
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|canWait
condition|)
block|{
if|if
condition|(
operator|!
name|tm
condition|)
name|tm
operator|=
operator|&
name|wait_tm
expr_stmt|;
comment|// no time to wait
name|tm
operator|->
name|tv_sec
operator|=
literal|0l
expr_stmt|;
name|tm
operator|->
name|tv_usec
operator|=
literal|0l
expr_stmt|;
block|}
name|nevents
operator|=
name|d
operator|->
name|doSelect
argument_list|(
name|flags
argument_list|,
name|tm
argument_list|)
expr_stmt|;
comment|// activate timers
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|QEventLoop
operator|::
name|X11ExcludeTimers
operator|)
condition|)
block|{
name|nevents
operator|+=
name|activateTimers
argument_list|()
expr_stmt|;
block|}
block|}
comment|// return true if we handled events, false otherwise
return|return
operator|(
name|nevents
operator|>
literal|0
operator|)
return|;
block|}
end_function
begin_function
DECL|function|hasPendingEvents
name|bool
name|QEventDispatcherUNIX
operator|::
name|hasPendingEvents
parameter_list|()
block|{
specifier|extern
name|uint
name|qGlobalPostedEventsCount
argument_list|()
decl_stmt|;
comment|// from qapplication.cpp
return|return
name|qGlobalPostedEventsCount
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|wakeUp
name|void
name|QEventDispatcherUNIX
operator|::
name|wakeUp
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QEventDispatcherUNIX
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|wakeUps
operator|.
name|testAndSetAcquire
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
condition|)
block|{
name|char
name|c
init|=
literal|0
decl_stmt|;
name|qt_safe_write
argument_list|(
name|d
operator|->
name|thread_pipe
index|[
literal|1
index|]
argument_list|,
operator|&
name|c
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|interrupt
name|void
name|QEventDispatcherUNIX
operator|::
name|interrupt
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QEventDispatcherUNIX
argument_list|)
expr_stmt|;
name|d
operator|->
name|interrupt
operator|=
literal|true
expr_stmt|;
name|wakeUp
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|flush
name|void
name|QEventDispatcherUNIX
operator|::
name|flush
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|watchUnixSignal
name|void
name|QCoreApplication
operator|::
name|watchUnixSignal
parameter_list|(
name|int
name|sig
parameter_list|,
name|bool
name|watch
parameter_list|)
block|{
if|if
condition|(
name|sig
operator|<
name|NSIG
condition|)
block|{
name|struct
name|sigaction
name|sa
decl_stmt|;
name|sigemptyset
argument_list|(
operator|&
operator|(
name|sa
operator|.
name|sa_mask
operator|)
argument_list|)
expr_stmt|;
name|sa
operator|.
name|sa_flags
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|watch
condition|)
name|sa
operator|.
name|sa_handler
operator|=
name|signalHandler
expr_stmt|;
else|else
name|sa
operator|.
name|sa_handler
operator|=
name|SIG_DFL
expr_stmt|;
name|sigaction
argument_list|(
name|sig
argument_list|,
operator|&
name|sa
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
