begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qfunctions_winrt.h"
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_WINRT
end_ifdef
begin_include
include|#
directive|include
file|"qstring.h"
end_include
begin_include
include|#
directive|include
file|"qbytearray.h"
end_include
begin_include
include|#
directive|include
file|"qhash.h"
end_include
begin_function
name|QT_BEGIN_NAMESPACE
comment|// Environment ------------------------------------------------------
DECL|function|qt_app_environment
specifier|inline
name|QHash
argument_list|<
name|QByteArray
argument_list|,
name|QByteArray
argument_list|>
modifier|&
name|qt_app_environment
parameter_list|()
block|{
specifier|static
name|QHash
argument_list|<
name|QByteArray
argument_list|,
name|QByteArray
argument_list|>
name|internalEnvironment
decl_stmt|;
return|return
name|internalEnvironment
return|;
block|}
end_function
begin_function
DECL|function|qt_winrt_getenv_s
name|errno_t
name|qt_winrt_getenv_s
parameter_list|(
name|size_t
modifier|*
name|sizeNeeded
parameter_list|,
name|char
modifier|*
name|buffer
parameter_list|,
name|size_t
name|bufferSize
parameter_list|,
specifier|const
name|char
modifier|*
name|varName
parameter_list|)
block|{
if|if
condition|(
operator|!
name|sizeNeeded
condition|)
return|return
name|EINVAL
return|;
if|if
condition|(
operator|!
name|qt_app_environment
argument_list|()
operator|.
name|contains
argument_list|(
name|varName
argument_list|)
condition|)
block|{
if|if
condition|(
name|buffer
condition|)
name|buffer
index|[
literal|0
index|]
operator|=
literal|'\0'
expr_stmt|;
return|return
name|ENOENT
return|;
block|}
name|QByteArray
name|value
init|=
name|qt_app_environment
argument_list|()
operator|.
name|value
argument_list|(
name|varName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|value
operator|.
name|endsWith
argument_list|(
literal|'\0'
argument_list|)
condition|)
comment|// win32 guarantees terminated string
name|value
operator|.
name|append
argument_list|(
literal|'\0'
argument_list|)
expr_stmt|;
if|if
condition|(
name|bufferSize
operator|<
operator|(
name|size_t
operator|)
name|value
operator|.
name|size
argument_list|()
condition|)
block|{
operator|*
name|sizeNeeded
operator|=
name|value
operator|.
name|size
argument_list|()
expr_stmt|;
return|return
name|ERANGE
return|;
block|}
name|strcpy
argument_list|(
name|buffer
argument_list|,
name|value
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|qt_winrt__putenv_s
name|errno_t
name|qt_winrt__putenv_s
parameter_list|(
specifier|const
name|char
modifier|*
name|varName
parameter_list|,
specifier|const
name|char
modifier|*
name|value
parameter_list|)
block|{
name|QByteArray
name|input
init|=
name|value
decl_stmt|;
if|if
condition|(
name|input
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|qt_app_environment
argument_list|()
operator|.
name|contains
argument_list|(
name|varName
argument_list|)
condition|)
name|qt_app_environment
argument_list|()
operator|.
name|remove
argument_list|(
name|varName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// win32 on winrt guarantees terminated string
if|if
condition|(
operator|!
name|input
operator|.
name|endsWith
argument_list|(
literal|'\0'
argument_list|)
condition|)
name|input
operator|.
name|append
argument_list|(
literal|'\0'
argument_list|)
expr_stmt|;
name|qt_app_environment
argument_list|()
index|[
name|varName
index|]
operator|=
name|input
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|qt_winrt_tzset
name|void
name|qt_winrt_tzset
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|qt_winrt__tzset
name|void
name|qt_winrt__tzset
parameter_list|()
block|{ }
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Q_OS_WINRT
end_comment
end_unit
