begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Copyright (C) 2014 Olivier Goffart<ogoffart@woboq.com> ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia. For licensing terms and ** conditions see http://qt.digia.com/licensing. For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights. These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QMETATYPE_H
end_ifndef
begin_define
DECL|macro|QMETATYPE_H
define|#
directive|define
name|QMETATYPE_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qglobal.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qatomic.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qbytearray.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qvarlengtharray.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qisenum.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qtypetraits.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QOBJECT
end_ifndef
begin_include
include|#
directive|include
file|<QtCore/qobjectdefs.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<new>
end_include
begin_include
include|#
directive|include
file|<vector>
end_include
begin_include
include|#
directive|include
file|<list>
end_include
begin_include
include|#
directive|include
file|<map>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Bool
end_ifdef
begin_error
error|#
directive|error
error|qmetatype.h must be included before any header file that defines Bool
end_error
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
name|QT_BEGIN_NAMESPACE
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|QMetaTypeId2
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|Q_DECL_CONSTEXPR
name|int
name|qMetaTypeId
argument_list|()
expr_stmt|;
end_expr_stmt
begin_comment
comment|// F is a tuple: (QMetaType::TypeName, QMetaType::TypeNameID, RealType)
end_comment
begin_define
DECL|macro|QT_FOR_EACH_STATIC_PRIMITIVE_TYPE
define|#
directive|define
name|QT_FOR_EACH_STATIC_PRIMITIVE_TYPE
parameter_list|(
name|F
parameter_list|)
define|\
value|F(Void, 43, void) \     F(Bool, 1, bool) \     F(Int, 2, int) \     F(UInt, 3, uint) \     F(LongLong, 4, qlonglong) \     F(ULongLong, 5, qulonglong) \     F(Double, 6, double) \     F(Long, 32, long) \     F(Short, 33, short) \     F(Char, 34, char) \     F(ULong, 35, ulong) \     F(UShort, 36, ushort) \     F(UChar, 37, uchar) \     F(Float, 38, float) \     F(SChar, 40, signed char) \  #define QT_FOR_EACH_STATIC_PRIMITIVE_POINTER(F)\     F(VoidStar, 31, void*) \  #define QT_FOR_EACH_STATIC_CORE_CLASS(F)\     F(QChar, 7, QChar) \     F(QString, 10, QString) \     F(QStringList, 11, QStringList) \     F(QByteArray, 12, QByteArray) \     F(QBitArray, 13, QBitArray) \     F(QDate, 14, QDate) \     F(QTime, 15, QTime) \     F(QDateTime, 16, QDateTime) \     F(QUrl, 17, QUrl) \     F(QLocale, 18, QLocale) \     F(QRect, 19, QRect) \     F(QRectF, 20, QRectF) \     F(QSize, 21, QSize) \     F(QSizeF, 22, QSizeF) \     F(QLine, 23, QLine) \     F(QLineF, 24, QLineF) \     F(QPoint, 25, QPoint) \     F(QPointF, 26, QPointF) \     F(QRegExp, 27, QRegExp) \     F(QEasingCurve, 29, QEasingCurve) \     F(QUuid, 30, QUuid) \     F(QVariant, 41, QVariant) \     F(QModelIndex, 42, QModelIndex) \     F(QRegularExpression, 44, QRegularExpression) \     F(QJsonValue, 45, QJsonValue) \     F(QJsonObject, 46, QJsonObject) \     F(QJsonArray, 47, QJsonArray) \     F(QJsonDocument, 48, QJsonDocument) \  #define QT_FOR_EACH_STATIC_CORE_POINTER(F)\     F(QObjectStar, 39, QObject*)
end_define
begin_define
DECL|macro|QT_FOR_EACH_STATIC_CORE_TEMPLATE
define|#
directive|define
name|QT_FOR_EACH_STATIC_CORE_TEMPLATE
parameter_list|(
name|F
parameter_list|)
define|\
value|F(QVariantMap, 8, QVariantMap) \     F(QVariantList, 9, QVariantList) \     F(QVariantHash, 28, QVariantHash) \     F(QByteArrayList, 49, QByteArrayList) \  #define QT_FOR_EACH_STATIC_GUI_CLASS(F)\     F(QFont, 64, QFont) \     F(QPixmap, 65, QPixmap) \     F(QBrush, 66, QBrush) \     F(QColor, 67, QColor) \     F(QPalette, 68, QPalette) \     F(QIcon, 69, QIcon) \     F(QImage, 70, QImage) \     F(QPolygon, 71, QPolygon) \     F(QRegion, 72, QRegion) \     F(QBitmap, 73, QBitmap) \     F(QCursor, 74, QCursor) \     F(QKeySequence, 75, QKeySequence) \     F(QPen, 76, QPen) \     F(QTextLength, 77, QTextLength) \     F(QTextFormat, 78, QTextFormat) \     F(QMatrix, 79, QMatrix) \     F(QTransform, 80, QTransform) \     F(QMatrix4x4, 81, QMatrix4x4) \     F(QVector2D, 82, QVector2D) \     F(QVector3D, 83, QVector3D) \     F(QVector4D, 84, QVector4D) \     F(QQuaternion, 85, QQuaternion) \     F(QPolygonF, 86, QPolygonF) \   #define QT_FOR_EACH_STATIC_WIDGETS_CLASS(F)\     F(QSizePolicy, 121, QSizePolicy)
end_define
begin_comment
unit|\
comment|// ### FIXME kill that set
end_comment
begin_define
DECL|macro|QT_FOR_EACH_STATIC_HACKS_TYPE
define|#
directive|define
name|QT_FOR_EACH_STATIC_HACKS_TYPE
parameter_list|(
name|F
parameter_list|)
define|\
value|F(QMetaTypeId2<qreal>::MetaType, -1, qreal)
end_define
begin_comment
comment|// F is a tuple: (QMetaType::TypeName, QMetaType::TypeNameID, AliasingType, "RealType")
end_comment
begin_define
DECL|macro|QT_FOR_EACH_STATIC_ALIAS_TYPE
define|#
directive|define
name|QT_FOR_EACH_STATIC_ALIAS_TYPE
parameter_list|(
name|F
parameter_list|)
define|\
value|F(ULong, -1, ulong, "unsigned long") \     F(UInt, -1, uint, "unsigned int") \     F(UShort, -1, ushort, "unsigned short") \     F(UChar, -1, uchar, "unsigned char") \     F(LongLong, -1, qlonglong, "long long") \     F(ULongLong, -1, qulonglong, "unsigned long long") \     F(SChar, -1, signed char, "qint8") \     F(UChar, -1, uchar, "quint8") \     F(Short, -1, short, "qint16") \     F(UShort, -1, ushort, "quint16") \     F(Int, -1, int, "qint32") \     F(UInt, -1, uint, "quint32") \     F(LongLong, -1, qlonglong, "qint64") \     F(ULongLong, -1, qulonglong, "quint64") \     F(QVariantList, -1, QVariantList, "QList<QVariant>") \     F(QVariantMap, -1, QVariantMap, "QMap<QString,QVariant>") \     F(QVariantHash, -1, QVariantHash, "QHash<QString,QVariant>") \     F(QByteArrayList, -1, QByteArrayList, "QList<QByteArray>") \  #define QT_FOR_EACH_STATIC_TYPE(F)\     QT_FOR_EACH_STATIC_PRIMITIVE_TYPE(F)\     QT_FOR_EACH_STATIC_PRIMITIVE_POINTER(F)\     QT_FOR_EACH_STATIC_CORE_CLASS(F)\     QT_FOR_EACH_STATIC_CORE_POINTER(F)\     QT_FOR_EACH_STATIC_CORE_TEMPLATE(F)\     QT_FOR_EACH_STATIC_GUI_CLASS(F)\     QT_FOR_EACH_STATIC_WIDGETS_CLASS(F)\  #define QT_DEFINE_METATYPE_ID(TypeName, Id, Name) \     TypeName = Id,
end_define
begin_define
DECL|macro|QT_FOR_EACH_AUTOMATIC_TEMPLATE_1ARG
define|#
directive|define
name|QT_FOR_EACH_AUTOMATIC_TEMPLATE_1ARG
parameter_list|(
name|F
parameter_list|)
define|\
value|F(QList) \     F(QVector) \     F(QQueue) \     F(QStack) \     F(QSet) \     F(QLinkedList)
end_define
begin_define
DECL|macro|QT_FOR_EACH_AUTOMATIC_TEMPLATE_2ARG
define|#
directive|define
name|QT_FOR_EACH_AUTOMATIC_TEMPLATE_2ARG
parameter_list|(
name|F
parameter_list|)
define|\
value|F(QHash, class) \     F(QMap, class) \     F(QPair, struct)
end_define
begin_define
DECL|macro|QT_FOR_EACH_AUTOMATIC_TEMPLATE_SMART_POINTER
define|#
directive|define
name|QT_FOR_EACH_AUTOMATIC_TEMPLATE_SMART_POINTER
parameter_list|(
name|F
parameter_list|)
define|\
value|F(QSharedPointer) \     F(QWeakPointer) \     F(QPointer)
end_define
begin_decl_stmt
DECL|variable|QDataStream
name|class
name|QDataStream
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QMetaTypeInterface
name|class
name|QMetaTypeInterface
decl_stmt|;
end_decl_stmt
begin_struct_decl
struct_decl|struct
name|QMetaObject
struct_decl|;
end_struct_decl
begin_decl_stmt
name|namespace
name|QtPrivate
block|{
comment|/*!     This template is used for implicit conversion from type From to type To.     \internal */
name|template
operator|<
name|typename
name|From
operator|,
name|typename
name|To
operator|>
name|To
name|convertImplicit
argument_list|(
argument|const From& from
argument_list|)
block|{
return|return
name|from
return|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_DEBUG_STREAM
struct|struct
name|AbstractDebugStreamFunction
block|{
typedef|typedef
name|void
function_decl|(
modifier|*
name|Stream
function_decl|)
parameter_list|(
specifier|const
name|AbstractDebugStreamFunction
modifier|*
parameter_list|,
name|QDebug
modifier|&
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|)
function_decl|;
typedef|typedef
name|void
function_decl|(
modifier|*
name|Destroy
function_decl|)
parameter_list|(
name|AbstractDebugStreamFunction
modifier|*
parameter_list|)
function_decl|;
name|explicit
name|AbstractDebugStreamFunction
argument_list|(
argument|Stream s =
literal|0
argument_list|,
argument|Destroy d =
literal|0
argument_list|)
block|:
name|stream
argument_list|(
name|s
argument_list|)
operator|,
name|destroy
argument_list|(
argument|d
argument_list|)
block|{}
name|Q_DISABLE_COPY
argument_list|(
argument|AbstractDebugStreamFunction
argument_list|)
name|Stream
name|stream
expr_stmt|;
name|Destroy
name|destroy
decl_stmt|;
block|}
struct|;
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|BuiltInDebugStreamFunction
operator|:
name|public
name|AbstractDebugStreamFunction
block|{
name|BuiltInDebugStreamFunction
argument_list|()
operator|:
name|AbstractDebugStreamFunction
argument_list|(
argument|stream
argument_list|,
argument|destroy
argument_list|)
block|{}
specifier|static
name|void
name|stream
argument_list|(
argument|const AbstractDebugStreamFunction *
argument_list|,
argument|QDebug& dbg
argument_list|,
argument|const void *r
argument_list|)
block|{
specifier|const
name|T
operator|*
name|rhs
operator|=
name|static_cast
operator|<
specifier|const
name|T
operator|*
operator|>
operator|(
name|r
operator|)
block|;
name|operator
operator|<<
operator|(
name|dbg
operator|,
operator|*
name|rhs
operator|)
block|;     }
specifier|static
name|void
name|destroy
argument_list|(
argument|AbstractDebugStreamFunction *_this
argument_list|)
block|{
name|delete
name|static_cast
operator|<
name|BuiltInDebugStreamFunction
operator|*
operator|>
operator|(
name|_this
operator|)
block|;     }
block|}
expr_stmt|;
endif|#
directive|endif
struct|struct
name|AbstractComparatorFunction
block|{
typedef|typedef
name|bool
function_decl|(
modifier|*
name|LessThan
function_decl|)
parameter_list|(
specifier|const
name|AbstractComparatorFunction
modifier|*
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|)
function_decl|;
typedef|typedef
name|bool
function_decl|(
modifier|*
name|Equals
function_decl|)
parameter_list|(
specifier|const
name|AbstractComparatorFunction
modifier|*
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|)
function_decl|;
typedef|typedef
name|void
function_decl|(
modifier|*
name|Destroy
function_decl|)
parameter_list|(
name|AbstractComparatorFunction
modifier|*
parameter_list|)
function_decl|;
name|explicit
name|AbstractComparatorFunction
argument_list|(
argument|LessThan lt =
literal|0
argument_list|,
argument|Equals e =
literal|0
argument_list|,
argument|Destroy d =
literal|0
argument_list|)
block|:
name|lessThan
argument_list|(
name|lt
argument_list|)
operator|,
name|equals
argument_list|(
name|e
argument_list|)
operator|,
name|destroy
argument_list|(
argument|d
argument_list|)
block|{}
name|Q_DISABLE_COPY
argument_list|(
argument|AbstractComparatorFunction
argument_list|)
name|LessThan
name|lessThan
expr_stmt|;
name|Equals
name|equals
decl_stmt|;
name|Destroy
name|destroy
decl_stmt|;
block|}
struct|;
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|BuiltInComparatorFunction
operator|:
name|public
name|AbstractComparatorFunction
block|{
name|BuiltInComparatorFunction
argument_list|()
operator|:
name|AbstractComparatorFunction
argument_list|(
argument|lessThan
argument_list|,
argument|equals
argument_list|,
argument|destroy
argument_list|)
block|{}
specifier|static
name|bool
name|lessThan
argument_list|(
argument|const AbstractComparatorFunction *
argument_list|,
argument|const void *l
argument_list|,
argument|const void *r
argument_list|)
block|{
specifier|const
name|T
operator|*
name|lhs
operator|=
name|static_cast
operator|<
specifier|const
name|T
operator|*
operator|>
operator|(
name|l
operator|)
block|;
specifier|const
name|T
operator|*
name|rhs
operator|=
name|static_cast
operator|<
specifier|const
name|T
operator|*
operator|>
operator|(
name|r
operator|)
block|;
return|return
operator|*
name|lhs
operator|<
operator|*
name|rhs
return|;
block|}
specifier|static
name|bool
name|equals
argument_list|(
argument|const AbstractComparatorFunction *
argument_list|,
argument|const void *l
argument_list|,
argument|const void *r
argument_list|)
block|{
specifier|const
name|T
operator|*
name|lhs
operator|=
name|static_cast
operator|<
specifier|const
name|T
operator|*
operator|>
operator|(
name|l
operator|)
block|;
specifier|const
name|T
operator|*
name|rhs
operator|=
name|static_cast
operator|<
specifier|const
name|T
operator|*
operator|>
operator|(
name|r
operator|)
block|;
return|return
operator|*
name|lhs
operator|==
operator|*
name|rhs
return|;
block|}
specifier|static
name|void
name|destroy
argument_list|(
argument|AbstractComparatorFunction *_this
argument_list|)
block|{
name|delete
name|static_cast
operator|<
name|BuiltInComparatorFunction
operator|*
operator|>
operator|(
name|_this
operator|)
block|;     }
expr|}
block|;  struct
name|AbstractConverterFunction
block|{
typedef|typedef
name|bool
function_decl|(
modifier|*
name|Converter
function_decl|)
parameter_list|(
specifier|const
name|AbstractConverterFunction
modifier|*
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|explicit
name|AbstractConverterFunction
argument_list|(
argument|Converter c =
literal|0
argument_list|)
operator|:
name|convert
argument_list|(
argument|c
argument_list|)
block|{}
name|Q_DISABLE_COPY
argument_list|(
argument|AbstractConverterFunction
argument_list|)
name|Converter
name|convert
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|From
operator|,
name|typename
name|To
operator|>
expr|struct
name|ConverterMemberFunction
operator|:
name|public
name|AbstractConverterFunction
block|{
name|explicit
name|ConverterMemberFunction
argument_list|(
name|To
argument_list|(
argument|From::*function
argument_list|)
operator|(
operator|)
specifier|const
argument_list|)
operator|:
name|AbstractConverterFunction
argument_list|(
name|convert
argument_list|)
block|,
name|m_function
argument_list|(
argument|function
argument_list|)
block|{}
operator|~
name|ConverterMemberFunction
argument_list|()
block|;
specifier|static
name|bool
name|convert
argument_list|(
argument|const AbstractConverterFunction *_this
argument_list|,
argument|const void *in
argument_list|,
argument|void *out
argument_list|)
block|{
specifier|const
name|From
operator|*
name|f
operator|=
name|static_cast
operator|<
specifier|const
name|From
operator|*
operator|>
operator|(
name|in
operator|)
block|;
name|To
operator|*
name|t
operator|=
name|static_cast
operator|<
name|To
operator|*
operator|>
operator|(
name|out
operator|)
block|;
specifier|const
name|ConverterMemberFunction
operator|*
name|_typedThis
operator|=
name|static_cast
operator|<
specifier|const
name|ConverterMemberFunction
operator|*
operator|>
operator|(
name|_this
operator|)
block|;
operator|*
name|t
operator|=
operator|(
name|f
operator|->*
name|_typedThis
operator|->
name|m_function
operator|)
operator|(
operator|)
block|;
return|return
name|true
return|;
block|}
name|To
argument_list|(
argument|From::* const m_function
argument_list|)
operator|(
operator|)
specifier|const
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|From
operator|,
name|typename
name|To
operator|>
expr|struct
name|ConverterMemberFunctionOk
operator|:
name|public
name|AbstractConverterFunction
block|{
name|explicit
name|ConverterMemberFunctionOk
argument_list|(
name|To
argument_list|(
argument|From::*function
argument_list|)
operator|(
name|bool
operator|*
operator|)
specifier|const
argument_list|)
operator|:
name|AbstractConverterFunction
argument_list|(
name|convert
argument_list|)
block|,
name|m_function
argument_list|(
argument|function
argument_list|)
block|{}
operator|~
name|ConverterMemberFunctionOk
argument_list|()
block|;
specifier|static
name|bool
name|convert
argument_list|(
argument|const AbstractConverterFunction *_this
argument_list|,
argument|const void *in
argument_list|,
argument|void *out
argument_list|)
block|{
specifier|const
name|From
operator|*
name|f
operator|=
name|static_cast
operator|<
specifier|const
name|From
operator|*
operator|>
operator|(
name|in
operator|)
block|;
name|To
operator|*
name|t
operator|=
name|static_cast
operator|<
name|To
operator|*
operator|>
operator|(
name|out
operator|)
block|;
name|bool
name|ok
operator|=
name|false
block|;
specifier|const
name|ConverterMemberFunctionOk
operator|*
name|_typedThis
operator|=
name|static_cast
operator|<
specifier|const
name|ConverterMemberFunctionOk
operator|*
operator|>
operator|(
name|_this
operator|)
block|;
operator|*
name|t
operator|=
operator|(
name|f
operator|->*
name|_typedThis
operator|->
name|m_function
operator|)
operator|(
operator|&
name|ok
operator|)
block|;
if|if
condition|(
operator|!
name|ok
condition|)
operator|*
name|t
operator|=
name|To
argument_list|()
expr_stmt|;
return|return
name|ok
return|;
block|}
name|To
argument_list|(
argument|From::* const m_function
argument_list|)
operator|(
name|bool
operator|*
operator|)
specifier|const
expr_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|From
operator|,
name|typename
name|To
operator|,
name|typename
name|UnaryFunction
operator|>
expr|struct
name|ConverterFunctor
operator|:
name|public
name|AbstractConverterFunction
block|{
name|explicit
name|ConverterFunctor
argument_list|(
argument|UnaryFunction function
argument_list|)
operator|:
name|AbstractConverterFunction
argument_list|(
name|convert
argument_list|)
block|,
name|m_function
argument_list|(
argument|function
argument_list|)
block|{}
operator|~
name|ConverterFunctor
argument_list|()
block|;
specifier|static
name|bool
name|convert
argument_list|(
argument|const AbstractConverterFunction *_this
argument_list|,
argument|const void *in
argument_list|,
argument|void *out
argument_list|)
block|{
specifier|const
name|From
operator|*
name|f
operator|=
name|static_cast
operator|<
specifier|const
name|From
operator|*
operator|>
operator|(
name|in
operator|)
block|;
name|To
operator|*
name|t
operator|=
name|static_cast
operator|<
name|To
operator|*
operator|>
operator|(
name|out
operator|)
block|;
specifier|const
name|ConverterFunctor
operator|*
name|_typedThis
operator|=
name|static_cast
operator|<
specifier|const
name|ConverterFunctor
operator|*
operator|>
operator|(
name|_this
operator|)
block|;
operator|*
name|t
operator|=
name|_typedThis
operator|->
name|m_function
argument_list|(
operator|*
name|f
argument_list|)
block|;
return|return
name|true
return|;
block|}
name|UnaryFunction
name|m_function
expr_stmt|;
end_expr_stmt
begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|T
operator|,
name|bool
operator|>
expr|struct
name|ValueTypeIsMetaType
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|,
name|bool
operator|>
expr|struct
name|AssociativeValueTypeIsMetaType
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|,
name|bool
operator|>
expr|struct
name|IsMetaTypePair
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
operator|,
name|typename
operator|>
expr|struct
name|MetaTypeSmartPointerHelper
expr_stmt|;
end_expr_stmt
begin_decl_stmt
unit|}  class
name|Q_CORE_EXPORT
name|QMetaType
block|{
enum|enum
name|ExtensionFlag
block|{
name|NoExtensionFlags
block|,
name|CreateEx
init|=
literal|0x1
block|,
name|DestroyEx
init|=
literal|0x2
block|,
name|ConstructEx
init|=
literal|0x4
block|,
name|DestructEx
init|=
literal|0x8
block|,
name|NameEx
init|=
literal|0x10
block|,
name|SizeEx
init|=
literal|0x20
block|,
name|CtorEx
init|=
literal|0x40
block|,
name|DtorEx
init|=
literal|0x80
block|,
name|FlagsEx
init|=
literal|0x100
block|,
name|MetaObjectEx
init|=
literal|0x200
block|}
enum|;
name|public
label|:
ifndef|#
directive|ifndef
name|Q_QDOC
comment|// The code that actually gets compiled.
enum|enum
name|Type
block|{
comment|// these are merged with QVariant
name|QT_FOR_EACH_STATIC_TYPE
argument_list|(
argument|QT_DEFINE_METATYPE_ID
argument_list|)
name|FirstCoreType
init|=
name|Bool
block|,
name|LastCoreType
init|=
name|QByteArrayList
block|,
name|FirstGuiType
init|=
name|QFont
block|,
name|LastGuiType
init|=
name|QPolygonF
block|,
name|FirstWidgetsType
init|=
name|QSizePolicy
block|,
name|LastWidgetsType
init|=
name|QSizePolicy
block|,
name|HighestInternalId
init|=
name|LastWidgetsType
block|,
name|QReal
init|=
sizeof|sizeof
argument_list|(
name|qreal
argument_list|)
operator|==
sizeof|sizeof
argument_list|(
name|double
argument_list|)
condition|?
name|Double
else|:
name|Float
block|,
name|UnknownType
init|=
literal|0
block|,
name|User
init|=
literal|1024
block|}
enum|;
else|#
directive|else
comment|// If we are using QDoc it fakes the Type enum looks like this.
enum|enum
name|Type
block|{
name|UnknownType
init|=
literal|0
block|,
name|Bool
init|=
literal|1
block|,
name|Int
init|=
literal|2
block|,
name|UInt
init|=
literal|3
block|,
name|LongLong
init|=
literal|4
block|,
name|ULongLong
init|=
literal|5
block|,
name|Double
init|=
literal|6
block|,
name|Long
init|=
literal|32
block|,
name|Short
init|=
literal|33
block|,
name|Char
init|=
literal|34
block|,
name|ULong
init|=
literal|35
block|,
name|UShort
init|=
literal|36
block|,
name|UChar
init|=
literal|37
block|,
name|Float
init|=
literal|38
block|,
name|VoidStar
init|=
literal|31
block|,
name|QChar
init|=
literal|7
block|,
name|QString
init|=
literal|10
block|,
name|QStringList
init|=
literal|11
block|,
name|QByteArray
init|=
literal|12
block|,
name|QBitArray
init|=
literal|13
block|,
name|QDate
init|=
literal|14
block|,
name|QTime
init|=
literal|15
block|,
name|QDateTime
init|=
literal|16
block|,
name|QUrl
init|=
literal|17
block|,
name|QLocale
init|=
literal|18
block|,
name|QRect
init|=
literal|19
block|,
name|QRectF
init|=
literal|20
block|,
name|QSize
init|=
literal|21
block|,
name|QSizeF
init|=
literal|22
block|,
name|QLine
init|=
literal|23
block|,
name|QLineF
init|=
literal|24
block|,
name|QPoint
init|=
literal|25
block|,
name|QPointF
init|=
literal|26
block|,
name|QRegExp
init|=
literal|27
block|,
name|QEasingCurve
init|=
literal|29
block|,
name|QUuid
init|=
literal|30
block|,
name|QVariant
init|=
literal|41
block|,
name|QModelIndex
init|=
literal|42
block|,
name|QRegularExpression
init|=
literal|44
block|,
name|QJsonValue
init|=
literal|45
block|,
name|QJsonObject
init|=
literal|46
block|,
name|QJsonArray
init|=
literal|47
block|,
name|QJsonDocument
init|=
literal|48
block|,
name|QByteArrayList
init|=
literal|49
block|,
name|QObjectStar
init|=
literal|39
block|,
name|SChar
init|=
literal|40
block|,
name|Void
init|=
literal|43
block|,
name|QVariantMap
init|=
literal|8
block|,
name|QVariantList
init|=
literal|9
block|,
name|QVariantHash
init|=
literal|28
block|,
name|QFont
init|=
literal|64
block|,
name|QPixmap
init|=
literal|65
block|,
name|QBrush
init|=
literal|66
block|,
name|QColor
init|=
literal|67
block|,
name|QPalette
init|=
literal|68
block|,
name|QIcon
init|=
literal|69
block|,
name|QImage
init|=
literal|70
block|,
name|QPolygon
init|=
literal|71
block|,
name|QRegion
init|=
literal|72
block|,
name|QBitmap
init|=
literal|73
block|,
name|QCursor
init|=
literal|74
block|,
name|QKeySequence
init|=
literal|75
block|,
name|QPen
init|=
literal|76
block|,
name|QTextLength
init|=
literal|77
block|,
name|QTextFormat
init|=
literal|78
block|,
name|QMatrix
init|=
literal|79
block|,
name|QTransform
init|=
literal|80
block|,
name|QMatrix4x4
init|=
literal|81
block|,
name|QVector2D
init|=
literal|82
block|,
name|QVector3D
init|=
literal|83
block|,
name|QVector4D
init|=
literal|84
block|,
name|QQuaternion
init|=
literal|85
block|,
name|QPolygonF
init|=
literal|86
block|,
name|QSizePolicy
init|=
literal|121
block|,
name|User
init|=
literal|1024
block|}
enum|;
endif|#
directive|endif
enum|enum
name|TypeFlag
block|{
name|NeedsConstruction
init|=
literal|0x1
block|,
name|NeedsDestruction
init|=
literal|0x2
block|,
name|MovableType
init|=
literal|0x4
block|,
name|PointerToQObject
init|=
literal|0x8
block|,
name|IsEnumeration
init|=
literal|0x10
block|,
name|SharedPointerToQObject
init|=
literal|0x20
block|,
name|WeakPointerToQObject
init|=
literal|0x40
block|,
name|TrackingPointerToQObject
init|=
literal|0x80
block|,
name|WasDeclaredAsMetaType
init|=
literal|0x100
block|,
name|IsGadget
init|=
literal|0x200
block|}
enum|;
name|Q_DECLARE_FLAGS
argument_list|(
argument|TypeFlags
argument_list|,
argument|TypeFlag
argument_list|)
typedef|typedef
name|void
function_decl|(
modifier|*
name|Deleter
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
typedef|typedef
name|void
modifier|*
function_decl|(
modifier|*
name|Creator
function_decl|)
parameter_list|(
specifier|const
name|void
modifier|*
parameter_list|)
function_decl|;
typedef|typedef
name|void
function_decl|(
modifier|*
name|Destructor
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
typedef|typedef
name|void
modifier|*
function_decl|(
modifier|*
name|Constructor
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|)
function_decl|;
typedef|typedef
name|void
function_decl|(
modifier|*
name|SaveOperator
function_decl|)
parameter_list|(
name|QDataStream
modifier|&
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|)
function_decl|;
typedef|typedef
name|void
function_decl|(
modifier|*
name|LoadOperator
function_decl|)
parameter_list|(
name|QDataStream
modifier|&
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|QT_NO_DATASTREAM
specifier|static
name|void
name|registerStreamOperators
parameter_list|(
specifier|const
name|char
modifier|*
name|typeName
parameter_list|,
name|SaveOperator
name|saveOp
parameter_list|,
name|LoadOperator
name|loadOp
parameter_list|)
function_decl|;
specifier|static
name|void
name|registerStreamOperators
parameter_list|(
name|int
name|type
parameter_list|,
name|SaveOperator
name|saveOp
parameter_list|,
name|LoadOperator
name|loadOp
parameter_list|)
function_decl|;
endif|#
directive|endif
specifier|static
name|int
name|registerType
parameter_list|(
specifier|const
name|char
modifier|*
name|typeName
parameter_list|,
name|Deleter
name|deleter
parameter_list|,
name|Creator
name|creator
parameter_list|)
function_decl|;
specifier|static
name|int
name|registerType
argument_list|(
specifier|const
name|char
operator|*
name|typeName
argument_list|,
name|Deleter
name|deleter
argument_list|,
name|Creator
name|creator
argument_list|,
name|Destructor
name|destructor
argument_list|,
name|Constructor
name|constructor
argument_list|,
name|int
name|size
argument_list|,
name|QMetaType
operator|::
name|TypeFlags
name|flags
argument_list|,
specifier|const
name|QMetaObject
operator|*
name|metaObject
argument_list|)
decl_stmt|;
specifier|static
name|int
name|registerNormalizedType
argument_list|(
specifier|const
name|QT_PREPEND_NAMESPACE
argument_list|(
name|QByteArray
argument_list|)
operator|&
name|normalizedTypeName
argument_list|,
name|Deleter
name|deleter
argument_list|,
name|Creator
name|creator
argument_list|,
name|Destructor
name|destructor
argument_list|,
name|Constructor
name|constructor
argument_list|,
name|int
name|size
argument_list|,
name|QMetaType
operator|::
name|TypeFlags
name|flags
argument_list|,
specifier|const
name|QMetaObject
operator|*
name|metaObject
argument_list|)
decl_stmt|;
specifier|static
name|int
name|registerNormalizedType
argument_list|(
specifier|const
name|QT_PREPEND_NAMESPACE
argument_list|(
name|QByteArray
argument_list|)
operator|&
name|normalizedTypeName
argument_list|,
name|Destructor
name|destructor
argument_list|,
name|Constructor
name|constructor
argument_list|,
name|int
name|size
argument_list|,
name|QMetaType
operator|::
name|TypeFlags
name|flags
argument_list|,
specifier|const
name|QMetaObject
operator|*
name|metaObject
argument_list|)
decl_stmt|;
specifier|static
name|int
name|registerTypedef
parameter_list|(
specifier|const
name|char
modifier|*
name|typeName
parameter_list|,
name|int
name|aliasId
parameter_list|)
function_decl|;
specifier|static
name|int
name|registerNormalizedTypedef
argument_list|(
specifier|const
name|QT_PREPEND_NAMESPACE
argument_list|(
name|QByteArray
argument_list|)
operator|&
name|normalizedTypeName
argument_list|,
name|int
name|aliasId
argument_list|)
decl_stmt|;
specifier|static
name|int
name|type
parameter_list|(
specifier|const
name|char
modifier|*
name|typeName
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|Q_QDOC
specifier|static
name|int
name|type
argument_list|(
specifier|const
name|QT_PREPEND_NAMESPACE
argument_list|(
name|QByteArray
argument_list|)
operator|&
name|typeName
argument_list|)
decl_stmt|;
else|#
directive|else
specifier|static
name|int
name|type
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|typeName
parameter_list|)
function_decl|;
endif|#
directive|endif
specifier|static
specifier|const
name|char
modifier|*
name|typeName
parameter_list|(
name|int
name|type
parameter_list|)
function_decl|;
specifier|static
name|int
name|sizeOf
parameter_list|(
name|int
name|type
parameter_list|)
function_decl|;
specifier|static
name|TypeFlags
name|typeFlags
parameter_list|(
name|int
name|type
parameter_list|)
function_decl|;
specifier|static
specifier|const
name|QMetaObject
modifier|*
name|metaObjectForType
parameter_list|(
name|int
name|type
parameter_list|)
function_decl|;
specifier|static
name|bool
name|isRegistered
parameter_list|(
name|int
name|type
parameter_list|)
function_decl|;
specifier|static
name|void
modifier|*
name|create
parameter_list|(
name|int
name|type
parameter_list|,
specifier|const
name|void
modifier|*
name|copy
init|=
literal|0
parameter_list|)
function_decl|;
if|#
directive|if
name|QT_DEPRECATED_SINCE
argument_list|(
literal|5
operator|,
literal|0
argument_list|)
name|QT_DEPRECATED
specifier|static
name|void
modifier|*
name|construct
parameter_list|(
name|int
name|type
parameter_list|,
specifier|const
name|void
modifier|*
name|copy
init|=
literal|0
parameter_list|)
block|{
return|return
name|create
argument_list|(
name|type
argument_list|,
name|copy
argument_list|)
return|;
block|}
endif|#
directive|endif
specifier|static
name|void
name|destroy
parameter_list|(
name|int
name|type
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
function_decl|;
specifier|static
name|void
modifier|*
name|construct
parameter_list|(
name|int
name|type
parameter_list|,
name|void
modifier|*
name|where
parameter_list|,
specifier|const
name|void
modifier|*
name|copy
parameter_list|)
function_decl|;
specifier|static
name|void
name|destruct
parameter_list|(
name|int
name|type
parameter_list|,
name|void
modifier|*
name|where
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|QT_NO_DATASTREAM
specifier|static
name|bool
name|save
parameter_list|(
name|QDataStream
modifier|&
name|stream
parameter_list|,
name|int
name|type
parameter_list|,
specifier|const
name|void
modifier|*
name|data
parameter_list|)
function_decl|;
specifier|static
name|bool
name|load
parameter_list|(
name|QDataStream
modifier|&
name|stream
parameter_list|,
name|int
name|type
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
function_decl|;
endif|#
directive|endif
name|explicit
name|QMetaType
parameter_list|(
specifier|const
name|int
name|type
parameter_list|)
function_decl|;
specifier|inline
operator|~
name|QMetaType
argument_list|()
expr_stmt|;
specifier|inline
name|bool
name|isValid
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
name|bool
name|isRegistered
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
name|int
name|sizeOf
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
name|TypeFlags
name|flags
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
specifier|const
name|QMetaObject
operator|*
name|metaObject
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
name|void
modifier|*
name|create
argument_list|(
specifier|const
name|void
operator|*
name|copy
operator|=
literal|0
argument_list|)
decl|const
decl_stmt|;
specifier|inline
name|void
name|destroy
argument_list|(
name|void
operator|*
name|data
argument_list|)
decl|const
decl_stmt|;
specifier|inline
name|void
modifier|*
name|construct
argument_list|(
name|void
operator|*
name|where
argument_list|,
specifier|const
name|void
operator|*
name|copy
operator|=
literal|0
argument_list|)
decl|const
decl_stmt|;
specifier|inline
name|void
name|destruct
argument_list|(
name|void
operator|*
name|data
argument_list|)
decl|const
decl_stmt|;
name|public
label|:
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
name|bool
name|registerComparators
argument_list|()
block|{
name|Q_STATIC_ASSERT_X
argument_list|(
operator|(
operator|!
name|QMetaTypeId2
operator|<
name|T
operator|>
operator|::
name|IsBuiltIn
operator|)
argument_list|,
literal|"QMetaType::registerComparators: The type must be a custom type."
argument_list|)
block|;
specifier|const
name|int
name|typeId
operator|=
name|qMetaTypeId
operator|<
name|T
operator|>
operator|(
operator|)
block|;
specifier|static
specifier|const
name|QtPrivate
operator|::
name|BuiltInComparatorFunction
operator|<
name|T
operator|>
name|f
block|;
return|return
name|registerComparatorFunction
argument_list|(
operator|&
name|f
argument_list|,
name|typeId
argument_list|)
return|;
block|}
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
name|bool
name|hasRegisteredComparators
argument_list|()
block|{
return|return
name|hasRegisteredComparators
argument_list|(
name|qMetaTypeId
operator|<
name|T
operator|>
operator|(
operator|)
argument_list|)
return|;
block|}
specifier|static
name|bool
name|hasRegisteredComparators
parameter_list|(
name|int
name|typeId
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|QT_NO_DEBUG_STREAM
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
name|bool
name|registerDebugStreamOperator
argument_list|()
block|{
name|Q_STATIC_ASSERT_X
argument_list|(
operator|(
operator|!
name|QMetaTypeId2
operator|<
name|T
operator|>
operator|::
name|IsBuiltIn
operator|)
argument_list|,
literal|"QMetaType::registerDebugStreamOperator: The type must be a custom type."
argument_list|)
block|;
specifier|const
name|int
name|typeId
operator|=
name|qMetaTypeId
operator|<
name|T
operator|>
operator|(
operator|)
block|;
specifier|static
specifier|const
name|QtPrivate
operator|::
name|BuiltInDebugStreamFunction
operator|<
name|T
operator|>
name|f
block|;
return|return
name|registerDebugStreamOperatorFunction
argument_list|(
operator|&
name|f
argument_list|,
name|typeId
argument_list|)
return|;
block|}
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
name|bool
name|hasRegisteredDebugStreamOperator
argument_list|()
block|{
return|return
name|hasRegisteredDebugStreamOperator
argument_list|(
name|qMetaTypeId
operator|<
name|T
operator|>
operator|(
operator|)
argument_list|)
return|;
block|}
specifier|static
name|bool
name|hasRegisteredDebugStreamOperator
parameter_list|(
name|int
name|typeId
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|// implicit conversion supported like double -> float
name|template
operator|<
name|typename
name|From
operator|,
name|typename
name|To
operator|>
specifier|static
name|bool
name|registerConverter
argument_list|()
block|{
return|return
name|registerConverter
operator|<
name|From
operator|,
name|To
operator|>
operator|(
name|QtPrivate
operator|::
name|convertImplicit
operator|<
name|From
operator|,
name|To
operator|>
operator|)
return|;
block|}
ifdef|#
directive|ifdef
name|Q_QDOC
specifier|static
name|bool
name|registerConverter
parameter_list|(
name|MemberFunction
name|function
parameter_list|)
function_decl|;
specifier|static
name|bool
name|registerConverter
parameter_list|(
name|MemberFunctionOk
name|function
parameter_list|)
function_decl|;
specifier|static
name|bool
name|registerConverter
parameter_list|(
name|UnaryFunction
name|function
parameter_list|)
function_decl|;
else|#
directive|else
comment|// member function as in "QString QFont::toString() const"
name|template
operator|<
name|typename
name|From
operator|,
name|typename
name|To
operator|>
specifier|static
name|bool
name|registerConverter
argument_list|(
argument|To(From::*function)() const
argument_list|)
block|{
name|Q_STATIC_ASSERT_X
argument_list|(
operator|(
operator|!
name|QMetaTypeId2
operator|<
name|To
operator|>
operator|::
name|IsBuiltIn
operator|||
operator|!
name|QMetaTypeId2
operator|<
name|From
operator|>
operator|::
name|IsBuiltIn
operator|)
argument_list|,
literal|"QMetaType::registerConverter: At least one of the types must be a custom type."
argument_list|)
block|;
specifier|const
name|int
name|fromTypeId
operator|=
name|qMetaTypeId
operator|<
name|From
operator|>
operator|(
operator|)
block|;
specifier|const
name|int
name|toTypeId
operator|=
name|qMetaTypeId
operator|<
name|To
operator|>
operator|(
operator|)
block|;
specifier|static
specifier|const
name|QtPrivate
operator|::
name|ConverterMemberFunction
operator|<
name|From
block|,
name|To
operator|>
name|f
argument_list|(
name|function
argument_list|)
block|;
return|return
name|registerConverterFunction
argument_list|(
operator|&
name|f
argument_list|,
name|fromTypeId
argument_list|,
name|toTypeId
argument_list|)
return|;
block|}
comment|// member function as in "double QString::toDouble(bool *ok = 0) const"
name|template
operator|<
name|typename
name|From
operator|,
name|typename
name|To
operator|>
specifier|static
name|bool
name|registerConverter
argument_list|(
argument|To(From::*function)(bool*) const
argument_list|)
block|{
name|Q_STATIC_ASSERT_X
argument_list|(
operator|(
operator|!
name|QMetaTypeId2
operator|<
name|To
operator|>
operator|::
name|IsBuiltIn
operator|||
operator|!
name|QMetaTypeId2
operator|<
name|From
operator|>
operator|::
name|IsBuiltIn
operator|)
argument_list|,
literal|"QMetaType::registerConverter: At least one of the types must be a custom type."
argument_list|)
block|;
specifier|const
name|int
name|fromTypeId
operator|=
name|qMetaTypeId
operator|<
name|From
operator|>
operator|(
operator|)
block|;
specifier|const
name|int
name|toTypeId
operator|=
name|qMetaTypeId
operator|<
name|To
operator|>
operator|(
operator|)
block|;
specifier|static
specifier|const
name|QtPrivate
operator|::
name|ConverterMemberFunctionOk
operator|<
name|From
block|,
name|To
operator|>
name|f
argument_list|(
name|function
argument_list|)
block|;
return|return
name|registerConverterFunction
argument_list|(
operator|&
name|f
argument_list|,
name|fromTypeId
argument_list|,
name|toTypeId
argument_list|)
return|;
block|}
comment|// functor or function pointer
name|template
operator|<
name|typename
name|From
operator|,
name|typename
name|To
operator|,
name|typename
name|UnaryFunction
operator|>
specifier|static
name|bool
name|registerConverter
argument_list|(
argument|UnaryFunction function
argument_list|)
block|{
name|Q_STATIC_ASSERT_X
argument_list|(
operator|(
operator|!
name|QMetaTypeId2
operator|<
name|To
operator|>
operator|::
name|IsBuiltIn
operator|||
operator|!
name|QMetaTypeId2
operator|<
name|From
operator|>
operator|::
name|IsBuiltIn
operator|)
argument_list|,
literal|"QMetaType::registerConverter: At least one of the types must be a custom type."
argument_list|)
block|;
specifier|const
name|int
name|fromTypeId
operator|=
name|qMetaTypeId
operator|<
name|From
operator|>
operator|(
operator|)
block|;
specifier|const
name|int
name|toTypeId
operator|=
name|qMetaTypeId
operator|<
name|To
operator|>
operator|(
operator|)
block|;
specifier|static
specifier|const
name|QtPrivate
operator|::
name|ConverterFunctor
operator|<
name|From
block|,
name|To
block|,
name|UnaryFunction
operator|>
name|f
argument_list|(
name|function
argument_list|)
block|;
return|return
name|registerConverterFunction
argument_list|(
operator|&
name|f
argument_list|,
name|fromTypeId
argument_list|,
name|toTypeId
argument_list|)
return|;
block|}
endif|#
directive|endif
specifier|static
name|bool
name|convert
parameter_list|(
specifier|const
name|void
modifier|*
name|from
parameter_list|,
name|int
name|fromTypeId
parameter_list|,
name|void
modifier|*
name|to
parameter_list|,
name|int
name|toTypeId
parameter_list|)
function_decl|;
specifier|static
name|bool
name|compare
parameter_list|(
specifier|const
name|void
modifier|*
name|lhs
parameter_list|,
specifier|const
name|void
modifier|*
name|rhs
parameter_list|,
name|int
name|typeId
parameter_list|,
name|int
modifier|*
name|result
parameter_list|)
function_decl|;
specifier|static
name|bool
name|debugStream
parameter_list|(
name|QDebug
modifier|&
name|dbg
parameter_list|,
specifier|const
name|void
modifier|*
name|rhs
parameter_list|,
name|int
name|typeId
parameter_list|)
function_decl|;
name|template
operator|<
name|typename
name|From
operator|,
name|typename
name|To
operator|>
specifier|static
name|bool
name|hasRegisteredConverterFunction
argument_list|()
block|{
return|return
name|hasRegisteredConverterFunction
argument_list|(
name|qMetaTypeId
operator|<
name|From
operator|>
operator|(
operator|)
argument_list|,
name|qMetaTypeId
operator|<
name|To
operator|>
operator|(
operator|)
argument_list|)
return|;
block|}
specifier|static
name|bool
name|hasRegisteredConverterFunction
parameter_list|(
name|int
name|fromTypeId
parameter_list|,
name|int
name|toTypeId
parameter_list|)
function_decl|;
name|private
label|:
specifier|static
name|QMetaType
name|typeInfo
parameter_list|(
specifier|const
name|int
name|type
parameter_list|)
function_decl|;
specifier|inline
name|QMetaType
argument_list|(
argument|const ExtensionFlag extensionFlags
argument_list|,
argument|const QMetaTypeInterface *info
argument_list|,
argument|Creator creator
argument_list|,
argument|Deleter deleter
argument_list|,
argument|SaveOperator saveOp
argument_list|,
argument|LoadOperator loadOp
argument_list|,
argument|Constructor constructor
argument_list|,
argument|Destructor destructor
argument_list|,
argument|uint sizeOf
argument_list|,
argument|uint theTypeFlags
argument_list|,
argument|int typeId
argument_list|,
argument|const QMetaObject *metaObject
argument_list|)
expr_stmt|;
name|QMetaType
argument_list|(
specifier|const
name|QMetaType
operator|&
name|other
argument_list|)
expr_stmt|;
name|QMetaType
modifier|&
name|operator
init|=
operator|(
specifier|const
name|QMetaType
operator|&
operator|)
decl_stmt|;
specifier|inline
name|bool
name|isExtended
argument_list|(
specifier|const
name|ExtensionFlag
name|flag
argument_list|)
decl|const
block|{
return|return
name|m_extensionFlags
operator|&
name|flag
return|;
block|}
comment|// Methods used for future binary compatible extensions
name|void
name|ctor
parameter_list|(
specifier|const
name|QMetaTypeInterface
modifier|*
name|info
parameter_list|)
function_decl|;
name|void
name|dtor
parameter_list|()
function_decl|;
name|uint
name|sizeExtended
argument_list|()
specifier|const
expr_stmt|;
name|QMetaType
operator|::
name|TypeFlags
name|flagsExtended
argument_list|()
specifier|const
expr_stmt|;
specifier|const
name|QMetaObject
operator|*
name|metaObjectExtended
argument_list|()
specifier|const
expr_stmt|;
name|void
modifier|*
name|createExtended
argument_list|(
specifier|const
name|void
operator|*
name|copy
operator|=
literal|0
argument_list|)
decl|const
decl_stmt|;
name|void
name|destroyExtended
argument_list|(
name|void
operator|*
name|data
argument_list|)
decl|const
decl_stmt|;
name|void
modifier|*
name|constructExtended
argument_list|(
name|void
operator|*
name|where
argument_list|,
specifier|const
name|void
operator|*
name|copy
operator|=
literal|0
argument_list|)
decl|const
decl_stmt|;
name|void
name|destructExtended
argument_list|(
name|void
operator|*
name|data
argument_list|)
decl|const
decl_stmt|;
specifier|static
name|bool
name|registerComparatorFunction
argument_list|(
specifier|const
name|QtPrivate
operator|::
name|AbstractComparatorFunction
operator|*
name|f
argument_list|,
name|int
name|type
argument_list|)
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_DEBUG_STREAM
specifier|static
name|bool
name|registerDebugStreamOperatorFunction
argument_list|(
specifier|const
name|QtPrivate
operator|::
name|AbstractDebugStreamFunction
operator|*
name|f
argument_list|,
name|int
name|type
argument_list|)
decl_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|Q_NO_TEMPLATE_FRIENDS
ifndef|#
directive|ifndef
name|Q_QDOC
name|template
operator|<
name|typename
name|T
operator|>
name|friend
name|bool
name|qRegisterSequentialConverter
argument_list|()
expr_stmt|;
name|template
operator|<
name|typename
operator|,
name|bool
operator|>
name|friend
expr|struct
name|QtPrivate
operator|::
name|ValueTypeIsMetaType
expr_stmt|;
name|template
operator|<
name|typename
operator|,
name|typename
operator|>
name|friend
expr|struct
name|QtPrivate
operator|::
name|ConverterMemberFunction
expr_stmt|;
name|template
operator|<
name|typename
operator|,
name|typename
operator|>
name|friend
expr|struct
name|QtPrivate
operator|::
name|ConverterMemberFunctionOk
expr_stmt|;
name|template
operator|<
name|typename
operator|,
name|typename
operator|,
name|typename
operator|>
name|friend
expr|struct
name|QtPrivate
operator|::
name|ConverterFunctor
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|>
name|friend
name|bool
name|qRegisterAssociativeConverter
argument_list|()
expr_stmt|;
name|template
operator|<
name|typename
operator|,
name|bool
operator|>
name|friend
expr|struct
name|QtPrivate
operator|::
name|AssociativeValueTypeIsMetaType
expr_stmt|;
name|template
operator|<
name|typename
operator|,
name|bool
operator|>
name|friend
expr|struct
name|QtPrivate
operator|::
name|IsMetaTypePair
expr_stmt|;
name|template
operator|<
name|typename
operator|,
name|typename
operator|>
name|friend
expr|struct
name|QtPrivate
operator|::
name|MetaTypeSmartPointerHelper
expr_stmt|;
endif|#
directive|endif
else|#
directive|else
name|public
label|:
endif|#
directive|endif
specifier|static
name|bool
name|registerConverterFunction
argument_list|(
specifier|const
name|QtPrivate
operator|::
name|AbstractConverterFunction
operator|*
name|f
argument_list|,
name|int
name|from
argument_list|,
name|int
name|to
argument_list|)
decl_stmt|;
specifier|static
name|void
name|unregisterConverterFunction
parameter_list|(
name|int
name|from
parameter_list|,
name|int
name|to
parameter_list|)
function_decl|;
name|private
label|:
name|Creator
name|m_creator_unused
decl_stmt|;
name|Deleter
name|m_deleter_unused
decl_stmt|;
name|SaveOperator
name|m_saveOp
decl_stmt|;
name|LoadOperator
name|m_loadOp
decl_stmt|;
name|Constructor
name|m_constructor
decl_stmt|;
name|Destructor
name|m_destructor
decl_stmt|;
name|void
modifier|*
name|m_extension
decl_stmt|;
comment|// space reserved for future use
name|uint
name|m_size
decl_stmt|;
name|uint
name|m_typeFlags
decl_stmt|;
name|uint
name|m_extensionFlags
decl_stmt|;
name|int
name|m_typeId
decl_stmt|;
specifier|const
name|QMetaObject
modifier|*
name|m_metaObject
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_undef
DECL|macro|QT_DEFINE_METATYPE_ID
undef|#
directive|undef
name|QT_DEFINE_METATYPE_ID
end_undef
begin_macro
name|Q_DECLARE_OPERATORS_FOR_FLAGS
argument_list|(
argument|QMetaType::TypeFlags
argument_list|)
end_macro
begin_decl_stmt
name|namespace
name|QtPrivate
block|{
name|template
operator|<
name|typename
name|From
operator|,
name|typename
name|To
operator|>
name|ConverterMemberFunction
operator|<
name|From
operator|,
name|To
operator|>
operator|::
operator|~
name|ConverterMemberFunction
argument_list|()
block|{
name|QMetaType
operator|::
name|unregisterConverterFunction
argument_list|(
name|qMetaTypeId
operator|<
name|From
operator|>
operator|(
operator|)
argument_list|,
name|qMetaTypeId
operator|<
name|To
operator|>
operator|(
operator|)
argument_list|)
block|; }
name|template
operator|<
name|typename
name|From
operator|,
name|typename
name|To
operator|>
name|ConverterMemberFunctionOk
operator|<
name|From
operator|,
name|To
operator|>
operator|::
operator|~
name|ConverterMemberFunctionOk
argument_list|()
block|{
name|QMetaType
operator|::
name|unregisterConverterFunction
argument_list|(
name|qMetaTypeId
operator|<
name|From
operator|>
operator|(
operator|)
argument_list|,
name|qMetaTypeId
operator|<
name|To
operator|>
operator|(
operator|)
argument_list|)
block|; }
name|template
operator|<
name|typename
name|From
operator|,
name|typename
name|To
operator|,
name|typename
name|UnaryFunction
operator|>
name|ConverterFunctor
operator|<
name|From
operator|,
name|To
operator|,
name|UnaryFunction
operator|>
operator|::
operator|~
name|ConverterFunctor
argument_list|()
block|{
name|QMetaType
operator|::
name|unregisterConverterFunction
argument_list|(
name|qMetaTypeId
operator|<
name|From
operator|>
operator|(
operator|)
argument_list|,
name|qMetaTypeId
operator|<
name|To
operator|>
operator|(
operator|)
argument_list|)
block|; }
block|}
end_decl_stmt
begin_decl_stmt
name|namespace
name|QtMetaTypePrivate
block|{
name|template
operator|<
name|typename
name|T
operator|,
name|bool
name|Accepted
operator|=
name|true
operator|>
expr|struct
name|QMetaTypeFunctionHelper
block|{
specifier|static
name|void
name|Delete
argument_list|(
argument|void *t
argument_list|)
block|{
name|delete
name|static_cast
operator|<
name|T
operator|*
operator|>
operator|(
name|t
operator|)
block|;     }
specifier|static
name|void
operator|*
name|Create
argument_list|(
argument|const void *t
argument_list|)
block|{
if|if
condition|(
name|t
condition|)
return|return
name|new
name|T
argument_list|(
operator|*
name|static_cast
operator|<
specifier|const
name|T
operator|*
operator|>
operator|(
name|t
operator|)
argument_list|)
return|;
return|return
name|new
name|T
argument_list|()
return|;
block|}
specifier|static
name|void
name|Destruct
parameter_list|(
name|void
modifier|*
name|t
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
argument|t
argument_list|)
comment|// Silence MSVC that warns for POD types.
name|static_cast
operator|<
name|T
operator|*
operator|>
operator|(
name|t
operator|)
operator|->
expr|~
name|T
argument_list|()
expr_stmt|;
block|}
specifier|static
name|void
modifier|*
name|Construct
parameter_list|(
name|void
modifier|*
name|where
parameter_list|,
specifier|const
name|void
modifier|*
name|t
parameter_list|)
block|{
if|if
condition|(
name|t
condition|)
return|return
name|new
argument_list|(
argument|where
argument_list|)
name|T
argument_list|(
operator|*
name|static_cast
operator|<
specifier|const
name|T
operator|*
operator|>
operator|(
name|t
operator|)
argument_list|)
return|;
return|return
name|new
argument_list|(
argument|where
argument_list|)
name|T
return|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_DATASTREAM
specifier|static
name|void
name|Save
parameter_list|(
name|QDataStream
modifier|&
name|stream
parameter_list|,
specifier|const
name|void
modifier|*
name|t
parameter_list|)
block|{
name|stream
operator|<<
operator|*
name|static_cast
operator|<
specifier|const
name|T
operator|*
operator|>
operator|(
name|t
operator|)
expr_stmt|;
block|}
specifier|static
name|void
name|Load
parameter_list|(
name|QDataStream
modifier|&
name|stream
parameter_list|,
name|void
modifier|*
name|t
parameter_list|)
block|{
name|stream
operator|>>
operator|*
name|static_cast
operator|<
name|T
operator|*
operator|>
operator|(
name|t
operator|)
expr_stmt|;
block|}
endif|#
directive|endif
comment|// QT_NO_DATASTREAM
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|QMetaTypeFunctionHelper
operator|<
name|T
operator|,
comment|/* Accepted */
name|false
operator|>
block|{
specifier|static
name|void
name|Delete
argument_list|(
argument|void *
argument_list|)
block|{}
specifier|static
name|void
operator|*
name|Create
argument_list|(
argument|const void *
argument_list|)
block|{
return|return
literal|0
return|;
block|}
specifier|static
name|void
name|Destruct
argument_list|(
argument|void *
argument_list|)
block|{}
specifier|static
name|void
operator|*
name|Construct
argument_list|(
argument|void *
argument_list|,
argument|const void *
argument_list|)
block|{
return|return
literal|0
return|;
block|}
end_expr_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DATASTREAM
end_ifndef
begin_function
specifier|static
name|void
name|Save
parameter_list|(
name|QDataStream
modifier|&
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|)
block|{}
end_function
begin_function
specifier|static
name|void
name|Load
parameter_list|(
name|QDataStream
modifier|&
parameter_list|,
name|void
modifier|*
parameter_list|)
block|{}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DATASTREAM
end_comment
begin_expr_stmt
unit|};
name|template
operator|<
operator|>
expr|struct
name|QMetaTypeFunctionHelper
operator|<
name|void
operator|,
comment|/* Accepted */
name|true
operator|>
operator|:
name|public
name|QMetaTypeFunctionHelper
operator|<
name|void
operator|,
comment|/* Accepted */
name|false
operator|>
block|{}
expr_stmt|;
end_expr_stmt
begin_struct
struct|struct
name|VariantData
block|{
name|VariantData
argument_list|(
argument|const int metaTypeId_
argument_list|,
argument|const void *data_
argument_list|,
argument|const uint flags_
argument_list|)
block|:
name|metaTypeId
argument_list|(
name|metaTypeId_
argument_list|)
operator|,
name|data
argument_list|(
name|data_
argument_list|)
operator|,
name|flags
argument_list|(
argument|flags_
argument_list|)
block|{     }
name|VariantData
argument_list|(
specifier|const
name|VariantData
operator|&
name|other
argument_list|)
operator|:
name|metaTypeId
argument_list|(
name|other
operator|.
name|metaTypeId
argument_list|)
operator|,
name|data
argument_list|(
name|other
operator|.
name|data
argument_list|)
operator|,
name|flags
argument_list|(
argument|other.flags
argument_list|)
block|{}
specifier|const
name|int
name|metaTypeId
expr_stmt|;
specifier|const
name|void
modifier|*
name|data
decl_stmt|;
specifier|const
name|uint
name|flags
decl_stmt|;
name|private
label|:
comment|// copy constructor allowed to be implicit to silence level 4 warning from MSVC
name|VariantData
modifier|&
name|operator
init|=
operator|(
specifier|const
name|VariantData
operator|&
operator|)
name|Q_DECL_EQ_DELETE
decl_stmt|;
block|}
struct|;
end_struct
begin_expr_stmt
name|template
operator|<
name|typename
name|const_iterator
operator|>
expr|struct
name|IteratorOwnerCommon
block|{
specifier|static
name|void
name|assign
argument_list|(
argument|void **ptr
argument_list|,
argument|const_iterator iterator
argument_list|)
block|{
operator|*
name|ptr
operator|=
name|new
name|const_iterator
argument_list|(
name|iterator
argument_list|)
block|;     }
specifier|static
name|void
name|assign
argument_list|(
argument|void **ptr
argument_list|,
argument|void * const * src
argument_list|)
block|{
operator|*
name|ptr
operator|=
name|new
name|const_iterator
argument_list|(
operator|*
name|static_cast
operator|<
name|const_iterator
operator|*
operator|>
operator|(
operator|*
name|src
operator|)
argument_list|)
block|;     }
specifier|static
name|void
name|advance
argument_list|(
argument|void **iterator
argument_list|,
argument|int step
argument_list|)
block|{
name|const_iterator
operator|&
name|it
operator|=
operator|*
name|static_cast
operator|<
name|const_iterator
operator|*
operator|>
operator|(
operator|*
name|iterator
operator|)
block|;
name|std
operator|::
name|advance
argument_list|(
name|it
argument_list|,
name|step
argument_list|)
block|;     }
specifier|static
name|void
name|destroy
argument_list|(
argument|void **ptr
argument_list|)
block|{
name|delete
name|static_cast
operator|<
name|const_iterator
operator|*
operator|>
operator|(
operator|*
name|ptr
operator|)
block|;     }
specifier|static
name|bool
name|equal
argument_list|(
argument|void * const *it
argument_list|,
argument|void * const *other
argument_list|)
block|{
return|return
operator|*
name|static_cast
operator|<
name|const_iterator
operator|*
operator|>
operator|(
operator|*
name|it
operator|)
operator|==
operator|*
name|static_cast
operator|<
name|const_iterator
operator|*
operator|>
operator|(
operator|*
name|other
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|const_iterator
operator|>
expr|struct
name|IteratorOwner
operator|:
name|IteratorOwnerCommon
operator|<
name|const_iterator
operator|>
block|{
specifier|static
specifier|const
name|void
operator|*
name|getData
argument_list|(
argument|void * const *iterator
argument_list|)
block|{
return|return
operator|&
operator|*
operator|*
name|static_cast
operator|<
name|const_iterator
operator|*
operator|>
operator|(
operator|*
name|iterator
operator|)
return|;
block|}
specifier|static
specifier|const
name|void
operator|*
name|getData
argument_list|(
argument|const_iterator it
argument_list|)
block|{
return|return
operator|&
operator|*
name|it
return|;
block|}
end_expr_stmt
begin_struct
unit|};
struct|struct
name|Q_CORE_EXPORT
name|VectorBoolElements
block|{
specifier|static
specifier|const
name|bool
name|true_element
decl_stmt|;
specifier|static
specifier|const
name|bool
name|false_element
decl_stmt|;
block|}
struct|;
end_struct
begin_expr_stmt
name|template
operator|<
operator|>
expr|struct
name|IteratorOwner
operator|<
name|std
operator|::
name|vector
operator|<
name|bool
operator|>
operator|::
name|const_iterator
operator|>
operator|:
name|IteratorOwnerCommon
operator|<
name|std
operator|::
name|vector
operator|<
name|bool
operator|>
operator|::
name|const_iterator
operator|>
block|{
name|public
operator|:
specifier|static
specifier|const
name|void
operator|*
name|getData
argument_list|(
argument|void * const *iterator
argument_list|)
block|{
return|return
operator|*
operator|*
name|static_cast
operator|<
name|std
operator|::
name|vector
operator|<
name|bool
operator|>
operator|::
name|const_iterator
operator|*
operator|>
operator|(
operator|*
name|iterator
operator|)
operator|?
operator|&
name|VectorBoolElements
operator|::
name|true_element
operator|:
operator|&
name|VectorBoolElements
operator|::
name|false_element
return|;
block|}
specifier|static
specifier|const
name|void
operator|*
name|getData
argument_list|(
argument|const std::vector<bool>::const_iterator& it
argument_list|)
block|{
return|return
operator|*
name|it
condition|?
operator|&
name|VectorBoolElements
operator|::
name|true_element
else|:
operator|&
name|VectorBoolElements
operator|::
name|false_element
return|;
block|}
end_expr_stmt
begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|value_type
operator|>
expr|struct
name|IteratorOwner
operator|<
specifier|const
name|value_type
operator|*
operator|>
block|{
name|private
operator|:
comment|// We need to disable typed overloads of assign() and getData() if the value_type
comment|// is void* to avoid overloads conflicts. We do it by injecting unaccessible Dummy
comment|// type as part of the overload signature.
expr|struct
name|Dummy
block|{}
block|;
typedef|typedef
name|typename
name|QtPrivate
operator|::
name|if_
operator|<
name|QtPrivate
operator|::
name|is_same
operator|<
name|value_type
operator|,
name|void
operator|*
operator|>
operator|::
name|value
operator|,
name|Dummy
operator|,
name|value_type
operator|>
operator|::
name|type
name|value_type_OR_Dummy
expr_stmt|;
name|public
operator|:
specifier|static
name|void
name|assign
argument_list|(
argument|void **ptr
argument_list|,
argument|const value_type_OR_Dummy *iterator
argument_list|)
block|{
operator|*
name|ptr
operator|=
name|const_cast
operator|<
name|value_type
operator|*
operator|>
operator|(
name|iterator
operator|)
block|;     }
specifier|static
name|void
name|assign
argument_list|(
argument|void **ptr
argument_list|,
argument|void * const * src
argument_list|)
block|{
operator|*
name|ptr
operator|=
name|static_cast
operator|<
name|value_type
operator|*
operator|>
operator|(
operator|*
name|src
operator|)
block|;     }
specifier|static
name|void
name|advance
argument_list|(
argument|void **iterator
argument_list|,
argument|int step
argument_list|)
block|{
name|value_type
operator|*
name|it
operator|=
name|static_cast
operator|<
name|value_type
operator|*
operator|>
operator|(
operator|*
name|iterator
operator|)
block|;
name|std
operator|::
name|advance
argument_list|(
name|it
argument_list|,
name|step
argument_list|)
block|;
operator|*
name|iterator
operator|=
name|it
block|;     }
specifier|static
name|void
name|destroy
argument_list|(
argument|void **
argument_list|)
block|{     }
specifier|static
specifier|const
name|void
operator|*
name|getData
argument_list|(
argument|void * const *iterator
argument_list|)
block|{
return|return
operator|*
name|iterator
return|;
block|}
end_expr_stmt
begin_function
specifier|static
specifier|const
name|void
modifier|*
name|getData
parameter_list|(
specifier|const
name|value_type_OR_Dummy
modifier|*
name|it
parameter_list|)
block|{
return|return
name|it
return|;
block|}
end_function
begin_function
specifier|static
name|bool
name|equal
parameter_list|(
name|void
modifier|*
specifier|const
modifier|*
name|it
parameter_list|,
name|void
modifier|*
specifier|const
modifier|*
name|other
parameter_list|)
block|{
return|return
name|static_cast
operator|<
name|value_type
operator|*
operator|>
operator|(
operator|*
name|it
operator|)
operator|==
name|static_cast
operator|<
name|value_type
operator|*
operator|>
operator|(
operator|*
name|other
operator|)
return|;
block|}
end_function
begin_enum
unit|};
enum|enum
name|IteratorCapability
block|{
name|ForwardCapability
init|=
literal|1
block|,
name|BiDirectionalCapability
init|=
literal|2
block|,
name|RandomAccessCapability
init|=
literal|4
block|}
enum|;
end_enum
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Category
operator|=
name|typename
name|std
operator|::
name|iterator_traits
operator|<
name|typename
name|T
operator|::
name|const_iterator
operator|>
operator|::
name|iterator_category
operator|>
expr|struct
name|CapabilitiesImpl
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|CapabilitiesImpl
operator|<
name|T
operator|,
name|std
operator|::
name|forward_iterator_tag
operator|>
block|{ enum
block|{
name|IteratorCapabilities
operator|=
name|ForwardCapability
block|}
block|; }
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|CapabilitiesImpl
operator|<
name|T
operator|,
name|std
operator|::
name|bidirectional_iterator_tag
operator|>
block|{ enum
block|{
name|IteratorCapabilities
operator|=
name|BiDirectionalCapability
operator||
name|ForwardCapability
block|}
block|; }
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|CapabilitiesImpl
operator|<
name|T
operator|,
name|std
operator|::
name|random_access_iterator_tag
operator|>
block|{ enum
block|{
name|IteratorCapabilities
operator|=
name|RandomAccessCapability
operator||
name|BiDirectionalCapability
operator||
name|ForwardCapability
block|}
block|; }
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|ContainerAPI
operator|:
name|CapabilitiesImpl
operator|<
name|T
operator|>
block|{
specifier|static
name|int
name|size
argument_list|(
argument|const T *t
argument_list|)
block|{
return|return
name|int
argument_list|(
name|std
operator|::
name|distance
argument_list|(
name|t
operator|->
name|begin
argument_list|()
argument_list|,
name|t
operator|->
name|end
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|ContainerAPI
operator|<
name|QList
operator|<
name|T
operator|>
expr|>
operator|:
name|CapabilitiesImpl
operator|<
name|QList
operator|<
name|T
operator|>
expr|>
block|{
specifier|static
name|int
name|size
argument_list|(
argument|const QList<T> *t
argument_list|)
block|{
return|return
name|t
operator|->
name|size
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|ContainerAPI
operator|<
name|QVector
operator|<
name|T
operator|>
expr|>
operator|:
name|CapabilitiesImpl
operator|<
name|QVector
operator|<
name|T
operator|>
expr|>
block|{
specifier|static
name|int
name|size
argument_list|(
argument|const QVector<T> *t
argument_list|)
block|{
return|return
name|t
operator|->
name|size
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|ContainerAPI
operator|<
name|std
operator|::
name|vector
operator|<
name|T
operator|>
expr|>
operator|:
name|CapabilitiesImpl
operator|<
name|std
operator|::
name|vector
operator|<
name|T
operator|>
expr|>
block|{
specifier|static
name|int
name|size
argument_list|(
argument|const std::vector<T> *t
argument_list|)
block|{
return|return
name|int
argument_list|(
name|t
operator|->
name|size
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|ContainerAPI
operator|<
name|std
operator|::
name|list
operator|<
name|T
operator|>
expr|>
operator|:
name|CapabilitiesImpl
operator|<
name|std
operator|::
name|list
operator|<
name|T
operator|>
expr|>
block|{
specifier|static
name|int
name|size
argument_list|(
argument|const std::list<T> *t
argument_list|)
block|{
return|return
name|int
argument_list|(
name|t
operator|->
name|size
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt
begin_decl_stmt
unit|};
name|class
name|QSequentialIterableImpl
block|{
name|public
label|:
specifier|const
name|void
modifier|*
name|_iterable
decl_stmt|;
name|void
modifier|*
name|_iterator
decl_stmt|;
name|int
name|_metaType_id
decl_stmt|;
name|uint
name|_metaType_flags
decl_stmt|;
name|uint
name|_iteratorCapabilities
decl_stmt|;
typedef|typedef
name|int
function_decl|(
modifier|*
name|sizeFunc
function_decl|)
parameter_list|(
specifier|const
name|void
modifier|*
name|p
parameter_list|)
function_decl|;
typedef|typedef
specifier|const
name|void
modifier|*
function_decl|(
modifier|*
name|atFunc
function_decl|)
parameter_list|(
specifier|const
name|void
modifier|*
name|p
parameter_list|,
name|int
parameter_list|)
function_decl|;
typedef|typedef
name|void
function_decl|(
modifier|*
name|moveIteratorFunc
function_decl|)
parameter_list|(
specifier|const
name|void
modifier|*
name|p
parameter_list|,
name|void
modifier|*
modifier|*
parameter_list|)
function_decl|;
typedef|typedef
name|void
function_decl|(
modifier|*
name|advanceFunc
function_decl|)
parameter_list|(
name|void
modifier|*
modifier|*
name|p
parameter_list|,
name|int
parameter_list|)
function_decl|;
typedef|typedef
name|VariantData
function_decl|(
modifier|*
name|getFunc
function_decl|)
parameter_list|(
name|void
modifier|*
specifier|const
modifier|*
name|p
parameter_list|,
name|int
name|metaTypeId
parameter_list|,
name|uint
name|flags
parameter_list|)
function_decl|;
typedef|typedef
name|void
function_decl|(
modifier|*
name|destroyIterFunc
function_decl|)
parameter_list|(
name|void
modifier|*
modifier|*
name|p
parameter_list|)
function_decl|;
typedef|typedef
name|bool
function_decl|(
modifier|*
name|equalIterFunc
function_decl|)
parameter_list|(
name|void
modifier|*
specifier|const
modifier|*
name|p
parameter_list|,
name|void
modifier|*
specifier|const
modifier|*
name|other
parameter_list|)
function_decl|;
typedef|typedef
name|void
function_decl|(
modifier|*
name|copyIterFunc
function_decl|)
parameter_list|(
name|void
modifier|*
modifier|*
parameter_list|,
name|void
modifier|*
specifier|const
modifier|*
parameter_list|)
function_decl|;
name|sizeFunc
name|_size
decl_stmt|;
name|atFunc
name|_at
decl_stmt|;
name|moveIteratorFunc
name|_moveToBegin
decl_stmt|;
name|moveIteratorFunc
name|_moveToEnd
decl_stmt|;
name|advanceFunc
name|_advance
decl_stmt|;
name|getFunc
name|_get
decl_stmt|;
name|destroyIterFunc
name|_destroyIter
decl_stmt|;
name|equalIterFunc
name|_equalIter
decl_stmt|;
name|copyIterFunc
name|_copyIter
decl_stmt|;
name|template
operator|<
name|class
name|T
operator|>
specifier|static
name|int
name|sizeImpl
argument_list|(
argument|const void *p
argument_list|)
block|{
return|return
name|ContainerAPI
operator|<
name|T
operator|>
operator|::
name|size
argument_list|(
name|static_cast
operator|<
specifier|const
name|T
operator|*
operator|>
operator|(
name|p
operator|)
argument_list|)
return|;
block|}
name|template
operator|<
name|class
name|T
operator|>
specifier|static
specifier|const
name|void
operator|*
name|atImpl
argument_list|(
argument|const void *p
argument_list|,
argument|int idx
argument_list|)
block|{
name|typename
name|T
operator|::
name|const_iterator
name|i
operator|=
name|static_cast
operator|<
specifier|const
name|T
operator|*
operator|>
operator|(
name|p
operator|)
operator|->
name|begin
argument_list|()
block|;
name|std
operator|::
name|advance
argument_list|(
name|i
argument_list|,
name|idx
argument_list|)
block|;
return|return
name|IteratorOwner
operator|<
name|typename
name|T
operator|::
name|const_iterator
operator|>
operator|::
name|getData
argument_list|(
name|i
argument_list|)
return|;
block|}
name|template
operator|<
name|class
name|T
operator|>
specifier|static
name|void
name|moveToBeginImpl
argument_list|(
argument|const void *container
argument_list|,
argument|void **iterator
argument_list|)
block|{
name|IteratorOwner
operator|<
name|typename
name|T
operator|::
name|const_iterator
operator|>
operator|::
name|assign
argument_list|(
name|iterator
argument_list|,
name|static_cast
operator|<
specifier|const
name|T
operator|*
operator|>
operator|(
name|container
operator|)
operator|->
name|begin
argument_list|()
argument_list|)
block|; }
name|template
operator|<
name|class
name|T
operator|>
specifier|static
name|void
name|moveToEndImpl
argument_list|(
argument|const void *container
argument_list|,
argument|void **iterator
argument_list|)
block|{
name|IteratorOwner
operator|<
name|typename
name|T
operator|::
name|const_iterator
operator|>
operator|::
name|assign
argument_list|(
name|iterator
argument_list|,
name|static_cast
operator|<
specifier|const
name|T
operator|*
operator|>
operator|(
name|container
operator|)
operator|->
name|end
argument_list|()
argument_list|)
block|; }
name|template
operator|<
name|class
name|T
operator|>
specifier|static
name|VariantData
name|getImpl
argument_list|(
argument|void * const *iterator
argument_list|,
argument|int metaTypeId
argument_list|,
argument|uint flags
argument_list|)
block|{
return|return
name|VariantData
argument_list|(
argument|metaTypeId
argument_list|,
argument|IteratorOwner<typename T::const_iterator>::getData(iterator)
argument_list|,
argument|flags
argument_list|)
return|;
block|}
name|public
label|:
name|template
operator|<
name|class
name|T
operator|>
name|QSequentialIterableImpl
argument_list|(
specifier|const
name|T
operator|*
name|p
argument_list|)
operator|:
name|_iterable
argument_list|(
name|p
argument_list|)
operator|,
name|_iterator
argument_list|(
literal|0
argument_list|)
operator|,
name|_metaType_id
argument_list|(
argument|qMetaTypeId<typename T::value_type>()
argument_list|)
operator|,
name|_metaType_flags
argument_list|(
argument|QTypeInfo<typename T::value_type>::isPointer
argument_list|)
operator|,
name|_iteratorCapabilities
argument_list|(
name|ContainerAPI
operator|<
name|T
operator|>
operator|::
name|IteratorCapabilities
argument_list|)
operator|,
name|_size
argument_list|(
name|sizeImpl
operator|<
name|T
operator|>
argument_list|)
operator|,
name|_at
argument_list|(
name|atImpl
operator|<
name|T
operator|>
argument_list|)
operator|,
name|_moveToBegin
argument_list|(
name|moveToBeginImpl
operator|<
name|T
operator|>
argument_list|)
operator|,
name|_moveToEnd
argument_list|(
name|moveToEndImpl
operator|<
name|T
operator|>
argument_list|)
operator|,
name|_advance
argument_list|(
argument|IteratorOwner<typename T::const_iterator>::advance
argument_list|)
operator|,
name|_get
argument_list|(
name|getImpl
operator|<
name|T
operator|>
argument_list|)
operator|,
name|_destroyIter
argument_list|(
argument|IteratorOwner<typename T::const_iterator>::destroy
argument_list|)
operator|,
name|_equalIter
argument_list|(
argument|IteratorOwner<typename T::const_iterator>::equal
argument_list|)
operator|,
name|_copyIter
argument_list|(
argument|IteratorOwner<typename T::const_iterator>::assign
argument_list|)
block|{     }
name|QSequentialIterableImpl
argument_list|()
operator|:
name|_iterable
argument_list|(
literal|0
argument_list|)
operator|,
name|_iterator
argument_list|(
literal|0
argument_list|)
operator|,
name|_metaType_id
argument_list|(
name|QMetaType
operator|::
name|UnknownType
argument_list|)
operator|,
name|_metaType_flags
argument_list|(
literal|0
argument_list|)
operator|,
name|_iteratorCapabilities
argument_list|(
literal|0
argument_list|)
operator|,
name|_size
argument_list|(
literal|0
argument_list|)
operator|,
name|_at
argument_list|(
literal|0
argument_list|)
operator|,
name|_moveToBegin
argument_list|(
literal|0
argument_list|)
operator|,
name|_moveToEnd
argument_list|(
literal|0
argument_list|)
operator|,
name|_advance
argument_list|(
literal|0
argument_list|)
operator|,
name|_get
argument_list|(
literal|0
argument_list|)
operator|,
name|_destroyIter
argument_list|(
literal|0
argument_list|)
operator|,
name|_equalIter
argument_list|(
literal|0
argument_list|)
operator|,
name|_copyIter
argument_list|(
literal|0
argument_list|)
block|{     }
specifier|inline
name|void
name|moveToBegin
argument_list|()
block|{
name|_moveToBegin
argument_list|(
name|_iterable
argument_list|,
operator|&
name|_iterator
argument_list|)
block|; }
specifier|inline
name|void
name|moveToEnd
argument_list|()
block|{
name|_moveToEnd
argument_list|(
name|_iterable
argument_list|,
operator|&
name|_iterator
argument_list|)
block|; }
specifier|inline
name|bool
name|equal
argument_list|(
argument|const QSequentialIterableImpl&other
argument_list|)
specifier|const
block|{
return|return
name|_equalIter
argument_list|(
operator|&
name|_iterator
argument_list|,
operator|&
name|other
operator|.
name|_iterator
argument_list|)
return|;
block|}
specifier|inline
name|QSequentialIterableImpl
modifier|&
name|advance
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|i
operator|>
literal|0
operator|||
name|_iteratorCapabilities
operator|&
name|BiDirectionalCapability
argument_list|)
expr_stmt|;
name|_advance
argument_list|(
operator|&
name|_iterator
argument_list|,
name|i
argument_list|)
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
specifier|inline
name|VariantData
name|getCurrent
argument_list|()
specifier|const
block|{
return|return
name|_get
argument_list|(
operator|&
name|_iterator
argument_list|,
name|_metaType_id
argument_list|,
name|_metaType_flags
argument_list|)
return|;
block|}
name|VariantData
name|at
argument_list|(
name|int
name|idx
argument_list|)
decl|const
block|{
return|return
name|VariantData
argument_list|(
name|_metaType_id
argument_list|,
name|_at
argument_list|(
name|_iterable
argument_list|,
name|idx
argument_list|)
argument_list|,
name|_metaType_flags
argument_list|)
return|;
block|}
name|int
name|size
argument_list|()
specifier|const
block|{
name|Q_ASSERT
argument_list|(
name|_iterable
argument_list|)
block|;
return|return
name|_size
argument_list|(
name|_iterable
argument_list|)
return|;
block|}
specifier|inline
name|void
name|destroyIter
parameter_list|()
block|{
name|_destroyIter
argument_list|(
operator|&
name|_iterator
argument_list|)
expr_stmt|;
block|}
name|void
name|copy
parameter_list|(
specifier|const
name|QSequentialIterableImpl
modifier|&
name|other
parameter_list|)
block|{
operator|*
name|this
operator|=
name|other
expr_stmt|;
name|_copyIter
argument_list|(
operator|&
name|_iterator
argument_list|,
operator|&
name|other
operator|.
name|_iterator
argument_list|)
expr_stmt|;
block|}
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|From
operator|>
expr|struct
name|QSequentialIterableConvertFunctor
block|{
name|QSequentialIterableImpl
name|operator
argument_list|()
operator|(
specifier|const
name|From
operator|&
name|f
operator|)
specifier|const
block|{
return|return
name|QSequentialIterableImpl
argument_list|(
operator|&
name|f
argument_list|)
return|;
block|}
end_expr_stmt
begin_macro
unit|}; }  namespace
name|QtMetaTypePrivate
end_macro
begin_block
block|{
name|template
operator|<
name|typename
name|T
operator|,
name|bool
operator|=
name|QtPrivate
operator|::
name|is_same
operator|<
name|typename
name|T
operator|::
name|const_iterator
operator|::
name|value_type
operator|,
name|typename
name|T
operator|::
name|mapped_type
operator|>
operator|::
name|value
operator|>
expr|struct
name|AssociativeContainerAccessor
block|{
specifier|static
specifier|const
name|typename
name|T
operator|::
name|key_type
operator|&
name|getKey
argument_list|(
argument|const typename T::const_iterator&it
argument_list|)
block|{
return|return
name|it
operator|.
name|key
argument_list|()
return|;
block|}
specifier|static
specifier|const
name|typename
name|T
operator|::
name|mapped_type
operator|&
name|getValue
argument_list|(
argument|const typename T::const_iterator&it
argument_list|)
block|{
return|return
name|it
operator|.
name|value
argument_list|()
return|;
block|}
block|}
end_block
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|,
name|bool
operator|=
name|QtPrivate
operator|::
name|is_same
operator|<
name|typename
name|T
operator|::
name|const_iterator
operator|::
name|value_type
operator|,
name|std
operator|::
name|pair
operator|<
specifier|const
name|typename
name|T
operator|::
name|key_type
operator|,
name|typename
name|T
operator|::
name|mapped_type
operator|>
expr|>
operator|::
name|value
operator|>
expr|struct
name|StlStyleAssociativeContainerAccessor
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|StlStyleAssociativeContainerAccessor
operator|<
name|T
operator|,
name|true
operator|>
block|{
specifier|static
specifier|const
name|typename
name|T
operator|::
name|key_type
operator|&
name|getKey
argument_list|(
argument|const typename T::const_iterator&it
argument_list|)
block|{
return|return
name|it
operator|->
name|first
return|;
block|}
specifier|static
specifier|const
name|typename
name|T
operator|::
name|mapped_type
operator|&
name|getValue
argument_list|(
argument|const typename T::const_iterator&it
argument_list|)
block|{
return|return
name|it
operator|->
name|second
return|;
block|}
end_expr_stmt
begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|AssociativeContainerAccessor
operator|<
name|T
operator|,
name|false
operator|>
operator|:
name|public
name|StlStyleAssociativeContainerAccessor
operator|<
name|T
operator|>
block|{ }
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|class
name|QAssociativeIterableImpl
block|{
name|public
label|:
specifier|const
name|void
modifier|*
name|_iterable
decl_stmt|;
name|void
modifier|*
name|_iterator
decl_stmt|;
name|int
name|_metaType_id_key
decl_stmt|;
name|uint
name|_metaType_flags_key
decl_stmt|;
name|int
name|_metaType_id_value
decl_stmt|;
name|uint
name|_metaType_flags_value
decl_stmt|;
typedef|typedef
name|int
function_decl|(
modifier|*
name|sizeFunc
function_decl|)
parameter_list|(
specifier|const
name|void
modifier|*
name|p
parameter_list|)
function_decl|;
typedef|typedef
name|void
function_decl|(
modifier|*
name|findFunc
function_decl|)
parameter_list|(
specifier|const
name|void
modifier|*
name|container
parameter_list|,
specifier|const
name|void
modifier|*
name|p
parameter_list|,
name|void
modifier|*
modifier|*
name|iterator
parameter_list|)
function_decl|;
typedef|typedef
name|void
function_decl|(
modifier|*
name|beginFunc
function_decl|)
parameter_list|(
specifier|const
name|void
modifier|*
name|p
parameter_list|,
name|void
modifier|*
modifier|*
parameter_list|)
function_decl|;
typedef|typedef
name|void
function_decl|(
modifier|*
name|advanceFunc
function_decl|)
parameter_list|(
name|void
modifier|*
modifier|*
name|p
parameter_list|,
name|int
parameter_list|)
function_decl|;
typedef|typedef
name|VariantData
function_decl|(
modifier|*
name|getFunc
function_decl|)
parameter_list|(
name|void
modifier|*
specifier|const
modifier|*
name|p
parameter_list|,
name|int
name|metaTypeId
parameter_list|,
name|uint
name|flags
parameter_list|)
function_decl|;
typedef|typedef
name|void
function_decl|(
modifier|*
name|destroyIterFunc
function_decl|)
parameter_list|(
name|void
modifier|*
modifier|*
name|p
parameter_list|)
function_decl|;
typedef|typedef
name|bool
function_decl|(
modifier|*
name|equalIterFunc
function_decl|)
parameter_list|(
name|void
modifier|*
specifier|const
modifier|*
name|p
parameter_list|,
name|void
modifier|*
specifier|const
modifier|*
name|other
parameter_list|)
function_decl|;
typedef|typedef
name|void
function_decl|(
modifier|*
name|copyIterFunc
function_decl|)
parameter_list|(
name|void
modifier|*
modifier|*
parameter_list|,
name|void
modifier|*
specifier|const
modifier|*
parameter_list|)
function_decl|;
name|sizeFunc
name|_size
decl_stmt|;
name|findFunc
name|_find
decl_stmt|;
name|beginFunc
name|_begin
decl_stmt|;
name|beginFunc
name|_end
decl_stmt|;
name|advanceFunc
name|_advance
decl_stmt|;
name|getFunc
name|_getKey
decl_stmt|;
name|getFunc
name|_getValue
decl_stmt|;
name|destroyIterFunc
name|_destroyIter
decl_stmt|;
name|equalIterFunc
name|_equalIter
decl_stmt|;
name|copyIterFunc
name|_copyIter
decl_stmt|;
name|template
operator|<
name|class
name|T
operator|>
specifier|static
name|int
name|sizeImpl
argument_list|(
argument|const void *p
argument_list|)
block|{
return|return
name|int
argument_list|(
name|std
operator|::
name|distance
argument_list|(
name|static_cast
operator|<
specifier|const
name|T
operator|*
operator|>
operator|(
name|p
operator|)
operator|->
name|begin
argument_list|()
argument_list|,
name|static_cast
operator|<
specifier|const
name|T
operator|*
operator|>
operator|(
name|p
operator|)
operator|->
name|end
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
name|template
operator|<
name|class
name|T
operator|>
specifier|static
name|void
name|findImpl
argument_list|(
argument|const void *container
argument_list|,
argument|const void *p
argument_list|,
argument|void **iterator
argument_list|)
block|{
name|IteratorOwner
operator|<
name|typename
name|T
operator|::
name|const_iterator
operator|>
operator|::
name|assign
argument_list|(
name|iterator
argument_list|,
name|static_cast
operator|<
specifier|const
name|T
operator|*
operator|>
operator|(
name|container
operator|)
operator|->
name|find
operator|(
operator|*
name|static_cast
operator|<
specifier|const
name|typename
name|T
operator|::
name|key_type
operator|*
operator|>
operator|(
name|p
operator|)
operator|)
argument_list|)
block|; }
name|template
operator|<
name|class
name|T
operator|>
specifier|static
name|void
name|advanceImpl
argument_list|(
argument|void **p
argument_list|,
argument|int step
argument_list|)
block|{
name|std
operator|::
name|advance
argument_list|(
argument|*static_cast<typename T::const_iterator*>(*p)
argument_list|,
argument|step
argument_list|)
block|; }
name|template
operator|<
name|class
name|T
operator|>
specifier|static
name|void
name|beginImpl
argument_list|(
argument|const void *container
argument_list|,
argument|void **iterator
argument_list|)
block|{
name|IteratorOwner
operator|<
name|typename
name|T
operator|::
name|const_iterator
operator|>
operator|::
name|assign
argument_list|(
name|iterator
argument_list|,
name|static_cast
operator|<
specifier|const
name|T
operator|*
operator|>
operator|(
name|container
operator|)
operator|->
name|begin
argument_list|()
argument_list|)
block|; }
name|template
operator|<
name|class
name|T
operator|>
specifier|static
name|void
name|endImpl
argument_list|(
argument|const void *container
argument_list|,
argument|void **iterator
argument_list|)
block|{
name|IteratorOwner
operator|<
name|typename
name|T
operator|::
name|const_iterator
operator|>
operator|::
name|assign
argument_list|(
name|iterator
argument_list|,
name|static_cast
operator|<
specifier|const
name|T
operator|*
operator|>
operator|(
name|container
operator|)
operator|->
name|end
argument_list|()
argument_list|)
block|; }
name|template
operator|<
name|class
name|T
operator|>
specifier|static
name|VariantData
name|getKeyImpl
argument_list|(
argument|void * const *iterator
argument_list|,
argument|int metaTypeId
argument_list|,
argument|uint flags
argument_list|)
block|{
return|return
name|VariantData
argument_list|(
name|metaTypeId
argument_list|,
operator|&
name|AssociativeContainerAccessor
operator|<
name|T
operator|>
operator|::
name|getKey
argument_list|(
argument|*static_cast<typename T::const_iterator*>(*iterator)
argument_list|)
argument_list|,
name|flags
argument_list|)
return|;
block|}
name|template
operator|<
name|class
name|T
operator|>
specifier|static
name|VariantData
name|getValueImpl
argument_list|(
argument|void * const *iterator
argument_list|,
argument|int metaTypeId
argument_list|,
argument|uint flags
argument_list|)
block|{
return|return
name|VariantData
argument_list|(
name|metaTypeId
argument_list|,
operator|&
name|AssociativeContainerAccessor
operator|<
name|T
operator|>
operator|::
name|getValue
argument_list|(
argument|*static_cast<typename T::const_iterator*>(*iterator)
argument_list|)
argument_list|,
name|flags
argument_list|)
return|;
block|}
name|public
label|:
name|template
operator|<
name|class
name|T
operator|>
name|QAssociativeIterableImpl
argument_list|(
specifier|const
name|T
operator|*
name|p
argument_list|)
operator|:
name|_iterable
argument_list|(
name|p
argument_list|)
operator|,
name|_metaType_id_key
argument_list|(
argument|qMetaTypeId<typename T::key_type>()
argument_list|)
operator|,
name|_metaType_flags_key
argument_list|(
argument|QTypeInfo<typename T::key_type>::isPointer
argument_list|)
operator|,
name|_metaType_id_value
argument_list|(
argument|qMetaTypeId<typename T::mapped_type>()
argument_list|)
operator|,
name|_metaType_flags_value
argument_list|(
argument|QTypeInfo<typename T::mapped_type>::isPointer
argument_list|)
operator|,
name|_size
argument_list|(
name|sizeImpl
operator|<
name|T
operator|>
argument_list|)
operator|,
name|_find
argument_list|(
name|findImpl
operator|<
name|T
operator|>
argument_list|)
operator|,
name|_begin
argument_list|(
name|beginImpl
operator|<
name|T
operator|>
argument_list|)
operator|,
name|_end
argument_list|(
name|endImpl
operator|<
name|T
operator|>
argument_list|)
operator|,
name|_advance
argument_list|(
name|advanceImpl
operator|<
name|T
operator|>
argument_list|)
operator|,
name|_getKey
argument_list|(
name|getKeyImpl
operator|<
name|T
operator|>
argument_list|)
operator|,
name|_getValue
argument_list|(
name|getValueImpl
operator|<
name|T
operator|>
argument_list|)
operator|,
name|_destroyIter
argument_list|(
argument|IteratorOwner<typename T::const_iterator>::destroy
argument_list|)
operator|,
name|_equalIter
argument_list|(
argument|IteratorOwner<typename T::const_iterator>::equal
argument_list|)
operator|,
name|_copyIter
argument_list|(
argument|IteratorOwner<typename T::const_iterator>::assign
argument_list|)
block|{     }
name|QAssociativeIterableImpl
argument_list|()
operator|:
name|_iterable
argument_list|(
literal|0
argument_list|)
operator|,
name|_metaType_id_key
argument_list|(
name|QMetaType
operator|::
name|UnknownType
argument_list|)
operator|,
name|_metaType_flags_key
argument_list|(
literal|0
argument_list|)
operator|,
name|_metaType_id_value
argument_list|(
name|QMetaType
operator|::
name|UnknownType
argument_list|)
operator|,
name|_metaType_flags_value
argument_list|(
literal|0
argument_list|)
operator|,
name|_size
argument_list|(
literal|0
argument_list|)
operator|,
name|_find
argument_list|(
literal|0
argument_list|)
operator|,
name|_begin
argument_list|(
literal|0
argument_list|)
operator|,
name|_end
argument_list|(
literal|0
argument_list|)
operator|,
name|_advance
argument_list|(
literal|0
argument_list|)
operator|,
name|_getKey
argument_list|(
literal|0
argument_list|)
operator|,
name|_getValue
argument_list|(
literal|0
argument_list|)
operator|,
name|_destroyIter
argument_list|(
literal|0
argument_list|)
operator|,
name|_equalIter
argument_list|(
literal|0
argument_list|)
operator|,
name|_copyIter
argument_list|(
literal|0
argument_list|)
block|{     }
specifier|inline
name|void
name|begin
argument_list|()
block|{
name|_begin
argument_list|(
name|_iterable
argument_list|,
operator|&
name|_iterator
argument_list|)
block|; }
specifier|inline
name|void
name|end
argument_list|()
block|{
name|_end
argument_list|(
name|_iterable
argument_list|,
operator|&
name|_iterator
argument_list|)
block|; }
specifier|inline
name|bool
name|equal
argument_list|(
argument|const QAssociativeIterableImpl&other
argument_list|)
specifier|const
block|{
return|return
name|_equalIter
argument_list|(
operator|&
name|_iterator
argument_list|,
operator|&
name|other
operator|.
name|_iterator
argument_list|)
return|;
block|}
specifier|inline
name|QAssociativeIterableImpl
modifier|&
name|advance
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|_advance
argument_list|(
operator|&
name|_iterator
argument_list|,
name|i
argument_list|)
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
specifier|inline
name|void
name|destroyIter
parameter_list|()
block|{
name|_destroyIter
argument_list|(
operator|&
name|_iterator
argument_list|)
expr_stmt|;
block|}
specifier|inline
name|VariantData
name|getCurrentKey
argument_list|()
specifier|const
block|{
return|return
name|_getKey
argument_list|(
operator|&
name|_iterator
argument_list|,
name|_metaType_id_key
argument_list|,
name|_metaType_flags_value
argument_list|)
return|;
block|}
specifier|inline
name|VariantData
name|getCurrentValue
argument_list|()
specifier|const
block|{
return|return
name|_getValue
argument_list|(
operator|&
name|_iterator
argument_list|,
name|_metaType_id_value
argument_list|,
name|_metaType_flags_value
argument_list|)
return|;
block|}
specifier|inline
name|void
name|find
parameter_list|(
specifier|const
name|VariantData
modifier|&
name|key
parameter_list|)
block|{
name|_find
argument_list|(
name|_iterable
argument_list|,
name|key
operator|.
name|data
argument_list|,
operator|&
name|_iterator
argument_list|)
expr_stmt|;
block|}
name|int
name|size
argument_list|()
specifier|const
block|{
name|Q_ASSERT
argument_list|(
name|_iterable
argument_list|)
block|;
return|return
name|_size
argument_list|(
name|_iterable
argument_list|)
return|;
block|}
name|void
name|copy
parameter_list|(
specifier|const
name|QAssociativeIterableImpl
modifier|&
name|other
parameter_list|)
block|{
operator|*
name|this
operator|=
name|other
expr_stmt|;
name|_copyIter
argument_list|(
operator|&
name|_iterator
argument_list|,
operator|&
name|other
operator|.
name|_iterator
argument_list|)
expr_stmt|;
block|}
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|From
operator|>
expr|struct
name|QAssociativeIterableConvertFunctor
block|{
name|QAssociativeIterableImpl
name|operator
argument_list|()
operator|(
specifier|const
name|From
operator|&
name|f
operator|)
specifier|const
block|{
return|return
name|QAssociativeIterableImpl
argument_list|(
operator|&
name|f
argument_list|)
return|;
block|}
end_expr_stmt
begin_decl_stmt
unit|};
name|class
name|QPairVariantInterfaceImpl
block|{
specifier|const
name|void
modifier|*
name|_pair
decl_stmt|;
name|int
name|_metaType_id_first
decl_stmt|;
name|uint
name|_metaType_flags_first
decl_stmt|;
name|int
name|_metaType_id_second
decl_stmt|;
name|uint
name|_metaType_flags_second
decl_stmt|;
typedef|typedef
name|VariantData
function_decl|(
modifier|*
name|getFunc
function_decl|)
parameter_list|(
specifier|const
name|void
modifier|*
specifier|const
modifier|*
name|p
parameter_list|,
name|int
name|metaTypeId
parameter_list|,
name|uint
name|flags
parameter_list|)
function_decl|;
name|getFunc
name|_getFirst
decl_stmt|;
name|getFunc
name|_getSecond
decl_stmt|;
name|template
operator|<
name|class
name|T
operator|>
specifier|static
name|VariantData
name|getFirstImpl
argument_list|(
argument|const void * const *pair
argument_list|,
argument|int metaTypeId
argument_list|,
argument|uint flags
argument_list|)
block|{
return|return
name|VariantData
argument_list|(
name|metaTypeId
argument_list|,
operator|&
name|static_cast
operator|<
specifier|const
name|T
operator|*
operator|>
operator|(
operator|*
name|pair
operator|)
operator|->
name|first
argument_list|,
name|flags
argument_list|)
return|;
block|}
name|template
operator|<
name|class
name|T
operator|>
specifier|static
name|VariantData
name|getSecondImpl
argument_list|(
argument|const void * const *pair
argument_list|,
argument|int metaTypeId
argument_list|,
argument|uint flags
argument_list|)
block|{
return|return
name|VariantData
argument_list|(
name|metaTypeId
argument_list|,
operator|&
name|static_cast
operator|<
specifier|const
name|T
operator|*
operator|>
operator|(
operator|*
name|pair
operator|)
operator|->
name|second
argument_list|,
name|flags
argument_list|)
return|;
block|}
name|public
label|:
name|template
operator|<
name|class
name|T
operator|>
name|QPairVariantInterfaceImpl
argument_list|(
specifier|const
name|T
operator|*
name|p
argument_list|)
operator|:
name|_pair
argument_list|(
name|p
argument_list|)
operator|,
name|_metaType_id_first
argument_list|(
argument|qMetaTypeId<typename T::first_type>()
argument_list|)
operator|,
name|_metaType_flags_first
argument_list|(
argument|QTypeInfo<typename T::first_type>::isPointer
argument_list|)
operator|,
name|_metaType_id_second
argument_list|(
argument|qMetaTypeId<typename T::second_type>()
argument_list|)
operator|,
name|_metaType_flags_second
argument_list|(
argument|QTypeInfo<typename T::second_type>::isPointer
argument_list|)
operator|,
name|_getFirst
argument_list|(
name|getFirstImpl
operator|<
name|T
operator|>
argument_list|)
operator|,
name|_getSecond
argument_list|(
argument|getSecondImpl<T>
argument_list|)
block|{     }
name|QPairVariantInterfaceImpl
argument_list|()
operator|:
name|_pair
argument_list|(
literal|0
argument_list|)
operator|,
name|_getFirst
argument_list|(
literal|0
argument_list|)
operator|,
name|_getSecond
argument_list|(
literal|0
argument_list|)
block|{     }
specifier|inline
name|VariantData
name|first
argument_list|()
specifier|const
block|{
return|return
name|_getFirst
argument_list|(
operator|&
name|_pair
argument_list|,
name|_metaType_id_first
argument_list|,
name|_metaType_flags_first
argument_list|)
return|;
block|}
specifier|inline
name|VariantData
name|second
argument_list|()
specifier|const
block|{
return|return
name|_getSecond
argument_list|(
operator|&
name|_pair
argument_list|,
name|_metaType_id_second
argument_list|,
name|_metaType_flags_second
argument_list|)
return|;
block|}
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|From
operator|>
expr|struct
name|QPairVariantInterfaceConvertFunctor
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|U
operator|>
expr|struct
name|QPairVariantInterfaceConvertFunctor
operator|<
name|QPair
operator|<
name|T
operator|,
name|U
operator|>
expr|>
block|{
name|QPairVariantInterfaceImpl
name|operator
argument_list|()
operator|(
specifier|const
name|QPair
operator|<
name|T
operator|,
name|U
operator|>
operator|&
name|f
operator|)
specifier|const
block|{
return|return
name|QPairVariantInterfaceImpl
argument_list|(
operator|&
name|f
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|U
operator|>
expr|struct
name|QPairVariantInterfaceConvertFunctor
operator|<
name|std
operator|::
name|pair
operator|<
name|T
operator|,
name|U
operator|>
expr|>
block|{
name|QPairVariantInterfaceImpl
name|operator
argument_list|()
operator|(
specifier|const
name|std
operator|::
name|pair
operator|<
name|T
operator|,
name|U
operator|>
operator|&
name|f
operator|)
specifier|const
block|{
return|return
name|QPairVariantInterfaceImpl
argument_list|(
operator|&
name|f
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
unit|};  }  class
DECL|variable|QObject
name|QObject
expr_stmt|;
end_expr_stmt
begin_decl_stmt
DECL|variable|QWidget
name|class
name|QWidget
decl_stmt|;
end_decl_stmt
begin_define
DECL|macro|QT_FORWARD_DECLARE_SHARED_POINTER_TYPES_ITER
define|#
directive|define
name|QT_FORWARD_DECLARE_SHARED_POINTER_TYPES_ITER
parameter_list|(
name|Name
parameter_list|)
define|\
value|template<class T> class Name; \  QT_FOR_EACH_AUTOMATIC_TEMPLATE_SMART_POINTER(QT_FORWARD_DECLARE_SHARED_POINTER_TYPES_ITER)
end_define
begin_decl_stmt
name|namespace
name|QtPrivate
block|{
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|IsPointerToTypeDerivedFromQObject
block|{         enum
block|{
name|Value
operator|=
name|false
block|}
block|;     }
expr_stmt|;
comment|// Specialize to avoid sizeof(void) warning
name|template
operator|<
operator|>
expr|struct
name|IsPointerToTypeDerivedFromQObject
operator|<
name|void
operator|*
operator|>
block|{         enum
block|{
name|Value
operator|=
name|false
block|}
block|;     }
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|IsPointerToTypeDerivedFromQObject
operator|<
specifier|const
name|void
operator|*
operator|>
block|{         enum
block|{
name|Value
operator|=
name|false
block|}
block|;     }
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|IsPointerToTypeDerivedFromQObject
operator|<
name|QObject
operator|*
operator|>
block|{         enum
block|{
name|Value
operator|=
name|true
block|}
block|;     }
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|IsPointerToTypeDerivedFromQObject
operator|<
name|T
operator|*
operator|>
block|{
typedef|typedef
name|qint8
name|yes_type
typedef|;
typedef|typedef
name|qint64
name|no_type
typedef|;
ifndef|#
directive|ifndef
name|QT_NO_QOBJECT
specifier|static
name|yes_type
name|checkType
parameter_list|(
name|QObject
modifier|*
parameter_list|)
function_decl|;
endif|#
directive|endif
specifier|static
name|no_type
name|checkType
parameter_list|(
modifier|...
parameter_list|)
function_decl|;
name|Q_STATIC_ASSERT_X
argument_list|(
sizeof|sizeof
argument_list|(
name|T
argument_list|)
argument_list|,
literal|"Type argument of Q_DECLARE_METATYPE(T*) must be fully defined"
argument_list|)
expr_stmt|;
enum|enum
block|{
name|Value
init|=
sizeof|sizeof
argument_list|(
name|checkType
argument_list|(
name|static_cast
operator|<
name|T
operator|*
operator|>
operator|(
literal|0
operator|)
argument_list|)
argument_list|)
operator|==
expr|sizeof
operator|(
name|yes_type
operator|)
block|}
enum|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|IsGadgetHelper
block|{
name|template
operator|<
name|typename
name|X
operator|>
specifier|static
name|typename
name|X
operator|::
name|QtGadgetHelper
operator|*
name|checkType
argument_list|(
name|X
operator|*
argument_list|)
block|;
specifier|static
name|char
name|checkType
argument_list|(
name|void
operator|*
argument_list|)
block|;         enum
block|{
name|Value
operator|=
sizeof|sizeof
argument_list|(
name|checkType
argument_list|(
name|static_cast
operator|<
name|T
operator|*
operator|>
operator|(
literal|0
operator|)
argument_list|)
argument_list|)
operator|==
expr|sizeof
operator|(
name|void
operator|*
operator|)
block|}
block|;     }
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Enable
operator|=
name|void
operator|>
expr|struct
name|MetaObjectForType
block|{
specifier|static
specifier|inline
specifier|const
name|QMetaObject
operator|*
name|value
argument_list|()
block|{
return|return
literal|0
return|;
block|}
end_expr_stmt
begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|MetaObjectForType
operator|<
name|T
operator|*
operator|,
name|typename
name|QEnableIf
operator|<
name|IsPointerToTypeDerivedFromQObject
operator|<
name|T
operator|*
operator|>
operator|::
name|Value
operator|>
operator|::
name|Type
operator|>
block|{
specifier|static
specifier|inline
specifier|const
name|QMetaObject
operator|*
name|value
argument_list|()
block|{
return|return
operator|&
name|T
operator|::
name|staticMetaObject
return|;
block|}
end_expr_stmt
begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|MetaObjectForType
operator|<
name|T
operator|,
name|typename
name|QEnableIf
operator|<
name|IsGadgetHelper
operator|<
name|T
operator|>
operator|::
name|Value
operator|>
operator|::
name|Type
operator|>
block|{
specifier|static
specifier|inline
specifier|const
name|QMetaObject
operator|*
name|value
argument_list|()
block|{
return|return
operator|&
name|T
operator|::
name|staticMetaObject
return|;
block|}
end_expr_stmt
begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|IsSharedPointerToTypeDerivedFromQObject
block|{         enum
block|{
name|Value
operator|=
name|false
block|}
block|;     }
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|IsSharedPointerToTypeDerivedFromQObject
operator|<
name|QSharedPointer
operator|<
name|T
operator|>
expr|>
operator|:
name|IsPointerToTypeDerivedFromQObject
operator|<
name|T
operator|*
operator|>
block|{     }
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|IsWeakPointerToTypeDerivedFromQObject
block|{         enum
block|{
name|Value
operator|=
name|false
block|}
block|;     }
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|IsWeakPointerToTypeDerivedFromQObject
operator|<
name|QWeakPointer
operator|<
name|T
operator|>
expr|>
operator|:
name|IsPointerToTypeDerivedFromQObject
operator|<
name|T
operator|*
operator|>
block|{     }
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|IsTrackingPointerToTypeDerivedFromQObject
block|{         enum
block|{
name|Value
operator|=
name|false
block|}
block|;     }
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|IsTrackingPointerToTypeDerivedFromQObject
operator|<
name|QPointer
operator|<
name|T
operator|>
expr|>
block|{         enum
block|{
name|Value
operator|=
name|true
block|}
block|;     }
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|IsSequentialContainer
block|{         enum
block|{
name|Value
operator|=
name|false
block|}
block|;     }
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|IsAssociativeContainer
block|{         enum
block|{
name|Value
operator|=
name|false
block|}
block|;     }
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|,
name|bool
operator|=
name|QtPrivate
operator|::
name|IsSequentialContainer
operator|<
name|T
operator|>
operator|::
name|Value
operator|>
expr|struct
name|SequentialContainerConverterHelper
block|{
specifier|static
name|bool
name|registerConverter
argument_list|(
argument|int
argument_list|)
block|{
return|return
name|false
return|;
block|}
end_expr_stmt
begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|T
operator|,
name|bool
operator|=
name|QMetaTypeId2
operator|<
name|typename
name|T
operator|::
name|value_type
operator|>
operator|::
name|Defined
operator|>
expr|struct
name|ValueTypeIsMetaType
block|{
specifier|static
name|bool
name|registerConverter
argument_list|(
argument|int
argument_list|)
block|{
return|return
name|false
return|;
block|}
end_expr_stmt
begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|SequentialContainerConverterHelper
operator|<
name|T
operator|,
name|true
operator|>
operator|:
name|ValueTypeIsMetaType
operator|<
name|T
operator|>
block|{     }
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|,
name|bool
operator|=
name|QtPrivate
operator|::
name|IsAssociativeContainer
operator|<
name|T
operator|>
operator|::
name|Value
operator|>
expr|struct
name|AssociativeContainerConverterHelper
block|{
specifier|static
name|bool
name|registerConverter
argument_list|(
argument|int
argument_list|)
block|{
return|return
name|false
return|;
block|}
end_expr_stmt
begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|T
operator|,
name|bool
operator|=
name|QMetaTypeId2
operator|<
name|typename
name|T
operator|::
name|mapped_type
operator|>
operator|::
name|Defined
operator|>
expr|struct
name|AssociativeValueTypeIsMetaType
block|{
specifier|static
name|bool
name|registerConverter
argument_list|(
argument|int
argument_list|)
block|{
return|return
name|false
return|;
block|}
end_expr_stmt
begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|T
operator|,
name|bool
operator|=
name|QMetaTypeId2
operator|<
name|typename
name|T
operator|::
name|key_type
operator|>
operator|::
name|Defined
operator|>
expr|struct
name|KeyAndValueTypeIsMetaType
block|{
specifier|static
name|bool
name|registerConverter
argument_list|(
argument|int
argument_list|)
block|{
return|return
name|false
return|;
block|}
end_expr_stmt
begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|KeyAndValueTypeIsMetaType
operator|<
name|T
operator|,
name|true
operator|>
operator|:
name|AssociativeValueTypeIsMetaType
operator|<
name|T
operator|>
block|{     }
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|AssociativeContainerConverterHelper
operator|<
name|T
operator|,
name|true
operator|>
operator|:
name|KeyAndValueTypeIsMetaType
operator|<
name|T
operator|>
block|{     }
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|,
name|bool
operator|=
name|QMetaTypeId2
operator|<
name|typename
name|T
operator|::
name|first_type
operator|>
operator|::
name|Defined
operator|&&
name|QMetaTypeId2
operator|<
name|typename
name|T
operator|::
name|second_type
operator|>
operator|::
name|Defined
operator|>
expr|struct
name|IsMetaTypePair
block|{
specifier|static
name|bool
name|registerConverter
argument_list|(
argument|int
argument_list|)
block|{
return|return
name|false
return|;
block|}
end_expr_stmt
begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|IsMetaTypePair
operator|<
name|T
operator|,
name|true
operator|>
block|{
specifier|inline
specifier|static
name|bool
name|registerConverter
argument_list|(
argument|int id
argument_list|)
block|;     }
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|IsPair
block|{
specifier|static
name|bool
name|registerConverter
argument_list|(
argument|int
argument_list|)
block|{
return|return
name|false
return|;
block|}
end_expr_stmt
begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|U
operator|>
expr|struct
name|IsPair
operator|<
name|QPair
operator|<
name|T
operator|,
name|U
operator|>
expr|>
operator|:
name|IsMetaTypePair
operator|<
name|QPair
operator|<
name|T
operator|,
name|U
operator|>
expr|>
block|{}
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|U
operator|>
expr|struct
name|IsPair
operator|<
name|std
operator|::
name|pair
operator|<
name|T
operator|,
name|U
operator|>
expr|>
operator|:
name|IsMetaTypePair
operator|<
name|std
operator|::
name|pair
operator|<
name|T
operator|,
name|U
operator|>
expr|>
block|{}
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|MetaTypePairHelper
operator|:
name|IsPair
operator|<
name|T
operator|>
block|{}
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|,
name|typename
operator|=
name|void
operator|>
expr|struct
name|MetaTypeSmartPointerHelper
block|{
specifier|static
name|bool
name|registerConverter
argument_list|(
argument|int
argument_list|)
block|{
return|return
name|false
return|;
block|}
end_expr_stmt
begin_function_decl
unit|};
name|Q_CORE_EXPORT
name|bool
name|isBuiltinType
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|type
parameter_list|)
function_decl|;
end_function_decl
begin_comment
unit|}
comment|// namespace QtPrivate
end_comment
begin_expr_stmt
unit|template
DECL|variable|T
DECL|variable|bool
operator|<
name|typename
name|T
operator|,
name|bool
operator|=
name|QtPrivate
operator|::
name|IsPointerToTypeDerivedFromQObject
operator|<
name|T
operator|>
operator|::
name|Value
operator|>
expr|struct
name|QMetaTypeIdQObject
block|{     enum
block|{
name|Defined
operator|=
literal|0
block|}
block|; }
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
DECL|struct|T
name|QMetaTypeId
operator|:
name|public
name|QMetaTypeIdQObject
operator|<
name|T
operator|>
block|{ }
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
DECL|struct|QMetaTypeId2
name|QMetaTypeId2
block|{     enum
DECL|enumerator|Defined
DECL|enumerator|IsBuiltIn
block|{
name|Defined
operator|=
name|QMetaTypeId
operator|<
name|T
operator|>
operator|::
name|Defined
block|,
name|IsBuiltIn
operator|=
name|false
block|}
block|;
DECL|function|qt_metatype_id
specifier|static
specifier|inline
name|Q_DECL_CONSTEXPR
name|int
name|qt_metatype_id
argument_list|()
block|{
return|return
name|QMetaTypeId
operator|<
name|T
operator|>
operator|::
name|qt_metatype_id
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|qt_metatype_id
unit|};
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|QMetaTypeId2
operator|<
specifier|const
name|T
operator|&
operator|>
operator|:
name|QMetaTypeId2
operator|<
name|T
operator|>
block|{}
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
DECL|struct|T
DECL|enumerator|Defined
name|QMetaTypeId2
operator|<
name|T
operator|&
operator|>
block|{ enum
block|{
name|Defined
operator|=
name|false
block|}
block|; }
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|namespace
name|QtPrivate
block|{
name|template
operator|<
name|typename
name|T
operator|,
name|bool
name|Defined
operator|=
name|QMetaTypeId2
operator|<
name|T
operator|>
operator|::
name|Defined
operator|>
expr|struct
name|QMetaTypeIdHelper
block|{
specifier|static
specifier|inline
name|Q_DECL_CONSTEXPR
name|int
name|qt_metatype_id
argument_list|()
block|{
return|return
name|QMetaTypeId2
operator|<
name|T
operator|>
operator|::
name|qt_metatype_id
argument_list|()
return|;
block|}
expr|}
block|;
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|QMetaTypeIdHelper
operator|<
name|T
block|,
name|false
operator|>
block|{
specifier|static
specifier|inline
name|Q_DECL_CONSTEXPR
name|int
name|qt_metatype_id
argument_list|()
block|{
return|return
operator|-
literal|1
return|;
block|}
expr|}
block|;
ifndef|#
directive|ifndef
name|Q_COMPILER_VARIADIC_TEMPLATES
comment|// Function pointers don't derive from QObject
name|template
operator|<
name|class
name|Result
operator|>
expr|struct
name|IsPointerToTypeDerivedFromQObject
operator|<
name|Result
argument_list|(
operator|*
argument_list|)
argument_list|()
operator|>
block|{ enum
block|{
name|Value
operator|=
name|false
block|}
block|; }
block|;
name|template
operator|<
name|class
name|Result
block|,
name|class
name|Arg0
operator|>
expr|struct
name|IsPointerToTypeDerivedFromQObject
operator|<
name|Result
argument_list|(
operator|*
argument_list|)
argument_list|(
name|Arg0
argument_list|)
operator|>
block|{ enum
block|{
name|Value
operator|=
name|false
block|}
block|; }
block|;
name|template
operator|<
name|class
name|Result
block|,
name|class
name|Arg0
block|,
name|class
name|Arg1
operator|>
expr|struct
name|IsPointerToTypeDerivedFromQObject
operator|<
name|Result
argument_list|(
operator|*
argument_list|)
argument_list|(
name|Arg0
argument_list|,
name|Arg1
argument_list|)
operator|>
block|{ enum
block|{
name|Value
operator|=
name|false
block|}
block|; }
block|;
name|template
operator|<
name|class
name|Result
block|,
name|class
name|Arg0
block|,
name|class
name|Arg1
block|,
name|class
name|Arg2
operator|>
expr|struct
name|IsPointerToTypeDerivedFromQObject
operator|<
name|Result
argument_list|(
operator|*
argument_list|)
argument_list|(
name|Arg0
argument_list|,
name|Arg1
argument_list|,
name|Arg2
argument_list|)
operator|>
block|{ enum
block|{
name|Value
operator|=
name|false
block|}
block|; }
block|;
else|#
directive|else
name|template
operator|<
name|typename
name|Result
block|,
name|typename
operator|...
name|Args
operator|>
expr|struct
name|IsPointerToTypeDerivedFromQObject
operator|<
name|Result
argument_list|(
operator|*
argument_list|)
argument_list|(
name|Args
operator|...
argument_list|)
operator|>
block|{ enum
block|{
name|Value
operator|=
name|false
block|}
block|; }
block|;
endif|#
directive|endif
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|QMetaTypeTypeFlags
block|{         enum
block|{
name|Flags
operator|=
operator|(
operator|!
name|QTypeInfo
operator|<
name|T
operator|>
operator|::
name|isStatic
operator|?
name|QMetaType
operator|::
name|MovableType
operator|:
literal|0
operator|)
operator||
operator|(
name|QTypeInfo
operator|<
name|T
operator|>
operator|::
name|isComplex
operator|?
name|QMetaType
operator|::
name|NeedsConstruction
operator|:
literal|0
operator|)
operator||
operator|(
name|QTypeInfo
operator|<
name|T
operator|>
operator|::
name|isComplex
operator|?
name|QMetaType
operator|::
name|NeedsDestruction
operator|:
literal|0
operator|)
operator||
operator|(
name|IsPointerToTypeDerivedFromQObject
operator|<
name|T
operator|>
operator|::
name|Value
operator|?
name|QMetaType
operator|::
name|PointerToQObject
operator|:
literal|0
operator|)
operator||
operator|(
name|IsSharedPointerToTypeDerivedFromQObject
operator|<
name|T
operator|>
operator|::
name|Value
operator|?
name|QMetaType
operator|::
name|SharedPointerToQObject
operator|:
literal|0
operator|)
operator||
operator|(
name|IsWeakPointerToTypeDerivedFromQObject
operator|<
name|T
operator|>
operator|::
name|Value
operator|?
name|QMetaType
operator|::
name|WeakPointerToQObject
operator|:
literal|0
operator|)
operator||
operator|(
name|IsTrackingPointerToTypeDerivedFromQObject
operator|<
name|T
operator|>
operator|::
name|Value
operator|?
name|QMetaType
operator|::
name|TrackingPointerToQObject
operator|:
literal|0
operator|)
operator||
operator|(
name|Q_IS_ENUM
argument_list|(
name|T
argument_list|)
operator|?
name|QMetaType
operator|::
name|IsEnumeration
operator|:
literal|0
operator|)
operator||
operator|(
name|IsGadgetHelper
operator|<
name|T
operator|>
operator|::
name|Value
operator|?
name|QMetaType
operator|::
name|IsGadget
operator|:
literal|0
operator|)
block|}
block|;     }
block|;
name|template
operator|<
name|typename
name|T
block|,
name|bool
name|defined
operator|>
expr|struct
name|MetaTypeDefinedHelper
block|{         enum
name|DefinedType
block|{
name|Defined
operator|=
name|defined
block|}
block|;     }
block|;
name|template
operator|<
name|typename
name|SmartPointer
operator|>
expr|struct
name|QSmartPointerConvertFunctor
block|{
name|QObject
operator|*
name|operator
argument_list|()
operator|(
specifier|const
name|SmartPointer
operator|&
name|p
operator|)
specifier|const
block|{
return|return
name|p
operator|.
name|operator
operator|->
expr|(
block|)
block|;         }
block|}
block|;
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|QSmartPointerConvertFunctor
operator|<
name|QWeakPointer
operator|<
name|T
operator|>
expr|>
block|{
name|QObject
operator|*
name|operator
argument_list|()
operator|(
specifier|const
name|QWeakPointer
operator|<
name|T
operator|>
operator|&
name|p
operator|)
specifier|const
block|{
return|return
name|p
operator|.
name|data
argument_list|()
return|;
block|}
expr|}
block|; }
name|template
operator|<
name|typename
name|T
operator|>
name|int
name|qRegisterNormalizedMetaType
argument_list|(
argument|const QT_PREPEND_NAMESPACE(QByteArray)&normalizedTypeName
ifndef|#
directive|ifndef
name|Q_QDOC
argument_list|,
argument|T * dummy =
literal|0
argument_list|,
DECL|variable|T
DECL|variable|defined
argument|typename QtPrivate::MetaTypeDefinedHelper<T
argument_list|,
argument|QMetaTypeId2<T>::Defined&& !QMetaTypeId2<T>::IsBuiltIn>::DefinedType defined = QtPrivate::MetaTypeDefinedHelper<T
argument_list|,
argument|QMetaTypeId2<T>::Defined&& !QMetaTypeId2<T>::IsBuiltIn>::Defined
endif|#
directive|endif
argument_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_QOBJECT
name|Q_ASSERT_X
argument_list|(
name|normalizedTypeName
operator|==
name|QMetaObject
operator|::
name|normalizedType
argument_list|(
name|normalizedTypeName
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|,
literal|"qRegisterNormalizedMetaType"
argument_list|,
literal|"qRegisterNormalizedMetaType was called with a not normalized type name, please call qRegisterMetaType instead."
argument_list|)
block|;
endif|#
directive|endif
specifier|const
name|int
name|typedefOf
operator|=
name|dummy
condition|?
operator|-
literal|1
else|:
name|QtPrivate
operator|::
name|QMetaTypeIdHelper
operator|<
name|T
operator|>
operator|::
name|qt_metatype_id
argument_list|()
block|;
if|if
condition|(
name|typedefOf
operator|!=
operator|-
literal|1
condition|)
return|return
name|QMetaType
operator|::
name|registerNormalizedTypedef
argument_list|(
name|normalizedTypeName
argument_list|,
name|typedefOf
argument_list|)
return|;
name|QMetaType
operator|::
name|TypeFlags
name|flags
argument_list|(
name|QtPrivate
operator|::
name|QMetaTypeTypeFlags
operator|<
name|T
operator|>
operator|::
name|Flags
argument_list|)
block|;
if|if
condition|(
name|defined
condition|)
name|flags
operator||=
name|QMetaType
operator|::
name|WasDeclaredAsMetaType
expr_stmt|;
specifier|const
name|int
name|id
operator|=
name|QMetaType
operator|::
name|registerNormalizedType
argument_list|(
name|normalizedTypeName
argument_list|,
name|QtMetaTypePrivate
operator|::
name|QMetaTypeFunctionHelper
operator|<
name|T
operator|>
operator|::
name|Destruct
argument_list|,
name|QtMetaTypePrivate
operator|::
name|QMetaTypeFunctionHelper
operator|<
name|T
operator|>
operator|::
name|Construct
argument_list|,
name|int
argument_list|(
sizeof|sizeof
argument_list|(
name|T
argument_list|)
argument_list|)
argument_list|,
name|flags
argument_list|,
name|QtPrivate
operator|::
name|MetaObjectForType
operator|<
name|T
operator|>
operator|::
name|value
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|id
operator|>
literal|0
condition|)
block|{
name|QtPrivate
operator|::
name|SequentialContainerConverterHelper
operator|<
name|T
operator|>
operator|::
name|registerConverter
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|QtPrivate
operator|::
name|AssociativeContainerConverterHelper
operator|<
name|T
operator|>
operator|::
name|registerConverter
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|QtPrivate
operator|::
name|MetaTypePairHelper
operator|<
name|T
operator|>
operator|::
name|registerConverter
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|QtPrivate
operator|::
name|MetaTypeSmartPointerHelper
operator|<
name|T
operator|>
operator|::
name|registerConverter
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
return|return
name|id
return|;
block|}
end_decl_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|qRegisterMetaType
name|int
name|qRegisterMetaType
argument_list|(
argument|const char *typeName
ifndef|#
directive|ifndef
name|Q_QDOC
argument_list|,
argument|T * dummy =
literal|0
argument_list|,
argument|typename QtPrivate::MetaTypeDefinedHelper<T
argument_list|,
argument|QMetaTypeId2<T>::Defined&& !QMetaTypeId2<T>::IsBuiltIn>::DefinedType defined = QtPrivate::MetaTypeDefinedHelper<T
argument_list|,
argument|QMetaTypeId2<T>::Defined&& !QMetaTypeId2<T>::IsBuiltIn>::Defined
endif|#
directive|endif
argument_list|)
block|{
ifdef|#
directive|ifdef
name|QT_NO_QOBJECT
name|QT_PREPEND_NAMESPACE
argument_list|(
argument|QByteArray
argument_list|)
name|normalizedTypeName
operator|=
name|typeName
block|;
else|#
directive|else
name|QT_PREPEND_NAMESPACE
argument_list|(
argument|QByteArray
argument_list|)
name|normalizedTypeName
operator|=
name|QMetaObject
operator|::
name|normalizedType
argument_list|(
name|typeName
argument_list|)
block|;
endif|#
directive|endif
return|return
name|qRegisterNormalizedMetaType
operator|<
name|T
operator|>
operator|(
name|normalizedTypeName
operator|,
name|dummy
operator|,
name|defined
operator|)
return|;
block|}
end_expr_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DATASTREAM
end_ifndef
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|qRegisterMetaTypeStreamOperators
name|void
name|qRegisterMetaTypeStreamOperators
argument_list|(
argument|const char *typeName
ifndef|#
directive|ifndef
name|Q_QDOC
argument_list|,
argument|T *
comment|/* dummy */
argument|=
literal|0
endif|#
directive|endif
argument_list|)
block|{
name|qRegisterMetaType
operator|<
name|T
operator|>
operator|(
name|typeName
operator|)
block|;
name|QMetaType
operator|::
name|registerStreamOperators
argument_list|(
name|typeName
argument_list|,
name|QtMetaTypePrivate
operator|::
name|QMetaTypeFunctionHelper
operator|<
name|T
operator|>
operator|::
name|Save
argument_list|,
name|QtMetaTypePrivate
operator|::
name|QMetaTypeFunctionHelper
operator|<
name|T
operator|>
operator|::
name|Load
argument_list|)
block|; }
endif|#
directive|endif
comment|// QT_NO_DATASTREAM
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|qMetaTypeId
specifier|inline
name|Q_DECL_CONSTEXPR
name|int
name|qMetaTypeId
argument_list|()
block|{
name|Q_STATIC_ASSERT_X
argument_list|(
name|QMetaTypeId2
operator|<
name|T
operator|>
operator|::
name|Defined
argument_list|,
literal|"Type is not registered, please use the Q_DECLARE_METATYPE macro to make it known to Qt's meta-object system"
argument_list|)
block|;
return|return
name|QMetaTypeId2
operator|<
name|T
operator|>
operator|::
name|qt_metatype_id
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|qRegisterMetaType
specifier|inline
name|Q_DECL_CONSTEXPR
name|int
name|qRegisterMetaType
argument_list|()
block|{
return|return
name|qMetaTypeId
operator|<
name|T
operator|>
operator|(
operator|)
return|;
block|}
end_expr_stmt
begin_if
if|#
directive|if
name|QT_DEPRECATED_SINCE
argument_list|(
literal|5
operator|,
literal|1
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_QDOC
argument_list|)
end_if
begin_comment
comment|// There used to be a T *dummy = 0 argument in Qt 4.0 to support MSVC6
end_comment
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|qMetaTypeId
name|QT_DEPRECATED
specifier|inline
name|Q_DECL_CONSTEXPR
name|int
name|qMetaTypeId
argument_list|(
argument|T *
argument_list|)
block|{
return|return
name|qMetaTypeId
operator|<
name|T
operator|>
operator|(
operator|)
return|;
block|}
end_expr_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|Q_CC_SUN
end_ifndef
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|qRegisterMetaType
name|QT_DEPRECATED
specifier|inline
name|Q_DECL_CONSTEXPR
name|int
name|qRegisterMetaType
argument_list|(
argument|T *
argument_list|)
block|{
return|return
name|qRegisterMetaType
operator|<
name|T
operator|>
operator|(
operator|)
return|;
block|}
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
DECL|struct|true
name|QMetaTypeIdQObject
operator|<
name|T
operator|*
operator|,
comment|/* isPointerToTypeDerivedFromQObject */
name|true
operator|>
block|{     enum
block|{
DECL|enumerator|Defined
name|Defined
operator|=
literal|1
block|}
block|;
DECL|function|qt_metatype_id
specifier|static
name|int
name|qt_metatype_id
argument_list|()
block|{
specifier|static
name|QBasicAtomicInt
name|metatype_id
operator|=
name|Q_BASIC_ATOMIC_INITIALIZER
argument_list|(
literal|0
argument_list|)
block|;
if|if
condition|(
specifier|const
name|int
name|id
init|=
name|metatype_id
operator|.
name|loadAcquire
argument_list|()
condition|)
return|return
name|id
return|;
specifier|const
name|char
operator|*
specifier|const
name|cName
operator|=
name|T
operator|::
name|staticMetaObject
operator|.
name|className
argument_list|()
block|;
name|QByteArray
name|typeName
block|;
name|typeName
operator|.
name|reserve
argument_list|(
name|int
argument_list|(
name|strlen
argument_list|(
name|cName
argument_list|)
argument_list|)
operator|+
literal|1
argument_list|)
block|;
name|typeName
operator|.
name|append
argument_list|(
name|cName
argument_list|)
operator|.
name|append
argument_list|(
literal|'*'
argument_list|)
block|;
specifier|const
name|int
name|newId
operator|=
name|qRegisterNormalizedMetaType
operator|<
name|T
operator|*
operator|>
operator|(
name|typeName
operator|,
name|reinterpret_cast
operator|<
name|T
operator|*
operator|*
operator|>
operator|(
name|quintptr
argument_list|(
operator|-
literal|1
argument_list|)
operator|)
operator|)
block|;
name|metatype_id
operator|.
name|storeRelease
argument_list|(
name|newId
argument_list|)
block|;
return|return
name|newId
return|;
block|}
end_expr_stmt
begin_ifndef
unit|};
ifndef|#
directive|ifndef
name|QT_NO_DATASTREAM
end_ifndef
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|qRegisterMetaTypeStreamOperators
specifier|inline
name|int
name|qRegisterMetaTypeStreamOperators
argument_list|()
block|{
name|int
name|id
operator|=
name|qMetaTypeId
operator|<
name|T
operator|>
operator|(
operator|)
block|;
name|QMetaType
operator|::
name|registerStreamOperators
argument_list|(
name|id
argument_list|,
name|QtMetaTypePrivate
operator|::
name|QMetaTypeFunctionHelper
operator|<
name|T
operator|>
operator|::
name|Save
argument_list|,
name|QtMetaTypePrivate
operator|::
name|QMetaTypeFunctionHelper
operator|<
name|T
operator|>
operator|::
name|Load
argument_list|)
block|;
return|return
name|id
return|;
block|}
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_define
DECL|macro|Q_DECLARE_OPAQUE_POINTER
define|#
directive|define
name|Q_DECLARE_OPAQUE_POINTER
parameter_list|(
name|POINTER
parameter_list|)
define|\
value|QT_BEGIN_NAMESPACE namespace QtPrivate {                            \         template<>                                                     \         struct IsPointerToTypeDerivedFromQObject<POINTER>              \         {                                                               \             enum { Value = false };                                     \         };                                                              \     } QT_END_NAMESPACE
end_define
begin_comment
unit|\
comment|/**/
end_comment
begin_define
DECL|macro|Q_DECLARE_METATYPE
define|#
directive|define
name|Q_DECLARE_METATYPE
parameter_list|(
name|TYPE
parameter_list|)
value|Q_DECLARE_METATYPE_IMPL(TYPE)
end_define
begin_define
DECL|macro|Q_DECLARE_METATYPE_IMPL
define|#
directive|define
name|Q_DECLARE_METATYPE_IMPL
parameter_list|(
name|TYPE
parameter_list|)
define|\
value|QT_BEGIN_NAMESPACE                                                  \     template<>                                                         \     struct QMetaTypeId< TYPE>                                          \     {                                                                   \         enum { Defined = 1 };                                           \         static int qt_metatype_id()                                     \             {                                                           \                 static QBasicAtomicInt metatype_id = Q_BASIC_ATOMIC_INITIALIZER(0); \                 if (const int id = metatype_id.loadAcquire())           \                     return id;                                          \                 const int newId = qRegisterMetaType< TYPE>(#TYPE,      \                               reinterpret_cast< TYPE *>(quintptr(-1))); \                 metatype_id.storeRelease(newId);                        \                 return newId;                                           \             }                                                           \     };                                                                  \     QT_END_NAMESPACE
end_define
begin_define
DECL|macro|Q_DECLARE_BUILTIN_METATYPE
define|#
directive|define
name|Q_DECLARE_BUILTIN_METATYPE
parameter_list|(
name|TYPE
parameter_list|,
name|METATYPEID
parameter_list|,
name|NAME
parameter_list|)
define|\
value|QT_BEGIN_NAMESPACE \     template<> struct QMetaTypeId2<NAME> \     { \         enum { Defined = 1, IsBuiltIn = true, MetaType = METATYPEID };   \         static inline Q_DECL_CONSTEXPR int qt_metatype_id() { return METATYPEID; } \     }; \     QT_END_NAMESPACE
end_define
begin_define
DECL|macro|QT_FORWARD_DECLARE_STATIC_TYPES_ITER
define|#
directive|define
name|QT_FORWARD_DECLARE_STATIC_TYPES_ITER
parameter_list|(
name|TypeName
parameter_list|,
name|TypeId
parameter_list|,
name|Name
parameter_list|)
define|\
value|class Name;
end_define
begin_macro
name|QT_FOR_EACH_STATIC_CORE_CLASS
argument_list|(
argument|QT_FORWARD_DECLARE_STATIC_TYPES_ITER
argument_list|)
end_macro
begin_macro
name|QT_FOR_EACH_STATIC_GUI_CLASS
argument_list|(
argument|QT_FORWARD_DECLARE_STATIC_TYPES_ITER
argument_list|)
end_macro
begin_macro
name|QT_FOR_EACH_STATIC_WIDGETS_CLASS
argument_list|(
argument|QT_FORWARD_DECLARE_STATIC_TYPES_ITER
argument_list|)
end_macro
begin_undef
DECL|macro|QT_FORWARD_DECLARE_STATIC_TYPES_ITER
undef|#
directive|undef
name|QT_FORWARD_DECLARE_STATIC_TYPES_ITER
end_undef
begin_typedef
DECL|typedef|QVariantList
typedef|typedef
name|QList
operator|<
name|QVariant
operator|>
name|QVariantList
expr_stmt|;
end_typedef
begin_typedef
DECL|typedef|QString
DECL|typedef|QVariantMap
typedef|typedef
name|QMap
operator|<
name|QString
operator|,
name|QVariant
operator|>
name|QVariantMap
expr_stmt|;
end_typedef
begin_typedef
DECL|typedef|QString
DECL|typedef|QVariantHash
typedef|typedef
name|QHash
operator|<
name|QString
operator|,
name|QVariant
operator|>
name|QVariantHash
expr_stmt|;
end_typedef
begin_typedef
DECL|typedef|QByteArrayList
typedef|typedef
name|QList
operator|<
name|QByteArray
operator|>
name|QByteArrayList
expr_stmt|;
end_typedef
begin_define
DECL|macro|Q_DECLARE_METATYPE_TEMPLATE_1ARG
define|#
directive|define
name|Q_DECLARE_METATYPE_TEMPLATE_1ARG
parameter_list|(
name|SINGLE_ARG_TEMPLATE
parameter_list|)
define|\
value|QT_BEGIN_NAMESPACE \ template<typename T> \ struct QMetaTypeId< SINGLE_ARG_TEMPLATE<T>> \ { \     enum { \         Defined = QMetaTypeId2<T>::Defined \     }; \     static int qt_metatype_id() \     { \         static QBasicAtomicInt metatype_id = Q_BASIC_ATOMIC_INITIALIZER(0); \         if (const int id = metatype_id.load()) \             return id; \         const char *tName = QMetaType::typeName(qMetaTypeId<T>()); \         Q_ASSERT(tName); \         const int tNameLen = int(qstrlen(tName)); \         QByteArray typeName; \         typeName.reserve(int(sizeof(#SINGLE_ARG_TEMPLATE)) + 1 + tNameLen + 1 + 1); \         typeName.append(#SINGLE_ARG_TEMPLATE, int(sizeof(#SINGLE_ARG_TEMPLATE)) - 1) \             .append('<').append(tName, tNameLen); \         if (typeName.endsWith('>')) \             typeName.append(' '); \         typeName.append('>'); \         const int newId = qRegisterNormalizedMetaType< SINGLE_ARG_TEMPLATE<T>>( \                         typeName, \                         reinterpret_cast< SINGLE_ARG_TEMPLATE<T> *>(quintptr(-1))); \         metatype_id.storeRelease(newId); \         return newId; \     } \ }; \ namespace QtPrivate { \ template<typename T> \ struct IsSequentialContainer<SINGLE_ARG_TEMPLATE<T>> \ { \     enum { Value = true }; \ }; \ } \ QT_END_NAMESPACE
end_define
begin_define
DECL|macro|Q_DECLARE_METATYPE_TEMPLATE_2ARG
define|#
directive|define
name|Q_DECLARE_METATYPE_TEMPLATE_2ARG
parameter_list|(
name|DOUBLE_ARG_TEMPLATE
parameter_list|)
define|\
value|QT_BEGIN_NAMESPACE \ template<typename T, typename U> \ struct QMetaTypeId< DOUBLE_ARG_TEMPLATE<T, U>> \ { \     enum { \         Defined = QMetaTypeId2<T>::Defined&& QMetaTypeId2<U>::Defined \     }; \     static int qt_metatype_id() \     { \         static QBasicAtomicInt metatype_id = Q_BASIC_ATOMIC_INITIALIZER(0); \         if (const int id = metatype_id.loadAcquire()) \             return id; \         const char *tName = QMetaType::typeName(qMetaTypeId<T>()); \         const char *uName = QMetaType::typeName(qMetaTypeId<U>()); \         Q_ASSERT(tName); \         Q_ASSERT(uName); \         const int tNameLen = int(qstrlen(tName)); \         const int uNameLen = int(qstrlen(uName)); \         QByteArray typeName; \         typeName.reserve(int(sizeof(#DOUBLE_ARG_TEMPLATE)) + 1 + tNameLen + 1 + uNameLen + 1 + 1); \         typeName.append(#DOUBLE_ARG_TEMPLATE, int(sizeof(#DOUBLE_ARG_TEMPLATE)) - 1) \             .append('<').append(tName, tNameLen).append(',').append(uName, uNameLen); \         if (typeName.endsWith('>')) \             typeName.append(' '); \         typeName.append('>'); \         const int newId = qRegisterNormalizedMetaType< DOUBLE_ARG_TEMPLATE<T, U>>(\                         typeName, \                         reinterpret_cast< DOUBLE_ARG_TEMPLATE<T, U> *>(quintptr(-1))); \         metatype_id.storeRelease(newId); \         return newId; \     } \ }; \ QT_END_NAMESPACE
end_define
begin_decl_stmt
name|namespace
name|QtPrivate
block|{
name|template
operator|<
name|typename
name|T
operator|,
name|bool
comment|/* isSharedPointerToQObjectDerived */
operator|=
name|false
operator|>
expr|struct
name|SharedPointerMetaTypeIdHelper
block|{     enum
block|{
name|Defined
operator|=
literal|0
block|}
block|;
specifier|static
name|int
name|qt_metatype_id
argument_list|()
block|{
return|return
operator|-
literal|1
return|;
block|}
expr|}
block|;  }
DECL|macro|Q_DECLARE_SMART_POINTER_METATYPE
define|#
directive|define
name|Q_DECLARE_SMART_POINTER_METATYPE
parameter_list|(
name|SMART_POINTER
parameter_list|)
define|\
value|QT_BEGIN_NAMESPACE \ namespace QtPrivate { \ template<typename T> \ struct SharedPointerMetaTypeIdHelper<SMART_POINTER<T>, true> \ { \     enum { \         Defined = 1 \     }; \     static int qt_metatype_id() \     { \         static QBasicAtomicInt metatype_id = Q_BASIC_ATOMIC_INITIALIZER(0); \         if (const int id = metatype_id.loadAcquire()) \             return id; \         const char * const cName = T::staticMetaObject.className(); \         QByteArray typeName; \         typeName.reserve(int(sizeof(#SMART_POINTER) + 1 + strlen(cName) + 1)); \         typeName.append(#SMART_POINTER, int(sizeof(#SMART_POINTER)) - 1) \             .append('<').append(cName).append('>'); \         const int newId = qRegisterNormalizedMetaType< SMART_POINTER<T>>( \                         typeName, \                         reinterpret_cast< SMART_POINTER<T> *>(quintptr(-1))); \         metatype_id.storeRelease(newId); \         return newId; \     } \ }; \ template<typename T> \ struct MetaTypeSmartPointerHelper<SMART_POINTER<T> , \         typename QEnableIf<IsPointerToTypeDerivedFromQObject<T*>::Value>::Type> \ { \     static bool registerConverter(int id) \     { \         const int toId = QMetaType::QObjectStar; \         if (!QMetaType::hasRegisteredConverterFunction(id, toId)) { \             QtPrivate::QSmartPointerConvertFunctor<SMART_POINTER<T>> o; \             static const QtPrivate::ConverterFunctor<SMART_POINTER<T>, \                                     QObject*, \                                     QSmartPointerConvertFunctor<SMART_POINTER<T>>> f(o); \             return QMetaType::registerConverterFunction(&f, id, toId); \         } \         return true; \     } \ }; \ } \ template<typename T> \ struct QMetaTypeId< SMART_POINTER<T>> \     : QtPrivate::SharedPointerMetaTypeIdHelper< SMART_POINTER<T>, \                                                 QtPrivate::IsPointerToTypeDerivedFromQObject<T*>::Value> \ { \ };\ QT_END_NAMESPACE
DECL|macro|Q_DECLARE_SEQUENTIAL_CONTAINER_METATYPE_ITER
define|#
directive|define
name|Q_DECLARE_SEQUENTIAL_CONTAINER_METATYPE_ITER
parameter_list|(
name|TEMPLATENAME
parameter_list|)
define|\
value|QT_BEGIN_NAMESPACE \     template<class T> class TEMPLATENAME; \     QT_END_NAMESPACE \     Q_DECLARE_METATYPE_TEMPLATE_1ARG(TEMPLATENAME)
name|QT_END_NAMESPACE
DECL|function|QT_FOR_EACH_AUTOMATIC_TEMPLATE_1ARG
name|QT_FOR_EACH_AUTOMATIC_TEMPLATE_1ARG
argument_list|(
argument|Q_DECLARE_SEQUENTIAL_CONTAINER_METATYPE_ITER
argument_list|)
DECL|macro|Q_DECLARE_SEQUENTIAL_CONTAINER_METATYPE_ITER
undef|#
directive|undef
name|Q_DECLARE_SEQUENTIAL_CONTAINER_METATYPE_ITER
DECL|macro|Q_DECLARE_SEQUENTIAL_CONTAINER_METATYPE
define|#
directive|define
name|Q_DECLARE_SEQUENTIAL_CONTAINER_METATYPE
value|Q_DECLARE_METATYPE_TEMPLATE_1ARG
name|Q_DECLARE_SEQUENTIAL_CONTAINER_METATYPE
argument_list|(
argument|std::vector
argument_list|)
name|Q_DECLARE_SEQUENTIAL_CONTAINER_METATYPE
argument_list|(
argument|std::list
argument_list|)
DECL|macro|Q_FORWARD_DECLARE_METATYPE_TEMPLATE_2ARG_ITER
define|#
directive|define
name|Q_FORWARD_DECLARE_METATYPE_TEMPLATE_2ARG_ITER
parameter_list|(
name|TEMPLATENAME
parameter_list|,
name|CPPTYPE
parameter_list|)
define|\
value|QT_BEGIN_NAMESPACE \     template<class T1, class T2> CPPTYPE TEMPLATENAME; \     QT_END_NAMESPACE \  QT_FOR_EACH_AUTOMATIC_TEMPLATE_2ARG(Q_FORWARD_DECLARE_METATYPE_TEMPLATE_2ARG_ITER)
DECL|macro|Q_DECLARE_METATYPE_TEMPLATE_2ARG_ITER
undef|#
directive|undef
name|Q_DECLARE_METATYPE_TEMPLATE_2ARG_ITER
DECL|macro|Q_DECLARE_ASSOCIATIVE_CONTAINER_METATYPE
define|#
directive|define
name|Q_DECLARE_ASSOCIATIVE_CONTAINER_METATYPE
parameter_list|(
name|TEMPLATENAME
parameter_list|)
define|\
value|QT_BEGIN_NAMESPACE \     namespace QtPrivate { \     template<typename T, typename U> \     struct IsAssociativeContainer<TEMPLATENAME<T, U>> \     { \         enum { Value = true }; \     }; \     } \     QT_END_NAMESPACE \     Q_DECLARE_METATYPE_TEMPLATE_2ARG(TEMPLATENAME)
name|Q_DECLARE_ASSOCIATIVE_CONTAINER_METATYPE
argument_list|(
argument|QHash
argument_list|)
name|Q_DECLARE_ASSOCIATIVE_CONTAINER_METATYPE
argument_list|(
argument|QMap
argument_list|)
name|Q_DECLARE_ASSOCIATIVE_CONTAINER_METATYPE
argument_list|(
argument|std::map
argument_list|)
name|Q_DECLARE_METATYPE_TEMPLATE_2ARG
argument_list|(
argument|QPair
argument_list|)
name|Q_DECLARE_METATYPE_TEMPLATE_2ARG
argument_list|(
argument|std::pair
argument_list|)
DECL|macro|Q_DECLARE_METATYPE_TEMPLATE_SMART_POINTER_ITER
define|#
directive|define
name|Q_DECLARE_METATYPE_TEMPLATE_SMART_POINTER_ITER
parameter_list|(
name|TEMPLATENAME
parameter_list|)
define|\
value|Q_DECLARE_SMART_POINTER_METATYPE(TEMPLATENAME)
name|QT_FOR_EACH_AUTOMATIC_TEMPLATE_SMART_POINTER
argument_list|(
argument|Q_DECLARE_METATYPE_TEMPLATE_SMART_POINTER_ITER
argument_list|)
name|QT_BEGIN_NAMESPACE
DECL|macro|Q_DECLARE_METATYPE_TEMPLATE_SMART_POINTER_ITER
undef|#
directive|undef
name|Q_DECLARE_METATYPE_TEMPLATE_SMART_POINTER_ITER
specifier|inline
name|QMetaType
operator|::
name|QMetaType
argument_list|(
argument|const ExtensionFlag extensionFlags
argument_list|,
argument|const QMetaTypeInterface *info
argument_list|,
argument|Creator creator
argument_list|,
argument|Deleter deleter
argument_list|,
argument|SaveOperator saveOp
argument_list|,
argument|LoadOperator loadOp
argument_list|,
argument|Constructor constructor
argument_list|,
argument|Destructor destructor
argument_list|,
argument|uint size
argument_list|,
argument|uint theTypeFlags
argument_list|,
argument|int typeId
argument_list|,
argument|const QMetaObject *_metaObject
argument_list|)
operator|:
name|m_creator_unused
argument_list|(
name|creator
argument_list|)
operator|,
name|m_deleter_unused
argument_list|(
name|deleter
argument_list|)
operator|,
name|m_saveOp
argument_list|(
name|saveOp
argument_list|)
operator|,
name|m_loadOp
argument_list|(
name|loadOp
argument_list|)
operator|,
name|m_constructor
argument_list|(
name|constructor
argument_list|)
operator|,
name|m_destructor
argument_list|(
name|destructor
argument_list|)
operator|,
name|m_extension
argument_list|(
literal|0
argument_list|)
operator|,
name|m_size
argument_list|(
name|size
argument_list|)
operator|,
name|m_typeFlags
argument_list|(
name|theTypeFlags
argument_list|)
operator|,
name|m_extensionFlags
argument_list|(
name|extensionFlags
argument_list|)
operator|,
name|m_typeId
argument_list|(
name|typeId
argument_list|)
operator|,
name|m_metaObject
argument_list|(
argument|_metaObject
argument_list|)
block|{
if|if
condition|(
name|Q_UNLIKELY
argument_list|(
name|isExtended
argument_list|(
name|CtorEx
argument_list|)
operator|||
name|typeId
operator|==
name|QMetaType
operator|::
name|Void
argument_list|)
condition|)
name|ctor
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
DECL|function|~QMetaType
specifier|inline
name|QMetaType
operator|::
operator|~
name|QMetaType
argument_list|()
block|{
if|if
condition|(
name|Q_UNLIKELY
argument_list|(
name|isExtended
argument_list|(
name|DtorEx
argument_list|)
argument_list|)
condition|)
name|dtor
argument_list|()
expr_stmt|;
block|}
DECL|function|isValid
specifier|inline
name|bool
name|QMetaType
operator|::
name|isValid
argument_list|()
specifier|const
block|{
return|return
name|m_typeId
operator|!=
name|UnknownType
return|;
block|}
DECL|function|isRegistered
specifier|inline
name|bool
name|QMetaType
operator|::
name|isRegistered
argument_list|()
specifier|const
block|{
return|return
name|isValid
argument_list|()
return|;
block|}
DECL|function|create
specifier|inline
name|void
operator|*
name|QMetaType
operator|::
name|create
argument_list|(
argument|const void *copy
argument_list|)
specifier|const
block|{
comment|// ### TODO Qt6 remove the extension
return|return
name|createExtended
argument_list|(
name|copy
argument_list|)
return|;
block|}
DECL|function|destroy
specifier|inline
name|void
name|QMetaType
operator|::
name|destroy
argument_list|(
argument|void *data
argument_list|)
specifier|const
block|{
comment|// ### TODO Qt6 remove the extension
name|destroyExtended
argument_list|(
name|data
argument_list|)
block|; }
DECL|function|construct
specifier|inline
name|void
operator|*
name|QMetaType
operator|::
name|construct
argument_list|(
argument|void *where
argument_list|,
argument|const void *copy
argument_list|)
specifier|const
block|{
if|if
condition|(
name|Q_UNLIKELY
argument_list|(
name|isExtended
argument_list|(
name|ConstructEx
argument_list|)
argument_list|)
condition|)
return|return
name|constructExtended
argument_list|(
name|where
argument_list|,
name|copy
argument_list|)
return|;
return|return
name|m_constructor
argument_list|(
name|where
argument_list|,
name|copy
argument_list|)
return|;
block|}
end_decl_stmt
begin_expr_stmt
DECL|function|destruct
specifier|inline
name|void
name|QMetaType
operator|::
name|destruct
argument_list|(
argument|void *data
argument_list|)
specifier|const
block|{
if|if
condition|(
name|Q_UNLIKELY
argument_list|(
name|isExtended
argument_list|(
name|DestructEx
argument_list|)
argument_list|)
condition|)
return|return
name|destructExtended
argument_list|(
name|data
argument_list|)
return|;
end_expr_stmt
begin_if
if|if
condition|(
name|Q_UNLIKELY
argument_list|(
operator|!
name|data
argument_list|)
condition|)
return|return;
end_if
begin_expr_stmt
name|m_destructor
argument_list|(
name|data
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
unit|}  inline
DECL|function|sizeOf
name|int
name|QMetaType
operator|::
name|sizeOf
argument_list|()
specifier|const
block|{
if|if
condition|(
name|Q_UNLIKELY
argument_list|(
name|isExtended
argument_list|(
name|SizeEx
argument_list|)
argument_list|)
condition|)
return|return
name|sizeExtended
argument_list|()
return|;
end_expr_stmt
begin_return
return|return
name|m_size
return|;
end_return
begin_expr_stmt
unit|}  inline
DECL|function|flags
name|QMetaType
operator|::
name|TypeFlags
name|QMetaType
operator|::
name|flags
argument_list|()
specifier|const
block|{
if|if
condition|(
name|Q_UNLIKELY
argument_list|(
name|isExtended
argument_list|(
name|FlagsEx
argument_list|)
argument_list|)
condition|)
return|return
name|flagsExtended
argument_list|()
return|;
end_expr_stmt
begin_return
return|return
name|QMetaType
operator|::
name|TypeFlags
argument_list|(
name|m_typeFlags
argument_list|)
return|;
end_return
begin_expr_stmt
unit|}  inline
DECL|function|metaObject
specifier|const
name|QMetaObject
operator|*
name|QMetaType
operator|::
name|metaObject
argument_list|()
specifier|const
block|{
if|if
condition|(
name|Q_UNLIKELY
argument_list|(
name|isExtended
argument_list|(
name|MetaObjectEx
argument_list|)
argument_list|)
condition|)
return|return
name|metaObjectExtended
argument_list|()
return|;
end_expr_stmt
begin_return
return|return
name|m_metaObject
return|;
end_return
begin_macro
unit|}  QT_END_NAMESPACE
DECL|function|QT_FOR_EACH_STATIC_TYPE
name|QT_FOR_EACH_STATIC_TYPE
argument_list|(
argument|Q_DECLARE_BUILTIN_METATYPE
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QtMetaTypePrivate::QSequentialIterableImpl
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QtMetaTypePrivate::QAssociativeIterableImpl
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QtMetaTypePrivate::QPairVariantInterfaceImpl
argument_list|)
end_macro
begin_expr_stmt
name|QT_BEGIN_NAMESPACE
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|bool
name|QtPrivate
operator|::
name|IsMetaTypePair
operator|<
name|T
operator|,
name|true
operator|>
operator|::
name|registerConverter
argument_list|(
argument|int id
argument_list|)
block|{
specifier|const
name|int
name|toId
operator|=
name|qMetaTypeId
operator|<
name|QtMetaTypePrivate
operator|::
name|QPairVariantInterfaceImpl
operator|>
operator|(
operator|)
block|;
if|if
condition|(
operator|!
name|QMetaType
operator|::
name|hasRegisteredConverterFunction
argument_list|(
name|id
argument_list|,
name|toId
argument_list|)
condition|)
block|{
name|QtMetaTypePrivate
operator|::
name|QPairVariantInterfaceConvertFunctor
operator|<
name|T
operator|>
name|o
expr_stmt|;
specifier|static
specifier|const
name|QtPrivate
operator|::
name|ConverterFunctor
operator|<
name|T
operator|,
name|QtMetaTypePrivate
operator|::
name|QPairVariantInterfaceImpl
operator|,
name|QtMetaTypePrivate
operator|::
name|QPairVariantInterfaceConvertFunctor
operator|<
name|T
operator|>
expr|>
name|f
argument_list|(
name|o
argument_list|)
expr_stmt|;
return|return
name|QMetaType
operator|::
name|registerConverterFunction
argument_list|(
operator|&
name|f
argument_list|,
name|id
argument_list|,
name|toId
argument_list|)
return|;
block|}
end_expr_stmt
begin_return
return|return
name|true
return|;
end_return
begin_macro
unit|}  namespace
name|QtPrivate
end_macro
begin_block
block|{
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|ValueTypeIsMetaType
operator|<
name|T
operator|,
name|true
operator|>
block|{
specifier|static
name|bool
name|registerConverter
argument_list|(
argument|int id
argument_list|)
block|{
specifier|const
name|int
name|toId
operator|=
name|qMetaTypeId
operator|<
name|QtMetaTypePrivate
operator|::
name|QSequentialIterableImpl
operator|>
operator|(
operator|)
block|;
if|if
condition|(
operator|!
name|QMetaType
operator|::
name|hasRegisteredConverterFunction
argument_list|(
name|id
argument_list|,
name|toId
argument_list|)
condition|)
block|{
name|QtMetaTypePrivate
operator|::
name|QSequentialIterableConvertFunctor
operator|<
name|T
operator|>
name|o
expr_stmt|;
specifier|static
specifier|const
name|QtPrivate
operator|::
name|ConverterFunctor
operator|<
name|T
operator|,
name|QtMetaTypePrivate
operator|::
name|QSequentialIterableImpl
operator|,
name|QtMetaTypePrivate
operator|::
name|QSequentialIterableConvertFunctor
operator|<
name|T
operator|>
expr|>
name|f
argument_list|(
name|o
argument_list|)
expr_stmt|;
return|return
name|QMetaType
operator|::
name|registerConverterFunction
argument_list|(
operator|&
name|f
argument_list|,
name|id
argument_list|,
name|toId
argument_list|)
return|;
block|}
return|return
name|true
return|;
block|}
block|}
end_block
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|AssociativeValueTypeIsMetaType
operator|<
name|T
operator|,
name|true
operator|>
block|{
specifier|static
name|bool
name|registerConverter
argument_list|(
argument|int id
argument_list|)
block|{
specifier|const
name|int
name|toId
operator|=
name|qMetaTypeId
operator|<
name|QtMetaTypePrivate
operator|::
name|QAssociativeIterableImpl
operator|>
operator|(
operator|)
block|;
if|if
condition|(
operator|!
name|QMetaType
operator|::
name|hasRegisteredConverterFunction
argument_list|(
name|id
argument_list|,
name|toId
argument_list|)
condition|)
block|{
name|QtMetaTypePrivate
operator|::
name|QAssociativeIterableConvertFunctor
operator|<
name|T
operator|>
name|o
expr_stmt|;
specifier|static
specifier|const
name|QtPrivate
operator|::
name|ConverterFunctor
operator|<
name|T
operator|,
name|QtMetaTypePrivate
operator|::
name|QAssociativeIterableImpl
operator|,
name|QtMetaTypePrivate
operator|::
name|QAssociativeIterableConvertFunctor
operator|<
name|T
operator|>
expr|>
name|f
argument_list|(
name|o
argument_list|)
expr_stmt|;
return|return
name|QMetaType
operator|::
name|registerConverterFunction
argument_list|(
operator|&
name|f
argument_list|,
name|id
argument_list|,
name|toId
argument_list|)
return|;
block|}
return|return
name|true
return|;
block|}
end_expr_stmt
begin_macro
unit|}; }  namespace
name|QtMetaTypePrivate
end_macro
begin_block
block|{
specifier|inline
name|Q_DECL_CONSTEXPR
name|bool
name|isBuiltinSequentialType
parameter_list|(
name|int
name|typeId
parameter_list|)
block|{
return|return
name|typeId
operator|==
name|qMetaTypeId
operator|<
name|QStringList
operator|>
operator|(
operator|)
operator|||
name|typeId
operator|==
name|qMetaTypeId
operator|<
name|QByteArrayList
operator|>
operator|(
operator|)
operator|||
name|typeId
operator|==
name|qMetaTypeId
operator|<
name|QVariantList
operator|>
operator|(
operator|)
return|;
block|}
specifier|inline
name|Q_DECL_CONSTEXPR
name|bool
name|isBuiltinAssociativeType
parameter_list|(
name|int
name|typeId
parameter_list|)
block|{
return|return
name|typeId
operator|==
name|qMetaTypeId
operator|<
name|QVariantHash
operator|>
operator|(
operator|)
operator|||
name|typeId
operator|==
name|qMetaTypeId
operator|<
name|QVariantMap
operator|>
operator|(
operator|)
return|;
block|}
block|}
end_block
begin_comment
comment|// QtMetaTypePrivate
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QMETATYPE_H
end_comment
end_unit
