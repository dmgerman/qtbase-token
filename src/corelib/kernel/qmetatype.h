begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QMETATYPE_H
end_ifndef
begin_define
DECL|macro|QMETATYPE_H
define|#
directive|define
name|QMETATYPE_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qglobal.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qatomic.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qbytearray.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qvarlengtharray.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qisenum.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QOBJECT
end_ifndef
begin_include
include|#
directive|include
file|<QtCore/qobjectdefs.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<new>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Bool
end_ifdef
begin_error
error|#
directive|error
error|qmetatype.h must be included before any header file that defines Bool
end_error
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
comment|// F is a tuple: (QMetaType::TypeName, QMetaType::TypeNameID, RealType)
DECL|macro|QT_FOR_EACH_STATIC_PRIMITIVE_TYPE
define|#
directive|define
name|QT_FOR_EACH_STATIC_PRIMITIVE_TYPE
parameter_list|(
name|F
parameter_list|)
define|\
value|F(Void, 43, void) \     F(Bool, 1, bool) \     F(Int, 2, int) \     F(UInt, 3, uint) \     F(LongLong, 4, qlonglong) \     F(ULongLong, 5, qulonglong) \     F(Double, 6, double) \     F(Long, 32, long) \     F(Short, 33, short) \     F(Char, 34, char) \     F(ULong, 35, ulong) \     F(UShort, 36, ushort) \     F(UChar, 37, uchar) \     F(Float, 38, float) \     F(SChar, 49, signed char) \  #define QT_FOR_EACH_STATIC_PRIMITIVE_POINTER(F)\     F(VoidStar, 31, void*) \  #define QT_FOR_EACH_STATIC_CORE_CLASS(F)\     F(QChar, 7, QChar) \     F(QString, 10, QString) \     F(QStringList, 11, QStringList) \     F(QByteArray, 12, QByteArray) \     F(QBitArray, 13, QBitArray) \     F(QDate, 14, QDate) \     F(QTime, 15, QTime) \     F(QDateTime, 16, QDateTime) \     F(QUrl, 17, QUrl) \     F(QLocale, 18, QLocale) \     F(QRect, 19, QRect) \     F(QRectF, 20, QRectF) \     F(QSize, 21, QSize) \     F(QSizeF, 22, QSizeF) \     F(QLine, 23, QLine) \     F(QLineF, 24, QLineF) \     F(QPoint, 25, QPoint) \     F(QPointF, 26, QPointF) \     F(QRegExp, 27, QRegExp) \     F(QEasingCurve, 29, QEasingCurve) \     F(QUuid, 30, QUuid) \     F(QVariant, 41, QVariant) \     F(QModelIndex, 42, QModelIndex) \     F(QRegularExpression, 44, QRegularExpression) \     F(QJsonValue, 45, QJsonValue) \     F(QJsonObject, 46, QJsonObject) \     F(QJsonArray, 47, QJsonArray) \     F(QJsonDocument, 48, QJsonDocument) \  #define QT_FOR_EACH_STATIC_CORE_POINTER(F)\     F(QObjectStar, 39, QObject*) \     F(QWidgetStar, 40, QWidget*) \  #define QT_FOR_EACH_STATIC_CORE_TEMPLATE(F)\     F(QVariantMap, 8, QVariantMap) \     F(QVariantList, 9, QVariantList) \     F(QVariantHash, 28, QVariantHash) \  #define QT_FOR_EACH_STATIC_GUI_CLASS(F)\     F(QFont, 64, QFont) \     F(QPixmap, 65, QPixmap) \     F(QBrush, 66, QBrush) \     F(QColor, 67, QColor) \     F(QPalette, 68, QPalette) \     F(QIcon, 69, QIcon) \     F(QImage, 70, QImage) \     F(QPolygon, 71, QPolygon) \     F(QRegion, 72, QRegion) \     F(QBitmap, 73, QBitmap) \     F(QCursor, 74, QCursor) \     F(QKeySequence, 75, QKeySequence) \     F(QPen, 76, QPen) \     F(QTextLength, 77, QTextLength) \     F(QTextFormat, 78, QTextFormat) \     F(QMatrix, 79, QMatrix) \     F(QTransform, 80, QTransform) \     F(QMatrix4x4, 81, QMatrix4x4) \     F(QVector2D, 82, QVector2D) \     F(QVector3D, 83, QVector3D) \     F(QVector4D, 84, QVector4D) \     F(QQuaternion, 85, QQuaternion) \     F(QPolygonF, 86, QPolygonF) \   #define QT_FOR_EACH_STATIC_WIDGETS_CLASS(F)\     F(QSizePolicy, 121, QSizePolicy)
type|\
comment|// ### FIXME kill that set
DECL|macro|QT_FOR_EACH_STATIC_HACKS_TYPE
define|#
directive|define
name|QT_FOR_EACH_STATIC_HACKS_TYPE
parameter_list|(
name|F
parameter_list|)
define|\
value|F(QMetaTypeId2<qreal>::MetaType, -1, qreal)
comment|// F is a tuple: (QMetaType::TypeName, QMetaType::TypeNameID, AliasingType, "RealType")
DECL|macro|QT_FOR_EACH_STATIC_ALIAS_TYPE
define|#
directive|define
name|QT_FOR_EACH_STATIC_ALIAS_TYPE
parameter_list|(
name|F
parameter_list|)
define|\
value|F(ULong, -1, ulong, "unsigned long") \     F(UInt, -1, uint, "unsigned int") \     F(UShort, -1, ushort, "unsigned short") \     F(UChar, -1, uchar, "unsigned char") \     F(LongLong, -1, qlonglong, "long long") \     F(ULongLong, -1, qulonglong, "unsigned long long") \     F(SChar, -1, signed char, "qint8") \     F(UChar, -1, uchar, "quint8") \     F(Short, -1, short, "qint16") \     F(UShort, -1, ushort, "quint16") \     F(Int, -1, int, "qint32") \     F(UInt, -1, uint, "quint32") \     F(LongLong, -1, qlonglong, "qint64") \     F(ULongLong, -1, qulonglong, "quint64") \     F(QVariantList, -1, QVariantList, "QList<QVariant>") \     F(QVariantMap, -1, QVariantMap, "QMap<QString,QVariant>") \     F(QVariantHash, -1, QVariantHash, "QHash<QString,QVariant>") \  #define QT_FOR_EACH_STATIC_TYPE(F)\     QT_FOR_EACH_STATIC_PRIMITIVE_TYPE(F)\     QT_FOR_EACH_STATIC_PRIMITIVE_POINTER(F)\     QT_FOR_EACH_STATIC_CORE_CLASS(F)\     QT_FOR_EACH_STATIC_CORE_POINTER(F)\     QT_FOR_EACH_STATIC_CORE_TEMPLATE(F)\     QT_FOR_EACH_STATIC_GUI_CLASS(F)\     QT_FOR_EACH_STATIC_WIDGETS_CLASS(F)\  #define QT_DEFINE_METATYPE_ID(TypeName, Id, Name) \     TypeName = Id,
DECL|variable|QDataStream
name|class
name|QDataStream
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QMetaTypeInterface
name|class
name|QMetaTypeInterface
decl_stmt|;
end_decl_stmt
begin_struct_decl
struct_decl|struct
name|QMetaObject
struct_decl|;
end_struct_decl
begin_decl_stmt
name|class
name|Q_CORE_EXPORT
name|QMetaType
block|{
enum|enum
name|ExtensionFlag
block|{
name|NoExtensionFlags
block|,
name|CreateEx
init|=
literal|0x1
block|,
name|DestroyEx
init|=
literal|0x2
block|,
name|ConstructEx
init|=
literal|0x4
block|,
name|DestructEx
init|=
literal|0x8
block|,
name|NameEx
init|=
literal|0x10
block|,
name|SizeEx
init|=
literal|0x20
block|,
name|CtorEx
init|=
literal|0x40
block|,
name|DtorEx
init|=
literal|0x80
block|,
name|FlagsEx
init|=
literal|0x100
block|}
enum|;
name|public
label|:
ifndef|#
directive|ifndef
name|Q_QDOC
comment|// The code that actually gets compiled.
enum|enum
name|Type
block|{
comment|// these are merged with QVariant
name|QT_FOR_EACH_STATIC_TYPE
argument_list|(
argument|QT_DEFINE_METATYPE_ID
argument_list|)
name|FirstCoreType
init|=
name|Bool
block|,
name|LastCoreType
init|=
name|SChar
block|,
name|FirstGuiType
init|=
name|QFont
block|,
name|LastGuiType
init|=
name|QPolygonF
block|,
name|FirstWidgetsType
init|=
name|QSizePolicy
block|,
name|LastWidgetsType
init|=
name|QSizePolicy
block|,
name|HighestInternalId
init|=
name|LastWidgetsType
block|,
name|QReal
init|=
sizeof|sizeof
argument_list|(
name|qreal
argument_list|)
operator|==
sizeof|sizeof
argument_list|(
name|double
argument_list|)
condition|?
name|Double
else|:
name|Float
block|,
name|UnknownType
init|=
literal|0
block|,
name|User
init|=
literal|1024
block|}
enum|;
else|#
directive|else
comment|// If we are using QDoc it fakes the Type enum looks like this.
enum|enum
name|Type
block|{
name|Void
init|=
literal|0
block|,
name|Bool
init|=
literal|1
block|,
name|Int
init|=
literal|2
block|,
name|UInt
init|=
literal|3
block|,
name|LongLong
init|=
literal|4
block|,
name|ULongLong
init|=
literal|5
block|,
name|Double
init|=
literal|6
block|,
name|Long
init|=
literal|32
block|,
name|Short
init|=
literal|33
block|,
name|Char
init|=
literal|34
block|,
name|ULong
init|=
literal|35
block|,
name|UShort
init|=
literal|36
block|,
name|UChar
init|=
literal|37
block|,
name|Float
init|=
literal|38
block|,
name|VoidStar
init|=
literal|31
block|,
name|QChar
init|=
literal|7
block|,
name|QString
init|=
literal|10
block|,
name|QStringList
init|=
literal|11
block|,
name|QByteArray
init|=
literal|12
block|,
name|QBitArray
init|=
literal|13
block|,
name|QDate
init|=
literal|14
block|,
name|QTime
init|=
literal|15
block|,
name|QDateTime
init|=
literal|16
block|,
name|QUrl
init|=
literal|17
block|,
name|QLocale
init|=
literal|18
block|,
name|QRect
init|=
literal|19
block|,
name|QRectF
init|=
literal|20
block|,
name|QSize
init|=
literal|21
block|,
name|QSizeF
init|=
literal|22
block|,
name|QLine
init|=
literal|23
block|,
name|QLineF
init|=
literal|24
block|,
name|QPoint
init|=
literal|25
block|,
name|QPointF
init|=
literal|26
block|,
name|QRegExp
init|=
literal|27
block|,
name|QEasingCurve
init|=
literal|29
block|,
name|QUuid
init|=
literal|30
block|,
name|QVariant
init|=
literal|41
block|,
name|QModelIndex
init|=
literal|42
block|,
name|QObjectStar
init|=
literal|39
block|,
name|QWidgetStar
init|=
literal|40
block|,
name|QVariantMap
init|=
literal|8
block|,
name|QVariantList
init|=
literal|9
block|,
name|QVariantHash
init|=
literal|28
block|,
name|QFont
init|=
literal|64
block|,
name|QPixmap
init|=
literal|65
block|,
name|QBrush
init|=
literal|66
block|,
name|QColor
init|=
literal|67
block|,
name|QPalette
init|=
literal|68
block|,
name|QIcon
init|=
literal|69
block|,
name|QImage
init|=
literal|70
block|,
name|QPolygon
init|=
literal|71
block|,
name|QRegion
init|=
literal|72
block|,
name|QBitmap
init|=
literal|73
block|,
name|QCursor
init|=
literal|74
block|,
name|QKeySequence
init|=
literal|75
block|,
name|QPen
init|=
literal|76
block|,
name|QTextLength
init|=
literal|77
block|,
name|QTextFormat
init|=
literal|78
block|,
name|QMatrix
init|=
literal|79
block|,
name|QTransform
init|=
literal|80
block|,
name|QMatrix4x4
init|=
literal|81
block|,
name|QVector2D
init|=
literal|82
block|,
name|QVector3D
init|=
literal|83
block|,
name|QVector4D
init|=
literal|84
block|,
name|QQuaternion
init|=
literal|85
block|,
name|QPolygonF
init|=
literal|86
block|,
name|QSizePolicy
init|=
literal|121
block|,
name|User
init|=
literal|256
block|}
enum|;
endif|#
directive|endif
enum|enum
name|TypeFlag
block|{
name|NeedsConstruction
init|=
literal|0x1
block|,
name|NeedsDestruction
init|=
literal|0x2
block|,
name|MovableType
init|=
literal|0x4
block|,
name|PointerToQObject
init|=
literal|0x8
block|,
name|IsEnumeration
init|=
literal|0x10
block|,
name|SharedPointerToQObject
init|=
literal|0x20
block|,
name|WeakPointerToQObject
init|=
literal|0x40
block|,
name|TrackingPointerToQObject
init|=
literal|0x80
block|}
enum|;
name|Q_DECLARE_FLAGS
argument_list|(
argument|TypeFlags
argument_list|,
argument|TypeFlag
argument_list|)
typedef|typedef
name|void
function_decl|(
modifier|*
name|Deleter
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
typedef|typedef
name|void
modifier|*
function_decl|(
modifier|*
name|Creator
function_decl|)
parameter_list|(
specifier|const
name|void
modifier|*
parameter_list|)
function_decl|;
typedef|typedef
name|void
function_decl|(
modifier|*
name|Destructor
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
typedef|typedef
name|void
modifier|*
function_decl|(
modifier|*
name|Constructor
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|)
function_decl|;
typedef|typedef
name|void
function_decl|(
modifier|*
name|SaveOperator
function_decl|)
parameter_list|(
name|QDataStream
modifier|&
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|)
function_decl|;
typedef|typedef
name|void
function_decl|(
modifier|*
name|LoadOperator
function_decl|)
parameter_list|(
name|QDataStream
modifier|&
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|QT_NO_DATASTREAM
specifier|static
name|void
name|registerStreamOperators
parameter_list|(
specifier|const
name|char
modifier|*
name|typeName
parameter_list|,
name|SaveOperator
name|saveOp
parameter_list|,
name|LoadOperator
name|loadOp
parameter_list|)
function_decl|;
specifier|static
name|void
name|registerStreamOperators
parameter_list|(
name|int
name|type
parameter_list|,
name|SaveOperator
name|saveOp
parameter_list|,
name|LoadOperator
name|loadOp
parameter_list|)
function_decl|;
endif|#
directive|endif
specifier|static
name|int
name|registerType
parameter_list|(
specifier|const
name|char
modifier|*
name|typeName
parameter_list|,
name|Deleter
name|deleter
parameter_list|,
name|Creator
name|creator
parameter_list|)
function_decl|;
specifier|static
name|int
name|registerType
argument_list|(
specifier|const
name|char
operator|*
name|typeName
argument_list|,
name|Deleter
name|deleter
argument_list|,
name|Creator
name|creator
argument_list|,
name|Destructor
name|destructor
argument_list|,
name|Constructor
name|constructor
argument_list|,
name|int
name|size
argument_list|,
name|QMetaType
operator|::
name|TypeFlags
name|flags
argument_list|,
specifier|const
name|QMetaObject
operator|*
name|metaObject
argument_list|)
decl_stmt|;
specifier|static
name|int
name|registerNormalizedType
argument_list|(
specifier|const
name|QT_PREPEND_NAMESPACE
argument_list|(
name|QByteArray
argument_list|)
operator|&
name|normalizedTypeName
argument_list|,
name|Deleter
name|deleter
argument_list|,
name|Creator
name|creator
argument_list|,
name|Destructor
name|destructor
argument_list|,
name|Constructor
name|constructor
argument_list|,
name|int
name|size
argument_list|,
name|QMetaType
operator|::
name|TypeFlags
name|flags
argument_list|,
specifier|const
name|QMetaObject
operator|*
name|metaObject
argument_list|)
decl_stmt|;
specifier|static
name|int
name|registerTypedef
parameter_list|(
specifier|const
name|char
modifier|*
name|typeName
parameter_list|,
name|int
name|aliasId
parameter_list|)
function_decl|;
specifier|static
name|int
name|registerNormalizedTypedef
argument_list|(
specifier|const
name|QT_PREPEND_NAMESPACE
argument_list|(
name|QByteArray
argument_list|)
operator|&
name|normalizedTypeName
argument_list|,
name|int
name|aliasId
argument_list|)
decl_stmt|;
specifier|static
name|int
name|type
parameter_list|(
specifier|const
name|char
modifier|*
name|typeName
parameter_list|)
function_decl|;
specifier|static
specifier|const
name|char
modifier|*
name|typeName
parameter_list|(
name|int
name|type
parameter_list|)
function_decl|;
specifier|static
name|int
name|sizeOf
parameter_list|(
name|int
name|type
parameter_list|)
function_decl|;
specifier|static
name|TypeFlags
name|typeFlags
parameter_list|(
name|int
name|type
parameter_list|)
function_decl|;
specifier|static
name|bool
name|isRegistered
parameter_list|(
name|int
name|type
parameter_list|)
function_decl|;
specifier|static
name|void
modifier|*
name|create
parameter_list|(
name|int
name|type
parameter_list|,
specifier|const
name|void
modifier|*
name|copy
init|=
literal|0
parameter_list|)
function_decl|;
if|#
directive|if
name|QT_DEPRECATED_SINCE
argument_list|(
literal|5
operator|,
literal|0
argument_list|)
name|QT_DEPRECATED
specifier|static
name|void
modifier|*
name|construct
parameter_list|(
name|int
name|type
parameter_list|,
specifier|const
name|void
modifier|*
name|copy
init|=
literal|0
parameter_list|)
block|{
return|return
name|create
argument_list|(
name|type
argument_list|,
name|copy
argument_list|)
return|;
block|}
endif|#
directive|endif
specifier|static
name|void
name|destroy
parameter_list|(
name|int
name|type
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
function_decl|;
specifier|static
name|void
modifier|*
name|construct
parameter_list|(
name|int
name|type
parameter_list|,
name|void
modifier|*
name|where
parameter_list|,
specifier|const
name|void
modifier|*
name|copy
parameter_list|)
function_decl|;
specifier|static
name|void
name|destruct
parameter_list|(
name|int
name|type
parameter_list|,
name|void
modifier|*
name|where
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|QT_NO_DATASTREAM
specifier|static
name|bool
name|save
parameter_list|(
name|QDataStream
modifier|&
name|stream
parameter_list|,
name|int
name|type
parameter_list|,
specifier|const
name|void
modifier|*
name|data
parameter_list|)
function_decl|;
specifier|static
name|bool
name|load
parameter_list|(
name|QDataStream
modifier|&
name|stream
parameter_list|,
name|int
name|type
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
function_decl|;
endif|#
directive|endif
name|explicit
name|QMetaType
parameter_list|(
specifier|const
name|int
name|type
parameter_list|)
function_decl|;
specifier|inline
operator|~
name|QMetaType
argument_list|()
expr_stmt|;
specifier|inline
name|bool
name|isValid
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
name|bool
name|isRegistered
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
name|int
name|sizeOf
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
name|TypeFlags
name|flags
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
name|void
modifier|*
name|create
argument_list|(
specifier|const
name|void
operator|*
name|copy
operator|=
literal|0
argument_list|)
decl|const
decl_stmt|;
specifier|inline
name|void
name|destroy
argument_list|(
name|void
operator|*
name|data
argument_list|)
decl|const
decl_stmt|;
specifier|inline
name|void
modifier|*
name|construct
argument_list|(
name|void
operator|*
name|where
argument_list|,
specifier|const
name|void
operator|*
name|copy
operator|=
literal|0
argument_list|)
decl|const
decl_stmt|;
specifier|inline
name|void
name|destruct
argument_list|(
name|void
operator|*
name|data
argument_list|)
decl|const
decl_stmt|;
name|private
label|:
specifier|static
name|QMetaType
name|typeInfo
parameter_list|(
specifier|const
name|int
name|type
parameter_list|)
function_decl|;
specifier|inline
name|QMetaType
argument_list|(
argument|const ExtensionFlag extensionFlags
argument_list|,
argument|const QMetaTypeInterface *info
argument_list|,
argument|Creator creator
argument_list|,
argument|Deleter deleter
argument_list|,
argument|SaveOperator saveOp
argument_list|,
argument|LoadOperator loadOp
argument_list|,
argument|Constructor constructor
argument_list|,
argument|Destructor destructor
argument_list|,
argument|uint sizeOf
argument_list|,
argument|uint theTypeFlags
argument_list|,
argument|int typeId
argument_list|,
argument|const QMetaObject *metaObject
argument_list|)
expr_stmt|;
name|QMetaType
argument_list|(
specifier|const
name|QMetaType
operator|&
name|other
argument_list|)
expr_stmt|;
name|QMetaType
modifier|&
name|operator
init|=
operator|(
specifier|const
name|QMetaType
operator|&
operator|)
decl_stmt|;
specifier|inline
name|bool
name|isExtended
argument_list|(
specifier|const
name|ExtensionFlag
name|flag
argument_list|)
decl|const
block|{
return|return
name|m_extensionFlags
operator|&
name|flag
return|;
block|}
comment|// Methods used for future binary compatibile extensions
name|void
name|ctor
parameter_list|(
specifier|const
name|QMetaTypeInterface
modifier|*
name|info
parameter_list|)
function_decl|;
name|void
name|dtor
parameter_list|()
function_decl|;
name|uint
name|sizeExtended
argument_list|()
specifier|const
expr_stmt|;
name|QMetaType
operator|::
name|TypeFlags
name|flagsExtended
argument_list|()
specifier|const
expr_stmt|;
name|void
modifier|*
name|createExtended
argument_list|(
specifier|const
name|void
operator|*
name|copy
operator|=
literal|0
argument_list|)
decl|const
decl_stmt|;
name|void
name|destroyExtended
argument_list|(
name|void
operator|*
name|data
argument_list|)
decl|const
decl_stmt|;
name|void
modifier|*
name|constructExtended
argument_list|(
name|void
operator|*
name|where
argument_list|,
specifier|const
name|void
operator|*
name|copy
operator|=
literal|0
argument_list|)
decl|const
decl_stmt|;
name|void
name|destructExtended
argument_list|(
name|void
operator|*
name|data
argument_list|)
decl|const
decl_stmt|;
name|Creator
name|m_creator
decl_stmt|;
name|Deleter
name|m_deleter
decl_stmt|;
name|SaveOperator
name|m_saveOp
decl_stmt|;
name|LoadOperator
name|m_loadOp
decl_stmt|;
name|Constructor
name|m_constructor
decl_stmt|;
name|Destructor
name|m_destructor
decl_stmt|;
name|void
modifier|*
name|m_extension
decl_stmt|;
comment|// space reserved for future use
name|uint
name|m_size
decl_stmt|;
name|uint
name|m_typeFlags
decl_stmt|;
name|uint
name|m_extensionFlags
decl_stmt|;
name|int
name|m_typeId
decl_stmt|;
specifier|const
name|QMetaObject
modifier|*
name|m_metaObject
decl_stmt|;
comment|// Placeholder for Qt 5.1 feature.
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_undef
DECL|macro|QT_DEFINE_METATYPE_ID
undef|#
directive|undef
name|QT_DEFINE_METATYPE_ID
end_undef
begin_macro
name|Q_DECLARE_OPERATORS_FOR_FLAGS
argument_list|(
argument|QMetaType::TypeFlags
argument_list|)
end_macro
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|qMetaTypeDeleteHelper
name|void
name|qMetaTypeDeleteHelper
argument_list|(
argument|void *t
argument_list|)
block|{
name|delete
name|static_cast
operator|<
name|T
operator|*
operator|>
operator|(
name|t
operator|)
block|; }
name|template
operator|<
operator|>
specifier|inline
name|void
name|qMetaTypeDeleteHelper
operator|<
name|void
operator|>
operator|(
name|void
operator|*
operator|)
block|{}
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|qMetaTypeCreateHelper
name|void
operator|*
name|qMetaTypeCreateHelper
argument_list|(
argument|const void *t
argument_list|)
block|{
if|if
condition|(
name|t
condition|)
return|return
name|new
name|T
argument_list|(
operator|*
name|static_cast
operator|<
specifier|const
name|T
operator|*
operator|>
operator|(
name|t
operator|)
argument_list|)
return|;
end_expr_stmt
begin_return
return|return
name|new
name|T
argument_list|()
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
operator|>
specifier|inline
name|void
operator|*
name|qMetaTypeCreateHelper
operator|<
name|void
operator|>
operator|(
specifier|const
name|void
operator|*
operator|)
block|{
return|return
literal|0
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|qMetaTypeDestructHelper
name|void
name|qMetaTypeDestructHelper
argument_list|(
argument|void *t
argument_list|)
block|{
name|Q_UNUSED
argument_list|(
argument|t
argument_list|)
comment|// Silence MSVC that warns for POD types.
name|static_cast
operator|<
name|T
operator|*
operator|>
operator|(
name|t
operator|)
operator|->
expr|~
name|T
argument_list|()
block|; }
name|template
operator|<
operator|>
specifier|inline
name|void
name|qMetaTypeDestructHelper
operator|<
name|void
operator|>
operator|(
name|void
operator|*
operator|)
block|{}
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|qMetaTypeConstructHelper
name|void
operator|*
name|qMetaTypeConstructHelper
argument_list|(
argument|void *where
argument_list|,
argument|const void *t
argument_list|)
block|{
if|if
condition|(
name|t
condition|)
return|return
name|new
argument_list|(
argument|where
argument_list|)
name|T
argument_list|(
operator|*
name|static_cast
operator|<
specifier|const
name|T
operator|*
operator|>
operator|(
name|t
operator|)
argument_list|)
return|;
end_expr_stmt
begin_return
return|return
name|new
argument_list|(
argument|where
argument_list|)
name|T
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
operator|>
specifier|inline
name|void
operator|*
name|qMetaTypeConstructHelper
operator|<
name|void
operator|>
operator|(
name|void
operator|*
operator|,
specifier|const
name|void
operator|*
operator|)
block|{
return|return
literal|0
return|;
block|}
end_expr_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DATASTREAM
end_ifndef
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|qMetaTypeSaveHelper
name|void
name|qMetaTypeSaveHelper
argument_list|(
argument|QDataStream&stream
argument_list|,
argument|const void *t
argument_list|)
block|{
name|stream
operator|<<
operator|*
name|static_cast
operator|<
specifier|const
name|T
operator|*
operator|>
operator|(
name|t
operator|)
block|; }
name|template
operator|<
operator|>
specifier|inline
name|void
name|qMetaTypeSaveHelper
operator|<
name|void
operator|>
operator|(
name|QDataStream
operator|&
operator|,
specifier|const
name|void
operator|*
operator|)
block|{}
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|qMetaTypeLoadHelper
name|void
name|qMetaTypeLoadHelper
argument_list|(
argument|QDataStream&stream
argument_list|,
argument|void *t
argument_list|)
block|{
name|stream
operator|>>
operator|*
name|static_cast
operator|<
name|T
operator|*
operator|>
operator|(
name|t
operator|)
block|; }
name|template
operator|<
operator|>
specifier|inline
name|void
name|qMetaTypeLoadHelper
operator|<
name|void
operator|>
operator|(
name|QDataStream
operator|&
operator|,
name|void
operator|*
operator|)
block|{}
endif|#
directive|endif
comment|// QT_NO_DATASTREAM
DECL|variable|QObject
name|class
name|QObject
expr_stmt|;
end_expr_stmt
begin_decl_stmt
DECL|variable|QWidget
name|class
name|QWidget
decl_stmt|;
end_decl_stmt
begin_expr_stmt
DECL|variable|QSharedPointer
name|template
operator|<
name|class
name|T
operator|>
name|class
name|QSharedPointer
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|variable|QWeakPointer
name|template
operator|<
name|class
name|T
operator|>
name|class
name|QWeakPointer
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|variable|QPointer
name|template
operator|<
name|class
name|T
operator|>
name|class
name|QPointer
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|namespace
name|QtPrivate
block|{
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|IsPointerToTypeDerivedFromQObject
block|{         enum
block|{
name|Value
operator|=
name|false
block|}
block|;     }
expr_stmt|;
comment|// Specialize to avoid sizeof(void) warning
name|template
operator|<
operator|>
expr|struct
name|IsPointerToTypeDerivedFromQObject
operator|<
name|void
operator|*
operator|>
block|{         enum
block|{
name|Value
operator|=
name|false
block|}
block|;     }
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|IsPointerToTypeDerivedFromQObject
operator|<
name|QObject
operator|*
operator|>
block|{         enum
block|{
name|Value
operator|=
name|true
block|}
block|;     }
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|IsPointerToTypeDerivedFromQObject
operator|<
name|QWidget
operator|*
operator|>
block|{         enum
block|{
name|Value
operator|=
name|true
block|}
block|;     }
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|IsPointerToTypeDerivedFromQObject
operator|<
name|T
operator|*
operator|>
block|{
typedef|typedef
name|qint8
name|yes_type
typedef|;
typedef|typedef
name|qint64
name|no_type
typedef|;
ifndef|#
directive|ifndef
name|QT_NO_QOBJECT
specifier|static
name|yes_type
name|checkType
parameter_list|(
name|QObject
modifier|*
parameter_list|)
function_decl|;
endif|#
directive|endif
specifier|static
name|no_type
name|checkType
parameter_list|(
modifier|...
parameter_list|)
function_decl|;
name|Q_STATIC_ASSERT_X
argument_list|(
sizeof|sizeof
argument_list|(
name|T
argument_list|)
argument_list|,
literal|"Type argument of Q_DECLARE_METATYPE(T*) must be fully defined"
argument_list|)
expr_stmt|;
enum|enum
block|{
name|Value
init|=
sizeof|sizeof
argument_list|(
name|checkType
argument_list|(
name|static_cast
operator|<
name|T
operator|*
operator|>
operator|(
literal|0
operator|)
argument_list|)
argument_list|)
operator|==
expr|sizeof
operator|(
name|yes_type
operator|)
block|}
enum|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|,
name|bool
operator|=
name|IsPointerToTypeDerivedFromQObject
operator|<
name|T
operator|>
operator|::
name|Value
operator|>
expr|struct
name|MetaObjectForType
block|{
specifier|static
specifier|inline
specifier|const
name|QMetaObject
operator|*
name|value
argument_list|()
block|{
return|return
literal|0
return|;
block|}
end_expr_stmt
begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|MetaObjectForType
operator|<
name|T
operator|*
operator|,
comment|/* isPointerToTypeDerivedFromQObject = */
name|true
operator|>
block|{
specifier|static
specifier|inline
specifier|const
name|QMetaObject
operator|*
name|value
argument_list|()
block|{
return|return
operator|&
name|T
operator|::
name|staticMetaObject
return|;
block|}
end_expr_stmt
begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|IsSharedPointerToTypeDerivedFromQObject
block|{         enum
block|{
name|Value
operator|=
name|false
block|}
block|;     }
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|IsSharedPointerToTypeDerivedFromQObject
operator|<
name|QSharedPointer
operator|<
name|T
operator|>
expr|>
operator|:
name|IsPointerToTypeDerivedFromQObject
operator|<
name|T
operator|*
operator|>
block|{     }
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|IsWeakPointerToTypeDerivedFromQObject
block|{         enum
block|{
name|Value
operator|=
name|false
block|}
block|;     }
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|IsWeakPointerToTypeDerivedFromQObject
operator|<
name|QWeakPointer
operator|<
name|T
operator|>
expr|>
operator|:
name|IsPointerToTypeDerivedFromQObject
operator|<
name|T
operator|*
operator|>
block|{     }
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|IsTrackingPointerToTypeDerivedFromQObject
block|{         enum
block|{
name|Value
operator|=
name|false
block|}
block|;     }
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|IsTrackingPointerToTypeDerivedFromQObject
operator|<
name|QPointer
operator|<
name|T
operator|>
expr|>
block|{         enum
block|{
name|Value
operator|=
name|true
block|}
block|;     }
expr_stmt|;
end_expr_stmt
begin_expr_stmt
unit|}  template
DECL|variable|T
DECL|variable|bool
operator|<
name|typename
name|T
operator|,
name|bool
operator|=
name|QtPrivate
operator|::
name|IsPointerToTypeDerivedFromQObject
operator|<
name|T
operator|>
operator|::
name|Value
operator|>
expr|struct
name|QMetaTypeIdQObject
block|{     enum
block|{
name|Defined
operator|=
literal|0
block|}
block|; }
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
DECL|struct|T
name|QMetaTypeId
operator|:
name|public
name|QMetaTypeIdQObject
operator|<
name|T
operator|>
block|{ }
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
DECL|struct|QMetaTypeId2
name|QMetaTypeId2
block|{     enum
DECL|enumerator|Defined
block|{
name|Defined
operator|=
name|QMetaTypeId
operator|<
name|T
operator|>
operator|::
name|Defined
block|}
block|;
DECL|function|qt_metatype_id
specifier|static
specifier|inline
name|int
name|qt_metatype_id
argument_list|()
block|{
return|return
name|QMetaTypeId
operator|<
name|T
operator|>
operator|::
name|qt_metatype_id
argument_list|()
return|;
block|}
end_expr_stmt
begin_decl_stmt
DECL|function|qt_metatype_id
unit|};
name|namespace
name|QtPrivate
block|{
name|template
operator|<
name|typename
name|T
operator|,
name|bool
name|Defined
operator|=
name|QMetaTypeId2
operator|<
name|T
operator|>
operator|::
name|Defined
operator|>
expr|struct
name|QMetaTypeIdHelper
block|{
specifier|static
specifier|inline
name|int
name|qt_metatype_id
argument_list|()
block|{
return|return
name|QMetaTypeId2
operator|<
name|T
operator|>
operator|::
name|qt_metatype_id
argument_list|()
return|;
block|}
expr|}
block|;
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|QMetaTypeIdHelper
operator|<
name|T
block|,
name|false
operator|>
block|{
specifier|static
specifier|inline
name|int
name|qt_metatype_id
argument_list|()
block|{
return|return
operator|-
literal|1
return|;
block|}
expr|}
block|;
comment|// Function pointers don't derive from QObject
name|template
operator|<
name|class
name|Result
operator|>
expr|struct
name|IsPointerToTypeDerivedFromQObject
operator|<
name|Result
argument_list|(
operator|*
argument_list|)
argument_list|()
operator|>
block|{ enum
block|{
name|Value
operator|=
name|false
block|}
block|; }
block|;
name|template
operator|<
name|class
name|Result
block|,
name|class
name|Arg0
operator|>
expr|struct
name|IsPointerToTypeDerivedFromQObject
operator|<
name|Result
argument_list|(
operator|*
argument_list|)
argument_list|(
name|Arg0
argument_list|)
operator|>
block|{ enum
block|{
name|Value
operator|=
name|false
block|}
block|; }
block|;
name|template
operator|<
name|class
name|Result
block|,
name|class
name|Arg0
block|,
name|class
name|Arg1
operator|>
expr|struct
name|IsPointerToTypeDerivedFromQObject
operator|<
name|Result
argument_list|(
operator|*
argument_list|)
argument_list|(
name|Arg0
argument_list|,
name|Arg1
argument_list|)
operator|>
block|{ enum
block|{
name|Value
operator|=
name|false
block|}
block|; }
block|;
name|template
operator|<
name|class
name|Result
block|,
name|class
name|Arg0
block|,
name|class
name|Arg1
block|,
name|class
name|Arg2
operator|>
expr|struct
name|IsPointerToTypeDerivedFromQObject
operator|<
name|Result
argument_list|(
operator|*
argument_list|)
argument_list|(
name|Arg0
argument_list|,
name|Arg1
argument_list|,
name|Arg2
argument_list|)
operator|>
block|{ enum
block|{
name|Value
operator|=
name|false
block|}
block|; }
block|;
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|QMetaTypeTypeFlags
block|{         enum
block|{
name|Flags
operator|=
operator|(
operator|!
name|QTypeInfo
operator|<
name|T
operator|>
operator|::
name|isStatic
operator|?
name|QMetaType
operator|::
name|MovableType
operator|:
literal|0
operator|)
operator||
operator|(
name|QTypeInfo
operator|<
name|T
operator|>
operator|::
name|isComplex
operator|?
name|QMetaType
operator|::
name|NeedsConstruction
operator|:
literal|0
operator|)
operator||
operator|(
name|QTypeInfo
operator|<
name|T
operator|>
operator|::
name|isComplex
operator|?
name|QMetaType
operator|::
name|NeedsDestruction
operator|:
literal|0
operator|)
operator||
operator|(
name|IsPointerToTypeDerivedFromQObject
operator|<
name|T
operator|>
operator|::
name|Value
operator|?
name|QMetaType
operator|::
name|PointerToQObject
operator|:
literal|0
operator|)
operator||
operator|(
name|IsSharedPointerToTypeDerivedFromQObject
operator|<
name|T
operator|>
operator|::
name|Value
operator|?
name|QMetaType
operator|::
name|SharedPointerToQObject
operator|:
literal|0
operator|)
operator||
operator|(
name|IsWeakPointerToTypeDerivedFromQObject
operator|<
name|T
operator|>
operator|::
name|Value
operator|?
name|QMetaType
operator|::
name|WeakPointerToQObject
operator|:
literal|0
operator|)
operator||
operator|(
name|IsTrackingPointerToTypeDerivedFromQObject
operator|<
name|T
operator|>
operator|::
name|Value
operator|?
name|QMetaType
operator|::
name|TrackingPointerToQObject
operator|:
literal|0
operator|)
operator||
operator|(
name|Q_IS_ENUM
argument_list|(
name|T
argument_list|)
operator|?
name|QMetaType
operator|::
name|IsEnumeration
operator|:
literal|0
operator|)
block|}
block|;     }
block|; }
name|template
operator|<
name|typename
name|T
operator|>
name|int
name|qRegisterNormalizedMetaType
argument_list|(
argument|const QT_PREPEND_NAMESPACE(QByteArray)&normalizedTypeName
ifndef|#
directive|ifndef
name|qdoc
argument_list|,
argument|T * dummy =
literal|0
endif|#
directive|endif
argument_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_QOBJECT
name|Q_ASSERT_X
argument_list|(
name|normalizedTypeName
operator|==
name|QMetaObject
operator|::
name|normalizedType
argument_list|(
name|normalizedTypeName
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|,
literal|"qRegisterNormalizedMetaType"
argument_list|,
literal|"qRegisterNormalizedMetaType was called with a not normalized type name, please call qRegisterMetaType instead."
argument_list|)
block|;
endif|#
directive|endif
specifier|const
name|int
name|typedefOf
operator|=
name|dummy
condition|?
operator|-
literal|1
else|:
name|QtPrivate
operator|::
name|QMetaTypeIdHelper
operator|<
name|T
operator|>
operator|::
name|qt_metatype_id
argument_list|()
block|;
if|if
condition|(
name|typedefOf
operator|!=
operator|-
literal|1
condition|)
return|return
name|QMetaType
operator|::
name|registerNormalizedTypedef
argument_list|(
name|normalizedTypeName
argument_list|,
name|typedefOf
argument_list|)
return|;
name|QMetaType
operator|::
name|TypeFlags
name|flags
argument_list|(
name|QtPrivate
operator|::
name|QMetaTypeTypeFlags
operator|<
name|T
operator|>
operator|::
name|Flags
argument_list|)
block|;
return|return
name|QMetaType
operator|::
name|registerNormalizedType
argument_list|(
name|normalizedTypeName
argument_list|,
name|qMetaTypeDeleteHelper
operator|<
name|T
operator|>
argument_list|,
name|qMetaTypeCreateHelper
operator|<
name|T
operator|>
argument_list|,
name|qMetaTypeDestructHelper
operator|<
name|T
operator|>
argument_list|,
name|qMetaTypeConstructHelper
operator|<
name|T
operator|>
argument_list|,
sizeof|sizeof
argument_list|(
name|T
argument_list|)
argument_list|,
name|flags
argument_list|,
name|QtPrivate
operator|::
name|MetaObjectForType
operator|<
name|T
operator|>
operator|::
name|value
argument_list|()
argument_list|)
return|;
block|}
name|template
operator|<
name|typename
name|T
operator|>
name|int
name|qRegisterMetaType
argument_list|(
argument|const char *typeName
ifndef|#
directive|ifndef
name|qdoc
argument_list|,
argument|T * dummy =
literal|0
endif|#
directive|endif
argument_list|)
block|{
ifdef|#
directive|ifdef
name|QT_NO_QOBJECT
name|QT_PREPEND_NAMESPACE
argument_list|(
argument|QByteArray
argument_list|)
name|normalizedTypeName
operator|=
name|typeName
block|;
else|#
directive|else
name|QT_PREPEND_NAMESPACE
argument_list|(
argument|QByteArray
argument_list|)
name|normalizedTypeName
operator|=
name|QMetaObject
operator|::
name|normalizedType
argument_list|(
name|typeName
argument_list|)
block|;
endif|#
directive|endif
return|return
name|qRegisterNormalizedMetaType
operator|<
name|T
operator|>
operator|(
name|normalizedTypeName
operator|,
name|dummy
operator|)
return|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_DATASTREAM
name|template
operator|<
name|typename
name|T
operator|>
name|void
name|qRegisterMetaTypeStreamOperators
argument_list|(
argument|const char *typeName
ifndef|#
directive|ifndef
name|qdoc
argument_list|,
argument|T *
comment|/* dummy */
argument|=
literal|0
endif|#
directive|endif
argument_list|)
block|{
name|qRegisterMetaType
operator|<
name|T
operator|>
operator|(
name|typeName
operator|)
block|;
name|QMetaType
operator|::
name|registerStreamOperators
argument_list|(
name|typeName
argument_list|,
name|qMetaTypeSaveHelper
operator|<
name|T
operator|>
argument_list|,
name|qMetaTypeLoadHelper
operator|<
name|T
operator|>
argument_list|)
block|; }
endif|#
directive|endif
comment|// QT_NO_DATASTREAM
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|int
name|qMetaTypeId
argument_list|(
ifndef|#
directive|ifndef
name|qdoc
argument|T *
comment|/* dummy */
argument|=
literal|0
endif|#
directive|endif
argument_list|)
block|{
name|Q_STATIC_ASSERT_X
argument_list|(
name|QMetaTypeId2
operator|<
name|T
operator|>
operator|::
name|Defined
argument_list|,
literal|"Type is not registered, please use Q_DECLARE_METATYPE macro to make it know to Qt's meta-object system"
argument_list|)
block|;
return|return
name|QMetaTypeId2
operator|<
name|T
operator|>
operator|::
name|qt_metatype_id
argument_list|()
return|;
block|}
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|int
name|qRegisterMetaType
argument_list|(
if|#
directive|if
operator|!
name|defined
argument_list|(
name|qdoc
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_CC_SUN
argument_list|)
argument|T * dummy =
literal|0
endif|#
directive|endif
argument_list|)
block|{
ifdef|#
directive|ifdef
name|Q_CC_SUN
return|return
name|qMetaTypeId
argument_list|(
name|static_cast
operator|<
name|T
operator|*
operator|>
operator|(
literal|0
operator|)
argument_list|)
return|;
else|#
directive|else
return|return
name|qMetaTypeId
argument_list|(
name|dummy
argument_list|)
return|;
endif|#
directive|endif
block|}
end_decl_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|QMetaTypeIdQObject
operator|<
name|T
operator|*
operator|,
comment|/* isPointerToTypeDerivedFromQObject */
name|true
operator|>
block|{     enum
block|{
name|Defined
operator|=
literal|1
block|}
block|;
specifier|static
name|int
name|qt_metatype_id
argument_list|()
block|{
specifier|static
name|QBasicAtomicInt
name|metatype_id
operator|=
name|Q_BASIC_ATOMIC_INITIALIZER
argument_list|(
literal|0
argument_list|)
block|;
if|if
condition|(
operator|!
name|metatype_id
operator|.
name|load
argument_list|()
condition|)
block|{
specifier|const
name|int
name|len
init|=
name|int
argument_list|(
name|strlen
argument_list|(
name|T
operator|::
name|staticMetaObject
operator|.
name|className
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QVarLengthArray
operator|<
name|char
operator|,
literal|16
operator|>
name|classNameStar
expr_stmt|;
name|classNameStar
operator|.
name|append
argument_list|(
name|T
operator|::
name|staticMetaObject
operator|.
name|className
argument_list|()
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|classNameStar
operator|.
name|append
argument_list|(
literal|'*'
argument_list|)
expr_stmt|;
name|metatype_id
operator|.
name|storeRelease
argument_list|(
name|qRegisterNormalizedMetaType
operator|<
name|T
operator|*
operator|>
operator|(
expr|\
name|QByteArray
argument_list|(
name|classNameStar
operator|.
name|constData
argument_list|()
argument_list|,
name|classNameStar
operator|.
name|size
argument_list|()
argument_list|)
operator|,
name|reinterpret_cast
operator|<
name|T
operator|*
operator|*
operator|>
operator|(
name|quintptr
argument_list|(
operator|-
literal|1
argument_list|)
operator|)
operator|)
argument_list|)
expr_stmt|;
block|}
return|return
name|metatype_id
operator|.
name|loadAcquire
argument_list|()
return|;
block|}
end_expr_stmt
begin_ifndef
unit|};
ifndef|#
directive|ifndef
name|QT_NO_DATASTREAM
end_ifndef
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|qRegisterMetaTypeStreamOperators
specifier|inline
name|int
name|qRegisterMetaTypeStreamOperators
argument_list|()
block|{
specifier|register
name|int
name|id
operator|=
name|qMetaTypeId
operator|<
name|T
operator|>
operator|(
operator|)
block|;
name|QMetaType
operator|::
name|registerStreamOperators
argument_list|(
name|id
argument_list|,
name|qMetaTypeSaveHelper
operator|<
name|T
operator|>
argument_list|,
name|qMetaTypeLoadHelper
operator|<
name|T
operator|>
argument_list|)
block|;
return|return
name|id
return|;
block|}
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_define
DECL|macro|Q_DECLARE_OPAQUE_POINTER
define|#
directive|define
name|Q_DECLARE_OPAQUE_POINTER
parameter_list|(
name|POINTER
parameter_list|)
define|\
value|QT_BEGIN_NAMESPACE namespace QtPrivate {                            \         template<>                                                     \         struct IsPointerToTypeDerivedFromQObject<POINTER>              \         {                                                               \             enum { Value = false };                                     \         };                                                              \     } QT_END_NAMESPACE
end_define
begin_comment
unit|\
comment|/**/
end_comment
begin_define
DECL|macro|Q_DECLARE_METATYPE
define|#
directive|define
name|Q_DECLARE_METATYPE
parameter_list|(
name|TYPE
parameter_list|)
define|\
value|QT_BEGIN_NAMESPACE                                                  \     template<>                                                         \     struct QMetaTypeId< TYPE>                                          \     {                                                                   \         enum { Defined = 1 };                                           \         static int qt_metatype_id()                                     \             {                                                           \                 static QBasicAtomicInt metatype_id = Q_BASIC_ATOMIC_INITIALIZER(0); \                 if (!metatype_id.load())                                \                     metatype_id.storeRelease(qRegisterMetaType< TYPE>(#TYPE, \                                reinterpret_cast< TYPE *>(quintptr(-1)))); \                 return metatype_id.loadAcquire();                       \             }                                                           \     };                                                                  \     QT_END_NAMESPACE
end_define
begin_define
DECL|macro|Q_DECLARE_BUILTIN_METATYPE
define|#
directive|define
name|Q_DECLARE_BUILTIN_METATYPE
parameter_list|(
name|TYPE
parameter_list|,
name|NAME
parameter_list|)
define|\
value|QT_BEGIN_NAMESPACE \     template<> struct QMetaTypeId2<TYPE> \     { \         enum { Defined = 1, MetaType = QMetaType::NAME }; \         static inline int qt_metatype_id() { return QMetaType::NAME; } \     }; \     QT_END_NAMESPACE
end_define
begin_define
DECL|macro|QT_FORWARD_DECLARE_STATIC_TYPES_ITER
define|#
directive|define
name|QT_FORWARD_DECLARE_STATIC_TYPES_ITER
parameter_list|(
name|TypeName
parameter_list|,
name|TypeId
parameter_list|,
name|Name
parameter_list|)
define|\
value|class Name;
end_define
begin_macro
name|QT_FOR_EACH_STATIC_CORE_CLASS
argument_list|(
argument|QT_FORWARD_DECLARE_STATIC_TYPES_ITER
argument_list|)
end_macro
begin_macro
name|QT_FOR_EACH_STATIC_GUI_CLASS
argument_list|(
argument|QT_FORWARD_DECLARE_STATIC_TYPES_ITER
argument_list|)
end_macro
begin_macro
name|QT_FOR_EACH_STATIC_WIDGETS_CLASS
argument_list|(
argument|QT_FORWARD_DECLARE_STATIC_TYPES_ITER
argument_list|)
end_macro
begin_undef
DECL|macro|QT_FORWARD_DECLARE_STATIC_TYPES_ITER
undef|#
directive|undef
name|QT_FORWARD_DECLARE_STATIC_TYPES_ITER
end_undef
begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|class
name|QList
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|variable|QLinkedList
name|template
operator|<
name|class
name|T
operator|>
name|class
name|QLinkedList
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|variable|QVector
name|template
operator|<
name|class
name|T
operator|>
name|class
name|QVector
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|variable|QQueue
name|template
operator|<
name|class
name|T
operator|>
name|class
name|QQueue
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|variable|QStack
name|template
operator|<
name|class
name|T
operator|>
name|class
name|QStack
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|variable|QSet
name|template
operator|<
name|class
name|T
operator|>
name|class
name|QSet
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|variable|T1
DECL|variable|QMap
name|template
operator|<
name|class
name|T1
operator|,
name|class
name|T2
operator|>
name|class
name|QMap
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|variable|T1
DECL|variable|QHash
name|template
operator|<
name|class
name|T1
operator|,
name|class
name|T2
operator|>
name|class
name|QHash
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|variable|T1
name|template
operator|<
name|class
name|T1
operator|,
name|class
name|T2
operator|>
expr|struct
name|QPair
expr_stmt|;
end_expr_stmt
begin_typedef
DECL|typedef|QVariantList
typedef|typedef
name|QList
operator|<
name|QVariant
operator|>
name|QVariantList
expr_stmt|;
end_typedef
begin_typedef
DECL|typedef|QString
DECL|typedef|QVariantMap
typedef|typedef
name|QMap
operator|<
name|QString
operator|,
name|QVariant
operator|>
name|QVariantMap
expr_stmt|;
end_typedef
begin_typedef
DECL|typedef|QString
DECL|typedef|QVariantHash
typedef|typedef
name|QHash
operator|<
name|QString
operator|,
name|QVariant
operator|>
name|QVariantHash
expr_stmt|;
end_typedef
begin_define
DECL|macro|Q_DECLARE_METATYPE_TEMPLATE_1ARG
define|#
directive|define
name|Q_DECLARE_METATYPE_TEMPLATE_1ARG
parameter_list|(
name|SINGLE_ARG_TEMPLATE
parameter_list|)
define|\
value|template<typename T> \ struct QMetaTypeId< SINGLE_ARG_TEMPLATE<T>> \ { \     enum { \         Defined = QMetaTypeId2<T>::Defined \     }; \     static int qt_metatype_id() \     { \         static QBasicAtomicInt metatype_id = Q_BASIC_ATOMIC_INITIALIZER(0); \         if (!metatype_id.load()) { \             QVarLengthArray<char, 24> name; \             name.append(#SINGLE_ARG_TEMPLATE, int(sizeof(#SINGLE_ARG_TEMPLATE)) - 1); \             name.append('<'); \             const char *tName = QMetaType::typeName(qMetaTypeId<T>()); \             Q_ASSERT(tName); \             name.append(tName, int(strlen(tName))); \             if (name.last() == '>') \                 name.append(' '); \             name.append('>'); \             metatype_id.storeRelease( \                     qRegisterNormalizedMetaType< SINGLE_ARG_TEMPLATE<T>>( \                         QByteArray(name.constData(), name.size()), \                         reinterpret_cast< SINGLE_ARG_TEMPLATE<T> *>(quintptr(-1)))); \         } \         return metatype_id.loadAcquire(); \     } \ };
end_define
begin_define
DECL|macro|Q_DECLARE_METATYPE_TEMPLATE_2ARG
define|#
directive|define
name|Q_DECLARE_METATYPE_TEMPLATE_2ARG
parameter_list|(
name|DOUBLE_ARG_TEMPLATE
parameter_list|)
define|\
value|template<typename T, typename U> \ struct QMetaTypeId< DOUBLE_ARG_TEMPLATE<T, U>> \ { \     enum { \         Defined = QMetaTypeId2<T>::Defined&& QMetaTypeId2<U>::Defined \     }; \     static int qt_metatype_id() \     { \         static QBasicAtomicInt metatype_id = Q_BASIC_ATOMIC_INITIALIZER(0); \         if (!metatype_id.load()) {\             QVarLengthArray<char, 24> name; \             name.append(#DOUBLE_ARG_TEMPLATE, sizeof(#DOUBLE_ARG_TEMPLATE) - 1); \             name.append('<'); \             const char *tName = QMetaType::typeName(qMetaTypeId<T>()); \             Q_ASSERT(tName); \             name.append(tName, strlen(tName)); \             name.append(','); \             const char *uName = QMetaType::typeName(qMetaTypeId<U>()); \             Q_ASSERT(uName); \             name.append(uName, strlen(uName)); \             if (name.last() == '>') \                 name.append(' '); \             name.append('>'); \             metatype_id.storeRelease(\                     qRegisterNormalizedMetaType< DOUBLE_ARG_TEMPLATE<T, U>>(\                         QByteArray(name.constData(), name.size()), \                         reinterpret_cast< DOUBLE_ARG_TEMPLATE<T, U> *>(quintptr(-1)))); \         }\         return metatype_id.loadAcquire(); \     } \ };
end_define
begin_macro
DECL|function|Q_DECLARE_METATYPE_TEMPLATE_1ARG
name|Q_DECLARE_METATYPE_TEMPLATE_1ARG
argument_list|(
argument|QList
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE_TEMPLATE_1ARG
argument_list|(
argument|QVector
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE_TEMPLATE_1ARG
argument_list|(
argument|QQueue
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE_TEMPLATE_1ARG
argument_list|(
argument|QStack
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE_TEMPLATE_1ARG
argument_list|(
argument|QSet
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE_TEMPLATE_1ARG
argument_list|(
argument|QLinkedList
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE_TEMPLATE_2ARG
argument_list|(
argument|QHash
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE_TEMPLATE_2ARG
argument_list|(
argument|QMap
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE_TEMPLATE_2ARG
argument_list|(
argument|QPair
argument_list|)
end_macro
begin_define
DECL|macro|Q_DECLARE_SMART_POINTER_METATYPE
define|#
directive|define
name|Q_DECLARE_SMART_POINTER_METATYPE
parameter_list|(
name|SMART_POINTER
parameter_list|)
define|\
value|template<typename T, bool = QtPrivate::IsPointerToTypeDerivedFromQObject<T*>::Value> \ struct QMetaTypeId_ ## SMART_POINTER ## _QObjectStar \ { \     enum { \         Defined = 0 \     }; \ };\  \ template<typename T> \ struct QMetaTypeId_ ## SMART_POINTER ## _QObjectStar<T, true> \ { \     enum { \         Defined = 1 \     }; \     static int qt_metatype_id() \     { \         static QBasicAtomicInt metatype_id = Q_BASIC_ATOMIC_INITIALIZER(0); \         if (!metatype_id.load()) { \             metatype_id.storeRelease(qRegisterNormalizedMetaType< SMART_POINTER<T>>( #SMART_POINTER "<" + QByteArray(T::staticMetaObject.className()) + ">", \                         reinterpret_cast< SMART_POINTER<T> *>(quintptr(-1)))); \         } \         return metatype_id.loadAcquire(); \     } \ }; \ \ template<typename T> \ struct QMetaTypeId< SMART_POINTER<T>> : public QMetaTypeId_ ## SMART_POINTER ## _QObjectStar<T> \ { \ };
end_define
begin_macro
name|Q_DECLARE_SMART_POINTER_METATYPE
argument_list|(
argument|QSharedPointer
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_SMART_POINTER_METATYPE
argument_list|(
argument|QWeakPointer
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_SMART_POINTER_METATYPE
argument_list|(
argument|QPointer
argument_list|)
end_macro
begin_expr_stmt
specifier|inline
name|QMetaType
operator|::
name|QMetaType
argument_list|(
argument|const ExtensionFlag extensionFlags
argument_list|,
argument|const QMetaTypeInterface *info
argument_list|,
argument|Creator creator
argument_list|,
argument|Deleter deleter
argument_list|,
argument|SaveOperator saveOp
argument_list|,
argument|LoadOperator loadOp
argument_list|,
argument|Constructor constructor
argument_list|,
argument|Destructor destructor
argument_list|,
argument|uint size
argument_list|,
argument|uint theTypeFlags
argument_list|,
argument|int typeId
argument_list|,
argument|const QMetaObject *metaObject
argument_list|)
operator|:
name|m_creator
argument_list|(
name|creator
argument_list|)
operator|,
name|m_deleter
argument_list|(
name|deleter
argument_list|)
operator|,
name|m_saveOp
argument_list|(
name|saveOp
argument_list|)
operator|,
name|m_loadOp
argument_list|(
name|loadOp
argument_list|)
operator|,
name|m_constructor
argument_list|(
name|constructor
argument_list|)
operator|,
name|m_destructor
argument_list|(
name|destructor
argument_list|)
operator|,
name|m_extension
argument_list|(
literal|0
argument_list|)
operator|,
name|m_size
argument_list|(
name|size
argument_list|)
operator|,
name|m_typeFlags
argument_list|(
name|theTypeFlags
argument_list|)
operator|,
name|m_extensionFlags
argument_list|(
name|extensionFlags
argument_list|)
operator|,
name|m_typeId
argument_list|(
name|typeId
argument_list|)
operator|,
name|m_metaObject
argument_list|(
argument|metaObject
argument_list|)
block|{
if|if
condition|(
name|Q_UNLIKELY
argument_list|(
name|isExtended
argument_list|(
name|CtorEx
argument_list|)
operator|||
name|typeId
operator|==
name|QMetaType
operator|::
name|Void
argument_list|)
condition|)
name|ctor
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|~QMetaType
specifier|inline
name|QMetaType
operator|::
operator|~
name|QMetaType
argument_list|()
block|{
if|if
condition|(
name|Q_UNLIKELY
argument_list|(
name|isExtended
argument_list|(
name|DtorEx
argument_list|)
argument_list|)
condition|)
name|dtor
argument_list|()
expr_stmt|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|isValid
specifier|inline
name|bool
name|QMetaType
operator|::
name|isValid
argument_list|()
specifier|const
block|{
return|return
name|m_typeId
operator|!=
name|UnknownType
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|isRegistered
specifier|inline
name|bool
name|QMetaType
operator|::
name|isRegistered
argument_list|()
specifier|const
block|{
return|return
name|isValid
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|create
specifier|inline
name|void
operator|*
name|QMetaType
operator|::
name|create
argument_list|(
argument|const void *copy
argument_list|)
specifier|const
block|{
if|if
condition|(
name|Q_UNLIKELY
argument_list|(
name|isExtended
argument_list|(
name|CreateEx
argument_list|)
argument_list|)
condition|)
return|return
name|createExtended
argument_list|(
name|copy
argument_list|)
return|;
end_expr_stmt
begin_return
return|return
name|m_creator
argument_list|(
name|copy
argument_list|)
return|;
end_return
begin_expr_stmt
unit|}  inline
DECL|function|destroy
name|void
name|QMetaType
operator|::
name|destroy
argument_list|(
argument|void *data
argument_list|)
specifier|const
block|{
if|if
condition|(
name|Q_UNLIKELY
argument_list|(
name|isExtended
argument_list|(
name|DestroyEx
argument_list|)
argument_list|)
condition|)
return|return
name|destroyExtended
argument_list|(
name|data
argument_list|)
return|;
name|m_deleter
argument_list|(
name|data
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
unit|}  inline
DECL|function|construct
name|void
operator|*
name|QMetaType
operator|::
name|construct
argument_list|(
argument|void *where
argument_list|,
argument|const void *copy
argument_list|)
specifier|const
block|{
if|if
condition|(
name|Q_UNLIKELY
argument_list|(
name|isExtended
argument_list|(
name|ConstructEx
argument_list|)
argument_list|)
condition|)
return|return
name|constructExtended
argument_list|(
name|where
argument_list|,
name|copy
argument_list|)
return|;
end_expr_stmt
begin_return
return|return
name|m_constructor
argument_list|(
name|where
argument_list|,
name|copy
argument_list|)
return|;
end_return
begin_expr_stmt
unit|}  inline
DECL|function|destruct
name|void
name|QMetaType
operator|::
name|destruct
argument_list|(
argument|void *data
argument_list|)
specifier|const
block|{
if|if
condition|(
name|Q_UNLIKELY
argument_list|(
name|isExtended
argument_list|(
name|DestructEx
argument_list|)
argument_list|)
condition|)
return|return
name|destructExtended
argument_list|(
name|data
argument_list|)
return|;
end_expr_stmt
begin_if
if|if
condition|(
name|Q_UNLIKELY
argument_list|(
operator|!
name|data
argument_list|)
condition|)
return|return;
end_if
begin_expr_stmt
name|m_destructor
argument_list|(
name|data
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
unit|}  inline
DECL|function|sizeOf
name|int
name|QMetaType
operator|::
name|sizeOf
argument_list|()
specifier|const
block|{
if|if
condition|(
name|Q_UNLIKELY
argument_list|(
name|isExtended
argument_list|(
name|SizeEx
argument_list|)
argument_list|)
condition|)
return|return
name|sizeExtended
argument_list|()
return|;
end_expr_stmt
begin_return
return|return
name|m_size
return|;
end_return
begin_expr_stmt
unit|}  inline
DECL|function|flags
name|QMetaType
operator|::
name|TypeFlags
name|QMetaType
operator|::
name|flags
argument_list|()
specifier|const
block|{
if|if
condition|(
name|Q_UNLIKELY
argument_list|(
name|isExtended
argument_list|(
name|FlagsEx
argument_list|)
argument_list|)
condition|)
return|return
name|flagsExtended
argument_list|()
return|;
end_expr_stmt
begin_return
return|return
name|QMetaType
operator|::
name|TypeFlags
argument_list|(
name|m_typeFlags
argument_list|)
return|;
end_return
begin_define
DECL|macro|QT_DECLARE_BUILTIN_METATYPE_ITER
unit|}  QT_END_NAMESPACE
define|#
directive|define
name|QT_DECLARE_BUILTIN_METATYPE_ITER
parameter_list|(
name|MetaTypeName
parameter_list|,
name|MetaTypeId
parameter_list|,
name|Name
parameter_list|)
define|\
value|Q_DECLARE_BUILTIN_METATYPE(Name, MetaTypeName)
end_define
begin_macro
name|QT_FOR_EACH_STATIC_TYPE
argument_list|(
argument|QT_DECLARE_BUILTIN_METATYPE_ITER
argument_list|)
end_macro
begin_undef
DECL|macro|QT_DECLARE_BUILTIN_METATYPE_ITER
undef|#
directive|undef
name|QT_DECLARE_BUILTIN_METATYPE_ITER
end_undef
begin_macro
name|QT_END_HEADER
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QMETATYPE_H
end_comment
end_unit
