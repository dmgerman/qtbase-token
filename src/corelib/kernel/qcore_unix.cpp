begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qcore_unix_p.h"
end_include
begin_include
include|#
directive|include
file|"qelapsedtimer.h"
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_NACL
end_ifdef
begin_elif
elif|#
directive|elif
operator|!
name|defined
argument_list|(
name|Q_OS_VXWORKS
argument_list|)
end_elif
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_HPUX
argument_list|)
operator|||
name|defined
argument_list|(
name|__ia64
argument_list|)
end_if
begin_include
include|#
directive|include
file|<sys/select.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<sys/time.h>
end_include
begin_else
else|#
directive|else
end_else
begin_include
include|#
directive|include
file|<selectLib.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<stdlib.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_MAC
end_ifdef
begin_include
include|#
directive|include
file|<mach/mach_time.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
name|QT_BEGIN_NAMESPACE
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_HAVE_PPOLL
argument_list|)
operator|&&
name|defined
argument_list|(
name|QT_HAVE_POLLTS
argument_list|)
DECL|macro|ppoll
define|#
directive|define
name|ppoll
value|pollts
DECL|macro|QT_HAVE_PPOLL
define|#
directive|define
name|QT_HAVE_PPOLL
endif|#
directive|endif
ifndef|#
directive|ifndef
name|_POSIX_POLL
if|#
directive|if
name|defined
argument_list|(
name|QT_HAVE_PPOLL
argument_list|)
operator|||
name|_POSIX_VERSION
operator|>=
literal|200809L
operator|||
name|_XOPEN_VERSION
operator|>=
literal|700
DECL|macro|_POSIX_POLL
define|#
directive|define
name|_POSIX_POLL
value|1
elif|#
directive|elif
name|defined
argument_list|(
name|QT_HAVE_POLL
argument_list|)
define|#
directive|define
name|_POSIX_POLL
value|0
else|#
directive|else
define|#
directive|define
name|_POSIX_POLL
value|-1
endif|#
directive|endif
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_QNX
argument_list|)
operator|||
name|_POSIX_POLL
operator|<=
literal|0
operator|||
name|defined
argument_list|(
name|QT_BUILD_INTERNAL
argument_list|)
DECL|function|timespecToTimeval
specifier|static
specifier|inline
expr|struct
name|timeval
name|timespecToTimeval
argument_list|(
argument|const struct timespec&ts
argument_list|)
block|{     struct
name|timeval
name|tv
block|;
name|tv
operator|.
name|tv_sec
operator|=
name|ts
operator|.
name|tv_sec
block|;
name|tv
operator|.
name|tv_usec
operator|=
name|ts
operator|.
name|tv_nsec
operator|/
literal|1000
block|;
return|return
name|tv
return|;
block|}
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|time_update
specifier|static
specifier|inline
name|bool
name|time_update
parameter_list|(
name|struct
name|timespec
modifier|*
name|tv
parameter_list|,
specifier|const
name|struct
name|timespec
modifier|&
name|start
parameter_list|,
specifier|const
name|struct
name|timespec
modifier|&
name|timeout
parameter_list|)
block|{
comment|// clock source is (hopefully) monotonic, so we can recalculate how much timeout is left;
comment|// if it isn't monotonic, we'll simply hope that it hasn't jumped, because we have no alternative
name|struct
name|timespec
name|now
init|=
name|qt_gettime
argument_list|()
decl_stmt|;
operator|*
name|tv
operator|=
name|timeout
operator|+
name|start
operator|-
name|now
expr_stmt|;
return|return
name|tv
operator|->
name|tv_sec
operator|>=
literal|0
return|;
block|}
end_function
begin_function
DECL|function|qt_safe_select
name|int
name|qt_safe_select
parameter_list|(
name|int
name|nfds
parameter_list|,
name|fd_set
modifier|*
name|fdread
parameter_list|,
name|fd_set
modifier|*
name|fdwrite
parameter_list|,
name|fd_set
modifier|*
name|fdexcept
parameter_list|,
specifier|const
name|struct
name|timespec
modifier|*
name|orig_timeout
parameter_list|)
block|{
if|if
condition|(
operator|!
name|orig_timeout
condition|)
block|{
comment|// no timeout -> block forever
name|int
name|ret
decl_stmt|;
name|EINTR_LOOP
argument_list|(
name|ret
argument_list|,
name|select
argument_list|(
name|nfds
argument_list|,
name|fdread
argument_list|,
name|fdwrite
argument_list|,
name|fdexcept
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
name|timespec
name|start
init|=
name|qt_gettime
argument_list|()
decl_stmt|;
name|timespec
name|timeout
init|=
operator|*
name|orig_timeout
decl_stmt|;
comment|// loop and recalculate the timeout as needed
name|int
name|ret
decl_stmt|;
forever|forever
block|{
ifndef|#
directive|ifndef
name|Q_OS_QNX
name|ret
operator|=
operator|::
name|pselect
argument_list|(
name|nfds
argument_list|,
name|fdread
argument_list|,
name|fdwrite
argument_list|,
name|fdexcept
argument_list|,
operator|&
name|timeout
argument_list|,
literal|0
argument_list|)
expr_stmt|;
else|#
directive|else
name|timeval
name|timeoutVal
init|=
name|timespecToTimeval
argument_list|(
name|timeout
argument_list|)
decl_stmt|;
name|ret
operator|=
operator|::
name|select
argument_list|(
name|nfds
argument_list|,
name|fdread
argument_list|,
name|fdwrite
argument_list|,
name|fdexcept
argument_list|,
operator|&
name|timeoutVal
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|ret
operator|!=
operator|-
literal|1
operator|||
name|errno
operator|!=
name|EINTR
condition|)
return|return
name|ret
return|;
comment|// recalculate the timeout
if|if
condition|(
operator|!
name|time_update
argument_list|(
operator|&
name|timeout
argument_list|,
name|start
argument_list|,
operator|*
name|orig_timeout
argument_list|)
condition|)
block|{
comment|// timeout during update
comment|// or clock reset, fake timeout error
return|return
literal|0
return|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|millisecsToTimespec
specifier|static
specifier|inline
name|struct
name|timespec
name|millisecsToTimespec
parameter_list|(
specifier|const
name|unsigned
name|int
name|ms
parameter_list|)
block|{
name|struct
name|timespec
name|tv
decl_stmt|;
name|tv
operator|.
name|tv_sec
operator|=
name|ms
operator|/
literal|1000
expr_stmt|;
name|tv
operator|.
name|tv_nsec
operator|=
operator|(
name|ms
operator|%
literal|1000
operator|)
operator|*
literal|1000
operator|*
literal|1000
expr_stmt|;
return|return
name|tv
return|;
block|}
end_function
begin_function
DECL|function|qt_select_msecs
name|int
name|qt_select_msecs
parameter_list|(
name|int
name|nfds
parameter_list|,
name|fd_set
modifier|*
name|fdread
parameter_list|,
name|fd_set
modifier|*
name|fdwrite
parameter_list|,
name|int
name|timeout
parameter_list|)
block|{
if|if
condition|(
name|timeout
operator|<
literal|0
condition|)
return|return
name|qt_safe_select
argument_list|(
name|nfds
argument_list|,
name|fdread
argument_list|,
name|fdwrite
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
return|;
name|struct
name|timespec
name|tv
init|=
name|millisecsToTimespec
argument_list|(
name|timeout
argument_list|)
decl_stmt|;
return|return
name|qt_safe_select
argument_list|(
name|nfds
argument_list|,
name|fdread
argument_list|,
name|fdwrite
argument_list|,
literal|0
argument_list|,
operator|&
name|tv
argument_list|)
return|;
block|}
end_function
begin_if
if|#
directive|if
name|_POSIX_POLL
operator|<=
literal|0
operator|||
name|defined
argument_list|(
name|QT_BUILD_INTERNAL
argument_list|)
end_if
begin_define
DECL|macro|QT_POLL_READ_MASK
define|#
directive|define
name|QT_POLL_READ_MASK
value|(POLLIN | POLLRDNORM)
end_define
begin_define
DECL|macro|QT_POLL_WRITE_MASK
define|#
directive|define
name|QT_POLL_WRITE_MASK
value|(POLLOUT | POLLWRNORM | POLLWRBAND)
end_define
begin_define
DECL|macro|QT_POLL_EXCEPT_MASK
define|#
directive|define
name|QT_POLL_EXCEPT_MASK
value|(POLLPRI | POLLRDBAND)
end_define
begin_define
DECL|macro|QT_POLL_ERROR_MASK
define|#
directive|define
name|QT_POLL_ERROR_MASK
value|(POLLERR | POLLNVAL)
end_define
begin_define
DECL|macro|QT_POLL_EVENTS_MASK
define|#
directive|define
name|QT_POLL_EVENTS_MASK
value|(QT_POLL_READ_MASK | QT_POLL_WRITE_MASK | QT_POLL_EXCEPT_MASK)
end_define
begin_function
DECL|function|qt_poll_prepare
specifier|static
specifier|inline
name|int
name|qt_poll_prepare
parameter_list|(
name|struct
name|pollfd
modifier|*
name|fds
parameter_list|,
name|nfds_t
name|nfds
parameter_list|,
name|fd_set
modifier|*
name|read_fds
parameter_list|,
name|fd_set
modifier|*
name|write_fds
parameter_list|,
name|fd_set
modifier|*
name|except_fds
parameter_list|)
block|{
name|int
name|max_fd
init|=
operator|-
literal|1
decl_stmt|;
name|FD_ZERO
argument_list|(
name|read_fds
argument_list|)
expr_stmt|;
name|FD_ZERO
argument_list|(
name|write_fds
argument_list|)
expr_stmt|;
name|FD_ZERO
argument_list|(
name|except_fds
argument_list|)
expr_stmt|;
for|for
control|(
name|nfds_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nfds
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|fds
index|[
name|i
index|]
operator|.
name|fd
operator|>=
name|FD_SETSIZE
condition|)
block|{
name|errno
operator|=
name|EINVAL
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
operator|(
name|fds
index|[
name|i
index|]
operator|.
name|fd
operator|<
literal|0
operator|)
operator|||
operator|(
name|fds
index|[
name|i
index|]
operator|.
name|revents
operator|&
name|QT_POLL_ERROR_MASK
operator|)
condition|)
continue|continue;
if|if
condition|(
name|fds
index|[
name|i
index|]
operator|.
name|events
operator|&
name|QT_POLL_READ_MASK
condition|)
name|FD_SET
argument_list|(
name|fds
index|[
name|i
index|]
operator|.
name|fd
argument_list|,
name|read_fds
argument_list|)
expr_stmt|;
if|if
condition|(
name|fds
index|[
name|i
index|]
operator|.
name|events
operator|&
name|QT_POLL_WRITE_MASK
condition|)
name|FD_SET
argument_list|(
name|fds
index|[
name|i
index|]
operator|.
name|fd
argument_list|,
name|write_fds
argument_list|)
expr_stmt|;
if|if
condition|(
name|fds
index|[
name|i
index|]
operator|.
name|events
operator|&
name|QT_POLL_EXCEPT_MASK
condition|)
name|FD_SET
argument_list|(
name|fds
index|[
name|i
index|]
operator|.
name|fd
argument_list|,
name|except_fds
argument_list|)
expr_stmt|;
if|if
condition|(
name|fds
index|[
name|i
index|]
operator|.
name|events
operator|&
name|QT_POLL_EVENTS_MASK
condition|)
name|max_fd
operator|=
name|qMax
argument_list|(
name|max_fd
argument_list|,
name|fds
index|[
name|i
index|]
operator|.
name|fd
argument_list|)
expr_stmt|;
block|}
return|return
name|max_fd
operator|+
literal|1
return|;
block|}
end_function
begin_function
DECL|function|qt_poll_examine_ready_read
specifier|static
specifier|inline
name|void
name|qt_poll_examine_ready_read
parameter_list|(
name|struct
name|pollfd
modifier|&
name|pfd
parameter_list|)
block|{
name|int
name|res
decl_stmt|;
name|char
name|data
decl_stmt|;
name|EINTR_LOOP
argument_list|(
name|res
argument_list|,
operator|::
name|recv
argument_list|(
name|pfd
operator|.
name|fd
argument_list|,
operator|&
name|data
argument_list|,
sizeof|sizeof
argument_list|(
name|data
argument_list|)
argument_list|,
name|MSG_PEEK
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|int
name|error
init|=
operator|(
name|res
operator|<
literal|0
operator|)
condition|?
name|errno
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|res
operator|==
literal|0
condition|)
block|{
name|pfd
operator|.
name|revents
operator||=
name|POLLHUP
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|res
operator|>
literal|0
operator|||
name|error
operator|==
name|ENOTSOCK
operator|||
name|error
operator|==
name|ENOTCONN
condition|)
block|{
name|pfd
operator|.
name|revents
operator||=
name|QT_POLL_READ_MASK
operator|&
name|pfd
operator|.
name|events
expr_stmt|;
block|}
else|else
block|{
switch|switch
condition|(
name|error
condition|)
block|{
case|case
name|ESHUTDOWN
case|:
case|case
name|ECONNRESET
case|:
case|case
name|ECONNABORTED
case|:
case|case
name|ENETRESET
case|:
name|pfd
operator|.
name|revents
operator||=
name|POLLHUP
expr_stmt|;
break|break;
default|default:
name|pfd
operator|.
name|revents
operator||=
name|POLLERR
expr_stmt|;
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|qt_poll_sweep
specifier|static
specifier|inline
name|int
name|qt_poll_sweep
parameter_list|(
name|struct
name|pollfd
modifier|*
name|fds
parameter_list|,
name|nfds_t
name|nfds
parameter_list|,
name|fd_set
modifier|*
name|read_fds
parameter_list|,
name|fd_set
modifier|*
name|write_fds
parameter_list|,
name|fd_set
modifier|*
name|except_fds
parameter_list|)
block|{
name|int
name|result
init|=
literal|0
decl_stmt|;
for|for
control|(
name|nfds_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nfds
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|fds
index|[
name|i
index|]
operator|.
name|fd
operator|<
literal|0
condition|)
continue|continue;
if|if
condition|(
name|FD_ISSET
argument_list|(
name|fds
index|[
name|i
index|]
operator|.
name|fd
argument_list|,
name|read_fds
argument_list|)
condition|)
name|qt_poll_examine_ready_read
argument_list|(
name|fds
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|FD_ISSET
argument_list|(
name|fds
index|[
name|i
index|]
operator|.
name|fd
argument_list|,
name|write_fds
argument_list|)
condition|)
name|fds
index|[
name|i
index|]
operator|.
name|revents
operator||=
name|QT_POLL_WRITE_MASK
operator|&
name|fds
index|[
name|i
index|]
operator|.
name|events
expr_stmt|;
if|if
condition|(
name|FD_ISSET
argument_list|(
name|fds
index|[
name|i
index|]
operator|.
name|fd
argument_list|,
name|except_fds
argument_list|)
condition|)
name|fds
index|[
name|i
index|]
operator|.
name|revents
operator||=
name|QT_POLL_EXCEPT_MASK
operator|&
name|fds
index|[
name|i
index|]
operator|.
name|events
expr_stmt|;
if|if
condition|(
name|fds
index|[
name|i
index|]
operator|.
name|revents
operator|!=
literal|0
condition|)
name|result
operator|++
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|qt_poll_is_bad_fd
specifier|static
specifier|inline
name|bool
name|qt_poll_is_bad_fd
parameter_list|(
name|int
name|fd
parameter_list|)
block|{
name|int
name|ret
decl_stmt|;
name|EINTR_LOOP
argument_list|(
name|ret
argument_list|,
name|fcntl
argument_list|(
name|fd
argument_list|,
name|F_GETFD
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|ret
operator|==
operator|-
literal|1
operator|&&
name|errno
operator|==
name|EBADF
operator|)
return|;
block|}
end_function
begin_function
DECL|function|qt_poll_mark_bad_fds
specifier|static
specifier|inline
name|int
name|qt_poll_mark_bad_fds
parameter_list|(
name|struct
name|pollfd
modifier|*
name|fds
parameter_list|,
specifier|const
name|nfds_t
name|nfds
parameter_list|)
block|{
name|int
name|n_marked
init|=
literal|0
decl_stmt|;
for|for
control|(
name|nfds_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nfds
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|fds
index|[
name|i
index|]
operator|.
name|fd
operator|<
literal|0
condition|)
continue|continue;
if|if
condition|(
name|fds
index|[
name|i
index|]
operator|.
name|revents
operator|&
name|QT_POLL_ERROR_MASK
condition|)
continue|continue;
if|if
condition|(
name|qt_poll_is_bad_fd
argument_list|(
name|fds
index|[
name|i
index|]
operator|.
name|fd
argument_list|)
condition|)
block|{
name|fds
index|[
name|i
index|]
operator|.
name|revents
operator||=
name|POLLNVAL
expr_stmt|;
name|n_marked
operator|++
expr_stmt|;
block|}
block|}
return|return
name|n_marked
return|;
block|}
end_function
begin_function
DECL|function|qt_poll
name|Q_AUTOTEST_EXPORT
name|int
name|qt_poll
parameter_list|(
name|struct
name|pollfd
modifier|*
name|fds
parameter_list|,
name|nfds_t
name|nfds
parameter_list|,
specifier|const
name|struct
name|timespec
modifier|*
name|timeout_ts
parameter_list|)
block|{
if|if
condition|(
operator|!
name|fds
operator|&&
name|nfds
condition|)
block|{
name|errno
operator|=
name|EFAULT
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
name|fd_set
name|read_fds
decl_stmt|,
name|write_fds
decl_stmt|,
name|except_fds
decl_stmt|;
name|struct
name|timeval
name|tv
decl_stmt|,
modifier|*
name|ptv
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|timeout_ts
condition|)
block|{
name|tv
operator|=
name|timespecToTimeval
argument_list|(
operator|*
name|timeout_ts
argument_list|)
expr_stmt|;
name|ptv
operator|=
operator|&
name|tv
expr_stmt|;
block|}
name|int
name|n_bad_fds
init|=
literal|0
decl_stmt|;
for|for
control|(
name|nfds_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nfds
condition|;
name|i
operator|++
control|)
block|{
name|fds
index|[
name|i
index|]
operator|.
name|revents
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|fds
index|[
name|i
index|]
operator|.
name|fd
operator|<
literal|0
condition|)
continue|continue;
if|if
condition|(
name|fds
index|[
name|i
index|]
operator|.
name|events
operator|&
name|QT_POLL_EVENTS_MASK
condition|)
continue|continue;
if|if
condition|(
name|qt_poll_is_bad_fd
argument_list|(
name|fds
index|[
name|i
index|]
operator|.
name|fd
argument_list|)
condition|)
block|{
comment|// Mark bad file descriptors that have no event flags set
comment|// here, as we won't be passing them to select below and therefore
comment|// need to do the check ourselves
name|fds
index|[
name|i
index|]
operator|.
name|revents
operator|=
name|POLLNVAL
expr_stmt|;
name|n_bad_fds
operator|++
expr_stmt|;
block|}
block|}
forever|forever
block|{
specifier|const
name|int
name|max_fd
init|=
name|qt_poll_prepare
argument_list|(
name|fds
argument_list|,
name|nfds
argument_list|,
operator|&
name|read_fds
argument_list|,
operator|&
name|write_fds
argument_list|,
operator|&
name|except_fds
argument_list|)
decl_stmt|;
if|if
condition|(
name|max_fd
operator|<
literal|0
condition|)
return|return
name|max_fd
return|;
if|if
condition|(
name|n_bad_fds
operator|>
literal|0
condition|)
block|{
name|tv
operator|.
name|tv_sec
operator|=
literal|0
expr_stmt|;
name|tv
operator|.
name|tv_usec
operator|=
literal|0
expr_stmt|;
name|ptv
operator|=
operator|&
name|tv
expr_stmt|;
block|}
specifier|const
name|int
name|ret
init|=
operator|::
name|select
argument_list|(
name|max_fd
argument_list|,
operator|&
name|read_fds
argument_list|,
operator|&
name|write_fds
argument_list|,
operator|&
name|except_fds
argument_list|,
name|ptv
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|==
literal|0
condition|)
return|return
name|n_bad_fds
return|;
if|if
condition|(
name|ret
operator|>
literal|0
condition|)
return|return
name|qt_poll_sweep
argument_list|(
name|fds
argument_list|,
name|nfds
argument_list|,
operator|&
name|read_fds
argument_list|,
operator|&
name|write_fds
argument_list|,
operator|&
name|except_fds
argument_list|)
return|;
if|if
condition|(
name|errno
operator|!=
name|EBADF
condition|)
return|return
operator|-
literal|1
return|;
comment|// We have at least one bad file descriptor that we waited on, find out which and try again
name|n_bad_fds
operator|+=
name|qt_poll_mark_bad_fds
argument_list|(
name|fds
argument_list|,
name|nfds
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// _POSIX_POLL<= 0 || defined(QT_BUILD_INTERNAL)
end_comment
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_HAVE_PPOLL
argument_list|)
operator|&&
operator|(
operator|(
name|_POSIX_POLL
operator|>
literal|0
operator|)
operator|||
name|defined
argument_list|(
name|_SC_POLL
argument_list|)
operator|)
end_if
begin_function
DECL|function|timespecToMillisecs
specifier|static
specifier|inline
name|int
name|timespecToMillisecs
parameter_list|(
specifier|const
name|struct
name|timespec
modifier|*
name|ts
parameter_list|)
block|{
return|return
operator|(
name|ts
operator|==
name|NULL
operator|)
condition|?
operator|-
literal|1
else|:
operator|(
name|ts
operator|->
name|tv_sec
operator|*
literal|1000
operator|)
operator|+
operator|(
name|ts
operator|->
name|tv_nsec
operator|/
literal|1000000
operator|)
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|qt_ppoll
specifier|static
specifier|inline
name|int
name|qt_ppoll
parameter_list|(
name|struct
name|pollfd
modifier|*
name|fds
parameter_list|,
name|nfds_t
name|nfds
parameter_list|,
specifier|const
name|struct
name|timespec
modifier|*
name|timeout_ts
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_HAVE_PPOLL
argument_list|)
return|return
operator|::
name|ppoll
argument_list|(
name|fds
argument_list|,
name|nfds
argument_list|,
name|timeout_ts
argument_list|,
name|Q_NULLPTR
argument_list|)
return|;
elif|#
directive|elif
name|_POSIX_POLL
operator|>
literal|0
return|return
operator|::
name|poll
argument_list|(
name|fds
argument_list|,
name|nfds
argument_list|,
name|timespecToMillisecs
argument_list|(
name|timeout_ts
argument_list|)
argument_list|)
return|;
else|#
directive|else
if|#
directive|if
name|defined
argument_list|(
name|_SC_POLL
argument_list|)
specifier|static
specifier|const
name|bool
name|have_poll
init|=
operator|(
name|sysconf
argument_list|(
name|_SC_POLL
argument_list|)
operator|>
literal|0
operator|)
decl_stmt|;
if|if
condition|(
name|have_poll
condition|)
return|return
operator|::
name|poll
argument_list|(
name|fds
argument_list|,
name|nfds
argument_list|,
name|timespecToMillisecs
argument_list|(
name|timeout_ts
argument_list|)
argument_list|)
return|;
endif|#
directive|endif
return|return
name|qt_poll
argument_list|(
name|fds
argument_list|,
name|nfds
argument_list|,
name|timeout_ts
argument_list|)
return|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*!     \internal      Behaves as close to POSIX poll(2) as practical but may be implemented     using select(2) where necessary. In that case, returns -1 and sets errno     to EINVAL if passed any descriptor greater than or equal to FD_SETSIZE. */
end_comment
begin_function
DECL|function|qt_safe_poll
name|int
name|qt_safe_poll
parameter_list|(
name|struct
name|pollfd
modifier|*
name|fds
parameter_list|,
name|nfds_t
name|nfds
parameter_list|,
specifier|const
name|struct
name|timespec
modifier|*
name|timeout_ts
parameter_list|)
block|{
if|if
condition|(
operator|!
name|timeout_ts
condition|)
block|{
comment|// no timeout -> block forever
name|int
name|ret
decl_stmt|;
name|EINTR_LOOP
argument_list|(
name|ret
argument_list|,
name|qt_ppoll
argument_list|(
name|fds
argument_list|,
name|nfds
argument_list|,
name|Q_NULLPTR
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
name|timespec
name|start
init|=
name|qt_gettime
argument_list|()
decl_stmt|;
name|timespec
name|timeout
init|=
operator|*
name|timeout_ts
decl_stmt|;
comment|// loop and recalculate the timeout as needed
forever|forever
block|{
specifier|const
name|int
name|ret
init|=
name|qt_ppoll
argument_list|(
name|fds
argument_list|,
name|nfds
argument_list|,
operator|&
name|timeout
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|!=
operator|-
literal|1
operator|||
name|errno
operator|!=
name|EINTR
condition|)
return|return
name|ret
return|;
comment|// recalculate the timeout
if|if
condition|(
operator|!
name|time_update
argument_list|(
operator|&
name|timeout
argument_list|,
name|start
argument_list|,
operator|*
name|timeout_ts
argument_list|)
condition|)
block|{
comment|// timeout during update
comment|// or clock reset, fake timeout error
return|return
literal|0
return|;
block|}
block|}
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
