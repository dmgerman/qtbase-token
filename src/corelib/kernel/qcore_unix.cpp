begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Copyright (C) 2016 Intel Corporation. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qcore_unix_p.h"
end_include
begin_include
include|#
directive|include
file|"qelapsedtimer.h"
end_include
begin_include
include|#
directive|include
file|<stdlib.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_MAC
end_ifdef
begin_include
include|#
directive|include
file|<mach/mach_time.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_function
name|QT_BEGIN_NAMESPACE
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_HAVE_PPOLL
argument_list|)
operator|&&
name|defined
argument_list|(
name|QT_HAVE_POLLTS
argument_list|)
DECL|macro|ppoll
define|#
directive|define
name|ppoll
value|pollts
DECL|macro|QT_HAVE_PPOLL
define|#
directive|define
name|QT_HAVE_PPOLL
endif|#
directive|endif
DECL|function|time_update
specifier|static
specifier|inline
name|bool
name|time_update
parameter_list|(
name|struct
name|timespec
modifier|*
name|tv
parameter_list|,
specifier|const
name|struct
name|timespec
modifier|&
name|start
parameter_list|,
specifier|const
name|struct
name|timespec
modifier|&
name|timeout
parameter_list|)
block|{
comment|// clock source is (hopefully) monotonic, so we can recalculate how much timeout is left;
comment|// if it isn't monotonic, we'll simply hope that it hasn't jumped, because we have no alternative
name|struct
name|timespec
name|now
init|=
name|qt_gettime
argument_list|()
decl_stmt|;
operator|*
name|tv
operator|=
name|timeout
operator|+
name|start
operator|-
name|now
expr_stmt|;
return|return
name|tv
operator|->
name|tv_sec
operator|>=
literal|0
return|;
block|}
end_function
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_HAVE_PPOLL
argument_list|)
operator|&&
name|defined
argument_list|(
name|QT_HAVE_POLL
argument_list|)
end_if
begin_function
DECL|function|timespecToMillisecs
specifier|static
specifier|inline
name|int
name|timespecToMillisecs
parameter_list|(
specifier|const
name|struct
name|timespec
modifier|*
name|ts
parameter_list|)
block|{
return|return
operator|(
name|ts
operator|==
name|NULL
operator|)
condition|?
operator|-
literal|1
else|:
operator|(
name|ts
operator|->
name|tv_sec
operator|*
literal|1000
operator|)
operator|+
operator|(
name|ts
operator|->
name|tv_nsec
operator|/
literal|1000000
operator|)
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// defined in qpoll.cpp
end_comment
begin_function_decl
name|int
name|qt_poll
parameter_list|(
name|struct
name|pollfd
modifier|*
name|fds
parameter_list|,
name|nfds_t
name|nfds
parameter_list|,
specifier|const
name|struct
name|timespec
modifier|*
name|timeout_ts
parameter_list|)
function_decl|;
end_function_decl
begin_function
DECL|function|qt_ppoll
specifier|static
specifier|inline
name|int
name|qt_ppoll
parameter_list|(
name|struct
name|pollfd
modifier|*
name|fds
parameter_list|,
name|nfds_t
name|nfds
parameter_list|,
specifier|const
name|struct
name|timespec
modifier|*
name|timeout_ts
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_HAVE_PPOLL
argument_list|)
return|return
operator|::
name|ppoll
argument_list|(
name|fds
argument_list|,
name|nfds
argument_list|,
name|timeout_ts
argument_list|,
name|Q_NULLPTR
argument_list|)
return|;
elif|#
directive|elif
name|defined
argument_list|(
name|QT_HAVE_POLL
argument_list|)
return|return
operator|::
name|poll
argument_list|(
name|fds
argument_list|,
name|nfds
argument_list|,
name|timespecToMillisecs
argument_list|(
name|timeout_ts
argument_list|)
argument_list|)
return|;
else|#
directive|else
return|return
name|qt_poll
argument_list|(
name|fds
argument_list|,
name|nfds
argument_list|,
name|timeout_ts
argument_list|)
return|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*!     \internal      Behaves as close to POSIX poll(2) as practical but may be implemented     using select(2) where necessary. In that case, returns -1 and sets errno     to EINVAL if passed any descriptor greater than or equal to FD_SETSIZE. */
end_comment
begin_function
DECL|function|qt_safe_poll
name|int
name|qt_safe_poll
parameter_list|(
name|struct
name|pollfd
modifier|*
name|fds
parameter_list|,
name|nfds_t
name|nfds
parameter_list|,
specifier|const
name|struct
name|timespec
modifier|*
name|timeout_ts
parameter_list|)
block|{
if|if
condition|(
operator|!
name|timeout_ts
condition|)
block|{
comment|// no timeout -> block forever
name|int
name|ret
decl_stmt|;
name|EINTR_LOOP
argument_list|(
name|ret
argument_list|,
name|qt_ppoll
argument_list|(
name|fds
argument_list|,
name|nfds
argument_list|,
name|Q_NULLPTR
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
name|timespec
name|start
init|=
name|qt_gettime
argument_list|()
decl_stmt|;
name|timespec
name|timeout
init|=
operator|*
name|timeout_ts
decl_stmt|;
comment|// loop and recalculate the timeout as needed
forever|forever
block|{
specifier|const
name|int
name|ret
init|=
name|qt_ppoll
argument_list|(
name|fds
argument_list|,
name|nfds
argument_list|,
operator|&
name|timeout
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|!=
operator|-
literal|1
operator|||
name|errno
operator|!=
name|EINTR
condition|)
return|return
name|ret
return|;
comment|// recalculate the timeout
if|if
condition|(
operator|!
name|time_update
argument_list|(
operator|&
name|timeout
argument_list|,
name|start
argument_list|,
operator|*
name|timeout_ts
argument_list|)
condition|)
block|{
comment|// timeout during update
comment|// or clock reset, fake timeout error
return|return
literal|0
return|;
block|}
block|}
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
