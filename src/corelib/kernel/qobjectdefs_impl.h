begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|Q_QDOC
end_ifndef
begin_ifndef
ifndef|#
directive|ifndef
name|QOBJECTDEFS_H
end_ifndef
begin_error
error|#
directive|error
error|Do not include qobjectdefs_impl.h directly
end_error
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
name|namespace
name|QtPrivate
block|{
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|RemoveRef
block|{
typedef|typedef
name|T
name|Type
typedef|;
block|}
empty_stmt|;
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|RemoveRef
operator|<
name|T
operator|&
operator|>
block|{
typedef|typedef
name|T
name|Type
typedef|;
block|}
empty_stmt|;
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|RemoveConstRef
block|{
typedef|typedef
name|T
name|Type
typedef|;
block|}
empty_stmt|;
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|RemoveConstRef
operator|<
specifier|const
name|T
operator|&
operator|>
block|{
typedef|typedef
name|T
name|Type
typedef|;
block|}
empty_stmt|;
comment|/*        The following List classes are used to help to handle the list of arguments.        It follow the same principles as the lisp lists.        List_Left<L,N> take a list and a number as a parametter and returns (via the Value typedef,        the list composed of the first N element of the list      */
ifndef|#
directive|ifndef
name|Q_COMPILER_VARIADIC_TEMPLATES
name|template
operator|<
name|typename
name|Head
operator|,
name|typename
name|Tail
operator|>
expr|struct
name|List
block|{
typedef|typedef
name|Head
name|Car
typedef|;
typedef|typedef
name|Tail
name|Cdr
typedef|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|L
operator|,
name|int
name|N
operator|>
expr|struct
name|List_Left
block|{
typedef|typedef
name|List
operator|<
name|typename
name|L
operator|::
name|Car
operator|,
name|typename
name|List_Left
operator|<
name|typename
name|L
operator|::
name|Cdr
operator|,
name|N
operator|-
literal|1
operator|>
operator|::
name|Value
operator|>
name|Value
expr_stmt|;
block|}
end_expr_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|L
operator|>
expr|struct
name|List_Left
operator|<
name|L
operator|,
literal|0
operator|>
block|{
typedef|typedef
name|void
name|Value
typedef|;
block|}
end_expr_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_else
else|#
directive|else
end_else
begin_comment
comment|// With variadic template, lists are represented using a variadic template argument instead of the lisp way
end_comment
begin_expr_stmt
name|template
operator|<
name|typename
operator|...
operator|>
expr|struct
name|List
block|{}
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|Head
operator|,
name|typename
operator|...
name|Tail
operator|>
expr|struct
name|List
operator|<
name|Head
operator|,
name|Tail
operator|...
operator|>
block|{
typedef|typedef
name|Head
name|Car
typedef|;
end_expr_stmt
begin_typedef
typedef|typedef
name|List
operator|<
name|Tail
operator|...
operator|>
name|Cdr
expr_stmt|;
end_typedef
begin_expr_stmt
unit|};
name|template
operator|<
name|typename
operator|,
name|typename
operator|>
expr|struct
name|List_Append
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
operator|...
name|L1
operator|,
name|typename
operator|...
name|L2
operator|>
expr|struct
name|List_Append
operator|<
name|List
operator|<
name|L1
operator|...
operator|>
operator|,
name|List
operator|<
name|L2
operator|...
operator|>>
block|{
typedef|typedef
name|List
operator|<
name|L1
operator|...
operator|,
name|L2
operator|...
operator|>
name|Value
expr_stmt|;
block|}
end_expr_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|L
operator|,
name|int
name|N
operator|>
expr|struct
name|List_Left
block|{
typedef|typedef
name|typename
name|List_Append
operator|<
name|List
operator|<
name|typename
name|L
operator|::
name|Car
operator|>
operator|,
name|typename
name|List_Left
operator|<
name|typename
name|L
operator|::
name|Cdr
operator|,
name|N
operator|-
literal|1
operator|>
operator|::
name|Value
operator|>
operator|::
name|Value
name|Value
expr_stmt|;
block|}
end_expr_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|L
operator|>
expr|struct
name|List_Left
operator|<
name|L
operator|,
literal|0
operator|>
block|{
typedef|typedef
name|List
operator|<
operator|>
name|Value
expr_stmt|;
block|}
end_expr_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// List_Select<L,N> returns (via typedef Value) the Nth element of the list L
end_comment
begin_expr_stmt
name|template
operator|<
name|typename
name|L
operator|,
name|int
name|N
operator|>
expr|struct
name|List_Select
block|{
typedef|typedef
name|typename
name|List_Select
operator|<
name|typename
name|L
operator|::
name|Cdr
operator|,
name|N
operator|-
literal|1
operator|>
operator|::
name|Value
name|Value
expr_stmt|;
block|}
end_expr_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|L
operator|>
expr|struct
name|List_Select
operator|<
name|L
operator|,
literal|0
operator|>
block|{
typedef|typedef
name|typename
name|L
operator|::
name|Car
name|Value
expr_stmt|;
block|}
end_expr_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_comment
comment|/*        trick to set the return value of a slot that works even if the signal or the slot returns void        to be used like     function(), ApplyReturnValue<ReturnType>(&return_value)        if function() returns a value, the operator,(T, ApplyReturnValue<ReturnType>) is called, but if it        returns void, the builtin one is used without an error.     */
end_comment
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|ApplyReturnValue
block|{
name|void
operator|*
name|data
block|;
name|ApplyReturnValue
argument_list|(
name|void
operator|*
name|data_
argument_list|)
operator|:
name|data
argument_list|(
argument|data_
argument_list|)
block|{}
block|}
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|U
operator|>
name|void
name|operator
operator|,
operator|(
specifier|const
name|T
operator|&
name|value
operator|,
specifier|const
name|ApplyReturnValue
operator|<
name|U
operator|>
operator|&
name|container
operator|)
block|{
if|if
condition|(
name|container
operator|.
name|data
condition|)
operator|*
name|reinterpret_cast
operator|<
name|U
operator|*
operator|>
operator|(
name|container
operator|.
name|data
operator|)
operator|=
name|value
expr_stmt|;
block|}
end_expr_stmt
begin_ifdef
ifdef|#
directive|ifdef
name|Q_COMPILER_RVALUE_REFS
end_ifdef
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|U
operator|>
name|void
name|operator
operator|,
operator|(
name|T
operator|&&
name|value
operator|,
specifier|const
name|ApplyReturnValue
operator|<
name|U
operator|>
operator|&
name|container
operator|)
block|{
if|if
condition|(
name|container
operator|.
name|data
condition|)
operator|*
name|reinterpret_cast
operator|<
name|U
operator|*
operator|>
operator|(
name|container
operator|.
name|data
operator|)
operator|=
name|value
expr_stmt|;
block|}
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|void
name|operator
operator|,
operator|(
name|T
operator|,
specifier|const
name|ApplyReturnValue
operator|<
name|void
operator|>
operator|&
operator|)
block|{}
comment|/*       The FunctionPointer<Func> struct is a type trait for function pointer.         - ArgumentCount  is the number of argument, or -1 if it is unknown         - the Object typedef is the Object of a pointer to member function         - the Arguments typedef is the list of argument (in a QtPrivate::List)         - the Function typedef is an alias to the template parametter Func         - the call<Args, R>(f,o,args) method is used to call that slot             Args is the list of argument of the signal             R is the return type of the signal             f is the function pointer             o is the receiver object             and args is the array of pointer to arguments, as used in qt_metacall         The Functor<Func,N> struct is the helper to call a functor of N argument.        its call function is the same as the FunctionPointer::call function.      */
ifndef|#
directive|ifndef
name|Q_COMPILER_VARIADIC_TEMPLATES
name|template
operator|<
name|typename
name|Func
operator|>
expr|struct
name|FunctionPointer
block|{ enum
block|{
name|ArgumentCount
operator|=
operator|-
literal|1
block|}
block|; }
expr_stmt|;
end_expr_stmt
begin_comment
comment|//Pointers to member functions
end_comment
begin_expr_stmt
name|template
operator|<
name|class
name|Obj
operator|,
name|typename
name|Ret
operator|>
expr|struct
name|FunctionPointer
operator|<
name|Ret
argument_list|(
name|Obj
operator|::
operator|*
argument_list|)
argument_list|()
operator|>
block|{
typedef|typedef
name|Obj
name|Object
typedef|;
end_expr_stmt
begin_typedef
typedef|typedef
name|void
name|Arguments
typedef|;
end_typedef
begin_typedef
typedef|typedef
name|Ret
name|ReturnType
typedef|;
end_typedef
begin_typedef
typedef|typedef
name|Ret
argument_list|(
name|Obj
operator|::
operator|*
name|Function
argument_list|)
argument_list|()
expr_stmt|;
end_typedef
begin_enum
enum|enum
block|{
name|ArgumentCount
init|=
literal|0
block|}
enum|;
end_enum
begin_expr_stmt
name|template
operator|<
name|typename
name|Args
operator|,
name|typename
name|R
operator|>
specifier|static
name|void
name|call
argument_list|(
argument|Function f
argument_list|,
argument|Obj *o
argument_list|,
argument|void **arg
argument_list|)
block|{
operator|(
name|o
operator|->*
name|f
operator|)
operator|(
operator|)
block|,
name|ApplyReturnValue
operator|<
name|R
operator|>
operator|(
name|arg
index|[
literal|0
index|]
operator|)
block|; }
end_expr_stmt
begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|Obj
operator|,
name|typename
name|Ret
operator|,
name|typename
name|Arg1
operator|>
expr|struct
name|FunctionPointer
operator|<
name|Ret
argument_list|(
name|Obj
operator|::
operator|*
argument_list|)
argument_list|(
name|Arg1
argument_list|)
operator|>
block|{
typedef|typedef
name|Obj
name|Object
typedef|;
end_expr_stmt
begin_typedef
typedef|typedef
name|List
operator|<
name|Arg1
operator|,
name|void
operator|>
name|Arguments
expr_stmt|;
end_typedef
begin_typedef
typedef|typedef
name|Ret
name|ReturnType
typedef|;
end_typedef
begin_typedef
typedef|typedef
name|Ret
argument_list|(
name|Obj
operator|::
operator|*
name|Function
argument_list|)
argument_list|(
name|Arg1
argument_list|)
expr_stmt|;
end_typedef
begin_enum
enum|enum
block|{
name|ArgumentCount
init|=
literal|1
block|}
enum|;
end_enum
begin_expr_stmt
name|template
operator|<
name|typename
name|Args
operator|,
name|typename
name|R
operator|>
specifier|static
name|void
name|call
argument_list|(
argument|Function f
argument_list|,
argument|Obj *o
argument_list|,
argument|void **arg
argument_list|)
block|{
operator|(
name|o
operator|->*
name|f
operator|)
operator|(
operator|(
operator|*
name|reinterpret_cast
operator|<
name|typename
name|RemoveRef
operator|<
name|typename
name|Args
operator|::
name|Car
operator|>
operator|::
name|Type
operator|*
operator|>
operator|(
name|arg
index|[
literal|1
index|]
operator|)
operator|)
operator|)
block|,
name|ApplyReturnValue
operator|<
name|R
operator|>
operator|(
name|arg
index|[
literal|0
index|]
operator|)
block|;         }
end_expr_stmt
begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|Obj
operator|,
name|typename
name|Ret
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Arg2
operator|>
expr|struct
name|FunctionPointer
operator|<
name|Ret
argument_list|(
name|Obj
operator|::
operator|*
argument_list|)
argument_list|(
name|Arg1
argument_list|,
name|Arg2
argument_list|)
operator|>
block|{
typedef|typedef
name|Obj
name|Object
typedef|;
end_expr_stmt
begin_typedef
typedef|typedef
name|List
operator|<
name|Arg1
operator|,
name|List
operator|<
name|Arg2
operator|,
name|void
operator|>
expr|>
name|Arguments
expr_stmt|;
end_typedef
begin_typedef
typedef|typedef
name|Ret
name|ReturnType
typedef|;
end_typedef
begin_typedef
typedef|typedef
name|Ret
argument_list|(
name|Obj
operator|::
operator|*
name|Function
argument_list|)
argument_list|(
name|Arg1
argument_list|,
name|Arg2
argument_list|)
expr_stmt|;
end_typedef
begin_enum
enum|enum
block|{
name|ArgumentCount
init|=
literal|2
block|}
enum|;
end_enum
begin_expr_stmt
name|template
operator|<
name|typename
name|Args
operator|,
name|typename
name|R
operator|>
specifier|static
name|void
name|call
argument_list|(
argument|Function f
argument_list|,
argument|Obj *o
argument_list|,
argument|void **arg
argument_list|)
block|{
operator|(
name|o
operator|->*
name|f
operator|)
operator|(
operator|*
name|reinterpret_cast
operator|<
name|typename
name|RemoveRef
operator|<
name|typename
name|List_Select
operator|<
name|Args
operator|,
literal|0
operator|>
operator|::
name|Value
operator|>
operator|::
name|Type
operator|*
operator|>
operator|(
name|arg
index|[
literal|1
index|]
operator|)
operator|,
operator|*
name|reinterpret_cast
operator|<
name|typename
name|RemoveRef
operator|<
name|typename
name|List_Select
operator|<
name|Args
operator|,
literal|1
operator|>
operator|::
name|Value
operator|>
operator|::
name|Type
operator|*
operator|>
operator|(
name|arg
index|[
literal|2
index|]
operator|)
operator|)
block|,
name|ApplyReturnValue
operator|<
name|R
operator|>
operator|(
name|arg
index|[
literal|0
index|]
operator|)
block|;         }
end_expr_stmt
begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|Obj
operator|,
name|typename
name|Ret
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Arg2
operator|,
name|typename
name|Arg3
operator|>
expr|struct
name|FunctionPointer
operator|<
name|Ret
argument_list|(
name|Obj
operator|::
operator|*
argument_list|)
argument_list|(
name|Arg1
argument_list|,
name|Arg2
argument_list|,
name|Arg3
argument_list|)
operator|>
block|{
typedef|typedef
name|Obj
name|Object
typedef|;
end_expr_stmt
begin_typedef
typedef|typedef
name|List
operator|<
name|Arg1
operator|,
name|List
operator|<
name|Arg2
operator|,
name|List
operator|<
name|Arg3
operator|,
name|void
operator|>
expr|>
operator|>
name|Arguments
expr_stmt|;
end_typedef
begin_typedef
typedef|typedef
name|Ret
name|ReturnType
typedef|;
end_typedef
begin_typedef
typedef|typedef
name|Ret
argument_list|(
name|Obj
operator|::
operator|*
name|Function
argument_list|)
argument_list|(
name|Arg1
argument_list|,
name|Arg2
argument_list|,
name|Arg3
argument_list|)
expr_stmt|;
end_typedef
begin_enum
enum|enum
block|{
name|ArgumentCount
init|=
literal|3
block|}
enum|;
end_enum
begin_expr_stmt
name|template
operator|<
name|typename
name|Args
operator|,
name|typename
name|R
operator|>
specifier|static
name|void
name|call
argument_list|(
argument|Function f
argument_list|,
argument|Obj *o
argument_list|,
argument|void **arg
argument_list|)
block|{
operator|(
name|o
operator|->*
name|f
operator|)
operator|(
operator|*
name|reinterpret_cast
operator|<
name|typename
name|RemoveRef
operator|<
name|typename
name|List_Select
operator|<
name|Args
operator|,
literal|0
operator|>
operator|::
name|Value
operator|>
operator|::
name|Type
operator|*
operator|>
operator|(
name|arg
index|[
literal|1
index|]
operator|)
operator|,
operator|*
name|reinterpret_cast
operator|<
name|typename
name|RemoveRef
operator|<
name|typename
name|List_Select
operator|<
name|Args
operator|,
literal|1
operator|>
operator|::
name|Value
operator|>
operator|::
name|Type
operator|*
operator|>
operator|(
name|arg
index|[
literal|2
index|]
operator|)
operator|,
operator|*
name|reinterpret_cast
operator|<
name|typename
name|RemoveRef
operator|<
name|typename
name|List_Select
operator|<
name|Args
operator|,
literal|2
operator|>
operator|::
name|Value
operator|>
operator|::
name|Type
operator|*
operator|>
operator|(
name|arg
index|[
literal|3
index|]
operator|)
operator|)
block|,
name|ApplyReturnValue
operator|<
name|R
operator|>
operator|(
name|arg
index|[
literal|0
index|]
operator|)
block|;         }
end_expr_stmt
begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|Obj
operator|,
name|typename
name|Ret
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Arg2
operator|,
name|typename
name|Arg3
operator|,
name|typename
name|Arg4
operator|>
expr|struct
name|FunctionPointer
operator|<
name|Ret
argument_list|(
name|Obj
operator|::
operator|*
argument_list|)
argument_list|(
name|Arg1
argument_list|,
name|Arg2
argument_list|,
name|Arg3
argument_list|,
name|Arg4
argument_list|)
operator|>
block|{
typedef|typedef
name|Obj
name|Object
typedef|;
end_expr_stmt
begin_typedef
typedef|typedef
name|List
operator|<
name|Arg1
operator|,
name|List
operator|<
name|Arg2
operator|,
name|List
operator|<
name|Arg3
operator|,
name|List
operator|<
name|Arg4
operator|,
name|void
operator|>
expr|>
operator|>
expr|>
name|Arguments
expr_stmt|;
end_typedef
begin_typedef
typedef|typedef
name|Ret
name|ReturnType
typedef|;
end_typedef
begin_typedef
typedef|typedef
name|Ret
argument_list|(
name|Obj
operator|::
operator|*
name|Function
argument_list|)
argument_list|(
name|Arg1
argument_list|,
name|Arg2
argument_list|,
name|Arg3
argument_list|,
name|Arg4
argument_list|)
expr_stmt|;
end_typedef
begin_enum
enum|enum
block|{
name|ArgumentCount
init|=
literal|4
block|}
enum|;
end_enum
begin_expr_stmt
name|template
operator|<
name|typename
name|Args
operator|,
name|typename
name|R
operator|>
specifier|static
name|void
name|call
argument_list|(
argument|Function f
argument_list|,
argument|Obj *o
argument_list|,
argument|void **arg
argument_list|)
block|{
operator|(
name|o
operator|->*
name|f
operator|)
operator|(
operator|*
name|reinterpret_cast
operator|<
name|typename
name|RemoveRef
operator|<
name|typename
name|List_Select
operator|<
name|Args
operator|,
literal|0
operator|>
operator|::
name|Value
operator|>
operator|::
name|Type
operator|*
operator|>
operator|(
name|arg
index|[
literal|1
index|]
operator|)
operator|,
operator|*
name|reinterpret_cast
operator|<
name|typename
name|RemoveRef
operator|<
name|typename
name|List_Select
operator|<
name|Args
operator|,
literal|1
operator|>
operator|::
name|Value
operator|>
operator|::
name|Type
operator|*
operator|>
operator|(
name|arg
index|[
literal|2
index|]
operator|)
operator|,
operator|*
name|reinterpret_cast
operator|<
name|typename
name|RemoveRef
operator|<
name|typename
name|List_Select
operator|<
name|Args
operator|,
literal|2
operator|>
operator|::
name|Value
operator|>
operator|::
name|Type
operator|*
operator|>
operator|(
name|arg
index|[
literal|3
index|]
operator|)
operator|,
operator|*
name|reinterpret_cast
operator|<
name|typename
name|RemoveRef
operator|<
name|typename
name|List_Select
operator|<
name|Args
operator|,
literal|3
operator|>
operator|::
name|Value
operator|>
operator|::
name|Type
operator|*
operator|>
operator|(
name|arg
index|[
literal|4
index|]
operator|)
operator|)
block|,
name|ApplyReturnValue
operator|<
name|R
operator|>
operator|(
name|arg
index|[
literal|0
index|]
operator|)
block|;         }
end_expr_stmt
begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|Obj
operator|,
name|typename
name|Ret
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Arg2
operator|,
name|typename
name|Arg3
operator|,
name|typename
name|Arg4
operator|,
name|typename
name|Arg5
operator|>
expr|struct
name|FunctionPointer
operator|<
name|Ret
argument_list|(
name|Obj
operator|::
operator|*
argument_list|)
argument_list|(
name|Arg1
argument_list|,
name|Arg2
argument_list|,
name|Arg3
argument_list|,
name|Arg4
argument_list|,
name|Arg5
argument_list|)
operator|>
block|{
typedef|typedef
name|Obj
name|Object
typedef|;
end_expr_stmt
begin_typedef
typedef|typedef
name|List
operator|<
name|Arg1
operator|,
name|List
operator|<
name|Arg2
operator|,
name|List
operator|<
name|Arg3
operator|,
name|List
operator|<
name|Arg4
operator|,
name|List
operator|<
name|Arg5
operator|,
name|void
operator|>
expr|>
operator|>
expr|>
operator|>
name|Arguments
expr_stmt|;
end_typedef
begin_typedef
typedef|typedef
name|Ret
name|ReturnType
typedef|;
end_typedef
begin_typedef
typedef|typedef
name|Ret
argument_list|(
name|Obj
operator|::
operator|*
name|Function
argument_list|)
argument_list|(
name|Arg1
argument_list|,
name|Arg2
argument_list|,
name|Arg3
argument_list|,
name|Arg4
argument_list|,
name|Arg5
argument_list|)
expr_stmt|;
end_typedef
begin_enum
enum|enum
block|{
name|ArgumentCount
init|=
literal|5
block|}
enum|;
end_enum
begin_expr_stmt
name|template
operator|<
name|typename
name|Args
operator|,
name|typename
name|R
operator|>
specifier|static
name|void
name|call
argument_list|(
argument|Function f
argument_list|,
argument|Obj *o
argument_list|,
argument|void **arg
argument_list|)
block|{
operator|(
name|o
operator|->*
name|f
operator|)
operator|(
operator|*
name|reinterpret_cast
operator|<
name|typename
name|RemoveRef
operator|<
name|typename
name|List_Select
operator|<
name|Args
operator|,
literal|0
operator|>
operator|::
name|Value
operator|>
operator|::
name|Type
operator|*
operator|>
operator|(
name|arg
index|[
literal|1
index|]
operator|)
operator|,
operator|*
name|reinterpret_cast
operator|<
name|typename
name|RemoveRef
operator|<
name|typename
name|List_Select
operator|<
name|Args
operator|,
literal|1
operator|>
operator|::
name|Value
operator|>
operator|::
name|Type
operator|*
operator|>
operator|(
name|arg
index|[
literal|2
index|]
operator|)
operator|,
operator|*
name|reinterpret_cast
operator|<
name|typename
name|RemoveRef
operator|<
name|typename
name|List_Select
operator|<
name|Args
operator|,
literal|2
operator|>
operator|::
name|Value
operator|>
operator|::
name|Type
operator|*
operator|>
operator|(
name|arg
index|[
literal|3
index|]
operator|)
operator|,
operator|*
name|reinterpret_cast
operator|<
name|typename
name|RemoveRef
operator|<
name|typename
name|List_Select
operator|<
name|Args
operator|,
literal|3
operator|>
operator|::
name|Value
operator|>
operator|::
name|Type
operator|*
operator|>
operator|(
name|arg
index|[
literal|4
index|]
operator|)
operator|,
operator|*
name|reinterpret_cast
operator|<
name|typename
name|RemoveRef
operator|<
name|typename
name|List_Select
operator|<
name|Args
operator|,
literal|4
operator|>
operator|::
name|Value
operator|>
operator|::
name|Type
operator|*
operator|>
operator|(
name|arg
index|[
literal|5
index|]
operator|)
operator|)
block|,
name|ApplyReturnValue
operator|<
name|R
operator|>
operator|(
name|arg
index|[
literal|0
index|]
operator|)
block|;         }
end_expr_stmt
begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|Obj
operator|,
name|typename
name|Ret
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Arg2
operator|,
name|typename
name|Arg3
operator|,
name|typename
name|Arg4
operator|,
name|typename
name|Arg5
operator|,
name|typename
name|Arg6
operator|>
expr|struct
name|FunctionPointer
operator|<
name|Ret
argument_list|(
name|Obj
operator|::
operator|*
argument_list|)
argument_list|(
name|Arg1
argument_list|,
name|Arg2
argument_list|,
name|Arg3
argument_list|,
name|Arg4
argument_list|,
name|Arg5
argument_list|,
name|Arg6
argument_list|)
operator|>
block|{
typedef|typedef
name|Obj
name|Object
typedef|;
end_expr_stmt
begin_typedef
typedef|typedef
name|List
operator|<
name|Arg1
operator|,
name|List
operator|<
name|Arg2
operator|,
name|List
operator|<
name|Arg3
operator|,
name|List
operator|<
name|Arg4
operator|,
name|List
operator|<
name|Arg5
operator|,
name|List
operator|<
name|Arg6
operator|,
name|void
operator|>
expr|>
operator|>
expr|>
operator|>
expr|>
name|Arguments
expr_stmt|;
end_typedef
begin_typedef
typedef|typedef
name|Ret
name|ReturnType
typedef|;
end_typedef
begin_typedef
typedef|typedef
name|Ret
argument_list|(
name|Obj
operator|::
operator|*
name|Function
argument_list|)
argument_list|(
name|Arg1
argument_list|,
name|Arg2
argument_list|,
name|Arg3
argument_list|,
name|Arg4
argument_list|,
name|Arg5
argument_list|,
name|Arg6
argument_list|)
expr_stmt|;
end_typedef
begin_enum
enum|enum
block|{
name|ArgumentCount
init|=
literal|6
block|}
enum|;
end_enum
begin_expr_stmt
name|template
operator|<
name|typename
name|Args
operator|,
name|typename
name|R
operator|>
specifier|static
name|void
name|call
argument_list|(
argument|Function f
argument_list|,
argument|Obj *o
argument_list|,
argument|void **arg
argument_list|)
block|{
operator|(
name|o
operator|->*
name|f
operator|)
operator|(
operator|*
name|reinterpret_cast
operator|<
name|typename
name|RemoveRef
operator|<
name|typename
name|List_Select
operator|<
name|Args
operator|,
literal|0
operator|>
operator|::
name|Value
operator|>
operator|::
name|Type
operator|*
operator|>
operator|(
name|arg
index|[
literal|1
index|]
operator|)
operator|,
operator|*
name|reinterpret_cast
operator|<
name|typename
name|RemoveRef
operator|<
name|typename
name|List_Select
operator|<
name|Args
operator|,
literal|1
operator|>
operator|::
name|Value
operator|>
operator|::
name|Type
operator|*
operator|>
operator|(
name|arg
index|[
literal|2
index|]
operator|)
operator|,
operator|*
name|reinterpret_cast
operator|<
name|typename
name|RemoveRef
operator|<
name|typename
name|List_Select
operator|<
name|Args
operator|,
literal|2
operator|>
operator|::
name|Value
operator|>
operator|::
name|Type
operator|*
operator|>
operator|(
name|arg
index|[
literal|3
index|]
operator|)
operator|,
operator|*
name|reinterpret_cast
operator|<
name|typename
name|RemoveRef
operator|<
name|typename
name|List_Select
operator|<
name|Args
operator|,
literal|3
operator|>
operator|::
name|Value
operator|>
operator|::
name|Type
operator|*
operator|>
operator|(
name|arg
index|[
literal|4
index|]
operator|)
operator|,
operator|*
name|reinterpret_cast
operator|<
name|typename
name|RemoveRef
operator|<
name|typename
name|List_Select
operator|<
name|Args
operator|,
literal|4
operator|>
operator|::
name|Value
operator|>
operator|::
name|Type
operator|*
operator|>
operator|(
name|arg
index|[
literal|5
index|]
operator|)
operator|,
operator|*
name|reinterpret_cast
operator|<
name|typename
name|RemoveRef
operator|<
name|typename
name|List_Select
operator|<
name|Args
operator|,
literal|5
operator|>
operator|::
name|Value
operator|>
operator|::
name|Type
operator|*
operator|>
operator|(
name|arg
index|[
literal|6
index|]
operator|)
operator|)
block|,
name|ApplyReturnValue
operator|<
name|R
operator|>
operator|(
name|arg
index|[
literal|0
index|]
operator|)
block|;         }
end_expr_stmt
begin_comment
unit|};
comment|//Pointers to const member functions
end_comment
begin_expr_stmt
name|template
operator|<
name|class
name|Obj
operator|,
name|typename
name|Ret
operator|>
expr|struct
name|FunctionPointer
operator|<
name|Ret
argument_list|(
argument|Obj::*
argument_list|)
operator|(
operator|)
specifier|const
operator|>
block|{
typedef|typedef
name|Obj
name|Object
typedef|;
end_expr_stmt
begin_typedef
typedef|typedef
name|void
name|Arguments
typedef|;
end_typedef
begin_typedef
typedef|typedef
name|Ret
name|ReturnType
typedef|;
end_typedef
begin_typedef
typedef|typedef
name|Ret
argument_list|(
argument|Obj::*Function
argument_list|)
operator|(
operator|)
specifier|const
expr_stmt|;
end_typedef
begin_enum
enum|enum
block|{
name|ArgumentCount
init|=
literal|0
block|}
enum|;
end_enum
begin_expr_stmt
name|template
operator|<
name|typename
name|Args
operator|,
name|typename
name|R
operator|>
specifier|static
name|void
name|call
argument_list|(
argument|Function f
argument_list|,
argument|Obj *o
argument_list|,
argument|void **arg
argument_list|)
block|{
operator|(
name|o
operator|->*
name|f
operator|)
operator|(
operator|)
block|,
name|ApplyReturnValue
operator|<
name|R
operator|>
operator|(
name|arg
index|[
literal|0
index|]
operator|)
block|; }
end_expr_stmt
begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|Obj
operator|,
name|typename
name|Ret
operator|,
name|typename
name|Arg1
operator|>
expr|struct
name|FunctionPointer
operator|<
name|Ret
argument_list|(
argument|Obj::*
argument_list|)
operator|(
name|Arg1
operator|)
specifier|const
operator|>
block|{
typedef|typedef
name|Obj
name|Object
typedef|;
end_expr_stmt
begin_typedef
typedef|typedef
name|List
operator|<
name|Arg1
operator|,
name|void
operator|>
name|Arguments
expr_stmt|;
end_typedef
begin_typedef
typedef|typedef
name|Ret
name|ReturnType
typedef|;
end_typedef
begin_typedef
typedef|typedef
name|Ret
argument_list|(
argument|Obj::*Function
argument_list|)
operator|(
name|Arg1
operator|)
specifier|const
expr_stmt|;
end_typedef
begin_enum
enum|enum
block|{
name|ArgumentCount
init|=
literal|1
block|}
enum|;
end_enum
begin_expr_stmt
name|template
operator|<
name|typename
name|Args
operator|,
name|typename
name|R
operator|>
specifier|static
name|void
name|call
argument_list|(
argument|Function f
argument_list|,
argument|Obj *o
argument_list|,
argument|void **arg
argument_list|)
block|{
operator|(
name|o
operator|->*
name|f
operator|)
operator|(
operator|(
operator|*
name|reinterpret_cast
operator|<
name|typename
name|RemoveRef
operator|<
name|typename
name|Args
operator|::
name|Car
operator|>
operator|::
name|Type
operator|*
operator|>
operator|(
name|arg
index|[
literal|1
index|]
operator|)
operator|)
operator|)
block|,
name|ApplyReturnValue
operator|<
name|R
operator|>
operator|(
name|arg
index|[
literal|0
index|]
operator|)
block|;         }
end_expr_stmt
begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|Obj
operator|,
name|typename
name|Ret
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Arg2
operator|>
expr|struct
name|FunctionPointer
operator|<
name|Ret
argument_list|(
argument|Obj::*
argument_list|)
operator|(
name|Arg1
operator|,
name|Arg2
operator|)
specifier|const
operator|>
block|{
typedef|typedef
name|Obj
name|Object
typedef|;
end_expr_stmt
begin_typedef
typedef|typedef
name|List
operator|<
name|Arg1
operator|,
name|List
operator|<
name|Arg2
operator|,
name|void
operator|>
expr|>
name|Arguments
expr_stmt|;
end_typedef
begin_typedef
typedef|typedef
name|Ret
name|ReturnType
typedef|;
end_typedef
begin_typedef
typedef|typedef
name|Ret
argument_list|(
argument|Obj::*Function
argument_list|)
operator|(
name|Arg1
operator|,
name|Arg2
operator|)
specifier|const
expr_stmt|;
end_typedef
begin_enum
enum|enum
block|{
name|ArgumentCount
init|=
literal|2
block|}
enum|;
end_enum
begin_expr_stmt
name|template
operator|<
name|typename
name|Args
operator|,
name|typename
name|R
operator|>
specifier|static
name|void
name|call
argument_list|(
argument|Function f
argument_list|,
argument|Obj *o
argument_list|,
argument|void **arg
argument_list|)
block|{
operator|(
name|o
operator|->*
name|f
operator|)
operator|(
operator|*
name|reinterpret_cast
operator|<
name|typename
name|RemoveRef
operator|<
name|typename
name|List_Select
operator|<
name|Args
operator|,
literal|0
operator|>
operator|::
name|Value
operator|>
operator|::
name|Type
operator|*
operator|>
operator|(
name|arg
index|[
literal|1
index|]
operator|)
operator|,
operator|*
name|reinterpret_cast
operator|<
name|typename
name|RemoveRef
operator|<
name|typename
name|List_Select
operator|<
name|Args
operator|,
literal|1
operator|>
operator|::
name|Value
operator|>
operator|::
name|Type
operator|*
operator|>
operator|(
name|arg
index|[
literal|2
index|]
operator|)
operator|)
block|,
name|ApplyReturnValue
operator|<
name|R
operator|>
operator|(
name|arg
index|[
literal|0
index|]
operator|)
block|;         }
end_expr_stmt
begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|Obj
operator|,
name|typename
name|Ret
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Arg2
operator|,
name|typename
name|Arg3
operator|>
expr|struct
name|FunctionPointer
operator|<
name|Ret
argument_list|(
argument|Obj::*
argument_list|)
operator|(
name|Arg1
operator|,
name|Arg2
operator|,
name|Arg3
operator|)
specifier|const
operator|>
block|{
typedef|typedef
name|Obj
name|Object
typedef|;
end_expr_stmt
begin_typedef
typedef|typedef
name|List
operator|<
name|Arg1
operator|,
name|List
operator|<
name|Arg2
operator|,
name|List
operator|<
name|Arg3
operator|,
name|void
operator|>
expr|>
operator|>
name|Arguments
expr_stmt|;
end_typedef
begin_typedef
typedef|typedef
name|Ret
name|ReturnType
typedef|;
end_typedef
begin_typedef
typedef|typedef
name|Ret
argument_list|(
argument|Obj::*Function
argument_list|)
operator|(
name|Arg1
operator|,
name|Arg2
operator|,
name|Arg3
operator|)
specifier|const
expr_stmt|;
end_typedef
begin_enum
enum|enum
block|{
name|ArgumentCount
init|=
literal|3
block|}
enum|;
end_enum
begin_expr_stmt
name|template
operator|<
name|typename
name|Args
operator|,
name|typename
name|R
operator|>
specifier|static
name|void
name|call
argument_list|(
argument|Function f
argument_list|,
argument|Obj *o
argument_list|,
argument|void **arg
argument_list|)
block|{
operator|(
name|o
operator|->*
name|f
operator|)
operator|(
operator|*
name|reinterpret_cast
operator|<
name|typename
name|RemoveRef
operator|<
name|typename
name|List_Select
operator|<
name|Args
operator|,
literal|0
operator|>
operator|::
name|Value
operator|>
operator|::
name|Type
operator|*
operator|>
operator|(
name|arg
index|[
literal|1
index|]
operator|)
operator|,
operator|*
name|reinterpret_cast
operator|<
name|typename
name|RemoveRef
operator|<
name|typename
name|List_Select
operator|<
name|Args
operator|,
literal|1
operator|>
operator|::
name|Value
operator|>
operator|::
name|Type
operator|*
operator|>
operator|(
name|arg
index|[
literal|2
index|]
operator|)
operator|,
operator|*
name|reinterpret_cast
operator|<
name|typename
name|RemoveRef
operator|<
name|typename
name|List_Select
operator|<
name|Args
operator|,
literal|2
operator|>
operator|::
name|Value
operator|>
operator|::
name|Type
operator|*
operator|>
operator|(
name|arg
index|[
literal|3
index|]
operator|)
operator|)
block|,
name|ApplyReturnValue
operator|<
name|R
operator|>
operator|(
name|arg
index|[
literal|0
index|]
operator|)
block|;         }
end_expr_stmt
begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|Obj
operator|,
name|typename
name|Ret
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Arg2
operator|,
name|typename
name|Arg3
operator|,
name|typename
name|Arg4
operator|>
expr|struct
name|FunctionPointer
operator|<
name|Ret
argument_list|(
argument|Obj::*
argument_list|)
operator|(
name|Arg1
operator|,
name|Arg2
operator|,
name|Arg3
operator|,
name|Arg4
operator|)
specifier|const
operator|>
block|{
typedef|typedef
name|Obj
name|Object
typedef|;
end_expr_stmt
begin_typedef
typedef|typedef
name|List
operator|<
name|Arg1
operator|,
name|List
operator|<
name|Arg2
operator|,
name|List
operator|<
name|Arg3
operator|,
name|List
operator|<
name|Arg4
operator|,
name|void
operator|>
expr|>
operator|>
expr|>
name|Arguments
expr_stmt|;
end_typedef
begin_typedef
typedef|typedef
name|Ret
name|ReturnType
typedef|;
end_typedef
begin_typedef
typedef|typedef
name|Ret
argument_list|(
argument|Obj::*Function
argument_list|)
operator|(
name|Arg1
operator|,
name|Arg2
operator|,
name|Arg3
operator|,
name|Arg4
operator|)
specifier|const
expr_stmt|;
end_typedef
begin_enum
enum|enum
block|{
name|ArgumentCount
init|=
literal|4
block|}
enum|;
end_enum
begin_expr_stmt
name|template
operator|<
name|typename
name|Args
operator|,
name|typename
name|R
operator|>
specifier|static
name|void
name|call
argument_list|(
argument|Function f
argument_list|,
argument|Obj *o
argument_list|,
argument|void **arg
argument_list|)
block|{
operator|(
name|o
operator|->*
name|f
operator|)
operator|(
operator|*
name|reinterpret_cast
operator|<
name|typename
name|RemoveRef
operator|<
name|typename
name|List_Select
operator|<
name|Args
operator|,
literal|0
operator|>
operator|::
name|Value
operator|>
operator|::
name|Type
operator|*
operator|>
operator|(
name|arg
index|[
literal|1
index|]
operator|)
operator|,
operator|*
name|reinterpret_cast
operator|<
name|typename
name|RemoveRef
operator|<
name|typename
name|List_Select
operator|<
name|Args
operator|,
literal|1
operator|>
operator|::
name|Value
operator|>
operator|::
name|Type
operator|*
operator|>
operator|(
name|arg
index|[
literal|2
index|]
operator|)
operator|,
operator|*
name|reinterpret_cast
operator|<
name|typename
name|RemoveRef
operator|<
name|typename
name|List_Select
operator|<
name|Args
operator|,
literal|2
operator|>
operator|::
name|Value
operator|>
operator|::
name|Type
operator|*
operator|>
operator|(
name|arg
index|[
literal|3
index|]
operator|)
operator|,
operator|*
name|reinterpret_cast
operator|<
name|typename
name|RemoveRef
operator|<
name|typename
name|List_Select
operator|<
name|Args
operator|,
literal|3
operator|>
operator|::
name|Value
operator|>
operator|::
name|Type
operator|*
operator|>
operator|(
name|arg
index|[
literal|4
index|]
operator|)
operator|)
block|,
name|ApplyReturnValue
operator|<
name|R
operator|>
operator|(
name|arg
index|[
literal|0
index|]
operator|)
block|;         }
end_expr_stmt
begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|Obj
operator|,
name|typename
name|Ret
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Arg2
operator|,
name|typename
name|Arg3
operator|,
name|typename
name|Arg4
operator|,
name|typename
name|Arg5
operator|>
expr|struct
name|FunctionPointer
operator|<
name|Ret
argument_list|(
argument|Obj::*
argument_list|)
operator|(
name|Arg1
operator|,
name|Arg2
operator|,
name|Arg3
operator|,
name|Arg4
operator|,
name|Arg5
operator|)
specifier|const
operator|>
block|{
typedef|typedef
name|Obj
name|Object
typedef|;
end_expr_stmt
begin_typedef
typedef|typedef
name|List
operator|<
name|Arg1
operator|,
name|List
operator|<
name|Arg2
operator|,
name|List
operator|<
name|Arg3
operator|,
name|List
operator|<
name|Arg4
operator|,
name|List
operator|<
name|Arg5
operator|,
name|void
operator|>
expr|>
operator|>
expr|>
operator|>
name|Arguments
expr_stmt|;
end_typedef
begin_typedef
typedef|typedef
name|Ret
name|ReturnType
typedef|;
end_typedef
begin_typedef
typedef|typedef
name|Ret
argument_list|(
argument|Obj::*Function
argument_list|)
operator|(
name|Arg1
operator|,
name|Arg2
operator|,
name|Arg3
operator|,
name|Arg4
operator|,
name|Arg5
operator|)
specifier|const
expr_stmt|;
end_typedef
begin_enum
enum|enum
block|{
name|ArgumentCount
init|=
literal|5
block|}
enum|;
end_enum
begin_expr_stmt
name|template
operator|<
name|typename
name|Args
operator|,
name|typename
name|R
operator|>
specifier|static
name|void
name|call
argument_list|(
argument|Function f
argument_list|,
argument|Obj *o
argument_list|,
argument|void **arg
argument_list|)
block|{
operator|(
name|o
operator|->*
name|f
operator|)
operator|(
operator|*
name|reinterpret_cast
operator|<
name|typename
name|RemoveRef
operator|<
name|typename
name|List_Select
operator|<
name|Args
operator|,
literal|0
operator|>
operator|::
name|Value
operator|>
operator|::
name|Type
operator|*
operator|>
operator|(
name|arg
index|[
literal|1
index|]
operator|)
operator|,
operator|*
name|reinterpret_cast
operator|<
name|typename
name|RemoveRef
operator|<
name|typename
name|List_Select
operator|<
name|Args
operator|,
literal|1
operator|>
operator|::
name|Value
operator|>
operator|::
name|Type
operator|*
operator|>
operator|(
name|arg
index|[
literal|2
index|]
operator|)
operator|,
operator|*
name|reinterpret_cast
operator|<
name|typename
name|RemoveRef
operator|<
name|typename
name|List_Select
operator|<
name|Args
operator|,
literal|2
operator|>
operator|::
name|Value
operator|>
operator|::
name|Type
operator|*
operator|>
operator|(
name|arg
index|[
literal|3
index|]
operator|)
operator|,
operator|*
name|reinterpret_cast
operator|<
name|typename
name|RemoveRef
operator|<
name|typename
name|List_Select
operator|<
name|Args
operator|,
literal|3
operator|>
operator|::
name|Value
operator|>
operator|::
name|Type
operator|*
operator|>
operator|(
name|arg
index|[
literal|4
index|]
operator|)
operator|,
operator|*
name|reinterpret_cast
operator|<
name|typename
name|RemoveRef
operator|<
name|typename
name|List_Select
operator|<
name|Args
operator|,
literal|4
operator|>
operator|::
name|Value
operator|>
operator|::
name|Type
operator|*
operator|>
operator|(
name|arg
index|[
literal|5
index|]
operator|)
operator|)
block|,
name|ApplyReturnValue
operator|<
name|R
operator|>
operator|(
name|arg
index|[
literal|0
index|]
operator|)
block|;         }
end_expr_stmt
begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|Obj
operator|,
name|typename
name|Ret
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Arg2
operator|,
name|typename
name|Arg3
operator|,
name|typename
name|Arg4
operator|,
name|typename
name|Arg5
operator|,
name|typename
name|Arg6
operator|>
expr|struct
name|FunctionPointer
operator|<
name|Ret
argument_list|(
argument|Obj::*
argument_list|)
operator|(
name|Arg1
operator|,
name|Arg2
operator|,
name|Arg3
operator|,
name|Arg4
operator|,
name|Arg5
operator|,
name|Arg6
operator|)
specifier|const
operator|>
block|{
typedef|typedef
name|Obj
name|Object
typedef|;
end_expr_stmt
begin_typedef
typedef|typedef
name|List
operator|<
name|Arg1
operator|,
name|List
operator|<
name|Arg2
operator|,
name|List
operator|<
name|Arg3
operator|,
name|List
operator|<
name|Arg4
operator|,
name|List
operator|<
name|Arg5
operator|,
name|List
operator|<
name|Arg6
operator|,
name|void
operator|>
expr|>
operator|>
expr|>
operator|>
expr|>
name|Arguments
expr_stmt|;
end_typedef
begin_typedef
typedef|typedef
name|Ret
name|ReturnType
typedef|;
end_typedef
begin_typedef
typedef|typedef
name|Ret
argument_list|(
argument|Obj::*Function
argument_list|)
operator|(
name|Arg1
operator|,
name|Arg2
operator|,
name|Arg3
operator|,
name|Arg4
operator|,
name|Arg5
operator|,
name|Arg6
operator|)
specifier|const
expr_stmt|;
end_typedef
begin_enum
enum|enum
block|{
name|ArgumentCount
init|=
literal|6
block|}
enum|;
end_enum
begin_expr_stmt
name|template
operator|<
name|typename
name|Args
operator|,
name|typename
name|R
operator|>
specifier|static
name|void
name|call
argument_list|(
argument|Function f
argument_list|,
argument|Obj *o
argument_list|,
argument|void **arg
argument_list|)
block|{
operator|(
name|o
operator|->*
name|f
operator|)
operator|(
operator|*
name|reinterpret_cast
operator|<
name|typename
name|RemoveRef
operator|<
name|typename
name|List_Select
operator|<
name|Args
operator|,
literal|0
operator|>
operator|::
name|Value
operator|>
operator|::
name|Type
operator|*
operator|>
operator|(
name|arg
index|[
literal|1
index|]
operator|)
operator|,
operator|*
name|reinterpret_cast
operator|<
name|typename
name|RemoveRef
operator|<
name|typename
name|List_Select
operator|<
name|Args
operator|,
literal|1
operator|>
operator|::
name|Value
operator|>
operator|::
name|Type
operator|*
operator|>
operator|(
name|arg
index|[
literal|2
index|]
operator|)
operator|,
operator|*
name|reinterpret_cast
operator|<
name|typename
name|RemoveRef
operator|<
name|typename
name|List_Select
operator|<
name|Args
operator|,
literal|2
operator|>
operator|::
name|Value
operator|>
operator|::
name|Type
operator|*
operator|>
operator|(
name|arg
index|[
literal|3
index|]
operator|)
operator|,
operator|*
name|reinterpret_cast
operator|<
name|typename
name|RemoveRef
operator|<
name|typename
name|List_Select
operator|<
name|Args
operator|,
literal|3
operator|>
operator|::
name|Value
operator|>
operator|::
name|Type
operator|*
operator|>
operator|(
name|arg
index|[
literal|4
index|]
operator|)
operator|,
operator|*
name|reinterpret_cast
operator|<
name|typename
name|RemoveRef
operator|<
name|typename
name|List_Select
operator|<
name|Args
operator|,
literal|4
operator|>
operator|::
name|Value
operator|>
operator|::
name|Type
operator|*
operator|>
operator|(
name|arg
index|[
literal|5
index|]
operator|)
operator|,
operator|*
name|reinterpret_cast
operator|<
name|typename
name|RemoveRef
operator|<
name|typename
name|List_Select
operator|<
name|Args
operator|,
literal|5
operator|>
operator|::
name|Value
operator|>
operator|::
name|Type
operator|*
operator|>
operator|(
name|arg
index|[
literal|6
index|]
operator|)
operator|)
block|,
name|ApplyReturnValue
operator|<
name|R
operator|>
operator|(
name|arg
index|[
literal|0
index|]
operator|)
block|;         }
end_expr_stmt
begin_comment
unit|};
comment|//Static functions
end_comment
begin_expr_stmt
name|template
operator|<
name|typename
name|Ret
operator|>
expr|struct
name|FunctionPointer
operator|<
name|Ret
argument_list|(
operator|*
argument_list|)
argument_list|()
operator|>
block|{
typedef|typedef
name|void
name|Arguments
typedef|;
end_expr_stmt
begin_typedef
typedef|typedef
name|Ret
function_decl|(
modifier|*
name|Function
function_decl|)
parameter_list|()
function_decl|;
end_typedef
begin_typedef
typedef|typedef
name|Ret
name|ReturnType
typedef|;
end_typedef
begin_enum
enum|enum
block|{
name|ArgumentCount
init|=
literal|0
block|}
enum|;
end_enum
begin_expr_stmt
name|template
operator|<
name|typename
name|Args
operator|,
name|typename
name|R
operator|>
specifier|static
name|void
name|call
argument_list|(
argument|Function f
argument_list|,
argument|void *
argument_list|,
argument|void **arg
argument_list|)
block|{
name|f
argument_list|()
block|,
name|ApplyReturnValue
operator|<
name|R
operator|>
operator|(
name|arg
index|[
literal|0
index|]
operator|)
block|; }
end_expr_stmt
begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|Ret
operator|,
name|typename
name|Arg1
operator|>
expr|struct
name|FunctionPointer
operator|<
name|Ret
argument_list|(
operator|*
argument_list|)
argument_list|(
name|Arg1
argument_list|)
operator|>
block|{
typedef|typedef
name|List
operator|<
name|Arg1
operator|,
name|void
operator|>
name|Arguments
expr_stmt|;
end_expr_stmt
begin_typedef
typedef|typedef
name|Ret
name|ReturnType
typedef|;
end_typedef
begin_typedef
typedef|typedef
name|Ret
function_decl|(
modifier|*
name|Function
function_decl|)
parameter_list|(
name|Arg1
parameter_list|)
function_decl|;
end_typedef
begin_enum
enum|enum
block|{
name|ArgumentCount
init|=
literal|1
block|}
enum|;
end_enum
begin_expr_stmt
name|template
operator|<
name|typename
name|Args
operator|,
name|typename
name|R
operator|>
specifier|static
name|void
name|call
argument_list|(
argument|Function f
argument_list|,
argument|void *
argument_list|,
argument|void **arg
argument_list|)
block|{
name|f
argument_list|(
argument|*reinterpret_cast<typename RemoveRef<typename List_Select<Args
argument_list|,
literal|0
argument|>::Value>::Type *>(arg[
literal|1
argument|])
argument_list|)
block|,
name|ApplyReturnValue
operator|<
name|R
operator|>
operator|(
name|arg
index|[
literal|0
index|]
operator|)
block|; }
end_expr_stmt
begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|Ret
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Arg2
operator|>
expr|struct
name|FunctionPointer
operator|<
name|Ret
argument_list|(
operator|*
argument_list|)
argument_list|(
name|Arg1
argument_list|,
name|Arg2
argument_list|)
operator|>
block|{
typedef|typedef
name|List
operator|<
name|Arg1
operator|,
name|List
operator|<
name|Arg2
operator|,
name|void
operator|>
expr|>
name|Arguments
expr_stmt|;
end_expr_stmt
begin_typedef
typedef|typedef
name|Ret
name|ReturnType
typedef|;
end_typedef
begin_typedef
typedef|typedef
name|Ret
function_decl|(
modifier|*
name|Function
function_decl|)
parameter_list|(
name|Arg1
parameter_list|,
name|Arg2
parameter_list|)
function_decl|;
end_typedef
begin_enum
enum|enum
block|{
name|ArgumentCount
init|=
literal|2
block|}
enum|;
end_enum
begin_expr_stmt
name|template
operator|<
name|typename
name|Args
operator|,
name|typename
name|R
operator|>
specifier|static
name|void
name|call
argument_list|(
argument|Function f
argument_list|,
argument|void *
argument_list|,
argument|void **arg
argument_list|)
block|{
name|f
argument_list|(
argument|*reinterpret_cast<typename RemoveRef<typename List_Select<Args
argument_list|,
literal|0
argument|>::Value>::Type *>(arg[
literal|1
argument|])
argument_list|,
argument|*reinterpret_cast<typename RemoveRef<typename List_Select<Args
argument_list|,
literal|1
argument|>::Value>::Type *>(arg[
literal|2
argument|])
argument_list|)
block|,
name|ApplyReturnValue
operator|<
name|R
operator|>
operator|(
name|arg
index|[
literal|0
index|]
operator|)
block|; }
end_expr_stmt
begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|Ret
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Arg2
operator|,
name|typename
name|Arg3
operator|>
expr|struct
name|FunctionPointer
operator|<
name|Ret
argument_list|(
operator|*
argument_list|)
argument_list|(
name|Arg1
argument_list|,
name|Arg2
argument_list|,
name|Arg3
argument_list|)
operator|>
block|{
typedef|typedef
name|List
operator|<
name|Arg1
operator|,
name|List
operator|<
name|Arg2
operator|,
name|List
operator|<
name|Arg3
operator|,
name|void
operator|>
expr|>
operator|>
name|Arguments
expr_stmt|;
end_expr_stmt
begin_typedef
typedef|typedef
name|Ret
name|ReturnType
typedef|;
end_typedef
begin_typedef
typedef|typedef
name|Ret
function_decl|(
modifier|*
name|Function
function_decl|)
parameter_list|(
name|Arg1
parameter_list|,
name|Arg2
parameter_list|,
name|Arg3
parameter_list|)
function_decl|;
end_typedef
begin_enum
enum|enum
block|{
name|ArgumentCount
init|=
literal|3
block|}
enum|;
end_enum
begin_expr_stmt
name|template
operator|<
name|typename
name|Args
operator|,
name|typename
name|R
operator|>
specifier|static
name|void
name|call
argument_list|(
argument|Function f
argument_list|,
argument|void *
argument_list|,
argument|void **arg
argument_list|)
block|{
name|f
argument_list|(
argument|*reinterpret_cast<typename RemoveRef<typename List_Select<Args
argument_list|,
literal|0
argument|>::Value>::Type *>(arg[
literal|1
argument|])
argument_list|,
argument|*reinterpret_cast<typename RemoveRef<typename List_Select<Args
argument_list|,
literal|1
argument|>::Value>::Type *>(arg[
literal|2
argument|])
argument_list|,
argument|*reinterpret_cast<typename RemoveRef<typename List_Select<Args
argument_list|,
literal|2
argument|>::Value>::Type *>(arg[
literal|3
argument|])
argument_list|)
block|,
name|ApplyReturnValue
operator|<
name|R
operator|>
operator|(
name|arg
index|[
literal|0
index|]
operator|)
block|;         }
end_expr_stmt
begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|Ret
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Arg2
operator|,
name|typename
name|Arg3
operator|,
name|typename
name|Arg4
operator|>
expr|struct
name|FunctionPointer
operator|<
name|Ret
argument_list|(
operator|*
argument_list|)
argument_list|(
name|Arg1
argument_list|,
name|Arg2
argument_list|,
name|Arg3
argument_list|,
name|Arg4
argument_list|)
operator|>
block|{
typedef|typedef
name|List
operator|<
name|Arg1
operator|,
name|List
operator|<
name|Arg2
operator|,
name|List
operator|<
name|Arg3
operator|,
name|List
operator|<
name|Arg4
operator|,
name|void
operator|>
expr|>
operator|>
expr|>
name|Arguments
expr_stmt|;
end_expr_stmt
begin_typedef
typedef|typedef
name|Ret
name|ReturnType
typedef|;
end_typedef
begin_typedef
typedef|typedef
name|Ret
function_decl|(
modifier|*
name|Function
function_decl|)
parameter_list|(
name|Arg1
parameter_list|,
name|Arg2
parameter_list|,
name|Arg3
parameter_list|,
name|Arg4
parameter_list|)
function_decl|;
end_typedef
begin_enum
enum|enum
block|{
name|ArgumentCount
init|=
literal|4
block|}
enum|;
end_enum
begin_expr_stmt
name|template
operator|<
name|typename
name|Args
operator|,
name|typename
name|R
operator|>
specifier|static
name|void
name|call
argument_list|(
argument|Function f
argument_list|,
argument|void *
argument_list|,
argument|void **arg
argument_list|)
block|{
name|f
argument_list|(
argument|*reinterpret_cast<typename RemoveRef<typename List_Select<Args
argument_list|,
literal|0
argument|>::Value>::Type *>(arg[
literal|1
argument|])
argument_list|,
argument|*reinterpret_cast<typename RemoveRef<typename List_Select<Args
argument_list|,
literal|1
argument|>::Value>::Type *>(arg[
literal|2
argument|])
argument_list|,
argument|*reinterpret_cast<typename RemoveRef<typename List_Select<Args
argument_list|,
literal|2
argument|>::Value>::Type *>(arg[
literal|3
argument|])
argument_list|,
argument|*reinterpret_cast<typename RemoveRef<typename List_Select<Args
argument_list|,
literal|3
argument|>::Value>::Type *>(arg[
literal|4
argument|])
argument_list|)
block|,
name|ApplyReturnValue
operator|<
name|R
operator|>
operator|(
name|arg
index|[
literal|0
index|]
operator|)
block|;         }
end_expr_stmt
begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|Ret
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Arg2
operator|,
name|typename
name|Arg3
operator|,
name|typename
name|Arg4
operator|,
name|typename
name|Arg5
operator|>
expr|struct
name|FunctionPointer
operator|<
name|Ret
argument_list|(
operator|*
argument_list|)
argument_list|(
name|Arg1
argument_list|,
name|Arg2
argument_list|,
name|Arg3
argument_list|,
name|Arg4
argument_list|,
name|Arg5
argument_list|)
operator|>
block|{
typedef|typedef
name|List
operator|<
name|Arg1
operator|,
name|List
operator|<
name|Arg2
operator|,
name|List
operator|<
name|Arg3
operator|,
name|List
operator|<
name|Arg4
operator|,
name|List
operator|<
name|Arg5
operator|,
name|void
operator|>
expr|>
operator|>
expr|>
operator|>
name|Arguments
expr_stmt|;
end_expr_stmt
begin_typedef
typedef|typedef
name|Ret
name|ReturnType
typedef|;
end_typedef
begin_typedef
typedef|typedef
name|Ret
function_decl|(
modifier|*
name|Function
function_decl|)
parameter_list|(
name|Arg1
parameter_list|,
name|Arg2
parameter_list|,
name|Arg3
parameter_list|,
name|Arg4
parameter_list|,
name|Arg5
parameter_list|)
function_decl|;
end_typedef
begin_enum
enum|enum
block|{
name|ArgumentCount
init|=
literal|5
block|}
enum|;
end_enum
begin_expr_stmt
name|template
operator|<
name|typename
name|Args
operator|,
name|typename
name|R
operator|>
specifier|static
name|void
name|call
argument_list|(
argument|Function f
argument_list|,
argument|void *
argument_list|,
argument|void **arg
argument_list|)
block|{
name|f
argument_list|(
argument|*reinterpret_cast<typename RemoveRef<typename List_Select<Args
argument_list|,
literal|0
argument|>::Value>::Type *>(arg[
literal|1
argument|])
argument_list|,
argument|*reinterpret_cast<typename RemoveRef<typename List_Select<Args
argument_list|,
literal|1
argument|>::Value>::Type *>(arg[
literal|2
argument|])
argument_list|,
argument|*reinterpret_cast<typename RemoveRef<typename List_Select<Args
argument_list|,
literal|2
argument|>::Value>::Type *>(arg[
literal|3
argument|])
argument_list|,
argument|*reinterpret_cast<typename RemoveRef<typename List_Select<Args
argument_list|,
literal|3
argument|>::Value>::Type *>(arg[
literal|4
argument|])
argument_list|,
argument|*reinterpret_cast<typename RemoveRef<typename List_Select<Args
argument_list|,
literal|4
argument|>::Value>::Type *>(arg[
literal|5
argument|])
argument_list|)
block|,
name|ApplyReturnValue
operator|<
name|R
operator|>
operator|(
name|arg
index|[
literal|0
index|]
operator|)
block|;         }
end_expr_stmt
begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|Ret
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Arg2
operator|,
name|typename
name|Arg3
operator|,
name|typename
name|Arg4
operator|,
name|typename
name|Arg5
operator|,
name|typename
name|Arg6
operator|>
expr|struct
name|FunctionPointer
operator|<
name|Ret
argument_list|(
operator|*
argument_list|)
argument_list|(
name|Arg1
argument_list|,
name|Arg2
argument_list|,
name|Arg3
argument_list|,
name|Arg4
argument_list|,
name|Arg5
argument_list|,
name|Arg6
argument_list|)
operator|>
block|{
typedef|typedef
name|List
operator|<
name|Arg1
operator|,
name|List
operator|<
name|Arg2
operator|,
name|List
operator|<
name|Arg3
operator|,
name|List
operator|<
name|Arg4
operator|,
name|List
operator|<
name|Arg5
operator|,
name|List
operator|<
name|Arg6
operator|,
name|void
operator|>
expr|>
operator|>
expr|>
operator|>
expr|>
name|Arguments
expr_stmt|;
end_expr_stmt
begin_typedef
typedef|typedef
name|Ret
name|ReturnType
typedef|;
end_typedef
begin_typedef
typedef|typedef
name|Ret
function_decl|(
modifier|*
name|Function
function_decl|)
parameter_list|(
name|Arg1
parameter_list|,
name|Arg2
parameter_list|,
name|Arg3
parameter_list|,
name|Arg4
parameter_list|,
name|Arg5
parameter_list|,
name|Arg6
parameter_list|)
function_decl|;
end_typedef
begin_enum
enum|enum
block|{
name|ArgumentCount
init|=
literal|6
block|}
enum|;
end_enum
begin_expr_stmt
name|template
operator|<
name|typename
name|Args
operator|,
name|typename
name|R
operator|>
specifier|static
name|void
name|call
argument_list|(
argument|Function f
argument_list|,
argument|void *
argument_list|,
argument|void **arg
argument_list|)
block|{
name|f
argument_list|(
argument|*reinterpret_cast<typename RemoveRef<typename List_Select<Args
argument_list|,
literal|0
argument|>::Value>::Type *>(arg[
literal|1
argument|])
argument_list|,
argument|*reinterpret_cast<typename RemoveRef<typename List_Select<Args
argument_list|,
literal|1
argument|>::Value>::Type *>(arg[
literal|2
argument|])
argument_list|,
argument|*reinterpret_cast<typename RemoveRef<typename List_Select<Args
argument_list|,
literal|2
argument|>::Value>::Type *>(arg[
literal|3
argument|])
argument_list|,
argument|*reinterpret_cast<typename RemoveRef<typename List_Select<Args
argument_list|,
literal|3
argument|>::Value>::Type *>(arg[
literal|4
argument|])
argument_list|,
argument|*reinterpret_cast<typename RemoveRef<typename List_Select<Args
argument_list|,
literal|4
argument|>::Value>::Type *>(arg[
literal|5
argument|])
argument_list|,
argument|*reinterpret_cast<typename RemoveRef<typename List_Select<Args
argument_list|,
literal|5
argument|>::Value>::Type *>(arg[
literal|6
argument|])
argument_list|)
block|,
name|ApplyReturnValue
operator|<
name|R
operator|>
operator|(
name|arg
index|[
literal|0
index|]
operator|)
block|;         }
end_expr_stmt
begin_comment
unit|};
comment|//Functors
end_comment
begin_expr_stmt
name|template
operator|<
name|typename
name|F
operator|,
name|int
name|N
operator|>
expr|struct
name|Functor
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|Function
operator|>
expr|struct
name|Functor
operator|<
name|Function
operator|,
literal|0
operator|>
block|{
name|template
operator|<
name|typename
name|Args
block|,
name|typename
name|R
operator|>
specifier|static
name|void
name|call
argument_list|(
argument|Function&f
argument_list|,
argument|void *
argument_list|,
argument|void **arg
argument_list|)
block|{
name|f
argument_list|()
block|,
name|ApplyReturnValue
operator|<
name|R
operator|>
operator|(
name|arg
index|[
literal|0
index|]
operator|)
block|; }
block|}
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|Function
operator|>
expr|struct
name|Functor
operator|<
name|Function
operator|,
literal|1
operator|>
block|{
name|template
operator|<
name|typename
name|Args
block|,
name|typename
name|R
operator|>
specifier|static
name|void
name|call
argument_list|(
argument|Function&f
argument_list|,
argument|void *
argument_list|,
argument|void **arg
argument_list|)
block|{
name|f
argument_list|(
argument|*reinterpret_cast<typename RemoveRef<typename List_Select<Args
argument_list|,
literal|0
argument|>::Value>::Type *>(arg[
literal|1
argument|])
argument_list|)
block|,
name|ApplyReturnValue
operator|<
name|R
operator|>
operator|(
name|arg
index|[
literal|0
index|]
operator|)
block|;         }
block|}
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|Function
operator|>
expr|struct
name|Functor
operator|<
name|Function
operator|,
literal|2
operator|>
block|{
name|template
operator|<
name|typename
name|Args
block|,
name|typename
name|R
operator|>
specifier|static
name|void
name|call
argument_list|(
argument|Function&f
argument_list|,
argument|void *
argument_list|,
argument|void **arg
argument_list|)
block|{
name|f
argument_list|(
argument|*reinterpret_cast<typename RemoveRef<typename List_Select<Args
argument_list|,
literal|0
argument|>::Value>::Type *>(arg[
literal|1
argument|])
argument_list|,
argument|*reinterpret_cast<typename RemoveRef<typename List_Select<Args
argument_list|,
literal|1
argument|>::Value>::Type *>(arg[
literal|2
argument|])
argument_list|)
block|,
name|ApplyReturnValue
operator|<
name|R
operator|>
operator|(
name|arg
index|[
literal|0
index|]
operator|)
block|;         }
block|}
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|Function
operator|>
expr|struct
name|Functor
operator|<
name|Function
operator|,
literal|3
operator|>
block|{
name|template
operator|<
name|typename
name|Args
block|,
name|typename
name|R
operator|>
specifier|static
name|void
name|call
argument_list|(
argument|Function&f
argument_list|,
argument|void *
argument_list|,
argument|void **arg
argument_list|)
block|{
name|f
argument_list|(
argument|*reinterpret_cast<typename RemoveRef<typename List_Select<Args
argument_list|,
literal|0
argument|>::Value>::Type *>(arg[
literal|1
argument|])
argument_list|,
argument|*reinterpret_cast<typename RemoveRef<typename List_Select<Args
argument_list|,
literal|1
argument|>::Value>::Type *>(arg[
literal|2
argument|])
argument_list|,
argument|*reinterpret_cast<typename RemoveRef<typename List_Select<Args
argument_list|,
literal|2
argument|>::Value>::Type *>(arg[
literal|3
argument|])
argument_list|)
block|,
name|ApplyReturnValue
operator|<
name|R
operator|>
operator|(
name|arg
index|[
literal|0
index|]
operator|)
block|;         }
block|}
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|Function
operator|>
expr|struct
name|Functor
operator|<
name|Function
operator|,
literal|4
operator|>
block|{
name|template
operator|<
name|typename
name|Args
block|,
name|typename
name|R
operator|>
specifier|static
name|void
name|call
argument_list|(
argument|Function&f
argument_list|,
argument|void *
argument_list|,
argument|void **arg
argument_list|)
block|{
name|f
argument_list|(
argument|*reinterpret_cast<typename RemoveRef<typename List_Select<Args
argument_list|,
literal|0
argument|>::Value>::Type *>(arg[
literal|1
argument|])
argument_list|,
argument|*reinterpret_cast<typename RemoveRef<typename List_Select<Args
argument_list|,
literal|1
argument|>::Value>::Type *>(arg[
literal|2
argument|])
argument_list|,
argument|*reinterpret_cast<typename RemoveRef<typename List_Select<Args
argument_list|,
literal|2
argument|>::Value>::Type *>(arg[
literal|3
argument|])
argument_list|,
argument|*reinterpret_cast<typename RemoveRef<typename List_Select<Args
argument_list|,
literal|3
argument|>::Value>::Type *>(arg[
literal|4
argument|])
argument_list|)
block|,
name|ApplyReturnValue
operator|<
name|R
operator|>
operator|(
name|arg
index|[
literal|0
index|]
operator|)
block|;         }
block|}
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|Function
operator|>
expr|struct
name|Functor
operator|<
name|Function
operator|,
literal|5
operator|>
block|{
name|template
operator|<
name|typename
name|Args
block|,
name|typename
name|R
operator|>
specifier|static
name|void
name|call
argument_list|(
argument|Function&f
argument_list|,
argument|void *
argument_list|,
argument|void **arg
argument_list|)
block|{
name|f
argument_list|(
argument|*reinterpret_cast<typename RemoveRef<typename List_Select<Args
argument_list|,
literal|0
argument|>::Value>::Type *>(arg[
literal|1
argument|])
argument_list|,
argument|*reinterpret_cast<typename RemoveRef<typename List_Select<Args
argument_list|,
literal|1
argument|>::Value>::Type *>(arg[
literal|2
argument|])
argument_list|,
argument|*reinterpret_cast<typename RemoveRef<typename List_Select<Args
argument_list|,
literal|2
argument|>::Value>::Type *>(arg[
literal|3
argument|])
argument_list|,
argument|*reinterpret_cast<typename RemoveRef<typename List_Select<Args
argument_list|,
literal|3
argument|>::Value>::Type *>(arg[
literal|4
argument|])
argument_list|,
argument|*reinterpret_cast<typename RemoveRef<typename List_Select<Args
argument_list|,
literal|4
argument|>::Value>::Type *>(arg[
literal|5
argument|])
argument_list|)
block|,
name|ApplyReturnValue
operator|<
name|R
operator|>
operator|(
name|arg
index|[
literal|0
index|]
operator|)
block|;         }
block|}
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|Function
operator|>
expr|struct
name|Functor
operator|<
name|Function
operator|,
literal|6
operator|>
block|{
name|template
operator|<
name|typename
name|Args
block|,
name|typename
name|R
operator|>
specifier|static
name|void
name|call
argument_list|(
argument|Function&f
argument_list|,
argument|void *
argument_list|,
argument|void **arg
argument_list|)
block|{
name|f
argument_list|(
argument|*reinterpret_cast<typename RemoveRef<typename List_Select<Args
argument_list|,
literal|0
argument|>::Value>::Type *>(arg[
literal|1
argument|])
argument_list|,
argument|*reinterpret_cast<typename RemoveRef<typename List_Select<Args
argument_list|,
literal|1
argument|>::Value>::Type *>(arg[
literal|2
argument|])
argument_list|,
argument|*reinterpret_cast<typename RemoveRef<typename List_Select<Args
argument_list|,
literal|2
argument|>::Value>::Type *>(arg[
literal|3
argument|])
argument_list|,
argument|*reinterpret_cast<typename RemoveRef<typename List_Select<Args
argument_list|,
literal|3
argument|>::Value>::Type *>(arg[
literal|4
argument|])
argument_list|,
argument|*reinterpret_cast<typename RemoveRef<typename List_Select<Args
argument_list|,
literal|4
argument|>::Value>::Type *>(arg[
literal|5
argument|])
argument_list|,
argument|*reinterpret_cast<typename RemoveRef<typename List_Select<Args
argument_list|,
literal|5
argument|>::Value>::Type *>(arg[
literal|6
argument|])
argument_list|)
block|,
name|ApplyReturnValue
operator|<
name|R
operator|>
operator|(
name|arg
index|[
literal|0
index|]
operator|)
block|;         }
block|}
expr_stmt|;
end_expr_stmt
begin_else
else|#
directive|else
end_else
begin_expr_stmt
name|template
operator|<
name|int
operator|...
operator|>
expr|struct
name|IndexesList
block|{}
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|IndexList
operator|,
name|int
name|Right
operator|>
expr|struct
name|IndexesAppend
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|int
operator|...
name|Left
operator|,
name|int
name|Right
operator|>
expr|struct
name|IndexesAppend
operator|<
name|IndexesList
operator|<
name|Left
operator|...
operator|>
operator|,
name|Right
operator|>
block|{
typedef|typedef
name|IndexesList
operator|<
name|Left
operator|...
operator|,
name|Right
operator|>
name|Value
expr_stmt|;
block|}
end_expr_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_expr_stmt
name|template
operator|<
name|int
name|N
operator|>
expr|struct
name|Indexes
block|{
typedef|typedef
name|typename
name|IndexesAppend
operator|<
name|typename
name|Indexes
operator|<
name|N
operator|-
literal|1
operator|>
operator|::
name|Value
operator|,
name|N
operator|-
literal|1
operator|>
operator|::
name|Value
name|Value
expr_stmt|;
block|}
end_expr_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_expr_stmt
name|template
operator|<
operator|>
expr|struct
name|Indexes
operator|<
literal|0
operator|>
block|{
typedef|typedef
name|IndexesList
operator|<
operator|>
name|Value
expr_stmt|;
block|}
end_expr_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|Func
operator|>
expr|struct
name|FunctionPointer
block|{ enum
block|{
name|ArgumentCount
operator|=
operator|-
literal|1
block|}
block|; }
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
operator|,
name|typename
operator|,
name|typename
operator|,
name|typename
operator|>
expr|struct
name|FunctorCall
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|int
operator|...
name|I
operator|,
name|typename
operator|...
name|SignalArgs
operator|,
name|typename
name|R
operator|,
name|typename
name|Function
operator|>
expr|struct
name|FunctorCall
operator|<
name|IndexesList
operator|<
name|I
operator|...
operator|>
operator|,
name|List
operator|<
name|SignalArgs
operator|...
operator|>
operator|,
name|R
operator|,
name|Function
operator|>
block|{
specifier|static
name|void
name|call
argument_list|(
argument|Function f
argument_list|,
argument|void **arg
argument_list|)
block|{
name|f
argument_list|(
operator|(
operator|*
name|reinterpret_cast
operator|<
name|typename
name|RemoveRef
operator|<
name|SignalArgs
operator|>
operator|::
name|Type
operator|*
operator|>
operator|(
name|arg
index|[
name|I
operator|+
literal|1
index|]
operator|)
operator|)
operator|...
argument_list|)
block|,
name|ApplyReturnValue
operator|<
name|R
operator|>
operator|(
name|arg
index|[
literal|0
index|]
operator|)
block|;         }
block|}
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|int
operator|...
name|I
operator|,
name|typename
operator|...
name|SignalArgs
operator|,
name|typename
name|R
operator|,
name|typename
operator|...
name|SlotArgs
operator|,
name|typename
name|SlotRet
operator|,
name|class
name|Obj
operator|>
expr|struct
name|FunctorCall
operator|<
name|IndexesList
operator|<
name|I
operator|...
operator|>
operator|,
name|List
operator|<
name|SignalArgs
operator|...
operator|>
operator|,
name|R
operator|,
name|SlotRet
argument_list|(
name|Obj
operator|::
operator|*
argument_list|)
argument_list|(
name|SlotArgs
operator|...
argument_list|)
operator|>
block|{
specifier|static
name|void
name|call
argument_list|(
argument|SlotRet (Obj::*f)(SlotArgs...)
argument_list|,
argument|Obj *o
argument_list|,
argument|void **arg
argument_list|)
block|{
operator|(
name|o
operator|->*
name|f
operator|)
operator|(
operator|(
operator|*
name|reinterpret_cast
operator|<
name|typename
name|RemoveRef
operator|<
name|SignalArgs
operator|>
operator|::
name|Type
operator|*
operator|>
operator|(
name|arg
index|[
name|I
operator|+
literal|1
index|]
operator|)
operator|)
operator|...
operator|)
block|,
name|ApplyReturnValue
operator|<
name|R
operator|>
operator|(
name|arg
index|[
literal|0
index|]
operator|)
block|;         }
block|}
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|int
operator|...
name|I
operator|,
name|typename
operator|...
name|SignalArgs
operator|,
name|typename
name|R
operator|,
name|typename
operator|...
name|SlotArgs
operator|,
name|typename
name|SlotRet
operator|,
name|class
name|Obj
operator|>
expr|struct
name|FunctorCall
operator|<
name|IndexesList
operator|<
name|I
operator|...
operator|>
operator|,
name|List
operator|<
name|SignalArgs
operator|...
operator|>
operator|,
name|R
operator|,
name|SlotRet
argument_list|(
argument|Obj::*
argument_list|)
operator|(
name|SlotArgs
operator|...
operator|)
specifier|const
operator|>
block|{
specifier|static
name|void
name|call
argument_list|(
argument|SlotRet (Obj::*f)(SlotArgs...) const
argument_list|,
argument|Obj *o
argument_list|,
argument|void **arg
argument_list|)
block|{
operator|(
name|o
operator|->*
name|f
operator|)
operator|(
operator|(
operator|*
name|reinterpret_cast
operator|<
name|typename
name|RemoveRef
operator|<
name|SignalArgs
operator|>
operator|::
name|Type
operator|*
operator|>
operator|(
name|arg
index|[
name|I
operator|+
literal|1
index|]
operator|)
operator|)
operator|...
operator|)
block|,
name|ApplyReturnValue
operator|<
name|R
operator|>
operator|(
name|arg
index|[
literal|0
index|]
operator|)
block|;         }
block|}
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|class
name|Obj
operator|,
name|typename
name|Ret
operator|,
name|typename
operator|...
name|Args
operator|>
expr|struct
name|FunctionPointer
operator|<
name|Ret
argument_list|(
name|Obj
operator|::
operator|*
argument_list|)
argument_list|(
name|Args
operator|...
argument_list|)
operator|>
block|{
typedef|typedef
name|Obj
name|Object
typedef|;
end_expr_stmt
begin_typedef
typedef|typedef
name|List
operator|<
name|Args
operator|...
operator|>
name|Arguments
expr_stmt|;
end_typedef
begin_typedef
typedef|typedef
name|Ret
name|ReturnType
typedef|;
end_typedef
begin_typedef
typedef|typedef
name|Ret
argument_list|(
name|Obj
operator|::
operator|*
name|Function
argument_list|)
argument_list|(
name|Args
operator|...
argument_list|)
expr_stmt|;
end_typedef
begin_enum
enum|enum
block|{
name|ArgumentCount
init|=
expr|sizeof
operator|...
operator|(
name|Args
operator|)
block|}
enum|;
end_enum
begin_expr_stmt
name|template
operator|<
name|typename
name|SignalArgs
operator|,
name|typename
name|R
operator|>
specifier|static
name|void
name|call
argument_list|(
argument|Function f
argument_list|,
argument|Obj *o
argument_list|,
argument|void **arg
argument_list|)
block|{
name|FunctorCall
operator|<
name|typename
name|Indexes
operator|<
name|ArgumentCount
operator|>
operator|::
name|Value
block|,
name|SignalArgs
block|,
name|R
block|,
name|Function
operator|>
operator|::
name|call
argument_list|(
name|f
argument_list|,
name|o
argument_list|,
name|arg
argument_list|)
block|;         }
end_expr_stmt
begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|Obj
operator|,
name|typename
name|Ret
operator|,
name|typename
operator|...
name|Args
operator|>
expr|struct
name|FunctionPointer
operator|<
name|Ret
argument_list|(
argument|Obj::*
argument_list|)
operator|(
name|Args
operator|...
operator|)
specifier|const
operator|>
block|{
typedef|typedef
name|Obj
name|Object
typedef|;
end_expr_stmt
begin_typedef
typedef|typedef
name|List
operator|<
name|Args
operator|...
operator|>
name|Arguments
expr_stmt|;
end_typedef
begin_typedef
typedef|typedef
name|Ret
name|ReturnType
typedef|;
end_typedef
begin_typedef
typedef|typedef
name|Ret
argument_list|(
argument|Obj::*Function
argument_list|)
operator|(
name|Args
operator|...
operator|)
specifier|const
expr_stmt|;
end_typedef
begin_enum
enum|enum
block|{
name|ArgumentCount
init|=
expr|sizeof
operator|...
operator|(
name|Args
operator|)
block|}
enum|;
end_enum
begin_expr_stmt
name|template
operator|<
name|typename
name|SignalArgs
operator|,
name|typename
name|R
operator|>
specifier|static
name|void
name|call
argument_list|(
argument|Function f
argument_list|,
argument|Obj *o
argument_list|,
argument|void **arg
argument_list|)
block|{
name|FunctorCall
operator|<
name|typename
name|Indexes
operator|<
name|ArgumentCount
operator|>
operator|::
name|Value
block|,
name|SignalArgs
block|,
name|R
block|,
name|Function
operator|>
operator|::
name|call
argument_list|(
name|f
argument_list|,
name|o
argument_list|,
name|arg
argument_list|)
block|;         }
end_expr_stmt
begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|Ret
operator|,
name|typename
operator|...
name|Args
operator|>
expr|struct
name|FunctionPointer
operator|<
name|Ret
argument_list|(
operator|*
argument_list|)
argument_list|(
name|Args
operator|...
argument_list|)
operator|>
block|{
typedef|typedef
name|List
operator|<
name|Args
operator|...
operator|>
name|Arguments
expr_stmt|;
end_expr_stmt
begin_typedef
typedef|typedef
name|Ret
name|ReturnType
typedef|;
end_typedef
begin_typedef
typedef|typedef
name|Ret
function_decl|(
modifier|*
name|Function
function_decl|)
parameter_list|(
name|Args
modifier|...
parameter_list|)
function_decl|;
end_typedef
begin_enum
enum|enum
block|{
name|ArgumentCount
init|=
expr|sizeof
operator|...
operator|(
name|Args
operator|)
block|}
enum|;
end_enum
begin_expr_stmt
name|template
operator|<
name|typename
name|SignalArgs
operator|,
name|typename
name|R
operator|>
specifier|static
name|void
name|call
argument_list|(
argument|Function f
argument_list|,
argument|void *
argument_list|,
argument|void **arg
argument_list|)
block|{
name|FunctorCall
operator|<
name|typename
name|Indexes
operator|<
name|ArgumentCount
operator|>
operator|::
name|Value
block|,
name|SignalArgs
block|,
name|R
block|,
name|Function
operator|>
operator|::
name|call
argument_list|(
name|f
argument_list|,
name|arg
argument_list|)
block|;         }
end_expr_stmt
begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|Function
operator|,
name|int
name|N
operator|>
expr|struct
name|Functor
block|{
name|template
operator|<
name|typename
name|SignalArgs
block|,
name|typename
name|R
operator|>
specifier|static
name|void
name|call
argument_list|(
argument|Function&f
argument_list|,
argument|void *
argument_list|,
argument|void **arg
argument_list|)
block|{
name|FunctorCall
operator|<
name|typename
name|Indexes
operator|<
name|N
operator|>
operator|::
name|Value
block|,
name|SignalArgs
block|,
name|R
block|,
name|Function
operator|>
operator|::
name|call
argument_list|(
name|f
argument_list|,
name|arg
argument_list|)
block|;         }
block|}
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*        Logic that check if the arguments of the slot matches the argument of the signal.        To be used like this:        Q_STATIC_ASSERT(CheckCompatibleArguments<FunctionPointer<Signal>::Arguments, FunctionPointer<Slot>::Arguments>::value)     */
end_comment
begin_expr_stmt
name|template
operator|<
name|typename
name|A1
operator|,
name|typename
name|A2
operator|>
expr|struct
name|AreArgumentsCompatible
block|{
specifier|static
name|int
name|test
argument_list|(
name|A2
argument_list|)
block|;
specifier|static
name|char
name|test
argument_list|(
operator|...
argument_list|)
block|;
specifier|static
name|A1
name|dummy
argument_list|()
block|;         enum
block|{
name|value
operator|=
sizeof|sizeof
argument_list|(
name|test
argument_list|(
name|dummy
argument_list|()
argument_list|)
argument_list|)
operator|==
expr|sizeof
operator|(
name|int
operator|)
block|}
block|;     }
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|A1
operator|,
name|typename
name|A2
operator|>
expr|struct
name|AreArgumentsCompatible
operator|<
name|A1
operator|,
name|A2
operator|&
operator|>
block|{ enum
block|{
name|value
operator|=
name|false
block|}
block|; }
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|A
operator|>
expr|struct
name|AreArgumentsCompatible
operator|<
name|A
operator|&
operator|,
name|A
operator|&
operator|>
block|{ enum
block|{
name|value
operator|=
name|true
block|}
block|; }
expr_stmt|;
end_expr_stmt
begin_comment
comment|// void as a return value
end_comment
begin_expr_stmt
name|template
operator|<
name|typename
name|A
operator|>
expr|struct
name|AreArgumentsCompatible
operator|<
name|void
operator|,
name|A
operator|>
block|{ enum
block|{
name|value
operator|=
name|true
block|}
block|; }
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|A
operator|>
expr|struct
name|AreArgumentsCompatible
operator|<
name|A
operator|,
name|void
operator|>
block|{ enum
block|{
name|value
operator|=
name|true
block|}
block|; }
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
operator|>
expr|struct
name|AreArgumentsCompatible
operator|<
name|void
operator|,
name|void
operator|>
block|{ enum
block|{
name|value
operator|=
name|true
block|}
block|; }
expr_stmt|;
end_expr_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|Q_COMPILER_VARIADIC_TEMPLATES
end_ifndef
begin_expr_stmt
name|template
operator|<
name|typename
name|List1
operator|,
name|typename
name|List2
operator|>
expr|struct
name|CheckCompatibleArguments
block|{ enum
block|{
name|value
operator|=
name|false
block|}
block|; }
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
operator|>
expr|struct
name|CheckCompatibleArguments
operator|<
name|void
operator|,
name|void
operator|>
block|{ enum
block|{
name|value
operator|=
name|true
block|}
block|; }
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|List1
operator|>
expr|struct
name|CheckCompatibleArguments
operator|<
name|List1
operator|,
name|void
operator|>
block|{ enum
block|{
name|value
operator|=
name|true
block|}
block|; }
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|Arg1
operator|,
name|typename
name|Arg2
operator|,
name|typename
name|Tail1
operator|,
name|typename
name|Tail2
operator|>
expr|struct
name|CheckCompatibleArguments
operator|<
name|List
operator|<
name|Arg1
operator|,
name|Tail1
operator|>
operator|,
name|List
operator|<
name|Arg2
operator|,
name|Tail2
operator|>
expr|>
block|{         enum
block|{
name|value
operator|=
name|AreArgumentsCompatible
operator|<
name|typename
name|RemoveConstRef
operator|<
name|Arg1
operator|>
operator|::
name|Type
block|,
name|typename
name|RemoveConstRef
operator|<
name|Arg2
operator|>
operator|::
name|Type
operator|>
operator|::
name|value
operator|&&
name|CheckCompatibleArguments
operator|<
name|Tail1
block|,
name|Tail2
operator|>
operator|::
name|value
block|}
block|;     }
expr_stmt|;
end_expr_stmt
begin_else
else|#
directive|else
end_else
begin_expr_stmt
name|template
operator|<
name|typename
name|List1
operator|,
name|typename
name|List2
operator|>
expr|struct
name|CheckCompatibleArguments
block|{ enum
block|{
name|value
operator|=
name|false
block|}
block|; }
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
operator|>
expr|struct
name|CheckCompatibleArguments
operator|<
name|List
operator|<
operator|>
operator|,
name|List
operator|<
operator|>>
block|{ enum
block|{
name|value
operator|=
name|true
block|}
block|; }
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|List1
operator|>
expr|struct
name|CheckCompatibleArguments
operator|<
name|List1
operator|,
name|List
operator|<
operator|>>
block|{ enum
block|{
name|value
operator|=
name|true
block|}
block|; }
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|Arg1
operator|,
name|typename
name|Arg2
operator|,
name|typename
operator|...
name|Tail1
operator|,
name|typename
operator|...
name|Tail2
operator|>
expr|struct
name|CheckCompatibleArguments
operator|<
name|List
operator|<
name|Arg1
operator|,
name|Tail1
operator|...
operator|>
operator|,
name|List
operator|<
name|Arg2
operator|,
name|Tail2
operator|...
operator|>>
block|{         enum
block|{
name|value
operator|=
name|AreArgumentsCompatible
operator|<
name|typename
name|RemoveConstRef
operator|<
name|Arg1
operator|>
operator|::
name|Type
block|,
name|typename
name|RemoveConstRef
operator|<
name|Arg2
operator|>
operator|::
name|Type
operator|>
operator|::
name|value
operator|&&
name|CheckCompatibleArguments
operator|<
name|List
operator|<
name|Tail1
operator|...
operator|>
block|,
name|List
operator|<
name|Tail2
operator|...
operator|>>
operator|::
name|value
block|}
block|;     }
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_macro
unit|}   QT_END_NAMESPACE
name|QT_END_HEADER
end_macro
begin_endif
endif|#
directive|endif
end_endif
end_unit
