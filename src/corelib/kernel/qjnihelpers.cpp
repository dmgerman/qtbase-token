begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qjnihelpers_p.h"
end_include
begin_include
include|#
directive|include
file|"qmutex.h"
end_include
begin_include
include|#
directive|include
file|"qlist.h"
end_include
begin_include
include|#
directive|include
file|"qsemaphore.h"
end_include
begin_include
include|#
directive|include
file|"qvector.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/qrunnable.h>
end_include
begin_include
include|#
directive|include
file|<deque>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|g_javaVM
specifier|static
name|JavaVM
modifier|*
name|g_javaVM
init|=
name|Q_NULLPTR
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|g_jActivity
specifier|static
name|jobject
name|g_jActivity
init|=
name|Q_NULLPTR
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|g_jClassLoader
specifier|static
name|jobject
name|g_jClassLoader
init|=
name|Q_NULLPTR
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|g_androidSdkVersion
specifier|static
name|jint
name|g_androidSdkVersion
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|g_jNativeClass
specifier|static
name|jclass
name|g_jNativeClass
init|=
name|Q_NULLPTR
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|g_runPendingCppRunnablesMethodID
specifier|static
name|jmethodID
name|g_runPendingCppRunnablesMethodID
init|=
name|Q_NULLPTR
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|Q_GLOBAL_STATIC
argument_list|(
name|std
operator|::
name|deque
argument_list|<
name|QtAndroidPrivate
operator|::
name|Runnable
argument_list|>
argument_list|,
name|g_pendingRunnables
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_GLOBAL_STATIC
argument_list|(
name|QMutex
argument_list|,
name|g_pendingRunnablesMutex
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// function called from Java from Android UI thread
end_comment
begin_function
DECL|function|runPendingCppRunnables
specifier|static
name|void
name|runPendingCppRunnables
parameter_list|(
name|JNIEnv
modifier|*
comment|/*env*/
parameter_list|,
name|jobject
comment|/*obj*/
parameter_list|)
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
comment|// run all posted runnables
name|g_pendingRunnablesMutex
operator|->
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
name|g_pendingRunnables
operator|->
name|empty
argument_list|()
condition|)
block|{
name|g_pendingRunnablesMutex
operator|->
name|unlock
argument_list|()
expr_stmt|;
break|break;
block|}
name|QtAndroidPrivate
operator|::
name|Runnable
name|runnable
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|g_pendingRunnables
operator|->
name|front
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|g_pendingRunnables
operator|->
name|pop_front
argument_list|()
expr_stmt|;
name|g_pendingRunnablesMutex
operator|->
name|unlock
argument_list|()
expr_stmt|;
name|runnable
argument_list|()
expr_stmt|;
comment|// run it outside the sync block!
block|}
block|}
end_function
begin_namespace
namespace|namespace
block|{
DECL|struct|GenericMotionEventListeners
struct|struct
name|GenericMotionEventListeners
block|{
DECL|member|mutex
name|QMutex
name|mutex
decl_stmt|;
DECL|member|listeners
name|QVector
argument_list|<
name|QtAndroidPrivate
operator|::
name|GenericMotionEventListener
operator|*
argument_list|>
name|listeners
decl_stmt|;
block|}
struct|;
block|}
end_namespace
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|GenericMotionEventListeners
argument_list|,
argument|g_genericMotionEventListeners
argument_list|)
end_macro
begin_function
DECL|function|dispatchGenericMotionEvent
specifier|static
name|jboolean
name|dispatchGenericMotionEvent
parameter_list|(
name|JNIEnv
modifier|*
parameter_list|,
name|jclass
parameter_list|,
name|jobject
name|event
parameter_list|)
block|{
name|jboolean
name|ret
init|=
name|JNI_FALSE
decl_stmt|;
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|g_genericMotionEventListeners
argument_list|()
operator|->
name|mutex
argument_list|)
decl_stmt|;
for|for
control|(
name|auto
operator|*
name|listener
operator|:
name|qAsConst
argument_list|(
name|g_genericMotionEventListeners
argument_list|()
operator|->
name|listeners
argument_list|)
control|)
name|ret
operator||=
name|listener
operator|->
name|handleGenericMotionEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_namespace
namespace|namespace
block|{
DECL|struct|KeyEventListeners
struct|struct
name|KeyEventListeners
block|{
DECL|member|mutex
name|QMutex
name|mutex
decl_stmt|;
DECL|member|listeners
name|QVector
argument_list|<
name|QtAndroidPrivate
operator|::
name|KeyEventListener
operator|*
argument_list|>
name|listeners
decl_stmt|;
block|}
struct|;
block|}
end_namespace
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|KeyEventListeners
argument_list|,
argument|g_keyEventListeners
argument_list|)
end_macro
begin_function
DECL|function|dispatchKeyEvent
specifier|static
name|jboolean
name|dispatchKeyEvent
parameter_list|(
name|JNIEnv
modifier|*
parameter_list|,
name|jclass
parameter_list|,
name|jobject
name|event
parameter_list|)
block|{
name|jboolean
name|ret
init|=
name|JNI_FALSE
decl_stmt|;
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|g_keyEventListeners
argument_list|()
operator|->
name|mutex
argument_list|)
decl_stmt|;
for|for
control|(
name|auto
operator|*
name|listener
operator|:
name|qAsConst
argument_list|(
name|g_keyEventListeners
argument_list|()
operator|->
name|listeners
argument_list|)
control|)
name|ret
operator||=
name|listener
operator|->
name|handleKeyEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_namespace
namespace|namespace
block|{
DECL|class|ActivityResultListeners
class|class
name|ActivityResultListeners
block|{
public|public:
DECL|member|mutex
name|QMutex
name|mutex
decl_stmt|;
DECL|member|listeners
name|QList
argument_list|<
name|QtAndroidPrivate
operator|::
name|ActivityResultListener
operator|*
argument_list|>
name|listeners
decl_stmt|;
block|}
class|;
block|}
end_namespace
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|ActivityResultListeners
argument_list|,
argument|g_activityResultListeners
argument_list|)
end_macro
begin_function
DECL|function|registerActivityResultListener
name|void
name|QtAndroidPrivate
operator|::
name|registerActivityResultListener
parameter_list|(
name|ActivityResultListener
modifier|*
name|listener
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|g_activityResultListeners
argument_list|()
operator|->
name|mutex
argument_list|)
decl_stmt|;
name|g_activityResultListeners
argument_list|()
operator|->
name|listeners
operator|.
name|append
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|unregisterActivityResultListener
name|void
name|QtAndroidPrivate
operator|::
name|unregisterActivityResultListener
parameter_list|(
name|ActivityResultListener
modifier|*
name|listener
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|g_activityResultListeners
argument_list|()
operator|->
name|mutex
argument_list|)
decl_stmt|;
name|g_activityResultListeners
argument_list|()
operator|->
name|listeners
operator|.
name|removeAll
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleActivityResult
name|void
name|QtAndroidPrivate
operator|::
name|handleActivityResult
parameter_list|(
name|jint
name|requestCode
parameter_list|,
name|jint
name|resultCode
parameter_list|,
name|jobject
name|data
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|g_activityResultListeners
argument_list|()
operator|->
name|mutex
argument_list|)
decl_stmt|;
specifier|const
name|QList
argument_list|<
name|QtAndroidPrivate
operator|::
name|ActivityResultListener
operator|*
argument_list|>
modifier|&
name|listeners
init|=
name|g_activityResultListeners
argument_list|()
operator|->
name|listeners
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|listeners
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|listeners
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|handleActivityResult
argument_list|(
name|requestCode
argument_list|,
name|resultCode
argument_list|,
name|data
argument_list|)
condition|)
break|break;
block|}
block|}
end_function
begin_namespace
namespace|namespace
block|{
DECL|class|NewIntentListeners
class|class
name|NewIntentListeners
block|{
public|public:
DECL|member|mutex
name|QMutex
name|mutex
decl_stmt|;
DECL|member|listeners
name|QList
argument_list|<
name|QtAndroidPrivate
operator|::
name|NewIntentListener
operator|*
argument_list|>
name|listeners
decl_stmt|;
block|}
class|;
block|}
end_namespace
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|NewIntentListeners
argument_list|,
argument|g_newIntentListeners
argument_list|)
end_macro
begin_function
DECL|function|registerNewIntentListener
name|void
name|QtAndroidPrivate
operator|::
name|registerNewIntentListener
parameter_list|(
name|NewIntentListener
modifier|*
name|listener
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|g_newIntentListeners
argument_list|()
operator|->
name|mutex
argument_list|)
decl_stmt|;
name|g_newIntentListeners
argument_list|()
operator|->
name|listeners
operator|.
name|append
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|unregisterNewIntentListener
name|void
name|QtAndroidPrivate
operator|::
name|unregisterNewIntentListener
parameter_list|(
name|NewIntentListener
modifier|*
name|listener
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|g_newIntentListeners
argument_list|()
operator|->
name|mutex
argument_list|)
decl_stmt|;
name|g_newIntentListeners
argument_list|()
operator|->
name|listeners
operator|.
name|removeAll
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleNewIntent
name|void
name|QtAndroidPrivate
operator|::
name|handleNewIntent
parameter_list|(
name|JNIEnv
modifier|*
name|env
parameter_list|,
name|jobject
name|intent
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|g_newIntentListeners
argument_list|()
operator|->
name|mutex
argument_list|)
decl_stmt|;
specifier|const
name|QList
argument_list|<
name|QtAndroidPrivate
operator|::
name|NewIntentListener
operator|*
argument_list|>
modifier|&
name|listeners
init|=
name|g_newIntentListeners
argument_list|()
operator|->
name|listeners
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|listeners
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|listeners
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|handleNewIntent
argument_list|(
name|env
argument_list|,
name|intent
argument_list|)
condition|)
break|break;
block|}
block|}
end_function
begin_namespace
namespace|namespace
block|{
DECL|class|ResumePauseListeners
class|class
name|ResumePauseListeners
block|{
public|public:
DECL|member|mutex
name|QMutex
name|mutex
decl_stmt|;
DECL|member|listeners
name|QList
argument_list|<
name|QtAndroidPrivate
operator|::
name|ResumePauseListener
operator|*
argument_list|>
name|listeners
decl_stmt|;
block|}
class|;
block|}
end_namespace
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|ResumePauseListeners
argument_list|,
argument|g_resumePauseListeners
argument_list|)
end_macro
begin_function
DECL|function|registerResumePauseListener
name|void
name|QtAndroidPrivate
operator|::
name|registerResumePauseListener
parameter_list|(
name|ResumePauseListener
modifier|*
name|listener
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|g_resumePauseListeners
argument_list|()
operator|->
name|mutex
argument_list|)
decl_stmt|;
name|g_resumePauseListeners
argument_list|()
operator|->
name|listeners
operator|.
name|append
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|unregisterResumePauseListener
name|void
name|QtAndroidPrivate
operator|::
name|unregisterResumePauseListener
parameter_list|(
name|ResumePauseListener
modifier|*
name|listener
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|g_resumePauseListeners
argument_list|()
operator|->
name|mutex
argument_list|)
decl_stmt|;
name|g_resumePauseListeners
argument_list|()
operator|->
name|listeners
operator|.
name|removeAll
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handlePause
name|void
name|QtAndroidPrivate
operator|::
name|handlePause
parameter_list|()
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|g_resumePauseListeners
argument_list|()
operator|->
name|mutex
argument_list|)
decl_stmt|;
specifier|const
name|QList
argument_list|<
name|QtAndroidPrivate
operator|::
name|ResumePauseListener
operator|*
argument_list|>
modifier|&
name|listeners
init|=
name|g_resumePauseListeners
argument_list|()
operator|->
name|listeners
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|listeners
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|listeners
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|handlePause
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleResume
name|void
name|QtAndroidPrivate
operator|::
name|handleResume
parameter_list|()
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|g_resumePauseListeners
argument_list|()
operator|->
name|mutex
argument_list|)
decl_stmt|;
specifier|const
name|QList
argument_list|<
name|QtAndroidPrivate
operator|::
name|ResumePauseListener
operator|*
argument_list|>
modifier|&
name|listeners
init|=
name|g_resumePauseListeners
argument_list|()
operator|->
name|listeners
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|listeners
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|listeners
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|handleResume
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|exceptionCheck
specifier|static
specifier|inline
name|bool
name|exceptionCheck
parameter_list|(
name|JNIEnv
modifier|*
name|env
parameter_list|)
block|{
if|if
condition|(
name|env
operator|->
name|ExceptionCheck
argument_list|()
condition|)
block|{
ifdef|#
directive|ifdef
name|QT_DEBUG
name|env
operator|->
name|ExceptionDescribe
argument_list|()
expr_stmt|;
endif|#
directive|endif
comment|// QT_DEBUG
name|env
operator|->
name|ExceptionClear
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|setAndroidSdkVersion
specifier|static
name|void
name|setAndroidSdkVersion
parameter_list|(
name|JNIEnv
modifier|*
name|env
parameter_list|)
block|{
name|jclass
name|androidVersionClass
init|=
name|env
operator|->
name|FindClass
argument_list|(
literal|"android/os/Build$VERSION"
argument_list|)
decl_stmt|;
if|if
condition|(
name|exceptionCheck
argument_list|(
name|env
argument_list|)
condition|)
return|return;
name|jfieldID
name|androidSDKFieldID
init|=
name|env
operator|->
name|GetStaticFieldID
argument_list|(
name|androidVersionClass
argument_list|,
literal|"SDK_INT"
argument_list|,
literal|"I"
argument_list|)
decl_stmt|;
if|if
condition|(
name|exceptionCheck
argument_list|(
name|env
argument_list|)
condition|)
return|return;
name|g_androidSdkVersion
operator|=
name|env
operator|->
name|GetStaticIntField
argument_list|(
name|androidVersionClass
argument_list|,
name|androidSDKFieldID
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|initJNI
name|jint
name|QtAndroidPrivate
operator|::
name|initJNI
parameter_list|(
name|JavaVM
modifier|*
name|vm
parameter_list|,
name|JNIEnv
modifier|*
name|env
parameter_list|)
block|{
name|jclass
name|jQtNative
init|=
name|env
operator|->
name|FindClass
argument_list|(
literal|"org/qtproject/qt5/android/QtNative"
argument_list|)
decl_stmt|;
if|if
condition|(
name|exceptionCheck
argument_list|(
name|env
argument_list|)
condition|)
return|return
name|JNI_ERR
return|;
name|jmethodID
name|activityMethodID
init|=
name|env
operator|->
name|GetStaticMethodID
argument_list|(
name|jQtNative
argument_list|,
literal|"activity"
argument_list|,
literal|"()Landroid/app/Activity;"
argument_list|)
decl_stmt|;
if|if
condition|(
name|exceptionCheck
argument_list|(
name|env
argument_list|)
condition|)
return|return
name|JNI_ERR
return|;
name|jobject
name|activity
init|=
name|env
operator|->
name|CallStaticObjectMethod
argument_list|(
name|jQtNative
argument_list|,
name|activityMethodID
argument_list|)
decl_stmt|;
if|if
condition|(
name|exceptionCheck
argument_list|(
name|env
argument_list|)
condition|)
return|return
name|JNI_ERR
return|;
name|jmethodID
name|classLoaderMethodID
init|=
name|env
operator|->
name|GetStaticMethodID
argument_list|(
name|jQtNative
argument_list|,
literal|"classLoader"
argument_list|,
literal|"()Ljava/lang/ClassLoader;"
argument_list|)
decl_stmt|;
if|if
condition|(
name|exceptionCheck
argument_list|(
name|env
argument_list|)
condition|)
return|return
name|JNI_ERR
return|;
name|jobject
name|classLoader
init|=
name|env
operator|->
name|CallStaticObjectMethod
argument_list|(
name|jQtNative
argument_list|,
name|classLoaderMethodID
argument_list|)
decl_stmt|;
if|if
condition|(
name|exceptionCheck
argument_list|(
name|env
argument_list|)
condition|)
return|return
name|JNI_ERR
return|;
name|setAndroidSdkVersion
argument_list|(
name|env
argument_list|)
expr_stmt|;
name|g_jClassLoader
operator|=
name|env
operator|->
name|NewGlobalRef
argument_list|(
name|classLoader
argument_list|)
expr_stmt|;
name|env
operator|->
name|DeleteLocalRef
argument_list|(
name|classLoader
argument_list|)
expr_stmt|;
name|g_jActivity
operator|=
name|env
operator|->
name|NewGlobalRef
argument_list|(
name|activity
argument_list|)
expr_stmt|;
name|env
operator|->
name|DeleteLocalRef
argument_list|(
name|activity
argument_list|)
expr_stmt|;
name|g_javaVM
operator|=
name|vm
expr_stmt|;
specifier|static
specifier|const
name|JNINativeMethod
name|methods
index|[]
init|=
block|{
block|{
literal|"runPendingCppRunnables"
block|,
literal|"()V"
block|,
expr|reinterpret_cast
operator|<
name|void
operator|*
operator|>
operator|(
name|runPendingCppRunnables
operator|)
block|}
block|,
block|{
literal|"dispatchGenericMotionEvent"
block|,
literal|"(Landroid/view/MotionEvent;)Z"
block|,
expr|reinterpret_cast
operator|<
name|void
operator|*
operator|>
operator|(
name|dispatchGenericMotionEvent
operator|)
block|}
block|,
block|{
literal|"dispatchKeyEvent"
block|,
literal|"(Landroid/view/KeyEvent;)Z"
block|,
expr|reinterpret_cast
operator|<
name|void
operator|*
operator|>
operator|(
name|dispatchKeyEvent
operator|)
block|}
block|,     }
decl_stmt|;
specifier|const
name|bool
name|regOk
init|=
operator|(
name|env
operator|->
name|RegisterNatives
argument_list|(
name|jQtNative
argument_list|,
name|methods
argument_list|,
sizeof|sizeof
argument_list|(
name|methods
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|methods
index|[
literal|0
index|]
argument_list|)
argument_list|)
operator|==
name|JNI_OK
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|regOk
operator|&&
name|exceptionCheck
argument_list|(
name|env
argument_list|)
condition|)
return|return
name|JNI_ERR
return|;
name|g_runPendingCppRunnablesMethodID
operator|=
name|env
operator|->
name|GetStaticMethodID
argument_list|(
name|jQtNative
argument_list|,
literal|"runPendingCppRunnablesOnUiThread"
argument_list|,
literal|"()V"
argument_list|)
expr_stmt|;
name|g_jNativeClass
operator|=
cast|static_cast
argument_list|<
name|jclass
argument_list|>
argument_list|(
name|env
operator|->
name|NewGlobalRef
argument_list|(
name|jQtNative
argument_list|)
argument_list|)
expr_stmt|;
name|env
operator|->
name|DeleteLocalRef
argument_list|(
name|jQtNative
argument_list|)
expr_stmt|;
return|return
name|JNI_OK
return|;
block|}
end_function
begin_function
DECL|function|activity
name|jobject
name|QtAndroidPrivate
operator|::
name|activity
parameter_list|()
block|{
return|return
name|g_jActivity
return|;
block|}
end_function
begin_function
DECL|function|javaVM
name|JavaVM
modifier|*
name|QtAndroidPrivate
operator|::
name|javaVM
parameter_list|()
block|{
return|return
name|g_javaVM
return|;
block|}
end_function
begin_function
DECL|function|classLoader
name|jobject
name|QtAndroidPrivate
operator|::
name|classLoader
parameter_list|()
block|{
return|return
name|g_jClassLoader
return|;
block|}
end_function
begin_function
DECL|function|androidSdkVersion
name|jint
name|QtAndroidPrivate
operator|::
name|androidSdkVersion
parameter_list|()
block|{
return|return
name|g_androidSdkVersion
return|;
block|}
end_function
begin_function
DECL|function|runOnUiThread
name|void
name|QtAndroidPrivate
operator|::
name|runOnUiThread
parameter_list|(
name|QRunnable
modifier|*
name|runnable
parameter_list|,
name|JNIEnv
modifier|*
name|env
parameter_list|)
block|{
name|runOnAndroidThread
argument_list|(
capture|[
name|runnable
capture|]
parameter_list|()
block|{
name|runnable
operator|->
name|run
argument_list|()
expr_stmt|;
if|if
condition|(
name|runnable
operator|->
name|autoDelete
argument_list|()
condition|)
operator|delete
name|runnable
expr_stmt|;
block|}
argument_list|,
name|env
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|runOnAndroidThread
name|void
name|QtAndroidPrivate
operator|::
name|runOnAndroidThread
parameter_list|(
specifier|const
name|QtAndroidPrivate
operator|::
name|Runnable
modifier|&
name|runnable
parameter_list|,
name|JNIEnv
modifier|*
name|env
parameter_list|)
block|{
name|g_pendingRunnablesMutex
operator|->
name|lock
argument_list|()
expr_stmt|;
specifier|const
name|bool
name|triggerRun
init|=
name|g_pendingRunnables
operator|->
name|empty
argument_list|()
decl_stmt|;
name|g_pendingRunnables
operator|->
name|push_back
argument_list|(
name|runnable
argument_list|)
expr_stmt|;
name|g_pendingRunnablesMutex
operator|->
name|unlock
argument_list|()
expr_stmt|;
if|if
condition|(
name|triggerRun
condition|)
name|env
operator|->
name|CallStaticVoidMethod
argument_list|(
name|g_jNativeClass
argument_list|,
name|g_runPendingCppRunnablesMethodID
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|registerGenericMotionEventListener
name|void
name|QtAndroidPrivate
operator|::
name|registerGenericMotionEventListener
parameter_list|(
name|QtAndroidPrivate
operator|::
name|GenericMotionEventListener
modifier|*
name|listener
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|g_genericMotionEventListeners
argument_list|()
operator|->
name|mutex
argument_list|)
decl_stmt|;
name|g_genericMotionEventListeners
argument_list|()
operator|->
name|listeners
operator|.
name|push_back
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|unregisterGenericMotionEventListener
name|void
name|QtAndroidPrivate
operator|::
name|unregisterGenericMotionEventListener
parameter_list|(
name|QtAndroidPrivate
operator|::
name|GenericMotionEventListener
modifier|*
name|listener
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|g_genericMotionEventListeners
argument_list|()
operator|->
name|mutex
argument_list|)
decl_stmt|;
name|g_genericMotionEventListeners
argument_list|()
operator|->
name|listeners
operator|.
name|removeOne
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|registerKeyEventListener
name|void
name|QtAndroidPrivate
operator|::
name|registerKeyEventListener
parameter_list|(
name|QtAndroidPrivate
operator|::
name|KeyEventListener
modifier|*
name|listener
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|g_keyEventListeners
argument_list|()
operator|->
name|mutex
argument_list|)
decl_stmt|;
name|g_keyEventListeners
argument_list|()
operator|->
name|listeners
operator|.
name|push_back
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|unregisterKeyEventListener
name|void
name|QtAndroidPrivate
operator|::
name|unregisterKeyEventListener
parameter_list|(
name|QtAndroidPrivate
operator|::
name|KeyEventListener
modifier|*
name|listener
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|g_keyEventListeners
argument_list|()
operator|->
name|mutex
argument_list|)
decl_stmt|;
name|g_keyEventListeners
argument_list|()
operator|->
name|listeners
operator|.
name|removeOne
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
