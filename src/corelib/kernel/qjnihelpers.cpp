begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qjnihelpers_p.h"
end_include
begin_include
include|#
directive|include
file|"qmutex.h"
end_include
begin_include
include|#
directive|include
file|"qlist.h"
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|g_javaVM
specifier|static
name|JavaVM
modifier|*
name|g_javaVM
init|=
name|Q_NULLPTR
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|g_jActivity
specifier|static
name|jobject
name|g_jActivity
init|=
name|Q_NULLPTR
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|g_jClassLoader
specifier|static
name|jobject
name|g_jClassLoader
init|=
name|Q_NULLPTR
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|g_androidSdkVersion
specifier|static
name|jint
name|g_androidSdkVersion
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_namespace
namespace|namespace
block|{
DECL|class|ActivityResultListeners
class|class
name|ActivityResultListeners
block|{
public|public:
DECL|member|mutex
name|QMutex
name|mutex
decl_stmt|;
DECL|member|listeners
name|QList
argument_list|<
name|QtAndroidPrivate
operator|::
name|ActivityResultListener
operator|*
argument_list|>
name|listeners
decl_stmt|;
block|}
class|;
block|}
end_namespace
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|ActivityResultListeners
argument_list|,
argument|g_activityResultListeners
argument_list|)
end_macro
begin_function
DECL|function|registerActivityResultListener
name|void
name|QtAndroidPrivate
operator|::
name|registerActivityResultListener
parameter_list|(
name|ActivityResultListener
modifier|*
name|listener
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|g_activityResultListeners
argument_list|()
operator|->
name|mutex
argument_list|)
decl_stmt|;
name|g_activityResultListeners
argument_list|()
operator|->
name|listeners
operator|.
name|append
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|unregisterActivityResultListener
name|void
name|QtAndroidPrivate
operator|::
name|unregisterActivityResultListener
parameter_list|(
name|ActivityResultListener
modifier|*
name|listener
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|g_activityResultListeners
argument_list|()
operator|->
name|mutex
argument_list|)
decl_stmt|;
name|g_activityResultListeners
argument_list|()
operator|->
name|listeners
operator|.
name|removeAll
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleActivityResult
name|void
name|QtAndroidPrivate
operator|::
name|handleActivityResult
parameter_list|(
name|jint
name|requestCode
parameter_list|,
name|jint
name|resultCode
parameter_list|,
name|jobject
name|data
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|g_activityResultListeners
argument_list|()
operator|->
name|mutex
argument_list|)
decl_stmt|;
specifier|const
name|QList
argument_list|<
name|QtAndroidPrivate
operator|::
name|ActivityResultListener
operator|*
argument_list|>
modifier|&
name|listeners
init|=
name|g_activityResultListeners
argument_list|()
operator|->
name|listeners
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|listeners
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|listeners
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|handleActivityResult
argument_list|(
name|requestCode
argument_list|,
name|resultCode
argument_list|,
name|data
argument_list|)
condition|)
break|break;
block|}
block|}
end_function
begin_function
DECL|function|exceptionCheck
specifier|static
specifier|inline
name|bool
name|exceptionCheck
parameter_list|(
name|JNIEnv
modifier|*
name|env
parameter_list|)
block|{
if|if
condition|(
name|env
operator|->
name|ExceptionCheck
argument_list|()
condition|)
block|{
ifdef|#
directive|ifdef
name|QT_DEBUG
name|env
operator|->
name|ExceptionDescribe
argument_list|()
expr_stmt|;
endif|#
directive|endif
comment|// QT_DEBUG
name|env
operator|->
name|ExceptionClear
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|setAndroidSdkVersion
specifier|static
name|void
name|setAndroidSdkVersion
parameter_list|(
name|JNIEnv
modifier|*
name|env
parameter_list|)
block|{
name|jclass
name|androidVersionClass
init|=
name|env
operator|->
name|FindClass
argument_list|(
literal|"android/os/Build$VERSION"
argument_list|)
decl_stmt|;
if|if
condition|(
name|exceptionCheck
argument_list|(
name|env
argument_list|)
condition|)
return|return;
name|jfieldID
name|androidSDKFieldID
init|=
name|env
operator|->
name|GetStaticFieldID
argument_list|(
name|androidVersionClass
argument_list|,
literal|"SDK_INT"
argument_list|,
literal|"I"
argument_list|)
decl_stmt|;
if|if
condition|(
name|exceptionCheck
argument_list|(
name|env
argument_list|)
condition|)
return|return;
name|g_androidSdkVersion
operator|=
name|env
operator|->
name|GetStaticIntField
argument_list|(
name|androidVersionClass
argument_list|,
name|androidSDKFieldID
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|initJNI
name|jint
name|QtAndroidPrivate
operator|::
name|initJNI
parameter_list|(
name|JavaVM
modifier|*
name|vm
parameter_list|,
name|JNIEnv
modifier|*
name|env
parameter_list|)
block|{
name|jclass
name|jQtNative
init|=
name|env
operator|->
name|FindClass
argument_list|(
literal|"org/qtproject/qt5/android/QtNative"
argument_list|)
decl_stmt|;
if|if
condition|(
name|env
operator|->
name|ExceptionCheck
argument_list|()
condition|)
block|{
name|env
operator|->
name|ExceptionClear
argument_list|()
expr_stmt|;
return|return
name|JNI_ERR
return|;
block|}
name|jmethodID
name|activityMethodID
init|=
name|env
operator|->
name|GetStaticMethodID
argument_list|(
name|jQtNative
argument_list|,
literal|"activity"
argument_list|,
literal|"()Landroid/app/Activity;"
argument_list|)
decl_stmt|;
if|if
condition|(
name|exceptionCheck
argument_list|(
name|env
argument_list|)
condition|)
return|return
name|JNI_ERR
return|;
name|jobject
name|activity
init|=
name|env
operator|->
name|CallStaticObjectMethod
argument_list|(
name|jQtNative
argument_list|,
name|activityMethodID
argument_list|)
decl_stmt|;
if|if
condition|(
name|exceptionCheck
argument_list|(
name|env
argument_list|)
condition|)
return|return
name|JNI_ERR
return|;
name|jmethodID
name|classLoaderMethodID
init|=
name|env
operator|->
name|GetStaticMethodID
argument_list|(
name|jQtNative
argument_list|,
literal|"classLoader"
argument_list|,
literal|"()Ljava/lang/ClassLoader;"
argument_list|)
decl_stmt|;
if|if
condition|(
name|exceptionCheck
argument_list|(
name|env
argument_list|)
condition|)
return|return
name|JNI_ERR
return|;
name|jobject
name|classLoader
init|=
name|env
operator|->
name|CallStaticObjectMethod
argument_list|(
name|jQtNative
argument_list|,
name|classLoaderMethodID
argument_list|)
decl_stmt|;
if|if
condition|(
name|exceptionCheck
argument_list|(
name|env
argument_list|)
condition|)
return|return
name|JNI_ERR
return|;
name|setAndroidSdkVersion
argument_list|(
name|env
argument_list|)
expr_stmt|;
name|g_jClassLoader
operator|=
name|env
operator|->
name|NewGlobalRef
argument_list|(
name|classLoader
argument_list|)
expr_stmt|;
name|env
operator|->
name|DeleteLocalRef
argument_list|(
name|classLoader
argument_list|)
expr_stmt|;
name|g_jActivity
operator|=
name|env
operator|->
name|NewGlobalRef
argument_list|(
name|activity
argument_list|)
expr_stmt|;
name|env
operator|->
name|DeleteLocalRef
argument_list|(
name|activity
argument_list|)
expr_stmt|;
name|g_javaVM
operator|=
name|vm
expr_stmt|;
return|return
name|JNI_OK
return|;
block|}
end_function
begin_function
DECL|function|activity
name|jobject
name|QtAndroidPrivate
operator|::
name|activity
parameter_list|()
block|{
return|return
name|g_jActivity
return|;
block|}
end_function
begin_function
DECL|function|javaVM
name|JavaVM
modifier|*
name|QtAndroidPrivate
operator|::
name|javaVM
parameter_list|()
block|{
return|return
name|g_javaVM
return|;
block|}
end_function
begin_function
DECL|function|classLoader
name|jobject
name|QtAndroidPrivate
operator|::
name|classLoader
parameter_list|()
block|{
return|return
name|g_jClassLoader
return|;
block|}
end_function
begin_function
DECL|function|androidSdkVersion
name|jint
name|QtAndroidPrivate
operator|::
name|androidSdkVersion
parameter_list|()
block|{
return|return
name|g_androidSdkVersion
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
