begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Copyright (C) 2013 Intel Corporation ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<qlocale.h>
end_include
begin_include
include|#
directive|include
file|"qjsonwriter_p.h"
end_include
begin_include
include|#
directive|include
file|"qjson_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qutfcodec_p.h"
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_using
using|using
namespace|namespace
name|QJsonPrivate
namespace|;
end_using
begin_function_decl
specifier|static
name|void
name|objectContentToJson
parameter_list|(
specifier|const
name|QJsonPrivate
operator|::
name|Object
modifier|*
name|o
parameter_list|,
name|QByteArray
modifier|&
name|json
parameter_list|,
name|int
name|indent
parameter_list|,
name|bool
name|compact
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|void
name|arrayContentToJson
parameter_list|(
specifier|const
name|QJsonPrivate
operator|::
name|Array
modifier|*
name|a
parameter_list|,
name|QByteArray
modifier|&
name|json
parameter_list|,
name|int
name|indent
parameter_list|,
name|bool
name|compact
parameter_list|)
function_decl|;
end_function_decl
begin_function
DECL|function|hexdig
specifier|static
specifier|inline
name|uchar
name|hexdig
parameter_list|(
name|uint
name|u
parameter_list|)
block|{
return|return
operator|(
name|u
operator|<
literal|0xa
condition|?
literal|'0'
operator|+
name|u
else|:
literal|'a'
operator|+
name|u
operator|-
literal|0xa
operator|)
return|;
block|}
end_function
begin_function
DECL|function|escapedString
specifier|static
name|QByteArray
name|escapedString
parameter_list|(
specifier|const
name|QString
modifier|&
name|s
parameter_list|)
block|{
specifier|const
name|uchar
name|replacement
init|=
literal|'?'
decl_stmt|;
name|QByteArray
name|ba
argument_list|(
name|s
operator|.
name|length
argument_list|()
argument_list|,
name|Qt
operator|::
name|Uninitialized
argument_list|)
decl_stmt|;
name|uchar
modifier|*
name|cursor
init|=
cast|reinterpret_cast
argument_list|<
name|uchar
operator|*
argument_list|>
argument_list|(
cast|const_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
name|ba
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|uchar
modifier|*
name|ba_end
init|=
name|cursor
operator|+
name|ba
operator|.
name|length
argument_list|()
decl_stmt|;
specifier|const
name|ushort
modifier|*
name|src
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|ushort
operator|*
argument_list|>
argument_list|(
name|s
operator|.
name|constBegin
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|ushort
modifier|*
specifier|const
name|end
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|ushort
operator|*
argument_list|>
argument_list|(
name|s
operator|.
name|constEnd
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|src
operator|!=
name|end
condition|)
block|{
if|if
condition|(
name|cursor
operator|>=
name|ba_end
operator|-
literal|6
condition|)
block|{
comment|// ensure we have enough space
name|int
name|pos
init|=
name|cursor
operator|-
operator|(
specifier|const
name|uchar
operator|*
operator|)
name|ba
operator|.
name|constData
argument_list|()
decl_stmt|;
name|ba
operator|.
name|resize
argument_list|(
name|ba
operator|.
name|size
argument_list|()
operator|*
literal|2
argument_list|)
expr_stmt|;
name|cursor
operator|=
operator|(
name|uchar
operator|*
operator|)
name|ba
operator|.
name|data
argument_list|()
operator|+
name|pos
expr_stmt|;
name|ba_end
operator|=
operator|(
specifier|const
name|uchar
operator|*
operator|)
name|ba
operator|.
name|constData
argument_list|()
operator|+
name|ba
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
name|uint
name|u
init|=
operator|*
name|src
operator|++
decl_stmt|;
if|if
condition|(
name|u
operator|<
literal|0x80
condition|)
block|{
if|if
condition|(
name|u
operator|<
literal|0x20
operator|||
name|u
operator|==
literal|0x22
operator|||
name|u
operator|==
literal|0x5c
condition|)
block|{
operator|*
name|cursor
operator|++
operator|=
literal|'\\'
expr_stmt|;
switch|switch
condition|(
name|u
condition|)
block|{
case|case
literal|0x22
case|:
operator|*
name|cursor
operator|++
operator|=
literal|'"'
expr_stmt|;
break|break;
case|case
literal|0x5c
case|:
operator|*
name|cursor
operator|++
operator|=
literal|'\\'
expr_stmt|;
break|break;
case|case
literal|0x8
case|:
operator|*
name|cursor
operator|++
operator|=
literal|'b'
expr_stmt|;
break|break;
case|case
literal|0xc
case|:
operator|*
name|cursor
operator|++
operator|=
literal|'f'
expr_stmt|;
break|break;
case|case
literal|0xa
case|:
operator|*
name|cursor
operator|++
operator|=
literal|'n'
expr_stmt|;
break|break;
case|case
literal|0xd
case|:
operator|*
name|cursor
operator|++
operator|=
literal|'r'
expr_stmt|;
break|break;
case|case
literal|0x9
case|:
operator|*
name|cursor
operator|++
operator|=
literal|'t'
expr_stmt|;
break|break;
default|default:
operator|*
name|cursor
operator|++
operator|=
literal|'u'
expr_stmt|;
operator|*
name|cursor
operator|++
operator|=
literal|'0'
expr_stmt|;
operator|*
name|cursor
operator|++
operator|=
literal|'0'
expr_stmt|;
operator|*
name|cursor
operator|++
operator|=
name|hexdig
argument_list|(
name|u
operator|>>
literal|4
argument_list|)
expr_stmt|;
operator|*
name|cursor
operator|++
operator|=
name|hexdig
argument_list|(
name|u
operator|&
literal|0xf
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
operator|*
name|cursor
operator|++
operator|=
operator|(
name|uchar
operator|)
name|u
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|QUtf8Functions
operator|::
name|toUtf8
argument_list|<
name|QUtf8BaseTraits
argument_list|>
argument_list|(
name|u
argument_list|,
name|cursor
argument_list|,
name|src
argument_list|,
name|end
argument_list|)
operator|<
literal|0
condition|)
operator|*
name|cursor
operator|++
operator|=
name|replacement
expr_stmt|;
block|}
block|}
name|ba
operator|.
name|resize
argument_list|(
name|cursor
operator|-
operator|(
specifier|const
name|uchar
operator|*
operator|)
name|ba
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ba
return|;
block|}
end_function
begin_function
DECL|function|valueToJson
specifier|static
name|void
name|valueToJson
parameter_list|(
specifier|const
name|QJsonPrivate
operator|::
name|Base
modifier|*
name|b
parameter_list|,
specifier|const
name|QJsonPrivate
operator|::
name|Value
modifier|&
name|v
parameter_list|,
name|QByteArray
modifier|&
name|json
parameter_list|,
name|int
name|indent
parameter_list|,
name|bool
name|compact
parameter_list|)
block|{
name|QJsonValue
operator|::
name|Type
name|type
init|=
operator|(
name|QJsonValue
operator|::
name|Type
operator|)
operator|(
name|uint
operator|)
name|v
operator|.
name|type
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|QJsonValue
operator|::
name|Bool
case|:
name|json
operator|+=
name|v
operator|.
name|toBoolean
argument_list|()
condition|?
literal|"true"
else|:
literal|"false"
expr_stmt|;
break|break;
case|case
name|QJsonValue
operator|::
name|Double
case|:
block|{
specifier|const
name|double
name|d
init|=
name|v
operator|.
name|toDouble
argument_list|(
name|b
argument_list|)
decl_stmt|;
if|if
condition|(
name|qIsFinite
argument_list|(
name|d
argument_list|)
condition|)
comment|// +2 to format to ensure the expected precision
name|json
operator|+=
name|QByteArray
operator|::
name|number
argument_list|(
name|d
argument_list|,
literal|'g'
argument_list|,
name|QLocale
operator|::
name|FloatingPointShortest
argument_list|)
expr_stmt|;
else|else
name|json
operator|+=
literal|"null"
expr_stmt|;
comment|// +INF || -INF || NaN (see RFC4627#section2.4)
break|break;
block|}
case|case
name|QJsonValue
operator|::
name|String
case|:
name|json
operator|+=
literal|'"'
expr_stmt|;
name|json
operator|+=
name|escapedString
argument_list|(
name|v
operator|.
name|toString
argument_list|(
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|json
operator|+=
literal|'"'
expr_stmt|;
break|break;
case|case
name|QJsonValue
operator|::
name|Array
case|:
name|json
operator|+=
name|compact
condition|?
literal|"["
else|:
literal|"[\n"
expr_stmt|;
name|arrayContentToJson
argument_list|(
cast|static_cast
argument_list|<
name|QJsonPrivate
operator|::
name|Array
operator|*
argument_list|>
argument_list|(
name|v
operator|.
name|base
argument_list|(
name|b
argument_list|)
argument_list|)
argument_list|,
name|json
argument_list|,
name|indent
operator|+
operator|(
name|compact
condition|?
literal|0
else|:
literal|1
operator|)
argument_list|,
name|compact
argument_list|)
expr_stmt|;
name|json
operator|+=
name|QByteArray
argument_list|(
literal|4
operator|*
name|indent
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
name|json
operator|+=
literal|']'
expr_stmt|;
break|break;
case|case
name|QJsonValue
operator|::
name|Object
case|:
name|json
operator|+=
name|compact
condition|?
literal|"{"
else|:
literal|"{\n"
expr_stmt|;
name|objectContentToJson
argument_list|(
cast|static_cast
argument_list|<
name|QJsonPrivate
operator|::
name|Object
operator|*
argument_list|>
argument_list|(
name|v
operator|.
name|base
argument_list|(
name|b
argument_list|)
argument_list|)
argument_list|,
name|json
argument_list|,
name|indent
operator|+
operator|(
name|compact
condition|?
literal|0
else|:
literal|1
operator|)
argument_list|,
name|compact
argument_list|)
expr_stmt|;
name|json
operator|+=
name|QByteArray
argument_list|(
literal|4
operator|*
name|indent
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
name|json
operator|+=
literal|'}'
expr_stmt|;
break|break;
case|case
name|QJsonValue
operator|::
name|Null
case|:
default|default:
name|json
operator|+=
literal|"null"
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|arrayContentToJson
specifier|static
name|void
name|arrayContentToJson
parameter_list|(
specifier|const
name|QJsonPrivate
operator|::
name|Array
modifier|*
name|a
parameter_list|,
name|QByteArray
modifier|&
name|json
parameter_list|,
name|int
name|indent
parameter_list|,
name|bool
name|compact
parameter_list|)
block|{
if|if
condition|(
operator|!
name|a
operator|||
operator|!
name|a
operator|->
name|length
condition|)
return|return;
name|QByteArray
name|indentString
argument_list|(
literal|4
operator|*
name|indent
argument_list|,
literal|' '
argument_list|)
decl_stmt|;
name|uint
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|1
condition|)
block|{
name|json
operator|+=
name|indentString
expr_stmt|;
name|valueToJson
argument_list|(
name|a
argument_list|,
name|a
operator|->
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|json
argument_list|,
name|indent
argument_list|,
name|compact
argument_list|)
expr_stmt|;
if|if
condition|(
operator|++
name|i
operator|==
name|a
operator|->
name|length
condition|)
block|{
if|if
condition|(
operator|!
name|compact
condition|)
name|json
operator|+=
literal|'\n'
expr_stmt|;
break|break;
block|}
name|json
operator|+=
name|compact
condition|?
literal|","
else|:
literal|",\n"
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|objectContentToJson
specifier|static
name|void
name|objectContentToJson
parameter_list|(
specifier|const
name|QJsonPrivate
operator|::
name|Object
modifier|*
name|o
parameter_list|,
name|QByteArray
modifier|&
name|json
parameter_list|,
name|int
name|indent
parameter_list|,
name|bool
name|compact
parameter_list|)
block|{
if|if
condition|(
operator|!
name|o
operator|||
operator|!
name|o
operator|->
name|length
condition|)
return|return;
name|QByteArray
name|indentString
argument_list|(
literal|4
operator|*
name|indent
argument_list|,
literal|' '
argument_list|)
decl_stmt|;
name|uint
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|1
condition|)
block|{
name|QJsonPrivate
operator|::
name|Entry
modifier|*
name|e
init|=
name|o
operator|->
name|entryAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|json
operator|+=
name|indentString
expr_stmt|;
name|json
operator|+=
literal|'"'
expr_stmt|;
name|json
operator|+=
name|escapedString
argument_list|(
name|e
operator|->
name|key
argument_list|()
argument_list|)
expr_stmt|;
name|json
operator|+=
name|compact
condition|?
literal|"\":"
else|:
literal|"\": "
expr_stmt|;
name|valueToJson
argument_list|(
name|o
argument_list|,
name|e
operator|->
name|value
argument_list|,
name|json
argument_list|,
name|indent
argument_list|,
name|compact
argument_list|)
expr_stmt|;
if|if
condition|(
operator|++
name|i
operator|==
name|o
operator|->
name|length
condition|)
block|{
if|if
condition|(
operator|!
name|compact
condition|)
name|json
operator|+=
literal|'\n'
expr_stmt|;
break|break;
block|}
name|json
operator|+=
name|compact
condition|?
literal|","
else|:
literal|",\n"
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|objectToJson
name|void
name|Writer
operator|::
name|objectToJson
parameter_list|(
specifier|const
name|QJsonPrivate
operator|::
name|Object
modifier|*
name|o
parameter_list|,
name|QByteArray
modifier|&
name|json
parameter_list|,
name|int
name|indent
parameter_list|,
name|bool
name|compact
parameter_list|)
block|{
name|json
operator|.
name|reserve
argument_list|(
name|json
operator|.
name|size
argument_list|()
operator|+
operator|(
name|o
condition|?
operator|(
name|int
operator|)
name|o
operator|->
name|size
else|:
literal|16
operator|)
argument_list|)
expr_stmt|;
name|json
operator|+=
name|compact
condition|?
literal|"{"
else|:
literal|"{\n"
expr_stmt|;
name|objectContentToJson
argument_list|(
name|o
argument_list|,
name|json
argument_list|,
name|indent
operator|+
operator|(
name|compact
condition|?
literal|0
else|:
literal|1
operator|)
argument_list|,
name|compact
argument_list|)
expr_stmt|;
name|json
operator|+=
name|QByteArray
argument_list|(
literal|4
operator|*
name|indent
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
name|json
operator|+=
name|compact
condition|?
literal|"}"
else|:
literal|"}\n"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|arrayToJson
name|void
name|Writer
operator|::
name|arrayToJson
parameter_list|(
specifier|const
name|QJsonPrivate
operator|::
name|Array
modifier|*
name|a
parameter_list|,
name|QByteArray
modifier|&
name|json
parameter_list|,
name|int
name|indent
parameter_list|,
name|bool
name|compact
parameter_list|)
block|{
name|json
operator|.
name|reserve
argument_list|(
name|json
operator|.
name|size
argument_list|()
operator|+
operator|(
name|a
condition|?
operator|(
name|int
operator|)
name|a
operator|->
name|size
else|:
literal|16
operator|)
argument_list|)
expr_stmt|;
name|json
operator|+=
name|compact
condition|?
literal|"["
else|:
literal|"[\n"
expr_stmt|;
name|arrayContentToJson
argument_list|(
name|a
argument_list|,
name|json
argument_list|,
name|indent
operator|+
operator|(
name|compact
condition|?
literal|0
else|:
literal|1
operator|)
argument_list|,
name|compact
argument_list|)
expr_stmt|;
name|json
operator|+=
name|QByteArray
argument_list|(
literal|4
operator|*
name|indent
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
name|json
operator|+=
name|compact
condition|?
literal|"]"
else|:
literal|"]\n"
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
