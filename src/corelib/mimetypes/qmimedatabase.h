begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QMIMEDATABASE_H
end_ifndef
begin_define
DECL|macro|QMIMEDATABASE_H
define|#
directive|define
name|QMIMEDATABASE_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qmimetype.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qstringlist.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QByteArray
name|class
name|QByteArray
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QFileInfo
name|class
name|QFileInfo
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QIODevice
name|class
name|QIODevice
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QUrl
name|class
name|QUrl
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QMimeDatabasePrivate
name|class
name|QMimeDatabasePrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_CORE_EXPORT
name|QMimeDatabase
block|{
name|Q_DISABLE_COPY
argument_list|(
argument|QMimeDatabase
argument_list|)
name|public
label|:
name|QMimeDatabase
argument_list|()
expr_stmt|;
operator|~
name|QMimeDatabase
argument_list|()
expr_stmt|;
name|QMimeType
name|mimeTypeForName
argument_list|(
specifier|const
name|QString
operator|&
name|nameOrAlias
argument_list|)
decl|const
decl_stmt|;
enum|enum
name|MatchMode
block|{
name|MatchDefault
init|=
literal|0x0
block|,
name|MatchExtension
init|=
literal|0x1
block|,
name|MatchContent
init|=
literal|0x2
block|}
enum|;
name|QMimeType
name|mimeTypeForFile
argument_list|(
specifier|const
name|QString
operator|&
name|fileName
argument_list|,
name|MatchMode
name|mode
operator|=
name|MatchDefault
argument_list|)
decl|const
decl_stmt|;
name|QMimeType
name|mimeTypeForFile
argument_list|(
specifier|const
name|QFileInfo
operator|&
name|fileInfo
argument_list|,
name|MatchMode
name|mode
operator|=
name|MatchDefault
argument_list|)
decl|const
decl_stmt|;
name|QList
operator|<
name|QMimeType
operator|>
name|mimeTypesForFileName
argument_list|(
argument|const QString&fileName
argument_list|)
specifier|const
expr_stmt|;
name|QMimeType
name|mimeTypeForData
argument_list|(
specifier|const
name|QByteArray
operator|&
name|data
argument_list|)
decl|const
decl_stmt|;
name|QMimeType
name|mimeTypeForData
argument_list|(
name|QIODevice
operator|*
name|device
argument_list|)
decl|const
decl_stmt|;
name|QMimeType
name|mimeTypeForUrl
argument_list|(
specifier|const
name|QUrl
operator|&
name|url
argument_list|)
decl|const
decl_stmt|;
name|QMimeType
name|mimeTypeForFileNameAndData
argument_list|(
specifier|const
name|QString
operator|&
name|fileName
argument_list|,
name|QIODevice
operator|*
name|device
argument_list|)
decl|const
decl_stmt|;
name|QMimeType
name|mimeTypeForFileNameAndData
argument_list|(
specifier|const
name|QString
operator|&
name|fileName
argument_list|,
specifier|const
name|QByteArray
operator|&
name|data
argument_list|)
decl|const
decl_stmt|;
if|#
directive|if
name|QT_DEPRECATED_SINCE
argument_list|(
literal|5
operator|,
literal|0
argument_list|)
name|QT_DEPRECATED
name|QMimeType
name|mimeTypeForNameAndData
argument_list|(
specifier|const
name|QString
operator|&
name|fileName
argument_list|,
name|QIODevice
operator|*
name|device
argument_list|)
decl|const
block|{
return|return
name|mimeTypeForFileNameAndData
argument_list|(
name|fileName
argument_list|,
name|device
argument_list|)
return|;
block|}
name|QT_DEPRECATED
name|QMimeType
name|mimeTypeForNameAndData
argument_list|(
specifier|const
name|QString
operator|&
name|fileName
argument_list|,
specifier|const
name|QByteArray
operator|&
name|data
argument_list|)
decl|const
block|{
return|return
name|mimeTypeForFileNameAndData
argument_list|(
name|fileName
argument_list|,
name|data
argument_list|)
return|;
block|}
endif|#
directive|endif
name|QString
name|suffixForFileName
argument_list|(
specifier|const
name|QString
operator|&
name|fileName
argument_list|)
decl|const
decl_stmt|;
name|QList
operator|<
name|QMimeType
operator|>
name|allMimeTypes
argument_list|()
specifier|const
expr_stmt|;
name|private
label|:
name|QMimeDatabasePrivate
modifier|*
name|d
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QMIMEDATABASE_H
end_comment
end_unit
