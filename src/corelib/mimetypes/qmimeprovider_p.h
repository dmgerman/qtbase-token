begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QMIMEPROVIDER_P_H
end_ifndef
begin_define
DECL|macro|QMIMEPROVIDER_P_H
define|#
directive|define
name|QMIMEPROVIDER_P_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qdatetime.h>
end_include
begin_include
include|#
directive|include
file|"qmimedatabase_p.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/qset.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QMimeMagicRuleMatcher
name|class
name|QMimeMagicRuleMatcher
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QMimeProviderBase
block|{
name|public
label|:
name|QMimeProviderBase
argument_list|(
name|QMimeDatabasePrivate
operator|*
name|db
argument_list|)
expr_stmt|;
name|virtual
operator|~
name|QMimeProviderBase
argument_list|()
block|{}
name|virtual
name|bool
name|isValid
argument_list|()
operator|=
literal|0
expr_stmt|;
name|virtual
name|QMimeType
name|mimeTypeForName
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|QStringList
name|findByFileName
parameter_list|(
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|,
name|QString
modifier|*
name|foundSuffix
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|QStringList
name|parents
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|QString
name|resolveAlias
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|QMimeType
name|findByMagic
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|data
parameter_list|,
name|int
modifier|*
name|accuracyPtr
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|QList
operator|<
name|QMimeType
operator|>
name|allMimeTypes
argument_list|()
operator|=
literal|0
expr_stmt|;
name|virtual
name|void
name|loadMimeTypePrivate
parameter_list|(
name|QMimeTypePrivate
modifier|&
parameter_list|)
block|{}
name|virtual
name|void
name|loadIcon
parameter_list|(
name|QMimeTypePrivate
modifier|&
parameter_list|)
block|{}
name|virtual
name|void
name|loadGenericIcon
parameter_list|(
name|QMimeTypePrivate
modifier|&
parameter_list|)
block|{}
name|QMimeDatabasePrivate
modifier|*
name|m_db
decl_stmt|;
name|protected
label|:
name|bool
name|shouldCheck
parameter_list|()
function_decl|;
name|QDateTime
name|m_lastCheck
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_comment
comment|/*    Parses the files 'mime.cache' and 'types' on demand  */
end_comment
begin_decl_stmt
name|class
name|QMimeBinaryProvider
range|:
name|public
name|QMimeProviderBase
block|{
name|public
operator|:
name|QMimeBinaryProvider
argument_list|(
name|QMimeDatabasePrivate
operator|*
name|db
argument_list|)
block|;
name|virtual
operator|~
name|QMimeBinaryProvider
argument_list|()
block|;
name|virtual
name|bool
name|isValid
argument_list|()
block|;
name|virtual
name|QMimeType
name|mimeTypeForName
argument_list|(
specifier|const
name|QString
operator|&
name|name
argument_list|)
block|;
name|virtual
name|QStringList
name|findByFileName
argument_list|(
specifier|const
name|QString
operator|&
name|fileName
argument_list|,
name|QString
operator|*
name|foundSuffix
argument_list|)
block|;
name|virtual
name|QStringList
name|parents
argument_list|(
specifier|const
name|QString
operator|&
name|mime
argument_list|)
block|;
name|virtual
name|QString
name|resolveAlias
argument_list|(
specifier|const
name|QString
operator|&
name|name
argument_list|)
block|;
name|virtual
name|QMimeType
name|findByMagic
argument_list|(
specifier|const
name|QByteArray
operator|&
name|data
argument_list|,
name|int
operator|*
name|accuracyPtr
argument_list|)
block|;
name|virtual
name|QList
operator|<
name|QMimeType
operator|>
name|allMimeTypes
argument_list|()
block|;
name|virtual
name|void
name|loadMimeTypePrivate
argument_list|(
name|QMimeTypePrivate
operator|&
argument_list|)
block|;
name|virtual
name|void
name|loadIcon
argument_list|(
name|QMimeTypePrivate
operator|&
argument_list|)
block|;
name|virtual
name|void
name|loadGenericIcon
argument_list|(
name|QMimeTypePrivate
operator|&
argument_list|)
block|;
name|private
operator|:
expr|struct
name|CacheFile
block|;
name|void
name|matchGlobList
argument_list|(
argument|QMimeGlobMatchResult&result
argument_list|,
argument|CacheFile *cacheFile
argument_list|,
argument|int offset
argument_list|,
argument|const QString&fileName
argument_list|)
block|;
name|bool
name|matchSuffixTree
argument_list|(
argument|QMimeGlobMatchResult&result
argument_list|,
argument|CacheFile *cacheFile
argument_list|,
argument|int numEntries
argument_list|,
argument|int firstOffset
argument_list|,
argument|const QString&fileName
argument_list|,
argument|int charPos
argument_list|,
argument|bool caseSensitiveCheck
argument_list|)
block|;
name|bool
name|matchMagicRule
argument_list|(
argument|CacheFile *cacheFile
argument_list|,
argument|int numMatchlets
argument_list|,
argument|int firstOffset
argument_list|,
argument|const QByteArray&data
argument_list|)
block|;
name|QString
name|iconForMime
argument_list|(
argument|CacheFile *cacheFile
argument_list|,
argument|int posListOffset
argument_list|,
argument|const QByteArray&inputMime
argument_list|)
block|;
name|void
name|loadMimeTypeList
argument_list|()
block|;
name|void
name|checkCache
argument_list|()
block|;
name|class
name|CacheFileList
operator|:
name|public
name|QList
operator|<
name|CacheFile
operator|*
operator|>
block|{
name|public
operator|:
name|CacheFile
operator|*
name|findCacheFile
argument_list|(
argument|const QString&fileName
argument_list|)
specifier|const
block|;
name|bool
name|checkCacheChanged
argument_list|()
block|;     }
block|;
name|CacheFileList
name|m_cacheFiles
block|;
name|QStringList
name|m_cacheFileNames
block|;
name|QSet
operator|<
name|QString
operator|>
name|m_mimetypeNames
block|;
name|bool
name|m_mimetypeListLoaded
block|; }
decl_stmt|;
end_decl_stmt
begin_comment
comment|/*    Parses the raw XML files (slower)  */
end_comment
begin_decl_stmt
name|class
name|QMimeXMLProvider
range|:
name|public
name|QMimeProviderBase
block|{
name|public
operator|:
name|QMimeXMLProvider
argument_list|(
name|QMimeDatabasePrivate
operator|*
name|db
argument_list|)
block|;
name|virtual
name|bool
name|isValid
argument_list|()
block|;
name|virtual
name|QMimeType
name|mimeTypeForName
argument_list|(
specifier|const
name|QString
operator|&
name|name
argument_list|)
block|;
name|virtual
name|QStringList
name|findByFileName
argument_list|(
specifier|const
name|QString
operator|&
name|fileName
argument_list|,
name|QString
operator|*
name|foundSuffix
argument_list|)
block|;
name|virtual
name|QStringList
name|parents
argument_list|(
specifier|const
name|QString
operator|&
name|mime
argument_list|)
block|;
name|virtual
name|QString
name|resolveAlias
argument_list|(
specifier|const
name|QString
operator|&
name|name
argument_list|)
block|;
name|virtual
name|QMimeType
name|findByMagic
argument_list|(
specifier|const
name|QByteArray
operator|&
name|data
argument_list|,
name|int
operator|*
name|accuracyPtr
argument_list|)
block|;
name|virtual
name|QList
operator|<
name|QMimeType
operator|>
name|allMimeTypes
argument_list|()
block|;
name|bool
name|load
argument_list|(
specifier|const
name|QString
operator|&
name|fileName
argument_list|,
name|QString
operator|*
name|errorMessage
argument_list|)
block|;
comment|// Called by the mimetype xml parser
name|void
name|addMimeType
argument_list|(
specifier|const
name|QMimeType
operator|&
name|mt
argument_list|)
block|;
name|void
name|addGlobPattern
argument_list|(
specifier|const
name|QMimeGlobPattern
operator|&
name|glob
argument_list|)
block|;
name|void
name|addParent
argument_list|(
specifier|const
name|QString
operator|&
name|child
argument_list|,
specifier|const
name|QString
operator|&
name|parent
argument_list|)
block|;
name|void
name|addAlias
argument_list|(
specifier|const
name|QString
operator|&
name|alias
argument_list|,
specifier|const
name|QString
operator|&
name|name
argument_list|)
block|;
name|void
name|addMagicMatcher
argument_list|(
specifier|const
name|QMimeMagicRuleMatcher
operator|&
name|matcher
argument_list|)
block|;
name|private
operator|:
name|void
name|ensureLoaded
argument_list|()
block|;
name|void
name|load
argument_list|(
specifier|const
name|QString
operator|&
name|fileName
argument_list|)
block|;
name|bool
name|m_loaded
block|;
typedef|typedef
name|QHash
operator|<
name|QString
operator|,
name|QMimeType
operator|>
name|NameMimeTypeMap
expr_stmt|;
name|NameMimeTypeMap
name|m_nameMimeTypeMap
decl_stmt|;
end_decl_stmt
begin_typedef
typedef|typedef
name|QHash
operator|<
name|QString
operator|,
name|QString
operator|>
name|AliasHash
expr_stmt|;
end_typedef
begin_decl_stmt
name|AliasHash
name|m_aliases
decl_stmt|;
end_decl_stmt
begin_typedef
typedef|typedef
name|QHash
operator|<
name|QString
operator|,
name|QStringList
operator|>
name|ParentsHash
expr_stmt|;
end_typedef
begin_decl_stmt
name|ParentsHash
name|m_parents
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QMimeAllGlobPatterns
name|m_mimeTypeGlobs
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|QList
operator|<
name|QMimeMagicRuleMatcher
operator|>
name|m_magicMatchers
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|QStringList
name|m_allFiles
decl_stmt|;
end_decl_stmt
begin_macro
unit|};
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QMIMEPROVIDER_P_H
end_comment
end_unit
