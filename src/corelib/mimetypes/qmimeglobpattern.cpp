begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qmimeglobpattern_p.h"
end_include
begin_include
include|#
directive|include
file|<QRegExp>
end_include
begin_include
include|#
directive|include
file|<QStringList>
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_function
name|QT_BEGIN_NAMESPACE
comment|/*!     \internal     \class QMimeGlobMatchResult     \inmodule QtCore     \brief The QMimeGlobMatchResult class accumulates results from glob matching.      Handles glob weights, and preferring longer matches over shorter matches. */
DECL|function|addMatch
name|void
name|QMimeGlobMatchResult
operator|::
name|addMatch
parameter_list|(
specifier|const
name|QString
modifier|&
name|mimeType
parameter_list|,
name|int
name|weight
parameter_list|,
specifier|const
name|QString
modifier|&
name|pattern
parameter_list|)
block|{
comment|// Is this a lower-weight pattern than the last match? Skip this match then.
if|if
condition|(
name|weight
operator|<
name|m_weight
condition|)
return|return;
name|bool
name|replace
init|=
name|weight
operator|>
name|m_weight
decl_stmt|;
if|if
condition|(
operator|!
name|replace
condition|)
block|{
comment|// Compare the length of the match
if|if
condition|(
name|pattern
operator|.
name|length
argument_list|()
operator|<
name|m_matchingPatternLength
condition|)
return|return;
comment|// too short, ignore
elseif|else
if|if
condition|(
name|pattern
operator|.
name|length
argument_list|()
operator|>
name|m_matchingPatternLength
condition|)
block|{
comment|// longer: clear any previous match (like *.bz2, when pattern is *.tar.bz2)
name|replace
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|replace
condition|)
block|{
name|m_matchingMimeTypes
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// remember the new "longer" length
name|m_matchingPatternLength
operator|=
name|pattern
operator|.
name|length
argument_list|()
expr_stmt|;
name|m_weight
operator|=
name|weight
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|m_matchingMimeTypes
operator|.
name|contains
argument_list|(
name|mimeType
argument_list|)
condition|)
block|{
name|m_matchingMimeTypes
operator|.
name|append
argument_list|(
name|mimeType
argument_list|)
expr_stmt|;
if|if
condition|(
name|pattern
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"*."
argument_list|)
argument_list|)
condition|)
name|m_foundSuffix
operator|=
name|pattern
operator|.
name|mid
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \internal     \class QMimeGlobPattern     \inmodule QtCore     \brief The QMimeGlobPattern class contains the glob pattern for file names for MIME type matching.      \sa QMimeType, QMimeDatabase, QMimeMagicRuleMatcher, QMimeMagicRule */
end_comment
begin_function
DECL|function|matchFileName
name|bool
name|QMimeGlobPattern
operator|::
name|matchFileName
parameter_list|(
specifier|const
name|QString
modifier|&
name|inputFilename
parameter_list|)
specifier|const
block|{
comment|// "Applications MUST match globs case-insensitively, except when the case-sensitive
comment|// attribute is set to true."
comment|// The constructor takes care of putting case-insensitive patterns in lowercase.
specifier|const
name|QString
name|filename
init|=
name|m_caseSensitivity
operator|==
name|Qt
operator|::
name|CaseInsensitive
condition|?
name|inputFilename
operator|.
name|toLower
argument_list|()
else|:
name|inputFilename
decl_stmt|;
specifier|const
name|int
name|pattern_len
init|=
name|m_pattern
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|pattern_len
condition|)
return|return
literal|false
return|;
specifier|const
name|int
name|len
init|=
name|filename
operator|.
name|length
argument_list|()
decl_stmt|;
specifier|const
name|int
name|starCount
init|=
name|m_pattern
operator|.
name|count
argument_list|(
name|QLatin1Char
argument_list|(
literal|'*'
argument_list|)
argument_list|)
decl_stmt|;
comment|// Patterns like "*~", "*.extension"
if|if
condition|(
name|m_pattern
index|[
literal|0
index|]
operator|==
name|QLatin1Char
argument_list|(
literal|'*'
argument_list|)
operator|&&
name|m_pattern
operator|.
name|indexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|'['
argument_list|)
argument_list|)
operator|==
operator|-
literal|1
operator|&&
name|starCount
operator|==
literal|1
condition|)
block|{
if|if
condition|(
name|len
operator|+
literal|1
operator|<
name|pattern_len
condition|)
return|return
literal|false
return|;
specifier|const
name|QChar
modifier|*
name|c1
init|=
name|m_pattern
operator|.
name|unicode
argument_list|()
operator|+
name|pattern_len
operator|-
literal|1
decl_stmt|;
specifier|const
name|QChar
modifier|*
name|c2
init|=
name|filename
operator|.
name|unicode
argument_list|()
operator|+
name|len
operator|-
literal|1
decl_stmt|;
name|int
name|cnt
init|=
literal|1
decl_stmt|;
while|while
condition|(
name|cnt
operator|<
name|pattern_len
operator|&&
operator|*
name|c1
operator|--
operator|==
operator|*
name|c2
operator|--
condition|)
operator|++
name|cnt
expr_stmt|;
return|return
name|cnt
operator|==
name|pattern_len
return|;
block|}
comment|// Patterns like "README*" (well this is currently the only one like that...)
if|if
condition|(
name|starCount
operator|==
literal|1
operator|&&
name|m_pattern
operator|.
name|at
argument_list|(
name|pattern_len
operator|-
literal|1
argument_list|)
operator|==
name|QLatin1Char
argument_list|(
literal|'*'
argument_list|)
condition|)
block|{
if|if
condition|(
name|len
operator|+
literal|1
operator|<
name|pattern_len
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|m_pattern
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|==
name|QLatin1Char
argument_list|(
literal|'*'
argument_list|)
condition|)
return|return
name|filename
operator|.
name|indexOf
argument_list|(
name|m_pattern
operator|.
name|mid
argument_list|(
literal|1
argument_list|,
name|pattern_len
operator|-
literal|2
argument_list|)
argument_list|)
operator|!=
operator|-
literal|1
return|;
specifier|const
name|QChar
modifier|*
name|c1
init|=
name|m_pattern
operator|.
name|unicode
argument_list|()
decl_stmt|;
specifier|const
name|QChar
modifier|*
name|c2
init|=
name|filename
operator|.
name|unicode
argument_list|()
decl_stmt|;
name|int
name|cnt
init|=
literal|1
decl_stmt|;
while|while
condition|(
name|cnt
operator|<
name|pattern_len
operator|&&
operator|*
name|c1
operator|++
operator|==
operator|*
name|c2
operator|++
condition|)
operator|++
name|cnt
expr_stmt|;
return|return
name|cnt
operator|==
name|pattern_len
return|;
block|}
comment|// Names without any wildcards like "README"
if|if
condition|(
name|m_pattern
operator|.
name|indexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|'['
argument_list|)
argument_list|)
operator|==
operator|-
literal|1
operator|&&
name|starCount
operator|==
literal|0
operator|&&
name|m_pattern
operator|.
name|indexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|'?'
argument_list|)
argument_list|)
condition|)
return|return
operator|(
name|m_pattern
operator|==
name|filename
operator|)
return|;
comment|// Other (quite rare) patterns, like "*.anim[1-9j]": use slow but correct method
name|QRegExp
name|rx
argument_list|(
name|m_pattern
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|,
name|QRegExp
operator|::
name|WildcardUnix
argument_list|)
decl_stmt|;
return|return
name|rx
operator|.
name|exactMatch
argument_list|(
name|filename
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|isFastPattern
specifier|static
name|bool
name|isFastPattern
parameter_list|(
specifier|const
name|QString
modifier|&
name|pattern
parameter_list|)
block|{
comment|// starts with "*.", has no other '*' and no other '.'
return|return
name|pattern
operator|.
name|lastIndexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|'*'
argument_list|)
argument_list|)
operator|==
literal|0
operator|&&
name|pattern
operator|.
name|lastIndexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
argument_list|)
operator|==
literal|1
comment|// and contains no other special character
operator|&&
operator|!
name|pattern
operator|.
name|contains
argument_list|(
name|QLatin1Char
argument_list|(
literal|'?'
argument_list|)
argument_list|)
operator|&&
operator|!
name|pattern
operator|.
name|contains
argument_list|(
name|QLatin1Char
argument_list|(
literal|'['
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|addGlob
name|void
name|QMimeAllGlobPatterns
operator|::
name|addGlob
parameter_list|(
specifier|const
name|QMimeGlobPattern
modifier|&
name|glob
parameter_list|)
block|{
specifier|const
name|QString
modifier|&
name|pattern
init|=
name|glob
operator|.
name|pattern
argument_list|()
decl_stmt|;
name|Q_ASSERT
argument_list|(
operator|!
name|pattern
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// Store each patterns into either m_fastPatternDict (*.txt, *.html etc. with default weight 50)
comment|// or for the rest, like core.*, *.tar.bz2, *~, into highWeightPatternOffset (>50)
comment|// or lowWeightPatternOffset (<=50)
if|if
condition|(
name|glob
operator|.
name|weight
argument_list|()
operator|==
literal|50
operator|&&
name|isFastPattern
argument_list|(
name|pattern
argument_list|)
operator|&&
operator|!
name|glob
operator|.
name|isCaseSensitive
argument_list|()
condition|)
block|{
comment|// The bulk of the patterns is *.foo with weight 50 --> those go into the fast patterns hash.
specifier|const
name|QString
name|extension
init|=
name|pattern
operator|.
name|mid
argument_list|(
literal|2
argument_list|)
operator|.
name|toLower
argument_list|()
decl_stmt|;
name|QStringList
modifier|&
name|patterns
init|=
name|m_fastPatterns
index|[
name|extension
index|]
decl_stmt|;
comment|// find or create
if|if
condition|(
operator|!
name|patterns
operator|.
name|contains
argument_list|(
name|glob
operator|.
name|mimeType
argument_list|()
argument_list|)
condition|)
name|patterns
operator|.
name|append
argument_list|(
name|glob
operator|.
name|mimeType
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|glob
operator|.
name|weight
argument_list|()
operator|>
literal|50
condition|)
block|{
if|if
condition|(
operator|!
name|m_highWeightGlobs
operator|.
name|hasPattern
argument_list|(
name|glob
operator|.
name|mimeType
argument_list|()
argument_list|,
name|glob
operator|.
name|pattern
argument_list|()
argument_list|)
condition|)
name|m_highWeightGlobs
operator|.
name|append
argument_list|(
name|glob
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|m_lowWeightGlobs
operator|.
name|hasPattern
argument_list|(
name|glob
operator|.
name|mimeType
argument_list|()
argument_list|,
name|glob
operator|.
name|pattern
argument_list|()
argument_list|)
condition|)
name|m_lowWeightGlobs
operator|.
name|append
argument_list|(
name|glob
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|removeMimeType
name|void
name|QMimeAllGlobPatterns
operator|::
name|removeMimeType
parameter_list|(
specifier|const
name|QString
modifier|&
name|mimeType
parameter_list|)
block|{
name|QMutableHashIterator
argument_list|<
name|QString
argument_list|,
name|QStringList
argument_list|>
name|it
argument_list|(
name|m_fastPatterns
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|it
operator|.
name|next
argument_list|()
operator|.
name|value
argument_list|()
operator|.
name|removeAll
argument_list|(
name|mimeType
argument_list|)
expr_stmt|;
block|}
name|m_highWeightGlobs
operator|.
name|removeMimeType
argument_list|(
name|mimeType
argument_list|)
expr_stmt|;
name|m_lowWeightGlobs
operator|.
name|removeMimeType
argument_list|(
name|mimeType
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|match
name|void
name|QMimeGlobPatternList
operator|::
name|match
parameter_list|(
name|QMimeGlobMatchResult
modifier|&
name|result
parameter_list|,
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|)
specifier|const
block|{
name|QMimeGlobPatternList
operator|::
name|const_iterator
name|it
init|=
name|this
operator|->
name|constBegin
argument_list|()
decl_stmt|;
specifier|const
name|QMimeGlobPatternList
operator|::
name|const_iterator
name|endIt
init|=
name|this
operator|->
name|constEnd
argument_list|()
decl_stmt|;
for|for
control|(
init|;
name|it
operator|!=
name|endIt
condition|;
operator|++
name|it
control|)
block|{
specifier|const
name|QMimeGlobPattern
modifier|&
name|glob
init|=
operator|*
name|it
decl_stmt|;
if|if
condition|(
name|glob
operator|.
name|matchFileName
argument_list|(
name|fileName
argument_list|)
condition|)
name|result
operator|.
name|addMatch
argument_list|(
name|glob
operator|.
name|mimeType
argument_list|()
argument_list|,
name|glob
operator|.
name|weight
argument_list|()
argument_list|,
name|glob
operator|.
name|pattern
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|matchingGlobs
name|QStringList
name|QMimeAllGlobPatterns
operator|::
name|matchingGlobs
parameter_list|(
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|,
name|QString
modifier|*
name|foundSuffix
parameter_list|)
specifier|const
block|{
comment|// First try the high weight matches (>50), if any.
name|QMimeGlobMatchResult
name|result
decl_stmt|;
name|m_highWeightGlobs
operator|.
name|match
argument_list|(
name|result
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|m_matchingMimeTypes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Now use the "fast patterns" dict, for simple *.foo patterns with weight 50
comment|// (which is most of them, so this optimization is definitely worth it)
specifier|const
name|int
name|lastDot
init|=
name|fileName
operator|.
name|lastIndexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastDot
operator|!=
operator|-
literal|1
condition|)
block|{
comment|// if no '.', skip the extension lookup
specifier|const
name|int
name|ext_len
init|=
name|fileName
operator|.
name|length
argument_list|()
operator|-
name|lastDot
operator|-
literal|1
decl_stmt|;
specifier|const
name|QString
name|simpleExtension
init|=
name|fileName
operator|.
name|right
argument_list|(
name|ext_len
argument_list|)
operator|.
name|toLower
argument_list|()
decl_stmt|;
comment|// (toLower because fast patterns are always case-insensitive and saved as lowercase)
specifier|const
name|QStringList
name|matchingMimeTypes
init|=
name|m_fastPatterns
operator|.
name|value
argument_list|(
name|simpleExtension
argument_list|)
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|mime
decl|,
name|matchingMimeTypes
control|)
block|{
name|result
operator|.
name|addMatch
argument_list|(
name|mime
argument_list|,
literal|50
argument_list|,
name|QLatin1String
argument_list|(
literal|"*."
argument_list|)
operator|+
name|simpleExtension
argument_list|)
expr_stmt|;
block|}
comment|// Can't return yet; *.tar.bz2 has to win over *.bz2, so we need the low-weight mimetypes anyway,
comment|// at least those with weight 50.
block|}
comment|// Finally, try the low weight matches (<=50)
name|m_lowWeightGlobs
operator|.
name|match
argument_list|(
name|result
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|foundSuffix
condition|)
operator|*
name|foundSuffix
operator|=
name|result
operator|.
name|m_foundSuffix
expr_stmt|;
return|return
name|result
operator|.
name|m_matchingMimeTypes
return|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|QMimeAllGlobPatterns
operator|::
name|clear
parameter_list|()
block|{
name|m_fastPatterns
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m_highWeightGlobs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m_lowWeightGlobs
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
