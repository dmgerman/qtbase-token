begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<qcryptographichash.h>
end_include
begin_include
include|#
directive|include
file|"../../3rdparty/md5/md5.h"
end_include
begin_include
include|#
directive|include
file|"../../3rdparty/md5/md5.cpp"
end_include
begin_include
include|#
directive|include
file|"../../3rdparty/md4/md4.h"
end_include
begin_include
include|#
directive|include
file|"../../3rdparty/md4/md4.cpp"
end_include
begin_include
include|#
directive|include
file|"../../3rdparty/sha1/sha1.cpp"
end_include
begin_include
include|#
directive|include
file|<qiodevice.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_class
DECL|class|QCryptographicHashPrivate
class|class
name|QCryptographicHashPrivate
block|{
public|public:
DECL|member|method
name|QCryptographicHash
operator|::
name|Algorithm
name|method
decl_stmt|;
union|union
block|{
DECL|member|md5Context
name|MD5Context
name|md5Context
decl_stmt|;
DECL|member|md4Context
name|md4_context
name|md4Context
decl_stmt|;
DECL|member|sha1Context
name|Sha1State
name|sha1Context
decl_stmt|;
block|}
union|;
DECL|member|result
name|QByteArray
name|result
decl_stmt|;
block|}
class|;
end_class
begin_comment
comment|/*!   \class QCryptographicHash    \brief The QCryptographicHash class provides a way to generate cryptographic hashes.    \since 4.3    \ingroup tools   \reentrant    QCryptographicHash can be used to generate cryptographic hashes of binary or text data.    Currently MD4, MD5, and SHA-1 are supported. */
end_comment
begin_comment
comment|/*!   \enum QCryptographicHash::Algorithm    \value Md4 Generate an MD4 hash sum   \value Md5 Generate an MD5 hash sum   \value Sha1 Generate an SHA1 hash sum */
end_comment
begin_comment
comment|/*!   Constructs an object that can be used to create a cryptographic hash from data using \a method. */
end_comment
begin_constructor
DECL|function|QCryptographicHash
name|QCryptographicHash
operator|::
name|QCryptographicHash
parameter_list|(
name|Algorithm
name|method
parameter_list|)
member_init_list|:
name|d
argument_list|(
operator|new
name|QCryptographicHashPrivate
argument_list|)
block|{
name|d
operator|->
name|method
operator|=
name|method
expr_stmt|;
name|reset
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!   Destroys the object. */
end_comment
begin_destructor
DECL|function|~QCryptographicHash
name|QCryptographicHash
operator|::
name|~
name|QCryptographicHash
parameter_list|()
block|{
operator|delete
name|d
expr_stmt|;
block|}
end_destructor
begin_comment
comment|/*!   Resets the object. */
end_comment
begin_function
DECL|function|reset
name|void
name|QCryptographicHash
operator|::
name|reset
parameter_list|()
block|{
switch|switch
condition|(
name|d
operator|->
name|method
condition|)
block|{
case|case
name|Md4
case|:
name|md4_init
argument_list|(
operator|&
name|d
operator|->
name|md4Context
argument_list|)
expr_stmt|;
break|break;
case|case
name|Md5
case|:
name|MD5Init
argument_list|(
operator|&
name|d
operator|->
name|md5Context
argument_list|)
expr_stmt|;
break|break;
case|case
name|Sha1
case|:
name|sha1InitState
argument_list|(
operator|&
name|d
operator|->
name|sha1Context
argument_list|)
expr_stmt|;
break|break;
block|}
name|d
operator|->
name|result
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Adds the first \a length chars of \a data to the cryptographic     hash. */
end_comment
begin_function
DECL|function|addData
name|void
name|QCryptographicHash
operator|::
name|addData
parameter_list|(
specifier|const
name|char
modifier|*
name|data
parameter_list|,
name|int
name|length
parameter_list|)
block|{
switch|switch
condition|(
name|d
operator|->
name|method
condition|)
block|{
case|case
name|Md4
case|:
name|md4_update
argument_list|(
operator|&
name|d
operator|->
name|md4Context
argument_list|,
operator|(
specifier|const
name|unsigned
name|char
operator|*
operator|)
name|data
argument_list|,
name|length
argument_list|)
expr_stmt|;
break|break;
case|case
name|Md5
case|:
name|MD5Update
argument_list|(
operator|&
name|d
operator|->
name|md5Context
argument_list|,
operator|(
specifier|const
name|unsigned
name|char
operator|*
operator|)
name|data
argument_list|,
name|length
argument_list|)
expr_stmt|;
break|break;
case|case
name|Sha1
case|:
name|sha1Update
argument_list|(
operator|&
name|d
operator|->
name|sha1Context
argument_list|,
operator|(
specifier|const
name|unsigned
name|char
operator|*
operator|)
name|data
argument_list|,
name|length
argument_list|)
expr_stmt|;
break|break;
block|}
name|d
operator|->
name|result
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \overload addData() */
end_comment
begin_function
DECL|function|addData
name|void
name|QCryptographicHash
operator|::
name|addData
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|data
parameter_list|)
block|{
name|addData
argument_list|(
name|data
operator|.
name|constData
argument_list|()
argument_list|,
name|data
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Reads the data from the open QIODevice \a device until it ends   and hashes it. Returns true if reading was successful.  */
end_comment
begin_function
DECL|function|addData
name|bool
name|QCryptographicHash
operator|::
name|addData
parameter_list|(
name|QIODevice
modifier|*
name|device
parameter_list|)
block|{
if|if
condition|(
operator|!
name|device
operator|->
name|isReadable
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|device
operator|->
name|isOpen
argument_list|()
condition|)
return|return
literal|false
return|;
name|char
name|buffer
index|[
literal|1024
index|]
decl_stmt|;
name|int
name|length
decl_stmt|;
while|while
condition|(
operator|(
name|length
operator|=
name|device
operator|->
name|read
argument_list|(
name|buffer
argument_list|,
sizeof|sizeof
argument_list|(
name|buffer
argument_list|)
argument_list|)
operator|)
operator|>
literal|0
condition|)
name|addData
argument_list|(
name|buffer
argument_list|,
name|length
argument_list|)
expr_stmt|;
return|return
name|device
operator|->
name|atEnd
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!   Returns the final hash value.    \sa QByteArray::toHex() */
end_comment
begin_function
DECL|function|result
name|QByteArray
name|QCryptographicHash
operator|::
name|result
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|d
operator|->
name|result
return|;
switch|switch
condition|(
name|d
operator|->
name|method
condition|)
block|{
case|case
name|Md4
case|:
block|{
name|md4_context
name|copy
init|=
name|d
operator|->
name|md4Context
decl_stmt|;
name|d
operator|->
name|result
operator|.
name|resize
argument_list|(
name|MD4_RESULTLEN
argument_list|)
expr_stmt|;
name|md4_final
argument_list|(
operator|&
name|copy
argument_list|,
operator|(
name|unsigned
name|char
operator|*
operator|)
name|d
operator|->
name|result
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|Md5
case|:
block|{
name|MD5Context
name|copy
init|=
name|d
operator|->
name|md5Context
decl_stmt|;
name|d
operator|->
name|result
operator|.
name|resize
argument_list|(
literal|16
argument_list|)
expr_stmt|;
name|MD5Final
argument_list|(
operator|&
name|copy
argument_list|,
operator|(
name|unsigned
name|char
operator|*
operator|)
name|d
operator|->
name|result
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|Sha1
case|:
block|{
name|Sha1State
name|copy
init|=
name|d
operator|->
name|sha1Context
decl_stmt|;
name|d
operator|->
name|result
operator|.
name|resize
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|sha1FinalizeState
argument_list|(
operator|&
name|copy
argument_list|)
expr_stmt|;
name|sha1ToHash
argument_list|(
operator|&
name|copy
argument_list|,
operator|(
name|unsigned
name|char
operator|*
operator|)
name|d
operator|->
name|result
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|d
operator|->
name|result
return|;
block|}
end_function
begin_comment
comment|/*!   Returns the hash of \a data using \a method. */
end_comment
begin_function
DECL|function|hash
name|QByteArray
name|QCryptographicHash
operator|::
name|hash
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|data
parameter_list|,
name|Algorithm
name|method
parameter_list|)
block|{
name|QCryptographicHash
name|hash
argument_list|(
name|method
argument_list|)
decl_stmt|;
name|hash
operator|.
name|addData
argument_list|(
name|data
argument_list|)
expr_stmt|;
return|return
name|hash
operator|.
name|result
argument_list|()
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
