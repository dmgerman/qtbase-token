begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QDATETIME_P_H
end_ifndef
begin_define
DECL|macro|QDATETIME_P_H
define|#
directive|define
name|QDATETIME_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists purely as an
end_comment
begin_comment
comment|// implementation detail.  This header file may change from version to
end_comment
begin_comment
comment|// version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"qplatformdefs.h"
end_include
begin_include
include|#
directive|include
file|"QtCore/qatomic.h"
end_include
begin_include
include|#
directive|include
file|"QtCore/qdatetime.h"
end_include
begin_include
include|#
directive|include
file|"QtCore/qstringlist.h"
end_include
begin_include
include|#
directive|include
file|"QtCore/qlocale.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_BOOTSTRAPPED
end_ifndef
begin_include
include|#
directive|include
file|"QtCore/qvariant.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|"QtCore/qvector.h"
end_include
begin_define
DECL|macro|QDATETIMEEDIT_TIME_MIN
define|#
directive|define
name|QDATETIMEEDIT_TIME_MIN
value|QTime(0, 0, 0, 0)
end_define
begin_define
DECL|macro|QDATETIMEEDIT_TIME_MAX
define|#
directive|define
name|QDATETIMEEDIT_TIME_MAX
value|QTime(23, 59, 59, 999)
end_define
begin_define
DECL|macro|QDATETIMEEDIT_DATE_MIN
define|#
directive|define
name|QDATETIMEEDIT_DATE_MIN
value|QDate(100, 1, 1)
end_define
begin_define
DECL|macro|QDATETIMEEDIT_COMPAT_DATE_MIN
define|#
directive|define
name|QDATETIMEEDIT_COMPAT_DATE_MIN
value|QDate(1752, 9, 14)
end_define
begin_define
DECL|macro|QDATETIMEEDIT_DATE_MAX
define|#
directive|define
name|QDATETIMEEDIT_DATE_MAX
value|QDate(7999, 12, 31)
end_define
begin_define
DECL|macro|QDATETIMEEDIT_DATETIME_MIN
define|#
directive|define
name|QDATETIMEEDIT_DATETIME_MIN
value|QDateTime(QDATETIMEEDIT_DATE_MIN, QDATETIMEEDIT_TIME_MIN)
end_define
begin_define
DECL|macro|QDATETIMEEDIT_COMPAT_DATETIME_MIN
define|#
directive|define
name|QDATETIMEEDIT_COMPAT_DATETIME_MIN
value|QDateTime(QDATETIMEEDIT_COMPAT_DATE_MIN, QDATETIMEEDIT_TIME_MIN)
end_define
begin_define
DECL|macro|QDATETIMEEDIT_DATETIME_MAX
define|#
directive|define
name|QDATETIMEEDIT_DATETIME_MAX
value|QDateTime(QDATETIMEEDIT_DATE_MAX, QDATETIMEEDIT_TIME_MAX)
end_define
begin_define
DECL|macro|QDATETIMEEDIT_DATE_INITIAL
define|#
directive|define
name|QDATETIMEEDIT_DATE_INITIAL
value|QDate(2000, 1, 1)
end_define
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
name|class
name|QDateTimePrivate
range|:
name|public
name|QSharedData
block|{
name|public
operator|:
expr|enum
name|Spec
block|{
name|LocalUnknown
operator|=
operator|-
literal|1
block|,
name|LocalStandard
operator|=
literal|0
block|,
name|LocalDST
operator|=
literal|1
block|,
name|UTC
operator|=
literal|2
block|,
name|OffsetFromUTC
operator|=
literal|3
block|}
block|;
name|QDateTimePrivate
argument_list|()
operator|:
name|spec
argument_list|(
name|LocalUnknown
argument_list|)
block|,
name|m_offsetFromUtc
argument_list|(
literal|0
argument_list|)
block|{}
name|QDateTimePrivate
argument_list|(
argument|const QDate&toDate
argument_list|,
argument|const QTime&toTime
argument_list|,
argument|Qt::TimeSpec toSpec
argument_list|,
argument|int offsetSeconds
argument_list|)
block|;
name|QDateTimePrivate
argument_list|(
specifier|const
name|QDateTimePrivate
operator|&
name|other
argument_list|)
operator|:
name|QSharedData
argument_list|(
name|other
argument_list|)
block|,
name|date
argument_list|(
name|other
operator|.
name|date
argument_list|)
block|,
name|time
argument_list|(
name|other
operator|.
name|time
argument_list|)
block|,
name|spec
argument_list|(
name|other
operator|.
name|spec
argument_list|)
block|,
name|m_offsetFromUtc
argument_list|(
argument|other.m_offsetFromUtc
argument_list|)
block|{}
name|QDate
name|date
block|;
name|QTime
name|time
block|;
name|Spec
name|spec
block|;
name|int
name|m_offsetFromUtc
block|;
comment|// Get current date/time in LocalTime and put result in outDate and outTime
name|Spec
name|getLocal
argument_list|(
argument|QDate&outDate
argument_list|,
argument|QTime&outTime
argument_list|)
specifier|const
block|;
comment|// Get current date/time in UTC and put result in outDate and outTime
name|void
name|getUTC
argument_list|(
argument|QDate&outDate
argument_list|,
argument|QTime&outTime
argument_list|)
specifier|const
block|;
comment|// Add msecs to given datetime and return result
specifier|static
name|QDateTime
name|addMSecs
argument_list|(
argument|const QDateTime&dt
argument_list|,
argument|qint64 msecs
argument_list|)
block|;
comment|// Add msecs to given datetime and put result in utcDate and utcTime
specifier|static
name|void
name|addMSecs
argument_list|(
argument|QDate&utcDate
argument_list|,
argument|QTime&utcTime
argument_list|,
argument|qint64 msecs
argument_list|)
block|;
specifier|static
specifier|inline
name|qint64
name|minJd
argument_list|()
block|{
return|return
name|QDate
operator|::
name|minJd
argument_list|()
return|;
block|}
specifier|static
specifier|inline
name|qint64
name|maxJd
argument_list|()
block|{
return|return
name|QDate
operator|::
name|maxJd
argument_list|()
return|;
block|}
expr|}
block|;
ifndef|#
directive|ifndef
name|QT_BOOTSTRAPPED
name|class
name|Q_CORE_EXPORT
name|QDateTimeParser
block|{
name|public
operator|:
expr|enum
name|Context
block|{
name|FromString
block|,
name|DateTimeEdit
block|}
block|;
name|QDateTimeParser
argument_list|(
argument|QVariant::Type t
argument_list|,
argument|Context ctx
argument_list|)
operator|:
name|currentSectionIndex
argument_list|(
operator|-
literal|1
argument_list|)
block|,
name|display
argument_list|(
literal|0
argument_list|)
block|,
name|cachedDay
argument_list|(
operator|-
literal|1
argument_list|)
block|,
name|parserType
argument_list|(
name|t
argument_list|)
block|,
name|fixday
argument_list|(
name|false
argument_list|)
block|,
name|spec
argument_list|(
name|Qt
operator|::
name|LocalTime
argument_list|)
block|,
name|context
argument_list|(
argument|ctx
argument_list|)
block|{
name|defaultLocale
operator|=
name|QLocale
operator|::
name|system
argument_list|()
block|;
name|first
operator|.
name|type
operator|=
name|FirstSection
block|;
name|first
operator|.
name|pos
operator|=
operator|-
literal|1
block|;
name|first
operator|.
name|count
operator|=
operator|-
literal|1
block|;
name|first
operator|.
name|zeroesAdded
operator|=
literal|0
block|;
name|last
operator|.
name|type
operator|=
name|FirstSection
block|;
name|last
operator|.
name|pos
operator|=
operator|-
literal|1
block|;
name|last
operator|.
name|count
operator|=
operator|-
literal|1
block|;
name|last
operator|.
name|zeroesAdded
operator|=
literal|0
block|;
name|none
operator|.
name|type
operator|=
name|NoSection
block|;
name|none
operator|.
name|pos
operator|=
operator|-
literal|1
block|;
name|none
operator|.
name|count
operator|=
operator|-
literal|1
block|;
name|none
operator|.
name|zeroesAdded
operator|=
literal|0
block|;     }
name|virtual
operator|~
name|QDateTimeParser
argument_list|()
block|{}
expr|enum
block|{
name|Neither
operator|=
operator|-
literal|1
block|,
name|AM
operator|=
literal|0
block|,
name|PM
operator|=
literal|1
block|,
name|PossibleAM
operator|=
literal|2
block|,
name|PossiblePM
operator|=
literal|3
block|,
name|PossibleBoth
operator|=
literal|4
block|}
block|;      enum
name|Section
block|{
name|NoSection
operator|=
literal|0x00000
block|,
name|AmPmSection
operator|=
literal|0x00001
block|,
name|MSecSection
operator|=
literal|0x00002
block|,
name|SecondSection
operator|=
literal|0x00004
block|,
name|MinuteSection
operator|=
literal|0x00008
block|,
name|Hour12Section
operator|=
literal|0x00010
block|,
name|Hour24Section
operator|=
literal|0x00020
block|,
name|TimeSectionMask
operator|=
operator|(
name|AmPmSection
operator||
name|MSecSection
operator||
name|SecondSection
operator||
name|MinuteSection
operator||
name|Hour12Section
operator||
name|Hour24Section
operator|)
block|,
name|Internal
operator|=
literal|0x10000
block|,
name|DaySection
operator|=
literal|0x00100
block|,
name|MonthSection
operator|=
literal|0x00200
block|,
name|YearSection
operator|=
literal|0x00400
block|,
name|YearSection2Digits
operator|=
literal|0x00800
block|,
name|DayOfWeekSectionShort
operator|=
literal|0x01000
block|,
name|DayOfWeekSectionLong
operator|=
literal|0x20000
block|,
name|DateSectionMask
operator|=
operator|(
name|DaySection
operator||
name|MonthSection
operator||
name|YearSection
operator||
name|YearSection2Digits
operator||
name|DayOfWeekSectionShort
operator||
name|DayOfWeekSectionLong
operator|)
block|,
name|FirstSection
operator|=
literal|0x02000
operator||
name|Internal
block|,
name|LastSection
operator|=
literal|0x04000
operator||
name|Internal
block|,
name|CalendarPopupSection
operator|=
literal|0x08000
operator||
name|Internal
block|,
name|NoSectionIndex
operator|=
operator|-
literal|1
block|,
name|FirstSectionIndex
operator|=
operator|-
literal|2
block|,
name|LastSectionIndex
operator|=
operator|-
literal|3
block|,
name|CalendarPopupIndex
operator|=
operator|-
literal|4
block|}
block|;
comment|// duplicated from qdatetimeedit.h
name|Q_DECLARE_FLAGS
argument_list|(
argument|Sections
argument_list|,
argument|Section
argument_list|)
block|struct
name|SectionNode
block|{
name|Section
name|type
block|;
name|mutable
name|int
name|pos
block|;
name|int
name|count
block|;
name|int
name|zeroesAdded
block|;     }
block|;      enum
name|State
block|{
comment|// duplicated from QValidator
name|Invalid
block|,
name|Intermediate
block|,
name|Acceptable
block|}
block|;      struct
name|StateNode
block|{
name|StateNode
argument_list|()
operator|:
name|state
argument_list|(
name|Invalid
argument_list|)
block|,
name|conflicts
argument_list|(
argument|false
argument_list|)
block|{}
name|QString
name|input
block|;
name|State
name|state
block|;
name|bool
name|conflicts
block|;
name|QDateTime
name|value
block|;     }
block|;      enum
name|AmPm
block|{
name|AmText
block|,
name|PmText
block|}
block|;      enum
name|Case
block|{
name|UpperCase
block|,
name|LowerCase
block|}
block|;
ifndef|#
directive|ifndef
name|QT_NO_DATESTRING
name|StateNode
name|parse
argument_list|(
argument|QString&input
argument_list|,
argument|int&cursorPosition
argument_list|,
argument|const QDateTime&currentValue
argument_list|,
argument|bool fixup
argument_list|)
specifier|const
block|;
endif|#
directive|endif
name|int
name|sectionMaxSize
argument_list|(
argument|int index
argument_list|)
specifier|const
block|;
name|int
name|sectionSize
argument_list|(
argument|int index
argument_list|)
specifier|const
block|;
name|int
name|sectionMaxSize
argument_list|(
argument|Section s
argument_list|,
argument|int count
argument_list|)
specifier|const
block|;
name|int
name|sectionPos
argument_list|(
argument|int index
argument_list|)
specifier|const
block|;
name|int
name|sectionPos
argument_list|(
argument|const SectionNode&sn
argument_list|)
specifier|const
block|;
specifier|const
name|SectionNode
operator|&
name|sectionNode
argument_list|(
argument|int index
argument_list|)
specifier|const
block|;
name|Section
name|sectionType
argument_list|(
argument|int index
argument_list|)
specifier|const
block|;
name|QString
name|sectionText
argument_list|(
argument|int sectionIndex
argument_list|)
specifier|const
block|;
name|QString
name|sectionText
argument_list|(
argument|const QString&text
argument_list|,
argument|int sectionIndex
argument_list|,
argument|int index
argument_list|)
specifier|const
block|;
name|int
name|getDigit
argument_list|(
argument|const QDateTime&dt
argument_list|,
argument|int index
argument_list|)
specifier|const
block|;
name|bool
name|setDigit
argument_list|(
argument|QDateTime&t
argument_list|,
argument|int index
argument_list|,
argument|int newval
argument_list|)
specifier|const
block|;
name|int
name|parseSection
argument_list|(
argument|const QDateTime&currentValue
argument_list|,
argument|int sectionIndex
argument_list|,
argument|QString&txt
argument_list|,
argument|int&cursorPosition
argument_list|,
argument|int index
argument_list|,
argument|QDateTimeParser::State&state
argument_list|,
argument|int *used =
literal|0
argument_list|)
specifier|const
block|;
name|int
name|absoluteMax
argument_list|(
argument|int index
argument_list|,
argument|const QDateTime&value = QDateTime()
argument_list|)
specifier|const
block|;
name|int
name|absoluteMin
argument_list|(
argument|int index
argument_list|)
specifier|const
block|;
name|bool
name|parseFormat
argument_list|(
specifier|const
name|QString
operator|&
name|format
argument_list|)
block|;
ifndef|#
directive|ifndef
name|QT_NO_DATESTRING
name|bool
name|fromString
argument_list|(
argument|const QString&text
argument_list|,
argument|QDate *date
argument_list|,
argument|QTime *time
argument_list|)
specifier|const
block|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_TEXTDATE
name|int
name|findMonth
argument_list|(
argument|const QString&str1
argument_list|,
argument|int monthstart
argument_list|,
argument|int sectionIndex
argument_list|,
argument|QString *monthName =
literal|0
argument_list|,
argument|int *used =
literal|0
argument_list|)
specifier|const
block|;
name|int
name|findDay
argument_list|(
argument|const QString&str1
argument_list|,
argument|int intDaystart
argument_list|,
argument|int sectionIndex
argument_list|,
argument|QString *dayName =
literal|0
argument_list|,
argument|int *used =
literal|0
argument_list|)
specifier|const
block|;
endif|#
directive|endif
name|int
name|findAmPm
argument_list|(
argument|QString&str1
argument_list|,
argument|int index
argument_list|,
argument|int *used =
literal|0
argument_list|)
specifier|const
block|;
name|int
name|maxChange
argument_list|(
argument|int s
argument_list|)
specifier|const
block|;
name|bool
name|potentialValue
argument_list|(
argument|const QString&str
argument_list|,
argument|int min
argument_list|,
argument|int max
argument_list|,
argument|int index
argument_list|,
argument|const QDateTime&currentValue
argument_list|,
argument|int insert
argument_list|)
specifier|const
block|;
name|bool
name|skipToNextSection
argument_list|(
argument|int section
argument_list|,
argument|const QDateTime&current
argument_list|,
argument|const QString&sectionText
argument_list|)
specifier|const
block|;
name|QString
name|sectionName
argument_list|(
argument|int s
argument_list|)
specifier|const
block|;
name|QString
name|stateName
argument_list|(
argument|int s
argument_list|)
specifier|const
block|;
name|QString
name|sectionFormat
argument_list|(
argument|int index
argument_list|)
specifier|const
block|;
name|QString
name|sectionFormat
argument_list|(
argument|Section s
argument_list|,
argument|int count
argument_list|)
specifier|const
block|;      enum
name|FieldInfoFlag
block|{
name|Numeric
operator|=
literal|0x01
block|,
name|FixedWidth
operator|=
literal|0x02
block|,
name|AllowPartial
operator|=
literal|0x04
block|,
name|Fraction
operator|=
literal|0x08
block|}
block|;
name|Q_DECLARE_FLAGS
argument_list|(
argument|FieldInfo
argument_list|,
argument|FieldInfoFlag
argument_list|)
name|FieldInfo
name|fieldInfo
argument_list|(
argument|int index
argument_list|)
specifier|const
block|;
name|virtual
name|QDateTime
name|getMinimum
argument_list|()
specifier|const
block|;
name|virtual
name|QDateTime
name|getMaximum
argument_list|()
specifier|const
block|;
name|virtual
name|int
name|cursorPosition
argument_list|()
specifier|const
block|{
return|return
operator|-
literal|1
return|;
block|}
name|virtual
name|QString
name|displayText
argument_list|()
specifier|const
block|{
return|return
name|text
return|;
block|}
name|virtual
name|QString
name|getAmPmText
argument_list|(
argument|AmPm ap
argument_list|,
argument|Case cs
argument_list|)
specifier|const
block|;
name|virtual
name|QLocale
name|locale
argument_list|()
specifier|const
block|{
return|return
name|defaultLocale
return|;
block|}
name|mutable
name|int
name|currentSectionIndex
block|;
name|Sections
name|display
block|;
comment|/*         This stores the stores the most recently selected day.         It is useful when considering the following scenario:          1. Date is: 31/01/2000         2. User increments month: 29/02/2000         3. User increments month: 31/03/2000          At step 1, cachedDay stores 31. At step 2, the 31 is invalid for February, so the cachedDay is not updated.         At step 3, the the month is changed to March, for which 31 is a valid day. Since 29< 31, the day is set to cachedDay.         This is good for when users have selected their desired day and are scrolling up or down in the month or year section         and do not want smaller months (or non-leap years) to alter the day that they chose.     */
name|mutable
name|int
name|cachedDay
block|;
name|mutable
name|QString
name|text
block|;
name|QVector
operator|<
name|SectionNode
operator|>
name|sectionNodes
block|;
name|SectionNode
name|first
block|,
name|last
block|,
name|none
block|,
name|popup
block|;
name|QStringList
name|separators
block|;
name|QString
name|displayFormat
block|;
name|QLocale
name|defaultLocale
block|;
name|QVariant
operator|::
name|Type
name|parserType
block|;
name|bool
name|fixday
block|;
name|Qt
operator|::
name|TimeSpec
name|spec
block|;
comment|// spec if used by QDateTimeEdit
name|Context
name|context
block|; }
block|;
name|Q_CORE_EXPORT
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QDateTimeParser
operator|::
name|SectionNode
operator|&
name|s1
expr|,
specifier|const
name|QDateTimeParser
operator|::
name|SectionNode
operator|&
name|s2
operator|)
block|;
name|Q_DECLARE_OPERATORS_FOR_FLAGS
argument_list|(
argument|QDateTimeParser::Sections
argument_list|)
name|Q_DECLARE_OPERATORS_FOR_FLAGS
argument_list|(
argument|QDateTimeParser::FieldInfo
argument_list|)
endif|#
directive|endif
comment|// QT_BOOTSTRAPPED
name|QT_END_NAMESPACE
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QDATETIME_P_H
end_comment
end_unit
