begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|/*  | *property* | *Used for type* | | period     | QEasingCurve::{In,Out,InOut,OutIn}Elastic | | amplitude  | QEasingCurve::{In,Out,InOut,OutIn}Bounce, QEasingCurve::{In,Out,InOut,OutIn}Elastic | | overshoot  | QEasingCurve::{In,Out,InOut,OutIn}Back   |  */
end_comment
begin_comment
comment|/*!     \class QEasingCurve     \since 4.6     \ingroup animation     \brief The QEasingCurve class provides easing curves for controlling animation.      Easing curves describe a function that controls how the speed of the interpolation     between 0 and 1 should be. Easing curves allow transitions from     one value to another to appear more natural than a simple constant speed would allow.     The QEasingCurve class is usually used in conjunction with the QVariantAnimation and     QPropertyAnimation classes but can be used on its own. It is usually used to accelerate     the interpolation from zero velocity (ease in) or decelerate to zero velocity (ease out).     Ease in and ease out can also be combined in the same easing curve.      To calculate the speed of the interpolation, the easing curve provides the function     valueForProgress(), where the \a progress argument specifies the progress of the     interpolation: 0 is the start value of the interpolation, 1 is the end value of the     interpolation. The returned value is the effective progress of the interpolation.     If the returned value is the same as the input value for all input values the easing     curve is a linear curve. This is the default behaviour.      For example,     \code     QEasingCurve easing(QEasingCurve::InOutQuad);      for(qreal t = 0.0; t< 1.0; t+=0.1)         qWarning()<< "Effective progress"<< t<< " is<< easing.valueForProgress(t);     \endcode     will print the effective progress of the interpolation between 0 and 1.      When using a QPropertyAnimation, the associated easing curve will be used to control the     progress of the interpolation between startValue and endValue:     \code     QPropertyAnimation animation;     animation.setStartValue(0);     animation.setEndValue(1000);     animation.setDuration(1000);     animation.setEasingCurve(QEasingCurve::InOutQuad);     \endcode      The ability to set an amplitude, overshoot, or period depends on     the QEasingCurve type. Amplitude access is available to curves     that behave as springs such as elastic and bounce curves. Changing     the amplitude changes the height of the curve. Period access is     only available to elastic curves and setting a higher period slows     the rate of bounce. Only curves that have "boomerang" behaviors     such as the InBack, OutBack, InOutBack, and OutInBack have     overshoot settings. These curves will interpolate beyond the end     points and return to the end point, acting similar to a boomerang.      The \l{Easing Curves Example} contains samples of QEasingCurve     types and lets you change the curve settings.   */
end_comment
begin_comment
comment|/*!     \enum QEasingCurve::Type      The type of easing curve.      \value Linear       \inlineimage qeasingcurve-linear.png                         \br                         Easing curve for a linear (t) function:                         velocity is constant.     \value InQuad       \inlineimage qeasingcurve-inquad.png                         \br                         Easing curve for a quadratic (t^2) function:                         accelerating from zero velocity.     \value OutQuad      \inlineimage qeasingcurve-outquad.png                         \br                         Easing curve for a quadratic (t^2) function:                         decelerating to zero velocity.     \value InOutQuad    \inlineimage qeasingcurve-inoutquad.png                         \br                         Easing curve for a quadratic (t^2) function:                         acceleration until halfway, then deceleration.     \value OutInQuad    \inlineimage qeasingcurve-outinquad.png                         \br                         Easing curve for a quadratic (t^2) function:                         deceleration until halfway, then acceleration.     \value InCubic      \inlineimage qeasingcurve-incubic.png                         \br                         Easing curve for a cubic (t^3) function:                         accelerating from zero velocity.     \value OutCubic     \inlineimage qeasingcurve-outcubic.png                         \br                         Easing curve for a cubic (t^3) function:                         decelerating to zero velocity.     \value InOutCubic   \inlineimage qeasingcurve-inoutcubic.png                         \br                         Easing curve for a cubic (t^3) function:                         acceleration until halfway, then deceleration.     \value OutInCubic   \inlineimage qeasingcurve-outincubic.png                         \br                         Easing curve for a cubic (t^3) function:                         deceleration until halfway, then acceleration.     \value InQuart      \inlineimage qeasingcurve-inquart.png                         \br                         Easing curve for a quartic (t^4) function:                         accelerating from zero velocity.     \value OutQuart     \inlineimage qeasingcurve-outquart.png                         \br                         Easing curve for a quartic (t^4) function:                         decelerating to zero velocity.     \value InOutQuart   \inlineimage qeasingcurve-inoutquart.png                         \br                         Easing curve for a quartic (t^4) function:                         acceleration until halfway, then deceleration.     \value OutInQuart   \inlineimage qeasingcurve-outinquart.png                         \br                         Easing curve for a quartic (t^4) function:                         deceleration until halfway, then acceleration.     \value InQuint      \inlineimage qeasingcurve-inquint.png                         \br                         Easing curve for a quintic (t^5) easing                         in: accelerating from zero velocity.     \value OutQuint     \inlineimage qeasingcurve-outquint.png                         \br                         Easing curve for a quintic (t^5) function:                         decelerating to zero velocity.     \value InOutQuint   \inlineimage qeasingcurve-inoutquint.png                         \br                         Easing curve for a quintic (t^5) function:                         acceleration until halfway, then deceleration.     \value OutInQuint   \inlineimage qeasingcurve-outinquint.png                         \br                         Easing curve for a quintic (t^5) function:                         deceleration until halfway, then acceleration.     \value InSine       \inlineimage qeasingcurve-insine.png                         \br                         Easing curve for a sinusoidal (sin(t)) function:                         accelerating from zero velocity.     \value OutSine      \inlineimage qeasingcurve-outsine.png                         \br                         Easing curve for a sinusoidal (sin(t)) function:                         decelerating from zero velocity.     \value InOutSine    \inlineimage qeasingcurve-inoutsine.png                         \br                         Easing curve for a sinusoidal (sin(t)) function:                         acceleration until halfway, then deceleration.     \value OutInSine    \inlineimage qeasingcurve-outinsine.png                         \br                         Easing curve for a sinusoidal (sin(t)) function:                         deceleration until halfway, then acceleration.     \value InExpo       \inlineimage qeasingcurve-inexpo.png                         \br                         Easing curve for an exponential (2^t) function:                         accelerating from zero velocity.     \value OutExpo      \inlineimage qeasingcurve-outexpo.png                         \br                         Easing curve for an exponential (2^t) function:                         decelerating from zero velocity.     \value InOutExpo    \inlineimage qeasingcurve-inoutexpo.png                         \br                         Easing curve for an exponential (2^t) function:                         acceleration until halfway, then deceleration.     \value OutInExpo    \inlineimage qeasingcurve-outinexpo.png                         \br                         Easing curve for an exponential (2^t) function:                         deceleration until halfway, then acceleration.     \value InCirc       \inlineimage qeasingcurve-incirc.png                         \br                         Easing curve for a circular (sqrt(1-t^2)) function:                         accelerating from zero velocity.     \value OutCirc      \inlineimage qeasingcurve-outcirc.png                         \br                         Easing curve for a circular (sqrt(1-t^2)) function:                         decelerating from zero velocity.     \value InOutCirc    \inlineimage qeasingcurve-inoutcirc.png                         \br                         Easing curve for a circular (sqrt(1-t^2)) function:                         acceleration until halfway, then deceleration.     \value OutInCirc    \inlineimage qeasingcurve-outincirc.png                         \br                         Easing curve for a circular (sqrt(1-t^2)) function:                         deceleration until halfway, then acceleration.     \value InElastic    \inlineimage qeasingcurve-inelastic.png                         \br                         Easing curve for an elastic                         (exponentially decaying sine wave) function:                         accelerating from zero velocity.  The peak amplitude                         can be set with the \e amplitude parameter, and the                         period of decay by the \e period parameter.     \value OutElastic   \inlineimage qeasingcurve-outelastic.png                         \br                         Easing curve for an elastic                         (exponentially decaying sine wave) function:                         decelerating from zero velocity.  The peak amplitude                         can be set with the \e amplitude parameter, and the                         period of decay by the \e period parameter.     \value InOutElastic \inlineimage qeasingcurve-inoutelastic.png                         \br                         Easing curve for an elastic                         (exponentially decaying sine wave) function:                         acceleration until halfway, then deceleration.     \value OutInElastic \inlineimage qeasingcurve-outinelastic.png                         \br                         Easing curve for an elastic                         (exponentially decaying sine wave) function:                         deceleration until halfway, then acceleration.     \value InBack       \inlineimage qeasingcurve-inback.png                         \br                         Easing curve for a back (overshooting                         cubic function: (s+1)*t^3 - s*t^2) easing in:                         accelerating from zero velocity.     \value OutBack      \inlineimage qeasingcurve-outback.png                         \br                         Easing curve for a back (overshooting                         cubic function: (s+1)*t^3 - s*t^2) easing out:                         decelerating to zero velocity.     \value InOutBack    \inlineimage qeasingcurve-inoutback.png                         \br                         Easing curve for a back (overshooting                         cubic function: (s+1)*t^3 - s*t^2) easing in/out:                         acceleration until halfway, then deceleration.     \value OutInBack    \inlineimage qeasingcurve-outinback.png                         \br                         Easing curve for a back (overshooting                         cubic easing: (s+1)*t^3 - s*t^2) easing out/in:                         deceleration until halfway, then acceleration.     \value InBounce     \inlineimage qeasingcurve-inbounce.png                         \br                         Easing curve for a bounce (exponentially                         decaying parabolic bounce) function: accelerating                         from zero velocity.     \value OutBounce    \inlineimage qeasingcurve-outbounce.png                         \br                         Easing curve for a bounce (exponentially                         decaying parabolic bounce) function: decelerating                         from zero velocity.     \value InOutBounce  \inlineimage qeasingcurve-inoutbounce.png                         \br                         Easing curve for a bounce (exponentially                         decaying parabolic bounce) function easing in/out:                         acceleration until halfway, then deceleration.     \value OutInBounce  \inlineimage qeasingcurve-outinbounce.png                         \br                         Easing curve for a bounce (exponentially                         decaying parabolic bounce) function easing out/in:                         deceleration until halfway, then acceleration.     \omitvalue InCurve     \omitvalue OutCurve     \omitvalue SineCurve     \omitvalue CosineCurve     \value Custom       This is returned if the user specified a custom curve type with                         setCustomType(). Note that you cannot call setType() with this value,                         but type() can return it.     \omitvalue NCurveTypes */
end_comment
begin_comment
comment|/*!     \typedef QEasingCurve::EasingFunction      This is a typedef for a pointer to a function with the following     signature:      \snippet doc/src/snippets/code/src_corelib_tools_qeasingcurve.cpp 0 */
end_comment
begin_include
include|#
directive|include
file|"qeasingcurve.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DEBUG_STREAM
end_ifndef
begin_include
include|#
directive|include
file|<QtCore/qdebug.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qstring.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DATASTREAM
end_ifndef
begin_include
include|#
directive|include
file|<QtCore/qdatastream.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|isConfigFunction
specifier|static
name|bool
name|isConfigFunction
parameter_list|(
name|QEasingCurve
operator|::
name|Type
name|type
parameter_list|)
block|{
return|return
name|type
operator|>=
name|QEasingCurve
operator|::
name|InElastic
operator|&&
name|type
operator|<=
name|QEasingCurve
operator|::
name|OutInBounce
return|;
block|}
end_function
begin_class
DECL|class|QEasingCurveFunction
class|class
name|QEasingCurveFunction
block|{
public|public:
DECL|enum|Type
DECL|enumerator|In
DECL|enumerator|Out
DECL|enumerator|InOut
DECL|enumerator|OutIn
enum|enum
name|Type
block|{
name|In
block|,
name|Out
block|,
name|InOut
block|,
name|OutIn
block|}
enum|;
DECL|function|QEasingCurveFunction
name|QEasingCurveFunction
parameter_list|(
name|QEasingCurveFunction
operator|::
name|Type
name|type
init|=
name|In
parameter_list|,
name|qreal
name|period
init|=
literal|0.3
parameter_list|,
name|qreal
name|amplitude
init|=
literal|1.0
parameter_list|,
name|qreal
name|overshoot
init|=
literal|1.70158
parameter_list|)
member_init_list|:
name|_t
argument_list|(
name|type
argument_list|)
member_init_list|,
name|_p
argument_list|(
name|period
argument_list|)
member_init_list|,
name|_a
argument_list|(
name|amplitude
argument_list|)
member_init_list|,
name|_o
argument_list|(
name|overshoot
argument_list|)
block|{ }
DECL|function|~QEasingCurveFunction
specifier|virtual
name|~
name|QEasingCurveFunction
parameter_list|()
block|{}
specifier|virtual
name|qreal
name|value
parameter_list|(
name|qreal
name|t
parameter_list|)
function_decl|;
specifier|virtual
name|QEasingCurveFunction
modifier|*
name|copy
parameter_list|()
specifier|const
function_decl|;
name|bool
name|operator
name|==
parameter_list|(
specifier|const
name|QEasingCurveFunction
modifier|&
name|other
parameter_list|)
function_decl|;
DECL|member|_t
name|Type
name|_t
decl_stmt|;
DECL|member|_p
name|qreal
name|_p
decl_stmt|;
DECL|member|_a
name|qreal
name|_a
decl_stmt|;
DECL|member|_o
name|qreal
name|_o
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|value
name|qreal
name|QEasingCurveFunction
operator|::
name|value
parameter_list|(
name|qreal
name|t
parameter_list|)
block|{
return|return
name|t
return|;
block|}
end_function
begin_function
DECL|function|copy
name|QEasingCurveFunction
modifier|*
name|QEasingCurveFunction
operator|::
name|copy
parameter_list|()
specifier|const
block|{
return|return
operator|new
name|QEasingCurveFunction
argument_list|(
name|_t
argument_list|,
name|_p
argument_list|,
name|_a
argument_list|,
name|_o
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|operator ==
name|bool
name|QEasingCurveFunction
operator|::
name|operator
name|==
parameter_list|(
specifier|const
name|QEasingCurveFunction
modifier|&
name|other
parameter_list|)
block|{
return|return
name|_t
operator|==
name|other
operator|.
name|_t
operator|&&
name|qFuzzyCompare
argument_list|(
name|_p
argument_list|,
name|other
operator|.
name|_p
argument_list|)
operator|&&
name|qFuzzyCompare
argument_list|(
name|_a
argument_list|,
name|other
operator|.
name|_a
argument_list|)
operator|&&
name|qFuzzyCompare
argument_list|(
name|_o
argument_list|,
name|other
operator|.
name|_o
argument_list|)
return|;
block|}
end_function
begin_expr_stmt
name|QT_BEGIN_INCLUDE_NAMESPACE
include|#
directive|include
file|"../../3rdparty/easing/easing.cpp"
name|QT_END_INCLUDE_NAMESPACE
DECL|class|QEasingCurvePrivate
name|class
name|QEasingCurvePrivate
block|{
specifier|public
operator|:
DECL|function|QEasingCurvePrivate
name|QEasingCurvePrivate
argument_list|()
operator|:
name|type
argument_list|(
name|QEasingCurve
operator|::
name|Linear
argument_list|)
block|,
name|config
argument_list|(
literal|0
argument_list|)
block|,
name|func
argument_list|(
argument|&easeNone
argument_list|)
block|{ }
DECL|function|~QEasingCurvePrivate
operator|~
name|QEasingCurvePrivate
argument_list|()
block|{
operator|delete
name|config
block|; }
name|void
name|setType_helper
argument_list|(
name|QEasingCurve
operator|::
name|Type
argument_list|)
block|;
DECL|member|type
name|QEasingCurve
operator|::
name|Type
name|type
block|;
DECL|member|config
name|QEasingCurveFunction
operator|*
name|config
block|;
DECL|member|func
name|QEasingCurve
operator|::
name|EasingFunction
name|func
block|; }
expr_stmt|;
end_expr_stmt
begin_struct
DECL|struct|ElasticEase
struct|struct
name|ElasticEase
super|:
specifier|public
name|QEasingCurveFunction
block|{
DECL|function|ElasticEase
name|ElasticEase
parameter_list|(
name|Type
name|type
parameter_list|)
member_init_list|:
name|QEasingCurveFunction
argument_list|(
name|type
argument_list|,
name|qreal
argument_list|(
literal|0.3
argument_list|)
argument_list|,
name|qreal
argument_list|(
literal|1.0
argument_list|)
argument_list|)
block|{ }
DECL|function|copy
name|QEasingCurveFunction
modifier|*
name|copy
parameter_list|()
specifier|const
block|{
name|ElasticEase
modifier|*
name|rv
init|=
operator|new
name|ElasticEase
argument_list|(
name|_t
argument_list|)
decl_stmt|;
name|rv
operator|->
name|_p
operator|=
name|_p
expr_stmt|;
name|rv
operator|->
name|_a
operator|=
name|_a
expr_stmt|;
return|return
name|rv
return|;
block|}
DECL|function|value
name|qreal
name|value
parameter_list|(
name|qreal
name|t
parameter_list|)
block|{
name|qreal
name|p
init|=
operator|(
name|_p
operator|<
literal|0
operator|)
condition|?
name|qreal
argument_list|(
literal|0.3
argument_list|)
else|:
name|_p
decl_stmt|;
name|qreal
name|a
init|=
operator|(
name|_a
operator|<
literal|0
operator|)
condition|?
name|qreal
argument_list|(
literal|1.0
argument_list|)
else|:
name|_a
decl_stmt|;
switch|switch
condition|(
name|_t
condition|)
block|{
case|case
name|In
case|:
return|return
name|easeInElastic
argument_list|(
name|t
argument_list|,
name|a
argument_list|,
name|p
argument_list|)
return|;
case|case
name|Out
case|:
return|return
name|easeOutElastic
argument_list|(
name|t
argument_list|,
name|a
argument_list|,
name|p
argument_list|)
return|;
case|case
name|InOut
case|:
return|return
name|easeInOutElastic
argument_list|(
name|t
argument_list|,
name|a
argument_list|,
name|p
argument_list|)
return|;
case|case
name|OutIn
case|:
return|return
name|easeOutInElastic
argument_list|(
name|t
argument_list|,
name|a
argument_list|,
name|p
argument_list|)
return|;
default|default:
return|return
name|t
return|;
block|}
block|}
block|}
struct|;
end_struct
begin_struct
DECL|struct|BounceEase
struct|struct
name|BounceEase
super|:
specifier|public
name|QEasingCurveFunction
block|{
DECL|function|BounceEase
name|BounceEase
parameter_list|(
name|Type
name|type
parameter_list|)
member_init_list|:
name|QEasingCurveFunction
argument_list|(
name|type
argument_list|,
name|qreal
argument_list|(
literal|0.3
argument_list|)
argument_list|,
name|qreal
argument_list|(
literal|1.0
argument_list|)
argument_list|)
block|{ }
DECL|function|copy
name|QEasingCurveFunction
modifier|*
name|copy
parameter_list|()
specifier|const
block|{
name|BounceEase
modifier|*
name|rv
init|=
operator|new
name|BounceEase
argument_list|(
name|_t
argument_list|)
decl_stmt|;
name|rv
operator|->
name|_a
operator|=
name|_a
expr_stmt|;
return|return
name|rv
return|;
block|}
DECL|function|value
name|qreal
name|value
parameter_list|(
name|qreal
name|t
parameter_list|)
block|{
name|qreal
name|a
init|=
operator|(
name|_a
operator|<
literal|0
operator|)
condition|?
name|qreal
argument_list|(
literal|1.0
argument_list|)
else|:
name|_a
decl_stmt|;
switch|switch
condition|(
name|_t
condition|)
block|{
case|case
name|In
case|:
return|return
name|easeInBounce
argument_list|(
name|t
argument_list|,
name|a
argument_list|)
return|;
case|case
name|Out
case|:
return|return
name|easeOutBounce
argument_list|(
name|t
argument_list|,
name|a
argument_list|)
return|;
case|case
name|InOut
case|:
return|return
name|easeInOutBounce
argument_list|(
name|t
argument_list|,
name|a
argument_list|)
return|;
case|case
name|OutIn
case|:
return|return
name|easeOutInBounce
argument_list|(
name|t
argument_list|,
name|a
argument_list|)
return|;
default|default:
return|return
name|t
return|;
block|}
block|}
block|}
struct|;
end_struct
begin_struct
DECL|struct|BackEase
struct|struct
name|BackEase
super|:
specifier|public
name|QEasingCurveFunction
block|{
DECL|function|BackEase
name|BackEase
parameter_list|(
name|Type
name|type
parameter_list|)
member_init_list|:
name|QEasingCurveFunction
argument_list|(
name|type
argument_list|,
name|qreal
argument_list|(
literal|0.3
argument_list|)
argument_list|,
name|qreal
argument_list|(
literal|1.0
argument_list|)
argument_list|,
name|qreal
argument_list|(
literal|1.70158
argument_list|)
argument_list|)
block|{ }
DECL|function|copy
name|QEasingCurveFunction
modifier|*
name|copy
parameter_list|()
specifier|const
block|{
name|BackEase
modifier|*
name|rv
init|=
operator|new
name|BackEase
argument_list|(
name|_t
argument_list|)
decl_stmt|;
name|rv
operator|->
name|_o
operator|=
name|_o
expr_stmt|;
return|return
name|rv
return|;
block|}
DECL|function|value
name|qreal
name|value
parameter_list|(
name|qreal
name|t
parameter_list|)
block|{
name|qreal
name|o
init|=
operator|(
name|_o
operator|<
literal|0
operator|)
condition|?
name|qreal
argument_list|(
literal|1.70158
argument_list|)
else|:
name|_o
decl_stmt|;
switch|switch
condition|(
name|_t
condition|)
block|{
case|case
name|In
case|:
return|return
name|easeInBack
argument_list|(
name|t
argument_list|,
name|o
argument_list|)
return|;
case|case
name|Out
case|:
return|return
name|easeOutBack
argument_list|(
name|t
argument_list|,
name|o
argument_list|)
return|;
case|case
name|InOut
case|:
return|return
name|easeInOutBack
argument_list|(
name|t
argument_list|,
name|o
argument_list|)
return|;
case|case
name|OutIn
case|:
return|return
name|easeOutInBack
argument_list|(
name|t
argument_list|,
name|o
argument_list|)
return|;
default|default:
return|return
name|t
return|;
block|}
block|}
block|}
struct|;
end_struct
begin_function
DECL|function|curveToFunc
specifier|static
name|QEasingCurve
operator|::
name|EasingFunction
name|curveToFunc
parameter_list|(
name|QEasingCurve
operator|::
name|Type
name|curve
parameter_list|)
block|{
switch|switch
condition|(
name|curve
condition|)
block|{
case|case
name|QEasingCurve
operator|::
name|Linear
case|:
return|return
operator|&
name|easeNone
return|;
case|case
name|QEasingCurve
operator|::
name|InQuad
case|:
return|return
operator|&
name|easeInQuad
return|;
case|case
name|QEasingCurve
operator|::
name|OutQuad
case|:
return|return
operator|&
name|easeOutQuad
return|;
case|case
name|QEasingCurve
operator|::
name|InOutQuad
case|:
return|return
operator|&
name|easeInOutQuad
return|;
case|case
name|QEasingCurve
operator|::
name|OutInQuad
case|:
return|return
operator|&
name|easeOutInQuad
return|;
case|case
name|QEasingCurve
operator|::
name|InCubic
case|:
return|return
operator|&
name|easeInCubic
return|;
case|case
name|QEasingCurve
operator|::
name|OutCubic
case|:
return|return
operator|&
name|easeOutCubic
return|;
case|case
name|QEasingCurve
operator|::
name|InOutCubic
case|:
return|return
operator|&
name|easeInOutCubic
return|;
case|case
name|QEasingCurve
operator|::
name|OutInCubic
case|:
return|return
operator|&
name|easeOutInCubic
return|;
case|case
name|QEasingCurve
operator|::
name|InQuart
case|:
return|return
operator|&
name|easeInQuart
return|;
case|case
name|QEasingCurve
operator|::
name|OutQuart
case|:
return|return
operator|&
name|easeOutQuart
return|;
case|case
name|QEasingCurve
operator|::
name|InOutQuart
case|:
return|return
operator|&
name|easeInOutQuart
return|;
case|case
name|QEasingCurve
operator|::
name|OutInQuart
case|:
return|return
operator|&
name|easeOutInQuart
return|;
case|case
name|QEasingCurve
operator|::
name|InQuint
case|:
return|return
operator|&
name|easeInQuint
return|;
case|case
name|QEasingCurve
operator|::
name|OutQuint
case|:
return|return
operator|&
name|easeOutQuint
return|;
case|case
name|QEasingCurve
operator|::
name|InOutQuint
case|:
return|return
operator|&
name|easeInOutQuint
return|;
case|case
name|QEasingCurve
operator|::
name|OutInQuint
case|:
return|return
operator|&
name|easeOutInQuint
return|;
case|case
name|QEasingCurve
operator|::
name|InSine
case|:
return|return
operator|&
name|easeInSine
return|;
case|case
name|QEasingCurve
operator|::
name|OutSine
case|:
return|return
operator|&
name|easeOutSine
return|;
case|case
name|QEasingCurve
operator|::
name|InOutSine
case|:
return|return
operator|&
name|easeInOutSine
return|;
case|case
name|QEasingCurve
operator|::
name|OutInSine
case|:
return|return
operator|&
name|easeOutInSine
return|;
case|case
name|QEasingCurve
operator|::
name|InExpo
case|:
return|return
operator|&
name|easeInExpo
return|;
case|case
name|QEasingCurve
operator|::
name|OutExpo
case|:
return|return
operator|&
name|easeOutExpo
return|;
case|case
name|QEasingCurve
operator|::
name|InOutExpo
case|:
return|return
operator|&
name|easeInOutExpo
return|;
case|case
name|QEasingCurve
operator|::
name|OutInExpo
case|:
return|return
operator|&
name|easeOutInExpo
return|;
case|case
name|QEasingCurve
operator|::
name|InCirc
case|:
return|return
operator|&
name|easeInCirc
return|;
case|case
name|QEasingCurve
operator|::
name|OutCirc
case|:
return|return
operator|&
name|easeOutCirc
return|;
case|case
name|QEasingCurve
operator|::
name|InOutCirc
case|:
return|return
operator|&
name|easeInOutCirc
return|;
case|case
name|QEasingCurve
operator|::
name|OutInCirc
case|:
return|return
operator|&
name|easeOutInCirc
return|;
comment|// Internal for, compatibility with QTimeLine only ??
case|case
name|QEasingCurve
operator|::
name|InCurve
case|:
return|return
operator|&
name|easeInCurve
return|;
case|case
name|QEasingCurve
operator|::
name|OutCurve
case|:
return|return
operator|&
name|easeOutCurve
return|;
case|case
name|QEasingCurve
operator|::
name|SineCurve
case|:
return|return
operator|&
name|easeSineCurve
return|;
case|case
name|QEasingCurve
operator|::
name|CosineCurve
case|:
return|return
operator|&
name|easeCosineCurve
return|;
default|default:
return|return
literal|0
return|;
block|}
empty_stmt|;
block|}
end_function
begin_function
DECL|function|curveToFunctionObject
specifier|static
name|QEasingCurveFunction
modifier|*
name|curveToFunctionObject
parameter_list|(
name|QEasingCurve
operator|::
name|Type
name|type
parameter_list|)
block|{
name|QEasingCurveFunction
modifier|*
name|curveFunc
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|QEasingCurve
operator|::
name|InElastic
case|:
name|curveFunc
operator|=
operator|new
name|ElasticEase
argument_list|(
name|ElasticEase
operator|::
name|In
argument_list|)
expr_stmt|;
break|break;
case|case
name|QEasingCurve
operator|::
name|OutElastic
case|:
name|curveFunc
operator|=
operator|new
name|ElasticEase
argument_list|(
name|ElasticEase
operator|::
name|Out
argument_list|)
expr_stmt|;
break|break;
case|case
name|QEasingCurve
operator|::
name|InOutElastic
case|:
name|curveFunc
operator|=
operator|new
name|ElasticEase
argument_list|(
name|ElasticEase
operator|::
name|InOut
argument_list|)
expr_stmt|;
break|break;
case|case
name|QEasingCurve
operator|::
name|OutInElastic
case|:
name|curveFunc
operator|=
operator|new
name|ElasticEase
argument_list|(
name|ElasticEase
operator|::
name|OutIn
argument_list|)
expr_stmt|;
break|break;
case|case
name|QEasingCurve
operator|::
name|OutBounce
case|:
name|curveFunc
operator|=
operator|new
name|BounceEase
argument_list|(
name|BounceEase
operator|::
name|Out
argument_list|)
expr_stmt|;
break|break;
case|case
name|QEasingCurve
operator|::
name|InBounce
case|:
name|curveFunc
operator|=
operator|new
name|BounceEase
argument_list|(
name|BounceEase
operator|::
name|In
argument_list|)
expr_stmt|;
break|break;
case|case
name|QEasingCurve
operator|::
name|OutInBounce
case|:
name|curveFunc
operator|=
operator|new
name|BounceEase
argument_list|(
name|BounceEase
operator|::
name|OutIn
argument_list|)
expr_stmt|;
break|break;
case|case
name|QEasingCurve
operator|::
name|InOutBounce
case|:
name|curveFunc
operator|=
operator|new
name|BounceEase
argument_list|(
name|BounceEase
operator|::
name|InOut
argument_list|)
expr_stmt|;
break|break;
case|case
name|QEasingCurve
operator|::
name|InBack
case|:
name|curveFunc
operator|=
operator|new
name|BackEase
argument_list|(
name|BackEase
operator|::
name|In
argument_list|)
expr_stmt|;
break|break;
case|case
name|QEasingCurve
operator|::
name|OutBack
case|:
name|curveFunc
operator|=
operator|new
name|BackEase
argument_list|(
name|BackEase
operator|::
name|Out
argument_list|)
expr_stmt|;
break|break;
case|case
name|QEasingCurve
operator|::
name|InOutBack
case|:
name|curveFunc
operator|=
operator|new
name|BackEase
argument_list|(
name|BackEase
operator|::
name|InOut
argument_list|)
expr_stmt|;
break|break;
case|case
name|QEasingCurve
operator|::
name|OutInBack
case|:
name|curveFunc
operator|=
operator|new
name|BackEase
argument_list|(
name|BackEase
operator|::
name|OutIn
argument_list|)
expr_stmt|;
break|break;
default|default:
name|curveFunc
operator|=
operator|new
name|QEasingCurveFunction
argument_list|(
name|QEasingCurveFunction
operator|::
name|In
argument_list|,
name|qreal
argument_list|(
literal|0.3
argument_list|)
argument_list|,
name|qreal
argument_list|(
literal|1.0
argument_list|)
argument_list|,
name|qreal
argument_list|(
literal|1.70158
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|curveFunc
return|;
block|}
end_function
begin_comment
comment|/*!     Constructs an easing curve of the given \a type.  */
end_comment
begin_constructor
DECL|function|QEasingCurve
name|QEasingCurve
operator|::
name|QEasingCurve
parameter_list|(
name|Type
name|type
parameter_list|)
member_init_list|:
name|d_ptr
argument_list|(
operator|new
name|QEasingCurvePrivate
argument_list|)
block|{
name|setType
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Construct a copy of \a other.  */
end_comment
begin_constructor
DECL|function|QEasingCurve
name|QEasingCurve
operator|::
name|QEasingCurve
parameter_list|(
specifier|const
name|QEasingCurve
modifier|&
name|other
parameter_list|)
member_init_list|:
name|d_ptr
argument_list|(
operator|new
name|QEasingCurvePrivate
argument_list|)
block|{
comment|// ### non-atomic, requires malloc on shallow copy
operator|*
name|d_ptr
operator|=
operator|*
name|other
operator|.
name|d_ptr
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|d_ptr
operator|->
name|config
condition|)
name|d_ptr
operator|->
name|config
operator|=
name|other
operator|.
name|d_ptr
operator|->
name|config
operator|->
name|copy
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Destructor.  */
end_comment
begin_destructor
DECL|function|~QEasingCurve
name|QEasingCurve
operator|::
name|~
name|QEasingCurve
parameter_list|()
block|{
operator|delete
name|d_ptr
expr_stmt|;
block|}
end_destructor
begin_comment
comment|/*!     Copy \a other.  */
end_comment
begin_function
DECL|function|operator =
name|QEasingCurve
modifier|&
name|QEasingCurve
operator|::
name|operator
name|=
parameter_list|(
specifier|const
name|QEasingCurve
modifier|&
name|other
parameter_list|)
block|{
comment|// ### non-atomic, requires malloc on shallow copy
if|if
condition|(
name|d_ptr
operator|->
name|config
condition|)
block|{
operator|delete
name|d_ptr
operator|->
name|config
expr_stmt|;
name|d_ptr
operator|->
name|config
operator|=
literal|0
expr_stmt|;
block|}
operator|*
name|d_ptr
operator|=
operator|*
name|other
operator|.
name|d_ptr
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|d_ptr
operator|->
name|config
condition|)
name|d_ptr
operator|->
name|config
operator|=
name|other
operator|.
name|d_ptr
operator|->
name|config
operator|->
name|copy
argument_list|()
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_function
begin_comment
comment|/*!     Compare this easing curve with \a other and returns true if they are     equal. It will also compare the properties of a curve.  */
end_comment
begin_function
DECL|function|operator ==
name|bool
name|QEasingCurve
operator|::
name|operator
name|==
parameter_list|(
specifier|const
name|QEasingCurve
modifier|&
name|other
parameter_list|)
specifier|const
block|{
name|bool
name|res
init|=
name|d_ptr
operator|->
name|func
operator|==
name|other
operator|.
name|d_ptr
operator|->
name|func
operator|&&
name|d_ptr
operator|->
name|type
operator|==
name|other
operator|.
name|d_ptr
operator|->
name|type
decl_stmt|;
if|if
condition|(
name|res
condition|)
block|{
if|if
condition|(
name|d_ptr
operator|->
name|config
operator|&&
name|other
operator|.
name|d_ptr
operator|->
name|config
condition|)
block|{
comment|// catch the config content
name|res
operator|=
name|d_ptr
operator|->
name|config
operator|->
name|operator
name|==
argument_list|(
operator|*
operator|(
name|other
operator|.
name|d_ptr
operator|->
name|config
operator|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|d_ptr
operator|->
name|config
operator|||
name|other
operator|.
name|d_ptr
operator|->
name|config
condition|)
block|{
comment|// one one has a config object, which could contain default values
name|res
operator|=
name|qFuzzyCompare
argument_list|(
name|amplitude
argument_list|()
argument_list|,
name|other
operator|.
name|amplitude
argument_list|()
argument_list|)
operator|&&
name|qFuzzyCompare
argument_list|(
name|period
argument_list|()
argument_list|,
name|other
operator|.
name|period
argument_list|()
argument_list|)
operator|&&
name|qFuzzyCompare
argument_list|(
name|overshoot
argument_list|()
argument_list|,
name|other
operator|.
name|overshoot
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|res
return|;
block|}
end_function
begin_comment
comment|/*!     \fn bool QEasingCurve::operator!=(const QEasingCurve&other) const     Compare this easing curve with \a other and returns true if they are not equal.     It will also compare the properties of a curve.      \sa operator==() */
end_comment
begin_comment
comment|/*!     Returns the amplitude. This is not applicable for all curve types.     It is only applicable for bounce and elastic curves (curves of type()     QEasingCurve::InBounce, QEasingCurve::OutBounce, QEasingCurve::InOutBounce,     QEasingCurve::OutInBounce, QEasingCurve::InElastic, QEasingCurve::OutElastic,     QEasingCurve::InOutElastic or QEasingCurve::OutInElastic).  */
end_comment
begin_function
DECL|function|amplitude
name|qreal
name|QEasingCurve
operator|::
name|amplitude
parameter_list|()
specifier|const
block|{
return|return
name|d_ptr
operator|->
name|config
condition|?
name|d_ptr
operator|->
name|config
operator|->
name|_a
else|:
name|qreal
argument_list|(
literal|1.0
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the amplitude to \a amplitude.      This will set the amplitude of the bounce or the amplitude of the     elastic "spring" effect. The higher the number, the higher the amplitude.     \sa amplitude() */
end_comment
begin_function
DECL|function|setAmplitude
name|void
name|QEasingCurve
operator|::
name|setAmplitude
parameter_list|(
name|qreal
name|amplitude
parameter_list|)
block|{
if|if
condition|(
operator|!
name|d_ptr
operator|->
name|config
condition|)
name|d_ptr
operator|->
name|config
operator|=
name|curveToFunctionObject
argument_list|(
name|d_ptr
operator|->
name|type
argument_list|)
expr_stmt|;
name|d_ptr
operator|->
name|config
operator|->
name|_a
operator|=
name|amplitude
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the period. This is not applicable for all curve types.     It is only applicable if type() is QEasingCurve::InElastic, QEasingCurve::OutElastic,     QEasingCurve::InOutElastic or QEasingCurve::OutInElastic.  */
end_comment
begin_function
DECL|function|period
name|qreal
name|QEasingCurve
operator|::
name|period
parameter_list|()
specifier|const
block|{
return|return
name|d_ptr
operator|->
name|config
condition|?
name|d_ptr
operator|->
name|config
operator|->
name|_p
else|:
name|qreal
argument_list|(
literal|0.3
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the period to \a period.     Setting a small period value will give a high frequency of the curve. A     large period will give it a small frequency.      \sa period() */
end_comment
begin_function
DECL|function|setPeriod
name|void
name|QEasingCurve
operator|::
name|setPeriod
parameter_list|(
name|qreal
name|period
parameter_list|)
block|{
if|if
condition|(
operator|!
name|d_ptr
operator|->
name|config
condition|)
name|d_ptr
operator|->
name|config
operator|=
name|curveToFunctionObject
argument_list|(
name|d_ptr
operator|->
name|type
argument_list|)
expr_stmt|;
name|d_ptr
operator|->
name|config
operator|->
name|_p
operator|=
name|period
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the overshoot. This is not applicable for all curve types.     It is only applicable if type() is QEasingCurve::InBack, QEasingCurve::OutBack,     QEasingCurve::InOutBack or QEasingCurve::OutInBack.  */
end_comment
begin_function
DECL|function|overshoot
name|qreal
name|QEasingCurve
operator|::
name|overshoot
parameter_list|()
specifier|const
block|{
return|return
name|d_ptr
operator|->
name|config
condition|?
name|d_ptr
operator|->
name|config
operator|->
name|_o
else|:
name|qreal
argument_list|(
literal|1.70158
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the overshoot to \a overshoot.      0 produces no overshoot, and the default value of 1.70158 produces an overshoot of 10 percent.      \sa overshoot() */
end_comment
begin_function
DECL|function|setOvershoot
name|void
name|QEasingCurve
operator|::
name|setOvershoot
parameter_list|(
name|qreal
name|overshoot
parameter_list|)
block|{
if|if
condition|(
operator|!
name|d_ptr
operator|->
name|config
condition|)
name|d_ptr
operator|->
name|config
operator|=
name|curveToFunctionObject
argument_list|(
name|d_ptr
operator|->
name|type
argument_list|)
expr_stmt|;
name|d_ptr
operator|->
name|config
operator|->
name|_o
operator|=
name|overshoot
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the type of the easing curve. */
end_comment
begin_function
DECL|function|type
name|QEasingCurve
operator|::
name|Type
name|QEasingCurve
operator|::
name|type
parameter_list|()
specifier|const
block|{
return|return
name|d_ptr
operator|->
name|type
return|;
block|}
end_function
begin_function
DECL|function|setType_helper
name|void
name|QEasingCurvePrivate
operator|::
name|setType_helper
parameter_list|(
name|QEasingCurve
operator|::
name|Type
name|newType
parameter_list|)
block|{
name|qreal
name|amp
init|=
operator|-
literal|1.0
decl_stmt|;
name|qreal
name|period
init|=
operator|-
literal|1.0
decl_stmt|;
name|qreal
name|overshoot
init|=
operator|-
literal|1.0
decl_stmt|;
if|if
condition|(
name|config
condition|)
block|{
name|amp
operator|=
name|config
operator|->
name|_a
expr_stmt|;
name|period
operator|=
name|config
operator|->
name|_p
expr_stmt|;
name|overshoot
operator|=
name|config
operator|->
name|_o
expr_stmt|;
operator|delete
name|config
expr_stmt|;
name|config
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|isConfigFunction
argument_list|(
name|newType
argument_list|)
operator|||
operator|(
name|amp
operator|!=
operator|-
literal|1.0
operator|)
operator|||
operator|(
name|period
operator|!=
operator|-
literal|1.0
operator|)
operator|||
operator|(
name|overshoot
operator|!=
operator|-
literal|1.0
operator|)
condition|)
block|{
name|config
operator|=
name|curveToFunctionObject
argument_list|(
name|newType
argument_list|)
expr_stmt|;
if|if
condition|(
name|amp
operator|!=
operator|-
literal|1.0
condition|)
name|config
operator|->
name|_a
operator|=
name|amp
expr_stmt|;
if|if
condition|(
name|period
operator|!=
operator|-
literal|1.0
condition|)
name|config
operator|->
name|_p
operator|=
name|period
expr_stmt|;
if|if
condition|(
name|overshoot
operator|!=
operator|-
literal|1.0
condition|)
name|config
operator|->
name|_o
operator|=
name|overshoot
expr_stmt|;
name|func
operator|=
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|newType
operator|!=
name|QEasingCurve
operator|::
name|Custom
condition|)
block|{
name|func
operator|=
name|curveToFunc
argument_list|(
name|newType
argument_list|)
expr_stmt|;
block|}
name|Q_ASSERT
argument_list|(
operator|(
name|func
operator|==
literal|0
operator|)
operator|==
operator|(
name|config
operator|!=
literal|0
operator|)
argument_list|)
expr_stmt|;
name|type
operator|=
name|newType
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the type of the easing curve to \a type. */
end_comment
begin_function
DECL|function|setType
name|void
name|QEasingCurve
operator|::
name|setType
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
if|if
condition|(
name|d_ptr
operator|->
name|type
operator|==
name|type
condition|)
return|return;
if|if
condition|(
name|type
operator|<
name|Linear
operator|||
name|type
operator|>=
name|NCurveTypes
operator|-
literal|1
condition|)
block|{
name|qWarning
argument_list|(
literal|"QEasingCurve: Invalid curve type %d"
argument_list|,
name|type
argument_list|)
expr_stmt|;
return|return;
block|}
name|d_ptr
operator|->
name|setType_helper
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets a custom easing curve that is defined by the user in the function \a func.     The signature of the function is qreal myEasingFunction(qreal progress),     where \e progress and the return value is considered to be normalized between 0 and 1.     (In some cases the return value can be outside that range)     After calling this function type() will return QEasingCurve::Custom.     \a func cannot be zero.      \sa customType()     \sa valueForProgress() */
end_comment
begin_function
DECL|function|setCustomType
name|void
name|QEasingCurve
operator|::
name|setCustomType
parameter_list|(
name|EasingFunction
name|func
parameter_list|)
block|{
if|if
condition|(
operator|!
name|func
condition|)
block|{
name|qWarning
argument_list|(
literal|"Function pointer must not be null"
argument_list|)
expr_stmt|;
return|return;
block|}
name|d_ptr
operator|->
name|func
operator|=
name|func
expr_stmt|;
name|d_ptr
operator|->
name|setType_helper
argument_list|(
name|Custom
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the function pointer to the custom easing curve.     If type() does not return QEasingCurve::Custom, this function     will return 0. */
end_comment
begin_function
DECL|function|customType
name|QEasingCurve
operator|::
name|EasingFunction
name|QEasingCurve
operator|::
name|customType
parameter_list|()
specifier|const
block|{
return|return
name|d_ptr
operator|->
name|type
operator|==
name|Custom
condition|?
name|d_ptr
operator|->
name|func
else|:
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     Return the effective progress for the easing curve at \a progress.     While  \a progress must be between 0 and 1, the returned effective progress     can be outside those bounds. For instance, QEasingCurve::InBack will     return negative values in the beginning of the function.  */
end_comment
begin_function
DECL|function|valueForProgress
name|qreal
name|QEasingCurve
operator|::
name|valueForProgress
parameter_list|(
name|qreal
name|progress
parameter_list|)
specifier|const
block|{
name|progress
operator|=
name|qBound
argument_list|<
name|qreal
argument_list|>
argument_list|(
literal|0
argument_list|,
name|progress
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|d_ptr
operator|->
name|func
condition|)
return|return
name|d_ptr
operator|->
name|func
argument_list|(
name|progress
argument_list|)
return|;
elseif|else
if|if
condition|(
name|d_ptr
operator|->
name|config
condition|)
return|return
name|d_ptr
operator|->
name|config
operator|->
name|value
argument_list|(
name|progress
argument_list|)
return|;
else|else
return|return
name|progress
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DEBUG_STREAM
end_ifndef
begin_function
DECL|function|operator <<
name|QDebug
name|operator
name|<<
parameter_list|(
name|QDebug
name|debug
parameter_list|,
specifier|const
name|QEasingCurve
modifier|&
name|item
parameter_list|)
block|{
name|debug
operator|<<
literal|"type:"
operator|<<
name|item
operator|.
name|d_ptr
operator|->
name|type
operator|<<
literal|"func:"
operator|<<
name|item
operator|.
name|d_ptr
operator|->
name|func
expr_stmt|;
if|if
condition|(
name|item
operator|.
name|d_ptr
operator|->
name|config
condition|)
block|{
name|debug
operator|<<
name|QString
operator|::
name|fromAscii
argument_list|(
literal|"period:%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|item
operator|.
name|d_ptr
operator|->
name|config
operator|->
name|_p
argument_list|,
literal|0
argument_list|,
literal|'f'
argument_list|,
literal|20
argument_list|)
operator|<<
name|QString
operator|::
name|fromAscii
argument_list|(
literal|"amp:%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|item
operator|.
name|d_ptr
operator|->
name|config
operator|->
name|_a
argument_list|,
literal|0
argument_list|,
literal|'f'
argument_list|,
literal|20
argument_list|)
operator|<<
name|QString
operator|::
name|fromAscii
argument_list|(
literal|"overshoot:%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|item
operator|.
name|d_ptr
operator|->
name|config
operator|->
name|_o
argument_list|,
literal|0
argument_list|,
literal|'f'
argument_list|,
literal|20
argument_list|)
expr_stmt|;
block|}
return|return
name|debug
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DEBUG_STREAM
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DATASTREAM
end_ifndef
begin_comment
comment|/*!     \fn QDataStream&operator<<(QDataStream&stream, const QEasingCurve&easing)     \relates QEasingCurve      Writes the given \a easing curve to the given \a stream and returns a     reference to the stream.      \sa {Serializing Qt Data Types} */
end_comment
begin_function
DECL|function|operator <<
name|QDataStream
modifier|&
name|operator
name|<<
parameter_list|(
name|QDataStream
modifier|&
name|stream
parameter_list|,
specifier|const
name|QEasingCurve
modifier|&
name|easing
parameter_list|)
block|{
name|stream
operator|<<
name|quint8
argument_list|(
name|easing
operator|.
name|d_ptr
operator|->
name|type
argument_list|)
expr_stmt|;
name|stream
operator|<<
name|quint64
argument_list|(
name|quintptr
argument_list|(
name|easing
operator|.
name|d_ptr
operator|->
name|func
argument_list|)
argument_list|)
expr_stmt|;
name|bool
name|hasConfig
init|=
name|easing
operator|.
name|d_ptr
operator|->
name|config
decl_stmt|;
name|stream
operator|<<
name|hasConfig
expr_stmt|;
if|if
condition|(
name|hasConfig
condition|)
block|{
name|stream
operator|<<
name|easing
operator|.
name|d_ptr
operator|->
name|config
operator|->
name|_p
expr_stmt|;
name|stream
operator|<<
name|easing
operator|.
name|d_ptr
operator|->
name|config
operator|->
name|_a
expr_stmt|;
name|stream
operator|<<
name|easing
operator|.
name|d_ptr
operator|->
name|config
operator|->
name|_o
expr_stmt|;
block|}
return|return
name|stream
return|;
block|}
end_function
begin_comment
comment|/*!     \fn QDataStream&operator>>(QDataStream&stream, QEasingCurve&easing)     \relates QQuaternion      Reads an easing curve from the given \a stream into the given \a     easing curve and returns a reference to the stream.      \sa {Serializing Qt Data Types} */
end_comment
begin_function
DECL|function|operator >>
name|QDataStream
modifier|&
name|operator
name|>>
parameter_list|(
name|QDataStream
modifier|&
name|stream
parameter_list|,
name|QEasingCurve
modifier|&
name|easing
parameter_list|)
block|{
name|QEasingCurve
operator|::
name|Type
name|type
decl_stmt|;
name|quint8
name|int_type
decl_stmt|;
name|stream
operator|>>
name|int_type
expr_stmt|;
name|type
operator|=
cast|static_cast
argument_list|<
name|QEasingCurve
operator|::
name|Type
argument_list|>
argument_list|(
name|int_type
argument_list|)
expr_stmt|;
name|easing
operator|.
name|setType
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|quint64
name|ptr_func
decl_stmt|;
name|stream
operator|>>
name|ptr_func
expr_stmt|;
name|easing
operator|.
name|d_ptr
operator|->
name|func
operator|=
name|QEasingCurve
operator|::
name|EasingFunction
argument_list|(
name|quintptr
argument_list|(
name|ptr_func
argument_list|)
argument_list|)
expr_stmt|;
name|bool
name|hasConfig
decl_stmt|;
name|stream
operator|>>
name|hasConfig
expr_stmt|;
if|if
condition|(
name|hasConfig
condition|)
block|{
name|QEasingCurveFunction
modifier|*
name|config
init|=
name|curveToFunctionObject
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|stream
operator|>>
name|config
operator|->
name|_p
expr_stmt|;
name|stream
operator|>>
name|config
operator|->
name|_a
expr_stmt|;
name|stream
operator|>>
name|config
operator|->
name|_o
expr_stmt|;
name|easing
operator|.
name|d_ptr
operator|->
name|config
operator|=
name|config
expr_stmt|;
block|}
return|return
name|stream
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DATASTREAM
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
