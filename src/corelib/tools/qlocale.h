begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QLOCALE_H
end_ifndef
begin_define
DECL|macro|QLOCALE_H
define|#
directive|define
name|QLOCALE_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qvariant.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qstring.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qobjectdefs.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qshareddata.h>
end_include
begin_decl_stmt
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
DECL|variable|QDataStream
name|class
name|QDataStream
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QDate
name|class
name|QDate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QDateTime
name|class
name|QDateTime
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QTime
name|class
name|QTime
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QVariant
name|class
name|QVariant
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QTextStream
name|class
name|QTextStream
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QTextStreamPrivate
name|class
name|QTextStreamPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QLocalePrivate
name|class
name|QLocalePrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_CORE_EXPORT
name|QLocale
block|{
name|Q_GADGET
name|Q_ENUMS
argument_list|(
name|Language
argument_list|)
name|Q_ENUMS
argument_list|(
name|Country
argument_list|)
name|friend
name|class
name|QString
decl_stmt|;
name|friend
name|class
name|QByteArray
decl_stmt|;
name|friend
name|class
name|QIntValidator
decl_stmt|;
name|friend
name|class
name|QDoubleValidatorPrivate
decl_stmt|;
name|friend
name|class
name|QTextStream
decl_stmt|;
name|friend
name|class
name|QTextStreamPrivate
decl_stmt|;
name|public
label|:
comment|// GENERATED PART STARTS HERE
comment|// see qlocale_data_p.h for more info on generated data
enum|enum
name|Language
block|{
name|AnyLanguage
init|=
literal|0
block|,
name|C
init|=
literal|1
block|,
name|Abkhazian
init|=
literal|2
block|,
name|Afan
init|=
literal|3
block|,
name|Afar
init|=
literal|4
block|,
name|Afrikaans
init|=
literal|5
block|,
name|Albanian
init|=
literal|6
block|,
name|Amharic
init|=
literal|7
block|,
name|Arabic
init|=
literal|8
block|,
name|Armenian
init|=
literal|9
block|,
name|Assamese
init|=
literal|10
block|,
name|Aymara
init|=
literal|11
block|,
name|Azerbaijani
init|=
literal|12
block|,
name|Bashkir
init|=
literal|13
block|,
name|Basque
init|=
literal|14
block|,
name|Bengali
init|=
literal|15
block|,
name|Bhutani
init|=
literal|16
block|,
name|Bihari
init|=
literal|17
block|,
name|Bislama
init|=
literal|18
block|,
name|Breton
init|=
literal|19
block|,
name|Bulgarian
init|=
literal|20
block|,
name|Burmese
init|=
literal|21
block|,
name|Byelorussian
init|=
literal|22
block|,
name|Cambodian
init|=
literal|23
block|,
name|Catalan
init|=
literal|24
block|,
name|Chinese
init|=
literal|25
block|,
name|Corsican
init|=
literal|26
block|,
name|Croatian
init|=
literal|27
block|,
name|Czech
init|=
literal|28
block|,
name|Danish
init|=
literal|29
block|,
name|Dutch
init|=
literal|30
block|,
name|English
init|=
literal|31
block|,
name|Esperanto
init|=
literal|32
block|,
name|Estonian
init|=
literal|33
block|,
name|Faroese
init|=
literal|34
block|,
name|FijiLanguage
init|=
literal|35
block|,
name|Finnish
init|=
literal|36
block|,
name|French
init|=
literal|37
block|,
name|Frisian
init|=
literal|38
block|,
name|Gaelic
init|=
literal|39
block|,
name|Galician
init|=
literal|40
block|,
name|Georgian
init|=
literal|41
block|,
name|German
init|=
literal|42
block|,
name|Greek
init|=
literal|43
block|,
name|Greenlandic
init|=
literal|44
block|,
name|Guarani
init|=
literal|45
block|,
name|Gujarati
init|=
literal|46
block|,
name|Hausa
init|=
literal|47
block|,
name|Hebrew
init|=
literal|48
block|,
name|Hindi
init|=
literal|49
block|,
name|Hungarian
init|=
literal|50
block|,
name|Icelandic
init|=
literal|51
block|,
name|Indonesian
init|=
literal|52
block|,
name|Interlingua
init|=
literal|53
block|,
name|Interlingue
init|=
literal|54
block|,
name|Inuktitut
init|=
literal|55
block|,
name|Inupiak
init|=
literal|56
block|,
name|Irish
init|=
literal|57
block|,
name|Italian
init|=
literal|58
block|,
name|Japanese
init|=
literal|59
block|,
name|Javanese
init|=
literal|60
block|,
name|Kannada
init|=
literal|61
block|,
name|Kashmiri
init|=
literal|62
block|,
name|Kazakh
init|=
literal|63
block|,
name|Kinyarwanda
init|=
literal|64
block|,
name|Kirghiz
init|=
literal|65
block|,
name|Korean
init|=
literal|66
block|,
name|Kurdish
init|=
literal|67
block|,
name|Kurundi
init|=
literal|68
block|,
name|Laothian
init|=
literal|69
block|,
name|Latin
init|=
literal|70
block|,
name|Latvian
init|=
literal|71
block|,
name|Lingala
init|=
literal|72
block|,
name|Lithuanian
init|=
literal|73
block|,
name|Macedonian
init|=
literal|74
block|,
name|Malagasy
init|=
literal|75
block|,
name|Malay
init|=
literal|76
block|,
name|Malayalam
init|=
literal|77
block|,
name|Maltese
init|=
literal|78
block|,
name|Maori
init|=
literal|79
block|,
name|Marathi
init|=
literal|80
block|,
name|Moldavian
init|=
literal|81
block|,
name|Mongolian
init|=
literal|82
block|,
name|NauruLanguage
init|=
literal|83
block|,
name|Nepali
init|=
literal|84
block|,
name|Norwegian
init|=
literal|85
block|,
name|Occitan
init|=
literal|86
block|,
name|Oriya
init|=
literal|87
block|,
name|Pashto
init|=
literal|88
block|,
name|Persian
init|=
literal|89
block|,
name|Polish
init|=
literal|90
block|,
name|Portuguese
init|=
literal|91
block|,
name|Punjabi
init|=
literal|92
block|,
name|Quechua
init|=
literal|93
block|,
name|RhaetoRomance
init|=
literal|94
block|,
name|Romanian
init|=
literal|95
block|,
name|Russian
init|=
literal|96
block|,
name|Samoan
init|=
literal|97
block|,
name|Sangho
init|=
literal|98
block|,
name|Sanskrit
init|=
literal|99
block|,
name|Serbian
init|=
literal|100
block|,
name|SerboCroatian
init|=
literal|101
block|,
name|Sesotho
init|=
literal|102
block|,
name|Setswana
init|=
literal|103
block|,
name|Shona
init|=
literal|104
block|,
name|Sindhi
init|=
literal|105
block|,
name|Singhalese
init|=
literal|106
block|,
name|Siswati
init|=
literal|107
block|,
name|Slovak
init|=
literal|108
block|,
name|Slovenian
init|=
literal|109
block|,
name|Somali
init|=
literal|110
block|,
name|Spanish
init|=
literal|111
block|,
name|Sundanese
init|=
literal|112
block|,
name|Swahili
init|=
literal|113
block|,
name|Swedish
init|=
literal|114
block|,
name|Tagalog
init|=
literal|115
block|,
name|Tajik
init|=
literal|116
block|,
name|Tamil
init|=
literal|117
block|,
name|Tatar
init|=
literal|118
block|,
name|Telugu
init|=
literal|119
block|,
name|Thai
init|=
literal|120
block|,
name|Tibetan
init|=
literal|121
block|,
name|Tigrinya
init|=
literal|122
block|,
name|TongaLanguage
init|=
literal|123
block|,
name|Tsonga
init|=
literal|124
block|,
name|Turkish
init|=
literal|125
block|,
name|Turkmen
init|=
literal|126
block|,
name|Twi
init|=
literal|127
block|,
name|Uigur
init|=
literal|128
block|,
name|Ukrainian
init|=
literal|129
block|,
name|Urdu
init|=
literal|130
block|,
name|Uzbek
init|=
literal|131
block|,
name|Vietnamese
init|=
literal|132
block|,
name|Volapuk
init|=
literal|133
block|,
name|Welsh
init|=
literal|134
block|,
name|Wolof
init|=
literal|135
block|,
name|Xhosa
init|=
literal|136
block|,
name|Yiddish
init|=
literal|137
block|,
name|Yoruba
init|=
literal|138
block|,
name|Zhuang
init|=
literal|139
block|,
name|Zulu
init|=
literal|140
block|,
name|Nynorsk
init|=
literal|141
block|,
name|Bosnian
init|=
literal|142
block|,
name|Divehi
init|=
literal|143
block|,
name|Manx
init|=
literal|144
block|,
name|Cornish
init|=
literal|145
block|,
name|Akan
init|=
literal|146
block|,
name|Konkani
init|=
literal|147
block|,
name|Ga
init|=
literal|148
block|,
name|Igbo
init|=
literal|149
block|,
name|Kamba
init|=
literal|150
block|,
name|Syriac
init|=
literal|151
block|,
name|Blin
init|=
literal|152
block|,
name|Geez
init|=
literal|153
block|,
name|Koro
init|=
literal|154
block|,
name|Sidamo
init|=
literal|155
block|,
name|Atsam
init|=
literal|156
block|,
name|Tigre
init|=
literal|157
block|,
name|Jju
init|=
literal|158
block|,
name|Friulian
init|=
literal|159
block|,
name|Venda
init|=
literal|160
block|,
name|Ewe
init|=
literal|161
block|,
name|Walamo
init|=
literal|162
block|,
name|Hawaiian
init|=
literal|163
block|,
name|Tyap
init|=
literal|164
block|,
name|Chewa
init|=
literal|165
block|,
name|Filipino
init|=
literal|166
block|,
name|SwissGerman
init|=
literal|167
block|,
name|SichuanYi
init|=
literal|168
block|,
name|Kpelle
init|=
literal|169
block|,
name|LowGerman
init|=
literal|170
block|,
name|SouthNdebele
init|=
literal|171
block|,
name|NorthernSotho
init|=
literal|172
block|,
name|NorthernSami
init|=
literal|173
block|,
name|Taroko
init|=
literal|174
block|,
name|Gusii
init|=
literal|175
block|,
name|Taita
init|=
literal|176
block|,
name|Fulah
init|=
literal|177
block|,
name|Kikuyu
init|=
literal|178
block|,
name|Samburu
init|=
literal|179
block|,
name|Sena
init|=
literal|180
block|,
name|NorthNdebele
init|=
literal|181
block|,
name|Rombo
init|=
literal|182
block|,
name|Tachelhit
init|=
literal|183
block|,
name|Kabyle
init|=
literal|184
block|,
name|Nyankole
init|=
literal|185
block|,
name|Bena
init|=
literal|186
block|,
name|Vunjo
init|=
literal|187
block|,
name|Bambara
init|=
literal|188
block|,
name|Embu
init|=
literal|189
block|,
name|Cherokee
init|=
literal|190
block|,
name|Morisyen
init|=
literal|191
block|,
name|Makonde
init|=
literal|192
block|,
name|Langi
init|=
literal|193
block|,
name|Ganda
init|=
literal|194
block|,
name|Bemba
init|=
literal|195
block|,
name|Kabuverdianu
init|=
literal|196
block|,
name|Meru
init|=
literal|197
block|,
name|Kalenjin
init|=
literal|198
block|,
name|Nama
init|=
literal|199
block|,
name|Machame
init|=
literal|200
block|,
name|Colognian
init|=
literal|201
block|,
name|Masai
init|=
literal|202
block|,
name|Soga
init|=
literal|203
block|,
name|Luyia
init|=
literal|204
block|,
name|Asu
init|=
literal|205
block|,
name|Teso
init|=
literal|206
block|,
name|Saho
init|=
literal|207
block|,
name|KoyraChiini
init|=
literal|208
block|,
name|Rwa
init|=
literal|209
block|,
name|Luo
init|=
literal|210
block|,
name|Chiga
init|=
literal|211
block|,
name|CentralMoroccoTamazight
init|=
literal|212
block|,
name|KoyraboroSenni
init|=
literal|213
block|,
name|Shambala
init|=
literal|214
block|,
name|NorwegianBokmal
init|=
name|Norwegian
block|,
name|NorwegianNynorsk
init|=
name|Nynorsk
block|,
name|LastLanguage
init|=
name|Shambala
block|}
enum|;
enum|enum
name|Script
block|{
name|AnyScript
init|=
literal|0
block|,
name|ArabicScript
init|=
literal|1
block|,
name|CyrillicScript
init|=
literal|2
block|,
name|DeseretScript
init|=
literal|3
block|,
name|GurmukhiScript
init|=
literal|4
block|,
name|SimplifiedHanScript
init|=
literal|5
block|,
name|TraditionalHanScript
init|=
literal|6
block|,
name|LatinScript
init|=
literal|7
block|,
name|MongolianScript
init|=
literal|8
block|,
name|TifinaghScript
init|=
literal|9
block|,
name|SimplifiedChineseScript
init|=
name|SimplifiedHanScript
block|,
name|TraditionalChineseScript
init|=
name|TraditionalHanScript
block|,
name|LastScript
init|=
name|TifinaghScript
block|}
enum|;
enum|enum
name|Country
block|{
name|AnyCountry
init|=
literal|0
block|,
name|Afghanistan
init|=
literal|1
block|,
name|Albania
init|=
literal|2
block|,
name|Algeria
init|=
literal|3
block|,
name|AmericanSamoa
init|=
literal|4
block|,
name|Andorra
init|=
literal|5
block|,
name|Angola
init|=
literal|6
block|,
name|Anguilla
init|=
literal|7
block|,
name|Antarctica
init|=
literal|8
block|,
name|AntiguaAndBarbuda
init|=
literal|9
block|,
name|Argentina
init|=
literal|10
block|,
name|Armenia
init|=
literal|11
block|,
name|Aruba
init|=
literal|12
block|,
name|Australia
init|=
literal|13
block|,
name|Austria
init|=
literal|14
block|,
name|Azerbaijan
init|=
literal|15
block|,
name|Bahamas
init|=
literal|16
block|,
name|Bahrain
init|=
literal|17
block|,
name|Bangladesh
init|=
literal|18
block|,
name|Barbados
init|=
literal|19
block|,
name|Belarus
init|=
literal|20
block|,
name|Belgium
init|=
literal|21
block|,
name|Belize
init|=
literal|22
block|,
name|Benin
init|=
literal|23
block|,
name|Bermuda
init|=
literal|24
block|,
name|Bhutan
init|=
literal|25
block|,
name|Bolivia
init|=
literal|26
block|,
name|BosniaAndHerzegowina
init|=
literal|27
block|,
name|Botswana
init|=
literal|28
block|,
name|BouvetIsland
init|=
literal|29
block|,
name|Brazil
init|=
literal|30
block|,
name|BritishIndianOceanTerritory
init|=
literal|31
block|,
name|BruneiDarussalam
init|=
literal|32
block|,
name|Bulgaria
init|=
literal|33
block|,
name|BurkinaFaso
init|=
literal|34
block|,
name|Burundi
init|=
literal|35
block|,
name|Cambodia
init|=
literal|36
block|,
name|Cameroon
init|=
literal|37
block|,
name|Canada
init|=
literal|38
block|,
name|CapeVerde
init|=
literal|39
block|,
name|CaymanIslands
init|=
literal|40
block|,
name|CentralAfricanRepublic
init|=
literal|41
block|,
name|Chad
init|=
literal|42
block|,
name|Chile
init|=
literal|43
block|,
name|China
init|=
literal|44
block|,
name|ChristmasIsland
init|=
literal|45
block|,
name|CocosIslands
init|=
literal|46
block|,
name|Colombia
init|=
literal|47
block|,
name|Comoros
init|=
literal|48
block|,
name|DemocraticRepublicOfCongo
init|=
literal|49
block|,
name|PeoplesRepublicOfCongo
init|=
literal|50
block|,
name|CookIslands
init|=
literal|51
block|,
name|CostaRica
init|=
literal|52
block|,
name|IvoryCoast
init|=
literal|53
block|,
name|Croatia
init|=
literal|54
block|,
name|Cuba
init|=
literal|55
block|,
name|Cyprus
init|=
literal|56
block|,
name|CzechRepublic
init|=
literal|57
block|,
name|Denmark
init|=
literal|58
block|,
name|Djibouti
init|=
literal|59
block|,
name|Dominica
init|=
literal|60
block|,
name|DominicanRepublic
init|=
literal|61
block|,
name|EastTimor
init|=
literal|62
block|,
name|Ecuador
init|=
literal|63
block|,
name|Egypt
init|=
literal|64
block|,
name|ElSalvador
init|=
literal|65
block|,
name|EquatorialGuinea
init|=
literal|66
block|,
name|Eritrea
init|=
literal|67
block|,
name|Estonia
init|=
literal|68
block|,
name|Ethiopia
init|=
literal|69
block|,
name|FalklandIslands
init|=
literal|70
block|,
name|FaroeIslands
init|=
literal|71
block|,
name|FijiCountry
init|=
literal|72
block|,
name|Finland
init|=
literal|73
block|,
name|France
init|=
literal|74
block|,
name|MetropolitanFrance
init|=
literal|75
block|,
name|FrenchGuiana
init|=
literal|76
block|,
name|FrenchPolynesia
init|=
literal|77
block|,
name|FrenchSouthernTerritories
init|=
literal|78
block|,
name|Gabon
init|=
literal|79
block|,
name|Gambia
init|=
literal|80
block|,
name|Georgia
init|=
literal|81
block|,
name|Germany
init|=
literal|82
block|,
name|Ghana
init|=
literal|83
block|,
name|Gibraltar
init|=
literal|84
block|,
name|Greece
init|=
literal|85
block|,
name|Greenland
init|=
literal|86
block|,
name|Grenada
init|=
literal|87
block|,
name|Guadeloupe
init|=
literal|88
block|,
name|Guam
init|=
literal|89
block|,
name|Guatemala
init|=
literal|90
block|,
name|Guinea
init|=
literal|91
block|,
name|GuineaBissau
init|=
literal|92
block|,
name|Guyana
init|=
literal|93
block|,
name|Haiti
init|=
literal|94
block|,
name|HeardAndMcDonaldIslands
init|=
literal|95
block|,
name|Honduras
init|=
literal|96
block|,
name|HongKong
init|=
literal|97
block|,
name|Hungary
init|=
literal|98
block|,
name|Iceland
init|=
literal|99
block|,
name|India
init|=
literal|100
block|,
name|Indonesia
init|=
literal|101
block|,
name|Iran
init|=
literal|102
block|,
name|Iraq
init|=
literal|103
block|,
name|Ireland
init|=
literal|104
block|,
name|Israel
init|=
literal|105
block|,
name|Italy
init|=
literal|106
block|,
name|Jamaica
init|=
literal|107
block|,
name|Japan
init|=
literal|108
block|,
name|Jordan
init|=
literal|109
block|,
name|Kazakhstan
init|=
literal|110
block|,
name|Kenya
init|=
literal|111
block|,
name|Kiribati
init|=
literal|112
block|,
name|DemocraticRepublicOfKorea
init|=
literal|113
block|,
name|RepublicOfKorea
init|=
literal|114
block|,
name|Kuwait
init|=
literal|115
block|,
name|Kyrgyzstan
init|=
literal|116
block|,
name|Lao
init|=
literal|117
block|,
name|Latvia
init|=
literal|118
block|,
name|Lebanon
init|=
literal|119
block|,
name|Lesotho
init|=
literal|120
block|,
name|Liberia
init|=
literal|121
block|,
name|LibyanArabJamahiriya
init|=
literal|122
block|,
name|Liechtenstein
init|=
literal|123
block|,
name|Lithuania
init|=
literal|124
block|,
name|Luxembourg
init|=
literal|125
block|,
name|Macau
init|=
literal|126
block|,
name|Macedonia
init|=
literal|127
block|,
name|Madagascar
init|=
literal|128
block|,
name|Malawi
init|=
literal|129
block|,
name|Malaysia
init|=
literal|130
block|,
name|Maldives
init|=
literal|131
block|,
name|Mali
init|=
literal|132
block|,
name|Malta
init|=
literal|133
block|,
name|MarshallIslands
init|=
literal|134
block|,
name|Martinique
init|=
literal|135
block|,
name|Mauritania
init|=
literal|136
block|,
name|Mauritius
init|=
literal|137
block|,
name|Mayotte
init|=
literal|138
block|,
name|Mexico
init|=
literal|139
block|,
name|Micronesia
init|=
literal|140
block|,
name|Moldova
init|=
literal|141
block|,
name|Monaco
init|=
literal|142
block|,
name|Mongolia
init|=
literal|143
block|,
name|Montserrat
init|=
literal|144
block|,
name|Morocco
init|=
literal|145
block|,
name|Mozambique
init|=
literal|146
block|,
name|Myanmar
init|=
literal|147
block|,
name|Namibia
init|=
literal|148
block|,
name|NauruCountry
init|=
literal|149
block|,
name|Nepal
init|=
literal|150
block|,
name|Netherlands
init|=
literal|151
block|,
name|NetherlandsAntilles
init|=
literal|152
block|,
name|NewCaledonia
init|=
literal|153
block|,
name|NewZealand
init|=
literal|154
block|,
name|Nicaragua
init|=
literal|155
block|,
name|Niger
init|=
literal|156
block|,
name|Nigeria
init|=
literal|157
block|,
name|Niue
init|=
literal|158
block|,
name|NorfolkIsland
init|=
literal|159
block|,
name|NorthernMarianaIslands
init|=
literal|160
block|,
name|Norway
init|=
literal|161
block|,
name|Oman
init|=
literal|162
block|,
name|Pakistan
init|=
literal|163
block|,
name|Palau
init|=
literal|164
block|,
name|PalestinianTerritory
init|=
literal|165
block|,
name|Panama
init|=
literal|166
block|,
name|PapuaNewGuinea
init|=
literal|167
block|,
name|Paraguay
init|=
literal|168
block|,
name|Peru
init|=
literal|169
block|,
name|Philippines
init|=
literal|170
block|,
name|Pitcairn
init|=
literal|171
block|,
name|Poland
init|=
literal|172
block|,
name|Portugal
init|=
literal|173
block|,
name|PuertoRico
init|=
literal|174
block|,
name|Qatar
init|=
literal|175
block|,
name|Reunion
init|=
literal|176
block|,
name|Romania
init|=
literal|177
block|,
name|RussianFederation
init|=
literal|178
block|,
name|Rwanda
init|=
literal|179
block|,
name|SaintKittsAndNevis
init|=
literal|180
block|,
name|StLucia
init|=
literal|181
block|,
name|StVincentAndTheGrenadines
init|=
literal|182
block|,
name|Samoa
init|=
literal|183
block|,
name|SanMarino
init|=
literal|184
block|,
name|SaoTomeAndPrincipe
init|=
literal|185
block|,
name|SaudiArabia
init|=
literal|186
block|,
name|Senegal
init|=
literal|187
block|,
name|Seychelles
init|=
literal|188
block|,
name|SierraLeone
init|=
literal|189
block|,
name|Singapore
init|=
literal|190
block|,
name|Slovakia
init|=
literal|191
block|,
name|Slovenia
init|=
literal|192
block|,
name|SolomonIslands
init|=
literal|193
block|,
name|Somalia
init|=
literal|194
block|,
name|SouthAfrica
init|=
literal|195
block|,
name|SouthGeorgiaAndTheSouthSandwichIslands
init|=
literal|196
block|,
name|Spain
init|=
literal|197
block|,
name|SriLanka
init|=
literal|198
block|,
name|StHelena
init|=
literal|199
block|,
name|StPierreAndMiquelon
init|=
literal|200
block|,
name|Sudan
init|=
literal|201
block|,
name|Suriname
init|=
literal|202
block|,
name|SvalbardAndJanMayenIslands
init|=
literal|203
block|,
name|Swaziland
init|=
literal|204
block|,
name|Sweden
init|=
literal|205
block|,
name|Switzerland
init|=
literal|206
block|,
name|SyrianArabRepublic
init|=
literal|207
block|,
name|Taiwan
init|=
literal|208
block|,
name|Tajikistan
init|=
literal|209
block|,
name|Tanzania
init|=
literal|210
block|,
name|Thailand
init|=
literal|211
block|,
name|Togo
init|=
literal|212
block|,
name|Tokelau
init|=
literal|213
block|,
name|TongaCountry
init|=
literal|214
block|,
name|TrinidadAndTobago
init|=
literal|215
block|,
name|Tunisia
init|=
literal|216
block|,
name|Turkey
init|=
literal|217
block|,
name|Turkmenistan
init|=
literal|218
block|,
name|TurksAndCaicosIslands
init|=
literal|219
block|,
name|Tuvalu
init|=
literal|220
block|,
name|Uganda
init|=
literal|221
block|,
name|Ukraine
init|=
literal|222
block|,
name|UnitedArabEmirates
init|=
literal|223
block|,
name|UnitedKingdom
init|=
literal|224
block|,
name|UnitedStates
init|=
literal|225
block|,
name|UnitedStatesMinorOutlyingIslands
init|=
literal|226
block|,
name|Uruguay
init|=
literal|227
block|,
name|Uzbekistan
init|=
literal|228
block|,
name|Vanuatu
init|=
literal|229
block|,
name|VaticanCityState
init|=
literal|230
block|,
name|Venezuela
init|=
literal|231
block|,
name|VietNam
init|=
literal|232
block|,
name|BritishVirginIslands
init|=
literal|233
block|,
name|USVirginIslands
init|=
literal|234
block|,
name|WallisAndFutunaIslands
init|=
literal|235
block|,
name|WesternSahara
init|=
literal|236
block|,
name|Yemen
init|=
literal|237
block|,
name|Yugoslavia
init|=
literal|238
block|,
name|Zambia
init|=
literal|239
block|,
name|Zimbabwe
init|=
literal|240
block|,
name|SerbiaAndMontenegro
init|=
literal|241
block|,
name|Montenegro
init|=
literal|242
block|,
name|Serbia
init|=
literal|243
block|,
name|SaintBarthelemy
init|=
literal|244
block|,
name|SaintMartin
init|=
literal|245
block|,
name|LatinAmericaAndTheCaribbean
init|=
literal|246
block|,
name|LastCountry
init|=
name|LatinAmericaAndTheCaribbean
block|}
enum|;
comment|// GENERATED PART ENDS HERE
enum|enum
name|MeasurementSystem
block|{
name|MetricSystem
block|,
name|ImperialUSSystem
block|,
name|ImperialUKSystem
block|,
name|ImperialSystem
init|=
name|ImperialUSSystem
comment|// Qt 4 compatibility
block|}
enum|;
enum|enum
name|FormatType
block|{
name|LongFormat
block|,
name|ShortFormat
block|,
name|NarrowFormat
block|}
enum|;
enum|enum
name|NumberOption
block|{
name|OmitGroupSeparator
init|=
literal|0x01
block|,
name|RejectGroupSeparator
init|=
literal|0x02
block|}
enum|;
name|Q_DECLARE_FLAGS
argument_list|(
name|NumberOptions
argument_list|,
name|NumberOption
argument_list|)
expr|enum
name|CurrencySymbolFormat
block|{
name|CurrencyIsoCode
block|,
name|CurrencySymbol
block|,
name|CurrencyDisplayName
block|}
expr_stmt|;
name|QLocale
argument_list|()
expr_stmt|;
name|QLocale
argument_list|(
specifier|const
name|QString
operator|&
name|name
argument_list|)
expr_stmt|;
name|QLocale
argument_list|(
argument|Language language
argument_list|,
argument|Country country = AnyCountry
argument_list|)
empty_stmt|;
name|QLocale
argument_list|(
argument|Language language
argument_list|,
argument|Script script
argument_list|,
argument|Country country
argument_list|)
empty_stmt|;
name|QLocale
argument_list|(
specifier|const
name|QLocale
operator|&
name|other
argument_list|)
expr_stmt|;
operator|~
name|QLocale
argument_list|()
expr_stmt|;
name|QLocale
modifier|&
name|operator
init|=
operator|(
specifier|const
name|QLocale
operator|&
name|other
operator|)
decl_stmt|;
name|Language
name|language
argument_list|()
specifier|const
expr_stmt|;
name|Script
name|script
argument_list|()
specifier|const
expr_stmt|;
name|Country
name|country
argument_list|()
specifier|const
expr_stmt|;
name|QString
name|name
argument_list|()
specifier|const
expr_stmt|;
name|QString
name|bcp47Name
argument_list|()
specifier|const
expr_stmt|;
name|QString
name|nativeLanguageName
argument_list|()
specifier|const
expr_stmt|;
name|QString
name|nativeCountryName
argument_list|()
specifier|const
expr_stmt|;
name|short
name|toShort
argument_list|(
specifier|const
name|QString
operator|&
name|s
argument_list|,
name|bool
operator|*
name|ok
operator|=
literal|0
argument_list|)
decl|const
decl_stmt|;
name|ushort
name|toUShort
argument_list|(
specifier|const
name|QString
operator|&
name|s
argument_list|,
name|bool
operator|*
name|ok
operator|=
literal|0
argument_list|)
decl|const
decl_stmt|;
name|int
name|toInt
argument_list|(
specifier|const
name|QString
operator|&
name|s
argument_list|,
name|bool
operator|*
name|ok
operator|=
literal|0
argument_list|)
decl|const
decl_stmt|;
name|uint
name|toUInt
argument_list|(
specifier|const
name|QString
operator|&
name|s
argument_list|,
name|bool
operator|*
name|ok
operator|=
literal|0
argument_list|)
decl|const
decl_stmt|;
name|qlonglong
name|toLongLong
argument_list|(
specifier|const
name|QString
operator|&
name|s
argument_list|,
name|bool
operator|*
name|ok
operator|=
literal|0
argument_list|)
decl|const
decl_stmt|;
name|qulonglong
name|toULongLong
argument_list|(
specifier|const
name|QString
operator|&
name|s
argument_list|,
name|bool
operator|*
name|ok
operator|=
literal|0
argument_list|)
decl|const
decl_stmt|;
name|float
name|toFloat
argument_list|(
specifier|const
name|QString
operator|&
name|s
argument_list|,
name|bool
operator|*
name|ok
operator|=
literal|0
argument_list|)
decl|const
decl_stmt|;
name|double
name|toDouble
argument_list|(
specifier|const
name|QString
operator|&
name|s
argument_list|,
name|bool
operator|*
name|ok
operator|=
literal|0
argument_list|)
decl|const
decl_stmt|;
name|QString
name|toString
argument_list|(
name|qlonglong
name|i
argument_list|)
decl|const
decl_stmt|;
name|QString
name|toString
argument_list|(
name|qulonglong
name|i
argument_list|)
decl|const
decl_stmt|;
specifier|inline
name|QString
name|toString
argument_list|(
name|short
name|i
argument_list|)
decl|const
decl_stmt|;
specifier|inline
name|QString
name|toString
argument_list|(
name|ushort
name|i
argument_list|)
decl|const
decl_stmt|;
specifier|inline
name|QString
name|toString
argument_list|(
name|int
name|i
argument_list|)
decl|const
decl_stmt|;
specifier|inline
name|QString
name|toString
argument_list|(
name|uint
name|i
argument_list|)
decl|const
decl_stmt|;
name|QString
name|toString
argument_list|(
name|double
name|i
argument_list|,
name|char
name|f
operator|=
literal|'g'
argument_list|,
name|int
name|prec
operator|=
literal|6
argument_list|)
decl|const
decl_stmt|;
specifier|inline
name|QString
name|toString
argument_list|(
name|float
name|i
argument_list|,
name|char
name|f
operator|=
literal|'g'
argument_list|,
name|int
name|prec
operator|=
literal|6
argument_list|)
decl|const
decl_stmt|;
name|QString
name|toString
argument_list|(
specifier|const
name|QDate
operator|&
name|date
argument_list|,
specifier|const
name|QString
operator|&
name|formatStr
argument_list|)
decl|const
decl_stmt|;
name|QString
name|toString
argument_list|(
specifier|const
name|QDate
operator|&
name|date
argument_list|,
name|FormatType
name|format
operator|=
name|LongFormat
argument_list|)
decl|const
decl_stmt|;
name|QString
name|toString
argument_list|(
specifier|const
name|QTime
operator|&
name|time
argument_list|,
specifier|const
name|QString
operator|&
name|formatStr
argument_list|)
decl|const
decl_stmt|;
name|QString
name|toString
argument_list|(
specifier|const
name|QTime
operator|&
name|time
argument_list|,
name|FormatType
name|format
operator|=
name|LongFormat
argument_list|)
decl|const
decl_stmt|;
name|QString
name|toString
argument_list|(
specifier|const
name|QDateTime
operator|&
name|dateTime
argument_list|,
name|FormatType
name|format
operator|=
name|LongFormat
argument_list|)
decl|const
decl_stmt|;
name|QString
name|toString
argument_list|(
specifier|const
name|QDateTime
operator|&
name|dateTime
argument_list|,
specifier|const
name|QString
operator|&
name|format
argument_list|)
decl|const
decl_stmt|;
name|QString
name|dateFormat
argument_list|(
name|FormatType
name|format
operator|=
name|LongFormat
argument_list|)
decl|const
decl_stmt|;
name|QString
name|timeFormat
argument_list|(
name|FormatType
name|format
operator|=
name|LongFormat
argument_list|)
decl|const
decl_stmt|;
name|QString
name|dateTimeFormat
argument_list|(
name|FormatType
name|format
operator|=
name|LongFormat
argument_list|)
decl|const
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_DATESTRING
name|QDate
name|toDate
argument_list|(
specifier|const
name|QString
operator|&
name|string
argument_list|,
name|FormatType
operator|=
name|LongFormat
argument_list|)
decl|const
decl_stmt|;
name|QTime
name|toTime
argument_list|(
specifier|const
name|QString
operator|&
name|string
argument_list|,
name|FormatType
operator|=
name|LongFormat
argument_list|)
decl|const
decl_stmt|;
name|QDateTime
name|toDateTime
argument_list|(
specifier|const
name|QString
operator|&
name|string
argument_list|,
name|FormatType
name|format
operator|=
name|LongFormat
argument_list|)
decl|const
decl_stmt|;
name|QDate
name|toDate
argument_list|(
specifier|const
name|QString
operator|&
name|string
argument_list|,
specifier|const
name|QString
operator|&
name|format
argument_list|)
decl|const
decl_stmt|;
name|QTime
name|toTime
argument_list|(
specifier|const
name|QString
operator|&
name|string
argument_list|,
specifier|const
name|QString
operator|&
name|format
argument_list|)
decl|const
decl_stmt|;
name|QDateTime
name|toDateTime
argument_list|(
specifier|const
name|QString
operator|&
name|string
argument_list|,
specifier|const
name|QString
operator|&
name|format
argument_list|)
decl|const
decl_stmt|;
endif|#
directive|endif
comment|// ### Qt 5: We need to return QString from these function since
comment|//           unicode data contains several characters for these fields.
name|QChar
name|decimalPoint
argument_list|()
specifier|const
expr_stmt|;
name|QChar
name|groupSeparator
argument_list|()
specifier|const
expr_stmt|;
name|QChar
name|percent
argument_list|()
specifier|const
expr_stmt|;
name|QChar
name|zeroDigit
argument_list|()
specifier|const
expr_stmt|;
name|QChar
name|negativeSign
argument_list|()
specifier|const
expr_stmt|;
name|QChar
name|positiveSign
argument_list|()
specifier|const
expr_stmt|;
name|QChar
name|exponential
argument_list|()
specifier|const
expr_stmt|;
name|QString
name|monthName
argument_list|(
name|int
argument_list|,
name|FormatType
name|format
operator|=
name|LongFormat
argument_list|)
decl|const
decl_stmt|;
name|QString
name|standaloneMonthName
argument_list|(
name|int
argument_list|,
name|FormatType
name|format
operator|=
name|LongFormat
argument_list|)
decl|const
decl_stmt|;
name|QString
name|dayName
argument_list|(
name|int
argument_list|,
name|FormatType
name|format
operator|=
name|LongFormat
argument_list|)
decl|const
decl_stmt|;
name|QString
name|standaloneDayName
argument_list|(
name|int
argument_list|,
name|FormatType
name|format
operator|=
name|LongFormat
argument_list|)
decl|const
decl_stmt|;
name|Qt
operator|::
name|DayOfWeek
name|firstDayOfWeek
argument_list|()
specifier|const
expr_stmt|;
name|QList
operator|<
name|Qt
operator|::
name|DayOfWeek
operator|>
name|weekdays
argument_list|()
specifier|const
expr_stmt|;
name|QString
name|amText
argument_list|()
specifier|const
expr_stmt|;
name|QString
name|pmText
argument_list|()
specifier|const
expr_stmt|;
name|MeasurementSystem
name|measurementSystem
argument_list|()
specifier|const
expr_stmt|;
name|Qt
operator|::
name|LayoutDirection
name|textDirection
argument_list|()
specifier|const
expr_stmt|;
name|QString
name|toUpper
argument_list|(
specifier|const
name|QString
operator|&
name|str
argument_list|)
decl|const
decl_stmt|;
name|QString
name|toLower
argument_list|(
specifier|const
name|QString
operator|&
name|str
argument_list|)
decl|const
decl_stmt|;
name|QString
name|currencySymbol
argument_list|(
name|CurrencySymbolFormat
operator|=
name|CurrencySymbol
argument_list|)
decl|const
decl_stmt|;
name|QString
name|toCurrencyString
argument_list|(
name|qlonglong
argument_list|,
specifier|const
name|QString
operator|&
name|symbol
operator|=
name|QString
argument_list|()
argument_list|)
decl|const
decl_stmt|;
name|QString
name|toCurrencyString
argument_list|(
name|qulonglong
argument_list|,
specifier|const
name|QString
operator|&
name|symbol
operator|=
name|QString
argument_list|()
argument_list|)
decl|const
decl_stmt|;
specifier|inline
name|QString
name|toCurrencyString
argument_list|(
name|short
argument_list|,
specifier|const
name|QString
operator|&
name|symbol
operator|=
name|QString
argument_list|()
argument_list|)
decl|const
decl_stmt|;
specifier|inline
name|QString
name|toCurrencyString
argument_list|(
name|ushort
argument_list|,
specifier|const
name|QString
operator|&
name|symbol
operator|=
name|QString
argument_list|()
argument_list|)
decl|const
decl_stmt|;
specifier|inline
name|QString
name|toCurrencyString
argument_list|(
name|int
argument_list|,
specifier|const
name|QString
operator|&
name|symbol
operator|=
name|QString
argument_list|()
argument_list|)
decl|const
decl_stmt|;
specifier|inline
name|QString
name|toCurrencyString
argument_list|(
name|uint
argument_list|,
specifier|const
name|QString
operator|&
name|symbol
operator|=
name|QString
argument_list|()
argument_list|)
decl|const
decl_stmt|;
name|QString
name|toCurrencyString
argument_list|(
name|double
argument_list|,
specifier|const
name|QString
operator|&
name|symbol
operator|=
name|QString
argument_list|()
argument_list|)
decl|const
decl_stmt|;
specifier|inline
name|QString
name|toCurrencyString
argument_list|(
name|float
argument_list|,
specifier|const
name|QString
operator|&
name|symbol
operator|=
name|QString
argument_list|()
argument_list|)
decl|const
decl_stmt|;
name|QStringList
name|uiLanguages
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QLocale
operator|&
name|other
operator|)
specifier|const
expr_stmt|;
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|QLocale
operator|&
name|other
operator|)
specifier|const
expr_stmt|;
specifier|static
name|QString
name|languageToString
parameter_list|(
name|Language
name|language
parameter_list|)
function_decl|;
specifier|static
name|QString
name|countryToString
parameter_list|(
name|Country
name|country
parameter_list|)
function_decl|;
specifier|static
name|QString
name|scriptToString
parameter_list|(
name|Script
name|script
parameter_list|)
function_decl|;
specifier|static
name|void
name|setDefault
parameter_list|(
specifier|const
name|QLocale
modifier|&
name|locale
parameter_list|)
function_decl|;
specifier|static
name|QLocale
name|c
parameter_list|()
block|{
return|return
name|QLocale
argument_list|(
name|C
argument_list|)
return|;
block|}
specifier|static
name|QLocale
name|system
parameter_list|()
function_decl|;
specifier|static
name|QList
operator|<
name|QLocale
operator|>
name|matchingLocales
argument_list|(
argument|QLocale::Language language
argument_list|,
argument|QLocale::Script script
argument_list|,
argument|QLocale::Country country
argument_list|)
expr_stmt|;
specifier|static
name|QList
operator|<
name|Country
operator|>
name|countriesForLanguage
argument_list|(
argument|Language lang
argument_list|)
expr_stmt|;
name|void
name|setNumberOptions
parameter_list|(
name|NumberOptions
name|options
parameter_list|)
function_decl|;
name|NumberOptions
name|numberOptions
argument_list|()
specifier|const
expr_stmt|;
enum|enum
name|QuotationStyle
block|{
name|StandardQuotation
block|,
name|AlternateQuotation
block|}
enum|;
name|QString
name|quoteString
argument_list|(
specifier|const
name|QString
operator|&
name|str
argument_list|,
name|QuotationStyle
name|style
operator|=
name|StandardQuotation
argument_list|)
decl|const
decl_stmt|;
name|QString
name|quoteString
argument_list|(
specifier|const
name|QStringRef
operator|&
name|str
argument_list|,
name|QuotationStyle
name|style
operator|=
name|StandardQuotation
argument_list|)
decl|const
decl_stmt|;
name|QString
name|createSeparatedList
argument_list|(
specifier|const
name|QStringList
operator|&
name|strl
argument_list|)
decl|const
decl_stmt|;
name|private
label|:
name|QLocale
argument_list|(
name|QLocalePrivate
operator|&
name|dd
argument_list|)
expr_stmt|;
name|friend
name|class
name|QLocalePrivate
decl_stmt|;
name|QSharedDataPointer
operator|<
name|QLocalePrivate
operator|>
name|d
expr_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_expr_stmt
name|Q_DECLARE_TYPEINFO
argument_list|(
name|QLocale
argument_list|,
name|Q_MOVABLE_TYPE
argument_list|)
expr_stmt|;
end_expr_stmt
begin_macro
name|Q_DECLARE_OPERATORS_FOR_FLAGS
argument_list|(
argument|QLocale::NumberOptions
argument_list|)
end_macro
begin_expr_stmt
DECL|function|toString
specifier|inline
name|QString
name|QLocale
operator|::
name|toString
argument_list|(
argument|short i
argument_list|)
specifier|const
block|{
return|return
name|toString
argument_list|(
name|qlonglong
argument_list|(
name|i
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|toString
specifier|inline
name|QString
name|QLocale
operator|::
name|toString
argument_list|(
argument|ushort i
argument_list|)
specifier|const
block|{
return|return
name|toString
argument_list|(
name|qulonglong
argument_list|(
name|i
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|toString
specifier|inline
name|QString
name|QLocale
operator|::
name|toString
argument_list|(
argument|int i
argument_list|)
specifier|const
block|{
return|return
name|toString
argument_list|(
name|qlonglong
argument_list|(
name|i
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|toString
specifier|inline
name|QString
name|QLocale
operator|::
name|toString
argument_list|(
argument|uint i
argument_list|)
specifier|const
block|{
return|return
name|toString
argument_list|(
name|qulonglong
argument_list|(
name|i
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|toString
specifier|inline
name|QString
name|QLocale
operator|::
name|toString
argument_list|(
argument|float i
argument_list|,
argument|char f
argument_list|,
argument|int prec
argument_list|)
specifier|const
block|{
return|return
name|toString
argument_list|(
name|double
argument_list|(
name|i
argument_list|)
argument_list|,
name|f
argument_list|,
name|prec
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|toCurrencyString
specifier|inline
name|QString
name|QLocale
operator|::
name|toCurrencyString
argument_list|(
argument|short i
argument_list|,
argument|const QString&symbol
argument_list|)
specifier|const
block|{
return|return
name|toCurrencyString
argument_list|(
name|qlonglong
argument_list|(
name|i
argument_list|)
argument_list|,
name|symbol
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|toCurrencyString
specifier|inline
name|QString
name|QLocale
operator|::
name|toCurrencyString
argument_list|(
argument|ushort i
argument_list|,
argument|const QString&symbol
argument_list|)
specifier|const
block|{
return|return
name|toCurrencyString
argument_list|(
name|qulonglong
argument_list|(
name|i
argument_list|)
argument_list|,
name|symbol
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|toCurrencyString
specifier|inline
name|QString
name|QLocale
operator|::
name|toCurrencyString
argument_list|(
argument|int i
argument_list|,
argument|const QString&symbol
argument_list|)
specifier|const
block|{
return|return
name|toCurrencyString
argument_list|(
name|qlonglong
argument_list|(
name|i
argument_list|)
argument_list|,
name|symbol
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|toCurrencyString
specifier|inline
name|QString
name|QLocale
operator|::
name|toCurrencyString
argument_list|(
argument|uint i
argument_list|,
argument|const QString&symbol
argument_list|)
specifier|const
block|{
return|return
name|toCurrencyString
argument_list|(
name|qulonglong
argument_list|(
name|i
argument_list|)
argument_list|,
name|symbol
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|toCurrencyString
specifier|inline
name|QString
name|QLocale
operator|::
name|toCurrencyString
argument_list|(
argument|float i
argument_list|,
argument|const QString&symbol
argument_list|)
specifier|const
block|{
return|return
name|toCurrencyString
argument_list|(
name|double
argument_list|(
name|i
argument_list|)
argument_list|,
name|symbol
argument_list|)
return|;
block|}
end_expr_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DATASTREAM
end_ifndef
begin_expr_stmt
name|Q_CORE_EXPORT
name|QDataStream
operator|&
name|operator
operator|<<
operator|(
name|QDataStream
operator|&
operator|,
specifier|const
name|QLocale
operator|&
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_CORE_EXPORT
name|QDataStream
operator|&
name|operator
operator|>>
operator|(
name|QDataStream
operator|&
operator|,
name|QLocale
operator|&
operator|)
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DEBUG_STREAM
end_ifndef
begin_expr_stmt
name|Q_CORE_EXPORT
name|QDebug
name|operator
operator|<<
operator|(
name|QDebug
operator|,
specifier|const
name|QLocale
operator|&
operator|)
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
name|QT_END_NAMESPACE
name|QT_END_HEADER
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QLOCALE_H
end_comment
end_unit
