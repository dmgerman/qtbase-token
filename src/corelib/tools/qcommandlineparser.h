begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Laszlo Papp<lpapp@kde.org> ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia. For licensing terms and ** conditions see http://qt.digia.com/licensing. For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights. These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QCOMMANDLINEPARSER_H
end_ifndef
begin_define
DECL|macro|QCOMMANDLINEPARSER_H
define|#
directive|define
name|QCOMMANDLINEPARSER_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qstringlist.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qcoreapplication.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qcommandlineoption.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QCommandLineParserPrivate
name|class
name|QCommandLineParserPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QCoreApplication
name|class
name|QCoreApplication
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_CORE_EXPORT
name|QCommandLineParser
block|{
name|Q_DECLARE_TR_FUNCTIONS
argument_list|(
argument|QCommandLineParser
argument_list|)
name|public
label|:
name|QCommandLineParser
argument_list|()
expr_stmt|;
operator|~
name|QCommandLineParser
argument_list|()
expr_stmt|;
enum|enum
name|SingleDashWordOptionMode
block|{
name|ParseAsCompactedShortOptions
block|,
name|ParseAsLongOptions
block|}
enum|;
name|void
name|setSingleDashWordOptionMode
parameter_list|(
name|SingleDashWordOptionMode
name|parsingMode
parameter_list|)
function_decl|;
name|bool
name|addOption
parameter_list|(
specifier|const
name|QCommandLineOption
modifier|&
name|commandLineOption
parameter_list|)
function_decl|;
name|bool
name|addOptions
argument_list|(
specifier|const
name|QList
operator|<
name|QCommandLineOption
operator|>
operator|&
name|options
argument_list|)
decl_stmt|;
name|QCommandLineOption
name|addVersionOption
parameter_list|()
function_decl|;
name|QCommandLineOption
name|addHelpOption
parameter_list|()
function_decl|;
name|void
name|setApplicationDescription
parameter_list|(
specifier|const
name|QString
modifier|&
name|description
parameter_list|)
function_decl|;
name|QString
name|applicationDescription
argument_list|()
specifier|const
expr_stmt|;
name|void
name|addPositionalArgument
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|,
specifier|const
name|QString
modifier|&
name|description
parameter_list|,
specifier|const
name|QString
modifier|&
name|syntax
init|=
name|QString
argument_list|()
parameter_list|)
function_decl|;
name|void
name|clearPositionalArguments
parameter_list|()
function_decl|;
name|void
name|process
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|arguments
parameter_list|)
function_decl|;
name|void
name|process
parameter_list|(
specifier|const
name|QCoreApplication
modifier|&
name|app
parameter_list|)
function_decl|;
name|bool
name|parse
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|arguments
parameter_list|)
function_decl|;
name|QString
name|errorText
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|isSet
argument_list|(
specifier|const
name|QString
operator|&
name|name
argument_list|)
decl|const
decl_stmt|;
name|QString
name|value
argument_list|(
specifier|const
name|QString
operator|&
name|name
argument_list|)
decl|const
decl_stmt|;
name|QStringList
name|values
argument_list|(
specifier|const
name|QString
operator|&
name|name
argument_list|)
decl|const
decl_stmt|;
name|bool
name|isSet
argument_list|(
specifier|const
name|QCommandLineOption
operator|&
name|option
argument_list|)
decl|const
decl_stmt|;
name|QString
name|value
argument_list|(
specifier|const
name|QCommandLineOption
operator|&
name|option
argument_list|)
decl|const
decl_stmt|;
name|QStringList
name|values
argument_list|(
specifier|const
name|QCommandLineOption
operator|&
name|option
argument_list|)
decl|const
decl_stmt|;
name|QStringList
name|positionalArguments
argument_list|()
specifier|const
expr_stmt|;
name|QStringList
name|optionNames
argument_list|()
specifier|const
expr_stmt|;
name|QStringList
name|unknownOptionNames
argument_list|()
specifier|const
expr_stmt|;
name|Q_NORETURN
name|void
name|showVersion
parameter_list|()
function_decl|;
name|Q_NORETURN
name|void
name|showHelp
parameter_list|(
name|int
name|exitCode
init|=
literal|0
parameter_list|)
function_decl|;
name|QString
name|helpText
argument_list|()
specifier|const
expr_stmt|;
name|private
label|:
name|Q_DISABLE_COPY
argument_list|(
argument|QCommandLineParser
argument_list|)
name|QCommandLineParserPrivate
modifier|*
specifier|const
name|d
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QCOMMANDLINEPARSER_H
end_comment
end_unit
