begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 by Southwest Research Institute (R) ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QBYTEARRAYLIST_H
end_ifndef
begin_define
DECL|macro|QBYTEARRAYLIST_H
define|#
directive|define
name|QBYTEARRAYLIST_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qdatastream.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qlist.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qbytearray.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_typedef
DECL|typedef|QByteArrayListIterator
typedef|typedef
name|QListIterator
operator|<
name|QByteArray
operator|>
name|QByteArrayListIterator
expr_stmt|;
end_typedef
begin_typedef
DECL|typedef|QMutableByteArrayListIterator
typedef|typedef
name|QMutableListIterator
operator|<
name|QByteArray
operator|>
name|QMutableByteArrayListIterator
expr_stmt|;
end_typedef
begin_decl_stmt
name|class
name|QByteArrayList
range|:
name|public
name|QList
operator|<
name|QByteArray
operator|>
block|{
name|public
operator|:
specifier|inline
name|QByteArrayList
argument_list|()
block|{ }
specifier|inline
name|explicit
name|QByteArrayList
argument_list|(
argument|const QByteArray&i
argument_list|)
block|{
name|append
argument_list|(
name|i
argument_list|)
block|; }
specifier|inline
name|QByteArrayList
argument_list|(
specifier|const
name|QByteArrayList
operator|&
name|l
argument_list|)
operator|:
name|QList
operator|<
name|QByteArray
operator|>
operator|(
name|l
operator|)
block|{ }
specifier|inline
name|QByteArrayList
argument_list|(
specifier|const
name|QList
operator|<
name|QByteArray
operator|>
operator|&
name|l
argument_list|)
operator|:
name|QList
operator|<
name|QByteArray
operator|>
operator|(
name|l
operator|)
block|{ }
ifdef|#
directive|ifdef
name|Q_COMPILER_INITIALIZER_LISTS
specifier|inline
name|QByteArrayList
argument_list|(
name|std
operator|::
name|initializer_list
operator|<
name|QByteArray
operator|>
name|args
argument_list|)
operator|:
name|QList
operator|<
name|QByteArray
operator|>
operator|(
name|args
operator|)
block|{ }
endif|#
directive|endif
specifier|inline
name|QByteArray
name|join
argument_list|()
specifier|const
block|;
specifier|inline
name|QByteArray
name|join
argument_list|(
argument|const QByteArray&sep
argument_list|)
specifier|const
block|;
specifier|inline
name|QByteArray
name|join
argument_list|(
argument|char sep
argument_list|)
specifier|const
block|;
specifier|inline
name|QByteArrayList
operator|&
name|operator
operator|<<
operator|(
specifier|const
name|QByteArray
operator|&
name|str
operator|)
block|{
name|append
argument_list|(
name|str
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
specifier|inline
name|QByteArrayList
operator|&
name|operator
operator|<<
operator|(
specifier|const
name|QByteArrayList
operator|&
name|l
operator|)
block|{
operator|*
name|this
operator|+=
name|l
block|;
return|return
operator|*
name|this
return|;
block|}
expr|}
block|;
name|Q_DECLARE_TYPEINFO
argument_list|(
name|QByteArrayList
argument_list|,
name|Q_MOVABLE_TYPE
argument_list|)
block|;
name|namespace
name|QtPrivate
block|{
name|QByteArray
name|Q_CORE_EXPORT
name|QByteArrayList_join
argument_list|(
argument|const QByteArrayList *that
argument_list|,
argument|const char *s
argument_list|,
argument|int l
argument_list|)
block|; }
DECL|function|join
specifier|inline
name|QByteArray
name|QByteArrayList
operator|::
name|join
argument_list|()
specifier|const
block|{
return|return
name|QtPrivate
operator|::
name|QByteArrayList_join
argument_list|(
name|this
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|function|join
specifier|inline
name|QByteArray
name|QByteArrayList
operator|::
name|join
argument_list|(
argument|const QByteArray&sep
argument_list|)
specifier|const
block|{
return|return
name|QtPrivate
operator|::
name|QByteArrayList_join
argument_list|(
name|this
argument_list|,
name|sep
operator|.
name|constData
argument_list|()
argument_list|,
name|sep
operator|.
name|size
argument_list|()
argument_list|)
return|;
block|}
DECL|function|join
specifier|inline
name|QByteArray
name|QByteArrayList
operator|::
name|join
argument_list|(
argument|char sep
argument_list|)
specifier|const
block|{
return|return
name|QtPrivate
operator|::
name|QByteArrayList_join
argument_list|(
name|this
argument_list|,
operator|&
name|sep
argument_list|,
literal|1
argument_list|)
return|;
block|}
DECL|function|operator
specifier|inline
name|QByteArrayList
name|operator
operator|+
operator|(
specifier|const
name|QByteArrayList
operator|&
name|lhs
expr|,
specifier|const
name|QByteArrayList
operator|&
name|rhs
operator|)
block|{
name|QByteArrayList
name|res
block|;
name|res
operator|.
name|append
argument_list|(
name|lhs
argument_list|)
block|;
name|res
operator|.
name|append
argument_list|(
name|rhs
argument_list|)
block|;
return|return
name|res
return|;
block|}
specifier|inline
name|QByteArrayList
operator|&
name|operator
operator|+=
operator|(
name|QByteArrayList
operator|&
name|lhs
expr|,
specifier|const
name|QByteArrayList
operator|&
name|rhs
operator|)
block|{
name|lhs
operator|.
name|append
argument_list|(
name|rhs
argument_list|)
block|;
return|return
name|lhs
return|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_DATASTREAM
specifier|inline
name|QDataStream
operator|&
name|operator
operator|>>
operator|(
name|QDataStream
operator|&
name|in
expr|,
name|QByteArrayList
operator|&
name|list
operator|)
block|{
return|return
name|operator
operator|>>
operator|(
name|in
expr|,
name|static_cast
operator|<
name|QList
operator|<
name|QByteArray
operator|>
operator|&
operator|>
operator|(
name|list
operator|)
operator|)
return|;
block|}
specifier|inline
name|QDataStream
operator|&
name|operator
operator|<<
operator|(
name|QDataStream
operator|&
name|out
expr|,
specifier|const
name|QByteArrayList
operator|&
name|list
operator|)
block|{
return|return
name|operator
operator|<<
operator|(
name|out
expr|,
name|static_cast
operator|<
specifier|const
name|QList
operator|<
name|QByteArray
operator|>
operator|&
operator|>
operator|(
name|list
operator|)
operator|)
return|;
block|}
endif|#
directive|endif
comment|// QT_NO_DATASTREAM
name|QT_END_NAMESPACE
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QBYTEARRAYLIST_H
end_comment
end_unit
