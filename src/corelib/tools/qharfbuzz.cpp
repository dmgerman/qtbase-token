begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qunicodetables_p.h"
end_include
begin_include
include|#
directive|include
file|"qlibrary.h"
end_include
begin_include
include|#
directive|include
file|"qtextcodec.h"
end_include
begin_include
include|#
directive|include
file|"qharfbuzz_p.h"
end_include
begin_expr_stmt
name|QT_USE_NAMESPACE
specifier|extern
literal|"C"
block|{
DECL|function|HB_GetGraphemeClass
name|HB_GraphemeClass
name|HB_GetGraphemeClass
argument_list|(
argument|HB_UChar32 ch
argument_list|)
block|{
specifier|const
name|QUnicodeTables
operator|::
name|Properties
operator|*
name|prop
operator|=
name|QUnicodeTables
operator|::
name|properties
argument_list|(
name|ch
argument_list|)
block|;
return|return
operator|(
name|HB_GraphemeClass
operator|)
name|prop
operator|->
name|graphemeBreak
return|;
block|}
DECL|function|HB_GetWordClass
name|HB_WordClass
name|HB_GetWordClass
argument_list|(
argument|HB_UChar32 ch
argument_list|)
block|{
specifier|const
name|QUnicodeTables
operator|::
name|Properties
operator|*
name|prop
operator|=
name|QUnicodeTables
operator|::
name|properties
argument_list|(
name|ch
argument_list|)
block|;
return|return
operator|(
name|HB_WordClass
operator|)
name|prop
operator|->
name|wordBreak
return|;
block|}
end_expr_stmt
begin_function
DECL|function|HB_GetSentenceClass
name|HB_SentenceClass
name|HB_GetSentenceClass
parameter_list|(
name|HB_UChar32
name|ch
parameter_list|)
block|{
specifier|const
name|QUnicodeTables
operator|::
name|Properties
modifier|*
name|prop
init|=
name|QUnicodeTables
operator|::
name|properties
argument_list|(
name|ch
argument_list|)
decl_stmt|;
return|return
operator|(
name|HB_SentenceClass
operator|)
name|prop
operator|->
name|sentenceBreak
return|;
block|}
end_function
begin_function
DECL|function|HB_GetLineBreakClass
name|HB_LineBreakClass
name|HB_GetLineBreakClass
parameter_list|(
name|HB_UChar32
name|ch
parameter_list|)
block|{
return|return
operator|(
name|HB_LineBreakClass
operator|)
name|QUnicodeTables
operator|::
name|lineBreakClass
argument_list|(
name|ch
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|HB_GetGraphemeAndLineBreakClass
name|void
name|HB_GetGraphemeAndLineBreakClass
parameter_list|(
name|HB_UChar32
name|ch
parameter_list|,
name|HB_GraphemeClass
modifier|*
name|grapheme
parameter_list|,
name|HB_LineBreakClass
modifier|*
name|lineBreak
parameter_list|)
block|{
specifier|const
name|QUnicodeTables
operator|::
name|Properties
modifier|*
name|prop
init|=
name|QUnicodeTables
operator|::
name|properties
argument_list|(
name|ch
argument_list|)
decl_stmt|;
operator|*
name|grapheme
operator|=
operator|(
name|HB_GraphemeClass
operator|)
name|prop
operator|->
name|graphemeBreak
expr_stmt|;
operator|*
name|lineBreak
operator|=
operator|(
name|HB_LineBreakClass
operator|)
name|prop
operator|->
name|line_break_class
expr_stmt|;
block|}
end_function
begin_function
DECL|function|HB_GetUnicodeCharProperties
name|void
name|HB_GetUnicodeCharProperties
parameter_list|(
name|HB_UChar32
name|ch
parameter_list|,
name|HB_CharCategory
modifier|*
name|category
parameter_list|,
name|int
modifier|*
name|combiningClass
parameter_list|)
block|{
specifier|const
name|QUnicodeTables
operator|::
name|Properties
modifier|*
name|prop
init|=
name|QUnicodeTables
operator|::
name|properties
argument_list|(
name|ch
argument_list|)
decl_stmt|;
operator|*
name|category
operator|=
operator|(
name|HB_CharCategory
operator|)
name|prop
operator|->
name|category
expr_stmt|;
operator|*
name|combiningClass
operator|=
name|prop
operator|->
name|combiningClass
expr_stmt|;
block|}
end_function
begin_function
DECL|function|HB_GetUnicodeCharCategory
name|HB_CharCategory
name|HB_GetUnicodeCharCategory
parameter_list|(
name|HB_UChar32
name|ch
parameter_list|)
block|{
return|return
operator|(
name|HB_CharCategory
operator|)
name|QChar
operator|::
name|category
argument_list|(
name|ch
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|HB_GetUnicodeCharCombiningClass
name|int
name|HB_GetUnicodeCharCombiningClass
parameter_list|(
name|HB_UChar32
name|ch
parameter_list|)
block|{
return|return
name|QChar
operator|::
name|combiningClass
argument_list|(
name|ch
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|HB_GetMirroredChar
name|HB_UChar16
name|HB_GetMirroredChar
parameter_list|(
name|HB_UChar16
name|ch
parameter_list|)
block|{
return|return
name|QChar
operator|::
name|mirroredChar
argument_list|(
name|ch
argument_list|)
return|;
block|}
end_function
begin_macro
DECL|function|HB_Library_Resolve
name|void
argument_list|(
argument|*HB_Library_Resolve(const char *library, int version, const char *symbol)
argument_list|)
end_macro
begin_expr_stmt
DECL|function|HB_Library_Resolve
operator|(
operator|)
block|{
ifdef|#
directive|ifdef
name|QT_NO_LIBRARY
return|return
literal|0
return|;
end_expr_stmt
begin_else
else|#
directive|else
end_else
begin_return
return|return
name|QLibrary
operator|::
name|resolve
argument_list|(
name|QLatin1String
argument_list|(
name|library
argument_list|)
argument_list|,
name|version
argument_list|,
name|symbol
argument_list|)
return|;
end_return
begin_endif
endif|#
directive|endif
end_endif
begin_comment
unit|}  }
comment|// extern "C"
end_comment
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|qShapeItem
name|HB_Bool
name|qShapeItem
parameter_list|(
name|HB_ShaperItem
modifier|*
name|item
parameter_list|)
block|{
return|return
name|HB_ShapeItem
argument_list|(
name|item
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qHBNewFace
name|HB_Face
name|qHBNewFace
parameter_list|(
name|void
modifier|*
name|font
parameter_list|,
name|HB_GetFontTableFunc
name|tableFunc
parameter_list|)
block|{
return|return
name|HB_NewFace
argument_list|(
name|font
argument_list|,
name|tableFunc
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qHBFreeFace
name|void
name|qHBFreeFace
parameter_list|(
name|HB_Face
name|face
parameter_list|)
block|{
name|HB_FreeFace
argument_list|(
name|face
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qGetCharAttributes
name|void
name|qGetCharAttributes
parameter_list|(
specifier|const
name|HB_UChar16
modifier|*
name|string
parameter_list|,
name|hb_uint32
name|stringLength
parameter_list|,
specifier|const
name|HB_ScriptItem
modifier|*
name|items
parameter_list|,
name|hb_uint32
name|numItems
parameter_list|,
name|HB_CharAttributes
modifier|*
name|attributes
parameter_list|)
block|{
name|HB_GetCharAttributes
argument_list|(
name|string
argument_list|,
name|stringLength
argument_list|,
name|items
argument_list|,
name|numItems
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
