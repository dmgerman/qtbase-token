begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists purely as an
end_comment
begin_comment
comment|// implementation detail.  This header file may change from version to
end_comment
begin_comment
comment|// version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QHARFBUZZ_P_H
end_ifndef
begin_define
DECL|macro|QHARFBUZZ_P_H
define|#
directive|define
name|QHARFBUZZ_P_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qchar.h>
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|QT_BUILD_CORE_LIB
argument_list|)
end_if
begin_include
include|#
directive|include
file|<harfbuzz-shaper.h>
end_include
begin_else
else|#
directive|else
end_else
begin_comment
comment|// a minimal set of HB types required for Qt libs other than Core
end_comment
begin_extern
extern|extern
literal|"C"
block|{
typedef|typedef
enum|enum
block|{
comment|/* no error */
DECL|enumerator|HB_Err_Ok
name|HB_Err_Ok
init|=
literal|0x0000
block|,
DECL|enumerator|HB_Err_Not_Covered
name|HB_Err_Not_Covered
init|=
literal|0xFFFF
block|,
comment|/* _hb_err() is called whenever returning the following errors,    * and in a couple places for HB_Err_Not_Covered too. */
comment|/* programmer error */
DECL|enumerator|HB_Err_Invalid_Argument
name|HB_Err_Invalid_Argument
init|=
literal|0x1A66
block|,
comment|/* font error */
DECL|enumerator|HB_Err_Invalid_SubTable_Format
name|HB_Err_Invalid_SubTable_Format
init|=
literal|0x157F
block|,
DECL|enumerator|HB_Err_Invalid_SubTable
name|HB_Err_Invalid_SubTable
init|=
literal|0x1570
block|,
DECL|enumerator|HB_Err_Read_Error
name|HB_Err_Read_Error
init|=
literal|0x6EAD
block|,
comment|/* system error */
DECL|enumerator|HB_Err_Out_Of_Memory
name|HB_Err_Out_Of_Memory
init|=
literal|0xDEAD
block|}
DECL|typedef|HB_Error
name|HB_Error
typedef|;
DECL|typedef|hb_int8
typedef|typedef
name|QT_PREPEND_NAMESPACE
argument_list|(
argument|qint8
argument_list|)
name|hb_int8
expr_stmt|;
DECL|typedef|hb_uint8
typedef|typedef
name|QT_PREPEND_NAMESPACE
argument_list|(
argument|quint8
argument_list|)
name|hb_uint8
expr_stmt|;
DECL|typedef|hb_int16
typedef|typedef
name|QT_PREPEND_NAMESPACE
argument_list|(
argument|qint16
argument_list|)
name|hb_int16
expr_stmt|;
DECL|typedef|hb_uint16
typedef|typedef
name|QT_PREPEND_NAMESPACE
argument_list|(
argument|quint16
argument_list|)
name|hb_uint16
expr_stmt|;
DECL|typedef|hb_int32
typedef|typedef
name|QT_PREPEND_NAMESPACE
argument_list|(
argument|qint32
argument_list|)
name|hb_int32
expr_stmt|;
DECL|typedef|hb_uint32
typedef|typedef
name|QT_PREPEND_NAMESPACE
argument_list|(
argument|quint32
argument_list|)
name|hb_uint32
expr_stmt|;
DECL|typedef|HB_Bool
typedef|typedef
name|hb_uint8
name|HB_Bool
typedef|;
DECL|typedef|HB_Byte
typedef|typedef
name|hb_uint8
name|HB_Byte
typedef|;
DECL|typedef|HB_UShort
typedef|typedef
name|hb_uint16
name|HB_UShort
typedef|;
DECL|typedef|HB_UInt
typedef|typedef
name|hb_uint32
name|HB_UInt
typedef|;
DECL|typedef|HB_Char
typedef|typedef
name|hb_int8
name|HB_Char
typedef|;
DECL|typedef|HB_Short
typedef|typedef
name|hb_int16
name|HB_Short
typedef|;
DECL|typedef|HB_Int
typedef|typedef
name|hb_int32
name|HB_Int
typedef|;
DECL|typedef|HB_UChar16
typedef|typedef
name|hb_uint16
name|HB_UChar16
typedef|;
DECL|typedef|HB_UChar32
typedef|typedef
name|hb_uint32
name|HB_UChar32
typedef|;
DECL|typedef|HB_Glyph
typedef|typedef
name|hb_uint32
name|HB_Glyph
typedef|;
DECL|typedef|HB_Fixed
typedef|typedef
name|hb_int32
name|HB_Fixed
typedef|;
comment|/* 26.6 */
DECL|typedef|HB_16Dot16
typedef|typedef
name|hb_int32
name|HB_16Dot16
typedef|;
comment|/* 16.16 */
DECL|typedef|HB_Tag
typedef|typedef
name|hb_uint32
name|HB_Tag
typedef|;
typedef|typedef
struct|struct
block|{
DECL|member|x
name|HB_Fixed
name|x
decl_stmt|;
DECL|member|y
name|HB_Fixed
name|y
decl_stmt|;
block|}
DECL|typedef|HB_FixedPoint
name|HB_FixedPoint
typedef|;
typedef|typedef
enum|enum
block|{
DECL|enumerator|HB_Script_Common
name|HB_Script_Common
block|,
DECL|enumerator|HB_Script_Greek
name|HB_Script_Greek
block|,
DECL|enumerator|HB_Script_Cyrillic
name|HB_Script_Cyrillic
block|,
DECL|enumerator|HB_Script_Armenian
name|HB_Script_Armenian
block|,
DECL|enumerator|HB_Script_Hebrew
name|HB_Script_Hebrew
block|,
DECL|enumerator|HB_Script_Arabic
name|HB_Script_Arabic
block|,
DECL|enumerator|HB_Script_Syriac
name|HB_Script_Syriac
block|,
DECL|enumerator|HB_Script_Thaana
name|HB_Script_Thaana
block|,
DECL|enumerator|HB_Script_Devanagari
name|HB_Script_Devanagari
block|,
DECL|enumerator|HB_Script_Bengali
name|HB_Script_Bengali
block|,
DECL|enumerator|HB_Script_Gurmukhi
name|HB_Script_Gurmukhi
block|,
DECL|enumerator|HB_Script_Gujarati
name|HB_Script_Gujarati
block|,
DECL|enumerator|HB_Script_Oriya
name|HB_Script_Oriya
block|,
DECL|enumerator|HB_Script_Tamil
name|HB_Script_Tamil
block|,
DECL|enumerator|HB_Script_Telugu
name|HB_Script_Telugu
block|,
DECL|enumerator|HB_Script_Kannada
name|HB_Script_Kannada
block|,
DECL|enumerator|HB_Script_Malayalam
name|HB_Script_Malayalam
block|,
DECL|enumerator|HB_Script_Sinhala
name|HB_Script_Sinhala
block|,
DECL|enumerator|HB_Script_Thai
name|HB_Script_Thai
block|,
DECL|enumerator|HB_Script_Lao
name|HB_Script_Lao
block|,
DECL|enumerator|HB_Script_Tibetan
name|HB_Script_Tibetan
block|,
DECL|enumerator|HB_Script_Myanmar
name|HB_Script_Myanmar
block|,
DECL|enumerator|HB_Script_Georgian
name|HB_Script_Georgian
block|,
DECL|enumerator|HB_Script_Hangul
name|HB_Script_Hangul
block|,
DECL|enumerator|HB_Script_Ogham
name|HB_Script_Ogham
block|,
DECL|enumerator|HB_Script_Runic
name|HB_Script_Runic
block|,
DECL|enumerator|HB_Script_Khmer
name|HB_Script_Khmer
block|,
DECL|enumerator|HB_Script_Nko
name|HB_Script_Nko
block|,
DECL|enumerator|HB_Script_Inherited
name|HB_Script_Inherited
block|,
DECL|enumerator|HB_ScriptCount
name|HB_ScriptCount
init|=
name|HB_Script_Inherited
block|}
DECL|typedef|HB_Script
name|HB_Script
typedef|;
ifdef|#
directive|ifdef
name|__xlC__
DECL|typedef|hb_bitfield
typedef|typedef
name|unsigned
name|hb_bitfield
typedef|;
else|#
directive|else
DECL|typedef|hb_bitfield
typedef|typedef
name|hb_uint8
name|hb_bitfield
typedef|;
endif|#
directive|endif
typedef|typedef
struct|struct
block|{
DECL|member|justification
name|hb_bitfield
name|justification
range|:
literal|4
decl_stmt|;
comment|/* Justification class */
DECL|member|clusterStart
name|hb_bitfield
name|clusterStart
range|:
literal|1
decl_stmt|;
comment|/* First glyph of representation of cluster */
DECL|member|mark
name|hb_bitfield
name|mark
range|:
literal|1
decl_stmt|;
comment|/* needs to be positioned around base char */
DECL|member|zeroWidth
name|hb_bitfield
name|zeroWidth
range|:
literal|1
decl_stmt|;
comment|/* ZWJ, ZWNJ etc, with no width */
DECL|member|dontPrint
name|hb_bitfield
name|dontPrint
range|:
literal|1
decl_stmt|;
DECL|member|combiningClass
name|hb_bitfield
name|combiningClass
range|:
literal|8
decl_stmt|;
block|}
DECL|typedef|HB_GlyphAttributes
name|HB_GlyphAttributes
typedef|;
DECL|typedef|HB_GDEF
typedef|typedef
name|void
modifier|*
name|HB_GDEF
typedef|;
DECL|typedef|HB_GSUB
typedef|typedef
name|void
modifier|*
name|HB_GSUB
typedef|;
DECL|typedef|HB_GPOS
typedef|typedef
name|void
modifier|*
name|HB_GPOS
typedef|;
DECL|typedef|HB_Buffer
typedef|typedef
name|void
modifier|*
name|HB_Buffer
typedef|;
DECL|typedef|HB_GetFontTableFunc
typedef|typedef
name|HB_Error
function_decl|(
modifier|*
name|HB_GetFontTableFunc
function_decl|)
parameter_list|(
name|void
modifier|*
name|font
parameter_list|,
name|HB_Tag
name|tag
parameter_list|,
name|HB_Byte
modifier|*
name|buffer
parameter_list|,
name|HB_UInt
modifier|*
name|length
parameter_list|)
function_decl|;
DECL|struct|HB_FaceRec_
typedef|typedef
struct|struct
name|HB_FaceRec_
block|{
DECL|member|isSymbolFont
name|HB_Bool
name|isSymbolFont
decl_stmt|;
DECL|member|gdef
name|HB_GDEF
name|gdef
decl_stmt|;
DECL|member|gsub
name|HB_GSUB
name|gsub
decl_stmt|;
DECL|member|gpos
name|HB_GPOS
name|gpos
decl_stmt|;
DECL|member|supported_scripts
name|HB_Bool
name|supported_scripts
index|[
name|HB_ScriptCount
index|]
decl_stmt|;
DECL|member|buffer
name|HB_Buffer
name|buffer
decl_stmt|;
DECL|member|current_script
name|HB_Script
name|current_script
decl_stmt|;
DECL|member|current_flags
name|int
name|current_flags
decl_stmt|;
comment|/* HB_ShaperFlags */
DECL|member|has_opentype_kerning
name|HB_Bool
name|has_opentype_kerning
decl_stmt|;
DECL|member|glyphs_substituted
name|HB_Bool
name|glyphs_substituted
decl_stmt|;
DECL|member|tmpAttributes
name|HB_GlyphAttributes
modifier|*
name|tmpAttributes
decl_stmt|;
DECL|member|tmpLogClusters
name|unsigned
name|int
modifier|*
name|tmpLogClusters
decl_stmt|;
DECL|member|length
name|int
name|length
decl_stmt|;
DECL|member|orig_nglyphs
name|int
name|orig_nglyphs
decl_stmt|;
DECL|member|font_for_init
name|void
modifier|*
name|font_for_init
decl_stmt|;
DECL|member|get_font_table_func
name|HB_GetFontTableFunc
name|get_font_table_func
decl_stmt|;
block|}
DECL|typedef|HB_FaceRec
name|HB_FaceRec
typedef|;
typedef|typedef
struct|struct
block|{
DECL|member|x
DECL|member|y
name|HB_Fixed
name|x
decl_stmt|,
name|y
decl_stmt|;
DECL|member|width
DECL|member|height
name|HB_Fixed
name|width
decl_stmt|,
name|height
decl_stmt|;
DECL|member|xOffset
DECL|member|yOffset
name|HB_Fixed
name|xOffset
decl_stmt|,
name|yOffset
decl_stmt|;
block|}
DECL|typedef|HB_GlyphMetrics
name|HB_GlyphMetrics
typedef|;
typedef|typedef
enum|enum
block|{
DECL|enumerator|HB_FontAscent
name|HB_FontAscent
block|}
DECL|typedef|HB_FontMetric
name|HB_FontMetric
typedef|;
struct_decl|struct
name|HB_Font_
struct_decl|;
DECL|typedef|HB_Font
typedef|typedef
name|struct
name|HB_Font_
modifier|*
name|HB_Font
typedef|;
DECL|typedef|HB_Face
typedef|typedef
name|struct
name|HB_FaceRec_
modifier|*
name|HB_Face
typedef|;
typedef|typedef
struct|struct
block|{
DECL|member|convertStringToGlyphIndices
name|HB_Bool
function_decl|(
modifier|*
name|convertStringToGlyphIndices
function_decl|)
parameter_list|(
name|HB_Font
name|font
parameter_list|,
specifier|const
name|HB_UChar16
modifier|*
name|string
parameter_list|,
name|hb_uint32
name|length
parameter_list|,
name|HB_Glyph
modifier|*
name|glyphs
parameter_list|,
name|hb_uint32
modifier|*
name|numGlyphs
parameter_list|,
name|HB_Bool
name|rightToLeft
parameter_list|)
function_decl|;
DECL|member|getGlyphAdvances
name|void
function_decl|(
modifier|*
name|getGlyphAdvances
function_decl|)
parameter_list|(
name|HB_Font
name|font
parameter_list|,
specifier|const
name|HB_Glyph
modifier|*
name|glyphs
parameter_list|,
name|hb_uint32
name|numGlyphs
parameter_list|,
name|HB_Fixed
modifier|*
name|advances
parameter_list|,
name|int
name|flags
comment|/*HB_ShaperFlag*/
parameter_list|)
function_decl|;
DECL|member|canRender
name|HB_Bool
function_decl|(
modifier|*
name|canRender
function_decl|)
parameter_list|(
name|HB_Font
name|font
parameter_list|,
specifier|const
name|HB_UChar16
modifier|*
name|string
parameter_list|,
name|hb_uint32
name|length
parameter_list|)
function_decl|;
comment|/* implementation needs to make sure to load a scaled glyph, so /no/ FT_LOAD_NO_SCALE */
DECL|member|getPointInOutline
name|HB_Error
function_decl|(
modifier|*
name|getPointInOutline
function_decl|)
parameter_list|(
name|HB_Font
name|font
parameter_list|,
name|HB_Glyph
name|glyph
parameter_list|,
name|int
name|flags
comment|/*HB_ShaperFlag*/
parameter_list|,
name|hb_uint32
name|point
parameter_list|,
name|HB_Fixed
modifier|*
name|xpos
parameter_list|,
name|HB_Fixed
modifier|*
name|ypos
parameter_list|,
name|hb_uint32
modifier|*
name|nPoints
parameter_list|)
function_decl|;
DECL|member|getGlyphMetrics
name|void
function_decl|(
modifier|*
name|getGlyphMetrics
function_decl|)
parameter_list|(
name|HB_Font
name|font
parameter_list|,
name|HB_Glyph
name|glyph
parameter_list|,
name|HB_GlyphMetrics
modifier|*
name|metrics
parameter_list|)
function_decl|;
DECL|member|getFontMetric
name|HB_Fixed
function_decl|(
modifier|*
name|getFontMetric
function_decl|)
parameter_list|(
name|HB_Font
name|font
parameter_list|,
name|HB_FontMetric
name|metric
parameter_list|)
function_decl|;
block|}
DECL|typedef|HB_FontClass
name|HB_FontClass
typedef|;
DECL|struct|HB_Font_
typedef|typedef
struct|struct
name|HB_Font_
block|{
DECL|member|klass
specifier|const
name|HB_FontClass
modifier|*
name|klass
decl_stmt|;
comment|/* Metrics */
DECL|member|x_ppem
DECL|member|y_ppem
name|HB_UShort
name|x_ppem
decl_stmt|,
name|y_ppem
decl_stmt|;
DECL|member|x_scale
DECL|member|y_scale
name|HB_16Dot16
name|x_scale
decl_stmt|,
name|y_scale
decl_stmt|;
DECL|member|userData
name|void
modifier|*
name|userData
decl_stmt|;
block|}
DECL|typedef|HB_FontRec
name|HB_FontRec
typedef|;
typedef|typedef
enum|enum
block|{
DECL|enumerator|HB_LeftToRight
name|HB_LeftToRight
init|=
literal|0
block|,
DECL|enumerator|HB_RightToLeft
name|HB_RightToLeft
init|=
literal|1
block|}
DECL|typedef|HB_StringToGlyphsFlags
name|HB_StringToGlyphsFlags
typedef|;
typedef|typedef
enum|enum
block|{
DECL|enumerator|HB_ShaperFlag_Default
name|HB_ShaperFlag_Default
init|=
literal|0
block|,
DECL|enumerator|HB_ShaperFlag_NoKerning
name|HB_ShaperFlag_NoKerning
init|=
literal|1
block|,
DECL|enumerator|HB_ShaperFlag_UseDesignMetrics
name|HB_ShaperFlag_UseDesignMetrics
init|=
literal|2
block|}
DECL|typedef|HB_ShaperFlag
name|HB_ShaperFlag
typedef|;
typedef|typedef
struct|struct
block|{
DECL|member|pos
name|hb_uint32
name|pos
decl_stmt|;
DECL|member|length
name|hb_uint32
name|length
decl_stmt|;
DECL|member|script
name|HB_Script
name|script
decl_stmt|;
DECL|member|bidiLevel
name|hb_uint8
name|bidiLevel
decl_stmt|;
block|}
DECL|typedef|HB_ScriptItem
name|HB_ScriptItem
typedef|;
DECL|typedef|HB_ShaperItem
typedef|typedef
name|struct
name|HB_ShaperItem_
name|HB_ShaperItem
typedef|;
DECL|struct|HB_ShaperItem_
struct|struct
name|HB_ShaperItem_
block|{
DECL|member|string
specifier|const
name|HB_UChar16
modifier|*
name|string
decl_stmt|;
comment|/* input: the Unicode UTF16 text to be shaped */
DECL|member|stringLength
name|hb_uint32
name|stringLength
decl_stmt|;
comment|/* input: the length of the input in 16-bit words */
DECL|member|item
name|HB_ScriptItem
name|item
decl_stmt|;
comment|/* input: the current run to be shaped: a run of text all in the same script that is a substring of<string> */
DECL|member|font
name|HB_Font
name|font
decl_stmt|;
comment|/* input: the font: scale, units and function pointers supplying glyph indices and metrics */
DECL|member|face
name|HB_Face
name|face
decl_stmt|;
comment|/* input: the shaper state; current script, access to the OpenType tables , etc. */
DECL|member|shaperFlags
name|int
name|shaperFlags
decl_stmt|;
comment|/* input (unused) should be set to 0; intended to support flags defined in HB_ShaperFlag */
DECL|member|glyphIndicesPresent
name|HB_Bool
name|glyphIndicesPresent
decl_stmt|;
comment|/* input: true if the<glyphs> array contains glyph indices ready to be shaped */
DECL|member|initialGlyphCount
name|hb_uint32
name|initialGlyphCount
decl_stmt|;
comment|/* input: if glyphIndicesPresent is true, the number of glyph indices in the<glyphs> array */
DECL|member|num_glyphs
name|hb_uint32
name|num_glyphs
decl_stmt|;
comment|/* input: capacity of output arrays<glyphs>,<attributes>,<advances>,<offsets>, and<log_clusters>; */
comment|/* output: required capacity (may be larger than actual capacity) */
DECL|member|glyphs
name|HB_Glyph
modifier|*
name|glyphs
decl_stmt|;
comment|/* output:<num_glyphs> indices of shaped glyphs */
DECL|member|attributes
name|HB_GlyphAttributes
modifier|*
name|attributes
decl_stmt|;
comment|/* output:<num_glyphs> glyph attributes */
DECL|member|advances
name|HB_Fixed
modifier|*
name|advances
decl_stmt|;
comment|/* output:<num_glyphs> advances */
DECL|member|offsets
name|HB_FixedPoint
modifier|*
name|offsets
decl_stmt|;
comment|/* output:<num_glyphs> offsets */
DECL|member|log_clusters
name|unsigned
name|short
modifier|*
name|log_clusters
decl_stmt|;
comment|/* output: for each output glyph, the index in the input of the start of its logical cluster */
comment|/* internal */
DECL|member|kerning_applied
name|HB_Bool
name|kerning_applied
decl_stmt|;
comment|/* output: true if kerning was applied by the shaper */
block|}
struct|;
block|}
end_extern
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_BUILD_CORE_LIB
end_comment
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|script_to_hbscript
specifier|static
specifier|inline
name|HB_Script
name|script_to_hbscript
parameter_list|(
name|uchar
name|script
parameter_list|)
block|{
switch|switch
condition|(
name|script
condition|)
block|{
case|case
name|QChar
operator|::
name|Script_Inherited
case|:
return|return
name|HB_Script_Inherited
return|;
case|case
name|QChar
operator|::
name|Script_Common
case|:
return|return
name|HB_Script_Common
return|;
case|case
name|QChar
operator|::
name|Script_Arabic
case|:
return|return
name|HB_Script_Arabic
return|;
case|case
name|QChar
operator|::
name|Script_Armenian
case|:
return|return
name|HB_Script_Armenian
return|;
case|case
name|QChar
operator|::
name|Script_Bengali
case|:
return|return
name|HB_Script_Bengali
return|;
case|case
name|QChar
operator|::
name|Script_Cyrillic
case|:
return|return
name|HB_Script_Cyrillic
return|;
case|case
name|QChar
operator|::
name|Script_Devanagari
case|:
return|return
name|HB_Script_Devanagari
return|;
case|case
name|QChar
operator|::
name|Script_Georgian
case|:
return|return
name|HB_Script_Georgian
return|;
case|case
name|QChar
operator|::
name|Script_Greek
case|:
return|return
name|HB_Script_Greek
return|;
case|case
name|QChar
operator|::
name|Script_Gujarati
case|:
return|return
name|HB_Script_Gujarati
return|;
case|case
name|QChar
operator|::
name|Script_Gurmukhi
case|:
return|return
name|HB_Script_Gurmukhi
return|;
case|case
name|QChar
operator|::
name|Script_Hangul
case|:
return|return
name|HB_Script_Hangul
return|;
case|case
name|QChar
operator|::
name|Script_Hebrew
case|:
return|return
name|HB_Script_Hebrew
return|;
case|case
name|QChar
operator|::
name|Script_Kannada
case|:
return|return
name|HB_Script_Kannada
return|;
case|case
name|QChar
operator|::
name|Script_Khmer
case|:
return|return
name|HB_Script_Khmer
return|;
case|case
name|QChar
operator|::
name|Script_Lao
case|:
return|return
name|HB_Script_Lao
return|;
case|case
name|QChar
operator|::
name|Script_Malayalam
case|:
return|return
name|HB_Script_Malayalam
return|;
case|case
name|QChar
operator|::
name|Script_Myanmar
case|:
return|return
name|HB_Script_Myanmar
return|;
case|case
name|QChar
operator|::
name|Script_Ogham
case|:
return|return
name|HB_Script_Ogham
return|;
case|case
name|QChar
operator|::
name|Script_Oriya
case|:
return|return
name|HB_Script_Oriya
return|;
case|case
name|QChar
operator|::
name|Script_Runic
case|:
return|return
name|HB_Script_Runic
return|;
case|case
name|QChar
operator|::
name|Script_Sinhala
case|:
return|return
name|HB_Script_Sinhala
return|;
case|case
name|QChar
operator|::
name|Script_Syriac
case|:
return|return
name|HB_Script_Syriac
return|;
case|case
name|QChar
operator|::
name|Script_Tamil
case|:
return|return
name|HB_Script_Tamil
return|;
case|case
name|QChar
operator|::
name|Script_Telugu
case|:
return|return
name|HB_Script_Telugu
return|;
case|case
name|QChar
operator|::
name|Script_Thaana
case|:
return|return
name|HB_Script_Thaana
return|;
case|case
name|QChar
operator|::
name|Script_Thai
case|:
return|return
name|HB_Script_Thai
return|;
case|case
name|QChar
operator|::
name|Script_Tibetan
case|:
return|return
name|HB_Script_Tibetan
return|;
case|case
name|QChar
operator|::
name|Script_Nko
case|:
return|return
name|HB_Script_Nko
return|;
default|default:
break|break;
block|}
empty_stmt|;
return|return
name|HB_Script_Common
return|;
block|}
end_function
begin_function
DECL|function|hbscript_to_script
specifier|static
specifier|inline
name|uchar
name|hbscript_to_script
parameter_list|(
name|uchar
name|script
parameter_list|)
block|{
switch|switch
condition|(
name|script
condition|)
block|{
case|case
name|HB_Script_Inherited
case|:
return|return
name|QChar
operator|::
name|Script_Inherited
return|;
case|case
name|HB_Script_Common
case|:
return|return
name|QChar
operator|::
name|Script_Common
return|;
case|case
name|HB_Script_Arabic
case|:
return|return
name|QChar
operator|::
name|Script_Arabic
return|;
case|case
name|HB_Script_Armenian
case|:
return|return
name|QChar
operator|::
name|Script_Armenian
return|;
case|case
name|HB_Script_Bengali
case|:
return|return
name|QChar
operator|::
name|Script_Bengali
return|;
case|case
name|HB_Script_Cyrillic
case|:
return|return
name|QChar
operator|::
name|Script_Cyrillic
return|;
case|case
name|HB_Script_Devanagari
case|:
return|return
name|QChar
operator|::
name|Script_Devanagari
return|;
case|case
name|HB_Script_Georgian
case|:
return|return
name|QChar
operator|::
name|Script_Georgian
return|;
case|case
name|HB_Script_Greek
case|:
return|return
name|QChar
operator|::
name|Script_Greek
return|;
case|case
name|HB_Script_Gujarati
case|:
return|return
name|QChar
operator|::
name|Script_Gujarati
return|;
case|case
name|HB_Script_Gurmukhi
case|:
return|return
name|QChar
operator|::
name|Script_Gurmukhi
return|;
case|case
name|HB_Script_Hangul
case|:
return|return
name|QChar
operator|::
name|Script_Hangul
return|;
case|case
name|HB_Script_Hebrew
case|:
return|return
name|QChar
operator|::
name|Script_Hebrew
return|;
case|case
name|HB_Script_Kannada
case|:
return|return
name|QChar
operator|::
name|Script_Kannada
return|;
case|case
name|HB_Script_Khmer
case|:
return|return
name|QChar
operator|::
name|Script_Khmer
return|;
case|case
name|HB_Script_Lao
case|:
return|return
name|QChar
operator|::
name|Script_Lao
return|;
case|case
name|HB_Script_Malayalam
case|:
return|return
name|QChar
operator|::
name|Script_Malayalam
return|;
case|case
name|HB_Script_Myanmar
case|:
return|return
name|QChar
operator|::
name|Script_Myanmar
return|;
case|case
name|HB_Script_Ogham
case|:
return|return
name|QChar
operator|::
name|Script_Ogham
return|;
case|case
name|HB_Script_Oriya
case|:
return|return
name|QChar
operator|::
name|Script_Oriya
return|;
case|case
name|HB_Script_Runic
case|:
return|return
name|QChar
operator|::
name|Script_Runic
return|;
case|case
name|HB_Script_Sinhala
case|:
return|return
name|QChar
operator|::
name|Script_Sinhala
return|;
case|case
name|HB_Script_Syriac
case|:
return|return
name|QChar
operator|::
name|Script_Syriac
return|;
case|case
name|HB_Script_Tamil
case|:
return|return
name|QChar
operator|::
name|Script_Tamil
return|;
case|case
name|HB_Script_Telugu
case|:
return|return
name|QChar
operator|::
name|Script_Telugu
return|;
case|case
name|HB_Script_Thaana
case|:
return|return
name|QChar
operator|::
name|Script_Thaana
return|;
case|case
name|HB_Script_Thai
case|:
return|return
name|QChar
operator|::
name|Script_Thai
return|;
case|case
name|HB_Script_Tibetan
case|:
return|return
name|QChar
operator|::
name|Script_Tibetan
return|;
case|case
name|HB_Script_Nko
case|:
return|return
name|QChar
operator|::
name|Script_Nko
return|;
default|default:
break|break;
block|}
empty_stmt|;
return|return
name|QChar
operator|::
name|Script_Common
return|;
block|}
end_function
begin_function_decl
name|Q_CORE_EXPORT
name|HB_Bool
name|qShapeItem
parameter_list|(
name|HB_ShaperItem
modifier|*
name|item
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|// ### temporary
end_comment
begin_function_decl
name|Q_CORE_EXPORT
name|HB_Face
name|qHBNewFace
parameter_list|(
name|void
modifier|*
name|font
parameter_list|,
name|HB_GetFontTableFunc
name|tableFunc
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|Q_CORE_EXPORT
name|void
name|qHBFreeFace
parameter_list|(
name|HB_Face
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|Q_CORE_EXPORT
name|HB_Face
name|qHBLoadFace
parameter_list|(
name|HB_Face
name|face
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|Q_DECLARE_TYPEINFO
argument_list|(
name|HB_GlyphAttributes
argument_list|,
name|Q_PRIMITIVE_TYPE
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_DECLARE_TYPEINFO
argument_list|(
name|HB_FixedPoint
argument_list|,
name|Q_PRIMITIVE_TYPE
argument_list|)
expr_stmt|;
end_expr_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QHARFBUZZ_P_H
end_comment
end_unit
