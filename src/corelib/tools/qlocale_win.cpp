begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qlocale_p.h"
end_include
begin_include
include|#
directive|include
file|"qlocale_tools_p.h"
end_include
begin_include
include|#
directive|include
file|"qstringlist.h"
end_include
begin_include
include|#
directive|include
file|"qvariant.h"
end_include
begin_include
include|#
directive|include
file|"qdatetime.h"
end_include
begin_include
include|#
directive|include
file|"private/qsystemlibrary_p.h"
end_include
begin_include
include|#
directive|include
file|"qdebug.h"
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_WIN
end_ifdef
begin_include
include|#
directive|include
file|<qt_windows.h>
end_include
begin_include
include|#
directive|include
file|<time.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_WINRT
end_ifdef
begin_include
include|#
directive|include
file|<wrl.h>
end_include
begin_include
include|#
directive|include
file|<windows.foundation.h>
end_include
begin_include
include|#
directive|include
file|<windows.foundation.collections.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|Q_OS_WINPHONE
end_ifndef
begin_include
include|#
directive|include
file|<windows.globalization.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Q_OS_WINRT
end_comment
begin_function_decl
name|QT_BEGIN_NAMESPACE
ifndef|#
directive|ifndef
name|Q_OS_WINRT
specifier|static
name|QByteArray
name|getWinLocaleName
parameter_list|(
name|LCID
name|id
init|=
name|LOCALE_USER_DEFAULT
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
specifier|const
name|char
modifier|*
name|winLangCodeToIsoName
parameter_list|(
name|int
name|code
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|QString
name|winIso639LangName
parameter_list|(
name|LCID
name|id
init|=
name|LOCALE_USER_DEFAULT
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|QString
name|winIso3116CtryName
parameter_list|(
name|LCID
name|id
init|=
name|LOCALE_USER_DEFAULT
parameter_list|)
function_decl|;
end_function_decl
begin_else
else|#
directive|else
end_else
begin_comment
comment|// !Q_OS_WINRT
end_comment
begin_using
using|using
namespace|namespace
name|Microsoft
operator|::
name|WRL
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|Microsoft
operator|::
name|WRL
operator|::
name|Wrappers
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|Foundation
namespace|;
end_using
begin_function_decl
specifier|static
name|QByteArray
name|getWinLocaleName
parameter_list|(
name|LPWSTR
name|id
init|=
name|LOCALE_NAME_USER_DEFAULT
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
specifier|const
name|char
modifier|*
name|winLangCodeToIsoName
parameter_list|(
name|int
name|code
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|QString
name|winIso639LangName
parameter_list|(
name|LPWSTR
name|id
init|=
name|LOCALE_NAME_USER_DEFAULT
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|QString
name|winIso3116CtryName
parameter_list|(
name|LPWSTR
name|id
init|=
name|LOCALE_NAME_USER_DEFAULT
parameter_list|)
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Q_OS_WINRT
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_SYSTEMLOCALE
end_ifndef
begin_ifndef
ifndef|#
directive|ifndef
name|MUI_LANGUAGE_NAME
end_ifndef
begin_define
DECL|macro|MUI_LANGUAGE_NAME
define|#
directive|define
name|MUI_LANGUAGE_NAME
value|0x8
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|LOCALE_SSHORTESTDAYNAME1
end_ifndef
begin_define
DECL|macro|LOCALE_SSHORTESTDAYNAME1
define|#
directive|define
name|LOCALE_SSHORTESTDAYNAME1
value|0x0060
end_define
begin_define
DECL|macro|LOCALE_SSHORTESTDAYNAME2
define|#
directive|define
name|LOCALE_SSHORTESTDAYNAME2
value|0x0061
end_define
begin_define
DECL|macro|LOCALE_SSHORTESTDAYNAME3
define|#
directive|define
name|LOCALE_SSHORTESTDAYNAME3
value|0x0062
end_define
begin_define
DECL|macro|LOCALE_SSHORTESTDAYNAME4
define|#
directive|define
name|LOCALE_SSHORTESTDAYNAME4
value|0x0063
end_define
begin_define
DECL|macro|LOCALE_SSHORTESTDAYNAME5
define|#
directive|define
name|LOCALE_SSHORTESTDAYNAME5
value|0x0064
end_define
begin_define
DECL|macro|LOCALE_SSHORTESTDAYNAME6
define|#
directive|define
name|LOCALE_SSHORTESTDAYNAME6
value|0x0065
end_define
begin_define
DECL|macro|LOCALE_SSHORTESTDAYNAME7
define|#
directive|define
name|LOCALE_SSHORTESTDAYNAME7
value|0x0066
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|LOCALE_SNATIVELANGUAGENAME
end_ifndef
begin_define
DECL|macro|LOCALE_SNATIVELANGUAGENAME
define|#
directive|define
name|LOCALE_SNATIVELANGUAGENAME
value|0x00000004
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|LOCALE_SNATIVECOUNTRYNAME
end_ifndef
begin_define
DECL|macro|LOCALE_SNATIVECOUNTRYNAME
define|#
directive|define
name|LOCALE_SNATIVECOUNTRYNAME
value|0x00000008
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|LOCALE_SSHORTTIME
end_ifndef
begin_define
DECL|macro|LOCALE_SSHORTTIME
define|#
directive|define
name|LOCALE_SSHORTTIME
value|0x00000079
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_struct
DECL|struct|QSystemLocalePrivate
struct|struct
name|QSystemLocalePrivate
block|{
name|QSystemLocalePrivate
parameter_list|()
constructor_decl|;
name|QChar
name|zeroDigit
parameter_list|()
function_decl|;
name|QChar
name|decimalPoint
parameter_list|()
function_decl|;
name|QChar
name|groupSeparator
parameter_list|()
function_decl|;
name|QChar
name|negativeSign
parameter_list|()
function_decl|;
name|QChar
name|positiveSign
parameter_list|()
function_decl|;
name|QVariant
name|dateFormat
parameter_list|(
name|QLocale
operator|::
name|FormatType
parameter_list|)
function_decl|;
name|QVariant
name|timeFormat
parameter_list|(
name|QLocale
operator|::
name|FormatType
parameter_list|)
function_decl|;
name|QVariant
name|dateTimeFormat
parameter_list|(
name|QLocale
operator|::
name|FormatType
parameter_list|)
function_decl|;
name|QVariant
name|dayName
parameter_list|(
name|int
parameter_list|,
name|QLocale
operator|::
name|FormatType
parameter_list|)
function_decl|;
name|QVariant
name|monthName
parameter_list|(
name|int
parameter_list|,
name|QLocale
operator|::
name|FormatType
parameter_list|)
function_decl|;
name|QVariant
name|toString
parameter_list|(
specifier|const
name|QDate
modifier|&
parameter_list|,
name|QLocale
operator|::
name|FormatType
parameter_list|)
function_decl|;
name|QVariant
name|toString
parameter_list|(
specifier|const
name|QTime
modifier|&
parameter_list|,
name|QLocale
operator|::
name|FormatType
parameter_list|)
function_decl|;
name|QVariant
name|toString
parameter_list|(
specifier|const
name|QDateTime
modifier|&
parameter_list|,
name|QLocale
operator|::
name|FormatType
parameter_list|)
function_decl|;
name|QVariant
name|measurementSystem
parameter_list|()
function_decl|;
name|QVariant
name|amText
parameter_list|()
function_decl|;
name|QVariant
name|pmText
parameter_list|()
function_decl|;
name|QVariant
name|firstDayOfWeek
parameter_list|()
function_decl|;
name|QVariant
name|currencySymbol
parameter_list|(
name|QLocale
operator|::
name|CurrencySymbolFormat
parameter_list|)
function_decl|;
name|QVariant
name|toCurrencyString
parameter_list|(
specifier|const
name|QSystemLocale
operator|::
name|CurrencyToStringArgument
modifier|&
parameter_list|)
function_decl|;
name|QVariant
name|uiLanguages
parameter_list|()
function_decl|;
name|QVariant
name|nativeLanguageName
parameter_list|()
function_decl|;
name|QVariant
name|nativeCountryName
parameter_list|()
function_decl|;
name|void
name|update
parameter_list|()
function_decl|;
private|private:
DECL|enum|SubstitutionType
enum|enum
name|SubstitutionType
block|{
DECL|enumerator|SUnknown
name|SUnknown
block|,
DECL|enumerator|SContext
name|SContext
block|,
DECL|enumerator|SAlways
name|SAlways
block|,
DECL|enumerator|SNever
name|SNever
block|}
enum|;
comment|// cached values:
ifndef|#
directive|ifndef
name|Q_OS_WINRT
DECL|member|lcid
name|LCID
name|lcid
decl_stmt|;
else|#
directive|else
DECL|member|lcName
name|WCHAR
name|lcName
index|[
name|LOCALE_NAME_MAX_LENGTH
index|]
decl_stmt|;
endif|#
directive|endif
DECL|member|substitutionType
name|SubstitutionType
name|substitutionType
decl_stmt|;
DECL|member|zero
name|QChar
name|zero
decl_stmt|;
name|int
name|getLocaleInfo
parameter_list|(
name|LCTYPE
name|type
parameter_list|,
name|LPWSTR
name|data
parameter_list|,
name|int
name|size
parameter_list|)
function_decl|;
name|QString
name|getLocaleInfo
parameter_list|(
name|LCTYPE
name|type
parameter_list|,
name|int
name|maxlen
init|=
literal|0
parameter_list|)
function_decl|;
name|int
name|getLocaleInfo_int
parameter_list|(
name|LCTYPE
name|type
parameter_list|,
name|int
name|maxlen
init|=
literal|0
parameter_list|)
function_decl|;
name|QChar
name|getLocaleInfo_qchar
parameter_list|(
name|LCTYPE
name|type
parameter_list|)
function_decl|;
name|int
name|getCurrencyFormat
parameter_list|(
name|DWORD
name|flags
parameter_list|,
name|LPCWSTR
name|value
parameter_list|,
specifier|const
name|CURRENCYFMTW
modifier|*
name|format
parameter_list|,
name|LPWSTR
name|data
parameter_list|,
name|int
name|size
parameter_list|)
function_decl|;
name|int
name|getDateFormat
parameter_list|(
name|DWORD
name|flags
parameter_list|,
specifier|const
name|SYSTEMTIME
modifier|*
name|date
parameter_list|,
name|LPCWSTR
name|format
parameter_list|,
name|LPWSTR
name|data
parameter_list|,
name|int
name|size
parameter_list|)
function_decl|;
name|int
name|getTimeFormat
parameter_list|(
name|DWORD
name|flags
parameter_list|,
specifier|const
name|SYSTEMTIME
modifier|*
name|date
parameter_list|,
name|LPCWSTR
name|format
parameter_list|,
name|LPWSTR
name|data
parameter_list|,
name|int
name|size
parameter_list|)
function_decl|;
name|SubstitutionType
name|substitution
parameter_list|()
function_decl|;
name|QString
modifier|&
name|substituteDigits
parameter_list|(
name|QString
modifier|&
name|string
parameter_list|)
function_decl|;
specifier|static
name|QString
name|winToQtFormat
parameter_list|(
specifier|const
name|QString
modifier|&
name|sys_fmt
parameter_list|)
function_decl|;
block|}
struct|;
end_struct
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|QSystemLocalePrivate
argument_list|,
argument|systemLocalePrivate
argument_list|)
end_macro
begin_constructor
DECL|function|QSystemLocalePrivate
name|QSystemLocalePrivate
operator|::
name|QSystemLocalePrivate
parameter_list|()
member_init_list|:
name|substitutionType
argument_list|(
name|SUnknown
argument_list|)
block|{
ifndef|#
directive|ifndef
name|Q_OS_WINRT
name|lcid
operator|=
name|GetUserDefaultLCID
argument_list|()
expr_stmt|;
else|#
directive|else
name|GetUserDefaultLocaleName
argument_list|(
name|lcName
argument_list|,
name|LOCALE_NAME_MAX_LENGTH
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_constructor
begin_function
DECL|function|getCurrencyFormat
specifier|inline
name|int
name|QSystemLocalePrivate
operator|::
name|getCurrencyFormat
parameter_list|(
name|DWORD
name|flags
parameter_list|,
name|LPCWSTR
name|value
parameter_list|,
specifier|const
name|CURRENCYFMTW
modifier|*
name|format
parameter_list|,
name|LPWSTR
name|data
parameter_list|,
name|int
name|size
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|Q_OS_WINRT
return|return
name|GetCurrencyFormat
argument_list|(
name|lcid
argument_list|,
name|flags
argument_list|,
name|value
argument_list|,
name|format
argument_list|,
name|data
argument_list|,
name|size
argument_list|)
return|;
else|#
directive|else
return|return
name|GetCurrencyFormatEx
argument_list|(
name|lcName
argument_list|,
name|flags
argument_list|,
name|value
argument_list|,
name|format
argument_list|,
name|data
argument_list|,
name|size
argument_list|)
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|getDateFormat
specifier|inline
name|int
name|QSystemLocalePrivate
operator|::
name|getDateFormat
parameter_list|(
name|DWORD
name|flags
parameter_list|,
specifier|const
name|SYSTEMTIME
modifier|*
name|date
parameter_list|,
name|LPCWSTR
name|format
parameter_list|,
name|LPWSTR
name|data
parameter_list|,
name|int
name|size
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|Q_OS_WINRT
return|return
name|GetDateFormat
argument_list|(
name|lcid
argument_list|,
name|flags
argument_list|,
name|date
argument_list|,
name|format
argument_list|,
name|data
argument_list|,
name|size
argument_list|)
return|;
else|#
directive|else
return|return
name|GetDateFormatEx
argument_list|(
name|lcName
argument_list|,
name|flags
argument_list|,
name|date
argument_list|,
name|format
argument_list|,
name|data
argument_list|,
name|size
argument_list|,
name|NULL
argument_list|)
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|getTimeFormat
specifier|inline
name|int
name|QSystemLocalePrivate
operator|::
name|getTimeFormat
parameter_list|(
name|DWORD
name|flags
parameter_list|,
specifier|const
name|SYSTEMTIME
modifier|*
name|date
parameter_list|,
name|LPCWSTR
name|format
parameter_list|,
name|LPWSTR
name|data
parameter_list|,
name|int
name|size
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|Q_OS_WINRT
return|return
name|GetTimeFormat
argument_list|(
name|lcid
argument_list|,
name|flags
argument_list|,
name|date
argument_list|,
name|format
argument_list|,
name|data
argument_list|,
name|size
argument_list|)
return|;
else|#
directive|else
return|return
name|GetTimeFormatEx
argument_list|(
name|lcName
argument_list|,
name|flags
argument_list|,
name|date
argument_list|,
name|format
argument_list|,
name|data
argument_list|,
name|size
argument_list|)
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|getLocaleInfo
specifier|inline
name|int
name|QSystemLocalePrivate
operator|::
name|getLocaleInfo
parameter_list|(
name|LCTYPE
name|type
parameter_list|,
name|LPWSTR
name|data
parameter_list|,
name|int
name|size
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|Q_OS_WINRT
return|return
name|GetLocaleInfo
argument_list|(
name|lcid
argument_list|,
name|type
argument_list|,
name|data
argument_list|,
name|size
argument_list|)
return|;
else|#
directive|else
return|return
name|GetLocaleInfoEx
argument_list|(
name|lcName
argument_list|,
name|type
argument_list|,
name|data
argument_list|,
name|size
argument_list|)
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|getLocaleInfo
name|QString
name|QSystemLocalePrivate
operator|::
name|getLocaleInfo
parameter_list|(
name|LCTYPE
name|type
parameter_list|,
name|int
name|maxlen
parameter_list|)
block|{
name|QVarLengthArray
argument_list|<
name|wchar_t
argument_list|,
literal|64
argument_list|>
name|buf
argument_list|(
name|maxlen
condition|?
name|maxlen
else|:
literal|64
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|getLocaleInfo
argument_list|(
name|type
argument_list|,
name|buf
operator|.
name|data
argument_list|()
argument_list|,
name|buf
operator|.
name|size
argument_list|()
argument_list|)
condition|)
return|return
name|QString
argument_list|()
return|;
if|if
condition|(
name|GetLastError
argument_list|()
operator|==
name|ERROR_INSUFFICIENT_BUFFER
condition|)
block|{
name|int
name|cnt
init|=
name|getLocaleInfo
argument_list|(
name|type
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|cnt
operator|==
literal|0
condition|)
return|return
name|QString
argument_list|()
return|;
name|buf
operator|.
name|resize
argument_list|(
name|cnt
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|getLocaleInfo
argument_list|(
name|type
argument_list|,
name|buf
operator|.
name|data
argument_list|()
argument_list|,
name|buf
operator|.
name|size
argument_list|()
argument_list|)
condition|)
return|return
name|QString
argument_list|()
return|;
block|}
return|return
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|buf
operator|.
name|data
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|getLocaleInfo_int
name|int
name|QSystemLocalePrivate
operator|::
name|getLocaleInfo_int
parameter_list|(
name|LCTYPE
name|type
parameter_list|,
name|int
name|maxlen
parameter_list|)
block|{
name|QString
name|str
init|=
name|getLocaleInfo
argument_list|(
name|type
argument_list|,
name|maxlen
argument_list|)
decl_stmt|;
name|bool
name|ok
init|=
literal|false
decl_stmt|;
name|int
name|v
init|=
name|str
operator|.
name|toInt
argument_list|(
operator|&
name|ok
argument_list|)
decl_stmt|;
return|return
name|ok
condition|?
name|v
else|:
literal|0
return|;
block|}
end_function
begin_function
DECL|function|getLocaleInfo_qchar
name|QChar
name|QSystemLocalePrivate
operator|::
name|getLocaleInfo_qchar
parameter_list|(
name|LCTYPE
name|type
parameter_list|)
block|{
name|QString
name|str
init|=
name|getLocaleInfo
argument_list|(
name|type
argument_list|)
decl_stmt|;
return|return
name|str
operator|.
name|isEmpty
argument_list|()
condition|?
name|QChar
argument_list|()
else|:
name|str
operator|.
name|at
argument_list|(
literal|0
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|substitution
name|QSystemLocalePrivate
operator|::
name|SubstitutionType
name|QSystemLocalePrivate
operator|::
name|substitution
parameter_list|()
block|{
if|if
condition|(
name|substitutionType
operator|==
name|SUnknown
condition|)
block|{
name|wchar_t
name|buf
index|[
literal|8
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|getLocaleInfo
argument_list|(
name|LOCALE_IDIGITSUBSTITUTION
argument_list|,
name|buf
argument_list|,
literal|8
argument_list|)
condition|)
block|{
name|substitutionType
operator|=
name|QSystemLocalePrivate
operator|::
name|SNever
expr_stmt|;
return|return
name|substitutionType
return|;
block|}
if|if
condition|(
name|buf
index|[
literal|0
index|]
operator|==
literal|'1'
condition|)
name|substitutionType
operator|=
name|QSystemLocalePrivate
operator|::
name|SNever
expr_stmt|;
elseif|else
if|if
condition|(
name|buf
index|[
literal|0
index|]
operator|==
literal|'0'
condition|)
name|substitutionType
operator|=
name|QSystemLocalePrivate
operator|::
name|SContext
expr_stmt|;
elseif|else
if|if
condition|(
name|buf
index|[
literal|0
index|]
operator|==
literal|'2'
condition|)
name|substitutionType
operator|=
name|QSystemLocalePrivate
operator|::
name|SAlways
expr_stmt|;
else|else
block|{
name|wchar_t
name|digits
index|[
literal|11
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|getLocaleInfo
argument_list|(
name|LOCALE_SNATIVEDIGITS
argument_list|,
name|digits
argument_list|,
literal|11
argument_list|)
condition|)
block|{
name|substitutionType
operator|=
name|QSystemLocalePrivate
operator|::
name|SNever
expr_stmt|;
return|return
name|substitutionType
return|;
block|}
specifier|const
name|wchar_t
name|zero
init|=
name|digits
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|buf
index|[
literal|0
index|]
operator|==
name|zero
operator|+
literal|2
condition|)
name|substitutionType
operator|=
name|QSystemLocalePrivate
operator|::
name|SAlways
expr_stmt|;
else|else
name|substitutionType
operator|=
name|QSystemLocalePrivate
operator|::
name|SNever
expr_stmt|;
block|}
block|}
return|return
name|substitutionType
return|;
block|}
end_function
begin_function
DECL|function|substituteDigits
name|QString
modifier|&
name|QSystemLocalePrivate
operator|::
name|substituteDigits
parameter_list|(
name|QString
modifier|&
name|string
parameter_list|)
block|{
name|ushort
name|zero
init|=
name|zeroDigit
argument_list|()
operator|.
name|unicode
argument_list|()
decl_stmt|;
name|ushort
modifier|*
name|qch
init|=
operator|(
name|ushort
operator|*
operator|)
name|string
operator|.
name|data
argument_list|()
decl_stmt|;
for|for
control|(
name|ushort
modifier|*
name|end
init|=
name|qch
operator|+
name|string
operator|.
name|size
argument_list|()
init|;
name|qch
operator|!=
name|end
condition|;
operator|++
name|qch
control|)
block|{
if|if
condition|(
operator|*
name|qch
operator|>=
literal|'0'
operator|&&
operator|*
name|qch
operator|<=
literal|'9'
condition|)
operator|*
name|qch
operator|=
name|zero
operator|+
operator|(
operator|*
name|qch
operator|-
literal|'0'
operator|)
expr_stmt|;
block|}
return|return
name|string
return|;
block|}
end_function
begin_function
DECL|function|zeroDigit
name|QChar
name|QSystemLocalePrivate
operator|::
name|zeroDigit
parameter_list|()
block|{
if|if
condition|(
name|zero
operator|.
name|isNull
argument_list|()
condition|)
name|zero
operator|=
name|getLocaleInfo_qchar
argument_list|(
name|LOCALE_SNATIVEDIGITS
argument_list|)
expr_stmt|;
return|return
name|zero
return|;
block|}
end_function
begin_function
DECL|function|decimalPoint
name|QChar
name|QSystemLocalePrivate
operator|::
name|decimalPoint
parameter_list|()
block|{
return|return
name|getLocaleInfo_qchar
argument_list|(
name|LOCALE_SDECIMAL
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|groupSeparator
name|QChar
name|QSystemLocalePrivate
operator|::
name|groupSeparator
parameter_list|()
block|{
return|return
name|getLocaleInfo_qchar
argument_list|(
name|LOCALE_STHOUSAND
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|negativeSign
name|QChar
name|QSystemLocalePrivate
operator|::
name|negativeSign
parameter_list|()
block|{
return|return
name|getLocaleInfo_qchar
argument_list|(
name|LOCALE_SNEGATIVESIGN
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|positiveSign
name|QChar
name|QSystemLocalePrivate
operator|::
name|positiveSign
parameter_list|()
block|{
return|return
name|getLocaleInfo_qchar
argument_list|(
name|LOCALE_SPOSITIVESIGN
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|dateFormat
name|QVariant
name|QSystemLocalePrivate
operator|::
name|dateFormat
parameter_list|(
name|QLocale
operator|::
name|FormatType
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|QLocale
operator|::
name|ShortFormat
case|:
return|return
name|winToQtFormat
argument_list|(
name|getLocaleInfo
argument_list|(
name|LOCALE_SSHORTDATE
argument_list|)
argument_list|)
return|;
case|case
name|QLocale
operator|::
name|LongFormat
case|:
return|return
name|winToQtFormat
argument_list|(
name|getLocaleInfo
argument_list|(
name|LOCALE_SLONGDATE
argument_list|)
argument_list|)
return|;
case|case
name|QLocale
operator|::
name|NarrowFormat
case|:
break|break;
block|}
return|return
name|QVariant
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|timeFormat
name|QVariant
name|QSystemLocalePrivate
operator|::
name|timeFormat
parameter_list|(
name|QLocale
operator|::
name|FormatType
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|QLocale
operator|::
name|ShortFormat
case|:
if|if
condition|(
name|QSysInfo
operator|::
name|windowsVersion
argument_list|()
operator|>=
name|QSysInfo
operator|::
name|WV_WINDOWS7
condition|)
return|return
name|winToQtFormat
argument_list|(
name|getLocaleInfo
argument_list|(
name|LOCALE_SSHORTTIME
argument_list|)
argument_list|)
return|;
comment|// fall through
case|case
name|QLocale
operator|::
name|LongFormat
case|:
return|return
name|winToQtFormat
argument_list|(
name|getLocaleInfo
argument_list|(
name|LOCALE_STIMEFORMAT
argument_list|)
argument_list|)
return|;
case|case
name|QLocale
operator|::
name|NarrowFormat
case|:
break|break;
block|}
return|return
name|QVariant
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|dateTimeFormat
name|QVariant
name|QSystemLocalePrivate
operator|::
name|dateTimeFormat
parameter_list|(
name|QLocale
operator|::
name|FormatType
name|type
parameter_list|)
block|{
return|return
name|QString
argument_list|(
name|dateFormat
argument_list|(
name|type
argument_list|)
operator|.
name|toString
argument_list|()
operator|+
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
operator|+
name|timeFormat
argument_list|(
name|type
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|dayName
name|QVariant
name|QSystemLocalePrivate
operator|::
name|dayName
parameter_list|(
name|int
name|day
parameter_list|,
name|QLocale
operator|::
name|FormatType
name|type
parameter_list|)
block|{
if|if
condition|(
name|day
argument_list|<
literal|1
operator|||
name|day
argument_list|>
literal|7
condition|)
return|return
name|QString
argument_list|()
return|;
specifier|static
specifier|const
name|LCTYPE
name|short_day_map
index|[]
init|=
block|{
name|LOCALE_SABBREVDAYNAME1
block|,
name|LOCALE_SABBREVDAYNAME2
block|,
name|LOCALE_SABBREVDAYNAME3
block|,
name|LOCALE_SABBREVDAYNAME4
block|,
name|LOCALE_SABBREVDAYNAME5
block|,
name|LOCALE_SABBREVDAYNAME6
block|,
name|LOCALE_SABBREVDAYNAME7
block|}
decl_stmt|;
specifier|static
specifier|const
name|LCTYPE
name|long_day_map
index|[]
init|=
block|{
name|LOCALE_SDAYNAME1
block|,
name|LOCALE_SDAYNAME2
block|,
name|LOCALE_SDAYNAME3
block|,
name|LOCALE_SDAYNAME4
block|,
name|LOCALE_SDAYNAME5
block|,
name|LOCALE_SDAYNAME6
block|,
name|LOCALE_SDAYNAME7
block|}
decl_stmt|;
specifier|static
specifier|const
name|LCTYPE
name|narrow_day_map
index|[]
init|=
block|{
name|LOCALE_SSHORTESTDAYNAME1
block|,
name|LOCALE_SSHORTESTDAYNAME2
block|,
name|LOCALE_SSHORTESTDAYNAME3
block|,
name|LOCALE_SSHORTESTDAYNAME4
block|,
name|LOCALE_SSHORTESTDAYNAME5
block|,
name|LOCALE_SSHORTESTDAYNAME6
block|,
name|LOCALE_SSHORTESTDAYNAME7
block|}
decl_stmt|;
name|day
operator|-=
literal|1
expr_stmt|;
if|if
condition|(
name|type
operator|==
name|QLocale
operator|::
name|LongFormat
condition|)
return|return
name|getLocaleInfo
argument_list|(
name|long_day_map
index|[
name|day
index|]
argument_list|)
return|;
elseif|else
if|if
condition|(
name|type
operator|==
name|QLocale
operator|::
name|NarrowFormat
operator|&&
name|QSysInfo
operator|::
name|windowsVersion
argument_list|()
operator|>=
name|QSysInfo
operator|::
name|WV_VISTA
condition|)
return|return
name|getLocaleInfo
argument_list|(
name|narrow_day_map
index|[
name|day
index|]
argument_list|)
return|;
return|return
name|getLocaleInfo
argument_list|(
name|short_day_map
index|[
name|day
index|]
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|monthName
name|QVariant
name|QSystemLocalePrivate
operator|::
name|monthName
parameter_list|(
name|int
name|month
parameter_list|,
name|QLocale
operator|::
name|FormatType
name|type
parameter_list|)
block|{
specifier|static
specifier|const
name|LCTYPE
name|short_month_map
index|[]
init|=
block|{
name|LOCALE_SABBREVMONTHNAME1
block|,
name|LOCALE_SABBREVMONTHNAME2
block|,
name|LOCALE_SABBREVMONTHNAME3
block|,
name|LOCALE_SABBREVMONTHNAME4
block|,
name|LOCALE_SABBREVMONTHNAME5
block|,
name|LOCALE_SABBREVMONTHNAME6
block|,
name|LOCALE_SABBREVMONTHNAME7
block|,
name|LOCALE_SABBREVMONTHNAME8
block|,
name|LOCALE_SABBREVMONTHNAME9
block|,
name|LOCALE_SABBREVMONTHNAME10
block|,
name|LOCALE_SABBREVMONTHNAME11
block|,
name|LOCALE_SABBREVMONTHNAME12
block|}
decl_stmt|;
specifier|static
specifier|const
name|LCTYPE
name|long_month_map
index|[]
init|=
block|{
name|LOCALE_SMONTHNAME1
block|,
name|LOCALE_SMONTHNAME2
block|,
name|LOCALE_SMONTHNAME3
block|,
name|LOCALE_SMONTHNAME4
block|,
name|LOCALE_SMONTHNAME5
block|,
name|LOCALE_SMONTHNAME6
block|,
name|LOCALE_SMONTHNAME7
block|,
name|LOCALE_SMONTHNAME8
block|,
name|LOCALE_SMONTHNAME9
block|,
name|LOCALE_SMONTHNAME10
block|,
name|LOCALE_SMONTHNAME11
block|,
name|LOCALE_SMONTHNAME12
block|}
decl_stmt|;
name|month
operator|-=
literal|1
expr_stmt|;
if|if
condition|(
name|month
argument_list|<
literal|0
operator|||
name|month
argument_list|>
literal|11
condition|)
return|return
name|QString
argument_list|()
return|;
name|LCTYPE
name|lctype
init|=
operator|(
name|type
operator|==
name|QLocale
operator|::
name|ShortFormat
operator|||
name|type
operator|==
name|QLocale
operator|::
name|NarrowFormat
operator|)
condition|?
name|short_month_map
index|[
name|month
index|]
else|:
name|long_month_map
index|[
name|month
index|]
decl_stmt|;
return|return
name|getLocaleInfo
argument_list|(
name|lctype
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|toString
name|QVariant
name|QSystemLocalePrivate
operator|::
name|toString
parameter_list|(
specifier|const
name|QDate
modifier|&
name|date
parameter_list|,
name|QLocale
operator|::
name|FormatType
name|type
parameter_list|)
block|{
name|SYSTEMTIME
name|st
decl_stmt|;
name|memset
argument_list|(
operator|&
name|st
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|SYSTEMTIME
argument_list|)
argument_list|)
expr_stmt|;
name|st
operator|.
name|wYear
operator|=
name|date
operator|.
name|year
argument_list|()
expr_stmt|;
name|st
operator|.
name|wMonth
operator|=
name|date
operator|.
name|month
argument_list|()
expr_stmt|;
name|st
operator|.
name|wDay
operator|=
name|date
operator|.
name|day
argument_list|()
expr_stmt|;
name|DWORD
name|flags
init|=
operator|(
name|type
operator|==
name|QLocale
operator|::
name|LongFormat
condition|?
name|DATE_LONGDATE
else|:
name|DATE_SHORTDATE
operator|)
decl_stmt|;
name|wchar_t
name|buf
index|[
literal|255
index|]
decl_stmt|;
if|if
condition|(
name|getDateFormat
argument_list|(
name|flags
argument_list|,
operator|&
name|st
argument_list|,
name|NULL
argument_list|,
name|buf
argument_list|,
literal|255
argument_list|)
condition|)
block|{
name|QString
name|format
init|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|buf
argument_list|)
decl_stmt|;
if|if
condition|(
name|substitution
argument_list|()
operator|==
name|SAlways
condition|)
name|substituteDigits
argument_list|(
name|format
argument_list|)
expr_stmt|;
return|return
name|format
return|;
block|}
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|toString
name|QVariant
name|QSystemLocalePrivate
operator|::
name|toString
parameter_list|(
specifier|const
name|QTime
modifier|&
name|time
parameter_list|,
name|QLocale
operator|::
name|FormatType
name|type
parameter_list|)
block|{
name|SYSTEMTIME
name|st
decl_stmt|;
name|memset
argument_list|(
operator|&
name|st
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|SYSTEMTIME
argument_list|)
argument_list|)
expr_stmt|;
name|st
operator|.
name|wHour
operator|=
name|time
operator|.
name|hour
argument_list|()
expr_stmt|;
name|st
operator|.
name|wMinute
operator|=
name|time
operator|.
name|minute
argument_list|()
expr_stmt|;
name|st
operator|.
name|wSecond
operator|=
name|time
operator|.
name|second
argument_list|()
expr_stmt|;
name|st
operator|.
name|wMilliseconds
operator|=
literal|0
expr_stmt|;
name|DWORD
name|flags
init|=
literal|0
decl_stmt|;
comment|// keep the same conditional as timeFormat() above
if|if
condition|(
name|type
operator|==
name|QLocale
operator|::
name|ShortFormat
operator|&&
name|QSysInfo
operator|::
name|windowsVersion
argument_list|()
operator|>=
name|QSysInfo
operator|::
name|WV_WINDOWS7
condition|)
name|flags
operator|=
name|TIME_NOSECONDS
expr_stmt|;
name|wchar_t
name|buf
index|[
literal|255
index|]
decl_stmt|;
if|if
condition|(
name|getTimeFormat
argument_list|(
name|flags
argument_list|,
operator|&
name|st
argument_list|,
name|NULL
argument_list|,
name|buf
argument_list|,
literal|255
argument_list|)
condition|)
block|{
name|QString
name|format
init|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|buf
argument_list|)
decl_stmt|;
if|if
condition|(
name|substitution
argument_list|()
operator|==
name|SAlways
condition|)
name|substituteDigits
argument_list|(
name|format
argument_list|)
expr_stmt|;
return|return
name|format
return|;
block|}
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|toString
name|QVariant
name|QSystemLocalePrivate
operator|::
name|toString
parameter_list|(
specifier|const
name|QDateTime
modifier|&
name|dt
parameter_list|,
name|QLocale
operator|::
name|FormatType
name|type
parameter_list|)
block|{
return|return
name|QString
argument_list|(
name|toString
argument_list|(
name|dt
operator|.
name|date
argument_list|()
argument_list|,
name|type
argument_list|)
operator|.
name|toString
argument_list|()
operator|+
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
operator|+
name|toString
argument_list|(
name|dt
operator|.
name|time
argument_list|()
argument_list|,
name|type
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|measurementSystem
name|QVariant
name|QSystemLocalePrivate
operator|::
name|measurementSystem
parameter_list|()
block|{
name|wchar_t
name|output
index|[
literal|2
index|]
decl_stmt|;
if|if
condition|(
name|getLocaleInfo
argument_list|(
name|LOCALE_IMEASURE
argument_list|,
name|output
argument_list|,
literal|2
argument_list|)
condition|)
block|{
name|QString
name|iMeasure
init|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|output
argument_list|)
decl_stmt|;
if|if
condition|(
name|iMeasure
operator|==
name|QLatin1String
argument_list|(
literal|"1"
argument_list|)
condition|)
block|{
return|return
name|QLocale
operator|::
name|ImperialSystem
return|;
block|}
block|}
return|return
name|QLocale
operator|::
name|MetricSystem
return|;
block|}
end_function
begin_function
DECL|function|amText
name|QVariant
name|QSystemLocalePrivate
operator|::
name|amText
parameter_list|()
block|{
name|wchar_t
name|output
index|[
literal|15
index|]
decl_stmt|;
comment|// maximum length including  terminating zero character for Win2003+
if|if
condition|(
name|getLocaleInfo
argument_list|(
name|LOCALE_S1159
argument_list|,
name|output
argument_list|,
literal|15
argument_list|)
condition|)
block|{
return|return
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|output
argument_list|)
return|;
block|}
return|return
name|QVariant
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|pmText
name|QVariant
name|QSystemLocalePrivate
operator|::
name|pmText
parameter_list|()
block|{
name|wchar_t
name|output
index|[
literal|15
index|]
decl_stmt|;
comment|// maximum length including  terminating zero character for Win2003+
if|if
condition|(
name|getLocaleInfo
argument_list|(
name|LOCALE_S2359
argument_list|,
name|output
argument_list|,
literal|15
argument_list|)
condition|)
block|{
return|return
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|output
argument_list|)
return|;
block|}
return|return
name|QVariant
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|firstDayOfWeek
name|QVariant
name|QSystemLocalePrivate
operator|::
name|firstDayOfWeek
parameter_list|()
block|{
name|wchar_t
name|output
index|[
literal|4
index|]
decl_stmt|;
comment|// maximum length including  terminating zero character for Win2003+
if|if
condition|(
name|getLocaleInfo
argument_list|(
name|LOCALE_IFIRSTDAYOFWEEK
argument_list|,
name|output
argument_list|,
literal|4
argument_list|)
condition|)
return|return
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|output
argument_list|)
operator|.
name|toUInt
argument_list|()
operator|+
literal|1
return|;
return|return
literal|1
return|;
block|}
end_function
begin_function
DECL|function|currencySymbol
name|QVariant
name|QSystemLocalePrivate
operator|::
name|currencySymbol
parameter_list|(
name|QLocale
operator|::
name|CurrencySymbolFormat
name|format
parameter_list|)
block|{
name|wchar_t
name|buf
index|[
literal|13
index|]
decl_stmt|;
switch|switch
condition|(
name|format
condition|)
block|{
case|case
name|QLocale
operator|::
name|CurrencySymbol
case|:
if|if
condition|(
name|getLocaleInfo
argument_list|(
name|LOCALE_SCURRENCY
argument_list|,
name|buf
argument_list|,
literal|13
argument_list|)
condition|)
return|return
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|buf
argument_list|)
return|;
break|break;
case|case
name|QLocale
operator|::
name|CurrencyIsoCode
case|:
if|if
condition|(
name|getLocaleInfo
argument_list|(
name|LOCALE_SINTLSYMBOL
argument_list|,
name|buf
argument_list|,
literal|9
argument_list|)
condition|)
return|return
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|buf
argument_list|)
return|;
break|break;
case|case
name|QLocale
operator|::
name|CurrencyDisplayName
case|:
block|{
name|QVarLengthArray
argument_list|<
name|wchar_t
argument_list|,
literal|64
argument_list|>
name|buf
argument_list|(
literal|64
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|getLocaleInfo
argument_list|(
name|LOCALE_SNATIVECURRNAME
argument_list|,
name|buf
operator|.
name|data
argument_list|()
argument_list|,
name|buf
operator|.
name|size
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|GetLastError
argument_list|()
operator|!=
name|ERROR_INSUFFICIENT_BUFFER
condition|)
break|break;
name|buf
operator|.
name|resize
argument_list|(
literal|255
argument_list|)
expr_stmt|;
comment|// should be large enough, right?
if|if
condition|(
operator|!
name|getLocaleInfo
argument_list|(
name|LOCALE_SNATIVECURRNAME
argument_list|,
name|buf
operator|.
name|data
argument_list|()
argument_list|,
name|buf
operator|.
name|size
argument_list|()
argument_list|)
condition|)
break|break;
block|}
return|return
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|buf
operator|.
name|data
argument_list|()
argument_list|)
return|;
block|}
default|default:
break|break;
block|}
return|return
name|QVariant
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|toCurrencyString
name|QVariant
name|QSystemLocalePrivate
operator|::
name|toCurrencyString
parameter_list|(
specifier|const
name|QSystemLocale
operator|::
name|CurrencyToStringArgument
modifier|&
name|arg
parameter_list|)
block|{
name|QString
name|value
decl_stmt|;
switch|switch
condition|(
name|arg
operator|.
name|value
operator|.
name|type
argument_list|()
condition|)
block|{
case|case
name|QVariant
operator|::
name|Int
case|:
name|value
operator|=
name|QLocaleData
operator|::
name|longLongToString
argument_list|(
name|QLatin1Char
argument_list|(
literal|'0'
argument_list|)
argument_list|,
name|QLatin1Char
argument_list|(
literal|','
argument_list|)
argument_list|,
name|QLatin1Char
argument_list|(
literal|'+'
argument_list|)
argument_list|,
name|QLatin1Char
argument_list|(
literal|'-'
argument_list|)
argument_list|,
name|arg
operator|.
name|value
operator|.
name|toInt
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|,
literal|10
argument_list|,
operator|-
literal|1
argument_list|,
name|QLocale
operator|::
name|OmitGroupSeparator
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|UInt
case|:
name|value
operator|=
name|QLocaleData
operator|::
name|unsLongLongToString
argument_list|(
name|QLatin1Char
argument_list|(
literal|'0'
argument_list|)
argument_list|,
name|QLatin1Char
argument_list|(
literal|','
argument_list|)
argument_list|,
name|QLatin1Char
argument_list|(
literal|'+'
argument_list|)
argument_list|,
name|arg
operator|.
name|value
operator|.
name|toUInt
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|,
literal|10
argument_list|,
operator|-
literal|1
argument_list|,
name|QLocale
operator|::
name|OmitGroupSeparator
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|Double
case|:
name|value
operator|=
name|QLocaleData
operator|::
name|doubleToString
argument_list|(
name|QLatin1Char
argument_list|(
literal|'0'
argument_list|)
argument_list|,
name|QLatin1Char
argument_list|(
literal|'+'
argument_list|)
argument_list|,
name|QLatin1Char
argument_list|(
literal|'-'
argument_list|)
argument_list|,
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
argument_list|,
name|QLatin1Char
argument_list|(
literal|','
argument_list|)
argument_list|,
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
argument_list|,
name|arg
operator|.
name|value
operator|.
name|toDouble
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|,
name|QLocaleData
operator|::
name|DFDecimal
argument_list|,
operator|-
literal|1
argument_list|,
name|QLocale
operator|::
name|OmitGroupSeparator
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|LongLong
case|:
name|value
operator|=
name|QLocaleData
operator|::
name|longLongToString
argument_list|(
name|QLatin1Char
argument_list|(
literal|'0'
argument_list|)
argument_list|,
name|QLatin1Char
argument_list|(
literal|','
argument_list|)
argument_list|,
name|QLatin1Char
argument_list|(
literal|'+'
argument_list|)
argument_list|,
name|QLatin1Char
argument_list|(
literal|'-'
argument_list|)
argument_list|,
name|arg
operator|.
name|value
operator|.
name|toLongLong
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|,
literal|10
argument_list|,
operator|-
literal|1
argument_list|,
name|QLocale
operator|::
name|OmitGroupSeparator
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|ULongLong
case|:
name|value
operator|=
name|QLocaleData
operator|::
name|unsLongLongToString
argument_list|(
name|QLatin1Char
argument_list|(
literal|'0'
argument_list|)
argument_list|,
name|QLatin1Char
argument_list|(
literal|','
argument_list|)
argument_list|,
name|QLatin1Char
argument_list|(
literal|'+'
argument_list|)
argument_list|,
name|arg
operator|.
name|value
operator|.
name|toULongLong
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|,
literal|10
argument_list|,
operator|-
literal|1
argument_list|,
name|QLocale
operator|::
name|OmitGroupSeparator
argument_list|)
expr_stmt|;
break|break;
default|default:
return|return
name|QVariant
argument_list|()
return|;
block|}
name|QVarLengthArray
argument_list|<
name|wchar_t
argument_list|,
literal|64
argument_list|>
name|out
argument_list|(
literal|64
argument_list|)
decl_stmt|;
name|QString
name|decimalSep
decl_stmt|;
name|QString
name|thousandSep
decl_stmt|;
name|CURRENCYFMT
name|format
decl_stmt|;
name|CURRENCYFMT
modifier|*
name|pformat
init|=
name|NULL
decl_stmt|;
if|if
condition|(
operator|!
name|arg
operator|.
name|symbol
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|format
operator|.
name|NumDigits
operator|=
name|getLocaleInfo_int
argument_list|(
name|LOCALE_ICURRDIGITS
argument_list|)
expr_stmt|;
name|format
operator|.
name|LeadingZero
operator|=
name|getLocaleInfo_int
argument_list|(
name|LOCALE_ILZERO
argument_list|)
expr_stmt|;
name|decimalSep
operator|=
name|getLocaleInfo
argument_list|(
name|LOCALE_SMONDECIMALSEP
argument_list|)
expr_stmt|;
name|format
operator|.
name|lpDecimalSep
operator|=
operator|(
name|wchar_t
operator|*
operator|)
name|decimalSep
operator|.
name|utf16
argument_list|()
expr_stmt|;
name|thousandSep
operator|=
name|getLocaleInfo
argument_list|(
name|LOCALE_SMONTHOUSANDSEP
argument_list|)
expr_stmt|;
name|format
operator|.
name|lpThousandSep
operator|=
operator|(
name|wchar_t
operator|*
operator|)
name|thousandSep
operator|.
name|utf16
argument_list|()
expr_stmt|;
name|format
operator|.
name|NegativeOrder
operator|=
name|getLocaleInfo_int
argument_list|(
name|LOCALE_INEGCURR
argument_list|)
expr_stmt|;
name|format
operator|.
name|PositiveOrder
operator|=
name|getLocaleInfo_int
argument_list|(
name|LOCALE_ICURRENCY
argument_list|)
expr_stmt|;
name|format
operator|.
name|lpCurrencySymbol
operator|=
operator|(
name|wchar_t
operator|*
operator|)
name|arg
operator|.
name|symbol
operator|.
name|utf16
argument_list|()
expr_stmt|;
comment|// grouping is complicated and ugly:
comment|// int(0)  == "123456789.00"    == string("0")
comment|// int(3)  == "123,456,789.00"  == string("3;0")
comment|// int(30) == "123456,789.00"   == string("3;0;0")
comment|// int(32) == "12,34,56,789.00" == string("3;2;0")
comment|// int(320)== "1234,56,789.00"  == string("3;2")
name|QString
name|groupingStr
init|=
name|getLocaleInfo
argument_list|(
name|LOCALE_SMONGROUPING
argument_list|)
decl_stmt|;
name|format
operator|.
name|Grouping
operator|=
name|groupingStr
operator|.
name|remove
argument_list|(
name|QLatin1Char
argument_list|(
literal|';'
argument_list|)
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
if|if
condition|(
name|format
operator|.
name|Grouping
operator|%
literal|10
operator|==
literal|0
condition|)
comment|// magic
name|format
operator|.
name|Grouping
operator|/=
literal|10
expr_stmt|;
else|else
name|format
operator|.
name|Grouping
operator|*=
literal|10
expr_stmt|;
name|pformat
operator|=
operator|&
name|format
expr_stmt|;
block|}
name|int
name|ret
init|=
name|getCurrencyFormat
argument_list|(
literal|0
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|wchar_t
operator|*
argument_list|>
argument_list|(
name|value
operator|.
name|utf16
argument_list|()
argument_list|)
argument_list|,
name|pformat
argument_list|,
name|out
operator|.
name|data
argument_list|()
argument_list|,
name|out
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|==
literal|0
operator|&&
name|GetLastError
argument_list|()
operator|==
name|ERROR_INSUFFICIENT_BUFFER
condition|)
block|{
name|ret
operator|=
name|getCurrencyFormat
argument_list|(
literal|0
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|wchar_t
operator|*
argument_list|>
argument_list|(
name|value
operator|.
name|utf16
argument_list|()
argument_list|)
argument_list|,
name|pformat
argument_list|,
name|out
operator|.
name|data
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|out
operator|.
name|resize
argument_list|(
name|ret
argument_list|)
expr_stmt|;
name|getCurrencyFormat
argument_list|(
literal|0
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|wchar_t
operator|*
argument_list|>
argument_list|(
name|value
operator|.
name|utf16
argument_list|()
argument_list|)
argument_list|,
name|pformat
argument_list|,
name|out
operator|.
name|data
argument_list|()
argument_list|,
name|out
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|value
operator|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|out
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|substitution
argument_list|()
operator|==
name|SAlways
condition|)
name|substituteDigits
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|value
return|;
block|}
end_function
begin_function
DECL|function|uiLanguages
name|QVariant
name|QSystemLocalePrivate
operator|::
name|uiLanguages
parameter_list|()
block|{
if|if
condition|(
name|QSysInfo
operator|::
name|windowsVersion
argument_list|()
operator|>=
name|QSysInfo
operator|::
name|WV_VISTA
condition|)
block|{
typedef|typedef
name|BOOL
function_decl|(
name|WINAPI
modifier|*
name|GetUserPreferredUILanguagesFunc
function_decl|)
parameter_list|(
name|DWORD
name|dwFlags
parameter_list|,
name|PULONG
name|pulNumLanguages
parameter_list|,
name|PWSTR
name|pwszLanguagesBuffer
parameter_list|,
name|PULONG
name|pcchLanguagesBuffer
parameter_list|)
function_decl|;
specifier|static
name|GetUserPreferredUILanguagesFunc
name|GetUserPreferredUILanguages_ptr
init|=
literal|0
decl_stmt|;
ifndef|#
directive|ifndef
name|Q_OS_WINRT
if|if
condition|(
operator|!
name|GetUserPreferredUILanguages_ptr
condition|)
block|{
name|QSystemLibrary
name|lib
argument_list|(
name|QLatin1String
argument_list|(
literal|"kernel32"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|lib
operator|.
name|load
argument_list|()
condition|)
name|GetUserPreferredUILanguages_ptr
operator|=
operator|(
name|GetUserPreferredUILanguagesFunc
operator|)
name|lib
operator|.
name|resolve
argument_list|(
literal|"GetUserPreferredUILanguages"
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
comment|// !Q_OS_WINRT
if|if
condition|(
name|GetUserPreferredUILanguages_ptr
condition|)
block|{
name|unsigned
name|long
name|cnt
init|=
literal|0
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|wchar_t
argument_list|,
literal|64
argument_list|>
name|buf
argument_list|(
literal|64
argument_list|)
decl_stmt|;
name|unsigned
name|long
name|size
init|=
name|buf
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|GetUserPreferredUILanguages_ptr
argument_list|(
name|MUI_LANGUAGE_NAME
argument_list|,
operator|&
name|cnt
argument_list|,
name|buf
operator|.
name|data
argument_list|()
argument_list|,
operator|&
name|size
argument_list|)
condition|)
block|{
name|size
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|GetLastError
argument_list|()
operator|==
name|ERROR_INSUFFICIENT_BUFFER
operator|&&
name|GetUserPreferredUILanguages_ptr
argument_list|(
name|MUI_LANGUAGE_NAME
argument_list|,
operator|&
name|cnt
argument_list|,
name|NULL
argument_list|,
operator|&
name|size
argument_list|)
condition|)
block|{
name|buf
operator|.
name|resize
argument_list|(
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|GetUserPreferredUILanguages_ptr
argument_list|(
name|MUI_LANGUAGE_NAME
argument_list|,
operator|&
name|cnt
argument_list|,
name|buf
operator|.
name|data
argument_list|()
argument_list|,
operator|&
name|size
argument_list|)
condition|)
return|return
name|QStringList
argument_list|()
return|;
block|}
block|}
name|QStringList
name|result
decl_stmt|;
name|result
operator|.
name|reserve
argument_list|(
name|cnt
argument_list|)
expr_stmt|;
specifier|const
name|wchar_t
modifier|*
name|str
init|=
name|buf
operator|.
name|constData
argument_list|()
decl_stmt|;
for|for
control|(
init|;
name|cnt
operator|>
literal|0
condition|;
operator|--
name|cnt
control|)
block|{
name|QString
name|s
init|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|str
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|isEmpty
argument_list|()
condition|)
break|break;
comment|// something is wrong
name|result
operator|.
name|append
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|str
operator|+=
name|s
operator|.
name|size
argument_list|()
operator|+
literal|1
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
ifndef|#
directive|ifndef
name|Q_OS_WINRT
comment|// old Windows before Vista
return|return
name|QStringList
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|winLangCodeToIsoName
argument_list|(
name|GetUserDefaultUILanguage
argument_list|()
argument_list|)
argument_list|)
argument_list|)
return|;
else|#
directive|else
comment|// !Q_OS_WINRT
name|QStringList
name|result
decl_stmt|;
ifndef|#
directive|ifndef
name|Q_OS_WINPHONE
name|ComPtr
argument_list|<
name|ABI
operator|::
name|Windows
operator|::
name|Globalization
operator|::
name|IApplicationLanguagesStatics
argument_list|>
name|appLanguagesStatics
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|GetActivationFactory
argument_list|(
name|HString
operator|::
name|MakeReference
argument_list|(
name|RuntimeClass_Windows_Globalization_ApplicationLanguages
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|appLanguagesStatics
argument_list|)
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"Could not obtain ApplicationLanguagesStatic"
argument_list|)
expr_stmt|;
return|return
name|QStringList
argument_list|()
return|;
block|}
name|ComPtr
argument_list|<
name|ABI
operator|::
name|Windows
operator|::
name|Foundation
operator|::
name|Collections
operator|::
name|IVectorView
argument_list|<
name|HSTRING
argument_list|>
argument_list|>
name|languageList
decl_stmt|;
name|appLanguagesStatics
operator|->
name|get_ManifestLanguages
argument_list|(
operator|&
name|languageList
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|languageList
condition|)
return|return
name|QStringList
argument_list|()
return|;
name|unsigned
name|int
name|size
decl_stmt|;
name|languageList
operator|->
name|get_Size
argument_list|(
operator|&
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|unsigned
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
operator|++
name|i
control|)
block|{
name|HString
name|language
decl_stmt|;
name|languageList
operator|->
name|GetAt
argument_list|(
name|i
argument_list|,
name|language
operator|.
name|GetAddressOf
argument_list|()
argument_list|)
expr_stmt|;
name|UINT32
name|length
decl_stmt|;
name|PCWSTR
name|rawString
init|=
name|language
operator|.
name|GetRawBuffer
argument_list|(
operator|&
name|length
argument_list|)
decl_stmt|;
name|result
operator|<<
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|rawString
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
else|#
directive|else
comment|// !Q_OS_WINPHONE
name|result
operator|<<
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|lcName
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// Q_OS_WINPHONE
return|return
name|result
return|;
endif|#
directive|endif
comment|// Q_OS_WINRT
block|}
end_function
begin_function
DECL|function|nativeLanguageName
name|QVariant
name|QSystemLocalePrivate
operator|::
name|nativeLanguageName
parameter_list|()
block|{
if|if
condition|(
name|QSysInfo
operator|::
name|windowsVersion
argument_list|()
operator|<
name|QSysInfo
operator|::
name|WV_WINDOWS7
condition|)
return|return
name|getLocaleInfo
argument_list|(
name|LOCALE_SNATIVELANGNAME
argument_list|)
return|;
return|return
name|getLocaleInfo
argument_list|(
name|LOCALE_SNATIVELANGUAGENAME
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|nativeCountryName
name|QVariant
name|QSystemLocalePrivate
operator|::
name|nativeCountryName
parameter_list|()
block|{
if|if
condition|(
name|QSysInfo
operator|::
name|windowsVersion
argument_list|()
operator|<
name|QSysInfo
operator|::
name|WV_WINDOWS7
condition|)
return|return
name|getLocaleInfo
argument_list|(
name|LOCALE_SNATIVECTRYNAME
argument_list|)
return|;
return|return
name|getLocaleInfo
argument_list|(
name|LOCALE_SNATIVECOUNTRYNAME
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|update
name|void
name|QSystemLocalePrivate
operator|::
name|update
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|Q_OS_WINRT
name|lcid
operator|=
name|GetUserDefaultLCID
argument_list|()
expr_stmt|;
else|#
directive|else
name|GetUserDefaultLocaleName
argument_list|(
name|lcName
argument_list|,
name|LOCALE_NAME_MAX_LENGTH
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|substitutionType
operator|=
name|SUnknown
expr_stmt|;
name|zero
operator|=
name|QChar
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|winToQtFormat
name|QString
name|QSystemLocalePrivate
operator|::
name|winToQtFormat
parameter_list|(
specifier|const
name|QString
modifier|&
name|sys_fmt
parameter_list|)
block|{
name|QString
name|result
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|sys_fmt
operator|.
name|size
argument_list|()
condition|)
block|{
if|if
condition|(
name|sys_fmt
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|unicode
argument_list|()
operator|==
name|QLatin1Char
argument_list|(
literal|'\''
argument_list|)
condition|)
block|{
name|QString
name|text
init|=
name|qt_readEscapedFormatString
argument_list|(
name|sys_fmt
argument_list|,
operator|&
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|text
operator|==
name|QLatin1String
argument_list|(
literal|"'"
argument_list|)
condition|)
name|result
operator|+=
name|QLatin1String
argument_list|(
literal|"''"
argument_list|)
expr_stmt|;
else|else
name|result
operator|+=
name|QString
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\''
argument_list|)
operator|+
name|text
operator|+
name|QLatin1Char
argument_list|(
literal|'\''
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|QChar
name|c
init|=
name|sys_fmt
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|int
name|repeat
init|=
name|qt_repeatCount
argument_list|(
name|sys_fmt
argument_list|,
name|i
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|c
operator|.
name|unicode
argument_list|()
condition|)
block|{
comment|// Date
case|case
literal|'y'
case|:
if|if
condition|(
name|repeat
operator|>
literal|5
condition|)
name|repeat
operator|=
literal|5
expr_stmt|;
elseif|else
if|if
condition|(
name|repeat
operator|==
literal|3
condition|)
name|repeat
operator|=
literal|2
expr_stmt|;
switch|switch
condition|(
name|repeat
condition|)
block|{
case|case
literal|1
case|:
name|result
operator|+=
name|QLatin1String
argument_list|(
literal|"yy"
argument_list|)
expr_stmt|;
comment|// "y" unsupported by Qt, use "yy"
break|break;
case|case
literal|5
case|:
name|result
operator|+=
name|QLatin1String
argument_list|(
literal|"yyyy"
argument_list|)
expr_stmt|;
comment|// "yyyyy" same as "yyyy" on Windows
break|break;
default|default:
name|result
operator|+=
name|QString
argument_list|(
name|repeat
argument_list|,
name|QLatin1Char
argument_list|(
literal|'y'
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
break|break;
case|case
literal|'g'
case|:
if|if
condition|(
name|repeat
operator|>
literal|2
condition|)
name|repeat
operator|=
literal|2
expr_stmt|;
switch|switch
condition|(
name|repeat
condition|)
block|{
case|case
literal|2
case|:
break|break;
comment|// no equivalent of "gg" in Qt
default|default:
name|result
operator|+=
name|QLatin1Char
argument_list|(
literal|'g'
argument_list|)
expr_stmt|;
break|break;
block|}
break|break;
case|case
literal|'t'
case|:
if|if
condition|(
name|repeat
operator|>
literal|2
condition|)
name|repeat
operator|=
literal|2
expr_stmt|;
name|result
operator|+=
name|QLatin1String
argument_list|(
literal|"AP"
argument_list|)
expr_stmt|;
comment|// "t" unsupported, use "AP"
break|break;
default|default:
name|result
operator|+=
name|QString
argument_list|(
name|repeat
argument_list|,
name|c
argument_list|)
expr_stmt|;
break|break;
block|}
name|i
operator|+=
name|repeat
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|fallbackUiLocale
name|QLocale
name|QSystemLocale
operator|::
name|fallbackUiLocale
parameter_list|()
specifier|const
block|{
return|return
name|QLocale
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|getWinLocaleName
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|query
name|QVariant
name|QSystemLocale
operator|::
name|query
parameter_list|(
name|QueryType
name|type
parameter_list|,
name|QVariant
name|in
init|=
name|QVariant
argument_list|()
parameter_list|)
specifier|const
block|{
name|QSystemLocalePrivate
modifier|*
name|d
init|=
name|systemLocalePrivate
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|DecimalPoint
case|:
return|return
name|d
operator|->
name|decimalPoint
argument_list|()
return|;
case|case
name|GroupSeparator
case|:
return|return
name|d
operator|->
name|groupSeparator
argument_list|()
return|;
case|case
name|NegativeSign
case|:
return|return
name|d
operator|->
name|negativeSign
argument_list|()
return|;
case|case
name|PositiveSign
case|:
return|return
name|d
operator|->
name|positiveSign
argument_list|()
return|;
case|case
name|DateFormatLong
case|:
return|return
name|d
operator|->
name|dateFormat
argument_list|(
name|QLocale
operator|::
name|LongFormat
argument_list|)
return|;
case|case
name|DateFormatShort
case|:
return|return
name|d
operator|->
name|dateFormat
argument_list|(
name|QLocale
operator|::
name|ShortFormat
argument_list|)
return|;
case|case
name|TimeFormatLong
case|:
return|return
name|d
operator|->
name|timeFormat
argument_list|(
name|QLocale
operator|::
name|LongFormat
argument_list|)
return|;
case|case
name|TimeFormatShort
case|:
return|return
name|d
operator|->
name|timeFormat
argument_list|(
name|QLocale
operator|::
name|ShortFormat
argument_list|)
return|;
case|case
name|DateTimeFormatLong
case|:
return|return
name|d
operator|->
name|dateTimeFormat
argument_list|(
name|QLocale
operator|::
name|LongFormat
argument_list|)
return|;
case|case
name|DateTimeFormatShort
case|:
return|return
name|d
operator|->
name|dateTimeFormat
argument_list|(
name|QLocale
operator|::
name|ShortFormat
argument_list|)
return|;
case|case
name|DayNameLong
case|:
return|return
name|d
operator|->
name|dayName
argument_list|(
name|in
operator|.
name|toInt
argument_list|()
argument_list|,
name|QLocale
operator|::
name|LongFormat
argument_list|)
return|;
case|case
name|DayNameShort
case|:
return|return
name|d
operator|->
name|dayName
argument_list|(
name|in
operator|.
name|toInt
argument_list|()
argument_list|,
name|QLocale
operator|::
name|ShortFormat
argument_list|)
return|;
case|case
name|MonthNameLong
case|:
case|case
name|StandaloneMonthNameLong
case|:
return|return
name|d
operator|->
name|monthName
argument_list|(
name|in
operator|.
name|toInt
argument_list|()
argument_list|,
name|QLocale
operator|::
name|LongFormat
argument_list|)
return|;
case|case
name|MonthNameShort
case|:
case|case
name|StandaloneMonthNameShort
case|:
return|return
name|d
operator|->
name|monthName
argument_list|(
name|in
operator|.
name|toInt
argument_list|()
argument_list|,
name|QLocale
operator|::
name|ShortFormat
argument_list|)
return|;
case|case
name|DateToStringShort
case|:
return|return
name|d
operator|->
name|toString
argument_list|(
name|in
operator|.
name|toDate
argument_list|()
argument_list|,
name|QLocale
operator|::
name|ShortFormat
argument_list|)
return|;
case|case
name|DateToStringLong
case|:
return|return
name|d
operator|->
name|toString
argument_list|(
name|in
operator|.
name|toDate
argument_list|()
argument_list|,
name|QLocale
operator|::
name|LongFormat
argument_list|)
return|;
case|case
name|TimeToStringShort
case|:
return|return
name|d
operator|->
name|toString
argument_list|(
name|in
operator|.
name|toTime
argument_list|()
argument_list|,
name|QLocale
operator|::
name|ShortFormat
argument_list|)
return|;
case|case
name|TimeToStringLong
case|:
return|return
name|d
operator|->
name|toString
argument_list|(
name|in
operator|.
name|toTime
argument_list|()
argument_list|,
name|QLocale
operator|::
name|LongFormat
argument_list|)
return|;
case|case
name|DateTimeToStringShort
case|:
return|return
name|d
operator|->
name|toString
argument_list|(
name|in
operator|.
name|toDateTime
argument_list|()
argument_list|,
name|QLocale
operator|::
name|ShortFormat
argument_list|)
return|;
case|case
name|DateTimeToStringLong
case|:
return|return
name|d
operator|->
name|toString
argument_list|(
name|in
operator|.
name|toDateTime
argument_list|()
argument_list|,
name|QLocale
operator|::
name|LongFormat
argument_list|)
return|;
case|case
name|ZeroDigit
case|:
return|return
name|d
operator|->
name|zeroDigit
argument_list|()
return|;
case|case
name|LanguageId
case|:
case|case
name|CountryId
case|:
block|{
name|QString
name|locale
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
name|getWinLocaleName
argument_list|()
argument_list|)
decl_stmt|;
name|QLocale
operator|::
name|Language
name|lang
decl_stmt|;
name|QLocale
operator|::
name|Script
name|script
decl_stmt|;
name|QLocale
operator|::
name|Country
name|cntry
decl_stmt|;
name|QLocalePrivate
operator|::
name|getLangAndCountry
argument_list|(
name|locale
argument_list|,
name|lang
argument_list|,
name|script
argument_list|,
name|cntry
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|==
name|LanguageId
condition|)
return|return
name|lang
return|;
if|if
condition|(
name|cntry
operator|==
name|QLocale
operator|::
name|AnyCountry
condition|)
return|return
name|fallbackUiLocale
argument_list|()
operator|.
name|country
argument_list|()
return|;
return|return
name|cntry
return|;
block|}
case|case
name|ScriptId
case|:
return|return
name|QVariant
argument_list|(
name|QLocale
operator|::
name|AnyScript
argument_list|)
return|;
case|case
name|MeasurementSystem
case|:
return|return
name|d
operator|->
name|measurementSystem
argument_list|()
return|;
case|case
name|AMText
case|:
return|return
name|d
operator|->
name|amText
argument_list|()
return|;
case|case
name|PMText
case|:
return|return
name|d
operator|->
name|pmText
argument_list|()
return|;
case|case
name|FirstDayOfWeek
case|:
return|return
name|d
operator|->
name|firstDayOfWeek
argument_list|()
return|;
case|case
name|CurrencySymbol
case|:
return|return
name|d
operator|->
name|currencySymbol
argument_list|(
name|QLocale
operator|::
name|CurrencySymbolFormat
argument_list|(
name|in
operator|.
name|toUInt
argument_list|()
argument_list|)
argument_list|)
return|;
case|case
name|CurrencyToString
case|:
return|return
name|d
operator|->
name|toCurrencyString
argument_list|(
name|in
operator|.
name|value
argument_list|<
name|QSystemLocale
operator|::
name|CurrencyToStringArgument
argument_list|>
argument_list|()
argument_list|)
return|;
case|case
name|UILanguages
case|:
return|return
name|d
operator|->
name|uiLanguages
argument_list|()
return|;
case|case
name|LocaleChanged
case|:
name|d
operator|->
name|update
argument_list|()
expr_stmt|;
break|break;
case|case
name|NativeLanguageName
case|:
return|return
name|d
operator|->
name|nativeLanguageName
argument_list|()
return|;
case|case
name|NativeCountryName
case|:
return|return
name|d
operator|->
name|nativeCountryName
argument_list|()
return|;
default|default:
break|break;
block|}
return|return
name|QVariant
argument_list|()
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_SYSTEMLOCALE
end_comment
begin_struct
DECL|struct|WindowsToISOListElt
struct|struct
name|WindowsToISOListElt
block|{
DECL|member|windows_code
name|ushort
name|windows_code
decl_stmt|;
DECL|member|iso_name
name|char
name|iso_name
index|[
literal|6
index|]
decl_stmt|;
block|}
struct|;
end_struct
begin_comment
comment|/* NOTE: This array should be sorted by the first column! */
end_comment
begin_decl_stmt
DECL|variable|windows_to_iso_list
specifier|static
specifier|const
name|WindowsToISOListElt
name|windows_to_iso_list
index|[]
init|=
block|{
block|{
literal|0x0401
block|,
literal|"ar_SA"
block|}
block|,
block|{
literal|0x0402
block|,
literal|"bg\0  "
block|}
block|,
block|{
literal|0x0403
block|,
literal|"ca\0  "
block|}
block|,
block|{
literal|0x0404
block|,
literal|"zh_TW"
block|}
block|,
block|{
literal|0x0405
block|,
literal|"cs\0  "
block|}
block|,
block|{
literal|0x0406
block|,
literal|"da\0  "
block|}
block|,
block|{
literal|0x0407
block|,
literal|"de\0  "
block|}
block|,
block|{
literal|0x0408
block|,
literal|"el\0  "
block|}
block|,
block|{
literal|0x0409
block|,
literal|"en_US"
block|}
block|,
block|{
literal|0x040a
block|,
literal|"es\0  "
block|}
block|,
block|{
literal|0x040b
block|,
literal|"fi\0  "
block|}
block|,
block|{
literal|0x040c
block|,
literal|"fr\0  "
block|}
block|,
block|{
literal|0x040d
block|,
literal|"he\0  "
block|}
block|,
block|{
literal|0x040e
block|,
literal|"hu\0  "
block|}
block|,
block|{
literal|0x040f
block|,
literal|"is\0  "
block|}
block|,
block|{
literal|0x0410
block|,
literal|"it\0  "
block|}
block|,
block|{
literal|0x0411
block|,
literal|"ja\0  "
block|}
block|,
block|{
literal|0x0412
block|,
literal|"ko\0  "
block|}
block|,
block|{
literal|0x0413
block|,
literal|"nl\0  "
block|}
block|,
block|{
literal|0x0414
block|,
literal|"no\0  "
block|}
block|,
block|{
literal|0x0415
block|,
literal|"pl\0  "
block|}
block|,
block|{
literal|0x0416
block|,
literal|"pt_BR"
block|}
block|,
block|{
literal|0x0418
block|,
literal|"ro\0  "
block|}
block|,
block|{
literal|0x0419
block|,
literal|"ru\0  "
block|}
block|,
block|{
literal|0x041a
block|,
literal|"hr\0  "
block|}
block|,
block|{
literal|0x041c
block|,
literal|"sq\0  "
block|}
block|,
block|{
literal|0x041d
block|,
literal|"sv\0  "
block|}
block|,
block|{
literal|0x041e
block|,
literal|"th\0  "
block|}
block|,
block|{
literal|0x041f
block|,
literal|"tr\0  "
block|}
block|,
block|{
literal|0x0420
block|,
literal|"ur\0  "
block|}
block|,
block|{
literal|0x0421
block|,
literal|"in\0  "
block|}
block|,
block|{
literal|0x0422
block|,
literal|"uk\0  "
block|}
block|,
block|{
literal|0x0423
block|,
literal|"be\0  "
block|}
block|,
block|{
literal|0x0425
block|,
literal|"et\0  "
block|}
block|,
block|{
literal|0x0426
block|,
literal|"lv\0  "
block|}
block|,
block|{
literal|0x0427
block|,
literal|"lt\0  "
block|}
block|,
block|{
literal|0x0429
block|,
literal|"fa\0  "
block|}
block|,
block|{
literal|0x042a
block|,
literal|"vi\0  "
block|}
block|,
block|{
literal|0x042d
block|,
literal|"eu\0  "
block|}
block|,
block|{
literal|0x042f
block|,
literal|"mk\0  "
block|}
block|,
block|{
literal|0x0436
block|,
literal|"af\0  "
block|}
block|,
block|{
literal|0x0438
block|,
literal|"fo\0  "
block|}
block|,
block|{
literal|0x0439
block|,
literal|"hi\0  "
block|}
block|,
block|{
literal|0x043e
block|,
literal|"ms\0  "
block|}
block|,
block|{
literal|0x0458
block|,
literal|"mt\0  "
block|}
block|,
block|{
literal|0x0801
block|,
literal|"ar_IQ"
block|}
block|,
block|{
literal|0x0804
block|,
literal|"zh_CN"
block|}
block|,
block|{
literal|0x0807
block|,
literal|"de_CH"
block|}
block|,
block|{
literal|0x0809
block|,
literal|"en_GB"
block|}
block|,
block|{
literal|0x080a
block|,
literal|"es_MX"
block|}
block|,
block|{
literal|0x080c
block|,
literal|"fr_BE"
block|}
block|,
block|{
literal|0x0810
block|,
literal|"it_CH"
block|}
block|,
block|{
literal|0x0812
block|,
literal|"ko\0  "
block|}
block|,
block|{
literal|0x0813
block|,
literal|"nl_BE"
block|}
block|,
block|{
literal|0x0814
block|,
literal|"no\0  "
block|}
block|,
block|{
literal|0x0816
block|,
literal|"pt\0  "
block|}
block|,
block|{
literal|0x081a
block|,
literal|"sr\0  "
block|}
block|,
block|{
literal|0x081d
block|,
literal|"sv_FI"
block|}
block|,
block|{
literal|0x0c01
block|,
literal|"ar_EG"
block|}
block|,
block|{
literal|0x0c04
block|,
literal|"zh_HK"
block|}
block|,
block|{
literal|0x0c07
block|,
literal|"de_AT"
block|}
block|,
block|{
literal|0x0c09
block|,
literal|"en_AU"
block|}
block|,
block|{
literal|0x0c0a
block|,
literal|"es\0  "
block|}
block|,
block|{
literal|0x0c0c
block|,
literal|"fr_CA"
block|}
block|,
block|{
literal|0x0c1a
block|,
literal|"sr\0  "
block|}
block|,
block|{
literal|0x1001
block|,
literal|"ar_LY"
block|}
block|,
block|{
literal|0x1004
block|,
literal|"zh_SG"
block|}
block|,
block|{
literal|0x1007
block|,
literal|"de_LU"
block|}
block|,
block|{
literal|0x1009
block|,
literal|"en_CA"
block|}
block|,
block|{
literal|0x100a
block|,
literal|"es_GT"
block|}
block|,
block|{
literal|0x100c
block|,
literal|"fr_CH"
block|}
block|,
block|{
literal|0x1401
block|,
literal|"ar_DZ"
block|}
block|,
block|{
literal|0x1407
block|,
literal|"de_LI"
block|}
block|,
block|{
literal|0x1409
block|,
literal|"en_NZ"
block|}
block|,
block|{
literal|0x140a
block|,
literal|"es_CR"
block|}
block|,
block|{
literal|0x140c
block|,
literal|"fr_LU"
block|}
block|,
block|{
literal|0x1801
block|,
literal|"ar_MA"
block|}
block|,
block|{
literal|0x1809
block|,
literal|"en_IE"
block|}
block|,
block|{
literal|0x180a
block|,
literal|"es_PA"
block|}
block|,
block|{
literal|0x1c01
block|,
literal|"ar_TN"
block|}
block|,
block|{
literal|0x1c09
block|,
literal|"en_ZA"
block|}
block|,
block|{
literal|0x1c0a
block|,
literal|"es_DO"
block|}
block|,
block|{
literal|0x2001
block|,
literal|"ar_OM"
block|}
block|,
block|{
literal|0x2009
block|,
literal|"en_JM"
block|}
block|,
block|{
literal|0x200a
block|,
literal|"es_VE"
block|}
block|,
block|{
literal|0x2401
block|,
literal|"ar_YE"
block|}
block|,
block|{
literal|0x2409
block|,
literal|"en\0  "
block|}
block|,
block|{
literal|0x240a
block|,
literal|"es_CO"
block|}
block|,
block|{
literal|0x2801
block|,
literal|"ar_SY"
block|}
block|,
block|{
literal|0x2809
block|,
literal|"en_BZ"
block|}
block|,
block|{
literal|0x280a
block|,
literal|"es_PE"
block|}
block|,
block|{
literal|0x2c01
block|,
literal|"ar_JO"
block|}
block|,
block|{
literal|0x2c09
block|,
literal|"en_TT"
block|}
block|,
block|{
literal|0x2c0a
block|,
literal|"es_AR"
block|}
block|,
block|{
literal|0x3001
block|,
literal|"ar_LB"
block|}
block|,
block|{
literal|0x300a
block|,
literal|"es_EC"
block|}
block|,
block|{
literal|0x3401
block|,
literal|"ar_KW"
block|}
block|,
block|{
literal|0x340a
block|,
literal|"es_CL"
block|}
block|,
block|{
literal|0x3801
block|,
literal|"ar_AE"
block|}
block|,
block|{
literal|0x380a
block|,
literal|"es_UY"
block|}
block|,
block|{
literal|0x3c01
block|,
literal|"ar_BH"
block|}
block|,
block|{
literal|0x3c0a
block|,
literal|"es_PY"
block|}
block|,
block|{
literal|0x4001
block|,
literal|"ar_QA"
block|}
block|,
block|{
literal|0x400a
block|,
literal|"es_BO"
block|}
block|,
block|{
literal|0x440a
block|,
literal|"es_SV"
block|}
block|,
block|{
literal|0x480a
block|,
literal|"es_HN"
block|}
block|,
block|{
literal|0x4c0a
block|,
literal|"es_NI"
block|}
block|,
block|{
literal|0x500a
block|,
literal|"es_PR"
block|}
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|windows_to_iso_count
specifier|static
specifier|const
name|int
name|windows_to_iso_count
init|=
sizeof|sizeof
argument_list|(
name|windows_to_iso_list
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|WindowsToISOListElt
argument_list|)
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|winLangCodeToIsoName
specifier|static
specifier|const
name|char
modifier|*
name|winLangCodeToIsoName
parameter_list|(
name|int
name|code
parameter_list|)
block|{
name|int
name|cmp
init|=
name|code
operator|-
name|windows_to_iso_list
index|[
literal|0
index|]
operator|.
name|windows_code
decl_stmt|;
if|if
condition|(
name|cmp
operator|<
literal|0
condition|)
return|return
literal|0
return|;
if|if
condition|(
name|cmp
operator|==
literal|0
condition|)
return|return
name|windows_to_iso_list
index|[
literal|0
index|]
operator|.
name|iso_name
return|;
name|int
name|begin
init|=
literal|0
decl_stmt|;
name|int
name|end
init|=
name|windows_to_iso_count
decl_stmt|;
while|while
condition|(
name|end
operator|-
name|begin
operator|>
literal|1
condition|)
block|{
name|uint
name|mid
init|=
operator|(
name|begin
operator|+
name|end
operator|)
operator|/
literal|2
decl_stmt|;
specifier|const
name|WindowsToISOListElt
modifier|*
name|elt
init|=
name|windows_to_iso_list
operator|+
name|mid
decl_stmt|;
name|int
name|cmp
init|=
name|code
operator|-
name|elt
operator|->
name|windows_code
decl_stmt|;
if|if
condition|(
name|cmp
operator|<
literal|0
condition|)
name|end
operator|=
name|mid
expr_stmt|;
elseif|else
if|if
condition|(
name|cmp
operator|>
literal|0
condition|)
name|begin
operator|=
name|mid
expr_stmt|;
else|else
return|return
name|elt
operator|->
name|iso_name
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|qt_inIsoNametoLCID
name|LCID
name|qt_inIsoNametoLCID
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|)
block|{
comment|// handle norwegian manually, the list above will fail
if|if
condition|(
operator|!
name|strncmp
argument_list|(
name|name
argument_list|,
literal|"nb"
argument_list|,
literal|2
argument_list|)
condition|)
return|return
literal|0x0414
return|;
elseif|else
if|if
condition|(
operator|!
name|strncmp
argument_list|(
name|name
argument_list|,
literal|"nn"
argument_list|,
literal|2
argument_list|)
condition|)
return|return
literal|0x0814
return|;
name|char
name|n
index|[
literal|64
index|]
decl_stmt|;
name|strncpy
argument_list|(
name|n
argument_list|,
name|name
argument_list|,
sizeof|sizeof
argument_list|(
name|n
argument_list|)
argument_list|)
expr_stmt|;
name|n
index|[
sizeof|sizeof
argument_list|(
name|n
argument_list|)
operator|-
literal|1
index|]
operator|=
literal|0
expr_stmt|;
name|char
modifier|*
name|c
init|=
name|n
decl_stmt|;
while|while
condition|(
operator|*
name|c
condition|)
block|{
if|if
condition|(
operator|*
name|c
operator|==
literal|'-'
condition|)
operator|*
name|c
operator|=
literal|'_'
expr_stmt|;
operator|++
name|c
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|windows_to_iso_count
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|!
name|strcmp
argument_list|(
name|n
argument_list|,
name|windows_to_iso_list
index|[
name|i
index|]
operator|.
name|iso_name
argument_list|)
condition|)
return|return
name|windows_to_iso_list
index|[
name|i
index|]
operator|.
name|windows_code
return|;
block|}
return|return
name|LOCALE_USER_DEFAULT
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|Q_OS_WINRT
end_ifndef
begin_decl_stmt
DECL|function|winIso639LangName
specifier|static
name|QString
name|winIso639LangName
argument_list|(
name|LCID
name|id
argument_list|)
else|#
directive|else
decl|static
name|QString
name|winIso639LangName
argument_list|(
name|LPWSTR
name|id
argument_list|)
endif|#
directive|endif
argument_list|{
name|QString
name|result
argument_list|;
comment|// Windows returns the wrong ISO639 for some languages, we need to detect them here using
comment|// the language code
name|QString
name|lang_code
argument_list|;
name|wchar_t
name|out
index|[
literal|256
index|]
argument_list|;
ifndef|#
directive|ifndef
name|Q_OS_WINRT
argument_list|if
operator|(
name|GetLocaleInfo
argument_list|(
name|id
argument_list|,
name|LOCALE_ILANGUAGE
argument_list|,
name|out
argument_list|,
literal|255
argument_list|)
operator|)
else|#
directive|else
if|if
condition|(
name|GetLocaleInfoEx
argument_list|(
name|id
argument_list|,
name|LOCALE_ILANGUAGE
argument_list|,
name|out
argument_list|,
literal|255
argument_list|)
condition|)
endif|#
directive|endif
name|lang_code
operator|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|out
argument_list|)
expr_stmt|;
end_decl_stmt
begin_if
if|if
condition|(
operator|!
name|lang_code
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|const
name|char
modifier|*
name|endptr
decl_stmt|;
name|bool
name|ok
decl_stmt|;
name|QByteArray
name|latin1_lang_code
init|=
name|lang_code
operator|.
name|toLatin1
argument_list|()
decl_stmt|;
name|int
name|i
init|=
name|qstrtoull
argument_list|(
name|latin1_lang_code
argument_list|,
operator|&
name|endptr
argument_list|,
literal|16
argument_list|,
operator|&
name|ok
argument_list|)
decl_stmt|;
if|if
condition|(
name|ok
operator|&&
operator|*
name|endptr
operator|==
literal|'\0'
condition|)
block|{
switch|switch
condition|(
name|i
condition|)
block|{
case|case
literal|0x814
case|:
name|result
operator|=
name|QLatin1String
argument_list|(
literal|"nn"
argument_list|)
expr_stmt|;
comment|// Nynorsk
break|break;
default|default:
break|break;
block|}
block|}
block|}
end_if
begin_if
if|if
condition|(
operator|!
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|result
return|;
end_if
begin_comment
comment|// not one of the problematic languages - do the usual lookup
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|Q_OS_WINRT
end_ifndef
begin_if
if|if
condition|(
name|GetLocaleInfo
argument_list|(
name|id
argument_list|,
name|LOCALE_SISO639LANGNAME
argument_list|,
name|out
argument_list|,
literal|255
argument_list|)
condition|)
else|#
directive|else
if|if
condition|(
name|GetLocaleInfoEx
argument_list|(
name|id
argument_list|,
name|LOCALE_SISO639LANGNAME
argument_list|,
name|out
argument_list|,
literal|255
argument_list|)
condition|)
endif|#
directive|endif
name|result
operator|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|out
argument_list|)
expr_stmt|;
end_if
begin_return
return|return
name|result
return|;
end_return
begin_ifndef
unit|}
ifndef|#
directive|ifndef
name|Q_OS_WINRT
end_ifndef
begin_decl_stmt
unit|static
DECL|function|winIso3116CtryName
name|QString
name|winIso3116CtryName
argument_list|(
name|LCID
name|id
argument_list|)
else|#
directive|else
decl|static
name|QString
name|winIso3116CtryName
argument_list|(
name|LPWSTR
name|id
argument_list|)
endif|#
directive|endif
argument_list|{
name|QString
name|result
argument_list|;
name|wchar_t
name|out
index|[
literal|256
index|]
argument_list|;
ifndef|#
directive|ifndef
name|Q_OS_WINRT
argument_list|if
operator|(
name|GetLocaleInfo
argument_list|(
name|id
argument_list|,
name|LOCALE_SISO3166CTRYNAME
argument_list|,
name|out
argument_list|,
literal|255
argument_list|)
operator|)
else|#
directive|else
if|if
condition|(
name|GetLocaleInfoEx
argument_list|(
name|id
argument_list|,
name|LOCALE_SISO3166CTRYNAME
argument_list|,
name|out
argument_list|,
literal|255
argument_list|)
condition|)
endif|#
directive|endif
name|result
operator|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|out
argument_list|)
expr_stmt|;
end_decl_stmt
begin_return
return|return
name|result
return|;
end_return
begin_ifndef
unit|}
ifndef|#
directive|ifndef
name|Q_OS_WINRT
end_ifndef
begin_decl_stmt
unit|static
DECL|function|getWinLocaleName
name|QByteArray
name|getWinLocaleName
argument_list|(
name|LCID
name|id
argument_list|)
else|#
directive|else
decl|static
name|QByteArray
name|getWinLocaleName
argument_list|(
name|LPWSTR
name|id
argument_list|)
endif|#
directive|endif
argument_list|{
name|QByteArray
name|result
argument_list|;
ifndef|#
directive|ifndef
name|Q_OS_WINRT
argument_list|if
operator|(
name|id
operator|==
name|LOCALE_USER_DEFAULT
operator|)
block|{
else|#
directive|else
if|if
condition|(
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|id
argument_list|)
operator|==
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|LOCALE_NAME_USER_DEFAULT
argument_list|)
condition|)
block|{
endif|#
directive|endif
specifier|static
name|QByteArray
name|langEnvVar
operator|=
name|qgetenv
argument_list|(
literal|"LANG"
argument_list|)
block|;
name|result
operator|=
name|langEnvVar
expr_stmt|;
name|QString
name|lang
operator|,
name|script
operator|,
name|cntry
argument_list|;         if
operator|(
name|result
operator|==
literal|"C"
operator|||
operator|(
operator|!
name|result
operator|.
name|isEmpty
argument_list|()
operator|&&
name|qt_splitLocaleName
argument_list|(
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|result
argument_list|)
argument_list|,
name|lang
argument_list|,
name|script
argument_list|,
name|cntry
argument_list|)
operator|)
operator|)
block|{
name|long
name|id
operator|=
literal|0
block|;
name|bool
name|ok
operator|=
literal|false
block|;
name|id
operator|=
name|qstrtoll
argument_list|(
name|result
operator|.
name|data
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|&
name|ok
argument_list|)
block|;
if|if
condition|(
operator|!
name|ok
operator|||
name|id
operator|==
literal|0
operator|||
name|id
argument_list|<
name|INT_MIN
operator|||
name|id
argument_list|>
name|INT_MAX
condition|)
return|return
name|result
return|;
else|else
return|return
name|winLangCodeToIsoName
argument_list|(
operator|(
name|int
operator|)
name|id
argument_list|)
return|;
block|}
expr|}
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|result
operator|=
name|winLangCodeToIsoName
argument_list|(
name|id
operator|!=
name|LOCALE_USER_DEFAULT
condition|?
name|id
else|:
name|GetUserDefaultLCID
argument_list|()
argument_list|)
argument_list|;
else|#
directive|else
comment|// !Q_OS_WINCE
ifndef|#
directive|ifndef
name|Q_OS_WINRT
argument_list|if
operator|(
name|id
operator|==
name|LOCALE_USER_DEFAULT
operator|)
name|id
operator|=
name|GetUserDefaultLCID
argument_list|()
argument_list|;
else|#
directive|else
comment|// !Q_OS_WINRT
name|WCHAR
name|lcName
index|[
name|LOCALE_NAME_MAX_LENGTH
index|]
argument_list|;     if
operator|(
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|id
argument_list|)
operator|==
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|LOCALE_NAME_USER_DEFAULT
argument_list|)
operator|)
block|{
name|GetUserDefaultLocaleName
argument_list|(
name|lcName
argument_list|,
name|LOCALE_NAME_MAX_LENGTH
argument_list|)
block|;
name|id
operator|=
name|lcName
block|;     }
endif|#
directive|endif
comment|// Q_OS_WINRT
name|QString
name|resultuage
operator|=
name|winIso639LangName
argument_list|(
name|id
argument_list|)
argument_list|;
name|QString
name|country
operator|=
name|winIso3116CtryName
argument_list|(
name|id
argument_list|)
argument_list|;
name|result
operator|=
name|resultuage
operator|.
name|toLatin1
argument_list|()
argument_list|;     if
operator|(
operator|!
name|country
operator|.
name|isEmpty
argument_list|()
operator|)
block|{
name|result
operator|+=
literal|'_'
block|;
name|result
operator|+=
name|country
operator|.
name|toLatin1
argument_list|()
block|;     }
endif|#
directive|endif
comment|// !Q_OS_WINCE
return|return
name|result
return|;
end_decl_stmt
begin_function
unit|}  Q_CORE_EXPORT
DECL|function|qt_localeFromLCID
name|QLocale
name|qt_localeFromLCID
parameter_list|(
name|LCID
name|id
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|Q_OS_WINRT
return|return
name|QLocale
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|getWinLocaleName
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|)
return|;
else|#
directive|else
comment|// !Q_OS_WINRT
name|WCHAR
name|name
index|[
name|LOCALE_NAME_MAX_LENGTH
index|]
decl_stmt|;
name|LCIDToLocaleName
argument_list|(
name|id
argument_list|,
name|name
argument_list|,
name|LOCALE_NAME_MAX_LENGTH
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|QLocale
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|getWinLocaleName
argument_list|(
name|name
argument_list|)
argument_list|)
argument_list|)
return|;
endif|#
directive|endif
comment|// Q_OS_WINRT
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
