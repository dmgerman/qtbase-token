begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QRINGBUFFER_P_H
end_ifndef
begin_define
DECL|macro|QRINGBUFFER_P_H
define|#
directive|define
name|QRINGBUFFER_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists for the convenience
end_comment
begin_comment
comment|// of a number of Qt sources files.  This header file may change from
end_comment
begin_comment
comment|// version to version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|<QtCore/qbytearray.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qlist.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
name|class
name|QRingBuffer
block|{
name|public
label|:
name|explicit
specifier|inline
name|QRingBuffer
argument_list|(
argument|int growth =
literal|4096
argument_list|)
operator|:
name|head
argument_list|(
literal|0
argument_list|)
operator|,
name|tail
argument_list|(
literal|0
argument_list|)
operator|,
name|tailBuffer
argument_list|(
literal|0
argument_list|)
operator|,
name|basicBlockSize
argument_list|(
name|growth
argument_list|)
operator|,
name|bufferSize
argument_list|(
literal|0
argument_list|)
block|{
name|buffers
operator|.
name|append
argument_list|(
name|QByteArray
argument_list|()
argument_list|)
block|;     }
specifier|inline
name|qint64
name|nextDataBlockSize
argument_list|()
specifier|const
block|{
return|return
operator|(
name|tailBuffer
operator|==
literal|0
operator|?
name|tail
operator|:
name|buffers
operator|.
name|first
argument_list|()
operator|.
name|size
argument_list|()
operator|)
operator|-
name|head
return|;
block|}
specifier|inline
specifier|const
name|char
operator|*
name|readPointer
argument_list|()
specifier|const
block|{
return|return
name|bufferSize
operator|==
literal|0
operator|?
name|Q_NULLPTR
operator|:
operator|(
name|buffers
operator|.
name|first
argument_list|()
operator|.
name|constData
argument_list|()
operator|+
name|head
operator|)
return|;
block|}
name|Q_CORE_EXPORT
specifier|const
name|char
modifier|*
name|readPointerAtPosition
argument_list|(
name|qint64
name|pos
argument_list|,
name|qint64
operator|&
name|length
argument_list|)
decl|const
decl_stmt|;
name|Q_CORE_EXPORT
name|void
name|free
parameter_list|(
name|qint64
name|bytes
parameter_list|)
function_decl|;
name|Q_CORE_EXPORT
name|char
modifier|*
name|reserve
parameter_list|(
name|qint64
name|bytes
parameter_list|)
function_decl|;
name|Q_CORE_EXPORT
name|char
modifier|*
name|reserveFront
parameter_list|(
name|qint64
name|bytes
parameter_list|)
function_decl|;
specifier|inline
name|void
name|truncate
parameter_list|(
name|qint64
name|pos
parameter_list|)
block|{
if|if
condition|(
name|pos
operator|<
name|size
argument_list|()
condition|)
name|chop
argument_list|(
name|size
argument_list|()
operator|-
name|pos
argument_list|)
expr_stmt|;
block|}
name|Q_CORE_EXPORT
name|void
name|chop
parameter_list|(
name|qint64
name|bytes
parameter_list|)
function_decl|;
specifier|inline
name|bool
name|isEmpty
argument_list|()
specifier|const
block|{
return|return
name|bufferSize
operator|==
literal|0
return|;
block|}
specifier|inline
name|int
name|getChar
parameter_list|()
block|{
if|if
condition|(
name|isEmpty
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
name|char
name|c
init|=
operator|*
name|readPointer
argument_list|()
decl_stmt|;
name|free
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|int
argument_list|(
name|uchar
argument_list|(
name|c
argument_list|)
argument_list|)
return|;
block|}
specifier|inline
name|void
name|putChar
parameter_list|(
name|char
name|c
parameter_list|)
block|{
name|char
modifier|*
name|ptr
init|=
name|reserve
argument_list|(
literal|1
argument_list|)
decl_stmt|;
operator|*
name|ptr
operator|=
name|c
expr_stmt|;
block|}
name|void
name|ungetChar
parameter_list|(
name|char
name|c
parameter_list|)
block|{
if|if
condition|(
name|head
operator|>
literal|0
condition|)
block|{
operator|--
name|head
expr_stmt|;
name|buffers
operator|.
name|first
argument_list|()
index|[
name|head
index|]
operator|=
name|c
expr_stmt|;
operator|++
name|bufferSize
expr_stmt|;
block|}
else|else
block|{
name|char
modifier|*
name|ptr
init|=
name|reserveFront
argument_list|(
literal|1
argument_list|)
decl_stmt|;
operator|*
name|ptr
operator|=
name|c
expr_stmt|;
block|}
block|}
specifier|inline
name|qint64
name|size
argument_list|()
specifier|const
block|{
return|return
name|bufferSize
return|;
block|}
name|Q_CORE_EXPORT
name|void
name|clear
parameter_list|()
function_decl|;
name|Q_CORE_EXPORT
name|qint64
name|indexOf
argument_list|(
name|char
name|c
argument_list|)
decl|const
decl_stmt|;
name|Q_CORE_EXPORT
name|qint64
name|indexOf
argument_list|(
name|char
name|c
argument_list|,
name|qint64
name|maxLength
argument_list|)
decl|const
decl_stmt|;
name|Q_CORE_EXPORT
name|qint64
name|read
parameter_list|(
name|char
modifier|*
name|data
parameter_list|,
name|qint64
name|maxLength
parameter_list|)
function_decl|;
name|Q_CORE_EXPORT
name|QByteArray
name|read
parameter_list|()
function_decl|;
name|Q_CORE_EXPORT
name|qint64
name|peek
argument_list|(
name|char
operator|*
name|data
argument_list|,
name|qint64
name|maxLength
argument_list|,
name|qint64
name|pos
operator|=
literal|0
argument_list|)
decl|const
decl_stmt|;
name|Q_CORE_EXPORT
name|void
name|append
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|qba
parameter_list|)
function_decl|;
specifier|inline
name|qint64
name|skip
parameter_list|(
name|qint64
name|length
parameter_list|)
block|{
return|return
name|read
argument_list|(
literal|0
argument_list|,
name|length
argument_list|)
return|;
block|}
name|Q_CORE_EXPORT
name|qint64
name|readLine
parameter_list|(
name|char
modifier|*
name|data
parameter_list|,
name|qint64
name|maxLength
parameter_list|)
function_decl|;
specifier|inline
name|bool
name|canReadLine
argument_list|()
specifier|const
block|{
return|return
name|indexOf
argument_list|(
literal|'\n'
argument_list|)
operator|>=
literal|0
return|;
block|}
name|private
label|:
name|QList
operator|<
name|QByteArray
operator|>
name|buffers
expr_stmt|;
name|int
name|head
decl_stmt|,
name|tail
decl_stmt|;
name|int
name|tailBuffer
decl_stmt|;
comment|// always buffers.size() - 1
specifier|const
name|int
name|basicBlockSize
decl_stmt|;
name|qint64
name|bufferSize
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QRINGBUFFER_P_H
end_comment
end_unit
