begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtCore/qlist.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QSTRINGLIST_H
end_ifndef
begin_define
DECL|macro|QSTRINGLIST_H
define|#
directive|define
name|QSTRINGLIST_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qalgorithms.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qregexp.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qstring.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qstringmatcher.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QRegExp
name|class
name|QRegExp
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QRegularExpression
name|class
name|QRegularExpression
decl_stmt|;
end_decl_stmt
begin_typedef
DECL|typedef|QStringListIterator
typedef|typedef
name|QListIterator
operator|<
name|QString
operator|>
name|QStringListIterator
expr_stmt|;
end_typedef
begin_typedef
DECL|typedef|QMutableStringListIterator
typedef|typedef
name|QMutableListIterator
operator|<
name|QString
operator|>
name|QMutableStringListIterator
expr_stmt|;
end_typedef
begin_decl_stmt
DECL|variable|QStringList
name|class
name|QStringList
decl_stmt|;
end_decl_stmt
begin_ifdef
ifdef|#
directive|ifdef
name|Q_QDOC
end_ifdef
begin_decl_stmt
name|class
name|QStringList
range|:
name|public
name|QList
operator|<
name|QString
operator|>
else|#
directive|else
name|template
operator|<
operator|>
expr|struct
name|QListSpecialMethods
operator|<
name|QString
operator|>
endif|#
directive|endif
block|{
ifndef|#
directive|ifndef
name|Q_QDOC
name|protected
operator|:
operator|~
name|QListSpecialMethods
argument_list|()
block|{}
endif|#
directive|endif
name|public
operator|:
specifier|inline
name|void
name|sort
argument_list|(
argument|Qt::CaseSensitivity cs = Qt::CaseSensitive
argument_list|)
block|;
specifier|inline
name|int
name|removeDuplicates
argument_list|()
block|;
specifier|inline
name|QString
name|join
argument_list|(
argument|const QString&sep
argument_list|)
specifier|const
block|;
specifier|inline
name|QString
name|join
argument_list|(
argument|QChar sep
argument_list|)
specifier|const
block|;
specifier|inline
name|QStringList
name|filter
argument_list|(
argument|const QString&str
argument_list|,
argument|Qt::CaseSensitivity cs = Qt::CaseSensitive
argument_list|)
specifier|const
block|;
specifier|inline
name|QStringList
operator|&
name|replaceInStrings
argument_list|(
argument|const QString&before
argument_list|,
argument|const QString&after
argument_list|,
argument|Qt::CaseSensitivity cs = Qt::CaseSensitive
argument_list|)
block|;
ifndef|#
directive|ifndef
name|QT_NO_REGEXP
specifier|inline
name|QStringList
name|filter
argument_list|(
argument|const QRegExp&rx
argument_list|)
specifier|const
block|;
specifier|inline
name|QStringList
operator|&
name|replaceInStrings
argument_list|(
specifier|const
name|QRegExp
operator|&
name|rx
argument_list|,
specifier|const
name|QString
operator|&
name|after
argument_list|)
block|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_BOOTSTRAPPED
ifndef|#
directive|ifndef
name|QT_NO_REGULAREXPRESSION
specifier|inline
name|QStringList
name|filter
argument_list|(
argument|const QRegularExpression&re
argument_list|)
specifier|const
block|;
specifier|inline
name|QStringList
operator|&
name|replaceInStrings
argument_list|(
specifier|const
name|QRegularExpression
operator|&
name|re
argument_list|,
specifier|const
name|QString
operator|&
name|after
argument_list|)
block|;
endif|#
directive|endif
comment|// QT_NO_REGULAREXPRESSION
endif|#
directive|endif
comment|// QT_BOOTSTRAPPED
ifndef|#
directive|ifndef
name|Q_QDOC
name|private
operator|:
specifier|inline
name|QStringList
operator|*
name|self
argument_list|()
block|;
specifier|inline
specifier|const
name|QStringList
operator|*
name|self
argument_list|()
specifier|const
block|; }
decl_stmt|;
end_decl_stmt
begin_comment
comment|// ### Qt6: check if there's a better way
end_comment
begin_decl_stmt
name|class
name|QStringList
range|:
name|public
name|QList
operator|<
name|QString
operator|>
block|{
endif|#
directive|endif
name|public
operator|:
specifier|inline
name|QStringList
argument_list|()
name|Q_DECL_NOTHROW
block|{ }
specifier|inline
name|explicit
name|QStringList
argument_list|(
argument|const QString&i
argument_list|)
block|{
name|append
argument_list|(
name|i
argument_list|)
block|; }
specifier|inline
name|QStringList
argument_list|(
specifier|const
name|QList
operator|<
name|QString
operator|>
operator|&
name|l
argument_list|)
operator|:
name|QList
operator|<
name|QString
operator|>
operator|(
name|l
operator|)
block|{ }
ifdef|#
directive|ifdef
name|Q_COMPILER_RVALUE_REFS
specifier|inline
name|QStringList
argument_list|(
argument|QList<QString>&&l
argument_list|)
name|Q_DECL_NOTHROW
operator|:
name|QList
operator|<
name|QString
operator|>
operator|(
name|std
operator|::
name|move
argument_list|(
name|l
argument_list|)
operator|)
block|{ }
endif|#
directive|endif
ifdef|#
directive|ifdef
name|Q_COMPILER_INITIALIZER_LISTS
specifier|inline
name|QStringList
argument_list|(
name|std
operator|::
name|initializer_list
operator|<
name|QString
operator|>
name|args
argument_list|)
operator|:
name|QList
operator|<
name|QString
operator|>
operator|(
name|args
operator|)
block|{ }
endif|#
directive|endif
name|QStringList
operator|&
name|operator
operator|=
operator|(
specifier|const
name|QList
operator|<
name|QString
operator|>
operator|&
name|other
operator|)
block|{
name|QList
operator|<
name|QString
operator|>
operator|::
name|operator
operator|=
operator|(
name|other
operator|)
block|;
return|return
operator|*
name|this
return|;
block|}
ifdef|#
directive|ifdef
name|Q_COMPILER_RVALUE_REFS
name|QStringList
operator|&
name|operator
operator|=
operator|(
name|QList
operator|<
name|QString
operator|>
operator|&&
name|other
operator|)
name|Q_DECL_NOTHROW
block|{
name|QList
operator|<
name|QString
operator|>
operator|::
name|operator
operator|=
operator|(
name|std
operator|::
name|move
argument_list|(
name|other
argument_list|)
operator|)
block|;
return|return
operator|*
name|this
return|;
block|}
endif|#
directive|endif
specifier|inline
name|bool
name|contains
argument_list|(
argument|const QString&str
argument_list|,
argument|Qt::CaseSensitivity cs = Qt::CaseSensitive
argument_list|)
specifier|const
block|;
specifier|inline
name|QStringList
name|operator
operator|+
operator|(
specifier|const
name|QStringList
operator|&
name|other
operator|)
specifier|const
block|{
name|QStringList
name|n
operator|=
operator|*
name|this
block|;
name|n
operator|+=
name|other
block|;
return|return
name|n
return|;
block|}
specifier|inline
name|QStringList
operator|&
name|operator
operator|<<
operator|(
specifier|const
name|QString
operator|&
name|str
operator|)
block|{
name|append
argument_list|(
name|str
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
specifier|inline
name|QStringList
operator|&
name|operator
operator|<<
operator|(
specifier|const
name|QStringList
operator|&
name|l
operator|)
block|{
operator|*
name|this
operator|+=
name|l
block|;
return|return
operator|*
name|this
return|;
block|}
specifier|inline
name|QStringList
operator|&
name|operator
operator|<<
operator|(
specifier|const
name|QList
operator|<
name|QString
operator|>
operator|&
name|l
operator|)
block|{
operator|*
name|this
operator|+=
name|l
block|;
return|return
operator|*
name|this
return|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_REGEXP
specifier|inline
name|int
name|indexOf
argument_list|(
argument|const QRegExp&rx
argument_list|,
argument|int from =
literal|0
argument_list|)
specifier|const
block|;
specifier|inline
name|int
name|lastIndexOf
argument_list|(
argument|const QRegExp&rx
argument_list|,
argument|int from = -
literal|1
argument_list|)
specifier|const
block|;
specifier|inline
name|int
name|indexOf
argument_list|(
argument|QRegExp&rx
argument_list|,
argument|int from =
literal|0
argument_list|)
specifier|const
block|;
specifier|inline
name|int
name|lastIndexOf
argument_list|(
argument|QRegExp&rx
argument_list|,
argument|int from = -
literal|1
argument_list|)
specifier|const
block|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_BOOTSTRAPPED
ifndef|#
directive|ifndef
name|QT_NO_REGULAREXPRESSION
specifier|inline
name|int
name|indexOf
argument_list|(
argument|const QRegularExpression&re
argument_list|,
argument|int from =
literal|0
argument_list|)
specifier|const
block|;
specifier|inline
name|int
name|lastIndexOf
argument_list|(
argument|const QRegularExpression&re
argument_list|,
argument|int from = -
literal|1
argument_list|)
specifier|const
block|;
endif|#
directive|endif
comment|// QT_NO_REGULAREXPRESSION
endif|#
directive|endif
comment|// QT_BOOTSTRAPPED
name|using
name|QList
operator|<
name|QString
operator|>
operator|::
name|indexOf
block|;
name|using
name|QList
operator|<
name|QString
operator|>
operator|::
name|lastIndexOf
block|; }
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|Q_DECLARE_TYPEINFO
argument_list|(
name|QStringList
argument_list|,
name|Q_MOVABLE_TYPE
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|function|self
specifier|inline
name|QStringList
operator|*
name|QListSpecialMethods
operator|<
name|QString
operator|>
operator|::
name|self
argument_list|()
block|{
return|return
name|static_cast
operator|<
name|QStringList
operator|*
operator|>
operator|(
name|this
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|self
specifier|inline
specifier|const
name|QStringList
operator|*
name|QListSpecialMethods
operator|<
name|QString
operator|>
operator|::
name|self
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
specifier|const
name|QStringList
operator|*
operator|>
operator|(
name|this
operator|)
return|;
block|}
end_expr_stmt
begin_decl_stmt
name|namespace
name|QtPrivate
block|{
name|void
name|Q_CORE_EXPORT
name|QStringList_sort
argument_list|(
name|QStringList
operator|*
name|that
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
argument_list|)
decl_stmt|;
name|int
name|Q_CORE_EXPORT
name|QStringList_removeDuplicates
parameter_list|(
name|QStringList
modifier|*
name|that
parameter_list|)
function_decl|;
name|QString
name|Q_CORE_EXPORT
name|QStringList_join
parameter_list|(
specifier|const
name|QStringList
modifier|*
name|that
parameter_list|,
specifier|const
name|QChar
modifier|*
name|sep
parameter_list|,
name|int
name|seplen
parameter_list|)
function_decl|;
name|QStringList
name|Q_CORE_EXPORT
name|QStringList_filter
argument_list|(
specifier|const
name|QStringList
operator|*
name|that
argument_list|,
specifier|const
name|QString
operator|&
name|str
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
argument_list|)
decl_stmt|;
name|bool
name|Q_CORE_EXPORT
name|QStringList_contains
argument_list|(
specifier|const
name|QStringList
operator|*
name|that
argument_list|,
specifier|const
name|QString
operator|&
name|str
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
argument_list|)
decl_stmt|;
name|void
name|Q_CORE_EXPORT
name|QStringList_replaceInStrings
argument_list|(
name|QStringList
operator|*
name|that
argument_list|,
specifier|const
name|QString
operator|&
name|before
argument_list|,
specifier|const
name|QString
operator|&
name|after
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
argument_list|)
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_REGEXP
name|void
name|Q_CORE_EXPORT
name|QStringList_replaceInStrings
parameter_list|(
name|QStringList
modifier|*
name|that
parameter_list|,
specifier|const
name|QRegExp
modifier|&
name|rx
parameter_list|,
specifier|const
name|QString
modifier|&
name|after
parameter_list|)
function_decl|;
name|QStringList
name|Q_CORE_EXPORT
name|QStringList_filter
parameter_list|(
specifier|const
name|QStringList
modifier|*
name|that
parameter_list|,
specifier|const
name|QRegExp
modifier|&
name|re
parameter_list|)
function_decl|;
name|int
name|Q_CORE_EXPORT
name|QStringList_indexOf
parameter_list|(
specifier|const
name|QStringList
modifier|*
name|that
parameter_list|,
specifier|const
name|QRegExp
modifier|&
name|rx
parameter_list|,
name|int
name|from
parameter_list|)
function_decl|;
name|int
name|Q_CORE_EXPORT
name|QStringList_lastIndexOf
parameter_list|(
specifier|const
name|QStringList
modifier|*
name|that
parameter_list|,
specifier|const
name|QRegExp
modifier|&
name|rx
parameter_list|,
name|int
name|from
parameter_list|)
function_decl|;
name|int
name|Q_CORE_EXPORT
name|QStringList_indexOf
parameter_list|(
specifier|const
name|QStringList
modifier|*
name|that
parameter_list|,
name|QRegExp
modifier|&
name|rx
parameter_list|,
name|int
name|from
parameter_list|)
function_decl|;
name|int
name|Q_CORE_EXPORT
name|QStringList_lastIndexOf
parameter_list|(
specifier|const
name|QStringList
modifier|*
name|that
parameter_list|,
name|QRegExp
modifier|&
name|rx
parameter_list|,
name|int
name|from
parameter_list|)
function_decl|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_BOOTSTRAPPED
ifndef|#
directive|ifndef
name|QT_NO_REGULAREXPRESSION
name|void
name|Q_CORE_EXPORT
name|QStringList_replaceInStrings
parameter_list|(
name|QStringList
modifier|*
name|that
parameter_list|,
specifier|const
name|QRegularExpression
modifier|&
name|rx
parameter_list|,
specifier|const
name|QString
modifier|&
name|after
parameter_list|)
function_decl|;
name|QStringList
name|Q_CORE_EXPORT
name|QStringList_filter
parameter_list|(
specifier|const
name|QStringList
modifier|*
name|that
parameter_list|,
specifier|const
name|QRegularExpression
modifier|&
name|re
parameter_list|)
function_decl|;
name|int
name|Q_CORE_EXPORT
name|QStringList_indexOf
parameter_list|(
specifier|const
name|QStringList
modifier|*
name|that
parameter_list|,
specifier|const
name|QRegularExpression
modifier|&
name|re
parameter_list|,
name|int
name|from
parameter_list|)
function_decl|;
name|int
name|Q_CORE_EXPORT
name|QStringList_lastIndexOf
parameter_list|(
specifier|const
name|QStringList
modifier|*
name|that
parameter_list|,
specifier|const
name|QRegularExpression
modifier|&
name|re
parameter_list|,
name|int
name|from
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|// QT_NO_REGULAREXPRESSION
endif|#
directive|endif
comment|// QT_BOOTSTRAPPED
block|}
end_decl_stmt
begin_expr_stmt
DECL|function|sort
specifier|inline
name|void
name|QListSpecialMethods
operator|<
name|QString
operator|>
operator|::
name|sort
argument_list|(
argument|Qt::CaseSensitivity cs
argument_list|)
block|{
name|QtPrivate
operator|::
name|QStringList_sort
argument_list|(
name|self
argument_list|()
argument_list|,
name|cs
argument_list|)
block|; }
DECL|function|removeDuplicates
specifier|inline
name|int
name|QListSpecialMethods
operator|<
name|QString
operator|>
operator|::
name|removeDuplicates
argument_list|()
block|{
return|return
name|QtPrivate
operator|::
name|QStringList_removeDuplicates
argument_list|(
name|self
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|join
specifier|inline
name|QString
name|QListSpecialMethods
operator|<
name|QString
operator|>
operator|::
name|join
argument_list|(
argument|const QString&sep
argument_list|)
specifier|const
block|{
return|return
name|QtPrivate
operator|::
name|QStringList_join
argument_list|(
name|self
argument_list|()
argument_list|,
name|sep
operator|.
name|constData
argument_list|()
argument_list|,
name|sep
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|join
specifier|inline
name|QString
name|QListSpecialMethods
operator|<
name|QString
operator|>
operator|::
name|join
argument_list|(
argument|QChar sep
argument_list|)
specifier|const
block|{
return|return
name|QtPrivate
operator|::
name|QStringList_join
argument_list|(
name|self
argument_list|()
argument_list|,
operator|&
name|sep
argument_list|,
literal|1
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|filter
specifier|inline
name|QStringList
name|QListSpecialMethods
operator|<
name|QString
operator|>
operator|::
name|filter
argument_list|(
argument|const QString&str
argument_list|,
argument|Qt::CaseSensitivity cs
argument_list|)
specifier|const
block|{
return|return
name|QtPrivate
operator|::
name|QStringList_filter
argument_list|(
name|self
argument_list|()
argument_list|,
name|str
argument_list|,
name|cs
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|contains
specifier|inline
name|bool
name|QStringList
operator|::
name|contains
argument_list|(
argument|const QString&str
argument_list|,
argument|Qt::CaseSensitivity cs
argument_list|)
specifier|const
block|{
return|return
name|QtPrivate
operator|::
name|QStringList_contains
argument_list|(
name|this
argument_list|,
name|str
argument_list|,
name|cs
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|replaceInStrings
specifier|inline
name|QStringList
operator|&
name|QListSpecialMethods
operator|<
name|QString
operator|>
operator|::
name|replaceInStrings
argument_list|(
argument|const QString&before
argument_list|,
argument|const QString&after
argument_list|,
argument|Qt::CaseSensitivity cs
argument_list|)
block|{
name|QtPrivate
operator|::
name|QStringList_replaceInStrings
argument_list|(
name|self
argument_list|()
argument_list|,
name|before
argument_list|,
name|after
argument_list|,
name|cs
argument_list|)
block|;
return|return
operator|*
name|self
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QStringList
name|operator
operator|+
operator|(
specifier|const
name|QList
operator|<
name|QString
operator|>
operator|&
name|one
operator|,
specifier|const
name|QStringList
operator|&
name|other
operator|)
block|{
name|QStringList
name|n
operator|=
name|one
block|;
name|n
operator|+=
name|other
block|;
return|return
name|n
return|;
block|}
end_expr_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_REGEXP
end_ifndef
begin_expr_stmt
DECL|function|replaceInStrings
specifier|inline
name|QStringList
operator|&
name|QListSpecialMethods
operator|<
name|QString
operator|>
operator|::
name|replaceInStrings
argument_list|(
argument|const QRegExp&rx
argument_list|,
argument|const QString&after
argument_list|)
block|{
name|QtPrivate
operator|::
name|QStringList_replaceInStrings
argument_list|(
name|self
argument_list|()
argument_list|,
name|rx
argument_list|,
name|after
argument_list|)
block|;
return|return
operator|*
name|self
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|filter
specifier|inline
name|QStringList
name|QListSpecialMethods
operator|<
name|QString
operator|>
operator|::
name|filter
argument_list|(
argument|const QRegExp&rx
argument_list|)
specifier|const
block|{
return|return
name|QtPrivate
operator|::
name|QStringList_filter
argument_list|(
name|self
argument_list|()
argument_list|,
name|rx
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|indexOf
specifier|inline
name|int
name|QStringList
operator|::
name|indexOf
argument_list|(
argument|const QRegExp&rx
argument_list|,
argument|int from
argument_list|)
specifier|const
block|{
return|return
name|QtPrivate
operator|::
name|QStringList_indexOf
argument_list|(
name|this
argument_list|,
name|rx
argument_list|,
name|from
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|lastIndexOf
specifier|inline
name|int
name|QStringList
operator|::
name|lastIndexOf
argument_list|(
argument|const QRegExp&rx
argument_list|,
argument|int from
argument_list|)
specifier|const
block|{
return|return
name|QtPrivate
operator|::
name|QStringList_lastIndexOf
argument_list|(
name|this
argument_list|,
name|rx
argument_list|,
name|from
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|indexOf
specifier|inline
name|int
name|QStringList
operator|::
name|indexOf
argument_list|(
argument|QRegExp&rx
argument_list|,
argument|int from
argument_list|)
specifier|const
block|{
return|return
name|QtPrivate
operator|::
name|QStringList_indexOf
argument_list|(
name|this
argument_list|,
name|rx
argument_list|,
name|from
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|lastIndexOf
specifier|inline
name|int
name|QStringList
operator|::
name|lastIndexOf
argument_list|(
argument|QRegExp&rx
argument_list|,
argument|int from
argument_list|)
specifier|const
block|{
return|return
name|QtPrivate
operator|::
name|QStringList_lastIndexOf
argument_list|(
name|this
argument_list|,
name|rx
argument_list|,
name|from
argument_list|)
return|;
block|}
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_BOOTSTRAPPED
end_ifndef
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_REGULAREXPRESSION
end_ifndef
begin_expr_stmt
DECL|function|replaceInStrings
specifier|inline
name|QStringList
operator|&
name|QListSpecialMethods
operator|<
name|QString
operator|>
operator|::
name|replaceInStrings
argument_list|(
argument|const QRegularExpression&rx
argument_list|,
argument|const QString&after
argument_list|)
block|{
name|QtPrivate
operator|::
name|QStringList_replaceInStrings
argument_list|(
name|self
argument_list|()
argument_list|,
name|rx
argument_list|,
name|after
argument_list|)
block|;
return|return
operator|*
name|self
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|filter
specifier|inline
name|QStringList
name|QListSpecialMethods
operator|<
name|QString
operator|>
operator|::
name|filter
argument_list|(
argument|const QRegularExpression&rx
argument_list|)
specifier|const
block|{
return|return
name|QtPrivate
operator|::
name|QStringList_filter
argument_list|(
name|self
argument_list|()
argument_list|,
name|rx
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|indexOf
specifier|inline
name|int
name|QStringList
operator|::
name|indexOf
argument_list|(
argument|const QRegularExpression&rx
argument_list|,
argument|int from
argument_list|)
specifier|const
block|{
return|return
name|QtPrivate
operator|::
name|QStringList_indexOf
argument_list|(
name|this
argument_list|,
name|rx
argument_list|,
name|from
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|lastIndexOf
specifier|inline
name|int
name|QStringList
operator|::
name|lastIndexOf
argument_list|(
argument|const QRegularExpression&rx
argument_list|,
argument|int from
argument_list|)
specifier|const
block|{
return|return
name|QtPrivate
operator|::
name|QStringList_lastIndexOf
argument_list|(
name|this
argument_list|,
name|rx
argument_list|,
name|from
argument_list|)
return|;
block|}
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_REGULAREXPRESSION
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_BOOTSTRAPPED
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QSTRINGLIST_H
end_comment
end_unit
