begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Ruslan Nigmatullin<euroelessar@yandex.ru> ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qmessageauthenticationcode.h"
end_include
begin_include
include|#
directive|include
file|"qvarlengtharray.h"
end_include
begin_comment
comment|/*     These #defines replace the typedefs needed by the RFC6234 code. Normally     the typedefs would come from from stdint.h, but since this header is not     available on all platforms (MSVC 2008, for example), we #define them to the     Qt equivalents. */
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|uint64_t
end_ifdef
begin_undef
DECL|macro|uint64_t
undef|#
directive|undef
name|uint64_t
end_undef
begin_endif
endif|#
directive|endif
end_endif
begin_define
DECL|macro|uint64_t
define|#
directive|define
name|uint64_t
value|QT_PREPEND_NAMESPACE(quint64)
end_define
begin_ifdef
ifdef|#
directive|ifdef
name|uint32_t
end_ifdef
begin_undef
DECL|macro|uint32_t
undef|#
directive|undef
name|uint32_t
end_undef
begin_endif
endif|#
directive|endif
end_endif
begin_define
DECL|macro|uint32_t
define|#
directive|define
name|uint32_t
value|QT_PREPEND_NAMESPACE(quint32)
end_define
begin_ifdef
ifdef|#
directive|ifdef
name|uint8_t
end_ifdef
begin_undef
DECL|macro|uint8_t
undef|#
directive|undef
name|uint8_t
end_undef
begin_endif
endif|#
directive|endif
end_endif
begin_define
DECL|macro|uint8_t
define|#
directive|define
name|uint8_t
value|QT_PREPEND_NAMESPACE(quint8)
end_define
begin_ifdef
ifdef|#
directive|ifdef
name|int_least16_t
end_ifdef
begin_undef
DECL|macro|int_least16_t
undef|#
directive|undef
name|int_least16_t
end_undef
begin_endif
endif|#
directive|endif
end_endif
begin_define
DECL|macro|int_least16_t
define|#
directive|define
name|int_least16_t
value|QT_PREPEND_NAMESPACE(qint16)
end_define
begin_comment
comment|// Header from rfc6234 with 1 modification:
end_comment
begin_comment
comment|// sha1.h - commented out '#include<stdint.h>' on line 74
end_comment
begin_include
include|#
directive|include
file|"../../3rdparty/rfc6234/sha.h"
end_include
begin_undef
DECL|macro|uint64_t
undef|#
directive|undef
name|uint64_t
end_undef
begin_undef
DECL|macro|uint32_t
undef|#
directive|undef
name|uint32_t
end_undef
begin_undef
DECL|macro|uint68_t
undef|#
directive|undef
name|uint68_t
end_undef
begin_undef
DECL|macro|int_least16_t
undef|#
directive|undef
name|int_least16_t
end_undef
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|qt_hash_block_size
specifier|static
name|int
name|qt_hash_block_size
parameter_list|(
name|QCryptographicHash
operator|::
name|Algorithm
name|method
parameter_list|)
block|{
switch|switch
condition|(
name|method
condition|)
block|{
case|case
name|QCryptographicHash
operator|::
name|Md4
case|:
return|return
literal|64
return|;
case|case
name|QCryptographicHash
operator|::
name|Md5
case|:
return|return
literal|64
return|;
case|case
name|QCryptographicHash
operator|::
name|Sha1
case|:
return|return
name|SHA1_Message_Block_Size
return|;
case|case
name|QCryptographicHash
operator|::
name|Sha224
case|:
return|return
name|SHA224_Message_Block_Size
return|;
case|case
name|QCryptographicHash
operator|::
name|Sha256
case|:
return|return
name|SHA256_Message_Block_Size
return|;
case|case
name|QCryptographicHash
operator|::
name|Sha384
case|:
return|return
name|SHA384_Message_Block_Size
return|;
case|case
name|QCryptographicHash
operator|::
name|Sha512
case|:
return|return
name|SHA512_Message_Block_Size
return|;
case|case
name|QCryptographicHash
operator|::
name|Sha3_224
case|:
return|return
literal|144
return|;
case|case
name|QCryptographicHash
operator|::
name|Sha3_256
case|:
return|return
literal|136
return|;
case|case
name|QCryptographicHash
operator|::
name|Sha3_384
case|:
return|return
literal|104
return|;
case|case
name|QCryptographicHash
operator|::
name|Sha3_512
case|:
return|return
literal|72
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_class
DECL|class|QMessageAuthenticationCodePrivate
class|class
name|QMessageAuthenticationCodePrivate
block|{
public|public:
DECL|function|QMessageAuthenticationCodePrivate
name|QMessageAuthenticationCodePrivate
parameter_list|(
name|QCryptographicHash
operator|::
name|Algorithm
name|m
parameter_list|)
member_init_list|:
name|messageHash
argument_list|(
name|m
argument_list|)
member_init_list|,
name|method
argument_list|(
name|m
argument_list|)
member_init_list|,
name|messageHashInited
argument_list|(
literal|false
argument_list|)
block|{     }
DECL|member|key
name|QByteArray
name|key
decl_stmt|;
DECL|member|result
name|QByteArray
name|result
decl_stmt|;
DECL|member|messageHash
name|QCryptographicHash
name|messageHash
decl_stmt|;
DECL|member|method
name|QCryptographicHash
operator|::
name|Algorithm
name|method
decl_stmt|;
DECL|member|messageHashInited
name|bool
name|messageHashInited
decl_stmt|;
name|void
name|initMessageHash
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|initMessageHash
name|void
name|QMessageAuthenticationCodePrivate
operator|::
name|initMessageHash
parameter_list|()
block|{
if|if
condition|(
name|messageHashInited
condition|)
return|return;
name|messageHashInited
operator|=
literal|true
expr_stmt|;
specifier|const
name|int
name|blockSize
init|=
name|qt_hash_block_size
argument_list|(
name|method
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|size
argument_list|()
operator|>
name|blockSize
condition|)
block|{
name|QCryptographicHash
name|hash
argument_list|(
name|method
argument_list|)
decl_stmt|;
name|hash
operator|.
name|addData
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|key
operator|=
name|hash
operator|.
name|result
argument_list|()
expr_stmt|;
name|hash
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|key
operator|.
name|size
argument_list|()
operator|<
name|blockSize
condition|)
block|{
specifier|const
name|int
name|size
init|=
name|key
operator|.
name|size
argument_list|()
decl_stmt|;
name|key
operator|.
name|resize
argument_list|(
name|blockSize
argument_list|)
expr_stmt|;
name|memset
argument_list|(
name|key
operator|.
name|data
argument_list|()
operator|+
name|size
argument_list|,
literal|0
argument_list|,
name|blockSize
operator|-
name|size
argument_list|)
expr_stmt|;
block|}
name|QVarLengthArray
argument_list|<
name|char
argument_list|>
name|iKeyPad
argument_list|(
name|blockSize
argument_list|)
decl_stmt|;
specifier|const
name|char
modifier|*
specifier|const
name|keyData
init|=
name|key
operator|.
name|constData
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|blockSize
condition|;
operator|++
name|i
control|)
name|iKeyPad
index|[
name|i
index|]
operator|=
name|keyData
index|[
name|i
index|]
operator|^
literal|0x36
expr_stmt|;
name|messageHash
operator|.
name|addData
argument_list|(
name|iKeyPad
operator|.
name|data
argument_list|()
argument_list|,
name|iKeyPad
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \class QMessageAuthenticationCode     \inmodule QtCore      \brief The QMessageAuthenticationCode class provides a way to generate     hash-based message authentication codes.      \since 5.1      \ingroup tools     \reentrant      QMessageAuthenticationCode supports all cryptographic hashes which are supported by     QCryptographicHash.      To generate message authentication code, pass hash algorithm QCryptographicHash::Algorithm     to constructor, then set key and message by setKey() and addData() functions. Result     can be acquired by result() function.     \snippet qmessageauthenticationcode/main.cpp 0     \dots     \snippet qmessageauthenticationcode/main.cpp 1      Alternatively, this effect can be achieved by providing message,     key and method to hash() method.     \snippet qmessageauthenticationcode/main.cpp 2      \sa QCryptographicHash */
end_comment
begin_comment
comment|/*!     Constructs an object that can be used to create a cryptographic hash from data     using method \a method and key \a key. */
end_comment
begin_constructor
DECL|function|QMessageAuthenticationCode
name|QMessageAuthenticationCode
operator|::
name|QMessageAuthenticationCode
parameter_list|(
name|QCryptographicHash
operator|::
name|Algorithm
name|method
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|key
parameter_list|)
member_init_list|:
name|d
argument_list|(
operator|new
name|QMessageAuthenticationCodePrivate
argument_list|(
name|method
argument_list|)
argument_list|)
block|{
name|d
operator|->
name|key
operator|=
name|key
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Destroys the object. */
end_comment
begin_destructor
DECL|function|~QMessageAuthenticationCode
name|QMessageAuthenticationCode
operator|::
name|~
name|QMessageAuthenticationCode
parameter_list|()
block|{
operator|delete
name|d
expr_stmt|;
block|}
end_destructor
begin_comment
comment|/*!     Resets message data. Calling this method doesn't affect the key. */
end_comment
begin_function
DECL|function|reset
name|void
name|QMessageAuthenticationCode
operator|::
name|reset
parameter_list|()
block|{
name|d
operator|->
name|result
operator|.
name|clear
argument_list|()
expr_stmt|;
name|d
operator|->
name|messageHash
operator|.
name|reset
argument_list|()
expr_stmt|;
name|d
operator|->
name|messageHashInited
operator|=
literal|false
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets secret \a key. Calling this method automatically resets the object state. */
end_comment
begin_function
DECL|function|setKey
name|void
name|QMessageAuthenticationCode
operator|::
name|setKey
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|key
parameter_list|)
block|{
name|reset
argument_list|()
expr_stmt|;
name|d
operator|->
name|key
operator|=
name|key
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Adds the first \a length chars of \a data to the message. */
end_comment
begin_function
DECL|function|addData
name|void
name|QMessageAuthenticationCode
operator|::
name|addData
parameter_list|(
specifier|const
name|char
modifier|*
name|data
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|d
operator|->
name|initMessageHash
argument_list|()
expr_stmt|;
name|d
operator|->
name|messageHash
operator|.
name|addData
argument_list|(
name|data
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \overload addData() */
end_comment
begin_function
DECL|function|addData
name|void
name|QMessageAuthenticationCode
operator|::
name|addData
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|data
parameter_list|)
block|{
name|d
operator|->
name|initMessageHash
argument_list|()
expr_stmt|;
name|d
operator|->
name|messageHash
operator|.
name|addData
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Reads the data from the open QIODevice \a device until it ends     and adds it to message. Returns \c true if reading was successful.      \note \a device must be already opened.  */
end_comment
begin_function
DECL|function|addData
name|bool
name|QMessageAuthenticationCode
operator|::
name|addData
parameter_list|(
name|QIODevice
modifier|*
name|device
parameter_list|)
block|{
name|d
operator|->
name|initMessageHash
argument_list|()
expr_stmt|;
return|return
name|d
operator|->
name|messageHash
operator|.
name|addData
argument_list|(
name|device
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the final authentication code.      \sa QByteArray::toHex() */
end_comment
begin_function
DECL|function|result
name|QByteArray
name|QMessageAuthenticationCode
operator|::
name|result
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|d
operator|->
name|result
return|;
name|d
operator|->
name|initMessageHash
argument_list|()
expr_stmt|;
specifier|const
name|int
name|blockSize
init|=
name|qt_hash_block_size
argument_list|(
name|d
operator|->
name|method
argument_list|)
decl_stmt|;
name|QByteArray
name|hashedMessage
init|=
name|d
operator|->
name|messageHash
operator|.
name|result
argument_list|()
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|char
argument_list|>
name|oKeyPad
argument_list|(
name|blockSize
argument_list|)
decl_stmt|;
specifier|const
name|char
modifier|*
specifier|const
name|keyData
init|=
name|d
operator|->
name|key
operator|.
name|constData
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|blockSize
condition|;
operator|++
name|i
control|)
name|oKeyPad
index|[
name|i
index|]
operator|=
name|keyData
index|[
name|i
index|]
operator|^
literal|0x5c
expr_stmt|;
name|QCryptographicHash
name|hash
argument_list|(
name|d
operator|->
name|method
argument_list|)
decl_stmt|;
name|hash
operator|.
name|addData
argument_list|(
name|oKeyPad
operator|.
name|data
argument_list|()
argument_list|,
name|oKeyPad
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|hash
operator|.
name|addData
argument_list|(
name|hashedMessage
argument_list|)
expr_stmt|;
name|d
operator|->
name|result
operator|=
name|hash
operator|.
name|result
argument_list|()
expr_stmt|;
return|return
name|d
operator|->
name|result
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the authentication code for the message \a message using     the key \a key and the method \a method. */
end_comment
begin_function
DECL|function|hash
name|QByteArray
name|QMessageAuthenticationCode
operator|::
name|hash
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|message
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|key
parameter_list|,
name|QCryptographicHash
operator|::
name|Algorithm
name|method
parameter_list|)
block|{
name|QMessageAuthenticationCode
name|mac
argument_list|(
name|method
argument_list|)
decl_stmt|;
name|mac
operator|.
name|setKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|mac
operator|.
name|addData
argument_list|(
name|message
argument_list|)
expr_stmt|;
return|return
name|mac
operator|.
name|result
argument_list|()
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
