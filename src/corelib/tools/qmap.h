begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QMAP_H
end_ifndef
begin_define
DECL|macro|QMAP_H
define|#
directive|define
name|QMAP_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qiterator.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qlist.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qrefcount.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qpair.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qtypetraits.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_MAP_DEBUG
end_ifdef
begin_include
include|#
directive|include
file|<QtCore/qdebug.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<map>
end_include
begin_include
include|#
directive|include
file|<new>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_COMPILER_INITIALIZER_LISTS
end_ifdef
begin_include
include|#
directive|include
file|<initializer_list>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
name|QT_BEGIN_NAMESPACE
comment|/*     QMap uses qMapLessThanKey() to compare keys. The default     implementation uses operator<(). For pointer types,     qMapLessThanKey() casts the pointers to integers before it     compares them, because operator<() is undefined on pointers     that come from different memory blocks. (In practice, this     is only a problem when running a program such as     BoundsChecker.) */
DECL|function|qMapLessThanKey
name|template
operator|<
name|class
name|Key
operator|>
specifier|inline
name|bool
name|qMapLessThanKey
argument_list|(
argument|const Key&key1
argument_list|,
argument|const Key&key2
argument_list|)
block|{
return|return
name|key1
operator|<
name|key2
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|qMapLessThanKey
name|template
operator|<
name|class
name|Ptr
operator|>
specifier|inline
name|bool
name|qMapLessThanKey
argument_list|(
argument|const Ptr *key1
argument_list|,
argument|const Ptr *key2
argument_list|)
block|{
name|Q_STATIC_ASSERT
argument_list|(
sizeof|sizeof
argument_list|(
name|quintptr
argument_list|)
operator|==
sizeof|sizeof
argument_list|(
specifier|const
name|Ptr
operator|*
argument_list|)
argument_list|)
block|;
return|return
name|quintptr
argument_list|(
name|key1
argument_list|)
operator|<
name|quintptr
argument_list|(
name|key2
argument_list|)
return|;
block|}
end_expr_stmt
begin_struct_decl
struct_decl|struct
name|QMapDataBase
struct_decl|;
end_struct_decl
begin_expr_stmt
DECL|variable|Key
name|template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
expr|struct
name|QMapData
expr_stmt|;
end_expr_stmt
begin_struct
DECL|struct|QMapNodeBase
struct|struct
name|Q_CORE_EXPORT
name|QMapNodeBase
block|{
DECL|member|p
name|quintptr
name|p
decl_stmt|;
DECL|member|left
name|QMapNodeBase
modifier|*
name|left
decl_stmt|;
DECL|member|right
name|QMapNodeBase
modifier|*
name|right
decl_stmt|;
DECL|enum|Color
DECL|enumerator|Red
DECL|enumerator|Black
enum|enum
name|Color
block|{
name|Red
init|=
literal|0
block|,
name|Black
init|=
literal|1
block|}
enum|;
DECL|enumerator|Mask
enum|enum
block|{
name|Mask
init|=
literal|3
block|}
enum|;
comment|// reserve the second bit as well
specifier|const
name|QMapNodeBase
operator|*
name|nextNode
argument_list|()
specifier|const
expr_stmt|;
DECL|function|nextNode
name|QMapNodeBase
modifier|*
name|nextNode
parameter_list|()
block|{
return|return
name|const_cast
operator|<
name|QMapNodeBase
operator|*
operator|>
operator|(
name|const_cast
operator|<
specifier|const
name|QMapNodeBase
operator|*
operator|>
operator|(
name|this
operator|)
operator|->
name|nextNode
argument_list|()
operator|)
return|;
block|}
specifier|const
name|QMapNodeBase
operator|*
name|previousNode
argument_list|()
specifier|const
expr_stmt|;
DECL|function|previousNode
name|QMapNodeBase
modifier|*
name|previousNode
parameter_list|()
block|{
return|return
name|const_cast
operator|<
name|QMapNodeBase
operator|*
operator|>
operator|(
name|const_cast
operator|<
specifier|const
name|QMapNodeBase
operator|*
operator|>
operator|(
name|this
operator|)
operator|->
name|previousNode
argument_list|()
operator|)
return|;
block|}
DECL|function|color
name|Color
name|color
argument_list|()
specifier|const
block|{
return|return
name|Color
argument_list|(
name|p
operator|&
literal|1
argument_list|)
return|;
block|}
DECL|function|setColor
name|void
name|setColor
parameter_list|(
name|Color
name|c
parameter_list|)
block|{
if|if
condition|(
name|c
operator|==
name|Black
condition|)
name|p
operator||=
name|Black
expr_stmt|;
else|else
name|p
operator|&=
operator|~
name|Black
expr_stmt|;
block|}
DECL|function|parent
name|QMapNodeBase
operator|*
name|parent
argument_list|()
specifier|const
block|{
return|return
name|reinterpret_cast
operator|<
name|QMapNodeBase
operator|*
operator|>
operator|(
name|p
operator|&
operator|~
name|Mask
operator|)
return|;
block|}
DECL|function|setParent
name|void
name|setParent
parameter_list|(
name|QMapNodeBase
modifier|*
name|pp
parameter_list|)
block|{
name|p
operator|=
operator|(
name|p
operator|&
name|Mask
operator|)
operator||
name|quintptr
argument_list|(
name|pp
argument_list|)
expr_stmt|;
block|}
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
name|typename
name|QtPrivate
operator|::
name|QEnableIf
operator|<
name|QTypeInfo
operator|<
name|T
operator|>
operator|::
name|isComplex
operator|>
operator|::
name|Type
name|callDestructorIfNecessary
argument_list|(
argument|T&t
argument_list|)
name|Q_DECL_NOTHROW
block|{
name|Q_UNUSED
argument_list|(
name|t
argument_list|)
block|;
name|t
operator|.
expr|~
name|T
argument_list|()
block|; }
comment|// Q_UNUSED: silence MSVC unused 't' warning
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
name|typename
name|QtPrivate
operator|::
name|QEnableIf
operator|<
operator|!
name|QTypeInfo
operator|<
name|T
operator|>
operator|::
name|isComplex
operator|>
operator|::
name|Type
name|callDestructorIfNecessary
argument_list|(
argument|T&
argument_list|)
name|Q_DECL_NOTHROW
block|{}
block|}
struct|;
end_struct
begin_expr_stmt
DECL|variable|Key
name|template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
expr|struct
DECL|struct|QMapNodeBase
name|QMapNode
operator|:
name|public
name|QMapNodeBase
block|{
DECL|member|key
name|Key
name|key
block|;
DECL|member|value
name|T
name|value
block|;
DECL|function|leftNode
specifier|inline
name|QMapNode
operator|*
name|leftNode
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
name|QMapNode
operator|*
operator|>
operator|(
name|left
operator|)
return|;
block|}
DECL|function|rightNode
specifier|inline
name|QMapNode
operator|*
name|rightNode
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
name|QMapNode
operator|*
operator|>
operator|(
name|right
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|nextNode
specifier|inline
specifier|const
name|QMapNode
operator|*
name|nextNode
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
specifier|const
name|QMapNode
operator|*
operator|>
operator|(
name|QMapNodeBase
operator|::
name|nextNode
argument_list|()
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|previousNode
specifier|inline
specifier|const
name|QMapNode
operator|*
name|previousNode
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
specifier|const
name|QMapNode
operator|*
operator|>
operator|(
name|QMapNodeBase
operator|::
name|previousNode
argument_list|()
operator|)
return|;
block|}
end_expr_stmt
begin_function
DECL|function|nextNode
specifier|inline
name|QMapNode
modifier|*
name|nextNode
parameter_list|()
block|{
return|return
name|static_cast
operator|<
name|QMapNode
operator|*
operator|>
operator|(
name|QMapNodeBase
operator|::
name|nextNode
argument_list|()
operator|)
return|;
block|}
end_function
begin_function
DECL|function|previousNode
specifier|inline
name|QMapNode
modifier|*
name|previousNode
parameter_list|()
block|{
return|return
name|static_cast
operator|<
name|QMapNode
operator|*
operator|>
operator|(
name|QMapNodeBase
operator|::
name|previousNode
argument_list|()
operator|)
return|;
block|}
end_function
begin_expr_stmt
DECL|member|Key
name|QMapNode
operator|<
name|Key
operator|,
name|T
operator|>
operator|*
name|copy
argument_list|(
argument|QMapData<Key
argument_list|,
argument|T> *d
argument_list|)
specifier|const
expr_stmt|;
end_expr_stmt
begin_function
DECL|function|destroySubTree
name|void
name|destroySubTree
parameter_list|()
block|{
name|callDestructorIfNecessary
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|callDestructorIfNecessary
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|doDestroySubTree
argument_list|(
name|QtPrivate
operator|::
name|integral_constant
operator|<
name|bool
argument_list|,
name|QTypeInfo
operator|<
name|T
operator|>
operator|::
name|isComplex
operator|||
name|QTypeInfo
operator|<
name|Key
operator|>
operator|::
name|isComplex
operator|>
operator|(
operator|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_expr_stmt
DECL|member|Key
name|QMapNode
operator|<
name|Key
operator|,
name|T
operator|>
operator|*
name|lowerBound
argument_list|(
specifier|const
name|Key
operator|&
name|key
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|member|Key
name|QMapNode
operator|<
name|Key
operator|,
name|T
operator|>
operator|*
name|upperBound
argument_list|(
specifier|const
name|Key
operator|&
name|key
argument_list|)
expr_stmt|;
end_expr_stmt
begin_label
DECL|member|private
name|private
label|:
end_label
begin_decl_stmt
name|void
name|doDestroySubTree
argument_list|(
name|QtPrivate
operator|::
name|false_type
argument_list|)
block|{}
end_decl_stmt
begin_decl_stmt
name|void
name|doDestroySubTree
argument_list|(
name|QtPrivate
operator|::
name|true_type
argument_list|)
block|{
if|if
condition|(
name|left
condition|)
name|leftNode
argument_list|()
operator|->
name|destroySubTree
argument_list|()
expr_stmt|;
if|if
condition|(
name|right
condition|)
name|rightNode
argument_list|()
operator|->
name|destroySubTree
argument_list|()
expr_stmt|;
block|}
end_decl_stmt
begin_macro
name|QMapNode
argument_list|()
end_macro
begin_expr_stmt
name|Q_DECL_EQ_DELETE
expr_stmt|;
end_expr_stmt
begin_macro
name|Q_DISABLE_COPY
argument_list|(
argument|QMapNode
argument_list|)
end_macro
begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
specifier|inline
name|QMapNode
operator|<
name|Key
operator|,
name|T
operator|>
operator|*
name|QMapNode
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|lowerBound
argument_list|(
argument|const Key&akey
argument_list|)
block|{
name|QMapNode
operator|<
name|Key
block|,
name|T
operator|>
operator|*
name|n
operator|=
name|this
block|;
name|QMapNode
operator|<
name|Key
block|,
name|T
operator|>
operator|*
name|lastNode
operator|=
name|Q_NULLPTR
block|;
while|while
condition|(
name|n
condition|)
block|{
if|if
condition|(
operator|!
name|qMapLessThanKey
argument_list|(
name|n
operator|->
name|key
argument_list|,
name|akey
argument_list|)
condition|)
block|{
name|lastNode
operator|=
name|n
expr_stmt|;
name|n
operator|=
name|n
operator|->
name|leftNode
argument_list|()
expr_stmt|;
block|}
end_expr_stmt
begin_else
else|else
block|{
name|n
operator|=
name|n
operator|->
name|rightNode
argument_list|()
expr_stmt|;
block|}
end_else
begin_expr_stmt
unit|}     return
name|lastNode
expr_stmt|;
end_expr_stmt
begin_expr_stmt
unit|}  template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
specifier|inline
name|QMapNode
operator|<
name|Key
operator|,
name|T
operator|>
operator|*
name|QMapNode
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|upperBound
argument_list|(
argument|const Key&akey
argument_list|)
block|{
name|QMapNode
operator|<
name|Key
block|,
name|T
operator|>
operator|*
name|n
operator|=
name|this
block|;
name|QMapNode
operator|<
name|Key
block|,
name|T
operator|>
operator|*
name|lastNode
operator|=
name|Q_NULLPTR
block|;
while|while
condition|(
name|n
condition|)
block|{
if|if
condition|(
name|qMapLessThanKey
argument_list|(
name|akey
argument_list|,
name|n
operator|->
name|key
argument_list|)
condition|)
block|{
name|lastNode
operator|=
name|n
expr_stmt|;
name|n
operator|=
name|n
operator|->
name|leftNode
argument_list|()
expr_stmt|;
block|}
end_expr_stmt
begin_else
else|else
block|{
name|n
operator|=
name|n
operator|->
name|rightNode
argument_list|()
expr_stmt|;
block|}
end_else
begin_expr_stmt
unit|}     return
name|lastNode
expr_stmt|;
end_expr_stmt
begin_decl_stmt
unit|}    struct
name|Q_CORE_EXPORT
name|QMapDataBase
block|{
name|QtPrivate
operator|::
name|RefCount
name|ref
expr_stmt|;
name|int
name|size
decl_stmt|;
name|QMapNodeBase
name|header
decl_stmt|;
name|QMapNodeBase
modifier|*
name|mostLeftNode
decl_stmt|;
name|void
name|rotateLeft
parameter_list|(
name|QMapNodeBase
modifier|*
name|x
parameter_list|)
function_decl|;
name|void
name|rotateRight
parameter_list|(
name|QMapNodeBase
modifier|*
name|x
parameter_list|)
function_decl|;
name|void
name|rebalance
parameter_list|(
name|QMapNodeBase
modifier|*
name|x
parameter_list|)
function_decl|;
name|void
name|freeNodeAndRebalance
parameter_list|(
name|QMapNodeBase
modifier|*
name|z
parameter_list|)
function_decl|;
name|void
name|recalcMostLeftNode
parameter_list|()
function_decl|;
name|QMapNodeBase
modifier|*
name|createNode
parameter_list|(
name|int
name|size
parameter_list|,
name|int
name|alignment
parameter_list|,
name|QMapNodeBase
modifier|*
name|parent
parameter_list|,
name|bool
name|left
parameter_list|)
function_decl|;
name|void
name|freeTree
parameter_list|(
name|QMapNodeBase
modifier|*
name|root
parameter_list|,
name|int
name|alignment
parameter_list|)
function_decl|;
specifier|static
specifier|const
name|QMapDataBase
name|shared_null
decl_stmt|;
specifier|static
name|QMapDataBase
modifier|*
name|createData
parameter_list|()
function_decl|;
specifier|static
name|void
name|freeData
parameter_list|(
name|QMapDataBase
modifier|*
name|d
parameter_list|)
function_decl|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_expr_stmt
name|template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
expr|struct
name|QMapData
operator|:
name|public
name|QMapDataBase
block|{
typedef|typedef
name|QMapNode
operator|<
name|Key
operator|,
name|T
operator|>
name|Node
expr_stmt|;
name|Node
operator|*
name|root
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|header
operator|.
name|left
operator|)
return|;
block|}
specifier|const
name|Node
operator|*
name|end
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
specifier|const
name|Node
operator|*
operator|>
operator|(
operator|&
name|header
operator|)
return|;
block|}
name|Node
operator|*
name|end
argument_list|()
block|{
return|return
name|static_cast
operator|<
name|Node
operator|*
operator|>
operator|(
operator|&
name|header
operator|)
return|;
block|}
specifier|const
name|Node
operator|*
name|begin
argument_list|()
specifier|const
block|{
if|if
condition|(
name|root
argument_list|()
condition|)
return|return
name|static_cast
operator|<
specifier|const
name|Node
operator|*
operator|>
operator|(
name|mostLeftNode
operator|)
return|;
end_expr_stmt
begin_return
return|return
name|end
argument_list|()
return|;
end_return
begin_expr_stmt
unit|}     Node
operator|*
name|begin
argument_list|()
block|{
if|if
condition|(
name|root
argument_list|()
condition|)
return|return
name|static_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|mostLeftNode
operator|)
return|;
end_expr_stmt
begin_return
return|return
name|end
argument_list|()
return|;
end_return
begin_expr_stmt
unit|}      void
name|deleteNode
argument_list|(
name|Node
operator|*
name|z
argument_list|)
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|Node
modifier|*
name|findNode
argument_list|(
specifier|const
name|Key
operator|&
name|akey
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_function_decl
name|void
name|nodeRange
parameter_list|(
specifier|const
name|Key
modifier|&
name|akey
parameter_list|,
name|Node
modifier|*
modifier|*
name|firstNode
parameter_list|,
name|Node
modifier|*
modifier|*
name|lastNode
parameter_list|)
function_decl|;
end_function_decl
begin_function
name|Node
modifier|*
name|createNode
parameter_list|(
specifier|const
name|Key
modifier|&
name|k
parameter_list|,
specifier|const
name|T
modifier|&
name|v
parameter_list|,
name|Node
modifier|*
name|parent
init|=
name|Q_NULLPTR
parameter_list|,
name|bool
name|left
init|=
name|false
parameter_list|)
block|{
name|Node
modifier|*
name|n
init|=
name|static_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|QMapDataBase
operator|::
name|createNode
argument_list|(
sizeof|sizeof
argument_list|(
name|Node
argument_list|)
argument_list|,
name|Q_ALIGNOF
argument_list|(
name|Node
argument_list|)
argument_list|,
name|parent
argument_list|,
name|left
argument_list|)
operator|)
decl_stmt|;
name|QT_TRY
block|{
name|new
argument_list|(
argument|&n->key
argument_list|)
name|Key
argument_list|(
name|k
argument_list|)
expr_stmt|;
name|QT_TRY
block|{
name|new
argument_list|(
argument|&n->value
argument_list|)
name|T
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
name|QT_CATCH
argument_list|(
argument|...
argument_list|)
block|{
name|n
operator|->
name|key
operator|.
expr|~
name|Key
argument_list|()
expr_stmt|;
name|QT_RETHROW
expr_stmt|;
block|}
block|}
name|QT_CATCH
argument_list|(
argument|...
argument_list|)
block|{
name|QMapDataBase
operator|::
name|freeNodeAndRebalance
argument_list|(
name|n
argument_list|)
expr_stmt|;
name|QT_RETHROW
expr_stmt|;
block|}
return|return
name|n
return|;
block|}
end_function
begin_function
specifier|static
name|QMapData
modifier|*
name|create
parameter_list|()
block|{
return|return
name|static_cast
operator|<
name|QMapData
operator|*
operator|>
operator|(
name|createData
argument_list|()
operator|)
return|;
block|}
end_function
begin_function
name|void
name|destroy
parameter_list|()
block|{
if|if
condition|(
name|root
argument_list|()
condition|)
block|{
name|root
argument_list|()
operator|->
name|destroySubTree
argument_list|()
expr_stmt|;
name|freeTree
argument_list|(
name|header
operator|.
name|left
argument_list|,
name|Q_ALIGNOF
argument_list|(
name|Node
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|freeData
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
end_function
begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
name|QMapNode
operator|<
name|Key
operator|,
name|T
operator|>
operator|*
name|QMapNode
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|copy
argument_list|(
argument|QMapData<Key
argument_list|,
argument|T> *d
argument_list|)
specifier|const
block|{
name|QMapNode
operator|<
name|Key
block|,
name|T
operator|>
operator|*
name|n
operator|=
name|d
operator|->
name|createNode
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
block|;
name|n
operator|->
name|setColor
argument_list|(
name|color
argument_list|()
argument_list|)
block|;
if|if
condition|(
name|left
condition|)
block|{
name|n
operator|->
name|left
operator|=
name|leftNode
argument_list|()
operator|->
name|copy
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|n
operator|->
name|left
operator|->
name|setParent
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_else
else|else
block|{
name|n
operator|->
name|left
operator|=
name|Q_NULLPTR
expr_stmt|;
block|}
end_else
begin_if
if|if
condition|(
name|right
condition|)
block|{
name|n
operator|->
name|right
operator|=
name|rightNode
argument_list|()
operator|->
name|copy
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|n
operator|->
name|right
operator|->
name|setParent
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|n
operator|->
name|right
operator|=
name|Q_NULLPTR
expr_stmt|;
block|}
end_if
begin_return
return|return
name|n
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
name|void
name|QMapData
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|deleteNode
argument_list|(
argument|QMapNode<Key
argument_list|,
argument|T> *z
argument_list|)
block|{
name|QMapNodeBase
operator|::
name|callDestructorIfNecessary
argument_list|(
name|z
operator|->
name|key
argument_list|)
block|;
name|QMapNodeBase
operator|::
name|callDestructorIfNecessary
argument_list|(
name|z
operator|->
name|value
argument_list|)
block|;
name|freeNodeAndRebalance
argument_list|(
name|z
argument_list|)
block|; }
name|template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
name|QMapNode
operator|<
name|Key
operator|,
name|T
operator|>
operator|*
name|QMapData
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|findNode
argument_list|(
argument|const Key&akey
argument_list|)
specifier|const
block|{
if|if
condition|(
name|Node
modifier|*
name|r
init|=
name|root
argument_list|()
condition|)
block|{
name|Node
modifier|*
name|lb
init|=
name|r
operator|->
name|lowerBound
argument_list|(
name|akey
argument_list|)
decl_stmt|;
if|if
condition|(
name|lb
operator|&&
operator|!
name|qMapLessThanKey
argument_list|(
name|akey
argument_list|,
name|lb
operator|->
name|key
argument_list|)
condition|)
return|return
name|lb
return|;
block|}
end_expr_stmt
begin_return
return|return
name|Q_NULLPTR
return|;
end_return
begin_expr_stmt
unit|}   template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
name|void
name|QMapData
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|nodeRange
argument_list|(
argument|const Key&akey
argument_list|,
argument|QMapNode<Key
argument_list|,
argument|T> **firstNode
argument_list|,
argument|QMapNode<Key
argument_list|,
argument|T> **lastNode
argument_list|)
block|{
name|Node
operator|*
name|n
operator|=
name|root
argument_list|()
block|;
name|Node
operator|*
name|l
operator|=
name|end
argument_list|()
block|;
while|while
condition|(
name|n
condition|)
block|{
if|if
condition|(
name|qMapLessThanKey
argument_list|(
name|akey
argument_list|,
name|n
operator|->
name|key
argument_list|)
condition|)
block|{
name|l
operator|=
name|n
expr_stmt|;
name|n
operator|=
name|n
operator|->
name|leftNode
argument_list|()
expr_stmt|;
block|}
end_expr_stmt
begin_elseif
elseif|else
if|if
condition|(
name|qMapLessThanKey
argument_list|(
name|n
operator|->
name|key
argument_list|,
name|akey
argument_list|)
condition|)
block|{
name|n
operator|=
name|n
operator|->
name|rightNode
argument_list|()
expr_stmt|;
block|}
end_elseif
begin_else
else|else
block|{
operator|*
name|firstNode
operator|=
name|n
operator|->
name|leftNode
argument_list|()
condition|?
name|n
operator|->
name|leftNode
argument_list|()
operator|->
name|lowerBound
argument_list|(
name|akey
argument_list|)
else|:
name|Q_NULLPTR
expr_stmt|;
if|if
condition|(
operator|!
operator|*
name|firstNode
condition|)
operator|*
name|firstNode
operator|=
name|n
expr_stmt|;
operator|*
name|lastNode
operator|=
name|n
operator|->
name|rightNode
argument_list|()
condition|?
name|n
operator|->
name|rightNode
argument_list|()
operator|->
name|upperBound
argument_list|(
name|akey
argument_list|)
else|:
name|Q_NULLPTR
expr_stmt|;
if|if
condition|(
operator|!
operator|*
name|lastNode
condition|)
operator|*
name|lastNode
operator|=
name|l
expr_stmt|;
return|return;
block|}
end_else
begin_expr_stmt
unit|}     *
name|firstNode
operator|=
operator|*
name|lastNode
operator|=
name|l
expr_stmt|;
end_expr_stmt
begin_expr_stmt
unit|}   template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
name|class
name|QMap
block|{
typedef|typedef
name|QMapNode
operator|<
name|Key
operator|,
name|T
operator|>
name|Node
expr_stmt|;
name|QMapData
operator|<
name|Key
operator|,
name|T
operator|>
operator|*
name|d
expr_stmt|;
end_expr_stmt
begin_label
name|public
label|:
end_label
begin_expr_stmt
specifier|inline
name|QMap
argument_list|()
operator|:
name|d
argument_list|(
argument|static_cast<QMapData<Key
argument_list|,
argument|T> *>(const_cast<QMapDataBase *>(&QMapDataBase::shared_null))
argument_list|)
block|{ }
ifdef|#
directive|ifdef
name|Q_COMPILER_INITIALIZER_LISTS
specifier|inline
name|QMap
argument_list|(
name|std
operator|::
name|initializer_list
operator|<
name|std
operator|::
name|pair
operator|<
name|Key
argument_list|,
name|T
operator|>
expr|>
name|list
argument_list|)
operator|:
name|d
argument_list|(
argument|static_cast<QMapData<Key
argument_list|,
argument|T> *>(const_cast<QMapDataBase *>(&QMapDataBase::shared_null))
argument_list|)
block|{
for|for
control|(
name|typename
name|std
operator|::
name|initializer_list
operator|<
name|std
operator|::
name|pair
operator|<
name|Key
operator|,
name|T
operator|>
expr|>
operator|::
name|const_iterator
name|it
operator|=
name|list
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|list
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
name|insert
argument_list|(
name|it
operator|->
name|first
argument_list|,
name|it
operator|->
name|second
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
name|QMap
argument_list|(
specifier|const
name|QMap
operator|<
name|Key
argument_list|,
name|T
operator|>
operator|&
name|other
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
specifier|inline
operator|~
name|QMap
argument_list|()
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|ref
operator|.
name|deref
argument_list|()
condition|)
name|d
operator|->
name|destroy
argument_list|()
expr_stmt|;
block|}
end_expr_stmt
begin_expr_stmt
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|&
name|operator
operator|=
operator|(
specifier|const
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|&
name|other
operator|)
expr_stmt|;
end_expr_stmt
begin_ifdef
ifdef|#
directive|ifdef
name|Q_COMPILER_RVALUE_REFS
end_ifdef
begin_expr_stmt
specifier|inline
name|QMap
argument_list|(
name|QMap
operator|<
name|Key
argument_list|,
name|T
operator|>
operator|&&
name|other
argument_list|)
operator|:
name|d
argument_list|(
argument|other.d
argument_list|)
block|{
name|other
operator|.
name|d
operator|=
name|static_cast
operator|<
name|QMapData
operator|<
name|Key
block|,
name|T
operator|>
operator|*
operator|>
operator|(
name|const_cast
operator|<
name|QMapDataBase
operator|*
operator|>
operator|(
operator|&
name|QMapDataBase
operator|::
name|shared_null
operator|)
operator|)
block|;     }
specifier|inline
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|&
name|operator
operator|=
operator|(
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|&&
name|other
operator|)
block|{
name|qSwap
argument_list|(
name|d
argument_list|,
name|other
operator|.
name|d
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
specifier|inline
name|void
name|swap
argument_list|(
name|QMap
operator|<
name|Key
argument_list|,
name|T
operator|>
operator|&
name|other
argument_list|)
block|{
name|qSwap
argument_list|(
name|d
argument_list|,
name|other
operator|.
name|d
argument_list|)
expr_stmt|;
block|}
end_decl_stmt
begin_decl_stmt
name|explicit
name|QMap
argument_list|(
specifier|const
name|typename
name|std
operator|::
name|map
operator|<
name|Key
argument_list|,
name|T
operator|>
operator|&
name|other
argument_list|)
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|std
operator|::
name|map
operator|<
name|Key
operator|,
name|T
operator|>
name|toStdMap
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|&
name|other
operator|)
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|&
name|other
operator|)
specifier|const
block|{
return|return
operator|!
operator|(
operator|*
name|this
operator|==
name|other
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|int
name|size
argument_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|size
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|isEmpty
argument_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|size
operator|==
literal|0
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|void
name|detach
parameter_list|()
block|{
if|if
condition|(
name|d
operator|->
name|ref
operator|.
name|isShared
argument_list|()
condition|)
name|detach_helper
argument_list|()
expr_stmt|;
block|}
end_function
begin_expr_stmt
specifier|inline
name|bool
name|isDetached
argument_list|()
specifier|const
block|{
return|return
operator|!
name|d
operator|->
name|ref
operator|.
name|isShared
argument_list|()
return|;
block|}
end_expr_stmt
begin_if
if|#
directive|if
name|QT_SUPPORTS
argument_list|(
name|UNSHARABLE_CONTAINERS
argument_list|)
end_if
begin_function
specifier|inline
name|void
name|setSharable
parameter_list|(
name|bool
name|sharable
parameter_list|)
block|{
if|if
condition|(
name|sharable
operator|==
name|d
operator|->
name|ref
operator|.
name|isSharable
argument_list|()
condition|)
return|return;
if|if
condition|(
operator|!
name|sharable
condition|)
name|detach
argument_list|()
expr_stmt|;
comment|// Don't call on shared_null
name|d
operator|->
name|ref
operator|.
name|setSharable
argument_list|(
name|sharable
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
specifier|inline
name|bool
name|isSharedWith
argument_list|(
specifier|const
name|QMap
operator|<
name|Key
argument_list|,
name|T
operator|>
operator|&
name|other
argument_list|)
decl|const
block|{
return|return
name|d
operator|==
name|other
operator|.
name|d
return|;
block|}
end_decl_stmt
begin_function_decl
name|void
name|clear
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|int
name|remove
parameter_list|(
specifier|const
name|Key
modifier|&
name|key
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|T
name|take
parameter_list|(
specifier|const
name|Key
modifier|&
name|key
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
name|bool
name|contains
argument_list|(
specifier|const
name|Key
operator|&
name|key
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|const
name|Key
name|key
argument_list|(
specifier|const
name|T
operator|&
name|value
argument_list|,
specifier|const
name|Key
operator|&
name|defaultKey
operator|=
name|Key
argument_list|()
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|const
name|T
name|value
argument_list|(
specifier|const
name|Key
operator|&
name|key
argument_list|,
specifier|const
name|T
operator|&
name|defaultValue
operator|=
name|T
argument_list|()
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_function_decl
name|T
modifier|&
name|operator
function_decl|[]
parameter_list|(
specifier|const
name|Key
modifier|&
name|key
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
specifier|const
name|T
name|operator
index|[]
argument_list|(
specifier|const
name|Key
operator|&
name|key
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|QList
operator|<
name|Key
operator|>
name|uniqueKeys
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QList
operator|<
name|Key
operator|>
name|keys
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QList
operator|<
name|Key
operator|>
name|keys
argument_list|(
argument|const T&value
argument_list|)
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QList
operator|<
name|T
operator|>
name|values
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QList
operator|<
name|T
operator|>
name|values
argument_list|(
argument|const Key&key
argument_list|)
specifier|const
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|int
name|count
argument_list|(
specifier|const
name|Key
operator|&
name|key
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_expr_stmt
specifier|inline
specifier|const
name|Key
operator|&
name|firstKey
argument_list|()
specifier|const
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|isEmpty
argument_list|()
argument_list|)
block|;
return|return
name|constBegin
argument_list|()
operator|.
name|key
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
specifier|const
name|Key
operator|&
name|lastKey
argument_list|()
specifier|const
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|isEmpty
argument_list|()
argument_list|)
block|;
return|return
operator|(
name|constEnd
argument_list|()
operator|-
literal|1
operator|)
operator|.
name|key
argument_list|()
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|T
modifier|&
name|first
parameter_list|()
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|*
name|begin
argument_list|()
return|;
block|}
end_function
begin_expr_stmt
specifier|inline
specifier|const
name|T
operator|&
name|first
argument_list|()
specifier|const
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|isEmpty
argument_list|()
argument_list|)
block|;
return|return
operator|*
name|constBegin
argument_list|()
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|T
modifier|&
name|last
parameter_list|()
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|*
operator|(
name|end
argument_list|()
operator|-
literal|1
operator|)
return|;
block|}
end_function
begin_expr_stmt
specifier|inline
specifier|const
name|T
operator|&
name|last
argument_list|()
specifier|const
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|isEmpty
argument_list|()
argument_list|)
block|;
return|return
operator|*
operator|(
name|constEnd
argument_list|()
operator|-
literal|1
operator|)
return|;
block|}
end_expr_stmt
begin_decl_stmt
name|class
name|const_iterator
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|iterator
block|{
name|friend
name|class
name|const_iterator
decl_stmt|;
name|Node
modifier|*
name|i
decl_stmt|;
name|public
label|:
typedef|typedef
name|std
operator|::
name|bidirectional_iterator_tag
name|iterator_category
expr_stmt|;
typedef|typedef
name|qptrdiff
name|difference_type
typedef|;
typedef|typedef
name|T
name|value_type
typedef|;
typedef|typedef
name|T
modifier|*
name|pointer
typedef|;
typedef|typedef
name|T
modifier|&
name|reference
typedef|;
specifier|inline
name|iterator
argument_list|()
operator|:
name|i
argument_list|(
argument|Q_NULLPTR
argument_list|)
block|{ }
specifier|inline
name|iterator
argument_list|(
name|Node
operator|*
name|node
argument_list|)
operator|:
name|i
argument_list|(
argument|node
argument_list|)
block|{ }
specifier|inline
specifier|const
name|Key
operator|&
name|key
argument_list|()
specifier|const
block|{
return|return
name|i
operator|->
name|key
return|;
block|}
specifier|inline
name|T
operator|&
name|value
argument_list|()
specifier|const
block|{
return|return
name|i
operator|->
name|value
return|;
block|}
specifier|inline
name|T
operator|&
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
name|i
operator|->
name|value
return|;
block|}
specifier|inline
name|T
operator|*
name|operator
operator|->
expr|(
block|)
decl|const
block|{
return|return
operator|&
name|i
operator|->
name|value
return|;
block|}
end_decl_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|iterator
operator|&
name|o
operator|)
specifier|const
block|{
return|return
name|i
operator|==
name|o
operator|.
name|i
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|iterator
operator|&
name|o
operator|)
specifier|const
block|{
return|return
name|i
operator|!=
name|o
operator|.
name|i
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|iterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
name|i
operator|=
name|i
operator|->
name|nextNode
argument_list|()
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|iterator
name|operator
operator|++
operator|(
name|int
operator|)
block|{
name|iterator
name|r
operator|=
operator|*
name|this
block|;
name|i
operator|=
name|i
operator|->
name|nextNode
argument_list|()
block|;
return|return
name|r
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|iterator
operator|&
name|operator
operator|--
operator|(
operator|)
block|{
name|i
operator|=
name|i
operator|->
name|previousNode
argument_list|()
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|iterator
name|operator
operator|--
operator|(
name|int
operator|)
block|{
name|iterator
name|r
operator|=
operator|*
name|this
block|;
name|i
operator|=
name|i
operator|->
name|previousNode
argument_list|()
block|;
return|return
name|r
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|iterator
name|operator
operator|+
operator|(
name|int
name|j
operator|)
specifier|const
block|{
name|iterator
name|r
operator|=
operator|*
name|this
block|;
if|if
condition|(
name|j
operator|>
literal|0
condition|)
while|while
condition|(
name|j
operator|--
condition|)
operator|++
name|r
expr_stmt|;
else|else
while|while
condition|(
name|j
operator|++
condition|)
operator|--
name|r
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|r
return|;
end_return
begin_expr_stmt
unit|}         inline
name|iterator
name|operator
operator|-
operator|(
name|int
name|j
operator|)
specifier|const
block|{
return|return
name|operator
operator|+
operator|(
operator|-
name|j
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|iterator
operator|&
name|operator
operator|+=
operator|(
name|int
name|j
operator|)
block|{
return|return
operator|*
name|this
operator|=
operator|*
name|this
operator|+
name|j
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|iterator
operator|&
name|operator
operator|-=
operator|(
name|int
name|j
operator|)
block|{
return|return
operator|*
name|this
operator|=
operator|*
name|this
operator|-
name|j
return|;
block|}
end_expr_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_STRICT_ITERATORS
end_ifndef
begin_label
name|public
label|:
end_label
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|const_iterator
operator|&
name|o
operator|)
specifier|const
block|{
return|return
name|i
operator|==
name|o
operator|.
name|i
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|const_iterator
operator|&
name|o
operator|)
specifier|const
block|{
return|return
name|i
operator|!=
name|o
operator|.
name|i
return|;
block|}
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
name|friend
name|class
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
expr_stmt|;
end_expr_stmt
begin_decl_stmt
unit|};
name|friend
name|class
name|iterator
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|const_iterator
block|{
name|friend
name|class
name|iterator
decl_stmt|;
specifier|const
name|Node
modifier|*
name|i
decl_stmt|;
name|public
label|:
typedef|typedef
name|std
operator|::
name|bidirectional_iterator_tag
name|iterator_category
expr_stmt|;
typedef|typedef
name|qptrdiff
name|difference_type
typedef|;
typedef|typedef
name|T
name|value_type
typedef|;
typedef|typedef
specifier|const
name|T
modifier|*
name|pointer
typedef|;
typedef|typedef
specifier|const
name|T
modifier|&
name|reference
typedef|;
specifier|inline
name|const_iterator
argument_list|()
operator|:
name|i
argument_list|(
argument|Q_NULLPTR
argument_list|)
block|{ }
specifier|inline
name|const_iterator
argument_list|(
specifier|const
name|Node
operator|*
name|node
argument_list|)
operator|:
name|i
argument_list|(
argument|node
argument_list|)
block|{ }
ifdef|#
directive|ifdef
name|QT_STRICT_ITERATORS
name|explicit
specifier|inline
name|const_iterator
argument_list|(
argument|const iterator&o
argument_list|)
else|#
directive|else
specifier|inline
name|const_iterator
argument_list|(
argument|const iterator&o
argument_list|)
endif|#
directive|endif
block|{
name|i
operator|=
name|o
operator|.
name|i
block|; }
specifier|inline
specifier|const
name|Key
operator|&
name|key
argument_list|()
specifier|const
block|{
return|return
name|i
operator|->
name|key
return|;
block|}
specifier|inline
specifier|const
name|T
operator|&
name|value
argument_list|()
specifier|const
block|{
return|return
name|i
operator|->
name|value
return|;
block|}
specifier|inline
specifier|const
name|T
operator|&
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
name|i
operator|->
name|value
return|;
block|}
specifier|inline
specifier|const
name|T
operator|*
name|operator
operator|->
expr|(
block|)
decl|const
block|{
return|return
operator|&
name|i
operator|->
name|value
return|;
block|}
end_decl_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|const_iterator
operator|&
name|o
operator|)
specifier|const
block|{
return|return
name|i
operator|==
name|o
operator|.
name|i
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|const_iterator
operator|&
name|o
operator|)
specifier|const
block|{
return|return
name|i
operator|!=
name|o
operator|.
name|i
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|const_iterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
name|i
operator|=
name|i
operator|->
name|nextNode
argument_list|()
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|const_iterator
name|operator
operator|++
operator|(
name|int
operator|)
block|{
name|const_iterator
name|r
operator|=
operator|*
name|this
block|;
name|i
operator|=
name|i
operator|->
name|nextNode
argument_list|()
block|;
return|return
name|r
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|const_iterator
operator|&
name|operator
operator|--
operator|(
operator|)
block|{
name|i
operator|=
name|i
operator|->
name|previousNode
argument_list|()
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|const_iterator
name|operator
operator|--
operator|(
name|int
operator|)
block|{
name|const_iterator
name|r
operator|=
operator|*
name|this
block|;
name|i
operator|=
name|i
operator|->
name|previousNode
argument_list|()
block|;
return|return
name|r
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|const_iterator
name|operator
operator|+
operator|(
name|int
name|j
operator|)
specifier|const
block|{
name|const_iterator
name|r
operator|=
operator|*
name|this
block|;
if|if
condition|(
name|j
operator|>
literal|0
condition|)
while|while
condition|(
name|j
operator|--
condition|)
operator|++
name|r
expr_stmt|;
else|else
while|while
condition|(
name|j
operator|++
condition|)
operator|--
name|r
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|r
return|;
end_return
begin_expr_stmt
unit|}         inline
name|const_iterator
name|operator
operator|-
operator|(
name|int
name|j
operator|)
specifier|const
block|{
return|return
name|operator
operator|+
operator|(
operator|-
name|j
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|const_iterator
operator|&
name|operator
operator|+=
operator|(
name|int
name|j
operator|)
block|{
return|return
operator|*
name|this
operator|=
operator|*
name|this
operator|+
name|j
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|const_iterator
operator|&
name|operator
operator|-=
operator|(
name|int
name|j
operator|)
block|{
return|return
operator|*
name|this
operator|=
operator|*
name|this
operator|-
name|j
return|;
block|}
end_expr_stmt
begin_ifdef
ifdef|#
directive|ifdef
name|QT_STRICT_ITERATORS
end_ifdef
begin_label
name|private
label|:
end_label
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|iterator
operator|&
name|o
operator|)
specifier|const
block|{
return|return
name|operator
operator|==
operator|(
name|const_iterator
argument_list|(
name|o
argument_list|)
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|iterator
operator|&
name|o
operator|)
specifier|const
block|{
return|return
name|operator
operator|!=
operator|(
name|const_iterator
argument_list|(
name|o
argument_list|)
operator|)
return|;
block|}
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
name|friend
name|class
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
expr_stmt|;
end_expr_stmt
begin_decl_stmt
unit|};
name|friend
name|class
name|const_iterator
decl_stmt|;
end_decl_stmt
begin_comment
comment|// STL style
end_comment
begin_function
specifier|inline
name|iterator
name|begin
parameter_list|()
block|{
name|detach
argument_list|()
expr_stmt|;
return|return
name|iterator
argument_list|(
name|d
operator|->
name|begin
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_expr_stmt
specifier|inline
name|const_iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
name|const_iterator
argument_list|(
name|d
operator|->
name|begin
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|const_iterator
name|constBegin
argument_list|()
specifier|const
block|{
return|return
name|const_iterator
argument_list|(
name|d
operator|->
name|begin
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|const_iterator
name|cbegin
argument_list|()
specifier|const
block|{
return|return
name|const_iterator
argument_list|(
name|d
operator|->
name|begin
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|iterator
name|end
parameter_list|()
block|{
name|detach
argument_list|()
expr_stmt|;
return|return
name|iterator
argument_list|(
name|d
operator|->
name|end
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_expr_stmt
specifier|inline
name|const_iterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|const_iterator
argument_list|(
name|d
operator|->
name|end
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|const_iterator
name|constEnd
argument_list|()
specifier|const
block|{
return|return
name|const_iterator
argument_list|(
name|d
operator|->
name|end
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|const_iterator
name|cend
argument_list|()
specifier|const
block|{
return|return
name|const_iterator
argument_list|(
name|d
operator|->
name|end
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt
begin_function_decl
name|iterator
name|erase
parameter_list|(
name|iterator
name|it
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|// more Qt
end_comment
begin_typedef
typedef|typedef
name|iterator
name|Iterator
typedef|;
end_typedef
begin_typedef
typedef|typedef
name|const_iterator
name|ConstIterator
typedef|;
end_typedef
begin_expr_stmt
specifier|inline
name|int
name|count
argument_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|size
return|;
block|}
end_expr_stmt
begin_function_decl
name|iterator
name|find
parameter_list|(
specifier|const
name|Key
modifier|&
name|key
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
name|const_iterator
name|find
argument_list|(
specifier|const
name|Key
operator|&
name|key
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|const_iterator
name|constFind
argument_list|(
specifier|const
name|Key
operator|&
name|key
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_function_decl
name|iterator
name|lowerBound
parameter_list|(
specifier|const
name|Key
modifier|&
name|key
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
name|const_iterator
name|lowerBound
argument_list|(
specifier|const
name|Key
operator|&
name|key
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_function_decl
name|iterator
name|upperBound
parameter_list|(
specifier|const
name|Key
modifier|&
name|key
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
name|const_iterator
name|upperBound
argument_list|(
specifier|const
name|Key
operator|&
name|key
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_function_decl
name|iterator
name|insert
parameter_list|(
specifier|const
name|Key
modifier|&
name|key
parameter_list|,
specifier|const
name|T
modifier|&
name|value
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|iterator
name|insert
parameter_list|(
name|const_iterator
name|pos
parameter_list|,
specifier|const
name|Key
modifier|&
name|key
parameter_list|,
specifier|const
name|T
modifier|&
name|value
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|iterator
name|insertMulti
parameter_list|(
specifier|const
name|Key
modifier|&
name|key
parameter_list|,
specifier|const
name|T
modifier|&
name|value
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|iterator
name|insertMulti
parameter_list|(
name|const_iterator
name|pos
parameter_list|,
specifier|const
name|Key
modifier|&
name|akey
parameter_list|,
specifier|const
name|T
modifier|&
name|avalue
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|&
name|unite
argument_list|(
specifier|const
name|QMap
operator|<
name|Key
argument_list|,
name|T
operator|>
operator|&
name|other
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// STL compatibility
end_comment
begin_typedef
typedef|typedef
name|Key
name|key_type
typedef|;
end_typedef
begin_typedef
typedef|typedef
name|T
name|mapped_type
typedef|;
end_typedef
begin_typedef
typedef|typedef
name|qptrdiff
name|difference_type
typedef|;
end_typedef
begin_typedef
typedef|typedef
name|int
name|size_type
typedef|;
end_typedef
begin_expr_stmt
specifier|inline
name|bool
name|empty
argument_list|()
specifier|const
block|{
return|return
name|isEmpty
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|QPair
operator|<
name|iterator
operator|,
name|iterator
operator|>
name|equal_range
argument_list|(
specifier|const
name|Key
operator|&
name|akey
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QPair
operator|<
name|const_iterator
operator|,
name|const_iterator
operator|>
name|equal_range
argument_list|(
argument|const Key&akey
argument_list|)
specifier|const
expr_stmt|;
end_expr_stmt
begin_ifdef
ifdef|#
directive|ifdef
name|Q_MAP_DEBUG
end_ifdef
begin_expr_stmt
name|void
name|dump
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_label
name|private
label|:
end_label
begin_function_decl
name|void
name|detach_helper
parameter_list|()
function_decl|;
end_function_decl
begin_decl_stmt
name|bool
name|isValidIterator
argument_list|(
specifier|const
name|const_iterator
operator|&
name|ci
argument_list|)
decl|const
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_DEBUG
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_MAP_NO_ITERATOR_DEBUG
argument_list|)
specifier|const
name|QMapNodeBase
modifier|*
name|n
init|=
name|ci
operator|.
name|i
decl_stmt|;
while|while
condition|(
name|n
operator|->
name|parent
argument_list|()
condition|)
name|n
operator|=
name|n
operator|->
name|parent
argument_list|()
expr_stmt|;
return|return
name|n
operator|->
name|left
operator|==
name|d
operator|->
name|root
argument_list|()
return|;
else|#
directive|else
name|Q_UNUSED
argument_list|(
name|ci
argument_list|)
expr_stmt|;
return|return
name|true
return|;
endif|#
directive|endif
block|}
end_decl_stmt
begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
specifier|inline
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|QMap
argument_list|(
argument|const QMap<Key
argument_list|,
argument|T>&other
argument_list|)
block|{
if|if
condition|(
name|other
operator|.
name|d
operator|->
name|ref
operator|.
name|ref
argument_list|()
condition|)
block|{
name|d
operator|=
name|other
operator|.
name|d
expr_stmt|;
block|}
end_expr_stmt
begin_else
else|else
block|{
name|d
operator|=
name|QMapData
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|create
argument_list|()
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|d
operator|->
name|header
operator|.
name|left
condition|)
block|{
name|d
operator|->
name|header
operator|.
name|left
operator|=
name|static_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|other
operator|.
name|d
operator|->
name|header
operator|.
name|left
operator|)
operator|->
name|copy
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|d
operator|->
name|header
operator|.
name|left
operator|->
name|setParent
argument_list|(
operator|&
name|d
operator|->
name|header
argument_list|)
expr_stmt|;
name|d
operator|->
name|recalcMostLeftNode
argument_list|()
expr_stmt|;
block|}
block|}
end_else
begin_expr_stmt
unit|}  template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
name|Q_INLINE_TEMPLATE
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|&
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|operator
operator|=
operator|(
specifier|const
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|&
name|other
operator|)
block|{
if|if
condition|(
name|d
operator|!=
name|other
operator|.
name|d
condition|)
block|{
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
name|tmp
argument_list|(
name|other
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|swap
argument_list|(
operator|*
name|this
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_return
return|return
operator|*
name|this
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
name|Q_INLINE_TEMPLATE
name|void
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|clear
argument_list|()
block|{
operator|*
name|this
operator|=
name|QMap
operator|<
name|Key
block|,
name|T
operator|>
operator|(
operator|)
block|; }
name|template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
name|Q_INLINE_TEMPLATE
specifier|const
name|T
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|value
argument_list|(
argument|const Key&akey
argument_list|,
argument|const T&adefaultValue
argument_list|)
specifier|const
block|{
name|Node
operator|*
name|n
operator|=
name|d
operator|->
name|findNode
argument_list|(
name|akey
argument_list|)
block|;
return|return
name|n
condition|?
name|n
operator|->
name|value
else|:
name|adefaultValue
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
name|Q_INLINE_TEMPLATE
specifier|const
name|T
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|operator
index|[]
operator|(
specifier|const
name|Key
operator|&
name|akey
operator|)
specifier|const
block|{
return|return
name|value
argument_list|(
name|akey
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
name|Q_INLINE_TEMPLATE
name|T
operator|&
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|operator
index|[]
operator|(
specifier|const
name|Key
operator|&
name|akey
operator|)
block|{
name|detach
argument_list|()
block|;
name|Node
operator|*
name|n
operator|=
name|d
operator|->
name|findNode
argument_list|(
name|akey
argument_list|)
block|;
if|if
condition|(
operator|!
name|n
condition|)
return|return
operator|*
name|insert
argument_list|(
name|akey
argument_list|,
name|T
argument_list|()
argument_list|)
return|;
end_expr_stmt
begin_return
return|return
name|n
operator|->
name|value
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
name|Q_INLINE_TEMPLATE
name|int
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|count
argument_list|(
argument|const Key&akey
argument_list|)
specifier|const
block|{
name|Node
operator|*
name|firstNode
block|;
name|Node
operator|*
name|lastNode
block|;
name|d
operator|->
name|nodeRange
argument_list|(
name|akey
argument_list|,
operator|&
name|firstNode
argument_list|,
operator|&
name|lastNode
argument_list|)
block|;
name|const_iterator
name|ci_first
argument_list|(
name|firstNode
argument_list|)
block|;
specifier|const
name|const_iterator
name|ci_last
argument_list|(
name|lastNode
argument_list|)
block|;
name|int
name|cnt
operator|=
literal|0
block|;
while|while
condition|(
name|ci_first
operator|!=
name|ci_last
condition|)
block|{
operator|++
name|cnt
expr_stmt|;
operator|++
name|ci_first
expr_stmt|;
block|}
end_expr_stmt
begin_return
return|return
name|cnt
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
name|Q_INLINE_TEMPLATE
name|bool
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|contains
argument_list|(
argument|const Key&akey
argument_list|)
specifier|const
block|{
return|return
name|d
operator|->
name|findNode
argument_list|(
name|akey
argument_list|)
operator|!=
name|Q_NULLPTR
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
name|Q_INLINE_TEMPLATE
name|typename
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|iterator
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|insert
argument_list|(
argument|const Key&akey
argument_list|,
argument|const T&avalue
argument_list|)
block|{
name|detach
argument_list|()
block|;
name|Node
operator|*
name|n
operator|=
name|d
operator|->
name|root
argument_list|()
block|;
name|Node
operator|*
name|y
operator|=
name|d
operator|->
name|end
argument_list|()
block|;
name|Node
operator|*
name|lastNode
operator|=
name|Q_NULLPTR
block|;
name|bool
name|left
operator|=
name|true
block|;
while|while
condition|(
name|n
condition|)
block|{
name|y
operator|=
name|n
expr_stmt|;
if|if
condition|(
operator|!
name|qMapLessThanKey
argument_list|(
name|n
operator|->
name|key
argument_list|,
name|akey
argument_list|)
condition|)
block|{
name|lastNode
operator|=
name|n
expr_stmt|;
name|left
operator|=
name|true
expr_stmt|;
name|n
operator|=
name|n
operator|->
name|leftNode
argument_list|()
expr_stmt|;
block|}
end_expr_stmt
begin_else
else|else
block|{
name|left
operator|=
name|false
expr_stmt|;
name|n
operator|=
name|n
operator|->
name|rightNode
argument_list|()
expr_stmt|;
block|}
end_else
begin_expr_stmt
unit|}     if
operator|(
name|lastNode
operator|&&
operator|!
name|qMapLessThanKey
argument_list|(
name|akey
argument_list|,
name|lastNode
operator|->
name|key
argument_list|)
operator|)
block|{
name|lastNode
operator|->
name|value
operator|=
name|avalue
block|;
return|return
name|iterator
argument_list|(
name|lastNode
argument_list|)
return|;
block|}
end_expr_stmt
begin_decl_stmt
name|Node
modifier|*
name|z
init|=
name|d
operator|->
name|createNode
argument_list|(
name|akey
argument_list|,
name|avalue
argument_list|,
name|y
argument_list|,
name|left
argument_list|)
decl_stmt|;
end_decl_stmt
begin_return
return|return
name|iterator
argument_list|(
name|z
argument_list|)
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
name|typename
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|iterator
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|insert
argument_list|(
argument|const_iterator pos
argument_list|,
argument|const Key&akey
argument_list|,
argument|const T&avalue
argument_list|)
block|{
if|if
condition|(
name|d
operator|->
name|ref
operator|.
name|isShared
argument_list|()
condition|)
return|return
name|this
operator|->
name|insert
argument_list|(
name|akey
argument_list|,
name|avalue
argument_list|)
return|;
name|Q_ASSERT_X
argument_list|(
name|isValidIterator
argument_list|(
name|pos
argument_list|)
argument_list|,
literal|"QMap::insert"
argument_list|,
literal|"The specified const_iterator argument 'it' is invalid"
argument_list|)
expr_stmt|;
end_expr_stmt
begin_if
if|if
condition|(
name|pos
operator|==
name|constEnd
argument_list|()
condition|)
block|{
comment|// Hint is that the Node is larger than (or equal to) the largest value.
name|Node
modifier|*
name|n
init|=
name|static_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|pos
operator|.
name|i
operator|->
name|left
operator|)
decl_stmt|;
if|if
condition|(
name|n
condition|)
block|{
while|while
condition|(
name|n
operator|->
name|right
condition|)
name|n
operator|=
name|static_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|n
operator|->
name|right
operator|)
expr_stmt|;
if|if
condition|(
operator|!
name|qMapLessThanKey
argument_list|(
name|n
operator|->
name|key
argument_list|,
name|akey
argument_list|)
condition|)
return|return
name|this
operator|->
name|insert
argument_list|(
name|akey
argument_list|,
name|avalue
argument_list|)
return|;
comment|// ignore hint
comment|// This can be optimized by checking equal too.
comment|// we can overwrite if previous node key is strictly smaller
comment|// (or there is no previous node)
name|Node
modifier|*
name|z
init|=
name|d
operator|->
name|createNode
argument_list|(
name|akey
argument_list|,
name|avalue
argument_list|,
name|n
argument_list|,
name|false
argument_list|)
decl_stmt|;
comment|// insert right most
return|return
name|iterator
argument_list|(
name|z
argument_list|)
return|;
block|}
return|return
name|this
operator|->
name|insert
argument_list|(
name|akey
argument_list|,
name|avalue
argument_list|)
return|;
block|}
else|else
block|{
comment|// Hint indicates that the node should be less (or equal to) the hint given
comment|// but larger than the previous value.
name|Node
modifier|*
name|next
init|=
name|const_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|pos
operator|.
name|i
operator|)
decl_stmt|;
if|if
condition|(
name|qMapLessThanKey
argument_list|(
name|next
operator|->
name|key
argument_list|,
name|akey
argument_list|)
condition|)
return|return
name|this
operator|->
name|insert
argument_list|(
name|akey
argument_list|,
name|avalue
argument_list|)
return|;
comment|// ignore hint
if|if
condition|(
name|pos
operator|==
name|constBegin
argument_list|()
condition|)
block|{
comment|// There is no previous value
comment|// Maybe overwrite left most value
if|if
condition|(
operator|!
name|qMapLessThanKey
argument_list|(
name|akey
argument_list|,
name|next
operator|->
name|key
argument_list|)
condition|)
block|{
name|next
operator|->
name|value
operator|=
name|avalue
expr_stmt|;
comment|// overwrite current iterator
return|return
name|iterator
argument_list|(
name|next
argument_list|)
return|;
block|}
comment|// insert left most.
name|Node
modifier|*
name|z
init|=
name|d
operator|->
name|createNode
argument_list|(
name|akey
argument_list|,
name|avalue
argument_list|,
name|begin
argument_list|()
operator|.
name|i
argument_list|,
name|true
argument_list|)
decl_stmt|;
return|return
name|iterator
argument_list|(
name|z
argument_list|)
return|;
block|}
else|else
block|{
name|Node
modifier|*
name|prev
init|=
name|const_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|pos
operator|.
name|i
operator|->
name|previousNode
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|qMapLessThanKey
argument_list|(
name|prev
operator|->
name|key
argument_list|,
name|akey
argument_list|)
condition|)
block|{
return|return
name|this
operator|->
name|insert
argument_list|(
name|akey
argument_list|,
name|avalue
argument_list|)
return|;
comment|// ignore hint
block|}
comment|// Hint is ok
if|if
condition|(
operator|!
name|qMapLessThanKey
argument_list|(
name|akey
argument_list|,
name|next
operator|->
name|key
argument_list|)
condition|)
block|{
name|next
operator|->
name|value
operator|=
name|avalue
expr_stmt|;
comment|// overwrite current iterator
return|return
name|iterator
argument_list|(
name|next
argument_list|)
return|;
block|}
comment|// we need to insert (not overwrite)
if|if
condition|(
name|prev
operator|->
name|right
operator|==
name|Q_NULLPTR
condition|)
block|{
name|Node
modifier|*
name|z
init|=
name|d
operator|->
name|createNode
argument_list|(
name|akey
argument_list|,
name|avalue
argument_list|,
name|prev
argument_list|,
name|false
argument_list|)
decl_stmt|;
return|return
name|iterator
argument_list|(
name|z
argument_list|)
return|;
block|}
if|if
condition|(
name|next
operator|->
name|left
operator|==
name|Q_NULLPTR
condition|)
block|{
name|Node
modifier|*
name|z
init|=
name|d
operator|->
name|createNode
argument_list|(
name|akey
argument_list|,
name|avalue
argument_list|,
name|next
argument_list|,
name|true
argument_list|)
decl_stmt|;
return|return
name|iterator
argument_list|(
name|z
argument_list|)
return|;
block|}
name|Q_ASSERT
argument_list|(
name|false
argument_list|)
expr_stmt|;
comment|// We should have prev->right == Q_NULLPTR or next->left == Q_NULLPTR.
return|return
name|this
operator|->
name|insert
argument_list|(
name|akey
argument_list|,
name|avalue
argument_list|)
return|;
block|}
block|}
end_if
begin_expr_stmt
unit|}  template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
name|Q_INLINE_TEMPLATE
name|typename
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|iterator
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|insertMulti
argument_list|(
argument|const Key&akey
argument_list|,
argument|const T&avalue
argument_list|)
block|{
name|detach
argument_list|()
block|;
name|Node
operator|*
name|y
operator|=
name|d
operator|->
name|end
argument_list|()
block|;
name|Node
operator|*
name|x
operator|=
name|static_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|d
operator|->
name|root
argument_list|()
operator|)
block|;
name|bool
name|left
operator|=
name|true
block|;
while|while
condition|(
name|x
operator|!=
name|Q_NULLPTR
condition|)
block|{
name|left
operator|=
operator|!
name|qMapLessThanKey
argument_list|(
name|x
operator|->
name|key
argument_list|,
name|akey
argument_list|)
expr_stmt|;
name|y
operator|=
name|x
expr_stmt|;
name|x
operator|=
name|left
condition|?
name|x
operator|->
name|leftNode
argument_list|()
else|:
name|x
operator|->
name|rightNode
argument_list|()
expr_stmt|;
block|}
name|Node
operator|*
name|z
operator|=
name|d
operator|->
name|createNode
argument_list|(
name|akey
argument_list|,
name|avalue
argument_list|,
name|y
argument_list|,
name|left
argument_list|)
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|iterator
argument_list|(
name|z
argument_list|)
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
name|typename
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|iterator
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|insertMulti
argument_list|(
argument|const_iterator pos
argument_list|,
argument|const Key&akey
argument_list|,
argument|const T&avalue
argument_list|)
block|{
if|if
condition|(
name|d
operator|->
name|ref
operator|.
name|isShared
argument_list|()
condition|)
return|return
name|this
operator|->
name|insertMulti
argument_list|(
name|akey
argument_list|,
name|avalue
argument_list|)
return|;
name|Q_ASSERT_X
argument_list|(
name|isValidIterator
argument_list|(
name|pos
argument_list|)
argument_list|,
literal|"QMap::insertMulti"
argument_list|,
literal|"The specified const_iterator argument 'pos' is invalid"
argument_list|)
expr_stmt|;
end_expr_stmt
begin_if
if|if
condition|(
name|pos
operator|==
name|constEnd
argument_list|()
condition|)
block|{
comment|// Hint is that the Node is larger than (or equal to) the largest value.
name|Node
modifier|*
name|n
init|=
name|static_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|pos
operator|.
name|i
operator|->
name|left
operator|)
decl_stmt|;
if|if
condition|(
name|n
condition|)
block|{
while|while
condition|(
name|n
operator|->
name|right
condition|)
name|n
operator|=
name|static_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|n
operator|->
name|right
operator|)
expr_stmt|;
if|if
condition|(
operator|!
name|qMapLessThanKey
argument_list|(
name|n
operator|->
name|key
argument_list|,
name|akey
argument_list|)
condition|)
return|return
name|this
operator|->
name|insertMulti
argument_list|(
name|akey
argument_list|,
name|avalue
argument_list|)
return|;
comment|// ignore hint
name|Node
modifier|*
name|z
init|=
name|d
operator|->
name|createNode
argument_list|(
name|akey
argument_list|,
name|avalue
argument_list|,
name|n
argument_list|,
name|false
argument_list|)
decl_stmt|;
comment|// insert right most
return|return
name|iterator
argument_list|(
name|z
argument_list|)
return|;
block|}
return|return
name|this
operator|->
name|insertMulti
argument_list|(
name|akey
argument_list|,
name|avalue
argument_list|)
return|;
block|}
else|else
block|{
comment|// Hint indicates that the node should be less (or equal to) the hint given
comment|// but larger than the previous value.
name|Node
modifier|*
name|next
init|=
name|const_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|pos
operator|.
name|i
operator|)
decl_stmt|;
if|if
condition|(
name|qMapLessThanKey
argument_list|(
name|next
operator|->
name|key
argument_list|,
name|akey
argument_list|)
condition|)
return|return
name|this
operator|->
name|insertMulti
argument_list|(
name|akey
argument_list|,
name|avalue
argument_list|)
return|;
comment|// ignore hint
if|if
condition|(
name|pos
operator|==
name|constBegin
argument_list|()
condition|)
block|{
comment|// There is no previous value (insert left most)
name|Node
modifier|*
name|z
init|=
name|d
operator|->
name|createNode
argument_list|(
name|akey
argument_list|,
name|avalue
argument_list|,
name|begin
argument_list|()
operator|.
name|i
argument_list|,
name|true
argument_list|)
decl_stmt|;
return|return
name|iterator
argument_list|(
name|z
argument_list|)
return|;
block|}
else|else
block|{
name|Node
modifier|*
name|prev
init|=
name|const_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|pos
operator|.
name|i
operator|->
name|previousNode
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|qMapLessThanKey
argument_list|(
name|prev
operator|->
name|key
argument_list|,
name|akey
argument_list|)
condition|)
return|return
name|this
operator|->
name|insertMulti
argument_list|(
name|akey
argument_list|,
name|avalue
argument_list|)
return|;
comment|// ignore hint
comment|// Hint is ok - do insert
if|if
condition|(
name|prev
operator|->
name|right
operator|==
name|Q_NULLPTR
condition|)
block|{
name|Node
modifier|*
name|z
init|=
name|d
operator|->
name|createNode
argument_list|(
name|akey
argument_list|,
name|avalue
argument_list|,
name|prev
argument_list|,
name|false
argument_list|)
decl_stmt|;
return|return
name|iterator
argument_list|(
name|z
argument_list|)
return|;
block|}
if|if
condition|(
name|next
operator|->
name|left
operator|==
name|Q_NULLPTR
condition|)
block|{
name|Node
modifier|*
name|z
init|=
name|d
operator|->
name|createNode
argument_list|(
name|akey
argument_list|,
name|avalue
argument_list|,
name|next
argument_list|,
name|true
argument_list|)
decl_stmt|;
return|return
name|iterator
argument_list|(
name|z
argument_list|)
return|;
block|}
name|Q_ASSERT
argument_list|(
name|false
argument_list|)
expr_stmt|;
comment|// We should have prev->right == Q_NULLPTR or next->left == Q_NULLPTR.
return|return
name|this
operator|->
name|insertMulti
argument_list|(
name|akey
argument_list|,
name|avalue
argument_list|)
return|;
block|}
block|}
end_if
begin_expr_stmt
unit|}   template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
name|Q_INLINE_TEMPLATE
name|typename
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|const_iterator
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|constFind
argument_list|(
argument|const Key&akey
argument_list|)
specifier|const
block|{
name|Node
operator|*
name|n
operator|=
name|d
operator|->
name|findNode
argument_list|(
name|akey
argument_list|)
block|;
return|return
name|const_iterator
argument_list|(
name|n
condition|?
name|n
else|:
name|d
operator|->
name|end
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
name|Q_INLINE_TEMPLATE
name|typename
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|const_iterator
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|find
argument_list|(
argument|const Key&akey
argument_list|)
specifier|const
block|{
return|return
name|constFind
argument_list|(
name|akey
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
name|Q_INLINE_TEMPLATE
name|typename
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|iterator
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|find
argument_list|(
argument|const Key&akey
argument_list|)
block|{
name|detach
argument_list|()
block|;
name|Node
operator|*
name|n
operator|=
name|d
operator|->
name|findNode
argument_list|(
name|akey
argument_list|)
block|;
return|return
name|iterator
argument_list|(
name|n
condition|?
name|n
else|:
name|d
operator|->
name|end
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
name|Q_INLINE_TEMPLATE
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|&
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|unite
argument_list|(
argument|const QMap<Key
argument_list|,
argument|T>&other
argument_list|)
block|{
name|QMap
operator|<
name|Key
block|,
name|T
operator|>
name|copy
argument_list|(
name|other
argument_list|)
block|;
name|const_iterator
name|it
operator|=
name|copy
operator|.
name|constEnd
argument_list|()
block|;
specifier|const
name|const_iterator
name|b
operator|=
name|copy
operator|.
name|constBegin
argument_list|()
block|;
while|while
condition|(
name|it
operator|!=
name|b
condition|)
block|{
operator|--
name|it
expr_stmt|;
name|insertMulti
argument_list|(
name|it
operator|.
name|key
argument_list|()
argument_list|,
name|it
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_return
return|return
operator|*
name|this
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
name|QPair
operator|<
name|typename
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|iterator
operator|,
name|typename
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|iterator
operator|>
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|equal_range
argument_list|(
argument|const Key&akey
argument_list|)
block|{
name|detach
argument_list|()
block|;
name|Node
operator|*
name|firstNode
block|,
operator|*
name|lastNode
block|;
name|d
operator|->
name|nodeRange
argument_list|(
name|akey
argument_list|,
operator|&
name|firstNode
argument_list|,
operator|&
name|lastNode
argument_list|)
block|;
return|return
name|QPair
operator|<
name|iterator
operator|,
name|iterator
operator|>
operator|(
name|iterator
argument_list|(
name|firstNode
argument_list|)
operator|,
name|iterator
argument_list|(
name|lastNode
argument_list|)
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
name|QPair
operator|<
name|typename
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|const_iterator
operator|,
name|typename
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|const_iterator
operator|>
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|equal_range
argument_list|(
argument|const Key&akey
argument_list|)
specifier|const
block|{
name|Node
operator|*
name|firstNode
block|,
operator|*
name|lastNode
block|;
name|d
operator|->
name|nodeRange
argument_list|(
name|akey
argument_list|,
operator|&
name|firstNode
argument_list|,
operator|&
name|lastNode
argument_list|)
block|;
return|return
name|qMakePair
argument_list|(
name|const_iterator
argument_list|(
name|firstNode
argument_list|)
argument_list|,
name|const_iterator
argument_list|(
name|lastNode
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt
begin_ifdef
ifdef|#
directive|ifdef
name|Q_MAP_DEBUG
end_ifdef
begin_expr_stmt
name|template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
name|void
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|dump
argument_list|()
specifier|const
block|{
name|const_iterator
name|it
operator|=
name|begin
argument_list|()
block|;
name|qDebug
argument_list|()
operator|<<
literal|"map dump:"
block|;
while|while
condition|(
name|it
operator|!=
name|end
argument_list|()
condition|)
block|{
specifier|const
name|QMapNodeBase
modifier|*
name|n
init|=
name|it
operator|.
name|i
decl_stmt|;
name|int
name|depth
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|n
operator|&&
name|n
operator|!=
name|d
operator|->
name|root
argument_list|()
condition|)
block|{
operator|++
name|depth
expr_stmt|;
name|n
operator|=
name|n
operator|->
name|parent
argument_list|()
expr_stmt|;
block|}
name|QByteArray
name|space
argument_list|(
literal|4
operator|*
name|depth
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|qDebug
argument_list|()
operator|<<
name|space
operator|<<
operator|(
name|it
operator|.
name|i
operator|->
name|color
argument_list|()
operator|==
name|Node
operator|::
name|Red
condition|?
literal|"Red  "
else|:
literal|"Black"
operator|)
operator|<<
name|it
operator|.
name|i
operator|<<
name|it
operator|.
name|i
operator|->
name|left
operator|<<
name|it
operator|.
name|i
operator|->
name|right
operator|<<
name|it
operator|.
name|key
argument_list|()
operator|<<
name|it
operator|.
name|value
argument_list|()
expr_stmt|;
end_expr_stmt
begin_expr_stmt
operator|++
name|it
expr_stmt|;
end_expr_stmt
begin_expr_stmt
unit|}     qDebug
operator|(
operator|)
operator|<<
literal|"---------"
expr_stmt|;
end_expr_stmt
begin_endif
unit|}
endif|#
directive|endif
end_endif
begin_expr_stmt
unit|template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
name|Q_OUTOFLINE_TEMPLATE
name|int
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|remove
argument_list|(
argument|const Key&akey
argument_list|)
block|{
name|detach
argument_list|()
block|;
name|int
name|n
operator|=
literal|0
block|;
while|while
condition|(
name|Node
modifier|*
name|node
init|=
name|d
operator|->
name|findNode
argument_list|(
name|akey
argument_list|)
condition|)
block|{
name|d
operator|->
name|deleteNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
operator|++
name|n
expr_stmt|;
block|}
end_expr_stmt
begin_return
return|return
name|n
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
name|Q_OUTOFLINE_TEMPLATE
name|T
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|take
argument_list|(
argument|const Key&akey
argument_list|)
block|{
name|detach
argument_list|()
block|;
name|Node
operator|*
name|node
operator|=
name|d
operator|->
name|findNode
argument_list|(
name|akey
argument_list|)
block|;
if|if
condition|(
name|node
condition|)
block|{
name|T
name|t
init|=
name|node
operator|->
name|value
decl_stmt|;
name|d
operator|->
name|deleteNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
return|return
name|t
return|;
block|}
end_expr_stmt
begin_return
return|return
name|T
argument_list|()
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
name|Q_OUTOFLINE_TEMPLATE
name|typename
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|iterator
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|erase
argument_list|(
argument|iterator it
argument_list|)
block|{
if|if
condition|(
name|it
operator|==
name|iterator
argument_list|(
name|d
operator|->
name|end
argument_list|()
argument_list|)
condition|)
return|return
name|it
return|;
name|Q_ASSERT_X
argument_list|(
name|isValidIterator
argument_list|(
name|const_iterator
argument_list|(
name|it
argument_list|)
argument_list|)
argument_list|,
literal|"QMap::erase"
argument_list|,
literal|"The specified iterator argument 'it' is invalid"
argument_list|)
expr_stmt|;
end_expr_stmt
begin_if
if|if
condition|(
name|d
operator|->
name|ref
operator|.
name|isShared
argument_list|()
condition|)
block|{
name|const_iterator
name|oldBegin
init|=
name|constBegin
argument_list|()
decl_stmt|;
name|const_iterator
name|old
init|=
name|const_iterator
argument_list|(
name|it
argument_list|)
decl_stmt|;
name|int
name|backStepsWithSameKey
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|old
operator|!=
name|oldBegin
condition|)
block|{
operator|--
name|old
expr_stmt|;
if|if
condition|(
name|qMapLessThanKey
argument_list|(
name|old
operator|.
name|key
argument_list|()
argument_list|,
name|it
operator|.
name|key
argument_list|()
argument_list|)
condition|)
break|break;
operator|++
name|backStepsWithSameKey
expr_stmt|;
block|}
name|it
operator|=
name|find
argument_list|(
name|old
operator|.
name|key
argument_list|()
argument_list|)
expr_stmt|;
comment|// ensures detach
name|Q_ASSERT_X
argument_list|(
name|it
operator|!=
name|iterator
argument_list|(
name|d
operator|->
name|end
argument_list|()
argument_list|)
argument_list|,
literal|"QMap::erase"
argument_list|,
literal|"Unable to locate same key in erase after detach."
argument_list|)
expr_stmt|;
while|while
condition|(
name|backStepsWithSameKey
operator|>
literal|0
condition|)
block|{
operator|++
name|it
expr_stmt|;
operator|--
name|backStepsWithSameKey
expr_stmt|;
block|}
block|}
end_if
begin_decl_stmt
name|Node
modifier|*
name|n
init|=
name|it
operator|.
name|i
decl_stmt|;
end_decl_stmt
begin_expr_stmt
operator|++
name|it
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|d
operator|->
name|deleteNode
argument_list|(
name|n
argument_list|)
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|it
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
name|Q_OUTOFLINE_TEMPLATE
name|void
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|detach_helper
argument_list|()
block|{
name|QMapData
operator|<
name|Key
block|,
name|T
operator|>
operator|*
name|x
operator|=
name|QMapData
operator|<
name|Key
block|,
name|T
operator|>
operator|::
name|create
argument_list|()
block|;
if|if
condition|(
name|d
operator|->
name|header
operator|.
name|left
condition|)
block|{
name|x
operator|->
name|header
operator|.
name|left
operator|=
name|static_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|d
operator|->
name|header
operator|.
name|left
operator|)
operator|->
name|copy
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|x
operator|->
name|header
operator|.
name|left
operator|->
name|setParent
argument_list|(
operator|&
name|x
operator|->
name|header
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_if
if|if
condition|(
operator|!
name|d
operator|->
name|ref
operator|.
name|deref
argument_list|()
condition|)
name|d
operator|->
name|destroy
argument_list|()
expr_stmt|;
end_if
begin_expr_stmt
name|d
operator|=
name|x
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|d
operator|->
name|recalcMostLeftNode
argument_list|()
expr_stmt|;
end_expr_stmt
begin_expr_stmt
unit|}  template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
name|Q_OUTOFLINE_TEMPLATE
name|QList
operator|<
name|Key
operator|>
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|uniqueKeys
argument_list|()
specifier|const
block|{
name|QList
operator|<
name|Key
operator|>
name|res
block|;
name|res
operator|.
name|reserve
argument_list|(
name|size
argument_list|()
argument_list|)
block|;
comment|// May be too much, but assume short lifetime
name|const_iterator
name|i
operator|=
name|begin
argument_list|()
block|;
if|if
condition|(
name|i
operator|!=
name|end
argument_list|()
condition|)
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
specifier|const
name|Key
modifier|&
name|aKey
init|=
name|i
operator|.
name|key
argument_list|()
decl_stmt|;
name|res
operator|.
name|append
argument_list|(
name|aKey
argument_list|)
expr_stmt|;
do|do
block|{
if|if
condition|(
operator|++
name|i
operator|==
name|end
argument_list|()
condition|)
goto|goto
name|break_out_of_outer_loop
goto|;
block|}
end_expr_stmt
begin_while
while|while
condition|(
operator|!
name|qMapLessThanKey
argument_list|(
name|aKey
argument_list|,
name|i
operator|.
name|key
argument_list|()
argument_list|)
condition|)
empty_stmt|;
end_while
begin_comment
comment|// loop while (key == i.key())
end_comment
begin_label
unit|}     }
name|break_out_of_outer_loop
label|:
end_label
begin_return
return|return
name|res
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
name|Q_OUTOFLINE_TEMPLATE
name|QList
operator|<
name|Key
operator|>
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|keys
argument_list|()
specifier|const
block|{
name|QList
operator|<
name|Key
operator|>
name|res
block|;
name|res
operator|.
name|reserve
argument_list|(
name|size
argument_list|()
argument_list|)
block|;
name|const_iterator
name|i
operator|=
name|begin
argument_list|()
block|;
while|while
condition|(
name|i
operator|!=
name|end
argument_list|()
condition|)
block|{
name|res
operator|.
name|append
argument_list|(
name|i
operator|.
name|key
argument_list|()
argument_list|)
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
end_expr_stmt
begin_return
return|return
name|res
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
name|Q_OUTOFLINE_TEMPLATE
name|QList
operator|<
name|Key
operator|>
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|keys
argument_list|(
argument|const T&avalue
argument_list|)
specifier|const
block|{
name|QList
operator|<
name|Key
operator|>
name|res
block|;
name|const_iterator
name|i
operator|=
name|begin
argument_list|()
block|;
while|while
condition|(
name|i
operator|!=
name|end
argument_list|()
condition|)
block|{
if|if
condition|(
name|i
operator|.
name|value
argument_list|()
operator|==
name|avalue
condition|)
name|res
operator|.
name|append
argument_list|(
name|i
operator|.
name|key
argument_list|()
argument_list|)
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
end_expr_stmt
begin_return
return|return
name|res
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
name|Q_OUTOFLINE_TEMPLATE
specifier|const
name|Key
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|key
argument_list|(
argument|const T&avalue
argument_list|,
argument|const Key&defaultKey
argument_list|)
specifier|const
block|{
name|const_iterator
name|i
operator|=
name|begin
argument_list|()
block|;
while|while
condition|(
name|i
operator|!=
name|end
argument_list|()
condition|)
block|{
if|if
condition|(
name|i
operator|.
name|value
argument_list|()
operator|==
name|avalue
condition|)
return|return
name|i
operator|.
name|key
argument_list|()
return|;
operator|++
name|i
expr_stmt|;
block|}
end_expr_stmt
begin_return
return|return
name|defaultKey
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
name|Q_OUTOFLINE_TEMPLATE
name|QList
operator|<
name|T
operator|>
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|values
argument_list|()
specifier|const
block|{
name|QList
operator|<
name|T
operator|>
name|res
block|;
name|res
operator|.
name|reserve
argument_list|(
name|size
argument_list|()
argument_list|)
block|;
name|const_iterator
name|i
operator|=
name|begin
argument_list|()
block|;
while|while
condition|(
name|i
operator|!=
name|end
argument_list|()
condition|)
block|{
name|res
operator|.
name|append
argument_list|(
name|i
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
end_expr_stmt
begin_return
return|return
name|res
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
name|Q_OUTOFLINE_TEMPLATE
name|QList
operator|<
name|T
operator|>
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|values
argument_list|(
argument|const Key&akey
argument_list|)
specifier|const
block|{
name|QList
operator|<
name|T
operator|>
name|res
block|;
name|Node
operator|*
name|n
operator|=
name|d
operator|->
name|findNode
argument_list|(
name|akey
argument_list|)
block|;
if|if
condition|(
name|n
condition|)
block|{
name|const_iterator
name|it
parameter_list|(
name|n
parameter_list|)
function_decl|;
do|do
block|{
name|res
operator|.
name|append
argument_list|(
operator|*
name|it
argument_list|)
expr_stmt|;
operator|++
name|it
expr_stmt|;
block|}
end_expr_stmt
begin_while
while|while
condition|(
name|it
operator|!=
name|constEnd
argument_list|()
operator|&&
operator|!
name|qMapLessThanKey
operator|<
name|Key
operator|>
operator|(
name|akey
operator|,
name|it
operator|.
name|key
argument_list|()
operator|)
condition|)
empty_stmt|;
end_while
begin_expr_stmt
unit|}     return
name|res
expr_stmt|;
end_expr_stmt
begin_expr_stmt
unit|}  template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
name|Q_INLINE_TEMPLATE
name|typename
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|const_iterator
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|lowerBound
argument_list|(
argument|const Key&akey
argument_list|)
specifier|const
block|{
name|Node
operator|*
name|lb
operator|=
name|d
operator|->
name|root
argument_list|()
operator|?
name|d
operator|->
name|root
argument_list|()
operator|->
name|lowerBound
argument_list|(
name|akey
argument_list|)
operator|:
name|Q_NULLPTR
block|;
if|if
condition|(
operator|!
name|lb
condition|)
name|lb
operator|=
name|d
operator|->
name|end
argument_list|()
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|const_iterator
argument_list|(
name|lb
argument_list|)
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
name|Q_INLINE_TEMPLATE
name|typename
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|iterator
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|lowerBound
argument_list|(
argument|const Key&akey
argument_list|)
block|{
name|detach
argument_list|()
block|;
name|Node
operator|*
name|lb
operator|=
name|d
operator|->
name|root
argument_list|()
condition|?
name|d
operator|->
name|root
argument_list|()
operator|->
name|lowerBound
argument_list|(
name|akey
argument_list|)
else|:
name|Q_NULLPTR
block|;
if|if
condition|(
operator|!
name|lb
condition|)
name|lb
operator|=
name|d
operator|->
name|end
argument_list|()
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|iterator
argument_list|(
name|lb
argument_list|)
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
name|Q_INLINE_TEMPLATE
name|typename
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|const_iterator
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|upperBound
argument_list|(
argument|const Key&akey
argument_list|)
specifier|const
block|{
name|Node
operator|*
name|ub
operator|=
name|d
operator|->
name|root
argument_list|()
operator|?
name|d
operator|->
name|root
argument_list|()
operator|->
name|upperBound
argument_list|(
name|akey
argument_list|)
operator|:
name|Q_NULLPTR
block|;
if|if
condition|(
operator|!
name|ub
condition|)
name|ub
operator|=
name|d
operator|->
name|end
argument_list|()
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|const_iterator
argument_list|(
name|ub
argument_list|)
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
name|Q_INLINE_TEMPLATE
name|typename
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|iterator
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|upperBound
argument_list|(
argument|const Key&akey
argument_list|)
block|{
name|detach
argument_list|()
block|;
name|Node
operator|*
name|ub
operator|=
name|d
operator|->
name|root
argument_list|()
condition|?
name|d
operator|->
name|root
argument_list|()
operator|->
name|upperBound
argument_list|(
name|akey
argument_list|)
else|:
name|Q_NULLPTR
block|;
if|if
condition|(
operator|!
name|ub
condition|)
name|ub
operator|=
name|d
operator|->
name|end
argument_list|()
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|iterator
argument_list|(
name|ub
argument_list|)
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
name|Q_OUTOFLINE_TEMPLATE
name|bool
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|operator
operator|==
operator|(
specifier|const
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|&
name|other
operator|)
specifier|const
block|{
if|if
condition|(
name|size
argument_list|()
operator|!=
name|other
operator|.
name|size
argument_list|()
condition|)
return|return
name|false
return|;
end_expr_stmt
begin_if
if|if
condition|(
name|d
operator|==
name|other
operator|.
name|d
condition|)
return|return
name|true
return|;
end_if
begin_decl_stmt
name|const_iterator
name|it1
init|=
name|begin
argument_list|()
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|const_iterator
name|it2
init|=
name|other
operator|.
name|begin
argument_list|()
decl_stmt|;
end_decl_stmt
begin_while
while|while
condition|(
name|it1
operator|!=
name|end
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|it1
operator|.
name|value
argument_list|()
operator|==
name|it2
operator|.
name|value
argument_list|()
operator|)
operator|||
name|qMapLessThanKey
argument_list|(
name|it1
operator|.
name|key
argument_list|()
argument_list|,
name|it2
operator|.
name|key
argument_list|()
argument_list|)
operator|||
name|qMapLessThanKey
argument_list|(
name|it2
operator|.
name|key
argument_list|()
argument_list|,
name|it1
operator|.
name|key
argument_list|()
argument_list|)
condition|)
return|return
name|false
return|;
operator|++
name|it2
expr_stmt|;
operator|++
name|it1
expr_stmt|;
block|}
end_while
begin_return
return|return
name|true
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
name|Q_OUTOFLINE_TEMPLATE
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|QMap
argument_list|(
argument|const std::map<Key
argument_list|,
argument|T>&other
argument_list|)
block|{
name|d
operator|=
name|QMapData
operator|<
name|Key
block|,
name|T
operator|>
operator|::
name|create
argument_list|()
block|;
name|typename
name|std
operator|::
name|map
operator|<
name|Key
block|,
name|T
operator|>
operator|::
name|const_iterator
name|it
operator|=
name|other
operator|.
name|end
argument_list|()
block|;
while|while
condition|(
name|it
operator|!=
name|other
operator|.
name|begin
argument_list|()
condition|)
block|{
operator|--
name|it
expr_stmt|;
name|d
operator|->
name|createNode
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|.
name|first
argument_list|,
operator|(
operator|*
name|it
operator|)
operator|.
name|second
argument_list|,
name|d
operator|->
name|begin
argument_list|()
argument_list|,
name|true
argument_list|)
expr_stmt|;
comment|// insert on most left node.
block|}
end_expr_stmt
begin_expr_stmt
unit|}  template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
name|Q_OUTOFLINE_TEMPLATE
name|std
operator|::
name|map
operator|<
name|Key
operator|,
name|T
operator|>
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|toStdMap
argument_list|()
specifier|const
block|{
name|std
operator|::
name|map
operator|<
name|Key
block|,
name|T
operator|>
name|map
block|;
name|const_iterator
name|it
operator|=
name|end
argument_list|()
block|;
while|while
condition|(
name|it
operator|!=
name|begin
argument_list|()
condition|)
block|{
operator|--
name|it
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|map
operator|.
name|begin
argument_list|()
argument_list|,
name|std
operator|::
name|pair
operator|<
name|Key
argument_list|,
name|T
operator|>
operator|(
name|it
operator|.
name|key
argument_list|()
operator|,
name|it
operator|.
name|value
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_return
return|return
name|map
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
name|class
name|QMultiMap
operator|:
name|public
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
block|{
name|public
operator|:
name|QMultiMap
argument_list|()
block|{}
ifdef|#
directive|ifdef
name|Q_COMPILER_INITIALIZER_LISTS
specifier|inline
name|QMultiMap
argument_list|(
argument|std::initializer_list<std::pair<Key
argument_list|,
argument|T>> list
argument_list|)
block|{
for|for
control|(
name|typename
name|std
operator|::
name|initializer_list
operator|<
name|std
operator|::
name|pair
operator|<
name|Key
operator|,
name|T
operator|>
expr|>
operator|::
name|const_iterator
name|it
operator|=
name|list
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|list
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
name|insert
argument_list|(
name|it
operator|->
name|first
argument_list|,
name|it
operator|->
name|second
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
name|QMultiMap
argument_list|(
specifier|const
name|QMap
operator|<
name|Key
argument_list|,
name|T
operator|>
operator|&
name|other
argument_list|)
operator|:
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|(
name|other
operator|)
block|{}
specifier|inline
name|void
name|swap
argument_list|(
argument|QMultiMap<Key
argument_list|,
argument|T>&other
argument_list|)
block|{
name|QMap
operator|<
name|Key
block|,
name|T
operator|>
operator|::
name|swap
argument_list|(
name|other
argument_list|)
block|; }
specifier|inline
name|typename
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|iterator
name|replace
argument_list|(
argument|const Key&key
argument_list|,
argument|const T&value
argument_list|)
block|{
return|return
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|insert
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|typename
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|iterator
name|insert
argument_list|(
argument|const Key&key
argument_list|,
argument|const T&value
argument_list|)
block|{
return|return
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|insertMulti
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|typename
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|iterator
name|insert
argument_list|(
argument|typename QMap<Key
argument_list|,
argument|T>::const_iterator pos
argument_list|,
argument|const Key&key
argument_list|,
argument|const T&value
argument_list|)
block|{
return|return
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|insertMulti
argument_list|(
name|pos
argument_list|,
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QMultiMap
operator|&
name|operator
operator|+=
operator|(
specifier|const
name|QMultiMap
operator|&
name|other
operator|)
block|{
name|this
operator|->
name|unite
argument_list|(
name|other
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QMultiMap
name|operator
operator|+
operator|(
specifier|const
name|QMultiMap
operator|&
name|other
operator|)
specifier|const
block|{
name|QMultiMap
name|result
operator|=
operator|*
name|this
block|;
name|result
operator|+=
name|other
block|;
return|return
name|result
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|using
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|contains
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|using
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|remove
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|using
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|count
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|using
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|find
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|using
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|constFind
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|bool
name|contains
argument_list|(
specifier|const
name|Key
operator|&
name|key
argument_list|,
specifier|const
name|T
operator|&
name|value
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_function_decl
name|int
name|remove
parameter_list|(
specifier|const
name|Key
modifier|&
name|key
parameter_list|,
specifier|const
name|T
modifier|&
name|value
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
name|int
name|count
argument_list|(
specifier|const
name|Key
operator|&
name|key
argument_list|,
specifier|const
name|T
operator|&
name|value
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|typename
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|iterator
name|find
argument_list|(
argument|const Key&key
argument_list|,
argument|const T&value
argument_list|)
block|{
name|typename
name|QMap
operator|<
name|Key
block|,
name|T
operator|>
operator|::
name|iterator
name|i
argument_list|(
name|find
argument_list|(
name|key
argument_list|)
argument_list|)
block|;
name|typename
name|QMap
operator|<
name|Key
block|,
name|T
operator|>
operator|::
name|iterator
name|end
argument_list|(
name|this
operator|->
name|end
argument_list|()
argument_list|)
block|;
while|while
condition|(
name|i
operator|!=
name|end
operator|&&
operator|!
name|qMapLessThanKey
operator|<
name|Key
operator|>
operator|(
name|key
operator|,
name|i
operator|.
name|key
argument_list|()
operator|)
condition|)
block|{
if|if
condition|(
name|i
operator|.
name|value
argument_list|()
operator|==
name|value
condition|)
return|return
name|i
return|;
operator|++
name|i
expr_stmt|;
block|}
end_expr_stmt
begin_return
return|return
name|end
return|;
end_return
begin_expr_stmt
unit|}     typename
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|const_iterator
name|find
argument_list|(
argument|const Key&key
argument_list|,
argument|const T&value
argument_list|)
specifier|const
block|{
name|typename
name|QMap
operator|<
name|Key
block|,
name|T
operator|>
operator|::
name|const_iterator
name|i
argument_list|(
name|constFind
argument_list|(
name|key
argument_list|)
argument_list|)
block|;
name|typename
name|QMap
operator|<
name|Key
block|,
name|T
operator|>
operator|::
name|const_iterator
name|end
argument_list|(
name|QMap
operator|<
name|Key
argument_list|,
name|T
operator|>
operator|::
name|constEnd
argument_list|()
argument_list|)
block|;
while|while
condition|(
name|i
operator|!=
name|end
operator|&&
operator|!
name|qMapLessThanKey
operator|<
name|Key
operator|>
operator|(
name|key
operator|,
name|i
operator|.
name|key
argument_list|()
operator|)
condition|)
block|{
if|if
condition|(
name|i
operator|.
name|value
argument_list|()
operator|==
name|value
condition|)
return|return
name|i
return|;
operator|++
name|i
expr_stmt|;
block|}
end_expr_stmt
begin_return
return|return
name|end
return|;
end_return
begin_expr_stmt
unit|}     typename
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|const_iterator
name|constFind
argument_list|(
argument|const Key&key
argument_list|,
argument|const T&value
argument_list|)
specifier|const
block|{
return|return
name|find
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
end_expr_stmt
begin_label
name|private
label|:
end_label
begin_function_decl
name|T
modifier|&
name|operator
function_decl|[]
parameter_list|(
specifier|const
name|Key
modifier|&
name|key
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
specifier|const
name|T
name|operator
index|[]
argument_list|(
specifier|const
name|Key
operator|&
name|key
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
name|Q_INLINE_TEMPLATE
name|bool
name|QMultiMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|contains
argument_list|(
argument|const Key&key
argument_list|,
argument|const T&value
argument_list|)
specifier|const
block|{
return|return
name|constFind
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
operator|!=
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|constEnd
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
name|Q_INLINE_TEMPLATE
name|int
name|QMultiMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|remove
argument_list|(
argument|const Key&key
argument_list|,
argument|const T&value
argument_list|)
block|{
name|int
name|n
operator|=
literal|0
block|;
name|typename
name|QMap
operator|<
name|Key
block|,
name|T
operator|>
operator|::
name|iterator
name|i
argument_list|(
name|find
argument_list|(
name|key
argument_list|)
argument_list|)
block|;
name|typename
name|QMap
operator|<
name|Key
block|,
name|T
operator|>
operator|::
name|iterator
name|end
argument_list|(
name|QMap
operator|<
name|Key
argument_list|,
name|T
operator|>
operator|::
name|end
argument_list|()
argument_list|)
block|;
while|while
condition|(
name|i
operator|!=
name|end
operator|&&
operator|!
name|qMapLessThanKey
operator|<
name|Key
operator|>
operator|(
name|key
operator|,
name|i
operator|.
name|key
argument_list|()
operator|)
condition|)
block|{
if|if
condition|(
name|i
operator|.
name|value
argument_list|()
operator|==
name|value
condition|)
block|{
name|i
operator|=
name|this
operator|->
name|erase
argument_list|(
name|i
argument_list|)
expr_stmt|;
operator|++
name|n
expr_stmt|;
block|}
end_expr_stmt
begin_else
else|else
block|{
operator|++
name|i
expr_stmt|;
block|}
end_else
begin_expr_stmt
unit|}     return
name|n
expr_stmt|;
end_expr_stmt
begin_expr_stmt
unit|}  template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
name|Q_INLINE_TEMPLATE
name|int
name|QMultiMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|count
argument_list|(
argument|const Key&key
argument_list|,
argument|const T&value
argument_list|)
specifier|const
block|{
name|int
name|n
operator|=
literal|0
block|;
name|typename
name|QMap
operator|<
name|Key
block|,
name|T
operator|>
operator|::
name|const_iterator
name|i
argument_list|(
name|constFind
argument_list|(
name|key
argument_list|)
argument_list|)
block|;
name|typename
name|QMap
operator|<
name|Key
block|,
name|T
operator|>
operator|::
name|const_iterator
name|end
argument_list|(
name|QMap
operator|<
name|Key
argument_list|,
name|T
operator|>
operator|::
name|constEnd
argument_list|()
argument_list|)
block|;
while|while
condition|(
name|i
operator|!=
name|end
operator|&&
operator|!
name|qMapLessThanKey
operator|<
name|Key
operator|>
operator|(
name|key
operator|,
name|i
operator|.
name|key
argument_list|()
operator|)
condition|)
block|{
if|if
condition|(
name|i
operator|.
name|value
argument_list|()
operator|==
name|value
condition|)
operator|++
name|n
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
end_expr_stmt
begin_return
return|return
name|n
return|;
end_return
begin_expr_stmt
unit|}  Q_DECLARE_ASSOCIATIVE_ITERATOR
operator|(
name|Map
operator|)
name|Q_DECLARE_MUTABLE_ASSOCIATIVE_ITERATOR
argument_list|(
argument|Map
argument_list|)
name|QT_END_NAMESPACE
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QMAP_H
end_comment
end_unit
