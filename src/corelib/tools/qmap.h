begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QMAP_H
end_ifndef
begin_define
DECL|macro|QMAP_H
define|#
directive|define
name|QMAP_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qiterator.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qlist.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qrefcount.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_STL
end_ifndef
begin_include
include|#
directive|include
file|<map>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<new>
end_include
begin_decl_stmt
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
DECL|function|QT_MODULE
name|QT_MODULE
argument_list|(
name|Core
argument_list|)
decl|struct
name|Q_CORE_EXPORT
name|QMapData
block|{
struct|struct
name|Node
block|{
name|Node
modifier|*
name|backward
decl_stmt|;
name|Node
modifier|*
name|forward
index|[
literal|1
index|]
decl_stmt|;
block|}
struct|;
enum|enum
block|{
name|LastLevel
init|=
literal|11
block|,
name|Sparseness
init|=
literal|3
block|}
enum|;
name|QMapData
modifier|*
name|backward
decl_stmt|;
name|QMapData
modifier|*
name|forward
index|[
name|QMapData
operator|::
name|LastLevel
operator|+
literal|1
index|]
decl_stmt|;
name|QtPrivate
operator|::
name|RefCount
name|ref
expr_stmt|;
name|int
name|topLevel
decl_stmt|;
name|int
name|size
decl_stmt|;
name|uint
name|randomBits
decl_stmt|;
name|uint
name|insertInOrder
range|:
literal|1
decl_stmt|;
name|uint
name|sharable
range|:
literal|1
decl_stmt|;
name|uint
name|strictAlignment
range|:
literal|1
decl_stmt|;
name|uint
name|reserved
range|:
literal|29
decl_stmt|;
specifier|static
name|QMapData
modifier|*
name|createData
parameter_list|(
name|int
name|alignment
parameter_list|)
function_decl|;
name|void
name|continueFreeData
parameter_list|(
name|int
name|offset
parameter_list|)
function_decl|;
name|Node
modifier|*
name|node_create
parameter_list|(
name|Node
modifier|*
name|update
index|[]
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|alignment
parameter_list|)
function_decl|;
name|void
name|node_delete
parameter_list|(
name|Node
modifier|*
name|update
index|[]
parameter_list|,
name|int
name|offset
parameter_list|,
name|Node
modifier|*
name|node
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|QT_QMAP_DEBUG
name|uint
name|adjust_ptr
parameter_list|(
name|Node
modifier|*
name|node
parameter_list|)
function_decl|;
name|void
name|dump
parameter_list|()
function_decl|;
endif|#
directive|endif
specifier|static
specifier|const
name|QMapData
name|shared_null
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_comment
comment|/*     QMap uses qMapLessThanKey() to compare keys. The default     implementation uses operator<(). For pointer types,     qMapLessThanKey() casts the pointers to integers before it     compares them, because operator<() is undefined on pointers     that come from different memory blocks. (In practice, this     is only a problem when running a program such as     BoundsChecker.) */
end_comment
begin_expr_stmt
DECL|function|qMapLessThanKey
name|template
operator|<
name|class
name|Key
operator|>
specifier|inline
name|bool
name|qMapLessThanKey
argument_list|(
argument|const Key&key1
argument_list|,
argument|const Key&key2
argument_list|)
block|{
return|return
name|key1
operator|<
name|key2
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|qMapLessThanKey
name|template
operator|<
name|class
name|Ptr
operator|>
specifier|inline
name|bool
name|qMapLessThanKey
argument_list|(
argument|Ptr *key1
argument_list|,
argument|Ptr *key2
argument_list|)
block|{
name|Q_ASSERT
argument_list|(
sizeof|sizeof
argument_list|(
name|quintptr
argument_list|)
operator|==
sizeof|sizeof
argument_list|(
name|Ptr
operator|*
argument_list|)
argument_list|)
block|;
return|return
name|quintptr
argument_list|(
name|key1
argument_list|)
operator|<
name|quintptr
argument_list|(
name|key2
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|qMapLessThanKey
name|template
operator|<
name|class
name|Ptr
operator|>
specifier|inline
name|bool
name|qMapLessThanKey
argument_list|(
argument|const Ptr *key1
argument_list|,
argument|const Ptr *key2
argument_list|)
block|{
name|Q_ASSERT
argument_list|(
sizeof|sizeof
argument_list|(
name|quintptr
argument_list|)
operator|==
sizeof|sizeof
argument_list|(
specifier|const
name|Ptr
operator|*
argument_list|)
argument_list|)
block|;
return|return
name|quintptr
argument_list|(
name|key1
argument_list|)
operator|<
name|quintptr
argument_list|(
name|key2
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|variable|Key
name|template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
expr|struct
DECL|struct|QMapNode
name|QMapNode
block|{
DECL|member|key
name|Key
name|key
block|;
DECL|member|value
name|T
name|value
block|;
DECL|member|private
name|private
operator|:
comment|// never access these members through this structure.
comment|// see below
name|QMapData
operator|::
name|Node
operator|*
name|backward
block|;
DECL|member|forward
name|QMapData
operator|::
name|Node
operator|*
name|forward
index|[
literal|1
index|]
block|; }
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|variable|Key
name|template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
expr|struct
DECL|struct|QMapPayloadNode
name|QMapPayloadNode
block|{
DECL|member|key
name|Key
name|key
block|;
DECL|member|value
name|T
name|value
block|;
DECL|member|private
name|private
operator|:
comment|// QMap::e is a pointer to QMapData::Node, which matches the member
comment|// below. However, the memory allocation node in QMapData::node_create
comment|// allocates sizeof(QMapPayloNode) and incorrectly calculates the offset
comment|// of 'backward' below. If the alignment of QMapPayloadNode is larger
comment|// than the alignment of a pointer, the 'backward' member is aligned to
comment|// the end of this structure, not to 'value' above, and will occupy the
comment|// tail-padding area.
comment|//
comment|//  e.g., on a 32-bit archictecture with Key = int and
comment|//        sizeof(T) = alignof(T) = 8
comment|//   0        4        8        12       16       20       24  byte
comment|//   |   key  |   PAD  |      value      |backward|  PAD   |   correct layout
comment|//   |   key  |   PAD  |      value      |        |backward|   how it's actually used
comment|//   |<-----  value of QMap::payload() = 20 ----->|
name|QMapData
operator|::
name|Node
operator|*
name|backward
block|; }
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|variable|Key
name|template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
name|class
name|QMap
block|{
typedef|typedef
name|QMapNode
operator|<
name|Key
operator|,
name|T
operator|>
name|Node
expr_stmt|;
end_expr_stmt
begin_typedef
typedef|typedef
name|QMapPayloadNode
operator|<
name|Key
operator|,
name|T
operator|>
name|PayloadNode
expr_stmt|;
end_typedef
begin_union
union|union
block|{
name|QMapData
modifier|*
name|d
decl_stmt|;
name|QMapData
operator|::
name|Node
operator|*
name|e
expr_stmt|;
block|}
union|;
end_union
begin_function
specifier|static
specifier|inline
name|int
name|payload
parameter_list|()
block|{
return|return
sizeof|sizeof
argument_list|(
name|PayloadNode
argument_list|)
operator|-
sizeof|sizeof
argument_list|(
name|QMapData
operator|::
name|Node
operator|*
argument_list|)
return|;
block|}
end_function
begin_function
specifier|static
specifier|inline
name|int
name|alignment
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_ALIGNOF
return|return
name|int
argument_list|(
name|qMax
argument_list|(
sizeof|sizeof
argument_list|(
name|void
operator|*
argument_list|)
argument_list|,
name|Q_ALIGNOF
argument_list|(
name|Node
argument_list|)
argument_list|)
argument_list|)
return|;
else|#
directive|else
return|return
literal|0
return|;
endif|#
directive|endif
block|}
end_function
begin_decl_stmt
specifier|static
specifier|inline
name|Node
modifier|*
name|concrete
argument_list|(
name|QMapData
operator|::
name|Node
operator|*
name|node
argument_list|)
block|{
return|return
name|reinterpret_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|reinterpret_cast
operator|<
name|char
operator|*
operator|>
operator|(
name|node
operator|)
operator|-
name|payload
argument_list|()
operator|)
return|;
block|}
end_decl_stmt
begin_label
name|public
label|:
end_label
begin_expr_stmt
specifier|inline
name|QMap
argument_list|()
operator|:
name|d
argument_list|(
argument|const_cast<QMapData *>(&QMapData::shared_null)
argument_list|)
block|{ }
specifier|inline
name|QMap
argument_list|(
specifier|const
name|QMap
operator|<
name|Key
argument_list|,
name|T
operator|>
operator|&
name|other
argument_list|)
operator|:
name|d
argument_list|(
argument|other.d
argument_list|)
block|{
name|d
operator|->
name|ref
operator|.
name|ref
argument_list|()
block|;
if|if
condition|(
operator|!
name|d
operator|->
name|sharable
condition|)
name|detach
argument_list|()
expr_stmt|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
operator|~
name|QMap
argument_list|()
block|{
if|if
condition|(
operator|!
name|d
condition|)
return|return;
end_expr_stmt
begin_if
if|if
condition|(
operator|!
name|d
operator|->
name|ref
operator|.
name|deref
argument_list|()
condition|)
name|freeData
argument_list|(
name|d
argument_list|)
expr_stmt|;
end_if
begin_expr_stmt
unit|}      QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|&
name|operator
operator|=
operator|(
specifier|const
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|&
name|other
operator|)
expr_stmt|;
end_expr_stmt
begin_ifdef
ifdef|#
directive|ifdef
name|Q_COMPILER_RVALUE_REFS
end_ifdef
begin_expr_stmt
specifier|inline
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|&
name|operator
operator|=
operator|(
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|&&
name|other
operator|)
block|{
name|qSwap
argument_list|(
name|d
argument_list|,
name|other
operator|.
name|d
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
specifier|inline
name|void
name|swap
argument_list|(
name|QMap
operator|<
name|Key
argument_list|,
name|T
operator|>
operator|&
name|other
argument_list|)
block|{
name|qSwap
argument_list|(
name|d
argument_list|,
name|other
operator|.
name|d
argument_list|)
expr_stmt|;
block|}
end_decl_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_STL
end_ifndef
begin_decl_stmt
name|explicit
name|QMap
argument_list|(
specifier|const
name|typename
name|std
operator|::
name|map
operator|<
name|Key
argument_list|,
name|T
operator|>
operator|&
name|other
argument_list|)
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|std
operator|::
name|map
operator|<
name|Key
operator|,
name|T
operator|>
name|toStdMap
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|&
name|other
operator|)
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|&
name|other
operator|)
specifier|const
block|{
return|return
operator|!
operator|(
operator|*
name|this
operator|==
name|other
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|int
name|size
argument_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|size
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|isEmpty
argument_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|size
operator|==
literal|0
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|void
name|detach
parameter_list|()
block|{
if|if
condition|(
name|d
operator|->
name|ref
operator|!=
literal|1
condition|)
name|detach_helper
argument_list|()
expr_stmt|;
block|}
end_function
begin_expr_stmt
specifier|inline
name|bool
name|isDetached
argument_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|ref
operator|==
literal|1
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|void
name|setSharable
parameter_list|(
name|bool
name|sharable
parameter_list|)
block|{
if|if
condition|(
operator|!
name|sharable
condition|)
name|detach
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|!=
operator|&
name|QMapData
operator|::
name|shared_null
condition|)
name|d
operator|->
name|sharable
operator|=
name|sharable
expr_stmt|;
block|}
end_function
begin_decl_stmt
specifier|inline
name|bool
name|isSharedWith
argument_list|(
specifier|const
name|QMap
operator|<
name|Key
argument_list|,
name|T
operator|>
operator|&
name|other
argument_list|)
decl|const
block|{
return|return
name|d
operator|==
name|other
operator|.
name|d
return|;
block|}
end_decl_stmt
begin_function
specifier|inline
name|void
name|setInsertInOrder
parameter_list|(
name|bool
name|ordered
parameter_list|)
block|{
if|if
condition|(
name|ordered
condition|)
name|detach
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|!=
operator|&
name|QMapData
operator|::
name|shared_null
condition|)
name|d
operator|->
name|insertInOrder
operator|=
name|ordered
expr_stmt|;
block|}
end_function
begin_function_decl
name|void
name|clear
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|int
name|remove
parameter_list|(
specifier|const
name|Key
modifier|&
name|key
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|T
name|take
parameter_list|(
specifier|const
name|Key
modifier|&
name|key
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
name|bool
name|contains
argument_list|(
specifier|const
name|Key
operator|&
name|key
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|const
name|Key
name|key
argument_list|(
specifier|const
name|T
operator|&
name|value
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|const
name|Key
name|key
argument_list|(
specifier|const
name|T
operator|&
name|value
argument_list|,
specifier|const
name|Key
operator|&
name|defaultKey
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|const
name|T
name|value
argument_list|(
specifier|const
name|Key
operator|&
name|key
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|const
name|T
name|value
argument_list|(
specifier|const
name|Key
operator|&
name|key
argument_list|,
specifier|const
name|T
operator|&
name|defaultValue
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_function_decl
name|T
modifier|&
name|operator
function_decl|[]
parameter_list|(
specifier|const
name|Key
modifier|&
name|key
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
specifier|const
name|T
name|operator
index|[]
argument_list|(
specifier|const
name|Key
operator|&
name|key
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|QList
operator|<
name|Key
operator|>
name|uniqueKeys
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QList
operator|<
name|Key
operator|>
name|keys
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QList
operator|<
name|Key
operator|>
name|keys
argument_list|(
argument|const T&value
argument_list|)
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QList
operator|<
name|T
operator|>
name|values
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QList
operator|<
name|T
operator|>
name|values
argument_list|(
argument|const Key&key
argument_list|)
specifier|const
expr_stmt|;
end_expr_stmt
begin_function
name|int
name|count
parameter_list|(
specifier|const
name|Key
modifier|&
name|key
parameter_list|)
function|const;
end_function
begin_decl_stmt
name|class
name|const_iterator
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|iterator
block|{
name|friend
name|class
name|const_iterator
decl_stmt|;
name|QMapData
operator|::
name|Node
operator|*
name|i
expr_stmt|;
name|public
label|:
typedef|typedef
name|std
operator|::
name|bidirectional_iterator_tag
name|iterator_category
expr_stmt|;
typedef|typedef
name|qptrdiff
name|difference_type
typedef|;
typedef|typedef
name|T
name|value_type
typedef|;
typedef|typedef
name|T
modifier|*
name|pointer
typedef|;
typedef|typedef
name|T
modifier|&
name|reference
typedef|;
comment|// ### Qt 5: get rid of 'operator Node *'
specifier|inline
name|operator
name|QMapData
operator|::
name|Node
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
name|i
return|;
block|}
specifier|inline
name|iterator
argument_list|()
operator|:
name|i
argument_list|(
literal|0
argument_list|)
block|{ }
specifier|inline
name|iterator
argument_list|(
name|QMapData
operator|::
name|Node
operator|*
name|node
argument_list|)
operator|:
name|i
argument_list|(
argument|node
argument_list|)
block|{ }
specifier|inline
specifier|const
name|Key
operator|&
name|key
argument_list|()
specifier|const
block|{
return|return
name|concrete
argument_list|(
name|i
argument_list|)
operator|->
name|key
return|;
block|}
specifier|inline
name|T
operator|&
name|value
argument_list|()
specifier|const
block|{
return|return
name|concrete
argument_list|(
name|i
argument_list|)
operator|->
name|value
return|;
block|}
specifier|inline
name|T
operator|&
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
name|concrete
argument_list|(
name|i
argument_list|)
operator|->
name|value
return|;
block|}
specifier|inline
name|T
operator|*
name|operator
operator|->
expr|(
block|)
decl|const
block|{
return|return
operator|&
name|concrete
argument_list|(
name|i
argument_list|)
operator|->
name|value
return|;
block|}
end_decl_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|iterator
operator|&
name|o
operator|)
specifier|const
block|{
return|return
name|i
operator|==
name|o
operator|.
name|i
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|iterator
operator|&
name|o
operator|)
specifier|const
block|{
return|return
name|i
operator|!=
name|o
operator|.
name|i
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|iterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
name|i
operator|=
name|i
operator|->
name|forward
index|[
literal|0
index|]
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|iterator
name|operator
operator|++
operator|(
name|int
operator|)
block|{
name|iterator
name|r
operator|=
operator|*
name|this
block|;
name|i
operator|=
name|i
operator|->
name|forward
index|[
literal|0
index|]
block|;
return|return
name|r
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|iterator
operator|&
name|operator
operator|--
operator|(
operator|)
block|{
name|i
operator|=
name|i
operator|->
name|backward
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|iterator
name|operator
operator|--
operator|(
name|int
operator|)
block|{
name|iterator
name|r
operator|=
operator|*
name|this
block|;
name|i
operator|=
name|i
operator|->
name|backward
block|;
return|return
name|r
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|iterator
name|operator
operator|+
operator|(
name|int
name|j
operator|)
specifier|const
block|{
name|iterator
name|r
operator|=
operator|*
name|this
block|;
if|if
condition|(
name|j
operator|>
literal|0
condition|)
while|while
condition|(
name|j
operator|--
condition|)
operator|++
name|r
expr_stmt|;
else|else
while|while
condition|(
name|j
operator|++
condition|)
operator|--
name|r
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|r
return|;
end_return
begin_expr_stmt
unit|}         inline
name|iterator
name|operator
operator|-
operator|(
name|int
name|j
operator|)
specifier|const
block|{
return|return
name|operator
operator|+
operator|(
operator|-
name|j
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|iterator
operator|&
name|operator
operator|+=
operator|(
name|int
name|j
operator|)
block|{
return|return
operator|*
name|this
operator|=
operator|*
name|this
operator|+
name|j
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|iterator
operator|&
name|operator
operator|-=
operator|(
name|int
name|j
operator|)
block|{
return|return
operator|*
name|this
operator|=
operator|*
name|this
operator|-
name|j
return|;
block|}
end_expr_stmt
begin_comment
comment|// ### Qt 5: not sure this is necessary anymore
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|QT_STRICT_ITERATORS
end_ifdef
begin_label
name|private
label|:
end_label
begin_else
else|#
directive|else
end_else
begin_label
name|public
label|:
end_label
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|const_iterator
operator|&
name|o
operator|)
specifier|const
block|{
return|return
name|i
operator|==
name|o
operator|.
name|i
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|const_iterator
operator|&
name|o
operator|)
specifier|const
block|{
return|return
name|i
operator|!=
name|o
operator|.
name|i
return|;
block|}
end_expr_stmt
begin_label
name|private
label|:
end_label
begin_comment
comment|// ### Qt 5: remove
end_comment
begin_expr_stmt
specifier|inline
name|operator
name|bool
argument_list|()
specifier|const
block|{
return|return
name|false
return|;
block|}
end_expr_stmt
begin_decl_stmt
unit|};
name|friend
name|class
name|iterator
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|const_iterator
block|{
name|friend
name|class
name|iterator
decl_stmt|;
name|QMapData
operator|::
name|Node
operator|*
name|i
expr_stmt|;
name|public
label|:
typedef|typedef
name|std
operator|::
name|bidirectional_iterator_tag
name|iterator_category
expr_stmt|;
typedef|typedef
name|qptrdiff
name|difference_type
typedef|;
typedef|typedef
name|T
name|value_type
typedef|;
typedef|typedef
specifier|const
name|T
modifier|*
name|pointer
typedef|;
typedef|typedef
specifier|const
name|T
modifier|&
name|reference
typedef|;
comment|// ### Qt 5: get rid of 'operator Node *'
specifier|inline
name|operator
name|QMapData
operator|::
name|Node
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
name|i
return|;
block|}
specifier|inline
name|const_iterator
argument_list|()
operator|:
name|i
argument_list|(
literal|0
argument_list|)
block|{ }
specifier|inline
name|const_iterator
argument_list|(
name|QMapData
operator|::
name|Node
operator|*
name|node
argument_list|)
operator|:
name|i
argument_list|(
argument|node
argument_list|)
block|{ }
ifdef|#
directive|ifdef
name|QT_STRICT_ITERATORS
name|explicit
specifier|inline
name|const_iterator
argument_list|(
argument|const iterator&o
argument_list|)
else|#
directive|else
specifier|inline
name|const_iterator
argument_list|(
argument|const iterator&o
argument_list|)
endif|#
directive|endif
block|{
name|i
operator|=
name|o
operator|.
name|i
block|; }
specifier|inline
specifier|const
name|Key
operator|&
name|key
argument_list|()
specifier|const
block|{
return|return
name|concrete
argument_list|(
name|i
argument_list|)
operator|->
name|key
return|;
block|}
specifier|inline
specifier|const
name|T
operator|&
name|value
argument_list|()
specifier|const
block|{
return|return
name|concrete
argument_list|(
name|i
argument_list|)
operator|->
name|value
return|;
block|}
specifier|inline
specifier|const
name|T
operator|&
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
name|concrete
argument_list|(
name|i
argument_list|)
operator|->
name|value
return|;
block|}
specifier|inline
specifier|const
name|T
operator|*
name|operator
operator|->
expr|(
block|)
decl|const
block|{
return|return
operator|&
name|concrete
argument_list|(
name|i
argument_list|)
operator|->
name|value
return|;
block|}
end_decl_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|const_iterator
operator|&
name|o
operator|)
specifier|const
block|{
return|return
name|i
operator|==
name|o
operator|.
name|i
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|const_iterator
operator|&
name|o
operator|)
specifier|const
block|{
return|return
name|i
operator|!=
name|o
operator|.
name|i
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|const_iterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
name|i
operator|=
name|i
operator|->
name|forward
index|[
literal|0
index|]
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|const_iterator
name|operator
operator|++
operator|(
name|int
operator|)
block|{
name|const_iterator
name|r
operator|=
operator|*
name|this
block|;
name|i
operator|=
name|i
operator|->
name|forward
index|[
literal|0
index|]
block|;
return|return
name|r
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|const_iterator
operator|&
name|operator
operator|--
operator|(
operator|)
block|{
name|i
operator|=
name|i
operator|->
name|backward
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|const_iterator
name|operator
operator|--
operator|(
name|int
operator|)
block|{
name|const_iterator
name|r
operator|=
operator|*
name|this
block|;
name|i
operator|=
name|i
operator|->
name|backward
block|;
return|return
name|r
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|const_iterator
name|operator
operator|+
operator|(
name|int
name|j
operator|)
specifier|const
block|{
name|const_iterator
name|r
operator|=
operator|*
name|this
block|;
if|if
condition|(
name|j
operator|>
literal|0
condition|)
while|while
condition|(
name|j
operator|--
condition|)
operator|++
name|r
expr_stmt|;
else|else
while|while
condition|(
name|j
operator|++
condition|)
operator|--
name|r
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|r
return|;
end_return
begin_expr_stmt
unit|}         inline
name|const_iterator
name|operator
operator|-
operator|(
name|int
name|j
operator|)
specifier|const
block|{
return|return
name|operator
operator|+
operator|(
operator|-
name|j
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|const_iterator
operator|&
name|operator
operator|+=
operator|(
name|int
name|j
operator|)
block|{
return|return
operator|*
name|this
operator|=
operator|*
name|this
operator|+
name|j
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|const_iterator
operator|&
name|operator
operator|-=
operator|(
name|int
name|j
operator|)
block|{
return|return
operator|*
name|this
operator|=
operator|*
name|this
operator|-
name|j
return|;
block|}
end_expr_stmt
begin_comment
comment|// ### Qt 5: not sure this is necessary anymore
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|QT_STRICT_ITERATORS
end_ifdef
begin_label
name|private
label|:
end_label
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|iterator
operator|&
name|o
operator|)
specifier|const
block|{
return|return
name|operator
operator|==
operator|(
name|const_iterator
argument_list|(
name|o
argument_list|)
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|iterator
operator|&
name|o
operator|)
specifier|const
block|{
return|return
name|operator
operator|!=
operator|(
name|const_iterator
argument_list|(
name|o
argument_list|)
operator|)
return|;
block|}
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_label
name|private
label|:
end_label
begin_comment
comment|// ### Qt 5: remove
end_comment
begin_expr_stmt
specifier|inline
name|operator
name|bool
argument_list|()
specifier|const
block|{
return|return
name|false
return|;
block|}
end_expr_stmt
begin_decl_stmt
unit|};
name|friend
name|class
name|const_iterator
decl_stmt|;
end_decl_stmt
begin_comment
comment|// STL style
end_comment
begin_function
specifier|inline
name|iterator
name|begin
parameter_list|()
block|{
name|detach
argument_list|()
expr_stmt|;
return|return
name|iterator
argument_list|(
name|e
operator|->
name|forward
index|[
literal|0
index|]
argument_list|)
return|;
block|}
end_function
begin_expr_stmt
specifier|inline
name|const_iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
name|const_iterator
argument_list|(
name|e
operator|->
name|forward
index|[
literal|0
index|]
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|const_iterator
name|constBegin
argument_list|()
specifier|const
block|{
return|return
name|const_iterator
argument_list|(
name|e
operator|->
name|forward
index|[
literal|0
index|]
argument_list|)
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|iterator
name|end
parameter_list|()
block|{
name|detach
argument_list|()
expr_stmt|;
return|return
name|iterator
argument_list|(
name|e
argument_list|)
return|;
block|}
end_function
begin_expr_stmt
specifier|inline
name|const_iterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|const_iterator
argument_list|(
name|e
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|const_iterator
name|constEnd
argument_list|()
specifier|const
block|{
return|return
name|const_iterator
argument_list|(
name|e
argument_list|)
return|;
block|}
end_expr_stmt
begin_function_decl
name|iterator
name|erase
parameter_list|(
name|iterator
name|it
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|// more Qt
end_comment
begin_typedef
typedef|typedef
name|iterator
name|Iterator
typedef|;
end_typedef
begin_typedef
typedef|typedef
name|const_iterator
name|ConstIterator
typedef|;
end_typedef
begin_expr_stmt
specifier|inline
name|int
name|count
argument_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|size
return|;
block|}
end_expr_stmt
begin_function_decl
name|iterator
name|find
parameter_list|(
specifier|const
name|Key
modifier|&
name|key
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
name|const_iterator
name|find
argument_list|(
specifier|const
name|Key
operator|&
name|key
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|const_iterator
name|constFind
argument_list|(
specifier|const
name|Key
operator|&
name|key
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_function_decl
name|iterator
name|lowerBound
parameter_list|(
specifier|const
name|Key
modifier|&
name|key
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
name|const_iterator
name|lowerBound
argument_list|(
specifier|const
name|Key
operator|&
name|key
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_function_decl
name|iterator
name|upperBound
parameter_list|(
specifier|const
name|Key
modifier|&
name|key
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
name|const_iterator
name|upperBound
argument_list|(
specifier|const
name|Key
operator|&
name|key
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_function_decl
name|iterator
name|insert
parameter_list|(
specifier|const
name|Key
modifier|&
name|key
parameter_list|,
specifier|const
name|T
modifier|&
name|value
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|iterator
name|insertMulti
parameter_list|(
specifier|const
name|Key
modifier|&
name|key
parameter_list|,
specifier|const
name|T
modifier|&
name|value
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|&
name|unite
argument_list|(
specifier|const
name|QMap
operator|<
name|Key
argument_list|,
name|T
operator|>
operator|&
name|other
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// STL compatibility
end_comment
begin_typedef
typedef|typedef
name|Key
name|key_type
typedef|;
end_typedef
begin_typedef
typedef|typedef
name|T
name|mapped_type
typedef|;
end_typedef
begin_typedef
typedef|typedef
name|qptrdiff
name|difference_type
typedef|;
end_typedef
begin_typedef
typedef|typedef
name|int
name|size_type
typedef|;
end_typedef
begin_expr_stmt
specifier|inline
name|bool
name|empty
argument_list|()
specifier|const
block|{
return|return
name|isEmpty
argument_list|()
return|;
block|}
end_expr_stmt
begin_ifdef
ifdef|#
directive|ifdef
name|QT_QMAP_DEBUG
end_ifdef
begin_expr_stmt
specifier|inline
name|void
name|dump
argument_list|()
specifier|const
block|{
name|d
operator|->
name|dump
argument_list|()
block|; }
endif|#
directive|endif
name|private
operator|:
name|void
name|detach_helper
argument_list|()
expr_stmt|;
end_expr_stmt
begin_function_decl
name|void
name|freeData
parameter_list|(
name|QMapData
modifier|*
name|d
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|QMapData
operator|::
name|Node
operator|*
name|findNode
argument_list|(
argument|const Key&key
argument_list|)
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QMapData
operator|::
name|Node
operator|*
name|mutableFindNode
argument_list|(
argument|QMapData::Node *update[]
argument_list|,
argument|const Key&key
argument_list|)
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QMapData
operator|::
name|Node
operator|*
name|node_create
argument_list|(
name|QMapData
operator|*
name|d
argument_list|,
name|QMapData
operator|::
name|Node
operator|*
name|update
index|[]
argument_list|,
specifier|const
name|Key
operator|&
name|key
argument_list|,
specifier|const
name|T
operator|&
name|value
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
unit|};
DECL|variable|Key
name|template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|variable|Key
DECL|variable|Key
DECL|member|operator
name|Q_INLINE_TEMPLATE
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|&
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|operator
operator|=
operator|(
specifier|const
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|&
name|other
operator|)
block|{
if|if
condition|(
name|d
operator|!=
name|other
operator|.
name|d
condition|)
block|{
name|QMapData
modifier|*
name|o
init|=
name|other
operator|.
name|d
decl_stmt|;
name|o
operator|->
name|ref
operator|.
name|ref
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|ref
operator|.
name|deref
argument_list|()
condition|)
name|freeData
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|d
operator|=
name|o
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|sharable
condition|)
name|detach_helper
argument_list|()
expr_stmt|;
block|}
end_expr_stmt
begin_return
return|return
operator|*
name|this
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|variable|Key
DECL|function|clear
name|Q_INLINE_TEMPLATE
name|void
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|clear
argument_list|()
block|{
operator|*
name|this
operator|=
name|QMap
operator|<
name|Key
block|,
name|T
operator|>
operator|(
operator|)
block|; }
DECL|variable|Key
name|template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
name|Q_INLINE_TEMPLATE
name|typename
name|QMapData
operator|::
name|Node
operator|*
DECL|variable|Key
DECL|function|node_create
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|node_create
argument_list|(
argument|QMapData *adt
argument_list|,
argument|QMapData::Node *aupdate[]
argument_list|,
argument|const Key&akey
argument_list|,
argument|const T&avalue
argument_list|)
block|{
name|QMapData
operator|::
name|Node
operator|*
name|abstractNode
operator|=
name|adt
operator|->
name|node_create
argument_list|(
name|aupdate
argument_list|,
name|payload
argument_list|()
argument_list|,
name|alignment
argument_list|()
argument_list|)
block|;
name|QT_TRY
block|{
name|Node
operator|*
name|concreteNode
operator|=
name|concrete
argument_list|(
name|abstractNode
argument_list|)
block|;
name|new
argument_list|(
argument|&concreteNode->key
argument_list|)
name|Key
argument_list|(
name|akey
argument_list|)
block|;
name|QT_TRY
block|{
name|new
argument_list|(
argument|&concreteNode->value
argument_list|)
name|T
argument_list|(
name|avalue
argument_list|)
block|;         }
name|QT_CATCH
argument_list|(
argument|...
argument_list|)
block|{
name|concreteNode
operator|->
name|key
operator|.
expr|~
name|Key
argument_list|()
block|;
name|QT_RETHROW
block|;         }
block|}
name|QT_CATCH
argument_list|(
argument|...
argument_list|)
block|{
name|adt
operator|->
name|node_delete
argument_list|(
name|aupdate
argument_list|,
name|payload
argument_list|()
argument_list|,
name|abstractNode
argument_list|)
block|;
name|QT_RETHROW
block|;     }
comment|// clean up the update array for further insertions
comment|/*     for (int i = 0; i<= d->topLevel; ++i) {         if ( aupdate[i]==reinterpret_cast<QMapData::Node *>(adt) || aupdate[i]->forward[i] != abstractNode)             break;         aupdate[i] = abstractNode;     } */
return|return
name|abstractNode
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|variable|Key
name|template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|variable|Key
DECL|function|findNode
name|Q_INLINE_TEMPLATE
name|QMapData
operator|::
name|Node
operator|*
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|findNode
argument_list|(
argument|const Key&akey
argument_list|)
specifier|const
block|{
name|QMapData
operator|::
name|Node
operator|*
name|cur
operator|=
name|e
block|;
name|QMapData
operator|::
name|Node
operator|*
name|next
operator|=
name|e
block|;
for|for
control|(
name|int
name|i
init|=
name|d
operator|->
name|topLevel
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
while|while
condition|(
operator|(
name|next
operator|=
name|cur
operator|->
name|forward
index|[
name|i
index|]
operator|)
operator|!=
name|e
operator|&&
name|qMapLessThanKey
operator|<
name|Key
operator|>
operator|(
name|concrete
argument_list|(
name|next
argument_list|)
operator|->
name|key
operator|,
name|akey
operator|)
condition|)
name|cur
operator|=
name|next
expr_stmt|;
block|}
end_expr_stmt
begin_if
if|if
condition|(
name|next
operator|!=
name|e
operator|&&
operator|!
name|qMapLessThanKey
operator|<
name|Key
operator|>
operator|(
name|akey
operator|,
name|concrete
argument_list|(
name|next
argument_list|)
operator|->
name|key
operator|)
condition|)
block|{
return|return
name|next
return|;
block|}
else|else
block|{
return|return
name|e
return|;
block|}
end_if
begin_expr_stmt
unit|}  template
DECL|variable|Key
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|variable|Key
DECL|function|value
name|Q_INLINE_TEMPLATE
specifier|const
name|T
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|value
argument_list|(
argument|const Key&akey
argument_list|)
specifier|const
block|{
name|QMapData
operator|::
name|Node
operator|*
name|node
block|;
if|if
condition|(
name|d
operator|->
name|size
operator|==
literal|0
operator|||
operator|(
name|node
operator|=
name|findNode
argument_list|(
name|akey
argument_list|)
operator|)
operator|==
name|e
condition|)
block|{
return|return
name|T
argument_list|()
return|;
block|}
end_expr_stmt
begin_else
else|else
block|{
return|return
name|concrete
argument_list|(
name|node
argument_list|)
operator|->
name|value
return|;
block|}
end_else
begin_expr_stmt
unit|}  template
DECL|variable|Key
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|variable|Key
DECL|function|value
name|Q_INLINE_TEMPLATE
specifier|const
name|T
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|value
argument_list|(
argument|const Key&akey
argument_list|,
argument|const T&adefaultValue
argument_list|)
specifier|const
block|{
name|QMapData
operator|::
name|Node
operator|*
name|node
block|;
if|if
condition|(
name|d
operator|->
name|size
operator|==
literal|0
operator|||
operator|(
name|node
operator|=
name|findNode
argument_list|(
name|akey
argument_list|)
operator|)
operator|==
name|e
condition|)
block|{
return|return
name|adefaultValue
return|;
block|}
end_expr_stmt
begin_else
else|else
block|{
return|return
name|concrete
argument_list|(
name|node
argument_list|)
operator|->
name|value
return|;
block|}
end_else
begin_expr_stmt
unit|}  template
DECL|variable|Key
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|variable|Key
DECL|function|operator
name|Q_INLINE_TEMPLATE
specifier|const
name|T
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|operator
index|[]
operator|(
specifier|const
name|Key
operator|&
name|akey
operator|)
specifier|const
block|{
return|return
name|value
argument_list|(
name|akey
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|variable|Key
name|template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|variable|Key
DECL|function|operator
name|Q_INLINE_TEMPLATE
name|T
operator|&
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|operator
index|[]
operator|(
specifier|const
name|Key
operator|&
name|akey
operator|)
block|{
name|detach
argument_list|()
block|;
name|QMapData
operator|::
name|Node
operator|*
name|update
index|[
name|QMapData
operator|::
name|LastLevel
operator|+
literal|1
index|]
block|;
name|QMapData
operator|::
name|Node
operator|*
name|node
operator|=
name|mutableFindNode
argument_list|(
name|update
argument_list|,
name|akey
argument_list|)
block|;
if|if
condition|(
name|node
operator|==
name|e
condition|)
name|node
operator|=
name|node_create
argument_list|(
name|d
argument_list|,
name|update
argument_list|,
name|akey
argument_list|,
name|T
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|concrete
argument_list|(
name|node
argument_list|)
operator|->
name|value
return|;
end_return
begin_expr_stmt
unit|}  template
DECL|variable|Key
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|variable|Key
DECL|function|count
name|Q_INLINE_TEMPLATE
name|int
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|count
argument_list|(
argument|const Key&akey
argument_list|)
specifier|const
block|{
name|int
name|cnt
operator|=
literal|0
block|;
name|QMapData
operator|::
name|Node
operator|*
name|node
operator|=
name|findNode
argument_list|(
name|akey
argument_list|)
block|;
if|if
condition|(
name|node
operator|!=
name|e
condition|)
block|{
do|do
block|{
operator|++
name|cnt
expr_stmt|;
name|node
operator|=
name|node
operator|->
name|forward
index|[
literal|0
index|]
expr_stmt|;
block|}
end_expr_stmt
begin_while
while|while
condition|(
name|node
operator|!=
name|e
operator|&&
operator|!
name|qMapLessThanKey
operator|<
name|Key
operator|>
operator|(
name|akey
operator|,
name|concrete
argument_list|(
name|node
argument_list|)
operator|->
name|key
operator|)
condition|)
empty_stmt|;
end_while
begin_expr_stmt
unit|}     return
name|cnt
expr_stmt|;
end_expr_stmt
begin_expr_stmt
unit|}  template
DECL|variable|Key
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|variable|Key
DECL|function|contains
name|Q_INLINE_TEMPLATE
name|bool
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|contains
argument_list|(
argument|const Key&akey
argument_list|)
specifier|const
block|{
return|return
name|findNode
argument_list|(
name|akey
argument_list|)
operator|!=
name|e
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|variable|Key
name|template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|variable|Key
DECL|variable|Key
DECL|function|insert
name|Q_INLINE_TEMPLATE
name|typename
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|iterator
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|insert
argument_list|(
argument|const Key&akey
argument_list|,
argument|const T&avalue
argument_list|)
block|{
name|detach
argument_list|()
block|;
name|QMapData
operator|::
name|Node
operator|*
name|update
index|[
name|QMapData
operator|::
name|LastLevel
operator|+
literal|1
index|]
block|;
name|QMapData
operator|::
name|Node
operator|*
name|node
operator|=
name|mutableFindNode
argument_list|(
name|update
argument_list|,
name|akey
argument_list|)
block|;
if|if
condition|(
name|node
operator|==
name|e
condition|)
block|{
name|node
operator|=
name|node_create
argument_list|(
name|d
argument_list|,
name|update
argument_list|,
name|akey
argument_list|,
name|avalue
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_else
else|else
block|{
name|concrete
argument_list|(
name|node
argument_list|)
operator|->
name|value
operator|=
name|avalue
expr_stmt|;
block|}
end_else
begin_return
return|return
name|iterator
argument_list|(
name|node
argument_list|)
return|;
end_return
begin_expr_stmt
unit|}  template
DECL|variable|Key
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|variable|Key
DECL|variable|Key
DECL|function|insertMulti
name|Q_INLINE_TEMPLATE
name|typename
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|iterator
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|insertMulti
argument_list|(
argument|const Key&akey
argument_list|,
argument|const T&avalue
argument_list|)
block|{
name|detach
argument_list|()
block|;
name|QMapData
operator|::
name|Node
operator|*
name|update
index|[
name|QMapData
operator|::
name|LastLevel
operator|+
literal|1
index|]
block|;
name|mutableFindNode
argument_list|(
name|update
argument_list|,
name|akey
argument_list|)
block|;
return|return
name|iterator
argument_list|(
name|node_create
argument_list|(
name|d
argument_list|,
name|update
argument_list|,
name|akey
argument_list|,
name|avalue
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|variable|Key
name|template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|variable|Key
DECL|variable|Key
DECL|function|find
name|Q_INLINE_TEMPLATE
name|typename
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|const_iterator
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|find
argument_list|(
argument|const Key&akey
argument_list|)
specifier|const
block|{
return|return
name|const_iterator
argument_list|(
name|findNode
argument_list|(
name|akey
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|variable|Key
name|template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|variable|Key
DECL|variable|Key
DECL|function|constFind
name|Q_INLINE_TEMPLATE
name|typename
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|const_iterator
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|constFind
argument_list|(
argument|const Key&akey
argument_list|)
specifier|const
block|{
return|return
name|const_iterator
argument_list|(
name|findNode
argument_list|(
name|akey
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|variable|Key
name|template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|variable|Key
DECL|variable|Key
DECL|function|find
name|Q_INLINE_TEMPLATE
name|typename
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|iterator
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|find
argument_list|(
argument|const Key&akey
argument_list|)
block|{
name|detach
argument_list|()
block|;
return|return
name|iterator
argument_list|(
name|findNode
argument_list|(
name|akey
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|variable|Key
name|template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|variable|Key
DECL|variable|Key
DECL|function|unite
name|Q_INLINE_TEMPLATE
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|&
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|unite
argument_list|(
argument|const QMap<Key
argument_list|,
argument|T>&other
argument_list|)
block|{
name|QMap
operator|<
name|Key
block|,
name|T
operator|>
name|copy
argument_list|(
name|other
argument_list|)
block|;
name|const_iterator
name|it
operator|=
name|copy
operator|.
name|constEnd
argument_list|()
block|;
specifier|const
name|const_iterator
name|b
operator|=
name|copy
operator|.
name|constBegin
argument_list|()
block|;
while|while
condition|(
name|it
operator|!=
name|b
condition|)
block|{
operator|--
name|it
expr_stmt|;
name|insertMulti
argument_list|(
name|it
operator|.
name|key
argument_list|()
argument_list|,
name|it
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_return
return|return
operator|*
name|this
return|;
end_return
begin_expr_stmt
unit|}  template
DECL|variable|Key
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|variable|Key
DECL|function|freeData
name|Q_OUTOFLINE_TEMPLATE
name|void
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|freeData
argument_list|(
argument|QMapData *x
argument_list|)
block|{
if|if
condition|(
name|QTypeInfo
operator|<
name|Key
operator|>
operator|::
name|isComplex
operator|||
name|QTypeInfo
operator|<
name|T
operator|>
operator|::
name|isComplex
condition|)
block|{
name|QMapData
modifier|*
name|cur
init|=
name|x
decl_stmt|;
name|QMapData
modifier|*
name|next
init|=
name|cur
operator|->
name|forward
index|[
literal|0
index|]
decl_stmt|;
while|while
condition|(
name|next
operator|!=
name|x
condition|)
block|{
name|cur
operator|=
name|next
expr_stmt|;
name|next
operator|=
name|cur
operator|->
name|forward
index|[
literal|0
index|]
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|_MSC_VER
argument_list|)
pragma|#
directive|pragma
name|warning
name|(
name|disable
name|:
name|4189
name|)
endif|#
directive|endif
name|Node
modifier|*
name|concreteNode
init|=
name|concrete
argument_list|(
name|reinterpret_cast
operator|<
name|QMapData
operator|::
name|Node
operator|*
operator|>
operator|(
name|cur
operator|)
argument_list|)
decl_stmt|;
name|concreteNode
operator|->
name|key
operator|.
expr|~
name|Key
argument_list|()
expr_stmt|;
name|concreteNode
operator|->
name|value
operator|.
expr|~
name|T
argument_list|()
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|_MSC_VER
argument_list|)
pragma|#
directive|pragma
name|warning
name|(
name|default
name|:
name|4189
name|)
endif|#
directive|endif
block|}
end_expr_stmt
begin_expr_stmt
unit|}     x
operator|->
name|continueFreeData
argument_list|(
name|payload
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
unit|}  template
DECL|variable|Key
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|variable|Key
DECL|function|remove
name|Q_OUTOFLINE_TEMPLATE
name|int
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|remove
argument_list|(
argument|const Key&akey
argument_list|)
block|{
name|detach
argument_list|()
block|;
name|QMapData
operator|::
name|Node
operator|*
name|update
index|[
name|QMapData
operator|::
name|LastLevel
operator|+
literal|1
index|]
block|;
name|QMapData
operator|::
name|Node
operator|*
name|cur
operator|=
name|e
block|;
name|QMapData
operator|::
name|Node
operator|*
name|next
operator|=
name|e
block|;
name|int
name|oldSize
operator|=
name|d
operator|->
name|size
block|;
for|for
control|(
name|int
name|i
init|=
name|d
operator|->
name|topLevel
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
while|while
condition|(
operator|(
name|next
operator|=
name|cur
operator|->
name|forward
index|[
name|i
index|]
operator|)
operator|!=
name|e
operator|&&
name|qMapLessThanKey
operator|<
name|Key
operator|>
operator|(
name|concrete
argument_list|(
name|next
argument_list|)
operator|->
name|key
operator|,
name|akey
operator|)
condition|)
name|cur
operator|=
name|next
expr_stmt|;
name|update
index|[
name|i
index|]
operator|=
name|cur
expr_stmt|;
block|}
end_expr_stmt
begin_if
if|if
condition|(
name|next
operator|!=
name|e
operator|&&
operator|!
name|qMapLessThanKey
operator|<
name|Key
operator|>
operator|(
name|akey
operator|,
name|concrete
argument_list|(
name|next
argument_list|)
operator|->
name|key
operator|)
condition|)
block|{
name|bool
name|deleteNext
init|=
name|true
decl_stmt|;
do|do
block|{
name|cur
operator|=
name|next
expr_stmt|;
name|next
operator|=
name|cur
operator|->
name|forward
index|[
literal|0
index|]
expr_stmt|;
name|deleteNext
operator|=
operator|(
name|next
operator|!=
name|e
operator|&&
operator|!
name|qMapLessThanKey
operator|<
name|Key
operator|>
operator|(
name|concrete
argument_list|(
name|cur
argument_list|)
operator|->
name|key
operator|,
name|concrete
argument_list|(
name|next
argument_list|)
operator|->
name|key
operator|)
operator|)
expr_stmt|;
name|concrete
argument_list|(
name|cur
argument_list|)
operator|->
name|key
operator|.
expr|~
name|Key
argument_list|()
expr_stmt|;
name|concrete
argument_list|(
name|cur
argument_list|)
operator|->
name|value
operator|.
expr|~
name|T
argument_list|()
expr_stmt|;
name|d
operator|->
name|node_delete
argument_list|(
name|update
argument_list|,
name|payload
argument_list|()
argument_list|,
name|cur
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|deleteNext
condition|)
do|;
block|}
end_if
begin_return
return|return
name|oldSize
operator|-
name|d
operator|->
name|size
return|;
end_return
begin_expr_stmt
unit|}  template
DECL|variable|Key
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|variable|Key
DECL|function|take
name|Q_OUTOFLINE_TEMPLATE
name|T
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|take
argument_list|(
argument|const Key&akey
argument_list|)
block|{
name|detach
argument_list|()
block|;
name|QMapData
operator|::
name|Node
operator|*
name|update
index|[
name|QMapData
operator|::
name|LastLevel
operator|+
literal|1
index|]
block|;
name|QMapData
operator|::
name|Node
operator|*
name|cur
operator|=
name|e
block|;
name|QMapData
operator|::
name|Node
operator|*
name|next
operator|=
name|e
block|;
for|for
control|(
name|int
name|i
init|=
name|d
operator|->
name|topLevel
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
while|while
condition|(
operator|(
name|next
operator|=
name|cur
operator|->
name|forward
index|[
name|i
index|]
operator|)
operator|!=
name|e
operator|&&
name|qMapLessThanKey
operator|<
name|Key
operator|>
operator|(
name|concrete
argument_list|(
name|next
argument_list|)
operator|->
name|key
operator|,
name|akey
operator|)
condition|)
name|cur
operator|=
name|next
expr_stmt|;
name|update
index|[
name|i
index|]
operator|=
name|cur
expr_stmt|;
block|}
end_expr_stmt
begin_if
if|if
condition|(
name|next
operator|!=
name|e
operator|&&
operator|!
name|qMapLessThanKey
operator|<
name|Key
operator|>
operator|(
name|akey
operator|,
name|concrete
argument_list|(
name|next
argument_list|)
operator|->
name|key
operator|)
condition|)
block|{
name|T
name|t
init|=
name|concrete
argument_list|(
name|next
argument_list|)
operator|->
name|value
decl_stmt|;
name|concrete
argument_list|(
name|next
argument_list|)
operator|->
name|key
operator|.
expr|~
name|Key
argument_list|()
expr_stmt|;
name|concrete
argument_list|(
name|next
argument_list|)
operator|->
name|value
operator|.
expr|~
name|T
argument_list|()
expr_stmt|;
name|d
operator|->
name|node_delete
argument_list|(
name|update
argument_list|,
name|payload
argument_list|()
argument_list|,
name|next
argument_list|)
expr_stmt|;
return|return
name|t
return|;
block|}
end_if
begin_return
return|return
name|T
argument_list|()
return|;
end_return
begin_expr_stmt
unit|}  template
DECL|variable|Key
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|variable|Key
DECL|variable|Key
DECL|function|erase
name|Q_OUTOFLINE_TEMPLATE
name|typename
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|iterator
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|erase
argument_list|(
argument|iterator it
argument_list|)
block|{
name|QMapData
operator|::
name|Node
operator|*
name|update
index|[
name|QMapData
operator|::
name|LastLevel
operator|+
literal|1
index|]
block|;
name|QMapData
operator|::
name|Node
operator|*
name|cur
operator|=
name|e
block|;
name|QMapData
operator|::
name|Node
operator|*
name|next
operator|=
name|e
block|;
if|if
condition|(
name|it
operator|==
name|iterator
argument_list|(
name|e
argument_list|)
condition|)
return|return
name|it
return|;
end_expr_stmt
begin_for
for|for
control|(
name|int
name|i
init|=
name|d
operator|->
name|topLevel
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
while|while
condition|(
operator|(
name|next
operator|=
name|cur
operator|->
name|forward
index|[
name|i
index|]
operator|)
operator|!=
name|e
operator|&&
name|qMapLessThanKey
operator|<
name|Key
operator|>
operator|(
name|concrete
argument_list|(
name|next
argument_list|)
operator|->
name|key
operator|,
name|it
operator|.
name|key
argument_list|()
operator|)
condition|)
name|cur
operator|=
name|next
expr_stmt|;
name|update
index|[
name|i
index|]
operator|=
name|cur
expr_stmt|;
block|}
end_for
begin_while
while|while
condition|(
name|next
operator|!=
name|e
condition|)
block|{
name|cur
operator|=
name|next
expr_stmt|;
name|next
operator|=
name|cur
operator|->
name|forward
index|[
literal|0
index|]
expr_stmt|;
if|if
condition|(
name|cur
operator|==
name|it
condition|)
block|{
name|concrete
argument_list|(
name|cur
argument_list|)
operator|->
name|key
operator|.
expr|~
name|Key
argument_list|()
expr_stmt|;
name|concrete
argument_list|(
name|cur
argument_list|)
operator|->
name|value
operator|.
expr|~
name|T
argument_list|()
expr_stmt|;
name|d
operator|->
name|node_delete
argument_list|(
name|update
argument_list|,
name|payload
argument_list|()
argument_list|,
name|cur
argument_list|)
expr_stmt|;
return|return
name|iterator
argument_list|(
name|next
argument_list|)
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|d
operator|->
name|topLevel
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|update
index|[
name|i
index|]
operator|->
name|forward
index|[
name|i
index|]
operator|!=
name|cur
condition|)
break|break;
name|update
index|[
name|i
index|]
operator|=
name|cur
expr_stmt|;
block|}
block|}
end_while
begin_return
return|return
name|end
argument_list|()
return|;
end_return
begin_expr_stmt
unit|}  template
DECL|variable|Key
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|variable|Key
DECL|function|detach_helper
name|Q_OUTOFLINE_TEMPLATE
name|void
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|detach_helper
argument_list|()
block|{
expr|union
block|{
name|QMapData
operator|*
name|d
block|;
name|QMapData
operator|::
name|Node
operator|*
name|e
block|; }
name|x
block|;
name|x
operator|.
name|d
operator|=
name|QMapData
operator|::
name|createData
argument_list|(
name|alignment
argument_list|()
argument_list|)
block|;
if|if
condition|(
name|d
operator|->
name|size
condition|)
block|{
name|x
operator|.
name|d
operator|->
name|insertInOrder
operator|=
name|true
expr_stmt|;
name|QMapData
operator|::
name|Node
operator|*
name|update
index|[
name|QMapData
operator|::
name|LastLevel
operator|+
literal|1
index|]
expr_stmt|;
name|QMapData
operator|::
name|Node
operator|*
name|cur
operator|=
name|e
operator|->
name|forward
index|[
literal|0
index|]
expr_stmt|;
name|update
index|[
literal|0
index|]
operator|=
name|x
operator|.
name|e
expr_stmt|;
while|while
condition|(
name|cur
operator|!=
name|e
condition|)
block|{
name|QT_TRY
block|{
name|Node
modifier|*
name|concreteNode
init|=
name|concrete
argument_list|(
name|cur
argument_list|)
decl_stmt|;
name|node_create
argument_list|(
name|x
operator|.
name|d
argument_list|,
name|update
argument_list|,
name|concreteNode
operator|->
name|key
argument_list|,
name|concreteNode
operator|->
name|value
argument_list|)
expr_stmt|;
block|}
name|QT_CATCH
argument_list|(
argument|...
argument_list|)
block|{
name|freeData
argument_list|(
name|x
operator|.
name|d
argument_list|)
block|;
name|QT_RETHROW
block|;             }
name|cur
operator|=
name|cur
operator|->
name|forward
index|[
literal|0
index|]
expr_stmt|;
end_expr_stmt
begin_expr_stmt
unit|}         x
operator|.
name|d
operator|->
name|insertInOrder
operator|=
name|false
expr_stmt|;
end_expr_stmt
begin_expr_stmt
unit|}     if
operator|(
operator|!
name|d
operator|->
name|ref
operator|.
name|deref
argument_list|()
operator|)
name|freeData
argument_list|(
name|d
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|d
operator|=
name|x
operator|.
name|d
expr_stmt|;
end_expr_stmt
begin_expr_stmt
unit|}  template
DECL|variable|Key
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|variable|Key
DECL|function|mutableFindNode
name|Q_OUTOFLINE_TEMPLATE
name|QMapData
operator|::
name|Node
operator|*
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|mutableFindNode
argument_list|(
argument|QMapData::Node *aupdate[]
argument_list|,
argument|const Key&akey
argument_list|)
specifier|const
block|{
name|QMapData
operator|::
name|Node
operator|*
name|cur
operator|=
name|e
block|;
name|QMapData
operator|::
name|Node
operator|*
name|next
operator|=
name|e
block|;
for|for
control|(
name|int
name|i
init|=
name|d
operator|->
name|topLevel
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
while|while
condition|(
operator|(
name|next
operator|=
name|cur
operator|->
name|forward
index|[
name|i
index|]
operator|)
operator|!=
name|e
operator|&&
name|qMapLessThanKey
operator|<
name|Key
operator|>
operator|(
name|concrete
argument_list|(
name|next
argument_list|)
operator|->
name|key
operator|,
name|akey
operator|)
condition|)
name|cur
operator|=
name|next
expr_stmt|;
name|aupdate
index|[
name|i
index|]
operator|=
name|cur
expr_stmt|;
block|}
end_expr_stmt
begin_if
if|if
condition|(
name|next
operator|!=
name|e
operator|&&
operator|!
name|qMapLessThanKey
operator|<
name|Key
operator|>
operator|(
name|akey
operator|,
name|concrete
argument_list|(
name|next
argument_list|)
operator|->
name|key
operator|)
condition|)
block|{
return|return
name|next
return|;
block|}
else|else
block|{
return|return
name|e
return|;
block|}
end_if
begin_expr_stmt
unit|}  template
DECL|variable|Key
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|variable|Key
DECL|function|uniqueKeys
name|Q_OUTOFLINE_TEMPLATE
name|QList
operator|<
name|Key
operator|>
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|uniqueKeys
argument_list|()
specifier|const
block|{
name|QList
operator|<
name|Key
operator|>
name|res
block|;
name|res
operator|.
name|reserve
argument_list|(
name|size
argument_list|()
argument_list|)
block|;
comment|// May be too much, but assume short lifetime
name|const_iterator
name|i
operator|=
name|begin
argument_list|()
block|;
if|if
condition|(
name|i
operator|!=
name|end
argument_list|()
condition|)
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
specifier|const
name|Key
modifier|&
name|aKey
init|=
name|i
operator|.
name|key
argument_list|()
decl_stmt|;
name|res
operator|.
name|append
argument_list|(
name|aKey
argument_list|)
expr_stmt|;
do|do
block|{
if|if
condition|(
operator|++
name|i
operator|==
name|end
argument_list|()
condition|)
goto|goto
name|break_out_of_outer_loop
goto|;
block|}
end_expr_stmt
begin_while
while|while
condition|(
operator|!
operator|(
name|aKey
operator|<
name|i
operator|.
name|key
argument_list|()
operator|)
condition|)
empty_stmt|;
end_while
begin_comment
comment|// loop while (key == i.key())
end_comment
begin_label
unit|}     }
name|break_out_of_outer_loop
label|:
end_label
begin_return
return|return
name|res
return|;
end_return
begin_expr_stmt
unit|}  template
DECL|variable|Key
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|variable|Key
DECL|function|keys
name|Q_OUTOFLINE_TEMPLATE
name|QList
operator|<
name|Key
operator|>
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|keys
argument_list|()
specifier|const
block|{
name|QList
operator|<
name|Key
operator|>
name|res
block|;
name|res
operator|.
name|reserve
argument_list|(
name|size
argument_list|()
argument_list|)
block|;
name|const_iterator
name|i
operator|=
name|begin
argument_list|()
block|;
while|while
condition|(
name|i
operator|!=
name|end
argument_list|()
condition|)
block|{
name|res
operator|.
name|append
argument_list|(
name|i
operator|.
name|key
argument_list|()
argument_list|)
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
end_expr_stmt
begin_return
return|return
name|res
return|;
end_return
begin_expr_stmt
unit|}  template
DECL|variable|Key
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|variable|Key
DECL|function|keys
name|Q_OUTOFLINE_TEMPLATE
name|QList
operator|<
name|Key
operator|>
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|keys
argument_list|(
argument|const T&avalue
argument_list|)
specifier|const
block|{
name|QList
operator|<
name|Key
operator|>
name|res
block|;
name|const_iterator
name|i
operator|=
name|begin
argument_list|()
block|;
while|while
condition|(
name|i
operator|!=
name|end
argument_list|()
condition|)
block|{
if|if
condition|(
name|i
operator|.
name|value
argument_list|()
operator|==
name|avalue
condition|)
name|res
operator|.
name|append
argument_list|(
name|i
operator|.
name|key
argument_list|()
argument_list|)
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
end_expr_stmt
begin_return
return|return
name|res
return|;
end_return
begin_expr_stmt
unit|}  template
DECL|variable|Key
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|variable|Key
DECL|function|key
name|Q_OUTOFLINE_TEMPLATE
specifier|const
name|Key
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|key
argument_list|(
argument|const T&avalue
argument_list|)
specifier|const
block|{
return|return
name|key
argument_list|(
name|avalue
argument_list|,
name|Key
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|variable|Key
name|template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|variable|Key
DECL|function|key
name|Q_OUTOFLINE_TEMPLATE
specifier|const
name|Key
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|key
argument_list|(
argument|const T&avalue
argument_list|,
argument|const Key&defaultKey
argument_list|)
specifier|const
block|{
name|const_iterator
name|i
operator|=
name|begin
argument_list|()
block|;
while|while
condition|(
name|i
operator|!=
name|end
argument_list|()
condition|)
block|{
if|if
condition|(
name|i
operator|.
name|value
argument_list|()
operator|==
name|avalue
condition|)
return|return
name|i
operator|.
name|key
argument_list|()
return|;
operator|++
name|i
expr_stmt|;
block|}
end_expr_stmt
begin_return
return|return
name|defaultKey
return|;
end_return
begin_expr_stmt
unit|}  template
DECL|variable|Key
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|variable|Key
DECL|function|values
name|Q_OUTOFLINE_TEMPLATE
name|QList
operator|<
name|T
operator|>
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|values
argument_list|()
specifier|const
block|{
name|QList
operator|<
name|T
operator|>
name|res
block|;
name|res
operator|.
name|reserve
argument_list|(
name|size
argument_list|()
argument_list|)
block|;
name|const_iterator
name|i
operator|=
name|begin
argument_list|()
block|;
while|while
condition|(
name|i
operator|!=
name|end
argument_list|()
condition|)
block|{
name|res
operator|.
name|append
argument_list|(
name|i
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
end_expr_stmt
begin_return
return|return
name|res
return|;
end_return
begin_expr_stmt
unit|}  template
DECL|variable|Key
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|variable|Key
DECL|function|values
name|Q_OUTOFLINE_TEMPLATE
name|QList
operator|<
name|T
operator|>
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|values
argument_list|(
argument|const Key&akey
argument_list|)
specifier|const
block|{
name|QList
operator|<
name|T
operator|>
name|res
block|;
name|QMapData
operator|::
name|Node
operator|*
name|node
operator|=
name|findNode
argument_list|(
name|akey
argument_list|)
block|;
if|if
condition|(
name|node
operator|!=
name|e
condition|)
block|{
do|do
block|{
name|res
operator|.
name|append
argument_list|(
name|concrete
argument_list|(
name|node
argument_list|)
operator|->
name|value
argument_list|)
expr_stmt|;
name|node
operator|=
name|node
operator|->
name|forward
index|[
literal|0
index|]
expr_stmt|;
block|}
end_expr_stmt
begin_while
while|while
condition|(
name|node
operator|!=
name|e
operator|&&
operator|!
name|qMapLessThanKey
operator|<
name|Key
operator|>
operator|(
name|akey
operator|,
name|concrete
argument_list|(
name|node
argument_list|)
operator|->
name|key
operator|)
condition|)
empty_stmt|;
end_while
begin_expr_stmt
unit|}     return
name|res
expr_stmt|;
end_expr_stmt
begin_expr_stmt
unit|}  template
DECL|variable|Key
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|variable|Key
name|Q_INLINE_TEMPLATE
name|typename
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|const_iterator
DECL|variable|Key
DECL|function|lowerBound
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|lowerBound
argument_list|(
argument|const Key&akey
argument_list|)
specifier|const
block|{
name|QMapData
operator|::
name|Node
operator|*
name|update
index|[
name|QMapData
operator|::
name|LastLevel
operator|+
literal|1
index|]
block|;
name|mutableFindNode
argument_list|(
name|update
argument_list|,
name|akey
argument_list|)
block|;
return|return
name|const_iterator
argument_list|(
name|update
index|[
literal|0
index|]
operator|->
name|forward
index|[
literal|0
index|]
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|variable|Key
name|template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|variable|Key
DECL|variable|Key
DECL|function|lowerBound
name|Q_INLINE_TEMPLATE
name|typename
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|iterator
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|lowerBound
argument_list|(
argument|const Key&akey
argument_list|)
block|{
name|detach
argument_list|()
block|;
return|return
name|static_cast
operator|<
name|QMapData
operator|::
name|Node
operator|*
operator|>
operator|(
name|const_cast
operator|<
specifier|const
name|QMap
operator|*
operator|>
operator|(
name|this
operator|)
operator|->
name|lowerBound
argument_list|(
name|akey
argument_list|)
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|variable|Key
name|template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|variable|Key
name|Q_INLINE_TEMPLATE
name|typename
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|const_iterator
DECL|variable|Key
DECL|function|upperBound
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|upperBound
argument_list|(
argument|const Key&akey
argument_list|)
specifier|const
block|{
name|QMapData
operator|::
name|Node
operator|*
name|update
index|[
name|QMapData
operator|::
name|LastLevel
operator|+
literal|1
index|]
block|;
name|mutableFindNode
argument_list|(
name|update
argument_list|,
name|akey
argument_list|)
block|;
name|QMapData
operator|::
name|Node
operator|*
name|node
operator|=
name|update
index|[
literal|0
index|]
operator|->
name|forward
index|[
literal|0
index|]
block|;
while|while
condition|(
name|node
operator|!=
name|e
operator|&&
operator|!
name|qMapLessThanKey
operator|<
name|Key
operator|>
operator|(
name|akey
operator|,
name|concrete
argument_list|(
name|node
argument_list|)
operator|->
name|key
operator|)
condition|)
name|node
operator|=
name|node
operator|->
name|forward
index|[
literal|0
index|]
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|const_iterator
argument_list|(
name|node
argument_list|)
return|;
end_return
begin_expr_stmt
unit|}  template
DECL|variable|Key
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|variable|Key
DECL|variable|Key
DECL|function|upperBound
name|Q_INLINE_TEMPLATE
name|typename
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|iterator
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|upperBound
argument_list|(
argument|const Key&akey
argument_list|)
block|{
name|detach
argument_list|()
block|;
return|return
name|static_cast
operator|<
name|QMapData
operator|::
name|Node
operator|*
operator|>
operator|(
name|const_cast
operator|<
specifier|const
name|QMap
operator|*
operator|>
operator|(
name|this
operator|)
operator|->
name|upperBound
argument_list|(
name|akey
argument_list|)
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|variable|Key
name|template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|variable|Key
DECL|function|operator
name|Q_OUTOFLINE_TEMPLATE
name|bool
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|operator
operator|==
operator|(
specifier|const
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|&
name|other
operator|)
specifier|const
block|{
if|if
condition|(
name|size
argument_list|()
operator|!=
name|other
operator|.
name|size
argument_list|()
condition|)
return|return
name|false
return|;
end_expr_stmt
begin_if
if|if
condition|(
name|d
operator|==
name|other
operator|.
name|d
condition|)
return|return
name|true
return|;
end_if
begin_decl_stmt
name|const_iterator
name|it1
init|=
name|begin
argument_list|()
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|const_iterator
name|it2
init|=
name|other
operator|.
name|begin
argument_list|()
decl_stmt|;
end_decl_stmt
begin_while
while|while
condition|(
name|it1
operator|!=
name|end
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|it1
operator|.
name|value
argument_list|()
operator|==
name|it2
operator|.
name|value
argument_list|()
operator|)
operator|||
name|qMapLessThanKey
argument_list|(
name|it1
operator|.
name|key
argument_list|()
argument_list|,
name|it2
operator|.
name|key
argument_list|()
argument_list|)
operator|||
name|qMapLessThanKey
argument_list|(
name|it2
operator|.
name|key
argument_list|()
argument_list|,
name|it1
operator|.
name|key
argument_list|()
argument_list|)
condition|)
return|return
name|false
return|;
operator|++
name|it2
expr_stmt|;
operator|++
name|it1
expr_stmt|;
block|}
end_while
begin_return
return|return
name|true
return|;
end_return
begin_ifndef
unit|}
ifndef|#
directive|ifndef
name|QT_NO_STL
end_ifndef
begin_expr_stmt
unit|template
DECL|variable|Key
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|variable|Key
DECL|function|QMap
name|Q_OUTOFLINE_TEMPLATE
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|QMap
argument_list|(
argument|const std::map<Key
argument_list|,
argument|T>&other
argument_list|)
block|{
name|d
operator|=
name|QMapData
operator|::
name|createData
argument_list|(
name|alignment
argument_list|()
argument_list|)
block|;
name|d
operator|->
name|insertInOrder
operator|=
name|true
block|;
name|typename
name|std
operator|::
name|map
operator|<
name|Key
block|,
name|T
operator|>
operator|::
name|const_iterator
name|it
operator|=
name|other
operator|.
name|end
argument_list|()
block|;
while|while
condition|(
name|it
operator|!=
name|other
operator|.
name|begin
argument_list|()
condition|)
block|{
operator|--
name|it
expr_stmt|;
name|insert
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|.
name|first
argument_list|,
operator|(
operator|*
name|it
operator|)
operator|.
name|second
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|insertInOrder
operator|=
name|false
expr_stmt|;
end_expr_stmt
begin_expr_stmt
unit|}  template
DECL|variable|Key
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|variable|Key
DECL|variable|Key
DECL|function|toStdMap
name|Q_OUTOFLINE_TEMPLATE
name|std
operator|::
name|map
operator|<
name|Key
operator|,
name|T
operator|>
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|toStdMap
argument_list|()
specifier|const
block|{
name|std
operator|::
name|map
operator|<
name|Key
block|,
name|T
operator|>
name|map
block|;
name|const_iterator
name|it
operator|=
name|end
argument_list|()
block|;
while|while
condition|(
name|it
operator|!=
name|begin
argument_list|()
condition|)
block|{
operator|--
name|it
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|std
operator|::
name|pair
operator|<
name|Key
argument_list|,
name|T
operator|>
operator|(
name|it
operator|.
name|key
argument_list|()
operator|,
name|it
operator|.
name|value
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_return
return|return
name|map
return|;
end_return
begin_endif
unit|}
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_STL
end_comment
begin_expr_stmt
unit|template
DECL|variable|Key
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|variable|Key
name|class
name|QMultiMap
operator|:
name|public
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
block|{
name|public
operator|:
name|QMultiMap
argument_list|()
block|{}
name|QMultiMap
argument_list|(
specifier|const
name|QMap
operator|<
name|Key
argument_list|,
name|T
operator|>
operator|&
name|other
argument_list|)
operator|:
name|QMap
operator|<
name|Key
block|,
name|T
operator|>
operator|(
name|other
operator|)
block|{}
specifier|inline
name|void
name|swap
argument_list|(
argument|QMultiMap<Key
argument_list|,
argument|T>&other
argument_list|)
block|{
name|QMap
operator|<
name|Key
block|,
name|T
operator|>
operator|::
name|swap
argument_list|(
name|other
argument_list|)
block|; }
specifier|inline
name|typename
name|QMap
operator|<
name|Key
block|,
name|T
operator|>
operator|::
name|iterator
name|replace
argument_list|(
argument|const Key&key
argument_list|,
argument|const T&value
argument_list|)
block|{
return|return
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|insert
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|inline
name|typename
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|iterator
name|insert
argument_list|(
argument|const Key&key
argument_list|,
argument|const T&value
argument_list|)
block|{
return|return
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|insertMulti
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QMultiMap
operator|&
name|operator
operator|+=
operator|(
specifier|const
name|QMultiMap
operator|&
name|other
operator|)
block|{
name|this
operator|->
name|unite
argument_list|(
name|other
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QMultiMap
name|operator
operator|+
operator|(
specifier|const
name|QMultiMap
operator|&
name|other
operator|)
specifier|const
block|{
name|QMultiMap
name|result
operator|=
operator|*
name|this
block|;
name|result
operator|+=
name|other
block|;
return|return
name|result
return|;
block|}
end_expr_stmt
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_NO_USING_KEYWORD
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_CC_RVCT
argument_list|)
end_if
begin_comment
comment|// RVCT compiler doesn't handle using-keyword right when used functions are overloaded in child class
end_comment
begin_expr_stmt
name|using
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|contains
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|using
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|remove
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|using
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|count
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|using
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|find
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|using
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|constFind
expr_stmt|;
end_expr_stmt
begin_else
else|#
directive|else
end_else
begin_decl_stmt
specifier|inline
name|bool
name|contains
argument_list|(
specifier|const
name|Key
operator|&
name|key
argument_list|)
decl|const
block|{
return|return
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|contains
argument_list|(
name|key
argument_list|)
return|;
block|}
end_decl_stmt
begin_function
specifier|inline
name|int
name|remove
parameter_list|(
specifier|const
name|Key
modifier|&
name|key
parameter_list|)
block|{
return|return
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|remove
argument_list|(
name|key
argument_list|)
return|;
block|}
end_function
begin_decl_stmt
specifier|inline
name|int
name|count
argument_list|(
specifier|const
name|Key
operator|&
name|key
argument_list|)
decl|const
block|{
return|return
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|count
argument_list|(
name|key
argument_list|)
return|;
block|}
end_decl_stmt
begin_expr_stmt
specifier|inline
name|int
name|count
argument_list|()
specifier|const
block|{
return|return
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|count
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|typename
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|iterator
name|find
argument_list|(
argument|const Key&key
argument_list|)
block|{
return|return
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|find
argument_list|(
name|key
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|typename
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|const_iterator
name|find
argument_list|(
argument|const Key&key
argument_list|)
specifier|const
block|{
return|return
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|find
argument_list|(
name|key
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|typename
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|const_iterator
name|constFind
argument_list|(
argument|const Key&key
argument_list|)
specifier|const
block|{
return|return
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|constFind
argument_list|(
name|key
argument_list|)
return|;
block|}
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|bool
name|contains
argument_list|(
specifier|const
name|Key
operator|&
name|key
argument_list|,
specifier|const
name|T
operator|&
name|value
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_function_decl
name|int
name|remove
parameter_list|(
specifier|const
name|Key
modifier|&
name|key
parameter_list|,
specifier|const
name|T
modifier|&
name|value
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
name|int
name|count
argument_list|(
specifier|const
name|Key
operator|&
name|key
argument_list|,
specifier|const
name|T
operator|&
name|value
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|typename
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|iterator
name|find
argument_list|(
argument|const Key&key
argument_list|,
argument|const T&value
argument_list|)
block|{
name|typename
name|QMap
operator|<
name|Key
block|,
name|T
operator|>
operator|::
name|iterator
name|i
argument_list|(
name|find
argument_list|(
name|key
argument_list|)
argument_list|)
block|;
name|typename
name|QMap
operator|<
name|Key
block|,
name|T
operator|>
operator|::
name|iterator
name|end
argument_list|(
name|this
operator|->
name|end
argument_list|()
argument_list|)
block|;
while|while
condition|(
name|i
operator|!=
name|end
operator|&&
operator|!
name|qMapLessThanKey
operator|<
name|Key
operator|>
operator|(
name|key
operator|,
name|i
operator|.
name|key
argument_list|()
operator|)
condition|)
block|{
if|if
condition|(
name|i
operator|.
name|value
argument_list|()
operator|==
name|value
condition|)
return|return
name|i
return|;
operator|++
name|i
expr_stmt|;
block|}
end_expr_stmt
begin_return
return|return
name|end
return|;
end_return
begin_expr_stmt
unit|}     typename
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|const_iterator
name|find
argument_list|(
argument|const Key&key
argument_list|,
argument|const T&value
argument_list|)
specifier|const
block|{
name|typename
name|QMap
operator|<
name|Key
block|,
name|T
operator|>
operator|::
name|const_iterator
name|i
argument_list|(
name|constFind
argument_list|(
name|key
argument_list|)
argument_list|)
block|;
name|typename
name|QMap
operator|<
name|Key
block|,
name|T
operator|>
operator|::
name|const_iterator
name|end
argument_list|(
name|QMap
operator|<
name|Key
argument_list|,
name|T
operator|>
operator|::
name|constEnd
argument_list|()
argument_list|)
block|;
while|while
condition|(
name|i
operator|!=
name|end
operator|&&
operator|!
name|qMapLessThanKey
operator|<
name|Key
operator|>
operator|(
name|key
operator|,
name|i
operator|.
name|key
argument_list|()
operator|)
condition|)
block|{
if|if
condition|(
name|i
operator|.
name|value
argument_list|()
operator|==
name|value
condition|)
return|return
name|i
return|;
operator|++
name|i
expr_stmt|;
block|}
end_expr_stmt
begin_return
return|return
name|end
return|;
end_return
begin_expr_stmt
unit|}     typename
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|const_iterator
name|constFind
argument_list|(
argument|const Key&key
argument_list|,
argument|const T&value
argument_list|)
specifier|const
block|{
return|return
name|find
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
end_expr_stmt
begin_label
name|private
label|:
end_label
begin_function_decl
name|T
modifier|&
name|operator
function_decl|[]
parameter_list|(
specifier|const
name|Key
modifier|&
name|key
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
specifier|const
name|T
name|operator
index|[]
argument_list|(
specifier|const
name|Key
operator|&
name|key
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_expr_stmt
unit|};
DECL|variable|Key
name|template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|variable|Key
DECL|function|contains
name|Q_INLINE_TEMPLATE
name|bool
name|QMultiMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|contains
argument_list|(
argument|const Key&key
argument_list|,
argument|const T&value
argument_list|)
specifier|const
block|{
return|return
name|constFind
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
operator|!=
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|constEnd
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|variable|Key
name|template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|variable|Key
DECL|function|remove
name|Q_INLINE_TEMPLATE
name|int
name|QMultiMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|remove
argument_list|(
argument|const Key&key
argument_list|,
argument|const T&value
argument_list|)
block|{
name|int
name|n
operator|=
literal|0
block|;
name|typename
name|QMap
operator|<
name|Key
block|,
name|T
operator|>
operator|::
name|iterator
name|i
argument_list|(
name|find
argument_list|(
name|key
argument_list|)
argument_list|)
block|;
name|typename
name|QMap
operator|<
name|Key
block|,
name|T
operator|>
operator|::
name|iterator
name|end
argument_list|(
name|QMap
operator|<
name|Key
argument_list|,
name|T
operator|>
operator|::
name|end
argument_list|()
argument_list|)
block|;
while|while
condition|(
name|i
operator|!=
name|end
operator|&&
operator|!
name|qMapLessThanKey
operator|<
name|Key
operator|>
operator|(
name|key
operator|,
name|i
operator|.
name|key
argument_list|()
operator|)
condition|)
block|{
if|if
condition|(
name|i
operator|.
name|value
argument_list|()
operator|==
name|value
condition|)
block|{
name|i
operator|=
name|this
operator|->
name|erase
argument_list|(
name|i
argument_list|)
expr_stmt|;
operator|++
name|n
expr_stmt|;
block|}
end_expr_stmt
begin_else
else|else
block|{
operator|++
name|i
expr_stmt|;
block|}
end_else
begin_expr_stmt
unit|}     return
name|n
expr_stmt|;
end_expr_stmt
begin_expr_stmt
unit|}  template
DECL|variable|Key
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|variable|Key
DECL|function|count
name|Q_INLINE_TEMPLATE
name|int
name|QMultiMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|count
argument_list|(
argument|const Key&key
argument_list|,
argument|const T&value
argument_list|)
specifier|const
block|{
name|int
name|n
operator|=
literal|0
block|;
name|typename
name|QMap
operator|<
name|Key
block|,
name|T
operator|>
operator|::
name|const_iterator
name|i
argument_list|(
name|constFind
argument_list|(
name|key
argument_list|)
argument_list|)
block|;
name|typename
name|QMap
operator|<
name|Key
block|,
name|T
operator|>
operator|::
name|const_iterator
name|end
argument_list|(
name|QMap
operator|<
name|Key
argument_list|,
name|T
operator|>
operator|::
name|constEnd
argument_list|()
argument_list|)
block|;
while|while
condition|(
name|i
operator|!=
name|end
operator|&&
operator|!
name|qMapLessThanKey
operator|<
name|Key
operator|>
operator|(
name|key
operator|,
name|i
operator|.
name|key
argument_list|()
operator|)
condition|)
block|{
if|if
condition|(
name|i
operator|.
name|value
argument_list|()
operator|==
name|value
condition|)
operator|++
name|n
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
end_expr_stmt
begin_return
return|return
name|n
return|;
end_return
begin_expr_stmt
unit|}  Q_DECLARE_ASSOCIATIVE_ITERATOR
operator|(
name|Map
operator|)
name|Q_DECLARE_MUTABLE_ASSOCIATIVE_ITERATOR
argument_list|(
argument|Map
argument_list|)
name|QT_END_NAMESPACE
name|QT_END_HEADER
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QMAP_H
end_comment
end_unit
