begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qlocale_blackberry.h"
end_include
begin_include
include|#
directive|include
file|"qlocale_p.h"
end_include
begin_include
include|#
directive|include
file|"qdatetime.h"
end_include
begin_include
include|#
directive|include
file|"qcoreapplication.h"
end_include
begin_include
include|#
directive|include
file|"private/qcore_unix_p.h"
end_include
begin_include
include|#
directive|include
file|<errno.h>
end_include
begin_include
include|#
directive|include
file|<sys/pps.h>
end_include
begin_include
include|#
directive|include
file|<unistd.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
ifndef|#
directive|ifndef
name|QT_NO_SYSTEMLOCALE
DECL|variable|ppsUomPath
specifier|static
specifier|const
name|char
name|ppsUomPath
index|[]
init|=
literal|"/pps/services/locale/uom"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|ppsRegionLocalePath
specifier|static
specifier|const
name|char
name|ppsRegionLocalePath
index|[]
init|=
literal|"/pps/services/locale/settings"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|ppsLanguageLocalePath
specifier|static
specifier|const
name|char
name|ppsLanguageLocalePath
index|[]
init|=
literal|"/pps/services/confstr/_CS_LOCALE"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|ppsHourFormatPath
specifier|static
specifier|const
name|char
name|ppsHourFormatPath
index|[]
init|=
literal|"/pps/system/settings"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|MAX_PPS_SIZE
specifier|static
specifier|const
name|int
name|MAX_PPS_SIZE
init|=
literal|16000
decl_stmt|;
end_decl_stmt
begin_constructor
DECL|function|QBBSystemLocaleData
name|QBBSystemLocaleData
operator|::
name|QBBSystemLocaleData
parameter_list|()
member_init_list|:
name|languageNotifier
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|regionNotifier
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|measurementNotifier
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|hourNotifier
argument_list|(
literal|0
argument_list|)
block|{
comment|// Do not use qWarning to log warnings if qt_safe_open fails to open the pps file
comment|// since the user code may install a message handler that invokes QLocale API again
comment|// (i.e QDate, QDateTime, ...) which will cause a deadlock.
if|if
condition|(
operator|(
name|measurementFd
operator|=
name|qt_safe_open
argument_list|(
name|ppsUomPath
argument_list|,
name|O_RDONLY
argument_list|)
operator|)
operator|==
operator|-
literal|1
condition|)
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"Failed to open uom pps, errno=%d\n"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|regionFd
operator|=
name|qt_safe_open
argument_list|(
name|ppsRegionLocalePath
argument_list|,
name|O_RDONLY
argument_list|)
operator|)
operator|==
operator|-
literal|1
condition|)
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"Failed to open region pps, errno=%d\n"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|languageFd
operator|=
name|qt_safe_open
argument_list|(
name|ppsLanguageLocalePath
argument_list|,
name|O_RDONLY
argument_list|)
operator|)
operator|==
operator|-
literal|1
condition|)
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"Failed to open language pps, errno=%d\n"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|hourFd
operator|=
name|qt_safe_open
argument_list|(
name|ppsHourFormatPath
argument_list|,
name|O_RDONLY
argument_list|)
operator|)
operator|==
operator|-
literal|1
condition|)
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"Failed to open hour format pps, errno=%d\n"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
comment|// we cannot call this directly, because by the time this constructor is
comment|// called, the event dispatcher has not yet been created, causing the
comment|// subsequent call to QSocketNotifier constructor to fail.
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
name|this
argument_list|,
literal|"installSocketNotifiers"
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
expr_stmt|;
name|readLanguageLocale
argument_list|()
expr_stmt|;
name|readRegionLocale
argument_list|()
expr_stmt|;
name|readMeasurementSystem
argument_list|()
expr_stmt|;
name|readHourFormat
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QBBSystemLocaleData
name|QBBSystemLocaleData
operator|::
name|~
name|QBBSystemLocaleData
parameter_list|()
block|{
if|if
condition|(
name|measurementFd
operator|!=
operator|-
literal|1
condition|)
name|qt_safe_close
argument_list|(
name|measurementFd
argument_list|)
expr_stmt|;
if|if
condition|(
name|languageFd
operator|!=
operator|-
literal|1
condition|)
name|qt_safe_close
argument_list|(
name|languageFd
argument_list|)
expr_stmt|;
if|if
condition|(
name|regionFd
operator|!=
operator|-
literal|1
condition|)
name|qt_safe_close
argument_list|(
name|regionFd
argument_list|)
expr_stmt|;
if|if
condition|(
name|hourFd
operator|!=
operator|-
literal|1
condition|)
name|qt_safe_close
argument_list|(
name|hourFd
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|measurementSystem
name|uint
name|QBBSystemLocaleData
operator|::
name|measurementSystem
parameter_list|()
block|{
return|return
name|m_measurementSystem
return|;
block|}
end_function
begin_function
DECL|function|timeFormat
name|QVariant
name|QBBSystemLocaleData
operator|::
name|timeFormat
parameter_list|(
name|QLocale
operator|::
name|FormatType
name|formatType
parameter_list|)
block|{
return|return
name|getCorrectFormat
argument_list|(
name|regionLocale
argument_list|()
operator|.
name|timeFormat
argument_list|(
name|formatType
argument_list|)
argument_list|,
name|formatType
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|dateTimeFormat
name|QVariant
name|QBBSystemLocaleData
operator|::
name|dateTimeFormat
parameter_list|(
name|QLocale
operator|::
name|FormatType
name|formatType
parameter_list|)
block|{
return|return
name|getCorrectFormat
argument_list|(
name|regionLocale
argument_list|()
operator|.
name|dateTimeFormat
argument_list|(
name|formatType
argument_list|)
argument_list|,
name|formatType
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|languageLocale
name|QLocale
name|QBBSystemLocaleData
operator|::
name|languageLocale
parameter_list|()
block|{
if|if
condition|(
operator|!
name|lc_language
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|QLocale
argument_list|(
name|QLatin1String
argument_list|(
name|lc_language
argument_list|)
argument_list|)
return|;
return|return
name|QLocale
operator|::
name|c
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|regionLocale
name|QLocale
name|QBBSystemLocaleData
operator|::
name|regionLocale
parameter_list|()
block|{
if|if
condition|(
operator|!
name|lc_region
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|QLocale
argument_list|(
name|QLatin1String
argument_list|(
name|lc_region
argument_list|)
argument_list|)
return|;
return|return
name|QLocale
operator|::
name|c
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|installSocketNotifiers
name|void
name|QBBSystemLocaleData
operator|::
name|installSocketNotifiers
parameter_list|()
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|languageNotifier
operator|||
operator|!
name|regionNotifier
operator|||
operator|!
name|measurementNotifier
operator|||
operator|!
name|hourNotifier
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|QCoreApplication
operator|::
name|instance
argument_list|()
argument_list|)
expr_stmt|;
name|languageNotifier
operator|=
operator|new
name|QSocketNotifier
argument_list|(
name|languageFd
argument_list|,
name|QSocketNotifier
operator|::
name|Read
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|languageNotifier
argument_list|,
name|SIGNAL
argument_list|(
name|activated
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|readLanguageLocale
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|regionNotifier
operator|=
operator|new
name|QSocketNotifier
argument_list|(
name|regionFd
argument_list|,
name|QSocketNotifier
operator|::
name|Read
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|regionNotifier
argument_list|,
name|SIGNAL
argument_list|(
name|activated
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|readRegionLocale
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|measurementNotifier
operator|=
operator|new
name|QSocketNotifier
argument_list|(
name|measurementFd
argument_list|,
name|QSocketNotifier
operator|::
name|Read
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|measurementNotifier
argument_list|,
name|SIGNAL
argument_list|(
name|activated
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|readMeasurementSystem
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|hourNotifier
operator|=
operator|new
name|QSocketNotifier
argument_list|(
name|hourFd
argument_list|,
name|QSocketNotifier
operator|::
name|Read
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|hourNotifier
argument_list|,
name|SIGNAL
argument_list|(
name|activated
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|readHourFormat
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readLanguageLocale
name|void
name|QBBSystemLocaleData
operator|::
name|readLanguageLocale
parameter_list|()
block|{
name|lc_language
operator|=
name|readPpsValue
argument_list|(
literal|"_CS_LOCALE"
argument_list|,
name|languageFd
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readRegionLocale
name|void
name|QBBSystemLocaleData
operator|::
name|readRegionLocale
parameter_list|()
block|{
name|lc_region
operator|=
name|readPpsValue
argument_list|(
literal|"region"
argument_list|,
name|regionFd
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readMeasurementSystem
name|void
name|QBBSystemLocaleData
operator|::
name|readMeasurementSystem
parameter_list|()
block|{
name|QByteArray
name|measurement
init|=
name|readPpsValue
argument_list|(
literal|"uom"
argument_list|,
name|measurementFd
argument_list|)
decl_stmt|;
name|m_measurementSystem
operator|=
operator|(
name|qstrcmp
argument_list|(
name|measurement
argument_list|,
literal|"imperial"
argument_list|)
operator|==
literal|0
operator|)
condition|?
name|QLocale
operator|::
name|ImperialSystem
else|:
name|QLocale
operator|::
name|MetricSystem
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readHourFormat
name|void
name|QBBSystemLocaleData
operator|::
name|readHourFormat
parameter_list|()
block|{
name|QByteArray
name|hourFormat
init|=
name|readPpsValue
argument_list|(
literal|"hourFormat"
argument_list|,
name|hourFd
argument_list|)
decl_stmt|;
name|is24HourFormat
operator|=
operator|(
name|qstrcmp
argument_list|(
name|hourFormat
argument_list|,
literal|"24"
argument_list|)
operator|==
literal|0
operator|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readPpsValue
name|QByteArray
name|QBBSystemLocaleData
operator|::
name|readPpsValue
parameter_list|(
specifier|const
name|char
modifier|*
name|ppsObject
parameter_list|,
name|int
name|ppsFd
parameter_list|)
block|{
name|QByteArray
name|result
decl_stmt|;
if|if
condition|(
operator|!
name|ppsObject
operator|||
name|ppsFd
operator|==
operator|-
literal|1
condition|)
return|return
name|result
return|;
comment|// PPS objects are of unknown size, but must be read all at once.
comment|// Relying on the file size may not be a good idea since the size may change before reading.
comment|// Let's try with an initial size (512), and if the buffer is too small try with bigger one,
comment|// until we succeed or until other non buffer-size-related error occurs.
comment|// Using QVarLengthArray means the first try (of size == 512) uses a buffer on the stack - no allocation necessary.
comment|// Hopefully that covers most use cases.
name|int
name|bytes
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|char
argument_list|,
literal|512
argument_list|>
name|buffer
argument_list|(
literal|512
argument_list|)
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|errno
operator|=
literal|0
expr_stmt|;
name|bytes
operator|=
name|qt_safe_read
argument_list|(
name|ppsFd
argument_list|,
name|buffer
operator|.
name|data
argument_list|()
argument_list|,
name|buffer
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
specifier|const
name|bool
name|bufferIsTooSmall
init|=
operator|(
name|bytes
operator|==
operator|-
literal|1
operator|&&
name|errno
operator|==
name|EMSGSIZE
operator|&&
name|buffer
operator|.
name|size
argument_list|()
operator|<
name|MAX_PPS_SIZE
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|bufferIsTooSmall
condition|)
break|break;
name|buffer
operator|.
name|resize
argument_list|(
name|qMin
argument_list|(
name|buffer
operator|.
name|size
argument_list|()
operator|*
literal|2
argument_list|,
name|MAX_PPS_SIZE
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// This method is called in the ctor(), so do not use qWarning to log warnings
comment|// if qt_safe_read fails to read the pps file
comment|// since the user code may install a message handler that invokes QLocale API again
comment|// (i.e QDate, QDateTime, ...) which will cause a deadlock.
if|if
condition|(
name|bytes
operator|==
operator|-
literal|1
condition|)
block|{
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"Failed to read pps object:%s, errno=%d\n"
argument_list|,
name|ppsObject
argument_list|,
name|errno
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|// ensure data is null terminated
name|buffer
index|[
name|bytes
index|]
operator|=
literal|'\0'
expr_stmt|;
name|pps_decoder_t
name|ppsDecoder
decl_stmt|;
name|pps_decoder_initialize
argument_list|(
operator|&
name|ppsDecoder
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|pps_decoder_parse_pps_str
argument_list|(
operator|&
name|ppsDecoder
argument_list|,
name|buffer
operator|.
name|data
argument_list|()
argument_list|)
operator|==
name|PPS_DECODER_OK
condition|)
block|{
name|pps_decoder_push
argument_list|(
operator|&
name|ppsDecoder
argument_list|,
literal|0
argument_list|)
expr_stmt|;
specifier|const
name|char
modifier|*
name|ppsBuff
decl_stmt|;
if|if
condition|(
name|pps_decoder_get_string
argument_list|(
operator|&
name|ppsDecoder
argument_list|,
name|ppsObject
argument_list|,
operator|&
name|ppsBuff
argument_list|)
operator|==
name|PPS_DECODER_OK
condition|)
block|{
name|result
operator|=
name|ppsBuff
expr_stmt|;
block|}
else|else
block|{
name|int
name|val
decl_stmt|;
if|if
condition|(
name|pps_decoder_get_int
argument_list|(
operator|&
name|ppsDecoder
argument_list|,
name|ppsObject
argument_list|,
operator|&
name|val
argument_list|)
operator|==
name|PPS_DECODER_OK
condition|)
name|result
operator|=
name|QByteArray
operator|::
name|number
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
block|}
name|pps_decoder_cleanup
argument_list|(
operator|&
name|ppsDecoder
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|getCorrectFormat
name|QString
name|QBBSystemLocaleData
operator|::
name|getCorrectFormat
parameter_list|(
specifier|const
name|QString
modifier|&
name|baseFormat
parameter_list|,
name|QLocale
operator|::
name|FormatType
name|formatType
parameter_list|)
block|{
name|QString
name|format
init|=
name|baseFormat
decl_stmt|;
if|if
condition|(
name|is24HourFormat
condition|)
block|{
if|if
condition|(
name|format
operator|.
name|contains
argument_list|(
name|QStringLiteral
argument_list|(
literal|"AP"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
condition|)
block|{
name|format
operator|.
name|replace
argument_list|(
name|QStringLiteral
argument_list|(
literal|"AP"
argument_list|)
argument_list|,
name|QStringLiteral
argument_list|(
literal|""
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
expr_stmt|;
name|format
operator|.
name|replace
argument_list|(
name|QStringLiteral
argument_list|(
literal|"h"
argument_list|)
argument_list|,
name|QStringLiteral
argument_list|(
literal|"H"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|format
operator|.
name|contains
argument_list|(
name|QStringLiteral
argument_list|(
literal|"AP"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
condition|)
block|{
name|format
operator|.
name|contains
argument_list|(
name|QStringLiteral
argument_list|(
literal|"HH"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
condition|?
name|format
operator|.
name|replace
argument_list|(
name|QStringLiteral
argument_list|(
literal|"HH"
argument_list|)
argument_list|,
name|QStringLiteral
argument_list|(
literal|"hh"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
else|:
name|format
operator|.
name|replace
argument_list|(
name|QStringLiteral
argument_list|(
literal|"H"
argument_list|)
argument_list|,
name|QStringLiteral
argument_list|(
literal|"h"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
expr_stmt|;
name|formatType
operator|==
name|QLocale
operator|::
name|LongFormat
condition|?
name|format
operator|.
name|append
argument_list|(
name|QStringLiteral
argument_list|(
literal|" AP t"
argument_list|)
argument_list|)
else|:
name|format
operator|.
name|append
argument_list|(
name|QStringLiteral
argument_list|(
literal|" AP"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|format
return|;
block|}
end_function
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|QBBSystemLocaleData
argument_list|,
argument|bbSysLocaleData
argument_list|)
end_macro
begin_function
DECL|function|fallbackUiLocale
name|QLocale
name|QSystemLocale
operator|::
name|fallbackUiLocale
parameter_list|()
specifier|const
block|{
return|return
name|bbSysLocaleData
argument_list|()
operator|->
name|languageLocale
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|query
name|QVariant
name|QSystemLocale
operator|::
name|query
parameter_list|(
name|QueryType
name|type
parameter_list|,
name|QVariant
name|in
parameter_list|)
specifier|const
block|{
name|QBBSystemLocaleData
modifier|*
name|d
init|=
name|bbSysLocaleData
argument_list|()
decl_stmt|;
name|QReadLocker
name|locker
argument_list|(
operator|&
name|d
operator|->
name|lock
argument_list|)
decl_stmt|;
specifier|const
name|QLocale
modifier|&
name|lc_language
init|=
name|d
operator|->
name|languageLocale
argument_list|()
decl_stmt|;
specifier|const
name|QLocale
modifier|&
name|lc_region
init|=
name|d
operator|->
name|regionLocale
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|DecimalPoint
case|:
return|return
name|lc_region
operator|.
name|decimalPoint
argument_list|()
return|;
case|case
name|GroupSeparator
case|:
return|return
name|lc_region
operator|.
name|groupSeparator
argument_list|()
return|;
case|case
name|NegativeSign
case|:
return|return
name|lc_region
operator|.
name|negativeSign
argument_list|()
return|;
case|case
name|PositiveSign
case|:
return|return
name|lc_region
operator|.
name|positiveSign
argument_list|()
return|;
case|case
name|DateFormatLong
case|:
return|return
name|lc_region
operator|.
name|dateFormat
argument_list|(
name|QLocale
operator|::
name|LongFormat
argument_list|)
return|;
case|case
name|DateFormatShort
case|:
return|return
name|lc_region
operator|.
name|dateFormat
argument_list|(
name|QLocale
operator|::
name|ShortFormat
argument_list|)
return|;
case|case
name|TimeFormatLong
case|:
return|return
name|d
operator|->
name|timeFormat
argument_list|(
name|QLocale
operator|::
name|LongFormat
argument_list|)
return|;
case|case
name|TimeFormatShort
case|:
return|return
name|d
operator|->
name|timeFormat
argument_list|(
name|QLocale
operator|::
name|ShortFormat
argument_list|)
return|;
case|case
name|DateTimeFormatLong
case|:
return|return
name|d
operator|->
name|dateTimeFormat
argument_list|(
name|QLocale
operator|::
name|LongFormat
argument_list|)
return|;
case|case
name|DateTimeFormatShort
case|:
return|return
name|d
operator|->
name|dateTimeFormat
argument_list|(
name|QLocale
operator|::
name|ShortFormat
argument_list|)
return|;
case|case
name|DayNameLong
case|:
return|return
name|lc_language
operator|.
name|dayName
argument_list|(
name|in
operator|.
name|toInt
argument_list|()
argument_list|,
name|QLocale
operator|::
name|LongFormat
argument_list|)
return|;
case|case
name|DayNameShort
case|:
return|return
name|lc_language
operator|.
name|dayName
argument_list|(
name|in
operator|.
name|toInt
argument_list|()
argument_list|,
name|QLocale
operator|::
name|ShortFormat
argument_list|)
return|;
case|case
name|MonthNameLong
case|:
return|return
name|lc_language
operator|.
name|monthName
argument_list|(
name|in
operator|.
name|toInt
argument_list|()
argument_list|,
name|QLocale
operator|::
name|LongFormat
argument_list|)
return|;
case|case
name|MonthNameShort
case|:
return|return
name|lc_language
operator|.
name|monthName
argument_list|(
name|in
operator|.
name|toInt
argument_list|()
argument_list|,
name|QLocale
operator|::
name|ShortFormat
argument_list|)
return|;
case|case
name|StandaloneMonthNameLong
case|:
return|return
name|lc_language
operator|.
name|standaloneMonthName
argument_list|(
name|in
operator|.
name|toInt
argument_list|()
argument_list|,
name|QLocale
operator|::
name|LongFormat
argument_list|)
return|;
case|case
name|StandaloneMonthNameShort
case|:
return|return
name|lc_language
operator|.
name|standaloneMonthName
argument_list|(
name|in
operator|.
name|toInt
argument_list|()
argument_list|,
name|QLocale
operator|::
name|ShortFormat
argument_list|)
return|;
case|case
name|DateToStringLong
case|:
return|return
name|lc_region
operator|.
name|toString
argument_list|(
name|in
operator|.
name|toDate
argument_list|()
argument_list|,
name|QLocale
operator|::
name|LongFormat
argument_list|)
return|;
case|case
name|DateToStringShort
case|:
return|return
name|lc_region
operator|.
name|toString
argument_list|(
name|in
operator|.
name|toDate
argument_list|()
argument_list|,
name|QLocale
operator|::
name|ShortFormat
argument_list|)
return|;
case|case
name|TimeToStringLong
case|:
return|return
name|lc_region
operator|.
name|toString
argument_list|(
name|in
operator|.
name|toTime
argument_list|()
argument_list|,
name|d
operator|->
name|timeFormat
argument_list|(
name|QLocale
operator|::
name|LongFormat
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
return|;
case|case
name|TimeToStringShort
case|:
return|return
name|lc_region
operator|.
name|toString
argument_list|(
name|in
operator|.
name|toTime
argument_list|()
argument_list|,
name|d
operator|->
name|timeFormat
argument_list|(
name|QLocale
operator|::
name|ShortFormat
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
return|;
case|case
name|DateTimeToStringShort
case|:
return|return
name|lc_region
operator|.
name|toString
argument_list|(
name|in
operator|.
name|toDateTime
argument_list|()
argument_list|,
name|d
operator|->
name|dateTimeFormat
argument_list|(
name|QLocale
operator|::
name|ShortFormat
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
return|;
case|case
name|DateTimeToStringLong
case|:
return|return
name|lc_region
operator|.
name|toString
argument_list|(
name|in
operator|.
name|toDateTime
argument_list|()
argument_list|,
name|d
operator|->
name|dateTimeFormat
argument_list|(
name|QLocale
operator|::
name|LongFormat
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
return|;
case|case
name|MeasurementSystem
case|:
return|return
name|d
operator|->
name|measurementSystem
argument_list|()
return|;
case|case
name|ZeroDigit
case|:
return|return
name|lc_region
operator|.
name|zeroDigit
argument_list|()
return|;
case|case
name|CountryId
case|:
return|return
name|lc_region
operator|.
name|country
argument_list|()
return|;
case|case
name|LanguageId
case|:
return|return
name|lc_language
operator|.
name|language
argument_list|()
return|;
case|case
name|AMText
case|:
return|return
name|lc_language
operator|.
name|amText
argument_list|()
return|;
case|case
name|PMText
case|:
return|return
name|lc_language
operator|.
name|pmText
argument_list|()
return|;
default|default:
break|break;
block|}
return|return
name|QVariant
argument_list|()
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
