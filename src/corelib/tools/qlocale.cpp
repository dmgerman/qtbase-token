begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QWS
argument_list|)
operator|&&
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
end_if
begin_include
include|#
directive|include
file|"private/qcore_mac_p.h"
end_include
begin_include
include|#
directive|include
file|<CoreFoundation/CoreFoundation.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|"qglobal.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_SYSTEMLOCALE
end_ifndef
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_class_decl
class_decl|class
name|QSystemLocale
class_decl|;
end_class_decl
begin_function_decl
specifier|static
name|QSystemLocale
modifier|*
name|QSystemLocale_globalSystemLocale
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|QT_END_NAMESPACE
endif|#
directive|endif
include|#
directive|include
file|"qplatformdefs.h"
include|#
directive|include
file|"qdatastream.h"
include|#
directive|include
file|"qstring.h"
include|#
directive|include
file|"qlocale.h"
include|#
directive|include
file|"qlocale_p.h"
include|#
directive|include
file|"qlocale_tools_p.h"
include|#
directive|include
file|"qdatetime_p.h"
include|#
directive|include
file|"qnamespace.h"
include|#
directive|include
file|"qdatetime.h"
include|#
directive|include
file|"qstringlist.h"
include|#
directive|include
file|"qvariant.h"
include|#
directive|include
file|"qstringbuilder.h"
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
include|#
directive|include
file|"qt_windows.h"
include|#
directive|include
file|<time.h>
endif|#
directive|endif
include|#
directive|include
file|"private/qnumeric_p.h"
include|#
directive|include
file|"private/qsystemlibrary_p.h"
name|QT_BEGIN_NAMESPACE
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
name|void
name|qt_symbianUpdateSystemPrivate
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|void
name|qt_symbianInitSystemLocale
parameter_list|()
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_SYSTEMLOCALE
end_ifndef
begin_decl_stmt
DECL|variable|_systemLocale
specifier|static
name|QSystemLocale
modifier|*
name|_systemLocale
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_macro
name|Q_GLOBAL_STATIC_WITH_ARGS
argument_list|(
argument|QSystemLocale
argument_list|,
argument|QSystemLocale_globalSystemLocale
argument_list|,
argument|(
literal|true
argument|)
argument_list|)
end_macro
begin_decl_stmt
DECL|variable|system_lp
specifier|static
name|QLocalePrivate
modifier|*
name|system_lp
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|QLocalePrivate
argument_list|,
argument|globalLocalePrivate
argument_list|)
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|QT_USE_ICU
end_ifdef
begin_function_decl
specifier|extern
name|bool
name|qt_initIcu
parameter_list|(
specifier|const
name|QString
modifier|&
name|localeName
parameter_list|)
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/****************************************************************************** ** Helpers for accessing Qt locale database */
end_comment
begin_function
name|QT_BEGIN_INCLUDE_NAMESPACE
include|#
directive|include
file|"qlocale_data_p.h"
name|QT_END_INCLUDE_NAMESPACE
DECL|function|codeToLanguage
name|QLocale
operator|::
name|Language
name|QLocalePrivate
operator|::
name|codeToLanguage
parameter_list|(
specifier|const
name|QString
modifier|&
name|code
parameter_list|)
block|{
name|int
name|len
init|=
name|code
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|len
operator|!=
literal|2
operator|&&
name|len
operator|!=
literal|3
condition|)
return|return
name|QLocale
operator|::
name|C
return|;
name|ushort
name|uc1
init|=
name|len
operator|--
operator|>
literal|0
condition|?
name|code
index|[
literal|0
index|]
operator|.
name|toLower
argument_list|()
operator|.
name|unicode
argument_list|()
else|:
literal|0
decl_stmt|;
name|ushort
name|uc2
init|=
name|len
operator|--
operator|>
literal|0
condition|?
name|code
index|[
literal|1
index|]
operator|.
name|toLower
argument_list|()
operator|.
name|unicode
argument_list|()
else|:
literal|0
decl_stmt|;
name|ushort
name|uc3
init|=
name|len
operator|--
operator|>
literal|0
condition|?
name|code
index|[
literal|2
index|]
operator|.
name|toLower
argument_list|()
operator|.
name|unicode
argument_list|()
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|uc1
operator|==
literal|'n'
operator|&&
name|uc2
operator|==
literal|'o'
operator|&&
name|uc3
operator|==
literal|0
condition|)
name|uc2
operator|=
literal|'b'
expr_stmt|;
specifier|const
name|unsigned
name|char
modifier|*
name|c
init|=
name|language_code_list
decl_stmt|;
for|for
control|(
init|;
operator|*
name|c
operator|!=
literal|0
condition|;
name|c
operator|+=
literal|3
control|)
block|{
if|if
condition|(
name|uc1
operator|==
name|c
index|[
literal|0
index|]
operator|&&
name|uc2
operator|==
name|c
index|[
literal|1
index|]
operator|&&
name|uc3
operator|==
name|c
index|[
literal|2
index|]
condition|)
return|return
name|QLocale
operator|::
name|Language
argument_list|(
operator|(
name|c
operator|-
name|language_code_list
operator|)
operator|/
literal|3
argument_list|)
return|;
block|}
return|return
name|QLocale
operator|::
name|C
return|;
block|}
end_function
begin_function
DECL|function|codeToScript
name|QLocale
operator|::
name|Script
name|QLocalePrivate
operator|::
name|codeToScript
parameter_list|(
specifier|const
name|QString
modifier|&
name|code
parameter_list|)
block|{
name|int
name|len
init|=
name|code
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|len
operator|!=
literal|4
condition|)
return|return
name|QLocale
operator|::
name|AnyScript
return|;
comment|// script is titlecased in our data
name|unsigned
name|char
name|c0
init|=
name|code
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toUpper
argument_list|()
operator|.
name|toLatin1
argument_list|()
decl_stmt|;
name|unsigned
name|char
name|c1
init|=
name|code
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toLower
argument_list|()
operator|.
name|toLatin1
argument_list|()
decl_stmt|;
name|unsigned
name|char
name|c2
init|=
name|code
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|.
name|toLower
argument_list|()
operator|.
name|toLatin1
argument_list|()
decl_stmt|;
name|unsigned
name|char
name|c3
init|=
name|code
operator|.
name|at
argument_list|(
literal|3
argument_list|)
operator|.
name|toLower
argument_list|()
operator|.
name|toLatin1
argument_list|()
decl_stmt|;
specifier|const
name|unsigned
name|char
modifier|*
name|c
init|=
name|script_code_list
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|QLocale
operator|::
name|LastScript
condition|;
operator|++
name|i
operator|,
name|c
operator|+=
literal|4
control|)
block|{
if|if
condition|(
name|c0
operator|==
name|c
index|[
literal|0
index|]
operator|&&
name|c1
operator|==
name|c
index|[
literal|1
index|]
operator|&&
name|c2
operator|==
name|c
index|[
literal|2
index|]
operator|&&
name|c3
operator|==
name|c
index|[
literal|3
index|]
condition|)
return|return
name|QLocale
operator|::
name|Script
argument_list|(
name|i
argument_list|)
return|;
block|}
return|return
name|QLocale
operator|::
name|AnyScript
return|;
block|}
end_function
begin_function
DECL|function|codeToCountry
name|QLocale
operator|::
name|Country
name|QLocalePrivate
operator|::
name|codeToCountry
parameter_list|(
specifier|const
name|QString
modifier|&
name|code
parameter_list|)
block|{
name|int
name|len
init|=
name|code
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|len
operator|!=
literal|2
operator|&&
name|len
operator|!=
literal|3
condition|)
return|return
name|QLocale
operator|::
name|AnyCountry
return|;
name|ushort
name|uc1
init|=
name|len
operator|--
operator|>
literal|0
condition|?
name|code
index|[
literal|0
index|]
operator|.
name|toUpper
argument_list|()
operator|.
name|unicode
argument_list|()
else|:
literal|0
decl_stmt|;
name|ushort
name|uc2
init|=
name|len
operator|--
operator|>
literal|0
condition|?
name|code
index|[
literal|1
index|]
operator|.
name|toUpper
argument_list|()
operator|.
name|unicode
argument_list|()
else|:
literal|0
decl_stmt|;
name|ushort
name|uc3
init|=
name|len
operator|--
operator|>
literal|0
condition|?
name|code
index|[
literal|2
index|]
operator|.
name|toUpper
argument_list|()
operator|.
name|unicode
argument_list|()
else|:
literal|0
decl_stmt|;
specifier|const
name|unsigned
name|char
modifier|*
name|c
init|=
name|country_code_list
decl_stmt|;
for|for
control|(
init|;
operator|*
name|c
operator|!=
literal|0
condition|;
name|c
operator|+=
literal|3
control|)
block|{
if|if
condition|(
name|uc1
operator|==
name|c
index|[
literal|0
index|]
operator|&&
name|uc2
operator|==
name|c
index|[
literal|1
index|]
operator|&&
name|uc3
operator|==
name|c
index|[
literal|2
index|]
condition|)
return|return
name|QLocale
operator|::
name|Country
argument_list|(
operator|(
name|c
operator|-
name|country_code_list
operator|)
operator|/
literal|3
argument_list|)
return|;
block|}
return|return
name|QLocale
operator|::
name|AnyCountry
return|;
block|}
end_function
begin_function
DECL|function|languageCode
name|QString
name|QLocalePrivate
operator|::
name|languageCode
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|m_language_id
operator|==
name|QLocale
operator|::
name|AnyLanguage
condition|)
return|return
name|QString
argument_list|()
return|;
if|if
condition|(
name|m_language_id
operator|==
name|QLocale
operator|::
name|C
condition|)
return|return
name|QLatin1String
argument_list|(
literal|"C"
argument_list|)
return|;
specifier|const
name|unsigned
name|char
modifier|*
name|c
init|=
name|language_code_list
operator|+
literal|3
operator|*
operator|(
name|uint
argument_list|(
name|m_language_id
argument_list|)
operator|)
decl_stmt|;
name|QString
name|code
argument_list|(
name|c
index|[
literal|2
index|]
operator|==
literal|0
condition|?
literal|2
else|:
literal|3
argument_list|,
name|Qt
operator|::
name|Uninitialized
argument_list|)
decl_stmt|;
name|code
index|[
literal|0
index|]
operator|=
name|ushort
argument_list|(
name|c
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|code
index|[
literal|1
index|]
operator|=
name|ushort
argument_list|(
name|c
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
index|[
literal|2
index|]
operator|!=
literal|0
condition|)
name|code
index|[
literal|2
index|]
operator|=
name|ushort
argument_list|(
name|c
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
return|return
name|code
return|;
block|}
end_function
begin_function
DECL|function|scriptCode
name|QString
name|QLocalePrivate
operator|::
name|scriptCode
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|m_script_id
operator|==
name|QLocale
operator|::
name|AnyScript
operator|||
name|m_script_id
operator|>
name|QLocale
operator|::
name|LastScript
condition|)
return|return
name|QString
argument_list|()
return|;
specifier|const
name|unsigned
name|char
modifier|*
name|c
init|=
name|script_code_list
operator|+
literal|4
operator|*
operator|(
name|uint
argument_list|(
name|m_script_id
argument_list|)
operator|)
decl_stmt|;
return|return
name|QString
operator|::
name|fromLatin1
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|)
name|c
argument_list|,
literal|4
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|countryCode
name|QString
name|QLocalePrivate
operator|::
name|countryCode
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|m_country_id
operator|==
name|QLocale
operator|::
name|AnyCountry
condition|)
return|return
name|QString
argument_list|()
return|;
specifier|const
name|unsigned
name|char
modifier|*
name|c
init|=
name|country_code_list
operator|+
literal|3
operator|*
operator|(
name|uint
argument_list|(
name|m_country_id
argument_list|)
operator|)
decl_stmt|;
name|QString
name|code
argument_list|(
name|c
index|[
literal|2
index|]
operator|==
literal|0
condition|?
literal|2
else|:
literal|3
argument_list|,
name|Qt
operator|::
name|Uninitialized
argument_list|)
decl_stmt|;
name|code
index|[
literal|0
index|]
operator|=
name|ushort
argument_list|(
name|c
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|code
index|[
literal|1
index|]
operator|=
name|ushort
argument_list|(
name|c
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
index|[
literal|2
index|]
operator|!=
literal|0
condition|)
name|code
index|[
literal|2
index|]
operator|=
name|ushort
argument_list|(
name|c
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
return|return
name|code
return|;
block|}
end_function
begin_function
DECL|function|bcp47Name
name|QString
name|QLocalePrivate
operator|::
name|bcp47Name
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|m_language_id
operator|==
name|QLocale
operator|::
name|AnyLanguage
condition|)
return|return
name|QString
argument_list|()
return|;
if|if
condition|(
name|m_language_id
operator|==
name|QLocale
operator|::
name|C
condition|)
return|return
name|QLatin1String
argument_list|(
literal|"C"
argument_list|)
return|;
specifier|const
name|unsigned
name|char
modifier|*
name|lang
init|=
name|language_code_list
operator|+
literal|3
operator|*
operator|(
name|uint
argument_list|(
name|m_language_id
argument_list|)
operator|)
decl_stmt|;
specifier|const
name|unsigned
name|char
modifier|*
name|script
init|=
operator|(
name|m_script_id
operator|!=
name|QLocale
operator|::
name|AnyScript
condition|?
name|script_code_list
operator|+
literal|4
operator|*
operator|(
name|uint
argument_list|(
name|m_script_id
argument_list|)
operator|)
else|:
literal|0
operator|)
decl_stmt|;
specifier|const
name|unsigned
name|char
modifier|*
name|country
init|=
operator|(
name|m_country_id
operator|!=
name|QLocale
operator|::
name|AnyCountry
condition|?
name|country_code_list
operator|+
literal|3
operator|*
operator|(
name|uint
argument_list|(
name|m_country_id
argument_list|)
operator|)
else|:
literal|0
operator|)
decl_stmt|;
name|char
name|len
init|=
operator|(
name|lang
index|[
literal|2
index|]
operator|!=
literal|0
condition|?
literal|3
else|:
literal|2
operator|)
operator|+
operator|(
name|script
condition|?
literal|4
operator|+
literal|1
else|:
literal|0
operator|)
operator|+
operator|(
name|country
condition|?
operator|(
name|country
index|[
literal|2
index|]
operator|!=
literal|0
condition|?
literal|3
else|:
literal|2
operator|)
operator|+
literal|1
else|:
literal|0
operator|)
decl_stmt|;
name|QString
name|name
argument_list|(
name|len
argument_list|,
name|Qt
operator|::
name|Uninitialized
argument_list|)
decl_stmt|;
name|QChar
modifier|*
name|uc
init|=
name|name
operator|.
name|data
argument_list|()
decl_stmt|;
operator|*
name|uc
operator|++
operator|=
name|ushort
argument_list|(
name|lang
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
operator|*
name|uc
operator|++
operator|=
name|ushort
argument_list|(
name|lang
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|lang
index|[
literal|2
index|]
operator|!=
literal|0
condition|)
operator|*
name|uc
operator|++
operator|=
name|ushort
argument_list|(
name|lang
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|script
condition|)
block|{
operator|*
name|uc
operator|++
operator|=
name|QLatin1Char
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
operator|*
name|uc
operator|++
operator|=
name|ushort
argument_list|(
name|script
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
operator|*
name|uc
operator|++
operator|=
name|ushort
argument_list|(
name|script
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
operator|*
name|uc
operator|++
operator|=
name|ushort
argument_list|(
name|script
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
operator|*
name|uc
operator|++
operator|=
name|ushort
argument_list|(
name|script
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|country
condition|)
block|{
operator|*
name|uc
operator|++
operator|=
name|QLatin1Char
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
operator|*
name|uc
operator|++
operator|=
name|ushort
argument_list|(
name|country
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
operator|*
name|uc
operator|++
operator|=
name|ushort
argument_list|(
name|country
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|country
index|[
literal|2
index|]
operator|!=
literal|0
condition|)
operator|*
name|uc
operator|++
operator|=
name|ushort
argument_list|(
name|country
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|name
return|;
block|}
end_function
begin_function
DECL|function|findLocale
specifier|const
name|QLocalePrivate
modifier|*
name|QLocalePrivate
operator|::
name|findLocale
parameter_list|(
name|QLocale
operator|::
name|Language
name|language
parameter_list|,
name|QLocale
operator|::
name|Script
name|script
parameter_list|,
name|QLocale
operator|::
name|Country
name|country
parameter_list|)
block|{
specifier|const
name|unsigned
name|language_id
init|=
name|language
decl_stmt|;
specifier|const
name|unsigned
name|script_id
init|=
name|script
decl_stmt|;
specifier|const
name|unsigned
name|country_id
init|=
name|country
decl_stmt|;
name|uint
name|idx
init|=
name|locale_index
index|[
name|language_id
index|]
decl_stmt|;
specifier|const
name|QLocalePrivate
modifier|*
name|d
init|=
name|locale_data
operator|+
name|idx
decl_stmt|;
if|if
condition|(
name|idx
operator|==
literal|0
condition|)
comment|// default language has no associated country
return|return
name|d
return|;
if|if
condition|(
name|script
operator|==
name|QLocale
operator|::
name|AnyScript
operator|&&
name|country
operator|==
name|QLocale
operator|::
name|AnyCountry
condition|)
return|return
name|d
return|;
name|Q_ASSERT
argument_list|(
name|d
operator|->
name|languageId
argument_list|()
operator|==
name|language_id
argument_list|)
expr_stmt|;
if|if
condition|(
name|country
operator|==
name|QLocale
operator|::
name|AnyCountry
condition|)
block|{
while|while
condition|(
name|d
operator|->
name|m_language_id
operator|==
name|language_id
operator|&&
name|d
operator|->
name|m_script_id
operator|!=
name|script_id
condition|)
operator|++
name|d
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|m_language_id
operator|==
name|language_id
operator|&&
name|d
operator|->
name|m_script_id
operator|==
name|script_id
condition|)
return|return
name|d
return|;
block|}
elseif|else
if|if
condition|(
name|script
operator|==
name|QLocale
operator|::
name|AnyScript
condition|)
block|{
while|while
condition|(
name|d
operator|->
name|m_language_id
operator|==
name|language_id
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|m_script_id
operator|==
name|script_id
operator|&&
name|d
operator|->
name|m_country_id
operator|==
name|country_id
condition|)
return|return
name|d
return|;
operator|++
name|d
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// both script and country are explicitly specified
while|while
condition|(
name|d
operator|->
name|m_language_id
operator|==
name|language_id
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|m_script_id
operator|==
name|script_id
operator|&&
name|d
operator|->
name|m_country_id
operator|==
name|country_id
condition|)
return|return
name|d
return|;
operator|++
name|d
expr_stmt|;
block|}
block|}
return|return
name|locale_data
operator|+
name|idx
return|;
block|}
end_function
begin_function
DECL|function|parse_locale_tag
specifier|static
name|bool
name|parse_locale_tag
parameter_list|(
specifier|const
name|QString
modifier|&
name|input
parameter_list|,
name|int
modifier|&
name|i
parameter_list|,
name|QString
modifier|*
name|result
parameter_list|,
specifier|const
name|QString
modifier|&
name|separators
parameter_list|)
block|{
operator|*
name|result
operator|=
name|QString
argument_list|(
literal|8
argument_list|,
name|Qt
operator|::
name|Uninitialized
argument_list|)
expr_stmt|;
comment|// worst case according to BCP47
name|QChar
modifier|*
name|pch
init|=
name|result
operator|->
name|data
argument_list|()
decl_stmt|;
specifier|const
name|QChar
modifier|*
name|uc
init|=
name|input
operator|.
name|data
argument_list|()
operator|+
name|i
decl_stmt|;
specifier|const
name|int
name|l
init|=
name|input
operator|.
name|length
argument_list|()
decl_stmt|;
name|int
name|size
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|i
operator|<
name|l
operator|&&
name|size
operator|<
literal|8
condition|;
operator|++
name|i
operator|,
operator|++
name|size
control|)
block|{
if|if
condition|(
name|separators
operator|.
name|contains
argument_list|(
operator|*
name|uc
argument_list|)
condition|)
break|break;
if|if
condition|(
operator|!
operator|(
operator|(
name|uc
operator|->
name|unicode
argument_list|()
operator|>=
literal|'a'
operator|&&
name|uc
operator|->
name|unicode
argument_list|()
operator|<=
literal|'z'
operator|)
operator|||
operator|(
name|uc
operator|->
name|unicode
argument_list|()
operator|>=
literal|'A'
operator|&&
name|uc
operator|->
name|unicode
argument_list|()
operator|<=
literal|'Z'
operator|)
operator|||
operator|(
name|uc
operator|->
name|unicode
argument_list|()
operator|>=
literal|'0'
operator|&&
name|uc
operator|->
name|unicode
argument_list|()
operator|<=
literal|'9'
operator|)
operator|)
condition|)
comment|// latin only
return|return
literal|false
return|;
operator|*
name|pch
operator|++
operator|=
operator|*
name|uc
operator|++
expr_stmt|;
block|}
name|result
operator|->
name|truncate
argument_list|(
name|size
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|qt_splitLocaleName
name|bool
name|qt_splitLocaleName
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|,
name|QString
modifier|&
name|lang
parameter_list|,
name|QString
modifier|&
name|script
parameter_list|,
name|QString
modifier|&
name|cntry
parameter_list|)
block|{
specifier|const
name|int
name|length
init|=
name|name
operator|.
name|length
argument_list|()
decl_stmt|;
name|lang
operator|=
name|script
operator|=
name|cntry
operator|=
name|QString
argument_list|()
expr_stmt|;
specifier|const
name|QString
name|separators
init|=
name|QLatin1String
argument_list|(
literal|"_-.@"
argument_list|)
decl_stmt|;
enum|enum
name|ParserState
block|{
name|NoState
block|,
name|LangState
block|,
name|ScriptState
block|,
name|CountryState
block|}
enum|;
name|ParserState
name|state
init|=
name|LangState
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
operator|&&
name|state
operator|!=
name|NoState
condition|;
control|)
block|{
name|QString
name|value
decl_stmt|;
if|if
condition|(
operator|!
name|parse_locale_tag
argument_list|(
name|name
argument_list|,
name|i
argument_list|,
operator|&
name|value
argument_list|,
name|separators
argument_list|)
operator|||
name|value
operator|.
name|isEmpty
argument_list|()
condition|)
break|break;
name|QChar
name|sep
init|=
name|i
operator|<
name|length
condition|?
name|name
operator|.
name|at
argument_list|(
name|i
argument_list|)
else|:
name|QChar
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|state
condition|)
block|{
case|case
name|LangState
case|:
if|if
condition|(
operator|!
name|sep
operator|.
name|isNull
argument_list|()
operator|&&
operator|!
name|separators
operator|.
name|contains
argument_list|(
name|sep
argument_list|)
condition|)
block|{
name|state
operator|=
name|NoState
expr_stmt|;
break|break;
block|}
name|lang
operator|=
name|value
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|length
condition|)
block|{
comment|// just language was specified
name|state
operator|=
name|NoState
expr_stmt|;
break|break;
block|}
name|state
operator|=
name|ScriptState
expr_stmt|;
break|break;
case|case
name|ScriptState
case|:
block|{
name|QString
name|scripts
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|)
name|script_code_list
argument_list|,
sizeof|sizeof
argument_list|(
name|script_code_list
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|.
name|length
argument_list|()
operator|==
literal|4
operator|&&
name|scripts
operator|.
name|indexOf
argument_list|(
name|value
argument_list|)
operator|%
literal|4
operator|==
literal|0
condition|)
block|{
comment|// script name is always 4 characters
name|script
operator|=
name|value
expr_stmt|;
name|state
operator|=
name|CountryState
expr_stmt|;
block|}
else|else
block|{
comment|// it wasn't a script, maybe it is a country then?
name|cntry
operator|=
name|value
expr_stmt|;
name|state
operator|=
name|NoState
expr_stmt|;
block|}
break|break;
block|}
case|case
name|CountryState
case|:
name|cntry
operator|=
name|value
expr_stmt|;
name|state
operator|=
name|NoState
expr_stmt|;
break|break;
case|case
name|NoState
case|:
comment|// shouldn't happen
name|qWarning
argument_list|(
literal|"QLocale: This should never happen"
argument_list|)
expr_stmt|;
break|break;
block|}
operator|++
name|i
expr_stmt|;
block|}
return|return
name|lang
operator|.
name|length
argument_list|()
operator|==
literal|2
operator|||
name|lang
operator|.
name|length
argument_list|()
operator|==
literal|3
return|;
block|}
end_function
begin_function
DECL|function|getLangAndCountry
name|void
name|QLocalePrivate
operator|::
name|getLangAndCountry
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|,
name|QLocale
operator|::
name|Language
modifier|&
name|lang
parameter_list|,
name|QLocale
operator|::
name|Script
modifier|&
name|script
parameter_list|,
name|QLocale
operator|::
name|Country
modifier|&
name|cntry
parameter_list|)
block|{
name|lang
operator|=
name|QLocale
operator|::
name|C
expr_stmt|;
name|script
operator|=
name|QLocale
operator|::
name|AnyScript
expr_stmt|;
name|cntry
operator|=
name|QLocale
operator|::
name|AnyCountry
expr_stmt|;
name|QString
name|lang_code
decl_stmt|;
name|QString
name|script_code
decl_stmt|;
name|QString
name|cntry_code
decl_stmt|;
if|if
condition|(
operator|!
name|qt_splitLocaleName
argument_list|(
name|name
argument_list|,
name|lang_code
argument_list|,
name|script_code
argument_list|,
name|cntry_code
argument_list|)
condition|)
return|return;
name|lang
operator|=
name|QLocalePrivate
operator|::
name|codeToLanguage
argument_list|(
name|lang_code
argument_list|)
expr_stmt|;
if|if
condition|(
name|lang
operator|==
name|QLocale
operator|::
name|C
condition|)
return|return;
name|script
operator|=
name|QLocalePrivate
operator|::
name|codeToScript
argument_list|(
name|script_code
argument_list|)
expr_stmt|;
name|cntry
operator|=
name|QLocalePrivate
operator|::
name|codeToCountry
argument_list|(
name|cntry_code
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|findLocale
specifier|static
specifier|const
name|QLocalePrivate
modifier|*
name|findLocale
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
block|{
name|QLocale
operator|::
name|Language
name|lang
decl_stmt|;
name|QLocale
operator|::
name|Script
name|script
decl_stmt|;
name|QLocale
operator|::
name|Country
name|cntry
decl_stmt|;
name|QLocalePrivate
operator|::
name|getLangAndCountry
argument_list|(
name|name
argument_list|,
name|lang
argument_list|,
name|script
argument_list|,
name|cntry
argument_list|)
expr_stmt|;
return|return
name|QLocalePrivate
operator|::
name|findLocale
argument_list|(
name|lang
argument_list|,
name|script
argument_list|,
name|cntry
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qt_readEscapedFormatString
name|QString
name|qt_readEscapedFormatString
parameter_list|(
specifier|const
name|QString
modifier|&
name|format
parameter_list|,
name|int
modifier|*
name|idx
parameter_list|)
block|{
name|int
modifier|&
name|i
init|=
operator|*
name|idx
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|format
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
name|QLatin1Char
argument_list|(
literal|'\''
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|format
operator|.
name|size
argument_list|()
condition|)
return|return
name|QString
argument_list|()
return|;
if|if
condition|(
name|format
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|unicode
argument_list|()
operator|==
literal|'\''
condition|)
block|{
comment|// "''" outside of a quoted stirng
operator|++
name|i
expr_stmt|;
return|return
name|QLatin1String
argument_list|(
literal|"'"
argument_list|)
return|;
block|}
name|QString
name|result
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|format
operator|.
name|size
argument_list|()
condition|)
block|{
if|if
condition|(
name|format
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|unicode
argument_list|()
operator|==
literal|'\''
condition|)
block|{
if|if
condition|(
name|i
operator|+
literal|1
operator|<
name|format
operator|.
name|size
argument_list|()
operator|&&
name|format
operator|.
name|at
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|.
name|unicode
argument_list|()
operator|==
literal|'\''
condition|)
block|{
comment|// "''" inside of a quoted string
name|result
operator|.
name|append
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\''
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|+=
literal|2
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
else|else
block|{
name|result
operator|.
name|append
argument_list|(
name|format
operator|.
name|at
argument_list|(
name|i
operator|++
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|i
operator|<
name|format
operator|.
name|size
argument_list|()
condition|)
operator|++
name|i
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|qt_repeatCount
name|int
name|qt_repeatCount
parameter_list|(
specifier|const
name|QString
modifier|&
name|s
parameter_list|,
name|int
name|i
parameter_list|)
block|{
name|QChar
name|c
init|=
name|s
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|int
name|j
init|=
name|i
operator|+
literal|1
decl_stmt|;
while|while
condition|(
name|j
operator|<
name|s
operator|.
name|size
argument_list|()
operator|&&
name|s
operator|.
name|at
argument_list|(
name|j
argument_list|)
operator|==
name|c
condition|)
operator|++
name|j
expr_stmt|;
return|return
name|j
operator|-
name|i
return|;
block|}
end_function
begin_decl_stmt
DECL|variable|default_lp
specifier|static
specifier|const
name|QLocalePrivate
modifier|*
name|default_lp
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|default_number_options
specifier|static
name|uint
name|default_number_options
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_SYSTEMLOCALE
end_ifndef
begin_comment
comment|/****************************************************************************** ** Default system locale behavior */
end_comment
begin_comment
comment|/*!   Constructs a QSystemLocale object. The constructor will automatically   install this object as the system locale and remove any earlier installed   system locales. */
end_comment
begin_constructor
DECL|function|QSystemLocale
name|QSystemLocale
operator|::
name|QSystemLocale
parameter_list|()
block|{
operator|delete
name|_systemLocale
expr_stmt|;
name|_systemLocale
operator|=
name|this
expr_stmt|;
if|if
condition|(
name|system_lp
condition|)
name|system_lp
operator|->
name|m_language_id
operator|=
literal|0
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*! \internal */
end_comment
begin_constructor
DECL|function|QSystemLocale
name|QSystemLocale
operator|::
name|QSystemLocale
parameter_list|(
name|bool
parameter_list|)
block|{ }
end_constructor
begin_comment
comment|/*!   Deletes the object. */
end_comment
begin_destructor
DECL|function|~QSystemLocale
name|QSystemLocale
operator|::
name|~
name|QSystemLocale
parameter_list|()
block|{
if|if
condition|(
name|_systemLocale
operator|==
name|this
condition|)
block|{
name|_systemLocale
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|system_lp
condition|)
name|system_lp
operator|->
name|m_language_id
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_destructor
begin_function
DECL|function|systemLocale
specifier|static
specifier|const
name|QSystemLocale
modifier|*
name|systemLocale
parameter_list|()
block|{
if|if
condition|(
name|_systemLocale
condition|)
return|return
name|_systemLocale
return|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
name|qt_symbianInitSystemLocale
argument_list|()
expr_stmt|;
endif|#
directive|endif
return|return
name|QSystemLocale_globalSystemLocale
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|updateSystemPrivate
name|void
name|QLocalePrivate
operator|::
name|updateSystemPrivate
parameter_list|()
block|{
specifier|const
name|QSystemLocale
modifier|*
name|sys_locale
init|=
name|systemLocale
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|system_lp
condition|)
name|system_lp
operator|=
name|globalLocalePrivate
argument_list|()
expr_stmt|;
comment|// tell the object that the system locale has changed.
name|sys_locale
operator|->
name|query
argument_list|(
name|QSystemLocale
operator|::
name|LocaleChanged
argument_list|,
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
operator|*
name|system_lp
operator|=
operator|*
name|sys_locale
operator|->
name|fallbackLocale
argument_list|()
operator|.
name|d
argument_list|()
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
name|qt_symbianUpdateSystemPrivate
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|QVariant
name|res
init|=
name|sys_locale
operator|->
name|query
argument_list|(
name|QSystemLocale
operator|::
name|LanguageId
argument_list|,
name|QVariant
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|res
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|system_lp
operator|->
name|m_language_id
operator|=
name|res
operator|.
name|toInt
argument_list|()
expr_stmt|;
name|system_lp
operator|->
name|m_script_id
operator|=
name|QLocale
operator|::
name|AnyScript
expr_stmt|;
comment|// default for compatibility
block|}
name|res
operator|=
name|sys_locale
operator|->
name|query
argument_list|(
name|QSystemLocale
operator|::
name|CountryId
argument_list|,
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|res
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|system_lp
operator|->
name|m_country_id
operator|=
name|res
operator|.
name|toInt
argument_list|()
expr_stmt|;
name|system_lp
operator|->
name|m_script_id
operator|=
name|QLocale
operator|::
name|AnyScript
expr_stmt|;
comment|// default for compatibility
block|}
name|res
operator|=
name|sys_locale
operator|->
name|query
argument_list|(
name|QSystemLocale
operator|::
name|ScriptId
argument_list|,
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|res
operator|.
name|isNull
argument_list|()
condition|)
name|system_lp
operator|->
name|m_script_id
operator|=
name|res
operator|.
name|toInt
argument_list|()
expr_stmt|;
name|res
operator|=
name|sys_locale
operator|->
name|query
argument_list|(
name|QSystemLocale
operator|::
name|DecimalPoint
argument_list|,
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|res
operator|.
name|isNull
argument_list|()
condition|)
name|system_lp
operator|->
name|m_decimal
operator|=
name|res
operator|.
name|toString
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|unicode
argument_list|()
expr_stmt|;
name|res
operator|=
name|sys_locale
operator|->
name|query
argument_list|(
name|QSystemLocale
operator|::
name|GroupSeparator
argument_list|,
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|res
operator|.
name|isNull
argument_list|()
condition|)
name|system_lp
operator|->
name|m_group
operator|=
name|res
operator|.
name|toString
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|unicode
argument_list|()
expr_stmt|;
name|res
operator|=
name|sys_locale
operator|->
name|query
argument_list|(
name|QSystemLocale
operator|::
name|ZeroDigit
argument_list|,
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|res
operator|.
name|isNull
argument_list|()
condition|)
name|system_lp
operator|->
name|m_zero
operator|=
name|res
operator|.
name|toString
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|unicode
argument_list|()
expr_stmt|;
name|res
operator|=
name|sys_locale
operator|->
name|query
argument_list|(
name|QSystemLocale
operator|::
name|NegativeSign
argument_list|,
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|res
operator|.
name|isNull
argument_list|()
condition|)
name|system_lp
operator|->
name|m_minus
operator|=
name|res
operator|.
name|toString
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|unicode
argument_list|()
expr_stmt|;
name|res
operator|=
name|sys_locale
operator|->
name|query
argument_list|(
name|QSystemLocale
operator|::
name|PositiveSign
argument_list|,
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|res
operator|.
name|isNull
argument_list|()
condition|)
name|system_lp
operator|->
name|m_plus
operator|=
name|res
operator|.
name|toString
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|unicode
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_USE_ICU
if|if
condition|(
operator|!
name|default_lp
condition|)
name|qt_initIcu
argument_list|(
name|system_lp
operator|->
name|bcp47Name
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|systemPrivate
specifier|static
specifier|const
name|QLocalePrivate
modifier|*
name|systemPrivate
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_NO_SYSTEMLOCALE
comment|// copy over the information from the fallback locale and modify
if|if
condition|(
operator|!
name|system_lp
operator|||
name|system_lp
operator|->
name|m_language_id
operator|==
literal|0
condition|)
name|QLocalePrivate
operator|::
name|updateSystemPrivate
argument_list|()
expr_stmt|;
return|return
name|system_lp
return|;
else|#
directive|else
return|return
name|locale_data
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|defaultPrivate
specifier|static
specifier|const
name|QLocalePrivate
modifier|*
name|defaultPrivate
parameter_list|()
block|{
if|if
condition|(
operator|!
name|default_lp
condition|)
name|default_lp
operator|=
name|systemPrivate
argument_list|()
expr_stmt|;
return|return
name|default_lp
return|;
block|}
end_function
begin_function
DECL|function|getLocaleListData
specifier|static
name|QString
name|getLocaleListData
parameter_list|(
specifier|const
name|ushort
modifier|*
name|data
parameter_list|,
name|int
name|size
parameter_list|,
name|int
name|index
parameter_list|)
block|{
specifier|static
specifier|const
name|ushort
name|separator
init|=
literal|';'
decl_stmt|;
while|while
condition|(
name|index
operator|&&
name|size
operator|>
literal|0
condition|)
block|{
while|while
condition|(
operator|*
name|data
operator|!=
name|separator
condition|)
operator|++
name|data
operator|,
operator|--
name|size
expr_stmt|;
operator|--
name|index
expr_stmt|;
operator|++
name|data
expr_stmt|;
operator|--
name|size
expr_stmt|;
block|}
specifier|const
name|ushort
modifier|*
name|end
init|=
name|data
decl_stmt|;
while|while
condition|(
name|size
operator|>
literal|0
operator|&&
operator|*
name|end
operator|!=
name|separator
condition|)
operator|++
name|end
operator|,
operator|--
name|size
expr_stmt|;
if|if
condition|(
name|end
operator|-
name|data
operator|==
literal|0
condition|)
return|return
name|QString
argument_list|()
return|;
return|return
name|QString
operator|::
name|fromRawData
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|QChar
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
argument_list|,
name|end
operator|-
name|data
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|getLocaleData
specifier|static
specifier|inline
name|QString
name|getLocaleData
parameter_list|(
specifier|const
name|ushort
modifier|*
name|data
parameter_list|,
name|int
name|size
parameter_list|)
block|{
return|return
name|size
condition|?
name|QString
operator|::
name|fromRawData
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|QChar
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
argument_list|,
name|size
argument_list|)
else|:
name|QString
argument_list|()
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DATASTREAM
end_ifndef
begin_function
DECL|function|operator <<
name|QDataStream
modifier|&
name|operator
name|<<
parameter_list|(
name|QDataStream
modifier|&
name|ds
parameter_list|,
specifier|const
name|QLocale
modifier|&
name|l
parameter_list|)
block|{
name|ds
operator|<<
name|l
operator|.
name|name
argument_list|()
expr_stmt|;
return|return
name|ds
return|;
block|}
end_function
begin_function
DECL|function|operator >>
name|QDataStream
modifier|&
name|operator
name|>>
parameter_list|(
name|QDataStream
modifier|&
name|ds
parameter_list|,
name|QLocale
modifier|&
name|l
parameter_list|)
block|{
name|QString
name|s
decl_stmt|;
name|ds
operator|>>
name|s
expr_stmt|;
name|l
operator|=
name|QLocale
argument_list|(
name|s
argument_list|)
expr_stmt|;
return|return
name|ds
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DATASTREAM
end_comment
begin_decl_stmt
DECL|variable|locale_data_size
specifier|static
specifier|const
name|int
name|locale_data_size
init|=
sizeof|sizeof
argument_list|(
name|locale_data
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|QLocalePrivate
argument_list|)
operator|-
literal|1
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|dataPointerHelper
specifier|static
specifier|const
name|QLocalePrivate
modifier|*
name|dataPointerHelper
parameter_list|(
name|quint16
name|index
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_SYSTEMLOCALE
name|Q_ASSERT
argument_list|(
name|index
operator|<=
name|locale_data_size
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|==
name|locale_data_size
condition|)
return|return
name|system_lp
return|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|index
operator|<
name|locale_data_size
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
operator|&
name|locale_data
index|[
name|index
index|]
return|;
block|}
end_function
begin_function
DECL|function|localePrivateIndex
specifier|static
name|quint16
name|localePrivateIndex
parameter_list|(
specifier|const
name|QLocalePrivate
modifier|*
name|p
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_SYSTEMLOCALE
name|Q_ASSERT
argument_list|(
operator|(
name|p
operator|>=
name|locale_data
operator|&&
name|p
operator|-
name|locale_data
operator|<
name|locale_data_size
operator|)
operator|||
operator|(
name|p
operator|!=
literal|0
operator|&&
name|p
operator|==
name|system_lp
operator|)
argument_list|)
expr_stmt|;
name|quint16
name|index
init|=
name|p
operator|==
name|system_lp
condition|?
name|locale_data_size
else|:
name|p
operator|-
name|locale_data
decl_stmt|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|p
operator|>=
name|locale_data
operator|&&
name|p
operator|-
name|locale_data
operator|<
name|locale_data_size
argument_list|)
expr_stmt|;
name|quint16
name|index
init|=
name|p
operator|-
name|locale_data
decl_stmt|;
endif|#
directive|endif
return|return
name|index
return|;
block|}
end_function
begin_comment
comment|/*!     Constructs a QLocale object with the specified \a name,     which has the format     "language[_script][_country][.codeset][@modifier]" or "C", where:      \list     \i language is a lowercase, two-letter, ISO 639 language code,     \i script is a titlecase, four-letter, ISO 15924 script code,     \i country is an uppercase, two- or three-letter, ISO 3166 country code (also "419" as defined by United Nations),     \i and codeset and modifier are ignored.     \endlist      The separator can be either underscore or a minus sign.      If the string violates the locale format, or language is not     a valid ISO 369 code, the "C" locale is used instead. If country     is not present, or is not a valid ISO 3166 code, the most     appropriate country is chosen for the specified language.      The language, script and country codes are converted to their respective     \c Language, \c Script and \c Country enums. After this conversion is     performed the constructor behaves exactly like QLocale(Country, Script,     Language).      This constructor is much slower than QLocale(Country, Script, Language).      \sa bcp47Name() */
end_comment
begin_constructor
DECL|function|QLocale
name|QLocale
operator|::
name|QLocale
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
member_init_list|:
name|v
argument_list|(
literal|0
argument_list|)
block|{
name|p
operator|.
name|numberOptions
operator|=
literal|0
expr_stmt|;
name|p
operator|.
name|index
operator|=
name|localePrivateIndex
argument_list|(
name|findLocale
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Constructs a QLocale object initialized with the default locale. If     no default locale was set using setDefaultLocale(), this locale will     be the same as the one returned by system().      \sa setDefault() */
end_comment
begin_constructor
DECL|function|QLocale
name|QLocale
operator|::
name|QLocale
parameter_list|()
member_init_list|:
name|v
argument_list|(
literal|0
argument_list|)
block|{
name|p
operator|.
name|numberOptions
operator|=
name|default_number_options
expr_stmt|;
name|p
operator|.
name|index
operator|=
name|localePrivateIndex
argument_list|(
name|defaultPrivate
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Constructs a QLocale object with the specified \a language and \a     country.      \list     \i If the language/country pair is found in the database, it is used.     \i If the language is found but the country is not, or if the country        is \c AnyCountry, the language is used with the most        appropriate available country (for example, Germany for German),     \i If neither the language nor the country are found, QLocale        defaults to the default locale (see setDefault()).     \endlist      The language and country that are actually used can be queried     using language() and country().      \sa setDefault() language() country() */
end_comment
begin_constructor
DECL|function|QLocale
name|QLocale
operator|::
name|QLocale
parameter_list|(
name|Language
name|language
parameter_list|,
name|Country
name|country
parameter_list|)
member_init_list|:
name|v
argument_list|(
literal|0
argument_list|)
block|{
specifier|const
name|QLocalePrivate
modifier|*
name|d
init|=
name|QLocalePrivate
operator|::
name|findLocale
argument_list|(
name|language
argument_list|,
name|QLocale
operator|::
name|AnyScript
argument_list|,
name|country
argument_list|)
decl_stmt|;
comment|// If not found, should default to system
if|if
condition|(
name|d
operator|->
name|languageId
argument_list|()
operator|==
name|QLocale
operator|::
name|C
operator|&&
name|language
operator|!=
name|QLocale
operator|::
name|C
condition|)
block|{
name|p
operator|.
name|numberOptions
operator|=
name|default_number_options
expr_stmt|;
name|p
operator|.
name|index
operator|=
name|localePrivateIndex
argument_list|(
name|defaultPrivate
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|p
operator|.
name|numberOptions
operator|=
literal|0
expr_stmt|;
name|p
operator|.
name|index
operator|=
name|localePrivateIndex
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
block|}
end_constructor
begin_comment
unit|\
comment|/*!     \since 4.8      Constructs a QLocale object with the specified \a language, \a script and     \a country.      \list     \i If the language/script/country is found in the database, it is used.     \i If both \a script is AnyScript and \a country is AnyCountry, the        language is used with the most appropriate available script and country        (for example, Germany for German),     \i If either \a script is AnyScript or \a country is AnyCountry, the        language is used with the first locale that matches the given \a script        and \a country.     \i If neither the language nor the country are found, QLocale        defaults to the default locale (see setDefault()).     \endlist      The language, script and country that are actually used can be queried     using language(), script() and country().      \sa setDefault() language() script() country() */
end_comment
begin_constructor
DECL|function|QLocale
name|QLocale
operator|::
name|QLocale
parameter_list|(
name|Language
name|language
parameter_list|,
name|Script
name|script
parameter_list|,
name|Country
name|country
parameter_list|)
member_init_list|:
name|v
argument_list|(
literal|0
argument_list|)
block|{
specifier|const
name|QLocalePrivate
modifier|*
name|d
init|=
name|QLocalePrivate
operator|::
name|findLocale
argument_list|(
name|language
argument_list|,
name|script
argument_list|,
name|country
argument_list|)
decl_stmt|;
comment|// If not found, should default to system
if|if
condition|(
name|d
operator|->
name|languageId
argument_list|()
operator|==
name|QLocale
operator|::
name|C
operator|&&
name|language
operator|!=
name|QLocale
operator|::
name|C
condition|)
block|{
name|p
operator|.
name|numberOptions
operator|=
name|default_number_options
expr_stmt|;
name|p
operator|.
name|index
operator|=
name|localePrivateIndex
argument_list|(
name|defaultPrivate
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|p
operator|.
name|numberOptions
operator|=
literal|0
expr_stmt|;
name|p
operator|.
name|index
operator|=
name|localePrivateIndex
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
block|}
end_constructor
begin_comment
comment|/*!     Constructs a QLocale object as a copy of \a other. */
end_comment
begin_constructor
DECL|function|QLocale
name|QLocale
operator|::
name|QLocale
parameter_list|(
specifier|const
name|QLocale
modifier|&
name|other
parameter_list|)
block|{
name|v
operator|=
name|other
operator|.
name|v
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|d
specifier|const
name|QLocalePrivate
modifier|*
name|QLocale
operator|::
name|d
parameter_list|()
specifier|const
block|{
return|return
name|dataPointerHelper
argument_list|(
name|p
operator|.
name|index
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Assigns \a other to this QLocale object and returns a reference     to this QLocale object. */
end_comment
begin_function
DECL|function|operator =
name|QLocale
modifier|&
name|QLocale
operator|::
name|operator
name|=
parameter_list|(
specifier|const
name|QLocale
modifier|&
name|other
parameter_list|)
block|{
name|v
operator|=
name|other
operator|.
name|v
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.2      Sets the \a options related to number conversions for this     QLocale instance. */
end_comment
begin_function
DECL|function|setNumberOptions
name|void
name|QLocale
operator|::
name|setNumberOptions
parameter_list|(
name|NumberOptions
name|options
parameter_list|)
block|{
name|p
operator|.
name|numberOptions
operator|=
name|options
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.2      Returns the options related to number conversions for this     QLocale instance.      By default, no options are set for the standard locales. */
end_comment
begin_function
DECL|function|numberOptions
name|QLocale
operator|::
name|NumberOptions
name|QLocale
operator|::
name|numberOptions
parameter_list|()
specifier|const
block|{
return|return
cast|static_cast
argument_list|<
name|NumberOption
argument_list|>
argument_list|(
name|p
operator|.
name|numberOptions
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.8      Returns \a str quoted according to the current locale using the given     quotation \a style. */
end_comment
begin_function
DECL|function|quoteString
name|QString
name|QLocale
operator|::
name|quoteString
parameter_list|(
specifier|const
name|QString
modifier|&
name|str
parameter_list|,
name|QuotationStyle
name|style
parameter_list|)
specifier|const
block|{
return|return
name|quoteString
argument_list|(
operator|&
name|str
argument_list|,
name|style
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.8      \overload */
end_comment
begin_function
DECL|function|quoteString
name|QString
name|QLocale
operator|::
name|quoteString
parameter_list|(
specifier|const
name|QStringRef
modifier|&
name|str
parameter_list|,
name|QuotationStyle
name|style
parameter_list|)
specifier|const
block|{
ifndef|#
directive|ifndef
name|QT_NO_SYSTEMLOCALE
if|if
condition|(
name|d
argument_list|()
operator|==
name|systemPrivate
argument_list|()
condition|)
block|{
name|QVariant
name|res
decl_stmt|;
if|if
condition|(
name|style
operator|==
name|QLocale
operator|::
name|AlternateQuotation
condition|)
name|res
operator|=
name|systemLocale
argument_list|()
operator|->
name|query
argument_list|(
name|QSystemLocale
operator|::
name|StringToAlternateQuotation
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|str
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|res
operator|.
name|isNull
argument_list|()
operator|||
name|style
operator|==
name|QLocale
operator|::
name|StandardQuotation
condition|)
name|res
operator|=
name|systemLocale
argument_list|()
operator|->
name|query
argument_list|(
name|QSystemLocale
operator|::
name|StringToStandardQuotation
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|str
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|res
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|res
operator|.
name|toString
argument_list|()
return|;
block|}
endif|#
directive|endif
if|if
condition|(
name|style
operator|==
name|QLocale
operator|::
name|StandardQuotation
condition|)
return|return
name|QChar
argument_list|(
name|d
argument_list|()
operator|->
name|m_quotation_start
argument_list|)
operator|%
name|str
operator|%
name|QChar
argument_list|(
name|d
argument_list|()
operator|->
name|m_quotation_end
argument_list|)
return|;
else|else
return|return
name|QChar
argument_list|(
name|d
argument_list|()
operator|->
name|m_alternate_quotation_start
argument_list|)
operator|%
name|str
operator|%
name|QChar
argument_list|(
name|d
argument_list|()
operator|->
name|m_alternate_quotation_end
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.8      Returns a string that represents a join of a given \a list of strings with     a separator defined by the locale. */
end_comment
begin_function
DECL|function|createSeparatedList
name|QString
name|QLocale
operator|::
name|createSeparatedList
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|list
parameter_list|)
specifier|const
block|{
ifndef|#
directive|ifndef
name|QT_NO_SYSTEMLOCALE
if|if
condition|(
name|d
argument_list|()
operator|==
name|systemPrivate
argument_list|()
condition|)
block|{
name|QVariant
name|res
decl_stmt|;
name|res
operator|=
name|systemLocale
argument_list|()
operator|->
name|query
argument_list|(
name|QSystemLocale
operator|::
name|ListToSeparatedString
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|list
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|res
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|res
operator|.
name|toString
argument_list|()
return|;
block|}
endif|#
directive|endif
specifier|const
name|int
name|size
init|=
name|list
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|==
literal|1
condition|)
block|{
return|return
name|list
operator|.
name|at
argument_list|(
literal|0
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|size
operator|==
literal|2
condition|)
block|{
name|QString
name|format
init|=
name|getLocaleData
argument_list|(
name|list_pattern_part_data
operator|+
name|d
argument_list|()
operator|->
name|m_list_pattern_part_two_idx
argument_list|,
name|d
argument_list|()
operator|->
name|m_list_pattern_part_two_size
argument_list|)
decl_stmt|;
return|return
name|format
operator|.
name|arg
argument_list|(
name|list
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|list
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|size
operator|>
literal|2
condition|)
block|{
name|QString
name|formatStart
init|=
name|getLocaleData
argument_list|(
name|list_pattern_part_data
operator|+
name|d
argument_list|()
operator|->
name|m_list_pattern_part_start_idx
argument_list|,
name|d
argument_list|()
operator|->
name|m_list_pattern_part_start_size
argument_list|)
decl_stmt|;
name|QString
name|formatMid
init|=
name|getLocaleData
argument_list|(
name|list_pattern_part_data
operator|+
name|d
argument_list|()
operator|->
name|m_list_pattern_part_mid_idx
argument_list|,
name|d
argument_list|()
operator|->
name|m_list_pattern_part_mid_size
argument_list|)
decl_stmt|;
name|QString
name|formatEnd
init|=
name|getLocaleData
argument_list|(
name|list_pattern_part_data
operator|+
name|d
argument_list|()
operator|->
name|m_list_pattern_part_end_idx
argument_list|,
name|d
argument_list|()
operator|->
name|m_list_pattern_part_end_size
argument_list|)
decl_stmt|;
name|QString
name|result
init|=
name|formatStart
operator|.
name|arg
argument_list|(
name|list
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|list
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
name|size
operator|-
literal|1
condition|;
operator|++
name|i
control|)
name|result
operator|=
name|formatMid
operator|.
name|arg
argument_list|(
name|result
argument_list|,
name|list
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|formatEnd
operator|.
name|arg
argument_list|(
name|result
argument_list|,
name|list
operator|.
name|at
argument_list|(
name|size
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \nonreentrant      Sets the global default locale to \a locale. These     values are used when a QLocale object is constructed with     no arguments. If this function is not called, the system's     locale is used.      \warning In a multithreaded application, the default locale     should be set at application startup, before any non-GUI threads     are created.      \sa system() c() */
end_comment
begin_function
DECL|function|setDefault
name|void
name|QLocale
operator|::
name|setDefault
parameter_list|(
specifier|const
name|QLocale
modifier|&
name|locale
parameter_list|)
block|{
name|default_lp
operator|=
name|locale
operator|.
name|d
argument_list|()
expr_stmt|;
name|default_number_options
operator|=
name|locale
operator|.
name|numberOptions
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_USE_ICU
name|qt_initIcu
argument_list|(
name|locale
operator|.
name|bcp47Name
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*!     Returns the language of this locale.      \sa script(), country(), languageToString(), bcp47Name() */
end_comment
begin_function
DECL|function|language
name|QLocale
operator|::
name|Language
name|QLocale
operator|::
name|language
parameter_list|()
specifier|const
block|{
return|return
name|Language
argument_list|(
name|d
argument_list|()
operator|->
name|languageId
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.8      Returns the script of this locale.      \sa language(), country(), languageToString(), scriptToString(), bcp47Name() */
end_comment
begin_function
DECL|function|script
name|QLocale
operator|::
name|Script
name|QLocale
operator|::
name|script
parameter_list|()
specifier|const
block|{
return|return
name|Script
argument_list|(
name|d
argument_list|()
operator|->
name|m_script_id
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the country of this locale.      \sa language(), script(), countryToString(), bcp47Name() */
end_comment
begin_function
DECL|function|country
name|QLocale
operator|::
name|Country
name|QLocale
operator|::
name|country
parameter_list|()
specifier|const
block|{
return|return
name|Country
argument_list|(
name|d
argument_list|()
operator|->
name|countryId
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the language and country of this locale as a     string of the form "language_country", where     language is a lowercase, two-letter ISO 639 language code,     and country is an uppercase, two- or three-letter ISO 3166 country code.      Note that even if QLocale object was constructed with an explicit script,     name() will not contain it for compatibility reasons. Use bcp47Name() instead     if you need a full locale name.      \sa QLocale(const QString&), language(), script(), country(), bcp47Name() */
end_comment
begin_function
DECL|function|name
name|QString
name|QLocale
operator|::
name|name
parameter_list|()
specifier|const
block|{
name|Language
name|l
init|=
name|language
argument_list|()
decl_stmt|;
name|QString
name|result
init|=
name|d
argument_list|()
operator|->
name|languageCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|l
operator|==
name|C
condition|)
return|return
name|result
return|;
name|Country
name|c
init|=
name|country
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|==
name|AnyCountry
condition|)
return|return
name|result
return|;
name|result
operator|.
name|append
argument_list|(
name|QLatin1Char
argument_list|(
literal|'_'
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
name|d
argument_list|()
operator|->
name|countryCode
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.8      Returns the dash-separated language, script and country (and possibly other BCP47 fields)     of this locale as a string.      Unlike the uiLanguages() the returned value of the bcp47Name() represents     the locale name of the QLocale data but not the language the user-interface     should be in.      This function tries to conform the locale name to BCP47.      \sa language(), country(), script(), uiLanguages() */
end_comment
begin_function
DECL|function|bcp47Name
name|QString
name|QLocale
operator|::
name|bcp47Name
parameter_list|()
specifier|const
block|{
return|return
name|d
argument_list|()
operator|->
name|bcp47Name
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns a QString containing the name of \a language.      \sa countryToString(), scriptToString(), bcp47Name() */
end_comment
begin_function
DECL|function|languageToString
name|QString
name|QLocale
operator|::
name|languageToString
parameter_list|(
name|Language
name|language
parameter_list|)
block|{
if|if
condition|(
name|uint
argument_list|(
name|language
argument_list|)
operator|>
name|uint
argument_list|(
name|QLocale
operator|::
name|LastLanguage
argument_list|)
condition|)
return|return
name|QLatin1String
argument_list|(
literal|"Unknown"
argument_list|)
return|;
return|return
name|QLatin1String
argument_list|(
name|language_name_list
operator|+
name|language_name_index
index|[
name|language
index|]
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns a QString containing the name of \a country.      \sa languageToString(), scriptToString(), country(), bcp47Name() */
end_comment
begin_function
DECL|function|countryToString
name|QString
name|QLocale
operator|::
name|countryToString
parameter_list|(
name|Country
name|country
parameter_list|)
block|{
if|if
condition|(
name|uint
argument_list|(
name|country
argument_list|)
operator|>
name|uint
argument_list|(
name|QLocale
operator|::
name|LastCountry
argument_list|)
condition|)
return|return
name|QLatin1String
argument_list|(
literal|"Unknown"
argument_list|)
return|;
return|return
name|QLatin1String
argument_list|(
name|country_name_list
operator|+
name|country_name_index
index|[
name|country
index|]
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.8      Returns a QString containing the name of \a script.      \sa languageToString(), countryToString(), script(), bcp47Name() */
end_comment
begin_function
DECL|function|scriptToString
name|QString
name|QLocale
operator|::
name|scriptToString
parameter_list|(
name|QLocale
operator|::
name|Script
name|script
parameter_list|)
block|{
if|if
condition|(
name|uint
argument_list|(
name|script
argument_list|)
operator|>
name|uint
argument_list|(
name|QLocale
operator|::
name|LastScript
argument_list|)
condition|)
return|return
name|QLatin1String
argument_list|(
literal|"Unknown"
argument_list|)
return|;
return|return
name|QLatin1String
argument_list|(
name|script_name_list
operator|+
name|script_name_index
index|[
name|script
index|]
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the short int represented by the localized string \a s,     using base \a base. If \a base is 0 the base is determined     automatically using the following rules: If the string begins with     "0x", it is assumed to be hexadecimal; if it begins with "0", it     is assumed to be octal; otherwise it is assumed to be decimal.      If the conversion fails the function returns 0.      If \a ok is not 0, failure is reported by setting *ok to false, and     success by setting *ok to true.      This function ignores leading and trailing whitespace.      \sa toUShort(), toString() */
end_comment
begin_function
DECL|function|toShort
name|short
name|QLocale
operator|::
name|toShort
parameter_list|(
specifier|const
name|QString
modifier|&
name|s
parameter_list|,
name|bool
modifier|*
name|ok
parameter_list|,
name|int
name|base
parameter_list|)
specifier|const
block|{
name|qlonglong
name|i
init|=
name|toLongLong
argument_list|(
name|s
argument_list|,
name|ok
argument_list|,
name|base
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
argument_list|<
name|SHRT_MIN
operator|||
name|i
argument_list|>
name|SHRT_MAX
condition|)
block|{
if|if
condition|(
name|ok
operator|!=
literal|0
condition|)
operator|*
name|ok
operator|=
literal|false
expr_stmt|;
return|return
literal|0
return|;
block|}
return|return
name|short
argument_list|(
name|i
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the unsigned short int represented by the localized string     \a s, using base \a base. If \a base is 0 the base is determined     automatically using the following rules: If the string begins with     "0x", it is assumed to be hexadecimal; if it begins with "0", it     is assumed to be octal; otherwise it is assumed to be decimal.      If the conversion fails the function returns 0.      If \a ok is not 0, failure is reported by setting *ok to false, and     success by setting *ok to true.      This function ignores leading and trailing whitespace.      \sa toShort(), toString() */
end_comment
begin_function
DECL|function|toUShort
name|ushort
name|QLocale
operator|::
name|toUShort
parameter_list|(
specifier|const
name|QString
modifier|&
name|s
parameter_list|,
name|bool
modifier|*
name|ok
parameter_list|,
name|int
name|base
parameter_list|)
specifier|const
block|{
name|qulonglong
name|i
init|=
name|toULongLong
argument_list|(
name|s
argument_list|,
name|ok
argument_list|,
name|base
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|>
name|USHRT_MAX
condition|)
block|{
if|if
condition|(
name|ok
operator|!=
literal|0
condition|)
operator|*
name|ok
operator|=
literal|false
expr_stmt|;
return|return
literal|0
return|;
block|}
return|return
name|ushort
argument_list|(
name|i
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the int represented by the localized string \a s, using     base \a base. If \a base is 0 the base is determined automatically     using the following rules: If the string begins with "0x", it is     assumed to be hexadecimal; if it begins with "0", it is assumed to     be octal; otherwise it is assumed to be decimal.      If the conversion fails the function returns 0.      If \a ok is not 0, failure is reported by setting *ok to false, and     success by setting *ok to true.      This function ignores leading and trailing whitespace.      \sa toUInt(), toString() */
end_comment
begin_function
DECL|function|toInt
name|int
name|QLocale
operator|::
name|toInt
parameter_list|(
specifier|const
name|QString
modifier|&
name|s
parameter_list|,
name|bool
modifier|*
name|ok
parameter_list|,
name|int
name|base
parameter_list|)
specifier|const
block|{
name|qlonglong
name|i
init|=
name|toLongLong
argument_list|(
name|s
argument_list|,
name|ok
argument_list|,
name|base
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
argument_list|<
name|INT_MIN
operator|||
name|i
argument_list|>
name|INT_MAX
condition|)
block|{
if|if
condition|(
name|ok
operator|!=
literal|0
condition|)
operator|*
name|ok
operator|=
literal|false
expr_stmt|;
return|return
literal|0
return|;
block|}
return|return
name|int
argument_list|(
name|i
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the unsigned int represented by the localized string \a s,     using base \a base. If \a base is 0 the base is determined     automatically using the following rules: If the string begins with     "0x", it is assumed to be hexadecimal; if it begins with "0", it     is assumed to be octal; otherwise it is assumed to be decimal.      If the conversion fails the function returns 0.      If \a ok is not 0, failure is reported by setting *ok to false, and     success by setting *ok to true.      This function ignores leading and trailing whitespace.      \sa toInt(), toString() */
end_comment
begin_function
DECL|function|toUInt
name|uint
name|QLocale
operator|::
name|toUInt
parameter_list|(
specifier|const
name|QString
modifier|&
name|s
parameter_list|,
name|bool
modifier|*
name|ok
parameter_list|,
name|int
name|base
parameter_list|)
specifier|const
block|{
name|qulonglong
name|i
init|=
name|toULongLong
argument_list|(
name|s
argument_list|,
name|ok
argument_list|,
name|base
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|>
name|UINT_MAX
condition|)
block|{
if|if
condition|(
name|ok
operator|!=
literal|0
condition|)
operator|*
name|ok
operator|=
literal|false
expr_stmt|;
return|return
literal|0
return|;
block|}
return|return
name|uint
argument_list|(
name|i
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the long long int represented by the localized string \a     s, using base \a base. If \a base is 0 the base is determined     automatically using the following rules: If the string begins with     "0x", it is assumed to be hexadecimal; if it begins with "0", it     is assumed to be octal; otherwise it is assumed to be decimal.      If the conversion fails the function returns 0.      If \a ok is not 0, failure is reported by setting *ok to false, and     success by setting *ok to true.      This function ignores leading and trailing whitespace.      \sa toInt(), toULongLong(), toDouble(), toString() */
end_comment
begin_function
DECL|function|toLongLong
name|qlonglong
name|QLocale
operator|::
name|toLongLong
parameter_list|(
specifier|const
name|QString
modifier|&
name|s
parameter_list|,
name|bool
modifier|*
name|ok
parameter_list|,
name|int
name|base
parameter_list|)
specifier|const
block|{
name|QLocalePrivate
operator|::
name|GroupSeparatorMode
name|mode
init|=
name|p
operator|.
name|numberOptions
operator|&
name|RejectGroupSeparator
condition|?
name|QLocalePrivate
operator|::
name|FailOnGroupSeparators
else|:
name|QLocalePrivate
operator|::
name|ParseGroupSeparators
decl_stmt|;
return|return
name|d
argument_list|()
operator|->
name|stringToLongLong
argument_list|(
name|s
argument_list|,
name|base
argument_list|,
name|ok
argument_list|,
name|mode
argument_list|)
return|;
block|}
end_function
begin_comment
comment|// ### Qt5: make the return type for toULongLong() qulonglong.
end_comment
begin_comment
comment|/*!     Returns the unsigned long long int represented by the localized     string \a s, using base \a base. If \a base is 0 the base is     determined automatically using the following rules: If the string     begins with "0x", it is assumed to be hexadecimal; if it begins     with "0", it is assumed to be octal; otherwise it is assumed to be     decimal.      If the conversion fails the function returns 0.      If \a ok is not 0, failure is reported by setting *ok to false, and     success by setting *ok to true.      This function ignores leading and trailing whitespace.      \sa toLongLong(), toInt(), toDouble(), toString() */
end_comment
begin_function
DECL|function|toULongLong
name|qlonglong
name|QLocale
operator|::
name|toULongLong
parameter_list|(
specifier|const
name|QString
modifier|&
name|s
parameter_list|,
name|bool
modifier|*
name|ok
parameter_list|,
name|int
name|base
parameter_list|)
specifier|const
block|{
name|QLocalePrivate
operator|::
name|GroupSeparatorMode
name|mode
init|=
name|p
operator|.
name|numberOptions
operator|&
name|RejectGroupSeparator
condition|?
name|QLocalePrivate
operator|::
name|FailOnGroupSeparators
else|:
name|QLocalePrivate
operator|::
name|ParseGroupSeparators
decl_stmt|;
return|return
name|d
argument_list|()
operator|->
name|stringToUnsLongLong
argument_list|(
name|s
argument_list|,
name|base
argument_list|,
name|ok
argument_list|,
name|mode
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the float represented by the localized string \a s, or 0.0     if the conversion failed.      If \a ok is not 0, reports failure by setting     *ok to false and success by setting *ok to true.      This function ignores leading and trailing whitespace.      \sa toDouble(), toInt(), toString() */
end_comment
begin_define
DECL|macro|QT_MAX_FLOAT
define|#
directive|define
name|QT_MAX_FLOAT
value|3.4028234663852886e+38
end_define
begin_function
DECL|function|toFloat
name|float
name|QLocale
operator|::
name|toFloat
parameter_list|(
specifier|const
name|QString
modifier|&
name|s
parameter_list|,
name|bool
modifier|*
name|ok
parameter_list|)
specifier|const
block|{
name|bool
name|myOk
decl_stmt|;
name|double
name|d
init|=
name|toDouble
argument_list|(
name|s
argument_list|,
operator|&
name|myOk
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|myOk
operator|||
name|d
operator|>
name|QT_MAX_FLOAT
operator|||
name|d
operator|<
operator|-
name|QT_MAX_FLOAT
condition|)
block|{
if|if
condition|(
name|ok
operator|!=
literal|0
condition|)
operator|*
name|ok
operator|=
literal|false
expr_stmt|;
return|return
literal|0.0
return|;
block|}
if|if
condition|(
name|ok
operator|!=
literal|0
condition|)
operator|*
name|ok
operator|=
literal|true
expr_stmt|;
return|return
name|float
argument_list|(
name|d
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the double represented by the localized string \a s, or     0.0 if the conversion failed.      If \a ok is not 0, reports failure by setting     *ok to false and success by setting *ok to true.      Unlike QString::toDouble(), this function does not fall back to     the "C" locale if the string cannot be interpreted in this     locale.      \snippet doc/src/snippets/code/src_corelib_tools_qlocale.cpp 3      Notice that the last conversion returns 1234.0, because '.' is the     thousands group separator in the German locale.      This function ignores leading and trailing whitespace.      \sa toFloat(), toInt(), toString() */
end_comment
begin_function
DECL|function|toDouble
name|double
name|QLocale
operator|::
name|toDouble
parameter_list|(
specifier|const
name|QString
modifier|&
name|s
parameter_list|,
name|bool
modifier|*
name|ok
parameter_list|)
specifier|const
block|{
name|QLocalePrivate
operator|::
name|GroupSeparatorMode
name|mode
init|=
name|p
operator|.
name|numberOptions
operator|&
name|RejectGroupSeparator
condition|?
name|QLocalePrivate
operator|::
name|FailOnGroupSeparators
else|:
name|QLocalePrivate
operator|::
name|ParseGroupSeparators
decl_stmt|;
return|return
name|d
argument_list|()
operator|->
name|stringToDouble
argument_list|(
name|s
argument_list|,
name|ok
argument_list|,
name|mode
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns a localized string representation of \a i.      \sa toLongLong() */
end_comment
begin_function
DECL|function|toString
name|QString
name|QLocale
operator|::
name|toString
parameter_list|(
name|qlonglong
name|i
parameter_list|)
specifier|const
block|{
name|int
name|flags
init|=
name|p
operator|.
name|numberOptions
operator|&
name|OmitGroupSeparator
condition|?
literal|0
else|:
name|QLocalePrivate
operator|::
name|ThousandsGroup
decl_stmt|;
return|return
name|d
argument_list|()
operator|->
name|longLongToString
argument_list|(
name|i
argument_list|,
operator|-
literal|1
argument_list|,
literal|10
argument_list|,
operator|-
literal|1
argument_list|,
name|flags
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \overload      \sa toULongLong() */
end_comment
begin_function
DECL|function|toString
name|QString
name|QLocale
operator|::
name|toString
parameter_list|(
name|qulonglong
name|i
parameter_list|)
specifier|const
block|{
name|int
name|flags
init|=
name|p
operator|.
name|numberOptions
operator|&
name|OmitGroupSeparator
condition|?
literal|0
else|:
name|QLocalePrivate
operator|::
name|ThousandsGroup
decl_stmt|;
return|return
name|d
argument_list|()
operator|->
name|unsLongLongToString
argument_list|(
name|i
argument_list|,
operator|-
literal|1
argument_list|,
literal|10
argument_list|,
operator|-
literal|1
argument_list|,
name|flags
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns a localized string representation of the given \a date in the     specified \a format.     If \a format is an empty string, an empty string is returned. */
end_comment
begin_function
DECL|function|toString
name|QString
name|QLocale
operator|::
name|toString
parameter_list|(
specifier|const
name|QDate
modifier|&
name|date
parameter_list|,
specifier|const
name|QString
modifier|&
name|format
parameter_list|)
specifier|const
block|{
return|return
name|d
argument_list|()
operator|->
name|dateTimeToString
argument_list|(
name|format
argument_list|,
operator|&
name|date
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns a localized string representation of the given \a date according     to the specified \a format. */
end_comment
begin_function
DECL|function|toString
name|QString
name|QLocale
operator|::
name|toString
parameter_list|(
specifier|const
name|QDate
modifier|&
name|date
parameter_list|,
name|FormatType
name|format
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|date
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|QString
argument_list|()
return|;
ifndef|#
directive|ifndef
name|QT_NO_SYSTEMLOCALE
if|if
condition|(
name|d
argument_list|()
operator|==
name|systemPrivate
argument_list|()
condition|)
block|{
name|QVariant
name|res
init|=
name|systemLocale
argument_list|()
operator|->
name|query
argument_list|(
name|format
operator|==
name|LongFormat
condition|?
name|QSystemLocale
operator|::
name|DateToStringLong
else|:
name|QSystemLocale
operator|::
name|DateToStringShort
argument_list|,
name|date
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|res
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|res
operator|.
name|toString
argument_list|()
return|;
block|}
endif|#
directive|endif
name|QString
name|format_str
init|=
name|dateFormat
argument_list|(
name|format
argument_list|)
decl_stmt|;
return|return
name|toString
argument_list|(
name|date
argument_list|,
name|format_str
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|timeFormatContainsAP
specifier|static
name|bool
name|timeFormatContainsAP
parameter_list|(
specifier|const
name|QString
modifier|&
name|format
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|format
operator|.
name|size
argument_list|()
condition|)
block|{
if|if
condition|(
name|format
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|unicode
argument_list|()
operator|==
literal|'\''
condition|)
block|{
name|qt_readEscapedFormatString
argument_list|(
name|format
argument_list|,
operator|&
name|i
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|format
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|toLower
argument_list|()
operator|.
name|unicode
argument_list|()
operator|==
literal|'a'
condition|)
return|return
literal|true
return|;
operator|++
name|i
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|timeZone
specifier|static
name|QString
name|timeZone
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|TIME_ZONE_INFORMATION
name|info
decl_stmt|;
name|DWORD
name|res
init|=
name|GetTimeZoneInformation
argument_list|(
operator|&
name|info
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|==
name|TIME_ZONE_ID_UNKNOWN
condition|)
return|return
name|QString
argument_list|()
return|;
return|return
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|info
operator|.
name|StandardName
argument_list|)
return|;
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
name|_tzset
argument_list|()
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|_MSC_VER
argument_list|)
operator|&&
name|_MSC_VER
operator|>=
literal|1400
name|size_t
name|returnSize
init|=
literal|0
decl_stmt|;
name|char
name|timeZoneName
index|[
literal|512
index|]
decl_stmt|;
if|if
condition|(
name|_get_tzname
argument_list|(
operator|&
name|returnSize
argument_list|,
name|timeZoneName
argument_list|,
literal|512
argument_list|,
literal|1
argument_list|)
condition|)
return|return
name|QString
argument_list|()
return|;
return|return
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|timeZoneName
argument_list|)
return|;
else|#
directive|else
return|return
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|_tzname
index|[
literal|1
index|]
argument_list|)
return|;
endif|#
directive|endif
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_VXWORKS
argument_list|)
return|return
name|QString
argument_list|()
return|;
else|#
directive|else
name|tzset
argument_list|()
expr_stmt|;
return|return
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|tzname
index|[
literal|1
index|]
argument_list|)
return|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*!     Returns a localized string representation of the given \a time according     to the specified \a format.     If \a format is an empty string, an empty string is returned. */
end_comment
begin_function
DECL|function|toString
name|QString
name|QLocale
operator|::
name|toString
parameter_list|(
specifier|const
name|QTime
modifier|&
name|time
parameter_list|,
specifier|const
name|QString
modifier|&
name|format
parameter_list|)
specifier|const
block|{
return|return
name|d
argument_list|()
operator|->
name|dateTimeToString
argument_list|(
name|format
argument_list|,
literal|0
argument_list|,
operator|&
name|time
argument_list|,
name|this
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.4      Returns a localized string representation of the given \a dateTime according     to the specified \a format.     If \a format is an empty string, an empty string is returned. */
end_comment
begin_function
DECL|function|toString
name|QString
name|QLocale
operator|::
name|toString
parameter_list|(
specifier|const
name|QDateTime
modifier|&
name|dateTime
parameter_list|,
specifier|const
name|QString
modifier|&
name|format
parameter_list|)
specifier|const
block|{
specifier|const
name|QDate
name|dt
init|=
name|dateTime
operator|.
name|date
argument_list|()
decl_stmt|;
specifier|const
name|QTime
name|tm
init|=
name|dateTime
operator|.
name|time
argument_list|()
decl_stmt|;
return|return
name|d
argument_list|()
operator|->
name|dateTimeToString
argument_list|(
name|format
argument_list|,
operator|&
name|dt
argument_list|,
operator|&
name|tm
argument_list|,
name|this
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.4      Returns a localized string representation of the given \a dateTime according     to the specified \a format. */
end_comment
begin_function
DECL|function|toString
name|QString
name|QLocale
operator|::
name|toString
parameter_list|(
specifier|const
name|QDateTime
modifier|&
name|dateTime
parameter_list|,
name|FormatType
name|format
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|dateTime
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|QString
argument_list|()
return|;
ifndef|#
directive|ifndef
name|QT_NO_SYSTEMLOCALE
if|if
condition|(
name|d
argument_list|()
operator|==
name|systemPrivate
argument_list|()
condition|)
block|{
name|QVariant
name|res
init|=
name|systemLocale
argument_list|()
operator|->
name|query
argument_list|(
name|format
operator|==
name|LongFormat
condition|?
name|QSystemLocale
operator|::
name|DateTimeToStringLong
else|:
name|QSystemLocale
operator|::
name|DateTimeToStringShort
argument_list|,
name|dateTime
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|res
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|res
operator|.
name|toString
argument_list|()
return|;
block|}
endif|#
directive|endif
specifier|const
name|QString
name|format_str
init|=
name|dateTimeFormat
argument_list|(
name|format
argument_list|)
decl_stmt|;
return|return
name|toString
argument_list|(
name|dateTime
argument_list|,
name|format_str
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns a localized string representation of the given \a time in the     specified \a format. */
end_comment
begin_function
DECL|function|toString
name|QString
name|QLocale
operator|::
name|toString
parameter_list|(
specifier|const
name|QTime
modifier|&
name|time
parameter_list|,
name|FormatType
name|format
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|time
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|QString
argument_list|()
return|;
ifndef|#
directive|ifndef
name|QT_NO_SYSTEMLOCALE
if|if
condition|(
name|d
argument_list|()
operator|==
name|systemPrivate
argument_list|()
condition|)
block|{
name|QVariant
name|res
init|=
name|systemLocale
argument_list|()
operator|->
name|query
argument_list|(
name|format
operator|==
name|LongFormat
condition|?
name|QSystemLocale
operator|::
name|TimeToStringLong
else|:
name|QSystemLocale
operator|::
name|TimeToStringShort
argument_list|,
name|time
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|res
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|res
operator|.
name|toString
argument_list|()
return|;
block|}
endif|#
directive|endif
name|QString
name|format_str
init|=
name|timeFormat
argument_list|(
name|format
argument_list|)
decl_stmt|;
return|return
name|toString
argument_list|(
name|time
argument_list|,
name|format_str
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.1      Returns the date format used for the current locale.      If \a format is LongFormat the format will be a long version.     Otherwise it uses a shorter version.      \sa QDate::toString(), QDate::fromString() */
end_comment
begin_function
DECL|function|dateFormat
name|QString
name|QLocale
operator|::
name|dateFormat
parameter_list|(
name|FormatType
name|format
parameter_list|)
specifier|const
block|{
ifndef|#
directive|ifndef
name|QT_NO_SYSTEMLOCALE
if|if
condition|(
name|d
argument_list|()
operator|==
name|systemPrivate
argument_list|()
condition|)
block|{
name|QVariant
name|res
init|=
name|systemLocale
argument_list|()
operator|->
name|query
argument_list|(
name|format
operator|==
name|LongFormat
condition|?
name|QSystemLocale
operator|::
name|DateFormatLong
else|:
name|QSystemLocale
operator|::
name|DateFormatShort
argument_list|,
name|QVariant
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|res
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|res
operator|.
name|toString
argument_list|()
return|;
block|}
endif|#
directive|endif
name|quint32
name|idx
decl_stmt|,
name|size
decl_stmt|;
switch|switch
condition|(
name|format
condition|)
block|{
case|case
name|LongFormat
case|:
name|idx
operator|=
name|d
argument_list|()
operator|->
name|m_long_date_format_idx
expr_stmt|;
name|size
operator|=
name|d
argument_list|()
operator|->
name|m_long_date_format_size
expr_stmt|;
break|break;
default|default:
name|idx
operator|=
name|d
argument_list|()
operator|->
name|m_short_date_format_idx
expr_stmt|;
name|size
operator|=
name|d
argument_list|()
operator|->
name|m_short_date_format_size
expr_stmt|;
break|break;
block|}
return|return
name|getLocaleData
argument_list|(
name|date_format_data
operator|+
name|idx
argument_list|,
name|size
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.1      Returns the time format used for the current locale.      If \a format is LongFormat the format will be a long version.     Otherwise it uses a shorter version.      \sa QTime::toString(), QTime::fromString() */
end_comment
begin_function
DECL|function|timeFormat
name|QString
name|QLocale
operator|::
name|timeFormat
parameter_list|(
name|FormatType
name|format
parameter_list|)
specifier|const
block|{
ifndef|#
directive|ifndef
name|QT_NO_SYSTEMLOCALE
if|if
condition|(
name|d
argument_list|()
operator|==
name|systemPrivate
argument_list|()
condition|)
block|{
name|QVariant
name|res
init|=
name|systemLocale
argument_list|()
operator|->
name|query
argument_list|(
name|format
operator|==
name|LongFormat
condition|?
name|QSystemLocale
operator|::
name|TimeFormatLong
else|:
name|QSystemLocale
operator|::
name|TimeFormatShort
argument_list|,
name|QVariant
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|res
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|res
operator|.
name|toString
argument_list|()
return|;
block|}
endif|#
directive|endif
name|quint32
name|idx
decl_stmt|,
name|size
decl_stmt|;
switch|switch
condition|(
name|format
condition|)
block|{
case|case
name|LongFormat
case|:
name|idx
operator|=
name|d
argument_list|()
operator|->
name|m_long_time_format_idx
expr_stmt|;
name|size
operator|=
name|d
argument_list|()
operator|->
name|m_long_time_format_size
expr_stmt|;
break|break;
default|default:
name|idx
operator|=
name|d
argument_list|()
operator|->
name|m_short_time_format_idx
expr_stmt|;
name|size
operator|=
name|d
argument_list|()
operator|->
name|m_short_time_format_size
expr_stmt|;
break|break;
block|}
return|return
name|getLocaleData
argument_list|(
name|time_format_data
operator|+
name|idx
argument_list|,
name|size
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.4      Returns the date time format used for the current locale.      If \a format is ShortFormat the format will be a short version.     Otherwise it uses a longer version.      \sa QDateTime::toString(), QDateTime::fromString() */
end_comment
begin_function
DECL|function|dateTimeFormat
name|QString
name|QLocale
operator|::
name|dateTimeFormat
parameter_list|(
name|FormatType
name|format
parameter_list|)
specifier|const
block|{
ifndef|#
directive|ifndef
name|QT_NO_SYSTEMLOCALE
if|if
condition|(
name|d
argument_list|()
operator|==
name|systemPrivate
argument_list|()
condition|)
block|{
name|QVariant
name|res
init|=
name|systemLocale
argument_list|()
operator|->
name|query
argument_list|(
name|format
operator|==
name|LongFormat
condition|?
name|QSystemLocale
operator|::
name|DateTimeFormatLong
else|:
name|QSystemLocale
operator|::
name|DateTimeFormatShort
argument_list|,
name|QVariant
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|res
operator|.
name|isNull
argument_list|()
condition|)
block|{
return|return
name|res
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
endif|#
directive|endif
return|return
name|dateFormat
argument_list|(
name|format
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
operator|+
name|timeFormat
argument_list|(
name|format
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.4      Parses the time string given in \a string and returns the     time. The format of the time string is chosen according to the     \a format parameter (see timeFormat()).      If the time could not be parsed, returns an invalid time.      \sa timeFormat(), toDate(), toDateTime(), QTime::fromString() */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DATESTRING
end_ifndef
begin_function
DECL|function|toTime
name|QTime
name|QLocale
operator|::
name|toTime
parameter_list|(
specifier|const
name|QString
modifier|&
name|string
parameter_list|,
name|FormatType
name|format
parameter_list|)
specifier|const
block|{
return|return
name|toTime
argument_list|(
name|string
argument_list|,
name|timeFormat
argument_list|(
name|format
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*!     \since 4.4      Parses the date string given in \a string and returns the     date. The format of the date string is chosen according to the     \a format parameter (see dateFormat()).      If the date could not be parsed, returns an invalid date.      \sa dateFormat(), toTime(), toDateTime(), QDate::fromString() */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DATESTRING
end_ifndef
begin_function
DECL|function|toDate
name|QDate
name|QLocale
operator|::
name|toDate
parameter_list|(
specifier|const
name|QString
modifier|&
name|string
parameter_list|,
name|FormatType
name|format
parameter_list|)
specifier|const
block|{
return|return
name|toDate
argument_list|(
name|string
argument_list|,
name|dateFormat
argument_list|(
name|format
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*!     \since 4.4      Parses the date/time string given in \a string and returns the     time. The format of the date/time string is chosen according to the     \a format parameter (see dateTimeFormat()).      If the string could not be parsed, returns an invalid QDateTime.      \sa dateTimeFormat(), toTime(), toDate(), QDateTime::fromString() */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DATESTRING
end_ifndef
begin_function
DECL|function|toDateTime
name|QDateTime
name|QLocale
operator|::
name|toDateTime
parameter_list|(
specifier|const
name|QString
modifier|&
name|string
parameter_list|,
name|FormatType
name|format
parameter_list|)
specifier|const
block|{
return|return
name|toDateTime
argument_list|(
name|string
argument_list|,
name|dateTimeFormat
argument_list|(
name|format
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*!     \since 4.4      Parses the time string given in \a string and returns the     time. See QTime::fromString() for information on what is a valid     format string.      If the time could not be parsed, returns an invalid time.      \sa timeFormat(), toDate(), toDateTime(), QTime::fromString() */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DATESTRING
end_ifndef
begin_function
DECL|function|toTime
name|QTime
name|QLocale
operator|::
name|toTime
parameter_list|(
specifier|const
name|QString
modifier|&
name|string
parameter_list|,
specifier|const
name|QString
modifier|&
name|format
parameter_list|)
specifier|const
block|{
name|QTime
name|time
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_BOOTSTRAPPED
name|QDateTimeParser
name|dt
argument_list|(
name|QVariant
operator|::
name|Time
argument_list|,
name|QDateTimeParser
operator|::
name|FromString
argument_list|)
decl_stmt|;
name|dt
operator|.
name|defaultLocale
operator|=
operator|*
name|this
expr_stmt|;
if|if
condition|(
name|dt
operator|.
name|parseFormat
argument_list|(
name|format
argument_list|)
condition|)
name|dt
operator|.
name|fromString
argument_list|(
name|string
argument_list|,
literal|0
argument_list|,
operator|&
name|time
argument_list|)
expr_stmt|;
else|#
directive|else
name|Q_UNUSED
argument_list|(
name|string
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|format
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|time
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*!     \since 4.4      Parses the date string given in \a string and returns the     date. See QDate::fromString() for information on the expressions     that can be used with this function.      This function searches month names and the names of the days of     the week in the current locale.      If the date could not be parsed, returns an invalid date.      \sa dateFormat(), toTime(), toDateTime(), QDate::fromString() */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DATESTRING
end_ifndef
begin_function
DECL|function|toDate
name|QDate
name|QLocale
operator|::
name|toDate
parameter_list|(
specifier|const
name|QString
modifier|&
name|string
parameter_list|,
specifier|const
name|QString
modifier|&
name|format
parameter_list|)
specifier|const
block|{
name|QDate
name|date
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_BOOTSTRAPPED
name|QDateTimeParser
name|dt
argument_list|(
name|QVariant
operator|::
name|Date
argument_list|,
name|QDateTimeParser
operator|::
name|FromString
argument_list|)
decl_stmt|;
name|dt
operator|.
name|defaultLocale
operator|=
operator|*
name|this
expr_stmt|;
if|if
condition|(
name|dt
operator|.
name|parseFormat
argument_list|(
name|format
argument_list|)
condition|)
name|dt
operator|.
name|fromString
argument_list|(
name|string
argument_list|,
operator|&
name|date
argument_list|,
literal|0
argument_list|)
expr_stmt|;
else|#
directive|else
name|Q_UNUSED
argument_list|(
name|string
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|format
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|date
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*!     \since 4.4      Parses the date/time string given in \a string and returns the     time.  See QDateTime::fromString() for information on the expressions     that can be used with this function.      \note The month and day names used must be given in the user's local     language.      If the string could not be parsed, returns an invalid QDateTime.      \sa dateTimeFormat(), toTime(), toDate(), QDateTime::fromString() */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DATESTRING
end_ifndef
begin_function
DECL|function|toDateTime
name|QDateTime
name|QLocale
operator|::
name|toDateTime
parameter_list|(
specifier|const
name|QString
modifier|&
name|string
parameter_list|,
specifier|const
name|QString
modifier|&
name|format
parameter_list|)
specifier|const
block|{
ifndef|#
directive|ifndef
name|QT_BOOTSTRAPPED
name|QTime
name|time
decl_stmt|;
name|QDate
name|date
decl_stmt|;
name|QDateTimeParser
name|dt
argument_list|(
name|QVariant
operator|::
name|DateTime
argument_list|,
name|QDateTimeParser
operator|::
name|FromString
argument_list|)
decl_stmt|;
name|dt
operator|.
name|defaultLocale
operator|=
operator|*
name|this
expr_stmt|;
if|if
condition|(
name|dt
operator|.
name|parseFormat
argument_list|(
name|format
argument_list|)
operator|&&
name|dt
operator|.
name|fromString
argument_list|(
name|string
argument_list|,
operator|&
name|date
argument_list|,
operator|&
name|time
argument_list|)
condition|)
return|return
name|QDateTime
argument_list|(
name|date
argument_list|,
name|time
argument_list|)
return|;
else|#
directive|else
name|Q_UNUSED
argument_list|(
name|string
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|format
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|QDateTime
argument_list|(
name|QDate
argument_list|()
argument_list|,
name|QTime
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*!     \since 4.1      Returns the decimal point character of this locale. */
end_comment
begin_function
DECL|function|decimalPoint
name|QChar
name|QLocale
operator|::
name|decimalPoint
parameter_list|()
specifier|const
block|{
return|return
name|d
argument_list|()
operator|->
name|decimal
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.1      Returns the group separator character of this locale. */
end_comment
begin_function
DECL|function|groupSeparator
name|QChar
name|QLocale
operator|::
name|groupSeparator
parameter_list|()
specifier|const
block|{
return|return
name|d
argument_list|()
operator|->
name|group
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.1      Returns the percent character of this locale. */
end_comment
begin_function
DECL|function|percent
name|QChar
name|QLocale
operator|::
name|percent
parameter_list|()
specifier|const
block|{
return|return
name|d
argument_list|()
operator|->
name|percent
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.1      Returns the zero digit character of this locale. */
end_comment
begin_function
DECL|function|zeroDigit
name|QChar
name|QLocale
operator|::
name|zeroDigit
parameter_list|()
specifier|const
block|{
return|return
name|d
argument_list|()
operator|->
name|zero
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.1      Returns the negative sign character of this locale. */
end_comment
begin_function
DECL|function|negativeSign
name|QChar
name|QLocale
operator|::
name|negativeSign
parameter_list|()
specifier|const
block|{
return|return
name|d
argument_list|()
operator|->
name|minus
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.5      Returns the positive sign character of this locale. */
end_comment
begin_function
DECL|function|positiveSign
name|QChar
name|QLocale
operator|::
name|positiveSign
parameter_list|()
specifier|const
block|{
return|return
name|d
argument_list|()
operator|->
name|plus
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.1      Returns the exponential character of this locale. */
end_comment
begin_function
DECL|function|exponential
name|QChar
name|QLocale
operator|::
name|exponential
parameter_list|()
specifier|const
block|{
return|return
name|d
argument_list|()
operator|->
name|exponential
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|qIsUpper
specifier|static
name|bool
name|qIsUpper
parameter_list|(
name|char
name|c
parameter_list|)
block|{
return|return
name|c
operator|>=
literal|'A'
operator|&&
name|c
operator|<=
literal|'Z'
return|;
block|}
end_function
begin_function
DECL|function|qToLower
specifier|static
name|char
name|qToLower
parameter_list|(
name|char
name|c
parameter_list|)
block|{
if|if
condition|(
name|c
operator|>=
literal|'A'
operator|&&
name|c
operator|<=
literal|'Z'
condition|)
return|return
name|c
operator|-
literal|'A'
operator|+
literal|'a'
return|;
else|else
return|return
name|c
return|;
block|}
end_function
begin_comment
comment|/*!     \overload      \a f and \a prec have the same meaning as in QString::number(double, char, int).      \sa toDouble() */
end_comment
begin_function
DECL|function|toString
name|QString
name|QLocale
operator|::
name|toString
parameter_list|(
name|double
name|i
parameter_list|,
name|char
name|f
parameter_list|,
name|int
name|prec
parameter_list|)
specifier|const
block|{
name|QLocalePrivate
operator|::
name|DoubleForm
name|form
init|=
name|QLocalePrivate
operator|::
name|DFDecimal
decl_stmt|;
name|uint
name|flags
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|qIsUpper
argument_list|(
name|f
argument_list|)
condition|)
name|flags
operator|=
name|QLocalePrivate
operator|::
name|CapitalEorX
expr_stmt|;
name|f
operator|=
name|qToLower
argument_list|(
name|f
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|f
condition|)
block|{
case|case
literal|'f'
case|:
name|form
operator|=
name|QLocalePrivate
operator|::
name|DFDecimal
expr_stmt|;
break|break;
case|case
literal|'e'
case|:
name|form
operator|=
name|QLocalePrivate
operator|::
name|DFExponent
expr_stmt|;
break|break;
case|case
literal|'g'
case|:
name|form
operator|=
name|QLocalePrivate
operator|::
name|DFSignificantDigits
expr_stmt|;
break|break;
default|default:
break|break;
block|}
if|if
condition|(
operator|!
operator|(
name|p
operator|.
name|numberOptions
operator|&
name|OmitGroupSeparator
operator|)
condition|)
name|flags
operator||=
name|QLocalePrivate
operator|::
name|ThousandsGroup
expr_stmt|;
return|return
name|d
argument_list|()
operator|->
name|doubleToString
argument_list|(
name|i
argument_list|,
name|prec
argument_list|,
name|form
argument_list|,
operator|-
literal|1
argument_list|,
name|flags
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \fn QLocale QLocale::c()      Returns a QLocale object initialized to the "C" locale.      \sa system() */
end_comment
begin_comment
comment|/*!     Returns a QLocale object initialized to the system locale.      On Windows and Mac, this locale will use the decimal/grouping characters and date/time     formats specified in the system configuration panel.      \sa c() */
end_comment
begin_function
DECL|function|system
name|QLocale
name|QLocale
operator|::
name|system
parameter_list|()
block|{
name|QLocale
name|result
argument_list|(
name|C
argument_list|)
decl_stmt|;
name|result
operator|.
name|p
operator|.
name|index
operator|=
name|localePrivateIndex
argument_list|(
name|systemPrivate
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.8      Returns a list of valid locale objects that match the given \a language, \a     script and \a country.      Getting a list of all locales:     QList<QLocale> allLocales = QLocale::matchingLocales(QLocale::AnyLanguage, QLocale::AnyScript, QLocale::AnyCountry); */
end_comment
begin_function
DECL|function|matchingLocales
name|QList
argument_list|<
name|QLocale
argument_list|>
name|QLocale
operator|::
name|matchingLocales
parameter_list|(
name|QLocale
operator|::
name|Language
name|language
parameter_list|,
name|QLocale
operator|::
name|Script
name|script
parameter_list|,
name|QLocale
operator|::
name|Country
name|country
parameter_list|)
block|{
if|if
condition|(
name|uint
argument_list|(
name|language
argument_list|)
operator|>
name|QLocale
operator|::
name|LastLanguage
operator|||
name|uint
argument_list|(
name|script
argument_list|)
operator|>
name|QLocale
operator|::
name|LastScript
operator|||
name|uint
argument_list|(
name|country
argument_list|)
operator|>
name|QLocale
operator|::
name|LastCountry
condition|)
return|return
name|QList
argument_list|<
name|QLocale
argument_list|>
argument_list|()
return|;
name|QList
argument_list|<
name|QLocale
argument_list|>
name|result
decl_stmt|;
specifier|const
name|QLocalePrivate
modifier|*
name|d
init|=
name|locale_data
decl_stmt|;
if|if
condition|(
name|language
operator|==
name|QLocale
operator|::
name|AnyLanguage
operator|&&
name|script
operator|==
name|QLocale
operator|::
name|AnyScript
operator|&&
name|country
operator|==
name|QLocale
operator|::
name|AnyCountry
condition|)
name|result
operator|.
name|reserve
argument_list|(
name|locale_data_size
argument_list|)
expr_stmt|;
if|if
condition|(
name|language
operator|!=
name|QLocale
operator|::
name|C
condition|)
name|d
operator|+=
name|locale_index
index|[
name|language
index|]
expr_stmt|;
while|while
condition|(
operator|(
name|d
operator|!=
name|locale_data
operator|+
name|locale_data_size
operator|)
operator|&&
operator|(
name|language
operator|==
name|QLocale
operator|::
name|AnyLanguage
operator|||
name|d
operator|->
name|m_language_id
operator|==
name|uint
argument_list|(
name|language
argument_list|)
operator|)
condition|)
block|{
name|QLocale
name|locale
argument_list|(
name|QLocale
operator|::
name|C
argument_list|)
decl_stmt|;
name|locale
operator|.
name|p
operator|.
name|index
operator|=
name|localePrivateIndex
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
name|locale
argument_list|)
expr_stmt|;
operator|++
name|d
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
end_function
begin_comment
comment|/*!     \obsolete     \since 4.3      Returns the list of countries that have entires for \a language in Qt's locale     database. If the result is an empty list, then \a language is not represented in     Qt's locale database.      \sa matchingLocales() */
end_comment
begin_function
DECL|function|countriesForLanguage
name|QList
argument_list|<
name|QLocale
operator|::
name|Country
argument_list|>
name|QLocale
operator|::
name|countriesForLanguage
parameter_list|(
name|Language
name|language
parameter_list|)
block|{
name|QList
argument_list|<
name|Country
argument_list|>
name|result
decl_stmt|;
name|unsigned
name|language_id
init|=
name|language
decl_stmt|;
name|uint
name|idx
init|=
name|locale_index
index|[
name|language_id
index|]
decl_stmt|;
if|if
condition|(
name|language
operator|==
name|C
condition|)
block|{
name|result
operator|<<
name|AnyCountry
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|const
name|QLocalePrivate
modifier|*
name|d
init|=
name|locale_data
operator|+
name|idx
decl_stmt|;
while|while
condition|(
name|d
operator|->
name|languageId
argument_list|()
operator|==
name|language_id
condition|)
block|{
name|result
operator|<<
cast|static_cast
argument_list|<
name|Country
argument_list|>
argument_list|(
name|d
operator|->
name|countryId
argument_list|()
argument_list|)
expr_stmt|;
operator|++
name|d
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.2      Returns the localized name of \a month, in the format specified     by \a type.      \sa dayName(), standaloneMonthName() */
end_comment
begin_function
DECL|function|monthName
name|QString
name|QLocale
operator|::
name|monthName
parameter_list|(
name|int
name|month
parameter_list|,
name|FormatType
name|type
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|month
argument_list|<
literal|1
operator|||
name|month
argument_list|>
literal|12
condition|)
return|return
name|QString
argument_list|()
return|;
ifndef|#
directive|ifndef
name|QT_NO_SYSTEMLOCALE
if|if
condition|(
name|d
argument_list|()
operator|==
name|systemPrivate
argument_list|()
condition|)
block|{
name|QVariant
name|res
init|=
name|systemLocale
argument_list|()
operator|->
name|query
argument_list|(
name|type
operator|==
name|LongFormat
condition|?
name|QSystemLocale
operator|::
name|MonthNameLong
else|:
name|QSystemLocale
operator|::
name|MonthNameShort
argument_list|,
name|month
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|res
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|res
operator|.
name|toString
argument_list|()
return|;
block|}
endif|#
directive|endif
name|quint32
name|idx
decl_stmt|,
name|size
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|QLocale
operator|::
name|LongFormat
case|:
name|idx
operator|=
name|d
argument_list|()
operator|->
name|m_long_month_names_idx
expr_stmt|;
name|size
operator|=
name|d
argument_list|()
operator|->
name|m_long_month_names_size
expr_stmt|;
break|break;
case|case
name|QLocale
operator|::
name|ShortFormat
case|:
name|idx
operator|=
name|d
argument_list|()
operator|->
name|m_short_month_names_idx
expr_stmt|;
name|size
operator|=
name|d
argument_list|()
operator|->
name|m_short_month_names_size
expr_stmt|;
break|break;
case|case
name|QLocale
operator|::
name|NarrowFormat
case|:
name|idx
operator|=
name|d
argument_list|()
operator|->
name|m_narrow_month_names_idx
expr_stmt|;
name|size
operator|=
name|d
argument_list|()
operator|->
name|m_narrow_month_names_size
expr_stmt|;
break|break;
default|default:
return|return
name|QString
argument_list|()
return|;
block|}
return|return
name|getLocaleListData
argument_list|(
name|months_data
operator|+
name|idx
argument_list|,
name|size
argument_list|,
name|month
operator|-
literal|1
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.5      Returns the localized name of \a month that is used as a     standalone text, in the format specified by \a type.      If the locale information doesn't specify the standalone month     name then return value is the same as in monthName().      \sa monthName(), standaloneDayName() */
end_comment
begin_function
DECL|function|standaloneMonthName
name|QString
name|QLocale
operator|::
name|standaloneMonthName
parameter_list|(
name|int
name|month
parameter_list|,
name|FormatType
name|type
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|month
argument_list|<
literal|1
operator|||
name|month
argument_list|>
literal|12
condition|)
return|return
name|QString
argument_list|()
return|;
ifndef|#
directive|ifndef
name|QT_NO_SYSTEMLOCALE
if|if
condition|(
name|d
argument_list|()
operator|==
name|systemPrivate
argument_list|()
condition|)
block|{
name|QVariant
name|res
init|=
name|systemLocale
argument_list|()
operator|->
name|query
argument_list|(
name|type
operator|==
name|LongFormat
condition|?
name|QSystemLocale
operator|::
name|MonthNameLong
else|:
name|QSystemLocale
operator|::
name|MonthNameShort
argument_list|,
name|month
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|res
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|res
operator|.
name|toString
argument_list|()
return|;
block|}
endif|#
directive|endif
name|quint32
name|idx
decl_stmt|,
name|size
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|QLocale
operator|::
name|LongFormat
case|:
name|idx
operator|=
name|d
argument_list|()
operator|->
name|m_standalone_long_month_names_idx
expr_stmt|;
name|size
operator|=
name|d
argument_list|()
operator|->
name|m_standalone_long_month_names_size
expr_stmt|;
break|break;
case|case
name|QLocale
operator|::
name|ShortFormat
case|:
name|idx
operator|=
name|d
argument_list|()
operator|->
name|m_standalone_short_month_names_idx
expr_stmt|;
name|size
operator|=
name|d
argument_list|()
operator|->
name|m_standalone_short_month_names_size
expr_stmt|;
break|break;
case|case
name|QLocale
operator|::
name|NarrowFormat
case|:
name|idx
operator|=
name|d
argument_list|()
operator|->
name|m_standalone_narrow_month_names_idx
expr_stmt|;
name|size
operator|=
name|d
argument_list|()
operator|->
name|m_standalone_narrow_month_names_size
expr_stmt|;
break|break;
default|default:
return|return
name|QString
argument_list|()
return|;
block|}
name|QString
name|name
init|=
name|getLocaleListData
argument_list|(
name|standalone_months_data
operator|+
name|idx
argument_list|,
name|size
argument_list|,
name|month
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|monthName
argument_list|(
name|month
argument_list|,
name|type
argument_list|)
return|;
return|return
name|name
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.2      Returns the localized name of the \a day (where 1 represents     Monday, 2 represents Tuesday and so on), in the format specified     by \a type.      \sa monthName(), standaloneDayName() */
end_comment
begin_function
DECL|function|dayName
name|QString
name|QLocale
operator|::
name|dayName
parameter_list|(
name|int
name|day
parameter_list|,
name|FormatType
name|type
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|day
argument_list|<
literal|1
operator|||
name|day
argument_list|>
literal|7
condition|)
return|return
name|QString
argument_list|()
return|;
ifndef|#
directive|ifndef
name|QT_NO_SYSTEMLOCALE
if|if
condition|(
name|d
argument_list|()
operator|==
name|systemPrivate
argument_list|()
condition|)
block|{
name|QVariant
name|res
init|=
name|systemLocale
argument_list|()
operator|->
name|query
argument_list|(
name|type
operator|==
name|LongFormat
condition|?
name|QSystemLocale
operator|::
name|DayNameLong
else|:
name|QSystemLocale
operator|::
name|DayNameShort
argument_list|,
name|day
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|res
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|res
operator|.
name|toString
argument_list|()
return|;
block|}
endif|#
directive|endif
if|if
condition|(
name|day
operator|==
literal|7
condition|)
name|day
operator|=
literal|0
expr_stmt|;
name|quint32
name|idx
decl_stmt|,
name|size
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|QLocale
operator|::
name|LongFormat
case|:
name|idx
operator|=
name|d
argument_list|()
operator|->
name|m_long_day_names_idx
expr_stmt|;
name|size
operator|=
name|d
argument_list|()
operator|->
name|m_long_day_names_size
expr_stmt|;
break|break;
case|case
name|QLocale
operator|::
name|ShortFormat
case|:
name|idx
operator|=
name|d
argument_list|()
operator|->
name|m_short_day_names_idx
expr_stmt|;
name|size
operator|=
name|d
argument_list|()
operator|->
name|m_short_day_names_size
expr_stmt|;
break|break;
case|case
name|QLocale
operator|::
name|NarrowFormat
case|:
name|idx
operator|=
name|d
argument_list|()
operator|->
name|m_narrow_day_names_idx
expr_stmt|;
name|size
operator|=
name|d
argument_list|()
operator|->
name|m_narrow_day_names_size
expr_stmt|;
break|break;
default|default:
return|return
name|QString
argument_list|()
return|;
block|}
return|return
name|getLocaleListData
argument_list|(
name|days_data
operator|+
name|idx
argument_list|,
name|size
argument_list|,
name|day
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.5      Returns the localized name of the \a day (where 1 represents     Monday, 2 represents Tuesday and so on) that is used as a     standalone text, in the format specified by \a type.      If the locale information does not specify the standalone day     name then return value is the same as in dayName().      \sa dayName(), standaloneMonthName() */
end_comment
begin_function
DECL|function|standaloneDayName
name|QString
name|QLocale
operator|::
name|standaloneDayName
parameter_list|(
name|int
name|day
parameter_list|,
name|FormatType
name|type
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|day
argument_list|<
literal|1
operator|||
name|day
argument_list|>
literal|7
condition|)
return|return
name|QString
argument_list|()
return|;
ifndef|#
directive|ifndef
name|QT_NO_SYSTEMLOCALE
if|if
condition|(
name|d
argument_list|()
operator|==
name|systemPrivate
argument_list|()
condition|)
block|{
name|QVariant
name|res
init|=
name|systemLocale
argument_list|()
operator|->
name|query
argument_list|(
name|type
operator|==
name|LongFormat
condition|?
name|QSystemLocale
operator|::
name|DayNameLong
else|:
name|QSystemLocale
operator|::
name|DayNameShort
argument_list|,
name|day
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|res
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|res
operator|.
name|toString
argument_list|()
return|;
block|}
endif|#
directive|endif
if|if
condition|(
name|day
operator|==
literal|7
condition|)
name|day
operator|=
literal|0
expr_stmt|;
name|quint32
name|idx
decl_stmt|,
name|size
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|QLocale
operator|::
name|LongFormat
case|:
name|idx
operator|=
name|d
argument_list|()
operator|->
name|m_standalone_long_day_names_idx
expr_stmt|;
name|size
operator|=
name|d
argument_list|()
operator|->
name|m_standalone_long_day_names_size
expr_stmt|;
break|break;
case|case
name|QLocale
operator|::
name|ShortFormat
case|:
name|idx
operator|=
name|d
argument_list|()
operator|->
name|m_standalone_short_day_names_idx
expr_stmt|;
name|size
operator|=
name|d
argument_list|()
operator|->
name|m_standalone_short_day_names_size
expr_stmt|;
break|break;
case|case
name|QLocale
operator|::
name|NarrowFormat
case|:
name|idx
operator|=
name|d
argument_list|()
operator|->
name|m_standalone_narrow_day_names_idx
expr_stmt|;
name|size
operator|=
name|d
argument_list|()
operator|->
name|m_standalone_narrow_day_names_size
expr_stmt|;
break|break;
default|default:
return|return
name|QString
argument_list|()
return|;
block|}
name|QString
name|name
init|=
name|getLocaleListData
argument_list|(
name|days_data
operator|+
name|idx
argument_list|,
name|size
argument_list|,
name|day
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|dayName
argument_list|(
name|day
operator|==
literal|0
condition|?
literal|7
else|:
name|day
argument_list|,
name|type
argument_list|)
return|;
return|return
name|name
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.8      Returns the first day of the week according to the current locale. */
end_comment
begin_function
DECL|function|firstDayOfWeek
name|Qt
operator|::
name|DayOfWeek
name|QLocale
operator|::
name|firstDayOfWeek
parameter_list|()
specifier|const
block|{
ifndef|#
directive|ifndef
name|QT_NO_SYSTEMLOCALE
if|if
condition|(
name|d
argument_list|()
operator|==
name|systemPrivate
argument_list|()
condition|)
block|{
name|QVariant
name|res
init|=
name|systemLocale
argument_list|()
operator|->
name|query
argument_list|(
name|QSystemLocale
operator|::
name|FirstDayOfWeek
argument_list|,
name|QVariant
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|res
operator|.
name|isNull
argument_list|()
condition|)
return|return
cast|static_cast
argument_list|<
name|Qt
operator|::
name|DayOfWeek
argument_list|>
argument_list|(
name|res
operator|.
name|toUInt
argument_list|()
argument_list|)
return|;
block|}
endif|#
directive|endif
return|return
cast|static_cast
argument_list|<
name|Qt
operator|::
name|DayOfWeek
argument_list|>
argument_list|(
name|d
argument_list|()
operator|->
name|m_first_day_of_week
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|measurementSystem
name|QLocale
operator|::
name|MeasurementSystem
name|QLocalePrivate
operator|::
name|measurementSystem
parameter_list|()
specifier|const
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ImperialMeasurementSystemsCount
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|ImperialMeasurementSystems
index|[
name|i
index|]
operator|.
name|languageId
operator|==
name|m_language_id
operator|&&
name|ImperialMeasurementSystems
index|[
name|i
index|]
operator|.
name|countryId
operator|==
name|m_country_id
condition|)
block|{
return|return
name|QLocale
operator|::
name|ImperialSystem
return|;
block|}
block|}
return|return
name|QLocale
operator|::
name|MetricSystem
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.8      Returns a list of days that are considered weekdays according to the current locale. */
end_comment
begin_function
DECL|function|weekdays
name|QList
argument_list|<
name|Qt
operator|::
name|DayOfWeek
argument_list|>
name|QLocale
operator|::
name|weekdays
parameter_list|()
specifier|const
block|{
ifndef|#
directive|ifndef
name|QT_NO_SYSTEMLOCALE
if|if
condition|(
name|d
argument_list|()
operator|==
name|systemPrivate
argument_list|()
condition|)
block|{
name|QVariant
name|res
init|=
name|systemLocale
argument_list|()
operator|->
name|query
argument_list|(
name|QSystemLocale
operator|::
name|Weekdays
argument_list|,
name|QVariant
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|res
operator|.
name|isNull
argument_list|()
condition|)
return|return
cast|static_cast
argument_list|<
name|QList
argument_list|<
name|Qt
operator|::
name|DayOfWeek
argument_list|>
argument_list|>
argument_list|(
name|res
operator|.
name|value
argument_list|<
name|QList
argument_list|<
name|Qt
operator|::
name|DayOfWeek
argument_list|>
argument_list|>
argument_list|()
argument_list|)
return|;
block|}
endif|#
directive|endif
name|QList
argument_list|<
name|Qt
operator|::
name|DayOfWeek
argument_list|>
name|weekdays
decl_stmt|;
name|quint16
name|weekendStart
init|=
name|d
argument_list|()
operator|->
name|m_weekend_start
decl_stmt|;
name|quint16
name|weekendEnd
init|=
name|d
argument_list|()
operator|->
name|m_weekend_end
decl_stmt|;
for|for
control|(
name|int
name|day
init|=
name|Qt
operator|::
name|Monday
init|;
name|day
operator|<=
name|Qt
operator|::
name|Sunday
condition|;
name|day
operator|++
control|)
block|{
if|if
condition|(
operator|(
name|weekendEnd
operator|>=
name|weekendStart
operator|&&
operator|(
name|day
argument_list|<
name|weekendStart
operator|||
name|day
argument_list|>
name|weekendEnd
operator|)
operator|)
operator|||
operator|(
name|weekendEnd
operator|<
name|weekendStart
operator|&&
operator|(
name|day
operator|>
name|weekendEnd
operator|&&
name|day
operator|<
name|weekendStart
operator|)
operator|)
condition|)
name|weekdays
operator|<<
cast|static_cast
argument_list|<
name|Qt
operator|::
name|DayOfWeek
argument_list|>
argument_list|(
name|day
argument_list|)
expr_stmt|;
block|}
return|return
name|weekdays
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.4      Returns the measurement system for the locale. */
end_comment
begin_function
DECL|function|measurementSystem
name|QLocale
operator|::
name|MeasurementSystem
name|QLocale
operator|::
name|measurementSystem
parameter_list|()
specifier|const
block|{
ifndef|#
directive|ifndef
name|QT_NO_SYSTEMLOCALE
if|if
condition|(
name|d
argument_list|()
operator|==
name|systemPrivate
argument_list|()
condition|)
block|{
name|QVariant
name|res
init|=
name|systemLocale
argument_list|()
operator|->
name|query
argument_list|(
name|QSystemLocale
operator|::
name|MeasurementSystem
argument_list|,
name|QVariant
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|res
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|MeasurementSystem
argument_list|(
name|res
operator|.
name|toInt
argument_list|()
argument_list|)
return|;
block|}
endif|#
directive|endif
return|return
name|d
argument_list|()
operator|->
name|measurementSystem
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!   \since 4.7    Returns the text direction of the language. */
end_comment
begin_function
DECL|function|textDirection
name|Qt
operator|::
name|LayoutDirection
name|QLocale
operator|::
name|textDirection
parameter_list|()
specifier|const
block|{
name|Language
name|lang
init|=
name|language
argument_list|()
decl_stmt|;
if|if
condition|(
name|lang
operator|==
name|QLocale
operator|::
name|Arabic
operator|||
name|lang
operator|==
name|QLocale
operator|::
name|Hebrew
operator|||
name|lang
operator|==
name|QLocale
operator|::
name|Persian
operator|||
name|lang
operator|==
name|QLocale
operator|::
name|Urdu
operator|||
name|lang
operator|==
name|QLocale
operator|::
name|Syriac
condition|)
return|return
name|Qt
operator|::
name|RightToLeft
return|;
return|return
name|Qt
operator|::
name|LeftToRight
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.5      Returns the localized name of the "AM" suffix for times specified using     the conventions of the 12-hour clock.      \sa pmText() */
end_comment
begin_function
DECL|function|amText
name|QString
name|QLocale
operator|::
name|amText
parameter_list|()
specifier|const
block|{
ifndef|#
directive|ifndef
name|QT_NO_SYSTEMLOCALE
if|if
condition|(
name|d
argument_list|()
operator|==
name|systemPrivate
argument_list|()
condition|)
block|{
name|QVariant
name|res
init|=
name|systemLocale
argument_list|()
operator|->
name|query
argument_list|(
name|QSystemLocale
operator|::
name|AMText
argument_list|,
name|QVariant
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|res
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|res
operator|.
name|toString
argument_list|()
return|;
block|}
endif|#
directive|endif
return|return
name|getLocaleData
argument_list|(
name|am_data
operator|+
name|d
argument_list|()
operator|->
name|m_am_idx
argument_list|,
name|d
argument_list|()
operator|->
name|m_am_size
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.5      Returns the localized name of the "PM" suffix for times specified using     the conventions of the 12-hour clock.      \sa amText() */
end_comment
begin_function
DECL|function|pmText
name|QString
name|QLocale
operator|::
name|pmText
parameter_list|()
specifier|const
block|{
ifndef|#
directive|ifndef
name|QT_NO_SYSTEMLOCALE
if|if
condition|(
name|d
argument_list|()
operator|==
name|systemPrivate
argument_list|()
condition|)
block|{
name|QVariant
name|res
init|=
name|systemLocale
argument_list|()
operator|->
name|query
argument_list|(
name|QSystemLocale
operator|::
name|PMText
argument_list|,
name|QVariant
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|res
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|res
operator|.
name|toString
argument_list|()
return|;
block|}
endif|#
directive|endif
return|return
name|getLocaleData
argument_list|(
name|pm_data
operator|+
name|d
argument_list|()
operator|->
name|m_pm_idx
argument_list|,
name|d
argument_list|()
operator|->
name|m_pm_size
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|dateTimeToString
name|QString
name|QLocalePrivate
operator|::
name|dateTimeToString
parameter_list|(
specifier|const
name|QString
modifier|&
name|format
parameter_list|,
specifier|const
name|QDate
modifier|*
name|date
parameter_list|,
specifier|const
name|QTime
modifier|*
name|time
parameter_list|,
specifier|const
name|QLocale
modifier|*
name|q
parameter_list|)
specifier|const
block|{
name|Q_ASSERT
argument_list|(
name|date
operator|||
name|time
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|date
operator|&&
operator|!
name|date
operator|->
name|isValid
argument_list|()
operator|)
operator|||
operator|(
name|time
operator|&&
operator|!
name|time
operator|->
name|isValid
argument_list|()
operator|)
condition|)
return|return
name|QString
argument_list|()
return|;
specifier|const
name|bool
name|format_am_pm
init|=
name|time
operator|&&
name|timeFormatContainsAP
argument_list|(
name|format
argument_list|)
decl_stmt|;
enum|enum
block|{
name|AM
block|,
name|PM
block|}
name|am_pm
init|=
name|AM
enum|;
name|int
name|hour12
init|=
name|time
condition|?
name|time
operator|->
name|hour
argument_list|()
else|:
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|time
condition|)
block|{
if|if
condition|(
name|hour12
operator|==
literal|0
condition|)
block|{
name|am_pm
operator|=
name|AM
expr_stmt|;
name|hour12
operator|=
literal|12
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|hour12
operator|<
literal|12
condition|)
block|{
name|am_pm
operator|=
name|AM
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|hour12
operator|==
literal|12
condition|)
block|{
name|am_pm
operator|=
name|PM
expr_stmt|;
block|}
else|else
block|{
name|am_pm
operator|=
name|PM
expr_stmt|;
name|hour12
operator|-=
literal|12
expr_stmt|;
block|}
block|}
name|QString
name|result
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|format
operator|.
name|size
argument_list|()
condition|)
block|{
if|if
condition|(
name|format
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|unicode
argument_list|()
operator|==
literal|'\''
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
name|qt_readEscapedFormatString
argument_list|(
name|format
argument_list|,
operator|&
name|i
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
specifier|const
name|QChar
name|c
init|=
name|format
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|int
name|repeat
init|=
name|qt_repeatCount
argument_list|(
name|format
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|bool
name|used
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|date
condition|)
block|{
switch|switch
condition|(
name|c
operator|.
name|unicode
argument_list|()
condition|)
block|{
case|case
literal|'y'
case|:
name|used
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|repeat
operator|>=
literal|4
condition|)
name|repeat
operator|=
literal|4
expr_stmt|;
elseif|else
if|if
condition|(
name|repeat
operator|>=
literal|2
condition|)
name|repeat
operator|=
literal|2
expr_stmt|;
switch|switch
condition|(
name|repeat
condition|)
block|{
case|case
literal|4
case|:
name|result
operator|.
name|append
argument_list|(
name|longLongToString
argument_list|(
name|date
operator|->
name|year
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|result
operator|.
name|append
argument_list|(
name|longLongToString
argument_list|(
name|date
operator|->
name|year
argument_list|()
operator|%
literal|100
argument_list|,
operator|-
literal|1
argument_list|,
literal|10
argument_list|,
literal|2
argument_list|,
name|QLocalePrivate
operator|::
name|ZeroPadded
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
name|repeat
operator|=
literal|1
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
break|break;
block|}
break|break;
case|case
literal|'M'
case|:
name|used
operator|=
literal|true
expr_stmt|;
name|repeat
operator|=
name|qMin
argument_list|(
name|repeat
argument_list|,
literal|4
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|repeat
condition|)
block|{
case|case
literal|1
case|:
name|result
operator|.
name|append
argument_list|(
name|longLongToString
argument_list|(
name|date
operator|->
name|month
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|result
operator|.
name|append
argument_list|(
name|longLongToString
argument_list|(
name|date
operator|->
name|month
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|,
literal|10
argument_list|,
literal|2
argument_list|,
name|QLocalePrivate
operator|::
name|ZeroPadded
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|result
operator|.
name|append
argument_list|(
name|q
operator|->
name|monthName
argument_list|(
name|date
operator|->
name|month
argument_list|()
argument_list|,
name|QLocale
operator|::
name|ShortFormat
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|4
case|:
name|result
operator|.
name|append
argument_list|(
name|q
operator|->
name|monthName
argument_list|(
name|date
operator|->
name|month
argument_list|()
argument_list|,
name|QLocale
operator|::
name|LongFormat
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
break|break;
case|case
literal|'d'
case|:
name|used
operator|=
literal|true
expr_stmt|;
name|repeat
operator|=
name|qMin
argument_list|(
name|repeat
argument_list|,
literal|4
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|repeat
condition|)
block|{
case|case
literal|1
case|:
name|result
operator|.
name|append
argument_list|(
name|longLongToString
argument_list|(
name|date
operator|->
name|day
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|result
operator|.
name|append
argument_list|(
name|longLongToString
argument_list|(
name|date
operator|->
name|day
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|,
literal|10
argument_list|,
literal|2
argument_list|,
name|QLocalePrivate
operator|::
name|ZeroPadded
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|result
operator|.
name|append
argument_list|(
name|q
operator|->
name|dayName
argument_list|(
name|date
operator|->
name|dayOfWeek
argument_list|()
argument_list|,
name|QLocale
operator|::
name|ShortFormat
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|4
case|:
name|result
operator|.
name|append
argument_list|(
name|q
operator|->
name|dayName
argument_list|(
name|date
operator|->
name|dayOfWeek
argument_list|()
argument_list|,
name|QLocale
operator|::
name|LongFormat
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
break|break;
default|default:
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|used
operator|&&
name|time
condition|)
block|{
switch|switch
condition|(
name|c
operator|.
name|unicode
argument_list|()
condition|)
block|{
case|case
literal|'h'
case|:
block|{
name|used
operator|=
literal|true
expr_stmt|;
name|repeat
operator|=
name|qMin
argument_list|(
name|repeat
argument_list|,
literal|2
argument_list|)
expr_stmt|;
specifier|const
name|int
name|hour
init|=
name|format_am_pm
condition|?
name|hour12
else|:
name|time
operator|->
name|hour
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|repeat
condition|)
block|{
case|case
literal|1
case|:
name|result
operator|.
name|append
argument_list|(
name|longLongToString
argument_list|(
name|hour
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|result
operator|.
name|append
argument_list|(
name|longLongToString
argument_list|(
name|hour
argument_list|,
operator|-
literal|1
argument_list|,
literal|10
argument_list|,
literal|2
argument_list|,
name|QLocalePrivate
operator|::
name|ZeroPadded
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
break|break;
block|}
case|case
literal|'H'
case|:
name|used
operator|=
literal|true
expr_stmt|;
name|repeat
operator|=
name|qMin
argument_list|(
name|repeat
argument_list|,
literal|2
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|repeat
condition|)
block|{
case|case
literal|1
case|:
name|result
operator|.
name|append
argument_list|(
name|longLongToString
argument_list|(
name|time
operator|->
name|hour
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|result
operator|.
name|append
argument_list|(
name|longLongToString
argument_list|(
name|time
operator|->
name|hour
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|,
literal|10
argument_list|,
literal|2
argument_list|,
name|QLocalePrivate
operator|::
name|ZeroPadded
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
break|break;
case|case
literal|'m'
case|:
name|used
operator|=
literal|true
expr_stmt|;
name|repeat
operator|=
name|qMin
argument_list|(
name|repeat
argument_list|,
literal|2
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|repeat
condition|)
block|{
case|case
literal|1
case|:
name|result
operator|.
name|append
argument_list|(
name|longLongToString
argument_list|(
name|time
operator|->
name|minute
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|result
operator|.
name|append
argument_list|(
name|longLongToString
argument_list|(
name|time
operator|->
name|minute
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|,
literal|10
argument_list|,
literal|2
argument_list|,
name|QLocalePrivate
operator|::
name|ZeroPadded
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
break|break;
case|case
literal|'s'
case|:
name|used
operator|=
literal|true
expr_stmt|;
name|repeat
operator|=
name|qMin
argument_list|(
name|repeat
argument_list|,
literal|2
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|repeat
condition|)
block|{
case|case
literal|1
case|:
name|result
operator|.
name|append
argument_list|(
name|longLongToString
argument_list|(
name|time
operator|->
name|second
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|result
operator|.
name|append
argument_list|(
name|longLongToString
argument_list|(
name|time
operator|->
name|second
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|,
literal|10
argument_list|,
literal|2
argument_list|,
name|QLocalePrivate
operator|::
name|ZeroPadded
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
break|break;
case|case
literal|'a'
case|:
name|used
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|i
operator|+
literal|1
operator|<
name|format
operator|.
name|length
argument_list|()
operator|&&
name|format
operator|.
name|at
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|.
name|unicode
argument_list|()
operator|==
literal|'p'
condition|)
block|{
name|repeat
operator|=
literal|2
expr_stmt|;
block|}
else|else
block|{
name|repeat
operator|=
literal|1
expr_stmt|;
block|}
name|result
operator|.
name|append
argument_list|(
name|am_pm
operator|==
name|AM
condition|?
name|q
operator|->
name|amText
argument_list|()
operator|.
name|toLower
argument_list|()
else|:
name|q
operator|->
name|pmText
argument_list|()
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'A'
case|:
name|used
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|i
operator|+
literal|1
operator|<
name|format
operator|.
name|length
argument_list|()
operator|&&
name|format
operator|.
name|at
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|.
name|unicode
argument_list|()
operator|==
literal|'P'
condition|)
block|{
name|repeat
operator|=
literal|2
expr_stmt|;
block|}
else|else
block|{
name|repeat
operator|=
literal|1
expr_stmt|;
block|}
name|result
operator|.
name|append
argument_list|(
name|am_pm
operator|==
name|AM
condition|?
name|q
operator|->
name|amText
argument_list|()
operator|.
name|toUpper
argument_list|()
else|:
name|q
operator|->
name|pmText
argument_list|()
operator|.
name|toUpper
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'z'
case|:
name|used
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|repeat
operator|>=
literal|3
condition|)
block|{
name|repeat
operator|=
literal|3
expr_stmt|;
block|}
else|else
block|{
name|repeat
operator|=
literal|1
expr_stmt|;
block|}
switch|switch
condition|(
name|repeat
condition|)
block|{
case|case
literal|1
case|:
name|result
operator|.
name|append
argument_list|(
name|longLongToString
argument_list|(
name|time
operator|->
name|msec
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|result
operator|.
name|append
argument_list|(
name|longLongToString
argument_list|(
name|time
operator|->
name|msec
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|,
literal|10
argument_list|,
literal|3
argument_list|,
name|QLocalePrivate
operator|::
name|ZeroPadded
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
break|break;
case|case
literal|'t'
case|:
name|used
operator|=
literal|true
expr_stmt|;
name|repeat
operator|=
literal|1
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
name|timeZone
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|used
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
name|QString
argument_list|(
name|repeat
argument_list|,
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|i
operator|+=
name|repeat
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|doubleToString
name|QString
name|QLocalePrivate
operator|::
name|doubleToString
parameter_list|(
name|double
name|d
parameter_list|,
name|int
name|precision
parameter_list|,
name|DoubleForm
name|form
parameter_list|,
name|int
name|width
parameter_list|,
name|unsigned
name|flags
parameter_list|)
specifier|const
block|{
return|return
name|QLocalePrivate
operator|::
name|doubleToString
argument_list|(
name|zero
argument_list|()
argument_list|,
name|plus
argument_list|()
argument_list|,
name|minus
argument_list|()
argument_list|,
name|exponential
argument_list|()
argument_list|,
name|group
argument_list|()
argument_list|,
name|decimal
argument_list|()
argument_list|,
name|d
argument_list|,
name|precision
argument_list|,
name|form
argument_list|,
name|width
argument_list|,
name|flags
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|doubleToString
name|QString
name|QLocalePrivate
operator|::
name|doubleToString
parameter_list|(
specifier|const
name|QChar
name|_zero
parameter_list|,
specifier|const
name|QChar
name|plus
parameter_list|,
specifier|const
name|QChar
name|minus
parameter_list|,
specifier|const
name|QChar
name|exponential
parameter_list|,
specifier|const
name|QChar
name|group
parameter_list|,
specifier|const
name|QChar
name|decimal
parameter_list|,
name|double
name|d
parameter_list|,
name|int
name|precision
parameter_list|,
name|DoubleForm
name|form
parameter_list|,
name|int
name|width
parameter_list|,
name|unsigned
name|flags
parameter_list|)
block|{
if|if
condition|(
name|precision
operator|==
operator|-
literal|1
condition|)
name|precision
operator|=
literal|6
expr_stmt|;
if|if
condition|(
name|width
operator|==
operator|-
literal|1
condition|)
name|width
operator|=
literal|0
expr_stmt|;
name|bool
name|negative
init|=
literal|false
decl_stmt|;
name|bool
name|special_number
init|=
literal|false
decl_stmt|;
comment|// nan, +/-inf
name|QString
name|num_str
decl_stmt|;
comment|// Detect special numbers (nan, +/-inf)
if|if
condition|(
name|qt_is_inf
argument_list|(
name|d
argument_list|)
condition|)
block|{
name|num_str
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"inf"
argument_list|)
expr_stmt|;
name|special_number
operator|=
literal|true
expr_stmt|;
name|negative
operator|=
name|d
operator|<
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|qt_is_nan
argument_list|(
name|d
argument_list|)
condition|)
block|{
name|num_str
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"nan"
argument_list|)
expr_stmt|;
name|special_number
operator|=
literal|true
expr_stmt|;
block|}
comment|// Handle normal numbers
if|if
condition|(
operator|!
name|special_number
condition|)
block|{
name|int
name|decpt
decl_stmt|,
name|sign
decl_stmt|;
name|QString
name|digits
decl_stmt|;
ifdef|#
directive|ifdef
name|QT_QLOCALE_USES_FCVT
comment|// NOT thread safe!
if|if
condition|(
name|form
operator|==
name|DFDecimal
condition|)
block|{
name|digits
operator|=
name|QLatin1String
argument_list|(
name|fcvt
argument_list|(
name|d
argument_list|,
name|precision
argument_list|,
operator|&
name|decpt
argument_list|,
operator|&
name|sign
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|pr
init|=
name|precision
decl_stmt|;
if|if
condition|(
name|form
operator|==
name|DFExponent
condition|)
operator|++
name|pr
expr_stmt|;
elseif|else
if|if
condition|(
name|form
operator|==
name|DFSignificantDigits
operator|&&
name|pr
operator|==
literal|0
condition|)
name|pr
operator|=
literal|1
expr_stmt|;
name|digits
operator|=
name|QLatin1String
argument_list|(
name|ecvt
argument_list|(
name|d
argument_list|,
name|pr
argument_list|,
operator|&
name|decpt
argument_list|,
operator|&
name|sign
argument_list|)
argument_list|)
expr_stmt|;
comment|// Chop trailing zeros
if|if
condition|(
name|digits
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|int
name|last_nonzero_idx
init|=
name|digits
operator|.
name|length
argument_list|()
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|last_nonzero_idx
operator|>
literal|0
operator|&&
name|digits
operator|.
name|unicode
argument_list|()
index|[
name|last_nonzero_idx
index|]
operator|==
name|QLatin1Char
argument_list|(
literal|'0'
argument_list|)
condition|)
operator|--
name|last_nonzero_idx
expr_stmt|;
name|digits
operator|.
name|truncate
argument_list|(
name|last_nonzero_idx
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
else|#
directive|else
name|int
name|mode
decl_stmt|;
if|if
condition|(
name|form
operator|==
name|DFDecimal
condition|)
name|mode
operator|=
literal|3
expr_stmt|;
else|else
name|mode
operator|=
literal|2
expr_stmt|;
comment|/* This next bit is a bit quirky. In DFExponent form, the precision            is the number of digits after decpt. So that would suggest using            mode=3 for qdtoa. But qdtoa behaves strangely when mode=3 and            precision=0. So we get around this by using mode=2 and reasoning            that we want precision+1 significant digits, since the decimal            point in this mode is always after the first digit. */
name|int
name|pr
init|=
name|precision
decl_stmt|;
if|if
condition|(
name|form
operator|==
name|DFExponent
condition|)
operator|++
name|pr
expr_stmt|;
name|char
modifier|*
name|rve
init|=
literal|0
decl_stmt|;
name|char
modifier|*
name|buff
init|=
literal|0
decl_stmt|;
name|QT_TRY
block|{
name|digits
operator|=
name|QLatin1String
argument_list|(
name|qdtoa
argument_list|(
name|d
argument_list|,
name|mode
argument_list|,
name|pr
argument_list|,
operator|&
name|decpt
argument_list|,
operator|&
name|sign
argument_list|,
operator|&
name|rve
argument_list|,
operator|&
name|buff
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QT_CATCH
argument_list|(
argument|...
argument_list|)
block|{
if|if
condition|(
name|buff
operator|!=
literal|0
condition|)
name|free
argument_list|(
name|buff
argument_list|)
expr_stmt|;
name|QT_RETHROW
expr_stmt|;
block|}
if|if
condition|(
name|buff
operator|!=
literal|0
condition|)
name|free
argument_list|(
name|buff
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// QT_QLOCALE_USES_FCVT
if|if
condition|(
name|_zero
operator|.
name|unicode
argument_list|()
operator|!=
literal|'0'
condition|)
block|{
name|ushort
name|z
init|=
name|_zero
operator|.
name|unicode
argument_list|()
operator|-
literal|'0'
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|digits
operator|.
name|length
argument_list|()
condition|;
operator|++
name|i
control|)
cast|reinterpret_cast
argument_list|<
name|ushort
operator|*
argument_list|>
argument_list|(
name|digits
operator|.
name|data
argument_list|()
argument_list|)
index|[
name|i
index|]
operator|+=
name|z
expr_stmt|;
block|}
name|bool
name|always_show_decpt
init|=
operator|(
name|flags
operator|&
name|Alternate
operator|||
name|flags
operator|&
name|ForcePoint
operator|)
decl_stmt|;
switch|switch
condition|(
name|form
condition|)
block|{
case|case
name|DFExponent
case|:
block|{
name|num_str
operator|=
name|exponentForm
argument_list|(
name|_zero
argument_list|,
name|decimal
argument_list|,
name|exponential
argument_list|,
name|group
argument_list|,
name|plus
argument_list|,
name|minus
argument_list|,
name|digits
argument_list|,
name|decpt
argument_list|,
name|precision
argument_list|,
name|PMDecimalDigits
argument_list|,
name|always_show_decpt
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|DFDecimal
case|:
block|{
name|num_str
operator|=
name|decimalForm
argument_list|(
name|_zero
argument_list|,
name|decimal
argument_list|,
name|group
argument_list|,
name|digits
argument_list|,
name|decpt
argument_list|,
name|precision
argument_list|,
name|PMDecimalDigits
argument_list|,
name|always_show_decpt
argument_list|,
name|flags
operator|&
name|ThousandsGroup
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|DFSignificantDigits
case|:
block|{
name|PrecisionMode
name|mode
init|=
operator|(
name|flags
operator|&
name|Alternate
operator|)
condition|?
name|PMSignificantDigits
else|:
name|PMChopTrailingZeros
decl_stmt|;
if|if
condition|(
name|decpt
operator|!=
name|digits
operator|.
name|length
argument_list|()
operator|&&
operator|(
name|decpt
operator|<=
operator|-
literal|4
operator|||
name|decpt
operator|>
name|precision
operator|)
condition|)
name|num_str
operator|=
name|exponentForm
argument_list|(
name|_zero
argument_list|,
name|decimal
argument_list|,
name|exponential
argument_list|,
name|group
argument_list|,
name|plus
argument_list|,
name|minus
argument_list|,
name|digits
argument_list|,
name|decpt
argument_list|,
name|precision
argument_list|,
name|mode
argument_list|,
name|always_show_decpt
argument_list|)
expr_stmt|;
else|else
name|num_str
operator|=
name|decimalForm
argument_list|(
name|_zero
argument_list|,
name|decimal
argument_list|,
name|group
argument_list|,
name|digits
argument_list|,
name|decpt
argument_list|,
name|precision
argument_list|,
name|mode
argument_list|,
name|always_show_decpt
argument_list|,
name|flags
operator|&
name|ThousandsGroup
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|negative
operator|=
name|sign
operator|!=
literal|0
operator|&&
operator|!
name|isZero
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
comment|// pad with zeros. LeftAdjusted overrides this flag). Also, we don't
comment|// pad special numbers
if|if
condition|(
name|flags
operator|&
name|QLocalePrivate
operator|::
name|ZeroPadded
operator|&&
operator|!
operator|(
name|flags
operator|&
name|QLocalePrivate
operator|::
name|LeftAdjusted
operator|)
operator|&&
operator|!
name|special_number
condition|)
block|{
name|int
name|num_pad_chars
init|=
name|width
operator|-
name|num_str
operator|.
name|length
argument_list|()
decl_stmt|;
comment|// leave space for the sign
if|if
condition|(
name|negative
operator|||
name|flags
operator|&
name|QLocalePrivate
operator|::
name|AlwaysShowSign
operator|||
name|flags
operator|&
name|QLocalePrivate
operator|::
name|BlankBeforePositive
condition|)
operator|--
name|num_pad_chars
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|num_pad_chars
condition|;
operator|++
name|i
control|)
name|num_str
operator|.
name|prepend
argument_list|(
name|_zero
argument_list|)
expr_stmt|;
block|}
comment|// add sign
if|if
condition|(
name|negative
condition|)
name|num_str
operator|.
name|prepend
argument_list|(
name|minus
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|flags
operator|&
name|QLocalePrivate
operator|::
name|AlwaysShowSign
condition|)
name|num_str
operator|.
name|prepend
argument_list|(
name|plus
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|flags
operator|&
name|QLocalePrivate
operator|::
name|BlankBeforePositive
condition|)
name|num_str
operator|.
name|prepend
argument_list|(
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|QLocalePrivate
operator|::
name|CapitalEorX
condition|)
name|num_str
operator|=
name|num_str
operator|.
name|toUpper
argument_list|()
expr_stmt|;
return|return
name|num_str
return|;
block|}
end_function
begin_function
DECL|function|longLongToString
name|QString
name|QLocalePrivate
operator|::
name|longLongToString
parameter_list|(
name|qlonglong
name|l
parameter_list|,
name|int
name|precision
parameter_list|,
name|int
name|base
parameter_list|,
name|int
name|width
parameter_list|,
name|unsigned
name|flags
parameter_list|)
specifier|const
block|{
return|return
name|QLocalePrivate
operator|::
name|longLongToString
argument_list|(
name|zero
argument_list|()
argument_list|,
name|group
argument_list|()
argument_list|,
name|plus
argument_list|()
argument_list|,
name|minus
argument_list|()
argument_list|,
name|l
argument_list|,
name|precision
argument_list|,
name|base
argument_list|,
name|width
argument_list|,
name|flags
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|longLongToString
name|QString
name|QLocalePrivate
operator|::
name|longLongToString
parameter_list|(
specifier|const
name|QChar
name|zero
parameter_list|,
specifier|const
name|QChar
name|group
parameter_list|,
specifier|const
name|QChar
name|plus
parameter_list|,
specifier|const
name|QChar
name|minus
parameter_list|,
name|qlonglong
name|l
parameter_list|,
name|int
name|precision
parameter_list|,
name|int
name|base
parameter_list|,
name|int
name|width
parameter_list|,
name|unsigned
name|flags
parameter_list|)
block|{
name|bool
name|precision_not_specified
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|precision
operator|==
operator|-
literal|1
condition|)
block|{
name|precision_not_specified
operator|=
literal|true
expr_stmt|;
name|precision
operator|=
literal|1
expr_stmt|;
block|}
name|bool
name|negative
init|=
name|l
operator|<
literal|0
decl_stmt|;
if|if
condition|(
name|base
operator|!=
literal|10
condition|)
block|{
comment|// these are not supported by sprintf for octal and hex
name|flags
operator|&=
operator|~
name|AlwaysShowSign
expr_stmt|;
name|flags
operator|&=
operator|~
name|BlankBeforePositive
expr_stmt|;
name|negative
operator|=
literal|false
expr_stmt|;
comment|// neither are negative numbers
block|}
name|QString
name|num_str
decl_stmt|;
if|if
condition|(
name|base
operator|==
literal|10
condition|)
name|num_str
operator|=
name|qlltoa
argument_list|(
name|l
argument_list|,
name|base
argument_list|,
name|zero
argument_list|)
expr_stmt|;
else|else
name|num_str
operator|=
name|qulltoa
argument_list|(
name|l
argument_list|,
name|base
argument_list|,
name|zero
argument_list|)
expr_stmt|;
name|uint
name|cnt_thousand_sep
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|flags
operator|&
name|ThousandsGroup
operator|&&
name|base
operator|==
literal|10
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|num_str
operator|.
name|length
argument_list|()
operator|-
literal|3
init|;
name|i
operator|>
literal|0
condition|;
name|i
operator|-=
literal|3
control|)
block|{
name|num_str
operator|.
name|insert
argument_list|(
name|i
argument_list|,
name|group
argument_list|)
expr_stmt|;
operator|++
name|cnt_thousand_sep
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
name|num_str
operator|.
name|length
argument_list|()
comment|/* - cnt_thousand_sep*/
init|;
name|i
operator|<
name|precision
condition|;
operator|++
name|i
control|)
name|num_str
operator|.
name|prepend
argument_list|(
name|base
operator|==
literal|10
condition|?
name|zero
else|:
name|QChar
operator|::
name|fromLatin1
argument_list|(
literal|'0'
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|flags
operator|&
name|Alternate
operator|||
name|flags
operator|&
name|ShowBase
operator|)
operator|&&
name|base
operator|==
literal|8
operator|&&
operator|(
name|num_str
operator|.
name|isEmpty
argument_list|()
operator|||
name|num_str
index|[
literal|0
index|]
operator|.
name|unicode
argument_list|()
operator|!=
name|QLatin1Char
argument_list|(
literal|'0'
argument_list|)
operator|)
condition|)
name|num_str
operator|.
name|prepend
argument_list|(
name|QLatin1Char
argument_list|(
literal|'0'
argument_list|)
argument_list|)
expr_stmt|;
comment|// LeftAdjusted overrides this flag ZeroPadded. sprintf only padds
comment|// when precision is not specified in the format string
name|bool
name|zero_padded
init|=
name|flags
operator|&
name|ZeroPadded
operator|&&
operator|!
operator|(
name|flags
operator|&
name|LeftAdjusted
operator|)
operator|&&
name|precision_not_specified
decl_stmt|;
if|if
condition|(
name|zero_padded
condition|)
block|{
name|int
name|num_pad_chars
init|=
name|width
operator|-
name|num_str
operator|.
name|length
argument_list|()
decl_stmt|;
comment|// leave space for the sign
if|if
condition|(
name|negative
operator|||
name|flags
operator|&
name|AlwaysShowSign
operator|||
name|flags
operator|&
name|BlankBeforePositive
condition|)
operator|--
name|num_pad_chars
expr_stmt|;
comment|// leave space for optional '0x' in hex form
if|if
condition|(
name|base
operator|==
literal|16
operator|&&
operator|(
name|flags
operator|&
name|Alternate
operator|||
name|flags
operator|&
name|ShowBase
operator|)
condition|)
name|num_pad_chars
operator|-=
literal|2
expr_stmt|;
comment|// leave space for optional '0b' in binary form
elseif|else
if|if
condition|(
name|base
operator|==
literal|2
operator|&&
operator|(
name|flags
operator|&
name|Alternate
operator|||
name|flags
operator|&
name|ShowBase
operator|)
condition|)
name|num_pad_chars
operator|-=
literal|2
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|num_pad_chars
condition|;
operator|++
name|i
control|)
name|num_str
operator|.
name|prepend
argument_list|(
name|base
operator|==
literal|10
condition|?
name|zero
else|:
name|QChar
operator|::
name|fromLatin1
argument_list|(
literal|'0'
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|flags
operator|&
name|CapitalEorX
condition|)
name|num_str
operator|=
name|num_str
operator|.
name|toUpper
argument_list|()
expr_stmt|;
if|if
condition|(
name|base
operator|==
literal|16
operator|&&
operator|(
name|flags
operator|&
name|Alternate
operator|||
name|flags
operator|&
name|ShowBase
operator|)
condition|)
name|num_str
operator|.
name|prepend
argument_list|(
name|QLatin1String
argument_list|(
name|flags
operator|&
name|UppercaseBase
condition|?
literal|"0X"
else|:
literal|"0x"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|base
operator|==
literal|2
operator|&&
operator|(
name|flags
operator|&
name|Alternate
operator|||
name|flags
operator|&
name|ShowBase
operator|)
condition|)
name|num_str
operator|.
name|prepend
argument_list|(
name|QLatin1String
argument_list|(
name|flags
operator|&
name|UppercaseBase
condition|?
literal|"0B"
else|:
literal|"0b"
argument_list|)
argument_list|)
expr_stmt|;
comment|// add sign
if|if
condition|(
name|negative
condition|)
name|num_str
operator|.
name|prepend
argument_list|(
name|minus
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|flags
operator|&
name|AlwaysShowSign
condition|)
name|num_str
operator|.
name|prepend
argument_list|(
name|plus
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|flags
operator|&
name|BlankBeforePositive
condition|)
name|num_str
operator|.
name|prepend
argument_list|(
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|num_str
return|;
block|}
end_function
begin_function
DECL|function|unsLongLongToString
name|QString
name|QLocalePrivate
operator|::
name|unsLongLongToString
parameter_list|(
name|qulonglong
name|l
parameter_list|,
name|int
name|precision
parameter_list|,
name|int
name|base
parameter_list|,
name|int
name|width
parameter_list|,
name|unsigned
name|flags
parameter_list|)
specifier|const
block|{
return|return
name|QLocalePrivate
operator|::
name|unsLongLongToString
argument_list|(
name|zero
argument_list|()
argument_list|,
name|group
argument_list|()
argument_list|,
name|plus
argument_list|()
argument_list|,
name|l
argument_list|,
name|precision
argument_list|,
name|base
argument_list|,
name|width
argument_list|,
name|flags
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|unsLongLongToString
name|QString
name|QLocalePrivate
operator|::
name|unsLongLongToString
parameter_list|(
specifier|const
name|QChar
name|zero
parameter_list|,
specifier|const
name|QChar
name|group
parameter_list|,
specifier|const
name|QChar
name|plus
parameter_list|,
name|qulonglong
name|l
parameter_list|,
name|int
name|precision
parameter_list|,
name|int
name|base
parameter_list|,
name|int
name|width
parameter_list|,
name|unsigned
name|flags
parameter_list|)
block|{
name|bool
name|precision_not_specified
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|precision
operator|==
operator|-
literal|1
condition|)
block|{
name|precision_not_specified
operator|=
literal|true
expr_stmt|;
name|precision
operator|=
literal|1
expr_stmt|;
block|}
name|QString
name|num_str
init|=
name|qulltoa
argument_list|(
name|l
argument_list|,
name|base
argument_list|,
name|zero
argument_list|)
decl_stmt|;
name|uint
name|cnt_thousand_sep
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|flags
operator|&
name|ThousandsGroup
operator|&&
name|base
operator|==
literal|10
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|num_str
operator|.
name|length
argument_list|()
operator|-
literal|3
init|;
name|i
operator|>
literal|0
condition|;
name|i
operator|-=
literal|3
control|)
block|{
name|num_str
operator|.
name|insert
argument_list|(
name|i
argument_list|,
name|group
argument_list|)
expr_stmt|;
operator|++
name|cnt_thousand_sep
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
name|num_str
operator|.
name|length
argument_list|()
comment|/* - cnt_thousand_sep*/
init|;
name|i
operator|<
name|precision
condition|;
operator|++
name|i
control|)
name|num_str
operator|.
name|prepend
argument_list|(
name|base
operator|==
literal|10
condition|?
name|zero
else|:
name|QChar
operator|::
name|fromLatin1
argument_list|(
literal|'0'
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|flags
operator|&
name|Alternate
operator|||
name|flags
operator|&
name|ShowBase
operator|)
operator|&&
name|base
operator|==
literal|8
operator|&&
operator|(
name|num_str
operator|.
name|isEmpty
argument_list|()
operator|||
name|num_str
index|[
literal|0
index|]
operator|.
name|unicode
argument_list|()
operator|!=
name|QLatin1Char
argument_list|(
literal|'0'
argument_list|)
operator|)
condition|)
name|num_str
operator|.
name|prepend
argument_list|(
name|QLatin1Char
argument_list|(
literal|'0'
argument_list|)
argument_list|)
expr_stmt|;
comment|// LeftAdjusted overrides this flag ZeroPadded. sprintf only padds
comment|// when precision is not specified in the format string
name|bool
name|zero_padded
init|=
name|flags
operator|&
name|ZeroPadded
operator|&&
operator|!
operator|(
name|flags
operator|&
name|LeftAdjusted
operator|)
operator|&&
name|precision_not_specified
decl_stmt|;
if|if
condition|(
name|zero_padded
condition|)
block|{
name|int
name|num_pad_chars
init|=
name|width
operator|-
name|num_str
operator|.
name|length
argument_list|()
decl_stmt|;
comment|// leave space for optional '0x' in hex form
if|if
condition|(
name|base
operator|==
literal|16
operator|&&
name|flags
operator|&
name|Alternate
condition|)
name|num_pad_chars
operator|-=
literal|2
expr_stmt|;
comment|// leave space for optional '0b' in binary form
elseif|else
if|if
condition|(
name|base
operator|==
literal|2
operator|&&
name|flags
operator|&
name|Alternate
condition|)
name|num_pad_chars
operator|-=
literal|2
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|num_pad_chars
condition|;
operator|++
name|i
control|)
name|num_str
operator|.
name|prepend
argument_list|(
name|base
operator|==
literal|10
condition|?
name|zero
else|:
name|QChar
operator|::
name|fromLatin1
argument_list|(
literal|'0'
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|flags
operator|&
name|CapitalEorX
condition|)
name|num_str
operator|=
name|num_str
operator|.
name|toUpper
argument_list|()
expr_stmt|;
if|if
condition|(
name|base
operator|==
literal|16
operator|&&
operator|(
name|flags
operator|&
name|Alternate
operator|||
name|flags
operator|&
name|ShowBase
operator|)
condition|)
name|num_str
operator|.
name|prepend
argument_list|(
name|QLatin1String
argument_list|(
name|flags
operator|&
name|UppercaseBase
condition|?
literal|"0X"
else|:
literal|"0x"
argument_list|)
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|base
operator|==
literal|2
operator|&&
operator|(
name|flags
operator|&
name|Alternate
operator|||
name|flags
operator|&
name|ShowBase
operator|)
condition|)
name|num_str
operator|.
name|prepend
argument_list|(
name|QLatin1String
argument_list|(
name|flags
operator|&
name|UppercaseBase
condition|?
literal|"0B"
else|:
literal|"0b"
argument_list|)
argument_list|)
expr_stmt|;
comment|// add sign
if|if
condition|(
name|flags
operator|&
name|AlwaysShowSign
condition|)
name|num_str
operator|.
name|prepend
argument_list|(
name|plus
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|flags
operator|&
name|BlankBeforePositive
condition|)
name|num_str
operator|.
name|prepend
argument_list|(
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|num_str
return|;
block|}
end_function
begin_comment
comment|/*     Converts a number in locale to its representation in the C locale.     Only has to guarantee that a string that is a correct representation of     a number will be converted. If junk is passed in, junk will be passed     out and the error will be detected during the actual conversion to a     number. We can't detect junk here, since we don't even know the base     of the number. */
end_comment
begin_function
DECL|function|numberToCLocale
name|bool
name|QLocalePrivate
operator|::
name|numberToCLocale
parameter_list|(
specifier|const
name|QString
modifier|&
name|num
parameter_list|,
name|GroupSeparatorMode
name|group_sep_mode
parameter_list|,
name|CharBuff
modifier|*
name|result
parameter_list|)
specifier|const
block|{
specifier|const
name|QChar
modifier|*
name|uc
init|=
name|num
operator|.
name|unicode
argument_list|()
decl_stmt|;
name|int
name|l
init|=
name|num
operator|.
name|length
argument_list|()
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
comment|// Skip whitespace
while|while
condition|(
name|idx
operator|<
name|l
operator|&&
name|uc
index|[
name|idx
index|]
operator|.
name|isSpace
argument_list|()
condition|)
operator|++
name|idx
expr_stmt|;
if|if
condition|(
name|idx
operator|==
name|l
condition|)
return|return
literal|false
return|;
while|while
condition|(
name|idx
operator|<
name|l
condition|)
block|{
specifier|const
name|QChar
modifier|&
name|in
init|=
name|uc
index|[
name|idx
index|]
decl_stmt|;
name|char
name|out
init|=
name|digitToCLocale
argument_list|(
name|in
argument_list|)
decl_stmt|;
if|if
condition|(
name|out
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|in
operator|==
name|list
argument_list|()
condition|)
name|out
operator|=
literal|';'
expr_stmt|;
elseif|else
if|if
condition|(
name|in
operator|==
name|percent
argument_list|()
condition|)
name|out
operator|=
literal|'%'
expr_stmt|;
comment|// for handling base-x numbers
elseif|else
if|if
condition|(
name|in
operator|.
name|unicode
argument_list|()
operator|>=
literal|'A'
operator|&&
name|in
operator|.
name|unicode
argument_list|()
operator|<=
literal|'Z'
condition|)
name|out
operator|=
name|in
operator|.
name|toLower
argument_list|()
operator|.
name|toLatin1
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|in
operator|.
name|unicode
argument_list|()
operator|>=
literal|'a'
operator|&&
name|in
operator|.
name|unicode
argument_list|()
operator|<=
literal|'z'
condition|)
name|out
operator|=
name|in
operator|.
name|toLatin1
argument_list|()
expr_stmt|;
else|else
break|break;
block|}
name|result
operator|->
name|append
argument_list|(
name|out
argument_list|)
expr_stmt|;
operator|++
name|idx
expr_stmt|;
block|}
comment|// Check trailing whitespace
for|for
control|(
init|;
name|idx
operator|<
name|l
condition|;
operator|++
name|idx
control|)
block|{
if|if
condition|(
operator|!
name|uc
index|[
name|idx
index|]
operator|.
name|isSpace
argument_list|()
condition|)
return|return
literal|false
return|;
block|}
name|result
operator|->
name|append
argument_list|(
literal|'\0'
argument_list|)
expr_stmt|;
comment|// Check separators
if|if
condition|(
name|group_sep_mode
operator|==
name|ParseGroupSeparators
operator|&&
operator|!
name|removeGroupSeparators
argument_list|(
name|result
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|validateChars
name|bool
name|QLocalePrivate
operator|::
name|validateChars
parameter_list|(
specifier|const
name|QString
modifier|&
name|str
parameter_list|,
name|NumberMode
name|numMode
parameter_list|,
name|QByteArray
modifier|*
name|buff
parameter_list|,
name|int
name|decDigits
parameter_list|)
specifier|const
block|{
name|buff
operator|->
name|clear
argument_list|()
expr_stmt|;
name|buff
operator|->
name|reserve
argument_list|(
name|str
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|bool
name|scientific
init|=
name|numMode
operator|==
name|DoubleScientificMode
decl_stmt|;
name|bool
name|lastWasE
init|=
literal|false
decl_stmt|;
name|bool
name|lastWasDigit
init|=
literal|false
decl_stmt|;
name|int
name|eCnt
init|=
literal|0
decl_stmt|;
name|int
name|decPointCnt
init|=
literal|0
decl_stmt|;
name|bool
name|dec
init|=
literal|false
decl_stmt|;
name|int
name|decDigitCnt
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|str
operator|.
name|length
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|char
name|c
init|=
name|digitToCLocale
argument_list|(
name|str
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|>=
literal|'0'
operator|&&
name|c
operator|<=
literal|'9'
condition|)
block|{
if|if
condition|(
name|numMode
operator|!=
name|IntegerMode
condition|)
block|{
comment|// If a double has too many digits after decpt, it shall be Invalid.
if|if
condition|(
name|dec
operator|&&
name|decDigits
operator|!=
operator|-
literal|1
operator|&&
name|decDigits
operator|<
operator|++
name|decDigitCnt
condition|)
return|return
literal|false
return|;
block|}
name|lastWasDigit
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
switch|switch
condition|(
name|c
condition|)
block|{
case|case
literal|'.'
case|:
if|if
condition|(
name|numMode
operator|==
name|IntegerMode
condition|)
block|{
comment|// If an integer has a decimal point, it shall be Invalid.
return|return
literal|false
return|;
block|}
else|else
block|{
comment|// If a double has more than one decimal point, it shall be Invalid.
if|if
condition|(
operator|++
name|decPointCnt
operator|>
literal|1
condition|)
return|return
literal|false
return|;
if|#
directive|if
literal|0
comment|// If a double with no decimal digits has a decimal point, it shall be
comment|// Invalid.
block|if (decDigits == 0)                             return false;
endif|#
directive|endif
comment|// On second thoughts, it shall be Valid.
name|dec
operator|=
literal|true
expr_stmt|;
block|}
break|break;
case|case
literal|'+'
case|:
case|case
literal|'-'
case|:
if|if
condition|(
name|scientific
condition|)
block|{
comment|// If a scientific has a sign that's not at the beginning or after
comment|// an 'e', it shall be Invalid.
if|if
condition|(
name|i
operator|!=
literal|0
operator|&&
operator|!
name|lastWasE
condition|)
return|return
literal|false
return|;
block|}
else|else
block|{
comment|// If a non-scientific has a sign that's not at the beginning,
comment|// it shall be Invalid.
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
return|return
literal|false
return|;
block|}
break|break;
case|case
literal|','
case|:
comment|//it can only be placed after a digit which is before the decimal point
if|if
condition|(
operator|!
name|lastWasDigit
operator|||
name|decPointCnt
operator|>
literal|0
condition|)
return|return
literal|false
return|;
break|break;
case|case
literal|'e'
case|:
if|if
condition|(
name|scientific
condition|)
block|{
comment|// If a scientific has more than one 'e', it shall be Invalid.
if|if
condition|(
operator|++
name|eCnt
operator|>
literal|1
condition|)
return|return
literal|false
return|;
name|dec
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
comment|// If a non-scientific has an 'e', it shall be Invalid.
return|return
literal|false
return|;
block|}
break|break;
default|default:
comment|// If it's not a valid digit, it shall be Invalid.
return|return
literal|false
return|;
block|}
name|lastWasDigit
operator|=
literal|false
expr_stmt|;
block|}
name|lastWasE
operator|=
name|c
operator|==
literal|'e'
expr_stmt|;
if|if
condition|(
name|c
operator|!=
literal|','
condition|)
name|buff
operator|->
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|stringToDouble
name|double
name|QLocalePrivate
operator|::
name|stringToDouble
parameter_list|(
specifier|const
name|QString
modifier|&
name|number
parameter_list|,
name|bool
modifier|*
name|ok
parameter_list|,
name|GroupSeparatorMode
name|group_sep_mode
parameter_list|)
specifier|const
block|{
name|CharBuff
name|buff
decl_stmt|;
if|if
condition|(
operator|!
name|numberToCLocale
argument_list|(
name|group
argument_list|()
operator|.
name|unicode
argument_list|()
operator|==
literal|0xa0
condition|?
name|number
operator|.
name|trimmed
argument_list|()
else|:
name|number
argument_list|,
name|group_sep_mode
argument_list|,
operator|&
name|buff
argument_list|)
condition|)
block|{
if|if
condition|(
name|ok
operator|!=
literal|0
condition|)
operator|*
name|ok
operator|=
literal|false
expr_stmt|;
return|return
literal|0.0
return|;
block|}
return|return
name|bytearrayToDouble
argument_list|(
name|buff
operator|.
name|constData
argument_list|()
argument_list|,
name|ok
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|stringToLongLong
name|qlonglong
name|QLocalePrivate
operator|::
name|stringToLongLong
parameter_list|(
specifier|const
name|QString
modifier|&
name|number
parameter_list|,
name|int
name|base
parameter_list|,
name|bool
modifier|*
name|ok
parameter_list|,
name|GroupSeparatorMode
name|group_sep_mode
parameter_list|)
specifier|const
block|{
name|CharBuff
name|buff
decl_stmt|;
if|if
condition|(
operator|!
name|numberToCLocale
argument_list|(
name|group
argument_list|()
operator|.
name|unicode
argument_list|()
operator|==
literal|0xa0
condition|?
name|number
operator|.
name|trimmed
argument_list|()
else|:
name|number
argument_list|,
name|group_sep_mode
argument_list|,
operator|&
name|buff
argument_list|)
condition|)
block|{
if|if
condition|(
name|ok
operator|!=
literal|0
condition|)
operator|*
name|ok
operator|=
literal|false
expr_stmt|;
return|return
literal|0
return|;
block|}
return|return
name|bytearrayToLongLong
argument_list|(
name|buff
operator|.
name|constData
argument_list|()
argument_list|,
name|base
argument_list|,
name|ok
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|stringToUnsLongLong
name|qulonglong
name|QLocalePrivate
operator|::
name|stringToUnsLongLong
parameter_list|(
specifier|const
name|QString
modifier|&
name|number
parameter_list|,
name|int
name|base
parameter_list|,
name|bool
modifier|*
name|ok
parameter_list|,
name|GroupSeparatorMode
name|group_sep_mode
parameter_list|)
specifier|const
block|{
name|CharBuff
name|buff
decl_stmt|;
if|if
condition|(
operator|!
name|numberToCLocale
argument_list|(
name|group
argument_list|()
operator|.
name|unicode
argument_list|()
operator|==
literal|0xa0
condition|?
name|number
operator|.
name|trimmed
argument_list|()
else|:
name|number
argument_list|,
name|group_sep_mode
argument_list|,
operator|&
name|buff
argument_list|)
condition|)
block|{
if|if
condition|(
name|ok
operator|!=
literal|0
condition|)
operator|*
name|ok
operator|=
literal|false
expr_stmt|;
return|return
literal|0
return|;
block|}
return|return
name|bytearrayToUnsLongLong
argument_list|(
name|buff
operator|.
name|constData
argument_list|()
argument_list|,
name|base
argument_list|,
name|ok
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|bytearrayToDouble
name|double
name|QLocalePrivate
operator|::
name|bytearrayToDouble
parameter_list|(
specifier|const
name|char
modifier|*
name|num
parameter_list|,
name|bool
modifier|*
name|ok
parameter_list|,
name|bool
modifier|*
name|overflow
parameter_list|)
block|{
if|if
condition|(
name|ok
operator|!=
literal|0
condition|)
operator|*
name|ok
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|overflow
operator|!=
literal|0
condition|)
operator|*
name|overflow
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|*
name|num
operator|==
literal|'\0'
condition|)
block|{
if|if
condition|(
name|ok
operator|!=
literal|0
condition|)
operator|*
name|ok
operator|=
literal|false
expr_stmt|;
return|return
literal|0.0
return|;
block|}
if|if
condition|(
name|qstrcmp
argument_list|(
name|num
argument_list|,
literal|"nan"
argument_list|)
operator|==
literal|0
condition|)
return|return
name|qt_snan
argument_list|()
return|;
if|if
condition|(
name|qstrcmp
argument_list|(
name|num
argument_list|,
literal|"+inf"
argument_list|)
operator|==
literal|0
operator|||
name|qstrcmp
argument_list|(
name|num
argument_list|,
literal|"inf"
argument_list|)
operator|==
literal|0
condition|)
return|return
name|qt_inf
argument_list|()
return|;
if|if
condition|(
name|qstrcmp
argument_list|(
name|num
argument_list|,
literal|"-inf"
argument_list|)
operator|==
literal|0
condition|)
return|return
operator|-
name|qt_inf
argument_list|()
return|;
name|bool
name|_ok
decl_stmt|;
specifier|const
name|char
modifier|*
name|endptr
decl_stmt|;
name|double
name|d
init|=
name|qstrtod
argument_list|(
name|num
argument_list|,
operator|&
name|endptr
argument_list|,
operator|&
name|_ok
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|_ok
condition|)
block|{
comment|// the only way strtod can fail with *endptr != '\0' on a non-empty
comment|// input string is overflow
if|if
condition|(
name|ok
operator|!=
literal|0
condition|)
operator|*
name|ok
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|overflow
operator|!=
literal|0
condition|)
operator|*
name|overflow
operator|=
operator|*
name|endptr
operator|!=
literal|'\0'
expr_stmt|;
return|return
literal|0.0
return|;
block|}
if|if
condition|(
operator|*
name|endptr
operator|!=
literal|'\0'
condition|)
block|{
comment|// we stopped at a non-digit character after converting some digits
if|if
condition|(
name|ok
operator|!=
literal|0
condition|)
operator|*
name|ok
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|overflow
operator|!=
literal|0
condition|)
operator|*
name|overflow
operator|=
literal|false
expr_stmt|;
return|return
literal|0.0
return|;
block|}
if|if
condition|(
name|ok
operator|!=
literal|0
condition|)
operator|*
name|ok
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|overflow
operator|!=
literal|0
condition|)
operator|*
name|overflow
operator|=
literal|false
expr_stmt|;
return|return
name|d
return|;
block|}
end_function
begin_function
DECL|function|bytearrayToLongLong
name|qlonglong
name|QLocalePrivate
operator|::
name|bytearrayToLongLong
parameter_list|(
specifier|const
name|char
modifier|*
name|num
parameter_list|,
name|int
name|base
parameter_list|,
name|bool
modifier|*
name|ok
parameter_list|,
name|bool
modifier|*
name|overflow
parameter_list|)
block|{
name|bool
name|_ok
decl_stmt|;
specifier|const
name|char
modifier|*
name|endptr
decl_stmt|;
if|if
condition|(
operator|*
name|num
operator|==
literal|'\0'
condition|)
block|{
if|if
condition|(
name|ok
operator|!=
literal|0
condition|)
operator|*
name|ok
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|overflow
operator|!=
literal|0
condition|)
operator|*
name|overflow
operator|=
literal|false
expr_stmt|;
return|return
literal|0
return|;
block|}
name|qlonglong
name|l
init|=
name|qstrtoll
argument_list|(
name|num
argument_list|,
operator|&
name|endptr
argument_list|,
name|base
argument_list|,
operator|&
name|_ok
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|_ok
condition|)
block|{
if|if
condition|(
name|ok
operator|!=
literal|0
condition|)
operator|*
name|ok
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|overflow
operator|!=
literal|0
condition|)
block|{
comment|// the only way qstrtoll can fail with *endptr != '\0' on a non-empty
comment|// input string is overflow
operator|*
name|overflow
operator|=
operator|*
name|endptr
operator|!=
literal|'\0'
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
if|if
condition|(
operator|*
name|endptr
operator|!=
literal|'\0'
condition|)
block|{
comment|// we stopped at a non-digit character after converting some digits
if|if
condition|(
name|ok
operator|!=
literal|0
condition|)
operator|*
name|ok
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|overflow
operator|!=
literal|0
condition|)
operator|*
name|overflow
operator|=
literal|false
expr_stmt|;
return|return
literal|0
return|;
block|}
if|if
condition|(
name|ok
operator|!=
literal|0
condition|)
operator|*
name|ok
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|overflow
operator|!=
literal|0
condition|)
operator|*
name|overflow
operator|=
literal|false
expr_stmt|;
return|return
name|l
return|;
block|}
end_function
begin_function
DECL|function|bytearrayToUnsLongLong
name|qulonglong
name|QLocalePrivate
operator|::
name|bytearrayToUnsLongLong
parameter_list|(
specifier|const
name|char
modifier|*
name|num
parameter_list|,
name|int
name|base
parameter_list|,
name|bool
modifier|*
name|ok
parameter_list|)
block|{
name|bool
name|_ok
decl_stmt|;
specifier|const
name|char
modifier|*
name|endptr
decl_stmt|;
name|qulonglong
name|l
init|=
name|qstrtoull
argument_list|(
name|num
argument_list|,
operator|&
name|endptr
argument_list|,
name|base
argument_list|,
operator|&
name|_ok
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|_ok
operator|||
operator|*
name|endptr
operator|!=
literal|'\0'
condition|)
block|{
if|if
condition|(
name|ok
operator|!=
literal|0
condition|)
operator|*
name|ok
operator|=
literal|false
expr_stmt|;
return|return
literal|0
return|;
block|}
if|if
condition|(
name|ok
operator|!=
literal|0
condition|)
operator|*
name|ok
operator|=
literal|true
expr_stmt|;
return|return
name|l
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.8      \enum QLocale::CurrencySymbolFormat      Specifies the format of the currency symbol.      \value CurrencyIsoCode a ISO-4217 code of the currency.     \value CurrencySymbol a currency symbol.     \value CurrencyDisplayName a user readable name of the currency. */
end_comment
begin_comment
comment|/*!     \since 4.8     Returns a currency symbol according to the \a format. */
end_comment
begin_function
DECL|function|currencySymbol
name|QString
name|QLocale
operator|::
name|currencySymbol
parameter_list|(
name|QLocale
operator|::
name|CurrencySymbolFormat
name|format
parameter_list|)
specifier|const
block|{
ifndef|#
directive|ifndef
name|QT_NO_SYSTEMLOCALE
if|if
condition|(
name|d
argument_list|()
operator|==
name|systemPrivate
argument_list|()
condition|)
block|{
name|QVariant
name|res
init|=
name|systemLocale
argument_list|()
operator|->
name|query
argument_list|(
name|QSystemLocale
operator|::
name|CurrencySymbol
argument_list|,
name|format
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|res
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|res
operator|.
name|toString
argument_list|()
return|;
block|}
endif|#
directive|endif
name|quint32
name|idx
decl_stmt|,
name|size
decl_stmt|;
switch|switch
condition|(
name|format
condition|)
block|{
case|case
name|CurrencySymbol
case|:
name|idx
operator|=
name|d
argument_list|()
operator|->
name|m_currency_symbol_idx
expr_stmt|;
name|size
operator|=
name|d
argument_list|()
operator|->
name|m_currency_symbol_size
expr_stmt|;
return|return
name|getLocaleData
argument_list|(
name|currency_symbol_data
operator|+
name|idx
argument_list|,
name|size
argument_list|)
return|;
case|case
name|CurrencyDisplayName
case|:
name|idx
operator|=
name|d
argument_list|()
operator|->
name|m_currency_display_name_idx
expr_stmt|;
name|size
operator|=
name|d
argument_list|()
operator|->
name|m_currency_display_name_size
expr_stmt|;
return|return
name|getLocaleListData
argument_list|(
name|currency_display_name_data
operator|+
name|idx
argument_list|,
name|size
argument_list|,
literal|0
argument_list|)
return|;
case|case
name|CurrencyIsoCode
case|:
block|{
name|int
name|len
init|=
literal|0
decl_stmt|;
specifier|const
name|QLocalePrivate
modifier|*
name|d
init|=
name|this
operator|->
name|d
argument_list|()
decl_stmt|;
for|for
control|(
init|;
name|len
operator|<
literal|3
condition|;
operator|++
name|len
control|)
if|if
condition|(
operator|!
name|d
operator|->
name|m_currency_iso_code
index|[
name|len
index|]
condition|)
break|break;
return|return
name|len
condition|?
name|QString
operator|::
name|fromLatin1
argument_list|(
name|d
operator|->
name|m_currency_iso_code
argument_list|,
name|len
argument_list|)
else|:
name|QString
argument_list|()
return|;
block|}
block|}
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.8      Returns a localized string representation of \a value as a currency.     If the \a symbol is provided it is used instead of the default currency symbol.      \sa currencySymbol() */
end_comment
begin_function
DECL|function|toCurrencyString
name|QString
name|QLocale
operator|::
name|toCurrencyString
parameter_list|(
name|qlonglong
name|value
parameter_list|,
specifier|const
name|QString
modifier|&
name|symbol
parameter_list|)
specifier|const
block|{
ifndef|#
directive|ifndef
name|QT_NO_SYSTEMLOCALE
if|if
condition|(
name|d
argument_list|()
operator|==
name|systemPrivate
argument_list|()
condition|)
block|{
name|QSystemLocale
operator|::
name|CurrencyToStringArgument
name|arg
argument_list|(
name|value
argument_list|,
name|symbol
argument_list|)
decl_stmt|;
name|QVariant
name|res
init|=
name|systemLocale
argument_list|()
operator|->
name|query
argument_list|(
name|QSystemLocale
operator|::
name|CurrencyToString
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|arg
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|res
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|res
operator|.
name|toString
argument_list|()
return|;
block|}
endif|#
directive|endif
specifier|const
name|QLocalePrivate
modifier|*
name|d
init|=
name|this
operator|->
name|d
argument_list|()
decl_stmt|;
name|quint8
name|idx
init|=
name|d
operator|->
name|m_currency_format_idx
decl_stmt|;
name|quint8
name|size
init|=
name|d
operator|->
name|m_currency_format_size
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|m_currency_negative_format_size
operator|&&
name|value
operator|<
literal|0
condition|)
block|{
name|idx
operator|=
name|d
operator|->
name|m_currency_negative_format_idx
expr_stmt|;
name|size
operator|=
name|d
operator|->
name|m_currency_negative_format_size
expr_stmt|;
name|value
operator|=
operator|-
name|value
expr_stmt|;
block|}
name|QString
name|str
init|=
name|d
operator|->
name|longLongToString
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|QString
name|sym
init|=
name|symbol
operator|.
name|isNull
argument_list|()
condition|?
name|currencySymbol
argument_list|()
else|:
name|symbol
decl_stmt|;
if|if
condition|(
name|sym
operator|.
name|isEmpty
argument_list|()
condition|)
name|sym
operator|=
name|currencySymbol
argument_list|(
name|QLocale
operator|::
name|CurrencyIsoCode
argument_list|)
expr_stmt|;
name|QString
name|format
init|=
name|getLocaleData
argument_list|(
name|currency_format_data
operator|+
name|idx
argument_list|,
name|size
argument_list|)
decl_stmt|;
return|return
name|format
operator|.
name|arg
argument_list|(
name|str
argument_list|,
name|sym
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.8     \overload */
end_comment
begin_function
DECL|function|toCurrencyString
name|QString
name|QLocale
operator|::
name|toCurrencyString
parameter_list|(
name|qulonglong
name|value
parameter_list|,
specifier|const
name|QString
modifier|&
name|symbol
parameter_list|)
specifier|const
block|{
ifndef|#
directive|ifndef
name|QT_NO_SYSTEMLOCALE
if|if
condition|(
name|d
argument_list|()
operator|==
name|systemPrivate
argument_list|()
condition|)
block|{
name|QSystemLocale
operator|::
name|CurrencyToStringArgument
name|arg
argument_list|(
name|value
argument_list|,
name|symbol
argument_list|)
decl_stmt|;
name|QVariant
name|res
init|=
name|systemLocale
argument_list|()
operator|->
name|query
argument_list|(
name|QSystemLocale
operator|::
name|CurrencyToString
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|arg
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|res
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|res
operator|.
name|toString
argument_list|()
return|;
block|}
endif|#
directive|endif
specifier|const
name|QLocalePrivate
modifier|*
name|d
init|=
name|this
operator|->
name|d
argument_list|()
decl_stmt|;
name|quint8
name|idx
init|=
name|d
operator|->
name|m_currency_format_idx
decl_stmt|;
name|quint8
name|size
init|=
name|d
operator|->
name|m_currency_format_size
decl_stmt|;
name|QString
name|str
init|=
name|d
operator|->
name|unsLongLongToString
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|QString
name|sym
init|=
name|symbol
operator|.
name|isNull
argument_list|()
condition|?
name|currencySymbol
argument_list|()
else|:
name|symbol
decl_stmt|;
if|if
condition|(
name|sym
operator|.
name|isEmpty
argument_list|()
condition|)
name|sym
operator|=
name|currencySymbol
argument_list|(
name|QLocale
operator|::
name|CurrencyIsoCode
argument_list|)
expr_stmt|;
name|QString
name|format
init|=
name|getLocaleData
argument_list|(
name|currency_format_data
operator|+
name|idx
argument_list|,
name|size
argument_list|)
decl_stmt|;
return|return
name|format
operator|.
name|arg
argument_list|(
name|str
argument_list|,
name|sym
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.8     \overload */
end_comment
begin_function
DECL|function|toCurrencyString
name|QString
name|QLocale
operator|::
name|toCurrencyString
parameter_list|(
name|double
name|value
parameter_list|,
specifier|const
name|QString
modifier|&
name|symbol
parameter_list|)
specifier|const
block|{
ifndef|#
directive|ifndef
name|QT_NO_SYSTEMLOCALE
if|if
condition|(
name|d
argument_list|()
operator|==
name|systemPrivate
argument_list|()
condition|)
block|{
name|QSystemLocale
operator|::
name|CurrencyToStringArgument
name|arg
argument_list|(
name|value
argument_list|,
name|symbol
argument_list|)
decl_stmt|;
name|QVariant
name|res
init|=
name|systemLocale
argument_list|()
operator|->
name|query
argument_list|(
name|QSystemLocale
operator|::
name|CurrencyToString
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|arg
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|res
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|res
operator|.
name|toString
argument_list|()
return|;
block|}
endif|#
directive|endif
specifier|const
name|QLocalePrivate
modifier|*
name|d
init|=
name|this
operator|->
name|d
argument_list|()
decl_stmt|;
name|quint8
name|idx
init|=
name|d
operator|->
name|m_currency_format_idx
decl_stmt|;
name|quint8
name|size
init|=
name|d
operator|->
name|m_currency_format_size
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|m_currency_negative_format_size
operator|&&
name|value
operator|<
literal|0
condition|)
block|{
name|idx
operator|=
name|d
operator|->
name|m_currency_negative_format_idx
expr_stmt|;
name|size
operator|=
name|d
operator|->
name|m_currency_negative_format_size
expr_stmt|;
name|value
operator|=
operator|-
name|value
expr_stmt|;
block|}
name|QString
name|str
init|=
name|d
operator|->
name|doubleToString
argument_list|(
name|value
argument_list|,
name|d
operator|->
name|m_currency_digits
argument_list|,
name|QLocalePrivate
operator|::
name|DFDecimal
argument_list|)
decl_stmt|;
name|QString
name|sym
init|=
name|symbol
operator|.
name|isNull
argument_list|()
condition|?
name|currencySymbol
argument_list|()
else|:
name|symbol
decl_stmt|;
if|if
condition|(
name|sym
operator|.
name|isEmpty
argument_list|()
condition|)
name|sym
operator|=
name|currencySymbol
argument_list|(
name|QLocale
operator|::
name|CurrencyIsoCode
argument_list|)
expr_stmt|;
name|QString
name|format
init|=
name|getLocaleData
argument_list|(
name|currency_format_data
operator|+
name|idx
argument_list|,
name|size
argument_list|)
decl_stmt|;
return|return
name|format
operator|.
name|arg
argument_list|(
name|str
argument_list|,
name|sym
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.8      Returns an ordered list of locale names for translation purposes in     preference order.      The return value represents locale names that the user expects to see the     UI translation in.      Most like you do not need to use this function directly, but just pass the     QLocale object to the QTranslator::load() function.      The first item in the list is the most preferred one.      \sa QTranslator, bcp47Name() */
end_comment
begin_function
DECL|function|uiLanguages
name|QStringList
name|QLocale
operator|::
name|uiLanguages
parameter_list|()
specifier|const
block|{
ifndef|#
directive|ifndef
name|QT_NO_SYSTEMLOCALE
if|if
condition|(
name|d
argument_list|()
operator|==
name|systemPrivate
argument_list|()
condition|)
block|{
name|QVariant
name|res
init|=
name|systemLocale
argument_list|()
operator|->
name|query
argument_list|(
name|QSystemLocale
operator|::
name|UILanguages
argument_list|,
name|QVariant
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|res
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|QStringList
name|result
init|=
name|res
operator|.
name|toStringList
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|result
return|;
block|}
block|}
endif|#
directive|endif
return|return
name|QStringList
argument_list|(
name|bcp47Name
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.8      Returns a native name of the language for the locale. For example     "SchwiizertÃ¼Ã¼tsch" for Swiss-German locale.      \sa nativeCountryName(), languageToString() */
end_comment
begin_function
DECL|function|nativeLanguageName
name|QString
name|QLocale
operator|::
name|nativeLanguageName
parameter_list|()
specifier|const
block|{
ifndef|#
directive|ifndef
name|QT_NO_SYSTEMLOCALE
if|if
condition|(
name|d
argument_list|()
operator|==
name|systemPrivate
argument_list|()
condition|)
block|{
name|QVariant
name|res
init|=
name|systemLocale
argument_list|()
operator|->
name|query
argument_list|(
name|QSystemLocale
operator|::
name|NativeLanguageName
argument_list|,
name|QVariant
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|res
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|res
operator|.
name|toString
argument_list|()
return|;
block|}
endif|#
directive|endif
return|return
name|getLocaleData
argument_list|(
name|endonyms_data
operator|+
name|d
argument_list|()
operator|->
name|m_language_endonym_idx
argument_list|,
name|d
argument_list|()
operator|->
name|m_language_endonym_size
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.8      Returns a native name of the country for the locale. For example     "EspaÃ±a" for Spanish/Spain locale.      \sa nativeLanguageName(), countryToString() */
end_comment
begin_function
DECL|function|nativeCountryName
name|QString
name|QLocale
operator|::
name|nativeCountryName
parameter_list|()
specifier|const
block|{
ifndef|#
directive|ifndef
name|QT_NO_SYSTEMLOCALE
if|if
condition|(
name|d
argument_list|()
operator|==
name|systemPrivate
argument_list|()
condition|)
block|{
name|QVariant
name|res
init|=
name|systemLocale
argument_list|()
operator|->
name|query
argument_list|(
name|QSystemLocale
operator|::
name|NativeCountryName
argument_list|,
name|QVariant
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|res
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|res
operator|.
name|toString
argument_list|()
return|;
block|}
endif|#
directive|endif
return|return
name|getLocaleData
argument_list|(
name|endonyms_data
operator|+
name|d
argument_list|()
operator|->
name|m_country_endonym_idx
argument_list|,
name|d
argument_list|()
operator|->
name|m_country_endonym_size
argument_list|)
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
