begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QALGORITHMS_H
end_ifndef
begin_define
DECL|macro|QALGORITHMS_H
define|#
directive|define
name|QALGORITHMS_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qglobal.h>
end_include
begin_decl_stmt
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
comment|/*     Warning: The contents of QAlgorithmsPrivate is not a part of the public Qt API     and may be changed from version to version or even be completely removed. */
name|namespace
name|QAlgorithmsPrivate
block|{
name|template
operator|<
name|typename
name|RandomAccessIterator
operator|,
name|typename
name|T
operator|,
name|typename
name|LessThan
operator|>
name|Q_OUTOFLINE_TEMPLATE
name|void
name|qSortHelper
argument_list|(
argument|RandomAccessIterator start
argument_list|,
argument|RandomAccessIterator end
argument_list|,
argument|const T&t
argument_list|,
argument|LessThan lessThan
argument_list|)
expr_stmt|;
name|template
operator|<
name|typename
name|RandomAccessIterator
operator|,
name|typename
name|T
operator|>
specifier|inline
name|void
name|qSortHelper
argument_list|(
argument|RandomAccessIterator begin
argument_list|,
argument|RandomAccessIterator end
argument_list|,
argument|const T&dummy
argument_list|)
expr_stmt|;
name|template
operator|<
name|typename
name|RandomAccessIterator
operator|,
name|typename
name|T
operator|,
name|typename
name|LessThan
operator|>
name|Q_OUTOFLINE_TEMPLATE
name|void
name|qStableSortHelper
argument_list|(
argument|RandomAccessIterator start
argument_list|,
argument|RandomAccessIterator end
argument_list|,
argument|const T&t
argument_list|,
argument|LessThan lessThan
argument_list|)
expr_stmt|;
name|template
operator|<
name|typename
name|RandomAccessIterator
operator|,
name|typename
name|T
operator|>
specifier|inline
name|void
name|qStableSortHelper
argument_list|(
name|RandomAccessIterator
argument_list|,
name|RandomAccessIterator
argument_list|,
specifier|const
name|T
operator|&
argument_list|)
expr_stmt|;
name|template
operator|<
name|typename
name|RandomAccessIterator
operator|,
name|typename
name|T
operator|,
name|typename
name|LessThan
operator|>
name|Q_OUTOFLINE_TEMPLATE
name|RandomAccessIterator
name|qLowerBoundHelper
argument_list|(
argument|RandomAccessIterator begin
argument_list|,
argument|RandomAccessIterator end
argument_list|,
argument|const T&value
argument_list|,
argument|LessThan lessThan
argument_list|)
expr_stmt|;
name|template
operator|<
name|typename
name|RandomAccessIterator
operator|,
name|typename
name|T
operator|,
name|typename
name|LessThan
operator|>
name|Q_OUTOFLINE_TEMPLATE
name|RandomAccessIterator
name|qUpperBoundHelper
argument_list|(
argument|RandomAccessIterator begin
argument_list|,
argument|RandomAccessIterator end
argument_list|,
argument|const T&value
argument_list|,
argument|LessThan lessThan
argument_list|)
expr_stmt|;
name|template
operator|<
name|typename
name|RandomAccessIterator
operator|,
name|typename
name|T
operator|,
name|typename
name|LessThan
operator|>
name|Q_OUTOFLINE_TEMPLATE
name|RandomAccessIterator
name|qBinaryFindHelper
argument_list|(
argument|RandomAccessIterator begin
argument_list|,
argument|RandomAccessIterator end
argument_list|,
argument|const T&value
argument_list|,
argument|LessThan lessThan
argument_list|)
expr_stmt|;
block|}
end_decl_stmt
begin_expr_stmt
DECL|variable|InputIterator
name|template
operator|<
name|typename
name|InputIterator
operator|,
name|typename
name|OutputIterator
operator|>
DECL|function|qCopy
specifier|inline
name|OutputIterator
name|qCopy
argument_list|(
argument|InputIterator begin
argument_list|,
argument|InputIterator end
argument_list|,
argument|OutputIterator dest
argument_list|)
block|{
while|while
condition|(
name|begin
operator|!=
name|end
condition|)
operator|*
name|dest
operator|++
operator|=
operator|*
name|begin
operator|++
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|dest
return|;
end_return
begin_expr_stmt
unit|}  template
DECL|variable|BiIterator1
operator|<
name|typename
name|BiIterator1
operator|,
name|typename
name|BiIterator2
operator|>
DECL|function|qCopyBackward
specifier|inline
name|BiIterator2
name|qCopyBackward
argument_list|(
argument|BiIterator1 begin
argument_list|,
argument|BiIterator1 end
argument_list|,
argument|BiIterator2 dest
argument_list|)
block|{
while|while
condition|(
name|begin
operator|!=
name|end
condition|)
operator|*
operator|--
name|dest
operator|=
operator|*
operator|--
name|end
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|dest
return|;
end_return
begin_expr_stmt
unit|}  template
DECL|variable|InputIterator1
operator|<
name|typename
name|InputIterator1
operator|,
name|typename
name|InputIterator2
operator|>
DECL|function|qEqual
specifier|inline
name|bool
name|qEqual
argument_list|(
argument|InputIterator1 first1
argument_list|,
argument|InputIterator1 last1
argument_list|,
argument|InputIterator2 first2
argument_list|)
block|{
for|for
control|(
init|;
name|first1
operator|!=
name|last1
condition|;
operator|++
name|first1
operator|,
operator|++
name|first2
control|)
if|if
condition|(
operator|!
operator|(
operator|*
name|first1
operator|==
operator|*
name|first2
operator|)
condition|)
return|return
name|false
return|;
end_expr_stmt
begin_return
return|return
name|true
return|;
end_return
begin_expr_stmt
unit|}  template
DECL|variable|ForwardIterator
operator|<
name|typename
name|ForwardIterator
operator|,
name|typename
name|T
operator|>
DECL|function|qFill
specifier|inline
name|void
name|qFill
argument_list|(
argument|ForwardIterator first
argument_list|,
argument|ForwardIterator last
argument_list|,
argument|const T&val
argument_list|)
block|{
for|for
control|(
init|;
name|first
operator|!=
name|last
condition|;
operator|++
name|first
control|)
operator|*
name|first
operator|=
name|val
expr_stmt|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|variable|Container
name|template
operator|<
name|typename
name|Container
operator|,
name|typename
name|T
operator|>
DECL|function|qFill
specifier|inline
name|void
name|qFill
argument_list|(
argument|Container&container
argument_list|,
argument|const T&val
argument_list|)
block|{
name|qFill
argument_list|(
name|container
operator|.
name|begin
argument_list|()
argument_list|,
name|container
operator|.
name|end
argument_list|()
argument_list|,
name|val
argument_list|)
block|; }
DECL|variable|InputIterator
name|template
operator|<
name|typename
name|InputIterator
operator|,
name|typename
name|T
operator|>
DECL|function|qFind
specifier|inline
name|InputIterator
name|qFind
argument_list|(
argument|InputIterator first
argument_list|,
argument|InputIterator last
argument_list|,
argument|const T&val
argument_list|)
block|{
while|while
condition|(
name|first
operator|!=
name|last
operator|&&
operator|!
operator|(
operator|*
name|first
operator|==
name|val
operator|)
condition|)
operator|++
name|first
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|first
return|;
end_return
begin_expr_stmt
unit|}  template
DECL|variable|Container
operator|<
name|typename
name|Container
operator|,
name|typename
name|T
operator|>
DECL|function|qFind
specifier|inline
name|typename
name|Container
operator|::
name|const_iterator
name|qFind
argument_list|(
argument|const Container&container
argument_list|,
argument|const T&val
argument_list|)
block|{
return|return
name|qFind
argument_list|(
name|container
operator|.
name|constBegin
argument_list|()
argument_list|,
name|container
operator|.
name|constEnd
argument_list|()
argument_list|,
name|val
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|variable|InputIterator
DECL|variable|T
name|template
operator|<
name|typename
name|InputIterator
operator|,
name|typename
name|T
operator|,
name|typename
name|Size
operator|>
DECL|function|qCount
specifier|inline
name|void
name|qCount
argument_list|(
argument|InputIterator first
argument_list|,
argument|InputIterator last
argument_list|,
argument|const T&value
argument_list|,
argument|Size&n
argument_list|)
block|{
for|for
control|(
init|;
name|first
operator|!=
name|last
condition|;
operator|++
name|first
control|)
if|if
condition|(
operator|*
name|first
operator|==
name|value
condition|)
operator|++
name|n
expr_stmt|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|variable|Container
DECL|variable|T
name|template
operator|<
name|typename
name|Container
operator|,
name|typename
name|T
operator|,
name|typename
name|Size
operator|>
DECL|function|qCount
specifier|inline
name|void
name|qCount
argument_list|(
argument|const Container&container
argument_list|,
argument|const T&value
argument_list|,
argument|Size&n
argument_list|)
block|{
name|qCount
argument_list|(
name|container
operator|.
name|constBegin
argument_list|()
argument_list|,
name|container
operator|.
name|constEnd
argument_list|()
argument_list|,
name|value
argument_list|,
name|n
argument_list|)
block|; }
ifdef|#
directive|ifdef
name|Q_QDOC
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|qLess
name|LessThan
name|qLess
argument_list|()
block|{ }
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|qGreater
name|LessThan
name|qGreater
argument_list|()
block|{ }
else|#
directive|else
name|template
operator|<
name|typename
name|T
operator|>
name|class
name|qLess
block|{
name|public
operator|:
specifier|inline
name|bool
name|operator
argument_list|()
operator|(
specifier|const
name|T
operator|&
name|t1
operator|,
specifier|const
name|T
operator|&
name|t2
operator|)
specifier|const
block|{
return|return
operator|(
name|t1
operator|<
name|t2
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|T
operator|>
name|class
name|qGreater
block|{
name|public
operator|:
specifier|inline
name|bool
name|operator
argument_list|()
operator|(
specifier|const
name|T
operator|&
name|t1
operator|,
specifier|const
name|T
operator|&
name|t2
operator|)
specifier|const
block|{
return|return
operator|(
name|t2
operator|<
name|t1
operator|)
return|;
block|}
end_expr_stmt
begin_endif
unit|};
endif|#
directive|endif
end_endif
begin_expr_stmt
name|template
operator|<
name|typename
name|RandomAccessIterator
operator|>
DECL|function|qSort
specifier|inline
name|void
name|qSort
argument_list|(
argument|RandomAccessIterator start
argument_list|,
argument|RandomAccessIterator end
argument_list|)
block|{
if|if
condition|(
name|start
operator|!=
name|end
condition|)
name|QAlgorithmsPrivate
operator|::
name|qSortHelper
argument_list|(
name|start
argument_list|,
name|end
argument_list|,
operator|*
name|start
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|variable|RandomAccessIterator
name|template
operator|<
name|typename
name|RandomAccessIterator
operator|,
name|typename
name|LessThan
operator|>
DECL|function|qSort
specifier|inline
name|void
name|qSort
argument_list|(
argument|RandomAccessIterator start
argument_list|,
argument|RandomAccessIterator end
argument_list|,
argument|LessThan lessThan
argument_list|)
block|{
if|if
condition|(
name|start
operator|!=
name|end
condition|)
name|QAlgorithmsPrivate
operator|::
name|qSortHelper
argument_list|(
name|start
argument_list|,
name|end
argument_list|,
operator|*
name|start
argument_list|,
name|lessThan
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|Container
operator|>
DECL|function|qSort
specifier|inline
name|void
name|qSort
argument_list|(
argument|Container&c
argument_list|)
block|{
ifdef|#
directive|ifdef
name|Q_CC_BOR
comment|// Work around Borland 5.5 optimizer bug
name|c
operator|.
name|detach
argument_list|()
block|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|c
operator|.
name|empty
argument_list|()
condition|)
name|QAlgorithmsPrivate
operator|::
name|qSortHelper
argument_list|(
name|c
operator|.
name|begin
argument_list|()
argument_list|,
name|c
operator|.
name|end
argument_list|()
argument_list|,
operator|*
name|c
operator|.
name|begin
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|RandomAccessIterator
operator|>
DECL|function|qStableSort
specifier|inline
name|void
name|qStableSort
argument_list|(
argument|RandomAccessIterator start
argument_list|,
argument|RandomAccessIterator end
argument_list|)
block|{
if|if
condition|(
name|start
operator|!=
name|end
condition|)
name|QAlgorithmsPrivate
operator|::
name|qStableSortHelper
argument_list|(
name|start
argument_list|,
name|end
argument_list|,
operator|*
name|start
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|variable|RandomAccessIterator
name|template
operator|<
name|typename
name|RandomAccessIterator
operator|,
name|typename
name|LessThan
operator|>
DECL|function|qStableSort
specifier|inline
name|void
name|qStableSort
argument_list|(
argument|RandomAccessIterator start
argument_list|,
argument|RandomAccessIterator end
argument_list|,
argument|LessThan lessThan
argument_list|)
block|{
if|if
condition|(
name|start
operator|!=
name|end
condition|)
name|QAlgorithmsPrivate
operator|::
name|qStableSortHelper
argument_list|(
name|start
argument_list|,
name|end
argument_list|,
operator|*
name|start
argument_list|,
name|lessThan
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|Container
operator|>
DECL|function|qStableSort
specifier|inline
name|void
name|qStableSort
argument_list|(
argument|Container&c
argument_list|)
block|{
ifdef|#
directive|ifdef
name|Q_CC_BOR
comment|// Work around Borland 5.5 optimizer bug
name|c
operator|.
name|detach
argument_list|()
block|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|c
operator|.
name|empty
argument_list|()
condition|)
name|QAlgorithmsPrivate
operator|::
name|qStableSortHelper
argument_list|(
name|c
operator|.
name|begin
argument_list|()
argument_list|,
name|c
operator|.
name|end
argument_list|()
argument_list|,
operator|*
name|c
operator|.
name|begin
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|variable|RandomAccessIterator
name|template
operator|<
name|typename
name|RandomAccessIterator
operator|,
name|typename
name|T
operator|>
DECL|function|qLowerBound
name|Q_OUTOFLINE_TEMPLATE
name|RandomAccessIterator
name|qLowerBound
argument_list|(
argument|RandomAccessIterator begin
argument_list|,
argument|RandomAccessIterator end
argument_list|,
argument|const T&value
argument_list|)
block|{
comment|// Implementation is duplicated from QAlgorithmsPrivate to keep existing code
comment|// compiling. We have to allow using *begin and value with different types,
comment|// and then implementing operator< for those types.
name|RandomAccessIterator
name|middle
block|;
name|int
name|n
operator|=
name|end
operator|-
name|begin
block|;
name|int
name|half
block|;
while|while
condition|(
name|n
operator|>
literal|0
condition|)
block|{
name|half
operator|=
name|n
operator|>>
literal|1
expr_stmt|;
name|middle
operator|=
name|begin
operator|+
name|half
expr_stmt|;
if|if
condition|(
operator|*
name|middle
operator|<
name|value
condition|)
block|{
name|begin
operator|=
name|middle
operator|+
literal|1
expr_stmt|;
name|n
operator|-=
name|half
operator|+
literal|1
expr_stmt|;
block|}
end_expr_stmt
begin_else
else|else
block|{
name|n
operator|=
name|half
expr_stmt|;
block|}
end_else
begin_expr_stmt
unit|}     return
name|begin
expr_stmt|;
end_expr_stmt
begin_expr_stmt
unit|}  template
DECL|variable|RandomAccessIterator
DECL|variable|T
operator|<
name|typename
name|RandomAccessIterator
operator|,
name|typename
name|T
operator|,
name|typename
name|LessThan
operator|>
DECL|function|qLowerBound
name|Q_OUTOFLINE_TEMPLATE
name|RandomAccessIterator
name|qLowerBound
argument_list|(
argument|RandomAccessIterator begin
argument_list|,
argument|RandomAccessIterator end
argument_list|,
argument|const T&value
argument_list|,
argument|LessThan lessThan
argument_list|)
block|{
return|return
name|QAlgorithmsPrivate
operator|::
name|qLowerBoundHelper
argument_list|(
name|begin
argument_list|,
name|end
argument_list|,
name|value
argument_list|,
name|lessThan
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|variable|Container
name|template
operator|<
name|typename
name|Container
operator|,
name|typename
name|T
operator|>
DECL|function|qLowerBound
name|Q_OUTOFLINE_TEMPLATE
name|typename
name|Container
operator|::
name|const_iterator
name|qLowerBound
argument_list|(
argument|const Container&container
argument_list|,
argument|const T&value
argument_list|)
block|{
return|return
name|QAlgorithmsPrivate
operator|::
name|qLowerBoundHelper
argument_list|(
name|container
operator|.
name|constBegin
argument_list|()
argument_list|,
name|container
operator|.
name|constEnd
argument_list|()
argument_list|,
name|value
argument_list|,
name|qLess
operator|<
name|T
operator|>
operator|(
operator|)
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|variable|RandomAccessIterator
name|template
operator|<
name|typename
name|RandomAccessIterator
operator|,
name|typename
name|T
operator|>
DECL|function|qUpperBound
name|Q_OUTOFLINE_TEMPLATE
name|RandomAccessIterator
name|qUpperBound
argument_list|(
argument|RandomAccessIterator begin
argument_list|,
argument|RandomAccessIterator end
argument_list|,
argument|const T&value
argument_list|)
block|{
comment|// Implementation is duplicated from QAlgorithmsPrivate.
name|RandomAccessIterator
name|middle
block|;
name|int
name|n
operator|=
name|end
operator|-
name|begin
block|;
name|int
name|half
block|;
while|while
condition|(
name|n
operator|>
literal|0
condition|)
block|{
name|half
operator|=
name|n
operator|>>
literal|1
expr_stmt|;
name|middle
operator|=
name|begin
operator|+
name|half
expr_stmt|;
if|if
condition|(
name|value
operator|<
operator|*
name|middle
condition|)
block|{
name|n
operator|=
name|half
expr_stmt|;
block|}
end_expr_stmt
begin_else
else|else
block|{
name|begin
operator|=
name|middle
operator|+
literal|1
expr_stmt|;
name|n
operator|-=
name|half
operator|+
literal|1
expr_stmt|;
block|}
end_else
begin_expr_stmt
unit|}     return
name|begin
expr_stmt|;
end_expr_stmt
begin_expr_stmt
unit|}  template
DECL|variable|RandomAccessIterator
DECL|variable|T
operator|<
name|typename
name|RandomAccessIterator
operator|,
name|typename
name|T
operator|,
name|typename
name|LessThan
operator|>
DECL|function|qUpperBound
name|Q_OUTOFLINE_TEMPLATE
name|RandomAccessIterator
name|qUpperBound
argument_list|(
argument|RandomAccessIterator begin
argument_list|,
argument|RandomAccessIterator end
argument_list|,
argument|const T&value
argument_list|,
argument|LessThan lessThan
argument_list|)
block|{
return|return
name|QAlgorithmsPrivate
operator|::
name|qUpperBoundHelper
argument_list|(
name|begin
argument_list|,
name|end
argument_list|,
name|value
argument_list|,
name|lessThan
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|variable|Container
name|template
operator|<
name|typename
name|Container
operator|,
name|typename
name|T
operator|>
DECL|function|qUpperBound
name|Q_OUTOFLINE_TEMPLATE
name|typename
name|Container
operator|::
name|const_iterator
name|qUpperBound
argument_list|(
argument|const Container&container
argument_list|,
argument|const T&value
argument_list|)
block|{
return|return
name|QAlgorithmsPrivate
operator|::
name|qUpperBoundHelper
argument_list|(
name|container
operator|.
name|constBegin
argument_list|()
argument_list|,
name|container
operator|.
name|constEnd
argument_list|()
argument_list|,
name|value
argument_list|,
name|qLess
operator|<
name|T
operator|>
operator|(
operator|)
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|variable|RandomAccessIterator
name|template
operator|<
name|typename
name|RandomAccessIterator
operator|,
name|typename
name|T
operator|>
DECL|function|qBinaryFind
name|Q_OUTOFLINE_TEMPLATE
name|RandomAccessIterator
name|qBinaryFind
argument_list|(
argument|RandomAccessIterator begin
argument_list|,
argument|RandomAccessIterator end
argument_list|,
argument|const T&value
argument_list|)
block|{
comment|// Implementation is duplicated from QAlgorithmsPrivate.
name|RandomAccessIterator
name|it
operator|=
name|qLowerBound
argument_list|(
name|begin
argument_list|,
name|end
argument_list|,
name|value
argument_list|)
block|;
if|if
condition|(
name|it
operator|==
name|end
operator|||
name|value
operator|<
operator|*
name|it
condition|)
return|return
name|end
return|;
end_expr_stmt
begin_return
return|return
name|it
return|;
end_return
begin_expr_stmt
unit|}  template
DECL|variable|RandomAccessIterator
DECL|variable|T
operator|<
name|typename
name|RandomAccessIterator
operator|,
name|typename
name|T
operator|,
name|typename
name|LessThan
operator|>
DECL|function|qBinaryFind
name|Q_OUTOFLINE_TEMPLATE
name|RandomAccessIterator
name|qBinaryFind
argument_list|(
argument|RandomAccessIterator begin
argument_list|,
argument|RandomAccessIterator end
argument_list|,
argument|const T&value
argument_list|,
argument|LessThan lessThan
argument_list|)
block|{
return|return
name|QAlgorithmsPrivate
operator|::
name|qBinaryFindHelper
argument_list|(
name|begin
argument_list|,
name|end
argument_list|,
name|value
argument_list|,
name|lessThan
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|variable|Container
name|template
operator|<
name|typename
name|Container
operator|,
name|typename
name|T
operator|>
DECL|function|qBinaryFind
name|Q_OUTOFLINE_TEMPLATE
name|typename
name|Container
operator|::
name|const_iterator
name|qBinaryFind
argument_list|(
argument|const Container&container
argument_list|,
argument|const T&value
argument_list|)
block|{
return|return
name|QAlgorithmsPrivate
operator|::
name|qBinaryFindHelper
argument_list|(
name|container
operator|.
name|constBegin
argument_list|()
argument_list|,
name|container
operator|.
name|constEnd
argument_list|()
argument_list|,
name|value
argument_list|,
name|qLess
operator|<
name|T
operator|>
operator|(
operator|)
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|ForwardIterator
operator|>
DECL|function|qDeleteAll
name|Q_OUTOFLINE_TEMPLATE
name|void
name|qDeleteAll
argument_list|(
argument|ForwardIterator begin
argument_list|,
argument|ForwardIterator end
argument_list|)
block|{
while|while
condition|(
name|begin
operator|!=
name|end
condition|)
block|{
name|delete
modifier|*
name|begin
decl_stmt|;
operator|++
name|begin
expr_stmt|;
block|}
end_expr_stmt
begin_expr_stmt
unit|}  template
operator|<
name|typename
name|Container
operator|>
DECL|function|qDeleteAll
specifier|inline
name|void
name|qDeleteAll
argument_list|(
argument|const Container&c
argument_list|)
block|{
name|qDeleteAll
argument_list|(
name|c
operator|.
name|begin
argument_list|()
argument_list|,
name|c
operator|.
name|end
argument_list|()
argument_list|)
block|; }
comment|/*     Warning: The contents of QAlgorithmsPrivate is not a part of the public Qt API     and may be changed from version to version or even be completely removed. */
name|namespace
name|QAlgorithmsPrivate
block|{
name|template
operator|<
name|typename
name|RandomAccessIterator
block|,
name|typename
name|T
block|,
name|typename
name|LessThan
operator|>
name|Q_OUTOFLINE_TEMPLATE
name|void
name|qSortHelper
argument_list|(
argument|RandomAccessIterator start
argument_list|,
argument|RandomAccessIterator end
argument_list|,
argument|const T&t
argument_list|,
argument|LessThan lessThan
argument_list|)
block|{
name|top
operator|:
name|int
name|span
operator|=
name|int
argument_list|(
name|end
operator|-
name|start
argument_list|)
block|;
if|if
condition|(
name|span
operator|<
literal|2
condition|)
return|return;
operator|--
name|end
block|;
name|RandomAccessIterator
name|low
operator|=
name|start
block|,
name|high
operator|=
name|end
operator|-
literal|1
block|;
name|RandomAccessIterator
name|pivot
operator|=
name|start
operator|+
name|span
operator|/
literal|2
block|;
if|if
condition|(
name|lessThan
argument_list|(
operator|*
name|end
argument_list|,
operator|*
name|start
argument_list|)
condition|)
name|qSwap
argument_list|(
operator|*
name|end
argument_list|,
operator|*
name|start
argument_list|)
expr_stmt|;
end_expr_stmt
begin_if
if|if
condition|(
name|span
operator|==
literal|2
condition|)
return|return;
end_if
begin_if
if|if
condition|(
name|lessThan
argument_list|(
operator|*
name|pivot
argument_list|,
operator|*
name|start
argument_list|)
condition|)
name|qSwap
argument_list|(
operator|*
name|pivot
argument_list|,
operator|*
name|start
argument_list|)
expr_stmt|;
end_if
begin_if
if|if
condition|(
name|lessThan
argument_list|(
operator|*
name|end
argument_list|,
operator|*
name|pivot
argument_list|)
condition|)
name|qSwap
argument_list|(
operator|*
name|end
argument_list|,
operator|*
name|pivot
argument_list|)
expr_stmt|;
end_if
begin_if
if|if
condition|(
name|span
operator|==
literal|3
condition|)
return|return;
end_if
begin_expr_stmt
name|qSwap
argument_list|(
operator|*
name|pivot
argument_list|,
operator|*
name|end
argument_list|)
expr_stmt|;
end_expr_stmt
begin_while
while|while
condition|(
name|low
operator|<
name|high
condition|)
block|{
while|while
condition|(
name|low
operator|<
name|high
operator|&&
name|lessThan
argument_list|(
operator|*
name|low
argument_list|,
operator|*
name|end
argument_list|)
condition|)
operator|++
name|low
expr_stmt|;
while|while
condition|(
name|high
operator|>
name|low
operator|&&
name|lessThan
argument_list|(
operator|*
name|end
argument_list|,
operator|*
name|high
argument_list|)
condition|)
operator|--
name|high
expr_stmt|;
if|if
condition|(
name|low
operator|<
name|high
condition|)
block|{
name|qSwap
argument_list|(
operator|*
name|low
argument_list|,
operator|*
name|high
argument_list|)
expr_stmt|;
operator|++
name|low
expr_stmt|;
operator|--
name|high
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
end_while
begin_if
if|if
condition|(
name|lessThan
argument_list|(
operator|*
name|low
argument_list|,
operator|*
name|end
argument_list|)
condition|)
operator|++
name|low
expr_stmt|;
end_if
begin_expr_stmt
name|qSwap
argument_list|(
operator|*
name|end
argument_list|,
operator|*
name|low
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|qSortHelper
argument_list|(
name|start
argument_list|,
name|low
argument_list|,
name|t
argument_list|,
name|lessThan
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|start
operator|=
name|low
operator|+
literal|1
expr_stmt|;
end_expr_stmt
begin_expr_stmt
operator|++
name|end
expr_stmt|;
end_expr_stmt
begin_goto
goto|goto
name|top
goto|;
end_goto
begin_expr_stmt
unit|}  template
operator|<
name|typename
name|RandomAccessIterator
operator|,
name|typename
name|T
operator|>
specifier|inline
name|void
name|qSortHelper
argument_list|(
argument|RandomAccessIterator begin
argument_list|,
argument|RandomAccessIterator end
argument_list|,
argument|const T&dummy
argument_list|)
block|{
name|qSortHelper
argument_list|(
name|begin
argument_list|,
name|end
argument_list|,
name|dummy
argument_list|,
name|qLess
operator|<
name|T
operator|>
operator|(
operator|)
argument_list|)
block|; }
name|template
operator|<
name|typename
name|RandomAccessIterator
operator|>
name|Q_OUTOFLINE_TEMPLATE
name|void
name|qReverse
argument_list|(
argument|RandomAccessIterator begin
argument_list|,
argument|RandomAccessIterator end
argument_list|)
block|{
operator|--
name|end
block|;
while|while
condition|(
name|begin
operator|<
name|end
condition|)
name|qSwap
argument_list|(
operator|*
name|begin
operator|++
argument_list|,
operator|*
name|end
operator|--
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|RandomAccessIterator
operator|>
name|Q_OUTOFLINE_TEMPLATE
name|void
name|qRotate
argument_list|(
argument|RandomAccessIterator begin
argument_list|,
argument|RandomAccessIterator middle
argument_list|,
argument|RandomAccessIterator end
argument_list|)
block|{
name|qReverse
argument_list|(
name|begin
argument_list|,
name|middle
argument_list|)
block|;
name|qReverse
argument_list|(
name|middle
argument_list|,
name|end
argument_list|)
block|;
name|qReverse
argument_list|(
name|begin
argument_list|,
name|end
argument_list|)
block|; }
name|template
operator|<
name|typename
name|RandomAccessIterator
operator|,
name|typename
name|T
operator|,
name|typename
name|LessThan
operator|>
name|Q_OUTOFLINE_TEMPLATE
name|void
name|qMerge
argument_list|(
argument|RandomAccessIterator begin
argument_list|,
argument|RandomAccessIterator pivot
argument_list|,
argument|RandomAccessIterator end
argument_list|,
argument|T&t
argument_list|,
argument|LessThan lessThan
argument_list|)
block|{
specifier|const
name|int
name|len1
operator|=
name|pivot
operator|-
name|begin
block|;
specifier|const
name|int
name|len2
operator|=
name|end
operator|-
name|pivot
block|;
if|if
condition|(
name|len1
operator|==
literal|0
operator|||
name|len2
operator|==
literal|0
condition|)
return|return;
end_expr_stmt
begin_if
if|if
condition|(
name|len1
operator|+
name|len2
operator|==
literal|2
condition|)
block|{
if|if
condition|(
name|lessThan
argument_list|(
operator|*
operator|(
name|begin
operator|+
literal|1
operator|)
argument_list|,
operator|*
operator|(
name|begin
operator|)
argument_list|)
condition|)
name|qSwap
argument_list|(
operator|*
name|begin
argument_list|,
operator|*
operator|(
name|begin
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
return|return;
block|}
end_if
begin_decl_stmt
name|RandomAccessIterator
name|firstCut
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|RandomAccessIterator
name|secondCut
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|int
name|len2Half
decl_stmt|;
end_decl_stmt
begin_if
if|if
condition|(
name|len1
operator|>
name|len2
condition|)
block|{
specifier|const
name|int
name|len1Half
init|=
name|len1
operator|/
literal|2
decl_stmt|;
name|firstCut
operator|=
name|begin
operator|+
name|len1Half
expr_stmt|;
name|secondCut
operator|=
name|qLowerBound
argument_list|(
name|pivot
argument_list|,
name|end
argument_list|,
operator|*
name|firstCut
argument_list|,
name|lessThan
argument_list|)
expr_stmt|;
name|len2Half
operator|=
name|secondCut
operator|-
name|pivot
expr_stmt|;
block|}
else|else
block|{
name|len2Half
operator|=
name|len2
operator|/
literal|2
expr_stmt|;
name|secondCut
operator|=
name|pivot
operator|+
name|len2Half
expr_stmt|;
name|firstCut
operator|=
name|qUpperBound
argument_list|(
name|begin
argument_list|,
name|pivot
argument_list|,
operator|*
name|secondCut
argument_list|,
name|lessThan
argument_list|)
expr_stmt|;
block|}
end_if
begin_expr_stmt
name|qRotate
argument_list|(
name|firstCut
argument_list|,
name|pivot
argument_list|,
name|secondCut
argument_list|)
expr_stmt|;
end_expr_stmt
begin_decl_stmt
specifier|const
name|RandomAccessIterator
name|newPivot
init|=
name|firstCut
operator|+
name|len2Half
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|qMerge
argument_list|(
name|begin
argument_list|,
name|firstCut
argument_list|,
name|newPivot
argument_list|,
name|t
argument_list|,
name|lessThan
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|qMerge
argument_list|(
name|newPivot
argument_list|,
name|secondCut
argument_list|,
name|end
argument_list|,
name|t
argument_list|,
name|lessThan
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
unit|}  template
operator|<
name|typename
name|RandomAccessIterator
operator|,
name|typename
name|T
operator|,
name|typename
name|LessThan
operator|>
name|Q_OUTOFLINE_TEMPLATE
name|void
name|qStableSortHelper
argument_list|(
argument|RandomAccessIterator begin
argument_list|,
argument|RandomAccessIterator end
argument_list|,
argument|const T&t
argument_list|,
argument|LessThan lessThan
argument_list|)
block|{
specifier|const
name|int
name|span
operator|=
name|end
operator|-
name|begin
block|;
if|if
condition|(
name|span
operator|<
literal|2
condition|)
return|return;
specifier|const
name|RandomAccessIterator
name|middle
operator|=
name|begin
operator|+
name|span
operator|/
literal|2
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|qStableSortHelper
argument_list|(
name|begin
argument_list|,
name|middle
argument_list|,
name|t
argument_list|,
name|lessThan
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|qStableSortHelper
argument_list|(
name|middle
argument_list|,
name|end
argument_list|,
name|t
argument_list|,
name|lessThan
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|qMerge
argument_list|(
name|begin
argument_list|,
name|middle
argument_list|,
name|end
argument_list|,
name|t
argument_list|,
name|lessThan
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
unit|}  template
operator|<
name|typename
name|RandomAccessIterator
operator|,
name|typename
name|T
operator|>
specifier|inline
name|void
name|qStableSortHelper
argument_list|(
argument|RandomAccessIterator begin
argument_list|,
argument|RandomAccessIterator end
argument_list|,
argument|const T&dummy
argument_list|)
block|{
name|qStableSortHelper
argument_list|(
name|begin
argument_list|,
name|end
argument_list|,
name|dummy
argument_list|,
name|qLess
operator|<
name|T
operator|>
operator|(
operator|)
argument_list|)
block|; }
name|template
operator|<
name|typename
name|RandomAccessIterator
operator|,
name|typename
name|T
operator|,
name|typename
name|LessThan
operator|>
name|Q_OUTOFLINE_TEMPLATE
name|RandomAccessIterator
name|qLowerBoundHelper
argument_list|(
argument|RandomAccessIterator begin
argument_list|,
argument|RandomAccessIterator end
argument_list|,
argument|const T&value
argument_list|,
argument|LessThan lessThan
argument_list|)
block|{
name|RandomAccessIterator
name|middle
block|;
name|int
name|n
operator|=
name|int
argument_list|(
name|end
operator|-
name|begin
argument_list|)
block|;
name|int
name|half
block|;
while|while
condition|(
name|n
operator|>
literal|0
condition|)
block|{
name|half
operator|=
name|n
operator|>>
literal|1
expr_stmt|;
name|middle
operator|=
name|begin
operator|+
name|half
expr_stmt|;
if|if
condition|(
name|lessThan
argument_list|(
operator|*
name|middle
argument_list|,
name|value
argument_list|)
condition|)
block|{
name|begin
operator|=
name|middle
operator|+
literal|1
expr_stmt|;
name|n
operator|-=
name|half
operator|+
literal|1
expr_stmt|;
block|}
end_expr_stmt
begin_else
else|else
block|{
name|n
operator|=
name|half
expr_stmt|;
block|}
end_else
begin_expr_stmt
unit|}     return
name|begin
expr_stmt|;
end_expr_stmt
begin_expr_stmt
unit|}   template
operator|<
name|typename
name|RandomAccessIterator
operator|,
name|typename
name|T
operator|,
name|typename
name|LessThan
operator|>
name|Q_OUTOFLINE_TEMPLATE
name|RandomAccessIterator
name|qUpperBoundHelper
argument_list|(
argument|RandomAccessIterator begin
argument_list|,
argument|RandomAccessIterator end
argument_list|,
argument|const T&value
argument_list|,
argument|LessThan lessThan
argument_list|)
block|{
name|RandomAccessIterator
name|middle
block|;
name|int
name|n
operator|=
name|end
operator|-
name|begin
block|;
name|int
name|half
block|;
while|while
condition|(
name|n
operator|>
literal|0
condition|)
block|{
name|half
operator|=
name|n
operator|>>
literal|1
expr_stmt|;
name|middle
operator|=
name|begin
operator|+
name|half
expr_stmt|;
if|if
condition|(
name|lessThan
argument_list|(
name|value
argument_list|,
operator|*
name|middle
argument_list|)
condition|)
block|{
name|n
operator|=
name|half
expr_stmt|;
block|}
end_expr_stmt
begin_else
else|else
block|{
name|begin
operator|=
name|middle
operator|+
literal|1
expr_stmt|;
name|n
operator|-=
name|half
operator|+
literal|1
expr_stmt|;
block|}
end_else
begin_expr_stmt
unit|}     return
name|begin
expr_stmt|;
end_expr_stmt
begin_expr_stmt
unit|}  template
operator|<
name|typename
name|RandomAccessIterator
operator|,
name|typename
name|T
operator|,
name|typename
name|LessThan
operator|>
name|Q_OUTOFLINE_TEMPLATE
name|RandomAccessIterator
name|qBinaryFindHelper
argument_list|(
argument|RandomAccessIterator begin
argument_list|,
argument|RandomAccessIterator end
argument_list|,
argument|const T&value
argument_list|,
argument|LessThan lessThan
argument_list|)
block|{
name|RandomAccessIterator
name|it
operator|=
name|qLowerBoundHelper
argument_list|(
name|begin
argument_list|,
name|end
argument_list|,
name|value
argument_list|,
name|lessThan
argument_list|)
block|;
if|if
condition|(
name|it
operator|==
name|end
operator|||
name|lessThan
argument_list|(
name|value
argument_list|,
operator|*
name|it
argument_list|)
condition|)
return|return
name|end
return|;
end_expr_stmt
begin_return
return|return
name|it
return|;
end_return
begin_comment
unit|}  }
comment|//namespace QAlgorithmsPrivate
end_comment
begin_expr_stmt
name|QT_END_NAMESPACE
name|QT_END_HEADER
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QALGORITHMS_H
end_comment
end_unit
