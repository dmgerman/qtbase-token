begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QARRAYDATA_H
end_ifndef
begin_define
DECL|macro|QARRAYDATA_H
define|#
directive|define
name|QARRAYDATA_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qrefcount.h>
end_include
begin_decl_stmt
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
DECL|function|QT_MODULE
name|QT_MODULE
argument_list|(
name|Core
argument_list|)
decl|struct
name|Q_CORE_EXPORT
name|QArrayData
block|{
name|QtPrivate
operator|::
name|RefCount
name|ref
expr_stmt|;
name|int
name|size
decl_stmt|;
name|uint
name|alloc
range|:
literal|31
decl_stmt|;
name|uint
name|capacityReserved
range|:
literal|1
decl_stmt|;
name|qptrdiff
name|offset
decl_stmt|;
comment|// in bytes from beginning of header
name|void
modifier|*
name|data
parameter_list|()
block|{
name|Q_ASSERT
argument_list|(
name|size
operator|==
literal|0
operator|||
name|offset
operator|<
literal|0
operator|||
name|size_t
argument_list|(
name|offset
argument_list|)
operator|>=
sizeof|sizeof
argument_list|(
name|QArrayData
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|reinterpret_cast
operator|<
name|char
operator|*
operator|>
operator|(
name|this
operator|)
operator|+
name|offset
return|;
block|}
specifier|const
name|void
operator|*
name|data
argument_list|()
specifier|const
block|{
name|Q_ASSERT
argument_list|(
name|size
operator|==
literal|0
operator|||
name|offset
operator|<
literal|0
operator|||
name|size_t
argument_list|(
name|offset
argument_list|)
operator|>=
sizeof|sizeof
argument_list|(
name|QArrayData
argument_list|)
argument_list|)
block|;
return|return
name|reinterpret_cast
operator|<
specifier|const
name|char
operator|*
operator|>
operator|(
name|this
operator|)
operator|+
name|offset
return|;
block|}
specifier|static
name|QArrayData
modifier|*
name|allocate
argument_list|(
name|size_t
name|objectSize
argument_list|,
name|size_t
name|alignment
argument_list|,
name|size_t
name|capacity
argument_list|,
name|bool
name|reserve
argument_list|,
name|bool
name|sharable
argument_list|)
name|Q_REQUIRED_RESULT
decl_stmt|;
specifier|static
name|void
name|deallocate
parameter_list|(
name|QArrayData
modifier|*
name|data
parameter_list|,
name|size_t
name|objectSize
parameter_list|,
name|size_t
name|alignment
parameter_list|)
function_decl|;
specifier|static
specifier|const
name|QArrayData
name|shared_null
decl_stmt|;
specifier|static
specifier|const
name|QArrayData
name|shared_empty
decl_stmt|;
specifier|static
specifier|const
name|QArrayData
name|unsharable_empty
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
expr|struct
name|QTypedArrayData
DECL|struct|QArrayData
operator|:
name|QArrayData
block|{
DECL|typedef|iterator
typedef|typedef
name|T
modifier|*
name|iterator
typedef|;
end_expr_stmt
begin_typedef
DECL|typedef|const_iterator
typedef|typedef
specifier|const
name|T
modifier|*
name|const_iterator
typedef|;
end_typedef
begin_function
DECL|function|data
name|T
modifier|*
name|data
parameter_list|()
block|{
return|return
name|static_cast
operator|<
name|T
operator|*
operator|>
operator|(
name|QArrayData
operator|::
name|data
argument_list|()
operator|)
return|;
block|}
end_function
begin_expr_stmt
DECL|function|data
specifier|const
name|T
operator|*
name|data
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
specifier|const
name|T
operator|*
operator|>
operator|(
name|QArrayData
operator|::
name|data
argument_list|()
operator|)
return|;
block|}
end_expr_stmt
begin_function
DECL|function|begin
name|T
modifier|*
name|begin
parameter_list|()
block|{
return|return
name|data
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|end
name|T
modifier|*
name|end
parameter_list|()
block|{
return|return
name|data
argument_list|()
operator|+
name|size
return|;
block|}
end_function
begin_expr_stmt
DECL|function|begin
specifier|const
name|T
operator|*
name|begin
argument_list|()
specifier|const
block|{
return|return
name|data
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|end
specifier|const
name|T
operator|*
name|end
argument_list|()
specifier|const
block|{
return|return
name|data
argument_list|()
operator|+
name|size
return|;
block|}
end_expr_stmt
begin_decl_stmt
name|class
name|AlignmentDummy
block|{
name|QArrayData
name|header
decl_stmt|;
name|T
name|data
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_function
specifier|static
name|QTypedArrayData
modifier|*
name|allocate
parameter_list|(
name|size_t
name|capacity
parameter_list|,
name|bool
name|reserve
init|=
name|false
parameter_list|,
name|bool
name|sharable
init|=
name|true
parameter_list|)
function|Q_REQUIRED_RESULT
block|{
return|return
name|static_cast
operator|<
name|QTypedArrayData
operator|*
operator|>
operator|(
name|QArrayData
operator|::
name|allocate
argument_list|(
sizeof|sizeof
argument_list|(
name|T
argument_list|)
argument_list|,
name|Q_ALIGNOF
argument_list|(
name|AlignmentDummy
argument_list|)
argument_list|,
name|capacity
argument_list|,
name|reserve
argument_list|,
name|sharable
argument_list|)
operator|)
return|;
block|}
end_function
begin_function
DECL|function|deallocate
specifier|static
name|void
name|deallocate
parameter_list|(
name|QArrayData
modifier|*
name|data
parameter_list|)
block|{
name|QArrayData
operator|::
name|deallocate
argument_list|(
name|data
argument_list|,
sizeof|sizeof
argument_list|(
name|T
argument_list|)
argument_list|,
name|Q_ALIGNOF
argument_list|(
name|AlignmentDummy
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sharedNull
specifier|static
name|QTypedArrayData
modifier|*
name|sharedNull
parameter_list|()
block|{
return|return
name|static_cast
operator|<
name|QTypedArrayData
operator|*
operator|>
operator|(
name|const_cast
operator|<
name|QArrayData
operator|*
operator|>
operator|(
operator|&
name|QArrayData
operator|::
name|shared_null
operator|)
operator|)
return|;
block|}
end_function
begin_function
DECL|function|sharedEmpty
specifier|static
name|QTypedArrayData
modifier|*
name|sharedEmpty
parameter_list|()
block|{
return|return
name|static_cast
operator|<
name|QTypedArrayData
operator|*
operator|>
operator|(
name|const_cast
operator|<
name|QArrayData
operator|*
operator|>
operator|(
operator|&
name|QArrayData
operator|::
name|shared_empty
operator|)
operator|)
return|;
block|}
end_function
begin_function
DECL|function|unsharableEmpty
specifier|static
name|QTypedArrayData
modifier|*
name|unsharableEmpty
parameter_list|()
block|{
return|return
name|static_cast
operator|<
name|QTypedArrayData
operator|*
operator|>
operator|(
name|const_cast
operator|<
name|QArrayData
operator|*
operator|>
operator|(
operator|&
name|QArrayData
operator|::
name|unsharable_empty
operator|)
operator|)
return|;
block|}
end_function
begin_expr_stmt
unit|};
DECL|variable|T
name|template
operator|<
name|class
name|T
operator|,
name|size_t
name|N
operator|>
expr|struct
DECL|struct|QStaticArrayData
name|QStaticArrayData
block|{
DECL|member|header
name|QArrayData
name|header
block|;
DECL|member|data
name|T
name|data
index|[
name|N
index|]
block|; }
expr_stmt|;
end_expr_stmt
begin_define
DECL|macro|Q_STATIC_ARRAY_DATA_HEADER_INITIALIZER
define|#
directive|define
name|Q_STATIC_ARRAY_DATA_HEADER_INITIALIZER
parameter_list|(
name|type
parameter_list|,
name|size
parameter_list|)
value|{ \     Q_REFCOUNT_INITIALIZE_STATIC, size, 0, 0, \     (sizeof(QArrayData) + (Q_ALIGNOF(type) - 1)) \& ~(Q_ALIGNOF(type) - 1) }
end_define
begin_comment
unit|\
comment|/**/
end_comment
begin_expr_stmt
name|QT_END_NAMESPACE
name|QT_END_HEADER
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// include guard
end_comment
end_unit
