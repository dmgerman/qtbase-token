begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QCOLLATOR_P_H
end_ifndef
begin_define
DECL|macro|QCOLLATOR_P_H
define|#
directive|define
name|QCOLLATOR_P_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qstring.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qlocale.h>
end_include
begin_decl_stmt
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
DECL|variable|QCollatorPrivate
name|class
name|QCollatorPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_CORE_EXPORT
name|QCollator
block|{
name|public
label|:
enum|enum
name|Collation
block|{
name|Default
block|,
name|Big5Han
block|,
name|Dictionary
block|,
name|Direct
block|,
name|GB2312Han
block|,
name|PhoneBook
block|,
name|Pinyin
block|,
name|Phonetic
block|,
name|Reformed
block|,
name|Standard
block|,
name|Stroke
block|,
name|Traditional
block|,
name|UniHan
block|}
enum|;
name|QCollator
argument_list|(
argument|const QLocale&locale = QLocale()
argument_list|,
argument|QCollator::Collation collation = QCollator::Default
argument_list|)
empty_stmt|;
name|QCollator
argument_list|(
specifier|const
name|QCollator
operator|&
argument_list|)
expr_stmt|;
operator|~
name|QCollator
argument_list|()
expr_stmt|;
name|QCollator
modifier|&
name|operator
init|=
operator|(
specifier|const
name|QCollator
operator|&
operator|)
decl_stmt|;
name|void
name|setLocale
parameter_list|(
specifier|const
name|QLocale
modifier|&
name|locale
parameter_list|)
function_decl|;
name|QLocale
name|locale
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setCollation
parameter_list|(
name|Collation
name|collation
parameter_list|)
function_decl|;
name|Collation
name|collation
argument_list|()
specifier|const
expr_stmt|;
name|QString
name|identifier
argument_list|()
specifier|const
expr_stmt|;
specifier|static
name|QCollator
name|fromIdentifier
parameter_list|(
specifier|const
name|QString
modifier|&
name|identifier
parameter_list|)
function_decl|;
enum|enum
name|CasePreference
block|{
name|CasePreferenceOff
init|=
literal|0x0
block|,
name|CasePreferenceUpper
init|=
literal|0x1
block|,
name|CasePreferenceLower
init|=
literal|0x2
block|}
enum|;
name|CasePreference
name|casePreference
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setCasePreference
parameter_list|(
name|CasePreference
name|c
parameter_list|)
function_decl|;
name|void
name|setNumericMode
parameter_list|(
name|bool
name|on
parameter_list|)
function_decl|;
name|bool
name|numericMode
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setIgnorePunctuation
parameter_list|(
name|bool
name|on
parameter_list|)
function_decl|;
name|bool
name|ignorePunctuation
argument_list|()
specifier|const
expr_stmt|;
name|int
name|compare
argument_list|(
specifier|const
name|QString
operator|&
name|s1
argument_list|,
specifier|const
name|QString
operator|&
name|s2
argument_list|)
decl|const
decl_stmt|;
name|int
name|compare
argument_list|(
specifier|const
name|QStringRef
operator|&
name|s1
argument_list|,
specifier|const
name|QStringRef
operator|&
name|s2
argument_list|)
decl|const
decl_stmt|;
name|int
name|compare
argument_list|(
specifier|const
name|QChar
operator|*
name|s1
argument_list|,
name|int
name|len1
argument_list|,
specifier|const
name|QChar
operator|*
name|s2
argument_list|,
name|int
name|len2
argument_list|)
decl|const
decl_stmt|;
name|bool
name|operator
argument_list|()
operator|(
specifier|const
name|QString
operator|&
name|s1
operator|,
specifier|const
name|QString
operator|&
name|s2
operator|)
specifier|const
block|{
return|return
name|compare
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|)
operator|<
literal|0
return|;
block|}
name|QByteArray
name|sortKey
argument_list|(
specifier|const
name|QString
operator|&
name|string
argument_list|)
decl|const
decl_stmt|;
name|QStringList
name|indexCharacters
argument_list|()
specifier|const
expr_stmt|;
name|private
label|:
name|QCollatorPrivate
modifier|*
name|d
decl_stmt|;
name|void
name|detach
parameter_list|()
function_decl|;
name|void
name|init
parameter_list|()
function_decl|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_expr_stmt
name|QT_END_NAMESPACE
name|QT_END_HEADER
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QCOLLATOR_P_H
end_comment
end_unit
