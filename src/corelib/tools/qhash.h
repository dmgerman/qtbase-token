begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Copyright (C) 2015 KlarÃ¤lvdalens Datakonsult AB, a KDAB Group company, info@kdab.com, author Marc Mutz<marc.mutz@kdab.com> ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QHASH_H
end_ifndef
begin_define
DECL|macro|QHASH_H
define|#
directive|define
name|QHASH_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qchar.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qiterator.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qlist.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qrefcount.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qhashfunctions.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_COMPILER_INITIALIZER_LISTS
end_ifdef
begin_include
include|#
directive|include
file|<initializer_list>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_CC_MSVC
argument_list|)
end_if
begin_pragma
pragma|#
directive|pragma
name|warning
name|(
name|push
name|)
end_pragma
begin_pragma
pragma|#
directive|pragma
name|warning
name|(
name|disable
name|:
name|4311
name|)
end_pragma
begin_comment
comment|// disable pointer truncation warning
end_comment
begin_pragma
pragma|#
directive|pragma
name|warning
name|(
name|disable
name|:
name|4127
name|)
end_pragma
begin_comment
comment|// conditional expression is constant
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_struct
DECL|struct|QHashData
struct|struct
name|Q_CORE_EXPORT
name|QHashData
block|{
DECL|struct|Node
struct|struct
name|Node
block|{
DECL|member|next
name|Node
modifier|*
name|next
decl_stmt|;
DECL|member|h
name|uint
name|h
decl_stmt|;
block|}
struct|;
DECL|member|fakeNext
name|Node
modifier|*
name|fakeNext
decl_stmt|;
DECL|member|buckets
name|Node
modifier|*
modifier|*
name|buckets
decl_stmt|;
DECL|member|ref
name|QtPrivate
operator|::
name|RefCount
name|ref
expr_stmt|;
DECL|member|size
name|int
name|size
decl_stmt|;
DECL|member|nodeSize
name|int
name|nodeSize
decl_stmt|;
DECL|member|userNumBits
name|short
name|userNumBits
decl_stmt|;
DECL|member|numBits
name|short
name|numBits
decl_stmt|;
DECL|member|numBuckets
name|int
name|numBuckets
decl_stmt|;
DECL|member|seed
name|uint
name|seed
decl_stmt|;
DECL|member|sharable
name|uint
name|sharable
range|:
literal|1
decl_stmt|;
DECL|member|strictAlignment
name|uint
name|strictAlignment
range|:
literal|1
decl_stmt|;
DECL|member|reserved
name|uint
name|reserved
range|:
literal|30
decl_stmt|;
name|void
modifier|*
name|allocateNode
parameter_list|(
name|int
name|nodeAlign
parameter_list|)
function_decl|;
name|void
name|freeNode
parameter_list|(
name|void
modifier|*
name|node
parameter_list|)
function_decl|;
name|QHashData
modifier|*
name|detach_helper
parameter_list|(
name|void
function_decl|(
modifier|*
name|node_duplicate
function_decl|)
parameter_list|(
name|Node
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
parameter_list|,
name|void
function_decl|(
modifier|*
name|node_delete
function_decl|)
parameter_list|(
name|Node
modifier|*
parameter_list|)
parameter_list|,
name|int
name|nodeSize
parameter_list|,
name|int
name|nodeAlign
parameter_list|)
function_decl|;
name|bool
name|willGrow
parameter_list|()
function_decl|;
name|void
name|hasShrunk
parameter_list|()
function_decl|;
name|void
name|rehash
parameter_list|(
name|int
name|hint
parameter_list|)
function_decl|;
name|void
name|free_helper
parameter_list|(
name|void
function_decl|(
modifier|*
name|node_delete
function_decl|)
parameter_list|(
name|Node
modifier|*
parameter_list|)
parameter_list|)
function_decl|;
name|Node
modifier|*
name|firstNode
parameter_list|()
function_decl|;
ifdef|#
directive|ifdef
name|QT_QHASH_DEBUG
name|void
name|dump
parameter_list|()
function_decl|;
name|void
name|checkSanity
parameter_list|()
function_decl|;
endif|#
directive|endif
specifier|static
name|Node
modifier|*
name|nextNode
parameter_list|(
name|Node
modifier|*
name|node
parameter_list|)
function_decl|;
specifier|static
name|Node
modifier|*
name|previousNode
parameter_list|(
name|Node
modifier|*
name|node
parameter_list|)
function_decl|;
DECL|member|shared_null
specifier|static
specifier|const
name|QHashData
name|shared_null
decl_stmt|;
block|}
struct|;
end_struct
begin_expr_stmt
DECL|function|willGrow
specifier|inline
name|bool
name|QHashData
operator|::
name|willGrow
argument_list|()
block|{
if|if
condition|(
name|size
operator|>=
name|numBuckets
condition|)
block|{
name|rehash
argument_list|(
name|numBits
operator|+
literal|1
argument_list|)
expr_stmt|;
return|return
name|true
return|;
block|}
end_expr_stmt
begin_else
else|else
block|{
return|return
name|false
return|;
block|}
end_else
begin_expr_stmt
unit|}  inline
DECL|function|hasShrunk
name|void
name|QHashData
operator|::
name|hasShrunk
argument_list|()
block|{
if|if
condition|(
name|size
operator|<=
operator|(
name|numBuckets
operator|>>
literal|3
operator|)
operator|&&
name|numBits
operator|>
name|userNumBits
condition|)
block|{
name|QT_TRY
block|{
name|rehash
argument_list|(
name|qMax
argument_list|(
name|int
argument_list|(
name|numBits
argument_list|)
operator|-
literal|2
argument_list|,
name|int
argument_list|(
name|userNumBits
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QT_CATCH
argument_list|(
argument|const std::bad_alloc&
argument_list|)
block|{
comment|// ignore bad allocs - shrinking shouldn't throw. rehash is exception safe.
block|}
end_expr_stmt
begin_expr_stmt
unit|} }
DECL|function|firstNode
specifier|inline
name|QHashData
operator|::
name|Node
operator|*
name|QHashData
operator|::
name|firstNode
argument_list|()
block|{
name|Node
operator|*
name|e
operator|=
name|reinterpret_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|this
operator|)
block|;
name|Node
operator|*
operator|*
name|bucket
operator|=
name|buckets
block|;
name|int
name|n
operator|=
name|numBuckets
block|;
while|while
condition|(
name|n
operator|--
condition|)
block|{
if|if
condition|(
operator|*
name|bucket
operator|!=
name|e
condition|)
return|return
operator|*
name|bucket
return|;
operator|++
name|bucket
expr_stmt|;
block|}
end_expr_stmt
begin_return
return|return
name|e
return|;
end_return
begin_macro
unit|}  struct
DECL|struct|QHashDummyValue
name|QHashDummyValue
end_macro
begin_block
block|{ }
end_block
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_expr_stmt
DECL|function|operator
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QHashDummyValue
operator|&
comment|/* v1 */
operator|,
specifier|const
name|QHashDummyValue
operator|&
comment|/* v2 */
operator|)
block|{
return|return
name|true
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|Q_DECLARE_TYPEINFO
argument_list|(
name|QHashDummyValue
argument_list|,
name|Q_MOVABLE_TYPE
operator||
name|Q_DUMMY_TYPE
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|variable|Key
name|template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
expr|struct
DECL|struct|QHashNode
name|QHashNode
block|{
DECL|member|next
name|QHashNode
operator|*
name|next
block|;
DECL|member|h
specifier|const
name|uint
name|h
block|;
DECL|member|key
specifier|const
name|Key
name|key
block|;
DECL|member|value
name|T
name|value
block|;
DECL|function|QHashNode
specifier|inline
name|QHashNode
argument_list|(
argument|const Key&key0
argument_list|,
argument|const T&value0
argument_list|,
argument|uint hash
argument_list|,
argument|QHashNode *n
argument_list|)
operator|:
name|next
argument_list|(
name|n
argument_list|)
block|,
name|h
argument_list|(
name|hash
argument_list|)
block|,
name|key
argument_list|(
name|key0
argument_list|)
block|,
name|value
argument_list|(
argument|value0
argument_list|)
block|{}
DECL|function|same_key
specifier|inline
name|bool
name|same_key
argument_list|(
argument|uint h0
argument_list|,
argument|const Key&key0
argument_list|)
specifier|const
block|{
return|return
name|h0
operator|==
name|h
operator|&&
name|key0
operator|==
name|key
return|;
block|}
DECL|member|private
name|private
operator|:
name|Q_DISABLE_COPY
argument_list|(
argument|QHashNode
argument_list|)
end_expr_stmt
begin_comment
unit|};
comment|// Specialize for QHashDummyValue in order to save some memory
end_comment
begin_expr_stmt
name|template
operator|<
name|class
name|Key
operator|>
expr|struct
DECL|member|Key
DECL|struct|QHashDummyValue
name|QHashNode
operator|<
name|Key
operator|,
name|QHashDummyValue
operator|>
block|{
expr|union
block|{
DECL|member|next
name|QHashNode
operator|*
name|next
block|;
DECL|member|value
name|QHashDummyValue
name|value
block|;     }
block|;
DECL|member|h
specifier|const
name|uint
name|h
block|;
DECL|member|key
specifier|const
name|Key
name|key
block|;
DECL|function|QHashNode
specifier|inline
name|QHashNode
argument_list|(
argument|const Key&key0
argument_list|,
argument|const QHashDummyValue&
argument_list|,
argument|uint hash
argument_list|,
argument|QHashNode *n
argument_list|)
operator|:
name|next
argument_list|(
name|n
argument_list|)
block|,
name|h
argument_list|(
name|hash
argument_list|)
block|,
name|key
argument_list|(
argument|key0
argument_list|)
block|{}
DECL|function|same_key
specifier|inline
name|bool
name|same_key
argument_list|(
argument|uint h0
argument_list|,
argument|const Key&key0
argument_list|)
specifier|const
block|{
return|return
name|h0
operator|==
name|h
operator|&&
name|key0
operator|==
name|key
return|;
block|}
DECL|member|private
name|private
operator|:
name|Q_DISABLE_COPY
argument_list|(
argument|QHashNode
argument_list|)
end_expr_stmt
begin_if
unit|};
if|#
directive|if
literal|0
end_if
begin_comment
comment|// ###
end_comment
begin_comment
comment|// The introduction of the QHash random seed breaks this optimization, as it
end_comment
begin_comment
comment|// relies on qHash(int i) = i. If the hash value is salted, then the hash
end_comment
begin_comment
comment|// table becomes corrupted.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// A bit more research about whether it makes sense or not to salt integer
end_comment
begin_comment
comment|// keys (and in general keys whose hash value is easy to invert)
end_comment
begin_comment
comment|// is needed, or about how keep this optimization and the seed (f.i. by
end_comment
begin_comment
comment|// specializing QHash for integer values, and re-apply the seed during lookup).
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Be aware that such changes can easily be binary incompatible, and therefore
end_comment
begin_comment
comment|// cannot be made during the Qt 5 lifetime.
end_comment
begin_define
define|#
directive|define
name|Q_HASH_DECLARE_INT_NODES
parameter_list|(
name|key_type
parameter_list|)
define|\
value|template<class T> \     struct QHashDummyNode<key_type, T> { \         QHashDummyNode *next; \         union { uint h; key_type key; }; \ \         inline QHashDummyNode(key_type
comment|/* key0 */
value|) {} \     }; \ \     template<class T> \     struct QHashNode<key_type, T> { \         QHashNode *next; \         union { uint h; key_type key; }; \         T value; \ \         inline QHashNode(key_type
comment|/* key0 */
value|) {} \         inline QHashNode(key_type
comment|/* key0 */
value|, const T&value0) : value(value0) {} \         inline bool same_key(uint h0, key_type) const { return h0 == h; } \     }
end_define
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_BYTE_ORDER
argument_list|)
operator|&&
name|Q_BYTE_ORDER
operator|==
name|Q_LITTLE_ENDIAN
end_if
begin_endif
unit|Q_HASH_DECLARE_INT_NODES(short); Q_HASH_DECLARE_INT_NODES(ushort);
endif|#
directive|endif
end_endif
begin_undef
unit|Q_HASH_DECLARE_INT_NODES(int); Q_HASH_DECLARE_INT_NODES(uint);
undef|#
directive|undef
name|Q_HASH_DECLARE_INT_NODES
end_undef
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// #if 0
end_comment
begin_expr_stmt
DECL|member|Key
name|template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
name|class
name|QHash
block|{
typedef|typedef
name|QHashNode
operator|<
name|Key
operator|,
name|T
operator|>
name|Node
expr_stmt|;
block|union
block|{
name|QHashData
operator|*
name|d
block|;
name|QHashNode
operator|<
name|Key
block|,
name|T
operator|>
operator|*
name|e
block|;     }
expr_stmt|;
end_expr_stmt
begin_decl_stmt
specifier|static
specifier|inline
name|Node
modifier|*
name|concrete
argument_list|(
name|QHashData
operator|::
name|Node
operator|*
name|node
argument_list|)
block|{
return|return
name|reinterpret_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|node
operator|)
return|;
block|}
end_decl_stmt
begin_function
specifier|static
specifier|inline
name|int
name|alignOfNode
parameter_list|()
block|{
return|return
name|qMax
operator|<
name|int
operator|>
operator|(
sizeof|sizeof
argument_list|(
name|void
operator|*
argument_list|)
operator|,
name|Q_ALIGNOF
argument_list|(
name|Node
argument_list|)
operator|)
return|;
block|}
end_function
begin_label
name|public
label|:
end_label
begin_expr_stmt
specifier|inline
name|QHash
argument_list|()
name|Q_DECL_NOTHROW
operator|:
name|d
argument_list|(
argument|const_cast<QHashData *>(&QHashData::shared_null)
argument_list|)
block|{ }
ifdef|#
directive|ifdef
name|Q_COMPILER_INITIALIZER_LISTS
specifier|inline
name|QHash
argument_list|(
name|std
operator|::
name|initializer_list
operator|<
name|std
operator|::
name|pair
operator|<
name|Key
argument_list|,
name|T
operator|>
expr|>
name|list
argument_list|)
operator|:
name|d
argument_list|(
argument|const_cast<QHashData *>(&QHashData::shared_null)
argument_list|)
block|{
name|reserve
argument_list|(
name|int
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
block|;
for|for
control|(
name|typename
name|std
operator|::
name|initializer_list
operator|<
name|std
operator|::
name|pair
operator|<
name|Key
operator|,
name|T
operator|>
expr|>
operator|::
name|const_iterator
name|it
operator|=
name|list
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|list
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
name|insert
argument_list|(
name|it
operator|->
name|first
argument_list|,
name|it
operator|->
name|second
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
name|QHash
argument_list|(
specifier|const
name|QHash
operator|&
name|other
argument_list|)
operator|:
name|d
argument_list|(
argument|other.d
argument_list|)
block|{
name|d
operator|->
name|ref
operator|.
name|ref
argument_list|()
block|;
if|if
condition|(
operator|!
name|d
operator|->
name|sharable
condition|)
name|detach
argument_list|()
expr_stmt|;
block|}
end_expr_stmt
begin_expr_stmt
operator|~
name|QHash
argument_list|()
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|ref
operator|.
name|deref
argument_list|()
condition|)
name|freeData
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_decl_stmt
name|QHash
modifier|&
name|operator
init|=
operator|(
specifier|const
name|QHash
operator|&
name|other
operator|)
decl_stmt|;
end_decl_stmt
begin_ifdef
ifdef|#
directive|ifdef
name|Q_COMPILER_RVALUE_REFS
end_ifdef
begin_macro
name|QHash
argument_list|(
argument|QHash&&other
argument_list|)
end_macro
begin_label
name|Q_DECL_NOTHROW
label|:
end_label
begin_macro
name|d
argument_list|(
argument|other.d
argument_list|)
end_macro
begin_block
block|{
name|other
operator|.
name|d
operator|=
name|const_cast
operator|<
name|QHashData
operator|*
operator|>
operator|(
operator|&
name|QHashData
operator|::
name|shared_null
operator|)
expr_stmt|;
block|}
end_block
begin_decl_stmt
name|QHash
modifier|&
name|operator
init|=
operator|(
name|QHash
operator|&&
name|other
operator|)
name|Q_DECL_NOTHROW
block|{
name|QHash
name|moved
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|other
argument_list|)
argument_list|)
block|;
name|swap
argument_list|(
name|moved
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_function
name|void
name|swap
parameter_list|(
name|QHash
modifier|&
name|other
parameter_list|)
function|Q_DECL_NOTHROW
block|{
name|qSwap
argument_list|(
name|d
argument_list|,
name|other
operator|.
name|d
argument_list|)
expr_stmt|;
block|}
end_function
begin_expr_stmt
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QHash
operator|&
name|other
operator|)
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|QHash
operator|&
name|other
operator|)
specifier|const
block|{
return|return
operator|!
operator|(
operator|*
name|this
operator|==
name|other
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|int
name|size
argument_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|size
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|isEmpty
argument_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|size
operator|==
literal|0
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|int
name|capacity
argument_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|numBuckets
return|;
block|}
end_expr_stmt
begin_function_decl
name|void
name|reserve
parameter_list|(
name|int
name|size
parameter_list|)
function_decl|;
end_function_decl
begin_function
specifier|inline
name|void
name|squeeze
parameter_list|()
block|{
name|reserve
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
specifier|inline
name|void
name|detach
parameter_list|()
block|{
if|if
condition|(
name|d
operator|->
name|ref
operator|.
name|isShared
argument_list|()
condition|)
name|detach_helper
argument_list|()
expr_stmt|;
block|}
end_function
begin_expr_stmt
specifier|inline
name|bool
name|isDetached
argument_list|()
specifier|const
block|{
return|return
operator|!
name|d
operator|->
name|ref
operator|.
name|isShared
argument_list|()
return|;
block|}
end_expr_stmt
begin_if
if|#
directive|if
name|QT_SUPPORTS
argument_list|(
name|UNSHARABLE_CONTAINERS
argument_list|)
end_if
begin_function
specifier|inline
name|void
name|setSharable
parameter_list|(
name|bool
name|sharable
parameter_list|)
block|{
if|if
condition|(
operator|!
name|sharable
condition|)
name|detach
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|!=
operator|&
name|QHashData
operator|::
name|shared_null
condition|)
name|d
operator|->
name|sharable
operator|=
name|sharable
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|bool
name|isSharedWith
argument_list|(
specifier|const
name|QHash
operator|&
name|other
argument_list|)
decl|const
block|{
return|return
name|d
operator|==
name|other
operator|.
name|d
return|;
block|}
end_decl_stmt
begin_function_decl
name|void
name|clear
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|int
name|remove
parameter_list|(
specifier|const
name|Key
modifier|&
name|key
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|T
name|take
parameter_list|(
specifier|const
name|Key
modifier|&
name|key
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
name|bool
name|contains
argument_list|(
specifier|const
name|Key
operator|&
name|key
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|const
name|Key
name|key
argument_list|(
specifier|const
name|T
operator|&
name|value
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|const
name|Key
name|key
argument_list|(
specifier|const
name|T
operator|&
name|value
argument_list|,
specifier|const
name|Key
operator|&
name|defaultKey
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|const
name|T
name|value
argument_list|(
specifier|const
name|Key
operator|&
name|key
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|const
name|T
name|value
argument_list|(
specifier|const
name|Key
operator|&
name|key
argument_list|,
specifier|const
name|T
operator|&
name|defaultValue
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_function_decl
name|T
modifier|&
name|operator
function_decl|[]
parameter_list|(
specifier|const
name|Key
modifier|&
name|key
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
specifier|const
name|T
name|operator
index|[]
argument_list|(
specifier|const
name|Key
operator|&
name|key
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|QList
operator|<
name|Key
operator|>
name|uniqueKeys
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QList
operator|<
name|Key
operator|>
name|keys
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QList
operator|<
name|Key
operator|>
name|keys
argument_list|(
argument|const T&value
argument_list|)
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QList
operator|<
name|T
operator|>
name|values
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QList
operator|<
name|T
operator|>
name|values
argument_list|(
argument|const Key&key
argument_list|)
specifier|const
expr_stmt|;
end_expr_stmt
begin_function
name|int
name|count
parameter_list|(
specifier|const
name|Key
modifier|&
name|key
parameter_list|)
function|const;
end_function
begin_decl_stmt
name|class
name|const_iterator
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|iterator
block|{
name|friend
name|class
name|const_iterator
decl_stmt|;
name|friend
name|class
name|QHash
operator|<
name|Key
operator|,
name|T
operator|>
expr_stmt|;
name|QHashData
operator|::
name|Node
operator|*
name|i
expr_stmt|;
name|public
label|:
typedef|typedef
name|std
operator|::
name|bidirectional_iterator_tag
name|iterator_category
expr_stmt|;
typedef|typedef
name|qptrdiff
name|difference_type
typedef|;
typedef|typedef
name|T
name|value_type
typedef|;
typedef|typedef
name|T
modifier|*
name|pointer
typedef|;
typedef|typedef
name|T
modifier|&
name|reference
typedef|;
specifier|inline
name|iterator
argument_list|()
operator|:
name|i
argument_list|(
argument|Q_NULLPTR
argument_list|)
block|{ }
name|explicit
specifier|inline
name|iterator
argument_list|(
name|void
operator|*
name|node
argument_list|)
operator|:
name|i
argument_list|(
argument|reinterpret_cast<QHashData::Node *>(node)
argument_list|)
block|{ }
specifier|inline
specifier|const
name|Key
operator|&
name|key
argument_list|()
specifier|const
block|{
return|return
name|concrete
argument_list|(
name|i
argument_list|)
operator|->
name|key
return|;
block|}
specifier|inline
name|T
operator|&
name|value
argument_list|()
specifier|const
block|{
return|return
name|concrete
argument_list|(
name|i
argument_list|)
operator|->
name|value
return|;
block|}
specifier|inline
name|T
operator|&
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
name|concrete
argument_list|(
name|i
argument_list|)
operator|->
name|value
return|;
block|}
specifier|inline
name|T
operator|*
name|operator
operator|->
expr|(
block|)
decl|const
block|{
return|return
operator|&
name|concrete
argument_list|(
name|i
argument_list|)
operator|->
name|value
return|;
block|}
end_decl_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|iterator
operator|&
name|o
operator|)
specifier|const
block|{
return|return
name|i
operator|==
name|o
operator|.
name|i
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|iterator
operator|&
name|o
operator|)
specifier|const
block|{
return|return
name|i
operator|!=
name|o
operator|.
name|i
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|iterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
name|i
operator|=
name|QHashData
operator|::
name|nextNode
argument_list|(
name|i
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|iterator
name|operator
operator|++
operator|(
name|int
operator|)
block|{
name|iterator
name|r
operator|=
operator|*
name|this
block|;
name|i
operator|=
name|QHashData
operator|::
name|nextNode
argument_list|(
name|i
argument_list|)
block|;
return|return
name|r
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|iterator
operator|&
name|operator
operator|--
operator|(
operator|)
block|{
name|i
operator|=
name|QHashData
operator|::
name|previousNode
argument_list|(
name|i
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|iterator
name|operator
operator|--
operator|(
name|int
operator|)
block|{
name|iterator
name|r
operator|=
operator|*
name|this
block|;
name|i
operator|=
name|QHashData
operator|::
name|previousNode
argument_list|(
name|i
argument_list|)
block|;
return|return
name|r
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|iterator
name|operator
operator|+
operator|(
name|int
name|j
operator|)
specifier|const
block|{
name|iterator
name|r
operator|=
operator|*
name|this
block|;
if|if
condition|(
name|j
operator|>
literal|0
condition|)
while|while
condition|(
name|j
operator|--
condition|)
operator|++
name|r
expr_stmt|;
else|else
while|while
condition|(
name|j
operator|++
condition|)
operator|--
name|r
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|r
return|;
end_return
begin_expr_stmt
unit|}         inline
name|iterator
name|operator
operator|-
operator|(
name|int
name|j
operator|)
specifier|const
block|{
return|return
name|operator
operator|+
operator|(
operator|-
name|j
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|iterator
operator|&
name|operator
operator|+=
operator|(
name|int
name|j
operator|)
block|{
return|return
operator|*
name|this
operator|=
operator|*
name|this
operator|+
name|j
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|iterator
operator|&
name|operator
operator|-=
operator|(
name|int
name|j
operator|)
block|{
return|return
operator|*
name|this
operator|=
operator|*
name|this
operator|-
name|j
return|;
block|}
end_expr_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_STRICT_ITERATORS
end_ifndef
begin_label
name|public
label|:
end_label
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|const_iterator
operator|&
name|o
operator|)
specifier|const
block|{
return|return
name|i
operator|==
name|o
operator|.
name|i
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|const_iterator
operator|&
name|o
operator|)
specifier|const
block|{
return|return
name|i
operator|!=
name|o
operator|.
name|i
return|;
block|}
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
unit|};
name|friend
name|class
name|iterator
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|const_iterator
block|{
name|friend
name|class
name|iterator
decl_stmt|;
name|friend
name|class
name|QSet
operator|<
name|Key
operator|>
expr_stmt|;
name|QHashData
operator|::
name|Node
operator|*
name|i
expr_stmt|;
name|public
label|:
typedef|typedef
name|std
operator|::
name|bidirectional_iterator_tag
name|iterator_category
expr_stmt|;
typedef|typedef
name|qptrdiff
name|difference_type
typedef|;
typedef|typedef
name|T
name|value_type
typedef|;
typedef|typedef
specifier|const
name|T
modifier|*
name|pointer
typedef|;
typedef|typedef
specifier|const
name|T
modifier|&
name|reference
typedef|;
specifier|inline
name|const_iterator
argument_list|()
operator|:
name|i
argument_list|(
argument|Q_NULLPTR
argument_list|)
block|{ }
name|explicit
specifier|inline
name|const_iterator
argument_list|(
name|void
operator|*
name|node
argument_list|)
operator|:
name|i
argument_list|(
argument|reinterpret_cast<QHashData::Node *>(node)
argument_list|)
block|{ }
ifdef|#
directive|ifdef
name|QT_STRICT_ITERATORS
name|explicit
specifier|inline
name|const_iterator
argument_list|(
argument|const iterator&o
argument_list|)
else|#
directive|else
specifier|inline
name|const_iterator
argument_list|(
argument|const iterator&o
argument_list|)
endif|#
directive|endif
block|{
name|i
operator|=
name|o
operator|.
name|i
block|; }
specifier|inline
specifier|const
name|Key
operator|&
name|key
argument_list|()
specifier|const
block|{
return|return
name|concrete
argument_list|(
name|i
argument_list|)
operator|->
name|key
return|;
block|}
specifier|inline
specifier|const
name|T
operator|&
name|value
argument_list|()
specifier|const
block|{
return|return
name|concrete
argument_list|(
name|i
argument_list|)
operator|->
name|value
return|;
block|}
specifier|inline
specifier|const
name|T
operator|&
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
name|concrete
argument_list|(
name|i
argument_list|)
operator|->
name|value
return|;
block|}
specifier|inline
specifier|const
name|T
operator|*
name|operator
operator|->
expr|(
block|)
decl|const
block|{
return|return
operator|&
name|concrete
argument_list|(
name|i
argument_list|)
operator|->
name|value
return|;
block|}
end_decl_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|const_iterator
operator|&
name|o
operator|)
specifier|const
block|{
return|return
name|i
operator|==
name|o
operator|.
name|i
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|const_iterator
operator|&
name|o
operator|)
specifier|const
block|{
return|return
name|i
operator|!=
name|o
operator|.
name|i
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|const_iterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
name|i
operator|=
name|QHashData
operator|::
name|nextNode
argument_list|(
name|i
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|const_iterator
name|operator
operator|++
operator|(
name|int
operator|)
block|{
name|const_iterator
name|r
operator|=
operator|*
name|this
block|;
name|i
operator|=
name|QHashData
operator|::
name|nextNode
argument_list|(
name|i
argument_list|)
block|;
return|return
name|r
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|const_iterator
operator|&
name|operator
operator|--
operator|(
operator|)
block|{
name|i
operator|=
name|QHashData
operator|::
name|previousNode
argument_list|(
name|i
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|const_iterator
name|operator
operator|--
operator|(
name|int
operator|)
block|{
name|const_iterator
name|r
operator|=
operator|*
name|this
block|;
name|i
operator|=
name|QHashData
operator|::
name|previousNode
argument_list|(
name|i
argument_list|)
block|;
return|return
name|r
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|const_iterator
name|operator
operator|+
operator|(
name|int
name|j
operator|)
specifier|const
block|{
name|const_iterator
name|r
operator|=
operator|*
name|this
block|;
if|if
condition|(
name|j
operator|>
literal|0
condition|)
while|while
condition|(
name|j
operator|--
condition|)
operator|++
name|r
expr_stmt|;
else|else
while|while
condition|(
name|j
operator|++
condition|)
operator|--
name|r
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|r
return|;
end_return
begin_expr_stmt
unit|}         inline
name|const_iterator
name|operator
operator|-
operator|(
name|int
name|j
operator|)
specifier|const
block|{
return|return
name|operator
operator|+
operator|(
operator|-
name|j
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|const_iterator
operator|&
name|operator
operator|+=
operator|(
name|int
name|j
operator|)
block|{
return|return
operator|*
name|this
operator|=
operator|*
name|this
operator|+
name|j
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|const_iterator
operator|&
name|operator
operator|-=
operator|(
name|int
name|j
operator|)
block|{
return|return
operator|*
name|this
operator|=
operator|*
name|this
operator|-
name|j
return|;
block|}
end_expr_stmt
begin_comment
comment|// ### Qt 5: not sure this is necessary anymore
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|QT_STRICT_ITERATORS
end_ifdef
begin_label
name|private
label|:
end_label
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|iterator
operator|&
name|o
operator|)
specifier|const
block|{
return|return
name|operator
operator|==
operator|(
name|const_iterator
argument_list|(
name|o
argument_list|)
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|iterator
operator|&
name|o
operator|)
specifier|const
block|{
return|return
name|operator
operator|!=
operator|(
name|const_iterator
argument_list|(
name|o
argument_list|)
operator|)
return|;
block|}
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
unit|};
name|friend
name|class
name|const_iterator
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|key_iterator
block|{
name|const_iterator
name|i
decl_stmt|;
name|public
label|:
typedef|typedef
name|typename
name|const_iterator
operator|::
name|iterator_category
name|iterator_category
expr_stmt|;
typedef|typedef
name|typename
name|const_iterator
operator|::
name|difference_type
name|difference_type
expr_stmt|;
typedef|typedef
name|Key
name|value_type
typedef|;
typedef|typedef
specifier|const
name|Key
modifier|*
name|pointer
typedef|;
typedef|typedef
specifier|const
name|Key
modifier|&
name|reference
typedef|;
name|explicit
name|key_iterator
argument_list|(
argument|const_iterator o
argument_list|)
block|:
name|i
argument_list|(
argument|o
argument_list|)
block|{ }
specifier|const
name|Key
operator|&
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
name|i
operator|.
name|key
argument_list|()
return|;
block|}
specifier|const
name|Key
operator|*
name|operator
operator|->
expr|(
block|)
decl|const
block|{
return|return
operator|&
name|i
operator|.
name|key
argument_list|()
return|;
block|}
end_decl_stmt
begin_expr_stmt
name|bool
name|operator
operator|==
operator|(
name|key_iterator
name|o
operator|)
specifier|const
block|{
return|return
name|i
operator|==
name|o
operator|.
name|i
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|bool
name|operator
operator|!=
operator|(
name|key_iterator
name|o
operator|)
specifier|const
block|{
return|return
name|i
operator|!=
name|o
operator|.
name|i
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|key_iterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
operator|++
name|i
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|key_iterator
name|operator
operator|++
operator|(
name|int
operator|)
block|{
return|return
name|key_iterator
argument_list|(
name|i
operator|++
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|key_iterator
operator|&
name|operator
operator|--
operator|(
operator|)
block|{
operator|--
name|i
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|key_iterator
name|operator
operator|--
operator|(
name|int
operator|)
block|{
return|return
name|key_iterator
argument_list|(
name|i
operator|--
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|const_iterator
name|base
argument_list|()
specifier|const
block|{
return|return
name|i
return|;
block|}
end_expr_stmt
begin_comment
unit|};
comment|// STL style
end_comment
begin_function
specifier|inline
name|iterator
name|begin
parameter_list|()
block|{
name|detach
argument_list|()
expr_stmt|;
return|return
name|iterator
argument_list|(
name|d
operator|->
name|firstNode
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_expr_stmt
specifier|inline
name|const_iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
name|const_iterator
argument_list|(
name|d
operator|->
name|firstNode
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|const_iterator
name|cbegin
argument_list|()
specifier|const
block|{
return|return
name|const_iterator
argument_list|(
name|d
operator|->
name|firstNode
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|const_iterator
name|constBegin
argument_list|()
specifier|const
block|{
return|return
name|const_iterator
argument_list|(
name|d
operator|->
name|firstNode
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|iterator
name|end
parameter_list|()
block|{
name|detach
argument_list|()
expr_stmt|;
return|return
name|iterator
argument_list|(
name|e
argument_list|)
return|;
block|}
end_function
begin_expr_stmt
specifier|inline
name|const_iterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|const_iterator
argument_list|(
name|e
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|const_iterator
name|cend
argument_list|()
specifier|const
block|{
return|return
name|const_iterator
argument_list|(
name|e
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|const_iterator
name|constEnd
argument_list|()
specifier|const
block|{
return|return
name|const_iterator
argument_list|(
name|e
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|key_iterator
name|keyBegin
argument_list|()
specifier|const
block|{
return|return
name|key_iterator
argument_list|(
name|begin
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|key_iterator
name|keyEnd
argument_list|()
specifier|const
block|{
return|return
name|key_iterator
argument_list|(
name|end
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt
begin_function_decl
name|iterator
name|erase
parameter_list|(
name|iterator
name|it
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|// more Qt
end_comment
begin_typedef
typedef|typedef
name|iterator
name|Iterator
typedef|;
end_typedef
begin_typedef
typedef|typedef
name|const_iterator
name|ConstIterator
typedef|;
end_typedef
begin_expr_stmt
specifier|inline
name|int
name|count
argument_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|size
return|;
block|}
end_expr_stmt
begin_function_decl
name|iterator
name|find
parameter_list|(
specifier|const
name|Key
modifier|&
name|key
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
name|const_iterator
name|find
argument_list|(
specifier|const
name|Key
operator|&
name|key
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|const_iterator
name|constFind
argument_list|(
specifier|const
name|Key
operator|&
name|key
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_function_decl
name|iterator
name|insert
parameter_list|(
specifier|const
name|Key
modifier|&
name|key
parameter_list|,
specifier|const
name|T
modifier|&
name|value
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|iterator
name|insertMulti
parameter_list|(
specifier|const
name|Key
modifier|&
name|key
parameter_list|,
specifier|const
name|T
modifier|&
name|value
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|QHash
modifier|&
name|unite
parameter_list|(
specifier|const
name|QHash
modifier|&
name|other
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|// STL compatibility
end_comment
begin_typedef
typedef|typedef
name|T
name|mapped_type
typedef|;
end_typedef
begin_typedef
typedef|typedef
name|Key
name|key_type
typedef|;
end_typedef
begin_typedef
typedef|typedef
name|qptrdiff
name|difference_type
typedef|;
end_typedef
begin_typedef
typedef|typedef
name|int
name|size_type
typedef|;
end_typedef
begin_expr_stmt
specifier|inline
name|bool
name|empty
argument_list|()
specifier|const
block|{
return|return
name|isEmpty
argument_list|()
return|;
block|}
end_expr_stmt
begin_ifdef
ifdef|#
directive|ifdef
name|QT_QHASH_DEBUG
end_ifdef
begin_expr_stmt
specifier|inline
name|void
name|dump
argument_list|()
specifier|const
block|{
name|d
operator|->
name|dump
argument_list|()
block|; }
specifier|inline
name|void
name|checkSanity
argument_list|()
specifier|const
block|{
name|d
operator|->
name|checkSanity
argument_list|()
block|; }
endif|#
directive|endif
name|private
operator|:
name|void
name|detach_helper
argument_list|()
expr_stmt|;
end_expr_stmt
begin_function_decl
name|void
name|freeData
parameter_list|(
name|QHashData
modifier|*
name|d
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
name|Node
modifier|*
modifier|*
name|findNode
argument_list|(
specifier|const
name|Key
operator|&
name|key
argument_list|,
name|uint
operator|*
name|hp
operator|=
name|Q_NULLPTR
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|Node
modifier|*
modifier|*
name|findNode
argument_list|(
specifier|const
name|Key
operator|&
name|key
argument_list|,
name|uint
name|h
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_function_decl
name|Node
modifier|*
name|createNode
parameter_list|(
name|uint
name|h
parameter_list|,
specifier|const
name|Key
modifier|&
name|key
parameter_list|,
specifier|const
name|T
modifier|&
name|value
parameter_list|,
name|Node
modifier|*
modifier|*
name|nextNode
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|deleteNode
parameter_list|(
name|Node
modifier|*
name|node
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
specifier|static
name|void
name|deleteNode2
argument_list|(
name|QHashData
operator|::
name|Node
operator|*
name|node
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|static
name|void
name|duplicateNode
argument_list|(
name|QHashData
operator|::
name|Node
operator|*
name|originalNode
argument_list|,
name|void
operator|*
name|newNode
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|bool
name|isValidIterator
argument_list|(
specifier|const
name|iterator
operator|&
name|it
argument_list|)
decl|const
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_DEBUG
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_HASH_NO_ITERATOR_DEBUG
argument_list|)
name|QHashData
operator|::
name|Node
operator|*
name|node
operator|=
name|it
operator|.
name|i
expr_stmt|;
while|while
condition|(
name|node
operator|->
name|next
condition|)
name|node
operator|=
name|node
operator|->
name|next
expr_stmt|;
return|return
operator|(
name|static_cast
operator|<
name|void
operator|*
operator|>
operator|(
name|node
operator|)
operator|==
name|d
operator|)
return|;
else|#
directive|else
name|Q_UNUSED
argument_list|(
name|it
argument_list|)
expr_stmt|;
return|return
name|true
return|;
endif|#
directive|endif
block|}
end_decl_stmt
begin_expr_stmt
name|friend
name|class
name|QSet
operator|<
name|Key
operator|>
expr_stmt|;
end_expr_stmt
begin_expr_stmt
unit|};
DECL|member|Key
name|template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|member|Key
DECL|function|deleteNode
name|Q_INLINE_TEMPLATE
name|void
name|QHash
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|deleteNode
argument_list|(
argument|Node *node
argument_list|)
block|{
name|deleteNode2
argument_list|(
name|reinterpret_cast
operator|<
name|QHashData
operator|::
name|Node
operator|*
operator|>
operator|(
name|node
operator|)
argument_list|)
block|;
name|d
operator|->
name|freeNode
argument_list|(
name|node
argument_list|)
block|; }
DECL|member|Key
name|template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|member|Key
DECL|function|deleteNode2
name|Q_INLINE_TEMPLATE
name|void
name|QHash
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|deleteNode2
argument_list|(
argument|QHashData::Node *node
argument_list|)
block|{
ifdef|#
directive|ifdef
name|Q_CC_BOR
name|concrete
argument_list|(
name|node
argument_list|)
operator|->
operator|~
name|QHashNode
operator|<
name|Key
block|,
name|T
operator|>
operator|(
operator|)
block|;
else|#
directive|else
name|concrete
argument_list|(
name|node
argument_list|)
operator|->
operator|~
name|Node
argument_list|()
block|;
endif|#
directive|endif
block|}
DECL|member|Key
name|template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|member|Key
DECL|function|duplicateNode
name|Q_INLINE_TEMPLATE
name|void
name|QHash
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|duplicateNode
argument_list|(
argument|QHashData::Node *node
argument_list|,
argument|void *newNode
argument_list|)
block|{
name|Node
operator|*
name|concreteNode
operator|=
name|concrete
argument_list|(
name|node
argument_list|)
block|;
name|new
argument_list|(
argument|newNode
argument_list|)
name|Node
argument_list|(
name|concreteNode
operator|->
name|key
argument_list|,
name|concreteNode
operator|->
name|value
argument_list|,
name|concreteNode
operator|->
name|h
argument_list|,
name|Q_NULLPTR
argument_list|)
block|; }
DECL|member|Key
name|template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|member|Key
name|Q_INLINE_TEMPLATE
name|typename
name|QHash
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|Node
operator|*
DECL|member|Key
DECL|function|createNode
name|QHash
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|createNode
argument_list|(
argument|uint ah
argument_list|,
argument|const Key&akey
argument_list|,
argument|const T&avalue
argument_list|,
argument|Node **anextNode
argument_list|)
block|{
name|Node
operator|*
name|node
operator|=
name|new
argument_list|(
argument|d->allocateNode(alignOfNode())
argument_list|)
name|Node
argument_list|(
name|akey
argument_list|,
name|avalue
argument_list|,
name|ah
argument_list|,
operator|*
name|anextNode
argument_list|)
block|;
operator|*
name|anextNode
operator|=
name|node
block|;
operator|++
name|d
operator|->
name|size
block|;
return|return
name|node
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|member|Key
name|template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|member|Key
DECL|member|Key
DECL|function|unite
name|Q_INLINE_TEMPLATE
name|QHash
operator|<
name|Key
operator|,
name|T
operator|>
operator|&
name|QHash
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|unite
argument_list|(
argument|const QHash&other
argument_list|)
block|{
name|QHash
name|copy
argument_list|(
name|other
argument_list|)
block|;
name|const_iterator
name|it
operator|=
name|copy
operator|.
name|constEnd
argument_list|()
block|;
while|while
condition|(
name|it
operator|!=
name|copy
operator|.
name|constBegin
argument_list|()
condition|)
block|{
operator|--
name|it
expr_stmt|;
name|insertMulti
argument_list|(
name|it
operator|.
name|key
argument_list|()
argument_list|,
name|it
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_return
return|return
operator|*
name|this
return|;
end_return
begin_expr_stmt
unit|}  template
DECL|member|Key
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|member|Key
DECL|function|freeData
name|Q_OUTOFLINE_TEMPLATE
name|void
name|QHash
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|freeData
argument_list|(
argument|QHashData *x
argument_list|)
block|{
name|x
operator|->
name|free_helper
argument_list|(
name|deleteNode2
argument_list|)
block|; }
DECL|member|Key
name|template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|member|Key
DECL|function|clear
name|Q_INLINE_TEMPLATE
name|void
name|QHash
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|clear
argument_list|()
block|{
operator|*
name|this
operator|=
name|QHash
argument_list|()
block|; }
DECL|member|Key
name|template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|member|Key
DECL|function|detach_helper
name|Q_OUTOFLINE_TEMPLATE
name|void
name|QHash
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|detach_helper
argument_list|()
block|{
name|QHashData
operator|*
name|x
operator|=
name|d
operator|->
name|detach_helper
argument_list|(
name|duplicateNode
argument_list|,
name|deleteNode2
argument_list|,
sizeof|sizeof
argument_list|(
name|Node
argument_list|)
argument_list|,
name|alignOfNode
argument_list|()
argument_list|)
block|;
if|if
condition|(
operator|!
name|d
operator|->
name|ref
operator|.
name|deref
argument_list|()
condition|)
name|freeData
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|d
operator|=
name|x
expr_stmt|;
end_expr_stmt
begin_expr_stmt
unit|}  template
DECL|member|Key
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|member|Key
DECL|member|Key
DECL|member|operator
name|Q_INLINE_TEMPLATE
name|QHash
operator|<
name|Key
operator|,
name|T
operator|>
operator|&
name|QHash
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|operator
operator|=
operator|(
specifier|const
name|QHash
operator|&
name|other
operator|)
block|{
if|if
condition|(
name|d
operator|!=
name|other
operator|.
name|d
condition|)
block|{
name|QHashData
modifier|*
name|o
init|=
name|other
operator|.
name|d
decl_stmt|;
name|o
operator|->
name|ref
operator|.
name|ref
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|ref
operator|.
name|deref
argument_list|()
condition|)
name|freeData
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|d
operator|=
name|o
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|sharable
condition|)
name|detach_helper
argument_list|()
expr_stmt|;
block|}
end_expr_stmt
begin_return
return|return
operator|*
name|this
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|member|Key
DECL|function|value
name|Q_INLINE_TEMPLATE
specifier|const
name|T
name|QHash
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|value
argument_list|(
argument|const Key&akey
argument_list|)
specifier|const
block|{
name|Node
operator|*
name|node
block|;
if|if
condition|(
name|d
operator|->
name|size
operator|==
literal|0
operator|||
operator|(
name|node
operator|=
operator|*
name|findNode
argument_list|(
name|akey
argument_list|)
operator|)
operator|==
name|e
condition|)
block|{
return|return
name|T
argument_list|()
return|;
block|}
end_expr_stmt
begin_else
else|else
block|{
return|return
name|node
operator|->
name|value
return|;
block|}
end_else
begin_expr_stmt
unit|}  template
DECL|member|Key
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|member|Key
DECL|function|value
name|Q_INLINE_TEMPLATE
specifier|const
name|T
name|QHash
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|value
argument_list|(
argument|const Key&akey
argument_list|,
argument|const T&adefaultValue
argument_list|)
specifier|const
block|{
name|Node
operator|*
name|node
block|;
if|if
condition|(
name|d
operator|->
name|size
operator|==
literal|0
operator|||
operator|(
name|node
operator|=
operator|*
name|findNode
argument_list|(
name|akey
argument_list|)
operator|)
operator|==
name|e
condition|)
block|{
return|return
name|adefaultValue
return|;
block|}
end_expr_stmt
begin_else
else|else
block|{
return|return
name|node
operator|->
name|value
return|;
block|}
end_else
begin_expr_stmt
unit|}  template
DECL|member|Key
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|member|Key
DECL|function|uniqueKeys
name|Q_OUTOFLINE_TEMPLATE
name|QList
operator|<
name|Key
operator|>
name|QHash
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|uniqueKeys
argument_list|()
specifier|const
block|{
name|QList
operator|<
name|Key
operator|>
name|res
block|;
name|res
operator|.
name|reserve
argument_list|(
name|size
argument_list|()
argument_list|)
block|;
comment|// May be too much, but assume short lifetime
name|const_iterator
name|i
operator|=
name|begin
argument_list|()
block|;
if|if
condition|(
name|i
operator|!=
name|end
argument_list|()
condition|)
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
specifier|const
name|Key
modifier|&
name|aKey
init|=
name|i
operator|.
name|key
argument_list|()
decl_stmt|;
name|res
operator|.
name|append
argument_list|(
name|aKey
argument_list|)
expr_stmt|;
do|do
block|{
if|if
condition|(
operator|++
name|i
operator|==
name|end
argument_list|()
condition|)
goto|goto
name|break_out_of_outer_loop
goto|;
block|}
end_expr_stmt
begin_while
while|while
condition|(
name|aKey
operator|==
name|i
operator|.
name|key
argument_list|()
condition|)
empty_stmt|;
end_while
begin_label
unit|}     }
name|break_out_of_outer_loop
label|:
end_label
begin_return
return|return
name|res
return|;
end_return
begin_expr_stmt
unit|}  template
DECL|member|Key
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|member|Key
DECL|function|keys
name|Q_OUTOFLINE_TEMPLATE
name|QList
operator|<
name|Key
operator|>
name|QHash
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|keys
argument_list|()
specifier|const
block|{
name|QList
operator|<
name|Key
operator|>
name|res
block|;
name|res
operator|.
name|reserve
argument_list|(
name|size
argument_list|()
argument_list|)
block|;
name|const_iterator
name|i
operator|=
name|begin
argument_list|()
block|;
while|while
condition|(
name|i
operator|!=
name|end
argument_list|()
condition|)
block|{
name|res
operator|.
name|append
argument_list|(
name|i
operator|.
name|key
argument_list|()
argument_list|)
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
end_expr_stmt
begin_return
return|return
name|res
return|;
end_return
begin_expr_stmt
unit|}  template
DECL|member|Key
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|member|Key
DECL|function|keys
name|Q_OUTOFLINE_TEMPLATE
name|QList
operator|<
name|Key
operator|>
name|QHash
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|keys
argument_list|(
argument|const T&avalue
argument_list|)
specifier|const
block|{
name|QList
operator|<
name|Key
operator|>
name|res
block|;
name|const_iterator
name|i
operator|=
name|begin
argument_list|()
block|;
while|while
condition|(
name|i
operator|!=
name|end
argument_list|()
condition|)
block|{
if|if
condition|(
name|i
operator|.
name|value
argument_list|()
operator|==
name|avalue
condition|)
name|res
operator|.
name|append
argument_list|(
name|i
operator|.
name|key
argument_list|()
argument_list|)
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
end_expr_stmt
begin_return
return|return
name|res
return|;
end_return
begin_expr_stmt
unit|}  template
DECL|member|Key
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|member|Key
DECL|function|key
name|Q_OUTOFLINE_TEMPLATE
specifier|const
name|Key
name|QHash
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|key
argument_list|(
argument|const T&avalue
argument_list|)
specifier|const
block|{
return|return
name|key
argument_list|(
name|avalue
argument_list|,
name|Key
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|member|Key
name|template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|member|Key
DECL|function|key
name|Q_OUTOFLINE_TEMPLATE
specifier|const
name|Key
name|QHash
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|key
argument_list|(
argument|const T&avalue
argument_list|,
argument|const Key&defaultValue
argument_list|)
specifier|const
block|{
name|const_iterator
name|i
operator|=
name|begin
argument_list|()
block|;
while|while
condition|(
name|i
operator|!=
name|end
argument_list|()
condition|)
block|{
if|if
condition|(
name|i
operator|.
name|value
argument_list|()
operator|==
name|avalue
condition|)
return|return
name|i
operator|.
name|key
argument_list|()
return|;
operator|++
name|i
expr_stmt|;
block|}
end_expr_stmt
begin_return
return|return
name|defaultValue
return|;
end_return
begin_expr_stmt
unit|}  template
DECL|member|Key
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|member|Key
DECL|function|values
name|Q_OUTOFLINE_TEMPLATE
name|QList
operator|<
name|T
operator|>
name|QHash
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|values
argument_list|()
specifier|const
block|{
name|QList
operator|<
name|T
operator|>
name|res
block|;
name|res
operator|.
name|reserve
argument_list|(
name|size
argument_list|()
argument_list|)
block|;
name|const_iterator
name|i
operator|=
name|begin
argument_list|()
block|;
while|while
condition|(
name|i
operator|!=
name|end
argument_list|()
condition|)
block|{
name|res
operator|.
name|append
argument_list|(
name|i
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
end_expr_stmt
begin_return
return|return
name|res
return|;
end_return
begin_expr_stmt
unit|}  template
DECL|member|Key
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|member|Key
DECL|function|values
name|Q_OUTOFLINE_TEMPLATE
name|QList
operator|<
name|T
operator|>
name|QHash
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|values
argument_list|(
argument|const Key&akey
argument_list|)
specifier|const
block|{
name|QList
operator|<
name|T
operator|>
name|res
block|;
name|Node
operator|*
name|node
operator|=
operator|*
name|findNode
argument_list|(
name|akey
argument_list|)
block|;
if|if
condition|(
name|node
operator|!=
name|e
condition|)
block|{
do|do
block|{
name|res
operator|.
name|append
argument_list|(
name|node
operator|->
name|value
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_while
while|while
condition|(
operator|(
name|node
operator|=
name|node
operator|->
name|next
operator|)
operator|!=
name|e
operator|&&
name|node
operator|->
name|key
operator|==
name|akey
condition|)
empty_stmt|;
end_while
begin_expr_stmt
unit|}     return
name|res
expr_stmt|;
end_expr_stmt
begin_expr_stmt
unit|}  template
DECL|member|Key
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|member|Key
DECL|function|count
name|Q_OUTOFLINE_TEMPLATE
name|int
name|QHash
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|count
argument_list|(
argument|const Key&akey
argument_list|)
specifier|const
block|{
name|int
name|cnt
operator|=
literal|0
block|;
name|Node
operator|*
name|node
operator|=
operator|*
name|findNode
argument_list|(
name|akey
argument_list|)
block|;
if|if
condition|(
name|node
operator|!=
name|e
condition|)
block|{
do|do
block|{
operator|++
name|cnt
expr_stmt|;
block|}
end_expr_stmt
begin_while
while|while
condition|(
operator|(
name|node
operator|=
name|node
operator|->
name|next
operator|)
operator|!=
name|e
operator|&&
name|node
operator|->
name|key
operator|==
name|akey
condition|)
empty_stmt|;
end_while
begin_expr_stmt
unit|}     return
name|cnt
expr_stmt|;
end_expr_stmt
begin_expr_stmt
unit|}  template
DECL|member|Key
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|member|Key
DECL|function|operator
name|Q_INLINE_TEMPLATE
specifier|const
name|T
name|QHash
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|operator
index|[]
operator|(
specifier|const
name|Key
operator|&
name|akey
operator|)
specifier|const
block|{
return|return
name|value
argument_list|(
name|akey
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|member|Key
name|template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|member|Key
DECL|function|operator
name|Q_INLINE_TEMPLATE
name|T
operator|&
name|QHash
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|operator
index|[]
operator|(
specifier|const
name|Key
operator|&
name|akey
operator|)
block|{
name|detach
argument_list|()
block|;
name|uint
name|h
block|;
name|Node
operator|*
operator|*
name|node
operator|=
name|findNode
argument_list|(
name|akey
argument_list|,
operator|&
name|h
argument_list|)
block|;
if|if
condition|(
operator|*
name|node
operator|==
name|e
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|willGrow
argument_list|()
condition|)
name|node
operator|=
name|findNode
argument_list|(
name|akey
argument_list|,
operator|&
name|h
argument_list|)
expr_stmt|;
return|return
name|createNode
argument_list|(
name|h
argument_list|,
name|akey
argument_list|,
name|T
argument_list|()
argument_list|,
name|node
argument_list|)
operator|->
name|value
return|;
block|}
end_expr_stmt
begin_return
return|return
operator|(
operator|*
name|node
operator|)
operator|->
name|value
return|;
end_return
begin_expr_stmt
unit|}  template
DECL|member|Key
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|member|Key
DECL|member|Key
DECL|function|insert
name|Q_INLINE_TEMPLATE
name|typename
name|QHash
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|iterator
name|QHash
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|insert
argument_list|(
argument|const Key&akey
argument_list|,
argument|const T&avalue
argument_list|)
block|{
name|detach
argument_list|()
block|;
name|uint
name|h
block|;
name|Node
operator|*
operator|*
name|node
operator|=
name|findNode
argument_list|(
name|akey
argument_list|,
operator|&
name|h
argument_list|)
block|;
if|if
condition|(
operator|*
name|node
operator|==
name|e
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|willGrow
argument_list|()
condition|)
name|node
operator|=
name|findNode
argument_list|(
name|akey
argument_list|,
operator|&
name|h
argument_list|)
expr_stmt|;
return|return
name|iterator
argument_list|(
name|createNode
argument_list|(
name|h
argument_list|,
name|akey
argument_list|,
name|avalue
argument_list|,
name|node
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt
begin_if
if|if
condition|(
operator|!
name|QtPrivate
operator|::
name|is_same
operator|<
name|T
operator|,
name|QHashDummyValue
operator|>
operator|::
name|value
condition|)
operator|(
operator|*
name|node
operator|)
operator|->
name|value
operator|=
name|avalue
expr_stmt|;
end_if
begin_return
return|return
name|iterator
argument_list|(
operator|*
name|node
argument_list|)
return|;
end_return
begin_expr_stmt
unit|}  template
DECL|member|Key
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|member|Key
DECL|member|Key
DECL|function|insertMulti
name|Q_INLINE_TEMPLATE
name|typename
name|QHash
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|iterator
name|QHash
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|insertMulti
argument_list|(
argument|const Key&akey
argument_list|,
argument|const T&avalue
argument_list|)
block|{
name|detach
argument_list|()
block|;
name|d
operator|->
name|willGrow
argument_list|()
block|;
name|uint
name|h
block|;
name|Node
operator|*
operator|*
name|nextNode
operator|=
name|findNode
argument_list|(
name|akey
argument_list|,
operator|&
name|h
argument_list|)
block|;
return|return
name|iterator
argument_list|(
name|createNode
argument_list|(
name|h
argument_list|,
name|akey
argument_list|,
name|avalue
argument_list|,
name|nextNode
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|member|Key
name|template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|member|Key
DECL|function|remove
name|Q_OUTOFLINE_TEMPLATE
name|int
name|QHash
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|remove
argument_list|(
argument|const Key&akey
argument_list|)
block|{
if|if
condition|(
name|isEmpty
argument_list|()
condition|)
comment|// prevents detaching shared null
return|return
literal|0
return|;
name|detach
argument_list|()
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|int
name|oldSize
init|=
name|d
operator|->
name|size
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|Node
modifier|*
modifier|*
name|node
init|=
name|findNode
argument_list|(
name|akey
argument_list|)
decl_stmt|;
end_decl_stmt
begin_if
if|if
condition|(
operator|*
name|node
operator|!=
name|e
condition|)
block|{
name|bool
name|deleteNext
init|=
name|true
decl_stmt|;
do|do
block|{
name|Node
modifier|*
name|next
init|=
operator|(
operator|*
name|node
operator|)
operator|->
name|next
decl_stmt|;
name|deleteNext
operator|=
operator|(
name|next
operator|!=
name|e
operator|&&
name|next
operator|->
name|key
operator|==
operator|(
operator|*
name|node
operator|)
operator|->
name|key
operator|)
expr_stmt|;
name|deleteNode
argument_list|(
operator|*
name|node
argument_list|)
expr_stmt|;
operator|*
name|node
operator|=
name|next
expr_stmt|;
operator|--
name|d
operator|->
name|size
expr_stmt|;
block|}
do|while
condition|(
name|deleteNext
condition|)
do|;
name|d
operator|->
name|hasShrunk
argument_list|()
expr_stmt|;
block|}
end_if
begin_return
return|return
name|oldSize
operator|-
name|d
operator|->
name|size
return|;
end_return
begin_expr_stmt
unit|}  template
DECL|member|Key
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|member|Key
DECL|function|take
name|Q_OUTOFLINE_TEMPLATE
name|T
name|QHash
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|take
argument_list|(
argument|const Key&akey
argument_list|)
block|{
if|if
condition|(
name|isEmpty
argument_list|()
condition|)
comment|// prevents detaching shared null
return|return
name|T
argument_list|()
return|;
name|detach
argument_list|()
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|Node
modifier|*
modifier|*
name|node
init|=
name|findNode
argument_list|(
name|akey
argument_list|)
decl_stmt|;
end_decl_stmt
begin_if
if|if
condition|(
operator|*
name|node
operator|!=
name|e
condition|)
block|{
name|T
name|t
init|=
operator|(
operator|*
name|node
operator|)
operator|->
name|value
decl_stmt|;
name|Node
modifier|*
name|next
init|=
operator|(
operator|*
name|node
operator|)
operator|->
name|next
decl_stmt|;
name|deleteNode
argument_list|(
operator|*
name|node
argument_list|)
expr_stmt|;
operator|*
name|node
operator|=
name|next
expr_stmt|;
operator|--
name|d
operator|->
name|size
expr_stmt|;
name|d
operator|->
name|hasShrunk
argument_list|()
expr_stmt|;
return|return
name|t
return|;
block|}
end_if
begin_return
return|return
name|T
argument_list|()
return|;
end_return
begin_expr_stmt
unit|}  template
DECL|member|Key
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|member|Key
DECL|member|Key
DECL|function|erase
name|Q_OUTOFLINE_TEMPLATE
name|typename
name|QHash
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|iterator
name|QHash
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|erase
argument_list|(
argument|iterator it
argument_list|)
block|{
name|Q_ASSERT_X
argument_list|(
name|isValidIterator
argument_list|(
name|it
argument_list|)
argument_list|,
literal|"QHash::erase"
argument_list|,
literal|"The specified iterator argument 'it' is invalid"
argument_list|)
block|;
if|if
condition|(
name|it
operator|==
name|iterator
argument_list|(
name|e
argument_list|)
condition|)
return|return
name|it
return|;
end_expr_stmt
begin_if
if|if
condition|(
name|d
operator|->
name|ref
operator|.
name|isShared
argument_list|()
condition|)
block|{
name|int
name|bucketNum
init|=
operator|(
name|it
operator|.
name|i
operator|->
name|h
operator|%
name|d
operator|->
name|numBuckets
operator|)
decl_stmt|;
name|iterator
name|bucketIterator
argument_list|(
operator|*
operator|(
name|d
operator|->
name|buckets
operator|+
name|bucketNum
operator|)
argument_list|)
decl_stmt|;
name|int
name|stepsFromBucketStartToIte
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|bucketIterator
operator|!=
name|it
condition|)
block|{
operator|++
name|stepsFromBucketStartToIte
expr_stmt|;
operator|++
name|bucketIterator
expr_stmt|;
block|}
name|detach
argument_list|()
expr_stmt|;
name|it
operator|=
name|iterator
argument_list|(
operator|*
operator|(
name|d
operator|->
name|buckets
operator|+
name|bucketNum
operator|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|stepsFromBucketStartToIte
operator|>
literal|0
condition|)
block|{
operator|--
name|stepsFromBucketStartToIte
expr_stmt|;
operator|++
name|it
expr_stmt|;
block|}
block|}
end_if
begin_decl_stmt
name|iterator
name|ret
init|=
name|it
decl_stmt|;
end_decl_stmt
begin_expr_stmt
operator|++
name|ret
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|Node
modifier|*
name|node
init|=
name|concrete
argument_list|(
name|it
operator|.
name|i
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|Node
modifier|*
modifier|*
name|node_ptr
init|=
name|reinterpret_cast
operator|<
name|Node
operator|*
operator|*
operator|>
operator|(
operator|&
name|d
operator|->
name|buckets
index|[
name|node
operator|->
name|h
operator|%
name|d
operator|->
name|numBuckets
index|]
operator|)
decl_stmt|;
end_decl_stmt
begin_while
while|while
condition|(
operator|*
name|node_ptr
operator|!=
name|node
condition|)
name|node_ptr
operator|=
operator|&
operator|(
operator|*
name|node_ptr
operator|)
operator|->
name|next
expr_stmt|;
end_while
begin_expr_stmt
operator|*
name|node_ptr
operator|=
name|node
operator|->
name|next
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|deleteNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
operator|--
name|d
operator|->
name|size
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|ret
return|;
end_return
begin_expr_stmt
unit|}  template
DECL|member|Key
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|member|Key
DECL|function|reserve
name|Q_INLINE_TEMPLATE
name|void
name|QHash
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|reserve
argument_list|(
argument|int asize
argument_list|)
block|{
name|detach
argument_list|()
block|;
name|d
operator|->
name|rehash
argument_list|(
operator|-
name|qMax
argument_list|(
name|asize
argument_list|,
literal|1
argument_list|)
argument_list|)
block|; }
DECL|member|Key
name|template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|member|Key
DECL|member|Key
DECL|function|find
name|Q_INLINE_TEMPLATE
name|typename
name|QHash
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|const_iterator
name|QHash
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|find
argument_list|(
argument|const Key&akey
argument_list|)
specifier|const
block|{
return|return
name|const_iterator
argument_list|(
operator|*
name|findNode
argument_list|(
name|akey
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|member|Key
name|template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|member|Key
DECL|member|Key
DECL|function|constFind
name|Q_INLINE_TEMPLATE
name|typename
name|QHash
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|const_iterator
name|QHash
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|constFind
argument_list|(
argument|const Key&akey
argument_list|)
specifier|const
block|{
return|return
name|const_iterator
argument_list|(
operator|*
name|findNode
argument_list|(
name|akey
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|member|Key
name|template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|member|Key
DECL|member|Key
DECL|function|find
name|Q_INLINE_TEMPLATE
name|typename
name|QHash
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|iterator
name|QHash
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|find
argument_list|(
argument|const Key&akey
argument_list|)
block|{
name|detach
argument_list|()
block|;
return|return
name|iterator
argument_list|(
operator|*
name|findNode
argument_list|(
name|akey
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|member|Key
name|template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|member|Key
DECL|function|contains
name|Q_INLINE_TEMPLATE
name|bool
name|QHash
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|contains
argument_list|(
argument|const Key&akey
argument_list|)
specifier|const
block|{
return|return
operator|*
name|findNode
argument_list|(
name|akey
argument_list|)
operator|!=
name|e
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|member|Key
name|template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|member|Key
DECL|member|Key
DECL|function|findNode
name|Q_OUTOFLINE_TEMPLATE
name|typename
name|QHash
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|Node
operator|*
operator|*
name|QHash
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|findNode
argument_list|(
argument|const Key&akey
argument_list|,
argument|uint h
argument_list|)
specifier|const
block|{
name|Node
operator|*
operator|*
name|node
block|;
if|if
condition|(
name|d
operator|->
name|numBuckets
condition|)
block|{
name|node
operator|=
name|reinterpret_cast
operator|<
name|Node
operator|*
operator|*
operator|>
operator|(
operator|&
name|d
operator|->
name|buckets
index|[
name|h
operator|%
name|d
operator|->
name|numBuckets
index|]
operator|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
operator|*
name|node
operator|==
name|e
operator|||
operator|(
operator|*
name|node
operator|)
operator|->
name|next
argument_list|)
expr_stmt|;
while|while
condition|(
operator|*
name|node
operator|!=
name|e
operator|&&
operator|!
operator|(
operator|*
name|node
operator|)
operator|->
name|same_key
argument_list|(
name|h
argument_list|,
name|akey
argument_list|)
condition|)
name|node
operator|=
operator|&
operator|(
operator|*
name|node
operator|)
operator|->
name|next
expr_stmt|;
block|}
end_expr_stmt
begin_else
else|else
block|{
name|node
operator|=
name|const_cast
operator|<
name|Node
operator|*
operator|*
operator|>
operator|(
name|reinterpret_cast
operator|<
specifier|const
name|Node
operator|*
specifier|const
operator|*
operator|>
operator|(
operator|&
name|e
operator|)
operator|)
expr_stmt|;
block|}
end_else
begin_return
return|return
name|node
return|;
end_return
begin_expr_stmt
unit|}  template
DECL|member|Key
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|member|Key
DECL|member|Key
DECL|function|findNode
name|Q_OUTOFLINE_TEMPLATE
name|typename
name|QHash
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|Node
operator|*
operator|*
name|QHash
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|findNode
argument_list|(
argument|const Key&akey
argument_list|,
argument|uint *ahp
argument_list|)
specifier|const
block|{
name|uint
name|h
operator|=
literal|0
block|;
if|if
condition|(
name|d
operator|->
name|numBuckets
operator|||
name|ahp
condition|)
block|{
name|h
operator|=
name|qHash
argument_list|(
name|akey
argument_list|,
name|d
operator|->
name|seed
argument_list|)
expr_stmt|;
if|if
condition|(
name|ahp
condition|)
operator|*
name|ahp
operator|=
name|h
expr_stmt|;
block|}
end_expr_stmt
begin_return
return|return
name|findNode
argument_list|(
name|akey
argument_list|,
name|h
argument_list|)
return|;
end_return
begin_expr_stmt
unit|}  template
DECL|member|Key
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|member|Key
DECL|function|operator
name|Q_OUTOFLINE_TEMPLATE
name|bool
name|QHash
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|operator
operator|==
operator|(
specifier|const
name|QHash
operator|&
name|other
operator|)
specifier|const
block|{
if|if
condition|(
name|size
argument_list|()
operator|!=
name|other
operator|.
name|size
argument_list|()
condition|)
return|return
name|false
return|;
end_expr_stmt
begin_if
if|if
condition|(
name|d
operator|==
name|other
operator|.
name|d
condition|)
return|return
name|true
return|;
end_if
begin_decl_stmt
name|const_iterator
name|it
init|=
name|begin
argument_list|()
decl_stmt|;
end_decl_stmt
begin_while
while|while
condition|(
name|it
operator|!=
name|end
argument_list|()
condition|)
block|{
specifier|const
name|Key
modifier|&
name|akey
init|=
name|it
operator|.
name|key
argument_list|()
decl_stmt|;
name|const_iterator
name|it2
init|=
name|other
operator|.
name|find
argument_list|(
name|akey
argument_list|)
decl_stmt|;
do|do
block|{
if|if
condition|(
name|it2
operator|==
name|other
operator|.
name|end
argument_list|()
operator|||
operator|!
operator|(
name|it2
operator|.
name|key
argument_list|()
operator|==
name|akey
operator|)
condition|)
return|return
name|false
return|;
if|if
condition|(
operator|!
operator|(
name|it
operator|.
name|value
argument_list|()
operator|==
name|it2
operator|.
name|value
argument_list|()
operator|)
condition|)
return|return
name|false
return|;
operator|++
name|it
expr_stmt|;
operator|++
name|it2
expr_stmt|;
block|}
do|while
condition|(
name|it
operator|!=
name|end
argument_list|()
operator|&&
name|it
operator|.
name|key
argument_list|()
operator|==
name|akey
condition|)
do|;
block|}
end_while
begin_return
return|return
name|true
return|;
end_return
begin_expr_stmt
unit|}  template
DECL|member|Key
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|member|QMultiHash
name|class
name|QMultiHash
operator|:
name|public
name|QHash
operator|<
name|Key
operator|,
name|T
operator|>
block|{
name|public
operator|:
name|QMultiHash
argument_list|()
block|{}
ifdef|#
directive|ifdef
name|Q_COMPILER_INITIALIZER_LISTS
specifier|inline
name|QMultiHash
argument_list|(
argument|std::initializer_list<std::pair<Key
argument_list|,
argument|T>> list
argument_list|)
block|{
name|this
operator|->
name|reserve
argument_list|(
name|int
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
block|;
for|for
control|(
name|typename
name|std
operator|::
name|initializer_list
operator|<
name|std
operator|::
name|pair
operator|<
name|Key
operator|,
name|T
operator|>
expr|>
operator|::
name|const_iterator
name|it
operator|=
name|list
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|list
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
name|insert
argument_list|(
name|it
operator|->
name|first
argument_list|,
name|it
operator|->
name|second
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
comment|// compiler-generated copy/move ctors/assignment operators are fine!
comment|// compiler-generated destructor is fine!
name|QMultiHash
argument_list|(
specifier|const
name|QHash
operator|<
name|Key
argument_list|,
name|T
operator|>
operator|&
name|other
argument_list|)
operator|:
name|QHash
operator|<
name|Key
operator|,
name|T
operator|>
operator|(
name|other
operator|)
block|{}
ifdef|#
directive|ifdef
name|Q_COMPILER_RVALUE_REFS
name|QMultiHash
argument_list|(
argument|QHash<Key
argument_list|,
argument|T>&&other
argument_list|)
name|Q_DECL_NOTHROW
operator|:
name|QHash
operator|<
name|Key
operator|,
name|T
operator|>
operator|(
name|std
operator|::
name|move
argument_list|(
name|other
argument_list|)
operator|)
block|{}
endif|#
directive|endif
name|void
name|swap
argument_list|(
argument|QMultiHash&other
argument_list|)
block|{
name|QHash
operator|<
name|Key
block|,
name|T
operator|>
operator|::
name|swap
argument_list|(
name|other
argument_list|)
block|; }
comment|// prevent QMultiHash<->QHash swaps
specifier|inline
name|typename
name|QHash
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|iterator
name|replace
argument_list|(
argument|const Key&key
argument_list|,
argument|const T&value
argument_list|)
block|{
return|return
name|QHash
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|insert
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|typename
name|QHash
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|iterator
name|insert
argument_list|(
argument|const Key&key
argument_list|,
argument|const T&value
argument_list|)
block|{
return|return
name|QHash
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|insertMulti
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QMultiHash
operator|&
name|operator
operator|+=
operator|(
specifier|const
name|QMultiHash
operator|&
name|other
operator|)
block|{
name|this
operator|->
name|unite
argument_list|(
name|other
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QMultiHash
name|operator
operator|+
operator|(
specifier|const
name|QMultiHash
operator|&
name|other
operator|)
specifier|const
block|{
name|QMultiHash
name|result
operator|=
operator|*
name|this
block|;
name|result
operator|+=
name|other
block|;
return|return
name|result
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|using
name|QHash
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|contains
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|using
name|QHash
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|remove
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|using
name|QHash
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|count
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|using
name|QHash
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|find
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|using
name|QHash
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|constFind
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|bool
name|contains
argument_list|(
specifier|const
name|Key
operator|&
name|key
argument_list|,
specifier|const
name|T
operator|&
name|value
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_function_decl
name|int
name|remove
parameter_list|(
specifier|const
name|Key
modifier|&
name|key
parameter_list|,
specifier|const
name|T
modifier|&
name|value
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
name|int
name|count
argument_list|(
specifier|const
name|Key
operator|&
name|key
argument_list|,
specifier|const
name|T
operator|&
name|value
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|typename
name|QHash
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|iterator
name|find
argument_list|(
argument|const Key&key
argument_list|,
argument|const T&value
argument_list|)
block|{
name|typename
name|QHash
operator|<
name|Key
block|,
name|T
operator|>
operator|::
name|iterator
name|i
argument_list|(
name|find
argument_list|(
name|key
argument_list|)
argument_list|)
block|;
name|typename
name|QHash
operator|<
name|Key
block|,
name|T
operator|>
operator|::
name|iterator
name|end
argument_list|(
name|this
operator|->
name|end
argument_list|()
argument_list|)
block|;
while|while
condition|(
name|i
operator|!=
name|end
operator|&&
name|i
operator|.
name|key
argument_list|()
operator|==
name|key
condition|)
block|{
if|if
condition|(
name|i
operator|.
name|value
argument_list|()
operator|==
name|value
condition|)
return|return
name|i
return|;
operator|++
name|i
expr_stmt|;
block|}
end_expr_stmt
begin_return
return|return
name|end
return|;
end_return
begin_expr_stmt
unit|}     typename
name|QHash
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|const_iterator
name|find
argument_list|(
argument|const Key&key
argument_list|,
argument|const T&value
argument_list|)
specifier|const
block|{
name|typename
name|QHash
operator|<
name|Key
block|,
name|T
operator|>
operator|::
name|const_iterator
name|i
argument_list|(
name|constFind
argument_list|(
name|key
argument_list|)
argument_list|)
block|;
name|typename
name|QHash
operator|<
name|Key
block|,
name|T
operator|>
operator|::
name|const_iterator
name|end
argument_list|(
name|QHash
operator|<
name|Key
argument_list|,
name|T
operator|>
operator|::
name|constEnd
argument_list|()
argument_list|)
block|;
while|while
condition|(
name|i
operator|!=
name|end
operator|&&
name|i
operator|.
name|key
argument_list|()
operator|==
name|key
condition|)
block|{
if|if
condition|(
name|i
operator|.
name|value
argument_list|()
operator|==
name|value
condition|)
return|return
name|i
return|;
operator|++
name|i
expr_stmt|;
block|}
end_expr_stmt
begin_return
return|return
name|end
return|;
end_return
begin_expr_stmt
unit|}     typename
name|QHash
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|const_iterator
name|constFind
argument_list|(
argument|const Key&key
argument_list|,
argument|const T&value
argument_list|)
specifier|const
block|{
return|return
name|find
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
end_expr_stmt
begin_label
name|private
label|:
end_label
begin_function_decl
name|T
modifier|&
name|operator
function_decl|[]
parameter_list|(
specifier|const
name|Key
modifier|&
name|key
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
specifier|const
name|T
name|operator
index|[]
argument_list|(
specifier|const
name|Key
operator|&
name|key
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_expr_stmt
unit|};
DECL|member|Key
name|template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|member|Key
DECL|function|contains
name|Q_INLINE_TEMPLATE
name|bool
name|QMultiHash
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|contains
argument_list|(
argument|const Key&key
argument_list|,
argument|const T&value
argument_list|)
specifier|const
block|{
return|return
name|constFind
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
operator|!=
name|QHash
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|constEnd
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|member|Key
name|template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|member|Key
DECL|function|remove
name|Q_INLINE_TEMPLATE
name|int
name|QMultiHash
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|remove
argument_list|(
argument|const Key&key
argument_list|,
argument|const T&value
argument_list|)
block|{
name|int
name|n
operator|=
literal|0
block|;
name|typename
name|QHash
operator|<
name|Key
block|,
name|T
operator|>
operator|::
name|iterator
name|i
argument_list|(
name|find
argument_list|(
name|key
argument_list|)
argument_list|)
block|;
name|typename
name|QHash
operator|<
name|Key
block|,
name|T
operator|>
operator|::
name|iterator
name|end
argument_list|(
name|QHash
operator|<
name|Key
argument_list|,
name|T
operator|>
operator|::
name|end
argument_list|()
argument_list|)
block|;
while|while
condition|(
name|i
operator|!=
name|end
operator|&&
name|i
operator|.
name|key
argument_list|()
operator|==
name|key
condition|)
block|{
if|if
condition|(
name|i
operator|.
name|value
argument_list|()
operator|==
name|value
condition|)
block|{
name|i
operator|=
name|this
operator|->
name|erase
argument_list|(
name|i
argument_list|)
expr_stmt|;
operator|++
name|n
expr_stmt|;
block|}
end_expr_stmt
begin_else
else|else
block|{
operator|++
name|i
expr_stmt|;
block|}
end_else
begin_expr_stmt
unit|}     return
name|n
expr_stmt|;
end_expr_stmt
begin_expr_stmt
unit|}  template
DECL|member|Key
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|member|Key
DECL|function|count
name|Q_INLINE_TEMPLATE
name|int
name|QMultiHash
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|count
argument_list|(
argument|const Key&key
argument_list|,
argument|const T&value
argument_list|)
specifier|const
block|{
name|int
name|n
operator|=
literal|0
block|;
name|typename
name|QHash
operator|<
name|Key
block|,
name|T
operator|>
operator|::
name|const_iterator
name|i
argument_list|(
name|constFind
argument_list|(
name|key
argument_list|)
argument_list|)
block|;
name|typename
name|QHash
operator|<
name|Key
block|,
name|T
operator|>
operator|::
name|const_iterator
name|end
argument_list|(
name|QHash
operator|<
name|Key
argument_list|,
name|T
operator|>
operator|::
name|constEnd
argument_list|()
argument_list|)
block|;
while|while
condition|(
name|i
operator|!=
name|end
operator|&&
name|i
operator|.
name|key
argument_list|()
operator|==
name|key
condition|)
block|{
if|if
condition|(
name|i
operator|.
name|value
argument_list|()
operator|==
name|value
condition|)
operator|++
name|n
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
end_expr_stmt
begin_return
return|return
name|n
return|;
end_return
begin_function_decl
unit|}  Q_CORE_EXPORT
name|int
name|qGlobalQHashSeed
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|Q_CORE_EXPORT
name|void
name|qSetGlobalQHashSeed
parameter_list|(
name|int
name|newSeed
parameter_list|)
function_decl|;
end_function_decl
begin_macro
name|Q_DECLARE_ASSOCIATIVE_ITERATOR
argument_list|(
argument|Hash
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_MUTABLE_ASSOCIATIVE_ITERATOR
argument_list|(
argument|Hash
argument_list|)
end_macro
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_CC_MSVC
argument_list|)
end_if
begin_pragma
pragma|#
directive|pragma
name|warning
name|(
name|pop
name|)
end_pragma
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QHASH_H
end_comment
end_unit
