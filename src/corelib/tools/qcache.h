begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QCACHE_H
end_ifndef
begin_define
DECL|macro|QCACHE_H
define|#
directive|define
name|QCACHE_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qhash.h>
end_include
begin_expr_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|Key
name|template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
name|class
name|QCache
block|{     struct
name|Node
block|{
specifier|inline
name|Node
argument_list|()
operator|:
name|keyPtr
argument_list|(
literal|0
argument_list|)
block|{}
specifier|inline
name|Node
argument_list|(
argument|T *data
argument_list|,
argument|int cost
argument_list|)
operator|:
name|keyPtr
argument_list|(
literal|0
argument_list|)
block|,
name|t
argument_list|(
name|data
argument_list|)
block|,
name|c
argument_list|(
name|cost
argument_list|)
block|,
name|p
argument_list|(
literal|0
argument_list|)
block|,
name|n
argument_list|(
literal|0
argument_list|)
block|{}
specifier|const
name|Key
operator|*
name|keyPtr
block|;
name|T
operator|*
name|t
block|;
name|int
name|c
block|;
name|Node
operator|*
name|p
block|,
operator|*
name|n
block|;     }
block|;
name|Node
operator|*
name|f
block|,
operator|*
name|l
block|;
name|QHash
operator|<
name|Key
block|,
name|Node
operator|>
name|hash
block|;
name|int
name|mx
block|,
name|total
block|;
specifier|inline
name|void
name|unlink
argument_list|(
argument|Node&n
argument_list|)
block|{
if|if
condition|(
name|n
operator|.
name|p
condition|)
name|n
operator|.
name|p
operator|->
name|n
operator|=
name|n
operator|.
name|n
expr_stmt|;
if|if
condition|(
name|n
operator|.
name|n
condition|)
name|n
operator|.
name|n
operator|->
name|p
operator|=
name|n
operator|.
name|p
expr_stmt|;
end_expr_stmt
begin_if
if|if
condition|(
name|l
operator|==
operator|&
name|n
condition|)
name|l
operator|=
name|n
operator|.
name|p
expr_stmt|;
end_if
begin_if
if|if
condition|(
name|f
operator|==
operator|&
name|n
condition|)
name|f
operator|=
name|n
operator|.
name|n
expr_stmt|;
end_if
begin_expr_stmt
name|total
operator|-=
name|n
operator|.
name|c
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|T
modifier|*
name|obj
init|=
name|n
operator|.
name|t
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|hash
operator|.
name|remove
argument_list|(
operator|*
name|n
operator|.
name|keyPtr
argument_list|)
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|delete
name|obj
decl_stmt|;
end_decl_stmt
begin_function
unit|}     inline
name|T
modifier|*
name|relink
parameter_list|(
specifier|const
name|Key
modifier|&
name|key
parameter_list|)
block|{
name|typename
name|QHash
operator|<
name|Key
operator|,
name|Node
operator|>
operator|::
name|iterator
name|i
operator|=
name|hash
operator|.
name|find
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|typename
name|QHash
operator|<
name|Key
operator|,
name|Node
operator|>
operator|::
name|const_iterator
argument_list|(
name|i
argument_list|)
operator|==
name|hash
operator|.
name|constEnd
argument_list|()
condition|)
return|return
literal|0
return|;
name|Node
modifier|&
name|n
init|=
operator|*
name|i
decl_stmt|;
if|if
condition|(
name|f
operator|!=
operator|&
name|n
condition|)
block|{
if|if
condition|(
name|n
operator|.
name|p
condition|)
name|n
operator|.
name|p
operator|->
name|n
operator|=
name|n
operator|.
name|n
expr_stmt|;
if|if
condition|(
name|n
operator|.
name|n
condition|)
name|n
operator|.
name|n
operator|->
name|p
operator|=
name|n
operator|.
name|p
expr_stmt|;
if|if
condition|(
name|l
operator|==
operator|&
name|n
condition|)
name|l
operator|=
name|n
operator|.
name|p
expr_stmt|;
name|n
operator|.
name|p
operator|=
literal|0
expr_stmt|;
name|n
operator|.
name|n
operator|=
name|f
expr_stmt|;
name|f
operator|->
name|p
operator|=
operator|&
name|n
expr_stmt|;
name|f
operator|=
operator|&
name|n
expr_stmt|;
block|}
return|return
name|n
operator|.
name|t
return|;
block|}
end_function
begin_macro
name|Q_DISABLE_COPY
argument_list|(
argument|QCache
argument_list|)
end_macro
begin_label
name|public
label|:
end_label
begin_decl_stmt
specifier|inline
name|explicit
name|QCache
argument_list|(
name|int
name|maxCost
operator|=
literal|100
argument_list|)
name|Q_DECL_NOTHROW
decl_stmt|;
end_decl_stmt
begin_expr_stmt
specifier|inline
operator|~
name|QCache
argument_list|()
block|{
name|clear
argument_list|()
block|; }
specifier|inline
name|int
name|maxCost
argument_list|()
specifier|const
block|{
return|return
name|mx
return|;
block|}
end_expr_stmt
begin_function_decl
name|void
name|setMaxCost
parameter_list|(
name|int
name|m
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
specifier|inline
name|int
name|totalCost
argument_list|()
specifier|const
block|{
return|return
name|total
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|int
name|size
argument_list|()
specifier|const
block|{
return|return
name|hash
operator|.
name|size
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|int
name|count
argument_list|()
specifier|const
block|{
return|return
name|hash
operator|.
name|size
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|isEmpty
argument_list|()
specifier|const
block|{
return|return
name|hash
operator|.
name|isEmpty
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QList
operator|<
name|Key
operator|>
name|keys
argument_list|()
specifier|const
block|{
return|return
name|hash
operator|.
name|keys
argument_list|()
return|;
block|}
end_expr_stmt
begin_function_decl
name|void
name|clear
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|bool
name|insert
parameter_list|(
specifier|const
name|Key
modifier|&
name|key
parameter_list|,
name|T
modifier|*
name|object
parameter_list|,
name|int
name|cost
init|=
literal|1
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
name|T
modifier|*
name|object
argument_list|(
specifier|const
name|Key
operator|&
name|key
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|inline
name|bool
name|contains
argument_list|(
specifier|const
name|Key
operator|&
name|key
argument_list|)
decl|const
block|{
return|return
name|hash
operator|.
name|contains
argument_list|(
name|key
argument_list|)
return|;
block|}
end_decl_stmt
begin_decl_stmt
name|T
modifier|*
name|operator
index|[]
argument_list|(
specifier|const
name|Key
operator|&
name|key
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_function_decl
name|bool
name|remove
parameter_list|(
specifier|const
name|Key
modifier|&
name|key
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|T
modifier|*
name|take
parameter_list|(
specifier|const
name|Key
modifier|&
name|key
parameter_list|)
function_decl|;
end_function_decl
begin_label
name|private
label|:
end_label
begin_function_decl
name|void
name|trim
parameter_list|(
name|int
name|m
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
unit|};
DECL|variable|Key
name|template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|variable|Key
specifier|inline
name|QCache
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|QCache
argument_list|(
argument|int amaxCost
argument_list|)
name|Q_DECL_NOTHROW
DECL|variable|amaxCost
operator|:
name|f
argument_list|(
literal|0
argument_list|)
operator|,
name|l
argument_list|(
literal|0
argument_list|)
operator|,
name|mx
argument_list|(
name|amaxCost
argument_list|)
operator|,
name|total
argument_list|(
literal|0
argument_list|)
block|{}
DECL|variable|Key
name|template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|variable|Key
DECL|function|clear
specifier|inline
name|void
name|QCache
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|clear
argument_list|()
block|{
while|while
condition|(
name|f
condition|)
block|{
name|delete
name|f
operator|->
name|t
decl_stmt|;
name|f
operator|=
name|f
operator|->
name|n
expr_stmt|;
block|}
name|hash
operator|.
name|clear
argument_list|()
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|l
operator|=
literal|0
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|total
operator|=
literal|0
expr_stmt|;
end_expr_stmt
begin_expr_stmt
unit|}  template
DECL|variable|Key
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|variable|Key
DECL|function|setMaxCost
specifier|inline
name|void
name|QCache
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|setMaxCost
argument_list|(
argument|int m
argument_list|)
block|{
name|mx
operator|=
name|m
block|;
name|trim
argument_list|(
name|mx
argument_list|)
block|; }
DECL|variable|Key
name|template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|variable|Key
DECL|function|object
specifier|inline
name|T
operator|*
name|QCache
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|object
argument_list|(
argument|const Key&key
argument_list|)
specifier|const
block|{
return|return
name|const_cast
operator|<
name|QCache
operator|<
name|Key
operator|,
name|T
operator|>
operator|*
operator|>
operator|(
name|this
operator|)
operator|->
name|relink
argument_list|(
name|key
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|variable|Key
name|template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|variable|Key
DECL|function|operator
specifier|inline
name|T
operator|*
name|QCache
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|operator
index|[]
operator|(
specifier|const
name|Key
operator|&
name|key
operator|)
specifier|const
block|{
return|return
name|object
argument_list|(
name|key
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|variable|Key
name|template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|variable|Key
DECL|function|remove
specifier|inline
name|bool
name|QCache
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|remove
argument_list|(
argument|const Key&key
argument_list|)
block|{
name|typename
name|QHash
operator|<
name|Key
block|,
name|Node
operator|>
operator|::
name|iterator
name|i
operator|=
name|hash
operator|.
name|find
argument_list|(
name|key
argument_list|)
block|;
if|if
condition|(
name|typename
name|QHash
operator|<
name|Key
operator|,
name|Node
operator|>
operator|::
name|const_iterator
argument_list|(
name|i
argument_list|)
operator|==
name|hash
operator|.
name|constEnd
argument_list|()
condition|)
block|{
return|return
name|false
return|;
block|}
end_expr_stmt
begin_else
else|else
block|{
name|unlink
argument_list|(
operator|*
name|i
argument_list|)
expr_stmt|;
return|return
name|true
return|;
block|}
end_else
begin_expr_stmt
unit|}  template
DECL|variable|Key
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|variable|Key
DECL|function|take
specifier|inline
name|T
operator|*
name|QCache
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|take
argument_list|(
argument|const Key&key
argument_list|)
block|{
name|typename
name|QHash
operator|<
name|Key
block|,
name|Node
operator|>
operator|::
name|iterator
name|i
operator|=
name|hash
operator|.
name|find
argument_list|(
name|key
argument_list|)
block|;
if|if
condition|(
name|i
operator|==
name|hash
operator|.
name|end
argument_list|()
condition|)
return|return
literal|0
return|;
name|Node
operator|&
name|n
operator|=
operator|*
name|i
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|T
modifier|*
name|t
init|=
name|n
operator|.
name|t
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|n
operator|.
name|t
operator|=
literal|0
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|unlink
argument_list|(
name|n
argument_list|)
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|t
return|;
end_return
begin_expr_stmt
unit|}  template
DECL|variable|Key
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|variable|Key
DECL|function|insert
name|bool
name|QCache
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|insert
argument_list|(
argument|const Key&akey
argument_list|,
argument|T *aobject
argument_list|,
argument|int acost
argument_list|)
block|{
name|remove
argument_list|(
name|akey
argument_list|)
block|;
if|if
condition|(
name|acost
operator|>
name|mx
condition|)
block|{
name|delete
name|aobject
decl_stmt|;
return|return
name|false
return|;
block|}
name|trim
argument_list|(
name|mx
operator|-
name|acost
argument_list|)
expr_stmt|;
end_expr_stmt
begin_function_decl
name|Node
name|sn
parameter_list|(
name|aobject
parameter_list|,
name|acost
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|typename
name|QHash
operator|<
name|Key
operator|,
name|Node
operator|>
operator|::
name|iterator
name|i
operator|=
name|hash
operator|.
name|insert
argument_list|(
name|akey
argument_list|,
name|sn
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|total
operator|+=
name|acost
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|Node
modifier|*
name|n
init|=
operator|&
name|i
operator|.
name|value
argument_list|()
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|n
operator|->
name|keyPtr
operator|=
operator|&
name|i
operator|.
name|key
argument_list|()
expr_stmt|;
end_expr_stmt
begin_if
if|if
condition|(
name|f
condition|)
name|f
operator|->
name|p
operator|=
name|n
expr_stmt|;
end_if
begin_expr_stmt
name|n
operator|->
name|n
operator|=
name|f
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|f
operator|=
name|n
expr_stmt|;
end_expr_stmt
begin_if
if|if
condition|(
operator|!
name|l
condition|)
name|l
operator|=
name|f
expr_stmt|;
end_if
begin_return
return|return
name|true
return|;
end_return
begin_expr_stmt
unit|}  template
DECL|variable|Key
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|>
DECL|variable|Key
DECL|function|trim
name|void
name|QCache
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|trim
argument_list|(
argument|int m
argument_list|)
block|{
name|Node
operator|*
name|n
operator|=
name|l
block|;
while|while
condition|(
name|n
operator|&&
name|total
operator|>
name|m
condition|)
block|{
name|Node
modifier|*
name|u
init|=
name|n
decl_stmt|;
name|n
operator|=
name|n
operator|->
name|p
expr_stmt|;
name|unlink
argument_list|(
operator|*
name|u
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_endif
unit|}  QT_END_NAMESPACE
endif|#
directive|endif
end_endif
begin_comment
comment|// QCACHE_H
end_comment
end_unit
