begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QREFCOUNT_H
end_ifndef
begin_define
DECL|macro|QREFCOUNT_H
define|#
directive|define
name|QREFCOUNT_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qatomic.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
name|namespace
name|QtPrivate
block|{
name|class
name|RefCount
block|{
name|public
label|:
specifier|inline
name|bool
name|ref
parameter_list|()
function|Q_DECL_NOTHROW
block|{
name|int
name|count
init|=
name|atomic
operator|.
name|load
argument_list|()
decl_stmt|;
if|if
condition|(
name|count
operator|==
literal|0
condition|)
comment|// !isSharable
return|return
name|false
return|;
if|if
condition|(
name|count
operator|!=
operator|-
literal|1
condition|)
comment|// !isStatic
name|atomic
operator|.
name|ref
argument_list|()
expr_stmt|;
return|return
name|true
return|;
block|}
specifier|inline
name|bool
name|deref
parameter_list|()
function|Q_DECL_NOTHROW
block|{
name|int
name|count
init|=
name|atomic
operator|.
name|load
argument_list|()
decl_stmt|;
if|if
condition|(
name|count
operator|==
literal|0
condition|)
comment|// !isSharable
return|return
name|false
return|;
if|if
condition|(
name|count
operator|==
operator|-
literal|1
condition|)
comment|// isStatic
return|return
name|true
return|;
return|return
name|atomic
operator|.
name|deref
argument_list|()
return|;
block|}
name|bool
name|setSharable
parameter_list|(
name|bool
name|sharable
parameter_list|)
function|Q_DECL_NOTHROW
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|isShared
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|sharable
condition|)
return|return
name|atomic
operator|.
name|testAndSetRelaxed
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
return|;
else|else
return|return
name|atomic
operator|.
name|testAndSetRelaxed
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
return|;
block|}
name|bool
name|isStatic
argument_list|()
specifier|const
name|Q_DECL_NOTHROW
block|{
comment|// Persistent object, never deleted
return|return
name|atomic
operator|.
name|load
argument_list|()
operator|==
operator|-
literal|1
return|;
block|}
name|bool
name|isSharable
argument_list|()
specifier|const
name|Q_DECL_NOTHROW
block|{
comment|// Sharable === Shared ownership.
return|return
name|atomic
operator|.
name|load
argument_list|()
operator|!=
literal|0
return|;
block|}
name|bool
name|isShared
argument_list|()
specifier|const
name|Q_DECL_NOTHROW
block|{
name|int
name|count
operator|=
name|atomic
operator|.
name|load
argument_list|()
block|;
return|return
operator|(
name|count
operator|!=
literal|1
operator|)
operator|&&
operator|(
name|count
operator|!=
literal|0
operator|)
return|;
block|}
name|void
name|initializeOwned
parameter_list|()
function|Q_DECL_NOTHROW
block|{
name|atomic
operator|.
name|store
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|void
name|initializeUnsharable
parameter_list|()
function|Q_DECL_NOTHROW
block|{
name|atomic
operator|.
name|store
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|QBasicAtomicInt
name|atomic
decl_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt
begin_define
DECL|macro|Q_REFCOUNT_INITIALIZE_STATIC
define|#
directive|define
name|Q_REFCOUNT_INITIALIZE_STATIC
value|{ Q_BASIC_ATOMIC_INITIALIZER(-1) }
end_define
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
end_unit
