begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QTOOLS_P_H
end_ifndef
begin_define
DECL|macro|QTOOLS_P_H
define|#
directive|define
name|QTOOLS_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists for the convenience
end_comment
begin_comment
comment|// of other Qt classes.  This header file may change from version to
end_comment
begin_comment
comment|// version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"QtCore/qglobal.h"
end_include
begin_include
include|#
directive|include
file|<limits.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
name|namespace
name|QtMiscUtils
block|{
name|Q_DECL_CONSTEXPR
specifier|inline
name|char
name|toHexUpper
parameter_list|(
name|uint
name|value
parameter_list|)
function|Q_DECL_NOTHROW
block|{
return|return
literal|"0123456789ABCDEF"
index|[
name|value
operator|&
literal|0xF
index|]
return|;
block|}
name|Q_DECL_CONSTEXPR
specifier|inline
name|char
name|toHexLower
parameter_list|(
name|uint
name|value
parameter_list|)
function|Q_DECL_NOTHROW
block|{
return|return
literal|"0123456789abcdef"
index|[
name|value
operator|&
literal|0xF
index|]
return|;
block|}
name|Q_DECL_CONSTEXPR
specifier|inline
name|int
name|fromHex
parameter_list|(
name|uint
name|c
parameter_list|)
function|Q_DECL_NOTHROW
block|{
return|return
operator|(
operator|(
name|c
operator|>=
literal|'0'
operator|)
operator|&&
operator|(
name|c
operator|<=
literal|'9'
operator|)
operator|)
condition|?
name|int
argument_list|(
name|c
operator|-
literal|'0'
argument_list|)
else|:
operator|(
operator|(
name|c
operator|>=
literal|'A'
operator|)
operator|&&
operator|(
name|c
operator|<=
literal|'F'
operator|)
operator|)
condition|?
name|int
argument_list|(
name|c
operator|-
literal|'A'
operator|+
literal|10
argument_list|)
else|:
operator|(
operator|(
name|c
operator|>=
literal|'a'
operator|)
operator|&&
operator|(
name|c
operator|<=
literal|'f'
operator|)
operator|)
condition|?
name|int
argument_list|(
name|c
operator|-
literal|'a'
operator|+
literal|10
argument_list|)
else|:
comment|/* otherwise */
operator|-
literal|1
return|;
block|}
name|Q_DECL_CONSTEXPR
specifier|inline
name|char
name|toOct
parameter_list|(
name|uint
name|value
parameter_list|)
function|Q_DECL_NOTHROW
block|{
return|return
literal|'0'
operator|+
name|char
argument_list|(
name|value
operator|&
literal|0x7
argument_list|)
return|;
block|}
name|Q_DECL_CONSTEXPR
specifier|inline
name|int
name|fromOct
parameter_list|(
name|uint
name|c
parameter_list|)
function|Q_DECL_NOTHROW
block|{
return|return
operator|(
operator|(
name|c
operator|>=
literal|'0'
operator|)
operator|&&
operator|(
name|c
operator|<=
literal|'7'
operator|)
operator|)
condition|?
name|int
argument_list|(
name|c
operator|-
literal|'0'
argument_list|)
else|:
operator|-
literal|1
return|;
block|}
block|}
end_decl_stmt
begin_comment
comment|// We typically need an extra bit for qNextPowerOfTwo when determining the next allocation size.
end_comment
begin_enum
enum|enum
block|{
DECL|enumerator|MaxAllocSize
name|MaxAllocSize
init|=
name|INT_MAX
block|}
enum|;
end_enum
begin_struct
DECL|struct|CalculateGrowingBlockSizeResult
struct|struct
name|CalculateGrowingBlockSizeResult
block|{
DECL|member|size
name|size_t
name|size
decl_stmt|;
DECL|member|elementCount
name|size_t
name|elementCount
decl_stmt|;
block|}
struct|;
end_struct
begin_comment
comment|// implemented in qbytearray.cpp
end_comment
begin_decl_stmt
name|size_t
name|Q_CORE_EXPORT
name|Q_DECL_CONST_FUNCTION
name|qCalculateBlockSize
argument_list|(
name|size_t
name|elementCount
argument_list|,
name|size_t
name|elementSize
argument_list|,
name|size_t
name|headerSize
operator|=
literal|0
argument_list|)
name|Q_DECL_NOTHROW
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|CalculateGrowingBlockSizeResult
name|Q_CORE_EXPORT
name|Q_DECL_CONST_FUNCTION
name|qCalculateGrowingBlockSize
argument_list|(
name|size_t
name|elementCount
argument_list|,
name|size_t
name|elementSize
argument_list|,
name|size_t
name|headerSize
operator|=
literal|0
argument_list|)
name|Q_DECL_NOTHROW
decl_stmt|;
end_decl_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QTOOLS_P_H
end_comment
end_unit
