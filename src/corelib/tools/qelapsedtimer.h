begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QELAPSEDTIMER_H
end_ifndef
begin_define
DECL|macro|QELAPSEDTIMER_H
define|#
directive|define
name|QELAPSEDTIMER_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qglobal.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
name|class
name|Q_CORE_EXPORT
name|QElapsedTimer
block|{
name|public
label|:
enum|enum
name|ClockType
block|{
name|SystemTime
block|,
name|MonotonicClock
block|,
name|TickCounter
block|,
name|MachAbsoluteTime
block|,
name|PerformanceCounter
block|}
enum|;
name|Q_DECL_CONSTEXPR
name|QElapsedTimer
argument_list|()
operator|:
name|t1
argument_list|(
name|Q_INT64_C
argument_list|(
literal|0x8000000000000000
argument_list|)
argument_list|)
operator|,
name|t2
argument_list|(
argument|Q_INT64_C(
literal|0x8000000000000000
argument|)
argument_list|)
block|{     }
specifier|static
name|ClockType
name|clockType
argument_list|()
name|Q_DECL_NOTHROW
expr_stmt|;
specifier|static
name|bool
name|isMonotonic
argument_list|()
name|Q_DECL_NOTHROW
expr_stmt|;
name|void
name|start
argument_list|()
name|Q_DECL_NOTHROW
expr_stmt|;
name|qint64
name|restart
argument_list|()
name|Q_DECL_NOTHROW
expr_stmt|;
name|void
name|invalidate
argument_list|()
name|Q_DECL_NOTHROW
expr_stmt|;
name|bool
name|isValid
argument_list|()
specifier|const
name|Q_DECL_NOTHROW
expr_stmt|;
name|qint64
name|nsecsElapsed
argument_list|()
specifier|const
name|Q_DECL_NOTHROW
expr_stmt|;
name|qint64
name|elapsed
argument_list|()
specifier|const
name|Q_DECL_NOTHROW
expr_stmt|;
name|bool
name|hasExpired
argument_list|(
name|qint64
name|timeout
argument_list|)
decl|const
name|Q_DECL_NOTHROW
decl_stmt|;
name|qint64
name|msecsSinceReference
argument_list|()
specifier|const
name|Q_DECL_NOTHROW
expr_stmt|;
name|qint64
name|msecsTo
argument_list|(
specifier|const
name|QElapsedTimer
operator|&
name|other
argument_list|)
decl|const
name|Q_DECL_NOTHROW
decl_stmt|;
name|qint64
name|secsTo
argument_list|(
specifier|const
name|QElapsedTimer
operator|&
name|other
argument_list|)
decl|const
name|Q_DECL_NOTHROW
decl_stmt|;
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QElapsedTimer
operator|&
name|other
operator|)
specifier|const
name|Q_DECL_NOTHROW
block|{
return|return
name|t1
operator|==
name|other
operator|.
name|t1
operator|&&
name|t2
operator|==
name|other
operator|.
name|t2
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|QElapsedTimer
operator|&
name|other
operator|)
specifier|const
name|Q_DECL_NOTHROW
block|{
return|return
operator|!
operator|(
operator|*
name|this
operator|==
name|other
operator|)
return|;
block|}
name|friend
name|bool
name|Q_CORE_EXPORT
name|operator
operator|<
operator|(
specifier|const
name|QElapsedTimer
operator|&
name|v1
operator|,
specifier|const
name|QElapsedTimer
operator|&
name|v2
operator|)
name|Q_DECL_NOTHROW
expr_stmt|;
name|private
label|:
name|qint64
name|t1
decl_stmt|;
name|qint64
name|t2
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QELAPSEDTIMER_H
end_comment
end_unit
