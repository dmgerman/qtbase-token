begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QVECTOR_H
end_ifndef
begin_define
DECL|macro|QVECTOR_H
define|#
directive|define
name|QVECTOR_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qalgorithms.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qiterator.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qlist.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qrefcount.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_STL
end_ifndef
begin_include
include|#
directive|include
file|<iterator>
end_include
begin_include
include|#
directive|include
file|<vector>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<stdlib.h>
end_include
begin_include
include|#
directive|include
file|<string.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_COMPILER_INITIALIZER_LISTS
end_ifdef
begin_include
include|#
directive|include
file|<initializer_list>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
expr|struct
DECL|struct|QVectorData
name|Q_CORE_EXPORT
name|QVectorData
block|{
DECL|member|ref
name|QtPrivate
operator|::
name|RefCount
name|ref
block|;
DECL|member|size
name|int
name|size
block|;
DECL|member|alloc
name|uint
name|alloc
operator|:
literal|31
block|;
DECL|member|capacityReserved
name|uint
name|capacityReserved
operator|:
literal|1
block|;
DECL|member|offset
name|qptrdiff
name|offset
block|;
DECL|function|data
name|void
operator|*
name|data
argument_list|()
block|{
return|return
name|reinterpret_cast
operator|<
name|char
operator|*
operator|>
operator|(
name|this
operator|)
operator|+
name|this
operator|->
name|offset
return|;
block|}
DECL|member|shared_null
specifier|static
specifier|const
name|QVectorData
name|shared_null
expr_stmt|;
end_expr_stmt
begin_function_decl
specifier|static
name|QVectorData
modifier|*
name|allocate
parameter_list|(
name|int
name|size
parameter_list|,
name|int
name|alignment
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|QVectorData
modifier|*
name|reallocate
parameter_list|(
name|QVectorData
modifier|*
name|old
parameter_list|,
name|int
name|newsize
parameter_list|,
name|int
name|oldsize
parameter_list|,
name|int
name|alignment
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|void
name|free
parameter_list|(
name|QVectorData
modifier|*
name|data
parameter_list|,
name|int
name|alignment
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|int
name|grow
parameter_list|(
name|int
name|sizeOfHeader
parameter_list|,
name|int
name|size
parameter_list|,
name|int
name|sizeOfT
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
DECL|struct|QVectorData
name|QVectorTypedData
operator|:
name|QVectorData
block|{
DECL|function|begin
name|T
operator|*
name|begin
argument_list|()
block|{
return|return
name|reinterpret_cast
operator|<
name|T
operator|*
operator|>
operator|(
name|this
operator|->
name|data
argument_list|()
operator|)
return|;
block|}
DECL|function|end
name|T
operator|*
name|end
argument_list|()
block|{
return|return
name|begin
argument_list|()
operator|+
name|this
operator|->
name|size
return|;
block|}
end_expr_stmt
begin_function
DECL|function|sharedNull
specifier|static
name|QVectorTypedData
modifier|*
name|sharedNull
parameter_list|()
block|{
return|return
name|static_cast
operator|<
name|QVectorTypedData
operator|*
operator|>
operator|(
name|const_cast
operator|<
name|QVectorData
operator|*
operator|>
operator|(
operator|&
name|QVectorData
operator|::
name|shared_null
operator|)
operator|)
return|;
block|}
end_function
begin_decl_stmt
DECL|function|sharedNull
unit|};
DECL|variable|QRegion
name|class
name|QRegion
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|class
name|QVector
block|{
typedef|typedef
name|QVectorTypedData
operator|<
name|T
operator|>
name|Data
expr_stmt|;
name|Data
operator|*
name|d
expr_stmt|;
end_expr_stmt
begin_label
name|public
label|:
end_label
begin_expr_stmt
specifier|inline
name|QVector
argument_list|()
operator|:
name|d
argument_list|(
argument|Data::sharedNull()
argument_list|)
block|{ }
name|explicit
name|QVector
argument_list|(
argument|int size
argument_list|)
expr_stmt|;
end_expr_stmt
begin_macro
name|QVector
argument_list|(
argument|int size
argument_list|,
argument|const T&t
argument_list|)
end_macro
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_expr_stmt
specifier|inline
name|QVector
argument_list|(
argument|const QVector<T>&v
argument_list|)
block|{
if|if
condition|(
name|v
operator|.
name|d
operator|->
name|ref
operator|.
name|ref
argument_list|()
condition|)
block|{
name|d
operator|=
name|v
operator|.
name|d
expr_stmt|;
block|}
end_expr_stmt
begin_else
else|else
block|{
name|d
operator|=
name|Data
operator|::
name|sharedNull
argument_list|()
expr_stmt|;
name|realloc
argument_list|(
literal|0
argument_list|,
name|int
argument_list|(
name|v
operator|.
name|d
operator|->
name|alloc
argument_list|)
argument_list|)
expr_stmt|;
name|qCopy
argument_list|(
name|v
operator|.
name|d
operator|->
name|begin
argument_list|()
argument_list|,
name|v
operator|.
name|d
operator|->
name|end
argument_list|()
argument_list|,
name|d
operator|->
name|begin
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|size
operator|=
name|v
operator|.
name|d
operator|->
name|size
expr_stmt|;
name|d
operator|->
name|capacityReserved
operator|=
name|v
operator|.
name|d
operator|->
name|capacityReserved
expr_stmt|;
block|}
end_else
begin_expr_stmt
unit|}      inline
operator|~
name|QVector
argument_list|()
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|ref
operator|.
name|deref
argument_list|()
condition|)
name|free
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_expr_stmt
name|QVector
operator|<
name|T
operator|>
operator|&
name|operator
operator|=
operator|(
specifier|const
name|QVector
operator|<
name|T
operator|>
operator|&
name|v
operator|)
expr_stmt|;
end_expr_stmt
begin_ifdef
ifdef|#
directive|ifdef
name|Q_COMPILER_RVALUE_REFS
end_ifdef
begin_expr_stmt
specifier|inline
name|QVector
operator|<
name|T
operator|>
name|operator
operator|=
operator|(
name|QVector
operator|<
name|T
operator|>
operator|&&
name|other
operator|)
block|{
name|qSwap
argument_list|(
name|d
argument_list|,
name|other
operator|.
name|d
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
specifier|inline
name|void
name|swap
argument_list|(
name|QVector
operator|<
name|T
operator|>
operator|&
name|other
argument_list|)
block|{
name|qSwap
argument_list|(
name|d
argument_list|,
name|other
operator|.
name|d
argument_list|)
expr_stmt|;
block|}
end_decl_stmt
begin_ifdef
ifdef|#
directive|ifdef
name|Q_COMPILER_INITIALIZER_LISTS
end_ifdef
begin_expr_stmt
specifier|inline
name|QVector
argument_list|(
name|std
operator|::
name|initializer_list
operator|<
name|T
operator|>
name|args
argument_list|)
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QVector
operator|<
name|T
operator|>
operator|&
name|v
operator|)
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|QVector
operator|<
name|T
operator|>
operator|&
name|v
operator|)
specifier|const
block|{
return|return
operator|!
operator|(
operator|*
name|this
operator|==
name|v
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|int
name|size
argument_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|size
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|isEmpty
argument_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|size
operator|==
literal|0
return|;
block|}
end_expr_stmt
begin_function_decl
name|void
name|resize
parameter_list|(
name|int
name|size
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
specifier|inline
name|int
name|capacity
argument_list|()
specifier|const
block|{
return|return
name|int
argument_list|(
name|d
operator|->
name|alloc
argument_list|)
return|;
block|}
end_expr_stmt
begin_function_decl
name|void
name|reserve
parameter_list|(
name|int
name|size
parameter_list|)
function_decl|;
end_function_decl
begin_function
specifier|inline
name|void
name|squeeze
parameter_list|()
block|{
name|realloc
argument_list|(
name|d
operator|->
name|size
argument_list|,
name|d
operator|->
name|size
argument_list|)
expr_stmt|;
name|d
operator|->
name|capacityReserved
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
specifier|inline
name|void
name|detach
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isDetached
argument_list|()
condition|)
name|detach_helper
argument_list|()
expr_stmt|;
block|}
end_function
begin_expr_stmt
specifier|inline
name|bool
name|isDetached
argument_list|()
specifier|const
block|{
return|return
operator|!
name|d
operator|->
name|ref
operator|.
name|isShared
argument_list|()
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|void
name|setSharable
parameter_list|(
name|bool
name|sharable
parameter_list|)
block|{
if|if
condition|(
name|sharable
operator|==
name|d
operator|->
name|ref
operator|.
name|isSharable
argument_list|()
condition|)
return|return;
if|if
condition|(
operator|!
name|sharable
condition|)
name|detach
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|!=
name|Data
operator|::
name|sharedNull
argument_list|()
condition|)
name|d
operator|->
name|ref
operator|.
name|setSharable
argument_list|(
name|sharable
argument_list|)
expr_stmt|;
block|}
end_function
begin_decl_stmt
specifier|inline
name|bool
name|isSharedWith
argument_list|(
specifier|const
name|QVector
operator|<
name|T
operator|>
operator|&
name|other
argument_list|)
decl|const
block|{
return|return
name|d
operator|==
name|other
operator|.
name|d
return|;
block|}
end_decl_stmt
begin_function
specifier|inline
name|T
modifier|*
name|data
parameter_list|()
block|{
name|detach
argument_list|()
expr_stmt|;
return|return
name|d
operator|->
name|begin
argument_list|()
return|;
block|}
end_function
begin_expr_stmt
specifier|inline
specifier|const
name|T
operator|*
name|data
argument_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|begin
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
specifier|const
name|T
operator|*
name|constData
argument_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|begin
argument_list|()
return|;
block|}
end_expr_stmt
begin_function_decl
name|void
name|clear
parameter_list|()
function_decl|;
end_function_decl
begin_decl_stmt
specifier|const
name|T
modifier|&
name|at
argument_list|(
name|int
name|i
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_function_decl
name|T
modifier|&
name|operator
function_decl|[]
parameter_list|(
name|int
name|i
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
specifier|const
name|T
modifier|&
name|operator
index|[]
argument_list|(
name|int
name|i
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_function_decl
name|void
name|append
parameter_list|(
specifier|const
name|T
modifier|&
name|t
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|prepend
parameter_list|(
specifier|const
name|T
modifier|&
name|t
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|insert
parameter_list|(
name|int
name|i
parameter_list|,
specifier|const
name|T
modifier|&
name|t
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|insert
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|n
parameter_list|,
specifier|const
name|T
modifier|&
name|t
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|replace
parameter_list|(
name|int
name|i
parameter_list|,
specifier|const
name|T
modifier|&
name|t
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|remove
parameter_list|(
name|int
name|i
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|remove
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|n
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|QVector
operator|<
name|T
operator|>
operator|&
name|fill
argument_list|(
argument|const T&t
argument_list|,
argument|int size = -
literal|1
argument_list|)
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|int
name|indexOf
argument_list|(
specifier|const
name|T
operator|&
name|t
argument_list|,
name|int
name|from
operator|=
literal|0
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|int
name|lastIndexOf
argument_list|(
specifier|const
name|T
operator|&
name|t
argument_list|,
name|int
name|from
operator|=
operator|-
literal|1
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|bool
name|contains
argument_list|(
specifier|const
name|T
operator|&
name|t
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_function
name|int
name|count
parameter_list|(
specifier|const
name|T
modifier|&
name|t
parameter_list|)
function|const;
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|QT_STRICT_ITERATORS
end_ifdef
begin_decl_stmt
name|class
name|iterator
block|{
name|public
label|:
name|T
modifier|*
name|i
decl_stmt|;
typedef|typedef
name|std
operator|::
name|random_access_iterator_tag
name|iterator_category
expr_stmt|;
typedef|typedef
name|qptrdiff
name|difference_type
typedef|;
typedef|typedef
name|T
name|value_type
typedef|;
typedef|typedef
name|T
modifier|*
name|pointer
typedef|;
typedef|typedef
name|T
modifier|&
name|reference
typedef|;
specifier|inline
name|iterator
argument_list|()
operator|:
name|i
argument_list|(
literal|0
argument_list|)
block|{}
specifier|inline
name|iterator
argument_list|(
name|T
operator|*
name|n
argument_list|)
operator|:
name|i
argument_list|(
argument|n
argument_list|)
block|{}
specifier|inline
name|iterator
argument_list|(
specifier|const
name|iterator
operator|&
name|o
argument_list|)
operator|:
name|i
argument_list|(
argument|o.i
argument_list|)
block|{}
specifier|inline
name|T
operator|&
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
operator|*
name|i
return|;
block|}
specifier|inline
name|T
operator|*
name|operator
operator|->
expr|(
block|)
decl|const
block|{
return|return
name|i
return|;
block|}
end_decl_stmt
begin_decl_stmt
specifier|inline
name|T
modifier|&
name|operator
index|[]
argument_list|(
name|int
name|j
argument_list|)
decl|const
block|{
return|return
operator|*
operator|(
name|i
operator|+
name|j
operator|)
return|;
block|}
end_decl_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|iterator
operator|&
name|o
operator|)
specifier|const
block|{
return|return
name|i
operator|==
name|o
operator|.
name|i
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|iterator
operator|&
name|o
operator|)
specifier|const
block|{
return|return
name|i
operator|!=
name|o
operator|.
name|i
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|<
operator|(
specifier|const
name|iterator
operator|&
name|other
operator|)
specifier|const
block|{
return|return
name|i
operator|<
name|other
operator|.
name|i
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|<=
operator|(
specifier|const
name|iterator
operator|&
name|other
operator|)
specifier|const
block|{
return|return
name|i
operator|<=
name|other
operator|.
name|i
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|>
operator|(
specifier|const
name|iterator
operator|&
name|other
operator|)
specifier|const
block|{
return|return
name|i
operator|>
name|other
operator|.
name|i
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|>=
operator|(
specifier|const
name|iterator
operator|&
name|other
operator|)
specifier|const
block|{
return|return
name|i
operator|>=
name|other
operator|.
name|i
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|iterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
operator|++
name|i
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|iterator
name|operator
operator|++
operator|(
name|int
operator|)
block|{
name|T
operator|*
name|n
operator|=
name|i
block|;
operator|++
name|i
block|;
return|return
name|n
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|iterator
operator|&
name|operator
operator|--
operator|(
operator|)
block|{
name|i
operator|--
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|iterator
name|operator
operator|--
operator|(
name|int
operator|)
block|{
name|T
operator|*
name|n
operator|=
name|i
block|;
name|i
operator|--
block|;
return|return
name|n
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|iterator
operator|&
name|operator
operator|+=
operator|(
name|int
name|j
operator|)
block|{
name|i
operator|+=
name|j
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|iterator
operator|&
name|operator
operator|-=
operator|(
name|int
name|j
operator|)
block|{
name|i
operator|-=
name|j
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|iterator
name|operator
operator|+
operator|(
name|int
name|j
operator|)
specifier|const
block|{
return|return
name|iterator
argument_list|(
name|i
operator|+
name|j
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|iterator
name|operator
operator|-
operator|(
name|int
name|j
operator|)
specifier|const
block|{
return|return
name|iterator
argument_list|(
name|i
operator|-
name|j
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|int
name|operator
operator|-
operator|(
name|iterator
name|j
operator|)
specifier|const
block|{
return|return
name|i
operator|-
name|j
operator|.
name|i
return|;
block|}
end_expr_stmt
begin_decl_stmt
unit|};
name|friend
name|class
name|iterator
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|const_iterator
block|{
name|public
label|:
name|T
modifier|*
name|i
decl_stmt|;
typedef|typedef
name|std
operator|::
name|random_access_iterator_tag
name|iterator_category
expr_stmt|;
typedef|typedef
name|qptrdiff
name|difference_type
typedef|;
typedef|typedef
name|T
name|value_type
typedef|;
typedef|typedef
specifier|const
name|T
modifier|*
name|pointer
typedef|;
typedef|typedef
specifier|const
name|T
modifier|&
name|reference
typedef|;
specifier|inline
name|const_iterator
argument_list|()
operator|:
name|i
argument_list|(
literal|0
argument_list|)
block|{}
specifier|inline
name|const_iterator
argument_list|(
name|T
operator|*
name|n
argument_list|)
operator|:
name|i
argument_list|(
argument|n
argument_list|)
block|{}
specifier|inline
name|const_iterator
argument_list|(
specifier|const
name|const_iterator
operator|&
name|o
argument_list|)
operator|:
name|i
argument_list|(
argument|o.i
argument_list|)
block|{}
specifier|inline
name|explicit
name|const_iterator
argument_list|(
specifier|const
name|iterator
operator|&
name|o
argument_list|)
operator|:
name|i
argument_list|(
argument|o.i
argument_list|)
block|{}
specifier|inline
specifier|const
name|T
operator|&
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
operator|*
name|i
return|;
block|}
specifier|inline
specifier|const
name|T
operator|*
name|operator
operator|->
expr|(
block|)
decl|const
block|{
return|return
name|i
return|;
block|}
end_decl_stmt
begin_decl_stmt
specifier|inline
specifier|const
name|T
modifier|&
name|operator
index|[]
argument_list|(
name|int
name|j
argument_list|)
decl|const
block|{
return|return
operator|*
operator|(
name|i
operator|+
name|j
operator|)
return|;
block|}
end_decl_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|const_iterator
operator|&
name|o
operator|)
specifier|const
block|{
return|return
name|i
operator|==
name|o
operator|.
name|i
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|const_iterator
operator|&
name|o
operator|)
specifier|const
block|{
return|return
name|i
operator|!=
name|o
operator|.
name|i
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|<
operator|(
specifier|const
name|const_iterator
operator|&
name|other
operator|)
specifier|const
block|{
return|return
name|i
operator|<
name|other
operator|.
name|i
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|<=
operator|(
specifier|const
name|const_iterator
operator|&
name|other
operator|)
specifier|const
block|{
return|return
name|i
operator|<=
name|other
operator|.
name|i
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|>
operator|(
specifier|const
name|const_iterator
operator|&
name|other
operator|)
specifier|const
block|{
return|return
name|i
operator|>
name|other
operator|.
name|i
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|>=
operator|(
specifier|const
name|const_iterator
operator|&
name|other
operator|)
specifier|const
block|{
return|return
name|i
operator|>=
name|other
operator|.
name|i
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|const_iterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
operator|++
name|i
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|const_iterator
name|operator
operator|++
operator|(
name|int
operator|)
block|{
name|T
operator|*
name|n
operator|=
name|i
block|;
operator|++
name|i
block|;
return|return
name|n
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|const_iterator
operator|&
name|operator
operator|--
operator|(
operator|)
block|{
name|i
operator|--
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|const_iterator
name|operator
operator|--
operator|(
name|int
operator|)
block|{
name|T
operator|*
name|n
operator|=
name|i
block|;
name|i
operator|--
block|;
return|return
name|n
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|const_iterator
operator|&
name|operator
operator|+=
operator|(
name|int
name|j
operator|)
block|{
name|i
operator|+=
name|j
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|const_iterator
operator|&
name|operator
operator|-=
operator|(
name|int
name|j
operator|)
block|{
name|i
operator|-=
name|j
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|const_iterator
name|operator
operator|+
operator|(
name|int
name|j
operator|)
specifier|const
block|{
return|return
name|const_iterator
argument_list|(
name|i
operator|+
name|j
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|const_iterator
name|operator
operator|-
operator|(
name|int
name|j
operator|)
specifier|const
block|{
return|return
name|const_iterator
argument_list|(
name|i
operator|-
name|j
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|int
name|operator
operator|-
operator|(
name|const_iterator
name|j
operator|)
specifier|const
block|{
return|return
name|i
operator|-
name|j
operator|.
name|i
return|;
block|}
end_expr_stmt
begin_decl_stmt
unit|};
name|friend
name|class
name|const_iterator
decl_stmt|;
end_decl_stmt
begin_else
else|#
directive|else
end_else
begin_comment
comment|// STL-style
end_comment
begin_typedef
typedef|typedef
name|T
modifier|*
name|iterator
typedef|;
end_typedef
begin_typedef
typedef|typedef
specifier|const
name|T
modifier|*
name|const_iterator
typedef|;
end_typedef
begin_endif
endif|#
directive|endif
end_endif
begin_function
specifier|inline
name|iterator
name|begin
parameter_list|()
block|{
name|detach
argument_list|()
expr_stmt|;
return|return
name|d
operator|->
name|begin
argument_list|()
return|;
block|}
end_function
begin_expr_stmt
specifier|inline
name|const_iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|begin
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|const_iterator
name|cbegin
argument_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|begin
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|const_iterator
name|constBegin
argument_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|begin
argument_list|()
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|iterator
name|end
parameter_list|()
block|{
name|detach
argument_list|()
expr_stmt|;
return|return
name|d
operator|->
name|end
argument_list|()
return|;
block|}
end_function
begin_expr_stmt
specifier|inline
name|const_iterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|end
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|const_iterator
name|cend
argument_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|end
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|const_iterator
name|constEnd
argument_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|end
argument_list|()
return|;
block|}
end_expr_stmt
begin_function_decl
name|iterator
name|insert
parameter_list|(
name|iterator
name|before
parameter_list|,
name|int
name|n
parameter_list|,
specifier|const
name|T
modifier|&
name|x
parameter_list|)
function_decl|;
end_function_decl
begin_function
specifier|inline
name|iterator
name|insert
parameter_list|(
name|iterator
name|before
parameter_list|,
specifier|const
name|T
modifier|&
name|x
parameter_list|)
block|{
return|return
name|insert
argument_list|(
name|before
argument_list|,
literal|1
argument_list|,
name|x
argument_list|)
return|;
block|}
end_function
begin_function_decl
name|iterator
name|erase
parameter_list|(
name|iterator
name|begin
parameter_list|,
name|iterator
name|end
parameter_list|)
function_decl|;
end_function_decl
begin_function
specifier|inline
name|iterator
name|erase
parameter_list|(
name|iterator
name|pos
parameter_list|)
block|{
return|return
name|erase
argument_list|(
name|pos
argument_list|,
name|pos
operator|+
literal|1
argument_list|)
return|;
block|}
end_function
begin_comment
comment|// more Qt
end_comment
begin_expr_stmt
specifier|inline
name|int
name|count
argument_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|size
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|T
modifier|&
name|first
parameter_list|()
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|*
name|begin
argument_list|()
return|;
block|}
end_function
begin_expr_stmt
specifier|inline
specifier|const
name|T
operator|&
name|first
argument_list|()
specifier|const
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|isEmpty
argument_list|()
argument_list|)
block|;
return|return
operator|*
name|begin
argument_list|()
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|T
modifier|&
name|last
parameter_list|()
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|*
operator|(
name|end
argument_list|()
operator|-
literal|1
operator|)
return|;
block|}
end_function
begin_expr_stmt
specifier|inline
specifier|const
name|T
operator|&
name|last
argument_list|()
specifier|const
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|isEmpty
argument_list|()
argument_list|)
block|;
return|return
operator|*
operator|(
name|end
argument_list|()
operator|-
literal|1
operator|)
return|;
block|}
end_expr_stmt
begin_decl_stmt
specifier|inline
name|bool
name|startsWith
argument_list|(
specifier|const
name|T
operator|&
name|t
argument_list|)
decl|const
block|{
return|return
operator|!
name|isEmpty
argument_list|()
operator|&&
name|first
argument_list|()
operator|==
name|t
return|;
block|}
end_decl_stmt
begin_decl_stmt
specifier|inline
name|bool
name|endsWith
argument_list|(
specifier|const
name|T
operator|&
name|t
argument_list|)
decl|const
block|{
return|return
operator|!
name|isEmpty
argument_list|()
operator|&&
name|last
argument_list|()
operator|==
name|t
return|;
block|}
end_decl_stmt
begin_expr_stmt
name|QVector
operator|<
name|T
operator|>
name|mid
argument_list|(
argument|int pos
argument_list|,
argument|int length = -
literal|1
argument_list|)
specifier|const
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|T
name|value
argument_list|(
name|int
name|i
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|T
name|value
argument_list|(
name|int
name|i
argument_list|,
specifier|const
name|T
operator|&
name|defaultValue
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_comment
comment|// STL compatibility
end_comment
begin_typedef
typedef|typedef
name|T
name|value_type
typedef|;
end_typedef
begin_typedef
typedef|typedef
name|value_type
modifier|*
name|pointer
typedef|;
end_typedef
begin_typedef
typedef|typedef
specifier|const
name|value_type
modifier|*
name|const_pointer
typedef|;
end_typedef
begin_typedef
typedef|typedef
name|value_type
modifier|&
name|reference
typedef|;
end_typedef
begin_typedef
typedef|typedef
specifier|const
name|value_type
modifier|&
name|const_reference
typedef|;
end_typedef
begin_typedef
typedef|typedef
name|qptrdiff
name|difference_type
typedef|;
end_typedef
begin_typedef
typedef|typedef
name|iterator
name|Iterator
typedef|;
end_typedef
begin_typedef
typedef|typedef
name|const_iterator
name|ConstIterator
typedef|;
end_typedef
begin_typedef
typedef|typedef
name|int
name|size_type
typedef|;
end_typedef
begin_function
specifier|inline
name|void
name|push_back
parameter_list|(
specifier|const
name|T
modifier|&
name|t
parameter_list|)
block|{
name|append
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
specifier|inline
name|void
name|push_front
parameter_list|(
specifier|const
name|T
modifier|&
name|t
parameter_list|)
block|{
name|prepend
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
name|void
name|pop_back
parameter_list|()
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|erase
argument_list|(
name|end
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
name|void
name|pop_front
parameter_list|()
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|erase
argument_list|(
name|begin
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_expr_stmt
specifier|inline
name|bool
name|empty
argument_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|size
operator|==
literal|0
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|T
modifier|&
name|front
parameter_list|()
block|{
return|return
name|first
argument_list|()
return|;
block|}
end_function
begin_expr_stmt
specifier|inline
name|const_reference
name|front
argument_list|()
specifier|const
block|{
return|return
name|first
argument_list|()
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|reference
name|back
parameter_list|()
block|{
return|return
name|last
argument_list|()
return|;
block|}
end_function
begin_expr_stmt
specifier|inline
name|const_reference
name|back
argument_list|()
specifier|const
block|{
return|return
name|last
argument_list|()
return|;
block|}
end_expr_stmt
begin_comment
comment|// comfort
end_comment
begin_expr_stmt
name|QVector
operator|<
name|T
operator|>
operator|&
name|operator
operator|+=
operator|(
specifier|const
name|QVector
operator|<
name|T
operator|>
operator|&
name|l
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QVector
operator|<
name|T
operator|>
name|operator
operator|+
operator|(
specifier|const
name|QVector
operator|<
name|T
operator|>
operator|&
name|l
operator|)
specifier|const
block|{
name|QVector
name|n
operator|=
operator|*
name|this
block|;
name|n
operator|+=
name|l
block|;
return|return
name|n
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QVector
operator|<
name|T
operator|>
operator|&
name|operator
operator|+=
operator|(
specifier|const
name|T
operator|&
name|t
operator|)
block|{
name|append
argument_list|(
name|t
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QVector
operator|<
name|T
operator|>
operator|&
name|operator
operator|<<
operator|(
specifier|const
name|T
operator|&
name|t
operator|)
block|{
name|append
argument_list|(
name|t
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QVector
operator|<
name|T
operator|>
operator|&
name|operator
operator|<<
operator|(
specifier|const
name|QVector
operator|<
name|T
operator|>
operator|&
name|l
operator|)
block|{
operator|*
name|this
operator|+=
name|l
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|QList
operator|<
name|T
operator|>
name|toList
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
specifier|static
name|QVector
operator|<
name|T
operator|>
name|fromList
argument_list|(
specifier|const
name|QList
operator|<
name|T
operator|>
operator|&
name|list
argument_list|)
expr_stmt|;
end_expr_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_STL
end_ifndef
begin_expr_stmt
specifier|static
specifier|inline
name|QVector
operator|<
name|T
operator|>
name|fromStdVector
argument_list|(
argument|const std::vector<T>&vector
argument_list|)
block|{
name|QVector
operator|<
name|T
operator|>
name|tmp
block|;
name|tmp
operator|.
name|reserve
argument_list|(
name|int
argument_list|(
name|vector
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
block|;
name|qCopy
argument_list|(
name|vector
operator|.
name|begin
argument_list|()
argument_list|,
name|vector
operator|.
name|end
argument_list|()
argument_list|,
name|std
operator|::
name|back_inserter
argument_list|(
name|tmp
argument_list|)
argument_list|)
block|;
return|return
name|tmp
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|std
operator|::
name|vector
operator|<
name|T
operator|>
name|toStdVector
argument_list|()
specifier|const
block|{
name|std
operator|::
name|vector
operator|<
name|T
operator|>
name|tmp
block|;
name|tmp
operator|.
name|reserve
argument_list|(
name|size
argument_list|()
argument_list|)
block|;
name|qCopy
argument_list|(
name|constBegin
argument_list|()
argument_list|,
name|constEnd
argument_list|()
argument_list|,
name|std
operator|::
name|back_inserter
argument_list|(
name|tmp
argument_list|)
argument_list|)
block|;
return|return
name|tmp
return|;
block|}
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_label
name|private
label|:
end_label
begin_decl_stmt
name|friend
name|class
name|QRegion
decl_stmt|;
end_decl_stmt
begin_comment
comment|// Optimization for QRegion::rects()
end_comment
begin_function_decl
name|void
name|detach_helper
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|Data
modifier|*
name|malloc
parameter_list|(
name|int
name|alloc
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|realloc
parameter_list|(
name|int
name|size
parameter_list|,
name|int
name|alloc
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|free
parameter_list|(
name|Data
modifier|*
name|d
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
name|class
name|AlignmentDummy
block|{
name|QVectorData
name|header
decl_stmt|;
name|T
name|array
index|[
literal|1
index|]
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_function
specifier|static
name|Q_DECL_CONSTEXPR
name|int
name|offsetOfTypedData
parameter_list|()
block|{
comment|// (non-POD)-safe offsetof(AlignmentDummy, array)
return|return
operator|(
sizeof|sizeof
argument_list|(
name|QVectorData
argument_list|)
operator|+
operator|(
name|alignOfTypedData
argument_list|()
operator|-
literal|1
operator|)
operator|)
operator|&
operator|~
operator|(
name|alignOfTypedData
argument_list|()
operator|-
literal|1
operator|)
return|;
block|}
end_function
begin_function
specifier|static
name|Q_DECL_CONSTEXPR
name|int
name|alignOfTypedData
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_ALIGNOF
return|return
name|Q_ALIGNOF
argument_list|(
name|AlignmentDummy
argument_list|)
return|;
else|#
directive|else
return|return
sizeof|sizeof
argument_list|(
name|void
operator|*
argument_list|)
return|;
endif|#
directive|endif
block|}
end_function
begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|detach_helper
name|void
name|QVector
operator|<
name|T
operator|>
operator|::
name|detach_helper
argument_list|()
block|{
name|realloc
argument_list|(
name|d
operator|->
name|size
argument_list|,
name|int
argument_list|(
name|d
operator|->
name|alloc
argument_list|)
argument_list|)
block|; }
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|reserve
name|void
name|QVector
operator|<
name|T
operator|>
operator|::
name|reserve
argument_list|(
argument|int asize
argument_list|)
block|{
if|if
condition|(
name|asize
operator|>
name|int
argument_list|(
name|d
operator|->
name|alloc
argument_list|)
condition|)
name|realloc
argument_list|(
name|d
operator|->
name|size
argument_list|,
name|asize
argument_list|)
expr_stmt|;
end_expr_stmt
begin_if
if|if
condition|(
name|isDetached
argument_list|()
condition|)
name|d
operator|->
name|capacityReserved
operator|=
literal|1
expr_stmt|;
end_if
begin_expr_stmt
unit|} template
operator|<
name|typename
name|T
operator|>
DECL|function|resize
name|void
name|QVector
operator|<
name|T
operator|>
operator|::
name|resize
argument_list|(
argument|int asize
argument_list|)
block|{
name|realloc
argument_list|(
name|asize
argument_list|,
operator|(
name|asize
operator|>
name|int
argument_list|(
name|d
operator|->
name|alloc
argument_list|)
operator|||
operator|(
operator|!
name|d
operator|->
name|capacityReserved
operator|&&
name|asize
operator|<
name|d
operator|->
name|size
operator|&&
name|asize
operator|<
name|int
argument_list|(
name|d
operator|->
name|alloc
operator|>>
literal|1
argument_list|)
operator|)
operator|)
operator|?
name|QVectorData
operator|::
name|grow
argument_list|(
name|offsetOfTypedData
argument_list|()
argument_list|,
name|asize
argument_list|,
sizeof|sizeof
argument_list|(
name|T
argument_list|)
argument_list|)
operator|:
name|int
argument_list|(
name|d
operator|->
name|alloc
argument_list|)
argument_list|)
block|; }
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|clear
specifier|inline
name|void
name|QVector
operator|<
name|T
operator|>
operator|::
name|clear
argument_list|()
block|{
operator|*
name|this
operator|=
name|QVector
operator|<
name|T
operator|>
operator|(
operator|)
block|; }
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|at
specifier|inline
specifier|const
name|T
operator|&
name|QVector
operator|<
name|T
operator|>
operator|::
name|at
argument_list|(
argument|int i
argument_list|)
specifier|const
block|{
name|Q_ASSERT_X
argument_list|(
name|i
operator|>=
literal|0
operator|&&
name|i
operator|<
name|d
operator|->
name|size
argument_list|,
literal|"QVector<T>::at"
argument_list|,
literal|"index out of range"
argument_list|)
block|;
return|return
name|d
operator|->
name|begin
argument_list|()
index|[
name|i
index|]
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|operator
specifier|inline
specifier|const
name|T
operator|&
name|QVector
operator|<
name|T
operator|>
operator|::
name|operator
index|[]
operator|(
name|int
name|i
operator|)
specifier|const
block|{
name|Q_ASSERT_X
argument_list|(
name|i
operator|>=
literal|0
operator|&&
name|i
operator|<
name|d
operator|->
name|size
argument_list|,
literal|"QVector<T>::operator[]"
argument_list|,
literal|"index out of range"
argument_list|)
block|;
return|return
name|d
operator|->
name|begin
argument_list|()
index|[
name|i
index|]
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|operator
specifier|inline
name|T
operator|&
name|QVector
operator|<
name|T
operator|>
operator|::
name|operator
index|[]
operator|(
name|int
name|i
operator|)
block|{
name|Q_ASSERT_X
argument_list|(
name|i
operator|>=
literal|0
operator|&&
name|i
operator|<
name|d
operator|->
name|size
argument_list|,
literal|"QVector<T>::operator[]"
argument_list|,
literal|"index out of range"
argument_list|)
block|;
return|return
name|data
argument_list|()
index|[
name|i
index|]
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|insert
specifier|inline
name|void
name|QVector
operator|<
name|T
operator|>
operator|::
name|insert
argument_list|(
argument|int i
argument_list|,
argument|const T&t
argument_list|)
block|{
name|Q_ASSERT_X
argument_list|(
name|i
operator|>=
literal|0
operator|&&
name|i
operator|<=
name|d
operator|->
name|size
argument_list|,
literal|"QVector<T>::insert"
argument_list|,
literal|"index out of range"
argument_list|)
block|;
name|insert
argument_list|(
name|begin
argument_list|()
operator|+
name|i
argument_list|,
literal|1
argument_list|,
name|t
argument_list|)
block|; }
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|insert
specifier|inline
name|void
name|QVector
operator|<
name|T
operator|>
operator|::
name|insert
argument_list|(
argument|int i
argument_list|,
argument|int n
argument_list|,
argument|const T&t
argument_list|)
block|{
name|Q_ASSERT_X
argument_list|(
name|i
operator|>=
literal|0
operator|&&
name|i
operator|<=
name|d
operator|->
name|size
argument_list|,
literal|"QVector<T>::insert"
argument_list|,
literal|"index out of range"
argument_list|)
block|;
name|insert
argument_list|(
name|begin
argument_list|()
operator|+
name|i
argument_list|,
name|n
argument_list|,
name|t
argument_list|)
block|; }
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|remove
specifier|inline
name|void
name|QVector
operator|<
name|T
operator|>
operator|::
name|remove
argument_list|(
argument|int i
argument_list|,
argument|int n
argument_list|)
block|{
name|Q_ASSERT_X
argument_list|(
name|i
operator|>=
literal|0
operator|&&
name|n
operator|>=
literal|0
operator|&&
name|i
operator|+
name|n
operator|<=
name|d
operator|->
name|size
argument_list|,
literal|"QVector<T>::remove"
argument_list|,
literal|"index out of range"
argument_list|)
block|;
name|erase
argument_list|(
name|begin
argument_list|()
operator|+
name|i
argument_list|,
name|begin
argument_list|()
operator|+
name|i
operator|+
name|n
argument_list|)
block|; }
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|remove
specifier|inline
name|void
name|QVector
operator|<
name|T
operator|>
operator|::
name|remove
argument_list|(
argument|int i
argument_list|)
block|{
name|Q_ASSERT_X
argument_list|(
name|i
operator|>=
literal|0
operator|&&
name|i
operator|<
name|d
operator|->
name|size
argument_list|,
literal|"QVector<T>::remove"
argument_list|,
literal|"index out of range"
argument_list|)
block|;
name|erase
argument_list|(
name|begin
argument_list|()
operator|+
name|i
argument_list|,
name|begin
argument_list|()
operator|+
name|i
operator|+
literal|1
argument_list|)
block|; }
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|prepend
specifier|inline
name|void
name|QVector
operator|<
name|T
operator|>
operator|::
name|prepend
argument_list|(
argument|const T&t
argument_list|)
block|{
name|insert
argument_list|(
name|begin
argument_list|()
argument_list|,
literal|1
argument_list|,
name|t
argument_list|)
block|; }
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|replace
specifier|inline
name|void
name|QVector
operator|<
name|T
operator|>
operator|::
name|replace
argument_list|(
argument|int i
argument_list|,
argument|const T&t
argument_list|)
block|{
name|Q_ASSERT_X
argument_list|(
name|i
operator|>=
literal|0
operator|&&
name|i
operator|<
name|d
operator|->
name|size
argument_list|,
literal|"QVector<T>::replace"
argument_list|,
literal|"index out of range"
argument_list|)
block|;
specifier|const
name|T
name|copy
argument_list|(
name|t
argument_list|)
block|;
name|data
argument_list|()
index|[
name|i
index|]
operator|=
name|copy
block|; }
name|template
operator|<
name|typename
name|T
operator|>
DECL|member|operator
name|QVector
operator|<
name|T
operator|>
operator|&
name|QVector
operator|<
name|T
operator|>
operator|::
name|operator
operator|=
operator|(
specifier|const
name|QVector
operator|<
name|T
operator|>
operator|&
name|v
operator|)
block|{
if|if
condition|(
name|v
operator|.
name|d
operator|!=
name|d
condition|)
block|{
name|QVector
operator|<
name|T
operator|>
name|tmp
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|swap
argument_list|(
operator|*
name|this
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_return
return|return
operator|*
name|this
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|typename
name|QVector
operator|<
name|T
operator|>
operator|::
name|Data
operator|*
name|QVector
operator|<
name|T
operator|>
operator|::
name|malloc
argument_list|(
argument|int aalloc
argument_list|)
block|{
name|QVectorData
operator|*
name|vectordata
operator|=
name|QVectorData
operator|::
name|allocate
argument_list|(
name|offsetOfTypedData
argument_list|()
operator|+
name|aalloc
operator|*
sizeof|sizeof
argument_list|(
name|T
argument_list|)
argument_list|,
name|alignOfTypedData
argument_list|()
argument_list|)
block|;
name|Q_CHECK_PTR
argument_list|(
name|vectordata
argument_list|)
block|;
return|return
name|static_cast
operator|<
name|Data
operator|*
operator|>
operator|(
name|vectordata
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|QVector
operator|<
name|T
operator|>
operator|::
name|QVector
argument_list|(
argument|int asize
argument_list|)
block|{
name|d
operator|=
name|malloc
argument_list|(
name|asize
argument_list|)
block|;
name|d
operator|->
name|ref
operator|.
name|initializeOwned
argument_list|()
block|;
name|d
operator|->
name|size
operator|=
name|asize
block|;
name|d
operator|->
name|alloc
operator|=
name|uint
argument_list|(
name|d
operator|->
name|size
argument_list|)
block|;
name|d
operator|->
name|capacityReserved
operator|=
name|false
block|;
name|d
operator|->
name|offset
operator|=
name|offsetOfTypedData
argument_list|()
block|;
if|if
condition|(
name|QTypeInfo
operator|<
name|T
operator|>
operator|::
name|isComplex
condition|)
block|{
name|T
modifier|*
name|b
init|=
name|d
operator|->
name|begin
argument_list|()
decl_stmt|;
name|T
modifier|*
name|i
init|=
name|d
operator|->
name|end
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|!=
name|b
condition|)
name|new
argument_list|(
argument|--i
argument_list|)
name|T
expr_stmt|;
block|}
end_expr_stmt
begin_else
else|else
block|{
name|qMemSet
argument_list|(
name|d
operator|->
name|begin
argument_list|()
argument_list|,
literal|0
argument_list|,
name|asize
operator|*
sizeof|sizeof
argument_list|(
name|T
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_else
begin_expr_stmt
unit|}  template
operator|<
name|typename
name|T
operator|>
name|QVector
operator|<
name|T
operator|>
operator|::
name|QVector
argument_list|(
argument|int asize
argument_list|,
argument|const T&t
argument_list|)
block|{
name|d
operator|=
name|malloc
argument_list|(
name|asize
argument_list|)
block|;
name|d
operator|->
name|ref
operator|.
name|initializeOwned
argument_list|()
block|;
name|d
operator|->
name|size
operator|=
name|asize
block|;
name|d
operator|->
name|alloc
operator|=
name|uint
argument_list|(
name|d
operator|->
name|size
argument_list|)
block|;
name|d
operator|->
name|capacityReserved
operator|=
name|false
block|;
name|d
operator|->
name|offset
operator|=
name|offsetOfTypedData
argument_list|()
block|;
name|T
operator|*
name|i
operator|=
name|d
operator|->
name|end
argument_list|()
block|;
while|while
condition|(
name|i
operator|!=
name|d
operator|->
name|begin
argument_list|()
condition|)
name|new
argument_list|(
argument|--i
argument_list|)
name|T
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_ifdef
ifdef|#
directive|ifdef
name|Q_COMPILER_INITIALIZER_LISTS
end_ifdef
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|QVector
operator|<
name|T
operator|>
operator|::
name|QVector
argument_list|(
argument|std::initializer_list<T> args
argument_list|)
block|{
name|d
operator|=
name|malloc
argument_list|(
name|int
argument_list|(
name|args
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
block|;
name|d
operator|->
name|ref
operator|.
name|initializeOwned
argument_list|()
block|;
name|d
operator|->
name|size
operator|=
name|int
argument_list|(
name|args
operator|.
name|size
argument_list|()
argument_list|)
block|;
name|d
operator|->
name|alloc
operator|=
name|uint
argument_list|(
name|d
operator|->
name|size
argument_list|)
block|;
name|d
operator|->
name|capacityReserved
operator|=
name|false
block|;
name|d
operator|->
name|offset
operator|=
name|offsetOfTypedData
argument_list|()
block|;
if|if
condition|(
name|QTypeInfo
operator|<
name|T
operator|>
operator|::
name|isComplex
condition|)
block|{
name|T
modifier|*
name|b
init|=
name|d
operator|->
name|begin
argument_list|()
decl_stmt|;
name|T
modifier|*
name|i
init|=
name|d
operator|->
name|end
argument_list|()
decl_stmt|;
specifier|const
name|T
modifier|*
name|s
init|=
name|args
operator|.
name|end
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|!=
name|b
condition|)
name|new
argument_list|(
argument|--i
argument_list|)
name|T
argument_list|(
operator|*
operator|--
name|s
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_else
else|else
block|{
comment|// std::initializer_list<T>::iterator is guaranteed to be
comment|// const T* ([support.initlist]/1), so can be memcpy'ed away from:
operator|::
name|memcpy
argument_list|(
name|d
operator|->
name|begin
argument_list|()
argument_list|,
name|args
operator|.
name|begin
argument_list|()
argument_list|,
name|args
operator|.
name|size
argument_list|()
operator|*
sizeof|sizeof
argument_list|(
name|T
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_else
begin_endif
unit|}
endif|#
directive|endif
end_endif
begin_expr_stmt
unit|template
operator|<
name|typename
name|T
operator|>
name|void
name|QVector
operator|<
name|T
operator|>
operator|::
name|free
argument_list|(
argument|Data *x
argument_list|)
block|{
if|if
condition|(
name|QTypeInfo
operator|<
name|T
operator|>
operator|::
name|isComplex
condition|)
block|{
name|T
modifier|*
name|b
init|=
name|x
operator|->
name|begin
argument_list|()
decl_stmt|;
name|T
modifier|*
name|i
init|=
name|b
operator|+
name|x
operator|->
name|size
decl_stmt|;
while|while
condition|(
name|i
operator|--
operator|!=
name|b
condition|)
name|i
operator|->
expr|~
name|T
argument_list|()
expr_stmt|;
block|}
name|Data
operator|::
name|free
argument_list|(
name|x
argument_list|,
name|alignOfTypedData
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
unit|}  template
operator|<
name|typename
name|T
operator|>
name|void
name|QVector
operator|<
name|T
operator|>
operator|::
name|realloc
argument_list|(
argument|int asize
argument_list|,
argument|int aalloc
argument_list|)
block|{
name|Q_ASSERT
argument_list|(
name|asize
operator|<=
name|aalloc
argument_list|)
block|;
name|T
operator|*
name|pOld
block|;
name|T
operator|*
name|pNew
block|;
name|Data
operator|*
name|x
operator|=
name|d
block|;
if|if
condition|(
name|QTypeInfo
operator|<
name|T
operator|>
operator|::
name|isComplex
operator|&&
name|asize
operator|<
name|d
operator|->
name|size
operator|&&
name|isDetached
argument_list|()
condition|)
block|{
comment|// call the destructor on all objects that need to be
comment|// destroyed when shrinking
name|pOld
operator|=
name|d
operator|->
name|begin
argument_list|()
operator|+
name|d
operator|->
name|size
expr_stmt|;
name|pNew
operator|=
name|d
operator|->
name|begin
argument_list|()
operator|+
name|asize
expr_stmt|;
while|while
condition|(
name|asize
operator|<
name|d
operator|->
name|size
condition|)
block|{
operator|(
operator|--
name|pOld
operator|)
operator|->
operator|~
name|T
argument_list|()
expr_stmt|;
name|d
operator|->
name|size
operator|--
expr_stmt|;
block|}
end_expr_stmt
begin_expr_stmt
unit|}      if
operator|(
name|aalloc
operator|!=
name|int
argument_list|(
name|d
operator|->
name|alloc
argument_list|)
operator|||
operator|!
name|isDetached
argument_list|()
operator|)
block|{
comment|// (re)allocate memory
if|if
condition|(
name|QTypeInfo
operator|<
name|T
operator|>
operator|::
name|isStatic
condition|)
block|{
name|x
operator|=
name|malloc
argument_list|(
name|aalloc
argument_list|)
expr_stmt|;
name|Q_CHECK_PTR
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|x
operator|->
name|size
operator|=
literal|0
expr_stmt|;
block|}
end_expr_stmt
begin_elseif
elseif|else
if|if
condition|(
operator|!
name|isDetached
argument_list|()
condition|)
block|{
name|x
operator|=
name|malloc
argument_list|(
name|aalloc
argument_list|)
expr_stmt|;
name|Q_CHECK_PTR
argument_list|(
name|x
argument_list|)
expr_stmt|;
if|if
condition|(
name|QTypeInfo
operator|<
name|T
operator|>
operator|::
name|isComplex
condition|)
block|{
name|x
operator|->
name|size
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
operator|::
name|memcpy
argument_list|(
name|x
argument_list|,
name|d
argument_list|,
name|offsetOfTypedData
argument_list|()
operator|+
name|qMin
argument_list|(
name|uint
argument_list|(
name|aalloc
argument_list|)
argument_list|,
name|d
operator|->
name|alloc
argument_list|)
operator|*
sizeof|sizeof
argument_list|(
name|T
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|->
name|size
operator|=
name|d
operator|->
name|size
expr_stmt|;
block|}
block|}
end_elseif
begin_else
else|else
block|{
name|QT_TRY
block|{
name|QVectorData
modifier|*
name|mem
init|=
name|QVectorData
operator|::
name|reallocate
argument_list|(
name|d
argument_list|,
name|offsetOfTypedData
argument_list|()
operator|+
name|aalloc
operator|*
sizeof|sizeof
argument_list|(
name|T
argument_list|)
argument_list|,
name|offsetOfTypedData
argument_list|()
operator|+
name|d
operator|->
name|alloc
operator|*
sizeof|sizeof
argument_list|(
name|T
argument_list|)
argument_list|,
name|alignOfTypedData
argument_list|()
argument_list|)
decl_stmt|;
name|Q_CHECK_PTR
argument_list|(
name|mem
argument_list|)
expr_stmt|;
name|x
operator|=
name|d
operator|=
name|static_cast
operator|<
name|Data
operator|*
operator|>
operator|(
name|mem
operator|)
expr_stmt|;
name|x
operator|->
name|size
operator|=
name|d
operator|->
name|size
expr_stmt|;
block|}
name|QT_CATCH
argument_list|(
argument|const std::bad_alloc&
argument_list|)
block|{
if|if
condition|(
name|aalloc
operator|>
name|int
argument_list|(
name|d
operator|->
name|alloc
argument_list|)
condition|)
comment|// ignore the error in case we are just shrinking.
name|QT_RETHROW
expr_stmt|;
block|}
block|}
end_else
begin_expr_stmt
name|x
operator|->
name|ref
operator|.
name|initializeOwned
argument_list|()
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|x
operator|->
name|alloc
operator|=
name|uint
argument_list|(
name|aalloc
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|x
operator|->
name|capacityReserved
operator|=
name|d
operator|->
name|capacityReserved
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|x
operator|->
name|offset
operator|=
name|offsetOfTypedData
argument_list|()
expr_stmt|;
end_expr_stmt
begin_expr_stmt
unit|}      if
operator|(
name|QTypeInfo
operator|<
name|T
operator|>
operator|::
name|isComplex
operator|)
block|{
name|QT_TRY
block|{
name|pOld
operator|=
name|d
operator|->
name|begin
argument_list|()
operator|+
name|x
operator|->
name|size
block|;
name|pNew
operator|=
name|x
operator|->
name|begin
argument_list|()
operator|+
name|x
operator|->
name|size
block|;
comment|// copy objects from the old array into the new array
specifier|const
name|int
name|toMove
operator|=
name|qMin
argument_list|(
name|asize
argument_list|,
name|d
operator|->
name|size
argument_list|)
block|;
while|while
condition|(
name|x
operator|->
name|size
operator|<
name|toMove
condition|)
block|{
name|new
argument_list|(
argument|pNew++
argument_list|)
name|T
argument_list|(
operator|*
name|pOld
operator|++
argument_list|)
expr_stmt|;
name|x
operator|->
name|size
operator|++
expr_stmt|;
block|}
comment|// construct all new objects when growing
while|while
condition|(
name|x
operator|->
name|size
operator|<
name|asize
condition|)
block|{
name|new
argument_list|(
argument|pNew++
argument_list|)
name|T
expr_stmt|;
name|x
operator|->
name|size
operator|++
expr_stmt|;
block|}
end_expr_stmt
begin_expr_stmt
unit|} QT_CATCH
operator|(
operator|...
operator|)
block|{
name|free
argument_list|(
name|x
argument_list|)
block|;
name|QT_RETHROW
block|;         }
end_expr_stmt
begin_if
unit|} else
if|if
condition|(
name|asize
operator|>
name|x
operator|->
name|size
condition|)
block|{
comment|// initialize newly allocated memory to 0
name|qMemSet
argument_list|(
name|x
operator|->
name|end
argument_list|()
argument_list|,
literal|0
argument_list|,
operator|(
name|asize
operator|-
name|x
operator|->
name|size
operator|)
operator|*
sizeof|sizeof
argument_list|(
name|T
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_if
begin_expr_stmt
name|x
operator|->
name|size
operator|=
name|asize
expr_stmt|;
end_expr_stmt
begin_if
if|if
condition|(
name|d
operator|!=
name|x
condition|)
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|ref
operator|.
name|deref
argument_list|()
condition|)
name|free
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|d
operator|=
name|x
expr_stmt|;
block|}
end_if
begin_expr_stmt
unit|}  template
operator|<
name|typename
name|T
operator|>
name|Q_OUTOFLINE_TEMPLATE
name|T
name|QVector
operator|<
name|T
operator|>
operator|::
name|value
argument_list|(
argument|int i
argument_list|)
specifier|const
block|{
if|if
condition|(
name|i
operator|<
literal|0
operator|||
name|i
operator|>=
name|d
operator|->
name|size
condition|)
block|{
return|return
name|T
argument_list|()
return|;
block|}
end_expr_stmt
begin_return
return|return
name|d
operator|->
name|begin
argument_list|()
index|[
name|i
index|]
return|;
end_return
begin_expr_stmt
unit|} template
operator|<
name|typename
name|T
operator|>
name|Q_OUTOFLINE_TEMPLATE
name|T
name|QVector
operator|<
name|T
operator|>
operator|::
name|value
argument_list|(
argument|int i
argument_list|,
argument|const T&defaultValue
argument_list|)
specifier|const
block|{
return|return
operator|(
operator|(
name|i
operator|<
literal|0
operator|||
name|i
operator|>=
name|d
operator|->
name|size
operator|)
operator|?
name|defaultValue
operator|:
name|d
operator|->
name|begin
argument_list|()
index|[
name|i
index|]
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|void
name|QVector
operator|<
name|T
operator|>
operator|::
name|append
argument_list|(
argument|const T&t
argument_list|)
block|{
if|if
condition|(
operator|!
name|isDetached
argument_list|()
operator|||
name|d
operator|->
name|size
operator|+
literal|1
operator|>
name|int
argument_list|(
name|d
operator|->
name|alloc
argument_list|)
condition|)
block|{
specifier|const
name|T
name|copy
parameter_list|(
name|t
parameter_list|)
function_decl|;
name|realloc
argument_list|(
name|d
operator|->
name|size
argument_list|,
operator|(
name|d
operator|->
name|size
operator|+
literal|1
operator|>
name|int
argument_list|(
name|d
operator|->
name|alloc
argument_list|)
operator|)
condition|?
name|QVectorData
operator|::
name|grow
argument_list|(
name|offsetOfTypedData
argument_list|()
argument_list|,
name|d
operator|->
name|size
operator|+
literal|1
argument_list|,
sizeof|sizeof
argument_list|(
name|T
argument_list|)
argument_list|)
else|:
name|int
argument_list|(
name|d
operator|->
name|alloc
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|QTypeInfo
operator|<
name|T
operator|>
operator|::
name|isComplex
condition|)
name|new
argument_list|(
argument|d->end()
argument_list|)
name|T
argument_list|(
name|copy
argument_list|)
expr_stmt|;
else|else
operator|*
name|d
operator|->
name|end
argument_list|()
operator|=
name|copy
expr_stmt|;
block|}
end_expr_stmt
begin_else
else|else
block|{
if|if
condition|(
name|QTypeInfo
operator|<
name|T
operator|>
operator|::
name|isComplex
condition|)
name|new
argument_list|(
argument|d->end()
argument_list|)
name|T
argument_list|(
name|t
argument_list|)
expr_stmt|;
else|else
operator|*
name|d
operator|->
name|end
argument_list|()
operator|=
name|t
expr_stmt|;
block|}
end_else
begin_expr_stmt
operator|++
name|d
operator|->
name|size
expr_stmt|;
end_expr_stmt
begin_expr_stmt
unit|}  template
operator|<
name|typename
name|T
operator|>
name|typename
name|QVector
operator|<
name|T
operator|>
operator|::
name|iterator
name|QVector
operator|<
name|T
operator|>
operator|::
name|insert
argument_list|(
argument|iterator before
argument_list|,
argument|size_type n
argument_list|,
argument|const T&t
argument_list|)
block|{
name|int
name|offset
operator|=
name|int
argument_list|(
name|before
operator|-
name|d
operator|->
name|begin
argument_list|()
argument_list|)
block|;
if|if
condition|(
name|n
operator|!=
literal|0
condition|)
block|{
specifier|const
name|T
name|copy
parameter_list|(
name|t
parameter_list|)
function_decl|;
if|if
condition|(
operator|!
name|isDetached
argument_list|()
operator|||
name|d
operator|->
name|size
operator|+
name|n
operator|>
name|int
argument_list|(
name|d
operator|->
name|alloc
argument_list|)
condition|)
name|realloc
argument_list|(
name|d
operator|->
name|size
argument_list|,
name|QVectorData
operator|::
name|grow
argument_list|(
name|offsetOfTypedData
argument_list|()
argument_list|,
name|d
operator|->
name|size
operator|+
name|n
argument_list|,
sizeof|sizeof
argument_list|(
name|T
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|QTypeInfo
operator|<
name|T
operator|>
operator|::
name|isStatic
condition|)
block|{
name|T
modifier|*
name|b
init|=
name|d
operator|->
name|end
argument_list|()
decl_stmt|;
name|T
modifier|*
name|i
init|=
name|d
operator|->
name|end
argument_list|()
operator|+
name|n
decl_stmt|;
while|while
condition|(
name|i
operator|!=
name|b
condition|)
name|new
argument_list|(
argument|--i
argument_list|)
name|T
expr_stmt|;
name|i
operator|=
name|d
operator|->
name|end
argument_list|()
expr_stmt|;
name|T
modifier|*
name|j
init|=
name|i
operator|+
name|n
decl_stmt|;
name|b
operator|=
name|d
operator|->
name|begin
argument_list|()
operator|+
name|offset
expr_stmt|;
while|while
condition|(
name|i
operator|!=
name|b
condition|)
operator|*
operator|--
name|j
operator|=
operator|*
operator|--
name|i
expr_stmt|;
name|i
operator|=
name|b
operator|+
name|n
expr_stmt|;
while|while
condition|(
name|i
operator|!=
name|b
condition|)
operator|*
operator|--
name|i
operator|=
name|copy
expr_stmt|;
block|}
end_expr_stmt
begin_else
else|else
block|{
name|T
modifier|*
name|b
init|=
name|d
operator|->
name|begin
argument_list|()
operator|+
name|offset
decl_stmt|;
name|T
modifier|*
name|i
init|=
name|b
operator|+
name|n
decl_stmt|;
name|memmove
argument_list|(
name|i
argument_list|,
name|b
argument_list|,
operator|(
name|d
operator|->
name|size
operator|-
name|offset
operator|)
operator|*
sizeof|sizeof
argument_list|(
name|T
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|i
operator|!=
name|b
condition|)
name|new
argument_list|(
argument|--i
argument_list|)
name|T
argument_list|(
name|copy
argument_list|)
expr_stmt|;
block|}
end_else
begin_expr_stmt
name|d
operator|->
name|size
operator|+=
name|n
expr_stmt|;
end_expr_stmt
begin_expr_stmt
unit|}     return
name|d
operator|->
name|begin
argument_list|()
operator|+
name|offset
expr_stmt|;
end_expr_stmt
begin_expr_stmt
unit|}  template
operator|<
name|typename
name|T
operator|>
name|typename
name|QVector
operator|<
name|T
operator|>
operator|::
name|iterator
name|QVector
operator|<
name|T
operator|>
operator|::
name|erase
argument_list|(
argument|iterator abegin
argument_list|,
argument|iterator aend
argument_list|)
block|{
name|int
name|f
operator|=
name|int
argument_list|(
name|abegin
operator|-
name|d
operator|->
name|begin
argument_list|()
argument_list|)
block|;
name|int
name|l
operator|=
name|int
argument_list|(
name|aend
operator|-
name|d
operator|->
name|begin
argument_list|()
argument_list|)
block|;
name|int
name|n
operator|=
name|l
operator|-
name|f
block|;
name|detach
argument_list|()
block|;
if|if
condition|(
name|QTypeInfo
operator|<
name|T
operator|>
operator|::
name|isComplex
condition|)
block|{
name|qCopy
argument_list|(
name|d
operator|->
name|begin
argument_list|()
operator|+
name|l
argument_list|,
name|d
operator|->
name|end
argument_list|()
argument_list|,
name|d
operator|->
name|begin
argument_list|()
operator|+
name|f
argument_list|)
expr_stmt|;
name|T
modifier|*
name|i
init|=
name|d
operator|->
name|end
argument_list|()
decl_stmt|;
name|T
modifier|*
name|b
init|=
name|d
operator|->
name|end
argument_list|()
operator|-
name|n
decl_stmt|;
while|while
condition|(
name|i
operator|!=
name|b
condition|)
block|{
operator|--
name|i
expr_stmt|;
name|i
operator|->
expr|~
name|T
argument_list|()
expr_stmt|;
block|}
end_expr_stmt
begin_block
unit|} else
block|{
name|memmove
argument_list|(
name|d
operator|->
name|begin
argument_list|()
operator|+
name|f
argument_list|,
name|d
operator|->
name|begin
argument_list|()
operator|+
name|l
argument_list|,
operator|(
name|d
operator|->
name|size
operator|-
name|l
operator|)
operator|*
sizeof|sizeof
argument_list|(
name|T
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_block
begin_expr_stmt
name|d
operator|->
name|size
operator|-=
name|n
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|d
operator|->
name|begin
argument_list|()
operator|+
name|f
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|typename
name|T
operator|>
name|bool
name|QVector
operator|<
name|T
operator|>
operator|::
name|operator
operator|==
operator|(
specifier|const
name|QVector
operator|<
name|T
operator|>
operator|&
name|v
operator|)
specifier|const
block|{
if|if
condition|(
name|d
operator|->
name|size
operator|!=
name|v
operator|.
name|d
operator|->
name|size
condition|)
return|return
name|false
return|;
end_expr_stmt
begin_if
if|if
condition|(
name|d
operator|==
name|v
operator|.
name|d
condition|)
return|return
name|true
return|;
end_if
begin_decl_stmt
name|T
modifier|*
name|b
init|=
name|d
operator|->
name|begin
argument_list|()
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|T
modifier|*
name|i
init|=
name|b
operator|+
name|d
operator|->
name|size
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|T
modifier|*
name|j
init|=
name|v
operator|.
name|d
operator|->
name|end
argument_list|()
decl_stmt|;
end_decl_stmt
begin_while
while|while
condition|(
name|i
operator|!=
name|b
condition|)
if|if
condition|(
operator|!
operator|(
operator|*
operator|--
name|i
operator|==
operator|*
operator|--
name|j
operator|)
condition|)
return|return
name|false
return|;
end_while
begin_return
return|return
name|true
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|typename
name|T
operator|>
name|QVector
operator|<
name|T
operator|>
operator|&
name|QVector
operator|<
name|T
operator|>
operator|::
name|fill
argument_list|(
argument|const T&from
argument_list|,
argument|int asize
argument_list|)
block|{
specifier|const
name|T
name|copy
argument_list|(
name|from
argument_list|)
block|;
name|resize
argument_list|(
name|asize
operator|<
literal|0
condition|?
name|d
operator|->
name|size
else|:
name|asize
argument_list|)
block|;
if|if
condition|(
name|d
operator|->
name|size
condition|)
block|{
name|T
modifier|*
name|i
init|=
name|d
operator|->
name|end
argument_list|()
decl_stmt|;
name|T
modifier|*
name|b
init|=
name|d
operator|->
name|begin
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|!=
name|b
condition|)
operator|*
operator|--
name|i
operator|=
name|copy
expr_stmt|;
block|}
end_expr_stmt
begin_return
return|return
operator|*
name|this
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|typename
name|T
operator|>
name|QVector
operator|<
name|T
operator|>
operator|&
name|QVector
operator|<
name|T
operator|>
operator|::
name|operator
operator|+=
operator|(
specifier|const
name|QVector
operator|&
name|l
operator|)
block|{
name|int
name|newSize
operator|=
name|d
operator|->
name|size
operator|+
name|l
operator|.
name|d
operator|->
name|size
block|;
name|realloc
argument_list|(
name|d
operator|->
name|size
argument_list|,
name|newSize
argument_list|)
block|;
name|T
operator|*
name|w
operator|=
name|d
operator|->
name|begin
argument_list|()
operator|+
name|newSize
block|;
name|T
operator|*
name|i
operator|=
name|l
operator|.
name|d
operator|->
name|end
argument_list|()
block|;
name|T
operator|*
name|b
operator|=
name|l
operator|.
name|d
operator|->
name|begin
argument_list|()
block|;
while|while
condition|(
name|i
operator|!=
name|b
condition|)
block|{
if|if
condition|(
name|QTypeInfo
operator|<
name|T
operator|>
operator|::
name|isComplex
condition|)
name|new
argument_list|(
argument|--w
argument_list|)
name|T
argument_list|(
operator|*
operator|--
name|i
argument_list|)
expr_stmt|;
else|else
operator|*
operator|--
name|w
operator|=
operator|*
operator|--
name|i
expr_stmt|;
block|}
name|d
operator|->
name|size
operator|=
name|newSize
expr_stmt|;
end_expr_stmt
begin_return
return|return
operator|*
name|this
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|typename
name|T
operator|>
name|int
name|QVector
operator|<
name|T
operator|>
operator|::
name|indexOf
argument_list|(
argument|const T&t
argument_list|,
argument|int from
argument_list|)
specifier|const
block|{
if|if
condition|(
name|from
operator|<
literal|0
condition|)
name|from
operator|=
name|qMax
argument_list|(
name|from
operator|+
name|d
operator|->
name|size
argument_list|,
literal|0
argument_list|)
expr_stmt|;
end_expr_stmt
begin_if
if|if
condition|(
name|from
operator|<
name|d
operator|->
name|size
condition|)
block|{
name|T
modifier|*
name|n
init|=
name|d
operator|->
name|begin
argument_list|()
operator|+
name|from
operator|-
literal|1
decl_stmt|;
name|T
modifier|*
name|e
init|=
name|d
operator|->
name|end
argument_list|()
decl_stmt|;
while|while
condition|(
operator|++
name|n
operator|!=
name|e
condition|)
if|if
condition|(
operator|*
name|n
operator|==
name|t
condition|)
return|return
name|n
operator|-
name|d
operator|->
name|begin
argument_list|()
return|;
block|}
end_if
begin_return
return|return
operator|-
literal|1
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|typename
name|T
operator|>
name|int
name|QVector
operator|<
name|T
operator|>
operator|::
name|lastIndexOf
argument_list|(
argument|const T&t
argument_list|,
argument|int from
argument_list|)
specifier|const
block|{
if|if
condition|(
name|from
operator|<
literal|0
condition|)
name|from
operator|+=
name|d
operator|->
name|size
expr_stmt|;
elseif|else
if|if
condition|(
name|from
operator|>=
name|d
operator|->
name|size
condition|)
name|from
operator|=
name|d
operator|->
name|size
operator|-
literal|1
expr_stmt|;
end_expr_stmt
begin_if
if|if
condition|(
name|from
operator|>=
literal|0
condition|)
block|{
name|T
modifier|*
name|b
init|=
name|d
operator|->
name|begin
argument_list|()
decl_stmt|;
name|T
modifier|*
name|n
init|=
name|d
operator|->
name|begin
argument_list|()
operator|+
name|from
operator|+
literal|1
decl_stmt|;
while|while
condition|(
name|n
operator|!=
name|b
condition|)
block|{
if|if
condition|(
operator|*
operator|--
name|n
operator|==
name|t
condition|)
return|return
name|n
operator|-
name|b
return|;
block|}
block|}
end_if
begin_return
return|return
operator|-
literal|1
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|typename
name|T
operator|>
name|bool
name|QVector
operator|<
name|T
operator|>
operator|::
name|contains
argument_list|(
argument|const T&t
argument_list|)
specifier|const
block|{
name|T
operator|*
name|b
operator|=
name|d
operator|->
name|begin
argument_list|()
block|;
name|T
operator|*
name|i
operator|=
name|d
operator|->
name|end
argument_list|()
block|;
while|while
condition|(
name|i
operator|!=
name|b
condition|)
if|if
condition|(
operator|*
operator|--
name|i
operator|==
name|t
condition|)
return|return
name|true
return|;
end_expr_stmt
begin_return
return|return
name|false
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|typename
name|T
operator|>
name|int
name|QVector
operator|<
name|T
operator|>
operator|::
name|count
argument_list|(
argument|const T&t
argument_list|)
specifier|const
block|{
name|int
name|c
operator|=
literal|0
block|;
name|T
operator|*
name|b
operator|=
name|d
operator|->
name|begin
argument_list|()
block|;
name|T
operator|*
name|i
operator|=
name|d
operator|->
name|end
argument_list|()
block|;
while|while
condition|(
name|i
operator|!=
name|b
condition|)
if|if
condition|(
operator|*
operator|--
name|i
operator|==
name|t
condition|)
operator|++
name|c
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|c
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|typename
name|T
operator|>
name|Q_OUTOFLINE_TEMPLATE
name|QVector
operator|<
name|T
operator|>
name|QVector
operator|<
name|T
operator|>
operator|::
name|mid
argument_list|(
argument|int pos
argument_list|,
argument|int length
argument_list|)
specifier|const
block|{
if|if
condition|(
name|length
operator|<
literal|0
condition|)
name|length
operator|=
name|size
argument_list|()
operator|-
name|pos
expr_stmt|;
end_expr_stmt
begin_if
if|if
condition|(
name|pos
operator|==
literal|0
operator|&&
name|length
operator|==
name|size
argument_list|()
condition|)
return|return
operator|*
name|this
return|;
end_if
begin_if
if|if
condition|(
name|pos
operator|+
name|length
operator|>
name|size
argument_list|()
condition|)
name|length
operator|=
name|size
argument_list|()
operator|-
name|pos
expr_stmt|;
end_if
begin_expr_stmt
name|QVector
operator|<
name|T
operator|>
name|copy
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|copy
operator|.
name|reserve
argument_list|(
name|length
argument_list|)
expr_stmt|;
end_expr_stmt
begin_for
for|for
control|(
name|int
name|i
init|=
name|pos
init|;
name|i
operator|<
name|pos
operator|+
name|length
condition|;
operator|++
name|i
control|)
name|copy
operator|+=
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
end_for
begin_return
return|return
name|copy
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|typename
name|T
operator|>
name|Q_OUTOFLINE_TEMPLATE
name|QList
operator|<
name|T
operator|>
name|QVector
operator|<
name|T
operator|>
operator|::
name|toList
argument_list|()
specifier|const
block|{
name|QList
operator|<
name|T
operator|>
name|result
block|;
name|result
operator|.
name|reserve
argument_list|(
name|size
argument_list|()
argument_list|)
block|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|result
operator|.
name|append
argument_list|(
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|result
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|typename
name|T
operator|>
name|Q_OUTOFLINE_TEMPLATE
name|QVector
operator|<
name|T
operator|>
name|QList
operator|<
name|T
operator|>
operator|::
name|toVector
argument_list|()
specifier|const
block|{
name|QVector
operator|<
name|T
operator|>
name|result
argument_list|(
name|size
argument_list|()
argument_list|)
block|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|result
index|[
name|i
index|]
operator|=
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|result
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|typename
name|T
operator|>
name|QVector
operator|<
name|T
operator|>
name|QVector
operator|<
name|T
operator|>
operator|::
name|fromList
argument_list|(
argument|const QList<T>&list
argument_list|)
block|{
return|return
name|list
operator|.
name|toVector
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|QList
operator|<
name|T
operator|>
name|QList
operator|<
name|T
operator|>
operator|::
name|fromVector
argument_list|(
argument|const QVector<T>&vector
argument_list|)
block|{
return|return
name|vector
operator|.
name|toList
argument_list|()
return|;
block|}
end_expr_stmt
begin_macro
name|Q_DECLARE_SEQUENTIAL_ITERATOR
argument_list|(
argument|Vector
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_MUTABLE_SEQUENTIAL_ITERATOR
argument_list|(
argument|Vector
argument_list|)
end_macro
begin_comment
comment|/*    ### Qt 5:    ### This needs to be removed for next releases of Qt. It is a workaround for vc++ because    ### Qt exports QPolygon and QPolygonF that inherit QVector<QPoint> and    ### QVector<QPointF> respectively. */
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|Q_CC_MSVC
end_ifdef
begin_expr_stmt
name|QT_BEGIN_INCLUDE_NAMESPACE
include|#
directive|include
file|<QtCore/QPointF>
include|#
directive|include
file|<QtCore/QPoint>
name|QT_END_INCLUDE_NAMESPACE
if|#
directive|if
name|defined
argument_list|(
name|QT_BUILD_CORE_LIB
argument_list|)
DECL|macro|Q_TEMPLATE_EXTERN
define|#
directive|define
name|Q_TEMPLATE_EXTERN
else|#
directive|else
define|#
directive|define
name|Q_TEMPLATE_EXTERN
value|extern
endif|#
directive|endif
name|Q_TEMPLATE_EXTERN
name|template
name|class
name|Q_CORE_EXPORT
name|QVector
operator|<
name|QPointF
operator|>
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|variable|QPoint
name|Q_TEMPLATE_EXTERN
name|template
name|class
name|Q_CORE_EXPORT
name|QVector
operator|<
name|QPoint
operator|>
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
name|QT_END_NAMESPACE
name|QT_END_HEADER
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QVECTOR_H
end_comment
end_unit
