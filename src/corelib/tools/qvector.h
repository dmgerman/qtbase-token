begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QVECTOR_H
end_ifndef
begin_define
DECL|macro|QVECTOR_H
define|#
directive|define
name|QVECTOR_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qalgorithms.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qiterator.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qlist.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qrefcount.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qarraydata.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qhashfunctions.h>
end_include
begin_include
include|#
directive|include
file|<iterator>
end_include
begin_include
include|#
directive|include
file|<vector>
end_include
begin_include
include|#
directive|include
file|<stdlib.h>
end_include
begin_include
include|#
directive|include
file|<string.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_COMPILER_INITIALIZER_LISTS
end_ifdef
begin_include
include|#
directive|include
file|<initializer_list>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<algorithm>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QRegion
name|class
name|QRegion
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|class
name|QVector
block|{
typedef|typedef
name|QTypedArrayData
operator|<
name|T
operator|>
name|Data
expr_stmt|;
name|Data
operator|*
name|d
expr_stmt|;
end_expr_stmt
begin_label
name|public
label|:
end_label
begin_expr_stmt
specifier|inline
name|QVector
argument_list|()
name|Q_DECL_NOTHROW
operator|:
name|d
argument_list|(
argument|Data::sharedNull()
argument_list|)
block|{ }
name|explicit
name|QVector
argument_list|(
argument|int size
argument_list|)
expr_stmt|;
end_expr_stmt
begin_macro
name|QVector
argument_list|(
argument|int size
argument_list|,
argument|const T&t
argument_list|)
end_macro
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_expr_stmt
specifier|inline
name|QVector
argument_list|(
specifier|const
name|QVector
operator|<
name|T
operator|>
operator|&
name|v
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
specifier|inline
operator|~
name|QVector
argument_list|()
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|ref
operator|.
name|deref
argument_list|()
condition|)
name|freeData
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_expr_stmt
name|QVector
operator|<
name|T
operator|>
operator|&
name|operator
operator|=
operator|(
specifier|const
name|QVector
operator|<
name|T
operator|>
operator|&
name|v
operator|)
expr_stmt|;
end_expr_stmt
begin_ifdef
ifdef|#
directive|ifdef
name|Q_COMPILER_RVALUE_REFS
end_ifdef
begin_macro
name|QVector
argument_list|(
argument|QVector<T>&&other
argument_list|)
end_macro
begin_label
name|Q_DECL_NOTHROW
label|:
end_label
begin_macro
name|d
argument_list|(
argument|other.d
argument_list|)
end_macro
begin_block
block|{
name|other
operator|.
name|d
operator|=
name|Data
operator|::
name|sharedNull
argument_list|()
expr_stmt|;
block|}
end_block
begin_expr_stmt
name|QVector
operator|<
name|T
operator|>
operator|&
name|operator
operator|=
operator|(
name|QVector
operator|<
name|T
operator|>
operator|&&
name|other
operator|)
name|Q_DECL_NOTHROW
block|{
name|QVector
name|moved
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|other
argument_list|)
argument_list|)
block|;
name|swap
argument_list|(
name|moved
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|void
name|swap
argument_list|(
name|QVector
operator|<
name|T
operator|>
operator|&
name|other
argument_list|)
name|Q_DECL_NOTHROW
block|{
name|qSwap
argument_list|(
name|d
argument_list|,
name|other
operator|.
name|d
argument_list|)
expr_stmt|;
block|}
end_decl_stmt
begin_ifdef
ifdef|#
directive|ifdef
name|Q_COMPILER_INITIALIZER_LISTS
end_ifdef
begin_expr_stmt
specifier|inline
name|QVector
argument_list|(
name|std
operator|::
name|initializer_list
operator|<
name|T
operator|>
name|args
argument_list|)
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QVector
operator|<
name|T
operator|>
operator|&
name|v
operator|)
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|QVector
operator|<
name|T
operator|>
operator|&
name|v
operator|)
specifier|const
block|{
return|return
operator|!
operator|(
operator|*
name|this
operator|==
name|v
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|int
name|size
argument_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|size
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|isEmpty
argument_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|size
operator|==
literal|0
return|;
block|}
end_expr_stmt
begin_function_decl
name|void
name|resize
parameter_list|(
name|int
name|size
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
specifier|inline
name|int
name|capacity
argument_list|()
specifier|const
block|{
return|return
name|int
argument_list|(
name|d
operator|->
name|alloc
argument_list|)
return|;
block|}
end_expr_stmt
begin_function_decl
name|void
name|reserve
parameter_list|(
name|int
name|size
parameter_list|)
function_decl|;
end_function_decl
begin_function
specifier|inline
name|void
name|squeeze
parameter_list|()
block|{
name|reallocData
argument_list|(
name|d
operator|->
name|size
argument_list|,
name|d
operator|->
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|capacityReserved
condition|)
block|{
comment|// capacity reserved in a read only memory would be useless
comment|// this checks avoid writing to such memory.
name|d
operator|->
name|capacityReserved
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_function_decl
specifier|inline
name|void
name|detach
parameter_list|()
function_decl|;
end_function_decl
begin_expr_stmt
specifier|inline
name|bool
name|isDetached
argument_list|()
specifier|const
block|{
return|return
operator|!
name|d
operator|->
name|ref
operator|.
name|isShared
argument_list|()
return|;
block|}
end_expr_stmt
begin_if
if|#
directive|if
name|QT_SUPPORTS
argument_list|(
name|UNSHARABLE_CONTAINERS
argument_list|)
end_if
begin_function
specifier|inline
name|void
name|setSharable
parameter_list|(
name|bool
name|sharable
parameter_list|)
block|{
if|if
condition|(
name|sharable
operator|==
name|d
operator|->
name|ref
operator|.
name|isSharable
argument_list|()
condition|)
return|return;
if|if
condition|(
operator|!
name|sharable
condition|)
name|detach
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|==
name|Data
operator|::
name|unsharableEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|sharable
condition|)
name|d
operator|=
name|Data
operator|::
name|sharedNull
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|ref
operator|.
name|setSharable
argument_list|(
name|sharable
argument_list|)
expr_stmt|;
block|}
name|Q_ASSERT
argument_list|(
name|d
operator|->
name|ref
operator|.
name|isSharable
argument_list|()
operator|==
name|sharable
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
specifier|inline
name|bool
name|isSharedWith
argument_list|(
specifier|const
name|QVector
operator|<
name|T
operator|>
operator|&
name|other
argument_list|)
decl|const
block|{
return|return
name|d
operator|==
name|other
operator|.
name|d
return|;
block|}
end_decl_stmt
begin_function
specifier|inline
name|T
modifier|*
name|data
parameter_list|()
block|{
name|detach
argument_list|()
expr_stmt|;
return|return
name|d
operator|->
name|begin
argument_list|()
return|;
block|}
end_function
begin_expr_stmt
specifier|inline
specifier|const
name|T
operator|*
name|data
argument_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|begin
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
specifier|const
name|T
operator|*
name|constData
argument_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|begin
argument_list|()
return|;
block|}
end_expr_stmt
begin_function_decl
name|void
name|clear
parameter_list|()
function_decl|;
end_function_decl
begin_decl_stmt
specifier|const
name|T
modifier|&
name|at
argument_list|(
name|int
name|i
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_function_decl
name|T
modifier|&
name|operator
function_decl|[]
parameter_list|(
name|int
name|i
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
specifier|const
name|T
modifier|&
name|operator
index|[]
argument_list|(
name|int
name|i
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_function_decl
name|void
name|append
parameter_list|(
specifier|const
name|T
modifier|&
name|t
parameter_list|)
function_decl|;
end_function_decl
begin_ifdef
ifdef|#
directive|ifdef
name|Q_COMPILER_RVALUE_REFS
end_ifdef
begin_decl_stmt
name|void
name|append
argument_list|(
name|T
operator|&&
name|t
argument_list|)
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
specifier|inline
name|void
name|append
argument_list|(
specifier|const
name|QVector
operator|<
name|T
operator|>
operator|&
name|l
argument_list|)
block|{
operator|*
name|this
operator|+=
name|l
expr_stmt|;
block|}
end_decl_stmt
begin_function_decl
name|void
name|prepend
parameter_list|(
specifier|const
name|T
modifier|&
name|t
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|insert
parameter_list|(
name|int
name|i
parameter_list|,
specifier|const
name|T
modifier|&
name|t
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|insert
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|n
parameter_list|,
specifier|const
name|T
modifier|&
name|t
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|replace
parameter_list|(
name|int
name|i
parameter_list|,
specifier|const
name|T
modifier|&
name|t
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|remove
parameter_list|(
name|int
name|i
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|remove
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|n
parameter_list|)
function_decl|;
end_function_decl
begin_function
specifier|inline
name|void
name|removeFirst
parameter_list|()
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|erase
argument_list|(
name|d
operator|->
name|begin
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function_decl
specifier|inline
name|void
name|removeLast
parameter_list|()
function_decl|;
end_function_decl
begin_function
specifier|inline
name|T
name|takeFirst
parameter_list|()
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|T
name|r
init|=
name|first
argument_list|()
decl_stmt|;
name|removeFirst
argument_list|()
expr_stmt|;
return|return
name|r
return|;
block|}
end_function
begin_function
specifier|inline
name|T
name|takeLast
parameter_list|()
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|T
name|r
init|=
name|last
argument_list|()
decl_stmt|;
name|removeLast
argument_list|()
expr_stmt|;
return|return
name|r
return|;
block|}
end_function
begin_expr_stmt
name|QVector
operator|<
name|T
operator|>
operator|&
name|fill
argument_list|(
argument|const T&t
argument_list|,
argument|int size = -
literal|1
argument_list|)
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|int
name|indexOf
argument_list|(
specifier|const
name|T
operator|&
name|t
argument_list|,
name|int
name|from
operator|=
literal|0
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|int
name|lastIndexOf
argument_list|(
specifier|const
name|T
operator|&
name|t
argument_list|,
name|int
name|from
operator|=
operator|-
literal|1
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|bool
name|contains
argument_list|(
specifier|const
name|T
operator|&
name|t
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|int
name|count
argument_list|(
specifier|const
name|T
operator|&
name|t
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_comment
comment|// QList compatibility
end_comment
begin_function
name|void
name|removeAt
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
name|int
name|removeAll
parameter_list|(
specifier|const
name|T
modifier|&
name|t
parameter_list|)
block|{
specifier|const
name|const_iterator
name|ce
init|=
name|this
operator|->
name|cend
argument_list|()
decl_stmt|,
name|cit
init|=
name|std
operator|::
name|find
argument_list|(
name|this
operator|->
name|cbegin
argument_list|()
argument_list|,
name|ce
argument_list|,
name|t
argument_list|)
decl_stmt|;
if|if
condition|(
name|cit
operator|==
name|ce
condition|)
return|return
literal|0
return|;
comment|// next operation detaches, so ce, cit may become invalidated:
specifier|const
name|int
name|firstFoundIdx
init|=
name|std
operator|::
name|distance
argument_list|(
name|this
operator|->
name|cbegin
argument_list|()
argument_list|,
name|cit
argument_list|)
decl_stmt|;
specifier|const
name|iterator
name|e
init|=
name|end
argument_list|()
decl_stmt|,
name|it
init|=
name|std
operator|::
name|remove
argument_list|(
name|begin
argument_list|()
operator|+
name|firstFoundIdx
argument_list|,
name|e
argument_list|,
name|t
argument_list|)
decl_stmt|;
specifier|const
name|int
name|result
init|=
name|std
operator|::
name|distance
argument_list|(
name|it
argument_list|,
name|e
argument_list|)
decl_stmt|;
name|erase
argument_list|(
name|it
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
name|bool
name|removeOne
parameter_list|(
specifier|const
name|T
modifier|&
name|t
parameter_list|)
block|{
specifier|const
name|int
name|i
init|=
name|indexOf
argument_list|(
name|t
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|<
literal|0
condition|)
return|return
name|false
return|;
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
return|return
name|true
return|;
block|}
end_function
begin_expr_stmt
name|int
name|length
argument_list|()
specifier|const
block|{
return|return
name|size
argument_list|()
return|;
block|}
end_expr_stmt
begin_function
name|T
name|takeAt
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|T
name|t
init|=
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
return|return
name|t
return|;
block|}
end_function
begin_function
name|void
name|move
parameter_list|(
name|int
name|from
parameter_list|,
name|int
name|to
parameter_list|)
block|{
name|Q_ASSERT_X
argument_list|(
name|from
operator|>=
literal|0
operator|&&
name|from
operator|<
name|size
argument_list|()
argument_list|,
literal|"QVector::move(int,int)"
argument_list|,
literal|"'from' is out-of-range"
argument_list|)
expr_stmt|;
name|Q_ASSERT_X
argument_list|(
name|to
operator|>=
literal|0
operator|&&
name|to
operator|<
name|size
argument_list|()
argument_list|,
literal|"QVector::move(int,int)"
argument_list|,
literal|"'to' is out-of-range"
argument_list|)
expr_stmt|;
if|if
condition|(
name|from
operator|==
name|to
condition|)
comment|// don't detach when no-op
return|return;
name|detach
argument_list|()
expr_stmt|;
name|T
modifier|*
specifier|const
name|b
init|=
name|d
operator|->
name|begin
argument_list|()
decl_stmt|;
if|if
condition|(
name|from
operator|<
name|to
condition|)
name|std
operator|::
name|rotate
argument_list|(
name|b
operator|+
name|from
argument_list|,
name|b
operator|+
name|from
operator|+
literal|1
argument_list|,
name|b
operator|+
name|to
operator|+
literal|1
argument_list|)
expr_stmt|;
else|else
name|std
operator|::
name|rotate
argument_list|(
name|b
operator|+
name|to
argument_list|,
name|b
operator|+
name|from
argument_list|,
name|b
operator|+
name|from
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// STL-style
end_comment
begin_typedef
typedef|typedef
name|typename
name|Data
operator|::
name|iterator
name|iterator
expr_stmt|;
end_typedef
begin_typedef
typedef|typedef
name|typename
name|Data
operator|::
name|const_iterator
name|const_iterator
expr_stmt|;
end_typedef
begin_typedef
typedef|typedef
name|std
operator|::
name|reverse_iterator
operator|<
name|iterator
operator|>
name|reverse_iterator
expr_stmt|;
end_typedef
begin_typedef
typedef|typedef
name|std
operator|::
name|reverse_iterator
operator|<
name|const_iterator
operator|>
name|const_reverse_iterator
expr_stmt|;
end_typedef
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_STRICT_ITERATORS
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_QDOC
argument_list|)
end_if
begin_function
specifier|inline
name|iterator
name|begin
parameter_list|()
block|{
name|detach
argument_list|()
expr_stmt|;
return|return
name|d
operator|->
name|begin
argument_list|()
return|;
block|}
end_function
begin_expr_stmt
specifier|inline
name|const_iterator
name|begin
argument_list|()
specifier|const
name|Q_DECL_NOTHROW
block|{
return|return
name|d
operator|->
name|constBegin
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|const_iterator
name|cbegin
argument_list|()
specifier|const
name|Q_DECL_NOTHROW
block|{
return|return
name|d
operator|->
name|constBegin
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|const_iterator
name|constBegin
argument_list|()
specifier|const
name|Q_DECL_NOTHROW
block|{
return|return
name|d
operator|->
name|constBegin
argument_list|()
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|iterator
name|end
parameter_list|()
block|{
name|detach
argument_list|()
expr_stmt|;
return|return
name|d
operator|->
name|end
argument_list|()
return|;
block|}
end_function
begin_expr_stmt
specifier|inline
name|const_iterator
name|end
argument_list|()
specifier|const
name|Q_DECL_NOTHROW
block|{
return|return
name|d
operator|->
name|constEnd
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|const_iterator
name|cend
argument_list|()
specifier|const
name|Q_DECL_NOTHROW
block|{
return|return
name|d
operator|->
name|constEnd
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|const_iterator
name|constEnd
argument_list|()
specifier|const
name|Q_DECL_NOTHROW
block|{
return|return
name|d
operator|->
name|constEnd
argument_list|()
return|;
block|}
end_expr_stmt
begin_else
else|#
directive|else
end_else
begin_function
specifier|inline
name|iterator
name|begin
parameter_list|(
name|iterator
init|=
name|iterator
argument_list|()
parameter_list|)
block|{
name|detach
argument_list|()
expr_stmt|;
return|return
name|d
operator|->
name|begin
argument_list|()
return|;
block|}
end_function
begin_decl_stmt
specifier|inline
name|const_iterator
name|begin
argument_list|(
name|const_iterator
operator|=
name|const_iterator
argument_list|()
argument_list|)
decl|const
name|Q_DECL_NOTHROW
block|{
return|return
name|d
operator|->
name|constBegin
argument_list|()
return|;
block|}
end_decl_stmt
begin_decl_stmt
specifier|inline
name|const_iterator
name|cbegin
argument_list|(
name|const_iterator
operator|=
name|const_iterator
argument_list|()
argument_list|)
decl|const
name|Q_DECL_NOTHROW
block|{
return|return
name|d
operator|->
name|constBegin
argument_list|()
return|;
block|}
end_decl_stmt
begin_decl_stmt
specifier|inline
name|const_iterator
name|constBegin
argument_list|(
name|const_iterator
operator|=
name|const_iterator
argument_list|()
argument_list|)
decl|const
name|Q_DECL_NOTHROW
block|{
return|return
name|d
operator|->
name|constBegin
argument_list|()
return|;
block|}
end_decl_stmt
begin_function
specifier|inline
name|iterator
name|end
parameter_list|(
name|iterator
init|=
name|iterator
argument_list|()
parameter_list|)
block|{
name|detach
argument_list|()
expr_stmt|;
return|return
name|d
operator|->
name|end
argument_list|()
return|;
block|}
end_function
begin_decl_stmt
specifier|inline
name|const_iterator
name|end
argument_list|(
name|const_iterator
operator|=
name|const_iterator
argument_list|()
argument_list|)
decl|const
name|Q_DECL_NOTHROW
block|{
return|return
name|d
operator|->
name|constEnd
argument_list|()
return|;
block|}
end_decl_stmt
begin_decl_stmt
specifier|inline
name|const_iterator
name|cend
argument_list|(
name|const_iterator
operator|=
name|const_iterator
argument_list|()
argument_list|)
decl|const
name|Q_DECL_NOTHROW
block|{
return|return
name|d
operator|->
name|constEnd
argument_list|()
return|;
block|}
end_decl_stmt
begin_decl_stmt
specifier|inline
name|const_iterator
name|constEnd
argument_list|(
name|const_iterator
operator|=
name|const_iterator
argument_list|()
argument_list|)
decl|const
name|Q_DECL_NOTHROW
block|{
return|return
name|d
operator|->
name|constEnd
argument_list|()
return|;
block|}
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_function
name|reverse_iterator
name|rbegin
parameter_list|()
block|{
return|return
name|reverse_iterator
argument_list|(
name|end
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
name|reverse_iterator
name|rend
parameter_list|()
block|{
return|return
name|reverse_iterator
argument_list|(
name|begin
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_expr_stmt
name|const_reverse_iterator
name|rbegin
argument_list|()
specifier|const
name|Q_DECL_NOTHROW
block|{
return|return
name|const_reverse_iterator
argument_list|(
name|end
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|const_reverse_iterator
name|rend
argument_list|()
specifier|const
name|Q_DECL_NOTHROW
block|{
return|return
name|const_reverse_iterator
argument_list|(
name|begin
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|const_reverse_iterator
name|crbegin
argument_list|()
specifier|const
name|Q_DECL_NOTHROW
block|{
return|return
name|const_reverse_iterator
argument_list|(
name|end
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|const_reverse_iterator
name|crend
argument_list|()
specifier|const
name|Q_DECL_NOTHROW
block|{
return|return
name|const_reverse_iterator
argument_list|(
name|begin
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt
begin_function_decl
name|iterator
name|insert
parameter_list|(
name|iterator
name|before
parameter_list|,
name|int
name|n
parameter_list|,
specifier|const
name|T
modifier|&
name|x
parameter_list|)
function_decl|;
end_function_decl
begin_function
specifier|inline
name|iterator
name|insert
parameter_list|(
name|iterator
name|before
parameter_list|,
specifier|const
name|T
modifier|&
name|x
parameter_list|)
block|{
return|return
name|insert
argument_list|(
name|before
argument_list|,
literal|1
argument_list|,
name|x
argument_list|)
return|;
block|}
end_function
begin_function_decl
name|iterator
name|erase
parameter_list|(
name|iterator
name|begin
parameter_list|,
name|iterator
name|end
parameter_list|)
function_decl|;
end_function_decl
begin_function
specifier|inline
name|iterator
name|erase
parameter_list|(
name|iterator
name|pos
parameter_list|)
block|{
return|return
name|erase
argument_list|(
name|pos
argument_list|,
name|pos
operator|+
literal|1
argument_list|)
return|;
block|}
end_function
begin_comment
comment|// more Qt
end_comment
begin_expr_stmt
specifier|inline
name|int
name|count
argument_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|size
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|T
modifier|&
name|first
parameter_list|()
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|*
name|begin
argument_list|()
return|;
block|}
end_function
begin_expr_stmt
specifier|inline
specifier|const
name|T
operator|&
name|first
argument_list|()
specifier|const
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|isEmpty
argument_list|()
argument_list|)
block|;
return|return
operator|*
name|begin
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
specifier|const
name|T
operator|&
name|constFirst
argument_list|()
specifier|const
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|isEmpty
argument_list|()
argument_list|)
block|;
return|return
operator|*
name|begin
argument_list|()
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|T
modifier|&
name|last
parameter_list|()
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|*
operator|(
name|end
argument_list|()
operator|-
literal|1
operator|)
return|;
block|}
end_function
begin_expr_stmt
specifier|inline
specifier|const
name|T
operator|&
name|last
argument_list|()
specifier|const
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|isEmpty
argument_list|()
argument_list|)
block|;
return|return
operator|*
operator|(
name|end
argument_list|()
operator|-
literal|1
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
specifier|const
name|T
operator|&
name|constLast
argument_list|()
specifier|const
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|isEmpty
argument_list|()
argument_list|)
block|;
return|return
operator|*
operator|(
name|end
argument_list|()
operator|-
literal|1
operator|)
return|;
block|}
end_expr_stmt
begin_decl_stmt
specifier|inline
name|bool
name|startsWith
argument_list|(
specifier|const
name|T
operator|&
name|t
argument_list|)
decl|const
block|{
return|return
operator|!
name|isEmpty
argument_list|()
operator|&&
name|first
argument_list|()
operator|==
name|t
return|;
block|}
end_decl_stmt
begin_decl_stmt
specifier|inline
name|bool
name|endsWith
argument_list|(
specifier|const
name|T
operator|&
name|t
argument_list|)
decl|const
block|{
return|return
operator|!
name|isEmpty
argument_list|()
operator|&&
name|last
argument_list|()
operator|==
name|t
return|;
block|}
end_decl_stmt
begin_expr_stmt
name|QVector
operator|<
name|T
operator|>
name|mid
argument_list|(
argument|int pos
argument_list|,
argument|int len = -
literal|1
argument_list|)
specifier|const
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|T
name|value
argument_list|(
name|int
name|i
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|T
name|value
argument_list|(
name|int
name|i
argument_list|,
specifier|const
name|T
operator|&
name|defaultValue
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_comment
comment|// STL compatibility
end_comment
begin_typedef
typedef|typedef
name|T
name|value_type
typedef|;
end_typedef
begin_typedef
typedef|typedef
name|value_type
modifier|*
name|pointer
typedef|;
end_typedef
begin_typedef
typedef|typedef
specifier|const
name|value_type
modifier|*
name|const_pointer
typedef|;
end_typedef
begin_typedef
typedef|typedef
name|value_type
modifier|&
name|reference
typedef|;
end_typedef
begin_typedef
typedef|typedef
specifier|const
name|value_type
modifier|&
name|const_reference
typedef|;
end_typedef
begin_typedef
typedef|typedef
name|qptrdiff
name|difference_type
typedef|;
end_typedef
begin_typedef
typedef|typedef
name|iterator
name|Iterator
typedef|;
end_typedef
begin_typedef
typedef|typedef
name|const_iterator
name|ConstIterator
typedef|;
end_typedef
begin_typedef
typedef|typedef
name|int
name|size_type
typedef|;
end_typedef
begin_function
specifier|inline
name|void
name|push_back
parameter_list|(
specifier|const
name|T
modifier|&
name|t
parameter_list|)
block|{
name|append
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|Q_COMPILER_RVALUE_REFS
end_ifdef
begin_decl_stmt
name|void
name|push_back
argument_list|(
name|T
operator|&&
name|t
argument_list|)
block|{
name|append
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|t
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_function
specifier|inline
name|void
name|push_front
parameter_list|(
specifier|const
name|T
modifier|&
name|t
parameter_list|)
block|{
name|prepend
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
name|void
name|pop_back
parameter_list|()
block|{
name|removeLast
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
name|void
name|pop_front
parameter_list|()
block|{
name|removeFirst
argument_list|()
expr_stmt|;
block|}
end_function
begin_expr_stmt
specifier|inline
name|bool
name|empty
argument_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|size
operator|==
literal|0
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|T
modifier|&
name|front
parameter_list|()
block|{
return|return
name|first
argument_list|()
return|;
block|}
end_function
begin_expr_stmt
specifier|inline
name|const_reference
name|front
argument_list|()
specifier|const
block|{
return|return
name|first
argument_list|()
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|reference
name|back
parameter_list|()
block|{
return|return
name|last
argument_list|()
return|;
block|}
end_function
begin_expr_stmt
specifier|inline
name|const_reference
name|back
argument_list|()
specifier|const
block|{
return|return
name|last
argument_list|()
return|;
block|}
end_expr_stmt
begin_comment
comment|// comfort
end_comment
begin_expr_stmt
name|QVector
operator|<
name|T
operator|>
operator|&
name|operator
operator|+=
operator|(
specifier|const
name|QVector
operator|<
name|T
operator|>
operator|&
name|l
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QVector
operator|<
name|T
operator|>
name|operator
operator|+
operator|(
specifier|const
name|QVector
operator|<
name|T
operator|>
operator|&
name|l
operator|)
specifier|const
block|{
name|QVector
name|n
operator|=
operator|*
name|this
block|;
name|n
operator|+=
name|l
block|;
return|return
name|n
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QVector
operator|<
name|T
operator|>
operator|&
name|operator
operator|+=
operator|(
specifier|const
name|T
operator|&
name|t
operator|)
block|{
name|append
argument_list|(
name|t
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QVector
operator|<
name|T
operator|>
operator|&
name|operator
operator|<<
operator|(
specifier|const
name|T
operator|&
name|t
operator|)
block|{
name|append
argument_list|(
name|t
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QVector
operator|<
name|T
operator|>
operator|&
name|operator
operator|<<
operator|(
specifier|const
name|QVector
operator|<
name|T
operator|>
operator|&
name|l
operator|)
block|{
operator|*
name|this
operator|+=
name|l
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|QList
operator|<
name|T
operator|>
name|toList
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
specifier|static
name|QVector
operator|<
name|T
operator|>
name|fromList
argument_list|(
specifier|const
name|QList
operator|<
name|T
operator|>
operator|&
name|list
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
specifier|static
specifier|inline
name|QVector
operator|<
name|T
operator|>
name|fromStdVector
argument_list|(
argument|const std::vector<T>&vector
argument_list|)
block|{
name|QVector
operator|<
name|T
operator|>
name|tmp
block|;
name|tmp
operator|.
name|reserve
argument_list|(
name|int
argument_list|(
name|vector
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
block|;
name|std
operator|::
name|copy
argument_list|(
name|vector
operator|.
name|begin
argument_list|()
argument_list|,
name|vector
operator|.
name|end
argument_list|()
argument_list|,
name|std
operator|::
name|back_inserter
argument_list|(
name|tmp
argument_list|)
argument_list|)
block|;
return|return
name|tmp
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|std
operator|::
name|vector
operator|<
name|T
operator|>
name|toStdVector
argument_list|()
specifier|const
block|{
return|return
name|std
operator|::
name|vector
operator|<
name|T
operator|>
operator|(
name|d
operator|->
name|begin
argument_list|()
operator|,
name|d
operator|->
name|end
argument_list|()
operator|)
return|;
block|}
end_expr_stmt
begin_label
name|private
label|:
end_label
begin_decl_stmt
name|friend
name|class
name|QRegion
decl_stmt|;
end_decl_stmt
begin_comment
comment|// Optimization for QRegion::rects()
end_comment
begin_decl_stmt
name|void
name|reallocData
argument_list|(
specifier|const
name|int
name|size
argument_list|,
specifier|const
name|int
name|alloc
argument_list|,
name|QArrayData
operator|::
name|AllocationOptions
name|options
operator|=
name|QArrayData
operator|::
name|Default
argument_list|)
decl_stmt|;
end_decl_stmt
begin_function
name|void
name|reallocData
parameter_list|(
specifier|const
name|int
name|sz
parameter_list|)
block|{
name|reallocData
argument_list|(
name|sz
argument_list|,
name|d
operator|->
name|alloc
argument_list|)
expr_stmt|;
block|}
end_function
begin_function_decl
name|void
name|freeData
parameter_list|(
name|Data
modifier|*
name|d
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|defaultConstruct
parameter_list|(
name|T
modifier|*
name|from
parameter_list|,
name|T
modifier|*
name|to
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|copyConstruct
parameter_list|(
specifier|const
name|T
modifier|*
name|srcFrom
parameter_list|,
specifier|const
name|T
modifier|*
name|srcTo
parameter_list|,
name|T
modifier|*
name|dstFrom
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|destruct
parameter_list|(
name|T
modifier|*
name|from
parameter_list|,
name|T
modifier|*
name|to
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
name|bool
name|isValidIterator
argument_list|(
specifier|const
name|iterator
operator|&
name|i
argument_list|)
decl|const
block|{
return|return
operator|(
name|i
operator|<=
name|d
operator|->
name|end
argument_list|()
operator|)
operator|&&
operator|(
name|d
operator|->
name|begin
argument_list|()
operator|<=
name|i
operator|)
return|;
block|}
end_decl_stmt
begin_decl_stmt
name|class
name|AlignmentDummy
block|{
name|Data
name|header
decl_stmt|;
name|T
name|array
index|[
literal|1
index|]
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_ifdef
unit|};
ifdef|#
directive|ifdef
name|Q_CC_MSVC
end_ifdef
begin_comment
comment|// behavior change: an object of POD type constructed with an initializer of the form ()
end_comment
begin_comment
comment|// will be default-initialized
end_comment
begin_pragma
pragma|#
directive|pragma
name|warning
name|(
name|push
name|)
end_pragma
begin_pragma
pragma|#
directive|pragma
name|warning
name|(
name|disable
name|:
name|4345
name|)
end_pragma
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|defaultConstruct
name|void
name|QVector
operator|<
name|T
operator|>
operator|::
name|defaultConstruct
argument_list|(
argument|T *from
argument_list|,
argument|T *to
argument_list|)
block|{
if|if
condition|(
name|QTypeInfo
operator|<
name|T
operator|>
operator|::
name|isComplex
condition|)
block|{
while|while
condition|(
name|from
operator|!=
name|to
condition|)
block|{
name|new
argument_list|(
argument|from++
argument_list|)
name|T
argument_list|()
expr_stmt|;
block|}
end_expr_stmt
begin_block
unit|} else
block|{
operator|::
name|memset
argument_list|(
name|static_cast
operator|<
name|void
operator|*
operator|>
operator|(
name|from
operator|)
argument_list|,
literal|0
argument_list|,
operator|(
name|to
operator|-
name|from
operator|)
operator|*
sizeof|sizeof
argument_list|(
name|T
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_block
begin_ifdef
unit|}
ifdef|#
directive|ifdef
name|Q_CC_MSVC
end_ifdef
begin_pragma
pragma|#
directive|pragma
name|warning
name|(
name|pop
name|)
end_pragma
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
unit|template
operator|<
name|typename
name|T
operator|>
DECL|function|copyConstruct
name|void
name|QVector
operator|<
name|T
operator|>
operator|::
name|copyConstruct
argument_list|(
argument|const T *srcFrom
argument_list|,
argument|const T *srcTo
argument_list|,
argument|T *dstFrom
argument_list|)
block|{
if|if
condition|(
name|QTypeInfo
operator|<
name|T
operator|>
operator|::
name|isComplex
condition|)
block|{
while|while
condition|(
name|srcFrom
operator|!=
name|srcTo
condition|)
name|new
argument_list|(
argument|dstFrom++
argument_list|)
name|T
argument_list|(
operator|*
name|srcFrom
operator|++
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_else
else|else
block|{
operator|::
name|memcpy
argument_list|(
name|static_cast
operator|<
name|void
operator|*
operator|>
operator|(
name|dstFrom
operator|)
argument_list|,
name|static_cast
operator|<
specifier|const
name|void
operator|*
operator|>
operator|(
name|srcFrom
operator|)
argument_list|,
operator|(
name|srcTo
operator|-
name|srcFrom
operator|)
operator|*
sizeof|sizeof
argument_list|(
name|T
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_else
begin_if
unit|}
if|#
directive|if
name|defined
argument_list|(
name|Q_CC_MSVC
argument_list|)
end_if
begin_pragma
pragma|#
directive|pragma
name|warning
name|(
name|push
name|)
end_pragma
begin_pragma
pragma|#
directive|pragma
name|warning
name|(
name|disable
name|:
name|4127
name|)
end_pragma
begin_comment
comment|// conditional expression is constant
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
unit|template
operator|<
name|typename
name|T
operator|>
DECL|function|destruct
name|void
name|QVector
operator|<
name|T
operator|>
operator|::
name|destruct
argument_list|(
argument|T *from
argument_list|,
argument|T *to
argument_list|)
block|{
if|if
condition|(
name|QTypeInfo
operator|<
name|T
operator|>
operator|::
name|isComplex
condition|)
block|{
while|while
condition|(
name|from
operator|!=
name|to
condition|)
block|{
name|from
operator|++
operator|->
operator|~
name|T
argument_list|()
expr_stmt|;
block|}
end_expr_stmt
begin_if
unit|} }
if|#
directive|if
name|defined
argument_list|(
name|Q_CC_MSVC
argument_list|)
end_if
begin_pragma
pragma|#
directive|pragma
name|warning
name|(
name|pop
name|)
end_pragma
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|QVector
operator|<
name|T
operator|>
operator|::
name|QVector
argument_list|(
argument|const QVector<T>&v
argument_list|)
block|{
if|if
condition|(
name|v
operator|.
name|d
operator|->
name|ref
operator|.
name|ref
argument_list|()
condition|)
block|{
name|d
operator|=
name|v
operator|.
name|d
expr_stmt|;
block|}
end_expr_stmt
begin_else
else|else
block|{
if|if
condition|(
name|v
operator|.
name|d
operator|->
name|capacityReserved
condition|)
block|{
name|d
operator|=
name|Data
operator|::
name|allocate
argument_list|(
name|v
operator|.
name|d
operator|->
name|alloc
argument_list|)
expr_stmt|;
name|Q_CHECK_PTR
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|d
operator|->
name|capacityReserved
operator|=
name|true
expr_stmt|;
block|}
else|else
block|{
name|d
operator|=
name|Data
operator|::
name|allocate
argument_list|(
name|v
operator|.
name|d
operator|->
name|size
argument_list|)
expr_stmt|;
name|Q_CHECK_PTR
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|->
name|alloc
condition|)
block|{
name|copyConstruct
argument_list|(
name|v
operator|.
name|d
operator|->
name|begin
argument_list|()
argument_list|,
name|v
operator|.
name|d
operator|->
name|end
argument_list|()
argument_list|,
name|d
operator|->
name|begin
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|size
operator|=
name|v
operator|.
name|d
operator|->
name|size
expr_stmt|;
block|}
block|}
end_else
begin_expr_stmt
unit|}  template
operator|<
name|typename
name|T
operator|>
DECL|function|detach
name|void
name|QVector
operator|<
name|T
operator|>
operator|::
name|detach
argument_list|()
block|{
if|if
condition|(
operator|!
name|isDetached
argument_list|()
condition|)
block|{
if|#
directive|if
name|QT_SUPPORTS
argument_list|(
name|UNSHARABLE_CONTAINERS
argument_list|)
if|if
condition|(
operator|!
name|d
operator|->
name|alloc
condition|)
name|d
operator|=
name|Data
operator|::
name|unsharableEmpty
argument_list|()
expr_stmt|;
else|else
endif|#
directive|endif
name|reallocData
argument_list|(
name|d
operator|->
name|size
argument_list|,
name|int
argument_list|(
name|d
operator|->
name|alloc
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Q_ASSERT
argument_list|(
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
unit|}  template
operator|<
name|typename
name|T
operator|>
DECL|function|reserve
name|void
name|QVector
operator|<
name|T
operator|>
operator|::
name|reserve
argument_list|(
argument|int asize
argument_list|)
block|{
if|if
condition|(
name|asize
operator|>
name|int
argument_list|(
name|d
operator|->
name|alloc
argument_list|)
condition|)
name|reallocData
argument_list|(
name|d
operator|->
name|size
argument_list|,
name|asize
argument_list|)
expr_stmt|;
end_expr_stmt
begin_if
if|if
condition|(
name|isDetached
argument_list|()
condition|)
name|d
operator|->
name|capacityReserved
operator|=
literal|1
expr_stmt|;
end_if
begin_expr_stmt
name|Q_ASSERT
argument_list|(
name|capacity
argument_list|()
operator|>=
name|asize
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
unit|}  template
operator|<
name|typename
name|T
operator|>
DECL|function|resize
name|void
name|QVector
operator|<
name|T
operator|>
operator|::
name|resize
argument_list|(
argument|int asize
argument_list|)
block|{
name|int
name|newAlloc
block|;
specifier|const
name|int
name|oldAlloc
operator|=
name|int
argument_list|(
name|d
operator|->
name|alloc
argument_list|)
block|;
name|QArrayData
operator|::
name|AllocationOptions
name|opt
block|;
if|if
condition|(
name|asize
operator|>
name|oldAlloc
condition|)
block|{
comment|// there is not enough space
name|newAlloc
operator|=
name|asize
expr_stmt|;
name|opt
operator|=
name|QArrayData
operator|::
name|Grow
expr_stmt|;
block|}
end_expr_stmt
begin_else
else|else
block|{
name|newAlloc
operator|=
name|oldAlloc
expr_stmt|;
block|}
end_else
begin_expr_stmt
name|reallocData
argument_list|(
name|asize
argument_list|,
name|newAlloc
argument_list|,
name|opt
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
unit|} template
operator|<
name|typename
name|T
operator|>
DECL|function|clear
specifier|inline
name|void
name|QVector
operator|<
name|T
operator|>
operator|::
name|clear
argument_list|()
block|{
operator|*
name|this
operator|=
name|QVector
operator|<
name|T
operator|>
operator|(
operator|)
block|; }
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|at
specifier|inline
specifier|const
name|T
operator|&
name|QVector
operator|<
name|T
operator|>
operator|::
name|at
argument_list|(
argument|int i
argument_list|)
specifier|const
block|{
name|Q_ASSERT_X
argument_list|(
name|i
operator|>=
literal|0
operator|&&
name|i
operator|<
name|d
operator|->
name|size
argument_list|,
literal|"QVector<T>::at"
argument_list|,
literal|"index out of range"
argument_list|)
block|;
return|return
name|d
operator|->
name|begin
argument_list|()
index|[
name|i
index|]
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|operator
specifier|inline
specifier|const
name|T
operator|&
name|QVector
operator|<
name|T
operator|>
operator|::
name|operator
index|[]
operator|(
name|int
name|i
operator|)
specifier|const
block|{
name|Q_ASSERT_X
argument_list|(
name|i
operator|>=
literal|0
operator|&&
name|i
operator|<
name|d
operator|->
name|size
argument_list|,
literal|"QVector<T>::operator[]"
argument_list|,
literal|"index out of range"
argument_list|)
block|;
return|return
name|d
operator|->
name|begin
argument_list|()
index|[
name|i
index|]
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|operator
specifier|inline
name|T
operator|&
name|QVector
operator|<
name|T
operator|>
operator|::
name|operator
index|[]
operator|(
name|int
name|i
operator|)
block|{
name|Q_ASSERT_X
argument_list|(
name|i
operator|>=
literal|0
operator|&&
name|i
operator|<
name|d
operator|->
name|size
argument_list|,
literal|"QVector<T>::operator[]"
argument_list|,
literal|"index out of range"
argument_list|)
block|;
return|return
name|data
argument_list|()
index|[
name|i
index|]
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|insert
specifier|inline
name|void
name|QVector
operator|<
name|T
operator|>
operator|::
name|insert
argument_list|(
argument|int i
argument_list|,
argument|const T&t
argument_list|)
block|{
name|Q_ASSERT_X
argument_list|(
name|i
operator|>=
literal|0
operator|&&
name|i
operator|<=
name|d
operator|->
name|size
argument_list|,
literal|"QVector<T>::insert"
argument_list|,
literal|"index out of range"
argument_list|)
block|;
name|insert
argument_list|(
name|begin
argument_list|()
operator|+
name|i
argument_list|,
literal|1
argument_list|,
name|t
argument_list|)
block|; }
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|insert
specifier|inline
name|void
name|QVector
operator|<
name|T
operator|>
operator|::
name|insert
argument_list|(
argument|int i
argument_list|,
argument|int n
argument_list|,
argument|const T&t
argument_list|)
block|{
name|Q_ASSERT_X
argument_list|(
name|i
operator|>=
literal|0
operator|&&
name|i
operator|<=
name|d
operator|->
name|size
argument_list|,
literal|"QVector<T>::insert"
argument_list|,
literal|"index out of range"
argument_list|)
block|;
name|insert
argument_list|(
name|begin
argument_list|()
operator|+
name|i
argument_list|,
name|n
argument_list|,
name|t
argument_list|)
block|; }
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|remove
specifier|inline
name|void
name|QVector
operator|<
name|T
operator|>
operator|::
name|remove
argument_list|(
argument|int i
argument_list|,
argument|int n
argument_list|)
block|{
name|Q_ASSERT_X
argument_list|(
name|i
operator|>=
literal|0
operator|&&
name|n
operator|>=
literal|0
operator|&&
name|i
operator|+
name|n
operator|<=
name|d
operator|->
name|size
argument_list|,
literal|"QVector<T>::remove"
argument_list|,
literal|"index out of range"
argument_list|)
block|;
name|erase
argument_list|(
name|d
operator|->
name|begin
argument_list|()
operator|+
name|i
argument_list|,
name|d
operator|->
name|begin
argument_list|()
operator|+
name|i
operator|+
name|n
argument_list|)
block|; }
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|remove
specifier|inline
name|void
name|QVector
operator|<
name|T
operator|>
operator|::
name|remove
argument_list|(
argument|int i
argument_list|)
block|{
name|Q_ASSERT_X
argument_list|(
name|i
operator|>=
literal|0
operator|&&
name|i
operator|<
name|d
operator|->
name|size
argument_list|,
literal|"QVector<T>::remove"
argument_list|,
literal|"index out of range"
argument_list|)
block|;
name|erase
argument_list|(
name|d
operator|->
name|begin
argument_list|()
operator|+
name|i
argument_list|,
name|d
operator|->
name|begin
argument_list|()
operator|+
name|i
operator|+
literal|1
argument_list|)
block|; }
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|prepend
specifier|inline
name|void
name|QVector
operator|<
name|T
operator|>
operator|::
name|prepend
argument_list|(
argument|const T&t
argument_list|)
block|{
name|insert
argument_list|(
name|begin
argument_list|()
argument_list|,
literal|1
argument_list|,
name|t
argument_list|)
block|; }
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|replace
specifier|inline
name|void
name|QVector
operator|<
name|T
operator|>
operator|::
name|replace
argument_list|(
argument|int i
argument_list|,
argument|const T&t
argument_list|)
block|{
name|Q_ASSERT_X
argument_list|(
name|i
operator|>=
literal|0
operator|&&
name|i
operator|<
name|d
operator|->
name|size
argument_list|,
literal|"QVector<T>::replace"
argument_list|,
literal|"index out of range"
argument_list|)
block|;
specifier|const
name|T
name|copy
argument_list|(
name|t
argument_list|)
block|;
name|data
argument_list|()
index|[
name|i
index|]
operator|=
name|copy
block|; }
name|template
operator|<
name|typename
name|T
operator|>
DECL|member|operator
name|QVector
operator|<
name|T
operator|>
operator|&
name|QVector
operator|<
name|T
operator|>
operator|::
name|operator
operator|=
operator|(
specifier|const
name|QVector
operator|<
name|T
operator|>
operator|&
name|v
operator|)
block|{
if|if
condition|(
name|v
operator|.
name|d
operator|!=
name|d
condition|)
block|{
name|QVector
operator|<
name|T
operator|>
name|tmp
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|swap
argument_list|(
operator|*
name|this
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_return
return|return
operator|*
name|this
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|typename
name|T
operator|>
name|QVector
operator|<
name|T
operator|>
operator|::
name|QVector
argument_list|(
argument|int asize
argument_list|)
block|{
name|Q_ASSERT_X
argument_list|(
name|asize
operator|>=
literal|0
argument_list|,
literal|"QVector::QVector"
argument_list|,
literal|"Size must be greater than or equal to 0."
argument_list|)
block|;
if|if
condition|(
name|Q_LIKELY
argument_list|(
name|asize
operator|>
literal|0
argument_list|)
condition|)
block|{
name|d
operator|=
name|Data
operator|::
name|allocate
argument_list|(
name|asize
argument_list|)
expr_stmt|;
name|Q_CHECK_PTR
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|d
operator|->
name|size
operator|=
name|asize
expr_stmt|;
name|defaultConstruct
argument_list|(
name|d
operator|->
name|begin
argument_list|()
argument_list|,
name|d
operator|->
name|end
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_else
else|else
block|{
name|d
operator|=
name|Data
operator|::
name|sharedNull
argument_list|()
expr_stmt|;
block|}
end_else
begin_expr_stmt
unit|}  template
operator|<
name|typename
name|T
operator|>
name|QVector
operator|<
name|T
operator|>
operator|::
name|QVector
argument_list|(
argument|int asize
argument_list|,
argument|const T&t
argument_list|)
block|{
name|Q_ASSERT_X
argument_list|(
name|asize
operator|>=
literal|0
argument_list|,
literal|"QVector::QVector"
argument_list|,
literal|"Size must be greater than or equal to 0."
argument_list|)
block|;
if|if
condition|(
name|asize
operator|>
literal|0
condition|)
block|{
name|d
operator|=
name|Data
operator|::
name|allocate
argument_list|(
name|asize
argument_list|)
expr_stmt|;
name|Q_CHECK_PTR
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|d
operator|->
name|size
operator|=
name|asize
expr_stmt|;
name|T
modifier|*
name|i
init|=
name|d
operator|->
name|end
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|!=
name|d
operator|->
name|begin
argument_list|()
condition|)
name|new
argument_list|(
argument|--i
argument_list|)
name|T
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_else
else|else
block|{
name|d
operator|=
name|Data
operator|::
name|sharedNull
argument_list|()
expr_stmt|;
block|}
end_else
begin_ifdef
unit|}
ifdef|#
directive|ifdef
name|Q_COMPILER_INITIALIZER_LISTS
end_ifdef
begin_expr_stmt
unit|template
operator|<
name|typename
name|T
operator|>
name|QVector
operator|<
name|T
operator|>
operator|::
name|QVector
argument_list|(
argument|std::initializer_list<T> args
argument_list|)
block|{
if|if
condition|(
name|args
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|d
operator|=
name|Data
operator|::
name|allocate
argument_list|(
name|args
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Q_CHECK_PTR
argument_list|(
name|d
argument_list|)
expr_stmt|;
comment|// std::initializer_list<T>::iterator is guaranteed to be
comment|// const T* ([support.initlist]/1), so can be memcpy'ed away from by copyConstruct
name|copyConstruct
argument_list|(
name|args
operator|.
name|begin
argument_list|()
argument_list|,
name|args
operator|.
name|end
argument_list|()
argument_list|,
name|d
operator|->
name|begin
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|size
operator|=
name|int
argument_list|(
name|args
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_else
else|else
block|{
name|d
operator|=
name|Data
operator|::
name|sharedNull
argument_list|()
expr_stmt|;
block|}
end_else
begin_endif
unit|}
endif|#
directive|endif
end_endif
begin_expr_stmt
unit|template
operator|<
name|typename
name|T
operator|>
name|void
name|QVector
operator|<
name|T
operator|>
operator|::
name|freeData
argument_list|(
argument|Data *x
argument_list|)
block|{
name|destruct
argument_list|(
name|x
operator|->
name|begin
argument_list|()
argument_list|,
name|x
operator|->
name|end
argument_list|()
argument_list|)
block|;
name|Data
operator|::
name|deallocate
argument_list|(
name|x
argument_list|)
block|; }
name|template
operator|<
name|typename
name|T
operator|>
name|void
name|QVector
operator|<
name|T
operator|>
operator|::
name|reallocData
argument_list|(
argument|const int asize
argument_list|,
argument|const int aalloc
argument_list|,
argument|QArrayData::AllocationOptions options
argument_list|)
block|{
name|Q_ASSERT
argument_list|(
name|asize
operator|>=
literal|0
operator|&&
name|asize
operator|<=
name|aalloc
argument_list|)
block|;
name|Data
operator|*
name|x
operator|=
name|d
block|;
specifier|const
name|bool
name|isShared
operator|=
name|d
operator|->
name|ref
operator|.
name|isShared
argument_list|()
block|;
if|if
condition|(
name|aalloc
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|aalloc
operator|!=
name|int
argument_list|(
name|d
operator|->
name|alloc
argument_list|)
operator|||
name|isShared
condition|)
block|{
name|QT_TRY
block|{
comment|// allocate memory
name|x
operator|=
name|Data
operator|::
name|allocate
argument_list|(
name|aalloc
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|Q_CHECK_PTR
argument_list|(
name|x
argument_list|)
expr_stmt|;
comment|// aalloc is bigger then 0 so it is not [un]sharedEmpty
if|#
directive|if
name|QT_SUPPORTS
argument_list|(
name|UNSHARABLE_CONTAINERS
argument_list|)
name|Q_ASSERT
argument_list|(
name|x
operator|->
name|ref
operator|.
name|isSharable
argument_list|()
operator|||
name|options
operator|.
name|testFlag
argument_list|(
name|QArrayData
operator|::
name|Unsharable
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|Q_ASSERT
argument_list|(
operator|!
name|x
operator|->
name|ref
operator|.
name|isStatic
argument_list|()
argument_list|)
expr_stmt|;
name|x
operator|->
name|size
operator|=
name|asize
expr_stmt|;
name|T
modifier|*
name|srcBegin
init|=
name|d
operator|->
name|begin
argument_list|()
decl_stmt|;
name|T
modifier|*
name|srcEnd
init|=
name|asize
operator|>
name|d
operator|->
name|size
condition|?
name|d
operator|->
name|end
argument_list|()
else|:
name|d
operator|->
name|begin
argument_list|()
operator|+
name|asize
decl_stmt|;
name|T
modifier|*
name|dst
init|=
name|x
operator|->
name|begin
argument_list|()
decl_stmt|;
if|if
condition|(
name|QTypeInfo
operator|<
name|T
operator|>
operator|::
name|isStatic
operator|||
operator|(
name|isShared
operator|&&
name|QTypeInfo
operator|<
name|T
operator|>
operator|::
name|isComplex
operator|)
condition|)
block|{
comment|// we can not move the data, we need to copy construct it
while|while
condition|(
name|srcBegin
operator|!=
name|srcEnd
condition|)
block|{
name|new
argument_list|(
argument|dst++
argument_list|)
name|T
argument_list|(
operator|*
name|srcBegin
operator|++
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_block
unit|} else
block|{
operator|::
name|memcpy
argument_list|(
name|static_cast
operator|<
name|void
operator|*
operator|>
operator|(
name|dst
operator|)
argument_list|,
name|static_cast
operator|<
name|void
operator|*
operator|>
operator|(
name|srcBegin
operator|)
argument_list|,
operator|(
name|srcEnd
operator|-
name|srcBegin
operator|)
operator|*
sizeof|sizeof
argument_list|(
name|T
argument_list|)
argument_list|)
expr_stmt|;
name|dst
operator|+=
name|srcEnd
operator|-
name|srcBegin
expr_stmt|;
comment|// destruct unused / not moved data
if|if
condition|(
name|asize
operator|<
name|d
operator|->
name|size
condition|)
name|destruct
argument_list|(
name|d
operator|->
name|begin
argument_list|()
operator|+
name|asize
argument_list|,
name|d
operator|->
name|end
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_block
begin_if
if|if
condition|(
name|asize
operator|>
name|d
operator|->
name|size
condition|)
block|{
comment|// construct all new objects when growing
name|QT_TRY
block|{
name|defaultConstruct
argument_list|(
name|dst
argument_list|,
name|x
operator|->
name|end
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QT_CATCH
argument_list|(
argument|...
argument_list|)
block|{
comment|// destruct already copied objects
name|destruct
argument_list|(
name|x
operator|->
name|begin
argument_list|()
argument_list|,
name|dst
argument_list|)
expr_stmt|;
name|QT_RETHROW
expr_stmt|;
block|}
block|}
end_if
begin_expr_stmt
unit|} QT_CATCH
operator|(
operator|...
operator|)
block|{
name|Data
operator|::
name|deallocate
argument_list|(
name|x
argument_list|)
block|;
name|QT_RETHROW
block|;             }
name|x
operator|->
name|capacityReserved
operator|=
name|d
operator|->
name|capacityReserved
expr_stmt|;
end_expr_stmt
begin_block
unit|} else
block|{
name|Q_ASSERT
argument_list|(
name|int
argument_list|(
name|d
operator|->
name|alloc
argument_list|)
operator|==
name|aalloc
argument_list|)
expr_stmt|;
comment|// resize, without changing allocation size
name|Q_ASSERT
argument_list|(
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
comment|// can be done only on detached d
name|Q_ASSERT
argument_list|(
name|x
operator|==
name|d
argument_list|)
expr_stmt|;
comment|// in this case we do not need to allocate anything
if|if
condition|(
name|asize
operator|<=
name|d
operator|->
name|size
condition|)
block|{
name|destruct
argument_list|(
name|x
operator|->
name|begin
argument_list|()
operator|+
name|asize
argument_list|,
name|x
operator|->
name|end
argument_list|()
argument_list|)
expr_stmt|;
comment|// from future end to current end
block|}
else|else
block|{
name|defaultConstruct
argument_list|(
name|x
operator|->
name|end
argument_list|()
argument_list|,
name|x
operator|->
name|begin
argument_list|()
operator|+
name|asize
argument_list|)
expr_stmt|;
comment|// from current end to future end
block|}
name|x
operator|->
name|size
operator|=
name|asize
expr_stmt|;
block|}
end_block
begin_block
unit|} else
block|{
name|x
operator|=
name|Data
operator|::
name|sharedNull
argument_list|()
expr_stmt|;
block|}
end_block
begin_if
if|if
condition|(
name|d
operator|!=
name|x
condition|)
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|ref
operator|.
name|deref
argument_list|()
condition|)
block|{
if|if
condition|(
name|QTypeInfo
operator|<
name|T
operator|>
operator|::
name|isStatic
operator|||
operator|!
name|aalloc
operator|||
operator|(
name|isShared
operator|&&
name|QTypeInfo
operator|<
name|T
operator|>
operator|::
name|isComplex
operator|)
condition|)
block|{
comment|// data was copy constructed, we need to call destructors
comment|// or if !alloc we did nothing to the old 'd'.
name|freeData
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Data
operator|::
name|deallocate
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
block|}
name|d
operator|=
name|x
expr_stmt|;
block|}
end_if
begin_expr_stmt
name|Q_ASSERT
argument_list|(
name|d
operator|->
name|data
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_ASSERT
argument_list|(
name|uint
argument_list|(
name|d
operator|->
name|size
argument_list|)
operator|<=
name|d
operator|->
name|alloc
argument_list|)
expr_stmt|;
end_expr_stmt
begin_if
if|#
directive|if
name|QT_SUPPORTS
argument_list|(
name|UNSHARABLE_CONTAINERS
argument_list|)
end_if
begin_expr_stmt
name|Q_ASSERT
argument_list|(
name|d
operator|!=
name|Data
operator|::
name|unsharableEmpty
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
name|Q_ASSERT
argument_list|(
name|aalloc
condition|?
name|d
operator|!=
name|Data
operator|::
name|sharedNull
argument_list|()
else|:
name|d
operator|==
name|Data
operator|::
name|sharedNull
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_ASSERT
argument_list|(
name|d
operator|->
name|alloc
operator|>=
name|uint
argument_list|(
name|aalloc
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_ASSERT
argument_list|(
name|d
operator|->
name|size
operator|==
name|asize
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
unit|}  template
operator|<
name|typename
name|T
operator|>
name|Q_OUTOFLINE_TEMPLATE
name|T
name|QVector
operator|<
name|T
operator|>
operator|::
name|value
argument_list|(
argument|int i
argument_list|)
specifier|const
block|{
if|if
condition|(
name|uint
argument_list|(
name|i
argument_list|)
operator|>=
name|uint
argument_list|(
name|d
operator|->
name|size
argument_list|)
condition|)
block|{
return|return
name|T
argument_list|()
return|;
block|}
end_expr_stmt
begin_return
return|return
name|d
operator|->
name|begin
argument_list|()
index|[
name|i
index|]
return|;
end_return
begin_expr_stmt
unit|} template
operator|<
name|typename
name|T
operator|>
name|Q_OUTOFLINE_TEMPLATE
name|T
name|QVector
operator|<
name|T
operator|>
operator|::
name|value
argument_list|(
argument|int i
argument_list|,
argument|const T&defaultValue
argument_list|)
specifier|const
block|{
return|return
name|uint
argument_list|(
name|i
argument_list|)
operator|>=
name|uint
argument_list|(
name|d
operator|->
name|size
argument_list|)
operator|?
name|defaultValue
operator|:
name|d
operator|->
name|begin
argument_list|()
index|[
name|i
index|]
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|void
name|QVector
operator|<
name|T
operator|>
operator|::
name|append
argument_list|(
argument|const T&t
argument_list|)
block|{
specifier|const
name|bool
name|isTooSmall
operator|=
name|uint
argument_list|(
name|d
operator|->
name|size
operator|+
literal|1
argument_list|)
operator|>
name|d
operator|->
name|alloc
block|;
if|if
condition|(
operator|!
name|isDetached
argument_list|()
operator|||
name|isTooSmall
condition|)
block|{
name|T
name|copy
parameter_list|(
name|t
parameter_list|)
function_decl|;
name|QArrayData
operator|::
name|AllocationOptions
name|opt
argument_list|(
name|isTooSmall
condition|?
name|QArrayData
operator|::
name|Grow
else|:
name|QArrayData
operator|::
name|Default
argument_list|)
expr_stmt|;
name|reallocData
argument_list|(
name|d
operator|->
name|size
argument_list|,
name|isTooSmall
condition|?
name|d
operator|->
name|size
operator|+
literal|1
else|:
name|d
operator|->
name|alloc
argument_list|,
name|opt
argument_list|)
expr_stmt|;
if|if
condition|(
name|QTypeInfo
operator|<
name|T
operator|>
operator|::
name|isComplex
condition|)
name|new
argument_list|(
argument|d->end()
argument_list|)
name|T
argument_list|(
name|qMove
argument_list|(
name|copy
argument_list|)
argument_list|)
expr_stmt|;
else|else
operator|*
name|d
operator|->
name|end
argument_list|()
operator|=
name|qMove
argument_list|(
name|copy
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_else
else|else
block|{
if|if
condition|(
name|QTypeInfo
operator|<
name|T
operator|>
operator|::
name|isComplex
condition|)
name|new
argument_list|(
argument|d->end()
argument_list|)
name|T
argument_list|(
name|t
argument_list|)
expr_stmt|;
else|else
operator|*
name|d
operator|->
name|end
argument_list|()
operator|=
name|t
expr_stmt|;
block|}
end_else
begin_expr_stmt
operator|++
name|d
operator|->
name|size
expr_stmt|;
end_expr_stmt
begin_ifdef
unit|}
ifdef|#
directive|ifdef
name|Q_COMPILER_RVALUE_REFS
end_ifdef
begin_expr_stmt
unit|template
operator|<
name|typename
name|T
operator|>
name|void
name|QVector
operator|<
name|T
operator|>
operator|::
name|append
argument_list|(
argument|T&&t
argument_list|)
block|{
specifier|const
name|bool
name|isTooSmall
operator|=
name|uint
argument_list|(
name|d
operator|->
name|size
operator|+
literal|1
argument_list|)
operator|>
name|d
operator|->
name|alloc
block|;
if|if
condition|(
operator|!
name|isDetached
argument_list|()
operator|||
name|isTooSmall
condition|)
block|{
name|QArrayData
operator|::
name|AllocationOptions
name|opt
argument_list|(
name|isTooSmall
condition|?
name|QArrayData
operator|::
name|Grow
else|:
name|QArrayData
operator|::
name|Default
argument_list|)
expr_stmt|;
name|reallocData
argument_list|(
name|d
operator|->
name|size
argument_list|,
name|isTooSmall
condition|?
name|d
operator|->
name|size
operator|+
literal|1
else|:
name|d
operator|->
name|alloc
argument_list|,
name|opt
argument_list|)
expr_stmt|;
block|}
name|new
argument_list|(
argument|d->end()
argument_list|)
name|T
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|t
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
operator|++
name|d
operator|->
name|size
expr_stmt|;
end_expr_stmt
begin_endif
unit|}
endif|#
directive|endif
end_endif
begin_expr_stmt
unit|template
operator|<
name|typename
name|T
operator|>
name|void
name|QVector
operator|<
name|T
operator|>
operator|::
name|removeLast
argument_list|()
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|isEmpty
argument_list|()
argument_list|)
block|;
name|Q_ASSERT
argument_list|(
name|d
operator|->
name|alloc
argument_list|)
block|;
if|if
condition|(
operator|!
name|d
operator|->
name|ref
operator|.
name|isShared
argument_list|()
condition|)
block|{
operator|--
name|d
operator|->
name|size
expr_stmt|;
if|if
condition|(
name|QTypeInfo
operator|<
name|T
operator|>
operator|::
name|isComplex
condition|)
operator|(
name|d
operator|->
name|data
argument_list|()
operator|+
name|d
operator|->
name|size
operator|)
operator|->
operator|~
name|T
argument_list|()
expr_stmt|;
block|}
end_expr_stmt
begin_else
else|else
block|{
name|reallocData
argument_list|(
name|d
operator|->
name|size
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
end_else
begin_expr_stmt
unit|}  template
operator|<
name|typename
name|T
operator|>
name|typename
name|QVector
operator|<
name|T
operator|>
operator|::
name|iterator
name|QVector
operator|<
name|T
operator|>
operator|::
name|insert
argument_list|(
argument|iterator before
argument_list|,
argument|size_type n
argument_list|,
argument|const T&t
argument_list|)
block|{
name|Q_ASSERT_X
argument_list|(
name|isValidIterator
argument_list|(
name|before
argument_list|)
argument_list|,
literal|"QVector::insert"
argument_list|,
literal|"The specified iterator argument 'before' is invalid"
argument_list|)
block|;
name|int
name|offset
operator|=
name|std
operator|::
name|distance
argument_list|(
name|d
operator|->
name|begin
argument_list|()
argument_list|,
name|before
argument_list|)
block|;
if|if
condition|(
name|n
operator|!=
literal|0
condition|)
block|{
specifier|const
name|T
name|copy
parameter_list|(
name|t
parameter_list|)
function_decl|;
if|if
condition|(
operator|!
name|isDetached
argument_list|()
operator|||
name|d
operator|->
name|size
operator|+
name|n
operator|>
name|int
argument_list|(
name|d
operator|->
name|alloc
argument_list|)
condition|)
name|reallocData
argument_list|(
name|d
operator|->
name|size
argument_list|,
name|d
operator|->
name|size
operator|+
name|n
argument_list|,
name|QArrayData
operator|::
name|Grow
argument_list|)
expr_stmt|;
if|if
condition|(
name|QTypeInfo
operator|<
name|T
operator|>
operator|::
name|isStatic
condition|)
block|{
name|T
modifier|*
name|b
init|=
name|d
operator|->
name|end
argument_list|()
decl_stmt|;
name|T
modifier|*
name|i
init|=
name|d
operator|->
name|end
argument_list|()
operator|+
name|n
decl_stmt|;
while|while
condition|(
name|i
operator|!=
name|b
condition|)
name|new
argument_list|(
argument|--i
argument_list|)
name|T
expr_stmt|;
name|i
operator|=
name|d
operator|->
name|end
argument_list|()
expr_stmt|;
name|T
modifier|*
name|j
init|=
name|i
operator|+
name|n
decl_stmt|;
name|b
operator|=
name|d
operator|->
name|begin
argument_list|()
operator|+
name|offset
expr_stmt|;
while|while
condition|(
name|i
operator|!=
name|b
condition|)
operator|*
operator|--
name|j
operator|=
operator|*
operator|--
name|i
expr_stmt|;
name|i
operator|=
name|b
operator|+
name|n
expr_stmt|;
while|while
condition|(
name|i
operator|!=
name|b
condition|)
operator|*
operator|--
name|i
operator|=
name|copy
expr_stmt|;
block|}
end_expr_stmt
begin_else
else|else
block|{
name|T
modifier|*
name|b
init|=
name|d
operator|->
name|begin
argument_list|()
operator|+
name|offset
decl_stmt|;
name|T
modifier|*
name|i
init|=
name|b
operator|+
name|n
decl_stmt|;
name|memmove
argument_list|(
name|i
argument_list|,
name|b
argument_list|,
operator|(
name|d
operator|->
name|size
operator|-
name|offset
operator|)
operator|*
sizeof|sizeof
argument_list|(
name|T
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|i
operator|!=
name|b
condition|)
name|new
argument_list|(
argument|--i
argument_list|)
name|T
argument_list|(
name|copy
argument_list|)
expr_stmt|;
block|}
end_else
begin_expr_stmt
name|d
operator|->
name|size
operator|+=
name|n
expr_stmt|;
end_expr_stmt
begin_expr_stmt
unit|}     return
name|d
operator|->
name|begin
argument_list|()
operator|+
name|offset
expr_stmt|;
end_expr_stmt
begin_expr_stmt
unit|}  template
operator|<
name|typename
name|T
operator|>
name|typename
name|QVector
operator|<
name|T
operator|>
operator|::
name|iterator
name|QVector
operator|<
name|T
operator|>
operator|::
name|erase
argument_list|(
argument|iterator abegin
argument_list|,
argument|iterator aend
argument_list|)
block|{
name|Q_ASSERT_X
argument_list|(
name|isValidIterator
argument_list|(
name|abegin
argument_list|)
argument_list|,
literal|"QVector::erase"
argument_list|,
literal|"The specified iterator argument 'abegin' is invalid"
argument_list|)
block|;
name|Q_ASSERT_X
argument_list|(
name|isValidIterator
argument_list|(
name|aend
argument_list|)
argument_list|,
literal|"QVector::erase"
argument_list|,
literal|"The specified iterator argument 'aend' is invalid"
argument_list|)
block|;
specifier|const
name|int
name|itemsToErase
operator|=
name|aend
operator|-
name|abegin
block|;
if|if
condition|(
operator|!
name|itemsToErase
condition|)
return|return
name|abegin
return|;
name|Q_ASSERT
argument_list|(
name|abegin
operator|>=
name|d
operator|->
name|begin
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_ASSERT
argument_list|(
name|aend
operator|<=
name|d
operator|->
name|end
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_ASSERT
argument_list|(
name|abegin
operator|<=
name|aend
argument_list|)
expr_stmt|;
end_expr_stmt
begin_decl_stmt
specifier|const
name|int
name|itemsUntouched
init|=
name|abegin
operator|-
name|d
operator|->
name|begin
argument_list|()
decl_stmt|;
end_decl_stmt
begin_comment
comment|// FIXME we could do a proper realloc, which copy constructs only needed data.
end_comment
begin_comment
comment|// FIXME we ara about to delete data maybe it is good time to shrink?
end_comment
begin_comment
comment|// FIXME the shrink is also an issue in removeLast, that is just a copy + reduce of this.
end_comment
begin_if
if|if
condition|(
name|d
operator|->
name|alloc
condition|)
block|{
name|detach
argument_list|()
expr_stmt|;
name|abegin
operator|=
name|d
operator|->
name|begin
argument_list|()
operator|+
name|itemsUntouched
expr_stmt|;
name|aend
operator|=
name|abegin
operator|+
name|itemsToErase
expr_stmt|;
if|if
condition|(
name|QTypeInfo
operator|<
name|T
operator|>
operator|::
name|isStatic
condition|)
block|{
name|iterator
name|moveBegin
init|=
name|abegin
operator|+
name|itemsToErase
decl_stmt|;
name|iterator
name|moveEnd
init|=
name|d
operator|->
name|end
argument_list|()
decl_stmt|;
while|while
condition|(
name|moveBegin
operator|!=
name|moveEnd
condition|)
block|{
if|if
condition|(
name|QTypeInfo
operator|<
name|T
operator|>
operator|::
name|isComplex
condition|)
name|static_cast
operator|<
name|T
operator|*
operator|>
operator|(
name|abegin
operator|)
operator|->
expr|~
name|T
argument_list|()
expr_stmt|;
name|new
argument_list|(
argument|abegin++
argument_list|)
name|T
argument_list|(
operator|*
name|moveBegin
operator|++
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|abegin
operator|<
name|d
operator|->
name|end
argument_list|()
condition|)
block|{
comment|// destroy rest of instances
name|destruct
argument_list|(
name|abegin
argument_list|,
name|d
operator|->
name|end
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|destruct
argument_list|(
name|abegin
argument_list|,
name|aend
argument_list|)
expr_stmt|;
name|memmove
argument_list|(
name|abegin
argument_list|,
name|aend
argument_list|,
operator|(
name|d
operator|->
name|size
operator|-
name|itemsToErase
operator|-
name|itemsUntouched
operator|)
operator|*
sizeof|sizeof
argument_list|(
name|T
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|size
operator|-=
name|itemsToErase
expr_stmt|;
block|}
end_if
begin_return
return|return
name|d
operator|->
name|begin
argument_list|()
operator|+
name|itemsUntouched
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|typename
name|T
operator|>
name|bool
name|QVector
operator|<
name|T
operator|>
operator|::
name|operator
operator|==
operator|(
specifier|const
name|QVector
operator|<
name|T
operator|>
operator|&
name|v
operator|)
specifier|const
block|{
if|if
condition|(
name|d
operator|==
name|v
operator|.
name|d
condition|)
return|return
name|true
return|;
end_expr_stmt
begin_if
if|if
condition|(
name|d
operator|->
name|size
operator|!=
name|v
operator|.
name|d
operator|->
name|size
condition|)
return|return
name|false
return|;
end_if
begin_decl_stmt
specifier|const
name|T
modifier|*
name|vb
init|=
name|v
operator|.
name|d
operator|->
name|begin
argument_list|()
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|const
name|T
modifier|*
name|b
init|=
name|d
operator|->
name|begin
argument_list|()
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|const
name|T
modifier|*
name|e
init|=
name|d
operator|->
name|end
argument_list|()
decl_stmt|;
end_decl_stmt
begin_return
return|return
name|std
operator|::
name|equal
argument_list|(
name|b
argument_list|,
name|e
argument_list|,
name|QT_MAKE_CHECKED_ARRAY_ITERATOR
argument_list|(
name|vb
argument_list|,
name|v
operator|.
name|d
operator|->
name|size
argument_list|)
argument_list|)
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|typename
name|T
operator|>
name|QVector
operator|<
name|T
operator|>
operator|&
name|QVector
operator|<
name|T
operator|>
operator|::
name|fill
argument_list|(
argument|const T&from
argument_list|,
argument|int asize
argument_list|)
block|{
specifier|const
name|T
name|copy
argument_list|(
name|from
argument_list|)
block|;
name|resize
argument_list|(
name|asize
operator|<
literal|0
condition|?
name|d
operator|->
name|size
else|:
name|asize
argument_list|)
block|;
if|if
condition|(
name|d
operator|->
name|size
condition|)
block|{
name|T
modifier|*
name|i
init|=
name|d
operator|->
name|end
argument_list|()
decl_stmt|;
name|T
modifier|*
name|b
init|=
name|d
operator|->
name|begin
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|!=
name|b
condition|)
operator|*
operator|--
name|i
operator|=
name|copy
expr_stmt|;
block|}
end_expr_stmt
begin_return
return|return
operator|*
name|this
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|typename
name|T
operator|>
name|QVector
operator|<
name|T
operator|>
operator|&
name|QVector
operator|<
name|T
operator|>
operator|::
name|operator
operator|+=
operator|(
specifier|const
name|QVector
operator|&
name|l
operator|)
block|{
name|uint
name|newSize
operator|=
name|d
operator|->
name|size
operator|+
name|l
operator|.
name|d
operator|->
name|size
block|;
specifier|const
name|bool
name|isTooSmall
operator|=
name|newSize
operator|>
name|d
operator|->
name|alloc
block|;
if|if
condition|(
operator|!
name|isDetached
argument_list|()
operator|||
name|isTooSmall
condition|)
block|{
name|QArrayData
operator|::
name|AllocationOptions
name|opt
argument_list|(
name|isTooSmall
condition|?
name|QArrayData
operator|::
name|Grow
else|:
name|QArrayData
operator|::
name|Default
argument_list|)
expr_stmt|;
name|reallocData
argument_list|(
name|d
operator|->
name|size
argument_list|,
name|isTooSmall
condition|?
name|newSize
else|:
name|d
operator|->
name|alloc
argument_list|,
name|opt
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_if
if|if
condition|(
name|d
operator|->
name|alloc
condition|)
block|{
name|T
modifier|*
name|w
init|=
name|d
operator|->
name|begin
argument_list|()
operator|+
name|newSize
decl_stmt|;
name|T
modifier|*
name|i
init|=
name|l
operator|.
name|d
operator|->
name|end
argument_list|()
decl_stmt|;
name|T
modifier|*
name|b
init|=
name|l
operator|.
name|d
operator|->
name|begin
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|!=
name|b
condition|)
block|{
if|if
condition|(
name|QTypeInfo
operator|<
name|T
operator|>
operator|::
name|isComplex
condition|)
name|new
argument_list|(
argument|--w
argument_list|)
name|T
argument_list|(
operator|*
operator|--
name|i
argument_list|)
expr_stmt|;
else|else
operator|*
operator|--
name|w
operator|=
operator|*
operator|--
name|i
expr_stmt|;
block|}
name|d
operator|->
name|size
operator|=
name|newSize
expr_stmt|;
block|}
end_if
begin_return
return|return
operator|*
name|this
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|typename
name|T
operator|>
name|int
name|QVector
operator|<
name|T
operator|>
operator|::
name|indexOf
argument_list|(
argument|const T&t
argument_list|,
argument|int from
argument_list|)
specifier|const
block|{
if|if
condition|(
name|from
operator|<
literal|0
condition|)
name|from
operator|=
name|qMax
argument_list|(
name|from
operator|+
name|d
operator|->
name|size
argument_list|,
literal|0
argument_list|)
expr_stmt|;
end_expr_stmt
begin_if
if|if
condition|(
name|from
operator|<
name|d
operator|->
name|size
condition|)
block|{
name|T
modifier|*
name|n
init|=
name|d
operator|->
name|begin
argument_list|()
operator|+
name|from
operator|-
literal|1
decl_stmt|;
name|T
modifier|*
name|e
init|=
name|d
operator|->
name|end
argument_list|()
decl_stmt|;
while|while
condition|(
operator|++
name|n
operator|!=
name|e
condition|)
if|if
condition|(
operator|*
name|n
operator|==
name|t
condition|)
return|return
name|n
operator|-
name|d
operator|->
name|begin
argument_list|()
return|;
block|}
end_if
begin_return
return|return
operator|-
literal|1
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|typename
name|T
operator|>
name|int
name|QVector
operator|<
name|T
operator|>
operator|::
name|lastIndexOf
argument_list|(
argument|const T&t
argument_list|,
argument|int from
argument_list|)
specifier|const
block|{
if|if
condition|(
name|from
operator|<
literal|0
condition|)
name|from
operator|+=
name|d
operator|->
name|size
expr_stmt|;
elseif|else
if|if
condition|(
name|from
operator|>=
name|d
operator|->
name|size
condition|)
name|from
operator|=
name|d
operator|->
name|size
operator|-
literal|1
expr_stmt|;
end_expr_stmt
begin_if
if|if
condition|(
name|from
operator|>=
literal|0
condition|)
block|{
name|T
modifier|*
name|b
init|=
name|d
operator|->
name|begin
argument_list|()
decl_stmt|;
name|T
modifier|*
name|n
init|=
name|d
operator|->
name|begin
argument_list|()
operator|+
name|from
operator|+
literal|1
decl_stmt|;
while|while
condition|(
name|n
operator|!=
name|b
condition|)
block|{
if|if
condition|(
operator|*
operator|--
name|n
operator|==
name|t
condition|)
return|return
name|n
operator|-
name|b
return|;
block|}
block|}
end_if
begin_return
return|return
operator|-
literal|1
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|typename
name|T
operator|>
name|bool
name|QVector
operator|<
name|T
operator|>
operator|::
name|contains
argument_list|(
argument|const T&t
argument_list|)
specifier|const
block|{
specifier|const
name|T
operator|*
name|b
operator|=
name|d
operator|->
name|begin
argument_list|()
block|;
specifier|const
name|T
operator|*
name|e
operator|=
name|d
operator|->
name|end
argument_list|()
block|;
return|return
name|std
operator|::
name|find
argument_list|(
name|b
argument_list|,
name|e
argument_list|,
name|t
argument_list|)
operator|!=
name|e
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|int
name|QVector
operator|<
name|T
operator|>
operator|::
name|count
argument_list|(
argument|const T&t
argument_list|)
specifier|const
block|{
specifier|const
name|T
operator|*
name|b
operator|=
name|d
operator|->
name|begin
argument_list|()
block|;
specifier|const
name|T
operator|*
name|e
operator|=
name|d
operator|->
name|end
argument_list|()
block|;
return|return
name|int
argument_list|(
name|std
operator|::
name|count
argument_list|(
name|b
argument_list|,
name|e
argument_list|,
name|t
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|Q_OUTOFLINE_TEMPLATE
name|QVector
operator|<
name|T
operator|>
name|QVector
operator|<
name|T
operator|>
operator|::
name|mid
argument_list|(
argument|int pos
argument_list|,
argument|int len
argument_list|)
specifier|const
block|{
name|using
name|namespace
name|QtPrivate
block|;
switch|switch
condition|(
name|QContainerImplHelper
operator|::
name|mid
argument_list|(
name|d
operator|->
name|size
argument_list|,
operator|&
name|pos
argument_list|,
operator|&
name|len
argument_list|)
condition|)
block|{
case|case
name|QContainerImplHelper
operator|::
name|Null
case|:
case|case
name|QContainerImplHelper
operator|::
name|Empty
case|:
return|return
name|QVector
operator|<
name|T
operator|>
operator|(
operator|)
return|;
case|case
name|QContainerImplHelper
operator|::
name|Full
case|:
return|return
operator|*
name|this
return|;
case|case
name|QContainerImplHelper
operator|::
name|Subset
case|:
break|break;
block|}
name|QVector
operator|<
name|T
operator|>
name|midResult
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|midResult
operator|.
name|reallocData
argument_list|(
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|T
modifier|*
name|srcFrom
init|=
name|d
operator|->
name|begin
argument_list|()
operator|+
name|pos
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|T
modifier|*
name|srcTo
init|=
name|d
operator|->
name|begin
argument_list|()
operator|+
name|pos
operator|+
name|len
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|midResult
operator|.
name|copyConstruct
argument_list|(
name|srcFrom
argument_list|,
name|srcTo
argument_list|,
name|midResult
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|midResult
operator|.
name|d
operator|->
name|size
operator|=
name|len
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|midResult
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|typename
name|T
operator|>
name|Q_OUTOFLINE_TEMPLATE
name|QList
operator|<
name|T
operator|>
name|QVector
operator|<
name|T
operator|>
operator|::
name|toList
argument_list|()
specifier|const
block|{
name|QList
operator|<
name|T
operator|>
name|result
block|;
name|result
operator|.
name|reserve
argument_list|(
name|size
argument_list|()
argument_list|)
block|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|result
operator|.
name|append
argument_list|(
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|result
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|typename
name|T
operator|>
name|Q_OUTOFLINE_TEMPLATE
name|QVector
operator|<
name|T
operator|>
name|QList
operator|<
name|T
operator|>
operator|::
name|toVector
argument_list|()
specifier|const
block|{
name|QVector
operator|<
name|T
operator|>
name|result
argument_list|(
name|size
argument_list|()
argument_list|)
block|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|result
index|[
name|i
index|]
operator|=
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|result
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|typename
name|T
operator|>
name|QVector
operator|<
name|T
operator|>
name|QVector
operator|<
name|T
operator|>
operator|::
name|fromList
argument_list|(
argument|const QList<T>&list
argument_list|)
block|{
return|return
name|list
operator|.
name|toVector
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|QList
operator|<
name|T
operator|>
name|QList
operator|<
name|T
operator|>
operator|::
name|fromVector
argument_list|(
argument|const QVector<T>&vector
argument_list|)
block|{
return|return
name|vector
operator|.
name|toList
argument_list|()
return|;
block|}
end_expr_stmt
begin_macro
name|Q_DECLARE_SEQUENTIAL_ITERATOR
argument_list|(
argument|Vector
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_MUTABLE_SEQUENTIAL_ITERATOR
argument_list|(
argument|Vector
argument_list|)
end_macro
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|uint
name|qHash
argument_list|(
argument|const QVector<T>&key
argument_list|,
argument|uint seed =
literal|0
argument_list|)
name|Q_DECL_NOEXCEPT_EXPR
argument_list|(
argument|noexcept(qHashRange(key.cbegin(), key.cend(), seed))
argument_list|)
block|{
return|return
name|qHashRange
argument_list|(
name|key
operator|.
name|cbegin
argument_list|()
argument_list|,
name|key
operator|.
name|cend
argument_list|()
argument_list|,
name|seed
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|bool
name|operator
operator|<
operator|(
specifier|const
name|QVector
operator|<
name|T
operator|>
operator|&
name|lhs
operator|,
specifier|const
name|QVector
operator|<
name|T
operator|>
operator|&
name|rhs
operator|)
name|Q_DECL_NOEXCEPT_EXPR
argument_list|(
argument|noexcept(std::lexicographical_compare(lhs.begin(), lhs.end(),                                                                rhs.begin(), rhs.end()))
argument_list|)
block|{
return|return
name|std
operator|::
name|lexicographical_compare
argument_list|(
name|lhs
operator|.
name|begin
argument_list|()
argument_list|,
name|lhs
operator|.
name|end
argument_list|()
argument_list|,
name|rhs
operator|.
name|begin
argument_list|()
argument_list|,
name|rhs
operator|.
name|end
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|bool
name|operator
operator|>
operator|(
specifier|const
name|QVector
operator|<
name|T
operator|>
operator|&
name|lhs
operator|,
specifier|const
name|QVector
operator|<
name|T
operator|>
operator|&
name|rhs
operator|)
name|Q_DECL_NOEXCEPT_EXPR
argument_list|(
argument|noexcept(lhs< rhs)
argument_list|)
block|{
return|return
name|rhs
operator|<
name|lhs
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|bool
name|operator
operator|<=
operator|(
specifier|const
name|QVector
operator|<
name|T
operator|>
operator|&
name|lhs
operator|,
specifier|const
name|QVector
operator|<
name|T
operator|>
operator|&
name|rhs
operator|)
name|Q_DECL_NOEXCEPT_EXPR
argument_list|(
argument|noexcept(lhs< rhs)
argument_list|)
block|{
return|return
operator|!
operator|(
name|lhs
operator|>
name|rhs
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|bool
name|operator
operator|>=
operator|(
specifier|const
name|QVector
operator|<
name|T
operator|>
operator|&
name|lhs
operator|,
specifier|const
name|QVector
operator|<
name|T
operator|>
operator|&
name|rhs
operator|)
name|Q_DECL_NOEXCEPT_EXPR
argument_list|(
argument|noexcept(lhs< rhs)
argument_list|)
block|{
return|return
operator|!
operator|(
name|lhs
operator|<
name|rhs
operator|)
return|;
block|}
end_expr_stmt
begin_comment
comment|/*    ### Qt 5:    ### This needs to be removed for next releases of Qt. It is a workaround for vc++ because    ### Qt exports QPolygon and QPolygonF that inherit QVector<QPoint> and    ### QVector<QPointF> respectively. */
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|Q_CC_MSVC
end_ifdef
begin_expr_stmt
name|QT_BEGIN_INCLUDE_NAMESPACE
include|#
directive|include
file|<QtCore/qpoint.h>
name|QT_END_INCLUDE_NAMESPACE
if|#
directive|if
name|defined
argument_list|(
name|QT_BUILD_CORE_LIB
argument_list|)
DECL|macro|Q_TEMPLATE_EXTERN
define|#
directive|define
name|Q_TEMPLATE_EXTERN
else|#
directive|else
define|#
directive|define
name|Q_TEMPLATE_EXTERN
value|extern
endif|#
directive|endif
name|Q_TEMPLATE_EXTERN
name|template
name|class
name|Q_CORE_EXPORT
name|QVector
operator|<
name|QPointF
operator|>
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|variable|QPoint
name|Q_TEMPLATE_EXTERN
name|template
name|class
name|Q_CORE_EXPORT
name|QVector
operator|<
name|QPoint
operator|>
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QVECTOR_H
end_comment
end_unit
