begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|Q_QDOC
end_ifndef
begin_ifndef
ifndef|#
directive|ifndef
name|QSHAREDPOINTER_H
end_ifndef
begin_error
error|#
directive|error
error|Do not include qsharedpointer_impl.h directly
end_error
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
literal|0
end_if
begin_comment
comment|// These macros are duplicated here to make syncqt not complain a about
end_comment
begin_comment
comment|// this header, as we have a "qt_sync_stop_processing" below, which in turn
end_comment
begin_comment
comment|// is here because this file contains a template mess and duplicates the
end_comment
begin_comment
comment|// classes found in qsharedpointer.h
end_comment
begin_pragma
unit|QT_BEGIN_HEADER QT_BEGIN_NAMESPACE QT_END_NAMESPACE QT_END_HEADER
pragma|#
directive|pragma
name|qt_sync_stop_processing
end_pragma
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<new>
end_include
begin_include
include|#
directive|include
file|<QtCore/qatomic.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qobject.h>
end_include
begin_comment
comment|// for qobject_cast
end_comment
begin_expr_stmt
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
comment|// Macro QSHAREDPOINTER_VERIFY_AUTO_CAST
comment|//  generates a compiler error if the following construct isn't valid:
comment|//    T *ptr1;
comment|//    X *ptr2 = ptr1;
comment|//
ifdef|#
directive|ifdef
name|QT_NO_DEBUG
DECL|macro|QSHAREDPOINTER_VERIFY_AUTO_CAST
define|#
directive|define
name|QSHAREDPOINTER_VERIFY_AUTO_CAST
parameter_list|(
name|T
parameter_list|,
name|X
parameter_list|)
value|qt_noop()
else|#
directive|else
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|void
name|qt_sharedpointer_cast_check
argument_list|(
argument|T *
argument_list|)
block|{ }
define|#
directive|define
name|QSHAREDPOINTER_VERIFY_AUTO_CAST
parameter_list|(
name|T
parameter_list|,
name|X
parameter_list|)
define|\
value|qt_sharedpointer_cast_check<T>(static_cast<X *>(0))
endif|#
directive|endif
comment|//
comment|// forward declarations
comment|//
DECL|variable|QWeakPointer
name|template
operator|<
name|class
name|T
operator|>
name|class
name|QWeakPointer
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|variable|QSharedPointer
name|template
operator|<
name|class
name|T
operator|>
name|class
name|QSharedPointer
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|variable|X
name|template
operator|<
name|class
name|X
operator|,
name|class
name|T
operator|>
name|QSharedPointer
operator|<
name|X
operator|>
name|qSharedPointerCast
argument_list|(
specifier|const
name|QSharedPointer
operator|<
name|T
operator|>
operator|&
name|ptr
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|variable|X
name|template
operator|<
name|class
name|X
operator|,
name|class
name|T
operator|>
name|QSharedPointer
operator|<
name|X
operator|>
name|qSharedPointerDynamicCast
argument_list|(
specifier|const
name|QSharedPointer
operator|<
name|T
operator|>
operator|&
name|ptr
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|variable|X
name|template
operator|<
name|class
name|X
operator|,
name|class
name|T
operator|>
name|QSharedPointer
operator|<
name|X
operator|>
name|qSharedPointerConstCast
argument_list|(
specifier|const
name|QSharedPointer
operator|<
name|T
operator|>
operator|&
name|ptr
argument_list|)
expr_stmt|;
end_expr_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QOBJECT
end_ifndef
begin_expr_stmt
DECL|variable|X
name|template
operator|<
name|class
name|X
operator|,
name|class
name|T
operator|>
name|QSharedPointer
operator|<
name|X
operator|>
name|qSharedPointerObjectCast
argument_list|(
specifier|const
name|QSharedPointer
operator|<
name|T
operator|>
operator|&
name|ptr
argument_list|)
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|namespace
name|QtSharedPointer
block|{
name|template
operator|<
name|class
name|T
operator|>
name|class
name|InternalRefCount
expr_stmt|;
name|template
operator|<
name|class
name|T
operator|>
name|class
name|ExternalRefCount
expr_stmt|;
name|template
operator|<
name|class
name|X
operator|,
name|class
name|Y
operator|>
name|QSharedPointer
operator|<
name|X
operator|>
name|copyAndSetPointer
argument_list|(
name|X
operator|*
name|ptr
argument_list|,
specifier|const
name|QSharedPointer
operator|<
name|Y
operator|>
operator|&
name|src
argument_list|)
expr_stmt|;
comment|// used in debug mode to verify the reuse of pointers
name|Q_CORE_EXPORT
name|void
name|internalSafetyCheckAdd2
parameter_list|(
specifier|const
name|void
modifier|*
parameter_list|,
specifier|const
specifier|volatile
name|void
modifier|*
parameter_list|)
function_decl|;
name|Q_CORE_EXPORT
name|void
name|internalSafetyCheckRemove2
parameter_list|(
specifier|const
name|void
modifier|*
parameter_list|)
function_decl|;
name|template
operator|<
name|class
name|T
operator|,
name|typename
name|Klass
operator|,
name|typename
name|RetVal
operator|>
specifier|inline
name|void
name|executeDeleter
argument_list|(
argument|T *t
argument_list|,
argument|RetVal (Klass:: *memberDeleter)()
argument_list|)
block|{
operator|(
name|t
operator|->*
name|memberDeleter
operator|)
operator|(
operator|)
block|; }
name|template
operator|<
name|class
name|T
operator|,
name|typename
name|Deleter
operator|>
specifier|inline
name|void
name|executeDeleter
argument_list|(
argument|T *t
argument_list|,
argument|Deleter d
argument_list|)
block|{
name|d
argument_list|(
name|t
argument_list|)
block|; }
name|template
operator|<
name|class
name|T
operator|>
specifier|inline
name|void
name|normalDeleter
argument_list|(
argument|T *t
argument_list|)
block|{
name|delete
name|t
block|; }
comment|// this uses partial template specialization
name|template
operator|<
name|class
name|T
operator|>
expr|struct
name|RemovePointer
expr_stmt|;
name|template
operator|<
name|class
name|T
operator|>
expr|struct
name|RemovePointer
operator|<
name|T
operator|*
operator|>
block|{
typedef|typedef
name|T
name|Type
typedef|;
block|}
empty_stmt|;
name|template
operator|<
name|class
name|T
operator|>
expr|struct
name|RemovePointer
operator|<
name|QSharedPointer
operator|<
name|T
operator|>
expr|>
block|{
typedef|typedef
name|T
name|Type
typedef|;
block|}
empty_stmt|;
name|template
operator|<
name|class
name|T
operator|>
expr|struct
name|RemovePointer
operator|<
name|QWeakPointer
operator|<
name|T
operator|>
expr|>
block|{
typedef|typedef
name|T
name|Type
typedef|;
block|}
empty_stmt|;
comment|// This class provides the basic functionality of a pointer wrapper.
comment|// Its existence is mostly legacy, since originally QSharedPointer
comment|// could also be used for internally-refcounted objects.
name|template
operator|<
name|class
name|T
operator|>
name|class
name|Basic
block|{
typedef|typedef
name|T
operator|*
name|Basic
operator|::
operator|*
name|RestrictedBool
expr_stmt|;
name|public
operator|:
typedef|typedef
name|T
name|Type
typedef|;
typedef|typedef
name|T
name|element_type
typedef|;
typedef|typedef
name|T
name|value_type
typedef|;
typedef|typedef
name|value_type
modifier|*
name|pointer
typedef|;
typedef|typedef
specifier|const
name|value_type
modifier|*
name|const_pointer
typedef|;
typedef|typedef
name|value_type
modifier|&
name|reference
typedef|;
typedef|typedef
specifier|const
name|value_type
modifier|&
name|const_reference
typedef|;
typedef|typedef
name|qptrdiff
name|difference_type
typedef|;
specifier|inline
name|T
operator|*
name|data
argument_list|()
specifier|const
block|{
return|return
name|value
return|;
block|}
specifier|inline
name|bool
name|isNull
argument_list|()
specifier|const
block|{
return|return
operator|!
name|data
argument_list|()
return|;
block|}
specifier|inline
name|operator
name|RestrictedBool
argument_list|()
specifier|const
block|{
return|return
name|isNull
argument_list|()
operator|?
literal|0
operator|:
operator|&
name|Basic
operator|::
name|value
return|;
block|}
specifier|inline
name|bool
name|operator
operator|!
operator|(
operator|)
specifier|const
block|{
return|return
name|isNull
argument_list|()
return|;
block|}
specifier|inline
name|T
operator|&
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
operator|*
name|data
argument_list|()
return|;
block|}
specifier|inline
name|T
operator|*
name|operator
operator|->
expr|(
block|)
decl|const
block|{
return|return
name|data
argument_list|()
return|;
block|}
end_decl_stmt
begin_label
name|protected
label|:
end_label
begin_expr_stmt
specifier|inline
name|Basic
argument_list|(
name|T
operator|*
name|ptr
operator|=
literal|0
argument_list|)
operator|:
name|value
argument_list|(
argument|ptr
argument_list|)
block|{ }
specifier|inline
name|Basic
argument_list|(
argument|Qt::Initialization
argument_list|)
block|{ }
comment|// ~Basic();
specifier|inline
name|void
name|internalConstruct
argument_list|(
argument|T *ptr
argument_list|)
block|{
name|value
operator|=
name|ptr
block|;         }
if|#
directive|if
name|defined
argument_list|(
name|Q_NO_TEMPLATE_FRIENDS
argument_list|)
name|public
operator|:
else|#
directive|else
name|template
operator|<
name|class
name|X
operator|>
name|friend
name|class
name|QT_PREPEND_NAMESPACE
argument_list|(
name|QWeakPointer
argument_list|)
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|Type
modifier|*
name|value
decl_stmt|;
end_decl_stmt
begin_comment
unit|};
comment|// This class is the d-pointer of QSharedPointer and QWeakPointer.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// It is a reference-counted reference counter. "strongref" is the inner
end_comment
begin_comment
comment|// reference counter, and it tracks the lifetime of the pointer itself.
end_comment
begin_comment
comment|// "weakref" is the outer reference counter and it tracks the lifetime of
end_comment
begin_comment
comment|// the ExternalRefCountData object.
end_comment
begin_struct
struct|struct
name|ExternalRefCountData
block|{
name|QBasicAtomicInt
name|weakref
decl_stmt|;
name|QBasicAtomicInt
name|strongref
decl_stmt|;
specifier|inline
name|ExternalRefCountData
argument_list|()
block|{
name|strongref
operator|.
name|store
argument_list|(
literal|1
argument_list|)
block|;
name|weakref
operator|.
name|store
argument_list|(
literal|1
argument_list|)
block|;         }
specifier|inline
name|ExternalRefCountData
argument_list|(
argument|Qt::Initialization
argument_list|)
block|{ }
name|virtual
specifier|inline
operator|~
name|ExternalRefCountData
argument_list|()
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|weakref
operator|.
name|load
argument_list|()
argument_list|)
block|;
name|Q_ASSERT
argument_list|(
name|strongref
operator|.
name|load
argument_list|()
operator|<=
literal|0
argument_list|)
block|; }
comment|// overridden by derived classes
comment|// returns false to indicate caller should delete the pointer
comment|// returns true in case it has already done so
name|virtual
specifier|inline
name|bool
name|destroy
argument_list|()
block|{
return|return
name|false
return|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_QOBJECT
name|Q_CORE_EXPORT
specifier|static
name|ExternalRefCountData
modifier|*
name|getAndRef
parameter_list|(
specifier|const
name|QObject
modifier|*
parameter_list|)
function_decl|;
name|Q_CORE_EXPORT
name|void
name|setQObjectShared
parameter_list|(
specifier|const
name|QObject
modifier|*
parameter_list|,
name|bool
name|enable
parameter_list|)
function_decl|;
endif|#
directive|endif
specifier|inline
name|void
name|setQObjectShared
parameter_list|(
modifier|...
parameter_list|)
block|{ }
block|}
struct|;
end_struct
begin_comment
comment|// sizeof(ExternalRefCount) = 12 (32-bit) / 16 (64-bit)
end_comment
begin_comment
comment|// This class extends ExternalRefCountData with a pointer
end_comment
begin_comment
comment|// to a function, which is called by the destroy() function.
end_comment
begin_decl_stmt
name|struct
name|ExternalRefCountWithDestroyFn
range|:
name|public
name|ExternalRefCountData
block|{
typedef|typedef
name|void
function_decl|(
modifier|*
name|DestroyerFn
function_decl|)
parameter_list|(
name|ExternalRefCountData
modifier|*
parameter_list|)
function_decl|;
name|DestroyerFn
name|destroyer
decl_stmt|;
end_decl_stmt
begin_expr_stmt
specifier|inline
name|ExternalRefCountWithDestroyFn
argument_list|(
argument|DestroyerFn d
argument_list|)
operator|:
name|destroyer
argument_list|(
argument|d
argument_list|)
block|{ }
specifier|inline
name|bool
name|destroy
argument_list|()
block|{
name|destroyer
argument_list|(
name|this
argument_list|)
block|;
return|return
name|true
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|void
name|operator
name|delete
parameter_list|(
name|void
modifier|*
name|ptr
parameter_list|)
block|{
operator|::
name|operator
name|delete
argument_list|(
name|ptr
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
specifier|inline
name|void
name|operator
name|delete
parameter_list|(
name|void
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
block|{ }
end_function
begin_comment
unit|};
comment|// sizeof(ExternalRefCountWithDestroyFn) = 16 (32-bit) / 24 (64-bit)
end_comment
begin_comment
comment|// This class extends ExternalRefCountWithDestroyFn and implements
end_comment
begin_comment
comment|// the static function that deletes the object. The pointer and the
end_comment
begin_comment
comment|// custom deleter are kept in the "extra" member.
end_comment
begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|typename
name|Deleter
operator|>
expr|struct
name|ExternalRefCountWithCustomDeleter
operator|:
name|public
name|ExternalRefCountWithDestroyFn
block|{
typedef|typedef
name|ExternalRefCountWithCustomDeleter
name|Self
typedef|;
end_expr_stmt
begin_typedef
typedef|typedef
name|ExternalRefCountWithDestroyFn
name|BaseClass
typedef|;
end_typedef
begin_struct
struct|struct
name|CustomDeleter
block|{
name|Deleter
name|deleter
decl_stmt|;
name|T
modifier|*
name|ptr
decl_stmt|;
specifier|inline
name|CustomDeleter
argument_list|(
argument|T *p
argument_list|,
argument|Deleter d
argument_list|)
operator|:
name|deleter
argument_list|(
name|d
argument_list|)
operator|,
name|ptr
argument_list|(
argument|p
argument_list|)
block|{}
block|}
struct|;
end_struct
begin_decl_stmt
name|CustomDeleter
name|extra
decl_stmt|;
end_decl_stmt
begin_comment
comment|// sizeof(CustomDeleter) = sizeof(Deleter) + sizeof(void*)
end_comment
begin_comment
comment|// for Deleter = function pointer:  8 (32-bit) / 16 (64-bit)
end_comment
begin_comment
comment|// for Deleter = PMF: 12 (32-bit) / 24 (64-bit)  (GCC)
end_comment
begin_function
specifier|static
specifier|inline
name|void
name|deleter
parameter_list|(
name|ExternalRefCountData
modifier|*
name|self
parameter_list|)
block|{
name|Self
modifier|*
name|realself
init|=
name|static_cast
operator|<
name|Self
operator|*
operator|>
operator|(
name|self
operator|)
decl_stmt|;
name|executeDeleter
argument_list|(
name|realself
operator|->
name|extra
operator|.
name|ptr
argument_list|,
name|realself
operator|->
name|extra
operator|.
name|deleter
argument_list|)
expr_stmt|;
comment|// delete the deleter too
name|realself
operator|->
name|extra
operator|.
expr|~
name|CustomDeleter
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
specifier|static
name|void
name|safetyCheckDeleter
parameter_list|(
name|ExternalRefCountData
modifier|*
name|self
parameter_list|)
block|{
name|internalSafetyCheckRemove2
argument_list|(
name|self
argument_list|)
expr_stmt|;
name|deleter
argument_list|(
name|self
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
specifier|static
specifier|inline
name|Self
modifier|*
name|create
parameter_list|(
name|T
modifier|*
name|ptr
parameter_list|,
name|Deleter
name|userDeleter
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_SHAREDPOINTER_TRACK_POINTERS
name|DestroyerFn
name|destroy
init|=
operator|&
name|safetyCheckDeleter
decl_stmt|;
else|#
directive|else
name|DestroyerFn
name|destroy
init|=
operator|&
name|deleter
decl_stmt|;
endif|#
directive|endif
name|Self
modifier|*
name|d
init|=
name|static_cast
operator|<
name|Self
operator|*
operator|>
operator|(
operator|::
name|operator
name|new
argument_list|(
sizeof|sizeof
argument_list|(
name|Self
argument_list|)
argument_list|)
operator|)
decl_stmt|;
comment|// initialize the two sub-objects
name|new
argument_list|(
argument|&d->extra
argument_list|)
name|CustomDeleter
argument_list|(
name|ptr
argument_list|,
name|userDeleter
argument_list|)
expr_stmt|;
name|new
argument_list|(
argument|d
argument_list|)
name|BaseClass
argument_list|(
name|destroy
argument_list|)
expr_stmt|;
comment|// can't throw
return|return
name|d
return|;
block|}
end_function
begin_label
name|private
label|:
end_label
begin_comment
comment|// prevent construction and the emission of virtual symbols
end_comment
begin_expr_stmt
name|ExternalRefCountWithCustomDeleter
argument_list|()
expr_stmt|;
end_expr_stmt
begin_expr_stmt
operator|~
name|ExternalRefCountWithCustomDeleter
argument_list|()
expr_stmt|;
end_expr_stmt
begin_comment
unit|};
comment|// This class extends ExternalRefCountWithDestroyFn and adds a "T"
end_comment
begin_comment
comment|// member. That way, when the create() function is called, we allocate
end_comment
begin_comment
comment|// memory for both QSharedPointer's d-pointer and the actual object being
end_comment
begin_comment
comment|// tracked.
end_comment
begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
expr|struct
name|ExternalRefCountWithContiguousData
operator|:
name|public
name|ExternalRefCountWithDestroyFn
block|{
typedef|typedef
name|ExternalRefCountWithDestroyFn
name|Parent
typedef|;
name|T
name|data
expr_stmt|;
end_expr_stmt
begin_function
specifier|static
name|void
name|deleter
parameter_list|(
name|ExternalRefCountData
modifier|*
name|self
parameter_list|)
block|{
name|ExternalRefCountWithContiguousData
modifier|*
name|that
init|=
name|static_cast
operator|<
name|ExternalRefCountWithContiguousData
operator|*
operator|>
operator|(
name|self
operator|)
decl_stmt|;
name|that
operator|->
name|data
operator|.
expr|~
name|T
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
specifier|static
name|void
name|safetyCheckDeleter
parameter_list|(
name|ExternalRefCountData
modifier|*
name|self
parameter_list|)
block|{
name|internalSafetyCheckRemove2
argument_list|(
name|self
argument_list|)
expr_stmt|;
name|deleter
argument_list|(
name|self
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
specifier|static
specifier|inline
name|ExternalRefCountData
modifier|*
name|create
parameter_list|(
name|T
modifier|*
modifier|*
name|ptr
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_SHAREDPOINTER_TRACK_POINTERS
name|DestroyerFn
name|destroy
init|=
operator|&
name|safetyCheckDeleter
decl_stmt|;
else|#
directive|else
name|DestroyerFn
name|destroy
init|=
operator|&
name|deleter
decl_stmt|;
endif|#
directive|endif
name|ExternalRefCountWithContiguousData
modifier|*
name|d
init|=
name|static_cast
operator|<
name|ExternalRefCountWithContiguousData
operator|*
operator|>
operator|(
operator|::
name|operator
name|new
argument_list|(
sizeof|sizeof
argument_list|(
name|ExternalRefCountWithContiguousData
argument_list|)
argument_list|)
operator|)
decl_stmt|;
comment|// initialize the d-pointer sub-object
comment|// leave d->data uninitialized
name|new
argument_list|(
argument|d
argument_list|)
name|Parent
argument_list|(
name|destroy
argument_list|)
expr_stmt|;
comment|// can't throw
operator|*
name|ptr
operator|=
operator|&
name|d
operator|->
name|data
expr_stmt|;
return|return
name|d
return|;
block|}
end_function
begin_label
name|private
label|:
end_label
begin_comment
comment|// prevent construction and the emission of virtual symbols
end_comment
begin_expr_stmt
name|ExternalRefCountWithContiguousData
argument_list|()
expr_stmt|;
end_expr_stmt
begin_expr_stmt
operator|~
name|ExternalRefCountWithContiguousData
argument_list|()
expr_stmt|;
end_expr_stmt
begin_comment
unit|};
comment|// This is the main body of QSharedPointer. It implements the
end_comment
begin_comment
comment|// external reference counting functionality.
end_comment
begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|class
name|ExternalRefCount
operator|:
name|public
name|Basic
operator|<
name|T
operator|>
block|{
name|protected
operator|:
typedef|typedef
name|ExternalRefCountData
name|Data
typedef|;
specifier|inline
name|void
name|deref
argument_list|()
block|{
name|deref
argument_list|(
name|d
argument_list|,
name|this
operator|->
name|value
argument_list|)
block|; }
specifier|static
specifier|inline
name|void
name|deref
argument_list|(
argument|Data *d
argument_list|,
argument|T *value
argument_list|)
block|{
if|if
condition|(
operator|!
name|d
condition|)
return|return;
end_expr_stmt
begin_if
if|if
condition|(
operator|!
name|d
operator|->
name|strongref
operator|.
name|deref
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|destroy
argument_list|()
condition|)
name|delete
name|value
decl_stmt|;
block|}
end_if
begin_if
if|if
condition|(
operator|!
name|d
operator|->
name|weakref
operator|.
name|deref
argument_list|()
condition|)
name|delete
name|d
decl_stmt|;
end_if
begin_function
unit|}          inline
name|void
name|internalConstruct
parameter_list|(
name|T
modifier|*
name|ptr
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_SHAREDPOINTER_TRACK_POINTERS
name|internalConstruct
operator|<
name|void
argument_list|(
operator|*
argument_list|)
argument_list|(
name|T
operator|*
argument_list|)
operator|>
operator|(
name|ptr
operator|,
name|normalDeleter
operator|)
expr_stmt|;
else|#
directive|else
if|if
condition|(
name|ptr
condition|)
name|d
operator|=
name|new
name|Data
expr_stmt|;
else|else
name|d
operator|=
literal|0
expr_stmt|;
name|internalFinishConstruction
argument_list|(
name|ptr
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_expr_stmt
name|template
operator|<
name|typename
name|Deleter
operator|>
specifier|inline
name|void
name|internalConstruct
argument_list|(
argument|T *ptr
argument_list|,
argument|Deleter deleter
argument_list|)
block|{
if|if
condition|(
name|ptr
condition|)
name|d
operator|=
name|ExternalRefCountWithCustomDeleter
operator|<
name|T
operator|,
name|Deleter
operator|>
operator|::
name|create
argument_list|(
name|ptr
argument_list|,
name|deleter
argument_list|)
expr_stmt|;
else|else
name|d
operator|=
literal|0
expr_stmt|;
name|internalFinishConstruction
argument_list|(
name|ptr
argument_list|)
expr_stmt|;
end_expr_stmt
begin_function
unit|}          inline
name|void
name|internalCreate
parameter_list|()
block|{
name|T
modifier|*
name|ptr
decl_stmt|;
name|d
operator|=
name|ExternalRefCountWithContiguousData
operator|<
name|T
operator|>
operator|::
name|create
argument_list|(
operator|&
name|ptr
argument_list|)
expr_stmt|;
name|Basic
operator|<
name|T
operator|>
operator|::
name|internalConstruct
argument_list|(
name|ptr
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
specifier|inline
name|void
name|internalFinishConstruction
parameter_list|(
name|T
modifier|*
name|ptr
parameter_list|)
block|{
name|Basic
operator|<
name|T
operator|>
operator|::
name|internalConstruct
argument_list|(
name|ptr
argument_list|)
expr_stmt|;
if|if
condition|(
name|ptr
condition|)
name|d
operator|->
name|setQObjectShared
argument_list|(
name|ptr
argument_list|,
name|true
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_SHAREDPOINTER_TRACK_POINTERS
if|if
condition|(
name|ptr
condition|)
name|internalSafetyCheckAdd2
argument_list|(
name|d
argument_list|,
name|ptr
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_expr_stmt
specifier|inline
name|ExternalRefCount
argument_list|()
operator|:
name|d
argument_list|(
literal|0
argument_list|)
block|{ }
specifier|inline
name|ExternalRefCount
argument_list|(
argument|Qt::Initialization i
argument_list|)
operator|:
name|Basic
operator|<
name|T
operator|>
operator|(
name|i
operator|)
block|{ }
specifier|inline
name|ExternalRefCount
argument_list|(
name|T
operator|*
name|ptr
argument_list|)
operator|:
name|Basic
operator|<
name|T
operator|>
operator|(
name|Qt
operator|::
name|Uninitialized
operator|)
comment|// throws
block|{
name|internalConstruct
argument_list|(
name|ptr
argument_list|)
block|; }
name|template
operator|<
name|typename
name|Deleter
operator|>
specifier|inline
name|ExternalRefCount
argument_list|(
argument|T *ptr
argument_list|,
argument|Deleter deleter
argument_list|)
operator|:
name|Basic
operator|<
name|T
operator|>
operator|(
name|Qt
operator|::
name|Uninitialized
operator|)
comment|// throws
block|{
name|internalConstruct
argument_list|(
name|ptr
argument_list|,
name|deleter
argument_list|)
block|; }
specifier|inline
name|ExternalRefCount
argument_list|(
specifier|const
name|ExternalRefCount
operator|<
name|T
operator|>
operator|&
name|other
argument_list|)
operator|:
name|Basic
operator|<
name|T
operator|>
operator|(
name|other
operator|)
operator|,
name|d
argument_list|(
argument|other.d
argument_list|)
block|{
if|if
condition|(
name|d
condition|)
name|ref
argument_list|()
expr_stmt|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|class
name|X
operator|>
specifier|inline
name|ExternalRefCount
argument_list|(
specifier|const
name|ExternalRefCount
operator|<
name|X
operator|>
operator|&
name|other
argument_list|)
operator|:
name|Basic
operator|<
name|T
operator|>
operator|(
name|other
operator|.
name|value
operator|)
operator|,
name|d
argument_list|(
argument|other.d
argument_list|)
block|{
if|if
condition|(
name|d
condition|)
name|ref
argument_list|()
expr_stmt|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
operator|~
name|ExternalRefCount
argument_list|()
block|{
name|deref
argument_list|()
block|; }
name|template
operator|<
name|class
name|X
operator|>
specifier|inline
name|void
name|internalCopy
argument_list|(
argument|const ExternalRefCount<X>&other
argument_list|)
block|{
name|Data
operator|*
name|o
operator|=
name|other
operator|.
name|d
block|;
name|T
operator|*
name|actual
operator|=
name|other
operator|.
name|value
block|;
if|if
condition|(
name|o
condition|)
name|other
operator|.
name|ref
argument_list|()
expr_stmt|;
name|qSwap
argument_list|(
name|d
argument_list|,
name|o
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|qSwap
argument_list|(
name|this
operator|->
name|value
argument_list|,
name|actual
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|deref
argument_list|(
name|o
argument_list|,
name|actual
argument_list|)
expr_stmt|;
end_expr_stmt
begin_function
unit|}          inline
name|void
name|internalSwap
parameter_list|(
name|ExternalRefCount
modifier|&
name|other
parameter_list|)
block|{
name|qSwap
argument_list|(
name|d
argument_list|,
name|other
operator|.
name|d
argument_list|)
expr_stmt|;
name|qSwap
argument_list|(
name|this
operator|->
name|value
argument_list|,
name|other
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_NO_TEMPLATE_FRIENDS
argument_list|)
end_if
begin_label
name|public
label|:
end_label
begin_else
else|#
directive|else
end_else
begin_expr_stmt
name|template
operator|<
name|class
name|X
operator|>
name|friend
name|class
name|ExternalRefCount
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|class
name|X
operator|>
name|friend
name|class
name|QT_PREPEND_NAMESPACE
argument_list|(
name|QWeakPointer
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|class
name|X
operator|,
name|class
name|Y
operator|>
name|friend
name|QSharedPointer
operator|<
name|X
operator|>
name|copyAndSetPointer
argument_list|(
name|X
operator|*
name|ptr
argument_list|,
specifier|const
name|QSharedPointer
operator|<
name|Y
operator|>
operator|&
name|src
argument_list|)
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
specifier|inline
name|void
name|ref
argument_list|()
specifier|const
block|{
name|d
operator|->
name|weakref
operator|.
name|ref
argument_list|()
block|;
name|d
operator|->
name|strongref
operator|.
name|ref
argument_list|()
block|; }
specifier|inline
name|void
name|internalSet
argument_list|(
argument|Data *o
argument_list|,
argument|T *actual
argument_list|)
block|{
if|if
condition|(
name|o
condition|)
block|{
comment|// increase the strongref, but never up from zero
comment|// or less (-1 is used by QWeakPointer on untracked QObject)
specifier|register
name|int
name|tmp
init|=
name|o
operator|->
name|strongref
operator|.
name|load
argument_list|()
decl_stmt|;
while|while
condition|(
name|tmp
operator|>
literal|0
condition|)
block|{
comment|// try to increment from "tmp" to "tmp + 1"
if|if
condition|(
name|o
operator|->
name|strongref
operator|.
name|testAndSetRelaxed
argument_list|(
name|tmp
argument_list|,
name|tmp
operator|+
literal|1
argument_list|)
condition|)
break|break;
comment|// succeeded
name|tmp
operator|=
name|o
operator|->
name|strongref
operator|.
name|load
argument_list|()
expr_stmt|;
comment|// failed, try again
block|}
end_expr_stmt
begin_if
if|if
condition|(
name|tmp
operator|>
literal|0
condition|)
name|o
operator|->
name|weakref
operator|.
name|ref
argument_list|()
expr_stmt|;
else|else
name|o
operator|=
literal|0
expr_stmt|;
end_if
begin_expr_stmt
unit|}              qSwap
operator|(
name|d
operator|,
name|o
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|qSwap
argument_list|(
name|this
operator|->
name|value
argument_list|,
name|actual
argument_list|)
expr_stmt|;
end_expr_stmt
begin_if
if|if
condition|(
operator|!
name|d
operator|||
name|d
operator|->
name|strongref
operator|.
name|load
argument_list|()
operator|==
literal|0
condition|)
name|this
operator|->
name|value
operator|=
literal|0
expr_stmt|;
end_if
begin_comment
comment|// dereference saved data
end_comment
begin_expr_stmt
name|deref
argument_list|(
name|o
argument_list|,
name|actual
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
unit|}          Data
operator|*
name|d
expr_stmt|;
end_expr_stmt
begin_label
name|private
label|:
end_label
begin_expr_stmt
name|template
operator|<
name|class
name|X
operator|>
name|ExternalRefCount
argument_list|(
specifier|const
name|InternalRefCount
operator|<
name|X
operator|>
operator|&
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
unit|}; }
comment|// namespace QtSharedPointer
end_comment
begin_expr_stmt
unit|template
operator|<
name|class
name|T
operator|>
name|class
name|QSharedPointer
operator|:
name|public
name|QtSharedPointer
operator|::
name|ExternalRefCount
operator|<
name|T
operator|>
block|{
typedef|typedef
name|typename
name|QtSharedPointer
operator|::
name|ExternalRefCount
operator|<
name|T
operator|>
name|BaseClass
expr_stmt|;
name|public
operator|:
specifier|inline
name|QSharedPointer
argument_list|()
block|{ }
comment|// inline ~QSharedPointer() { }
specifier|inline
name|explicit
name|QSharedPointer
argument_list|(
name|T
operator|*
name|ptr
argument_list|)
operator|:
name|BaseClass
argument_list|(
argument|ptr
argument_list|)
comment|// throws
block|{ }
name|template
operator|<
name|typename
name|Deleter
operator|>
specifier|inline
name|QSharedPointer
argument_list|(
argument|T *ptr
argument_list|,
argument|Deleter d
argument_list|)
operator|:
name|BaseClass
argument_list|(
argument|ptr
argument_list|,
argument|d
argument_list|)
comment|// throws
block|{ }
specifier|inline
name|QSharedPointer
argument_list|(
specifier|const
name|QSharedPointer
operator|<
name|T
operator|>
operator|&
name|other
argument_list|)
operator|:
name|BaseClass
argument_list|(
argument|other
argument_list|)
block|{ }
specifier|inline
name|QSharedPointer
operator|<
name|T
operator|>
operator|&
name|operator
operator|=
operator|(
specifier|const
name|QSharedPointer
operator|<
name|T
operator|>
operator|&
name|other
operator|)
block|{
name|BaseClass
operator|::
name|internalCopy
argument_list|(
name|other
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_ifdef
ifdef|#
directive|ifdef
name|Q_COMPILER_RVALUE_REFS
end_ifdef
begin_expr_stmt
specifier|inline
name|QSharedPointer
operator|<
name|T
operator|>
operator|&
name|operator
operator|=
operator|(
name|QSharedPointer
operator|<
name|T
operator|>
operator|&&
name|other
operator|)
block|{
name|QSharedPointer
operator|<
name|T
operator|>
operator|::
name|internalSwap
argument_list|(
name|other
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
name|template
operator|<
name|class
name|X
operator|>
specifier|inline
name|QSharedPointer
argument_list|(
specifier|const
name|QSharedPointer
operator|<
name|X
operator|>
operator|&
name|other
argument_list|)
operator|:
name|BaseClass
argument_list|(
argument|other
argument_list|)
block|{ }
name|template
operator|<
name|class
name|X
operator|>
specifier|inline
name|QSharedPointer
operator|<
name|T
operator|>
operator|&
name|operator
operator|=
operator|(
specifier|const
name|QSharedPointer
operator|<
name|X
operator|>
operator|&
name|other
operator|)
block|{
name|QSHAREDPOINTER_VERIFY_AUTO_CAST
argument_list|(
name|T
argument_list|,
name|X
argument_list|)
block|;
comment|// if you get an error in this line, the cast is invalid
name|BaseClass
operator|::
name|internalCopy
argument_list|(
name|other
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|class
name|X
operator|>
specifier|inline
name|QSharedPointer
argument_list|(
specifier|const
name|QWeakPointer
operator|<
name|X
operator|>
operator|&
name|other
argument_list|)
operator|:
name|BaseClass
argument_list|(
argument|Qt::Uninitialized
argument_list|)
block|{
name|this
operator|->
name|d
operator|=
literal|0
block|;
operator|*
name|this
operator|=
name|other
block|; }
name|template
operator|<
name|class
name|X
operator|>
specifier|inline
name|QSharedPointer
operator|<
name|T
operator|>
operator|&
name|operator
operator|=
operator|(
specifier|const
name|QWeakPointer
operator|<
name|X
operator|>
operator|&
name|other
operator|)
block|{
name|BaseClass
operator|::
name|internalSet
argument_list|(
name|other
operator|.
name|d
argument_list|,
name|other
operator|.
name|value
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|void
name|swap
parameter_list|(
name|QSharedPointer
modifier|&
name|other
parameter_list|)
block|{
name|QSharedPointer
operator|<
name|T
operator|>
operator|::
name|internalSwap
argument_list|(
name|other
argument_list|)
expr_stmt|;
block|}
end_function
begin_expr_stmt
name|template
operator|<
name|class
name|X
operator|>
name|QSharedPointer
operator|<
name|X
operator|>
name|staticCast
argument_list|()
specifier|const
block|{
return|return
name|qSharedPointerCast
operator|<
name|X
operator|,
name|T
operator|>
operator|(
operator|*
name|this
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|class
name|X
operator|>
name|QSharedPointer
operator|<
name|X
operator|>
name|dynamicCast
argument_list|()
specifier|const
block|{
return|return
name|qSharedPointerDynamicCast
operator|<
name|X
operator|,
name|T
operator|>
operator|(
operator|*
name|this
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|class
name|X
operator|>
name|QSharedPointer
operator|<
name|X
operator|>
name|constCast
argument_list|()
specifier|const
block|{
return|return
name|qSharedPointerConstCast
operator|<
name|X
operator|,
name|T
operator|>
operator|(
operator|*
name|this
operator|)
return|;
block|}
end_expr_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QOBJECT
end_ifndef
begin_expr_stmt
name|template
operator|<
name|class
name|X
operator|>
name|QSharedPointer
operator|<
name|X
operator|>
name|objectCast
argument_list|()
specifier|const
block|{
return|return
name|qSharedPointerObjectCast
operator|<
name|X
operator|,
name|T
operator|>
operator|(
operator|*
name|this
operator|)
return|;
block|}
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_function
specifier|inline
name|void
name|clear
parameter_list|()
block|{
operator|*
name|this
operator|=
name|QSharedPointer
operator|<
name|T
operator|>
operator|(
operator|)
expr_stmt|;
block|}
end_function
begin_expr_stmt
name|QWeakPointer
operator|<
name|T
operator|>
name|toWeakRef
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_label
name|protected
label|:
end_label
begin_decl_stmt
specifier|inline
name|explicit
name|QSharedPointer
argument_list|(
name|Qt
operator|::
name|Initialization
name|i
argument_list|)
range|:
name|BaseClass
argument_list|(
argument|i
argument_list|)
block|{}
name|public
operator|:
specifier|static
specifier|inline
name|QSharedPointer
operator|<
name|T
operator|>
name|create
argument_list|()
block|{
name|QSharedPointer
operator|<
name|T
operator|>
name|result
argument_list|(
name|Qt
operator|::
name|Uninitialized
argument_list|)
block|;
name|result
operator|.
name|internalCreate
argument_list|()
block|;
comment|// now initialize the data
name|new
argument_list|(
argument|result.data()
argument_list|)
name|T
argument_list|()
block|;
name|result
operator|.
name|internalFinishConstruction
argument_list|(
name|result
operator|.
name|data
argument_list|()
argument_list|)
block|;
return|return
name|result
return|;
block|}
end_decl_stmt
begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|T
operator|>
name|class
name|QWeakPointer
block|{
typedef|typedef
name|T
operator|*
name|QWeakPointer
operator|::
operator|*
name|RestrictedBool
expr_stmt|;
end_expr_stmt
begin_typedef
typedef|typedef
name|QtSharedPointer
operator|::
name|ExternalRefCountData
name|Data
expr_stmt|;
end_typedef
begin_label
name|public
label|:
end_label
begin_typedef
typedef|typedef
name|T
name|element_type
typedef|;
end_typedef
begin_typedef
typedef|typedef
name|T
name|value_type
typedef|;
end_typedef
begin_typedef
typedef|typedef
name|value_type
modifier|*
name|pointer
typedef|;
end_typedef
begin_typedef
typedef|typedef
specifier|const
name|value_type
modifier|*
name|const_pointer
typedef|;
end_typedef
begin_typedef
typedef|typedef
name|value_type
modifier|&
name|reference
typedef|;
end_typedef
begin_typedef
typedef|typedef
specifier|const
name|value_type
modifier|&
name|const_reference
typedef|;
end_typedef
begin_typedef
typedef|typedef
name|qptrdiff
name|difference_type
typedef|;
end_typedef
begin_expr_stmt
specifier|inline
name|bool
name|isNull
argument_list|()
specifier|const
block|{
return|return
name|d
operator|==
literal|0
operator|||
name|d
operator|->
name|strongref
operator|.
name|load
argument_list|()
operator|==
literal|0
operator|||
name|value
operator|==
literal|0
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|operator
name|RestrictedBool
argument_list|()
specifier|const
block|{
return|return
name|isNull
argument_list|()
operator|?
literal|0
operator|:
operator|&
name|QWeakPointer
operator|::
name|value
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|!
operator|(
operator|)
specifier|const
block|{
return|return
name|isNull
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|T
operator|*
name|data
argument_list|()
specifier|const
block|{
return|return
name|d
operator|==
literal|0
operator|||
name|d
operator|->
name|strongref
operator|.
name|load
argument_list|()
operator|==
literal|0
operator|?
literal|0
operator|:
name|value
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QWeakPointer
argument_list|()
operator|:
name|d
argument_list|(
literal|0
argument_list|)
operator|,
name|value
argument_list|(
literal|0
argument_list|)
block|{ }
specifier|inline
operator|~
name|QWeakPointer
argument_list|()
block|{
if|if
condition|(
name|d
operator|&&
operator|!
name|d
operator|->
name|weakref
operator|.
name|deref
argument_list|()
condition|)
name|delete
name|d
decl_stmt|;
block|}
end_expr_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QOBJECT
end_ifndef
begin_comment
comment|// special constructor that is enabled only if X derives from QObject
end_comment
begin_expr_stmt
name|template
operator|<
name|class
name|X
operator|>
specifier|inline
name|QWeakPointer
argument_list|(
name|X
operator|*
name|ptr
argument_list|)
operator|:
name|d
argument_list|(
name|ptr
condition|?
name|d
operator|->
name|getAndRef
argument_list|(
name|ptr
argument_list|)
else|:
literal|0
argument_list|)
operator|,
name|value
argument_list|(
argument|ptr
argument_list|)
block|{ }
endif|#
directive|endif
name|template
operator|<
name|class
name|X
operator|>
specifier|inline
name|QWeakPointer
operator|&
name|operator
operator|=
operator|(
name|X
operator|*
name|ptr
operator|)
block|{
return|return
operator|*
name|this
operator|=
name|QWeakPointer
argument_list|(
name|ptr
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QWeakPointer
argument_list|(
specifier|const
name|QWeakPointer
operator|<
name|T
operator|>
operator|&
name|o
argument_list|)
operator|:
name|d
argument_list|(
name|o
operator|.
name|d
argument_list|)
operator|,
name|value
argument_list|(
argument|o.value
argument_list|)
block|{
if|if
condition|(
name|d
condition|)
name|d
operator|->
name|weakref
operator|.
name|ref
argument_list|()
expr_stmt|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QWeakPointer
operator|<
name|T
operator|>
operator|&
name|operator
operator|=
operator|(
specifier|const
name|QWeakPointer
operator|<
name|T
operator|>
operator|&
name|o
operator|)
block|{
name|internalSet
argument_list|(
name|o
operator|.
name|d
argument_list|,
name|o
operator|.
name|value
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QWeakPointer
argument_list|(
specifier|const
name|QSharedPointer
operator|<
name|T
operator|>
operator|&
name|o
argument_list|)
operator|:
name|d
argument_list|(
name|o
operator|.
name|d
argument_list|)
operator|,
name|value
argument_list|(
argument|o.data()
argument_list|)
block|{
if|if
condition|(
name|d
condition|)
name|d
operator|->
name|weakref
operator|.
name|ref
argument_list|()
expr_stmt|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QWeakPointer
operator|<
name|T
operator|>
operator|&
name|operator
operator|=
operator|(
specifier|const
name|QSharedPointer
operator|<
name|T
operator|>
operator|&
name|o
operator|)
block|{
name|internalSet
argument_list|(
name|o
operator|.
name|d
argument_list|,
name|o
operator|.
name|value
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|class
name|X
operator|>
specifier|inline
name|QWeakPointer
argument_list|(
specifier|const
name|QWeakPointer
operator|<
name|X
operator|>
operator|&
name|o
argument_list|)
operator|:
name|d
argument_list|(
literal|0
argument_list|)
operator|,
name|value
argument_list|(
literal|0
argument_list|)
block|{
operator|*
name|this
operator|=
name|o
block|; }
name|template
operator|<
name|class
name|X
operator|>
specifier|inline
name|QWeakPointer
operator|<
name|T
operator|>
operator|&
name|operator
operator|=
operator|(
specifier|const
name|QWeakPointer
operator|<
name|X
operator|>
operator|&
name|o
operator|)
block|{
comment|// conversion between X and T could require access to the virtual table
comment|// so force the operation to go through QSharedPointer
operator|*
name|this
operator|=
name|o
operator|.
name|toStrongRef
argument_list|()
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|class
name|X
operator|>
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QWeakPointer
operator|<
name|X
operator|>
operator|&
name|o
operator|)
specifier|const
block|{
return|return
name|d
operator|==
name|o
operator|.
name|d
operator|&&
name|value
operator|==
name|static_cast
operator|<
specifier|const
name|T
operator|*
operator|>
operator|(
name|o
operator|.
name|value
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|class
name|X
operator|>
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|QWeakPointer
operator|<
name|X
operator|>
operator|&
name|o
operator|)
specifier|const
block|{
return|return
operator|!
operator|(
operator|*
name|this
operator|==
name|o
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|class
name|X
operator|>
specifier|inline
name|QWeakPointer
argument_list|(
specifier|const
name|QSharedPointer
operator|<
name|X
operator|>
operator|&
name|o
argument_list|)
operator|:
name|d
argument_list|(
literal|0
argument_list|)
operator|,
name|value
argument_list|(
literal|0
argument_list|)
block|{
operator|*
name|this
operator|=
name|o
block|; }
name|template
operator|<
name|class
name|X
operator|>
specifier|inline
name|QWeakPointer
operator|<
name|T
operator|>
operator|&
name|operator
operator|=
operator|(
specifier|const
name|QSharedPointer
operator|<
name|X
operator|>
operator|&
name|o
operator|)
block|{
name|QSHAREDPOINTER_VERIFY_AUTO_CAST
argument_list|(
name|T
argument_list|,
name|X
argument_list|)
block|;
comment|// if you get an error in this line, the cast is invalid
name|internalSet
argument_list|(
name|o
operator|.
name|d
argument_list|,
name|o
operator|.
name|data
argument_list|()
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|class
name|X
operator|>
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QSharedPointer
operator|<
name|X
operator|>
operator|&
name|o
operator|)
specifier|const
block|{
return|return
name|d
operator|==
name|o
operator|.
name|d
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|class
name|X
operator|>
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|QSharedPointer
operator|<
name|X
operator|>
operator|&
name|o
operator|)
specifier|const
block|{
return|return
operator|!
operator|(
operator|*
name|this
operator|==
name|o
operator|)
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|void
name|clear
parameter_list|()
block|{
operator|*
name|this
operator|=
name|QWeakPointer
operator|<
name|T
operator|>
operator|(
operator|)
expr_stmt|;
block|}
end_function
begin_expr_stmt
specifier|inline
name|QSharedPointer
operator|<
name|T
operator|>
name|toStrongRef
argument_list|()
specifier|const
block|{
return|return
name|QSharedPointer
operator|<
name|T
operator|>
operator|(
operator|*
name|this
operator|)
return|;
block|}
end_expr_stmt
begin_if
if|#
directive|if
name|defined
argument_list|(
name|QWEAKPOINTER_ENABLE_ARROW
argument_list|)
end_if
begin_expr_stmt
specifier|inline
name|T
operator|*
name|operator
operator|->
expr|(
end_expr_stmt
begin_expr_stmt
unit|)
specifier|const
block|{
return|return
name|data
argument_list|()
return|;
block|}
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_label
name|private
label|:
end_label
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_NO_TEMPLATE_FRIENDS
argument_list|)
end_if
begin_label
name|public
label|:
end_label
begin_else
else|#
directive|else
end_else
begin_expr_stmt
name|template
operator|<
name|class
name|X
operator|>
name|friend
name|class
name|QSharedPointer
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_function
specifier|inline
name|void
name|internalSet
parameter_list|(
name|Data
modifier|*
name|o
parameter_list|,
name|T
modifier|*
name|actual
parameter_list|)
block|{
if|if
condition|(
name|d
operator|==
name|o
condition|)
return|return;
if|if
condition|(
name|o
condition|)
name|o
operator|->
name|weakref
operator|.
name|ref
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|&&
operator|!
name|d
operator|->
name|weakref
operator|.
name|deref
argument_list|()
condition|)
name|delete
name|d
decl_stmt|;
name|d
operator|=
name|o
expr_stmt|;
name|value
operator|=
name|actual
expr_stmt|;
block|}
end_function
begin_decl_stmt
name|Data
modifier|*
name|d
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|T
modifier|*
name|value
decl_stmt|;
end_decl_stmt
begin_comment
unit|};
comment|//
end_comment
begin_comment
comment|// operator== and operator!=
end_comment
begin_comment
comment|//
end_comment
begin_expr_stmt
DECL|variable|T
name|template
operator|<
name|class
name|T
operator|,
name|class
name|X
operator|>
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QSharedPointer
operator|<
name|T
operator|>
operator|&
name|ptr1
operator|,
specifier|const
name|QSharedPointer
operator|<
name|X
operator|>
operator|&
name|ptr2
operator|)
block|{
return|return
name|ptr1
operator|.
name|data
argument_list|()
operator|==
name|ptr2
operator|.
name|data
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|variable|T
name|template
operator|<
name|class
name|T
operator|,
name|class
name|X
operator|>
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|QSharedPointer
operator|<
name|T
operator|>
operator|&
name|ptr1
operator|,
specifier|const
name|QSharedPointer
operator|<
name|X
operator|>
operator|&
name|ptr2
operator|)
block|{
return|return
name|ptr1
operator|.
name|data
argument_list|()
operator|!=
name|ptr2
operator|.
name|data
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|variable|T
name|template
operator|<
name|class
name|T
operator|,
name|class
name|X
operator|>
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QSharedPointer
operator|<
name|T
operator|>
operator|&
name|ptr1
operator|,
specifier|const
name|X
operator|*
name|ptr2
operator|)
block|{
return|return
name|ptr1
operator|.
name|data
argument_list|()
operator|==
name|ptr2
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|variable|T
name|template
operator|<
name|class
name|T
operator|,
name|class
name|X
operator|>
DECL|function|operator
name|bool
name|operator
operator|==
operator|(
specifier|const
name|T
operator|*
name|ptr1
operator|,
specifier|const
name|QSharedPointer
operator|<
name|X
operator|>
operator|&
name|ptr2
operator|)
block|{
return|return
name|ptr1
operator|==
name|ptr2
operator|.
name|data
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|variable|T
name|template
operator|<
name|class
name|T
operator|,
name|class
name|X
operator|>
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|QSharedPointer
operator|<
name|T
operator|>
operator|&
name|ptr1
operator|,
specifier|const
name|X
operator|*
name|ptr2
operator|)
block|{
return|return
operator|!
operator|(
name|ptr1
operator|==
name|ptr2
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|variable|T
name|template
operator|<
name|class
name|T
operator|,
name|class
name|X
operator|>
DECL|function|operator
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|T
operator|*
name|ptr1
operator|,
specifier|const
name|QSharedPointer
operator|<
name|X
operator|>
operator|&
name|ptr2
operator|)
block|{
return|return
operator|!
operator|(
name|ptr2
operator|==
name|ptr1
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|variable|T
name|template
operator|<
name|class
name|T
operator|,
name|class
name|X
operator|>
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QSharedPointer
operator|<
name|T
operator|>
operator|&
name|ptr1
operator|,
specifier|const
name|QWeakPointer
operator|<
name|X
operator|>
operator|&
name|ptr2
operator|)
block|{
return|return
name|ptr2
operator|==
name|ptr1
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|variable|T
name|template
operator|<
name|class
name|T
operator|,
name|class
name|X
operator|>
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|QSharedPointer
operator|<
name|T
operator|>
operator|&
name|ptr1
operator|,
specifier|const
name|QWeakPointer
operator|<
name|X
operator|>
operator|&
name|ptr2
operator|)
block|{
return|return
name|ptr2
operator|!=
name|ptr1
return|;
block|}
end_expr_stmt
begin_comment
comment|//
end_comment
begin_comment
comment|// operator-
end_comment
begin_comment
comment|//
end_comment
begin_expr_stmt
DECL|variable|T
name|template
operator|<
name|class
name|T
operator|,
name|class
name|X
operator|>
name|Q_INLINE_TEMPLATE
name|typename
name|QSharedPointer
operator|<
name|T
operator|>
operator|::
name|difference_type
name|operator
operator|-
operator|(
specifier|const
name|QSharedPointer
operator|<
name|T
operator|>
operator|&
name|ptr1
operator|,
specifier|const
name|QSharedPointer
operator|<
name|X
operator|>
operator|&
name|ptr2
operator|)
block|{
return|return
name|ptr1
operator|.
name|data
argument_list|()
operator|-
name|ptr2
operator|.
name|data
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|variable|T
name|template
operator|<
name|class
name|T
operator|,
name|class
name|X
operator|>
name|Q_INLINE_TEMPLATE
name|typename
name|QSharedPointer
operator|<
name|T
operator|>
operator|::
name|difference_type
name|operator
operator|-
operator|(
specifier|const
name|QSharedPointer
operator|<
name|T
operator|>
operator|&
name|ptr1
operator|,
name|X
operator|*
name|ptr2
operator|)
block|{
return|return
name|ptr1
operator|.
name|data
argument_list|()
operator|-
name|ptr2
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|variable|T
name|template
operator|<
name|class
name|T
operator|,
name|class
name|X
operator|>
DECL|function|operator
name|Q_INLINE_TEMPLATE
name|typename
name|QSharedPointer
operator|<
name|X
operator|>
operator|::
name|difference_type
name|operator
operator|-
operator|(
name|T
operator|*
name|ptr1
operator|,
specifier|const
name|QSharedPointer
operator|<
name|X
operator|>
operator|&
name|ptr2
operator|)
block|{
return|return
name|ptr1
operator|-
name|ptr2
operator|.
name|data
argument_list|()
return|;
block|}
end_expr_stmt
begin_comment
comment|//
end_comment
begin_comment
comment|// operator<
end_comment
begin_comment
comment|//
end_comment
begin_expr_stmt
DECL|variable|T
name|template
operator|<
name|class
name|T
operator|,
name|class
name|X
operator|>
name|Q_INLINE_TEMPLATE
name|bool
name|operator
operator|<
operator|(
specifier|const
name|QSharedPointer
operator|<
name|T
operator|>
operator|&
name|ptr1
operator|,
specifier|const
name|QSharedPointer
operator|<
name|X
operator|>
operator|&
name|ptr2
operator|)
block|{
return|return
name|ptr1
operator|.
name|data
argument_list|()
operator|<
name|ptr2
operator|.
name|data
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|variable|T
name|template
operator|<
name|class
name|T
operator|,
name|class
name|X
operator|>
name|Q_INLINE_TEMPLATE
name|bool
name|operator
operator|<
operator|(
specifier|const
name|QSharedPointer
operator|<
name|T
operator|>
operator|&
name|ptr1
operator|,
name|X
operator|*
name|ptr2
operator|)
block|{
return|return
name|ptr1
operator|.
name|data
argument_list|()
operator|<
name|ptr2
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|variable|T
name|template
operator|<
name|class
name|T
operator|,
name|class
name|X
operator|>
DECL|function|operator
name|Q_INLINE_TEMPLATE
name|bool
name|operator
operator|<
operator|(
name|T
operator|*
name|ptr1
operator|,
specifier|const
name|QSharedPointer
operator|<
name|X
operator|>
operator|&
name|ptr2
operator|)
block|{
return|return
name|ptr1
operator|<
name|ptr2
operator|.
name|data
argument_list|()
return|;
block|}
end_expr_stmt
begin_comment
comment|//
end_comment
begin_comment
comment|// qHash
end_comment
begin_comment
comment|//
end_comment
begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
specifier|inline
name|uint
name|qHash
argument_list|(
specifier|const
name|T
operator|*
name|key
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// defined in qhash.h
end_comment
begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|Q_INLINE_TEMPLATE
name|uint
name|qHash
argument_list|(
argument|const QSharedPointer<T>&ptr
argument_list|)
block|{
return|return
name|QT_PREPEND_NAMESPACE
argument_list|(
name|qHash
argument_list|)
operator|<
name|T
operator|>
operator|(
name|ptr
operator|.
name|data
argument_list|()
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
DECL|function|toWeakRef
name|Q_INLINE_TEMPLATE
name|QWeakPointer
operator|<
name|T
operator|>
name|QSharedPointer
operator|<
name|T
operator|>
operator|::
name|toWeakRef
argument_list|()
specifier|const
block|{
return|return
name|QWeakPointer
operator|<
name|T
operator|>
operator|(
operator|*
name|this
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
specifier|inline
name|void
name|qSwap
argument_list|(
argument|QSharedPointer<T>&p1
argument_list|,
argument|QSharedPointer<T>&p2
argument_list|)
block|{
name|p1
operator|.
name|swap
argument_list|(
name|p2
argument_list|)
block|; }
ifndef|#
directive|ifndef
name|QT_NO_STL
name|QT_END_NAMESPACE
name|namespace
name|std
block|{
name|template
operator|<
name|class
name|T
operator|>
specifier|inline
name|void
name|swap
argument_list|(
argument|QT_PREPEND_NAMESPACE(QSharedPointer)<T>&p1
argument_list|,
argument|QT_PREPEND_NAMESPACE(QSharedPointer)<T>&p2
argument_list|)
block|{
name|p1
operator|.
name|swap
argument_list|(
name|p2
argument_list|)
block|; }
block|}
name|QT_BEGIN_NAMESPACE
endif|#
directive|endif
name|namespace
name|QtSharedPointer
block|{
comment|// helper functions:
name|template
operator|<
name|class
name|X
block|,
name|class
name|T
operator|>
name|Q_INLINE_TEMPLATE
name|QSharedPointer
operator|<
name|X
operator|>
name|copyAndSetPointer
argument_list|(
argument|X *ptr
argument_list|,
argument|const QSharedPointer<T>&src
argument_list|)
block|{
name|QSharedPointer
operator|<
name|X
operator|>
name|result
block|;
name|result
operator|.
name|internalSet
argument_list|(
name|src
operator|.
name|d
argument_list|,
name|ptr
argument_list|)
block|;
return|return
name|result
return|;
block|}
end_expr_stmt
begin_comment
unit|}
comment|// cast operators
end_comment
begin_expr_stmt
unit|template
DECL|variable|X
operator|<
name|class
name|X
operator|,
name|class
name|T
operator|>
name|Q_INLINE_TEMPLATE
name|QSharedPointer
operator|<
name|X
operator|>
name|qSharedPointerCast
argument_list|(
argument|const QSharedPointer<T>&src
argument_list|)
block|{
specifier|register
name|X
operator|*
name|ptr
operator|=
name|static_cast
operator|<
name|X
operator|*
operator|>
operator|(
name|src
operator|.
name|data
argument_list|()
operator|)
block|;
comment|// if you get an error in this line, the cast is invalid
return|return
name|QtSharedPointer
operator|::
name|copyAndSetPointer
argument_list|(
name|ptr
argument_list|,
name|src
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|variable|X
name|template
operator|<
name|class
name|X
operator|,
name|class
name|T
operator|>
name|Q_INLINE_TEMPLATE
name|QSharedPointer
operator|<
name|X
operator|>
name|qSharedPointerCast
argument_list|(
argument|const QWeakPointer<T>&src
argument_list|)
block|{
return|return
name|qSharedPointerCast
operator|<
name|X
operator|,
name|T
operator|>
operator|(
name|src
operator|.
name|toStrongRef
argument_list|()
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|variable|X
name|template
operator|<
name|class
name|X
operator|,
name|class
name|T
operator|>
name|Q_INLINE_TEMPLATE
name|QSharedPointer
operator|<
name|X
operator|>
name|qSharedPointerDynamicCast
argument_list|(
argument|const QSharedPointer<T>&src
argument_list|)
block|{
specifier|register
name|X
operator|*
name|ptr
operator|=
name|dynamic_cast
operator|<
name|X
operator|*
operator|>
operator|(
name|src
operator|.
name|data
argument_list|()
operator|)
block|;
comment|// if you get an error in this line, the cast is invalid
return|return
name|QtSharedPointer
operator|::
name|copyAndSetPointer
argument_list|(
name|ptr
argument_list|,
name|src
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|variable|X
name|template
operator|<
name|class
name|X
operator|,
name|class
name|T
operator|>
name|Q_INLINE_TEMPLATE
name|QSharedPointer
operator|<
name|X
operator|>
name|qSharedPointerDynamicCast
argument_list|(
argument|const QWeakPointer<T>&src
argument_list|)
block|{
return|return
name|qSharedPointerDynamicCast
operator|<
name|X
operator|,
name|T
operator|>
operator|(
name|src
operator|.
name|toStrongRef
argument_list|()
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|variable|X
name|template
operator|<
name|class
name|X
operator|,
name|class
name|T
operator|>
name|Q_INLINE_TEMPLATE
name|QSharedPointer
operator|<
name|X
operator|>
name|qSharedPointerConstCast
argument_list|(
argument|const QSharedPointer<T>&src
argument_list|)
block|{
specifier|register
name|X
operator|*
name|ptr
operator|=
name|const_cast
operator|<
name|X
operator|*
operator|>
operator|(
name|src
operator|.
name|data
argument_list|()
operator|)
block|;
comment|// if you get an error in this line, the cast is invalid
return|return
name|QtSharedPointer
operator|::
name|copyAndSetPointer
argument_list|(
name|ptr
argument_list|,
name|src
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|variable|X
name|template
operator|<
name|class
name|X
operator|,
name|class
name|T
operator|>
name|Q_INLINE_TEMPLATE
name|QSharedPointer
operator|<
name|X
operator|>
name|qSharedPointerConstCast
argument_list|(
argument|const QWeakPointer<T>&src
argument_list|)
block|{
return|return
name|qSharedPointerConstCast
operator|<
name|X
operator|,
name|T
operator|>
operator|(
name|src
operator|.
name|toStrongRef
argument_list|()
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|variable|X
name|template
operator|<
name|class
name|X
operator|,
name|class
name|T
operator|>
name|Q_INLINE_TEMPLATE
name|QWeakPointer
operator|<
name|X
operator|>
name|qWeakPointerCast
argument_list|(
argument|const QSharedPointer<T>&src
argument_list|)
block|{
return|return
name|qSharedPointerCast
operator|<
name|X
operator|,
name|T
operator|>
operator|(
name|src
operator|)
operator|.
name|toWeakRef
argument_list|()
return|;
block|}
end_expr_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QOBJECT
end_ifndef
begin_expr_stmt
DECL|variable|X
name|template
operator|<
name|class
name|X
operator|,
name|class
name|T
operator|>
name|Q_INLINE_TEMPLATE
name|QSharedPointer
operator|<
name|X
operator|>
name|qSharedPointerObjectCast
argument_list|(
argument|const QSharedPointer<T>&src
argument_list|)
block|{
specifier|register
name|X
operator|*
name|ptr
operator|=
name|qobject_cast
operator|<
name|X
operator|*
operator|>
operator|(
name|src
operator|.
name|data
argument_list|()
operator|)
block|;
return|return
name|QtSharedPointer
operator|::
name|copyAndSetPointer
argument_list|(
name|ptr
argument_list|,
name|src
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|variable|X
name|template
operator|<
name|class
name|X
operator|,
name|class
name|T
operator|>
name|Q_INLINE_TEMPLATE
name|QSharedPointer
operator|<
name|X
operator|>
name|qSharedPointerObjectCast
argument_list|(
argument|const QWeakPointer<T>&src
argument_list|)
block|{
return|return
name|qSharedPointerObjectCast
operator|<
name|X
operator|>
operator|(
name|src
operator|.
name|toStrongRef
argument_list|()
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|variable|X
name|template
operator|<
name|class
name|X
operator|,
name|class
name|T
operator|>
specifier|inline
name|QSharedPointer
operator|<
name|typename
name|QtSharedPointer
operator|::
name|RemovePointer
operator|<
name|X
operator|>
operator|::
name|Type
operator|>
name|qobject_cast
argument_list|(
argument|const QSharedPointer<T>&src
argument_list|)
block|{
return|return
name|qSharedPointerObjectCast
operator|<
name|typename
name|QtSharedPointer
operator|::
name|RemovePointer
operator|<
name|X
operator|>
operator|::
name|Type
operator|,
name|T
operator|>
operator|(
name|src
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|variable|X
name|template
operator|<
name|class
name|X
operator|,
name|class
name|T
operator|>
specifier|inline
name|QSharedPointer
operator|<
name|typename
name|QtSharedPointer
operator|::
name|RemovePointer
operator|<
name|X
operator|>
operator|::
name|Type
operator|>
name|qobject_cast
argument_list|(
argument|const QWeakPointer<T>&src
argument_list|)
block|{
return|return
name|qSharedPointerObjectCast
operator|<
name|typename
name|QtSharedPointer
operator|::
name|RemovePointer
operator|<
name|X
operator|>
operator|::
name|Type
operator|,
name|T
operator|>
operator|(
name|src
operator|)
return|;
block|}
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|Q_DECLARE_TYPEINFO_BODY
argument_list|(
name|QWeakPointer
operator|<
name|T
operator|>
argument_list|,
name|Q_MOVABLE_TYPE
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|Q_DECLARE_TYPEINFO_BODY
argument_list|(
name|QSharedPointer
operator|<
name|T
operator|>
argument_list|,
name|Q_MOVABLE_TYPE
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QT_END_NAMESPACE
name|QT_END_HEADER
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
end_unit
