begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qglobal.h"
end_include
begin_include
include|#
directive|include
file|"qlibrary.h"
end_include
begin_include
include|#
directive|include
file|"qdebug.h"
end_include
begin_include
include|#
directive|include
file|"qlocale_p.h"
end_include
begin_include
include|#
directive|include
file|"qmutex.h"
end_include
begin_include
include|#
directive|include
file|"unicode/uloc.h"
end_include
begin_include
include|#
directive|include
file|"unicode/ustring.h"
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_typedef
DECL|typedef|Ptr_u_strToCase
typedef|typedef
name|int32_t
function_decl|(
modifier|*
name|Ptr_u_strToCase
function_decl|)
parameter_list|(
name|UChar
modifier|*
name|dest
parameter_list|,
name|int32_t
name|destCapacity
parameter_list|,
specifier|const
name|UChar
modifier|*
name|src
parameter_list|,
name|int32_t
name|srcLength
parameter_list|,
specifier|const
name|char
modifier|*
name|locale
parameter_list|,
name|UErrorCode
modifier|*
name|pErrorCode
parameter_list|)
function_decl|;
end_typedef
begin_comment
comment|// caseFunc can either be u_strToUpper or u_strToLower
end_comment
begin_function
DECL|function|qt_u_strToCase
specifier|static
name|bool
name|qt_u_strToCase
parameter_list|(
specifier|const
name|QString
modifier|&
name|str
parameter_list|,
name|QString
modifier|*
name|out
parameter_list|,
specifier|const
name|char
modifier|*
name|localeID
parameter_list|,
name|Ptr_u_strToCase
name|caseFunc
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|int32_t
name|size
init|=
name|str
operator|.
name|size
argument_list|()
decl_stmt|;
name|size
operator|+=
name|size
operator|>>
literal|2
expr_stmt|;
comment|// add 25% for possible expansions
name|QString
name|result
argument_list|(
name|size
argument_list|,
name|Qt
operator|::
name|Uninitialized
argument_list|)
decl_stmt|;
name|UErrorCode
name|status
init|=
name|U_ZERO_ERROR
decl_stmt|;
name|size
operator|=
name|caseFunc
argument_list|(
cast|reinterpret_cast
argument_list|<
name|UChar
operator|*
argument_list|>
argument_list|(
name|result
operator|.
name|data
argument_list|()
argument_list|)
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|UChar
operator|*
argument_list|>
argument_list|(
name|str
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|,
name|str
operator|.
name|size
argument_list|()
argument_list|,
name|localeID
argument_list|,
operator|&
name|status
argument_list|)
expr_stmt|;
if|if
condition|(
name|U_FAILURE
argument_list|(
name|status
argument_list|)
operator|&&
name|status
operator|!=
name|U_BUFFER_OVERFLOW_ERROR
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|size
operator|<
name|result
operator|.
name|size
argument_list|()
condition|)
block|{
name|result
operator|.
name|resize
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|size
operator|>
name|result
operator|.
name|size
argument_list|()
condition|)
block|{
comment|// the resulting string is larger than our source string
name|result
operator|.
name|resize
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|status
operator|=
name|U_ZERO_ERROR
expr_stmt|;
name|size
operator|=
name|caseFunc
argument_list|(
cast|reinterpret_cast
argument_list|<
name|UChar
operator|*
argument_list|>
argument_list|(
name|result
operator|.
name|data
argument_list|()
argument_list|)
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|UChar
operator|*
argument_list|>
argument_list|(
name|str
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|,
name|str
operator|.
name|size
argument_list|()
argument_list|,
name|localeID
argument_list|,
operator|&
name|status
argument_list|)
expr_stmt|;
if|if
condition|(
name|U_FAILURE
argument_list|(
name|status
argument_list|)
condition|)
return|return
literal|false
return|;
comment|// if the sizes don't match now, we give up.
if|if
condition|(
name|size
operator|!=
name|result
operator|.
name|size
argument_list|()
condition|)
return|return
literal|false
return|;
block|}
operator|*
name|out
operator|=
name|result
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|toUpper
name|QString
name|QIcu
operator|::
name|toUpper
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|localeID
parameter_list|,
specifier|const
name|QString
modifier|&
name|str
parameter_list|,
name|bool
modifier|*
name|ok
parameter_list|)
block|{
name|QString
name|out
decl_stmt|;
name|bool
name|err
init|=
name|qt_u_strToCase
argument_list|(
name|str
argument_list|,
operator|&
name|out
argument_list|,
name|localeID
argument_list|,
name|u_strToUpper
argument_list|)
decl_stmt|;
if|if
condition|(
name|ok
condition|)
operator|*
name|ok
operator|=
name|err
expr_stmt|;
return|return
name|out
return|;
block|}
end_function
begin_function
DECL|function|toLower
name|QString
name|QIcu
operator|::
name|toLower
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|localeID
parameter_list|,
specifier|const
name|QString
modifier|&
name|str
parameter_list|,
name|bool
modifier|*
name|ok
parameter_list|)
block|{
name|QString
name|out
decl_stmt|;
name|bool
name|err
init|=
name|qt_u_strToCase
argument_list|(
name|str
argument_list|,
operator|&
name|out
argument_list|,
name|localeID
argument_list|,
name|u_strToLower
argument_list|)
decl_stmt|;
if|if
condition|(
name|ok
condition|)
operator|*
name|ok
operator|=
name|err
expr_stmt|;
return|return
name|out
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
