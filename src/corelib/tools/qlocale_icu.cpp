begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qglobal.h"
end_include
begin_include
include|#
directive|include
file|"qlibrary.h"
end_include
begin_include
include|#
directive|include
file|"qdebug.h"
end_include
begin_include
include|#
directive|include
file|"unicode/uversion.h"
end_include
begin_include
include|#
directive|include
file|"unicode/ucol.h"
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_typedef
DECL|typedef|Ptr_ucol_open
typedef|typedef
name|UCollator
modifier|*
function_decl|(
modifier|*
name|Ptr_ucol_open
function_decl|)
parameter_list|(
specifier|const
name|char
modifier|*
name|loc
parameter_list|,
name|UErrorCode
modifier|*
name|status
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|Ptr_ucol_close
typedef|typedef
name|void
function_decl|(
modifier|*
name|Ptr_ucol_close
function_decl|)
parameter_list|(
name|UCollator
modifier|*
name|coll
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|Ptr_ucol_strcoll
typedef|typedef
name|UCollationResult
function_decl|(
modifier|*
name|Ptr_ucol_strcoll
function_decl|)
parameter_list|(
specifier|const
name|UCollator
modifier|*
name|coll
parameter_list|,
specifier|const
name|UChar
modifier|*
name|source
parameter_list|,
name|int32_t
name|sourceLength
parameter_list|,
specifier|const
name|UChar
modifier|*
name|target
parameter_list|,
name|int32_t
name|targetLength
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|Ptr_u_strToCase
typedef|typedef
name|int32_t
function_decl|(
modifier|*
name|Ptr_u_strToCase
function_decl|)
parameter_list|(
name|UChar
modifier|*
name|dest
parameter_list|,
name|int32_t
name|destCapacity
parameter_list|,
specifier|const
name|UChar
modifier|*
name|src
parameter_list|,
name|int32_t
name|srcLength
parameter_list|,
specifier|const
name|char
modifier|*
name|locale
parameter_list|,
name|UErrorCode
modifier|*
name|pErrorCode
parameter_list|)
function_decl|;
end_typedef
begin_decl_stmt
DECL|variable|ptr_ucol_open
specifier|static
name|Ptr_ucol_open
name|ptr_ucol_open
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|ptr_ucol_strcoll
specifier|static
name|Ptr_ucol_strcoll
name|ptr_ucol_strcoll
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|ptr_ucol_close
specifier|static
name|Ptr_ucol_close
name|ptr_ucol_close
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|ptr_u_strToUpper
specifier|static
name|Ptr_u_strToCase
name|ptr_u_strToUpper
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|ptr_u_strToLower
specifier|static
name|Ptr_u_strToCase
name|ptr_u_strToLower
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_enum
DECL|enum|LibLoadStatus
enum|enum
name|LibLoadStatus
block|{
DECL|enumerator|ErrorLoading
name|ErrorLoading
init|=
operator|-
literal|1
block|,
DECL|enumerator|NotLoaded
name|NotLoaded
init|=
literal|0
block|,
DECL|enumerator|Loaded
name|Loaded
init|=
literal|1
block|}
enum|;
end_enum
begin_decl_stmt
DECL|variable|status
specifier|static
name|LibLoadStatus
name|status
init|=
name|NotLoaded
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|icuCollator
specifier|static
name|UCollator
modifier|*
name|icuCollator
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_namespace
namespace|namespace
block|{
DECL|struct|Libraries
struct|struct
name|Libraries
block|{
DECL|member|libicui18n
name|QLibrary
name|libicui18n
decl_stmt|;
DECL|member|libicuuc
name|QLibrary
name|libicuuc
decl_stmt|;
DECL|function|~Libraries
name|~
name|Libraries
parameter_list|()
block|{
if|if
condition|(
name|icuCollator
condition|)
block|{
name|ptr_ucol_close
argument_list|(
name|icuCollator
argument_list|)
expr_stmt|;
name|icuCollator
operator|=
literal|0
expr_stmt|;
block|}
name|libicui18n
operator|.
name|unload
argument_list|()
expr_stmt|;
name|libicuuc
operator|.
name|unload
argument_list|()
expr_stmt|;
block|}
block|}
struct|;
block|}
end_namespace
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|Libraries
argument_list|,
argument|icuLibraries
argument_list|)
end_macro
begin_function
DECL|function|loadIcuLibrary
specifier|static
name|bool
name|loadIcuLibrary
parameter_list|(
name|QLibrary
modifier|&
name|lib
parameter_list|,
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|Q_OS_WIN
comment|// QLibrary on Windows does not use the version number, the libraries
comment|// are named "icuin<version>.dll", though.
name|lib
operator|.
name|setFileName
argument_list|(
name|name
argument_list|)
expr_stmt|;
else|#
directive|else
comment|// on Unix, we can use the version number
name|lib
operator|.
name|setFileNameAndVersion
argument_list|(
name|name
argument_list|,
name|QStringLiteral
argument_list|(
name|U_ICU_VERSION_SHORT
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// the ICU libraries appear to allocate global statics and not free them
comment|// set the PreventUnloadHint so that we can unload the QLibrary object and
comment|// delete it, but the libraries themselves remain in memory
name|lib
operator|.
name|setLoadHints
argument_list|(
name|QLibrary
operator|::
name|PreventUnloadHint
argument_list|)
expr_stmt|;
return|return
name|lib
operator|.
name|load
argument_list|()
return|;
block|}
end_function
begin_comment
comment|// this function is NOT THREAD-SAFE!
end_comment
begin_function
DECL|function|qt_initIcu
name|bool
name|qt_initIcu
parameter_list|(
specifier|const
name|QString
modifier|&
name|localeString
parameter_list|)
block|{
if|if
condition|(
name|status
operator|==
name|ErrorLoading
operator|||
operator|!
name|icuLibraries
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|status
operator|==
name|NotLoaded
condition|)
block|{
comment|// resolve libicui18n
ifdef|#
directive|ifdef
name|Q_OS_WIN
comment|// QLibrary on Windows does not use the version number, the libraries
comment|// are named "icuin<version>.dll", though.
comment|// QStringLiteral should work here and will work when MSVC fully supports C++11
comment|// unfortunately, current versions have do not support proper string concatenation
name|QString
name|libicui18nName
init|=
name|QLatin1String
argument_list|(
literal|"icuin"
name|U_ICU_VERSION_SHORT
argument_list|)
decl_stmt|;
name|QString
name|libicuucName
init|=
name|QLatin1String
argument_list|(
literal|"icuuc"
name|U_ICU_VERSION_SHORT
argument_list|)
decl_stmt|;
else|#
directive|else
name|QString
name|libicui18nName
init|=
name|QStringLiteral
argument_list|(
literal|"icui18n"
argument_list|)
decl_stmt|;
name|QString
name|libicuucName
init|=
name|QStringLiteral
argument_list|(
literal|"icuuc"
argument_list|)
decl_stmt|;
endif|#
directive|endif
name|QLibrary
modifier|&
name|lib
init|=
name|icuLibraries
argument_list|()
operator|->
name|libicui18n
decl_stmt|;
if|if
condition|(
operator|!
name|loadIcuLibrary
argument_list|(
name|lib
argument_list|,
name|libicui18nName
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"Unable to load library '%s' version "
name|U_ICU_VERSION_SHORT
literal|": %s"
argument_list|,
name|qPrintable
argument_list|(
name|libicui18nName
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|lib
operator|.
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|status
operator|=
name|ErrorLoading
expr_stmt|;
return|return
literal|false
return|;
block|}
name|ptr_ucol_open
operator|=
operator|(
name|Ptr_ucol_open
operator|)
name|lib
operator|.
name|resolve
argument_list|(
literal|"ucol_open"
argument_list|)
expr_stmt|;
name|ptr_ucol_close
operator|=
operator|(
name|Ptr_ucol_close
operator|)
name|lib
operator|.
name|resolve
argument_list|(
literal|"ucol_close"
argument_list|)
expr_stmt|;
name|ptr_ucol_strcoll
operator|=
operator|(
name|Ptr_ucol_strcoll
operator|)
name|lib
operator|.
name|resolve
argument_list|(
literal|"ucol_strcoll"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ptr_ucol_open
operator|||
operator|!
name|ptr_ucol_close
operator|||
operator|!
name|ptr_ucol_strcoll
condition|)
block|{
comment|// try again with decorated symbol names
name|ptr_ucol_open
operator|=
operator|(
name|Ptr_ucol_open
operator|)
name|lib
operator|.
name|resolve
argument_list|(
literal|"ucol_open"
name|QT_STRINGIFY
argument_list|(
name|U_ICU_VERSION_SUFFIX
argument_list|)
argument_list|)
expr_stmt|;
name|ptr_ucol_close
operator|=
operator|(
name|Ptr_ucol_close
operator|)
name|lib
operator|.
name|resolve
argument_list|(
literal|"ucol_close"
name|QT_STRINGIFY
argument_list|(
name|U_ICU_VERSION_SUFFIX
argument_list|)
argument_list|)
expr_stmt|;
name|ptr_ucol_strcoll
operator|=
operator|(
name|Ptr_ucol_strcoll
operator|)
name|lib
operator|.
name|resolve
argument_list|(
literal|"ucol_strcoll"
name|QT_STRINGIFY
argument_list|(
name|U_ICU_VERSION_SUFFIX
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|ptr_ucol_open
operator|||
operator|!
name|ptr_ucol_close
operator|||
operator|!
name|ptr_ucol_strcoll
condition|)
block|{
name|ptr_ucol_open
operator|=
literal|0
expr_stmt|;
name|ptr_ucol_close
operator|=
literal|0
expr_stmt|;
name|ptr_ucol_strcoll
operator|=
literal|0
expr_stmt|;
name|qWarning
argument_list|(
literal|"Unable to find symbols in '%s'."
argument_list|,
name|qPrintable
argument_list|(
name|libicui18nName
argument_list|)
argument_list|)
expr_stmt|;
name|status
operator|=
name|ErrorLoading
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// resolve libicuuc
name|QLibrary
modifier|&
name|ucLib
init|=
name|icuLibraries
argument_list|()
operator|->
name|libicuuc
decl_stmt|;
if|if
condition|(
operator|!
name|loadIcuLibrary
argument_list|(
name|ucLib
argument_list|,
name|libicuucName
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"Unable to load library '%s' version "
name|U_ICU_VERSION_SHORT
literal|": %s"
argument_list|,
name|qPrintable
argument_list|(
name|libicuucName
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|ucLib
operator|.
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|status
operator|=
name|ErrorLoading
expr_stmt|;
return|return
literal|false
return|;
block|}
name|ptr_u_strToUpper
operator|=
operator|(
name|Ptr_u_strToCase
operator|)
name|ucLib
operator|.
name|resolve
argument_list|(
literal|"u_strToUpper"
argument_list|)
expr_stmt|;
name|ptr_u_strToLower
operator|=
operator|(
name|Ptr_u_strToCase
operator|)
name|ucLib
operator|.
name|resolve
argument_list|(
literal|"u_strToLower"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ptr_u_strToUpper
operator|||
operator|!
name|ptr_u_strToLower
condition|)
block|{
name|ptr_u_strToUpper
operator|=
operator|(
name|Ptr_u_strToCase
operator|)
name|ucLib
operator|.
name|resolve
argument_list|(
literal|"u_strToUpper"
name|QT_STRINGIFY
argument_list|(
name|U_ICU_VERSION_SUFFIX
argument_list|)
argument_list|)
expr_stmt|;
name|ptr_u_strToLower
operator|=
operator|(
name|Ptr_u_strToCase
operator|)
name|ucLib
operator|.
name|resolve
argument_list|(
literal|"u_strToLower"
name|QT_STRINGIFY
argument_list|(
name|U_ICU_VERSION_SUFFIX
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|ptr_u_strToUpper
operator|||
operator|!
name|ptr_u_strToLower
condition|)
block|{
name|ptr_u_strToUpper
operator|=
literal|0
expr_stmt|;
name|ptr_u_strToLower
operator|=
literal|0
expr_stmt|;
name|qWarning
argument_list|(
literal|"Unable to find symbols in '%s'"
argument_list|,
name|qPrintable
argument_list|(
name|libicuucName
argument_list|)
argument_list|)
expr_stmt|;
name|status
operator|=
name|ErrorLoading
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// success :)
name|status
operator|=
name|Loaded
expr_stmt|;
block|}
if|if
condition|(
name|icuCollator
condition|)
block|{
name|ptr_ucol_close
argument_list|(
name|icuCollator
argument_list|)
expr_stmt|;
name|icuCollator
operator|=
literal|0
expr_stmt|;
block|}
name|UErrorCode
name|icuStatus
init|=
name|U_ZERO_ERROR
decl_stmt|;
name|icuCollator
operator|=
name|ptr_ucol_open
argument_list|(
name|localeString
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
operator|&
name|icuStatus
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|icuCollator
condition|)
block|{
name|qWarning
argument_list|(
literal|"Unable to open locale %s in ICU, error code %d"
argument_list|,
name|qPrintable
argument_list|(
name|localeString
argument_list|)
argument_list|,
name|icuStatus
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|qt_ucol_strcoll
name|bool
name|qt_ucol_strcoll
parameter_list|(
specifier|const
name|QChar
modifier|*
name|source
parameter_list|,
name|int
name|sourceLength
parameter_list|,
specifier|const
name|QChar
modifier|*
name|target
parameter_list|,
name|int
name|targetLength
parameter_list|,
name|int
modifier|*
name|result
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|target
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|icuCollator
condition|)
return|return
literal|false
return|;
operator|*
name|result
operator|=
name|ptr_ucol_strcoll
argument_list|(
name|icuCollator
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|UChar
operator|*
argument_list|>
argument_list|(
name|source
argument_list|)
argument_list|,
name|int32_t
argument_list|(
name|sourceLength
argument_list|)
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|UChar
operator|*
argument_list|>
argument_list|(
name|target
argument_list|)
argument_list|,
name|int32_t
argument_list|(
name|targetLength
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|// caseFunc can either be u_strToUpper or u_strToLower
end_comment
begin_function
DECL|function|qt_u_strToCase
specifier|static
name|bool
name|qt_u_strToCase
parameter_list|(
specifier|const
name|QString
modifier|&
name|str
parameter_list|,
name|QString
modifier|*
name|out
parameter_list|,
specifier|const
name|QLocale
modifier|&
name|locale
parameter_list|,
name|Ptr_u_strToCase
name|caseFunc
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|out
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|icuCollator
condition|)
return|return
literal|false
return|;
name|QString
name|result
argument_list|(
name|str
operator|.
name|size
argument_list|()
argument_list|,
name|Qt
operator|::
name|Uninitialized
argument_list|)
decl_stmt|;
name|UErrorCode
name|status
init|=
name|U_ZERO_ERROR
decl_stmt|;
name|int32_t
name|size
init|=
name|caseFunc
argument_list|(
cast|reinterpret_cast
argument_list|<
name|UChar
operator|*
argument_list|>
argument_list|(
name|result
operator|.
name|data
argument_list|()
argument_list|)
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|UChar
operator|*
argument_list|>
argument_list|(
name|str
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|,
name|str
operator|.
name|size
argument_list|()
argument_list|,
name|locale
operator|.
name|bcp47Name
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
operator|&
name|status
argument_list|)
decl_stmt|;
if|if
condition|(
name|U_FAILURE
argument_list|(
name|status
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|size
operator|<
name|result
operator|.
name|size
argument_list|()
condition|)
block|{
name|result
operator|.
name|resize
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|size
operator|>
name|result
operator|.
name|size
argument_list|()
condition|)
block|{
comment|// the resulting string is larger than our source string
name|result
operator|.
name|resize
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|status
operator|=
name|U_ZERO_ERROR
expr_stmt|;
name|size
operator|=
name|caseFunc
argument_list|(
cast|reinterpret_cast
argument_list|<
name|UChar
operator|*
argument_list|>
argument_list|(
name|result
operator|.
name|data
argument_list|()
argument_list|)
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|UChar
operator|*
argument_list|>
argument_list|(
name|str
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|,
name|str
operator|.
name|size
argument_list|()
argument_list|,
name|locale
operator|.
name|bcp47Name
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
operator|&
name|status
argument_list|)
expr_stmt|;
if|if
condition|(
name|U_FAILURE
argument_list|(
name|status
argument_list|)
condition|)
return|return
literal|false
return|;
comment|// if the sizes don't match now, we give up.
if|if
condition|(
name|size
operator|!=
name|result
operator|.
name|size
argument_list|()
condition|)
return|return
literal|false
return|;
block|}
operator|*
name|out
operator|=
name|result
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|qt_u_strToUpper
name|bool
name|qt_u_strToUpper
parameter_list|(
specifier|const
name|QString
modifier|&
name|str
parameter_list|,
name|QString
modifier|*
name|out
parameter_list|,
specifier|const
name|QLocale
modifier|&
name|locale
parameter_list|)
block|{
return|return
name|qt_u_strToCase
argument_list|(
name|str
argument_list|,
name|out
argument_list|,
name|locale
argument_list|,
name|ptr_u_strToUpper
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qt_u_strToLower
name|bool
name|qt_u_strToLower
parameter_list|(
specifier|const
name|QString
modifier|&
name|str
parameter_list|,
name|QString
modifier|*
name|out
parameter_list|,
specifier|const
name|QLocale
modifier|&
name|locale
parameter_list|)
block|{
return|return
name|qt_u_strToCase
argument_list|(
name|str
argument_list|,
name|out
argument_list|,
name|locale
argument_list|,
name|ptr_u_strToLower
argument_list|)
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
