begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Intel Corporation ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia. For licensing terms and ** conditions see http://qt.digia.com/licensing. For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights. These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_if
if|#
directive|if
name|defined
argument_list|(
name|QSTRING_H
argument_list|)
operator|||
name|defined
argument_list|(
name|QBYTEARRAY_H
argument_list|)
end_if
begin_error
error|#
directive|error
literal|"This file cannot be compiled with pre-compiled headers"
end_error
begin_endif
endif|#
directive|endif
end_endif
begin_define
DECL|macro|QT_COMPILING_QSTRING_COMPAT_CPP
define|#
directive|define
name|QT_COMPILING_QSTRING_COMPAT_CPP
end_define
begin_include
include|#
directive|include
file|"qbytearray.h"
end_include
begin_include
include|#
directive|include
file|"qstring.h"
end_include
begin_function
name|QT_BEGIN_NAMESPACE
comment|// all these implementations must be the same as the inline versions in qstring.h
DECL|function|toLower
name|QString
name|QString
operator|::
name|toLower
parameter_list|()
specifier|const
block|{
return|return
name|toLower_helper
argument_list|(
operator|*
name|this
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|toCaseFolded
name|QString
name|QString
operator|::
name|toCaseFolded
parameter_list|()
specifier|const
block|{
return|return
name|toCaseFolded_helper
argument_list|(
operator|*
name|this
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|toUpper
name|QString
name|QString
operator|::
name|toUpper
parameter_list|()
specifier|const
block|{
return|return
name|toUpper_helper
argument_list|(
operator|*
name|this
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|toLatin1
name|QByteArray
name|QString
operator|::
name|toLatin1
parameter_list|()
specifier|const
block|{
return|return
name|toLatin1_helper
argument_list|(
operator|*
name|this
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|toLocal8Bit
name|QByteArray
name|QString
operator|::
name|toLocal8Bit
parameter_list|()
specifier|const
block|{
return|return
name|toLocal8Bit_helper
argument_list|(
name|constData
argument_list|()
argument_list|,
name|size
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|toUtf8
name|QByteArray
name|QString
operator|::
name|toUtf8
parameter_list|()
specifier|const
block|{
return|return
name|toUtf8_helper
argument_list|(
operator|*
name|this
argument_list|)
return|;
block|}
end_function
begin_comment
comment|// ditto, for qbytearray.h (because we're lazy)
end_comment
begin_function
DECL|function|toLower
name|QByteArray
name|QByteArray
operator|::
name|toLower
parameter_list|()
specifier|const
block|{
return|return
name|toLower_helper
argument_list|(
operator|*
name|this
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|toUpper
name|QByteArray
name|QByteArray
operator|::
name|toUpper
parameter_list|()
specifier|const
block|{
return|return
name|toUpper_helper
argument_list|(
operator|*
name|this
argument_list|)
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
