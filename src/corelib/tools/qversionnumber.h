begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Copyright (C) 2014 Keith Gardner<kreios4004@gmail.com> ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QVERSIONNUMBER_H
end_ifndef
begin_define
DECL|macro|QVERSIONNUMBER_H
define|#
directive|define
name|QVERSIONNUMBER_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qnamespace.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qstring.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qvector.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qmetatype.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qtypeinfo.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QVersionNumber
name|class
name|QVersionNumber
decl_stmt|;
end_decl_stmt
begin_function_decl
name|Q_CORE_EXPORT
name|uint
name|qHash
parameter_list|(
specifier|const
name|QVersionNumber
modifier|&
name|key
parameter_list|,
name|uint
name|seed
init|=
literal|0
parameter_list|)
function_decl|;
end_function_decl
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DATASTREAM
end_ifndef
begin_expr_stmt
name|Q_CORE_EXPORT
name|QDataStream
operator|&
name|operator
operator|<<
operator|(
name|QDataStream
operator|&
name|out
operator|,
specifier|const
name|QVersionNumber
operator|&
name|version
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_CORE_EXPORT
name|QDataStream
operator|&
name|operator
operator|>>
operator|(
name|QDataStream
operator|&
name|in
operator|,
name|QVersionNumber
operator|&
name|version
operator|)
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|class
name|QVersionNumber
block|{
comment|/*      * QVersionNumber stores small values inline, without memory allocation.      * We do that by setting the LSB in the pointer that would otherwise hold      * the longer form of the segments.      * The constants below help us deal with the permutations for 32- and 64-bit,      * little- and big-endian architectures.      */
enum|enum
block|{
comment|// in little-endian, inline_segments[0] is shared with the pointer's LSB, while
comment|// in big-endian, it's inline_segments[7]
name|InlineSegmentMarker
init|=
name|Q_BYTE_ORDER
operator|==
name|Q_LITTLE_ENDIAN
condition|?
literal|0
else|:
sizeof|sizeof
argument_list|(
name|void
operator|*
argument_list|)
operator|-
literal|1
block|,
name|InlineSegmentStartIdx
init|=
operator|!
name|InlineSegmentMarker
block|,
comment|// 0 for BE, 1 for LE
name|InlineSegmentCount
init|=
sizeof|sizeof
argument_list|(
name|void
operator|*
argument_list|)
operator|-
literal|1
block|}
enum|;
name|Q_STATIC_ASSERT
argument_list|(
name|InlineSegmentCount
operator|>=
literal|3
argument_list|)
expr_stmt|;
comment|// at least major, minor, micro
struct|struct
name|SegmentStorage
block|{
comment|// Note: we alias the use of dummy and inline_segments in the use of the
comment|// union below. This is undefined behavior in C++98, but most compilers implement
comment|// the C++11 behavior. The one known exception is older versions of Sun Studio.
union|union
block|{
name|quintptr
name|dummy
decl_stmt|;
name|qint8
name|inline_segments
index|[
sizeof|sizeof
argument_list|(
name|void
operator|*
argument_list|)
index|]
decl_stmt|;
name|QVector
operator|<
name|int
operator|>
operator|*
name|pointer_segments
expr_stmt|;
block|}
union|;
comment|// set the InlineSegmentMarker and set length to zero
name|SegmentStorage
argument_list|()
name|Q_DECL_NOTHROW
label|:
name|dummy
argument_list|(
literal|1
argument_list|)
block|{}
name|SegmentStorage
argument_list|(
argument|const QVector<int>&seg
argument_list|)
block|{
if|if
condition|(
name|dataFitsInline
argument_list|(
name|seg
operator|.
name|begin
argument_list|()
argument_list|,
name|seg
operator|.
name|size
argument_list|()
argument_list|)
condition|)
name|setInlineData
argument_list|(
name|seg
operator|.
name|begin
argument_list|()
argument_list|,
name|seg
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|pointer_segments
operator|=
name|new
name|QVector
operator|<
name|int
operator|>
operator|(
name|seg
operator|)
expr_stmt|;
block|}
name|SegmentStorage
argument_list|(
argument|const SegmentStorage&other
argument_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isUsingPointer
argument_list|()
condition|)
name|pointer_segments
operator|=
name|new
name|QVector
operator|<
name|int
operator|>
operator|(
operator|*
name|other
operator|.
name|pointer_segments
operator|)
expr_stmt|;
else|else
name|dummy
operator|=
name|other
operator|.
name|dummy
expr_stmt|;
block|}
name|SegmentStorage
modifier|&
name|operator
init|=
operator|(
specifier|const
name|SegmentStorage
operator|&
name|other
operator|)
block|{
if|if
condition|(
name|isUsingPointer
argument_list|()
operator|&&
name|other
operator|.
name|isUsingPointer
argument_list|()
condition|)
block|{
operator|*
name|pointer_segments
operator|=
operator|*
name|other
operator|.
name|pointer_segments
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|other
operator|.
name|isUsingPointer
argument_list|()
condition|)
block|{
name|pointer_segments
operator|=
name|new
name|QVector
operator|<
name|int
operator|>
operator|(
operator|*
name|other
operator|.
name|pointer_segments
operator|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|isUsingPointer
argument_list|()
condition|)
name|delete
name|pointer_segments
decl_stmt|;
name|dummy
operator|=
name|other
operator|.
name|dummy
expr_stmt|;
block|}
return|return
operator|*
name|this
return|;
block|}
ifdef|#
directive|ifdef
name|Q_COMPILER_RVALUE_REFS
name|SegmentStorage
argument_list|(
argument|SegmentStorage&&other
argument_list|)
name|Q_DECL_NOTHROW
label|:
name|dummy
argument_list|(
argument|other.dummy
argument_list|)
block|{
name|other
operator|.
name|dummy
operator|=
literal|1
expr_stmt|;
block|}
name|SegmentStorage
modifier|&
name|operator
init|=
operator|(
name|SegmentStorage
operator|&&
name|other
operator|)
name|Q_DECL_NOTHROW
block|{
name|qSwap
argument_list|(
name|dummy
argument_list|,
name|other
operator|.
name|dummy
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
name|explicit
name|SegmentStorage
argument_list|(
name|QVector
operator|<
name|int
operator|>
operator|&&
name|seg
argument_list|)
block|{
if|if
condition|(
name|dataFitsInline
argument_list|(
name|seg
operator|.
name|begin
argument_list|()
argument_list|,
name|seg
operator|.
name|size
argument_list|()
argument_list|)
condition|)
name|setInlineData
argument_list|(
name|seg
operator|.
name|begin
argument_list|()
argument_list|,
name|seg
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|pointer_segments
operator|=
name|new
name|QVector
operator|<
name|int
operator|>
operator|(
name|std
operator|::
name|move
argument_list|(
name|seg
argument_list|)
operator|)
expr_stmt|;
block|}
endif|#
directive|endif
ifdef|#
directive|ifdef
name|Q_COMPILER_INITIALIZER_LISTS
name|SegmentStorage
argument_list|(
argument|std::initializer_list<int> args
argument_list|)
block|{
if|if
condition|(
name|dataFitsInline
argument_list|(
name|args
operator|.
name|begin
argument_list|()
argument_list|,
name|int
argument_list|(
name|args
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|setInlineData
argument_list|(
name|args
operator|.
name|begin
argument_list|()
argument_list|,
name|int
argument_list|(
name|args
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pointer_segments
operator|=
name|new
name|QVector
operator|<
name|int
operator|>
operator|(
name|args
operator|)
expr_stmt|;
block|}
block|}
endif|#
directive|endif
operator|~
name|SegmentStorage
argument_list|()
block|{
if|if
condition|(
name|isUsingPointer
argument_list|()
condition|)
name|delete
name|pointer_segments
decl_stmt|;
block|}
name|bool
name|isUsingPointer
argument_list|()
specifier|const
name|Q_DECL_NOTHROW
block|{
return|return
operator|(
name|inline_segments
index|[
name|InlineSegmentMarker
index|]
operator|&
literal|1
operator|)
operator|==
literal|0
return|;
block|}
name|int
name|size
argument_list|()
specifier|const
name|Q_DECL_NOTHROW
block|{
return|return
name|isUsingPointer
argument_list|()
operator|?
name|pointer_segments
operator|->
name|size
argument_list|()
operator|:
operator|(
name|inline_segments
index|[
name|InlineSegmentMarker
index|]
operator|>>
literal|1
operator|)
return|;
block|}
name|void
name|setInlineSize
parameter_list|(
name|int
name|len
parameter_list|)
block|{
name|inline_segments
index|[
name|InlineSegmentMarker
index|]
operator|=
literal|1
operator|+
literal|2
operator|*
name|len
expr_stmt|;
block|}
name|void
name|resize
parameter_list|(
name|int
name|len
parameter_list|)
block|{
if|if
condition|(
name|isUsingPointer
argument_list|()
condition|)
name|pointer_segments
operator|->
name|resize
argument_list|(
name|len
argument_list|)
expr_stmt|;
else|else
name|setInlineSize
argument_list|(
name|len
argument_list|)
expr_stmt|;
block|}
name|int
name|at
argument_list|(
name|int
name|index
argument_list|)
decl|const
block|{
return|return
name|isUsingPointer
argument_list|()
condition|?
name|pointer_segments
operator|->
name|at
argument_list|(
name|index
argument_list|)
else|:
name|inline_segments
index|[
name|InlineSegmentStartIdx
operator|+
name|index
index|]
return|;
block|}
name|void
name|setSegments
parameter_list|(
name|int
name|len
parameter_list|,
name|int
name|maj
parameter_list|,
name|int
name|min
init|=
literal|0
parameter_list|,
name|int
name|mic
init|=
literal|0
parameter_list|)
block|{
if|if
condition|(
name|maj
operator|==
name|qint8
argument_list|(
name|maj
argument_list|)
operator|&&
name|min
operator|==
name|qint8
argument_list|(
name|min
argument_list|)
operator|&&
name|mic
operator|==
name|qint8
argument_list|(
name|mic
argument_list|)
condition|)
block|{
name|int
name|data
index|[]
init|=
block|{
name|maj
block|,
name|min
block|,
name|mic
block|}
decl_stmt|;
name|setInlineData
argument_list|(
name|data
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setVector
argument_list|(
name|len
argument_list|,
name|maj
argument_list|,
name|min
argument_list|,
name|mic
argument_list|)
expr_stmt|;
block|}
block|}
name|private
label|:
specifier|static
name|bool
name|dataFitsInline
parameter_list|(
specifier|const
name|int
modifier|*
name|data
parameter_list|,
name|int
name|len
parameter_list|)
block|{
if|if
condition|(
name|len
operator|>
name|InlineSegmentCount
condition|)
return|return
name|false
return|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|data
index|[
name|i
index|]
operator|!=
name|qint8
argument_list|(
name|data
index|[
name|i
index|]
argument_list|)
condition|)
return|return
name|false
return|;
return|return
name|true
return|;
block|}
name|void
name|setInlineData
parameter_list|(
specifier|const
name|int
modifier|*
name|data
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|dummy
operator|=
literal|1
operator|+
name|len
operator|*
literal|2
expr_stmt|;
if|#
directive|if
name|Q_BYTE_ORDER
operator|==
name|Q_LITTLE_ENDIAN
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
name|dummy
operator||=
name|quintptr
argument_list|(
name|data
index|[
name|i
index|]
operator|&
literal|0xFF
argument_list|)
operator|<<
operator|(
literal|8
operator|*
operator|(
name|i
operator|+
literal|1
operator|)
operator|)
expr_stmt|;
elif|#
directive|elif
name|Q_BYTE_ORDER
operator|==
name|Q_BIG_ENDIAN
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
name|dummy
operator||=
name|quintptr
argument_list|(
name|data
index|[
name|i
index|]
operator|&
literal|0xFF
argument_list|)
operator|<<
operator|(
literal|8
operator|*
operator|(
sizeof|sizeof
argument_list|(
name|void
operator|*
argument_list|)
operator|-
name|i
operator|-
literal|1
operator|)
operator|)
expr_stmt|;
else|#
directive|else
comment|// the code above is equivalent to:
name|setInlineSize
argument_list|(
name|len
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
name|inline_segments
index|[
name|InlineSegmentStartIdx
operator|+
name|i
index|]
operator|=
name|data
index|[
name|i
index|]
operator|&
literal|0xFF
expr_stmt|;
endif|#
directive|endif
block|}
name|Q_CORE_EXPORT
name|void
name|setVector
parameter_list|(
name|int
name|len
parameter_list|,
name|int
name|maj
parameter_list|,
name|int
name|min
parameter_list|,
name|int
name|mic
parameter_list|)
function_decl|;
block|}
name|m_segments
struct|;
name|public
label|:
specifier|inline
name|QVersionNumber
argument_list|()
name|Q_DECL_NOTHROW
operator|:
name|m_segments
argument_list|()
block|{}
specifier|inline
name|explicit
name|QVersionNumber
argument_list|(
specifier|const
name|QVector
operator|<
name|int
operator|>
operator|&
name|seg
argument_list|)
operator|:
name|m_segments
argument_list|(
argument|seg
argument_list|)
block|{}
comment|// compiler-generated copy/move ctor/assignment operators and the destructor are ok
ifdef|#
directive|ifdef
name|Q_COMPILER_RVALUE_REFS
name|explicit
name|QVersionNumber
argument_list|(
name|QVector
operator|<
name|int
operator|>
operator|&&
name|seg
argument_list|)
operator|:
name|m_segments
argument_list|(
argument|std::move(seg)
argument_list|)
block|{}
endif|#
directive|endif
ifdef|#
directive|ifdef
name|Q_COMPILER_INITIALIZER_LISTS
specifier|inline
name|QVersionNumber
argument_list|(
name|std
operator|::
name|initializer_list
operator|<
name|int
operator|>
name|args
argument_list|)
operator|:
name|m_segments
argument_list|(
argument|args
argument_list|)
block|{}
endif|#
directive|endif
specifier|inline
name|explicit
name|QVersionNumber
argument_list|(
argument|int maj
argument_list|)
block|{
name|m_segments
operator|.
name|setSegments
argument_list|(
literal|1
argument_list|,
name|maj
argument_list|)
block|; }
specifier|inline
name|explicit
name|QVersionNumber
argument_list|(
argument|int maj
argument_list|,
argument|int min
argument_list|)
block|{
name|m_segments
operator|.
name|setSegments
argument_list|(
literal|2
argument_list|,
name|maj
argument_list|,
name|min
argument_list|)
block|; }
specifier|inline
name|explicit
name|QVersionNumber
argument_list|(
argument|int maj
argument_list|,
argument|int min
argument_list|,
argument|int mic
argument_list|)
block|{
name|m_segments
operator|.
name|setSegments
argument_list|(
literal|3
argument_list|,
name|maj
argument_list|,
name|min
argument_list|,
name|mic
argument_list|)
block|; }
specifier|inline
name|bool
name|isNull
argument_list|()
specifier|const
name|Q_DECL_NOTHROW
name|Q_REQUIRED_RESULT
block|{
return|return
name|segmentCount
argument_list|()
operator|==
literal|0
return|;
block|}
specifier|inline
name|bool
name|isNormalized
argument_list|()
specifier|const
name|Q_DECL_NOTHROW
name|Q_REQUIRED_RESULT
block|{
return|return
name|isNull
argument_list|()
operator|||
name|segmentAt
argument_list|(
name|segmentCount
argument_list|()
operator|-
literal|1
argument_list|)
operator|!=
literal|0
return|;
block|}
specifier|inline
name|int
name|majorVersion
argument_list|()
specifier|const
name|Q_DECL_NOTHROW
name|Q_REQUIRED_RESULT
block|{
return|return
name|segmentAt
argument_list|(
literal|0
argument_list|)
return|;
block|}
specifier|inline
name|int
name|minorVersion
argument_list|()
specifier|const
name|Q_DECL_NOTHROW
name|Q_REQUIRED_RESULT
block|{
return|return
name|segmentAt
argument_list|(
literal|1
argument_list|)
return|;
block|}
specifier|inline
name|int
name|microVersion
argument_list|()
specifier|const
name|Q_DECL_NOTHROW
name|Q_REQUIRED_RESULT
block|{
return|return
name|segmentAt
argument_list|(
literal|2
argument_list|)
return|;
block|}
name|Q_CORE_EXPORT
name|QVersionNumber
name|normalized
argument_list|()
specifier|const
name|Q_REQUIRED_RESULT
expr_stmt|;
name|Q_CORE_EXPORT
name|QVector
operator|<
name|int
operator|>
name|segments
argument_list|()
specifier|const
name|Q_REQUIRED_RESULT
expr_stmt|;
specifier|inline
name|int
name|segmentAt
argument_list|(
name|int
name|index
argument_list|)
decl|const
name|Q_DECL_NOTHROW
name|Q_REQUIRED_RESULT
block|{
return|return
operator|(
name|m_segments
operator|.
name|size
argument_list|()
operator|>
name|index
operator|)
condition|?
name|m_segments
operator|.
name|at
argument_list|(
name|index
argument_list|)
else|:
literal|0
return|;
block|}
specifier|inline
name|int
name|segmentCount
argument_list|()
specifier|const
name|Q_DECL_NOTHROW
name|Q_REQUIRED_RESULT
block|{
return|return
name|m_segments
operator|.
name|size
argument_list|()
return|;
block|}
name|Q_CORE_EXPORT
name|bool
name|isPrefixOf
argument_list|(
specifier|const
name|QVersionNumber
operator|&
name|other
argument_list|)
decl|const
name|Q_DECL_NOTHROW
name|Q_REQUIRED_RESULT
decl_stmt|;
name|Q_CORE_EXPORT
specifier|static
name|int
name|compare
argument_list|(
specifier|const
name|QVersionNumber
operator|&
name|v1
argument_list|,
specifier|const
name|QVersionNumber
operator|&
name|v2
argument_list|)
name|Q_DECL_NOTHROW
name|Q_REQUIRED_RESULT
decl_stmt|;
name|Q_CORE_EXPORT
specifier|static
name|Q_DECL_PURE_FUNCTION
name|QVersionNumber
name|commonPrefix
argument_list|(
specifier|const
name|QVersionNumber
operator|&
name|v1
argument_list|,
specifier|const
name|QVersionNumber
operator|&
name|v2
argument_list|)
name|Q_REQUIRED_RESULT
decl_stmt|;
name|Q_CORE_EXPORT
name|QString
name|toString
argument_list|()
specifier|const
name|Q_REQUIRED_RESULT
expr_stmt|;
name|Q_CORE_EXPORT
specifier|static
name|Q_DECL_PURE_FUNCTION
name|QVersionNumber
name|fromString
argument_list|(
specifier|const
name|QString
operator|&
name|string
argument_list|,
name|int
operator|*
name|suffixIndex
operator|=
name|Q_NULLPTR
argument_list|)
name|Q_REQUIRED_RESULT
decl_stmt|;
name|private
label|:
ifndef|#
directive|ifndef
name|QT_NO_DATASTREAM
name|friend
name|Q_CORE_EXPORT
name|QDataStream
operator|&
name|operator
operator|>>
operator|(
name|QDataStream
operator|&
name|in
operator|,
name|QVersionNumber
operator|&
name|version
operator|)
expr_stmt|;
endif|#
directive|endif
name|friend
name|Q_CORE_EXPORT
name|uint
name|qHash
parameter_list|(
specifier|const
name|QVersionNumber
modifier|&
name|key
parameter_list|,
name|uint
name|seed
parameter_list|)
function_decl|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_expr_stmt
name|Q_DECLARE_TYPEINFO
argument_list|(
name|QVersionNumber
argument_list|,
name|Q_MOVABLE_TYPE
argument_list|)
expr_stmt|;
end_expr_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DEBUG_STREAM
end_ifndef
begin_expr_stmt
name|Q_CORE_EXPORT
name|QDebug
name|operator
operator|<<
operator|(
name|QDebug
operator|,
specifier|const
name|QVersionNumber
operator|&
name|version
operator|)
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
name|Q_REQUIRED_RESULT
specifier|inline
name|bool
name|operator
operator|>
operator|(
specifier|const
name|QVersionNumber
operator|&
name|lhs
operator|,
specifier|const
name|QVersionNumber
operator|&
name|rhs
operator|)
name|Q_DECL_NOTHROW
block|{
return|return
name|QVersionNumber
operator|::
name|compare
argument_list|(
name|lhs
argument_list|,
name|rhs
argument_list|)
operator|>
literal|0
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|Q_REQUIRED_RESULT
specifier|inline
name|bool
name|operator
operator|>=
operator|(
specifier|const
name|QVersionNumber
operator|&
name|lhs
operator|,
specifier|const
name|QVersionNumber
operator|&
name|rhs
operator|)
name|Q_DECL_NOTHROW
block|{
return|return
name|QVersionNumber
operator|::
name|compare
argument_list|(
name|lhs
argument_list|,
name|rhs
argument_list|)
operator|>=
literal|0
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|Q_REQUIRED_RESULT
specifier|inline
name|bool
name|operator
operator|<
operator|(
specifier|const
name|QVersionNumber
operator|&
name|lhs
operator|,
specifier|const
name|QVersionNumber
operator|&
name|rhs
operator|)
name|Q_DECL_NOTHROW
block|{
return|return
name|QVersionNumber
operator|::
name|compare
argument_list|(
name|lhs
argument_list|,
name|rhs
argument_list|)
operator|<
literal|0
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|Q_REQUIRED_RESULT
specifier|inline
name|bool
name|operator
operator|<=
operator|(
specifier|const
name|QVersionNumber
operator|&
name|lhs
operator|,
specifier|const
name|QVersionNumber
operator|&
name|rhs
operator|)
name|Q_DECL_NOTHROW
block|{
return|return
name|QVersionNumber
operator|::
name|compare
argument_list|(
name|lhs
argument_list|,
name|rhs
argument_list|)
operator|<=
literal|0
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|Q_REQUIRED_RESULT
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QVersionNumber
operator|&
name|lhs
operator|,
specifier|const
name|QVersionNumber
operator|&
name|rhs
operator|)
name|Q_DECL_NOTHROW
block|{
return|return
name|QVersionNumber
operator|::
name|compare
argument_list|(
name|lhs
argument_list|,
name|rhs
argument_list|)
operator|==
literal|0
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|Q_REQUIRED_RESULT
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|QVersionNumber
operator|&
name|lhs
operator|,
specifier|const
name|QVersionNumber
operator|&
name|rhs
operator|)
name|Q_DECL_NOTHROW
block|{
return|return
name|QVersionNumber
operator|::
name|compare
argument_list|(
name|lhs
argument_list|,
name|rhs
argument_list|)
operator|!=
literal|0
return|;
block|}
end_expr_stmt
begin_decl_stmt
name|QT_END_NAMESPACE
name|Q_DECLARE_METATYPE
argument_list|(
name|QVersionNumber
argument_list|)
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QVERSIONNUMBER_H
end_comment
end_unit
