begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|// ask for the latest POSIX, just in case
end_comment
begin_define
DECL|macro|_POSIX_C_SOURCE
define|#
directive|define
name|_POSIX_C_SOURCE
value|200809L
end_define
begin_include
include|#
directive|include
file|"qelapsedtimer.h"
end_include
begin_include
include|#
directive|include
file|<sys/time.h>
end_include
begin_include
include|#
directive|include
file|<time.h>
end_include
begin_include
include|#
directive|include
file|<unistd.h>
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|QT_NO_CLOCK_MONOTONIC
argument_list|)
operator|||
name|defined
argument_list|(
name|QT_BOOTSTRAPPED
argument_list|)
end_if
begin_comment
comment|// turn off the monotonic clock
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|_POSIX_MONOTONIC_CLOCK
end_ifdef
begin_undef
DECL|macro|_POSIX_MONOTONIC_CLOCK
undef|#
directive|undef
name|_POSIX_MONOTONIC_CLOCK
end_undef
begin_endif
endif|#
directive|endif
end_endif
begin_define
DECL|macro|_POSIX_MONOTONIC_CLOCK
define|#
directive|define
name|_POSIX_MONOTONIC_CLOCK
value|-1
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
if|#
directive|if
operator|(
name|_POSIX_MONOTONIC_CLOCK
operator|-
literal|0
operator|!=
literal|0
operator|)
DECL|variable|monotonicClockChecked
specifier|static
specifier|const
name|bool
name|monotonicClockChecked
init|=
literal|true
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|monotonicClockAvailable
specifier|static
specifier|const
name|bool
name|monotonicClockAvailable
init|=
name|_POSIX_MONOTONIC_CLOCK
operator|>
literal|0
decl_stmt|;
end_decl_stmt
begin_else
else|#
directive|else
end_else
begin_decl_stmt
specifier|static
name|int
name|monotonicClockChecked
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|static
name|int
name|monotonicClockAvailable
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_define
DECL|macro|load_acquire
define|#
directive|define
name|load_acquire
parameter_list|(
name|x
parameter_list|)
value|((volatile const int&)(x))
end_define
begin_define
DECL|macro|store_release
define|#
directive|define
name|store_release
parameter_list|(
name|x
parameter_list|,
name|v
parameter_list|)
value|((volatile int&)(x) = (v))
end_define
begin_function
DECL|function|unixCheckClockType
specifier|static
name|void
name|unixCheckClockType
parameter_list|()
block|{
if|#
directive|if
operator|(
name|_POSIX_MONOTONIC_CLOCK
operator|-
literal|0
operator|==
literal|0
operator|)
if|if
condition|(
name|Q_LIKELY
argument_list|(
name|load_acquire
argument_list|(
name|monotonicClockChecked
argument_list|)
argument_list|)
condition|)
return|return;
if|#
directive|if
name|defined
argument_list|(
name|_SC_MONOTONIC_CLOCK
argument_list|)
comment|// detect if the system support monotonic timers
name|long
name|x
init|=
name|sysconf
argument_list|(
name|_SC_MONOTONIC_CLOCK
argument_list|)
decl_stmt|;
name|store_release
argument_list|(
name|monotonicClockAvailable
argument_list|,
name|x
operator|>=
literal|200112L
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|store_release
argument_list|(
name|monotonicClockChecked
argument_list|,
literal|true
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|fractionAdjustment
specifier|static
specifier|inline
name|qint64
name|fractionAdjustment
parameter_list|()
block|{
return|return
literal|1000
operator|*
literal|1000ull
return|;
block|}
end_function
begin_function
name|bool
name|QElapsedTimer
operator|::
name|isMonotonic
parameter_list|()
name|Q_DECL_NOTHROW
block|{
name|unixCheckClockType
argument_list|()
expr_stmt|;
return|return
name|monotonicClockAvailable
return|;
block|}
end_function
begin_function
name|QElapsedTimer
operator|::
name|ClockType
name|QElapsedTimer
operator|::
name|clockType
parameter_list|()
name|Q_DECL_NOTHROW
block|{
name|unixCheckClockType
argument_list|()
expr_stmt|;
return|return
name|monotonicClockAvailable
condition|?
name|MonotonicClock
else|:
name|SystemTime
return|;
block|}
end_function
begin_function
DECL|function|do_gettime
specifier|static
specifier|inline
name|void
name|do_gettime
parameter_list|(
name|qint64
modifier|*
name|sec
parameter_list|,
name|qint64
modifier|*
name|frac
parameter_list|)
block|{
if|#
directive|if
operator|(
name|_POSIX_MONOTONIC_CLOCK
operator|-
literal|0
operator|>=
literal|0
operator|)
name|unixCheckClockType
argument_list|()
expr_stmt|;
if|if
condition|(
name|Q_LIKELY
argument_list|(
name|monotonicClockAvailable
argument_list|)
condition|)
block|{
name|timespec
name|ts
decl_stmt|;
name|clock_gettime
argument_list|(
name|CLOCK_MONOTONIC
argument_list|,
operator|&
name|ts
argument_list|)
expr_stmt|;
operator|*
name|sec
operator|=
name|ts
operator|.
name|tv_sec
expr_stmt|;
operator|*
name|frac
operator|=
name|ts
operator|.
name|tv_nsec
expr_stmt|;
return|return;
block|}
endif|#
directive|endif
ifdef|#
directive|ifdef
name|CLOCK_REALTIME
comment|// even if we don't have a monotonic clock,
comment|// we can use clock_gettime -> nanosecond resolution
name|timespec
name|ts
decl_stmt|;
name|clock_gettime
argument_list|(
name|CLOCK_REALTIME
argument_list|,
operator|&
name|ts
argument_list|)
expr_stmt|;
operator|*
name|sec
operator|=
name|ts
operator|.
name|tv_sec
expr_stmt|;
operator|*
name|frac
operator|=
name|ts
operator|.
name|tv_nsec
expr_stmt|;
else|#
directive|else
comment|// use gettimeofday
name|timeval
name|tv
decl_stmt|;
operator|::
name|gettimeofday
argument_list|(
operator|&
name|tv
argument_list|,
literal|0
argument_list|)
expr_stmt|;
operator|*
name|sec
operator|=
name|tv
operator|.
name|tv_sec
expr_stmt|;
operator|*
name|frac
operator|=
name|tv
operator|.
name|tv_usec
operator|*
literal|1000
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|// used in qcore_unix.cpp and qeventdispatcher_unix.cpp
end_comment
begin_function
name|timeval
name|qt_gettime
parameter_list|()
name|Q_DECL_NOTHROW
block|{
name|qint64
name|sec
decl_stmt|,
name|frac
decl_stmt|;
name|do_gettime
argument_list|(
operator|&
name|sec
argument_list|,
operator|&
name|frac
argument_list|)
expr_stmt|;
name|timeval
name|tv
decl_stmt|;
name|tv
operator|.
name|tv_sec
operator|=
name|sec
expr_stmt|;
name|tv
operator|.
name|tv_usec
operator|=
name|frac
operator|/
literal|1000
expr_stmt|;
return|return
name|tv
return|;
block|}
end_function
begin_function
DECL|function|elapsedAndRestart
specifier|static
name|qint64
name|elapsedAndRestart
parameter_list|(
name|qint64
name|sec
parameter_list|,
name|qint64
name|frac
parameter_list|,
name|qint64
modifier|*
name|nowsec
parameter_list|,
name|qint64
modifier|*
name|nowfrac
parameter_list|)
block|{
name|do_gettime
argument_list|(
name|nowsec
argument_list|,
name|nowfrac
argument_list|)
expr_stmt|;
name|sec
operator|=
operator|*
name|nowsec
operator|-
name|sec
expr_stmt|;
name|frac
operator|=
operator|*
name|nowfrac
operator|-
name|frac
expr_stmt|;
return|return
name|sec
operator|*
name|Q_INT64_C
argument_list|(
literal|1000
argument_list|)
operator|+
name|frac
operator|/
name|fractionAdjustment
argument_list|()
return|;
block|}
end_function
begin_function
name|void
name|QElapsedTimer
operator|::
name|start
parameter_list|()
name|Q_DECL_NOTHROW
block|{
name|do_gettime
argument_list|(
operator|&
name|t1
argument_list|,
operator|&
name|t2
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
name|qint64
name|QElapsedTimer
operator|::
name|restart
parameter_list|()
name|Q_DECL_NOTHROW
block|{
return|return
name|elapsedAndRestart
argument_list|(
name|t1
argument_list|,
name|t2
argument_list|,
operator|&
name|t1
argument_list|,
operator|&
name|t2
argument_list|)
return|;
block|}
end_function
begin_function
name|qint64
name|QElapsedTimer
operator|::
name|nsecsElapsed
parameter_list|()
specifier|const
name|Q_DECL_NOTHROW
block|{
name|qint64
name|sec
decl_stmt|,
name|frac
decl_stmt|;
name|do_gettime
argument_list|(
operator|&
name|sec
argument_list|,
operator|&
name|frac
argument_list|)
expr_stmt|;
name|sec
operator|=
name|sec
operator|-
name|t1
expr_stmt|;
name|frac
operator|=
name|frac
operator|-
name|t2
expr_stmt|;
return|return
name|sec
operator|*
name|Q_INT64_C
argument_list|(
literal|1000000000
argument_list|)
operator|+
name|frac
return|;
block|}
end_function
begin_function
name|qint64
name|QElapsedTimer
operator|::
name|elapsed
parameter_list|()
specifier|const
name|Q_DECL_NOTHROW
block|{
name|qint64
name|sec
decl_stmt|,
name|frac
decl_stmt|;
return|return
name|elapsedAndRestart
argument_list|(
name|t1
argument_list|,
name|t2
argument_list|,
operator|&
name|sec
argument_list|,
operator|&
name|frac
argument_list|)
return|;
block|}
end_function
begin_function
name|qint64
name|QElapsedTimer
operator|::
name|msecsSinceReference
parameter_list|()
specifier|const
name|Q_DECL_NOTHROW
block|{
return|return
name|t1
operator|*
name|Q_INT64_C
argument_list|(
literal|1000
argument_list|)
operator|+
name|t2
operator|/
name|fractionAdjustment
argument_list|()
return|;
block|}
end_function
begin_function
name|qint64
name|QElapsedTimer
operator|::
name|msecsTo
parameter_list|(
specifier|const
name|QElapsedTimer
modifier|&
name|other
parameter_list|)
specifier|const
name|Q_DECL_NOTHROW
block|{
name|qint64
name|secs
init|=
name|other
operator|.
name|t1
operator|-
name|t1
decl_stmt|;
name|qint64
name|fraction
init|=
name|other
operator|.
name|t2
operator|-
name|t2
decl_stmt|;
return|return
name|secs
operator|*
name|Q_INT64_C
argument_list|(
literal|1000
argument_list|)
operator|+
name|fraction
operator|/
name|fractionAdjustment
argument_list|()
return|;
block|}
end_function
begin_function
name|qint64
name|QElapsedTimer
operator|::
name|secsTo
parameter_list|(
specifier|const
name|QElapsedTimer
modifier|&
name|other
parameter_list|)
specifier|const
name|Q_DECL_NOTHROW
block|{
return|return
name|other
operator|.
name|t1
operator|-
name|t1
return|;
block|}
end_function
begin_function
name|bool
name|operator
name|<
parameter_list|(
specifier|const
name|QElapsedTimer
modifier|&
name|v1
parameter_list|,
specifier|const
name|QElapsedTimer
modifier|&
name|v2
parameter_list|)
name|Q_DECL_NOTHROW
block|{
return|return
name|v1
operator|.
name|t1
operator|<
name|v2
operator|.
name|t1
operator|||
operator|(
name|v1
operator|.
name|t1
operator|==
name|v2
operator|.
name|t1
operator|&&
name|v1
operator|.
name|t2
operator|<
name|v2
operator|.
name|t2
operator|)
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
