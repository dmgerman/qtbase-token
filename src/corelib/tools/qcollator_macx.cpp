begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Aleix Pol Gonzalez<aleixpol@kde.org> ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qcollator_p.h"
end_include
begin_include
include|#
directive|include
file|"qstringlist.h"
end_include
begin_include
include|#
directive|include
file|"qstring.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/private/qcore_mac_p.h>
end_include
begin_include
include|#
directive|include
file|<CoreFoundation/CoreFoundation.h>
end_include
begin_include
include|#
directive|include
file|<CoreFoundation/CFLocale.h>
end_include
begin_include
include|#
directive|include
file|<cstring>
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|init
name|void
name|QCollatorPrivate
operator|::
name|init
parameter_list|()
block|{
name|cleanup
argument_list|()
expr_stmt|;
name|LocaleRef
name|localeRef
decl_stmt|;
name|int
name|rc
init|=
name|LocaleRefFromLocaleString
argument_list|(
name|locale
operator|.
name|bcp47Name
argument_list|()
operator|.
name|toLocal8Bit
argument_list|()
argument_list|,
operator|&
name|localeRef
argument_list|)
decl_stmt|;
if|if
condition|(
name|rc
operator|!=
literal|0
condition|)
name|qWarning
argument_list|()
operator|<<
literal|"couldn't initialize the locale"
expr_stmt|;
name|UInt32
name|options
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|caseSensitivity
operator|==
name|Qt
operator|::
name|CaseInsensitive
condition|)
name|options
operator||=
name|kUCCollateCaseInsensitiveMask
expr_stmt|;
if|if
condition|(
name|numericMode
condition|)
name|options
operator||=
name|kUCCollateDigitsAsNumberMask
expr_stmt|;
if|if
condition|(
name|ignorePunctuation
condition|)
name|options
operator||=
name|kUCCollatePunctuationSignificantMask
expr_stmt|;
name|OSStatus
name|status
init|=
name|UCCreateCollator
argument_list|(
name|localeRef
argument_list|,
literal|0
argument_list|,
name|options
argument_list|,
operator|&
name|collator
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|!=
literal|0
condition|)
name|qWarning
argument_list|()
operator|<<
literal|"Couldn't initialize the collator"
expr_stmt|;
name|dirty
operator|=
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanup
name|void
name|QCollatorPrivate
operator|::
name|cleanup
parameter_list|()
block|{
if|if
condition|(
name|collator
condition|)
name|UCDisposeCollator
argument_list|(
operator|&
name|collator
argument_list|)
expr_stmt|;
name|collator
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|compare
name|int
name|QCollator
operator|::
name|compare
parameter_list|(
specifier|const
name|QChar
modifier|*
name|s1
parameter_list|,
name|int
name|len1
parameter_list|,
specifier|const
name|QChar
modifier|*
name|s2
parameter_list|,
name|int
name|len2
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|d
operator|->
name|dirty
condition|)
name|d
operator|->
name|init
argument_list|()
expr_stmt|;
name|SInt32
name|result
decl_stmt|;
name|Boolean
name|equivalent
decl_stmt|;
name|UCCompareText
argument_list|(
name|d
operator|->
name|collator
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|UniChar
operator|*
argument_list|>
argument_list|(
name|s1
argument_list|)
argument_list|,
name|len1
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|UniChar
operator|*
argument_list|>
argument_list|(
name|s2
argument_list|)
argument_list|,
name|len2
argument_list|,
operator|&
name|equivalent
argument_list|,
operator|&
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|equivalent
condition|)
return|return
literal|0
return|;
return|return
name|result
operator|<
literal|0
condition|?
operator|-
literal|1
else|:
literal|1
return|;
block|}
end_function
begin_function
DECL|function|compare
name|int
name|QCollator
operator|::
name|compare
parameter_list|(
specifier|const
name|QString
modifier|&
name|str1
parameter_list|,
specifier|const
name|QString
modifier|&
name|str2
parameter_list|)
specifier|const
block|{
return|return
name|compare
argument_list|(
name|str1
operator|.
name|constData
argument_list|()
argument_list|,
name|str1
operator|.
name|size
argument_list|()
argument_list|,
name|str2
operator|.
name|constData
argument_list|()
argument_list|,
name|str2
operator|.
name|size
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|compare
name|int
name|QCollator
operator|::
name|compare
parameter_list|(
specifier|const
name|QStringRef
modifier|&
name|s1
parameter_list|,
specifier|const
name|QStringRef
modifier|&
name|s2
parameter_list|)
specifier|const
block|{
return|return
name|compare
argument_list|(
name|s1
operator|.
name|constData
argument_list|()
argument_list|,
name|s1
operator|.
name|size
argument_list|()
argument_list|,
name|s2
operator|.
name|constData
argument_list|()
argument_list|,
name|s2
operator|.
name|size
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|sortKey
name|QCollatorSortKey
name|QCollator
operator|::
name|sortKey
parameter_list|(
specifier|const
name|QString
modifier|&
name|string
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|d
operator|->
name|dirty
condition|)
name|d
operator|->
name|init
argument_list|()
expr_stmt|;
comment|//Documentation recommends having it 5 times as big as the input
name|QVector
argument_list|<
name|UCCollationValue
argument_list|>
name|ret
argument_list|(
name|string
operator|.
name|size
argument_list|()
operator|*
literal|5
argument_list|)
decl_stmt|;
name|ItemCount
name|actualSize
decl_stmt|;
name|int
name|status
init|=
name|UCGetCollationKey
argument_list|(
name|d
operator|->
name|collator
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|UniChar
operator|*
argument_list|>
argument_list|(
name|string
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|,
name|string
operator|.
name|count
argument_list|()
argument_list|,
name|ret
operator|.
name|size
argument_list|()
argument_list|,
operator|&
name|actualSize
argument_list|,
name|ret
operator|.
name|data
argument_list|()
argument_list|)
decl_stmt|;
name|ret
operator|.
name|resize
argument_list|(
name|actualSize
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
operator|==
name|kUCOutputBufferTooSmall
condition|)
block|{
name|UCGetCollationKey
argument_list|(
name|d
operator|->
name|collator
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|UniChar
operator|*
argument_list|>
argument_list|(
name|string
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|,
name|string
operator|.
name|count
argument_list|()
argument_list|,
name|ret
operator|.
name|size
argument_list|()
argument_list|,
operator|&
name|actualSize
argument_list|,
name|ret
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ret
index|[
name|actualSize
index|]
operator|=
literal|0
expr_stmt|;
return|return
name|QCollatorSortKey
argument_list|(
operator|new
name|QCollatorSortKeyPrivate
argument_list|(
name|ret
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|compare
name|int
name|QCollatorSortKey
operator|::
name|compare
parameter_list|(
specifier|const
name|QCollatorSortKey
modifier|&
name|key
parameter_list|)
specifier|const
block|{
name|SInt32
name|order
decl_stmt|;
name|UCCompareCollationKeys
argument_list|(
name|d
operator|->
name|m_key
operator|.
name|data
argument_list|()
argument_list|,
name|d
operator|->
name|m_key
operator|.
name|size
argument_list|()
argument_list|,
name|key
operator|.
name|d
operator|->
name|m_key
operator|.
name|data
argument_list|()
argument_list|,
name|key
operator|.
name|d
operator|->
name|m_key
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|,
operator|&
name|order
argument_list|)
expr_stmt|;
return|return
name|order
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
