begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qelapsedtimer.h"
end_include
begin_include
include|#
directive|include
file|"qdatetime.h"
end_include
begin_function
name|QT_BEGIN_NAMESPACE
comment|/*!     Returns the clock type that this QElapsedTimer implementation uses.      \sa isMonotonic() */
DECL|function|clockType
name|QElapsedTimer
operator|::
name|ClockType
name|QElapsedTimer
operator|::
name|clockType
parameter_list|()
block|{
return|return
name|SystemTime
return|;
block|}
end_function
begin_comment
comment|/*!     Returns true if this is a monotonic clock, false otherwise. See the     information on the different clock types to understand which ones are     monotonic.      \sa clockType(), QElapsedTimer::ClockType */
end_comment
begin_function
DECL|function|isMonotonic
name|bool
name|QElapsedTimer
operator|::
name|isMonotonic
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/*!     Starts this timer. Once started, a timer value can be checked with elapsed() or msecsSinceReference().      Normally, a timer is started just before a lengthy operation, such as:     \snippet doc/src/snippets/qelapsedtimer/main.cpp 0      Also, starting a timer makes it valid again.      \sa restart(), invalidate(), elapsed() */
end_comment
begin_function
DECL|function|start
name|void
name|QElapsedTimer
operator|::
name|start
parameter_list|()
block|{
name|restart
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Restarts the timer and returns the time elapsed since the previous start.     This function is equivalent to obtaining the elapsed time with elapsed()     and then starting the timer again with restart(), but it does so in one     single operation, avoiding the need to obtain the clock value twice.      The following example illustrates how to use this function to calibrate a     parameter to a slow operation (for example, an iteration count) so that     this operation takes at least 250 milliseconds:      \snippet doc/src/snippets/qelapsedtimer/main.cpp 3      \sa start(), invalidate(), elapsed() */
end_comment
begin_function
DECL|function|restart
name|qint64
name|QElapsedTimer
operator|::
name|restart
parameter_list|()
block|{
name|qint64
name|old
init|=
name|t1
decl_stmt|;
name|t1
operator|=
name|QDateTime
operator|::
name|currentMSecsSinceEpoch
argument_list|()
expr_stmt|;
name|t2
operator|=
literal|0
expr_stmt|;
return|return
name|t1
operator|-
name|old
return|;
block|}
end_function
begin_comment
comment|/*! \since 4.8      Returns the number of nanoseconds since this QElapsedTimer was last     started. Calling this function in a QElapsedTimer that was invalidated     will result in undefined results.      On platforms that do not provide nanosecond resolution, the value returned     will be the best estimate available.      \sa start(), restart(), hasExpired(), invalidate() */
end_comment
begin_function
DECL|function|nsecsElapsed
name|qint64
name|QElapsedTimer
operator|::
name|nsecsElapsed
parameter_list|()
specifier|const
block|{
return|return
name|elapsed
argument_list|()
operator|*
literal|1000000
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the number of milliseconds since this QElapsedTimer was last     started. Calling this function in a QElapsedTimer that was invalidated     will result in undefined results.      \sa start(), restart(), hasExpired(), invalidate() */
end_comment
begin_function
DECL|function|elapsed
name|qint64
name|QElapsedTimer
operator|::
name|elapsed
parameter_list|()
specifier|const
block|{
return|return
name|QDateTime
operator|::
name|currentMSecsSinceEpoch
argument_list|()
operator|-
name|t1
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the number of milliseconds between last time this QElapsedTimer     object was started and its reference clock's start.      This number is usually arbitrary for all clocks except the     QElapsedTimer::SystemTime clock. For that clock type, this number is the     number of milliseconds since January 1st, 1970 at 0:00 UTC (that is, it     is the Unix time expressed in milliseconds).      \sa clockType(), elapsed() */
end_comment
begin_function
DECL|function|msecsSinceReference
name|qint64
name|QElapsedTimer
operator|::
name|msecsSinceReference
parameter_list|()
specifier|const
block|{
return|return
name|t1
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the number of milliseconds between this QElapsedTimer and \a     other. If \a other was started before this object, the returned value     will be positive. If it was started later, the returned value will be     negative.      The return value is undefined if this object or \a other were invalidated.      \sa secsTo(), elapsed() */
end_comment
begin_function
DECL|function|msecsTo
name|qint64
name|QElapsedTimer
operator|::
name|msecsTo
parameter_list|(
specifier|const
name|QElapsedTimer
modifier|&
name|other
parameter_list|)
specifier|const
block|{
name|qint64
name|diff
init|=
name|other
operator|.
name|t1
operator|-
name|t1
decl_stmt|;
return|return
name|diff
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the number of seconds between this QElapsedTimer and \a other. If     \a other was started before this object, the returned value will be     positive. If it was started later, the returned value will be negative.      The return value is undefined if this object or \a other were invalidated.      \sa msecsTo(), elapsed() */
end_comment
begin_function
DECL|function|secsTo
name|qint64
name|QElapsedTimer
operator|::
name|secsTo
parameter_list|(
specifier|const
name|QElapsedTimer
modifier|&
name|other
parameter_list|)
specifier|const
block|{
return|return
name|msecsTo
argument_list|(
name|other
argument_list|)
operator|/
literal|1000
return|;
block|}
end_function
begin_comment
comment|/*!     \relates QElapsedTimer      Returns true if \a v1 was started before \a v2, false otherwise.      The returned value is undefined if one of the two parameters is invalid     and the other isn't. However, two invalid timers are equal and thus this     function will return false. */
end_comment
begin_function
DECL|function|operator <
name|bool
name|operator
name|<
parameter_list|(
specifier|const
name|QElapsedTimer
modifier|&
name|v1
parameter_list|,
specifier|const
name|QElapsedTimer
modifier|&
name|v2
parameter_list|)
block|{
return|return
name|v1
operator|.
name|t1
operator|<
name|v2
operator|.
name|t1
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
