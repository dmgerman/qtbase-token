begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 John Layt<jlayt@kde.org> ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qtimezone.h"
end_include
begin_include
include|#
directive|include
file|"qtimezoneprivate_p.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/qdatetime.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_function
name|QT_BEGIN_NAMESPACE
comment|// Create default time zone using appropriate backend
DECL|function|newBackendTimeZone
specifier|static
name|QTimeZonePrivate
modifier|*
name|newBackendTimeZone
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|QT_NO_SYSTEMLOCALE
ifdef|#
directive|ifdef
name|QT_USE_ICU
return|return
operator|new
name|QIcuTimeZonePrivate
argument_list|()
return|;
else|#
directive|else
return|return
operator|new
name|QUtcTimeZonePrivate
argument_list|()
return|;
endif|#
directive|endif
comment|// QT_USE_ICU
else|#
directive|else
if|#
directive|if
name|defined
name|Q_OS_MAC
return|return
operator|new
name|QMacTimeZonePrivate
argument_list|()
return|;
elif|#
directive|elif
name|defined
name|Q_OS_UNIX
return|return
operator|new
name|QTzTimeZonePrivate
argument_list|()
return|;
elif|#
directive|elif
name|defined
name|Q_OS_WIN
return|return
operator|new
name|QWinTimeZonePrivate
argument_list|()
return|;
elif|#
directive|elif
name|defined
name|QT_USE_ICU
return|return
operator|new
name|QIcuTimeZonePrivate
argument_list|()
return|;
else|#
directive|else
return|return
operator|new
name|QUtcTimeZonePrivate
argument_list|()
return|;
endif|#
directive|endif
comment|// System Locales
endif|#
directive|endif
comment|// QT_NO_SYSTEMLOCALE
block|}
end_function
begin_comment
comment|// Create named time zone using appropriate backend
end_comment
begin_function
DECL|function|newBackendTimeZone
specifier|static
name|QTimeZonePrivate
modifier|*
name|newBackendTimeZone
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|olsenId
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_NO_SYSTEMLOCALE
ifdef|#
directive|ifdef
name|QT_USE_ICU
return|return
operator|new
name|QIcuTimeZonePrivate
argument_list|(
name|olsenId
argument_list|)
return|;
else|#
directive|else
return|return
operator|new
name|QUtcTimeZonePrivate
argument_list|(
name|olsenId
argument_list|)
return|;
endif|#
directive|endif
comment|// QT_USE_ICU
else|#
directive|else
if|#
directive|if
name|defined
name|Q_OS_MAC
return|return
operator|new
name|QMacTimeZonePrivate
argument_list|(
name|olsenId
argument_list|)
return|;
elif|#
directive|elif
name|defined
name|Q_OS_UNIX
return|return
operator|new
name|QTzTimeZonePrivate
argument_list|(
name|olsenId
argument_list|)
return|;
elif|#
directive|elif
name|defined
name|Q_OS_WIN
return|return
operator|new
name|QWinTimeZonePrivate
argument_list|(
name|olsenId
argument_list|)
return|;
elif|#
directive|elif
name|defined
name|QT_USE_ICU
return|return
operator|new
name|QIcuTimeZonePrivate
argument_list|(
name|olsenId
argument_list|)
return|;
else|#
directive|else
return|return
operator|new
name|QUtcTimeZonePrivate
argument_list|(
name|olsenId
argument_list|)
return|;
endif|#
directive|endif
comment|// System Locales
endif|#
directive|endif
comment|// QT_NO_SYSTEMLOCALE
block|}
end_function
begin_class
DECL|class|QTimeZoneSingleton
class|class
name|QTimeZoneSingleton
block|{
public|public:
DECL|function|QTimeZoneSingleton
name|QTimeZoneSingleton
parameter_list|()
member_init_list|:
name|backend
argument_list|(
name|newBackendTimeZone
argument_list|()
argument_list|)
block|{}
comment|// The backend_tz is the tz to use in static methods such as availableTimeZoneIds() and
comment|// isTimeZoneIdAvailable() and to create named Olsen time zones.  This is usually the host
comment|// system, but may be different if the host resources are insufficient or if
comment|// QT_NO_SYSTEMLOCALE is set.  A simple UTC backend is used if no alternative is available.
DECL|member|backend
name|QSharedDataPointer
argument_list|<
name|QTimeZonePrivate
argument_list|>
name|backend
decl_stmt|;
block|}
class|;
end_class
begin_expr_stmt
name|Q_GLOBAL_STATIC
argument_list|(
name|QTimeZoneSingleton
argument_list|,
name|global_tz
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|/*!     \class QTimeZone     \inmodule QtCore     \since 5.2     \brief The QTimeZone class converts between between UTC and local time in a            specific time zone.      \threadsafe      This class provides a stateless calculator for time zone conversions     between UTC and the local time in a specific time zone.  By default it uses     the host system time zone data to perform these conversions.      This class is primarily designed for use in QDateTime; most applications     will not need to access this class directly and should instead use     QDateTime with a Qt::TimeSpec of Qt::TimeZone.      \note For consistency with QDateTime, QTimeZone does not account for leap     seconds.      \section1      \section2 Olsen Time Zone IDs      QTimeZone uses the Olsen time zone IDs as defined in the IANA Time Zone     Database (http://www.iana.org/time-zones). This is to ensure a standard ID     across all supported platforms.  Most platforms support the Olsen IDs     and the IANA Database natively, but for Windows a mapping is required to     the native IDs.  See below for more details.      The Olsen IDs can and do change on a regular basis, and can vary depending     on how recently the host system data was updated.  As such you cannot rely     on any given ID existing on any host system.  You must use     availableTimeZoneIds() to determine what Olsen IDs are available.      \section2 UTC Offset Time Zones      A default UTC time zone backend is provided which is always guaranteed to     be available.  This provides a set of generic Offset From UTC time zones     in the range UTC-14:00 to UTC+14:00.  These time zones can be created     using either the standard ISO format names "UTC+00:00" as listed by     availableTimeZoneIds(), or using the number of offset seconds.      \section2 Windows Time Zones      Windows native time zone support is severely limited compared to the     standard IANA TZ Database.  Windows time zones cover larger geographic     areas and are thus less accurate in their conversions.  They also do not     support as much historic conversion data and so may only be accurate for     the current year.      QTimeZone uses a conversion table derived form the Unicode CLDR data to map     between Olsen IDs and Windows IDs.  Depending on your version of Windows     and Qt, this table may not be able to provide a valid conversion, in which     "UTC" will be returned.      QTimeZone provides a public API to use this conversion table.  The Windows ID     used is the Windows Registry Key for the time zone which is also the MS     Exchange EWS ID as well, but is different to the Time Zone Name (TZID) and     COD code used by MS Exchange in versions before 2007.      \section2 System Time Zone      QTimeZone does not support any concept of a system or default time zone.     If you require a QDateTime that uses the current system time zone at any     given moment then you should use a Qt::TimeSpec of Qt::LocalTime.      The method systemTimeZoneId() returns the current system Olsen time zone     ID which on OSX and Linux will always be correct.  On Windows this ID is     translated from the the Windows system ID using an internal translation     table and the user's selected country.  As a consequence there is a small     chance any Windows install may have IDs not known by Qt, in which case     "UTC" will be returned.      Creating a new QTimeZone instance using the system time zone ID will only     produce a fixed named copy of the time zone, it will not change if the     system time zone changes.      \section2 Time Zone Offsets      The difference between UTC and the local time in a time zone is expressed     as an offset in seconds from UTC, i.e. the number of seconds to add to UTC     to obtain the local time.  The total offset is comprised of two component     parts, the standard time offset and the daylight time offset.  The standard     time offset is the number of seconds to add to UTC to obtain standard time     in the time zone.  The daylight time offset is the number of seconds to add     to the standard time offset to obtain daylight time in the time zone.      Note that the standard and daylight offsets for a time zone may change over     time as countries have changed daylight time laws or even their standard     time offset.      \section2 License      This class includes data obtained from the CLDR data files under the terms     of the Unicode license.      \legalese     COPYRIGHT AND PERMISSION NOTICE      Copyright Â© 1991-2012 Unicode, Inc. All rights reserved. Distributed under     the Terms of Use in http://www.unicode.org/copyright.html.      Permission is hereby granted, free of charge, to any person obtaining a     copy of the Unicode data files and any associated documentation (the "Data     Files") or Unicode software and any associated documentation (the "Software")     to deal in the Data Files or Software without restriction, including without     limitation the rights to use, copy, modify, merge, publish, distribute, and/or     sell copies of the Data Files or Software, and to permit persons to whom the     Data Files or Software are furnished to do so, provided that (a) the above     copyright notice(s) and this permission notice appear with all copies of the     Data Files or Software, (b) both the above copyright notice(s) and this     permission notice appear in associated documentation, and (c) there is clear     notice in each modified Data File or in the Software as well as in the     documentation associated with the Data File(s) or Software that the data or     software has been modified.     \endlegalese      \sa QDateTime */
end_comment
begin_comment
comment|/*!     \enum QTimeZone::TimeType      The type of time zone time, for example when requesting the name.  In time     zones that do not apply daylight time, all three values may return the     same result.      \value StandardTime            The standard time in a time zone, i.e. when Daylight Savings is not            in effect.            For example when formatting a display name this will show something            like "Pacific Standard Time".     \value DaylightTime            A time when Daylight Savings is in effect.            For example when formatting a display name this will show something            like "Pacific daylight time".     \value GenericTime            A time which is not specifically Standard or Daylight time, either            an unknown time or a neutral form.            For example when formatting a display name this will show something            like "Pacific Time". */
end_comment
begin_comment
comment|/*!     \enum QTimeZone::NameType      The type of time zone name.      \value DefaultName            The default form of the time zone name, e.g. LongName, ShortName or OffsetName     \value LongName            The long form of the time zone name, e.g. "Central European Time"     \value ShortName            The short form of the time zone name, usually an abbreviation, e.g. "CET"     \value OffsetName            The standard ISO offset form of the time zone name, e.g. "UTC+01:00" */
end_comment
begin_comment
comment|/*!     \class QTimeZone::OffsetData     \inmodule QtCore      The time zone offset data for a given moment in time, i.e. the time zone     offsets and abbreviation to use at that moment in time.      \list     \li OffsetData::atUtc  The datetime of the offset data in UTC time.     \li OffsetData::offsetFromUtc  The total offset from UTC in effect at the datetime.     \li OffsetData::standardTimeOffset  The standard time offset component of the total offset.     \li OffsetData::daylightTimeOffset  The daylight time offset component of the total offset.     \li OffsetData::abbreviation  The abbreviation in effect at the datetime.     \endlist      For example, for time zone "Europe/Berlin" the OffsetDate in standard and daylight time might be:      \list     \li atUtc = QDateTime(QDate(2013, 1, 1), QTime(0, 0, 0), Qt::UTC)     \li offsetFromUtc = 3600     \li standardTimeOffset = 3600     \li daylightTimeOffset = 0     \li abbreviation = "CET"     \endlist      \list     \li atUtc = QDateTime(QDate(2013, 6, 1), QTime(0, 0, 0), Qt::UTC)     \li offsetFromUtc = 7200     \li standardTimeOffset = 3600     \li daylightTimeOffset = 3600     \li abbreviation = "CEST"     \endlist */
end_comment
begin_comment
comment|/*!     \typedef QTimeZone::OffsetDataList     \relates QTimeZone      Synonym for QList<OffsetData>. */
end_comment
begin_comment
comment|/*!     Create a null/invalid time zone instance. */
end_comment
begin_constructor
DECL|function|QTimeZone
name|QTimeZone
operator|::
name|QTimeZone
parameter_list|()
member_init_list|:
name|d
argument_list|(
literal|0
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Creates an instance of the requested time zone \a olsenId.      The ID must be one of the available system IDs otherwise an invalid     time zone will be returned.      \sa availableTimeZoneIds() */
end_comment
begin_constructor
DECL|function|QTimeZone
name|QTimeZone
operator|::
name|QTimeZone
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|olsenId
parameter_list|)
block|{
comment|// Try and see if it's a valid UTC offset ID, just as quick to try create as look-up
name|d
operator|=
operator|new
name|QUtcTimeZonePrivate
argument_list|(
name|olsenId
argument_list|)
expr_stmt|;
comment|// If not a valid UTC offset ID then try create it with the system backend
comment|// Relies on backend not creating valid tz with invalid name
if|if
condition|(
operator|!
name|d
operator|->
name|isValid
argument_list|()
condition|)
name|d
operator|=
name|newBackendTimeZone
argument_list|(
name|olsenId
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Creates an instance of a time zone with the requested Offset from UTC of     \a offsetSeconds.      The \a offsetSeconds from UTC must be in the range -14 hours to +14 hours     otherwise an invalid time zone will be returned. */
end_comment
begin_constructor
DECL|function|QTimeZone
name|QTimeZone
operator|::
name|QTimeZone
parameter_list|(
name|int
name|offsetSeconds
parameter_list|)
block|{
comment|// offsetSeconds must fall between -14:00 and +14:00 hours
if|if
condition|(
name|offsetSeconds
operator|>=
operator|-
literal|50400
operator|&&
name|offsetSeconds
operator|<=
literal|50400
condition|)
name|d
operator|=
operator|new
name|QUtcTimeZonePrivate
argument_list|(
name|offsetSeconds
argument_list|)
expr_stmt|;
else|else
name|d
operator|=
literal|0
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Creates a custom time zone with an ID of \a olsenId and an offset from UTC     of \a offsetSeconds.  The \a name will be the name used by displayName()     for the LongName, the \a abbreviation will be used by displayName() for the     ShortName and by abbreviation(), and the optional \a country will be used     by country().  The \a comment is an optional note that may be displayed in     a GUI to assist users in selecting a time zone.      The \a olsenId must not be one of the available system IDs returned by     availableTimeZoneIds().  The \a offsetSeconds from UTC must be in the range     -14 hours to +14 hours.      If the custom time zone does not have a specific country then set it to the     default value of QLocale::AnyCountry. */
end_comment
begin_constructor
DECL|function|QTimeZone
name|QTimeZone
operator|::
name|QTimeZone
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|olsenId
parameter_list|,
name|int
name|offsetSeconds
parameter_list|,
specifier|const
name|QString
modifier|&
name|name
parameter_list|,
specifier|const
name|QString
modifier|&
name|abbreviation
parameter_list|,
name|QLocale
operator|::
name|Country
name|country
parameter_list|,
specifier|const
name|QString
modifier|&
name|comment
parameter_list|)
block|{
comment|// olsenId must be a valid ID and must not clash with the standard system names
if|if
condition|(
name|QTimeZonePrivate
operator|::
name|isValidId
argument_list|(
name|olsenId
argument_list|)
operator|&&
operator|!
name|availableTimeZoneIds
argument_list|()
operator|.
name|contains
argument_list|(
name|olsenId
argument_list|)
condition|)
name|d
operator|=
operator|new
name|QUtcTimeZonePrivate
argument_list|(
name|olsenId
argument_list|,
name|offsetSeconds
argument_list|,
name|name
argument_list|,
name|abbreviation
argument_list|,
name|country
argument_list|,
name|comment
argument_list|)
expr_stmt|;
else|else
name|d
operator|=
literal|0
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     \internal      Private. Create time zone with given private backend */
end_comment
begin_constructor
DECL|function|QTimeZone
name|QTimeZone
operator|::
name|QTimeZone
parameter_list|(
name|QTimeZonePrivate
modifier|&
name|dd
parameter_list|)
member_init_list|:
name|d
argument_list|(
operator|&
name|dd
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Copy constructor, copy \a other to this. */
end_comment
begin_constructor
DECL|function|QTimeZone
name|QTimeZone
operator|::
name|QTimeZone
parameter_list|(
specifier|const
name|QTimeZone
modifier|&
name|other
parameter_list|)
member_init_list|:
name|d
argument_list|(
name|other
operator|.
name|d
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Destroys the time zone. */
end_comment
begin_destructor
DECL|function|~QTimeZone
name|QTimeZone
operator|::
name|~
name|QTimeZone
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     Assignment operator, assign \a other to this. */
end_comment
begin_function
DECL|function|operator =
name|QTimeZone
modifier|&
name|QTimeZone
operator|::
name|operator
name|=
parameter_list|(
specifier|const
name|QTimeZone
modifier|&
name|other
parameter_list|)
block|{
name|d
operator|=
name|other
operator|.
name|d
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_function
begin_comment
comment|/*!     Returns true if this time zone is equal to the \a other time zone. */
end_comment
begin_function
DECL|function|operator ==
name|bool
name|QTimeZone
operator|::
name|operator
name|==
parameter_list|(
specifier|const
name|QTimeZone
modifier|&
name|other
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|d
operator|&&
name|other
operator|.
name|d
condition|)
return|return
operator|(
operator|*
name|d
operator|==
operator|*
name|other
operator|.
name|d
operator|)
return|;
else|else
return|return
operator|(
name|d
operator|==
name|other
operator|.
name|d
operator|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns true if this time zone is not equal to the \a other time zone. */
end_comment
begin_function
DECL|function|operator !=
name|bool
name|QTimeZone
operator|::
name|operator
name|!=
parameter_list|(
specifier|const
name|QTimeZone
modifier|&
name|other
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|d
operator|&&
name|other
operator|.
name|d
condition|)
return|return
operator|(
operator|*
name|d
operator|!=
operator|*
name|other
operator|.
name|d
operator|)
return|;
else|else
return|return
operator|(
name|d
operator|!=
name|other
operator|.
name|d
operator|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns true if this time zone is valid. */
end_comment
begin_function
DECL|function|isValid
name|bool
name|QTimeZone
operator|::
name|isValid
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|d
condition|)
return|return
name|d
operator|->
name|isValid
argument_list|()
return|;
else|else
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the Olsen ID for the time zone.      Olsen IDs are used on all platforms.  On Windows these are translated     from the Windows ID into the closest Olsen ID for the time zone and country. */
end_comment
begin_function
DECL|function|id
name|QByteArray
name|QTimeZone
operator|::
name|id
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|d
condition|)
return|return
name|d
operator|->
name|id
argument_list|()
return|;
else|else
return|return
name|QByteArray
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the country for the time zone. */
end_comment
begin_function
DECL|function|country
name|QLocale
operator|::
name|Country
name|QTimeZone
operator|::
name|country
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|isValid
argument_list|()
condition|)
return|return
name|d
operator|->
name|country
argument_list|()
return|;
else|else
return|return
name|QLocale
operator|::
name|AnyCountry
return|;
block|}
end_function
begin_comment
comment|/*!     Returns any comment for the time zone.      A comment may be provided by the host platform to assist users in     choosing the correct time zone.  Depending on the platform this may not     be localized. */
end_comment
begin_function
DECL|function|comment
name|QString
name|QTimeZone
operator|::
name|comment
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|isValid
argument_list|()
condition|)
return|return
name|d
operator|->
name|comment
argument_list|()
return|;
else|else
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the localized time zone display name at the given \a atDateTime     for the given \a nameType in the given \a locale.  The \a nameType and     \a locale requested may not be supported on all platforms, in which case     the best available option will be returned.      If the \a locale is not provided then the application default locale will     be used.      The display name may change depending on daylight time or historical     events.      \sa abbreviation() */
end_comment
begin_function
DECL|function|displayName
name|QString
name|QTimeZone
operator|::
name|displayName
parameter_list|(
specifier|const
name|QDateTime
modifier|&
name|atDateTime
parameter_list|,
name|NameType
name|nameType
parameter_list|,
specifier|const
name|QLocale
modifier|&
name|locale
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|isValid
argument_list|()
condition|)
return|return
name|d
operator|->
name|displayName
argument_list|(
name|atDateTime
operator|.
name|toMSecsSinceEpoch
argument_list|()
argument_list|,
name|nameType
argument_list|,
name|locale
argument_list|)
return|;
else|else
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the localized time zone display name for the given \a timeType     and \a nameType in the given \a locale. The \a nameType and \a locale     requested may not be supported on all platforms, in which case the best     available option will be returned.      If the \a locale is not provided then the application default locale will     be used.      Where the time zone display names have changed over time then the most     recent names will be used.      \sa abbreviation() */
end_comment
begin_function
DECL|function|displayName
name|QString
name|QTimeZone
operator|::
name|displayName
parameter_list|(
name|TimeType
name|timeType
parameter_list|,
name|NameType
name|nameType
parameter_list|,
specifier|const
name|QLocale
modifier|&
name|locale
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|isValid
argument_list|()
condition|)
return|return
name|d
operator|->
name|displayName
argument_list|(
name|timeType
argument_list|,
name|nameType
argument_list|,
name|locale
argument_list|)
return|;
else|else
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the time zone abbreviation at the given \a atDateTime.  The     abbreviation may change depending on daylight time or even     historical events.      Note that the abbreviation is not guaranteed to be unique to this time zone     and should not be used in place of the ID or display name.      \sa displayName() */
end_comment
begin_function
DECL|function|abbreviation
name|QString
name|QTimeZone
operator|::
name|abbreviation
parameter_list|(
specifier|const
name|QDateTime
modifier|&
name|atDateTime
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|isValid
argument_list|()
condition|)
return|return
name|d
operator|->
name|abbreviation
argument_list|(
name|atDateTime
operator|.
name|toMSecsSinceEpoch
argument_list|()
argument_list|)
return|;
else|else
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the total effective offset at the given \a atDateTime, i.e. the     number of seconds to add to UTC to obtain the local time.  This includes     any daylight time offset that may be in effect, i.e. it is the sum of     standardTimeOffset() and daylightTimeOffset() for the given datetime.      For example, for the time zone "Europe/Berlin" the standard time offset is     +3600 seconds and the daylight time offset is +3600 seconds.  During standard     time offsetFromUtc() will return +3600 (UTC+01:00), and during daylight time     it will return +7200 (UTC+02:00).      \sa standardTimeOffset(), daylightTimeOffset() */
end_comment
begin_function
DECL|function|offsetFromUtc
name|int
name|QTimeZone
operator|::
name|offsetFromUtc
parameter_list|(
specifier|const
name|QDateTime
modifier|&
name|atDateTime
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|isValid
argument_list|()
condition|)
return|return
name|d
operator|->
name|offsetFromUtc
argument_list|(
name|atDateTime
operator|.
name|toMSecsSinceEpoch
argument_list|()
argument_list|)
return|;
else|else
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the standard time offset at the given \a atDateTime, i.e. the     number of seconds to add to UTC to obtain the local Standard Time.  This     excludes any daylight time offset that may be in effect.      For example, for the time zone "Europe/Berlin" the standard time offset is     +3600 seconds.  During both standard and daylight time offsetFromUtc() will     return +3600 (UTC+01:00).      \sa offsetFromUtc(), daylightTimeOffset() */
end_comment
begin_function
DECL|function|standardTimeOffset
name|int
name|QTimeZone
operator|::
name|standardTimeOffset
parameter_list|(
specifier|const
name|QDateTime
modifier|&
name|atDateTime
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|isValid
argument_list|()
condition|)
return|return
name|d
operator|->
name|standardTimeOffset
argument_list|(
name|atDateTime
operator|.
name|toMSecsSinceEpoch
argument_list|()
argument_list|)
return|;
else|else
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the daylight time offset at the given \a atDateTime, i.e. the     number of seconds to add to the standard time offset to obtain the local     daylight time.      For example, for the time zone "Europe/Berlin" the daylight time offset     is +3600 seconds.  During standard time daylightTimeOffset() will return     0, and during daylight time it will return +3600.      \sa offsetFromUtc(), standardTimeOffset() */
end_comment
begin_function
DECL|function|daylightTimeOffset
name|int
name|QTimeZone
operator|::
name|daylightTimeOffset
parameter_list|(
specifier|const
name|QDateTime
modifier|&
name|atDateTime
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|hasDaylightTime
argument_list|()
condition|)
return|return
name|d
operator|->
name|daylightTimeOffset
argument_list|(
name|atDateTime
operator|.
name|toMSecsSinceEpoch
argument_list|()
argument_list|)
return|;
else|else
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     Returns true if the time zone has observed daylight time at any time.      \sa isDaylightTime(), daylightTimeOffset() */
end_comment
begin_function
DECL|function|hasDaylightTime
name|bool
name|QTimeZone
operator|::
name|hasDaylightTime
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|isValid
argument_list|()
condition|)
return|return
name|d
operator|->
name|hasDaylightTime
argument_list|()
return|;
else|else
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/*!     Returns true if the given \a atDateTime is in daylight time.      \sa hasDaylightTime(), daylightTimeOffset() */
end_comment
begin_function
DECL|function|isDaylightTime
name|bool
name|QTimeZone
operator|::
name|isDaylightTime
parameter_list|(
specifier|const
name|QDateTime
modifier|&
name|atDateTime
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|hasDaylightTime
argument_list|()
condition|)
return|return
name|d
operator|->
name|isDaylightTime
argument_list|(
name|atDateTime
operator|.
name|toMSecsSinceEpoch
argument_list|()
argument_list|)
return|;
else|else
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the effective offset details at the given \a forDateTime. This is     the equivalent of calling offsetFromUtc(), abbreviation(), etc individually but is     more efficient.      \sa offsetFromUtc(), standardTimeOffset(), daylightTimeOffset(), abbreviation() */
end_comment
begin_function
DECL|function|offsetData
name|QTimeZone
operator|::
name|OffsetData
name|QTimeZone
operator|::
name|offsetData
parameter_list|(
specifier|const
name|QDateTime
modifier|&
name|forDateTime
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|hasTransitions
argument_list|()
condition|)
return|return
name|d
operator|->
name|toOffsetData
argument_list|(
name|d
operator|->
name|data
argument_list|(
name|forDateTime
operator|.
name|toMSecsSinceEpoch
argument_list|()
argument_list|)
argument_list|)
return|;
else|else
return|return
name|d
operator|->
name|invalidOffsetData
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns true if the system backend supports obtaining transitions. */
end_comment
begin_function
DECL|function|hasTransitions
name|bool
name|QTimeZone
operator|::
name|hasTransitions
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|isValid
argument_list|()
condition|)
return|return
name|d
operator|->
name|hasTransitions
argument_list|()
return|;
else|else
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the first time zone Transition after the given \a afterDateTime.     This is most useful when you have a Transition time and wish to find the     Transition after it.      The given \a afterDateTime is exclusive.      \sa hasTransitions(), previousTransition(), transitions() */
end_comment
begin_function
DECL|function|nextTransition
name|QTimeZone
operator|::
name|OffsetData
name|QTimeZone
operator|::
name|nextTransition
parameter_list|(
specifier|const
name|QDateTime
modifier|&
name|afterDateTime
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|hasTransitions
argument_list|()
condition|)
return|return
name|d
operator|->
name|toOffsetData
argument_list|(
name|d
operator|->
name|nextTransition
argument_list|(
name|afterDateTime
operator|.
name|toMSecsSinceEpoch
argument_list|()
argument_list|)
argument_list|)
return|;
else|else
return|return
name|d
operator|->
name|invalidOffsetData
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the first time zone Transition before the given \a beforeDateTime.     This is most useful when you have a Transition time and wish to find the     Transition before it.      The given \a beforeDateTime is exclusive.      \sa hasTransitions(), nextTransition(), transitions() */
end_comment
begin_function
DECL|function|previousTransition
name|QTimeZone
operator|::
name|OffsetData
name|QTimeZone
operator|::
name|previousTransition
parameter_list|(
specifier|const
name|QDateTime
modifier|&
name|beforeDateTime
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|hasTransitions
argument_list|()
condition|)
return|return
name|d
operator|->
name|toOffsetData
argument_list|(
name|d
operator|->
name|previousTransition
argument_list|(
name|beforeDateTime
operator|.
name|toMSecsSinceEpoch
argument_list|()
argument_list|)
argument_list|)
return|;
else|else
return|return
name|d
operator|->
name|invalidOffsetData
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns a list of all time zone transitions between the given datetimes.      The given \a fromDateTime and \a toDateTime are inclusive.      \sa hasTransitions(), nextTransition(), previousTransition() */
end_comment
begin_function
DECL|function|transitions
name|QTimeZone
operator|::
name|OffsetDataList
name|QTimeZone
operator|::
name|transitions
parameter_list|(
specifier|const
name|QDateTime
modifier|&
name|fromDateTime
parameter_list|,
specifier|const
name|QDateTime
modifier|&
name|toDateTime
parameter_list|)
specifier|const
block|{
name|OffsetDataList
name|list
decl_stmt|;
if|if
condition|(
name|hasTransitions
argument_list|()
condition|)
block|{
name|QTimeZonePrivate
operator|::
name|DataList
name|plist
init|=
name|d
operator|->
name|transitions
argument_list|(
name|fromDateTime
operator|.
name|toMSecsSinceEpoch
argument_list|()
argument_list|,
name|toDateTime
operator|.
name|toMSecsSinceEpoch
argument_list|()
argument_list|)
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QTimeZonePrivate
operator|::
name|Data
modifier|&
name|pdata
decl|,
name|plist
control|)
name|list
operator|.
name|append
argument_list|(
name|d
operator|->
name|toOffsetData
argument_list|(
name|pdata
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
end_function
begin_comment
comment|// Static methods
end_comment
begin_comment
comment|/*!     Returns the current system time zone Olsen ID.      On Windows this ID is translated from the the Windows ID using an internal     translation table and the user's selected country.  As a consequence there     is a small chance any Windows install may have IDs not known by Qt, in     which case "UTC" will be returned. */
end_comment
begin_function
DECL|function|systemTimeZoneId
name|QByteArray
name|QTimeZone
operator|::
name|systemTimeZoneId
parameter_list|()
block|{
return|return
name|global_tz
operator|->
name|backend
operator|->
name|systemTimeZoneId
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns true if a given time zone \a olsenId is available on this system.      \sa availableTimeZoneIds() */
end_comment
begin_function
DECL|function|isTimeZoneIdAvailable
name|bool
name|QTimeZone
operator|::
name|isTimeZoneIdAvailable
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|olsenId
parameter_list|)
block|{
comment|// isValidId is not strictly required, but faster to weed out invalid
comment|// IDs as availableTimeZoneIds() may be slow
return|return
operator|(
name|QTimeZonePrivate
operator|::
name|isValidId
argument_list|(
name|olsenId
argument_list|)
operator|&&
operator|(
name|availableTimeZoneIds
argument_list|()
operator|.
name|contains
argument_list|(
name|olsenId
argument_list|)
operator|)
operator|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns a list of all available Olsen time zone IDs on this system.      \sa isTimeZoneIdAvailable() */
end_comment
begin_function
DECL|function|availableTimeZoneIds
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|QTimeZone
operator|::
name|availableTimeZoneIds
parameter_list|()
block|{
name|QSet
argument_list|<
name|QByteArray
argument_list|>
name|set
init|=
name|QUtcTimeZonePrivate
argument_list|()
operator|.
name|availableTimeZoneIds
argument_list|()
operator|+
name|global_tz
operator|->
name|backend
operator|->
name|availableTimeZoneIds
argument_list|()
decl_stmt|;
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|list
init|=
name|set
operator|.
name|toList
argument_list|()
decl_stmt|;
name|qSort
argument_list|(
name|list
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
end_function
begin_comment
comment|/*!     Returns a list of all available Olsen time zone IDs for a given \a country.      As a special case, a \a country of Qt::AnyCountry returns those time zones     that do not have any country related to them, such as UTC.  If you require     a list of all time zone IDs for all countries then use the standard     availableTimeZoneIds() method.      \sa isTimeZoneIdAvailable() */
end_comment
begin_function
DECL|function|availableTimeZoneIds
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|QTimeZone
operator|::
name|availableTimeZoneIds
parameter_list|(
name|QLocale
operator|::
name|Country
name|country
parameter_list|)
block|{
name|QSet
argument_list|<
name|QByteArray
argument_list|>
name|set
init|=
name|QUtcTimeZonePrivate
argument_list|()
operator|.
name|availableTimeZoneIds
argument_list|(
name|country
argument_list|)
operator|+
name|global_tz
operator|->
name|backend
operator|->
name|availableTimeZoneIds
argument_list|(
name|country
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|list
init|=
name|set
operator|.
name|toList
argument_list|()
decl_stmt|;
name|qSort
argument_list|(
name|list
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
end_function
begin_comment
comment|/*!     Returns a list of all available Olsen time zone IDs with a given standard     time offset of \a offsetSeconds.      \sa isTimeZoneIdAvailable() */
end_comment
begin_function
DECL|function|availableTimeZoneIds
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|QTimeZone
operator|::
name|availableTimeZoneIds
parameter_list|(
name|int
name|offsetSeconds
parameter_list|)
block|{
name|QSet
argument_list|<
name|QByteArray
argument_list|>
name|set
init|=
name|QUtcTimeZonePrivate
argument_list|()
operator|.
name|availableTimeZoneIds
argument_list|(
name|offsetSeconds
argument_list|)
operator|+
name|global_tz
operator|->
name|backend
operator|->
name|availableTimeZoneIds
argument_list|(
name|offsetSeconds
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|list
init|=
name|set
operator|.
name|toList
argument_list|()
decl_stmt|;
name|qSort
argument_list|(
name|list
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the Windows ID equivalent to the given \a olsenId.      \sa windowsIdToDefaultOlsenId(), windowsIdToOlsenIds() */
end_comment
begin_function
DECL|function|olsenIdToWindowsId
name|QByteArray
name|QTimeZone
operator|::
name|olsenIdToWindowsId
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|olsenId
parameter_list|)
block|{
return|return
name|QTimeZonePrivate
operator|::
name|olsenIdToWindowsId
argument_list|(
name|olsenId
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the default Olsen ID for a given \a windowsId.      Because a Windows ID can cover several Olsen IDs in several different     countries, this function returns the most frequently used Olsen ID with no     regard for the country and should thus be used with care.  It is usually     best to request the default for a specific country.      \sa olsenIdToWindowsId(), windowsIdToOlsenIds() */
end_comment
begin_function
DECL|function|windowsIdToDefaultOlsenId
name|QByteArray
name|QTimeZone
operator|::
name|windowsIdToDefaultOlsenId
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|windowsId
parameter_list|)
block|{
return|return
name|QTimeZonePrivate
operator|::
name|windowsIdToDefaultOlsenId
argument_list|(
name|windowsId
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the default Olsen ID for a given \a windowsId and \a country.      Because a Windows ID can cover several Olsen IDs within a given country,     the most frequently used Olsen ID in that country is returned.      As a special case, QLocale::AnyCountry returns the default of those Olsen IDs     that do not have any specific country.      \sa olsenIdToWindowsId(), windowsIdToOlsenIds() */
end_comment
begin_function
DECL|function|windowsIdToDefaultOlsenId
name|QByteArray
name|QTimeZone
operator|::
name|windowsIdToDefaultOlsenId
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|windowsId
parameter_list|,
name|QLocale
operator|::
name|Country
name|country
parameter_list|)
block|{
return|return
name|QTimeZonePrivate
operator|::
name|windowsIdToDefaultOlsenId
argument_list|(
name|windowsId
argument_list|,
name|country
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns all the Olsen IDs for a given \a windowsId.      The returned list is sorted alphabetically.      \sa olsenIdToWindowsId(), windowsIdToDefaultOlsenId() */
end_comment
begin_function
DECL|function|windowsIdToOlsenIds
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|QTimeZone
operator|::
name|windowsIdToOlsenIds
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|windowsId
parameter_list|)
block|{
return|return
name|QTimeZonePrivate
operator|::
name|windowsIdToOlsenIds
argument_list|(
name|windowsId
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns all the Olsen IDs for a given \a windowsId and \a country.      As a special case QLocale::AnyCountry returns those Olsen IDs that do     not have any specific country.      The returned list is in order of frequency of usage, i.e. larger zones     within a country are listed first.      \sa olsenIdToWindowsId(), windowsIdToDefaultOlsenId() */
end_comment
begin_function
DECL|function|windowsIdToOlsenIds
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|QTimeZone
operator|::
name|windowsIdToOlsenIds
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|windowsId
parameter_list|,
name|QLocale
operator|::
name|Country
name|country
parameter_list|)
block|{
return|return
name|QTimeZonePrivate
operator|::
name|windowsIdToOlsenIds
argument_list|(
name|windowsId
argument_list|,
name|country
argument_list|)
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DATASTREAM
end_ifndef
begin_function
DECL|function|operator <<
name|QDataStream
modifier|&
name|operator
name|<<
parameter_list|(
name|QDataStream
modifier|&
name|ds
parameter_list|,
specifier|const
name|QTimeZone
modifier|&
name|tz
parameter_list|)
block|{
name|tz
operator|.
name|d
operator|->
name|serialize
argument_list|(
name|ds
argument_list|)
expr_stmt|;
return|return
name|ds
return|;
block|}
end_function
begin_function
DECL|function|operator >>
name|QDataStream
modifier|&
name|operator
name|>>
parameter_list|(
name|QDataStream
modifier|&
name|ds
parameter_list|,
name|QTimeZone
modifier|&
name|tz
parameter_list|)
block|{
name|QString
name|olsenId
decl_stmt|;
name|ds
operator|>>
name|olsenId
expr_stmt|;
if|if
condition|(
name|olsenId
operator|==
name|QStringLiteral
argument_list|(
literal|"OffsetFromUtc"
argument_list|)
condition|)
block|{
name|int
name|utcOffset
decl_stmt|;
name|QString
name|name
decl_stmt|;
name|QString
name|abbreviation
decl_stmt|;
name|int
name|country
decl_stmt|;
name|QString
name|comment
decl_stmt|;
name|ds
operator|>>
name|olsenId
operator|>>
name|utcOffset
operator|>>
name|name
operator|>>
name|abbreviation
operator|>>
name|country
operator|>>
name|comment
expr_stmt|;
name|tz
operator|=
name|QTimeZone
argument_list|(
name|olsenId
operator|.
name|toUtf8
argument_list|()
argument_list|,
name|utcOffset
argument_list|,
name|name
argument_list|,
name|abbreviation
argument_list|,
operator|(
name|QLocale
operator|::
name|Country
operator|)
name|country
argument_list|,
name|comment
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tz
operator|=
name|QTimeZone
argument_list|(
name|olsenId
operator|.
name|toUtf8
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ds
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DATASTREAM
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DEBUG_STREAM
end_ifndef
begin_function
DECL|function|operator <<
name|QDebug
name|operator
name|<<
parameter_list|(
name|QDebug
name|dbg
parameter_list|,
specifier|const
name|QTimeZone
modifier|&
name|tz
parameter_list|)
block|{
comment|//TODO Include backend and data version details?
name|dbg
operator|.
name|nospace
argument_list|()
operator|<<
name|QStringLiteral
argument_list|(
literal|"QTimeZone("
argument_list|)
operator|<<
name|qPrintable
argument_list|(
name|QString
operator|::
name|fromUtf8
argument_list|(
name|tz
operator|.
name|id
argument_list|()
argument_list|)
argument_list|)
operator|<<
literal|')'
expr_stmt|;
return|return
name|dbg
operator|.
name|space
argument_list|()
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
