begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QLINKEDLIST_H
end_ifndef
begin_define
DECL|macro|QLINKEDLIST_H
define|#
directive|define
name|QLINKEDLIST_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qiterator.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qrefcount.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_STL
end_ifndef
begin_include
include|#
directive|include
file|<iterator>
end_include
begin_include
include|#
directive|include
file|<list>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
expr|struct
DECL|struct|QLinkedListData
name|Q_CORE_EXPORT
name|QLinkedListData
block|{
DECL|member|n
DECL|member|p
name|QLinkedListData
operator|*
name|n
block|,
operator|*
name|p
block|;
DECL|member|ref
name|QtPrivate
operator|::
name|RefCount
name|ref
block|;
DECL|member|size
name|int
name|size
block|;
DECL|member|sharable
name|uint
name|sharable
operator|:
literal|1
block|;
DECL|member|shared_null
specifier|static
specifier|const
name|QLinkedListData
name|shared_null
block|; }
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
DECL|struct|QLinkedListNode
name|QLinkedListNode
block|{
DECL|function|QLinkedListNode
specifier|inline
name|QLinkedListNode
argument_list|(
specifier|const
name|T
operator|&
name|arg
argument_list|)
operator|:
name|t
argument_list|(
argument|arg
argument_list|)
block|{ }
DECL|member|n
DECL|member|p
name|QLinkedListNode
operator|*
name|n
block|,
operator|*
name|p
block|;
DECL|member|t
name|T
name|t
block|; }
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|class
name|QLinkedList
block|{
typedef|typedef
name|QLinkedListNode
operator|<
name|T
operator|>
name|Node
expr_stmt|;
block|union
block|{
name|QLinkedListData
operator|*
name|d
block|;
name|QLinkedListNode
operator|<
name|T
operator|>
operator|*
name|e
block|; }
expr_stmt|;
end_expr_stmt
begin_label
name|public
label|:
end_label
begin_expr_stmt
specifier|inline
name|QLinkedList
argument_list|()
operator|:
name|d
argument_list|(
argument|const_cast<QLinkedListData *>(&QLinkedListData::shared_null)
argument_list|)
block|{ }
specifier|inline
name|QLinkedList
argument_list|(
specifier|const
name|QLinkedList
operator|<
name|T
operator|>
operator|&
name|l
argument_list|)
operator|:
name|d
argument_list|(
argument|l.d
argument_list|)
block|{
name|d
operator|->
name|ref
operator|.
name|ref
argument_list|()
block|;
if|if
condition|(
operator|!
name|d
operator|->
name|sharable
condition|)
name|detach
argument_list|()
expr_stmt|;
block|}
end_expr_stmt
begin_expr_stmt
operator|~
name|QLinkedList
argument_list|()
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QLinkedList
operator|<
name|T
operator|>
operator|&
name|operator
operator|=
operator|(
specifier|const
name|QLinkedList
operator|<
name|T
operator|>
operator|&
operator|)
expr_stmt|;
end_expr_stmt
begin_ifdef
ifdef|#
directive|ifdef
name|Q_COMPILER_RVALUE_REFS
end_ifdef
begin_expr_stmt
specifier|inline
name|QLinkedList
operator|<
name|T
operator|>
operator|&
name|operator
operator|=
operator|(
name|QLinkedList
operator|<
name|T
operator|>
operator|&&
name|other
operator|)
block|{
name|qSwap
argument_list|(
name|d
argument_list|,
name|other
operator|.
name|d
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
specifier|inline
name|void
name|swap
argument_list|(
name|QLinkedList
operator|<
name|T
operator|>
operator|&
name|other
argument_list|)
block|{
name|qSwap
argument_list|(
name|d
argument_list|,
name|other
operator|.
name|d
argument_list|)
expr_stmt|;
block|}
end_decl_stmt
begin_expr_stmt
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QLinkedList
operator|<
name|T
operator|>
operator|&
name|l
operator|)
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|QLinkedList
operator|<
name|T
operator|>
operator|&
name|l
operator|)
specifier|const
block|{
return|return
operator|!
operator|(
operator|*
name|this
operator|==
name|l
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|int
name|size
argument_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|size
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|void
name|detach
parameter_list|()
block|{
if|if
condition|(
name|d
operator|->
name|ref
operator|!=
literal|1
condition|)
name|detach_helper
argument_list|()
expr_stmt|;
block|}
end_function
begin_expr_stmt
specifier|inline
name|bool
name|isDetached
argument_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|ref
operator|==
literal|1
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|void
name|setSharable
parameter_list|(
name|bool
name|sharable
parameter_list|)
block|{
if|if
condition|(
operator|!
name|sharable
condition|)
name|detach
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|!=
operator|&
name|QLinkedListData
operator|::
name|shared_null
condition|)
name|d
operator|->
name|sharable
operator|=
name|sharable
expr_stmt|;
block|}
end_function
begin_decl_stmt
specifier|inline
name|bool
name|isSharedWith
argument_list|(
specifier|const
name|QLinkedList
operator|<
name|T
operator|>
operator|&
name|other
argument_list|)
decl|const
block|{
return|return
name|d
operator|==
name|other
operator|.
name|d
return|;
block|}
end_decl_stmt
begin_expr_stmt
specifier|inline
name|bool
name|isEmpty
argument_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|size
operator|==
literal|0
return|;
block|}
end_expr_stmt
begin_function_decl
name|void
name|clear
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|void
name|append
parameter_list|(
specifier|const
name|T
modifier|&
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|prepend
parameter_list|(
specifier|const
name|T
modifier|&
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|T
name|takeFirst
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|T
name|takeLast
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|int
name|removeAll
parameter_list|(
specifier|const
name|T
modifier|&
name|t
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|bool
name|removeOne
parameter_list|(
specifier|const
name|T
modifier|&
name|t
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
name|bool
name|contains
argument_list|(
specifier|const
name|T
operator|&
name|t
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_function
name|int
name|count
parameter_list|(
specifier|const
name|T
modifier|&
name|t
parameter_list|)
function|const;
end_function
begin_decl_stmt
name|class
name|const_iterator
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|iterator
block|{
name|public
label|:
typedef|typedef
name|std
operator|::
name|bidirectional_iterator_tag
name|iterator_category
expr_stmt|;
typedef|typedef
name|qptrdiff
name|difference_type
typedef|;
typedef|typedef
name|T
name|value_type
typedef|;
typedef|typedef
name|T
modifier|*
name|pointer
typedef|;
typedef|typedef
name|T
modifier|&
name|reference
typedef|;
name|Node
modifier|*
name|i
decl_stmt|;
specifier|inline
name|iterator
argument_list|()
operator|:
name|i
argument_list|(
literal|0
argument_list|)
block|{}
specifier|inline
name|iterator
argument_list|(
name|Node
operator|*
name|n
argument_list|)
operator|:
name|i
argument_list|(
argument|n
argument_list|)
block|{}
specifier|inline
name|iterator
argument_list|(
specifier|const
name|iterator
operator|&
name|o
argument_list|)
operator|:
name|i
argument_list|(
argument|o.i
argument_list|)
block|{}
specifier|inline
name|iterator
operator|&
name|operator
operator|=
operator|(
specifier|const
name|iterator
operator|&
name|o
operator|)
block|{
name|i
operator|=
name|o
operator|.
name|i
block|;
return|return
operator|*
name|this
return|;
block|}
specifier|inline
name|T
operator|&
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
name|i
operator|->
name|t
return|;
block|}
specifier|inline
name|T
operator|*
name|operator
operator|->
expr|(
block|)
decl|const
block|{
return|return
operator|&
name|i
operator|->
name|t
return|;
block|}
end_decl_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|iterator
operator|&
name|o
operator|)
specifier|const
block|{
return|return
name|i
operator|==
name|o
operator|.
name|i
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|iterator
operator|&
name|o
operator|)
specifier|const
block|{
return|return
name|i
operator|!=
name|o
operator|.
name|i
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|const_iterator
operator|&
name|o
operator|)
specifier|const
block|{
return|return
name|i
operator|==
name|o
operator|.
name|i
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|const_iterator
operator|&
name|o
operator|)
specifier|const
block|{
return|return
name|i
operator|!=
name|o
operator|.
name|i
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|iterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
name|i
operator|=
name|i
operator|->
name|n
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|iterator
name|operator
operator|++
operator|(
name|int
operator|)
block|{
name|Node
operator|*
name|n
operator|=
name|i
block|;
name|i
operator|=
name|i
operator|->
name|n
block|;
return|return
name|n
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|iterator
operator|&
name|operator
operator|--
operator|(
operator|)
block|{
name|i
operator|=
name|i
operator|->
name|p
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|iterator
name|operator
operator|--
operator|(
name|int
operator|)
block|{
name|Node
operator|*
name|n
operator|=
name|i
block|;
name|i
operator|=
name|i
operator|->
name|p
block|;
return|return
name|n
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|iterator
name|operator
operator|+
operator|(
name|int
name|j
operator|)
specifier|const
block|{
name|Node
operator|*
name|n
operator|=
name|i
block|;
if|if
condition|(
name|j
operator|>
literal|0
condition|)
while|while
condition|(
name|j
operator|--
condition|)
name|n
operator|=
name|n
operator|->
name|n
expr_stmt|;
else|else
while|while
condition|(
name|j
operator|++
condition|)
name|n
operator|=
name|n
operator|->
name|p
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|n
return|;
end_return
begin_expr_stmt
unit|}         inline
name|iterator
name|operator
operator|-
operator|(
name|int
name|j
operator|)
specifier|const
block|{
return|return
name|operator
operator|+
operator|(
operator|-
name|j
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|iterator
operator|&
name|operator
operator|+=
operator|(
name|int
name|j
operator|)
block|{
return|return
operator|*
name|this
operator|=
operator|*
name|this
operator|+
name|j
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|iterator
operator|&
name|operator
operator|-=
operator|(
name|int
name|j
operator|)
block|{
return|return
operator|*
name|this
operator|=
operator|*
name|this
operator|-
name|j
return|;
block|}
end_expr_stmt
begin_decl_stmt
unit|};
name|friend
name|class
name|iterator
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|const_iterator
block|{
name|public
label|:
typedef|typedef
name|std
operator|::
name|bidirectional_iterator_tag
name|iterator_category
expr_stmt|;
typedef|typedef
name|qptrdiff
name|difference_type
typedef|;
typedef|typedef
name|T
name|value_type
typedef|;
typedef|typedef
specifier|const
name|T
modifier|*
name|pointer
typedef|;
typedef|typedef
specifier|const
name|T
modifier|&
name|reference
typedef|;
name|Node
modifier|*
name|i
decl_stmt|;
specifier|inline
name|const_iterator
argument_list|()
operator|:
name|i
argument_list|(
literal|0
argument_list|)
block|{}
specifier|inline
name|const_iterator
argument_list|(
name|Node
operator|*
name|n
argument_list|)
operator|:
name|i
argument_list|(
argument|n
argument_list|)
block|{}
specifier|inline
name|const_iterator
argument_list|(
specifier|const
name|const_iterator
operator|&
name|o
argument_list|)
operator|:
name|i
argument_list|(
argument|o.i
argument_list|)
block|{}
specifier|inline
name|const_iterator
argument_list|(
argument|iterator ci
argument_list|)
operator|:
name|i
argument_list|(
argument|ci.i
argument_list|)
block|{}
specifier|inline
name|const_iterator
operator|&
name|operator
operator|=
operator|(
specifier|const
name|const_iterator
operator|&
name|o
operator|)
block|{
name|i
operator|=
name|o
operator|.
name|i
block|;
return|return
operator|*
name|this
return|;
block|}
specifier|inline
specifier|const
name|T
operator|&
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
name|i
operator|->
name|t
return|;
block|}
specifier|inline
specifier|const
name|T
operator|*
name|operator
operator|->
expr|(
block|)
decl|const
block|{
return|return
operator|&
name|i
operator|->
name|t
return|;
block|}
end_decl_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|const_iterator
operator|&
name|o
operator|)
specifier|const
block|{
return|return
name|i
operator|==
name|o
operator|.
name|i
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|const_iterator
operator|&
name|o
operator|)
specifier|const
block|{
return|return
name|i
operator|!=
name|o
operator|.
name|i
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|const_iterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
name|i
operator|=
name|i
operator|->
name|n
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|const_iterator
name|operator
operator|++
operator|(
name|int
operator|)
block|{
name|Node
operator|*
name|n
operator|=
name|i
block|;
name|i
operator|=
name|i
operator|->
name|n
block|;
return|return
name|n
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|const_iterator
operator|&
name|operator
operator|--
operator|(
operator|)
block|{
name|i
operator|=
name|i
operator|->
name|p
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|const_iterator
name|operator
operator|--
operator|(
name|int
operator|)
block|{
name|Node
operator|*
name|n
operator|=
name|i
block|;
name|i
operator|=
name|i
operator|->
name|p
block|;
return|return
name|n
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|const_iterator
name|operator
operator|+
operator|(
name|int
name|j
operator|)
specifier|const
block|{
name|Node
operator|*
name|n
operator|=
name|i
block|;
if|if
condition|(
name|j
operator|>
literal|0
condition|)
while|while
condition|(
name|j
operator|--
condition|)
name|n
operator|=
name|n
operator|->
name|n
expr_stmt|;
else|else
while|while
condition|(
name|j
operator|++
condition|)
name|n
operator|=
name|n
operator|->
name|p
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|n
return|;
end_return
begin_expr_stmt
unit|}         inline
name|const_iterator
name|operator
operator|-
operator|(
name|int
name|j
operator|)
specifier|const
block|{
return|return
name|operator
operator|+
operator|(
operator|-
name|j
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|const_iterator
operator|&
name|operator
operator|+=
operator|(
name|int
name|j
operator|)
block|{
return|return
operator|*
name|this
operator|=
operator|*
name|this
operator|+
name|j
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|const_iterator
operator|&
name|operator
operator|-=
operator|(
name|int
name|j
operator|)
block|{
return|return
operator|*
name|this
operator|=
operator|*
name|this
operator|-
name|j
return|;
block|}
end_expr_stmt
begin_decl_stmt
unit|};
name|friend
name|class
name|const_iterator
decl_stmt|;
end_decl_stmt
begin_comment
comment|// stl style
end_comment
begin_function
specifier|inline
name|iterator
name|begin
parameter_list|()
block|{
name|detach
argument_list|()
expr_stmt|;
return|return
name|e
operator|->
name|n
return|;
block|}
end_function
begin_expr_stmt
specifier|inline
name|const_iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
name|e
operator|->
name|n
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|const_iterator
name|constBegin
argument_list|()
specifier|const
block|{
return|return
name|e
operator|->
name|n
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|iterator
name|end
parameter_list|()
block|{
name|detach
argument_list|()
expr_stmt|;
return|return
name|e
return|;
block|}
end_function
begin_expr_stmt
specifier|inline
name|const_iterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|e
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|const_iterator
name|constEnd
argument_list|()
specifier|const
block|{
return|return
name|e
return|;
block|}
end_expr_stmt
begin_function_decl
name|iterator
name|insert
parameter_list|(
name|iterator
name|before
parameter_list|,
specifier|const
name|T
modifier|&
name|t
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|iterator
name|erase
parameter_list|(
name|iterator
name|pos
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|iterator
name|erase
parameter_list|(
name|iterator
name|first
parameter_list|,
name|iterator
name|last
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|// more Qt
end_comment
begin_typedef
typedef|typedef
name|iterator
name|Iterator
typedef|;
end_typedef
begin_typedef
typedef|typedef
name|const_iterator
name|ConstIterator
typedef|;
end_typedef
begin_expr_stmt
specifier|inline
name|int
name|count
argument_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|size
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|T
modifier|&
name|first
parameter_list|()
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|*
name|begin
argument_list|()
return|;
block|}
end_function
begin_expr_stmt
specifier|inline
specifier|const
name|T
operator|&
name|first
argument_list|()
specifier|const
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|isEmpty
argument_list|()
argument_list|)
block|;
return|return
operator|*
name|begin
argument_list|()
return|;
block|}
end_expr_stmt
begin_function
name|T
modifier|&
name|last
parameter_list|()
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|*
operator|(
operator|--
name|end
argument_list|()
operator|)
return|;
block|}
end_function
begin_expr_stmt
specifier|const
name|T
operator|&
name|last
argument_list|()
specifier|const
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|isEmpty
argument_list|()
argument_list|)
block|;
return|return
operator|*
operator|(
operator|--
name|end
argument_list|()
operator|)
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|void
name|removeFirst
parameter_list|()
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|erase
argument_list|(
name|begin
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
specifier|inline
name|void
name|removeLast
parameter_list|()
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|erase
argument_list|(
operator|--
name|end
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_decl_stmt
specifier|inline
name|bool
name|startsWith
argument_list|(
specifier|const
name|T
operator|&
name|t
argument_list|)
decl|const
block|{
return|return
operator|!
name|isEmpty
argument_list|()
operator|&&
name|first
argument_list|()
operator|==
name|t
return|;
block|}
end_decl_stmt
begin_decl_stmt
specifier|inline
name|bool
name|endsWith
argument_list|(
specifier|const
name|T
operator|&
name|t
argument_list|)
decl|const
block|{
return|return
operator|!
name|isEmpty
argument_list|()
operator|&&
name|last
argument_list|()
operator|==
name|t
return|;
block|}
end_decl_stmt
begin_comment
comment|// stl compatibility
end_comment
begin_function
specifier|inline
name|void
name|push_back
parameter_list|(
specifier|const
name|T
modifier|&
name|t
parameter_list|)
block|{
name|append
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
specifier|inline
name|void
name|push_front
parameter_list|(
specifier|const
name|T
modifier|&
name|t
parameter_list|)
block|{
name|prepend
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
specifier|inline
name|T
modifier|&
name|front
parameter_list|()
block|{
return|return
name|first
argument_list|()
return|;
block|}
end_function
begin_expr_stmt
specifier|inline
specifier|const
name|T
operator|&
name|front
argument_list|()
specifier|const
block|{
return|return
name|first
argument_list|()
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|T
modifier|&
name|back
parameter_list|()
block|{
return|return
name|last
argument_list|()
return|;
block|}
end_function
begin_expr_stmt
specifier|inline
specifier|const
name|T
operator|&
name|back
argument_list|()
specifier|const
block|{
return|return
name|last
argument_list|()
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|void
name|pop_front
parameter_list|()
block|{
name|removeFirst
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
specifier|inline
name|void
name|pop_back
parameter_list|()
block|{
name|removeLast
argument_list|()
expr_stmt|;
block|}
end_function
begin_expr_stmt
specifier|inline
name|bool
name|empty
argument_list|()
specifier|const
block|{
return|return
name|isEmpty
argument_list|()
return|;
block|}
end_expr_stmt
begin_typedef
typedef|typedef
name|int
name|size_type
typedef|;
end_typedef
begin_typedef
typedef|typedef
name|T
name|value_type
typedef|;
end_typedef
begin_typedef
typedef|typedef
name|value_type
modifier|*
name|pointer
typedef|;
end_typedef
begin_typedef
typedef|typedef
specifier|const
name|value_type
modifier|*
name|const_pointer
typedef|;
end_typedef
begin_typedef
typedef|typedef
name|value_type
modifier|&
name|reference
typedef|;
end_typedef
begin_typedef
typedef|typedef
specifier|const
name|value_type
modifier|&
name|const_reference
typedef|;
end_typedef
begin_typedef
typedef|typedef
name|qptrdiff
name|difference_type
typedef|;
end_typedef
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_STL
end_ifndef
begin_expr_stmt
specifier|static
specifier|inline
name|QLinkedList
operator|<
name|T
operator|>
name|fromStdList
argument_list|(
argument|const std::list<T>&list
argument_list|)
block|{
name|QLinkedList
operator|<
name|T
operator|>
name|tmp
block|;
name|qCopy
argument_list|(
name|list
operator|.
name|begin
argument_list|()
argument_list|,
name|list
operator|.
name|end
argument_list|()
argument_list|,
name|std
operator|::
name|back_inserter
argument_list|(
name|tmp
argument_list|)
argument_list|)
block|;
return|return
name|tmp
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|std
operator|::
name|list
operator|<
name|T
operator|>
name|toStdList
argument_list|()
specifier|const
block|{
name|std
operator|::
name|list
operator|<
name|T
operator|>
name|tmp
block|;
name|qCopy
argument_list|(
name|constBegin
argument_list|()
argument_list|,
name|constEnd
argument_list|()
argument_list|,
name|std
operator|::
name|back_inserter
argument_list|(
name|tmp
argument_list|)
argument_list|)
block|;
return|return
name|tmp
return|;
block|}
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// comfort
end_comment
begin_expr_stmt
name|QLinkedList
operator|<
name|T
operator|>
operator|&
name|operator
operator|+=
operator|(
specifier|const
name|QLinkedList
operator|<
name|T
operator|>
operator|&
name|l
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QLinkedList
operator|<
name|T
operator|>
name|operator
operator|+
operator|(
specifier|const
name|QLinkedList
operator|<
name|T
operator|>
operator|&
name|l
operator|)
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QLinkedList
operator|<
name|T
operator|>
operator|&
name|operator
operator|+=
operator|(
specifier|const
name|T
operator|&
name|t
operator|)
block|{
name|append
argument_list|(
name|t
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QLinkedList
operator|<
name|T
operator|>
operator|&
name|operator
operator|<<
operator|(
specifier|const
name|T
operator|&
name|t
operator|)
block|{
name|append
argument_list|(
name|t
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QLinkedList
operator|<
name|T
operator|>
operator|&
name|operator
operator|<<
operator|(
specifier|const
name|QLinkedList
operator|<
name|T
operator|>
operator|&
name|l
operator|)
block|{
operator|*
name|this
operator|+=
name|l
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_label
name|private
label|:
end_label
begin_function_decl
name|void
name|detach_helper
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|void
name|free
parameter_list|(
name|QLinkedListData
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|~QLinkedList
specifier|inline
name|QLinkedList
operator|<
name|T
operator|>
operator|::
operator|~
name|QLinkedList
argument_list|()
block|{
if|if
condition|(
operator|!
name|d
condition|)
return|return;
end_expr_stmt
begin_if
if|if
condition|(
operator|!
name|d
operator|->
name|ref
operator|.
name|deref
argument_list|()
condition|)
name|free
argument_list|(
name|d
argument_list|)
expr_stmt|;
end_if
begin_expr_stmt
unit|}  template
operator|<
name|typename
name|T
operator|>
DECL|function|detach_helper
name|void
name|QLinkedList
operator|<
name|T
operator|>
operator|::
name|detach_helper
argument_list|()
block|{
expr|union
block|{
name|QLinkedListData
operator|*
name|d
block|;
name|Node
operator|*
name|e
block|; }
name|x
block|;
name|x
operator|.
name|d
operator|=
name|new
name|QLinkedListData
block|;
name|x
operator|.
name|d
operator|->
name|ref
operator|=
literal|1
block|;
name|x
operator|.
name|d
operator|->
name|size
operator|=
name|d
operator|->
name|size
block|;
name|x
operator|.
name|d
operator|->
name|sharable
operator|=
name|true
block|;
name|Node
operator|*
name|original
operator|=
name|e
operator|->
name|n
block|;
name|Node
operator|*
name|copy
operator|=
name|x
operator|.
name|e
block|;
while|while
condition|(
name|original
operator|!=
name|e
condition|)
block|{
name|QT_TRY
block|{
name|copy
operator|->
name|n
operator|=
name|new
name|Node
argument_list|(
name|original
operator|->
name|t
argument_list|)
expr_stmt|;
name|copy
operator|->
name|n
operator|->
name|p
operator|=
name|copy
expr_stmt|;
name|original
operator|=
name|original
operator|->
name|n
expr_stmt|;
name|copy
operator|=
name|copy
operator|->
name|n
expr_stmt|;
block|}
name|QT_CATCH
argument_list|(
argument|...
argument_list|)
block|{
name|copy
operator|->
name|n
operator|=
name|x
operator|.
name|e
block|;
name|free
argument_list|(
name|x
operator|.
name|d
argument_list|)
block|;
name|QT_RETHROW
block|;         }
end_expr_stmt
begin_expr_stmt
unit|}     copy
operator|->
name|n
operator|=
name|x
operator|.
name|e
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|x
operator|.
name|e
operator|->
name|p
operator|=
name|copy
expr_stmt|;
end_expr_stmt
begin_if
if|if
condition|(
operator|!
name|d
operator|->
name|ref
operator|.
name|deref
argument_list|()
condition|)
name|free
argument_list|(
name|d
argument_list|)
expr_stmt|;
end_if
begin_expr_stmt
name|d
operator|=
name|x
operator|.
name|d
expr_stmt|;
end_expr_stmt
begin_expr_stmt
unit|}  template
operator|<
name|typename
name|T
operator|>
DECL|function|free
name|void
name|QLinkedList
operator|<
name|T
operator|>
operator|::
name|free
argument_list|(
argument|QLinkedListData *x
argument_list|)
block|{
name|Node
operator|*
name|y
operator|=
name|reinterpret_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|x
operator|)
block|;
name|Node
operator|*
name|i
operator|=
name|y
operator|->
name|n
block|;
if|if
condition|(
name|x
operator|->
name|ref
operator|==
literal|0
condition|)
block|{
while|while
condition|(
name|i
operator|!=
name|y
condition|)
block|{
name|Node
modifier|*
name|n
init|=
name|i
decl_stmt|;
name|i
operator|=
name|i
operator|->
name|n
expr_stmt|;
name|delete
name|n
decl_stmt|;
block|}
name|delete
name|x
expr_stmt|;
end_expr_stmt
begin_expr_stmt
unit|} }
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|clear
name|void
name|QLinkedList
operator|<
name|T
operator|>
operator|::
name|clear
argument_list|()
block|{
operator|*
name|this
operator|=
name|QLinkedList
operator|<
name|T
operator|>
operator|(
operator|)
block|; }
name|template
operator|<
name|typename
name|T
operator|>
name|QLinkedList
operator|<
name|T
operator|>
operator|&
name|QLinkedList
operator|<
name|T
operator|>
operator|::
name|operator
operator|=
operator|(
specifier|const
name|QLinkedList
operator|<
name|T
operator|>
operator|&
name|l
operator|)
block|{
if|if
condition|(
name|d
operator|!=
name|l
operator|.
name|d
condition|)
block|{
name|QLinkedListData
modifier|*
name|o
init|=
name|l
operator|.
name|d
decl_stmt|;
name|o
operator|->
name|ref
operator|.
name|ref
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|ref
operator|.
name|deref
argument_list|()
condition|)
name|free
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|d
operator|=
name|o
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|sharable
condition|)
name|detach_helper
argument_list|()
expr_stmt|;
block|}
end_expr_stmt
begin_return
return|return
operator|*
name|this
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|typename
name|T
operator|>
name|bool
name|QLinkedList
operator|<
name|T
operator|>
operator|::
name|operator
operator|==
operator|(
specifier|const
name|QLinkedList
operator|<
name|T
operator|>
operator|&
name|l
operator|)
specifier|const
block|{
if|if
condition|(
name|d
operator|->
name|size
operator|!=
name|l
operator|.
name|d
operator|->
name|size
condition|)
return|return
name|false
return|;
end_expr_stmt
begin_if
if|if
condition|(
name|e
operator|==
name|l
operator|.
name|e
condition|)
return|return
name|true
return|;
end_if
begin_decl_stmt
name|Node
modifier|*
name|i
init|=
name|e
operator|->
name|n
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|Node
modifier|*
name|il
init|=
name|l
operator|.
name|e
operator|->
name|n
decl_stmt|;
end_decl_stmt
begin_while
while|while
condition|(
name|i
operator|!=
name|e
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|i
operator|->
name|t
operator|==
name|il
operator|->
name|t
operator|)
condition|)
return|return
name|false
return|;
name|i
operator|=
name|i
operator|->
name|n
expr_stmt|;
name|il
operator|=
name|il
operator|->
name|n
expr_stmt|;
block|}
end_while
begin_return
return|return
name|true
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|typename
name|T
operator|>
name|void
name|QLinkedList
operator|<
name|T
operator|>
operator|::
name|append
argument_list|(
argument|const T&t
argument_list|)
block|{
name|detach
argument_list|()
block|;
name|Node
operator|*
name|i
operator|=
name|new
name|Node
argument_list|(
name|t
argument_list|)
block|;
name|i
operator|->
name|n
operator|=
name|e
block|;
name|i
operator|->
name|p
operator|=
name|e
operator|->
name|p
block|;
name|i
operator|->
name|p
operator|->
name|n
operator|=
name|i
block|;
name|e
operator|->
name|p
operator|=
name|i
block|;
name|d
operator|->
name|size
operator|++
block|; }
name|template
operator|<
name|typename
name|T
operator|>
name|void
name|QLinkedList
operator|<
name|T
operator|>
operator|::
name|prepend
argument_list|(
argument|const T&t
argument_list|)
block|{
name|detach
argument_list|()
block|;
name|Node
operator|*
name|i
operator|=
name|new
name|Node
argument_list|(
name|t
argument_list|)
block|;
name|i
operator|->
name|n
operator|=
name|e
operator|->
name|n
block|;
name|i
operator|->
name|p
operator|=
name|e
block|;
name|i
operator|->
name|n
operator|->
name|p
operator|=
name|i
block|;
name|e
operator|->
name|n
operator|=
name|i
block|;
name|d
operator|->
name|size
operator|++
block|; }
name|template
operator|<
name|typename
name|T
operator|>
name|int
name|QLinkedList
operator|<
name|T
operator|>
operator|::
name|removeAll
argument_list|(
argument|const T&_t
argument_list|)
block|{
name|detach
argument_list|()
block|;
specifier|const
name|T
name|t
operator|=
name|_t
block|;
name|Node
operator|*
name|i
operator|=
name|e
operator|->
name|n
block|;
name|int
name|c
operator|=
literal|0
block|;
while|while
condition|(
name|i
operator|!=
name|e
condition|)
block|{
if|if
condition|(
name|i
operator|->
name|t
operator|==
name|t
condition|)
block|{
name|Node
modifier|*
name|n
init|=
name|i
decl_stmt|;
name|i
operator|->
name|n
operator|->
name|p
operator|=
name|i
operator|->
name|p
expr_stmt|;
name|i
operator|->
name|p
operator|->
name|n
operator|=
name|i
operator|->
name|n
expr_stmt|;
name|i
operator|=
name|i
operator|->
name|n
expr_stmt|;
name|delete
name|n
decl_stmt|;
name|c
operator|++
expr_stmt|;
block|}
end_expr_stmt
begin_else
else|else
block|{
name|i
operator|=
name|i
operator|->
name|n
expr_stmt|;
block|}
end_else
begin_expr_stmt
unit|}     d
operator|->
name|size
operator|-=
name|c
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|c
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|typename
name|T
operator|>
name|bool
name|QLinkedList
operator|<
name|T
operator|>
operator|::
name|removeOne
argument_list|(
argument|const T&_t
argument_list|)
block|{
name|detach
argument_list|()
block|;
name|iterator
name|it
operator|=
name|qFind
argument_list|(
name|begin
argument_list|()
argument_list|,
name|end
argument_list|()
argument_list|,
name|_t
argument_list|)
block|;
if|if
condition|(
name|it
operator|!=
name|end
argument_list|()
condition|)
block|{
name|erase
argument_list|(
name|it
argument_list|)
expr_stmt|;
return|return
name|true
return|;
block|}
end_expr_stmt
begin_return
return|return
name|false
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|T
name|QLinkedList
operator|<
name|T
operator|>
operator|::
name|takeFirst
argument_list|()
block|{
name|T
name|t
operator|=
name|first
argument_list|()
block|;
name|removeFirst
argument_list|()
block|;
return|return
name|t
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|T
name|QLinkedList
operator|<
name|T
operator|>
operator|::
name|takeLast
argument_list|()
block|{
name|T
name|t
operator|=
name|last
argument_list|()
block|;
name|removeLast
argument_list|()
block|;
return|return
name|t
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|bool
name|QLinkedList
operator|<
name|T
operator|>
operator|::
name|contains
argument_list|(
argument|const T&t
argument_list|)
specifier|const
block|{
name|Node
operator|*
name|i
operator|=
name|e
block|;
while|while
condition|(
operator|(
name|i
operator|=
name|i
operator|->
name|n
operator|)
operator|!=
name|e
condition|)
if|if
condition|(
name|i
operator|->
name|t
operator|==
name|t
condition|)
return|return
name|true
return|;
end_expr_stmt
begin_return
return|return
name|false
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|typename
name|T
operator|>
name|int
name|QLinkedList
operator|<
name|T
operator|>
operator|::
name|count
argument_list|(
argument|const T&t
argument_list|)
specifier|const
block|{
name|Node
operator|*
name|i
operator|=
name|e
block|;
name|int
name|c
operator|=
literal|0
block|;
while|while
condition|(
operator|(
name|i
operator|=
name|i
operator|->
name|n
operator|)
operator|!=
name|e
condition|)
if|if
condition|(
name|i
operator|->
name|t
operator|==
name|t
condition|)
name|c
operator|++
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|c
return|;
end_return
begin_expr_stmt
unit|}   template
operator|<
name|typename
name|T
operator|>
name|typename
name|QLinkedList
operator|<
name|T
operator|>
operator|::
name|iterator
name|QLinkedList
operator|<
name|T
operator|>
operator|::
name|insert
argument_list|(
argument|iterator before
argument_list|,
argument|const T&t
argument_list|)
block|{
name|Node
operator|*
name|i
operator|=
name|before
operator|.
name|i
block|;
name|Node
operator|*
name|m
operator|=
name|new
name|Node
argument_list|(
name|t
argument_list|)
block|;
name|m
operator|->
name|n
operator|=
name|i
block|;
name|m
operator|->
name|p
operator|=
name|i
operator|->
name|p
block|;
name|m
operator|->
name|p
operator|->
name|n
operator|=
name|m
block|;
name|i
operator|->
name|p
operator|=
name|m
block|;
name|d
operator|->
name|size
operator|++
block|;
return|return
name|m
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|typename
name|QLinkedList
operator|<
name|T
operator|>
operator|::
name|iterator
name|QLinkedList
operator|<
name|T
operator|>
operator|::
name|erase
argument_list|(
argument|typename QLinkedList<T>::iterator afirst
argument_list|,
argument|typename QLinkedList<T>::iterator alast
argument_list|)
block|{
while|while
condition|(
name|afirst
operator|!=
name|alast
condition|)
name|erase
argument_list|(
name|afirst
operator|++
argument_list|)
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|alast
return|;
end_return
begin_expr_stmt
unit|}   template
operator|<
name|typename
name|T
operator|>
name|typename
name|QLinkedList
operator|<
name|T
operator|>
operator|::
name|iterator
name|QLinkedList
operator|<
name|T
operator|>
operator|::
name|erase
argument_list|(
argument|iterator pos
argument_list|)
block|{
name|detach
argument_list|()
block|;
name|Node
operator|*
name|i
operator|=
name|pos
operator|.
name|i
block|;
if|if
condition|(
name|i
operator|!=
name|e
condition|)
block|{
name|Node
modifier|*
name|n
init|=
name|i
decl_stmt|;
name|i
operator|->
name|n
operator|->
name|p
operator|=
name|i
operator|->
name|p
expr_stmt|;
name|i
operator|->
name|p
operator|->
name|n
operator|=
name|i
operator|->
name|n
expr_stmt|;
name|i
operator|=
name|i
operator|->
name|n
expr_stmt|;
name|delete
name|n
decl_stmt|;
name|d
operator|->
name|size
operator|--
expr_stmt|;
block|}
end_expr_stmt
begin_return
return|return
name|i
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|typename
name|T
operator|>
name|QLinkedList
operator|<
name|T
operator|>
operator|&
name|QLinkedList
operator|<
name|T
operator|>
operator|::
name|operator
operator|+=
operator|(
specifier|const
name|QLinkedList
operator|<
name|T
operator|>
operator|&
name|l
operator|)
block|{
name|detach
argument_list|()
block|;
name|int
name|n
operator|=
name|l
operator|.
name|d
operator|->
name|size
block|;
name|d
operator|->
name|size
operator|+=
name|n
block|;
name|Node
operator|*
name|original
operator|=
name|l
operator|.
name|e
operator|->
name|n
block|;
while|while
condition|(
name|n
operator|--
condition|)
block|{
name|QT_TRY
block|{
name|Node
modifier|*
name|copy
init|=
name|new
name|Node
argument_list|(
name|original
operator|->
name|t
argument_list|)
decl_stmt|;
name|original
operator|=
name|original
operator|->
name|n
expr_stmt|;
name|copy
operator|->
name|n
operator|=
name|e
expr_stmt|;
name|copy
operator|->
name|p
operator|=
name|e
operator|->
name|p
expr_stmt|;
name|copy
operator|->
name|p
operator|->
name|n
operator|=
name|copy
expr_stmt|;
name|e
operator|->
name|p
operator|=
name|copy
expr_stmt|;
block|}
name|QT_CATCH
argument_list|(
argument|...
argument_list|)
block|{
comment|// restore the original list
while|while
condition|(
name|n
operator|++
operator|<
name|d
operator|->
name|size
condition|)
name|removeLast
argument_list|()
expr_stmt|;
name|QT_RETHROW
expr_stmt|;
end_expr_stmt
begin_return
unit|}     }
return|return
operator|*
name|this
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|typename
name|T
operator|>
name|QLinkedList
operator|<
name|T
operator|>
name|QLinkedList
operator|<
name|T
operator|>
operator|::
name|operator
operator|+
operator|(
specifier|const
name|QLinkedList
operator|<
name|T
operator|>
operator|&
name|l
operator|)
specifier|const
block|{
name|QLinkedList
operator|<
name|T
operator|>
name|n
operator|=
operator|*
name|this
block|;
name|n
operator|+=
name|l
block|;
return|return
name|n
return|;
block|}
end_expr_stmt
begin_macro
name|Q_DECLARE_SEQUENTIAL_ITERATOR
argument_list|(
argument|LinkedList
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_MUTABLE_SEQUENTIAL_ITERATOR
argument_list|(
argument|LinkedList
argument_list|)
end_macro
begin_expr_stmt
name|QT_END_NAMESPACE
name|QT_END_HEADER
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QLINKEDLIST_H
end_comment
end_unit
