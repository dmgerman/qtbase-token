begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia. For licensing terms and ** conditions see http://qt.digia.com/licensing. For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights. These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QMARGINS_H
end_ifndef
begin_define
DECL|macro|QMARGINS_H
define|#
directive|define
name|QMARGINS_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qnamespace.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
comment|/*****************************************************************************   QMargins class  *****************************************************************************/
name|class
name|QMargins
block|{
name|public
label|:
name|Q_DECL_CONSTEXPR
name|QMargins
parameter_list|()
function_decl|;
name|Q_DECL_CONSTEXPR
name|QMargins
parameter_list|(
name|int
name|left
parameter_list|,
name|int
name|top
parameter_list|,
name|int
name|right
parameter_list|,
name|int
name|bottom
parameter_list|)
function_decl|;
name|Q_DECL_CONSTEXPR
name|bool
name|isNull
argument_list|()
specifier|const
expr_stmt|;
name|Q_DECL_CONSTEXPR
name|int
name|left
argument_list|()
specifier|const
expr_stmt|;
name|Q_DECL_CONSTEXPR
name|int
name|top
argument_list|()
specifier|const
expr_stmt|;
name|Q_DECL_CONSTEXPR
name|int
name|right
argument_list|()
specifier|const
expr_stmt|;
name|Q_DECL_CONSTEXPR
name|int
name|bottom
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setLeft
parameter_list|(
name|int
name|left
parameter_list|)
function_decl|;
name|void
name|setTop
parameter_list|(
name|int
name|top
parameter_list|)
function_decl|;
name|void
name|setRight
parameter_list|(
name|int
name|right
parameter_list|)
function_decl|;
name|void
name|setBottom
parameter_list|(
name|int
name|bottom
parameter_list|)
function_decl|;
name|QMargins
operator|&
name|operator
operator|+=
operator|(
specifier|const
name|QMargins
operator|&
name|margins
operator|)
expr_stmt|;
name|QMargins
operator|&
name|operator
operator|-=
operator|(
specifier|const
name|QMargins
operator|&
name|margins
operator|)
expr_stmt|;
name|QMargins
operator|&
name|operator
operator|+=
operator|(
name|int
operator|)
expr_stmt|;
name|QMargins
operator|&
name|operator
operator|-=
operator|(
name|int
operator|)
expr_stmt|;
name|QMargins
operator|&
name|operator
operator|*=
operator|(
name|int
operator|)
expr_stmt|;
name|QMargins
operator|&
name|operator
operator|/=
operator|(
name|int
operator|)
expr_stmt|;
name|QMargins
operator|&
name|operator
operator|*=
operator|(
name|qreal
operator|)
expr_stmt|;
name|QMargins
operator|&
name|operator
operator|/=
operator|(
name|qreal
operator|)
expr_stmt|;
name|private
label|:
name|int
name|m_left
decl_stmt|;
name|int
name|m_top
decl_stmt|;
name|int
name|m_right
decl_stmt|;
name|int
name|m_bottom
decl_stmt|;
name|friend
name|Q_DECL_CONSTEXPR
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QMargins
operator|&
operator|,
specifier|const
name|QMargins
operator|&
operator|)
expr_stmt|;
name|friend
name|Q_DECL_CONSTEXPR
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|QMargins
operator|&
operator|,
specifier|const
name|QMargins
operator|&
operator|)
expr_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_expr_stmt
name|Q_DECLARE_TYPEINFO
argument_list|(
name|QMargins
argument_list|,
name|Q_MOVABLE_TYPE
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|/*****************************************************************************   QMargins stream functions  *****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DATASTREAM
end_ifndef
begin_expr_stmt
name|Q_CORE_EXPORT
name|QDataStream
operator|&
name|operator
operator|<<
operator|(
name|QDataStream
operator|&
operator|,
specifier|const
name|QMargins
operator|&
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_CORE_EXPORT
name|QDataStream
operator|&
name|operator
operator|>>
operator|(
name|QDataStream
operator|&
operator|,
name|QMargins
operator|&
operator|)
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*****************************************************************************   QMargins inline functions  *****************************************************************************/
end_comment
begin_expr_stmt
DECL|function|QMargins
name|Q_DECL_CONSTEXPR
specifier|inline
name|QMargins
operator|::
name|QMargins
argument_list|()
operator|:
name|m_left
argument_list|(
literal|0
argument_list|)
operator|,
name|m_top
argument_list|(
literal|0
argument_list|)
operator|,
name|m_right
argument_list|(
literal|0
argument_list|)
operator|,
name|m_bottom
argument_list|(
literal|0
argument_list|)
block|{}
DECL|function|QMargins
name|Q_DECL_CONSTEXPR
specifier|inline
name|QMargins
operator|::
name|QMargins
argument_list|(
argument|int aleft
argument_list|,
argument|int atop
argument_list|,
argument|int aright
argument_list|,
argument|int abottom
argument_list|)
operator|:
name|m_left
argument_list|(
name|aleft
argument_list|)
operator|,
name|m_top
argument_list|(
name|atop
argument_list|)
operator|,
name|m_right
argument_list|(
name|aright
argument_list|)
operator|,
name|m_bottom
argument_list|(
argument|abottom
argument_list|)
block|{}
DECL|function|isNull
name|Q_DECL_CONSTEXPR
specifier|inline
name|bool
name|QMargins
operator|::
name|isNull
argument_list|()
specifier|const
block|{
return|return
name|m_left
operator|==
literal|0
operator|&&
name|m_top
operator|==
literal|0
operator|&&
name|m_right
operator|==
literal|0
operator|&&
name|m_bottom
operator|==
literal|0
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|left
name|Q_DECL_CONSTEXPR
specifier|inline
name|int
name|QMargins
operator|::
name|left
argument_list|()
specifier|const
block|{
return|return
name|m_left
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|top
name|Q_DECL_CONSTEXPR
specifier|inline
name|int
name|QMargins
operator|::
name|top
argument_list|()
specifier|const
block|{
return|return
name|m_top
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|right
name|Q_DECL_CONSTEXPR
specifier|inline
name|int
name|QMargins
operator|::
name|right
argument_list|()
specifier|const
block|{
return|return
name|m_right
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|bottom
name|Q_DECL_CONSTEXPR
specifier|inline
name|int
name|QMargins
operator|::
name|bottom
argument_list|()
specifier|const
block|{
return|return
name|m_bottom
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|setLeft
specifier|inline
name|void
name|QMargins
operator|::
name|setLeft
argument_list|(
argument|int aleft
argument_list|)
block|{
name|m_left
operator|=
name|aleft
block|; }
DECL|function|setTop
specifier|inline
name|void
name|QMargins
operator|::
name|setTop
argument_list|(
argument|int atop
argument_list|)
block|{
name|m_top
operator|=
name|atop
block|; }
DECL|function|setRight
specifier|inline
name|void
name|QMargins
operator|::
name|setRight
argument_list|(
argument|int aright
argument_list|)
block|{
name|m_right
operator|=
name|aright
block|; }
DECL|function|setBottom
specifier|inline
name|void
name|QMargins
operator|::
name|setBottom
argument_list|(
argument|int abottom
argument_list|)
block|{
name|m_bottom
operator|=
name|abottom
block|; }
DECL|function|operator
name|Q_DECL_CONSTEXPR
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QMargins
operator|&
name|m1
operator|,
specifier|const
name|QMargins
operator|&
name|m2
operator|)
block|{
return|return
name|m1
operator|.
name|m_left
operator|==
name|m2
operator|.
name|m_left
operator|&&
name|m1
operator|.
name|m_top
operator|==
name|m2
operator|.
name|m_top
operator|&&
name|m1
operator|.
name|m_right
operator|==
name|m2
operator|.
name|m_right
operator|&&
name|m1
operator|.
name|m_bottom
operator|==
name|m2
operator|.
name|m_bottom
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|operator
name|Q_DECL_CONSTEXPR
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|QMargins
operator|&
name|m1
operator|,
specifier|const
name|QMargins
operator|&
name|m2
operator|)
block|{
return|return
name|m1
operator|.
name|m_left
operator|!=
name|m2
operator|.
name|m_left
operator|||
name|m1
operator|.
name|m_top
operator|!=
name|m2
operator|.
name|m_top
operator|||
name|m1
operator|.
name|m_right
operator|!=
name|m2
operator|.
name|m_right
operator|||
name|m1
operator|.
name|m_bottom
operator|!=
name|m2
operator|.
name|m_bottom
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|operator
name|Q_DECL_CONSTEXPR
specifier|inline
name|QMargins
name|operator
operator|+
operator|(
specifier|const
name|QMargins
operator|&
name|m1
operator|,
specifier|const
name|QMargins
operator|&
name|m2
operator|)
block|{
return|return
name|QMargins
argument_list|(
name|m1
operator|.
name|left
argument_list|()
operator|+
name|m2
operator|.
name|left
argument_list|()
argument_list|,
name|m1
operator|.
name|top
argument_list|()
operator|+
name|m2
operator|.
name|top
argument_list|()
argument_list|,
name|m1
operator|.
name|right
argument_list|()
operator|+
name|m2
operator|.
name|right
argument_list|()
argument_list|,
name|m1
operator|.
name|bottom
argument_list|()
operator|+
name|m2
operator|.
name|bottom
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|operator
name|Q_DECL_CONSTEXPR
specifier|inline
name|QMargins
name|operator
operator|-
operator|(
specifier|const
name|QMargins
operator|&
name|m1
operator|,
specifier|const
name|QMargins
operator|&
name|m2
operator|)
block|{
return|return
name|QMargins
argument_list|(
name|m1
operator|.
name|left
argument_list|()
operator|-
name|m2
operator|.
name|left
argument_list|()
argument_list|,
name|m1
operator|.
name|top
argument_list|()
operator|-
name|m2
operator|.
name|top
argument_list|()
argument_list|,
name|m1
operator|.
name|right
argument_list|()
operator|-
name|m2
operator|.
name|right
argument_list|()
argument_list|,
name|m1
operator|.
name|bottom
argument_list|()
operator|-
name|m2
operator|.
name|bottom
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|operator
name|Q_DECL_CONSTEXPR
specifier|inline
name|QMargins
name|operator
operator|+
operator|(
specifier|const
name|QMargins
operator|&
name|lhs
operator|,
name|int
name|rhs
operator|)
block|{
return|return
name|QMargins
argument_list|(
name|lhs
operator|.
name|left
argument_list|()
operator|+
name|rhs
argument_list|,
name|lhs
operator|.
name|top
argument_list|()
operator|+
name|rhs
argument_list|,
name|lhs
operator|.
name|right
argument_list|()
operator|+
name|rhs
argument_list|,
name|lhs
operator|.
name|bottom
argument_list|()
operator|+
name|rhs
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|operator
name|Q_DECL_CONSTEXPR
specifier|inline
name|QMargins
name|operator
operator|+
operator|(
name|int
name|lhs
operator|,
specifier|const
name|QMargins
operator|&
name|rhs
operator|)
block|{
return|return
name|QMargins
argument_list|(
name|rhs
operator|.
name|left
argument_list|()
operator|+
name|lhs
argument_list|,
name|rhs
operator|.
name|top
argument_list|()
operator|+
name|lhs
argument_list|,
name|rhs
operator|.
name|right
argument_list|()
operator|+
name|lhs
argument_list|,
name|rhs
operator|.
name|bottom
argument_list|()
operator|+
name|lhs
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|operator
name|Q_DECL_CONSTEXPR
specifier|inline
name|QMargins
name|operator
operator|-
operator|(
specifier|const
name|QMargins
operator|&
name|lhs
operator|,
name|int
name|rhs
operator|)
block|{
return|return
name|QMargins
argument_list|(
name|lhs
operator|.
name|left
argument_list|()
operator|-
name|rhs
argument_list|,
name|lhs
operator|.
name|top
argument_list|()
operator|-
name|rhs
argument_list|,
name|lhs
operator|.
name|right
argument_list|()
operator|-
name|rhs
argument_list|,
name|lhs
operator|.
name|bottom
argument_list|()
operator|-
name|rhs
argument_list|)
return|;
block|}
end_expr_stmt
begin_function
name|Q_DECL_CONSTEXPR
specifier|inline
name|QMargins
name|operator
modifier|*
parameter_list|(
specifier|const
name|QMargins
modifier|&
name|margins
parameter_list|,
name|int
name|factor
parameter_list|)
block|{
return|return
name|QMargins
argument_list|(
name|margins
operator|.
name|left
argument_list|()
operator|*
name|factor
argument_list|,
name|margins
operator|.
name|top
argument_list|()
operator|*
name|factor
argument_list|,
name|margins
operator|.
name|right
argument_list|()
operator|*
name|factor
argument_list|,
name|margins
operator|.
name|bottom
argument_list|()
operator|*
name|factor
argument_list|)
return|;
block|}
end_function
begin_function
name|Q_DECL_CONSTEXPR
specifier|inline
name|QMargins
name|operator
modifier|*
parameter_list|(
name|int
name|factor
parameter_list|,
specifier|const
name|QMargins
modifier|&
name|margins
parameter_list|)
block|{
return|return
name|QMargins
argument_list|(
name|margins
operator|.
name|left
argument_list|()
operator|*
name|factor
argument_list|,
name|margins
operator|.
name|top
argument_list|()
operator|*
name|factor
argument_list|,
name|margins
operator|.
name|right
argument_list|()
operator|*
name|factor
argument_list|,
name|margins
operator|.
name|bottom
argument_list|()
operator|*
name|factor
argument_list|)
return|;
block|}
end_function
begin_function
name|Q_DECL_CONSTEXPR
specifier|inline
name|QMargins
name|operator
modifier|*
parameter_list|(
specifier|const
name|QMargins
modifier|&
name|margins
parameter_list|,
name|qreal
name|factor
parameter_list|)
block|{
return|return
name|QMargins
argument_list|(
name|qRound
argument_list|(
name|margins
operator|.
name|left
argument_list|()
operator|*
name|factor
argument_list|)
argument_list|,
name|qRound
argument_list|(
name|margins
operator|.
name|top
argument_list|()
operator|*
name|factor
argument_list|)
argument_list|,
name|qRound
argument_list|(
name|margins
operator|.
name|right
argument_list|()
operator|*
name|factor
argument_list|)
argument_list|,
name|qRound
argument_list|(
name|margins
operator|.
name|bottom
argument_list|()
operator|*
name|factor
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
name|Q_DECL_CONSTEXPR
specifier|inline
name|QMargins
name|operator
modifier|*
parameter_list|(
name|qreal
name|factor
parameter_list|,
specifier|const
name|QMargins
modifier|&
name|margins
parameter_list|)
block|{
return|return
name|QMargins
argument_list|(
name|qRound
argument_list|(
name|margins
operator|.
name|left
argument_list|()
operator|*
name|factor
argument_list|)
argument_list|,
name|qRound
argument_list|(
name|margins
operator|.
name|top
argument_list|()
operator|*
name|factor
argument_list|)
argument_list|,
name|qRound
argument_list|(
name|margins
operator|.
name|right
argument_list|()
operator|*
name|factor
argument_list|)
argument_list|,
name|qRound
argument_list|(
name|margins
operator|.
name|bottom
argument_list|()
operator|*
name|factor
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_expr_stmt
DECL|function|operator
name|Q_DECL_CONSTEXPR
specifier|inline
name|QMargins
name|operator
operator|/
operator|(
specifier|const
name|QMargins
operator|&
name|margins
operator|,
name|int
name|divisor
operator|)
block|{
return|return
name|QMargins
argument_list|(
name|margins
operator|.
name|left
argument_list|()
operator|/
name|divisor
argument_list|,
name|margins
operator|.
name|top
argument_list|()
operator|/
name|divisor
argument_list|,
name|margins
operator|.
name|right
argument_list|()
operator|/
name|divisor
argument_list|,
name|margins
operator|.
name|bottom
argument_list|()
operator|/
name|divisor
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|operator
name|Q_DECL_CONSTEXPR
specifier|inline
name|QMargins
name|operator
operator|/
operator|(
specifier|const
name|QMargins
operator|&
name|margins
operator|,
name|qreal
name|divisor
operator|)
block|{
return|return
name|QMargins
argument_list|(
name|qRound
argument_list|(
name|margins
operator|.
name|left
argument_list|()
operator|/
name|divisor
argument_list|)
argument_list|,
name|qRound
argument_list|(
name|margins
operator|.
name|top
argument_list|()
operator|/
name|divisor
argument_list|)
argument_list|,
name|qRound
argument_list|(
name|margins
operator|.
name|right
argument_list|()
operator|/
name|divisor
argument_list|)
argument_list|,
name|qRound
argument_list|(
name|margins
operator|.
name|bottom
argument_list|()
operator|/
name|divisor
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|member|operator
specifier|inline
name|QMargins
operator|&
name|QMargins
operator|::
name|operator
operator|+=
operator|(
specifier|const
name|QMargins
operator|&
name|margins
operator|)
block|{
return|return
operator|*
name|this
operator|=
operator|*
name|this
operator|+
name|margins
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QMargins
operator|&
name|QMargins
operator|::
name|operator
operator|-=
operator|(
specifier|const
name|QMargins
operator|&
name|margins
operator|)
block|{
return|return
operator|*
name|this
operator|=
operator|*
name|this
operator|-
name|margins
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QMargins
operator|&
name|QMargins
operator|::
name|operator
operator|+=
operator|(
name|int
name|margin
operator|)
block|{
name|m_left
operator|+=
name|margin
block|;
name|m_top
operator|+=
name|margin
block|;
name|m_right
operator|+=
name|margin
block|;
name|m_bottom
operator|+=
name|margin
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QMargins
operator|&
name|QMargins
operator|::
name|operator
operator|-=
operator|(
name|int
name|margin
operator|)
block|{
name|m_left
operator|-=
name|margin
block|;
name|m_top
operator|-=
name|margin
block|;
name|m_right
operator|-=
name|margin
block|;
name|m_bottom
operator|-=
name|margin
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QMargins
operator|&
name|QMargins
operator|::
name|operator
operator|*=
operator|(
name|int
name|factor
operator|)
block|{
return|return
operator|*
name|this
operator|=
operator|*
name|this
operator|*
name|factor
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QMargins
operator|&
name|QMargins
operator|::
name|operator
operator|/=
operator|(
name|int
name|divisor
operator|)
block|{
return|return
operator|*
name|this
operator|=
operator|*
name|this
operator|/
name|divisor
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QMargins
operator|&
name|QMargins
operator|::
name|operator
operator|*=
operator|(
name|qreal
name|factor
operator|)
block|{
return|return
operator|*
name|this
operator|=
operator|*
name|this
operator|*
name|factor
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QMargins
operator|&
name|QMargins
operator|::
name|operator
operator|/=
operator|(
name|qreal
name|divisor
operator|)
block|{
return|return
operator|*
name|this
operator|=
operator|*
name|this
operator|/
name|divisor
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|Q_DECL_CONSTEXPR
specifier|inline
name|QMargins
name|operator
operator|+
operator|(
specifier|const
name|QMargins
operator|&
name|margins
operator|)
block|{
return|return
name|margins
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|Q_DECL_CONSTEXPR
specifier|inline
name|QMargins
name|operator
operator|-
operator|(
specifier|const
name|QMargins
operator|&
name|margins
operator|)
block|{
return|return
name|QMargins
argument_list|(
operator|-
name|margins
operator|.
name|left
argument_list|()
argument_list|,
operator|-
name|margins
operator|.
name|top
argument_list|()
argument_list|,
operator|-
name|margins
operator|.
name|right
argument_list|()
argument_list|,
operator|-
name|margins
operator|.
name|bottom
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DEBUG_STREAM
end_ifndef
begin_expr_stmt
name|Q_CORE_EXPORT
name|QDebug
name|operator
operator|<<
operator|(
name|QDebug
operator|,
specifier|const
name|QMargins
operator|&
operator|)
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*****************************************************************************   QMarginsF class  *****************************************************************************/
end_comment
begin_decl_stmt
name|class
name|QMarginsF
block|{
name|public
label|:
name|Q_DECL_CONSTEXPR
name|QMarginsF
parameter_list|()
function_decl|;
name|Q_DECL_CONSTEXPR
name|QMarginsF
parameter_list|(
name|qreal
name|left
parameter_list|,
name|qreal
name|top
parameter_list|,
name|qreal
name|right
parameter_list|,
name|qreal
name|bottom
parameter_list|)
function_decl|;
name|Q_DECL_CONSTEXPR
name|QMarginsF
parameter_list|(
specifier|const
name|QMargins
modifier|&
name|margins
parameter_list|)
function_decl|;
name|Q_DECL_CONSTEXPR
name|bool
name|isNull
argument_list|()
specifier|const
expr_stmt|;
name|Q_DECL_CONSTEXPR
name|qreal
name|left
argument_list|()
specifier|const
expr_stmt|;
name|Q_DECL_CONSTEXPR
name|qreal
name|top
argument_list|()
specifier|const
expr_stmt|;
name|Q_DECL_CONSTEXPR
name|qreal
name|right
argument_list|()
specifier|const
expr_stmt|;
name|Q_DECL_CONSTEXPR
name|qreal
name|bottom
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setLeft
parameter_list|(
name|qreal
name|left
parameter_list|)
function_decl|;
name|void
name|setTop
parameter_list|(
name|qreal
name|top
parameter_list|)
function_decl|;
name|void
name|setRight
parameter_list|(
name|qreal
name|right
parameter_list|)
function_decl|;
name|void
name|setBottom
parameter_list|(
name|qreal
name|bottom
parameter_list|)
function_decl|;
name|QMarginsF
operator|&
name|operator
operator|+=
operator|(
specifier|const
name|QMarginsF
operator|&
name|margins
operator|)
expr_stmt|;
name|QMarginsF
operator|&
name|operator
operator|-=
operator|(
specifier|const
name|QMarginsF
operator|&
name|margins
operator|)
expr_stmt|;
name|QMarginsF
operator|&
name|operator
operator|+=
operator|(
name|qreal
name|addend
operator|)
expr_stmt|;
name|QMarginsF
operator|&
name|operator
operator|-=
operator|(
name|qreal
name|subtrahend
operator|)
expr_stmt|;
name|QMarginsF
operator|&
name|operator
operator|*=
operator|(
name|qreal
name|factor
operator|)
expr_stmt|;
name|QMarginsF
operator|&
name|operator
operator|/=
operator|(
name|qreal
name|divisor
operator|)
expr_stmt|;
name|Q_DECL_CONSTEXPR
specifier|inline
name|QMargins
name|toMargins
argument_list|()
specifier|const
expr_stmt|;
name|private
label|:
name|qreal
name|m_left
decl_stmt|;
name|qreal
name|m_top
decl_stmt|;
name|qreal
name|m_right
decl_stmt|;
name|qreal
name|m_bottom
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_expr_stmt
name|Q_DECLARE_TYPEINFO
argument_list|(
name|QMarginsF
argument_list|,
name|Q_MOVABLE_TYPE
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|/*****************************************************************************   QMarginsF stream functions  *****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DATASTREAM
end_ifndef
begin_expr_stmt
name|Q_CORE_EXPORT
name|QDataStream
operator|&
name|operator
operator|<<
operator|(
name|QDataStream
operator|&
operator|,
specifier|const
name|QMarginsF
operator|&
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_CORE_EXPORT
name|QDataStream
operator|&
name|operator
operator|>>
operator|(
name|QDataStream
operator|&
operator|,
name|QMarginsF
operator|&
operator|)
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*****************************************************************************   QMarginsF inline functions  *****************************************************************************/
end_comment
begin_expr_stmt
DECL|function|QMarginsF
name|Q_DECL_CONSTEXPR
specifier|inline
name|QMarginsF
operator|::
name|QMarginsF
argument_list|()
operator|:
name|m_left
argument_list|(
literal|0
argument_list|)
operator|,
name|m_top
argument_list|(
literal|0
argument_list|)
operator|,
name|m_right
argument_list|(
literal|0
argument_list|)
operator|,
name|m_bottom
argument_list|(
literal|0
argument_list|)
block|{}
DECL|function|QMarginsF
name|Q_DECL_CONSTEXPR
specifier|inline
name|QMarginsF
operator|::
name|QMarginsF
argument_list|(
argument|qreal aleft
argument_list|,
argument|qreal atop
argument_list|,
argument|qreal aright
argument_list|,
argument|qreal abottom
argument_list|)
operator|:
name|m_left
argument_list|(
name|aleft
argument_list|)
operator|,
name|m_top
argument_list|(
name|atop
argument_list|)
operator|,
name|m_right
argument_list|(
name|aright
argument_list|)
operator|,
name|m_bottom
argument_list|(
argument|abottom
argument_list|)
block|{}
DECL|function|QMarginsF
name|Q_DECL_CONSTEXPR
specifier|inline
name|QMarginsF
operator|::
name|QMarginsF
argument_list|(
specifier|const
name|QMargins
operator|&
name|margins
argument_list|)
operator|:
name|m_left
argument_list|(
name|margins
operator|.
name|left
argument_list|()
argument_list|)
operator|,
name|m_top
argument_list|(
name|margins
operator|.
name|top
argument_list|()
argument_list|)
operator|,
name|m_right
argument_list|(
name|margins
operator|.
name|right
argument_list|()
argument_list|)
operator|,
name|m_bottom
argument_list|(
argument|margins.bottom()
argument_list|)
block|{}
DECL|function|isNull
name|Q_DECL_CONSTEXPR
specifier|inline
name|bool
name|QMarginsF
operator|::
name|isNull
argument_list|()
specifier|const
block|{
return|return
name|qFuzzyIsNull
argument_list|(
name|m_left
argument_list|)
operator|&&
name|qFuzzyIsNull
argument_list|(
name|m_top
argument_list|)
operator|&&
name|qFuzzyIsNull
argument_list|(
name|m_right
argument_list|)
operator|&&
name|qFuzzyIsNull
argument_list|(
name|m_bottom
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|left
name|Q_DECL_CONSTEXPR
specifier|inline
name|qreal
name|QMarginsF
operator|::
name|left
argument_list|()
specifier|const
block|{
return|return
name|m_left
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|top
name|Q_DECL_CONSTEXPR
specifier|inline
name|qreal
name|QMarginsF
operator|::
name|top
argument_list|()
specifier|const
block|{
return|return
name|m_top
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|right
name|Q_DECL_CONSTEXPR
specifier|inline
name|qreal
name|QMarginsF
operator|::
name|right
argument_list|()
specifier|const
block|{
return|return
name|m_right
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|bottom
name|Q_DECL_CONSTEXPR
specifier|inline
name|qreal
name|QMarginsF
operator|::
name|bottom
argument_list|()
specifier|const
block|{
return|return
name|m_bottom
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|setLeft
specifier|inline
name|void
name|QMarginsF
operator|::
name|setLeft
argument_list|(
argument|qreal aleft
argument_list|)
block|{
name|m_left
operator|=
name|aleft
block|; }
DECL|function|setTop
specifier|inline
name|void
name|QMarginsF
operator|::
name|setTop
argument_list|(
argument|qreal atop
argument_list|)
block|{
name|m_top
operator|=
name|atop
block|; }
DECL|function|setRight
specifier|inline
name|void
name|QMarginsF
operator|::
name|setRight
argument_list|(
argument|qreal aright
argument_list|)
block|{
name|m_right
operator|=
name|aright
block|; }
DECL|function|setBottom
specifier|inline
name|void
name|QMarginsF
operator|::
name|setBottom
argument_list|(
argument|qreal abottom
argument_list|)
block|{
name|m_bottom
operator|=
name|abottom
block|; }
DECL|function|operator
name|Q_DECL_CONSTEXPR
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QMarginsF
operator|&
name|lhs
operator|,
specifier|const
name|QMarginsF
operator|&
name|rhs
operator|)
block|{
return|return
name|qFuzzyCompare
argument_list|(
name|lhs
operator|.
name|left
argument_list|()
argument_list|,
name|rhs
operator|.
name|left
argument_list|()
argument_list|)
operator|&&
name|qFuzzyCompare
argument_list|(
name|lhs
operator|.
name|top
argument_list|()
argument_list|,
name|rhs
operator|.
name|top
argument_list|()
argument_list|)
operator|&&
name|qFuzzyCompare
argument_list|(
name|lhs
operator|.
name|right
argument_list|()
argument_list|,
name|rhs
operator|.
name|right
argument_list|()
argument_list|)
operator|&&
name|qFuzzyCompare
argument_list|(
name|lhs
operator|.
name|bottom
argument_list|()
argument_list|,
name|rhs
operator|.
name|bottom
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|operator
name|Q_DECL_CONSTEXPR
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|QMarginsF
operator|&
name|lhs
operator|,
specifier|const
name|QMarginsF
operator|&
name|rhs
operator|)
block|{
return|return
operator|!
name|operator
operator|==
operator|(
name|lhs
operator|,
name|rhs
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|operator
name|Q_DECL_CONSTEXPR
specifier|inline
name|QMarginsF
name|operator
operator|+
operator|(
specifier|const
name|QMarginsF
operator|&
name|lhs
operator|,
specifier|const
name|QMarginsF
operator|&
name|rhs
operator|)
block|{
return|return
name|QMarginsF
argument_list|(
name|lhs
operator|.
name|left
argument_list|()
operator|+
name|rhs
operator|.
name|left
argument_list|()
argument_list|,
name|lhs
operator|.
name|top
argument_list|()
operator|+
name|rhs
operator|.
name|top
argument_list|()
argument_list|,
name|lhs
operator|.
name|right
argument_list|()
operator|+
name|rhs
operator|.
name|right
argument_list|()
argument_list|,
name|lhs
operator|.
name|bottom
argument_list|()
operator|+
name|rhs
operator|.
name|bottom
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|operator
name|Q_DECL_CONSTEXPR
specifier|inline
name|QMarginsF
name|operator
operator|-
operator|(
specifier|const
name|QMarginsF
operator|&
name|lhs
operator|,
specifier|const
name|QMarginsF
operator|&
name|rhs
operator|)
block|{
return|return
name|QMarginsF
argument_list|(
name|lhs
operator|.
name|left
argument_list|()
operator|-
name|rhs
operator|.
name|left
argument_list|()
argument_list|,
name|lhs
operator|.
name|top
argument_list|()
operator|-
name|rhs
operator|.
name|top
argument_list|()
argument_list|,
name|lhs
operator|.
name|right
argument_list|()
operator|-
name|rhs
operator|.
name|right
argument_list|()
argument_list|,
name|lhs
operator|.
name|bottom
argument_list|()
operator|-
name|rhs
operator|.
name|bottom
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|operator
name|Q_DECL_CONSTEXPR
specifier|inline
name|QMarginsF
name|operator
operator|+
operator|(
specifier|const
name|QMarginsF
operator|&
name|lhs
operator|,
name|qreal
name|rhs
operator|)
block|{
return|return
name|QMarginsF
argument_list|(
name|lhs
operator|.
name|left
argument_list|()
operator|+
name|rhs
argument_list|,
name|lhs
operator|.
name|top
argument_list|()
operator|+
name|rhs
argument_list|,
name|lhs
operator|.
name|right
argument_list|()
operator|+
name|rhs
argument_list|,
name|lhs
operator|.
name|bottom
argument_list|()
operator|+
name|rhs
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|operator
name|Q_DECL_CONSTEXPR
specifier|inline
name|QMarginsF
name|operator
operator|+
operator|(
name|qreal
name|lhs
operator|,
specifier|const
name|QMarginsF
operator|&
name|rhs
operator|)
block|{
return|return
name|QMarginsF
argument_list|(
name|rhs
operator|.
name|left
argument_list|()
operator|+
name|lhs
argument_list|,
name|rhs
operator|.
name|top
argument_list|()
operator|+
name|lhs
argument_list|,
name|rhs
operator|.
name|right
argument_list|()
operator|+
name|lhs
argument_list|,
name|rhs
operator|.
name|bottom
argument_list|()
operator|+
name|lhs
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|operator
name|Q_DECL_CONSTEXPR
specifier|inline
name|QMarginsF
name|operator
operator|-
operator|(
specifier|const
name|QMarginsF
operator|&
name|lhs
operator|,
name|qreal
name|rhs
operator|)
block|{
return|return
name|QMarginsF
argument_list|(
name|lhs
operator|.
name|left
argument_list|()
operator|-
name|rhs
argument_list|,
name|lhs
operator|.
name|top
argument_list|()
operator|-
name|rhs
argument_list|,
name|lhs
operator|.
name|right
argument_list|()
operator|-
name|rhs
argument_list|,
name|lhs
operator|.
name|bottom
argument_list|()
operator|-
name|rhs
argument_list|)
return|;
block|}
end_expr_stmt
begin_function
name|Q_DECL_CONSTEXPR
specifier|inline
name|QMarginsF
name|operator
modifier|*
parameter_list|(
specifier|const
name|QMarginsF
modifier|&
name|lhs
parameter_list|,
name|qreal
name|rhs
parameter_list|)
block|{
return|return
name|QMarginsF
argument_list|(
name|lhs
operator|.
name|left
argument_list|()
operator|*
name|rhs
argument_list|,
name|lhs
operator|.
name|top
argument_list|()
operator|*
name|rhs
argument_list|,
name|lhs
operator|.
name|right
argument_list|()
operator|*
name|rhs
argument_list|,
name|lhs
operator|.
name|bottom
argument_list|()
operator|*
name|rhs
argument_list|)
return|;
block|}
end_function
begin_function
name|Q_DECL_CONSTEXPR
specifier|inline
name|QMarginsF
name|operator
modifier|*
parameter_list|(
name|qreal
name|lhs
parameter_list|,
specifier|const
name|QMarginsF
modifier|&
name|rhs
parameter_list|)
block|{
return|return
name|QMarginsF
argument_list|(
name|rhs
operator|.
name|left
argument_list|()
operator|*
name|lhs
argument_list|,
name|rhs
operator|.
name|top
argument_list|()
operator|*
name|lhs
argument_list|,
name|rhs
operator|.
name|right
argument_list|()
operator|*
name|lhs
argument_list|,
name|rhs
operator|.
name|bottom
argument_list|()
operator|*
name|lhs
argument_list|)
return|;
block|}
end_function
begin_expr_stmt
DECL|function|operator
name|Q_DECL_CONSTEXPR
specifier|inline
name|QMarginsF
name|operator
operator|/
operator|(
specifier|const
name|QMarginsF
operator|&
name|lhs
operator|,
name|qreal
name|divisor
operator|)
block|{
return|return
name|QMarginsF
argument_list|(
name|lhs
operator|.
name|left
argument_list|()
operator|/
name|divisor
argument_list|,
name|lhs
operator|.
name|top
argument_list|()
operator|/
name|divisor
argument_list|,
name|lhs
operator|.
name|right
argument_list|()
operator|/
name|divisor
argument_list|,
name|lhs
operator|.
name|bottom
argument_list|()
operator|/
name|divisor
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|member|operator
specifier|inline
name|QMarginsF
operator|&
name|QMarginsF
operator|::
name|operator
operator|+=
operator|(
specifier|const
name|QMarginsF
operator|&
name|margins
operator|)
block|{
return|return
operator|*
name|this
operator|=
operator|*
name|this
operator|+
name|margins
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QMarginsF
operator|&
name|QMarginsF
operator|::
name|operator
operator|-=
operator|(
specifier|const
name|QMarginsF
operator|&
name|margins
operator|)
block|{
return|return
operator|*
name|this
operator|=
operator|*
name|this
operator|-
name|margins
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QMarginsF
operator|&
name|QMarginsF
operator|::
name|operator
operator|+=
operator|(
name|qreal
name|addend
operator|)
block|{
name|m_left
operator|+=
name|addend
block|;
name|m_top
operator|+=
name|addend
block|;
name|m_right
operator|+=
name|addend
block|;
name|m_bottom
operator|+=
name|addend
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QMarginsF
operator|&
name|QMarginsF
operator|::
name|operator
operator|-=
operator|(
name|qreal
name|subtrahend
operator|)
block|{
name|m_left
operator|-=
name|subtrahend
block|;
name|m_top
operator|-=
name|subtrahend
block|;
name|m_right
operator|-=
name|subtrahend
block|;
name|m_bottom
operator|-=
name|subtrahend
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QMarginsF
operator|&
name|QMarginsF
operator|::
name|operator
operator|*=
operator|(
name|qreal
name|factor
operator|)
block|{
return|return
operator|*
name|this
operator|=
operator|*
name|this
operator|*
name|factor
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QMarginsF
operator|&
name|QMarginsF
operator|::
name|operator
operator|/=
operator|(
name|qreal
name|divisor
operator|)
block|{
return|return
operator|*
name|this
operator|=
operator|*
name|this
operator|/
name|divisor
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|Q_DECL_CONSTEXPR
specifier|inline
name|QMarginsF
name|operator
operator|+
operator|(
specifier|const
name|QMarginsF
operator|&
name|margins
operator|)
block|{
return|return
name|margins
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|Q_DECL_CONSTEXPR
specifier|inline
name|QMarginsF
name|operator
operator|-
operator|(
specifier|const
name|QMarginsF
operator|&
name|margins
operator|)
block|{
return|return
name|QMarginsF
argument_list|(
operator|-
name|margins
operator|.
name|left
argument_list|()
argument_list|,
operator|-
name|margins
operator|.
name|top
argument_list|()
argument_list|,
operator|-
name|margins
operator|.
name|right
argument_list|()
argument_list|,
operator|-
name|margins
operator|.
name|bottom
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|Q_DECL_CONSTEXPR
specifier|inline
name|QMargins
name|QMarginsF
operator|::
name|toMargins
argument_list|()
specifier|const
block|{
return|return
name|QMargins
argument_list|(
name|qRound
argument_list|(
name|m_left
argument_list|)
argument_list|,
name|qRound
argument_list|(
name|m_top
argument_list|)
argument_list|,
name|qRound
argument_list|(
name|m_right
argument_list|)
argument_list|,
name|qRound
argument_list|(
name|m_bottom
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DEBUG_STREAM
end_ifndef
begin_expr_stmt
name|Q_CORE_EXPORT
name|QDebug
name|operator
operator|<<
operator|(
name|QDebug
operator|,
specifier|const
name|QMarginsF
operator|&
operator|)
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QMARGINS_H
end_comment
end_unit
