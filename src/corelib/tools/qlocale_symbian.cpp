begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QDate>
end_include
begin_include
include|#
directive|include
file|<QLocale>
end_include
begin_include
include|#
directive|include
file|<QTime>
end_include
begin_include
include|#
directive|include
file|<QVariant>
end_include
begin_include
include|#
directive|include
file|<QThread>
end_include
begin_include
include|#
directive|include
file|<QStringList>
end_include
begin_include
include|#
directive|include
file|<e32std.h>
end_include
begin_include
include|#
directive|include
file|<e32const.h>
end_include
begin_include
include|#
directive|include
file|<e32base.h>
end_include
begin_include
include|#
directive|include
file|<e32property.h>
end_include
begin_include
include|#
directive|include
file|<bacntf.h>
end_include
begin_include
include|#
directive|include
file|"private/qcore_symbian_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qcoreapplication_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qlocale_p.h"
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|_s60Locale
specifier|static
name|TExtendedLocale
name|_s60Locale
decl_stmt|;
end_decl_stmt
begin_comment
comment|// Type definitions for runtime resolved function pointers
end_comment
begin_typedef
DECL|typedef|FormatFunc
typedef|typedef
name|void
function_decl|(
modifier|*
name|FormatFunc
function_decl|)
parameter_list|(
name|TTime
modifier|&
parameter_list|,
name|TDes
modifier|&
parameter_list|,
specifier|const
name|TDesC
modifier|&
parameter_list|,
specifier|const
name|TLocale
modifier|&
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|FormatSpecFunc
typedef|typedef
name|TPtrC
function_decl|(
modifier|*
name|FormatSpecFunc
function_decl|)
parameter_list|(
name|TExtendedLocale
modifier|&
parameter_list|)
function_decl|;
end_typedef
begin_comment
comment|// Runtime resolved functions
end_comment
begin_decl_stmt
DECL|variable|ptrTimeFormatL
specifier|static
name|FormatFunc
name|ptrTimeFormatL
init|=
name|NULL
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|ptrGetTimeFormatSpec
specifier|static
name|FormatSpecFunc
name|ptrGetTimeFormatSpec
init|=
name|NULL
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|ptrGetLongDateFormatSpec
specifier|static
name|FormatSpecFunc
name|ptrGetLongDateFormatSpec
init|=
name|NULL
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|ptrGetShortDateFormatSpec
specifier|static
name|FormatSpecFunc
name|ptrGetShortDateFormatSpec
init|=
name|NULL
decl_stmt|;
end_decl_stmt
begin_comment
comment|// Default functions if functions cannot be resolved
end_comment
begin_function
DECL|function|defaultTimeFormatL
specifier|static
name|void
name|defaultTimeFormatL
parameter_list|(
name|TTime
modifier|&
parameter_list|,
name|TDes
modifier|&
name|des
parameter_list|,
specifier|const
name|TDesC
modifier|&
parameter_list|,
specifier|const
name|TLocale
modifier|&
parameter_list|)
block|{
name|des
operator|.
name|Zero
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|defaultFormatSpec
specifier|static
name|TPtrC
name|defaultFormatSpec
parameter_list|(
name|TExtendedLocale
modifier|&
parameter_list|)
block|{
return|return
name|TPtrC
argument_list|(
name|KNullDesC
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*   Definition of struct for mapping Symbian to ISO locale */
end_comment
begin_struct
DECL|struct|symbianToISO
struct|struct
name|symbianToISO
block|{
DECL|member|symbian_language
name|int
name|symbian_language
decl_stmt|;
DECL|member|iso_name
name|char
name|iso_name
index|[
literal|8
index|]
decl_stmt|;
DECL|member|uilanguage
name|char
name|uilanguage
index|[
literal|8
index|]
decl_stmt|;
block|}
struct|;
end_struct
begin_comment
comment|/*   Mapping from Symbian to ISO locale.   NOTE: This array should be sorted by the first column! */
end_comment
begin_decl_stmt
DECL|variable|symbian_to_iso_list
specifier|static
specifier|const
name|symbianToISO
name|symbian_to_iso_list
index|[]
init|=
block|{
block|{
name|ELangEnglish
block|,
literal|"en_GB"
block|,
literal|"en"
block|}
block|,
comment|// 1
block|{
name|ELangFrench
block|,
literal|"fr_FR"
block|,
literal|"fr"
block|}
block|,
comment|// 2
block|{
name|ELangGerman
block|,
literal|"de_DE"
block|,
literal|"de"
block|}
block|,
comment|// 3
block|{
name|ELangSpanish
block|,
literal|"es_ES"
block|,
literal|"es"
block|}
block|,
comment|// 4
block|{
name|ELangItalian
block|,
literal|"it_IT"
block|,
literal|"it"
block|}
block|,
comment|// 5
block|{
name|ELangSwedish
block|,
literal|"sv_SE"
block|,
literal|"sv"
block|}
block|,
comment|// 6
block|{
name|ELangDanish
block|,
literal|"da_DK"
block|,
literal|"da"
block|}
block|,
comment|// 7
block|{
name|ELangNorwegian
block|,
literal|"nb_NO"
block|,
literal|"nb"
block|}
block|,
comment|// 8
block|{
name|ELangFinnish
block|,
literal|"fi_FI"
block|,
literal|"fi"
block|}
block|,
comment|// 9
block|{
name|ELangAmerican
block|,
literal|"en_US"
block|,
literal|"en-US"
block|}
block|,
comment|// 10
block|{
name|ELangPortuguese
block|,
literal|"pt_PT"
block|,
literal|"pt"
block|}
block|,
comment|// 13
block|{
name|ELangTurkish
block|,
literal|"tr_TR"
block|,
literal|"tr"
block|}
block|,
comment|// 14
block|{
name|ELangIcelandic
block|,
literal|"is_IS"
block|,
literal|"is"
block|}
block|,
comment|// 15
block|{
name|ELangRussian
block|,
literal|"ru_RU"
block|,
literal|"ru"
block|}
block|,
comment|// 16
block|{
name|ELangHungarian
block|,
literal|"hu_HU"
block|,
literal|"hu"
block|}
block|,
comment|// 17
block|{
name|ELangDutch
block|,
literal|"nl_NL"
block|,
literal|"nl"
block|}
block|,
comment|// 18
block|{
name|ELangCzech
block|,
literal|"cs_CZ"
block|,
literal|"cs"
block|}
block|,
comment|// 25
block|{
name|ELangSlovak
block|,
literal|"sk_SK"
block|,
literal|"sk"
block|}
block|,
comment|// 26
block|{
name|ELangPolish
block|,
literal|"pl_PL"
block|,
literal|"pl"
block|}
block|,
comment|// 27
block|{
name|ELangSlovenian
block|,
literal|"sl_SI"
block|,
literal|"sl"
block|}
block|,
comment|// 28
block|{
name|ELangTaiwanChinese
block|,
literal|"zh_TW"
block|,
literal|"zh-TW"
block|}
block|,
comment|// 29
block|{
name|ELangHongKongChinese
block|,
literal|"zh_HK"
block|,
literal|"zh-HK"
block|}
block|,
comment|// 30
block|{
name|ELangPrcChinese
block|,
literal|"zh_CN"
block|,
literal|"zh"
block|}
block|,
comment|// 31
block|{
name|ELangJapanese
block|,
literal|"ja_JP"
block|,
literal|"ja"
block|}
block|,
comment|// 32
block|{
name|ELangThai
block|,
literal|"th_TH"
block|,
literal|"th"
block|}
block|,
comment|// 33
block|{
name|ELangArabic
block|,
literal|"ar_AE"
block|,
literal|"ar"
block|}
block|,
comment|// 37
block|{
name|ELangTagalog
block|,
literal|"tl_PH"
block|,
literal|"tl"
block|}
block|,
comment|// 39
block|{
name|ELangBulgarian
block|,
literal|"bg_BG"
block|,
literal|"bg"
block|}
block|,
comment|// 42
block|{
name|ELangCatalan
block|,
literal|"ca_ES"
block|,
literal|"ca"
block|}
block|,
comment|// 44
block|{
name|ELangCroatian
block|,
literal|"hr_HR"
block|,
literal|"hr"
block|}
block|,
comment|// 45
block|{
name|ELangEstonian
block|,
literal|"et_EE"
block|,
literal|"et"
block|}
block|,
comment|// 49
block|{
name|ELangFarsi
block|,
literal|"fa_IR"
block|,
literal|"fa"
block|}
block|,
comment|// 50
block|{
name|ELangCanadianFrench
block|,
literal|"fr_CA"
block|,
literal|"fr-CA"
block|}
block|,
comment|// 51
block|{
name|ELangGreek
block|,
literal|"el_GR"
block|,
literal|"el"
block|}
block|,
comment|// 54
block|{
name|ELangHebrew
block|,
literal|"he_IL"
block|,
literal|"he"
block|}
block|,
comment|// 57
block|{
name|ELangHindi
block|,
literal|"hi_IN"
block|,
literal|"hi"
block|}
block|,
comment|// 58
block|{
name|ELangIndonesian
block|,
literal|"id_ID"
block|,
literal|"id"
block|}
block|,
comment|// 59
block|{
literal|63
comment|/*ELangKazakh*/
block|,
literal|"kk_KZ"
block|,
literal|"kk"
block|}
block|,
comment|// 63
block|{
name|ELangKorean
block|,
literal|"ko_KO"
block|,
literal|"ko"
block|}
block|,
comment|// 65
block|{
name|ELangLatvian
block|,
literal|"lv_LV"
block|,
literal|"lv"
block|}
block|,
comment|// 67
block|{
name|ELangLithuanian
block|,
literal|"lt_LT"
block|,
literal|"lt"
block|}
block|,
comment|// 68
block|{
name|ELangMalay
block|,
literal|"ms_MY"
block|,
literal|"ms"
block|}
block|,
comment|// 70
block|{
name|ELangNorwegianNynorsk
block|,
literal|"nn_NO"
block|,
literal|"nn"
block|}
block|,
comment|// 75
block|{
name|ELangBrazilianPortuguese
block|,
literal|"pt_BR"
block|,
literal|"pt-BR"
block|}
block|,
comment|// 76
block|{
name|ELangRomanian
block|,
literal|"ro_RO"
block|,
literal|"ro"
block|}
block|,
comment|// 78
block|{
name|ELangSerbian
block|,
literal|"sr_RS"
block|,
literal|"sr"
block|}
block|,
comment|// 79
block|{
name|ELangLatinAmericanSpanish
block|,
literal|"es_419"
block|,
literal|"es-419"
block|}
block|,
comment|// 83
block|{
name|ELangUkrainian
block|,
literal|"uk_UA"
block|,
literal|"uk"
block|}
block|,
comment|// 93
block|{
name|ELangUrdu
block|,
literal|"ur_PK"
block|,
literal|"ur"
block|}
block|,
comment|// 94 - India/Pakistan
block|{
name|ELangVietnamese
block|,
literal|"vi_VN"
block|,
literal|"vi"
block|}
block|,
comment|// 96
ifdef|#
directive|ifdef
name|__E32LANG_H__
comment|// 5.0
block|{
name|ELangBasque
block|,
literal|"eu_ES"
block|,
literal|"eu"
block|}
block|,
comment|// 102
block|{
name|ELangGalician
block|,
literal|"gl_ES"
block|,
literal|"gl"
block|}
block|,
comment|// 103
endif|#
directive|endif
if|#
directive|if
operator|!
name|defined
argument_list|(
name|__SERIES60_31__
argument_list|)
block|{
name|ELangEnglish_Apac
block|,
literal|"en_GB"
block|,
literal|"en"
block|}
block|,
comment|// 129
block|{
name|ELangEnglish_Taiwan
block|,
literal|"en_TW"
block|,
literal|"en-TW"
block|}
block|,
comment|// 157 ### Not supported by CLDR
block|{
name|ELangEnglish_HongKong
block|,
literal|"en_HK"
block|,
literal|"en-HK"
block|}
block|,
comment|// 158
block|{
name|ELangEnglish_Prc
block|,
literal|"en_CN"
block|,
literal|"en-CN"
block|}
block|,
comment|// 159 ### Not supported by CLDR
block|{
name|ELangEnglish_Japan
block|,
literal|"en_JP"
block|,
literal|"en"
block|}
block|,
comment|// 160 ### Not supported by CLDR
block|{
name|ELangEnglish_Thailand
block|,
literal|"en_TH"
block|,
literal|"en"
block|}
block|,
comment|// 161 ### Not supported by CLDR
block|{
literal|230
comment|/*ELangEnglish_India*/
block|,
literal|"en_IN"
block|,
literal|"en"
block|}
block|,
comment|// 230
block|{
name|ELangMalay_Apac
block|,
literal|"ms_MY"
block|,
literal|"ms"
block|}
block|,
comment|// 326
endif|#
directive|endif
block|{
literal|327
comment|/*ELangIndonesian_Apac*/
block|,
literal|"id_ID"
block|,
literal|"id"
block|}
comment|// 327 - appeared in Symbian^3
block|}
decl_stmt|;
end_decl_stmt
begin_enum
DECL|enum|LocaleNameType
enum|enum
name|LocaleNameType
block|{
DECL|enumerator|ISO
name|ISO
block|,
DECL|enumerator|UILanguage
name|UILanguage
block|}
enum|;
end_enum
begin_function
DECL|function|qt_resolveSymbianLocaleName
name|QByteArray
name|qt_resolveSymbianLocaleName
parameter_list|(
name|int
name|code
parameter_list|,
name|LocaleNameType
name|type
parameter_list|)
block|{
comment|//Number of Symbian to ISO locale mappings
specifier|static
specifier|const
name|int
name|symbian_to_iso_count
init|=
sizeof|sizeof
argument_list|(
name|symbian_to_iso_list
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|symbianToISO
argument_list|)
decl_stmt|;
name|int
name|cmp
init|=
name|code
operator|-
name|symbian_to_iso_list
index|[
literal|0
index|]
operator|.
name|symbian_language
decl_stmt|;
if|if
condition|(
name|cmp
operator|<
literal|0
condition|)
return|return
literal|0
return|;
if|if
condition|(
name|cmp
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|type
operator|==
name|ISO
condition|)
return|return
name|symbian_to_iso_list
index|[
literal|0
index|]
operator|.
name|iso_name
return|;
return|return
name|symbian_to_iso_list
index|[
literal|0
index|]
operator|.
name|uilanguage
return|;
block|}
name|int
name|begin
init|=
literal|0
decl_stmt|;
name|int
name|end
init|=
name|symbian_to_iso_count
decl_stmt|;
while|while
condition|(
name|end
operator|-
name|begin
operator|>
literal|1
condition|)
block|{
name|uint
name|mid
init|=
operator|(
name|begin
operator|+
name|end
operator|)
operator|/
literal|2
decl_stmt|;
specifier|const
name|symbianToISO
modifier|*
name|elt
init|=
name|symbian_to_iso_list
operator|+
name|mid
decl_stmt|;
name|int
name|cmp
init|=
name|code
operator|-
name|elt
operator|->
name|symbian_language
decl_stmt|;
if|if
condition|(
name|cmp
operator|<
literal|0
condition|)
block|{
name|end
operator|=
name|mid
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cmp
operator|>
literal|0
condition|)
block|{
name|begin
operator|=
name|mid
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|type
operator|==
name|ISO
condition|)
return|return
name|elt
operator|->
name|iso_name
return|;
return|return
name|elt
operator|->
name|uilanguage
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     Returns ISO name corresponding to the Symbian locale code \a sys_fmt. */
end_comment
begin_function
DECL|function|qt_symbianLocaleName
name|QByteArray
name|qt_symbianLocaleName
parameter_list|(
name|int
name|code
parameter_list|)
block|{
return|return
name|qt_resolveSymbianLocaleName
argument_list|(
name|code
argument_list|,
name|ISO
argument_list|)
return|;
block|}
end_function
begin_comment
comment|// order is: normal, abbr, nmode, nmode+abbr
end_comment
begin_decl_stmt
DECL|variable|us_locale_dep
specifier|static
specifier|const
name|char
modifier|*
name|us_locale_dep
index|[]
init|=
block|{
literal|"MM"
block|,
literal|"dd"
block|,
literal|"yyyy"
block|,
literal|"MM"
block|,
literal|"dd"
block|,
literal|"M"
block|,
literal|"d"
block|,
literal|"yy"
block|,
literal|"M"
block|,
literal|"d"
block|,
literal|"MMMM"
block|,
literal|"dd"
block|,
literal|"yyyy"
block|,
literal|"MMMM"
block|,
literal|"dd"
block|,
literal|"MMM"
block|,
literal|"d"
block|,
literal|"yy"
block|,
literal|"MMM"
block|,
literal|"d"
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|eu_locale_dep
specifier|static
specifier|const
name|char
modifier|*
name|eu_locale_dep
index|[]
init|=
block|{
literal|"dd"
block|,
literal|"MM"
block|,
literal|"yyyy"
block|,
literal|"dd"
block|,
literal|"MM"
block|,
literal|"d"
block|,
literal|"M"
block|,
literal|"yy"
block|,
literal|"d"
block|,
literal|"M"
block|,
literal|"dd"
block|,
literal|"MMMM"
block|,
literal|"yyyy"
block|,
literal|"dd"
block|,
literal|"MMMM"
block|,
literal|"d"
block|,
literal|"MMM"
block|,
literal|"yy"
block|,
literal|"d"
block|,
literal|"MMM"
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|jp_locale_dep
specifier|static
specifier|const
name|char
modifier|*
name|jp_locale_dep
index|[]
init|=
block|{
literal|"yyyy"
block|,
literal|"MM"
block|,
literal|"dd"
block|,
literal|"MM"
block|,
literal|"dd"
block|,
literal|"yy"
block|,
literal|"M"
block|,
literal|"d"
block|,
literal|"M"
block|,
literal|"d"
block|,
literal|"yyyy"
block|,
literal|"MMMM"
block|,
literal|"dd"
block|,
literal|"MMMM"
block|,
literal|"dd"
block|,
literal|"yy"
block|,
literal|"MMM"
block|,
literal|"d"
block|,
literal|"MMM"
block|,
literal|"d"
block|}
decl_stmt|;
end_decl_stmt
begin_comment
comment|/*!     Returns a Qt version of the given \a sys_fmt Symbian locale format string. */
end_comment
begin_function
DECL|function|s60ToQtFormat
specifier|static
name|QString
name|s60ToQtFormat
parameter_list|(
specifier|const
name|QString
modifier|&
name|sys_fmt
parameter_list|)
block|{
name|TLocale
modifier|*
name|locale
init|=
name|_s60Locale
operator|.
name|GetLocale
argument_list|()
decl_stmt|;
name|QString
name|result
decl_stmt|;
name|QString
name|other
decl_stmt|;
name|QString
name|qtformatchars
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"adhmsyzAHM"
argument_list|)
decl_stmt|;
name|QChar
name|c
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|bool
name|open_escape
init|=
literal|false
decl_stmt|;
name|bool
name|abbrev_next
init|=
literal|false
decl_stmt|;
name|bool
name|locale_indep_ordering
init|=
literal|false
decl_stmt|;
name|bool
name|minus_mode
init|=
literal|false
decl_stmt|;
name|bool
name|plus_mode
init|=
literal|false
decl_stmt|;
name|bool
name|n_mode
init|=
literal|false
decl_stmt|;
name|TTimeFormat
name|tf
init|=
name|locale
operator|->
name|TimeFormat
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|sys_fmt
operator|.
name|size
argument_list|()
condition|)
block|{
name|c
operator|=
name|sys_fmt
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
comment|// let formatting thru
if|if
condition|(
name|c
operator|.
name|unicode
argument_list|()
operator|==
literal|'%'
condition|)
block|{
comment|// if we have gathered string, concat it
if|if
condition|(
operator|!
name|other
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|result
operator|+=
name|other
expr_stmt|;
name|other
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|// if we have open escape, end it
if|if
condition|(
name|open_escape
condition|)
block|{
name|result
operator|+=
name|QLatin1Char
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|open_escape
operator|=
literal|false
expr_stmt|;
block|}
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|>=
name|sys_fmt
operator|.
name|size
argument_list|()
condition|)
break|break;
name|c
operator|=
name|sys_fmt
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
comment|// process specials
name|abbrev_next
operator|=
name|c
operator|.
name|unicode
argument_list|()
operator|==
literal|'*'
expr_stmt|;
name|plus_mode
operator|=
name|c
operator|.
name|unicode
argument_list|()
operator|==
literal|'+'
expr_stmt|;
name|minus_mode
operator|=
name|c
operator|.
name|unicode
argument_list|()
operator|==
literal|'-'
expr_stmt|;
if|if
condition|(
name|abbrev_next
operator|||
name|plus_mode
operator|||
name|minus_mode
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|>=
name|sys_fmt
operator|.
name|size
argument_list|()
condition|)
break|break;
name|c
operator|=
name|sys_fmt
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|plus_mode
operator|||
name|minus_mode
condition|)
block|{
comment|// break on undefined plus/minus mode
if|if
condition|(
name|c
operator|.
name|unicode
argument_list|()
operator|!=
literal|'A'
operator|&&
name|c
operator|.
name|unicode
argument_list|()
operator|!=
literal|'B'
condition|)
break|break;
block|}
block|}
switch|switch
condition|(
name|c
operator|.
name|unicode
argument_list|()
condition|)
block|{
case|case
literal|'F'
case|:
block|{
comment|// locale indep mode on
name|locale_indep_ordering
operator|=
literal|true
expr_stmt|;
break|break;
block|}
case|case
literal|'/'
case|:
block|{
comment|// date sep 0-3
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|>=
name|sys_fmt
operator|.
name|size
argument_list|()
condition|)
break|break;
name|c
operator|=
name|sys_fmt
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|.
name|isDigit
argument_list|()
operator|&&
name|c
operator|.
name|digitValue
argument_list|()
operator|<=
literal|3
condition|)
block|{
name|TChar
name|s
init|=
name|locale
operator|->
name|DateSeparator
argument_list|(
name|c
operator|.
name|digitValue
argument_list|()
argument_list|)
decl_stmt|;
name|TUint
name|val
init|=
name|s
decl_stmt|;
comment|// some indexes return zero for empty
if|if
condition|(
name|val
operator|>
literal|0
condition|)
name|result
operator|+=
name|QChar
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
literal|'D'
case|:
block|{
if|if
condition|(
operator|!
name|locale_indep_ordering
condition|)
break|break;
if|if
condition|(
operator|!
name|abbrev_next
condition|)
name|result
operator|+=
name|QLatin1String
argument_list|(
literal|"dd"
argument_list|)
expr_stmt|;
else|else
name|result
operator|+=
name|QLatin1Char
argument_list|(
literal|'d'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'M'
case|:
block|{
if|if
condition|(
operator|!
name|locale_indep_ordering
condition|)
break|break;
if|if
condition|(
operator|!
name|n_mode
condition|)
block|{
if|if
condition|(
operator|!
name|abbrev_next
condition|)
name|result
operator|+=
name|QLatin1String
argument_list|(
literal|"MM"
argument_list|)
expr_stmt|;
else|else
name|result
operator|+=
name|QLatin1String
argument_list|(
literal|"M"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|abbrev_next
condition|)
name|result
operator|+=
name|QLatin1String
argument_list|(
literal|"MMMM"
argument_list|)
expr_stmt|;
else|else
name|result
operator|+=
name|QLatin1String
argument_list|(
literal|"MMM"
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
literal|'N'
case|:
block|{
name|n_mode
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|locale_indep_ordering
condition|)
break|break;
if|if
condition|(
operator|!
name|abbrev_next
condition|)
name|result
operator|+=
name|QLatin1String
argument_list|(
literal|"MMMM"
argument_list|)
expr_stmt|;
else|else
name|result
operator|+=
name|QLatin1String
argument_list|(
literal|"MMM"
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'Y'
case|:
block|{
if|if
condition|(
operator|!
name|locale_indep_ordering
condition|)
break|break;
if|if
condition|(
operator|!
name|abbrev_next
condition|)
name|result
operator|+=
name|QLatin1String
argument_list|(
literal|"yyyy"
argument_list|)
expr_stmt|;
else|else
name|result
operator|+=
name|QLatin1String
argument_list|(
literal|"yy"
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'E'
case|:
block|{
if|if
condition|(
operator|!
name|abbrev_next
condition|)
name|result
operator|+=
name|QLatin1String
argument_list|(
literal|"dddd"
argument_list|)
expr_stmt|;
else|else
name|result
operator|+=
name|QLatin1String
argument_list|(
literal|"ddd"
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|':'
case|:
block|{
comment|// timesep 0-3
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|>=
name|sys_fmt
operator|.
name|size
argument_list|()
condition|)
break|break;
name|c
operator|=
name|sys_fmt
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|.
name|isDigit
argument_list|()
operator|&&
name|c
operator|.
name|digitValue
argument_list|()
operator|<=
literal|3
condition|)
block|{
name|TChar
name|s
init|=
name|locale
operator|->
name|TimeSeparator
argument_list|(
name|c
operator|.
name|digitValue
argument_list|()
argument_list|)
decl_stmt|;
name|TUint
name|val
init|=
name|s
decl_stmt|;
comment|// some indexes return zero for empty
if|if
condition|(
name|val
operator|>
literal|0
condition|)
name|result
operator|+=
name|QChar
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
literal|'J'
case|:
block|{
if|if
condition|(
name|tf
operator|==
name|ETime24
operator|&&
operator|!
name|abbrev_next
condition|)
name|result
operator|+=
name|QLatin1String
argument_list|(
literal|"hh"
argument_list|)
expr_stmt|;
else|else
name|result
operator|+=
name|QLatin1Char
argument_list|(
literal|'h'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'H'
case|:
block|{
if|if
condition|(
operator|!
name|abbrev_next
condition|)
name|result
operator|+=
name|QLatin1String
argument_list|(
literal|"hh"
argument_list|)
expr_stmt|;
else|else
name|result
operator|+=
name|QLatin1Char
argument_list|(
literal|'h'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'I'
case|:
block|{
name|result
operator|+=
name|QLatin1Char
argument_list|(
literal|'h'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'T'
case|:
block|{
if|if
condition|(
operator|!
name|abbrev_next
condition|)
name|result
operator|+=
name|QLatin1String
argument_list|(
literal|"mm"
argument_list|)
expr_stmt|;
else|else
name|result
operator|+=
name|QLatin1Char
argument_list|(
literal|'m'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'S'
case|:
block|{
if|if
condition|(
operator|!
name|abbrev_next
condition|)
name|result
operator|+=
name|QLatin1String
argument_list|(
literal|"ss"
argument_list|)
expr_stmt|;
else|else
name|result
operator|+=
name|QLatin1Char
argument_list|(
literal|'s'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'B'
case|:
block|{
comment|// only done for 12h clock
if|if
condition|(
name|tf
operator|==
name|ETime24
condition|)
break|break;
block|}
comment|// fallthru to A
case|case
literal|'A'
case|:
block|{
comment|// quickie to get capitalization, can't use s60 string as is because Qt 'hh' format's am/pm logic
name|TAmPmName
name|ampm
init|=
name|TAmPmName
argument_list|()
decl_stmt|;
name|TChar
name|first
argument_list|(
name|ampm
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|QString
name|qtampm
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
name|first
operator|.
name|IsUpper
argument_list|()
condition|?
literal|"AP"
else|:
literal|"ap"
argument_list|)
decl_stmt|;
name|int
name|pos
init|=
name|locale
operator|->
name|AmPmSymbolPosition
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|minus_mode
operator|&&
name|pos
operator|!=
name|ELocaleBefore
operator|)
operator|||
operator|(
name|plus_mode
operator|&&
name|pos
operator|!=
name|ELocaleAfter
operator|)
condition|)
break|break;
if|if
condition|(
operator|!
name|abbrev_next
operator|&&
name|locale
operator|->
name|AmPmSpaceBetween
argument_list|()
condition|)
block|{
if|if
condition|(
name|pos
operator|==
name|ELocaleBefore
condition|)
name|qtampm
operator|.
name|append
argument_list|(
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|qtampm
operator|.
name|prepend
argument_list|(
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|result
operator|+=
name|qtampm
expr_stmt|;
block|}
break|break;
case|case
literal|'.'
case|:
block|{
comment|// decimal sep
name|TChar
name|s
init|=
name|locale
operator|->
name|DecimalSeparator
argument_list|()
decl_stmt|;
name|TUint
name|val
init|=
name|s
decl_stmt|;
if|if
condition|(
name|val
operator|>
literal|0
condition|)
name|result
operator|+=
name|QChar
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|'C'
case|:
block|{
comment|// six digits in s60, three digits in qt
if|if
condition|(
operator|!
name|abbrev_next
condition|)
block|{
name|result
operator|+=
name|QLatin1String
argument_list|(
literal|"zzz"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// next char is number from 0-6, how many digits to display
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|>=
name|sys_fmt
operator|.
name|size
argument_list|()
condition|)
break|break;
name|c
operator|=
name|sys_fmt
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|.
name|isDigit
argument_list|()
condition|)
block|{
comment|// try to match wanted digits
name|QChar
name|val
argument_list|(
name|c
operator|.
name|digitValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|>=
literal|3
condition|)
block|{
name|result
operator|+=
name|QLatin1String
argument_list|(
literal|"zzz"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|val
operator|>
literal|0
condition|)
block|{
name|result
operator|+=
name|QLatin1Char
argument_list|(
literal|'z'
argument_list|)
expr_stmt|;
block|}
block|}
block|}
break|break;
block|}
comment|// these cases fallthru
case|case
literal|'1'
case|:
case|case
literal|'2'
case|:
case|case
literal|'3'
case|:
case|case
literal|'4'
case|:
case|case
literal|'5'
case|:
block|{
comment|// shouldn't parse these with %F
if|if
condition|(
name|locale_indep_ordering
condition|)
break|break;
name|TDateFormat
name|df
init|=
name|locale
operator|->
name|DateFormat
argument_list|()
decl_stmt|;
specifier|const
name|char
modifier|*
modifier|*
name|locale_dep
decl_stmt|;
switch|switch
condition|(
name|df
condition|)
block|{
default|default:
comment|// fallthru to american
case|case
name|EDateAmerican
case|:
name|locale_dep
operator|=
name|us_locale_dep
expr_stmt|;
break|break;
case|case
name|EDateEuropean
case|:
name|locale_dep
operator|=
name|eu_locale_dep
expr_stmt|;
break|break;
case|case
name|EDateJapanese
case|:
name|locale_dep
operator|=
name|jp_locale_dep
expr_stmt|;
break|break;
block|}
name|int
name|offset
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|abbrev_next
condition|)
name|offset
operator|+=
literal|5
expr_stmt|;
if|if
condition|(
name|n_mode
condition|)
name|offset
operator|+=
literal|10
expr_stmt|;
name|result
operator|+=
name|QLatin1String
argument_list|(
name|locale_dep
index|[
name|offset
operator|+
operator|(
name|c
operator|.
name|digitValue
argument_list|()
operator|-
literal|1
operator|)
index|]
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'%'
case|:
comment|// fallthru percent
block|{
comment|// any junk gets copied as is
block|}
default|default:
block|{
name|result
operator|+=
name|c
expr_stmt|;
break|break;
block|}
case|case
literal|'Z'
case|:
comment|// Qt doesn't support these :(
case|case
literal|'X'
case|:
case|case
literal|'W'
case|:
block|{
break|break;
block|}
block|}
block|}
else|else
block|{
comment|// double any single quotes, don't begin escape
if|if
condition|(
name|c
operator|.
name|unicode
argument_list|()
operator|==
literal|'\''
condition|)
block|{
comment|// end open escape
if|if
condition|(
name|open_escape
condition|)
block|{
name|result
operator|+=
name|other
expr_stmt|;
name|other
operator|.
name|clear
argument_list|()
expr_stmt|;
name|result
operator|+=
name|QLatin1Char
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|open_escape
operator|=
literal|false
expr_stmt|;
block|}
name|other
operator|+=
name|c
expr_stmt|;
block|}
comment|// gather chars and escape them in one go if any format chars are found
if|if
condition|(
operator|!
name|open_escape
operator|&&
name|qtformatchars
operator|.
name|indexOf
argument_list|(
name|c
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|result
operator|+=
name|QLatin1Char
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|open_escape
operator|=
literal|true
expr_stmt|;
block|}
name|other
operator|+=
name|c
expr_stmt|;
block|}
operator|++
name|i
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|other
operator|.
name|isEmpty
argument_list|()
condition|)
name|result
operator|+=
name|other
expr_stmt|;
if|if
condition|(
name|open_escape
condition|)
name|result
operator|+=
name|QLatin1Char
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_comment
comment|/*!     Retrieves Symbian locale decimal separator. */
end_comment
begin_function
DECL|function|symbianDecimalPoint
specifier|static
name|QString
name|symbianDecimalPoint
parameter_list|()
block|{
name|TLocale
modifier|*
name|locale
init|=
name|_s60Locale
operator|.
name|GetLocale
argument_list|()
decl_stmt|;
name|TChar
name|decPoint
init|=
name|locale
operator|->
name|DecimalSeparator
argument_list|()
decl_stmt|;
name|int
name|val
init|=
name|decPoint
decl_stmt|;
return|return
name|QChar
argument_list|(
name|val
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Retrieves Symbian locale group separator. */
end_comment
begin_function
DECL|function|symbianGroupSeparator
specifier|static
name|QString
name|symbianGroupSeparator
parameter_list|()
block|{
name|TLocale
modifier|*
name|locale
init|=
name|_s60Locale
operator|.
name|GetLocale
argument_list|()
decl_stmt|;
name|TChar
name|grpSep
init|=
name|locale
operator|->
name|ThousandsSeparator
argument_list|()
decl_stmt|;
name|int
name|val
init|=
name|grpSep
decl_stmt|;
return|return
name|QChar
argument_list|(
name|val
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Retrieves Symbian locale zero digit. */
end_comment
begin_function
DECL|function|symbianZeroDigit
specifier|static
name|QString
name|symbianZeroDigit
parameter_list|()
block|{
name|TLocale
modifier|*
name|locale
init|=
name|_s60Locale
operator|.
name|GetLocale
argument_list|()
decl_stmt|;
comment|// TDigitType enumeration value returned by TLocale
comment|// will always correspond to zero digit unicode value.
name|TDigitType
name|digit
init|=
name|locale
operator|->
name|DigitType
argument_list|()
decl_stmt|;
return|return
name|QChar
argument_list|(
name|digit
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Retrieves a day name from Symbian locale. The \a day is an integer     from 1 to 7. When \a short_format is true the method returns     the day in short format. Otherwise it returns the day in a long format. */
end_comment
begin_function
DECL|function|symbianDayName
specifier|static
name|QString
name|symbianDayName
parameter_list|(
name|int
name|day
parameter_list|,
name|bool
name|short_format
parameter_list|)
block|{
name|day
operator|-=
literal|1
expr_stmt|;
if|if
condition|(
name|day
argument_list|<
literal|0
operator|||
name|day
argument_list|>
literal|6
condition|)
return|return
name|QString
argument_list|()
return|;
if|if
condition|(
name|short_format
condition|)
block|{
return|return
name|qt_TDes2QString
argument_list|(
name|TDayNameAbb
argument_list|(
name|TDay
argument_list|(
name|day
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|qt_TDes2QString
argument_list|(
name|TDayName
argument_list|(
name|TDay
argument_list|(
name|day
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
block|}
end_function
begin_comment
comment|/*!     Retrieves a month name from Symbian locale. The \a month is an integer     from 1 to 12. When \a short_format is true the method returns     the month in short format. Otherwise it returns the month in a long format. */
end_comment
begin_function
DECL|function|symbianMonthName
specifier|static
name|QString
name|symbianMonthName
parameter_list|(
name|int
name|month
parameter_list|,
name|bool
name|short_format
parameter_list|)
block|{
name|month
operator|-=
literal|1
expr_stmt|;
if|if
condition|(
name|month
argument_list|<
literal|0
operator|||
name|month
argument_list|>
literal|11
condition|)
return|return
name|QString
argument_list|()
return|;
if|if
condition|(
name|short_format
condition|)
block|{
return|return
name|qt_TDes2QString
argument_list|(
name|TMonthNameAbb
argument_list|(
name|TMonth
argument_list|(
name|month
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|qt_TDes2QString
argument_list|(
name|TMonthName
argument_list|(
name|TMonth
argument_list|(
name|month
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
block|}
end_function
begin_comment
comment|/*!     Retrieves date format from Symbian locale and     transforms it to Qt format.      When \a short_format is true the method returns     short date format. Otherwise it returns the long format. */
end_comment
begin_function
DECL|function|symbianDateFormat
specifier|static
name|QString
name|symbianDateFormat
parameter_list|(
name|bool
name|short_format
parameter_list|)
block|{
name|TPtrC
name|dateFormat
decl_stmt|;
if|if
condition|(
name|short_format
condition|)
block|{
name|dateFormat
operator|.
name|Set
argument_list|(
name|ptrGetShortDateFormatSpec
argument_list|(
name|_s60Locale
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dateFormat
operator|.
name|Set
argument_list|(
name|ptrGetLongDateFormatSpec
argument_list|(
name|_s60Locale
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|s60ToQtFormat
argument_list|(
name|qt_TDesC2QString
argument_list|(
name|dateFormat
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Retrieves time format from Symbian locale and     transforms it to Qt format. */
end_comment
begin_function
DECL|function|symbianTimeFormat
specifier|static
name|QString
name|symbianTimeFormat
parameter_list|()
block|{
return|return
name|s60ToQtFormat
argument_list|(
name|qt_TDesC2QString
argument_list|(
name|ptrGetTimeFormatSpec
argument_list|(
name|_s60Locale
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns localized string representation of given \a date     formatted with Symbian locale date format.      If \a short_format is true the format will be a short version.     Otherwise it uses a longer version. */
end_comment
begin_function
DECL|function|symbianDateToString
specifier|static
name|QString
name|symbianDateToString
parameter_list|(
specifier|const
name|QDate
modifier|&
name|date
parameter_list|,
name|bool
name|short_format
parameter_list|)
block|{
name|int
name|month
init|=
name|date
operator|.
name|month
argument_list|()
operator|-
literal|1
decl_stmt|;
name|int
name|day
init|=
name|date
operator|.
name|day
argument_list|()
operator|-
literal|1
decl_stmt|;
name|int
name|year
init|=
name|date
operator|.
name|year
argument_list|()
decl_stmt|;
name|TDateTime
name|dateTime
decl_stmt|;
name|dateTime
operator|.
name|Set
argument_list|(
name|year
argument_list|,
name|TMonth
argument_list|(
name|month
argument_list|)
argument_list|,
name|day
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|TTime
name|timeStr
argument_list|(
name|dateTime
argument_list|)
decl_stmt|;
name|TBuf
argument_list|<
name|KMaxLongDateFormatSpec
modifier|*
literal|2
argument_list|>
name|buffer
decl_stmt|;
name|TPtrC
name|dateFormat
decl_stmt|;
if|if
condition|(
name|short_format
condition|)
block|{
name|dateFormat
operator|.
name|Set
argument_list|(
name|ptrGetShortDateFormatSpec
argument_list|(
name|_s60Locale
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dateFormat
operator|.
name|Set
argument_list|(
name|ptrGetLongDateFormatSpec
argument_list|(
name|_s60Locale
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|TRAPD
argument_list|(
argument|err
argument_list|,
argument|ptrTimeFormatL(timeStr, buffer, dateFormat, *_s60Locale.GetLocale());
argument_list|)
if|if
condition|(
name|err
operator|==
name|KErrNone
condition|)
return|return
name|qt_TDes2QString
argument_list|(
name|buffer
argument_list|)
return|;
else|else
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns localized string representation of given \a time     formatted with Symbian locale time format. */
end_comment
begin_function
DECL|function|symbianTimeToString
specifier|static
name|QString
name|symbianTimeToString
parameter_list|(
specifier|const
name|QTime
modifier|&
name|time
parameter_list|)
block|{
name|int
name|hour
init|=
name|time
operator|.
name|hour
argument_list|()
decl_stmt|;
name|int
name|minute
init|=
name|time
operator|.
name|minute
argument_list|()
decl_stmt|;
name|int
name|second
init|=
name|time
operator|.
name|second
argument_list|()
decl_stmt|;
name|int
name|milliseconds
init|=
literal|0
decl_stmt|;
name|TDateTime
name|dateTime
decl_stmt|;
name|dateTime
operator|.
name|Set
argument_list|(
literal|0
argument_list|,
name|TMonth
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|,
name|hour
argument_list|,
name|minute
argument_list|,
name|second
argument_list|,
name|milliseconds
argument_list|)
expr_stmt|;
name|TTime
name|timeStr
argument_list|(
name|dateTime
argument_list|)
decl_stmt|;
name|TBuf
argument_list|<
name|KMaxTimeFormatSpec
modifier|*
literal|2
argument_list|>
name|buffer
decl_stmt|;
name|TRAPD
argument_list|(
argument|err
argument_list|,
argument|ptrTimeFormatL(         timeStr,         buffer,         ptrGetTimeFormatSpec(_s60Locale),         *_s60Locale.GetLocale());
argument_list|)
if|if
condition|(
name|err
operator|==
name|KErrNone
condition|)
return|return
name|qt_TDes2QString
argument_list|(
name|buffer
argument_list|)
return|;
else|else
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the measurement system stored in Symbian locale      \sa QLocale::MeasurementSystem */
end_comment
begin_function
DECL|function|symbianMeasurementSystem
specifier|static
name|QLocale
operator|::
name|MeasurementSystem
name|symbianMeasurementSystem
parameter_list|()
block|{
name|TLocale
modifier|*
name|locale
init|=
name|_s60Locale
operator|.
name|GetLocale
argument_list|()
decl_stmt|;
name|TUnitsFormat
name|unitFormat
init|=
name|locale
operator|->
name|UnitsGeneral
argument_list|()
decl_stmt|;
if|if
condition|(
name|unitFormat
operator|==
name|EUnitsImperial
condition|)
return|return
name|QLocale
operator|::
name|ImperialSystem
return|;
else|else
return|return
name|QLocale
operator|::
name|MetricSystem
return|;
block|}
end_function
begin_function
DECL|function|qt_symbianUpdateSystemPrivate
name|void
name|qt_symbianUpdateSystemPrivate
parameter_list|()
block|{
comment|// load system data before query calls
name|_s60Locale
operator|.
name|LoadSystemSettings
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_symbianInitSystemLocale
name|void
name|qt_symbianInitSystemLocale
parameter_list|()
block|{
specifier|static
name|QBasicAtomicInt
name|initDone
init|=
name|Q_BASIC_ATOMIC_INITIALIZER
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|initDone
operator|==
literal|2
condition|)
return|return;
if|if
condition|(
name|initDone
operator|.
name|testAndSetRelaxed
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
condition|)
block|{
comment|// Initialize platform version dependent function pointers
name|ptrTimeFormatL
operator|=
cast|reinterpret_cast
argument_list|<
name|FormatFunc
argument_list|>
argument_list|(
name|qt_resolveS60PluginFunc
argument_list|(
name|S60Plugin_TimeFormatL
argument_list|)
argument_list|)
expr_stmt|;
name|ptrGetTimeFormatSpec
operator|=
cast|reinterpret_cast
argument_list|<
name|FormatSpecFunc
argument_list|>
argument_list|(
name|qt_resolveS60PluginFunc
argument_list|(
name|S60Plugin_GetTimeFormatSpec
argument_list|)
argument_list|)
expr_stmt|;
name|ptrGetLongDateFormatSpec
operator|=
cast|reinterpret_cast
argument_list|<
name|FormatSpecFunc
argument_list|>
argument_list|(
name|qt_resolveS60PluginFunc
argument_list|(
name|S60Plugin_GetLongDateFormatSpec
argument_list|)
argument_list|)
expr_stmt|;
name|ptrGetShortDateFormatSpec
operator|=
cast|reinterpret_cast
argument_list|<
name|FormatSpecFunc
argument_list|>
argument_list|(
name|qt_resolveS60PluginFunc
argument_list|(
name|S60Plugin_GetShortDateFormatSpec
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ptrTimeFormatL
condition|)
name|ptrTimeFormatL
operator|=
operator|&
name|defaultTimeFormatL
expr_stmt|;
if|if
condition|(
operator|!
name|ptrGetTimeFormatSpec
condition|)
name|ptrGetTimeFormatSpec
operator|=
operator|&
name|defaultFormatSpec
expr_stmt|;
if|if
condition|(
operator|!
name|ptrGetLongDateFormatSpec
condition|)
name|ptrGetLongDateFormatSpec
operator|=
operator|&
name|defaultFormatSpec
expr_stmt|;
if|if
condition|(
operator|!
name|ptrGetShortDateFormatSpec
condition|)
name|ptrGetShortDateFormatSpec
operator|=
operator|&
name|defaultFormatSpec
expr_stmt|;
name|bool
name|ret
init|=
name|initDone
operator|.
name|testAndSetRelease
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|ret
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|ret
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|initDone
operator|!=
literal|2
condition|)
name|QThread
operator|::
name|yieldCurrentThread
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fallbackLocale
name|QLocale
name|QSystemLocale
operator|::
name|fallbackLocale
parameter_list|()
specifier|const
block|{
name|TLanguage
name|lang
init|=
name|User
operator|::
name|Language
argument_list|()
decl_stmt|;
name|QString
name|locale
init|=
name|QLatin1String
argument_list|(
name|qt_symbianLocaleName
argument_list|(
name|lang
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|QLocale
argument_list|(
name|locale
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|symbianUILanguages
specifier|static
name|QStringList
name|symbianUILanguages
parameter_list|()
block|{
name|TLanguage
name|lang
init|=
name|User
operator|::
name|Language
argument_list|()
decl_stmt|;
name|QString
name|s
init|=
name|QLatin1String
argument_list|(
name|qt_resolveSymbianLocaleName
argument_list|(
name|lang
argument_list|,
name|UILanguage
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|QStringList
argument_list|(
name|s
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|query
name|QVariant
name|QSystemLocale
operator|::
name|query
parameter_list|(
name|QueryType
name|type
parameter_list|,
name|QVariant
name|in
init|=
name|QVariant
argument_list|()
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|DecimalPoint
case|:
return|return
name|symbianDecimalPoint
argument_list|()
return|;
case|case
name|GroupSeparator
case|:
return|return
name|symbianGroupSeparator
argument_list|()
return|;
case|case
name|ZeroDigit
case|:
return|return
name|symbianZeroDigit
argument_list|()
return|;
case|case
name|DayNameLong
case|:
case|case
name|DayNameShort
case|:
return|return
name|symbianDayName
argument_list|(
name|in
operator|.
name|toInt
argument_list|()
argument_list|,
operator|(
name|type
operator|==
name|DayNameShort
operator|)
argument_list|)
return|;
case|case
name|MonthNameLong
case|:
case|case
name|MonthNameShort
case|:
return|return
name|symbianMonthName
argument_list|(
name|in
operator|.
name|toInt
argument_list|()
argument_list|,
operator|(
name|type
operator|==
name|MonthNameShort
operator|)
argument_list|)
return|;
case|case
name|DateFormatLong
case|:
case|case
name|DateFormatShort
case|:
return|return
name|symbianDateFormat
argument_list|(
operator|(
name|type
operator|==
name|DateFormatShort
operator|)
argument_list|)
return|;
case|case
name|TimeFormatLong
case|:
case|case
name|TimeFormatShort
case|:
return|return
name|symbianTimeFormat
argument_list|()
return|;
case|case
name|DateTimeFormatLong
case|:
case|case
name|DateTimeFormatShort
case|:
return|return
name|QString
argument_list|(
name|symbianDateFormat
argument_list|(
operator|(
name|type
operator|==
name|DateTimeFormatShort
operator|)
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
operator|+
name|symbianTimeFormat
argument_list|()
argument_list|)
return|;
case|case
name|DateToStringShort
case|:
case|case
name|DateToStringLong
case|:
return|return
name|symbianDateToString
argument_list|(
name|in
operator|.
name|toDate
argument_list|()
argument_list|,
operator|(
name|type
operator|==
name|DateToStringShort
operator|)
argument_list|)
return|;
case|case
name|TimeToStringShort
case|:
case|case
name|TimeToStringLong
case|:
return|return
name|symbianTimeToString
argument_list|(
name|in
operator|.
name|toTime
argument_list|()
argument_list|)
return|;
case|case
name|DateTimeToStringShort
case|:
case|case
name|DateTimeToStringLong
case|:
block|{
specifier|const
name|QDateTime
name|dt
init|=
name|in
operator|.
name|toDateTime
argument_list|()
decl_stmt|;
return|return
name|QString
argument_list|(
name|symbianDateToString
argument_list|(
name|dt
operator|.
name|date
argument_list|()
argument_list|,
operator|(
name|type
operator|==
name|DateTimeToStringShort
operator|)
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
operator|+
name|symbianTimeToString
argument_list|(
name|dt
operator|.
name|time
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
case|case
name|MeasurementSystem
case|:
return|return
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|symbianMeasurementSystem
argument_list|()
argument_list|)
return|;
case|case
name|LanguageId
case|:
case|case
name|CountryId
case|:
block|{
name|TLanguage
name|language
init|=
name|User
operator|::
name|Language
argument_list|()
decl_stmt|;
name|QString
name|locale
init|=
name|QLatin1String
argument_list|(
name|qt_symbianLocaleName
argument_list|(
name|language
argument_list|)
argument_list|)
decl_stmt|;
name|QLocale
operator|::
name|Language
name|lang
decl_stmt|;
name|QLocale
operator|::
name|Script
name|script
decl_stmt|;
name|QLocale
operator|::
name|Country
name|cntry
decl_stmt|;
name|QLocalePrivate
operator|::
name|getLangAndCountry
argument_list|(
name|locale
argument_list|,
name|lang
argument_list|,
name|script
argument_list|,
name|cntry
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|==
name|LanguageId
condition|)
return|return
name|lang
return|;
comment|// few iso codes have no country and will use this
if|if
condition|(
name|cntry
operator|==
name|QLocale
operator|::
name|AnyCountry
condition|)
return|return
name|fallbackLocale
argument_list|()
operator|.
name|country
argument_list|()
return|;
return|return
name|cntry
return|;
block|}
case|case
name|ScriptId
case|:
return|return
name|QVariant
argument_list|(
name|QLocale
operator|::
name|AnyScript
argument_list|)
return|;
case|case
name|NegativeSign
case|:
case|case
name|PositiveSign
case|:
break|break;
case|case
name|AMText
case|:
return|return
name|qt_TDes2QString
argument_list|(
name|TAmPmName
argument_list|(
name|TAmPm
argument_list|(
name|EAm
argument_list|)
argument_list|)
argument_list|)
return|;
case|case
name|PMText
case|:
return|return
name|qt_TDes2QString
argument_list|(
name|TAmPmName
argument_list|(
name|TAmPm
argument_list|(
name|EPm
argument_list|)
argument_list|)
argument_list|)
return|;
case|case
name|UILanguages
case|:
return|return
name|QVariant
argument_list|(
name|symbianUILanguages
argument_list|()
argument_list|)
return|;
default|default:
break|break;
block|}
return|return
name|QVariant
argument_list|()
return|;
block|}
end_function
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_SYSTEMLOCALE
argument_list|)
end_if
begin_constructor
DECL|function|QEnvironmentChangeNotifier
name|QEnvironmentChangeNotifier
operator|::
name|QEnvironmentChangeNotifier
parameter_list|()
block|{
comment|// Create the change notifier and install the callback function
specifier|const
name|TCallBack
name|callback
argument_list|(
operator|&
name|QEnvironmentChangeNotifier
operator|::
name|localeChanged
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|QT_TRAP_THROWING
argument_list|(
name|iChangeNotifier
operator|=
name|CEnvironmentChangeNotifier
operator|::
name|NewL
argument_list|(
name|CActive
operator|::
name|EPriorityStandard
argument_list|,
name|callback
argument_list|)
argument_list|)
expr_stmt|;
name|iChangeNotifier
operator|->
name|Start
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|localeChanged
name|TInt
name|QEnvironmentChangeNotifier
operator|::
name|localeChanged
parameter_list|(
name|TAny
modifier|*
name|data
parameter_list|)
block|{
name|QEnvironmentChangeNotifier
modifier|*
name|that
init|=
cast|reinterpret_cast
argument_list|<
name|QEnvironmentChangeNotifier
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|TInt
name|flag
init|=
name|that
operator|->
name|iChangeNotifier
operator|->
name|Change
argument_list|()
decl_stmt|;
if|if
condition|(
name|flag
operator|&
name|EChangesLocale
condition|)
block|{
specifier|static
name|bool
name|first
init|=
literal|true
decl_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
block|{
comment|// skip the first notification on app startup
name|QT_TRYCATCH_LEAVING
argument_list|(
name|QLocalePrivate
operator|::
name|updateSystemPrivate
argument_list|()
argument_list|)
expr_stmt|;
name|QT_TRYCATCH_LEAVING
argument_list|(
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
name|qApp
argument_list|,
operator|new
name|QEvent
argument_list|(
name|QEvent
operator|::
name|LocaleChange
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|KErrNone
return|;
block|}
end_function
begin_destructor
DECL|function|~QEnvironmentChangeNotifier
name|QEnvironmentChangeNotifier
operator|::
name|~
name|QEnvironmentChangeNotifier
parameter_list|()
block|{
operator|delete
name|iChangeNotifier
expr_stmt|;
block|}
end_destructor
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
