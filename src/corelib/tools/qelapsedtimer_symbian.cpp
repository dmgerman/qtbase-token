begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qelapsedtimer.h"
end_include
begin_include
include|#
directive|include
file|"qpair.h"
end_include
begin_include
include|#
directive|include
file|<e32std.h>
end_include
begin_include
include|#
directive|include
file|<sys/time.h>
end_include
begin_include
include|#
directive|include
file|<hal.h>
end_include
begin_function
name|QT_BEGIN_NAMESPACE
comment|// return quint64 to avoid sign-extension
DECL|function|getMicrosecondFromTick
specifier|static
name|quint64
name|getMicrosecondFromTick
parameter_list|()
block|{
specifier|static
name|TInt
name|nanokernel_tick_period
decl_stmt|;
if|if
condition|(
operator|!
name|nanokernel_tick_period
condition|)
name|HAL
operator|::
name|Get
argument_list|(
name|HAL
operator|::
name|ENanoTickPeriod
argument_list|,
name|nanokernel_tick_period
argument_list|)
expr_stmt|;
specifier|static
name|quint32
name|highdword
init|=
literal|0
decl_stmt|;
specifier|static
name|quint32
name|lastval
init|=
literal|0
decl_stmt|;
name|quint32
name|val
init|=
name|User
operator|::
name|NTickCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|val
operator|<
name|lastval
condition|)
operator|++
name|highdword
expr_stmt|;
name|lastval
operator|=
name|val
expr_stmt|;
return|return
name|nanokernel_tick_period
operator|*
operator|(
name|val
operator||
operator|(
name|quint64
argument_list|(
name|highdword
argument_list|)
operator|<<
literal|32
operator|)
operator|)
return|;
block|}
end_function
begin_function
DECL|function|qt_gettime
name|timeval
name|qt_gettime
parameter_list|()
block|{
name|timeval
name|tv
decl_stmt|;
name|quint64
name|now
init|=
name|getMicrosecondFromTick
argument_list|()
decl_stmt|;
name|tv
operator|.
name|tv_sec
operator|=
name|now
operator|/
literal|1000000
expr_stmt|;
name|tv
operator|.
name|tv_usec
operator|=
name|now
operator|%
literal|1000000
expr_stmt|;
return|return
name|tv
return|;
block|}
end_function
begin_function
DECL|function|clockType
name|QElapsedTimer
operator|::
name|ClockType
name|QElapsedTimer
operator|::
name|clockType
parameter_list|()
block|{
return|return
name|TickCounter
return|;
block|}
end_function
begin_function
DECL|function|isMonotonic
name|bool
name|QElapsedTimer
operator|::
name|isMonotonic
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|start
name|void
name|QElapsedTimer
operator|::
name|start
parameter_list|()
block|{
name|t1
operator|=
name|getMicrosecondFromTick
argument_list|()
expr_stmt|;
name|t2
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|restart
name|qint64
name|QElapsedTimer
operator|::
name|restart
parameter_list|()
block|{
name|qint64
name|oldt1
init|=
name|t1
decl_stmt|;
name|t1
operator|=
name|getMicrosecondFromTick
argument_list|()
expr_stmt|;
name|t2
operator|=
literal|0
expr_stmt|;
return|return
name|t1
operator|-
name|oldt1
return|;
block|}
end_function
begin_function
DECL|function|nsecsElapsed
name|qint64
name|QElapsedTimer
operator|::
name|nsecsElapsed
parameter_list|()
specifier|const
block|{
return|return
operator|(
name|getMicrosecondFromTick
argument_list|()
operator|-
name|t1
operator|)
operator|*
literal|1000
return|;
block|}
end_function
begin_function
DECL|function|elapsed
name|qint64
name|QElapsedTimer
operator|::
name|elapsed
parameter_list|()
specifier|const
block|{
return|return
operator|(
name|getMicrosecondFromTick
argument_list|()
operator|-
name|t1
operator|)
operator|/
literal|1000
return|;
block|}
end_function
begin_function
DECL|function|msecsSinceReference
name|qint64
name|QElapsedTimer
operator|::
name|msecsSinceReference
parameter_list|()
specifier|const
block|{
return|return
name|t1
operator|/
literal|1000
return|;
block|}
end_function
begin_function
DECL|function|msecsTo
name|qint64
name|QElapsedTimer
operator|::
name|msecsTo
parameter_list|(
specifier|const
name|QElapsedTimer
modifier|&
name|other
parameter_list|)
specifier|const
block|{
return|return
operator|(
name|other
operator|.
name|t1
operator|-
name|t1
operator|)
operator|/
literal|1000
return|;
block|}
end_function
begin_function
DECL|function|secsTo
name|qint64
name|QElapsedTimer
operator|::
name|secsTo
parameter_list|(
specifier|const
name|QElapsedTimer
modifier|&
name|other
parameter_list|)
specifier|const
block|{
return|return
name|msecsTo
argument_list|(
name|other
argument_list|)
operator|/
literal|1000000
return|;
block|}
end_function
begin_function
DECL|function|operator <
name|bool
name|operator
name|<
parameter_list|(
specifier|const
name|QElapsedTimer
modifier|&
name|v1
parameter_list|,
specifier|const
name|QElapsedTimer
modifier|&
name|v2
parameter_list|)
block|{
return|return
operator|(
name|v1
operator|.
name|t1
operator|-
name|v2
operator|.
name|t1
operator|)
operator|<
literal|0
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
