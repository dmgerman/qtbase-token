begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QDOUBLESCANPRINT_P_H
end_ifndef
begin_define
DECL|macro|QDOUBLESCANPRINT_P_H
define|#
directive|define
name|QDOUBLESCANPRINT_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists for the convenience
end_comment
begin_comment
comment|// of internal files.  This header file may change from version to version
end_comment
begin_comment
comment|// without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|<qglobal.h>
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_CC_MSVC
argument_list|)
operator|&&
operator|(
name|defined
argument_list|(
name|QT_BOOTSTRAPPED
argument_list|)
operator|||
name|defined
argument_list|(
name|QT_NO_DOUBLECONVERSION
argument_list|)
operator|)
end_if
begin_include
include|#
directive|include
file|<stdio.h>
end_include
begin_include
include|#
directive|include
file|<locale.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_comment
comment|// We can always use _sscanf_l and _snprintf_l on MSVC as those were introduced in 2005.
end_comment
begin_comment
comment|// MSVC doesn't document what it will do with a NULL locale passed to _sscanf_l or _snprintf_l.
end_comment
begin_comment
comment|// The documentation for _create_locale() does not formally document "C" to be valid, but an example
end_comment
begin_comment
comment|// code snippet in the same documentation shows it.
end_comment
begin_struct
DECL|struct|QCLocaleT
struct|struct
name|QCLocaleT
block|{
DECL|function|QCLocaleT
name|QCLocaleT
argument_list|()
operator|:
name|locale
argument_list|(
argument|_create_locale(LC_ALL,
literal|"C"
argument|)
argument_list|)
block|{     }
DECL|function|~QCLocaleT
operator|~
name|QCLocaleT
argument_list|()
block|{
name|_free_locale
argument_list|(
name|locale
argument_list|)
block|;     }
DECL|member|locale
specifier|const
name|_locale_t
name|locale
expr_stmt|;
block|}
struct|;
end_struct
begin_define
DECL|macro|QT_CLOCALE_HOLDER
define|#
directive|define
name|QT_CLOCALE_HOLDER
value|Q_GLOBAL_STATIC(QCLocaleT, cLocaleT)
end_define
begin_define
DECL|macro|QT_CLOCALE
define|#
directive|define
name|QT_CLOCALE
value|cLocaleT()->locale
end_define
begin_function
DECL|function|qDoubleSscanf
specifier|inline
name|int
name|qDoubleSscanf
parameter_list|(
specifier|const
name|char
modifier|*
name|buf
parameter_list|,
name|_locale_t
name|locale
parameter_list|,
specifier|const
name|char
modifier|*
name|format
parameter_list|,
name|double
modifier|*
name|d
parameter_list|,
name|int
modifier|*
name|processed
parameter_list|)
block|{
return|return
name|_sscanf_l
argument_list|(
name|buf
argument_list|,
name|format
argument_list|,
name|locale
argument_list|,
name|d
argument_list|,
name|processed
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qDoubleSnprintf
specifier|inline
name|int
name|qDoubleSnprintf
parameter_list|(
name|char
modifier|*
name|buf
parameter_list|,
name|size_t
name|buflen
parameter_list|,
name|_locale_t
name|locale
parameter_list|,
specifier|const
name|char
modifier|*
name|format
parameter_list|,
name|double
name|d
parameter_list|)
block|{
return|return
name|_snprintf_l
argument_list|(
name|buf
argument_list|,
name|buflen
argument_list|,
name|format
argument_list|,
name|locale
argument_list|,
name|d
argument_list|)
return|;
block|}
end_function
begin_function
name|QT_END_NAMESPACE
elif|#
directive|elif
name|defined
argument_list|(
name|QT_BOOTSTRAPPED
argument_list|)
include|#
directive|include
file|<stdio.h>
name|QT_BEGIN_NAMESPACE
comment|// When bootstrapping we don't have libdouble-conversion available, yet. We can also not use locale
comment|// aware snprintf and sscanf variants in the general case because those are only available on select
comment|// platforms. We can use the regular snprintf and sscanf because we don't do setlocale(3) when
comment|// bootstrapping and the locale is always "C" then.
define|#
directive|define
name|QT_CLOCALE_HOLDER
define|#
directive|define
name|QT_CLOCALE
value|0
specifier|inline
name|int
name|qDoubleSscanf
parameter_list|(
specifier|const
name|char
modifier|*
name|buf
parameter_list|,
name|int
parameter_list|,
specifier|const
name|char
modifier|*
name|format
parameter_list|,
name|double
modifier|*
name|d
parameter_list|,
name|int
modifier|*
name|processed
parameter_list|)
block|{
return|return
name|sscanf
argument_list|(
name|buf
argument_list|,
name|format
argument_list|,
name|d
argument_list|,
name|processed
argument_list|)
return|;
block|}
end_function
begin_function
specifier|inline
name|int
name|qDoubleSnprintf
parameter_list|(
name|char
modifier|*
name|buf
parameter_list|,
name|size_t
name|buflen
parameter_list|,
name|int
parameter_list|,
specifier|const
name|char
modifier|*
name|format
parameter_list|,
name|double
name|d
parameter_list|)
block|{
return|return
name|snprintf
argument_list|(
name|buf
argument_list|,
name|buflen
argument_list|,
name|format
argument_list|,
name|d
argument_list|)
return|;
block|}
end_function
begin_function
name|QT_END_NAMESPACE
else|#
directive|else
comment|// !QT_BOOTSTRAPPED&& (!Q_CC_MSVC || !QT_NO_DOUBLECONVERSION)
ifdef|#
directive|ifdef
name|QT_NO_DOUBLECONVERSION
include|#
directive|include
file|<stdio.h>
include|#
directive|include
file|<xlocale.h>
name|QT_BEGIN_NAMESPACE
comment|// OS X and FreeBSD both treat NULL as the "C" locale for snprintf_l and sscanf_l.
comment|// When other implementations with different behavior show up, we'll have to do newlocale(3) and
comment|// freelocale(3) here. The arguments to those will depend on what the other implementations will
comment|// offer. OS X and FreeBSD again interpret a locale name of NULL as "C", but "C" itself is not
comment|// documented as valid locale name. Mind that the names of the LC_* constants differ between e.g.
comment|// BSD variants and linux.
define|#
directive|define
name|QT_CLOCALE_HOLDER
define|#
directive|define
name|QT_CLOCALE
value|NULL
specifier|inline
name|int
name|qDoubleSscanf
parameter_list|(
specifier|const
name|char
modifier|*
name|buf
parameter_list|,
name|locale_t
name|locale
parameter_list|,
specifier|const
name|char
modifier|*
name|format
parameter_list|,
name|double
modifier|*
name|d
parameter_list|,
name|int
modifier|*
name|processed
parameter_list|)
block|{
return|return
name|sscanf_l
argument_list|(
name|buf
argument_list|,
name|locale
argument_list|,
name|format
argument_list|,
name|d
argument_list|,
name|processed
argument_list|)
return|;
block|}
end_function
begin_function
specifier|inline
name|int
name|qDoubleSnprintf
parameter_list|(
name|char
modifier|*
name|buf
parameter_list|,
name|size_t
name|buflen
parameter_list|,
name|locale_t
name|locale
parameter_list|,
specifier|const
name|char
modifier|*
name|format
parameter_list|,
name|double
name|d
parameter_list|)
block|{
return|return
name|snprintf_l
argument_list|(
name|buf
argument_list|,
name|buflen
argument_list|,
name|locale
argument_list|,
name|format
argument_list|,
name|d
argument_list|)
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_else
else|#
directive|else
end_else
begin_comment
comment|// !QT_NO_DOUBLECONVERSION
end_comment
begin_include
include|#
directive|include
file|<double-conversion/double-conversion.h>
end_include
begin_define
define|#
directive|define
name|QT_CLOCALE_HOLDER
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DOUBLECONVERSION
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_BOOTSTRAPPED
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QDOUBLESCANPRINT_P_H
end_comment
end_unit
