begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QPOINT_H
end_ifndef
begin_define
DECL|macro|QPOINT_H
define|#
directive|define
name|QPOINT_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qnamespace.h>
end_include
begin_decl_stmt
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
name|class
name|Q_CORE_EXPORT
name|QPoint
block|{
name|public
label|:
name|Q_DECL_CONSTEXPR
name|QPoint
parameter_list|()
function_decl|;
name|Q_DECL_CONSTEXPR
name|QPoint
parameter_list|(
name|int
name|xpos
parameter_list|,
name|int
name|ypos
parameter_list|)
function_decl|;
name|Q_DECL_CONSTEXPR
specifier|inline
name|bool
name|isNull
argument_list|()
specifier|const
expr_stmt|;
name|Q_DECL_CONSTEXPR
specifier|inline
name|int
name|x
argument_list|()
specifier|const
expr_stmt|;
name|Q_DECL_CONSTEXPR
specifier|inline
name|int
name|y
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
name|void
name|setX
parameter_list|(
name|int
name|x
parameter_list|)
function_decl|;
specifier|inline
name|void
name|setY
parameter_list|(
name|int
name|y
parameter_list|)
function_decl|;
name|Q_DECL_CONSTEXPR
specifier|inline
name|int
name|manhattanLength
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
name|int
modifier|&
name|rx
parameter_list|()
function_decl|;
specifier|inline
name|int
modifier|&
name|ry
parameter_list|()
function_decl|;
specifier|inline
name|QPoint
operator|&
name|operator
operator|+=
operator|(
specifier|const
name|QPoint
operator|&
name|p
operator|)
expr_stmt|;
specifier|inline
name|QPoint
operator|&
name|operator
operator|-=
operator|(
specifier|const
name|QPoint
operator|&
name|p
operator|)
expr_stmt|;
specifier|inline
name|QPoint
operator|&
name|operator
operator|*=
operator|(
name|float
name|factor
operator|)
expr_stmt|;
specifier|inline
name|QPoint
operator|&
name|operator
operator|*=
operator|(
name|double
name|factor
operator|)
expr_stmt|;
specifier|inline
name|QPoint
operator|&
name|operator
operator|*=
operator|(
name|int
name|factor
operator|)
expr_stmt|;
specifier|inline
name|QPoint
operator|&
name|operator
operator|/=
operator|(
name|qreal
name|divisor
operator|)
expr_stmt|;
name|Q_DECL_CONSTEXPR
specifier|static
specifier|inline
name|int
name|dotProduct
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|p1
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|p2
parameter_list|)
function_decl|;
name|friend
name|Q_DECL_CONSTEXPR
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QPoint
operator|&
operator|,
specifier|const
name|QPoint
operator|&
operator|)
expr_stmt|;
name|friend
name|Q_DECL_CONSTEXPR
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|QPoint
operator|&
operator|,
specifier|const
name|QPoint
operator|&
operator|)
expr_stmt|;
name|friend
name|Q_DECL_CONSTEXPR
specifier|inline
specifier|const
name|QPoint
name|operator
operator|+
operator|(
specifier|const
name|QPoint
operator|&
operator|,
specifier|const
name|QPoint
operator|&
operator|)
expr_stmt|;
name|friend
name|Q_DECL_CONSTEXPR
specifier|inline
specifier|const
name|QPoint
name|operator
operator|-
operator|(
specifier|const
name|QPoint
operator|&
operator|,
specifier|const
name|QPoint
operator|&
operator|)
expr_stmt|;
name|friend
name|Q_DECL_CONSTEXPR
specifier|inline
specifier|const
name|QPoint
name|operator
modifier|*
parameter_list|(
specifier|const
name|QPoint
modifier|&
parameter_list|,
name|float
parameter_list|)
function_decl|;
name|friend
name|Q_DECL_CONSTEXPR
specifier|inline
specifier|const
name|QPoint
name|operator
modifier|*
parameter_list|(
name|float
parameter_list|,
specifier|const
name|QPoint
modifier|&
parameter_list|)
function_decl|;
name|friend
name|Q_DECL_CONSTEXPR
specifier|inline
specifier|const
name|QPoint
name|operator
modifier|*
parameter_list|(
specifier|const
name|QPoint
modifier|&
parameter_list|,
name|double
parameter_list|)
function_decl|;
name|friend
name|Q_DECL_CONSTEXPR
specifier|inline
specifier|const
name|QPoint
name|operator
modifier|*
parameter_list|(
name|double
parameter_list|,
specifier|const
name|QPoint
modifier|&
parameter_list|)
function_decl|;
name|friend
name|Q_DECL_CONSTEXPR
specifier|inline
specifier|const
name|QPoint
name|operator
modifier|*
parameter_list|(
specifier|const
name|QPoint
modifier|&
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|friend
name|Q_DECL_CONSTEXPR
specifier|inline
specifier|const
name|QPoint
name|operator
modifier|*
parameter_list|(
name|int
parameter_list|,
specifier|const
name|QPoint
modifier|&
parameter_list|)
function_decl|;
name|friend
name|Q_DECL_CONSTEXPR
specifier|inline
specifier|const
name|QPoint
name|operator
operator|+
operator|(
specifier|const
name|QPoint
operator|&
operator|)
expr_stmt|;
name|friend
name|Q_DECL_CONSTEXPR
specifier|inline
specifier|const
name|QPoint
name|operator
operator|-
operator|(
specifier|const
name|QPoint
operator|&
operator|)
expr_stmt|;
name|friend
name|Q_DECL_CONSTEXPR
specifier|inline
specifier|const
name|QPoint
name|operator
operator|/
operator|(
specifier|const
name|QPoint
operator|&
operator|,
name|qreal
operator|)
expr_stmt|;
name|private
label|:
name|friend
name|class
name|QTransform
decl_stmt|;
name|int
name|xp
decl_stmt|;
name|int
name|yp
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_expr_stmt
name|Q_DECLARE_TYPEINFO
argument_list|(
name|QPoint
argument_list|,
name|Q_MOVABLE_TYPE
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|/*****************************************************************************   QPoint stream functions  *****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DATASTREAM
end_ifndef
begin_expr_stmt
name|Q_CORE_EXPORT
name|QDataStream
operator|&
name|operator
operator|<<
operator|(
name|QDataStream
operator|&
operator|,
specifier|const
name|QPoint
operator|&
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_CORE_EXPORT
name|QDataStream
operator|&
name|operator
operator|>>
operator|(
name|QDataStream
operator|&
operator|,
name|QPoint
operator|&
operator|)
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*****************************************************************************   QPoint inline functions  *****************************************************************************/
end_comment
begin_expr_stmt
DECL|function|QPoint
name|Q_DECL_CONSTEXPR
specifier|inline
name|QPoint
operator|::
name|QPoint
argument_list|()
operator|:
name|xp
argument_list|(
literal|0
argument_list|)
operator|,
name|yp
argument_list|(
literal|0
argument_list|)
block|{}
DECL|function|QPoint
name|Q_DECL_CONSTEXPR
specifier|inline
name|QPoint
operator|::
name|QPoint
argument_list|(
argument|int xpos
argument_list|,
argument|int ypos
argument_list|)
operator|:
name|xp
argument_list|(
name|xpos
argument_list|)
operator|,
name|yp
argument_list|(
argument|ypos
argument_list|)
block|{}
DECL|function|isNull
name|Q_DECL_CONSTEXPR
specifier|inline
name|bool
name|QPoint
operator|::
name|isNull
argument_list|()
specifier|const
block|{
return|return
name|xp
operator|==
literal|0
operator|&&
name|yp
operator|==
literal|0
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|x
name|Q_DECL_CONSTEXPR
specifier|inline
name|int
name|QPoint
operator|::
name|x
argument_list|()
specifier|const
block|{
return|return
name|xp
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|y
name|Q_DECL_CONSTEXPR
specifier|inline
name|int
name|QPoint
operator|::
name|y
argument_list|()
specifier|const
block|{
return|return
name|yp
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|setX
specifier|inline
name|void
name|QPoint
operator|::
name|setX
argument_list|(
argument|int xpos
argument_list|)
block|{
name|xp
operator|=
name|xpos
block|; }
DECL|function|setY
specifier|inline
name|void
name|QPoint
operator|::
name|setY
argument_list|(
argument|int ypos
argument_list|)
block|{
name|yp
operator|=
name|ypos
block|; }
DECL|function|manhattanLength
specifier|inline
name|int
name|Q_DECL_CONSTEXPR
name|QPoint
operator|::
name|manhattanLength
argument_list|()
specifier|const
block|{
return|return
name|qAbs
argument_list|(
name|x
argument_list|()
argument_list|)
operator|+
name|qAbs
argument_list|(
name|y
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|rx
specifier|inline
name|int
operator|&
name|QPoint
operator|::
name|rx
argument_list|()
block|{
return|return
name|xp
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|ry
specifier|inline
name|int
operator|&
name|QPoint
operator|::
name|ry
argument_list|()
block|{
return|return
name|yp
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|member|operator
specifier|inline
name|QPoint
operator|&
name|QPoint
operator|::
name|operator
operator|+=
operator|(
specifier|const
name|QPoint
operator|&
name|p
operator|)
block|{
name|xp
operator|+=
name|p
operator|.
name|xp
block|;
name|yp
operator|+=
name|p
operator|.
name|yp
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QPoint
operator|&
name|QPoint
operator|::
name|operator
operator|-=
operator|(
specifier|const
name|QPoint
operator|&
name|p
operator|)
block|{
name|xp
operator|-=
name|p
operator|.
name|xp
block|;
name|yp
operator|-=
name|p
operator|.
name|yp
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QPoint
operator|&
name|QPoint
operator|::
name|operator
operator|*=
operator|(
name|float
name|factor
operator|)
block|{
name|xp
operator|=
name|qRound
argument_list|(
name|xp
operator|*
name|factor
argument_list|)
block|;
name|yp
operator|=
name|qRound
argument_list|(
name|yp
operator|*
name|factor
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QPoint
operator|&
name|QPoint
operator|::
name|operator
operator|*=
operator|(
name|double
name|factor
operator|)
block|{
name|xp
operator|=
name|qRound
argument_list|(
name|xp
operator|*
name|factor
argument_list|)
block|;
name|yp
operator|=
name|qRound
argument_list|(
name|yp
operator|*
name|factor
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QPoint
operator|&
name|QPoint
operator|::
name|operator
operator|*=
operator|(
name|int
name|factor
operator|)
block|{
name|xp
operator|=
name|xp
operator|*
name|factor
block|;
name|yp
operator|=
name|yp
operator|*
name|factor
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|Q_DECL_CONSTEXPR
specifier|inline
name|int
name|QPoint
operator|::
name|dotProduct
argument_list|(
argument|const QPoint&p1
argument_list|,
argument|const QPoint&p2
argument_list|)
block|{
return|return
name|p1
operator|.
name|xp
operator|*
name|p2
operator|.
name|xp
operator|+
name|p1
operator|.
name|yp
operator|*
name|p2
operator|.
name|yp
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|Q_DECL_CONSTEXPR
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QPoint
operator|&
name|p1
operator|,
specifier|const
name|QPoint
operator|&
name|p2
operator|)
block|{
return|return
name|p1
operator|.
name|xp
operator|==
name|p2
operator|.
name|xp
operator|&&
name|p1
operator|.
name|yp
operator|==
name|p2
operator|.
name|yp
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|Q_DECL_CONSTEXPR
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|QPoint
operator|&
name|p1
operator|,
specifier|const
name|QPoint
operator|&
name|p2
operator|)
block|{
return|return
name|p1
operator|.
name|xp
operator|!=
name|p2
operator|.
name|xp
operator|||
name|p1
operator|.
name|yp
operator|!=
name|p2
operator|.
name|yp
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|Q_DECL_CONSTEXPR
specifier|inline
specifier|const
name|QPoint
name|operator
operator|+
operator|(
specifier|const
name|QPoint
operator|&
name|p1
operator|,
specifier|const
name|QPoint
operator|&
name|p2
operator|)
block|{
return|return
name|QPoint
argument_list|(
name|p1
operator|.
name|xp
operator|+
name|p2
operator|.
name|xp
argument_list|,
name|p1
operator|.
name|yp
operator|+
name|p2
operator|.
name|yp
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|Q_DECL_CONSTEXPR
specifier|inline
specifier|const
name|QPoint
name|operator
operator|-
operator|(
specifier|const
name|QPoint
operator|&
name|p1
operator|,
specifier|const
name|QPoint
operator|&
name|p2
operator|)
block|{
return|return
name|QPoint
argument_list|(
name|p1
operator|.
name|xp
operator|-
name|p2
operator|.
name|xp
argument_list|,
name|p1
operator|.
name|yp
operator|-
name|p2
operator|.
name|yp
argument_list|)
return|;
block|}
end_expr_stmt
begin_function
name|Q_DECL_CONSTEXPR
specifier|inline
specifier|const
name|QPoint
name|operator
modifier|*
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|p
parameter_list|,
name|float
name|factor
parameter_list|)
block|{
return|return
name|QPoint
argument_list|(
name|qRound
argument_list|(
name|p
operator|.
name|xp
operator|*
name|factor
argument_list|)
argument_list|,
name|qRound
argument_list|(
name|p
operator|.
name|yp
operator|*
name|factor
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
name|Q_DECL_CONSTEXPR
specifier|inline
specifier|const
name|QPoint
name|operator
modifier|*
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|p
parameter_list|,
name|double
name|factor
parameter_list|)
block|{
return|return
name|QPoint
argument_list|(
name|qRound
argument_list|(
name|p
operator|.
name|xp
operator|*
name|factor
argument_list|)
argument_list|,
name|qRound
argument_list|(
name|p
operator|.
name|yp
operator|*
name|factor
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
name|Q_DECL_CONSTEXPR
specifier|inline
specifier|const
name|QPoint
name|operator
modifier|*
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|p
parameter_list|,
name|int
name|factor
parameter_list|)
block|{
return|return
name|QPoint
argument_list|(
name|p
operator|.
name|xp
operator|*
name|factor
argument_list|,
name|p
operator|.
name|yp
operator|*
name|factor
argument_list|)
return|;
block|}
end_function
begin_function
name|Q_DECL_CONSTEXPR
specifier|inline
specifier|const
name|QPoint
name|operator
modifier|*
parameter_list|(
name|float
name|factor
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|p
parameter_list|)
block|{
return|return
name|QPoint
argument_list|(
name|qRound
argument_list|(
name|p
operator|.
name|xp
operator|*
name|factor
argument_list|)
argument_list|,
name|qRound
argument_list|(
name|p
operator|.
name|yp
operator|*
name|factor
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
name|Q_DECL_CONSTEXPR
specifier|inline
specifier|const
name|QPoint
name|operator
modifier|*
parameter_list|(
name|double
name|factor
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|p
parameter_list|)
block|{
return|return
name|QPoint
argument_list|(
name|qRound
argument_list|(
name|p
operator|.
name|xp
operator|*
name|factor
argument_list|)
argument_list|,
name|qRound
argument_list|(
name|p
operator|.
name|yp
operator|*
name|factor
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
name|Q_DECL_CONSTEXPR
specifier|inline
specifier|const
name|QPoint
name|operator
modifier|*
parameter_list|(
name|int
name|factor
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|p
parameter_list|)
block|{
return|return
name|QPoint
argument_list|(
name|p
operator|.
name|xp
operator|*
name|factor
argument_list|,
name|p
operator|.
name|yp
operator|*
name|factor
argument_list|)
return|;
block|}
end_function
begin_expr_stmt
name|Q_DECL_CONSTEXPR
specifier|inline
specifier|const
name|QPoint
name|operator
operator|+
operator|(
specifier|const
name|QPoint
operator|&
name|p
operator|)
block|{
return|return
name|p
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|Q_DECL_CONSTEXPR
specifier|inline
specifier|const
name|QPoint
name|operator
operator|-
operator|(
specifier|const
name|QPoint
operator|&
name|p
operator|)
block|{
return|return
name|QPoint
argument_list|(
operator|-
name|p
operator|.
name|xp
argument_list|,
operator|-
name|p
operator|.
name|yp
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QPoint
operator|&
name|QPoint
operator|::
name|operator
operator|/=
operator|(
name|qreal
name|c
operator|)
block|{
name|xp
operator|=
name|qRound
argument_list|(
name|xp
operator|/
name|c
argument_list|)
block|;
name|yp
operator|=
name|qRound
argument_list|(
name|yp
operator|/
name|c
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|Q_DECL_CONSTEXPR
specifier|inline
specifier|const
name|QPoint
name|operator
operator|/
operator|(
specifier|const
name|QPoint
operator|&
name|p
operator|,
name|qreal
name|c
operator|)
block|{
return|return
name|QPoint
argument_list|(
name|qRound
argument_list|(
name|p
operator|.
name|xp
operator|/
name|c
argument_list|)
argument_list|,
name|qRound
argument_list|(
name|p
operator|.
name|yp
operator|/
name|c
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DEBUG_STREAM
end_ifndef
begin_expr_stmt
name|Q_CORE_EXPORT
name|QDebug
name|operator
operator|<<
operator|(
name|QDebug
operator|,
specifier|const
name|QPoint
operator|&
operator|)
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|class
name|Q_CORE_EXPORT
name|QPointF
block|{
name|public
label|:
name|Q_DECL_CONSTEXPR
name|QPointF
parameter_list|()
function_decl|;
name|Q_DECL_CONSTEXPR
name|QPointF
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|p
parameter_list|)
function_decl|;
name|Q_DECL_CONSTEXPR
name|QPointF
parameter_list|(
name|qreal
name|xpos
parameter_list|,
name|qreal
name|ypos
parameter_list|)
function_decl|;
name|Q_DECL_CONSTEXPR
specifier|inline
name|qreal
name|manhattanLength
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
name|bool
name|isNull
argument_list|()
specifier|const
expr_stmt|;
name|Q_DECL_CONSTEXPR
specifier|inline
name|qreal
name|x
argument_list|()
specifier|const
expr_stmt|;
name|Q_DECL_CONSTEXPR
specifier|inline
name|qreal
name|y
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
name|void
name|setX
parameter_list|(
name|qreal
name|x
parameter_list|)
function_decl|;
specifier|inline
name|void
name|setY
parameter_list|(
name|qreal
name|y
parameter_list|)
function_decl|;
specifier|inline
name|qreal
modifier|&
name|rx
parameter_list|()
function_decl|;
specifier|inline
name|qreal
modifier|&
name|ry
parameter_list|()
function_decl|;
specifier|inline
name|QPointF
operator|&
name|operator
operator|+=
operator|(
specifier|const
name|QPointF
operator|&
name|p
operator|)
expr_stmt|;
specifier|inline
name|QPointF
operator|&
name|operator
operator|-=
operator|(
specifier|const
name|QPointF
operator|&
name|p
operator|)
expr_stmt|;
specifier|inline
name|QPointF
operator|&
name|operator
operator|*=
operator|(
name|qreal
name|c
operator|)
expr_stmt|;
specifier|inline
name|QPointF
operator|&
name|operator
operator|/=
operator|(
name|qreal
name|c
operator|)
expr_stmt|;
name|Q_DECL_CONSTEXPR
specifier|static
specifier|inline
name|qreal
name|dotProduct
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|p1
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|p2
parameter_list|)
function_decl|;
name|friend
name|Q_DECL_CONSTEXPR
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QPointF
operator|&
operator|,
specifier|const
name|QPointF
operator|&
operator|)
expr_stmt|;
name|friend
name|Q_DECL_CONSTEXPR
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|QPointF
operator|&
operator|,
specifier|const
name|QPointF
operator|&
operator|)
expr_stmt|;
name|friend
name|Q_DECL_CONSTEXPR
specifier|inline
specifier|const
name|QPointF
name|operator
operator|+
operator|(
specifier|const
name|QPointF
operator|&
operator|,
specifier|const
name|QPointF
operator|&
operator|)
expr_stmt|;
name|friend
name|Q_DECL_CONSTEXPR
specifier|inline
specifier|const
name|QPointF
name|operator
operator|-
operator|(
specifier|const
name|QPointF
operator|&
operator|,
specifier|const
name|QPointF
operator|&
operator|)
expr_stmt|;
name|friend
name|Q_DECL_CONSTEXPR
specifier|inline
specifier|const
name|QPointF
name|operator
modifier|*
parameter_list|(
name|qreal
parameter_list|,
specifier|const
name|QPointF
modifier|&
parameter_list|)
function_decl|;
name|friend
name|Q_DECL_CONSTEXPR
specifier|inline
specifier|const
name|QPointF
name|operator
modifier|*
parameter_list|(
specifier|const
name|QPointF
modifier|&
parameter_list|,
name|qreal
parameter_list|)
function_decl|;
name|friend
name|Q_DECL_CONSTEXPR
specifier|inline
specifier|const
name|QPointF
name|operator
operator|+
operator|(
specifier|const
name|QPointF
operator|&
operator|)
expr_stmt|;
name|friend
name|Q_DECL_CONSTEXPR
specifier|inline
specifier|const
name|QPointF
name|operator
operator|-
operator|(
specifier|const
name|QPointF
operator|&
operator|)
expr_stmt|;
name|friend
name|Q_DECL_CONSTEXPR
specifier|inline
specifier|const
name|QPointF
name|operator
operator|/
operator|(
specifier|const
name|QPointF
operator|&
operator|,
name|qreal
operator|)
expr_stmt|;
name|Q_DECL_CONSTEXPR
name|QPoint
name|toPoint
argument_list|()
specifier|const
expr_stmt|;
name|private
label|:
name|friend
name|class
name|QMatrix
decl_stmt|;
name|friend
name|class
name|QTransform
decl_stmt|;
name|qreal
name|xp
decl_stmt|;
name|qreal
name|yp
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_expr_stmt
name|Q_DECLARE_TYPEINFO
argument_list|(
name|QPointF
argument_list|,
name|Q_MOVABLE_TYPE
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|/*****************************************************************************   QPointF stream functions  *****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DATASTREAM
end_ifndef
begin_expr_stmt
name|Q_CORE_EXPORT
name|QDataStream
operator|&
name|operator
operator|<<
operator|(
name|QDataStream
operator|&
operator|,
specifier|const
name|QPointF
operator|&
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_CORE_EXPORT
name|QDataStream
operator|&
name|operator
operator|>>
operator|(
name|QDataStream
operator|&
operator|,
name|QPointF
operator|&
operator|)
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*****************************************************************************   QPointF inline functions  *****************************************************************************/
end_comment
begin_expr_stmt
DECL|function|QPointF
name|Q_DECL_CONSTEXPR
specifier|inline
name|QPointF
operator|::
name|QPointF
argument_list|()
operator|:
name|xp
argument_list|(
literal|0
argument_list|)
operator|,
name|yp
argument_list|(
literal|0
argument_list|)
block|{ }
DECL|function|QPointF
name|Q_DECL_CONSTEXPR
specifier|inline
name|QPointF
operator|::
name|QPointF
argument_list|(
argument|qreal xpos
argument_list|,
argument|qreal ypos
argument_list|)
operator|:
name|xp
argument_list|(
name|xpos
argument_list|)
operator|,
name|yp
argument_list|(
argument|ypos
argument_list|)
block|{ }
DECL|function|QPointF
name|Q_DECL_CONSTEXPR
specifier|inline
name|QPointF
operator|::
name|QPointF
argument_list|(
specifier|const
name|QPoint
operator|&
name|p
argument_list|)
operator|:
name|xp
argument_list|(
name|p
operator|.
name|x
argument_list|()
argument_list|)
operator|,
name|yp
argument_list|(
argument|p.y()
argument_list|)
block|{ }
DECL|function|manhattanLength
name|Q_DECL_CONSTEXPR
specifier|inline
name|qreal
name|QPointF
operator|::
name|manhattanLength
argument_list|()
specifier|const
block|{
return|return
name|qAbs
argument_list|(
name|x
argument_list|()
argument_list|)
operator|+
name|qAbs
argument_list|(
name|y
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|isNull
specifier|inline
name|bool
name|QPointF
operator|::
name|isNull
argument_list|()
specifier|const
block|{
return|return
name|qIsNull
argument_list|(
name|xp
argument_list|)
operator|&&
name|qIsNull
argument_list|(
name|yp
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|x
name|Q_DECL_CONSTEXPR
specifier|inline
name|qreal
name|QPointF
operator|::
name|x
argument_list|()
specifier|const
block|{
return|return
name|xp
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|y
name|Q_DECL_CONSTEXPR
specifier|inline
name|qreal
name|QPointF
operator|::
name|y
argument_list|()
specifier|const
block|{
return|return
name|yp
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|setX
specifier|inline
name|void
name|QPointF
operator|::
name|setX
argument_list|(
argument|qreal xpos
argument_list|)
block|{
name|xp
operator|=
name|xpos
block|; }
DECL|function|setY
specifier|inline
name|void
name|QPointF
operator|::
name|setY
argument_list|(
argument|qreal ypos
argument_list|)
block|{
name|yp
operator|=
name|ypos
block|; }
DECL|function|rx
specifier|inline
name|qreal
operator|&
name|QPointF
operator|::
name|rx
argument_list|()
block|{
return|return
name|xp
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|ry
specifier|inline
name|qreal
operator|&
name|QPointF
operator|::
name|ry
argument_list|()
block|{
return|return
name|yp
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|member|operator
specifier|inline
name|QPointF
operator|&
name|QPointF
operator|::
name|operator
operator|+=
operator|(
specifier|const
name|QPointF
operator|&
name|p
operator|)
block|{
name|xp
operator|+=
name|p
operator|.
name|xp
block|;
name|yp
operator|+=
name|p
operator|.
name|yp
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QPointF
operator|&
name|QPointF
operator|::
name|operator
operator|-=
operator|(
specifier|const
name|QPointF
operator|&
name|p
operator|)
block|{
name|xp
operator|-=
name|p
operator|.
name|xp
block|;
name|yp
operator|-=
name|p
operator|.
name|yp
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QPointF
operator|&
name|QPointF
operator|::
name|operator
operator|*=
operator|(
name|qreal
name|c
operator|)
block|{
name|xp
operator|*=
name|c
block|;
name|yp
operator|*=
name|c
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|Q_DECL_CONSTEXPR
specifier|inline
name|qreal
name|QPointF
operator|::
name|dotProduct
argument_list|(
argument|const QPointF&p1
argument_list|,
argument|const QPointF&p2
argument_list|)
block|{
return|return
name|p1
operator|.
name|xp
operator|*
name|p2
operator|.
name|xp
operator|+
name|p1
operator|.
name|yp
operator|*
name|p2
operator|.
name|yp
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|Q_DECL_CONSTEXPR
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QPointF
operator|&
name|p1
operator|,
specifier|const
name|QPointF
operator|&
name|p2
operator|)
block|{
return|return
name|qFuzzyIsNull
argument_list|(
name|p1
operator|.
name|xp
operator|-
name|p2
operator|.
name|xp
argument_list|)
operator|&&
name|qFuzzyIsNull
argument_list|(
name|p1
operator|.
name|yp
operator|-
name|p2
operator|.
name|yp
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|Q_DECL_CONSTEXPR
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|QPointF
operator|&
name|p1
operator|,
specifier|const
name|QPointF
operator|&
name|p2
operator|)
block|{
return|return
operator|!
name|qFuzzyIsNull
argument_list|(
name|p1
operator|.
name|xp
operator|-
name|p2
operator|.
name|xp
argument_list|)
operator|||
operator|!
name|qFuzzyIsNull
argument_list|(
name|p1
operator|.
name|yp
operator|-
name|p2
operator|.
name|yp
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|Q_DECL_CONSTEXPR
specifier|inline
specifier|const
name|QPointF
name|operator
operator|+
operator|(
specifier|const
name|QPointF
operator|&
name|p1
operator|,
specifier|const
name|QPointF
operator|&
name|p2
operator|)
block|{
return|return
name|QPointF
argument_list|(
name|p1
operator|.
name|xp
operator|+
name|p2
operator|.
name|xp
argument_list|,
name|p1
operator|.
name|yp
operator|+
name|p2
operator|.
name|yp
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|Q_DECL_CONSTEXPR
specifier|inline
specifier|const
name|QPointF
name|operator
operator|-
operator|(
specifier|const
name|QPointF
operator|&
name|p1
operator|,
specifier|const
name|QPointF
operator|&
name|p2
operator|)
block|{
return|return
name|QPointF
argument_list|(
name|p1
operator|.
name|xp
operator|-
name|p2
operator|.
name|xp
argument_list|,
name|p1
operator|.
name|yp
operator|-
name|p2
operator|.
name|yp
argument_list|)
return|;
block|}
end_expr_stmt
begin_function
name|Q_DECL_CONSTEXPR
specifier|inline
specifier|const
name|QPointF
name|operator
modifier|*
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|p
parameter_list|,
name|qreal
name|c
parameter_list|)
block|{
return|return
name|QPointF
argument_list|(
name|p
operator|.
name|xp
operator|*
name|c
argument_list|,
name|p
operator|.
name|yp
operator|*
name|c
argument_list|)
return|;
block|}
end_function
begin_function
name|Q_DECL_CONSTEXPR
specifier|inline
specifier|const
name|QPointF
name|operator
modifier|*
parameter_list|(
name|qreal
name|c
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|p
parameter_list|)
block|{
return|return
name|QPointF
argument_list|(
name|p
operator|.
name|xp
operator|*
name|c
argument_list|,
name|p
operator|.
name|yp
operator|*
name|c
argument_list|)
return|;
block|}
end_function
begin_expr_stmt
name|Q_DECL_CONSTEXPR
specifier|inline
specifier|const
name|QPointF
name|operator
operator|+
operator|(
specifier|const
name|QPointF
operator|&
name|p
operator|)
block|{
return|return
name|p
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|Q_DECL_CONSTEXPR
specifier|inline
specifier|const
name|QPointF
name|operator
operator|-
operator|(
specifier|const
name|QPointF
operator|&
name|p
operator|)
block|{
return|return
name|QPointF
argument_list|(
operator|-
name|p
operator|.
name|xp
argument_list|,
operator|-
name|p
operator|.
name|yp
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QPointF
operator|&
name|QPointF
operator|::
name|operator
operator|/=
operator|(
name|qreal
name|divisor
operator|)
block|{
name|xp
operator|/=
name|divisor
block|;
name|yp
operator|/=
name|divisor
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|Q_DECL_CONSTEXPR
specifier|inline
specifier|const
name|QPointF
name|operator
operator|/
operator|(
specifier|const
name|QPointF
operator|&
name|p
operator|,
name|qreal
name|divisor
operator|)
block|{
return|return
name|QPointF
argument_list|(
name|p
operator|.
name|xp
operator|/
name|divisor
argument_list|,
name|p
operator|.
name|yp
operator|/
name|divisor
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|Q_DECL_CONSTEXPR
specifier|inline
name|QPoint
name|QPointF
operator|::
name|toPoint
argument_list|()
specifier|const
block|{
return|return
name|QPoint
argument_list|(
name|qRound
argument_list|(
name|xp
argument_list|)
argument_list|,
name|qRound
argument_list|(
name|yp
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DEBUG_STREAM
end_ifndef
begin_expr_stmt
name|Q_CORE_EXPORT
name|QDebug
name|operator
operator|<<
operator|(
name|QDebug
name|d
operator|,
specifier|const
name|QPointF
operator|&
name|p
operator|)
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
name|QT_END_NAMESPACE
name|QT_END_HEADER
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QPOINT_H
end_comment
end_unit
