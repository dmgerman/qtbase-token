begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QLIST_H
end_ifndef
begin_define
DECL|macro|QLIST_H
define|#
directive|define
name|QLIST_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qalgorithms.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qiterator.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qrefcount.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qarraydata.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qhashfunctions.h>
end_include
begin_include
include|#
directive|include
file|<iterator>
end_include
begin_include
include|#
directive|include
file|<list>
end_include
begin_include
include|#
directive|include
file|<algorithm>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_COMPILER_INITIALIZER_LISTS
end_ifdef
begin_include
include|#
directive|include
file|<initializer_list>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<stdlib.h>
end_include
begin_include
include|#
directive|include
file|<new>
end_include
begin_include
include|#
directive|include
file|<limits.h>
end_include
begin_include
include|#
directive|include
file|<string.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_CC_MSVC
end_ifdef
begin_pragma
pragma|#
directive|pragma
name|warning
name|(
name|push
name|)
end_pragma
begin_pragma
pragma|#
directive|pragma
name|warning
name|(
name|disable
name|:
name|4127
name|)
end_pragma
begin_comment
comment|// "conditional expression is constant"
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QVector
name|template
operator|<
name|typename
name|T
operator|>
name|class
name|QVector
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|variable|QSet
name|template
operator|<
name|typename
name|T
operator|>
name|class
name|QSet
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|struct|QListSpecialMethods
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|QListSpecialMethods
block|{
DECL|member|protected
name|protected
operator|:
operator|~
name|QListSpecialMethods
argument_list|()
block|{}
block|}
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|member|QByteArray
name|template
operator|<
operator|>
expr|struct
name|QListSpecialMethods
operator|<
name|QByteArray
operator|>
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|member|QString
name|template
operator|<
operator|>
expr|struct
name|QListSpecialMethods
operator|<
name|QString
operator|>
expr_stmt|;
end_expr_stmt
begin_struct
DECL|struct|QListData
struct|struct
name|Q_CORE_EXPORT
name|QListData
block|{
comment|// tags for tag-dispatching of QList implementations,
comment|// based on QList's three different memory layouts:
DECL|struct|NotArrayCompatibleLayout
struct|struct
name|NotArrayCompatibleLayout
block|{}
struct|;
DECL|struct|NotIndirectLayout
struct|struct
name|NotIndirectLayout
block|{}
struct|;
name|struct
name|ArrayCompatibleLayout
range|:
name|NotIndirectLayout
block|{}
decl_stmt|;
comment|// data laid out like a C array
DECL|struct|NotIndirectLayout
name|struct
name|InlineWithPaddingLayout
range|:
name|NotArrayCompatibleLayout
decl_stmt|,
name|NotIndirectLayout
block|{}
empty_stmt|;
comment|// data laid out like a C array with padding
name|struct
name|IndirectLayout
range|:
name|NotArrayCompatibleLayout
block|{}
decl_stmt|;
comment|// data allocated on the heap
DECL|struct|Data
struct|struct
name|Data
block|{
DECL|member|ref
name|QtPrivate
operator|::
name|RefCount
name|ref
expr_stmt|;
DECL|member|alloc
DECL|member|begin
DECL|member|end
name|int
name|alloc
decl_stmt|,
name|begin
decl_stmt|,
name|end
decl_stmt|;
DECL|member|array
name|void
modifier|*
name|array
index|[
literal|1
index|]
decl_stmt|;
block|}
struct|;
DECL|enumerator|DataHeaderSize
enum|enum
block|{
name|DataHeaderSize
init|=
sizeof|sizeof
argument_list|(
name|Data
argument_list|)
operator|-
expr|sizeof
operator|(
name|void
operator|*
operator|)
block|}
enum|;
name|Data
modifier|*
name|detach
parameter_list|(
name|int
name|alloc
parameter_list|)
function_decl|;
name|Data
modifier|*
name|detach_grow
parameter_list|(
name|int
modifier|*
name|i
parameter_list|,
name|int
name|n
parameter_list|)
function_decl|;
name|void
name|realloc
parameter_list|(
name|int
name|alloc
parameter_list|)
function_decl|;
DECL|function|dispose
specifier|inline
name|void
name|dispose
parameter_list|()
block|{
name|dispose
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|dispose
parameter_list|(
name|Data
modifier|*
name|d
parameter_list|)
function_decl|;
DECL|member|shared_null
specifier|static
specifier|const
name|Data
name|shared_null
decl_stmt|;
DECL|member|d
name|Data
modifier|*
name|d
decl_stmt|;
name|void
modifier|*
modifier|*
name|erase
parameter_list|(
name|void
modifier|*
modifier|*
name|xi
parameter_list|)
function_decl|;
name|void
modifier|*
modifier|*
name|append
parameter_list|(
name|int
name|n
parameter_list|)
function_decl|;
name|void
modifier|*
modifier|*
name|append
parameter_list|()
function_decl|;
name|void
modifier|*
modifier|*
name|append
parameter_list|(
specifier|const
name|QListData
modifier|&
name|l
parameter_list|)
function_decl|;
name|void
modifier|*
modifier|*
name|prepend
parameter_list|()
function_decl|;
name|void
modifier|*
modifier|*
name|insert
parameter_list|(
name|int
name|i
parameter_list|)
function_decl|;
name|void
name|remove
parameter_list|(
name|int
name|i
parameter_list|)
function_decl|;
name|void
name|remove
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|n
parameter_list|)
function_decl|;
name|void
name|move
parameter_list|(
name|int
name|from
parameter_list|,
name|int
name|to
parameter_list|)
function_decl|;
specifier|inline
name|int
name|size
argument_list|()
specifier|const
name|Q_DECL_NOTHROW
block|{
return|return
name|d
operator|->
name|end
operator|-
name|d
operator|->
name|begin
return|;
block|}
specifier|inline
name|bool
name|isEmpty
argument_list|()
specifier|const
name|Q_DECL_NOTHROW
block|{
return|return
name|d
operator|->
name|end
operator|==
name|d
operator|->
name|begin
return|;
block|}
specifier|inline
name|void
modifier|*
modifier|*
name|at
argument_list|(
name|int
name|i
argument_list|)
decl|const
name|Q_DECL_NOTHROW
block|{
return|return
name|d
operator|->
name|array
operator|+
name|d
operator|->
name|begin
operator|+
name|i
return|;
block|}
specifier|inline
name|void
operator|*
operator|*
name|begin
argument_list|()
specifier|const
name|Q_DECL_NOTHROW
block|{
return|return
name|d
operator|->
name|array
operator|+
name|d
operator|->
name|begin
return|;
block|}
specifier|inline
name|void
operator|*
operator|*
name|end
argument_list|()
specifier|const
name|Q_DECL_NOTHROW
block|{
return|return
name|d
operator|->
name|array
operator|+
name|d
operator|->
name|end
return|;
block|}
block|}
struct|;
end_struct
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|member|QList
name|class
name|QList
operator|:
name|public
name|QListSpecialMethods
operator|<
name|T
operator|>
block|{
name|public
operator|:
expr|struct
name|MemoryLayout
operator|:
name|QtPrivate
operator|::
name|if_
operator|<
name|QTypeInfo
operator|<
name|T
operator|>
operator|::
name|isStatic
operator|||
name|QTypeInfo
operator|<
name|T
operator|>
operator|::
name|isLarge
block|,
DECL|member|IndirectLayout
name|QListData
operator|::
name|IndirectLayout
block|,
name|typename
name|QtPrivate
operator|::
name|if_
operator|<
sizeof|sizeof
argument_list|(
name|T
argument_list|)
operator|==
sizeof|sizeof
argument_list|(
name|void
operator|*
argument_list|)
block|,
DECL|member|ArrayCompatibleLayout
name|QListData
operator|::
name|ArrayCompatibleLayout
block|,
name|QListData
operator|::
name|InlineWithPaddingLayout
operator|>
operator|::
name|type
operator|>
operator|::
name|type
block|{}
block|;
DECL|member|private
name|private
operator|:
expr|struct
name|Node
block|{
name|void
operator|*
name|v
block|;
if|#
directive|if
name|defined
argument_list|(
name|Q_CC_BOR
argument_list|)
name|Q_INLINE_TEMPLATE
name|T
operator|&
name|t
argument_list|()
block|;
else|#
directive|else
DECL|function|t
name|Q_INLINE_TEMPLATE
name|T
operator|&
name|t
argument_list|()
block|{
return|return
operator|*
name|reinterpret_cast
operator|<
name|T
operator|*
operator|>
operator|(
name|QTypeInfo
operator|<
name|T
operator|>
operator|::
name|isLarge
operator|||
name|QTypeInfo
operator|<
name|T
operator|>
operator|::
name|isStatic
operator|?
name|v
operator|:
name|this
operator|)
return|;
block|}
endif|#
directive|endif
block|}
expr_stmt|;
end_expr_stmt
begin_union
DECL|member|p
DECL|member|d
union|union
block|{
name|QListData
name|p
decl_stmt|;
name|QListData
operator|::
name|Data
operator|*
name|d
expr_stmt|;
block|}
union|;
end_union
begin_label
name|public
label|:
end_label
begin_expr_stmt
specifier|inline
name|QList
argument_list|()
name|Q_DECL_NOTHROW
operator|:
name|d
argument_list|(
argument|const_cast<QListData::Data *>(&QListData::shared_null)
argument_list|)
block|{ }
name|QList
argument_list|(
specifier|const
name|QList
operator|<
name|T
operator|>
operator|&
name|l
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
operator|~
name|QList
argument_list|()
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|variable|operator
name|QList
operator|<
name|T
operator|>
operator|&
name|operator
operator|=
operator|(
specifier|const
name|QList
operator|<
name|T
operator|>
operator|&
name|l
operator|)
expr_stmt|;
end_expr_stmt
begin_ifdef
ifdef|#
directive|ifdef
name|Q_COMPILER_RVALUE_REFS
end_ifdef
begin_expr_stmt
DECL|function|d
specifier|inline
name|QList
argument_list|(
name|QList
operator|<
name|T
operator|>
operator|&&
name|other
argument_list|)
operator|:
name|d
argument_list|(
argument|other.d
argument_list|)
block|{
name|other
operator|.
name|d
operator|=
name|const_cast
operator|<
name|QListData
operator|::
name|Data
operator|*
operator|>
operator|(
operator|&
name|QListData
operator|::
name|shared_null
operator|)
block|; }
DECL|variable|operator
specifier|inline
name|QList
operator|&
name|operator
operator|=
operator|(
name|QList
operator|<
name|T
operator|>
operator|&&
name|other
operator|)
block|{
name|QList
name|moved
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|other
argument_list|)
argument_list|)
block|;
name|swap
argument_list|(
name|moved
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
specifier|inline
name|void
name|swap
argument_list|(
name|QList
operator|<
name|T
operator|>
operator|&
name|other
argument_list|)
block|{
name|qSwap
argument_list|(
name|d
argument_list|,
name|other
operator|.
name|d
argument_list|)
expr_stmt|;
block|}
end_decl_stmt
begin_ifdef
ifdef|#
directive|ifdef
name|Q_COMPILER_INITIALIZER_LISTS
end_ifdef
begin_expr_stmt
specifier|inline
name|QList
argument_list|(
name|std
operator|::
name|initializer_list
operator|<
name|T
operator|>
name|args
argument_list|)
operator|:
name|d
argument_list|(
argument|const_cast<QListData::Data *>(&QListData::shared_null)
argument_list|)
block|{
name|reserve
argument_list|(
name|int
argument_list|(
name|args
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
block|;
name|std
operator|::
name|copy
argument_list|(
name|args
operator|.
name|begin
argument_list|()
argument_list|,
name|args
operator|.
name|end
argument_list|()
argument_list|,
name|std
operator|::
name|back_inserter
argument_list|(
operator|*
name|this
argument_list|)
argument_list|)
block|; }
endif|#
directive|endif
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QList
operator|<
name|T
operator|>
operator|&
name|l
operator|)
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|QList
operator|<
name|T
operator|>
operator|&
name|l
operator|)
specifier|const
block|{
return|return
operator|!
operator|(
operator|*
name|this
operator|==
name|l
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|int
name|size
argument_list|()
specifier|const
name|Q_DECL_NOTHROW
block|{
return|return
name|p
operator|.
name|size
argument_list|()
return|;
block|}
end_expr_stmt
begin_function
DECL|function|detach
specifier|inline
name|void
name|detach
parameter_list|()
block|{
if|if
condition|(
name|d
operator|->
name|ref
operator|.
name|isShared
argument_list|()
condition|)
name|detach_helper
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|detachShared
specifier|inline
name|void
name|detachShared
parameter_list|()
block|{
comment|// The "this->" qualification is needed for GCCE.
if|if
condition|(
name|d
operator|->
name|ref
operator|.
name|isShared
argument_list|()
operator|&&
name|this
operator|->
name|d
operator|!=
operator|&
name|QListData
operator|::
name|shared_null
condition|)
name|detach_helper
argument_list|()
expr_stmt|;
block|}
end_function
begin_expr_stmt
DECL|function|isDetached
specifier|inline
name|bool
name|isDetached
argument_list|()
specifier|const
block|{
return|return
operator|!
name|d
operator|->
name|ref
operator|.
name|isShared
argument_list|()
return|;
block|}
end_expr_stmt
begin_if
if|#
directive|if
name|QT_SUPPORTS
argument_list|(
name|UNSHARABLE_CONTAINERS
argument_list|)
end_if
begin_function
DECL|function|setSharable
specifier|inline
name|void
name|setSharable
parameter_list|(
name|bool
name|sharable
parameter_list|)
block|{
if|if
condition|(
name|sharable
operator|==
name|d
operator|->
name|ref
operator|.
name|isSharable
argument_list|()
condition|)
return|return;
if|if
condition|(
operator|!
name|sharable
condition|)
name|detach
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|!=
operator|&
name|QListData
operator|::
name|shared_null
condition|)
name|d
operator|->
name|ref
operator|.
name|setSharable
argument_list|(
name|sharable
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
specifier|inline
name|bool
name|isSharedWith
argument_list|(
specifier|const
name|QList
operator|<
name|T
operator|>
operator|&
name|other
argument_list|)
decl|const
name|Q_DECL_NOTHROW
block|{
return|return
name|d
operator|==
name|other
operator|.
name|d
return|;
block|}
end_decl_stmt
begin_expr_stmt
specifier|inline
name|bool
name|isEmpty
argument_list|()
specifier|const
name|Q_DECL_NOTHROW
block|{
return|return
name|p
operator|.
name|isEmpty
argument_list|()
return|;
block|}
end_expr_stmt
begin_function_decl
name|void
name|clear
parameter_list|()
function_decl|;
end_function_decl
begin_decl_stmt
specifier|const
name|T
modifier|&
name|at
argument_list|(
name|int
name|i
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|const
name|T
modifier|&
name|operator
index|[]
argument_list|(
name|int
name|i
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_function_decl
name|T
modifier|&
name|operator
function_decl|[]
parameter_list|(
name|int
name|i
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|reserve
parameter_list|(
name|int
name|size
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|append
parameter_list|(
specifier|const
name|T
modifier|&
name|t
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
name|void
name|append
argument_list|(
specifier|const
name|QList
operator|<
name|T
operator|>
operator|&
name|t
argument_list|)
decl_stmt|;
end_decl_stmt
begin_function_decl
name|void
name|prepend
parameter_list|(
specifier|const
name|T
modifier|&
name|t
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|insert
parameter_list|(
name|int
name|i
parameter_list|,
specifier|const
name|T
modifier|&
name|t
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|replace
parameter_list|(
name|int
name|i
parameter_list|,
specifier|const
name|T
modifier|&
name|t
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|removeAt
parameter_list|(
name|int
name|i
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|removeAll
parameter_list|(
specifier|const
name|T
modifier|&
name|t
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|bool
name|removeOne
parameter_list|(
specifier|const
name|T
modifier|&
name|t
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|T
name|takeAt
parameter_list|(
name|int
name|i
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|T
name|takeFirst
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|T
name|takeLast
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|void
name|move
parameter_list|(
name|int
name|from
parameter_list|,
name|int
name|to
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|swap
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|j
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
name|int
name|indexOf
argument_list|(
specifier|const
name|T
operator|&
name|t
argument_list|,
name|int
name|from
operator|=
literal|0
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|int
name|lastIndexOf
argument_list|(
specifier|const
name|T
operator|&
name|t
argument_list|,
name|int
name|from
operator|=
operator|-
literal|1
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|bool
name|contains
argument_list|(
specifier|const
name|T
operator|&
name|t
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_function
name|int
name|count
parameter_list|(
specifier|const
name|T
modifier|&
name|t
parameter_list|)
function|const;
end_function
begin_decl_stmt
DECL|variable|const_iterator
name|class
name|const_iterator
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|iterator
block|{
name|public
label|:
name|Node
modifier|*
name|i
decl_stmt|;
typedef|typedef
name|std
operator|::
name|random_access_iterator_tag
name|iterator_category
expr_stmt|;
comment|// ### Qt6: use int
typedef|typedef
name|qptrdiff
name|difference_type
typedef|;
typedef|typedef
name|T
name|value_type
typedef|;
typedef|typedef
name|T
modifier|*
name|pointer
typedef|;
typedef|typedef
name|T
modifier|&
name|reference
typedef|;
specifier|inline
name|iterator
argument_list|()
name|Q_DECL_NOTHROW
operator|:
name|i
argument_list|(
argument|Q_NULLPTR
argument_list|)
block|{}
specifier|inline
name|iterator
argument_list|(
argument|Node *n
argument_list|)
name|Q_DECL_NOTHROW
operator|:
name|i
argument_list|(
argument|n
argument_list|)
block|{}
if|#
directive|if
name|QT_VERSION
operator|<
name|QT_VERSION_CHECK
argument_list|(
literal|6
operator|,
literal|0
operator|,
literal|0
argument_list|)
comment|// can't remove it in Qt 5, since doing so would make the type trivial,
comment|// which changes the way it's passed to functions by value.
specifier|inline
name|iterator
argument_list|(
argument|const iterator&o
argument_list|)
name|Q_DECL_NOTHROW
operator|:
name|i
argument_list|(
argument|o.i
argument_list|)
block|{}
endif|#
directive|endif
specifier|inline
name|T
operator|&
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
name|i
operator|->
name|t
argument_list|()
return|;
block|}
specifier|inline
name|T
operator|*
name|operator
operator|->
expr|(
block|)
decl|const
block|{
return|return
operator|&
name|i
operator|->
name|t
argument_list|()
return|;
block|}
end_decl_stmt
begin_decl_stmt
specifier|inline
name|T
modifier|&
name|operator
index|[]
argument_list|(
name|difference_type
name|j
argument_list|)
decl|const
block|{
return|return
name|i
index|[
name|j
index|]
operator|.
name|t
argument_list|()
return|;
block|}
end_decl_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|iterator
operator|&
name|o
operator|)
specifier|const
name|Q_DECL_NOTHROW
block|{
return|return
name|i
operator|==
name|o
operator|.
name|i
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|iterator
operator|&
name|o
operator|)
specifier|const
name|Q_DECL_NOTHROW
block|{
return|return
name|i
operator|!=
name|o
operator|.
name|i
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|<
operator|(
specifier|const
name|iterator
operator|&
name|other
operator|)
specifier|const
name|Q_DECL_NOTHROW
block|{
return|return
name|i
operator|<
name|other
operator|.
name|i
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|<=
operator|(
specifier|const
name|iterator
operator|&
name|other
operator|)
specifier|const
name|Q_DECL_NOTHROW
block|{
return|return
name|i
operator|<=
name|other
operator|.
name|i
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|>
operator|(
specifier|const
name|iterator
operator|&
name|other
operator|)
specifier|const
name|Q_DECL_NOTHROW
block|{
return|return
name|i
operator|>
name|other
operator|.
name|i
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|>=
operator|(
specifier|const
name|iterator
operator|&
name|other
operator|)
specifier|const
name|Q_DECL_NOTHROW
block|{
return|return
name|i
operator|>=
name|other
operator|.
name|i
return|;
block|}
end_expr_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_STRICT_ITERATORS
end_ifndef
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|const_iterator
operator|&
name|o
operator|)
specifier|const
name|Q_DECL_NOTHROW
block|{
return|return
name|i
operator|==
name|o
operator|.
name|i
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|const_iterator
operator|&
name|o
operator|)
specifier|const
name|Q_DECL_NOTHROW
block|{
return|return
name|i
operator|!=
name|o
operator|.
name|i
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|<
operator|(
specifier|const
name|const_iterator
operator|&
name|other
operator|)
specifier|const
name|Q_DECL_NOTHROW
block|{
return|return
name|i
operator|<
name|other
operator|.
name|i
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|<=
operator|(
specifier|const
name|const_iterator
operator|&
name|other
operator|)
specifier|const
name|Q_DECL_NOTHROW
block|{
return|return
name|i
operator|<=
name|other
operator|.
name|i
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|>
operator|(
specifier|const
name|const_iterator
operator|&
name|other
operator|)
specifier|const
name|Q_DECL_NOTHROW
block|{
return|return
name|i
operator|>
name|other
operator|.
name|i
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|>=
operator|(
specifier|const
name|const_iterator
operator|&
name|other
operator|)
specifier|const
name|Q_DECL_NOTHROW
block|{
return|return
name|i
operator|>=
name|other
operator|.
name|i
return|;
block|}
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
specifier|inline
name|iterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
operator|++
name|i
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|iterator
name|operator
operator|++
operator|(
name|int
operator|)
block|{
name|Node
operator|*
name|n
operator|=
name|i
block|;
operator|++
name|i
block|;
return|return
name|n
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|iterator
operator|&
name|operator
operator|--
operator|(
operator|)
block|{
name|i
operator|--
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|iterator
name|operator
operator|--
operator|(
name|int
operator|)
block|{
name|Node
operator|*
name|n
operator|=
name|i
block|;
name|i
operator|--
block|;
return|return
name|n
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|iterator
operator|&
name|operator
operator|+=
operator|(
name|difference_type
name|j
operator|)
block|{
name|i
operator|+=
name|j
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|iterator
operator|&
name|operator
operator|-=
operator|(
name|difference_type
name|j
operator|)
block|{
name|i
operator|-=
name|j
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|iterator
name|operator
operator|+
operator|(
name|difference_type
name|j
operator|)
specifier|const
block|{
return|return
name|iterator
argument_list|(
name|i
operator|+
name|j
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|iterator
name|operator
operator|-
operator|(
name|difference_type
name|j
operator|)
specifier|const
block|{
return|return
name|iterator
argument_list|(
name|i
operator|-
name|j
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|int
name|operator
operator|-
operator|(
name|iterator
name|j
operator|)
specifier|const
block|{
return|return
name|int
argument_list|(
name|i
operator|-
name|j
operator|.
name|i
argument_list|)
return|;
block|}
end_expr_stmt
begin_decl_stmt
unit|};
name|friend
name|class
name|iterator
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|const_iterator
block|{
name|public
label|:
name|Node
modifier|*
name|i
decl_stmt|;
typedef|typedef
name|std
operator|::
name|random_access_iterator_tag
name|iterator_category
expr_stmt|;
comment|// ### Qt6: use int
typedef|typedef
name|qptrdiff
name|difference_type
typedef|;
typedef|typedef
name|T
name|value_type
typedef|;
typedef|typedef
specifier|const
name|T
modifier|*
name|pointer
typedef|;
typedef|typedef
specifier|const
name|T
modifier|&
name|reference
typedef|;
specifier|inline
name|const_iterator
argument_list|()
name|Q_DECL_NOTHROW
operator|:
name|i
argument_list|(
argument|Q_NULLPTR
argument_list|)
block|{}
specifier|inline
name|const_iterator
argument_list|(
argument|Node *n
argument_list|)
name|Q_DECL_NOTHROW
operator|:
name|i
argument_list|(
argument|n
argument_list|)
block|{}
if|#
directive|if
name|QT_VERSION
operator|<
name|QT_VERSION_CHECK
argument_list|(
literal|6
operator|,
literal|0
operator|,
literal|0
argument_list|)
comment|// can't remove it in Qt 5, since doing so would make the type trivial,
comment|// which changes the way it's passed to functions by value.
specifier|inline
name|const_iterator
argument_list|(
argument|const const_iterator&o
argument_list|)
name|Q_DECL_NOTHROW
operator|:
name|i
argument_list|(
argument|o.i
argument_list|)
block|{}
endif|#
directive|endif
ifdef|#
directive|ifdef
name|QT_STRICT_ITERATORS
specifier|inline
name|explicit
name|const_iterator
argument_list|(
argument|const iterator&o
argument_list|)
name|Q_DECL_NOTHROW
operator|:
name|i
argument_list|(
argument|o.i
argument_list|)
block|{}
else|#
directive|else
specifier|inline
name|const_iterator
argument_list|(
argument|const iterator&o
argument_list|)
name|Q_DECL_NOTHROW
operator|:
name|i
argument_list|(
argument|o.i
argument_list|)
block|{}
endif|#
directive|endif
specifier|inline
specifier|const
name|T
operator|&
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
name|i
operator|->
name|t
argument_list|()
return|;
block|}
specifier|inline
specifier|const
name|T
operator|*
name|operator
operator|->
expr|(
block|)
decl|const
block|{
return|return
operator|&
name|i
operator|->
name|t
argument_list|()
return|;
block|}
end_decl_stmt
begin_decl_stmt
specifier|inline
specifier|const
name|T
modifier|&
name|operator
index|[]
argument_list|(
name|difference_type
name|j
argument_list|)
decl|const
block|{
return|return
name|i
index|[
name|j
index|]
operator|.
name|t
argument_list|()
return|;
block|}
end_decl_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|const_iterator
operator|&
name|o
operator|)
specifier|const
name|Q_DECL_NOTHROW
block|{
return|return
name|i
operator|==
name|o
operator|.
name|i
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|const_iterator
operator|&
name|o
operator|)
specifier|const
name|Q_DECL_NOTHROW
block|{
return|return
name|i
operator|!=
name|o
operator|.
name|i
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|<
operator|(
specifier|const
name|const_iterator
operator|&
name|other
operator|)
specifier|const
name|Q_DECL_NOTHROW
block|{
return|return
name|i
operator|<
name|other
operator|.
name|i
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|<=
operator|(
specifier|const
name|const_iterator
operator|&
name|other
operator|)
specifier|const
name|Q_DECL_NOTHROW
block|{
return|return
name|i
operator|<=
name|other
operator|.
name|i
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|>
operator|(
specifier|const
name|const_iterator
operator|&
name|other
operator|)
specifier|const
name|Q_DECL_NOTHROW
block|{
return|return
name|i
operator|>
name|other
operator|.
name|i
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|>=
operator|(
specifier|const
name|const_iterator
operator|&
name|other
operator|)
specifier|const
name|Q_DECL_NOTHROW
block|{
return|return
name|i
operator|>=
name|other
operator|.
name|i
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|const_iterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
operator|++
name|i
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|const_iterator
name|operator
operator|++
operator|(
name|int
operator|)
block|{
name|Node
operator|*
name|n
operator|=
name|i
block|;
operator|++
name|i
block|;
return|return
name|n
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|const_iterator
operator|&
name|operator
operator|--
operator|(
operator|)
block|{
name|i
operator|--
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|const_iterator
name|operator
operator|--
operator|(
name|int
operator|)
block|{
name|Node
operator|*
name|n
operator|=
name|i
block|;
name|i
operator|--
block|;
return|return
name|n
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|const_iterator
operator|&
name|operator
operator|+=
operator|(
name|difference_type
name|j
operator|)
block|{
name|i
operator|+=
name|j
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|const_iterator
operator|&
name|operator
operator|-=
operator|(
name|difference_type
name|j
operator|)
block|{
name|i
operator|-=
name|j
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|const_iterator
name|operator
operator|+
operator|(
name|difference_type
name|j
operator|)
specifier|const
block|{
return|return
name|const_iterator
argument_list|(
name|i
operator|+
name|j
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|const_iterator
name|operator
operator|-
operator|(
name|difference_type
name|j
operator|)
specifier|const
block|{
return|return
name|const_iterator
argument_list|(
name|i
operator|-
name|j
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|int
name|operator
operator|-
operator|(
name|const_iterator
name|j
operator|)
specifier|const
block|{
return|return
name|int
argument_list|(
name|i
operator|-
name|j
operator|.
name|i
argument_list|)
return|;
block|}
end_expr_stmt
begin_decl_stmt
unit|};
name|friend
name|class
name|const_iterator
decl_stmt|;
end_decl_stmt
begin_comment
comment|// stl style
end_comment
begin_typedef
typedef|typedef
name|std
operator|::
name|reverse_iterator
operator|<
name|iterator
operator|>
name|reverse_iterator
expr_stmt|;
end_typedef
begin_typedef
typedef|typedef
name|std
operator|::
name|reverse_iterator
operator|<
name|const_iterator
operator|>
name|const_reverse_iterator
expr_stmt|;
end_typedef
begin_function
specifier|inline
name|iterator
name|begin
parameter_list|()
block|{
name|detach
argument_list|()
expr_stmt|;
return|return
name|reinterpret_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|p
operator|.
name|begin
argument_list|()
operator|)
return|;
block|}
end_function
begin_expr_stmt
specifier|inline
name|const_iterator
name|begin
argument_list|()
specifier|const
name|Q_DECL_NOTHROW
block|{
return|return
name|reinterpret_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|p
operator|.
name|begin
argument_list|()
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|const_iterator
name|cbegin
argument_list|()
specifier|const
name|Q_DECL_NOTHROW
block|{
return|return
name|reinterpret_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|p
operator|.
name|begin
argument_list|()
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|const_iterator
name|constBegin
argument_list|()
specifier|const
name|Q_DECL_NOTHROW
block|{
return|return
name|reinterpret_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|p
operator|.
name|begin
argument_list|()
operator|)
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|iterator
name|end
parameter_list|()
block|{
name|detach
argument_list|()
expr_stmt|;
return|return
name|reinterpret_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|p
operator|.
name|end
argument_list|()
operator|)
return|;
block|}
end_function
begin_expr_stmt
specifier|inline
name|const_iterator
name|end
argument_list|()
specifier|const
name|Q_DECL_NOTHROW
block|{
return|return
name|reinterpret_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|p
operator|.
name|end
argument_list|()
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|const_iterator
name|cend
argument_list|()
specifier|const
name|Q_DECL_NOTHROW
block|{
return|return
name|reinterpret_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|p
operator|.
name|end
argument_list|()
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|const_iterator
name|constEnd
argument_list|()
specifier|const
name|Q_DECL_NOTHROW
block|{
return|return
name|reinterpret_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|p
operator|.
name|end
argument_list|()
operator|)
return|;
block|}
end_expr_stmt
begin_function
name|reverse_iterator
name|rbegin
parameter_list|()
block|{
return|return
name|reverse_iterator
argument_list|(
name|end
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
name|reverse_iterator
name|rend
parameter_list|()
block|{
return|return
name|reverse_iterator
argument_list|(
name|begin
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_expr_stmt
name|const_reverse_iterator
name|rbegin
argument_list|()
specifier|const
name|Q_DECL_NOTHROW
block|{
return|return
name|const_reverse_iterator
argument_list|(
name|end
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|const_reverse_iterator
name|rend
argument_list|()
specifier|const
name|Q_DECL_NOTHROW
block|{
return|return
name|const_reverse_iterator
argument_list|(
name|begin
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|const_reverse_iterator
name|crbegin
argument_list|()
specifier|const
name|Q_DECL_NOTHROW
block|{
return|return
name|const_reverse_iterator
argument_list|(
name|end
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|const_reverse_iterator
name|crend
argument_list|()
specifier|const
name|Q_DECL_NOTHROW
block|{
return|return
name|const_reverse_iterator
argument_list|(
name|begin
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt
begin_function_decl
name|iterator
name|insert
parameter_list|(
name|iterator
name|before
parameter_list|,
specifier|const
name|T
modifier|&
name|t
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|iterator
name|erase
parameter_list|(
name|iterator
name|pos
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|iterator
name|erase
parameter_list|(
name|iterator
name|first
parameter_list|,
name|iterator
name|last
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|// more Qt
end_comment
begin_typedef
typedef|typedef
name|iterator
name|Iterator
typedef|;
end_typedef
begin_typedef
typedef|typedef
name|const_iterator
name|ConstIterator
typedef|;
end_typedef
begin_expr_stmt
specifier|inline
name|int
name|count
argument_list|()
specifier|const
block|{
return|return
name|p
operator|.
name|size
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|int
name|length
argument_list|()
specifier|const
block|{
return|return
name|p
operator|.
name|size
argument_list|()
return|;
block|}
end_expr_stmt
begin_comment
comment|// Same as count()
end_comment
begin_function
specifier|inline
name|T
modifier|&
name|first
parameter_list|()
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|*
name|begin
argument_list|()
return|;
block|}
end_function
begin_expr_stmt
specifier|inline
specifier|const
name|T
operator|&
name|constFirst
argument_list|()
specifier|const
block|{
return|return
name|first
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
specifier|const
name|T
operator|&
name|first
argument_list|()
specifier|const
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|isEmpty
argument_list|()
argument_list|)
block|;
return|return
name|at
argument_list|(
literal|0
argument_list|)
return|;
block|}
end_expr_stmt
begin_function
name|T
modifier|&
name|last
parameter_list|()
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|*
operator|(
operator|--
name|end
argument_list|()
operator|)
return|;
block|}
end_function
begin_expr_stmt
specifier|const
name|T
operator|&
name|last
argument_list|()
specifier|const
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|isEmpty
argument_list|()
argument_list|)
block|;
return|return
name|at
argument_list|(
name|count
argument_list|()
operator|-
literal|1
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
specifier|const
name|T
operator|&
name|constLast
argument_list|()
specifier|const
block|{
return|return
name|last
argument_list|()
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|void
name|removeFirst
parameter_list|()
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|erase
argument_list|(
name|begin
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
specifier|inline
name|void
name|removeLast
parameter_list|()
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|erase
argument_list|(
operator|--
name|end
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_decl_stmt
specifier|inline
name|bool
name|startsWith
argument_list|(
specifier|const
name|T
operator|&
name|t
argument_list|)
decl|const
block|{
return|return
operator|!
name|isEmpty
argument_list|()
operator|&&
name|first
argument_list|()
operator|==
name|t
return|;
block|}
end_decl_stmt
begin_decl_stmt
specifier|inline
name|bool
name|endsWith
argument_list|(
specifier|const
name|T
operator|&
name|t
argument_list|)
decl|const
block|{
return|return
operator|!
name|isEmpty
argument_list|()
operator|&&
name|last
argument_list|()
operator|==
name|t
return|;
block|}
end_decl_stmt
begin_expr_stmt
name|QList
operator|<
name|T
operator|>
name|mid
argument_list|(
argument|int pos
argument_list|,
argument|int length = -
literal|1
argument_list|)
specifier|const
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|T
name|value
argument_list|(
name|int
name|i
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|T
name|value
argument_list|(
name|int
name|i
argument_list|,
specifier|const
name|T
operator|&
name|defaultValue
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_comment
comment|// stl compatibility
end_comment
begin_function
specifier|inline
name|void
name|push_back
parameter_list|(
specifier|const
name|T
modifier|&
name|t
parameter_list|)
block|{
name|append
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
specifier|inline
name|void
name|push_front
parameter_list|(
specifier|const
name|T
modifier|&
name|t
parameter_list|)
block|{
name|prepend
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
specifier|inline
name|T
modifier|&
name|front
parameter_list|()
block|{
return|return
name|first
argument_list|()
return|;
block|}
end_function
begin_expr_stmt
specifier|inline
specifier|const
name|T
operator|&
name|front
argument_list|()
specifier|const
block|{
return|return
name|first
argument_list|()
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|T
modifier|&
name|back
parameter_list|()
block|{
return|return
name|last
argument_list|()
return|;
block|}
end_function
begin_expr_stmt
specifier|inline
specifier|const
name|T
operator|&
name|back
argument_list|()
specifier|const
block|{
return|return
name|last
argument_list|()
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|void
name|pop_front
parameter_list|()
block|{
name|removeFirst
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
specifier|inline
name|void
name|pop_back
parameter_list|()
block|{
name|removeLast
argument_list|()
expr_stmt|;
block|}
end_function
begin_expr_stmt
specifier|inline
name|bool
name|empty
argument_list|()
specifier|const
block|{
return|return
name|isEmpty
argument_list|()
return|;
block|}
end_expr_stmt
begin_typedef
typedef|typedef
name|int
name|size_type
typedef|;
end_typedef
begin_typedef
typedef|typedef
name|T
name|value_type
typedef|;
end_typedef
begin_typedef
typedef|typedef
name|value_type
modifier|*
name|pointer
typedef|;
end_typedef
begin_typedef
typedef|typedef
specifier|const
name|value_type
modifier|*
name|const_pointer
typedef|;
end_typedef
begin_typedef
typedef|typedef
name|value_type
modifier|&
name|reference
typedef|;
end_typedef
begin_typedef
typedef|typedef
specifier|const
name|value_type
modifier|&
name|const_reference
typedef|;
end_typedef
begin_comment
comment|// ### Qt6: use int
end_comment
begin_typedef
typedef|typedef
name|qptrdiff
name|difference_type
typedef|;
end_typedef
begin_comment
comment|// comfort
end_comment
begin_expr_stmt
name|QList
operator|<
name|T
operator|>
operator|&
name|operator
operator|+=
operator|(
specifier|const
name|QList
operator|<
name|T
operator|>
operator|&
name|l
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QList
operator|<
name|T
operator|>
name|operator
operator|+
operator|(
specifier|const
name|QList
operator|<
name|T
operator|>
operator|&
name|l
operator|)
specifier|const
block|{
name|QList
name|n
operator|=
operator|*
name|this
block|;
name|n
operator|+=
name|l
block|;
return|return
name|n
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QList
operator|<
name|T
operator|>
operator|&
name|operator
operator|+=
operator|(
specifier|const
name|T
operator|&
name|t
operator|)
block|{
name|append
argument_list|(
name|t
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QList
operator|<
name|T
operator|>
operator|&
name|operator
operator|<<
operator|(
specifier|const
name|T
operator|&
name|t
operator|)
block|{
name|append
argument_list|(
name|t
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QList
operator|<
name|T
operator|>
operator|&
name|operator
operator|<<
operator|(
specifier|const
name|QList
operator|<
name|T
operator|>
operator|&
name|l
operator|)
block|{
operator|*
name|this
operator|+=
name|l
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|QVector
operator|<
name|T
operator|>
name|toVector
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QSet
operator|<
name|T
operator|>
name|toSet
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
specifier|static
name|QList
operator|<
name|T
operator|>
name|fromVector
argument_list|(
specifier|const
name|QVector
operator|<
name|T
operator|>
operator|&
name|vector
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
specifier|static
name|QList
operator|<
name|T
operator|>
name|fromSet
argument_list|(
specifier|const
name|QSet
operator|<
name|T
operator|>
operator|&
name|set
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
specifier|static
specifier|inline
name|QList
operator|<
name|T
operator|>
name|fromStdList
argument_list|(
argument|const std::list<T>&list
argument_list|)
block|{
name|QList
operator|<
name|T
operator|>
name|tmp
block|;
name|std
operator|::
name|copy
argument_list|(
name|list
operator|.
name|begin
argument_list|()
argument_list|,
name|list
operator|.
name|end
argument_list|()
argument_list|,
name|std
operator|::
name|back_inserter
argument_list|(
name|tmp
argument_list|)
argument_list|)
block|;
return|return
name|tmp
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|std
operator|::
name|list
operator|<
name|T
operator|>
name|toStdList
argument_list|()
specifier|const
block|{
name|std
operator|::
name|list
operator|<
name|T
operator|>
name|tmp
block|;
name|std
operator|::
name|copy
argument_list|(
name|constBegin
argument_list|()
argument_list|,
name|constEnd
argument_list|()
argument_list|,
name|std
operator|::
name|back_inserter
argument_list|(
name|tmp
argument_list|)
argument_list|)
block|;
return|return
name|tmp
return|;
block|}
end_expr_stmt
begin_label
name|private
label|:
end_label
begin_function_decl
name|Node
modifier|*
name|detach_helper_grow
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|n
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|detach_helper
parameter_list|(
name|int
name|alloc
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|detach_helper
parameter_list|()
function_decl|;
end_function_decl
begin_decl_stmt
name|void
name|dealloc
argument_list|(
name|QListData
operator|::
name|Data
operator|*
name|d
argument_list|)
decl_stmt|;
end_decl_stmt
begin_function_decl
name|void
name|node_construct
parameter_list|(
name|Node
modifier|*
name|n
parameter_list|,
specifier|const
name|T
modifier|&
name|t
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|node_destruct
parameter_list|(
name|Node
modifier|*
name|n
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|node_copy
parameter_list|(
name|Node
modifier|*
name|from
parameter_list|,
name|Node
modifier|*
name|to
parameter_list|,
name|Node
modifier|*
name|src
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|node_destruct
parameter_list|(
name|Node
modifier|*
name|from
parameter_list|,
name|Node
modifier|*
name|to
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
name|bool
name|isValidIterator
argument_list|(
specifier|const
name|iterator
operator|&
name|i
argument_list|)
decl|const
name|Q_DECL_NOTHROW
block|{
return|return
operator|(
name|constBegin
argument_list|()
operator|.
name|i
operator|<=
name|i
operator|.
name|i
operator|)
operator|&&
operator|(
name|i
operator|.
name|i
operator|<=
name|constEnd
argument_list|()
operator|.
name|i
operator|)
return|;
block|}
end_decl_stmt
begin_label
name|private
label|:
end_label
begin_decl_stmt
specifier|inline
name|bool
name|op_eq_impl
argument_list|(
specifier|const
name|QList
operator|&
name|other
argument_list|,
name|QListData
operator|::
name|NotArrayCompatibleLayout
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|inline
name|bool
name|op_eq_impl
argument_list|(
specifier|const
name|QList
operator|&
name|other
argument_list|,
name|QListData
operator|::
name|ArrayCompatibleLayout
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|inline
name|bool
name|contains_impl
argument_list|(
specifier|const
name|T
operator|&
argument_list|,
name|QListData
operator|::
name|NotArrayCompatibleLayout
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|inline
name|bool
name|contains_impl
argument_list|(
specifier|const
name|T
operator|&
argument_list|,
name|QListData
operator|::
name|ArrayCompatibleLayout
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|inline
name|int
name|count_impl
argument_list|(
specifier|const
name|T
operator|&
argument_list|,
name|QListData
operator|::
name|NotArrayCompatibleLayout
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|inline
name|int
name|count_impl
argument_list|(
specifier|const
name|T
operator|&
argument_list|,
name|QListData
operator|::
name|ArrayCompatibleLayout
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_if
unit|};
if|#
directive|if
name|defined
argument_list|(
name|Q_CC_BOR
argument_list|)
end_if
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|t
name|Q_INLINE_TEMPLATE
name|T
operator|&
name|QList
operator|<
name|T
operator|>
operator|::
name|Node
operator|::
name|t
argument_list|()
block|{
return|return
name|QTypeInfo
operator|<
name|T
operator|>
operator|::
name|isLarge
operator|||
name|QTypeInfo
operator|<
name|T
operator|>
operator|::
name|isStatic
operator|?
operator|*
operator|(
name|T
operator|*
operator|)
name|v
operator|:
operator|*
operator|(
name|T
operator|*
operator|)
name|this
return|;
block|}
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|node_construct
name|Q_INLINE_TEMPLATE
name|void
name|QList
operator|<
name|T
operator|>
operator|::
name|node_construct
argument_list|(
argument|Node *n
argument_list|,
argument|const T&t
argument_list|)
block|{
if|if
condition|(
name|QTypeInfo
operator|<
name|T
operator|>
operator|::
name|isLarge
operator|||
name|QTypeInfo
operator|<
name|T
operator|>
operator|::
name|isStatic
condition|)
name|n
operator|->
name|v
operator|=
name|new
name|T
argument_list|(
name|t
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|QTypeInfo
operator|<
name|T
operator|>
operator|::
name|isComplex
condition|)
name|new
argument_list|(
argument|n
argument_list|)
name|T
argument_list|(
name|t
argument_list|)
expr_stmt|;
if|#
directive|if
operator|(
name|defined
argument_list|(
name|__GNUC__
argument_list|)
operator|||
name|defined
argument_list|(
name|__INTEL_COMPILER
argument_list|)
operator|||
name|defined
argument_list|(
name|__IBMCPP__
argument_list|)
operator|)
operator|&&
operator|!
name|defined
argument_list|(
name|__OPTIMIZE__
argument_list|)
comment|// This violates pointer aliasing rules, but it is known to be safe (and silent)
comment|// in unoptimized GCC builds (-fno-strict-aliasing). The other compilers which
comment|// set the same define are assumed to be safe.
else|else
operator|*
name|reinterpret_cast
operator|<
name|T
operator|*
operator|>
operator|(
name|n
operator|)
operator|=
name|t
expr_stmt|;
else|#
directive|else
comment|// This is always safe, but penaltizes unoptimized builds a lot.
else|else
operator|::
name|memcpy
argument_list|(
name|n
argument_list|,
name|static_cast
operator|<
specifier|const
name|void
operator|*
operator|>
operator|(
operator|&
name|t
operator|)
argument_list|,
sizeof|sizeof
argument_list|(
name|T
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|node_destruct
name|Q_INLINE_TEMPLATE
name|void
name|QList
operator|<
name|T
operator|>
operator|::
name|node_destruct
argument_list|(
argument|Node *n
argument_list|)
block|{
if|if
condition|(
name|QTypeInfo
operator|<
name|T
operator|>
operator|::
name|isLarge
operator|||
name|QTypeInfo
operator|<
name|T
operator|>
operator|::
name|isStatic
condition|)
name|delete
name|reinterpret_cast
operator|<
name|T
operator|*
operator|>
operator|(
name|n
operator|->
name|v
operator|)
expr_stmt|;
elseif|else
if|if
condition|(
name|QTypeInfo
operator|<
name|T
operator|>
operator|::
name|isComplex
condition|)
name|reinterpret_cast
operator|<
name|T
operator|*
operator|>
operator|(
name|n
operator|)
operator|->
expr|~
name|T
argument_list|()
expr_stmt|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|node_copy
name|Q_INLINE_TEMPLATE
name|void
name|QList
operator|<
name|T
operator|>
operator|::
name|node_copy
argument_list|(
argument|Node *from
argument_list|,
argument|Node *to
argument_list|,
argument|Node *src
argument_list|)
block|{
name|Node
operator|*
name|current
operator|=
name|from
block|;
if|if
condition|(
name|QTypeInfo
operator|<
name|T
operator|>
operator|::
name|isLarge
operator|||
name|QTypeInfo
operator|<
name|T
operator|>
operator|::
name|isStatic
condition|)
block|{
name|QT_TRY
block|{
while|while
condition|(
name|current
operator|!=
name|to
condition|)
block|{
name|current
operator|->
name|v
operator|=
name|new
name|T
argument_list|(
operator|*
name|reinterpret_cast
operator|<
name|T
operator|*
operator|>
operator|(
name|src
operator|->
name|v
operator|)
argument_list|)
expr_stmt|;
operator|++
name|current
expr_stmt|;
operator|++
name|src
expr_stmt|;
block|}
end_expr_stmt
begin_expr_stmt
unit|} QT_CATCH
operator|(
operator|...
operator|)
block|{
while|while
condition|(
name|current
operator|--
operator|!=
name|from
condition|)
name|delete
name|reinterpret_cast
operator|<
name|T
operator|*
operator|>
operator|(
name|current
operator|->
name|v
operator|)
expr_stmt|;
name|QT_RETHROW
expr_stmt|;
end_expr_stmt
begin_elseif
unit|}      }
elseif|else
if|if
condition|(
name|QTypeInfo
operator|<
name|T
operator|>
operator|::
name|isComplex
condition|)
block|{
name|QT_TRY
block|{
while|while
condition|(
name|current
operator|!=
name|to
condition|)
block|{
name|new
argument_list|(
argument|current
argument_list|)
name|T
argument_list|(
operator|*
name|reinterpret_cast
operator|<
name|T
operator|*
operator|>
operator|(
name|src
operator|)
argument_list|)
expr_stmt|;
operator|++
name|current
expr_stmt|;
operator|++
name|src
expr_stmt|;
block|}
block|}
name|QT_CATCH
argument_list|(
argument|...
argument_list|)
block|{
while|while
condition|(
name|current
operator|--
operator|!=
name|from
condition|)
operator|(
name|reinterpret_cast
operator|<
name|T
operator|*
operator|>
operator|(
name|current
operator|)
operator|)
operator|->
operator|~
name|T
argument_list|()
expr_stmt|;
name|QT_RETHROW
expr_stmt|;
block|}
block|}
end_elseif
begin_else
else|else
block|{
if|if
condition|(
name|src
operator|!=
name|from
operator|&&
name|to
operator|-
name|from
operator|>
literal|0
condition|)
name|memcpy
argument_list|(
name|from
argument_list|,
name|src
argument_list|,
operator|(
name|to
operator|-
name|from
operator|)
operator|*
sizeof|sizeof
argument_list|(
name|Node
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_else
begin_expr_stmt
unit|}  template
operator|<
name|typename
name|T
operator|>
DECL|function|node_destruct
name|Q_INLINE_TEMPLATE
name|void
name|QList
operator|<
name|T
operator|>
operator|::
name|node_destruct
argument_list|(
argument|Node *from
argument_list|,
argument|Node *to
argument_list|)
block|{
if|if
condition|(
name|QTypeInfo
operator|<
name|T
operator|>
operator|::
name|isLarge
operator|||
name|QTypeInfo
operator|<
name|T
operator|>
operator|::
name|isStatic
condition|)
while|while
condition|(
name|from
operator|!=
name|to
condition|)
operator|--
name|to
operator|,
name|delete
name|reinterpret_cast
operator|<
name|T
operator|*
operator|>
operator|(
name|to
operator|->
name|v
operator|)
expr_stmt|;
elseif|else
if|if
condition|(
name|QTypeInfo
operator|<
name|T
operator|>
operator|::
name|isComplex
condition|)
while|while
condition|(
name|from
operator|!=
name|to
condition|)
operator|--
name|to
operator|,
name|reinterpret_cast
operator|<
name|T
operator|*
operator|>
operator|(
name|to
operator|)
operator|->
expr|~
name|T
argument_list|()
expr_stmt|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|member|operator
name|Q_INLINE_TEMPLATE
name|QList
operator|<
name|T
operator|>
operator|&
name|QList
operator|<
name|T
operator|>
operator|::
name|operator
operator|=
operator|(
specifier|const
name|QList
operator|<
name|T
operator|>
operator|&
name|l
operator|)
block|{
if|if
condition|(
name|d
operator|!=
name|l
operator|.
name|d
condition|)
block|{
name|QList
operator|<
name|T
operator|>
name|tmp
argument_list|(
name|l
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|swap
argument_list|(
operator|*
name|this
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_return
return|return
operator|*
name|this
return|;
end_return
begin_expr_stmt
unit|} template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|typename
name|QList
operator|<
name|T
operator|>
operator|::
name|iterator
name|QList
operator|<
name|T
operator|>
operator|::
name|insert
argument_list|(
argument|iterator before
argument_list|,
argument|const T&t
argument_list|)
block|{
name|Q_ASSERT_X
argument_list|(
name|isValidIterator
argument_list|(
name|before
argument_list|)
argument_list|,
literal|"QList::insert"
argument_list|,
literal|"The specified iterator argument 'before' is invalid"
argument_list|)
block|;
name|int
name|iBefore
operator|=
name|int
argument_list|(
name|before
operator|.
name|i
operator|-
name|reinterpret_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|p
operator|.
name|begin
argument_list|()
operator|)
argument_list|)
block|;
name|Node
operator|*
name|n
operator|=
literal|0
block|;
if|if
condition|(
name|d
operator|->
name|ref
operator|.
name|isShared
argument_list|()
condition|)
name|n
operator|=
name|detach_helper_grow
argument_list|(
name|iBefore
argument_list|,
literal|1
argument_list|)
expr_stmt|;
else|else
name|n
operator|=
name|reinterpret_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|p
operator|.
name|insert
argument_list|(
name|iBefore
argument_list|)
operator|)
expr_stmt|;
name|QT_TRY
block|{
name|node_construct
argument_list|(
name|n
argument_list|,
name|t
argument_list|)
block|;     }
name|QT_CATCH
argument_list|(
argument|...
argument_list|)
block|{
name|p
operator|.
name|remove
argument_list|(
name|iBefore
argument_list|)
block|;
name|QT_RETHROW
block|;     }
end_expr_stmt
begin_return
return|return
name|n
return|;
end_return
begin_expr_stmt
unit|} template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|typename
name|QList
operator|<
name|T
operator|>
operator|::
name|iterator
name|QList
operator|<
name|T
operator|>
operator|::
name|erase
argument_list|(
argument|iterator it
argument_list|)
block|{
name|Q_ASSERT_X
argument_list|(
name|isValidIterator
argument_list|(
name|it
argument_list|)
argument_list|,
literal|"QList::erase"
argument_list|,
literal|"The specified iterator argument 'it' is invalid"
argument_list|)
block|;
if|if
condition|(
name|d
operator|->
name|ref
operator|.
name|isShared
argument_list|()
condition|)
block|{
name|int
name|offset
init|=
name|int
argument_list|(
name|it
operator|.
name|i
operator|-
name|reinterpret_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|p
operator|.
name|begin
argument_list|()
operator|)
argument_list|)
decl_stmt|;
name|it
operator|=
name|begin
argument_list|()
expr_stmt|;
comment|// implies detach()
name|it
operator|+=
name|offset
expr_stmt|;
block|}
name|node_destruct
argument_list|(
name|it
operator|.
name|i
argument_list|)
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|reinterpret_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|p
operator|.
name|erase
argument_list|(
name|reinterpret_cast
operator|<
name|void
operator|*
operator|*
operator|>
operator|(
name|it
operator|.
name|i
operator|)
argument_list|)
operator|)
return|;
end_return
begin_expr_stmt
unit|} template
operator|<
name|typename
name|T
operator|>
specifier|inline
specifier|const
name|T
operator|&
name|QList
operator|<
name|T
operator|>
operator|::
name|at
argument_list|(
argument|int i
argument_list|)
specifier|const
block|{
name|Q_ASSERT_X
argument_list|(
name|i
operator|>=
literal|0
operator|&&
name|i
operator|<
name|p
operator|.
name|size
argument_list|()
argument_list|,
literal|"QList<T>::at"
argument_list|,
literal|"index out of range"
argument_list|)
block|;
return|return
name|reinterpret_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|p
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|)
operator|->
name|t
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
specifier|const
name|T
operator|&
name|QList
operator|<
name|T
operator|>
operator|::
name|operator
index|[]
operator|(
name|int
name|i
operator|)
specifier|const
block|{
name|Q_ASSERT_X
argument_list|(
name|i
operator|>=
literal|0
operator|&&
name|i
operator|<
name|p
operator|.
name|size
argument_list|()
argument_list|,
literal|"QList<T>::operator[]"
argument_list|,
literal|"index out of range"
argument_list|)
block|;
return|return
name|reinterpret_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|p
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|)
operator|->
name|t
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|T
operator|&
name|QList
operator|<
name|T
operator|>
operator|::
name|operator
index|[]
operator|(
name|int
name|i
operator|)
block|{
name|Q_ASSERT_X
argument_list|(
name|i
operator|>=
literal|0
operator|&&
name|i
operator|<
name|p
operator|.
name|size
argument_list|()
argument_list|,
literal|"QList<T>::operator[]"
argument_list|,
literal|"index out of range"
argument_list|)
block|;
name|detach
argument_list|()
block|;
return|return
name|reinterpret_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|p
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|)
operator|->
name|t
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|void
name|QList
operator|<
name|T
operator|>
operator|::
name|removeAt
argument_list|(
argument|int i
argument_list|)
block|{
if|if
condition|(
name|i
operator|>=
literal|0
operator|&&
name|i
operator|<
name|p
operator|.
name|size
argument_list|()
condition|)
block|{
name|detach
argument_list|()
expr_stmt|;
name|node_destruct
argument_list|(
name|reinterpret_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|p
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_expr_stmt
unit|} template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|T
name|QList
operator|<
name|T
operator|>
operator|::
name|takeAt
argument_list|(
argument|int i
argument_list|)
block|{
name|Q_ASSERT_X
argument_list|(
name|i
operator|>=
literal|0
operator|&&
name|i
operator|<
name|p
operator|.
name|size
argument_list|()
argument_list|,
literal|"QList<T>::take"
argument_list|,
literal|"index out of range"
argument_list|)
block|;
name|detach
argument_list|()
block|;
name|Node
operator|*
name|n
operator|=
name|reinterpret_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|p
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|)
block|;
name|T
name|t
operator|=
name|n
operator|->
name|t
argument_list|()
block|;
name|node_destruct
argument_list|(
name|n
argument_list|)
block|;
name|p
operator|.
name|remove
argument_list|(
name|i
argument_list|)
block|;
return|return
name|t
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|T
name|QList
operator|<
name|T
operator|>
operator|::
name|takeFirst
argument_list|()
block|{
name|T
name|t
operator|=
name|first
argument_list|()
block|;
name|removeFirst
argument_list|()
block|;
return|return
name|t
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|T
name|QList
operator|<
name|T
operator|>
operator|::
name|takeLast
argument_list|()
block|{
name|T
name|t
operator|=
name|last
argument_list|()
block|;
name|removeLast
argument_list|()
block|;
return|return
name|t
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|Q_OUTOFLINE_TEMPLATE
name|void
name|QList
operator|<
name|T
operator|>
operator|::
name|reserve
argument_list|(
argument|int alloc
argument_list|)
block|{
if|if
condition|(
name|d
operator|->
name|alloc
operator|<
name|alloc
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|ref
operator|.
name|isShared
argument_list|()
condition|)
name|detach_helper
argument_list|(
name|alloc
argument_list|)
expr_stmt|;
else|else
name|p
operator|.
name|realloc
argument_list|(
name|alloc
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_expr_stmt
unit|}  template
operator|<
name|typename
name|T
operator|>
name|Q_OUTOFLINE_TEMPLATE
name|void
name|QList
operator|<
name|T
operator|>
operator|::
name|append
argument_list|(
argument|const T&t
argument_list|)
block|{
if|if
condition|(
name|d
operator|->
name|ref
operator|.
name|isShared
argument_list|()
condition|)
block|{
name|Node
modifier|*
name|n
init|=
name|detach_helper_grow
argument_list|(
name|INT_MAX
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|QT_TRY
block|{
name|node_construct
argument_list|(
name|n
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
name|QT_CATCH
argument_list|(
argument|...
argument_list|)
block|{
operator|--
name|d
operator|->
name|end
block|;
name|QT_RETHROW
block|;         }
end_expr_stmt
begin_block
unit|} else
block|{
if|if
condition|(
name|QTypeInfo
operator|<
name|T
operator|>
operator|::
name|isLarge
operator|||
name|QTypeInfo
operator|<
name|T
operator|>
operator|::
name|isStatic
condition|)
block|{
name|Node
modifier|*
name|n
init|=
name|reinterpret_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|p
operator|.
name|append
argument_list|()
operator|)
decl_stmt|;
name|QT_TRY
block|{
name|node_construct
argument_list|(
name|n
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
name|QT_CATCH
argument_list|(
argument|...
argument_list|)
block|{
operator|--
name|d
operator|->
name|end
expr_stmt|;
name|QT_RETHROW
expr_stmt|;
block|}
block|}
else|else
block|{
name|Node
modifier|*
name|n
decl_stmt|,
name|copy
decl_stmt|;
name|node_construct
argument_list|(
operator|&
name|copy
argument_list|,
name|t
argument_list|)
expr_stmt|;
comment|// t might be a reference to an object in the array
name|QT_TRY
block|{
name|n
operator|=
name|reinterpret_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|p
operator|.
name|append
argument_list|()
operator|)
expr_stmt|;
empty_stmt|;
block|}
name|QT_CATCH
argument_list|(
argument|...
argument_list|)
block|{
name|node_destruct
argument_list|(
operator|&
name|copy
argument_list|)
expr_stmt|;
name|QT_RETHROW
expr_stmt|;
block|}
operator|*
name|n
operator|=
name|copy
expr_stmt|;
block|}
block|}
end_block
begin_expr_stmt
unit|}  template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|void
name|QList
operator|<
name|T
operator|>
operator|::
name|prepend
argument_list|(
argument|const T&t
argument_list|)
block|{
if|if
condition|(
name|d
operator|->
name|ref
operator|.
name|isShared
argument_list|()
condition|)
block|{
name|Node
modifier|*
name|n
init|=
name|detach_helper_grow
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|QT_TRY
block|{
name|node_construct
argument_list|(
name|n
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
name|QT_CATCH
argument_list|(
argument|...
argument_list|)
block|{
operator|++
name|d
operator|->
name|begin
block|;
name|QT_RETHROW
block|;         }
end_expr_stmt
begin_block
unit|} else
block|{
if|if
condition|(
name|QTypeInfo
operator|<
name|T
operator|>
operator|::
name|isLarge
operator|||
name|QTypeInfo
operator|<
name|T
operator|>
operator|::
name|isStatic
condition|)
block|{
name|Node
modifier|*
name|n
init|=
name|reinterpret_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|p
operator|.
name|prepend
argument_list|()
operator|)
decl_stmt|;
name|QT_TRY
block|{
name|node_construct
argument_list|(
name|n
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
name|QT_CATCH
argument_list|(
argument|...
argument_list|)
block|{
operator|++
name|d
operator|->
name|begin
expr_stmt|;
name|QT_RETHROW
expr_stmt|;
block|}
block|}
else|else
block|{
name|Node
modifier|*
name|n
decl_stmt|,
name|copy
decl_stmt|;
name|node_construct
argument_list|(
operator|&
name|copy
argument_list|,
name|t
argument_list|)
expr_stmt|;
comment|// t might be a reference to an object in the array
name|QT_TRY
block|{
name|n
operator|=
name|reinterpret_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|p
operator|.
name|prepend
argument_list|()
operator|)
expr_stmt|;
empty_stmt|;
block|}
name|QT_CATCH
argument_list|(
argument|...
argument_list|)
block|{
name|node_destruct
argument_list|(
operator|&
name|copy
argument_list|)
expr_stmt|;
name|QT_RETHROW
expr_stmt|;
block|}
operator|*
name|n
operator|=
name|copy
expr_stmt|;
block|}
block|}
end_block
begin_expr_stmt
unit|}  template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|void
name|QList
operator|<
name|T
operator|>
operator|::
name|insert
argument_list|(
argument|int i
argument_list|,
argument|const T&t
argument_list|)
block|{
if|if
condition|(
name|d
operator|->
name|ref
operator|.
name|isShared
argument_list|()
condition|)
block|{
name|Node
modifier|*
name|n
init|=
name|detach_helper_grow
argument_list|(
name|i
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|QT_TRY
block|{
name|node_construct
argument_list|(
name|n
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
name|QT_CATCH
argument_list|(
argument|...
argument_list|)
block|{
name|p
operator|.
name|remove
argument_list|(
name|i
argument_list|)
block|;
name|QT_RETHROW
block|;         }
end_expr_stmt
begin_block
unit|} else
block|{
if|if
condition|(
name|QTypeInfo
operator|<
name|T
operator|>
operator|::
name|isLarge
operator|||
name|QTypeInfo
operator|<
name|T
operator|>
operator|::
name|isStatic
condition|)
block|{
name|Node
modifier|*
name|n
init|=
name|reinterpret_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|p
operator|.
name|insert
argument_list|(
name|i
argument_list|)
operator|)
decl_stmt|;
name|QT_TRY
block|{
name|node_construct
argument_list|(
name|n
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
name|QT_CATCH
argument_list|(
argument|...
argument_list|)
block|{
name|p
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|QT_RETHROW
expr_stmt|;
block|}
block|}
else|else
block|{
name|Node
modifier|*
name|n
decl_stmt|,
name|copy
decl_stmt|;
name|node_construct
argument_list|(
operator|&
name|copy
argument_list|,
name|t
argument_list|)
expr_stmt|;
comment|// t might be a reference to an object in the array
name|QT_TRY
block|{
name|n
operator|=
name|reinterpret_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|p
operator|.
name|insert
argument_list|(
name|i
argument_list|)
operator|)
expr_stmt|;
empty_stmt|;
block|}
name|QT_CATCH
argument_list|(
argument|...
argument_list|)
block|{
name|node_destruct
argument_list|(
operator|&
name|copy
argument_list|)
expr_stmt|;
name|QT_RETHROW
expr_stmt|;
block|}
operator|*
name|n
operator|=
name|copy
expr_stmt|;
block|}
block|}
end_block
begin_expr_stmt
unit|}  template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|void
name|QList
operator|<
name|T
operator|>
operator|::
name|replace
argument_list|(
argument|int i
argument_list|,
argument|const T&t
argument_list|)
block|{
name|Q_ASSERT_X
argument_list|(
name|i
operator|>=
literal|0
operator|&&
name|i
operator|<
name|p
operator|.
name|size
argument_list|()
argument_list|,
literal|"QList<T>::replace"
argument_list|,
literal|"index out of range"
argument_list|)
block|;
name|detach
argument_list|()
block|;
name|reinterpret_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|p
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|)
operator|->
name|t
argument_list|()
operator|=
name|t
block|; }
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|void
name|QList
operator|<
name|T
operator|>
operator|::
name|swap
argument_list|(
argument|int i
argument_list|,
argument|int j
argument_list|)
block|{
name|Q_ASSERT_X
argument_list|(
name|i
operator|>=
literal|0
operator|&&
name|i
operator|<
name|p
operator|.
name|size
argument_list|()
operator|&&
name|j
operator|>=
literal|0
operator|&&
name|j
operator|<
name|p
operator|.
name|size
argument_list|()
argument_list|,
literal|"QList<T>::swap"
argument_list|,
literal|"index out of range"
argument_list|)
block|;
name|detach
argument_list|()
block|;
name|std
operator|::
name|swap
argument_list|(
name|d
operator|->
name|array
index|[
name|d
operator|->
name|begin
operator|+
name|i
index|]
argument_list|,
name|d
operator|->
name|array
index|[
name|d
operator|->
name|begin
operator|+
name|j
index|]
argument_list|)
block|; }
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|void
name|QList
operator|<
name|T
operator|>
operator|::
name|move
argument_list|(
argument|int from
argument_list|,
argument|int to
argument_list|)
block|{
name|Q_ASSERT_X
argument_list|(
name|from
operator|>=
literal|0
operator|&&
name|from
operator|<
name|p
operator|.
name|size
argument_list|()
operator|&&
name|to
operator|>=
literal|0
operator|&&
name|to
operator|<
name|p
operator|.
name|size
argument_list|()
argument_list|,
literal|"QList<T>::move"
argument_list|,
literal|"index out of range"
argument_list|)
block|;
name|detach
argument_list|()
block|;
name|p
operator|.
name|move
argument_list|(
name|from
argument_list|,
name|to
argument_list|)
block|; }
name|template
operator|<
name|typename
name|T
operator|>
name|Q_OUTOFLINE_TEMPLATE
name|QList
operator|<
name|T
operator|>
name|QList
operator|<
name|T
operator|>
operator|::
name|mid
argument_list|(
argument|int pos
argument_list|,
argument|int alength
argument_list|)
specifier|const
block|{
name|using
name|namespace
name|QtPrivate
block|;
switch|switch
condition|(
name|QContainerImplHelper
operator|::
name|mid
argument_list|(
name|size
argument_list|()
argument_list|,
operator|&
name|pos
argument_list|,
operator|&
name|alength
argument_list|)
condition|)
block|{
case|case
name|QContainerImplHelper
operator|::
name|Null
case|:
case|case
name|QContainerImplHelper
operator|::
name|Empty
case|:
return|return
name|QList
operator|<
name|T
operator|>
operator|(
operator|)
return|;
case|case
name|QContainerImplHelper
operator|::
name|Full
case|:
return|return
operator|*
name|this
return|;
case|case
name|QContainerImplHelper
operator|::
name|Subset
case|:
break|break;
block|}
name|QList
operator|<
name|T
operator|>
name|cpy
expr_stmt|;
end_expr_stmt
begin_if
if|if
condition|(
name|alength
operator|<=
literal|0
condition|)
return|return
name|cpy
return|;
end_if
begin_expr_stmt
name|cpy
operator|.
name|reserve
argument_list|(
name|alength
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|cpy
operator|.
name|d
operator|->
name|end
operator|=
name|alength
expr_stmt|;
end_expr_stmt
begin_macro
name|QT_TRY
end_macro
begin_block
block|{
name|cpy
operator|.
name|node_copy
argument_list|(
name|reinterpret_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|cpy
operator|.
name|p
operator|.
name|begin
argument_list|()
operator|)
argument_list|,
name|reinterpret_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|cpy
operator|.
name|p
operator|.
name|end
argument_list|()
operator|)
argument_list|,
name|reinterpret_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|p
operator|.
name|begin
argument_list|()
operator|+
name|pos
operator|)
argument_list|)
expr_stmt|;
block|}
end_block
begin_macro
name|QT_CATCH
argument_list|(
argument|...
argument_list|)
end_macro
begin_block
block|{
comment|// restore the old end
name|cpy
operator|.
name|d
operator|->
name|end
operator|=
literal|0
expr_stmt|;
name|QT_RETHROW
expr_stmt|;
block|}
end_block
begin_return
return|return
name|cpy
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|typename
name|T
operator|>
name|Q_OUTOFLINE_TEMPLATE
name|T
name|QList
operator|<
name|T
operator|>
operator|::
name|value
argument_list|(
argument|int i
argument_list|)
specifier|const
block|{
if|if
condition|(
name|i
operator|<
literal|0
operator|||
name|i
operator|>=
name|p
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
name|T
argument_list|()
return|;
block|}
end_expr_stmt
begin_return
return|return
name|reinterpret_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|p
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|)
operator|->
name|t
argument_list|()
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|typename
name|T
operator|>
name|Q_OUTOFLINE_TEMPLATE
name|T
name|QList
operator|<
name|T
operator|>
operator|::
name|value
argument_list|(
argument|int i
argument_list|,
argument|const T& defaultValue
argument_list|)
specifier|const
block|{
return|return
operator|(
operator|(
name|i
operator|<
literal|0
operator|||
name|i
operator|>=
name|p
operator|.
name|size
argument_list|()
operator|)
operator|?
name|defaultValue
operator|:
name|reinterpret_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|p
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|)
operator|->
name|t
argument_list|()
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|Q_OUTOFLINE_TEMPLATE
name|typename
name|QList
operator|<
name|T
operator|>
operator|::
name|Node
operator|*
name|QList
operator|<
name|T
operator|>
operator|::
name|detach_helper_grow
argument_list|(
argument|int i
argument_list|,
argument|int c
argument_list|)
block|{
name|Node
operator|*
name|n
operator|=
name|reinterpret_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|p
operator|.
name|begin
argument_list|()
operator|)
block|;
name|QListData
operator|::
name|Data
operator|*
name|x
operator|=
name|p
operator|.
name|detach_grow
argument_list|(
operator|&
name|i
argument_list|,
name|c
argument_list|)
block|;
name|QT_TRY
block|{
name|node_copy
argument_list|(
name|reinterpret_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|p
operator|.
name|begin
argument_list|()
operator|)
argument_list|,
name|reinterpret_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|p
operator|.
name|begin
argument_list|()
operator|+
name|i
operator|)
argument_list|,
name|n
argument_list|)
block|;     }
name|QT_CATCH
argument_list|(
argument|...
argument_list|)
block|{
name|p
operator|.
name|dispose
argument_list|()
block|;
name|d
operator|=
name|x
block|;
name|QT_RETHROW
block|;     }
name|QT_TRY
block|{
name|node_copy
argument_list|(
name|reinterpret_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|p
operator|.
name|begin
argument_list|()
operator|+
name|i
operator|+
name|c
operator|)
argument_list|,
name|reinterpret_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|p
operator|.
name|end
argument_list|()
operator|)
argument_list|,
name|n
operator|+
name|i
argument_list|)
block|;     }
name|QT_CATCH
argument_list|(
argument|...
argument_list|)
block|{
name|node_destruct
argument_list|(
name|reinterpret_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|p
operator|.
name|begin
argument_list|()
operator|)
argument_list|,
name|reinterpret_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|p
operator|.
name|begin
argument_list|()
operator|+
name|i
operator|)
argument_list|)
block|;
name|p
operator|.
name|dispose
argument_list|()
block|;
name|d
operator|=
name|x
block|;
name|QT_RETHROW
block|;     }
if|if
condition|(
operator|!
name|x
operator|->
name|ref
operator|.
name|deref
argument_list|()
condition|)
name|dealloc
argument_list|(
name|x
argument_list|)
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|reinterpret_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|p
operator|.
name|begin
argument_list|()
operator|+
name|i
operator|)
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|typename
name|T
operator|>
name|Q_OUTOFLINE_TEMPLATE
name|void
name|QList
operator|<
name|T
operator|>
operator|::
name|detach_helper
argument_list|(
argument|int alloc
argument_list|)
block|{
name|Node
operator|*
name|n
operator|=
name|reinterpret_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|p
operator|.
name|begin
argument_list|()
operator|)
block|;
name|QListData
operator|::
name|Data
operator|*
name|x
operator|=
name|p
operator|.
name|detach
argument_list|(
name|alloc
argument_list|)
block|;
name|QT_TRY
block|{
name|node_copy
argument_list|(
name|reinterpret_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|p
operator|.
name|begin
argument_list|()
operator|)
argument_list|,
name|reinterpret_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|p
operator|.
name|end
argument_list|()
operator|)
argument_list|,
name|n
argument_list|)
block|;     }
name|QT_CATCH
argument_list|(
argument|...
argument_list|)
block|{
name|p
operator|.
name|dispose
argument_list|()
block|;
name|d
operator|=
name|x
block|;
name|QT_RETHROW
block|;     }
if|if
condition|(
operator|!
name|x
operator|->
name|ref
operator|.
name|deref
argument_list|()
condition|)
name|dealloc
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|Q_OUTOFLINE_TEMPLATE
name|void
name|QList
operator|<
name|T
operator|>
operator|::
name|detach_helper
argument_list|()
block|{
name|detach_helper
argument_list|(
name|d
operator|->
name|alloc
argument_list|)
block|; }
name|template
operator|<
name|typename
name|T
operator|>
name|Q_OUTOFLINE_TEMPLATE
name|QList
operator|<
name|T
operator|>
operator|::
name|QList
argument_list|(
specifier|const
name|QList
operator|<
name|T
operator|>
operator|&
name|l
argument_list|)
DECL|function|d
operator|:
name|QListSpecialMethods
operator|<
name|T
operator|>
operator|(
name|l
operator|)
operator|,
name|d
argument_list|(
argument|l.d
argument_list|)
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|ref
operator|.
name|ref
argument_list|()
condition|)
block|{
name|p
operator|.
name|detach
argument_list|(
name|d
operator|->
name|alloc
argument_list|)
expr_stmt|;
name|QT_TRY
block|{
name|node_copy
argument_list|(
name|reinterpret_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|p
operator|.
name|begin
argument_list|()
operator|)
argument_list|,
name|reinterpret_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|p
operator|.
name|end
argument_list|()
operator|)
argument_list|,
name|reinterpret_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|l
operator|.
name|p
operator|.
name|begin
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
name|QT_CATCH
argument_list|(
argument|...
argument_list|)
block|{
name|QListData
operator|::
name|dispose
argument_list|(
name|d
argument_list|)
block|;
name|QT_RETHROW
block|;         }
end_expr_stmt
begin_expr_stmt
unit|} }
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|~QList
name|Q_OUTOFLINE_TEMPLATE
name|QList
operator|<
name|T
operator|>
operator|::
operator|~
name|QList
argument_list|()
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|ref
operator|.
name|deref
argument_list|()
condition|)
name|dealloc
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|Q_OUTOFLINE_TEMPLATE
name|bool
name|QList
operator|<
name|T
operator|>
operator|::
name|operator
operator|==
operator|(
specifier|const
name|QList
operator|<
name|T
operator|>
operator|&
name|l
operator|)
specifier|const
block|{
if|if
condition|(
name|d
operator|==
name|l
operator|.
name|d
condition|)
return|return
name|true
return|;
end_expr_stmt
begin_if
if|if
condition|(
name|p
operator|.
name|size
argument_list|()
operator|!=
name|l
operator|.
name|p
operator|.
name|size
argument_list|()
condition|)
return|return
name|false
return|;
end_if
begin_return
return|return
name|this
operator|->
name|op_eq_impl
argument_list|(
name|l
argument_list|,
name|MemoryLayout
argument_list|()
argument_list|)
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|typename
name|T
operator|>
DECL|function|op_eq_impl
specifier|inline
name|bool
name|QList
operator|<
name|T
operator|>
operator|::
name|op_eq_impl
argument_list|(
argument|const QList&l
argument_list|,
argument|QListData::NotArrayCompatibleLayout
argument_list|)
specifier|const
block|{
name|Node
operator|*
name|i
operator|=
name|reinterpret_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|p
operator|.
name|begin
argument_list|()
operator|)
block|;
name|Node
operator|*
name|e
operator|=
name|reinterpret_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|p
operator|.
name|end
argument_list|()
operator|)
block|;
name|Node
operator|*
name|li
operator|=
name|reinterpret_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|l
operator|.
name|p
operator|.
name|begin
argument_list|()
operator|)
block|;
for|for
control|(
init|;
name|i
operator|!=
name|e
condition|;
operator|++
name|i
operator|,
operator|++
name|li
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|i
operator|->
name|t
argument_list|()
operator|==
name|li
operator|->
name|t
argument_list|()
operator|)
condition|)
return|return
name|false
return|;
block|}
end_expr_stmt
begin_return
return|return
name|true
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|typename
name|T
operator|>
DECL|function|op_eq_impl
specifier|inline
name|bool
name|QList
operator|<
name|T
operator|>
operator|::
name|op_eq_impl
argument_list|(
argument|const QList&l
argument_list|,
argument|QListData::ArrayCompatibleLayout
argument_list|)
specifier|const
block|{
specifier|const
name|T
operator|*
name|lb
operator|=
name|reinterpret_cast
operator|<
specifier|const
name|T
operator|*
operator|>
operator|(
name|l
operator|.
name|p
operator|.
name|begin
argument_list|()
operator|)
block|;
specifier|const
name|T
operator|*
name|b
operator|=
name|reinterpret_cast
operator|<
specifier|const
name|T
operator|*
operator|>
operator|(
name|p
operator|.
name|begin
argument_list|()
operator|)
block|;
specifier|const
name|T
operator|*
name|e
operator|=
name|reinterpret_cast
operator|<
specifier|const
name|T
operator|*
operator|>
operator|(
name|p
operator|.
name|end
argument_list|()
operator|)
block|;
return|return
name|std
operator|::
name|equal
argument_list|(
name|b
argument_list|,
name|e
argument_list|,
name|lb
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|dealloc
name|Q_OUTOFLINE_TEMPLATE
name|void
name|QList
operator|<
name|T
operator|>
operator|::
name|dealloc
argument_list|(
argument|QListData::Data *data
argument_list|)
block|{
name|node_destruct
argument_list|(
name|reinterpret_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|data
operator|->
name|array
operator|+
name|data
operator|->
name|begin
operator|)
argument_list|,
name|reinterpret_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|data
operator|->
name|array
operator|+
name|data
operator|->
name|end
operator|)
argument_list|)
block|;
name|QListData
operator|::
name|dispose
argument_list|(
name|data
argument_list|)
block|; }
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|clear
name|Q_OUTOFLINE_TEMPLATE
name|void
name|QList
operator|<
name|T
operator|>
operator|::
name|clear
argument_list|()
block|{
operator|*
name|this
operator|=
name|QList
operator|<
name|T
operator|>
operator|(
operator|)
block|; }
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|removeAll
name|Q_OUTOFLINE_TEMPLATE
name|int
name|QList
operator|<
name|T
operator|>
operator|::
name|removeAll
argument_list|(
argument|const T&_t
argument_list|)
block|{
name|int
name|index
operator|=
name|indexOf
argument_list|(
name|_t
argument_list|)
block|;
if|if
condition|(
name|index
operator|==
operator|-
literal|1
condition|)
return|return
literal|0
return|;
specifier|const
name|T
name|t
operator|=
name|_t
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|detach
argument_list|()
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|Node
modifier|*
name|i
init|=
name|reinterpret_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|p
operator|.
name|at
argument_list|(
name|index
argument_list|)
operator|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|Node
modifier|*
name|e
init|=
name|reinterpret_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|p
operator|.
name|end
argument_list|()
operator|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|Node
modifier|*
name|n
init|=
name|i
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|node_destruct
argument_list|(
name|i
argument_list|)
expr_stmt|;
end_expr_stmt
begin_while
while|while
condition|(
operator|++
name|i
operator|!=
name|e
condition|)
block|{
if|if
condition|(
name|i
operator|->
name|t
argument_list|()
operator|==
name|t
condition|)
name|node_destruct
argument_list|(
name|i
argument_list|)
expr_stmt|;
else|else
operator|*
name|n
operator|++
operator|=
operator|*
name|i
expr_stmt|;
block|}
end_while
begin_decl_stmt
name|int
name|removedCount
init|=
name|e
operator|-
name|n
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|d
operator|->
name|end
operator|-=
name|removedCount
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|removedCount
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|typename
name|T
operator|>
DECL|function|removeOne
name|Q_OUTOFLINE_TEMPLATE
name|bool
name|QList
operator|<
name|T
operator|>
operator|::
name|removeOne
argument_list|(
argument|const T&_t
argument_list|)
block|{
name|int
name|index
operator|=
name|indexOf
argument_list|(
name|_t
argument_list|)
block|;
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
condition|)
block|{
name|removeAt
argument_list|(
name|index
argument_list|)
expr_stmt|;
return|return
name|true
return|;
block|}
end_expr_stmt
begin_return
return|return
name|false
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|typename
name|T
operator|>
name|Q_OUTOFLINE_TEMPLATE
name|typename
name|QList
operator|<
name|T
operator|>
operator|::
name|iterator
name|QList
operator|<
name|T
operator|>
operator|::
name|erase
argument_list|(
argument|typename QList<T>::iterator afirst
argument_list|,
argument|typename QList<T>::iterator alast
argument_list|)
block|{
name|Q_ASSERT_X
argument_list|(
name|isValidIterator
argument_list|(
name|afirst
argument_list|)
argument_list|,
literal|"QList::erase"
argument_list|,
literal|"The specified iterator argument 'afirst' is invalid"
argument_list|)
block|;
name|Q_ASSERT_X
argument_list|(
name|isValidIterator
argument_list|(
name|alast
argument_list|)
argument_list|,
literal|"QList::erase"
argument_list|,
literal|"The specified iterator argument 'alast' is invalid"
argument_list|)
block|;
if|if
condition|(
name|d
operator|->
name|ref
operator|.
name|isShared
argument_list|()
condition|)
block|{
comment|// ### A block is erased and a detach is needed. We should shrink and only copy relevant items.
name|int
name|offsetfirst
init|=
name|int
argument_list|(
name|afirst
operator|.
name|i
operator|-
name|reinterpret_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|p
operator|.
name|begin
argument_list|()
operator|)
argument_list|)
decl_stmt|;
name|int
name|offsetlast
init|=
name|int
argument_list|(
name|alast
operator|.
name|i
operator|-
name|reinterpret_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|p
operator|.
name|begin
argument_list|()
operator|)
argument_list|)
decl_stmt|;
name|afirst
operator|=
name|begin
argument_list|()
expr_stmt|;
comment|// implies detach()
name|alast
operator|=
name|afirst
expr_stmt|;
name|afirst
operator|+=
name|offsetfirst
expr_stmt|;
name|alast
operator|+=
name|offsetlast
expr_stmt|;
block|}
end_expr_stmt
begin_for
for|for
control|(
name|Node
modifier|*
name|n
init|=
name|afirst
operator|.
name|i
init|;
name|n
operator|<
name|alast
operator|.
name|i
condition|;
operator|++
name|n
control|)
name|node_destruct
argument_list|(
name|n
argument_list|)
expr_stmt|;
end_for
begin_decl_stmt
name|int
name|idx
init|=
name|afirst
operator|-
name|begin
argument_list|()
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|p
operator|.
name|remove
argument_list|(
name|idx
argument_list|,
name|alast
operator|-
name|afirst
argument_list|)
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|begin
argument_list|()
operator|+
name|idx
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|typename
name|T
operator|>
name|Q_OUTOFLINE_TEMPLATE
name|QList
operator|<
name|T
operator|>
operator|&
name|QList
operator|<
name|T
operator|>
operator|::
name|operator
operator|+=
operator|(
specifier|const
name|QList
operator|<
name|T
operator|>
operator|&
name|l
operator|)
block|{
if|if
condition|(
operator|!
name|l
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|isEmpty
argument_list|()
condition|)
block|{
operator|*
name|this
operator|=
name|l
expr_stmt|;
block|}
end_expr_stmt
begin_else
else|else
block|{
name|Node
modifier|*
name|n
init|=
operator|(
name|d
operator|->
name|ref
operator|.
name|isShared
argument_list|()
operator|)
condition|?
name|detach_helper_grow
argument_list|(
name|INT_MAX
argument_list|,
name|l
operator|.
name|size
argument_list|()
argument_list|)
else|:
name|reinterpret_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|p
operator|.
name|append
argument_list|(
name|l
operator|.
name|p
argument_list|)
operator|)
decl_stmt|;
name|QT_TRY
block|{
name|node_copy
argument_list|(
name|n
argument_list|,
name|reinterpret_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|p
operator|.
name|end
argument_list|()
operator|)
argument_list|,
name|reinterpret_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|l
operator|.
name|p
operator|.
name|begin
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
name|QT_CATCH
argument_list|(
argument|...
argument_list|)
block|{
comment|// restore the old end
name|d
operator|->
name|end
operator|-=
name|int
argument_list|(
name|reinterpret_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|p
operator|.
name|end
argument_list|()
operator|)
operator|-
name|n
argument_list|)
expr_stmt|;
name|QT_RETHROW
expr_stmt|;
block|}
block|}
end_else
begin_expr_stmt
unit|}     return
operator|*
name|this
expr_stmt|;
end_expr_stmt
begin_expr_stmt
unit|}  template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|void
name|QList
operator|<
name|T
operator|>
operator|::
name|append
argument_list|(
argument|const QList<T>&t
argument_list|)
block|{
operator|*
name|this
operator|+=
name|t
block|; }
name|template
operator|<
name|typename
name|T
operator|>
name|Q_OUTOFLINE_TEMPLATE
name|int
name|QList
operator|<
name|T
operator|>
operator|::
name|indexOf
argument_list|(
argument|const T&t
argument_list|,
argument|int from
argument_list|)
specifier|const
block|{
if|if
condition|(
name|from
operator|<
literal|0
condition|)
name|from
operator|=
name|qMax
argument_list|(
name|from
operator|+
name|p
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
end_expr_stmt
begin_if
if|if
condition|(
name|from
operator|<
name|p
operator|.
name|size
argument_list|()
condition|)
block|{
name|Node
modifier|*
name|n
init|=
name|reinterpret_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|p
operator|.
name|at
argument_list|(
name|from
operator|-
literal|1
argument_list|)
operator|)
decl_stmt|;
name|Node
modifier|*
name|e
init|=
name|reinterpret_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|p
operator|.
name|end
argument_list|()
operator|)
decl_stmt|;
while|while
condition|(
operator|++
name|n
operator|!=
name|e
condition|)
if|if
condition|(
name|n
operator|->
name|t
argument_list|()
operator|==
name|t
condition|)
return|return
name|int
argument_list|(
name|n
operator|-
name|reinterpret_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|p
operator|.
name|begin
argument_list|()
operator|)
argument_list|)
return|;
block|}
end_if
begin_return
return|return
operator|-
literal|1
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|typename
name|T
operator|>
name|Q_OUTOFLINE_TEMPLATE
name|int
name|QList
operator|<
name|T
operator|>
operator|::
name|lastIndexOf
argument_list|(
argument|const T&t
argument_list|,
argument|int from
argument_list|)
specifier|const
block|{
if|if
condition|(
name|from
operator|<
literal|0
condition|)
name|from
operator|+=
name|p
operator|.
name|size
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|from
operator|>=
name|p
operator|.
name|size
argument_list|()
condition|)
name|from
operator|=
name|p
operator|.
name|size
argument_list|()
operator|-
literal|1
expr_stmt|;
end_expr_stmt
begin_if
if|if
condition|(
name|from
operator|>=
literal|0
condition|)
block|{
name|Node
modifier|*
name|b
init|=
name|reinterpret_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|p
operator|.
name|begin
argument_list|()
operator|)
decl_stmt|;
name|Node
modifier|*
name|n
init|=
name|reinterpret_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|p
operator|.
name|at
argument_list|(
name|from
operator|+
literal|1
argument_list|)
operator|)
decl_stmt|;
while|while
condition|(
name|n
operator|--
operator|!=
name|b
condition|)
block|{
if|if
condition|(
name|n
operator|->
name|t
argument_list|()
operator|==
name|t
condition|)
return|return
name|n
operator|-
name|b
return|;
block|}
block|}
end_if
begin_return
return|return
operator|-
literal|1
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|typename
name|T
operator|>
name|Q_OUTOFLINE_TEMPLATE
name|bool
name|QList
operator|<
name|T
operator|>
operator|::
name|contains
argument_list|(
argument|const T&t
argument_list|)
specifier|const
block|{
return|return
name|contains_impl
argument_list|(
name|t
argument_list|,
name|MemoryLayout
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|bool
name|QList
operator|<
name|T
operator|>
operator|::
name|contains_impl
argument_list|(
argument|const T&t
argument_list|,
argument|QListData::NotArrayCompatibleLayout
argument_list|)
specifier|const
block|{
name|Node
operator|*
name|e
operator|=
name|reinterpret_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|p
operator|.
name|end
argument_list|()
operator|)
block|;
name|Node
operator|*
name|i
operator|=
name|reinterpret_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|p
operator|.
name|begin
argument_list|()
operator|)
block|;
for|for
control|(
init|;
name|i
operator|!=
name|e
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|i
operator|->
name|t
argument_list|()
operator|==
name|t
condition|)
return|return
name|true
return|;
end_expr_stmt
begin_return
return|return
name|false
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|bool
name|QList
operator|<
name|T
operator|>
operator|::
name|contains_impl
argument_list|(
argument|const T&t
argument_list|,
argument|QListData::ArrayCompatibleLayout
argument_list|)
specifier|const
block|{
specifier|const
name|T
operator|*
name|b
operator|=
name|reinterpret_cast
operator|<
specifier|const
name|T
operator|*
operator|>
operator|(
name|p
operator|.
name|begin
argument_list|()
operator|)
block|;
specifier|const
name|T
operator|*
name|e
operator|=
name|reinterpret_cast
operator|<
specifier|const
name|T
operator|*
operator|>
operator|(
name|p
operator|.
name|end
argument_list|()
operator|)
block|;
return|return
name|std
operator|::
name|find
argument_list|(
name|b
argument_list|,
name|e
argument_list|,
name|t
argument_list|)
operator|!=
name|e
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|Q_OUTOFLINE_TEMPLATE
name|int
name|QList
operator|<
name|T
operator|>
operator|::
name|count
argument_list|(
argument|const T&t
argument_list|)
specifier|const
block|{
return|return
name|this
operator|->
name|count_impl
argument_list|(
name|t
argument_list|,
name|MemoryLayout
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|int
name|QList
operator|<
name|T
operator|>
operator|::
name|count_impl
argument_list|(
argument|const T&t
argument_list|,
argument|QListData::NotArrayCompatibleLayout
argument_list|)
specifier|const
block|{
name|int
name|c
operator|=
literal|0
block|;
name|Node
operator|*
name|e
operator|=
name|reinterpret_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|p
operator|.
name|end
argument_list|()
operator|)
block|;
name|Node
operator|*
name|i
operator|=
name|reinterpret_cast
operator|<
name|Node
operator|*
operator|>
operator|(
name|p
operator|.
name|begin
argument_list|()
operator|)
block|;
for|for
control|(
init|;
name|i
operator|!=
name|e
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|i
operator|->
name|t
argument_list|()
operator|==
name|t
condition|)
operator|++
name|c
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|c
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|int
name|QList
operator|<
name|T
operator|>
operator|::
name|count_impl
argument_list|(
argument|const T&t
argument_list|,
argument|QListData::ArrayCompatibleLayout
argument_list|)
specifier|const
block|{
return|return
name|int
argument_list|(
name|std
operator|::
name|count
argument_list|(
name|reinterpret_cast
operator|<
specifier|const
name|T
operator|*
operator|>
operator|(
name|p
operator|.
name|begin
argument_list|()
operator|)
argument_list|,
name|reinterpret_cast
operator|<
specifier|const
name|T
operator|*
operator|>
operator|(
name|p
operator|.
name|end
argument_list|()
operator|)
argument_list|,
name|t
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt
begin_macro
name|Q_DECLARE_SEQUENTIAL_ITERATOR
argument_list|(
argument|List
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_MUTABLE_SEQUENTIAL_ITERATOR
argument_list|(
argument|List
argument_list|)
end_macro
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|uint
name|qHash
argument_list|(
argument|const QList<T>&key
argument_list|,
argument|uint seed =
literal|0
argument_list|)
name|Q_DECL_NOEXCEPT_EXPR
argument_list|(
argument|noexcept(qHashRange(key.cbegin(), key.cend(), seed))
argument_list|)
block|{
return|return
name|qHashRange
argument_list|(
name|key
operator|.
name|cbegin
argument_list|()
argument_list|,
name|key
operator|.
name|cend
argument_list|()
argument_list|,
name|seed
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|bool
name|operator
operator|<
operator|(
specifier|const
name|QList
operator|<
name|T
operator|>
operator|&
name|lhs
operator|,
specifier|const
name|QList
operator|<
name|T
operator|>
operator|&
name|rhs
operator|)
name|Q_DECL_NOEXCEPT_EXPR
argument_list|(
argument|noexcept(std::lexicographical_compare(lhs.begin(), lhs.end(),                                                                rhs.begin(), rhs.end()))
argument_list|)
block|{
return|return
name|std
operator|::
name|lexicographical_compare
argument_list|(
name|lhs
operator|.
name|begin
argument_list|()
argument_list|,
name|lhs
operator|.
name|end
argument_list|()
argument_list|,
name|rhs
operator|.
name|begin
argument_list|()
argument_list|,
name|rhs
operator|.
name|end
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|bool
name|operator
operator|>
operator|(
specifier|const
name|QList
operator|<
name|T
operator|>
operator|&
name|lhs
operator|,
specifier|const
name|QList
operator|<
name|T
operator|>
operator|&
name|rhs
operator|)
name|Q_DECL_NOEXCEPT_EXPR
argument_list|(
argument|noexcept(lhs< rhs)
argument_list|)
block|{
return|return
name|rhs
operator|<
name|lhs
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|bool
name|operator
operator|<=
operator|(
specifier|const
name|QList
operator|<
name|T
operator|>
operator|&
name|lhs
operator|,
specifier|const
name|QList
operator|<
name|T
operator|>
operator|&
name|rhs
operator|)
name|Q_DECL_NOEXCEPT_EXPR
argument_list|(
argument|noexcept(lhs< rhs)
argument_list|)
block|{
return|return
operator|!
operator|(
name|lhs
operator|>
name|rhs
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|bool
name|operator
operator|>=
operator|(
specifier|const
name|QList
operator|<
name|T
operator|>
operator|&
name|lhs
operator|,
specifier|const
name|QList
operator|<
name|T
operator|>
operator|&
name|rhs
operator|)
name|Q_DECL_NOEXCEPT_EXPR
argument_list|(
argument|noexcept(lhs< rhs)
argument_list|)
block|{
return|return
operator|!
operator|(
name|lhs
operator|<
name|rhs
operator|)
return|;
block|}
end_expr_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_include
include|#
directive|include
file|<QtCore/qbytearraylist.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qstringlist.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_CC_MSVC
end_ifdef
begin_pragma
pragma|#
directive|pragma
name|warning
name|(
name|pop
name|)
end_pragma
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QLIST_H
end_comment
end_unit
