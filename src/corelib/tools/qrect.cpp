begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qrect.h"
end_include
begin_include
include|#
directive|include
file|"qdatastream.h"
end_include
begin_include
include|#
directive|include
file|"qdebug.h"
end_include
begin_include
include|#
directive|include
file|"qmath.h"
end_include
begin_include
include|#
directive|include
file|<math.h>
end_include
begin_function
name|QT_BEGIN_NAMESPACE
comment|/*!     \class QRect     \inmodule QtCore     \ingroup painting      \brief The QRect class defines a rectangle in the plane using     integer precision.      A rectangle is normally expressed as an upper-left corner and a     size.  The size (width and height) of a QRect is always equivalent     to the mathematical rectangle that forms the basis for its     rendering.      A QRect can be constructed with a set of left, top, width and     height integers, or from a QPoint and a QSize.  The following code     creates two identical rectangles.      \snippet code/src_corelib_tools_qrect.cpp 0      There is a third constructor that creates a QRect using the     top-left and bottom-right coordinates, but we recommend that you     avoid using it. The rationale is that for historical reasons the     values returned by the bottom() and right() functions deviate from     the true bottom-right corner of the rectangle.      The QRect class provides a collection of functions that return the     various rectangle coordinates, and enable manipulation of     these. QRect also provide functions to move the rectangle relative     to the various coordinates. In addition there is a moveTo()     function that moves the rectangle, leaving its top left corner at     the given coordinates. Alternatively, the translate() function     moves the rectangle the given offset relative to the current     position, and the translated() function returns a translated copy     of this rectangle.      The size() function returns the rectange's dimensions as a     QSize. The dimensions can also be retrieved separately using the     width() and height() functions. To manipulate the dimensions use     the setSize(), setWidth() or setHeight() functions. Alternatively,     the size can be changed by applying either of the functions     setting the rectangle coordinates, for example, setBottom() or     setRight().      The contains() function tells whether a given point is inside the     rectangle or not, and the intersects() function returns \c true if     this rectangle intersects with a given rectangle. The QRect class     also provides the intersected() function which returns the     intersection rectangle, and the united() function which returns the     rectangle that encloses the given rectangle and this:      \table     \row     \li \inlineimage qrect-intersect.png     \li \inlineimage qrect-unite.png     \row     \li intersected()     \li united()     \endtable      The isEmpty() function returns \c true if left()> right() or top()>     bottom(). Note that an empty rectangle is not valid: The isValid()     function returns \c true if left()<= right() \e and top()<=     bottom(). A null rectangle (isNull() == true) on the other hand,     has both width and height set to 0.      Note that due to the way QRect and QRectF are defined, an     empty QRect is defined in essentially the same way as QRectF.      Finally, QRect objects can be streamed as well as compared.      \tableofcontents      \section1 Rendering      When using an \l {QPainter::Antialiasing}{anti-aliased} painter,     the boundary line of a QRect will be rendered symmetrically on     both sides of the mathematical rectangle's boundary line. But when     using an aliased painter (the default) other rules apply.      Then, when rendering with a one pixel wide pen the QRect's boundary     line will be rendered to the right and below the mathematical     rectangle's boundary line.      When rendering with a two pixels wide pen the boundary line will     be split in the middle by the mathematical rectangle. This will be     the case whenever the pen is set to an even number of pixels,     while rendering with a pen with an odd number of pixels, the spare     pixel will be rendered to the right and below the mathematical     rectangle as in the one pixel case.      \table     \row         \li \inlineimage qrect-diagram-zero.png         \li \inlineimage qrect-diagram-one.png     \row         \li Logical representation         \li One pixel wide pen     \row         \li \inlineimage qrect-diagram-two.png         \li \inlineimage qrect-diagram-three.png     \row         \li Two pixel wide pen         \li Three pixel wide pen     \endtable      \section1 Coordinates      The QRect class provides a collection of functions that return the     various rectangle coordinates, and enable manipulation of     these. QRect also provide functions to move the rectangle relative     to the various coordinates.      For example the left(), setLeft() and moveLeft() functions as an     example: left() returns the x-coordinate of the rectangle's left     edge, setLeft() sets the left edge of the rectangle to the given x     coordinate (it may change the width, but will never change the     rectangle's right edge) and moveLeft() moves the entire rectangle     horizontally, leaving the rectangle's left edge at the given x     coordinate and its size unchanged.      \image qrect-coordinates.png      Note that for historical reasons the values returned by the     bottom() and right() functions deviate from the true bottom-right     corner of the rectangle: The right() function returns \e { left()     + width() - 1} and the bottom() function returns \e {top() +     height() - 1}. The same is the case for the point returned by the     bottomRight() convenience function. In addition, the x and y     coordinate of the topRight() and bottomLeft() functions,     respectively, contain the same deviation from the true right and     bottom edges.      We recommend that you use x() + width() and y() + height() to find     the true bottom-right corner, and avoid right() and     bottom(). Another solution is to use QRectF: The QRectF class     defines a rectangle in the plane using floating point accuracy for     coordinates, and the QRectF::right() and QRectF::bottom()     functions \e do return the right and bottom coordinates.      It is also possible to add offsets to this rectangle's coordinates     using the adjust() function, as well as retrieve a new rectangle     based on adjustments of the original one using the adjusted()     function. If either of the width and height is negative, use the     normalized() function to retrieve a rectangle where the corners     are swapped.      In addition, QRect provides the getCoords() function which extracts     the position of the rectangle's top-left and bottom-right corner,     and the getRect() function which extracts the rectangle's top-left     corner, width and height. Use the setCoords() and setRect()     function to manipulate the rectangle's coordinates and dimensions     in one go.      \section1 Constraints      QRect is limited to the minimum and maximum values for the \c int type.     Operations on a QRect that could potentially result in values outside this     range will result in undefined behavior.      \sa QRectF, QRegion */
comment|/*****************************************************************************   QRect member functions  *****************************************************************************/
comment|/*!     \fn QRect::QRect()      Constructs a null rectangle.      \sa isNull() */
comment|/*!     \fn QRect::QRect(const QPoint&topLeft, const QPoint&bottomRight)      Constructs a rectangle with the given \a topLeft and \a bottomRight corners.      \sa setTopLeft(), setBottomRight() */
comment|/*!     \fn QRect::QRect(const QPoint&topLeft, const QSize&size)      Constructs a rectangle with the given \a topLeft corner and the     given \a size.      \sa setTopLeft(), setSize() */
comment|/*!     \fn QRect::QRect(int x, int y, int width, int height)      Constructs a rectangle with (\a x, \a y) as its top-left corner     and the given \a width and \a height.      \sa setRect() */
comment|/*!     \fn bool QRect::isNull() const      Returns \c true if the rectangle is a null rectangle, otherwise     returns \c false.      A null rectangle has both the width and the height set to 0 (i.e.,     right() == left() - 1 and bottom() == top() - 1). A null rectangle     is also empty, and hence is not valid.      \sa isEmpty(), isValid() */
comment|/*!     \fn bool QRect::isEmpty() const      Returns \c true if the rectangle is empty, otherwise returns \c false.      An empty rectangle has a left()> right() or top()> bottom(). An     empty rectangle is not valid (i.e., isEmpty() == !isValid()).      Use the normalized() function to retrieve a rectangle where the     corners are swapped.      \sa isNull(), isValid(), normalized() */
comment|/*!     \fn bool QRect::isValid() const      Returns \c true if the rectangle is valid, otherwise returns \c false.      A valid rectangle has a left()< right() and top()<     bottom(). Note that non-trivial operations like intersections are     not defined for invalid rectangles. A valid rectangle is not empty     (i.e., isValid() == !isEmpty()).      \sa isNull(), isEmpty(), normalized() */
comment|/*!     Returns a normalized rectangle; i.e., a rectangle that has a     non-negative width and height.      If width()< 0 the function swaps the left and right corners, and     it swaps the top and bottom corners if height()< 0.      \sa isValid(), isEmpty() */
DECL|function|normalized
name|QRect
name|QRect
operator|::
name|normalized
parameter_list|()
specifier|const
block|{
name|QRect
name|r
decl_stmt|;
if|if
condition|(
name|x2
operator|<
name|x1
operator|-
literal|1
condition|)
block|{
comment|// swap bad x values
name|r
operator|.
name|x1
operator|=
name|x2
expr_stmt|;
name|r
operator|.
name|x2
operator|=
name|x1
expr_stmt|;
block|}
else|else
block|{
name|r
operator|.
name|x1
operator|=
name|x1
expr_stmt|;
name|r
operator|.
name|x2
operator|=
name|x2
expr_stmt|;
block|}
if|if
condition|(
name|y2
operator|<
name|y1
operator|-
literal|1
condition|)
block|{
comment|// swap bad y values
name|r
operator|.
name|y1
operator|=
name|y2
expr_stmt|;
name|r
operator|.
name|y2
operator|=
name|y1
expr_stmt|;
block|}
else|else
block|{
name|r
operator|.
name|y1
operator|=
name|y1
expr_stmt|;
name|r
operator|.
name|y2
operator|=
name|y2
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
end_function
begin_comment
comment|/*!     \fn int QRect::left() const      Returns the x-coordinate of the rectangle's left edge. Equivalent     to x().      \sa setLeft(), topLeft(), bottomLeft() */
end_comment
begin_comment
comment|/*!     \fn int QRect::top() const      Returns the y-coordinate of the rectangle's top edge.     Equivalent to y().      \sa setTop(), topLeft(), topRight() */
end_comment
begin_comment
comment|/*!     \fn int QRect::right() const      Returns the x-coordinate of the rectangle's right edge.      Note that for historical reasons this function returns left() +     width() - 1; use x() + width() to retrieve the true x-coordinate.      \sa setRight(), topRight(), bottomRight() */
end_comment
begin_comment
comment|/*!     \fn int QRect::bottom() const      Returns the y-coordinate of the rectangle's bottom edge.      Note that for historical reasons this function returns top() +     height() - 1; use y() + height() to retrieve the true y-coordinate.      \sa setBottom(), bottomLeft(), bottomRight() */
end_comment
begin_comment
comment|/*!     \fn int QRect::x() const      Returns the x-coordinate of the rectangle's left edge. Equivalent to left().      \sa setX(), y(), topLeft() */
end_comment
begin_comment
comment|/*!     \fn int QRect::y() const      Returns the y-coordinate of the rectangle's top edge. Equivalent to top().      \sa setY(), x(), topLeft() */
end_comment
begin_comment
comment|/*!     \fn void QRect::setLeft(int x)      Sets the left edge of the rectangle to the given \a x     coordinate. May change the width, but will never change the right     edge of the rectangle.      Equivalent to setX().      \sa left(), moveLeft() */
end_comment
begin_comment
comment|/*!     \fn void QRect::setTop(int y)      Sets the top edge of the rectangle to the given \a y     coordinate. May change the height, but will never change the     bottom edge of the rectangle.      Equivalent to setY().      \sa top(), moveTop() */
end_comment
begin_comment
comment|/*!     \fn void QRect::setRight(int x)      Sets the right edge of the rectangle to the given \a x     coordinate. May change the width, but will never change the left     edge of the rectangle.      \sa right(), moveRight() */
end_comment
begin_comment
comment|/*!     \fn void QRect::setBottom(int y)      Sets the bottom edge of the rectangle to the given \a y     coordinate. May change the height, but will never change the top     edge of the rectangle.      \sa bottom(), moveBottom(), */
end_comment
begin_comment
comment|/*!     \fn void QRect::setX(int x)      Sets the left edge of the rectangle to the given \a x     coordinate. May change the width, but will never change the right     edge of the rectangle.      Equivalent to setLeft().      \sa x(), setY(), setTopLeft() */
end_comment
begin_comment
comment|/*!     \fn void QRect::setY(int y)      Sets the top edge of the rectangle to the given \a y     coordinate. May change the height, but will never change the     bottom edge of the rectangle.      Equivalent to setTop().      \sa y(), setX(), setTopLeft() */
end_comment
begin_comment
comment|/*!     \fn void QRect::setTopLeft(const QPoint&position)      Set the top-left corner of the rectangle to the given \a     position. May change the size, but will never change the     bottom-right corner of the rectangle.      \sa topLeft(), moveTopLeft() */
end_comment
begin_comment
comment|/*!     \fn void QRect::setBottomRight(const QPoint&position)      Set the bottom-right corner of the rectangle to the given \a     position. May change the size, but will never change the     top-left corner of the rectangle.      \sa bottomRight(), moveBottomRight() */
end_comment
begin_comment
comment|/*!     \fn void QRect::setTopRight(const QPoint&position)      Set the top-right corner of the rectangle to the given \a     position. May change the size, but will never change the     bottom-left corner of the rectangle.      \sa topRight(), moveTopRight() */
end_comment
begin_comment
comment|/*!     \fn void QRect::setBottomLeft(const QPoint&position)      Set the bottom-left corner of the rectangle to the given \a     position. May change the size, but will never change the     top-right corner of the rectangle.      \sa bottomLeft(), moveBottomLeft() */
end_comment
begin_comment
comment|/*!     \fn QPoint QRect::topLeft() const      Returns the position of the rectangle's top-left corner.      \sa setTopLeft(), top(), left() */
end_comment
begin_comment
comment|/*!     \fn QPoint QRect::bottomRight() const      Returns the position of the rectangle's bottom-right corner.      Note that for historical reasons this function returns     QPoint(left() + width() -1, top() + height() - 1).      \sa setBottomRight(), bottom(), right() */
end_comment
begin_comment
comment|/*!     \fn QPoint QRect::topRight() const      Returns the position of the rectangle's top-right corner.      Note that for historical reasons this function returns     QPoint(left() + width() -1, top()).      \sa setTopRight(), top(), right() */
end_comment
begin_comment
comment|/*!     \fn QPoint QRect::bottomLeft() const      Returns the position of the rectangle's bottom-left corner. Note     that for historical reasons this function returns QPoint(left(),     top() + height() - 1).      \sa setBottomLeft(), bottom(), left() */
end_comment
begin_comment
comment|/*!     \fn QPoint QRect::center() const      Returns the center point of the rectangle.      \sa moveCenter() */
end_comment
begin_comment
comment|/*!     \fn void QRect::getRect(int *x, int *y, int *width, int *height) const      Extracts the position of the rectangle's top-left corner to *\a x     and *\a y, and its dimensions to *\a width and *\a height.      \sa setRect(), getCoords() */
end_comment
begin_comment
comment|/*!     \fn void QRect::getCoords(int *x1, int *y1, int *x2, int *y2) const      Extracts the position of the rectangle's top-left corner to *\a x1     and *\a y1, and the position of the bottom-right corner to *\a x2     and *\a y2.      \sa setCoords(), getRect() */
end_comment
begin_comment
comment|/*!     \fn void QRect::moveLeft(int x)      Moves the rectangle horizontally, leaving the rectangle's left     edge at the given \a x coordinate. The rectangle's size is     unchanged.      \sa left(), setLeft(), moveRight() */
end_comment
begin_comment
comment|/*!     \fn void QRect::moveTop(int y)      Moves the rectangle vertically, leaving the rectangle's top edge     at the given \a y coordinate. The rectangle's size is unchanged.      \sa top(), setTop(), moveBottom() */
end_comment
begin_comment
comment|/*!     \fn void QRect::moveRight(int x)      Moves the rectangle horizontally, leaving the rectangle's right     edge at the given \a x coordinate. The rectangle's size is     unchanged.      \sa right(), setRight(), moveLeft() */
end_comment
begin_comment
comment|/*!     \fn void QRect::moveBottom(int y)      Moves the rectangle vertically, leaving the rectangle's bottom     edge at the given \a y coordinate. The rectangle's size is     unchanged.      \sa bottom(), setBottom(), moveTop() */
end_comment
begin_comment
comment|/*!     \fn void QRect::moveTopLeft(const QPoint&position)      Moves the rectangle, leaving the top-left corner at the given \a     position. The rectangle's size is unchanged.      \sa setTopLeft(), moveTop(), moveLeft() */
end_comment
begin_comment
comment|/*!     \fn void QRect::moveBottomRight(const QPoint&position)      Moves the rectangle, leaving the bottom-right corner at the given     \a position. The rectangle's size is unchanged.      \sa setBottomRight(), moveRight(), moveBottom() */
end_comment
begin_comment
comment|/*!     \fn void QRect::moveTopRight(const QPoint&position)      Moves the rectangle, leaving the top-right corner at the given \a     position. The rectangle's size is unchanged.      \sa setTopRight(), moveTop(), moveRight() */
end_comment
begin_comment
comment|/*!     \fn void QRect::moveBottomLeft(const QPoint&position)      Moves the rectangle, leaving the bottom-left corner at the given     \a position. The rectangle's size is unchanged.      \sa setBottomLeft(), moveBottom(), moveLeft() */
end_comment
begin_comment
comment|/*!     \fn void QRect::moveCenter(const QPoint&position)      Moves the rectangle, leaving the center point at the given \a     position. The rectangle's size is unchanged.      \sa center() */
end_comment
begin_comment
comment|/*!     \fn void QRect::moveTo(int x, int y)      Moves the rectangle, leaving the top-left corner at the given     position (\a x, \a y).  The rectangle's size is unchanged.      \sa translate(), moveTopLeft() */
end_comment
begin_comment
comment|/*!     \fn void QRect::moveTo(const QPoint&position)      Moves the rectangle, leaving the top-left corner at the given \a     position. */
end_comment
begin_comment
comment|/*!     \fn void QRect::translate(int dx, int dy)      Moves the rectangle \a dx along the x axis and \a dy along the y     axis, relative to the current position. Positive values move the     rectangle to the right and down.      \sa moveTopLeft(), moveTo(), translated() */
end_comment
begin_comment
comment|/*!     \fn void QRect::translate(const QPoint&offset)     \overload      Moves the rectangle \a{offset}.\l{QPoint::x()}{x()} along the x     axis and \a{offset}.\l{QPoint::y()}{y()} along the y axis,     relative to the current position. */
end_comment
begin_comment
comment|/*!     \fn QRect QRect::translated(int dx, int dy) const      Returns a copy of the rectangle that is translated \a dx along the     x axis and \a dy along the y axis, relative to the current     position. Positive values move the rectangle to the right and     down.      \sa translate()  */
end_comment
begin_comment
comment|/*!     \fn QRect QRect::translated(const QPoint&offset) const      \overload      Returns a copy of the rectangle that is translated     \a{offset}.\l{QPoint::x()}{x()} along the x axis and     \a{offset}.\l{QPoint::y()}{y()} along the y axis, relative to the     current position. */
end_comment
begin_comment
comment|/*!     \fn void QRect::setRect(int x, int y, int width, int height)      Sets the coordinates of the rectangle's top-left corner to (\a{x},     \a{y}), and its size to the given \a width and \a height.      \sa getRect(), setCoords() */
end_comment
begin_comment
comment|/*!     \fn void QRect::setCoords(int x1, int y1, int x2, int y2)      Sets the coordinates of the rectangle's top-left corner to (\a x1,     \a y1), and the coordinates of its bottom-right corner to (\a x2,     \a y2).      \sa getCoords(), setRect() */
end_comment
begin_comment
comment|/*! \fn QRect QRect::adjusted(int dx1, int dy1, int dx2, int dy2) const      Returns a new rectangle with \a dx1, \a dy1, \a dx2 and \a dy2     added respectively to the existing coordinates of this rectangle.      \sa adjust() */
end_comment
begin_comment
comment|/*! \fn void QRect::adjust(int dx1, int dy1, int dx2, int dy2)      Adds \a dx1, \a dy1, \a dx2 and \a dy2 respectively to the     existing coordinates of the rectangle.      \sa adjusted(), setRect() */
end_comment
begin_comment
comment|/*!     \fn QSize QRect::size() const      Returns the size of the rectangle.      \sa setSize(), width(), height() */
end_comment
begin_comment
comment|/*!     \fn int QRect::width() const      Returns the width of the rectangle.      \sa setWidth(), height(), size() */
end_comment
begin_comment
comment|/*!     \fn int QRect::height() const      Returns the height of the rectangle.      \sa setHeight(), width(), size() */
end_comment
begin_comment
comment|/*!     \fn void QRect::setWidth(int width)      Sets the width of the rectangle to the given \a width. The right     edge is changed, but not the left one.      \sa width(), setSize() */
end_comment
begin_comment
comment|/*!     \fn void QRect::setHeight(int height)      Sets the height of the rectangle to the given \a height. The bottom     edge is changed, but not the top one.      \sa height(), setSize() */
end_comment
begin_comment
comment|/*!     \fn void QRect::setSize(const QSize&size)      Sets the size of the rectangle to the given \a size. The top-left     corner is not moved.      \sa size(), setWidth(), setHeight() */
end_comment
begin_comment
comment|/*!     \fn bool QRect::contains(const QPoint&point, bool proper) const      Returns \c true if the given \a point is inside or on the edge of     the rectangle, otherwise returns \c false. If \a proper is true, this     function only returns \c true if the given \a point is \e inside the     rectangle (i.e., not on the edge).      \sa intersects() */
end_comment
begin_function
DECL|function|contains
name|bool
name|QRect
operator|::
name|contains
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|p
parameter_list|,
name|bool
name|proper
parameter_list|)
specifier|const
block|{
name|int
name|l
decl_stmt|,
name|r
decl_stmt|;
if|if
condition|(
name|x2
operator|<
name|x1
operator|-
literal|1
condition|)
block|{
name|l
operator|=
name|x2
expr_stmt|;
name|r
operator|=
name|x1
expr_stmt|;
block|}
else|else
block|{
name|l
operator|=
name|x1
expr_stmt|;
name|r
operator|=
name|x2
expr_stmt|;
block|}
if|if
condition|(
name|proper
condition|)
block|{
if|if
condition|(
name|p
operator|.
name|x
argument_list|()
operator|<=
name|l
operator|||
name|p
operator|.
name|x
argument_list|()
operator|>=
name|r
condition|)
return|return
literal|false
return|;
block|}
else|else
block|{
if|if
condition|(
name|p
operator|.
name|x
argument_list|()
operator|<
name|l
operator|||
name|p
operator|.
name|x
argument_list|()
operator|>
name|r
condition|)
return|return
literal|false
return|;
block|}
name|int
name|t
decl_stmt|,
name|b
decl_stmt|;
if|if
condition|(
name|y2
operator|<
name|y1
operator|-
literal|1
condition|)
block|{
name|t
operator|=
name|y2
expr_stmt|;
name|b
operator|=
name|y1
expr_stmt|;
block|}
else|else
block|{
name|t
operator|=
name|y1
expr_stmt|;
name|b
operator|=
name|y2
expr_stmt|;
block|}
if|if
condition|(
name|proper
condition|)
block|{
if|if
condition|(
name|p
operator|.
name|y
argument_list|()
operator|<=
name|t
operator|||
name|p
operator|.
name|y
argument_list|()
operator|>=
name|b
condition|)
return|return
literal|false
return|;
block|}
else|else
block|{
if|if
condition|(
name|p
operator|.
name|y
argument_list|()
operator|<
name|t
operator|||
name|p
operator|.
name|y
argument_list|()
operator|>
name|b
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/*!     \fn bool QRect::contains(int x, int y, bool proper) const     \overload      Returns \c true if the point (\a x, \a y) is inside or on the edge of     the rectangle, otherwise returns \c false. If \a proper is true, this     function only returns \c true if the point is entirely inside the     rectangle(not on the edge). */
end_comment
begin_comment
comment|/*!     \fn bool QRect::contains(int x, int y) const     \overload      Returns \c true if the point (\a x, \a y) is inside this rectangle,     otherwise returns \c false. */
end_comment
begin_comment
comment|/*!     \fn bool QRect::contains(const QRect&rectangle, bool proper) const     \overload      Returns \c true if the given \a rectangle is inside this rectangle.     otherwise returns \c false. If \a proper is true, this function only     returns \c true if the \a rectangle is entirely inside this     rectangle (not on the edge). */
end_comment
begin_function
DECL|function|contains
name|bool
name|QRect
operator|::
name|contains
parameter_list|(
specifier|const
name|QRect
modifier|&
name|r
parameter_list|,
name|bool
name|proper
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|isNull
argument_list|()
operator|||
name|r
operator|.
name|isNull
argument_list|()
condition|)
return|return
literal|false
return|;
name|int
name|l1
init|=
name|x1
decl_stmt|;
name|int
name|r1
init|=
name|x1
decl_stmt|;
if|if
condition|(
name|x2
operator|-
name|x1
operator|+
literal|1
operator|<
literal|0
condition|)
name|l1
operator|=
name|x2
expr_stmt|;
else|else
name|r1
operator|=
name|x2
expr_stmt|;
name|int
name|l2
init|=
name|r
operator|.
name|x1
decl_stmt|;
name|int
name|r2
init|=
name|r
operator|.
name|x1
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|x2
operator|-
name|r
operator|.
name|x1
operator|+
literal|1
operator|<
literal|0
condition|)
name|l2
operator|=
name|r
operator|.
name|x2
expr_stmt|;
else|else
name|r2
operator|=
name|r
operator|.
name|x2
expr_stmt|;
if|if
condition|(
name|proper
condition|)
block|{
if|if
condition|(
name|l2
operator|<=
name|l1
operator|||
name|r2
operator|>=
name|r1
condition|)
return|return
literal|false
return|;
block|}
else|else
block|{
if|if
condition|(
name|l2
argument_list|<
name|l1
operator|||
name|r2
argument_list|>
name|r1
condition|)
return|return
literal|false
return|;
block|}
name|int
name|t1
init|=
name|y1
decl_stmt|;
name|int
name|b1
init|=
name|y1
decl_stmt|;
if|if
condition|(
name|y2
operator|-
name|y1
operator|+
literal|1
operator|<
literal|0
condition|)
name|t1
operator|=
name|y2
expr_stmt|;
else|else
name|b1
operator|=
name|y2
expr_stmt|;
name|int
name|t2
init|=
name|r
operator|.
name|y1
decl_stmt|;
name|int
name|b2
init|=
name|r
operator|.
name|y1
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|y2
operator|-
name|r
operator|.
name|y1
operator|+
literal|1
operator|<
literal|0
condition|)
name|t2
operator|=
name|r
operator|.
name|y2
expr_stmt|;
else|else
name|b2
operator|=
name|r
operator|.
name|y2
expr_stmt|;
if|if
condition|(
name|proper
condition|)
block|{
if|if
condition|(
name|t2
operator|<=
name|t1
operator|||
name|b2
operator|>=
name|b1
condition|)
return|return
literal|false
return|;
block|}
else|else
block|{
if|if
condition|(
name|t2
argument_list|<
name|t1
operator|||
name|b2
argument_list|>
name|b1
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/*!     \fn QRect& QRect::operator|=(const QRect&rectangle)      Unites this rectangle with the given \a rectangle.      \sa united(), operator|() */
end_comment
begin_comment
comment|/*!     \fn QRect& QRect::operator&=(const QRect&rectangle)      Intersects this rectangle with the given \a rectangle.      \sa intersected(), operator&() */
end_comment
begin_comment
comment|/*!     \fn QRect QRect::operator|(const QRect&rectangle) const      Returns the bounding rectangle of this rectangle and the given \a     rectangle.      \sa operator|=(), united() */
end_comment
begin_function
DECL|function|operator |
name|QRect
name|QRect
operator|::
name|operator
name||
parameter_list|(
specifier|const
name|QRect
modifier|&
name|r
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|isNull
argument_list|()
condition|)
return|return
name|r
return|;
if|if
condition|(
name|r
operator|.
name|isNull
argument_list|()
condition|)
return|return
operator|*
name|this
return|;
name|int
name|l1
init|=
name|x1
decl_stmt|;
name|int
name|r1
init|=
name|x1
decl_stmt|;
if|if
condition|(
name|x2
operator|-
name|x1
operator|+
literal|1
operator|<
literal|0
condition|)
name|l1
operator|=
name|x2
expr_stmt|;
else|else
name|r1
operator|=
name|x2
expr_stmt|;
name|int
name|l2
init|=
name|r
operator|.
name|x1
decl_stmt|;
name|int
name|r2
init|=
name|r
operator|.
name|x1
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|x2
operator|-
name|r
operator|.
name|x1
operator|+
literal|1
operator|<
literal|0
condition|)
name|l2
operator|=
name|r
operator|.
name|x2
expr_stmt|;
else|else
name|r2
operator|=
name|r
operator|.
name|x2
expr_stmt|;
name|int
name|t1
init|=
name|y1
decl_stmt|;
name|int
name|b1
init|=
name|y1
decl_stmt|;
if|if
condition|(
name|y2
operator|-
name|y1
operator|+
literal|1
operator|<
literal|0
condition|)
name|t1
operator|=
name|y2
expr_stmt|;
else|else
name|b1
operator|=
name|y2
expr_stmt|;
name|int
name|t2
init|=
name|r
operator|.
name|y1
decl_stmt|;
name|int
name|b2
init|=
name|r
operator|.
name|y1
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|y2
operator|-
name|r
operator|.
name|y1
operator|+
literal|1
operator|<
literal|0
condition|)
name|t2
operator|=
name|r
operator|.
name|y2
expr_stmt|;
else|else
name|b2
operator|=
name|r
operator|.
name|y2
expr_stmt|;
name|QRect
name|tmp
decl_stmt|;
name|tmp
operator|.
name|x1
operator|=
name|qMin
argument_list|(
name|l1
argument_list|,
name|l2
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|x2
operator|=
name|qMax
argument_list|(
name|r1
argument_list|,
name|r2
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|y1
operator|=
name|qMin
argument_list|(
name|t1
argument_list|,
name|t2
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|y2
operator|=
name|qMax
argument_list|(
name|b1
argument_list|,
name|b2
argument_list|)
expr_stmt|;
return|return
name|tmp
return|;
block|}
end_function
begin_comment
comment|/*!     \fn QRect QRect::unite(const QRect&rectangle) const     \obsolete      Use united(\a rectangle) instead. */
end_comment
begin_comment
comment|/*!     \fn QRect QRect::united(const QRect&rectangle) const     \since 4.2      Returns the bounding rectangle of this rectangle and the given \a rectangle.      \image qrect-unite.png      \sa intersected() */
end_comment
begin_comment
comment|/*!     \fn QRect QRect::operator&(const QRect&rectangle) const      Returns the intersection of this rectangle and the given \a     rectangle. Returns an empty rectangle if there is no intersection.      \sa operator&=(), intersected() */
end_comment
begin_function
DECL|function|operator &
name|QRect
name|QRect
operator|::
name|operator
name|&
parameter_list|(
specifier|const
name|QRect
modifier|&
name|r
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|isNull
argument_list|()
operator|||
name|r
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|QRect
argument_list|()
return|;
name|int
name|l1
init|=
name|x1
decl_stmt|;
name|int
name|r1
init|=
name|x1
decl_stmt|;
if|if
condition|(
name|x2
operator|-
name|x1
operator|+
literal|1
operator|<
literal|0
condition|)
name|l1
operator|=
name|x2
expr_stmt|;
else|else
name|r1
operator|=
name|x2
expr_stmt|;
name|int
name|l2
init|=
name|r
operator|.
name|x1
decl_stmt|;
name|int
name|r2
init|=
name|r
operator|.
name|x1
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|x2
operator|-
name|r
operator|.
name|x1
operator|+
literal|1
operator|<
literal|0
condition|)
name|l2
operator|=
name|r
operator|.
name|x2
expr_stmt|;
else|else
name|r2
operator|=
name|r
operator|.
name|x2
expr_stmt|;
if|if
condition|(
name|l1
operator|>
name|r2
operator|||
name|l2
operator|>
name|r1
condition|)
return|return
name|QRect
argument_list|()
return|;
name|int
name|t1
init|=
name|y1
decl_stmt|;
name|int
name|b1
init|=
name|y1
decl_stmt|;
if|if
condition|(
name|y2
operator|-
name|y1
operator|+
literal|1
operator|<
literal|0
condition|)
name|t1
operator|=
name|y2
expr_stmt|;
else|else
name|b1
operator|=
name|y2
expr_stmt|;
name|int
name|t2
init|=
name|r
operator|.
name|y1
decl_stmt|;
name|int
name|b2
init|=
name|r
operator|.
name|y1
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|y2
operator|-
name|r
operator|.
name|y1
operator|+
literal|1
operator|<
literal|0
condition|)
name|t2
operator|=
name|r
operator|.
name|y2
expr_stmt|;
else|else
name|b2
operator|=
name|r
operator|.
name|y2
expr_stmt|;
if|if
condition|(
name|t1
operator|>
name|b2
operator|||
name|t2
operator|>
name|b1
condition|)
return|return
name|QRect
argument_list|()
return|;
name|QRect
name|tmp
decl_stmt|;
name|tmp
operator|.
name|x1
operator|=
name|qMax
argument_list|(
name|l1
argument_list|,
name|l2
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|x2
operator|=
name|qMin
argument_list|(
name|r1
argument_list|,
name|r2
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|y1
operator|=
name|qMax
argument_list|(
name|t1
argument_list|,
name|t2
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|y2
operator|=
name|qMin
argument_list|(
name|b1
argument_list|,
name|b2
argument_list|)
expr_stmt|;
return|return
name|tmp
return|;
block|}
end_function
begin_comment
comment|/*!     \fn QRect QRect::intersect(const QRect&rectangle) const     \obsolete      Use intersected(\a rectangle) instead. */
end_comment
begin_comment
comment|/*!     \fn QRect QRect::intersected(const QRect&rectangle) const     \since 4.2      Returns the intersection of this rectangle and the given \a     rectangle. Note that \c{r.intersected(s)} is equivalent to \c{r& s}.      \image qrect-intersect.png      \sa intersects(), united(), operator&=() */
end_comment
begin_comment
comment|/*!     \fn bool QRect::intersects(const QRect&rectangle) const      Returns \c true if this rectangle intersects with the given \a     rectangle (i.e., there is at least one pixel that is within both     rectangles), otherwise returns \c false.      The intersection rectangle can be retrieved using the intersected()     function.      \sa contains() */
end_comment
begin_function
DECL|function|intersects
name|bool
name|QRect
operator|::
name|intersects
parameter_list|(
specifier|const
name|QRect
modifier|&
name|r
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|isNull
argument_list|()
operator|||
name|r
operator|.
name|isNull
argument_list|()
condition|)
return|return
literal|false
return|;
name|int
name|l1
init|=
name|x1
decl_stmt|;
name|int
name|r1
init|=
name|x1
decl_stmt|;
if|if
condition|(
name|x2
operator|-
name|x1
operator|+
literal|1
operator|<
literal|0
condition|)
name|l1
operator|=
name|x2
expr_stmt|;
else|else
name|r1
operator|=
name|x2
expr_stmt|;
name|int
name|l2
init|=
name|r
operator|.
name|x1
decl_stmt|;
name|int
name|r2
init|=
name|r
operator|.
name|x1
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|x2
operator|-
name|r
operator|.
name|x1
operator|+
literal|1
operator|<
literal|0
condition|)
name|l2
operator|=
name|r
operator|.
name|x2
expr_stmt|;
else|else
name|r2
operator|=
name|r
operator|.
name|x2
expr_stmt|;
if|if
condition|(
name|l1
operator|>
name|r2
operator|||
name|l2
operator|>
name|r1
condition|)
return|return
literal|false
return|;
name|int
name|t1
init|=
name|y1
decl_stmt|;
name|int
name|b1
init|=
name|y1
decl_stmt|;
if|if
condition|(
name|y2
operator|-
name|y1
operator|+
literal|1
operator|<
literal|0
condition|)
name|t1
operator|=
name|y2
expr_stmt|;
else|else
name|b1
operator|=
name|y2
expr_stmt|;
name|int
name|t2
init|=
name|r
operator|.
name|y1
decl_stmt|;
name|int
name|b2
init|=
name|r
operator|.
name|y1
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|y2
operator|-
name|r
operator|.
name|y1
operator|+
literal|1
operator|<
literal|0
condition|)
name|t2
operator|=
name|r
operator|.
name|y2
expr_stmt|;
else|else
name|b2
operator|=
name|r
operator|.
name|y2
expr_stmt|;
if|if
condition|(
name|t1
operator|>
name|b2
operator|||
name|t2
operator|>
name|b1
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/*!     \fn bool operator==(const QRect&r1, const QRect&r2)     \relates QRect      Returns \c true if the rectangles \a r1 and \a r2 are equal,     otherwise returns \c false. */
end_comment
begin_comment
comment|/*!     \fn bool operator!=(const QRect&r1, const QRect&r2)     \relates QRect      Returns \c true if the rectangles \a r1 and \a r2 are different, otherwise     returns \c false. */
end_comment
begin_comment
comment|/*!     \fn QRect operator+(const QRect&rectangle, const QMargins&margins)     \relates QRect      Returns the \a rectangle grown by the \a margins.      \since 5.1 */
end_comment
begin_comment
comment|/*!     \fn QRect operator+(const QMargins&margins, const QRect&rectangle)     \relates QRect     \overload      Returns the \a rectangle grown by the \a margins.      \since 5.1 */
end_comment
begin_comment
comment|/*!     \fn QRect QRect::marginsAdded(const QMargins&margins) const      Returns a rectangle grown by the \a margins.      \sa operator+=(), marginsRemoved(), operator-=()      \since 5.1 */
end_comment
begin_comment
comment|/*!     \fn QRect QRect::operator+=(const QMargins&margins) const      Adds the \a margins to the rectangle, growing it.      \sa marginsAdded(), marginsRemoved(), operator-=()      \since 5.1 */
end_comment
begin_comment
comment|/*!     \fn QRect QRect::marginsRemoved(const QMargins&margins) const      Removes the \a margins from the rectangle, shrinking it.      \sa marginsAdded(), operator+=(), operator-=()      \since 5.1 */
end_comment
begin_comment
comment|/*!     \fn QRect QRect::operator -=(const QMargins&margins) const      Returns a rectangle shrunk by the \a margins.      \sa marginsRemoved(), operator+=(), marginsAdded()      \since 5.1 */
end_comment
begin_comment
comment|/*****************************************************************************   QRect stream functions  *****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DATASTREAM
end_ifndef
begin_comment
comment|/*!     \fn QDataStream&operator<<(QDataStream&stream, const QRect&rectangle)     \relates QRect      Writes the given \a rectangle to the given \a stream, and returns     a reference to the stream.      \sa {Serializing Qt Data Types} */
end_comment
begin_function
DECL|function|operator <<
name|QDataStream
modifier|&
name|operator
name|<<
parameter_list|(
name|QDataStream
modifier|&
name|s
parameter_list|,
specifier|const
name|QRect
modifier|&
name|r
parameter_list|)
block|{
if|if
condition|(
name|s
operator|.
name|version
argument_list|()
operator|==
literal|1
condition|)
name|s
operator|<<
operator|(
name|qint16
operator|)
name|r
operator|.
name|left
argument_list|()
operator|<<
operator|(
name|qint16
operator|)
name|r
operator|.
name|top
argument_list|()
operator|<<
operator|(
name|qint16
operator|)
name|r
operator|.
name|right
argument_list|()
operator|<<
operator|(
name|qint16
operator|)
name|r
operator|.
name|bottom
argument_list|()
expr_stmt|;
else|else
name|s
operator|<<
operator|(
name|qint32
operator|)
name|r
operator|.
name|left
argument_list|()
operator|<<
operator|(
name|qint32
operator|)
name|r
operator|.
name|top
argument_list|()
operator|<<
operator|(
name|qint32
operator|)
name|r
operator|.
name|right
argument_list|()
operator|<<
operator|(
name|qint32
operator|)
name|r
operator|.
name|bottom
argument_list|()
expr_stmt|;
return|return
name|s
return|;
block|}
end_function
begin_comment
comment|/*!     \fn QDataStream&operator>>(QDataStream&stream, QRect&rectangle)     \relates QRect      Reads a rectangle from the given \a stream into the given \a     rectangle, and returns a reference to the stream.      \sa {Serializing Qt Data Types} */
end_comment
begin_function
DECL|function|operator >>
name|QDataStream
modifier|&
name|operator
name|>>
parameter_list|(
name|QDataStream
modifier|&
name|s
parameter_list|,
name|QRect
modifier|&
name|r
parameter_list|)
block|{
if|if
condition|(
name|s
operator|.
name|version
argument_list|()
operator|==
literal|1
condition|)
block|{
name|qint16
name|x1
decl_stmt|,
name|y1
decl_stmt|,
name|x2
decl_stmt|,
name|y2
decl_stmt|;
name|s
operator|>>
name|x1
expr_stmt|;
name|s
operator|>>
name|y1
expr_stmt|;
name|s
operator|>>
name|x2
expr_stmt|;
name|s
operator|>>
name|y2
expr_stmt|;
name|r
operator|.
name|setCoords
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qint32
name|x1
decl_stmt|,
name|y1
decl_stmt|,
name|x2
decl_stmt|,
name|y2
decl_stmt|;
name|s
operator|>>
name|x1
expr_stmt|;
name|s
operator|>>
name|y1
expr_stmt|;
name|s
operator|>>
name|x2
expr_stmt|;
name|s
operator|>>
name|y2
expr_stmt|;
name|r
operator|.
name|setCoords
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|)
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DATASTREAM
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DEBUG_STREAM
end_ifndef
begin_function
DECL|function|operator <<
name|QDebug
name|operator
name|<<
parameter_list|(
name|QDebug
name|dbg
parameter_list|,
specifier|const
name|QRect
modifier|&
name|r
parameter_list|)
block|{
name|dbg
operator|.
name|nospace
argument_list|()
operator|<<
literal|"QRect("
operator|<<
name|r
operator|.
name|x
argument_list|()
operator|<<
literal|','
operator|<<
name|r
operator|.
name|y
argument_list|()
operator|<<
literal|' '
operator|<<
name|r
operator|.
name|width
argument_list|()
operator|<<
literal|'x'
operator|<<
name|r
operator|.
name|height
argument_list|()
operator|<<
literal|')'
expr_stmt|;
return|return
name|dbg
operator|.
name|space
argument_list|()
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*!     \class QRectF     \inmodule QtCore     \ingroup painting      \brief The QRectF class defines a rectangle in the plane using floating     point precision.      A rectangle is normally expressed as an upper-left corner and a     size.  The size (width and height) of a QRectF is always equivalent     to the mathematical rectangle that forms the basis for its     rendering.      A QRectF can be constructed with a set of left, top, width and     height integers, or from a QPoint and a QSize.  The following code     creates two identical rectangles.      \snippet code/src_corelib_tools_qrect.cpp 1      There is also a third constructor creating a QRectF from a QRect,     and a corresponding toRect() function that returns a QRect object     based on the values of this rectangle (note that the coordinates     in the returned rectangle are rounded to the nearest integer).      The QRectF class provides a collection of functions that return     the various rectangle coordinates, and enable manipulation of     these. QRectF also provide functions to move the rectangle     relative to the various coordinates. In addition there is a     moveTo() function that moves the rectangle, leaving its top left     corner at the given coordinates. Alternatively, the translate()     function moves the rectangle the given offset relative to the     current position, and the translated() function returns a     translated copy of this rectangle.      The size() function returns the rectange's dimensions as a     QSize. The dimensions can also be retrieved separately using the     width() and height() functions. To manipulate the dimensions use     the setSize(), setWidth() or setHeight() functions. Alternatively,     the size can be changed by applying either of the functions     setting the rectangle coordinates, for example, setBottom() or     setRight().      The contains() function tells whether a given point is inside the     rectangle or not, and the intersects() function returns \c true if     this rectangle intersects with a given rectangle (otherwise     false). The QRectF class also provides the intersected() function     which returns the intersection rectangle, and the united() function     which returns the rectangle that encloses the given rectangle and     this:      \table     \row     \li \inlineimage qrect-intersect.png     \li \inlineimage qrect-unite.png     \row     \li intersected()     \li united()     \endtable      The isEmpty() function returns \c true if the rectangle's width or     height is less than, or equal to, 0. Note that an empty rectangle     is not valid: The isValid() function returns \c true if both width     and height is larger than 0. A null rectangle (isNull() == true)     on the other hand, has both width and height set to 0.      Note that due to the way QRect and QRectF are defined, an     empty QRectF is defined in essentially the same way as QRect.      Finally, QRectF objects can be streamed as well as compared.      \tableofcontents      \section1 Rendering      When using an \l {QPainter::Antialiasing}{anti-aliased} painter,     the boundary line of a QRectF will be rendered symmetrically on both     sides of the mathematical rectangle's boundary line. But when     using an aliased painter (the default) other rules apply.      Then, when rendering with a one pixel wide pen the QRectF's boundary     line will be rendered to the right and below the mathematical     rectangle's boundary line.      When rendering with a two pixels wide pen the boundary line will     be split in the middle by the mathematical rectangle. This will be     the case whenever the pen is set to an even number of pixels,     while rendering with a pen with an odd number of pixels, the spare     pixel will be rendered to the right and below the mathematical     rectangle as in the one pixel case.      \table     \row         \li \inlineimage qrect-diagram-zero.png         \li \inlineimage qrectf-diagram-one.png     \row         \li Logical representation         \li One pixel wide pen     \row         \li \inlineimage qrectf-diagram-two.png         \li \inlineimage qrectf-diagram-three.png     \row         \li Two pixel wide pen         \li Three pixel wide pen     \endtable      \section1 Coordinates      The QRectF class provides a collection of functions that return     the various rectangle coordinates, and enable manipulation of     these. QRectF also provide functions to move the rectangle     relative to the various coordinates.      For example: the bottom(), setBottom() and moveBottom() functions:     bottom() returns the y-coordinate of the rectangle's bottom edge,     setBottom() sets the bottom edge of the rectangle to the given y     coordinate (it may change the height, but will never change the     rectangle's top edge) and moveBottom() moves the entire rectangle     vertically, leaving the rectangle's bottom edge at the given y     coordinate and its size unchanged.      \image qrectf-coordinates.png      It is also possible to add offsets to this rectangle's coordinates     using the adjust() function, as well as retrieve a new rectangle     based on adjustments of the original one using the adjusted()     function. If either of the width and height is negative, use the     normalized() function to retrieve a rectangle where the corners     are swapped.      In addition, QRectF provides the getCoords() function which extracts     the position of the rectangle's top-left and bottom-right corner,     and the getRect() function which extracts the rectangle's top-left     corner, width and height. Use the setCoords() and setRect()     function to manipulate the rectangle's coordinates and dimensions     in one go.      \sa QRect, QRegion */
end_comment
begin_comment
comment|/*****************************************************************************   QRectF member functions  *****************************************************************************/
end_comment
begin_comment
comment|/*!     \fn QRectF::QRectF()      Constructs a null rectangle.      \sa isNull() */
end_comment
begin_comment
comment|/*!     \fn QRectF::QRectF(const QPointF&topLeft, const QSizeF&size)      Constructs a rectangle with the given \a topLeft corner and the given \a size.      \sa setTopLeft(), setSize() */
end_comment
begin_comment
comment|/*!     \fn QRectF::QRectF(const QPointF&topLeft, const QPointF&bottomRight)     \since 4.3      Constructs a rectangle with the given \a topLeft and \a bottomRight corners.      \sa setTopLeft(), setBottomRight() */
end_comment
begin_comment
comment|/*!     \fn QRectF::QRectF(qreal x, qreal y, qreal width, qreal height)      Constructs a rectangle with (\a x, \a y) as its top-left corner     and the given \a width and \a height.      \sa setRect() */
end_comment
begin_comment
comment|/*!     \fn QRectF::QRectF(const QRect&rectangle)      Constructs a QRectF rectangle from the given QRect \a rectangle.      \sa toRect() */
end_comment
begin_comment
comment|/*!     \fn bool QRectF::isNull() const      Returns \c true if the rectangle is a null rectangle, otherwise returns \c false.      A null rectangle has both the width and the height set to 0. A     null rectangle is also empty, and hence not valid.      \sa isEmpty(), isValid() */
end_comment
begin_comment
comment|/*!     \fn bool QRectF::isEmpty() const      Returns \c true if the rectangle is empty, otherwise returns \c false.      An empty rectangle has width()<= 0 or height()<= 0.  An empty     rectangle is not valid (i.e., isEmpty() == !isValid()).      Use the normalized() function to retrieve a rectangle where the     corners are swapped.      \sa isNull(), isValid(), normalized() */
end_comment
begin_comment
comment|/*!     \fn bool QRectF::isValid() const      Returns \c true if the rectangle is valid, otherwise returns \c false.      A valid rectangle has a width()> 0 and height()> 0. Note that     non-trivial operations like intersections are not defined for     invalid rectangles. A valid rectangle is not empty (i.e., isValid()     == !isEmpty()).      \sa isNull(), isEmpty(), normalized() */
end_comment
begin_comment
comment|/*!     Returns a normalized rectangle; i.e., a rectangle that has a     non-negative width and height.      If width()< 0 the function swaps the left and right corners, and     it swaps the top and bottom corners if height()< 0.      \sa isValid(), isEmpty() */
end_comment
begin_function
DECL|function|normalized
name|QRectF
name|QRectF
operator|::
name|normalized
parameter_list|()
specifier|const
block|{
name|QRectF
name|r
init|=
operator|*
name|this
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|w
operator|<
literal|0
condition|)
block|{
name|r
operator|.
name|xp
operator|+=
name|r
operator|.
name|w
expr_stmt|;
name|r
operator|.
name|w
operator|=
operator|-
name|r
operator|.
name|w
expr_stmt|;
block|}
if|if
condition|(
name|r
operator|.
name|h
operator|<
literal|0
condition|)
block|{
name|r
operator|.
name|yp
operator|+=
name|r
operator|.
name|h
expr_stmt|;
name|r
operator|.
name|h
operator|=
operator|-
name|r
operator|.
name|h
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
end_function
begin_comment
comment|/*!     \fn qreal QRectF::x() const      Returns the x-coordinate of the rectangle's left edge. Equivalent     to left().       \sa setX(), y(), topLeft() */
end_comment
begin_comment
comment|/*!     \fn qreal QRectF::y() const      Returns the y-coordinate of the rectangle's top edge. Equivalent     to top().      \sa setY(), x(), topLeft() */
end_comment
begin_comment
comment|/*!     \fn void QRectF::setLeft(qreal x)      Sets the left edge of the rectangle to the given \a x     coordinate. May change the width, but will never change the right     edge of the rectangle.      Equivalent to setX().      \sa left(), moveLeft() */
end_comment
begin_comment
comment|/*!     \fn void QRectF::setTop(qreal y)      Sets the top edge of the rectangle to the given \a y coordinate. May     change the height, but will never change the bottom edge of the     rectangle.      Equivalent to setY().      \sa top(), moveTop() */
end_comment
begin_comment
comment|/*!     \fn void QRectF::setRight(qreal x)      Sets the right edge of the rectangle to the given \a x     coordinate. May change the width, but will never change the left     edge of the rectangle.      \sa right(), moveRight() */
end_comment
begin_comment
comment|/*!     \fn void QRectF::setBottom(qreal y)      Sets the bottom edge of the rectangle to the given \a y     coordinate. May change the height, but will never change the top     edge of the rectangle.      \sa bottom(), moveBottom() */
end_comment
begin_comment
comment|/*!     \fn void QRectF::setX(qreal x)      Sets the left edge of the rectangle to the given \a x     coordinate. May change the width, but will never change the right     edge of the rectangle.      Equivalent to setLeft().      \sa x(), setY(), setTopLeft() */
end_comment
begin_comment
comment|/*!     \fn void QRectF::setY(qreal y)      Sets the top edge of the rectangle to the given \a y     coordinate. May change the height, but will never change the     bottom edge of the rectangle.      Equivalent to setTop().      \sa y(), setX(), setTopLeft() */
end_comment
begin_comment
comment|/*!     \fn void QRectF::setTopLeft(const QPointF&position)      Set the top-left corner of the rectangle to the given \a     position. May change the size, but will never change the     bottom-right corner of the rectangle.      \sa topLeft(), moveTopLeft() */
end_comment
begin_comment
comment|/*!     \fn void QRectF::setBottomRight(const QPointF&position)      Set the bottom-right corner of the rectangle to the given \a     position. May change the size, but will never change the     top-left corner of the rectangle.      \sa bottomRight(), moveBottomRight() */
end_comment
begin_comment
comment|/*!     \fn void QRectF::setTopRight(const QPointF&position)      Set the top-right corner of the rectangle to the given \a     position. May change the size, but will never change the     bottom-left corner of the rectangle.      \sa topRight(), moveTopRight() */
end_comment
begin_comment
comment|/*!     \fn void QRectF::setBottomLeft(const QPointF&position)      Set the bottom-left corner of the rectangle to the given \a     position. May change the size, but will never change the     top-right corner of the rectangle.      \sa bottomLeft(), moveBottomLeft() */
end_comment
begin_comment
comment|/*!     \fn QPointF QRectF::center() const      Returns the center point of the rectangle.      \sa moveCenter() */
end_comment
begin_comment
comment|/*!     \fn void QRectF::getRect(qreal *x, qreal *y, qreal *width, qreal *height) const      Extracts the position of the rectangle's top-left corner to *\a x and     *\a y, and its dimensions to *\a width and *\a height.      \sa setRect(), getCoords() */
end_comment
begin_comment
comment|/*!     \fn void QRectF::getCoords(qreal *x1, qreal *y1, qreal *x2, qreal *y2) const      Extracts the position of the rectangle's top-left corner to *\a x1     and *\a y1, and the position of the bottom-right corner to *\a x2 and     *\a y2.      \sa setCoords(), getRect() */
end_comment
begin_comment
comment|/*!     \fn void QRectF::moveLeft(qreal x)      Moves the rectangle horizontally, leaving the rectangle's left     edge at the given \a x coordinate. The rectangle's size is     unchanged.      \sa left(), setLeft(), moveRight() */
end_comment
begin_comment
comment|/*!     \fn void QRectF::moveTop(qreal y)      Moves the rectangle vertically, leaving the rectangle's top line     at the given \a y coordinate. The rectangle's size is unchanged.      \sa top(), setTop(), moveBottom() */
end_comment
begin_comment
comment|/*!     \fn void QRectF::moveRight(qreal x)      Moves the rectangle horizontally, leaving the rectangle's right     edge at the given \a x coordinate. The rectangle's size is     unchanged.      \sa right(), setRight(), moveLeft() */
end_comment
begin_comment
comment|/*!     \fn void QRectF::moveBottom(qreal y)      Moves the rectangle vertically, leaving the rectangle's bottom     edge at the given \a y coordinate. The rectangle's size is     unchanged.      \sa bottom(), setBottom(), moveTop() */
end_comment
begin_comment
comment|/*!     \fn void QRectF::moveTopLeft(const QPointF&position)      Moves the rectangle, leaving the top-left corner at the given \a     position. The rectangle's size is unchanged.      \sa setTopLeft(), moveTop(), moveLeft() */
end_comment
begin_comment
comment|/*!     \fn void QRectF::moveBottomRight(const QPointF&position)      Moves the rectangle, leaving the bottom-right corner at the given     \a position. The rectangle's size is unchanged.      \sa setBottomRight(), moveBottom(), moveRight() */
end_comment
begin_comment
comment|/*!     \fn void QRectF::moveTopRight(const QPointF&position)      Moves the rectangle, leaving the top-right corner at the given     \a position. The rectangle's size is unchanged.      \sa setTopRight(), moveTop(), moveRight() */
end_comment
begin_comment
comment|/*!     \fn void QRectF::moveBottomLeft(const QPointF&position)      Moves the rectangle, leaving the bottom-left corner at the given     \a position. The rectangle's size is unchanged.      \sa setBottomLeft(), moveBottom(), moveLeft() */
end_comment
begin_comment
comment|/*!     \fn void QRectF::moveTo(qreal x, qreal y)      Moves the rectangle, leaving the top-left corner at the given     position (\a x, \a y). The rectangle's size is unchanged.      \sa translate(), moveTopLeft() */
end_comment
begin_comment
comment|/*!     \fn void QRectF::moveTo(const QPointF&position)     \overload      Moves the rectangle, leaving the top-left corner at the given \a     position. */
end_comment
begin_comment
comment|/*!     \fn void QRectF::translate(qreal dx, qreal dy)      Moves the rectangle \a dx along the x-axis and \a dy along the y-axis,     relative to the current position. Positive values move the rectangle to the     right and downwards.      \sa moveTopLeft(), moveTo(), translated() */
end_comment
begin_comment
comment|/*!     \fn void QRectF::translate(const QPointF&offset)     \overload      Moves the rectangle \a{offset}.\l{QPointF::x()}{x()} along the x     axis and \a{offset}.\l{QPointF::y()}{y()} along the y axis,     relative to the current position. */
end_comment
begin_comment
comment|/*!     \fn QRectF QRectF::translated(qreal dx, qreal dy) const      Returns a copy of the rectangle that is translated \a dx along the     x axis and \a dy along the y axis, relative to the current     position. Positive values move the rectangle to the right and     down.      \sa translate() */
end_comment
begin_comment
comment|/*!     \fn QRectF QRectF::translated(const QPointF&offset) const     \overload      Returns a copy of the rectangle that is translated     \a{offset}.\l{QPointF::x()}{x()} along the x axis and     \a{offset}.\l{QPointF::y()}{y()} along the y axis, relative to the     current position. */
end_comment
begin_comment
comment|/*!     \fn void QRectF::setRect(qreal x, qreal y, qreal width, qreal height)      Sets the coordinates of the rectangle's top-left corner to (\a x,     \a y), and its size to the given \a width and \a height.      \sa getRect(), setCoords() */
end_comment
begin_comment
comment|/*!     \fn void QRectF::setCoords(qreal x1, qreal y1, qreal x2, qreal y2)      Sets the coordinates of the rectangle's top-left corner to (\a x1,     \a y1), and the coordinates of its bottom-right corner to (\a x2,     \a y2).      \sa getCoords(), setRect() */
end_comment
begin_comment
comment|/*!     \fn QRectF QRectF::adjusted(qreal dx1, qreal dy1, qreal dx2, qreal dy2) const      Returns a new rectangle with \a dx1, \a dy1, \a dx2 and \a dy2     added respectively to the existing coordinates of this rectangle.      \sa adjust() */
end_comment
begin_comment
comment|/*! \fn void QRectF::adjust(qreal dx1, qreal dy1, qreal dx2, qreal dy2)      Adds \a dx1, \a dy1, \a dx2 and \a dy2 respectively to the     existing coordinates of the rectangle.      \sa adjusted(), setRect() */
end_comment
begin_comment
comment|/*!     \fn QSizeF QRectF::size() const      Returns the size of the rectangle.      \sa setSize(), width(), height() */
end_comment
begin_comment
comment|/*!     \fn qreal QRectF::width() const      Returns the width of the rectangle.      \sa setWidth(), height(), size() */
end_comment
begin_comment
comment|/*!     \fn qreal QRectF::height() const      Returns the height of the rectangle.      \sa setHeight(), width(), size() */
end_comment
begin_comment
comment|/*!     \fn void QRectF::setWidth(qreal width)      Sets the width of the rectangle to the given \a width. The right     edge is changed, but not the left one.      \sa width(), setSize() */
end_comment
begin_comment
comment|/*!     \fn void QRectF::setHeight(qreal height)      Sets the height of the rectangle to the given \a height. The bottom     edge is changed, but not the top one.      \sa height(), setSize() */
end_comment
begin_comment
comment|/*!     \fn void QRectF::setSize(const QSizeF&size)      Sets the size of the rectangle to the given \a size. The top-left     corner is not moved.      \sa size(), setWidth(), setHeight() */
end_comment
begin_comment
comment|/*!     \fn bool QRectF::contains(const QPointF&point) const      Returns \c true if the given \a point is inside or on the edge of the     rectangle; otherwise returns \c false.      \sa intersects() */
end_comment
begin_function
DECL|function|contains
name|bool
name|QRectF
operator|::
name|contains
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|p
parameter_list|)
specifier|const
block|{
name|qreal
name|l
init|=
name|xp
decl_stmt|;
name|qreal
name|r
init|=
name|xp
decl_stmt|;
if|if
condition|(
name|w
operator|<
literal|0
condition|)
name|l
operator|+=
name|w
expr_stmt|;
else|else
name|r
operator|+=
name|w
expr_stmt|;
if|if
condition|(
name|l
operator|==
name|r
condition|)
comment|// null rect
return|return
literal|false
return|;
if|if
condition|(
name|p
operator|.
name|x
argument_list|()
operator|<
name|l
operator|||
name|p
operator|.
name|x
argument_list|()
operator|>
name|r
condition|)
return|return
literal|false
return|;
name|qreal
name|t
init|=
name|yp
decl_stmt|;
name|qreal
name|b
init|=
name|yp
decl_stmt|;
if|if
condition|(
name|h
operator|<
literal|0
condition|)
name|t
operator|+=
name|h
expr_stmt|;
else|else
name|b
operator|+=
name|h
expr_stmt|;
if|if
condition|(
name|t
operator|==
name|b
condition|)
comment|// null rect
return|return
literal|false
return|;
if|if
condition|(
name|p
operator|.
name|y
argument_list|()
operator|<
name|t
operator|||
name|p
operator|.
name|y
argument_list|()
operator|>
name|b
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/*!     \fn bool QRectF::contains(qreal x, qreal y) const     \overload      Returns \c true if the point (\a x, \a y) is inside or on the edge of     the rectangle; otherwise returns \c false. */
end_comment
begin_comment
comment|/*!     \fn bool QRectF::contains(const QRectF&rectangle) const     \overload      Returns \c true if the given \a rectangle is inside this rectangle;     otherwise returns \c false. */
end_comment
begin_function
DECL|function|contains
name|bool
name|QRectF
operator|::
name|contains
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|r
parameter_list|)
specifier|const
block|{
name|qreal
name|l1
init|=
name|xp
decl_stmt|;
name|qreal
name|r1
init|=
name|xp
decl_stmt|;
if|if
condition|(
name|w
operator|<
literal|0
condition|)
name|l1
operator|+=
name|w
expr_stmt|;
else|else
name|r1
operator|+=
name|w
expr_stmt|;
if|if
condition|(
name|l1
operator|==
name|r1
condition|)
comment|// null rect
return|return
literal|false
return|;
name|qreal
name|l2
init|=
name|r
operator|.
name|xp
decl_stmt|;
name|qreal
name|r2
init|=
name|r
operator|.
name|xp
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|w
operator|<
literal|0
condition|)
name|l2
operator|+=
name|r
operator|.
name|w
expr_stmt|;
else|else
name|r2
operator|+=
name|r
operator|.
name|w
expr_stmt|;
if|if
condition|(
name|l2
operator|==
name|r2
condition|)
comment|// null rect
return|return
literal|false
return|;
if|if
condition|(
name|l2
argument_list|<
name|l1
operator|||
name|r2
argument_list|>
name|r1
condition|)
return|return
literal|false
return|;
name|qreal
name|t1
init|=
name|yp
decl_stmt|;
name|qreal
name|b1
init|=
name|yp
decl_stmt|;
if|if
condition|(
name|h
operator|<
literal|0
condition|)
name|t1
operator|+=
name|h
expr_stmt|;
else|else
name|b1
operator|+=
name|h
expr_stmt|;
if|if
condition|(
name|t1
operator|==
name|b1
condition|)
comment|// null rect
return|return
literal|false
return|;
name|qreal
name|t2
init|=
name|r
operator|.
name|yp
decl_stmt|;
name|qreal
name|b2
init|=
name|r
operator|.
name|yp
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|h
operator|<
literal|0
condition|)
name|t2
operator|+=
name|r
operator|.
name|h
expr_stmt|;
else|else
name|b2
operator|+=
name|r
operator|.
name|h
expr_stmt|;
if|if
condition|(
name|t2
operator|==
name|b2
condition|)
comment|// null rect
return|return
literal|false
return|;
if|if
condition|(
name|t2
argument_list|<
name|t1
operator|||
name|b2
argument_list|>
name|b1
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/*!     \fn qreal QRectF::left() const      Returns the x-coordinate of the rectangle's left edge. Equivalent     to x().      \sa setLeft(), topLeft(), bottomLeft() */
end_comment
begin_comment
comment|/*!     \fn qreal QRectF::top() const      Returns the y-coordinate of the rectangle's top edge. Equivalent     to y().      \sa setTop(), topLeft(), topRight() */
end_comment
begin_comment
comment|/*!     \fn qreal QRectF::right() const      Returns the x-coordinate of the rectangle's right edge.      \sa setRight(), topRight(), bottomRight() */
end_comment
begin_comment
comment|/*!     \fn qreal QRectF::bottom() const      Returns the y-coordinate of the rectangle's bottom edge.      \sa setBottom(), bottomLeft(), bottomRight() */
end_comment
begin_comment
comment|/*!     \fn QPointF QRectF::topLeft() const      Returns the position of the rectangle's top-left corner.      \sa setTopLeft(), top(), left() */
end_comment
begin_comment
comment|/*!     \fn QPointF QRectF::bottomRight() const      Returns the position of the rectangle's  bottom-right corner.      \sa setBottomRight(), bottom(), right() */
end_comment
begin_comment
comment|/*!     \fn QPointF QRectF::topRight() const      Returns the position of the rectangle's top-right corner.      \sa setTopRight(), top(), right() */
end_comment
begin_comment
comment|/*!     \fn QPointF QRectF::bottomLeft() const      Returns the position of the rectangle's  bottom-left corner.      \sa setBottomLeft(), bottom(), left() */
end_comment
begin_comment
comment|/*!     \fn QRectF& QRectF::operator|=(const QRectF&rectangle)      Unites this rectangle with the given \a rectangle.      \sa united(), operator|() */
end_comment
begin_comment
comment|/*!     \fn QRectF& QRectF::operator&=(const QRectF&rectangle)      Intersects this rectangle with the given \a rectangle.      \sa intersected(), operator|=() */
end_comment
begin_comment
comment|/*!     \fn QRectF QRectF::operator|(const QRectF&rectangle) const      Returns the bounding rectangle of this rectangle and the given \a rectangle.      \sa united(), operator|=() */
end_comment
begin_function
DECL|function|operator |
name|QRectF
name|QRectF
operator|::
name|operator
name||
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|r
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|isNull
argument_list|()
condition|)
return|return
name|r
return|;
if|if
condition|(
name|r
operator|.
name|isNull
argument_list|()
condition|)
return|return
operator|*
name|this
return|;
name|qreal
name|left
init|=
name|xp
decl_stmt|;
name|qreal
name|right
init|=
name|xp
decl_stmt|;
if|if
condition|(
name|w
operator|<
literal|0
condition|)
name|left
operator|+=
name|w
expr_stmt|;
else|else
name|right
operator|+=
name|w
expr_stmt|;
if|if
condition|(
name|r
operator|.
name|w
operator|<
literal|0
condition|)
block|{
name|left
operator|=
name|qMin
argument_list|(
name|left
argument_list|,
name|r
operator|.
name|xp
operator|+
name|r
operator|.
name|w
argument_list|)
expr_stmt|;
name|right
operator|=
name|qMax
argument_list|(
name|right
argument_list|,
name|r
operator|.
name|xp
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|left
operator|=
name|qMin
argument_list|(
name|left
argument_list|,
name|r
operator|.
name|xp
argument_list|)
expr_stmt|;
name|right
operator|=
name|qMax
argument_list|(
name|right
argument_list|,
name|r
operator|.
name|xp
operator|+
name|r
operator|.
name|w
argument_list|)
expr_stmt|;
block|}
name|qreal
name|top
init|=
name|yp
decl_stmt|;
name|qreal
name|bottom
init|=
name|yp
decl_stmt|;
if|if
condition|(
name|h
operator|<
literal|0
condition|)
name|top
operator|+=
name|h
expr_stmt|;
else|else
name|bottom
operator|+=
name|h
expr_stmt|;
if|if
condition|(
name|r
operator|.
name|h
operator|<
literal|0
condition|)
block|{
name|top
operator|=
name|qMin
argument_list|(
name|top
argument_list|,
name|r
operator|.
name|yp
operator|+
name|r
operator|.
name|h
argument_list|)
expr_stmt|;
name|bottom
operator|=
name|qMax
argument_list|(
name|bottom
argument_list|,
name|r
operator|.
name|yp
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|top
operator|=
name|qMin
argument_list|(
name|top
argument_list|,
name|r
operator|.
name|yp
argument_list|)
expr_stmt|;
name|bottom
operator|=
name|qMax
argument_list|(
name|bottom
argument_list|,
name|r
operator|.
name|yp
operator|+
name|r
operator|.
name|h
argument_list|)
expr_stmt|;
block|}
return|return
name|QRectF
argument_list|(
name|left
argument_list|,
name|top
argument_list|,
name|right
operator|-
name|left
argument_list|,
name|bottom
operator|-
name|top
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \fn QRectF QRectF::unite(const QRectF&rectangle) const     \obsolete      Use united(\a rectangle) instead. */
end_comment
begin_comment
comment|/*!     \fn QRectF QRectF::united(const QRectF&rectangle) const     \since 4.2      Returns the bounding rectangle of this rectangle and the given \a     rectangle.      \image qrect-unite.png      \sa intersected() */
end_comment
begin_comment
comment|/*!     \fn QRectF QRectF::operator&(const QRectF&rectangle) const      Returns the intersection of this rectangle and the given \a     rectangle. Returns an empty rectangle if there is no intersection.      \sa operator&=(), intersected() */
end_comment
begin_function
DECL|function|operator &
name|QRectF
name|QRectF
operator|::
name|operator
name|&
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|r
parameter_list|)
specifier|const
block|{
name|qreal
name|l1
init|=
name|xp
decl_stmt|;
name|qreal
name|r1
init|=
name|xp
decl_stmt|;
if|if
condition|(
name|w
operator|<
literal|0
condition|)
name|l1
operator|+=
name|w
expr_stmt|;
else|else
name|r1
operator|+=
name|w
expr_stmt|;
if|if
condition|(
name|l1
operator|==
name|r1
condition|)
comment|// null rect
return|return
name|QRectF
argument_list|()
return|;
name|qreal
name|l2
init|=
name|r
operator|.
name|xp
decl_stmt|;
name|qreal
name|r2
init|=
name|r
operator|.
name|xp
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|w
operator|<
literal|0
condition|)
name|l2
operator|+=
name|r
operator|.
name|w
expr_stmt|;
else|else
name|r2
operator|+=
name|r
operator|.
name|w
expr_stmt|;
if|if
condition|(
name|l2
operator|==
name|r2
condition|)
comment|// null rect
return|return
name|QRectF
argument_list|()
return|;
if|if
condition|(
name|l1
operator|>=
name|r2
operator|||
name|l2
operator|>=
name|r1
condition|)
return|return
name|QRectF
argument_list|()
return|;
name|qreal
name|t1
init|=
name|yp
decl_stmt|;
name|qreal
name|b1
init|=
name|yp
decl_stmt|;
if|if
condition|(
name|h
operator|<
literal|0
condition|)
name|t1
operator|+=
name|h
expr_stmt|;
else|else
name|b1
operator|+=
name|h
expr_stmt|;
if|if
condition|(
name|t1
operator|==
name|b1
condition|)
comment|// null rect
return|return
name|QRectF
argument_list|()
return|;
name|qreal
name|t2
init|=
name|r
operator|.
name|yp
decl_stmt|;
name|qreal
name|b2
init|=
name|r
operator|.
name|yp
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|h
operator|<
literal|0
condition|)
name|t2
operator|+=
name|r
operator|.
name|h
expr_stmt|;
else|else
name|b2
operator|+=
name|r
operator|.
name|h
expr_stmt|;
if|if
condition|(
name|t2
operator|==
name|b2
condition|)
comment|// null rect
return|return
name|QRectF
argument_list|()
return|;
if|if
condition|(
name|t1
operator|>=
name|b2
operator|||
name|t2
operator|>=
name|b1
condition|)
return|return
name|QRectF
argument_list|()
return|;
name|QRectF
name|tmp
decl_stmt|;
name|tmp
operator|.
name|xp
operator|=
name|qMax
argument_list|(
name|l1
argument_list|,
name|l2
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|yp
operator|=
name|qMax
argument_list|(
name|t1
argument_list|,
name|t2
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|w
operator|=
name|qMin
argument_list|(
name|r1
argument_list|,
name|r2
argument_list|)
operator|-
name|tmp
operator|.
name|xp
expr_stmt|;
name|tmp
operator|.
name|h
operator|=
name|qMin
argument_list|(
name|b1
argument_list|,
name|b2
argument_list|)
operator|-
name|tmp
operator|.
name|yp
expr_stmt|;
return|return
name|tmp
return|;
block|}
end_function
begin_comment
comment|/*!     \fn QRectF QRectF::intersect(const QRectF&rectangle) const     \obsolete      Use intersected(\a rectangle) instead. */
end_comment
begin_comment
comment|/*!     \fn QRectF QRectF::intersected(const QRectF&rectangle) const     \since 4.2      Returns the intersection of this rectangle and the given \a     rectangle. Note that \c {r.intersected(s)} is equivalent to \c     {r& s}.      \image qrect-intersect.png      \sa intersects(), united(), operator&=() */
end_comment
begin_comment
comment|/*!     \fn bool QRectF::intersects(const QRectF&rectangle) const      Returns \c true if this rectangle intersects with the given \a     rectangle (i.e. there is a non-empty area of overlap between     them), otherwise returns \c false.      The intersection rectangle can be retrieved using the intersected()     function.      \sa contains() */
end_comment
begin_function
DECL|function|intersects
name|bool
name|QRectF
operator|::
name|intersects
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|r
parameter_list|)
specifier|const
block|{
name|qreal
name|l1
init|=
name|xp
decl_stmt|;
name|qreal
name|r1
init|=
name|xp
decl_stmt|;
if|if
condition|(
name|w
operator|<
literal|0
condition|)
name|l1
operator|+=
name|w
expr_stmt|;
else|else
name|r1
operator|+=
name|w
expr_stmt|;
if|if
condition|(
name|l1
operator|==
name|r1
condition|)
comment|// null rect
return|return
literal|false
return|;
name|qreal
name|l2
init|=
name|r
operator|.
name|xp
decl_stmt|;
name|qreal
name|r2
init|=
name|r
operator|.
name|xp
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|w
operator|<
literal|0
condition|)
name|l2
operator|+=
name|r
operator|.
name|w
expr_stmt|;
else|else
name|r2
operator|+=
name|r
operator|.
name|w
expr_stmt|;
if|if
condition|(
name|l2
operator|==
name|r2
condition|)
comment|// null rect
return|return
literal|false
return|;
if|if
condition|(
name|l1
operator|>=
name|r2
operator|||
name|l2
operator|>=
name|r1
condition|)
return|return
literal|false
return|;
name|qreal
name|t1
init|=
name|yp
decl_stmt|;
name|qreal
name|b1
init|=
name|yp
decl_stmt|;
if|if
condition|(
name|h
operator|<
literal|0
condition|)
name|t1
operator|+=
name|h
expr_stmt|;
else|else
name|b1
operator|+=
name|h
expr_stmt|;
if|if
condition|(
name|t1
operator|==
name|b1
condition|)
comment|// null rect
return|return
literal|false
return|;
name|qreal
name|t2
init|=
name|r
operator|.
name|yp
decl_stmt|;
name|qreal
name|b2
init|=
name|r
operator|.
name|yp
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|h
operator|<
literal|0
condition|)
name|t2
operator|+=
name|r
operator|.
name|h
expr_stmt|;
else|else
name|b2
operator|+=
name|r
operator|.
name|h
expr_stmt|;
if|if
condition|(
name|t2
operator|==
name|b2
condition|)
comment|// null rect
return|return
literal|false
return|;
if|if
condition|(
name|t1
operator|>=
name|b2
operator|||
name|t2
operator|>=
name|b1
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/*!     \fn QRect QRectF::toRect() const      Returns a QRect based on the values of this rectangle.  Note that the     coordinates in the returned rectangle are rounded to the nearest integer.      \sa QRectF(), toAlignedRect() */
end_comment
begin_comment
comment|/*!     \fn QRect QRectF::toAlignedRect() const     \since 4.3      Returns a QRect based on the values of this rectangle that is the     smallest possible integer rectangle that completely contains this     rectangle.      \sa toRect() */
end_comment
begin_function
DECL|function|toAlignedRect
name|QRect
name|QRectF
operator|::
name|toAlignedRect
parameter_list|()
specifier|const
block|{
name|int
name|xmin
init|=
name|int
argument_list|(
name|qFloor
argument_list|(
name|xp
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|xmax
init|=
name|int
argument_list|(
name|qCeil
argument_list|(
name|xp
operator|+
name|w
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|ymin
init|=
name|int
argument_list|(
name|qFloor
argument_list|(
name|yp
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|ymax
init|=
name|int
argument_list|(
name|qCeil
argument_list|(
name|yp
operator|+
name|h
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|QRect
argument_list|(
name|xmin
argument_list|,
name|ymin
argument_list|,
name|xmax
operator|-
name|xmin
argument_list|,
name|ymax
operator|-
name|ymin
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \fn void QRectF::moveCenter(const QPointF&position)      Moves the rectangle, leaving the center point at the given \a     position. The rectangle's size is unchanged.      \sa center() */
end_comment
begin_comment
comment|/*!     \fn bool operator==(const QRectF&r1, const QRectF&r2)     \relates QRectF      Returns \c true if the rectangles \a r1 and \a r2 are equal,     otherwise returns \c false. */
end_comment
begin_comment
comment|/*!     \fn bool operator!=(const QRectF&r1, const QRectF&r2)     \relates QRectF      Returns \c true if the rectangles \a r1 and \a r2 are different, otherwise     returns \c false. */
end_comment
begin_comment
comment|/*****************************************************************************   QRectF stream functions  *****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DATASTREAM
end_ifndef
begin_comment
comment|/*!     \fn QDataStream&operator<<(QDataStream&stream, const QRectF&rectangle)      \relates QRectF      Writes the \a rectangle to the \a stream, and returns a reference to the     stream.      \sa {Serializing Qt Data Types} */
end_comment
begin_function
DECL|function|operator <<
name|QDataStream
modifier|&
name|operator
name|<<
parameter_list|(
name|QDataStream
modifier|&
name|s
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|r
parameter_list|)
block|{
name|s
operator|<<
name|double
argument_list|(
name|r
operator|.
name|x
argument_list|()
argument_list|)
operator|<<
name|double
argument_list|(
name|r
operator|.
name|y
argument_list|()
argument_list|)
operator|<<
name|double
argument_list|(
name|r
operator|.
name|width
argument_list|()
argument_list|)
operator|<<
name|double
argument_list|(
name|r
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|s
return|;
block|}
end_function
begin_comment
comment|/*!     \fn QDataStream&operator>>(QDataStream&stream, QRectF&rectangle)      \relates QRectF      Reads a \a rectangle from the \a stream, and returns a reference to the     stream.      \sa {Serializing Qt Data Types} */
end_comment
begin_function
DECL|function|operator >>
name|QDataStream
modifier|&
name|operator
name|>>
parameter_list|(
name|QDataStream
modifier|&
name|s
parameter_list|,
name|QRectF
modifier|&
name|r
parameter_list|)
block|{
name|double
name|x
decl_stmt|,
name|y
decl_stmt|,
name|w
decl_stmt|,
name|h
decl_stmt|;
name|s
operator|>>
name|x
expr_stmt|;
name|s
operator|>>
name|y
expr_stmt|;
name|s
operator|>>
name|w
expr_stmt|;
name|s
operator|>>
name|h
expr_stmt|;
name|r
operator|.
name|setRect
argument_list|(
name|qreal
argument_list|(
name|x
argument_list|)
argument_list|,
name|qreal
argument_list|(
name|y
argument_list|)
argument_list|,
name|qreal
argument_list|(
name|w
argument_list|)
argument_list|,
name|qreal
argument_list|(
name|h
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|s
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DATASTREAM
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DEBUG_STREAM
end_ifndef
begin_function
DECL|function|operator <<
name|QDebug
name|operator
name|<<
parameter_list|(
name|QDebug
name|dbg
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|r
parameter_list|)
block|{
name|dbg
operator|.
name|nospace
argument_list|()
operator|<<
literal|"QRectF("
operator|<<
name|r
operator|.
name|x
argument_list|()
operator|<<
literal|','
operator|<<
name|r
operator|.
name|y
argument_list|()
operator|<<
literal|' '
operator|<<
name|r
operator|.
name|width
argument_list|()
operator|<<
literal|'x'
operator|<<
name|r
operator|.
name|height
argument_list|()
operator|<<
literal|')'
expr_stmt|;
return|return
name|dbg
operator|.
name|space
argument_list|()
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
