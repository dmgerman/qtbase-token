begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QBYTEARRAY_H
end_ifndef
begin_define
DECL|macro|QBYTEARRAY_H
define|#
directive|define
name|QBYTEARRAY_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qrefcount.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qnamespace.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qarraydata.h>
end_include
begin_include
include|#
directive|include
file|<stdlib.h>
end_include
begin_include
include|#
directive|include
file|<string.h>
end_include
begin_include
include|#
directive|include
file|<stdarg.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|truncate
end_ifdef
begin_error
error|#
directive|error
error|qbytearray.h must be included before any header file that defines truncate
end_error
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_CC_GNU
argument_list|)
operator|&&
operator|(
name|__GNUC__
operator|==
literal|4
operator|&&
name|__GNUC_MINOR__
operator|==
literal|0
operator|)
end_if
begin_comment
comment|//There is a bug in GCC 4.0 that tries to instantiate template of annonymous enum
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|QT_USE_FAST_OPERATOR_PLUS
end_ifdef
begin_undef
DECL|macro|QT_USE_FAST_OPERATOR_PLUS
undef|#
directive|undef
name|QT_USE_FAST_OPERATOR_PLUS
end_undef
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|QT_USE_QSTRINGBUILDER
end_ifdef
begin_undef
DECL|macro|QT_USE_QSTRINGBUILDER
undef|#
directive|undef
name|QT_USE_QSTRINGBUILDER
end_undef
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_function_decl
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
comment|/*****************************************************************************   Safe and portable C string functions; extensions to standard string.h  *****************************************************************************/
name|Q_CORE_EXPORT
name|char
modifier|*
name|qstrdup
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function
DECL|function|qstrlen
specifier|inline
name|uint
name|qstrlen
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|)
block|{
return|return
name|str
condition|?
name|uint
argument_list|(
name|strlen
argument_list|(
name|str
argument_list|)
argument_list|)
else|:
literal|0
return|;
block|}
end_function
begin_function
DECL|function|qstrnlen
specifier|inline
name|uint
name|qstrnlen
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|,
name|uint
name|maxlen
parameter_list|)
block|{
name|uint
name|length
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|str
condition|)
block|{
while|while
condition|(
name|length
operator|<
name|maxlen
operator|&&
operator|*
name|str
operator|++
condition|)
name|length
operator|++
expr_stmt|;
block|}
return|return
name|length
return|;
block|}
end_function
begin_function_decl
name|Q_CORE_EXPORT
name|char
modifier|*
name|qstrcpy
parameter_list|(
name|char
modifier|*
name|dst
parameter_list|,
specifier|const
name|char
modifier|*
name|src
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|Q_CORE_EXPORT
name|char
modifier|*
name|qstrncpy
parameter_list|(
name|char
modifier|*
name|dst
parameter_list|,
specifier|const
name|char
modifier|*
name|src
parameter_list|,
name|uint
name|len
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|Q_CORE_EXPORT
name|int
name|qstrcmp
parameter_list|(
specifier|const
name|char
modifier|*
name|str1
parameter_list|,
specifier|const
name|char
modifier|*
name|str2
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|Q_CORE_EXPORT
name|int
name|qstrcmp
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|str1
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|str2
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|Q_CORE_EXPORT
name|int
name|qstrcmp
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|str1
parameter_list|,
specifier|const
name|char
modifier|*
name|str2
parameter_list|)
function_decl|;
end_function_decl
begin_function
DECL|function|qstrcmp
specifier|static
specifier|inline
name|int
name|qstrcmp
parameter_list|(
specifier|const
name|char
modifier|*
name|str1
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|str2
parameter_list|)
block|{
return|return
operator|-
name|qstrcmp
argument_list|(
name|str2
argument_list|,
name|str1
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qstrncmp
specifier|inline
name|int
name|qstrncmp
parameter_list|(
specifier|const
name|char
modifier|*
name|str1
parameter_list|,
specifier|const
name|char
modifier|*
name|str2
parameter_list|,
name|uint
name|len
parameter_list|)
block|{
return|return
operator|(
name|str1
operator|&&
name|str2
operator|)
condition|?
name|strncmp
argument_list|(
name|str1
argument_list|,
name|str2
argument_list|,
name|len
argument_list|)
else|:
operator|(
name|str1
condition|?
literal|1
else|:
operator|(
name|str2
condition|?
operator|-
literal|1
else|:
literal|0
operator|)
operator|)
return|;
block|}
end_function
begin_function_decl
name|Q_CORE_EXPORT
name|int
name|qstricmp
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|Q_CORE_EXPORT
name|int
name|qstrnicmp
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|uint
name|len
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|// implemented in qvsnprintf.cpp
end_comment
begin_function_decl
name|Q_CORE_EXPORT
name|int
name|qvsnprintf
parameter_list|(
name|char
modifier|*
name|str
parameter_list|,
name|size_t
name|n
parameter_list|,
specifier|const
name|char
modifier|*
name|fmt
parameter_list|,
name|va_list
name|ap
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|Q_CORE_EXPORT
name|int
name|qsnprintf
parameter_list|(
name|char
modifier|*
name|str
parameter_list|,
name|size_t
name|n
parameter_list|,
specifier|const
name|char
modifier|*
name|fmt
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|// qChecksum: Internet checksum
end_comment
begin_function_decl
name|Q_CORE_EXPORT
name|quint16
name|qChecksum
parameter_list|(
specifier|const
name|char
modifier|*
name|s
parameter_list|,
name|uint
name|len
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
DECL|variable|QByteRef
name|class
name|QByteRef
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QString
name|class
name|QString
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QDataStream
name|class
name|QDataStream
decl_stmt|;
end_decl_stmt
begin_expr_stmt
DECL|variable|QList
name|template
operator|<
name|typename
name|T
operator|>
name|class
name|QList
expr_stmt|;
end_expr_stmt
begin_struct
DECL|struct|QByteArrayData
struct|struct
name|QByteArrayData
block|{
comment|// Keep in sync with QArrayData
DECL|member|ref
name|QtPrivate
operator|::
name|RefCount
name|ref
expr_stmt|;
DECL|member|size
name|int
name|size
decl_stmt|;
DECL|member|alloc
name|uint
name|alloc
range|:
literal|31
decl_stmt|;
DECL|member|capacityReserved
name|uint
name|capacityReserved
range|:
literal|1
decl_stmt|;
DECL|member|offset
name|qptrdiff
name|offset
decl_stmt|;
DECL|function|data
specifier|inline
name|char
modifier|*
name|data
parameter_list|()
block|{
return|return
name|reinterpret_cast
operator|<
name|char
operator|*
operator|>
operator|(
name|this
operator|)
operator|+
name|offset
return|;
block|}
DECL|function|data
specifier|inline
specifier|const
name|char
operator|*
name|data
argument_list|()
specifier|const
block|{
return|return
name|reinterpret_cast
operator|<
specifier|const
name|char
operator|*
operator|>
operator|(
name|this
operator|)
operator|+
name|offset
return|;
block|}
block|}
struct|;
end_struct
begin_expr_stmt
DECL|variable|sizeof
name|Q_STATIC_ASSERT
argument_list|(
sizeof|sizeof
argument_list|(
name|QArrayData
argument_list|)
operator|==
sizeof|sizeof
argument_list|(
name|QByteArrayData
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|variable|offsetof
name|Q_STATIC_ASSERT
argument_list|(
name|offsetof
argument_list|(
name|QArrayData
argument_list|,
name|ref
argument_list|)
operator|==
name|offsetof
argument_list|(
name|QByteArrayData
argument_list|,
name|ref
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|variable|offsetof
name|Q_STATIC_ASSERT
argument_list|(
name|offsetof
argument_list|(
name|QArrayData
argument_list|,
name|size
argument_list|)
operator|==
name|offsetof
argument_list|(
name|QByteArrayData
argument_list|,
name|size
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|//  Can't use offsetof on bitfield members alloc, capacityReserved
end_comment
begin_expr_stmt
DECL|variable|offsetof
name|Q_STATIC_ASSERT
argument_list|(
name|offsetof
argument_list|(
name|QArrayData
argument_list|,
name|offset
argument_list|)
operator|==
name|offsetof
argument_list|(
name|QByteArrayData
argument_list|,
name|offset
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|struct|QStaticByteArrayData
name|template
operator|<
name|int
name|N
operator|>
expr|struct
name|QStaticByteArrayData
block|{
DECL|member|ba
name|QByteArrayData
name|ba
block|;
DECL|member|data
name|char
name|data
index|[
name|N
operator|+
literal|1
index|]
block|;
DECL|function|data_ptr
name|QByteArrayData
operator|*
name|data_ptr
argument_list|()
specifier|const
block|{
name|Q_ASSERT
argument_list|(
name|ba
operator|.
name|ref
operator|.
name|isStatic
argument_list|()
argument_list|)
block|;
return|return
name|const_cast
operator|<
name|QByteArrayData
operator|*
operator|>
operator|(
operator|&
name|ba
operator|)
return|;
block|}
end_expr_stmt
begin_struct
DECL|struct|QByteArrayDataPtr
unit|};
struct|struct
name|QByteArrayDataPtr
block|{
DECL|member|ptr
name|QByteArrayData
modifier|*
name|ptr
decl_stmt|;
block|}
struct|;
end_struct
begin_define
DECL|macro|Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET
define|#
directive|define
name|Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET
parameter_list|(
name|size
parameter_list|,
name|offset
parameter_list|)
define|\
value|{ Q_REFCOUNT_INITIALIZE_STATIC, size, 0, 0, offset }
end_define
begin_comment
unit|\
comment|/**/
end_comment
begin_define
DECL|macro|Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER
define|#
directive|define
name|Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER
parameter_list|(
name|size
parameter_list|)
define|\
value|Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(size, sizeof(QByteArrayData))
end_define
begin_comment
unit|\
comment|/**/
end_comment
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_COMPILER_LAMBDA
argument_list|)
end_if
begin_define
DECL|macro|QByteArrayLiteral
define|#
directive|define
name|QByteArrayLiteral
parameter_list|(
name|str
parameter_list|)
define|\
value|([]() -> QByteArrayDataPtr { \         enum { Size = sizeof(str) - 1 }; \         static const QStaticByteArrayData<Size> qbytearray_literal = { \             Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER(Size), \             str }; \         QByteArrayDataPtr holder = { qbytearray_literal.data_ptr() }; \         return holder; \     }())
end_define
begin_comment
unit|\
comment|/**/
end_comment
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|Q_CC_GNU
argument_list|)
end_elif
begin_comment
comment|// We need to create a QByteArrayData in the .rodata section of memory
end_comment
begin_comment
comment|// and the only way to do that is to create a "static const" variable.
end_comment
begin_comment
comment|// To do that, we need the __extension__ {( )} trick which only GCC supports
end_comment
begin_define
DECL|macro|QByteArrayLiteral
define|#
directive|define
name|QByteArrayLiteral
parameter_list|(
name|str
parameter_list|)
define|\
value|__extension__ ({ \         enum { Size = sizeof(str) - 1 }; \         static const QStaticByteArrayData<Size> qbytearray_literal = { \             Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER(Size), \             str }; \         QByteArrayDataPtr holder = { qbytearray_literal.data_ptr() }; \         holder; \     })
end_define
begin_comment
unit|\
comment|/**/
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QByteArrayLiteral
end_ifndef
begin_comment
comment|// no lambdas, not GCC, use const char * instead
end_comment
begin_define
DECL|macro|QByteArrayLiteral
define|#
directive|define
name|QByteArrayLiteral
parameter_list|(
name|str
parameter_list|)
value|(str)
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|class
name|Q_CORE_EXPORT
name|QByteArray
block|{
name|private
label|:
typedef|typedef
name|QTypedArrayData
operator|<
name|char
operator|>
name|Data
expr_stmt|;
name|public
label|:
specifier|inline
name|QByteArray
argument_list|()
expr_stmt|;
name|QByteArray
argument_list|(
argument|const char *
argument_list|,
argument|int size = -
literal|1
argument_list|)
empty_stmt|;
name|QByteArray
argument_list|(
argument|int size
argument_list|,
argument|char c
argument_list|)
empty_stmt|;
name|QByteArray
argument_list|(
argument|int size
argument_list|,
argument|Qt::Initialization
argument_list|)
empty_stmt|;
specifier|inline
name|QByteArray
argument_list|(
specifier|const
name|QByteArray
operator|&
argument_list|)
expr_stmt|;
specifier|inline
operator|~
name|QByteArray
argument_list|()
expr_stmt|;
name|QByteArray
modifier|&
name|operator
init|=
operator|(
specifier|const
name|QByteArray
operator|&
operator|)
decl_stmt|;
name|QByteArray
modifier|&
name|operator
init|=
operator|(
specifier|const
name|char
operator|*
name|str
operator|)
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_COMPILER_RVALUE_REFS
specifier|inline
name|QByteArray
modifier|&
name|operator
init|=
operator|(
name|QByteArray
operator|&&
name|other
operator|)
block|{
name|qSwap
argument_list|(
name|d
argument_list|,
name|other
operator|.
name|d
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
endif|#
directive|endif
specifier|inline
name|void
name|swap
parameter_list|(
name|QByteArray
modifier|&
name|other
parameter_list|)
block|{
name|qSwap
argument_list|(
name|d
argument_list|,
name|other
operator|.
name|d
argument_list|)
expr_stmt|;
block|}
specifier|inline
name|int
name|size
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|isEmpty
argument_list|()
specifier|const
expr_stmt|;
name|void
name|resize
parameter_list|(
name|int
name|size
parameter_list|)
function_decl|;
name|QByteArray
modifier|&
name|fill
parameter_list|(
name|char
name|c
parameter_list|,
name|int
name|size
init|=
operator|-
literal|1
parameter_list|)
function_decl|;
name|int
name|capacity
argument_list|()
specifier|const
expr_stmt|;
name|void
name|reserve
parameter_list|(
name|int
name|size
parameter_list|)
function_decl|;
name|void
name|squeeze
parameter_list|()
function_decl|;
ifndef|#
directive|ifndef
name|QT_NO_CAST_FROM_BYTEARRAY
name|operator
specifier|const
name|char
operator|*
operator|(
operator|)
specifier|const
expr_stmt|;
name|operator
specifier|const
name|void
operator|*
operator|(
operator|)
specifier|const
expr_stmt|;
endif|#
directive|endif
name|char
modifier|*
name|data
parameter_list|()
function_decl|;
specifier|const
name|char
operator|*
name|data
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
specifier|const
name|char
operator|*
name|constData
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
name|void
name|detach
parameter_list|()
function_decl|;
name|bool
name|isDetached
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
name|bool
name|isSharedWith
argument_list|(
specifier|const
name|QByteArray
operator|&
name|other
argument_list|)
decl|const
block|{
return|return
name|d
operator|==
name|other
operator|.
name|d
return|;
block|}
name|void
name|clear
parameter_list|()
function_decl|;
name|char
name|at
argument_list|(
name|int
name|i
argument_list|)
decl|const
decl_stmt|;
name|char
name|operator
index|[]
argument_list|(
name|int
name|i
argument_list|)
decl|const
decl_stmt|;
name|char
name|operator
index|[]
argument_list|(
name|uint
name|i
argument_list|)
decl|const
decl_stmt|;
name|QByteRef
name|operator
function_decl|[]
parameter_list|(
name|int
name|i
parameter_list|)
function_decl|;
name|QByteRef
name|operator
function_decl|[]
parameter_list|(
name|uint
name|i
parameter_list|)
function_decl|;
name|int
name|indexOf
argument_list|(
name|char
name|c
argument_list|,
name|int
name|from
operator|=
literal|0
argument_list|)
decl|const
decl_stmt|;
name|int
name|indexOf
argument_list|(
specifier|const
name|char
operator|*
name|c
argument_list|,
name|int
name|from
operator|=
literal|0
argument_list|)
decl|const
decl_stmt|;
name|int
name|indexOf
argument_list|(
specifier|const
name|QByteArray
operator|&
name|a
argument_list|,
name|int
name|from
operator|=
literal|0
argument_list|)
decl|const
decl_stmt|;
name|int
name|lastIndexOf
argument_list|(
name|char
name|c
argument_list|,
name|int
name|from
operator|=
operator|-
literal|1
argument_list|)
decl|const
decl_stmt|;
name|int
name|lastIndexOf
argument_list|(
specifier|const
name|char
operator|*
name|c
argument_list|,
name|int
name|from
operator|=
operator|-
literal|1
argument_list|)
decl|const
decl_stmt|;
name|int
name|lastIndexOf
argument_list|(
specifier|const
name|QByteArray
operator|&
name|a
argument_list|,
name|int
name|from
operator|=
operator|-
literal|1
argument_list|)
decl|const
decl_stmt|;
name|bool
name|contains
argument_list|(
name|char
name|c
argument_list|)
decl|const
decl_stmt|;
name|bool
name|contains
argument_list|(
specifier|const
name|char
operator|*
name|a
argument_list|)
decl|const
decl_stmt|;
name|bool
name|contains
argument_list|(
specifier|const
name|QByteArray
operator|&
name|a
argument_list|)
decl|const
decl_stmt|;
name|int
name|count
argument_list|(
name|char
name|c
argument_list|)
decl|const
decl_stmt|;
name|int
name|count
argument_list|(
specifier|const
name|char
operator|*
name|a
argument_list|)
decl|const
decl_stmt|;
name|int
name|count
argument_list|(
specifier|const
name|QByteArray
operator|&
name|a
argument_list|)
decl|const
decl_stmt|;
name|QByteArray
name|left
argument_list|(
name|int
name|len
argument_list|)
decl|const
decl_stmt|;
name|QByteArray
name|right
argument_list|(
name|int
name|len
argument_list|)
decl|const
decl_stmt|;
name|QByteArray
name|mid
argument_list|(
name|int
name|index
argument_list|,
name|int
name|len
operator|=
operator|-
literal|1
argument_list|)
decl|const
decl_stmt|;
name|bool
name|startsWith
argument_list|(
specifier|const
name|QByteArray
operator|&
name|a
argument_list|)
decl|const
decl_stmt|;
name|bool
name|startsWith
argument_list|(
name|char
name|c
argument_list|)
decl|const
decl_stmt|;
name|bool
name|startsWith
argument_list|(
specifier|const
name|char
operator|*
name|c
argument_list|)
decl|const
decl_stmt|;
name|bool
name|endsWith
argument_list|(
specifier|const
name|QByteArray
operator|&
name|a
argument_list|)
decl|const
decl_stmt|;
name|bool
name|endsWith
argument_list|(
name|char
name|c
argument_list|)
decl|const
decl_stmt|;
name|bool
name|endsWith
argument_list|(
specifier|const
name|char
operator|*
name|c
argument_list|)
decl|const
decl_stmt|;
name|void
name|truncate
parameter_list|(
name|int
name|pos
parameter_list|)
function_decl|;
name|void
name|chop
parameter_list|(
name|int
name|n
parameter_list|)
function_decl|;
name|QByteArray
name|toLower
argument_list|()
specifier|const
expr_stmt|;
name|QByteArray
name|toUpper
argument_list|()
specifier|const
expr_stmt|;
name|QByteArray
name|trimmed
argument_list|()
specifier|const
expr_stmt|;
name|QByteArray
name|simplified
argument_list|()
specifier|const
expr_stmt|;
name|QByteArray
name|leftJustified
argument_list|(
name|int
name|width
argument_list|,
name|char
name|fill
operator|=
literal|' '
argument_list|,
name|bool
name|truncate
operator|=
name|false
argument_list|)
decl|const
decl_stmt|;
name|QByteArray
name|rightJustified
argument_list|(
name|int
name|width
argument_list|,
name|char
name|fill
operator|=
literal|' '
argument_list|,
name|bool
name|truncate
operator|=
name|false
argument_list|)
decl|const
decl_stmt|;
name|QByteArray
modifier|&
name|prepend
parameter_list|(
name|char
name|c
parameter_list|)
function_decl|;
name|QByteArray
modifier|&
name|prepend
parameter_list|(
specifier|const
name|char
modifier|*
name|s
parameter_list|)
function_decl|;
name|QByteArray
modifier|&
name|prepend
parameter_list|(
specifier|const
name|char
modifier|*
name|s
parameter_list|,
name|int
name|len
parameter_list|)
function_decl|;
name|QByteArray
modifier|&
name|prepend
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|a
parameter_list|)
function_decl|;
name|QByteArray
modifier|&
name|append
parameter_list|(
name|char
name|c
parameter_list|)
function_decl|;
name|QByteArray
modifier|&
name|append
parameter_list|(
specifier|const
name|char
modifier|*
name|s
parameter_list|)
function_decl|;
name|QByteArray
modifier|&
name|append
parameter_list|(
specifier|const
name|char
modifier|*
name|s
parameter_list|,
name|int
name|len
parameter_list|)
function_decl|;
name|QByteArray
modifier|&
name|append
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|a
parameter_list|)
function_decl|;
name|QByteArray
modifier|&
name|insert
parameter_list|(
name|int
name|i
parameter_list|,
name|char
name|c
parameter_list|)
function_decl|;
name|QByteArray
modifier|&
name|insert
parameter_list|(
name|int
name|i
parameter_list|,
specifier|const
name|char
modifier|*
name|s
parameter_list|)
function_decl|;
name|QByteArray
modifier|&
name|insert
parameter_list|(
name|int
name|i
parameter_list|,
specifier|const
name|char
modifier|*
name|s
parameter_list|,
name|int
name|len
parameter_list|)
function_decl|;
name|QByteArray
modifier|&
name|insert
parameter_list|(
name|int
name|i
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|a
parameter_list|)
function_decl|;
name|QByteArray
modifier|&
name|remove
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|len
parameter_list|)
function_decl|;
name|QByteArray
modifier|&
name|replace
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|len
parameter_list|,
specifier|const
name|char
modifier|*
name|s
parameter_list|)
function_decl|;
name|QByteArray
modifier|&
name|replace
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|len
parameter_list|,
specifier|const
name|char
modifier|*
name|s
parameter_list|,
name|int
name|alen
parameter_list|)
function_decl|;
name|QByteArray
modifier|&
name|replace
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|len
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|s
parameter_list|)
function_decl|;
name|QByteArray
modifier|&
name|replace
parameter_list|(
name|char
name|before
parameter_list|,
specifier|const
name|char
modifier|*
name|after
parameter_list|)
function_decl|;
name|QByteArray
modifier|&
name|replace
parameter_list|(
name|char
name|before
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|after
parameter_list|)
function_decl|;
name|QByteArray
modifier|&
name|replace
parameter_list|(
specifier|const
name|char
modifier|*
name|before
parameter_list|,
specifier|const
name|char
modifier|*
name|after
parameter_list|)
function_decl|;
name|QByteArray
modifier|&
name|replace
parameter_list|(
specifier|const
name|char
modifier|*
name|before
parameter_list|,
name|int
name|bsize
parameter_list|,
specifier|const
name|char
modifier|*
name|after
parameter_list|,
name|int
name|asize
parameter_list|)
function_decl|;
name|QByteArray
modifier|&
name|replace
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|before
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|after
parameter_list|)
function_decl|;
name|QByteArray
modifier|&
name|replace
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|before
parameter_list|,
specifier|const
name|char
modifier|*
name|after
parameter_list|)
function_decl|;
name|QByteArray
modifier|&
name|replace
parameter_list|(
specifier|const
name|char
modifier|*
name|before
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|after
parameter_list|)
function_decl|;
name|QByteArray
modifier|&
name|replace
parameter_list|(
name|char
name|before
parameter_list|,
name|char
name|after
parameter_list|)
function_decl|;
name|QByteArray
operator|&
name|operator
operator|+=
operator|(
name|char
name|c
operator|)
expr_stmt|;
name|QByteArray
operator|&
name|operator
operator|+=
operator|(
specifier|const
name|char
operator|*
name|s
operator|)
expr_stmt|;
name|QByteArray
operator|&
name|operator
operator|+=
operator|(
specifier|const
name|QByteArray
operator|&
name|a
operator|)
expr_stmt|;
name|QList
operator|<
name|QByteArray
operator|>
name|split
argument_list|(
argument|char sep
argument_list|)
specifier|const
expr_stmt|;
name|QByteArray
name|repeated
argument_list|(
name|int
name|times
argument_list|)
decl|const
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_CAST_TO_ASCII
name|QT_ASCII_CAST_WARN
name|QByteArray
modifier|&
name|append
parameter_list|(
specifier|const
name|QString
modifier|&
name|s
parameter_list|)
function_decl|;
name|QT_ASCII_CAST_WARN
name|QByteArray
modifier|&
name|insert
parameter_list|(
name|int
name|i
parameter_list|,
specifier|const
name|QString
modifier|&
name|s
parameter_list|)
function_decl|;
name|QT_ASCII_CAST_WARN
name|QByteArray
modifier|&
name|replace
parameter_list|(
specifier|const
name|QString
modifier|&
name|before
parameter_list|,
specifier|const
name|char
modifier|*
name|after
parameter_list|)
function_decl|;
name|QT_ASCII_CAST_WARN
name|QByteArray
modifier|&
name|replace
parameter_list|(
name|char
name|c
parameter_list|,
specifier|const
name|QString
modifier|&
name|after
parameter_list|)
function_decl|;
name|QT_ASCII_CAST_WARN
name|QByteArray
modifier|&
name|replace
parameter_list|(
specifier|const
name|QString
modifier|&
name|before
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|after
parameter_list|)
function_decl|;
name|QT_ASCII_CAST_WARN
name|QByteArray
operator|&
name|operator
operator|+=
operator|(
specifier|const
name|QString
operator|&
name|s
operator|)
expr_stmt|;
name|QT_ASCII_CAST_WARN
name|int
name|indexOf
argument_list|(
specifier|const
name|QString
operator|&
name|s
argument_list|,
name|int
name|from
operator|=
literal|0
argument_list|)
decl|const
decl_stmt|;
name|QT_ASCII_CAST_WARN
name|int
name|lastIndexOf
argument_list|(
specifier|const
name|QString
operator|&
name|s
argument_list|,
name|int
name|from
operator|=
operator|-
literal|1
argument_list|)
decl|const
decl_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_CAST_FROM_ASCII
specifier|inline
name|QT_ASCII_CAST_WARN
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QString
operator|&
name|s2
operator|)
specifier|const
expr_stmt|;
specifier|inline
name|QT_ASCII_CAST_WARN
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|QString
operator|&
name|s2
operator|)
specifier|const
expr_stmt|;
specifier|inline
name|QT_ASCII_CAST_WARN
name|bool
name|operator
operator|<
operator|(
specifier|const
name|QString
operator|&
name|s2
operator|)
specifier|const
expr_stmt|;
specifier|inline
name|QT_ASCII_CAST_WARN
name|bool
name|operator
operator|>
operator|(
specifier|const
name|QString
operator|&
name|s2
operator|)
specifier|const
expr_stmt|;
specifier|inline
name|QT_ASCII_CAST_WARN
name|bool
name|operator
operator|<=
operator|(
specifier|const
name|QString
operator|&
name|s2
operator|)
specifier|const
expr_stmt|;
specifier|inline
name|QT_ASCII_CAST_WARN
name|bool
name|operator
operator|>=
operator|(
specifier|const
name|QString
operator|&
name|s2
operator|)
specifier|const
expr_stmt|;
endif|#
directive|endif
name|short
name|toShort
argument_list|(
name|bool
operator|*
name|ok
operator|=
literal|0
argument_list|,
name|int
name|base
operator|=
literal|10
argument_list|)
decl|const
decl_stmt|;
name|ushort
name|toUShort
argument_list|(
name|bool
operator|*
name|ok
operator|=
literal|0
argument_list|,
name|int
name|base
operator|=
literal|10
argument_list|)
decl|const
decl_stmt|;
name|int
name|toInt
argument_list|(
name|bool
operator|*
name|ok
operator|=
literal|0
argument_list|,
name|int
name|base
operator|=
literal|10
argument_list|)
decl|const
decl_stmt|;
name|uint
name|toUInt
argument_list|(
name|bool
operator|*
name|ok
operator|=
literal|0
argument_list|,
name|int
name|base
operator|=
literal|10
argument_list|)
decl|const
decl_stmt|;
name|long
name|toLong
argument_list|(
name|bool
operator|*
name|ok
operator|=
literal|0
argument_list|,
name|int
name|base
operator|=
literal|10
argument_list|)
decl|const
decl_stmt|;
name|ulong
name|toULong
argument_list|(
name|bool
operator|*
name|ok
operator|=
literal|0
argument_list|,
name|int
name|base
operator|=
literal|10
argument_list|)
decl|const
decl_stmt|;
name|qlonglong
name|toLongLong
argument_list|(
name|bool
operator|*
name|ok
operator|=
literal|0
argument_list|,
name|int
name|base
operator|=
literal|10
argument_list|)
decl|const
decl_stmt|;
name|qulonglong
name|toULongLong
argument_list|(
name|bool
operator|*
name|ok
operator|=
literal|0
argument_list|,
name|int
name|base
operator|=
literal|10
argument_list|)
decl|const
decl_stmt|;
name|float
name|toFloat
argument_list|(
name|bool
operator|*
name|ok
operator|=
literal|0
argument_list|)
decl|const
decl_stmt|;
name|double
name|toDouble
argument_list|(
name|bool
operator|*
name|ok
operator|=
literal|0
argument_list|)
decl|const
decl_stmt|;
name|QByteArray
name|toBase64
argument_list|()
specifier|const
expr_stmt|;
name|QByteArray
name|toHex
argument_list|()
specifier|const
expr_stmt|;
name|QByteArray
name|toPercentEncoding
argument_list|(
specifier|const
name|QByteArray
operator|&
name|exclude
operator|=
name|QByteArray
argument_list|()
argument_list|,
specifier|const
name|QByteArray
operator|&
name|include
operator|=
name|QByteArray
argument_list|()
argument_list|,
name|char
name|percent
operator|=
literal|'%'
argument_list|)
decl|const
decl_stmt|;
name|QByteArray
modifier|&
name|setNum
parameter_list|(
name|short
parameter_list|,
name|int
name|base
init|=
literal|10
parameter_list|)
function_decl|;
name|QByteArray
modifier|&
name|setNum
parameter_list|(
name|ushort
parameter_list|,
name|int
name|base
init|=
literal|10
parameter_list|)
function_decl|;
name|QByteArray
modifier|&
name|setNum
parameter_list|(
name|int
parameter_list|,
name|int
name|base
init|=
literal|10
parameter_list|)
function_decl|;
name|QByteArray
modifier|&
name|setNum
parameter_list|(
name|uint
parameter_list|,
name|int
name|base
init|=
literal|10
parameter_list|)
function_decl|;
name|QByteArray
modifier|&
name|setNum
parameter_list|(
name|qlonglong
parameter_list|,
name|int
name|base
init|=
literal|10
parameter_list|)
function_decl|;
name|QByteArray
modifier|&
name|setNum
parameter_list|(
name|qulonglong
parameter_list|,
name|int
name|base
init|=
literal|10
parameter_list|)
function_decl|;
name|QByteArray
modifier|&
name|setNum
parameter_list|(
name|float
parameter_list|,
name|char
name|f
init|=
literal|'g'
parameter_list|,
name|int
name|prec
init|=
literal|6
parameter_list|)
function_decl|;
name|QByteArray
modifier|&
name|setNum
parameter_list|(
name|double
parameter_list|,
name|char
name|f
init|=
literal|'g'
parameter_list|,
name|int
name|prec
init|=
literal|6
parameter_list|)
function_decl|;
name|QByteArray
modifier|&
name|setRawData
parameter_list|(
specifier|const
name|char
modifier|*
name|a
parameter_list|,
name|uint
name|n
parameter_list|)
function_decl|;
comment|// ### Qt 5: use an int
specifier|static
name|QByteArray
name|number
parameter_list|(
name|int
parameter_list|,
name|int
name|base
init|=
literal|10
parameter_list|)
function_decl|;
specifier|static
name|QByteArray
name|number
parameter_list|(
name|uint
parameter_list|,
name|int
name|base
init|=
literal|10
parameter_list|)
function_decl|;
specifier|static
name|QByteArray
name|number
parameter_list|(
name|qlonglong
parameter_list|,
name|int
name|base
init|=
literal|10
parameter_list|)
function_decl|;
specifier|static
name|QByteArray
name|number
parameter_list|(
name|qulonglong
parameter_list|,
name|int
name|base
init|=
literal|10
parameter_list|)
function_decl|;
specifier|static
name|QByteArray
name|number
parameter_list|(
name|double
parameter_list|,
name|char
name|f
init|=
literal|'g'
parameter_list|,
name|int
name|prec
init|=
literal|6
parameter_list|)
function_decl|;
specifier|static
name|QByteArray
name|fromRawData
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|int
name|size
parameter_list|)
function_decl|;
specifier|static
name|QByteArray
name|fromBase64
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|base64
parameter_list|)
function_decl|;
specifier|static
name|QByteArray
name|fromHex
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|hexEncoded
parameter_list|)
function_decl|;
specifier|static
name|QByteArray
name|fromPercentEncoding
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|pctEncoded
parameter_list|,
name|char
name|percent
init|=
literal|'%'
parameter_list|)
function_decl|;
typedef|typedef
name|char
modifier|*
name|iterator
typedef|;
typedef|typedef
specifier|const
name|char
modifier|*
name|const_iterator
typedef|;
typedef|typedef
name|iterator
name|Iterator
typedef|;
typedef|typedef
name|const_iterator
name|ConstIterator
typedef|;
name|iterator
name|begin
parameter_list|()
function_decl|;
name|const_iterator
name|begin
argument_list|()
specifier|const
expr_stmt|;
name|const_iterator
name|cbegin
argument_list|()
specifier|const
expr_stmt|;
name|const_iterator
name|constBegin
argument_list|()
specifier|const
expr_stmt|;
name|iterator
name|end
parameter_list|()
function_decl|;
name|const_iterator
name|end
argument_list|()
specifier|const
expr_stmt|;
name|const_iterator
name|cend
argument_list|()
specifier|const
expr_stmt|;
name|const_iterator
name|constEnd
argument_list|()
specifier|const
expr_stmt|;
comment|// stl compatibility
typedef|typedef
specifier|const
name|char
modifier|&
name|const_reference
typedef|;
typedef|typedef
name|char
modifier|&
name|reference
typedef|;
typedef|typedef
name|char
name|value_type
typedef|;
name|void
name|push_back
parameter_list|(
name|char
name|c
parameter_list|)
function_decl|;
name|void
name|push_back
parameter_list|(
specifier|const
name|char
modifier|*
name|c
parameter_list|)
function_decl|;
name|void
name|push_back
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|a
parameter_list|)
function_decl|;
name|void
name|push_front
parameter_list|(
name|char
name|c
parameter_list|)
function_decl|;
name|void
name|push_front
parameter_list|(
specifier|const
name|char
modifier|*
name|c
parameter_list|)
function_decl|;
name|void
name|push_front
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|a
parameter_list|)
function_decl|;
specifier|inline
name|int
name|count
argument_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|size
return|;
block|}
name|int
name|length
argument_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|size
return|;
block|}
name|bool
name|isNull
argument_list|()
specifier|const
expr_stmt|;
name|Q_DECL_CONSTEXPR
specifier|inline
name|QByteArray
argument_list|(
argument|QByteArrayDataPtr dd
argument_list|)
operator|:
name|d
argument_list|(
argument|reinterpret_cast<Data *>(dd.ptr)
argument_list|)
block|{     }
name|private
operator|:
name|operator
name|QNoImplicitBoolCast
argument_list|()
specifier|const
expr_stmt|;
name|Data
modifier|*
name|d
decl_stmt|;
name|void
name|reallocData
argument_list|(
name|uint
name|alloc
argument_list|,
name|Data
operator|::
name|AllocationOptions
name|options
argument_list|)
decl_stmt|;
name|void
name|expand
parameter_list|(
name|int
name|i
parameter_list|)
function_decl|;
name|QByteArray
name|nulTerminated
argument_list|()
specifier|const
expr_stmt|;
name|friend
name|class
name|QByteRef
decl_stmt|;
name|friend
name|class
name|QString
decl_stmt|;
name|friend
name|Q_CORE_EXPORT
name|QByteArray
name|qUncompress
parameter_list|(
specifier|const
name|uchar
modifier|*
name|data
parameter_list|,
name|int
name|nbytes
parameter_list|)
function_decl|;
name|public
label|:
typedef|typedef
name|Data
modifier|*
name|DataPtr
typedef|;
specifier|inline
name|DataPtr
modifier|&
name|data_ptr
parameter_list|()
block|{
return|return
name|d
return|;
block|}
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_expr_stmt
DECL|function|QByteArray
specifier|inline
name|QByteArray
operator|::
name|QByteArray
argument_list|()
operator|:
name|d
argument_list|(
argument|Data::sharedNull()
argument_list|)
block|{ }
DECL|function|~QByteArray
specifier|inline
name|QByteArray
operator|::
operator|~
name|QByteArray
argument_list|()
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|ref
operator|.
name|deref
argument_list|()
condition|)
name|Data
operator|::
name|deallocate
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|size
specifier|inline
name|int
name|QByteArray
operator|::
name|size
argument_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|size
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|at
specifier|inline
name|char
name|QByteArray
operator|::
name|at
argument_list|(
argument|int i
argument_list|)
specifier|const
block|{
name|Q_ASSERT
argument_list|(
name|i
operator|>=
literal|0
operator|&&
name|i
operator|<
name|size
argument_list|()
argument_list|)
block|;
return|return
name|d
operator|->
name|data
argument_list|()
index|[
name|i
index|]
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|operator
specifier|inline
name|char
name|QByteArray
operator|::
name|operator
index|[]
operator|(
name|int
name|i
operator|)
specifier|const
block|{
name|Q_ASSERT
argument_list|(
name|i
operator|>=
literal|0
operator|&&
name|i
operator|<
name|size
argument_list|()
argument_list|)
block|;
return|return
name|d
operator|->
name|data
argument_list|()
index|[
name|i
index|]
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|operator
specifier|inline
name|char
name|QByteArray
operator|::
name|operator
index|[]
operator|(
name|uint
name|i
operator|)
specifier|const
block|{
name|Q_ASSERT
argument_list|(
name|i
operator|<
name|uint
argument_list|(
name|size
argument_list|()
argument_list|)
argument_list|)
block|;
return|return
name|d
operator|->
name|data
argument_list|()
index|[
name|i
index|]
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|isEmpty
specifier|inline
name|bool
name|QByteArray
operator|::
name|isEmpty
argument_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|size
operator|==
literal|0
return|;
block|}
end_expr_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CAST_FROM_BYTEARRAY
end_ifndef
begin_expr_stmt
specifier|inline
name|QByteArray
operator|::
name|operator
specifier|const
name|char
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
name|d
operator|->
name|data
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QByteArray
operator|::
name|operator
specifier|const
name|void
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
name|d
operator|->
name|data
argument_list|()
return|;
block|}
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
DECL|function|data
specifier|inline
name|char
operator|*
name|QByteArray
operator|::
name|data
argument_list|()
block|{
name|detach
argument_list|()
block|;
return|return
name|d
operator|->
name|data
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|data
specifier|inline
specifier|const
name|char
operator|*
name|QByteArray
operator|::
name|data
argument_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|data
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|constData
specifier|inline
specifier|const
name|char
operator|*
name|QByteArray
operator|::
name|constData
argument_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|data
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|detach
specifier|inline
name|void
name|QByteArray
operator|::
name|detach
argument_list|()
block|{
if|if
condition|(
name|d
operator|->
name|ref
operator|.
name|isShared
argument_list|()
operator|||
operator|(
name|d
operator|->
name|offset
operator|!=
sizeof|sizeof
argument_list|(
name|QByteArrayData
argument_list|)
operator|)
condition|)
name|reallocData
argument_list|(
name|uint
argument_list|(
name|d
operator|->
name|size
argument_list|)
operator|+
literal|1u
argument_list|,
name|d
operator|->
name|detachFlags
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|isDetached
specifier|inline
name|bool
name|QByteArray
operator|::
name|isDetached
argument_list|()
specifier|const
block|{
return|return
operator|!
name|d
operator|->
name|ref
operator|.
name|isShared
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|QByteArray
specifier|inline
name|QByteArray
operator|::
name|QByteArray
argument_list|(
specifier|const
name|QByteArray
operator|&
name|a
argument_list|)
operator|:
name|d
argument_list|(
argument|a.d
argument_list|)
block|{
name|d
operator|->
name|ref
operator|.
name|ref
argument_list|()
block|; }
DECL|function|capacity
specifier|inline
name|int
name|QByteArray
operator|::
name|capacity
argument_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|alloc
operator|?
name|d
operator|->
name|alloc
operator|-
literal|1
operator|:
literal|0
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|reserve
specifier|inline
name|void
name|QByteArray
operator|::
name|reserve
argument_list|(
argument|int asize
argument_list|)
block|{
if|if
condition|(
name|d
operator|->
name|ref
operator|.
name|isShared
argument_list|()
operator|||
name|uint
argument_list|(
name|asize
argument_list|)
operator|+
literal|1u
operator|>
name|d
operator|->
name|alloc
condition|)
block|{
name|reallocData
argument_list|(
name|uint
argument_list|(
name|asize
argument_list|)
operator|+
literal|1u
argument_list|,
name|d
operator|->
name|detachFlags
argument_list|()
operator||
name|Data
operator|::
name|CapacityReserved
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_else
else|else
block|{
comment|// cannot set unconditionally, since d could be the shared_null or
comment|// otherwise static
name|d
operator|->
name|capacityReserved
operator|=
name|true
expr_stmt|;
block|}
end_else
begin_expr_stmt
unit|}  inline
DECL|function|squeeze
name|void
name|QByteArray
operator|::
name|squeeze
argument_list|()
block|{
if|if
condition|(
name|d
operator|->
name|ref
operator|.
name|isShared
argument_list|()
operator|||
name|uint
argument_list|(
name|d
operator|->
name|size
argument_list|)
operator|+
literal|1u
operator|<
name|d
operator|->
name|alloc
condition|)
block|{
name|reallocData
argument_list|(
name|uint
argument_list|(
name|d
operator|->
name|size
argument_list|)
operator|+
literal|1u
argument_list|,
name|d
operator|->
name|detachFlags
argument_list|()
operator|&
operator|~
name|Data
operator|::
name|CapacityReserved
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_else
else|else
block|{
comment|// cannot set unconditionally, since d could be shared_null or
comment|// otherwise static.
name|d
operator|->
name|capacityReserved
operator|=
name|false
expr_stmt|;
block|}
end_else
begin_decl_stmt
unit|}  class
name|Q_CORE_EXPORT
name|QByteRef
block|{
name|QByteArray
modifier|&
name|a
decl_stmt|;
name|int
name|i
decl_stmt|;
specifier|inline
name|QByteRef
argument_list|(
argument|QByteArray&array
argument_list|,
argument|int idx
argument_list|)
operator|:
name|a
argument_list|(
name|array
argument_list|)
operator|,
name|i
argument_list|(
argument|idx
argument_list|)
block|{}
name|friend
name|class
name|QByteArray
expr_stmt|;
name|public
label|:
specifier|inline
name|operator
name|char
argument_list|()
specifier|const
block|{
return|return
name|i
operator|<
name|a
operator|.
name|d
operator|->
name|size
operator|?
name|a
operator|.
name|d
operator|->
name|data
argument_list|()
index|[
name|i
index|]
operator|:
name|char
argument_list|(
literal|0
argument_list|)
return|;
block|}
specifier|inline
name|QByteRef
modifier|&
name|operator
init|=
operator|(
name|char
name|c
operator|)
block|{
if|if
condition|(
name|i
operator|>=
name|a
operator|.
name|d
operator|->
name|size
condition|)
name|a
operator|.
name|expand
argument_list|(
name|i
argument_list|)
expr_stmt|;
else|else
name|a
operator|.
name|detach
argument_list|()
expr_stmt|;
name|a
operator|.
name|d
operator|->
name|data
argument_list|()
index|[
name|i
index|]
operator|=
name|c
decl_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_decl_stmt
begin_decl_stmt
specifier|inline
name|QByteRef
modifier|&
name|operator
init|=
operator|(
specifier|const
name|QByteRef
operator|&
name|c
operator|)
block|{
if|if
condition|(
name|i
operator|>=
name|a
operator|.
name|d
operator|->
name|size
condition|)
name|a
operator|.
name|expand
argument_list|(
name|i
argument_list|)
expr_stmt|;
else|else
name|a
operator|.
name|detach
argument_list|()
expr_stmt|;
name|a
operator|.
name|d
operator|->
name|data
argument_list|()
index|[
name|i
index|]
operator|=
name|c
operator|.
name|a
operator|.
name|d
operator|->
name|data
argument_list|()
index|[
name|c
operator|.
name|i
index|]
decl_stmt|;
end_decl_stmt
begin_return
return|return
operator|*
name|this
return|;
end_return
begin_expr_stmt
unit|}     inline
name|bool
name|operator
operator|==
operator|(
name|char
name|c
operator|)
specifier|const
block|{
return|return
name|a
operator|.
name|d
operator|->
name|data
argument_list|()
index|[
name|i
index|]
operator|==
name|c
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|!=
operator|(
name|char
name|c
operator|)
specifier|const
block|{
return|return
name|a
operator|.
name|d
operator|->
name|data
argument_list|()
index|[
name|i
index|]
operator|!=
name|c
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|>
operator|(
name|char
name|c
operator|)
specifier|const
block|{
return|return
name|a
operator|.
name|d
operator|->
name|data
argument_list|()
index|[
name|i
index|]
operator|>
name|c
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|>=
operator|(
name|char
name|c
operator|)
specifier|const
block|{
return|return
name|a
operator|.
name|d
operator|->
name|data
argument_list|()
index|[
name|i
index|]
operator|>=
name|c
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|<
operator|(
name|char
name|c
operator|)
specifier|const
block|{
return|return
name|a
operator|.
name|d
operator|->
name|data
argument_list|()
index|[
name|i
index|]
operator|<
name|c
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|<=
operator|(
name|char
name|c
operator|)
specifier|const
block|{
return|return
name|a
operator|.
name|d
operator|->
name|data
argument_list|()
index|[
name|i
index|]
operator|<=
name|c
return|;
block|}
end_expr_stmt
begin_expr_stmt
unit|};
DECL|function|operator
specifier|inline
name|QByteRef
name|QByteArray
operator|::
name|operator
index|[]
operator|(
name|int
name|i
operator|)
block|{
name|Q_ASSERT
argument_list|(
name|i
operator|>=
literal|0
argument_list|)
block|;
return|return
name|QByteRef
argument_list|(
operator|*
name|this
argument_list|,
name|i
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|operator
specifier|inline
name|QByteRef
name|QByteArray
operator|::
name|operator
index|[]
operator|(
name|uint
name|i
operator|)
block|{
return|return
name|QByteRef
argument_list|(
operator|*
name|this
argument_list|,
name|i
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|begin
specifier|inline
name|QByteArray
operator|::
name|iterator
name|QByteArray
operator|::
name|begin
argument_list|()
block|{
name|detach
argument_list|()
block|;
return|return
name|d
operator|->
name|data
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|begin
specifier|inline
name|QByteArray
operator|::
name|const_iterator
name|QByteArray
operator|::
name|begin
argument_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|data
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|cbegin
specifier|inline
name|QByteArray
operator|::
name|const_iterator
name|QByteArray
operator|::
name|cbegin
argument_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|data
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|constBegin
specifier|inline
name|QByteArray
operator|::
name|const_iterator
name|QByteArray
operator|::
name|constBegin
argument_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|data
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|end
specifier|inline
name|QByteArray
operator|::
name|iterator
name|QByteArray
operator|::
name|end
argument_list|()
block|{
name|detach
argument_list|()
block|;
return|return
name|d
operator|->
name|data
argument_list|()
operator|+
name|d
operator|->
name|size
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|end
specifier|inline
name|QByteArray
operator|::
name|const_iterator
name|QByteArray
operator|::
name|end
argument_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|data
argument_list|()
operator|+
name|d
operator|->
name|size
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|cend
specifier|inline
name|QByteArray
operator|::
name|const_iterator
name|QByteArray
operator|::
name|cend
argument_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|data
argument_list|()
operator|+
name|d
operator|->
name|size
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|constEnd
specifier|inline
name|QByteArray
operator|::
name|const_iterator
name|QByteArray
operator|::
name|constEnd
argument_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|data
argument_list|()
operator|+
name|d
operator|->
name|size
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|member|operator
specifier|inline
name|QByteArray
operator|&
name|QByteArray
operator|::
name|operator
operator|+=
operator|(
name|char
name|c
operator|)
block|{
return|return
name|append
argument_list|(
name|c
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QByteArray
operator|&
name|QByteArray
operator|::
name|operator
operator|+=
operator|(
specifier|const
name|char
operator|*
name|s
operator|)
block|{
return|return
name|append
argument_list|(
name|s
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QByteArray
operator|&
name|QByteArray
operator|::
name|operator
operator|+=
operator|(
specifier|const
name|QByteArray
operator|&
name|a
operator|)
block|{
return|return
name|append
argument_list|(
name|a
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|void
name|QByteArray
operator|::
name|push_back
argument_list|(
argument|char c
argument_list|)
block|{
name|append
argument_list|(
name|c
argument_list|)
block|; }
specifier|inline
name|void
name|QByteArray
operator|::
name|push_back
argument_list|(
argument|const char *c
argument_list|)
block|{
name|append
argument_list|(
name|c
argument_list|)
block|; }
specifier|inline
name|void
name|QByteArray
operator|::
name|push_back
argument_list|(
argument|const QByteArray&a
argument_list|)
block|{
name|append
argument_list|(
name|a
argument_list|)
block|; }
specifier|inline
name|void
name|QByteArray
operator|::
name|push_front
argument_list|(
argument|char c
argument_list|)
block|{
name|prepend
argument_list|(
name|c
argument_list|)
block|; }
specifier|inline
name|void
name|QByteArray
operator|::
name|push_front
argument_list|(
argument|const char *c
argument_list|)
block|{
name|prepend
argument_list|(
name|c
argument_list|)
block|; }
specifier|inline
name|void
name|QByteArray
operator|::
name|push_front
argument_list|(
argument|const QByteArray&a
argument_list|)
block|{
name|prepend
argument_list|(
name|a
argument_list|)
block|; }
specifier|inline
name|bool
name|QByteArray
operator|::
name|contains
argument_list|(
argument|const QByteArray&a
argument_list|)
specifier|const
block|{
return|return
name|indexOf
argument_list|(
name|a
argument_list|)
operator|!=
operator|-
literal|1
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|QByteArray
operator|::
name|contains
argument_list|(
argument|char c
argument_list|)
specifier|const
block|{
return|return
name|indexOf
argument_list|(
name|c
argument_list|)
operator|!=
operator|-
literal|1
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QByteArray
operator|&
name|a1
operator|,
specifier|const
name|QByteArray
operator|&
name|a2
operator|)
block|{
return|return
operator|(
name|a1
operator|.
name|size
argument_list|()
operator|==
name|a2
operator|.
name|size
argument_list|()
operator|)
operator|&&
operator|(
name|memcmp
argument_list|(
name|a1
operator|.
name|constData
argument_list|()
argument_list|,
name|a2
operator|.
name|constData
argument_list|()
argument_list|,
name|a1
operator|.
name|size
argument_list|()
argument_list|)
operator|==
literal|0
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QByteArray
operator|&
name|a1
operator|,
specifier|const
name|char
operator|*
name|a2
operator|)
block|{
return|return
name|a2
operator|?
name|qstrcmp
argument_list|(
name|a1
argument_list|,
name|a2
argument_list|)
operator|==
literal|0
operator|:
name|a1
operator|.
name|isEmpty
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|char
operator|*
name|a1
operator|,
specifier|const
name|QByteArray
operator|&
name|a2
operator|)
block|{
return|return
name|a1
operator|?
name|qstrcmp
argument_list|(
name|a1
argument_list|,
name|a2
argument_list|)
operator|==
literal|0
operator|:
name|a2
operator|.
name|isEmpty
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|QByteArray
operator|&
name|a1
operator|,
specifier|const
name|QByteArray
operator|&
name|a2
operator|)
block|{
return|return
operator|!
operator|(
name|a1
operator|==
name|a2
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|QByteArray
operator|&
name|a1
operator|,
specifier|const
name|char
operator|*
name|a2
operator|)
block|{
return|return
name|a2
operator|?
name|qstrcmp
argument_list|(
name|a1
argument_list|,
name|a2
argument_list|)
operator|!=
literal|0
operator|:
operator|!
name|a1
operator|.
name|isEmpty
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|char
operator|*
name|a1
operator|,
specifier|const
name|QByteArray
operator|&
name|a2
operator|)
block|{
return|return
name|a1
operator|?
name|qstrcmp
argument_list|(
name|a1
argument_list|,
name|a2
argument_list|)
operator|!=
literal|0
operator|:
operator|!
name|a2
operator|.
name|isEmpty
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|<
operator|(
specifier|const
name|QByteArray
operator|&
name|a1
operator|,
specifier|const
name|QByteArray
operator|&
name|a2
operator|)
block|{
return|return
name|qstrcmp
argument_list|(
name|a1
argument_list|,
name|a2
argument_list|)
operator|<
literal|0
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|<
operator|(
specifier|const
name|QByteArray
operator|&
name|a1
operator|,
specifier|const
name|char
operator|*
name|a2
operator|)
block|{
return|return
name|qstrcmp
argument_list|(
name|a1
argument_list|,
name|a2
argument_list|)
operator|<
literal|0
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|<
operator|(
specifier|const
name|char
operator|*
name|a1
operator|,
specifier|const
name|QByteArray
operator|&
name|a2
operator|)
block|{
return|return
name|qstrcmp
argument_list|(
name|a1
argument_list|,
name|a2
argument_list|)
operator|<
literal|0
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|<=
operator|(
specifier|const
name|QByteArray
operator|&
name|a1
operator|,
specifier|const
name|QByteArray
operator|&
name|a2
operator|)
block|{
return|return
name|qstrcmp
argument_list|(
name|a1
argument_list|,
name|a2
argument_list|)
operator|<=
literal|0
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|<=
operator|(
specifier|const
name|QByteArray
operator|&
name|a1
operator|,
specifier|const
name|char
operator|*
name|a2
operator|)
block|{
return|return
name|qstrcmp
argument_list|(
name|a1
argument_list|,
name|a2
argument_list|)
operator|<=
literal|0
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|<=
operator|(
specifier|const
name|char
operator|*
name|a1
operator|,
specifier|const
name|QByteArray
operator|&
name|a2
operator|)
block|{
return|return
name|qstrcmp
argument_list|(
name|a1
argument_list|,
name|a2
argument_list|)
operator|<=
literal|0
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|>
operator|(
specifier|const
name|QByteArray
operator|&
name|a1
operator|,
specifier|const
name|QByteArray
operator|&
name|a2
operator|)
block|{
return|return
name|qstrcmp
argument_list|(
name|a1
argument_list|,
name|a2
argument_list|)
operator|>
literal|0
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|>
operator|(
specifier|const
name|QByteArray
operator|&
name|a1
operator|,
specifier|const
name|char
operator|*
name|a2
operator|)
block|{
return|return
name|qstrcmp
argument_list|(
name|a1
argument_list|,
name|a2
argument_list|)
operator|>
literal|0
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|>
operator|(
specifier|const
name|char
operator|*
name|a1
operator|,
specifier|const
name|QByteArray
operator|&
name|a2
operator|)
block|{
return|return
name|qstrcmp
argument_list|(
name|a1
argument_list|,
name|a2
argument_list|)
operator|>
literal|0
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|>=
operator|(
specifier|const
name|QByteArray
operator|&
name|a1
operator|,
specifier|const
name|QByteArray
operator|&
name|a2
operator|)
block|{
return|return
name|qstrcmp
argument_list|(
name|a1
argument_list|,
name|a2
argument_list|)
operator|>=
literal|0
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|>=
operator|(
specifier|const
name|QByteArray
operator|&
name|a1
operator|,
specifier|const
name|char
operator|*
name|a2
operator|)
block|{
return|return
name|qstrcmp
argument_list|(
name|a1
argument_list|,
name|a2
argument_list|)
operator|>=
literal|0
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|>=
operator|(
specifier|const
name|char
operator|*
name|a1
operator|,
specifier|const
name|QByteArray
operator|&
name|a2
operator|)
block|{
return|return
name|qstrcmp
argument_list|(
name|a1
argument_list|,
name|a2
argument_list|)
operator|>=
literal|0
return|;
block|}
end_expr_stmt
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_USE_QSTRINGBUILDER
argument_list|)
end_if
begin_expr_stmt
specifier|inline
specifier|const
name|QByteArray
name|operator
operator|+
operator|(
specifier|const
name|QByteArray
operator|&
name|a1
operator|,
specifier|const
name|QByteArray
operator|&
name|a2
operator|)
block|{
return|return
name|QByteArray
argument_list|(
name|a1
argument_list|)
operator|+=
name|a2
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
specifier|const
name|QByteArray
name|operator
operator|+
operator|(
specifier|const
name|QByteArray
operator|&
name|a1
operator|,
specifier|const
name|char
operator|*
name|a2
operator|)
block|{
return|return
name|QByteArray
argument_list|(
name|a1
argument_list|)
operator|+=
name|a2
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
specifier|const
name|QByteArray
name|operator
operator|+
operator|(
specifier|const
name|QByteArray
operator|&
name|a1
operator|,
name|char
name|a2
operator|)
block|{
return|return
name|QByteArray
argument_list|(
name|a1
argument_list|)
operator|+=
name|a2
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
specifier|const
name|QByteArray
name|operator
operator|+
operator|(
specifier|const
name|char
operator|*
name|a1
operator|,
specifier|const
name|QByteArray
operator|&
name|a2
operator|)
block|{
return|return
name|QByteArray
argument_list|(
name|a1
argument_list|)
operator|+=
name|a2
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
specifier|const
name|QByteArray
name|operator
operator|+
operator|(
name|char
name|a1
operator|,
specifier|const
name|QByteArray
operator|&
name|a2
operator|)
block|{
return|return
name|QByteArray
argument_list|(
operator|&
name|a1
argument_list|,
literal|1
argument_list|)
operator|+=
name|a2
return|;
block|}
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_USE_QSTRINGBUILDER
end_comment
begin_expr_stmt
specifier|inline
name|bool
name|QByteArray
operator|::
name|contains
argument_list|(
argument|const char *c
argument_list|)
specifier|const
block|{
return|return
name|indexOf
argument_list|(
name|c
argument_list|)
operator|!=
operator|-
literal|1
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QByteArray
operator|&
name|QByteArray
operator|::
name|replace
argument_list|(
argument|char before
argument_list|,
argument|const char *c
argument_list|)
block|{
return|return
name|replace
argument_list|(
operator|&
name|before
argument_list|,
literal|1
argument_list|,
name|c
argument_list|,
name|qstrlen
argument_list|(
name|c
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QByteArray
operator|&
name|QByteArray
operator|::
name|replace
argument_list|(
argument|const QByteArray&before
argument_list|,
argument|const char *c
argument_list|)
block|{
return|return
name|replace
argument_list|(
name|before
operator|.
name|constData
argument_list|()
argument_list|,
name|before
operator|.
name|size
argument_list|()
argument_list|,
name|c
argument_list|,
name|qstrlen
argument_list|(
name|c
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QByteArray
operator|&
name|QByteArray
operator|::
name|replace
argument_list|(
argument|const char *before
argument_list|,
argument|const char *after
argument_list|)
block|{
return|return
name|replace
argument_list|(
name|before
argument_list|,
name|qstrlen
argument_list|(
name|before
argument_list|)
argument_list|,
name|after
argument_list|,
name|qstrlen
argument_list|(
name|after
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QByteArray
operator|&
name|QByteArray
operator|::
name|setNum
argument_list|(
argument|short n
argument_list|,
argument|int base
argument_list|)
block|{
return|return
name|setNum
argument_list|(
name|qlonglong
argument_list|(
name|n
argument_list|)
argument_list|,
name|base
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QByteArray
operator|&
name|QByteArray
operator|::
name|setNum
argument_list|(
argument|ushort n
argument_list|,
argument|int base
argument_list|)
block|{
return|return
name|setNum
argument_list|(
name|qulonglong
argument_list|(
name|n
argument_list|)
argument_list|,
name|base
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QByteArray
operator|&
name|QByteArray
operator|::
name|setNum
argument_list|(
argument|int n
argument_list|,
argument|int base
argument_list|)
block|{
return|return
name|setNum
argument_list|(
name|qlonglong
argument_list|(
name|n
argument_list|)
argument_list|,
name|base
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QByteArray
operator|&
name|QByteArray
operator|::
name|setNum
argument_list|(
argument|uint n
argument_list|,
argument|int base
argument_list|)
block|{
return|return
name|setNum
argument_list|(
name|qulonglong
argument_list|(
name|n
argument_list|)
argument_list|,
name|base
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QByteArray
operator|&
name|QByteArray
operator|::
name|setNum
argument_list|(
argument|float n
argument_list|,
argument|char f
argument_list|,
argument|int prec
argument_list|)
block|{
return|return
name|setNum
argument_list|(
name|double
argument_list|(
name|n
argument_list|)
argument_list|,
name|f
argument_list|,
name|prec
argument_list|)
return|;
block|}
end_expr_stmt
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_DATASTREAM
argument_list|)
operator|||
operator|(
name|defined
argument_list|(
name|QT_BOOTSTRAPPED
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_BUILD_QMAKE
argument_list|)
operator|)
end_if
begin_expr_stmt
name|Q_CORE_EXPORT
name|QDataStream
operator|&
name|operator
operator|<<
operator|(
name|QDataStream
operator|&
operator|,
specifier|const
name|QByteArray
operator|&
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_CORE_EXPORT
name|QDataStream
operator|&
name|operator
operator|>>
operator|(
name|QDataStream
operator|&
operator|,
name|QByteArray
operator|&
operator|)
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_COMPRESS
end_ifndef
begin_function_decl
name|Q_CORE_EXPORT
name|QByteArray
name|qCompress
parameter_list|(
specifier|const
name|uchar
modifier|*
name|data
parameter_list|,
name|int
name|nbytes
parameter_list|,
name|int
name|compressionLevel
init|=
operator|-
literal|1
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|Q_CORE_EXPORT
name|QByteArray
name|qUncompress
parameter_list|(
specifier|const
name|uchar
modifier|*
name|data
parameter_list|,
name|int
name|nbytes
parameter_list|)
function_decl|;
end_function_decl
begin_function
DECL|function|qCompress
specifier|inline
name|QByteArray
name|qCompress
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|data
parameter_list|,
name|int
name|compressionLevel
init|=
operator|-
literal|1
parameter_list|)
block|{
return|return
name|qCompress
argument_list|(
name|reinterpret_cast
operator|<
specifier|const
name|uchar
operator|*
operator|>
operator|(
name|data
operator|.
name|constData
argument_list|()
operator|)
argument_list|,
name|data
operator|.
name|size
argument_list|()
argument_list|,
name|compressionLevel
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qUncompress
specifier|inline
name|QByteArray
name|qUncompress
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|data
parameter_list|)
block|{
return|return
name|qUncompress
argument_list|(
name|reinterpret_cast
operator|<
specifier|const
name|uchar
operator|*
operator|>
operator|(
name|data
operator|.
name|constData
argument_list|()
operator|)
argument_list|,
name|data
operator|.
name|size
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
name|Q_DECLARE_TYPEINFO
argument_list|(
name|QByteArray
argument_list|,
name|Q_MOVABLE_TYPE
argument_list|)
expr_stmt|;
end_expr_stmt
begin_macro
name|Q_DECLARE_SHARED
argument_list|(
argument|QByteArray
argument_list|)
end_macro
begin_expr_stmt
name|QT_END_NAMESPACE
name|QT_END_HEADER
end_expr_stmt
begin_ifdef
ifdef|#
directive|ifdef
name|QT_USE_QSTRINGBUILDER
end_ifdef
begin_include
include|#
directive|include
file|<QtCore/qstring.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QBYTEARRAY_H
end_comment
end_unit
