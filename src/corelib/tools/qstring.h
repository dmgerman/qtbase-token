begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QSTRING_H
end_ifndef
begin_define
DECL|macro|QSTRING_H
define|#
directive|define
name|QSTRING_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qchar.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qbytearray.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qrefcount.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qnamespace.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_STL
end_ifndef
begin_include
include|#
directive|include
file|<string>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_STL
end_comment
begin_include
include|#
directive|include
file|<stdarg.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|truncate
end_ifdef
begin_error
error|#
directive|error
error|qstring.h must be included before any header file that defines truncate
end_error
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
DECL|variable|QCharRef
name|class
name|QCharRef
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QRegExp
name|class
name|QRegExp
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QRegularExpression
name|class
name|QRegularExpression
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QStringList
name|class
name|QStringList
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QTextCodec
name|class
name|QTextCodec
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QLatin1String
name|class
name|QLatin1String
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QStringRef
name|class
name|QStringRef
decl_stmt|;
end_decl_stmt
begin_expr_stmt
DECL|variable|QVector
name|template
operator|<
name|typename
name|T
operator|>
name|class
name|QVector
expr_stmt|;
end_expr_stmt
begin_struct
DECL|struct|QStringData
struct|struct
name|QStringData
block|{
DECL|member|ref
name|QtPrivate
operator|::
name|RefCount
name|ref
expr_stmt|;
DECL|member|size
name|int
name|size
decl_stmt|;
DECL|member|alloc
name|uint
name|alloc
range|:
literal|31
decl_stmt|;
DECL|member|capacityReserved
name|uint
name|capacityReserved
range|:
literal|1
decl_stmt|;
DECL|member|offset
name|qptrdiff
name|offset
decl_stmt|;
DECL|function|data
specifier|inline
name|ushort
modifier|*
name|data
parameter_list|()
block|{
return|return
name|reinterpret_cast
operator|<
name|ushort
operator|*
operator|>
operator|(
name|reinterpret_cast
operator|<
name|char
operator|*
operator|>
operator|(
name|this
operator|)
operator|+
name|offset
operator|)
return|;
block|}
DECL|function|data
specifier|inline
specifier|const
name|ushort
operator|*
name|data
argument_list|()
specifier|const
block|{
return|return
name|reinterpret_cast
operator|<
specifier|const
name|ushort
operator|*
operator|>
operator|(
name|reinterpret_cast
operator|<
specifier|const
name|char
operator|*
operator|>
operator|(
name|this
operator|)
operator|+
name|offset
operator|)
return|;
block|}
block|}
struct|;
end_struct
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_COMPILER_UNICODE_STRINGS
argument_list|)
end_if
begin_define
DECL|macro|QT_UNICODE_LITERAL_II
define|#
directive|define
name|QT_UNICODE_LITERAL_II
parameter_list|(
name|str
parameter_list|)
value|u"" str
end_define
begin_typedef
DECL|typedef|qunicodechar
typedef|typedef
name|char16_t
name|qunicodechar
typedef|;
end_typedef
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
expr|\
operator|||
operator|(
name|defined
argument_list|(
name|__SIZEOF_WCHAR_T__
argument_list|)
operator|&&
name|__SIZEOF_WCHAR_T__
operator|==
literal|2
operator|)
expr|\
operator|||
operator|(
operator|!
name|defined
argument_list|(
name|__SIZEOF_WCHAR_T__
argument_list|)
operator|&&
name|defined
argument_list|(
name|WCHAR_MAX
argument_list|)
operator|&&
operator|(
name|WCHAR_MAX
operator|-
literal|0
operator|<
literal|65536
operator|)
operator|)
end_elif
begin_comment
comment|// wchar_t is 2 bytes
end_comment
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_CC_MSVC
argument_list|)
end_if
begin_define
DECL|macro|QT_UNICODE_LITERAL_II
define|#
directive|define
name|QT_UNICODE_LITERAL_II
parameter_list|(
name|str
parameter_list|)
value|L##str
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|QT_UNICODE_LITERAL_II
define|#
directive|define
name|QT_UNICODE_LITERAL_II
parameter_list|(
name|str
parameter_list|)
value|L"" str
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_typedef
DECL|typedef|qunicodechar
typedef|typedef
name|wchar_t
name|qunicodechar
typedef|;
end_typedef
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|QT_NO_UNICODE_LITERAL
define|#
directive|define
name|QT_NO_UNICODE_LITERAL
end_define
begin_typedef
DECL|typedef|qunicodechar
typedef|typedef
name|ushort
name|qunicodechar
typedef|;
end_typedef
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
name|Q_STATIC_ASSERT_X
argument_list|(
sizeof|sizeof
argument_list|(
name|qunicodechar
argument_list|)
operator|==
literal|2
argument_list|,
literal|"qunicodechar must typedef an integral type of size 2"
argument_list|)
expr_stmt|;
end_expr_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_UNICODE_LITERAL
end_ifndef
begin_define
DECL|macro|QT_UNICODE_LITERAL
define|#
directive|define
name|QT_UNICODE_LITERAL
parameter_list|(
name|str
parameter_list|)
value|QT_UNICODE_LITERAL_II(str)
end_define
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_COMPILER_LAMBDA
argument_list|)
end_if
begin_define
DECL|macro|QStringLiteral
define|#
directive|define
name|QStringLiteral
parameter_list|(
name|str
parameter_list|)
define|\
value|([]() -> QStringDataPtr { \         enum { Size = sizeof(QT_UNICODE_LITERAL(str))/2 - 1 }; \         static const QStaticStringData<Size> qstring_literal = { \             Q_STATIC_STRING_DATA_HEADER_INITIALIZER(Size), \             QT_UNICODE_LITERAL(str) }; \         QStringDataPtr holder = { qstring_literal.data_ptr() }; \         return holder; \     }())
end_define
begin_comment
unit|\
comment|/**/
end_comment
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|Q_CC_GNU
argument_list|)
end_elif
begin_comment
comment|// We need to create a QStringData in the .rodata section of memory
end_comment
begin_comment
comment|// and the only way to do that is to create a "static const" variable.
end_comment
begin_comment
comment|// To do that, we need the __extension__ {( )} trick which only GCC supports
end_comment
begin_define
DECL|macro|QStringLiteral
define|#
directive|define
name|QStringLiteral
parameter_list|(
name|str
parameter_list|)
define|\
value|__extension__ ({ \         enum { Size = sizeof(QT_UNICODE_LITERAL(str))/2 - 1 }; \         static const QStaticStringData<Size> qstring_literal = { \             Q_STATIC_STRING_DATA_HEADER_INITIALIZER(Size), \             QT_UNICODE_LITERAL(str) }; \         QStringDataPtr holder = { qstring_literal.data_ptr() }; \         holder; \     })
end_define
begin_comment
unit|\
comment|/**/
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_UNICODE_LITERAL
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QStringLiteral
end_ifndef
begin_comment
comment|// no lambdas, not GCC, or GCC in C++98 mode with 4-byte wchar_t
end_comment
begin_comment
comment|// fallback, uses QLatin1String as next best options
end_comment
begin_define
DECL|macro|QStringLiteral
define|#
directive|define
name|QStringLiteral
parameter_list|(
name|str
parameter_list|)
value|QLatin1String(str)
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_define
DECL|macro|Q_STATIC_STRING_DATA_HEADER_INITIALIZER_WITH_OFFSET
define|#
directive|define
name|Q_STATIC_STRING_DATA_HEADER_INITIALIZER_WITH_OFFSET
parameter_list|(
name|size
parameter_list|,
name|offset
parameter_list|)
define|\
value|{ Q_REFCOUNT_INITIALIZE_STATIC, size, 0, 0, offset }
end_define
begin_comment
unit|\
comment|/**/
end_comment
begin_define
DECL|macro|Q_STATIC_STRING_DATA_HEADER_INITIALIZER
define|#
directive|define
name|Q_STATIC_STRING_DATA_HEADER_INITIALIZER
parameter_list|(
name|size
parameter_list|)
define|\
value|Q_STATIC_STRING_DATA_HEADER_INITIALIZER_WITH_OFFSET(size, sizeof(QStringData))
end_define
begin_comment
unit|\
comment|/**/
end_comment
begin_expr_stmt
name|template
operator|<
name|int
name|N
operator|>
expr|struct
DECL|struct|QStaticStringData
name|QStaticStringData
block|{
DECL|member|str
name|QStringData
name|str
block|;
DECL|member|data
name|qunicodechar
name|data
index|[
name|N
operator|+
literal|1
index|]
block|;
DECL|function|data_ptr
name|QStringData
operator|*
name|data_ptr
argument_list|()
specifier|const
block|{
name|Q_ASSERT
argument_list|(
name|str
operator|.
name|ref
operator|.
name|isStatic
argument_list|()
argument_list|)
block|;
return|return
name|const_cast
operator|<
name|QStringData
operator|*
operator|>
operator|(
operator|&
name|str
operator|)
return|;
block|}
end_expr_stmt
begin_struct
DECL|struct|QStringDataPtr
unit|};
struct|struct
name|QStringDataPtr
block|{
DECL|member|ptr
name|QStringData
modifier|*
name|ptr
decl_stmt|;
block|}
struct|;
end_struct
begin_decl_stmt
name|class
name|Q_CORE_EXPORT
name|QString
block|{
name|public
label|:
typedef|typedef
name|QStringData
name|Data
typedef|;
specifier|inline
name|QString
argument_list|()
expr_stmt|;
name|explicit
name|QString
parameter_list|(
specifier|const
name|QChar
modifier|*
name|unicode
parameter_list|,
name|int
name|size
init|=
operator|-
literal|1
parameter_list|)
function_decl|;
name|QString
argument_list|(
argument|QChar c
argument_list|)
empty_stmt|;
name|QString
argument_list|(
argument|int size
argument_list|,
argument|QChar c
argument_list|)
empty_stmt|;
specifier|inline
name|QString
argument_list|(
specifier|const
name|QLatin1String
operator|&
name|latin1
argument_list|)
expr_stmt|;
specifier|inline
name|QString
argument_list|(
specifier|const
name|QString
operator|&
argument_list|)
expr_stmt|;
specifier|inline
operator|~
name|QString
argument_list|()
expr_stmt|;
name|QString
modifier|&
name|operator
init|=
operator|(
name|QChar
name|c
operator|)
decl_stmt|;
name|QString
modifier|&
name|operator
init|=
operator|(
specifier|const
name|QString
operator|&
operator|)
decl_stmt|;
specifier|inline
name|QString
modifier|&
name|operator
init|=
operator|(
specifier|const
name|QLatin1String
operator|&
operator|)
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_COMPILER_RVALUE_REFS
specifier|inline
name|QString
modifier|&
name|operator
init|=
operator|(
name|QString
operator|&&
name|other
operator|)
block|{
name|qSwap
argument_list|(
name|d
argument_list|,
name|other
operator|.
name|d
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
endif|#
directive|endif
specifier|inline
name|void
name|swap
parameter_list|(
name|QString
modifier|&
name|other
parameter_list|)
block|{
name|qSwap
argument_list|(
name|d
argument_list|,
name|other
operator|.
name|d
argument_list|)
expr_stmt|;
block|}
specifier|inline
name|int
name|size
argument_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|size
return|;
block|}
specifier|inline
name|int
name|count
argument_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|size
return|;
block|}
specifier|inline
name|int
name|length
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
name|bool
name|isEmpty
argument_list|()
specifier|const
expr_stmt|;
name|void
name|resize
parameter_list|(
name|int
name|size
parameter_list|)
function_decl|;
name|QString
modifier|&
name|fill
parameter_list|(
name|QChar
name|c
parameter_list|,
name|int
name|size
init|=
operator|-
literal|1
parameter_list|)
function_decl|;
name|void
name|truncate
parameter_list|(
name|int
name|pos
parameter_list|)
function_decl|;
name|void
name|chop
parameter_list|(
name|int
name|n
parameter_list|)
function_decl|;
name|int
name|capacity
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
name|void
name|reserve
parameter_list|(
name|int
name|size
parameter_list|)
function_decl|;
specifier|inline
name|void
name|squeeze
parameter_list|()
function_decl|;
specifier|inline
specifier|const
name|QChar
operator|*
name|unicode
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
name|QChar
modifier|*
name|data
parameter_list|()
function_decl|;
specifier|inline
specifier|const
name|QChar
operator|*
name|data
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
specifier|const
name|QChar
operator|*
name|constData
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
name|void
name|detach
parameter_list|()
function_decl|;
specifier|inline
name|bool
name|isDetached
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
name|bool
name|isSharedWith
argument_list|(
specifier|const
name|QString
operator|&
name|other
argument_list|)
decl|const
block|{
return|return
name|d
operator|==
name|other
operator|.
name|d
return|;
block|}
name|void
name|clear
parameter_list|()
function_decl|;
specifier|inline
specifier|const
name|QChar
name|at
argument_list|(
name|int
name|i
argument_list|)
decl|const
decl_stmt|;
specifier|const
name|QChar
name|operator
index|[]
argument_list|(
name|int
name|i
argument_list|)
decl|const
decl_stmt|;
name|QCharRef
name|operator
function_decl|[]
parameter_list|(
name|int
name|i
parameter_list|)
function_decl|;
specifier|const
name|QChar
name|operator
index|[]
argument_list|(
name|uint
name|i
argument_list|)
decl|const
decl_stmt|;
name|QCharRef
name|operator
function_decl|[]
parameter_list|(
name|uint
name|i
parameter_list|)
function_decl|;
name|QString
name|arg
argument_list|(
name|qlonglong
name|a
argument_list|,
name|int
name|fieldwidth
operator|=
literal|0
argument_list|,
name|int
name|base
operator|=
literal|10
argument_list|,
name|QChar
name|fillChar
operator|=
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
argument_list|)
decl|const
name|Q_REQUIRED_RESULT
decl_stmt|;
name|QString
name|arg
argument_list|(
name|qulonglong
name|a
argument_list|,
name|int
name|fieldwidth
operator|=
literal|0
argument_list|,
name|int
name|base
operator|=
literal|10
argument_list|,
name|QChar
name|fillChar
operator|=
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
argument_list|)
decl|const
name|Q_REQUIRED_RESULT
decl_stmt|;
name|QString
name|arg
argument_list|(
name|long
name|a
argument_list|,
name|int
name|fieldwidth
operator|=
literal|0
argument_list|,
name|int
name|base
operator|=
literal|10
argument_list|,
name|QChar
name|fillChar
operator|=
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
argument_list|)
decl|const
name|Q_REQUIRED_RESULT
decl_stmt|;
name|QString
name|arg
argument_list|(
name|ulong
name|a
argument_list|,
name|int
name|fieldwidth
operator|=
literal|0
argument_list|,
name|int
name|base
operator|=
literal|10
argument_list|,
name|QChar
name|fillChar
operator|=
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
argument_list|)
decl|const
name|Q_REQUIRED_RESULT
decl_stmt|;
name|QString
name|arg
argument_list|(
name|int
name|a
argument_list|,
name|int
name|fieldWidth
operator|=
literal|0
argument_list|,
name|int
name|base
operator|=
literal|10
argument_list|,
name|QChar
name|fillChar
operator|=
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
argument_list|)
decl|const
name|Q_REQUIRED_RESULT
decl_stmt|;
name|QString
name|arg
argument_list|(
name|uint
name|a
argument_list|,
name|int
name|fieldWidth
operator|=
literal|0
argument_list|,
name|int
name|base
operator|=
literal|10
argument_list|,
name|QChar
name|fillChar
operator|=
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
argument_list|)
decl|const
name|Q_REQUIRED_RESULT
decl_stmt|;
name|QString
name|arg
argument_list|(
name|short
name|a
argument_list|,
name|int
name|fieldWidth
operator|=
literal|0
argument_list|,
name|int
name|base
operator|=
literal|10
argument_list|,
name|QChar
name|fillChar
operator|=
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
argument_list|)
decl|const
name|Q_REQUIRED_RESULT
decl_stmt|;
name|QString
name|arg
argument_list|(
name|ushort
name|a
argument_list|,
name|int
name|fieldWidth
operator|=
literal|0
argument_list|,
name|int
name|base
operator|=
literal|10
argument_list|,
name|QChar
name|fillChar
operator|=
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
argument_list|)
decl|const
name|Q_REQUIRED_RESULT
decl_stmt|;
name|QString
name|arg
argument_list|(
name|double
name|a
argument_list|,
name|int
name|fieldWidth
operator|=
literal|0
argument_list|,
name|char
name|fmt
operator|=
literal|'g'
argument_list|,
name|int
name|prec
operator|=
operator|-
literal|1
argument_list|,
name|QChar
name|fillChar
operator|=
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
argument_list|)
decl|const
name|Q_REQUIRED_RESULT
decl_stmt|;
name|QString
name|arg
argument_list|(
name|char
name|a
argument_list|,
name|int
name|fieldWidth
operator|=
literal|0
argument_list|,
name|QChar
name|fillChar
operator|=
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
argument_list|)
decl|const
name|Q_REQUIRED_RESULT
decl_stmt|;
name|QString
name|arg
argument_list|(
name|QChar
name|a
argument_list|,
name|int
name|fieldWidth
operator|=
literal|0
argument_list|,
name|QChar
name|fillChar
operator|=
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
argument_list|)
decl|const
name|Q_REQUIRED_RESULT
decl_stmt|;
name|QString
name|arg
argument_list|(
specifier|const
name|QString
operator|&
name|a
argument_list|,
name|int
name|fieldWidth
operator|=
literal|0
argument_list|,
name|QChar
name|fillChar
operator|=
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
argument_list|)
decl|const
name|Q_REQUIRED_RESULT
decl_stmt|;
name|QString
name|arg
argument_list|(
specifier|const
name|QString
operator|&
name|a1
argument_list|,
specifier|const
name|QString
operator|&
name|a2
argument_list|)
decl|const
name|Q_REQUIRED_RESULT
decl_stmt|;
name|QString
name|arg
argument_list|(
specifier|const
name|QString
operator|&
name|a1
argument_list|,
specifier|const
name|QString
operator|&
name|a2
argument_list|,
specifier|const
name|QString
operator|&
name|a3
argument_list|)
decl|const
name|Q_REQUIRED_RESULT
decl_stmt|;
name|QString
name|arg
argument_list|(
specifier|const
name|QString
operator|&
name|a1
argument_list|,
specifier|const
name|QString
operator|&
name|a2
argument_list|,
specifier|const
name|QString
operator|&
name|a3
argument_list|,
specifier|const
name|QString
operator|&
name|a4
argument_list|)
decl|const
name|Q_REQUIRED_RESULT
decl_stmt|;
name|QString
name|arg
argument_list|(
specifier|const
name|QString
operator|&
name|a1
argument_list|,
specifier|const
name|QString
operator|&
name|a2
argument_list|,
specifier|const
name|QString
operator|&
name|a3
argument_list|,
specifier|const
name|QString
operator|&
name|a4
argument_list|,
specifier|const
name|QString
operator|&
name|a5
argument_list|)
decl|const
name|Q_REQUIRED_RESULT
decl_stmt|;
name|QString
name|arg
argument_list|(
specifier|const
name|QString
operator|&
name|a1
argument_list|,
specifier|const
name|QString
operator|&
name|a2
argument_list|,
specifier|const
name|QString
operator|&
name|a3
argument_list|,
specifier|const
name|QString
operator|&
name|a4
argument_list|,
specifier|const
name|QString
operator|&
name|a5
argument_list|,
specifier|const
name|QString
operator|&
name|a6
argument_list|)
decl|const
name|Q_REQUIRED_RESULT
decl_stmt|;
name|QString
name|arg
argument_list|(
specifier|const
name|QString
operator|&
name|a1
argument_list|,
specifier|const
name|QString
operator|&
name|a2
argument_list|,
specifier|const
name|QString
operator|&
name|a3
argument_list|,
specifier|const
name|QString
operator|&
name|a4
argument_list|,
specifier|const
name|QString
operator|&
name|a5
argument_list|,
specifier|const
name|QString
operator|&
name|a6
argument_list|,
specifier|const
name|QString
operator|&
name|a7
argument_list|)
decl|const
name|Q_REQUIRED_RESULT
decl_stmt|;
name|QString
name|arg
argument_list|(
specifier|const
name|QString
operator|&
name|a1
argument_list|,
specifier|const
name|QString
operator|&
name|a2
argument_list|,
specifier|const
name|QString
operator|&
name|a3
argument_list|,
specifier|const
name|QString
operator|&
name|a4
argument_list|,
specifier|const
name|QString
operator|&
name|a5
argument_list|,
specifier|const
name|QString
operator|&
name|a6
argument_list|,
specifier|const
name|QString
operator|&
name|a7
argument_list|,
specifier|const
name|QString
operator|&
name|a8
argument_list|)
decl|const
name|Q_REQUIRED_RESULT
decl_stmt|;
name|QString
name|arg
argument_list|(
specifier|const
name|QString
operator|&
name|a1
argument_list|,
specifier|const
name|QString
operator|&
name|a2
argument_list|,
specifier|const
name|QString
operator|&
name|a3
argument_list|,
specifier|const
name|QString
operator|&
name|a4
argument_list|,
specifier|const
name|QString
operator|&
name|a5
argument_list|,
specifier|const
name|QString
operator|&
name|a6
argument_list|,
specifier|const
name|QString
operator|&
name|a7
argument_list|,
specifier|const
name|QString
operator|&
name|a8
argument_list|,
specifier|const
name|QString
operator|&
name|a9
argument_list|)
decl|const
name|Q_REQUIRED_RESULT
decl_stmt|;
name|QString
modifier|&
name|vsprintf
parameter_list|(
specifier|const
name|char
modifier|*
name|format
parameter_list|,
name|va_list
name|ap
parameter_list|)
if|#
directive|if
name|defined
argument_list|(
name|Q_CC_GNU
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__INSURE__
argument_list|)
function_decl|__attribute__
parameter_list|(
function_decl|(format
parameter_list|(
name|printf
parameter_list|,
function_decl|2
operator|,
function_decl|0
block|)
decl_stmt|)
end_decl_stmt
begin_endif
unit|)
endif|#
directive|endif
end_endif
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_function_decl
name|QString
modifier|&
name|sprintf
parameter_list|(
specifier|const
name|char
modifier|*
name|format
parameter_list|,
modifier|...
parameter_list|)
if|#
directive|if
name|defined
argument_list|(
name|Q_CC_GNU
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__INSURE__
argument_list|)
function_decl|__attribute__
parameter_list|(
function_decl|(format
parameter_list|(
name|printf
parameter_list|,
function_decl|2
operator|,
function_decl|3
end_function_decl
begin_endif
unit|)))
endif|#
directive|endif
end_endif
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
name|int
name|indexOf
argument_list|(
name|QChar
name|c
argument_list|,
name|int
name|from
operator|=
literal|0
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|int
name|indexOf
argument_list|(
specifier|const
name|QString
operator|&
name|s
argument_list|,
name|int
name|from
operator|=
literal|0
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|int
name|indexOf
argument_list|(
specifier|const
name|QLatin1String
operator|&
name|s
argument_list|,
name|int
name|from
operator|=
literal|0
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|int
name|indexOf
argument_list|(
specifier|const
name|QStringRef
operator|&
name|s
argument_list|,
name|int
name|from
operator|=
literal|0
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|int
name|lastIndexOf
argument_list|(
name|QChar
name|c
argument_list|,
name|int
name|from
operator|=
operator|-
literal|1
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|int
name|lastIndexOf
argument_list|(
specifier|const
name|QString
operator|&
name|s
argument_list|,
name|int
name|from
operator|=
operator|-
literal|1
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|int
name|lastIndexOf
argument_list|(
specifier|const
name|QLatin1String
operator|&
name|s
argument_list|,
name|int
name|from
operator|=
operator|-
literal|1
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|int
name|lastIndexOf
argument_list|(
specifier|const
name|QStringRef
operator|&
name|s
argument_list|,
name|int
name|from
operator|=
operator|-
literal|1
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|inline
name|bool
name|contains
argument_list|(
name|QChar
name|c
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|inline
name|bool
name|contains
argument_list|(
specifier|const
name|QString
operator|&
name|s
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|inline
name|bool
name|contains
argument_list|(
specifier|const
name|QStringRef
operator|&
name|s
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|int
name|count
argument_list|(
name|QChar
name|c
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|int
name|count
argument_list|(
specifier|const
name|QString
operator|&
name|s
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|int
name|count
argument_list|(
specifier|const
name|QStringRef
operator|&
name|s
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_REGEXP
end_ifndef
begin_decl_stmt
name|int
name|indexOf
argument_list|(
specifier|const
name|QRegExp
operator|&
argument_list|,
name|int
name|from
operator|=
literal|0
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|int
name|lastIndexOf
argument_list|(
specifier|const
name|QRegExp
operator|&
argument_list|,
name|int
name|from
operator|=
operator|-
literal|1
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|inline
name|bool
name|contains
argument_list|(
specifier|const
name|QRegExp
operator|&
name|rx
argument_list|)
decl|const
block|{
return|return
name|indexOf
argument_list|(
name|rx
argument_list|)
operator|!=
operator|-
literal|1
return|;
block|}
end_decl_stmt
begin_decl_stmt
name|int
name|count
argument_list|(
specifier|const
name|QRegExp
operator|&
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|int
name|indexOf
argument_list|(
name|QRegExp
operator|&
argument_list|,
name|int
name|from
operator|=
literal|0
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|int
name|lastIndexOf
argument_list|(
name|QRegExp
operator|&
argument_list|,
name|int
name|from
operator|=
operator|-
literal|1
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|inline
name|bool
name|contains
argument_list|(
name|QRegExp
operator|&
name|rx
argument_list|)
decl|const
block|{
return|return
name|indexOf
argument_list|(
name|rx
argument_list|)
operator|!=
operator|-
literal|1
return|;
block|}
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_REGEXP
end_ifndef
begin_decl_stmt
name|int
name|indexOf
argument_list|(
specifier|const
name|QRegularExpression
operator|&
name|re
argument_list|,
name|int
name|from
operator|=
literal|0
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|int
name|lastIndexOf
argument_list|(
specifier|const
name|QRegularExpression
operator|&
name|re
argument_list|,
name|int
name|from
operator|=
operator|-
literal|1
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|bool
name|contains
argument_list|(
specifier|const
name|QRegularExpression
operator|&
name|re
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|int
name|count
argument_list|(
specifier|const
name|QRegularExpression
operator|&
name|re
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_enum
enum|enum
name|SectionFlag
block|{
name|SectionDefault
init|=
literal|0x00
block|,
name|SectionSkipEmpty
init|=
literal|0x01
block|,
name|SectionIncludeLeadingSep
init|=
literal|0x02
block|,
name|SectionIncludeTrailingSep
init|=
literal|0x04
block|,
name|SectionCaseInsensitiveSeps
init|=
literal|0x08
block|}
enum|;
end_enum
begin_macro
name|Q_DECLARE_FLAGS
argument_list|(
argument|SectionFlags
argument_list|,
argument|SectionFlag
argument_list|)
end_macro
begin_decl_stmt
name|QString
name|section
argument_list|(
name|QChar
name|sep
argument_list|,
name|int
name|start
argument_list|,
name|int
name|end
operator|=
operator|-
literal|1
argument_list|,
name|SectionFlags
name|flags
operator|=
name|SectionDefault
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QString
name|section
argument_list|(
specifier|const
name|QString
operator|&
name|in_sep
argument_list|,
name|int
name|start
argument_list|,
name|int
name|end
operator|=
operator|-
literal|1
argument_list|,
name|SectionFlags
name|flags
operator|=
name|SectionDefault
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_REGEXP
end_ifndef
begin_decl_stmt
name|QString
name|section
argument_list|(
specifier|const
name|QRegExp
operator|&
name|reg
argument_list|,
name|int
name|start
argument_list|,
name|int
name|end
operator|=
operator|-
literal|1
argument_list|,
name|SectionFlags
name|flags
operator|=
name|SectionDefault
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_REGEXP
end_ifndef
begin_decl_stmt
name|QString
name|section
argument_list|(
specifier|const
name|QRegularExpression
operator|&
name|re
argument_list|,
name|int
name|start
argument_list|,
name|int
name|end
operator|=
operator|-
literal|1
argument_list|,
name|SectionFlags
name|flags
operator|=
name|SectionDefault
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|QString
name|left
argument_list|(
name|int
name|n
argument_list|)
decl|const
name|Q_REQUIRED_RESULT
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QString
name|right
argument_list|(
name|int
name|n
argument_list|)
decl|const
name|Q_REQUIRED_RESULT
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QString
name|mid
argument_list|(
name|int
name|position
argument_list|,
name|int
name|n
operator|=
operator|-
literal|1
argument_list|)
decl|const
name|Q_REQUIRED_RESULT
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QStringRef
name|leftRef
argument_list|(
name|int
name|n
argument_list|)
decl|const
name|Q_REQUIRED_RESULT
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QStringRef
name|rightRef
argument_list|(
name|int
name|n
argument_list|)
decl|const
name|Q_REQUIRED_RESULT
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QStringRef
name|midRef
argument_list|(
name|int
name|position
argument_list|,
name|int
name|n
operator|=
operator|-
literal|1
argument_list|)
decl|const
name|Q_REQUIRED_RESULT
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|bool
name|startsWith
argument_list|(
specifier|const
name|QString
operator|&
name|s
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|bool
name|startsWith
argument_list|(
specifier|const
name|QStringRef
operator|&
name|s
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|bool
name|startsWith
argument_list|(
specifier|const
name|QLatin1String
operator|&
name|s
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|bool
name|startsWith
argument_list|(
name|QChar
name|c
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|bool
name|endsWith
argument_list|(
specifier|const
name|QString
operator|&
name|s
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|bool
name|endsWith
argument_list|(
specifier|const
name|QStringRef
operator|&
name|s
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|bool
name|endsWith
argument_list|(
specifier|const
name|QLatin1String
operator|&
name|s
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|bool
name|endsWith
argument_list|(
name|QChar
name|c
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QString
name|leftJustified
argument_list|(
name|int
name|width
argument_list|,
name|QChar
name|fill
operator|=
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
argument_list|,
name|bool
name|trunc
operator|=
name|false
argument_list|)
decl|const
name|Q_REQUIRED_RESULT
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QString
name|rightJustified
argument_list|(
name|int
name|width
argument_list|,
name|QChar
name|fill
operator|=
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
argument_list|,
name|bool
name|trunc
operator|=
name|false
argument_list|)
decl|const
name|Q_REQUIRED_RESULT
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|QString
name|toLower
argument_list|()
specifier|const
name|Q_REQUIRED_RESULT
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QString
name|toUpper
argument_list|()
specifier|const
name|Q_REQUIRED_RESULT
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QString
name|toCaseFolded
argument_list|()
specifier|const
name|Q_REQUIRED_RESULT
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QString
name|trimmed
argument_list|()
specifier|const
name|Q_REQUIRED_RESULT
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QString
name|simplified
argument_list|()
specifier|const
name|Q_REQUIRED_RESULT
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QString
name|toHtmlEscaped
argument_list|()
specifier|const
name|Q_REQUIRED_RESULT
expr_stmt|;
end_expr_stmt
begin_function_decl
name|QString
modifier|&
name|insert
parameter_list|(
name|int
name|i
parameter_list|,
name|QChar
name|c
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|QString
modifier|&
name|insert
parameter_list|(
name|int
name|i
parameter_list|,
specifier|const
name|QChar
modifier|*
name|uc
parameter_list|,
name|int
name|len
parameter_list|)
function_decl|;
end_function_decl
begin_function
specifier|inline
name|QString
modifier|&
name|insert
parameter_list|(
name|int
name|i
parameter_list|,
specifier|const
name|QString
modifier|&
name|s
parameter_list|)
block|{
return|return
name|insert
argument_list|(
name|i
argument_list|,
name|s
operator|.
name|constData
argument_list|()
argument_list|,
name|s
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function_decl
name|QString
modifier|&
name|insert
parameter_list|(
name|int
name|i
parameter_list|,
specifier|const
name|QLatin1String
modifier|&
name|s
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|QString
modifier|&
name|append
parameter_list|(
name|QChar
name|c
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|QString
modifier|&
name|append
parameter_list|(
specifier|const
name|QString
modifier|&
name|s
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|QString
modifier|&
name|append
parameter_list|(
specifier|const
name|QStringRef
modifier|&
name|s
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|QString
modifier|&
name|append
parameter_list|(
specifier|const
name|QLatin1String
modifier|&
name|s
parameter_list|)
function_decl|;
end_function_decl
begin_function
specifier|inline
name|QString
modifier|&
name|prepend
parameter_list|(
name|QChar
name|c
parameter_list|)
block|{
return|return
name|insert
argument_list|(
literal|0
argument_list|,
name|c
argument_list|)
return|;
block|}
end_function
begin_function
specifier|inline
name|QString
modifier|&
name|prepend
parameter_list|(
specifier|const
name|QString
modifier|&
name|s
parameter_list|)
block|{
return|return
name|insert
argument_list|(
literal|0
argument_list|,
name|s
argument_list|)
return|;
block|}
end_function
begin_function
specifier|inline
name|QString
modifier|&
name|prepend
parameter_list|(
specifier|const
name|QLatin1String
modifier|&
name|s
parameter_list|)
block|{
return|return
name|insert
argument_list|(
literal|0
argument_list|,
name|s
argument_list|)
return|;
block|}
end_function
begin_expr_stmt
specifier|inline
name|QString
operator|&
name|operator
operator|+=
operator|(
name|QChar
name|c
operator|)
block|{
if|if
condition|(
name|d
operator|->
name|ref
operator|.
name|isShared
argument_list|()
operator|||
name|d
operator|->
name|size
operator|+
literal|1
operator|>
name|int
argument_list|(
name|d
operator|->
name|alloc
argument_list|)
condition|)
name|realloc
argument_list|(
name|d
operator|->
name|size
operator|+
literal|1
argument_list|,
name|true
argument_list|)
expr_stmt|;
name|d
operator|->
name|data
argument_list|()
index|[
name|d
operator|->
name|size
operator|++
index|]
operator|=
name|c
operator|.
name|unicode
argument_list|()
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|d
operator|->
name|data
argument_list|()
index|[
name|d
operator|->
name|size
index|]
operator|=
literal|'\0'
expr_stmt|;
end_expr_stmt
begin_return
return|return
operator|*
name|this
return|;
end_return
begin_expr_stmt
unit|}      inline
name|QString
operator|&
name|operator
operator|+=
operator|(
name|QChar
operator|::
name|SpecialCharacter
name|c
operator|)
block|{
return|return
name|append
argument_list|(
name|QChar
argument_list|(
name|c
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QString
operator|&
name|operator
operator|+=
operator|(
specifier|const
name|QString
operator|&
name|s
operator|)
block|{
return|return
name|append
argument_list|(
name|s
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QString
operator|&
name|operator
operator|+=
operator|(
specifier|const
name|QStringRef
operator|&
name|s
operator|)
block|{
return|return
name|append
argument_list|(
name|s
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QString
operator|&
name|operator
operator|+=
operator|(
specifier|const
name|QLatin1String
operator|&
name|s
operator|)
block|{
return|return
name|append
argument_list|(
name|s
argument_list|)
return|;
block|}
end_expr_stmt
begin_function_decl
name|QString
modifier|&
name|remove
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|len
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
name|QString
modifier|&
name|remove
argument_list|(
name|QChar
name|c
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QString
modifier|&
name|remove
argument_list|(
specifier|const
name|QString
operator|&
name|s
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl_stmt|;
end_decl_stmt
begin_function_decl
name|QString
modifier|&
name|replace
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|len
parameter_list|,
name|QChar
name|after
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|QString
modifier|&
name|replace
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|len
parameter_list|,
specifier|const
name|QChar
modifier|*
name|s
parameter_list|,
name|int
name|slen
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|QString
modifier|&
name|replace
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|len
parameter_list|,
specifier|const
name|QString
modifier|&
name|after
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
name|QString
modifier|&
name|replace
argument_list|(
name|QChar
name|before
argument_list|,
name|QChar
name|after
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QString
modifier|&
name|replace
argument_list|(
specifier|const
name|QChar
operator|*
name|before
argument_list|,
name|int
name|blen
argument_list|,
specifier|const
name|QChar
operator|*
name|after
argument_list|,
name|int
name|alen
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QString
modifier|&
name|replace
argument_list|(
specifier|const
name|QLatin1String
operator|&
name|before
argument_list|,
specifier|const
name|QLatin1String
operator|&
name|after
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QString
modifier|&
name|replace
argument_list|(
specifier|const
name|QLatin1String
operator|&
name|before
argument_list|,
specifier|const
name|QString
operator|&
name|after
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QString
modifier|&
name|replace
argument_list|(
specifier|const
name|QString
operator|&
name|before
argument_list|,
specifier|const
name|QLatin1String
operator|&
name|after
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QString
modifier|&
name|replace
argument_list|(
specifier|const
name|QString
operator|&
name|before
argument_list|,
specifier|const
name|QString
operator|&
name|after
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QString
modifier|&
name|replace
argument_list|(
name|QChar
name|c
argument_list|,
specifier|const
name|QString
operator|&
name|after
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QString
modifier|&
name|replace
argument_list|(
name|QChar
name|c
argument_list|,
specifier|const
name|QLatin1String
operator|&
name|after
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl_stmt|;
end_decl_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_REGEXP
end_ifndef
begin_function_decl
name|QString
modifier|&
name|replace
parameter_list|(
specifier|const
name|QRegExp
modifier|&
name|rx
parameter_list|,
specifier|const
name|QString
modifier|&
name|after
parameter_list|)
function_decl|;
end_function_decl
begin_function
specifier|inline
name|QString
modifier|&
name|remove
parameter_list|(
specifier|const
name|QRegExp
modifier|&
name|rx
parameter_list|)
block|{
return|return
name|replace
argument_list|(
name|rx
argument_list|,
name|QString
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_REGEXP
end_ifndef
begin_function_decl
name|QString
modifier|&
name|replace
parameter_list|(
specifier|const
name|QRegularExpression
modifier|&
name|re
parameter_list|,
specifier|const
name|QString
modifier|&
name|after
parameter_list|)
function_decl|;
end_function_decl
begin_function
specifier|inline
name|QString
modifier|&
name|remove
parameter_list|(
specifier|const
name|QRegularExpression
modifier|&
name|re
parameter_list|)
block|{
return|return
name|replace
argument_list|(
name|re
argument_list|,
name|QString
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_enum
enum|enum
name|SplitBehavior
block|{
name|KeepEmptyParts
block|,
name|SkipEmptyParts
block|}
enum|;
end_enum
begin_decl_stmt
name|QStringList
name|split
argument_list|(
specifier|const
name|QString
operator|&
name|sep
argument_list|,
name|SplitBehavior
name|behavior
operator|=
name|KeepEmptyParts
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
name|Q_REQUIRED_RESULT
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QStringList
name|split
argument_list|(
name|QChar
name|sep
argument_list|,
name|SplitBehavior
name|behavior
operator|=
name|KeepEmptyParts
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
name|Q_REQUIRED_RESULT
decl_stmt|;
end_decl_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_REGEXP
end_ifndef
begin_decl_stmt
name|QStringList
name|split
argument_list|(
specifier|const
name|QRegExp
operator|&
name|sep
argument_list|,
name|SplitBehavior
name|behavior
operator|=
name|KeepEmptyParts
argument_list|)
decl|const
name|Q_REQUIRED_RESULT
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_REGEXP
end_ifndef
begin_decl_stmt
name|QStringList
name|split
argument_list|(
specifier|const
name|QRegularExpression
operator|&
name|sep
argument_list|,
name|SplitBehavior
name|behavior
operator|=
name|KeepEmptyParts
argument_list|)
decl|const
name|Q_REQUIRED_RESULT
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_enum
enum|enum
name|NormalizationForm
block|{
name|NormalizationForm_D
block|,
name|NormalizationForm_C
block|,
name|NormalizationForm_KD
block|,
name|NormalizationForm_KC
block|}
enum|;
end_enum
begin_decl_stmt
name|QString
name|normalized
argument_list|(
name|NormalizationForm
name|mode
argument_list|)
decl|const
name|Q_REQUIRED_RESULT
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QString
name|normalized
argument_list|(
name|NormalizationForm
name|mode
argument_list|,
name|QChar
operator|::
name|UnicodeVersion
name|version
argument_list|)
decl|const
name|Q_REQUIRED_RESULT
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QString
name|repeated
argument_list|(
name|int
name|times
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_expr_stmt
specifier|const
name|ushort
operator|*
name|utf16
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QByteArray
name|toAscii
argument_list|()
specifier|const
name|Q_REQUIRED_RESULT
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QByteArray
name|toLatin1
argument_list|()
specifier|const
name|Q_REQUIRED_RESULT
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QByteArray
name|toUtf8
argument_list|()
specifier|const
name|Q_REQUIRED_RESULT
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QByteArray
name|toLocal8Bit
argument_list|()
specifier|const
name|Q_REQUIRED_RESULT
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QVector
operator|<
name|uint
operator|>
name|toUcs4
argument_list|()
specifier|const
name|Q_REQUIRED_RESULT
expr_stmt|;
end_expr_stmt
begin_comment
comment|// note - this are all inline so we can benefit from strlen() compile time optimizations
end_comment
begin_function
specifier|static
specifier|inline
name|QString
name|fromAscii
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|,
name|int
name|size
init|=
operator|-
literal|1
parameter_list|)
block|{
name|QStringDataPtr
name|dataPtr
init|=
block|{
name|fromAscii_helper
argument_list|(
argument|str
argument_list|,
argument|(str&& size == -
literal|1
argument|) ? int(strlen(str)) : size
argument_list|)
block|}
decl_stmt|;
return|return
name|QString
argument_list|(
name|dataPtr
argument_list|)
return|;
block|}
end_function
begin_function
specifier|static
specifier|inline
name|QString
name|fromLatin1
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|,
name|int
name|size
init|=
operator|-
literal|1
parameter_list|)
block|{
name|QStringDataPtr
name|dataPtr
init|=
block|{
name|fromLatin1_helper
argument_list|(
argument|str
argument_list|,
argument|(str&& size == -
literal|1
argument|) ? int(strlen(str)) : size
argument_list|)
block|}
decl_stmt|;
return|return
name|QString
argument_list|(
name|dataPtr
argument_list|)
return|;
block|}
end_function
begin_function
specifier|static
specifier|inline
name|QString
name|fromUtf8
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|,
name|int
name|size
init|=
operator|-
literal|1
parameter_list|)
block|{
return|return
name|fromUtf8_helper
argument_list|(
name|str
argument_list|,
operator|(
name|str
operator|&&
name|size
operator|==
operator|-
literal|1
operator|)
condition|?
name|int
argument_list|(
name|strlen
argument_list|(
name|str
argument_list|)
argument_list|)
else|:
name|size
argument_list|)
return|;
block|}
end_function
begin_function
specifier|static
specifier|inline
name|QString
name|fromLocal8Bit
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|,
name|int
name|size
init|=
operator|-
literal|1
parameter_list|)
block|{
return|return
name|fromLocal8Bit_helper
argument_list|(
name|str
argument_list|,
operator|(
name|str
operator|&&
name|size
operator|==
operator|-
literal|1
operator|)
condition|?
name|int
argument_list|(
name|strlen
argument_list|(
name|str
argument_list|)
argument_list|)
else|:
name|size
argument_list|)
return|;
block|}
end_function
begin_function
specifier|static
specifier|inline
name|QString
name|fromAscii
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|str
parameter_list|)
block|{
return|return
name|fromAscii
argument_list|(
name|str
operator|.
name|data
argument_list|()
argument_list|,
name|str
operator|.
name|size
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
specifier|static
specifier|inline
name|QString
name|fromLatin1
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|str
parameter_list|)
block|{
return|return
name|fromLatin1
argument_list|(
name|str
operator|.
name|data
argument_list|()
argument_list|,
name|str
operator|.
name|size
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
specifier|static
specifier|inline
name|QString
name|fromUtf8
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|str
parameter_list|)
block|{
return|return
name|fromUtf8
argument_list|(
name|str
operator|.
name|data
argument_list|()
argument_list|,
name|str
operator|.
name|size
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
specifier|static
specifier|inline
name|QString
name|fromLocal8Bit
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|str
parameter_list|)
block|{
return|return
name|fromLocal8Bit
argument_list|(
name|str
operator|.
name|data
argument_list|()
argument_list|,
name|str
operator|.
name|size
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function_decl
specifier|static
name|QString
name|fromUtf16
parameter_list|(
specifier|const
name|ushort
modifier|*
parameter_list|,
name|int
name|size
init|=
operator|-
literal|1
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|QString
name|fromUcs4
parameter_list|(
specifier|const
name|uint
modifier|*
parameter_list|,
name|int
name|size
init|=
operator|-
literal|1
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|QString
name|fromRawData
parameter_list|(
specifier|const
name|QChar
modifier|*
parameter_list|,
name|int
name|size
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
specifier|inline
name|int
name|toWCharArray
argument_list|(
name|wchar_t
operator|*
name|array
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|static
specifier|inline
name|QString
name|fromWCharArray
argument_list|(
specifier|const
name|wchar_t
operator|*
name|string
argument_list|,
name|int
name|size
operator|=
operator|-
literal|1
argument_list|)
name|Q_REQUIRED_RESULT
decl_stmt|;
end_decl_stmt
begin_function_decl
name|QString
modifier|&
name|setRawData
parameter_list|(
specifier|const
name|QChar
modifier|*
name|unicode
parameter_list|,
name|int
name|size
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|QString
modifier|&
name|setUnicode
parameter_list|(
specifier|const
name|QChar
modifier|*
name|unicode
parameter_list|,
name|int
name|size
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|inline
name|QString
modifier|&
name|setUtf16
parameter_list|(
specifier|const
name|ushort
modifier|*
name|utf16
parameter_list|,
name|int
name|size
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
name|int
name|compare
argument_list|(
specifier|const
name|QString
operator|&
name|s
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|int
name|compare
argument_list|(
specifier|const
name|QLatin1String
operator|&
name|other
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|static
specifier|inline
name|int
name|compare
argument_list|(
specifier|const
name|QString
operator|&
name|s1
argument_list|,
specifier|const
name|QString
operator|&
name|s2
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
block|{
return|return
name|s1
operator|.
name|compare
argument_list|(
name|s2
argument_list|,
name|cs
argument_list|)
return|;
block|}
end_decl_stmt
begin_decl_stmt
specifier|static
specifier|inline
name|int
name|compare
argument_list|(
specifier|const
name|QString
operator|&
name|s1
argument_list|,
specifier|const
name|QLatin1String
operator|&
name|s2
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
block|{
return|return
name|s1
operator|.
name|compare
argument_list|(
name|s2
argument_list|,
name|cs
argument_list|)
return|;
block|}
end_decl_stmt
begin_decl_stmt
specifier|static
specifier|inline
name|int
name|compare
argument_list|(
specifier|const
name|QLatin1String
operator|&
name|s1
argument_list|,
specifier|const
name|QString
operator|&
name|s2
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
block|{
return|return
operator|-
name|s2
operator|.
name|compare
argument_list|(
name|s1
argument_list|,
name|cs
argument_list|)
return|;
block|}
end_decl_stmt
begin_decl_stmt
name|int
name|compare
argument_list|(
specifier|const
name|QStringRef
operator|&
name|s
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|static
name|int
name|compare
argument_list|(
specifier|const
name|QString
operator|&
name|s1
argument_list|,
specifier|const
name|QStringRef
operator|&
name|s2
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|int
name|localeAwareCompare
argument_list|(
specifier|const
name|QString
operator|&
name|s
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_function
specifier|static
name|int
name|localeAwareCompare
parameter_list|(
specifier|const
name|QString
modifier|&
name|s1
parameter_list|,
specifier|const
name|QString
modifier|&
name|s2
parameter_list|)
block|{
return|return
name|s1
operator|.
name|localeAwareCompare
argument_list|(
name|s2
argument_list|)
return|;
block|}
end_function
begin_decl_stmt
name|int
name|localeAwareCompare
argument_list|(
specifier|const
name|QStringRef
operator|&
name|s
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_function_decl
specifier|static
name|int
name|localeAwareCompare
parameter_list|(
specifier|const
name|QString
modifier|&
name|s1
parameter_list|,
specifier|const
name|QStringRef
modifier|&
name|s2
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
name|short
name|toShort
argument_list|(
name|bool
operator|*
name|ok
operator|=
literal|0
argument_list|,
name|int
name|base
operator|=
literal|10
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|ushort
name|toUShort
argument_list|(
name|bool
operator|*
name|ok
operator|=
literal|0
argument_list|,
name|int
name|base
operator|=
literal|10
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|int
name|toInt
argument_list|(
name|bool
operator|*
name|ok
operator|=
literal|0
argument_list|,
name|int
name|base
operator|=
literal|10
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|uint
name|toUInt
argument_list|(
name|bool
operator|*
name|ok
operator|=
literal|0
argument_list|,
name|int
name|base
operator|=
literal|10
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|long
name|toLong
argument_list|(
name|bool
operator|*
name|ok
operator|=
literal|0
argument_list|,
name|int
name|base
operator|=
literal|10
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|ulong
name|toULong
argument_list|(
name|bool
operator|*
name|ok
operator|=
literal|0
argument_list|,
name|int
name|base
operator|=
literal|10
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|qlonglong
name|toLongLong
argument_list|(
name|bool
operator|*
name|ok
operator|=
literal|0
argument_list|,
name|int
name|base
operator|=
literal|10
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|qulonglong
name|toULongLong
argument_list|(
name|bool
operator|*
name|ok
operator|=
literal|0
argument_list|,
name|int
name|base
operator|=
literal|10
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|float
name|toFloat
argument_list|(
name|bool
operator|*
name|ok
operator|=
literal|0
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|double
name|toDouble
argument_list|(
name|bool
operator|*
name|ok
operator|=
literal|0
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_function_decl
name|QString
modifier|&
name|setNum
parameter_list|(
name|short
parameter_list|,
name|int
name|base
init|=
literal|10
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|QString
modifier|&
name|setNum
parameter_list|(
name|ushort
parameter_list|,
name|int
name|base
init|=
literal|10
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|QString
modifier|&
name|setNum
parameter_list|(
name|int
parameter_list|,
name|int
name|base
init|=
literal|10
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|QString
modifier|&
name|setNum
parameter_list|(
name|uint
parameter_list|,
name|int
name|base
init|=
literal|10
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|QString
modifier|&
name|setNum
parameter_list|(
name|long
parameter_list|,
name|int
name|base
init|=
literal|10
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|QString
modifier|&
name|setNum
parameter_list|(
name|ulong
parameter_list|,
name|int
name|base
init|=
literal|10
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|QString
modifier|&
name|setNum
parameter_list|(
name|qlonglong
parameter_list|,
name|int
name|base
init|=
literal|10
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|QString
modifier|&
name|setNum
parameter_list|(
name|qulonglong
parameter_list|,
name|int
name|base
init|=
literal|10
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|QString
modifier|&
name|setNum
parameter_list|(
name|float
parameter_list|,
name|char
name|f
init|=
literal|'g'
parameter_list|,
name|int
name|prec
init|=
literal|6
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|QString
modifier|&
name|setNum
parameter_list|(
name|double
parameter_list|,
name|char
name|f
init|=
literal|'g'
parameter_list|,
name|int
name|prec
init|=
literal|6
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|QString
name|number
parameter_list|(
name|int
parameter_list|,
name|int
name|base
init|=
literal|10
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|QString
name|number
parameter_list|(
name|uint
parameter_list|,
name|int
name|base
init|=
literal|10
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|QString
name|number
parameter_list|(
name|long
parameter_list|,
name|int
name|base
init|=
literal|10
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|QString
name|number
parameter_list|(
name|ulong
parameter_list|,
name|int
name|base
init|=
literal|10
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|QString
name|number
parameter_list|(
name|qlonglong
parameter_list|,
name|int
name|base
init|=
literal|10
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|QString
name|number
parameter_list|(
name|qulonglong
parameter_list|,
name|int
name|base
init|=
literal|10
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|QString
name|number
parameter_list|(
name|double
parameter_list|,
name|char
name|f
init|=
literal|'g'
parameter_list|,
name|int
name|prec
init|=
literal|6
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|friend
name|Q_CORE_EXPORT
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QString
operator|&
name|s1
operator|,
specifier|const
name|QString
operator|&
name|s2
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|friend
name|Q_CORE_EXPORT
name|bool
name|operator
operator|<
operator|(
specifier|const
name|QString
operator|&
name|s1
operator|,
specifier|const
name|QString
operator|&
name|s2
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|friend
specifier|inline
name|bool
name|operator
operator|>
operator|(
specifier|const
name|QString
operator|&
name|s1
operator|,
specifier|const
name|QString
operator|&
name|s2
operator|)
block|{
return|return
name|s2
operator|<
name|s1
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|friend
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|QString
operator|&
name|s1
operator|,
specifier|const
name|QString
operator|&
name|s2
operator|)
block|{
return|return
operator|!
operator|(
name|s1
operator|==
name|s2
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|friend
specifier|inline
name|bool
name|operator
operator|<=
operator|(
specifier|const
name|QString
operator|&
name|s1
operator|,
specifier|const
name|QString
operator|&
name|s2
operator|)
block|{
return|return
operator|!
operator|(
name|s1
operator|>
name|s2
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|friend
specifier|inline
name|bool
name|operator
operator|>=
operator|(
specifier|const
name|QString
operator|&
name|s1
operator|,
specifier|const
name|QString
operator|&
name|s2
operator|)
block|{
return|return
operator|!
operator|(
name|s1
operator|<
name|s2
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QLatin1String
operator|&
name|s
operator|)
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|bool
name|operator
operator|<
operator|(
specifier|const
name|QLatin1String
operator|&
name|s
operator|)
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|bool
name|operator
operator|>
operator|(
specifier|const
name|QLatin1String
operator|&
name|s
operator|)
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|QLatin1String
operator|&
name|s
operator|)
specifier|const
block|{
return|return
operator|!
name|operator
operator|==
operator|(
name|s
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|<=
operator|(
specifier|const
name|QLatin1String
operator|&
name|s
operator|)
specifier|const
block|{
return|return
operator|!
name|operator
operator|>
operator|(
name|s
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|>=
operator|(
specifier|const
name|QLatin1String
operator|&
name|s
operator|)
specifier|const
block|{
return|return
operator|!
name|operator
operator|<
operator|(
name|s
operator|)
return|;
block|}
end_expr_stmt
begin_comment
comment|// ASCII compatibility
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CAST_FROM_ASCII
end_ifndef
begin_expr_stmt
specifier|inline
name|QT_ASCII_CAST_WARN
name|QString
argument_list|(
specifier|const
name|char
operator|*
name|ch
argument_list|)
operator|:
name|d
argument_list|(
argument|fromAscii_helper(ch, ch ? int(strlen(ch)) : -
literal|1
argument|)
argument_list|)
block|{}
specifier|inline
name|QT_ASCII_CAST_WARN
name|QString
argument_list|(
specifier|const
name|QByteArray
operator|&
name|a
argument_list|)
operator|:
name|d
argument_list|(
argument|fromAscii_helper(a.constData(), qstrnlen(a.constData(), a.size()))
argument_list|)
block|{}
specifier|inline
name|QT_ASCII_CAST_WARN
name|QString
operator|&
name|operator
operator|=
operator|(
specifier|const
name|char
operator|*
name|ch
operator|)
block|{
return|return
operator|(
operator|*
name|this
operator|=
name|fromAscii
argument_list|(
name|ch
argument_list|,
name|ch
condition|?
name|int
argument_list|(
name|strlen
argument_list|(
name|ch
argument_list|)
argument_list|)
else|:
operator|-
literal|1
argument_list|)
operator|)
return|;
block|}
end_expr_stmt
begin_decl_stmt
specifier|inline
name|QT_ASCII_CAST_WARN
name|QString
modifier|&
name|operator
init|=
operator|(
specifier|const
name|QByteArray
operator|&
name|a
operator|)
block|{
return|return
operator|(
operator|*
name|this
operator|=
name|fromAscii
argument_list|(
name|a
operator|.
name|constData
argument_list|()
argument_list|,
name|qstrnlen
argument_list|(
name|a
operator|.
name|constData
argument_list|()
argument_list|,
name|a
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
operator|)
return|;
block|}
end_decl_stmt
begin_decl_stmt
specifier|inline
name|QT_ASCII_CAST_WARN
name|QString
modifier|&
name|operator
init|=
operator|(
name|char
name|c
operator|)
block|{
return|return
operator|(
operator|*
name|this
operator|=
name|QChar
operator|::
name|fromAscii
argument_list|(
name|c
argument_list|)
operator|)
return|;
block|}
end_decl_stmt
begin_comment
comment|// these are needed, so it compiles with STL support enabled
end_comment
begin_function
specifier|inline
name|QT_ASCII_CAST_WARN
name|QString
modifier|&
name|prepend
parameter_list|(
specifier|const
name|char
modifier|*
name|s
parameter_list|)
block|{
return|return
name|prepend
argument_list|(
name|QString
operator|::
name|fromAscii
argument_list|(
name|s
argument_list|,
name|s
condition|?
name|int
argument_list|(
name|strlen
argument_list|(
name|s
argument_list|)
argument_list|)
else|:
operator|-
literal|1
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
specifier|inline
name|QT_ASCII_CAST_WARN
name|QString
modifier|&
name|prepend
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|s
parameter_list|)
block|{
return|return
name|prepend
argument_list|(
name|QString
operator|::
name|fromAscii
argument_list|(
name|s
operator|.
name|constData
argument_list|()
argument_list|,
name|qstrnlen
argument_list|(
name|s
operator|.
name|constData
argument_list|()
argument_list|,
name|s
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
specifier|inline
name|QT_ASCII_CAST_WARN
name|QString
modifier|&
name|append
parameter_list|(
specifier|const
name|char
modifier|*
name|s
parameter_list|)
block|{
return|return
name|append
argument_list|(
name|QString
operator|::
name|fromAscii
argument_list|(
name|s
argument_list|,
name|s
condition|?
name|int
argument_list|(
name|strlen
argument_list|(
name|s
argument_list|)
argument_list|)
else|:
operator|-
literal|1
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
specifier|inline
name|QT_ASCII_CAST_WARN
name|QString
modifier|&
name|append
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|s
parameter_list|)
block|{
return|return
name|append
argument_list|(
name|QString
operator|::
name|fromAscii
argument_list|(
name|s
operator|.
name|constData
argument_list|()
argument_list|,
name|qstrnlen
argument_list|(
name|s
operator|.
name|constData
argument_list|()
argument_list|,
name|s
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_expr_stmt
specifier|inline
name|QT_ASCII_CAST_WARN
name|QString
operator|&
name|operator
operator|+=
operator|(
specifier|const
name|char
operator|*
name|s
operator|)
block|{
return|return
name|append
argument_list|(
name|QString
operator|::
name|fromAscii
argument_list|(
name|s
argument_list|,
name|s
operator|?
name|int
argument_list|(
name|strlen
argument_list|(
name|s
argument_list|)
argument_list|)
operator|:
operator|-
literal|1
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QT_ASCII_CAST_WARN
name|QString
operator|&
name|operator
operator|+=
operator|(
specifier|const
name|QByteArray
operator|&
name|s
operator|)
block|{
return|return
name|append
argument_list|(
name|QString
operator|::
name|fromAscii
argument_list|(
name|s
operator|.
name|constData
argument_list|()
argument_list|,
name|qstrnlen
argument_list|(
name|s
operator|.
name|constData
argument_list|()
argument_list|,
name|s
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QT_ASCII_CAST_WARN
name|QString
operator|&
name|operator
operator|+=
operator|(
name|char
name|c
operator|)
block|{
return|return
name|append
argument_list|(
name|QChar
operator|::
name|fromAscii
argument_list|(
name|c
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QT_ASCII_CAST_WARN
name|bool
name|operator
operator|==
operator|(
specifier|const
name|char
operator|*
name|s
operator|)
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QT_ASCII_CAST_WARN
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|char
operator|*
name|s
operator|)
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QT_ASCII_CAST_WARN
name|bool
name|operator
operator|<
operator|(
specifier|const
name|char
operator|*
name|s
operator|)
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QT_ASCII_CAST_WARN
name|bool
name|operator
operator|<=
operator|(
specifier|const
name|char
operator|*
name|s2
operator|)
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QT_ASCII_CAST_WARN
name|bool
name|operator
operator|>
operator|(
specifier|const
name|char
operator|*
name|s2
operator|)
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QT_ASCII_CAST_WARN
name|bool
name|operator
operator|>=
operator|(
specifier|const
name|char
operator|*
name|s2
operator|)
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QT_ASCII_CAST_WARN
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QByteArray
operator|&
name|s
operator|)
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QT_ASCII_CAST_WARN
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|QByteArray
operator|&
name|s
operator|)
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QT_ASCII_CAST_WARN
name|bool
name|operator
operator|<
operator|(
specifier|const
name|QByteArray
operator|&
name|s
operator|)
specifier|const
block|{
return|return
operator|*
name|this
operator|<
name|QString
operator|::
name|fromAscii
argument_list|(
name|s
operator|.
name|constData
argument_list|()
argument_list|,
name|s
operator|.
name|size
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QT_ASCII_CAST_WARN
name|bool
name|operator
operator|>
operator|(
specifier|const
name|QByteArray
operator|&
name|s
operator|)
specifier|const
block|{
return|return
operator|*
name|this
operator|>
name|QString
operator|::
name|fromAscii
argument_list|(
name|s
operator|.
name|constData
argument_list|()
argument_list|,
name|s
operator|.
name|size
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QT_ASCII_CAST_WARN
name|bool
name|operator
operator|<=
operator|(
specifier|const
name|QByteArray
operator|&
name|s
operator|)
specifier|const
block|{
return|return
operator|*
name|this
operator|<=
name|QString
operator|::
name|fromAscii
argument_list|(
name|s
operator|.
name|constData
argument_list|()
argument_list|,
name|s
operator|.
name|size
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QT_ASCII_CAST_WARN
name|bool
name|operator
operator|>=
operator|(
specifier|const
name|QByteArray
operator|&
name|s
operator|)
specifier|const
block|{
return|return
operator|*
name|this
operator|>=
name|QString
operator|::
name|fromAscii
argument_list|(
name|s
operator|.
name|constData
argument_list|()
argument_list|,
name|s
operator|.
name|size
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_typedef
typedef|typedef
name|QChar
modifier|*
name|iterator
typedef|;
end_typedef
begin_typedef
typedef|typedef
specifier|const
name|QChar
modifier|*
name|const_iterator
typedef|;
end_typedef
begin_typedef
typedef|typedef
name|iterator
name|Iterator
typedef|;
end_typedef
begin_typedef
typedef|typedef
name|const_iterator
name|ConstIterator
typedef|;
end_typedef
begin_function_decl
name|iterator
name|begin
parameter_list|()
function_decl|;
end_function_decl
begin_expr_stmt
name|const_iterator
name|begin
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|const_iterator
name|cbegin
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|const_iterator
name|constBegin
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_function_decl
name|iterator
name|end
parameter_list|()
function_decl|;
end_function_decl
begin_expr_stmt
name|const_iterator
name|end
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|const_iterator
name|cend
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|const_iterator
name|constEnd
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_comment
comment|// STL compatibility
end_comment
begin_typedef
typedef|typedef
specifier|const
name|QChar
modifier|&
name|const_reference
typedef|;
end_typedef
begin_typedef
typedef|typedef
name|QChar
modifier|&
name|reference
typedef|;
end_typedef
begin_typedef
typedef|typedef
name|QChar
name|value_type
typedef|;
end_typedef
begin_function
specifier|inline
name|void
name|push_back
parameter_list|(
name|QChar
name|c
parameter_list|)
block|{
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
specifier|inline
name|void
name|push_back
parameter_list|(
specifier|const
name|QString
modifier|&
name|s
parameter_list|)
block|{
name|append
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
specifier|inline
name|void
name|push_front
parameter_list|(
name|QChar
name|c
parameter_list|)
block|{
name|prepend
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
specifier|inline
name|void
name|push_front
parameter_list|(
specifier|const
name|QString
modifier|&
name|s
parameter_list|)
block|{
name|prepend
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_STL
end_ifndef
begin_decl_stmt
specifier|static
specifier|inline
name|QString
name|fromStdString
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|s
argument_list|)
decl_stmt|;
end_decl_stmt
begin_expr_stmt
specifier|inline
name|std
operator|::
name|string
name|toStdString
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_decl_stmt
specifier|static
specifier|inline
name|QString
name|fromStdWString
argument_list|(
specifier|const
name|std
operator|::
name|wstring
operator|&
name|s
argument_list|)
decl_stmt|;
end_decl_stmt
begin_expr_stmt
specifier|inline
name|std
operator|::
name|wstring
name|toStdWString
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// compatibility
end_comment
begin_struct
struct|struct
name|Null
block|{ }
struct|;
end_struct
begin_decl_stmt
specifier|static
specifier|const
name|Null
name|null
decl_stmt|;
end_decl_stmt
begin_expr_stmt
specifier|inline
name|QString
argument_list|(
specifier|const
name|Null
operator|&
argument_list|)
operator|:
name|d
argument_list|(
argument|shared_null.data_ptr()
argument_list|)
block|{}
specifier|inline
name|QString
operator|&
name|operator
operator|=
operator|(
specifier|const
name|Null
operator|&
operator|)
block|{
operator|*
name|this
operator|=
name|QString
argument_list|()
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|isNull
argument_list|()
specifier|const
block|{
return|return
name|d
operator|==
operator|&
name|shared_null
operator|.
name|str
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|bool
name|isSimpleText
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_function_decl
name|bool
name|isRightToLeft
parameter_list|()
function_decl|const;
end_function_decl
begin_macro
name|QString
argument_list|(
argument|int size
argument_list|,
argument|Qt::Initialization
argument_list|)
end_macro
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_macro
name|Q_DECL_CONSTEXPR
end_macro
begin_expr_stmt
specifier|inline
name|QString
argument_list|(
argument|QStringDataPtr dd
argument_list|)
operator|:
name|d
argument_list|(
argument|dd.ptr
argument_list|)
block|{}
name|private
operator|:
if|#
directive|if
name|defined
argument_list|(
name|QT_NO_CAST_FROM_ASCII
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_NO_DECLARED_NOT_DEFINED
argument_list|)
name|QString
operator|&
name|operator
operator|+=
operator|(
specifier|const
name|char
operator|*
name|s
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QString
operator|&
name|operator
operator|+=
operator|(
specifier|const
name|QByteArray
operator|&
name|s
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QString
argument_list|(
specifier|const
name|char
operator|*
name|ch
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QString
argument_list|(
specifier|const
name|QByteArray
operator|&
name|a
argument_list|)
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|QString
modifier|&
name|operator
init|=
operator|(
specifier|const
name|char
operator|*
name|ch
operator|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QString
modifier|&
name|operator
init|=
operator|(
specifier|const
name|QByteArray
operator|&
name|a
operator|)
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
specifier|static
specifier|const
name|QStaticStringData
operator|<
literal|1
operator|>
name|shared_null
expr_stmt|;
end_expr_stmt
begin_expr_stmt
specifier|static
specifier|const
name|QStaticStringData
operator|<
literal|1
operator|>
name|shared_empty
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|Data
modifier|*
name|d
decl_stmt|;
end_decl_stmt
begin_function_decl
specifier|static
name|void
name|free
parameter_list|(
name|Data
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|realloc
parameter_list|(
name|int
name|alloc
parameter_list|,
name|bool
name|grow
init|=
name|false
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|expand
parameter_list|(
name|int
name|i
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|void
name|updateProperties
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|QString
name|multiArg
argument_list|(
name|int
name|numArgs
argument_list|,
specifier|const
name|QString
operator|*
operator|*
name|args
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|static
name|int
name|compare_helper
argument_list|(
specifier|const
name|QChar
operator|*
name|data1
argument_list|,
name|int
name|length1
argument_list|,
specifier|const
name|QChar
operator|*
name|data2
argument_list|,
name|int
name|length2
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|static
name|int
name|compare_helper
argument_list|(
specifier|const
name|QChar
operator|*
name|data1
argument_list|,
name|int
name|length1
argument_list|,
name|QLatin1String
name|s2
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl_stmt|;
end_decl_stmt
begin_function_decl
specifier|static
name|int
name|localeAwareCompare_helper
parameter_list|(
specifier|const
name|QChar
modifier|*
name|data1
parameter_list|,
name|int
name|length1
parameter_list|,
specifier|const
name|QChar
modifier|*
name|data2
parameter_list|,
name|int
name|length2
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|Data
modifier|*
name|fromLatin1_helper
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|,
name|int
name|size
init|=
operator|-
literal|1
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|Data
modifier|*
name|fromAscii_helper
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|,
name|int
name|size
init|=
operator|-
literal|1
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|QString
name|fromUtf8_helper
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|,
name|int
name|size
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|QString
name|fromLocal8Bit_helper
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|int
name|size
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|int
name|toUcs4_helper
parameter_list|(
specifier|const
name|ushort
modifier|*
name|uc
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
modifier|*
name|out
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|replace_helper
parameter_list|(
name|uint
modifier|*
name|indices
parameter_list|,
name|int
name|nIndices
parameter_list|,
name|int
name|blen
parameter_list|,
specifier|const
name|QChar
modifier|*
name|after
parameter_list|,
name|int
name|alen
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
name|friend
name|class
name|QCharRef
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|friend
name|class
name|QTextCodec
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|friend
name|class
name|QStringRef
decl_stmt|;
end_decl_stmt
begin_macro
name|friend
end_macro
begin_struct_decl
struct_decl|struct
name|QAbstractConcatenable
struct_decl|;
end_struct_decl
begin_function_decl
name|friend
specifier|inline
name|bool
name|qStringComparisonHelper
parameter_list|(
specifier|const
name|QString
modifier|&
name|s1
parameter_list|,
specifier|const
name|char
modifier|*
name|s2
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|friend
specifier|inline
name|bool
name|qStringComparisonHelper
parameter_list|(
specifier|const
name|QStringRef
modifier|&
name|s1
parameter_list|,
specifier|const
name|char
modifier|*
name|s2
parameter_list|)
function_decl|;
end_function_decl
begin_label
name|public
label|:
end_label
begin_typedef
typedef|typedef
name|Data
modifier|*
name|DataPtr
typedef|;
end_typedef
begin_function
specifier|inline
name|DataPtr
modifier|&
name|data_ptr
parameter_list|()
block|{
return|return
name|d
return|;
block|}
end_function
begin_decl_stmt
unit|};
name|class
name|QLatin1String
block|{
name|public
label|:
name|Q_DECL_CONSTEXPR
specifier|inline
name|explicit
name|QLatin1String
argument_list|(
specifier|const
name|char
operator|*
name|s
argument_list|)
operator|:
name|m_size
argument_list|(
name|s
condition|?
name|int
argument_list|(
name|strlen
argument_list|(
name|s
argument_list|)
argument_list|)
else|:
literal|0
argument_list|)
operator|,
name|m_data
argument_list|(
argument|s
argument_list|)
block|{}
name|Q_DECL_CONSTEXPR
specifier|inline
name|explicit
name|QLatin1String
argument_list|(
argument|const char *s
argument_list|,
argument|int sz
argument_list|)
operator|:
name|m_size
argument_list|(
name|sz
argument_list|)
operator|,
name|m_data
argument_list|(
argument|s
argument_list|)
block|{}
specifier|inline
name|explicit
name|QLatin1String
argument_list|(
specifier|const
name|QByteArray
operator|&
name|s
argument_list|)
operator|:
name|m_size
argument_list|(
name|int
argument_list|(
name|strlen
argument_list|(
name|s
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|,
name|m_data
argument_list|(
argument|s.constData()
argument_list|)
block|{}
specifier|inline
specifier|const
name|char
operator|*
name|latin1
argument_list|()
specifier|const
block|{
return|return
name|m_data
return|;
block|}
specifier|inline
name|int
name|size
argument_list|()
specifier|const
block|{
return|return
name|m_size
return|;
block|}
specifier|inline
specifier|const
name|char
operator|*
name|data
argument_list|()
specifier|const
block|{
return|return
name|m_data
return|;
block|}
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QString
operator|&
name|s
operator|)
specifier|const
block|{
return|return
name|s
operator|==
operator|*
name|this
return|;
block|}
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|QString
operator|&
name|s
operator|)
specifier|const
block|{
return|return
name|s
operator|!=
operator|*
name|this
return|;
block|}
specifier|inline
name|bool
name|operator
operator|>
operator|(
specifier|const
name|QString
operator|&
name|s
operator|)
specifier|const
block|{
return|return
name|s
operator|<
operator|*
name|this
return|;
block|}
specifier|inline
name|bool
name|operator
operator|<
operator|(
specifier|const
name|QString
operator|&
name|s
operator|)
specifier|const
block|{
return|return
name|s
operator|>
operator|*
name|this
return|;
block|}
specifier|inline
name|bool
name|operator
operator|>=
operator|(
specifier|const
name|QString
operator|&
name|s
operator|)
specifier|const
block|{
return|return
name|s
operator|<=
operator|*
name|this
return|;
block|}
specifier|inline
name|bool
name|operator
operator|<=
operator|(
specifier|const
name|QString
operator|&
name|s
operator|)
specifier|const
block|{
return|return
name|s
operator|>=
operator|*
name|this
return|;
block|}
specifier|inline
name|QT_ASCII_CAST_WARN
name|bool
name|operator
operator|==
operator|(
specifier|const
name|char
operator|*
name|s
operator|)
specifier|const
block|{
return|return
name|QString
operator|::
name|fromAscii
argument_list|(
name|s
argument_list|,
name|s
operator|?
name|int
argument_list|(
name|strlen
argument_list|(
name|s
argument_list|)
argument_list|)
operator|:
operator|-
literal|1
argument_list|)
operator|==
operator|*
name|this
return|;
block|}
specifier|inline
name|QT_ASCII_CAST_WARN
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|char
operator|*
name|s
operator|)
specifier|const
block|{
return|return
name|QString
operator|::
name|fromAscii
argument_list|(
name|s
argument_list|,
name|s
operator|?
name|int
argument_list|(
name|strlen
argument_list|(
name|s
argument_list|)
argument_list|)
operator|:
operator|-
literal|1
argument_list|)
operator|!=
operator|*
name|this
return|;
block|}
specifier|inline
name|QT_ASCII_CAST_WARN
name|bool
name|operator
operator|<
operator|(
specifier|const
name|char
operator|*
name|s
operator|)
specifier|const
block|{
return|return
name|QString
operator|::
name|fromAscii
argument_list|(
name|s
argument_list|,
name|s
operator|?
name|int
argument_list|(
name|strlen
argument_list|(
name|s
argument_list|)
argument_list|)
operator|:
operator|-
literal|1
argument_list|)
operator|>
operator|*
name|this
return|;
block|}
specifier|inline
name|QT_ASCII_CAST_WARN
name|bool
name|operator
operator|>
operator|(
specifier|const
name|char
operator|*
name|s
operator|)
specifier|const
block|{
return|return
name|QString
operator|::
name|fromAscii
argument_list|(
name|s
argument_list|,
name|s
operator|?
name|int
argument_list|(
name|strlen
argument_list|(
name|s
argument_list|)
argument_list|)
operator|:
operator|-
literal|1
argument_list|)
operator|<
operator|*
name|this
return|;
block|}
specifier|inline
name|QT_ASCII_CAST_WARN
name|bool
name|operator
operator|<=
operator|(
specifier|const
name|char
operator|*
name|s
operator|)
specifier|const
block|{
return|return
name|QString
operator|::
name|fromAscii
argument_list|(
name|s
argument_list|,
name|s
operator|?
name|int
argument_list|(
name|strlen
argument_list|(
name|s
argument_list|)
argument_list|)
operator|:
operator|-
literal|1
argument_list|)
operator|>=
operator|*
name|this
return|;
block|}
specifier|inline
name|QT_ASCII_CAST_WARN
name|bool
name|operator
operator|>=
operator|(
specifier|const
name|char
operator|*
name|s
operator|)
specifier|const
block|{
return|return
name|QString
operator|::
name|fromAscii
argument_list|(
name|s
argument_list|,
name|s
operator|?
name|int
argument_list|(
name|strlen
argument_list|(
name|s
argument_list|)
argument_list|)
operator|:
operator|-
literal|1
argument_list|)
operator|<=
operator|*
name|this
return|;
block|}
name|private
label|:
name|int
name|m_size
decl_stmt|;
specifier|const
name|char
modifier|*
name|m_data
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_comment
comment|// Qt 4.x compatibility
end_comment
begin_typedef
DECL|typedef|QLatin1Literal
typedef|typedef
name|QLatin1String
name|QLatin1Literal
typedef|;
end_typedef
begin_expr_stmt
DECL|function|QString
specifier|inline
name|QString
operator|::
name|QString
argument_list|(
specifier|const
name|QLatin1String
operator|&
name|aLatin1
argument_list|)
operator|:
name|d
argument_list|(
argument|fromLatin1_helper(aLatin1.latin1(), aLatin1.size())
argument_list|)
block|{ }
DECL|function|length
specifier|inline
name|int
name|QString
operator|::
name|length
argument_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|size
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|at
specifier|inline
specifier|const
name|QChar
name|QString
operator|::
name|at
argument_list|(
argument|int i
argument_list|)
specifier|const
block|{
name|Q_ASSERT
argument_list|(
name|uint
argument_list|(
name|i
argument_list|)
operator|<
name|uint
argument_list|(
name|size
argument_list|()
argument_list|)
argument_list|)
block|;
return|return
name|d
operator|->
name|data
argument_list|()
index|[
name|i
index|]
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|operator
specifier|inline
specifier|const
name|QChar
name|QString
operator|::
name|operator
index|[]
operator|(
name|int
name|i
operator|)
specifier|const
block|{
name|Q_ASSERT
argument_list|(
name|uint
argument_list|(
name|i
argument_list|)
operator|<
name|uint
argument_list|(
name|size
argument_list|()
argument_list|)
argument_list|)
block|;
return|return
name|d
operator|->
name|data
argument_list|()
index|[
name|i
index|]
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|operator
specifier|inline
specifier|const
name|QChar
name|QString
operator|::
name|operator
index|[]
operator|(
name|uint
name|i
operator|)
specifier|const
block|{
name|Q_ASSERT
argument_list|(
name|i
operator|<
name|uint
argument_list|(
name|size
argument_list|()
argument_list|)
argument_list|)
block|;
return|return
name|d
operator|->
name|data
argument_list|()
index|[
name|i
index|]
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|isEmpty
specifier|inline
name|bool
name|QString
operator|::
name|isEmpty
argument_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|size
operator|==
literal|0
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|unicode
specifier|inline
specifier|const
name|QChar
operator|*
name|QString
operator|::
name|unicode
argument_list|()
specifier|const
block|{
return|return
name|reinterpret_cast
operator|<
specifier|const
name|QChar
operator|*
operator|>
operator|(
name|d
operator|->
name|data
argument_list|()
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|data
specifier|inline
specifier|const
name|QChar
operator|*
name|QString
operator|::
name|data
argument_list|()
specifier|const
block|{
return|return
name|reinterpret_cast
operator|<
specifier|const
name|QChar
operator|*
operator|>
operator|(
name|d
operator|->
name|data
argument_list|()
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|data
specifier|inline
name|QChar
operator|*
name|QString
operator|::
name|data
argument_list|()
block|{
name|detach
argument_list|()
block|;
return|return
name|reinterpret_cast
operator|<
name|QChar
operator|*
operator|>
operator|(
name|d
operator|->
name|data
argument_list|()
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|constData
specifier|inline
specifier|const
name|QChar
operator|*
name|QString
operator|::
name|constData
argument_list|()
specifier|const
block|{
return|return
name|reinterpret_cast
operator|<
specifier|const
name|QChar
operator|*
operator|>
operator|(
name|d
operator|->
name|data
argument_list|()
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|detach
specifier|inline
name|void
name|QString
operator|::
name|detach
argument_list|()
block|{
if|if
condition|(
name|d
operator|->
name|ref
operator|.
name|isShared
argument_list|()
operator|||
operator|(
name|d
operator|->
name|offset
operator|!=
sizeof|sizeof
argument_list|(
name|QStringData
argument_list|)
operator|)
condition|)
name|realloc
argument_list|(
name|d
operator|->
name|size
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|isDetached
specifier|inline
name|bool
name|QString
operator|::
name|isDetached
argument_list|()
specifier|const
block|{
return|return
operator|!
name|d
operator|->
name|ref
operator|.
name|isShared
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|member|operator
specifier|inline
name|QString
operator|&
name|QString
operator|::
name|operator
operator|=
operator|(
specifier|const
name|QLatin1String
operator|&
name|s
operator|)
block|{
operator|*
name|this
operator|=
name|fromLatin1
argument_list|(
name|s
operator|.
name|latin1
argument_list|()
argument_list|,
name|s
operator|.
name|size
argument_list|()
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|void
name|QString
operator|::
name|clear
argument_list|()
block|{
if|if
condition|(
operator|!
name|isNull
argument_list|()
condition|)
operator|*
name|this
operator|=
name|QString
argument_list|()
expr_stmt|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QString
operator|::
name|QString
argument_list|(
specifier|const
name|QString
operator|&
name|other
argument_list|)
operator|:
name|d
argument_list|(
argument|other.d
argument_list|)
block|{
name|Q_ASSERT
argument_list|(
operator|&
name|other
operator|!=
name|this
argument_list|)
block|;
name|d
operator|->
name|ref
operator|.
name|ref
argument_list|()
block|; }
specifier|inline
name|int
name|QString
operator|::
name|capacity
argument_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|alloc
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QString
operator|&
name|QString
operator|::
name|setNum
argument_list|(
argument|short n
argument_list|,
argument|int base
argument_list|)
block|{
return|return
name|setNum
argument_list|(
name|qlonglong
argument_list|(
name|n
argument_list|)
argument_list|,
name|base
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QString
operator|&
name|QString
operator|::
name|setNum
argument_list|(
argument|ushort n
argument_list|,
argument|int base
argument_list|)
block|{
return|return
name|setNum
argument_list|(
name|qulonglong
argument_list|(
name|n
argument_list|)
argument_list|,
name|base
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QString
operator|&
name|QString
operator|::
name|setNum
argument_list|(
argument|int n
argument_list|,
argument|int base
argument_list|)
block|{
return|return
name|setNum
argument_list|(
name|qlonglong
argument_list|(
name|n
argument_list|)
argument_list|,
name|base
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QString
operator|&
name|QString
operator|::
name|setNum
argument_list|(
argument|uint n
argument_list|,
argument|int base
argument_list|)
block|{
return|return
name|setNum
argument_list|(
name|qulonglong
argument_list|(
name|n
argument_list|)
argument_list|,
name|base
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QString
operator|&
name|QString
operator|::
name|setNum
argument_list|(
argument|long n
argument_list|,
argument|int base
argument_list|)
block|{
return|return
name|setNum
argument_list|(
name|qlonglong
argument_list|(
name|n
argument_list|)
argument_list|,
name|base
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QString
operator|&
name|QString
operator|::
name|setNum
argument_list|(
argument|ulong n
argument_list|,
argument|int base
argument_list|)
block|{
return|return
name|setNum
argument_list|(
name|qulonglong
argument_list|(
name|n
argument_list|)
argument_list|,
name|base
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QString
operator|&
name|QString
operator|::
name|setNum
argument_list|(
argument|float n
argument_list|,
argument|char f
argument_list|,
argument|int prec
argument_list|)
block|{
return|return
name|setNum
argument_list|(
name|double
argument_list|(
name|n
argument_list|)
argument_list|,
name|f
argument_list|,
name|prec
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QString
name|QString
operator|::
name|arg
argument_list|(
argument|int a
argument_list|,
argument|int fieldWidth
argument_list|,
argument|int base
argument_list|,
argument|QChar fillChar
argument_list|)
specifier|const
block|{
return|return
name|arg
argument_list|(
name|qlonglong
argument_list|(
name|a
argument_list|)
argument_list|,
name|fieldWidth
argument_list|,
name|base
argument_list|,
name|fillChar
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QString
name|QString
operator|::
name|arg
argument_list|(
argument|uint a
argument_list|,
argument|int fieldWidth
argument_list|,
argument|int base
argument_list|,
argument|QChar fillChar
argument_list|)
specifier|const
block|{
return|return
name|arg
argument_list|(
name|qulonglong
argument_list|(
name|a
argument_list|)
argument_list|,
name|fieldWidth
argument_list|,
name|base
argument_list|,
name|fillChar
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QString
name|QString
operator|::
name|arg
argument_list|(
argument|long a
argument_list|,
argument|int fieldWidth
argument_list|,
argument|int base
argument_list|,
argument|QChar fillChar
argument_list|)
specifier|const
block|{
return|return
name|arg
argument_list|(
name|qlonglong
argument_list|(
name|a
argument_list|)
argument_list|,
name|fieldWidth
argument_list|,
name|base
argument_list|,
name|fillChar
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QString
name|QString
operator|::
name|arg
argument_list|(
argument|ulong a
argument_list|,
argument|int fieldWidth
argument_list|,
argument|int base
argument_list|,
argument|QChar fillChar
argument_list|)
specifier|const
block|{
return|return
name|arg
argument_list|(
name|qulonglong
argument_list|(
name|a
argument_list|)
argument_list|,
name|fieldWidth
argument_list|,
name|base
argument_list|,
name|fillChar
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QString
name|QString
operator|::
name|arg
argument_list|(
argument|short a
argument_list|,
argument|int fieldWidth
argument_list|,
argument|int base
argument_list|,
argument|QChar fillChar
argument_list|)
specifier|const
block|{
return|return
name|arg
argument_list|(
name|qlonglong
argument_list|(
name|a
argument_list|)
argument_list|,
name|fieldWidth
argument_list|,
name|base
argument_list|,
name|fillChar
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QString
name|QString
operator|::
name|arg
argument_list|(
argument|ushort a
argument_list|,
argument|int fieldWidth
argument_list|,
argument|int base
argument_list|,
argument|QChar fillChar
argument_list|)
specifier|const
block|{
return|return
name|arg
argument_list|(
name|qulonglong
argument_list|(
name|a
argument_list|)
argument_list|,
name|fieldWidth
argument_list|,
name|base
argument_list|,
name|fillChar
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QString
name|QString
operator|::
name|arg
argument_list|(
argument|const QString&a1
argument_list|,
argument|const QString&a2
argument_list|)
specifier|const
block|{
specifier|const
name|QString
operator|*
name|args
index|[
literal|2
index|]
operator|=
block|{
operator|&
name|a1
block|,
operator|&
name|a2
block|}
block|;
return|return
name|multiArg
argument_list|(
literal|2
argument_list|,
name|args
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QString
name|QString
operator|::
name|arg
argument_list|(
argument|const QString&a1
argument_list|,
argument|const QString&a2
argument_list|,
argument|const QString&a3
argument_list|)
specifier|const
block|{
specifier|const
name|QString
operator|*
name|args
index|[
literal|3
index|]
operator|=
block|{
operator|&
name|a1
block|,
operator|&
name|a2
block|,
operator|&
name|a3
block|}
block|;
return|return
name|multiArg
argument_list|(
literal|3
argument_list|,
name|args
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QString
name|QString
operator|::
name|arg
argument_list|(
argument|const QString&a1
argument_list|,
argument|const QString&a2
argument_list|,
argument|const QString&a3
argument_list|,
argument|const QString&a4
argument_list|)
specifier|const
block|{
specifier|const
name|QString
operator|*
name|args
index|[
literal|4
index|]
operator|=
block|{
operator|&
name|a1
block|,
operator|&
name|a2
block|,
operator|&
name|a3
block|,
operator|&
name|a4
block|}
block|;
return|return
name|multiArg
argument_list|(
literal|4
argument_list|,
name|args
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QString
name|QString
operator|::
name|arg
argument_list|(
argument|const QString&a1
argument_list|,
argument|const QString&a2
argument_list|,
argument|const QString&a3
argument_list|,
argument|const QString&a4
argument_list|,
argument|const QString&a5
argument_list|)
specifier|const
block|{
specifier|const
name|QString
operator|*
name|args
index|[
literal|5
index|]
operator|=
block|{
operator|&
name|a1
block|,
operator|&
name|a2
block|,
operator|&
name|a3
block|,
operator|&
name|a4
block|,
operator|&
name|a5
block|}
block|;
return|return
name|multiArg
argument_list|(
literal|5
argument_list|,
name|args
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QString
name|QString
operator|::
name|arg
argument_list|(
argument|const QString&a1
argument_list|,
argument|const QString&a2
argument_list|,
argument|const QString&a3
argument_list|,
argument|const QString&a4
argument_list|,
argument|const QString&a5
argument_list|,
argument|const QString&a6
argument_list|)
specifier|const
block|{
specifier|const
name|QString
operator|*
name|args
index|[
literal|6
index|]
operator|=
block|{
operator|&
name|a1
block|,
operator|&
name|a2
block|,
operator|&
name|a3
block|,
operator|&
name|a4
block|,
operator|&
name|a5
block|,
operator|&
name|a6
block|}
block|;
return|return
name|multiArg
argument_list|(
literal|6
argument_list|,
name|args
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QString
name|QString
operator|::
name|arg
argument_list|(
argument|const QString&a1
argument_list|,
argument|const QString&a2
argument_list|,
argument|const QString&a3
argument_list|,
argument|const QString&a4
argument_list|,
argument|const QString&a5
argument_list|,
argument|const QString&a6
argument_list|,
argument|const QString&a7
argument_list|)
specifier|const
block|{
specifier|const
name|QString
operator|*
name|args
index|[
literal|7
index|]
operator|=
block|{
operator|&
name|a1
block|,
operator|&
name|a2
block|,
operator|&
name|a3
block|,
operator|&
name|a4
block|,
operator|&
name|a5
block|,
operator|&
name|a6
block|,
operator|&
name|a7
block|}
block|;
return|return
name|multiArg
argument_list|(
literal|7
argument_list|,
name|args
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QString
name|QString
operator|::
name|arg
argument_list|(
argument|const QString&a1
argument_list|,
argument|const QString&a2
argument_list|,
argument|const QString&a3
argument_list|,
argument|const QString&a4
argument_list|,
argument|const QString&a5
argument_list|,
argument|const QString&a6
argument_list|,
argument|const QString&a7
argument_list|,
argument|const QString&a8
argument_list|)
specifier|const
block|{
specifier|const
name|QString
operator|*
name|args
index|[
literal|8
index|]
operator|=
block|{
operator|&
name|a1
block|,
operator|&
name|a2
block|,
operator|&
name|a3
block|,
operator|&
name|a4
block|,
operator|&
name|a5
block|,
operator|&
name|a6
block|,
operator|&
name|a7
block|,
operator|&
name|a8
block|}
block|;
return|return
name|multiArg
argument_list|(
literal|8
argument_list|,
name|args
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QString
name|QString
operator|::
name|arg
argument_list|(
argument|const QString&a1
argument_list|,
argument|const QString&a2
argument_list|,
argument|const QString&a3
argument_list|,
argument|const QString&a4
argument_list|,
argument|const QString&a5
argument_list|,
argument|const QString&a6
argument_list|,
argument|const QString&a7
argument_list|,
argument|const QString&a8
argument_list|,
argument|const QString&a9
argument_list|)
specifier|const
block|{
specifier|const
name|QString
operator|*
name|args
index|[
literal|9
index|]
operator|=
block|{
operator|&
name|a1
block|,
operator|&
name|a2
block|,
operator|&
name|a3
block|,
operator|&
name|a4
block|,
operator|&
name|a5
block|,
operator|&
name|a6
block|,
operator|&
name|a7
block|,
operator|&
name|a8
block|,
operator|&
name|a9
block|}
block|;
return|return
name|multiArg
argument_list|(
literal|9
argument_list|,
name|args
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QString
name|QString
operator|::
name|section
argument_list|(
argument|QChar asep
argument_list|,
argument|int astart
argument_list|,
argument|int aend
argument_list|,
argument|SectionFlags aflags
argument_list|)
specifier|const
block|{
return|return
name|section
argument_list|(
name|QString
argument_list|(
name|asep
argument_list|)
argument_list|,
name|astart
argument_list|,
name|aend
argument_list|,
name|aflags
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|int
name|QString
operator|::
name|toWCharArray
argument_list|(
argument|wchar_t *array
argument_list|)
specifier|const
block|{
if|if
condition|(
sizeof|sizeof
argument_list|(
name|wchar_t
argument_list|)
operator|==
sizeof|sizeof
argument_list|(
name|QChar
argument_list|)
condition|)
block|{
name|qMemCopy
argument_list|(
name|array
argument_list|,
name|d
operator|->
name|data
argument_list|()
argument_list|,
sizeof|sizeof
argument_list|(
name|QChar
argument_list|)
operator|*
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|size
argument_list|()
return|;
block|}
end_expr_stmt
begin_return
return|return
name|toUcs4_helper
argument_list|(
name|d
operator|->
name|data
argument_list|()
argument_list|,
name|size
argument_list|()
argument_list|,
name|reinterpret_cast
operator|<
name|uint
operator|*
operator|>
operator|(
name|array
operator|)
argument_list|)
return|;
end_return
begin_expr_stmt
unit|} inline
name|QString
name|QString
operator|::
name|fromWCharArray
argument_list|(
argument|const wchar_t *string
argument_list|,
argument|int size
argument_list|)
block|{
return|return
sizeof|sizeof
argument_list|(
name|wchar_t
argument_list|)
operator|==
sizeof|sizeof
argument_list|(
name|QChar
argument_list|)
operator|?
name|fromUtf16
argument_list|(
name|reinterpret_cast
operator|<
specifier|const
name|ushort
operator|*
operator|>
operator|(
name|string
operator|)
argument_list|,
name|size
argument_list|)
operator|:
name|fromUcs4
argument_list|(
name|reinterpret_cast
operator|<
specifier|const
name|uint
operator|*
operator|>
operator|(
name|string
operator|)
argument_list|,
name|size
argument_list|)
return|;
block|}
end_expr_stmt
begin_decl_stmt
name|class
name|Q_CORE_EXPORT
name|QCharRef
block|{
name|QString
modifier|&
name|s
decl_stmt|;
name|int
name|i
decl_stmt|;
specifier|inline
name|QCharRef
argument_list|(
argument|QString&str
argument_list|,
argument|int idx
argument_list|)
operator|:
name|s
argument_list|(
name|str
argument_list|)
operator|,
name|i
argument_list|(
argument|idx
argument_list|)
block|{}
name|friend
name|class
name|QString
expr_stmt|;
name|public
label|:
comment|// most QChar operations repeated here
comment|// all this is not documented: We just say "like QChar" and let it be.
specifier|inline
name|operator
name|QChar
argument_list|()
specifier|const
block|{
return|return
name|i
operator|<
name|s
operator|.
name|d
operator|->
name|size
operator|?
name|s
operator|.
name|d
operator|->
name|data
argument_list|()
index|[
name|i
index|]
operator|:
literal|0
return|;
block|}
specifier|inline
name|QCharRef
modifier|&
name|operator
init|=
operator|(
name|QChar
name|c
operator|)
block|{
if|if
condition|(
name|i
operator|>=
name|s
operator|.
name|d
operator|->
name|size
condition|)
name|s
operator|.
name|expand
argument_list|(
name|i
argument_list|)
expr_stmt|;
else|else
name|s
operator|.
name|detach
argument_list|()
expr_stmt|;
name|s
operator|.
name|d
operator|->
name|data
argument_list|()
index|[
name|i
index|]
operator|=
name|c
operator|.
name|unicode
argument_list|()
decl_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_decl_stmt
begin_comment
comment|// An operator= for each QChar cast constructors
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CAST_FROM_ASCII
end_ifndef
begin_decl_stmt
specifier|inline
name|QT_ASCII_CAST_WARN
name|QCharRef
modifier|&
name|operator
init|=
operator|(
name|char
name|c
operator|)
block|{
return|return
name|operator
operator|=
operator|(
name|QChar
operator|::
name|fromAscii
argument_list|(
name|c
argument_list|)
operator|)
return|;
block|}
end_decl_stmt
begin_decl_stmt
specifier|inline
name|QT_ASCII_CAST_WARN
name|QCharRef
modifier|&
name|operator
init|=
operator|(
name|uchar
name|c
operator|)
block|{
return|return
name|operator
operator|=
operator|(
name|QChar
operator|::
name|fromAscii
argument_list|(
name|c
argument_list|)
operator|)
return|;
block|}
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
specifier|inline
name|QCharRef
modifier|&
name|operator
init|=
operator|(
specifier|const
name|QCharRef
operator|&
name|c
operator|)
block|{
return|return
name|operator
operator|=
operator|(
name|QChar
argument_list|(
name|c
argument_list|)
operator|)
return|;
block|}
end_decl_stmt
begin_decl_stmt
specifier|inline
name|QCharRef
modifier|&
name|operator
init|=
operator|(
name|ushort
name|rc
operator|)
block|{
return|return
name|operator
operator|=
operator|(
name|QChar
argument_list|(
name|rc
argument_list|)
operator|)
return|;
block|}
end_decl_stmt
begin_decl_stmt
specifier|inline
name|QCharRef
modifier|&
name|operator
init|=
operator|(
name|short
name|rc
operator|)
block|{
return|return
name|operator
operator|=
operator|(
name|QChar
argument_list|(
name|rc
argument_list|)
operator|)
return|;
block|}
end_decl_stmt
begin_decl_stmt
specifier|inline
name|QCharRef
modifier|&
name|operator
init|=
operator|(
name|uint
name|rc
operator|)
block|{
return|return
name|operator
operator|=
operator|(
name|QChar
argument_list|(
name|rc
argument_list|)
operator|)
return|;
block|}
end_decl_stmt
begin_decl_stmt
specifier|inline
name|QCharRef
modifier|&
name|operator
init|=
operator|(
name|int
name|rc
operator|)
block|{
return|return
name|operator
operator|=
operator|(
name|QChar
argument_list|(
name|rc
argument_list|)
operator|)
return|;
block|}
end_decl_stmt
begin_comment
comment|// each function...
end_comment
begin_expr_stmt
specifier|inline
name|bool
name|isNull
argument_list|()
specifier|const
block|{
return|return
name|QChar
argument_list|(
operator|*
name|this
argument_list|)
operator|.
name|isNull
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|isPrint
argument_list|()
specifier|const
block|{
return|return
name|QChar
argument_list|(
operator|*
name|this
argument_list|)
operator|.
name|isPrint
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|isPunct
argument_list|()
specifier|const
block|{
return|return
name|QChar
argument_list|(
operator|*
name|this
argument_list|)
operator|.
name|isPunct
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|isSpace
argument_list|()
specifier|const
block|{
return|return
name|QChar
argument_list|(
operator|*
name|this
argument_list|)
operator|.
name|isSpace
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|isMark
argument_list|()
specifier|const
block|{
return|return
name|QChar
argument_list|(
operator|*
name|this
argument_list|)
operator|.
name|isMark
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|isLetter
argument_list|()
specifier|const
block|{
return|return
name|QChar
argument_list|(
operator|*
name|this
argument_list|)
operator|.
name|isLetter
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|isNumber
argument_list|()
specifier|const
block|{
return|return
name|QChar
argument_list|(
operator|*
name|this
argument_list|)
operator|.
name|isNumber
argument_list|()
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|bool
name|isLetterOrNumber
parameter_list|()
block|{
return|return
name|QChar
argument_list|(
operator|*
name|this
argument_list|)
operator|.
name|isLetterOrNumber
argument_list|()
return|;
block|}
end_function
begin_expr_stmt
specifier|inline
name|bool
name|isDigit
argument_list|()
specifier|const
block|{
return|return
name|QChar
argument_list|(
operator|*
name|this
argument_list|)
operator|.
name|isDigit
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|isLower
argument_list|()
specifier|const
block|{
return|return
name|QChar
argument_list|(
operator|*
name|this
argument_list|)
operator|.
name|isLower
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|isUpper
argument_list|()
specifier|const
block|{
return|return
name|QChar
argument_list|(
operator|*
name|this
argument_list|)
operator|.
name|isUpper
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|isTitleCase
argument_list|()
specifier|const
block|{
return|return
name|QChar
argument_list|(
operator|*
name|this
argument_list|)
operator|.
name|isTitleCase
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|int
name|digitValue
argument_list|()
specifier|const
block|{
return|return
name|QChar
argument_list|(
operator|*
name|this
argument_list|)
operator|.
name|digitValue
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|QChar
name|toLower
argument_list|()
specifier|const
block|{
return|return
name|QChar
argument_list|(
operator|*
name|this
argument_list|)
operator|.
name|toLower
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|QChar
name|toUpper
argument_list|()
specifier|const
block|{
return|return
name|QChar
argument_list|(
operator|*
name|this
argument_list|)
operator|.
name|toUpper
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|QChar
name|toTitleCase
argument_list|()
specifier|const
block|{
return|return
name|QChar
argument_list|(
operator|*
name|this
argument_list|)
operator|.
name|toTitleCase
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|QChar
operator|::
name|Category
name|category
argument_list|()
specifier|const
block|{
return|return
name|QChar
argument_list|(
operator|*
name|this
argument_list|)
operator|.
name|category
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|QChar
operator|::
name|Direction
name|direction
argument_list|()
specifier|const
block|{
return|return
name|QChar
argument_list|(
operator|*
name|this
argument_list|)
operator|.
name|direction
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|QChar
operator|::
name|Joining
name|joining
argument_list|()
specifier|const
block|{
return|return
name|QChar
argument_list|(
operator|*
name|this
argument_list|)
operator|.
name|joining
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|bool
name|hasMirrored
argument_list|()
specifier|const
block|{
return|return
name|QChar
argument_list|(
operator|*
name|this
argument_list|)
operator|.
name|hasMirrored
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|QChar
name|mirroredChar
argument_list|()
specifier|const
block|{
return|return
name|QChar
argument_list|(
operator|*
name|this
argument_list|)
operator|.
name|mirroredChar
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|QString
name|decomposition
argument_list|()
specifier|const
block|{
return|return
name|QChar
argument_list|(
operator|*
name|this
argument_list|)
operator|.
name|decomposition
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|QChar
operator|::
name|Decomposition
name|decompositionTag
argument_list|()
specifier|const
block|{
return|return
name|QChar
argument_list|(
operator|*
name|this
argument_list|)
operator|.
name|decompositionTag
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|uchar
name|combiningClass
argument_list|()
specifier|const
block|{
return|return
name|QChar
argument_list|(
operator|*
name|this
argument_list|)
operator|.
name|combiningClass
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|QChar
operator|::
name|UnicodeVersion
name|unicodeVersion
argument_list|()
specifier|const
block|{
return|return
name|QChar
argument_list|(
operator|*
name|this
argument_list|)
operator|.
name|unicodeVersion
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|uchar
name|cell
argument_list|()
specifier|const
block|{
return|return
name|QChar
argument_list|(
operator|*
name|this
argument_list|)
operator|.
name|cell
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|uchar
name|row
argument_list|()
specifier|const
block|{
return|return
name|QChar
argument_list|(
operator|*
name|this
argument_list|)
operator|.
name|row
argument_list|()
return|;
block|}
end_expr_stmt
begin_function_decl
specifier|inline
name|void
name|setCell
parameter_list|(
name|uchar
name|cell
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|inline
name|void
name|setRow
parameter_list|(
name|uchar
name|row
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|char
name|toAscii
argument_list|()
specifier|const
block|{
return|return
name|QChar
argument_list|(
operator|*
name|this
argument_list|)
operator|.
name|toAscii
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|char
name|toLatin1
argument_list|()
specifier|const
block|{
return|return
name|QChar
argument_list|(
operator|*
name|this
argument_list|)
operator|.
name|toLatin1
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|ushort
name|unicode
argument_list|()
specifier|const
block|{
return|return
name|QChar
argument_list|(
operator|*
name|this
argument_list|)
operator|.
name|unicode
argument_list|()
return|;
block|}
end_expr_stmt
begin_function
name|ushort
modifier|&
name|unicode
parameter_list|()
block|{
return|return
name|s
operator|.
name|data
argument_list|()
index|[
name|i
index|]
operator|.
name|unicode
argument_list|()
return|;
block|}
end_function
begin_expr_stmt
unit|};
DECL|function|setRow
specifier|inline
name|void
name|QCharRef
operator|::
name|setRow
argument_list|(
argument|uchar arow
argument_list|)
block|{
name|QChar
argument_list|(
operator|*
name|this
argument_list|)
operator|.
name|setRow
argument_list|(
name|arow
argument_list|)
block|; }
DECL|function|setCell
specifier|inline
name|void
name|QCharRef
operator|::
name|setCell
argument_list|(
argument|uchar acell
argument_list|)
block|{
name|QChar
argument_list|(
operator|*
name|this
argument_list|)
operator|.
name|setCell
argument_list|(
name|acell
argument_list|)
block|; }
DECL|function|QString
specifier|inline
name|QString
operator|::
name|QString
argument_list|()
operator|:
name|d
argument_list|(
argument|shared_null.data_ptr()
argument_list|)
block|{}
DECL|function|~QString
specifier|inline
name|QString
operator|::
operator|~
name|QString
argument_list|()
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|ref
operator|.
name|deref
argument_list|()
condition|)
name|free
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|reserve
specifier|inline
name|void
name|QString
operator|::
name|reserve
argument_list|(
argument|int asize
argument_list|)
block|{
if|if
condition|(
name|d
operator|->
name|ref
operator|.
name|isShared
argument_list|()
operator|||
name|asize
operator|>
name|int
argument_list|(
name|d
operator|->
name|alloc
argument_list|)
condition|)
name|realloc
argument_list|(
name|asize
argument_list|)
expr_stmt|;
end_expr_stmt
begin_if
if|if
condition|(
operator|!
name|d
operator|->
name|capacityReserved
condition|)
block|{
comment|// cannot set unconditionally, since d could be the shared_null/shared_empty (which is const)
name|d
operator|->
name|capacityReserved
operator|=
name|true
expr_stmt|;
block|}
end_if
begin_expr_stmt
unit|}  inline
DECL|function|squeeze
name|void
name|QString
operator|::
name|squeeze
argument_list|()
block|{
if|if
condition|(
name|d
operator|->
name|ref
operator|.
name|isShared
argument_list|()
operator|||
name|d
operator|->
name|size
operator|<
name|int
argument_list|(
name|d
operator|->
name|alloc
argument_list|)
condition|)
name|realloc
argument_list|(
name|d
operator|->
name|size
argument_list|)
expr_stmt|;
end_expr_stmt
begin_if
if|if
condition|(
name|d
operator|->
name|capacityReserved
condition|)
block|{
comment|// cannot set unconditionally, since d could be shared_null or
comment|// otherwise static.
name|d
operator|->
name|capacityReserved
operator|=
name|false
expr_stmt|;
block|}
end_if
begin_expr_stmt
unit|}  inline
DECL|function|setUtf16
name|QString
operator|&
name|QString
operator|::
name|setUtf16
argument_list|(
argument|const ushort *autf16
argument_list|,
argument|int asize
argument_list|)
block|{
return|return
name|setUnicode
argument_list|(
name|reinterpret_cast
operator|<
specifier|const
name|QChar
operator|*
operator|>
operator|(
name|autf16
operator|)
argument_list|,
name|asize
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|operator
specifier|inline
name|QCharRef
name|QString
operator|::
name|operator
index|[]
operator|(
name|int
name|i
operator|)
block|{
name|Q_ASSERT
argument_list|(
name|i
operator|>=
literal|0
argument_list|)
block|;
return|return
name|QCharRef
argument_list|(
operator|*
name|this
argument_list|,
name|i
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|operator
specifier|inline
name|QCharRef
name|QString
operator|::
name|operator
index|[]
operator|(
name|uint
name|i
operator|)
block|{
return|return
name|QCharRef
argument_list|(
operator|*
name|this
argument_list|,
name|i
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|begin
specifier|inline
name|QString
operator|::
name|iterator
name|QString
operator|::
name|begin
argument_list|()
block|{
name|detach
argument_list|()
block|;
return|return
name|reinterpret_cast
operator|<
name|QChar
operator|*
operator|>
operator|(
name|d
operator|->
name|data
argument_list|()
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|begin
specifier|inline
name|QString
operator|::
name|const_iterator
name|QString
operator|::
name|begin
argument_list|()
specifier|const
block|{
return|return
name|reinterpret_cast
operator|<
specifier|const
name|QChar
operator|*
operator|>
operator|(
name|d
operator|->
name|data
argument_list|()
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|cbegin
specifier|inline
name|QString
operator|::
name|const_iterator
name|QString
operator|::
name|cbegin
argument_list|()
specifier|const
block|{
return|return
name|reinterpret_cast
operator|<
specifier|const
name|QChar
operator|*
operator|>
operator|(
name|d
operator|->
name|data
argument_list|()
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|constBegin
specifier|inline
name|QString
operator|::
name|const_iterator
name|QString
operator|::
name|constBegin
argument_list|()
specifier|const
block|{
return|return
name|reinterpret_cast
operator|<
specifier|const
name|QChar
operator|*
operator|>
operator|(
name|d
operator|->
name|data
argument_list|()
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|end
specifier|inline
name|QString
operator|::
name|iterator
name|QString
operator|::
name|end
argument_list|()
block|{
name|detach
argument_list|()
block|;
return|return
name|reinterpret_cast
operator|<
name|QChar
operator|*
operator|>
operator|(
name|d
operator|->
name|data
argument_list|()
operator|+
name|d
operator|->
name|size
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|end
specifier|inline
name|QString
operator|::
name|const_iterator
name|QString
operator|::
name|end
argument_list|()
specifier|const
block|{
return|return
name|reinterpret_cast
operator|<
specifier|const
name|QChar
operator|*
operator|>
operator|(
name|d
operator|->
name|data
argument_list|()
operator|+
name|d
operator|->
name|size
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|cend
specifier|inline
name|QString
operator|::
name|const_iterator
name|QString
operator|::
name|cend
argument_list|()
specifier|const
block|{
return|return
name|reinterpret_cast
operator|<
specifier|const
name|QChar
operator|*
operator|>
operator|(
name|d
operator|->
name|data
argument_list|()
operator|+
name|d
operator|->
name|size
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|constEnd
specifier|inline
name|QString
operator|::
name|const_iterator
name|QString
operator|::
name|constEnd
argument_list|()
specifier|const
block|{
return|return
name|reinterpret_cast
operator|<
specifier|const
name|QChar
operator|*
operator|>
operator|(
name|d
operator|->
name|data
argument_list|()
operator|+
name|d
operator|->
name|size
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|contains
specifier|inline
name|bool
name|QString
operator|::
name|contains
argument_list|(
argument|const QString&s
argument_list|,
argument|Qt::CaseSensitivity cs
argument_list|)
specifier|const
block|{
return|return
name|indexOf
argument_list|(
name|s
argument_list|,
literal|0
argument_list|,
name|cs
argument_list|)
operator|!=
operator|-
literal|1
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|contains
specifier|inline
name|bool
name|QString
operator|::
name|contains
argument_list|(
argument|const QStringRef&s
argument_list|,
argument|Qt::CaseSensitivity cs
argument_list|)
specifier|const
block|{
return|return
name|indexOf
argument_list|(
name|s
argument_list|,
literal|0
argument_list|,
name|cs
argument_list|)
operator|!=
operator|-
literal|1
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|contains
specifier|inline
name|bool
name|QString
operator|::
name|contains
argument_list|(
argument|QChar c
argument_list|,
argument|Qt::CaseSensitivity cs
argument_list|)
specifier|const
block|{
return|return
name|indexOf
argument_list|(
name|c
argument_list|,
literal|0
argument_list|,
name|cs
argument_list|)
operator|!=
operator|-
literal|1
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|operator
specifier|inline
name|bool
name|operator
operator|==
operator|(
name|QString
operator|::
name|Null
operator|,
name|QString
operator|::
name|Null
operator|)
block|{
return|return
name|true
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|operator
specifier|inline
name|bool
name|operator
operator|==
operator|(
name|QString
operator|::
name|Null
operator|,
specifier|const
name|QString
operator|&
name|s
operator|)
block|{
return|return
name|s
operator|.
name|isNull
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|operator
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QString
operator|&
name|s
operator|,
name|QString
operator|::
name|Null
operator|)
block|{
return|return
name|s
operator|.
name|isNull
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|operator
specifier|inline
name|bool
name|operator
operator|!=
operator|(
name|QString
operator|::
name|Null
operator|,
name|QString
operator|::
name|Null
operator|)
block|{
return|return
name|false
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|operator
specifier|inline
name|bool
name|operator
operator|!=
operator|(
name|QString
operator|::
name|Null
operator|,
specifier|const
name|QString
operator|&
name|s
operator|)
block|{
return|return
operator|!
name|s
operator|.
name|isNull
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|operator
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|QString
operator|&
name|s
operator|,
name|QString
operator|::
name|Null
operator|)
block|{
return|return
operator|!
name|s
operator|.
name|isNull
argument_list|()
return|;
block|}
end_expr_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CAST_FROM_ASCII
end_ifndef
begin_function
DECL|function|qStringComparisonHelper
specifier|inline
name|bool
name|qStringComparisonHelper
parameter_list|(
specifier|const
name|QString
modifier|&
name|s1
parameter_list|,
specifier|const
name|char
modifier|*
name|s2
parameter_list|)
block|{
return|return
operator|(
name|s1
operator|==
name|QLatin1String
argument_list|(
name|s2
argument_list|)
operator|)
return|;
block|}
end_function
begin_expr_stmt
DECL|function|operator
specifier|inline
name|bool
name|QString
operator|::
name|operator
operator|==
operator|(
specifier|const
name|char
operator|*
name|s
operator|)
specifier|const
block|{
return|return
name|qStringComparisonHelper
argument_list|(
operator|*
name|this
argument_list|,
name|s
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|operator
specifier|inline
name|bool
name|QString
operator|::
name|operator
operator|!=
operator|(
specifier|const
name|char
operator|*
name|s
operator|)
specifier|const
block|{
return|return
operator|!
name|qStringComparisonHelper
argument_list|(
operator|*
name|this
argument_list|,
name|s
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|operator
specifier|inline
name|bool
name|QString
operator|::
name|operator
operator|<
operator|(
specifier|const
name|char
operator|*
name|s
operator|)
specifier|const
block|{
return|return
operator|*
name|this
operator|<
name|QString
operator|::
name|fromAscii
argument_list|(
name|s
argument_list|,
name|s
operator|?
name|int
argument_list|(
name|strlen
argument_list|(
name|s
argument_list|)
argument_list|)
operator|:
operator|-
literal|1
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|operator
specifier|inline
name|bool
name|QString
operator|::
name|operator
operator|>
operator|(
specifier|const
name|char
operator|*
name|s
operator|)
specifier|const
block|{
return|return
operator|*
name|this
operator|>
name|QString
operator|::
name|fromAscii
argument_list|(
name|s
argument_list|,
name|s
operator|?
name|int
argument_list|(
name|strlen
argument_list|(
name|s
argument_list|)
argument_list|)
operator|:
operator|-
literal|1
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|member|operator
specifier|inline
name|bool
name|QString
operator|::
name|operator
operator|<=
operator|(
specifier|const
name|char
operator|*
name|s
operator|)
specifier|const
block|{
return|return
operator|*
name|this
operator|<=
name|QString
operator|::
name|fromAscii
argument_list|(
name|s
argument_list|,
name|s
operator|?
name|int
argument_list|(
name|strlen
argument_list|(
name|s
argument_list|)
argument_list|)
operator|:
operator|-
literal|1
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|QString
operator|::
name|operator
operator|>=
operator|(
specifier|const
name|char
operator|*
name|s
operator|)
specifier|const
block|{
return|return
operator|*
name|this
operator|>=
name|QString
operator|::
name|fromAscii
argument_list|(
name|s
argument_list|,
name|s
operator|?
name|int
argument_list|(
name|strlen
argument_list|(
name|s
argument_list|)
argument_list|)
operator|:
operator|-
literal|1
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QT_ASCII_CAST_WARN
name|bool
name|operator
operator|==
operator|(
specifier|const
name|char
operator|*
name|s1
operator|,
specifier|const
name|QString
operator|&
name|s2
operator|)
block|{
return|return
name|qStringComparisonHelper
argument_list|(
name|s2
argument_list|,
name|s1
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QT_ASCII_CAST_WARN
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|char
operator|*
name|s1
operator|,
specifier|const
name|QString
operator|&
name|s2
operator|)
block|{
return|return
operator|!
name|qStringComparisonHelper
argument_list|(
name|s2
argument_list|,
name|s1
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QT_ASCII_CAST_WARN
name|bool
name|operator
operator|<
operator|(
specifier|const
name|char
operator|*
name|s1
operator|,
specifier|const
name|QString
operator|&
name|s2
operator|)
block|{
return|return
operator|(
name|QString
operator|::
name|fromAscii
argument_list|(
name|s1
argument_list|,
name|s1
operator|?
name|int
argument_list|(
name|strlen
argument_list|(
name|s1
argument_list|)
argument_list|)
operator|:
operator|-
literal|1
argument_list|)
operator|<
name|s2
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QT_ASCII_CAST_WARN
name|bool
name|operator
operator|>
operator|(
specifier|const
name|char
operator|*
name|s1
operator|,
specifier|const
name|QString
operator|&
name|s2
operator|)
block|{
return|return
operator|(
name|QString
operator|::
name|fromAscii
argument_list|(
name|s1
argument_list|,
name|s1
operator|?
name|int
argument_list|(
name|strlen
argument_list|(
name|s1
argument_list|)
argument_list|)
operator|:
operator|-
literal|1
argument_list|)
operator|>
name|s2
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QT_ASCII_CAST_WARN
name|bool
name|operator
operator|<=
operator|(
specifier|const
name|char
operator|*
name|s1
operator|,
specifier|const
name|QString
operator|&
name|s2
operator|)
block|{
return|return
operator|(
name|QString
operator|::
name|fromAscii
argument_list|(
name|s1
argument_list|,
name|s1
operator|?
name|int
argument_list|(
name|strlen
argument_list|(
name|s1
argument_list|)
argument_list|)
operator|:
operator|-
literal|1
argument_list|)
operator|<=
name|s2
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QT_ASCII_CAST_WARN
name|bool
name|operator
operator|>=
operator|(
specifier|const
name|char
operator|*
name|s1
operator|,
specifier|const
name|QString
operator|&
name|s2
operator|)
block|{
return|return
operator|(
name|QString
operator|::
name|fromAscii
argument_list|(
name|s1
argument_list|,
name|s1
operator|?
name|int
argument_list|(
name|strlen
argument_list|(
name|s1
argument_list|)
argument_list|)
operator|:
operator|-
literal|1
argument_list|)
operator|>=
name|s2
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QT_ASCII_CAST_WARN
name|bool
name|operator
operator|==
operator|(
specifier|const
name|char
operator|*
name|s1
operator|,
specifier|const
name|QLatin1String
operator|&
name|s2
operator|)
block|{
return|return
name|QString
operator|::
name|fromAscii
argument_list|(
name|s1
argument_list|,
name|s1
operator|?
name|int
argument_list|(
name|strlen
argument_list|(
name|s1
argument_list|)
argument_list|)
operator|:
operator|-
literal|1
argument_list|)
operator|==
name|s2
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QT_ASCII_CAST_WARN
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|char
operator|*
name|s1
operator|,
specifier|const
name|QLatin1String
operator|&
name|s2
operator|)
block|{
return|return
name|QString
operator|::
name|fromAscii
argument_list|(
name|s1
argument_list|,
name|s1
operator|?
name|int
argument_list|(
name|strlen
argument_list|(
name|s1
argument_list|)
argument_list|)
operator|:
operator|-
literal|1
argument_list|)
operator|!=
name|s2
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QT_ASCII_CAST_WARN
name|bool
name|operator
operator|<
operator|(
specifier|const
name|char
operator|*
name|s1
operator|,
specifier|const
name|QLatin1String
operator|&
name|s2
operator|)
block|{
return|return
operator|(
name|QString
operator|::
name|fromAscii
argument_list|(
name|s1
argument_list|,
name|s1
operator|?
name|int
argument_list|(
name|strlen
argument_list|(
name|s1
argument_list|)
argument_list|)
operator|:
operator|-
literal|1
argument_list|)
operator|<
name|s2
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QT_ASCII_CAST_WARN
name|bool
name|operator
operator|>
operator|(
specifier|const
name|char
operator|*
name|s1
operator|,
specifier|const
name|QLatin1String
operator|&
name|s2
operator|)
block|{
return|return
operator|(
name|QString
operator|::
name|fromAscii
argument_list|(
name|s1
argument_list|,
name|s1
operator|?
name|int
argument_list|(
name|strlen
argument_list|(
name|s1
argument_list|)
argument_list|)
operator|:
operator|-
literal|1
argument_list|)
operator|>
name|s2
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QT_ASCII_CAST_WARN
name|bool
name|operator
operator|<=
operator|(
specifier|const
name|char
operator|*
name|s1
operator|,
specifier|const
name|QLatin1String
operator|&
name|s2
operator|)
block|{
return|return
operator|(
name|QString
operator|::
name|fromAscii
argument_list|(
name|s1
argument_list|,
name|s1
operator|?
name|int
argument_list|(
name|strlen
argument_list|(
name|s1
argument_list|)
argument_list|)
operator|:
operator|-
literal|1
argument_list|)
operator|<=
name|s2
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QT_ASCII_CAST_WARN
name|bool
name|operator
operator|>=
operator|(
specifier|const
name|char
operator|*
name|s1
operator|,
specifier|const
name|QLatin1String
operator|&
name|s2
operator|)
block|{
return|return
operator|(
name|QString
operator|::
name|fromAscii
argument_list|(
name|s1
argument_list|,
name|s1
operator|?
name|int
argument_list|(
name|strlen
argument_list|(
name|s1
argument_list|)
argument_list|)
operator|:
operator|-
literal|1
argument_list|)
operator|>=
name|s2
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QLatin1String
operator|&
name|s1
operator|,
specifier|const
name|QLatin1String
operator|&
name|s2
operator|)
block|{
return|return
operator|(
name|s1
operator|.
name|size
argument_list|()
operator|==
name|s2
operator|.
name|size
argument_list|()
operator|&&
operator|!
name|memcmp
argument_list|(
name|s1
operator|.
name|latin1
argument_list|()
argument_list|,
name|s2
operator|.
name|latin1
argument_list|()
argument_list|,
name|s1
operator|.
name|size
argument_list|()
argument_list|)
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|QLatin1String
operator|&
name|s1
operator|,
specifier|const
name|QLatin1String
operator|&
name|s2
operator|)
block|{
return|return
operator|(
name|s1
operator|.
name|size
argument_list|()
operator|!=
name|s2
operator|.
name|size
argument_list|()
operator|||
name|memcmp
argument_list|(
name|s1
operator|.
name|latin1
argument_list|()
argument_list|,
name|s2
operator|.
name|latin1
argument_list|()
argument_list|,
name|s1
operator|.
name|size
argument_list|()
argument_list|)
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|<
operator|(
specifier|const
name|QLatin1String
operator|&
name|s1
operator|,
specifier|const
name|QLatin1String
operator|&
name|s2
operator|)
block|{
name|int
name|r
operator|=
name|memcmp
argument_list|(
name|s1
operator|.
name|latin1
argument_list|()
argument_list|,
name|s2
operator|.
name|latin1
argument_list|()
argument_list|,
name|qMin
argument_list|(
name|s1
operator|.
name|size
argument_list|()
argument_list|,
name|s2
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
block|;
return|return
operator|(
name|r
operator|<
literal|0
operator|)
operator|||
operator|(
name|r
operator|==
literal|0
operator|&&
name|s1
operator|.
name|size
argument_list|()
operator|<
name|s2
operator|.
name|size
argument_list|()
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|<=
operator|(
specifier|const
name|QLatin1String
operator|&
name|s1
operator|,
specifier|const
name|QLatin1String
operator|&
name|s2
operator|)
block|{
name|int
name|r
operator|=
name|memcmp
argument_list|(
name|s1
operator|.
name|latin1
argument_list|()
argument_list|,
name|s2
operator|.
name|latin1
argument_list|()
argument_list|,
name|qMin
argument_list|(
name|s1
operator|.
name|size
argument_list|()
argument_list|,
name|s2
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
block|;
return|return
operator|(
name|r
operator|<
literal|0
operator|)
operator|||
operator|(
name|r
operator|==
literal|0
operator|&&
name|s1
operator|.
name|size
argument_list|()
operator|<=
name|s2
operator|.
name|size
argument_list|()
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|>
operator|(
specifier|const
name|QLatin1String
operator|&
name|s1
operator|,
specifier|const
name|QLatin1String
operator|&
name|s2
operator|)
block|{
name|int
name|r
operator|=
name|memcmp
argument_list|(
name|s1
operator|.
name|latin1
argument_list|()
argument_list|,
name|s2
operator|.
name|latin1
argument_list|()
argument_list|,
name|qMin
argument_list|(
name|s1
operator|.
name|size
argument_list|()
argument_list|,
name|s2
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
block|;
return|return
operator|(
name|r
operator|>
literal|0
operator|)
operator|||
operator|(
name|r
operator|==
literal|0
operator|&&
name|s1
operator|.
name|size
argument_list|()
operator|>
name|s2
operator|.
name|size
argument_list|()
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|>=
operator|(
specifier|const
name|QLatin1String
operator|&
name|s1
operator|,
specifier|const
name|QLatin1String
operator|&
name|s2
operator|)
block|{
name|int
name|r
operator|=
name|memcmp
argument_list|(
name|s1
operator|.
name|latin1
argument_list|()
argument_list|,
name|s2
operator|.
name|latin1
argument_list|()
argument_list|,
name|qMin
argument_list|(
name|s1
operator|.
name|size
argument_list|()
argument_list|,
name|s2
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
block|;
return|return
operator|(
name|r
operator|>
literal|0
operator|)
operator|||
operator|(
name|r
operator|==
literal|0
operator|&&
name|s1
operator|.
name|size
argument_list|()
operator|>=
name|s2
operator|.
name|size
argument_list|()
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|QString
operator|::
name|operator
operator|==
operator|(
specifier|const
name|QByteArray
operator|&
name|s
operator|)
specifier|const
block|{
return|return
name|qStringComparisonHelper
argument_list|(
operator|*
name|this
argument_list|,
name|s
operator|.
name|constData
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|QString
operator|::
name|operator
operator|!=
operator|(
specifier|const
name|QByteArray
operator|&
name|s
operator|)
specifier|const
block|{
return|return
operator|!
name|qStringComparisonHelper
argument_list|(
operator|*
name|this
argument_list|,
name|s
operator|.
name|constData
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|QByteArray
operator|::
name|operator
operator|==
operator|(
specifier|const
name|QString
operator|&
name|s
operator|)
specifier|const
block|{
return|return
name|qStringComparisonHelper
argument_list|(
name|s
argument_list|,
name|constData
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|QByteArray
operator|::
name|operator
operator|!=
operator|(
specifier|const
name|QString
operator|&
name|s
operator|)
specifier|const
block|{
return|return
operator|!
name|qStringComparisonHelper
argument_list|(
name|s
argument_list|,
name|constData
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|QByteArray
operator|::
name|operator
operator|<
operator|(
specifier|const
name|QString
operator|&
name|s
operator|)
specifier|const
block|{
return|return
name|QString
operator|::
name|fromAscii
argument_list|(
name|constData
argument_list|()
argument_list|,
name|size
argument_list|()
argument_list|)
operator|<
name|s
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|QByteArray
operator|::
name|operator
operator|>
operator|(
specifier|const
name|QString
operator|&
name|s
operator|)
specifier|const
block|{
return|return
name|QString
operator|::
name|fromAscii
argument_list|(
name|constData
argument_list|()
argument_list|,
name|size
argument_list|()
argument_list|)
operator|>
name|s
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|QByteArray
operator|::
name|operator
operator|<=
operator|(
specifier|const
name|QString
operator|&
name|s
operator|)
specifier|const
block|{
return|return
name|QString
operator|::
name|fromAscii
argument_list|(
name|constData
argument_list|()
argument_list|,
name|size
argument_list|()
argument_list|)
operator|<=
name|s
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|QByteArray
operator|::
name|operator
operator|>=
operator|(
specifier|const
name|QString
operator|&
name|s
operator|)
specifier|const
block|{
return|return
name|QString
operator|::
name|fromAscii
argument_list|(
name|constData
argument_list|()
argument_list|,
name|size
argument_list|()
argument_list|)
operator|>=
name|s
return|;
block|}
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_CAST_FROM_ASCII
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CAST_TO_ASCII
end_ifndef
begin_expr_stmt
specifier|inline
name|QByteArray
operator|&
name|QByteArray
operator|::
name|append
argument_list|(
argument|const QString&s
argument_list|)
block|{
return|return
name|append
argument_list|(
name|s
operator|.
name|toAscii
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QByteArray
operator|&
name|QByteArray
operator|::
name|insert
argument_list|(
argument|int i
argument_list|,
argument|const QString&s
argument_list|)
block|{
return|return
name|insert
argument_list|(
name|i
argument_list|,
name|s
operator|.
name|toAscii
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QByteArray
operator|&
name|QByteArray
operator|::
name|replace
argument_list|(
argument|char c
argument_list|,
argument|const QString&after
argument_list|)
block|{
return|return
name|replace
argument_list|(
name|c
argument_list|,
name|after
operator|.
name|toAscii
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QByteArray
operator|&
name|QByteArray
operator|::
name|replace
argument_list|(
argument|const QString&before
argument_list|,
argument|const char *after
argument_list|)
block|{
return|return
name|replace
argument_list|(
name|before
operator|.
name|toAscii
argument_list|()
argument_list|,
name|after
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QByteArray
operator|&
name|QByteArray
operator|::
name|replace
argument_list|(
argument|const QString&before
argument_list|,
argument|const QByteArray&after
argument_list|)
block|{
return|return
name|replace
argument_list|(
name|before
operator|.
name|toAscii
argument_list|()
argument_list|,
name|after
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QByteArray
operator|&
name|QByteArray
operator|::
name|operator
operator|+=
operator|(
specifier|const
name|QString
operator|&
name|s
operator|)
block|{
return|return
name|operator
operator|+=
operator|(
name|s
operator|.
name|toAscii
argument_list|()
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|int
name|QByteArray
operator|::
name|indexOf
argument_list|(
argument|const QString&s
argument_list|,
argument|int from
argument_list|)
specifier|const
block|{
return|return
name|indexOf
argument_list|(
name|s
operator|.
name|toAscii
argument_list|()
argument_list|,
name|from
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|int
name|QByteArray
operator|::
name|lastIndexOf
argument_list|(
argument|const QString&s
argument_list|,
argument|int from
argument_list|)
specifier|const
block|{
return|return
name|lastIndexOf
argument_list|(
name|s
operator|.
name|toAscii
argument_list|()
argument_list|,
name|from
argument_list|)
return|;
block|}
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_CAST_TO_ASCII
end_comment
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_USE_FAST_OPERATOR_PLUS
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_USE_QSTRINGBUILDER
argument_list|)
end_if
begin_expr_stmt
specifier|inline
specifier|const
name|QString
name|operator
operator|+
operator|(
specifier|const
name|QString
operator|&
name|s1
operator|,
specifier|const
name|QString
operator|&
name|s2
operator|)
block|{
name|QString
name|t
argument_list|(
name|s1
argument_list|)
block|;
name|t
operator|+=
name|s2
block|;
return|return
name|t
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
specifier|const
name|QString
name|operator
operator|+
operator|(
specifier|const
name|QString
operator|&
name|s1
operator|,
name|QChar
name|s2
operator|)
block|{
name|QString
name|t
argument_list|(
name|s1
argument_list|)
block|;
name|t
operator|+=
name|s2
block|;
return|return
name|t
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
specifier|const
name|QString
name|operator
operator|+
operator|(
name|QChar
name|s1
operator|,
specifier|const
name|QString
operator|&
name|s2
operator|)
block|{
name|QString
name|t
argument_list|(
name|s1
argument_list|)
block|;
name|t
operator|+=
name|s2
block|;
return|return
name|t
return|;
block|}
end_expr_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CAST_FROM_ASCII
end_ifndef
begin_expr_stmt
specifier|inline
name|QT_ASCII_CAST_WARN
specifier|const
name|QString
name|operator
operator|+
operator|(
specifier|const
name|QString
operator|&
name|s1
operator|,
specifier|const
name|char
operator|*
name|s2
operator|)
block|{
name|QString
name|t
argument_list|(
name|s1
argument_list|)
block|;
name|t
operator|+=
name|QString
operator|::
name|fromAscii
argument_list|(
name|s2
argument_list|,
name|s2
condition|?
name|int
argument_list|(
name|strlen
argument_list|(
name|s2
argument_list|)
argument_list|)
else|:
operator|-
literal|1
argument_list|)
block|;
return|return
name|t
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QT_ASCII_CAST_WARN
specifier|const
name|QString
name|operator
operator|+
operator|(
specifier|const
name|char
operator|*
name|s1
operator|,
specifier|const
name|QString
operator|&
name|s2
operator|)
block|{
name|QString
name|t
operator|=
name|QString
operator|::
name|fromAscii
argument_list|(
name|s1
argument_list|,
name|s1
operator|?
name|int
argument_list|(
name|strlen
argument_list|(
name|s1
argument_list|)
argument_list|)
operator|:
operator|-
literal|1
argument_list|)
block|;
name|t
operator|+=
name|s2
block|;
return|return
name|t
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QT_ASCII_CAST_WARN
specifier|const
name|QString
name|operator
operator|+
operator|(
name|char
name|c
operator|,
specifier|const
name|QString
operator|&
name|s
operator|)
block|{
name|QString
name|t
operator|=
name|s
block|;
name|t
operator|.
name|prepend
argument_list|(
name|QChar
operator|::
name|fromAscii
argument_list|(
name|c
argument_list|)
argument_list|)
block|;
return|return
name|t
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QT_ASCII_CAST_WARN
specifier|const
name|QString
name|operator
operator|+
operator|(
specifier|const
name|QString
operator|&
name|s
operator|,
name|char
name|c
operator|)
block|{
name|QString
name|t
operator|=
name|s
block|;
name|t
operator|+=
name|QChar
operator|::
name|fromAscii
argument_list|(
name|c
argument_list|)
block|;
return|return
name|t
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QT_ASCII_CAST_WARN
specifier|const
name|QString
name|operator
operator|+
operator|(
specifier|const
name|QByteArray
operator|&
name|ba
operator|,
specifier|const
name|QString
operator|&
name|s
operator|)
block|{
name|QString
name|t
operator|=
name|QString
operator|::
name|fromAscii
argument_list|(
name|ba
operator|.
name|constData
argument_list|()
argument_list|,
name|qstrnlen
argument_list|(
name|ba
operator|.
name|constData
argument_list|()
argument_list|,
name|ba
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
block|;
name|t
operator|+=
name|s
block|;
return|return
name|t
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QT_ASCII_CAST_WARN
specifier|const
name|QString
name|operator
operator|+
operator|(
specifier|const
name|QString
operator|&
name|s
operator|,
specifier|const
name|QByteArray
operator|&
name|ba
operator|)
block|{
name|QString
name|t
argument_list|(
name|s
argument_list|)
block|;
name|t
operator|+=
name|QString
operator|::
name|fromAscii
argument_list|(
name|ba
operator|.
name|constData
argument_list|()
argument_list|,
name|qstrnlen
argument_list|(
name|ba
operator|.
name|constData
argument_list|()
argument_list|,
name|ba
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
block|;
return|return
name|t
return|;
block|}
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_CAST_FROM_ASCII
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_USE_QSTRINGBUILDER
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_STL
end_ifndef
begin_expr_stmt
specifier|inline
name|std
operator|::
name|string
name|QString
operator|::
name|toStdString
argument_list|()
specifier|const
block|{
specifier|const
name|QByteArray
name|asc
operator|=
name|toAscii
argument_list|()
block|;
return|return
name|std
operator|::
name|string
argument_list|(
name|asc
operator|.
name|constData
argument_list|()
argument_list|,
name|asc
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QString
name|QString
operator|::
name|fromStdString
argument_list|(
argument|const std::string&s
argument_list|)
block|{
return|return
name|fromAscii
argument_list|(
name|s
operator|.
name|data
argument_list|()
argument_list|,
name|int
argument_list|(
name|s
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|std
operator|::
name|wstring
name|QString
operator|::
name|toStdWString
argument_list|()
specifier|const
block|{
name|std
operator|::
name|wstring
name|str
block|;
name|str
operator|.
name|resize
argument_list|(
name|length
argument_list|()
argument_list|)
block|;
if|#
directive|if
name|defined
argument_list|(
name|_MSC_VER
argument_list|)
operator|&&
name|_MSC_VER
operator|>=
literal|1400
comment|// VS2005 crashes if the string is empty
if|if
condition|(
operator|!
name|length
argument_list|()
condition|)
return|return
name|str
return|;
endif|#
directive|endif
name|str
operator|.
name|resize
argument_list|(
name|toWCharArray
argument_list|(
operator|&
operator|(
operator|*
name|str
operator|.
name|begin
argument_list|()
operator|)
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|str
return|;
end_return
begin_expr_stmt
unit|} inline
name|QString
name|QString
operator|::
name|fromStdWString
argument_list|(
argument|const std::wstring&s
argument_list|)
block|{
return|return
name|fromWCharArray
argument_list|(
name|s
operator|.
name|data
argument_list|()
argument_list|,
name|int
argument_list|(
name|s
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_DATASTREAM
argument_list|)
operator|||
operator|(
name|defined
argument_list|(
name|QT_BOOTSTRAPPED
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_BUILD_QMAKE
argument_list|)
operator|)
end_if
begin_expr_stmt
name|Q_CORE_EXPORT
name|QDataStream
operator|&
name|operator
operator|<<
operator|(
name|QDataStream
operator|&
operator|,
specifier|const
name|QString
operator|&
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_CORE_EXPORT
name|QDataStream
operator|&
name|operator
operator|>>
operator|(
name|QDataStream
operator|&
operator|,
name|QString
operator|&
operator|)
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
name|Q_DECLARE_TYPEINFO
argument_list|(
name|QString
argument_list|,
name|Q_MOVABLE_TYPE
argument_list|)
expr_stmt|;
end_expr_stmt
begin_macro
DECL|function|Q_DECLARE_SHARED
name|Q_DECLARE_SHARED
argument_list|(
argument|QString
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_OPERATORS_FOR_FLAGS
argument_list|(
argument|QString::SectionFlags
argument_list|)
end_macro
begin_decl_stmt
name|class
name|Q_CORE_EXPORT
name|QStringRef
block|{
specifier|const
name|QString
modifier|*
name|m_string
decl_stmt|;
name|int
name|m_position
decl_stmt|;
name|int
name|m_size
decl_stmt|;
name|public
label|:
specifier|inline
name|QStringRef
argument_list|()
operator|:
name|m_string
argument_list|(
literal|0
argument_list|)
operator|,
name|m_position
argument_list|(
literal|0
argument_list|)
operator|,
name|m_size
argument_list|(
literal|0
argument_list|)
block|{}
specifier|inline
name|QStringRef
argument_list|(
argument|const QString *string
argument_list|,
argument|int position
argument_list|,
argument|int size
argument_list|)
expr_stmt|;
specifier|inline
name|QStringRef
argument_list|(
specifier|const
name|QString
operator|*
name|string
argument_list|)
expr_stmt|;
specifier|inline
name|QStringRef
argument_list|(
specifier|const
name|QStringRef
operator|&
name|other
argument_list|)
operator|:
name|m_string
argument_list|(
name|other
operator|.
name|m_string
argument_list|)
operator|,
name|m_position
argument_list|(
name|other
operator|.
name|m_position
argument_list|)
operator|,
name|m_size
argument_list|(
argument|other.m_size
argument_list|)
block|{}
specifier|inline
operator|~
name|QStringRef
argument_list|()
block|{}
specifier|inline
specifier|const
name|QString
operator|*
name|string
argument_list|()
specifier|const
block|{
return|return
name|m_string
return|;
block|}
specifier|inline
name|int
name|position
argument_list|()
specifier|const
block|{
return|return
name|m_position
return|;
block|}
specifier|inline
name|int
name|size
argument_list|()
specifier|const
block|{
return|return
name|m_size
return|;
block|}
specifier|inline
name|int
name|count
argument_list|()
specifier|const
block|{
return|return
name|m_size
return|;
block|}
specifier|inline
name|int
name|length
argument_list|()
specifier|const
block|{
return|return
name|m_size
return|;
block|}
specifier|inline
name|QStringRef
modifier|&
name|operator
init|=
operator|(
specifier|const
name|QStringRef
operator|&
name|other
operator|)
block|{
name|m_string
operator|=
name|other
operator|.
name|m_string
block|;
name|m_position
operator|=
name|other
operator|.
name|m_position
block|;
name|m_size
operator|=
name|other
operator|.
name|m_size
block|;
return|return
operator|*
name|this
return|;
block|}
name|int
name|indexOf
argument_list|(
specifier|const
name|QString
operator|&
name|str
argument_list|,
name|int
name|from
operator|=
literal|0
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
decl_stmt|;
name|int
name|indexOf
argument_list|(
name|QChar
name|ch
argument_list|,
name|int
name|from
operator|=
literal|0
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
decl_stmt|;
name|int
name|indexOf
argument_list|(
name|QLatin1String
name|str
argument_list|,
name|int
name|from
operator|=
literal|0
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
decl_stmt|;
name|int
name|indexOf
argument_list|(
specifier|const
name|QStringRef
operator|&
name|str
argument_list|,
name|int
name|from
operator|=
literal|0
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
decl_stmt|;
name|int
name|lastIndexOf
argument_list|(
specifier|const
name|QString
operator|&
name|str
argument_list|,
name|int
name|from
operator|=
operator|-
literal|1
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
decl_stmt|;
name|int
name|lastIndexOf
argument_list|(
name|QChar
name|ch
argument_list|,
name|int
name|from
operator|=
operator|-
literal|1
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
decl_stmt|;
name|int
name|lastIndexOf
argument_list|(
name|QLatin1String
name|str
argument_list|,
name|int
name|from
operator|=
operator|-
literal|1
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
decl_stmt|;
name|int
name|lastIndexOf
argument_list|(
specifier|const
name|QStringRef
operator|&
name|str
argument_list|,
name|int
name|from
operator|=
operator|-
literal|1
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
decl_stmt|;
specifier|inline
name|bool
name|contains
argument_list|(
specifier|const
name|QString
operator|&
name|str
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
decl_stmt|;
specifier|inline
name|bool
name|contains
argument_list|(
name|QChar
name|ch
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
decl_stmt|;
specifier|inline
name|bool
name|contains
argument_list|(
name|QLatin1String
name|str
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
decl_stmt|;
specifier|inline
name|bool
name|contains
argument_list|(
specifier|const
name|QStringRef
operator|&
name|str
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
decl_stmt|;
name|int
name|count
argument_list|(
specifier|const
name|QString
operator|&
name|s
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
decl_stmt|;
name|int
name|count
argument_list|(
name|QChar
name|c
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
decl_stmt|;
name|int
name|count
argument_list|(
specifier|const
name|QStringRef
operator|&
name|s
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
decl_stmt|;
name|bool
name|startsWith
argument_list|(
specifier|const
name|QString
operator|&
name|s
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
decl_stmt|;
name|bool
name|startsWith
argument_list|(
name|QLatin1String
name|s
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
decl_stmt|;
name|bool
name|startsWith
argument_list|(
name|QChar
name|c
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
decl_stmt|;
name|bool
name|startsWith
argument_list|(
specifier|const
name|QStringRef
operator|&
name|c
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
decl_stmt|;
name|bool
name|endsWith
argument_list|(
specifier|const
name|QString
operator|&
name|s
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
decl_stmt|;
name|bool
name|endsWith
argument_list|(
name|QLatin1String
name|s
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
decl_stmt|;
name|bool
name|endsWith
argument_list|(
name|QChar
name|c
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
decl_stmt|;
name|bool
name|endsWith
argument_list|(
specifier|const
name|QStringRef
operator|&
name|c
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
decl_stmt|;
specifier|inline
name|QStringRef
modifier|&
name|operator
init|=
operator|(
specifier|const
name|QString
operator|*
name|string
operator|)
decl_stmt|;
specifier|inline
specifier|const
name|QChar
operator|*
name|unicode
argument_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|m_string
condition|)
return|return
name|reinterpret_cast
operator|<
specifier|const
name|QChar
operator|*
operator|>
operator|(
name|QString
operator|::
name|shared_null
operator|.
name|str
operator|.
name|data
argument_list|()
operator|)
return|;
return|return
name|m_string
operator|->
name|unicode
argument_list|()
operator|+
name|m_position
return|;
block|}
end_decl_stmt
begin_expr_stmt
specifier|inline
specifier|const
name|QChar
operator|*
name|data
argument_list|()
specifier|const
block|{
return|return
name|unicode
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
specifier|const
name|QChar
operator|*
name|constData
argument_list|()
specifier|const
block|{
return|return
name|unicode
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|QByteArray
name|toAscii
argument_list|()
specifier|const
name|Q_REQUIRED_RESULT
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QByteArray
name|toLatin1
argument_list|()
specifier|const
name|Q_REQUIRED_RESULT
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QByteArray
name|toUtf8
argument_list|()
specifier|const
name|Q_REQUIRED_RESULT
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QByteArray
name|toLocal8Bit
argument_list|()
specifier|const
name|Q_REQUIRED_RESULT
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QVector
operator|<
name|uint
operator|>
name|toUcs4
argument_list|()
specifier|const
name|Q_REQUIRED_RESULT
expr_stmt|;
end_expr_stmt
begin_function
specifier|inline
name|void
name|clear
parameter_list|()
block|{
name|m_string
operator|=
literal|0
expr_stmt|;
name|m_position
operator|=
name|m_size
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_expr_stmt
name|QString
name|toString
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|isEmpty
argument_list|()
specifier|const
block|{
return|return
name|m_size
operator|==
literal|0
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|isNull
argument_list|()
specifier|const
block|{
return|return
name|m_string
operator|==
literal|0
operator|||
name|m_string
operator|->
name|isNull
argument_list|()
return|;
block|}
end_expr_stmt
begin_decl_stmt
name|QStringRef
name|appendTo
argument_list|(
name|QString
operator|*
name|string
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|inline
specifier|const
name|QChar
name|at
argument_list|(
name|int
name|i
argument_list|)
decl|const
block|{
name|Q_ASSERT
argument_list|(
name|i
operator|>=
literal|0
operator|&&
name|i
operator|<
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|m_string
operator|->
name|at
argument_list|(
name|i
operator|+
name|m_position
argument_list|)
return|;
block|}
end_decl_stmt
begin_decl_stmt
name|int
name|compare
argument_list|(
specifier|const
name|QString
operator|&
name|s
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|int
name|compare
argument_list|(
specifier|const
name|QStringRef
operator|&
name|s
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|int
name|compare
argument_list|(
name|QLatin1String
name|s
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|static
name|int
name|compare
argument_list|(
specifier|const
name|QStringRef
operator|&
name|s1
argument_list|,
specifier|const
name|QString
operator|&
name|s2
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|static
name|int
name|compare
argument_list|(
specifier|const
name|QStringRef
operator|&
name|s1
argument_list|,
specifier|const
name|QStringRef
operator|&
name|s2
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|static
name|int
name|compare
argument_list|(
specifier|const
name|QStringRef
operator|&
name|s1
argument_list|,
name|QLatin1String
name|s2
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|int
name|localeAwareCompare
argument_list|(
specifier|const
name|QString
operator|&
name|s
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|int
name|localeAwareCompare
argument_list|(
specifier|const
name|QStringRef
operator|&
name|s
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_function_decl
specifier|static
name|int
name|localeAwareCompare
parameter_list|(
specifier|const
name|QStringRef
modifier|&
name|s1
parameter_list|,
specifier|const
name|QString
modifier|&
name|s2
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|int
name|localeAwareCompare
parameter_list|(
specifier|const
name|QStringRef
modifier|&
name|s1
parameter_list|,
specifier|const
name|QStringRef
modifier|&
name|s2
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
unit|};
DECL|member|operator
specifier|inline
name|QStringRef
operator|&
name|QStringRef
operator|::
name|operator
operator|=
operator|(
specifier|const
name|QString
operator|*
name|aString
operator|)
block|{
name|m_string
operator|=
name|aString
block|;
name|m_position
operator|=
literal|0
block|;
name|m_size
operator|=
name|aString
condition|?
name|aString
operator|->
name|size
argument_list|()
else|:
literal|0
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QStringRef
operator|::
name|QStringRef
argument_list|(
argument|const QString *aString
argument_list|,
argument|int aPosition
argument_list|,
argument|int aSize
argument_list|)
DECL|function|m_size
operator|:
name|m_string
argument_list|(
name|aString
argument_list|)
operator|,
name|m_position
argument_list|(
name|aPosition
argument_list|)
operator|,
name|m_size
argument_list|(
argument|aSize
argument_list|)
block|{}
DECL|function|QStringRef
specifier|inline
name|QStringRef
operator|::
name|QStringRef
argument_list|(
specifier|const
name|QString
operator|*
name|aString
argument_list|)
operator|:
name|m_string
argument_list|(
name|aString
argument_list|)
operator|,
name|m_position
argument_list|(
literal|0
argument_list|)
operator|,
name|m_size
argument_list|(
argument|aString?aString->size() :
literal|0
argument_list|)
block|{}
name|Q_CORE_EXPORT
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QStringRef
operator|&
name|s1
operator|,
specifier|const
name|QStringRef
operator|&
name|s2
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|function|operator
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|QStringRef
operator|&
name|s1
operator|,
specifier|const
name|QStringRef
operator|&
name|s2
operator|)
block|{
return|return
operator|!
operator|(
name|s1
operator|==
name|s2
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|Q_CORE_EXPORT
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QString
operator|&
name|s1
operator|,
specifier|const
name|QStringRef
operator|&
name|s2
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|function|operator
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|QString
operator|&
name|s1
operator|,
specifier|const
name|QStringRef
operator|&
name|s2
operator|)
block|{
return|return
operator|!
operator|(
name|s1
operator|==
name|s2
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|operator
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QStringRef
operator|&
name|s1
operator|,
specifier|const
name|QString
operator|&
name|s2
operator|)
block|{
return|return
name|s2
operator|==
name|s1
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|operator
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|QStringRef
operator|&
name|s1
operator|,
specifier|const
name|QString
operator|&
name|s2
operator|)
block|{
return|return
name|s2
operator|!=
name|s1
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|Q_CORE_EXPORT
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QLatin1String
operator|&
name|s1
operator|,
specifier|const
name|QStringRef
operator|&
name|s2
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|function|operator
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|QLatin1String
operator|&
name|s1
operator|,
specifier|const
name|QStringRef
operator|&
name|s2
operator|)
block|{
return|return
operator|!
operator|(
name|s1
operator|==
name|s2
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|operator
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QStringRef
operator|&
name|s1
operator|,
specifier|const
name|QLatin1String
operator|&
name|s2
operator|)
block|{
return|return
name|s2
operator|==
name|s1
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|operator
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|QStringRef
operator|&
name|s1
operator|,
specifier|const
name|QLatin1String
operator|&
name|s2
operator|)
block|{
return|return
name|s2
operator|!=
name|s1
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|Q_CORE_EXPORT
name|bool
name|operator
operator|<
operator|(
specifier|const
name|QStringRef
operator|&
name|s1
operator|,
specifier|const
name|QStringRef
operator|&
name|s2
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|function|operator
specifier|inline
name|bool
name|operator
operator|>
operator|(
specifier|const
name|QStringRef
operator|&
name|s1
operator|,
specifier|const
name|QStringRef
operator|&
name|s2
operator|)
block|{
return|return
name|s2
operator|<
name|s1
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|<=
operator|(
specifier|const
name|QStringRef
operator|&
name|s1
operator|,
specifier|const
name|QStringRef
operator|&
name|s2
operator|)
block|{
return|return
operator|!
operator|(
name|s1
operator|>
name|s2
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|>=
operator|(
specifier|const
name|QStringRef
operator|&
name|s1
operator|,
specifier|const
name|QStringRef
operator|&
name|s2
operator|)
block|{
return|return
operator|!
operator|(
name|s1
operator|<
name|s2
operator|)
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|bool
name|qStringComparisonHelper
parameter_list|(
specifier|const
name|QStringRef
modifier|&
name|s1
parameter_list|,
specifier|const
name|char
modifier|*
name|s2
parameter_list|)
block|{
return|return
operator|(
name|s1
operator|==
name|QLatin1String
argument_list|(
name|s2
argument_list|)
operator|)
return|;
block|}
end_function
begin_expr_stmt
specifier|inline
name|QT_ASCII_CAST_WARN
name|bool
name|operator
operator|==
operator|(
specifier|const
name|char
operator|*
name|s1
operator|,
specifier|const
name|QStringRef
operator|&
name|s2
operator|)
block|{
return|return
name|qStringComparisonHelper
argument_list|(
name|s2
argument_list|,
name|s1
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QT_ASCII_CAST_WARN
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QStringRef
operator|&
name|s1
operator|,
specifier|const
name|char
operator|*
name|s2
operator|)
block|{
return|return
name|qStringComparisonHelper
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QT_ASCII_CAST_WARN
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|char
operator|*
name|s1
operator|,
specifier|const
name|QStringRef
operator|&
name|s2
operator|)
block|{
return|return
operator|!
name|qStringComparisonHelper
argument_list|(
name|s2
argument_list|,
name|s1
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QT_ASCII_CAST_WARN
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|QStringRef
operator|&
name|s1
operator|,
specifier|const
name|char
operator|*
name|s2
operator|)
block|{
return|return
operator|!
name|qStringComparisonHelper
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|int
name|QString
operator|::
name|compare
argument_list|(
argument|const QStringRef&s
argument_list|,
argument|Qt::CaseSensitivity cs
argument_list|)
specifier|const
block|{
return|return
name|QString
operator|::
name|compare_helper
argument_list|(
name|constData
argument_list|()
argument_list|,
name|length
argument_list|()
argument_list|,
name|s
operator|.
name|constData
argument_list|()
argument_list|,
name|s
operator|.
name|length
argument_list|()
argument_list|,
name|cs
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|int
name|QString
operator|::
name|compare
argument_list|(
argument|const QString&s1
argument_list|,
argument|const QStringRef&s2
argument_list|,
argument|Qt::CaseSensitivity cs
argument_list|)
block|{
return|return
name|QString
operator|::
name|compare_helper
argument_list|(
name|s1
operator|.
name|constData
argument_list|()
argument_list|,
name|s1
operator|.
name|length
argument_list|()
argument_list|,
name|s2
operator|.
name|constData
argument_list|()
argument_list|,
name|s2
operator|.
name|length
argument_list|()
argument_list|,
name|cs
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|int
name|QStringRef
operator|::
name|compare
argument_list|(
argument|const QString&s
argument_list|,
argument|Qt::CaseSensitivity cs
argument_list|)
specifier|const
block|{
return|return
name|QString
operator|::
name|compare_helper
argument_list|(
name|constData
argument_list|()
argument_list|,
name|length
argument_list|()
argument_list|,
name|s
operator|.
name|constData
argument_list|()
argument_list|,
name|s
operator|.
name|length
argument_list|()
argument_list|,
name|cs
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|int
name|QStringRef
operator|::
name|compare
argument_list|(
argument|const QStringRef&s
argument_list|,
argument|Qt::CaseSensitivity cs
argument_list|)
specifier|const
block|{
return|return
name|QString
operator|::
name|compare_helper
argument_list|(
name|constData
argument_list|()
argument_list|,
name|length
argument_list|()
argument_list|,
name|s
operator|.
name|constData
argument_list|()
argument_list|,
name|s
operator|.
name|length
argument_list|()
argument_list|,
name|cs
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|int
name|QStringRef
operator|::
name|compare
argument_list|(
argument|QLatin1String s
argument_list|,
argument|Qt::CaseSensitivity cs
argument_list|)
specifier|const
block|{
return|return
name|QString
operator|::
name|compare_helper
argument_list|(
name|constData
argument_list|()
argument_list|,
name|length
argument_list|()
argument_list|,
name|s
argument_list|,
name|cs
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|int
name|QStringRef
operator|::
name|compare
argument_list|(
argument|const QStringRef&s1
argument_list|,
argument|const QString&s2
argument_list|,
argument|Qt::CaseSensitivity cs
argument_list|)
block|{
return|return
name|QString
operator|::
name|compare_helper
argument_list|(
name|s1
operator|.
name|constData
argument_list|()
argument_list|,
name|s1
operator|.
name|length
argument_list|()
argument_list|,
name|s2
operator|.
name|constData
argument_list|()
argument_list|,
name|s2
operator|.
name|length
argument_list|()
argument_list|,
name|cs
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|int
name|QStringRef
operator|::
name|compare
argument_list|(
argument|const QStringRef&s1
argument_list|,
argument|const QStringRef&s2
argument_list|,
argument|Qt::CaseSensitivity cs
argument_list|)
block|{
return|return
name|QString
operator|::
name|compare_helper
argument_list|(
name|s1
operator|.
name|constData
argument_list|()
argument_list|,
name|s1
operator|.
name|length
argument_list|()
argument_list|,
name|s2
operator|.
name|constData
argument_list|()
argument_list|,
name|s2
operator|.
name|length
argument_list|()
argument_list|,
name|cs
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|int
name|QStringRef
operator|::
name|compare
argument_list|(
argument|const QStringRef&s1
argument_list|,
argument|QLatin1String s2
argument_list|,
argument|Qt::CaseSensitivity cs
argument_list|)
block|{
return|return
name|QString
operator|::
name|compare_helper
argument_list|(
name|s1
operator|.
name|constData
argument_list|()
argument_list|,
name|s1
operator|.
name|length
argument_list|()
argument_list|,
name|s2
argument_list|,
name|cs
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|int
name|QString
operator|::
name|localeAwareCompare
argument_list|(
argument|const QStringRef&s
argument_list|)
specifier|const
block|{
return|return
name|localeAwareCompare_helper
argument_list|(
name|constData
argument_list|()
argument_list|,
name|length
argument_list|()
argument_list|,
name|s
operator|.
name|constData
argument_list|()
argument_list|,
name|s
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|int
name|QString
operator|::
name|localeAwareCompare
argument_list|(
argument|const QString& s1
argument_list|,
argument|const QStringRef& s2
argument_list|)
block|{
return|return
name|localeAwareCompare_helper
argument_list|(
name|s1
operator|.
name|constData
argument_list|()
argument_list|,
name|s1
operator|.
name|length
argument_list|()
argument_list|,
name|s2
operator|.
name|constData
argument_list|()
argument_list|,
name|s2
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|int
name|QStringRef
operator|::
name|localeAwareCompare
argument_list|(
argument|const QString&s
argument_list|)
specifier|const
block|{
return|return
name|QString
operator|::
name|localeAwareCompare_helper
argument_list|(
name|constData
argument_list|()
argument_list|,
name|length
argument_list|()
argument_list|,
name|s
operator|.
name|constData
argument_list|()
argument_list|,
name|s
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|int
name|QStringRef
operator|::
name|localeAwareCompare
argument_list|(
argument|const QStringRef&s
argument_list|)
specifier|const
block|{
return|return
name|QString
operator|::
name|localeAwareCompare_helper
argument_list|(
name|constData
argument_list|()
argument_list|,
name|length
argument_list|()
argument_list|,
name|s
operator|.
name|constData
argument_list|()
argument_list|,
name|s
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|int
name|QStringRef
operator|::
name|localeAwareCompare
argument_list|(
argument|const QStringRef&s1
argument_list|,
argument|const QString&s2
argument_list|)
block|{
return|return
name|QString
operator|::
name|localeAwareCompare_helper
argument_list|(
name|s1
operator|.
name|constData
argument_list|()
argument_list|,
name|s1
operator|.
name|length
argument_list|()
argument_list|,
name|s2
operator|.
name|constData
argument_list|()
argument_list|,
name|s2
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|int
name|QStringRef
operator|::
name|localeAwareCompare
argument_list|(
argument|const QStringRef&s1
argument_list|,
argument|const QStringRef&s2
argument_list|)
block|{
return|return
name|QString
operator|::
name|localeAwareCompare_helper
argument_list|(
name|s1
operator|.
name|constData
argument_list|()
argument_list|,
name|s1
operator|.
name|length
argument_list|()
argument_list|,
name|s2
operator|.
name|constData
argument_list|()
argument_list|,
name|s2
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|QStringRef
operator|::
name|contains
argument_list|(
argument|const QString&s
argument_list|,
argument|Qt::CaseSensitivity cs
argument_list|)
specifier|const
block|{
return|return
name|indexOf
argument_list|(
name|s
argument_list|,
literal|0
argument_list|,
name|cs
argument_list|)
operator|!=
operator|-
literal|1
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|QStringRef
operator|::
name|contains
argument_list|(
argument|QLatin1String s
argument_list|,
argument|Qt::CaseSensitivity cs
argument_list|)
specifier|const
block|{
return|return
name|indexOf
argument_list|(
name|s
argument_list|,
literal|0
argument_list|,
name|cs
argument_list|)
operator|!=
operator|-
literal|1
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|QStringRef
operator|::
name|contains
argument_list|(
argument|QChar c
argument_list|,
argument|Qt::CaseSensitivity cs
argument_list|)
specifier|const
block|{
return|return
name|indexOf
argument_list|(
name|c
argument_list|,
literal|0
argument_list|,
name|cs
argument_list|)
operator|!=
operator|-
literal|1
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|QStringRef
operator|::
name|contains
argument_list|(
argument|const QStringRef&s
argument_list|,
argument|Qt::CaseSensitivity cs
argument_list|)
specifier|const
block|{
return|return
name|indexOf
argument_list|(
name|s
argument_list|,
literal|0
argument_list|,
name|cs
argument_list|)
operator|!=
operator|-
literal|1
return|;
block|}
end_expr_stmt
begin_decl_stmt
name|namespace
name|Qt
block|{
if|#
directive|if
name|QT_DEPRECATED_SINCE
argument_list|(
literal|5
operator|,
literal|0
argument_list|)
name|QT_DEPRECATED
specifier|inline
name|QString
name|escape
parameter_list|(
specifier|const
name|QString
modifier|&
name|plain
parameter_list|)
block|{
return|return
name|plain
operator|.
name|toHtmlEscaped
argument_list|()
return|;
block|}
endif|#
directive|endif
block|}
end_decl_stmt
begin_expr_stmt
name|QT_END_NAMESPACE
name|QT_END_HEADER
end_expr_stmt
begin_if
if|#
directive|if
name|defined
argument_list|(
name|QT_USE_FAST_OPERATOR_PLUS
argument_list|)
operator|||
name|defined
argument_list|(
name|QT_USE_QSTRINGBUILDER
argument_list|)
end_if
begin_include
include|#
directive|include
file|<QtCore/qstringbuilder.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QSTRING_H
end_comment
end_unit
