begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Copyright (C) 2015 KlarÃ¤lvdalens Datakonsult AB, a KDAB Group company, info@kdab.com, author Marc Mutz<marc.mutz@kdab.com> ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QHASHFUNCTIONS_H
end_ifndef
begin_define
DECL|macro|QHASHFUNCTIONS_H
define|#
directive|define
name|QHASHFUNCTIONS_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qchar.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qpair.h>
end_include
begin_include
include|#
directive|include
file|<numeric>
end_include
begin_comment
comment|// for std::accumulate
end_comment
begin_if
if|#
directive|if
literal|0
end_if
begin_pragma
pragma|#
directive|pragma
name|qt_class
name|(
name|QHashFunctions
name|)
end_pragma
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_CC_MSVC
argument_list|)
end_if
begin_pragma
pragma|#
directive|pragma
name|warning
name|(
name|push
name|)
end_pragma
begin_pragma
pragma|#
directive|pragma
name|warning
name|(
name|disable
name|:
name|4311
name|)
end_pragma
begin_comment
comment|// disable pointer truncation warning
end_comment
begin_pragma
pragma|#
directive|pragma
name|warning
name|(
name|disable
name|:
name|4127
name|)
end_pragma
begin_comment
comment|// conditional expression is constant
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QBitArray
name|class
name|QBitArray
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QByteArray
name|class
name|QByteArray
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QString
name|class
name|QString
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QStringRef
name|class
name|QStringRef
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QLatin1String
name|class
name|QLatin1String
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|Q_CORE_EXPORT
name|Q_DECL_PURE_FUNCTION
name|uint
name|qHashBits
argument_list|(
specifier|const
name|void
operator|*
name|p
argument_list|,
name|size_t
name|size
argument_list|,
name|uint
name|seed
operator|=
literal|0
argument_list|)
name|Q_DECL_NOTHROW
decl_stmt|;
end_decl_stmt
begin_function
name|Q_DECL_CONST_FUNCTION
name|Q_DECL_CONSTEXPR
specifier|inline
name|uint
name|qHash
parameter_list|(
name|char
name|key
parameter_list|,
name|uint
name|seed
init|=
literal|0
parameter_list|)
function|Q_DECL_NOTHROW
block|{
return|return
name|uint
argument_list|(
name|key
argument_list|)
operator|^
name|seed
return|;
block|}
end_function
begin_function
name|Q_DECL_CONST_FUNCTION
name|Q_DECL_CONSTEXPR
specifier|inline
name|uint
name|qHash
parameter_list|(
name|uchar
name|key
parameter_list|,
name|uint
name|seed
init|=
literal|0
parameter_list|)
function|Q_DECL_NOTHROW
block|{
return|return
name|uint
argument_list|(
name|key
argument_list|)
operator|^
name|seed
return|;
block|}
end_function
begin_function
name|Q_DECL_CONST_FUNCTION
name|Q_DECL_CONSTEXPR
specifier|inline
name|uint
name|qHash
parameter_list|(
name|signed
name|char
name|key
parameter_list|,
name|uint
name|seed
init|=
literal|0
parameter_list|)
function|Q_DECL_NOTHROW
block|{
return|return
name|uint
argument_list|(
name|key
argument_list|)
operator|^
name|seed
return|;
block|}
end_function
begin_function
name|Q_DECL_CONST_FUNCTION
name|Q_DECL_CONSTEXPR
specifier|inline
name|uint
name|qHash
parameter_list|(
name|ushort
name|key
parameter_list|,
name|uint
name|seed
init|=
literal|0
parameter_list|)
function|Q_DECL_NOTHROW
block|{
return|return
name|uint
argument_list|(
name|key
argument_list|)
operator|^
name|seed
return|;
block|}
end_function
begin_function
name|Q_DECL_CONST_FUNCTION
name|Q_DECL_CONSTEXPR
specifier|inline
name|uint
name|qHash
parameter_list|(
name|short
name|key
parameter_list|,
name|uint
name|seed
init|=
literal|0
parameter_list|)
function|Q_DECL_NOTHROW
block|{
return|return
name|uint
argument_list|(
name|key
argument_list|)
operator|^
name|seed
return|;
block|}
end_function
begin_function
name|Q_DECL_CONST_FUNCTION
name|Q_DECL_CONSTEXPR
specifier|inline
name|uint
name|qHash
parameter_list|(
name|uint
name|key
parameter_list|,
name|uint
name|seed
init|=
literal|0
parameter_list|)
function|Q_DECL_NOTHROW
block|{
return|return
name|key
operator|^
name|seed
return|;
block|}
end_function
begin_function
name|Q_DECL_CONST_FUNCTION
name|Q_DECL_CONSTEXPR
specifier|inline
name|uint
name|qHash
parameter_list|(
name|int
name|key
parameter_list|,
name|uint
name|seed
init|=
literal|0
parameter_list|)
function|Q_DECL_NOTHROW
block|{
return|return
name|uint
argument_list|(
name|key
argument_list|)
operator|^
name|seed
return|;
block|}
end_function
begin_function
name|Q_DECL_CONST_FUNCTION
name|Q_DECL_CONSTEXPR
specifier|inline
name|uint
name|qHash
parameter_list|(
name|ulong
name|key
parameter_list|,
name|uint
name|seed
init|=
literal|0
parameter_list|)
function|Q_DECL_NOTHROW
block|{
return|return
operator|(
sizeof|sizeof
argument_list|(
name|ulong
argument_list|)
operator|>
sizeof|sizeof
argument_list|(
name|uint
argument_list|)
operator|)
condition|?
operator|(
name|uint
argument_list|(
operator|(
operator|(
name|key
operator|>>
operator|(
literal|8
operator|*
sizeof|sizeof
argument_list|(
name|uint
argument_list|)
operator|-
literal|1
operator|)
operator|)
operator|^
name|key
operator|)
operator|&
operator|(
operator|~
literal|0U
operator|)
argument_list|)
operator|^
name|seed
operator|)
else|:
operator|(
name|uint
argument_list|(
name|key
operator|&
operator|(
operator|~
literal|0U
operator|)
argument_list|)
operator|^
name|seed
operator|)
return|;
block|}
end_function
begin_function
name|Q_DECL_CONST_FUNCTION
name|Q_DECL_CONSTEXPR
specifier|inline
name|uint
name|qHash
parameter_list|(
name|long
name|key
parameter_list|,
name|uint
name|seed
init|=
literal|0
parameter_list|)
function|Q_DECL_NOTHROW
block|{
return|return
name|qHash
argument_list|(
name|ulong
argument_list|(
name|key
argument_list|)
argument_list|,
name|seed
argument_list|)
return|;
block|}
end_function
begin_function
name|Q_DECL_CONST_FUNCTION
name|Q_DECL_CONSTEXPR
specifier|inline
name|uint
name|qHash
parameter_list|(
name|quint64
name|key
parameter_list|,
name|uint
name|seed
init|=
literal|0
parameter_list|)
function|Q_DECL_NOTHROW
block|{
return|return
name|uint
argument_list|(
operator|(
operator|(
name|key
operator|>>
operator|(
literal|8
operator|*
sizeof|sizeof
argument_list|(
name|uint
argument_list|)
operator|-
literal|1
operator|)
operator|)
operator|^
name|key
operator|)
operator|&
operator|(
operator|~
literal|0U
operator|)
argument_list|)
operator|^
name|seed
return|;
block|}
end_function
begin_function
name|Q_DECL_CONST_FUNCTION
name|Q_DECL_CONSTEXPR
specifier|inline
name|uint
name|qHash
parameter_list|(
name|qint64
name|key
parameter_list|,
name|uint
name|seed
init|=
literal|0
parameter_list|)
function|Q_DECL_NOTHROW
block|{
return|return
name|qHash
argument_list|(
name|quint64
argument_list|(
name|key
argument_list|)
argument_list|,
name|seed
argument_list|)
return|;
block|}
end_function
begin_decl_stmt
name|Q_CORE_EXPORT
name|Q_DECL_CONST_FUNCTION
name|uint
name|qHash
argument_list|(
name|float
name|key
argument_list|,
name|uint
name|seed
operator|=
literal|0
argument_list|)
name|Q_DECL_NOTHROW
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|Q_CORE_EXPORT
name|Q_DECL_CONST_FUNCTION
name|uint
name|qHash
argument_list|(
name|double
name|key
argument_list|,
name|uint
name|seed
operator|=
literal|0
argument_list|)
name|Q_DECL_NOTHROW
decl_stmt|;
end_decl_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|Q_OS_DARWIN
end_ifndef
begin_decl_stmt
name|Q_CORE_EXPORT
name|Q_DECL_CONST_FUNCTION
name|uint
name|qHash
argument_list|(
name|long
name|double
name|key
argument_list|,
name|uint
name|seed
operator|=
literal|0
argument_list|)
name|Q_DECL_NOTHROW
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_function
name|Q_DECL_CONST_FUNCTION
name|Q_DECL_CONSTEXPR
specifier|inline
name|uint
name|qHash
parameter_list|(
specifier|const
name|QChar
name|key
parameter_list|,
name|uint
name|seed
init|=
literal|0
parameter_list|)
function|Q_DECL_NOTHROW
block|{
return|return
name|qHash
argument_list|(
name|key
operator|.
name|unicode
argument_list|()
argument_list|,
name|seed
argument_list|)
return|;
block|}
end_function
begin_decl_stmt
name|Q_CORE_EXPORT
name|Q_DECL_PURE_FUNCTION
name|uint
name|qHash
argument_list|(
specifier|const
name|QByteArray
operator|&
name|key
argument_list|,
name|uint
name|seed
operator|=
literal|0
argument_list|)
name|Q_DECL_NOTHROW
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|Q_CORE_EXPORT
name|Q_DECL_PURE_FUNCTION
name|uint
name|qHash
argument_list|(
specifier|const
name|QString
operator|&
name|key
argument_list|,
name|uint
name|seed
operator|=
literal|0
argument_list|)
name|Q_DECL_NOTHROW
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|Q_CORE_EXPORT
name|Q_DECL_PURE_FUNCTION
name|uint
name|qHash
argument_list|(
specifier|const
name|QStringRef
operator|&
name|key
argument_list|,
name|uint
name|seed
operator|=
literal|0
argument_list|)
name|Q_DECL_NOTHROW
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|Q_CORE_EXPORT
name|Q_DECL_PURE_FUNCTION
name|uint
name|qHash
argument_list|(
specifier|const
name|QBitArray
operator|&
name|key
argument_list|,
name|uint
name|seed
operator|=
literal|0
argument_list|)
name|Q_DECL_NOTHROW
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|Q_CORE_EXPORT
name|Q_DECL_PURE_FUNCTION
name|uint
name|qHash
argument_list|(
name|QLatin1String
name|key
argument_list|,
name|uint
name|seed
operator|=
literal|0
argument_list|)
name|Q_DECL_NOTHROW
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|Q_CORE_EXPORT
name|Q_DECL_PURE_FUNCTION
name|uint
name|qt_hash
argument_list|(
specifier|const
name|QString
operator|&
name|key
argument_list|)
name|Q_DECL_NOTHROW
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|Q_CORE_EXPORT
name|Q_DECL_PURE_FUNCTION
name|uint
name|qt_hash
argument_list|(
specifier|const
name|QStringRef
operator|&
name|key
argument_list|)
name|Q_DECL_NOTHROW
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
specifier|inline
name|uint
name|qHash
argument_list|(
argument|const T *key
argument_list|,
argument|uint seed =
literal|0
argument_list|)
name|Q_DECL_NOTHROW
block|{
return|return
name|qHash
argument_list|(
name|reinterpret_cast
operator|<
name|quintptr
operator|>
operator|(
name|key
operator|)
argument_list|,
name|seed
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|uint
name|qHash
argument_list|(
argument|const T&t
argument_list|,
argument|uint seed
argument_list|)
DECL|function|noexcept
name|Q_DECL_NOEXCEPT_EXPR
argument_list|(
argument|noexcept(qHash(t))
argument_list|)
block|{
return|return
name|qHash
argument_list|(
name|t
argument_list|)
operator|^
name|seed
return|;
block|}
end_expr_stmt
begin_decl_stmt
name|namespace
name|QtPrivate
block|{
struct|struct
name|QHashCombine
block|{
typedef|typedef
name|uint
name|result_type
typedef|;
name|template
operator|<
name|typename
name|T
operator|>
name|Q_DECL_CONSTEXPR
name|result_type
name|operator
argument_list|()
operator|(
name|uint
name|seed
operator|,
specifier|const
name|T
operator|&
name|t
operator|)
specifier|const
name|Q_DECL_NOEXCEPT_EXPR
argument_list|(
argument|noexcept(qHash(t))
argument_list|)
comment|// combiner taken from N3876 / boost::hash_combine
block|{
return|return
name|seed
operator|^
operator|(
name|qHash
argument_list|(
name|t
argument_list|)
operator|+
literal|0x9e3779b9
operator|+
operator|(
name|seed
operator|<<
literal|6
operator|)
operator|+
operator|(
name|seed
operator|>>
literal|2
operator|)
operator|)
return|;
block|}
block|}
struct|;
struct|struct
name|QHashCombineCommutative
block|{
comment|// QHashCombine is a good hash combiner, but is not commutative,
comment|// ie. it depends on the order of the input elements. That is
comment|// usually what we want: {0,1,3} should hash differently than
comment|// {1,3,0}. Except when it isn't (e.g. for QSet and
comment|// QHash). Therefore, provide a commutative combiner, too.
typedef|typedef
name|uint
name|result_type
typedef|;
name|template
operator|<
name|typename
name|T
operator|>
name|Q_DECL_CONSTEXPR
name|result_type
name|operator
argument_list|()
operator|(
name|uint
name|seed
operator|,
specifier|const
name|T
operator|&
name|t
operator|)
specifier|const
name|Q_DECL_NOEXCEPT_EXPR
argument_list|(
argument|noexcept(qHash(t))
argument_list|)
block|{
return|return
name|seed
operator|+
name|qHash
argument_list|(
name|t
argument_list|)
return|;
block|}
comment|// don't use xor!
block|}
struct|;
block|}
end_decl_stmt
begin_comment
comment|// namespace QtPrivate
end_comment
begin_expr_stmt
name|template
operator|<
name|typename
name|InputIterator
operator|>
specifier|inline
name|uint
name|qHashRange
argument_list|(
argument|InputIterator first
argument_list|,
argument|InputIterator last
argument_list|,
argument|uint seed =
literal|0
argument_list|)
DECL|function|noexcept
name|Q_DECL_NOEXCEPT_EXPR
argument_list|(
argument|noexcept(qHash(*first))
argument_list|)
comment|// assume iterator operations don't throw
block|{
return|return
name|std
operator|::
name|accumulate
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|seed
argument_list|,
name|QtPrivate
operator|::
name|QHashCombine
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|InputIterator
operator|>
specifier|inline
name|uint
name|qHashRangeCommutative
argument_list|(
argument|InputIterator first
argument_list|,
argument|InputIterator last
argument_list|,
argument|uint seed =
literal|0
argument_list|)
DECL|function|noexcept
name|Q_DECL_NOEXCEPT_EXPR
argument_list|(
argument|noexcept(qHash(*first))
argument_list|)
comment|// assume iterator operations don't throw
block|{
return|return
name|std
operator|::
name|accumulate
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|seed
argument_list|,
name|QtPrivate
operator|::
name|QHashCombineCommutative
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|variable|T1
name|template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|>
specifier|inline
name|uint
name|qHash
argument_list|(
argument|const QPair<T1
argument_list|,
argument|T2>&key
argument_list|,
argument|uint seed =
literal|0
argument_list|)
DECL|function|qHash
name|Q_DECL_NOEXCEPT_EXPR
argument_list|(
argument|noexcept(qHash(key.first, seed))&& noexcept(qHash(key.second, seed))
argument_list|)
block|{
name|uint
name|h1
operator|=
name|qHash
argument_list|(
name|key
operator|.
name|first
argument_list|,
name|seed
argument_list|)
block|;
name|uint
name|h2
operator|=
name|qHash
argument_list|(
name|key
operator|.
name|second
argument_list|,
name|seed
argument_list|)
block|;
return|return
operator|(
operator|(
name|h1
operator|<<
literal|16
operator|)
operator||
operator|(
name|h1
operator|>>
literal|16
operator|)
operator|)
operator|^
name|h2
operator|^
name|seed
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|variable|T1
name|template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|>
specifier|inline
name|uint
name|qHash
argument_list|(
argument|const std::pair<T1
argument_list|,
argument|T2>&key
argument_list|,
argument|uint seed =
literal|0
argument_list|)
DECL|function|qHash
name|Q_DECL_NOEXCEPT_EXPR
argument_list|(
argument|noexcept(qHash(key.first, seed))&& noexcept(qHash(key.second, seed))
argument_list|)
block|{
name|QtPrivate
operator|::
name|QHashCombine
name|hash
block|;
name|seed
operator|=
name|hash
argument_list|(
name|seed
argument_list|,
name|key
operator|.
name|first
argument_list|)
block|;
name|seed
operator|=
name|hash
argument_list|(
name|seed
argument_list|,
name|key
operator|.
name|second
argument_list|)
block|;
return|return
name|seed
return|;
block|}
end_expr_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_CC_MSVC
argument_list|)
end_if
begin_pragma
pragma|#
directive|pragma
name|warning
name|(
name|pop
name|)
end_pragma
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QHASHFUNCTIONS_H
end_comment
end_unit
