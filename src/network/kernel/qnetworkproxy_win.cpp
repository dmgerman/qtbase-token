begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the QtNetwork module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qnetworkproxy.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_NETWORKPROXY
end_ifndef
begin_include
include|#
directive|include
file|<qmutex.h>
end_include
begin_include
include|#
directive|include
file|<qstringlist.h>
end_include
begin_include
include|#
directive|include
file|<qregexp.h>
end_include
begin_include
include|#
directive|include
file|<qurl.h>
end_include
begin_include
include|#
directive|include
file|<private/qsystemlibrary_p.h>
end_include
begin_include
include|#
directive|include
file|<qnetworkinterface.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<string.h>
end_include
begin_include
include|#
directive|include
file|<qt_windows.h>
end_include
begin_include
include|#
directive|include
file|<wininet.h>
end_include
begin_include
include|#
directive|include
file|<lmcons.h>
end_include
begin_include
include|#
directive|include
file|"qnetworkfunctions_wince.h"
end_include
begin_comment
comment|/*  * Information on the WinHTTP DLL:  *  http://msdn.microsoft.com/en-us/library/aa384122(VS.85).aspx example for WPAD  *  *  http://msdn.microsoft.com/en-us/library/aa384097(VS.85).aspx WinHttpGetProxyForUrl  *  http://msdn.microsoft.com/en-us/library/aa384096(VS.85).aspx WinHttpGetIEProxyConfigForCurrentUs  *  http://msdn.microsoft.com/en-us/library/aa384095(VS.85).aspx WinHttpGetDefaultProxyConfiguration  */
end_comment
begin_comment
comment|// We don't want to include winhttp.h because that's not
end_comment
begin_comment
comment|// present in some Windows SDKs (I don't know why)
end_comment
begin_comment
comment|// So, instead, copy the definitions here
end_comment
begin_typedef
typedef|typedef
struct|struct
block|{
DECL|member|dwFlags
name|DWORD
name|dwFlags
decl_stmt|;
DECL|member|dwAutoDetectFlags
name|DWORD
name|dwAutoDetectFlags
decl_stmt|;
DECL|member|lpszAutoConfigUrl
name|LPCWSTR
name|lpszAutoConfigUrl
decl_stmt|;
DECL|member|lpvReserved
name|LPVOID
name|lpvReserved
decl_stmt|;
DECL|member|dwReserved
name|DWORD
name|dwReserved
decl_stmt|;
DECL|member|fAutoLogonIfChallenged
name|BOOL
name|fAutoLogonIfChallenged
decl_stmt|;
block|}
DECL|typedef|WINHTTP_AUTOPROXY_OPTIONS
name|WINHTTP_AUTOPROXY_OPTIONS
typedef|;
end_typedef
begin_typedef
typedef|typedef
struct|struct
block|{
DECL|member|dwAccessType
name|DWORD
name|dwAccessType
decl_stmt|;
DECL|member|lpszProxy
name|LPWSTR
name|lpszProxy
decl_stmt|;
DECL|member|lpszProxyBypass
name|LPWSTR
name|lpszProxyBypass
decl_stmt|;
block|}
DECL|typedef|WINHTTP_PROXY_INFO
name|WINHTTP_PROXY_INFO
typedef|;
end_typedef
begin_typedef
typedef|typedef
struct|struct
block|{
DECL|member|fAutoDetect
name|BOOL
name|fAutoDetect
decl_stmt|;
DECL|member|lpszAutoConfigUrl
name|LPWSTR
name|lpszAutoConfigUrl
decl_stmt|;
DECL|member|lpszProxy
name|LPWSTR
name|lpszProxy
decl_stmt|;
DECL|member|lpszProxyBypass
name|LPWSTR
name|lpszProxyBypass
decl_stmt|;
block|}
DECL|typedef|WINHTTP_CURRENT_USER_IE_PROXY_CONFIG
name|WINHTTP_CURRENT_USER_IE_PROXY_CONFIG
typedef|;
end_typedef
begin_define
DECL|macro|WINHTTP_AUTOPROXY_AUTO_DETECT
define|#
directive|define
name|WINHTTP_AUTOPROXY_AUTO_DETECT
value|0x00000001
end_define
begin_define
DECL|macro|WINHTTP_AUTOPROXY_CONFIG_URL
define|#
directive|define
name|WINHTTP_AUTOPROXY_CONFIG_URL
value|0x00000002
end_define
begin_define
DECL|macro|WINHTTP_AUTO_DETECT_TYPE_DHCP
define|#
directive|define
name|WINHTTP_AUTO_DETECT_TYPE_DHCP
value|0x00000001
end_define
begin_define
DECL|macro|WINHTTP_AUTO_DETECT_TYPE_DNS_A
define|#
directive|define
name|WINHTTP_AUTO_DETECT_TYPE_DNS_A
value|0x00000002
end_define
begin_define
DECL|macro|WINHTTP_ACCESS_TYPE_DEFAULT_PROXY
define|#
directive|define
name|WINHTTP_ACCESS_TYPE_DEFAULT_PROXY
value|0
end_define
begin_define
DECL|macro|WINHTTP_ACCESS_TYPE_NO_PROXY
define|#
directive|define
name|WINHTTP_ACCESS_TYPE_NO_PROXY
value|1
end_define
begin_define
DECL|macro|WINHTTP_ACCESS_TYPE_NAMED_PROXY
define|#
directive|define
name|WINHTTP_ACCESS_TYPE_NAMED_PROXY
value|3
end_define
begin_define
DECL|macro|WINHTTP_NO_PROXY_NAME
define|#
directive|define
name|WINHTTP_NO_PROXY_NAME
value|NULL
end_define
begin_define
DECL|macro|WINHTTP_NO_PROXY_BYPASS
define|#
directive|define
name|WINHTTP_NO_PROXY_BYPASS
value|NULL
end_define
begin_define
DECL|macro|WINHTTP_ERROR_BASE
define|#
directive|define
name|WINHTTP_ERROR_BASE
value|12000
end_define
begin_define
DECL|macro|ERROR_WINHTTP_LOGIN_FAILURE
define|#
directive|define
name|ERROR_WINHTTP_LOGIN_FAILURE
value|(WINHTTP_ERROR_BASE + 15)
end_define
begin_define
DECL|macro|ERROR_WINHTTP_UNABLE_TO_DOWNLOAD_SCRIPT
define|#
directive|define
name|ERROR_WINHTTP_UNABLE_TO_DOWNLOAD_SCRIPT
value|(WINHTTP_ERROR_BASE + 167)
end_define
begin_define
DECL|macro|ERROR_WINHTTP_AUTODETECTION_FAILED
define|#
directive|define
name|ERROR_WINHTTP_AUTODETECTION_FAILED
value|(WINHTTP_ERROR_BASE + 180)
end_define
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_typedef
DECL|typedef|PtrWinHttpGetProxyForUrl
typedef|typedef
name|BOOL
function_decl|(
name|WINAPI
modifier|*
name|PtrWinHttpGetProxyForUrl
function_decl|)
parameter_list|(
name|HINTERNET
parameter_list|,
name|LPCWSTR
parameter_list|,
name|WINHTTP_AUTOPROXY_OPTIONS
modifier|*
parameter_list|,
name|WINHTTP_PROXY_INFO
modifier|*
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|PtrWinHttpOpen
typedef|typedef
name|HINTERNET
function_decl|(
name|WINAPI
modifier|*
name|PtrWinHttpOpen
function_decl|)
parameter_list|(
name|LPCWSTR
parameter_list|,
name|DWORD
parameter_list|,
name|LPCWSTR
parameter_list|,
name|LPCWSTR
parameter_list|,
name|DWORD
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|PtrWinHttpGetDefaultProxyConfiguration
typedef|typedef
name|BOOL
function_decl|(
name|WINAPI
modifier|*
name|PtrWinHttpGetDefaultProxyConfiguration
function_decl|)
parameter_list|(
name|WINHTTP_PROXY_INFO
modifier|*
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|PtrWinHttpGetIEProxyConfigForCurrentUser
typedef|typedef
name|BOOL
function_decl|(
name|WINAPI
modifier|*
name|PtrWinHttpGetIEProxyConfigForCurrentUser
function_decl|)
parameter_list|(
name|WINHTTP_CURRENT_USER_IE_PROXY_CONFIG
modifier|*
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|PtrWinHttpCloseHandle
typedef|typedef
name|BOOL
function_decl|(
name|WINAPI
modifier|*
name|PtrWinHttpCloseHandle
function_decl|)
parameter_list|(
name|HINTERNET
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|PtrCloseServiceHandle
typedef|typedef
name|BOOL
function_decl|(
name|WINAPI
modifier|*
name|PtrCloseServiceHandle
function_decl|)
parameter_list|(
name|SC_HANDLE
name|hSCObject
parameter_list|)
function_decl|;
end_typedef
begin_decl_stmt
DECL|variable|ptrWinHttpGetProxyForUrl
specifier|static
name|PtrWinHttpGetProxyForUrl
name|ptrWinHttpGetProxyForUrl
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|ptrWinHttpOpen
specifier|static
name|PtrWinHttpOpen
name|ptrWinHttpOpen
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|ptrWinHttpGetDefaultProxyConfiguration
specifier|static
name|PtrWinHttpGetDefaultProxyConfiguration
name|ptrWinHttpGetDefaultProxyConfiguration
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|ptrWinHttpGetIEProxyConfigForCurrentUser
specifier|static
name|PtrWinHttpGetIEProxyConfigForCurrentUser
name|ptrWinHttpGetIEProxyConfigForCurrentUser
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|ptrWinHttpCloseHandle
specifier|static
name|PtrWinHttpCloseHandle
name|ptrWinHttpCloseHandle
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|Q_OS_WINCE
end_ifndef
begin_function
DECL|function|currentProcessIsService
specifier|static
name|bool
name|currentProcessIsService
parameter_list|()
block|{
typedef|typedef
name|BOOL
function_decl|(
name|WINAPI
modifier|*
name|PtrGetUserName
function_decl|)
parameter_list|(
name|LPTSTR
name|lpBuffer
parameter_list|,
name|LPDWORD
name|lpnSize
parameter_list|)
function_decl|;
typedef|typedef
name|BOOL
function_decl|(
name|WINAPI
modifier|*
name|PtrLookupAccountName
function_decl|)
parameter_list|(
name|LPCTSTR
name|lpSystemName
parameter_list|,
name|LPCTSTR
name|lpAccountName
parameter_list|,
name|PSID
name|Sid
parameter_list|,
name|LPDWORD
name|cbSid
parameter_list|,
name|LPTSTR
name|ReferencedDomainName
parameter_list|,
name|LPDWORD
name|cchReferencedDomainName
parameter_list|,
name|PSID_NAME_USE
name|peUse
parameter_list|)
function_decl|;
specifier|static
name|PtrGetUserName
name|ptrGetUserName
init|=
operator|(
name|PtrGetUserName
operator|)
name|QSystemLibrary
operator|::
name|resolve
argument_list|(
name|QLatin1String
argument_list|(
literal|"Advapi32"
argument_list|)
argument_list|,
literal|"GetUserNameW"
argument_list|)
decl_stmt|;
specifier|static
name|PtrLookupAccountName
name|ptrLookupAccountName
init|=
operator|(
name|PtrLookupAccountName
operator|)
name|QSystemLibrary
operator|::
name|resolve
argument_list|(
name|QLatin1String
argument_list|(
literal|"Advapi32"
argument_list|)
argument_list|,
literal|"LookupAccountNameW"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ptrGetUserName
operator|&&
name|ptrLookupAccountName
condition|)
block|{
name|wchar_t
name|userName
index|[
name|UNLEN
operator|+
literal|1
index|]
init|=
literal|L""
decl_stmt|;
name|DWORD
name|size
init|=
name|UNLEN
decl_stmt|;
if|if
condition|(
name|ptrGetUserName
argument_list|(
name|userName
argument_list|,
operator|&
name|size
argument_list|)
condition|)
block|{
name|SID_NAME_USE
name|type
init|=
name|SidTypeUser
decl_stmt|;
name|DWORD
name|sidSize
init|=
literal|0
decl_stmt|;
name|DWORD
name|domainSize
init|=
literal|0
decl_stmt|;
comment|// first call is to get the correct size
name|bool
name|bRet
init|=
name|ptrLookupAccountName
argument_list|(
name|NULL
argument_list|,
name|userName
argument_list|,
name|NULL
argument_list|,
operator|&
name|sidSize
argument_list|,
name|NULL
argument_list|,
operator|&
name|domainSize
argument_list|,
operator|&
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|bRet
operator|==
name|FALSE
operator|&&
name|ERROR_INSUFFICIENT_BUFFER
operator|!=
name|GetLastError
argument_list|()
condition|)
return|return
literal|false
return|;
name|QVarLengthArray
argument_list|<
name|BYTE
argument_list|,
literal|68
argument_list|>
name|buff
argument_list|(
name|sidSize
argument_list|)
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|wchar_t
argument_list|,
name|MAX_PATH
argument_list|>
name|domainName
argument_list|(
name|domainSize
argument_list|)
decl_stmt|;
comment|// second call to LookupAccountNameW actually gets the SID
comment|// both the pointer to the buffer and the pointer to the domain name should not be NULL
if|if
condition|(
name|ptrLookupAccountName
argument_list|(
name|NULL
argument_list|,
name|userName
argument_list|,
name|buff
operator|.
name|data
argument_list|()
argument_list|,
operator|&
name|sidSize
argument_list|,
name|domainName
operator|.
name|data
argument_list|()
argument_list|,
operator|&
name|domainSize
argument_list|,
operator|&
name|type
argument_list|)
condition|)
return|return
name|type
operator|!=
name|SidTypeUser
return|;
comment|//returns true if the current user is not a user
block|}
block|}
return|return
literal|false
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// ! Q_OS_WINCE
end_comment
begin_function
DECL|function|splitSpaceSemicolon
specifier|static
name|QStringList
name|splitSpaceSemicolon
parameter_list|(
specifier|const
name|QString
modifier|&
name|source
parameter_list|)
block|{
name|QStringList
name|list
decl_stmt|;
name|int
name|start
init|=
literal|0
decl_stmt|;
name|int
name|end
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|space
init|=
name|source
operator|.
name|indexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
argument_list|,
name|start
argument_list|)
decl_stmt|;
name|int
name|semicolon
init|=
name|source
operator|.
name|indexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|';'
argument_list|)
argument_list|,
name|start
argument_list|)
decl_stmt|;
name|end
operator|=
name|space
expr_stmt|;
if|if
condition|(
name|semicolon
operator|!=
operator|-
literal|1
operator|&&
operator|(
name|end
operator|==
operator|-
literal|1
operator|||
name|semicolon
operator|<
name|end
operator|)
condition|)
name|end
operator|=
name|semicolon
expr_stmt|;
if|if
condition|(
name|end
operator|==
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|start
operator|!=
name|source
operator|.
name|length
argument_list|()
condition|)
name|list
operator|.
name|append
argument_list|(
name|source
operator|.
name|mid
argument_list|(
name|start
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
if|if
condition|(
name|start
operator|!=
name|end
condition|)
name|list
operator|.
name|append
argument_list|(
name|source
operator|.
name|mid
argument_list|(
name|start
argument_list|,
name|end
operator|-
name|start
argument_list|)
argument_list|)
expr_stmt|;
name|start
operator|=
name|end
operator|+
literal|1
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
end_function
begin_function
DECL|function|isBypassed
specifier|static
name|bool
name|isBypassed
parameter_list|(
specifier|const
name|QString
modifier|&
name|host
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|bypassList
parameter_list|)
block|{
if|if
condition|(
name|host
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
name|bool
name|isSimple
init|=
operator|!
name|host
operator|.
name|contains
argument_list|(
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
argument_list|)
operator|&&
operator|!
name|host
operator|.
name|contains
argument_list|(
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
argument_list|)
decl_stmt|;
name|QHostAddress
name|ipAddress
decl_stmt|;
name|bool
name|isIpAddress
init|=
name|ipAddress
operator|.
name|setAddress
argument_list|(
name|host
argument_list|)
decl_stmt|;
comment|// always exclude loopback
if|if
condition|(
name|isIpAddress
operator|&&
name|ipAddress
operator|.
name|isLoopback
argument_list|()
condition|)
return|return
literal|true
return|;
comment|// does it match the list of exclusions?
for|for
control|(
specifier|const
name|QString
modifier|&
name|entry
range|:
name|bypassList
control|)
block|{
if|if
condition|(
name|entry
operator|==
name|QLatin1String
argument_list|(
literal|"<local>"
argument_list|)
condition|)
block|{
if|if
condition|(
name|isSimple
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|isIpAddress
condition|)
block|{
comment|//exclude all local subnets
foreach|foreach
control|(
specifier|const
name|QNetworkInterface
modifier|&
name|iface
decl|,
name|QNetworkInterface
operator|::
name|allInterfaces
argument_list|()
control|)
block|{
foreach|foreach
control|(
specifier|const
name|QNetworkAddressEntry
name|netaddr
decl|,
name|iface
operator|.
name|addressEntries
argument_list|()
control|)
block|{
if|if
condition|(
name|ipAddress
operator|.
name|isInSubnet
argument_list|(
name|netaddr
operator|.
name|ip
argument_list|()
argument_list|,
name|netaddr
operator|.
name|prefixLength
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|isIpAddress
operator|&&
name|ipAddress
operator|.
name|isInSubnet
argument_list|(
name|QHostAddress
operator|::
name|parseSubnet
argument_list|(
name|entry
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
comment|// excluded
block|}
else|else
block|{
comment|// do wildcard matching
name|QRegExp
name|rx
argument_list|(
name|entry
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|,
name|QRegExp
operator|::
name|Wildcard
argument_list|)
decl_stmt|;
if|if
condition|(
name|rx
operator|.
name|exactMatch
argument_list|(
name|host
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
block|}
comment|// host was not excluded
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|filterProxyListByCapabilities
specifier|static
name|QList
argument_list|<
name|QNetworkProxy
argument_list|>
name|filterProxyListByCapabilities
parameter_list|(
specifier|const
name|QList
argument_list|<
name|QNetworkProxy
argument_list|>
modifier|&
name|proxyList
parameter_list|,
specifier|const
name|QNetworkProxyQuery
modifier|&
name|query
parameter_list|)
block|{
name|QNetworkProxy
operator|::
name|Capabilities
name|requiredCaps
decl_stmt|;
switch|switch
condition|(
name|query
operator|.
name|queryType
argument_list|()
condition|)
block|{
case|case
name|QNetworkProxyQuery
operator|::
name|TcpSocket
case|:
name|requiredCaps
operator|=
name|QNetworkProxy
operator|::
name|TunnelingCapability
expr_stmt|;
break|break;
case|case
name|QNetworkProxyQuery
operator|::
name|UdpSocket
case|:
name|requiredCaps
operator|=
name|QNetworkProxy
operator|::
name|UdpTunnelingCapability
expr_stmt|;
break|break;
case|case
name|QNetworkProxyQuery
operator|::
name|TcpServer
case|:
name|requiredCaps
operator|=
name|QNetworkProxy
operator|::
name|ListeningCapability
expr_stmt|;
break|break;
default|default:
return|return
name|proxyList
return|;
break|break;
block|}
name|QList
argument_list|<
name|QNetworkProxy
argument_list|>
name|result
decl_stmt|;
for|for
control|(
specifier|const
name|QNetworkProxy
modifier|&
name|proxy
range|:
name|proxyList
control|)
block|{
if|if
condition|(
name|proxy
operator|.
name|capabilities
argument_list|()
operator|&
name|requiredCaps
condition|)
name|result
operator|.
name|append
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|removeDuplicateProxies
specifier|static
name|QList
argument_list|<
name|QNetworkProxy
argument_list|>
name|removeDuplicateProxies
parameter_list|(
specifier|const
name|QList
argument_list|<
name|QNetworkProxy
argument_list|>
modifier|&
name|proxyList
parameter_list|)
block|{
name|QList
argument_list|<
name|QNetworkProxy
argument_list|>
name|result
decl_stmt|;
for|for
control|(
specifier|const
name|QNetworkProxy
modifier|&
name|proxy
range|:
name|proxyList
control|)
block|{
name|bool
name|append
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|result
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|proxy
operator|.
name|hostName
argument_list|()
operator|==
name|result
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|hostName
argument_list|()
operator|&&
name|proxy
operator|.
name|port
argument_list|()
operator|==
name|result
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|port
argument_list|()
condition|)
block|{
name|append
operator|=
literal|false
expr_stmt|;
comment|// HttpProxy trumps FtpCachingProxy or HttpCachingProxy on the same host/port
if|if
condition|(
name|proxy
operator|.
name|type
argument_list|()
operator|==
name|QNetworkProxy
operator|::
name|HttpProxy
condition|)
name|result
index|[
name|i
index|]
operator|=
name|proxy
expr_stmt|;
block|}
block|}
if|if
condition|(
name|append
condition|)
name|result
operator|.
name|append
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|parseServerList
specifier|static
name|QList
argument_list|<
name|QNetworkProxy
argument_list|>
name|parseServerList
parameter_list|(
specifier|const
name|QNetworkProxyQuery
modifier|&
name|query
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|proxyList
parameter_list|)
block|{
comment|// Reference documentation from Microsoft:
comment|// http://msdn.microsoft.com/en-us/library/aa383912(VS.85).aspx
comment|//
comment|// According to the website, the proxy server list is
comment|// one or more of the space- or semicolon-separated strings in the format:
comment|//   ([<scheme>=][<scheme>"://"]<server>[":"<port>])
comment|// The first scheme relates to the protocol tag
comment|// The second scheme, if present, overrides the proxy type
name|QList
argument_list|<
name|QNetworkProxy
argument_list|>
name|result
decl_stmt|;
name|QHash
argument_list|<
name|QString
argument_list|,
name|QNetworkProxy
argument_list|>
name|taggedProxies
decl_stmt|;
specifier|const
name|QString
name|requiredTag
init|=
name|query
operator|.
name|protocolTag
argument_list|()
decl_stmt|;
name|bool
name|checkTags
init|=
operator|!
name|requiredTag
operator|.
name|isEmpty
argument_list|()
operator|&&
name|query
operator|.
name|queryType
argument_list|()
operator|!=
name|QNetworkProxyQuery
operator|::
name|TcpServer
decl_stmt|;
comment|//windows tags are only for clients
for|for
control|(
specifier|const
name|QString
modifier|&
name|entry
range|:
name|proxyList
control|)
block|{
name|int
name|server
init|=
literal|0
decl_stmt|;
name|QNetworkProxy
operator|::
name|ProxyType
name|proxyType
init|=
name|QNetworkProxy
operator|::
name|HttpProxy
decl_stmt|;
name|quint16
name|port
init|=
literal|8080
decl_stmt|;
name|int
name|pos
init|=
name|entry
operator|.
name|indexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|'='
argument_list|)
argument_list|)
decl_stmt|;
name|QStringRef
name|scheme
decl_stmt|;
name|QStringRef
name|protocolTag
decl_stmt|;
if|if
condition|(
name|pos
operator|!=
operator|-
literal|1
condition|)
block|{
name|scheme
operator|=
name|protocolTag
operator|=
name|entry
operator|.
name|leftRef
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|server
operator|=
name|pos
operator|+
literal|1
expr_stmt|;
block|}
name|pos
operator|=
name|entry
operator|.
name|indexOf
argument_list|(
name|QLatin1String
argument_list|(
literal|"://"
argument_list|)
argument_list|,
name|server
argument_list|)
expr_stmt|;
if|if
condition|(
name|pos
operator|!=
operator|-
literal|1
condition|)
block|{
name|scheme
operator|=
name|entry
operator|.
name|midRef
argument_list|(
name|server
argument_list|,
name|pos
operator|-
name|server
argument_list|)
expr_stmt|;
name|server
operator|=
name|pos
operator|+
literal|3
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|scheme
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|scheme
operator|==
name|QLatin1String
argument_list|(
literal|"http"
argument_list|)
operator|||
name|scheme
operator|==
name|QLatin1String
argument_list|(
literal|"https"
argument_list|)
condition|)
block|{
comment|// no-op
comment|// defaults are above
block|}
elseif|else
if|if
condition|(
name|scheme
operator|==
name|QLatin1String
argument_list|(
literal|"socks"
argument_list|)
operator|||
name|scheme
operator|==
name|QLatin1String
argument_list|(
literal|"socks5"
argument_list|)
condition|)
block|{
name|proxyType
operator|=
name|QNetworkProxy
operator|::
name|Socks5Proxy
expr_stmt|;
name|port
operator|=
literal|1080
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|scheme
operator|==
name|QLatin1String
argument_list|(
literal|"ftp"
argument_list|)
condition|)
block|{
name|proxyType
operator|=
name|QNetworkProxy
operator|::
name|FtpCachingProxy
expr_stmt|;
name|port
operator|=
literal|2121
expr_stmt|;
block|}
else|else
block|{
comment|// unknown proxy type
continue|continue;
block|}
block|}
name|pos
operator|=
name|entry
operator|.
name|indexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
argument_list|,
name|server
argument_list|)
expr_stmt|;
if|if
condition|(
name|pos
operator|!=
operator|-
literal|1
condition|)
block|{
name|bool
name|ok
decl_stmt|;
name|uint
name|value
init|=
name|entry
operator|.
name|mid
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
operator|.
name|toUInt
argument_list|(
operator|&
name|ok
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ok
operator|||
name|value
operator|>
literal|65535
condition|)
continue|continue;
comment|// invalid port number
name|port
operator|=
name|value
expr_stmt|;
block|}
else|else
block|{
name|pos
operator|=
name|entry
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
name|result
operator|<<
name|QNetworkProxy
argument_list|(
name|proxyType
argument_list|,
name|entry
operator|.
name|mid
argument_list|(
name|server
argument_list|,
name|pos
operator|-
name|server
argument_list|)
argument_list|,
name|port
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|protocolTag
operator|.
name|isEmpty
argument_list|()
condition|)
name|taggedProxies
operator|.
name|insert
argument_list|(
name|protocolTag
operator|.
name|toString
argument_list|()
argument_list|,
name|result
operator|.
name|last
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|checkTags
operator|&&
name|taggedProxies
operator|.
name|contains
argument_list|(
name|requiredTag
argument_list|)
condition|)
block|{
if|if
condition|(
name|query
operator|.
name|queryType
argument_list|()
operator|==
name|QNetworkProxyQuery
operator|::
name|UrlRequest
condition|)
block|{
name|result
operator|.
name|clear
argument_list|()
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
name|taggedProxies
operator|.
name|value
argument_list|(
name|requiredTag
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
else|else
block|{
name|result
operator|.
name|prepend
argument_list|(
name|taggedProxies
operator|.
name|value
argument_list|(
name|requiredTag
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|checkTags
operator|||
name|requiredTag
operator|!=
name|QLatin1String
argument_list|(
literal|"http"
argument_list|)
condition|)
block|{
comment|// if there are different http proxies for http and https, prefer the https one (more likely to be capable of CONNECT)
name|QNetworkProxy
name|httpProxy
init|=
name|taggedProxies
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"http"
argument_list|)
argument_list|)
decl_stmt|;
name|QNetworkProxy
name|httpsProxy
init|=
name|taggedProxies
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"http"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|httpProxy
operator|!=
name|httpsProxy
operator|&&
name|httpProxy
operator|.
name|type
argument_list|()
operator|==
name|QNetworkProxy
operator|::
name|HttpProxy
operator|&&
name|httpsProxy
operator|.
name|type
argument_list|()
operator|==
name|QNetworkProxy
operator|::
name|HttpProxy
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|result
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|httpProxy
operator|==
name|result
operator|.
name|at
argument_list|(
name|i
argument_list|)
condition|)
name|result
index|[
name|i
index|]
operator|.
name|setType
argument_list|(
name|QNetworkProxy
operator|::
name|HttpCachingProxy
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|result
operator|=
name|filterProxyListByCapabilities
argument_list|(
name|result
argument_list|,
name|query
argument_list|)
expr_stmt|;
return|return
name|removeDuplicateProxies
argument_list|(
name|result
argument_list|)
return|;
block|}
end_function
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINRT
argument_list|)
end_if
begin_namespace
namespace|namespace
block|{
DECL|class|QRegistryWatcher
class|class
name|QRegistryWatcher
block|{
public|public:
DECL|function|addLocation
name|void
name|addLocation
parameter_list|(
name|HKEY
name|hive
parameter_list|,
specifier|const
name|QString
modifier|&
name|path
parameter_list|)
block|{
name|HKEY
name|openedKey
decl_stmt|;
if|if
condition|(
name|RegOpenKeyEx
argument_list|(
name|hive
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|wchar_t
operator|*
argument_list|>
argument_list|(
name|path
operator|.
name|utf16
argument_list|()
argument_list|)
argument_list|,
literal|0
argument_list|,
name|KEY_READ
argument_list|,
operator|&
name|openedKey
argument_list|)
operator|!=
name|ERROR_SUCCESS
condition|)
return|return;
specifier|const
name|DWORD
name|filter
init|=
name|REG_NOTIFY_CHANGE_NAME
operator||
name|REG_NOTIFY_CHANGE_ATTRIBUTES
operator||
name|REG_NOTIFY_CHANGE_LAST_SET
operator||
name|REG_NOTIFY_CHANGE_SECURITY
decl_stmt|;
comment|// Watch the registry key for a change of value.
name|HANDLE
name|handle
init|=
name|CreateEvent
argument_list|(
name|NULL
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|NULL
argument_list|)
decl_stmt|;
if|if
condition|(
name|RegNotifyChangeKeyValue
argument_list|(
name|openedKey
argument_list|,
literal|true
argument_list|,
name|filter
argument_list|,
name|handle
argument_list|,
literal|true
argument_list|)
operator|!=
name|ERROR_SUCCESS
condition|)
block|{
name|CloseHandle
argument_list|(
name|handle
argument_list|)
expr_stmt|;
return|return;
block|}
name|m_watchEvents
operator|.
name|append
argument_list|(
name|handle
argument_list|)
expr_stmt|;
name|m_registryHandles
operator|.
name|append
argument_list|(
name|openedKey
argument_list|)
expr_stmt|;
block|}
DECL|function|hasChanged
name|bool
name|hasChanged
parameter_list|()
specifier|const
block|{
return|return
operator|!
name|isEmpty
argument_list|()
operator|&&
name|WaitForMultipleObjects
argument_list|(
name|m_watchEvents
operator|.
name|size
argument_list|()
argument_list|,
name|m_watchEvents
operator|.
name|data
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
operator|<
name|WAIT_OBJECT_0
operator|+
name|m_watchEvents
operator|.
name|size
argument_list|()
return|;
block|}
DECL|function|isEmpty
name|bool
name|isEmpty
parameter_list|()
specifier|const
block|{
return|return
name|m_watchEvents
operator|.
name|isEmpty
argument_list|()
return|;
block|}
DECL|function|clear
name|void
name|clear
parameter_list|()
block|{
for|for
control|(
name|HANDLE
name|event
range|:
name|qAsConst
argument_list|(
name|m_watchEvents
argument_list|)
control|)
name|CloseHandle
argument_list|(
name|event
argument_list|)
expr_stmt|;
for|for
control|(
name|HKEY
name|key
range|:
name|qAsConst
argument_list|(
name|m_registryHandles
argument_list|)
control|)
name|RegCloseKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|m_watchEvents
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m_registryHandles
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|function|~QRegistryWatcher
name|~
name|QRegistryWatcher
parameter_list|()
block|{
name|clear
argument_list|()
expr_stmt|;
block|}
private|private:
DECL|member|m_watchEvents
name|QVector
argument_list|<
name|HANDLE
argument_list|>
name|m_watchEvents
decl_stmt|;
DECL|member|m_registryHandles
name|QVector
argument_list|<
name|HKEY
argument_list|>
name|m_registryHandles
decl_stmt|;
block|}
class|;
block|}
end_namespace
begin_comment
comment|// namespace
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// !defined(Q_OS_WINCE)&& !defined(Q_OS_WINRT)
end_comment
begin_class
DECL|class|QWindowsSystemProxy
class|class
name|QWindowsSystemProxy
block|{
public|public:
name|QWindowsSystemProxy
parameter_list|()
constructor_decl|;
name|~
name|QWindowsSystemProxy
parameter_list|()
destructor_decl|;
name|void
name|init
parameter_list|()
function_decl|;
name|void
name|reset
parameter_list|()
function_decl|;
DECL|member|mutex
name|QMutex
name|mutex
decl_stmt|;
DECL|member|hHttpSession
name|HINTERNET
name|hHttpSession
decl_stmt|;
DECL|member|autoProxyOptions
name|WINHTTP_AUTOPROXY_OPTIONS
name|autoProxyOptions
decl_stmt|;
DECL|member|autoConfigUrl
name|QString
name|autoConfigUrl
decl_stmt|;
DECL|member|proxyServerList
name|QStringList
name|proxyServerList
decl_stmt|;
DECL|member|proxyBypass
name|QStringList
name|proxyBypass
decl_stmt|;
DECL|member|defaultResult
name|QList
argument_list|<
name|QNetworkProxy
argument_list|>
name|defaultResult
decl_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINRT
argument_list|)
DECL|member|proxySettingsWatcher
name|QRegistryWatcher
name|proxySettingsWatcher
decl_stmt|;
endif|#
directive|endif
DECL|member|initialized
name|bool
name|initialized
decl_stmt|;
DECL|member|functional
name|bool
name|functional
decl_stmt|;
DECL|member|isAutoConfig
name|bool
name|isAutoConfig
decl_stmt|;
block|}
class|;
end_class
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|QWindowsSystemProxy
argument_list|,
argument|systemProxy
argument_list|)
end_macro
begin_constructor
DECL|function|QWindowsSystemProxy
name|QWindowsSystemProxy
operator|::
name|QWindowsSystemProxy
parameter_list|()
member_init_list|:
name|hHttpSession
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|initialized
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|functional
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|isAutoConfig
argument_list|(
literal|false
argument_list|)
block|{
name|defaultResult
operator|<<
name|QNetworkProxy
operator|::
name|NoProxy
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QWindowsSystemProxy
name|QWindowsSystemProxy
operator|::
name|~
name|QWindowsSystemProxy
parameter_list|()
block|{
if|if
condition|(
name|hHttpSession
condition|)
name|ptrWinHttpCloseHandle
argument_list|(
name|hHttpSession
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|reset
name|void
name|QWindowsSystemProxy
operator|::
name|reset
parameter_list|()
block|{
name|autoConfigUrl
operator|.
name|clear
argument_list|()
expr_stmt|;
name|proxyServerList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|proxyBypass
operator|.
name|clear
argument_list|()
expr_stmt|;
name|defaultResult
operator|.
name|clear
argument_list|()
expr_stmt|;
name|defaultResult
operator|<<
name|QNetworkProxy
operator|::
name|NoProxy
expr_stmt|;
name|functional
operator|=
literal|false
expr_stmt|;
name|isAutoConfig
operator|=
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|init
name|void
name|QWindowsSystemProxy
operator|::
name|init
parameter_list|()
block|{
name|bool
name|proxySettingsChanged
init|=
literal|false
decl_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINRT
argument_list|)
name|proxySettingsChanged
operator|=
name|proxySettingsWatcher
operator|.
name|hasChanged
argument_list|()
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|initialized
operator|&&
operator|!
name|proxySettingsChanged
condition|)
return|return;
name|initialized
operator|=
literal|true
expr_stmt|;
name|reset
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WINCE
comment|// Windows CE does not have any of the following API
return|return;
else|#
directive|else
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINRT
argument_list|)
name|proxySettingsWatcher
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// needs reset to trigger a new detection
name|proxySettingsWatcher
operator|.
name|addLocation
argument_list|(
name|HKEY_CURRENT_USER
argument_list|,
name|QStringLiteral
argument_list|(
literal|"Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings"
argument_list|)
argument_list|)
expr_stmt|;
name|proxySettingsWatcher
operator|.
name|addLocation
argument_list|(
name|HKEY_LOCAL_MACHINE
argument_list|,
name|QStringLiteral
argument_list|(
literal|"Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings"
argument_list|)
argument_list|)
expr_stmt|;
name|proxySettingsWatcher
operator|.
name|addLocation
argument_list|(
name|HKEY_LOCAL_MACHINE
argument_list|,
name|QStringLiteral
argument_list|(
literal|"Software\\Policies\\Microsoft\\Windows\\CurrentVersion\\Internet Settings"
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// load the winhttp.dll library
name|QSystemLibrary
name|lib
argument_list|(
literal|L"winhttp"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|lib
operator|.
name|load
argument_list|()
condition|)
return|return;
comment|// failed to load
name|ptrWinHttpOpen
operator|=
operator|(
name|PtrWinHttpOpen
operator|)
name|lib
operator|.
name|resolve
argument_list|(
literal|"WinHttpOpen"
argument_list|)
expr_stmt|;
name|ptrWinHttpCloseHandle
operator|=
operator|(
name|PtrWinHttpCloseHandle
operator|)
name|lib
operator|.
name|resolve
argument_list|(
literal|"WinHttpCloseHandle"
argument_list|)
expr_stmt|;
name|ptrWinHttpGetProxyForUrl
operator|=
operator|(
name|PtrWinHttpGetProxyForUrl
operator|)
name|lib
operator|.
name|resolve
argument_list|(
literal|"WinHttpGetProxyForUrl"
argument_list|)
expr_stmt|;
name|ptrWinHttpGetDefaultProxyConfiguration
operator|=
operator|(
name|PtrWinHttpGetDefaultProxyConfiguration
operator|)
name|lib
operator|.
name|resolve
argument_list|(
literal|"WinHttpGetDefaultProxyConfiguration"
argument_list|)
expr_stmt|;
name|ptrWinHttpGetIEProxyConfigForCurrentUser
operator|=
operator|(
name|PtrWinHttpGetIEProxyConfigForCurrentUser
operator|)
name|lib
operator|.
name|resolve
argument_list|(
literal|"WinHttpGetIEProxyConfigForCurrentUser"
argument_list|)
expr_stmt|;
comment|// Try to obtain the Internet Explorer configuration.
name|WINHTTP_CURRENT_USER_IE_PROXY_CONFIG
name|ieProxyConfig
decl_stmt|;
specifier|const
name|bool
name|hasIEConfig
init|=
name|ptrWinHttpGetIEProxyConfigForCurrentUser
argument_list|(
operator|&
name|ieProxyConfig
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasIEConfig
condition|)
block|{
if|if
condition|(
name|ieProxyConfig
operator|.
name|lpszAutoConfigUrl
condition|)
block|{
name|autoConfigUrl
operator|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|ieProxyConfig
operator|.
name|lpszAutoConfigUrl
argument_list|)
expr_stmt|;
name|GlobalFree
argument_list|(
name|ieProxyConfig
operator|.
name|lpszAutoConfigUrl
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ieProxyConfig
operator|.
name|lpszProxy
condition|)
block|{
comment|// http://msdn.microsoft.com/en-us/library/aa384250%28VS.85%29.aspx speaks only about a "proxy URL",
comment|// not multiple URLs. However we tested this and it can return multiple URLs. So we use splitSpaceSemicolon
comment|// on it.
name|proxyServerList
operator|=
name|splitSpaceSemicolon
argument_list|(
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|ieProxyConfig
operator|.
name|lpszProxy
argument_list|)
argument_list|)
expr_stmt|;
name|GlobalFree
argument_list|(
name|ieProxyConfig
operator|.
name|lpszProxy
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ieProxyConfig
operator|.
name|lpszProxyBypass
condition|)
block|{
name|proxyBypass
operator|=
name|splitSpaceSemicolon
argument_list|(
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|ieProxyConfig
operator|.
name|lpszProxyBypass
argument_list|)
argument_list|)
expr_stmt|;
name|GlobalFree
argument_list|(
name|ieProxyConfig
operator|.
name|lpszProxyBypass
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|hasIEConfig
operator|||
operator|(
name|currentProcessIsService
argument_list|()
operator|&&
name|proxyServerList
operator|.
name|isEmpty
argument_list|()
operator|&&
name|proxyBypass
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
comment|// no user configuration
comment|// attempt to get the default configuration instead
comment|// that config will serve as default if WPAD fails
name|WINHTTP_PROXY_INFO
name|proxyInfo
decl_stmt|;
if|if
condition|(
name|ptrWinHttpGetDefaultProxyConfiguration
argument_list|(
operator|&
name|proxyInfo
argument_list|)
operator|&&
name|proxyInfo
operator|.
name|dwAccessType
operator|==
name|WINHTTP_ACCESS_TYPE_NAMED_PROXY
condition|)
block|{
comment|// we got information from the registry
comment|// overwrite the IE configuration, if any
name|proxyBypass
operator|=
name|splitSpaceSemicolon
argument_list|(
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|proxyInfo
operator|.
name|lpszProxyBypass
argument_list|)
argument_list|)
expr_stmt|;
name|proxyServerList
operator|=
name|splitSpaceSemicolon
argument_list|(
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|proxyInfo
operator|.
name|lpszProxy
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proxyInfo
operator|.
name|lpszProxy
condition|)
name|GlobalFree
argument_list|(
name|proxyInfo
operator|.
name|lpszProxy
argument_list|)
expr_stmt|;
if|if
condition|(
name|proxyInfo
operator|.
name|lpszProxyBypass
condition|)
name|GlobalFree
argument_list|(
name|proxyInfo
operator|.
name|lpszProxyBypass
argument_list|)
expr_stmt|;
block|}
name|hHttpSession
operator|=
name|NULL
expr_stmt|;
if|if
condition|(
name|ieProxyConfig
operator|.
name|fAutoDetect
operator|||
operator|!
name|autoConfigUrl
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// open the handle and obtain the options
name|hHttpSession
operator|=
name|ptrWinHttpOpen
argument_list|(
literal|L"Qt System Proxy access/1.0"
argument_list|,
name|WINHTTP_ACCESS_TYPE_NO_PROXY
argument_list|,
name|WINHTTP_NO_PROXY_NAME
argument_list|,
name|WINHTTP_NO_PROXY_BYPASS
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|hHttpSession
condition|)
return|return;
name|isAutoConfig
operator|=
literal|true
expr_stmt|;
name|memset
argument_list|(
operator|&
name|autoProxyOptions
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
name|autoProxyOptions
argument_list|)
expr_stmt|;
name|autoProxyOptions
operator|.
name|fAutoLogonIfChallenged
operator|=
literal|false
expr_stmt|;
comment|//Although it is possible to specify dwFlags = WINHTTP_AUTOPROXY_AUTO_DETECT | WINHTTP_AUTOPROXY_CONFIG_URL
comment|//this has poor performance (WPAD is attempted for every url, taking 2.5 seconds per interface,
comment|//before the configured pac file is used)
if|if
condition|(
name|ieProxyConfig
operator|.
name|fAutoDetect
condition|)
block|{
name|autoProxyOptions
operator|.
name|dwFlags
operator|=
name|WINHTTP_AUTOPROXY_AUTO_DETECT
expr_stmt|;
name|autoProxyOptions
operator|.
name|dwAutoDetectFlags
operator|=
name|WINHTTP_AUTO_DETECT_TYPE_DHCP
operator||
name|WINHTTP_AUTO_DETECT_TYPE_DNS_A
expr_stmt|;
block|}
else|else
block|{
name|autoProxyOptions
operator|.
name|dwFlags
operator|=
name|WINHTTP_AUTOPROXY_CONFIG_URL
expr_stmt|;
name|autoProxyOptions
operator|.
name|lpszAutoConfigUrl
operator|=
operator|(
name|LPCWSTR
operator|)
name|autoConfigUrl
operator|.
name|utf16
argument_list|()
expr_stmt|;
block|}
block|}
name|functional
operator|=
name|isAutoConfig
operator|||
operator|!
name|proxyServerList
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|systemProxyForQuery
name|QList
argument_list|<
name|QNetworkProxy
argument_list|>
name|QNetworkProxyFactory
operator|::
name|systemProxyForQuery
parameter_list|(
specifier|const
name|QNetworkProxyQuery
modifier|&
name|query
parameter_list|)
block|{
name|QWindowsSystemProxy
modifier|*
name|sp
init|=
name|systemProxy
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|sp
condition|)
return|return
name|QList
argument_list|<
name|QNetworkProxy
argument_list|>
argument_list|()
operator|<<
name|QNetworkProxy
argument_list|()
return|;
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|sp
operator|->
name|mutex
argument_list|)
decl_stmt|;
name|sp
operator|->
name|init
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|sp
operator|->
name|functional
condition|)
return|return
name|sp
operator|->
name|defaultResult
return|;
if|if
condition|(
name|sp
operator|->
name|isAutoConfig
condition|)
block|{
name|WINHTTP_PROXY_INFO
name|proxyInfo
decl_stmt|;
comment|// try to get the proxy config for the URL
name|QUrl
name|url
init|=
name|query
operator|.
name|url
argument_list|()
decl_stmt|;
comment|// url could be empty, e.g. from QNetworkProxy::applicationProxy(), that's fine,
comment|// we'll still ask for the proxy.
comment|// But for a file url, we know we don't need one.
if|if
condition|(
name|url
operator|.
name|scheme
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"file"
argument_list|)
operator|||
name|url
operator|.
name|scheme
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"qrc"
argument_list|)
condition|)
return|return
name|sp
operator|->
name|defaultResult
return|;
if|if
condition|(
name|query
operator|.
name|queryType
argument_list|()
operator|!=
name|QNetworkProxyQuery
operator|::
name|UrlRequest
condition|)
block|{
comment|// change the scheme to https, maybe it'll work
name|url
operator|.
name|setScheme
argument_list|(
name|QLatin1String
argument_list|(
literal|"https"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QString
name|urlQueryString
init|=
name|url
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|urlQueryString
operator|.
name|size
argument_list|()
operator|>
literal|2083
condition|)
block|{
comment|// calls to WinHttpGetProxyForUrl with urls longer than 2083 characters
comment|// fail with error code ERROR_INVALID_PARAMETER(87), so we truncate it
name|qWarning
argument_list|(
literal|"Proxy query URL too long for windows API, try with truncated URL"
argument_list|)
expr_stmt|;
name|urlQueryString
operator|=
name|url
operator|.
name|toString
argument_list|()
operator|.
name|left
argument_list|(
literal|2083
argument_list|)
expr_stmt|;
block|}
name|bool
name|getProxySucceeded
init|=
name|ptrWinHttpGetProxyForUrl
argument_list|(
name|sp
operator|->
name|hHttpSession
argument_list|,
operator|(
name|LPCWSTR
operator|)
name|urlQueryString
operator|.
name|utf16
argument_list|()
argument_list|,
operator|&
name|sp
operator|->
name|autoProxyOptions
argument_list|,
operator|&
name|proxyInfo
argument_list|)
decl_stmt|;
name|DWORD
name|getProxyError
init|=
name|GetLastError
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|getProxySucceeded
operator|&&
operator|(
name|ERROR_WINHTTP_AUTODETECTION_FAILED
operator|==
name|getProxyError
operator|)
condition|)
block|{
comment|// WPAD failed
if|if
condition|(
name|sp
operator|->
name|autoConfigUrl
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|//No config file could be retrieved on the network.
comment|//Don't search for it next time again.
name|sp
operator|->
name|isAutoConfig
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
comment|//pac file URL is specified as well, try using that
name|sp
operator|->
name|autoProxyOptions
operator|.
name|dwFlags
operator|=
name|WINHTTP_AUTOPROXY_CONFIG_URL
expr_stmt|;
name|sp
operator|->
name|autoProxyOptions
operator|.
name|lpszAutoConfigUrl
operator|=
operator|(
name|LPCWSTR
operator|)
name|sp
operator|->
name|autoConfigUrl
operator|.
name|utf16
argument_list|()
expr_stmt|;
name|getProxySucceeded
operator|=
name|ptrWinHttpGetProxyForUrl
argument_list|(
name|sp
operator|->
name|hHttpSession
argument_list|,
operator|(
name|LPCWSTR
operator|)
name|urlQueryString
operator|.
name|utf16
argument_list|()
argument_list|,
operator|&
name|sp
operator|->
name|autoProxyOptions
argument_list|,
operator|&
name|proxyInfo
argument_list|)
expr_stmt|;
name|getProxyError
operator|=
name|GetLastError
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|getProxySucceeded
operator|&&
operator|(
name|ERROR_WINHTTP_LOGIN_FAILURE
operator|==
name|getProxyError
operator|)
condition|)
block|{
comment|// We first tried without AutoLogon, because this might prevent caching the result.
comment|// But now we've to enable it (http://msdn.microsoft.com/en-us/library/aa383153%28v=VS.85%29.aspx)
name|sp
operator|->
name|autoProxyOptions
operator|.
name|fAutoLogonIfChallenged
operator|=
name|TRUE
expr_stmt|;
name|getProxySucceeded
operator|=
name|ptrWinHttpGetProxyForUrl
argument_list|(
name|sp
operator|->
name|hHttpSession
argument_list|,
operator|(
name|LPCWSTR
operator|)
name|urlQueryString
operator|.
name|utf16
argument_list|()
argument_list|,
operator|&
name|sp
operator|->
name|autoProxyOptions
argument_list|,
operator|&
name|proxyInfo
argument_list|)
expr_stmt|;
name|getProxyError
operator|=
name|GetLastError
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|getProxySucceeded
operator|&&
operator|(
name|ERROR_WINHTTP_UNABLE_TO_DOWNLOAD_SCRIPT
operator|==
name|getProxyError
operator|)
condition|)
block|{
comment|// PAC file url is not connectable, or server returned error (e.g. http 404)
comment|//Don't search for it next time again.
name|sp
operator|->
name|isAutoConfig
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|getProxySucceeded
condition|)
block|{
comment|// yes, we got a config for this URL
name|QString
name|proxyBypass
init|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|proxyInfo
operator|.
name|lpszProxyBypass
argument_list|)
decl_stmt|;
name|QStringList
name|proxyServerList
init|=
name|splitSpaceSemicolon
argument_list|(
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|proxyInfo
operator|.
name|lpszProxy
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|proxyInfo
operator|.
name|lpszProxy
condition|)
name|GlobalFree
argument_list|(
name|proxyInfo
operator|.
name|lpszProxy
argument_list|)
expr_stmt|;
if|if
condition|(
name|proxyInfo
operator|.
name|lpszProxyBypass
condition|)
name|GlobalFree
argument_list|(
name|proxyInfo
operator|.
name|lpszProxyBypass
argument_list|)
expr_stmt|;
if|if
condition|(
name|proxyInfo
operator|.
name|dwAccessType
operator|==
name|WINHTTP_ACCESS_TYPE_NO_PROXY
condition|)
return|return
name|sp
operator|->
name|defaultResult
return|;
comment|//i.e. the PAC file result was "DIRECT"
if|if
condition|(
name|isBypassed
argument_list|(
name|query
operator|.
name|peerHostName
argument_list|()
argument_list|,
name|splitSpaceSemicolon
argument_list|(
name|proxyBypass
argument_list|)
argument_list|)
condition|)
return|return
name|sp
operator|->
name|defaultResult
return|;
return|return
name|parseServerList
argument_list|(
name|query
argument_list|,
name|proxyServerList
argument_list|)
return|;
block|}
comment|// GetProxyForUrl failed, fall back to static configuration
block|}
comment|// static configuration
if|if
condition|(
name|isBypassed
argument_list|(
name|query
operator|.
name|peerHostName
argument_list|()
argument_list|,
name|sp
operator|->
name|proxyBypass
argument_list|)
condition|)
return|return
name|sp
operator|->
name|defaultResult
return|;
name|QList
argument_list|<
name|QNetworkProxy
argument_list|>
name|result
init|=
name|parseServerList
argument_list|(
name|query
argument_list|,
name|sp
operator|->
name|proxyServerList
argument_list|)
decl_stmt|;
comment|// In some cases, this was empty. See SF task 00062670
if|if
condition|(
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|sp
operator|->
name|defaultResult
return|;
return|return
name|result
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
end_unit
