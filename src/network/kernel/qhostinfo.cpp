begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtNetwork module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qhostinfo.h"
end_include
begin_include
include|#
directive|include
file|"qhostinfo_p.h"
end_include
begin_include
include|#
directive|include
file|"QtCore/qscopedpointer.h"
end_include
begin_include
include|#
directive|include
file|<qabstracteventdispatcher.h>
end_include
begin_include
include|#
directive|include
file|<qcoreapplication.h>
end_include
begin_include
include|#
directive|include
file|<qmetaobject.h>
end_include
begin_include
include|#
directive|include
file|<qstringlist.h>
end_include
begin_include
include|#
directive|include
file|<qthread.h>
end_include
begin_include
include|#
directive|include
file|<qurl.h>
end_include
begin_include
include|#
directive|include
file|<private/qnetworksession_p.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_UNIX
end_ifdef
begin_include
include|#
directive|include
file|<unistd.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_function_decl
name|QT_BEGIN_NAMESPACE
comment|//#define QHOSTINFO_DEBUG
name|Q_GLOBAL_STATIC
parameter_list|(
name|QHostInfoLookupManager
parameter_list|,
name|theHostInfoLookupManager
parameter_list|)
comment|/*!     \class QHostInfo     \brief The QHostInfo class provides static functions for host name lookups.      \reentrant     \inmodule QtNetwork     \ingroup network      QHostInfo uses the lookup mechanisms provided by the operating     system to find the IP address(es) associated with a host name,     or the host name associated with an IP address.     The class provides two static convenience functions: one that     works asynchronously and emits a signal once the host is found,     and one that blocks and returns a QHostInfo object.      To look up a host's IP addresses asynchronously, call lookupHost(),     which takes the host name or IP address, a receiver object, and a slot     signature as arguments and returns an ID. You can abort the     lookup by calling abortHostLookup() with the lookup ID.      Example:      \snippet code/src_network_kernel_qhostinfo.cpp 0       The slot is invoked when the results are ready. The results are     stored in a QHostInfo object. Call     addresses() to get the list of IP addresses for the host, and     hostName() to get the host name that was looked up.      If the lookup failed, error() returns the type of error that     occurred. errorString() gives a human-readable description of the     lookup error.      If you want a blocking lookup, use the QHostInfo::fromName() function:      \snippet code/src_network_kernel_qhostinfo.cpp 1      QHostInfo supports Internationalized Domain Names (IDNs) through the     IDNA and Punycode standards.      To retrieve the name of the local host, use the static     QHostInfo::localHostName() function.      \note Since Qt 4.6.1 QHostInfo is using multiple threads for DNS lookup     instead of one dedicated DNS thread. This improves performance,     but also changes the order of signal emissions when using lookupHost()     compared to previous versions of Qt.     \note Since Qt 4.6.3 QHostInfo is using a small internal 60 second DNS cache     for performance improvements.      \sa QAbstractSocket, {http://www.rfc-editor.org/rfc/rfc3492.txt}{RFC 3492} */
DECL|variable|theIdCounter
specifier|static
name|QBasicAtomicInt
name|theIdCounter
decl_stmt|= Q_BASIC_ATOMIC_INITIALIZER(1
end_function_decl
begin_empty_stmt
DECL|variable|theIdCounter
unit|)
empty_stmt|;
end_empty_stmt
begin_comment
comment|/*!     Looks up the IP address(es) associated with host name \a name, and     returns an ID for the lookup. When the result of the lookup is     ready, the slot or signal \a member in \a receiver is called with     a QHostInfo argument. The QHostInfo object can then be inspected     to get the results of the lookup.      The lookup is performed by a single function call, for example:      \snippet code/src_network_kernel_qhostinfo.cpp 2      The implementation of the slot prints basic information about the     addresses returned by the lookup, or reports an error if it failed:      \snippet code/src_network_kernel_qhostinfo.cpp 3      If you pass a literal IP address to \a name instead of a host name,     QHostInfo will search for the domain name for the IP (i.e., QHostInfo will     perform a \e reverse lookup). On success, the resulting QHostInfo will     contain both the resolved domain name and IP addresses for the host     name. Example:      \snippet code/src_network_kernel_qhostinfo.cpp 4      \note There is no guarantee on the order the signals will be emitted     if you start multiple requests with lookupHost().      \sa abortHostLookup(), addresses(), error(), fromName() */
end_comment
begin_function
DECL|function|lookupHost
name|int
name|QHostInfo
operator|::
name|lookupHost
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|,
name|QObject
modifier|*
name|receiver
parameter_list|,
specifier|const
name|char
modifier|*
name|member
parameter_list|)
block|{
if|#
directive|if
name|defined
name|QHOSTINFO_DEBUG
name|qDebug
argument_list|(
literal|"QHostInfo::lookupHost(\"%s\", %p, %s)"
argument_list|,
name|name
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|receiver
argument_list|,
name|member
condition|?
name|member
operator|+
literal|1
else|:
literal|0
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|QAbstractEventDispatcher
operator|::
name|instance
argument_list|(
name|QThread
operator|::
name|currentThread
argument_list|()
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"QHostInfo::lookupHost() called with no event dispatcher"
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
name|qRegisterMetaType
argument_list|<
name|QHostInfo
argument_list|>
argument_list|()
expr_stmt|;
name|int
name|id
init|=
name|theIdCounter
operator|.
name|fetchAndAddRelaxed
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// generate unique ID
if|if
condition|(
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QHostInfo
name|hostInfo
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|hostInfo
operator|.
name|setError
argument_list|(
name|QHostInfo
operator|::
name|HostNotFound
argument_list|)
expr_stmt|;
name|hostInfo
operator|.
name|setErrorString
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QHostInfo"
argument_list|,
literal|"No host name given"
argument_list|)
argument_list|)
expr_stmt|;
name|QScopedPointer
argument_list|<
name|QHostInfoResult
argument_list|>
name|result
argument_list|(
operator|new
name|QHostInfoResult
argument_list|)
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|result
operator|.
name|data
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|resultsReady
argument_list|(
name|QHostInfo
argument_list|)
argument_list|)
argument_list|,
name|receiver
argument_list|,
name|member
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
expr_stmt|;
name|result
operator|.
name|data
argument_list|()
operator|->
name|emitResultsReady
argument_list|(
name|hostInfo
argument_list|)
expr_stmt|;
return|return
name|id
return|;
block|}
name|QHostInfoLookupManager
modifier|*
name|manager
init|=
name|theHostInfoLookupManager
argument_list|()
decl_stmt|;
if|if
condition|(
name|manager
condition|)
block|{
comment|// the application is still alive
if|if
condition|(
name|manager
operator|->
name|cache
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
comment|// check cache first
name|bool
name|valid
init|=
literal|false
decl_stmt|;
name|QHostInfo
name|info
init|=
name|manager
operator|->
name|cache
operator|.
name|get
argument_list|(
name|name
argument_list|,
operator|&
name|valid
argument_list|)
decl_stmt|;
if|if
condition|(
name|valid
condition|)
block|{
name|info
operator|.
name|setLookupId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|QHostInfoResult
name|result
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|result
argument_list|,
name|SIGNAL
argument_list|(
name|resultsReady
argument_list|(
name|QHostInfo
argument_list|)
argument_list|)
argument_list|,
name|receiver
argument_list|,
name|member
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
expr_stmt|;
name|result
operator|.
name|emitResultsReady
argument_list|(
name|info
argument_list|)
expr_stmt|;
return|return
name|id
return|;
block|}
block|}
comment|// cache is not enabled or it was not in the cache, do normal lookup
name|QHostInfoRunnable
modifier|*
name|runnable
init|=
operator|new
name|QHostInfoRunnable
argument_list|(
name|name
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|runnable
operator|->
name|resultEmitter
argument_list|,
name|SIGNAL
argument_list|(
name|resultsReady
argument_list|(
name|QHostInfo
argument_list|)
argument_list|)
argument_list|,
name|receiver
argument_list|,
name|member
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
expr_stmt|;
name|manager
operator|->
name|scheduleLookup
argument_list|(
name|runnable
argument_list|)
expr_stmt|;
block|}
return|return
name|id
return|;
block|}
end_function
begin_comment
comment|/*!     Aborts the host lookup with the ID \a id, as returned by lookupHost().      \sa lookupHost(), lookupId() */
end_comment
begin_function
DECL|function|abortHostLookup
name|void
name|QHostInfo
operator|::
name|abortHostLookup
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|theHostInfoLookupManager
argument_list|()
operator|->
name|abortLookup
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Looks up the IP address(es) for the given host \a name. The     function blocks during the lookup which means that execution of     the program is suspended until the results of the lookup are     ready. Returns the result of the lookup in a QHostInfo object.      If you pass a literal IP address to \a name instead of a host name,     QHostInfo will search for the domain name for the IP (i.e., QHostInfo will     perform a \e reverse lookup). On success, the returned QHostInfo will     contain both the resolved domain name and IP addresses for the host name.      \sa lookupHost() */
end_comment
begin_function
DECL|function|fromName
name|QHostInfo
name|QHostInfo
operator|::
name|fromName
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
block|{
if|#
directive|if
name|defined
name|QHOSTINFO_DEBUG
name|qDebug
argument_list|(
literal|"QHostInfo::fromName(\"%s\")"
argument_list|,
name|name
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QHostInfo
name|hostInfo
init|=
name|QHostInfoAgent
operator|::
name|fromName
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|QAbstractHostInfoLookupManager
modifier|*
name|manager
init|=
name|theHostInfoLookupManager
argument_list|()
decl_stmt|;
name|manager
operator|->
name|cache
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|hostInfo
argument_list|)
expr_stmt|;
return|return
name|hostInfo
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_BEARERMANAGEMENT
end_ifndef
begin_function
DECL|function|fromName
name|QHostInfo
name|QHostInfoPrivate
operator|::
name|fromName
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|,
name|QSharedPointer
argument_list|<
name|QNetworkSession
argument_list|>
name|session
parameter_list|)
block|{
if|#
directive|if
name|defined
name|QHOSTINFO_DEBUG
name|qDebug
argument_list|(
literal|"QHostInfoPrivate::fromName(\"%s\") with session %p"
argument_list|,
name|name
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|session
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QHostInfo
name|hostInfo
init|=
name|QHostInfoAgent
operator|::
name|fromName
argument_list|(
name|name
argument_list|,
name|session
argument_list|)
decl_stmt|;
name|QAbstractHostInfoLookupManager
modifier|*
name|manager
init|=
name|theHostInfoLookupManager
argument_list|()
decl_stmt|;
name|manager
operator|->
name|cache
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|hostInfo
argument_list|)
expr_stmt|;
return|return
name|hostInfo
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_BEARERMANAGEMENT
end_ifndef
begin_function
DECL|function|fromName
name|QHostInfo
name|QHostInfoAgent
operator|::
name|fromName
parameter_list|(
specifier|const
name|QString
modifier|&
name|hostName
parameter_list|,
name|QSharedPointer
argument_list|<
name|QNetworkSession
argument_list|>
parameter_list|)
block|{
return|return
name|QHostInfoAgent
operator|::
name|fromName
argument_list|(
name|hostName
argument_list|)
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*!     \enum QHostInfo::HostInfoError      This enum describes the various errors that can occur when trying     to resolve a host name.      \value NoError The lookup was successful.     \value HostNotFound No IP addresses were found for the host.     \value UnknownError An unknown error occurred.      \sa error(), setError() */
end_comment
begin_comment
comment|/*!     Constructs an empty host info object with lookup ID \a id.      \sa lookupId() */
end_comment
begin_constructor
DECL|function|QHostInfo
name|QHostInfo
operator|::
name|QHostInfo
parameter_list|(
name|int
name|id
parameter_list|)
member_init_list|:
name|d
argument_list|(
operator|new
name|QHostInfoPrivate
argument_list|)
block|{
name|d
operator|->
name|lookupId
operator|=
name|id
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Constructs a copy of \a other. */
end_comment
begin_constructor
DECL|function|QHostInfo
name|QHostInfo
operator|::
name|QHostInfo
parameter_list|(
specifier|const
name|QHostInfo
modifier|&
name|other
parameter_list|)
member_init_list|:
name|d
argument_list|(
operator|new
name|QHostInfoPrivate
argument_list|(
operator|*
name|other
operator|.
name|d
operator|.
name|data
argument_list|()
argument_list|)
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Assigns the data of the \a other object to this host info object,     and returns a reference to it. */
end_comment
begin_function
DECL|function|operator =
name|QHostInfo
modifier|&
name|QHostInfo
operator|::
name|operator
name|=
parameter_list|(
specifier|const
name|QHostInfo
modifier|&
name|other
parameter_list|)
block|{
operator|*
name|d
operator|.
name|data
argument_list|()
operator|=
operator|*
name|other
operator|.
name|d
operator|.
name|data
argument_list|()
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_function
begin_comment
comment|/*!     Destroys the host info object. */
end_comment
begin_destructor
DECL|function|~QHostInfo
name|QHostInfo
operator|::
name|~
name|QHostInfo
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     Returns the list of IP addresses associated with hostName(). This     list may be empty.      Example:      \snippet code/src_network_kernel_qhostinfo.cpp 5      \sa hostName(), error() */
end_comment
begin_function
DECL|function|addresses
name|QList
argument_list|<
name|QHostAddress
argument_list|>
name|QHostInfo
operator|::
name|addresses
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|addrs
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the list of addresses in this QHostInfo to \a addresses.      \sa addresses() */
end_comment
begin_function
DECL|function|setAddresses
name|void
name|QHostInfo
operator|::
name|setAddresses
parameter_list|(
specifier|const
name|QList
argument_list|<
name|QHostAddress
argument_list|>
modifier|&
name|addresses
parameter_list|)
block|{
name|d
operator|->
name|addrs
operator|=
name|addresses
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the name of the host whose IP addresses were looked up.      \sa localHostName() */
end_comment
begin_function
DECL|function|hostName
name|QString
name|QHostInfo
operator|::
name|hostName
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|hostName
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the host name of this QHostInfo to \a hostName.      \sa hostName() */
end_comment
begin_function
DECL|function|setHostName
name|void
name|QHostInfo
operator|::
name|setHostName
parameter_list|(
specifier|const
name|QString
modifier|&
name|hostName
parameter_list|)
block|{
name|d
operator|->
name|hostName
operator|=
name|hostName
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the type of error that occurred if the host name lookup     failed; otherwise returns NoError.      \sa setError(), errorString() */
end_comment
begin_function
DECL|function|error
name|QHostInfo
operator|::
name|HostInfoError
name|QHostInfo
operator|::
name|error
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|err
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the error type of this QHostInfo to \a error.      \sa error(), errorString() */
end_comment
begin_function
DECL|function|setError
name|void
name|QHostInfo
operator|::
name|setError
parameter_list|(
name|HostInfoError
name|error
parameter_list|)
block|{
name|d
operator|->
name|err
operator|=
name|error
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the ID of this lookup.      \sa setLookupId(), abortHostLookup(), hostName() */
end_comment
begin_function
DECL|function|lookupId
name|int
name|QHostInfo
operator|::
name|lookupId
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|lookupId
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the ID of this lookup to \a id.      \sa lookupId(), lookupHost() */
end_comment
begin_function
DECL|function|setLookupId
name|void
name|QHostInfo
operator|::
name|setLookupId
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|d
operator|->
name|lookupId
operator|=
name|id
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     If the lookup failed, this function returns a human readable     description of the error; otherwise "Unknown error" is returned.      \sa setErrorString(), error() */
end_comment
begin_function
DECL|function|errorString
name|QString
name|QHostInfo
operator|::
name|errorString
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|errorStr
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the human readable description of the error that occurred to \a str     if the lookup failed.      \sa errorString(), setError() */
end_comment
begin_function
DECL|function|setErrorString
name|void
name|QHostInfo
operator|::
name|setErrorString
parameter_list|(
specifier|const
name|QString
modifier|&
name|str
parameter_list|)
block|{
name|d
operator|->
name|errorStr
operator|=
name|str
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \fn QString QHostInfo::localHostName()      Returns the host name of this machine.      \sa hostName() */
end_comment
begin_comment
comment|/*!     \fn QString QHostInfo::localDomainName()      Returns the DNS domain of this machine.      Note: DNS domains are not related to domain names found in     Windows networks.      \sa hostName() */
end_comment
begin_constructor
DECL|function|QHostInfoRunnable
name|QHostInfoRunnable
operator|::
name|QHostInfoRunnable
parameter_list|(
name|QString
name|hn
parameter_list|,
name|int
name|i
parameter_list|)
member_init_list|:
name|toBeLookedUp
argument_list|(
name|hn
argument_list|)
member_init_list|,
name|id
argument_list|(
name|i
argument_list|)
block|{
name|setAutoDelete
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|// the QHostInfoLookupManager will at some point call this via a QThreadPool
end_comment
begin_function
DECL|function|run
name|void
name|QHostInfoRunnable
operator|::
name|run
parameter_list|()
block|{
name|QHostInfoLookupManager
modifier|*
name|manager
init|=
name|theHostInfoLookupManager
argument_list|()
decl_stmt|;
comment|// check aborted
if|if
condition|(
name|manager
operator|->
name|wasAborted
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|manager
operator|->
name|lookupFinished
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return;
block|}
name|QHostInfo
name|hostInfo
decl_stmt|;
comment|// QHostInfo::lookupHost already checks the cache. However we need to check
comment|// it here too because it might have been cache saved by another QHostInfoRunnable
comment|// in the meanwhile while this QHostInfoRunnable was scheduled but not running
if|if
condition|(
name|manager
operator|->
name|cache
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
comment|// check the cache first
name|bool
name|valid
init|=
literal|false
decl_stmt|;
name|hostInfo
operator|=
name|manager
operator|->
name|cache
operator|.
name|get
argument_list|(
name|toBeLookedUp
argument_list|,
operator|&
name|valid
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|valid
condition|)
block|{
comment|// not in cache, we need to do the lookup and store the result in the cache
name|hostInfo
operator|=
name|QHostInfoAgent
operator|::
name|fromName
argument_list|(
name|toBeLookedUp
argument_list|)
expr_stmt|;
name|manager
operator|->
name|cache
operator|.
name|put
argument_list|(
name|toBeLookedUp
argument_list|,
name|hostInfo
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// cache is not enabled, just do the lookup and continue
name|hostInfo
operator|=
name|QHostInfoAgent
operator|::
name|fromName
argument_list|(
name|toBeLookedUp
argument_list|)
expr_stmt|;
block|}
comment|// check aborted again
if|if
condition|(
name|manager
operator|->
name|wasAborted
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|manager
operator|->
name|lookupFinished
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// signal emission
name|hostInfo
operator|.
name|setLookupId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|resultEmitter
operator|.
name|emitResultsReady
argument_list|(
name|hostInfo
argument_list|)
expr_stmt|;
comment|// now also iterate through the postponed ones
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|manager
operator|->
name|mutex
argument_list|)
decl_stmt|;
name|QMutableListIterator
argument_list|<
name|QHostInfoRunnable
modifier|*
argument_list|>
name|iterator
argument_list|(
name|manager
operator|->
name|postponedLookups
argument_list|)
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|QHostInfoRunnable
modifier|*
name|postponed
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|toBeLookedUp
operator|==
name|postponed
operator|->
name|toBeLookedUp
condition|)
block|{
comment|// we can now emit
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
name|hostInfo
operator|.
name|setLookupId
argument_list|(
name|postponed
operator|->
name|id
argument_list|)
expr_stmt|;
name|postponed
operator|->
name|resultEmitter
operator|.
name|emitResultsReady
argument_list|(
name|hostInfo
argument_list|)
expr_stmt|;
operator|delete
name|postponed
expr_stmt|;
block|}
block|}
block|}
name|manager
operator|->
name|lookupFinished
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|// thread goes back to QThreadPool
block|}
end_function
begin_constructor
DECL|function|QHostInfoLookupManager
name|QHostInfoLookupManager
operator|::
name|QHostInfoLookupManager
parameter_list|()
member_init_list|:
name|mutex
argument_list|(
name|QMutex
operator|::
name|Recursive
argument_list|)
member_init_list|,
name|wasDeleted
argument_list|(
literal|false
argument_list|)
block|{
name|moveToThread
argument_list|(
name|QCoreApplicationPrivate
operator|::
name|mainThread
argument_list|()
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|QCoreApplication
operator|::
name|instance
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|destroyed
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|waitForThreadPoolDone
argument_list|()
argument_list|)
argument_list|,
name|Qt
operator|::
name|DirectConnection
argument_list|)
expr_stmt|;
name|threadPool
operator|.
name|setMaxThreadCount
argument_list|(
literal|5
argument_list|)
expr_stmt|;
comment|// do 5 DNS lookups in parallel
block|}
end_constructor
begin_destructor
DECL|function|~QHostInfoLookupManager
name|QHostInfoLookupManager
operator|::
name|~
name|QHostInfoLookupManager
parameter_list|()
block|{
name|wasDeleted
operator|=
literal|true
expr_stmt|;
comment|// don't qDeleteAll currentLookups, the QThreadPool has ownership
name|clear
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|clear
name|void
name|QHostInfoLookupManager
operator|::
name|clear
parameter_list|()
block|{
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
name|qDeleteAll
argument_list|(
name|postponedLookups
argument_list|)
expr_stmt|;
name|qDeleteAll
argument_list|(
name|scheduledLookups
argument_list|)
expr_stmt|;
name|qDeleteAll
argument_list|(
name|finishedLookups
argument_list|)
expr_stmt|;
name|postponedLookups
operator|.
name|clear
argument_list|()
expr_stmt|;
name|scheduledLookups
operator|.
name|clear
argument_list|()
expr_stmt|;
name|finishedLookups
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|threadPool
operator|.
name|waitForDone
argument_list|()
expr_stmt|;
name|cache
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|work
name|void
name|QHostInfoLookupManager
operator|::
name|work
parameter_list|()
block|{
if|if
condition|(
name|wasDeleted
condition|)
return|return;
comment|// goals of this function:
comment|//  - launch new lookups via the thread pool
comment|//  - make sure only one lookup per host/IP is in progress
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|finishedLookups
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// remove ID from aborted if it is in there
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|finishedLookups
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|abortedLookups
operator|.
name|removeAll
argument_list|(
name|finishedLookups
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|id
argument_list|)
expr_stmt|;
block|}
name|finishedLookups
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|postponedLookups
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// try to start the postponed ones
name|QMutableListIterator
argument_list|<
name|QHostInfoRunnable
modifier|*
argument_list|>
name|iterator
argument_list|(
name|postponedLookups
argument_list|)
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|QHostInfoRunnable
modifier|*
name|postponed
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// check if none of the postponed hostnames is currently running
name|bool
name|alreadyRunning
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|currentLookups
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|currentLookups
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|toBeLookedUp
operator|==
name|postponed
operator|->
name|toBeLookedUp
condition|)
block|{
name|alreadyRunning
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|alreadyRunning
condition|)
block|{
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
name|scheduledLookups
operator|.
name|prepend
argument_list|(
name|postponed
argument_list|)
expr_stmt|;
comment|// prepend! we want to finish it ASAP
block|}
block|}
block|}
if|if
condition|(
operator|!
name|scheduledLookups
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// try to start the new ones
name|QMutableListIterator
argument_list|<
name|QHostInfoRunnable
modifier|*
argument_list|>
name|iterator
argument_list|(
name|scheduledLookups
argument_list|)
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|QHostInfoRunnable
modifier|*
name|scheduled
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// check if a lookup for this host is already running, then postpone
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|currentLookups
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|currentLookups
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|toBeLookedUp
operator|==
name|scheduled
operator|->
name|toBeLookedUp
condition|)
block|{
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
name|postponedLookups
operator|.
name|append
argument_list|(
name|scheduled
argument_list|)
expr_stmt|;
name|scheduled
operator|=
literal|0
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|scheduled
operator|&&
name|currentLookups
operator|.
name|size
argument_list|()
operator|<
name|threadPool
operator|.
name|maxThreadCount
argument_list|()
condition|)
block|{
comment|// runnable now running in new thread, track this in currentLookups
name|threadPool
operator|.
name|start
argument_list|(
name|scheduled
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
name|currentLookups
operator|.
name|append
argument_list|(
name|scheduled
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// was postponed, continue iterating
continue|continue;
block|}
block|}
empty_stmt|;
block|}
block|}
end_function
begin_comment
comment|// called by QHostInfo
end_comment
begin_function
DECL|function|scheduleLookup
name|void
name|QHostInfoLookupManager
operator|::
name|scheduleLookup
parameter_list|(
name|QHostInfoRunnable
modifier|*
name|r
parameter_list|)
block|{
if|if
condition|(
name|wasDeleted
condition|)
return|return;
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|this
operator|->
name|mutex
argument_list|)
decl_stmt|;
name|scheduledLookups
operator|.
name|enqueue
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|work
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|// called by QHostInfo
end_comment
begin_function
DECL|function|abortLookup
name|void
name|QHostInfoLookupManager
operator|::
name|abortLookup
parameter_list|(
name|int
name|id
parameter_list|)
block|{
if|if
condition|(
name|wasDeleted
condition|)
return|return;
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|this
operator|->
name|mutex
argument_list|)
decl_stmt|;
comment|// is postponed? delete and return
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|postponedLookups
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|postponedLookups
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|id
operator|==
name|id
condition|)
block|{
operator|delete
name|postponedLookups
operator|.
name|takeAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
comment|// is scheduled? delete and return
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|scheduledLookups
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|scheduledLookups
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|id
operator|==
name|id
condition|)
block|{
operator|delete
name|scheduledLookups
operator|.
name|takeAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
if|if
condition|(
operator|!
name|abortedLookups
operator|.
name|contains
argument_list|(
name|id
argument_list|)
condition|)
name|abortedLookups
operator|.
name|append
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// called from QHostInfoRunnable
end_comment
begin_function
DECL|function|wasAborted
name|bool
name|QHostInfoLookupManager
operator|::
name|wasAborted
parameter_list|(
name|int
name|id
parameter_list|)
block|{
if|if
condition|(
name|wasDeleted
condition|)
return|return
literal|true
return|;
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|this
operator|->
name|mutex
argument_list|)
decl_stmt|;
return|return
name|abortedLookups
operator|.
name|contains
argument_list|(
name|id
argument_list|)
return|;
block|}
end_function
begin_comment
comment|// called from QHostInfoRunnable
end_comment
begin_function
DECL|function|lookupFinished
name|void
name|QHostInfoLookupManager
operator|::
name|lookupFinished
parameter_list|(
name|QHostInfoRunnable
modifier|*
name|r
parameter_list|)
block|{
if|if
condition|(
name|wasDeleted
condition|)
return|return;
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|this
operator|->
name|mutex
argument_list|)
decl_stmt|;
name|currentLookups
operator|.
name|removeOne
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|finishedLookups
operator|.
name|append
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|work
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|// This function returns immediately when we had a result in the cache, else it will later emit a signal
end_comment
begin_function
DECL|function|qt_qhostinfo_lookup
name|QHostInfo
name|qt_qhostinfo_lookup
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|,
name|QObject
modifier|*
name|receiver
parameter_list|,
specifier|const
name|char
modifier|*
name|member
parameter_list|,
name|bool
modifier|*
name|valid
parameter_list|,
name|int
modifier|*
name|id
parameter_list|)
block|{
operator|*
name|valid
operator|=
literal|false
expr_stmt|;
operator|*
name|id
operator|=
operator|-
literal|1
expr_stmt|;
comment|// check cache
name|QAbstractHostInfoLookupManager
modifier|*
name|manager
init|=
name|theHostInfoLookupManager
argument_list|()
decl_stmt|;
if|if
condition|(
name|manager
operator|&&
name|manager
operator|->
name|cache
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
name|QHostInfo
name|info
init|=
name|manager
operator|->
name|cache
operator|.
name|get
argument_list|(
name|name
argument_list|,
name|valid
argument_list|)
decl_stmt|;
if|if
condition|(
operator|*
name|valid
condition|)
block|{
return|return
name|info
return|;
block|}
block|}
comment|// was not in cache, trigger lookup
operator|*
name|id
operator|=
name|QHostInfo
operator|::
name|lookupHost
argument_list|(
name|name
argument_list|,
name|receiver
argument_list|,
name|member
argument_list|)
expr_stmt|;
comment|// return empty response, valid==false
return|return
name|QHostInfo
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|qt_qhostinfo_clear_cache
name|void
name|qt_qhostinfo_clear_cache
parameter_list|()
block|{
name|QAbstractHostInfoLookupManager
modifier|*
name|manager
init|=
name|theHostInfoLookupManager
argument_list|()
decl_stmt|;
if|if
condition|(
name|manager
condition|)
block|{
name|manager
operator|->
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|qt_qhostinfo_enable_cache
name|void
name|Q_AUTOTEST_EXPORT
name|qt_qhostinfo_enable_cache
parameter_list|(
name|bool
name|e
parameter_list|)
block|{
name|QAbstractHostInfoLookupManager
modifier|*
name|manager
init|=
name|theHostInfoLookupManager
argument_list|()
decl_stmt|;
if|if
condition|(
name|manager
condition|)
block|{
name|manager
operator|->
name|cache
operator|.
name|setEnabled
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|// cache for 60 seconds
end_comment
begin_comment
comment|// cache 128 items
end_comment
begin_constructor
DECL|function|QHostInfoCache
name|QHostInfoCache
operator|::
name|QHostInfoCache
parameter_list|()
member_init_list|:
name|max_age
argument_list|(
literal|60
argument_list|)
member_init_list|,
name|enabled
argument_list|(
literal|true
argument_list|)
member_init_list|,
name|cache
argument_list|(
literal|128
argument_list|)
block|{
ifdef|#
directive|ifdef
name|QT_QHOSTINFO_CACHE_DISABLED_BY_DEFAULT
name|enabled
operator|=
literal|false
expr_stmt|;
endif|#
directive|endif
block|}
end_constructor
begin_function
DECL|function|isEnabled
name|bool
name|QHostInfoCache
operator|::
name|isEnabled
parameter_list|()
block|{
return|return
name|enabled
return|;
block|}
end_function
begin_comment
comment|// this function is currently only used for the auto tests
end_comment
begin_comment
comment|// and not usable by public API
end_comment
begin_function
DECL|function|setEnabled
name|void
name|QHostInfoCache
operator|::
name|setEnabled
parameter_list|(
name|bool
name|e
parameter_list|)
block|{
name|enabled
operator|=
name|e
expr_stmt|;
block|}
end_function
begin_function
DECL|function|get
name|QHostInfo
name|QHostInfoCache
operator|::
name|get
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|,
name|bool
modifier|*
name|valid
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|this
operator|->
name|mutex
argument_list|)
decl_stmt|;
operator|*
name|valid
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|cache
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|QHostInfoCacheElement
modifier|*
name|element
init|=
name|cache
operator|.
name|object
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|element
operator|->
name|age
operator|.
name|elapsed
argument_list|()
operator|<
name|max_age
operator|*
literal|1000
condition|)
operator|*
name|valid
operator|=
literal|true
expr_stmt|;
return|return
name|element
operator|->
name|info
return|;
comment|// FIXME idea:
comment|// if too old but not expired, trigger a new lookup
comment|// to freshen our cache
block|}
return|return
name|QHostInfo
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|put
name|void
name|QHostInfoCache
operator|::
name|put
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|,
specifier|const
name|QHostInfo
modifier|&
name|info
parameter_list|)
block|{
comment|// if the lookup failed, don't cache
if|if
condition|(
name|info
operator|.
name|error
argument_list|()
operator|!=
name|QHostInfo
operator|::
name|NoError
condition|)
return|return;
name|QHostInfoCacheElement
modifier|*
name|element
init|=
operator|new
name|QHostInfoCacheElement
argument_list|()
decl_stmt|;
name|element
operator|->
name|info
operator|=
name|info
expr_stmt|;
name|element
operator|->
name|age
operator|=
name|QElapsedTimer
argument_list|()
expr_stmt|;
name|element
operator|->
name|age
operator|.
name|start
argument_list|()
expr_stmt|;
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|this
operator|->
name|mutex
argument_list|)
decl_stmt|;
name|cache
operator|.
name|insert
argument_list|(
name|name
argument_list|,
name|element
argument_list|)
expr_stmt|;
comment|// cache will take ownership
block|}
end_function
begin_function
DECL|function|clear
name|void
name|QHostInfoCache
operator|::
name|clear
parameter_list|()
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|this
operator|->
name|mutex
argument_list|)
decl_stmt|;
name|cache
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|globalInstance
name|QAbstractHostInfoLookupManager
modifier|*
name|QAbstractHostInfoLookupManager
operator|::
name|globalInstance
parameter_list|()
block|{
return|return
name|theHostInfoLookupManager
argument_list|()
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
