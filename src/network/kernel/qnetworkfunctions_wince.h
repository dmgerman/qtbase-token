begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtNetwork module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia. For licensing terms and ** conditions see http://qt.digia.com/licensing. For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights. These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QNETWORKFUNCTIONS_WINCE_H
end_ifndef
begin_define
DECL|macro|QNETWORKFUNCTIONS_WINCE_H
define|#
directive|define
name|QNETWORKFUNCTIONS_WINCE_H
end_define
begin_if
if|#
directive|if
literal|0
end_if
begin_pragma
pragma|#
directive|pragma
name|qt_sync_stop_processing
end_pragma
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_WINCE
end_ifdef
begin_include
include|#
directive|include
file|<qt_windows.h>
end_include
begin_function_decl
name|QT_BEGIN_NAMESPACE
name|DECLARE_HANDLE
parameter_list|(
name|SC_HANDLE
parameter_list|)
function_decl|;
end_function_decl
begin_typedef
DECL|enum|_SC_ENUM_TYPE
typedef|typedef
enum|enum
name|_SC_ENUM_TYPE
block|{
DECL|enumerator|SC_ENUM_PROCESS_INFO
name|SC_ENUM_PROCESS_INFO
init|=
literal|0
block|}
DECL|typedef|SC_ENUM_TYPE
name|SC_ENUM_TYPE
typedef|;
end_typedef
begin_define
DECL|macro|SC_MANAGER_CONNECT
define|#
directive|define
name|SC_MANAGER_CONNECT
value|0x0001
end_define
begin_define
DECL|macro|SC_MANAGER_CREATE_SERVICE
define|#
directive|define
name|SC_MANAGER_CREATE_SERVICE
value|0x0002
end_define
begin_define
DECL|macro|SC_MANAGER_ENUMERATE_SERVICE
define|#
directive|define
name|SC_MANAGER_ENUMERATE_SERVICE
value|0x0004
end_define
begin_define
DECL|macro|SERVICE_ACTIVE
define|#
directive|define
name|SERVICE_ACTIVE
value|0x00000001
end_define
begin_define
DECL|macro|SERVICE_INACTIVE
define|#
directive|define
name|SERVICE_INACTIVE
value|0x00000002
end_define
begin_define
DECL|macro|SERVICE_STATE_ALL
define|#
directive|define
name|SERVICE_STATE_ALL
value|(SERVICE_ACTIVE   | \                                         SERVICE_INACTIVE)
end_define
begin_typedef
DECL|struct|_SERVICE_STATUS_PROCESS
typedef|typedef
struct|struct
name|_SERVICE_STATUS_PROCESS
block|{
DECL|member|dwServiceType
name|DWORD
name|dwServiceType
decl_stmt|;
DECL|member|dwCurrentState
name|DWORD
name|dwCurrentState
decl_stmt|;
DECL|member|dwControlsAccepted
name|DWORD
name|dwControlsAccepted
decl_stmt|;
DECL|member|dwWin32ExitCode
name|DWORD
name|dwWin32ExitCode
decl_stmt|;
DECL|member|dwServiceSpecificExitCode
name|DWORD
name|dwServiceSpecificExitCode
decl_stmt|;
DECL|member|dwCheckPoint
name|DWORD
name|dwCheckPoint
decl_stmt|;
DECL|member|dwWaitHint
name|DWORD
name|dwWaitHint
decl_stmt|;
DECL|member|dwProcessId
name|DWORD
name|dwProcessId
decl_stmt|;
DECL|member|dwServiceFlags
name|DWORD
name|dwServiceFlags
decl_stmt|;
block|}
DECL|typedef|SERVICE_STATUS_PROCESS
DECL|typedef|LPSERVICE_STATUS_PROCESS
name|SERVICE_STATUS_PROCESS
operator|,
typedef|*
name|LPSERVICE_STATUS_PROCESS
typedef|;
end_typedef
begin_typedef
DECL|struct|_ENUM_SERVICE_STATUS_PROCESSA
typedef|typedef
struct|struct
name|_ENUM_SERVICE_STATUS_PROCESSA
block|{
DECL|member|lpServiceName
name|LPSTR
name|lpServiceName
decl_stmt|;
DECL|member|lpDisplayName
name|LPSTR
name|lpDisplayName
decl_stmt|;
DECL|member|ServiceStatusProcess
name|SERVICE_STATUS_PROCESS
name|ServiceStatusProcess
decl_stmt|;
block|}
DECL|typedef|ENUM_SERVICE_STATUS_PROCESSA
DECL|typedef|LPENUM_SERVICE_STATUS_PROCESSA
name|ENUM_SERVICE_STATUS_PROCESSA
operator|,
typedef|*
name|LPENUM_SERVICE_STATUS_PROCESSA
typedef|;
end_typedef
begin_typedef
DECL|struct|_ENUM_SERVICE_STATUS_PROCESSW
typedef|typedef
struct|struct
name|_ENUM_SERVICE_STATUS_PROCESSW
block|{
DECL|member|lpServiceName
name|LPWSTR
name|lpServiceName
decl_stmt|;
DECL|member|lpDisplayName
name|LPWSTR
name|lpDisplayName
decl_stmt|;
DECL|member|ServiceStatusProcess
name|SERVICE_STATUS_PROCESS
name|ServiceStatusProcess
decl_stmt|;
block|}
DECL|typedef|ENUM_SERVICE_STATUS_PROCESSW
DECL|typedef|LPENUM_SERVICE_STATUS_PROCESSW
name|ENUM_SERVICE_STATUS_PROCESSW
operator|,
typedef|*
name|LPENUM_SERVICE_STATUS_PROCESSW
typedef|;
end_typedef
begin_ifdef
ifdef|#
directive|ifdef
name|UNICODE
end_ifdef
begin_typedef
DECL|typedef|ENUM_SERVICE_STATUS_PROCESS
typedef|typedef
name|ENUM_SERVICE_STATUS_PROCESSW
name|ENUM_SERVICE_STATUS_PROCESS
typedef|;
end_typedef
begin_typedef
DECL|typedef|LPENUM_SERVICE_STATUS_PROCESS
typedef|typedef
name|LPENUM_SERVICE_STATUS_PROCESSW
name|LPENUM_SERVICE_STATUS_PROCESS
typedef|;
end_typedef
begin_else
else|#
directive|else
end_else
begin_typedef
DECL|typedef|ENUM_SERVICE_STATUS_PROCESS
typedef|typedef
name|ENUM_SERVICE_STATUS_PROCESSA
name|ENUM_SERVICE_STATUS_PROCESS
typedef|;
end_typedef
begin_typedef
DECL|typedef|LPENUM_SERVICE_STATUS_PROCESS
typedef|typedef
name|LPENUM_SERVICE_STATUS_PROCESSA
name|LPENUM_SERVICE_STATUS_PROCESS
typedef|;
end_typedef
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// UNICODE
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Q_OS_WINCE
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QNETWORKFUNCTIONS_WINCE_H
end_comment
end_unit
