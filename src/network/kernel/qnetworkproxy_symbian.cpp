begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the FOO module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|/**  * Some notes about the code:  *  * ** It is assumed that the system proxies are for url based requests  *  ie. HTTP/HTTPS based.  * ** It is assumed that proxies don't use authentication.  * ** It is assumed that there is no exceptions to proxy use (Symbian side  *  does have the field for it but it is not user modifiable by default).  * ** There is no checking for protocol name.  */
end_comment
begin_include
include|#
directive|include
file|<QtNetwork/qnetworkproxy.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_NETWORKPROXY
end_ifndef
begin_include
include|#
directive|include
file|<metadatabase.h>
end_include
begin_comment
comment|// CMDBSession
end_comment
begin_include
include|#
directive|include
file|<commsdattypeinfov1_1.h>
end_include
begin_comment
comment|// CCDIAPRecord, CCDProxiesRecord
end_comment
begin_include
include|#
directive|include
file|<commsdattypesv1_1.h>
end_include
begin_comment
comment|// KCDTIdIAPRecord, KCDTIdProxiesRecord
end_comment
begin_include
include|#
directive|include
file|<QtNetwork/QNetworkConfigurationManager>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/QNetworkConfiguration>
end_include
begin_include
include|#
directive|include
file|<QFlags>
end_include
begin_using
using|using
namespace|namespace
name|CommsDat
namespace|;
end_using
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_class
DECL|class|SymbianIapId
class|class
name|SymbianIapId
block|{
public|public:
DECL|enum|State
enum|enum
name|State
block|{
DECL|enumerator|NotValid
name|NotValid
block|,
DECL|enumerator|Valid
name|Valid
block|}
enum|;
name|Q_DECLARE_FLAGS
argument_list|(
argument|States
argument_list|,
argument|State
argument_list|)
DECL|function|SymbianIapId
name|SymbianIapId
parameter_list|()
block|{}
DECL|function|~SymbianIapId
name|~
name|SymbianIapId
parameter_list|()
block|{}
DECL|function|setIapId
name|void
name|setIapId
parameter_list|(
name|TUint32
name|iapId
parameter_list|)
block|{
name|iapState
operator||=
name|Valid
expr_stmt|;
name|id
operator|=
name|iapId
expr_stmt|;
block|}
DECL|function|isValid
name|bool
name|isValid
parameter_list|()
block|{
return|return
name|iapState
operator|==
name|Valid
return|;
block|}
DECL|function|iapId
name|TUint32
name|iapId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
private|private:
DECL|member|iapState
name|QFlags
argument_list|<
name|States
argument_list|>
name|iapState
decl_stmt|;
DECL|member|id
name|TUint32
name|id
decl_stmt|;
block|}
class|;
end_class
begin_macro
name|Q_DECLARE_OPERATORS_FOR_FLAGS
argument_list|(
argument|SymbianIapId::States
argument_list|)
end_macro
begin_class
DECL|class|SymbianProxyQuery
class|class
name|SymbianProxyQuery
block|{
public|public:
specifier|static
name|QNetworkConfiguration
name|findCurrentConfiguration
parameter_list|(
name|QNetworkConfigurationManager
modifier|&
name|configurationManager
parameter_list|)
function_decl|;
specifier|static
name|SymbianIapId
name|getIapId
parameter_list|(
name|QNetworkConfigurationManager
modifier|&
name|configurationManager
parameter_list|,
specifier|const
name|QNetworkProxyQuery
modifier|&
name|query
parameter_list|)
function_decl|;
specifier|static
name|CCDIAPRecord
modifier|*
name|getIapRecordLC
parameter_list|(
name|TUint32
name|aIAPId
parameter_list|,
name|CMDBSession
modifier|&
name|aDb
parameter_list|)
function_decl|;
specifier|static
name|CMDBRecordSet
argument_list|<
name|CCDProxiesRecord
argument_list|>
modifier|*
name|prepareQueryLC
parameter_list|(
name|TUint32
name|serviceId
parameter_list|,
name|TDesC
modifier|&
name|serviceType
parameter_list|)
function_decl|;
specifier|static
name|QList
argument_list|<
name|QNetworkProxy
argument_list|>
name|proxyQueryL
parameter_list|(
name|TUint32
name|aIAPId
parameter_list|,
specifier|const
name|QNetworkProxyQuery
modifier|&
name|query
parameter_list|)
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|findCurrentConfiguration
name|QNetworkConfiguration
name|SymbianProxyQuery
operator|::
name|findCurrentConfiguration
parameter_list|(
name|QNetworkConfigurationManager
modifier|&
name|configurationManager
parameter_list|)
block|{
name|QList
argument_list|<
name|QNetworkConfiguration
argument_list|>
name|activeConfigurations
init|=
name|configurationManager
operator|.
name|allConfigurations
argument_list|(
name|QNetworkConfiguration
operator|::
name|Active
argument_list|)
decl_stmt|;
name|QNetworkConfiguration
name|currentConfig
decl_stmt|;
if|if
condition|(
name|activeConfigurations
operator|.
name|count
argument_list|()
operator|>
literal|0
condition|)
block|{
name|currentConfig
operator|=
name|activeConfigurations
operator|.
name|at
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// No active configurations, try default one
name|QNetworkConfiguration
name|defaultConfiguration
init|=
name|configurationManager
operator|.
name|defaultConfiguration
argument_list|()
decl_stmt|;
if|if
condition|(
name|defaultConfiguration
operator|.
name|isValid
argument_list|()
condition|)
block|{
switch|switch
condition|(
name|defaultConfiguration
operator|.
name|type
argument_list|()
condition|)
block|{
case|case
name|QNetworkConfiguration
operator|::
name|InternetAccessPoint
case|:
name|currentConfig
operator|=
name|defaultConfiguration
expr_stmt|;
break|break;
case|case
name|QNetworkConfiguration
operator|::
name|ServiceNetwork
case|:
block|{
comment|// Note: This code assumes that the only unambigious way to
comment|// find current proxy config is if there is only one access point
comment|// or if the found access point is immediately usable.
name|QList
argument_list|<
name|QNetworkConfiguration
argument_list|>
name|childConfigurations
init|=
name|defaultConfiguration
operator|.
name|children
argument_list|()
decl_stmt|;
if|if
condition|(
name|childConfigurations
operator|.
name|count
argument_list|()
operator|==
literal|1
condition|)
block|{
name|currentConfig
operator|=
name|childConfigurations
operator|.
name|at
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|childConfigurations
operator|.
name|count
argument_list|()
condition|;
name|index
operator|++
control|)
block|{
name|QNetworkConfiguration
name|childConfig
init|=
name|childConfigurations
operator|.
name|at
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|childConfig
operator|.
name|isValid
argument_list|()
operator|&&
name|childConfig
operator|.
name|state
argument_list|()
operator|==
name|QNetworkConfiguration
operator|::
name|Discovered
condition|)
block|{
name|currentConfig
operator|=
name|childConfig
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
break|break;
case|case
name|QNetworkConfiguration
operator|::
name|UserChoice
case|:
comment|// User choice is not a valid configuration for proxy discovery
break|break;
block|}
block|}
block|}
return|return
name|currentConfig
return|;
block|}
end_function
begin_function
DECL|function|getIapId
name|SymbianIapId
name|SymbianProxyQuery
operator|::
name|getIapId
parameter_list|(
name|QNetworkConfigurationManager
modifier|&
name|configurationManager
parameter_list|,
specifier|const
name|QNetworkProxyQuery
modifier|&
name|query
parameter_list|)
block|{
name|SymbianIapId
name|iapId
decl_stmt|;
name|QNetworkConfiguration
name|currentConfig
init|=
name|query
operator|.
name|networkConfiguration
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|currentConfig
operator|.
name|isValid
argument_list|()
condition|)
block|{
comment|//If config is not specified, then try to find out an active or default one
name|currentConfig
operator|=
name|findCurrentConfiguration
argument_list|(
name|configurationManager
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|currentConfig
operator|.
name|isValid
argument_list|()
condition|)
block|{
comment|// Note: the following code assumes that the identifier is in format
comment|// I_xxxx where xxxx is the identifier of IAP. This is meant as a
comment|// temporary solution until there is a support for returning
comment|// implementation specific identifier.
specifier|const
name|int
name|generalPartLength
init|=
literal|2
decl_stmt|;
specifier|const
name|int
name|identifierNumberLength
init|=
name|currentConfig
operator|.
name|identifier
argument_list|()
operator|.
name|length
argument_list|()
operator|-
name|generalPartLength
decl_stmt|;
name|QString
name|idString
argument_list|(
name|currentConfig
operator|.
name|identifier
argument_list|()
operator|.
name|right
argument_list|(
name|identifierNumberLength
argument_list|)
argument_list|)
decl_stmt|;
name|bool
name|success
decl_stmt|;
name|uint
name|id
init|=
name|idString
operator|.
name|toUInt
argument_list|(
operator|&
name|success
argument_list|)
decl_stmt|;
if|if
condition|(
name|success
condition|)
name|iapId
operator|.
name|setIapId
argument_list|(
name|id
argument_list|)
expr_stmt|;
else|else
name|qWarning
argument_list|()
operator|<<
literal|"Failed to convert identifier to access point identifier: "
operator|<<
name|currentConfig
operator|.
name|identifier
argument_list|()
expr_stmt|;
block|}
return|return
name|iapId
return|;
block|}
end_function
begin_function
DECL|function|getIapRecordLC
name|CCDIAPRecord
modifier|*
name|SymbianProxyQuery
operator|::
name|getIapRecordLC
parameter_list|(
name|TUint32
name|aIAPId
parameter_list|,
name|CMDBSession
modifier|&
name|aDb
parameter_list|)
block|{
name|CCDIAPRecord
modifier|*
name|iap
init|=
cast|static_cast
argument_list|<
name|CCDIAPRecord
operator|*
argument_list|>
argument_list|(
name|CCDRecordBase
operator|::
name|RecordFactoryL
argument_list|(
name|KCDTIdIAPRecord
argument_list|)
argument_list|)
decl_stmt|;
name|CleanupStack
operator|::
name|PushL
argument_list|(
name|iap
argument_list|)
expr_stmt|;
name|iap
operator|->
name|SetRecordId
argument_list|(
name|aIAPId
argument_list|)
expr_stmt|;
name|iap
operator|->
name|LoadL
argument_list|(
name|aDb
argument_list|)
expr_stmt|;
return|return
name|iap
return|;
block|}
end_function
begin_function
DECL|function|prepareQueryLC
name|CMDBRecordSet
argument_list|<
name|CCDProxiesRecord
argument_list|>
modifier|*
name|SymbianProxyQuery
operator|::
name|prepareQueryLC
parameter_list|(
name|TUint32
name|serviceId
parameter_list|,
name|TDesC
modifier|&
name|serviceType
parameter_list|)
block|{
comment|// Create a recordset of type CCDProxiesRecord
comment|// for priming search.
comment|// This will ultimately contain record(s)
comment|// matching the priming record attributes
name|CMDBRecordSet
argument_list|<
name|CCDProxiesRecord
argument_list|>
modifier|*
name|proxyRecords
init|=
operator|new
operator|(
name|ELeave
operator|)
name|CMDBRecordSet
argument_list|<
name|CCDProxiesRecord
argument_list|>
argument_list|(
name|KCDTIdProxiesRecord
argument_list|)
decl_stmt|;
name|CleanupStack
operator|::
name|PushL
argument_list|(
name|proxyRecords
argument_list|)
expr_stmt|;
name|CCDProxiesRecord
modifier|*
name|primingProxyRecord
init|=
cast|static_cast
argument_list|<
name|CCDProxiesRecord
operator|*
argument_list|>
argument_list|(
name|CCDRecordBase
operator|::
name|RecordFactoryL
argument_list|(
name|KCDTIdProxiesRecord
argument_list|)
argument_list|)
decl_stmt|;
name|CleanupStack
operator|::
name|PushL
argument_list|(
name|primingProxyRecord
argument_list|)
expr_stmt|;
name|primingProxyRecord
operator|->
name|iServiceType
operator|.
name|SetMaxLengthL
argument_list|(
name|serviceType
operator|.
name|Length
argument_list|()
argument_list|)
expr_stmt|;
name|primingProxyRecord
operator|->
name|iServiceType
operator|=
name|serviceType
expr_stmt|;
name|primingProxyRecord
operator|->
name|iService
operator|=
name|serviceId
expr_stmt|;
name|primingProxyRecord
operator|->
name|iUseProxyServer
operator|=
name|ETrue
expr_stmt|;
name|proxyRecords
operator|->
name|iRecords
operator|.
name|AppendL
argument_list|(
name|primingProxyRecord
argument_list|)
expr_stmt|;
comment|// Ownership of primingProxyRecord is transferred to
comment|// proxyRecords, just remove it from the CleanupStack
name|CleanupStack
operator|::
name|Pop
argument_list|(
name|primingProxyRecord
argument_list|)
expr_stmt|;
return|return
name|proxyRecords
return|;
block|}
end_function
begin_function
DECL|function|proxyQueryL
name|QList
argument_list|<
name|QNetworkProxy
argument_list|>
name|SymbianProxyQuery
operator|::
name|proxyQueryL
parameter_list|(
name|TUint32
name|aIAPId
parameter_list|,
specifier|const
name|QNetworkProxyQuery
modifier|&
name|query
parameter_list|)
block|{
name|QList
argument_list|<
name|QNetworkProxy
argument_list|>
name|foundProxies
decl_stmt|;
if|if
condition|(
name|query
operator|.
name|queryType
argument_list|()
operator|!=
name|QNetworkProxyQuery
operator|::
name|UrlRequest
condition|)
block|{
return|return
name|foundProxies
return|;
block|}
name|CMDBSession
modifier|*
name|iDb
init|=
name|CMDBSession
operator|::
name|NewLC
argument_list|(
name|KCDVersion1_1
argument_list|)
decl_stmt|;
name|CCDIAPRecord
modifier|*
name|iap
init|=
name|getIapRecordLC
argument_list|(
name|aIAPId
argument_list|,
operator|*
name|iDb
argument_list|)
decl_stmt|;
comment|// Read service table id and service type
comment|// from the IAP record found
name|TUint32
name|serviceId
init|=
name|iap
operator|->
name|iService
decl_stmt|;
name|RBuf
name|serviceType
decl_stmt|;
name|serviceType
operator|.
name|CreateL
argument_list|(
name|iap
operator|->
name|iServiceType
argument_list|)
expr_stmt|;
name|CleanupStack
operator|::
name|PopAndDestroy
argument_list|(
name|iap
argument_list|)
expr_stmt|;
name|CleanupClosePushL
argument_list|(
name|serviceType
argument_list|)
expr_stmt|;
name|CMDBRecordSet
argument_list|<
name|CCDProxiesRecord
argument_list|>
modifier|*
name|proxyRecords
init|=
name|prepareQueryLC
argument_list|(
name|serviceId
argument_list|,
name|serviceType
argument_list|)
decl_stmt|;
comment|// Now to find a proxy table matching our criteria
if|if
condition|(
name|proxyRecords
operator|->
name|FindL
argument_list|(
operator|*
name|iDb
argument_list|)
condition|)
block|{
name|TInt
name|count
init|=
name|proxyRecords
operator|->
name|iRecords
operator|.
name|Count
argument_list|()
decl_stmt|;
for|for
control|(
name|TInt
name|index
init|=
literal|0
init|;
name|index
operator|<
name|count
condition|;
name|index
operator|++
control|)
block|{
name|CCDProxiesRecord
modifier|*
name|proxyRecord
init|=
cast|static_cast
argument_list|<
name|CCDProxiesRecord
operator|*
argument_list|>
argument_list|(
name|proxyRecords
operator|->
name|iRecords
index|[
name|index
index|]
argument_list|)
decl_stmt|;
name|RBuf
name|serverName
decl_stmt|;
name|serverName
operator|.
name|CreateL
argument_list|(
name|proxyRecord
operator|->
name|iServerName
argument_list|)
expr_stmt|;
name|CleanupClosePushL
argument_list|(
name|serverName
argument_list|)
expr_stmt|;
if|if
condition|(
name|serverName
operator|.
name|Length
argument_list|()
operator|==
literal|0
condition|)
name|User
operator|::
name|Leave
argument_list|(
name|KErrNotFound
argument_list|)
expr_stmt|;
name|QString
name|serverNameQt
argument_list|(
operator|(
specifier|const
name|QChar
operator|*
operator|)
name|serverName
operator|.
name|Ptr
argument_list|()
argument_list|,
name|serverName
operator|.
name|Length
argument_list|()
argument_list|)
decl_stmt|;
name|CleanupStack
operator|::
name|Pop
argument_list|()
expr_stmt|;
comment|// serverName
name|TUint32
name|port
init|=
name|proxyRecord
operator|->
name|iPortNumber
decl_stmt|;
name|QNetworkProxy
name|proxy
argument_list|(
name|QNetworkProxy
operator|::
name|HttpProxy
argument_list|,
name|serverNameQt
argument_list|,
name|port
argument_list|)
decl_stmt|;
name|foundProxies
operator|.
name|append
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
block|}
block|}
name|CleanupStack
operator|::
name|PopAndDestroy
argument_list|(
name|proxyRecords
argument_list|)
expr_stmt|;
name|CleanupStack
operator|::
name|Pop
argument_list|()
expr_stmt|;
comment|// serviceType
name|CleanupStack
operator|::
name|PopAndDestroy
argument_list|(
name|iDb
argument_list|)
expr_stmt|;
return|return
name|foundProxies
return|;
block|}
end_function
begin_function
DECL|function|systemProxyForQuery
name|QList
argument_list|<
name|QNetworkProxy
argument_list|>
name|QNetworkProxyFactory
operator|::
name|systemProxyForQuery
parameter_list|(
specifier|const
name|QNetworkProxyQuery
modifier|&
name|query
parameter_list|)
block|{
name|QList
argument_list|<
name|QNetworkProxy
argument_list|>
name|proxies
decl_stmt|;
name|SymbianIapId
name|iapId
decl_stmt|;
name|TInt
name|error
decl_stmt|;
name|QNetworkConfigurationManager
name|manager
decl_stmt|;
name|iapId
operator|=
name|SymbianProxyQuery
operator|::
name|getIapId
argument_list|(
name|manager
argument_list|,
name|query
argument_list|)
expr_stmt|;
if|if
condition|(
name|iapId
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|TRAP
argument_list|(
argument|error
argument_list|,
argument|proxies = SymbianProxyQuery::proxyQueryL(iapId.iapId(), query)
argument_list|)
if|if
condition|(
name|error
operator|!=
name|KErrNone
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"Error while retrieving proxies: '"
operator|<<
name|error
operator|<<
literal|'"'
expr_stmt|;
name|proxies
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
name|proxies
operator|<<
name|QNetworkProxy
operator|::
name|NoProxy
expr_stmt|;
return|return
name|proxies
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
end_unit
