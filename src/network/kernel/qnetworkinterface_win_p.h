begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtNetwork module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QNETWORKINTERFACE_WIN_P_H
end_ifndef
begin_define
DECL|macro|QNETWORKINTERFACE_WIN_P_H
define|#
directive|define
name|QNETWORKINTERFACE_WIN_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists for the convenience
end_comment
begin_comment
comment|// of the QLibrary class.  This header file may change from
end_comment
begin_comment
comment|// version to version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|<winsock2.h>
end_include
begin_include
include|#
directive|include
file|<qt_windows.h>
end_include
begin_include
include|#
directive|include
file|<time.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_ifndef
ifndef|#
directive|ifndef
name|GAA_FLAG_INCLUDE_ALL_INTERFACES
end_ifndef
begin_define
DECL|macro|GAA_FLAG_INCLUDE_ALL_INTERFACES
define|#
directive|define
name|GAA_FLAG_INCLUDE_ALL_INTERFACES
value|0x0100
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|MAX_ADAPTER_ADDRESS_LENGTH
end_ifndef
begin_comment
comment|// definitions from iptypes.h
end_comment
begin_define
DECL|macro|MAX_ADAPTER_DESCRIPTION_LENGTH
define|#
directive|define
name|MAX_ADAPTER_DESCRIPTION_LENGTH
value|128
end_define
begin_comment
DECL|macro|MAX_ADAPTER_DESCRIPTION_LENGTH
comment|// arb.
end_comment
begin_define
DECL|macro|MAX_ADAPTER_NAME_LENGTH
define|#
directive|define
name|MAX_ADAPTER_NAME_LENGTH
value|256
end_define
begin_comment
DECL|macro|MAX_ADAPTER_NAME_LENGTH
comment|// arb.
end_comment
begin_define
DECL|macro|MAX_ADAPTER_ADDRESS_LENGTH
define|#
directive|define
name|MAX_ADAPTER_ADDRESS_LENGTH
value|8
end_define
begin_comment
DECL|macro|MAX_ADAPTER_ADDRESS_LENGTH
comment|// arb.
end_comment
begin_define
DECL|macro|DEFAULT_MINIMUM_ENTITIES
define|#
directive|define
name|DEFAULT_MINIMUM_ENTITIES
value|32
end_define
begin_comment
DECL|macro|DEFAULT_MINIMUM_ENTITIES
comment|// arb.
end_comment
begin_define
DECL|macro|MAX_HOSTNAME_LEN
define|#
directive|define
name|MAX_HOSTNAME_LEN
value|128
end_define
begin_comment
DECL|macro|MAX_HOSTNAME_LEN
comment|// arb.
end_comment
begin_define
DECL|macro|MAX_DOMAIN_NAME_LEN
define|#
directive|define
name|MAX_DOMAIN_NAME_LEN
value|128
end_define
begin_comment
DECL|macro|MAX_DOMAIN_NAME_LEN
comment|// arb.
end_comment
begin_define
DECL|macro|MAX_SCOPE_ID_LEN
define|#
directive|define
name|MAX_SCOPE_ID_LEN
value|256
end_define
begin_comment
DECL|macro|MAX_SCOPE_ID_LEN
comment|// arb.
end_comment
begin_define
DECL|macro|GAA_FLAG_SKIP_UNICAST
define|#
directive|define
name|GAA_FLAG_SKIP_UNICAST
value|0x0001
end_define
begin_define
DECL|macro|GAA_FLAG_SKIP_ANYCAST
define|#
directive|define
name|GAA_FLAG_SKIP_ANYCAST
value|0x0002
end_define
begin_define
DECL|macro|GAA_FLAG_SKIP_MULTICAST
define|#
directive|define
name|GAA_FLAG_SKIP_MULTICAST
value|0x0004
end_define
begin_define
DECL|macro|GAA_FLAG_SKIP_DNS_SERVER
define|#
directive|define
name|GAA_FLAG_SKIP_DNS_SERVER
value|0x0008
end_define
begin_define
DECL|macro|GAA_FLAG_INCLUDE_PREFIX
define|#
directive|define
name|GAA_FLAG_INCLUDE_PREFIX
value|0x0010
end_define
begin_define
DECL|macro|GAA_FLAG_SKIP_FRIENDLY_NAME
define|#
directive|define
name|GAA_FLAG_SKIP_FRIENDLY_NAME
value|0x0020
end_define
begin_define
DECL|macro|IP_ADAPTER_DDNS_ENABLED
define|#
directive|define
name|IP_ADAPTER_DDNS_ENABLED
value|0x01
end_define
begin_define
DECL|macro|IP_ADAPTER_REGISTER_ADAPTER_SUFFIX
define|#
directive|define
name|IP_ADAPTER_REGISTER_ADAPTER_SUFFIX
value|0x02
end_define
begin_define
DECL|macro|IP_ADAPTER_DHCP_ENABLED
define|#
directive|define
name|IP_ADAPTER_DHCP_ENABLED
value|0x04
end_define
begin_define
DECL|macro|IP_ADAPTER_RECEIVE_ONLY
define|#
directive|define
name|IP_ADAPTER_RECEIVE_ONLY
value|0x08
end_define
begin_define
DECL|macro|IP_ADAPTER_NO_MULTICAST
define|#
directive|define
name|IP_ADAPTER_NO_MULTICAST
value|0x10
end_define
begin_define
DECL|macro|IP_ADAPTER_IPV6_OTHER_STATEFUL_CONFIG
define|#
directive|define
name|IP_ADAPTER_IPV6_OTHER_STATEFUL_CONFIG
value|0x20
end_define
begin_define
DECL|macro|MIB_IF_TYPE_OTHER
define|#
directive|define
name|MIB_IF_TYPE_OTHER
value|1
end_define
begin_define
DECL|macro|MIB_IF_TYPE_ETHERNET
define|#
directive|define
name|MIB_IF_TYPE_ETHERNET
value|6
end_define
begin_define
DECL|macro|MIB_IF_TYPE_TOKENRING
define|#
directive|define
name|MIB_IF_TYPE_TOKENRING
value|9
end_define
begin_define
DECL|macro|MIB_IF_TYPE_FDDI
define|#
directive|define
name|MIB_IF_TYPE_FDDI
value|15
end_define
begin_define
DECL|macro|MIB_IF_TYPE_PPP
define|#
directive|define
name|MIB_IF_TYPE_PPP
value|23
end_define
begin_define
DECL|macro|MIB_IF_TYPE_LOOPBACK
define|#
directive|define
name|MIB_IF_TYPE_LOOPBACK
value|24
end_define
begin_define
DECL|macro|MIB_IF_TYPE_SLIP
define|#
directive|define
name|MIB_IF_TYPE_SLIP
value|28
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// copied from qnativesocketengine_win.cpp
end_comment
begin_struct
DECL|struct|qt_in6_addr
struct|struct
name|qt_in6_addr
block|{
DECL|member|qt_s6_addr
name|u_char
name|qt_s6_addr
index|[
literal|16
index|]
decl_stmt|;
block|}
struct|;
end_struct
begin_typedef
typedef|typedef
struct|struct
block|{
DECL|member|sin6_family
name|short
name|sin6_family
decl_stmt|;
comment|/* AF_INET6 */
DECL|member|sin6_port
name|u_short
name|sin6_port
decl_stmt|;
comment|/* Transport level port number */
DECL|member|sin6_flowinfo
name|u_long
name|sin6_flowinfo
decl_stmt|;
comment|/* IPv6 flow information */
DECL|member|sin6_addr
name|struct
name|qt_in6_addr
name|sin6_addr
decl_stmt|;
comment|/* IPv6 address */
DECL|member|sin6_scope_id
name|u_long
name|sin6_scope_id
decl_stmt|;
comment|/* set of interfaces for a scope */
block|}
DECL|typedef|qt_sockaddr_in6
name|qt_sockaddr_in6
typedef|;
end_typedef
begin_comment
comment|// copied from MSDN online help
end_comment
begin_typedef
typedef|typedef
enum|enum
block|{
DECL|enumerator|IpPrefixOriginOther
name|IpPrefixOriginOther
init|=
literal|0
block|,
DECL|enumerator|IpPrefixOriginManual
name|IpPrefixOriginManual
block|,
DECL|enumerator|IpPrefixOriginWellKnown
name|IpPrefixOriginWellKnown
block|,
DECL|enumerator|IpPrefixOriginDhcp
name|IpPrefixOriginDhcp
block|,
DECL|enumerator|IpPrefixOriginRouterAdvertisement
name|IpPrefixOriginRouterAdvertisement
block|}
DECL|typedef|IP_PREFIX_ORIGIN
name|IP_PREFIX_ORIGIN
typedef|;
end_typedef
begin_typedef
typedef|typedef
enum|enum
block|{
DECL|enumerator|IpSuffixOriginOther
name|IpSuffixOriginOther
init|=
literal|0
block|,
DECL|enumerator|IpSuffixOriginManual
name|IpSuffixOriginManual
block|,
DECL|enumerator|IpSuffixOriginWellKnown
name|IpSuffixOriginWellKnown
block|,
DECL|enumerator|IpSuffixOriginDhcp
name|IpSuffixOriginDhcp
block|,
DECL|enumerator|IpSuffixOriginLinkLayerAddress
name|IpSuffixOriginLinkLayerAddress
block|,
DECL|enumerator|IpSuffixOriginRandom
name|IpSuffixOriginRandom
block|}
DECL|typedef|IP_SUFFIX_ORIGIN
name|IP_SUFFIX_ORIGIN
typedef|;
end_typedef
begin_typedef
typedef|typedef
enum|enum
block|{
DECL|enumerator|IpDadStateInvalid
name|IpDadStateInvalid
init|=
literal|0
block|,
DECL|enumerator|IpDadStateTentative
name|IpDadStateTentative
block|,
DECL|enumerator|IpDadStateDuplicate
name|IpDadStateDuplicate
block|,
DECL|enumerator|IpDadStateDeprecated
name|IpDadStateDeprecated
block|,
DECL|enumerator|IpDadStatePreferred
name|IpDadStatePreferred
block|, }
DECL|typedef|IP_DAD_STATE
name|IP_DAD_STATE
typedef|;
end_typedef
begin_typedef
typedef|typedef
enum|enum
block|{
DECL|enumerator|IfOperStatusUp
name|IfOperStatusUp
init|=
literal|1
block|,
DECL|enumerator|IfOperStatusDown
name|IfOperStatusDown
block|,
DECL|enumerator|IfOperStatusTesting
name|IfOperStatusTesting
block|,
DECL|enumerator|IfOperStatusUnknown
name|IfOperStatusUnknown
block|,
DECL|enumerator|IfOperStatusDormant
name|IfOperStatusDormant
block|,
DECL|enumerator|IfOperStatusNotPresent
name|IfOperStatusNotPresent
block|,
DECL|enumerator|IfOperStatusLowerLayerDown
name|IfOperStatusLowerLayerDown
block|}
DECL|typedef|IF_OPER_STATUS
name|IF_OPER_STATUS
typedef|;
end_typedef
begin_typedef
DECL|struct|_IP_ADAPTER_UNICAST_ADDRESS
typedef|typedef
struct|struct
name|_IP_ADAPTER_UNICAST_ADDRESS
block|{
union|union
block|{
DECL|member|Alignment
name|ULONGLONG
name|Alignment
decl_stmt|;
struct|struct
block|{
DECL|member|Length
name|ULONG
name|Length
decl_stmt|;
DECL|member|Flags
name|DWORD
name|Flags
decl_stmt|;
block|}
struct|;
block|}
union|;
DECL|member|Next
name|struct
name|_IP_ADAPTER_UNICAST_ADDRESS
modifier|*
name|Next
decl_stmt|;
DECL|member|Address
name|SOCKET_ADDRESS
name|Address
decl_stmt|;
DECL|member|PrefixOrigin
name|IP_PREFIX_ORIGIN
name|PrefixOrigin
decl_stmt|;
DECL|member|SuffixOrigin
name|IP_SUFFIX_ORIGIN
name|SuffixOrigin
decl_stmt|;
DECL|member|DadState
name|IP_DAD_STATE
name|DadState
decl_stmt|;
DECL|member|ValidLifetime
name|ULONG
name|ValidLifetime
decl_stmt|;
DECL|member|PreferredLifetime
name|ULONG
name|PreferredLifetime
decl_stmt|;
DECL|member|LeaseLifetime
name|ULONG
name|LeaseLifetime
decl_stmt|;
block|}
DECL|typedef|IP_ADAPTER_UNICAST_ADDRESS
DECL|typedef|PIP_ADAPTER_UNICAST_ADDRESS
name|IP_ADAPTER_UNICAST_ADDRESS
operator|,
typedef|*
name|PIP_ADAPTER_UNICAST_ADDRESS
typedef|;
end_typedef
begin_typedef
typedef|typedef
name|struct
name|_IP_ADAPTER_ANYCAST_ADDRESS
DECL|typedef|IP_ADAPTER_ANYCAST_ADDRESS
DECL|typedef|PIP_ADAPTER_ANYCAST_ADDRESS
name|IP_ADAPTER_ANYCAST_ADDRESS
typedef|,
modifier|*
name|PIP_ADAPTER_ANYCAST_ADDRESS
typedef|;
end_typedef
begin_typedef
typedef|typedef
name|struct
name|_IP_ADAPTER_MULTICAST_ADDRESS
DECL|typedef|IP_ADAPTER_MULTICAST_ADDRESS
name|IP_ADAPTER_MULTICAST_ADDRESS
typedef|,
DECL|typedef|PIP_ADAPTER_MULTICAST_ADDRESS
modifier|*
name|PIP_ADAPTER_MULTICAST_ADDRESS
typedef|;
end_typedef
begin_typedef
typedef|typedef
name|struct
name|_IP_ADAPTER_DNS_SERVER_ADDRESS
DECL|typedef|IP_ADAPTER_DNS_SERVER_ADDRESS
name|IP_ADAPTER_DNS_SERVER_ADDRESS
typedef|,
DECL|typedef|PIP_ADAPTER_DNS_SERVER_ADDRESS
modifier|*
name|PIP_ADAPTER_DNS_SERVER_ADDRESS
typedef|;
end_typedef
begin_typedef
DECL|struct|_IP_ADAPTER_PREFIX
typedef|typedef
struct|struct
name|_IP_ADAPTER_PREFIX
block|{
union|union
block|{
DECL|member|Alignment
name|ULONGLONG
name|Alignment
decl_stmt|;
struct|struct
block|{
DECL|member|Length
name|ULONG
name|Length
decl_stmt|;
DECL|member|Flags
name|DWORD
name|Flags
decl_stmt|;
block|}
struct|;
block|}
union|;
DECL|member|Next
name|struct
name|_IP_ADAPTER_PREFIX
modifier|*
name|Next
decl_stmt|;
DECL|member|Address
name|SOCKET_ADDRESS
name|Address
decl_stmt|;
DECL|member|PrefixLength
name|ULONG
name|PrefixLength
decl_stmt|;
block|}
DECL|typedef|IP_ADAPTER_PREFIX
name|IP_ADAPTER_PREFIX
operator|,
typedef|*
DECL|typedef|PIP_ADAPTER_PREFIX
name|PIP_ADAPTER_PREFIX
typedef|;
end_typedef
begin_typedef
DECL|struct|_IP_ADAPTER_ADDRESSES
typedef|typedef
struct|struct
name|_IP_ADAPTER_ADDRESSES
block|{
union|union
block|{
DECL|member|Alignment
name|ULONGLONG
name|Alignment
decl_stmt|;
struct|struct
block|{
DECL|member|Length
name|ULONG
name|Length
decl_stmt|;
DECL|member|IfIndex
name|DWORD
name|IfIndex
decl_stmt|;
block|}
struct|;
block|}
union|;
DECL|member|Next
name|struct
name|_IP_ADAPTER_ADDRESSES
modifier|*
name|Next
decl_stmt|;
DECL|member|AdapterName
name|PCHAR
name|AdapterName
decl_stmt|;
DECL|member|FirstUnicastAddress
name|PIP_ADAPTER_UNICAST_ADDRESS
name|FirstUnicastAddress
decl_stmt|;
DECL|member|FirstAnycastAddress
name|PIP_ADAPTER_ANYCAST_ADDRESS
name|FirstAnycastAddress
decl_stmt|;
DECL|member|FirstMulticastAddress
name|PIP_ADAPTER_MULTICAST_ADDRESS
name|FirstMulticastAddress
decl_stmt|;
DECL|member|FirstDnsServerAddress
name|PIP_ADAPTER_DNS_SERVER_ADDRESS
name|FirstDnsServerAddress
decl_stmt|;
DECL|member|DnsSuffix
name|PWCHAR
name|DnsSuffix
decl_stmt|;
DECL|member|Description
name|PWCHAR
name|Description
decl_stmt|;
DECL|member|FriendlyName
name|PWCHAR
name|FriendlyName
decl_stmt|;
DECL|member|PhysicalAddress
name|BYTE
name|PhysicalAddress
index|[
name|MAX_ADAPTER_ADDRESS_LENGTH
index|]
decl_stmt|;
DECL|member|PhysicalAddressLength
name|DWORD
name|PhysicalAddressLength
decl_stmt|;
DECL|member|Flags
name|DWORD
name|Flags
decl_stmt|;
DECL|member|Mtu
name|DWORD
name|Mtu
decl_stmt|;
DECL|member|IfType
name|DWORD
name|IfType
decl_stmt|;
DECL|member|OperStatus
name|IF_OPER_STATUS
name|OperStatus
decl_stmt|;
DECL|member|Ipv6IfIndex
name|DWORD
name|Ipv6IfIndex
decl_stmt|;
DECL|member|ZoneIndices
name|DWORD
name|ZoneIndices
index|[
literal|16
index|]
decl_stmt|;
DECL|member|FirstPrefix
name|PIP_ADAPTER_PREFIX
name|FirstPrefix
decl_stmt|;
block|}
DECL|typedef|IP_ADAPTER_ADDRESSES
name|IP_ADAPTER_ADDRESSES
operator|,
typedef|*
DECL|typedef|PIP_ADAPTER_ADDRESSES
name|PIP_ADAPTER_ADDRESSES
typedef|;
end_typedef
begin_typedef
typedef|typedef
struct|struct
block|{
DECL|member|String
name|char
name|String
index|[
literal|4
operator|*
literal|4
index|]
decl_stmt|;
block|}
DECL|typedef|IP_ADDRESS_STRING
DECL|typedef|PIP_ADDRESS_STRING
DECL|typedef|IP_MASK_STRING
DECL|typedef|PIP_MASK_STRING
name|IP_ADDRESS_STRING
operator|,
typedef|*
name|PIP_ADDRESS_STRING
operator|,
name|IP_MASK_STRING
operator|,
typedef|*
name|PIP_MASK_STRING
typedef|;
end_typedef
begin_typedef
DECL|struct|_IP_ADDR_STRING
typedef|typedef
struct|struct
name|_IP_ADDR_STRING
block|{
DECL|member|Next
name|struct
name|_IP_ADDR_STRING
modifier|*
name|Next
decl_stmt|;
DECL|member|IpAddress
name|IP_ADDRESS_STRING
name|IpAddress
decl_stmt|;
DECL|member|IpMask
name|IP_MASK_STRING
name|IpMask
decl_stmt|;
DECL|member|Context
name|DWORD
name|Context
decl_stmt|;
block|}
DECL|typedef|IP_ADDR_STRING
name|IP_ADDR_STRING
operator|,
typedef|*
DECL|typedef|PIP_ADDR_STRING
name|PIP_ADDR_STRING
typedef|;
end_typedef
begin_typedef
DECL|struct|_IP_ADAPTER_INFO
typedef|typedef
struct|struct
name|_IP_ADAPTER_INFO
block|{
DECL|member|Next
name|struct
name|_IP_ADAPTER_INFO
modifier|*
name|Next
decl_stmt|;
DECL|member|ComboIndex
name|DWORD
name|ComboIndex
decl_stmt|;
DECL|member|AdapterName
name|char
name|AdapterName
index|[
name|MAX_ADAPTER_NAME_LENGTH
operator|+
literal|4
index|]
decl_stmt|;
DECL|member|Description
name|char
name|Description
index|[
name|MAX_ADAPTER_DESCRIPTION_LENGTH
operator|+
literal|4
index|]
decl_stmt|;
DECL|member|AddressLength
name|UINT
name|AddressLength
decl_stmt|;
DECL|member|Address
name|BYTE
name|Address
index|[
name|MAX_ADAPTER_ADDRESS_LENGTH
index|]
decl_stmt|;
DECL|member|Index
name|DWORD
name|Index
decl_stmt|;
DECL|member|Type
name|UINT
name|Type
decl_stmt|;
DECL|member|DhcpEnabled
name|UINT
name|DhcpEnabled
decl_stmt|;
DECL|member|CurrentIpAddress
name|PIP_ADDR_STRING
name|CurrentIpAddress
decl_stmt|;
DECL|member|IpAddressList
name|IP_ADDR_STRING
name|IpAddressList
decl_stmt|;
DECL|member|GatewayList
name|IP_ADDR_STRING
name|GatewayList
decl_stmt|;
DECL|member|DhcpServer
name|IP_ADDR_STRING
name|DhcpServer
decl_stmt|;
DECL|member|HaveWins
name|BOOL
name|HaveWins
decl_stmt|;
DECL|member|PrimaryWinsServer
name|IP_ADDR_STRING
name|PrimaryWinsServer
decl_stmt|;
DECL|member|SecondaryWinsServer
name|IP_ADDR_STRING
name|SecondaryWinsServer
decl_stmt|;
DECL|member|LeaseObtained
name|time_t
name|LeaseObtained
decl_stmt|;
DECL|member|LeaseExpires
name|time_t
name|LeaseExpires
decl_stmt|;
block|}
DECL|typedef|IP_ADAPTER_INFO
name|IP_ADAPTER_INFO
operator|,
typedef|*
DECL|typedef|PIP_ADAPTER_INFO
name|PIP_ADAPTER_INFO
typedef|;
end_typedef
begin_typedef
typedef|typedef
struct|struct
block|{
DECL|member|HostName
name|char
name|HostName
index|[
name|MAX_HOSTNAME_LEN
operator|+
literal|4
index|]
decl_stmt|;
DECL|member|DomainName
name|char
name|DomainName
index|[
name|MAX_DOMAIN_NAME_LEN
operator|+
literal|4
index|]
decl_stmt|;
DECL|member|CurrentDnsServer
name|PIP_ADDR_STRING
name|CurrentDnsServer
decl_stmt|;
DECL|member|DnsServerList
name|IP_ADDR_STRING
name|DnsServerList
decl_stmt|;
DECL|member|NodeType
name|UINT
name|NodeType
decl_stmt|;
DECL|member|ScopeId
name|char
name|ScopeId
index|[
name|MAX_SCOPE_ID_LEN
operator|+
literal|4
index|]
decl_stmt|;
DECL|member|EnableRouting
name|UINT
name|EnableRouting
decl_stmt|;
DECL|member|EnableProxy
name|UINT
name|EnableProxy
decl_stmt|;
DECL|member|EnableDns
name|UINT
name|EnableDns
decl_stmt|;
block|}
DECL|typedef|FIXED_INFO
DECL|typedef|PFIXED_INFO
name|FIXED_INFO
operator|,
typedef|*
name|PFIXED_INFO
typedef|;
end_typedef
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
end_unit
