begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Jeremy LainÃ©<jeremy.laine@m4x.org> ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtNetwork module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QDNSLOOKUP_P_H
end_ifndef
begin_define
DECL|macro|QDNSLOOKUP_P_H
define|#
directive|define
name|QDNSLOOKUP_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists for the convenience
end_comment
begin_comment
comment|// of the QDnsLookup class.  This header file may change from
end_comment
begin_comment
comment|// version to version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"QtCore/qmutex.h"
end_include
begin_include
include|#
directive|include
file|"QtCore/qrunnable.h"
end_include
begin_include
include|#
directive|include
file|"QtCore/qsharedpointer.h"
end_include
begin_include
include|#
directive|include
file|"QtCore/qthreadpool.h"
end_include
begin_include
include|#
directive|include
file|"QtNetwork/qdnslookup.h"
end_include
begin_include
include|#
directive|include
file|"QtNetwork/qhostaddress.h"
end_include
begin_include
include|#
directive|include
file|"private/qobject_p.h"
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
comment|//#define QDNSLOOKUP_DEBUG
DECL|variable|QDnsLookupRunnable
name|class
name|QDnsLookupRunnable
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QDnsLookupReply
block|{
name|public
label|:
name|QDnsLookupReply
argument_list|()
operator|:
name|error
argument_list|(
argument|QDnsLookup::NoError
argument_list|)
block|{ }
name|QDnsLookup
operator|::
name|Error
name|error
expr_stmt|;
name|QString
name|errorString
decl_stmt|;
name|QList
operator|<
name|QDnsDomainNameRecord
operator|>
name|canonicalNameRecords
expr_stmt|;
name|QList
operator|<
name|QDnsHostAddressRecord
operator|>
name|hostAddressRecords
expr_stmt|;
name|QList
operator|<
name|QDnsMailExchangeRecord
operator|>
name|mailExchangeRecords
expr_stmt|;
name|QList
operator|<
name|QDnsDomainNameRecord
operator|>
name|nameServerRecords
expr_stmt|;
name|QList
operator|<
name|QDnsDomainNameRecord
operator|>
name|pointerRecords
expr_stmt|;
name|QList
operator|<
name|QDnsServiceRecord
operator|>
name|serviceRecords
expr_stmt|;
name|QList
operator|<
name|QDnsTextRecord
operator|>
name|textRecords
expr_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
name|class
name|QDnsLookupPrivate
range|:
name|public
name|QObjectPrivate
block|{
name|public
operator|:
name|QDnsLookupPrivate
argument_list|()
operator|:
name|isFinished
argument_list|(
name|false
argument_list|)
block|,
name|type
argument_list|(
name|QDnsLookup
operator|::
name|A
argument_list|)
block|,
name|runnable
argument_list|(
literal|0
argument_list|)
block|{ }
name|void
name|_q_lookupFinished
argument_list|(
specifier|const
name|QDnsLookupReply
operator|&
name|reply
argument_list|)
block|;
specifier|static
specifier|const
name|char
operator|*
name|msgNoIpV6NameServerAdresses
block|;
name|bool
name|isFinished
block|;
name|QString
name|name
block|;
name|QDnsLookup
operator|::
name|Type
name|type
block|;
name|QHostAddress
name|nameserver
block|;
name|QDnsLookupReply
name|reply
block|;
name|QDnsLookupRunnable
operator|*
name|runnable
block|;
name|Q_DECLARE_PUBLIC
argument_list|(
argument|QDnsLookup
argument_list|)
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QObject
name|class
name|QDnsLookupRunnable
range|:
name|public
name|QObject
decl_stmt|,
name|public
name|QRunnable
block|{
name|Q_OBJECT
name|public
range|:
name|QDnsLookupRunnable
argument_list|(
argument|QDnsLookup::Type type
argument_list|,
argument|const QByteArray&name
argument_list|,
argument|const QHostAddress&nameserver
argument_list|)
operator|:
name|requestType
argument_list|(
name|type
argument_list|)
decl_stmt|,
name|requestName
argument_list|(
name|name
argument_list|)
decl_stmt|,
name|nameserver
argument_list|(
name|nameserver
argument_list|)
block|{ }
name|void
name|run
argument_list|()
name|Q_DECL_OVERRIDE
expr_stmt|;
name|signals
label|:
name|void
name|finished
parameter_list|(
specifier|const
name|QDnsLookupReply
modifier|&
name|reply
parameter_list|)
function_decl|;
name|private
label|:
specifier|static
name|void
name|query
parameter_list|(
specifier|const
name|int
name|requestType
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|requestName
parameter_list|,
specifier|const
name|QHostAddress
modifier|&
name|nameserver
parameter_list|,
name|QDnsLookupReply
modifier|*
name|reply
parameter_list|)
function_decl|;
name|QDnsLookup
operator|::
name|Type
name|requestType
expr_stmt|;
name|QByteArray
name|requestName
decl_stmt|;
name|QHostAddress
name|nameserver
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
name|class
name|QDnsLookupThreadPool
range|:
name|public
name|QThreadPool
block|{
name|Q_OBJECT
name|public
operator|:
name|QDnsLookupThreadPool
argument_list|()
block|;
name|void
name|start
argument_list|(
name|QRunnable
operator|*
name|runnable
argument_list|)
block|;
name|private
name|slots
operator|:
name|void
name|_q_applicationDestroyed
argument_list|()
block|;
name|private
operator|:
name|QMutex
name|signalsMutex
block|;
name|bool
name|signalsConnected
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QDnsRecordPrivate
range|:
name|public
name|QSharedData
block|{
name|public
operator|:
name|QDnsRecordPrivate
argument_list|()
operator|:
name|timeToLive
argument_list|(
literal|0
argument_list|)
block|{ }
name|QString
name|name
block|;
name|quint32
name|timeToLive
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QDnsDomainNameRecordPrivate
range|:
name|public
name|QDnsRecordPrivate
block|{
name|public
operator|:
name|QDnsDomainNameRecordPrivate
argument_list|()
block|{ }
name|QString
name|value
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QDnsHostAddressRecordPrivate
range|:
name|public
name|QDnsRecordPrivate
block|{
name|public
operator|:
name|QDnsHostAddressRecordPrivate
argument_list|()
block|{ }
name|QHostAddress
name|value
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QDnsMailExchangeRecordPrivate
range|:
name|public
name|QDnsRecordPrivate
block|{
name|public
operator|:
name|QDnsMailExchangeRecordPrivate
argument_list|()
operator|:
name|preference
argument_list|(
literal|0
argument_list|)
block|{ }
name|QString
name|exchange
block|;
name|quint16
name|preference
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QDnsServiceRecordPrivate
range|:
name|public
name|QDnsRecordPrivate
block|{
name|public
operator|:
name|QDnsServiceRecordPrivate
argument_list|()
operator|:
name|port
argument_list|(
literal|0
argument_list|)
block|,
name|priority
argument_list|(
literal|0
argument_list|)
block|,
name|weight
argument_list|(
literal|0
argument_list|)
block|{ }
name|QString
name|target
block|;
name|quint16
name|port
block|;
name|quint16
name|priority
block|;
name|quint16
name|weight
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QDnsTextRecordPrivate
range|:
name|public
name|QDnsRecordPrivate
block|{
name|public
operator|:
name|QDnsTextRecordPrivate
argument_list|()
block|{ }
name|QList
operator|<
name|QByteArray
operator|>
name|values
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QT_END_NAMESPACE
name|Q_DECLARE_METATYPE
argument_list|(
name|QDnsLookupReply
argument_list|)
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QDNSLOOKUP_P_H
end_comment
end_unit
