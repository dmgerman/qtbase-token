begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtNetwork of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|//#define QNETWORKINTERFACE_DEBUG
end_comment
begin_include
include|#
directive|include
file|"qnetworkinterface.h"
end_include
begin_include
include|#
directive|include
file|"qnetworkinterface_p.h"
end_include
begin_include
include|#
directive|include
file|<private/qcore_symbian_p.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_NETWORKINTERFACE
end_ifndef
begin_include
include|#
directive|include
file|<in_sock.h>
end_include
begin_include
include|#
directive|include
file|<in_iface.h>
end_include
begin_include
include|#
directive|include
file|<es_sock.h>
end_include
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|convertFlags
specifier|static
name|QNetworkInterface
operator|::
name|InterfaceFlags
name|convertFlags
parameter_list|(
specifier|const
name|TSoInetInterfaceInfo
modifier|&
name|aInfo
parameter_list|)
block|{
name|QNetworkInterface
operator|::
name|InterfaceFlags
name|flags
init|=
literal|0
decl_stmt|;
name|flags
operator||=
operator|(
name|aInfo
operator|.
name|iState
operator|==
name|EIfUp
operator|)
condition|?
name|QNetworkInterface
operator|::
name|IsUp
else|:
name|QNetworkInterface
operator|::
name|InterfaceFlag
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// We do not have separate flag for running in Symbian OS
name|flags
operator||=
operator|(
name|aInfo
operator|.
name|iState
operator|==
name|EIfUp
operator|)
condition|?
name|QNetworkInterface
operator|::
name|IsRunning
else|:
name|QNetworkInterface
operator|::
name|InterfaceFlag
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|flags
operator||=
operator|(
name|aInfo
operator|.
name|iFeatures
operator|&
name|KIfCanBroadcast
operator|)
condition|?
name|QNetworkInterface
operator|::
name|CanBroadcast
else|:
name|QNetworkInterface
operator|::
name|InterfaceFlag
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|flags
operator||=
operator|(
name|aInfo
operator|.
name|iFeatures
operator|&
name|KIfIsLoopback
operator|)
condition|?
name|QNetworkInterface
operator|::
name|IsLoopBack
else|:
name|QNetworkInterface
operator|::
name|InterfaceFlag
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|flags
operator||=
operator|(
name|aInfo
operator|.
name|iFeatures
operator|&
name|KIfIsPointToPoint
operator|)
condition|?
name|QNetworkInterface
operator|::
name|IsPointToPoint
else|:
name|QNetworkInterface
operator|::
name|InterfaceFlag
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|flags
operator||=
operator|(
name|aInfo
operator|.
name|iFeatures
operator|&
name|KIfCanMulticast
operator|)
condition|?
name|QNetworkInterface
operator|::
name|CanMulticast
else|:
name|QNetworkInterface
operator|::
name|InterfaceFlag
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|flags
return|;
block|}
end_function
begin_comment
comment|//TODO: share this, at least QHostInfo needs to do the same thing
end_comment
begin_function
DECL|function|qt_QHostAddressFromTInetAddr
specifier|static
name|QHostAddress
name|qt_QHostAddressFromTInetAddr
parameter_list|(
specifier|const
name|TInetAddr
modifier|&
name|addr
parameter_list|)
block|{
comment|//TODO: do we want to call v4 mapped addresses v4 or v6 outside of this file?
if|if
condition|(
name|addr
operator|.
name|IsV4Mapped
argument_list|()
operator|||
name|addr
operator|.
name|Family
argument_list|()
operator|==
name|KAfInet
condition|)
block|{
comment|//convert v4 host address
return|return
name|QHostAddress
argument_list|(
name|addr
operator|.
name|Address
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
comment|//convert v6 host address
return|return
name|QHostAddress
argument_list|(
operator|(
name|quint8
operator|*
operator|)
operator|(
name|addr
operator|.
name|Ip6Address
argument_list|()
operator|.
name|u
operator|.
name|iAddr8
operator|)
argument_list|)
return|;
block|}
block|}
end_function
begin_function
DECL|function|interfaceListing
specifier|static
name|QList
argument_list|<
name|QNetworkInterfacePrivate
modifier|*
argument_list|>
name|interfaceListing
parameter_list|()
block|{
name|TInt
name|err
argument_list|(
name|KErrNone
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|QNetworkInterfacePrivate
modifier|*
argument_list|>
name|interfaces
decl_stmt|;
name|QList
argument_list|<
name|QHostAddress
argument_list|>
name|addressesWithEstimatedNetmasks
decl_stmt|;
comment|// Open dummy socket for interface queries
name|RSocket
name|socket
decl_stmt|;
name|err
operator|=
name|socket
operator|.
name|Open
argument_list|(
name|qt_symbianGetSocketServer
argument_list|()
argument_list|,
name|_L
argument_list|(
literal|"udp"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|err
condition|)
block|{
return|return
name|interfaces
return|;
block|}
comment|// Ask socket to start enumerating interfaces
name|err
operator|=
name|socket
operator|.
name|SetOpt
argument_list|(
name|KSoInetEnumInterfaces
argument_list|,
name|KSolInetIfCtrl
argument_list|)
expr_stmt|;
if|if
condition|(
name|err
condition|)
block|{
name|socket
operator|.
name|Close
argument_list|()
expr_stmt|;
return|return
name|interfaces
return|;
block|}
name|int
name|ifindex
init|=
literal|0
decl_stmt|;
name|TPckgBuf
argument_list|<
name|TSoInetInterfaceInfo
argument_list|>
name|infoPckg
decl_stmt|;
name|TSoInetInterfaceInfo
modifier|&
name|info
init|=
name|infoPckg
argument_list|()
decl_stmt|;
while|while
condition|(
name|socket
operator|.
name|GetOpt
argument_list|(
name|KSoInetNextInterface
argument_list|,
name|KSolInetIfCtrl
argument_list|,
name|infoPckg
argument_list|)
operator|==
name|KErrNone
condition|)
block|{
if|if
condition|(
name|info
operator|.
name|iName
operator|!=
name|KNullDesC
condition|)
block|{
name|TName
name|address
decl_stmt|;
name|QNetworkAddressEntry
name|entry
decl_stmt|;
name|QNetworkInterfacePrivate
modifier|*
name|iface
init|=
literal|0
decl_stmt|;
name|iface
operator|=
operator|new
name|QNetworkInterfacePrivate
expr_stmt|;
name|iface
operator|->
name|index
operator|=
name|ifindex
operator|++
expr_stmt|;
name|interfaces
operator|<<
name|iface
expr_stmt|;
name|iface
operator|->
name|name
operator|=
name|qt_TDesC2QString
argument_list|(
name|info
operator|.
name|iName
argument_list|)
expr_stmt|;
name|iface
operator|->
name|flags
operator|=
name|convertFlags
argument_list|(
name|info
argument_list|)
expr_stmt|;
if|if
condition|(
comment|/*info.iFeatures&KIfHasHardwareAddr&&*/
name|info
operator|.
name|iHwAddr
operator|.
name|Family
argument_list|()
operator|!=
name|KAFUnspec
condition|)
block|{
for|for
control|(
name|TInt
name|i
init|=
sizeof|sizeof
argument_list|(
name|SSockAddr
argument_list|)
init|;
name|i
operator|<
sizeof|sizeof
argument_list|(
name|SSockAddr
argument_list|)
operator|+
name|info
operator|.
name|iHwAddr
operator|.
name|GetUserLen
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|address
operator|.
name|AppendNumFixedWidth
argument_list|(
name|info
operator|.
name|iHwAddr
index|[
name|i
index|]
argument_list|,
name|EHex
argument_list|,
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|i
operator|+
literal|1
operator|)
operator|<
sizeof|sizeof
argument_list|(
name|SSockAddr
argument_list|)
operator|+
name|info
operator|.
name|iHwAddr
operator|.
name|GetUserLen
argument_list|()
condition|)
name|address
operator|.
name|Append
argument_list|(
name|_L
argument_list|(
literal|":"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|address
operator|.
name|UpperCase
argument_list|()
expr_stmt|;
name|iface
operator|->
name|hardwareAddress
operator|=
name|qt_TDesC2QString
argument_list|(
name|address
argument_list|)
expr_stmt|;
block|}
comment|// Get the address of the interface
name|entry
operator|.
name|setIp
argument_list|(
name|qt_QHostAddressFromTInetAddr
argument_list|(
name|info
operator|.
name|iAddress
argument_list|)
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QNETWORKINTERFACE_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
literal|"address is"
operator|<<
name|info
operator|.
name|iAddress
operator|.
name|Family
argument_list|()
operator|<<
name|entry
operator|.
name|ip
argument_list|()
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"netmask is"
operator|<<
name|info
operator|.
name|iNetMask
operator|.
name|Family
argument_list|()
operator|<<
name|qt_QHostAddressFromTInetAddr
argument_list|(
name|info
operator|.
name|iNetMask
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// Get the interface netmask
if|if
condition|(
name|info
operator|.
name|iNetMask
operator|.
name|IsUnspecified
argument_list|()
condition|)
block|{
comment|// For some reason netmask is always 0.0.0.0 for IPv4 interfaces
comment|// and loopback interfaces (which we statically know)
if|if
condition|(
name|info
operator|.
name|iAddress
operator|.
name|IsV4Mapped
argument_list|()
condition|)
block|{
if|if
condition|(
name|info
operator|.
name|iFeatures
operator|&
name|KIfIsLoopback
condition|)
block|{
name|entry
operator|.
name|setPrefixLength
argument_list|(
literal|32
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Workaround: Let Symbian determine netmask based on IP address class (IPv4 only API)
name|TInetAddr
name|netmask
decl_stmt|;
name|netmask
operator|.
name|NetMask
argument_list|(
name|info
operator|.
name|iAddress
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setNetmask
argument_list|(
name|QHostAddress
argument_list|(
name|netmask
operator|.
name|Address
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//binary convert v4 address
name|addressesWithEstimatedNetmasks
operator|<<
name|entry
operator|.
name|ip
argument_list|()
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QNETWORKINTERFACE_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
literal|"address class determined netmask"
operator|<<
name|entry
operator|.
name|netmask
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
block|}
else|else
block|{
comment|// For IPv6 interfaces
if|if
condition|(
name|info
operator|.
name|iFeatures
operator|&
name|KIfIsLoopback
condition|)
block|{
name|entry
operator|.
name|setPrefixLength
argument_list|(
literal|128
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|info
operator|.
name|iNetMask
operator|.
name|IsUnspecified
argument_list|()
condition|)
block|{
comment|//Don't see this error for IPv6, but try to handle it if it happens
name|entry
operator|.
name|setPrefixLength
argument_list|(
literal|64
argument_list|)
expr_stmt|;
comment|//most common
if|#
directive|if
name|defined
argument_list|(
name|QNETWORKINTERFACE_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
literal|"total guess netmask"
operator|<<
name|entry
operator|.
name|netmask
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|addressesWithEstimatedNetmasks
operator|<<
name|entry
operator|.
name|ip
argument_list|()
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|//Expected code path for IPv6 non loopback interfaces (IPv4 could come here if symbian is fixed)
name|entry
operator|.
name|setNetmask
argument_list|(
name|qt_QHostAddressFromTInetAddr
argument_list|(
name|info
operator|.
name|iNetMask
argument_list|)
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QNETWORKINTERFACE_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
literal|"reported netmask"
operator|<<
name|entry
operator|.
name|netmask
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
comment|// broadcast address is determined from the netmask in postProcess()
comment|// Add new entry to interface address entries
name|iface
operator|->
name|addressEntries
operator|<<
name|entry
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QNETWORKINTERFACE_DEBUG
argument_list|)
name|qDebug
argument_list|(
literal|"\n       Found network interface %s, interface flags:\n\                 IsUp = %d, IsRunning = %d, CanBroadcast = %d,\n\                 IsLoopBack = %d, IsPointToPoint = %d, CanMulticast = %d, \n\                 ip = %s, netmask = %s, broadcast = %s,\n\                 hwaddress = %s"
argument_list|,
name|iface
operator|->
name|name
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|iface
operator|->
name|flags
operator|&
name|QNetworkInterface
operator|::
name|IsUp
argument_list|,
name|iface
operator|->
name|flags
operator|&
name|QNetworkInterface
operator|::
name|IsRunning
argument_list|,
name|iface
operator|->
name|flags
operator|&
name|QNetworkInterface
operator|::
name|CanBroadcast
argument_list|,
name|iface
operator|->
name|flags
operator|&
name|QNetworkInterface
operator|::
name|IsLoopBack
argument_list|,
name|iface
operator|->
name|flags
operator|&
name|QNetworkInterface
operator|::
name|IsPointToPoint
argument_list|,
name|iface
operator|->
name|flags
operator|&
name|QNetworkInterface
operator|::
name|CanMulticast
argument_list|,
name|entry
operator|.
name|ip
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|entry
operator|.
name|netmask
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|entry
operator|.
name|broadcast
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|iface
operator|->
name|hardwareAddress
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
block|}
comment|// if we didn't have to guess any netmasks, then we're done.
if|if
condition|(
name|addressesWithEstimatedNetmasks
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|socket
operator|.
name|Close
argument_list|()
expr_stmt|;
return|return
name|interfaces
return|;
block|}
comment|// we will try to use routing info to detect more precisely
comment|// estimated netmasks and then ::postProcess() should calculate
comment|// broadcast addresses
comment|// use dummy socket to start enumerating routes
name|err
operator|=
name|socket
operator|.
name|SetOpt
argument_list|(
name|KSoInetEnumRoutes
argument_list|,
name|KSolInetRtCtrl
argument_list|)
expr_stmt|;
if|if
condition|(
name|err
condition|)
block|{
name|socket
operator|.
name|Close
argument_list|()
expr_stmt|;
comment|// return what we have
comment|// up to this moment
return|return
name|interfaces
return|;
block|}
name|TSoInetRouteInfo
name|routeInfo
decl_stmt|;
name|TPckg
argument_list|<
name|TSoInetRouteInfo
argument_list|>
name|routeInfoPkg
argument_list|(
name|routeInfo
argument_list|)
decl_stmt|;
while|while
condition|(
name|socket
operator|.
name|GetOpt
argument_list|(
name|KSoInetNextRoute
argument_list|,
name|KSolInetRtCtrl
argument_list|,
name|routeInfoPkg
argument_list|)
operator|==
name|KErrNone
condition|)
block|{
comment|// get interface address
name|QHostAddress
name|ifAddr
argument_list|(
name|qt_QHostAddressFromTInetAddr
argument_list|(
name|routeInfo
operator|.
name|iIfAddr
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|ifAddr
operator|.
name|isNull
argument_list|()
condition|)
continue|continue;
if|if
condition|(
operator|!
name|addressesWithEstimatedNetmasks
operator|.
name|contains
argument_list|(
name|ifAddr
argument_list|)
condition|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QNETWORKINTERFACE_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
literal|"skipping route from"
operator|<<
name|ifAddr
operator|<<
literal|"because it wasn't an estimated netmask"
expr_stmt|;
endif|#
directive|endif
continue|continue;
block|}
name|QHostAddress
name|destination
argument_list|(
name|qt_QHostAddressFromTInetAddr
argument_list|(
name|routeInfo
operator|.
name|iDstAddr
argument_list|)
argument_list|)
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QNETWORKINTERFACE_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
literal|"route from"
operator|<<
name|ifAddr
operator|<<
literal|"to"
operator|<<
name|destination
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|destination
operator|.
name|isNull
argument_list|()
operator|||
name|destination
operator|!=
name|ifAddr
condition|)
continue|continue;
comment|// search interfaces
for|for
control|(
name|int
name|ifindex
init|=
literal|0
init|;
name|ifindex
operator|<
name|interfaces
operator|.
name|size
argument_list|()
condition|;
operator|++
name|ifindex
control|)
block|{
name|QNetworkInterfacePrivate
modifier|*
name|iface
init|=
name|interfaces
operator|.
name|at
argument_list|(
name|ifindex
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|eindex
init|=
literal|0
init|;
name|eindex
operator|<
name|iface
operator|->
name|addressEntries
operator|.
name|size
argument_list|()
condition|;
operator|++
name|eindex
control|)
block|{
name|QNetworkAddressEntry
name|entry
init|=
name|iface
operator|->
name|addressEntries
operator|.
name|at
argument_list|(
name|eindex
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|ip
argument_list|()
operator|!=
name|ifAddr
condition|)
block|{
continue|continue;
block|}
elseif|else
if|if
condition|(
operator|!
name|routeInfo
operator|.
name|iNetMask
operator|.
name|IsUnspecified
argument_list|()
condition|)
block|{
comment|//the route may also return 0.0.0.0 netmask, in which case don't use it.
name|QHostAddress
name|netmask
argument_list|(
name|qt_QHostAddressFromTInetAddr
argument_list|(
name|routeInfo
operator|.
name|iNetMask
argument_list|)
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setNetmask
argument_list|(
name|netmask
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QNETWORKINTERFACE_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
literal|" - route netmask"
operator|<<
name|routeInfo
operator|.
name|iNetMask
operator|.
name|Family
argument_list|()
operator|<<
name|netmask
operator|<<
literal|" (using route determined netmask)"
expr_stmt|;
endif|#
directive|endif
name|iface
operator|->
name|addressEntries
operator|.
name|replace
argument_list|(
name|eindex
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|socket
operator|.
name|Close
argument_list|()
expr_stmt|;
return|return
name|interfaces
return|;
block|}
end_function
begin_function
DECL|function|scan
name|QList
argument_list|<
name|QNetworkInterfacePrivate
modifier|*
argument_list|>
name|QNetworkInterfaceManager
operator|::
name|scan
parameter_list|()
block|{
return|return
name|interfaceListing
argument_list|()
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_NETWORKINTERFACE
end_comment
end_unit
