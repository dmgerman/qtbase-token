begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Jeremy LainÃ©<jeremy.laine@m4x.org> ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtNetwork module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qdnslookup.h"
end_include
begin_include
include|#
directive|include
file|"qdnslookup_p.h"
end_include
begin_include
include|#
directive|include
file|<qcoreapplication.h>
end_include
begin_include
include|#
directive|include
file|<qdatetime.h>
end_include
begin_include
include|#
directive|include
file|<qthreadstorage.h>
end_include
begin_include
include|#
directive|include
file|<qurl.h>
end_include
begin_include
include|#
directive|include
file|<algorithm>
end_include
begin_function_decl
name|QT_BEGIN_NAMESPACE
name|Q_GLOBAL_STATIC
parameter_list|(
name|QDnsLookupThreadPool
parameter_list|,
name|theDnsLookupThreadPool
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|Q_GLOBAL_STATIC
argument_list|(
name|QThreadStorage
argument_list|<
name|bool
operator|*
argument_list|>
argument_list|,
name|theDnsLookupSeedStorage
argument_list|)
expr_stmt|;
end_expr_stmt
begin_function
DECL|function|qt_qdnsmailexchangerecord_less_than
specifier|static
name|bool
name|qt_qdnsmailexchangerecord_less_than
parameter_list|(
specifier|const
name|QDnsMailExchangeRecord
modifier|&
name|r1
parameter_list|,
specifier|const
name|QDnsMailExchangeRecord
modifier|&
name|r2
parameter_list|)
block|{
comment|// Lower numbers are more preferred than higher ones.
return|return
name|r1
operator|.
name|preference
argument_list|()
operator|<
name|r2
operator|.
name|preference
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Sorts a list of QDnsMailExchangeRecord objects according to RFC 5321. */
end_comment
begin_function
DECL|function|qt_qdnsmailexchangerecord_sort
specifier|static
name|void
name|qt_qdnsmailexchangerecord_sort
parameter_list|(
name|QList
argument_list|<
name|QDnsMailExchangeRecord
argument_list|>
modifier|&
name|records
parameter_list|)
block|{
comment|// If we have no more than one result, we are done.
if|if
condition|(
name|records
operator|.
name|size
argument_list|()
operator|<=
literal|1
condition|)
return|return;
comment|// Order the records by preference.
name|std
operator|::
name|sort
argument_list|(
name|records
operator|.
name|begin
argument_list|()
argument_list|,
name|records
operator|.
name|end
argument_list|()
argument_list|,
name|qt_qdnsmailexchangerecord_less_than
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|records
operator|.
name|size
argument_list|()
condition|)
block|{
comment|// Determine the slice of records with the current preference.
name|QList
argument_list|<
name|QDnsMailExchangeRecord
argument_list|>
name|slice
decl_stmt|;
specifier|const
name|quint16
name|slicePreference
init|=
name|records
index|[
name|i
index|]
operator|.
name|preference
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
name|i
init|;
name|j
operator|<
name|records
operator|.
name|size
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
if|if
condition|(
name|records
index|[
name|j
index|]
operator|.
name|preference
argument_list|()
operator|!=
name|slicePreference
condition|)
break|break;
name|slice
operator|<<
name|records
index|[
name|j
index|]
expr_stmt|;
block|}
comment|// Randomize the slice of records.
while|while
condition|(
operator|!
name|slice
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|const
name|unsigned
name|int
name|pos
init|=
name|qrand
argument_list|()
operator|%
name|slice
operator|.
name|size
argument_list|()
decl_stmt|;
name|records
index|[
name|i
operator|++
index|]
operator|=
name|slice
operator|.
name|takeAt
argument_list|(
name|pos
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|qt_qdnsservicerecord_less_than
specifier|static
name|bool
name|qt_qdnsservicerecord_less_than
parameter_list|(
specifier|const
name|QDnsServiceRecord
modifier|&
name|r1
parameter_list|,
specifier|const
name|QDnsServiceRecord
modifier|&
name|r2
parameter_list|)
block|{
comment|// Order by priority, or if the priorities are equal,
comment|// put zero weight records first.
return|return
name|r1
operator|.
name|priority
argument_list|()
operator|<
name|r2
operator|.
name|priority
argument_list|()
operator|||
operator|(
name|r1
operator|.
name|priority
argument_list|()
operator|==
name|r2
operator|.
name|priority
argument_list|()
operator|&&
name|r1
operator|.
name|weight
argument_list|()
operator|==
literal|0
operator|&&
name|r2
operator|.
name|weight
argument_list|()
operator|>
literal|0
operator|)
return|;
block|}
end_function
begin_comment
comment|/*!     Sorts a list of QDnsServiceRecord objects according to RFC 2782. */
end_comment
begin_function
DECL|function|qt_qdnsservicerecord_sort
specifier|static
name|void
name|qt_qdnsservicerecord_sort
parameter_list|(
name|QList
argument_list|<
name|QDnsServiceRecord
argument_list|>
modifier|&
name|records
parameter_list|)
block|{
comment|// If we have no more than one result, we are done.
if|if
condition|(
name|records
operator|.
name|size
argument_list|()
operator|<=
literal|1
condition|)
return|return;
comment|// Order the records by priority, and for records with an equal
comment|// priority, put records with a zero weight first.
name|std
operator|::
name|sort
argument_list|(
name|records
operator|.
name|begin
argument_list|()
argument_list|,
name|records
operator|.
name|end
argument_list|()
argument_list|,
name|qt_qdnsservicerecord_less_than
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|records
operator|.
name|size
argument_list|()
condition|)
block|{
comment|// Determine the slice of records with the current priority.
name|QList
argument_list|<
name|QDnsServiceRecord
argument_list|>
name|slice
decl_stmt|;
specifier|const
name|quint16
name|slicePriority
init|=
name|records
index|[
name|i
index|]
operator|.
name|priority
argument_list|()
decl_stmt|;
name|unsigned
name|int
name|sliceWeight
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
name|i
init|;
name|j
operator|<
name|records
operator|.
name|size
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
if|if
condition|(
name|records
index|[
name|j
index|]
operator|.
name|priority
argument_list|()
operator|!=
name|slicePriority
condition|)
break|break;
name|sliceWeight
operator|+=
name|records
index|[
name|j
index|]
operator|.
name|weight
argument_list|()
expr_stmt|;
name|slice
operator|<<
name|records
index|[
name|j
index|]
expr_stmt|;
block|}
ifdef|#
directive|ifdef
name|QDNSLOOKUP_DEBUG
name|qDebug
argument_list|(
literal|"qt_qdnsservicerecord_sort() : priority %i (size: %i, total weight: %i)"
argument_list|,
name|slicePriority
argument_list|,
name|slice
operator|.
name|size
argument_list|()
argument_list|,
name|sliceWeight
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// Order the slice of records.
while|while
condition|(
operator|!
name|slice
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|const
name|unsigned
name|int
name|weightThreshold
init|=
name|qrand
argument_list|()
operator|%
operator|(
name|sliceWeight
operator|+
literal|1
operator|)
decl_stmt|;
name|unsigned
name|int
name|summedWeight
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|slice
operator|.
name|size
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
name|summedWeight
operator|+=
name|slice
index|[
name|j
index|]
operator|.
name|weight
argument_list|()
expr_stmt|;
if|if
condition|(
name|summedWeight
operator|>=
name|weightThreshold
condition|)
block|{
ifdef|#
directive|ifdef
name|QDNSLOOKUP_DEBUG
name|qDebug
argument_list|(
literal|"qt_qdnsservicerecord_sort() : adding %s %i (weight: %i)"
argument_list|,
name|qPrintable
argument_list|(
name|slice
index|[
name|j
index|]
operator|.
name|target
argument_list|()
argument_list|)
argument_list|,
name|slice
index|[
name|j
index|]
operator|.
name|port
argument_list|()
argument_list|,
name|slice
index|[
name|j
index|]
operator|.
name|weight
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// Adjust the slice weight and take the current record.
name|sliceWeight
operator|-=
name|slice
index|[
name|j
index|]
operator|.
name|weight
argument_list|()
expr_stmt|;
name|records
index|[
name|i
operator|++
index|]
operator|=
name|slice
operator|.
name|takeAt
argument_list|(
name|j
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
block|}
end_function
begin_comment
comment|/*!     \class QDnsLookup     \brief The QDnsLookup class represents a DNS lookup.     \since 5.0      \inmodule QtNetwork     \ingroup network      QDnsLookup uses the mechanisms provided by the operating system to perform     DNS lookups. To perform a lookup you need to specify a \l name and \l type     then invoke the \l{QDnsLookup::lookup()}{lookup()} slot. The     \l{QDnsLookup::finished()}{finished()} signal will be emitted upon     completion.      For example, you can determine which servers an XMPP chat client should     connect to for a given domain with:      \snippet code/src_network_kernel_qdnslookup.cpp 0      Once the request finishes you can handle the results with:      \snippet code/src_network_kernel_qdnslookup.cpp 1      \note If you simply want to find the IP address(es) associated with a host     name, or the host name associated with an IP address you should use     QHostInfo instead. */
end_comment
begin_comment
comment|/*!     \enum QDnsLookup::Error      Indicates all possible error conditions found during the     processing of the DNS lookup.      \value NoError              no error condition.      \value ResolverError        there was an error initializing the system's     DNS resolver.      \value OperationCancelledError  the lookup was aborted using the abort()     method.      \value InvalidRequestError  the requested DNS lookup was invalid.      \value InvalidReplyError    the reply returned by the server was invalid.      \value ServerFailureError   the server encountered an internal failure     while processing the request (SERVFAIL).      \value ServerRefusedError   the server refused to process the request for     security or policy reasons (REFUSED).      \value NotFoundError        the requested domain name does not exist     (NXDOMAIN). */
end_comment
begin_comment
comment|/*!     \enum QDnsLookup::Type      Indicates the type of DNS lookup that was performed.      \value A        IPv4 address records.      \value AAAA     IPv6 address records.      \value ANY      any records.      \value CNAME    canonical name records.      \value MX       mail exchange records.      \value NS       name server records.      \value PTR      pointer records.      \value SRV      service records.      \value TXT      text records. */
end_comment
begin_comment
comment|/*!     \fn void QDnsLookup::finished()      This signal is emitted when the reply has finished processing. */
end_comment
begin_comment
comment|/*!     \fn void QDnsLookup::nameChanged(const QString&name)      This signal is emitted when the lookup \l name changes.     \a name is the new lookup name. */
end_comment
begin_comment
comment|/*!     \fn void QDnsLookup::typeChanged(Type type)      This signal is emitted when the lookup \l type changes.     \a type is the new lookup type. */
end_comment
begin_comment
comment|/*!     Constructs a QDnsLookup object and sets \a parent as the parent object.      The \l type property will default to QDnsLookup::A. */
end_comment
begin_constructor
DECL|function|QDnsLookup
name|QDnsLookup
operator|::
name|QDnsLookup
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
operator|*
operator|new
name|QDnsLookupPrivate
argument_list|,
name|parent
argument_list|)
block|{
name|qRegisterMetaType
argument_list|<
name|QDnsLookupReply
argument_list|>
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Constructs a QDnsLookup object for the given \a type and \a name and sets     \a parent as the parent object. */
end_comment
begin_constructor
DECL|function|QDnsLookup
name|QDnsLookup
operator|::
name|QDnsLookup
parameter_list|(
name|Type
name|type
parameter_list|,
specifier|const
name|QString
modifier|&
name|name
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
operator|*
operator|new
name|QDnsLookupPrivate
argument_list|,
name|parent
argument_list|)
block|{
name|Q_D
argument_list|(
name|QDnsLookup
argument_list|)
expr_stmt|;
name|qRegisterMetaType
argument_list|<
name|QDnsLookupReply
argument_list|>
argument_list|()
expr_stmt|;
name|d
operator|->
name|name
operator|=
name|name
expr_stmt|;
name|d
operator|->
name|type
operator|=
name|type
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     \fn QDnsLookup::QDnsLookup(Type type, const QString&name, const QHostAddress&nameserver, QObject *parent)     \since 5.4     Constructs a QDnsLookup object for the given \a type, \a name and     \a nameserver and sets \a parent as the parent object. */
end_comment
begin_constructor
DECL|function|QDnsLookup
name|QDnsLookup
operator|::
name|QDnsLookup
parameter_list|(
name|Type
name|type
parameter_list|,
specifier|const
name|QString
modifier|&
name|name
parameter_list|,
specifier|const
name|QHostAddress
modifier|&
name|nameserver
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
operator|*
operator|new
name|QDnsLookupPrivate
argument_list|,
name|parent
argument_list|)
block|{
name|Q_D
argument_list|(
name|QDnsLookup
argument_list|)
expr_stmt|;
name|qRegisterMetaType
argument_list|<
name|QDnsLookupReply
argument_list|>
argument_list|()
expr_stmt|;
name|d
operator|->
name|name
operator|=
name|name
expr_stmt|;
name|d
operator|->
name|type
operator|=
name|type
expr_stmt|;
name|d
operator|->
name|nameserver
operator|=
name|nameserver
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Destroys the QDnsLookup object.      It is safe to delete a QDnsLookup object even if it is not finished, you     will simply never receive its results. */
end_comment
begin_destructor
DECL|function|~QDnsLookup
name|QDnsLookup
operator|::
name|~
name|QDnsLookup
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     \property QDnsLookup::error     \brief the type of error that occurred if the DNS lookup failed, or NoError. */
end_comment
begin_function
DECL|function|error
name|QDnsLookup
operator|::
name|Error
name|QDnsLookup
operator|::
name|error
parameter_list|()
specifier|const
block|{
return|return
name|d_func
argument_list|()
operator|->
name|reply
operator|.
name|error
return|;
block|}
end_function
begin_comment
comment|/*!     \property QDnsLookup::errorString     \brief a human-readable description of the error if the DNS lookup failed. */
end_comment
begin_function
DECL|function|errorString
name|QString
name|QDnsLookup
operator|::
name|errorString
parameter_list|()
specifier|const
block|{
return|return
name|d_func
argument_list|()
operator|->
name|reply
operator|.
name|errorString
return|;
block|}
end_function
begin_comment
comment|/*!     Returns whether the reply has finished or was aborted. */
end_comment
begin_function
DECL|function|isFinished
name|bool
name|QDnsLookup
operator|::
name|isFinished
parameter_list|()
specifier|const
block|{
return|return
name|d_func
argument_list|()
operator|->
name|isFinished
return|;
block|}
end_function
begin_comment
comment|/*!     \property QDnsLookup::name     \brief the name to lookup.      \note The name will be encoded using IDNA, which means it's unsuitable for     querying SRV records compatible with the DNS-SD specification. */
end_comment
begin_function
DECL|function|name
name|QString
name|QDnsLookup
operator|::
name|name
parameter_list|()
specifier|const
block|{
return|return
name|d_func
argument_list|()
operator|->
name|name
return|;
block|}
end_function
begin_function
DECL|function|setName
name|void
name|QDnsLookup
operator|::
name|setName
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDnsLookup
argument_list|)
expr_stmt|;
if|if
condition|(
name|name
operator|!=
name|d
operator|->
name|name
condition|)
block|{
name|d
operator|->
name|name
operator|=
name|name
expr_stmt|;
emit|emit
name|nameChanged
argument_list|(
name|name
argument_list|)
emit|;
block|}
block|}
end_function
begin_comment
comment|/*!     \property QDnsLookup::type     \brief the type of DNS lookup. */
end_comment
begin_function
DECL|function|type
name|QDnsLookup
operator|::
name|Type
name|QDnsLookup
operator|::
name|type
parameter_list|()
specifier|const
block|{
return|return
name|d_func
argument_list|()
operator|->
name|type
return|;
block|}
end_function
begin_function
DECL|function|setType
name|void
name|QDnsLookup
operator|::
name|setType
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDnsLookup
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|!=
name|d
operator|->
name|type
condition|)
block|{
name|d
operator|->
name|type
operator|=
name|type
expr_stmt|;
emit|emit
name|typeChanged
argument_list|(
name|type
argument_list|)
emit|;
block|}
block|}
end_function
begin_comment
comment|/*!     \property QDnsLookup::nameserver     \brief the nameserver to use for DNS lookup. */
end_comment
begin_function
DECL|function|nameserver
name|QHostAddress
name|QDnsLookup
operator|::
name|nameserver
parameter_list|()
specifier|const
block|{
return|return
name|d_func
argument_list|()
operator|->
name|nameserver
return|;
block|}
end_function
begin_function
DECL|function|setNameserver
name|void
name|QDnsLookup
operator|::
name|setNameserver
parameter_list|(
specifier|const
name|QHostAddress
modifier|&
name|nameserver
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDnsLookup
argument_list|)
expr_stmt|;
if|if
condition|(
name|nameserver
operator|!=
name|d
operator|->
name|nameserver
condition|)
block|{
name|d
operator|->
name|nameserver
operator|=
name|nameserver
expr_stmt|;
emit|emit
name|nameserverChanged
argument_list|(
name|nameserver
argument_list|)
emit|;
block|}
block|}
end_function
begin_comment
comment|/*!     Returns the list of canonical name records associated with this lookup. */
end_comment
begin_function
DECL|function|canonicalNameRecords
name|QList
argument_list|<
name|QDnsDomainNameRecord
argument_list|>
name|QDnsLookup
operator|::
name|canonicalNameRecords
parameter_list|()
specifier|const
block|{
return|return
name|d_func
argument_list|()
operator|->
name|reply
operator|.
name|canonicalNameRecords
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the list of host address records associated with this lookup. */
end_comment
begin_function
DECL|function|hostAddressRecords
name|QList
argument_list|<
name|QDnsHostAddressRecord
argument_list|>
name|QDnsLookup
operator|::
name|hostAddressRecords
parameter_list|()
specifier|const
block|{
return|return
name|d_func
argument_list|()
operator|->
name|reply
operator|.
name|hostAddressRecords
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the list of mail exchange records associated with this lookup.      The records are sorted according to     \l{http://www.rfc-editor.org/rfc/rfc5321.txt}{RFC 5321}, so if you use them     to connect to servers, you should try them in the order they are listed. */
end_comment
begin_function
DECL|function|mailExchangeRecords
name|QList
argument_list|<
name|QDnsMailExchangeRecord
argument_list|>
name|QDnsLookup
operator|::
name|mailExchangeRecords
parameter_list|()
specifier|const
block|{
return|return
name|d_func
argument_list|()
operator|->
name|reply
operator|.
name|mailExchangeRecords
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the list of name server records associated with this lookup. */
end_comment
begin_function
DECL|function|nameServerRecords
name|QList
argument_list|<
name|QDnsDomainNameRecord
argument_list|>
name|QDnsLookup
operator|::
name|nameServerRecords
parameter_list|()
specifier|const
block|{
return|return
name|d_func
argument_list|()
operator|->
name|reply
operator|.
name|nameServerRecords
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the list of pointer records associated with this lookup. */
end_comment
begin_function
DECL|function|pointerRecords
name|QList
argument_list|<
name|QDnsDomainNameRecord
argument_list|>
name|QDnsLookup
operator|::
name|pointerRecords
parameter_list|()
specifier|const
block|{
return|return
name|d_func
argument_list|()
operator|->
name|reply
operator|.
name|pointerRecords
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the list of service records associated with this lookup.      The records are sorted according to     \l{http://www.rfc-editor.org/rfc/rfc2782.txt}{RFC 2782}, so if you use them     to connect to servers, you should try them in the order they are listed. */
end_comment
begin_function
DECL|function|serviceRecords
name|QList
argument_list|<
name|QDnsServiceRecord
argument_list|>
name|QDnsLookup
operator|::
name|serviceRecords
parameter_list|()
specifier|const
block|{
return|return
name|d_func
argument_list|()
operator|->
name|reply
operator|.
name|serviceRecords
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the list of text records associated with this lookup. */
end_comment
begin_function
DECL|function|textRecords
name|QList
argument_list|<
name|QDnsTextRecord
argument_list|>
name|QDnsLookup
operator|::
name|textRecords
parameter_list|()
specifier|const
block|{
return|return
name|d_func
argument_list|()
operator|->
name|reply
operator|.
name|textRecords
return|;
block|}
end_function
begin_comment
comment|/*!     Aborts the DNS lookup operation.      If the lookup is already finished, does nothing. */
end_comment
begin_function
DECL|function|abort
name|void
name|QDnsLookup
operator|::
name|abort
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QDnsLookup
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|runnable
condition|)
block|{
name|d
operator|->
name|runnable
operator|=
literal|0
expr_stmt|;
name|d
operator|->
name|reply
operator|=
name|QDnsLookupReply
argument_list|()
expr_stmt|;
name|d
operator|->
name|reply
operator|.
name|error
operator|=
name|QDnsLookup
operator|::
name|OperationCancelledError
expr_stmt|;
name|d
operator|->
name|reply
operator|.
name|errorString
operator|=
name|tr
argument_list|(
literal|"Operation cancelled"
argument_list|)
expr_stmt|;
name|d
operator|->
name|isFinished
operator|=
literal|true
expr_stmt|;
emit|emit
name|finished
argument_list|()
emit|;
block|}
block|}
end_function
begin_comment
comment|/*!     Performs the DNS lookup.      The \l{QDnsLookup::finished()}{finished()} signal is emitted upon completion. */
end_comment
begin_function
DECL|function|lookup
name|void
name|QDnsLookup
operator|::
name|lookup
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QDnsLookup
argument_list|)
expr_stmt|;
name|d
operator|->
name|isFinished
operator|=
literal|false
expr_stmt|;
name|d
operator|->
name|reply
operator|=
name|QDnsLookupReply
argument_list|()
expr_stmt|;
name|d
operator|->
name|runnable
operator|=
operator|new
name|QDnsLookupRunnable
argument_list|(
name|d
operator|->
name|type
argument_list|,
name|QUrl
operator|::
name|toAce
argument_list|(
name|d
operator|->
name|name
argument_list|)
argument_list|,
name|d
operator|->
name|nameserver
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|d
operator|->
name|runnable
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|(
name|QDnsLookupReply
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_lookupFinished
argument_list|(
name|QDnsLookupReply
argument_list|)
argument_list|)
argument_list|,
name|Qt
operator|::
name|BlockingQueuedConnection
argument_list|)
expr_stmt|;
name|theDnsLookupThreadPool
argument_list|()
operator|->
name|start
argument_list|(
name|d
operator|->
name|runnable
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \class QDnsDomainNameRecord     \brief The QDnsDomainNameRecord class stores information about a domain     name record.      \inmodule QtNetwork     \ingroup network     \ingroup shared      When performing a name server lookup, zero or more records will be returned.     Each record is represented by a QDnsDomainNameRecord instance.      \sa QDnsLookup */
end_comment
begin_comment
comment|/*!     Constructs an empty domain name record object. */
end_comment
begin_constructor
DECL|function|QDnsDomainNameRecord
name|QDnsDomainNameRecord
operator|::
name|QDnsDomainNameRecord
parameter_list|()
member_init_list|:
name|d
argument_list|(
operator|new
name|QDnsDomainNameRecordPrivate
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Constructs a copy of \a other. */
end_comment
begin_constructor
DECL|function|QDnsDomainNameRecord
name|QDnsDomainNameRecord
operator|::
name|QDnsDomainNameRecord
parameter_list|(
specifier|const
name|QDnsDomainNameRecord
modifier|&
name|other
parameter_list|)
member_init_list|:
name|d
argument_list|(
name|other
operator|.
name|d
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Destroys a domain name record. */
end_comment
begin_destructor
DECL|function|~QDnsDomainNameRecord
name|QDnsDomainNameRecord
operator|::
name|~
name|QDnsDomainNameRecord
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     Returns the name for this record. */
end_comment
begin_function
DECL|function|name
name|QString
name|QDnsDomainNameRecord
operator|::
name|name
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|name
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the duration in seconds for which this record is valid. */
end_comment
begin_function
DECL|function|timeToLive
name|quint32
name|QDnsDomainNameRecord
operator|::
name|timeToLive
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|timeToLive
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the value for this domain name record. */
end_comment
begin_function
DECL|function|value
name|QString
name|QDnsDomainNameRecord
operator|::
name|value
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|value
return|;
block|}
end_function
begin_comment
comment|/*!     Assigns the data of the \a other object to this record object,     and returns a reference to it. */
end_comment
begin_function
DECL|function|operator =
name|QDnsDomainNameRecord
modifier|&
name|QDnsDomainNameRecord
operator|::
name|operator
name|=
parameter_list|(
specifier|const
name|QDnsDomainNameRecord
modifier|&
name|other
parameter_list|)
block|{
name|d
operator|=
name|other
operator|.
name|d
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_function
begin_comment
comment|/*!     \fn void QDnsDomainNameRecord::swap(QDnsDomainNameRecord&other)      Swaps this domain-name record instance with \a other. This     function is very fast and never fails. */
end_comment
begin_comment
comment|/*!     \class QDnsHostAddressRecord     \brief The QDnsHostAddressRecord class stores information about a host     address record.      \inmodule QtNetwork     \ingroup network     \ingroup shared      When performing an address lookup, zero or more records will be     returned. Each record is represented by a QDnsHostAddressRecord instance.      \sa QDnsLookup */
end_comment
begin_comment
comment|/*!     Constructs an empty host address record object. */
end_comment
begin_constructor
DECL|function|QDnsHostAddressRecord
name|QDnsHostAddressRecord
operator|::
name|QDnsHostAddressRecord
parameter_list|()
member_init_list|:
name|d
argument_list|(
operator|new
name|QDnsHostAddressRecordPrivate
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Constructs a copy of \a other. */
end_comment
begin_constructor
DECL|function|QDnsHostAddressRecord
name|QDnsHostAddressRecord
operator|::
name|QDnsHostAddressRecord
parameter_list|(
specifier|const
name|QDnsHostAddressRecord
modifier|&
name|other
parameter_list|)
member_init_list|:
name|d
argument_list|(
name|other
operator|.
name|d
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Destroys a host address record. */
end_comment
begin_destructor
DECL|function|~QDnsHostAddressRecord
name|QDnsHostAddressRecord
operator|::
name|~
name|QDnsHostAddressRecord
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     Returns the name for this record. */
end_comment
begin_function
DECL|function|name
name|QString
name|QDnsHostAddressRecord
operator|::
name|name
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|name
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the duration in seconds for which this record is valid. */
end_comment
begin_function
DECL|function|timeToLive
name|quint32
name|QDnsHostAddressRecord
operator|::
name|timeToLive
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|timeToLive
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the value for this host address record. */
end_comment
begin_function
DECL|function|value
name|QHostAddress
name|QDnsHostAddressRecord
operator|::
name|value
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|value
return|;
block|}
end_function
begin_comment
comment|/*!     Assigns the data of the \a other object to this record object,     and returns a reference to it. */
end_comment
begin_function
DECL|function|operator =
name|QDnsHostAddressRecord
modifier|&
name|QDnsHostAddressRecord
operator|::
name|operator
name|=
parameter_list|(
specifier|const
name|QDnsHostAddressRecord
modifier|&
name|other
parameter_list|)
block|{
name|d
operator|=
name|other
operator|.
name|d
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_function
begin_comment
comment|/*!     \fn void QDnsHostAddressRecord::swap(QDnsHostAddressRecord&other)      Swaps this host address record instance with \a other. This     function is very fast and never fails. */
end_comment
begin_comment
comment|/*!     \class QDnsMailExchangeRecord     \brief The QDnsMailExchangeRecord class stores information about a DNS MX record.      \inmodule QtNetwork     \ingroup network     \ingroup shared      When performing a lookup on a service, zero or more records will be     returned. Each record is represented by a QDnsMailExchangeRecord instance.      The meaning of the fields is defined in     \l{http://www.rfc-editor.org/rfc/rfc1035.txt}{RFC 1035}.      \sa QDnsLookup */
end_comment
begin_comment
comment|/*!     Constructs an empty mail exchange record object. */
end_comment
begin_constructor
DECL|function|QDnsMailExchangeRecord
name|QDnsMailExchangeRecord
operator|::
name|QDnsMailExchangeRecord
parameter_list|()
member_init_list|:
name|d
argument_list|(
operator|new
name|QDnsMailExchangeRecordPrivate
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Constructs a copy of \a other. */
end_comment
begin_constructor
DECL|function|QDnsMailExchangeRecord
name|QDnsMailExchangeRecord
operator|::
name|QDnsMailExchangeRecord
parameter_list|(
specifier|const
name|QDnsMailExchangeRecord
modifier|&
name|other
parameter_list|)
member_init_list|:
name|d
argument_list|(
name|other
operator|.
name|d
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Destroys a mail exchange record. */
end_comment
begin_destructor
DECL|function|~QDnsMailExchangeRecord
name|QDnsMailExchangeRecord
operator|::
name|~
name|QDnsMailExchangeRecord
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     Returns the domain name of the mail exchange for this record. */
end_comment
begin_function
DECL|function|exchange
name|QString
name|QDnsMailExchangeRecord
operator|::
name|exchange
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|exchange
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the name for this record. */
end_comment
begin_function
DECL|function|name
name|QString
name|QDnsMailExchangeRecord
operator|::
name|name
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|name
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the preference for this record. */
end_comment
begin_function
DECL|function|preference
name|quint16
name|QDnsMailExchangeRecord
operator|::
name|preference
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|preference
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the duration in seconds for which this record is valid. */
end_comment
begin_function
DECL|function|timeToLive
name|quint32
name|QDnsMailExchangeRecord
operator|::
name|timeToLive
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|timeToLive
return|;
block|}
end_function
begin_comment
comment|/*!     Assigns the data of the \a other object to this record object,     and returns a reference to it. */
end_comment
begin_function
DECL|function|operator =
name|QDnsMailExchangeRecord
modifier|&
name|QDnsMailExchangeRecord
operator|::
name|operator
name|=
parameter_list|(
specifier|const
name|QDnsMailExchangeRecord
modifier|&
name|other
parameter_list|)
block|{
name|d
operator|=
name|other
operator|.
name|d
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_function
begin_comment
comment|/*!     \fn void QDnsMailExchangeRecord::swap(QDnsMailExchangeRecord&other)      Swaps this mail exchange record with \a other. This function is     very fast and never fails. */
end_comment
begin_comment
comment|/*!     \class QDnsServiceRecord     \brief The QDnsServiceRecord class stores information about a DNS SRV record.      \inmodule QtNetwork     \ingroup network     \ingroup shared      When performing a lookup on a service, zero or more records will be     returned. Each record is represented by a QDnsServiceRecord instance.      The meaning of the fields is defined in     \l{http://www.rfc-editor.org/rfc/rfc2782.txt}{RFC 2782}.      \sa QDnsLookup */
end_comment
begin_comment
comment|/*!     Constructs an empty service record object. */
end_comment
begin_constructor
DECL|function|QDnsServiceRecord
name|QDnsServiceRecord
operator|::
name|QDnsServiceRecord
parameter_list|()
member_init_list|:
name|d
argument_list|(
operator|new
name|QDnsServiceRecordPrivate
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Constructs a copy of \a other. */
end_comment
begin_constructor
DECL|function|QDnsServiceRecord
name|QDnsServiceRecord
operator|::
name|QDnsServiceRecord
parameter_list|(
specifier|const
name|QDnsServiceRecord
modifier|&
name|other
parameter_list|)
member_init_list|:
name|d
argument_list|(
name|other
operator|.
name|d
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Destroys a service record. */
end_comment
begin_destructor
DECL|function|~QDnsServiceRecord
name|QDnsServiceRecord
operator|::
name|~
name|QDnsServiceRecord
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     Returns the name for this record. */
end_comment
begin_function
DECL|function|name
name|QString
name|QDnsServiceRecord
operator|::
name|name
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|name
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the port on the target host for this service record. */
end_comment
begin_function
DECL|function|port
name|quint16
name|QDnsServiceRecord
operator|::
name|port
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|port
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the priority for this service record.      A client must attempt to contact the target host with the lowest-numbered     priority. */
end_comment
begin_function
DECL|function|priority
name|quint16
name|QDnsServiceRecord
operator|::
name|priority
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|priority
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the domain name of the target host for this service record. */
end_comment
begin_function
DECL|function|target
name|QString
name|QDnsServiceRecord
operator|::
name|target
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|target
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the duration in seconds for which this record is valid. */
end_comment
begin_function
DECL|function|timeToLive
name|quint32
name|QDnsServiceRecord
operator|::
name|timeToLive
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|timeToLive
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the weight for this service record.      The weight field specifies a relative weight for entries with the same     priority. Entries with higher weights should be selected with a higher     probability. */
end_comment
begin_function
DECL|function|weight
name|quint16
name|QDnsServiceRecord
operator|::
name|weight
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|weight
return|;
block|}
end_function
begin_comment
comment|/*!     Assigns the data of the \a other object to this record object,     and returns a reference to it. */
end_comment
begin_function
DECL|function|operator =
name|QDnsServiceRecord
modifier|&
name|QDnsServiceRecord
operator|::
name|operator
name|=
parameter_list|(
specifier|const
name|QDnsServiceRecord
modifier|&
name|other
parameter_list|)
block|{
name|d
operator|=
name|other
operator|.
name|d
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_function
begin_comment
comment|/*!     \fn void QDnsServiceRecord::swap(QDnsServiceRecord&other)      Swaps this service record instance with \a other. This function is     very fast and never fails. */
end_comment
begin_comment
comment|/*!     \class QDnsTextRecord     \brief The QDnsTextRecord class stores information about a DNS TXT record.      \inmodule QtNetwork     \ingroup network     \ingroup shared      When performing a text lookup, zero or more records will be     returned. Each record is represented by a QDnsTextRecord instance.      The meaning of the fields is defined in     \l{http://www.rfc-editor.org/rfc/rfc1035.txt}{RFC 1035}.      \sa QDnsLookup */
end_comment
begin_comment
comment|/*!     Constructs an empty text record object. */
end_comment
begin_constructor
DECL|function|QDnsTextRecord
name|QDnsTextRecord
operator|::
name|QDnsTextRecord
parameter_list|()
member_init_list|:
name|d
argument_list|(
operator|new
name|QDnsTextRecordPrivate
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Constructs a copy of \a other. */
end_comment
begin_constructor
DECL|function|QDnsTextRecord
name|QDnsTextRecord
operator|::
name|QDnsTextRecord
parameter_list|(
specifier|const
name|QDnsTextRecord
modifier|&
name|other
parameter_list|)
member_init_list|:
name|d
argument_list|(
name|other
operator|.
name|d
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Destroys a text record. */
end_comment
begin_destructor
DECL|function|~QDnsTextRecord
name|QDnsTextRecord
operator|::
name|~
name|QDnsTextRecord
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     Returns the name for this text record. */
end_comment
begin_function
DECL|function|name
name|QString
name|QDnsTextRecord
operator|::
name|name
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|name
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the duration in seconds for which this record is valid. */
end_comment
begin_function
DECL|function|timeToLive
name|quint32
name|QDnsTextRecord
operator|::
name|timeToLive
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|timeToLive
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the values for this text record. */
end_comment
begin_function
DECL|function|values
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|QDnsTextRecord
operator|::
name|values
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|values
return|;
block|}
end_function
begin_comment
comment|/*!     Assigns the data of the \a other object to this record object,     and returns a reference to it. */
end_comment
begin_function
DECL|function|operator =
name|QDnsTextRecord
modifier|&
name|QDnsTextRecord
operator|::
name|operator
name|=
parameter_list|(
specifier|const
name|QDnsTextRecord
modifier|&
name|other
parameter_list|)
block|{
name|d
operator|=
name|other
operator|.
name|d
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_function
begin_comment
comment|/*!     \fn void QDnsTextRecord::swap(QDnsTextRecord&other)      Swaps this text record instance with \a other. This function is     very fast and never fails. */
end_comment
begin_function
DECL|function|_q_lookupFinished
name|void
name|QDnsLookupPrivate
operator|::
name|_q_lookupFinished
parameter_list|(
specifier|const
name|QDnsLookupReply
modifier|&
name|_reply
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QDnsLookup
argument_list|)
expr_stmt|;
if|if
condition|(
name|runnable
operator|==
name|q
operator|->
name|sender
argument_list|()
condition|)
block|{
ifdef|#
directive|ifdef
name|QDNSLOOKUP_DEBUG
name|qDebug
argument_list|(
literal|"DNS reply for %s: %i (%s)"
argument_list|,
name|qPrintable
argument_list|(
name|name
argument_list|)
argument_list|,
name|_reply
operator|.
name|error
argument_list|,
name|qPrintable
argument_list|(
name|_reply
operator|.
name|errorString
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|reply
operator|=
name|_reply
expr_stmt|;
name|runnable
operator|=
literal|0
expr_stmt|;
name|isFinished
operator|=
literal|true
expr_stmt|;
emit|emit
name|q
operator|->
name|finished
argument_list|()
emit|;
block|}
block|}
end_function
begin_function
DECL|function|run
name|void
name|QDnsLookupRunnable
operator|::
name|run
parameter_list|()
block|{
name|QDnsLookupReply
name|reply
decl_stmt|;
comment|// Validate input.
if|if
condition|(
name|requestName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|reply
operator|.
name|error
operator|=
name|QDnsLookup
operator|::
name|InvalidRequestError
expr_stmt|;
name|reply
operator|.
name|errorString
operator|=
name|tr
argument_list|(
literal|"Invalid domain name"
argument_list|)
expr_stmt|;
emit|emit
name|finished
argument_list|(
name|reply
argument_list|)
emit|;
return|return;
block|}
comment|// Perform request.
name|query
argument_list|(
name|requestType
argument_list|,
name|requestName
argument_list|,
name|nameserver
argument_list|,
operator|&
name|reply
argument_list|)
expr_stmt|;
comment|// Sort results.
if|if
condition|(
operator|!
name|theDnsLookupSeedStorage
argument_list|()
operator|->
name|hasLocalData
argument_list|()
condition|)
block|{
name|qsrand
argument_list|(
name|QTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|msecsTo
argument_list|(
name|QTime
operator|::
name|currentTime
argument_list|()
argument_list|)
operator|^
cast|reinterpret_cast
argument_list|<
name|quintptr
argument_list|>
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|theDnsLookupSeedStorage
argument_list|()
operator|->
name|setLocalData
argument_list|(
operator|new
name|bool
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|qt_qdnsmailexchangerecord_sort
argument_list|(
name|reply
operator|.
name|mailExchangeRecords
argument_list|)
expr_stmt|;
name|qt_qdnsservicerecord_sort
argument_list|(
name|reply
operator|.
name|serviceRecords
argument_list|)
expr_stmt|;
emit|emit
name|finished
argument_list|(
name|reply
argument_list|)
emit|;
block|}
end_function
begin_constructor
DECL|function|QDnsLookupThreadPool
name|QDnsLookupThreadPool
operator|::
name|QDnsLookupThreadPool
parameter_list|()
member_init_list|:
name|signalsConnected
argument_list|(
literal|false
argument_list|)
block|{
comment|// Run up to 5 lookups in parallel.
name|setMaxThreadCount
argument_list|(
literal|5
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|start
name|void
name|QDnsLookupThreadPool
operator|::
name|start
parameter_list|(
name|QRunnable
modifier|*
name|runnable
parameter_list|)
block|{
comment|// Ensure threads complete at application destruction.
if|if
condition|(
operator|!
name|signalsConnected
condition|)
block|{
name|QMutexLocker
name|signalsLocker
argument_list|(
operator|&
name|signalsMutex
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|signalsConnected
condition|)
block|{
name|QCoreApplication
modifier|*
name|app
init|=
name|QCoreApplication
operator|::
name|instance
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|app
condition|)
block|{
name|qWarning
argument_list|(
literal|"QDnsLookup requires a QCoreApplication"
argument_list|)
expr_stmt|;
operator|delete
name|runnable
expr_stmt|;
return|return;
block|}
name|moveToThread
argument_list|(
name|app
operator|->
name|thread
argument_list|()
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|app
argument_list|,
name|SIGNAL
argument_list|(
name|destroyed
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|_q_applicationDestroyed
argument_list|()
argument_list|)
argument_list|,
name|Qt
operator|::
name|DirectConnection
argument_list|)
expr_stmt|;
name|signalsConnected
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|QThreadPool
operator|::
name|start
argument_list|(
name|runnable
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|_q_applicationDestroyed
name|void
name|QDnsLookupThreadPool
operator|::
name|_q_applicationDestroyed
parameter_list|()
block|{
name|waitForDone
argument_list|()
expr_stmt|;
name|signalsConnected
operator|=
literal|false
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_include
include|#
directive|include
file|"moc_qdnslookup.cpp"
end_include
end_unit
