begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtNetwork module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<winsock2.h>
end_include
begin_include
include|#
directive|include
file|"qhostinfo_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qnativesocketengine_p.h"
end_include
begin_include
include|#
directive|include
file|<ws2tcpip.h>
end_include
begin_include
include|#
directive|include
file|<private/qsystemlibrary_p.h>
end_include
begin_include
include|#
directive|include
file|<qmutex.h>
end_include
begin_include
include|#
directive|include
file|<qurl.h>
end_include
begin_include
include|#
directive|include
file|<private/qmutexpool_p.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_comment
comment|//#define QHOSTINFO_DEBUG
end_comment
begin_comment
comment|// Older SDKs do not include the addrinfo struct declaration, so we
end_comment
begin_comment
comment|// include a copy of it here.
end_comment
begin_struct
DECL|struct|qt_addrinfo
struct|struct
name|qt_addrinfo
block|{
DECL|member|ai_flags
name|int
name|ai_flags
decl_stmt|;
DECL|member|ai_family
name|int
name|ai_family
decl_stmt|;
DECL|member|ai_socktype
name|int
name|ai_socktype
decl_stmt|;
DECL|member|ai_protocol
name|int
name|ai_protocol
decl_stmt|;
DECL|member|ai_addrlen
name|size_t
name|ai_addrlen
decl_stmt|;
DECL|member|ai_canonname
name|char
modifier|*
name|ai_canonname
decl_stmt|;
DECL|member|ai_addr
name|sockaddr
modifier|*
name|ai_addr
decl_stmt|;
DECL|member|ai_next
name|qt_addrinfo
modifier|*
name|ai_next
decl_stmt|;
block|}
struct|;
end_struct
begin_comment
comment|//###
end_comment
begin_define
DECL|macro|QT_SOCKLEN_T
define|#
directive|define
name|QT_SOCKLEN_T
value|int
end_define
begin_ifndef
ifndef|#
directive|ifndef
name|NI_MAXHOST
end_ifndef
begin_comment
comment|// already defined to 1025 in ws2tcpip.h?
end_comment
begin_define
DECL|macro|NI_MAXHOST
define|#
directive|define
name|NI_MAXHOST
value|1024
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_typedef
DECL|typedef|getnameinfoProto
typedef|typedef
name|int
function_decl|(
name|__stdcall
modifier|*
name|getnameinfoProto
function_decl|)
parameter_list|(
specifier|const
name|sockaddr
modifier|*
parameter_list|,
name|QT_SOCKLEN_T
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|DWORD
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|DWORD
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|getaddrinfoProto
typedef|typedef
name|int
function_decl|(
name|__stdcall
modifier|*
name|getaddrinfoProto
function_decl|)
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|qt_addrinfo
modifier|*
parameter_list|,
name|qt_addrinfo
modifier|*
modifier|*
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|freeaddrinfoProto
typedef|typedef
name|int
function_decl|(
name|__stdcall
modifier|*
name|freeaddrinfoProto
function_decl|)
parameter_list|(
name|qt_addrinfo
modifier|*
parameter_list|)
function_decl|;
end_typedef
begin_decl_stmt
DECL|variable|local_getnameinfo
specifier|static
name|getnameinfoProto
name|local_getnameinfo
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|local_getaddrinfo
specifier|static
name|getaddrinfoProto
name|local_getaddrinfo
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|local_freeaddrinfo
specifier|static
name|freeaddrinfoProto
name|local_freeaddrinfo
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|resolveLibrary
specifier|static
name|void
name|resolveLibrary
parameter_list|()
block|{
comment|// Attempt to resolve getaddrinfo(); without it we'll have to fall
comment|// back to gethostbyname(), which has no IPv6 support.
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|local_getaddrinfo
operator|=
operator|(
name|getaddrinfoProto
operator|)
name|QSystemLibrary
operator|::
name|resolve
argument_list|(
name|QLatin1String
argument_list|(
literal|"ws2_32"
argument_list|)
argument_list|,
literal|"getaddrinfo"
argument_list|)
expr_stmt|;
name|local_freeaddrinfo
operator|=
operator|(
name|freeaddrinfoProto
operator|)
name|QSystemLibrary
operator|::
name|resolve
argument_list|(
name|QLatin1String
argument_list|(
literal|"ws2_32"
argument_list|)
argument_list|,
literal|"freeaddrinfo"
argument_list|)
expr_stmt|;
name|local_getnameinfo
operator|=
operator|(
name|getnameinfoProto
operator|)
name|QSystemLibrary
operator|::
name|resolve
argument_list|(
name|QLatin1String
argument_list|(
literal|"ws2_32"
argument_list|)
argument_list|,
literal|"getnameinfo"
argument_list|)
expr_stmt|;
else|#
directive|else
name|local_getaddrinfo
operator|=
operator|(
name|getaddrinfoProto
operator|)
name|QSystemLibrary
operator|::
name|resolve
argument_list|(
name|QLatin1String
argument_list|(
literal|"ws2"
argument_list|)
argument_list|,
literal|"getaddrinfo"
argument_list|)
expr_stmt|;
name|local_freeaddrinfo
operator|=
operator|(
name|freeaddrinfoProto
operator|)
name|QSystemLibrary
operator|::
name|resolve
argument_list|(
name|QLatin1String
argument_list|(
literal|"ws2"
argument_list|)
argument_list|,
literal|"freeaddrinfo"
argument_list|)
expr_stmt|;
name|local_getnameinfo
operator|=
operator|(
name|getnameinfoProto
operator|)
name|QSystemLibrary
operator|::
name|resolve
argument_list|(
name|QLatin1String
argument_list|(
literal|"ws2"
argument_list|)
argument_list|,
literal|"getnameinfo"
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
end_if
begin_include
include|#
directive|include
file|<qmutex.h>
end_include
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|QMutex
argument_list|,
argument|qPrivCEMutex
argument_list|)
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|fromName
name|QHostInfo
name|QHostInfoAgent
operator|::
name|fromName
parameter_list|(
specifier|const
name|QString
modifier|&
name|hostName
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QMutexLocker
name|locker
argument_list|(
name|qPrivCEMutex
argument_list|()
argument_list|)
decl_stmt|;
endif|#
directive|endif
name|QWindowsSockInit
name|winSock
decl_stmt|;
comment|// Load res_init on demand.
specifier|static
specifier|volatile
name|bool
name|triedResolve
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|triedResolve
condition|)
block|{
name|QMutexLocker
name|locker
argument_list|(
name|QMutexPool
operator|::
name|globalInstanceGet
argument_list|(
operator|&
name|local_getaddrinfo
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|triedResolve
condition|)
block|{
name|resolveLibrary
argument_list|()
expr_stmt|;
name|triedResolve
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|QHostInfo
name|results
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QHOSTINFO_DEBUG
argument_list|)
name|qDebug
argument_list|(
literal|"QHostInfoAgent::fromName(%p): looking up \"%s\" (IPv6 support is %s)"
argument_list|,
name|this
argument_list|,
name|hostName
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
operator|(
name|local_getaddrinfo
operator|&&
name|local_freeaddrinfo
operator|)
condition|?
literal|"enabled"
else|:
literal|"disabled"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QHostAddress
name|address
decl_stmt|;
if|if
condition|(
name|address
operator|.
name|setAddress
argument_list|(
name|hostName
argument_list|)
condition|)
block|{
comment|// Reverse lookup
if|if
condition|(
name|local_getnameinfo
condition|)
block|{
name|sockaddr_in
name|sa4
decl_stmt|;
name|qt_sockaddr_in6
name|sa6
decl_stmt|;
name|sockaddr
modifier|*
name|sa
decl_stmt|;
name|QT_SOCKLEN_T
name|saSize
decl_stmt|;
if|if
condition|(
name|address
operator|.
name|protocol
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|IPv4Protocol
condition|)
block|{
name|sa
operator|=
operator|(
name|sockaddr
operator|*
operator|)
operator|&
name|sa4
expr_stmt|;
name|saSize
operator|=
sizeof|sizeof
argument_list|(
name|sa4
argument_list|)
expr_stmt|;
name|memset
argument_list|(
operator|&
name|sa4
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|sa4
argument_list|)
argument_list|)
expr_stmt|;
name|sa4
operator|.
name|sin_family
operator|=
name|AF_INET
expr_stmt|;
name|sa4
operator|.
name|sin_addr
operator|.
name|s_addr
operator|=
name|htonl
argument_list|(
name|address
operator|.
name|toIPv4Address
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sa
operator|=
operator|(
name|sockaddr
operator|*
operator|)
operator|&
name|sa6
expr_stmt|;
name|saSize
operator|=
sizeof|sizeof
argument_list|(
name|sa6
argument_list|)
expr_stmt|;
name|memset
argument_list|(
operator|&
name|sa6
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|sa6
argument_list|)
argument_list|)
expr_stmt|;
name|sa6
operator|.
name|sin6_family
operator|=
name|AF_INET6
expr_stmt|;
name|memcpy
argument_list|(
name|sa6
operator|.
name|sin6_addr
operator|.
name|qt_s6_addr
argument_list|,
name|address
operator|.
name|toIPv6Address
argument_list|()
operator|.
name|c
argument_list|,
sizeof|sizeof
argument_list|(
name|sa6
operator|.
name|sin6_addr
operator|.
name|qt_s6_addr
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|char
name|hbuf
index|[
name|NI_MAXHOST
index|]
decl_stmt|;
if|if
condition|(
name|local_getnameinfo
argument_list|(
name|sa
argument_list|,
name|saSize
argument_list|,
name|hbuf
argument_list|,
sizeof|sizeof
argument_list|(
name|hbuf
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
operator|==
literal|0
condition|)
name|results
operator|.
name|setHostName
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|hbuf
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|unsigned
name|long
name|addr
init|=
name|inet_addr
argument_list|(
name|hostName
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
decl_stmt|;
name|struct
name|hostent
modifier|*
name|ent
init|=
name|gethostbyaddr
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|)
operator|&
name|addr
argument_list|,
sizeof|sizeof
argument_list|(
name|addr
argument_list|)
argument_list|,
name|AF_INET
argument_list|)
decl_stmt|;
if|if
condition|(
name|ent
condition|)
name|results
operator|.
name|setHostName
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|ent
operator|->
name|h_name
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|results
operator|.
name|hostName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|results
operator|.
name|setHostName
argument_list|(
name|address
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|results
operator|.
name|setAddresses
argument_list|(
name|QList
argument_list|<
name|QHostAddress
argument_list|>
argument_list|()
operator|<<
name|address
argument_list|)
expr_stmt|;
return|return
name|results
return|;
block|}
comment|// IDN support
name|QByteArray
name|aceHostname
init|=
name|QUrl
operator|::
name|toAce
argument_list|(
name|hostName
argument_list|)
decl_stmt|;
name|results
operator|.
name|setHostName
argument_list|(
name|hostName
argument_list|)
expr_stmt|;
if|if
condition|(
name|aceHostname
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|results
operator|.
name|setError
argument_list|(
name|QHostInfo
operator|::
name|HostNotFound
argument_list|)
expr_stmt|;
name|results
operator|.
name|setErrorString
argument_list|(
name|hostName
operator|.
name|isEmpty
argument_list|()
condition|?
name|tr
argument_list|(
literal|"No host name given"
argument_list|)
else|:
name|tr
argument_list|(
literal|"Invalid hostname"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|results
return|;
block|}
if|if
condition|(
name|local_getaddrinfo
operator|&&
name|local_freeaddrinfo
condition|)
block|{
comment|// Call getaddrinfo, and place all IPv4 addresses at the start
comment|// and the IPv6 addresses at the end of the address list in
comment|// results.
name|qt_addrinfo
modifier|*
name|res
decl_stmt|;
name|int
name|err
init|=
name|local_getaddrinfo
argument_list|(
name|aceHostname
operator|.
name|constData
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|&
name|res
argument_list|)
decl_stmt|;
if|if
condition|(
name|err
operator|==
literal|0
condition|)
block|{
name|QList
argument_list|<
name|QHostAddress
argument_list|>
name|addresses
decl_stmt|;
for|for
control|(
name|qt_addrinfo
modifier|*
name|p
init|=
name|res
init|;
name|p
operator|!=
literal|0
condition|;
name|p
operator|=
name|p
operator|->
name|ai_next
control|)
block|{
switch|switch
condition|(
name|p
operator|->
name|ai_family
condition|)
block|{
case|case
name|AF_INET
case|:
block|{
name|QHostAddress
name|addr
decl_stmt|;
name|addr
operator|.
name|setAddress
argument_list|(
name|ntohl
argument_list|(
operator|(
operator|(
name|sockaddr_in
operator|*
operator|)
name|p
operator|->
name|ai_addr
operator|)
operator|->
name|sin_addr
operator|.
name|s_addr
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|addresses
operator|.
name|contains
argument_list|(
name|addr
argument_list|)
condition|)
name|addresses
operator|.
name|append
argument_list|(
name|addr
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|AF_INET6
case|:
block|{
name|QHostAddress
name|addr
decl_stmt|;
name|addr
operator|.
name|setAddress
argument_list|(
operator|(
operator|(
name|qt_sockaddr_in6
operator|*
operator|)
name|p
operator|->
name|ai_addr
operator|)
operator|->
name|sin6_addr
operator|.
name|qt_s6_addr
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|addresses
operator|.
name|contains
argument_list|(
name|addr
argument_list|)
condition|)
name|addresses
operator|.
name|append
argument_list|(
name|addr
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|results
operator|.
name|setError
argument_list|(
name|QHostInfo
operator|::
name|UnknownError
argument_list|)
expr_stmt|;
name|results
operator|.
name|setErrorString
argument_list|(
name|tr
argument_list|(
literal|"Unknown address type"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|results
operator|.
name|setAddresses
argument_list|(
name|addresses
argument_list|)
expr_stmt|;
name|local_freeaddrinfo
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|WSAGetLastError
argument_list|()
operator|==
name|WSAHOST_NOT_FOUND
operator|||
name|WSAGetLastError
argument_list|()
operator|==
name|WSANO_DATA
condition|)
block|{
name|results
operator|.
name|setError
argument_list|(
name|QHostInfo
operator|::
name|HostNotFound
argument_list|)
expr_stmt|;
name|results
operator|.
name|setErrorString
argument_list|(
name|tr
argument_list|(
literal|"Host not found"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|results
operator|.
name|setError
argument_list|(
name|QHostInfo
operator|::
name|UnknownError
argument_list|)
expr_stmt|;
name|results
operator|.
name|setErrorString
argument_list|(
name|tr
argument_list|(
literal|"Unknown error"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Fall back to gethostbyname, which only supports IPv4.
name|hostent
modifier|*
name|ent
init|=
name|gethostbyname
argument_list|(
name|aceHostname
operator|.
name|constData
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ent
condition|)
block|{
name|char
modifier|*
modifier|*
name|p
decl_stmt|;
name|QList
argument_list|<
name|QHostAddress
argument_list|>
name|addresses
decl_stmt|;
switch|switch
condition|(
name|ent
operator|->
name|h_addrtype
condition|)
block|{
case|case
name|AF_INET
case|:
for|for
control|(
name|p
operator|=
name|ent
operator|->
name|h_addr_list
init|;
operator|*
name|p
operator|!=
literal|0
condition|;
name|p
operator|++
control|)
block|{
name|long
modifier|*
name|ip4Addr
init|=
operator|(
name|long
operator|*
operator|)
operator|*
name|p
decl_stmt|;
name|QHostAddress
name|temp
decl_stmt|;
name|temp
operator|.
name|setAddress
argument_list|(
name|ntohl
argument_list|(
operator|*
name|ip4Addr
argument_list|)
argument_list|)
expr_stmt|;
name|addresses
operator|<<
name|temp
expr_stmt|;
block|}
break|break;
default|default:
name|results
operator|.
name|setError
argument_list|(
name|QHostInfo
operator|::
name|UnknownError
argument_list|)
expr_stmt|;
name|results
operator|.
name|setErrorString
argument_list|(
name|tr
argument_list|(
literal|"Unknown address type"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
name|results
operator|.
name|setAddresses
argument_list|(
name|addresses
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|WSAGetLastError
argument_list|()
operator|==
literal|11001
condition|)
block|{
name|results
operator|.
name|setErrorString
argument_list|(
name|tr
argument_list|(
literal|"Host not found"
argument_list|)
argument_list|)
expr_stmt|;
name|results
operator|.
name|setError
argument_list|(
name|QHostInfo
operator|::
name|HostNotFound
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|results
operator|.
name|setErrorString
argument_list|(
name|tr
argument_list|(
literal|"Unknown error"
argument_list|)
argument_list|)
expr_stmt|;
name|results
operator|.
name|setError
argument_list|(
name|QHostInfo
operator|::
name|UnknownError
argument_list|)
expr_stmt|;
block|}
block|}
if|#
directive|if
name|defined
argument_list|(
name|QHOSTINFO_DEBUG
argument_list|)
if|if
condition|(
name|results
operator|.
name|error
argument_list|()
operator|!=
name|QHostInfo
operator|::
name|NoError
condition|)
block|{
name|qDebug
argument_list|(
literal|"QHostInfoAgent::run(%p): error (%s)"
argument_list|,
name|this
argument_list|,
name|results
operator|.
name|errorString
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QString
name|tmp
decl_stmt|;
name|QList
argument_list|<
name|QHostAddress
argument_list|>
name|addresses
init|=
name|results
operator|.
name|addresses
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|addresses
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
name|tmp
operator|+=
literal|", "
expr_stmt|;
name|tmp
operator|+=
name|addresses
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|qDebug
argument_list|(
literal|"QHostInfoAgent::run(%p): found %i entries: {%s}"
argument_list|,
name|this
argument_list|,
name|addresses
operator|.
name|count
argument_list|()
argument_list|,
name|tmp
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
return|return
name|results
return|;
block|}
end_function
begin_function
DECL|function|localHostName
name|QString
name|QHostInfo
operator|::
name|localHostName
parameter_list|()
block|{
name|QWindowsSockInit
name|winSock
decl_stmt|;
name|char
name|hostName
index|[
literal|512
index|]
decl_stmt|;
if|if
condition|(
name|gethostname
argument_list|(
name|hostName
argument_list|,
sizeof|sizeof
argument_list|(
name|hostName
argument_list|)
argument_list|)
operator|==
operator|-
literal|1
condition|)
return|return
name|QString
argument_list|()
return|;
name|hostName
index|[
sizeof|sizeof
argument_list|(
name|hostName
argument_list|)
operator|-
literal|1
index|]
operator|=
literal|'\0'
expr_stmt|;
return|return
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|hostName
argument_list|)
return|;
block|}
end_function
begin_comment
comment|// QString QHostInfo::localDomainName() defined in qnetworkinterface_win.cpp
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
