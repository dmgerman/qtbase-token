begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtNetwork module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qnetworkinterface.h"
end_include
begin_include
include|#
directive|include
file|"qnetworkinterface_p.h"
end_include
begin_include
include|#
directive|include
file|"qdebug.h"
end_include
begin_include
include|#
directive|include
file|"qendian.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_NETWORKINTERFACE
end_ifndef
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|postProcess
specifier|static
name|QList
argument_list|<
name|QNetworkInterfacePrivate
modifier|*
argument_list|>
name|postProcess
parameter_list|(
name|QList
argument_list|<
name|QNetworkInterfacePrivate
modifier|*
argument_list|>
name|list
parameter_list|)
block|{
comment|// Some platforms report a netmask but don't report a broadcast address
comment|// Go through all available addresses and calculate the broadcast address
comment|// from the IP and the netmask
comment|//
comment|// This is an IPv4-only thing -- IPv6 has no concept of broadcasts
comment|// The math is:
comment|//    broadcast = IP | ~netmask
name|QList
argument_list|<
name|QNetworkInterfacePrivate
modifier|*
argument_list|>
operator|::
name|Iterator
name|it
init|=
name|list
operator|.
name|begin
argument_list|()
decl_stmt|;
specifier|const
name|QList
argument_list|<
name|QNetworkInterfacePrivate
modifier|*
argument_list|>
operator|::
name|Iterator
name|end
init|=
name|list
operator|.
name|end
argument_list|()
decl_stmt|;
for|for
control|(
init|;
name|it
operator|!=
name|end
condition|;
operator|++
name|it
control|)
block|{
name|QList
argument_list|<
name|QNetworkAddressEntry
argument_list|>
operator|::
name|Iterator
name|addr_it
init|=
operator|(
operator|*
name|it
operator|)
operator|->
name|addressEntries
operator|.
name|begin
argument_list|()
decl_stmt|;
specifier|const
name|QList
argument_list|<
name|QNetworkAddressEntry
argument_list|>
operator|::
name|Iterator
name|addr_end
init|=
operator|(
operator|*
name|it
operator|)
operator|->
name|addressEntries
operator|.
name|end
argument_list|()
decl_stmt|;
for|for
control|(
init|;
name|addr_it
operator|!=
name|addr_end
condition|;
operator|++
name|addr_it
control|)
block|{
if|if
condition|(
name|addr_it
operator|->
name|ip
argument_list|()
operator|.
name|protocol
argument_list|()
operator|!=
name|QAbstractSocket
operator|::
name|IPv4Protocol
condition|)
continue|continue;
if|if
condition|(
operator|!
name|addr_it
operator|->
name|netmask
argument_list|()
operator|.
name|isNull
argument_list|()
operator|&&
name|addr_it
operator|->
name|broadcast
argument_list|()
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|QHostAddress
name|bcast
init|=
name|addr_it
operator|->
name|ip
argument_list|()
decl_stmt|;
name|bcast
operator|=
name|QHostAddress
argument_list|(
name|bcast
operator|.
name|toIPv4Address
argument_list|()
operator||
operator|~
name|addr_it
operator|->
name|netmask
argument_list|()
operator|.
name|toIPv4Address
argument_list|()
argument_list|)
expr_stmt|;
name|addr_it
operator|->
name|setBroadcast
argument_list|(
name|bcast
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|list
return|;
block|}
end_function
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|QNetworkInterfaceManager
argument_list|,
argument|manager
argument_list|)
end_macro
begin_constructor
DECL|function|QNetworkInterfaceManager
name|QNetworkInterfaceManager
operator|::
name|QNetworkInterfaceManager
parameter_list|()
block|{ }
end_constructor
begin_destructor
DECL|function|~QNetworkInterfaceManager
name|QNetworkInterfaceManager
operator|::
name|~
name|QNetworkInterfaceManager
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|interfaceFromName
name|QSharedDataPointer
argument_list|<
name|QNetworkInterfacePrivate
argument_list|>
name|QNetworkInterfaceManager
operator|::
name|interfaceFromName
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
block|{
name|QList
argument_list|<
name|QSharedDataPointer
argument_list|<
name|QNetworkInterfacePrivate
argument_list|>
argument_list|>
name|interfaceList
init|=
name|allInterfaces
argument_list|()
decl_stmt|;
name|QList
argument_list|<
name|QSharedDataPointer
argument_list|<
name|QNetworkInterfacePrivate
argument_list|>
argument_list|>
operator|::
name|ConstIterator
name|it
init|=
name|interfaceList
operator|.
name|constBegin
argument_list|()
decl_stmt|;
for|for
control|(
init|;
name|it
operator|!=
name|interfaceList
operator|.
name|constEnd
argument_list|()
condition|;
operator|++
name|it
control|)
if|if
condition|(
operator|(
operator|*
name|it
operator|)
operator|->
name|name
operator|==
name|name
condition|)
return|return
operator|*
name|it
return|;
return|return
name|empty
return|;
block|}
end_function
begin_function
DECL|function|interfaceFromIndex
name|QSharedDataPointer
argument_list|<
name|QNetworkInterfacePrivate
argument_list|>
name|QNetworkInterfaceManager
operator|::
name|interfaceFromIndex
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|QList
argument_list|<
name|QSharedDataPointer
argument_list|<
name|QNetworkInterfacePrivate
argument_list|>
argument_list|>
name|interfaceList
init|=
name|allInterfaces
argument_list|()
decl_stmt|;
name|QList
argument_list|<
name|QSharedDataPointer
argument_list|<
name|QNetworkInterfacePrivate
argument_list|>
argument_list|>
operator|::
name|ConstIterator
name|it
init|=
name|interfaceList
operator|.
name|constBegin
argument_list|()
decl_stmt|;
for|for
control|(
init|;
name|it
operator|!=
name|interfaceList
operator|.
name|constEnd
argument_list|()
condition|;
operator|++
name|it
control|)
if|if
condition|(
operator|(
operator|*
name|it
operator|)
operator|->
name|index
operator|==
name|index
condition|)
return|return
operator|*
name|it
return|;
return|return
name|empty
return|;
block|}
end_function
begin_function
DECL|function|allInterfaces
name|QList
argument_list|<
name|QSharedDataPointer
argument_list|<
name|QNetworkInterfacePrivate
argument_list|>
argument_list|>
name|QNetworkInterfaceManager
operator|::
name|allInterfaces
parameter_list|()
block|{
name|QList
argument_list|<
name|QNetworkInterfacePrivate
modifier|*
argument_list|>
name|list
init|=
name|postProcess
argument_list|(
name|scan
argument_list|()
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|QSharedDataPointer
argument_list|<
name|QNetworkInterfacePrivate
argument_list|>
argument_list|>
name|result
decl_stmt|;
foreach|foreach
control|(
name|QNetworkInterfacePrivate
modifier|*
name|ptr
decl|,
name|list
control|)
name|result
operator|<<
name|QSharedDataPointer
argument_list|<
name|QNetworkInterfacePrivate
argument_list|>
argument_list|(
name|ptr
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|makeHwAddress
name|QString
name|QNetworkInterfacePrivate
operator|::
name|makeHwAddress
parameter_list|(
name|int
name|len
parameter_list|,
name|uchar
modifier|*
name|data
parameter_list|)
block|{
name|QString
name|result
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|i
condition|)
name|result
operator|+=
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|char
name|buf
index|[
literal|3
index|]
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
operator|&&
name|defined
argument_list|(
name|_MSC_VER
argument_list|)
operator|&&
name|_MSC_VER
operator|>=
literal|1400
name|sprintf_s
argument_list|(
name|buf
argument_list|,
literal|3
argument_list|,
literal|"%02hX"
argument_list|,
name|ushort
argument_list|(
name|data
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
else|#
directive|else
name|sprintf
argument_list|(
name|buf
argument_list|,
literal|"%02hX"
argument_list|,
name|ushort
argument_list|(
name|data
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|result
operator|+=
name|QLatin1String
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
end_function
begin_comment
comment|/*!     \class QNetworkAddressEntry     \brief The QNetworkAddressEntry class stores one IP address     supported by a network interface, along with its associated     netmask and broadcast address.      \since 4.2     \reentrant     \ingroup network      Each network interface can contain zero or more IP addresses, which     in turn can be associated with a netmask and/or a broadcast     address (depending on support from the operating system).      This class represents one such group. */
end_comment
begin_comment
comment|/*!     Constructs an empty QNetworkAddressEntry object. */
end_comment
begin_constructor
DECL|function|QNetworkAddressEntry
name|QNetworkAddressEntry
operator|::
name|QNetworkAddressEntry
parameter_list|()
member_init_list|:
name|d
argument_list|(
operator|new
name|QNetworkAddressEntryPrivate
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Constructs a QNetworkAddressEntry object that is a copy of the     object \a other. */
end_comment
begin_constructor
DECL|function|QNetworkAddressEntry
name|QNetworkAddressEntry
operator|::
name|QNetworkAddressEntry
parameter_list|(
specifier|const
name|QNetworkAddressEntry
modifier|&
name|other
parameter_list|)
member_init_list|:
name|d
argument_list|(
operator|new
name|QNetworkAddressEntryPrivate
argument_list|(
operator|*
name|other
operator|.
name|d
operator|.
name|data
argument_list|()
argument_list|)
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Makes a copy of the QNetworkAddressEntry object \a other. */
end_comment
begin_function
DECL|function|operator =
name|QNetworkAddressEntry
modifier|&
name|QNetworkAddressEntry
operator|::
name|operator
name|=
parameter_list|(
specifier|const
name|QNetworkAddressEntry
modifier|&
name|other
parameter_list|)
block|{
operator|*
name|d
operator|.
name|data
argument_list|()
operator|=
operator|*
name|other
operator|.
name|d
operator|.
name|data
argument_list|()
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_function
begin_comment
comment|/*!     Destroys this QNetworkAddressEntry object. */
end_comment
begin_destructor
DECL|function|~QNetworkAddressEntry
name|QNetworkAddressEntry
operator|::
name|~
name|QNetworkAddressEntry
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     Returns true if this network address entry is the same as \a     other. */
end_comment
begin_function
DECL|function|operator ==
name|bool
name|QNetworkAddressEntry
operator|::
name|operator
name|==
parameter_list|(
specifier|const
name|QNetworkAddressEntry
modifier|&
name|other
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|d
operator|==
name|other
operator|.
name|d
condition|)
return|return
literal|true
return|;
if|if
condition|(
operator|!
name|d
operator|||
operator|!
name|other
operator|.
name|d
condition|)
return|return
literal|false
return|;
return|return
name|d
operator|->
name|address
operator|==
name|other
operator|.
name|d
operator|->
name|address
operator|&&
name|d
operator|->
name|netmask
operator|==
name|other
operator|.
name|d
operator|->
name|netmask
operator|&&
name|d
operator|->
name|broadcast
operator|==
name|other
operator|.
name|d
operator|->
name|broadcast
return|;
block|}
end_function
begin_comment
comment|/*!     \fn bool QNetworkAddressEntry::operator!=(const QNetworkAddressEntry&other) const      Returns true if this network address entry is different from \a     other. */
end_comment
begin_comment
comment|/*!     This function returns one IPv4 or IPv6 address found, that was     found in a network interface. */
end_comment
begin_function
DECL|function|ip
name|QHostAddress
name|QNetworkAddressEntry
operator|::
name|ip
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|address
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the IP address the QNetworkAddressEntry object contains to \a     newIp. */
end_comment
begin_function
DECL|function|setIp
name|void
name|QNetworkAddressEntry
operator|::
name|setIp
parameter_list|(
specifier|const
name|QHostAddress
modifier|&
name|newIp
parameter_list|)
block|{
name|d
operator|->
name|address
operator|=
name|newIp
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the netmask associated with the IP address. The     netmask is expressed in the form of an IP address, such as     255.255.0.0.      For IPv6 addresses, the prefix length is converted to an address     where the number of bits set to 1 is equal to the prefix     length. For a prefix length of 64 bits (the most common value),     the netmask will be expressed as a QHostAddress holding the     address FFFF:FFFF:FFFF:FFFF::      \sa prefixLength() */
end_comment
begin_function
DECL|function|netmask
name|QHostAddress
name|QNetworkAddressEntry
operator|::
name|netmask
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|netmask
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the netmask that this QNetworkAddressEntry object contains to     \a newNetmask. Setting the netmask also sets the prefix length to     match the new netmask.      \sa setPrefixLength() */
end_comment
begin_function
DECL|function|setNetmask
name|void
name|QNetworkAddressEntry
operator|::
name|setNetmask
parameter_list|(
specifier|const
name|QHostAddress
modifier|&
name|newNetmask
parameter_list|)
block|{
if|if
condition|(
name|newNetmask
operator|.
name|protocol
argument_list|()
operator|!=
name|ip
argument_list|()
operator|.
name|protocol
argument_list|()
condition|)
block|{
name|d
operator|->
name|netmask
operator|=
name|QNetmaskAddress
argument_list|()
expr_stmt|;
return|return;
block|}
name|d
operator|->
name|netmask
operator|.
name|setAddress
argument_list|(
name|newNetmask
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.5     Returns the prefix length of this IP address. The prefix length     matches the number of bits set to 1 in the netmask (see     netmask()). For IPv4 addresses, the value is between 0 and 32. For     IPv6 addresses, it's contained between 0 and 128 and is the     preferred form of representing addresses.      This function returns -1 if the prefix length could not be     determined (i.e., netmask() returns a null QHostAddress()).      \sa netmask() */
end_comment
begin_function
DECL|function|prefixLength
name|int
name|QNetworkAddressEntry
operator|::
name|prefixLength
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|netmask
operator|.
name|prefixLength
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.5     Sets the prefix length of this IP address to \a length. The value     of \a length must be valid for this type of IP address: between 0     and 32 for IPv4 addresses, between 0 and 128 for IPv6     addresses. Setting to any invalid value is equivalent to setting     to -1, which means "no prefix length".      Setting the prefix length also sets the netmask (see netmask()).      \sa setNetmask() */
end_comment
begin_function
DECL|function|setPrefixLength
name|void
name|QNetworkAddressEntry
operator|::
name|setPrefixLength
parameter_list|(
name|int
name|length
parameter_list|)
block|{
name|d
operator|->
name|netmask
operator|.
name|setPrefixLength
argument_list|(
name|d
operator|->
name|address
operator|.
name|protocol
argument_list|()
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the broadcast address associated with the IPv4     address and netmask. It can usually be derived from those two by     setting to 1 the bits of the IP address where the netmask contains     a 0. (In other words, by bitwise-OR'ing the IP address with the     inverse of the netmask)      This member is always empty for IPv6 addresses, since the concept     of broadcast has been abandoned in that system in favor of     multicast. In particular, the group of hosts corresponding to all     the nodes in the local network can be reached by the "all-nodes"     special multicast group (address FF02::1). */
end_comment
begin_function
DECL|function|broadcast
name|QHostAddress
name|QNetworkAddressEntry
operator|::
name|broadcast
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|broadcast
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the broadcast IP address of this QNetworkAddressEntry object     to \a newBroadcast. */
end_comment
begin_function
DECL|function|setBroadcast
name|void
name|QNetworkAddressEntry
operator|::
name|setBroadcast
parameter_list|(
specifier|const
name|QHostAddress
modifier|&
name|newBroadcast
parameter_list|)
block|{
name|d
operator|->
name|broadcast
operator|=
name|newBroadcast
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \class QNetworkInterface     \brief The QNetworkInterface class provides a listing of the host's IP     addresses and network interfaces.      \since 4.2     \reentrant     \ingroup network      QNetworkInterface represents one network interface attached to the     host where the program is being run. Each network interface may     contain zero or more IP addresses, each of which is optionally     associated with a netmask and/or a broadcast address. The list of     such trios can be obtained with addressEntries(). Alternatively,     when the netmask or the broadcast addresses aren't necessary, use     the allAddresses() convenience function to obtain just the IP     addresses.      QNetworkInterface also reports the interface's hardware address with     hardwareAddress().      Not all operating systems support reporting all features. Only the     IPv4 addresses are guaranteed to be listed by this class in all     platforms. In particular, IPv6 address listing is only supported     on Windows XP and more recent versions, Linux, MacOS X and the     BSDs.      \sa QNetworkAddressEntry */
end_comment
begin_comment
comment|/*!     \enum QNetworkInterface::InterfaceFlag     Specifies the flags associated with this network interface. The     possible values are:      \value IsUp                 the network interface is active     \value IsRunning            the network interface has resources                                 allocated     \value CanBroadcast         the network interface works in                                 broadcast mode     \value IsLoopBack           the network interface is a loopback                                 interface: that is, it's a virtual                                 interface whose destination is the                                 host computer itself     \value IsPointToPoint       the network interface is a                                 point-to-point interface: that is,                                 there is one, single other address                                 that can be directly reached by it.     \value CanMulticast         the network interface supports                                 multicasting      Note that one network interface cannot be both broadcast-based and     point-to-point. */
end_comment
begin_comment
comment|/*!     Constructs an empty network interface object. */
end_comment
begin_constructor
DECL|function|QNetworkInterface
name|QNetworkInterface
operator|::
name|QNetworkInterface
parameter_list|()
member_init_list|:
name|d
argument_list|(
literal|0
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Frees the resources associated with the QNetworkInterface object. */
end_comment
begin_destructor
DECL|function|~QNetworkInterface
name|QNetworkInterface
operator|::
name|~
name|QNetworkInterface
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     Creates a copy of the QNetworkInterface object contained in \a     other. */
end_comment
begin_constructor
DECL|function|QNetworkInterface
name|QNetworkInterface
operator|::
name|QNetworkInterface
parameter_list|(
specifier|const
name|QNetworkInterface
modifier|&
name|other
parameter_list|)
member_init_list|:
name|d
argument_list|(
name|other
operator|.
name|d
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Copies the contents of the QNetworkInterface object contained in \a     other into this one. */
end_comment
begin_function
DECL|function|operator =
name|QNetworkInterface
modifier|&
name|QNetworkInterface
operator|::
name|operator
name|=
parameter_list|(
specifier|const
name|QNetworkInterface
modifier|&
name|other
parameter_list|)
block|{
name|d
operator|=
name|other
operator|.
name|d
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_function
begin_comment
comment|/*!     Returns true if this QNetworkInterface object contains valid     information about a network interface. */
end_comment
begin_function
DECL|function|isValid
name|bool
name|QNetworkInterface
operator|::
name|isValid
parameter_list|()
specifier|const
block|{
return|return
operator|!
name|name
argument_list|()
operator|.
name|isEmpty
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.5     Returns the interface system index, if known. This is an integer     assigned by the operating system to identify this interface and it     generally doesn't change. It matches the scope ID field in IPv6     addresses.      If the index isn't known, this function returns 0. */
end_comment
begin_function
DECL|function|index
name|int
name|QNetworkInterface
operator|::
name|index
parameter_list|()
specifier|const
block|{
return|return
name|d
condition|?
name|d
operator|->
name|index
else|:
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the name of this network interface. On Unix systems, this     is a string containing the type of the interface and optionally a     sequence number, such as "eth0", "lo" or "pcn0". On Windows, it's     an internal ID that cannot be changed by the user. */
end_comment
begin_function
DECL|function|name
name|QString
name|QNetworkInterface
operator|::
name|name
parameter_list|()
specifier|const
block|{
return|return
name|d
condition|?
name|d
operator|->
name|name
else|:
name|QString
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.5      Returns the human-readable name of this network interface on     Windows, such as "Local Area Connection", if the name could be     determined. If it couldn't, this function returns the same as     name(). The human-readable name is a name that the user can modify     in the Windows Control Panel, so it may change during the     execution of the program.      On Unix, this function currently always returns the same as     name(), since Unix systems don't store a configuration for     human-readable names. */
end_comment
begin_function
DECL|function|humanReadableName
name|QString
name|QNetworkInterface
operator|::
name|humanReadableName
parameter_list|()
specifier|const
block|{
return|return
name|d
condition|?
operator|!
name|d
operator|->
name|friendlyName
operator|.
name|isEmpty
argument_list|()
condition|?
name|d
operator|->
name|friendlyName
else|:
name|name
argument_list|()
else|:
name|QString
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the flags associated with this network interface. */
end_comment
begin_function
DECL|function|flags
name|QNetworkInterface
operator|::
name|InterfaceFlags
name|QNetworkInterface
operator|::
name|flags
parameter_list|()
specifier|const
block|{
return|return
name|d
condition|?
name|d
operator|->
name|flags
else|:
name|InterfaceFlags
argument_list|(
literal|0
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the low-level hardware address for this interface. On     Ethernet interfaces, this will be a MAC address in string     representation, separated by colons.      Other interface types may have other types of hardware     addresses. Implementations should not depend on this function     returning a valid MAC address. */
end_comment
begin_function
DECL|function|hardwareAddress
name|QString
name|QNetworkInterface
operator|::
name|hardwareAddress
parameter_list|()
specifier|const
block|{
return|return
name|d
condition|?
name|d
operator|->
name|hardwareAddress
else|:
name|QString
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the list of IP addresses that this interface possesses     along with their associated netmasks and broadcast addresses.      If the netmask or broadcast address information is not necessary,     you can call the allAddresses() function to obtain just the IP     addresses. */
end_comment
begin_function
DECL|function|addressEntries
name|QList
argument_list|<
name|QNetworkAddressEntry
argument_list|>
name|QNetworkInterface
operator|::
name|addressEntries
parameter_list|()
specifier|const
block|{
return|return
name|d
condition|?
name|d
operator|->
name|addressEntries
else|:
name|QList
argument_list|<
name|QNetworkAddressEntry
argument_list|>
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns a QNetworkInterface object for the interface named \a     name. If no such interface exists, this function returns an     invalid QNetworkInterface object.      \sa name(), isValid() */
end_comment
begin_function
DECL|function|interfaceFromName
name|QNetworkInterface
name|QNetworkInterface
operator|::
name|interfaceFromName
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
block|{
name|QNetworkInterface
name|result
decl_stmt|;
name|result
operator|.
name|d
operator|=
name|manager
argument_list|()
operator|->
name|interfaceFromName
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_comment
comment|/*!     Returns a QNetworkInterface object for the interface whose internal     ID is \a index. Network interfaces have a unique identifier called     the "interface index" to distinguish it from other interfaces on     the system. Often, this value is assigned progressively and     interfaces being removed and then added again get a different     value every time.      This index is also found in the IPv6 address' scope ID field. */
end_comment
begin_function
DECL|function|interfaceFromIndex
name|QNetworkInterface
name|QNetworkInterface
operator|::
name|interfaceFromIndex
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|QNetworkInterface
name|result
decl_stmt|;
name|result
operator|.
name|d
operator|=
name|manager
argument_list|()
operator|->
name|interfaceFromIndex
argument_list|(
name|index
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_comment
comment|/*!     Returns a listing of all the network interfaces found on the host     machine. */
end_comment
begin_function
DECL|function|allInterfaces
name|QList
argument_list|<
name|QNetworkInterface
argument_list|>
name|QNetworkInterface
operator|::
name|allInterfaces
parameter_list|()
block|{
name|QList
argument_list|<
name|QSharedDataPointer
argument_list|<
name|QNetworkInterfacePrivate
argument_list|>
argument_list|>
name|privs
init|=
name|manager
argument_list|()
operator|->
name|allInterfaces
argument_list|()
decl_stmt|;
name|QList
argument_list|<
name|QNetworkInterface
argument_list|>
name|result
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QSharedDataPointer
argument_list|<
name|QNetworkInterfacePrivate
argument_list|>
modifier|&
name|p
decl|,
name|privs
control|)
block|{
name|QNetworkInterface
name|item
decl_stmt|;
name|item
operator|.
name|d
operator|=
name|p
expr_stmt|;
name|result
operator|<<
name|item
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
end_function
begin_comment
comment|/*!     This convenience function returns all IP addresses found on the     host machine. It is equivalent to calling addressEntries() on all the     objects returned by allInterfaces() to obtain lists of QHostAddress     objects then calling QHostAddress::ip() on each of these. */
end_comment
begin_function
DECL|function|allAddresses
name|QList
argument_list|<
name|QHostAddress
argument_list|>
name|QNetworkInterface
operator|::
name|allAddresses
parameter_list|()
block|{
name|QList
argument_list|<
name|QSharedDataPointer
argument_list|<
name|QNetworkInterfacePrivate
argument_list|>
argument_list|>
name|privs
init|=
name|manager
argument_list|()
operator|->
name|allInterfaces
argument_list|()
decl_stmt|;
name|QList
argument_list|<
name|QHostAddress
argument_list|>
name|result
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QSharedDataPointer
argument_list|<
name|QNetworkInterfacePrivate
argument_list|>
modifier|&
name|p
decl|,
name|privs
control|)
block|{
foreach|foreach
control|(
specifier|const
name|QNetworkAddressEntry
modifier|&
name|entry
decl|,
name|p
operator|->
name|addressEntries
control|)
name|result
operator|+=
name|entry
operator|.
name|ip
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DEBUG_STREAM
end_ifndef
begin_function
DECL|function|flagsDebug
specifier|static
specifier|inline
name|QDebug
name|flagsDebug
parameter_list|(
name|QDebug
name|debug
parameter_list|,
name|QNetworkInterface
operator|::
name|InterfaceFlags
name|flags
parameter_list|)
block|{
if|if
condition|(
name|flags
operator|&
name|QNetworkInterface
operator|::
name|IsUp
condition|)
name|debug
operator|.
name|nospace
argument_list|()
operator|<<
literal|"IsUp "
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|QNetworkInterface
operator|::
name|IsRunning
condition|)
name|debug
operator|.
name|nospace
argument_list|()
operator|<<
literal|"IsRunning "
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|QNetworkInterface
operator|::
name|CanBroadcast
condition|)
name|debug
operator|.
name|nospace
argument_list|()
operator|<<
literal|"CanBroadcast "
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|QNetworkInterface
operator|::
name|IsLoopBack
condition|)
name|debug
operator|.
name|nospace
argument_list|()
operator|<<
literal|"IsLoopBack "
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|QNetworkInterface
operator|::
name|IsPointToPoint
condition|)
name|debug
operator|.
name|nospace
argument_list|()
operator|<<
literal|"IsPointToPoint "
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|QNetworkInterface
operator|::
name|CanMulticast
condition|)
name|debug
operator|.
name|nospace
argument_list|()
operator|<<
literal|"CanMulticast "
expr_stmt|;
return|return
name|debug
operator|.
name|nospace
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|operator <<
specifier|static
specifier|inline
name|QDebug
name|operator
name|<<
parameter_list|(
name|QDebug
name|debug
parameter_list|,
specifier|const
name|QNetworkAddressEntry
modifier|&
name|entry
parameter_list|)
block|{
name|debug
operator|.
name|nospace
argument_list|()
operator|<<
literal|"(address = "
operator|<<
name|entry
operator|.
name|ip
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|entry
operator|.
name|netmask
argument_list|()
operator|.
name|isNull
argument_list|()
condition|)
name|debug
operator|.
name|nospace
argument_list|()
operator|<<
literal|", netmask = "
operator|<<
name|entry
operator|.
name|netmask
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|entry
operator|.
name|broadcast
argument_list|()
operator|.
name|isNull
argument_list|()
condition|)
name|debug
operator|.
name|nospace
argument_list|()
operator|<<
literal|", broadcast = "
operator|<<
name|entry
operator|.
name|broadcast
argument_list|()
expr_stmt|;
name|debug
operator|.
name|nospace
argument_list|()
operator|<<
literal|')'
expr_stmt|;
return|return
name|debug
operator|.
name|space
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|operator <<
name|QDebug
name|operator
name|<<
parameter_list|(
name|QDebug
name|debug
parameter_list|,
specifier|const
name|QNetworkInterface
modifier|&
name|networkInterface
parameter_list|)
block|{
name|debug
operator|.
name|nospace
argument_list|()
operator|<<
literal|"QNetworkInterface(name = "
operator|<<
name|networkInterface
operator|.
name|name
argument_list|()
operator|<<
literal|", hardware address = "
operator|<<
name|networkInterface
operator|.
name|hardwareAddress
argument_list|()
operator|<<
literal|", flags = "
expr_stmt|;
name|flagsDebug
argument_list|(
name|debug
argument_list|,
name|networkInterface
operator|.
name|flags
argument_list|()
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_CC_RVCT
argument_list|)
comment|// RVCT gets confused with<< networkInterface.addressEntries(), reason unknown.
name|debug
operator|.
name|nospace
argument_list|()
operator|<<
literal|")\n"
expr_stmt|;
else|#
directive|else
name|debug
operator|.
name|nospace
argument_list|()
operator|<<
literal|", entries = "
operator|<<
name|networkInterface
operator|.
name|addressEntries
argument_list|()
operator|<<
literal|")\n"
expr_stmt|;
endif|#
directive|endif
return|return
name|debug
operator|.
name|space
argument_list|()
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_NETWORKINTERFACE
end_comment
end_unit
