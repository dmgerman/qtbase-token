begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtNetwork module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QNETWORKINTERFACEPRIVATE_H
end_ifndef
begin_define
DECL|macro|QNETWORKINTERFACEPRIVATE_H
define|#
directive|define
name|QNETWORKINTERFACEPRIVATE_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists for the convenience
end_comment
begin_comment
comment|// of the QLibrary class.  This header file may change from
end_comment
begin_comment
comment|// version to version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|<QtCore/qatomic.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qlist.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qreadwritelock.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qstring.h>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/qhostaddress.h>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/qabstractsocket.h>
end_include
begin_include
include|#
directive|include
file|<private/qhostaddress_p.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_NETWORKINTERFACE
end_ifndef
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
name|class
name|QNetworkAddressEntryPrivate
block|{
name|public
label|:
name|QHostAddress
name|address
decl_stmt|;
name|QNetmaskAddress
name|netmask
decl_stmt|;
name|QHostAddress
name|broadcast
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
name|class
name|QNetworkInterfacePrivate
range|:
name|public
name|QSharedData
block|{
name|public
operator|:
name|QNetworkInterfacePrivate
argument_list|()
operator|:
name|index
argument_list|(
literal|0
argument_list|)
block|,
name|flags
argument_list|(
literal|0
argument_list|)
block|{ }
operator|~
name|QNetworkInterfacePrivate
argument_list|()
block|{ }
name|int
name|index
block|;
comment|// interface index, if know
name|QNetworkInterface
operator|::
name|InterfaceFlags
name|flags
block|;
name|QString
name|name
block|;
name|QString
name|friendlyName
block|;
name|QString
name|hardwareAddress
block|;
name|QList
operator|<
name|QNetworkAddressEntry
operator|>
name|addressEntries
block|;
specifier|static
name|QString
name|makeHwAddress
argument_list|(
argument|int len
argument_list|,
argument|uchar *data
argument_list|)
block|;
name|private
operator|:
comment|// disallow copying -- avoid detaching
name|QNetworkInterfacePrivate
operator|&
name|operator
operator|=
operator|(
specifier|const
name|QNetworkInterfacePrivate
operator|&
name|other
operator|)
block|;
name|QNetworkInterfacePrivate
argument_list|(
specifier|const
name|QNetworkInterfacePrivate
operator|&
name|other
argument_list|)
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QNetworkInterfaceManager
block|{
name|public
label|:
name|QNetworkInterfaceManager
argument_list|()
expr_stmt|;
operator|~
name|QNetworkInterfaceManager
argument_list|()
expr_stmt|;
name|QSharedDataPointer
operator|<
name|QNetworkInterfacePrivate
operator|>
name|interfaceFromName
argument_list|(
specifier|const
name|QString
operator|&
name|name
argument_list|)
expr_stmt|;
name|QSharedDataPointer
operator|<
name|QNetworkInterfacePrivate
operator|>
name|interfaceFromIndex
argument_list|(
argument|int index
argument_list|)
expr_stmt|;
name|QList
operator|<
name|QSharedDataPointer
operator|<
name|QNetworkInterfacePrivate
operator|>
expr|>
name|allInterfaces
argument_list|()
expr_stmt|;
specifier|static
name|uint
name|interfaceIndexFromName
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
function_decl|;
specifier|static
name|QString
name|interfaceNameFromIndex
parameter_list|(
name|uint
name|index
parameter_list|)
function_decl|;
comment|// convenience:
name|QSharedDataPointer
operator|<
name|QNetworkInterfacePrivate
operator|>
name|empty
expr_stmt|;
name|private
label|:
name|QList
operator|<
name|QNetworkInterfacePrivate
operator|*
operator|>
name|scan
argument_list|()
expr_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_NETWORKINTERFACE
end_comment
begin_endif
endif|#
directive|endif
end_endif
end_unit
