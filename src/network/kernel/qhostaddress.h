begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Copyright (C) 2016 Intel Corporation. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the QtNetwork module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QHOSTADDRESS_H
end_ifndef
begin_define
DECL|macro|QHOSTADDRESS_H
define|#
directive|define
name|QHOSTADDRESS_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qpair.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qstring.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qscopedpointer.h>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/qabstractsocket.h>
end_include
begin_struct_decl
struct_decl|struct
name|sockaddr
struct_decl|;
end_struct_decl
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QHostAddressPrivate
name|class
name|QHostAddressPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_NETWORK_EXPORT
name|QIPv6Address
block|{
name|public
label|:
specifier|inline
name|quint8
modifier|&
name|operator
function|[]
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|c
index|[
name|index
index|]
return|;
block|}
specifier|inline
name|quint8
name|operator
index|[]
argument_list|(
name|int
name|index
argument_list|)
decl|const
block|{
return|return
name|c
index|[
name|index
index|]
return|;
block|}
name|quint8
name|c
index|[
literal|16
index|]
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_typedef
DECL|typedef|Q_IPV6ADDR
typedef|typedef
name|QIPv6Address
name|Q_IPV6ADDR
typedef|;
end_typedef
begin_decl_stmt
DECL|variable|QHostAddress
name|class
name|QHostAddress
decl_stmt|;
end_decl_stmt
begin_comment
comment|// qHash is a friend, but we can't use default arguments for friends (รยง8.3.6.4)
end_comment
begin_function_decl
name|Q_NETWORK_EXPORT
name|uint
name|qHash
parameter_list|(
specifier|const
name|QHostAddress
modifier|&
name|key
parameter_list|,
name|uint
name|seed
init|=
literal|0
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
name|class
name|Q_NETWORK_EXPORT
name|QHostAddress
block|{
name|public
label|:
enum|enum
name|SpecialAddress
block|{
name|Null
block|,
name|Broadcast
block|,
name|LocalHost
block|,
name|LocalHostIPv6
block|,
name|Any
block|,
name|AnyIPv6
block|,
name|AnyIPv4
block|}
enum|;
name|QHostAddress
argument_list|()
expr_stmt|;
name|explicit
name|QHostAddress
parameter_list|(
name|quint32
name|ip4Addr
parameter_list|)
function_decl|;
name|explicit
name|QHostAddress
parameter_list|(
name|quint8
modifier|*
name|ip6Addr
parameter_list|)
function_decl|;
comment|// ### Qt 6: remove me
name|explicit
name|QHostAddress
parameter_list|(
specifier|const
name|quint8
modifier|*
name|ip6Addr
parameter_list|)
function_decl|;
name|explicit
name|QHostAddress
parameter_list|(
specifier|const
name|Q_IPV6ADDR
modifier|&
name|ip6Addr
parameter_list|)
function_decl|;
name|explicit
name|QHostAddress
parameter_list|(
specifier|const
name|sockaddr
modifier|*
name|address
parameter_list|)
function_decl|;
name|explicit
name|QHostAddress
parameter_list|(
specifier|const
name|QString
modifier|&
name|address
parameter_list|)
function_decl|;
name|QHostAddress
argument_list|(
specifier|const
name|QHostAddress
operator|&
name|copy
argument_list|)
expr_stmt|;
name|QHostAddress
argument_list|(
argument|SpecialAddress address
argument_list|)
empty_stmt|;
operator|~
name|QHostAddress
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_COMPILER_RVALUE_REFS
name|QHostAddress
modifier|&
name|operator
init|=
operator|(
name|QHostAddress
operator|&&
name|other
operator|)
name|Q_DECL_NOTHROW
block|{
name|swap
argument_list|(
name|other
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
endif|#
directive|endif
name|QHostAddress
modifier|&
name|operator
init|=
operator|(
specifier|const
name|QHostAddress
operator|&
name|other
operator|)
decl_stmt|;
name|QHostAddress
modifier|&
name|operator
init|=
operator|(
specifier|const
name|QString
operator|&
name|address
operator|)
decl_stmt|;
name|void
name|swap
parameter_list|(
name|QHostAddress
modifier|&
name|other
parameter_list|)
function|Q_DECL_NOTHROW
block|{
name|d
operator|.
name|swap
argument_list|(
name|other
operator|.
name|d
argument_list|)
expr_stmt|;
block|}
name|void
name|setAddress
parameter_list|(
name|quint32
name|ip4Addr
parameter_list|)
function_decl|;
name|void
name|setAddress
parameter_list|(
name|quint8
modifier|*
name|ip6Addr
parameter_list|)
function_decl|;
comment|// ### Qt 6: remove me
name|void
name|setAddress
parameter_list|(
specifier|const
name|quint8
modifier|*
name|ip6Addr
parameter_list|)
function_decl|;
name|void
name|setAddress
parameter_list|(
specifier|const
name|Q_IPV6ADDR
modifier|&
name|ip6Addr
parameter_list|)
function_decl|;
name|void
name|setAddress
parameter_list|(
specifier|const
name|sockaddr
modifier|*
name|address
parameter_list|)
function_decl|;
name|bool
name|setAddress
parameter_list|(
specifier|const
name|QString
modifier|&
name|address
parameter_list|)
function_decl|;
name|QAbstractSocket
operator|::
name|NetworkLayerProtocol
name|protocol
argument_list|()
specifier|const
expr_stmt|;
name|quint32
name|toIPv4Address
argument_list|()
specifier|const
expr_stmt|;
comment|// ### Qt6: merge with next overload
name|quint32
name|toIPv4Address
argument_list|(
name|bool
operator|*
name|ok
argument_list|)
decl|const
decl_stmt|;
name|Q_IPV6ADDR
name|toIPv6Address
argument_list|()
specifier|const
expr_stmt|;
name|QString
name|toString
argument_list|()
specifier|const
expr_stmt|;
name|QString
name|scopeId
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setScopeId
parameter_list|(
specifier|const
name|QString
modifier|&
name|id
parameter_list|)
function_decl|;
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QHostAddress
operator|&
name|address
operator|)
specifier|const
expr_stmt|;
name|bool
name|operator
operator|==
operator|(
name|SpecialAddress
name|address
operator|)
specifier|const
expr_stmt|;
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|QHostAddress
operator|&
name|address
operator|)
specifier|const
block|{
return|return
operator|!
name|operator
operator|==
operator|(
name|address
operator|)
return|;
block|}
specifier|inline
name|bool
name|operator
operator|!=
operator|(
name|SpecialAddress
name|address
operator|)
specifier|const
block|{
return|return
operator|!
name|operator
operator|==
operator|(
name|address
operator|)
return|;
block|}
name|bool
name|isNull
argument_list|()
specifier|const
expr_stmt|;
name|void
name|clear
parameter_list|()
function_decl|;
name|bool
name|isInSubnet
argument_list|(
specifier|const
name|QHostAddress
operator|&
name|subnet
argument_list|,
name|int
name|netmask
argument_list|)
decl|const
decl_stmt|;
name|bool
name|isInSubnet
argument_list|(
specifier|const
name|QPair
operator|<
name|QHostAddress
argument_list|,
name|int
operator|>
operator|&
name|subnet
argument_list|)
decl|const
decl_stmt|;
name|bool
name|isLoopback
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|isMulticast
argument_list|()
specifier|const
expr_stmt|;
specifier|static
name|QPair
operator|<
name|QHostAddress
operator|,
name|int
operator|>
name|parseSubnet
argument_list|(
specifier|const
name|QString
operator|&
name|subnet
argument_list|)
expr_stmt|;
name|friend
name|Q_NETWORK_EXPORT
name|uint
name|qHash
parameter_list|(
specifier|const
name|QHostAddress
modifier|&
name|key
parameter_list|,
name|uint
name|seed
parameter_list|)
function_decl|;
name|protected
label|:
name|QScopedPointer
operator|<
name|QHostAddressPrivate
operator|>
name|d
expr_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_macro
DECL|function|Q_DECLARE_SHARED_NOT_MOVABLE_UNTIL_QT6
name|Q_DECLARE_SHARED_NOT_MOVABLE_UNTIL_QT6
argument_list|(
argument|QHostAddress
argument_list|)
end_macro
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|==
operator|(
name|QHostAddress
operator|::
name|SpecialAddress
name|address1
operator|,
specifier|const
name|QHostAddress
operator|&
name|address2
operator|)
block|{
return|return
name|address2
operator|==
name|address1
return|;
block|}
end_expr_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DEBUG_STREAM
end_ifndef
begin_expr_stmt
name|Q_NETWORK_EXPORT
name|QDebug
name|operator
operator|<<
operator|(
name|QDebug
operator|,
specifier|const
name|QHostAddress
operator|&
operator|)
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DATASTREAM
end_ifndef
begin_expr_stmt
name|Q_NETWORK_EXPORT
name|QDataStream
operator|&
name|operator
operator|<<
operator|(
name|QDataStream
operator|&
operator|,
specifier|const
name|QHostAddress
operator|&
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_NETWORK_EXPORT
name|QDataStream
operator|&
name|operator
operator|>>
operator|(
name|QDataStream
operator|&
operator|,
name|QHostAddress
operator|&
operator|)
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QHOSTADDRESS_H
end_comment
end_unit
