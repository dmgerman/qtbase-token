begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Research In Motion ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtNetwork module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|/**  * Some notes about the code:  *  * ** It is assumed that the system proxies are for url based requests  *  ie. HTTP/HTTPS based.  */
end_comment
begin_include
include|#
directive|include
file|<QtNetwork/qnetworkproxy.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_NETWORKPROXY
end_ifndef
begin_include
include|#
directive|include
file|<QtCore/qflags.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qurl.h>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/qnetworkconfiguration.h>
end_include
begin_include
include|#
directive|include
file|<bps/netstatus.h>
end_include
begin_include
include|#
directive|include
file|<errno.h>
end_include
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|systemProxyForQuery
name|QList
argument_list|<
name|QNetworkProxy
argument_list|>
name|QNetworkProxyFactory
operator|::
name|systemProxyForQuery
parameter_list|(
specifier|const
name|QNetworkProxyQuery
modifier|&
name|query
parameter_list|)
block|{
name|QNetworkProxy
name|proxy
decl_stmt|;
if|if
condition|(
name|query
operator|.
name|queryType
argument_list|()
operator|!=
name|QNetworkProxyQuery
operator|::
name|UrlRequest
condition|)
block|{
name|qWarning
argument_list|(
literal|"Unsupported query type: %d"
argument_list|,
name|query
operator|.
name|queryType
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|QList
argument_list|<
name|QNetworkProxy
argument_list|>
argument_list|()
operator|<<
name|QNetworkProxy
argument_list|(
name|QNetworkProxy
operator|::
name|NoProxy
argument_list|)
return|;
block|}
name|QUrl
name|url
init|=
name|query
operator|.
name|url
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|url
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"Invalid URL: %s"
argument_list|,
name|qPrintable
argument_list|(
name|url
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|QList
argument_list|<
name|QNetworkProxy
argument_list|>
argument_list|()
operator|<<
name|QNetworkProxy
argument_list|(
name|QNetworkProxy
operator|::
name|NoProxy
argument_list|)
return|;
block|}
name|netstatus_proxy_details_t
name|details
decl_stmt|;
name|memset
argument_list|(
operator|&
name|details
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|netstatus_proxy_details_t
argument_list|)
argument_list|)
expr_stmt|;
if|#
directive|if
name|BPS_VERSION
operator|>=
literal|3001001
name|QByteArray
name|bUrl
argument_list|(
name|url
operator|.
name|toEncoded
argument_list|()
argument_list|)
decl_stmt|;
name|QString
name|sInterface
argument_list|(
name|query
operator|.
name|networkConfiguration
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|QByteArray
name|bInterface
decl_stmt|;
if|if
condition|(
operator|!
name|sInterface
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|query
operator|.
name|networkConfiguration
argument_list|()
operator|.
name|type
argument_list|()
operator|!=
name|QNetworkConfiguration
operator|::
name|InternetAccessPoint
condition|)
block|{
name|qWarning
argument_list|(
literal|"Unsupported configuration type: %d"
argument_list|,
name|query
operator|.
name|networkConfiguration
argument_list|()
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|QList
argument_list|<
name|QNetworkProxy
argument_list|>
argument_list|()
operator|<<
name|QNetworkProxy
argument_list|(
name|QNetworkProxy
operator|::
name|NoProxy
argument_list|)
return|;
block|}
name|bInterface
operator|=
name|sInterface
operator|.
name|toUtf8
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|netstatus_get_proxy_details_for_url
argument_list|(
name|bUrl
operator|.
name|constData
argument_list|()
argument_list|,
operator|(
name|bInterface
operator|.
name|isEmpty
argument_list|()
condition|?
name|NULL
else|:
name|bInterface
operator|.
name|constData
argument_list|()
operator|)
argument_list|,
operator|&
name|details
argument_list|)
operator|!=
name|BPS_SUCCESS
condition|)
block|{
name|qWarning
argument_list|(
literal|"netstatus_get_proxy_details_for_url failed! errno: %d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
return|return
name|QList
argument_list|<
name|QNetworkProxy
argument_list|>
argument_list|()
operator|<<
name|QNetworkProxy
argument_list|(
name|QNetworkProxy
operator|::
name|NoProxy
argument_list|)
return|;
block|}
else|#
directive|else
if|if
condition|(
name|netstatus_get_proxy_details
argument_list|(
operator|&
name|details
argument_list|)
operator|!=
name|BPS_SUCCESS
condition|)
block|{
name|qWarning
argument_list|(
literal|"netstatus_get_proxy_details failed! errno: %d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
return|return
name|QList
argument_list|<
name|QNetworkProxy
argument_list|>
argument_list|()
operator|<<
name|QNetworkProxy
argument_list|(
name|QNetworkProxy
operator|::
name|NoProxy
argument_list|)
return|;
block|}
endif|#
directive|endif
if|if
condition|(
name|details
operator|.
name|http_proxy_host
operator|==
name|NULL
condition|)
block|{
comment|// No proxy
name|netstatus_free_proxy_details
argument_list|(
operator|&
name|details
argument_list|)
expr_stmt|;
return|return
name|QList
argument_list|<
name|QNetworkProxy
argument_list|>
argument_list|()
operator|<<
name|QNetworkProxy
argument_list|(
name|QNetworkProxy
operator|::
name|NoProxy
argument_list|)
return|;
block|}
name|QString
name|protocol
init|=
name|query
operator|.
name|protocolTag
argument_list|()
decl_stmt|;
if|if
condition|(
name|protocol
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"http"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
condition|)
block|{
comment|// http, https
name|proxy
operator|.
name|setType
argument_list|(
operator|(
name|QNetworkProxy
operator|::
name|HttpProxy
operator|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|protocol
operator|==
name|QLatin1String
argument_list|(
literal|"ftp"
argument_list|)
condition|)
block|{
name|proxy
operator|.
name|setType
argument_list|(
name|QNetworkProxy
operator|::
name|FtpCachingProxy
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// assume http proxy
name|qDebug
argument_list|(
literal|"Proxy type: %s assumed to be http proxy"
argument_list|,
name|qPrintable
argument_list|(
name|protocol
argument_list|)
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|setType
argument_list|(
operator|(
name|QNetworkProxy
operator|::
name|HttpProxy
operator|)
argument_list|)
expr_stmt|;
block|}
comment|// Set host
comment|// Note: ftp and https proxy type fields *are* obsolete.
comment|// The user interface allows only one host/port which gets duplicated
comment|// to all proxy type fields.
name|proxy
operator|.
name|setHostName
argument_list|(
name|QString
operator|::
name|fromUtf8
argument_list|(
name|details
operator|.
name|http_proxy_host
argument_list|)
argument_list|)
expr_stmt|;
comment|// Set port
name|proxy
operator|.
name|setPort
argument_list|(
name|details
operator|.
name|http_proxy_port
argument_list|)
expr_stmt|;
comment|// Set username
if|if
condition|(
name|details
operator|.
name|http_proxy_login_user
condition|)
name|proxy
operator|.
name|setUser
argument_list|(
name|QString
operator|::
name|fromUtf8
argument_list|(
name|details
operator|.
name|http_proxy_login_user
argument_list|)
argument_list|)
expr_stmt|;
comment|// Set password
if|if
condition|(
name|details
operator|.
name|http_proxy_login_password
condition|)
name|proxy
operator|.
name|setPassword
argument_list|(
name|QString
operator|::
name|fromUtf8
argument_list|(
name|details
operator|.
name|http_proxy_login_password
argument_list|)
argument_list|)
expr_stmt|;
name|netstatus_free_proxy_details
argument_list|(
operator|&
name|details
argument_list|)
expr_stmt|;
return|return
name|QList
argument_list|<
name|QNetworkProxy
argument_list|>
argument_list|()
operator|<<
name|proxy
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
end_unit
