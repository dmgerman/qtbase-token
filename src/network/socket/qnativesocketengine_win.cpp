begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtNetwork module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<winsock2.h>
end_include
begin_include
include|#
directive|include
file|<ws2tcpip.h>
end_include
begin_include
include|#
directive|include
file|"qnativesocketengine_p.h"
end_include
begin_include
include|#
directive|include
file|<qabstracteventdispatcher.h>
end_include
begin_include
include|#
directive|include
file|<qsocketnotifier.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<qdatetime.h>
end_include
begin_include
include|#
directive|include
file|<qnetworkinterface.h>
end_include
begin_comment
comment|//#define QNATIVESOCKETENGINE_DEBUG
end_comment
begin_if
if|#
directive|if
name|defined
argument_list|(
name|QNATIVESOCKETENGINE_DEBUG
argument_list|)
end_if
begin_include
include|#
directive|include
file|<qstring.h>
end_include
begin_include
include|#
directive|include
file|<qbytearray.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_function
name|QT_BEGIN_NAMESPACE
if|#
directive|if
name|defined
argument_list|(
name|QNATIVESOCKETENGINE_DEBUG
argument_list|)
DECL|function|verboseWSErrorDebug
name|void
name|verboseWSErrorDebug
parameter_list|(
name|int
name|r
parameter_list|)
block|{
switch|switch
condition|(
name|r
condition|)
block|{
case|case
name|WSANOTINITIALISED
case|:
name|qDebug
argument_list|(
literal|"WSA error : WSANOTINITIALISED"
argument_list|)
expr_stmt|;
break|break;
case|case
name|WSAEINTR
case|:
name|qDebug
argument_list|(
literal|"WSA error : WSAEINTR"
argument_list|)
expr_stmt|;
break|break;
case|case
name|WSAEBADF
case|:
name|qDebug
argument_list|(
literal|"WSA error : WSAEBADF"
argument_list|)
expr_stmt|;
break|break;
case|case
name|WSAEACCES
case|:
name|qDebug
argument_list|(
literal|"WSA error : WSAEACCES"
argument_list|)
expr_stmt|;
break|break;
case|case
name|WSAEFAULT
case|:
name|qDebug
argument_list|(
literal|"WSA error : WSAEFAULT"
argument_list|)
expr_stmt|;
break|break;
case|case
name|WSAEINVAL
case|:
name|qDebug
argument_list|(
literal|"WSA error : WSAEINVAL"
argument_list|)
expr_stmt|;
break|break;
case|case
name|WSAEMFILE
case|:
name|qDebug
argument_list|(
literal|"WSA error : WSAEMFILE"
argument_list|)
expr_stmt|;
break|break;
case|case
name|WSAEWOULDBLOCK
case|:
name|qDebug
argument_list|(
literal|"WSA error : WSAEWOULDBLOCK"
argument_list|)
expr_stmt|;
break|break;
case|case
name|WSAEINPROGRESS
case|:
name|qDebug
argument_list|(
literal|"WSA error : WSAEINPROGRESS"
argument_list|)
expr_stmt|;
break|break;
case|case
name|WSAEALREADY
case|:
name|qDebug
argument_list|(
literal|"WSA error : WSAEALREADY"
argument_list|)
expr_stmt|;
break|break;
case|case
name|WSAENOTSOCK
case|:
name|qDebug
argument_list|(
literal|"WSA error : WSAENOTSOCK"
argument_list|)
expr_stmt|;
break|break;
case|case
name|WSAEDESTADDRREQ
case|:
name|qDebug
argument_list|(
literal|"WSA error : WSAEDESTADDRREQ"
argument_list|)
expr_stmt|;
break|break;
case|case
name|WSAEMSGSIZE
case|:
name|qDebug
argument_list|(
literal|"WSA error : WSAEMSGSIZE"
argument_list|)
expr_stmt|;
break|break;
case|case
name|WSAEPROTOTYPE
case|:
name|qDebug
argument_list|(
literal|"WSA error : WSAEPROTOTYPE"
argument_list|)
expr_stmt|;
break|break;
case|case
name|WSAENOPROTOOPT
case|:
name|qDebug
argument_list|(
literal|"WSA error : WSAENOPROTOOPT"
argument_list|)
expr_stmt|;
break|break;
case|case
name|WSAEPROTONOSUPPORT
case|:
name|qDebug
argument_list|(
literal|"WSA error : WSAEPROTONOSUPPORT"
argument_list|)
expr_stmt|;
break|break;
case|case
name|WSAESOCKTNOSUPPORT
case|:
name|qDebug
argument_list|(
literal|"WSA error : WSAESOCKTNOSUPPORT"
argument_list|)
expr_stmt|;
break|break;
case|case
name|WSAEOPNOTSUPP
case|:
name|qDebug
argument_list|(
literal|"WSA error : WSAEOPNOTSUPP"
argument_list|)
expr_stmt|;
break|break;
case|case
name|WSAEPFNOSUPPORT
case|:
name|qDebug
argument_list|(
literal|"WSA error : WSAEPFNOSUPPORT"
argument_list|)
expr_stmt|;
break|break;
case|case
name|WSAEAFNOSUPPORT
case|:
name|qDebug
argument_list|(
literal|"WSA error : WSAEAFNOSUPPORT"
argument_list|)
expr_stmt|;
break|break;
case|case
name|WSAEADDRINUSE
case|:
name|qDebug
argument_list|(
literal|"WSA error : WSAEADDRINUSE"
argument_list|)
expr_stmt|;
break|break;
case|case
name|WSAEADDRNOTAVAIL
case|:
name|qDebug
argument_list|(
literal|"WSA error : WSAEADDRNOTAVAIL"
argument_list|)
expr_stmt|;
break|break;
case|case
name|WSAENETDOWN
case|:
name|qDebug
argument_list|(
literal|"WSA error : WSAENETDOWN"
argument_list|)
expr_stmt|;
break|break;
case|case
name|WSAENETUNREACH
case|:
name|qDebug
argument_list|(
literal|"WSA error : WSAENETUNREACH"
argument_list|)
expr_stmt|;
break|break;
case|case
name|WSAENETRESET
case|:
name|qDebug
argument_list|(
literal|"WSA error : WSAENETRESET"
argument_list|)
expr_stmt|;
break|break;
case|case
name|WSAECONNABORTED
case|:
name|qDebug
argument_list|(
literal|"WSA error : WSAECONNABORTED"
argument_list|)
expr_stmt|;
break|break;
case|case
name|WSAECONNRESET
case|:
name|qDebug
argument_list|(
literal|"WSA error : WSAECONNRESET"
argument_list|)
expr_stmt|;
break|break;
case|case
name|WSAENOBUFS
case|:
name|qDebug
argument_list|(
literal|"WSA error : WSAENOBUFS"
argument_list|)
expr_stmt|;
break|break;
case|case
name|WSAEISCONN
case|:
name|qDebug
argument_list|(
literal|"WSA error : WSAEISCONN"
argument_list|)
expr_stmt|;
break|break;
case|case
name|WSAENOTCONN
case|:
name|qDebug
argument_list|(
literal|"WSA error : WSAENOTCONN"
argument_list|)
expr_stmt|;
break|break;
case|case
name|WSAESHUTDOWN
case|:
name|qDebug
argument_list|(
literal|"WSA error : WSAESHUTDOWN"
argument_list|)
expr_stmt|;
break|break;
case|case
name|WSAETOOMANYREFS
case|:
name|qDebug
argument_list|(
literal|"WSA error : WSAETOOMANYREFS"
argument_list|)
expr_stmt|;
break|break;
case|case
name|WSAETIMEDOUT
case|:
name|qDebug
argument_list|(
literal|"WSA error : WSAETIMEDOUT"
argument_list|)
expr_stmt|;
break|break;
case|case
name|WSAECONNREFUSED
case|:
name|qDebug
argument_list|(
literal|"WSA error : WSAECONNREFUSED"
argument_list|)
expr_stmt|;
break|break;
case|case
name|WSAELOOP
case|:
name|qDebug
argument_list|(
literal|"WSA error : WSAELOOP"
argument_list|)
expr_stmt|;
break|break;
case|case
name|WSAENAMETOOLONG
case|:
name|qDebug
argument_list|(
literal|"WSA error : WSAENAMETOOLONG"
argument_list|)
expr_stmt|;
break|break;
case|case
name|WSAEHOSTDOWN
case|:
name|qDebug
argument_list|(
literal|"WSA error : WSAEHOSTDOWN"
argument_list|)
expr_stmt|;
break|break;
case|case
name|WSAEHOSTUNREACH
case|:
name|qDebug
argument_list|(
literal|"WSA error : WSAEHOSTUNREACH"
argument_list|)
expr_stmt|;
break|break;
case|case
name|WSAENOTEMPTY
case|:
name|qDebug
argument_list|(
literal|"WSA error : WSAENOTEMPTY"
argument_list|)
expr_stmt|;
break|break;
case|case
name|WSAEPROCLIM
case|:
name|qDebug
argument_list|(
literal|"WSA error : WSAEPROCLIM"
argument_list|)
expr_stmt|;
break|break;
case|case
name|WSAEUSERS
case|:
name|qDebug
argument_list|(
literal|"WSA error : WSAEUSERS"
argument_list|)
expr_stmt|;
break|break;
case|case
name|WSAEDQUOT
case|:
name|qDebug
argument_list|(
literal|"WSA error : WSAEDQUOT"
argument_list|)
expr_stmt|;
break|break;
case|case
name|WSAESTALE
case|:
name|qDebug
argument_list|(
literal|"WSA error : WSAESTALE"
argument_list|)
expr_stmt|;
break|break;
case|case
name|WSAEREMOTE
case|:
name|qDebug
argument_list|(
literal|"WSA error : WSAEREMOTE"
argument_list|)
expr_stmt|;
break|break;
case|case
name|WSAEDISCON
case|:
name|qDebug
argument_list|(
literal|"WSA error : WSAEDISCON"
argument_list|)
expr_stmt|;
break|break;
default|default:
name|qDebug
argument_list|(
literal|"WSA error : Unknown"
argument_list|)
expr_stmt|;
break|break;
block|}
name|qErrnoWarning
argument_list|(
name|r
argument_list|,
literal|"more details"
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*     Returns a human readable representation of the first \a len     characters in \a data. */
end_comment
begin_function
DECL|function|qt_prettyDebug
specifier|static
name|QByteArray
name|qt_prettyDebug
parameter_list|(
specifier|const
name|char
modifier|*
name|data
parameter_list|,
name|int
name|len
parameter_list|,
name|int
name|maxLength
parameter_list|)
block|{
if|if
condition|(
operator|!
name|data
condition|)
return|return
literal|"(null)"
return|;
name|QByteArray
name|out
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
name|char
name|c
init|=
name|data
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|isprint
argument_list|(
name|int
argument_list|(
name|uchar
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|)
condition|)
block|{
name|out
operator|+=
name|c
expr_stmt|;
block|}
else|else
switch|switch
condition|(
name|c
condition|)
block|{
case|case
literal|'\n'
case|:
name|out
operator|+=
literal|"\\n"
expr_stmt|;
break|break;
case|case
literal|'\r'
case|:
name|out
operator|+=
literal|"\\r"
expr_stmt|;
break|break;
case|case
literal|'\t'
case|:
name|out
operator|+=
literal|"\\t"
expr_stmt|;
break|break;
default|default:
name|QString
name|tmp
decl_stmt|;
name|tmp
operator|.
name|sprintf
argument_list|(
literal|"\\%o"
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|out
operator|+=
name|tmp
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|len
operator|<
name|maxLength
condition|)
name|out
operator|+=
literal|"..."
expr_stmt|;
return|return
name|out
return|;
block|}
end_function
begin_define
DECL|macro|WS_ERROR_DEBUG
define|#
directive|define
name|WS_ERROR_DEBUG
parameter_list|(
name|x
parameter_list|)
value|verboseWSErrorDebug(x);
end_define
begin_else
else|#
directive|else
end_else
begin_define
define|#
directive|define
name|WS_ERROR_DEBUG
parameter_list|(
name|x
parameter_list|)
value|Q_UNUSED(x)
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|AF_INET6
end_ifndef
begin_define
DECL|macro|AF_INET6
define|#
directive|define
name|AF_INET6
value|23
end_define
begin_comment
DECL|macro|AF_INET6
comment|/* Internetwork Version 6 */
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|SO_EXCLUSIVEADDRUSE
end_ifndef
begin_define
DECL|macro|SO_EXCLUSIVEADDRUSE
define|#
directive|define
name|SO_EXCLUSIVEADDRUSE
value|((int)(~SO_REUSEADDR))
end_define
begin_comment
DECL|macro|SO_EXCLUSIVEADDRUSE
comment|/* disallow local address reuse */
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*     Extracts the port and address from a sockaddr, and stores them in     \a port and \a addr if they are non-null. */
end_comment
begin_function
DECL|function|qt_socket_getPortAndAddress
specifier|static
specifier|inline
name|void
name|qt_socket_getPortAndAddress
parameter_list|(
name|SOCKET
name|socketDescriptor
parameter_list|,
specifier|const
name|qt_sockaddr
modifier|*
name|sa
parameter_list|,
name|quint16
modifier|*
name|port
parameter_list|,
name|QHostAddress
modifier|*
name|address
parameter_list|)
block|{
if|if
condition|(
name|sa
operator|->
name|a
operator|.
name|sa_family
operator|==
name|AF_INET6
condition|)
block|{
specifier|const
name|qt_sockaddr_in6
modifier|*
name|sa6
init|=
operator|&
name|sa
operator|->
name|a6
decl_stmt|;
name|Q_IPV6ADDR
name|tmp
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|16
condition|;
operator|++
name|i
control|)
name|tmp
operator|.
name|c
index|[
name|i
index|]
operator|=
name|sa6
operator|->
name|sin6_addr
operator|.
name|qt_s6_addr
index|[
name|i
index|]
expr_stmt|;
name|QHostAddress
name|a
decl_stmt|;
name|a
operator|.
name|setAddress
argument_list|(
name|tmp
argument_list|)
expr_stmt|;
if|if
condition|(
name|address
condition|)
operator|*
name|address
operator|=
name|a
expr_stmt|;
if|if
condition|(
name|port
condition|)
name|WSANtohs
argument_list|(
name|socketDescriptor
argument_list|,
name|sa6
operator|->
name|sin6_port
argument_list|,
name|port
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sa
operator|->
name|a
operator|.
name|sa_family
operator|==
name|AF_INET
condition|)
block|{
specifier|const
name|sockaddr_in
modifier|*
name|sa4
init|=
operator|&
name|sa
operator|->
name|a4
decl_stmt|;
name|unsigned
name|long
name|addr
decl_stmt|;
name|WSANtohl
argument_list|(
name|socketDescriptor
argument_list|,
name|sa4
operator|->
name|sin_addr
operator|.
name|s_addr
argument_list|,
operator|&
name|addr
argument_list|)
expr_stmt|;
name|QHostAddress
name|a
decl_stmt|;
name|a
operator|.
name|setAddress
argument_list|(
name|addr
argument_list|)
expr_stmt|;
if|if
condition|(
name|address
condition|)
operator|*
name|address
operator|=
name|a
expr_stmt|;
if|if
condition|(
name|port
condition|)
name|WSANtohs
argument_list|(
name|socketDescriptor
argument_list|,
name|sa4
operator|->
name|sin_port
argument_list|,
name|port
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*! \internal      Sets the port and address to a sockaddr. Requires that sa point to the IPv6 struct if the address is IPv6. */
end_comment
begin_function
DECL|function|setPortAndAddress
name|void
name|QNativeSocketEnginePrivate
operator|::
name|setPortAndAddress
parameter_list|(
name|sockaddr_in
modifier|*
name|sockAddrIPv4
parameter_list|,
name|qt_sockaddr_in6
modifier|*
name|sockAddrIPv6
parameter_list|,
name|quint16
name|port
parameter_list|,
specifier|const
name|QHostAddress
modifier|&
name|address
parameter_list|,
name|sockaddr
modifier|*
modifier|*
name|sockAddrPtr
parameter_list|,
name|QT_SOCKLEN_T
modifier|*
name|sockAddrSize
parameter_list|)
block|{
if|if
condition|(
name|address
operator|.
name|protocol
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|IPv6Protocol
operator|||
name|address
operator|.
name|protocol
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|AnyIPProtocol
operator|||
name|socketProtocol
operator|==
name|QAbstractSocket
operator|::
name|IPv6Protocol
condition|)
block|{
name|memset
argument_list|(
name|sockAddrIPv6
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|qt_sockaddr_in6
argument_list|)
argument_list|)
expr_stmt|;
name|sockAddrIPv6
operator|->
name|sin6_family
operator|=
name|AF_INET6
expr_stmt|;
name|sockAddrIPv6
operator|->
name|sin6_scope_id
operator|=
name|address
operator|.
name|scopeId
argument_list|()
operator|.
name|toInt
argument_list|()
expr_stmt|;
name|WSAHtons
argument_list|(
name|socketDescriptor
argument_list|,
name|port
argument_list|,
operator|&
operator|(
name|sockAddrIPv6
operator|->
name|sin6_port
operator|)
argument_list|)
expr_stmt|;
name|Q_IPV6ADDR
name|tmp
init|=
name|address
operator|.
name|toIPv6Address
argument_list|()
decl_stmt|;
name|memcpy
argument_list|(
operator|&
operator|(
name|sockAddrIPv6
operator|->
name|sin6_addr
operator|.
name|qt_s6_addr
operator|)
argument_list|,
operator|&
name|tmp
argument_list|,
sizeof|sizeof
argument_list|(
name|tmp
argument_list|)
argument_list|)
expr_stmt|;
operator|*
name|sockAddrSize
operator|=
sizeof|sizeof
argument_list|(
name|qt_sockaddr_in6
argument_list|)
expr_stmt|;
operator|*
name|sockAddrPtr
operator|=
operator|(
expr|struct
name|sockaddr
operator|*
operator|)
name|sockAddrIPv6
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|address
operator|.
name|protocol
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|IPv4Protocol
operator|||
name|address
operator|.
name|protocol
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|UnknownNetworkLayerProtocol
condition|)
block|{
name|memset
argument_list|(
name|sockAddrIPv4
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|sockaddr_in
argument_list|)
argument_list|)
expr_stmt|;
name|sockAddrIPv4
operator|->
name|sin_family
operator|=
name|AF_INET
expr_stmt|;
name|WSAHtons
argument_list|(
name|socketDescriptor
argument_list|,
name|port
argument_list|,
operator|&
operator|(
name|sockAddrIPv4
operator|->
name|sin_port
operator|)
argument_list|)
expr_stmt|;
name|WSAHtonl
argument_list|(
name|socketDescriptor
argument_list|,
name|address
operator|.
name|toIPv4Address
argument_list|()
argument_list|,
operator|&
operator|(
name|sockAddrIPv4
operator|->
name|sin_addr
operator|.
name|s_addr
operator|)
argument_list|)
expr_stmt|;
operator|*
name|sockAddrSize
operator|=
sizeof|sizeof
argument_list|(
name|sockaddr_in
argument_list|)
expr_stmt|;
operator|*
name|sockAddrPtr
operator|=
operator|(
expr|struct
name|sockaddr
operator|*
operator|)
name|sockAddrIPv4
expr_stmt|;
block|}
else|else
block|{
comment|// unreachable
block|}
block|}
end_function
begin_comment
comment|/*! \internal  */
end_comment
begin_function
DECL|function|qt_socket_getType
specifier|static
specifier|inline
name|QAbstractSocket
operator|::
name|SocketType
name|qt_socket_getType
parameter_list|(
name|int
name|socketDescriptor
parameter_list|)
block|{
name|int
name|value
init|=
literal|0
decl_stmt|;
name|QT_SOCKLEN_T
name|valueSize
init|=
sizeof|sizeof
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
operator|::
name|getsockopt
argument_list|(
name|socketDescriptor
argument_list|,
name|SOL_SOCKET
argument_list|,
name|SO_TYPE
argument_list|,
operator|(
name|char
operator|*
operator|)
operator|&
name|value
argument_list|,
operator|&
name|valueSize
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|WS_ERROR_DEBUG
argument_list|(
name|WSAGetLastError
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|value
operator|==
name|SOCK_STREAM
condition|)
return|return
name|QAbstractSocket
operator|::
name|TcpSocket
return|;
elseif|else
if|if
condition|(
name|value
operator|==
name|SOCK_DGRAM
condition|)
return|return
name|QAbstractSocket
operator|::
name|UdpSocket
return|;
block|}
return|return
name|QAbstractSocket
operator|::
name|UnknownSocketType
return|;
block|}
end_function
begin_comment
comment|/*! \internal  */
end_comment
begin_function
DECL|function|qt_socket_getMaxMsgSize
specifier|static
specifier|inline
name|int
name|qt_socket_getMaxMsgSize
parameter_list|(
name|int
name|socketDescriptor
parameter_list|)
block|{
name|int
name|value
init|=
literal|0
decl_stmt|;
name|QT_SOCKLEN_T
name|valueSize
init|=
sizeof|sizeof
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
operator|::
name|getsockopt
argument_list|(
name|socketDescriptor
argument_list|,
name|SOL_SOCKET
argument_list|,
name|SO_MAX_MSG_SIZE
argument_list|,
operator|(
name|char
operator|*
operator|)
operator|&
name|value
argument_list|,
operator|&
name|valueSize
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|WS_ERROR_DEBUG
argument_list|(
name|WSAGetLastError
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
end_function
begin_constructor
DECL|function|QWindowsSockInit
name|QWindowsSockInit
operator|::
name|QWindowsSockInit
parameter_list|()
member_init_list|:
name|version
argument_list|(
literal|0
argument_list|)
block|{
comment|//### should we try for 2.2 on all platforms ??
name|WSAData
name|wsadata
decl_stmt|;
comment|// IPv6 requires Winsock v2.0 or better.
if|if
condition|(
name|WSAStartup
argument_list|(
name|MAKEWORD
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|)
argument_list|,
operator|&
name|wsadata
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|qWarning
argument_list|(
literal|"QTcpSocketAPI: WinSock v2.0 initialization failed."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|version
operator|=
literal|0x20
expr_stmt|;
block|}
block|}
end_constructor
begin_destructor
DECL|function|~QWindowsSockInit
name|QWindowsSockInit
operator|::
name|~
name|QWindowsSockInit
parameter_list|()
block|{
name|WSACleanup
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_comment
comment|// MS Transport Provider IOCTL to control
end_comment
begin_comment
comment|// reporting PORT_UNREACHABLE messages
end_comment
begin_comment
comment|// on UDP sockets via recv/WSARecv/etc.
end_comment
begin_comment
comment|// Path TRUE in input buffer to enable (default if supported),
end_comment
begin_comment
comment|// FALSE to disable.
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|SIO_UDP_CONNRESET
end_ifndef
begin_ifndef
ifndef|#
directive|ifndef
name|IOC_VENDOR
end_ifndef
begin_define
DECL|macro|IOC_VENDOR
define|#
directive|define
name|IOC_VENDOR
value|0x18000000
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|_WSAIOW
end_ifndef
begin_define
DECL|macro|_WSAIOW
define|#
directive|define
name|_WSAIOW
parameter_list|(
name|x
parameter_list|,
name|y
parameter_list|)
value|(IOC_IN|(x)|(y))
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_define
DECL|macro|SIO_UDP_CONNRESET
define|#
directive|define
name|SIO_UDP_CONNRESET
value|_WSAIOW(IOC_VENDOR,12)
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|createNewSocket
name|bool
name|QNativeSocketEnginePrivate
operator|::
name|createNewSocket
parameter_list|(
name|QAbstractSocket
operator|::
name|SocketType
name|socketType
parameter_list|,
name|QAbstractSocket
operator|::
name|NetworkLayerProtocol
name|socketProtocol
parameter_list|)
block|{
comment|//### no ip6 support on winsocket 1.1 but we will try not to use this !!!!!!!!!!!!1
comment|/*     if (winsockVersion< 0x20&& socketProtocol == QAbstractSocket::IPv6Protocol) {         //### no ip6 support         return -1;     }     */
comment|//Windows XP and 2003 support IPv6 but not dual stack sockets
name|int
name|protocol
init|=
operator|(
name|socketProtocol
operator|==
name|QAbstractSocket
operator|::
name|IPv6Protocol
operator|||
operator|(
name|socketProtocol
operator|==
name|QAbstractSocket
operator|::
name|AnyIPProtocol
operator|&&
name|QSysInfo
operator|::
name|windowsVersion
argument_list|()
operator|>=
name|QSysInfo
operator|::
name|WV_6_0
operator|)
operator|)
condition|?
name|AF_INET6
else|:
name|AF_INET
decl_stmt|;
name|int
name|type
init|=
operator|(
name|socketType
operator|==
name|QAbstractSocket
operator|::
name|UdpSocket
operator|)
condition|?
name|SOCK_DGRAM
else|:
name|SOCK_STREAM
decl_stmt|;
comment|// MSDN KB179942 states that on winnt 4 WSA_FLAG_OVERLAPPED is needed if socket is to be non blocking
comment|// and recomends alwasy doing it for cross windows version comapablity.
name|SOCKET
name|socket
init|=
operator|::
name|WSASocket
argument_list|(
name|protocol
argument_list|,
name|type
argument_list|,
literal|0
argument_list|,
name|NULL
argument_list|,
literal|0
argument_list|,
name|WSA_FLAG_OVERLAPPED
argument_list|)
decl_stmt|;
if|if
condition|(
name|socket
operator|==
name|INVALID_SOCKET
condition|)
block|{
name|int
name|err
init|=
name|WSAGetLastError
argument_list|()
decl_stmt|;
name|WS_ERROR_DEBUG
argument_list|(
name|err
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|err
condition|)
block|{
case|case
name|WSANOTINITIALISED
case|:
comment|//###
break|break;
case|case
name|WSAEAFNOSUPPORT
case|:
case|case
name|WSAESOCKTNOSUPPORT
case|:
case|case
name|WSAEPROTOTYPE
case|:
case|case
name|WSAEINVAL
case|:
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|UnsupportedSocketOperationError
argument_list|,
name|ProtocolUnsupportedErrorString
argument_list|)
expr_stmt|;
break|break;
case|case
name|WSAEMFILE
case|:
case|case
name|WSAENOBUFS
case|:
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|SocketResourceError
argument_list|,
name|ResourceErrorString
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
return|return
literal|false
return|;
block|}
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
if|if
condition|(
name|socketType
operator|==
name|QAbstractSocket
operator|::
name|UdpSocket
condition|)
block|{
comment|// enable new behavior using
comment|// SIO_UDP_CONNRESET
name|DWORD
name|dwBytesReturned
init|=
literal|0
decl_stmt|;
name|int
name|bNewBehavior
init|=
literal|1
decl_stmt|;
if|if
condition|(
operator|::
name|WSAIoctl
argument_list|(
name|socket
argument_list|,
name|SIO_UDP_CONNRESET
argument_list|,
operator|&
name|bNewBehavior
argument_list|,
sizeof|sizeof
argument_list|(
name|bNewBehavior
argument_list|)
argument_list|,
name|NULL
argument_list|,
literal|0
argument_list|,
operator|&
name|dwBytesReturned
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
operator|==
name|SOCKET_ERROR
condition|)
block|{
comment|// not to worry isBogusUdpReadNotification() should handle this otherwise
name|int
name|err
init|=
name|WSAGetLastError
argument_list|()
decl_stmt|;
name|WS_ERROR_DEBUG
argument_list|(
name|err
argument_list|)
expr_stmt|;
block|}
block|}
endif|#
directive|endif
name|socketDescriptor
operator|=
name|socket
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/*! \internal      Returns the value of the socket option \a opt. */
end_comment
begin_function
DECL|function|option
name|int
name|QNativeSocketEnginePrivate
operator|::
name|option
parameter_list|(
name|QNativeSocketEngine
operator|::
name|SocketOption
name|opt
parameter_list|)
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QNativeSocketEngine
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|q
operator|->
name|isValid
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
name|int
name|n
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|level
init|=
name|SOL_SOCKET
decl_stmt|;
comment|// default
switch|switch
condition|(
name|opt
condition|)
block|{
case|case
name|QNativeSocketEngine
operator|::
name|ReceiveBufferSocketOption
case|:
name|n
operator|=
name|SO_RCVBUF
expr_stmt|;
break|break;
case|case
name|QNativeSocketEngine
operator|::
name|SendBufferSocketOption
case|:
name|n
operator|=
name|SO_SNDBUF
expr_stmt|;
break|break;
case|case
name|QNativeSocketEngine
operator|::
name|BroadcastSocketOption
case|:
name|n
operator|=
name|SO_BROADCAST
expr_stmt|;
break|break;
case|case
name|QNativeSocketEngine
operator|::
name|NonBlockingSocketOption
case|:
block|{
name|unsigned
name|long
name|buf
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|WSAIoctl
argument_list|(
name|socketDescriptor
argument_list|,
name|FIONBIO
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|&
name|buf
argument_list|,
sizeof|sizeof
argument_list|(
name|buf
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
operator|==
literal|0
condition|)
return|return
name|buf
return|;
else|else
return|return
operator|-
literal|1
return|;
break|break;
block|}
case|case
name|QNativeSocketEngine
operator|::
name|AddressReusable
case|:
name|n
operator|=
name|SO_REUSEADDR
expr_stmt|;
break|break;
case|case
name|QNativeSocketEngine
operator|::
name|BindExclusively
case|:
name|n
operator|=
name|SO_EXCLUSIVEADDRUSE
expr_stmt|;
break|break;
case|case
name|QNativeSocketEngine
operator|::
name|ReceiveOutOfBandData
case|:
name|n
operator|=
name|SO_OOBINLINE
expr_stmt|;
break|break;
case|case
name|QNativeSocketEngine
operator|::
name|LowDelayOption
case|:
name|level
operator|=
name|IPPROTO_TCP
expr_stmt|;
name|n
operator|=
name|TCP_NODELAY
expr_stmt|;
break|break;
case|case
name|QNativeSocketEngine
operator|::
name|KeepAliveOption
case|:
name|n
operator|=
name|SO_KEEPALIVE
expr_stmt|;
break|break;
case|case
name|QNativeSocketEngine
operator|::
name|MulticastTtlOption
case|:
if|if
condition|(
name|socketProtocol
operator|==
name|QAbstractSocket
operator|::
name|IPv6Protocol
condition|)
block|{
name|level
operator|=
name|IPPROTO_IPV6
expr_stmt|;
name|n
operator|=
name|IPV6_MULTICAST_HOPS
expr_stmt|;
block|}
else|else
block|{
name|level
operator|=
name|IPPROTO_IP
expr_stmt|;
name|n
operator|=
name|IP_MULTICAST_TTL
expr_stmt|;
block|}
break|break;
case|case
name|QNativeSocketEngine
operator|::
name|MulticastLoopbackOption
case|:
if|if
condition|(
name|socketProtocol
operator|==
name|QAbstractSocket
operator|::
name|IPv6Protocol
condition|)
block|{
name|level
operator|=
name|IPPROTO_IPV6
expr_stmt|;
name|n
operator|=
name|IPV6_MULTICAST_LOOP
expr_stmt|;
block|}
else|else
block|{
name|level
operator|=
name|IPPROTO_IP
expr_stmt|;
name|n
operator|=
name|IP_MULTICAST_LOOP
expr_stmt|;
block|}
break|break;
block|}
name|int
name|v
init|=
operator|-
literal|1
decl_stmt|;
name|QT_SOCKOPTLEN_T
name|len
init|=
sizeof|sizeof
argument_list|(
name|v
argument_list|)
decl_stmt|;
if|if
condition|(
name|getsockopt
argument_list|(
name|socketDescriptor
argument_list|,
name|level
argument_list|,
name|n
argument_list|,
operator|(
name|char
operator|*
operator|)
operator|&
name|v
argument_list|,
operator|&
name|len
argument_list|)
operator|!=
operator|-
literal|1
condition|)
return|return
name|v
return|;
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_comment
comment|/*! \internal     Sets the socket option \a opt to \a v. */
end_comment
begin_function
DECL|function|setOption
name|bool
name|QNativeSocketEnginePrivate
operator|::
name|setOption
parameter_list|(
name|QNativeSocketEngine
operator|::
name|SocketOption
name|opt
parameter_list|,
name|int
name|v
parameter_list|)
block|{
name|Q_Q
argument_list|(
specifier|const
name|QNativeSocketEngine
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|q
operator|->
name|isValid
argument_list|()
condition|)
return|return
literal|false
return|;
name|int
name|n
init|=
literal|0
decl_stmt|;
name|int
name|level
init|=
name|SOL_SOCKET
decl_stmt|;
comment|// default
switch|switch
condition|(
name|opt
condition|)
block|{
case|case
name|QNativeSocketEngine
operator|::
name|ReceiveBufferSocketOption
case|:
name|n
operator|=
name|SO_RCVBUF
expr_stmt|;
break|break;
case|case
name|QNativeSocketEngine
operator|::
name|SendBufferSocketOption
case|:
name|n
operator|=
name|SO_SNDBUF
expr_stmt|;
break|break;
case|case
name|QNativeSocketEngine
operator|::
name|BroadcastSocketOption
case|:
name|n
operator|=
name|SO_BROADCAST
expr_stmt|;
break|break;
case|case
name|QNativeSocketEngine
operator|::
name|NonBlockingSocketOption
case|:
block|{
name|unsigned
name|long
name|buf
init|=
name|v
decl_stmt|;
name|unsigned
name|long
name|outBuf
decl_stmt|;
name|DWORD
name|sizeWritten
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|::
name|WSAIoctl
argument_list|(
name|socketDescriptor
argument_list|,
name|FIONBIO
argument_list|,
operator|&
name|buf
argument_list|,
expr|sizeof
operator|(
name|unsigned
name|long
operator|)
argument_list|,
operator|&
name|outBuf
argument_list|,
expr|sizeof
operator|(
name|unsigned
name|long
operator|)
argument_list|,
operator|&
name|sizeWritten
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
operator|==
name|SOCKET_ERROR
condition|)
block|{
name|WS_ERROR_DEBUG
argument_list|(
name|WSAGetLastError
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
break|break;
block|}
case|case
name|QNativeSocketEngine
operator|::
name|AddressReusable
case|:
name|n
operator|=
name|SO_REUSEADDR
expr_stmt|;
break|break;
case|case
name|QNativeSocketEngine
operator|::
name|BindExclusively
case|:
name|n
operator|=
name|SO_EXCLUSIVEADDRUSE
expr_stmt|;
break|break;
case|case
name|QNativeSocketEngine
operator|::
name|ReceiveOutOfBandData
case|:
name|n
operator|=
name|SO_OOBINLINE
expr_stmt|;
break|break;
case|case
name|QNativeSocketEngine
operator|::
name|LowDelayOption
case|:
name|level
operator|=
name|IPPROTO_TCP
expr_stmt|;
name|n
operator|=
name|TCP_NODELAY
expr_stmt|;
break|break;
case|case
name|QNativeSocketEngine
operator|::
name|KeepAliveOption
case|:
name|n
operator|=
name|SO_KEEPALIVE
expr_stmt|;
break|break;
case|case
name|QNativeSocketEngine
operator|::
name|MulticastTtlOption
case|:
if|if
condition|(
name|socketProtocol
operator|==
name|QAbstractSocket
operator|::
name|IPv6Protocol
condition|)
block|{
name|level
operator|=
name|IPPROTO_IPV6
expr_stmt|;
name|n
operator|=
name|IPV6_MULTICAST_HOPS
expr_stmt|;
block|}
else|else
block|{
name|level
operator|=
name|IPPROTO_IP
expr_stmt|;
name|n
operator|=
name|IP_MULTICAST_TTL
expr_stmt|;
block|}
break|break;
case|case
name|QNativeSocketEngine
operator|::
name|MulticastLoopbackOption
case|:
if|if
condition|(
name|socketProtocol
operator|==
name|QAbstractSocket
operator|::
name|IPv6Protocol
condition|)
block|{
name|level
operator|=
name|IPPROTO_IPV6
expr_stmt|;
name|n
operator|=
name|IPV6_MULTICAST_LOOP
expr_stmt|;
block|}
else|else
block|{
name|level
operator|=
name|IPPROTO_IP
expr_stmt|;
name|n
operator|=
name|IP_MULTICAST_LOOP
expr_stmt|;
block|}
break|break;
block|}
if|if
condition|(
operator|::
name|setsockopt
argument_list|(
name|socketDescriptor
argument_list|,
name|level
argument_list|,
name|n
argument_list|,
operator|(
name|char
operator|*
operator|)
operator|&
name|v
argument_list|,
sizeof|sizeof
argument_list|(
name|v
argument_list|)
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|WS_ERROR_DEBUG
argument_list|(
name|WSAGetLastError
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/*!     Fetches information about both ends of the connection: whatever is     available. */
end_comment
begin_function
DECL|function|fetchConnectionParameters
name|bool
name|QNativeSocketEnginePrivate
operator|::
name|fetchConnectionParameters
parameter_list|()
block|{
name|localPort
operator|=
literal|0
expr_stmt|;
name|localAddress
operator|.
name|clear
argument_list|()
expr_stmt|;
name|peerPort
operator|=
literal|0
expr_stmt|;
name|peerAddress
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|socketDescriptor
operator|==
operator|-
literal|1
condition|)
return|return
literal|false
return|;
name|qt_sockaddr
name|sa
decl_stmt|;
name|QT_SOCKLEN_T
name|sockAddrSize
init|=
sizeof|sizeof
argument_list|(
name|sa
argument_list|)
decl_stmt|;
comment|// Determine local address
name|memset
argument_list|(
operator|&
name|sa
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|sa
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|::
name|getsockname
argument_list|(
name|socketDescriptor
argument_list|,
operator|&
name|sa
operator|.
name|a
argument_list|,
operator|&
name|sockAddrSize
argument_list|)
operator|==
literal|0
condition|)
block|{
name|qt_socket_getPortAndAddress
argument_list|(
name|socketDescriptor
argument_list|,
operator|&
name|sa
argument_list|,
operator|&
name|localPort
argument_list|,
operator|&
name|localAddress
argument_list|)
expr_stmt|;
comment|// Determine protocol family
switch|switch
condition|(
name|sa
operator|.
name|a
operator|.
name|sa_family
condition|)
block|{
case|case
name|AF_INET
case|:
name|socketProtocol
operator|=
name|QAbstractSocket
operator|::
name|IPv4Protocol
expr_stmt|;
break|break;
case|case
name|AF_INET6
case|:
name|socketProtocol
operator|=
name|QAbstractSocket
operator|::
name|IPv6Protocol
expr_stmt|;
break|break;
default|default:
name|socketProtocol
operator|=
name|QAbstractSocket
operator|::
name|UnknownNetworkLayerProtocol
expr_stmt|;
break|break;
block|}
block|}
else|else
block|{
name|int
name|err
init|=
name|WSAGetLastError
argument_list|()
decl_stmt|;
name|WS_ERROR_DEBUG
argument_list|(
name|err
argument_list|)
expr_stmt|;
if|if
condition|(
name|err
operator|==
name|WSAENOTSOCK
condition|)
block|{
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|UnsupportedSocketOperationError
argument_list|,
name|InvalidSocketErrorString
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
name|memset
argument_list|(
operator|&
name|sa
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|sa
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|::
name|getpeername
argument_list|(
name|socketDescriptor
argument_list|,
operator|&
name|sa
operator|.
name|a
argument_list|,
operator|&
name|sockAddrSize
argument_list|)
operator|==
literal|0
condition|)
block|{
name|qt_socket_getPortAndAddress
argument_list|(
name|socketDescriptor
argument_list|,
operator|&
name|sa
argument_list|,
operator|&
name|peerPort
argument_list|,
operator|&
name|peerAddress
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|WS_ERROR_DEBUG
argument_list|(
name|WSAGetLastError
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|socketType
operator|=
name|qt_socket_getType
argument_list|(
name|socketDescriptor
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QNATIVESOCKETENGINE_DEBUG
argument_list|)
name|QString
name|socketProtocolStr
init|=
literal|"UnknownProtocol"
decl_stmt|;
if|if
condition|(
name|socketProtocol
operator|==
name|QAbstractSocket
operator|::
name|IPv4Protocol
condition|)
name|socketProtocolStr
operator|=
literal|"IPv4Protocol"
expr_stmt|;
elseif|else
if|if
condition|(
name|socketProtocol
operator|==
name|QAbstractSocket
operator|::
name|IPv6Protocol
condition|)
name|socketProtocolStr
operator|=
literal|"IPv6Protocol"
expr_stmt|;
name|QString
name|socketTypeStr
init|=
literal|"UnknownSocketType"
decl_stmt|;
if|if
condition|(
name|socketType
operator|==
name|QAbstractSocket
operator|::
name|TcpSocket
condition|)
name|socketTypeStr
operator|=
literal|"TcpSocket"
expr_stmt|;
elseif|else
if|if
condition|(
name|socketType
operator|==
name|QAbstractSocket
operator|::
name|UdpSocket
condition|)
name|socketTypeStr
operator|=
literal|"UdpSocket"
expr_stmt|;
name|qDebug
argument_list|(
literal|"QNativeSocketEnginePrivate::fetchConnectionParameters() localAddress == %s, localPort = %i, peerAddress == %s, peerPort = %i, socketProtocol == %s, socketType == %s"
argument_list|,
name|localAddress
operator|.
name|toString
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|localPort
argument_list|,
name|peerAddress
operator|.
name|toString
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|peerPort
argument_list|,
name|socketProtocolStr
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|socketTypeStr
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|nativeConnect
name|bool
name|QNativeSocketEnginePrivate
operator|::
name|nativeConnect
parameter_list|(
specifier|const
name|QHostAddress
modifier|&
name|address
parameter_list|,
name|quint16
name|port
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QNATIVESOCKETENGINE_DEBUG
argument_list|)
name|qDebug
argument_list|(
literal|"QNativeSocketEnginePrivate::nativeConnect() to %s :: %i"
argument_list|,
name|address
operator|.
name|toString
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|port
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|struct
name|sockaddr_in
name|sockAddrIPv4
decl_stmt|;
name|qt_sockaddr_in6
name|sockAddrIPv6
decl_stmt|;
name|struct
name|sockaddr
modifier|*
name|sockAddrPtr
init|=
literal|0
decl_stmt|;
name|QT_SOCKLEN_T
name|sockAddrSize
init|=
literal|0
decl_stmt|;
name|setPortAndAddress
argument_list|(
operator|&
name|sockAddrIPv4
argument_list|,
operator|&
name|sockAddrIPv6
argument_list|,
name|port
argument_list|,
name|address
argument_list|,
operator|&
name|sockAddrPtr
argument_list|,
operator|&
name|sockAddrSize
argument_list|)
expr_stmt|;
forever|forever
block|{
name|int
name|connectResult
init|=
operator|::
name|WSAConnect
argument_list|(
name|socketDescriptor
argument_list|,
name|sockAddrPtr
argument_list|,
name|sockAddrSize
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|connectResult
operator|==
name|SOCKET_ERROR
condition|)
block|{
name|int
name|err
init|=
name|WSAGetLastError
argument_list|()
decl_stmt|;
name|WS_ERROR_DEBUG
argument_list|(
name|err
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|err
condition|)
block|{
case|case
name|WSANOTINITIALISED
case|:
comment|//###
break|break;
case|case
name|WSAEISCONN
case|:
name|socketState
operator|=
name|QAbstractSocket
operator|::
name|ConnectedState
expr_stmt|;
break|break;
case|case
name|WSAEWOULDBLOCK
case|:
block|{
comment|// If WSAConnect returns WSAEWOULDBLOCK on the second
comment|// connection attempt, we have to check SO_ERROR's
comment|// value to detect ECONNREFUSED. If we don't get
comment|// ECONNREFUSED, we'll have to treat it as an
comment|// unfinished operation.
name|int
name|value
init|=
literal|0
decl_stmt|;
name|QT_SOCKLEN_T
name|valueSize
init|=
sizeof|sizeof
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
operator|::
name|getsockopt
argument_list|(
name|socketDescriptor
argument_list|,
name|SOL_SOCKET
argument_list|,
name|SO_ERROR
argument_list|,
operator|(
name|char
operator|*
operator|)
operator|&
name|value
argument_list|,
operator|&
name|valueSize
argument_list|)
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|value
operator|==
name|WSAECONNREFUSED
condition|)
block|{
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|ConnectionRefusedError
argument_list|,
name|ConnectionRefusedErrorString
argument_list|)
expr_stmt|;
name|socketState
operator|=
name|QAbstractSocket
operator|::
name|UnconnectedState
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|value
operator|==
name|WSAETIMEDOUT
condition|)
block|{
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|NetworkError
argument_list|,
name|ConnectionTimeOutErrorString
argument_list|)
expr_stmt|;
name|socketState
operator|=
name|QAbstractSocket
operator|::
name|UnconnectedState
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|value
operator|==
name|WSAEHOSTUNREACH
condition|)
block|{
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|NetworkError
argument_list|,
name|HostUnreachableErrorString
argument_list|)
expr_stmt|;
name|socketState
operator|=
name|QAbstractSocket
operator|::
name|UnconnectedState
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|value
operator|==
name|WSAEADDRNOTAVAIL
condition|)
block|{
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|NetworkError
argument_list|,
name|AddressNotAvailableErrorString
argument_list|)
expr_stmt|;
name|socketState
operator|=
name|QAbstractSocket
operator|::
name|UnconnectedState
expr_stmt|;
break|break;
block|}
block|}
comment|// fall through
block|}
case|case
name|WSAEINPROGRESS
case|:
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|UnfinishedSocketOperationError
argument_list|,
name|InvalidSocketErrorString
argument_list|)
expr_stmt|;
name|socketState
operator|=
name|QAbstractSocket
operator|::
name|ConnectingState
expr_stmt|;
break|break;
case|case
name|WSAEADDRINUSE
case|:
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|NetworkError
argument_list|,
name|AddressInuseErrorString
argument_list|)
expr_stmt|;
break|break;
case|case
name|WSAECONNREFUSED
case|:
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|ConnectionRefusedError
argument_list|,
name|ConnectionRefusedErrorString
argument_list|)
expr_stmt|;
name|socketState
operator|=
name|QAbstractSocket
operator|::
name|UnconnectedState
expr_stmt|;
break|break;
case|case
name|WSAETIMEDOUT
case|:
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|NetworkError
argument_list|,
name|ConnectionTimeOutErrorString
argument_list|)
expr_stmt|;
break|break;
case|case
name|WSAEACCES
case|:
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|SocketAccessError
argument_list|,
name|AccessErrorString
argument_list|)
expr_stmt|;
name|socketState
operator|=
name|QAbstractSocket
operator|::
name|UnconnectedState
expr_stmt|;
break|break;
case|case
name|WSAEHOSTUNREACH
case|:
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|NetworkError
argument_list|,
name|HostUnreachableErrorString
argument_list|)
expr_stmt|;
name|socketState
operator|=
name|QAbstractSocket
operator|::
name|UnconnectedState
expr_stmt|;
break|break;
case|case
name|WSAENETUNREACH
case|:
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|NetworkError
argument_list|,
name|NetworkUnreachableErrorString
argument_list|)
expr_stmt|;
name|socketState
operator|=
name|QAbstractSocket
operator|::
name|UnconnectedState
expr_stmt|;
break|break;
case|case
name|WSAEINVAL
case|:
case|case
name|WSAEALREADY
case|:
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|UnfinishedSocketOperationError
argument_list|,
name|InvalidSocketErrorString
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
if|if
condition|(
name|socketState
operator|!=
name|QAbstractSocket
operator|::
name|ConnectedState
condition|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QNATIVESOCKETENGINE_DEBUG
argument_list|)
name|qDebug
argument_list|(
literal|"QNativeSocketEnginePrivate::nativeConnect(%s, %i) == false (%s)"
argument_list|,
name|address
operator|.
name|toString
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|port
argument_list|,
name|socketState
operator|==
name|QAbstractSocket
operator|::
name|ConnectingState
condition|?
literal|"Connection in progress"
else|:
name|socketErrorString
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|false
return|;
block|}
block|}
break|break;
block|}
if|#
directive|if
name|defined
argument_list|(
name|QNATIVESOCKETENGINE_DEBUG
argument_list|)
name|qDebug
argument_list|(
literal|"QNativeSocketEnginePrivate::nativeConnect(%s, %i) == true"
argument_list|,
name|address
operator|.
name|toString
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|port
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|socketState
operator|=
name|QAbstractSocket
operator|::
name|ConnectedState
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|nativeBind
name|bool
name|QNativeSocketEnginePrivate
operator|::
name|nativeBind
parameter_list|(
specifier|const
name|QHostAddress
modifier|&
name|a
parameter_list|,
name|quint16
name|port
parameter_list|)
block|{
name|QHostAddress
name|address
init|=
name|a
decl_stmt|;
name|DWORD
name|ipv6only
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|address
operator|.
name|protocol
argument_list|()
condition|)
block|{
case|case
name|QAbstractSocket
operator|::
name|IPv6Protocol
case|:
if|if
condition|(
name|address
operator|.
name|toIPv6Address
argument_list|()
index|[
literal|0
index|]
operator|==
literal|0xff
condition|)
block|{
comment|// binding to a multicast address
name|address
operator|=
name|QHostAddress
argument_list|(
name|QHostAddress
operator|::
name|AnyIPv6
argument_list|)
expr_stmt|;
block|}
if|#
directive|if
name|defined
argument_list|(
name|IPV6_V6ONLY
argument_list|)
comment|//This is default in current windows versions, it may change in future so set it explicitly
if|if
condition|(
name|QSysInfo
operator|::
name|windowsVersion
argument_list|()
operator|>=
name|QSysInfo
operator|::
name|WV_6_0
condition|)
block|{
name|ipv6only
operator|=
literal|1
expr_stmt|;
name|ipv6only
operator|=
operator|::
name|setsockopt
argument_list|(
name|socketDescriptor
argument_list|,
name|IPPROTO_IPV6
argument_list|,
name|IPV6_V6ONLY
argument_list|,
operator|(
name|char
operator|*
operator|)
operator|&
name|ipv6only
argument_list|,
sizeof|sizeof
argument_list|(
name|ipv6only
argument_list|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
break|break;
case|case
name|QAbstractSocket
operator|::
name|IPv4Protocol
case|:
if|if
condition|(
operator|(
name|address
operator|.
name|toIPv4Address
argument_list|()
operator|&
literal|0xffff0000
operator|)
operator|==
literal|0xefff0000
condition|)
block|{
comment|// binding to a multicast address
name|address
operator|=
name|QHostAddress
argument_list|(
name|QHostAddress
operator|::
name|AnyIPv4
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QAbstractSocket
operator|::
name|AnyIPProtocol
case|:
if|#
directive|if
name|defined
argument_list|(
name|IPV6_V6ONLY
argument_list|)
if|if
condition|(
name|QSysInfo
operator|::
name|windowsVersion
argument_list|()
operator|>=
name|QSysInfo
operator|::
name|WV_6_0
condition|)
name|ipv6only
operator|=
operator|::
name|setsockopt
argument_list|(
name|socketDescriptor
argument_list|,
name|IPPROTO_IPV6
argument_list|,
name|IPV6_V6ONLY
argument_list|,
operator|(
name|char
operator|*
operator|)
operator|&
name|ipv6only
argument_list|,
sizeof|sizeof
argument_list|(
name|ipv6only
argument_list|)
argument_list|)
expr_stmt|;
else|else
endif|#
directive|endif
name|address
operator|=
name|QHostAddress
argument_list|(
name|QHostAddress
operator|::
name|AnyIPv4
argument_list|)
expr_stmt|;
comment|//xp/WS2003 and earlier don't support dual stack, so bind to IPv4
break|break;
default|default:
break|break;
block|}
name|struct
name|sockaddr_in
name|sockAddrIPv4
decl_stmt|;
name|qt_sockaddr_in6
name|sockAddrIPv6
decl_stmt|;
name|struct
name|sockaddr
modifier|*
name|sockAddrPtr
init|=
literal|0
decl_stmt|;
name|QT_SOCKLEN_T
name|sockAddrSize
init|=
literal|0
decl_stmt|;
name|setPortAndAddress
argument_list|(
operator|&
name|sockAddrIPv4
argument_list|,
operator|&
name|sockAddrIPv6
argument_list|,
name|port
argument_list|,
name|address
argument_list|,
operator|&
name|sockAddrPtr
argument_list|,
operator|&
name|sockAddrSize
argument_list|)
expr_stmt|;
name|int
name|bindResult
init|=
operator|::
name|bind
argument_list|(
name|socketDescriptor
argument_list|,
name|sockAddrPtr
argument_list|,
name|sockAddrSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|bindResult
operator|==
name|SOCKET_ERROR
condition|)
block|{
name|int
name|err
init|=
name|WSAGetLastError
argument_list|()
decl_stmt|;
name|WS_ERROR_DEBUG
argument_list|(
name|err
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|err
condition|)
block|{
case|case
name|WSANOTINITIALISED
case|:
comment|//###
break|break;
case|case
name|WSAEADDRINUSE
case|:
case|case
name|WSAEINVAL
case|:
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|AddressInUseError
argument_list|,
name|AddressInuseErrorString
argument_list|)
expr_stmt|;
break|break;
case|case
name|WSAEACCES
case|:
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|SocketAccessError
argument_list|,
name|AddressProtectedErrorString
argument_list|)
expr_stmt|;
break|break;
case|case
name|WSAEADDRNOTAVAIL
case|:
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|SocketAddressNotAvailableError
argument_list|,
name|AddressNotAvailableErrorString
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
if|#
directive|if
name|defined
argument_list|(
name|QNATIVESOCKETENGINE_DEBUG
argument_list|)
name|qDebug
argument_list|(
literal|"QNativeSocketEnginePrivate::nativeBind(%s, %i) == false (%s)"
argument_list|,
name|address
operator|.
name|toString
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|port
argument_list|,
name|socketErrorString
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|false
return|;
block|}
name|localPort
operator|=
name|port
expr_stmt|;
name|localAddress
operator|=
name|address
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QNATIVESOCKETENGINE_DEBUG
argument_list|)
name|qDebug
argument_list|(
literal|"QNativeSocketEnginePrivate::nativeBind(%s, %i) == true"
argument_list|,
name|address
operator|.
name|toString
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|port
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|socketState
operator|=
name|QAbstractSocket
operator|::
name|BoundState
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|nativeListen
name|bool
name|QNativeSocketEnginePrivate
operator|::
name|nativeListen
parameter_list|(
name|int
name|backlog
parameter_list|)
block|{
if|if
condition|(
operator|::
name|listen
argument_list|(
name|socketDescriptor
argument_list|,
name|backlog
argument_list|)
operator|==
name|SOCKET_ERROR
condition|)
block|{
name|int
name|err
init|=
name|WSAGetLastError
argument_list|()
decl_stmt|;
name|WS_ERROR_DEBUG
argument_list|(
name|err
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|err
condition|)
block|{
case|case
name|WSANOTINITIALISED
case|:
comment|//###
break|break;
case|case
name|WSAEADDRINUSE
case|:
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|AddressInUseError
argument_list|,
name|PortInuseErrorString
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
if|#
directive|if
name|defined
argument_list|(
name|QNATIVESOCKETENGINE_DEBUG
argument_list|)
name|qDebug
argument_list|(
literal|"QNativeSocketEnginePrivate::nativeListen(%i) == false (%s)"
argument_list|,
name|backlog
argument_list|,
name|socketErrorString
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|false
return|;
block|}
if|#
directive|if
name|defined
argument_list|(
name|QNATIVESOCKETENGINE_DEBUG
argument_list|)
name|qDebug
argument_list|(
literal|"QNativeSocketEnginePrivate::nativeListen(%i) == true"
argument_list|,
name|backlog
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|socketState
operator|=
name|QAbstractSocket
operator|::
name|ListeningState
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|nativeAccept
name|int
name|QNativeSocketEnginePrivate
operator|::
name|nativeAccept
parameter_list|()
block|{
name|int
name|acceptedDescriptor
init|=
name|WSAAccept
argument_list|(
name|socketDescriptor
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|acceptedDescriptor
operator|!=
operator|-
literal|1
operator|&&
name|QAbstractEventDispatcher
operator|::
name|instance
argument_list|()
condition|)
block|{
comment|// Because of WSAAsyncSelect() WSAAccept returns a non blocking socket
comment|// with the same attributes as the listening socket including the current
comment|// WSAAsyncSelect(). To be able to change the socket to blocking mode the
comment|// WSAAsyncSelect() call must be cancled.
name|QSocketNotifier
name|n
argument_list|(
name|acceptedDescriptor
argument_list|,
name|QSocketNotifier
operator|::
name|Read
argument_list|)
decl_stmt|;
name|n
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|n
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
if|#
directive|if
name|defined
argument_list|(
name|QNATIVESOCKETENGINE_DEBUG
argument_list|)
name|qDebug
argument_list|(
literal|"QNativeSocketEnginePrivate::nativeAccept() == %i"
argument_list|,
name|acceptedDescriptor
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|acceptedDescriptor
return|;
block|}
end_function
begin_function
DECL|function|multicastMembershipHelper
specifier|static
name|bool
name|multicastMembershipHelper
parameter_list|(
name|QNativeSocketEnginePrivate
modifier|*
name|d
parameter_list|,
name|int
name|how6
parameter_list|,
name|int
name|how4
parameter_list|,
specifier|const
name|QHostAddress
modifier|&
name|groupAddress
parameter_list|,
specifier|const
name|QNetworkInterface
modifier|&
name|iface
parameter_list|)
block|{
name|int
name|level
init|=
literal|0
decl_stmt|;
name|int
name|sockOpt
init|=
literal|0
decl_stmt|;
name|char
modifier|*
name|sockArg
decl_stmt|;
name|int
name|sockArgSize
decl_stmt|;
name|struct
name|ip_mreq
name|mreq4
decl_stmt|;
name|struct
name|ipv6_mreq
name|mreq6
decl_stmt|;
if|if
condition|(
name|groupAddress
operator|.
name|protocol
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|IPv6Protocol
condition|)
block|{
name|level
operator|=
name|IPPROTO_IPV6
expr_stmt|;
name|sockOpt
operator|=
name|how6
expr_stmt|;
name|sockArg
operator|=
cast|reinterpret_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
operator|&
name|mreq6
argument_list|)
expr_stmt|;
name|sockArgSize
operator|=
sizeof|sizeof
argument_list|(
name|mreq6
argument_list|)
expr_stmt|;
name|memset
argument_list|(
operator|&
name|mreq6
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|mreq6
argument_list|)
argument_list|)
expr_stmt|;
name|Q_IPV6ADDR
name|ip6
init|=
name|groupAddress
operator|.
name|toIPv6Address
argument_list|()
decl_stmt|;
name|memcpy
argument_list|(
operator|&
name|mreq6
operator|.
name|ipv6mr_multiaddr
argument_list|,
operator|&
name|ip6
argument_list|,
sizeof|sizeof
argument_list|(
name|ip6
argument_list|)
argument_list|)
expr_stmt|;
name|mreq6
operator|.
name|ipv6mr_interface
operator|=
name|iface
operator|.
name|index
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|groupAddress
operator|.
name|protocol
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|IPv4Protocol
condition|)
block|{
name|level
operator|=
name|IPPROTO_IP
expr_stmt|;
name|sockOpt
operator|=
name|how4
expr_stmt|;
name|sockArg
operator|=
cast|reinterpret_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
operator|&
name|mreq4
argument_list|)
expr_stmt|;
name|sockArgSize
operator|=
sizeof|sizeof
argument_list|(
name|mreq4
argument_list|)
expr_stmt|;
name|memset
argument_list|(
operator|&
name|mreq4
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|mreq4
argument_list|)
argument_list|)
expr_stmt|;
name|mreq4
operator|.
name|imr_multiaddr
operator|.
name|s_addr
operator|=
name|htonl
argument_list|(
name|groupAddress
operator|.
name|toIPv4Address
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iface
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|QList
argument_list|<
name|QNetworkAddressEntry
argument_list|>
name|addressEntries
init|=
name|iface
operator|.
name|addressEntries
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|addressEntries
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QHostAddress
name|firstIP
init|=
name|addressEntries
operator|.
name|first
argument_list|()
operator|.
name|ip
argument_list|()
decl_stmt|;
name|mreq4
operator|.
name|imr_interface
operator|.
name|s_addr
operator|=
name|htonl
argument_list|(
name|firstIP
operator|.
name|toIPv4Address
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|NetworkError
argument_list|,
name|QNativeSocketEnginePrivate
operator|::
name|NetworkUnreachableErrorString
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
name|mreq4
operator|.
name|imr_interface
operator|.
name|s_addr
operator|=
name|INADDR_ANY
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// unreachable
name|d
operator|->
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|UnsupportedSocketOperationError
argument_list|,
name|QNativeSocketEnginePrivate
operator|::
name|ProtocolUnsupportedErrorString
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|int
name|res
init|=
name|setsockopt
argument_list|(
name|d
operator|->
name|socketDescriptor
argument_list|,
name|level
argument_list|,
name|sockOpt
argument_list|,
name|sockArg
argument_list|,
name|sockArgSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|==
operator|-
literal|1
condition|)
block|{
name|d
operator|->
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|UnsupportedSocketOperationError
argument_list|,
name|QNativeSocketEnginePrivate
operator|::
name|OperationUnsupportedErrorString
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|nativeJoinMulticastGroup
name|bool
name|QNativeSocketEnginePrivate
operator|::
name|nativeJoinMulticastGroup
parameter_list|(
specifier|const
name|QHostAddress
modifier|&
name|groupAddress
parameter_list|,
specifier|const
name|QNetworkInterface
modifier|&
name|iface
parameter_list|)
block|{
return|return
name|multicastMembershipHelper
argument_list|(
name|this
argument_list|,
name|IPV6_JOIN_GROUP
argument_list|,
name|IP_ADD_MEMBERSHIP
argument_list|,
name|groupAddress
argument_list|,
name|iface
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|nativeLeaveMulticastGroup
name|bool
name|QNativeSocketEnginePrivate
operator|::
name|nativeLeaveMulticastGroup
parameter_list|(
specifier|const
name|QHostAddress
modifier|&
name|groupAddress
parameter_list|,
specifier|const
name|QNetworkInterface
modifier|&
name|iface
parameter_list|)
block|{
return|return
name|multicastMembershipHelper
argument_list|(
name|this
argument_list|,
name|IPV6_LEAVE_GROUP
argument_list|,
name|IP_DROP_MEMBERSHIP
argument_list|,
name|groupAddress
argument_list|,
name|iface
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|nativeMulticastInterface
name|QNetworkInterface
name|QNativeSocketEnginePrivate
operator|::
name|nativeMulticastInterface
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|socketProtocol
operator|==
name|QAbstractSocket
operator|::
name|IPv6Protocol
condition|)
block|{
name|uint
name|v
decl_stmt|;
name|QT_SOCKOPTLEN_T
name|sizeofv
init|=
sizeof|sizeof
argument_list|(
name|v
argument_list|)
decl_stmt|;
if|if
condition|(
operator|::
name|getsockopt
argument_list|(
name|socketDescriptor
argument_list|,
name|IPPROTO_IPV6
argument_list|,
name|IPV6_MULTICAST_IF
argument_list|,
operator|(
name|char
operator|*
operator|)
operator|&
name|v
argument_list|,
operator|&
name|sizeofv
argument_list|)
operator|==
operator|-
literal|1
condition|)
return|return
name|QNetworkInterface
argument_list|()
return|;
return|return
name|QNetworkInterface
operator|::
name|interfaceFromIndex
argument_list|(
name|v
argument_list|)
return|;
block|}
name|struct
name|in_addr
name|v
decl_stmt|;
name|v
operator|.
name|s_addr
operator|=
literal|0
expr_stmt|;
name|QT_SOCKOPTLEN_T
name|sizeofv
init|=
sizeof|sizeof
argument_list|(
name|v
argument_list|)
decl_stmt|;
if|if
condition|(
operator|::
name|getsockopt
argument_list|(
name|socketDescriptor
argument_list|,
name|IPPROTO_IP
argument_list|,
name|IP_MULTICAST_IF
argument_list|,
operator|(
name|char
operator|*
operator|)
operator|&
name|v
argument_list|,
operator|&
name|sizeofv
argument_list|)
operator|==
operator|-
literal|1
condition|)
return|return
name|QNetworkInterface
argument_list|()
return|;
if|if
condition|(
name|v
operator|.
name|s_addr
operator|!=
literal|0
operator|&&
name|sizeofv
operator|>=
name|QT_SOCKOPTLEN_T
argument_list|(
sizeof|sizeof
argument_list|(
name|v
argument_list|)
argument_list|)
condition|)
block|{
name|QHostAddress
name|ipv4
argument_list|(
name|ntohl
argument_list|(
name|v
operator|.
name|s_addr
argument_list|)
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|QNetworkInterface
argument_list|>
name|ifaces
init|=
name|QNetworkInterface
operator|::
name|allInterfaces
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ifaces
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QNetworkInterface
modifier|&
name|iface
init|=
name|ifaces
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|iface
operator|.
name|flags
argument_list|()
operator|&
name|QNetworkInterface
operator|::
name|CanMulticast
operator|)
condition|)
continue|continue;
name|QList
argument_list|<
name|QNetworkAddressEntry
argument_list|>
name|entries
init|=
name|iface
operator|.
name|addressEntries
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|entries
operator|.
name|count
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
specifier|const
name|QNetworkAddressEntry
modifier|&
name|entry
init|=
name|entries
operator|.
name|at
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|ip
argument_list|()
operator|==
name|ipv4
condition|)
return|return
name|iface
return|;
block|}
block|}
block|}
return|return
name|QNetworkInterface
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|nativeSetMulticastInterface
name|bool
name|QNativeSocketEnginePrivate
operator|::
name|nativeSetMulticastInterface
parameter_list|(
specifier|const
name|QNetworkInterface
modifier|&
name|iface
parameter_list|)
block|{
if|if
condition|(
name|socketProtocol
operator|==
name|QAbstractSocket
operator|::
name|IPv6Protocol
condition|)
block|{
name|uint
name|v
init|=
name|iface
operator|.
name|isValid
argument_list|()
condition|?
name|iface
operator|.
name|index
argument_list|()
else|:
literal|0
decl_stmt|;
return|return
operator|(
operator|::
name|setsockopt
argument_list|(
name|socketDescriptor
argument_list|,
name|IPPROTO_IPV6
argument_list|,
name|IPV6_MULTICAST_IF
argument_list|,
operator|(
name|char
operator|*
operator|)
operator|&
name|v
argument_list|,
sizeof|sizeof
argument_list|(
name|v
argument_list|)
argument_list|)
operator|!=
operator|-
literal|1
operator|)
return|;
block|}
name|struct
name|in_addr
name|v
decl_stmt|;
if|if
condition|(
name|iface
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|QList
argument_list|<
name|QNetworkAddressEntry
argument_list|>
name|entries
init|=
name|iface
operator|.
name|addressEntries
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|entries
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QNetworkAddressEntry
modifier|&
name|entry
init|=
name|entries
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|const
name|QHostAddress
modifier|&
name|ip
init|=
name|entry
operator|.
name|ip
argument_list|()
decl_stmt|;
if|if
condition|(
name|ip
operator|.
name|protocol
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|IPv4Protocol
condition|)
block|{
name|v
operator|.
name|s_addr
operator|=
name|htonl
argument_list|(
name|ip
operator|.
name|toIPv4Address
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|r
init|=
operator|::
name|setsockopt
argument_list|(
name|socketDescriptor
argument_list|,
name|IPPROTO_IP
argument_list|,
name|IP_MULTICAST_IF
argument_list|,
operator|(
name|char
operator|*
operator|)
operator|&
name|v
argument_list|,
sizeof|sizeof
argument_list|(
name|v
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
operator|-
literal|1
condition|)
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
name|v
operator|.
name|s_addr
operator|=
name|INADDR_ANY
expr_stmt|;
return|return
operator|(
operator|::
name|setsockopt
argument_list|(
name|socketDescriptor
argument_list|,
name|IPPROTO_IP
argument_list|,
name|IP_MULTICAST_IF
argument_list|,
operator|(
name|char
operator|*
operator|)
operator|&
name|v
argument_list|,
sizeof|sizeof
argument_list|(
name|v
argument_list|)
argument_list|)
operator|!=
operator|-
literal|1
operator|)
return|;
block|}
end_function
begin_function
DECL|function|nativeBytesAvailable
name|qint64
name|QNativeSocketEnginePrivate
operator|::
name|nativeBytesAvailable
parameter_list|()
specifier|const
block|{
name|unsigned
name|long
name|nbytes
init|=
literal|0
decl_stmt|;
name|unsigned
name|long
name|dummy
init|=
literal|0
decl_stmt|;
name|DWORD
name|sizeWritten
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|::
name|WSAIoctl
argument_list|(
name|socketDescriptor
argument_list|,
name|FIONREAD
argument_list|,
operator|&
name|dummy
argument_list|,
sizeof|sizeof
argument_list|(
name|dummy
argument_list|)
argument_list|,
operator|&
name|nbytes
argument_list|,
sizeof|sizeof
argument_list|(
name|nbytes
argument_list|)
argument_list|,
operator|&
name|sizeWritten
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
operator|==
name|SOCKET_ERROR
condition|)
block|{
name|WS_ERROR_DEBUG
argument_list|(
name|WSAGetLastError
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
comment|// ioctlsocket sometimes reports 1 byte available for datagrams
comment|// while the following recvfrom returns -1 and claims connection
comment|// was reset (udp is connectionless). so we peek one byte to
comment|// catch this case and return 0 bytes available if recvfrom
comment|// fails.
if|if
condition|(
name|nbytes
operator|==
literal|1
operator|&&
name|socketType
operator|==
name|QAbstractSocket
operator|::
name|UdpSocket
condition|)
block|{
name|char
name|c
decl_stmt|;
name|WSABUF
name|buf
decl_stmt|;
name|buf
operator|.
name|buf
operator|=
operator|&
name|c
expr_stmt|;
name|buf
operator|.
name|len
operator|=
sizeof|sizeof
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|DWORD
name|flags
init|=
name|MSG_PEEK
decl_stmt|;
if|if
condition|(
operator|::
name|WSARecvFrom
argument_list|(
name|socketDescriptor
argument_list|,
operator|&
name|buf
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
operator|&
name|flags
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
operator|==
name|SOCKET_ERROR
condition|)
return|return
literal|0
return|;
block|}
return|return
name|nbytes
return|;
block|}
end_function
begin_function
DECL|function|nativeHasPendingDatagrams
name|bool
name|QNativeSocketEnginePrivate
operator|::
name|nativeHasPendingDatagrams
parameter_list|()
specifier|const
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
comment|// Create a sockaddr struct and reset its port number.
name|qt_sockaddr
name|storage
decl_stmt|;
name|QT_SOCKLEN_T
name|storageSize
init|=
sizeof|sizeof
argument_list|(
name|storage
argument_list|)
decl_stmt|;
name|memset
argument_list|(
operator|&
name|storage
argument_list|,
literal|0
argument_list|,
name|storageSize
argument_list|)
expr_stmt|;
name|bool
name|result
init|=
literal|false
decl_stmt|;
comment|// Peek 0 bytes into the next message. The size of the message may
comment|// well be 0, so we check if there was a sender.
name|char
name|c
decl_stmt|;
name|WSABUF
name|buf
decl_stmt|;
name|buf
operator|.
name|buf
operator|=
operator|&
name|c
expr_stmt|;
name|buf
operator|.
name|len
operator|=
sizeof|sizeof
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|DWORD
name|available
init|=
literal|0
decl_stmt|;
name|DWORD
name|flags
init|=
name|MSG_PEEK
decl_stmt|;
name|int
name|ret
init|=
operator|::
name|WSARecvFrom
argument_list|(
name|socketDescriptor
argument_list|,
operator|&
name|buf
argument_list|,
literal|1
argument_list|,
operator|&
name|available
argument_list|,
operator|&
name|flags
argument_list|,
operator|&
name|storage
operator|.
name|a
argument_list|,
operator|&
name|storageSize
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|int
name|err
init|=
name|WSAGetLastError
argument_list|()
decl_stmt|;
if|if
condition|(
name|ret
operator|==
name|SOCKET_ERROR
operator|&&
name|err
operator|!=
name|WSAEMSGSIZE
condition|)
block|{
name|WS_ERROR_DEBUG
argument_list|(
name|err
argument_list|)
expr_stmt|;
if|if
condition|(
name|err
operator|==
name|WSAECONNRESET
condition|)
block|{
comment|// Discard error message to prevent QAbstractSocket from
comment|// getting this message repeatedly after reenabling the
comment|// notifiers.
name|flags
operator|=
literal|0
expr_stmt|;
operator|::
name|WSARecvFrom
argument_list|(
name|socketDescriptor
argument_list|,
operator|&
name|buf
argument_list|,
literal|1
argument_list|,
operator|&
name|available
argument_list|,
operator|&
name|flags
argument_list|,
operator|&
name|storage
operator|.
name|a
argument_list|,
operator|&
name|storageSize
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// If there's no error, or if our buffer was too small, there must be
comment|// a pending datagram.
name|result
operator|=
literal|true
expr_stmt|;
block|}
else|#
directive|else
comment|// Q_OS_WINCE
name|bool
name|result
init|=
literal|false
decl_stmt|;
name|fd_set
name|readS
decl_stmt|;
name|FD_ZERO
argument_list|(
operator|&
name|readS
argument_list|)
expr_stmt|;
name|FD_SET
argument_list|(
operator|(
name|SOCKET
operator|)
name|socketDescriptor
argument_list|,
operator|&
name|readS
argument_list|)
expr_stmt|;
name|timeval
name|timeout
decl_stmt|;
name|timeout
operator|.
name|tv_sec
operator|=
literal|0
expr_stmt|;
name|timeout
operator|.
name|tv_usec
operator|=
literal|5000
expr_stmt|;
name|int
name|available
init|=
operator|::
name|select
argument_list|(
literal|1
argument_list|,
operator|&
name|readS
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|&
name|timeout
argument_list|)
decl_stmt|;
name|result
operator|=
name|available
operator|>
literal|0
condition|?
literal|true
else|:
literal|false
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|QNATIVESOCKETENGINE_DEBUG
argument_list|)
name|qDebug
argument_list|(
literal|"QNativeSocketEnginePrivate::nativeHasPendingDatagrams() == %s"
argument_list|,
name|result
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|nativePendingDatagramSize
name|qint64
name|QNativeSocketEnginePrivate
operator|::
name|nativePendingDatagramSize
parameter_list|()
specifier|const
block|{
name|qint64
name|ret
init|=
operator|-
literal|1
decl_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|int
name|recvResult
init|=
literal|0
decl_stmt|;
name|DWORD
name|flags
decl_stmt|;
name|DWORD
name|bufferCount
init|=
literal|5
decl_stmt|;
name|WSABUF
modifier|*
name|buf
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
comment|// the data written to udpMessagePeekBuffer is discarded, so
comment|// this function is still reentrant although it might not look
comment|// so.
specifier|static
name|char
name|udpMessagePeekBuffer
index|[
literal|8192
index|]
decl_stmt|;
name|buf
operator|=
operator|new
name|WSABUF
index|[
name|bufferCount
index|]
expr_stmt|;
for|for
control|(
name|DWORD
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bufferCount
condition|;
name|i
operator|++
control|)
block|{
name|buf
index|[
name|i
index|]
operator|.
name|buf
operator|=
name|udpMessagePeekBuffer
expr_stmt|;
name|buf
index|[
name|i
index|]
operator|.
name|len
operator|=
sizeof|sizeof
argument_list|(
name|udpMessagePeekBuffer
argument_list|)
expr_stmt|;
block|}
name|flags
operator|=
name|MSG_PEEK
expr_stmt|;
name|DWORD
name|bytesRead
init|=
literal|0
decl_stmt|;
name|recvResult
operator|=
operator|::
name|WSARecv
argument_list|(
name|socketDescriptor
argument_list|,
name|buf
argument_list|,
name|bufferCount
argument_list|,
operator|&
name|bytesRead
argument_list|,
operator|&
name|flags
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|int
name|err
init|=
name|WSAGetLastError
argument_list|()
decl_stmt|;
if|if
condition|(
name|recvResult
operator|!=
name|SOCKET_ERROR
condition|)
block|{
name|ret
operator|=
name|qint64
argument_list|(
name|bytesRead
argument_list|)
expr_stmt|;
break|break;
block|}
elseif|else
if|if
condition|(
name|recvResult
operator|==
name|SOCKET_ERROR
operator|&&
name|err
operator|==
name|WSAEMSGSIZE
condition|)
block|{
name|bufferCount
operator|+=
literal|5
expr_stmt|;
operator|delete
index|[]
name|buf
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|recvResult
operator|==
name|SOCKET_ERROR
condition|)
block|{
name|WS_ERROR_DEBUG
argument_list|(
name|err
argument_list|)
expr_stmt|;
name|ret
operator|=
operator|-
literal|1
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|buf
condition|)
operator|delete
index|[]
name|buf
expr_stmt|;
else|#
directive|else
comment|// Q_OS_WINCE
name|DWORD
name|size
init|=
operator|-
literal|1
decl_stmt|;
name|DWORD
name|bytesReturned
decl_stmt|;
name|int
name|ioResult
init|=
name|WSAIoctl
argument_list|(
name|socketDescriptor
argument_list|,
name|FIONREAD
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|&
name|size
argument_list|,
sizeof|sizeof
argument_list|(
name|size
argument_list|)
argument_list|,
operator|&
name|bytesReturned
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|ioResult
operator|==
name|SOCKET_ERROR
condition|)
block|{
name|int
name|err
init|=
name|WSAGetLastError
argument_list|()
decl_stmt|;
name|WS_ERROR_DEBUG
argument_list|(
name|err
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|qint64
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|QNATIVESOCKETENGINE_DEBUG
argument_list|)
name|qDebug
argument_list|(
literal|"QNativeSocketEnginePrivate::nativePendingDatagramSize() == %li"
argument_list|,
name|ret
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|nativeReceiveDatagram
name|qint64
name|QNativeSocketEnginePrivate
operator|::
name|nativeReceiveDatagram
parameter_list|(
name|char
modifier|*
name|data
parameter_list|,
name|qint64
name|maxLength
parameter_list|,
name|QHostAddress
modifier|*
name|address
parameter_list|,
name|quint16
modifier|*
name|port
parameter_list|)
block|{
name|qint64
name|ret
init|=
literal|0
decl_stmt|;
name|qt_sockaddr
name|aa
decl_stmt|;
name|memset
argument_list|(
operator|&
name|aa
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|aa
argument_list|)
argument_list|)
expr_stmt|;
name|QT_SOCKLEN_T
name|sz
decl_stmt|;
name|sz
operator|=
sizeof|sizeof
argument_list|(
name|aa
argument_list|)
expr_stmt|;
name|WSABUF
name|buf
decl_stmt|;
name|buf
operator|.
name|buf
operator|=
name|data
expr_stmt|;
name|buf
operator|.
name|len
operator|=
name|maxLength
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|buf
operator|.
name|buf
operator|=
name|data
expr_stmt|;
name|buf
operator|.
name|len
operator|=
name|maxLength
expr_stmt|;
else|#
directive|else
name|char
name|tmpChar
decl_stmt|;
name|buf
operator|.
name|buf
operator|=
name|data
condition|?
name|data
else|:
operator|&
name|tmpChar
expr_stmt|;
name|buf
operator|.
name|len
operator|=
name|maxLength
expr_stmt|;
endif|#
directive|endif
name|DWORD
name|flags
init|=
literal|0
decl_stmt|;
name|DWORD
name|bytesRead
init|=
literal|0
decl_stmt|;
name|int
name|wsaRet
init|=
operator|::
name|WSARecvFrom
argument_list|(
name|socketDescriptor
argument_list|,
operator|&
name|buf
argument_list|,
literal|1
argument_list|,
operator|&
name|bytesRead
argument_list|,
operator|&
name|flags
argument_list|,
operator|&
name|aa
operator|.
name|a
argument_list|,
operator|&
name|sz
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|wsaRet
operator|==
name|SOCKET_ERROR
condition|)
block|{
name|int
name|err
init|=
name|WSAGetLastError
argument_list|()
decl_stmt|;
if|if
condition|(
name|err
operator|==
name|WSAEMSGSIZE
condition|)
block|{
comment|// it is ok the buffer was to small if bytesRead is larger than
comment|// maxLength then assume bytes read is really maxLenth
name|ret
operator|=
name|qint64
argument_list|(
name|bytesRead
argument_list|)
operator|>
name|maxLength
condition|?
name|maxLength
else|:
name|qint64
argument_list|(
name|bytesRead
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|WS_ERROR_DEBUG
argument_list|(
name|err
argument_list|)
expr_stmt|;
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|NetworkError
argument_list|,
name|ReceiveDatagramErrorString
argument_list|)
expr_stmt|;
name|ret
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
else|else
block|{
name|ret
operator|=
name|qint64
argument_list|(
name|bytesRead
argument_list|)
expr_stmt|;
block|}
name|qt_socket_getPortAndAddress
argument_list|(
name|socketDescriptor
argument_list|,
operator|&
name|aa
argument_list|,
name|port
argument_list|,
name|address
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QNATIVESOCKETENGINE_DEBUG
argument_list|)
name|qDebug
argument_list|(
literal|"QNativeSocketEnginePrivate::nativeReceiveDatagram(%p \"%s\", %li, %s, %i) == %li"
argument_list|,
name|data
argument_list|,
name|qt_prettyDebug
argument_list|(
name|data
argument_list|,
name|qMin
argument_list|<
name|qint64
argument_list|>
argument_list|(
name|ret
argument_list|,
literal|16
argument_list|)
argument_list|,
name|ret
argument_list|)
operator|.
name|data
argument_list|()
argument_list|,
name|maxLength
argument_list|,
name|address
condition|?
name|address
operator|->
name|toString
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
else|:
literal|"(nil)"
argument_list|,
name|port
condition|?
operator|*
name|port
else|:
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|nativeSendDatagram
name|qint64
name|QNativeSocketEnginePrivate
operator|::
name|nativeSendDatagram
parameter_list|(
specifier|const
name|char
modifier|*
name|data
parameter_list|,
name|qint64
name|len
parameter_list|,
specifier|const
name|QHostAddress
modifier|&
name|address
parameter_list|,
name|quint16
name|port
parameter_list|)
block|{
name|qint64
name|ret
init|=
operator|-
literal|1
decl_stmt|;
name|struct
name|sockaddr_in
name|sockAddrIPv4
decl_stmt|;
name|qt_sockaddr_in6
name|sockAddrIPv6
decl_stmt|;
name|struct
name|sockaddr
modifier|*
name|sockAddrPtr
init|=
literal|0
decl_stmt|;
name|QT_SOCKLEN_T
name|sockAddrSize
init|=
literal|0
decl_stmt|;
name|setPortAndAddress
argument_list|(
operator|&
name|sockAddrIPv4
argument_list|,
operator|&
name|sockAddrIPv6
argument_list|,
name|port
argument_list|,
name|address
argument_list|,
operator|&
name|sockAddrPtr
argument_list|,
operator|&
name|sockAddrSize
argument_list|)
expr_stmt|;
name|WSABUF
name|buf
decl_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|buf
operator|.
name|buf
operator|=
name|len
condition|?
operator|(
name|char
operator|*
operator|)
name|data
else|:
literal|0
expr_stmt|;
else|#
directive|else
name|char
name|tmp
decl_stmt|;
name|buf
operator|.
name|buf
operator|=
name|len
condition|?
operator|(
name|char
operator|*
operator|)
name|data
else|:
operator|&
name|tmp
expr_stmt|;
endif|#
directive|endif
name|buf
operator|.
name|len
operator|=
name|len
expr_stmt|;
name|DWORD
name|flags
init|=
literal|0
decl_stmt|;
name|DWORD
name|bytesSent
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|::
name|WSASendTo
argument_list|(
name|socketDescriptor
argument_list|,
operator|&
name|buf
argument_list|,
literal|1
argument_list|,
operator|&
name|bytesSent
argument_list|,
name|flags
argument_list|,
name|sockAddrPtr
argument_list|,
name|sockAddrSize
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
operator|==
name|SOCKET_ERROR
condition|)
block|{
name|int
name|err
init|=
name|WSAGetLastError
argument_list|()
decl_stmt|;
name|WS_ERROR_DEBUG
argument_list|(
name|err
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|err
condition|)
block|{
case|case
name|WSAEMSGSIZE
case|:
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|DatagramTooLargeError
argument_list|,
name|DatagramTooLargeErrorString
argument_list|)
expr_stmt|;
break|break;
default|default:
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|NetworkError
argument_list|,
name|SendDatagramErrorString
argument_list|)
expr_stmt|;
break|break;
block|}
name|ret
operator|=
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|qint64
argument_list|(
name|bytesSent
argument_list|)
expr_stmt|;
block|}
if|#
directive|if
name|defined
argument_list|(
name|QNATIVESOCKETENGINE_DEBUG
argument_list|)
name|qDebug
argument_list|(
literal|"QNativeSocketEnginePrivate::nativeSendDatagram(%p \"%s\", %li, \"%s\", %i) == %li"
argument_list|,
name|data
argument_list|,
name|qt_prettyDebug
argument_list|(
name|data
argument_list|,
name|qMin
argument_list|<
name|qint64
argument_list|>
argument_list|(
name|len
argument_list|,
literal|16
argument_list|)
argument_list|,
name|len
argument_list|)
operator|.
name|data
argument_list|()
argument_list|,
literal|0
argument_list|,
name|address
operator|.
name|toString
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|port
argument_list|,
name|ret
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|nativeWrite
name|qint64
name|QNativeSocketEnginePrivate
operator|::
name|nativeWrite
parameter_list|(
specifier|const
name|char
modifier|*
name|data
parameter_list|,
name|qint64
name|len
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QNativeSocketEngine
argument_list|)
expr_stmt|;
name|qint64
name|ret
init|=
literal|0
decl_stmt|;
name|qint64
name|bytesToSend
init|=
name|len
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|WSABUF
name|buf
decl_stmt|;
name|buf
operator|.
name|buf
operator|=
operator|(
name|char
operator|*
operator|)
name|data
operator|+
name|ret
expr_stmt|;
name|buf
operator|.
name|len
operator|=
name|bytesToSend
expr_stmt|;
name|DWORD
name|flags
init|=
literal|0
decl_stmt|;
name|DWORD
name|bytesWritten
init|=
literal|0
decl_stmt|;
name|int
name|socketRet
init|=
operator|::
name|WSASend
argument_list|(
name|socketDescriptor
argument_list|,
operator|&
name|buf
argument_list|,
literal|1
argument_list|,
operator|&
name|bytesWritten
argument_list|,
name|flags
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|ret
operator|+=
name|qint64
argument_list|(
name|bytesWritten
argument_list|)
expr_stmt|;
name|int
name|err
decl_stmt|;
if|if
condition|(
name|socketRet
operator|!=
name|SOCKET_ERROR
condition|)
block|{
if|if
condition|(
name|ret
operator|==
name|len
condition|)
break|break;
else|else
continue|continue;
block|}
elseif|else
if|if
condition|(
operator|(
name|err
operator|=
name|WSAGetLastError
argument_list|()
operator|)
operator|==
name|WSAEWOULDBLOCK
condition|)
block|{
break|break;
block|}
elseif|else
if|if
condition|(
name|err
operator|==
name|WSAENOBUFS
condition|)
block|{
comment|// this function used to not send more than 49152 per call to WSASendTo
comment|// to avoid getting a WSAENOBUFS. However this is a performance regression
comment|// and we think it only appears with old windows versions. We now handle the
comment|// WSAENOBUFS and hope it never appears anyway.
comment|// just go on, the next loop run we will try a smaller number
block|}
else|else
block|{
name|WS_ERROR_DEBUG
argument_list|(
name|err
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|err
condition|)
block|{
case|case
name|WSAECONNRESET
case|:
case|case
name|WSAECONNABORTED
case|:
name|ret
operator|=
operator|-
literal|1
expr_stmt|;
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|NetworkError
argument_list|,
name|WriteErrorString
argument_list|)
expr_stmt|;
name|q
operator|->
name|close
argument_list|()
expr_stmt|;
break|break;
default|default:
break|break;
block|}
break|break;
block|}
comment|// for next send:
name|bytesToSend
operator|=
name|qMin
argument_list|<
name|qint64
argument_list|>
argument_list|(
literal|49152
argument_list|,
name|len
operator|-
name|ret
argument_list|)
expr_stmt|;
block|}
if|#
directive|if
name|defined
argument_list|(
name|QNATIVESOCKETENGINE_DEBUG
argument_list|)
name|qDebug
argument_list|(
literal|"QNativeSocketEnginePrivate::nativeWrite(%p \"%s\", %li) == %li"
argument_list|,
name|data
argument_list|,
name|qt_prettyDebug
argument_list|(
name|data
argument_list|,
name|qMin
argument_list|(
operator|(
name|int
operator|)
name|ret
argument_list|,
literal|16
argument_list|)
argument_list|,
operator|(
name|int
operator|)
name|ret
argument_list|)
operator|.
name|data
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|len
argument_list|,
operator|(
name|int
operator|)
name|ret
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|nativeRead
name|qint64
name|QNativeSocketEnginePrivate
operator|::
name|nativeRead
parameter_list|(
name|char
modifier|*
name|data
parameter_list|,
name|qint64
name|maxLength
parameter_list|)
block|{
name|qint64
name|ret
init|=
operator|-
literal|1
decl_stmt|;
name|WSABUF
name|buf
decl_stmt|;
name|buf
operator|.
name|buf
operator|=
name|data
expr_stmt|;
name|buf
operator|.
name|len
operator|=
name|maxLength
expr_stmt|;
name|DWORD
name|flags
init|=
literal|0
decl_stmt|;
name|DWORD
name|bytesRead
init|=
literal|0
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|WSASetLastError
argument_list|(
literal|0
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|::
name|WSARecv
argument_list|(
name|socketDescriptor
argument_list|,
operator|&
name|buf
argument_list|,
literal|1
argument_list|,
operator|&
name|bytesRead
argument_list|,
operator|&
name|flags
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
operator|==
name|SOCKET_ERROR
condition|)
block|{
name|int
name|err
init|=
name|WSAGetLastError
argument_list|()
decl_stmt|;
name|WS_ERROR_DEBUG
argument_list|(
name|err
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|err
condition|)
block|{
case|case
name|WSAEWOULDBLOCK
case|:
name|ret
operator|=
operator|-
literal|2
expr_stmt|;
break|break;
case|case
name|WSAEBADF
case|:
case|case
name|WSAEINVAL
case|:
comment|//error string is now set in read(), not here in nativeRead()
break|break;
case|case
name|WSAECONNRESET
case|:
case|case
name|WSAECONNABORTED
case|:
comment|// for tcp sockets this will be handled in QNativeSocketEngine::read
name|ret
operator|=
literal|0
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
else|else
block|{
if|if
condition|(
name|WSAGetLastError
argument_list|()
operator|==
name|WSAEWOULDBLOCK
condition|)
name|ret
operator|=
operator|-
literal|2
expr_stmt|;
else|else
name|ret
operator|=
name|qint64
argument_list|(
name|bytesRead
argument_list|)
expr_stmt|;
block|}
if|#
directive|if
name|defined
argument_list|(
name|QNATIVESOCKETENGINE_DEBUG
argument_list|)
if|if
condition|(
name|ret
operator|!=
operator|-
literal|2
condition|)
block|{
name|qDebug
argument_list|(
literal|"QNativeSocketEnginePrivate::nativeRead(%p \"%s\", %l) == %li"
argument_list|,
name|data
argument_list|,
name|qt_prettyDebug
argument_list|(
name|data
argument_list|,
name|qMin
argument_list|(
operator|(
name|int
operator|)
name|bytesRead
argument_list|,
literal|16
argument_list|)
argument_list|,
operator|(
name|int
operator|)
name|bytesRead
argument_list|)
operator|.
name|data
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|maxLength
argument_list|,
operator|(
name|int
operator|)
name|ret
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qDebug
argument_list|(
literal|"QNativeSocketEnginePrivate::nativeRead(%p, %l) == -2 (WOULD BLOCK)"
argument_list|,
name|data
argument_list|,
name|int
argument_list|(
name|maxLength
argument_list|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|nativeSelect
name|int
name|QNativeSocketEnginePrivate
operator|::
name|nativeSelect
parameter_list|(
name|int
name|timeout
parameter_list|,
name|bool
name|selectForRead
parameter_list|)
specifier|const
block|{
name|bool
name|readEnabled
init|=
name|selectForRead
operator|&&
name|readNotifier
operator|&&
name|readNotifier
operator|->
name|isEnabled
argument_list|()
decl_stmt|;
if|if
condition|(
name|readEnabled
condition|)
name|readNotifier
operator|->
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|fd_set
name|fds
decl_stmt|;
name|int
name|ret
init|=
literal|0
decl_stmt|;
name|memset
argument_list|(
operator|&
name|fds
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|fd_set
argument_list|)
argument_list|)
expr_stmt|;
name|fds
operator|.
name|fd_count
operator|=
literal|1
expr_stmt|;
name|fds
operator|.
name|fd_array
index|[
literal|0
index|]
operator|=
operator|(
name|SOCKET
operator|)
name|socketDescriptor
expr_stmt|;
name|struct
name|timeval
name|tv
decl_stmt|;
name|tv
operator|.
name|tv_sec
operator|=
name|timeout
operator|/
literal|1000
expr_stmt|;
name|tv
operator|.
name|tv_usec
operator|=
operator|(
name|timeout
operator|%
literal|1000
operator|)
operator|*
literal|1000
expr_stmt|;
if|if
condition|(
name|selectForRead
condition|)
block|{
name|ret
operator|=
name|select
argument_list|(
literal|0
argument_list|,
operator|&
name|fds
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|timeout
operator|<
literal|0
condition|?
literal|0
else|:
operator|&
name|tv
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// select for write
comment|// Windows needs this to report errors when connecting a socket ...
name|fd_set
name|fdexception
decl_stmt|;
name|FD_ZERO
argument_list|(
operator|&
name|fdexception
argument_list|)
expr_stmt|;
name|FD_SET
argument_list|(
operator|(
name|SOCKET
operator|)
name|socketDescriptor
argument_list|,
operator|&
name|fdexception
argument_list|)
expr_stmt|;
name|ret
operator|=
name|select
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|&
name|fds
argument_list|,
operator|&
name|fdexception
argument_list|,
name|timeout
operator|<
literal|0
condition|?
literal|0
else|:
operator|&
name|tv
argument_list|)
expr_stmt|;
comment|// ... but if it is actually set, pretend it did not happen
if|if
condition|(
name|ret
operator|>
literal|0
operator|&&
name|FD_ISSET
argument_list|(
operator|(
name|SOCKET
operator|)
name|socketDescriptor
argument_list|,
operator|&
name|fdexception
argument_list|)
condition|)
name|ret
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|readEnabled
condition|)
name|readNotifier
operator|->
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|nativeSelect
name|int
name|QNativeSocketEnginePrivate
operator|::
name|nativeSelect
parameter_list|(
name|int
name|timeout
parameter_list|,
name|bool
name|checkRead
parameter_list|,
name|bool
name|checkWrite
parameter_list|,
name|bool
modifier|*
name|selectForRead
parameter_list|,
name|bool
modifier|*
name|selectForWrite
parameter_list|)
specifier|const
block|{
name|bool
name|readEnabled
init|=
name|checkRead
operator|&&
name|readNotifier
operator|&&
name|readNotifier
operator|->
name|isEnabled
argument_list|()
decl_stmt|;
if|if
condition|(
name|readEnabled
condition|)
name|readNotifier
operator|->
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|fd_set
name|fdread
decl_stmt|;
name|fd_set
name|fdwrite
decl_stmt|;
name|fd_set
name|fdexception
decl_stmt|;
name|int
name|ret
init|=
literal|0
decl_stmt|;
name|memset
argument_list|(
operator|&
name|fdread
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|fd_set
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|checkRead
condition|)
block|{
name|fdread
operator|.
name|fd_count
operator|=
literal|1
expr_stmt|;
name|fdread
operator|.
name|fd_array
index|[
literal|0
index|]
operator|=
operator|(
name|SOCKET
operator|)
name|socketDescriptor
expr_stmt|;
block|}
name|memset
argument_list|(
operator|&
name|fdwrite
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|fd_set
argument_list|)
argument_list|)
expr_stmt|;
name|FD_ZERO
argument_list|(
operator|&
name|fdexception
argument_list|)
expr_stmt|;
if|if
condition|(
name|checkWrite
condition|)
block|{
name|fdwrite
operator|.
name|fd_count
operator|=
literal|1
expr_stmt|;
name|fdwrite
operator|.
name|fd_array
index|[
literal|0
index|]
operator|=
operator|(
name|SOCKET
operator|)
name|socketDescriptor
expr_stmt|;
comment|// Windows needs this to report errors when connecting a socket
name|FD_SET
argument_list|(
operator|(
name|SOCKET
operator|)
name|socketDescriptor
argument_list|,
operator|&
name|fdexception
argument_list|)
expr_stmt|;
block|}
name|struct
name|timeval
name|tv
decl_stmt|;
name|tv
operator|.
name|tv_sec
operator|=
name|timeout
operator|/
literal|1000
expr_stmt|;
name|tv
operator|.
name|tv_usec
operator|=
operator|(
name|timeout
operator|%
literal|1000
operator|)
operator|*
literal|1000
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|ret
operator|=
name|select
argument_list|(
name|socketDescriptor
operator|+
literal|1
argument_list|,
operator|&
name|fdread
argument_list|,
operator|&
name|fdwrite
argument_list|,
operator|&
name|fdexception
argument_list|,
name|timeout
operator|<
literal|0
condition|?
literal|0
else|:
operator|&
name|tv
argument_list|)
expr_stmt|;
else|#
directive|else
name|ret
operator|=
name|select
argument_list|(
literal|1
argument_list|,
operator|&
name|fdread
argument_list|,
operator|&
name|fdwrite
argument_list|,
operator|&
name|fdexception
argument_list|,
name|timeout
operator|<
literal|0
condition|?
literal|0
else|:
operator|&
name|tv
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|//... but if it is actually set, pretend it did not happen
if|if
condition|(
name|ret
operator|>
literal|0
operator|&&
name|FD_ISSET
argument_list|(
operator|(
name|SOCKET
operator|)
name|socketDescriptor
argument_list|,
operator|&
name|fdexception
argument_list|)
condition|)
name|ret
operator|--
expr_stmt|;
if|if
condition|(
name|readEnabled
condition|)
name|readNotifier
operator|->
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
operator|<=
literal|0
condition|)
return|return
name|ret
return|;
operator|*
name|selectForRead
operator|=
name|FD_ISSET
argument_list|(
operator|(
name|SOCKET
operator|)
name|socketDescriptor
argument_list|,
operator|&
name|fdread
argument_list|)
expr_stmt|;
operator|*
name|selectForWrite
operator|=
name|FD_ISSET
argument_list|(
operator|(
name|SOCKET
operator|)
name|socketDescriptor
argument_list|,
operator|&
name|fdwrite
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|nativeClose
name|void
name|QNativeSocketEnginePrivate
operator|::
name|nativeClose
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|QTCPSOCKETENGINE_DEBUG
argument_list|)
name|qDebug
argument_list|(
literal|"QNativeSocketEnginePrivate::nativeClose()"
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// We were doing a setsockopt here before with SO_DONTLINGER. (However with kind of wrong
comment|// usage of parameters, it wants a BOOL but we used a struct and pretended it to be bool).
comment|// We don't think setting this option should be done here, if a user wants it she/he can
comment|// do it manually with socketDescriptor()/setSocketDescriptor();
operator|::
name|closesocket
argument_list|(
name|socketDescriptor
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
