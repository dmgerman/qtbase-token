begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtNetwork module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qlocalsocket.h"
end_include
begin_include
include|#
directive|include
file|"qlocalsocket_p.h"
end_include
begin_include
include|#
directive|include
file|"qnet_unix_p.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_LOCALSOCKET
end_ifndef
begin_include
include|#
directive|include
file|<sys/types.h>
end_include
begin_include
include|#
directive|include
file|<sys/socket.h>
end_include
begin_include
include|#
directive|include
file|<sys/un.h>
end_include
begin_include
include|#
directive|include
file|<unistd.h>
end_include
begin_include
include|#
directive|include
file|<fcntl.h>
end_include
begin_include
include|#
directive|include
file|<errno.h>
end_include
begin_include
include|#
directive|include
file|<qdir.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<qelapsedtimer.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_VXWORKS
end_ifdef
begin_include
include|#
directive|include
file|<selectLib.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_define
DECL|macro|QT_CONNECT_TIMEOUT
define|#
directive|define
name|QT_CONNECT_TIMEOUT
value|30000
end_define
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_constructor
DECL|function|QLocalSocketPrivate
name|QLocalSocketPrivate
operator|::
name|QLocalSocketPrivate
parameter_list|()
member_init_list|:
name|QIODevicePrivate
argument_list|()
member_init_list|,
name|delayConnect
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|connectTimer
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|connectingSocket
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|connectingOpenMode
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|state
argument_list|(
name|QLocalSocket
operator|::
name|UnconnectedState
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|init
name|void
name|QLocalSocketPrivate
operator|::
name|init
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QLocalSocket
argument_list|)
expr_stmt|;
comment|// QIODevice signals
name|q
operator|->
name|connect
argument_list|(
operator|&
name|unixSocket
argument_list|,
name|SIGNAL
argument_list|(
name|aboutToClose
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SIGNAL
argument_list|(
name|aboutToClose
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|->
name|connect
argument_list|(
operator|&
name|unixSocket
argument_list|,
name|SIGNAL
argument_list|(
name|bytesWritten
argument_list|(
name|qint64
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SIGNAL
argument_list|(
name|bytesWritten
argument_list|(
name|qint64
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|->
name|connect
argument_list|(
operator|&
name|unixSocket
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// QAbstractSocket signals
name|q
operator|->
name|connect
argument_list|(
operator|&
name|unixSocket
argument_list|,
name|SIGNAL
argument_list|(
name|connected
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SIGNAL
argument_list|(
name|connected
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|->
name|connect
argument_list|(
operator|&
name|unixSocket
argument_list|,
name|SIGNAL
argument_list|(
name|disconnected
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SIGNAL
argument_list|(
name|disconnected
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|->
name|connect
argument_list|(
operator|&
name|unixSocket
argument_list|,
name|SIGNAL
argument_list|(
name|stateChanged
argument_list|(
name|QAbstractSocket
operator|::
name|SocketState
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_stateChanged
argument_list|(
name|QAbstractSocket
operator|::
name|SocketState
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|->
name|connect
argument_list|(
operator|&
name|unixSocket
argument_list|,
name|SIGNAL
argument_list|(
name|error
argument_list|(
name|QAbstractSocket
operator|::
name|SocketError
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_error
argument_list|(
name|QAbstractSocket
operator|::
name|SocketError
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|->
name|connect
argument_list|(
operator|&
name|unixSocket
argument_list|,
name|SIGNAL
argument_list|(
name|readChannelFinished
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SIGNAL
argument_list|(
name|readChannelFinished
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|unixSocket
operator|.
name|setParent
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|_q_error
name|void
name|QLocalSocketPrivate
operator|::
name|_q_error
parameter_list|(
name|QAbstractSocket
operator|::
name|SocketError
name|socketError
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QLocalSocket
argument_list|)
expr_stmt|;
name|QString
name|function
init|=
name|QLatin1String
argument_list|(
literal|"QLocalSocket"
argument_list|)
decl_stmt|;
name|QLocalSocket
operator|::
name|LocalSocketError
name|error
init|=
operator|(
name|QLocalSocket
operator|::
name|LocalSocketError
operator|)
name|socketError
decl_stmt|;
name|QString
name|errorString
init|=
name|generateErrorString
argument_list|(
name|error
argument_list|,
name|function
argument_list|)
decl_stmt|;
name|q
operator|->
name|setErrorString
argument_list|(
name|errorString
argument_list|)
expr_stmt|;
emit|emit
name|q
operator|->
name|error
argument_list|(
name|error
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|_q_stateChanged
name|void
name|QLocalSocketPrivate
operator|::
name|_q_stateChanged
parameter_list|(
name|QAbstractSocket
operator|::
name|SocketState
name|newState
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QLocalSocket
argument_list|)
expr_stmt|;
name|QLocalSocket
operator|::
name|LocalSocketState
name|currentState
init|=
name|state
decl_stmt|;
switch|switch
condition|(
name|newState
condition|)
block|{
case|case
name|QAbstractSocket
operator|::
name|UnconnectedState
case|:
name|state
operator|=
name|QLocalSocket
operator|::
name|UnconnectedState
expr_stmt|;
name|serverName
operator|.
name|clear
argument_list|()
expr_stmt|;
name|fullServerName
operator|.
name|clear
argument_list|()
expr_stmt|;
break|break;
case|case
name|QAbstractSocket
operator|::
name|ConnectingState
case|:
name|state
operator|=
name|QLocalSocket
operator|::
name|ConnectingState
expr_stmt|;
break|break;
case|case
name|QAbstractSocket
operator|::
name|ConnectedState
case|:
name|state
operator|=
name|QLocalSocket
operator|::
name|ConnectedState
expr_stmt|;
break|break;
case|case
name|QAbstractSocket
operator|::
name|ClosingState
case|:
name|state
operator|=
name|QLocalSocket
operator|::
name|ClosingState
expr_stmt|;
break|break;
default|default:
if|#
directive|if
name|defined
name|QLOCALSOCKET_DEBUG
name|qWarning
argument_list|()
operator|<<
literal|"QLocalSocket::Unhandled socket state change:"
operator|<<
name|newState
expr_stmt|;
endif|#
directive|endif
return|return;
block|}
if|if
condition|(
name|currentState
operator|!=
name|state
condition|)
emit|emit
name|q
operator|->
name|stateChanged
argument_list|(
name|state
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|generateErrorString
name|QString
name|QLocalSocketPrivate
operator|::
name|generateErrorString
parameter_list|(
name|QLocalSocket
operator|::
name|LocalSocketError
name|error
parameter_list|,
specifier|const
name|QString
modifier|&
name|function
parameter_list|)
specifier|const
block|{
name|QString
name|errorString
decl_stmt|;
switch|switch
condition|(
name|error
condition|)
block|{
case|case
name|QLocalSocket
operator|::
name|ConnectionRefusedError
case|:
name|errorString
operator|=
name|QLocalSocket
operator|::
name|tr
argument_list|(
literal|"%1: Connection refused"
argument_list|)
operator|.
name|arg
argument_list|(
name|function
argument_list|)
expr_stmt|;
break|break;
case|case
name|QLocalSocket
operator|::
name|PeerClosedError
case|:
name|errorString
operator|=
name|QLocalSocket
operator|::
name|tr
argument_list|(
literal|"%1: Remote closed"
argument_list|)
operator|.
name|arg
argument_list|(
name|function
argument_list|)
expr_stmt|;
break|break;
case|case
name|QLocalSocket
operator|::
name|ServerNotFoundError
case|:
name|errorString
operator|=
name|QLocalSocket
operator|::
name|tr
argument_list|(
literal|"%1: Invalid name"
argument_list|)
operator|.
name|arg
argument_list|(
name|function
argument_list|)
expr_stmt|;
break|break;
case|case
name|QLocalSocket
operator|::
name|SocketAccessError
case|:
name|errorString
operator|=
name|QLocalSocket
operator|::
name|tr
argument_list|(
literal|"%1: Socket access error"
argument_list|)
operator|.
name|arg
argument_list|(
name|function
argument_list|)
expr_stmt|;
break|break;
case|case
name|QLocalSocket
operator|::
name|SocketResourceError
case|:
name|errorString
operator|=
name|QLocalSocket
operator|::
name|tr
argument_list|(
literal|"%1: Socket resource error"
argument_list|)
operator|.
name|arg
argument_list|(
name|function
argument_list|)
expr_stmt|;
break|break;
case|case
name|QLocalSocket
operator|::
name|SocketTimeoutError
case|:
name|errorString
operator|=
name|QLocalSocket
operator|::
name|tr
argument_list|(
literal|"%1: Socket operation timed out"
argument_list|)
operator|.
name|arg
argument_list|(
name|function
argument_list|)
expr_stmt|;
break|break;
case|case
name|QLocalSocket
operator|::
name|DatagramTooLargeError
case|:
name|errorString
operator|=
name|QLocalSocket
operator|::
name|tr
argument_list|(
literal|"%1: Datagram too large"
argument_list|)
operator|.
name|arg
argument_list|(
name|function
argument_list|)
expr_stmt|;
break|break;
case|case
name|QLocalSocket
operator|::
name|ConnectionError
case|:
name|errorString
operator|=
name|QLocalSocket
operator|::
name|tr
argument_list|(
literal|"%1: Connection error"
argument_list|)
operator|.
name|arg
argument_list|(
name|function
argument_list|)
expr_stmt|;
break|break;
case|case
name|QLocalSocket
operator|::
name|UnsupportedSocketOperationError
case|:
name|errorString
operator|=
name|QLocalSocket
operator|::
name|tr
argument_list|(
literal|"%1: The socket operation is not supported"
argument_list|)
operator|.
name|arg
argument_list|(
name|function
argument_list|)
expr_stmt|;
break|break;
case|case
name|QLocalSocket
operator|::
name|OperationError
case|:
name|errorString
operator|=
name|QLocalSocket
operator|::
name|tr
argument_list|(
literal|"%1: Operation not permitted when socket is in this state"
argument_list|)
operator|.
name|arg
argument_list|(
name|function
argument_list|)
expr_stmt|;
break|break;
case|case
name|QLocalSocket
operator|::
name|UnknownSocketError
case|:
default|default:
name|errorString
operator|=
name|QLocalSocket
operator|::
name|tr
argument_list|(
literal|"%1: Unknown error %2"
argument_list|)
operator|.
name|arg
argument_list|(
name|function
argument_list|)
operator|.
name|arg
argument_list|(
name|errno
argument_list|)
expr_stmt|;
block|}
return|return
name|errorString
return|;
block|}
end_function
begin_function
DECL|function|errorOccurred
name|void
name|QLocalSocketPrivate
operator|::
name|errorOccurred
parameter_list|(
name|QLocalSocket
operator|::
name|LocalSocketError
name|error
parameter_list|,
specifier|const
name|QString
modifier|&
name|function
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QLocalSocket
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|error
condition|)
block|{
case|case
name|QLocalSocket
operator|::
name|ConnectionRefusedError
case|:
name|unixSocket
operator|.
name|setSocketError
argument_list|(
name|QAbstractSocket
operator|::
name|ConnectionRefusedError
argument_list|)
expr_stmt|;
break|break;
case|case
name|QLocalSocket
operator|::
name|PeerClosedError
case|:
name|unixSocket
operator|.
name|setSocketError
argument_list|(
name|QAbstractSocket
operator|::
name|RemoteHostClosedError
argument_list|)
expr_stmt|;
break|break;
case|case
name|QLocalSocket
operator|::
name|ServerNotFoundError
case|:
name|unixSocket
operator|.
name|setSocketError
argument_list|(
name|QAbstractSocket
operator|::
name|HostNotFoundError
argument_list|)
expr_stmt|;
break|break;
case|case
name|QLocalSocket
operator|::
name|SocketAccessError
case|:
name|unixSocket
operator|.
name|setSocketError
argument_list|(
name|QAbstractSocket
operator|::
name|SocketAccessError
argument_list|)
expr_stmt|;
break|break;
case|case
name|QLocalSocket
operator|::
name|SocketResourceError
case|:
name|unixSocket
operator|.
name|setSocketError
argument_list|(
name|QAbstractSocket
operator|::
name|SocketResourceError
argument_list|)
expr_stmt|;
break|break;
case|case
name|QLocalSocket
operator|::
name|SocketTimeoutError
case|:
name|unixSocket
operator|.
name|setSocketError
argument_list|(
name|QAbstractSocket
operator|::
name|SocketTimeoutError
argument_list|)
expr_stmt|;
break|break;
case|case
name|QLocalSocket
operator|::
name|DatagramTooLargeError
case|:
name|unixSocket
operator|.
name|setSocketError
argument_list|(
name|QAbstractSocket
operator|::
name|DatagramTooLargeError
argument_list|)
expr_stmt|;
break|break;
case|case
name|QLocalSocket
operator|::
name|ConnectionError
case|:
name|unixSocket
operator|.
name|setSocketError
argument_list|(
name|QAbstractSocket
operator|::
name|NetworkError
argument_list|)
expr_stmt|;
break|break;
case|case
name|QLocalSocket
operator|::
name|UnsupportedSocketOperationError
case|:
name|unixSocket
operator|.
name|setSocketError
argument_list|(
name|QAbstractSocket
operator|::
name|UnsupportedSocketOperationError
argument_list|)
expr_stmt|;
break|break;
case|case
name|QLocalSocket
operator|::
name|UnknownSocketError
case|:
default|default:
name|unixSocket
operator|.
name|setSocketError
argument_list|(
name|QAbstractSocket
operator|::
name|UnknownSocketError
argument_list|)
expr_stmt|;
block|}
name|QString
name|errorString
init|=
name|generateErrorString
argument_list|(
name|error
argument_list|,
name|function
argument_list|)
decl_stmt|;
name|q
operator|->
name|setErrorString
argument_list|(
name|errorString
argument_list|)
expr_stmt|;
emit|emit
name|q
operator|->
name|error
argument_list|(
name|error
argument_list|)
emit|;
comment|// errors cause a disconnect
name|unixSocket
operator|.
name|setSocketState
argument_list|(
name|QAbstractSocket
operator|::
name|UnconnectedState
argument_list|)
expr_stmt|;
name|bool
name|stateChanged
init|=
operator|(
name|state
operator|!=
name|QLocalSocket
operator|::
name|UnconnectedState
operator|)
decl_stmt|;
name|state
operator|=
name|QLocalSocket
operator|::
name|UnconnectedState
expr_stmt|;
name|q
operator|->
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|stateChanged
condition|)
name|q
operator|->
emit|emit
name|stateChanged
argument_list|(
name|state
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|connectToServer
name|void
name|QLocalSocket
operator|::
name|connectToServer
parameter_list|(
name|OpenMode
name|openMode
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QLocalSocket
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
argument_list|()
operator|==
name|ConnectedState
operator|||
name|state
argument_list|()
operator|==
name|ConnectingState
condition|)
block|{
name|QString
name|errorString
init|=
name|d
operator|->
name|generateErrorString
argument_list|(
name|QLocalSocket
operator|::
name|OperationError
argument_list|,
name|QLatin1String
argument_list|(
literal|"QLocalSocket::connectToserver"
argument_list|)
argument_list|)
decl_stmt|;
name|setErrorString
argument_list|(
name|errorString
argument_list|)
expr_stmt|;
emit|emit
name|error
argument_list|(
name|QLocalSocket
operator|::
name|OperationError
argument_list|)
emit|;
return|return;
block|}
name|d
operator|->
name|errorString
operator|.
name|clear
argument_list|()
expr_stmt|;
name|d
operator|->
name|unixSocket
operator|.
name|setSocketState
argument_list|(
name|QAbstractSocket
operator|::
name|ConnectingState
argument_list|)
expr_stmt|;
name|d
operator|->
name|state
operator|=
name|ConnectingState
expr_stmt|;
emit|emit
name|stateChanged
argument_list|(
name|d
operator|->
name|state
argument_list|)
emit|;
if|if
condition|(
name|d
operator|->
name|serverName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|d
operator|->
name|errorOccurred
argument_list|(
name|ServerNotFoundError
argument_list|,
name|QLatin1String
argument_list|(
literal|"QLocalSocket::connectToServer"
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// create the socket
if|if
condition|(
operator|-
literal|1
operator|==
operator|(
name|d
operator|->
name|connectingSocket
operator|=
name|qt_safe_socket
argument_list|(
name|PF_UNIX
argument_list|,
name|SOCK_STREAM
argument_list|,
literal|0
argument_list|)
operator|)
condition|)
block|{
name|d
operator|->
name|errorOccurred
argument_list|(
name|UnsupportedSocketOperationError
argument_list|,
name|QLatin1String
argument_list|(
literal|"QLocalSocket::connectToServer"
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// set non blocking so we can try to connect and it won't wait
name|int
name|flags
init|=
name|fcntl
argument_list|(
name|d
operator|->
name|connectingSocket
argument_list|,
name|F_GETFL
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|-
literal|1
operator|==
name|flags
operator|||
operator|-
literal|1
operator|==
operator|(
name|fcntl
argument_list|(
name|d
operator|->
name|connectingSocket
argument_list|,
name|F_SETFL
argument_list|,
name|flags
operator||
name|O_NONBLOCK
argument_list|)
operator|)
condition|)
block|{
name|d
operator|->
name|errorOccurred
argument_list|(
name|UnknownSocketError
argument_list|,
name|QLatin1String
argument_list|(
literal|"QLocalSocket::connectToServer"
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// _q_connectToSocket does the actual connecting
name|d
operator|->
name|connectingName
operator|=
name|d
operator|->
name|serverName
expr_stmt|;
name|d
operator|->
name|connectingOpenMode
operator|=
name|openMode
expr_stmt|;
name|d
operator|->
name|_q_connectToSocket
argument_list|()
expr_stmt|;
return|return;
block|}
end_function
begin_comment
comment|/*!     \internal      Tries to connect connectingName and connectingOpenMode      \sa connectToServer(), waitForConnected()   */
end_comment
begin_function
DECL|function|_q_connectToSocket
name|void
name|QLocalSocketPrivate
operator|::
name|_q_connectToSocket
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QLocalSocket
argument_list|)
expr_stmt|;
name|QString
name|connectingPathName
decl_stmt|;
comment|// determine the full server path
if|if
condition|(
name|connectingName
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
condition|)
block|{
name|connectingPathName
operator|=
name|connectingName
expr_stmt|;
block|}
else|else
block|{
name|connectingPathName
operator|=
name|QDir
operator|::
name|tempPath
argument_list|()
expr_stmt|;
name|connectingPathName
operator|+=
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
operator|+
name|connectingName
expr_stmt|;
block|}
name|struct
name|sockaddr_un
name|name
decl_stmt|;
name|name
operator|.
name|sun_family
operator|=
name|PF_UNIX
expr_stmt|;
if|if
condition|(
sizeof|sizeof
argument_list|(
name|name
operator|.
name|sun_path
argument_list|)
operator|<
operator|(
name|uint
operator|)
name|connectingPathName
operator|.
name|toLatin1
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|1
condition|)
block|{
name|QString
name|function
init|=
name|QLatin1String
argument_list|(
literal|"QLocalSocket::connectToServer"
argument_list|)
decl_stmt|;
name|errorOccurred
argument_list|(
name|QLocalSocket
operator|::
name|ServerNotFoundError
argument_list|,
name|function
argument_list|)
expr_stmt|;
return|return;
block|}
operator|::
name|memcpy
argument_list|(
name|name
operator|.
name|sun_path
argument_list|,
name|connectingPathName
operator|.
name|toLatin1
argument_list|()
operator|.
name|data
argument_list|()
argument_list|,
name|connectingPathName
operator|.
name|toLatin1
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|-
literal|1
operator|==
name|qt_safe_connect
argument_list|(
name|connectingSocket
argument_list|,
operator|(
expr|struct
name|sockaddr
operator|*
operator|)
operator|&
name|name
argument_list|,
sizeof|sizeof
argument_list|(
name|name
argument_list|)
argument_list|)
condition|)
block|{
name|QString
name|function
init|=
name|QLatin1String
argument_list|(
literal|"QLocalSocket::connectToServer"
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|errno
condition|)
block|{
case|case
name|EINVAL
case|:
case|case
name|ECONNREFUSED
case|:
name|errorOccurred
argument_list|(
name|QLocalSocket
operator|::
name|ConnectionRefusedError
argument_list|,
name|function
argument_list|)
expr_stmt|;
break|break;
case|case
name|ENOENT
case|:
name|errorOccurred
argument_list|(
name|QLocalSocket
operator|::
name|ServerNotFoundError
argument_list|,
name|function
argument_list|)
expr_stmt|;
break|break;
case|case
name|EACCES
case|:
case|case
name|EPERM
case|:
name|errorOccurred
argument_list|(
name|QLocalSocket
operator|::
name|SocketAccessError
argument_list|,
name|function
argument_list|)
expr_stmt|;
break|break;
case|case
name|ETIMEDOUT
case|:
name|errorOccurred
argument_list|(
name|QLocalSocket
operator|::
name|SocketTimeoutError
argument_list|,
name|function
argument_list|)
expr_stmt|;
break|break;
case|case
name|EAGAIN
case|:
comment|// Try again later, all of the sockets listening are full
if|if
condition|(
operator|!
name|delayConnect
condition|)
block|{
name|delayConnect
operator|=
operator|new
name|QSocketNotifier
argument_list|(
name|connectingSocket
argument_list|,
name|QSocketNotifier
operator|::
name|Write
argument_list|,
name|q
argument_list|)
expr_stmt|;
name|q
operator|->
name|connect
argument_list|(
name|delayConnect
argument_list|,
name|SIGNAL
argument_list|(
name|activated
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_connectToSocket
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|connectTimer
condition|)
block|{
name|connectTimer
operator|=
operator|new
name|QTimer
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|q
operator|->
name|connect
argument_list|(
name|connectTimer
argument_list|,
name|SIGNAL
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_abortConnectionAttempt
argument_list|()
argument_list|)
argument_list|,
name|Qt
operator|::
name|DirectConnection
argument_list|)
expr_stmt|;
name|connectTimer
operator|->
name|start
argument_list|(
name|QT_CONNECT_TIMEOUT
argument_list|)
expr_stmt|;
block|}
name|delayConnect
operator|->
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
default|default:
name|errorOccurred
argument_list|(
name|QLocalSocket
operator|::
name|UnknownSocketError
argument_list|,
name|function
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
comment|// connected!
name|cancelDelayedConnect
argument_list|()
expr_stmt|;
name|serverName
operator|=
name|connectingName
expr_stmt|;
name|fullServerName
operator|=
name|connectingPathName
expr_stmt|;
if|if
condition|(
name|unixSocket
operator|.
name|setSocketDescriptor
argument_list|(
name|connectingSocket
argument_list|,
name|QAbstractSocket
operator|::
name|ConnectedState
argument_list|,
name|connectingOpenMode
argument_list|)
condition|)
block|{
name|q
operator|->
name|QIODevice
operator|::
name|open
argument_list|(
name|connectingOpenMode
operator||
name|QIODevice
operator|::
name|Unbuffered
argument_list|)
expr_stmt|;
name|q
operator|->
emit|emit
name|connected
argument_list|()
emit|;
block|}
else|else
block|{
name|QString
name|function
init|=
name|QLatin1String
argument_list|(
literal|"QLocalSocket::connectToServer"
argument_list|)
decl_stmt|;
name|errorOccurred
argument_list|(
name|QLocalSocket
operator|::
name|UnknownSocketError
argument_list|,
name|function
argument_list|)
expr_stmt|;
block|}
name|connectingSocket
operator|=
operator|-
literal|1
expr_stmt|;
name|connectingName
operator|.
name|clear
argument_list|()
expr_stmt|;
name|connectingOpenMode
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setSocketDescriptor
name|bool
name|QLocalSocket
operator|::
name|setSocketDescriptor
parameter_list|(
name|qintptr
name|socketDescriptor
parameter_list|,
name|LocalSocketState
name|socketState
parameter_list|,
name|OpenMode
name|openMode
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QLocalSocket
argument_list|)
expr_stmt|;
name|QAbstractSocket
operator|::
name|SocketState
name|newSocketState
init|=
name|QAbstractSocket
operator|::
name|UnconnectedState
decl_stmt|;
switch|switch
condition|(
name|socketState
condition|)
block|{
case|case
name|ConnectingState
case|:
name|newSocketState
operator|=
name|QAbstractSocket
operator|::
name|ConnectingState
expr_stmt|;
break|break;
case|case
name|ConnectedState
case|:
name|newSocketState
operator|=
name|QAbstractSocket
operator|::
name|ConnectedState
expr_stmt|;
break|break;
case|case
name|ClosingState
case|:
name|newSocketState
operator|=
name|QAbstractSocket
operator|::
name|ClosingState
expr_stmt|;
break|break;
case|case
name|UnconnectedState
case|:
name|newSocketState
operator|=
name|QAbstractSocket
operator|::
name|UnconnectedState
expr_stmt|;
break|break;
block|}
name|QIODevice
operator|::
name|open
argument_list|(
name|openMode
argument_list|)
expr_stmt|;
name|d
operator|->
name|state
operator|=
name|socketState
expr_stmt|;
return|return
name|d
operator|->
name|unixSocket
operator|.
name|setSocketDescriptor
argument_list|(
name|socketDescriptor
argument_list|,
name|newSocketState
argument_list|,
name|openMode
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|_q_abortConnectionAttempt
name|void
name|QLocalSocketPrivate
operator|::
name|_q_abortConnectionAttempt
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QLocalSocket
argument_list|)
expr_stmt|;
name|q
operator|->
name|close
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cancelDelayedConnect
name|void
name|QLocalSocketPrivate
operator|::
name|cancelDelayedConnect
parameter_list|()
block|{
if|if
condition|(
name|delayConnect
condition|)
block|{
name|delayConnect
operator|->
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
operator|delete
name|delayConnect
expr_stmt|;
name|delayConnect
operator|=
literal|0
expr_stmt|;
name|connectTimer
operator|->
name|stop
argument_list|()
expr_stmt|;
operator|delete
name|connectTimer
expr_stmt|;
name|connectTimer
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|socketDescriptor
name|qintptr
name|QLocalSocket
operator|::
name|socketDescriptor
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QLocalSocket
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|unixSocket
operator|.
name|socketDescriptor
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|readData
name|qint64
name|QLocalSocket
operator|::
name|readData
parameter_list|(
name|char
modifier|*
name|data
parameter_list|,
name|qint64
name|c
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QLocalSocket
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|unixSocket
operator|.
name|read
argument_list|(
name|data
argument_list|,
name|c
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|writeData
name|qint64
name|QLocalSocket
operator|::
name|writeData
parameter_list|(
specifier|const
name|char
modifier|*
name|data
parameter_list|,
name|qint64
name|c
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QLocalSocket
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|unixSocket
operator|.
name|writeData
argument_list|(
name|data
argument_list|,
name|c
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|abort
name|void
name|QLocalSocket
operator|::
name|abort
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QLocalSocket
argument_list|)
expr_stmt|;
name|d
operator|->
name|unixSocket
operator|.
name|abort
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|bytesAvailable
name|qint64
name|QLocalSocket
operator|::
name|bytesAvailable
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QLocalSocket
argument_list|)
expr_stmt|;
return|return
name|QIODevice
operator|::
name|bytesAvailable
argument_list|()
operator|+
name|d
operator|->
name|unixSocket
operator|.
name|bytesAvailable
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|bytesToWrite
name|qint64
name|QLocalSocket
operator|::
name|bytesToWrite
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QLocalSocket
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|unixSocket
operator|.
name|bytesToWrite
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|canReadLine
name|bool
name|QLocalSocket
operator|::
name|canReadLine
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QLocalSocket
argument_list|)
expr_stmt|;
return|return
name|QIODevice
operator|::
name|canReadLine
argument_list|()
operator|||
name|d
operator|->
name|unixSocket
operator|.
name|canReadLine
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|close
name|void
name|QLocalSocket
operator|::
name|close
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QLocalSocket
argument_list|)
expr_stmt|;
name|d
operator|->
name|unixSocket
operator|.
name|close
argument_list|()
expr_stmt|;
name|d
operator|->
name|cancelDelayedConnect
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|connectingSocket
operator|!=
operator|-
literal|1
condition|)
operator|::
name|close
argument_list|(
name|d
operator|->
name|connectingSocket
argument_list|)
expr_stmt|;
name|d
operator|->
name|connectingSocket
operator|=
operator|-
literal|1
expr_stmt|;
name|d
operator|->
name|connectingName
operator|.
name|clear
argument_list|()
expr_stmt|;
name|d
operator|->
name|connectingOpenMode
operator|=
literal|0
expr_stmt|;
name|d
operator|->
name|serverName
operator|.
name|clear
argument_list|()
expr_stmt|;
name|d
operator|->
name|fullServerName
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QIODevice
operator|::
name|close
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|waitForBytesWritten
name|bool
name|QLocalSocket
operator|::
name|waitForBytesWritten
parameter_list|(
name|int
name|msecs
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QLocalSocket
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|unixSocket
operator|.
name|waitForBytesWritten
argument_list|(
name|msecs
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|flush
name|bool
name|QLocalSocket
operator|::
name|flush
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QLocalSocket
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|unixSocket
operator|.
name|flush
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|disconnectFromServer
name|void
name|QLocalSocket
operator|::
name|disconnectFromServer
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QLocalSocket
argument_list|)
expr_stmt|;
name|d
operator|->
name|unixSocket
operator|.
name|disconnectFromHost
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|error
name|QLocalSocket
operator|::
name|LocalSocketError
name|QLocalSocket
operator|::
name|error
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QLocalSocket
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|d
operator|->
name|unixSocket
operator|.
name|error
argument_list|()
condition|)
block|{
case|case
name|QAbstractSocket
operator|::
name|ConnectionRefusedError
case|:
return|return
name|QLocalSocket
operator|::
name|ConnectionRefusedError
return|;
case|case
name|QAbstractSocket
operator|::
name|RemoteHostClosedError
case|:
return|return
name|QLocalSocket
operator|::
name|PeerClosedError
return|;
case|case
name|QAbstractSocket
operator|::
name|HostNotFoundError
case|:
return|return
name|QLocalSocket
operator|::
name|ServerNotFoundError
return|;
case|case
name|QAbstractSocket
operator|::
name|SocketAccessError
case|:
return|return
name|QLocalSocket
operator|::
name|SocketAccessError
return|;
case|case
name|QAbstractSocket
operator|::
name|SocketResourceError
case|:
return|return
name|QLocalSocket
operator|::
name|SocketResourceError
return|;
case|case
name|QAbstractSocket
operator|::
name|SocketTimeoutError
case|:
return|return
name|QLocalSocket
operator|::
name|SocketTimeoutError
return|;
case|case
name|QAbstractSocket
operator|::
name|DatagramTooLargeError
case|:
return|return
name|QLocalSocket
operator|::
name|DatagramTooLargeError
return|;
case|case
name|QAbstractSocket
operator|::
name|NetworkError
case|:
return|return
name|QLocalSocket
operator|::
name|ConnectionError
return|;
case|case
name|QAbstractSocket
operator|::
name|UnsupportedSocketOperationError
case|:
return|return
name|QLocalSocket
operator|::
name|UnsupportedSocketOperationError
return|;
case|case
name|QAbstractSocket
operator|::
name|UnknownSocketError
case|:
return|return
name|QLocalSocket
operator|::
name|UnknownSocketError
return|;
default|default:
if|#
directive|if
name|defined
name|QLOCALSOCKET_DEBUG
name|qWarning
argument_list|()
operator|<<
literal|"QLocalSocket error not handled:"
operator|<<
name|d
operator|->
name|unixSocket
operator|.
name|error
argument_list|()
expr_stmt|;
endif|#
directive|endif
break|break;
block|}
return|return
name|UnknownSocketError
return|;
block|}
end_function
begin_function
DECL|function|isValid
name|bool
name|QLocalSocket
operator|::
name|isValid
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QLocalSocket
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|unixSocket
operator|.
name|isValid
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|readBufferSize
name|qint64
name|QLocalSocket
operator|::
name|readBufferSize
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QLocalSocket
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|unixSocket
operator|.
name|readBufferSize
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setReadBufferSize
name|void
name|QLocalSocket
operator|::
name|setReadBufferSize
parameter_list|(
name|qint64
name|size
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QLocalSocket
argument_list|)
expr_stmt|;
name|d
operator|->
name|unixSocket
operator|.
name|setReadBufferSize
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|waitForConnected
name|bool
name|QLocalSocket
operator|::
name|waitForConnected
parameter_list|(
name|int
name|msec
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QLocalSocket
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
argument_list|()
operator|!=
name|ConnectingState
condition|)
return|return
operator|(
name|state
argument_list|()
operator|==
name|ConnectedState
operator|)
return|;
name|fd_set
name|fds
decl_stmt|;
name|FD_ZERO
argument_list|(
operator|&
name|fds
argument_list|)
expr_stmt|;
name|FD_SET
argument_list|(
name|d
operator|->
name|connectingSocket
argument_list|,
operator|&
name|fds
argument_list|)
expr_stmt|;
name|timeval
name|timeout
decl_stmt|;
name|timeout
operator|.
name|tv_sec
operator|=
name|msec
operator|/
literal|1000
expr_stmt|;
name|timeout
operator|.
name|tv_usec
operator|=
operator|(
name|msec
operator|%
literal|1000
operator|)
operator|*
literal|1000
expr_stmt|;
comment|// timeout can not be 0 or else select will return an error.
if|if
condition|(
literal|0
operator|==
name|msec
condition|)
name|timeout
operator|.
name|tv_usec
operator|=
literal|1000
expr_stmt|;
name|int
name|result
init|=
operator|-
literal|1
decl_stmt|;
comment|// on Linux timeout will be updated by select, but _not_ on other systems.
name|QElapsedTimer
name|timer
decl_stmt|;
name|timer
operator|.
name|start
argument_list|()
expr_stmt|;
while|while
condition|(
name|state
argument_list|()
operator|==
name|ConnectingState
operator|&&
operator|(
operator|-
literal|1
operator|==
name|msec
operator|||
name|timer
operator|.
name|elapsed
argument_list|()
operator|<
name|msec
operator|)
condition|)
block|{
name|result
operator|=
operator|::
name|select
argument_list|(
name|d
operator|->
name|connectingSocket
operator|+
literal|1
argument_list|,
operator|&
name|fds
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|&
name|timeout
argument_list|)
expr_stmt|;
if|if
condition|(
operator|-
literal|1
operator|==
name|result
operator|&&
name|errno
operator|!=
name|EINTR
condition|)
block|{
name|d
operator|->
name|errorOccurred
argument_list|(
name|QLocalSocket
operator|::
name|UnknownSocketError
argument_list|,
name|QLatin1String
argument_list|(
literal|"QLocalSocket::waitForConnected"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|result
operator|>
literal|0
condition|)
name|d
operator|->
name|_q_connectToSocket
argument_list|()
expr_stmt|;
block|}
return|return
operator|(
name|state
argument_list|()
operator|==
name|ConnectedState
operator|)
return|;
block|}
end_function
begin_function
DECL|function|waitForDisconnected
name|bool
name|QLocalSocket
operator|::
name|waitForDisconnected
parameter_list|(
name|int
name|msecs
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QLocalSocket
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
argument_list|()
operator|==
name|UnconnectedState
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"QLocalSocket::waitForDisconnected() is not allowed in UnconnectedState"
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
operator|(
name|d
operator|->
name|unixSocket
operator|.
name|waitForDisconnected
argument_list|(
name|msecs
argument_list|)
operator|)
return|;
block|}
end_function
begin_function
DECL|function|waitForReadyRead
name|bool
name|QLocalSocket
operator|::
name|waitForReadyRead
parameter_list|(
name|int
name|msecs
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QLocalSocket
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
argument_list|()
operator|==
name|QLocalSocket
operator|::
name|UnconnectedState
condition|)
return|return
literal|false
return|;
return|return
operator|(
name|d
operator|->
name|unixSocket
operator|.
name|waitForReadyRead
argument_list|(
name|msecs
argument_list|)
operator|)
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
end_unit
