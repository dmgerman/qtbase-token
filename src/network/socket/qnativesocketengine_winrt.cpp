begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtNetwork module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<qt_windows.h>
end_include
begin_include
include|#
directive|include
file|"qnativesocketengine_winrt_p.h"
end_include
begin_include
include|#
directive|include
file|<qcoreapplication.h>
end_include
begin_include
include|#
directive|include
file|<qabstracteventdispatcher.h>
end_include
begin_include
include|#
directive|include
file|<qsocketnotifier.h>
end_include
begin_include
include|#
directive|include
file|<qdatetime.h>
end_include
begin_include
include|#
directive|include
file|<qnetworkinterface.h>
end_include
begin_include
include|#
directive|include
file|<qelapsedtimer.h>
end_include
begin_include
include|#
directive|include
file|<qthread.h>
end_include
begin_include
include|#
directive|include
file|<qabstracteventdispatcher.h>
end_include
begin_include
include|#
directive|include
file|<private/qeventdispatcher_winrt_p.h>
end_include
begin_include
include|#
directive|include
file|<wrl.h>
end_include
begin_include
include|#
directive|include
file|<windows.foundation.collections.h>
end_include
begin_include
include|#
directive|include
file|<windows.storage.streams.h>
end_include
begin_include
include|#
directive|include
file|<windows.networking.h>
end_include
begin_include
include|#
directive|include
file|<windows.networking.sockets.h>
end_include
begin_include
include|#
directive|include
file|<robuffer.h>
end_include
begin_using
using|using
namespace|namespace
name|Microsoft
operator|::
name|WRL
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|Microsoft
operator|::
name|WRL
operator|::
name|Wrappers
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|Foundation
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|Foundation
operator|::
name|Collections
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|Storage
operator|::
name|Streams
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|Networking
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|Networking
operator|::
name|Connectivity
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|Networking
operator|::
name|Sockets
namespace|;
end_using
begin_typedef
DECL|typedef|ClientConnectedHandler
typedef|typedef
name|ITypedEventHandler
argument_list|<
name|StreamSocketListener
modifier|*
argument_list|,
name|StreamSocketListenerConnectionReceivedEventArgs
modifier|*
argument_list|>
name|ClientConnectedHandler
typedef|;
end_typedef
begin_typedef
DECL|typedef|DatagramReceivedHandler
typedef|typedef
name|ITypedEventHandler
argument_list|<
name|DatagramSocket
modifier|*
argument_list|,
name|DatagramSocketMessageReceivedEventArgs
modifier|*
argument_list|>
name|DatagramReceivedHandler
typedef|;
end_typedef
begin_typedef
DECL|typedef|SocketReadCompletedHandler
typedef|typedef
name|IAsyncOperationWithProgressCompletedHandler
argument_list|<
name|IBuffer
modifier|*
argument_list|,
name|UINT32
argument_list|>
name|SocketReadCompletedHandler
typedef|;
end_typedef
begin_typedef
DECL|typedef|SocketWriteCompletedHandler
typedef|typedef
name|IAsyncOperationWithProgressCompletedHandler
argument_list|<
name|UINT32
argument_list|,
name|UINT32
argument_list|>
name|SocketWriteCompletedHandler
typedef|;
end_typedef
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_comment
comment|// Common constructs
end_comment
begin_define
DECL|macro|Q_CHECK_VALID_SOCKETLAYER
define|#
directive|define
name|Q_CHECK_VALID_SOCKETLAYER
parameter_list|(
name|function
parameter_list|,
name|returnValue
parameter_list|)
value|do { \     if (!isValid()) { \         qWarning(""#function" was called on an uninitialized socket device"); \         return returnValue; \     } } while (0)
end_define
begin_define
DECL|macro|Q_CHECK_INVALID_SOCKETLAYER
define|#
directive|define
name|Q_CHECK_INVALID_SOCKETLAYER
parameter_list|(
name|function
parameter_list|,
name|returnValue
parameter_list|)
value|do { \     if (isValid()) { \         qWarning(""#function" was called on an already initialized socket device"); \         return returnValue; \     } } while (0)
end_define
begin_define
DECL|macro|Q_CHECK_STATE
define|#
directive|define
name|Q_CHECK_STATE
parameter_list|(
name|function
parameter_list|,
name|checkState
parameter_list|,
name|returnValue
parameter_list|)
value|do { \     if (d->socketState != (checkState)) { \         qWarning(""#function" was not called in "#checkState); \         return (returnValue); \     } } while (0)
end_define
begin_define
DECL|macro|Q_CHECK_NOT_STATE
define|#
directive|define
name|Q_CHECK_NOT_STATE
parameter_list|(
name|function
parameter_list|,
name|checkState
parameter_list|,
name|returnValue
parameter_list|)
value|do { \     if (d->socketState == (checkState)) { \         qWarning(""#function" was called in "#checkState); \         return (returnValue); \     } } while (0)
end_define
begin_define
DECL|macro|Q_CHECK_STATES
define|#
directive|define
name|Q_CHECK_STATES
parameter_list|(
name|function
parameter_list|,
name|state1
parameter_list|,
name|state2
parameter_list|,
name|returnValue
parameter_list|)
value|do { \     if (d->socketState != (state1)&& d->socketState != (state2)) { \         qWarning(""#function" was called" \                  " not in "#state1" or "#state2); \         return (returnValue); \     } } while (0)
end_define
begin_define
DECL|macro|Q_CHECK_TYPE
define|#
directive|define
name|Q_CHECK_TYPE
parameter_list|(
name|function
parameter_list|,
name|type
parameter_list|,
name|returnValue
parameter_list|)
value|do { \     if (d->socketType != (type)) { \         qWarning(#function" was called by a" \                  " socket other than "#type""); \         return (returnValue); \     } } while (0)
end_define
begin_define
DECL|macro|Q_TR
define|#
directive|define
name|Q_TR
parameter_list|(
name|a
parameter_list|)
value|QT_TRANSLATE_NOOP(QNativeSocketEngine, a)
end_define
begin_typedef
DECL|typedef|TcpSocketHash
typedef|typedef
name|QHash
argument_list|<
name|qintptr
argument_list|,
name|IStreamSocket
modifier|*
argument_list|>
name|TcpSocketHash
typedef|;
end_typedef
begin_struct
DECL|struct|SocketHandler
struct|struct
name|SocketHandler
block|{
DECL|function|SocketHandler
name|SocketHandler
parameter_list|()
member_init_list|:
name|socketCount
argument_list|(
literal|0
argument_list|)
block|{}
DECL|member|socketCount
name|qintptr
name|socketCount
decl_stmt|;
DECL|member|pendingTcpSockets
name|TcpSocketHash
name|pendingTcpSockets
decl_stmt|;
block|}
struct|;
end_struct
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|SocketHandler
argument_list|,
argument|gSocketHandler
argument_list|)
end_macro
begin_function
DECL|function|qt_QStringFromHSTRING
name|QString
name|qt_QStringFromHSTRING
parameter_list|(
name|HSTRING
name|string
parameter_list|)
block|{
name|UINT32
name|length
decl_stmt|;
name|PCWSTR
name|rawString
init|=
name|WindowsGetStringRawBuffer
argument_list|(
name|string
argument_list|,
operator|&
name|length
argument_list|)
decl_stmt|;
return|return
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|rawString
argument_list|,
name|length
argument_list|)
return|;
block|}
end_function
begin_class
DECL|class|ByteArrayBuffer
class|class
name|ByteArrayBuffer
super|:
specifier|public
name|Microsoft
operator|::
name|WRL
operator|::
name|RuntimeClass
argument_list|<
name|RuntimeClassFlags
argument_list|<
name|WinRtClassicComMix
argument_list|>
argument_list|,
name|IBuffer
argument_list|,
name|Windows
operator|::
name|Storage
operator|::
name|Streams
operator|::
name|IBufferByteAccess
argument_list|>
block|{
public|public:
DECL|function|ByteArrayBuffer
name|ByteArrayBuffer
parameter_list|(
name|int
name|size
parameter_list|)
member_init_list|:
name|m_bytes
argument_list|(
name|size
argument_list|,
name|Qt
operator|::
name|Uninitialized
argument_list|)
member_init_list|,
name|m_length
argument_list|(
literal|0
argument_list|)
block|{     }
DECL|function|ByteArrayBuffer
name|ByteArrayBuffer
parameter_list|(
specifier|const
name|char
modifier|*
name|data
parameter_list|,
name|int
name|size
parameter_list|)
member_init_list|:
name|m_bytes
argument_list|(
name|data
argument_list|,
name|size
argument_list|)
member_init_list|,
name|m_length
argument_list|(
name|size
argument_list|)
block|{     }
DECL|function|Buffer
name|HRESULT
name|__stdcall
name|Buffer
parameter_list|(
name|byte
modifier|*
modifier|*
name|value
parameter_list|)
block|{
operator|*
name|value
operator|=
cast|reinterpret_cast
argument_list|<
name|byte
operator|*
argument_list|>
argument_list|(
name|m_bytes
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
block|}
DECL|function|get_Capacity
name|HRESULT
name|__stdcall
name|get_Capacity
parameter_list|(
name|UINT32
modifier|*
name|value
parameter_list|)
block|{
operator|*
name|value
operator|=
name|m_bytes
operator|.
name|size
argument_list|()
expr_stmt|;
return|return
name|S_OK
return|;
block|}
DECL|function|get_Length
name|HRESULT
name|__stdcall
name|get_Length
parameter_list|(
name|UINT32
modifier|*
name|value
parameter_list|)
block|{
operator|*
name|value
operator|=
name|m_length
expr_stmt|;
return|return
name|S_OK
return|;
block|}
DECL|function|put_Length
name|HRESULT
name|__stdcall
name|put_Length
parameter_list|(
name|UINT32
name|value
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|value
operator|<=
name|UINT32
argument_list|(
name|m_bytes
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|m_length
operator|=
name|value
expr_stmt|;
return|return
name|S_OK
return|;
block|}
DECL|function|engine
name|QNativeSocketEngine
modifier|*
name|engine
parameter_list|()
specifier|const
block|{
return|return
name|m_engine
return|;
block|}
DECL|function|setEngine
name|void
name|setEngine
parameter_list|(
name|QNativeSocketEngine
modifier|*
name|engine
parameter_list|)
block|{
name|m_engine
operator|=
name|engine
expr_stmt|;
block|}
DECL|function|inputStream
name|ComPtr
argument_list|<
name|IInputStream
argument_list|>
name|inputStream
parameter_list|()
specifier|const
block|{
return|return
name|m_stream
return|;
block|}
DECL|function|setInputStream
name|void
name|setInputStream
parameter_list|(
name|ComPtr
argument_list|<
name|IInputStream
argument_list|>
name|stream
parameter_list|)
block|{
name|m_stream
operator|=
name|stream
expr_stmt|;
block|}
private|private:
DECL|member|m_bytes
name|QByteArray
name|m_bytes
decl_stmt|;
DECL|member|m_length
name|UINT32
name|m_length
decl_stmt|;
DECL|member|m_engine
name|QPointer
argument_list|<
name|QNativeSocketEngine
argument_list|>
name|m_engine
decl_stmt|;
DECL|member|m_stream
name|ComPtr
argument_list|<
name|IInputStream
argument_list|>
name|m_stream
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|QNativeSocketEngine
name|QNativeSocketEngine
operator|::
name|QNativeSocketEngine
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QAbstractSocketEngine
argument_list|(
operator|*
operator|new
name|QNativeSocketEnginePrivate
argument_list|()
argument_list|,
name|parent
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QNativeSocketEngine
name|QNativeSocketEngine
operator|::
name|~
name|QNativeSocketEngine
parameter_list|()
block|{
name|close
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|initialize
name|bool
name|QNativeSocketEngine
operator|::
name|initialize
parameter_list|(
name|QAbstractSocket
operator|::
name|SocketType
name|type
parameter_list|,
name|QAbstractSocket
operator|::
name|NetworkLayerProtocol
name|protocol
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QNativeSocketEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|isValid
argument_list|()
condition|)
name|close
argument_list|()
expr_stmt|;
comment|// Create the socket
if|if
condition|(
operator|!
name|d
operator|->
name|createNewSocket
argument_list|(
name|type
argument_list|,
name|protocol
argument_list|)
condition|)
return|return
literal|false
return|;
name|d
operator|->
name|socketType
operator|=
name|type
expr_stmt|;
name|d
operator|->
name|socketProtocol
operator|=
name|protocol
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|initialize
name|bool
name|QNativeSocketEngine
operator|::
name|initialize
parameter_list|(
name|qintptr
name|socketDescriptor
parameter_list|,
name|QAbstractSocket
operator|::
name|SocketState
name|socketState
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QNativeSocketEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|isValid
argument_list|()
condition|)
name|close
argument_list|()
expr_stmt|;
name|d
operator|->
name|socketDescriptor
operator|=
name|socketDescriptor
expr_stmt|;
comment|// Currently, only TCP sockets are initialized this way.
name|SocketHandler
modifier|*
name|handler
init|=
name|gSocketHandler
argument_list|()
decl_stmt|;
name|d
operator|->
name|tcp
operator|=
name|handler
operator|->
name|pendingTcpSockets
operator|.
name|value
argument_list|(
name|socketDescriptor
argument_list|,
name|Q_NULLPTR
argument_list|)
expr_stmt|;
name|d
operator|->
name|socketType
operator|=
name|QAbstractSocket
operator|::
name|TcpSocket
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|tcp
operator|||
operator|!
name|d
operator|->
name|fetchConnectionParameters
argument_list|()
condition|)
return|return
literal|false
return|;
name|d
operator|->
name|socketState
operator|=
name|socketState
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|socketDescriptor
name|qintptr
name|QNativeSocketEngine
operator|::
name|socketDescriptor
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QNativeSocketEngine
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|socketDescriptor
return|;
block|}
end_function
begin_function
DECL|function|isValid
name|bool
name|QNativeSocketEngine
operator|::
name|isValid
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QNativeSocketEngine
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|socketDescriptor
operator|!=
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|connectToHost
name|bool
name|QNativeSocketEngine
operator|::
name|connectToHost
parameter_list|(
specifier|const
name|QHostAddress
modifier|&
name|address
parameter_list|,
name|quint16
name|port
parameter_list|)
block|{
specifier|const
name|QString
name|addressString
init|=
name|address
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
name|connectToHostByName
argument_list|(
name|addressString
argument_list|,
name|port
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|connectToHostByName
name|bool
name|QNativeSocketEngine
operator|::
name|connectToHostByName
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|,
name|quint16
name|port
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QNativeSocketEngine
argument_list|)
expr_stmt|;
name|HStringReference
name|hostNameRef
argument_list|(
cast|reinterpret_cast
argument_list|<
name|LPCWSTR
argument_list|>
argument_list|(
name|name
operator|.
name|utf16
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|ComPtr
argument_list|<
name|IHostNameFactory
argument_list|>
name|hostNameFactory
decl_stmt|;
name|GetActivationFactory
argument_list|(
name|HString
operator|::
name|MakeReference
argument_list|(
name|RuntimeClass_Windows_Networking_HostName
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|hostNameFactory
argument_list|)
expr_stmt|;
name|ComPtr
argument_list|<
name|IHostName
argument_list|>
name|remoteHost
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hostNameFactory
operator|->
name|CreateHostName
argument_list|(
name|hostNameRef
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|remoteHost
argument_list|)
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"QNativeSocketEnginePrivate::nativeConnect:: Could not create hostname"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|const
name|QString
name|portString
init|=
name|QString
operator|::
name|number
argument_list|(
name|port
argument_list|)
decl_stmt|;
name|HStringReference
name|portReference
argument_list|(
cast|reinterpret_cast
argument_list|<
name|LPCWSTR
argument_list|>
argument_list|(
name|portString
operator|.
name|utf16
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|ComPtr
argument_list|<
name|IAsyncAction
argument_list|>
name|action
decl_stmt|;
name|HRESULT
name|hr
init|=
name|E_FAIL
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|socketType
operator|==
name|QAbstractSocket
operator|::
name|TcpSocket
condition|)
name|hr
operator|=
name|d
operator|->
name|tcp
operator|->
name|ConnectAsync
argument_list|(
name|remoteHost
operator|.
name|Get
argument_list|()
argument_list|,
name|portReference
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|action
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|d
operator|->
name|socketType
operator|==
name|QAbstractSocket
operator|::
name|UdpSocket
condition|)
name|hr
operator|=
name|d
operator|->
name|udp
operator|->
name|ConnectAsync
argument_list|(
name|remoteHost
operator|.
name|Get
argument_list|()
argument_list|,
name|portReference
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|action
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"QNativeSocketEnginePrivate::nativeConnect:: Could not obtain connect action"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|action
operator|->
name|put_Completed
argument_list|(
name|Callback
argument_list|<
name|IAsyncActionCompletedHandler
argument_list|>
argument_list|(
operator|&
name|QNativeSocketEnginePrivate
operator|::
name|interruptEventDispatcher
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|)
expr_stmt|;
name|hr
operator|=
name|action
operator|->
name|GetResults
argument_list|()
expr_stmt|;
while|while
condition|(
operator|(
name|hr
operator|=
name|action
operator|->
name|GetResults
argument_list|()
operator|)
operator|==
name|E_ILLEGAL_METHOD_CALL
condition|)
name|QCoreApplication
operator|::
name|processEvents
argument_list|(
name|QEventLoop
operator|::
name|ExcludeUserInputEvents
operator||
name|QEventLoop
operator|::
name|WaitForMoreEvents
argument_list|)
expr_stmt|;
if|if
condition|(
name|hr
operator|==
literal|0x8007274c
condition|)
block|{
comment|// A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond.
name|d
operator|->
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|NetworkError
argument_list|,
name|d
operator|->
name|ConnectionTimeOutErrorString
argument_list|)
expr_stmt|;
name|d
operator|->
name|socketState
operator|=
name|QAbstractSocket
operator|::
name|UnconnectedState
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|hr
operator|==
literal|0x8007274d
condition|)
block|{
comment|// No connection could be made because the target machine actively refused it.
name|d
operator|->
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|ConnectionRefusedError
argument_list|,
name|d
operator|->
name|ConnectionRefusedErrorString
argument_list|)
expr_stmt|;
name|d
operator|->
name|socketState
operator|=
name|QAbstractSocket
operator|::
name|UnconnectedState
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|d
operator|->
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|UnknownSocketError
argument_list|,
name|d
operator|->
name|UnknownSocketErrorString
argument_list|)
expr_stmt|;
name|d
operator|->
name|socketState
operator|=
name|QAbstractSocket
operator|::
name|UnconnectedState
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|d
operator|->
name|socketType
operator|==
name|QAbstractSocket
operator|::
name|TcpSocket
condition|)
block|{
name|UINT32
name|capacity
decl_stmt|;
name|hr
operator|=
name|d
operator|->
name|inputBuffer
operator|->
name|get_Capacity
argument_list|(
operator|&
name|capacity
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
return|return
literal|false
return|;
name|IInputStream
modifier|*
name|stream
decl_stmt|;
name|hr
operator|=
name|d
operator|->
name|tcp
operator|->
name|get_InputStream
argument_list|(
operator|&
name|stream
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
return|return
literal|false
return|;
name|ByteArrayBuffer
modifier|*
name|buffer
init|=
cast|static_cast
argument_list|<
name|ByteArrayBuffer
operator|*
argument_list|>
argument_list|(
name|d
operator|->
name|inputBuffer
operator|.
name|Get
argument_list|()
argument_list|)
decl_stmt|;
name|buffer
operator|->
name|setEngine
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|buffer
operator|->
name|setInputStream
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|ComPtr
argument_list|<
name|IAsyncOperationWithProgress
argument_list|<
name|IBuffer
modifier|*
argument_list|,
name|UINT32
argument_list|>
argument_list|>
name|op
decl_stmt|;
name|hr
operator|=
name|stream
operator|->
name|ReadAsync
argument_list|(
name|buffer
argument_list|,
name|capacity
argument_list|,
name|InputStreamOptions_Partial
argument_list|,
operator|&
name|op
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
return|return
literal|false
return|;
name|hr
operator|=
name|op
operator|->
name|put_Completed
argument_list|(
name|Callback
argument_list|<
name|SocketReadCompletedHandler
argument_list|>
argument_list|(
operator|&
name|QNativeSocketEnginePrivate
operator|::
name|handleReadyRead
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|d
operator|->
name|socketState
operator|=
name|QAbstractSocket
operator|::
name|ConnectedState
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|bind
name|bool
name|QNativeSocketEngine
operator|::
name|bind
parameter_list|(
specifier|const
name|QHostAddress
modifier|&
name|address
parameter_list|,
name|quint16
name|port
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QNativeSocketEngine
argument_list|)
expr_stmt|;
name|ComPtr
argument_list|<
name|IHostName
argument_list|>
name|hostAddress
decl_stmt|;
if|if
condition|(
name|address
operator|!=
name|QHostAddress
operator|::
name|Any
operator|&&
name|address
operator|!=
name|QHostAddress
operator|::
name|AnyIPv4
operator|&&
name|address
operator|!=
name|QHostAddress
operator|::
name|AnyIPv6
condition|)
block|{
name|ComPtr
argument_list|<
name|IHostNameFactory
argument_list|>
name|hostNameFactory
decl_stmt|;
name|GetActivationFactory
argument_list|(
name|HString
operator|::
name|MakeReference
argument_list|(
name|RuntimeClass_Windows_Networking_HostName
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|hostNameFactory
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|addressString
init|=
name|address
operator|.
name|toString
argument_list|()
decl_stmt|;
name|HStringReference
name|addressRef
argument_list|(
cast|reinterpret_cast
argument_list|<
name|LPCWSTR
argument_list|>
argument_list|(
name|addressString
operator|.
name|utf16
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|hostNameFactory
operator|->
name|CreateHostName
argument_list|(
name|addressRef
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|hostAddress
argument_list|)
expr_stmt|;
block|}
name|HRESULT
name|hr
decl_stmt|;
name|QString
name|portQString
init|=
name|port
condition|?
name|QString
operator|::
name|number
argument_list|(
name|port
argument_list|)
else|:
name|QString
argument_list|()
decl_stmt|;
name|HStringReference
name|portString
argument_list|(
cast|reinterpret_cast
argument_list|<
name|LPCWSTR
argument_list|>
argument_list|(
name|portQString
operator|.
name|utf16
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|ComPtr
argument_list|<
name|IAsyncAction
argument_list|>
name|op
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|socketType
operator|==
name|QAbstractSocket
operator|::
name|TcpSocket
condition|)
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|tcpListener
operator|&&
name|FAILED
argument_list|(
name|RoActivateInstance
argument_list|(
name|HString
operator|::
name|MakeReference
argument_list|(
name|RuntimeClass_Windows_Networking_Sockets_StreamSocketListener
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|d
operator|->
name|tcpListener
argument_list|)
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"Failed to create listener"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|EventRegistrationToken
name|token
decl_stmt|;
name|d
operator|->
name|tcpListener
operator|->
name|add_ConnectionReceived
argument_list|(
name|Callback
argument_list|<
name|ClientConnectedHandler
argument_list|>
argument_list|(
name|d
argument_list|,
operator|&
name|QNativeSocketEnginePrivate
operator|::
name|handleClientConnection
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|token
argument_list|)
expr_stmt|;
name|hr
operator|=
name|d
operator|->
name|tcpListener
operator|->
name|BindEndpointAsync
argument_list|(
name|hostAddress
operator|.
name|Get
argument_list|()
argument_list|,
name|portString
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|op
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"Unable to bind"
argument_list|)
expr_stmt|;
comment|// ### Set error message
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|d
operator|->
name|socketType
operator|==
name|QAbstractSocket
operator|::
name|UdpSocket
condition|)
block|{
name|hr
operator|=
name|d
operator|->
name|udp
operator|->
name|BindEndpointAsync
argument_list|(
name|hostAddress
operator|.
name|Get
argument_list|()
argument_list|,
name|portString
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|op
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"unable to bind"
argument_list|)
expr_stmt|;
comment|// ### Set error message
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
name|op
condition|)
block|{
comment|// Wait for connection to enter bound state - TODO: timeout, check result
while|while
condition|(
operator|(
name|hr
operator|=
name|op
operator|->
name|GetResults
argument_list|()
operator|)
operator|==
name|E_ILLEGAL_METHOD_CALL
condition|)
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|d
operator|->
name|socketState
operator|=
name|QAbstractSocket
operator|::
name|BoundState
expr_stmt|;
name|d
operator|->
name|fetchConnectionParameters
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|listen
name|bool
name|QNativeSocketEngine
operator|::
name|listen
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QNativeSocketEngine
argument_list|)
expr_stmt|;
name|Q_CHECK_VALID_SOCKETLAYER
argument_list|(
name|QNativeSocketEngine
operator|::
name|listen
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Q_CHECK_STATE
argument_list|(
name|QNativeSocketEngine
operator|::
name|listen
argument_list|()
argument_list|,
name|QAbstractSocket
operator|::
name|BoundState
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Q_CHECK_TYPE
argument_list|(
name|QNativeSocketEngine
operator|::
name|listen
argument_list|()
argument_list|,
name|QAbstractSocket
operator|::
name|TcpSocket
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|tcpListener
operator|&&
name|d
operator|->
name|socketDescriptor
operator|!=
operator|-
literal|1
condition|)
block|{
name|d
operator|->
name|socketState
operator|=
name|QAbstractSocket
operator|::
name|ListeningState
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|accept
name|int
name|QNativeSocketEngine
operator|::
name|accept
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QNativeSocketEngine
argument_list|)
expr_stmt|;
name|Q_CHECK_VALID_SOCKETLAYER
argument_list|(
name|QNativeSocketEngine
operator|::
name|accept
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Q_CHECK_STATE
argument_list|(
name|QNativeSocketEngine
operator|::
name|accept
argument_list|()
argument_list|,
name|QAbstractSocket
operator|::
name|ListeningState
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Q_CHECK_TYPE
argument_list|(
name|QNativeSocketEngine
operator|::
name|accept
argument_list|()
argument_list|,
name|QAbstractSocket
operator|::
name|TcpSocket
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|socketDescriptor
operator|==
operator|-
literal|1
operator|||
name|d
operator|->
name|pendingConnections
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
comment|// Start processing incoming data
if|if
condition|(
name|d
operator|->
name|socketType
operator|==
name|QAbstractSocket
operator|::
name|TcpSocket
condition|)
block|{
name|IStreamSocket
modifier|*
name|socket
init|=
name|d
operator|->
name|pendingConnections
operator|.
name|takeFirst
argument_list|()
decl_stmt|;
name|UINT32
name|capacity
decl_stmt|;
name|d
operator|->
name|inputBuffer
operator|->
name|get_Capacity
argument_list|(
operator|&
name|capacity
argument_list|)
expr_stmt|;
name|IInputStream
modifier|*
name|stream
decl_stmt|;
name|socket
operator|->
name|get_InputStream
argument_list|(
operator|&
name|stream
argument_list|)
expr_stmt|;
comment|// TODO: delete buffer and stream on socket close
name|ByteArrayBuffer
modifier|*
name|buffer
init|=
cast|static_cast
argument_list|<
name|ByteArrayBuffer
operator|*
argument_list|>
argument_list|(
name|d
operator|->
name|inputBuffer
operator|.
name|Get
argument_list|()
argument_list|)
decl_stmt|;
name|buffer
operator|->
name|setEngine
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|buffer
operator|->
name|setInputStream
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|ComPtr
argument_list|<
name|IAsyncOperationWithProgress
argument_list|<
name|IBuffer
modifier|*
argument_list|,
name|UINT32
argument_list|>
argument_list|>
name|op
decl_stmt|;
name|stream
operator|->
name|ReadAsync
argument_list|(
name|buffer
argument_list|,
name|capacity
argument_list|,
name|InputStreamOptions_Partial
argument_list|,
operator|&
name|op
argument_list|)
expr_stmt|;
name|op
operator|->
name|put_Completed
argument_list|(
name|Callback
argument_list|<
name|SocketReadCompletedHandler
argument_list|>
argument_list|(
operator|&
name|QNativeSocketEnginePrivate
operator|::
name|handleReadyRead
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|currentConnections
operator|.
name|append
argument_list|(
name|socket
argument_list|)
expr_stmt|;
name|SocketHandler
modifier|*
name|handler
init|=
name|gSocketHandler
argument_list|()
decl_stmt|;
name|handler
operator|->
name|pendingTcpSockets
operator|.
name|insert
argument_list|(
operator|++
name|handler
operator|->
name|socketCount
argument_list|,
name|socket
argument_list|)
expr_stmt|;
return|return
name|handler
operator|->
name|socketCount
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|close
name|void
name|QNativeSocketEngine
operator|::
name|close
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QNativeSocketEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|socketDescriptor
operator|!=
operator|-
literal|1
condition|)
block|{
name|IClosable
modifier|*
name|socket
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|socketType
operator|==
name|QAbstractSocket
operator|::
name|TcpSocket
condition|)
name|d
operator|->
name|tcp
operator|->
name|QueryInterface
argument_list|(
name|IID_PPV_ARGS
argument_list|(
operator|&
name|socket
argument_list|)
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|d
operator|->
name|socketType
operator|==
name|QAbstractSocket
operator|::
name|UdpSocket
condition|)
name|d
operator|->
name|udp
operator|->
name|QueryInterface
argument_list|(
name|IID_PPV_ARGS
argument_list|(
operator|&
name|socket
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|socket
condition|)
block|{
name|d
operator|->
name|closingDown
operator|=
literal|true
expr_stmt|;
name|socket
operator|->
name|Close
argument_list|()
expr_stmt|;
name|socket
operator|->
name|Release
argument_list|()
expr_stmt|;
name|closeNotification
argument_list|()
expr_stmt|;
name|d
operator|->
name|socketDescriptor
operator|=
operator|-
literal|1
expr_stmt|;
block|}
name|d
operator|->
name|socketDescriptor
operator|=
operator|-
literal|1
expr_stmt|;
block|}
name|d
operator|->
name|socketState
operator|=
name|QAbstractSocket
operator|::
name|UnconnectedState
expr_stmt|;
name|d
operator|->
name|hasSetSocketError
operator|=
literal|false
expr_stmt|;
name|d
operator|->
name|localPort
operator|=
literal|0
expr_stmt|;
name|d
operator|->
name|localAddress
operator|.
name|clear
argument_list|()
expr_stmt|;
name|d
operator|->
name|peerPort
operator|=
literal|0
expr_stmt|;
name|d
operator|->
name|peerAddress
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|joinMulticastGroup
name|bool
name|QNativeSocketEngine
operator|::
name|joinMulticastGroup
parameter_list|(
specifier|const
name|QHostAddress
modifier|&
name|groupAddress
parameter_list|,
specifier|const
name|QNetworkInterface
modifier|&
name|iface
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|groupAddress
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|iface
argument_list|)
expr_stmt|;
name|Q_UNIMPLEMENTED
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|leaveMulticastGroup
name|bool
name|QNativeSocketEngine
operator|::
name|leaveMulticastGroup
parameter_list|(
specifier|const
name|QHostAddress
modifier|&
name|groupAddress
parameter_list|,
specifier|const
name|QNetworkInterface
modifier|&
name|iface
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|groupAddress
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|iface
argument_list|)
expr_stmt|;
name|Q_UNIMPLEMENTED
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|multicastInterface
name|QNetworkInterface
name|QNativeSocketEngine
operator|::
name|multicastInterface
parameter_list|()
specifier|const
block|{
name|Q_UNIMPLEMENTED
argument_list|()
expr_stmt|;
return|return
name|QNetworkInterface
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setMulticastInterface
name|bool
name|QNativeSocketEngine
operator|::
name|setMulticastInterface
parameter_list|(
specifier|const
name|QNetworkInterface
modifier|&
name|iface
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|iface
argument_list|)
expr_stmt|;
name|Q_UNIMPLEMENTED
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|bytesAvailable
name|qint64
name|QNativeSocketEngine
operator|::
name|bytesAvailable
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QNativeSocketEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|socketType
operator|!=
name|QAbstractSocket
operator|::
name|TcpSocket
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|d
operator|->
name|inputBuffer
condition|)
block|{
name|UINT32
name|len
decl_stmt|;
name|d
operator|->
name|inputBuffer
operator|->
name|get_Length
argument_list|(
operator|&
name|len
argument_list|)
expr_stmt|;
return|return
name|len
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|read
name|qint64
name|QNativeSocketEngine
operator|::
name|read
parameter_list|(
name|char
modifier|*
name|data
parameter_list|,
name|qint64
name|maxlen
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QNativeSocketEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|socketType
operator|!=
name|QAbstractSocket
operator|::
name|TcpSocket
condition|)
return|return
operator|-
literal|1
return|;
name|ComPtr
argument_list|<
name|IDataReaderStatics
argument_list|>
name|dataReaderStatics
decl_stmt|;
name|GetActivationFactory
argument_list|(
name|HString
operator|::
name|MakeReference
argument_list|(
name|RuntimeClass_Windows_Storage_Streams_DataReader
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|dataReaderStatics
argument_list|)
expr_stmt|;
name|ComPtr
argument_list|<
name|IDataReader
argument_list|>
name|reader
decl_stmt|;
name|dataReaderStatics
operator|->
name|FromBuffer
argument_list|(
name|d
operator|->
name|inputBuffer
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|reader
argument_list|)
expr_stmt|;
name|UINT32
name|bufferCapacity
decl_stmt|;
name|d
operator|->
name|inputBuffer
operator|->
name|get_Capacity
argument_list|(
operator|&
name|bufferCapacity
argument_list|)
expr_stmt|;
name|qint64
name|lengthToRead
init|=
name|maxlen
operator|<
name|bufferCapacity
condition|?
name|maxlen
else|:
name|bufferCapacity
decl_stmt|;
name|UINT32
name|bufferLength
decl_stmt|;
name|d
operator|->
name|inputBuffer
operator|->
name|get_Length
argument_list|(
operator|&
name|bufferLength
argument_list|)
expr_stmt|;
name|lengthToRead
operator|=
name|bufferLength
operator|<
name|lengthToRead
condition|?
name|bufferLength
else|:
name|lengthToRead
expr_stmt|;
name|reader
operator|->
name|ReadBytes
argument_list|(
name|lengthToRead
argument_list|,
operator|(
name|unsigned
name|char
operator|*
operator|)
name|data
argument_list|)
expr_stmt|;
return|return
name|lengthToRead
return|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|nativeWrite
specifier|static
name|qint64
name|nativeWrite
parameter_list|(
name|T
modifier|*
name|socket
parameter_list|,
specifier|const
name|char
modifier|*
name|data
parameter_list|,
name|qint64
name|len
parameter_list|)
block|{
name|ComPtr
argument_list|<
name|IOutputStream
argument_list|>
name|stream
decl_stmt|;
name|HRESULT
name|hr
init|=
name|socket
operator|->
name|get_OutputStream
argument_list|(
operator|&
name|stream
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
return|return
operator|-
literal|1
return|;
name|ComPtr
argument_list|<
name|ByteArrayBuffer
argument_list|>
name|buffer
init|=
name|Make
argument_list|<
name|ByteArrayBuffer
argument_list|>
argument_list|(
name|data
argument_list|,
name|len
argument_list|)
decl_stmt|;
name|ComPtr
argument_list|<
name|IAsyncOperationWithProgress
argument_list|<
name|UINT32
argument_list|,
name|UINT32
argument_list|>
argument_list|>
name|op
decl_stmt|;
name|hr
operator|=
name|stream
operator|->
name|WriteAsync
argument_list|(
name|buffer
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|op
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
return|return
operator|-
literal|1
return|;
name|UINT32
name|bytesWritten
decl_stmt|;
while|while
condition|(
operator|(
name|hr
operator|=
name|op
operator|->
name|GetResults
argument_list|(
operator|&
name|bytesWritten
argument_list|)
operator|)
operator|==
name|E_ILLEGAL_METHOD_CALL
condition|)
name|QCoreApplication
operator|::
name|processEvents
argument_list|(
name|QEventLoop
operator|::
name|ExcludeUserInputEvents
argument_list|)
expr_stmt|;
return|return
name|bytesWritten
return|;
block|}
end_function
begin_function
DECL|function|write
name|qint64
name|QNativeSocketEngine
operator|::
name|write
parameter_list|(
specifier|const
name|char
modifier|*
name|data
parameter_list|,
name|qint64
name|len
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QNativeSocketEngine
argument_list|)
expr_stmt|;
name|qint64
name|bytesWritten
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|socketType
operator|==
name|QAbstractSocket
operator|::
name|TcpSocket
condition|)
name|bytesWritten
operator|=
name|nativeWrite
argument_list|(
name|d
operator|->
name|tcp
argument_list|,
name|data
argument_list|,
name|len
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|d
operator|->
name|socketType
operator|==
name|QAbstractSocket
operator|::
name|UdpSocket
condition|)
name|bytesWritten
operator|=
name|nativeWrite
argument_list|(
name|d
operator|->
name|udp
argument_list|,
name|data
argument_list|,
name|len
argument_list|)
expr_stmt|;
if|if
condition|(
name|bytesWritten
operator|!=
operator|-
literal|1
operator|&&
name|d
operator|->
name|notifyOnWrite
condition|)
name|writeNotification
argument_list|()
expr_stmt|;
return|return
name|bytesWritten
return|;
block|}
end_function
begin_function
DECL|function|readDatagram
name|qint64
name|QNativeSocketEngine
operator|::
name|readDatagram
parameter_list|(
name|char
modifier|*
name|data
parameter_list|,
name|qint64
name|maxlen
parameter_list|,
name|QHostAddress
modifier|*
name|addr
parameter_list|,
name|quint16
modifier|*
name|port
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QNativeSocketEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|socketType
operator|!=
name|QAbstractSocket
operator|::
name|UdpSocket
condition|)
return|return
operator|-
literal|1
return|;
name|QHostAddress
name|returnAddress
decl_stmt|;
name|quint16
name|returnPort
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|pendingDatagrams
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|IDatagramSocketMessageReceivedEventArgs
modifier|*
name|arg
init|=
name|d
operator|->
name|pendingDatagrams
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ComPtr
argument_list|<
name|IHostName
argument_list|>
name|remoteHost
decl_stmt|;
name|HSTRING
name|remoteHostString
decl_stmt|;
name|HSTRING
name|remotePort
decl_stmt|;
name|arg
operator|->
name|get_RemoteAddress
argument_list|(
operator|&
name|remoteHost
argument_list|)
expr_stmt|;
name|arg
operator|->
name|get_RemotePort
argument_list|(
operator|&
name|remotePort
argument_list|)
expr_stmt|;
name|remoteHost
operator|->
name|get_CanonicalName
argument_list|(
operator|&
name|remoteHostString
argument_list|)
expr_stmt|;
name|returnAddress
operator|.
name|setAddress
argument_list|(
name|qt_QStringFromHSTRING
argument_list|(
name|remoteHostString
argument_list|)
argument_list|)
expr_stmt|;
name|returnPort
operator|=
name|qt_QStringFromHSTRING
argument_list|(
name|remotePort
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
name|ComPtr
argument_list|<
name|IDataReader
argument_list|>
name|reader
decl_stmt|;
name|arg
operator|->
name|GetDataReader
argument_list|(
operator|&
name|reader
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|reader
condition|)
continue|continue;
name|BYTE
name|buffer
index|[
literal|1024
index|]
decl_stmt|;
name|reader
operator|->
name|ReadBytes
argument_list|(
name|maxlen
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
operator|*
name|addr
operator|=
name|returnAddress
expr_stmt|;
operator|*
name|port
operator|=
name|returnPort
expr_stmt|;
name|arg
operator|=
name|d
operator|->
name|pendingDatagrams
operator|.
name|takeFirst
argument_list|()
expr_stmt|;
comment|// TODO: fill data
name|Q_UNUSED
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|arg
operator|->
name|Release
argument_list|()
expr_stmt|;
operator|delete
name|arg
expr_stmt|;
operator|--
name|i
expr_stmt|;
return|return
name|maxlen
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|writeDatagram
name|qint64
name|QNativeSocketEngine
operator|::
name|writeDatagram
parameter_list|(
specifier|const
name|char
modifier|*
name|data
parameter_list|,
name|qint64
name|len
parameter_list|,
specifier|const
name|QHostAddress
modifier|&
name|addr
parameter_list|,
name|quint16
name|port
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QNativeSocketEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|socketType
operator|!=
name|QAbstractSocket
operator|::
name|UdpSocket
condition|)
return|return
operator|-
literal|1
return|;
name|ComPtr
argument_list|<
name|IHostName
argument_list|>
name|remoteHost
decl_stmt|;
name|ComPtr
argument_list|<
name|IHostNameFactory
argument_list|>
name|hostNameFactory
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|GetActivationFactory
argument_list|(
name|HString
operator|::
name|MakeReference
argument_list|(
name|RuntimeClass_Windows_Networking_HostName
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|hostNameFactory
argument_list|)
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"QNativeSocketEnginePrivate::nativeSendDatagram: could not obtain hostname factory"
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
specifier|const
name|QString
name|addressString
init|=
name|addr
operator|.
name|toString
argument_list|()
decl_stmt|;
name|HStringReference
name|hostNameRef
argument_list|(
cast|reinterpret_cast
argument_list|<
name|LPCWSTR
argument_list|>
argument_list|(
name|addressString
operator|.
name|utf16
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|hostNameFactory
operator|->
name|CreateHostName
argument_list|(
name|hostNameRef
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|remoteHost
argument_list|)
expr_stmt|;
name|ComPtr
argument_list|<
name|IAsyncOperation
argument_list|<
name|IOutputStream
modifier|*
argument_list|>
argument_list|>
name|streamOperation
decl_stmt|;
name|ComPtr
argument_list|<
name|IOutputStream
argument_list|>
name|stream
decl_stmt|;
specifier|const
name|QString
name|portString
init|=
name|QString
operator|::
name|number
argument_list|(
name|port
argument_list|)
decl_stmt|;
name|HStringReference
name|portRef
argument_list|(
cast|reinterpret_cast
argument_list|<
name|LPCWSTR
argument_list|>
argument_list|(
name|portString
operator|.
name|utf16
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|d
operator|->
name|udp
operator|->
name|GetOutputStreamAsync
argument_list|(
name|remoteHost
operator|.
name|Get
argument_list|()
argument_list|,
name|portRef
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|streamOperation
argument_list|)
argument_list|)
condition|)
return|return
operator|-
literal|1
return|;
name|HRESULT
name|hr
decl_stmt|;
while|while
condition|(
name|hr
operator|=
name|streamOperation
operator|->
name|GetResults
argument_list|(
operator|&
name|stream
argument_list|)
operator|==
name|E_ILLEGAL_METHOD_CALL
condition|)
name|QCoreApplication
operator|::
name|processEvents
argument_list|(
name|QEventLoop
operator|::
name|ExcludeUserInputEvents
argument_list|)
expr_stmt|;
name|ComPtr
argument_list|<
name|IDataWriterFactory
argument_list|>
name|dataWriterFactory
decl_stmt|;
name|GetActivationFactory
argument_list|(
name|HString
operator|::
name|MakeReference
argument_list|(
name|RuntimeClass_Windows_Storage_Streams_DataWriter
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|dataWriterFactory
argument_list|)
expr_stmt|;
name|ComPtr
argument_list|<
name|IDataWriter
argument_list|>
name|writer
decl_stmt|;
name|dataWriterFactory
operator|->
name|CreateDataWriter
argument_list|(
name|stream
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|->
name|WriteBytes
argument_list|(
name|len
argument_list|,
operator|(
name|unsigned
name|char
operator|*
operator|)
name|data
argument_list|)
expr_stmt|;
return|return
name|len
return|;
block|}
end_function
begin_function
DECL|function|hasPendingDatagrams
name|bool
name|QNativeSocketEngine
operator|::
name|hasPendingDatagrams
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QNativeSocketEngine
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|pendingDatagrams
operator|.
name|length
argument_list|()
operator|>
literal|0
return|;
block|}
end_function
begin_function
DECL|function|pendingDatagramSize
name|qint64
name|QNativeSocketEngine
operator|::
name|pendingDatagramSize
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QNativeSocketEngine
argument_list|)
expr_stmt|;
name|qint64
name|ret
init|=
literal|0
decl_stmt|;
foreach|foreach
control|(
name|IDatagramSocketMessageReceivedEventArgs
modifier|*
name|arg
decl|,
name|d
operator|->
name|pendingDatagrams
control|)
block|{
name|ComPtr
argument_list|<
name|IDataReader
argument_list|>
name|reader
decl_stmt|;
name|UINT32
name|unconsumedBufferLength
decl_stmt|;
name|arg
operator|->
name|GetDataReader
argument_list|(
operator|&
name|reader
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|reader
condition|)
return|return
operator|-
literal|1
return|;
name|reader
operator|->
name|get_UnconsumedBufferLength
argument_list|(
operator|&
name|unconsumedBufferLength
argument_list|)
expr_stmt|;
name|ret
operator|+=
name|unconsumedBufferLength
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|bytesToWrite
name|qint64
name|QNativeSocketEngine
operator|::
name|bytesToWrite
parameter_list|()
specifier|const
block|{
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|receiveBufferSize
name|qint64
name|QNativeSocketEngine
operator|::
name|receiveBufferSize
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QNativeSocketEngine
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|option
argument_list|(
name|QAbstractSocketEngine
operator|::
name|ReceiveBufferSocketOption
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|setReceiveBufferSize
name|void
name|QNativeSocketEngine
operator|::
name|setReceiveBufferSize
parameter_list|(
name|qint64
name|bufferSize
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QNativeSocketEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|setOption
argument_list|(
name|QAbstractSocketEngine
operator|::
name|ReceiveBufferSocketOption
argument_list|,
name|bufferSize
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sendBufferSize
name|qint64
name|QNativeSocketEngine
operator|::
name|sendBufferSize
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QNativeSocketEngine
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|option
argument_list|(
name|QAbstractSocketEngine
operator|::
name|SendBufferSocketOption
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|setSendBufferSize
name|void
name|QNativeSocketEngine
operator|::
name|setSendBufferSize
parameter_list|(
name|qint64
name|bufferSize
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QNativeSocketEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|setOption
argument_list|(
name|QAbstractSocketEngine
operator|::
name|SendBufferSocketOption
argument_list|,
name|bufferSize
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|option
name|int
name|QNativeSocketEngine
operator|::
name|option
parameter_list|(
name|QAbstractSocketEngine
operator|::
name|SocketOption
name|option
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QNativeSocketEngine
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|option
argument_list|(
name|option
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|setOption
name|bool
name|QNativeSocketEngine
operator|::
name|setOption
parameter_list|(
name|QAbstractSocketEngine
operator|::
name|SocketOption
name|option
parameter_list|,
name|int
name|value
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QNativeSocketEngine
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|setOption
argument_list|(
name|option
argument_list|,
name|value
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|waitForRead
name|bool
name|QNativeSocketEngine
operator|::
name|waitForRead
parameter_list|(
name|int
name|msecs
parameter_list|,
name|bool
modifier|*
name|timedOut
parameter_list|)
block|{
name|Q_D
argument_list|(
specifier|const
name|QNativeSocketEngine
argument_list|)
expr_stmt|;
name|Q_CHECK_VALID_SOCKETLAYER
argument_list|(
name|QNativeSocketEngine
operator|::
name|waitForRead
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Q_CHECK_NOT_STATE
argument_list|(
name|QNativeSocketEngine
operator|::
name|waitForRead
argument_list|()
argument_list|,
name|QAbstractSocket
operator|::
name|UnconnectedState
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|timedOut
condition|)
operator|*
name|timedOut
operator|=
literal|false
expr_stmt|;
name|QElapsedTimer
name|timer
decl_stmt|;
name|timer
operator|.
name|start
argument_list|()
expr_stmt|;
while|while
condition|(
name|msecs
operator|>
name|timer
operator|.
name|elapsed
argument_list|()
condition|)
block|{
comment|// Servers with active connections are ready for reading
if|if
condition|(
operator|!
name|d
operator|->
name|currentConnections
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|true
return|;
comment|// If we are a client, we are ready to read if our buffer has data
name|UINT32
name|length
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|d
operator|->
name|inputBuffer
operator|->
name|get_Length
argument_list|(
operator|&
name|length
argument_list|)
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|length
condition|)
return|return
literal|true
return|;
comment|// Nothing to do, wait for more events
name|QCoreApplication
operator|::
name|processEvents
argument_list|(
name|QEventLoop
operator|::
name|ExcludeUserInputEvents
operator||
name|QEventLoop
operator|::
name|WaitForMoreEvents
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|SocketTimeoutError
argument_list|,
name|QNativeSocketEnginePrivate
operator|::
name|TimeOutErrorString
argument_list|)
expr_stmt|;
if|if
condition|(
name|timedOut
condition|)
operator|*
name|timedOut
operator|=
literal|true
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|waitForWrite
name|bool
name|QNativeSocketEngine
operator|::
name|waitForWrite
parameter_list|(
name|int
name|msecs
parameter_list|,
name|bool
modifier|*
name|timedOut
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|msecs
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|timedOut
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|waitForReadOrWrite
name|bool
name|QNativeSocketEngine
operator|::
name|waitForReadOrWrite
parameter_list|(
name|bool
modifier|*
name|readyToRead
parameter_list|,
name|bool
modifier|*
name|readyToWrite
parameter_list|,
name|bool
name|checkRead
parameter_list|,
name|bool
name|checkWrite
parameter_list|,
name|int
name|msecs
parameter_list|,
name|bool
modifier|*
name|timedOut
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|readyToRead
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|readyToWrite
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|checkRead
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|checkWrite
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|msecs
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|timedOut
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|isReadNotificationEnabled
name|bool
name|QNativeSocketEngine
operator|::
name|isReadNotificationEnabled
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QNativeSocketEngine
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|notifyOnRead
return|;
block|}
end_function
begin_function
DECL|function|setReadNotificationEnabled
name|void
name|QNativeSocketEngine
operator|::
name|setReadNotificationEnabled
parameter_list|(
name|bool
name|enable
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QNativeSocketEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|notifyOnRead
operator|=
name|enable
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isWriteNotificationEnabled
name|bool
name|QNativeSocketEngine
operator|::
name|isWriteNotificationEnabled
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QNativeSocketEngine
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|notifyOnWrite
return|;
block|}
end_function
begin_function
DECL|function|setWriteNotificationEnabled
name|void
name|QNativeSocketEngine
operator|::
name|setWriteNotificationEnabled
parameter_list|(
name|bool
name|enable
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QNativeSocketEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|notifyOnWrite
operator|=
name|enable
expr_stmt|;
if|if
condition|(
name|enable
operator|&&
name|d
operator|->
name|socketState
operator|==
name|QAbstractSocket
operator|::
name|ConnectedState
condition|)
block|{
if|if
condition|(
name|bytesToWrite
argument_list|()
condition|)
return|return;
comment|// will be emitted as a result of bytes written
name|writeNotification
argument_list|()
expr_stmt|;
name|d
operator|->
name|notifyOnWrite
operator|=
literal|false
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|isExceptionNotificationEnabled
name|bool
name|QNativeSocketEngine
operator|::
name|isExceptionNotificationEnabled
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QNativeSocketEngine
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|notifyOnException
return|;
block|}
end_function
begin_function
DECL|function|setExceptionNotificationEnabled
name|void
name|QNativeSocketEngine
operator|::
name|setExceptionNotificationEnabled
parameter_list|(
name|bool
name|enable
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QNativeSocketEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|notifyOnException
operator|=
name|enable
expr_stmt|;
block|}
end_function
begin_function
DECL|function|createNewSocket
name|bool
name|QNativeSocketEnginePrivate
operator|::
name|createNewSocket
parameter_list|(
name|QAbstractSocket
operator|::
name|SocketType
name|socketType
parameter_list|,
name|QAbstractSocket
operator|::
name|NetworkLayerProtocol
modifier|&
name|socketProtocol
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|socketProtocol
argument_list|)
expr_stmt|;
name|SocketHandler
modifier|*
name|handler
init|=
name|gSocketHandler
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|socketType
condition|)
block|{
case|case
name|QAbstractSocket
operator|::
name|TcpSocket
case|:
block|{
if|if
condition|(
name|FAILED
argument_list|(
name|RoActivateInstance
argument_list|(
name|HString
operator|::
name|MakeReference
argument_list|(
name|RuntimeClass_Windows_Networking_Sockets_StreamSocket
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
cast|reinterpret_cast
argument_list|<
name|IInspectable
operator|*
operator|*
argument_list|>
argument_list|(
operator|&
name|tcp
argument_list|)
argument_list|)
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"Failed to create StreamSocket instance"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|socketDescriptor
operator|=
operator|++
name|handler
operator|->
name|socketCount
expr_stmt|;
return|return
literal|true
return|;
block|}
case|case
name|QAbstractSocket
operator|::
name|UdpSocket
case|:
block|{
if|if
condition|(
name|FAILED
argument_list|(
name|RoActivateInstance
argument_list|(
name|HString
operator|::
name|MakeReference
argument_list|(
name|RuntimeClass_Windows_Networking_Sockets_DatagramSocket
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
cast|reinterpret_cast
argument_list|<
name|IInspectable
operator|*
operator|*
argument_list|>
argument_list|(
operator|&
name|udp
argument_list|)
argument_list|)
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"Failed to create stream socket"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|EventRegistrationToken
name|token
decl_stmt|;
name|udp
operator|->
name|add_MessageReceived
argument_list|(
name|Callback
argument_list|<
name|DatagramReceivedHandler
argument_list|>
argument_list|(
name|this
argument_list|,
operator|&
name|QNativeSocketEnginePrivate
operator|::
name|handleNewDatagram
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|token
argument_list|)
expr_stmt|;
name|socketDescriptor
operator|=
operator|++
name|handler
operator|->
name|socketCount
expr_stmt|;
return|return
literal|true
return|;
block|}
default|default:
name|qWarning
argument_list|(
literal|"Invalid socket type"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_constructor
DECL|function|QNativeSocketEnginePrivate
name|QNativeSocketEnginePrivate
operator|::
name|QNativeSocketEnginePrivate
parameter_list|()
member_init_list|:
name|QAbstractSocketEnginePrivate
argument_list|()
member_init_list|,
name|notifyOnRead
argument_list|(
literal|true
argument_list|)
member_init_list|,
name|notifyOnWrite
argument_list|(
literal|true
argument_list|)
member_init_list|,
name|notifyOnException
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|closingDown
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|socketDescriptor
argument_list|(
operator|-
literal|1
argument_list|)
block|{
name|ComPtr
argument_list|<
name|ByteArrayBuffer
argument_list|>
name|buffer
init|=
name|Make
argument_list|<
name|ByteArrayBuffer
argument_list|>
argument_list|(
literal|8192
argument_list|)
decl_stmt|;
name|inputBuffer
operator|=
name|buffer
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QNativeSocketEnginePrivate
name|QNativeSocketEnginePrivate
operator|::
name|~
name|QNativeSocketEnginePrivate
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|setError
name|void
name|QNativeSocketEnginePrivate
operator|::
name|setError
parameter_list|(
name|QAbstractSocket
operator|::
name|SocketError
name|error
parameter_list|,
name|ErrorString
name|errorString
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|hasSetSocketError
condition|)
block|{
comment|// Only set socket errors once for one engine; expect the
comment|// socket to recreate its engine after an error. Note: There's
comment|// one exception: SocketError(11) bypasses this as it's purely
comment|// a temporary internal error condition.
comment|// Another exception is the way the waitFor*() functions set
comment|// an error when a timeout occurs. After the call to setError()
comment|// they reset the hasSetSocketError to false
return|return;
block|}
if|if
condition|(
name|error
operator|!=
name|QAbstractSocket
operator|::
name|SocketError
argument_list|(
literal|11
argument_list|)
condition|)
name|hasSetSocketError
operator|=
literal|true
expr_stmt|;
name|socketError
operator|=
name|error
expr_stmt|;
switch|switch
condition|(
name|errorString
condition|)
block|{
case|case
name|NonBlockingInitFailedErrorString
case|:
name|socketErrorString
operator|=
name|QNativeSocketEngine
operator|::
name|tr
argument_list|(
literal|"Unable to initialize non-blocking socket"
argument_list|)
expr_stmt|;
break|break;
case|case
name|BroadcastingInitFailedErrorString
case|:
name|socketErrorString
operator|=
name|QNativeSocketEngine
operator|::
name|tr
argument_list|(
literal|"Unable to initialize broadcast socket"
argument_list|)
expr_stmt|;
break|break;
comment|// should not happen anymore
case|case
name|NoIpV6ErrorString
case|:
name|socketErrorString
operator|=
name|QNativeSocketEngine
operator|::
name|tr
argument_list|(
literal|"Attempt to use IPv6 socket on a platform with no IPv6 support"
argument_list|)
expr_stmt|;
break|break;
case|case
name|RemoteHostClosedErrorString
case|:
name|socketErrorString
operator|=
name|QNativeSocketEngine
operator|::
name|tr
argument_list|(
literal|"The remote host closed the connection"
argument_list|)
expr_stmt|;
break|break;
case|case
name|TimeOutErrorString
case|:
name|socketErrorString
operator|=
name|QNativeSocketEngine
operator|::
name|tr
argument_list|(
literal|"Network operation timed out"
argument_list|)
expr_stmt|;
break|break;
case|case
name|ResourceErrorString
case|:
name|socketErrorString
operator|=
name|QNativeSocketEngine
operator|::
name|tr
argument_list|(
literal|"Out of resources"
argument_list|)
expr_stmt|;
break|break;
case|case
name|OperationUnsupportedErrorString
case|:
name|socketErrorString
operator|=
name|QNativeSocketEngine
operator|::
name|tr
argument_list|(
literal|"Unsupported socket operation"
argument_list|)
expr_stmt|;
break|break;
case|case
name|ProtocolUnsupportedErrorString
case|:
name|socketErrorString
operator|=
name|QNativeSocketEngine
operator|::
name|tr
argument_list|(
literal|"Protocol type not supported"
argument_list|)
expr_stmt|;
break|break;
case|case
name|InvalidSocketErrorString
case|:
name|socketErrorString
operator|=
name|QNativeSocketEngine
operator|::
name|tr
argument_list|(
literal|"Invalid socket descriptor"
argument_list|)
expr_stmt|;
break|break;
case|case
name|HostUnreachableErrorString
case|:
name|socketErrorString
operator|=
name|QNativeSocketEngine
operator|::
name|tr
argument_list|(
literal|"Host unreachable"
argument_list|)
expr_stmt|;
break|break;
case|case
name|NetworkUnreachableErrorString
case|:
name|socketErrorString
operator|=
name|QNativeSocketEngine
operator|::
name|tr
argument_list|(
literal|"Network unreachable"
argument_list|)
expr_stmt|;
break|break;
case|case
name|AccessErrorString
case|:
name|socketErrorString
operator|=
name|QNativeSocketEngine
operator|::
name|tr
argument_list|(
literal|"Permission denied"
argument_list|)
expr_stmt|;
break|break;
case|case
name|ConnectionTimeOutErrorString
case|:
name|socketErrorString
operator|=
name|QNativeSocketEngine
operator|::
name|tr
argument_list|(
literal|"Connection timed out"
argument_list|)
expr_stmt|;
break|break;
case|case
name|ConnectionRefusedErrorString
case|:
name|socketErrorString
operator|=
name|QNativeSocketEngine
operator|::
name|tr
argument_list|(
literal|"Connection refused"
argument_list|)
expr_stmt|;
break|break;
case|case
name|AddressInuseErrorString
case|:
name|socketErrorString
operator|=
name|QNativeSocketEngine
operator|::
name|tr
argument_list|(
literal|"The bound address is already in use"
argument_list|)
expr_stmt|;
break|break;
case|case
name|AddressNotAvailableErrorString
case|:
name|socketErrorString
operator|=
name|QNativeSocketEngine
operator|::
name|tr
argument_list|(
literal|"The address is not available"
argument_list|)
expr_stmt|;
break|break;
case|case
name|AddressProtectedErrorString
case|:
name|socketErrorString
operator|=
name|QNativeSocketEngine
operator|::
name|tr
argument_list|(
literal|"The address is protected"
argument_list|)
expr_stmt|;
break|break;
case|case
name|DatagramTooLargeErrorString
case|:
name|socketErrorString
operator|=
name|QNativeSocketEngine
operator|::
name|tr
argument_list|(
literal|"Datagram was too large to send"
argument_list|)
expr_stmt|;
break|break;
case|case
name|SendDatagramErrorString
case|:
name|socketErrorString
operator|=
name|QNativeSocketEngine
operator|::
name|tr
argument_list|(
literal|"Unable to send a message"
argument_list|)
expr_stmt|;
break|break;
case|case
name|ReceiveDatagramErrorString
case|:
name|socketErrorString
operator|=
name|QNativeSocketEngine
operator|::
name|tr
argument_list|(
literal|"Unable to receive a message"
argument_list|)
expr_stmt|;
break|break;
case|case
name|WriteErrorString
case|:
name|socketErrorString
operator|=
name|QNativeSocketEngine
operator|::
name|tr
argument_list|(
literal|"Unable to write"
argument_list|)
expr_stmt|;
break|break;
case|case
name|ReadErrorString
case|:
name|socketErrorString
operator|=
name|QNativeSocketEngine
operator|::
name|tr
argument_list|(
literal|"Network error"
argument_list|)
expr_stmt|;
break|break;
case|case
name|PortInuseErrorString
case|:
name|socketErrorString
operator|=
name|QNativeSocketEngine
operator|::
name|tr
argument_list|(
literal|"Another socket is already listening on the same port"
argument_list|)
expr_stmt|;
break|break;
case|case
name|NotSocketErrorString
case|:
name|socketErrorString
operator|=
name|QNativeSocketEngine
operator|::
name|tr
argument_list|(
literal|"Operation on non-socket"
argument_list|)
expr_stmt|;
break|break;
case|case
name|InvalidProxyTypeString
case|:
name|socketErrorString
operator|=
name|QNativeSocketEngine
operator|::
name|tr
argument_list|(
literal|"The proxy type is invalid for this operation"
argument_list|)
expr_stmt|;
break|break;
case|case
name|TemporaryErrorString
case|:
name|socketErrorString
operator|=
name|QNativeSocketEngine
operator|::
name|tr
argument_list|(
literal|"Temporary error"
argument_list|)
expr_stmt|;
break|break;
case|case
name|UnknownSocketErrorString
case|:
name|socketErrorString
operator|=
name|QNativeSocketEngine
operator|::
name|tr
argument_list|(
literal|"Unknown error"
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
end_function
begin_function
DECL|function|option
name|int
name|QNativeSocketEnginePrivate
operator|::
name|option
parameter_list|(
name|QAbstractSocketEngine
operator|::
name|SocketOption
name|opt
parameter_list|)
specifier|const
block|{
name|ComPtr
argument_list|<
name|IStreamSocketControl
argument_list|>
name|control
decl_stmt|;
if|if
condition|(
name|socketType
operator|==
name|QAbstractSocket
operator|::
name|TcpSocket
condition|)
block|{
if|if
condition|(
name|FAILED
argument_list|(
name|tcp
operator|->
name|get_Control
argument_list|(
operator|&
name|control
argument_list|)
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"QNativeSocketEnginePrivate::option: Could not obtain socket control"
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
block|}
switch|switch
condition|(
name|opt
condition|)
block|{
case|case
name|QAbstractSocketEngine
operator|::
name|NonBlockingSocketOption
case|:
case|case
name|QAbstractSocketEngine
operator|::
name|BroadcastSocketOption
case|:
case|case
name|QAbstractSocketEngine
operator|::
name|ReceiveOutOfBandData
case|:
return|return
literal|1
return|;
case|case
name|QAbstractSocketEngine
operator|::
name|SendBufferSocketOption
case|:
if|if
condition|(
name|socketType
operator|==
name|QAbstractSocket
operator|::
name|UdpSocket
condition|)
return|return
operator|-
literal|1
return|;
name|UINT32
name|bufferSize
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|control
operator|->
name|get_OutboundBufferSizeInBytes
argument_list|(
operator|&
name|bufferSize
argument_list|)
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"Could not obtain OutboundBufferSizeInBytes information vom socket control"
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
return|return
name|bufferSize
return|;
case|case
name|QAbstractSocketEngine
operator|::
name|LowDelayOption
case|:
if|if
condition|(
name|socketType
operator|==
name|QAbstractSocket
operator|::
name|UdpSocket
condition|)
return|return
operator|-
literal|1
return|;
name|boolean
name|noDelay
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|control
operator|->
name|get_NoDelay
argument_list|(
operator|&
name|noDelay
argument_list|)
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"Could not obtain NoDelay information from socket control"
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
return|return
name|noDelay
return|;
case|case
name|QAbstractSocketEngine
operator|::
name|KeepAliveOption
case|:
if|if
condition|(
name|socketType
operator|==
name|QAbstractSocket
operator|::
name|UdpSocket
condition|)
return|return
operator|-
literal|1
return|;
name|boolean
name|keepAlive
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|control
operator|->
name|get_KeepAlive
argument_list|(
operator|&
name|keepAlive
argument_list|)
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"Could not obtain KeepAlive information from socket control"
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
return|return
name|keepAlive
return|;
case|case
name|QAbstractSocketEngine
operator|::
name|ReceiveBufferSocketOption
case|:
case|case
name|QAbstractSocketEngine
operator|::
name|AddressReusable
case|:
case|case
name|QAbstractSocketEngine
operator|::
name|BindExclusively
case|:
case|case
name|QAbstractSocketEngine
operator|::
name|MulticastTtlOption
case|:
case|case
name|QAbstractSocketEngine
operator|::
name|MulticastLoopbackOption
case|:
case|case
name|QAbstractSocketEngine
operator|::
name|TypeOfServiceOption
case|:
default|default:
return|return
operator|-
literal|1
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|setOption
name|bool
name|QNativeSocketEnginePrivate
operator|::
name|setOption
parameter_list|(
name|QAbstractSocketEngine
operator|::
name|SocketOption
name|opt
parameter_list|,
name|int
name|v
parameter_list|)
block|{
name|ComPtr
argument_list|<
name|IStreamSocketControl
argument_list|>
name|control
decl_stmt|;
if|if
condition|(
name|socketType
operator|==
name|QAbstractSocket
operator|::
name|TcpSocket
condition|)
block|{
if|if
condition|(
name|FAILED
argument_list|(
name|tcp
operator|->
name|get_Control
argument_list|(
operator|&
name|control
argument_list|)
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"QNativeSocketEnginePrivate::setOption: Could not obtain socket control"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
switch|switch
condition|(
name|opt
condition|)
block|{
case|case
name|QAbstractSocketEngine
operator|::
name|NonBlockingSocketOption
case|:
case|case
name|QAbstractSocketEngine
operator|::
name|BroadcastSocketOption
case|:
case|case
name|QAbstractSocketEngine
operator|::
name|ReceiveOutOfBandData
case|:
return|return
name|v
operator|!=
literal|0
return|;
case|case
name|QAbstractSocketEngine
operator|::
name|SendBufferSocketOption
case|:
if|if
condition|(
name|socketType
operator|==
name|QAbstractSocket
operator|::
name|UdpSocket
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|FAILED
argument_list|(
name|control
operator|->
name|put_OutboundBufferSizeInBytes
argument_list|(
name|v
argument_list|)
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"Could not set OutboundBufferSizeInBytes"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
case|case
name|QAbstractSocketEngine
operator|::
name|LowDelayOption
case|:
block|{
if|if
condition|(
name|socketType
operator|==
name|QAbstractSocket
operator|::
name|UdpSocket
condition|)
return|return
literal|false
return|;
name|boolean
name|noDelay
init|=
name|v
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|control
operator|->
name|put_NoDelay
argument_list|(
name|noDelay
argument_list|)
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"Could not obtain NoDelay information from socket control"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
case|case
name|QAbstractSocketEngine
operator|::
name|KeepAliveOption
case|:
block|{
if|if
condition|(
name|socketType
operator|==
name|QAbstractSocket
operator|::
name|UdpSocket
condition|)
return|return
literal|false
return|;
name|boolean
name|keepAlive
init|=
name|v
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|control
operator|->
name|put_KeepAlive
argument_list|(
name|keepAlive
argument_list|)
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"Could not set KeepAlive value"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
case|case
name|QAbstractSocketEngine
operator|::
name|ReceiveBufferSocketOption
case|:
case|case
name|QAbstractSocketEngine
operator|::
name|AddressReusable
case|:
case|case
name|QAbstractSocketEngine
operator|::
name|BindExclusively
case|:
case|case
name|QAbstractSocketEngine
operator|::
name|MulticastTtlOption
case|:
case|case
name|QAbstractSocketEngine
operator|::
name|MulticastLoopbackOption
case|:
case|case
name|QAbstractSocketEngine
operator|::
name|TypeOfServiceOption
case|:
default|default:
return|return
literal|false
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|fetchConnectionParameters
name|bool
name|QNativeSocketEnginePrivate
operator|::
name|fetchConnectionParameters
parameter_list|()
block|{
name|localPort
operator|=
literal|0
expr_stmt|;
name|localAddress
operator|.
name|clear
argument_list|()
expr_stmt|;
name|peerPort
operator|=
literal|0
expr_stmt|;
name|peerAddress
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|socketType
operator|==
name|QAbstractSocket
operator|::
name|TcpSocket
condition|)
block|{
name|ComPtr
argument_list|<
name|IHostName
argument_list|>
name|hostName
decl_stmt|;
name|HSTRING
name|tmpHString
decl_stmt|;
name|ComPtr
argument_list|<
name|IStreamSocketInformation
argument_list|>
name|info
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|tcp
operator|->
name|get_Information
argument_list|(
operator|&
name|info
argument_list|)
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"QNativeSocketEnginePrivate::fetchConnectionParameters: Could not obtain socket info"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|info
operator|->
name|get_LocalAddress
argument_list|(
operator|&
name|hostName
argument_list|)
expr_stmt|;
if|if
condition|(
name|hostName
condition|)
block|{
name|hostName
operator|->
name|get_CanonicalName
argument_list|(
operator|&
name|tmpHString
argument_list|)
expr_stmt|;
name|localAddress
operator|.
name|setAddress
argument_list|(
name|qt_QStringFromHSTRING
argument_list|(
name|tmpHString
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|->
name|get_LocalPort
argument_list|(
operator|&
name|tmpHString
argument_list|)
expr_stmt|;
name|localPort
operator|=
name|qt_QStringFromHSTRING
argument_list|(
name|tmpHString
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|localPort
operator|&&
name|tcpListener
condition|)
block|{
name|ComPtr
argument_list|<
name|IStreamSocketListenerInformation
argument_list|>
name|listenerInfo
init|=
literal|0
decl_stmt|;
name|tcpListener
operator|->
name|get_Information
argument_list|(
operator|&
name|listenerInfo
argument_list|)
expr_stmt|;
name|listenerInfo
operator|->
name|get_LocalPort
argument_list|(
operator|&
name|tmpHString
argument_list|)
expr_stmt|;
name|localPort
operator|=
name|qt_QStringFromHSTRING
argument_list|(
name|tmpHString
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
name|localAddress
operator|==
name|QHostAddress
operator|::
name|Any
expr_stmt|;
block|}
name|info
operator|->
name|get_RemoteAddress
argument_list|(
operator|&
name|hostName
argument_list|)
expr_stmt|;
if|if
condition|(
name|hostName
condition|)
block|{
name|hostName
operator|->
name|get_CanonicalName
argument_list|(
operator|&
name|tmpHString
argument_list|)
expr_stmt|;
name|peerAddress
operator|.
name|setAddress
argument_list|(
name|qt_QStringFromHSTRING
argument_list|(
name|tmpHString
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|->
name|get_RemotePort
argument_list|(
operator|&
name|tmpHString
argument_list|)
expr_stmt|;
name|peerPort
operator|=
name|qt_QStringFromHSTRING
argument_list|(
name|tmpHString
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|socketType
operator|==
name|QAbstractSocket
operator|::
name|UdpSocket
condition|)
block|{
name|ComPtr
argument_list|<
name|IHostName
argument_list|>
name|hostName
decl_stmt|;
name|HSTRING
name|tmpHString
decl_stmt|;
name|ComPtr
argument_list|<
name|IDatagramSocketInformation
argument_list|>
name|info
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|udp
operator|->
name|get_Information
argument_list|(
operator|&
name|info
argument_list|)
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"QNativeSocketEnginePrivate::fetchConnectionParameters: Could not obtain socket information"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|info
operator|->
name|get_LocalAddress
argument_list|(
operator|&
name|hostName
argument_list|)
expr_stmt|;
if|if
condition|(
name|hostName
condition|)
block|{
name|hostName
operator|->
name|get_CanonicalName
argument_list|(
operator|&
name|tmpHString
argument_list|)
expr_stmt|;
name|localAddress
operator|.
name|setAddress
argument_list|(
name|qt_QStringFromHSTRING
argument_list|(
name|tmpHString
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|->
name|get_LocalPort
argument_list|(
operator|&
name|tmpHString
argument_list|)
expr_stmt|;
name|localPort
operator|=
name|qt_QStringFromHSTRING
argument_list|(
name|tmpHString
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
block|}
name|info
operator|->
name|get_RemoteAddress
argument_list|(
operator|&
name|hostName
argument_list|)
expr_stmt|;
if|if
condition|(
name|hostName
condition|)
block|{
name|hostName
operator|->
name|get_CanonicalName
argument_list|(
operator|&
name|tmpHString
argument_list|)
expr_stmt|;
name|peerAddress
operator|.
name|setAddress
argument_list|(
name|qt_QStringFromHSTRING
argument_list|(
name|tmpHString
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|->
name|get_RemotePort
argument_list|(
operator|&
name|tmpHString
argument_list|)
expr_stmt|;
name|peerPort
operator|=
name|qt_QStringFromHSTRING
argument_list|(
name|tmpHString
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|handleClientConnection
name|HRESULT
name|QNativeSocketEnginePrivate
operator|::
name|handleClientConnection
parameter_list|(
name|IStreamSocketListener
modifier|*
name|listener
parameter_list|,
name|IStreamSocketListenerConnectionReceivedEventArgs
modifier|*
name|args
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QNativeSocketEngine
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|tcpListener
operator|.
name|Get
argument_list|()
operator|==
name|listener
argument_list|)
expr_stmt|;
name|IStreamSocket
modifier|*
name|socket
decl_stmt|;
name|args
operator|->
name|get_Socket
argument_list|(
operator|&
name|socket
argument_list|)
expr_stmt|;
name|pendingConnections
operator|.
name|append
argument_list|(
name|socket
argument_list|)
expr_stmt|;
name|q
operator|->
name|connectionNotification
argument_list|()
expr_stmt|;
name|q
operator|->
name|readNotification
argument_list|()
expr_stmt|;
return|return
name|interruptEventDispatcher
argument_list|(
literal|0
argument_list|,
name|Completed
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|interruptEventDispatcher
name|HRESULT
name|QNativeSocketEnginePrivate
operator|::
name|interruptEventDispatcher
parameter_list|(
name|IAsyncAction
modifier|*
parameter_list|,
name|AsyncStatus
parameter_list|)
block|{
if|if
condition|(
name|QThread
modifier|*
name|thread
init|=
name|QThread
operator|::
name|currentThread
argument_list|()
condition|)
block|{
if|if
condition|(
name|QAbstractEventDispatcher
modifier|*
name|dispatcher
init|=
name|thread
operator|->
name|eventDispatcher
argument_list|()
condition|)
name|dispatcher
operator|->
name|interrupt
argument_list|()
expr_stmt|;
block|}
return|return
name|S_OK
return|;
block|}
end_function
begin_function
DECL|function|handleReadyRead
name|HRESULT
name|QNativeSocketEnginePrivate
operator|::
name|handleReadyRead
parameter_list|(
name|IAsyncOperationWithProgress
argument_list|<
name|IBuffer
modifier|*
argument_list|,
name|UINT32
argument_list|>
modifier|*
name|asyncInfo
parameter_list|,
name|AsyncStatus
parameter_list|)
block|{
name|ByteArrayBuffer
modifier|*
name|buffer
init|=
literal|0
decl_stmt|;
name|HRESULT
name|hr
init|=
name|asyncInfo
operator|->
name|GetResults
argument_list|(
operator|(
name|IBuffer
operator|*
operator|*
operator|)
operator|&
name|buffer
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
return|return
name|hr
return|;
name|UINT32
name|len
decl_stmt|;
name|buffer
operator|->
name|get_Length
argument_list|(
operator|&
name|len
argument_list|)
expr_stmt|;
name|QNativeSocketEngine
modifier|*
name|q
init|=
name|buffer
operator|->
name|engine
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|q
condition|)
return|return
name|S_OK
return|;
if|if
condition|(
name|len
operator|>
literal|0
operator|&&
name|q
operator|->
name|isReadNotificationEnabled
argument_list|()
condition|)
block|{
name|q
operator|->
name|readNotification
argument_list|()
expr_stmt|;
block|}
comment|// Continue reading ### TODO: read into offset!!!
name|UINT32
name|capacity
decl_stmt|;
name|buffer
operator|->
name|get_Capacity
argument_list|(
operator|&
name|capacity
argument_list|)
expr_stmt|;
name|ComPtr
argument_list|<
name|IAsyncOperationWithProgress
argument_list|<
name|IBuffer
modifier|*
argument_list|,
name|UINT32
argument_list|>
argument_list|>
name|op
decl_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|buffer
operator|->
name|inputStream
argument_list|()
operator|->
name|ReadAsync
argument_list|(
name|buffer
argument_list|,
name|capacity
argument_list|,
name|InputStreamOptions_Partial
argument_list|,
operator|&
name|op
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|q
condition|)
return|return
name|op
operator|->
name|put_Completed
argument_list|(
name|Callback
argument_list|<
name|SocketReadCompletedHandler
argument_list|>
argument_list|(
operator|&
name|QNativeSocketEnginePrivate
operator|::
name|handleReadyRead
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|)
return|;
else|else
return|return
name|op
operator|->
name|put_Completed
argument_list|(
literal|nullptr
argument_list|)
return|;
block|}
return|return
name|E_FAIL
return|;
block|}
end_function
begin_function
DECL|function|handleNewDatagram
name|HRESULT
name|QNativeSocketEnginePrivate
operator|::
name|handleNewDatagram
parameter_list|(
name|IDatagramSocket
modifier|*
name|socket
parameter_list|,
name|IDatagramSocketMessageReceivedEventArgs
modifier|*
name|args
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QNativeSocketEngine
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|udp
operator|==
name|socket
argument_list|)
expr_stmt|;
name|pendingDatagrams
operator|.
name|append
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|q
operator|->
name|readNotification
argument_list|()
expr_stmt|;
return|return
name|S_OK
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
