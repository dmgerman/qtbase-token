begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtNetwork module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<qt_windows.h>
end_include
begin_include
include|#
directive|include
file|"qnativesocketengine_winrt_p.h"
end_include
begin_include
include|#
directive|include
file|<qcoreapplication.h>
end_include
begin_include
include|#
directive|include
file|<qabstracteventdispatcher.h>
end_include
begin_include
include|#
directive|include
file|<qsocketnotifier.h>
end_include
begin_include
include|#
directive|include
file|<qdatetime.h>
end_include
begin_include
include|#
directive|include
file|<qnetworkinterface.h>
end_include
begin_include
include|#
directive|include
file|<qelapsedtimer.h>
end_include
begin_include
include|#
directive|include
file|<qthread.h>
end_include
begin_include
include|#
directive|include
file|<qabstracteventdispatcher.h>
end_include
begin_include
include|#
directive|include
file|<qfunctions_winrt.h>
end_include
begin_include
include|#
directive|include
file|<private/qthread_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qabstractsocket_p.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_SSL
end_ifndef
begin_include
include|#
directive|include
file|<QSslSocket>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<wrl.h>
end_include
begin_include
include|#
directive|include
file|<windows.foundation.collections.h>
end_include
begin_include
include|#
directive|include
file|<windows.storage.streams.h>
end_include
begin_include
include|#
directive|include
file|<windows.networking.h>
end_include
begin_include
include|#
directive|include
file|<windows.networking.sockets.h>
end_include
begin_include
include|#
directive|include
file|<robuffer.h>
end_include
begin_using
using|using
namespace|namespace
name|Microsoft
operator|::
name|WRL
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|Microsoft
operator|::
name|WRL
operator|::
name|Wrappers
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|Foundation
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|Foundation
operator|::
name|Collections
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|Storage
operator|::
name|Streams
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|Networking
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|Networking
operator|::
name|Connectivity
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|Networking
operator|::
name|Sockets
namespace|;
end_using
begin_typedef
DECL|typedef|ClientConnectedHandler
typedef|typedef
name|ITypedEventHandler
argument_list|<
name|StreamSocketListener
modifier|*
argument_list|,
name|StreamSocketListenerConnectionReceivedEventArgs
modifier|*
argument_list|>
name|ClientConnectedHandler
typedef|;
end_typedef
begin_typedef
DECL|typedef|DatagramReceivedHandler
typedef|typedef
name|ITypedEventHandler
argument_list|<
name|DatagramSocket
modifier|*
argument_list|,
name|DatagramSocketMessageReceivedEventArgs
modifier|*
argument_list|>
name|DatagramReceivedHandler
typedef|;
end_typedef
begin_typedef
DECL|typedef|SocketReadCompletedHandler
typedef|typedef
name|IAsyncOperationWithProgressCompletedHandler
argument_list|<
name|IBuffer
modifier|*
argument_list|,
name|UINT32
argument_list|>
name|SocketReadCompletedHandler
typedef|;
end_typedef
begin_typedef
DECL|typedef|SocketWriteCompletedHandler
typedef|typedef
name|IAsyncOperationWithProgressCompletedHandler
argument_list|<
name|UINT32
argument_list|,
name|UINT32
argument_list|>
name|SocketWriteCompletedHandler
typedef|;
end_typedef
begin_typedef
DECL|typedef|IAsyncBufferOperation
typedef|typedef
name|IAsyncOperationWithProgress
argument_list|<
name|IBuffer
modifier|*
argument_list|,
name|UINT32
argument_list|>
name|IAsyncBufferOperation
typedef|;
end_typedef
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_comment
comment|// Common constructs
end_comment
begin_define
DECL|macro|Q_CHECK_VALID_SOCKETLAYER
define|#
directive|define
name|Q_CHECK_VALID_SOCKETLAYER
parameter_list|(
name|function
parameter_list|,
name|returnValue
parameter_list|)
value|do { \     if (!isValid()) { \         qWarning(""#function" was called on an uninitialized socket device"); \         return returnValue; \     } } while (0)
end_define
begin_define
DECL|macro|Q_CHECK_INVALID_SOCKETLAYER
define|#
directive|define
name|Q_CHECK_INVALID_SOCKETLAYER
parameter_list|(
name|function
parameter_list|,
name|returnValue
parameter_list|)
value|do { \     if (isValid()) { \         qWarning(""#function" was called on an already initialized socket device"); \         return returnValue; \     } } while (0)
end_define
begin_define
DECL|macro|Q_CHECK_STATE
define|#
directive|define
name|Q_CHECK_STATE
parameter_list|(
name|function
parameter_list|,
name|checkState
parameter_list|,
name|returnValue
parameter_list|)
value|do { \     if (d->socketState != (checkState)) { \         qWarning(""#function" was not called in "#checkState); \         return (returnValue); \     } } while (0)
end_define
begin_define
DECL|macro|Q_CHECK_NOT_STATE
define|#
directive|define
name|Q_CHECK_NOT_STATE
parameter_list|(
name|function
parameter_list|,
name|checkState
parameter_list|,
name|returnValue
parameter_list|)
value|do { \     if (d->socketState == (checkState)) { \         qWarning(""#function" was called in "#checkState); \         return (returnValue); \     } } while (0)
end_define
begin_define
DECL|macro|Q_CHECK_STATES
define|#
directive|define
name|Q_CHECK_STATES
parameter_list|(
name|function
parameter_list|,
name|state1
parameter_list|,
name|state2
parameter_list|,
name|returnValue
parameter_list|)
value|do { \     if (d->socketState != (state1)&& d->socketState != (state2)) { \         qWarning(""#function" was called" \                  " not in "#state1" or "#state2); \         return (returnValue); \     } } while (0)
end_define
begin_define
DECL|macro|Q_CHECK_TYPE
define|#
directive|define
name|Q_CHECK_TYPE
parameter_list|(
name|function
parameter_list|,
name|type
parameter_list|,
name|returnValue
parameter_list|)
value|do { \     if (d->socketType != (type)) { \         qWarning(#function" was called by a" \                  " socket other than "#type""); \         return (returnValue); \     } } while (0)
end_define
begin_define
DECL|macro|Q_TR
define|#
directive|define
name|Q_TR
parameter_list|(
name|a
parameter_list|)
value|QT_TRANSLATE_NOOP(QNativeSocketEngine, a)
end_define
begin_typedef
DECL|typedef|TcpSocketHash
typedef|typedef
name|QHash
argument_list|<
name|qintptr
argument_list|,
name|IStreamSocket
modifier|*
argument_list|>
name|TcpSocketHash
typedef|;
end_typedef
begin_struct
DECL|struct|SocketHandler
struct|struct
name|SocketHandler
block|{
DECL|function|SocketHandler
name|SocketHandler
parameter_list|()
member_init_list|:
name|socketCount
argument_list|(
literal|0
argument_list|)
block|{}
DECL|member|socketCount
name|qintptr
name|socketCount
decl_stmt|;
DECL|member|pendingTcpSockets
name|TcpSocketHash
name|pendingTcpSockets
decl_stmt|;
block|}
struct|;
end_struct
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|SocketHandler
argument_list|,
argument|gSocketHandler
argument_list|)
end_macro
begin_struct
DECL|struct|SocketGlobal
struct|struct
name|SocketGlobal
block|{
DECL|function|SocketGlobal
name|SocketGlobal
parameter_list|()
block|{
name|HRESULT
name|hr
decl_stmt|;
name|hr
operator|=
name|GetActivationFactory
argument_list|(
name|HString
operator|::
name|MakeReference
argument_list|(
name|RuntimeClass_Windows_Storage_Streams_Buffer
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|bufferFactory
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
block|}
DECL|member|bufferFactory
name|ComPtr
argument_list|<
name|IBufferFactory
argument_list|>
name|bufferFactory
decl_stmt|;
block|}
struct|;
end_struct
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|SocketGlobal
argument_list|,
argument|g
argument_list|)
end_macro
begin_function
DECL|function|qt_QStringFromHString
specifier|static
specifier|inline
name|QString
name|qt_QStringFromHString
parameter_list|(
specifier|const
name|HString
modifier|&
name|string
parameter_list|)
block|{
name|UINT32
name|length
decl_stmt|;
name|PCWSTR
name|rawString
init|=
name|string
operator|.
name|GetRawBuffer
argument_list|(
operator|&
name|length
argument_list|)
decl_stmt|;
return|return
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|rawString
argument_list|,
name|length
argument_list|)
return|;
block|}
end_function
begin_define
DECL|macro|READ_BUFFER_SIZE
define|#
directive|define
name|READ_BUFFER_SIZE
value|65536
end_define
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|opStatus
specifier|static
name|AsyncStatus
name|opStatus
parameter_list|(
specifier|const
name|ComPtr
argument_list|<
name|T
argument_list|>
modifier|&
name|op
parameter_list|)
block|{
name|ComPtr
argument_list|<
name|IAsyncInfo
argument_list|>
name|info
decl_stmt|;
name|HRESULT
name|hr
init|=
name|op
operator|.
name|As
argument_list|(
operator|&
name|info
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|qErrnoWarning
argument_list|(
name|hr
argument_list|,
literal|"Failed to cast op to IAsyncInfo."
argument_list|)
expr_stmt|;
return|return
name|Error
return|;
block|}
name|AsyncStatus
name|status
decl_stmt|;
name|hr
operator|=
name|info
operator|->
name|get_Status
argument_list|(
operator|&
name|status
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|qErrnoWarning
argument_list|(
name|hr
argument_list|,
literal|"Failed to get AsyncStatus."
argument_list|)
expr_stmt|;
return|return
name|Error
return|;
block|}
return|return
name|status
return|;
block|}
end_function
begin_function
DECL|function|writeIOStream
specifier|static
name|qint64
name|writeIOStream
parameter_list|(
name|ComPtr
argument_list|<
name|IOutputStream
argument_list|>
name|stream
parameter_list|,
specifier|const
name|char
modifier|*
name|data
parameter_list|,
name|qint64
name|len
parameter_list|)
block|{
name|ComPtr
argument_list|<
name|IBuffer
argument_list|>
name|buffer
decl_stmt|;
name|HRESULT
name|hr
init|=
name|g
operator|->
name|bufferFactory
operator|->
name|Create
argument_list|(
name|len
argument_list|,
operator|&
name|buffer
argument_list|)
decl_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|hr
operator|=
name|buffer
operator|->
name|put_Length
argument_list|(
name|len
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|ComPtr
argument_list|<
name|Windows
operator|::
name|Storage
operator|::
name|Streams
operator|::
name|IBufferByteAccess
argument_list|>
name|byteArrayAccess
decl_stmt|;
name|hr
operator|=
name|buffer
operator|.
name|As
argument_list|(
operator|&
name|byteArrayAccess
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|byte
modifier|*
name|bytes
decl_stmt|;
name|hr
operator|=
name|byteArrayAccess
operator|->
name|Buffer
argument_list|(
operator|&
name|bytes
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|memcpy
argument_list|(
name|bytes
argument_list|,
name|data
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|ComPtr
argument_list|<
name|IAsyncOperationWithProgress
argument_list|<
name|UINT32
argument_list|,
name|UINT32
argument_list|>
argument_list|>
name|op
decl_stmt|;
name|hr
operator|=
name|stream
operator|->
name|WriteAsync
argument_list|(
name|buffer
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|op
argument_list|)
expr_stmt|;
name|RETURN_IF_FAILED
argument_list|(
literal|"Failed to write to stream"
argument_list|,
argument|return -
literal|1
argument_list|)
empty_stmt|;
name|UINT32
name|bytesWritten
decl_stmt|;
name|hr
operator|=
name|QWinRTFunctions
operator|::
name|await
argument_list|(
name|op
argument_list|,
operator|&
name|bytesWritten
argument_list|)
expr_stmt|;
name|RETURN_IF_FAILED
argument_list|(
literal|"Failed to write to stream"
argument_list|,
argument|return -
literal|1
argument_list|)
empty_stmt|;
return|return
name|bytesWritten
return|;
block|}
end_function
begin_constructor
DECL|function|QNativeSocketEngine
name|QNativeSocketEngine
operator|::
name|QNativeSocketEngine
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QAbstractSocketEngine
argument_list|(
operator|*
operator|new
name|QNativeSocketEnginePrivate
argument_list|()
argument_list|,
name|parent
argument_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_SSL
name|Q_D
argument_list|(
name|QNativeSocketEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|parent
condition|)
name|d
operator|->
name|sslSocket
operator|=
name|qobject_cast
argument_list|<
name|QSslSocket
operator|*
argument_list|>
argument_list|(
name|parent
operator|->
name|parent
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|connect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|connectionReady
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|connectionNotification
argument_list|()
argument_list|)
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|readReady
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|readNotification
argument_list|()
argument_list|)
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|writeReady
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|writeNotification
argument_list|()
argument_list|)
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QNativeSocketEngine
name|QNativeSocketEngine
operator|::
name|~
name|QNativeSocketEngine
parameter_list|()
block|{
name|close
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|initialize
name|bool
name|QNativeSocketEngine
operator|::
name|initialize
parameter_list|(
name|QAbstractSocket
operator|::
name|SocketType
name|type
parameter_list|,
name|QAbstractSocket
operator|::
name|NetworkLayerProtocol
name|protocol
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QNativeSocketEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|isValid
argument_list|()
condition|)
name|close
argument_list|()
expr_stmt|;
comment|// Create the socket
if|if
condition|(
operator|!
name|d
operator|->
name|createNewSocket
argument_list|(
name|type
argument_list|,
name|protocol
argument_list|)
condition|)
return|return
literal|false
return|;
name|d
operator|->
name|socketType
operator|=
name|type
expr_stmt|;
name|d
operator|->
name|socketProtocol
operator|=
name|protocol
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|initialize
name|bool
name|QNativeSocketEngine
operator|::
name|initialize
parameter_list|(
name|qintptr
name|socketDescriptor
parameter_list|,
name|QAbstractSocket
operator|::
name|SocketState
name|socketState
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QNativeSocketEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|isValid
argument_list|()
condition|)
name|close
argument_list|()
expr_stmt|;
comment|// Currently, only TCP sockets are initialized this way.
name|d
operator|->
name|socketDescriptor
operator|=
name|qintptr
argument_list|(
name|gSocketHandler
operator|->
name|pendingTcpSockets
operator|.
name|take
argument_list|(
name|socketDescriptor
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|socketType
operator|=
name|QAbstractSocket
operator|::
name|TcpSocket
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|socketDescriptor
operator|||
operator|!
name|d
operator|->
name|fetchConnectionParameters
argument_list|()
condition|)
block|{
name|d
operator|->
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|UnsupportedSocketOperationError
argument_list|,
name|d
operator|->
name|InvalidSocketErrorString
argument_list|)
expr_stmt|;
name|d
operator|->
name|socketDescriptor
operator|=
operator|-
literal|1
expr_stmt|;
return|return
literal|false
return|;
block|}
name|d
operator|->
name|socketState
operator|=
name|socketState
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|socketDescriptor
name|qintptr
name|QNativeSocketEngine
operator|::
name|socketDescriptor
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QNativeSocketEngine
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|socketDescriptor
return|;
block|}
end_function
begin_function
DECL|function|isValid
name|bool
name|QNativeSocketEngine
operator|::
name|isValid
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QNativeSocketEngine
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|socketDescriptor
operator|!=
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|connectToHost
name|bool
name|QNativeSocketEngine
operator|::
name|connectToHost
parameter_list|(
specifier|const
name|QHostAddress
modifier|&
name|address
parameter_list|,
name|quint16
name|port
parameter_list|)
block|{
specifier|const
name|QString
name|addressString
init|=
name|address
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
name|connectToHostByName
argument_list|(
name|addressString
argument_list|,
name|port
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|connectToHostByName
name|bool
name|QNativeSocketEngine
operator|::
name|connectToHostByName
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|,
name|quint16
name|port
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QNativeSocketEngine
argument_list|)
expr_stmt|;
name|HStringReference
name|hostNameRef
argument_list|(
cast|reinterpret_cast
argument_list|<
name|LPCWSTR
argument_list|>
argument_list|(
name|name
operator|.
name|utf16
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|ComPtr
argument_list|<
name|IHostNameFactory
argument_list|>
name|hostNameFactory
decl_stmt|;
name|GetActivationFactory
argument_list|(
name|HString
operator|::
name|MakeReference
argument_list|(
name|RuntimeClass_Windows_Networking_HostName
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|hostNameFactory
argument_list|)
expr_stmt|;
name|ComPtr
argument_list|<
name|IHostName
argument_list|>
name|remoteHost
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hostNameFactory
operator|->
name|CreateHostName
argument_list|(
name|hostNameRef
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|remoteHost
argument_list|)
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"QNativeSocketEnginePrivate::nativeConnect:: Could not create hostname"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|const
name|QString
name|portString
init|=
name|QString
operator|::
name|number
argument_list|(
name|port
argument_list|)
decl_stmt|;
name|HStringReference
name|portReference
argument_list|(
cast|reinterpret_cast
argument_list|<
name|LPCWSTR
argument_list|>
argument_list|(
name|portString
operator|.
name|utf16
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|HRESULT
name|hr
init|=
name|E_FAIL
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|socketType
operator|==
name|QAbstractSocket
operator|::
name|TcpSocket
condition|)
name|hr
operator|=
name|d
operator|->
name|tcpSocket
argument_list|()
operator|->
name|ConnectAsync
argument_list|(
name|remoteHost
operator|.
name|Get
argument_list|()
argument_list|,
name|portReference
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|d
operator|->
name|connectOp
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|d
operator|->
name|socketType
operator|==
name|QAbstractSocket
operator|::
name|UdpSocket
condition|)
name|hr
operator|=
name|d
operator|->
name|udpSocket
argument_list|()
operator|->
name|ConnectAsync
argument_list|(
name|remoteHost
operator|.
name|Get
argument_list|()
argument_list|,
name|portReference
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|d
operator|->
name|connectOp
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"QNativeSocketEnginePrivate::nativeConnect:: Could not obtain connect action"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|d
operator|->
name|socketState
operator|=
name|QAbstractSocket
operator|::
name|ConnectingState
expr_stmt|;
name|hr
operator|=
name|d
operator|->
name|connectOp
operator|->
name|put_Completed
argument_list|(
name|Callback
argument_list|<
name|IAsyncActionCompletedHandler
argument_list|>
argument_list|(
name|d
argument_list|,
operator|&
name|QNativeSocketEnginePrivate
operator|::
name|handleConnectToHost
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|socketState
operator|==
name|QAbstractSocket
operator|::
name|ConnectedState
return|;
block|}
end_function
begin_function
DECL|function|bind
name|bool
name|QNativeSocketEngine
operator|::
name|bind
parameter_list|(
specifier|const
name|QHostAddress
modifier|&
name|address
parameter_list|,
name|quint16
name|port
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QNativeSocketEngine
argument_list|)
expr_stmt|;
name|ComPtr
argument_list|<
name|IHostName
argument_list|>
name|hostAddress
decl_stmt|;
if|if
condition|(
name|address
operator|!=
name|QHostAddress
operator|::
name|Any
operator|&&
name|address
operator|!=
name|QHostAddress
operator|::
name|AnyIPv4
operator|&&
name|address
operator|!=
name|QHostAddress
operator|::
name|AnyIPv6
condition|)
block|{
name|ComPtr
argument_list|<
name|IHostNameFactory
argument_list|>
name|hostNameFactory
decl_stmt|;
name|GetActivationFactory
argument_list|(
name|HString
operator|::
name|MakeReference
argument_list|(
name|RuntimeClass_Windows_Networking_HostName
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|hostNameFactory
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|addressString
init|=
name|address
operator|.
name|toString
argument_list|()
decl_stmt|;
name|HStringReference
name|addressRef
argument_list|(
cast|reinterpret_cast
argument_list|<
name|LPCWSTR
argument_list|>
argument_list|(
name|addressString
operator|.
name|utf16
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|hostNameFactory
operator|->
name|CreateHostName
argument_list|(
name|addressRef
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|hostAddress
argument_list|)
expr_stmt|;
block|}
name|HRESULT
name|hr
decl_stmt|;
name|QString
name|portQString
init|=
name|port
condition|?
name|QString
operator|::
name|number
argument_list|(
name|port
argument_list|)
else|:
name|QString
argument_list|()
decl_stmt|;
name|HStringReference
name|portString
argument_list|(
cast|reinterpret_cast
argument_list|<
name|LPCWSTR
argument_list|>
argument_list|(
name|portQString
operator|.
name|utf16
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|ComPtr
argument_list|<
name|IAsyncAction
argument_list|>
name|op
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|socketType
operator|==
name|QAbstractSocket
operator|::
name|TcpSocket
condition|)
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|tcpListener
operator|&&
name|FAILED
argument_list|(
name|RoActivateInstance
argument_list|(
name|HString
operator|::
name|MakeReference
argument_list|(
name|RuntimeClass_Windows_Networking_Sockets_StreamSocketListener
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|d
operator|->
name|tcpListener
argument_list|)
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"Failed to create listener"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|d
operator|->
name|tcpListener
operator|->
name|add_ConnectionReceived
argument_list|(
name|Callback
argument_list|<
name|ClientConnectedHandler
argument_list|>
argument_list|(
name|d
argument_list|,
operator|&
name|QNativeSocketEnginePrivate
operator|::
name|handleClientConnection
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|d
operator|->
name|connectionToken
argument_list|)
expr_stmt|;
name|hr
operator|=
name|d
operator|->
name|tcpListener
operator|->
name|BindEndpointAsync
argument_list|(
name|hostAddress
operator|.
name|Get
argument_list|()
argument_list|,
name|portString
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|op
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|qErrnoWarning
argument_list|(
name|hr
argument_list|,
literal|"Unable to bind socket."
argument_list|)
expr_stmt|;
comment|// ### Set error message
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|d
operator|->
name|socketType
operator|==
name|QAbstractSocket
operator|::
name|UdpSocket
condition|)
block|{
name|hr
operator|=
name|d
operator|->
name|udpSocket
argument_list|()
operator|->
name|BindEndpointAsync
argument_list|(
name|hostAddress
operator|.
name|Get
argument_list|()
argument_list|,
name|portString
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|op
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|qErrnoWarning
argument_list|(
name|hr
argument_list|,
literal|"Unable to bind socket."
argument_list|)
expr_stmt|;
comment|// ### Set error message
return|return
literal|false
return|;
block|}
name|hr
operator|=
name|op
operator|->
name|put_Completed
argument_list|(
name|Callback
argument_list|<
name|IAsyncActionCompletedHandler
argument_list|>
argument_list|(
name|d
argument_list|,
operator|&
name|QNativeSocketEnginePrivate
operator|::
name|handleBindCompleted
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|qErrnoWarning
argument_list|(
name|hr
argument_list|,
literal|"Unable to set bind callback."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
name|op
condition|)
block|{
while|while
condition|(
name|opStatus
argument_list|(
name|op
argument_list|)
operator|==
name|Started
condition|)
name|d
operator|->
name|eventLoop
operator|.
name|processEvents
argument_list|()
expr_stmt|;
name|AsyncStatus
name|status
init|=
name|opStatus
argument_list|(
name|op
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|==
name|Error
operator|||
name|status
operator|==
name|Canceled
condition|)
return|return
literal|false
return|;
name|hr
operator|=
name|op
operator|->
name|GetResults
argument_list|()
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|qErrnoWarning
argument_list|(
name|hr
argument_list|,
literal|"Failed to bind socket"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|d
operator|->
name|socketState
operator|=
name|QAbstractSocket
operator|::
name|BoundState
expr_stmt|;
name|d
operator|->
name|fetchConnectionParameters
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|listen
name|bool
name|QNativeSocketEngine
operator|::
name|listen
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QNativeSocketEngine
argument_list|)
expr_stmt|;
name|Q_CHECK_VALID_SOCKETLAYER
argument_list|(
name|QNativeSocketEngine
operator|::
name|listen
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Q_CHECK_STATE
argument_list|(
name|QNativeSocketEngine
operator|::
name|listen
argument_list|()
argument_list|,
name|QAbstractSocket
operator|::
name|BoundState
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Q_CHECK_TYPE
argument_list|(
name|QNativeSocketEngine
operator|::
name|listen
argument_list|()
argument_list|,
name|QAbstractSocket
operator|::
name|TcpSocket
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|tcpListener
operator|&&
name|d
operator|->
name|socketDescriptor
operator|!=
operator|-
literal|1
condition|)
block|{
name|d
operator|->
name|socketState
operator|=
name|QAbstractSocket
operator|::
name|ListeningState
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|accept
name|int
name|QNativeSocketEngine
operator|::
name|accept
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QNativeSocketEngine
argument_list|)
expr_stmt|;
name|Q_CHECK_VALID_SOCKETLAYER
argument_list|(
name|QNativeSocketEngine
operator|::
name|accept
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Q_CHECK_STATE
argument_list|(
name|QNativeSocketEngine
operator|::
name|accept
argument_list|()
argument_list|,
name|QAbstractSocket
operator|::
name|ListeningState
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Q_CHECK_TYPE
argument_list|(
name|QNativeSocketEngine
operator|::
name|accept
argument_list|()
argument_list|,
name|QAbstractSocket
operator|::
name|TcpSocket
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|socketDescriptor
operator|==
operator|-
literal|1
operator|||
name|d
operator|->
name|pendingConnections
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
comment|// Start processing incoming data
if|if
condition|(
name|d
operator|->
name|socketType
operator|==
name|QAbstractSocket
operator|::
name|TcpSocket
condition|)
block|{
name|IStreamSocket
modifier|*
name|socket
init|=
name|d
operator|->
name|pendingConnections
operator|.
name|takeFirst
argument_list|()
decl_stmt|;
name|HRESULT
name|hr
decl_stmt|;
name|ComPtr
argument_list|<
name|IBuffer
argument_list|>
name|buffer
decl_stmt|;
name|hr
operator|=
name|g
operator|->
name|bufferFactory
operator|->
name|Create
argument_list|(
name|READ_BUFFER_SIZE
argument_list|,
operator|&
name|buffer
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|ComPtr
argument_list|<
name|IInputStream
argument_list|>
name|stream
decl_stmt|;
name|hr
operator|=
name|socket
operator|->
name|get_InputStream
argument_list|(
operator|&
name|stream
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|ComPtr
argument_list|<
name|IAsyncBufferOperation
argument_list|>
name|op
decl_stmt|;
name|hr
operator|=
name|stream
operator|->
name|ReadAsync
argument_list|(
name|buffer
operator|.
name|Get
argument_list|()
argument_list|,
name|READ_BUFFER_SIZE
argument_list|,
name|InputStreamOptions_Partial
argument_list|,
operator|&
name|op
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|qErrnoWarning
argument_list|(
name|hr
argument_list|,
literal|"Faild to read from the socket buffer."
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
name|hr
operator|=
name|op
operator|->
name|put_Completed
argument_list|(
name|Callback
argument_list|<
name|SocketReadCompletedHandler
argument_list|>
argument_list|(
name|d
argument_list|,
operator|&
name|QNativeSocketEnginePrivate
operator|::
name|handleReadyRead
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|qErrnoWarning
argument_list|(
name|hr
argument_list|,
literal|"Failed to set socket read callback."
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
name|d
operator|->
name|currentConnections
operator|.
name|append
argument_list|(
name|socket
argument_list|)
expr_stmt|;
name|SocketHandler
modifier|*
name|handler
init|=
name|gSocketHandler
argument_list|()
decl_stmt|;
name|handler
operator|->
name|pendingTcpSockets
operator|.
name|insert
argument_list|(
operator|++
name|handler
operator|->
name|socketCount
argument_list|,
name|socket
argument_list|)
expr_stmt|;
return|return
name|handler
operator|->
name|socketCount
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|close
name|void
name|QNativeSocketEngine
operator|::
name|close
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QNativeSocketEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|closingDown
condition|)
return|return;
name|d
operator|->
name|closingDown
operator|=
literal|true
expr_stmt|;
name|d
operator|->
name|notifyOnRead
operator|=
literal|false
expr_stmt|;
name|d
operator|->
name|notifyOnWrite
operator|=
literal|false
expr_stmt|;
name|d
operator|->
name|notifyOnException
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|connectOp
condition|)
block|{
name|ComPtr
argument_list|<
name|IAsyncInfo
argument_list|>
name|info
decl_stmt|;
name|d
operator|->
name|connectOp
operator|.
name|As
argument_list|(
operator|&
name|info
argument_list|)
expr_stmt|;
if|if
condition|(
name|info
condition|)
block|{
name|info
operator|->
name|Cancel
argument_list|()
expr_stmt|;
name|info
operator|->
name|Close
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|d
operator|->
name|socketDescriptor
operator|!=
operator|-
literal|1
condition|)
block|{
name|ComPtr
argument_list|<
name|IClosable
argument_list|>
name|socket
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|socketType
operator|==
name|QAbstractSocket
operator|::
name|TcpSocket
condition|)
block|{
name|d
operator|->
name|tcpSocket
argument_list|()
operator|->
name|QueryInterface
argument_list|(
name|IID_PPV_ARGS
argument_list|(
operator|&
name|socket
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|tcpSocket
argument_list|()
operator|->
name|Release
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|d
operator|->
name|socketType
operator|==
name|QAbstractSocket
operator|::
name|UdpSocket
condition|)
block|{
name|d
operator|->
name|udpSocket
argument_list|()
operator|->
name|QueryInterface
argument_list|(
name|IID_PPV_ARGS
argument_list|(
operator|&
name|socket
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|udpSocket
argument_list|()
operator|->
name|Release
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|socket
condition|)
block|{
name|socket
operator|->
name|Close
argument_list|()
expr_stmt|;
name|d
operator|->
name|socketDescriptor
operator|=
operator|-
literal|1
expr_stmt|;
block|}
name|d
operator|->
name|socketDescriptor
operator|=
operator|-
literal|1
expr_stmt|;
block|}
name|d
operator|->
name|socketState
operator|=
name|QAbstractSocket
operator|::
name|UnconnectedState
expr_stmt|;
name|d
operator|->
name|hasSetSocketError
operator|=
literal|false
expr_stmt|;
name|d
operator|->
name|localPort
operator|=
literal|0
expr_stmt|;
name|d
operator|->
name|localAddress
operator|.
name|clear
argument_list|()
expr_stmt|;
name|d
operator|->
name|peerPort
operator|=
literal|0
expr_stmt|;
name|d
operator|->
name|peerAddress
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|joinMulticastGroup
name|bool
name|QNativeSocketEngine
operator|::
name|joinMulticastGroup
parameter_list|(
specifier|const
name|QHostAddress
modifier|&
name|groupAddress
parameter_list|,
specifier|const
name|QNetworkInterface
modifier|&
name|iface
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|groupAddress
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|iface
argument_list|)
expr_stmt|;
name|Q_UNIMPLEMENTED
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|leaveMulticastGroup
name|bool
name|QNativeSocketEngine
operator|::
name|leaveMulticastGroup
parameter_list|(
specifier|const
name|QHostAddress
modifier|&
name|groupAddress
parameter_list|,
specifier|const
name|QNetworkInterface
modifier|&
name|iface
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|groupAddress
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|iface
argument_list|)
expr_stmt|;
name|Q_UNIMPLEMENTED
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|multicastInterface
name|QNetworkInterface
name|QNativeSocketEngine
operator|::
name|multicastInterface
parameter_list|()
specifier|const
block|{
name|Q_UNIMPLEMENTED
argument_list|()
expr_stmt|;
return|return
name|QNetworkInterface
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setMulticastInterface
name|bool
name|QNativeSocketEngine
operator|::
name|setMulticastInterface
parameter_list|(
specifier|const
name|QNetworkInterface
modifier|&
name|iface
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|iface
argument_list|)
expr_stmt|;
name|Q_UNIMPLEMENTED
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|bytesAvailable
name|qint64
name|QNativeSocketEngine
operator|::
name|bytesAvailable
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QNativeSocketEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|socketType
operator|!=
name|QAbstractSocket
operator|::
name|TcpSocket
condition|)
return|return
operator|-
literal|1
return|;
return|return
name|d
operator|->
name|readBytes
operator|.
name|size
argument_list|()
operator|-
name|d
operator|->
name|readBytes
operator|.
name|pos
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|read
name|qint64
name|QNativeSocketEngine
operator|::
name|read
parameter_list|(
name|char
modifier|*
name|data
parameter_list|,
name|qint64
name|maxlen
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QNativeSocketEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|socketType
operator|!=
name|QAbstractSocket
operator|::
name|TcpSocket
condition|)
return|return
operator|-
literal|1
return|;
comment|// There will be a read notification when the socket was closed by the remote host. If that
comment|// happens and there isn't anything left in the buffer, we have to return -1 in order to signal
comment|// the closing of the socket.
if|if
condition|(
name|d
operator|->
name|readBytes
operator|.
name|pos
argument_list|()
operator|==
name|d
operator|->
name|readBytes
operator|.
name|size
argument_list|()
operator|&&
name|d
operator|->
name|socketState
operator|!=
name|QAbstractSocket
operator|::
name|ConnectedState
condition|)
block|{
name|close
argument_list|()
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
name|QMutexLocker
name|mutexLocker
argument_list|(
operator|&
name|d
operator|->
name|readMutex
argument_list|)
decl_stmt|;
return|return
name|d
operator|->
name|readBytes
operator|.
name|read
argument_list|(
name|data
argument_list|,
name|maxlen
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|write
name|qint64
name|QNativeSocketEngine
operator|::
name|write
parameter_list|(
specifier|const
name|char
modifier|*
name|data
parameter_list|,
name|qint64
name|len
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QNativeSocketEngine
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isValid
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
name|HRESULT
name|hr
init|=
name|E_FAIL
decl_stmt|;
name|ComPtr
argument_list|<
name|IOutputStream
argument_list|>
name|stream
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|socketType
operator|==
name|QAbstractSocket
operator|::
name|TcpSocket
condition|)
name|hr
operator|=
name|d
operator|->
name|tcpSocket
argument_list|()
operator|->
name|get_OutputStream
argument_list|(
operator|&
name|stream
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|d
operator|->
name|socketType
operator|==
name|QAbstractSocket
operator|::
name|UdpSocket
condition|)
name|hr
operator|=
name|d
operator|->
name|udpSocket
argument_list|()
operator|->
name|get_OutputStream
argument_list|(
operator|&
name|stream
argument_list|)
expr_stmt|;
name|RETURN_IF_FAILED
argument_list|(
literal|"Failed to get output stream to socket"
argument_list|,
argument|return -
literal|1
argument_list|)
empty_stmt|;
name|qint64
name|bytesWritten
init|=
name|writeIOStream
argument_list|(
name|stream
argument_list|,
name|data
argument_list|,
name|len
argument_list|)
decl_stmt|;
if|if
condition|(
name|bytesWritten
operator|<
literal|0
condition|)
name|d
operator|->
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|SocketAccessError
argument_list|,
name|QNativeSocketEnginePrivate
operator|::
name|AccessErrorString
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|bytesWritten
operator|>
literal|0
operator|&&
name|d
operator|->
name|notifyOnWrite
condition|)
emit|emit
name|writeReady
argument_list|()
emit|;
return|return
name|bytesWritten
return|;
block|}
end_function
begin_function
DECL|function|readDatagram
name|qint64
name|QNativeSocketEngine
operator|::
name|readDatagram
parameter_list|(
name|char
modifier|*
name|data
parameter_list|,
name|qint64
name|maxlen
parameter_list|,
name|QIpPacketHeader
modifier|*
name|header
parameter_list|,
name|PacketHeaderOptions
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QNativeSocketEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|socketType
operator|!=
name|QAbstractSocket
operator|::
name|UdpSocket
operator|||
name|d
operator|->
name|pendingDatagrams
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|header
condition|)
name|header
operator|->
name|clear
argument_list|()
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
name|WinRtDatagram
name|datagram
init|=
name|d
operator|->
name|pendingDatagrams
operator|.
name|takeFirst
argument_list|()
decl_stmt|;
if|if
condition|(
name|header
condition|)
operator|*
name|header
operator|=
name|datagram
operator|.
name|header
expr_stmt|;
name|QByteArray
name|readOrigin
decl_stmt|;
comment|// Do not read the whole datagram. Put the rest of it back into the "queue"
if|if
condition|(
name|maxlen
operator|<
name|datagram
operator|.
name|data
operator|.
name|length
argument_list|()
condition|)
block|{
name|QByteArray
name|readOrigin
init|=
name|datagram
operator|.
name|data
operator|.
name|left
argument_list|(
name|maxlen
argument_list|)
decl_stmt|;
name|datagram
operator|.
name|data
operator|=
name|datagram
operator|.
name|data
operator|.
name|remove
argument_list|(
literal|0
argument_list|,
name|maxlen
argument_list|)
expr_stmt|;
name|d
operator|->
name|pendingDatagrams
operator|.
name|prepend
argument_list|(
name|datagram
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|readOrigin
operator|=
name|datagram
operator|.
name|data
expr_stmt|;
block|}
name|strcpy
argument_list|(
name|data
argument_list|,
name|readOrigin
argument_list|)
expr_stmt|;
return|return
name|readOrigin
operator|.
name|length
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|writeDatagram
name|qint64
name|QNativeSocketEngine
operator|::
name|writeDatagram
parameter_list|(
specifier|const
name|char
modifier|*
name|data
parameter_list|,
name|qint64
name|len
parameter_list|,
specifier|const
name|QIpPacketHeader
modifier|&
name|header
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QNativeSocketEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|socketType
operator|!=
name|QAbstractSocket
operator|::
name|UdpSocket
condition|)
return|return
operator|-
literal|1
return|;
name|ComPtr
argument_list|<
name|IHostName
argument_list|>
name|remoteHost
decl_stmt|;
name|ComPtr
argument_list|<
name|IHostNameFactory
argument_list|>
name|hostNameFactory
decl_stmt|;
name|HRESULT
name|hr
init|=
name|GetActivationFactory
argument_list|(
name|HString
operator|::
name|MakeReference
argument_list|(
name|RuntimeClass_Windows_Networking_HostName
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|hostNameFactory
argument_list|)
decl_stmt|;
name|RETURN_IF_FAILED
argument_list|(
literal|"Could not obtain hostname factory"
argument_list|,
argument|return -
literal|1
argument_list|)
empty_stmt|;
specifier|const
name|QString
name|addressString
init|=
name|header
operator|.
name|destinationAddress
operator|.
name|toString
argument_list|()
decl_stmt|;
name|HStringReference
name|hostNameRef
argument_list|(
cast|reinterpret_cast
argument_list|<
name|LPCWSTR
argument_list|>
argument_list|(
name|addressString
operator|.
name|utf16
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|hostNameFactory
operator|->
name|CreateHostName
argument_list|(
name|hostNameRef
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|remoteHost
argument_list|)
expr_stmt|;
name|ComPtr
argument_list|<
name|IAsyncOperation
argument_list|<
name|IOutputStream
modifier|*
argument_list|>
argument_list|>
name|streamOperation
decl_stmt|;
name|ComPtr
argument_list|<
name|IOutputStream
argument_list|>
name|stream
decl_stmt|;
specifier|const
name|QString
name|portString
init|=
name|QString
operator|::
name|number
argument_list|(
name|header
operator|.
name|destinationPort
argument_list|)
decl_stmt|;
name|HStringReference
name|portRef
argument_list|(
cast|reinterpret_cast
argument_list|<
name|LPCWSTR
argument_list|>
argument_list|(
name|portString
operator|.
name|utf16
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|hr
operator|=
name|d
operator|->
name|udpSocket
argument_list|()
operator|->
name|GetOutputStreamAsync
argument_list|(
name|remoteHost
operator|.
name|Get
argument_list|()
argument_list|,
name|portRef
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|streamOperation
argument_list|)
expr_stmt|;
name|RETURN_IF_FAILED
argument_list|(
literal|"Failed to get output stream to socket"
argument_list|,
argument|return -
literal|1
argument_list|)
empty_stmt|;
name|hr
operator|=
name|QWinRTFunctions
operator|::
name|await
argument_list|(
name|streamOperation
argument_list|,
name|stream
operator|.
name|GetAddressOf
argument_list|()
argument_list|)
expr_stmt|;
name|RETURN_IF_FAILED
argument_list|(
literal|"Failed to get output stream to socket"
argument_list|,
argument|return -
literal|1
argument_list|)
empty_stmt|;
return|return
name|writeIOStream
argument_list|(
name|stream
argument_list|,
name|data
argument_list|,
name|len
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|hasPendingDatagrams
name|bool
name|QNativeSocketEngine
operator|::
name|hasPendingDatagrams
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QNativeSocketEngine
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|pendingDatagrams
operator|.
name|length
argument_list|()
operator|>
literal|0
return|;
block|}
end_function
begin_function
DECL|function|pendingDatagramSize
name|qint64
name|QNativeSocketEngine
operator|::
name|pendingDatagramSize
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QNativeSocketEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|pendingDatagrams
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
return|return
name|d
operator|->
name|pendingDatagrams
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|data
operator|.
name|length
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|bytesToWrite
name|qint64
name|QNativeSocketEngine
operator|::
name|bytesToWrite
parameter_list|()
specifier|const
block|{
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|receiveBufferSize
name|qint64
name|QNativeSocketEngine
operator|::
name|receiveBufferSize
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QNativeSocketEngine
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|option
argument_list|(
name|QAbstractSocketEngine
operator|::
name|ReceiveBufferSocketOption
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|setReceiveBufferSize
name|void
name|QNativeSocketEngine
operator|::
name|setReceiveBufferSize
parameter_list|(
name|qint64
name|bufferSize
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QNativeSocketEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|setOption
argument_list|(
name|QAbstractSocketEngine
operator|::
name|ReceiveBufferSocketOption
argument_list|,
name|bufferSize
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sendBufferSize
name|qint64
name|QNativeSocketEngine
operator|::
name|sendBufferSize
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QNativeSocketEngine
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|option
argument_list|(
name|QAbstractSocketEngine
operator|::
name|SendBufferSocketOption
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|setSendBufferSize
name|void
name|QNativeSocketEngine
operator|::
name|setSendBufferSize
parameter_list|(
name|qint64
name|bufferSize
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QNativeSocketEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|setOption
argument_list|(
name|QAbstractSocketEngine
operator|::
name|SendBufferSocketOption
argument_list|,
name|bufferSize
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|option
name|int
name|QNativeSocketEngine
operator|::
name|option
parameter_list|(
name|QAbstractSocketEngine
operator|::
name|SocketOption
name|option
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QNativeSocketEngine
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|option
argument_list|(
name|option
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|setOption
name|bool
name|QNativeSocketEngine
operator|::
name|setOption
parameter_list|(
name|QAbstractSocketEngine
operator|::
name|SocketOption
name|option
parameter_list|,
name|int
name|value
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QNativeSocketEngine
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|setOption
argument_list|(
name|option
argument_list|,
name|value
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|waitForRead
name|bool
name|QNativeSocketEngine
operator|::
name|waitForRead
parameter_list|(
name|int
name|msecs
parameter_list|,
name|bool
modifier|*
name|timedOut
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QNativeSocketEngine
argument_list|)
expr_stmt|;
name|Q_CHECK_VALID_SOCKETLAYER
argument_list|(
name|QNativeSocketEngine
operator|::
name|waitForRead
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Q_CHECK_NOT_STATE
argument_list|(
name|QNativeSocketEngine
operator|::
name|waitForRead
argument_list|()
argument_list|,
name|QAbstractSocket
operator|::
name|UnconnectedState
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|timedOut
condition|)
operator|*
name|timedOut
operator|=
literal|false
expr_stmt|;
name|QElapsedTimer
name|timer
decl_stmt|;
name|timer
operator|.
name|start
argument_list|()
expr_stmt|;
while|while
condition|(
name|msecs
operator|>
name|timer
operator|.
name|elapsed
argument_list|()
condition|)
block|{
comment|// Servers with active connections are ready for reading
if|if
condition|(
operator|!
name|d
operator|->
name|currentConnections
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|true
return|;
comment|// If we are a client, we are ready to read if our buffer has data
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|d
operator|->
name|readMutex
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|readBytes
operator|.
name|atEnd
argument_list|()
condition|)
return|return
literal|true
return|;
comment|// Nothing to do, wait for more events
name|d
operator|->
name|eventLoop
operator|.
name|processEvents
argument_list|()
expr_stmt|;
block|}
name|d
operator|->
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|SocketTimeoutError
argument_list|,
name|QNativeSocketEnginePrivate
operator|::
name|TimeOutErrorString
argument_list|)
expr_stmt|;
if|if
condition|(
name|timedOut
condition|)
operator|*
name|timedOut
operator|=
literal|true
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|waitForWrite
name|bool
name|QNativeSocketEngine
operator|::
name|waitForWrite
parameter_list|(
name|int
name|msecs
parameter_list|,
name|bool
modifier|*
name|timedOut
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|msecs
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|timedOut
argument_list|)
expr_stmt|;
name|Q_D
argument_list|(
name|QNativeSocketEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|socketState
operator|==
name|QAbstractSocket
operator|::
name|ConnectingState
condition|)
block|{
name|HRESULT
name|hr
init|=
name|QWinRTFunctions
operator|::
name|await
argument_list|(
name|d
operator|->
name|connectOp
argument_list|,
name|QWinRTFunctions
operator|::
name|ProcessMainThreadEvents
argument_list|)
decl_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|d
operator|->
name|handleConnectionEstablished
argument_list|(
name|d
operator|->
name|connectOp
operator|.
name|Get
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|waitForReadOrWrite
name|bool
name|QNativeSocketEngine
operator|::
name|waitForReadOrWrite
parameter_list|(
name|bool
modifier|*
name|readyToRead
parameter_list|,
name|bool
modifier|*
name|readyToWrite
parameter_list|,
name|bool
name|checkRead
parameter_list|,
name|bool
name|checkWrite
parameter_list|,
name|int
name|msecs
parameter_list|,
name|bool
modifier|*
name|timedOut
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|readyToRead
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|readyToWrite
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|checkRead
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|checkWrite
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|msecs
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|timedOut
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|isReadNotificationEnabled
name|bool
name|QNativeSocketEngine
operator|::
name|isReadNotificationEnabled
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QNativeSocketEngine
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|notifyOnRead
return|;
block|}
end_function
begin_function
DECL|function|setReadNotificationEnabled
name|void
name|QNativeSocketEngine
operator|::
name|setReadNotificationEnabled
parameter_list|(
name|bool
name|enable
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QNativeSocketEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|notifyOnRead
operator|=
name|enable
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isWriteNotificationEnabled
name|bool
name|QNativeSocketEngine
operator|::
name|isWriteNotificationEnabled
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QNativeSocketEngine
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|notifyOnWrite
return|;
block|}
end_function
begin_function
DECL|function|setWriteNotificationEnabled
name|void
name|QNativeSocketEngine
operator|::
name|setWriteNotificationEnabled
parameter_list|(
name|bool
name|enable
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QNativeSocketEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|notifyOnWrite
operator|=
name|enable
expr_stmt|;
if|if
condition|(
name|enable
operator|&&
name|d
operator|->
name|socketState
operator|==
name|QAbstractSocket
operator|::
name|ConnectedState
condition|)
block|{
if|if
condition|(
name|bytesToWrite
argument_list|()
condition|)
return|return;
comment|// will be emitted as a result of bytes written
name|writeNotification
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|isExceptionNotificationEnabled
name|bool
name|QNativeSocketEngine
operator|::
name|isExceptionNotificationEnabled
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QNativeSocketEngine
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|notifyOnException
return|;
block|}
end_function
begin_function
DECL|function|setExceptionNotificationEnabled
name|void
name|QNativeSocketEngine
operator|::
name|setExceptionNotificationEnabled
parameter_list|(
name|bool
name|enable
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QNativeSocketEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|notifyOnException
operator|=
name|enable
expr_stmt|;
block|}
end_function
begin_function
DECL|function|establishRead
name|void
name|QNativeSocketEngine
operator|::
name|establishRead
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QNativeSocketEngine
argument_list|)
expr_stmt|;
name|HRESULT
name|hr
decl_stmt|;
name|ComPtr
argument_list|<
name|IInputStream
argument_list|>
name|stream
decl_stmt|;
name|hr
operator|=
name|d
operator|->
name|tcpSocket
argument_list|()
operator|->
name|get_InputStream
argument_list|(
operator|&
name|stream
argument_list|)
expr_stmt|;
name|RETURN_VOID_IF_FAILED
argument_list|(
literal|"Failed to get socket input stream"
argument_list|)
expr_stmt|;
name|ComPtr
argument_list|<
name|IBuffer
argument_list|>
name|buffer
decl_stmt|;
name|hr
operator|=
name|g
operator|->
name|bufferFactory
operator|->
name|Create
argument_list|(
name|READ_BUFFER_SIZE
argument_list|,
operator|&
name|buffer
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|ComPtr
argument_list|<
name|IAsyncBufferOperation
argument_list|>
name|op
decl_stmt|;
name|hr
operator|=
name|stream
operator|->
name|ReadAsync
argument_list|(
name|buffer
operator|.
name|Get
argument_list|()
argument_list|,
name|READ_BUFFER_SIZE
argument_list|,
name|InputStreamOptions_Partial
argument_list|,
operator|&
name|op
argument_list|)
expr_stmt|;
name|RETURN_VOID_IF_FAILED
argument_list|(
literal|"Failed to initiate socket read"
argument_list|)
expr_stmt|;
name|hr
operator|=
name|op
operator|->
name|put_Completed
argument_list|(
name|Callback
argument_list|<
name|SocketReadCompletedHandler
argument_list|>
argument_list|(
name|d
argument_list|,
operator|&
name|QNativeSocketEnginePrivate
operator|::
name|handleReadyRead
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|createNewSocket
name|bool
name|QNativeSocketEnginePrivate
operator|::
name|createNewSocket
parameter_list|(
name|QAbstractSocket
operator|::
name|SocketType
name|socketType
parameter_list|,
name|QAbstractSocket
operator|::
name|NetworkLayerProtocol
modifier|&
name|socketProtocol
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|socketProtocol
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|socketType
condition|)
block|{
case|case
name|QAbstractSocket
operator|::
name|TcpSocket
case|:
block|{
name|ComPtr
argument_list|<
name|IStreamSocket
argument_list|>
name|socket
decl_stmt|;
name|HRESULT
name|hr
init|=
name|RoActivateInstance
argument_list|(
name|HString
operator|::
name|MakeReference
argument_list|(
name|RuntimeClass_Windows_Networking_Sockets_StreamSocket
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|socket
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"Failed to create StreamSocket instance"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|socketDescriptor
operator|=
name|qintptr
argument_list|(
name|socket
operator|.
name|Detach
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QAbstractSocket
operator|::
name|UdpSocket
case|:
block|{
name|ComPtr
argument_list|<
name|IDatagramSocket
argument_list|>
name|socket
decl_stmt|;
name|HRESULT
name|hr
init|=
name|RoActivateInstance
argument_list|(
name|HString
operator|::
name|MakeReference
argument_list|(
name|RuntimeClass_Windows_Networking_Sockets_DatagramSocket
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|socket
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"Failed to create stream socket"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|socketDescriptor
operator|=
name|qintptr
argument_list|(
name|socket
operator|.
name|Detach
argument_list|()
argument_list|)
expr_stmt|;
name|udpSocket
argument_list|()
operator|->
name|add_MessageReceived
argument_list|(
name|Callback
argument_list|<
name|DatagramReceivedHandler
argument_list|>
argument_list|(
name|this
argument_list|,
operator|&
name|QNativeSocketEnginePrivate
operator|::
name|handleNewDatagram
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|connectionToken
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
name|qWarning
argument_list|(
literal|"Invalid socket type"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|this
operator|->
name|socketType
operator|=
name|socketType
expr_stmt|;
comment|// Make the socket nonblocking.
if|if
condition|(
operator|!
name|setOption
argument_list|(
name|QAbstractSocketEngine
operator|::
name|NonBlockingSocketOption
argument_list|,
literal|1
argument_list|)
condition|)
block|{
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|UnsupportedSocketOperationError
argument_list|,
name|NonBlockingInitFailedErrorString
argument_list|)
expr_stmt|;
name|q_func
argument_list|()
operator|->
name|close
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_constructor
DECL|function|QNativeSocketEnginePrivate
name|QNativeSocketEnginePrivate
operator|::
name|QNativeSocketEnginePrivate
parameter_list|()
member_init_list|:
name|QAbstractSocketEnginePrivate
argument_list|()
member_init_list|,
name|notifyOnRead
argument_list|(
literal|true
argument_list|)
member_init_list|,
name|notifyOnWrite
argument_list|(
literal|true
argument_list|)
member_init_list|,
name|notifyOnException
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|closingDown
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|socketDescriptor
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|sslSocket
argument_list|(
name|Q_NULLPTR
argument_list|)
member_init_list|,
name|connectionToken
argument_list|(
block|{
operator|-
literal|1
block|}
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QNativeSocketEnginePrivate
name|QNativeSocketEnginePrivate
operator|::
name|~
name|QNativeSocketEnginePrivate
parameter_list|()
block|{
if|if
condition|(
name|socketDescriptor
operator|==
operator|-
literal|1
operator|||
name|connectionToken
operator|.
name|value
operator|==
operator|-
literal|1
condition|)
return|return;
if|if
condition|(
name|socketType
operator|==
name|QAbstractSocket
operator|::
name|UdpSocket
condition|)
name|udpSocket
argument_list|()
operator|->
name|remove_MessageReceived
argument_list|(
name|connectionToken
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|socketType
operator|==
name|QAbstractSocket
operator|::
name|TcpSocket
condition|)
name|tcpListener
operator|->
name|remove_ConnectionReceived
argument_list|(
name|connectionToken
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|setError
name|void
name|QNativeSocketEnginePrivate
operator|::
name|setError
parameter_list|(
name|QAbstractSocket
operator|::
name|SocketError
name|error
parameter_list|,
name|ErrorString
name|errorString
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|hasSetSocketError
condition|)
block|{
comment|// Only set socket errors once for one engine; expect the
comment|// socket to recreate its engine after an error. Note: There's
comment|// one exception: SocketError(11) bypasses this as it's purely
comment|// a temporary internal error condition.
comment|// Another exception is the way the waitFor*() functions set
comment|// an error when a timeout occurs. After the call to setError()
comment|// they reset the hasSetSocketError to false
return|return;
block|}
if|if
condition|(
name|error
operator|!=
name|QAbstractSocket
operator|::
name|SocketError
argument_list|(
literal|11
argument_list|)
condition|)
name|hasSetSocketError
operator|=
literal|true
expr_stmt|;
name|socketError
operator|=
name|error
expr_stmt|;
switch|switch
condition|(
name|errorString
condition|)
block|{
case|case
name|NonBlockingInitFailedErrorString
case|:
name|socketErrorString
operator|=
name|QNativeSocketEngine
operator|::
name|tr
argument_list|(
literal|"Unable to initialize non-blocking socket"
argument_list|)
expr_stmt|;
break|break;
case|case
name|BroadcastingInitFailedErrorString
case|:
name|socketErrorString
operator|=
name|QNativeSocketEngine
operator|::
name|tr
argument_list|(
literal|"Unable to initialize broadcast socket"
argument_list|)
expr_stmt|;
break|break;
comment|// should not happen anymore
case|case
name|NoIpV6ErrorString
case|:
name|socketErrorString
operator|=
name|QNativeSocketEngine
operator|::
name|tr
argument_list|(
literal|"Attempt to use IPv6 socket on a platform with no IPv6 support"
argument_list|)
expr_stmt|;
break|break;
case|case
name|RemoteHostClosedErrorString
case|:
name|socketErrorString
operator|=
name|QNativeSocketEngine
operator|::
name|tr
argument_list|(
literal|"The remote host closed the connection"
argument_list|)
expr_stmt|;
break|break;
case|case
name|TimeOutErrorString
case|:
name|socketErrorString
operator|=
name|QNativeSocketEngine
operator|::
name|tr
argument_list|(
literal|"Network operation timed out"
argument_list|)
expr_stmt|;
break|break;
case|case
name|ResourceErrorString
case|:
name|socketErrorString
operator|=
name|QNativeSocketEngine
operator|::
name|tr
argument_list|(
literal|"Out of resources"
argument_list|)
expr_stmt|;
break|break;
case|case
name|OperationUnsupportedErrorString
case|:
name|socketErrorString
operator|=
name|QNativeSocketEngine
operator|::
name|tr
argument_list|(
literal|"Unsupported socket operation"
argument_list|)
expr_stmt|;
break|break;
case|case
name|ProtocolUnsupportedErrorString
case|:
name|socketErrorString
operator|=
name|QNativeSocketEngine
operator|::
name|tr
argument_list|(
literal|"Protocol type not supported"
argument_list|)
expr_stmt|;
break|break;
case|case
name|InvalidSocketErrorString
case|:
name|socketErrorString
operator|=
name|QNativeSocketEngine
operator|::
name|tr
argument_list|(
literal|"Invalid socket descriptor"
argument_list|)
expr_stmt|;
break|break;
case|case
name|HostUnreachableErrorString
case|:
name|socketErrorString
operator|=
name|QNativeSocketEngine
operator|::
name|tr
argument_list|(
literal|"Host unreachable"
argument_list|)
expr_stmt|;
break|break;
case|case
name|NetworkUnreachableErrorString
case|:
name|socketErrorString
operator|=
name|QNativeSocketEngine
operator|::
name|tr
argument_list|(
literal|"Network unreachable"
argument_list|)
expr_stmt|;
break|break;
case|case
name|AccessErrorString
case|:
name|socketErrorString
operator|=
name|QNativeSocketEngine
operator|::
name|tr
argument_list|(
literal|"Permission denied"
argument_list|)
expr_stmt|;
break|break;
case|case
name|ConnectionTimeOutErrorString
case|:
name|socketErrorString
operator|=
name|QNativeSocketEngine
operator|::
name|tr
argument_list|(
literal|"Connection timed out"
argument_list|)
expr_stmt|;
break|break;
case|case
name|ConnectionRefusedErrorString
case|:
name|socketErrorString
operator|=
name|QNativeSocketEngine
operator|::
name|tr
argument_list|(
literal|"Connection refused"
argument_list|)
expr_stmt|;
break|break;
case|case
name|AddressInuseErrorString
case|:
name|socketErrorString
operator|=
name|QNativeSocketEngine
operator|::
name|tr
argument_list|(
literal|"The bound address is already in use"
argument_list|)
expr_stmt|;
break|break;
case|case
name|AddressNotAvailableErrorString
case|:
name|socketErrorString
operator|=
name|QNativeSocketEngine
operator|::
name|tr
argument_list|(
literal|"The address is not available"
argument_list|)
expr_stmt|;
break|break;
case|case
name|AddressProtectedErrorString
case|:
name|socketErrorString
operator|=
name|QNativeSocketEngine
operator|::
name|tr
argument_list|(
literal|"The address is protected"
argument_list|)
expr_stmt|;
break|break;
case|case
name|DatagramTooLargeErrorString
case|:
name|socketErrorString
operator|=
name|QNativeSocketEngine
operator|::
name|tr
argument_list|(
literal|"Datagram was too large to send"
argument_list|)
expr_stmt|;
break|break;
case|case
name|SendDatagramErrorString
case|:
name|socketErrorString
operator|=
name|QNativeSocketEngine
operator|::
name|tr
argument_list|(
literal|"Unable to send a message"
argument_list|)
expr_stmt|;
break|break;
case|case
name|ReceiveDatagramErrorString
case|:
name|socketErrorString
operator|=
name|QNativeSocketEngine
operator|::
name|tr
argument_list|(
literal|"Unable to receive a message"
argument_list|)
expr_stmt|;
break|break;
case|case
name|WriteErrorString
case|:
name|socketErrorString
operator|=
name|QNativeSocketEngine
operator|::
name|tr
argument_list|(
literal|"Unable to write"
argument_list|)
expr_stmt|;
break|break;
case|case
name|ReadErrorString
case|:
name|socketErrorString
operator|=
name|QNativeSocketEngine
operator|::
name|tr
argument_list|(
literal|"Network error"
argument_list|)
expr_stmt|;
break|break;
case|case
name|PortInuseErrorString
case|:
name|socketErrorString
operator|=
name|QNativeSocketEngine
operator|::
name|tr
argument_list|(
literal|"Another socket is already listening on the same port"
argument_list|)
expr_stmt|;
break|break;
case|case
name|NotSocketErrorString
case|:
name|socketErrorString
operator|=
name|QNativeSocketEngine
operator|::
name|tr
argument_list|(
literal|"Operation on non-socket"
argument_list|)
expr_stmt|;
break|break;
case|case
name|InvalidProxyTypeString
case|:
name|socketErrorString
operator|=
name|QNativeSocketEngine
operator|::
name|tr
argument_list|(
literal|"The proxy type is invalid for this operation"
argument_list|)
expr_stmt|;
break|break;
case|case
name|TemporaryErrorString
case|:
name|socketErrorString
operator|=
name|QNativeSocketEngine
operator|::
name|tr
argument_list|(
literal|"Temporary error"
argument_list|)
expr_stmt|;
break|break;
case|case
name|UnknownSocketErrorString
case|:
name|socketErrorString
operator|=
name|QNativeSocketEngine
operator|::
name|tr
argument_list|(
literal|"Unknown error"
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
end_function
begin_function
DECL|function|option
name|int
name|QNativeSocketEnginePrivate
operator|::
name|option
parameter_list|(
name|QAbstractSocketEngine
operator|::
name|SocketOption
name|opt
parameter_list|)
specifier|const
block|{
name|ComPtr
argument_list|<
name|IStreamSocketControl
argument_list|>
name|control
decl_stmt|;
if|if
condition|(
name|socketType
operator|==
name|QAbstractSocket
operator|::
name|TcpSocket
condition|)
block|{
if|if
condition|(
name|FAILED
argument_list|(
name|tcpSocket
argument_list|()
operator|->
name|get_Control
argument_list|(
operator|&
name|control
argument_list|)
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"QNativeSocketEnginePrivate::option: Could not obtain socket control"
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
block|}
switch|switch
condition|(
name|opt
condition|)
block|{
case|case
name|QAbstractSocketEngine
operator|::
name|NonBlockingSocketOption
case|:
case|case
name|QAbstractSocketEngine
operator|::
name|BroadcastSocketOption
case|:
case|case
name|QAbstractSocketEngine
operator|::
name|ReceiveOutOfBandData
case|:
return|return
literal|1
return|;
case|case
name|QAbstractSocketEngine
operator|::
name|SendBufferSocketOption
case|:
if|if
condition|(
name|socketType
operator|==
name|QAbstractSocket
operator|::
name|UdpSocket
condition|)
return|return
operator|-
literal|1
return|;
name|UINT32
name|bufferSize
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|control
operator|->
name|get_OutboundBufferSizeInBytes
argument_list|(
operator|&
name|bufferSize
argument_list|)
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"Could not obtain OutboundBufferSizeInBytes information vom socket control"
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
return|return
name|bufferSize
return|;
case|case
name|QAbstractSocketEngine
operator|::
name|LowDelayOption
case|:
if|if
condition|(
name|socketType
operator|==
name|QAbstractSocket
operator|::
name|UdpSocket
condition|)
return|return
operator|-
literal|1
return|;
name|boolean
name|noDelay
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|control
operator|->
name|get_NoDelay
argument_list|(
operator|&
name|noDelay
argument_list|)
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"Could not obtain NoDelay information from socket control"
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
return|return
name|noDelay
return|;
case|case
name|QAbstractSocketEngine
operator|::
name|KeepAliveOption
case|:
if|if
condition|(
name|socketType
operator|==
name|QAbstractSocket
operator|::
name|UdpSocket
condition|)
return|return
operator|-
literal|1
return|;
name|boolean
name|keepAlive
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|control
operator|->
name|get_KeepAlive
argument_list|(
operator|&
name|keepAlive
argument_list|)
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"Could not obtain KeepAlive information from socket control"
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
return|return
name|keepAlive
return|;
case|case
name|QAbstractSocketEngine
operator|::
name|ReceiveBufferSocketOption
case|:
case|case
name|QAbstractSocketEngine
operator|::
name|AddressReusable
case|:
case|case
name|QAbstractSocketEngine
operator|::
name|BindExclusively
case|:
case|case
name|QAbstractSocketEngine
operator|::
name|MulticastTtlOption
case|:
case|case
name|QAbstractSocketEngine
operator|::
name|MulticastLoopbackOption
case|:
case|case
name|QAbstractSocketEngine
operator|::
name|TypeOfServiceOption
case|:
default|default:
return|return
operator|-
literal|1
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|setOption
name|bool
name|QNativeSocketEnginePrivate
operator|::
name|setOption
parameter_list|(
name|QAbstractSocketEngine
operator|::
name|SocketOption
name|opt
parameter_list|,
name|int
name|v
parameter_list|)
block|{
name|ComPtr
argument_list|<
name|IStreamSocketControl
argument_list|>
name|control
decl_stmt|;
if|if
condition|(
name|socketType
operator|==
name|QAbstractSocket
operator|::
name|TcpSocket
condition|)
block|{
if|if
condition|(
name|FAILED
argument_list|(
name|tcpSocket
argument_list|()
operator|->
name|get_Control
argument_list|(
operator|&
name|control
argument_list|)
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"QNativeSocketEnginePrivate::setOption: Could not obtain socket control"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
switch|switch
condition|(
name|opt
condition|)
block|{
case|case
name|QAbstractSocketEngine
operator|::
name|NonBlockingSocketOption
case|:
case|case
name|QAbstractSocketEngine
operator|::
name|BroadcastSocketOption
case|:
case|case
name|QAbstractSocketEngine
operator|::
name|ReceiveOutOfBandData
case|:
return|return
name|v
operator|!=
literal|0
return|;
case|case
name|QAbstractSocketEngine
operator|::
name|SendBufferSocketOption
case|:
if|if
condition|(
name|socketType
operator|==
name|QAbstractSocket
operator|::
name|UdpSocket
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|FAILED
argument_list|(
name|control
operator|->
name|put_OutboundBufferSizeInBytes
argument_list|(
name|v
argument_list|)
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"Could not set OutboundBufferSizeInBytes"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
case|case
name|QAbstractSocketEngine
operator|::
name|LowDelayOption
case|:
block|{
if|if
condition|(
name|socketType
operator|==
name|QAbstractSocket
operator|::
name|UdpSocket
condition|)
return|return
literal|false
return|;
name|boolean
name|noDelay
init|=
name|v
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|control
operator|->
name|put_NoDelay
argument_list|(
name|noDelay
argument_list|)
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"Could not obtain NoDelay information from socket control"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
case|case
name|QAbstractSocketEngine
operator|::
name|KeepAliveOption
case|:
block|{
if|if
condition|(
name|socketType
operator|==
name|QAbstractSocket
operator|::
name|UdpSocket
operator|||
name|socketState
operator|!=
name|QAbstractSocket
operator|::
name|UnconnectedState
condition|)
return|return
literal|false
return|;
name|boolean
name|keepAlive
init|=
name|v
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|control
operator|->
name|put_KeepAlive
argument_list|(
name|keepAlive
argument_list|)
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"Could not set KeepAlive value"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
case|case
name|QAbstractSocketEngine
operator|::
name|ReceiveBufferSocketOption
case|:
case|case
name|QAbstractSocketEngine
operator|::
name|AddressReusable
case|:
case|case
name|QAbstractSocketEngine
operator|::
name|BindExclusively
case|:
case|case
name|QAbstractSocketEngine
operator|::
name|MulticastTtlOption
case|:
case|case
name|QAbstractSocketEngine
operator|::
name|MulticastLoopbackOption
case|:
case|case
name|QAbstractSocketEngine
operator|::
name|TypeOfServiceOption
case|:
default|default:
return|return
literal|false
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|fetchConnectionParameters
name|bool
name|QNativeSocketEnginePrivate
operator|::
name|fetchConnectionParameters
parameter_list|()
block|{
name|localPort
operator|=
literal|0
expr_stmt|;
name|localAddress
operator|.
name|clear
argument_list|()
expr_stmt|;
name|peerPort
operator|=
literal|0
expr_stmt|;
name|peerAddress
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|socketType
operator|==
name|QAbstractSocket
operator|::
name|TcpSocket
condition|)
block|{
name|ComPtr
argument_list|<
name|IHostName
argument_list|>
name|hostName
decl_stmt|;
name|HString
name|tmpHString
decl_stmt|;
name|ComPtr
argument_list|<
name|IStreamSocketInformation
argument_list|>
name|info
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|tcpSocket
argument_list|()
operator|->
name|get_Information
argument_list|(
operator|&
name|info
argument_list|)
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"QNativeSocketEnginePrivate::fetchConnectionParameters: Could not obtain socket info"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|info
operator|->
name|get_LocalAddress
argument_list|(
operator|&
name|hostName
argument_list|)
expr_stmt|;
if|if
condition|(
name|hostName
condition|)
block|{
name|hostName
operator|->
name|get_CanonicalName
argument_list|(
name|tmpHString
operator|.
name|GetAddressOf
argument_list|()
argument_list|)
expr_stmt|;
name|localAddress
operator|.
name|setAddress
argument_list|(
name|qt_QStringFromHString
argument_list|(
name|tmpHString
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|->
name|get_LocalPort
argument_list|(
name|tmpHString
operator|.
name|GetAddressOf
argument_list|()
argument_list|)
expr_stmt|;
name|localPort
operator|=
name|qt_QStringFromHString
argument_list|(
name|tmpHString
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|localPort
operator|&&
name|tcpListener
condition|)
block|{
name|ComPtr
argument_list|<
name|IStreamSocketListenerInformation
argument_list|>
name|listenerInfo
init|=
literal|0
decl_stmt|;
name|tcpListener
operator|->
name|get_Information
argument_list|(
operator|&
name|listenerInfo
argument_list|)
expr_stmt|;
name|listenerInfo
operator|->
name|get_LocalPort
argument_list|(
name|tmpHString
operator|.
name|GetAddressOf
argument_list|()
argument_list|)
expr_stmt|;
name|localPort
operator|=
name|qt_QStringFromHString
argument_list|(
name|tmpHString
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
name|localAddress
operator|==
name|QHostAddress
operator|::
name|Any
expr_stmt|;
block|}
name|info
operator|->
name|get_RemoteAddress
argument_list|(
operator|&
name|hostName
argument_list|)
expr_stmt|;
if|if
condition|(
name|hostName
condition|)
block|{
name|hostName
operator|->
name|get_CanonicalName
argument_list|(
name|tmpHString
operator|.
name|GetAddressOf
argument_list|()
argument_list|)
expr_stmt|;
name|peerAddress
operator|.
name|setAddress
argument_list|(
name|qt_QStringFromHString
argument_list|(
name|tmpHString
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|->
name|get_RemotePort
argument_list|(
name|tmpHString
operator|.
name|GetAddressOf
argument_list|()
argument_list|)
expr_stmt|;
name|peerPort
operator|=
name|qt_QStringFromHString
argument_list|(
name|tmpHString
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|socketType
operator|==
name|QAbstractSocket
operator|::
name|UdpSocket
condition|)
block|{
name|ComPtr
argument_list|<
name|IHostName
argument_list|>
name|hostName
decl_stmt|;
name|HString
name|tmpHString
decl_stmt|;
name|ComPtr
argument_list|<
name|IDatagramSocketInformation
argument_list|>
name|info
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|udpSocket
argument_list|()
operator|->
name|get_Information
argument_list|(
operator|&
name|info
argument_list|)
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"QNativeSocketEnginePrivate::fetchConnectionParameters: Could not obtain socket information"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|info
operator|->
name|get_LocalAddress
argument_list|(
operator|&
name|hostName
argument_list|)
expr_stmt|;
if|if
condition|(
name|hostName
condition|)
block|{
name|hostName
operator|->
name|get_CanonicalName
argument_list|(
name|tmpHString
operator|.
name|GetAddressOf
argument_list|()
argument_list|)
expr_stmt|;
name|localAddress
operator|.
name|setAddress
argument_list|(
name|qt_QStringFromHString
argument_list|(
name|tmpHString
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|->
name|get_LocalPort
argument_list|(
name|tmpHString
operator|.
name|GetAddressOf
argument_list|()
argument_list|)
expr_stmt|;
name|localPort
operator|=
name|qt_QStringFromHString
argument_list|(
name|tmpHString
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
block|}
name|info
operator|->
name|get_RemoteAddress
argument_list|(
operator|&
name|hostName
argument_list|)
expr_stmt|;
if|if
condition|(
name|hostName
condition|)
block|{
name|hostName
operator|->
name|get_CanonicalName
argument_list|(
name|tmpHString
operator|.
name|GetAddressOf
argument_list|()
argument_list|)
expr_stmt|;
name|peerAddress
operator|.
name|setAddress
argument_list|(
name|qt_QStringFromHString
argument_list|(
name|tmpHString
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|->
name|get_RemotePort
argument_list|(
name|tmpHString
operator|.
name|GetAddressOf
argument_list|()
argument_list|)
expr_stmt|;
name|peerPort
operator|=
name|qt_QStringFromHString
argument_list|(
name|tmpHString
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|handleBindCompleted
name|HRESULT
name|QNativeSocketEnginePrivate
operator|::
name|handleBindCompleted
parameter_list|(
name|IAsyncAction
modifier|*
parameter_list|,
name|AsyncStatus
parameter_list|)
block|{
return|return
name|S_OK
return|;
block|}
end_function
begin_function
DECL|function|handleClientConnection
name|HRESULT
name|QNativeSocketEnginePrivate
operator|::
name|handleClientConnection
parameter_list|(
name|IStreamSocketListener
modifier|*
name|listener
parameter_list|,
name|IStreamSocketListenerConnectionReceivedEventArgs
modifier|*
name|args
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QNativeSocketEngine
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
argument|listener
argument_list|)
name|IStreamSocket
modifier|*
name|socket
decl_stmt|;
name|args
operator|->
name|get_Socket
argument_list|(
operator|&
name|socket
argument_list|)
expr_stmt|;
name|pendingConnections
operator|.
name|append
argument_list|(
name|socket
argument_list|)
expr_stmt|;
emit|emit
name|q
operator|->
name|connectionReady
argument_list|()
emit|;
emit|emit
name|q
operator|->
name|readReady
argument_list|()
emit|;
return|return
name|S_OK
return|;
block|}
end_function
begin_function
DECL|function|handleConnectToHost
name|HRESULT
name|QNativeSocketEnginePrivate
operator|::
name|handleConnectToHost
parameter_list|(
name|IAsyncAction
modifier|*
name|action
parameter_list|,
name|AsyncStatus
parameter_list|)
block|{
name|handleConnectionEstablished
argument_list|(
name|action
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
block|}
end_function
begin_function
DECL|function|handleConnectionEstablished
name|void
name|QNativeSocketEnginePrivate
operator|::
name|handleConnectionEstablished
parameter_list|(
name|IAsyncAction
modifier|*
name|action
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QNativeSocketEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|wasDeleted
operator|||
operator|!
name|connectOp
condition|)
comment|// Protect against a late callback
return|return;
name|HRESULT
name|hr
init|=
name|action
operator|->
name|GetResults
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|hr
condition|)
block|{
case|case
literal|0x8007274c
case|:
comment|// A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond.
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|NetworkError
argument_list|,
name|ConnectionTimeOutErrorString
argument_list|)
expr_stmt|;
name|socketState
operator|=
name|QAbstractSocket
operator|::
name|UnconnectedState
expr_stmt|;
break|break;
case|case
literal|0x80072751
case|:
comment|// A socket operation was attempted to an unreachable host.
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|HostNotFoundError
argument_list|,
name|HostUnreachableErrorString
argument_list|)
expr_stmt|;
name|socketState
operator|=
name|QAbstractSocket
operator|::
name|UnconnectedState
expr_stmt|;
break|break;
case|case
literal|0x8007274d
case|:
comment|// No connection could be made because the target machine actively refused it.
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|ConnectionRefusedError
argument_list|,
name|ConnectionRefusedErrorString
argument_list|)
expr_stmt|;
name|socketState
operator|=
name|QAbstractSocket
operator|::
name|UnconnectedState
expr_stmt|;
break|break;
default|default:
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|UnknownSocketError
argument_list|,
name|UnknownSocketErrorString
argument_list|)
expr_stmt|;
name|socketState
operator|=
name|QAbstractSocket
operator|::
name|UnconnectedState
expr_stmt|;
block|}
break|break;
block|}
comment|// The callback might be triggered several times if we do not cancel/reset it here
if|if
condition|(
name|connectOp
condition|)
block|{
name|ComPtr
argument_list|<
name|IAsyncInfo
argument_list|>
name|info
decl_stmt|;
name|connectOp
operator|.
name|As
argument_list|(
operator|&
name|info
argument_list|)
expr_stmt|;
if|if
condition|(
name|info
condition|)
block|{
name|info
operator|->
name|Cancel
argument_list|()
expr_stmt|;
name|info
operator|->
name|Close
argument_list|()
expr_stmt|;
block|}
name|connectOp
operator|.
name|Reset
argument_list|()
expr_stmt|;
block|}
name|socketState
operator|=
name|QAbstractSocket
operator|::
name|ConnectedState
expr_stmt|;
emit|emit
name|q
operator|->
name|connectionReady
argument_list|()
emit|;
if|if
condition|(
name|socketType
operator|!=
name|QAbstractSocket
operator|::
name|TcpSocket
condition|)
return|return;
comment|// Delay the reader so that the SSL socket can upgrade
if|if
condition|(
name|sslSocket
condition|)
name|QObject
operator|::
name|connect
argument_list|(
name|qobject_cast
argument_list|<
name|QSslSocket
operator|*
argument_list|>
argument_list|(
name|sslSocket
argument_list|)
argument_list|,
operator|&
name|QSslSocket
operator|::
name|encrypted
argument_list|,
name|q
argument_list|,
operator|&
name|QNativeSocketEngine
operator|::
name|establishRead
argument_list|)
expr_stmt|;
else|else
name|q
operator|->
name|establishRead
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleReadyRead
name|HRESULT
name|QNativeSocketEnginePrivate
operator|::
name|handleReadyRead
parameter_list|(
name|IAsyncBufferOperation
modifier|*
name|asyncInfo
parameter_list|,
name|AsyncStatus
name|status
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QNativeSocketEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|wasDeleted
operator|||
name|isDeletingChildren
condition|)
return|return
name|S_OK
return|;
comment|// A read in UnconnectedState will close the socket and return -1 and thus tell the caller,
comment|// that the connection was closed. The socket cannot be closed here, as the subsequent read
comment|// might fail then.
if|if
condition|(
name|status
operator|==
name|Error
operator|||
name|status
operator|==
name|Canceled
condition|)
block|{
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|NetworkError
argument_list|,
name|RemoteHostClosedErrorString
argument_list|)
expr_stmt|;
name|socketState
operator|=
name|QAbstractSocket
operator|::
name|UnconnectedState
expr_stmt|;
if|if
condition|(
name|notifyOnRead
condition|)
emit|emit
name|q
operator|->
name|readReady
argument_list|()
emit|;
return|return
name|S_OK
return|;
block|}
name|ComPtr
argument_list|<
name|IBuffer
argument_list|>
name|buffer
decl_stmt|;
name|HRESULT
name|hr
init|=
name|asyncInfo
operator|->
name|GetResults
argument_list|(
operator|&
name|buffer
argument_list|)
decl_stmt|;
name|RETURN_OK_IF_FAILED
argument_list|(
literal|"Failed to get read results buffer"
argument_list|)
expr_stmt|;
name|UINT32
name|bufferLength
decl_stmt|;
name|hr
operator|=
name|buffer
operator|->
name|get_Length
argument_list|(
operator|&
name|bufferLength
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
comment|// A zero sized buffer length signals, that the remote host closed the connection. The socket
comment|// cannot be closed though, as the following read might have socket descriptor -1 and thus and
comment|// the closing of the socket won't be communicated to the caller. So only the error is set. The
comment|// actual socket close happens inside of read.
if|if
condition|(
operator|!
name|bufferLength
condition|)
block|{
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|NetworkError
argument_list|,
name|RemoteHostClosedErrorString
argument_list|)
expr_stmt|;
name|socketState
operator|=
name|QAbstractSocket
operator|::
name|UnconnectedState
expr_stmt|;
if|if
condition|(
name|notifyOnRead
condition|)
emit|emit
name|q
operator|->
name|readReady
argument_list|()
emit|;
return|return
name|S_OK
return|;
block|}
name|ComPtr
argument_list|<
name|Windows
operator|::
name|Storage
operator|::
name|Streams
operator|::
name|IBufferByteAccess
argument_list|>
name|byteArrayAccess
decl_stmt|;
name|hr
operator|=
name|buffer
operator|.
name|As
argument_list|(
operator|&
name|byteArrayAccess
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|byte
modifier|*
name|data
decl_stmt|;
name|hr
operator|=
name|byteArrayAccess
operator|->
name|Buffer
argument_list|(
operator|&
name|data
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|readMutex
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
name|readBytes
operator|.
name|atEnd
argument_list|()
condition|)
comment|// Everything has been read; the buffer is safe to reset
name|readBytes
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|readBytes
operator|.
name|isOpen
argument_list|()
condition|)
name|readBytes
operator|.
name|open
argument_list|(
name|QBuffer
operator|::
name|ReadWrite
operator||
name|QBuffer
operator|::
name|Truncate
argument_list|)
expr_stmt|;
name|qint64
name|readPos
init|=
name|readBytes
operator|.
name|pos
argument_list|()
decl_stmt|;
name|readBytes
operator|.
name|seek
argument_list|(
name|readBytes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|readBytes
operator|.
name|atEnd
argument_list|()
argument_list|)
expr_stmt|;
name|readBytes
operator|.
name|write
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
argument_list|,
name|qint64
argument_list|(
name|bufferLength
argument_list|)
argument_list|)
expr_stmt|;
name|readBytes
operator|.
name|seek
argument_list|(
name|readPos
argument_list|)
expr_stmt|;
name|readMutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
if|if
condition|(
name|notifyOnRead
condition|)
emit|emit
name|q
operator|->
name|readReady
argument_list|()
emit|;
name|ComPtr
argument_list|<
name|IInputStream
argument_list|>
name|stream
decl_stmt|;
name|hr
operator|=
name|tcpSocket
argument_list|()
operator|->
name|get_InputStream
argument_list|(
operator|&
name|stream
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
comment|// Reuse the stream buffer
name|hr
operator|=
name|buffer
operator|->
name|get_Capacity
argument_list|(
operator|&
name|bufferLength
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|hr
operator|=
name|buffer
operator|->
name|put_Length
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|ComPtr
argument_list|<
name|IAsyncBufferOperation
argument_list|>
name|op
decl_stmt|;
name|hr
operator|=
name|stream
operator|->
name|ReadAsync
argument_list|(
name|buffer
operator|.
name|Get
argument_list|()
argument_list|,
name|bufferLength
argument_list|,
name|InputStreamOptions_Partial
argument_list|,
operator|&
name|op
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|qErrnoWarning
argument_list|(
name|hr
argument_list|,
literal|"Could not read into socket stream buffer."
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
block|}
name|hr
operator|=
name|op
operator|->
name|put_Completed
argument_list|(
name|Callback
argument_list|<
name|SocketReadCompletedHandler
argument_list|>
argument_list|(
name|this
argument_list|,
operator|&
name|QNativeSocketEnginePrivate
operator|::
name|handleReadyRead
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|qErrnoWarning
argument_list|(
name|hr
argument_list|,
literal|"Failed to set socket read callback."
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
block|}
return|return
name|S_OK
return|;
block|}
end_function
begin_function
DECL|function|handleNewDatagram
name|HRESULT
name|QNativeSocketEnginePrivate
operator|::
name|handleNewDatagram
parameter_list|(
name|IDatagramSocket
modifier|*
name|socket
parameter_list|,
name|IDatagramSocketMessageReceivedEventArgs
modifier|*
name|args
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QNativeSocketEngine
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|socket
argument_list|)
expr_stmt|;
name|WinRtDatagram
name|datagram
decl_stmt|;
name|QHostAddress
name|returnAddress
decl_stmt|;
name|ComPtr
argument_list|<
name|IHostName
argument_list|>
name|remoteHost
decl_stmt|;
name|HRESULT
name|hr
init|=
name|args
operator|->
name|get_RemoteAddress
argument_list|(
operator|&
name|remoteHost
argument_list|)
decl_stmt|;
name|RETURN_OK_IF_FAILED
argument_list|(
literal|"Could not obtain remote host"
argument_list|)
expr_stmt|;
name|HString
name|remoteHostString
decl_stmt|;
name|remoteHost
operator|->
name|get_CanonicalName
argument_list|(
name|remoteHostString
operator|.
name|GetAddressOf
argument_list|()
argument_list|)
expr_stmt|;
name|RETURN_OK_IF_FAILED
argument_list|(
literal|"Could not obtain remote host's canonical name"
argument_list|)
expr_stmt|;
name|returnAddress
operator|.
name|setAddress
argument_list|(
name|qt_QStringFromHString
argument_list|(
name|remoteHostString
argument_list|)
argument_list|)
expr_stmt|;
name|datagram
operator|.
name|header
operator|.
name|senderAddress
operator|=
name|returnAddress
expr_stmt|;
name|HString
name|remotePort
decl_stmt|;
name|hr
operator|=
name|args
operator|->
name|get_RemotePort
argument_list|(
name|remotePort
operator|.
name|GetAddressOf
argument_list|()
argument_list|)
expr_stmt|;
name|RETURN_OK_IF_FAILED
argument_list|(
literal|"Could not obtain remote port"
argument_list|)
expr_stmt|;
name|datagram
operator|.
name|header
operator|.
name|senderPort
operator|=
name|qt_QStringFromHString
argument_list|(
name|remotePort
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
name|ComPtr
argument_list|<
name|IDataReader
argument_list|>
name|reader
decl_stmt|;
name|hr
operator|=
name|args
operator|->
name|GetDataReader
argument_list|(
operator|&
name|reader
argument_list|)
expr_stmt|;
name|RETURN_OK_IF_FAILED
argument_list|(
literal|"Could not obtain data reader"
argument_list|)
expr_stmt|;
name|quint32
name|length
decl_stmt|;
name|hr
operator|=
name|reader
operator|->
name|get_UnconsumedBufferLength
argument_list|(
operator|&
name|length
argument_list|)
expr_stmt|;
name|RETURN_OK_IF_FAILED
argument_list|(
literal|"Could not obtain unconsumed buffer length"
argument_list|)
expr_stmt|;
name|datagram
operator|.
name|data
operator|.
name|resize
argument_list|(
name|length
argument_list|)
expr_stmt|;
name|hr
operator|=
name|reader
operator|->
name|ReadBytes
argument_list|(
name|length
argument_list|,
cast|reinterpret_cast
argument_list|<
name|BYTE
operator|*
argument_list|>
argument_list|(
name|datagram
operator|.
name|data
operator|.
name|data
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|RETURN_OK_IF_FAILED
argument_list|(
literal|"Could not read datagram"
argument_list|)
expr_stmt|;
name|pendingDatagrams
operator|.
name|append
argument_list|(
name|datagram
argument_list|)
expr_stmt|;
emit|emit
name|q
operator|->
name|readReady
argument_list|()
emit|;
return|return
name|S_OK
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
