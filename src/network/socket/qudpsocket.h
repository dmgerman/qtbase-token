begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtNetwork module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QUDPSOCKET_H
end_ifndef
begin_define
DECL|macro|QUDPSOCKET_H
define|#
directive|define
name|QUDPSOCKET_H
end_define
begin_include
include|#
directive|include
file|<QtNetwork/qabstractsocket.h>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/qhostaddress.h>
end_include
begin_decl_stmt
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
name|QT_MODULE
argument_list|(
name|Network
argument_list|)
ifndef|#
directive|ifndef
name|QT_NO_UDPSOCKET
name|class
name|QNetworkInterface
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QUdpSocketPrivate
name|class
name|QUdpSocketPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_NETWORK_EXPORT
name|QUdpSocket
range|:
name|public
name|QAbstractSocket
block|{
name|Q_OBJECT
name|public
operator|:
expr|enum
name|BindFlag
block|{
name|DefaultForPlatform
operator|=
literal|0x0
block|,
name|ShareAddress
operator|=
literal|0x1
block|,
name|DontShareAddress
operator|=
literal|0x2
block|,
name|ReuseAddressHint
operator|=
literal|0x4
block|}
block|;
name|Q_DECLARE_FLAGS
argument_list|(
argument|BindMode
argument_list|,
argument|BindFlag
argument_list|)
name|explicit
name|QUdpSocket
argument_list|(
name|QObject
operator|*
name|parent
operator|=
literal|0
argument_list|)
block|;
name|virtual
operator|~
name|QUdpSocket
argument_list|()
block|;
name|bool
name|bind
argument_list|(
argument|const QHostAddress&address
argument_list|,
argument|quint16 port
argument_list|)
block|;
name|bool
name|bind
argument_list|(
argument|quint16 port =
literal|0
argument_list|)
block|;
name|bool
name|bind
argument_list|(
argument|const QHostAddress&address
argument_list|,
argument|quint16 port
argument_list|,
argument|BindMode mode
argument_list|)
block|;
name|bool
name|bind
argument_list|(
argument|quint16 port
argument_list|,
argument|BindMode mode
argument_list|)
block|;
comment|// ### Qt 5: Merge the bind functions
ifndef|#
directive|ifndef
name|QT_NO_NETWORKINTERFACE
name|bool
name|joinMulticastGroup
argument_list|(
specifier|const
name|QHostAddress
operator|&
name|groupAddress
argument_list|)
block|;
name|bool
name|joinMulticastGroup
argument_list|(
specifier|const
name|QHostAddress
operator|&
name|groupAddress
argument_list|,
specifier|const
name|QNetworkInterface
operator|&
name|iface
argument_list|)
block|;
name|bool
name|leaveMulticastGroup
argument_list|(
specifier|const
name|QHostAddress
operator|&
name|groupAddress
argument_list|)
block|;
name|bool
name|leaveMulticastGroup
argument_list|(
specifier|const
name|QHostAddress
operator|&
name|groupAddress
argument_list|,
specifier|const
name|QNetworkInterface
operator|&
name|iface
argument_list|)
block|;
name|QNetworkInterface
name|multicastInterface
argument_list|()
specifier|const
block|;
name|void
name|setMulticastInterface
argument_list|(
specifier|const
name|QNetworkInterface
operator|&
name|iface
argument_list|)
block|;
endif|#
directive|endif
name|bool
name|hasPendingDatagrams
argument_list|()
specifier|const
block|;
name|qint64
name|pendingDatagramSize
argument_list|()
specifier|const
block|;
name|qint64
name|readDatagram
argument_list|(
argument|char *data
argument_list|,
argument|qint64 maxlen
argument_list|,
argument|QHostAddress *host =
literal|0
argument_list|,
argument|quint16 *port =
literal|0
argument_list|)
block|;
name|qint64
name|writeDatagram
argument_list|(
argument|const char *data
argument_list|,
argument|qint64 len
argument_list|,
argument|const QHostAddress&host
argument_list|,
argument|quint16 port
argument_list|)
block|;
specifier|inline
name|qint64
name|writeDatagram
argument_list|(
argument|const QByteArray&datagram
argument_list|,
argument|const QHostAddress&host
argument_list|,
argument|quint16 port
argument_list|)
block|{
return|return
name|writeDatagram
argument_list|(
name|datagram
operator|.
name|constData
argument_list|()
argument_list|,
name|datagram
operator|.
name|size
argument_list|()
argument_list|,
name|host
argument_list|,
name|port
argument_list|)
return|;
block|}
name|private
operator|:
name|Q_DISABLE_COPY
argument_list|(
argument|QUdpSocket
argument_list|)
name|Q_DECLARE_PRIVATE
argument_list|(
argument|QUdpSocket
argument_list|)
expr|}
block|;
name|Q_DECLARE_OPERATORS_FOR_FLAGS
argument_list|(
argument|QUdpSocket::BindMode
argument_list|)
endif|#
directive|endif
comment|// QT_NO_UDPSOCKET
name|QT_END_NAMESPACE
name|QT_END_HEADER
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QUDPSOCKET_H
end_comment
end_unit
