begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtNetwork module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qlocalsocket_p.h"
end_include
begin_include
include|#
directive|include
file|<private/qthread_p.h>
end_include
begin_include
include|#
directive|include
file|<qcoreapplication.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|init
name|void
name|QLocalSocketPrivate
operator|::
name|init
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QLocalSocket
argument_list|)
expr_stmt|;
name|emitReadyReadTimer
operator|=
operator|new
name|QTimer
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|emitReadyReadTimer
operator|->
name|setSingleShot
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|emitReadyReadTimer
argument_list|,
name|SIGNAL
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|memset
argument_list|(
operator|&
name|overlapped
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|overlapped
argument_list|)
argument_list|)
expr_stmt|;
name|overlapped
operator|.
name|hEvent
operator|=
name|CreateEvent
argument_list|(
name|NULL
argument_list|,
name|TRUE
argument_list|,
name|FALSE
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|dataReadNotifier
operator|=
operator|new
name|QWinEventNotifier
argument_list|(
name|overlapped
operator|.
name|hEvent
argument_list|,
name|q
argument_list|)
expr_stmt|;
name|q
operator|->
name|connect
argument_list|(
name|dataReadNotifier
argument_list|,
name|SIGNAL
argument_list|(
name|activated
argument_list|(
name|HANDLE
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_notified
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setErrorString
name|void
name|QLocalSocketPrivate
operator|::
name|setErrorString
parameter_list|(
specifier|const
name|QString
modifier|&
name|function
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QLocalSocket
argument_list|)
expr_stmt|;
name|BOOL
name|windowsError
init|=
name|GetLastError
argument_list|()
decl_stmt|;
name|QLocalSocket
operator|::
name|LocalSocketState
name|currentState
init|=
name|state
decl_stmt|;
comment|// If the connectToServer fails due to WaitNamedPipe() time-out, assume ConnectionError
if|if
condition|(
name|state
operator|==
name|QLocalSocket
operator|::
name|ConnectingState
operator|&&
name|windowsError
operator|==
name|ERROR_SEM_TIMEOUT
condition|)
name|windowsError
operator|=
name|ERROR_NO_DATA
expr_stmt|;
switch|switch
condition|(
name|windowsError
condition|)
block|{
case|case
name|ERROR_PIPE_NOT_CONNECTED
case|:
case|case
name|ERROR_BROKEN_PIPE
case|:
case|case
name|ERROR_NO_DATA
case|:
name|error
operator|=
name|QLocalSocket
operator|::
name|ConnectionError
expr_stmt|;
name|errorString
operator|=
name|QLocalSocket
operator|::
name|tr
argument_list|(
literal|"%1: Connection error"
argument_list|)
operator|.
name|arg
argument_list|(
name|function
argument_list|)
expr_stmt|;
name|state
operator|=
name|QLocalSocket
operator|::
name|UnconnectedState
expr_stmt|;
break|break;
case|case
name|ERROR_FILE_NOT_FOUND
case|:
name|error
operator|=
name|QLocalSocket
operator|::
name|ServerNotFoundError
expr_stmt|;
name|errorString
operator|=
name|QLocalSocket
operator|::
name|tr
argument_list|(
literal|"%1: Invalid name"
argument_list|)
operator|.
name|arg
argument_list|(
name|function
argument_list|)
expr_stmt|;
name|state
operator|=
name|QLocalSocket
operator|::
name|UnconnectedState
expr_stmt|;
break|break;
case|case
name|ERROR_ACCESS_DENIED
case|:
name|error
operator|=
name|QLocalSocket
operator|::
name|SocketAccessError
expr_stmt|;
name|errorString
operator|=
name|QLocalSocket
operator|::
name|tr
argument_list|(
literal|"%1: Access denied"
argument_list|)
operator|.
name|arg
argument_list|(
name|function
argument_list|)
expr_stmt|;
name|state
operator|=
name|QLocalSocket
operator|::
name|UnconnectedState
expr_stmt|;
break|break;
default|default:
name|error
operator|=
name|QLocalSocket
operator|::
name|UnknownSocketError
expr_stmt|;
name|errorString
operator|=
name|QLocalSocket
operator|::
name|tr
argument_list|(
literal|"%1: Unknown error %2"
argument_list|)
operator|.
name|arg
argument_list|(
name|function
argument_list|)
operator|.
name|arg
argument_list|(
name|windowsError
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
name|QLOCALSOCKET_DEBUG
name|qWarning
argument_list|()
operator|<<
literal|"QLocalSocket error not handled:"
operator|<<
name|errorString
expr_stmt|;
endif|#
directive|endif
name|state
operator|=
name|QLocalSocket
operator|::
name|UnconnectedState
expr_stmt|;
block|}
if|if
condition|(
name|currentState
operator|!=
name|state
condition|)
block|{
name|q
operator|->
emit|emit
name|stateChanged
argument_list|(
name|state
argument_list|)
emit|;
if|if
condition|(
name|state
operator|==
name|QLocalSocket
operator|::
name|UnconnectedState
condition|)
name|q
operator|->
emit|emit
name|disconnected
argument_list|()
emit|;
block|}
emit|emit
name|q
operator|->
name|error
argument_list|(
name|error
argument_list|)
emit|;
block|}
end_function
begin_constructor
DECL|function|QLocalSocketPrivate
name|QLocalSocketPrivate
operator|::
name|QLocalSocketPrivate
parameter_list|()
member_init_list|:
name|QIODevicePrivate
argument_list|()
member_init_list|,
name|handle
argument_list|(
name|INVALID_HANDLE_VALUE
argument_list|)
member_init_list|,
name|pipeWriter
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|readBufferMaxSize
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|actualReadBufferSize
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|error
argument_list|(
name|QLocalSocket
operator|::
name|UnknownSocketError
argument_list|)
member_init_list|,
name|readSequenceStarted
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|emitReadyReadTimer
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|pipeClosed
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|state
argument_list|(
name|QLocalSocket
operator|::
name|UnconnectedState
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QLocalSocketPrivate
name|QLocalSocketPrivate
operator|::
name|~
name|QLocalSocketPrivate
parameter_list|()
block|{
name|destroyPipeHandles
argument_list|()
expr_stmt|;
name|CloseHandle
argument_list|(
name|overlapped
operator|.
name|hEvent
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|destroyPipeHandles
name|void
name|QLocalSocketPrivate
operator|::
name|destroyPipeHandles
parameter_list|()
block|{
if|if
condition|(
name|handle
operator|!=
name|INVALID_HANDLE_VALUE
condition|)
block|{
name|DisconnectNamedPipe
argument_list|(
name|handle
argument_list|)
expr_stmt|;
name|CloseHandle
argument_list|(
name|handle
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|connectToServer
name|void
name|QLocalSocket
operator|::
name|connectToServer
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|,
name|OpenMode
name|openMode
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QLocalSocket
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
argument_list|()
operator|==
name|ConnectedState
operator|||
name|state
argument_list|()
operator|==
name|ConnectingState
condition|)
return|return;
name|d
operator|->
name|error
operator|=
name|QLocalSocket
operator|::
name|UnknownSocketError
expr_stmt|;
name|d
operator|->
name|errorString
operator|=
name|QString
argument_list|()
expr_stmt|;
name|d
operator|->
name|state
operator|=
name|ConnectingState
expr_stmt|;
emit|emit
name|stateChanged
argument_list|(
name|d
operator|->
name|state
argument_list|)
emit|;
if|if
condition|(
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|d
operator|->
name|error
operator|=
name|QLocalSocket
operator|::
name|ServerNotFoundError
expr_stmt|;
name|setErrorString
argument_list|(
name|QLocalSocket
operator|::
name|tr
argument_list|(
literal|"%1: Invalid name"
argument_list|)
operator|.
name|arg
argument_list|(
name|QLatin1String
argument_list|(
literal|"QLocalSocket::connectToServer"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|state
operator|=
name|UnconnectedState
expr_stmt|;
emit|emit
name|error
argument_list|(
name|d
operator|->
name|error
argument_list|)
emit|;
emit|emit
name|stateChanged
argument_list|(
name|d
operator|->
name|state
argument_list|)
emit|;
return|return;
block|}
name|QString
name|pipePath
init|=
name|QLatin1String
argument_list|(
literal|"\\\\.\\pipe\\"
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|pipePath
argument_list|)
condition|)
name|d
operator|->
name|fullServerName
operator|=
name|name
expr_stmt|;
else|else
name|d
operator|->
name|fullServerName
operator|=
name|pipePath
operator|+
name|name
expr_stmt|;
comment|// Try to open a named pipe
name|HANDLE
name|localSocket
decl_stmt|;
forever|forever
block|{
name|DWORD
name|permissions
init|=
operator|(
name|openMode
operator|&
name|QIODevice
operator|::
name|ReadOnly
operator|)
condition|?
name|GENERIC_READ
else|:
literal|0
decl_stmt|;
name|permissions
operator||=
operator|(
name|openMode
operator|&
name|QIODevice
operator|::
name|WriteOnly
operator|)
condition|?
name|GENERIC_WRITE
else|:
literal|0
expr_stmt|;
name|localSocket
operator|=
name|CreateFile
argument_list|(
operator|(
specifier|const
name|wchar_t
operator|*
operator|)
name|d
operator|->
name|fullServerName
operator|.
name|utf16
argument_list|()
argument_list|,
comment|// pipe name
name|permissions
argument_list|,
literal|0
argument_list|,
comment|// no sharing
name|NULL
argument_list|,
comment|// default security attributes
name|OPEN_EXISTING
argument_list|,
comment|// opens existing pipe
name|FILE_FLAG_OVERLAPPED
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
comment|// no template file
if|if
condition|(
name|localSocket
operator|!=
name|INVALID_HANDLE_VALUE
condition|)
break|break;
name|DWORD
name|error
init|=
name|GetLastError
argument_list|()
decl_stmt|;
comment|// It is really an error only if it is not ERROR_PIPE_BUSY
if|if
condition|(
name|ERROR_PIPE_BUSY
operator|!=
name|error
condition|)
block|{
break|break;
block|}
comment|// All pipe instances are busy, so wait until connected or up to 5 seconds.
if|if
condition|(
operator|!
name|WaitNamedPipe
argument_list|(
operator|(
specifier|const
name|wchar_t
operator|*
operator|)
name|d
operator|->
name|fullServerName
operator|.
name|utf16
argument_list|()
argument_list|,
literal|5000
argument_list|)
condition|)
break|break;
block|}
if|if
condition|(
name|localSocket
operator|==
name|INVALID_HANDLE_VALUE
condition|)
block|{
name|d
operator|->
name|setErrorString
argument_list|(
name|QLatin1String
argument_list|(
literal|"QLocalSocket::connectToServer"
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|fullServerName
operator|=
name|QString
argument_list|()
expr_stmt|;
return|return;
block|}
comment|// we have a valid handle
name|d
operator|->
name|serverName
operator|=
name|name
expr_stmt|;
if|if
condition|(
name|setSocketDescriptor
argument_list|(
operator|(
name|quintptr
operator|)
name|localSocket
argument_list|,
name|ConnectedState
argument_list|,
name|openMode
argument_list|)
condition|)
block|{
name|d
operator|->
name|handle
operator|=
name|localSocket
expr_stmt|;
emit|emit
name|connected
argument_list|()
emit|;
block|}
block|}
end_function
begin_comment
comment|// This is reading from the buffer
end_comment
begin_function
DECL|function|readData
name|qint64
name|QLocalSocket
operator|::
name|readData
parameter_list|(
name|char
modifier|*
name|data
parameter_list|,
name|qint64
name|maxSize
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QLocalSocket
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|pipeClosed
operator|&&
name|d
operator|->
name|actualReadBufferSize
operator|==
literal|0
condition|)
return|return
operator|-
literal|1
return|;
comment|// signal EOF
name|qint64
name|readSoFar
decl_stmt|;
comment|// If startAsyncRead() read data, copy it to its destination.
if|if
condition|(
name|maxSize
operator|==
literal|1
operator|&&
name|d
operator|->
name|actualReadBufferSize
operator|>
literal|0
condition|)
block|{
operator|*
name|data
operator|=
name|d
operator|->
name|readBuffer
operator|.
name|getChar
argument_list|()
expr_stmt|;
name|d
operator|->
name|actualReadBufferSize
operator|--
expr_stmt|;
name|readSoFar
operator|=
literal|1
expr_stmt|;
block|}
else|else
block|{
name|qint64
name|bytesToRead
init|=
name|qMin
argument_list|(
name|qint64
argument_list|(
name|d
operator|->
name|actualReadBufferSize
argument_list|)
argument_list|,
name|maxSize
argument_list|)
decl_stmt|;
name|readSoFar
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|readSoFar
operator|<
name|bytesToRead
condition|)
block|{
specifier|const
name|char
modifier|*
name|ptr
init|=
name|d
operator|->
name|readBuffer
operator|.
name|readPointer
argument_list|()
decl_stmt|;
name|int
name|bytesToReadFromThisBlock
init|=
name|qMin
argument_list|(
name|bytesToRead
operator|-
name|readSoFar
argument_list|,
name|qint64
argument_list|(
name|d
operator|->
name|readBuffer
operator|.
name|nextDataBlockSize
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|memcpy
argument_list|(
name|data
operator|+
name|readSoFar
argument_list|,
name|ptr
argument_list|,
name|bytesToReadFromThisBlock
argument_list|)
expr_stmt|;
name|readSoFar
operator|+=
name|bytesToReadFromThisBlock
expr_stmt|;
name|d
operator|->
name|readBuffer
operator|.
name|free
argument_list|(
name|bytesToReadFromThisBlock
argument_list|)
expr_stmt|;
name|d
operator|->
name|actualReadBufferSize
operator|-=
name|bytesToReadFromThisBlock
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|d
operator|->
name|pipeClosed
condition|)
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|actualReadBufferSize
condition|)
name|d
operator|->
name|emitReadyReadTimer
operator|->
name|stop
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|readSequenceStarted
condition|)
name|d
operator|->
name|startAsyncRead
argument_list|()
expr_stmt|;
block|}
return|return
name|readSoFar
return|;
block|}
end_function
begin_comment
comment|/*!     \internal     Reads data from the socket into the readbuffer  */
end_comment
begin_function
DECL|function|startAsyncRead
name|void
name|QLocalSocketPrivate
operator|::
name|startAsyncRead
parameter_list|()
block|{
do|do
block|{
name|DWORD
name|bytesToRead
init|=
name|checkPipeState
argument_list|()
decl_stmt|;
if|if
condition|(
name|pipeClosed
condition|)
return|return;
if|if
condition|(
name|bytesToRead
operator|==
literal|0
condition|)
block|{
comment|// There are no bytes in the pipe but we need to
comment|// start the overlapped read with some buffer size.
name|bytesToRead
operator|=
name|initialReadBufferSize
expr_stmt|;
block|}
if|if
condition|(
name|readBufferMaxSize
operator|&&
name|bytesToRead
operator|>
operator|(
name|readBufferMaxSize
operator|-
name|readBuffer
operator|.
name|size
argument_list|()
operator|)
condition|)
block|{
name|bytesToRead
operator|=
name|readBufferMaxSize
operator|-
name|readBuffer
operator|.
name|size
argument_list|()
expr_stmt|;
if|if
condition|(
name|bytesToRead
operator|==
literal|0
condition|)
block|{
comment|// Buffer is full. User must read data from the buffer
comment|// before we can read more from the pipe.
return|return;
block|}
block|}
name|char
modifier|*
name|ptr
init|=
name|readBuffer
operator|.
name|reserve
argument_list|(
name|bytesToRead
argument_list|)
decl_stmt|;
name|readSequenceStarted
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|ReadFile
argument_list|(
name|handle
argument_list|,
name|ptr
argument_list|,
name|bytesToRead
argument_list|,
name|NULL
argument_list|,
operator|&
name|overlapped
argument_list|)
condition|)
block|{
name|completeAsyncRead
argument_list|()
expr_stmt|;
block|}
else|else
block|{
switch|switch
condition|(
name|GetLastError
argument_list|()
condition|)
block|{
case|case
name|ERROR_IO_PENDING
case|:
comment|// This is not an error. We're getting notified, when data arrives.
return|return;
case|case
name|ERROR_MORE_DATA
case|:
comment|// This is not an error. The synchronous read succeeded.
comment|// We're connected to a message mode pipe and the message
comment|// didn't fit into the pipe's system buffer.
name|completeAsyncRead
argument_list|()
expr_stmt|;
break|break;
case|case
name|ERROR_PIPE_NOT_CONNECTED
case|:
block|{
comment|// It may happen, that the other side closes the connection directly
comment|// after writing data. Then we must set the appropriate socket state.
name|pipeClosed
operator|=
literal|true
expr_stmt|;
name|Q_Q
argument_list|(
name|QLocalSocket
argument_list|)
expr_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|0
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_pipeClosed
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
default|default:
name|setErrorString
argument_list|(
name|QLatin1String
argument_list|(
literal|"QLocalSocketPrivate::startAsyncRead"
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
do|while
condition|(
operator|!
name|readSequenceStarted
condition|)
do|;
block|}
end_function
begin_comment
comment|/*!     \internal     Sets the correct size of the read buffer after a read operation.     Returns false, if an error occurred or the connection dropped.  */
end_comment
begin_function
DECL|function|completeAsyncRead
name|bool
name|QLocalSocketPrivate
operator|::
name|completeAsyncRead
parameter_list|()
block|{
name|ResetEvent
argument_list|(
name|overlapped
operator|.
name|hEvent
argument_list|)
expr_stmt|;
name|readSequenceStarted
operator|=
literal|false
expr_stmt|;
name|DWORD
name|bytesRead
decl_stmt|;
if|if
condition|(
operator|!
name|GetOverlappedResult
argument_list|(
name|handle
argument_list|,
operator|&
name|overlapped
argument_list|,
operator|&
name|bytesRead
argument_list|,
name|TRUE
argument_list|)
condition|)
block|{
switch|switch
condition|(
name|GetLastError
argument_list|()
condition|)
block|{
case|case
name|ERROR_MORE_DATA
case|:
comment|// This is not an error. We're connected to a message mode
comment|// pipe and the message didn't fit into the pipe's system
comment|// buffer. We will read the remaining data in the next call.
break|break;
case|case
name|ERROR_PIPE_NOT_CONNECTED
case|:
return|return
literal|false
return|;
default|default:
name|setErrorString
argument_list|(
name|QLatin1String
argument_list|(
literal|"QLocalSocketPrivate::completeAsyncRead"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
name|actualReadBufferSize
operator|+=
name|bytesRead
expr_stmt|;
name|readBuffer
operator|.
name|truncate
argument_list|(
name|actualReadBufferSize
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|emitReadyReadTimer
operator|->
name|isActive
argument_list|()
condition|)
name|emitReadyReadTimer
operator|->
name|start
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|writeData
name|qint64
name|QLocalSocket
operator|::
name|writeData
parameter_list|(
specifier|const
name|char
modifier|*
name|data
parameter_list|,
name|qint64
name|maxSize
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QLocalSocket
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|pipeWriter
condition|)
block|{
name|d
operator|->
name|pipeWriter
operator|=
operator|new
name|QWindowsPipeWriter
argument_list|(
name|d
operator|->
name|handle
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|d
operator|->
name|pipeWriter
argument_list|,
name|SIGNAL
argument_list|(
name|canWrite
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_canWrite
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|d
operator|->
name|pipeWriter
argument_list|,
name|SIGNAL
argument_list|(
name|bytesWritten
argument_list|(
name|qint64
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|bytesWritten
argument_list|(
name|qint64
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|pipeWriter
operator|->
name|start
argument_list|()
expr_stmt|;
block|}
return|return
name|d
operator|->
name|pipeWriter
operator|->
name|write
argument_list|(
name|data
argument_list|,
name|maxSize
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|abort
name|void
name|QLocalSocket
operator|::
name|abort
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QLocalSocket
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|pipeWriter
condition|)
block|{
operator|delete
name|d
operator|->
name|pipeWriter
expr_stmt|;
name|d
operator|->
name|pipeWriter
operator|=
literal|0
expr_stmt|;
block|}
name|close
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal     Returns the number of available bytes in the pipe.     Sets QLocalSocketPrivate::pipeClosed to true if the connection is broken.  */
end_comment
begin_function
DECL|function|checkPipeState
name|DWORD
name|QLocalSocketPrivate
operator|::
name|checkPipeState
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QLocalSocket
argument_list|)
expr_stmt|;
name|DWORD
name|bytes
decl_stmt|;
if|if
condition|(
name|PeekNamedPipe
argument_list|(
name|handle
argument_list|,
name|NULL
argument_list|,
literal|0
argument_list|,
name|NULL
argument_list|,
operator|&
name|bytes
argument_list|,
name|NULL
argument_list|)
condition|)
block|{
return|return
name|bytes
return|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|pipeClosed
condition|)
block|{
name|pipeClosed
operator|=
literal|true
expr_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|0
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_pipeClosed
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|_q_pipeClosed
name|void
name|QLocalSocketPrivate
operator|::
name|_q_pipeClosed
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QLocalSocket
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
operator|==
name|QLocalSocket
operator|::
name|UnconnectedState
condition|)
return|return;
emit|emit
name|q
operator|->
name|readChannelFinished
argument_list|()
emit|;
if|if
condition|(
name|state
operator|!=
name|QLocalSocket
operator|::
name|ClosingState
condition|)
block|{
name|state
operator|=
name|QLocalSocket
operator|::
name|ClosingState
expr_stmt|;
emit|emit
name|q
operator|->
name|stateChanged
argument_list|(
name|state
argument_list|)
emit|;
if|if
condition|(
name|state
operator|!=
name|QLocalSocket
operator|::
name|ClosingState
condition|)
return|return;
block|}
name|state
operator|=
name|QLocalSocket
operator|::
name|UnconnectedState
expr_stmt|;
emit|emit
name|q
operator|->
name|stateChanged
argument_list|(
name|state
argument_list|)
emit|;
emit|emit
name|q
operator|->
name|disconnected
argument_list|()
emit|;
name|readSequenceStarted
operator|=
literal|false
expr_stmt|;
name|destroyPipeHandles
argument_list|()
expr_stmt|;
name|handle
operator|=
name|INVALID_HANDLE_VALUE
expr_stmt|;
name|ResetEvent
argument_list|(
name|overlapped
operator|.
name|hEvent
argument_list|)
expr_stmt|;
if|if
condition|(
name|pipeWriter
condition|)
block|{
operator|delete
name|pipeWriter
expr_stmt|;
name|pipeWriter
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|bytesAvailable
name|qint64
name|QLocalSocket
operator|::
name|bytesAvailable
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QLocalSocket
argument_list|)
expr_stmt|;
name|qint64
name|available
init|=
name|QIODevice
operator|::
name|bytesAvailable
argument_list|()
decl_stmt|;
name|available
operator|+=
operator|(
name|qint64
operator|)
name|d
operator|->
name|actualReadBufferSize
expr_stmt|;
return|return
name|available
return|;
block|}
end_function
begin_function
DECL|function|bytesToWrite
name|qint64
name|QLocalSocket
operator|::
name|bytesToWrite
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QLocalSocket
argument_list|)
expr_stmt|;
return|return
operator|(
name|d
operator|->
name|pipeWriter
operator|)
condition|?
name|d
operator|->
name|pipeWriter
operator|->
name|bytesToWrite
argument_list|()
else|:
literal|0
return|;
block|}
end_function
begin_function
DECL|function|canReadLine
name|bool
name|QLocalSocket
operator|::
name|canReadLine
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QLocalSocket
argument_list|)
expr_stmt|;
return|return
operator|(
name|QIODevice
operator|::
name|canReadLine
argument_list|()
operator|||
name|d
operator|->
name|readBuffer
operator|.
name|indexOf
argument_list|(
literal|'\n'
argument_list|,
name|d
operator|->
name|actualReadBufferSize
argument_list|)
operator|!=
operator|-
literal|1
operator|)
return|;
block|}
end_function
begin_function
DECL|function|close
name|void
name|QLocalSocket
operator|::
name|close
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QLocalSocket
argument_list|)
expr_stmt|;
if|if
condition|(
name|openMode
argument_list|()
operator|==
name|NotOpen
condition|)
return|return;
name|QIODevice
operator|::
name|close
argument_list|()
expr_stmt|;
name|d
operator|->
name|serverName
operator|=
name|QString
argument_list|()
expr_stmt|;
name|d
operator|->
name|fullServerName
operator|=
name|QString
argument_list|()
expr_stmt|;
if|if
condition|(
name|state
argument_list|()
operator|!=
name|UnconnectedState
condition|)
block|{
if|if
condition|(
name|bytesToWrite
argument_list|()
operator|>
literal|0
condition|)
block|{
name|disconnectFromServer
argument_list|()
expr_stmt|;
return|return;
block|}
name|d
operator|->
name|_q_pipeClosed
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|flush
name|bool
name|QLocalSocket
operator|::
name|flush
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QLocalSocket
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|pipeWriter
condition|)
return|return
name|d
operator|->
name|pipeWriter
operator|->
name|waitForWrite
argument_list|(
literal|0
argument_list|)
return|;
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|disconnectFromServer
name|void
name|QLocalSocket
operator|::
name|disconnectFromServer
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QLocalSocket
argument_list|)
expr_stmt|;
comment|// Are we still connected?
if|if
condition|(
operator|!
name|isValid
argument_list|()
condition|)
block|{
comment|// If we have unwritten data, the pipeWriter is still present.
comment|// It must be destroyed before close() to prevent an infinite loop.
operator|delete
name|d
operator|->
name|pipeWriter
expr_stmt|;
name|d
operator|->
name|pipeWriter
operator|=
literal|0
expr_stmt|;
block|}
name|flush
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|pipeWriter
operator|&&
name|d
operator|->
name|pipeWriter
operator|->
name|bytesToWrite
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|d
operator|->
name|state
operator|=
name|QLocalSocket
operator|::
name|ClosingState
expr_stmt|;
emit|emit
name|stateChanged
argument_list|(
name|d
operator|->
name|state
argument_list|)
emit|;
block|}
else|else
block|{
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|error
name|QLocalSocket
operator|::
name|LocalSocketError
name|QLocalSocket
operator|::
name|error
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QLocalSocket
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|error
return|;
block|}
end_function
begin_function
DECL|function|setSocketDescriptor
name|bool
name|QLocalSocket
operator|::
name|setSocketDescriptor
parameter_list|(
name|quintptr
name|socketDescriptor
parameter_list|,
name|LocalSocketState
name|socketState
parameter_list|,
name|OpenMode
name|openMode
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QLocalSocket
argument_list|)
expr_stmt|;
name|d
operator|->
name|readBuffer
operator|.
name|clear
argument_list|()
expr_stmt|;
name|d
operator|->
name|actualReadBufferSize
operator|=
literal|0
expr_stmt|;
name|QIODevice
operator|::
name|open
argument_list|(
name|openMode
argument_list|)
expr_stmt|;
name|d
operator|->
name|handle
operator|=
operator|(
name|int
operator|*
operator|)
name|socketDescriptor
expr_stmt|;
name|d
operator|->
name|state
operator|=
name|socketState
expr_stmt|;
name|d
operator|->
name|pipeClosed
operator|=
literal|false
expr_stmt|;
emit|emit
name|stateChanged
argument_list|(
name|d
operator|->
name|state
argument_list|)
emit|;
if|if
condition|(
name|d
operator|->
name|state
operator|==
name|ConnectedState
operator|&&
name|openMode
operator|.
name|testFlag
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
condition|)
name|d
operator|->
name|startAsyncRead
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|_q_canWrite
name|void
name|QLocalSocketPrivate
operator|::
name|_q_canWrite
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QLocalSocket
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
operator|==
name|QLocalSocket
operator|::
name|ClosingState
condition|)
name|q
operator|->
name|close
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|_q_notified
name|void
name|QLocalSocketPrivate
operator|::
name|_q_notified
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QLocalSocket
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|completeAsyncRead
argument_list|()
condition|)
block|{
name|pipeClosed
operator|=
literal|true
expr_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|0
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_pipeClosed
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|startAsyncRead
argument_list|()
expr_stmt|;
name|emitReadyReadTimer
operator|->
name|stop
argument_list|()
expr_stmt|;
emit|emit
name|q
operator|->
name|readyRead
argument_list|()
emit|;
block|}
end_function
begin_function
DECL|function|socketDescriptor
name|quintptr
name|QLocalSocket
operator|::
name|socketDescriptor
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QLocalSocket
argument_list|)
expr_stmt|;
return|return
operator|(
name|quintptr
operator|)
name|d
operator|->
name|handle
return|;
block|}
end_function
begin_function
DECL|function|readBufferSize
name|qint64
name|QLocalSocket
operator|::
name|readBufferSize
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QLocalSocket
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|readBufferMaxSize
return|;
block|}
end_function
begin_function
DECL|function|setReadBufferSize
name|void
name|QLocalSocket
operator|::
name|setReadBufferSize
parameter_list|(
name|qint64
name|size
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QLocalSocket
argument_list|)
expr_stmt|;
name|d
operator|->
name|readBufferMaxSize
operator|=
name|size
expr_stmt|;
block|}
end_function
begin_function
DECL|function|waitForConnected
name|bool
name|QLocalSocket
operator|::
name|waitForConnected
parameter_list|(
name|int
name|msecs
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|msecs
argument_list|)
expr_stmt|;
return|return
operator|(
name|state
argument_list|()
operator|==
name|ConnectedState
operator|)
return|;
block|}
end_function
begin_function
DECL|function|waitForDisconnected
name|bool
name|QLocalSocket
operator|::
name|waitForDisconnected
parameter_list|(
name|int
name|msecs
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QLocalSocket
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
argument_list|()
operator|==
name|UnconnectedState
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|openMode
argument_list|()
operator|.
name|testFlag
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"QLocalSocket::waitForDisconnected isn't supported for write only pipes."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|QIncrementalSleepTimer
name|timer
argument_list|(
name|msecs
argument_list|)
decl_stmt|;
forever|forever
block|{
name|d
operator|->
name|checkPipeState
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|pipeClosed
condition|)
name|d
operator|->
name|_q_pipeClosed
argument_list|()
expr_stmt|;
if|if
condition|(
name|state
argument_list|()
operator|==
name|UnconnectedState
condition|)
return|return
literal|true
return|;
name|Sleep
argument_list|(
name|timer
operator|.
name|nextSleepTime
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|timer
operator|.
name|hasTimedOut
argument_list|()
condition|)
break|break;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|isValid
name|bool
name|QLocalSocket
operator|::
name|isValid
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QLocalSocket
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|handle
operator|!=
name|INVALID_HANDLE_VALUE
return|;
block|}
end_function
begin_function
DECL|function|waitForReadyRead
name|bool
name|QLocalSocket
operator|::
name|waitForReadyRead
parameter_list|(
name|int
name|msecs
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QLocalSocket
argument_list|)
expr_stmt|;
if|if
condition|(
name|bytesAvailable
argument_list|()
operator|>
literal|0
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|d
operator|->
name|state
operator|!=
name|QLocalSocket
operator|::
name|ConnectedState
condition|)
return|return
literal|false
return|;
comment|// We already know that the pipe is gone, but did not enter the event loop yet.
if|if
condition|(
name|d
operator|->
name|pipeClosed
condition|)
block|{
name|d
operator|->
name|_q_pipeClosed
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
name|Q_ASSERT
argument_list|(
name|d
operator|->
name|readSequenceStarted
argument_list|)
expr_stmt|;
name|DWORD
name|result
init|=
name|WaitForSingleObject
argument_list|(
name|d
operator|->
name|overlapped
operator|.
name|hEvent
argument_list|,
name|msecs
operator|==
operator|-
literal|1
condition|?
name|INFINITE
else|:
name|msecs
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|result
condition|)
block|{
case|case
name|WAIT_OBJECT_0
case|:
name|d
operator|->
name|_q_notified
argument_list|()
expr_stmt|;
comment|// We just noticed that the pipe is gone.
if|if
condition|(
name|d
operator|->
name|pipeClosed
condition|)
block|{
name|d
operator|->
name|_q_pipeClosed
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
case|case
name|WAIT_TIMEOUT
case|:
return|return
literal|false
return|;
block|}
name|qWarning
argument_list|(
literal|"QLocalSocket::waitForReadyRead WaitForSingleObject failed with error code %d."
argument_list|,
name|int
argument_list|(
name|GetLastError
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|waitForBytesWritten
name|bool
name|QLocalSocket
operator|::
name|waitForBytesWritten
parameter_list|(
name|int
name|msecs
parameter_list|)
block|{
name|Q_D
argument_list|(
specifier|const
name|QLocalSocket
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|pipeWriter
condition|)
return|return
literal|false
return|;
comment|// Wait for the pipe writer to acknowledge that it has
comment|// written. This will succeed if either the pipe writer has
comment|// already written the data, or if it manages to write data
comment|// within the given timeout.
return|return
name|d
operator|->
name|pipeWriter
operator|->
name|waitForWrite
argument_list|(
name|msecs
argument_list|)
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
