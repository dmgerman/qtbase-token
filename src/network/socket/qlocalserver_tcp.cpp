begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtNetwork module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qlocalserver.h"
end_include
begin_include
include|#
directive|include
file|"qlocalserver_p.h"
end_include
begin_include
include|#
directive|include
file|"qlocalsocket.h"
end_include
begin_include
include|#
directive|include
file|"qlocalsocket_p.h"
end_include
begin_include
include|#
directive|include
file|<qhostaddress.h>
end_include
begin_include
include|#
directive|include
file|<qsettings.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|init
name|void
name|QLocalServerPrivate
operator|::
name|init
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QLocalServer
argument_list|)
expr_stmt|;
name|q
operator|->
name|connect
argument_list|(
operator|&
name|tcpServer
argument_list|,
name|SIGNAL
argument_list|(
name|newConnection
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|_q_onNewConnection
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|listen
name|bool
name|QLocalServerPrivate
operator|::
name|listen
parameter_list|(
specifier|const
name|QString
modifier|&
name|requestedServerName
parameter_list|)
block|{
if|if
condition|(
operator|!
name|tcpServer
operator|.
name|listen
argument_list|(
name|QHostAddress
operator|::
name|LocalHost
argument_list|)
condition|)
return|return
literal|false
return|;
specifier|const
name|QLatin1String
name|prefix
argument_list|(
literal|"QLocalServer/"
argument_list|)
decl_stmt|;
if|if
condition|(
name|requestedServerName
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
name|fullServerName
operator|=
name|requestedServerName
expr_stmt|;
else|else
name|fullServerName
operator|=
name|prefix
operator|+
name|requestedServerName
expr_stmt|;
name|QSettings
name|settings
argument_list|(
name|QLatin1String
argument_list|(
literal|"Trolltech"
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"Qt"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|settings
operator|.
name|contains
argument_list|(
name|fullServerName
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"QLocalServer::listen: server name is already in use."
argument_list|)
expr_stmt|;
name|tcpServer
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
name|settings
operator|.
name|setValue
argument_list|(
name|fullServerName
argument_list|,
name|tcpServer
operator|.
name|serverPort
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|closeServer
name|void
name|QLocalServerPrivate
operator|::
name|closeServer
parameter_list|()
block|{
name|QSettings
name|settings
argument_list|(
name|QLatin1String
argument_list|(
literal|"Trolltech"
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"Qt"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|fullServerName
operator|==
name|QLatin1String
argument_list|(
literal|"QLocalServer"
argument_list|)
condition|)
name|settings
operator|.
name|setValue
argument_list|(
name|fullServerName
argument_list|,
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|settings
operator|.
name|remove
argument_list|(
name|fullServerName
argument_list|)
expr_stmt|;
name|tcpServer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|waitForNewConnection
name|void
name|QLocalServerPrivate
operator|::
name|waitForNewConnection
parameter_list|(
name|int
name|msec
parameter_list|,
name|bool
modifier|*
name|timedOut
parameter_list|)
block|{
if|if
condition|(
name|pendingConnections
operator|.
name|isEmpty
argument_list|()
condition|)
name|tcpServer
operator|.
name|waitForNewConnection
argument_list|(
name|msec
argument_list|,
name|timedOut
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|timedOut
condition|)
operator|*
name|timedOut
operator|=
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|_q_onNewConnection
name|void
name|QLocalServerPrivate
operator|::
name|_q_onNewConnection
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QLocalServer
argument_list|)
expr_stmt|;
name|QTcpSocket
modifier|*
name|tcpSocket
init|=
name|tcpServer
operator|.
name|nextPendingConnection
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|tcpSocket
condition|)
block|{
name|qWarning
argument_list|(
literal|"QLocalServer: no pending connection"
argument_list|)
expr_stmt|;
return|return;
block|}
name|tcpSocket
operator|->
name|setParent
argument_list|(
name|q
argument_list|)
expr_stmt|;
specifier|const
name|quintptr
name|socketDescriptor
init|=
name|tcpSocket
operator|->
name|socketDescriptor
argument_list|()
decl_stmt|;
name|q
operator|->
name|incomingConnection
argument_list|(
name|socketDescriptor
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removeServer
name|bool
name|QLocalServerPrivate
operator|::
name|removeServer
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
block|{
specifier|const
name|QLatin1String
name|prefix
argument_list|(
literal|"QLocalServer/"
argument_list|)
decl_stmt|;
name|QString
name|serverName
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
name|serverName
operator|=
name|name
expr_stmt|;
else|else
name|serverName
operator|=
name|prefix
operator|+
name|name
expr_stmt|;
name|QSettings
name|settings
argument_list|(
name|QLatin1String
argument_list|(
literal|"Trolltech"
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"Qt"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|settings
operator|.
name|contains
argument_list|(
name|serverName
argument_list|)
condition|)
name|settings
operator|.
name|remove
argument_list|(
name|serverName
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
