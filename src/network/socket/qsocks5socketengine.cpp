begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtNetwork module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qsocks5socketengine_p.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_SOCKS5
end_ifndef
begin_include
include|#
directive|include
file|"qtcpsocket.h"
end_include
begin_include
include|#
directive|include
file|"qudpsocket.h"
end_include
begin_include
include|#
directive|include
file|"qtcpserver.h"
end_include
begin_include
include|#
directive|include
file|"qdebug.h"
end_include
begin_include
include|#
directive|include
file|"qhash.h"
end_include
begin_include
include|#
directive|include
file|"qqueue.h"
end_include
begin_include
include|#
directive|include
file|"qelapsedtimer.h"
end_include
begin_include
include|#
directive|include
file|"qmutex.h"
end_include
begin_include
include|#
directive|include
file|"qthread.h"
end_include
begin_include
include|#
directive|include
file|"qcoreapplication.h"
end_include
begin_include
include|#
directive|include
file|"qurl.h"
end_include
begin_include
include|#
directive|include
file|"qauthenticator.h"
end_include
begin_include
include|#
directive|include
file|<qendian.h>
end_include
begin_include
include|#
directive|include
file|<qnetworkinterface.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
ifdef|#
directive|ifdef
name|Q_OS_SYMBIAN
DECL|variable|MaxWriteBufferSize
specifier|static
specifier|const
name|int
name|MaxWriteBufferSize
init|=
literal|4
operator|*
literal|1024
decl_stmt|;
end_decl_stmt
begin_else
else|#
directive|else
end_else
begin_decl_stmt
specifier|static
specifier|const
name|int
name|MaxWriteBufferSize
init|=
literal|128
operator|*
literal|1024
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//#define QSOCKS5SOCKETLAYER_DEBUG
end_comment
begin_define
DECL|macro|MAX_DATA_DUMP
define|#
directive|define
name|MAX_DATA_DUMP
value|256
end_define
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
end_if
begin_define
DECL|macro|SOCKS5_BLOCKING_BIND_TIMEOUT
define|#
directive|define
name|SOCKS5_BLOCKING_BIND_TIMEOUT
value|5000
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|SOCKS5_BLOCKING_BIND_TIMEOUT
define|#
directive|define
name|SOCKS5_BLOCKING_BIND_TIMEOUT
value|10000
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_define
DECL|macro|Q_INIT_CHECK
define|#
directive|define
name|Q_INIT_CHECK
parameter_list|(
name|returnValue
parameter_list|)
value|do { \     if (!d->data) { \         return returnValue; \     } } while (0)
end_define
begin_define
DECL|macro|S5_VERSION_5
define|#
directive|define
name|S5_VERSION_5
value|0x05
end_define
begin_define
DECL|macro|S5_CONNECT
define|#
directive|define
name|S5_CONNECT
value|0x01
end_define
begin_define
DECL|macro|S5_BIND
define|#
directive|define
name|S5_BIND
value|0x02
end_define
begin_define
DECL|macro|S5_UDP_ASSOCIATE
define|#
directive|define
name|S5_UDP_ASSOCIATE
value|0x03
end_define
begin_define
DECL|macro|S5_IP_V4
define|#
directive|define
name|S5_IP_V4
value|0x01
end_define
begin_define
DECL|macro|S5_DOMAINNAME
define|#
directive|define
name|S5_DOMAINNAME
value|0x03
end_define
begin_define
DECL|macro|S5_IP_V6
define|#
directive|define
name|S5_IP_V6
value|0x04
end_define
begin_define
DECL|macro|S5_SUCCESS
define|#
directive|define
name|S5_SUCCESS
value|0x00
end_define
begin_define
DECL|macro|S5_R_ERROR_SOCKS_FAILURE
define|#
directive|define
name|S5_R_ERROR_SOCKS_FAILURE
value|0x01
end_define
begin_define
DECL|macro|S5_R_ERROR_CON_NOT_ALLOWED
define|#
directive|define
name|S5_R_ERROR_CON_NOT_ALLOWED
value|0x02
end_define
begin_define
DECL|macro|S5_R_ERROR_NET_UNREACH
define|#
directive|define
name|S5_R_ERROR_NET_UNREACH
value|0x03
end_define
begin_define
DECL|macro|S5_R_ERROR_HOST_UNREACH
define|#
directive|define
name|S5_R_ERROR_HOST_UNREACH
value|0x04
end_define
begin_define
DECL|macro|S5_R_ERROR_CONN_REFUSED
define|#
directive|define
name|S5_R_ERROR_CONN_REFUSED
value|0x05
end_define
begin_define
DECL|macro|S5_R_ERROR_TTL
define|#
directive|define
name|S5_R_ERROR_TTL
value|0x06
end_define
begin_define
DECL|macro|S5_R_ERROR_CMD_NOT_SUPPORTED
define|#
directive|define
name|S5_R_ERROR_CMD_NOT_SUPPORTED
value|0x07
end_define
begin_define
DECL|macro|S5_R_ERROR_ADD_TYPE_NOT_SUPORTED
define|#
directive|define
name|S5_R_ERROR_ADD_TYPE_NOT_SUPORTED
value|0x08
end_define
begin_define
DECL|macro|S5_AUTHMETHOD_NONE
define|#
directive|define
name|S5_AUTHMETHOD_NONE
value|0x00
end_define
begin_define
DECL|macro|S5_AUTHMETHOD_PASSWORD
define|#
directive|define
name|S5_AUTHMETHOD_PASSWORD
value|0x02
end_define
begin_define
DECL|macro|S5_AUTHMETHOD_NOTACCEPTABLE
define|#
directive|define
name|S5_AUTHMETHOD_NOTACCEPTABLE
value|0xFF
end_define
begin_define
DECL|macro|S5_PASSWORDAUTH_VERSION
define|#
directive|define
name|S5_PASSWORDAUTH_VERSION
value|0x01
end_define
begin_ifdef
ifdef|#
directive|ifdef
name|QSOCKS5SOCKETLAYER_DEBUG
end_ifdef
begin_define
DECL|macro|QSOCKS5_Q_DEBUG
define|#
directive|define
name|QSOCKS5_Q_DEBUG
value|qDebug()<< this
end_define
begin_define
DECL|macro|QSOCKS5_D_DEBUG
define|#
directive|define
name|QSOCKS5_D_DEBUG
value|qDebug()<< q_ptr
end_define
begin_define
DECL|macro|QSOCKS5_DEBUG
define|#
directive|define
name|QSOCKS5_DEBUG
value|qDebug()<< "[QSocks5]"
end_define
begin_function
DECL|function|s5StateToString
specifier|static
name|QString
name|s5StateToString
parameter_list|(
name|QSocks5SocketEnginePrivate
operator|::
name|Socks5State
name|s
parameter_list|)
block|{
switch|switch
condition|(
name|s
condition|)
block|{
case|case
name|QSocks5SocketEnginePrivate
operator|::
name|Uninitialized
case|:
return|return
name|QLatin1String
argument_list|(
literal|"Uninitialized"
argument_list|)
return|;
case|case
name|QSocks5SocketEnginePrivate
operator|::
name|ConnectError
case|:
return|return
name|QLatin1String
argument_list|(
literal|"ConnectError"
argument_list|)
return|;
case|case
name|QSocks5SocketEnginePrivate
operator|::
name|AuthenticationMethodsSent
case|:
return|return
name|QLatin1String
argument_list|(
literal|"AuthenticationMethodsSent"
argument_list|)
return|;
case|case
name|QSocks5SocketEnginePrivate
operator|::
name|Authenticating
case|:
return|return
name|QLatin1String
argument_list|(
literal|"Authenticating"
argument_list|)
return|;
case|case
name|QSocks5SocketEnginePrivate
operator|::
name|AuthenticatingError
case|:
return|return
name|QLatin1String
argument_list|(
literal|"AuthenticatingError"
argument_list|)
return|;
case|case
name|QSocks5SocketEnginePrivate
operator|::
name|RequestMethodSent
case|:
return|return
name|QLatin1String
argument_list|(
literal|"RequestMethodSent"
argument_list|)
return|;
case|case
name|QSocks5SocketEnginePrivate
operator|::
name|RequestError
case|:
return|return
name|QLatin1String
argument_list|(
literal|"RequestError"
argument_list|)
return|;
case|case
name|QSocks5SocketEnginePrivate
operator|::
name|Connected
case|:
return|return
name|QLatin1String
argument_list|(
literal|"Connected"
argument_list|)
return|;
case|case
name|QSocks5SocketEnginePrivate
operator|::
name|UdpAssociateSuccess
case|:
return|return
name|QLatin1String
argument_list|(
literal|"UdpAssociateSuccess"
argument_list|)
return|;
case|case
name|QSocks5SocketEnginePrivate
operator|::
name|BindSuccess
case|:
return|return
name|QLatin1String
argument_list|(
literal|"BindSuccess"
argument_list|)
return|;
case|case
name|QSocks5SocketEnginePrivate
operator|::
name|ControlSocketError
case|:
return|return
name|QLatin1String
argument_list|(
literal|"ControlSocketError"
argument_list|)
return|;
case|case
name|QSocks5SocketEnginePrivate
operator|::
name|SocksError
case|:
return|return
name|QLatin1String
argument_list|(
literal|"SocksError"
argument_list|)
return|;
case|case
name|QSocks5SocketEnginePrivate
operator|::
name|HostNameLookupError
case|:
return|return
name|QLatin1String
argument_list|(
literal|"HostNameLookupError"
argument_list|)
return|;
default|default:
break|break;
block|}
return|return
name|QLatin1String
argument_list|(
literal|"unknown state"
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|dump
specifier|static
name|QString
name|dump
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|buf
parameter_list|)
block|{
name|QString
name|data
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|qMin
argument_list|<
name|int
argument_list|>
argument_list|(
name|MAX_DATA_DUMP
argument_list|,
name|buf
operator|.
name|size
argument_list|()
argument_list|)
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|i
condition|)
name|data
operator|+=
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|uint
name|val
init|=
operator|(
name|unsigned
name|char
operator|)
name|buf
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// data += QString("0x%1").arg(val, 3, 16, QLatin1Char('0'));
name|data
operator|+=
name|QString
operator|::
name|number
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|buf
operator|.
name|size
argument_list|()
operator|>
name|MAX_DATA_DUMP
condition|)
name|data
operator|+=
name|QLatin1String
argument_list|(
literal|" ..."
argument_list|)
expr_stmt|;
return|return
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"size: %1 data: { %2 }"
argument_list|)
operator|.
name|arg
argument_list|(
name|buf
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|data
argument_list|)
return|;
block|}
end_function
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|QSOCKS5_DEBUG
define|#
directive|define
name|QSOCKS5_DEBUG
value|if (0) qDebug()
end_define
begin_define
DECL|macro|QSOCKS5_Q_DEBUG
define|#
directive|define
name|QSOCKS5_Q_DEBUG
value|if (0) qDebug()
end_define
begin_define
DECL|macro|QSOCKS5_D_DEBUG
define|#
directive|define
name|QSOCKS5_D_DEBUG
value|if (0) qDebug()
end_define
begin_function
DECL|function|s5StateToString
specifier|static
specifier|inline
name|QString
name|s5StateToString
parameter_list|(
name|QSocks5SocketEnginePrivate
operator|::
name|Socks5State
parameter_list|)
block|{
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|dump
specifier|static
specifier|inline
name|QString
name|dump
parameter_list|(
specifier|const
name|QByteArray
modifier|&
parameter_list|)
block|{
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*    inserts the host address in buf at pos and updates pos.    if the func fails the data in buf and the vallue of pos is undefined */
end_comment
begin_function
DECL|function|qt_socks5_set_host_address_and_port
specifier|static
name|bool
name|qt_socks5_set_host_address_and_port
parameter_list|(
specifier|const
name|QHostAddress
modifier|&
name|address
parameter_list|,
name|quint16
name|port
parameter_list|,
name|QByteArray
modifier|*
name|pBuf
parameter_list|)
block|{
name|QSOCKS5_DEBUG
operator|<<
literal|"setting ["
operator|<<
name|address
operator|<<
literal|':'
operator|<<
name|port
operator|<<
literal|']'
expr_stmt|;
union|union
block|{
name|quint16
name|port
decl_stmt|;
name|quint32
name|ipv4
decl_stmt|;
name|QIPv6Address
name|ipv6
decl_stmt|;
name|char
name|ptr
decl_stmt|;
block|}
name|data
union|;
comment|// add address
if|if
condition|(
name|address
operator|.
name|protocol
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|IPv4Protocol
condition|)
block|{
name|data
operator|.
name|ipv4
operator|=
name|qToBigEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|address
operator|.
name|toIPv4Address
argument_list|()
argument_list|)
expr_stmt|;
name|pBuf
operator|->
name|append
argument_list|(
name|S5_IP_V4
argument_list|)
expr_stmt|;
name|pBuf
operator|->
name|append
argument_list|(
name|QByteArray
operator|::
name|fromRawData
argument_list|(
operator|&
name|data
operator|.
name|ptr
argument_list|,
sizeof|sizeof
name|data
operator|.
name|ipv4
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|address
operator|.
name|protocol
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|IPv6Protocol
condition|)
block|{
name|data
operator|.
name|ipv6
operator|=
name|address
operator|.
name|toIPv6Address
argument_list|()
expr_stmt|;
name|pBuf
operator|->
name|append
argument_list|(
name|S5_IP_V6
argument_list|)
expr_stmt|;
name|pBuf
operator|->
name|append
argument_list|(
name|QByteArray
operator|::
name|fromRawData
argument_list|(
operator|&
name|data
operator|.
name|ptr
argument_list|,
sizeof|sizeof
name|data
operator|.
name|ipv6
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
comment|// add port
name|data
operator|.
name|port
operator|=
name|qToBigEndian
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|port
argument_list|)
expr_stmt|;
name|pBuf
operator|->
name|append
argument_list|(
name|QByteArray
operator|::
name|fromRawData
argument_list|(
operator|&
name|data
operator|.
name|ptr
argument_list|,
sizeof|sizeof
name|data
operator|.
name|port
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/*    like above, but for a hostname */
end_comment
begin_function
DECL|function|qt_socks5_set_host_name_and_port
specifier|static
name|bool
name|qt_socks5_set_host_name_and_port
parameter_list|(
specifier|const
name|QString
modifier|&
name|hostname
parameter_list|,
name|quint16
name|port
parameter_list|,
name|QByteArray
modifier|*
name|pBuf
parameter_list|)
block|{
name|QSOCKS5_DEBUG
operator|<<
literal|"setting ["
operator|<<
name|hostname
operator|<<
literal|':'
operator|<<
name|port
operator|<<
literal|']'
expr_stmt|;
name|QByteArray
name|encodedHostName
init|=
name|QUrl
operator|::
name|toAce
argument_list|(
name|hostname
argument_list|)
decl_stmt|;
name|QByteArray
modifier|&
name|buf
init|=
operator|*
name|pBuf
decl_stmt|;
if|if
condition|(
name|encodedHostName
operator|.
name|length
argument_list|()
operator|>
literal|255
condition|)
return|return
literal|false
return|;
name|buf
operator|.
name|append
argument_list|(
name|S5_DOMAINNAME
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|uchar
argument_list|(
name|encodedHostName
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|encodedHostName
argument_list|)
expr_stmt|;
comment|// add port
union|union
block|{
name|quint16
name|port
decl_stmt|;
name|char
name|ptr
decl_stmt|;
block|}
name|data
union|;
name|data
operator|.
name|port
operator|=
name|qToBigEndian
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|port
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|QByteArray
operator|::
name|fromRawData
argument_list|(
operator|&
name|data
operator|.
name|ptr
argument_list|,
sizeof|sizeof
name|data
operator|.
name|port
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/*    retrives the host address in buf at pos and updates pos.    if the func fails the value of the address and the pos is undefined */
end_comment
begin_function
DECL|function|qt_socks5_get_host_address_and_port
specifier|static
name|bool
name|qt_socks5_get_host_address_and_port
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|buf
parameter_list|,
name|QHostAddress
modifier|*
name|pAddress
parameter_list|,
name|quint16
modifier|*
name|pPort
parameter_list|,
name|int
modifier|*
name|pPos
parameter_list|)
block|{
name|bool
name|ret
init|=
literal|false
decl_stmt|;
name|int
name|pos
init|=
operator|*
name|pPos
decl_stmt|;
specifier|const
name|unsigned
name|char
modifier|*
name|pBuf
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|unsigned
name|char
operator|*
argument_list|>
argument_list|(
name|buf
operator|.
name|constData
argument_list|()
argument_list|)
decl_stmt|;
name|QHostAddress
name|address
decl_stmt|;
name|quint16
name|port
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|buf
operator|.
name|size
argument_list|()
operator|-
name|pos
operator|<
literal|1
condition|)
block|{
name|QSOCKS5_DEBUG
operator|<<
literal|"need more data address/port"
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|pBuf
index|[
name|pos
index|]
operator|==
name|S5_IP_V4
condition|)
block|{
name|pos
operator|++
expr_stmt|;
if|if
condition|(
name|buf
operator|.
name|size
argument_list|()
operator|-
name|pos
operator|<
literal|4
condition|)
block|{
name|QSOCKS5_DEBUG
operator|<<
literal|"need more data for ip4 address"
expr_stmt|;
return|return
literal|false
return|;
block|}
name|address
operator|.
name|setAddress
argument_list|(
name|qFromBigEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
operator|&
name|pBuf
index|[
name|pos
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|pos
operator|+=
literal|4
expr_stmt|;
name|ret
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pBuf
index|[
name|pos
index|]
operator|==
name|S5_IP_V6
condition|)
block|{
name|pos
operator|++
expr_stmt|;
if|if
condition|(
name|buf
operator|.
name|size
argument_list|()
operator|-
name|pos
operator|<
literal|16
condition|)
block|{
name|QSOCKS5_DEBUG
operator|<<
literal|"need more data for ip6 address"
expr_stmt|;
return|return
literal|false
return|;
block|}
name|QIPv6Address
name|add
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|16
condition|;
operator|++
name|i
control|)
name|add
index|[
name|i
index|]
operator|=
name|buf
index|[
name|pos
operator|++
index|]
expr_stmt|;
name|ret
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pBuf
index|[
name|pos
index|]
operator|==
name|S5_DOMAINNAME
condition|)
block|{
comment|// just skip it
name|pos
operator|++
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"skipping hostname of len"
operator|<<
name|uint
argument_list|(
name|pBuf
index|[
name|pos
index|]
argument_list|)
expr_stmt|;
name|pos
operator|+=
name|uchar
argument_list|(
name|pBuf
index|[
name|pos
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QSOCKS5_DEBUG
operator|<<
literal|"invalid address type"
operator|<<
operator|(
name|int
operator|)
name|pBuf
index|[
name|pos
index|]
expr_stmt|;
name|ret
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|ret
condition|)
block|{
if|if
condition|(
name|buf
operator|.
name|size
argument_list|()
operator|-
name|pos
operator|<
literal|2
condition|)
block|{
name|QSOCKS5_DEBUG
operator|<<
literal|"need more data for port"
expr_stmt|;
return|return
literal|false
return|;
block|}
name|port
operator|=
name|qFromBigEndian
argument_list|<
name|quint16
argument_list|>
argument_list|(
operator|&
name|pBuf
index|[
name|pos
index|]
argument_list|)
expr_stmt|;
name|pos
operator|+=
literal|2
expr_stmt|;
block|}
if|if
condition|(
name|ret
condition|)
block|{
name|QSOCKS5_DEBUG
operator|<<
literal|"got ["
operator|<<
name|address
operator|<<
literal|':'
operator|<<
name|port
operator|<<
literal|']'
expr_stmt|;
operator|*
name|pAddress
operator|=
name|address
expr_stmt|;
operator|*
name|pPort
operator|=
name|port
expr_stmt|;
operator|*
name|pPos
operator|=
name|pos
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
end_function
begin_comment
comment|/*    Returns the difference between msecs and elapsed. If msecs is -1,    however, -1 is returned. */
end_comment
begin_function
DECL|function|qt_timeout_value
specifier|static
name|int
name|qt_timeout_value
parameter_list|(
name|int
name|msecs
parameter_list|,
name|int
name|elapsed
parameter_list|)
block|{
if|if
condition|(
name|msecs
operator|==
operator|-
literal|1
condition|)
return|return
operator|-
literal|1
return|;
name|int
name|timeout
init|=
name|msecs
operator|-
name|elapsed
decl_stmt|;
return|return
name|timeout
operator|<
literal|0
condition|?
literal|0
else|:
name|timeout
return|;
block|}
end_function
begin_struct
DECL|struct|QSocks5Data
struct|struct
name|QSocks5Data
block|{
DECL|member|controlSocket
name|QTcpSocket
modifier|*
name|controlSocket
decl_stmt|;
DECL|member|authenticator
name|QSocks5Authenticator
modifier|*
name|authenticator
decl_stmt|;
block|}
struct|;
end_struct
begin_struct
DECL|struct|QSocks5ConnectData
struct|struct
name|QSocks5ConnectData
super|:
specifier|public
name|QSocks5Data
block|{
DECL|member|readBuffer
name|QByteArray
name|readBuffer
decl_stmt|;
block|}
struct|;
end_struct
begin_struct
DECL|struct|QSocks5BindData
struct|struct
name|QSocks5BindData
super|:
specifier|public
name|QSocks5Data
block|{
DECL|member|localAddress
name|QHostAddress
name|localAddress
decl_stmt|;
DECL|member|localPort
name|quint16
name|localPort
decl_stmt|;
DECL|member|peerAddress
name|QHostAddress
name|peerAddress
decl_stmt|;
DECL|member|peerPort
name|quint16
name|peerPort
decl_stmt|;
DECL|member|timeStamp
name|QElapsedTimer
name|timeStamp
decl_stmt|;
block|}
struct|;
end_struct
begin_struct
DECL|struct|QSocks5RevivedDatagram
struct|struct
name|QSocks5RevivedDatagram
block|{
DECL|member|data
name|QByteArray
name|data
decl_stmt|;
DECL|member|address
name|QHostAddress
name|address
decl_stmt|;
DECL|member|port
name|quint16
name|port
decl_stmt|;
block|}
struct|;
end_struct
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_UDPSOCKET
end_ifndef
begin_struct
DECL|struct|QSocks5UdpAssociateData
struct|struct
name|QSocks5UdpAssociateData
super|:
specifier|public
name|QSocks5Data
block|{
DECL|member|udpSocket
name|QUdpSocket
modifier|*
name|udpSocket
decl_stmt|;
DECL|member|associateAddress
name|QHostAddress
name|associateAddress
decl_stmt|;
DECL|member|associatePort
name|quint16
name|associatePort
decl_stmt|;
DECL|member|pendingDatagrams
name|QQueue
argument_list|<
name|QSocks5RevivedDatagram
argument_list|>
name|pendingDatagrams
decl_stmt|;
block|}
struct|;
end_struct
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// needs to be thread safe
end_comment
begin_class
DECL|class|QSocks5BindStore
class|class
name|QSocks5BindStore
super|:
specifier|public
name|QObject
block|{
public|public:
name|QSocks5BindStore
parameter_list|()
constructor_decl|;
name|~
name|QSocks5BindStore
parameter_list|()
destructor_decl|;
name|void
name|add
parameter_list|(
name|int
name|socketDescriptor
parameter_list|,
name|QSocks5BindData
modifier|*
name|bindData
parameter_list|)
function_decl|;
name|bool
name|contains
parameter_list|(
name|int
name|socketDescriptor
parameter_list|)
function_decl|;
name|QSocks5BindData
modifier|*
name|retrieve
parameter_list|(
name|int
name|socketDescriptor
parameter_list|)
function_decl|;
protected|protected:
name|void
name|timerEvent
parameter_list|(
name|QTimerEvent
modifier|*
name|event
parameter_list|)
function_decl|;
DECL|member|mutex
name|QMutex
name|mutex
decl_stmt|;
DECL|member|sweepTimerId
name|int
name|sweepTimerId
decl_stmt|;
comment|//socket descriptor, data, timestamp
DECL|member|store
name|QHash
argument_list|<
name|int
argument_list|,
name|QSocks5BindData
modifier|*
argument_list|>
name|store
decl_stmt|;
block|}
class|;
end_class
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|QSocks5BindStore
argument_list|,
argument|socks5BindStore
argument_list|)
end_macro
begin_constructor
DECL|function|QSocks5BindStore
name|QSocks5BindStore
operator|::
name|QSocks5BindStore
parameter_list|()
member_init_list|:
name|mutex
argument_list|(
name|QMutex
operator|::
name|Recursive
argument_list|)
member_init_list|,
name|sweepTimerId
argument_list|(
operator|-
literal|1
argument_list|)
block|{
name|QCoreApplication
modifier|*
name|app
init|=
name|QCoreApplication
operator|::
name|instance
argument_list|()
decl_stmt|;
if|if
condition|(
name|app
operator|&&
name|app
operator|->
name|thread
argument_list|()
operator|!=
name|thread
argument_list|()
condition|)
name|moveToThread
argument_list|(
name|app
operator|->
name|thread
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QSocks5BindStore
name|QSocks5BindStore
operator|::
name|~
name|QSocks5BindStore
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|add
name|void
name|QSocks5BindStore
operator|::
name|add
parameter_list|(
name|int
name|socketDescriptor
parameter_list|,
name|QSocks5BindData
modifier|*
name|bindData
parameter_list|)
block|{
name|QMutexLocker
name|lock
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
if|if
condition|(
name|store
operator|.
name|contains
argument_list|(
name|socketDescriptor
argument_list|)
condition|)
block|{
comment|// qDebug()<< "delete it";
block|}
name|bindData
operator|->
name|timeStamp
operator|.
name|start
argument_list|()
expr_stmt|;
name|store
operator|.
name|insert
argument_list|(
name|socketDescriptor
argument_list|,
name|bindData
argument_list|)
expr_stmt|;
comment|// start sweep timer if not started
if|if
condition|(
name|sweepTimerId
operator|==
operator|-
literal|1
condition|)
name|sweepTimerId
operator|=
name|startTimer
argument_list|(
literal|60000
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|contains
name|bool
name|QSocks5BindStore
operator|::
name|contains
parameter_list|(
name|int
name|socketDescriptor
parameter_list|)
block|{
name|QMutexLocker
name|lock
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
return|return
name|store
operator|.
name|contains
argument_list|(
name|socketDescriptor
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|retrieve
name|QSocks5BindData
modifier|*
name|QSocks5BindStore
operator|::
name|retrieve
parameter_list|(
name|int
name|socketDescriptor
parameter_list|)
block|{
name|QMutexLocker
name|lock
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|store
operator|.
name|contains
argument_list|(
name|socketDescriptor
argument_list|)
condition|)
return|return
literal|0
return|;
name|QSocks5BindData
modifier|*
name|bindData
init|=
name|store
operator|.
name|take
argument_list|(
name|socketDescriptor
argument_list|)
decl_stmt|;
if|if
condition|(
name|bindData
condition|)
block|{
if|if
condition|(
name|bindData
operator|->
name|controlSocket
operator|->
name|thread
argument_list|()
operator|!=
name|QThread
operator|::
name|currentThread
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"Can not access socks5 bind data from different thread"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
else|else
block|{
name|QSOCKS5_DEBUG
operator|<<
literal|"__ERROR__ binddata == 0"
expr_stmt|;
block|}
comment|// stop the sweep timer if not needed
if|if
condition|(
name|store
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|killTimer
argument_list|(
name|sweepTimerId
argument_list|)
expr_stmt|;
name|sweepTimerId
operator|=
operator|-
literal|1
expr_stmt|;
block|}
return|return
name|bindData
return|;
block|}
end_function
begin_function
DECL|function|timerEvent
name|void
name|QSocks5BindStore
operator|::
name|timerEvent
parameter_list|(
name|QTimerEvent
modifier|*
name|event
parameter_list|)
block|{
name|QMutexLocker
name|lock
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
if|if
condition|(
name|event
operator|->
name|timerId
argument_list|()
operator|==
name|sweepTimerId
condition|)
block|{
name|QSOCKS5_DEBUG
operator|<<
literal|"QSocks5BindStore performing sweep"
expr_stmt|;
name|QMutableHashIterator
argument_list|<
name|int
argument_list|,
name|QSocks5BindData
modifier|*
argument_list|>
name|it
argument_list|(
name|store
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|it
operator|.
name|value
argument_list|()
operator|->
name|timeStamp
operator|.
name|hasExpired
argument_list|(
literal|350000
argument_list|)
condition|)
block|{
name|QSOCKS5_DEBUG
operator|<<
literal|"QSocks5BindStore removing JJJJ"
expr_stmt|;
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_function
begin_constructor
DECL|function|QSocks5Authenticator
name|QSocks5Authenticator
operator|::
name|QSocks5Authenticator
parameter_list|()
block|{ }
end_constructor
begin_destructor
DECL|function|~QSocks5Authenticator
name|QSocks5Authenticator
operator|::
name|~
name|QSocks5Authenticator
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|methodId
name|char
name|QSocks5Authenticator
operator|::
name|methodId
parameter_list|()
block|{
return|return
literal|0x00
return|;
block|}
end_function
begin_function
DECL|function|beginAuthenticate
name|bool
name|QSocks5Authenticator
operator|::
name|beginAuthenticate
parameter_list|(
name|QTcpSocket
modifier|*
name|socket
parameter_list|,
name|bool
modifier|*
name|completed
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|socket
argument_list|)
expr_stmt|;
operator|*
name|completed
operator|=
literal|true
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|continueAuthenticate
name|bool
name|QSocks5Authenticator
operator|::
name|continueAuthenticate
parameter_list|(
name|QTcpSocket
modifier|*
name|socket
parameter_list|,
name|bool
modifier|*
name|completed
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|socket
argument_list|)
expr_stmt|;
operator|*
name|completed
operator|=
literal|true
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|seal
name|bool
name|QSocks5Authenticator
operator|::
name|seal
parameter_list|(
specifier|const
name|QByteArray
name|buf
parameter_list|,
name|QByteArray
modifier|*
name|sealedBuf
parameter_list|)
block|{
operator|*
name|sealedBuf
operator|=
name|buf
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|unSeal
name|bool
name|QSocks5Authenticator
operator|::
name|unSeal
parameter_list|(
specifier|const
name|QByteArray
name|sealedBuf
parameter_list|,
name|QByteArray
modifier|*
name|buf
parameter_list|)
block|{
operator|*
name|buf
operator|=
name|sealedBuf
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|unSeal
name|bool
name|QSocks5Authenticator
operator|::
name|unSeal
parameter_list|(
name|QTcpSocket
modifier|*
name|sealedSocket
parameter_list|,
name|QByteArray
modifier|*
name|buf
parameter_list|)
block|{
return|return
name|unSeal
argument_list|(
name|sealedSocket
operator|->
name|readAll
argument_list|()
argument_list|,
name|buf
argument_list|)
return|;
block|}
end_function
begin_constructor
DECL|function|QSocks5PasswordAuthenticator
name|QSocks5PasswordAuthenticator
operator|::
name|QSocks5PasswordAuthenticator
parameter_list|(
specifier|const
name|QString
modifier|&
name|userName
parameter_list|,
specifier|const
name|QString
modifier|&
name|password
parameter_list|)
block|{
name|this
operator|->
name|userName
operator|=
name|userName
expr_stmt|;
name|this
operator|->
name|password
operator|=
name|password
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|methodId
name|char
name|QSocks5PasswordAuthenticator
operator|::
name|methodId
parameter_list|()
block|{
return|return
literal|0x02
return|;
block|}
end_function
begin_function
DECL|function|beginAuthenticate
name|bool
name|QSocks5PasswordAuthenticator
operator|::
name|beginAuthenticate
parameter_list|(
name|QTcpSocket
modifier|*
name|socket
parameter_list|,
name|bool
modifier|*
name|completed
parameter_list|)
block|{
operator|*
name|completed
operator|=
literal|false
expr_stmt|;
name|QByteArray
name|uname
init|=
name|userName
operator|.
name|toLatin1
argument_list|()
decl_stmt|;
name|QByteArray
name|passwd
init|=
name|password
operator|.
name|toLatin1
argument_list|()
decl_stmt|;
name|QByteArray
name|dataBuf
argument_list|(
literal|3
operator|+
name|uname
operator|.
name|size
argument_list|()
operator|+
name|passwd
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|char
modifier|*
name|buf
init|=
name|dataBuf
operator|.
name|data
argument_list|()
decl_stmt|;
name|int
name|pos
init|=
literal|0
decl_stmt|;
name|buf
index|[
name|pos
operator|++
index|]
operator|=
name|S5_PASSWORDAUTH_VERSION
expr_stmt|;
name|buf
index|[
name|pos
operator|++
index|]
operator|=
name|uname
operator|.
name|size
argument_list|()
expr_stmt|;
name|memcpy
argument_list|(
operator|&
name|buf
index|[
name|pos
index|]
argument_list|,
name|uname
operator|.
name|data
argument_list|()
argument_list|,
name|uname
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|pos
operator|+=
name|uname
operator|.
name|size
argument_list|()
expr_stmt|;
name|buf
index|[
name|pos
operator|++
index|]
operator|=
name|passwd
operator|.
name|size
argument_list|()
expr_stmt|;
name|memcpy
argument_list|(
operator|&
name|buf
index|[
name|pos
index|]
argument_list|,
name|passwd
operator|.
name|data
argument_list|()
argument_list|,
name|passwd
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|socket
operator|->
name|write
argument_list|(
name|dataBuf
argument_list|)
operator|==
name|dataBuf
operator|.
name|size
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|continueAuthenticate
name|bool
name|QSocks5PasswordAuthenticator
operator|::
name|continueAuthenticate
parameter_list|(
name|QTcpSocket
modifier|*
name|socket
parameter_list|,
name|bool
modifier|*
name|completed
parameter_list|)
block|{
operator|*
name|completed
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|socket
operator|->
name|bytesAvailable
argument_list|()
operator|<
literal|2
condition|)
return|return
literal|true
return|;
name|QByteArray
name|buf
init|=
name|socket
operator|->
name|read
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|buf
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|==
name|S5_PASSWORDAUTH_VERSION
operator|&&
name|buf
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|==
literal|0x00
condition|)
block|{
operator|*
name|completed
operator|=
literal|true
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|// must disconnect
name|socket
operator|->
name|close
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|errorString
name|QString
name|QSocks5PasswordAuthenticator
operator|::
name|errorString
parameter_list|()
block|{
return|return
name|QLatin1String
argument_list|(
literal|"Socks5 user name or password incorrect"
argument_list|)
return|;
block|}
end_function
begin_constructor
DECL|function|QSocks5SocketEnginePrivate
name|QSocks5SocketEnginePrivate
operator|::
name|QSocks5SocketEnginePrivate
parameter_list|()
member_init_list|:
name|socks5State
argument_list|(
name|Uninitialized
argument_list|)
member_init_list|,
name|readNotificationEnabled
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|writeNotificationEnabled
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|exceptNotificationEnabled
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|socketDescriptor
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|data
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|connectData
argument_list|(
literal|0
argument_list|)
ifndef|#
directive|ifndef
name|QT_NO_UDPSOCKET
member_init_list|,
name|udpData
argument_list|(
literal|0
argument_list|)
endif|#
directive|endif
member_init_list|,
name|bindData
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|readNotificationActivated
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|writeNotificationActivated
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|readNotificationPending
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|writeNotificationPending
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|connectionNotificationPending
argument_list|(
literal|false
argument_list|)
block|{
name|mode
operator|=
name|NoMode
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QSocks5SocketEnginePrivate
name|QSocks5SocketEnginePrivate
operator|::
name|~
name|QSocks5SocketEnginePrivate
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|initialize
name|void
name|QSocks5SocketEnginePrivate
operator|::
name|initialize
parameter_list|(
name|Socks5Mode
name|socks5Mode
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QSocks5SocketEngine
argument_list|)
expr_stmt|;
name|mode
operator|=
name|socks5Mode
expr_stmt|;
if|if
condition|(
name|mode
operator|==
name|ConnectMode
condition|)
block|{
name|connectData
operator|=
operator|new
name|QSocks5ConnectData
expr_stmt|;
name|data
operator|=
name|connectData
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_UDPSOCKET
block|}
elseif|else
if|if
condition|(
name|mode
operator|==
name|UdpAssociateMode
condition|)
block|{
name|udpData
operator|=
operator|new
name|QSocks5UdpAssociateData
expr_stmt|;
name|data
operator|=
name|udpData
expr_stmt|;
name|udpData
operator|->
name|udpSocket
operator|=
operator|new
name|QUdpSocket
argument_list|(
name|q
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_BEARERMANAGEMENT
name|udpData
operator|->
name|udpSocket
operator|->
name|setProperty
argument_list|(
literal|"_q_networksession"
argument_list|,
name|q
operator|->
name|property
argument_list|(
literal|"_q_networksession"
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|udpData
operator|->
name|udpSocket
operator|->
name|setProxy
argument_list|(
name|QNetworkProxy
operator|::
name|NoProxy
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|udpData
operator|->
name|udpSocket
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_udpSocketReadNotification
argument_list|()
argument_list|)
argument_list|,
name|Qt
operator|::
name|DirectConnection
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// QT_NO_UDPSOCKET
block|}
elseif|else
if|if
condition|(
name|mode
operator|==
name|BindMode
condition|)
block|{
name|bindData
operator|=
operator|new
name|QSocks5BindData
expr_stmt|;
name|data
operator|=
name|bindData
expr_stmt|;
block|}
name|data
operator|->
name|controlSocket
operator|=
operator|new
name|QTcpSocket
argument_list|(
name|q
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_BEARERMANAGEMENT
name|data
operator|->
name|controlSocket
operator|->
name|setProperty
argument_list|(
literal|"_q_networksession"
argument_list|,
name|q
operator|->
name|property
argument_list|(
literal|"_q_networksession"
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|data
operator|->
name|controlSocket
operator|->
name|setProxy
argument_list|(
name|QNetworkProxy
operator|::
name|NoProxy
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|data
operator|->
name|controlSocket
argument_list|,
name|SIGNAL
argument_list|(
name|connected
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_controlSocketConnected
argument_list|()
argument_list|)
argument_list|,
name|Qt
operator|::
name|DirectConnection
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|data
operator|->
name|controlSocket
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_controlSocketReadNotification
argument_list|()
argument_list|)
argument_list|,
name|Qt
operator|::
name|DirectConnection
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|data
operator|->
name|controlSocket
argument_list|,
name|SIGNAL
argument_list|(
name|bytesWritten
argument_list|(
name|qint64
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_controlSocketBytesWritten
argument_list|()
argument_list|)
argument_list|,
name|Qt
operator|::
name|DirectConnection
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|data
operator|->
name|controlSocket
argument_list|,
name|SIGNAL
argument_list|(
name|error
argument_list|(
name|QAbstractSocket
operator|::
name|SocketError
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_controlSocketError
argument_list|(
name|QAbstractSocket
operator|::
name|SocketError
argument_list|)
argument_list|)
argument_list|,
name|Qt
operator|::
name|DirectConnection
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|data
operator|->
name|controlSocket
argument_list|,
name|SIGNAL
argument_list|(
name|disconnected
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_controlSocketDisconnected
argument_list|()
argument_list|)
argument_list|,
name|Qt
operator|::
name|DirectConnection
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|data
operator|->
name|controlSocket
argument_list|,
name|SIGNAL
argument_list|(
name|stateChanged
argument_list|(
name|QAbstractSocket
operator|::
name|SocketState
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_controlSocketStateChanged
argument_list|(
name|QAbstractSocket
operator|::
name|SocketState
argument_list|)
argument_list|)
argument_list|,
name|Qt
operator|::
name|DirectConnection
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|proxyInfo
operator|.
name|user
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|proxyInfo
operator|.
name|password
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QSOCKS5_D_DEBUG
operator|<<
literal|"using username/password authentication; user ="
operator|<<
name|proxyInfo
operator|.
name|user
argument_list|()
expr_stmt|;
name|data
operator|->
name|authenticator
operator|=
operator|new
name|QSocks5PasswordAuthenticator
argument_list|(
name|proxyInfo
operator|.
name|user
argument_list|()
argument_list|,
name|proxyInfo
operator|.
name|password
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QSOCKS5_D_DEBUG
operator|<<
literal|"not using authentication"
expr_stmt|;
name|data
operator|->
name|authenticator
operator|=
operator|new
name|QSocks5Authenticator
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setErrorState
name|void
name|QSocks5SocketEnginePrivate
operator|::
name|setErrorState
parameter_list|(
name|Socks5State
name|state
parameter_list|,
specifier|const
name|QString
modifier|&
name|extraMessage
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QSocks5SocketEngine
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|state
condition|)
block|{
case|case
name|Uninitialized
case|:
case|case
name|Authenticating
case|:
case|case
name|AuthenticationMethodsSent
case|:
case|case
name|RequestMethodSent
case|:
case|case
name|Connected
case|:
case|case
name|UdpAssociateSuccess
case|:
case|case
name|BindSuccess
case|:
comment|// these aren't error states
return|return;
case|case
name|ConnectError
case|:
case|case
name|ControlSocketError
case|:
block|{
name|QAbstractSocket
operator|::
name|SocketError
name|controlSocketError
init|=
name|data
operator|->
name|controlSocket
operator|->
name|error
argument_list|()
decl_stmt|;
if|if
condition|(
name|socks5State
operator|!=
name|Connected
condition|)
block|{
switch|switch
condition|(
name|controlSocketError
condition|)
block|{
case|case
name|QAbstractSocket
operator|::
name|ConnectionRefusedError
case|:
name|q
operator|->
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|ProxyConnectionRefusedError
argument_list|,
name|QSocks5SocketEngine
operator|::
name|tr
argument_list|(
literal|"Connection to proxy refused"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QAbstractSocket
operator|::
name|RemoteHostClosedError
case|:
name|q
operator|->
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|ProxyConnectionClosedError
argument_list|,
name|QSocks5SocketEngine
operator|::
name|tr
argument_list|(
literal|"Connection to proxy closed prematurely"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QAbstractSocket
operator|::
name|HostNotFoundError
case|:
name|q
operator|->
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|ProxyNotFoundError
argument_list|,
name|QSocks5SocketEngine
operator|::
name|tr
argument_list|(
literal|"Proxy host not found"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QAbstractSocket
operator|::
name|SocketTimeoutError
case|:
if|if
condition|(
name|state
operator|==
name|ConnectError
condition|)
block|{
name|q
operator|->
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|ProxyConnectionTimeoutError
argument_list|,
name|QSocks5SocketEngine
operator|::
name|tr
argument_list|(
literal|"Connection to proxy timed out"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
comment|/* fall through */
default|default:
name|q
operator|->
name|setError
argument_list|(
name|controlSocketError
argument_list|,
name|data
operator|->
name|controlSocket
operator|->
name|errorString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
else|else
block|{
name|q
operator|->
name|setError
argument_list|(
name|controlSocketError
argument_list|,
name|data
operator|->
name|controlSocket
operator|->
name|errorString
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|AuthenticatingError
case|:
name|q
operator|->
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|ProxyAuthenticationRequiredError
argument_list|,
name|extraMessage
operator|.
name|isEmpty
argument_list|()
condition|?
name|QSocks5SocketEngine
operator|::
name|tr
argument_list|(
literal|"Proxy authentication failed"
argument_list|)
else|:
name|QSocks5SocketEngine
operator|::
name|tr
argument_list|(
literal|"Proxy authentication failed: %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|extraMessage
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|RequestError
case|:
comment|// error code set by caller (overload)
break|break;
case|case
name|SocksError
case|:
name|q
operator|->
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|ProxyProtocolError
argument_list|,
name|QSocks5SocketEngine
operator|::
name|tr
argument_list|(
literal|"SOCKS version 5 protocol error"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|HostNameLookupError
case|:
name|q
operator|->
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|HostNotFoundError
argument_list|,
name|QAbstractSocket
operator|::
name|tr
argument_list|(
literal|"Host not found"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
name|q
operator|->
name|setState
argument_list|(
name|QAbstractSocket
operator|::
name|UnconnectedState
argument_list|)
expr_stmt|;
name|socks5State
operator|=
name|state
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setErrorState
name|void
name|QSocks5SocketEnginePrivate
operator|::
name|setErrorState
parameter_list|(
name|Socks5State
name|state
parameter_list|,
name|Socks5Error
name|socks5error
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QSocks5SocketEngine
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|socks5error
condition|)
block|{
case|case
name|SocksFailure
case|:
name|q
operator|->
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|NetworkError
argument_list|,
name|QSocks5SocketEngine
operator|::
name|tr
argument_list|(
literal|"General SOCKSv5 server failure"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|ConnectionNotAllowed
case|:
name|q
operator|->
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|SocketAccessError
argument_list|,
name|QSocks5SocketEngine
operator|::
name|tr
argument_list|(
literal|"Connection not allowed by SOCKSv5 server"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|NetworkUnreachable
case|:
name|q
operator|->
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|NetworkError
argument_list|,
name|QAbstractSocket
operator|::
name|tr
argument_list|(
literal|"Network unreachable"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|HostUnreachable
case|:
name|q
operator|->
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|HostNotFoundError
argument_list|,
name|QAbstractSocket
operator|::
name|tr
argument_list|(
literal|"Host not found"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|ConnectionRefused
case|:
name|q
operator|->
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|ConnectionRefusedError
argument_list|,
name|QAbstractSocket
operator|::
name|tr
argument_list|(
literal|"Connection refused"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|TTLExpired
case|:
name|q
operator|->
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|NetworkError
argument_list|,
name|QSocks5SocketEngine
operator|::
name|tr
argument_list|(
literal|"TTL expired"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|CommandNotSupported
case|:
name|q
operator|->
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|UnsupportedSocketOperationError
argument_list|,
name|QSocks5SocketEngine
operator|::
name|tr
argument_list|(
literal|"SOCKSv5 command not supported"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|AddressTypeNotSupported
case|:
name|q
operator|->
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|UnsupportedSocketOperationError
argument_list|,
name|QSocks5SocketEngine
operator|::
name|tr
argument_list|(
literal|"Address type not supported"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
name|q
operator|->
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|UnknownSocketError
argument_list|,
name|QSocks5SocketEngine
operator|::
name|tr
argument_list|(
literal|"Unknown SOCKSv5 proxy error code 0x%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|int
argument_list|(
name|socks5error
argument_list|)
argument_list|,
literal|16
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
name|setErrorState
argument_list|(
name|state
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|reauthenticate
name|void
name|QSocks5SocketEnginePrivate
operator|::
name|reauthenticate
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QSocks5SocketEngine
argument_list|)
expr_stmt|;
comment|// we require authentication
name|QAuthenticator
name|auth
decl_stmt|;
emit|emit
name|q
operator|->
name|proxyAuthenticationRequired
argument_list|(
name|proxyInfo
argument_list|,
operator|&
name|auth
argument_list|)
emit|;
if|if
condition|(
operator|!
name|auth
operator|.
name|user
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|auth
operator|.
name|password
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// we have new credentials, let's try again
name|QSOCKS5_DEBUG
operator|<<
literal|"authentication failure: retrying connection"
expr_stmt|;
name|socks5State
operator|=
name|QSocks5SocketEnginePrivate
operator|::
name|Uninitialized
expr_stmt|;
operator|delete
name|data
operator|->
name|authenticator
expr_stmt|;
name|proxyInfo
operator|.
name|setUser
argument_list|(
name|auth
operator|.
name|user
argument_list|()
argument_list|)
expr_stmt|;
name|proxyInfo
operator|.
name|setPassword
argument_list|(
name|auth
operator|.
name|password
argument_list|()
argument_list|)
expr_stmt|;
name|data
operator|->
name|authenticator
operator|=
operator|new
name|QSocks5PasswordAuthenticator
argument_list|(
name|proxyInfo
operator|.
name|user
argument_list|()
argument_list|,
name|proxyInfo
operator|.
name|password
argument_list|()
argument_list|)
expr_stmt|;
name|data
operator|->
name|controlSocket
operator|->
name|blockSignals
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|data
operator|->
name|controlSocket
operator|->
name|abort
argument_list|()
expr_stmt|;
name|data
operator|->
name|controlSocket
operator|->
name|blockSignals
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|data
operator|->
name|controlSocket
operator|->
name|connectToHost
argument_list|(
name|proxyInfo
operator|.
name|hostName
argument_list|()
argument_list|,
name|proxyInfo
operator|.
name|port
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// authentication failure
name|setErrorState
argument_list|(
name|AuthenticatingError
argument_list|)
expr_stmt|;
name|data
operator|->
name|controlSocket
operator|->
name|close
argument_list|()
expr_stmt|;
name|emitConnectionNotification
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|parseAuthenticationMethodReply
name|void
name|QSocks5SocketEnginePrivate
operator|::
name|parseAuthenticationMethodReply
parameter_list|()
block|{
comment|// not enough data to begin
if|if
condition|(
name|data
operator|->
name|controlSocket
operator|->
name|bytesAvailable
argument_list|()
operator|<
literal|2
condition|)
return|return;
name|QByteArray
name|buf
init|=
name|data
operator|->
name|controlSocket
operator|->
name|read
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|buf
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|!=
name|S5_VERSION_5
condition|)
block|{
name|QSOCKS5_D_DEBUG
operator|<<
literal|"Socks5 version incorrect"
expr_stmt|;
name|setErrorState
argument_list|(
name|SocksError
argument_list|)
expr_stmt|;
name|data
operator|->
name|controlSocket
operator|->
name|close
argument_list|()
expr_stmt|;
name|emitConnectionNotification
argument_list|()
expr_stmt|;
return|return;
block|}
name|bool
name|authComplete
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|uchar
argument_list|(
name|buf
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|==
name|S5_AUTHMETHOD_NONE
condition|)
block|{
name|authComplete
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|uchar
argument_list|(
name|buf
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|==
name|S5_AUTHMETHOD_NOTACCEPTABLE
condition|)
block|{
name|reauthenticate
argument_list|()
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|buf
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|!=
name|data
operator|->
name|authenticator
operator|->
name|methodId
argument_list|()
operator|||
operator|!
name|data
operator|->
name|authenticator
operator|->
name|beginAuthenticate
argument_list|(
name|data
operator|->
name|controlSocket
argument_list|,
operator|&
name|authComplete
argument_list|)
condition|)
block|{
name|setErrorState
argument_list|(
name|AuthenticatingError
argument_list|,
name|QLatin1String
argument_list|(
literal|"Socks5 host did not support authentication method."
argument_list|)
argument_list|)
expr_stmt|;
name|socketError
operator|=
name|QAbstractSocket
operator|::
name|SocketAccessError
expr_stmt|;
comment|// change the socket error
name|emitConnectionNotification
argument_list|()
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|authComplete
condition|)
name|sendRequestMethod
argument_list|()
expr_stmt|;
else|else
name|socks5State
operator|=
name|Authenticating
expr_stmt|;
block|}
end_function
begin_function
DECL|function|parseAuthenticatingReply
name|void
name|QSocks5SocketEnginePrivate
operator|::
name|parseAuthenticatingReply
parameter_list|()
block|{
name|bool
name|authComplete
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|data
operator|->
name|authenticator
operator|->
name|continueAuthenticate
argument_list|(
name|data
operator|->
name|controlSocket
argument_list|,
operator|&
name|authComplete
argument_list|)
condition|)
block|{
name|reauthenticate
argument_list|()
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|authComplete
condition|)
name|sendRequestMethod
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sendRequestMethod
name|void
name|QSocks5SocketEnginePrivate
operator|::
name|sendRequestMethod
parameter_list|()
block|{
name|QHostAddress
name|address
decl_stmt|;
name|quint16
name|port
init|=
literal|0
decl_stmt|;
name|char
name|command
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|mode
operator|==
name|ConnectMode
condition|)
block|{
name|command
operator|=
name|S5_CONNECT
expr_stmt|;
name|address
operator|=
name|peerAddress
expr_stmt|;
name|port
operator|=
name|peerPort
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mode
operator|==
name|BindMode
condition|)
block|{
name|command
operator|=
name|S5_BIND
expr_stmt|;
name|address
operator|=
name|localAddress
expr_stmt|;
name|port
operator|=
name|localPort
expr_stmt|;
block|}
else|else
block|{
ifndef|#
directive|ifndef
name|QT_NO_UDPSOCKET
name|command
operator|=
name|S5_UDP_ASSOCIATE
expr_stmt|;
name|address
operator|=
name|localAddress
expr_stmt|;
comment|//data->controlSocket->localAddress();
name|port
operator|=
name|localPort
expr_stmt|;
endif|#
directive|endif
block|}
name|QByteArray
name|buf
decl_stmt|;
name|buf
operator|.
name|reserve
argument_list|(
literal|270
argument_list|)
expr_stmt|;
comment|// big enough for domain name;
name|buf
index|[
literal|0
index|]
operator|=
name|S5_VERSION_5
expr_stmt|;
name|buf
index|[
literal|1
index|]
operator|=
name|command
expr_stmt|;
name|buf
index|[
literal|2
index|]
operator|=
literal|0x00
expr_stmt|;
if|if
condition|(
name|peerName
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|qt_socks5_set_host_address_and_port
argument_list|(
name|address
argument_list|,
name|port
argument_list|,
operator|&
name|buf
argument_list|)
condition|)
block|{
name|QSOCKS5_DEBUG
operator|<<
literal|"error setting address"
operator|<<
name|address
operator|<<
literal|" : "
operator|<<
name|port
expr_stmt|;
comment|//### set error code ....
return|return;
block|}
elseif|else
if|if
condition|(
operator|!
name|peerName
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|qt_socks5_set_host_name_and_port
argument_list|(
name|peerName
argument_list|,
name|port
argument_list|,
operator|&
name|buf
argument_list|)
condition|)
block|{
name|QSOCKS5_DEBUG
operator|<<
literal|"error setting address"
operator|<<
name|address
operator|<<
literal|" : "
operator|<<
name|port
expr_stmt|;
comment|//### set error code ....
return|return;
block|}
name|QSOCKS5_DEBUG
operator|<<
literal|"sending"
operator|<<
name|dump
argument_list|(
name|buf
argument_list|)
expr_stmt|;
name|QByteArray
name|sealedBuf
decl_stmt|;
if|if
condition|(
operator|!
name|data
operator|->
name|authenticator
operator|->
name|seal
argument_list|(
name|buf
argument_list|,
operator|&
name|sealedBuf
argument_list|)
condition|)
block|{
comment|// ### Handle this error.
block|}
name|data
operator|->
name|controlSocket
operator|->
name|write
argument_list|(
name|sealedBuf
argument_list|)
expr_stmt|;
name|data
operator|->
name|controlSocket
operator|->
name|flush
argument_list|()
expr_stmt|;
name|socks5State
operator|=
name|RequestMethodSent
expr_stmt|;
block|}
end_function
begin_function
DECL|function|parseRequestMethodReply
name|void
name|QSocks5SocketEnginePrivate
operator|::
name|parseRequestMethodReply
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QSocks5SocketEngine
argument_list|)
expr_stmt|;
name|QSOCKS5_DEBUG
operator|<<
literal|"parseRequestMethodReply()"
expr_stmt|;
name|QByteArray
name|inBuf
decl_stmt|;
if|if
condition|(
operator|!
name|data
operator|->
name|authenticator
operator|->
name|unSeal
argument_list|(
name|data
operator|->
name|controlSocket
argument_list|,
operator|&
name|inBuf
argument_list|)
condition|)
block|{
comment|// ### check error and not just not enough data
name|QSOCKS5_DEBUG
operator|<<
literal|"unSeal failed, needs more data"
expr_stmt|;
return|return;
block|}
name|QSOCKS5_DEBUG
operator|<<
name|dump
argument_list|(
name|inBuf
argument_list|)
expr_stmt|;
if|if
condition|(
name|inBuf
operator|.
name|size
argument_list|()
operator|<
literal|2
condition|)
block|{
name|QSOCKS5_DEBUG
operator|<<
literal|"need more data for request reply header .. put this data somewhere"
expr_stmt|;
return|return;
block|}
name|QHostAddress
name|address
decl_stmt|;
name|quint16
name|port
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|inBuf
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|!=
name|S5_VERSION_5
operator|||
name|inBuf
operator|.
name|length
argument_list|()
operator|<
literal|3
operator|||
name|inBuf
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|!=
literal|0x00
condition|)
block|{
name|QSOCKS5_DEBUG
operator|<<
literal|"socks protocol error"
expr_stmt|;
name|setErrorState
argument_list|(
name|SocksError
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|inBuf
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|!=
name|S5_SUCCESS
condition|)
block|{
name|Socks5Error
name|socks5Error
init|=
name|Socks5Error
argument_list|(
name|inBuf
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|QSOCKS5_DEBUG
operator|<<
literal|"Request error :"
operator|<<
name|socks5Error
expr_stmt|;
if|if
condition|(
operator|(
name|socks5Error
operator|==
name|SocksFailure
operator|||
name|socks5Error
operator|==
name|ConnectionNotAllowed
operator|)
operator|&&
operator|!
name|peerName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Dante seems to use this error code to indicate hostname resolution failure
name|setErrorState
argument_list|(
name|HostNameLookupError
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setErrorState
argument_list|(
name|RequestError
argument_list|,
name|socks5Error
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// connection success, retrieve the remote addresses
name|int
name|pos
init|=
literal|3
decl_stmt|;
if|if
condition|(
operator|!
name|qt_socks5_get_host_address_and_port
argument_list|(
name|inBuf
argument_list|,
operator|&
name|address
argument_list|,
operator|&
name|port
argument_list|,
operator|&
name|pos
argument_list|)
condition|)
block|{
name|QSOCKS5_DEBUG
operator|<<
literal|"error getting address"
expr_stmt|;
name|setErrorState
argument_list|(
name|SocksError
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|inBuf
operator|.
name|remove
argument_list|(
literal|0
argument_list|,
name|pos
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|inBuf
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
name|data
operator|->
name|controlSocket
operator|->
name|ungetChar
argument_list|(
name|inBuf
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|socks5State
operator|==
name|RequestMethodSent
condition|)
block|{
comment|// no error
name|localAddress
operator|=
name|address
expr_stmt|;
name|localPort
operator|=
name|port
expr_stmt|;
if|if
condition|(
name|mode
operator|==
name|ConnectMode
condition|)
block|{
name|socks5State
operator|=
name|Connected
expr_stmt|;
comment|// notify the upper layer that we're done
name|q
operator|->
name|setState
argument_list|(
name|QAbstractSocket
operator|::
name|ConnectedState
argument_list|)
expr_stmt|;
name|emitConnectionNotification
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mode
operator|==
name|BindMode
condition|)
block|{
name|socks5State
operator|=
name|BindSuccess
expr_stmt|;
name|q
operator|->
name|setState
argument_list|(
name|QAbstractSocket
operator|::
name|ListeningState
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|socks5State
operator|=
name|UdpAssociateSuccess
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|socks5State
operator|==
name|BindSuccess
condition|)
block|{
comment|// no error and we got a connection
name|bindData
operator|->
name|peerAddress
operator|=
name|address
expr_stmt|;
name|bindData
operator|->
name|peerPort
operator|=
name|port
expr_stmt|;
name|emitReadNotification
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// got an error
name|data
operator|->
name|controlSocket
operator|->
name|close
argument_list|()
expr_stmt|;
name|emitConnectionNotification
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|_q_emitPendingReadNotification
name|void
name|QSocks5SocketEnginePrivate
operator|::
name|_q_emitPendingReadNotification
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QSocks5SocketEngine
argument_list|)
expr_stmt|;
name|readNotificationPending
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|readNotificationEnabled
condition|)
block|{
name|QSOCKS5_D_DEBUG
operator|<<
literal|"emitting readNotification"
expr_stmt|;
name|QPointer
argument_list|<
name|QSocks5SocketEngine
argument_list|>
name|qq
init|=
name|q
decl_stmt|;
emit|emit
name|q
operator|->
name|readNotification
argument_list|()
emit|;
if|if
condition|(
operator|!
name|qq
condition|)
return|return;
comment|// check if there needs to be a new zero read notification
if|if
condition|(
name|data
operator|&&
name|data
operator|->
name|controlSocket
operator|->
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|UnconnectedState
operator|&&
name|data
operator|->
name|controlSocket
operator|->
name|error
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|RemoteHostClosedError
condition|)
block|{
name|connectData
operator|->
name|readBuffer
operator|.
name|clear
argument_list|()
expr_stmt|;
name|emitReadNotification
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|emitReadNotification
name|void
name|QSocks5SocketEnginePrivate
operator|::
name|emitReadNotification
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QSocks5SocketEngine
argument_list|)
expr_stmt|;
name|readNotificationActivated
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|readNotificationEnabled
operator|&&
operator|!
name|readNotificationPending
condition|)
block|{
name|QSOCKS5_D_DEBUG
operator|<<
literal|"queueing readNotification"
expr_stmt|;
name|readNotificationPending
operator|=
literal|true
expr_stmt|;
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
name|q
argument_list|,
literal|"_q_emitPendingReadNotification"
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|_q_emitPendingWriteNotification
name|void
name|QSocks5SocketEnginePrivate
operator|::
name|_q_emitPendingWriteNotification
parameter_list|()
block|{
name|writeNotificationPending
operator|=
literal|false
expr_stmt|;
name|Q_Q
argument_list|(
name|QSocks5SocketEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|writeNotificationEnabled
condition|)
block|{
name|QSOCKS5_D_DEBUG
operator|<<
literal|"emitting writeNotification"
expr_stmt|;
emit|emit
name|q
operator|->
name|writeNotification
argument_list|()
emit|;
block|}
block|}
end_function
begin_function
DECL|function|emitWriteNotification
name|void
name|QSocks5SocketEnginePrivate
operator|::
name|emitWriteNotification
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QSocks5SocketEngine
argument_list|)
expr_stmt|;
name|writeNotificationActivated
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|writeNotificationEnabled
operator|&&
operator|!
name|writeNotificationPending
condition|)
block|{
name|QSOCKS5_D_DEBUG
operator|<<
literal|"queueing writeNotification"
expr_stmt|;
name|writeNotificationPending
operator|=
literal|true
expr_stmt|;
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
name|q
argument_list|,
literal|"_q_emitPendingWriteNotification"
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|_q_emitPendingConnectionNotification
name|void
name|QSocks5SocketEnginePrivate
operator|::
name|_q_emitPendingConnectionNotification
parameter_list|()
block|{
name|connectionNotificationPending
operator|=
literal|false
expr_stmt|;
name|Q_Q
argument_list|(
name|QSocks5SocketEngine
argument_list|)
expr_stmt|;
name|QSOCKS5_D_DEBUG
operator|<<
literal|"emitting connectionNotification"
expr_stmt|;
emit|emit
name|q
operator|->
name|connectionNotification
argument_list|()
emit|;
block|}
end_function
begin_function
DECL|function|emitConnectionNotification
name|void
name|QSocks5SocketEnginePrivate
operator|::
name|emitConnectionNotification
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QSocks5SocketEngine
argument_list|)
expr_stmt|;
name|QSOCKS5_D_DEBUG
operator|<<
literal|"queueing connectionNotification"
expr_stmt|;
name|connectionNotificationPending
operator|=
literal|true
expr_stmt|;
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
name|q
argument_list|,
literal|"_q_emitPendingConnectionNotification"
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|QSocks5SocketEngine
name|QSocks5SocketEngine
operator|::
name|QSocks5SocketEngine
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QAbstractSocketEngine
argument_list|(
operator|*
operator|new
name|QSocks5SocketEnginePrivate
argument_list|()
argument_list|,
name|parent
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QSocks5SocketEngine
name|QSocks5SocketEngine
operator|::
name|~
name|QSocks5SocketEngine
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QSocks5SocketEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|data
condition|)
block|{
operator|delete
name|d
operator|->
name|data
operator|->
name|authenticator
expr_stmt|;
operator|delete
name|d
operator|->
name|data
operator|->
name|controlSocket
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|->
name|connectData
condition|)
operator|delete
name|d
operator|->
name|connectData
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_UDPSOCKET
if|if
condition|(
name|d
operator|->
name|udpData
condition|)
block|{
operator|delete
name|d
operator|->
name|udpData
operator|->
name|udpSocket
expr_stmt|;
operator|delete
name|d
operator|->
name|udpData
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
name|d
operator|->
name|bindData
condition|)
operator|delete
name|d
operator|->
name|bindData
expr_stmt|;
block|}
end_destructor
begin_decl_stmt
DECL|variable|descriptorCounter
specifier|static
name|QBasicAtomicInt
name|descriptorCounter
init|=
name|Q_BASIC_ATOMIC_INITIALIZER
argument_list|(
literal|1
argument_list|)
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|initialize
name|bool
name|QSocks5SocketEngine
operator|::
name|initialize
parameter_list|(
name|QAbstractSocket
operator|::
name|SocketType
name|type
parameter_list|,
name|QAbstractSocket
operator|::
name|NetworkLayerProtocol
name|protocol
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QSocks5SocketEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|socketDescriptor
operator|=
name|descriptorCounter
operator|.
name|fetchAndAddRelaxed
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|d
operator|->
name|socketType
operator|=
name|type
expr_stmt|;
name|d
operator|->
name|socketProtocol
operator|=
name|protocol
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|initialize
name|bool
name|QSocks5SocketEngine
operator|::
name|initialize
parameter_list|(
name|int
name|socketDescriptor
parameter_list|,
name|QAbstractSocket
operator|::
name|SocketState
name|socketState
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QSocks5SocketEngine
argument_list|)
expr_stmt|;
name|QSOCKS5_Q_DEBUG
operator|<<
literal|"initialize"
operator|<<
name|socketDescriptor
expr_stmt|;
comment|// this is only valid for the other side of a bind, nothing else is supported
if|if
condition|(
name|socketState
operator|!=
name|QAbstractSocket
operator|::
name|ConnectedState
condition|)
block|{
comment|//### must be connected state ???
return|return
literal|false
return|;
block|}
name|QSocks5BindData
modifier|*
name|bindData
init|=
name|socks5BindStore
argument_list|()
operator|->
name|retrieve
argument_list|(
name|socketDescriptor
argument_list|)
decl_stmt|;
if|if
condition|(
name|bindData
condition|)
block|{
name|d
operator|->
name|socketState
operator|=
name|QAbstractSocket
operator|::
name|ConnectedState
expr_stmt|;
name|d
operator|->
name|socketType
operator|=
name|QAbstractSocket
operator|::
name|TcpSocket
expr_stmt|;
name|d
operator|->
name|connectData
operator|=
operator|new
name|QSocks5ConnectData
expr_stmt|;
name|d
operator|->
name|data
operator|=
name|d
operator|->
name|connectData
expr_stmt|;
name|d
operator|->
name|mode
operator|=
name|QSocks5SocketEnginePrivate
operator|::
name|ConnectMode
expr_stmt|;
name|d
operator|->
name|data
operator|->
name|controlSocket
operator|=
name|bindData
operator|->
name|controlSocket
expr_stmt|;
name|bindData
operator|->
name|controlSocket
operator|=
literal|0
expr_stmt|;
name|d
operator|->
name|data
operator|->
name|controlSocket
operator|->
name|setParent
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|d
operator|->
name|socketProtocol
operator|=
name|d
operator|->
name|data
operator|->
name|controlSocket
operator|->
name|localAddress
argument_list|()
operator|.
name|protocol
argument_list|()
expr_stmt|;
name|d
operator|->
name|data
operator|->
name|authenticator
operator|=
name|bindData
operator|->
name|authenticator
expr_stmt|;
name|bindData
operator|->
name|authenticator
operator|=
literal|0
expr_stmt|;
name|d
operator|->
name|localPort
operator|=
name|bindData
operator|->
name|localPort
expr_stmt|;
name|d
operator|->
name|localAddress
operator|=
name|bindData
operator|->
name|localAddress
expr_stmt|;
name|d
operator|->
name|peerPort
operator|=
name|bindData
operator|->
name|peerPort
expr_stmt|;
name|d
operator|->
name|peerAddress
operator|=
name|bindData
operator|->
name|peerAddress
expr_stmt|;
operator|delete
name|bindData
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|d
operator|->
name|data
operator|->
name|controlSocket
argument_list|,
name|SIGNAL
argument_list|(
name|connected
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_controlSocketConnected
argument_list|()
argument_list|)
argument_list|,
name|Qt
operator|::
name|DirectConnection
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|d
operator|->
name|data
operator|->
name|controlSocket
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_controlSocketReadNotification
argument_list|()
argument_list|)
argument_list|,
name|Qt
operator|::
name|DirectConnection
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|d
operator|->
name|data
operator|->
name|controlSocket
argument_list|,
name|SIGNAL
argument_list|(
name|bytesWritten
argument_list|(
name|qint64
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_controlSocketBytesWritten
argument_list|()
argument_list|)
argument_list|,
name|Qt
operator|::
name|DirectConnection
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|d
operator|->
name|data
operator|->
name|controlSocket
argument_list|,
name|SIGNAL
argument_list|(
name|error
argument_list|(
name|QAbstractSocket
operator|::
name|SocketError
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_controlSocketError
argument_list|(
name|QAbstractSocket
operator|::
name|SocketError
argument_list|)
argument_list|)
argument_list|,
name|Qt
operator|::
name|DirectConnection
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|d
operator|->
name|data
operator|->
name|controlSocket
argument_list|,
name|SIGNAL
argument_list|(
name|disconnected
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_controlSocketDisconnected
argument_list|()
argument_list|)
argument_list|,
name|Qt
operator|::
name|DirectConnection
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|d
operator|->
name|data
operator|->
name|controlSocket
argument_list|,
name|SIGNAL
argument_list|(
name|stateChanged
argument_list|(
name|QAbstractSocket
operator|::
name|SocketState
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_controlSocketStateChanged
argument_list|(
name|QAbstractSocket
operator|::
name|SocketState
argument_list|)
argument_list|)
argument_list|,
name|Qt
operator|::
name|DirectConnection
argument_list|)
expr_stmt|;
name|d
operator|->
name|socks5State
operator|=
name|QSocks5SocketEnginePrivate
operator|::
name|Connected
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|data
operator|->
name|controlSocket
operator|->
name|bytesAvailable
argument_list|()
operator|!=
literal|0
condition|)
name|d
operator|->
name|_q_controlSocketReadNotification
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|setProxy
name|void
name|QSocks5SocketEngine
operator|::
name|setProxy
parameter_list|(
specifier|const
name|QNetworkProxy
modifier|&
name|networkProxy
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QSocks5SocketEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|proxyInfo
operator|=
name|networkProxy
expr_stmt|;
block|}
end_function
begin_function
DECL|function|socketDescriptor
name|int
name|QSocks5SocketEngine
operator|::
name|socketDescriptor
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QSocks5SocketEngine
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|socketDescriptor
return|;
block|}
end_function
begin_function
DECL|function|isValid
name|bool
name|QSocks5SocketEngine
operator|::
name|isValid
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QSocks5SocketEngine
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|socketType
operator|!=
name|QAbstractSocket
operator|::
name|UnknownSocketType
operator|&&
name|d
operator|->
name|socks5State
operator|!=
name|QSocks5SocketEnginePrivate
operator|::
name|SocksError
operator|&&
operator|(
name|d
operator|->
name|socketError
operator|==
name|QAbstractSocket
operator|::
name|UnknownSocketError
operator|||
name|d
operator|->
name|socketError
operator|==
name|QAbstractSocket
operator|::
name|SocketTimeoutError
operator|||
name|d
operator|->
name|socketError
operator|==
name|QAbstractSocket
operator|::
name|UnfinishedSocketOperationError
operator|)
return|;
block|}
end_function
begin_function
DECL|function|connectInternal
name|bool
name|QSocks5SocketEngine
operator|::
name|connectInternal
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QSocks5SocketEngine
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|data
condition|)
block|{
if|if
condition|(
name|socketType
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|TcpSocket
condition|)
block|{
name|d
operator|->
name|initialize
argument_list|(
name|QSocks5SocketEnginePrivate
operator|::
name|ConnectMode
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_UDPSOCKET
block|}
elseif|else
if|if
condition|(
name|socketType
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|UdpSocket
condition|)
block|{
name|d
operator|->
name|initialize
argument_list|(
name|QSocks5SocketEnginePrivate
operator|::
name|UdpAssociateMode
argument_list|)
expr_stmt|;
comment|// all udp needs to be bound
if|if
condition|(
operator|!
name|bind
argument_list|(
name|QHostAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"0.0.0.0"
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
condition|)
return|return
literal|false
return|;
name|setState
argument_list|(
name|QAbstractSocket
operator|::
name|ConnectedState
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
endif|#
directive|endif
block|}
else|else
block|{
name|qFatal
argument_list|(
literal|"QSocks5SocketEngine::connectToHost: in QTcpServer mode"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
name|d
operator|->
name|socks5State
operator|==
name|QSocks5SocketEnginePrivate
operator|::
name|Uninitialized
operator|&&
name|d
operator|->
name|socketState
operator|!=
name|QAbstractSocket
operator|::
name|ConnectingState
condition|)
block|{
name|setState
argument_list|(
name|QAbstractSocket
operator|::
name|ConnectingState
argument_list|)
expr_stmt|;
name|d
operator|->
name|data
operator|->
name|controlSocket
operator|->
name|connectToHost
argument_list|(
name|d
operator|->
name|proxyInfo
operator|.
name|hostName
argument_list|()
argument_list|,
name|d
operator|->
name|proxyInfo
operator|.
name|port
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|connectToHost
name|bool
name|QSocks5SocketEngine
operator|::
name|connectToHost
parameter_list|(
specifier|const
name|QHostAddress
modifier|&
name|address
parameter_list|,
name|quint16
name|port
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QSocks5SocketEngine
argument_list|)
expr_stmt|;
name|QSOCKS5_DEBUG
operator|<<
literal|"connectToHost"
operator|<<
name|address
operator|<<
literal|':'
operator|<<
name|port
expr_stmt|;
name|setPeerAddress
argument_list|(
name|address
argument_list|)
expr_stmt|;
name|setPeerPort
argument_list|(
name|port
argument_list|)
expr_stmt|;
name|d
operator|->
name|peerName
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|connectInternal
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|connectToHostByName
name|bool
name|QSocks5SocketEngine
operator|::
name|connectToHostByName
parameter_list|(
specifier|const
name|QString
modifier|&
name|hostname
parameter_list|,
name|quint16
name|port
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QSocks5SocketEngine
argument_list|)
expr_stmt|;
name|setPeerAddress
argument_list|(
name|QHostAddress
argument_list|()
argument_list|)
expr_stmt|;
name|setPeerPort
argument_list|(
name|port
argument_list|)
expr_stmt|;
name|d
operator|->
name|peerName
operator|=
name|hostname
expr_stmt|;
return|return
name|connectInternal
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|_q_controlSocketConnected
name|void
name|QSocks5SocketEnginePrivate
operator|::
name|_q_controlSocketConnected
parameter_list|()
block|{
name|QSOCKS5_DEBUG
operator|<<
literal|"_q_controlSocketConnected"
expr_stmt|;
name|QByteArray
name|buf
argument_list|(
literal|3
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|buf
index|[
literal|0
index|]
operator|=
name|S5_VERSION_5
expr_stmt|;
name|buf
index|[
literal|1
index|]
operator|=
literal|0x01
expr_stmt|;
name|buf
index|[
literal|2
index|]
operator|=
name|data
operator|->
name|authenticator
operator|->
name|methodId
argument_list|()
expr_stmt|;
name|data
operator|->
name|controlSocket
operator|->
name|write
argument_list|(
name|buf
argument_list|)
expr_stmt|;
name|socks5State
operator|=
name|AuthenticationMethodsSent
expr_stmt|;
block|}
end_function
begin_function
DECL|function|_q_controlSocketReadNotification
name|void
name|QSocks5SocketEnginePrivate
operator|::
name|_q_controlSocketReadNotification
parameter_list|()
block|{
name|QSOCKS5_D_DEBUG
operator|<<
literal|"_q_controlSocketReadNotification socks5state"
operator|<<
name|s5StateToString
argument_list|(
name|socks5State
argument_list|)
operator|<<
literal|"bytes available"
operator|<<
name|data
operator|->
name|controlSocket
operator|->
name|bytesAvailable
argument_list|()
expr_stmt|;
if|if
condition|(
name|data
operator|->
name|controlSocket
operator|->
name|bytesAvailable
argument_list|()
operator|==
literal|0
condition|)
block|{
name|QSOCKS5_D_DEBUG
operator|<<
literal|"########## bogus read why do we get these ... on windows only"
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|socks5State
condition|)
block|{
case|case
name|AuthenticationMethodsSent
case|:
name|parseAuthenticationMethodReply
argument_list|()
expr_stmt|;
break|break;
case|case
name|Authenticating
case|:
name|parseAuthenticatingReply
argument_list|()
expr_stmt|;
break|break;
case|case
name|RequestMethodSent
case|:
name|parseRequestMethodReply
argument_list|()
expr_stmt|;
break|break;
case|case
name|Connected
case|:
block|{
name|QByteArray
name|buf
decl_stmt|;
if|if
condition|(
operator|!
name|data
operator|->
name|authenticator
operator|->
name|unSeal
argument_list|(
name|data
operator|->
name|controlSocket
argument_list|,
operator|&
name|buf
argument_list|)
condition|)
block|{
comment|// qDebug()<< "unseal error maybe need to wait for more data";
block|}
if|if
condition|(
name|buf
operator|.
name|size
argument_list|()
condition|)
block|{
name|QSOCKS5_DEBUG
operator|<<
name|dump
argument_list|(
name|buf
argument_list|)
expr_stmt|;
name|connectData
operator|->
name|readBuffer
operator|+=
name|buf
expr_stmt|;
name|emitReadNotification
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
case|case
name|BindSuccess
case|:
comment|// only get here if command is bind
if|if
condition|(
name|mode
operator|==
name|BindMode
condition|)
block|{
name|parseRequestMethodReply
argument_list|()
expr_stmt|;
break|break;
block|}
comment|// fall through
default|default:
name|qWarning
argument_list|(
literal|"QSocks5SocketEnginePrivate::_q_controlSocketReadNotification: "
literal|"Unexpectedly received data while in state=%d and mode=%d"
argument_list|,
name|socks5State
argument_list|,
name|mode
argument_list|)
expr_stmt|;
break|break;
block|}
empty_stmt|;
block|}
end_function
begin_function
DECL|function|_q_controlSocketBytesWritten
name|void
name|QSocks5SocketEnginePrivate
operator|::
name|_q_controlSocketBytesWritten
parameter_list|()
block|{
name|QSOCKS5_DEBUG
operator|<<
literal|"_q_controlSocketBytesWritten"
expr_stmt|;
if|if
condition|(
name|socks5State
operator|!=
name|Connected
operator|||
operator|(
name|mode
operator|==
name|ConnectMode
operator|&&
name|data
operator|->
name|controlSocket
operator|->
name|bytesToWrite
argument_list|()
operator|)
condition|)
return|return;
if|if
condition|(
name|data
operator|->
name|controlSocket
operator|->
name|bytesToWrite
argument_list|()
operator|<
name|MaxWriteBufferSize
condition|)
block|{
name|emitWriteNotification
argument_list|()
expr_stmt|;
name|writeNotificationActivated
operator|=
literal|false
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|_q_controlSocketError
name|void
name|QSocks5SocketEnginePrivate
operator|::
name|_q_controlSocketError
parameter_list|(
name|QAbstractSocket
operator|::
name|SocketError
name|error
parameter_list|)
block|{
name|QSOCKS5_D_DEBUG
operator|<<
literal|"controlSocketError"
operator|<<
name|error
operator|<<
name|data
operator|->
name|controlSocket
operator|->
name|errorString
argument_list|()
expr_stmt|;
if|if
condition|(
name|error
operator|==
name|QAbstractSocket
operator|::
name|SocketTimeoutError
condition|)
return|return;
comment|// ignore this error -- comes from the waitFor* functions
if|if
condition|(
name|error
operator|==
name|QAbstractSocket
operator|::
name|RemoteHostClosedError
operator|&&
name|socks5State
operator|==
name|Connected
condition|)
block|{
comment|// clear the read buffer in connect mode so that bytes available returns 0
comment|// if there already is a read notification pending then this will be processed first
if|if
condition|(
operator|!
name|readNotificationPending
condition|)
name|connectData
operator|->
name|readBuffer
operator|.
name|clear
argument_list|()
expr_stmt|;
name|emitReadNotification
argument_list|()
expr_stmt|;
name|data
operator|->
name|controlSocket
operator|->
name|close
argument_list|()
expr_stmt|;
comment|// cause a disconnect in the outer socket
name|emitWriteNotification
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|socks5State
operator|==
name|Uninitialized
operator|||
name|socks5State
operator|==
name|AuthenticationMethodsSent
operator|||
name|socks5State
operator|==
name|Authenticating
operator|||
name|socks5State
operator|==
name|RequestMethodSent
condition|)
block|{
name|setErrorState
argument_list|(
name|socks5State
operator|==
name|Uninitialized
condition|?
name|ConnectError
else|:
name|ControlSocketError
argument_list|)
expr_stmt|;
name|data
operator|->
name|controlSocket
operator|->
name|close
argument_list|()
expr_stmt|;
name|emitConnectionNotification
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|q_func
argument_list|()
operator|->
name|setError
argument_list|(
name|data
operator|->
name|controlSocket
operator|->
name|error
argument_list|()
argument_list|,
name|data
operator|->
name|controlSocket
operator|->
name|errorString
argument_list|()
argument_list|)
expr_stmt|;
name|emitReadNotification
argument_list|()
expr_stmt|;
name|emitWriteNotification
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|_q_controlSocketDisconnected
name|void
name|QSocks5SocketEnginePrivate
operator|::
name|_q_controlSocketDisconnected
parameter_list|()
block|{
name|QSOCKS5_D_DEBUG
operator|<<
literal|"_q_controlSocketDisconnected"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|_q_controlSocketStateChanged
name|void
name|QSocks5SocketEnginePrivate
operator|::
name|_q_controlSocketStateChanged
parameter_list|(
name|QAbstractSocket
operator|::
name|SocketState
name|state
parameter_list|)
block|{
name|QSOCKS5_D_DEBUG
operator|<<
literal|"_q_controlSocketStateChanged"
operator|<<
name|state
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_UDPSOCKET
end_ifndef
begin_function
DECL|function|checkForDatagrams
name|void
name|QSocks5SocketEnginePrivate
operator|::
name|checkForDatagrams
parameter_list|()
specifier|const
block|{
comment|// udp should be unbuffered so we need to do some polling at certain points
if|if
condition|(
name|udpData
operator|->
name|udpSocket
operator|->
name|hasPendingDatagrams
argument_list|()
condition|)
cast|const_cast
argument_list|<
name|QSocks5SocketEnginePrivate
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
operator|->
name|_q_udpSocketReadNotification
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|_q_udpSocketReadNotification
name|void
name|QSocks5SocketEnginePrivate
operator|::
name|_q_udpSocketReadNotification
parameter_list|()
block|{
name|QSOCKS5_D_DEBUG
operator|<<
literal|"_q_udpSocketReadNotification()"
expr_stmt|;
comment|// check some state stuff
if|if
condition|(
operator|!
name|udpData
operator|->
name|udpSocket
operator|->
name|hasPendingDatagrams
argument_list|()
condition|)
block|{
name|QSOCKS5_D_DEBUG
operator|<<
literal|"false read ??"
expr_stmt|;
return|return;
block|}
while|while
condition|(
name|udpData
operator|->
name|udpSocket
operator|->
name|hasPendingDatagrams
argument_list|()
condition|)
block|{
name|QByteArray
name|sealedBuf
argument_list|(
name|udpData
operator|->
name|udpSocket
operator|->
name|pendingDatagramSize
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QSOCKS5_D_DEBUG
operator|<<
literal|"new datagram"
expr_stmt|;
name|udpData
operator|->
name|udpSocket
operator|->
name|readDatagram
argument_list|(
name|sealedBuf
operator|.
name|data
argument_list|()
argument_list|,
name|sealedBuf
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QByteArray
name|inBuf
decl_stmt|;
if|if
condition|(
operator|!
name|data
operator|->
name|authenticator
operator|->
name|unSeal
argument_list|(
name|sealedBuf
argument_list|,
operator|&
name|inBuf
argument_list|)
condition|)
block|{
name|QSOCKS5_D_DEBUG
operator|<<
literal|"failed unsealing datagram discarding"
expr_stmt|;
return|return;
block|}
name|QSOCKS5_DEBUG
operator|<<
name|dump
argument_list|(
name|inBuf
argument_list|)
expr_stmt|;
name|int
name|pos
init|=
literal|0
decl_stmt|;
specifier|const
name|char
modifier|*
name|buf
init|=
name|inBuf
operator|.
name|constData
argument_list|()
decl_stmt|;
if|if
condition|(
name|inBuf
operator|.
name|size
argument_list|()
operator|<
literal|4
condition|)
block|{
name|QSOCKS5_D_DEBUG
operator|<<
literal|"bugus udp data, discarding"
expr_stmt|;
return|return;
block|}
name|QSocks5RevivedDatagram
name|datagram
decl_stmt|;
if|if
condition|(
name|buf
index|[
name|pos
operator|++
index|]
operator|!=
literal|0
operator|||
name|buf
index|[
name|pos
operator|++
index|]
operator|!=
literal|0
condition|)
block|{
name|QSOCKS5_D_DEBUG
operator|<<
literal|"invalid datagram discarding"
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|buf
index|[
name|pos
operator|++
index|]
operator|!=
literal|0
condition|)
block|{
comment|//### add fragmentation reading support
name|QSOCKS5_D_DEBUG
operator|<<
literal|"don't support fragmentation yet disgarding"
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|qt_socks5_get_host_address_and_port
argument_list|(
name|inBuf
argument_list|,
operator|&
name|datagram
operator|.
name|address
argument_list|,
operator|&
name|datagram
operator|.
name|port
argument_list|,
operator|&
name|pos
argument_list|)
condition|)
block|{
name|QSOCKS5_D_DEBUG
operator|<<
literal|"failed to get address from datagram disgarding"
expr_stmt|;
return|return;
block|}
name|datagram
operator|.
name|data
operator|=
name|QByteArray
argument_list|(
operator|&
name|buf
index|[
name|pos
index|]
argument_list|,
name|inBuf
operator|.
name|size
argument_list|()
operator|-
name|pos
argument_list|)
expr_stmt|;
name|udpData
operator|->
name|pendingDatagrams
operator|.
name|enqueue
argument_list|(
name|datagram
argument_list|)
expr_stmt|;
block|}
name|emitReadNotification
argument_list|()
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_UDPSOCKET
end_comment
begin_function
DECL|function|bind
name|bool
name|QSocks5SocketEngine
operator|::
name|bind
parameter_list|(
specifier|const
name|QHostAddress
modifier|&
name|address
parameter_list|,
name|quint16
name|port
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QSocks5SocketEngine
argument_list|)
expr_stmt|;
comment|// when bind wee will block until the bind is finished as the info from the proxy server is needed
if|if
condition|(
operator|!
name|d
operator|->
name|data
condition|)
block|{
if|if
condition|(
name|socketType
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|TcpSocket
condition|)
block|{
name|d
operator|->
name|initialize
argument_list|(
name|QSocks5SocketEnginePrivate
operator|::
name|BindMode
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_UDPSOCKET
block|}
elseif|else
if|if
condition|(
name|socketType
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|UdpSocket
condition|)
block|{
name|d
operator|->
name|initialize
argument_list|(
name|QSocks5SocketEnginePrivate
operator|::
name|UdpAssociateMode
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
else|else
block|{
comment|//### something invalid
return|return
literal|false
return|;
block|}
block|}
ifndef|#
directive|ifndef
name|QT_NO_UDPSOCKET
if|if
condition|(
name|d
operator|->
name|mode
operator|==
name|QSocks5SocketEnginePrivate
operator|::
name|UdpAssociateMode
condition|)
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|udpData
operator|->
name|udpSocket
operator|->
name|bind
argument_list|(
name|address
argument_list|,
name|port
argument_list|)
condition|)
block|{
name|QSOCKS5_Q_DEBUG
operator|<<
literal|"local udp bind failed"
expr_stmt|;
name|setError
argument_list|(
name|d
operator|->
name|udpData
operator|->
name|udpSocket
operator|->
name|error
argument_list|()
argument_list|,
name|d
operator|->
name|udpData
operator|->
name|udpSocket
operator|->
name|errorString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|d
operator|->
name|localAddress
operator|=
name|d
operator|->
name|udpData
operator|->
name|udpSocket
operator|->
name|localAddress
argument_list|()
expr_stmt|;
name|d
operator|->
name|localPort
operator|=
name|d
operator|->
name|udpData
operator|->
name|udpSocket
operator|->
name|localPort
argument_list|()
expr_stmt|;
block|}
elseif|else
endif|#
directive|endif
if|if
condition|(
name|d
operator|->
name|mode
operator|==
name|QSocks5SocketEnginePrivate
operator|::
name|BindMode
condition|)
block|{
name|d
operator|->
name|localAddress
operator|=
name|address
expr_stmt|;
name|d
operator|->
name|localPort
operator|=
name|port
expr_stmt|;
block|}
else|else
block|{
comment|//### something invalid
return|return
literal|false
return|;
block|}
name|int
name|msecs
init|=
name|SOCKS5_BLOCKING_BIND_TIMEOUT
decl_stmt|;
name|QElapsedTimer
name|stopWatch
decl_stmt|;
name|stopWatch
operator|.
name|start
argument_list|()
expr_stmt|;
name|d
operator|->
name|data
operator|->
name|controlSocket
operator|->
name|connectToHost
argument_list|(
name|d
operator|->
name|proxyInfo
operator|.
name|hostName
argument_list|()
argument_list|,
name|d
operator|->
name|proxyInfo
operator|.
name|port
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|waitForConnected
argument_list|(
name|msecs
argument_list|,
literal|0
argument_list|)
operator|||
name|d
operator|->
name|data
operator|->
name|controlSocket
operator|->
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|UnconnectedState
condition|)
block|{
comment|// waitForConnected sets the error state and closes the socket
name|QSOCKS5_Q_DEBUG
operator|<<
literal|"waitForConnected to proxy server"
operator|<<
name|d
operator|->
name|data
operator|->
name|controlSocket
operator|->
name|errorString
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|d
operator|->
name|socks5State
operator|==
name|QSocks5SocketEnginePrivate
operator|::
name|BindSuccess
condition|)
block|{
name|setState
argument_list|(
name|QAbstractSocket
operator|::
name|BoundState
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
ifndef|#
directive|ifndef
name|QT_NO_UDPSOCKET
block|}
elseif|else
if|if
condition|(
name|d
operator|->
name|socks5State
operator|==
name|QSocks5SocketEnginePrivate
operator|::
name|UdpAssociateSuccess
condition|)
block|{
name|setState
argument_list|(
name|QAbstractSocket
operator|::
name|BoundState
argument_list|)
expr_stmt|;
name|d
operator|->
name|udpData
operator|->
name|associateAddress
operator|=
name|d
operator|->
name|localAddress
expr_stmt|;
name|d
operator|->
name|localAddress
operator|=
name|QHostAddress
argument_list|()
expr_stmt|;
name|d
operator|->
name|udpData
operator|->
name|associatePort
operator|=
name|d
operator|->
name|localPort
expr_stmt|;
name|d
operator|->
name|localPort
operator|=
literal|0
expr_stmt|;
name|QUdpSocket
name|dummy
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_BEARERMANAGEMENT
name|dummy
operator|.
name|setProperty
argument_list|(
literal|"_q_networksession"
argument_list|,
name|property
argument_list|(
literal|"_q_networksession"
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|dummy
operator|.
name|setProxy
argument_list|(
name|QNetworkProxy
operator|::
name|NoProxy
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dummy
operator|.
name|bind
argument_list|()
operator|||
name|writeDatagram
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|d
operator|->
name|data
operator|->
name|controlSocket
operator|->
name|localAddress
argument_list|()
argument_list|,
name|dummy
operator|.
name|localPort
argument_list|()
argument_list|)
operator|!=
literal|0
operator|||
operator|!
name|dummy
operator|.
name|waitForReadyRead
argument_list|(
name|qt_timeout_value
argument_list|(
name|msecs
argument_list|,
name|stopWatch
operator|.
name|elapsed
argument_list|()
argument_list|)
argument_list|)
operator|||
name|dummy
operator|.
name|readDatagram
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|&
name|d
operator|->
name|localAddress
argument_list|,
operator|&
name|d
operator|->
name|localPort
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|QSOCKS5_DEBUG
operator|<<
literal|"udp actual address and port lookup failed"
expr_stmt|;
name|setState
argument_list|(
name|QAbstractSocket
operator|::
name|UnconnectedState
argument_list|)
expr_stmt|;
name|setError
argument_list|(
name|dummy
operator|.
name|error
argument_list|()
argument_list|,
name|dummy
operator|.
name|errorString
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|data
operator|->
name|controlSocket
operator|->
name|close
argument_list|()
expr_stmt|;
comment|//### reset and error
return|return
literal|false
return|;
block|}
name|QSOCKS5_DEBUG
operator|<<
literal|"udp actual address and port"
operator|<<
name|d
operator|->
name|localAddress
operator|<<
literal|':'
operator|<<
name|d
operator|->
name|localPort
expr_stmt|;
return|return
literal|true
return|;
endif|#
directive|endif
comment|// QT_NO_UDPSOCKET
block|}
comment|// binding timed out
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|SocketTimeoutError
argument_list|,
name|QLatin1String
argument_list|(
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QSocks5SocketEngine"
argument_list|,
literal|"Network operation timed out"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|///###    delete d->udpSocket;
comment|///###    d->udpSocket = 0;
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|listen
name|bool
name|QSocks5SocketEngine
operator|::
name|listen
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QSocks5SocketEngine
argument_list|)
expr_stmt|;
name|QSOCKS5_Q_DEBUG
operator|<<
literal|"listen()"
expr_stmt|;
comment|// check that we are in bound and then go to listening.
if|if
condition|(
name|d
operator|->
name|socketState
operator|==
name|QAbstractSocket
operator|::
name|BoundState
condition|)
block|{
name|d
operator|->
name|socketState
operator|=
name|QAbstractSocket
operator|::
name|ListeningState
expr_stmt|;
comment|// check if we already have a connection
if|if
condition|(
name|d
operator|->
name|socks5State
operator|==
name|QSocks5SocketEnginePrivate
operator|::
name|BindSuccess
condition|)
name|d
operator|->
name|emitReadNotification
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|accept
name|int
name|QSocks5SocketEngine
operator|::
name|accept
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QSocks5SocketEngine
argument_list|)
expr_stmt|;
comment|// check we are listing ---
name|QSOCKS5_Q_DEBUG
operator|<<
literal|"accept()"
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|socks5State
operator|==
name|QSocks5SocketEnginePrivate
operator|::
name|BindSuccess
condition|)
block|{
name|QSOCKS5_Q_DEBUG
operator|<<
literal|"BindSuccess adding"
operator|<<
name|d
operator|->
name|socketDescriptor
operator|<<
literal|"to the bind store"
expr_stmt|;
name|d
operator|->
name|data
operator|->
name|controlSocket
operator|->
name|disconnect
argument_list|()
expr_stmt|;
name|d
operator|->
name|data
operator|->
name|controlSocket
operator|->
name|setParent
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|d
operator|->
name|bindData
operator|->
name|localAddress
operator|=
name|d
operator|->
name|localAddress
expr_stmt|;
name|d
operator|->
name|bindData
operator|->
name|localPort
operator|=
name|d
operator|->
name|localPort
expr_stmt|;
name|int
name|sd
init|=
name|d
operator|->
name|socketDescriptor
decl_stmt|;
name|socks5BindStore
argument_list|()
operator|->
name|add
argument_list|(
name|sd
argument_list|,
name|d
operator|->
name|bindData
argument_list|)
expr_stmt|;
name|d
operator|->
name|data
operator|=
literal|0
expr_stmt|;
name|d
operator|->
name|bindData
operator|=
literal|0
expr_stmt|;
name|d
operator|->
name|socketDescriptor
operator|=
literal|0
expr_stmt|;
comment|//### do something about this socket layer ... set it closed and an error about why ...
comment|// reset state and local port/address
name|d
operator|->
name|socks5State
operator|=
name|QSocks5SocketEnginePrivate
operator|::
name|Uninitialized
expr_stmt|;
comment|// ..??
name|d
operator|->
name|socketState
operator|=
name|QAbstractSocket
operator|::
name|UnconnectedState
expr_stmt|;
return|return
name|sd
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|close
name|void
name|QSocks5SocketEngine
operator|::
name|close
parameter_list|()
block|{
name|QSOCKS5_Q_DEBUG
operator|<<
literal|"close()"
expr_stmt|;
name|Q_D
argument_list|(
name|QSocks5SocketEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|data
operator|&&
name|d
operator|->
name|data
operator|->
name|controlSocket
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|data
operator|->
name|controlSocket
operator|->
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|ConnectedState
condition|)
block|{
name|int
name|msecs
init|=
literal|100
decl_stmt|;
name|QElapsedTimer
name|stopWatch
decl_stmt|;
name|stopWatch
operator|.
name|start
argument_list|()
expr_stmt|;
while|while
condition|(
operator|!
name|d
operator|->
name|data
operator|->
name|controlSocket
operator|->
name|bytesToWrite
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|data
operator|->
name|controlSocket
operator|->
name|waitForBytesWritten
argument_list|(
name|qt_timeout_value
argument_list|(
name|msecs
argument_list|,
name|stopWatch
operator|.
name|elapsed
argument_list|()
argument_list|)
argument_list|)
condition|)
break|break;
block|}
block|}
name|d
operator|->
name|data
operator|->
name|controlSocket
operator|->
name|close
argument_list|()
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_UDPSOCKET
if|if
condition|(
name|d
operator|->
name|udpData
operator|&&
name|d
operator|->
name|udpData
operator|->
name|udpSocket
condition|)
name|d
operator|->
name|udpData
operator|->
name|udpSocket
operator|->
name|close
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|bytesAvailable
name|qint64
name|QSocks5SocketEngine
operator|::
name|bytesAvailable
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QSocks5SocketEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|mode
operator|==
name|QSocks5SocketEnginePrivate
operator|::
name|ConnectMode
condition|)
return|return
name|d
operator|->
name|connectData
operator|->
name|readBuffer
operator|.
name|size
argument_list|()
return|;
ifndef|#
directive|ifndef
name|QT_NO_UDPSOCKET
elseif|else
if|if
condition|(
name|d
operator|->
name|mode
operator|==
name|QSocks5SocketEnginePrivate
operator|::
name|UdpAssociateMode
operator|&&
operator|!
name|d
operator|->
name|udpData
operator|->
name|pendingDatagrams
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|d
operator|->
name|udpData
operator|->
name|pendingDatagrams
operator|.
name|first
argument_list|()
operator|.
name|data
operator|.
name|size
argument_list|()
return|;
endif|#
directive|endif
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|read
name|qint64
name|QSocks5SocketEngine
operator|::
name|read
parameter_list|(
name|char
modifier|*
name|data
parameter_list|,
name|qint64
name|maxlen
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QSocks5SocketEngine
argument_list|)
expr_stmt|;
name|QSOCKS5_Q_DEBUG
operator|<<
literal|"read( , maxlen = "
operator|<<
name|maxlen
operator|<<
literal|')'
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|mode
operator|==
name|QSocks5SocketEnginePrivate
operator|::
name|ConnectMode
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|connectData
operator|->
name|readBuffer
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|data
operator|->
name|controlSocket
operator|->
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|UnconnectedState
condition|)
block|{
comment|//imitate remote closed
name|close
argument_list|()
expr_stmt|;
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|RemoteHostClosedError
argument_list|,
name|QLatin1String
argument_list|(
literal|"Remote host closed connection###"
argument_list|)
argument_list|)
expr_stmt|;
name|setState
argument_list|(
name|QAbstractSocket
operator|::
name|UnconnectedState
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
comment|// nothing to be read
block|}
block|}
name|qint64
name|copy
init|=
name|qMin
argument_list|<
name|qint64
argument_list|>
argument_list|(
name|d
operator|->
name|connectData
operator|->
name|readBuffer
operator|.
name|size
argument_list|()
argument_list|,
name|maxlen
argument_list|)
decl_stmt|;
name|memcpy
argument_list|(
name|data
argument_list|,
name|d
operator|->
name|connectData
operator|->
name|readBuffer
operator|.
name|constData
argument_list|()
argument_list|,
name|copy
argument_list|)
expr_stmt|;
name|d
operator|->
name|connectData
operator|->
name|readBuffer
operator|.
name|remove
argument_list|(
literal|0
argument_list|,
name|copy
argument_list|)
expr_stmt|;
name|QSOCKS5_DEBUG
operator|<<
literal|"read"
operator|<<
name|dump
argument_list|(
name|QByteArray
argument_list|(
name|data
argument_list|,
name|copy
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|copy
return|;
ifndef|#
directive|ifndef
name|QT_NO_UDPSOCKET
block|}
elseif|else
if|if
condition|(
name|d
operator|->
name|mode
operator|==
name|QSocks5SocketEnginePrivate
operator|::
name|UdpAssociateMode
condition|)
block|{
return|return
name|readDatagram
argument_list|(
name|data
argument_list|,
name|maxlen
argument_list|)
return|;
endif|#
directive|endif
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|write
name|qint64
name|QSocks5SocketEngine
operator|::
name|write
parameter_list|(
specifier|const
name|char
modifier|*
name|data
parameter_list|,
name|qint64
name|len
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QSocks5SocketEngine
argument_list|)
expr_stmt|;
name|QSOCKS5_Q_DEBUG
operator|<<
literal|"write"
operator|<<
name|dump
argument_list|(
name|QByteArray
argument_list|(
name|data
argument_list|,
name|len
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|mode
operator|==
name|QSocks5SocketEnginePrivate
operator|::
name|ConnectMode
condition|)
block|{
comment|// clamp down the amount of bytes to transfer at once
name|len
operator|=
name|qMin
argument_list|<
name|qint64
argument_list|>
argument_list|(
name|len
argument_list|,
name|MaxWriteBufferSize
argument_list|)
operator|-
name|d
operator|->
name|data
operator|->
name|controlSocket
operator|->
name|bytesToWrite
argument_list|()
expr_stmt|;
if|if
condition|(
name|len
operator|<=
literal|0
condition|)
return|return
literal|0
return|;
name|QByteArray
name|buf
init|=
name|QByteArray
operator|::
name|fromRawData
argument_list|(
name|data
argument_list|,
name|len
argument_list|)
decl_stmt|;
name|QByteArray
name|sealedBuf
decl_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|data
operator|->
name|authenticator
operator|->
name|seal
argument_list|(
name|buf
argument_list|,
operator|&
name|sealedBuf
argument_list|)
condition|)
block|{
comment|// ### Handle this error.
block|}
name|d
operator|->
name|data
operator|->
name|controlSocket
operator|->
name|write
argument_list|(
name|sealedBuf
argument_list|)
expr_stmt|;
name|d
operator|->
name|data
operator|->
name|controlSocket
operator|->
name|waitForBytesWritten
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|len
return|;
ifndef|#
directive|ifndef
name|QT_NO_UDPSOCKET
block|}
elseif|else
if|if
condition|(
name|d
operator|->
name|mode
operator|==
name|QSocks5SocketEnginePrivate
operator|::
name|UdpAssociateMode
condition|)
block|{
comment|// send to connected address
return|return
name|writeDatagram
argument_list|(
name|data
argument_list|,
name|len
argument_list|,
name|d
operator|->
name|peerAddress
argument_list|,
name|d
operator|->
name|peerPort
argument_list|)
return|;
endif|#
directive|endif
block|}
comment|//### set an error ???
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_UDPSOCKET
end_ifndef
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_NETWORKINTERFACE
end_ifndef
begin_function
DECL|function|joinMulticastGroup
name|bool
name|QSocks5SocketEngine
operator|::
name|joinMulticastGroup
parameter_list|(
specifier|const
name|QHostAddress
modifier|&
parameter_list|,
specifier|const
name|QNetworkInterface
modifier|&
parameter_list|)
block|{
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|UnsupportedSocketOperationError
argument_list|,
name|QLatin1String
argument_list|(
literal|"Operation on socket is not supported"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|leaveMulticastGroup
name|bool
name|QSocks5SocketEngine
operator|::
name|leaveMulticastGroup
parameter_list|(
specifier|const
name|QHostAddress
modifier|&
parameter_list|,
specifier|const
name|QNetworkInterface
modifier|&
parameter_list|)
block|{
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|UnsupportedSocketOperationError
argument_list|,
name|QLatin1String
argument_list|(
literal|"Operation on socket is not supported"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|multicastInterface
name|QNetworkInterface
name|QSocks5SocketEngine
operator|::
name|multicastInterface
parameter_list|()
specifier|const
block|{
return|return
name|QNetworkInterface
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setMulticastInterface
name|bool
name|QSocks5SocketEngine
operator|::
name|setMulticastInterface
parameter_list|(
specifier|const
name|QNetworkInterface
modifier|&
parameter_list|)
block|{
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|UnsupportedSocketOperationError
argument_list|,
name|QLatin1String
argument_list|(
literal|"Operation on socket is not supported"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_NETWORKINTERFACE
end_comment
begin_function
DECL|function|readDatagram
name|qint64
name|QSocks5SocketEngine
operator|::
name|readDatagram
parameter_list|(
name|char
modifier|*
name|data
parameter_list|,
name|qint64
name|maxlen
parameter_list|,
name|QHostAddress
modifier|*
name|addr
parameter_list|,
name|quint16
modifier|*
name|port
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QSocks5SocketEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|checkForDatagrams
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|udpData
operator|->
name|pendingDatagrams
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|0
return|;
name|QSocks5RevivedDatagram
name|datagram
init|=
name|d
operator|->
name|udpData
operator|->
name|pendingDatagrams
operator|.
name|dequeue
argument_list|()
decl_stmt|;
name|int
name|copyLen
init|=
name|qMin
argument_list|<
name|int
argument_list|>
argument_list|(
name|maxlen
argument_list|,
name|datagram
operator|.
name|data
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|memcpy
argument_list|(
name|data
argument_list|,
name|datagram
operator|.
name|data
operator|.
name|constData
argument_list|()
argument_list|,
name|copyLen
argument_list|)
expr_stmt|;
if|if
condition|(
name|addr
condition|)
operator|*
name|addr
operator|=
name|datagram
operator|.
name|address
expr_stmt|;
if|if
condition|(
name|port
condition|)
operator|*
name|port
operator|=
name|datagram
operator|.
name|port
expr_stmt|;
return|return
name|copyLen
return|;
block|}
end_function
begin_function
DECL|function|writeDatagram
name|qint64
name|QSocks5SocketEngine
operator|::
name|writeDatagram
parameter_list|(
specifier|const
name|char
modifier|*
name|data
parameter_list|,
name|qint64
name|len
parameter_list|,
specifier|const
name|QHostAddress
modifier|&
name|address
parameter_list|,
name|quint16
name|port
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QSocks5SocketEngine
argument_list|)
expr_stmt|;
comment|// it is possible to send with out first binding with udp, but socks5 requires a bind.
if|if
condition|(
operator|!
name|d
operator|->
name|data
condition|)
block|{
name|d
operator|->
name|initialize
argument_list|(
name|QSocks5SocketEnginePrivate
operator|::
name|UdpAssociateMode
argument_list|)
expr_stmt|;
comment|// all udp needs to be bound
if|if
condition|(
operator|!
name|bind
argument_list|(
name|QHostAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"0.0.0.0"
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
condition|)
block|{
comment|//### set error
return|return
operator|-
literal|1
return|;
block|}
block|}
name|QByteArray
name|outBuf
decl_stmt|;
name|outBuf
operator|.
name|reserve
argument_list|(
literal|270
operator|+
name|len
argument_list|)
expr_stmt|;
name|outBuf
index|[
literal|0
index|]
operator|=
literal|0x00
expr_stmt|;
name|outBuf
index|[
literal|1
index|]
operator|=
literal|0x00
expr_stmt|;
name|outBuf
index|[
literal|2
index|]
operator|=
literal|0x00
expr_stmt|;
if|if
condition|(
operator|!
name|qt_socks5_set_host_address_and_port
argument_list|(
name|address
argument_list|,
name|port
argument_list|,
operator|&
name|outBuf
argument_list|)
condition|)
block|{     }
name|outBuf
operator|+=
name|QByteArray
argument_list|(
name|data
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|QSOCKS5_DEBUG
operator|<<
literal|"sending"
operator|<<
name|dump
argument_list|(
name|outBuf
argument_list|)
expr_stmt|;
name|QByteArray
name|sealedBuf
decl_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|data
operator|->
name|authenticator
operator|->
name|seal
argument_list|(
name|outBuf
argument_list|,
operator|&
name|sealedBuf
argument_list|)
condition|)
block|{
name|QSOCKS5_DEBUG
operator|<<
literal|"sealing data failed"
expr_stmt|;
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|SocketAccessError
argument_list|,
name|d
operator|->
name|data
operator|->
name|authenticator
operator|->
name|errorString
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|d
operator|->
name|udpData
operator|->
name|udpSocket
operator|->
name|writeDatagram
argument_list|(
name|sealedBuf
argument_list|,
name|d
operator|->
name|udpData
operator|->
name|associateAddress
argument_list|,
name|d
operator|->
name|udpData
operator|->
name|associatePort
argument_list|)
operator|!=
name|sealedBuf
operator|.
name|size
argument_list|()
condition|)
block|{
comment|//### try frgamenting
if|if
condition|(
name|d
operator|->
name|udpData
operator|->
name|udpSocket
operator|->
name|error
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|DatagramTooLargeError
condition|)
name|setError
argument_list|(
name|d
operator|->
name|udpData
operator|->
name|udpSocket
operator|->
name|error
argument_list|()
argument_list|,
name|d
operator|->
name|udpData
operator|->
name|udpSocket
operator|->
name|errorString
argument_list|()
argument_list|)
expr_stmt|;
comment|//### else maybe more serious error
return|return
operator|-
literal|1
return|;
block|}
return|return
name|len
return|;
block|}
end_function
begin_function
DECL|function|hasPendingDatagrams
name|bool
name|QSocks5SocketEngine
operator|::
name|hasPendingDatagrams
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QSocks5SocketEngine
argument_list|)
expr_stmt|;
name|Q_INIT_CHECK
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|d
operator|->
name|checkForDatagrams
argument_list|()
expr_stmt|;
return|return
operator|!
name|d
operator|->
name|udpData
operator|->
name|pendingDatagrams
operator|.
name|isEmpty
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|pendingDatagramSize
name|qint64
name|QSocks5SocketEngine
operator|::
name|pendingDatagramSize
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QSocks5SocketEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|checkForDatagrams
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|udpData
operator|->
name|pendingDatagrams
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|d
operator|->
name|udpData
operator|->
name|pendingDatagrams
operator|.
name|head
argument_list|()
operator|.
name|data
operator|.
name|size
argument_list|()
return|;
return|return
literal|0
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_UDPSOCKET
end_comment
begin_function
DECL|function|bytesToWrite
name|qint64
name|QSocks5SocketEngine
operator|::
name|bytesToWrite
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QSocks5SocketEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|data
operator|&&
name|d
operator|->
name|data
operator|->
name|controlSocket
condition|)
block|{
return|return
name|d
operator|->
name|data
operator|->
name|controlSocket
operator|->
name|bytesToWrite
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
end_function
begin_function
DECL|function|option
name|int
name|QSocks5SocketEngine
operator|::
name|option
parameter_list|(
name|SocketOption
name|option
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QSocks5SocketEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|data
operator|&&
name|d
operator|->
name|data
operator|->
name|controlSocket
condition|)
block|{
comment|// convert the enum and call the real socket
if|if
condition|(
name|option
operator|==
name|QAbstractSocketEngine
operator|::
name|LowDelayOption
condition|)
return|return
name|d
operator|->
name|data
operator|->
name|controlSocket
operator|->
name|socketOption
argument_list|(
name|QAbstractSocket
operator|::
name|LowDelayOption
argument_list|)
operator|.
name|toInt
argument_list|()
return|;
if|if
condition|(
name|option
operator|==
name|QAbstractSocketEngine
operator|::
name|KeepAliveOption
condition|)
return|return
name|d
operator|->
name|data
operator|->
name|controlSocket
operator|->
name|socketOption
argument_list|(
name|QAbstractSocket
operator|::
name|KeepAliveOption
argument_list|)
operator|.
name|toInt
argument_list|()
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|setOption
name|bool
name|QSocks5SocketEngine
operator|::
name|setOption
parameter_list|(
name|SocketOption
name|option
parameter_list|,
name|int
name|value
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QSocks5SocketEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|data
operator|&&
name|d
operator|->
name|data
operator|->
name|controlSocket
condition|)
block|{
comment|// convert the enum and call the real socket
if|if
condition|(
name|option
operator|==
name|QAbstractSocketEngine
operator|::
name|LowDelayOption
condition|)
name|d
operator|->
name|data
operator|->
name|controlSocket
operator|->
name|setSocketOption
argument_list|(
name|QAbstractSocket
operator|::
name|LowDelayOption
argument_list|,
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|option
operator|==
name|QAbstractSocketEngine
operator|::
name|KeepAliveOption
condition|)
name|d
operator|->
name|data
operator|->
name|controlSocket
operator|->
name|setSocketOption
argument_list|(
name|QAbstractSocket
operator|::
name|KeepAliveOption
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|waitForConnected
name|bool
name|QSocks5SocketEnginePrivate
operator|::
name|waitForConnected
parameter_list|(
name|int
name|msecs
parameter_list|,
name|bool
modifier|*
name|timedOut
parameter_list|)
block|{
if|if
condition|(
name|data
operator|->
name|controlSocket
operator|->
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|UnconnectedState
condition|)
return|return
literal|false
return|;
specifier|const
name|Socks5State
name|wantedState
init|=
name|mode
operator|==
name|ConnectMode
condition|?
name|Connected
else|:
name|mode
operator|==
name|BindMode
condition|?
name|BindSuccess
else|:
name|UdpAssociateSuccess
decl_stmt|;
name|QElapsedTimer
name|stopWatch
decl_stmt|;
name|stopWatch
operator|.
name|start
argument_list|()
expr_stmt|;
while|while
condition|(
name|socks5State
operator|!=
name|wantedState
condition|)
block|{
if|if
condition|(
operator|!
name|data
operator|->
name|controlSocket
operator|->
name|waitForReadyRead
argument_list|(
name|qt_timeout_value
argument_list|(
name|msecs
argument_list|,
name|stopWatch
operator|.
name|elapsed
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|data
operator|->
name|controlSocket
operator|->
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|UnconnectedState
condition|)
return|return
literal|true
return|;
name|setErrorState
argument_list|(
name|QSocks5SocketEnginePrivate
operator|::
name|ControlSocketError
argument_list|)
expr_stmt|;
if|if
condition|(
name|timedOut
operator|&&
name|data
operator|->
name|controlSocket
operator|->
name|error
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|SocketTimeoutError
condition|)
operator|*
name|timedOut
operator|=
literal|true
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|waitForRead
name|bool
name|QSocks5SocketEngine
operator|::
name|waitForRead
parameter_list|(
name|int
name|msecs
parameter_list|,
name|bool
modifier|*
name|timedOut
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QSocks5SocketEngine
argument_list|)
expr_stmt|;
name|QSOCKS5_DEBUG
operator|<<
literal|"waitForRead"
operator|<<
name|msecs
expr_stmt|;
name|d
operator|->
name|readNotificationActivated
operator|=
literal|false
expr_stmt|;
name|QElapsedTimer
name|stopWatch
decl_stmt|;
name|stopWatch
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// are we connected yet?
if|if
condition|(
operator|!
name|d
operator|->
name|waitForConnected
argument_list|(
name|msecs
argument_list|,
name|timedOut
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|d
operator|->
name|data
operator|->
name|controlSocket
operator|->
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|UnconnectedState
condition|)
return|return
literal|true
return|;
comment|// we're connected
if|if
condition|(
name|d
operator|->
name|mode
operator|==
name|QSocks5SocketEnginePrivate
operator|::
name|ConnectMode
operator|||
name|d
operator|->
name|mode
operator|==
name|QSocks5SocketEnginePrivate
operator|::
name|BindMode
condition|)
block|{
while|while
condition|(
operator|!
name|d
operator|->
name|readNotificationActivated
condition|)
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|data
operator|->
name|controlSocket
operator|->
name|waitForReadyRead
argument_list|(
name|qt_timeout_value
argument_list|(
name|msecs
argument_list|,
name|stopWatch
operator|.
name|elapsed
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|data
operator|->
name|controlSocket
operator|->
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|UnconnectedState
condition|)
return|return
literal|true
return|;
name|setError
argument_list|(
name|d
operator|->
name|data
operator|->
name|controlSocket
operator|->
name|error
argument_list|()
argument_list|,
name|d
operator|->
name|data
operator|->
name|controlSocket
operator|->
name|errorString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|timedOut
operator|&&
name|d
operator|->
name|data
operator|->
name|controlSocket
operator|->
name|error
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|SocketTimeoutError
condition|)
operator|*
name|timedOut
operator|=
literal|true
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
ifndef|#
directive|ifndef
name|QT_NO_UDPSOCKET
block|}
else|else
block|{
while|while
condition|(
operator|!
name|d
operator|->
name|readNotificationActivated
condition|)
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|udpData
operator|->
name|udpSocket
operator|->
name|waitForReadyRead
argument_list|(
name|qt_timeout_value
argument_list|(
name|msecs
argument_list|,
name|stopWatch
operator|.
name|elapsed
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|setError
argument_list|(
name|d
operator|->
name|udpData
operator|->
name|udpSocket
operator|->
name|error
argument_list|()
argument_list|,
name|d
operator|->
name|udpData
operator|->
name|udpSocket
operator|->
name|errorString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|timedOut
operator|&&
name|d
operator|->
name|udpData
operator|->
name|udpSocket
operator|->
name|error
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|SocketTimeoutError
condition|)
operator|*
name|timedOut
operator|=
literal|true
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
endif|#
directive|endif
comment|// QT_NO_UDPSOCKET
block|}
name|bool
name|ret
init|=
name|d
operator|->
name|readNotificationActivated
decl_stmt|;
name|d
operator|->
name|readNotificationActivated
operator|=
literal|false
expr_stmt|;
name|QSOCKS5_DEBUG
operator|<<
literal|"waitForRead returned"
operator|<<
name|ret
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|waitForWrite
name|bool
name|QSocks5SocketEngine
operator|::
name|waitForWrite
parameter_list|(
name|int
name|msecs
parameter_list|,
name|bool
modifier|*
name|timedOut
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QSocks5SocketEngine
argument_list|)
expr_stmt|;
name|QSOCKS5_DEBUG
operator|<<
literal|"waitForWrite"
operator|<<
name|msecs
expr_stmt|;
name|QElapsedTimer
name|stopWatch
decl_stmt|;
name|stopWatch
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// are we connected yet?
if|if
condition|(
operator|!
name|d
operator|->
name|waitForConnected
argument_list|(
name|msecs
argument_list|,
name|timedOut
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|d
operator|->
name|data
operator|->
name|controlSocket
operator|->
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|UnconnectedState
condition|)
return|return
literal|true
return|;
comment|// we're connected
comment|// flush any bytes we may still have buffered in the time that we have left
if|if
condition|(
name|d
operator|->
name|data
operator|->
name|controlSocket
operator|->
name|bytesToWrite
argument_list|()
condition|)
name|d
operator|->
name|data
operator|->
name|controlSocket
operator|->
name|waitForBytesWritten
argument_list|(
name|qt_timeout_value
argument_list|(
name|msecs
argument_list|,
name|stopWatch
operator|.
name|elapsed
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
operator|(
name|msecs
operator|==
operator|-
literal|1
operator|||
name|stopWatch
operator|.
name|elapsed
argument_list|()
operator|<
name|msecs
operator|)
operator|&&
name|d
operator|->
name|data
operator|->
name|controlSocket
operator|->
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|ConnectedState
operator|&&
name|d
operator|->
name|data
operator|->
name|controlSocket
operator|->
name|bytesToWrite
argument_list|()
operator|>=
name|MaxWriteBufferSize
condition|)
name|d
operator|->
name|data
operator|->
name|controlSocket
operator|->
name|waitForBytesWritten
argument_list|(
name|qt_timeout_value
argument_list|(
name|msecs
argument_list|,
name|stopWatch
operator|.
name|elapsed
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|data
operator|->
name|controlSocket
operator|->
name|bytesToWrite
argument_list|()
operator|<
name|MaxWriteBufferSize
return|;
block|}
end_function
begin_function
DECL|function|waitForReadOrWrite
name|bool
name|QSocks5SocketEngine
operator|::
name|waitForReadOrWrite
parameter_list|(
name|bool
modifier|*
name|readyToRead
parameter_list|,
name|bool
modifier|*
name|readyToWrite
parameter_list|,
name|bool
name|checkRead
parameter_list|,
name|bool
name|checkWrite
parameter_list|,
name|int
name|msecs
parameter_list|,
name|bool
modifier|*
name|timedOut
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|checkRead
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|checkWrite
condition|)
block|{
name|bool
name|canRead
init|=
name|waitForRead
argument_list|(
name|msecs
argument_list|,
name|timedOut
argument_list|)
decl_stmt|;
if|if
condition|(
name|readyToRead
condition|)
operator|*
name|readyToRead
operator|=
name|canRead
expr_stmt|;
return|return
name|canRead
return|;
block|}
name|bool
name|canWrite
init|=
name|waitForWrite
argument_list|(
name|msecs
argument_list|,
name|timedOut
argument_list|)
decl_stmt|;
if|if
condition|(
name|readyToWrite
condition|)
operator|*
name|readyToWrite
operator|=
name|canWrite
expr_stmt|;
return|return
name|canWrite
return|;
block|}
end_function
begin_function
DECL|function|isReadNotificationEnabled
name|bool
name|QSocks5SocketEngine
operator|::
name|isReadNotificationEnabled
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QSocks5SocketEngine
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|readNotificationEnabled
return|;
block|}
end_function
begin_function
DECL|function|setReadNotificationEnabled
name|void
name|QSocks5SocketEngine
operator|::
name|setReadNotificationEnabled
parameter_list|(
name|bool
name|enable
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QSocks5SocketEngine
argument_list|)
expr_stmt|;
name|QSOCKS5_Q_DEBUG
operator|<<
literal|"setReadNotificationEnabled("
operator|<<
name|enable
operator|<<
literal|')'
expr_stmt|;
name|bool
name|emitSignal
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|readNotificationEnabled
operator|&&
name|enable
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|mode
operator|==
name|QSocks5SocketEnginePrivate
operator|::
name|ConnectMode
condition|)
name|emitSignal
operator|=
operator|!
name|d
operator|->
name|connectData
operator|->
name|readBuffer
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_UDPSOCKET
elseif|else
if|if
condition|(
name|d
operator|->
name|mode
operator|==
name|QSocks5SocketEnginePrivate
operator|::
name|UdpAssociateMode
condition|)
name|emitSignal
operator|=
operator|!
name|d
operator|->
name|udpData
operator|->
name|pendingDatagrams
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
endif|#
directive|endif
elseif|else
if|if
condition|(
name|d
operator|->
name|mode
operator|==
name|QSocks5SocketEnginePrivate
operator|::
name|BindMode
operator|&&
name|d
operator|->
name|socketState
operator|==
name|QAbstractSocket
operator|::
name|ListeningState
operator|&&
name|d
operator|->
name|socks5State
operator|==
name|QSocks5SocketEnginePrivate
operator|::
name|BindSuccess
condition|)
name|emitSignal
operator|=
literal|true
expr_stmt|;
block|}
name|d
operator|->
name|readNotificationEnabled
operator|=
name|enable
expr_stmt|;
if|if
condition|(
name|emitSignal
condition|)
name|d
operator|->
name|emitReadNotification
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isWriteNotificationEnabled
name|bool
name|QSocks5SocketEngine
operator|::
name|isWriteNotificationEnabled
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QSocks5SocketEngine
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|writeNotificationEnabled
return|;
block|}
end_function
begin_function
DECL|function|setWriteNotificationEnabled
name|void
name|QSocks5SocketEngine
operator|::
name|setWriteNotificationEnabled
parameter_list|(
name|bool
name|enable
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QSocks5SocketEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|writeNotificationEnabled
operator|=
name|enable
expr_stmt|;
if|if
condition|(
name|enable
operator|&&
name|d
operator|->
name|socketState
operator|==
name|QAbstractSocket
operator|::
name|ConnectedState
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|mode
operator|==
name|QSocks5SocketEnginePrivate
operator|::
name|ConnectMode
operator|&&
name|d
operator|->
name|data
operator|->
name|controlSocket
operator|->
name|bytesToWrite
argument_list|()
condition|)
return|return;
comment|// will be emitted as a result of bytes written
name|d
operator|->
name|emitWriteNotification
argument_list|()
expr_stmt|;
name|d
operator|->
name|writeNotificationActivated
operator|=
literal|false
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|isExceptionNotificationEnabled
name|bool
name|QSocks5SocketEngine
operator|::
name|isExceptionNotificationEnabled
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QSocks5SocketEngine
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|exceptNotificationEnabled
return|;
block|}
end_function
begin_function
DECL|function|setExceptionNotificationEnabled
name|void
name|QSocks5SocketEngine
operator|::
name|setExceptionNotificationEnabled
parameter_list|(
name|bool
name|enable
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QSocks5SocketEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|exceptNotificationEnabled
operator|=
name|enable
expr_stmt|;
block|}
end_function
begin_function
name|QAbstractSocketEngine
modifier|*
DECL|function|createSocketEngine
name|QSocks5SocketEngineHandler
operator|::
name|createSocketEngine
parameter_list|(
name|QAbstractSocket
operator|::
name|SocketType
name|socketType
parameter_list|,
specifier|const
name|QNetworkProxy
modifier|&
name|proxy
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|socketType
argument_list|)
expr_stmt|;
comment|// proxy type must have been resolved by now
if|if
condition|(
name|proxy
operator|.
name|type
argument_list|()
operator|!=
name|QNetworkProxy
operator|::
name|Socks5Proxy
condition|)
block|{
name|QSOCKS5_DEBUG
operator|<<
literal|"not proxying"
expr_stmt|;
return|return
literal|0
return|;
block|}
name|QScopedPointer
argument_list|<
name|QSocks5SocketEngine
argument_list|>
name|engine
argument_list|(
operator|new
name|QSocks5SocketEngine
argument_list|(
name|parent
argument_list|)
argument_list|)
decl_stmt|;
name|engine
operator|->
name|setProxy
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
return|return
name|engine
operator|.
name|take
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|createSocketEngine
name|QAbstractSocketEngine
modifier|*
name|QSocks5SocketEngineHandler
operator|::
name|createSocketEngine
parameter_list|(
name|int
name|socketDescriptor
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
block|{
name|QSOCKS5_DEBUG
operator|<<
literal|"createSocketEngine"
operator|<<
name|socketDescriptor
expr_stmt|;
if|if
condition|(
name|socks5BindStore
argument_list|()
operator|->
name|contains
argument_list|(
name|socketDescriptor
argument_list|)
condition|)
block|{
name|QSOCKS5_DEBUG
operator|<<
literal|"bind store contains"
operator|<<
name|socketDescriptor
expr_stmt|;
return|return
operator|new
name|QSocks5SocketEngine
argument_list|(
name|parent
argument_list|)
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_SOCKS5
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
