begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtNetwork module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|//#define QNATIVESOCKETENGINE_DEBUG
end_comment
begin_include
include|#
directive|include
file|"qnativesocketengine_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qnet_unix_p.h"
end_include
begin_include
include|#
directive|include
file|"qiodevice.h"
end_include
begin_include
include|#
directive|include
file|"qhostaddress.h"
end_include
begin_include
include|#
directive|include
file|"qelapsedtimer.h"
end_include
begin_include
include|#
directive|include
file|"qvarlengtharray.h"
end_include
begin_include
include|#
directive|include
file|"qnetworkinterface.h"
end_include
begin_include
include|#
directive|include
file|<time.h>
end_include
begin_include
include|#
directive|include
file|<errno.h>
end_include
begin_include
include|#
directive|include
file|<fcntl.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_IPV6IFNAME
end_ifndef
begin_include
include|#
directive|include
file|<net/if.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_IPV6IFNAME
end_ifndef
begin_include
include|#
directive|include
file|<net/if.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|QT_LINUXBASE
end_ifdef
begin_include
include|#
directive|include
file|<arpa/inet.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
name|QNATIVESOCKETENGINE_DEBUG
end_if
begin_include
include|#
directive|include
file|<qstring.h>
end_include
begin_include
include|#
directive|include
file|<ctype.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<netinet/tcp.h>
end_include
begin_function
name|QT_BEGIN_NAMESPACE
if|#
directive|if
name|defined
name|QNATIVESOCKETENGINE_DEBUG
comment|/*     Returns a human readable representation of the first \a len     characters in \a data. */
DECL|function|qt_prettyDebug
specifier|static
name|QByteArray
name|qt_prettyDebug
parameter_list|(
specifier|const
name|char
modifier|*
name|data
parameter_list|,
name|int
name|len
parameter_list|,
name|int
name|maxSize
parameter_list|)
block|{
if|if
condition|(
operator|!
name|data
condition|)
return|return
literal|"(null)"
return|;
name|QByteArray
name|out
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
name|char
name|c
init|=
name|data
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|isprint
argument_list|(
name|c
argument_list|)
condition|)
block|{
name|out
operator|+=
name|c
expr_stmt|;
block|}
else|else
switch|switch
condition|(
name|c
condition|)
block|{
case|case
literal|'\n'
case|:
name|out
operator|+=
literal|"\\n"
expr_stmt|;
break|break;
case|case
literal|'\r'
case|:
name|out
operator|+=
literal|"\\r"
expr_stmt|;
break|break;
case|case
literal|'\t'
case|:
name|out
operator|+=
literal|"\\t"
expr_stmt|;
break|break;
default|default:
name|QString
name|tmp
decl_stmt|;
name|tmp
operator|.
name|sprintf
argument_list|(
literal|"\\%o"
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|out
operator|+=
name|tmp
operator|.
name|toLatin1
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|len
operator|<
name|maxSize
condition|)
name|out
operator|+=
literal|"..."
expr_stmt|;
return|return
name|out
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|qt_ignore_sigpipe
specifier|static
name|void
name|qt_ignore_sigpipe
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|Q_NO_POSIX_SIGNALS
comment|// Set to ignore SIGPIPE once only.
specifier|static
name|QBasicAtomicInt
name|atom
init|=
name|Q_BASIC_ATOMIC_INITIALIZER
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|atom
operator|.
name|testAndSetRelaxed
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
condition|)
block|{
name|struct
name|sigaction
name|noaction
decl_stmt|;
name|memset
argument_list|(
operator|&
name|noaction
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|noaction
argument_list|)
argument_list|)
expr_stmt|;
name|noaction
operator|.
name|sa_handler
operator|=
name|SIG_IGN
expr_stmt|;
operator|::
name|sigaction
argument_list|(
name|SIGPIPE
argument_list|,
operator|&
name|noaction
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|#
directive|else
comment|// Posix signals are not supported by the underlying platform
comment|// so we don't need to ignore sigpipe signal explicitly
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*     Extracts the port and address from a sockaddr, and stores them in     \a port and \a addr if they are non-null. */
end_comment
begin_function
DECL|function|qt_socket_getPortAndAddress
specifier|static
specifier|inline
name|void
name|qt_socket_getPortAndAddress
parameter_list|(
specifier|const
name|qt_sockaddr
modifier|*
name|s
parameter_list|,
name|quint16
modifier|*
name|port
parameter_list|,
name|QHostAddress
modifier|*
name|addr
parameter_list|)
block|{
if|if
condition|(
name|s
operator|->
name|a
operator|.
name|sa_family
operator|==
name|AF_INET6
condition|)
block|{
name|Q_IPV6ADDR
name|tmp
decl_stmt|;
name|memcpy
argument_list|(
operator|&
name|tmp
argument_list|,
operator|&
name|s
operator|->
name|a6
operator|.
name|sin6_addr
argument_list|,
sizeof|sizeof
argument_list|(
name|tmp
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|addr
condition|)
block|{
name|QHostAddress
name|tmpAddress
decl_stmt|;
name|tmpAddress
operator|.
name|setAddress
argument_list|(
name|tmp
argument_list|)
expr_stmt|;
operator|*
name|addr
operator|=
name|tmpAddress
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_IPV6IFNAME
name|char
name|scopeid
index|[
name|IFNAMSIZ
index|]
decl_stmt|;
if|if
condition|(
operator|::
name|if_indextoname
argument_list|(
name|s
operator|->
name|a6
operator|.
name|sin6_scope_id
argument_list|,
name|scopeid
argument_list|)
condition|)
block|{
name|addr
operator|->
name|setScopeId
argument_list|(
name|QLatin1String
argument_list|(
name|scopeid
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
endif|#
directive|endif
name|addr
operator|->
name|setScopeId
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|s
operator|->
name|a6
operator|.
name|sin6_scope_id
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|port
condition|)
operator|*
name|port
operator|=
name|ntohs
argument_list|(
name|s
operator|->
name|a6
operator|.
name|sin6_port
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|port
condition|)
operator|*
name|port
operator|=
name|ntohs
argument_list|(
name|s
operator|->
name|a4
operator|.
name|sin_port
argument_list|)
expr_stmt|;
if|if
condition|(
name|addr
condition|)
block|{
name|QHostAddress
name|tmpAddress
decl_stmt|;
name|tmpAddress
operator|.
name|setAddress
argument_list|(
name|ntohl
argument_list|(
name|s
operator|->
name|a4
operator|.
name|sin_addr
operator|.
name|s_addr
argument_list|)
argument_list|)
expr_stmt|;
operator|*
name|addr
operator|=
name|tmpAddress
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*! \internal      Creates and returns a new socket descriptor of type \a socketType     and \a socketProtocol.  Returns -1 on failure. */
end_comment
begin_function
DECL|function|createNewSocket
name|bool
name|QNativeSocketEnginePrivate
operator|::
name|createNewSocket
parameter_list|(
name|QAbstractSocket
operator|::
name|SocketType
name|socketType
parameter_list|,
name|QAbstractSocket
operator|::
name|NetworkLayerProtocol
modifier|&
name|socketProtocol
parameter_list|)
block|{
name|int
name|protocol
init|=
operator|(
name|socketProtocol
operator|==
name|QAbstractSocket
operator|::
name|IPv6Protocol
operator|||
name|socketProtocol
operator|==
name|QAbstractSocket
operator|::
name|AnyIPProtocol
operator|)
condition|?
name|AF_INET6
else|:
name|AF_INET
decl_stmt|;
name|int
name|type
init|=
operator|(
name|socketType
operator|==
name|QAbstractSocket
operator|::
name|UdpSocket
operator|)
condition|?
name|SOCK_DGRAM
else|:
name|SOCK_STREAM
decl_stmt|;
name|int
name|socket
init|=
name|qt_safe_socket
argument_list|(
name|protocol
argument_list|,
name|type
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|socket
operator|<=
literal|0
operator|&&
name|socketProtocol
operator|==
name|QAbstractSocket
operator|::
name|AnyIPProtocol
operator|&&
name|errno
operator|==
name|EAFNOSUPPORT
condition|)
block|{
name|protocol
operator|=
name|AF_INET
expr_stmt|;
name|socket
operator|=
name|qt_safe_socket
argument_list|(
name|protocol
argument_list|,
name|type
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|socketProtocol
operator|=
name|QAbstractSocket
operator|::
name|IPv4Protocol
expr_stmt|;
block|}
if|if
condition|(
name|socket
operator|<=
literal|0
condition|)
block|{
switch|switch
condition|(
name|errno
condition|)
block|{
case|case
name|EPROTONOSUPPORT
case|:
case|case
name|EAFNOSUPPORT
case|:
case|case
name|EINVAL
case|:
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|UnsupportedSocketOperationError
argument_list|,
name|ProtocolUnsupportedErrorString
argument_list|)
expr_stmt|;
break|break;
case|case
name|ENFILE
case|:
case|case
name|EMFILE
case|:
case|case
name|ENOBUFS
case|:
case|case
name|ENOMEM
case|:
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|SocketResourceError
argument_list|,
name|ResourceErrorString
argument_list|)
expr_stmt|;
break|break;
case|case
name|EACCES
case|:
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|SocketAccessError
argument_list|,
name|AccessErrorString
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
return|return
literal|false
return|;
block|}
name|socketDescriptor
operator|=
name|socket
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/*     Returns the value of the socket option \a opt. */
end_comment
begin_function
DECL|function|option
name|int
name|QNativeSocketEnginePrivate
operator|::
name|option
parameter_list|(
name|QNativeSocketEngine
operator|::
name|SocketOption
name|opt
parameter_list|)
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QNativeSocketEngine
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|q
operator|->
name|isValid
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
name|int
name|n
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|level
init|=
name|SOL_SOCKET
decl_stmt|;
comment|// default
switch|switch
condition|(
name|opt
condition|)
block|{
case|case
name|QNativeSocketEngine
operator|::
name|ReceiveBufferSocketOption
case|:
name|n
operator|=
name|SO_RCVBUF
expr_stmt|;
break|break;
case|case
name|QNativeSocketEngine
operator|::
name|SendBufferSocketOption
case|:
name|n
operator|=
name|SO_SNDBUF
expr_stmt|;
break|break;
case|case
name|QNativeSocketEngine
operator|::
name|NonBlockingSocketOption
case|:
break|break;
case|case
name|QNativeSocketEngine
operator|::
name|BroadcastSocketOption
case|:
break|break;
case|case
name|QNativeSocketEngine
operator|::
name|AddressReusable
case|:
name|n
operator|=
name|SO_REUSEADDR
expr_stmt|;
break|break;
case|case
name|QNativeSocketEngine
operator|::
name|BindExclusively
case|:
return|return
literal|true
return|;
case|case
name|QNativeSocketEngine
operator|::
name|ReceiveOutOfBandData
case|:
name|n
operator|=
name|SO_OOBINLINE
expr_stmt|;
break|break;
case|case
name|QNativeSocketEngine
operator|::
name|LowDelayOption
case|:
name|level
operator|=
name|IPPROTO_TCP
expr_stmt|;
name|n
operator|=
name|TCP_NODELAY
expr_stmt|;
break|break;
case|case
name|QNativeSocketEngine
operator|::
name|KeepAliveOption
case|:
name|n
operator|=
name|SO_KEEPALIVE
expr_stmt|;
break|break;
case|case
name|QNativeSocketEngine
operator|::
name|MulticastTtlOption
case|:
if|if
condition|(
name|socketProtocol
operator|==
name|QAbstractSocket
operator|::
name|IPv6Protocol
condition|)
block|{
name|level
operator|=
name|IPPROTO_IPV6
expr_stmt|;
name|n
operator|=
name|IPV6_MULTICAST_HOPS
expr_stmt|;
block|}
else|else
block|{
name|level
operator|=
name|IPPROTO_IP
expr_stmt|;
name|n
operator|=
name|IP_MULTICAST_TTL
expr_stmt|;
block|}
break|break;
case|case
name|QNativeSocketEngine
operator|::
name|MulticastLoopbackOption
case|:
if|if
condition|(
name|socketProtocol
operator|==
name|QAbstractSocket
operator|::
name|IPv6Protocol
condition|)
block|{
name|level
operator|=
name|IPPROTO_IPV6
expr_stmt|;
name|n
operator|=
name|IPV6_MULTICAST_LOOP
expr_stmt|;
block|}
else|else
block|{
name|level
operator|=
name|IPPROTO_IP
expr_stmt|;
name|n
operator|=
name|IP_MULTICAST_LOOP
expr_stmt|;
block|}
break|break;
case|case
name|QNativeSocketEngine
operator|::
name|TypeOfServiceOption
case|:
if|if
condition|(
name|socketProtocol
operator|==
name|QAbstractSocket
operator|::
name|IPv4Protocol
condition|)
block|{
name|level
operator|=
name|IPPROTO_IP
expr_stmt|;
name|n
operator|=
name|IP_TOS
expr_stmt|;
block|}
break|break;
block|}
name|int
name|v
init|=
operator|-
literal|1
decl_stmt|;
name|QT_SOCKOPTLEN_T
name|len
init|=
sizeof|sizeof
argument_list|(
name|v
argument_list|)
decl_stmt|;
if|if
condition|(
operator|::
name|getsockopt
argument_list|(
name|socketDescriptor
argument_list|,
name|level
argument_list|,
name|n
argument_list|,
operator|(
name|char
operator|*
operator|)
operator|&
name|v
argument_list|,
operator|&
name|len
argument_list|)
operator|!=
operator|-
literal|1
condition|)
return|return
name|v
return|;
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_comment
comment|/*     Sets the socket option \a opt to \a v. */
end_comment
begin_function
DECL|function|setOption
name|bool
name|QNativeSocketEnginePrivate
operator|::
name|setOption
parameter_list|(
name|QNativeSocketEngine
operator|::
name|SocketOption
name|opt
parameter_list|,
name|int
name|v
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QNativeSocketEngine
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|q
operator|->
name|isValid
argument_list|()
condition|)
return|return
literal|false
return|;
name|int
name|n
init|=
literal|0
decl_stmt|;
name|int
name|level
init|=
name|SOL_SOCKET
decl_stmt|;
comment|// default
switch|switch
condition|(
name|opt
condition|)
block|{
case|case
name|QNativeSocketEngine
operator|::
name|ReceiveBufferSocketOption
case|:
name|n
operator|=
name|SO_RCVBUF
expr_stmt|;
break|break;
case|case
name|QNativeSocketEngine
operator|::
name|SendBufferSocketOption
case|:
name|n
operator|=
name|SO_SNDBUF
expr_stmt|;
break|break;
case|case
name|QNativeSocketEngine
operator|::
name|BroadcastSocketOption
case|:
name|n
operator|=
name|SO_BROADCAST
expr_stmt|;
break|break;
case|case
name|QNativeSocketEngine
operator|::
name|NonBlockingSocketOption
case|:
block|{
comment|// Make the socket nonblocking.
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_VXWORKS
argument_list|)
name|int
name|flags
init|=
operator|::
name|fcntl
argument_list|(
name|socketDescriptor
argument_list|,
name|F_GETFL
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|flags
operator|==
operator|-
literal|1
condition|)
block|{
ifdef|#
directive|ifdef
name|QNATIVESOCKETENGINE_DEBUG
name|perror
argument_list|(
literal|"QNativeSocketEnginePrivate::setOption(): fcntl(F_GETFL) failed"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|::
name|fcntl
argument_list|(
name|socketDescriptor
argument_list|,
name|F_SETFL
argument_list|,
name|flags
operator||
name|O_NONBLOCK
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
ifdef|#
directive|ifdef
name|QNATIVESOCKETENGINE_DEBUG
name|perror
argument_list|(
literal|"QNativeSocketEnginePrivate::setOption(): fcntl(F_SETFL) failed"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|false
return|;
block|}
else|#
directive|else
comment|// Q_OS_VXWORKS
name|int
name|onoff
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|qt_safe_ioctl
argument_list|(
name|socketDescriptor
argument_list|,
name|FIONBIO
argument_list|,
operator|&
name|onoff
argument_list|)
operator|<
literal|0
condition|)
block|{
ifdef|#
directive|ifdef
name|QNATIVESOCKETENGINE_DEBUG
name|perror
argument_list|(
literal|"QNativeSocketEnginePrivate::setOption(): ioctl(FIONBIO, 1) failed"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|false
return|;
block|}
endif|#
directive|endif
comment|// Q_OS_VXWORKS
return|return
literal|true
return|;
block|}
case|case
name|QNativeSocketEngine
operator|::
name|AddressReusable
case|:
if|#
directive|if
name|defined
argument_list|(
name|SO_REUSEPORT
argument_list|)
comment|// on OS X, SO_REUSEADDR isn't sufficient to allow multiple binds to the
comment|// same port (which is useful for multicast UDP). SO_REUSEPORT is, but
comment|// we most definitely do not want to use this for TCP. See QTBUG-6305.
if|if
condition|(
name|socketType
operator|==
name|QAbstractSocket
operator|::
name|UdpSocket
condition|)
name|n
operator|=
name|SO_REUSEPORT
expr_stmt|;
else|else
name|n
operator|=
name|SO_REUSEADDR
expr_stmt|;
else|#
directive|else
name|n
operator|=
name|SO_REUSEADDR
expr_stmt|;
endif|#
directive|endif
break|break;
case|case
name|QNativeSocketEngine
operator|::
name|BindExclusively
case|:
return|return
literal|true
return|;
case|case
name|QNativeSocketEngine
operator|::
name|ReceiveOutOfBandData
case|:
name|n
operator|=
name|SO_OOBINLINE
expr_stmt|;
break|break;
case|case
name|QNativeSocketEngine
operator|::
name|LowDelayOption
case|:
name|level
operator|=
name|IPPROTO_TCP
expr_stmt|;
name|n
operator|=
name|TCP_NODELAY
expr_stmt|;
break|break;
case|case
name|QNativeSocketEngine
operator|::
name|KeepAliveOption
case|:
name|n
operator|=
name|SO_KEEPALIVE
expr_stmt|;
break|break;
case|case
name|QNativeSocketEngine
operator|::
name|MulticastTtlOption
case|:
if|if
condition|(
name|socketProtocol
operator|==
name|QAbstractSocket
operator|::
name|IPv6Protocol
condition|)
block|{
name|level
operator|=
name|IPPROTO_IPV6
expr_stmt|;
name|n
operator|=
name|IPV6_MULTICAST_HOPS
expr_stmt|;
block|}
else|else
block|{
name|level
operator|=
name|IPPROTO_IP
expr_stmt|;
name|n
operator|=
name|IP_MULTICAST_TTL
expr_stmt|;
block|}
break|break;
case|case
name|QNativeSocketEngine
operator|::
name|MulticastLoopbackOption
case|:
if|if
condition|(
name|socketProtocol
operator|==
name|QAbstractSocket
operator|::
name|IPv6Protocol
condition|)
block|{
name|level
operator|=
name|IPPROTO_IPV6
expr_stmt|;
name|n
operator|=
name|IPV6_MULTICAST_LOOP
expr_stmt|;
block|}
else|else
block|{
name|level
operator|=
name|IPPROTO_IP
expr_stmt|;
name|n
operator|=
name|IP_MULTICAST_LOOP
expr_stmt|;
block|}
break|break;
case|case
name|QNativeSocketEngine
operator|::
name|TypeOfServiceOption
case|:
if|if
condition|(
name|socketProtocol
operator|==
name|QAbstractSocket
operator|::
name|IPv4Protocol
condition|)
block|{
name|level
operator|=
name|IPPROTO_IP
expr_stmt|;
name|n
operator|=
name|IP_TOS
expr_stmt|;
block|}
break|break;
block|}
return|return
operator|::
name|setsockopt
argument_list|(
name|socketDescriptor
argument_list|,
name|level
argument_list|,
name|n
argument_list|,
operator|(
name|char
operator|*
operator|)
operator|&
name|v
argument_list|,
sizeof|sizeof
argument_list|(
name|v
argument_list|)
argument_list|)
operator|==
literal|0
return|;
block|}
end_function
begin_function
DECL|function|nativeConnect
name|bool
name|QNativeSocketEnginePrivate
operator|::
name|nativeConnect
parameter_list|(
specifier|const
name|QHostAddress
modifier|&
name|addr
parameter_list|,
name|quint16
name|port
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QNATIVESOCKETENGINE_DEBUG
name|qDebug
argument_list|(
literal|"QNativeSocketEnginePrivate::nativeConnect() : %d "
argument_list|,
name|socketDescriptor
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|struct
name|sockaddr_in
name|sockAddrIPv4
decl_stmt|;
name|struct
name|sockaddr
modifier|*
name|sockAddrPtr
init|=
literal|0
decl_stmt|;
name|QT_SOCKLEN_T
name|sockAddrSize
init|=
literal|0
decl_stmt|;
name|struct
name|sockaddr_in6
name|sockAddrIPv6
decl_stmt|;
if|if
condition|(
name|addr
operator|.
name|protocol
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|IPv6Protocol
condition|)
block|{
name|memset
argument_list|(
operator|&
name|sockAddrIPv6
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|sockAddrIPv6
argument_list|)
argument_list|)
expr_stmt|;
name|sockAddrIPv6
operator|.
name|sin6_family
operator|=
name|AF_INET6
expr_stmt|;
name|sockAddrIPv6
operator|.
name|sin6_port
operator|=
name|htons
argument_list|(
name|port
argument_list|)
expr_stmt|;
name|QString
name|scopeid
init|=
name|addr
operator|.
name|scopeId
argument_list|()
decl_stmt|;
name|bool
name|ok
decl_stmt|;
name|sockAddrIPv6
operator|.
name|sin6_scope_id
operator|=
name|scopeid
operator|.
name|toInt
argument_list|(
operator|&
name|ok
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_IPV6IFNAME
if|if
condition|(
operator|!
name|ok
condition|)
name|sockAddrIPv6
operator|.
name|sin6_scope_id
operator|=
operator|::
name|if_nametoindex
argument_list|(
name|scopeid
operator|.
name|toLatin1
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|Q_IPV6ADDR
name|ip6
init|=
name|addr
operator|.
name|toIPv6Address
argument_list|()
decl_stmt|;
name|memcpy
argument_list|(
operator|&
name|sockAddrIPv6
operator|.
name|sin6_addr
operator|.
name|s6_addr
argument_list|,
operator|&
name|ip6
argument_list|,
sizeof|sizeof
argument_list|(
name|ip6
argument_list|)
argument_list|)
expr_stmt|;
name|sockAddrSize
operator|=
sizeof|sizeof
argument_list|(
name|sockAddrIPv6
argument_list|)
expr_stmt|;
name|sockAddrPtr
operator|=
operator|(
expr|struct
name|sockaddr
operator|*
operator|)
operator|&
name|sockAddrIPv6
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|addr
operator|.
name|protocol
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|IPv4Protocol
condition|)
block|{
name|memset
argument_list|(
operator|&
name|sockAddrIPv4
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|sockAddrIPv4
argument_list|)
argument_list|)
expr_stmt|;
name|sockAddrIPv4
operator|.
name|sin_family
operator|=
name|AF_INET
expr_stmt|;
name|sockAddrIPv4
operator|.
name|sin_port
operator|=
name|htons
argument_list|(
name|port
argument_list|)
expr_stmt|;
name|sockAddrIPv4
operator|.
name|sin_addr
operator|.
name|s_addr
operator|=
name|htonl
argument_list|(
name|addr
operator|.
name|toIPv4Address
argument_list|()
argument_list|)
expr_stmt|;
name|sockAddrSize
operator|=
sizeof|sizeof
argument_list|(
name|sockAddrIPv4
argument_list|)
expr_stmt|;
name|sockAddrPtr
operator|=
operator|(
expr|struct
name|sockaddr
operator|*
operator|)
operator|&
name|sockAddrIPv4
expr_stmt|;
block|}
else|else
block|{
comment|// unreachable
block|}
name|int
name|connectResult
init|=
name|qt_safe_connect
argument_list|(
name|socketDescriptor
argument_list|,
name|sockAddrPtr
argument_list|,
name|sockAddrSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|connectResult
operator|==
operator|-
literal|1
condition|)
block|{
switch|switch
condition|(
name|errno
condition|)
block|{
case|case
name|EISCONN
case|:
name|socketState
operator|=
name|QAbstractSocket
operator|::
name|ConnectedState
expr_stmt|;
break|break;
case|case
name|ECONNREFUSED
case|:
case|case
name|EINVAL
case|:
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|ConnectionRefusedError
argument_list|,
name|ConnectionRefusedErrorString
argument_list|)
expr_stmt|;
name|socketState
operator|=
name|QAbstractSocket
operator|::
name|UnconnectedState
expr_stmt|;
break|break;
case|case
name|ETIMEDOUT
case|:
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|NetworkError
argument_list|,
name|ConnectionTimeOutErrorString
argument_list|)
expr_stmt|;
break|break;
case|case
name|EHOSTUNREACH
case|:
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|NetworkError
argument_list|,
name|HostUnreachableErrorString
argument_list|)
expr_stmt|;
name|socketState
operator|=
name|QAbstractSocket
operator|::
name|UnconnectedState
expr_stmt|;
break|break;
case|case
name|ENETUNREACH
case|:
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|NetworkError
argument_list|,
name|NetworkUnreachableErrorString
argument_list|)
expr_stmt|;
name|socketState
operator|=
name|QAbstractSocket
operator|::
name|UnconnectedState
expr_stmt|;
break|break;
case|case
name|EADDRINUSE
case|:
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|NetworkError
argument_list|,
name|AddressInuseErrorString
argument_list|)
expr_stmt|;
break|break;
case|case
name|EINPROGRESS
case|:
case|case
name|EALREADY
case|:
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|UnfinishedSocketOperationError
argument_list|,
name|InvalidSocketErrorString
argument_list|)
expr_stmt|;
name|socketState
operator|=
name|QAbstractSocket
operator|::
name|ConnectingState
expr_stmt|;
break|break;
case|case
name|EAGAIN
case|:
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|UnfinishedSocketOperationError
argument_list|,
name|InvalidSocketErrorString
argument_list|)
expr_stmt|;
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|SocketResourceError
argument_list|,
name|ResourceErrorString
argument_list|)
expr_stmt|;
break|break;
case|case
name|EACCES
case|:
case|case
name|EPERM
case|:
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|SocketAccessError
argument_list|,
name|AccessErrorString
argument_list|)
expr_stmt|;
name|socketState
operator|=
name|QAbstractSocket
operator|::
name|UnconnectedState
expr_stmt|;
break|break;
case|case
name|EAFNOSUPPORT
case|:
case|case
name|EBADF
case|:
case|case
name|EFAULT
case|:
case|case
name|ENOTSOCK
case|:
name|socketState
operator|=
name|QAbstractSocket
operator|::
name|UnconnectedState
expr_stmt|;
default|default:
break|break;
block|}
if|if
condition|(
name|socketState
operator|!=
name|QAbstractSocket
operator|::
name|ConnectedState
condition|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QNATIVESOCKETENGINE_DEBUG
argument_list|)
name|qDebug
argument_list|(
literal|"QNativeSocketEnginePrivate::nativeConnect(%s, %i) == false (%s)"
argument_list|,
name|addr
operator|.
name|toString
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|port
argument_list|,
name|socketState
operator|==
name|QAbstractSocket
operator|::
name|ConnectingState
condition|?
literal|"Connection in progress"
else|:
name|socketErrorString
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|false
return|;
block|}
block|}
if|#
directive|if
name|defined
argument_list|(
name|QNATIVESOCKETENGINE_DEBUG
argument_list|)
name|qDebug
argument_list|(
literal|"QNativeSocketEnginePrivate::nativeConnect(%s, %i) == true"
argument_list|,
name|addr
operator|.
name|toString
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|port
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|socketState
operator|=
name|QAbstractSocket
operator|::
name|ConnectedState
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|nativeBind
name|bool
name|QNativeSocketEnginePrivate
operator|::
name|nativeBind
parameter_list|(
specifier|const
name|QHostAddress
modifier|&
name|address
parameter_list|,
name|quint16
name|port
parameter_list|)
block|{
name|struct
name|sockaddr_in
name|sockAddrIPv4
decl_stmt|;
name|struct
name|sockaddr
modifier|*
name|sockAddrPtr
init|=
literal|0
decl_stmt|;
name|QT_SOCKLEN_T
name|sockAddrSize
init|=
literal|0
decl_stmt|;
name|struct
name|sockaddr_in6
name|sockAddrIPv6
decl_stmt|;
if|if
condition|(
name|address
operator|.
name|protocol
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|IPv6Protocol
operator|||
name|address
operator|.
name|protocol
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|AnyIPProtocol
condition|)
block|{
ifdef|#
directive|ifdef
name|IPV6_V6ONLY
name|int
name|ipv6only
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|address
operator|.
name|protocol
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|IPv6Protocol
condition|)
name|ipv6only
operator|=
literal|1
expr_stmt|;
comment|//default value of this socket option varies depending on unix variant (or system configuration on BSD), so always set it explicitly
operator|::
name|setsockopt
argument_list|(
name|socketDescriptor
argument_list|,
name|IPPROTO_IPV6
argument_list|,
name|IPV6_V6ONLY
argument_list|,
operator|(
name|char
operator|*
operator|)
operator|&
name|ipv6only
argument_list|,
sizeof|sizeof
argument_list|(
name|ipv6only
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|memset
argument_list|(
operator|&
name|sockAddrIPv6
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|sockAddrIPv6
argument_list|)
argument_list|)
expr_stmt|;
name|sockAddrIPv6
operator|.
name|sin6_family
operator|=
name|AF_INET6
expr_stmt|;
name|sockAddrIPv6
operator|.
name|sin6_port
operator|=
name|htons
argument_list|(
name|port
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_IPV6IFNAME
name|sockAddrIPv6
operator|.
name|sin6_scope_id
operator|=
operator|::
name|if_nametoindex
argument_list|(
name|address
operator|.
name|scopeId
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
else|#
directive|else
name|sockAddrIPv6
operator|.
name|sin6_scope_id
operator|=
name|address
operator|.
name|scopeId
argument_list|()
operator|.
name|toInt
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|Q_IPV6ADDR
name|tmp
init|=
name|address
operator|.
name|toIPv6Address
argument_list|()
decl_stmt|;
name|memcpy
argument_list|(
operator|&
name|sockAddrIPv6
operator|.
name|sin6_addr
operator|.
name|s6_addr
argument_list|,
operator|&
name|tmp
argument_list|,
sizeof|sizeof
argument_list|(
name|tmp
argument_list|)
argument_list|)
expr_stmt|;
name|sockAddrSize
operator|=
sizeof|sizeof
argument_list|(
name|sockAddrIPv6
argument_list|)
expr_stmt|;
name|sockAddrPtr
operator|=
operator|(
expr|struct
name|sockaddr
operator|*
operator|)
operator|&
name|sockAddrIPv6
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|address
operator|.
name|protocol
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|IPv4Protocol
condition|)
block|{
name|memset
argument_list|(
operator|&
name|sockAddrIPv4
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|sockAddrIPv4
argument_list|)
argument_list|)
expr_stmt|;
name|sockAddrIPv4
operator|.
name|sin_family
operator|=
name|AF_INET
expr_stmt|;
name|sockAddrIPv4
operator|.
name|sin_port
operator|=
name|htons
argument_list|(
name|port
argument_list|)
expr_stmt|;
name|sockAddrIPv4
operator|.
name|sin_addr
operator|.
name|s_addr
operator|=
name|htonl
argument_list|(
name|address
operator|.
name|toIPv4Address
argument_list|()
argument_list|)
expr_stmt|;
name|sockAddrSize
operator|=
sizeof|sizeof
argument_list|(
name|sockAddrIPv4
argument_list|)
expr_stmt|;
name|sockAddrPtr
operator|=
operator|(
expr|struct
name|sockaddr
operator|*
operator|)
operator|&
name|sockAddrIPv4
expr_stmt|;
block|}
else|else
block|{
comment|// unreachable
block|}
name|int
name|bindResult
init|=
name|QT_SOCKET_BIND
argument_list|(
name|socketDescriptor
argument_list|,
name|sockAddrPtr
argument_list|,
name|sockAddrSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|bindResult
operator|<
literal|0
operator|&&
name|errno
operator|==
name|EAFNOSUPPORT
operator|&&
name|address
operator|.
name|protocol
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|AnyIPProtocol
condition|)
block|{
name|memset
argument_list|(
operator|&
name|sockAddrIPv4
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|sockAddrIPv4
argument_list|)
argument_list|)
expr_stmt|;
name|sockAddrIPv4
operator|.
name|sin_family
operator|=
name|AF_INET
expr_stmt|;
name|sockAddrIPv4
operator|.
name|sin_port
operator|=
name|htons
argument_list|(
name|port
argument_list|)
expr_stmt|;
name|sockAddrIPv4
operator|.
name|sin_addr
operator|.
name|s_addr
operator|=
name|htonl
argument_list|(
name|address
operator|.
name|toIPv4Address
argument_list|()
argument_list|)
expr_stmt|;
name|sockAddrSize
operator|=
sizeof|sizeof
argument_list|(
name|sockAddrIPv4
argument_list|)
expr_stmt|;
name|sockAddrPtr
operator|=
operator|(
expr|struct
name|sockaddr
operator|*
operator|)
operator|&
name|sockAddrIPv4
expr_stmt|;
name|bindResult
operator|=
name|QT_SOCKET_BIND
argument_list|(
name|socketDescriptor
argument_list|,
name|sockAddrPtr
argument_list|,
name|sockAddrSize
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bindResult
operator|<
literal|0
condition|)
block|{
switch|switch
condition|(
name|errno
condition|)
block|{
case|case
name|EADDRINUSE
case|:
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|AddressInUseError
argument_list|,
name|AddressInuseErrorString
argument_list|)
expr_stmt|;
break|break;
case|case
name|EACCES
case|:
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|SocketAccessError
argument_list|,
name|AddressProtectedErrorString
argument_list|)
expr_stmt|;
break|break;
case|case
name|EINVAL
case|:
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|UnsupportedSocketOperationError
argument_list|,
name|OperationUnsupportedErrorString
argument_list|)
expr_stmt|;
break|break;
case|case
name|EADDRNOTAVAIL
case|:
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|SocketAddressNotAvailableError
argument_list|,
name|AddressNotAvailableErrorString
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
if|#
directive|if
name|defined
argument_list|(
name|QNATIVESOCKETENGINE_DEBUG
argument_list|)
name|qDebug
argument_list|(
literal|"QNativeSocketEnginePrivate::nativeBind(%s, %i) == false (%s)"
argument_list|,
name|address
operator|.
name|toString
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|port
argument_list|,
name|socketErrorString
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|false
return|;
block|}
name|localPort
operator|=
name|port
expr_stmt|;
name|localAddress
operator|=
name|address
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QNATIVESOCKETENGINE_DEBUG
argument_list|)
name|qDebug
argument_list|(
literal|"QNativeSocketEnginePrivate::nativeBind(%s, %i) == true"
argument_list|,
name|address
operator|.
name|toString
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|port
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|socketState
operator|=
name|QAbstractSocket
operator|::
name|BoundState
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|nativeListen
name|bool
name|QNativeSocketEnginePrivate
operator|::
name|nativeListen
parameter_list|(
name|int
name|backlog
parameter_list|)
block|{
if|if
condition|(
name|qt_safe_listen
argument_list|(
name|socketDescriptor
argument_list|,
name|backlog
argument_list|)
operator|<
literal|0
condition|)
block|{
switch|switch
condition|(
name|errno
condition|)
block|{
case|case
name|EADDRINUSE
case|:
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|AddressInUseError
argument_list|,
name|PortInuseErrorString
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
if|#
directive|if
name|defined
argument_list|(
name|QNATIVESOCKETENGINE_DEBUG
argument_list|)
name|qDebug
argument_list|(
literal|"QNativeSocketEnginePrivate::nativeListen(%i) == false (%s)"
argument_list|,
name|backlog
argument_list|,
name|socketErrorString
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|false
return|;
block|}
if|#
directive|if
name|defined
argument_list|(
name|QNATIVESOCKETENGINE_DEBUG
argument_list|)
name|qDebug
argument_list|(
literal|"QNativeSocketEnginePrivate::nativeListen(%i) == true"
argument_list|,
name|backlog
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|socketState
operator|=
name|QAbstractSocket
operator|::
name|ListeningState
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|nativeAccept
name|int
name|QNativeSocketEnginePrivate
operator|::
name|nativeAccept
parameter_list|()
block|{
name|int
name|acceptedDescriptor
init|=
name|qt_safe_accept
argument_list|(
name|socketDescriptor
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
return|return
name|acceptedDescriptor
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_NETWORKINTERFACE
end_ifndef
begin_function
DECL|function|multicastMembershipHelper
specifier|static
name|bool
name|multicastMembershipHelper
parameter_list|(
name|QNativeSocketEnginePrivate
modifier|*
name|d
parameter_list|,
name|int
name|how6
parameter_list|,
name|int
name|how4
parameter_list|,
specifier|const
name|QHostAddress
modifier|&
name|groupAddress
parameter_list|,
specifier|const
name|QNetworkInterface
modifier|&
name|interface
parameter_list|)
block|{
name|int
name|level
init|=
literal|0
decl_stmt|;
name|int
name|sockOpt
init|=
literal|0
decl_stmt|;
name|void
modifier|*
name|sockArg
decl_stmt|;
name|int
name|sockArgSize
decl_stmt|;
name|ip_mreq
name|mreq4
decl_stmt|;
name|ipv6_mreq
name|mreq6
decl_stmt|;
if|if
condition|(
name|groupAddress
operator|.
name|protocol
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|IPv6Protocol
condition|)
block|{
name|level
operator|=
name|IPPROTO_IPV6
expr_stmt|;
name|sockOpt
operator|=
name|how6
expr_stmt|;
name|sockArg
operator|=
operator|&
name|mreq6
expr_stmt|;
name|sockArgSize
operator|=
sizeof|sizeof
argument_list|(
name|mreq6
argument_list|)
expr_stmt|;
name|memset
argument_list|(
operator|&
name|mreq6
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|mreq6
argument_list|)
argument_list|)
expr_stmt|;
name|Q_IPV6ADDR
name|ip6
init|=
name|groupAddress
operator|.
name|toIPv6Address
argument_list|()
decl_stmt|;
name|memcpy
argument_list|(
operator|&
name|mreq6
operator|.
name|ipv6mr_multiaddr
argument_list|,
operator|&
name|ip6
argument_list|,
sizeof|sizeof
argument_list|(
name|ip6
argument_list|)
argument_list|)
expr_stmt|;
name|mreq6
operator|.
name|ipv6mr_interface
operator|=
name|interface
operator|.
name|index
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|groupAddress
operator|.
name|protocol
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|IPv4Protocol
condition|)
block|{
name|level
operator|=
name|IPPROTO_IP
expr_stmt|;
name|sockOpt
operator|=
name|how4
expr_stmt|;
name|sockArg
operator|=
operator|&
name|mreq4
expr_stmt|;
name|sockArgSize
operator|=
sizeof|sizeof
argument_list|(
name|mreq4
argument_list|)
expr_stmt|;
name|memset
argument_list|(
operator|&
name|mreq4
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|mreq4
argument_list|)
argument_list|)
expr_stmt|;
name|mreq4
operator|.
name|imr_multiaddr
operator|.
name|s_addr
operator|=
name|htonl
argument_list|(
name|groupAddress
operator|.
name|toIPv4Address
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|interface
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|QList
argument_list|<
name|QNetworkAddressEntry
argument_list|>
name|addressEntries
init|=
name|interface
operator|.
name|addressEntries
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|addressEntries
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QHostAddress
name|firstIP
init|=
name|addressEntries
operator|.
name|first
argument_list|()
operator|.
name|ip
argument_list|()
decl_stmt|;
name|mreq4
operator|.
name|imr_interface
operator|.
name|s_addr
operator|=
name|htonl
argument_list|(
name|firstIP
operator|.
name|toIPv4Address
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|NetworkError
argument_list|,
name|QNativeSocketEnginePrivate
operator|::
name|NetworkUnreachableErrorString
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
name|mreq4
operator|.
name|imr_interface
operator|.
name|s_addr
operator|=
name|INADDR_ANY
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// unreachable
name|d
operator|->
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|UnsupportedSocketOperationError
argument_list|,
name|QNativeSocketEnginePrivate
operator|::
name|ProtocolUnsupportedErrorString
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|int
name|res
init|=
name|setsockopt
argument_list|(
name|d
operator|->
name|socketDescriptor
argument_list|,
name|level
argument_list|,
name|sockOpt
argument_list|,
name|sockArg
argument_list|,
name|sockArgSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|==
operator|-
literal|1
condition|)
block|{
switch|switch
condition|(
name|errno
condition|)
block|{
case|case
name|ENOPROTOOPT
case|:
name|d
operator|->
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|UnsupportedSocketOperationError
argument_list|,
name|QNativeSocketEnginePrivate
operator|::
name|OperationUnsupportedErrorString
argument_list|)
expr_stmt|;
break|break;
case|case
name|EADDRNOTAVAIL
case|:
name|d
operator|->
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|SocketAddressNotAvailableError
argument_list|,
name|QNativeSocketEnginePrivate
operator|::
name|AddressNotAvailableErrorString
argument_list|)
expr_stmt|;
break|break;
default|default:
name|d
operator|->
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|UnknownSocketError
argument_list|,
name|QNativeSocketEnginePrivate
operator|::
name|UnknownSocketErrorString
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|nativeJoinMulticastGroup
name|bool
name|QNativeSocketEnginePrivate
operator|::
name|nativeJoinMulticastGroup
parameter_list|(
specifier|const
name|QHostAddress
modifier|&
name|groupAddress
parameter_list|,
specifier|const
name|QNetworkInterface
modifier|&
name|interface
parameter_list|)
block|{
return|return
name|multicastMembershipHelper
argument_list|(
name|this
argument_list|,
name|IPV6_JOIN_GROUP
argument_list|,
name|IP_ADD_MEMBERSHIP
argument_list|,
name|groupAddress
argument_list|,
name|interface
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|nativeLeaveMulticastGroup
name|bool
name|QNativeSocketEnginePrivate
operator|::
name|nativeLeaveMulticastGroup
parameter_list|(
specifier|const
name|QHostAddress
modifier|&
name|groupAddress
parameter_list|,
specifier|const
name|QNetworkInterface
modifier|&
name|interface
parameter_list|)
block|{
return|return
name|multicastMembershipHelper
argument_list|(
name|this
argument_list|,
name|IPV6_LEAVE_GROUP
argument_list|,
name|IP_DROP_MEMBERSHIP
argument_list|,
name|groupAddress
argument_list|,
name|interface
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|nativeMulticastInterface
name|QNetworkInterface
name|QNativeSocketEnginePrivate
operator|::
name|nativeMulticastInterface
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|socketProtocol
operator|==
name|QAbstractSocket
operator|::
name|IPv6Protocol
condition|)
block|{
name|uint
name|v
decl_stmt|;
name|QT_SOCKOPTLEN_T
name|sizeofv
init|=
sizeof|sizeof
argument_list|(
name|v
argument_list|)
decl_stmt|;
if|if
condition|(
operator|::
name|getsockopt
argument_list|(
name|socketDescriptor
argument_list|,
name|IPPROTO_IPV6
argument_list|,
name|IPV6_MULTICAST_IF
argument_list|,
operator|&
name|v
argument_list|,
operator|&
name|sizeofv
argument_list|)
operator|==
operator|-
literal|1
condition|)
return|return
name|QNetworkInterface
argument_list|()
return|;
return|return
name|QNetworkInterface
operator|::
name|interfaceFromIndex
argument_list|(
name|v
argument_list|)
return|;
block|}
name|struct
name|in_addr
name|v
init|=
block|{
literal|0
block|}
decl_stmt|;
name|QT_SOCKOPTLEN_T
name|sizeofv
init|=
sizeof|sizeof
argument_list|(
name|v
argument_list|)
decl_stmt|;
if|if
condition|(
operator|::
name|getsockopt
argument_list|(
name|socketDescriptor
argument_list|,
name|IPPROTO_IP
argument_list|,
name|IP_MULTICAST_IF
argument_list|,
operator|&
name|v
argument_list|,
operator|&
name|sizeofv
argument_list|)
operator|==
operator|-
literal|1
condition|)
return|return
name|QNetworkInterface
argument_list|()
return|;
if|if
condition|(
name|v
operator|.
name|s_addr
operator|!=
literal|0
operator|&&
name|sizeofv
operator|>=
sizeof|sizeof
argument_list|(
name|v
argument_list|)
condition|)
block|{
name|QHostAddress
name|ipv4
argument_list|(
name|ntohl
argument_list|(
name|v
operator|.
name|s_addr
argument_list|)
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|QNetworkInterface
argument_list|>
name|ifaces
init|=
name|QNetworkInterface
operator|::
name|allInterfaces
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ifaces
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QNetworkInterface
modifier|&
name|iface
init|=
name|ifaces
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|QNetworkAddressEntry
argument_list|>
name|entries
init|=
name|iface
operator|.
name|addressEntries
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|entries
operator|.
name|count
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
specifier|const
name|QNetworkAddressEntry
modifier|&
name|entry
init|=
name|entries
operator|.
name|at
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|ip
argument_list|()
operator|==
name|ipv4
condition|)
return|return
name|iface
return|;
block|}
block|}
block|}
return|return
name|QNetworkInterface
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|nativeSetMulticastInterface
name|bool
name|QNativeSocketEnginePrivate
operator|::
name|nativeSetMulticastInterface
parameter_list|(
specifier|const
name|QNetworkInterface
modifier|&
name|iface
parameter_list|)
block|{
if|if
condition|(
name|socketProtocol
operator|==
name|QAbstractSocket
operator|::
name|IPv6Protocol
condition|)
block|{
name|uint
name|v
init|=
name|iface
operator|.
name|index
argument_list|()
decl_stmt|;
return|return
operator|(
operator|::
name|setsockopt
argument_list|(
name|socketDescriptor
argument_list|,
name|IPPROTO_IPV6
argument_list|,
name|IPV6_MULTICAST_IF
argument_list|,
operator|&
name|v
argument_list|,
sizeof|sizeof
argument_list|(
name|v
argument_list|)
argument_list|)
operator|!=
operator|-
literal|1
operator|)
return|;
block|}
name|struct
name|in_addr
name|v
decl_stmt|;
if|if
condition|(
name|iface
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|QList
argument_list|<
name|QNetworkAddressEntry
argument_list|>
name|entries
init|=
name|iface
operator|.
name|addressEntries
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|entries
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QNetworkAddressEntry
modifier|&
name|entry
init|=
name|entries
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|const
name|QHostAddress
modifier|&
name|ip
init|=
name|entry
operator|.
name|ip
argument_list|()
decl_stmt|;
if|if
condition|(
name|ip
operator|.
name|protocol
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|IPv4Protocol
condition|)
block|{
name|v
operator|.
name|s_addr
operator|=
name|htonl
argument_list|(
name|ip
operator|.
name|toIPv4Address
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|r
init|=
operator|::
name|setsockopt
argument_list|(
name|socketDescriptor
argument_list|,
name|IPPROTO_IP
argument_list|,
name|IP_MULTICAST_IF
argument_list|,
operator|&
name|v
argument_list|,
sizeof|sizeof
argument_list|(
name|v
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
operator|-
literal|1
condition|)
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
name|v
operator|.
name|s_addr
operator|=
name|INADDR_ANY
expr_stmt|;
return|return
operator|(
operator|::
name|setsockopt
argument_list|(
name|socketDescriptor
argument_list|,
name|IPPROTO_IP
argument_list|,
name|IP_MULTICAST_IF
argument_list|,
operator|&
name|v
argument_list|,
sizeof|sizeof
argument_list|(
name|v
argument_list|)
argument_list|)
operator|!=
operator|-
literal|1
operator|)
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_NETWORKINTERFACE
end_comment
begin_function
DECL|function|nativeBytesAvailable
name|qint64
name|QNativeSocketEnginePrivate
operator|::
name|nativeBytesAvailable
parameter_list|()
specifier|const
block|{
name|int
name|nbytes
init|=
literal|0
decl_stmt|;
comment|// gives shorter than true amounts on Unix domain sockets.
name|qint64
name|available
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|qt_safe_ioctl
argument_list|(
name|socketDescriptor
argument_list|,
name|FIONREAD
argument_list|,
operator|(
name|char
operator|*
operator|)
operator|&
name|nbytes
argument_list|)
operator|>=
literal|0
condition|)
name|available
operator|=
operator|(
name|qint64
operator|)
name|nbytes
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QNATIVESOCKETENGINE_DEBUG
argument_list|)
name|qDebug
argument_list|(
literal|"QNativeSocketEnginePrivate::nativeBytesAvailable() == %lli"
argument_list|,
name|available
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|available
return|;
block|}
end_function
begin_function
DECL|function|nativeHasPendingDatagrams
name|bool
name|QNativeSocketEnginePrivate
operator|::
name|nativeHasPendingDatagrams
parameter_list|()
specifier|const
block|{
comment|// Create a sockaddr struct and reset its port number.
name|qt_sockaddr
name|storage
decl_stmt|;
name|QT_SOCKLEN_T
name|storageSize
init|=
sizeof|sizeof
argument_list|(
name|storage
argument_list|)
decl_stmt|;
name|memset
argument_list|(
operator|&
name|storage
argument_list|,
literal|0
argument_list|,
name|storageSize
argument_list|)
expr_stmt|;
comment|// Peek 0 bytes into the next message. The size of the message may
comment|// well be 0, so we can't check recvfrom's return value.
name|ssize_t
name|readBytes
decl_stmt|;
do|do
block|{
name|char
name|c
decl_stmt|;
name|readBytes
operator|=
operator|::
name|recvfrom
argument_list|(
name|socketDescriptor
argument_list|,
operator|&
name|c
argument_list|,
literal|1
argument_list|,
name|MSG_PEEK
argument_list|,
operator|&
name|storage
operator|.
name|a
argument_list|,
operator|&
name|storageSize
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|readBytes
operator|==
operator|-
literal|1
operator|&&
name|errno
operator|==
name|EINTR
condition|)
do|;
comment|// If there's no error, or if our buffer was too small, there must be a
comment|// pending datagram.
name|bool
name|result
init|=
operator|(
name|readBytes
operator|!=
operator|-
literal|1
operator|)
operator|||
name|errno
operator|==
name|EMSGSIZE
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QNATIVESOCKETENGINE_DEBUG
argument_list|)
name|qDebug
argument_list|(
literal|"QNativeSocketEnginePrivate::nativeHasPendingDatagrams() == %s"
argument_list|,
name|result
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|nativePendingDatagramSize
name|qint64
name|QNativeSocketEnginePrivate
operator|::
name|nativePendingDatagramSize
parameter_list|()
specifier|const
block|{
name|QVarLengthArray
argument_list|<
name|char
argument_list|,
literal|8192
argument_list|>
name|udpMessagePeekBuffer
argument_list|(
literal|8192
argument_list|)
decl_stmt|;
name|ssize_t
name|recvResult
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
comment|// the data written to udpMessagePeekBuffer is discarded, so
comment|// this function is still reentrant although it might not look
comment|// so.
name|recvResult
operator|=
operator|::
name|recv
argument_list|(
name|socketDescriptor
argument_list|,
name|udpMessagePeekBuffer
operator|.
name|data
argument_list|()
argument_list|,
name|udpMessagePeekBuffer
operator|.
name|size
argument_list|()
argument_list|,
name|MSG_PEEK
argument_list|)
expr_stmt|;
if|if
condition|(
name|recvResult
operator|==
operator|-
literal|1
operator|&&
name|errno
operator|==
name|EINTR
condition|)
continue|continue;
if|if
condition|(
name|recvResult
operator|!=
operator|(
name|ssize_t
operator|)
name|udpMessagePeekBuffer
operator|.
name|size
argument_list|()
condition|)
break|break;
name|udpMessagePeekBuffer
operator|.
name|resize
argument_list|(
name|udpMessagePeekBuffer
operator|.
name|size
argument_list|()
operator|*
literal|2
argument_list|)
expr_stmt|;
block|}
if|#
directive|if
name|defined
argument_list|(
name|QNATIVESOCKETENGINE_DEBUG
argument_list|)
name|qDebug
argument_list|(
literal|"QNativeSocketEnginePrivate::nativePendingDatagramSize() == %i"
argument_list|,
name|recvResult
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|qint64
argument_list|(
name|recvResult
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|nativeReceiveDatagram
name|qint64
name|QNativeSocketEnginePrivate
operator|::
name|nativeReceiveDatagram
parameter_list|(
name|char
modifier|*
name|data
parameter_list|,
name|qint64
name|maxSize
parameter_list|,
name|QHostAddress
modifier|*
name|address
parameter_list|,
name|quint16
modifier|*
name|port
parameter_list|)
block|{
name|qt_sockaddr
name|aa
decl_stmt|;
name|memset
argument_list|(
operator|&
name|aa
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|aa
argument_list|)
argument_list|)
expr_stmt|;
name|QT_SOCKLEN_T
name|sz
decl_stmt|;
name|sz
operator|=
sizeof|sizeof
argument_list|(
name|aa
argument_list|)
expr_stmt|;
name|ssize_t
name|recvFromResult
init|=
literal|0
decl_stmt|;
do|do
block|{
name|char
name|c
decl_stmt|;
name|recvFromResult
operator|=
operator|::
name|recvfrom
argument_list|(
name|socketDescriptor
argument_list|,
name|maxSize
condition|?
name|data
else|:
operator|&
name|c
argument_list|,
name|maxSize
condition|?
name|maxSize
else|:
literal|1
argument_list|,
literal|0
argument_list|,
operator|&
name|aa
operator|.
name|a
argument_list|,
operator|&
name|sz
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|recvFromResult
operator|==
operator|-
literal|1
operator|&&
name|errno
operator|==
name|EINTR
condition|)
do|;
if|if
condition|(
name|recvFromResult
operator|==
operator|-
literal|1
condition|)
block|{
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|NetworkError
argument_list|,
name|ReceiveDatagramErrorString
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|port
operator|||
name|address
condition|)
block|{
name|qt_socket_getPortAndAddress
argument_list|(
operator|&
name|aa
argument_list|,
name|port
argument_list|,
name|address
argument_list|)
expr_stmt|;
block|}
if|#
directive|if
name|defined
argument_list|(
name|QNATIVESOCKETENGINE_DEBUG
argument_list|)
name|qDebug
argument_list|(
literal|"QNativeSocketEnginePrivate::nativeReceiveDatagram(%p \"%s\", %lli, %s, %i) == %lli"
argument_list|,
name|data
argument_list|,
name|qt_prettyDebug
argument_list|(
name|data
argument_list|,
name|qMin
argument_list|(
name|recvFromResult
argument_list|,
name|ssize_t
argument_list|(
literal|16
argument_list|)
argument_list|)
argument_list|,
name|recvFromResult
argument_list|)
operator|.
name|data
argument_list|()
argument_list|,
name|maxSize
argument_list|,
name|address
condition|?
name|address
operator|->
name|toString
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
else|:
literal|"(nil)"
argument_list|,
name|port
condition|?
operator|*
name|port
else|:
literal|0
argument_list|,
operator|(
name|qint64
operator|)
name|recvFromResult
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|qint64
argument_list|(
name|maxSize
condition|?
name|recvFromResult
else|:
name|recvFromResult
operator|==
operator|-
literal|1
condition|?
operator|-
literal|1
else|:
literal|0
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|nativeSendDatagram
name|qint64
name|QNativeSocketEnginePrivate
operator|::
name|nativeSendDatagram
parameter_list|(
specifier|const
name|char
modifier|*
name|data
parameter_list|,
name|qint64
name|len
parameter_list|,
specifier|const
name|QHostAddress
modifier|&
name|host
parameter_list|,
name|quint16
name|port
parameter_list|)
block|{
name|struct
name|sockaddr_in
name|sockAddrIPv4
decl_stmt|;
name|struct
name|sockaddr
modifier|*
name|sockAddrPtr
init|=
literal|0
decl_stmt|;
name|QT_SOCKLEN_T
name|sockAddrSize
init|=
literal|0
decl_stmt|;
name|struct
name|sockaddr_in6
name|sockAddrIPv6
decl_stmt|;
if|if
condition|(
name|host
operator|.
name|protocol
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|IPv6Protocol
operator|||
name|socketProtocol
operator|==
name|QAbstractSocket
operator|::
name|IPv6Protocol
operator|||
name|socketProtocol
operator|==
name|QAbstractSocket
operator|::
name|AnyIPProtocol
condition|)
block|{
name|memset
argument_list|(
operator|&
name|sockAddrIPv6
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|sockAddrIPv6
argument_list|)
argument_list|)
expr_stmt|;
name|sockAddrIPv6
operator|.
name|sin6_family
operator|=
name|AF_INET6
expr_stmt|;
name|sockAddrIPv6
operator|.
name|sin6_port
operator|=
name|htons
argument_list|(
name|port
argument_list|)
expr_stmt|;
name|Q_IPV6ADDR
name|tmp
init|=
name|host
operator|.
name|toIPv6Address
argument_list|()
decl_stmt|;
name|memcpy
argument_list|(
operator|&
name|sockAddrIPv6
operator|.
name|sin6_addr
operator|.
name|s6_addr
argument_list|,
operator|&
name|tmp
argument_list|,
sizeof|sizeof
argument_list|(
name|tmp
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|scopeid
init|=
name|host
operator|.
name|scopeId
argument_list|()
decl_stmt|;
name|bool
name|ok
decl_stmt|;
name|sockAddrIPv6
operator|.
name|sin6_scope_id
operator|=
name|scopeid
operator|.
name|toInt
argument_list|(
operator|&
name|ok
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_IPV6IFNAME
if|if
condition|(
operator|!
name|ok
condition|)
name|sockAddrIPv6
operator|.
name|sin6_scope_id
operator|=
operator|::
name|if_nametoindex
argument_list|(
name|scopeid
operator|.
name|toLatin1
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|sockAddrSize
operator|=
sizeof|sizeof
argument_list|(
name|sockAddrIPv6
argument_list|)
expr_stmt|;
name|sockAddrPtr
operator|=
operator|(
expr|struct
name|sockaddr
operator|*
operator|)
operator|&
name|sockAddrIPv6
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|host
operator|.
name|protocol
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|IPv4Protocol
condition|)
block|{
name|memset
argument_list|(
operator|&
name|sockAddrIPv4
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|sockAddrIPv4
argument_list|)
argument_list|)
expr_stmt|;
name|sockAddrIPv4
operator|.
name|sin_family
operator|=
name|AF_INET
expr_stmt|;
name|sockAddrIPv4
operator|.
name|sin_port
operator|=
name|htons
argument_list|(
name|port
argument_list|)
expr_stmt|;
name|sockAddrIPv4
operator|.
name|sin_addr
operator|.
name|s_addr
operator|=
name|htonl
argument_list|(
name|host
operator|.
name|toIPv4Address
argument_list|()
argument_list|)
expr_stmt|;
name|sockAddrSize
operator|=
sizeof|sizeof
argument_list|(
name|sockAddrIPv4
argument_list|)
expr_stmt|;
name|sockAddrPtr
operator|=
operator|(
expr|struct
name|sockaddr
operator|*
operator|)
operator|&
name|sockAddrIPv4
expr_stmt|;
block|}
comment|// ignore the SIGPIPE signal
name|qt_ignore_sigpipe
argument_list|()
expr_stmt|;
name|ssize_t
name|sentBytes
init|=
name|qt_safe_sendto
argument_list|(
name|socketDescriptor
argument_list|,
name|data
argument_list|,
name|len
argument_list|,
literal|0
argument_list|,
name|sockAddrPtr
argument_list|,
name|sockAddrSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|sentBytes
operator|<
literal|0
condition|)
block|{
switch|switch
condition|(
name|errno
condition|)
block|{
case|case
name|EMSGSIZE
case|:
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|DatagramTooLargeError
argument_list|,
name|DatagramTooLargeErrorString
argument_list|)
expr_stmt|;
break|break;
default|default:
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|NetworkError
argument_list|,
name|SendDatagramErrorString
argument_list|)
expr_stmt|;
block|}
block|}
if|#
directive|if
name|defined
argument_list|(
name|QNATIVESOCKETENGINE_DEBUG
argument_list|)
name|qDebug
argument_list|(
literal|"QNativeSocketEngine::sendDatagram(%p \"%s\", %lli, \"%s\", %i) == %lli"
argument_list|,
name|data
argument_list|,
name|qt_prettyDebug
argument_list|(
name|data
argument_list|,
name|qMin
argument_list|<
name|int
argument_list|>
argument_list|(
name|len
argument_list|,
literal|16
argument_list|)
argument_list|,
name|len
argument_list|)
operator|.
name|data
argument_list|()
argument_list|,
name|len
argument_list|,
name|host
operator|.
name|toString
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|port
argument_list|,
operator|(
name|qint64
operator|)
name|sentBytes
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|qint64
argument_list|(
name|sentBytes
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|fetchConnectionParameters
name|bool
name|QNativeSocketEnginePrivate
operator|::
name|fetchConnectionParameters
parameter_list|()
block|{
name|localPort
operator|=
literal|0
expr_stmt|;
name|localAddress
operator|.
name|clear
argument_list|()
expr_stmt|;
name|peerPort
operator|=
literal|0
expr_stmt|;
name|peerAddress
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|socketDescriptor
operator|==
operator|-
literal|1
condition|)
return|return
literal|false
return|;
name|qt_sockaddr
name|sa
decl_stmt|;
name|QT_SOCKLEN_T
name|sockAddrSize
init|=
sizeof|sizeof
argument_list|(
name|sa
argument_list|)
decl_stmt|;
comment|// Determine local address
name|memset
argument_list|(
operator|&
name|sa
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|sa
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|::
name|getsockname
argument_list|(
name|socketDescriptor
argument_list|,
operator|&
name|sa
operator|.
name|a
argument_list|,
operator|&
name|sockAddrSize
argument_list|)
operator|==
literal|0
condition|)
block|{
name|qt_socket_getPortAndAddress
argument_list|(
operator|&
name|sa
argument_list|,
operator|&
name|localPort
argument_list|,
operator|&
name|localAddress
argument_list|)
expr_stmt|;
comment|// Determine protocol family
switch|switch
condition|(
name|sa
operator|.
name|a
operator|.
name|sa_family
condition|)
block|{
case|case
name|AF_INET
case|:
name|socketProtocol
operator|=
name|QAbstractSocket
operator|::
name|IPv4Protocol
expr_stmt|;
break|break;
case|case
name|AF_INET6
case|:
name|socketProtocol
operator|=
name|QAbstractSocket
operator|::
name|IPv6Protocol
expr_stmt|;
break|break;
default|default:
name|socketProtocol
operator|=
name|QAbstractSocket
operator|::
name|UnknownNetworkLayerProtocol
expr_stmt|;
break|break;
block|}
block|}
elseif|else
if|if
condition|(
name|errno
operator|==
name|EBADF
condition|)
block|{
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|UnsupportedSocketOperationError
argument_list|,
name|InvalidSocketErrorString
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|#
directive|if
name|defined
argument_list|(
name|IPV6_V6ONLY
argument_list|)
comment|// determine if local address is dual mode
comment|// On linux, these are returned as "::" (==AnyIPv6)
comment|// On OSX, these are returned as "::FFFF:0.0.0.0" (==AnyIPv4)
comment|// in either case, the IPV6_V6ONLY option is cleared
name|int
name|ipv6only
init|=
literal|0
decl_stmt|;
name|socklen_t
name|optlen
init|=
sizeof|sizeof
argument_list|(
name|ipv6only
argument_list|)
decl_stmt|;
if|if
condition|(
name|socketProtocol
operator|==
name|QAbstractSocket
operator|::
name|IPv6Protocol
operator|&&
operator|(
name|localAddress
operator|==
name|QHostAddress
operator|::
name|AnyIPv4
operator|||
name|localAddress
operator|==
name|QHostAddress
operator|::
name|AnyIPv6
operator|)
operator|&&
operator|!
name|getsockopt
argument_list|(
name|socketDescriptor
argument_list|,
name|IPPROTO_IPV6
argument_list|,
name|IPV6_V6ONLY
argument_list|,
operator|(
name|char
operator|*
operator|)
operator|&
name|ipv6only
argument_list|,
operator|&
name|optlen
argument_list|)
condition|)
block|{
if|if
condition|(
name|optlen
operator|!=
sizeof|sizeof
argument_list|(
name|ipv6only
argument_list|)
condition|)
name|qWarning
argument_list|(
literal|"unexpected size of IPV6_V6ONLY socket option"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ipv6only
condition|)
block|{
name|socketProtocol
operator|=
name|QAbstractSocket
operator|::
name|AnyIPProtocol
expr_stmt|;
name|localAddress
operator|=
name|QHostAddress
operator|::
name|Any
expr_stmt|;
block|}
block|}
endif|#
directive|endif
comment|// Determine the remote address
if|if
condition|(
operator|!
operator|::
name|getpeername
argument_list|(
name|socketDescriptor
argument_list|,
operator|&
name|sa
operator|.
name|a
argument_list|,
operator|&
name|sockAddrSize
argument_list|)
condition|)
name|qt_socket_getPortAndAddress
argument_list|(
operator|&
name|sa
argument_list|,
operator|&
name|peerPort
argument_list|,
operator|&
name|peerAddress
argument_list|)
expr_stmt|;
comment|// Determine the socket type (UDP/TCP)
name|int
name|value
init|=
literal|0
decl_stmt|;
name|QT_SOCKOPTLEN_T
name|valueSize
init|=
sizeof|sizeof
argument_list|(
name|int
argument_list|)
decl_stmt|;
if|if
condition|(
operator|::
name|getsockopt
argument_list|(
name|socketDescriptor
argument_list|,
name|SOL_SOCKET
argument_list|,
name|SO_TYPE
argument_list|,
operator|&
name|value
argument_list|,
operator|&
name|valueSize
argument_list|)
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|value
operator|==
name|SOCK_STREAM
condition|)
name|socketType
operator|=
name|QAbstractSocket
operator|::
name|TcpSocket
expr_stmt|;
elseif|else
if|if
condition|(
name|value
operator|==
name|SOCK_DGRAM
condition|)
name|socketType
operator|=
name|QAbstractSocket
operator|::
name|UdpSocket
expr_stmt|;
else|else
name|socketType
operator|=
name|QAbstractSocket
operator|::
name|UnknownSocketType
expr_stmt|;
block|}
if|#
directive|if
name|defined
argument_list|(
name|QNATIVESOCKETENGINE_DEBUG
argument_list|)
name|QString
name|socketProtocolStr
init|=
literal|"UnknownProtocol"
decl_stmt|;
if|if
condition|(
name|socketProtocol
operator|==
name|QAbstractSocket
operator|::
name|IPv4Protocol
condition|)
name|socketProtocolStr
operator|=
literal|"IPv4Protocol"
expr_stmt|;
elseif|else
if|if
condition|(
name|socketProtocol
operator|==
name|QAbstractSocket
operator|::
name|IPv6Protocol
condition|)
name|socketProtocolStr
operator|=
literal|"IPv6Protocol"
expr_stmt|;
name|QString
name|socketTypeStr
init|=
literal|"UnknownSocketType"
decl_stmt|;
if|if
condition|(
name|socketType
operator|==
name|QAbstractSocket
operator|::
name|TcpSocket
condition|)
name|socketTypeStr
operator|=
literal|"TcpSocket"
expr_stmt|;
elseif|else
if|if
condition|(
name|socketType
operator|==
name|QAbstractSocket
operator|::
name|UdpSocket
condition|)
name|socketTypeStr
operator|=
literal|"UdpSocket"
expr_stmt|;
name|qDebug
argument_list|(
literal|"QNativeSocketEnginePrivate::fetchConnectionParameters() local == %s:%i,"
literal|" peer == %s:%i, socket == %s - %s"
argument_list|,
name|localAddress
operator|.
name|toString
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|localPort
argument_list|,
name|peerAddress
operator|.
name|toString
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|peerPort
argument_list|,
name|socketTypeStr
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|socketProtocolStr
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|nativeClose
name|void
name|QNativeSocketEnginePrivate
operator|::
name|nativeClose
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|QNATIVESOCKETENGINE_DEBUG
argument_list|)
name|qDebug
argument_list|(
literal|"QNativeSocketEngine::nativeClose()"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|qt_safe_close
argument_list|(
name|socketDescriptor
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|nativeWrite
name|qint64
name|QNativeSocketEnginePrivate
operator|::
name|nativeWrite
parameter_list|(
specifier|const
name|char
modifier|*
name|data
parameter_list|,
name|qint64
name|len
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QNativeSocketEngine
argument_list|)
expr_stmt|;
comment|// ignore the SIGPIPE signal
name|qt_ignore_sigpipe
argument_list|()
expr_stmt|;
name|ssize_t
name|writtenBytes
decl_stmt|;
name|writtenBytes
operator|=
name|qt_safe_write
argument_list|(
name|socketDescriptor
argument_list|,
name|data
argument_list|,
name|len
argument_list|)
expr_stmt|;
if|if
condition|(
name|writtenBytes
operator|<
literal|0
condition|)
block|{
switch|switch
condition|(
name|errno
condition|)
block|{
case|case
name|EPIPE
case|:
case|case
name|ECONNRESET
case|:
name|writtenBytes
operator|=
operator|-
literal|1
expr_stmt|;
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|RemoteHostClosedError
argument_list|,
name|RemoteHostClosedErrorString
argument_list|)
expr_stmt|;
name|q
operator|->
name|close
argument_list|()
expr_stmt|;
break|break;
case|case
name|EAGAIN
case|:
name|writtenBytes
operator|=
literal|0
expr_stmt|;
break|break;
case|case
name|EMSGSIZE
case|:
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|DatagramTooLargeError
argument_list|,
name|DatagramTooLargeErrorString
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
if|#
directive|if
name|defined
argument_list|(
name|QNATIVESOCKETENGINE_DEBUG
argument_list|)
name|qDebug
argument_list|(
literal|"QNativeSocketEnginePrivate::nativeWrite(%p \"%s\", %llu) == %i"
argument_list|,
name|data
argument_list|,
name|qt_prettyDebug
argument_list|(
name|data
argument_list|,
name|qMin
argument_list|(
operator|(
name|int
operator|)
name|len
argument_list|,
literal|16
argument_list|)
argument_list|,
operator|(
name|int
operator|)
name|len
argument_list|)
operator|.
name|data
argument_list|()
argument_list|,
name|len
argument_list|,
operator|(
name|int
operator|)
name|writtenBytes
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|qint64
argument_list|(
name|writtenBytes
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/* */
end_comment
begin_function
DECL|function|nativeRead
name|qint64
name|QNativeSocketEnginePrivate
operator|::
name|nativeRead
parameter_list|(
name|char
modifier|*
name|data
parameter_list|,
name|qint64
name|maxSize
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QNativeSocketEngine
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|q
operator|->
name|isValid
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"QNativeSocketEngine::nativeRead: Invalid socket"
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
name|ssize_t
name|r
init|=
literal|0
decl_stmt|;
name|r
operator|=
name|qt_safe_read
argument_list|(
name|socketDescriptor
argument_list|,
name|data
argument_list|,
name|maxSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|<
literal|0
condition|)
block|{
name|r
operator|=
operator|-
literal|1
expr_stmt|;
switch|switch
condition|(
name|errno
condition|)
block|{
if|#
directive|if
name|EWOULDBLOCK
operator|-
literal|0
operator|&&
name|EWOULDBLOCK
operator|!=
name|EAGAIN
case|case
name|EWOULDBLOCK
case|:
endif|#
directive|endif
case|case
name|EAGAIN
case|:
comment|// No data was available for reading
name|r
operator|=
operator|-
literal|2
expr_stmt|;
break|break;
case|case
name|EBADF
case|:
case|case
name|EINVAL
case|:
case|case
name|EIO
case|:
comment|//error string is now set in read(), not here in nativeRead()
break|break;
case|case
name|ECONNRESET
case|:
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_VXWORKS
argument_list|)
case|case
name|ESHUTDOWN
case|:
endif|#
directive|endif
name|r
operator|=
literal|0
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
if|#
directive|if
name|defined
argument_list|(
name|QNATIVESOCKETENGINE_DEBUG
argument_list|)
name|qDebug
argument_list|(
literal|"QNativeSocketEnginePrivate::nativeRead(%p \"%s\", %llu) == %i"
argument_list|,
name|data
argument_list|,
name|qt_prettyDebug
argument_list|(
name|data
argument_list|,
name|qMin
argument_list|(
name|r
argument_list|,
name|ssize_t
argument_list|(
literal|16
argument_list|)
argument_list|)
argument_list|,
name|r
argument_list|)
operator|.
name|data
argument_list|()
argument_list|,
name|maxSize
argument_list|,
name|r
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|qint64
argument_list|(
name|r
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|nativeSelect
name|int
name|QNativeSocketEnginePrivate
operator|::
name|nativeSelect
parameter_list|(
name|int
name|timeout
parameter_list|,
name|bool
name|selectForRead
parameter_list|)
specifier|const
block|{
name|fd_set
name|fds
decl_stmt|;
name|FD_ZERO
argument_list|(
operator|&
name|fds
argument_list|)
expr_stmt|;
name|FD_SET
argument_list|(
name|socketDescriptor
argument_list|,
operator|&
name|fds
argument_list|)
expr_stmt|;
name|struct
name|timeval
name|tv
decl_stmt|;
name|tv
operator|.
name|tv_sec
operator|=
name|timeout
operator|/
literal|1000
expr_stmt|;
name|tv
operator|.
name|tv_usec
operator|=
operator|(
name|timeout
operator|%
literal|1000
operator|)
operator|*
literal|1000
expr_stmt|;
name|int
name|retval
decl_stmt|;
if|if
condition|(
name|selectForRead
condition|)
name|retval
operator|=
name|qt_safe_select
argument_list|(
name|socketDescriptor
operator|+
literal|1
argument_list|,
operator|&
name|fds
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|timeout
operator|<
literal|0
condition|?
literal|0
else|:
operator|&
name|tv
argument_list|)
expr_stmt|;
else|else
name|retval
operator|=
name|qt_safe_select
argument_list|(
name|socketDescriptor
operator|+
literal|1
argument_list|,
literal|0
argument_list|,
operator|&
name|fds
argument_list|,
literal|0
argument_list|,
name|timeout
operator|<
literal|0
condition|?
literal|0
else|:
operator|&
name|tv
argument_list|)
expr_stmt|;
return|return
name|retval
return|;
block|}
end_function
begin_function
DECL|function|nativeSelect
name|int
name|QNativeSocketEnginePrivate
operator|::
name|nativeSelect
parameter_list|(
name|int
name|timeout
parameter_list|,
name|bool
name|checkRead
parameter_list|,
name|bool
name|checkWrite
parameter_list|,
name|bool
modifier|*
name|selectForRead
parameter_list|,
name|bool
modifier|*
name|selectForWrite
parameter_list|)
specifier|const
block|{
name|fd_set
name|fdread
decl_stmt|;
name|FD_ZERO
argument_list|(
operator|&
name|fdread
argument_list|)
expr_stmt|;
if|if
condition|(
name|checkRead
condition|)
name|FD_SET
argument_list|(
name|socketDescriptor
argument_list|,
operator|&
name|fdread
argument_list|)
expr_stmt|;
name|fd_set
name|fdwrite
decl_stmt|;
name|FD_ZERO
argument_list|(
operator|&
name|fdwrite
argument_list|)
expr_stmt|;
if|if
condition|(
name|checkWrite
condition|)
name|FD_SET
argument_list|(
name|socketDescriptor
argument_list|,
operator|&
name|fdwrite
argument_list|)
expr_stmt|;
name|struct
name|timeval
name|tv
decl_stmt|;
name|tv
operator|.
name|tv_sec
operator|=
name|timeout
operator|/
literal|1000
expr_stmt|;
name|tv
operator|.
name|tv_usec
operator|=
operator|(
name|timeout
operator|%
literal|1000
operator|)
operator|*
literal|1000
expr_stmt|;
name|int
name|ret
decl_stmt|;
name|ret
operator|=
name|qt_safe_select
argument_list|(
name|socketDescriptor
operator|+
literal|1
argument_list|,
operator|&
name|fdread
argument_list|,
operator|&
name|fdwrite
argument_list|,
literal|0
argument_list|,
name|timeout
operator|<
literal|0
condition|?
literal|0
else|:
operator|&
name|tv
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
operator|<=
literal|0
condition|)
return|return
name|ret
return|;
operator|*
name|selectForRead
operator|=
name|FD_ISSET
argument_list|(
name|socketDescriptor
argument_list|,
operator|&
name|fdread
argument_list|)
expr_stmt|;
operator|*
name|selectForWrite
operator|=
name|FD_ISSET
argument_list|(
name|socketDescriptor
argument_list|,
operator|&
name|fdwrite
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
