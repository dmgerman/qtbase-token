begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtNetwork module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qhttpsocketengine_p.h"
end_include
begin_include
include|#
directive|include
file|"qtcpsocket.h"
end_include
begin_include
include|#
directive|include
file|"qhostaddress.h"
end_include
begin_include
include|#
directive|include
file|"qurl.h"
end_include
begin_include
include|#
directive|include
file|"private/qhttpnetworkreply_p.h"
end_include
begin_include
include|#
directive|include
file|"qelapsedtimer.h"
end_include
begin_include
include|#
directive|include
file|"qnetworkinterface.h"
end_include
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_NETWORKPROXY
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_HTTP
argument_list|)
end_if
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_define
DECL|macro|DEBUG
define|#
directive|define
name|DEBUG
end_define
begin_constructor
DECL|function|QHttpSocketEngine
name|QHttpSocketEngine
operator|::
name|QHttpSocketEngine
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QAbstractSocketEngine
argument_list|(
operator|*
operator|new
name|QHttpSocketEnginePrivate
argument_list|,
name|parent
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QHttpSocketEngine
name|QHttpSocketEngine
operator|::
name|~
name|QHttpSocketEngine
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|initialize
name|bool
name|QHttpSocketEngine
operator|::
name|initialize
parameter_list|(
name|QAbstractSocket
operator|::
name|SocketType
name|type
parameter_list|,
name|QAbstractSocket
operator|::
name|NetworkLayerProtocol
name|protocol
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QHttpSocketEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|!=
name|QAbstractSocket
operator|::
name|TcpSocket
condition|)
return|return
literal|false
return|;
name|setProtocol
argument_list|(
name|protocol
argument_list|)
expr_stmt|;
name|setSocketType
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|d
operator|->
name|socket
operator|=
operator|new
name|QTcpSocket
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|d
operator|->
name|reply
operator|=
operator|new
name|QHttpNetworkReply
argument_list|(
name|QUrl
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_BEARERMANAGEMENT
name|d
operator|->
name|socket
operator|->
name|setProperty
argument_list|(
literal|"_q_networkSession"
argument_list|,
name|property
argument_list|(
literal|"_q_networkSession"
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// Explicitly disable proxying on the proxy socket itself to avoid
comment|// unwanted recursion.
name|d
operator|->
name|socket
operator|->
name|setProxy
argument_list|(
name|QNetworkProxy
operator|::
name|NoProxy
argument_list|)
expr_stmt|;
comment|// Intercept all the signals.
name|connect
argument_list|(
name|d
operator|->
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|connected
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|slotSocketConnected
argument_list|()
argument_list|)
argument_list|,
name|Qt
operator|::
name|DirectConnection
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|d
operator|->
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|disconnected
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|slotSocketDisconnected
argument_list|()
argument_list|)
argument_list|,
name|Qt
operator|::
name|DirectConnection
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|d
operator|->
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|slotSocketReadNotification
argument_list|()
argument_list|)
argument_list|,
name|Qt
operator|::
name|DirectConnection
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|d
operator|->
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|bytesWritten
argument_list|(
name|qint64
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|slotSocketBytesWritten
argument_list|()
argument_list|)
argument_list|,
name|Qt
operator|::
name|DirectConnection
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|d
operator|->
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|error
argument_list|(
name|QAbstractSocket
operator|::
name|SocketError
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|slotSocketError
argument_list|(
name|QAbstractSocket
operator|::
name|SocketError
argument_list|)
argument_list|)
argument_list|,
name|Qt
operator|::
name|DirectConnection
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|d
operator|->
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|stateChanged
argument_list|(
name|QAbstractSocket
operator|::
name|SocketState
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|slotSocketStateChanged
argument_list|(
name|QAbstractSocket
operator|::
name|SocketState
argument_list|)
argument_list|)
argument_list|,
name|Qt
operator|::
name|DirectConnection
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|initialize
name|bool
name|QHttpSocketEngine
operator|::
name|initialize
parameter_list|(
name|qintptr
parameter_list|,
name|QAbstractSocket
operator|::
name|SocketState
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|setProxy
name|void
name|QHttpSocketEngine
operator|::
name|setProxy
parameter_list|(
specifier|const
name|QNetworkProxy
modifier|&
name|proxy
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QHttpSocketEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|proxy
operator|=
name|proxy
expr_stmt|;
name|QString
name|user
init|=
name|proxy
operator|.
name|user
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|user
operator|.
name|isEmpty
argument_list|()
condition|)
name|d
operator|->
name|authenticator
operator|.
name|setUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|QString
name|password
init|=
name|proxy
operator|.
name|password
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|password
operator|.
name|isEmpty
argument_list|()
condition|)
name|d
operator|->
name|authenticator
operator|.
name|setPassword
argument_list|(
name|password
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|socketDescriptor
name|qintptr
name|QHttpSocketEngine
operator|::
name|socketDescriptor
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QHttpSocketEngine
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|socket
condition|?
name|d
operator|->
name|socket
operator|->
name|socketDescriptor
argument_list|()
else|:
literal|0
return|;
block|}
end_function
begin_function
DECL|function|isValid
name|bool
name|QHttpSocketEngine
operator|::
name|isValid
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QHttpSocketEngine
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|socket
return|;
block|}
end_function
begin_function
DECL|function|connectInternal
name|bool
name|QHttpSocketEngine
operator|::
name|connectInternal
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QHttpSocketEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|credentialsSent
operator|=
literal|false
expr_stmt|;
comment|// If the handshake is done, enter ConnectedState state and return true.
if|if
condition|(
name|d
operator|->
name|state
operator|==
name|Connected
condition|)
block|{
name|qWarning
argument_list|(
literal|"QHttpSocketEngine::connectToHost: called when already connected"
argument_list|)
expr_stmt|;
name|setState
argument_list|(
name|QAbstractSocket
operator|::
name|ConnectedState
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|d
operator|->
name|state
operator|==
name|ConnectSent
operator|&&
name|d
operator|->
name|socketState
operator|!=
name|QAbstractSocket
operator|::
name|ConnectedState
condition|)
name|setState
argument_list|(
name|QAbstractSocket
operator|::
name|UnconnectedState
argument_list|)
expr_stmt|;
comment|// Handshake isn't done. If unconnected, start connecting.
if|if
condition|(
name|d
operator|->
name|state
operator|==
name|None
operator|&&
name|d
operator|->
name|socket
operator|->
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|UnconnectedState
condition|)
block|{
name|setState
argument_list|(
name|QAbstractSocket
operator|::
name|ConnectingState
argument_list|)
expr_stmt|;
comment|//limit buffer in internal socket, data is buffered in the external socket under application control
name|d
operator|->
name|socket
operator|->
name|setReadBufferSize
argument_list|(
literal|65536
argument_list|)
expr_stmt|;
name|d
operator|->
name|socket
operator|->
name|connectToHost
argument_list|(
name|d
operator|->
name|proxy
operator|.
name|hostName
argument_list|()
argument_list|,
name|d
operator|->
name|proxy
operator|.
name|port
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// If connected (might happen right away, at least for localhost services
comment|// on some BSD systems), there might already be bytes available.
if|if
condition|(
name|bytesAvailable
argument_list|()
condition|)
name|slotSocketReadNotification
argument_list|()
expr_stmt|;
return|return
name|d
operator|->
name|socketState
operator|==
name|QAbstractSocket
operator|::
name|ConnectedState
return|;
block|}
end_function
begin_function
DECL|function|connectToHost
name|bool
name|QHttpSocketEngine
operator|::
name|connectToHost
parameter_list|(
specifier|const
name|QHostAddress
modifier|&
name|address
parameter_list|,
name|quint16
name|port
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QHttpSocketEngine
argument_list|)
expr_stmt|;
name|setPeerAddress
argument_list|(
name|address
argument_list|)
expr_stmt|;
name|setPeerPort
argument_list|(
name|port
argument_list|)
expr_stmt|;
name|d
operator|->
name|peerName
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|connectInternal
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|connectToHostByName
name|bool
name|QHttpSocketEngine
operator|::
name|connectToHostByName
parameter_list|(
specifier|const
name|QString
modifier|&
name|hostname
parameter_list|,
name|quint16
name|port
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QHttpSocketEngine
argument_list|)
expr_stmt|;
name|setPeerAddress
argument_list|(
name|QHostAddress
argument_list|()
argument_list|)
expr_stmt|;
name|setPeerPort
argument_list|(
name|port
argument_list|)
expr_stmt|;
name|d
operator|->
name|peerName
operator|=
name|hostname
expr_stmt|;
return|return
name|connectInternal
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|bind
name|bool
name|QHttpSocketEngine
operator|::
name|bind
parameter_list|(
specifier|const
name|QHostAddress
modifier|&
parameter_list|,
name|quint16
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|listen
name|bool
name|QHttpSocketEngine
operator|::
name|listen
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|accept
name|int
name|QHttpSocketEngine
operator|::
name|accept
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|close
name|void
name|QHttpSocketEngine
operator|::
name|close
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QHttpSocketEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|socket
condition|)
block|{
name|d
operator|->
name|socket
operator|->
name|close
argument_list|()
expr_stmt|;
operator|delete
name|d
operator|->
name|socket
expr_stmt|;
name|d
operator|->
name|socket
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|bytesAvailable
name|qint64
name|QHttpSocketEngine
operator|::
name|bytesAvailable
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QHttpSocketEngine
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|socket
condition|?
name|d
operator|->
name|socket
operator|->
name|bytesAvailable
argument_list|()
else|:
literal|0
return|;
block|}
end_function
begin_function
DECL|function|read
name|qint64
name|QHttpSocketEngine
operator|::
name|read
parameter_list|(
name|char
modifier|*
name|data
parameter_list|,
name|qint64
name|maxlen
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QHttpSocketEngine
argument_list|)
expr_stmt|;
name|qint64
name|bytesRead
init|=
name|d
operator|->
name|socket
operator|->
name|read
argument_list|(
name|data
argument_list|,
name|maxlen
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|socket
operator|->
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|UnconnectedState
operator|&&
name|d
operator|->
name|socket
operator|->
name|bytesAvailable
argument_list|()
operator|==
literal|0
condition|)
block|{
name|emitReadNotification
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|bytesRead
operator|==
operator|-
literal|1
condition|)
block|{
comment|// If nothing has been read so far, and the direct socket read
comment|// failed, return the socket's error. Otherwise, fall through and
comment|// return as much as we read so far.
name|close
argument_list|()
expr_stmt|;
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|RemoteHostClosedError
argument_list|,
name|QLatin1String
argument_list|(
literal|"Remote host closed"
argument_list|)
argument_list|)
expr_stmt|;
name|setState
argument_list|(
name|QAbstractSocket
operator|::
name|UnconnectedState
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
return|return
name|bytesRead
return|;
block|}
end_function
begin_function
DECL|function|write
name|qint64
name|QHttpSocketEngine
operator|::
name|write
parameter_list|(
specifier|const
name|char
modifier|*
name|data
parameter_list|,
name|qint64
name|len
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QHttpSocketEngine
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|socket
operator|->
name|write
argument_list|(
name|data
argument_list|,
name|len
argument_list|)
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_UDPSOCKET
end_ifndef
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_NETWORKINTERFACE
end_ifndef
begin_function
DECL|function|joinMulticastGroup
name|bool
name|QHttpSocketEngine
operator|::
name|joinMulticastGroup
parameter_list|(
specifier|const
name|QHostAddress
modifier|&
parameter_list|,
specifier|const
name|QNetworkInterface
modifier|&
parameter_list|)
block|{
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|UnsupportedSocketOperationError
argument_list|,
name|QLatin1String
argument_list|(
literal|"Operation on socket is not supported"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|leaveMulticastGroup
name|bool
name|QHttpSocketEngine
operator|::
name|leaveMulticastGroup
parameter_list|(
specifier|const
name|QHostAddress
modifier|&
parameter_list|,
specifier|const
name|QNetworkInterface
modifier|&
parameter_list|)
block|{
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|UnsupportedSocketOperationError
argument_list|,
name|QLatin1String
argument_list|(
literal|"Operation on socket is not supported"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|multicastInterface
name|QNetworkInterface
name|QHttpSocketEngine
operator|::
name|multicastInterface
parameter_list|()
specifier|const
block|{
return|return
name|QNetworkInterface
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setMulticastInterface
name|bool
name|QHttpSocketEngine
operator|::
name|setMulticastInterface
parameter_list|(
specifier|const
name|QNetworkInterface
modifier|&
parameter_list|)
block|{
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|UnsupportedSocketOperationError
argument_list|,
name|QLatin1String
argument_list|(
literal|"Operation on socket is not supported"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_NETWORKINTERFACE
end_comment
begin_function
DECL|function|readDatagram
name|qint64
name|QHttpSocketEngine
operator|::
name|readDatagram
parameter_list|(
name|char
modifier|*
parameter_list|,
name|qint64
parameter_list|,
name|QHostAddress
modifier|*
parameter_list|,
name|quint16
modifier|*
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|writeDatagram
name|qint64
name|QHttpSocketEngine
operator|::
name|writeDatagram
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|qint64
parameter_list|,
specifier|const
name|QHostAddress
modifier|&
parameter_list|,
name|quint16
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|hasPendingDatagrams
name|bool
name|QHttpSocketEngine
operator|::
name|hasPendingDatagrams
parameter_list|()
specifier|const
block|{
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|pendingDatagramSize
name|qint64
name|QHttpSocketEngine
operator|::
name|pendingDatagramSize
parameter_list|()
specifier|const
block|{
return|return
literal|0
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_UDPSOCKET
end_comment
begin_function
DECL|function|bytesToWrite
name|qint64
name|QHttpSocketEngine
operator|::
name|bytesToWrite
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QHttpSocketEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|socket
condition|)
block|{
return|return
name|d
operator|->
name|socket
operator|->
name|bytesToWrite
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
end_function
begin_function
DECL|function|option
name|int
name|QHttpSocketEngine
operator|::
name|option
parameter_list|(
name|SocketOption
name|option
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QHttpSocketEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|socket
condition|)
block|{
comment|// convert the enum and call the real socket
if|if
condition|(
name|option
operator|==
name|QAbstractSocketEngine
operator|::
name|LowDelayOption
condition|)
return|return
name|d
operator|->
name|socket
operator|->
name|socketOption
argument_list|(
name|QAbstractSocket
operator|::
name|LowDelayOption
argument_list|)
operator|.
name|toInt
argument_list|()
return|;
if|if
condition|(
name|option
operator|==
name|QAbstractSocketEngine
operator|::
name|KeepAliveOption
condition|)
return|return
name|d
operator|->
name|socket
operator|->
name|socketOption
argument_list|(
name|QAbstractSocket
operator|::
name|KeepAliveOption
argument_list|)
operator|.
name|toInt
argument_list|()
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|setOption
name|bool
name|QHttpSocketEngine
operator|::
name|setOption
parameter_list|(
name|SocketOption
name|option
parameter_list|,
name|int
name|value
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QHttpSocketEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|socket
condition|)
block|{
comment|// convert the enum and call the real socket
if|if
condition|(
name|option
operator|==
name|QAbstractSocketEngine
operator|::
name|LowDelayOption
condition|)
name|d
operator|->
name|socket
operator|->
name|setSocketOption
argument_list|(
name|QAbstractSocket
operator|::
name|LowDelayOption
argument_list|,
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|option
operator|==
name|QAbstractSocketEngine
operator|::
name|KeepAliveOption
condition|)
name|d
operator|->
name|socket
operator|->
name|setSocketOption
argument_list|(
name|QAbstractSocket
operator|::
name|KeepAliveOption
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/*    Returns the difference between msecs and elapsed. If msecs is -1,    however, -1 is returned. */
end_comment
begin_function
DECL|function|qt_timeout_value
specifier|static
name|int
name|qt_timeout_value
parameter_list|(
name|int
name|msecs
parameter_list|,
name|int
name|elapsed
parameter_list|)
block|{
if|if
condition|(
name|msecs
operator|==
operator|-
literal|1
condition|)
return|return
operator|-
literal|1
return|;
name|int
name|timeout
init|=
name|msecs
operator|-
name|elapsed
decl_stmt|;
return|return
name|timeout
operator|<
literal|0
condition|?
literal|0
else|:
name|timeout
return|;
block|}
end_function
begin_function
DECL|function|waitForRead
name|bool
name|QHttpSocketEngine
operator|::
name|waitForRead
parameter_list|(
name|int
name|msecs
parameter_list|,
name|bool
modifier|*
name|timedOut
parameter_list|)
block|{
name|Q_D
argument_list|(
specifier|const
name|QHttpSocketEngine
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|socket
operator|||
name|d
operator|->
name|socket
operator|->
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|UnconnectedState
condition|)
return|return
literal|false
return|;
name|QElapsedTimer
name|stopWatch
decl_stmt|;
name|stopWatch
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Wait for more data if nothing is available.
if|if
condition|(
operator|!
name|d
operator|->
name|socket
operator|->
name|bytesAvailable
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|socket
operator|->
name|waitForReadyRead
argument_list|(
name|qt_timeout_value
argument_list|(
name|msecs
argument_list|,
name|stopWatch
operator|.
name|elapsed
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|socket
operator|->
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|UnconnectedState
condition|)
return|return
literal|true
return|;
name|setError
argument_list|(
name|d
operator|->
name|socket
operator|->
name|error
argument_list|()
argument_list|,
name|d
operator|->
name|socket
operator|->
name|errorString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|timedOut
operator|&&
name|d
operator|->
name|socket
operator|->
name|error
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|SocketTimeoutError
condition|)
operator|*
name|timedOut
operator|=
literal|true
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|// If we're not connected yet, wait until we are, or until an error
comment|// occurs.
while|while
condition|(
name|d
operator|->
name|state
operator|!=
name|Connected
operator|&&
name|d
operator|->
name|socket
operator|->
name|waitForReadyRead
argument_list|(
name|qt_timeout_value
argument_list|(
name|msecs
argument_list|,
name|stopWatch
operator|.
name|elapsed
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
comment|// Loop while the protocol handshake is taking place.
block|}
comment|// Report any error that may occur.
if|if
condition|(
name|d
operator|->
name|state
operator|!=
name|Connected
condition|)
block|{
name|setError
argument_list|(
name|d
operator|->
name|socket
operator|->
name|error
argument_list|()
argument_list|,
name|d
operator|->
name|socket
operator|->
name|errorString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|timedOut
operator|&&
name|d
operator|->
name|socket
operator|->
name|error
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|SocketTimeoutError
condition|)
operator|*
name|timedOut
operator|=
literal|true
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|waitForWrite
name|bool
name|QHttpSocketEngine
operator|::
name|waitForWrite
parameter_list|(
name|int
name|msecs
parameter_list|,
name|bool
modifier|*
name|timedOut
parameter_list|)
block|{
name|Q_D
argument_list|(
specifier|const
name|QHttpSocketEngine
argument_list|)
expr_stmt|;
comment|// If we're connected, just forward the call.
if|if
condition|(
name|d
operator|->
name|state
operator|==
name|Connected
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|socket
operator|->
name|bytesToWrite
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|socket
operator|->
name|waitForBytesWritten
argument_list|(
name|msecs
argument_list|)
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|socket
operator|->
name|error
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|SocketTimeoutError
operator|&&
name|timedOut
condition|)
operator|*
name|timedOut
operator|=
literal|true
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
name|QElapsedTimer
name|stopWatch
decl_stmt|;
name|stopWatch
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// If we're not connected yet, wait until we are, and until bytes have
comment|// been received (i.e., the socket has connected, we have sent the
comment|// greeting, and then received the response).
while|while
condition|(
name|d
operator|->
name|state
operator|!=
name|Connected
operator|&&
name|d
operator|->
name|socket
operator|->
name|waitForReadyRead
argument_list|(
name|qt_timeout_value
argument_list|(
name|msecs
argument_list|,
name|stopWatch
operator|.
name|elapsed
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
comment|// Loop while the protocol handshake is taking place.
block|}
comment|// Report any error that may occur.
if|if
condition|(
name|d
operator|->
name|state
operator|!=
name|Connected
condition|)
block|{
comment|//        setError(d->socket->error(), d->socket->errorString());
if|if
condition|(
name|timedOut
operator|&&
name|d
operator|->
name|socket
operator|->
name|error
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|SocketTimeoutError
condition|)
operator|*
name|timedOut
operator|=
literal|true
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|waitForReadOrWrite
name|bool
name|QHttpSocketEngine
operator|::
name|waitForReadOrWrite
parameter_list|(
name|bool
modifier|*
name|readyToRead
parameter_list|,
name|bool
modifier|*
name|readyToWrite
parameter_list|,
name|bool
name|checkRead
parameter_list|,
name|bool
name|checkWrite
parameter_list|,
name|int
name|msecs
parameter_list|,
name|bool
modifier|*
name|timedOut
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|checkRead
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|checkWrite
condition|)
block|{
comment|// Not interested in writing? Then we wait for read notifications.
name|bool
name|canRead
init|=
name|waitForRead
argument_list|(
name|msecs
argument_list|,
name|timedOut
argument_list|)
decl_stmt|;
if|if
condition|(
name|readyToRead
condition|)
operator|*
name|readyToRead
operator|=
name|canRead
expr_stmt|;
return|return
name|canRead
return|;
block|}
comment|// Interested in writing? Then we wait for write notifications.
name|bool
name|canWrite
init|=
name|waitForWrite
argument_list|(
name|msecs
argument_list|,
name|timedOut
argument_list|)
decl_stmt|;
if|if
condition|(
name|readyToWrite
condition|)
operator|*
name|readyToWrite
operator|=
name|canWrite
expr_stmt|;
return|return
name|canWrite
return|;
block|}
end_function
begin_function
DECL|function|isReadNotificationEnabled
name|bool
name|QHttpSocketEngine
operator|::
name|isReadNotificationEnabled
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QHttpSocketEngine
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|readNotificationEnabled
return|;
block|}
end_function
begin_function
DECL|function|setReadNotificationEnabled
name|void
name|QHttpSocketEngine
operator|::
name|setReadNotificationEnabled
parameter_list|(
name|bool
name|enable
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QHttpSocketEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|readNotificationEnabled
operator|==
name|enable
condition|)
return|return;
name|d
operator|->
name|readNotificationEnabled
operator|=
name|enable
expr_stmt|;
if|if
condition|(
name|enable
condition|)
block|{
comment|// Enabling read notification can trigger a notification.
if|if
condition|(
name|bytesAvailable
argument_list|()
condition|)
name|slotSocketReadNotification
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|isWriteNotificationEnabled
name|bool
name|QHttpSocketEngine
operator|::
name|isWriteNotificationEnabled
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QHttpSocketEngine
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|writeNotificationEnabled
return|;
block|}
end_function
begin_function
DECL|function|setWriteNotificationEnabled
name|void
name|QHttpSocketEngine
operator|::
name|setWriteNotificationEnabled
parameter_list|(
name|bool
name|enable
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QHttpSocketEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|writeNotificationEnabled
operator|=
name|enable
expr_stmt|;
if|if
condition|(
name|enable
operator|&&
name|d
operator|->
name|state
operator|==
name|Connected
operator|&&
name|d
operator|->
name|socket
operator|->
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|ConnectedState
condition|)
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
name|this
argument_list|,
literal|"writeNotification"
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isExceptionNotificationEnabled
name|bool
name|QHttpSocketEngine
operator|::
name|isExceptionNotificationEnabled
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QHttpSocketEngine
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|exceptNotificationEnabled
return|;
block|}
end_function
begin_function
DECL|function|setExceptionNotificationEnabled
name|void
name|QHttpSocketEngine
operator|::
name|setExceptionNotificationEnabled
parameter_list|(
name|bool
name|enable
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QHttpSocketEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|exceptNotificationEnabled
operator|=
name|enable
expr_stmt|;
block|}
end_function
begin_function
DECL|function|slotSocketConnected
name|void
name|QHttpSocketEngine
operator|::
name|slotSocketConnected
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QHttpSocketEngine
argument_list|)
expr_stmt|;
comment|// Send the greeting.
specifier|const
name|char
name|method
index|[]
init|=
literal|"CONNECT "
decl_stmt|;
name|QByteArray
name|peerAddress
init|=
name|d
operator|->
name|peerName
operator|.
name|isEmpty
argument_list|()
condition|?
name|d
operator|->
name|peerAddress
operator|.
name|toString
argument_list|()
operator|.
name|toLatin1
argument_list|()
else|:
name|QUrl
operator|::
name|toAce
argument_list|(
name|d
operator|->
name|peerName
argument_list|)
decl_stmt|;
name|QByteArray
name|path
init|=
name|peerAddress
operator|+
literal|':'
operator|+
name|QByteArray
operator|::
name|number
argument_list|(
name|d
operator|->
name|peerPort
argument_list|)
decl_stmt|;
name|QByteArray
name|data
init|=
name|method
decl_stmt|;
name|data
operator|+=
name|path
expr_stmt|;
name|data
operator|+=
literal|" HTTP/1.1\r\n"
expr_stmt|;
name|data
operator|+=
literal|"Proxy-Connection: keep-alive\r\n"
expr_stmt|;
name|data
operator|+=
literal|"Host: "
operator|+
name|peerAddress
operator|+
literal|"\r\n"
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|proxy
operator|.
name|hasRawHeader
argument_list|(
literal|"User-Agent"
argument_list|)
condition|)
name|data
operator|+=
literal|"User-Agent: Mozilla/5.0\r\n"
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QByteArray
modifier|&
name|header
decl|,
name|d
operator|->
name|proxy
operator|.
name|rawHeaderList
argument_list|()
control|)
block|{
name|data
operator|+=
name|header
operator|+
literal|": "
operator|+
name|d
operator|->
name|proxy
operator|.
name|rawHeader
argument_list|(
name|header
argument_list|)
operator|+
literal|"\r\n"
expr_stmt|;
block|}
name|QAuthenticatorPrivate
modifier|*
name|priv
init|=
name|QAuthenticatorPrivate
operator|::
name|getPrivate
argument_list|(
name|d
operator|->
name|authenticator
argument_list|)
decl_stmt|;
comment|//qDebug()<< "slotSocketConnected: priv="<< priv<< (priv ? (int)priv->method : -1);
if|if
condition|(
name|priv
operator|&&
name|priv
operator|->
name|method
operator|!=
name|QAuthenticatorPrivate
operator|::
name|None
condition|)
block|{
name|d
operator|->
name|credentialsSent
operator|=
literal|true
expr_stmt|;
name|data
operator|+=
literal|"Proxy-Authorization: "
operator|+
name|priv
operator|->
name|calculateResponse
argument_list|(
name|method
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|data
operator|+=
literal|"\r\n"
expr_stmt|;
block|}
name|data
operator|+=
literal|"\r\n"
expr_stmt|;
comment|//     qDebug()<< ">>>>>>>> sending request"<< this;
comment|//     qDebug()<< data;
comment|//     qDebug()<< ">>>>>>>";
name|d
operator|->
name|socket
operator|->
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|d
operator|->
name|state
operator|=
name|ConnectSent
expr_stmt|;
block|}
end_function
begin_function
DECL|function|slotSocketDisconnected
name|void
name|QHttpSocketEngine
operator|::
name|slotSocketDisconnected
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|slotSocketReadNotification
name|void
name|QHttpSocketEngine
operator|::
name|slotSocketReadNotification
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QHttpSocketEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|state
operator|!=
name|Connected
operator|&&
name|d
operator|->
name|socket
operator|->
name|bytesAvailable
argument_list|()
operator|==
literal|0
condition|)
return|return;
if|if
condition|(
name|d
operator|->
name|state
operator|==
name|Connected
condition|)
block|{
comment|// Forward as a read notification.
if|if
condition|(
name|d
operator|->
name|readNotificationEnabled
condition|)
name|emitReadNotification
argument_list|()
expr_stmt|;
return|return;
block|}
name|readResponseContent
label|:
if|if
condition|(
name|d
operator|->
name|state
operator|==
name|ReadResponseContent
condition|)
block|{
name|char
name|dummybuffer
index|[
literal|4096
index|]
decl_stmt|;
while|while
condition|(
name|d
operator|->
name|pendingResponseData
condition|)
block|{
name|int
name|read
init|=
name|d
operator|->
name|socket
operator|->
name|read
argument_list|(
name|dummybuffer
argument_list|,
name|qMin
argument_list|(
sizeof|sizeof
argument_list|(
name|dummybuffer
argument_list|)
argument_list|,
operator|(
name|size_t
operator|)
name|d
operator|->
name|pendingResponseData
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|read
operator|>=
literal|0
condition|)
name|dummybuffer
index|[
name|read
index|]
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|read
operator|==
literal|0
condition|)
return|return;
if|if
condition|(
name|read
operator|==
operator|-
literal|1
condition|)
block|{
name|d
operator|->
name|socket
operator|->
name|disconnectFromHost
argument_list|()
expr_stmt|;
name|emitWriteNotification
argument_list|()
expr_stmt|;
return|return;
block|}
name|d
operator|->
name|pendingResponseData
operator|-=
name|read
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|->
name|pendingResponseData
operator|>
literal|0
condition|)
return|return;
name|d
operator|->
name|state
operator|=
name|SendAuthentication
expr_stmt|;
name|slotSocketConnected
argument_list|()
expr_stmt|;
return|return;
block|}
name|bool
name|ok
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|reply
operator|->
name|d_func
argument_list|()
operator|->
name|state
operator|==
name|QHttpNetworkReplyPrivate
operator|::
name|NothingDoneState
condition|)
name|d
operator|->
name|reply
operator|->
name|d_func
argument_list|()
operator|->
name|state
operator|=
name|QHttpNetworkReplyPrivate
operator|::
name|ReadingStatusState
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|reply
operator|->
name|d_func
argument_list|()
operator|->
name|state
operator|==
name|QHttpNetworkReplyPrivate
operator|::
name|ReadingStatusState
condition|)
block|{
name|ok
operator|=
name|d
operator|->
name|reply
operator|->
name|d_func
argument_list|()
operator|->
name|readStatus
argument_list|(
name|d
operator|->
name|socket
argument_list|)
operator|!=
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|ok
operator|&&
name|d
operator|->
name|reply
operator|->
name|d_func
argument_list|()
operator|->
name|state
operator|==
name|QHttpNetworkReplyPrivate
operator|::
name|ReadingStatusState
condition|)
return|return;
comment|//Not done parsing headers yet, wait for more data
block|}
if|if
condition|(
name|ok
operator|&&
name|d
operator|->
name|reply
operator|->
name|d_func
argument_list|()
operator|->
name|state
operator|==
name|QHttpNetworkReplyPrivate
operator|::
name|ReadingHeaderState
condition|)
block|{
name|ok
operator|=
name|d
operator|->
name|reply
operator|->
name|d_func
argument_list|()
operator|->
name|readHeader
argument_list|(
name|d
operator|->
name|socket
argument_list|)
operator|!=
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|ok
operator|&&
name|d
operator|->
name|reply
operator|->
name|d_func
argument_list|()
operator|->
name|state
operator|==
name|QHttpNetworkReplyPrivate
operator|::
name|ReadingHeaderState
condition|)
return|return;
comment|//Not done parsing headers yet, wait for more data
block|}
if|if
condition|(
operator|!
name|ok
condition|)
block|{
comment|// protocol error, this isn't HTTP
name|d
operator|->
name|socket
operator|->
name|close
argument_list|()
expr_stmt|;
name|setState
argument_list|(
name|QAbstractSocket
operator|::
name|UnconnectedState
argument_list|)
expr_stmt|;
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|ProxyProtocolError
argument_list|,
name|tr
argument_list|(
literal|"Did not receive HTTP response from proxy"
argument_list|)
argument_list|)
expr_stmt|;
name|emitConnectionNotification
argument_list|()
expr_stmt|;
return|return;
block|}
name|int
name|statusCode
init|=
name|d
operator|->
name|reply
operator|->
name|statusCode
argument_list|()
decl_stmt|;
name|QAuthenticatorPrivate
modifier|*
name|priv
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|statusCode
operator|==
literal|200
condition|)
block|{
name|d
operator|->
name|state
operator|=
name|Connected
expr_stmt|;
name|setLocalAddress
argument_list|(
name|d
operator|->
name|socket
operator|->
name|localAddress
argument_list|()
argument_list|)
expr_stmt|;
name|setLocalPort
argument_list|(
name|d
operator|->
name|socket
operator|->
name|localPort
argument_list|()
argument_list|)
expr_stmt|;
name|setState
argument_list|(
name|QAbstractSocket
operator|::
name|ConnectedState
argument_list|)
expr_stmt|;
name|d
operator|->
name|authenticator
operator|.
name|detach
argument_list|()
expr_stmt|;
name|priv
operator|=
name|QAuthenticatorPrivate
operator|::
name|getPrivate
argument_list|(
name|d
operator|->
name|authenticator
argument_list|)
expr_stmt|;
name|priv
operator|->
name|hasFailed
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|statusCode
operator|==
literal|407
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|credentialsSent
condition|)
block|{
comment|//407 response again means the provided username/password were invalid.
name|d
operator|->
name|authenticator
operator|=
name|QAuthenticator
argument_list|()
expr_stmt|;
comment|//this is needed otherwise parseHttpResponse won't set the state, and then signal isn't emitted.
name|d
operator|->
name|authenticator
operator|.
name|detach
argument_list|()
expr_stmt|;
name|priv
operator|=
name|QAuthenticatorPrivate
operator|::
name|getPrivate
argument_list|(
name|d
operator|->
name|authenticator
argument_list|)
expr_stmt|;
name|priv
operator|->
name|hasFailed
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|d
operator|->
name|authenticator
operator|.
name|isNull
argument_list|()
condition|)
name|d
operator|->
name|authenticator
operator|.
name|detach
argument_list|()
expr_stmt|;
name|priv
operator|=
name|QAuthenticatorPrivate
operator|::
name|getPrivate
argument_list|(
name|d
operator|->
name|authenticator
argument_list|)
expr_stmt|;
name|priv
operator|->
name|parseHttpResponse
argument_list|(
name|d
operator|->
name|reply
operator|->
name|header
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|priv
operator|->
name|phase
operator|==
name|QAuthenticatorPrivate
operator|::
name|Invalid
condition|)
block|{
comment|// problem parsing the reply
name|d
operator|->
name|socket
operator|->
name|close
argument_list|()
expr_stmt|;
name|setState
argument_list|(
name|QAbstractSocket
operator|::
name|UnconnectedState
argument_list|)
expr_stmt|;
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|ProxyProtocolError
argument_list|,
name|tr
argument_list|(
literal|"Error parsing authentication request from proxy"
argument_list|)
argument_list|)
expr_stmt|;
name|emitConnectionNotification
argument_list|()
expr_stmt|;
return|return;
block|}
name|bool
name|willClose
decl_stmt|;
name|QByteArray
name|proxyConnectionHeader
init|=
name|d
operator|->
name|reply
operator|->
name|headerField
argument_list|(
literal|"Proxy-Connection"
argument_list|)
decl_stmt|;
comment|// Although most proxies use the unofficial Proxy-Connection header, the Connection header
comment|// from http spec is also allowed.
if|if
condition|(
name|proxyConnectionHeader
operator|.
name|isEmpty
argument_list|()
condition|)
name|proxyConnectionHeader
operator|=
name|d
operator|->
name|reply
operator|->
name|headerField
argument_list|(
literal|"Connection"
argument_list|)
expr_stmt|;
name|proxyConnectionHeader
operator|=
name|proxyConnectionHeader
operator|.
name|toLower
argument_list|()
expr_stmt|;
if|if
condition|(
name|proxyConnectionHeader
operator|==
literal|"close"
condition|)
block|{
name|willClose
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|proxyConnectionHeader
operator|==
literal|"keep-alive"
condition|)
block|{
name|willClose
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
comment|// no Proxy-Connection header, so use the default
comment|// HTTP 1.1's default behaviour is to keep persistent connections
comment|// HTTP 1.0 or earlier, so we expect the server to close
name|willClose
operator|=
operator|(
name|d
operator|->
name|reply
operator|->
name|majorVersion
argument_list|()
operator|*
literal|0x100
operator|+
name|d
operator|->
name|reply
operator|->
name|minorVersion
argument_list|()
operator|)
operator|<=
literal|0x0100
expr_stmt|;
block|}
if|if
condition|(
name|willClose
condition|)
block|{
comment|// the server will disconnect, so let's avoid receiving an error
comment|// especially since the signal below may trigger a new event loop
name|d
operator|->
name|socket
operator|->
name|disconnectFromHost
argument_list|()
expr_stmt|;
name|d
operator|->
name|socket
operator|->
name|readAll
argument_list|()
expr_stmt|;
comment|//We're done with the reply and need to reset it for the next connection
operator|delete
name|d
operator|->
name|reply
expr_stmt|;
name|d
operator|->
name|reply
operator|=
operator|new
name|QHttpNetworkReply
expr_stmt|;
block|}
if|if
condition|(
name|priv
operator|->
name|phase
operator|==
name|QAuthenticatorPrivate
operator|::
name|Done
condition|)
emit|emit
name|proxyAuthenticationRequired
argument_list|(
name|d
operator|->
name|proxy
argument_list|,
operator|&
name|d
operator|->
name|authenticator
argument_list|)
emit|;
comment|// priv->phase will get reset to QAuthenticatorPrivate::Start if the authenticator got modified in the signal above.
if|if
condition|(
name|priv
operator|->
name|phase
operator|==
name|QAuthenticatorPrivate
operator|::
name|Done
condition|)
block|{
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|ProxyAuthenticationRequiredError
argument_list|,
name|tr
argument_list|(
literal|"Authentication required"
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|socket
operator|->
name|disconnectFromHost
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// close the connection if it isn't already and reconnect using the chosen authentication method
name|d
operator|->
name|state
operator|=
name|SendAuthentication
expr_stmt|;
if|if
condition|(
name|willClose
condition|)
block|{
name|d
operator|->
name|socket
operator|->
name|connectToHost
argument_list|(
name|d
operator|->
name|proxy
operator|.
name|hostName
argument_list|()
argument_list|,
name|d
operator|->
name|proxy
operator|.
name|port
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bool
name|ok
decl_stmt|;
name|int
name|contentLength
init|=
name|d
operator|->
name|reply
operator|->
name|headerField
argument_list|(
literal|"Content-Length"
argument_list|)
operator|.
name|toInt
argument_list|(
operator|&
name|ok
argument_list|)
decl_stmt|;
if|if
condition|(
name|ok
operator|&&
name|contentLength
operator|>
literal|0
condition|)
block|{
name|d
operator|->
name|state
operator|=
name|ReadResponseContent
expr_stmt|;
name|d
operator|->
name|pendingResponseData
operator|=
name|contentLength
expr_stmt|;
goto|goto
name|readResponseContent
goto|;
block|}
else|else
block|{
name|d
operator|->
name|state
operator|=
name|SendAuthentication
expr_stmt|;
name|slotSocketConnected
argument_list|()
expr_stmt|;
block|}
block|}
return|return;
block|}
block|}
else|else
block|{
name|d
operator|->
name|socket
operator|->
name|close
argument_list|()
expr_stmt|;
name|setState
argument_list|(
name|QAbstractSocket
operator|::
name|UnconnectedState
argument_list|)
expr_stmt|;
if|if
condition|(
name|statusCode
operator|==
literal|403
operator|||
name|statusCode
operator|==
literal|405
condition|)
block|{
comment|// 403 Forbidden
comment|// 405 Method Not Allowed
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|SocketAccessError
argument_list|,
name|tr
argument_list|(
literal|"Proxy denied connection"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|statusCode
operator|==
literal|404
condition|)
block|{
comment|// 404 Not Found: host lookup error
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|HostNotFoundError
argument_list|,
name|QAbstractSocket
operator|::
name|tr
argument_list|(
literal|"Host not found"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|statusCode
operator|==
literal|503
condition|)
block|{
comment|// 503 Service Unavailable: Connection Refused
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|ConnectionRefusedError
argument_list|,
name|QAbstractSocket
operator|::
name|tr
argument_list|(
literal|"Connection refused"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Some other reply
comment|//qWarning("UNEXPECTED RESPONSE: [%s]", responseHeader.toString().toLatin1().data());
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|ProxyProtocolError
argument_list|,
name|tr
argument_list|(
literal|"Error communicating with HTTP proxy"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// The handshake is done; notify that we're connected (or failed to connect)
name|emitConnectionNotification
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|slotSocketBytesWritten
name|void
name|QHttpSocketEngine
operator|::
name|slotSocketBytesWritten
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QHttpSocketEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|state
operator|==
name|Connected
operator|&&
name|d
operator|->
name|writeNotificationEnabled
condition|)
name|emitWriteNotification
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|slotSocketError
name|void
name|QHttpSocketEngine
operator|::
name|slotSocketError
parameter_list|(
name|QAbstractSocket
operator|::
name|SocketError
name|error
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QHttpSocketEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|state
operator|!=
name|Connected
condition|)
block|{
comment|// we are in proxy handshaking stages
if|if
condition|(
name|error
operator|==
name|QAbstractSocket
operator|::
name|HostNotFoundError
condition|)
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|ProxyNotFoundError
argument_list|,
name|tr
argument_list|(
literal|"Proxy server not found"
argument_list|)
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|error
operator|==
name|QAbstractSocket
operator|::
name|ConnectionRefusedError
condition|)
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|ProxyConnectionRefusedError
argument_list|,
name|tr
argument_list|(
literal|"Proxy connection refused"
argument_list|)
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|error
operator|==
name|QAbstractSocket
operator|::
name|SocketTimeoutError
condition|)
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|ProxyConnectionTimeoutError
argument_list|,
name|tr
argument_list|(
literal|"Proxy server connection timed out"
argument_list|)
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|error
operator|==
name|QAbstractSocket
operator|::
name|RemoteHostClosedError
condition|)
name|setError
argument_list|(
name|QAbstractSocket
operator|::
name|ProxyConnectionClosedError
argument_list|,
name|tr
argument_list|(
literal|"Proxy connection closed prematurely"
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|setError
argument_list|(
name|error
argument_list|,
name|d
operator|->
name|socket
operator|->
name|errorString
argument_list|()
argument_list|)
expr_stmt|;
name|emitConnectionNotification
argument_list|()
expr_stmt|;
return|return;
block|}
comment|// We're connected
if|if
condition|(
name|error
operator|==
name|QAbstractSocket
operator|::
name|SocketTimeoutError
condition|)
return|return;
comment|// ignore this error
name|d
operator|->
name|state
operator|=
name|None
expr_stmt|;
name|setError
argument_list|(
name|error
argument_list|,
name|d
operator|->
name|socket
operator|->
name|errorString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
operator|!=
name|QAbstractSocket
operator|::
name|RemoteHostClosedError
condition|)
name|qDebug
argument_list|()
operator|<<
literal|"QHttpSocketEngine::slotSocketError: got weird error ="
operator|<<
name|error
expr_stmt|;
comment|//read notification needs to always be emitted, otherwise the higher layer doesn't get the disconnected signal
name|emitReadNotification
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|slotSocketStateChanged
name|void
name|QHttpSocketEngine
operator|::
name|slotSocketStateChanged
parameter_list|(
name|QAbstractSocket
operator|::
name|SocketState
name|state
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|emitPendingReadNotification
name|void
name|QHttpSocketEngine
operator|::
name|emitPendingReadNotification
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QHttpSocketEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|readNotificationPending
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|readNotificationEnabled
condition|)
emit|emit
name|readNotification
argument_list|()
emit|;
block|}
end_function
begin_function
DECL|function|emitPendingWriteNotification
name|void
name|QHttpSocketEngine
operator|::
name|emitPendingWriteNotification
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QHttpSocketEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|writeNotificationPending
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|writeNotificationEnabled
condition|)
emit|emit
name|writeNotification
argument_list|()
emit|;
block|}
end_function
begin_function
DECL|function|emitPendingConnectionNotification
name|void
name|QHttpSocketEngine
operator|::
name|emitPendingConnectionNotification
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QHttpSocketEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|connectionNotificationPending
operator|=
literal|false
expr_stmt|;
emit|emit
name|connectionNotification
argument_list|()
emit|;
block|}
end_function
begin_function
DECL|function|emitReadNotification
name|void
name|QHttpSocketEngine
operator|::
name|emitReadNotification
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QHttpSocketEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|readNotificationActivated
operator|=
literal|true
expr_stmt|;
comment|// if there is a connection notification pending we have to emit the readNotification
comment|// incase there is connection error. This is only needed for Windows, but it does not
comment|// hurt in other cases.
if|if
condition|(
operator|(
name|d
operator|->
name|readNotificationEnabled
operator|&&
operator|!
name|d
operator|->
name|readNotificationPending
operator|)
operator|||
name|d
operator|->
name|connectionNotificationPending
condition|)
block|{
name|d
operator|->
name|readNotificationPending
operator|=
literal|true
expr_stmt|;
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
name|this
argument_list|,
literal|"emitPendingReadNotification"
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|emitWriteNotification
name|void
name|QHttpSocketEngine
operator|::
name|emitWriteNotification
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QHttpSocketEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|writeNotificationActivated
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|writeNotificationEnabled
operator|&&
operator|!
name|d
operator|->
name|writeNotificationPending
condition|)
block|{
name|d
operator|->
name|writeNotificationPending
operator|=
literal|true
expr_stmt|;
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
name|this
argument_list|,
literal|"emitPendingWriteNotification"
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|emitConnectionNotification
name|void
name|QHttpSocketEngine
operator|::
name|emitConnectionNotification
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QHttpSocketEngine
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|connectionNotificationPending
condition|)
block|{
name|d
operator|->
name|connectionNotificationPending
operator|=
literal|true
expr_stmt|;
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
name|this
argument_list|,
literal|"emitPendingConnectionNotification"
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_constructor
DECL|function|QHttpSocketEnginePrivate
name|QHttpSocketEnginePrivate
operator|::
name|QHttpSocketEnginePrivate
parameter_list|()
member_init_list|:
name|readNotificationEnabled
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|writeNotificationEnabled
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|exceptNotificationEnabled
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|readNotificationActivated
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|writeNotificationActivated
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|readNotificationPending
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|writeNotificationPending
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|connectionNotificationPending
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|credentialsSent
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|pendingResponseData
argument_list|(
literal|0
argument_list|)
block|{
name|socket
operator|=
literal|0
expr_stmt|;
name|reply
operator|=
literal|0
expr_stmt|;
name|state
operator|=
name|QHttpSocketEngine
operator|::
name|None
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QHttpSocketEnginePrivate
name|QHttpSocketEnginePrivate
operator|::
name|~
name|QHttpSocketEnginePrivate
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|createSocketEngine
name|QAbstractSocketEngine
modifier|*
name|QHttpSocketEngineHandler
operator|::
name|createSocketEngine
parameter_list|(
name|QAbstractSocket
operator|::
name|SocketType
name|socketType
parameter_list|,
specifier|const
name|QNetworkProxy
modifier|&
name|proxy
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
block|{
if|if
condition|(
name|socketType
operator|!=
name|QAbstractSocket
operator|::
name|TcpSocket
condition|)
return|return
literal|0
return|;
comment|// proxy type must have been resolved by now
if|if
condition|(
name|proxy
operator|.
name|type
argument_list|()
operator|!=
name|QNetworkProxy
operator|::
name|HttpProxy
condition|)
return|return
literal|0
return|;
comment|// we only accept active sockets
if|if
condition|(
operator|!
name|qobject_cast
argument_list|<
name|QAbstractSocket
operator|*
argument_list|>
argument_list|(
name|parent
argument_list|)
condition|)
return|return
literal|0
return|;
name|QHttpSocketEngine
modifier|*
name|engine
init|=
operator|new
name|QHttpSocketEngine
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|engine
operator|->
name|setProxy
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
return|return
name|engine
return|;
block|}
end_function
begin_function
DECL|function|createSocketEngine
name|QAbstractSocketEngine
modifier|*
name|QHttpSocketEngineHandler
operator|::
name|createSocketEngine
parameter_list|(
name|qintptr
parameter_list|,
name|QObject
modifier|*
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
end_unit
