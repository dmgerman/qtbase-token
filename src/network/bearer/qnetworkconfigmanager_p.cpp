begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the QtNetwork module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qnetworkconfigmanager_p.h"
end_include
begin_include
include|#
directive|include
file|"qbearerplugin_p.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/private/qfactoryloader_p.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qdebug.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qtimer.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qstringlist.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qthread.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/private/qcoreapplication_p.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/private/qthread_p.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qbytearray.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qglobal.h>
end_include
begin_include
include|#
directive|include
file|<utility>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_BEARERMANAGEMENT
end_ifndef
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_constructor
DECL|function|QNetworkConfigurationManagerPrivate
name|QNetworkConfigurationManagerPrivate
operator|::
name|QNetworkConfigurationManagerPrivate
parameter_list|()
member_init_list|:
name|QObject
argument_list|()
member_init_list|,
name|pollTimer
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|mutex
argument_list|(
name|QMutex
operator|::
name|Recursive
argument_list|)
member_init_list|,
name|forcedPolling
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|firstUpdate
argument_list|(
literal|true
argument_list|)
block|{
name|qRegisterMetaType
argument_list|<
name|QNetworkConfiguration
argument_list|>
argument_list|()
expr_stmt|;
name|qRegisterMetaType
argument_list|<
name|QNetworkConfigurationPrivatePointer
argument_list|>
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|initialize
name|void
name|QNetworkConfigurationManagerPrivate
operator|::
name|initialize
parameter_list|()
block|{
comment|//Two stage construction, because we only want to do this heavyweight work for the winner of the Q_GLOBAL_STATIC race.
name|bearerThread
operator|=
operator|new
name|QDaemonThread
argument_list|()
expr_stmt|;
name|bearerThread
operator|->
name|setObjectName
argument_list|(
name|QStringLiteral
argument_list|(
literal|"Qt bearer thread"
argument_list|)
argument_list|)
expr_stmt|;
name|bearerThread
operator|->
name|moveToThread
argument_list|(
name|QCoreApplicationPrivate
operator|::
name|mainThread
argument_list|()
argument_list|)
expr_stmt|;
comment|// because cleanup() is called in main thread context.
name|moveToThread
argument_list|(
name|bearerThread
argument_list|)
expr_stmt|;
name|bearerThread
operator|->
name|start
argument_list|()
expr_stmt|;
name|updateConfigurations
argument_list|()
expr_stmt|;
block|}
end_function
begin_destructor
DECL|function|~QNetworkConfigurationManagerPrivate
name|QNetworkConfigurationManagerPrivate
operator|::
name|~
name|QNetworkConfigurationManagerPrivate
parameter_list|()
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
name|qDeleteAll
argument_list|(
name|sessionEngines
argument_list|)
expr_stmt|;
name|sessionEngines
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|bearerThread
condition|)
name|bearerThread
operator|->
name|quit
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|cleanup
name|void
name|QNetworkConfigurationManagerPrivate
operator|::
name|cleanup
parameter_list|()
block|{
name|QThread
modifier|*
name|thread
init|=
name|bearerThread
decl_stmt|;
name|deleteLater
argument_list|()
expr_stmt|;
if|if
condition|(
name|thread
operator|->
name|wait
argument_list|(
literal|5000
argument_list|)
condition|)
operator|delete
name|thread
expr_stmt|;
block|}
end_function
begin_function
DECL|function|defaultConfiguration
name|QNetworkConfiguration
name|QNetworkConfigurationManagerPrivate
operator|::
name|defaultConfiguration
parameter_list|()
specifier|const
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
for|for
control|(
name|QBearerEngine
modifier|*
name|engine
range|:
name|sessionEngines
control|)
block|{
name|QNetworkConfigurationPrivatePointer
name|ptr
init|=
name|engine
operator|->
name|defaultConfiguration
argument_list|()
decl_stmt|;
if|if
condition|(
name|ptr
condition|)
block|{
name|QNetworkConfiguration
name|config
decl_stmt|;
name|config
operator|.
name|d
operator|=
name|ptr
expr_stmt|;
return|return
name|config
return|;
block|}
block|}
comment|// Engines don't have a default configuration.
comment|// Return first active snap
name|QNetworkConfigurationPrivatePointer
name|defaultConfiguration
decl_stmt|;
for|for
control|(
name|QBearerEngine
modifier|*
name|engine
range|:
name|sessionEngines
control|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|engine
operator|->
name|mutex
argument_list|)
decl_stmt|;
for|for
control|(
specifier|const
specifier|auto
modifier|&
name|ptr
range|:
name|qAsConst
argument_list|(
name|engine
operator|->
name|snapConfigurations
argument_list|)
control|)
block|{
name|QMutexLocker
name|configLocker
argument_list|(
operator|&
name|ptr
operator|->
name|mutex
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|ptr
operator|->
name|state
operator|&
name|QNetworkConfiguration
operator|::
name|Active
operator|)
operator|==
name|QNetworkConfiguration
operator|::
name|Active
condition|)
block|{
name|QNetworkConfiguration
name|config
decl_stmt|;
name|config
operator|.
name|d
operator|=
name|ptr
expr_stmt|;
return|return
name|config
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|defaultConfiguration
condition|)
block|{
if|if
condition|(
operator|(
name|ptr
operator|->
name|state
operator|&
name|QNetworkConfiguration
operator|::
name|Discovered
operator|)
operator|==
name|QNetworkConfiguration
operator|::
name|Discovered
condition|)
name|defaultConfiguration
operator|=
name|ptr
expr_stmt|;
block|}
block|}
block|}
comment|// No Active SNAPs return first Discovered SNAP.
if|if
condition|(
name|defaultConfiguration
condition|)
block|{
name|QNetworkConfiguration
name|config
decl_stmt|;
name|config
operator|.
name|d
operator|=
name|defaultConfiguration
expr_stmt|;
return|return
name|config
return|;
block|}
comment|/*         No Active or Discovered SNAPs, find the perferred access point.         The following priority order is used:              1. Active Ethernet             2. Active WLAN             3. Active Other             4. Discovered Ethernet             5. Discovered WLAN             6. Discovered Other     */
for|for
control|(
name|QBearerEngine
modifier|*
name|engine
range|:
name|sessionEngines
control|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|engine
operator|->
name|mutex
argument_list|)
decl_stmt|;
for|for
control|(
specifier|const
specifier|auto
modifier|&
name|ptr
range|:
name|qAsConst
argument_list|(
name|engine
operator|->
name|accessPointConfigurations
argument_list|)
control|)
block|{
name|QMutexLocker
name|configLocker
argument_list|(
operator|&
name|ptr
operator|->
name|mutex
argument_list|)
decl_stmt|;
name|QNetworkConfiguration
operator|::
name|BearerType
name|bearerType
init|=
name|ptr
operator|->
name|bearerType
decl_stmt|;
if|if
condition|(
operator|(
name|ptr
operator|->
name|state
operator|&
name|QNetworkConfiguration
operator|::
name|Discovered
operator|)
operator|==
name|QNetworkConfiguration
operator|::
name|Discovered
condition|)
block|{
if|if
condition|(
operator|!
name|defaultConfiguration
condition|)
block|{
name|defaultConfiguration
operator|=
name|ptr
expr_stmt|;
block|}
else|else
block|{
name|QMutexLocker
name|defaultConfigLocker
argument_list|(
operator|&
name|defaultConfiguration
operator|->
name|mutex
argument_list|)
decl_stmt|;
if|if
condition|(
name|defaultConfiguration
operator|->
name|state
operator|==
name|ptr
operator|->
name|state
condition|)
block|{
switch|switch
condition|(
name|defaultConfiguration
operator|->
name|bearerType
condition|)
block|{
case|case
name|QNetworkConfiguration
operator|::
name|BearerEthernet
case|:
comment|// do nothing
break|break;
case|case
name|QNetworkConfiguration
operator|::
name|BearerWLAN
case|:
comment|// Ethernet beats WLAN
name|defaultConfiguration
operator|=
name|ptr
expr_stmt|;
break|break;
default|default:
comment|// Ethernet and WLAN beats other
if|if
condition|(
name|bearerType
operator|==
name|QNetworkConfiguration
operator|::
name|BearerEthernet
operator|||
name|bearerType
operator|==
name|QNetworkConfiguration
operator|::
name|BearerWLAN
condition|)
block|{
name|defaultConfiguration
operator|=
name|ptr
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// active beats discovered
if|if
condition|(
operator|(
name|defaultConfiguration
operator|->
name|state
operator|&
name|QNetworkConfiguration
operator|::
name|Active
operator|)
operator|!=
name|QNetworkConfiguration
operator|::
name|Active
condition|)
block|{
name|defaultConfiguration
operator|=
name|ptr
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
comment|// No Active InternetAccessPoint return first Discovered InternetAccessPoint.
if|if
condition|(
name|defaultConfiguration
condition|)
block|{
name|QNetworkConfiguration
name|config
decl_stmt|;
name|config
operator|.
name|d
operator|=
name|defaultConfiguration
expr_stmt|;
return|return
name|config
return|;
block|}
return|return
name|QNetworkConfiguration
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|allConfigurations
name|QList
argument_list|<
name|QNetworkConfiguration
argument_list|>
name|QNetworkConfigurationManagerPrivate
operator|::
name|allConfigurations
parameter_list|(
name|QNetworkConfiguration
operator|::
name|StateFlags
name|filter
parameter_list|)
specifier|const
block|{
name|QList
argument_list|<
name|QNetworkConfiguration
argument_list|>
name|result
decl_stmt|;
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
for|for
control|(
name|QBearerEngine
modifier|*
name|engine
range|:
name|sessionEngines
control|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|engine
operator|->
name|mutex
argument_list|)
decl_stmt|;
comment|//find all InternetAccessPoints
for|for
control|(
specifier|const
specifier|auto
modifier|&
name|ptr
range|:
name|qAsConst
argument_list|(
name|engine
operator|->
name|accessPointConfigurations
argument_list|)
control|)
block|{
name|QMutexLocker
name|configLocker
argument_list|(
operator|&
name|ptr
operator|->
name|mutex
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|ptr
operator|->
name|state
operator|&
name|filter
operator|)
operator|==
name|filter
condition|)
block|{
name|QNetworkConfiguration
name|pt
decl_stmt|;
name|pt
operator|.
name|d
operator|=
name|ptr
expr_stmt|;
name|result
operator|<<
name|pt
expr_stmt|;
block|}
block|}
comment|//find all service networks
for|for
control|(
specifier|const
specifier|auto
modifier|&
name|ptr
range|:
name|qAsConst
argument_list|(
name|engine
operator|->
name|snapConfigurations
argument_list|)
control|)
block|{
name|QMutexLocker
name|configLocker
argument_list|(
operator|&
name|ptr
operator|->
name|mutex
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|ptr
operator|->
name|state
operator|&
name|filter
operator|)
operator|==
name|filter
condition|)
block|{
name|QNetworkConfiguration
name|pt
decl_stmt|;
name|pt
operator|.
name|d
operator|=
name|ptr
expr_stmt|;
name|result
operator|<<
name|pt
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|configurationFromIdentifier
name|QNetworkConfiguration
name|QNetworkConfigurationManagerPrivate
operator|::
name|configurationFromIdentifier
parameter_list|(
specifier|const
name|QString
modifier|&
name|identifier
parameter_list|)
specifier|const
block|{
name|QNetworkConfiguration
name|item
decl_stmt|;
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
for|for
control|(
name|QBearerEngine
modifier|*
name|engine
range|:
name|sessionEngines
control|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|engine
operator|->
name|mutex
argument_list|)
decl_stmt|;
if|if
condition|(
name|auto
name|ptr
init|=
name|engine
operator|->
name|accessPointConfigurations
operator|.
name|value
argument_list|(
name|identifier
argument_list|)
condition|)
block|{
name|item
operator|.
name|d
operator|=
name|std
operator|::
name|move
argument_list|(
name|ptr
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|auto
name|ptr
init|=
name|engine
operator|->
name|snapConfigurations
operator|.
name|value
argument_list|(
name|identifier
argument_list|)
condition|)
block|{
name|item
operator|.
name|d
operator|=
name|std
operator|::
name|move
argument_list|(
name|ptr
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|auto
name|ptr
init|=
name|engine
operator|->
name|userChoiceConfigurations
operator|.
name|value
argument_list|(
name|identifier
argument_list|)
condition|)
block|{
name|item
operator|.
name|d
operator|=
name|std
operator|::
name|move
argument_list|(
name|ptr
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
return|return
name|item
return|;
block|}
end_function
begin_function
DECL|function|isOnline
name|bool
name|QNetworkConfigurationManagerPrivate
operator|::
name|isOnline
parameter_list|()
specifier|const
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
comment|// We need allConfigurations since onlineConfigurations is filled with queued connections
comment|// and thus is not always (more importantly just after creation) up to date
return|return
operator|!
name|allConfigurations
argument_list|(
name|QNetworkConfiguration
operator|::
name|Active
argument_list|)
operator|.
name|isEmpty
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|capabilities
name|QNetworkConfigurationManager
operator|::
name|Capabilities
name|QNetworkConfigurationManagerPrivate
operator|::
name|capabilities
parameter_list|()
specifier|const
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
name|QNetworkConfigurationManager
operator|::
name|Capabilities
name|capFlags
decl_stmt|;
for|for
control|(
name|QBearerEngine
modifier|*
name|engine
range|:
name|sessionEngines
control|)
name|capFlags
operator||=
name|engine
operator|->
name|capabilities
argument_list|()
expr_stmt|;
return|return
name|capFlags
return|;
block|}
end_function
begin_function
DECL|function|configurationAdded
name|void
name|QNetworkConfigurationManagerPrivate
operator|::
name|configurationAdded
parameter_list|(
name|QNetworkConfigurationPrivatePointer
name|ptr
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|firstUpdate
condition|)
block|{
name|QNetworkConfiguration
name|item
decl_stmt|;
name|item
operator|.
name|d
operator|=
name|ptr
expr_stmt|;
emit|emit
name|configurationAdded
argument_list|(
name|item
argument_list|)
emit|;
block|}
name|ptr
operator|->
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
name|ptr
operator|->
name|state
operator|==
name|QNetworkConfiguration
operator|::
name|Active
condition|)
block|{
name|ptr
operator|->
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|onlineConfigurations
operator|.
name|insert
argument_list|(
name|ptr
operator|->
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|firstUpdate
operator|&&
name|onlineConfigurations
operator|.
name|count
argument_list|()
operator|==
literal|1
condition|)
emit|emit
name|onlineStateChanged
argument_list|(
literal|true
argument_list|)
emit|;
block|}
else|else
block|{
name|ptr
operator|->
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|configurationRemoved
name|void
name|QNetworkConfigurationManagerPrivate
operator|::
name|configurationRemoved
parameter_list|(
name|QNetworkConfigurationPrivatePointer
name|ptr
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
name|ptr
operator|->
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
name|ptr
operator|->
name|isValid
operator|=
literal|false
expr_stmt|;
name|ptr
operator|->
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|firstUpdate
condition|)
block|{
name|QNetworkConfiguration
name|item
decl_stmt|;
name|item
operator|.
name|d
operator|=
name|ptr
expr_stmt|;
emit|emit
name|configurationRemoved
argument_list|(
name|item
argument_list|)
emit|;
block|}
name|onlineConfigurations
operator|.
name|remove
argument_list|(
name|ptr
operator|->
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|firstUpdate
operator|&&
name|onlineConfigurations
operator|.
name|isEmpty
argument_list|()
condition|)
emit|emit
name|onlineStateChanged
argument_list|(
literal|false
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|configurationChanged
name|void
name|QNetworkConfigurationManagerPrivate
operator|::
name|configurationChanged
parameter_list|(
name|QNetworkConfigurationPrivatePointer
name|ptr
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|firstUpdate
condition|)
block|{
name|QNetworkConfiguration
name|item
decl_stmt|;
name|item
operator|.
name|d
operator|=
name|ptr
expr_stmt|;
emit|emit
name|configurationChanged
argument_list|(
name|item
argument_list|)
emit|;
block|}
name|bool
name|previous
init|=
operator|!
name|onlineConfigurations
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
name|ptr
operator|->
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
name|ptr
operator|->
name|state
operator|==
name|QNetworkConfiguration
operator|::
name|Active
condition|)
name|onlineConfigurations
operator|.
name|insert
argument_list|(
name|ptr
operator|->
name|id
argument_list|)
expr_stmt|;
else|else
name|onlineConfigurations
operator|.
name|remove
argument_list|(
name|ptr
operator|->
name|id
argument_list|)
expr_stmt|;
name|ptr
operator|->
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|bool
name|online
init|=
operator|!
name|onlineConfigurations
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|firstUpdate
operator|&&
name|online
operator|!=
name|previous
condition|)
emit|emit
name|onlineStateChanged
argument_list|(
name|online
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|updateConfigurations
name|void
name|QNetworkConfigurationManagerPrivate
operator|::
name|updateConfigurations
parameter_list|()
block|{
typedef|typedef
name|QMultiMap
argument_list|<
name|int
argument_list|,
name|QString
argument_list|>
name|PluginKeyMap
typedef|;
typedef|typedef
name|PluginKeyMap
operator|::
name|const_iterator
name|PluginKeyMapConstIterator
typedef|;
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
if|if
condition|(
name|firstUpdate
condition|)
block|{
if|if
condition|(
name|qobject_cast
argument_list|<
name|QBearerEngine
operator|*
argument_list|>
argument_list|(
name|sender
argument_list|()
argument_list|)
condition|)
return|return;
name|updating
operator|=
literal|false
expr_stmt|;
name|bool
name|envOK
init|=
literal|false
decl_stmt|;
specifier|const
name|int
name|skipGeneric
init|=
name|qEnvironmentVariableIntValue
argument_list|(
literal|"QT_EXCLUDE_GENERIC_BEARER"
argument_list|,
operator|&
name|envOK
argument_list|)
decl_stmt|;
name|QBearerEngine
modifier|*
name|generic
init|=
literal|0
decl_stmt|;
specifier|static
name|QFactoryLoader
name|loader
argument_list|(
name|QBearerEngineFactoryInterface_iid
argument_list|,
name|QLatin1String
argument_list|(
literal|"/bearer"
argument_list|)
argument_list|)
decl_stmt|;
name|QFactoryLoader
modifier|*
name|l
init|=
operator|&
name|loader
decl_stmt|;
specifier|const
name|PluginKeyMap
name|keyMap
init|=
name|l
operator|->
name|keyMap
argument_list|()
decl_stmt|;
specifier|const
name|PluginKeyMapConstIterator
name|cend
init|=
name|keyMap
operator|.
name|constEnd
argument_list|()
decl_stmt|;
name|QStringList
name|addedEngines
decl_stmt|;
for|for
control|(
name|PluginKeyMapConstIterator
name|it
init|=
name|keyMap
operator|.
name|constBegin
argument_list|()
init|;
name|it
operator|!=
name|cend
condition|;
operator|++
name|it
control|)
block|{
specifier|const
name|QString
modifier|&
name|key
init|=
name|it
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|addedEngines
operator|.
name|contains
argument_list|(
name|key
argument_list|)
condition|)
continue|continue;
name|addedEngines
operator|.
name|append
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|QBearerEngine
modifier|*
name|engine
init|=
name|qLoadPlugin
argument_list|<
name|QBearerEngine
argument_list|,
name|QBearerEnginePlugin
argument_list|>
argument_list|(
name|l
argument_list|,
name|key
argument_list|)
condition|)
block|{
if|if
condition|(
name|key
operator|==
name|QLatin1String
argument_list|(
literal|"generic"
argument_list|)
condition|)
name|generic
operator|=
name|engine
expr_stmt|;
else|else
name|sessionEngines
operator|.
name|append
argument_list|(
name|engine
argument_list|)
expr_stmt|;
name|engine
operator|->
name|moveToThread
argument_list|(
name|bearerThread
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|engine
argument_list|,
name|SIGNAL
argument_list|(
name|updateCompleted
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|updateConfigurations
argument_list|()
argument_list|)
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|engine
argument_list|,
name|SIGNAL
argument_list|(
name|configurationAdded
argument_list|(
name|QNetworkConfigurationPrivatePointer
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|configurationAdded
argument_list|(
name|QNetworkConfigurationPrivatePointer
argument_list|)
argument_list|)
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|engine
argument_list|,
name|SIGNAL
argument_list|(
name|configurationRemoved
argument_list|(
name|QNetworkConfigurationPrivatePointer
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|configurationRemoved
argument_list|(
name|QNetworkConfigurationPrivatePointer
argument_list|)
argument_list|)
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|engine
argument_list|,
name|SIGNAL
argument_list|(
name|configurationChanged
argument_list|(
name|QNetworkConfigurationPrivatePointer
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|configurationChanged
argument_list|(
name|QNetworkConfigurationPrivatePointer
argument_list|)
argument_list|)
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|generic
condition|)
block|{
if|if
condition|(
operator|!
name|envOK
operator|||
name|skipGeneric
operator|<=
literal|0
condition|)
name|sessionEngines
operator|.
name|append
argument_list|(
name|generic
argument_list|)
expr_stmt|;
else|else
operator|delete
name|generic
expr_stmt|;
block|}
block|}
name|QBearerEngine
modifier|*
name|engine
init|=
name|qobject_cast
argument_list|<
name|QBearerEngine
operator|*
argument_list|>
argument_list|(
name|sender
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|engine
operator|&&
operator|!
name|updatingEngines
operator|.
name|isEmpty
argument_list|()
condition|)
name|updatingEngines
operator|.
name|remove
argument_list|(
name|engine
argument_list|)
expr_stmt|;
if|if
condition|(
name|updating
operator|&&
name|updatingEngines
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|updating
operator|=
literal|false
expr_stmt|;
emit|emit
name|configurationUpdateComplete
argument_list|()
emit|;
block|}
if|if
condition|(
name|engine
operator|&&
operator|!
name|pollingEngines
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|pollingEngines
operator|.
name|remove
argument_list|(
name|engine
argument_list|)
expr_stmt|;
if|if
condition|(
name|pollingEngines
operator|.
name|isEmpty
argument_list|()
condition|)
name|startPolling
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|firstUpdate
condition|)
block|{
name|firstUpdate
operator|=
literal|false
expr_stmt|;
specifier|const
name|QList
argument_list|<
name|QBearerEngine
modifier|*
argument_list|>
name|enginesToInitialize
init|=
name|sessionEngines
decl_stmt|;
comment|//shallow copy the list in case it is modified when we unlock mutex
name|locker
operator|.
name|unlock
argument_list|()
expr_stmt|;
for|for
control|(
name|QBearerEngine
modifier|*
name|engine
range|:
name|enginesToInitialize
control|)
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
name|engine
argument_list|,
literal|"initialize"
argument_list|,
name|Qt
operator|::
name|BlockingQueuedConnection
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|performAsyncConfigurationUpdate
name|void
name|QNetworkConfigurationManagerPrivate
operator|::
name|performAsyncConfigurationUpdate
parameter_list|()
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
if|if
condition|(
name|sessionEngines
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
emit|emit
name|configurationUpdateComplete
argument_list|()
emit|;
return|return;
block|}
name|updating
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|QBearerEngine
modifier|*
name|engine
range|:
name|qAsConst
argument_list|(
name|sessionEngines
argument_list|)
control|)
block|{
name|updatingEngines
operator|.
name|insert
argument_list|(
name|engine
argument_list|)
expr_stmt|;
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
name|engine
argument_list|,
literal|"requestUpdate"
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|engines
name|QList
argument_list|<
name|QBearerEngine
modifier|*
argument_list|>
name|QNetworkConfigurationManagerPrivate
operator|::
name|engines
parameter_list|()
specifier|const
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
return|return
name|sessionEngines
return|;
block|}
end_function
begin_function
DECL|function|startPolling
name|void
name|QNetworkConfigurationManagerPrivate
operator|::
name|startPolling
parameter_list|()
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|pollTimer
condition|)
block|{
name|pollTimer
operator|=
operator|new
name|QTimer
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|bool
name|ok
decl_stmt|;
name|int
name|interval
init|=
name|qEnvironmentVariableIntValue
argument_list|(
literal|"QT_BEARER_POLL_TIMEOUT"
argument_list|,
operator|&
name|ok
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ok
condition|)
name|interval
operator|=
literal|10000
expr_stmt|;
comment|//default 10 seconds
name|pollTimer
operator|->
name|setInterval
argument_list|(
name|interval
argument_list|)
expr_stmt|;
name|pollTimer
operator|->
name|setSingleShot
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|pollTimer
argument_list|,
name|SIGNAL
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|pollEngines
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pollTimer
operator|->
name|isActive
argument_list|()
condition|)
return|return;
for|for
control|(
name|QBearerEngine
modifier|*
name|engine
range|:
name|qAsConst
argument_list|(
name|sessionEngines
argument_list|)
control|)
block|{
if|if
condition|(
name|engine
operator|->
name|requiresPolling
argument_list|()
operator|&&
operator|(
name|forcedPolling
operator|||
name|engine
operator|->
name|configurationsInUse
argument_list|()
operator|)
condition|)
block|{
name|pollTimer
operator|->
name|start
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
name|performAsyncConfigurationUpdate
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|pollEngines
name|void
name|QNetworkConfigurationManagerPrivate
operator|::
name|pollEngines
parameter_list|()
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
for|for
control|(
name|QBearerEngine
modifier|*
name|engine
range|:
name|qAsConst
argument_list|(
name|sessionEngines
argument_list|)
control|)
block|{
if|if
condition|(
name|engine
operator|->
name|requiresPolling
argument_list|()
operator|&&
operator|(
name|forcedPolling
operator|||
name|engine
operator|->
name|configurationsInUse
argument_list|()
operator|)
condition|)
block|{
name|pollingEngines
operator|.
name|insert
argument_list|(
name|engine
argument_list|)
expr_stmt|;
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
name|engine
argument_list|,
literal|"requestUpdate"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|enablePolling
name|void
name|QNetworkConfigurationManagerPrivate
operator|::
name|enablePolling
parameter_list|()
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
operator|++
name|forcedPolling
expr_stmt|;
if|if
condition|(
name|forcedPolling
operator|==
literal|1
condition|)
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
name|this
argument_list|,
literal|"startPolling"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|disablePolling
name|void
name|QNetworkConfigurationManagerPrivate
operator|::
name|disablePolling
parameter_list|()
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
operator|--
name|forcedPolling
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_BEARERMANAGEMENT
end_comment
end_unit
