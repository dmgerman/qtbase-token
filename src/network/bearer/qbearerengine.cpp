begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the QtNetwork module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qbearerengine_p.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_BEARERMANAGEMENT
end_ifndef
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_constructor
DECL|function|QBearerEngine
name|QBearerEngine
operator|::
name|QBearerEngine
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|mutex
argument_list|(
name|QMutex
operator|::
name|Recursive
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QBearerEngine
name|QBearerEngine
operator|::
name|~
name|QBearerEngine
parameter_list|()
block|{
name|QHash
argument_list|<
name|QString
argument_list|,
name|QNetworkConfigurationPrivatePointer
argument_list|>
operator|::
name|Iterator
name|it
decl_stmt|;
name|QHash
argument_list|<
name|QString
argument_list|,
name|QNetworkConfigurationPrivatePointer
argument_list|>
operator|::
name|Iterator
name|end
decl_stmt|;
for|for
control|(
name|it
operator|=
name|snapConfigurations
operator|.
name|begin
argument_list|()
operator|,
name|end
operator|=
name|snapConfigurations
operator|.
name|end
argument_list|()
init|;
name|it
operator|!=
name|end
condition|;
operator|++
name|it
control|)
block|{
name|it
operator|.
name|value
argument_list|()
operator|->
name|isValid
operator|=
literal|false
expr_stmt|;
name|it
operator|.
name|value
argument_list|()
operator|->
name|id
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|snapConfigurations
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|it
operator|=
name|accessPointConfigurations
operator|.
name|begin
argument_list|()
operator|,
name|end
operator|=
name|accessPointConfigurations
operator|.
name|end
argument_list|()
init|;
name|it
operator|!=
name|end
condition|;
operator|++
name|it
control|)
block|{
name|it
operator|.
name|value
argument_list|()
operator|->
name|isValid
operator|=
literal|false
expr_stmt|;
name|it
operator|.
name|value
argument_list|()
operator|->
name|id
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|accessPointConfigurations
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|it
operator|=
name|userChoiceConfigurations
operator|.
name|begin
argument_list|()
operator|,
name|end
operator|=
name|userChoiceConfigurations
operator|.
name|end
argument_list|()
init|;
name|it
operator|!=
name|end
condition|;
operator|++
name|it
control|)
block|{
name|it
operator|.
name|value
argument_list|()
operator|->
name|isValid
operator|=
literal|false
expr_stmt|;
name|it
operator|.
name|value
argument_list|()
operator|->
name|id
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|userChoiceConfigurations
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|requiresPolling
name|bool
name|QBearerEngine
operator|::
name|requiresPolling
parameter_list|()
specifier|const
block|{
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/*     Returns \c true if configurations are in use; otherwise returns \c false.      If configurations are in use and requiresPolling() returns \c true, polling will be enabled for     this engine. */
end_comment
begin_function
DECL|function|configurationsInUse
name|bool
name|QBearerEngine
operator|::
name|configurationsInUse
parameter_list|()
specifier|const
block|{
name|QHash
argument_list|<
name|QString
argument_list|,
name|QNetworkConfigurationPrivatePointer
argument_list|>
operator|::
name|ConstIterator
name|it
decl_stmt|;
name|QHash
argument_list|<
name|QString
argument_list|,
name|QNetworkConfigurationPrivatePointer
argument_list|>
operator|::
name|ConstIterator
name|end
decl_stmt|;
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
for|for
control|(
name|it
operator|=
name|accessPointConfigurations
operator|.
name|constBegin
argument_list|()
operator|,
name|end
operator|=
name|accessPointConfigurations
operator|.
name|constEnd
argument_list|()
init|;
name|it
operator|!=
name|end
condition|;
operator|++
name|it
control|)
block|{
if|if
condition|(
name|it
operator|.
name|value
argument_list|()
operator|->
name|ref
operator|.
name|load
argument_list|()
operator|>
literal|1
condition|)
return|return
literal|true
return|;
block|}
for|for
control|(
name|it
operator|=
name|snapConfigurations
operator|.
name|constBegin
argument_list|()
operator|,
name|end
operator|=
name|snapConfigurations
operator|.
name|constEnd
argument_list|()
init|;
name|it
operator|!=
name|end
condition|;
operator|++
name|it
control|)
block|{
if|if
condition|(
name|it
operator|.
name|value
argument_list|()
operator|->
name|ref
operator|.
name|load
argument_list|()
operator|>
literal|1
condition|)
return|return
literal|true
return|;
block|}
for|for
control|(
name|it
operator|=
name|userChoiceConfigurations
operator|.
name|constBegin
argument_list|()
operator|,
name|end
operator|=
name|userChoiceConfigurations
operator|.
name|constEnd
argument_list|()
init|;
name|it
operator|!=
name|end
condition|;
operator|++
name|it
control|)
block|{
if|if
condition|(
name|it
operator|.
name|value
argument_list|()
operator|->
name|ref
operator|.
name|load
argument_list|()
operator|>
literal|1
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_include
include|#
directive|include
file|"moc_qbearerengine_p.cpp"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_BEARERMANAGEMENT
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
