begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtNetwork module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qsslcertificate.h"
end_include
begin_include
include|#
directive|include
file|"qsslcertificate_p.h"
end_include
begin_include
include|#
directive|include
file|"qsslkey.h"
end_include
begin_include
include|#
directive|include
file|"qsslkey_p.h"
end_include
begin_include
include|#
directive|include
file|"qsslcertificateextension.h"
end_include
begin_include
include|#
directive|include
file|"qsslcertificateextension_p.h"
end_include
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|operator ==
name|bool
name|QSslCertificate
operator|::
name|operator
name|==
parameter_list|(
specifier|const
name|QSslCertificate
modifier|&
name|other
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|d
operator|==
name|other
operator|.
name|d
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|d
operator|->
name|null
operator|&&
name|other
operator|.
name|d
operator|->
name|null
condition|)
return|return
literal|true
return|;
return|return
name|d
operator|->
name|derData
operator|==
name|other
operator|.
name|d
operator|->
name|derData
return|;
block|}
end_function
begin_function
DECL|function|isNull
name|bool
name|QSslCertificate
operator|::
name|isNull
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|null
return|;
block|}
end_function
begin_function
DECL|function|isSelfSigned
name|bool
name|QSslCertificate
operator|::
name|isSelfSigned
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|d
operator|->
name|null
condition|)
return|return
literal|false
return|;
name|qWarning
argument_list|(
literal|"QSslCertificate::isSelfSigned: This function does not check, whether the certificate \              is actually signed. It just checks whether issuer and subject are identical"
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|subjectMatchesIssuer
return|;
block|}
end_function
begin_function
DECL|function|version
name|QByteArray
name|QSslCertificate
operator|::
name|version
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|versionString
return|;
block|}
end_function
begin_function
DECL|function|serialNumber
name|QByteArray
name|QSslCertificate
operator|::
name|serialNumber
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|serialNumberString
return|;
block|}
end_function
begin_function
DECL|function|issuerInfo
name|QStringList
name|QSslCertificate
operator|::
name|issuerInfo
parameter_list|(
name|SubjectInfo
name|info
parameter_list|)
specifier|const
block|{
return|return
name|issuerInfo
argument_list|(
name|QSslCertificatePrivate
operator|::
name|subjectInfoToString
argument_list|(
name|info
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|issuerInfo
name|QStringList
name|QSslCertificate
operator|::
name|issuerInfo
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|attribute
parameter_list|)
specifier|const
block|{
return|return
name|d
operator|->
name|issuerInfo
operator|.
name|values
argument_list|(
name|attribute
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|subjectInfo
name|QStringList
name|QSslCertificate
operator|::
name|subjectInfo
parameter_list|(
name|SubjectInfo
name|info
parameter_list|)
specifier|const
block|{
return|return
name|subjectInfo
argument_list|(
name|QSslCertificatePrivate
operator|::
name|subjectInfoToString
argument_list|(
name|info
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|subjectInfo
name|QStringList
name|QSslCertificate
operator|::
name|subjectInfo
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|attribute
parameter_list|)
specifier|const
block|{
return|return
name|d
operator|->
name|subjectInfo
operator|.
name|values
argument_list|(
name|attribute
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|subjectInfoAttributes
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|QSslCertificate
operator|::
name|subjectInfoAttributes
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|subjectInfo
operator|.
name|uniqueKeys
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|issuerInfoAttributes
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|QSslCertificate
operator|::
name|issuerInfoAttributes
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|issuerInfo
operator|.
name|uniqueKeys
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|subjectAlternativeNames
name|QMultiMap
argument_list|<
name|QSsl
operator|::
name|AlternativeNameEntryType
argument_list|,
name|QString
argument_list|>
name|QSslCertificate
operator|::
name|subjectAlternativeNames
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|subjectAlternativeNames
return|;
block|}
end_function
begin_function
DECL|function|effectiveDate
name|QDateTime
name|QSslCertificate
operator|::
name|effectiveDate
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|notValidBefore
return|;
block|}
end_function
begin_function
DECL|function|expiryDate
name|QDateTime
name|QSslCertificate
operator|::
name|expiryDate
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|notValidAfter
return|;
block|}
end_function
begin_function
DECL|function|handle
name|Qt
operator|::
name|HANDLE
name|QSslCertificate
operator|::
name|handle
parameter_list|()
specifier|const
block|{
name|Q_UNIMPLEMENTED
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|publicKey
name|QSslKey
name|QSslCertificate
operator|::
name|publicKey
parameter_list|()
specifier|const
block|{
name|QSslKey
name|key
decl_stmt|;
name|key
operator|.
name|d
operator|->
name|type
operator|=
name|QSsl
operator|::
name|PublicKey
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|publicKeyAlgorithm
operator|!=
name|QSsl
operator|::
name|Opaque
condition|)
block|{
name|key
operator|.
name|d
operator|->
name|algorithm
operator|=
name|d
operator|->
name|publicKeyAlgorithm
expr_stmt|;
name|key
operator|.
name|d
operator|->
name|decodeDer
argument_list|(
name|d
operator|->
name|publicKeyDerData
argument_list|,
name|QByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|key
return|;
block|}
end_function
begin_function
DECL|function|extensions
name|QList
argument_list|<
name|QSslCertificateExtension
argument_list|>
name|QSslCertificate
operator|::
name|extensions
parameter_list|()
specifier|const
block|{
name|Q_UNIMPLEMENTED
argument_list|()
expr_stmt|;
return|return
name|QList
argument_list|<
name|QSslCertificateExtension
argument_list|>
argument_list|()
return|;
block|}
end_function
begin_define
DECL|macro|BEGINCERTSTRING
define|#
directive|define
name|BEGINCERTSTRING
value|"-----BEGIN CERTIFICATE-----"
end_define
begin_define
DECL|macro|ENDCERTSTRING
define|#
directive|define
name|ENDCERTSTRING
value|"-----END CERTIFICATE-----"
end_define
begin_function
DECL|function|toPem
name|QByteArray
name|QSslCertificate
operator|::
name|toPem
parameter_list|()
specifier|const
block|{
name|QByteArray
name|array
init|=
name|toDer
argument_list|()
decl_stmt|;
comment|// Convert to Base64 - wrap at 64 characters.
name|array
operator|=
name|array
operator|.
name|toBase64
argument_list|()
expr_stmt|;
name|QByteArray
name|tmp
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|array
operator|.
name|size
argument_list|()
operator|-
literal|64
condition|;
name|i
operator|+=
literal|64
control|)
block|{
name|tmp
operator|+=
name|QByteArray
operator|::
name|fromRawData
argument_list|(
name|array
operator|.
name|data
argument_list|()
operator|+
name|i
argument_list|,
literal|64
argument_list|)
expr_stmt|;
name|tmp
operator|+=
literal|'\n'
expr_stmt|;
block|}
if|if
condition|(
name|int
name|remainder
init|=
name|array
operator|.
name|size
argument_list|()
operator|%
literal|64
condition|)
block|{
name|tmp
operator|+=
name|QByteArray
operator|::
name|fromRawData
argument_list|(
name|array
operator|.
name|data
argument_list|()
operator|+
name|array
operator|.
name|size
argument_list|()
operator|-
name|remainder
argument_list|,
name|remainder
argument_list|)
expr_stmt|;
name|tmp
operator|+=
literal|'\n'
expr_stmt|;
block|}
return|return
name|BEGINCERTSTRING
literal|"\n"
operator|+
name|tmp
operator|+
name|ENDCERTSTRING
literal|"\n"
return|;
block|}
end_function
begin_function
DECL|function|toDer
name|QByteArray
name|QSslCertificate
operator|::
name|toDer
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|derData
return|;
block|}
end_function
begin_function
DECL|function|toText
name|QString
name|QSslCertificate
operator|::
name|toText
parameter_list|()
specifier|const
block|{
name|Q_UNIMPLEMENTED
argument_list|()
expr_stmt|;
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|init
name|void
name|QSslCertificatePrivate
operator|::
name|init
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|data
parameter_list|,
name|QSsl
operator|::
name|EncodingFormat
name|format
parameter_list|)
block|{
if|if
condition|(
operator|!
name|data
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QList
argument_list|<
name|QSslCertificate
argument_list|>
name|certs
init|=
operator|(
name|format
operator|==
name|QSsl
operator|::
name|Pem
operator|)
condition|?
name|certificatesFromPem
argument_list|(
name|data
argument_list|,
literal|1
argument_list|)
else|:
name|certificatesFromDer
argument_list|(
name|data
argument_list|,
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|certs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
operator|*
name|this
operator|=
operator|*
name|certs
operator|.
name|first
argument_list|()
operator|.
name|d
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|matchLineFeed
specifier|static
name|bool
name|matchLineFeed
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|pem
parameter_list|,
name|int
modifier|*
name|offset
parameter_list|)
block|{
name|char
name|ch
init|=
literal|0
decl_stmt|;
comment|// ignore extra whitespace at the end of the line
while|while
condition|(
operator|*
name|offset
operator|<
name|pem
operator|.
name|size
argument_list|()
operator|&&
operator|(
name|ch
operator|=
name|pem
operator|.
name|at
argument_list|(
operator|*
name|offset
argument_list|)
operator|)
operator|==
literal|' '
condition|)
operator|++
operator|*
name|offset
expr_stmt|;
if|if
condition|(
name|ch
operator|==
literal|'\n'
condition|)
block|{
operator|*
name|offset
operator|+=
literal|1
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|ch
operator|==
literal|'\r'
operator|&&
name|pem
operator|.
name|size
argument_list|()
operator|>
operator|(
operator|*
name|offset
operator|+
literal|1
operator|)
operator|&&
name|pem
operator|.
name|at
argument_list|(
operator|*
name|offset
operator|+
literal|1
argument_list|)
operator|==
literal|'\n'
condition|)
block|{
operator|*
name|offset
operator|+=
literal|2
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|certificatesFromPem
name|QList
argument_list|<
name|QSslCertificate
argument_list|>
name|QSslCertificatePrivate
operator|::
name|certificatesFromPem
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|pem
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|QList
argument_list|<
name|QSslCertificate
argument_list|>
name|certificates
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|count
operator|==
operator|-
literal|1
operator|||
name|certificates
operator|.
name|size
argument_list|()
operator|<
name|count
condition|)
block|{
name|int
name|startPos
init|=
name|pem
operator|.
name|indexOf
argument_list|(
name|BEGINCERTSTRING
argument_list|,
name|offset
argument_list|)
decl_stmt|;
if|if
condition|(
name|startPos
operator|==
operator|-
literal|1
condition|)
break|break;
name|startPos
operator|+=
sizeof|sizeof
argument_list|(
name|BEGINCERTSTRING
argument_list|)
operator|-
literal|1
expr_stmt|;
if|if
condition|(
operator|!
name|matchLineFeed
argument_list|(
name|pem
argument_list|,
operator|&
name|startPos
argument_list|)
condition|)
break|break;
name|int
name|endPos
init|=
name|pem
operator|.
name|indexOf
argument_list|(
name|ENDCERTSTRING
argument_list|,
name|startPos
argument_list|)
decl_stmt|;
if|if
condition|(
name|endPos
operator|==
operator|-
literal|1
condition|)
break|break;
name|offset
operator|=
name|endPos
operator|+
sizeof|sizeof
argument_list|(
name|ENDCERTSTRING
argument_list|)
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|offset
operator|<
name|pem
operator|.
name|size
argument_list|()
operator|&&
operator|!
name|matchLineFeed
argument_list|(
name|pem
argument_list|,
operator|&
name|offset
argument_list|)
condition|)
break|break;
name|QByteArray
name|decoded
init|=
name|QByteArray
operator|::
name|fromBase64
argument_list|(
name|QByteArray
operator|::
name|fromRawData
argument_list|(
name|pem
operator|.
name|data
argument_list|()
operator|+
name|startPos
argument_list|,
name|endPos
operator|-
name|startPos
argument_list|)
argument_list|)
decl_stmt|;
name|certificates
operator|<<
name|certificatesFromDer
argument_list|(
name|decoded
argument_list|,
literal|1
argument_list|)
expr_stmt|;
empty_stmt|;
block|}
return|return
name|certificates
return|;
block|}
end_function
begin_function
DECL|function|certificatesFromDer
name|QList
argument_list|<
name|QSslCertificate
argument_list|>
name|QSslCertificatePrivate
operator|::
name|certificatesFromDer
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|der
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|QList
argument_list|<
name|QSslCertificate
argument_list|>
name|certificates
decl_stmt|;
name|QByteArray
name|data
init|=
name|der
decl_stmt|;
while|while
condition|(
name|count
operator|==
operator|-
literal|1
operator|||
name|certificates
operator|.
name|size
argument_list|()
operator|<
name|count
condition|)
block|{
name|QSslCertificate
name|cert
decl_stmt|;
if|if
condition|(
operator|!
name|cert
operator|.
name|d
operator|->
name|parse
argument_list|(
name|data
argument_list|)
condition|)
break|break;
name|certificates
operator|<<
name|cert
expr_stmt|;
name|data
operator|.
name|remove
argument_list|(
literal|0
argument_list|,
name|cert
operator|.
name|d
operator|->
name|derData
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|certificates
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
