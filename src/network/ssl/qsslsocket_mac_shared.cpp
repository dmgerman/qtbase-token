begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Copyright (C) 2015 ownCloud Inc ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtNetwork module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|//#define QSSLSOCKET_DEBUG
end_comment
begin_comment
comment|//#define QT_DECRYPT_SSL_TRAFFIC
end_comment
begin_include
include|#
directive|include
file|"qssl_p.h"
end_include
begin_include
include|#
directive|include
file|"qsslsocket.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_OPENSSL
end_ifndef
begin_include
include|#
directive|include
file|"qsslsocket_openssl_p.h"
end_include
begin_include
include|#
directive|include
file|"qsslsocket_openssl_symbols_p.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|"qsslcertificate_p.h"
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_DARWIN
end_ifdef
begin_include
include|#
directive|include
file|<private/qcore_mac_p.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<QtCore/qdebug.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_OSX
end_ifdef
begin_include
include|#
directive|include
file|<Security/Security.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_OSX
end_ifdef
begin_namespace
namespace|namespace
block|{
DECL|function|hasTrustedSslServerPolicy
name|bool
name|hasTrustedSslServerPolicy
parameter_list|(
name|SecPolicyRef
name|policy
parameter_list|,
name|CFDictionaryRef
name|props
parameter_list|)
block|{
name|QCFType
argument_list|<
name|CFDictionaryRef
argument_list|>
name|policyProps
init|=
name|SecPolicyCopyProperties
argument_list|(
name|policy
argument_list|)
decl_stmt|;
comment|// only accept certificates with policies for SSL server validation for now
if|if
condition|(
name|CFEqual
argument_list|(
name|CFDictionaryGetValue
argument_list|(
name|policyProps
argument_list|,
name|kSecPolicyOid
argument_list|)
argument_list|,
name|kSecPolicyAppleSSL
argument_list|)
condition|)
block|{
name|CFBooleanRef
name|policyClient
decl_stmt|;
if|if
condition|(
name|CFDictionaryGetValueIfPresent
argument_list|(
name|policyProps
argument_list|,
name|kSecPolicyClient
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|void
operator|*
operator|*
argument_list|>
argument_list|(
operator|&
name|policyClient
argument_list|)
argument_list|)
operator|&&
name|CFEqual
argument_list|(
name|policyClient
argument_list|,
name|kCFBooleanTrue
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
comment|// no client certs
block|}
if|if
condition|(
operator|!
name|CFDictionaryContainsKey
argument_list|(
name|props
argument_list|,
name|kSecTrustSettingsResult
argument_list|)
condition|)
block|{
comment|// as per the docs, no trust settings result implies full trust
return|return
literal|true
return|;
block|}
name|CFNumberRef
name|number
init|=
cast|static_cast
argument_list|<
name|CFNumberRef
argument_list|>
argument_list|(
name|CFDictionaryGetValue
argument_list|(
name|props
argument_list|,
name|kSecTrustSettingsResult
argument_list|)
argument_list|)
decl_stmt|;
name|SecTrustSettingsResult
name|settingsResult
decl_stmt|;
name|CFNumberGetValue
argument_list|(
name|number
argument_list|,
name|kCFNumberSInt32Type
argument_list|,
operator|&
name|settingsResult
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|settingsResult
condition|)
block|{
case|case
name|kSecTrustSettingsResultTrustRoot
case|:
case|case
name|kSecTrustSettingsResultTrustAsRoot
case|:
return|return
literal|true
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|function|isCaCertificateTrusted
name|bool
name|isCaCertificateTrusted
parameter_list|(
name|SecCertificateRef
name|cfCert
parameter_list|,
name|int
name|domain
parameter_list|)
block|{
name|QCFType
argument_list|<
name|CFArrayRef
argument_list|>
name|cfTrustSettings
decl_stmt|;
name|OSStatus
name|status
init|=
name|SecTrustSettingsCopyTrustSettings
argument_list|(
name|cfCert
argument_list|,
name|domain
argument_list|,
operator|&
name|cfTrustSettings
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|==
name|noErr
condition|)
block|{
name|CFIndex
name|size
init|=
name|CFArrayGetCount
argument_list|(
name|cfTrustSettings
argument_list|)
decl_stmt|;
comment|// if empty, trust for everything (as per the Security Framework documentation)
if|if
condition|(
name|size
operator|==
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
for|for
control|(
name|CFIndex
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
operator|++
name|i
control|)
block|{
name|CFDictionaryRef
name|props
init|=
cast|static_cast
argument_list|<
name|CFDictionaryRef
argument_list|>
argument_list|(
name|CFArrayGetValueAtIndex
argument_list|(
name|cfTrustSettings
argument_list|,
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|CFDictionaryContainsKey
argument_list|(
name|props
argument_list|,
name|kSecTrustSettingsPolicy
argument_list|)
condition|)
block|{
if|if
condition|(
name|hasTrustedSslServerPolicy
argument_list|(
operator|(
name|SecPolicyRef
operator|)
name|CFDictionaryGetValue
argument_list|(
name|props
argument_list|,
name|kSecTrustSettingsPolicy
argument_list|)
argument_list|,
name|props
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
else|else
block|{
name|qCWarning
argument_list|(
name|lcSsl
argument_list|,
literal|"Error receiving trust for a CA certificate"
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_namespace
begin_comment
comment|// anon namespace
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Q_OS_OSX
end_comment
begin_function
DECL|function|systemCaCertificates
name|QList
argument_list|<
name|QSslCertificate
argument_list|>
name|QSslSocketPrivate
operator|::
name|systemCaCertificates
parameter_list|()
block|{
name|ensureInitialized
argument_list|()
expr_stmt|;
name|QList
argument_list|<
name|QSslCertificate
argument_list|>
name|systemCerts
decl_stmt|;
comment|// SecTrustSettingsCopyCertificates is not defined on iOS.
ifdef|#
directive|ifdef
name|Q_OS_OSX
name|QCFType
argument_list|<
name|CFArrayRef
argument_list|>
name|cfCerts
decl_stmt|;
comment|// iterate through all enum members, order:
comment|// kSecTrustSettingsDomainUser, kSecTrustSettingsDomainAdmin, kSecTrustSettingsDomainSystem
for|for
control|(
name|int
name|dom
init|=
name|kSecTrustSettingsDomainUser
init|;
name|dom
operator|<=
name|kSecTrustSettingsDomainSystem
condition|;
name|dom
operator|++
control|)
block|{
name|OSStatus
name|status
init|=
name|SecTrustSettingsCopyCertificates
argument_list|(
name|dom
argument_list|,
operator|&
name|cfCerts
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|==
name|noErr
condition|)
block|{
specifier|const
name|CFIndex
name|size
init|=
name|CFArrayGetCount
argument_list|(
name|cfCerts
argument_list|)
decl_stmt|;
for|for
control|(
name|CFIndex
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
operator|++
name|i
control|)
block|{
name|SecCertificateRef
name|cfCert
init|=
operator|(
name|SecCertificateRef
operator|)
name|CFArrayGetValueAtIndex
argument_list|(
name|cfCerts
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|QCFType
argument_list|<
name|CFDataRef
argument_list|>
name|derData
init|=
name|SecCertificateCopyData
argument_list|(
name|cfCert
argument_list|)
decl_stmt|;
if|if
condition|(
operator|::
name|isCaCertificateTrusted
argument_list|(
name|cfCert
argument_list|,
name|dom
argument_list|)
condition|)
block|{
if|if
condition|(
name|derData
operator|==
name|NULL
condition|)
block|{
name|qCWarning
argument_list|(
name|lcSsl
argument_list|,
literal|"Error retrieving a CA certificate from the system store"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|systemCerts
operator|<<
name|QSslCertificate
argument_list|(
name|QByteArray
operator|::
name|fromCFData
argument_list|(
name|derData
argument_list|)
argument_list|,
name|QSsl
operator|::
name|Der
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
endif|#
directive|endif
return|return
name|systemCerts
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
