begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Copyright (C) 2014 BlackBerry Limited. All rights reserved. ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtNetwork module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia. For licensing terms and ** conditions see http://qt.digia.com/licensing. For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights. These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtNetwork/qsslsocket.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qmutex.h>
end_include
begin_include
include|#
directive|include
file|"private/qsslcontext_openssl_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qsslsocket_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qsslsocket_openssl_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qsslsocket_openssl_symbols_p.h"
end_include
begin_function_decl
name|QT_BEGIN_NAMESPACE
comment|// defined in qsslsocket_openssl.cpp:
specifier|extern
name|int
name|q_X509Callback
parameter_list|(
name|int
name|ok
parameter_list|,
name|X509_STORE_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|QString
name|getErrorsFromOpenSsl
parameter_list|()
function_decl|;
end_function_decl
begin_comment
comment|// Default DH params
end_comment
begin_comment
comment|// 1024-bit MODP Group with 160-bit Prime Order Subgroup
end_comment
begin_comment
comment|// From RFC 5114
end_comment
begin_decl_stmt
DECL|variable|dh1024_p
specifier|static
name|unsigned
specifier|const
name|char
name|dh1024_p
index|[]
init|=
block|{
literal|0xB1
block|,
literal|0x0B
block|,
literal|0x8F
block|,
literal|0x96
block|,
literal|0xA0
block|,
literal|0x80
block|,
literal|0xE0
block|,
literal|0x1D
block|,
literal|0xDE
block|,
literal|0x92
block|,
literal|0xDE
block|,
literal|0x5E
block|,
literal|0xAE
block|,
literal|0x5D
block|,
literal|0x54
block|,
literal|0xEC
block|,
literal|0x52
block|,
literal|0xC9
block|,
literal|0x9F
block|,
literal|0xBC
block|,
literal|0xFB
block|,
literal|0x06
block|,
literal|0xA3
block|,
literal|0xC6
block|,
literal|0x9A
block|,
literal|0x6A
block|,
literal|0x9D
block|,
literal|0xCA
block|,
literal|0x52
block|,
literal|0xD2
block|,
literal|0x3B
block|,
literal|0x61
block|,
literal|0x60
block|,
literal|0x73
block|,
literal|0xE2
block|,
literal|0x86
block|,
literal|0x75
block|,
literal|0xA2
block|,
literal|0x3D
block|,
literal|0x18
block|,
literal|0x98
block|,
literal|0x38
block|,
literal|0xEF
block|,
literal|0x1E
block|,
literal|0x2E
block|,
literal|0xE6
block|,
literal|0x52
block|,
literal|0xC0
block|,
literal|0x13
block|,
literal|0xEC
block|,
literal|0xB4
block|,
literal|0xAE
block|,
literal|0xA9
block|,
literal|0x06
block|,
literal|0x11
block|,
literal|0x23
block|,
literal|0x24
block|,
literal|0x97
block|,
literal|0x5C
block|,
literal|0x3C
block|,
literal|0xD4
block|,
literal|0x9B
block|,
literal|0x83
block|,
literal|0xBF
block|,
literal|0xAC
block|,
literal|0xCB
block|,
literal|0xDD
block|,
literal|0x7D
block|,
literal|0x90
block|,
literal|0xC4
block|,
literal|0xBD
block|,
literal|0x70
block|,
literal|0x98
block|,
literal|0x48
block|,
literal|0x8E
block|,
literal|0x9C
block|,
literal|0x21
block|,
literal|0x9A
block|,
literal|0x73
block|,
literal|0x72
block|,
literal|0x4E
block|,
literal|0xFF
block|,
literal|0xD6
block|,
literal|0xFA
block|,
literal|0xE5
block|,
literal|0x64
block|,
literal|0x47
block|,
literal|0x38
block|,
literal|0xFA
block|,
literal|0xA3
block|,
literal|0x1A
block|,
literal|0x4F
block|,
literal|0xF5
block|,
literal|0x5B
block|,
literal|0xCC
block|,
literal|0xC0
block|,
literal|0xA1
block|,
literal|0x51
block|,
literal|0xAF
block|,
literal|0x5F
block|,
literal|0x0D
block|,
literal|0xC8
block|,
literal|0xB4
block|,
literal|0xBD
block|,
literal|0x45
block|,
literal|0xBF
block|,
literal|0x37
block|,
literal|0xDF
block|,
literal|0x36
block|,
literal|0x5C
block|,
literal|0x1A
block|,
literal|0x65
block|,
literal|0xE6
block|,
literal|0x8C
block|,
literal|0xFD
block|,
literal|0xA7
block|,
literal|0x6D
block|,
literal|0x4D
block|,
literal|0xA7
block|,
literal|0x08
block|,
literal|0xDF
block|,
literal|0x1F
block|,
literal|0xB2
block|,
literal|0xBC
block|,
literal|0x2E
block|,
literal|0x4A
block|,
literal|0x43
block|,
literal|0x71
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|dh1024_g
specifier|static
name|unsigned
specifier|const
name|char
name|dh1024_g
index|[]
init|=
block|{
literal|0xA4
block|,
literal|0xD1
block|,
literal|0xCB
block|,
literal|0xD5
block|,
literal|0xC3
block|,
literal|0xFD
block|,
literal|0x34
block|,
literal|0x12
block|,
literal|0x67
block|,
literal|0x65
block|,
literal|0xA4
block|,
literal|0x42
block|,
literal|0xEF
block|,
literal|0xB9
block|,
literal|0x99
block|,
literal|0x05
block|,
literal|0xF8
block|,
literal|0x10
block|,
literal|0x4D
block|,
literal|0xD2
block|,
literal|0x58
block|,
literal|0xAC
block|,
literal|0x50
block|,
literal|0x7F
block|,
literal|0xD6
block|,
literal|0x40
block|,
literal|0x6C
block|,
literal|0xFF
block|,
literal|0x14
block|,
literal|0x26
block|,
literal|0x6D
block|,
literal|0x31
block|,
literal|0x26
block|,
literal|0x6F
block|,
literal|0xEA
block|,
literal|0x1E
block|,
literal|0x5C
block|,
literal|0x41
block|,
literal|0x56
block|,
literal|0x4B
block|,
literal|0x77
block|,
literal|0x7E
block|,
literal|0x69
block|,
literal|0x0F
block|,
literal|0x55
block|,
literal|0x04
block|,
literal|0xF2
block|,
literal|0x13
block|,
literal|0x16
block|,
literal|0x02
block|,
literal|0x17
block|,
literal|0xB4
block|,
literal|0xB0
block|,
literal|0x1B
block|,
literal|0x88
block|,
literal|0x6A
block|,
literal|0x5E
block|,
literal|0x91
block|,
literal|0x54
block|,
literal|0x7F
block|,
literal|0x9E
block|,
literal|0x27
block|,
literal|0x49
block|,
literal|0xF4
block|,
literal|0xD7
block|,
literal|0xFB
block|,
literal|0xD7
block|,
literal|0xD3
block|,
literal|0xB9
block|,
literal|0xA9
block|,
literal|0x2E
block|,
literal|0xE1
block|,
literal|0x90
block|,
literal|0x9D
block|,
literal|0x0D
block|,
literal|0x22
block|,
literal|0x63
block|,
literal|0xF8
block|,
literal|0x0A
block|,
literal|0x76
block|,
literal|0xA6
block|,
literal|0xA2
block|,
literal|0x4C
block|,
literal|0x08
block|,
literal|0x7A
block|,
literal|0x09
block|,
literal|0x1F
block|,
literal|0x53
block|,
literal|0x1D
block|,
literal|0xBF
block|,
literal|0x0A
block|,
literal|0x01
block|,
literal|0x69
block|,
literal|0xB6
block|,
literal|0xA2
block|,
literal|0x8A
block|,
literal|0xD6
block|,
literal|0x62
block|,
literal|0xA4
block|,
literal|0xD1
block|,
literal|0x8E
block|,
literal|0x73
block|,
literal|0xAF
block|,
literal|0xA3
block|,
literal|0x2D
block|,
literal|0x77
block|,
literal|0x9D
block|,
literal|0x59
block|,
literal|0x18
block|,
literal|0xD0
block|,
literal|0x8B
block|,
literal|0xC8
block|,
literal|0x85
block|,
literal|0x8F
block|,
literal|0x4D
block|,
literal|0xCE
block|,
literal|0xF9
block|,
literal|0x7C
block|,
literal|0x2A
block|,
literal|0x24
block|,
literal|0x85
block|,
literal|0x5E
block|,
literal|0x6E
block|,
literal|0xEB
block|,
literal|0x22
block|,
literal|0xB3
block|,
literal|0xB2
block|,
literal|0xE5
block|}
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|get_dh1024
specifier|static
name|DH
modifier|*
name|get_dh1024
parameter_list|()
block|{
name|DH
modifier|*
name|dh
init|=
name|q_DH_new
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|dh
condition|)
return|return
literal|0
return|;
name|dh
operator|->
name|p
operator|=
name|q_BN_bin2bn
argument_list|(
name|dh1024_p
argument_list|,
sizeof|sizeof
argument_list|(
name|dh1024_p
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|dh
operator|->
name|g
operator|=
name|q_BN_bin2bn
argument_list|(
name|dh1024_g
argument_list|,
sizeof|sizeof
argument_list|(
name|dh1024_g
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dh
operator|->
name|p
operator|||
operator|!
name|dh
operator|->
name|g
condition|)
block|{
name|q_DH_free
argument_list|(
name|dh
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
return|return
name|dh
return|;
block|}
end_function
begin_constructor
DECL|function|QSslContext
name|QSslContext
operator|::
name|QSslContext
parameter_list|()
member_init_list|:
name|ctx
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|pkey
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|session
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_sessionTicketLifeTimeHint
argument_list|(
operator|-
literal|1
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QSslContext
name|QSslContext
operator|::
name|~
name|QSslContext
parameter_list|()
block|{
if|if
condition|(
name|ctx
condition|)
comment|// This will decrement the reference count by 1 and free the context eventually when possible
name|q_SSL_CTX_free
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
if|if
condition|(
name|pkey
condition|)
name|q_EVP_PKEY_free
argument_list|(
name|pkey
argument_list|)
expr_stmt|;
if|if
condition|(
name|session
condition|)
name|q_SSL_SESSION_free
argument_list|(
name|session
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|fromConfiguration
name|QSslContext
modifier|*
name|QSslContext
operator|::
name|fromConfiguration
parameter_list|(
name|QSslSocket
operator|::
name|SslMode
name|mode
parameter_list|,
specifier|const
name|QSslConfiguration
modifier|&
name|configuration
parameter_list|,
name|bool
name|allowRootCertOnDemandLoading
parameter_list|)
block|{
name|QSslContext
modifier|*
name|sslContext
init|=
operator|new
name|QSslContext
argument_list|()
decl_stmt|;
name|sslContext
operator|->
name|sslConfiguration
operator|=
name|configuration
expr_stmt|;
name|sslContext
operator|->
name|errorCode
operator|=
name|QSslError
operator|::
name|NoError
expr_stmt|;
name|bool
name|client
init|=
operator|(
name|mode
operator|==
name|QSslSocket
operator|::
name|SslClientMode
operator|)
decl_stmt|;
name|bool
name|reinitialized
init|=
literal|false
decl_stmt|;
name|init_context
label|:
switch|switch
condition|(
name|sslContext
operator|->
name|sslConfiguration
operator|.
name|protocol
argument_list|()
condition|)
block|{
case|case
name|QSsl
operator|::
name|SslV2
case|:
ifndef|#
directive|ifndef
name|OPENSSL_NO_SSL2
name|sslContext
operator|->
name|ctx
operator|=
name|q_SSL_CTX_new
argument_list|(
name|client
condition|?
name|q_SSLv2_client_method
argument_list|()
else|:
name|q_SSLv2_server_method
argument_list|()
argument_list|)
expr_stmt|;
else|#
directive|else
name|sslContext
operator|->
name|ctx
operator|=
literal|0
expr_stmt|;
comment|// SSL 2 not supported by the system, but chosen deliberately -> error
endif|#
directive|endif
break|break;
case|case
name|QSsl
operator|::
name|SslV3
case|:
name|sslContext
operator|->
name|ctx
operator|=
name|q_SSL_CTX_new
argument_list|(
name|client
condition|?
name|q_SSLv3_client_method
argument_list|()
else|:
name|q_SSLv3_server_method
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|QSsl
operator|::
name|SecureProtocols
case|:
comment|// SslV2 will be disabled below
case|case
name|QSsl
operator|::
name|TlsV1SslV3
case|:
comment|// SslV2 will be disabled below
case|case
name|QSsl
operator|::
name|AnyProtocol
case|:
default|default:
name|sslContext
operator|->
name|ctx
operator|=
name|q_SSL_CTX_new
argument_list|(
name|client
condition|?
name|q_SSLv23_client_method
argument_list|()
else|:
name|q_SSLv23_server_method
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|QSsl
operator|::
name|TlsV1_0
case|:
name|sslContext
operator|->
name|ctx
operator|=
name|q_SSL_CTX_new
argument_list|(
name|client
condition|?
name|q_TLSv1_client_method
argument_list|()
else|:
name|q_TLSv1_server_method
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|QSsl
operator|::
name|TlsV1_1
case|:
if|#
directive|if
name|OPENSSL_VERSION_NUMBER
operator|>=
literal|0x10001000L
name|sslContext
operator|->
name|ctx
operator|=
name|q_SSL_CTX_new
argument_list|(
name|client
condition|?
name|q_TLSv1_1_client_method
argument_list|()
else|:
name|q_TLSv1_1_server_method
argument_list|()
argument_list|)
expr_stmt|;
else|#
directive|else
name|sslContext
operator|->
name|ctx
operator|=
literal|0
expr_stmt|;
comment|// TLS 1.1 not supported by the system, but chosen deliberately -> error
endif|#
directive|endif
break|break;
case|case
name|QSsl
operator|::
name|TlsV1_2
case|:
if|#
directive|if
name|OPENSSL_VERSION_NUMBER
operator|>=
literal|0x10001000L
name|sslContext
operator|->
name|ctx
operator|=
name|q_SSL_CTX_new
argument_list|(
name|client
condition|?
name|q_TLSv1_2_client_method
argument_list|()
else|:
name|q_TLSv1_2_server_method
argument_list|()
argument_list|)
expr_stmt|;
else|#
directive|else
name|sslContext
operator|->
name|ctx
operator|=
literal|0
expr_stmt|;
comment|// TLS 1.2 not supported by the system, but chosen deliberately -> error
endif|#
directive|endif
break|break;
block|}
if|if
condition|(
operator|!
name|sslContext
operator|->
name|ctx
condition|)
block|{
comment|// After stopping Flash 10 the SSL library looses its ciphers. Try re-adding them
comment|// by re-initializing the library.
if|if
condition|(
operator|!
name|reinitialized
condition|)
block|{
name|reinitialized
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|q_SSL_library_init
argument_list|()
operator|==
literal|1
condition|)
goto|goto
name|init_context
goto|;
block|}
name|sslContext
operator|->
name|errorStr
operator|=
name|QSslSocket
operator|::
name|tr
argument_list|(
literal|"Error creating SSL context (%1)"
argument_list|)
operator|.
name|arg
argument_list|(
name|QSslSocketBackendPrivate
operator|::
name|getErrorsFromOpenSsl
argument_list|()
argument_list|)
expr_stmt|;
name|sslContext
operator|->
name|errorCode
operator|=
name|QSslError
operator|::
name|UnspecifiedError
expr_stmt|;
return|return
name|sslContext
return|;
block|}
comment|// Enable bug workarounds.
name|long
name|options
init|=
name|QSslSocketBackendPrivate
operator|::
name|setupOpenSslOptions
argument_list|(
name|configuration
operator|.
name|protocol
argument_list|()
argument_list|,
name|configuration
operator|.
name|d
operator|->
name|sslOptions
argument_list|)
decl_stmt|;
name|q_SSL_CTX_set_options
argument_list|(
name|sslContext
operator|->
name|ctx
argument_list|,
name|options
argument_list|)
expr_stmt|;
if|#
directive|if
name|OPENSSL_VERSION_NUMBER
operator|>=
literal|0x10000000L
comment|// Tell OpenSSL to release memory early
comment|// http://www.openssl.org/docs/ssl/SSL_CTX_set_mode.html
if|if
condition|(
name|q_SSLeay
argument_list|()
operator|>=
literal|0x10000000L
condition|)
name|q_SSL_CTX_set_mode
argument_list|(
name|sslContext
operator|->
name|ctx
argument_list|,
name|SSL_MODE_RELEASE_BUFFERS
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// Initialize ciphers
name|QByteArray
name|cipherString
decl_stmt|;
name|bool
name|first
init|=
literal|true
decl_stmt|;
name|QList
argument_list|<
name|QSslCipher
argument_list|>
name|ciphers
init|=
name|sslContext
operator|->
name|sslConfiguration
operator|.
name|ciphers
argument_list|()
decl_stmt|;
if|if
condition|(
name|ciphers
operator|.
name|isEmpty
argument_list|()
condition|)
name|ciphers
operator|=
name|QSslSocketPrivate
operator|::
name|defaultCiphers
argument_list|()
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QSslCipher
modifier|&
name|cipher
decl|,
name|ciphers
control|)
block|{
if|if
condition|(
name|first
condition|)
name|first
operator|=
literal|false
expr_stmt|;
else|else
name|cipherString
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|cipherString
operator|.
name|append
argument_list|(
name|cipher
operator|.
name|name
argument_list|()
operator|.
name|toLatin1
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|q_SSL_CTX_set_cipher_list
argument_list|(
name|sslContext
operator|->
name|ctx
argument_list|,
name|cipherString
operator|.
name|data
argument_list|()
argument_list|)
condition|)
block|{
name|sslContext
operator|->
name|errorStr
operator|=
name|QSslSocket
operator|::
name|tr
argument_list|(
literal|"Invalid or empty cipher list (%1)"
argument_list|)
operator|.
name|arg
argument_list|(
name|QSslSocketBackendPrivate
operator|::
name|getErrorsFromOpenSsl
argument_list|()
argument_list|)
expr_stmt|;
name|sslContext
operator|->
name|errorCode
operator|=
name|QSslError
operator|::
name|UnspecifiedError
expr_stmt|;
return|return
name|sslContext
return|;
block|}
comment|// Add all our CAs to this store.
foreach|foreach
control|(
specifier|const
name|QSslCertificate
modifier|&
name|caCertificate
decl|,
name|sslContext
operator|->
name|sslConfiguration
operator|.
name|caCertificates
argument_list|()
control|)
block|{
comment|// From https://www.openssl.org/docs/ssl/SSL_CTX_load_verify_locations.html:
comment|//
comment|// If several CA certificates matching the name, key identifier, and
comment|// serial number condition are available, only the first one will be
comment|// examined. This may lead to unexpected results if the same CA
comment|// certificate is available with different expiration dates. If a
comment|// ``certificate expired'' verification error occurs, no other
comment|// certificate will be searched. Make sure to not have expired
comment|// certificates mixed with valid ones.
comment|//
comment|// See also: QSslSocketBackendPrivate::verify()
if|if
condition|(
name|caCertificate
operator|.
name|expiryDate
argument_list|()
operator|>=
name|QDateTime
operator|::
name|currentDateTime
argument_list|()
condition|)
block|{
name|q_X509_STORE_add_cert
argument_list|(
name|sslContext
operator|->
name|ctx
operator|->
name|cert_store
argument_list|,
operator|(
name|X509
operator|*
operator|)
name|caCertificate
operator|.
name|handle
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|QSslSocketPrivate
operator|::
name|s_loadRootCertsOnDemand
operator|&&
name|allowRootCertOnDemandLoading
condition|)
block|{
comment|// tell OpenSSL the directories where to look up the root certs on demand
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|unixDirs
init|=
name|QSslSocketPrivate
operator|::
name|unixRootCertDirectories
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|a
init|=
literal|0
init|;
name|a
operator|<
name|unixDirs
operator|.
name|count
argument_list|()
condition|;
operator|++
name|a
control|)
name|q_SSL_CTX_load_verify_locations
argument_list|(
name|sslContext
operator|->
name|ctx
argument_list|,
literal|0
argument_list|,
name|unixDirs
operator|.
name|at
argument_list|(
name|a
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|sslContext
operator|->
name|sslConfiguration
operator|.
name|localCertificate
argument_list|()
operator|.
name|isNull
argument_list|()
condition|)
block|{
comment|// Require a private key as well.
if|if
condition|(
name|sslContext
operator|->
name|sslConfiguration
operator|.
name|privateKey
argument_list|()
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|sslContext
operator|->
name|errorStr
operator|=
name|QSslSocket
operator|::
name|tr
argument_list|(
literal|"Cannot provide a certificate with no key, %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|QSslSocketBackendPrivate
operator|::
name|getErrorsFromOpenSsl
argument_list|()
argument_list|)
expr_stmt|;
name|sslContext
operator|->
name|errorCode
operator|=
name|QSslError
operator|::
name|UnspecifiedError
expr_stmt|;
return|return
name|sslContext
return|;
block|}
comment|// Load certificate
if|if
condition|(
operator|!
name|q_SSL_CTX_use_certificate
argument_list|(
name|sslContext
operator|->
name|ctx
argument_list|,
operator|(
name|X509
operator|*
operator|)
name|sslContext
operator|->
name|sslConfiguration
operator|.
name|localCertificate
argument_list|()
operator|.
name|handle
argument_list|()
argument_list|)
condition|)
block|{
name|sslContext
operator|->
name|errorStr
operator|=
name|QSslSocket
operator|::
name|tr
argument_list|(
literal|"Error loading local certificate, %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|QSslSocketBackendPrivate
operator|::
name|getErrorsFromOpenSsl
argument_list|()
argument_list|)
expr_stmt|;
name|sslContext
operator|->
name|errorCode
operator|=
name|QSslError
operator|::
name|UnspecifiedError
expr_stmt|;
return|return
name|sslContext
return|;
block|}
if|if
condition|(
name|configuration
operator|.
name|d
operator|->
name|privateKey
operator|.
name|algorithm
argument_list|()
operator|==
name|QSsl
operator|::
name|Opaque
condition|)
block|{
name|sslContext
operator|->
name|pkey
operator|=
cast|reinterpret_cast
argument_list|<
name|EVP_PKEY
operator|*
argument_list|>
argument_list|(
name|configuration
operator|.
name|d
operator|->
name|privateKey
operator|.
name|handle
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Load private key
name|sslContext
operator|->
name|pkey
operator|=
name|q_EVP_PKEY_new
argument_list|()
expr_stmt|;
comment|// before we were using EVP_PKEY_assign_R* functions and did not use EVP_PKEY_free.
comment|// this lead to a memory leak. Now we use the *_set1_* functions which do not
comment|// take ownership of the RSA/DSA key instance because the QSslKey already has ownership.
if|if
condition|(
name|configuration
operator|.
name|d
operator|->
name|privateKey
operator|.
name|algorithm
argument_list|()
operator|==
name|QSsl
operator|::
name|Rsa
condition|)
name|q_EVP_PKEY_set1_RSA
argument_list|(
name|sslContext
operator|->
name|pkey
argument_list|,
cast|reinterpret_cast
argument_list|<
name|RSA
operator|*
argument_list|>
argument_list|(
name|configuration
operator|.
name|d
operator|->
name|privateKey
operator|.
name|handle
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|q_EVP_PKEY_set1_DSA
argument_list|(
name|sslContext
operator|->
name|pkey
argument_list|,
cast|reinterpret_cast
argument_list|<
name|DSA
operator|*
argument_list|>
argument_list|(
name|configuration
operator|.
name|d
operator|->
name|privateKey
operator|.
name|handle
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|q_SSL_CTX_use_PrivateKey
argument_list|(
name|sslContext
operator|->
name|ctx
argument_list|,
name|sslContext
operator|->
name|pkey
argument_list|)
condition|)
block|{
name|sslContext
operator|->
name|errorStr
operator|=
name|QSslSocket
operator|::
name|tr
argument_list|(
literal|"Error loading private key, %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|QSslSocketBackendPrivate
operator|::
name|getErrorsFromOpenSsl
argument_list|()
argument_list|)
expr_stmt|;
name|sslContext
operator|->
name|errorCode
operator|=
name|QSslError
operator|::
name|UnspecifiedError
expr_stmt|;
return|return
name|sslContext
return|;
block|}
if|if
condition|(
name|configuration
operator|.
name|d
operator|->
name|privateKey
operator|.
name|algorithm
argument_list|()
operator|==
name|QSsl
operator|::
name|Opaque
condition|)
name|sslContext
operator|->
name|pkey
operator|=
literal|0
expr_stmt|;
comment|// Don't free the private key, it belongs to QSslKey
comment|// Check if the certificate matches the private key.
if|if
condition|(
operator|!
name|q_SSL_CTX_check_private_key
argument_list|(
name|sslContext
operator|->
name|ctx
argument_list|)
condition|)
block|{
name|sslContext
operator|->
name|errorStr
operator|=
name|QSslSocket
operator|::
name|tr
argument_list|(
literal|"Private key does not certify public key, %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|QSslSocketBackendPrivate
operator|::
name|getErrorsFromOpenSsl
argument_list|()
argument_list|)
expr_stmt|;
name|sslContext
operator|->
name|errorCode
operator|=
name|QSslError
operator|::
name|UnspecifiedError
expr_stmt|;
return|return
name|sslContext
return|;
block|}
comment|// If we have any intermediate certificates then we need to add them to our chain
name|bool
name|first
init|=
literal|true
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QSslCertificate
modifier|&
name|cert
decl|,
name|configuration
operator|.
name|d
operator|->
name|localCertificateChain
control|)
block|{
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
continue|continue;
block|}
name|q_SSL_CTX_ctrl
argument_list|(
name|sslContext
operator|->
name|ctx
argument_list|,
name|SSL_CTRL_EXTRA_CHAIN_CERT
argument_list|,
literal|0
argument_list|,
name|q_X509_dup
argument_list|(
cast|reinterpret_cast
argument_list|<
name|X509
operator|*
argument_list|>
argument_list|(
name|cert
operator|.
name|handle
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Initialize peer verification.
if|if
condition|(
name|sslContext
operator|->
name|sslConfiguration
operator|.
name|peerVerifyMode
argument_list|()
operator|==
name|QSslSocket
operator|::
name|VerifyNone
condition|)
block|{
name|q_SSL_CTX_set_verify
argument_list|(
name|sslContext
operator|->
name|ctx
argument_list|,
name|SSL_VERIFY_NONE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|q_SSL_CTX_set_verify
argument_list|(
name|sslContext
operator|->
name|ctx
argument_list|,
name|SSL_VERIFY_PEER
argument_list|,
name|q_X509Callback
argument_list|)
expr_stmt|;
block|}
comment|// Set verification depth.
if|if
condition|(
name|sslContext
operator|->
name|sslConfiguration
operator|.
name|peerVerifyDepth
argument_list|()
operator|!=
literal|0
condition|)
name|q_SSL_CTX_set_verify_depth
argument_list|(
name|sslContext
operator|->
name|ctx
argument_list|,
name|sslContext
operator|->
name|sslConfiguration
operator|.
name|peerVerifyDepth
argument_list|()
argument_list|)
expr_stmt|;
comment|// set persisted session if the user set it
if|if
condition|(
operator|!
name|configuration
operator|.
name|sessionTicket
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|sslContext
operator|->
name|setSessionASN1
argument_list|(
name|configuration
operator|.
name|sessionTicket
argument_list|()
argument_list|)
expr_stmt|;
comment|// Set temp DH params
name|DH
modifier|*
name|dh
init|=
literal|0
decl_stmt|;
name|dh
operator|=
name|get_dh1024
argument_list|()
expr_stmt|;
name|q_SSL_CTX_set_tmp_dh
argument_list|(
name|sslContext
operator|->
name|ctx
argument_list|,
name|dh
argument_list|)
expr_stmt|;
name|q_DH_free
argument_list|(
name|dh
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|OPENSSL_NO_EC
comment|// Set temp ECDH params
name|EC_KEY
modifier|*
name|ecdh
init|=
literal|0
decl_stmt|;
name|ecdh
operator|=
name|q_EC_KEY_new_by_curve_name
argument_list|(
name|NID_X9_62_prime256v1
argument_list|)
expr_stmt|;
name|q_SSL_CTX_set_tmp_ecdh
argument_list|(
name|sslContext
operator|->
name|ctx
argument_list|,
name|ecdh
argument_list|)
expr_stmt|;
name|q_EC_KEY_free
argument_list|(
name|ecdh
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// OPENSSL_NO_EC
return|return
name|sslContext
return|;
block|}
end_function
begin_if
if|#
directive|if
name|OPENSSL_VERSION_NUMBER
operator|>=
literal|0x1000100fL
operator|&&
operator|!
name|defined
argument_list|(
name|OPENSSL_NO_TLSEXT
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|OPENSSL_NO_NEXTPROTONEG
argument_list|)
end_if
begin_function
DECL|function|next_proto_cb
specifier|static
name|int
name|next_proto_cb
parameter_list|(
name|SSL
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
modifier|*
name|out
parameter_list|,
name|unsigned
name|char
modifier|*
name|outlen
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|in
parameter_list|,
name|unsigned
name|int
name|inlen
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
block|{
name|QSslContext
operator|::
name|NPNContext
modifier|*
name|ctx
init|=
cast|reinterpret_cast
argument_list|<
name|QSslContext
operator|::
name|NPNContext
operator|*
argument_list|>
argument_list|(
name|arg
argument_list|)
decl_stmt|;
comment|// comment out to debug:
comment|//    QList<QByteArray> supportedVersions;
comment|//    for (unsigned int i = 0; i< inlen; ) {
comment|//        QByteArray version(reinterpret_cast<const char *>(&in[i+1]), in[i]);
comment|//        supportedVersions<< version;
comment|//        i += in[i] + 1;
comment|//    }
name|int
name|proto
init|=
name|q_SSL_select_next_proto
argument_list|(
name|out
argument_list|,
name|outlen
argument_list|,
name|in
argument_list|,
name|inlen
argument_list|,
name|ctx
operator|->
name|data
argument_list|,
name|ctx
operator|->
name|len
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|proto
condition|)
block|{
case|case
name|OPENSSL_NPN_UNSUPPORTED
case|:
name|ctx
operator|->
name|status
operator|=
name|QSslConfiguration
operator|::
name|NextProtocolNegotiationNone
expr_stmt|;
break|break;
case|case
name|OPENSSL_NPN_NEGOTIATED
case|:
name|ctx
operator|->
name|status
operator|=
name|QSslConfiguration
operator|::
name|NextProtocolNegotiationNegotiated
expr_stmt|;
break|break;
case|case
name|OPENSSL_NPN_NO_OVERLAP
case|:
name|ctx
operator|->
name|status
operator|=
name|QSslConfiguration
operator|::
name|NextProtocolNegotiationUnsupported
expr_stmt|;
break|break;
default|default:
name|qWarning
argument_list|(
literal|"OpenSSL sent unknown NPN status"
argument_list|)
expr_stmt|;
block|}
return|return
name|SSL_TLSEXT_ERR_OK
return|;
block|}
end_function
begin_function
DECL|function|npnContext
name|QSslContext
operator|::
name|NPNContext
name|QSslContext
operator|::
name|npnContext
parameter_list|()
specifier|const
block|{
return|return
name|m_npnContext
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// OPENSSL_VERSION_NUMBER>= 0x1000100fL ...
end_comment
begin_comment
comment|// Needs to be deleted by caller
end_comment
begin_function
DECL|function|createSsl
name|SSL
modifier|*
name|QSslContext
operator|::
name|createSsl
parameter_list|()
block|{
name|SSL
modifier|*
name|ssl
init|=
name|q_SSL_new
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
name|q_SSL_clear
argument_list|(
name|ssl
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|session
operator|&&
operator|!
name|sessionASN1
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|sslConfiguration
operator|.
name|testSslOption
argument_list|(
name|QSsl
operator|::
name|SslOptionDisableSessionPersistence
argument_list|)
condition|)
block|{
specifier|const
name|unsigned
name|char
modifier|*
name|data
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|unsigned
name|char
operator|*
argument_list|>
argument_list|(
name|m_sessionASN1
operator|.
name|constData
argument_list|()
argument_list|)
decl_stmt|;
name|session
operator|=
name|q_d2i_SSL_SESSION
argument_list|(
literal|0
argument_list|,
operator|&
name|data
argument_list|,
name|m_sessionASN1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// refcount is 1 already, set by function above
block|}
if|if
condition|(
name|session
condition|)
block|{
comment|// Try to resume the last session we cached
if|if
condition|(
operator|!
name|q_SSL_set_session
argument_list|(
name|ssl
argument_list|,
name|session
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"could not set SSL session"
argument_list|)
expr_stmt|;
name|q_SSL_SESSION_free
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|session
operator|=
literal|0
expr_stmt|;
block|}
block|}
if|#
directive|if
name|OPENSSL_VERSION_NUMBER
operator|>=
literal|0x1000100fL
operator|&&
operator|!
name|defined
argument_list|(
name|OPENSSL_NO_TLSEXT
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|OPENSSL_NO_NEXTPROTONEG
argument_list|)
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|protocols
init|=
name|sslConfiguration
operator|.
name|d
operator|->
name|nextAllowedProtocols
decl_stmt|;
if|if
condition|(
operator|!
name|protocols
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|m_supportedNPNVersions
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|a
init|=
literal|0
init|;
name|a
operator|<
name|protocols
operator|.
name|count
argument_list|()
condition|;
operator|++
name|a
control|)
block|{
if|if
condition|(
name|protocols
operator|.
name|at
argument_list|(
name|a
argument_list|)
operator|.
name|size
argument_list|()
operator|>
literal|255
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"TLS NPN extension"
operator|<<
name|protocols
operator|.
name|at
argument_list|(
name|a
argument_list|)
operator|<<
literal|"is too long and will be truncated to 255 characters."
expr_stmt|;
name|protocols
index|[
name|a
index|]
operator|=
name|protocols
operator|.
name|at
argument_list|(
name|a
argument_list|)
operator|.
name|left
argument_list|(
literal|255
argument_list|)
expr_stmt|;
block|}
name|m_supportedNPNVersions
operator|.
name|append
argument_list|(
name|protocols
operator|.
name|at
argument_list|(
name|a
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|protocols
operator|.
name|at
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|m_npnContext
operator|.
name|data
operator|=
cast|reinterpret_cast
argument_list|<
name|unsigned
name|char
operator|*
argument_list|>
argument_list|(
name|m_supportedNPNVersions
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|m_npnContext
operator|.
name|len
operator|=
name|m_supportedNPNVersions
operator|.
name|count
argument_list|()
expr_stmt|;
name|m_npnContext
operator|.
name|status
operator|=
name|QSslConfiguration
operator|::
name|NextProtocolNegotiationNone
expr_stmt|;
name|q_SSL_CTX_set_next_proto_select_cb
argument_list|(
name|ctx
argument_list|,
name|next_proto_cb
argument_list|,
operator|&
name|m_npnContext
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
comment|// OPENSSL_VERSION_NUMBER>= 0x1000100fL ...
return|return
name|ssl
return|;
block|}
end_function
begin_comment
comment|// We cache exactly one session here
end_comment
begin_function
DECL|function|cacheSession
name|bool
name|QSslContext
operator|::
name|cacheSession
parameter_list|(
name|SSL
modifier|*
name|ssl
parameter_list|)
block|{
comment|// don't cache the same session again
if|if
condition|(
name|session
operator|&&
name|session
operator|==
name|q_SSL_get_session
argument_list|(
name|ssl
argument_list|)
condition|)
return|return
literal|true
return|;
comment|// decrease refcount of currently stored session
comment|// (this might happen if there are several concurrent handshakes in flight)
if|if
condition|(
name|session
condition|)
name|q_SSL_SESSION_free
argument_list|(
name|session
argument_list|)
expr_stmt|;
comment|// cache the session the caller gave us and increase reference count
name|session
operator|=
name|q_SSL_get1_session
argument_list|(
name|ssl
argument_list|)
expr_stmt|;
if|if
condition|(
name|session
operator|&&
operator|!
name|sslConfiguration
operator|.
name|testSslOption
argument_list|(
name|QSsl
operator|::
name|SslOptionDisableSessionPersistence
argument_list|)
condition|)
block|{
name|int
name|sessionSize
init|=
name|q_i2d_SSL_SESSION
argument_list|(
name|session
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|sessionSize
operator|>
literal|0
condition|)
block|{
name|m_sessionASN1
operator|.
name|resize
argument_list|(
name|sessionSize
argument_list|)
expr_stmt|;
name|unsigned
name|char
modifier|*
name|data
init|=
cast|reinterpret_cast
argument_list|<
name|unsigned
name|char
operator|*
argument_list|>
argument_list|(
name|m_sessionASN1
operator|.
name|data
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|q_i2d_SSL_SESSION
argument_list|(
name|session
argument_list|,
operator|&
name|data
argument_list|)
condition|)
name|qWarning
argument_list|(
literal|"could not store persistent version of SSL session"
argument_list|)
expr_stmt|;
name|m_sessionTicketLifeTimeHint
operator|=
name|session
operator|->
name|tlsext_tick_lifetime_hint
expr_stmt|;
block|}
block|}
return|return
operator|(
name|session
operator|!=
literal|0
operator|)
return|;
block|}
end_function
begin_function
DECL|function|sessionASN1
name|QByteArray
name|QSslContext
operator|::
name|sessionASN1
parameter_list|()
specifier|const
block|{
return|return
name|m_sessionASN1
return|;
block|}
end_function
begin_function
DECL|function|setSessionASN1
name|void
name|QSslContext
operator|::
name|setSessionASN1
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|session
parameter_list|)
block|{
name|m_sessionASN1
operator|=
name|session
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sessionTicketLifeTimeHint
name|int
name|QSslContext
operator|::
name|sessionTicketLifeTimeHint
parameter_list|()
specifier|const
block|{
return|return
name|m_sessionTicketLifeTimeHint
return|;
block|}
end_function
begin_function
DECL|function|error
name|QSslError
operator|::
name|SslError
name|QSslContext
operator|::
name|error
parameter_list|()
specifier|const
block|{
return|return
name|errorCode
return|;
block|}
end_function
begin_function
DECL|function|errorString
name|QString
name|QSslContext
operator|::
name|errorString
parameter_list|()
specifier|const
block|{
return|return
name|errorStr
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
