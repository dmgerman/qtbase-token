begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Copyright (C) 2014 BlackBerry Limited. All rights reserved. ** Copyright (C) 2014 Governikus GmbH& Co. KG. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the QtNetwork module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtNetwork/qsslsocket.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qmutex.h>
end_include
begin_include
include|#
directive|include
file|"private/qssl_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qsslcontext_openssl_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qsslsocket_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qsslsocket_openssl_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qsslsocket_openssl_symbols_p.h"
end_include
begin_function_decl
name|QT_BEGIN_NAMESPACE
comment|// defined in qsslsocket_openssl.cpp:
specifier|extern
name|int
name|q_X509Callback
parameter_list|(
name|int
name|ok
parameter_list|,
name|X509_STORE_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|QString
name|getErrorsFromOpenSsl
parameter_list|()
function_decl|;
end_function_decl
begin_function
DECL|function|get_dh1024
specifier|static
name|DH
modifier|*
name|get_dh1024
parameter_list|()
block|{
comment|// Default DH params
comment|// 1024-bit MODP Group
comment|// From RFC 2409
name|QByteArray
name|params
init|=
name|QByteArray
operator|::
name|fromBase64
argument_list|(
name|QByteArrayLiteral
argument_list|(
literal|"MIGHAoGBAP//////////yQ/aoiFowjTExmKLgNwc0SkCTgiKZ8x0Agu+pjsTmyJR"
expr|\
literal|"Sgh5jjQE3e+VGbPNOkMbMCsKbfJfFDdP4TVtbVHCReSFtXZiXn7G9ExC6aY37WsL"
expr|\
literal|"/1y29Aa37e44a/taiZ+lrp8kEXxLH+ZJKGZR7OZTgf//////////AgEC"
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|char
modifier|*
name|ptr
init|=
name|params
operator|.
name|constData
argument_list|()
decl_stmt|;
name|DH
modifier|*
name|dh
init|=
name|q_d2i_DHparams
argument_list|(
name|NULL
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|unsigned
name|char
operator|*
operator|*
argument_list|>
argument_list|(
operator|&
name|ptr
argument_list|)
argument_list|,
name|params
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|dh
return|;
block|}
end_function
begin_constructor
DECL|function|QSslContext
name|QSslContext
operator|::
name|QSslContext
parameter_list|()
member_init_list|:
name|ctx
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|pkey
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|session
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_sessionTicketLifeTimeHint
argument_list|(
operator|-
literal|1
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QSslContext
name|QSslContext
operator|::
name|~
name|QSslContext
parameter_list|()
block|{
if|if
condition|(
name|ctx
condition|)
comment|// This will decrement the reference count by 1 and free the context eventually when possible
name|q_SSL_CTX_free
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
if|if
condition|(
name|pkey
condition|)
name|q_EVP_PKEY_free
argument_list|(
name|pkey
argument_list|)
expr_stmt|;
if|if
condition|(
name|session
condition|)
name|q_SSL_SESSION_free
argument_list|(
name|session
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|msgErrorSettingEllipticCurves
specifier|static
specifier|inline
name|QString
name|msgErrorSettingEllipticCurves
parameter_list|(
specifier|const
name|QString
modifier|&
name|why
parameter_list|)
block|{
return|return
name|QSslSocket
operator|::
name|tr
argument_list|(
literal|"Error when setting the elliptic curves (%1)"
argument_list|)
operator|.
name|arg
argument_list|(
name|why
argument_list|)
return|;
block|}
end_function
begin_comment
comment|// static
end_comment
begin_function
DECL|function|initSslContext
name|void
name|QSslContext
operator|::
name|initSslContext
parameter_list|(
name|QSslContext
modifier|*
name|sslContext
parameter_list|,
name|QSslSocket
operator|::
name|SslMode
name|mode
parameter_list|,
specifier|const
name|QSslConfiguration
modifier|&
name|configuration
parameter_list|,
name|bool
name|allowRootCertOnDemandLoading
parameter_list|)
block|{
name|sslContext
operator|->
name|sslConfiguration
operator|=
name|configuration
expr_stmt|;
name|sslContext
operator|->
name|errorCode
operator|=
name|QSslError
operator|::
name|NoError
expr_stmt|;
name|bool
name|client
init|=
operator|(
name|mode
operator|==
name|QSslSocket
operator|::
name|SslClientMode
operator|)
decl_stmt|;
name|bool
name|reinitialized
init|=
literal|false
decl_stmt|;
name|bool
name|unsupportedProtocol
init|=
literal|false
decl_stmt|;
name|init_context
label|:
switch|switch
condition|(
name|sslContext
operator|->
name|sslConfiguration
operator|.
name|protocol
argument_list|()
condition|)
block|{
case|case
name|QSsl
operator|::
name|SslV2
case|:
ifndef|#
directive|ifndef
name|OPENSSL_NO_SSL2
name|sslContext
operator|->
name|ctx
operator|=
name|q_SSL_CTX_new
argument_list|(
name|client
condition|?
name|q_SSLv2_client_method
argument_list|()
else|:
name|q_SSLv2_server_method
argument_list|()
argument_list|)
expr_stmt|;
else|#
directive|else
comment|// SSL 2 not supported by the system, but chosen deliberately -> error
name|sslContext
operator|->
name|ctx
operator|=
literal|0
expr_stmt|;
name|unsupportedProtocol
operator|=
literal|true
expr_stmt|;
endif|#
directive|endif
break|break;
case|case
name|QSsl
operator|::
name|SslV3
case|:
ifndef|#
directive|ifndef
name|OPENSSL_NO_SSL3_METHOD
name|sslContext
operator|->
name|ctx
operator|=
name|q_SSL_CTX_new
argument_list|(
name|client
condition|?
name|q_SSLv3_client_method
argument_list|()
else|:
name|q_SSLv3_server_method
argument_list|()
argument_list|)
expr_stmt|;
else|#
directive|else
comment|// SSL 3 not supported by the system, but chosen deliberately -> error
name|sslContext
operator|->
name|ctx
operator|=
literal|0
expr_stmt|;
name|unsupportedProtocol
operator|=
literal|true
expr_stmt|;
endif|#
directive|endif
break|break;
case|case
name|QSsl
operator|::
name|SecureProtocols
case|:
comment|// SSLv2 and SSLv3 will be disabled by SSL options
comment|// But we need q_SSLv23_server_method() otherwise AnyProtocol will be unable to connect on Win32.
case|case
name|QSsl
operator|::
name|TlsV1SslV3
case|:
comment|// SSLv2 will will be disabled by SSL options
case|case
name|QSsl
operator|::
name|AnyProtocol
case|:
default|default:
name|sslContext
operator|->
name|ctx
operator|=
name|q_SSL_CTX_new
argument_list|(
name|client
condition|?
name|q_SSLv23_client_method
argument_list|()
else|:
name|q_SSLv23_server_method
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|QSsl
operator|::
name|TlsV1_0
case|:
name|sslContext
operator|->
name|ctx
operator|=
name|q_SSL_CTX_new
argument_list|(
name|client
condition|?
name|q_TLSv1_client_method
argument_list|()
else|:
name|q_TLSv1_server_method
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|QSsl
operator|::
name|TlsV1_1
case|:
if|#
directive|if
name|OPENSSL_VERSION_NUMBER
operator|>=
literal|0x10001000L
name|sslContext
operator|->
name|ctx
operator|=
name|q_SSL_CTX_new
argument_list|(
name|client
condition|?
name|q_TLSv1_1_client_method
argument_list|()
else|:
name|q_TLSv1_1_server_method
argument_list|()
argument_list|)
expr_stmt|;
else|#
directive|else
comment|// TLS 1.1 not supported by the system, but chosen deliberately -> error
name|sslContext
operator|->
name|ctx
operator|=
literal|0
expr_stmt|;
name|unsupportedProtocol
operator|=
literal|true
expr_stmt|;
endif|#
directive|endif
break|break;
case|case
name|QSsl
operator|::
name|TlsV1_2
case|:
if|#
directive|if
name|OPENSSL_VERSION_NUMBER
operator|>=
literal|0x10001000L
name|sslContext
operator|->
name|ctx
operator|=
name|q_SSL_CTX_new
argument_list|(
name|client
condition|?
name|q_TLSv1_2_client_method
argument_list|()
else|:
name|q_TLSv1_2_server_method
argument_list|()
argument_list|)
expr_stmt|;
else|#
directive|else
comment|// TLS 1.2 not supported by the system, but chosen deliberately -> error
name|sslContext
operator|->
name|ctx
operator|=
literal|0
expr_stmt|;
name|unsupportedProtocol
operator|=
literal|true
expr_stmt|;
endif|#
directive|endif
break|break;
case|case
name|QSsl
operator|::
name|TlsV1_0OrLater
case|:
comment|// Specific protocols will be specified via SSL options.
name|sslContext
operator|->
name|ctx
operator|=
name|q_SSL_CTX_new
argument_list|(
name|client
condition|?
name|q_SSLv23_client_method
argument_list|()
else|:
name|q_SSLv23_server_method
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|QSsl
operator|::
name|TlsV1_1OrLater
case|:
case|case
name|QSsl
operator|::
name|TlsV1_2OrLater
case|:
if|#
directive|if
name|OPENSSL_VERSION_NUMBER
operator|>=
literal|0x10001000L
comment|// Specific protocols will be specified via SSL options.
name|sslContext
operator|->
name|ctx
operator|=
name|q_SSL_CTX_new
argument_list|(
name|client
condition|?
name|q_SSLv23_client_method
argument_list|()
else|:
name|q_SSLv23_server_method
argument_list|()
argument_list|)
expr_stmt|;
else|#
directive|else
comment|// TLS 1.1/1.2 not supported by the system, but chosen deliberately -> error
name|sslContext
operator|->
name|ctx
operator|=
literal|0
expr_stmt|;
name|unsupportedProtocol
operator|=
literal|true
expr_stmt|;
endif|#
directive|endif
break|break;
block|}
if|if
condition|(
operator|!
name|sslContext
operator|->
name|ctx
condition|)
block|{
comment|// After stopping Flash 10 the SSL library looses its ciphers. Try re-adding them
comment|// by re-initializing the library.
if|if
condition|(
operator|!
name|reinitialized
condition|)
block|{
name|reinitialized
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|q_SSL_library_init
argument_list|()
operator|==
literal|1
condition|)
goto|goto
name|init_context
goto|;
block|}
name|sslContext
operator|->
name|errorStr
operator|=
name|QSslSocket
operator|::
name|tr
argument_list|(
literal|"Error creating SSL context (%1)"
argument_list|)
operator|.
name|arg
argument_list|(
name|unsupportedProtocol
condition|?
name|QSslSocket
operator|::
name|tr
argument_list|(
literal|"unsupported protocol"
argument_list|)
else|:
name|QSslSocketBackendPrivate
operator|::
name|getErrorsFromOpenSsl
argument_list|()
argument_list|)
expr_stmt|;
name|sslContext
operator|->
name|errorCode
operator|=
name|QSslError
operator|::
name|UnspecifiedError
expr_stmt|;
return|return;
block|}
comment|// Enable bug workarounds.
name|long
name|options
init|=
name|QSslSocketBackendPrivate
operator|::
name|setupOpenSslOptions
argument_list|(
name|configuration
operator|.
name|protocol
argument_list|()
argument_list|,
name|configuration
operator|.
name|d
operator|->
name|sslOptions
argument_list|)
decl_stmt|;
name|q_SSL_CTX_set_options
argument_list|(
name|sslContext
operator|->
name|ctx
argument_list|,
name|options
argument_list|)
expr_stmt|;
if|#
directive|if
name|OPENSSL_VERSION_NUMBER
operator|>=
literal|0x10000000L
comment|// Tell OpenSSL to release memory early
comment|// http://www.openssl.org/docs/ssl/SSL_CTX_set_mode.html
if|if
condition|(
name|q_SSLeay
argument_list|()
operator|>=
literal|0x10000000L
condition|)
name|q_SSL_CTX_set_mode
argument_list|(
name|sslContext
operator|->
name|ctx
argument_list|,
name|SSL_MODE_RELEASE_BUFFERS
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// Initialize ciphers
name|QByteArray
name|cipherString
decl_stmt|;
name|bool
name|first
init|=
literal|true
decl_stmt|;
name|QList
argument_list|<
name|QSslCipher
argument_list|>
name|ciphers
init|=
name|sslContext
operator|->
name|sslConfiguration
operator|.
name|ciphers
argument_list|()
decl_stmt|;
if|if
condition|(
name|ciphers
operator|.
name|isEmpty
argument_list|()
condition|)
name|ciphers
operator|=
name|QSslSocketPrivate
operator|::
name|defaultCiphers
argument_list|()
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QSslCipher
modifier|&
name|cipher
decl|,
name|ciphers
control|)
block|{
if|if
condition|(
name|first
condition|)
name|first
operator|=
literal|false
expr_stmt|;
else|else
name|cipherString
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|cipherString
operator|.
name|append
argument_list|(
name|cipher
operator|.
name|name
argument_list|()
operator|.
name|toLatin1
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|q_SSL_CTX_set_cipher_list
argument_list|(
name|sslContext
operator|->
name|ctx
argument_list|,
name|cipherString
operator|.
name|data
argument_list|()
argument_list|)
condition|)
block|{
name|sslContext
operator|->
name|errorStr
operator|=
name|QSslSocket
operator|::
name|tr
argument_list|(
literal|"Invalid or empty cipher list (%1)"
argument_list|)
operator|.
name|arg
argument_list|(
name|QSslSocketBackendPrivate
operator|::
name|getErrorsFromOpenSsl
argument_list|()
argument_list|)
expr_stmt|;
name|sslContext
operator|->
name|errorCode
operator|=
name|QSslError
operator|::
name|UnspecifiedError
expr_stmt|;
return|return;
block|}
specifier|const
name|QDateTime
name|now
init|=
name|QDateTime
operator|::
name|currentDateTimeUtc
argument_list|()
decl_stmt|;
comment|// Add all our CAs to this store.
specifier|const
specifier|auto
name|caCertificates
init|=
name|sslContext
operator|->
name|sslConfiguration
operator|.
name|caCertificates
argument_list|()
decl_stmt|;
for|for
control|(
specifier|const
name|QSslCertificate
modifier|&
name|caCertificate
range|:
name|caCertificates
control|)
block|{
comment|// From https://www.openssl.org/docs/ssl/SSL_CTX_load_verify_locations.html:
comment|//
comment|// If several CA certificates matching the name, key identifier, and
comment|// serial number condition are available, only the first one will be
comment|// examined. This may lead to unexpected results if the same CA
comment|// certificate is available with different expiration dates. If a
comment|// ``certificate expired'' verification error occurs, no other
comment|// certificate will be searched. Make sure to not have expired
comment|// certificates mixed with valid ones.
comment|//
comment|// See also: QSslSocketBackendPrivate::verify()
if|if
condition|(
name|caCertificate
operator|.
name|expiryDate
argument_list|()
operator|>=
name|now
condition|)
block|{
name|q_X509_STORE_add_cert
argument_list|(
name|q_SSL_CTX_get_cert_store
argument_list|(
name|sslContext
operator|->
name|ctx
argument_list|)
argument_list|,
operator|(
name|X509
operator|*
operator|)
name|caCertificate
operator|.
name|handle
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|QSslSocketPrivate
operator|::
name|s_loadRootCertsOnDemand
operator|&&
name|allowRootCertOnDemandLoading
condition|)
block|{
comment|// tell OpenSSL the directories where to look up the root certs on demand
specifier|const
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|unixDirs
init|=
name|QSslSocketPrivate
operator|::
name|unixRootCertDirectories
argument_list|()
decl_stmt|;
for|for
control|(
specifier|const
name|QByteArray
modifier|&
name|unixDir
range|:
name|unixDirs
control|)
name|q_SSL_CTX_load_verify_locations
argument_list|(
name|sslContext
operator|->
name|ctx
argument_list|,
literal|0
argument_list|,
name|unixDir
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|sslContext
operator|->
name|sslConfiguration
operator|.
name|localCertificate
argument_list|()
operator|.
name|isNull
argument_list|()
condition|)
block|{
comment|// Require a private key as well.
if|if
condition|(
name|sslContext
operator|->
name|sslConfiguration
operator|.
name|privateKey
argument_list|()
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|sslContext
operator|->
name|errorStr
operator|=
name|QSslSocket
operator|::
name|tr
argument_list|(
literal|"Cannot provide a certificate with no key, %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|QSslSocketBackendPrivate
operator|::
name|getErrorsFromOpenSsl
argument_list|()
argument_list|)
expr_stmt|;
name|sslContext
operator|->
name|errorCode
operator|=
name|QSslError
operator|::
name|UnspecifiedError
expr_stmt|;
return|return;
block|}
comment|// Load certificate
if|if
condition|(
operator|!
name|q_SSL_CTX_use_certificate
argument_list|(
name|sslContext
operator|->
name|ctx
argument_list|,
operator|(
name|X509
operator|*
operator|)
name|sslContext
operator|->
name|sslConfiguration
operator|.
name|localCertificate
argument_list|()
operator|.
name|handle
argument_list|()
argument_list|)
condition|)
block|{
name|sslContext
operator|->
name|errorStr
operator|=
name|QSslSocket
operator|::
name|tr
argument_list|(
literal|"Error loading local certificate, %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|QSslSocketBackendPrivate
operator|::
name|getErrorsFromOpenSsl
argument_list|()
argument_list|)
expr_stmt|;
name|sslContext
operator|->
name|errorCode
operator|=
name|QSslError
operator|::
name|UnspecifiedError
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|configuration
operator|.
name|d
operator|->
name|privateKey
operator|.
name|algorithm
argument_list|()
operator|==
name|QSsl
operator|::
name|Opaque
condition|)
block|{
name|sslContext
operator|->
name|pkey
operator|=
cast|reinterpret_cast
argument_list|<
name|EVP_PKEY
operator|*
argument_list|>
argument_list|(
name|configuration
operator|.
name|d
operator|->
name|privateKey
operator|.
name|handle
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Load private key
name|sslContext
operator|->
name|pkey
operator|=
name|q_EVP_PKEY_new
argument_list|()
expr_stmt|;
comment|// before we were using EVP_PKEY_assign_R* functions and did not use EVP_PKEY_free.
comment|// this lead to a memory leak. Now we use the *_set1_* functions which do not
comment|// take ownership of the RSA/DSA key instance because the QSslKey already has ownership.
if|if
condition|(
name|configuration
operator|.
name|d
operator|->
name|privateKey
operator|.
name|algorithm
argument_list|()
operator|==
name|QSsl
operator|::
name|Rsa
condition|)
name|q_EVP_PKEY_set1_RSA
argument_list|(
name|sslContext
operator|->
name|pkey
argument_list|,
cast|reinterpret_cast
argument_list|<
name|RSA
operator|*
argument_list|>
argument_list|(
name|configuration
operator|.
name|d
operator|->
name|privateKey
operator|.
name|handle
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|configuration
operator|.
name|d
operator|->
name|privateKey
operator|.
name|algorithm
argument_list|()
operator|==
name|QSsl
operator|::
name|Dsa
condition|)
name|q_EVP_PKEY_set1_DSA
argument_list|(
name|sslContext
operator|->
name|pkey
argument_list|,
cast|reinterpret_cast
argument_list|<
name|DSA
operator|*
argument_list|>
argument_list|(
name|configuration
operator|.
name|d
operator|->
name|privateKey
operator|.
name|handle
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|OPENSSL_NO_EC
elseif|else
if|if
condition|(
name|configuration
operator|.
name|d
operator|->
name|privateKey
operator|.
name|algorithm
argument_list|()
operator|==
name|QSsl
operator|::
name|Ec
condition|)
name|q_EVP_PKEY_set1_EC_KEY
argument_list|(
name|sslContext
operator|->
name|pkey
argument_list|,
cast|reinterpret_cast
argument_list|<
name|EC_KEY
operator|*
argument_list|>
argument_list|(
name|configuration
operator|.
name|d
operator|->
name|privateKey
operator|.
name|handle
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
if|if
condition|(
operator|!
name|q_SSL_CTX_use_PrivateKey
argument_list|(
name|sslContext
operator|->
name|ctx
argument_list|,
name|sslContext
operator|->
name|pkey
argument_list|)
condition|)
block|{
name|sslContext
operator|->
name|errorStr
operator|=
name|QSslSocket
operator|::
name|tr
argument_list|(
literal|"Error loading private key, %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|QSslSocketBackendPrivate
operator|::
name|getErrorsFromOpenSsl
argument_list|()
argument_list|)
expr_stmt|;
name|sslContext
operator|->
name|errorCode
operator|=
name|QSslError
operator|::
name|UnspecifiedError
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|configuration
operator|.
name|d
operator|->
name|privateKey
operator|.
name|algorithm
argument_list|()
operator|==
name|QSsl
operator|::
name|Opaque
condition|)
name|sslContext
operator|->
name|pkey
operator|=
literal|0
expr_stmt|;
comment|// Don't free the private key, it belongs to QSslKey
comment|// Check if the certificate matches the private key.
if|if
condition|(
operator|!
name|q_SSL_CTX_check_private_key
argument_list|(
name|sslContext
operator|->
name|ctx
argument_list|)
condition|)
block|{
name|sslContext
operator|->
name|errorStr
operator|=
name|QSslSocket
operator|::
name|tr
argument_list|(
literal|"Private key does not certify public key, %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|QSslSocketBackendPrivate
operator|::
name|getErrorsFromOpenSsl
argument_list|()
argument_list|)
expr_stmt|;
name|sslContext
operator|->
name|errorCode
operator|=
name|QSslError
operator|::
name|UnspecifiedError
expr_stmt|;
return|return;
block|}
comment|// If we have any intermediate certificates then we need to add them to our chain
name|bool
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
specifier|const
name|QSslCertificate
modifier|&
name|cert
range|:
name|qAsConst
argument_list|(
name|configuration
operator|.
name|d
operator|->
name|localCertificateChain
argument_list|)
control|)
block|{
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
continue|continue;
block|}
name|q_SSL_CTX_ctrl
argument_list|(
name|sslContext
operator|->
name|ctx
argument_list|,
name|SSL_CTRL_EXTRA_CHAIN_CERT
argument_list|,
literal|0
argument_list|,
name|q_X509_dup
argument_list|(
cast|reinterpret_cast
argument_list|<
name|X509
operator|*
argument_list|>
argument_list|(
name|cert
operator|.
name|handle
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Initialize peer verification.
if|if
condition|(
name|sslContext
operator|->
name|sslConfiguration
operator|.
name|peerVerifyMode
argument_list|()
operator|==
name|QSslSocket
operator|::
name|VerifyNone
condition|)
block|{
name|q_SSL_CTX_set_verify
argument_list|(
name|sslContext
operator|->
name|ctx
argument_list|,
name|SSL_VERIFY_NONE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|q_SSL_CTX_set_verify
argument_list|(
name|sslContext
operator|->
name|ctx
argument_list|,
name|SSL_VERIFY_PEER
argument_list|,
name|q_X509Callback
argument_list|)
expr_stmt|;
block|}
comment|// Set verification depth.
if|if
condition|(
name|sslContext
operator|->
name|sslConfiguration
operator|.
name|peerVerifyDepth
argument_list|()
operator|!=
literal|0
condition|)
name|q_SSL_CTX_set_verify_depth
argument_list|(
name|sslContext
operator|->
name|ctx
argument_list|,
name|sslContext
operator|->
name|sslConfiguration
operator|.
name|peerVerifyDepth
argument_list|()
argument_list|)
expr_stmt|;
comment|// set persisted session if the user set it
if|if
condition|(
operator|!
name|configuration
operator|.
name|sessionTicket
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|sslContext
operator|->
name|setSessionASN1
argument_list|(
name|configuration
operator|.
name|sessionTicket
argument_list|()
argument_list|)
expr_stmt|;
comment|// Set temp DH params
name|DH
modifier|*
name|dh
init|=
literal|0
decl_stmt|;
name|dh
operator|=
name|get_dh1024
argument_list|()
expr_stmt|;
name|q_SSL_CTX_set_tmp_dh
argument_list|(
name|sslContext
operator|->
name|ctx
argument_list|,
name|dh
argument_list|)
expr_stmt|;
name|q_DH_free
argument_list|(
name|dh
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|OPENSSL_NO_EC
if|#
directive|if
name|OPENSSL_VERSION_NUMBER
operator|>=
literal|0x10002000L
if|if
condition|(
name|q_SSLeay
argument_list|()
operator|>=
literal|0x10002000L
condition|)
block|{
name|q_SSL_CTX_ctrl
argument_list|(
name|sslContext
operator|->
name|ctx
argument_list|,
name|SSL_CTRL_SET_ECDH_AUTO
argument_list|,
literal|1
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
block|}
else|else
endif|#
directive|endif
block|{
comment|// Set temp ECDH params
name|EC_KEY
modifier|*
name|ecdh
init|=
literal|0
decl_stmt|;
name|ecdh
operator|=
name|q_EC_KEY_new_by_curve_name
argument_list|(
name|NID_X9_62_prime256v1
argument_list|)
expr_stmt|;
name|q_SSL_CTX_set_tmp_ecdh
argument_list|(
name|sslContext
operator|->
name|ctx
argument_list|,
name|ecdh
argument_list|)
expr_stmt|;
name|q_EC_KEY_free
argument_list|(
name|ecdh
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
comment|// OPENSSL_NO_EC
specifier|const
name|QVector
argument_list|<
name|QSslEllipticCurve
argument_list|>
name|qcurves
init|=
name|sslContext
operator|->
name|sslConfiguration
operator|.
name|ellipticCurves
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|qcurves
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|#
directive|if
name|OPENSSL_VERSION_NUMBER
operator|>=
literal|0x10002000L
operator|&&
operator|!
name|defined
argument_list|(
name|OPENSSL_NO_EC
argument_list|)
comment|// Set the curves to be used
if|if
condition|(
name|q_SSLeay
argument_list|()
operator|>=
literal|0x10002000L
condition|)
block|{
comment|// SSL_CTX_ctrl wants a non-const pointer as last argument,
comment|// but let's avoid a copy into a temporary array
if|if
condition|(
operator|!
name|q_SSL_CTX_ctrl
argument_list|(
name|sslContext
operator|->
name|ctx
argument_list|,
name|SSL_CTRL_SET_CURVES
argument_list|,
name|qcurves
operator|.
name|size
argument_list|()
argument_list|,
cast|const_cast
argument_list|<
name|int
operator|*
argument_list|>
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|int
operator|*
argument_list|>
argument_list|(
name|qcurves
operator|.
name|data
argument_list|()
argument_list|)
argument_list|)
argument_list|)
condition|)
block|{
name|sslContext
operator|->
name|errorStr
operator|=
name|msgErrorSettingEllipticCurves
argument_list|(
name|QSslSocketBackendPrivate
operator|::
name|getErrorsFromOpenSsl
argument_list|()
argument_list|)
expr_stmt|;
name|sslContext
operator|->
name|errorCode
operator|=
name|QSslError
operator|::
name|UnspecifiedError
expr_stmt|;
block|}
block|}
else|else
endif|#
directive|endif
comment|// OPENSSL_VERSION_NUMBER>= 0x10002000L&& !defined(OPENSSL_NO_EC)
block|{
comment|// specific curves requested, but not possible to set -> error
name|sslContext
operator|->
name|errorStr
operator|=
name|msgErrorSettingEllipticCurves
argument_list|(
name|QSslSocket
operator|::
name|tr
argument_list|(
literal|"OpenSSL version too old, need at least v1.0.2"
argument_list|)
argument_list|)
expr_stmt|;
name|sslContext
operator|->
name|errorCode
operator|=
name|QSslError
operator|::
name|UnspecifiedError
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|fromConfiguration
name|QSslContext
modifier|*
name|QSslContext
operator|::
name|fromConfiguration
parameter_list|(
name|QSslSocket
operator|::
name|SslMode
name|mode
parameter_list|,
specifier|const
name|QSslConfiguration
modifier|&
name|configuration
parameter_list|,
name|bool
name|allowRootCertOnDemandLoading
parameter_list|)
block|{
name|QSslContext
modifier|*
name|sslContext
init|=
operator|new
name|QSslContext
argument_list|()
decl_stmt|;
name|initSslContext
argument_list|(
name|sslContext
argument_list|,
name|mode
argument_list|,
name|configuration
argument_list|,
name|allowRootCertOnDemandLoading
argument_list|)
expr_stmt|;
return|return
name|sslContext
return|;
block|}
end_function
begin_function
DECL|function|sharedFromConfiguration
name|QSharedPointer
argument_list|<
name|QSslContext
argument_list|>
name|QSslContext
operator|::
name|sharedFromConfiguration
parameter_list|(
name|QSslSocket
operator|::
name|SslMode
name|mode
parameter_list|,
specifier|const
name|QSslConfiguration
modifier|&
name|configuration
parameter_list|,
name|bool
name|allowRootCertOnDemandLoading
parameter_list|)
block|{
name|QSharedPointer
argument_list|<
name|QSslContext
argument_list|>
name|sslContext
init|=
name|QSharedPointer
argument_list|<
name|QSslContext
argument_list|>
operator|::
name|create
argument_list|()
decl_stmt|;
name|initSslContext
argument_list|(
name|sslContext
operator|.
name|data
argument_list|()
argument_list|,
name|mode
argument_list|,
name|configuration
argument_list|,
name|allowRootCertOnDemandLoading
argument_list|)
expr_stmt|;
return|return
name|sslContext
return|;
block|}
end_function
begin_if
if|#
directive|if
name|OPENSSL_VERSION_NUMBER
operator|>=
literal|0x1000100fL
operator|&&
operator|!
name|defined
argument_list|(
name|OPENSSL_NO_NEXTPROTONEG
argument_list|)
end_if
begin_function
DECL|function|next_proto_cb
specifier|static
name|int
name|next_proto_cb
parameter_list|(
name|SSL
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
modifier|*
name|out
parameter_list|,
name|unsigned
name|char
modifier|*
name|outlen
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|in
parameter_list|,
name|unsigned
name|int
name|inlen
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
block|{
name|QSslContext
operator|::
name|NPNContext
modifier|*
name|ctx
init|=
cast|reinterpret_cast
argument_list|<
name|QSslContext
operator|::
name|NPNContext
operator|*
argument_list|>
argument_list|(
name|arg
argument_list|)
decl_stmt|;
comment|// comment out to debug:
comment|//    QList<QByteArray> supportedVersions;
comment|//    for (unsigned int i = 0; i< inlen; ) {
comment|//        QByteArray version(reinterpret_cast<const char *>(&in[i+1]), in[i]);
comment|//        supportedVersions<< version;
comment|//        i += in[i] + 1;
comment|//    }
name|int
name|proto
init|=
name|q_SSL_select_next_proto
argument_list|(
name|out
argument_list|,
name|outlen
argument_list|,
name|in
argument_list|,
name|inlen
argument_list|,
name|ctx
operator|->
name|data
argument_list|,
name|ctx
operator|->
name|len
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|proto
condition|)
block|{
case|case
name|OPENSSL_NPN_UNSUPPORTED
case|:
name|ctx
operator|->
name|status
operator|=
name|QSslConfiguration
operator|::
name|NextProtocolNegotiationNone
expr_stmt|;
break|break;
case|case
name|OPENSSL_NPN_NEGOTIATED
case|:
name|ctx
operator|->
name|status
operator|=
name|QSslConfiguration
operator|::
name|NextProtocolNegotiationNegotiated
expr_stmt|;
break|break;
case|case
name|OPENSSL_NPN_NO_OVERLAP
case|:
name|ctx
operator|->
name|status
operator|=
name|QSslConfiguration
operator|::
name|NextProtocolNegotiationUnsupported
expr_stmt|;
break|break;
default|default:
name|qCWarning
argument_list|(
name|lcSsl
argument_list|,
literal|"OpenSSL sent unknown NPN status"
argument_list|)
expr_stmt|;
block|}
return|return
name|SSL_TLSEXT_ERR_OK
return|;
block|}
end_function
begin_function
DECL|function|npnContext
name|QSslContext
operator|::
name|NPNContext
name|QSslContext
operator|::
name|npnContext
parameter_list|()
specifier|const
block|{
return|return
name|m_npnContext
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// OPENSSL_VERSION_NUMBER>= 0x1000100fL ...
end_comment
begin_comment
comment|// Needs to be deleted by caller
end_comment
begin_function
DECL|function|createSsl
name|SSL
modifier|*
name|QSslContext
operator|::
name|createSsl
parameter_list|()
block|{
name|SSL
modifier|*
name|ssl
init|=
name|q_SSL_new
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
name|q_SSL_clear
argument_list|(
name|ssl
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|session
operator|&&
operator|!
name|sessionASN1
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|sslConfiguration
operator|.
name|testSslOption
argument_list|(
name|QSsl
operator|::
name|SslOptionDisableSessionPersistence
argument_list|)
condition|)
block|{
specifier|const
name|unsigned
name|char
modifier|*
name|data
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|unsigned
name|char
operator|*
argument_list|>
argument_list|(
name|m_sessionASN1
operator|.
name|constData
argument_list|()
argument_list|)
decl_stmt|;
name|session
operator|=
name|q_d2i_SSL_SESSION
argument_list|(
literal|0
argument_list|,
operator|&
name|data
argument_list|,
name|m_sessionASN1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// refcount is 1 already, set by function above
block|}
if|if
condition|(
name|session
condition|)
block|{
comment|// Try to resume the last session we cached
if|if
condition|(
operator|!
name|q_SSL_set_session
argument_list|(
name|ssl
argument_list|,
name|session
argument_list|)
condition|)
block|{
name|qCWarning
argument_list|(
name|lcSsl
argument_list|,
literal|"could not set SSL session"
argument_list|)
expr_stmt|;
name|q_SSL_SESSION_free
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|session
operator|=
literal|0
expr_stmt|;
block|}
block|}
if|#
directive|if
name|OPENSSL_VERSION_NUMBER
operator|>=
literal|0x1000100fL
operator|&&
operator|!
name|defined
argument_list|(
name|OPENSSL_NO_NEXTPROTONEG
argument_list|)
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|protocols
init|=
name|sslConfiguration
operator|.
name|d
operator|->
name|nextAllowedProtocols
decl_stmt|;
if|if
condition|(
operator|!
name|protocols
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|m_supportedNPNVersions
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|a
init|=
literal|0
init|;
name|a
operator|<
name|protocols
operator|.
name|count
argument_list|()
condition|;
operator|++
name|a
control|)
block|{
if|if
condition|(
name|protocols
operator|.
name|at
argument_list|(
name|a
argument_list|)
operator|.
name|size
argument_list|()
operator|>
literal|255
condition|)
block|{
name|qCWarning
argument_list|(
name|lcSsl
argument_list|)
operator|<<
literal|"TLS NPN extension"
operator|<<
name|protocols
operator|.
name|at
argument_list|(
name|a
argument_list|)
operator|<<
literal|"is too long and will be truncated to 255 characters."
expr_stmt|;
name|protocols
index|[
name|a
index|]
operator|=
name|protocols
operator|.
name|at
argument_list|(
name|a
argument_list|)
operator|.
name|left
argument_list|(
literal|255
argument_list|)
expr_stmt|;
block|}
name|m_supportedNPNVersions
operator|.
name|append
argument_list|(
name|protocols
operator|.
name|at
argument_list|(
name|a
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|protocols
operator|.
name|at
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|m_npnContext
operator|.
name|data
operator|=
cast|reinterpret_cast
argument_list|<
name|unsigned
name|char
operator|*
argument_list|>
argument_list|(
name|m_supportedNPNVersions
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|m_npnContext
operator|.
name|len
operator|=
name|m_supportedNPNVersions
operator|.
name|count
argument_list|()
expr_stmt|;
name|m_npnContext
operator|.
name|status
operator|=
name|QSslConfiguration
operator|::
name|NextProtocolNegotiationNone
expr_stmt|;
name|q_SSL_CTX_set_next_proto_select_cb
argument_list|(
name|ctx
argument_list|,
name|next_proto_cb
argument_list|,
operator|&
name|m_npnContext
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
comment|// OPENSSL_VERSION_NUMBER>= 0x1000100fL ...
return|return
name|ssl
return|;
block|}
end_function
begin_comment
comment|// We cache exactly one session here
end_comment
begin_function
DECL|function|cacheSession
name|bool
name|QSslContext
operator|::
name|cacheSession
parameter_list|(
name|SSL
modifier|*
name|ssl
parameter_list|)
block|{
comment|// don't cache the same session again
if|if
condition|(
name|session
operator|&&
name|session
operator|==
name|q_SSL_get_session
argument_list|(
name|ssl
argument_list|)
condition|)
return|return
literal|true
return|;
comment|// decrease refcount of currently stored session
comment|// (this might happen if there are several concurrent handshakes in flight)
if|if
condition|(
name|session
condition|)
name|q_SSL_SESSION_free
argument_list|(
name|session
argument_list|)
expr_stmt|;
comment|// cache the session the caller gave us and increase reference count
name|session
operator|=
name|q_SSL_get1_session
argument_list|(
name|ssl
argument_list|)
expr_stmt|;
if|if
condition|(
name|session
operator|&&
operator|!
name|sslConfiguration
operator|.
name|testSslOption
argument_list|(
name|QSsl
operator|::
name|SslOptionDisableSessionPersistence
argument_list|)
condition|)
block|{
name|int
name|sessionSize
init|=
name|q_i2d_SSL_SESSION
argument_list|(
name|session
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|sessionSize
operator|>
literal|0
condition|)
block|{
name|m_sessionASN1
operator|.
name|resize
argument_list|(
name|sessionSize
argument_list|)
expr_stmt|;
name|unsigned
name|char
modifier|*
name|data
init|=
cast|reinterpret_cast
argument_list|<
name|unsigned
name|char
operator|*
argument_list|>
argument_list|(
name|m_sessionASN1
operator|.
name|data
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|q_i2d_SSL_SESSION
argument_list|(
name|session
argument_list|,
operator|&
name|data
argument_list|)
condition|)
name|qCWarning
argument_list|(
name|lcSsl
argument_list|,
literal|"could not store persistent version of SSL session"
argument_list|)
expr_stmt|;
name|m_sessionTicketLifeTimeHint
operator|=
name|session
operator|->
name|tlsext_tick_lifetime_hint
expr_stmt|;
block|}
block|}
return|return
operator|(
name|session
operator|!=
literal|0
operator|)
return|;
block|}
end_function
begin_function
DECL|function|sessionASN1
name|QByteArray
name|QSslContext
operator|::
name|sessionASN1
parameter_list|()
specifier|const
block|{
return|return
name|m_sessionASN1
return|;
block|}
end_function
begin_function
DECL|function|setSessionASN1
name|void
name|QSslContext
operator|::
name|setSessionASN1
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|session
parameter_list|)
block|{
name|m_sessionASN1
operator|=
name|session
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sessionTicketLifeTimeHint
name|int
name|QSslContext
operator|::
name|sessionTicketLifeTimeHint
parameter_list|()
specifier|const
block|{
return|return
name|m_sessionTicketLifeTimeHint
return|;
block|}
end_function
begin_function
DECL|function|error
name|QSslError
operator|::
name|SslError
name|QSslContext
operator|::
name|error
parameter_list|()
specifier|const
block|{
return|return
name|errorCode
return|;
block|}
end_function
begin_function
DECL|function|errorString
name|QString
name|QSslContext
operator|::
name|errorString
parameter_list|()
specifier|const
block|{
return|return
name|errorStr
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
