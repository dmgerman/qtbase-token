begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtNetwork module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qsslkey.h"
end_include
begin_include
include|#
directive|include
file|"qsslkey_p.h"
end_include
begin_include
include|#
directive|include
file|"qsslsocket_openssl_symbols_p.h"
end_include
begin_include
include|#
directive|include
file|"qsslsocket.h"
end_include
begin_include
include|#
directive|include
file|"qsslsocket_p.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/qatomic.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qbytearray.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qiodevice.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DEBUG_STREAM
end_ifndef
begin_include
include|#
directive|include
file|<QtCore/qdebug.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|clear
name|void
name|QSslKeyPrivate
operator|::
name|clear
parameter_list|(
name|bool
name|deep
parameter_list|)
block|{
name|isNull
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|QSslSocket
operator|::
name|supportsSsl
argument_list|()
condition|)
return|return;
if|if
condition|(
name|algorithm
operator|==
name|QSsl
operator|::
name|Rsa
operator|&&
name|rsa
condition|)
block|{
if|if
condition|(
name|deep
condition|)
name|q_RSA_free
argument_list|(
name|rsa
argument_list|)
expr_stmt|;
name|rsa
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|algorithm
operator|==
name|QSsl
operator|::
name|Dsa
operator|&&
name|dsa
condition|)
block|{
if|if
condition|(
name|deep
condition|)
name|q_DSA_free
argument_list|(
name|dsa
argument_list|)
expr_stmt|;
name|dsa
operator|=
literal|0
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|OPENSSL_NO_EC
if|if
condition|(
name|algorithm
operator|==
name|QSsl
operator|::
name|Ec
operator|&&
name|ec
condition|)
block|{
if|if
condition|(
name|deep
condition|)
name|q_EC_KEY_free
argument_list|(
name|ec
argument_list|)
expr_stmt|;
name|ec
operator|=
literal|0
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
name|algorithm
operator|==
name|QSsl
operator|::
name|Opaque
operator|&&
name|opaque
condition|)
block|{
if|if
condition|(
name|deep
condition|)
name|q_EVP_PKEY_free
argument_list|(
name|opaque
argument_list|)
expr_stmt|;
name|opaque
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|fromEVP_PKEY
name|bool
name|QSslKeyPrivate
operator|::
name|fromEVP_PKEY
parameter_list|(
name|EVP_PKEY
modifier|*
name|pkey
parameter_list|)
block|{
if|if
condition|(
name|pkey
operator|->
name|type
operator|==
name|EVP_PKEY_RSA
condition|)
block|{
name|isNull
operator|=
literal|false
expr_stmt|;
name|algorithm
operator|=
name|QSsl
operator|::
name|Rsa
expr_stmt|;
name|type
operator|=
name|QSsl
operator|::
name|PrivateKey
expr_stmt|;
name|rsa
operator|=
name|q_RSA_new
argument_list|()
expr_stmt|;
name|memcpy
argument_list|(
name|rsa
argument_list|,
name|q_EVP_PKEY_get1_RSA
argument_list|(
name|pkey
argument_list|)
argument_list|,
sizeof|sizeof
argument_list|(
name|RSA
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|pkey
operator|->
name|type
operator|==
name|EVP_PKEY_DSA
condition|)
block|{
name|isNull
operator|=
literal|false
expr_stmt|;
name|algorithm
operator|=
name|QSsl
operator|::
name|Dsa
expr_stmt|;
name|type
operator|=
name|QSsl
operator|::
name|PrivateKey
expr_stmt|;
name|dsa
operator|=
name|q_DSA_new
argument_list|()
expr_stmt|;
name|memcpy
argument_list|(
name|dsa
argument_list|,
name|q_EVP_PKEY_get1_DSA
argument_list|(
name|pkey
argument_list|)
argument_list|,
sizeof|sizeof
argument_list|(
name|DSA
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
ifndef|#
directive|ifndef
name|OPENSSL_NO_EC
elseif|else
if|if
condition|(
name|pkey
operator|->
name|type
operator|==
name|EVP_PKEY_EC
condition|)
block|{
name|isNull
operator|=
literal|false
expr_stmt|;
name|algorithm
operator|=
name|QSsl
operator|::
name|Ec
expr_stmt|;
name|type
operator|=
name|QSsl
operator|::
name|PrivateKey
expr_stmt|;
name|ec
operator|=
name|q_EC_KEY_dup
argument_list|(
name|q_EVP_PKEY_get1_EC_KEY
argument_list|(
name|pkey
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
endif|#
directive|endif
else|else
block|{
comment|// Unknown key type. This could be handled as opaque, but then
comment|// we'd eventually leak memory since we wouldn't be able to free
comment|// the underlying EVP_PKEY structure. For now, we won't support
comment|// this.
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|decodeDer
name|void
name|QSslKeyPrivate
operator|::
name|decodeDer
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|der
parameter_list|,
name|bool
name|deepClear
parameter_list|)
block|{
name|QMap
argument_list|<
name|QByteArray
argument_list|,
name|QByteArray
argument_list|>
name|headers
decl_stmt|;
name|decodePem
argument_list|(
name|pemFromDer
argument_list|(
name|der
argument_list|,
name|headers
argument_list|)
argument_list|,
name|QByteArray
argument_list|()
argument_list|,
name|deepClear
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|decodePem
name|void
name|QSslKeyPrivate
operator|::
name|decodePem
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|pem
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|passPhrase
parameter_list|,
name|bool
name|deepClear
parameter_list|)
block|{
if|if
condition|(
name|pem
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|clear
argument_list|(
name|deepClear
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|QSslSocket
operator|::
name|supportsSsl
argument_list|()
condition|)
return|return;
name|BIO
modifier|*
name|bio
init|=
name|q_BIO_new_mem_buf
argument_list|(
cast|const_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
name|pem
operator|.
name|data
argument_list|()
argument_list|)
argument_list|,
name|pem
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|bio
condition|)
return|return;
name|void
modifier|*
name|phrase
init|=
cast|const_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
name|passPhrase
operator|.
name|constData
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|algorithm
operator|==
name|QSsl
operator|::
name|Rsa
condition|)
block|{
name|RSA
modifier|*
name|result
init|=
operator|(
name|type
operator|==
name|QSsl
operator|::
name|PublicKey
operator|)
condition|?
name|q_PEM_read_bio_RSA_PUBKEY
argument_list|(
name|bio
argument_list|,
operator|&
name|rsa
argument_list|,
literal|0
argument_list|,
name|phrase
argument_list|)
else|:
name|q_PEM_read_bio_RSAPrivateKey
argument_list|(
name|bio
argument_list|,
operator|&
name|rsa
argument_list|,
literal|0
argument_list|,
name|phrase
argument_list|)
decl_stmt|;
if|if
condition|(
name|rsa
operator|&&
name|rsa
operator|==
name|result
condition|)
name|isNull
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|algorithm
operator|==
name|QSsl
operator|::
name|Dsa
condition|)
block|{
name|DSA
modifier|*
name|result
init|=
operator|(
name|type
operator|==
name|QSsl
operator|::
name|PublicKey
operator|)
condition|?
name|q_PEM_read_bio_DSA_PUBKEY
argument_list|(
name|bio
argument_list|,
operator|&
name|dsa
argument_list|,
literal|0
argument_list|,
name|phrase
argument_list|)
else|:
name|q_PEM_read_bio_DSAPrivateKey
argument_list|(
name|bio
argument_list|,
operator|&
name|dsa
argument_list|,
literal|0
argument_list|,
name|phrase
argument_list|)
decl_stmt|;
if|if
condition|(
name|dsa
operator|&&
name|dsa
operator|==
name|result
condition|)
name|isNull
operator|=
literal|false
expr_stmt|;
ifndef|#
directive|ifndef
name|OPENSSL_NO_EC
block|}
elseif|else
if|if
condition|(
name|algorithm
operator|==
name|QSsl
operator|::
name|Ec
condition|)
block|{
name|EC_KEY
modifier|*
name|result
init|=
operator|(
name|type
operator|==
name|QSsl
operator|::
name|PublicKey
operator|)
condition|?
name|q_PEM_read_bio_EC_PUBKEY
argument_list|(
name|bio
argument_list|,
operator|&
name|ec
argument_list|,
literal|0
argument_list|,
name|phrase
argument_list|)
else|:
name|q_PEM_read_bio_ECPrivateKey
argument_list|(
name|bio
argument_list|,
operator|&
name|ec
argument_list|,
literal|0
argument_list|,
name|phrase
argument_list|)
decl_stmt|;
if|if
condition|(
name|ec
operator|&&
name|ec
operator|==
name|result
condition|)
name|isNull
operator|=
literal|false
expr_stmt|;
endif|#
directive|endif
block|}
name|q_BIO_free
argument_list|(
name|bio
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|length
name|int
name|QSslKeyPrivate
operator|::
name|length
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|isNull
operator|||
name|algorithm
operator|==
name|QSsl
operator|::
name|Opaque
condition|)
return|return
operator|-
literal|1
return|;
switch|switch
condition|(
name|algorithm
condition|)
block|{
case|case
name|QSsl
operator|::
name|Rsa
case|:
return|return
name|q_BN_num_bits
argument_list|(
name|rsa
operator|->
name|n
argument_list|)
return|;
case|case
name|QSsl
operator|::
name|Dsa
case|:
return|return
name|q_BN_num_bits
argument_list|(
name|dsa
operator|->
name|p
argument_list|)
return|;
ifndef|#
directive|ifndef
name|OPENSSL_NO_EC
case|case
name|QSsl
operator|::
name|Ec
case|:
return|return
name|q_EC_GROUP_get_degree
argument_list|(
name|q_EC_KEY_get0_group
argument_list|(
name|ec
argument_list|)
argument_list|)
return|;
endif|#
directive|endif
default|default:
return|return
operator|-
literal|1
return|;
block|}
block|}
end_function
begin_function
DECL|function|toPem
name|QByteArray
name|QSslKeyPrivate
operator|::
name|toPem
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|passPhrase
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|QSslSocket
operator|::
name|supportsSsl
argument_list|()
operator|||
name|isNull
operator|||
name|algorithm
operator|==
name|QSsl
operator|::
name|Opaque
condition|)
return|return
name|QByteArray
argument_list|()
return|;
name|BIO
modifier|*
name|bio
init|=
name|q_BIO_new
argument_list|(
name|q_BIO_s_mem
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|bio
condition|)
return|return
name|QByteArray
argument_list|()
return|;
name|bool
name|fail
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|algorithm
operator|==
name|QSsl
operator|::
name|Rsa
condition|)
block|{
if|if
condition|(
name|type
operator|==
name|QSsl
operator|::
name|PublicKey
condition|)
block|{
if|if
condition|(
operator|!
name|q_PEM_write_bio_RSA_PUBKEY
argument_list|(
name|bio
argument_list|,
name|rsa
argument_list|)
condition|)
name|fail
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|q_PEM_write_bio_RSAPrivateKey
argument_list|(
name|bio
argument_list|,
name|rsa
argument_list|,
comment|// ### the cipher should be selectable in the API:
name|passPhrase
operator|.
name|isEmpty
argument_list|()
condition|?
operator|(
specifier|const
name|EVP_CIPHER
operator|*
operator|)
literal|0
else|:
name|q_EVP_des_ede3_cbc
argument_list|()
argument_list|,
cast|const_cast
argument_list|<
name|uchar
operator|*
argument_list|>
argument_list|(
operator|(
specifier|const
name|uchar
operator|*
operator|)
name|passPhrase
operator|.
name|data
argument_list|()
argument_list|)
argument_list|,
name|passPhrase
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
condition|)
block|{
name|fail
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|algorithm
operator|==
name|QSsl
operator|::
name|Dsa
condition|)
block|{
if|if
condition|(
name|type
operator|==
name|QSsl
operator|::
name|PublicKey
condition|)
block|{
if|if
condition|(
operator|!
name|q_PEM_write_bio_DSA_PUBKEY
argument_list|(
name|bio
argument_list|,
name|dsa
argument_list|)
condition|)
name|fail
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|q_PEM_write_bio_DSAPrivateKey
argument_list|(
name|bio
argument_list|,
name|dsa
argument_list|,
comment|// ### the cipher should be selectable in the API:
name|passPhrase
operator|.
name|isEmpty
argument_list|()
condition|?
operator|(
specifier|const
name|EVP_CIPHER
operator|*
operator|)
literal|0
else|:
name|q_EVP_des_ede3_cbc
argument_list|()
argument_list|,
cast|const_cast
argument_list|<
name|uchar
operator|*
argument_list|>
argument_list|(
operator|(
specifier|const
name|uchar
operator|*
operator|)
name|passPhrase
operator|.
name|data
argument_list|()
argument_list|)
argument_list|,
name|passPhrase
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
condition|)
block|{
name|fail
operator|=
literal|true
expr_stmt|;
block|}
block|}
ifndef|#
directive|ifndef
name|OPENSSL_NO_EC
block|}
elseif|else
if|if
condition|(
name|algorithm
operator|==
name|QSsl
operator|::
name|Ec
condition|)
block|{
if|if
condition|(
name|type
operator|==
name|QSsl
operator|::
name|PublicKey
condition|)
block|{
if|if
condition|(
operator|!
name|q_PEM_write_bio_EC_PUBKEY
argument_list|(
name|bio
argument_list|,
name|ec
argument_list|)
condition|)
name|fail
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|q_PEM_write_bio_ECPrivateKey
argument_list|(
name|bio
argument_list|,
name|ec
argument_list|,
comment|// ### the cipher should be selectable in the API:
name|passPhrase
operator|.
name|isEmpty
argument_list|()
condition|?
operator|(
specifier|const
name|EVP_CIPHER
operator|*
operator|)
literal|0
else|:
name|q_EVP_des_ede3_cbc
argument_list|()
argument_list|,
cast|const_cast
argument_list|<
name|uchar
operator|*
argument_list|>
argument_list|(
operator|(
specifier|const
name|uchar
operator|*
operator|)
name|passPhrase
operator|.
name|data
argument_list|()
argument_list|)
argument_list|,
name|passPhrase
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
condition|)
block|{
name|fail
operator|=
literal|true
expr_stmt|;
block|}
block|}
endif|#
directive|endif
block|}
else|else
block|{
name|fail
operator|=
literal|true
expr_stmt|;
block|}
name|QByteArray
name|pem
decl_stmt|;
if|if
condition|(
operator|!
name|fail
condition|)
block|{
name|char
modifier|*
name|data
decl_stmt|;
name|long
name|size
init|=
name|q_BIO_get_mem_data
argument_list|(
name|bio
argument_list|,
operator|&
name|data
argument_list|)
decl_stmt|;
name|pem
operator|=
name|QByteArray
argument_list|(
name|data
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
name|q_BIO_free
argument_list|(
name|bio
argument_list|)
expr_stmt|;
return|return
name|pem
return|;
block|}
end_function
begin_function
DECL|function|handle
name|Qt
operator|::
name|HANDLE
name|QSslKeyPrivate
operator|::
name|handle
parameter_list|()
specifier|const
block|{
switch|switch
condition|(
name|algorithm
condition|)
block|{
case|case
name|QSsl
operator|::
name|Opaque
case|:
return|return
name|Qt
operator|::
name|HANDLE
argument_list|(
name|opaque
argument_list|)
return|;
case|case
name|QSsl
operator|::
name|Rsa
case|:
return|return
name|Qt
operator|::
name|HANDLE
argument_list|(
name|rsa
argument_list|)
return|;
case|case
name|QSsl
operator|::
name|Dsa
case|:
return|return
name|Qt
operator|::
name|HANDLE
argument_list|(
name|dsa
argument_list|)
return|;
ifndef|#
directive|ifndef
name|OPENSSL_NO_EC
case|case
name|QSsl
operator|::
name|Ec
case|:
return|return
name|Qt
operator|::
name|HANDLE
argument_list|(
name|ec
argument_list|)
return|;
endif|#
directive|endif
default|default:
return|return
name|Qt
operator|::
name|HANDLE
argument_list|(
name|NULL
argument_list|)
return|;
block|}
block|}
end_function
begin_function
DECL|function|doCrypt
specifier|static
name|QByteArray
name|doCrypt
parameter_list|(
name|QSslKeyPrivate
operator|::
name|Cipher
name|cipher
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|data
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|key
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|iv
parameter_list|,
name|int
name|enc
parameter_list|)
block|{
name|EVP_CIPHER_CTX
name|ctx
decl_stmt|;
specifier|const
name|EVP_CIPHER
modifier|*
name|type
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|,
name|len
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|cipher
condition|)
block|{
case|case
name|QSslKeyPrivate
operator|::
name|DesCbc
case|:
name|type
operator|=
name|q_EVP_des_cbc
argument_list|()
expr_stmt|;
break|break;
case|case
name|QSslKeyPrivate
operator|::
name|DesEde3Cbc
case|:
name|type
operator|=
name|q_EVP_des_ede3_cbc
argument_list|()
expr_stmt|;
break|break;
case|case
name|QSslKeyPrivate
operator|::
name|Rc2Cbc
case|:
name|type
operator|=
name|q_EVP_rc2_cbc
argument_list|()
expr_stmt|;
break|break;
block|}
name|QByteArray
name|output
decl_stmt|;
name|output
operator|.
name|resize
argument_list|(
name|data
operator|.
name|size
argument_list|()
operator|+
name|EVP_MAX_BLOCK_LENGTH
argument_list|)
expr_stmt|;
name|q_EVP_CIPHER_CTX_init
argument_list|(
operator|&
name|ctx
argument_list|)
expr_stmt|;
name|q_EVP_CipherInit
argument_list|(
operator|&
name|ctx
argument_list|,
name|type
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|,
name|enc
argument_list|)
expr_stmt|;
name|q_EVP_CIPHER_CTX_set_key_length
argument_list|(
operator|&
name|ctx
argument_list|,
name|key
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cipher
operator|==
name|QSslKeyPrivate
operator|::
name|Rc2Cbc
condition|)
name|q_EVP_CIPHER_CTX_ctrl
argument_list|(
operator|&
name|ctx
argument_list|,
name|EVP_CTRL_SET_RC2_KEY_BITS
argument_list|,
literal|8
operator|*
name|key
operator|.
name|size
argument_list|()
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|q_EVP_CipherInit
argument_list|(
operator|&
name|ctx
argument_list|,
name|NULL
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|unsigned
name|char
operator|*
argument_list|>
argument_list|(
name|key
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|unsigned
name|char
operator|*
argument_list|>
argument_list|(
name|iv
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|,
name|enc
argument_list|)
expr_stmt|;
name|q_EVP_CipherUpdate
argument_list|(
operator|&
name|ctx
argument_list|,
cast|reinterpret_cast
argument_list|<
name|unsigned
name|char
operator|*
argument_list|>
argument_list|(
name|output
operator|.
name|data
argument_list|()
argument_list|)
argument_list|,
operator|&
name|len
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|unsigned
name|char
operator|*
argument_list|>
argument_list|(
name|data
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|,
name|data
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|q_EVP_CipherFinal
argument_list|(
operator|&
name|ctx
argument_list|,
cast|reinterpret_cast
argument_list|<
name|unsigned
name|char
operator|*
argument_list|>
argument_list|(
name|output
operator|.
name|data
argument_list|()
argument_list|)
operator|+
name|len
argument_list|,
operator|&
name|i
argument_list|)
expr_stmt|;
name|len
operator|+=
name|i
expr_stmt|;
name|q_EVP_CIPHER_CTX_cleanup
argument_list|(
operator|&
name|ctx
argument_list|)
expr_stmt|;
return|return
name|output
operator|.
name|left
argument_list|(
name|len
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|decrypt
name|QByteArray
name|QSslKeyPrivate
operator|::
name|decrypt
parameter_list|(
name|Cipher
name|cipher
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|data
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|key
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|iv
parameter_list|)
block|{
return|return
name|doCrypt
argument_list|(
name|cipher
argument_list|,
name|data
argument_list|,
name|key
argument_list|,
name|iv
argument_list|,
literal|0
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|encrypt
name|QByteArray
name|QSslKeyPrivate
operator|::
name|encrypt
parameter_list|(
name|Cipher
name|cipher
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|data
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|key
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|iv
parameter_list|)
block|{
return|return
name|doCrypt
argument_list|(
name|cipher
argument_list|,
name|data
argument_list|,
name|key
argument_list|,
name|iv
argument_list|,
literal|1
argument_list|)
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
