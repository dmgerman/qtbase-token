begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Richard J. Moore<rich@kde.org> ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtNetwork module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia. For licensing terms and ** conditions see http://qt.digia.com/licensing. For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights. These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|/*!     \class QSslCertificateExtension     \brief The QSslCertificateExtension class provides an API for accessing the     extensions of an X509 certificate.     \since 5.0      \reentrant     \ingroup network     \ingroup ssl     \ingroup shared     \inmodule QtNetwork      QSslCertificateExtension provides access to an extension stored in     an X509 certificate. The information available depends on the type     of extension being accessed.      All X509 certificate extensions have the following properties:      \table     \header        \li Property        \li Description     \row        \li name        \li The human readable name of the extension, eg. 'basicConstraints'.     \row        \li criticality        \li This is a boolean value indicating if the extension is critical           to correctly interpreting the certificate.     \row        \li oid        \li The ASN.1 object identifier that specifies which extension this           is.     \row        \li supported        \li If this is true the structure of the extension's value will not           change between Qt versions.     \row        \li value        \li A QVariant with a structure dependent on the type of extension.     \endtable      Whilst this class provides access to any type of extension, only     some are guaranteed to be returned in a format that will remain     unchanged between releases. The isSupported() method returns \c true     for extensions where this is the case.      The extensions currently supported, and the structure of the value     returned are as follows:      \table     \header        \li Name        \li OID        \li Details     \row        \li basicConstraints        \li 2.5.29.19        \li Returned as a QVariantMap. The key 'ca' contains a boolean value,           the optional key 'pathLenConstraint' contains an integer.     \row        \li authorityInfoAccess        \li 1.3.6.1.5.5.7.1.1        \li Returned as a QVariantMap. There is a key for each access method,           with the value being a URI.     \row        \li subjectKeyIdentifier        \li 2.5.29.14        \li Returned as a QVariant containing a QString. The string is the key           identifier.     \row        \li authorityKeyIdentifier        \li 2.5.29.35        \li Returned as a QVariantMap. The optional key 'keyid' contains the key           identifier as a hex string stored in a QByteArray. The optional key           'serial' contains the authority key serial number as a qlonglong.           Currently there is no support for the general names field of this           extension.     \endtable      In addition to the supported extensions above, many other common extensions     will be returned in a reasonably structured way. Extensions that the SSL     backend has no support for at all will be returned as a QByteArray.      Further information about the types of extensions certificates can     contain can be found in RFC 5280.      \sa QSslCertificate::extensions()  */
end_comment
begin_include
include|#
directive|include
file|"qsslcertificateextension.h"
end_include
begin_include
include|#
directive|include
file|"qsslcertificateextension_p.h"
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_comment
comment|/*!     Constructs a QSslCertificateExtension.  */
end_comment
begin_constructor
DECL|function|QSslCertificateExtension
name|QSslCertificateExtension
operator|::
name|QSslCertificateExtension
parameter_list|()
member_init_list|:
name|d
argument_list|(
operator|new
name|QSslCertificateExtensionPrivate
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Constructs a copy of \a other.  */
end_comment
begin_constructor
DECL|function|QSslCertificateExtension
name|QSslCertificateExtension
operator|::
name|QSslCertificateExtension
parameter_list|(
specifier|const
name|QSslCertificateExtension
modifier|&
name|other
parameter_list|)
member_init_list|:
name|d
argument_list|(
name|other
operator|.
name|d
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Destroys the extension.  */
end_comment
begin_destructor
DECL|function|~QSslCertificateExtension
name|QSslCertificateExtension
operator|::
name|~
name|QSslCertificateExtension
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     Assigns \a other to this extension and returns a reference to this extension.  */
end_comment
begin_function
DECL|function|operator =
name|QSslCertificateExtension
modifier|&
name|QSslCertificateExtension
operator|::
name|operator
name|=
parameter_list|(
specifier|const
name|QSslCertificateExtension
modifier|&
name|other
parameter_list|)
block|{
name|d
operator|=
name|other
operator|.
name|d
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_function
begin_comment
comment|/*!     \fn void QSslCertificateExtension::swap(QSslCertificateExtension&other)      Swaps this certificate extension instance with \a other. This     function is very fast and never fails. */
end_comment
begin_comment
comment|/*!     Returns the ASN.1 OID of this extension.  */
end_comment
begin_function
DECL|function|oid
name|QString
name|QSslCertificateExtension
operator|::
name|oid
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|oid
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the name of the extension. If no name is known for the     extension then the OID will be returned.  */
end_comment
begin_function
DECL|function|name
name|QString
name|QSslCertificateExtension
operator|::
name|name
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|name
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the value of the extension. The structure of the value     returned depends on the extension type.  */
end_comment
begin_function
DECL|function|value
name|QVariant
name|QSslCertificateExtension
operator|::
name|value
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|value
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the criticality of the extension.  */
end_comment
begin_function
DECL|function|isCritical
name|bool
name|QSslCertificateExtension
operator|::
name|isCritical
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|critical
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the true if this extension is supported. In this case,     supported simply means that the structure of the QVariant returned     by the value() accessor will remain unchanged between versions.     Unsupported extensions can be freely used, however there is no     guarantee that the returned data will have the same structure     between versions.  */
end_comment
begin_function
DECL|function|isSupported
name|bool
name|QSslCertificateExtension
operator|::
name|isSupported
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|supported
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
