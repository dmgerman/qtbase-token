begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Governikus GmbH& Co. KG. ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtNetwork module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qsslellipticcurve.h"
end_include
begin_include
include|#
directive|include
file|"qsslsocket_p.h"
end_include
begin_include
include|#
directive|include
file|"qsslsocket_openssl_symbols_p.h"
end_include
begin_include
include|#
directive|include
file|<openssl/ssl.h>
end_include
begin_include
include|#
directive|include
file|<openssl/obj_mac.h>
end_include
begin_include
include|#
directive|include
file|<algorithm>
end_include
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|shortName
name|QString
name|QSslEllipticCurve
operator|::
name|shortName
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|id
operator|==
literal|0
condition|)
return|return
name|QString
argument_list|()
return|;
name|QString
name|result
decl_stmt|;
ifndef|#
directive|ifndef
name|OPENSSL_NO_EC
name|result
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
name|q_OBJ_nid2sn
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|longName
name|QString
name|QSslEllipticCurve
operator|::
name|longName
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|id
operator|==
literal|0
condition|)
return|return
name|QString
argument_list|()
return|;
name|QString
name|result
decl_stmt|;
ifndef|#
directive|ifndef
name|OPENSSL_NO_EC
name|result
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
name|q_OBJ_nid2ln
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|fromShortName
name|QSslEllipticCurve
name|QSslEllipticCurve
operator|::
name|fromShortName
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|QSslEllipticCurve
argument_list|()
return|;
name|QSslSocketPrivate
operator|::
name|ensureInitialized
argument_list|()
expr_stmt|;
name|QSslEllipticCurve
name|result
decl_stmt|;
ifndef|#
directive|ifndef
name|OPENSSL_NO_EC
specifier|const
name|QByteArray
name|curveNameLatin1
init|=
name|name
operator|.
name|toLatin1
argument_list|()
decl_stmt|;
name|int
name|nid
init|=
name|q_OBJ_sn2nid
argument_list|(
name|curveNameLatin1
operator|.
name|data
argument_list|()
argument_list|)
decl_stmt|;
if|#
directive|if
name|OPENSSL_VERSION_NUMBER
operator|>=
literal|0x10002000L
if|if
condition|(
name|nid
operator|==
literal|0
operator|&&
name|q_SSLeay
argument_list|()
operator|>=
literal|0x10002000L
condition|)
name|nid
operator|=
name|q_EC_curve_nist2nid
argument_list|(
name|curveNameLatin1
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// OPENSSL_VERSION_NUMBER>= 0x10002000L
name|result
operator|.
name|id
operator|=
name|nid
expr_stmt|;
endif|#
directive|endif
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|fromLongName
name|QSslEllipticCurve
name|QSslEllipticCurve
operator|::
name|fromLongName
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|QSslEllipticCurve
argument_list|()
return|;
name|QSslSocketPrivate
operator|::
name|ensureInitialized
argument_list|()
expr_stmt|;
name|QSslEllipticCurve
name|result
decl_stmt|;
ifndef|#
directive|ifndef
name|OPENSSL_NO_EC
specifier|const
name|QByteArray
name|curveNameLatin1
init|=
name|name
operator|.
name|toLatin1
argument_list|()
decl_stmt|;
name|int
name|nid
init|=
name|q_OBJ_ln2nid
argument_list|(
name|curveNameLatin1
operator|.
name|data
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|.
name|id
operator|=
name|nid
expr_stmt|;
endif|#
directive|endif
return|return
name|result
return|;
block|}
end_function
begin_comment
comment|// The brainpool curve NIDs (RFC 7027) have been introduced in OpenSSL 1.0.2,
end_comment
begin_comment
comment|// redefine them here to make Qt compile with previous versions of OpenSSL
end_comment
begin_comment
comment|// (yet correctly recognize them as TLS named curves).
end_comment
begin_comment
comment|// See crypto/objects/obj_mac.h
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|NID_brainpoolP256r1
end_ifndef
begin_define
DECL|macro|NID_brainpoolP256r1
define|#
directive|define
name|NID_brainpoolP256r1
value|927
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|NID_brainpoolP384r1
end_ifndef
begin_define
DECL|macro|NID_brainpoolP384r1
define|#
directive|define
name|NID_brainpoolP384r1
value|931
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|NID_brainpoolP512r1
end_ifndef
begin_define
DECL|macro|NID_brainpoolP512r1
define|#
directive|define
name|NID_brainpoolP512r1
value|933
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// NIDs of named curves allowed in TLS as per RFCs 4492 and 7027,
end_comment
begin_comment
comment|// see also https://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml#tls-parameters-8
end_comment
begin_decl_stmt
DECL|variable|tlsNamedCurveNIDs
specifier|static
specifier|const
name|int
name|tlsNamedCurveNIDs
index|[]
init|=
block|{
comment|// RFC 4492
name|NID_sect163k1
block|,
name|NID_sect163r1
block|,
name|NID_sect163r2
block|,
name|NID_sect193r1
block|,
name|NID_sect193r2
block|,
name|NID_sect233k1
block|,
name|NID_sect233r1
block|,
name|NID_sect239k1
block|,
name|NID_sect283k1
block|,
name|NID_sect283r1
block|,
name|NID_sect409k1
block|,
name|NID_sect409r1
block|,
name|NID_sect571k1
block|,
name|NID_sect571r1
block|,
name|NID_secp160k1
block|,
name|NID_secp160r1
block|,
name|NID_secp160r2
block|,
name|NID_secp192k1
block|,
name|NID_X9_62_prime192v1
block|,
comment|// secp192r1
name|NID_secp224k1
block|,
name|NID_secp224r1
block|,
name|NID_secp256k1
block|,
name|NID_X9_62_prime256v1
block|,
comment|// secp256r1
name|NID_secp384r1
block|,
name|NID_secp521r1
block|,
comment|// RFC 7027
name|NID_brainpoolP256r1
block|,
name|NID_brainpoolP384r1
block|,
name|NID_brainpoolP512r1
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|tlsNamedCurveNIDCount
specifier|static
specifier|const
name|size_t
name|tlsNamedCurveNIDCount
init|=
sizeof|sizeof
argument_list|(
name|tlsNamedCurveNIDs
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|tlsNamedCurveNIDs
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
end_decl_stmt
begin_function
name|bool
name|QSslEllipticCurve
operator|::
name|isTlsNamedCurve
parameter_list|()
specifier|const
name|Q_DECL_NOTHROW
block|{
specifier|const
name|int
modifier|*
specifier|const
name|tlsNamedCurveNIDsEnd
init|=
name|tlsNamedCurveNIDs
operator|+
name|tlsNamedCurveNIDCount
decl_stmt|;
return|return
name|std
operator|::
name|find
argument_list|(
name|tlsNamedCurveNIDs
argument_list|,
name|tlsNamedCurveNIDsEnd
argument_list|,
name|id
argument_list|)
operator|!=
name|tlsNamedCurveNIDsEnd
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
