begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtNetwork module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia. For licensing terms and ** conditions see http://qt.digia.com/licensing. For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights. These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QSSLCERTIFICATE_OPENSSL_P_H
end_ifndef
begin_define
DECL|macro|QSSLCERTIFICATE_OPENSSL_P_H
define|#
directive|define
name|QSSLCERTIFICATE_OPENSSL_P_H
end_define
begin_include
include|#
directive|include
file|"qsslcertificate.h"
end_include
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists for the convenience
end_comment
begin_comment
comment|// of the QLibrary class.  This header file may change from
end_comment
begin_comment
comment|// version to version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"qsslsocket_p.h"
end_include
begin_include
include|#
directive|include
file|"qsslcertificateextension.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/qdatetime.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qmap.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_OPENSSL
end_ifndef
begin_include
include|#
directive|include
file|<openssl/x509.h>
end_include
begin_else
else|#
directive|else
end_else
begin_struct_decl
struct_decl|struct
name|X509
struct_decl|;
end_struct_decl
begin_struct_decl
struct_decl|struct
name|X509_EXTENSION
struct_decl|;
end_struct_decl
begin_struct_decl
struct_decl|struct
name|ASN1_OBJECT
struct_decl|;
end_struct_decl
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_WINRT
end_ifdef
begin_include
include|#
directive|include
file|<wrl.h>
end_include
begin_include
include|#
directive|include
file|<windows.security.cryptography.certificates.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
comment|// forward declaration
name|class
name|QSslCertificatePrivate
block|{
name|public
label|:
name|QSslCertificatePrivate
argument_list|()
operator|:
name|null
argument_list|(
name|true
argument_list|)
operator|,
name|x509
argument_list|(
literal|0
argument_list|)
block|{
name|QSslSocketPrivate
operator|::
name|ensureInitialized
argument_list|()
block|;     }
operator|~
name|QSslCertificatePrivate
argument_list|()
block|{
ifndef|#
directive|ifndef
name|QT_NO_OPENSSL
if|if
condition|(
name|x509
condition|)
name|q_X509_free
argument_list|(
name|x509
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
name|bool
name|null
decl_stmt|;
name|QByteArray
name|versionString
decl_stmt|;
name|QByteArray
name|serialNumberString
decl_stmt|;
name|QMap
operator|<
name|QByteArray
operator|,
name|QString
operator|>
name|issuerInfo
expr_stmt|;
name|QMap
operator|<
name|QByteArray
operator|,
name|QString
operator|>
name|subjectInfo
expr_stmt|;
name|QDateTime
name|notValidAfter
decl_stmt|;
name|QDateTime
name|notValidBefore
decl_stmt|;
ifdef|#
directive|ifdef
name|QT_NO_OPENSSL
name|bool
name|subjectMatchesIssuer
decl_stmt|;
name|QSsl
operator|::
name|KeyAlgorithm
name|publicKeyAlgorithm
expr_stmt|;
name|QByteArray
name|publicKeyDerData
decl_stmt|;
name|QMultiMap
operator|<
name|QSsl
operator|::
name|AlternativeNameEntryType
operator|,
name|QString
operator|>
name|subjectAlternativeNames
expr_stmt|;
name|QList
operator|<
name|QSslCertificateExtension
operator|>
name|extensions
expr_stmt|;
name|QByteArray
name|derData
decl_stmt|;
name|bool
name|parse
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|data
parameter_list|)
function_decl|;
name|bool
name|parseExtension
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|data
parameter_list|,
name|QSslCertificateExtension
modifier|*
name|extension
parameter_list|)
function_decl|;
endif|#
directive|endif
name|X509
modifier|*
name|x509
decl_stmt|;
name|void
name|init
argument_list|(
specifier|const
name|QByteArray
operator|&
name|data
argument_list|,
name|QSsl
operator|::
name|EncodingFormat
name|format
argument_list|)
decl_stmt|;
specifier|static
name|QByteArray
name|asn1ObjectId
parameter_list|(
name|ASN1_OBJECT
modifier|*
name|object
parameter_list|)
function_decl|;
specifier|static
name|QByteArray
name|asn1ObjectName
parameter_list|(
name|ASN1_OBJECT
modifier|*
name|object
parameter_list|)
function_decl|;
specifier|static
name|QByteArray
name|QByteArray_from_X509
argument_list|(
name|X509
operator|*
name|x509
argument_list|,
name|QSsl
operator|::
name|EncodingFormat
name|format
argument_list|)
decl_stmt|;
specifier|static
name|QString
name|text_from_X509
parameter_list|(
name|X509
modifier|*
name|x509
parameter_list|)
function_decl|;
specifier|static
name|QSslCertificate
name|QSslCertificate_from_X509
parameter_list|(
name|X509
modifier|*
name|x509
parameter_list|)
function_decl|;
specifier|static
name|QList
operator|<
name|QSslCertificate
operator|>
name|certificatesFromPem
argument_list|(
argument|const QByteArray&pem
argument_list|,
argument|int count = -
literal|1
argument_list|)
expr_stmt|;
specifier|static
name|QList
operator|<
name|QSslCertificate
operator|>
name|certificatesFromDer
argument_list|(
argument|const QByteArray&der
argument_list|,
argument|int count = -
literal|1
argument_list|)
expr_stmt|;
specifier|static
name|bool
name|isBlacklisted
parameter_list|(
specifier|const
name|QSslCertificate
modifier|&
name|certificate
parameter_list|)
function_decl|;
specifier|static
name|QSslCertificateExtension
name|convertExtension
parameter_list|(
name|X509_EXTENSION
modifier|*
name|ext
parameter_list|)
function_decl|;
specifier|static
name|QByteArray
name|subjectInfoToString
argument_list|(
name|QSslCertificate
operator|::
name|SubjectInfo
name|info
argument_list|)
decl_stmt|;
name|friend
name|class
name|QSslSocketBackendPrivate
decl_stmt|;
name|QAtomicInt
name|ref
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WINRT
name|Microsoft
operator|::
name|WRL
operator|::
name|ComPtr
operator|<
name|ABI
operator|::
name|Windows
operator|::
name|Security
operator|::
name|Cryptography
operator|::
name|Certificates
operator|::
name|ICertificate
operator|>
name|certificate
expr_stmt|;
specifier|static
name|QSslCertificate
name|QSslCertificate_from_Certificate
argument_list|(
name|ABI
operator|::
name|Windows
operator|::
name|Security
operator|::
name|Cryptography
operator|::
name|Certificates
operator|::
name|ICertificate
operator|*
name|iCertificate
argument_list|)
decl_stmt|;
endif|#
directive|endif
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QSSLCERTIFICATE_OPENSSL_P_H
end_comment
end_unit
