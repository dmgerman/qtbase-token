begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the QtNetwork module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QSSLERROR_H
end_ifndef
begin_define
DECL|macro|QSSLERROR_H
define|#
directive|define
name|QSSLERROR_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qvariant.h>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/qsslcertificate.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
ifndef|#
directive|ifndef
name|QT_NO_SSL
DECL|variable|QSslErrorPrivate
name|class
name|QSslErrorPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_NETWORK_EXPORT
name|QSslError
block|{
name|public
label|:
enum|enum
name|SslError
block|{
name|NoError
block|,
name|UnableToGetIssuerCertificate
block|,
name|UnableToDecryptCertificateSignature
block|,
name|UnableToDecodeIssuerPublicKey
block|,
name|CertificateSignatureFailed
block|,
name|CertificateNotYetValid
block|,
name|CertificateExpired
block|,
name|InvalidNotBeforeField
block|,
name|InvalidNotAfterField
block|,
name|SelfSignedCertificate
block|,
name|SelfSignedCertificateInChain
block|,
name|UnableToGetLocalIssuerCertificate
block|,
name|UnableToVerifyFirstCertificate
block|,
name|CertificateRevoked
block|,
name|InvalidCaCertificate
block|,
name|PathLengthExceeded
block|,
name|InvalidPurpose
block|,
name|CertificateUntrusted
block|,
name|CertificateRejected
block|,
name|SubjectIssuerMismatch
block|,
comment|// hostname mismatch?
name|AuthorityIssuerSerialNumberMismatch
block|,
name|NoPeerCertificate
block|,
name|HostNameMismatch
block|,
name|NoSslSupport
block|,
name|CertificateBlacklisted
block|,
name|UnspecifiedError
init|=
operator|-
literal|1
block|}
enum|;
comment|// RVCT compiler in debug build does not like about default values in const-
comment|// So as an workaround we define all constructor overloads here explicitly
name|QSslError
argument_list|()
expr_stmt|;
name|QSslError
argument_list|(
argument|SslError error
argument_list|)
empty_stmt|;
name|QSslError
argument_list|(
argument|SslError error
argument_list|,
argument|const QSslCertificate&certificate
argument_list|)
empty_stmt|;
name|QSslError
argument_list|(
specifier|const
name|QSslError
operator|&
name|other
argument_list|)
expr_stmt|;
name|void
name|swap
parameter_list|(
name|QSslError
modifier|&
name|other
parameter_list|)
function|Q_DECL_NOTHROW
block|{
name|qSwap
argument_list|(
name|d
argument_list|,
name|other
operator|.
name|d
argument_list|)
expr_stmt|;
block|}
operator|~
name|QSslError
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_COMPILER_RVALUE_REFS
name|QSslError
modifier|&
name|operator
init|=
operator|(
name|QSslError
operator|&&
name|other
operator|)
name|Q_DECL_NOTHROW
block|{
name|swap
argument_list|(
name|other
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
endif|#
directive|endif
name|QSslError
modifier|&
name|operator
init|=
operator|(
specifier|const
name|QSslError
operator|&
name|other
operator|)
decl_stmt|;
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QSslError
operator|&
name|other
operator|)
specifier|const
expr_stmt|;
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|QSslError
operator|&
name|other
operator|)
specifier|const
block|{
return|return
operator|!
operator|(
operator|*
name|this
operator|==
name|other
operator|)
return|;
block|}
name|SslError
name|error
argument_list|()
specifier|const
expr_stmt|;
name|QString
name|errorString
argument_list|()
specifier|const
expr_stmt|;
name|QSslCertificate
name|certificate
argument_list|()
specifier|const
expr_stmt|;
name|private
label|:
name|QScopedPointer
operator|<
name|QSslErrorPrivate
operator|>
name|d
expr_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_macro
name|Q_DECLARE_SHARED
argument_list|(
argument|QSslError
argument_list|)
end_macro
begin_decl_stmt
name|Q_NETWORK_EXPORT
name|uint
name|qHash
argument_list|(
specifier|const
name|QSslError
operator|&
name|key
argument_list|,
name|uint
name|seed
operator|=
literal|0
argument_list|)
name|Q_DECL_NOTHROW
decl_stmt|;
end_decl_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DEBUG_STREAM
end_ifndef
begin_decl_stmt
DECL|variable|QDebug
name|class
name|QDebug
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|Q_NETWORK_EXPORT
name|QDebug
name|operator
operator|<<
operator|(
name|QDebug
name|debug
operator|,
specifier|const
name|QSslError
operator|&
name|error
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_NETWORK_EXPORT
name|QDebug
name|operator
operator|<<
operator|(
name|QDebug
name|debug
operator|,
specifier|const
name|QSslError
operator|::
name|SslError
operator|&
name|error
operator|)
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_SSL
end_comment
begin_decl_stmt
name|QT_END_NAMESPACE
ifndef|#
directive|ifndef
name|QT_NO_SSL
name|Q_DECLARE_METATYPE
argument_list|(
name|QList
operator|<
name|QSslError
operator|>
argument_list|)
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
end_unit
