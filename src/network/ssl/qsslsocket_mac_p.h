begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Jeremy LainÃ©<jeremy.laine@m4x.org> ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtNetwork module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QSSLSOCKET_MAC_P_H
end_ifndef
begin_define
DECL|macro|QSSLSOCKET_MAC_P_H
define|#
directive|define
name|QSSLSOCKET_MAC_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists for the convenience
end_comment
begin_comment
comment|// of the QtNetwork library.  This header file may change from
end_comment
begin_comment
comment|// version to version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|<QtCore/private/qcore_mac_p.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qstring.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qglobal.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qlist.h>
end_include
begin_include
include|#
directive|include
file|"qabstractsocket.h"
end_include
begin_include
include|#
directive|include
file|"qsslsocket_p.h"
end_include
begin_include
include|#
directive|include
file|<Security/Security.h>
end_include
begin_include
include|#
directive|include
file|<Security/SecureTransport.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
name|class
name|QSslSocketBackendPrivate
range|:
name|public
name|QSslSocketPrivate
block|{
name|Q_DECLARE_PUBLIC
argument_list|(
argument|QSslSocket
argument_list|)
name|public
operator|:
name|QSslSocketBackendPrivate
argument_list|()
block|;
name|virtual
operator|~
name|QSslSocketBackendPrivate
argument_list|()
block|;
comment|// Final-overriders (QSslSocketPrivate):
name|void
name|continueHandshake
argument_list|()
name|Q_DECL_OVERRIDE
block|;
name|void
name|disconnected
argument_list|()
name|Q_DECL_OVERRIDE
block|;
name|void
name|disconnectFromHost
argument_list|()
name|Q_DECL_OVERRIDE
block|;
name|QSslCipher
name|sessionCipher
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|;
name|QSsl
operator|::
name|SslProtocol
name|sessionProtocol
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|;
name|void
name|startClientEncryption
argument_list|()
name|Q_DECL_OVERRIDE
block|;
name|void
name|startServerEncryption
argument_list|()
name|Q_DECL_OVERRIDE
block|;
name|void
name|transmit
argument_list|()
name|Q_DECL_OVERRIDE
block|;
specifier|static
name|QList
operator|<
name|QSslError
operator|>
call|(
name|verify
call|)
argument_list|(
name|QList
operator|<
name|QSslCertificate
operator|>
name|certificateChain
argument_list|,
specifier|const
name|QString
operator|&
name|hostName
argument_list|)
block|;
specifier|static
name|bool
name|importPkcs12
argument_list|(
name|QIODevice
operator|*
name|device
argument_list|,
name|QSslKey
operator|*
name|key
argument_list|,
name|QSslCertificate
operator|*
name|cert
argument_list|,
name|QList
operator|<
name|QSslCertificate
operator|>
operator|*
name|caCertificates
argument_list|,
specifier|const
name|QByteArray
operator|&
name|passPhrase
argument_list|)
block|;
specifier|static
name|QSslCipher
name|QSslCipher_from_SSLCipherSuite
argument_list|(
argument|SSLCipherSuite cipher
argument_list|)
block|;
name|private
operator|:
comment|// SSL context management/properties:
name|bool
name|initSslContext
argument_list|()
block|;
name|void
name|destroySslContext
argument_list|()
block|;
name|bool
name|setSessionCertificate
argument_list|(
name|QString
operator|&
name|errorDescription
argument_list|,
name|QAbstractSocket
operator|::
name|SocketError
operator|&
name|errorCode
argument_list|)
block|;
name|bool
name|setSessionProtocol
argument_list|()
block|;
comment|// Aux. functions to do a verification during handshake phase:
name|bool
name|canIgnoreTrustVerificationFailure
argument_list|()
specifier|const
block|;
name|bool
name|verifySessionProtocol
argument_list|()
specifier|const
block|;
name|bool
name|verifyPeerTrust
argument_list|()
block|;
name|bool
name|checkSslErrors
argument_list|()
block|;
name|bool
name|startHandshake
argument_list|()
block|;
name|mutable
name|QCFType
operator|<
name|SSLContextRef
operator|>
name|context
block|;
name|Q_DISABLE_COPY
argument_list|(
name|QSslSocketBackendPrivate
argument_list|)
block|; }
decl_stmt|;
end_decl_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
end_unit
