begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtNetwork module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qsslsocket_winrt_p.h"
end_include
begin_include
include|#
directive|include
file|"qsslsocket.h"
end_include
begin_include
include|#
directive|include
file|"qsslcertificate_p.h"
end_include
begin_include
include|#
directive|include
file|"qsslcipher_p.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/QCoreApplication>
end_include
begin_include
include|#
directive|include
file|<QtCore/QSysInfo>
end_include
begin_include
include|#
directive|include
file|<QtCore/qfunctions_winrt.h>
end_include
begin_include
include|#
directive|include
file|<private/qnativesocketengine_winrt_p.h>
end_include
begin_include
include|#
directive|include
file|<windows.networking.h>
end_include
begin_include
include|#
directive|include
file|<windows.networking.sockets.h>
end_include
begin_include
include|#
directive|include
file|<windows.security.cryptography.certificates.h>
end_include
begin_include
include|#
directive|include
file|<robuffer.h>
end_include
begin_using
using|using
namespace|namespace
name|Microsoft
operator|::
name|WRL
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|Microsoft
operator|::
name|WRL
operator|::
name|Wrappers
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|Foundation
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|Foundation
operator|::
name|Collections
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|Networking
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|Networking
operator|::
name|Sockets
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|Security
operator|::
name|Cryptography
operator|::
name|Certificates
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|Storage
operator|::
name|Streams
namespace|;
end_using
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
comment|// For QSet<QSslError>
specifier|inline
name|uint
name|qHash
argument_list|(
specifier|const
name|QSslError
operator|&
name|error
argument_list|,
name|uint
name|seed
argument_list|)
DECL|function|noexcept
name|Q_DECL_NOEXCEPT_EXPR
argument_list|(
noexcept|noexcept
argument_list|(
name|qHash
argument_list|(
name|error
argument_list|)
argument_list|)
decl_stmt|)
block|{
return|return
operator|(
name|qHash
argument_list|(
name|error
operator|.
name|error
argument_list|()
argument_list|)
operator|^
name|seed
operator|)
return|;
block|}
end_decl_stmt
begin_decl_stmt
DECL|member|s_libraryLoaded
name|bool
name|QSslSocketPrivate
operator|::
name|s_libraryLoaded
init|=
literal|true
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|s_loadRootCertsOnDemand
name|bool
name|QSslSocketPrivate
operator|::
name|s_loadRootCertsOnDemand
init|=
literal|true
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|s_loadedCiphersAndCerts
name|bool
name|QSslSocketPrivate
operator|::
name|s_loadedCiphersAndCerts
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_struct
DECL|struct|SslSocketGlobal
struct|struct
name|SslSocketGlobal
block|{
DECL|function|SslSocketGlobal
name|SslSocketGlobal
parameter_list|()
block|{
name|HRESULT
name|hr
decl_stmt|;
name|hr
operator|=
name|GetActivationFactory
argument_list|(
name|HString
operator|::
name|MakeReference
argument_list|(
name|RuntimeClass_Windows_Networking_HostName
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|hostNameFactory
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|ComPtr
argument_list|<
name|ICertificateStoresStatics
argument_list|>
name|certificateStores
decl_stmt|;
name|hr
operator|=
name|GetActivationFactory
argument_list|(
name|HString
operator|::
name|MakeReference
argument_list|(
name|RuntimeClass_Windows_Security_Cryptography_Certificates_CertificateStores
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|certificateStores
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|hr
operator|=
name|certificateStores
operator|->
name|get_TrustedRootCertificationAuthorities
argument_list|(
operator|&
name|rootStore
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|ComPtr
argument_list|<
name|IAsyncOperation
argument_list|<
name|IVectorView
argument_list|<
name|Certificate
modifier|*
argument_list|>
modifier|*
argument_list|>
argument_list|>
name|op
decl_stmt|;
name|hr
operator|=
name|certificateStores
operator|->
name|FindAllAsync
argument_list|(
operator|&
name|op
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|ComPtr
argument_list|<
name|IVectorView
argument_list|<
name|Certificate
modifier|*
argument_list|>
argument_list|>
name|certificates
decl_stmt|;
name|hr
operator|=
name|QWinRTFunctions
operator|::
name|await
argument_list|(
name|op
argument_list|,
name|certificates
operator|.
name|GetAddressOf
argument_list|()
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|quint32
name|size
decl_stmt|;
name|hr
operator|=
name|certificates
operator|->
name|get_Size
argument_list|(
operator|&
name|size
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
for|for
control|(
name|quint32
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
operator|++
name|i
control|)
block|{
name|ComPtr
argument_list|<
name|ICertificate
argument_list|>
name|certificate
decl_stmt|;
name|hr
operator|=
name|certificates
operator|->
name|GetAt
argument_list|(
name|i
argument_list|,
operator|&
name|certificate
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|systemCaCertificates
operator|.
name|append
argument_list|(
name|QSslCertificatePrivate
operator|::
name|QSslCertificate_from_Certificate
argument_list|(
name|certificate
operator|.
name|Get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|syncCaCertificates
name|void
name|syncCaCertificates
parameter_list|(
specifier|const
name|QSet
argument_list|<
name|QSslCertificate
argument_list|>
modifier|&
name|add
parameter_list|,
specifier|const
name|QSet
argument_list|<
name|QSslCertificate
argument_list|>
modifier|&
name|remove
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|certificateMutex
argument_list|)
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QSslCertificate
modifier|&
name|certificate
decl|,
name|add
control|)
block|{
name|QHash
argument_list|<
name|QSslCertificate
argument_list|,
name|QAtomicInt
argument_list|>
operator|::
name|iterator
name|it
init|=
name|additionalCertificates
operator|.
name|find
argument_list|(
name|certificate
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|!=
name|additionalCertificates
operator|.
name|end
argument_list|()
condition|)
block|{
name|it
operator|.
name|value
argument_list|()
operator|.
name|ref
argument_list|()
expr_stmt|;
comment|// Add a reference
block|}
else|else
block|{
comment|// install certificate
name|HRESULT
name|hr
decl_stmt|;
name|hr
operator|=
name|rootStore
operator|->
name|Add
argument_list|(
cast|static_cast
argument_list|<
name|ICertificate
operator|*
argument_list|>
argument_list|(
name|certificate
operator|.
name|handle
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|additionalCertificates
operator|.
name|insert
argument_list|(
name|certificate
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
foreach|foreach
control|(
specifier|const
name|QSslCertificate
modifier|&
name|certificate
decl|,
name|remove
control|)
block|{
name|QHash
argument_list|<
name|QSslCertificate
argument_list|,
name|QAtomicInt
argument_list|>
operator|::
name|iterator
name|it
init|=
name|additionalCertificates
operator|.
name|find
argument_list|(
name|certificate
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|!=
name|additionalCertificates
operator|.
name|end
argument_list|()
operator|&&
operator|!
name|it
operator|.
name|value
argument_list|()
operator|.
name|deref
argument_list|()
condition|)
block|{
comment|// no more references, remove certificate
name|HRESULT
name|hr
decl_stmt|;
name|hr
operator|=
name|rootStore
operator|->
name|Delete
argument_list|(
cast|static_cast
argument_list|<
name|ICertificate
operator|*
argument_list|>
argument_list|(
name|certificate
operator|.
name|handle
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|additionalCertificates
operator|.
name|erase
argument_list|(
name|it
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|member|hostNameFactory
name|ComPtr
argument_list|<
name|IHostNameFactory
argument_list|>
name|hostNameFactory
decl_stmt|;
DECL|member|systemCaCertificates
name|QList
argument_list|<
name|QSslCertificate
argument_list|>
name|systemCaCertificates
decl_stmt|;
private|private:
DECL|member|certificateMutex
name|QMutex
name|certificateMutex
decl_stmt|;
DECL|member|rootStore
name|ComPtr
argument_list|<
name|ICertificateStore
argument_list|>
name|rootStore
decl_stmt|;
DECL|member|additionalCertificates
name|QHash
argument_list|<
name|QSslCertificate
argument_list|,
name|QAtomicInt
argument_list|>
name|additionalCertificates
decl_stmt|;
block|}
struct|;
end_struct
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|SslSocketGlobal
argument_list|,
argument|g
argument_list|)
end_macro
begin_comment
comment|// Called on the socket's thread to avoid cross-thread deletion
end_comment
begin_function
DECL|function|disconnectSocketFromHost
name|void
name|QSslSocketConnectionHelper
operator|::
name|disconnectSocketFromHost
parameter_list|()
block|{
if|if
condition|(
name|d
operator|->
name|plainSocket
condition|)
name|d
operator|->
name|plainSocket
operator|->
name|disconnectFromHost
argument_list|()
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|QSslSocketBackendPrivate
name|QSslSocketBackendPrivate
operator|::
name|QSslSocketBackendPrivate
parameter_list|()
member_init_list|:
name|connectionHelper
argument_list|(
operator|new
name|QSslSocketConnectionHelper
argument_list|(
name|this
argument_list|)
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QSslSocketBackendPrivate
name|QSslSocketBackendPrivate
operator|::
name|~
name|QSslSocketBackendPrivate
parameter_list|()
block|{
name|g
operator|->
name|syncCaCertificates
argument_list|(
name|QSet
argument_list|<
name|QSslCertificate
argument_list|>
argument_list|()
argument_list|,
name|previousCaCertificates
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|deinitialize
name|void
name|QSslSocketPrivate
operator|::
name|deinitialize
parameter_list|()
block|{
name|Q_UNIMPLEMENTED
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|supportsSsl
name|bool
name|QSslSocketPrivate
operator|::
name|supportsSsl
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|ensureInitialized
name|void
name|QSslSocketPrivate
operator|::
name|ensureInitialized
parameter_list|()
block|{
if|if
condition|(
name|s_loadedCiphersAndCerts
condition|)
return|return;
name|s_loadedCiphersAndCerts
operator|=
literal|true
expr_stmt|;
name|resetDefaultCiphers
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sslLibraryVersionNumber
name|long
name|QSslSocketPrivate
operator|::
name|sslLibraryVersionNumber
parameter_list|()
block|{
return|return
name|QSysInfo
operator|::
name|windowsVersion
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|sslLibraryVersionString
name|QString
name|QSslSocketPrivate
operator|::
name|sslLibraryVersionString
parameter_list|()
block|{
switch|switch
condition|(
name|QSysInfo
operator|::
name|windowsVersion
argument_list|()
condition|)
block|{
case|case
name|QSysInfo
operator|::
name|WV_WINDOWS8_1
case|:
return|return
name|QStringLiteral
argument_list|(
literal|"Windows Runtime 8.1 SSL library"
argument_list|)
return|;
default|default:
break|break;
block|}
return|return
name|QStringLiteral
argument_list|(
literal|"Windows Runtime SSL library"
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|sslLibraryBuildVersionNumber
name|long
name|QSslSocketPrivate
operator|::
name|sslLibraryBuildVersionNumber
parameter_list|()
block|{
name|Q_UNIMPLEMENTED
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|sslLibraryBuildVersionString
name|QString
name|QSslSocketPrivate
operator|::
name|sslLibraryBuildVersionString
parameter_list|()
block|{
name|Q_UNIMPLEMENTED
argument_list|()
expr_stmt|;
return|return
name|QString
operator|::
name|number
argument_list|(
name|sslLibraryBuildVersionNumber
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|resetDefaultCiphers
name|void
name|QSslSocketPrivate
operator|::
name|resetDefaultCiphers
parameter_list|()
block|{
name|setDefaultSupportedCiphers
argument_list|(
name|QSslSocketBackendPrivate
operator|::
name|defaultCiphers
argument_list|()
argument_list|)
expr_stmt|;
name|setDefaultCiphers
argument_list|(
name|QSslSocketBackendPrivate
operator|::
name|defaultCiphers
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|defaultCiphers
name|QList
argument_list|<
name|QSslCipher
argument_list|>
name|QSslSocketBackendPrivate
operator|::
name|defaultCiphers
parameter_list|()
block|{
name|QList
argument_list|<
name|QSslCipher
argument_list|>
name|ciphers
decl_stmt|;
specifier|const
name|QString
name|protocolStrings
index|[]
init|=
block|{
name|QStringLiteral
argument_list|(
literal|"SSLv3"
argument_list|)
block|,
name|QStringLiteral
argument_list|(
literal|"TLSv1"
argument_list|)
block|,
name|QStringLiteral
argument_list|(
literal|"TLSv1.1"
argument_list|)
block|,
name|QStringLiteral
argument_list|(
literal|"TLSv1.2"
argument_list|)
block|}
decl_stmt|;
specifier|const
name|QSsl
operator|::
name|SslProtocol
name|protocols
index|[]
init|=
block|{
name|QSsl
operator|::
name|SslV3
block|,
name|QSsl
operator|::
name|TlsV1_0
block|,
name|QSsl
operator|::
name|TlsV1_1
block|,
name|QSsl
operator|::
name|TlsV1_2
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ARRAYSIZE
argument_list|(
name|protocols
argument_list|)
condition|;
operator|++
name|i
control|)
block|{
name|QSslCipher
name|cipher
decl_stmt|;
name|cipher
operator|.
name|d
operator|->
name|isNull
operator|=
literal|false
expr_stmt|;
name|cipher
operator|.
name|d
operator|->
name|name
operator|=
name|QStringLiteral
argument_list|(
literal|"WINRT"
argument_list|)
expr_stmt|;
name|cipher
operator|.
name|d
operator|->
name|protocol
operator|=
name|protocols
index|[
name|i
index|]
expr_stmt|;
name|cipher
operator|.
name|d
operator|->
name|protocolString
operator|=
name|protocolStrings
index|[
name|i
index|]
expr_stmt|;
name|ciphers
operator|.
name|append
argument_list|(
name|cipher
argument_list|)
expr_stmt|;
block|}
return|return
name|ciphers
return|;
block|}
end_function
begin_function
DECL|function|systemCaCertificates
name|QList
argument_list|<
name|QSslCertificate
argument_list|>
name|QSslSocketPrivate
operator|::
name|systemCaCertificates
parameter_list|()
block|{
return|return
name|g
operator|->
name|systemCaCertificates
return|;
block|}
end_function
begin_function
DECL|function|startClientEncryption
name|void
name|QSslSocketBackendPrivate
operator|::
name|startClientEncryption
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QSslSocket
argument_list|)
expr_stmt|;
name|QSsl
operator|::
name|SslProtocol
name|protocol
init|=
name|q
operator|->
name|protocol
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|q
operator|->
name|protocol
argument_list|()
condition|)
block|{
case|case
name|QSsl
operator|::
name|AnyProtocol
case|:
case|case
name|QSsl
operator|::
name|SslV3
case|:
name|protectionLevel
operator|=
name|SocketProtectionLevel_Ssl
expr_stmt|;
comment|// Only use this value if weak cipher support is required
break|break;
case|case
name|QSsl
operator|::
name|SecureProtocols
case|:
case|case
name|QSsl
operator|::
name|TlsV1SslV3
case|:
case|case
name|QSsl
operator|::
name|TlsV1_0
case|:
name|protectionLevel
operator|=
name|SocketProtectionLevel_Tls10
expr_stmt|;
break|break;
case|case
name|QSsl
operator|::
name|TlsV1_1
case|:
name|protectionLevel
operator|=
name|SocketProtectionLevel_Tls11
expr_stmt|;
break|break;
case|case
name|QSsl
operator|::
name|TlsV1_2
case|:
name|protectionLevel
operator|=
name|SocketProtectionLevel_Tls12
expr_stmt|;
break|break;
default|default:
name|protectionLevel
operator|=
name|SocketProtectionLevel_Tls12
expr_stmt|;
comment|// default to highest
name|protocol
operator|=
name|QSsl
operator|::
name|TlsV1_2
expr_stmt|;
break|break;
block|}
comment|// Sync custom certificates
specifier|const
name|QSet
argument_list|<
name|QSslCertificate
argument_list|>
name|caCertificates
init|=
name|configuration
operator|.
name|caCertificates
operator|.
name|toSet
argument_list|()
decl_stmt|;
specifier|const
name|QSet
argument_list|<
name|QSslCertificate
argument_list|>
name|newCertificates
init|=
name|caCertificates
operator|-
name|previousCaCertificates
decl_stmt|;
specifier|const
name|QSet
argument_list|<
name|QSslCertificate
argument_list|>
name|oldCertificates
init|=
name|previousCaCertificates
operator|-
name|caCertificates
decl_stmt|;
name|g
operator|->
name|syncCaCertificates
argument_list|(
name|newCertificates
argument_list|,
name|oldCertificates
argument_list|)
expr_stmt|;
name|previousCaCertificates
operator|=
name|caCertificates
expr_stmt|;
name|continueHandshake
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|startServerEncryption
name|void
name|QSslSocketBackendPrivate
operator|::
name|startServerEncryption
parameter_list|()
block|{
name|Q_UNIMPLEMENTED
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|transmit
name|void
name|QSslSocketBackendPrivate
operator|::
name|transmit
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QSslSocket
argument_list|)
expr_stmt|;
if|if
condition|(
name|connectionEncrypted
operator|&&
operator|!
name|writeBuffer
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|qint64
name|totalBytesWritten
init|=
literal|0
decl_stmt|;
name|int
name|nextDataBlockSize
decl_stmt|;
while|while
condition|(
operator|(
name|nextDataBlockSize
operator|=
name|writeBuffer
operator|.
name|nextDataBlockSize
argument_list|()
operator|)
operator|>
literal|0
condition|)
block|{
name|int
name|writtenBytes
init|=
name|plainSocket
operator|->
name|write
argument_list|(
name|writeBuffer
operator|.
name|readPointer
argument_list|()
argument_list|,
name|nextDataBlockSize
argument_list|)
decl_stmt|;
name|writtenBytes
operator|=
name|nextDataBlockSize
expr_stmt|;
name|writeBuffer
operator|.
name|free
argument_list|(
name|writtenBytes
argument_list|)
expr_stmt|;
name|totalBytesWritten
operator|+=
name|writtenBytes
expr_stmt|;
if|if
condition|(
name|writtenBytes
operator|<
name|nextDataBlockSize
condition|)
break|break;
block|}
if|if
condition|(
name|totalBytesWritten
operator|>
literal|0
condition|)
block|{
comment|// Don't emit bytesWritten() recursively.
if|if
condition|(
operator|!
name|emittedBytesWritten
condition|)
block|{
name|emittedBytesWritten
operator|=
literal|true
expr_stmt|;
emit|emit
name|q
operator|->
name|bytesWritten
argument_list|(
name|totalBytesWritten
argument_list|)
emit|;
name|emittedBytesWritten
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
comment|// Check if we've got any data to be read from the socket.
name|int
name|pendingBytes
decl_stmt|;
name|bool
name|bytesRead
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|(
name|pendingBytes
operator|=
name|plainSocket
operator|->
name|bytesAvailable
argument_list|()
operator|)
operator|>
literal|0
condition|)
block|{
name|char
modifier|*
name|ptr
init|=
name|buffer
operator|.
name|reserve
argument_list|(
name|pendingBytes
argument_list|)
decl_stmt|;
name|int
name|readBytes
init|=
name|plainSocket
operator|->
name|read
argument_list|(
name|ptr
argument_list|,
name|pendingBytes
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|chop
argument_list|(
name|pendingBytes
operator|-
name|readBytes
argument_list|)
expr_stmt|;
name|bytesRead
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|bytesRead
condition|)
block|{
if|if
condition|(
name|readyReadEmittedPointer
condition|)
operator|*
name|readyReadEmittedPointer
operator|=
literal|true
expr_stmt|;
emit|emit
name|q
operator|->
name|readyRead
argument_list|()
emit|;
block|}
if|if
condition|(
name|pendingClose
condition|)
block|{
name|pendingClose
operator|=
literal|false
expr_stmt|;
name|q
operator|->
name|disconnectFromHost
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|disconnectFromHost
name|void
name|QSslSocketBackendPrivate
operator|::
name|disconnectFromHost
parameter_list|()
block|{
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
name|connectionHelper
operator|.
name|data
argument_list|()
argument_list|,
literal|"disconnectSocketFromHost"
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|disconnected
name|void
name|QSslSocketBackendPrivate
operator|::
name|disconnected
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|sessionCipher
name|QSslCipher
name|QSslSocketBackendPrivate
operator|::
name|sessionCipher
parameter_list|()
specifier|const
block|{
return|return
name|configuration
operator|.
name|sessionCipher
return|;
block|}
end_function
begin_function
DECL|function|sessionProtocol
name|QSsl
operator|::
name|SslProtocol
name|QSslSocketBackendPrivate
operator|::
name|sessionProtocol
parameter_list|()
specifier|const
block|{
return|return
name|configuration
operator|.
name|sessionCipher
operator|.
name|protocol
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|continueHandshake
name|void
name|QSslSocketBackendPrivate
operator|::
name|continueHandshake
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QSslSocket
argument_list|)
expr_stmt|;
name|IStreamSocket
modifier|*
name|socket
init|=
cast|reinterpret_cast
argument_list|<
name|IStreamSocket
operator|*
argument_list|>
argument_list|(
name|plainSocket
operator|->
name|socketDescriptor
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|qintptr
argument_list|(
name|socket
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
name|q
operator|->
name|setErrorString
argument_list|(
name|QStringLiteral
argument_list|(
literal|"At attempt was made to continue the handshake on an invalid socket."
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|->
name|setSocketError
argument_list|(
name|QAbstractSocket
operator|::
name|SslInternalError
argument_list|)
expr_stmt|;
emit|emit
name|q
operator|->
name|error
argument_list|(
name|QAbstractSocket
operator|::
name|SslInternalError
argument_list|)
emit|;
return|return;
block|}
name|HRESULT
name|hr
decl_stmt|;
name|ComPtr
argument_list|<
name|IHostName
argument_list|>
name|hostName
decl_stmt|;
specifier|const
name|QString
name|host
init|=
name|verificationPeerName
operator|.
name|isEmpty
argument_list|()
condition|?
name|plainSocket
operator|->
name|peerName
argument_list|()
else|:
name|verificationPeerName
decl_stmt|;
if|if
condition|(
name|host
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ComPtr
argument_list|<
name|IStreamSocketInformation
argument_list|>
name|info
decl_stmt|;
name|hr
operator|=
name|socket
operator|->
name|get_Information
argument_list|(
operator|&
name|info
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|hr
operator|=
name|info
operator|->
name|get_RemoteAddress
argument_list|(
operator|&
name|hostName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|HStringReference
name|hostRef
argument_list|(
cast|reinterpret_cast
argument_list|<
name|LPCWSTR
argument_list|>
argument_list|(
name|host
operator|.
name|utf16
argument_list|()
argument_list|)
argument_list|,
name|host
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|hr
operator|=
name|g
operator|->
name|hostNameFactory
operator|->
name|CreateHostName
argument_list|(
name|hostRef
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|hostName
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|q
operator|->
name|setErrorString
argument_list|(
name|qt_error_string
argument_list|(
name|hr
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|->
name|setSocketError
argument_list|(
name|QAbstractSocket
operator|::
name|SslInvalidUserDataError
argument_list|)
expr_stmt|;
emit|emit
name|q
operator|->
name|error
argument_list|(
name|QAbstractSocket
operator|::
name|SslInvalidUserDataError
argument_list|)
emit|;
return|return;
block|}
name|ComPtr
argument_list|<
name|IStreamSocketControl
argument_list|>
name|control
decl_stmt|;
name|hr
operator|=
name|socket
operator|->
name|get_Control
argument_list|(
operator|&
name|control
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|ComPtr
argument_list|<
name|IStreamSocketControl2
argument_list|>
name|control2
decl_stmt|;
name|hr
operator|=
name|control
operator|.
name|As
argument_list|(
operator|&
name|control2
argument_list|)
expr_stmt|;
name|ComPtr
argument_list|<
name|IVector
argument_list|<
name|ChainValidationResult
argument_list|>
argument_list|>
name|ignoreList
decl_stmt|;
name|hr
operator|=
name|control2
operator|->
name|get_IgnorableServerCertificateErrors
argument_list|(
operator|&
name|ignoreList
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|QSet
argument_list|<
name|QSslError
argument_list|>
name|ignoreErrors
init|=
name|ignoreErrorsList
operator|.
name|toSet
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|ChainValidationResult_Untrusted
init|;
name|i
operator|<
name|ChainValidationResult_OtherErrors
operator|+
literal|1
condition|;
operator|++
name|i
control|)
block|{
comment|// Populate the native ignore list - break to add, continue to skip
switch|switch
condition|(
name|i
condition|)
block|{
case|case
name|ChainValidationResult_Revoked
case|:
case|case
name|ChainValidationResult_InvalidSignature
case|:
case|case
name|ChainValidationResult_BasicConstraintsError
case|:
case|case
name|ChainValidationResult_InvalidCertificateAuthorityPolicy
case|:
case|case
name|ChainValidationResult_UnknownCriticalExtension
case|:
case|case
name|ChainValidationResult_OtherErrors
case|:
continue|continue;
comment|// The above errors can't be ignored in the handshake
case|case
name|ChainValidationResult_Untrusted
case|:
if|if
condition|(
name|ignoreAllSslErrors
operator|||
name|ignoreErrors
operator|.
name|contains
argument_list|(
name|QSslError
operator|::
name|CertificateUntrusted
argument_list|)
condition|)
break|break;
continue|continue;
case|case
name|ChainValidationResult_Expired
case|:
if|if
condition|(
name|ignoreAllSslErrors
operator|||
name|ignoreErrors
operator|.
name|contains
argument_list|(
name|QSslError
operator|::
name|CertificateExpired
argument_list|)
condition|)
break|break;
continue|continue;
case|case
name|ChainValidationResult_IncompleteChain
case|:
if|if
condition|(
name|ignoreAllSslErrors
operator|||
name|ignoreErrors
operator|.
name|contains
argument_list|(
name|QSslError
operator|::
name|InvalidCaCertificate
argument_list|)
operator|||
name|ignoreErrors
operator|.
name|contains
argument_list|(
name|QSslError
operator|::
name|UnableToVerifyFirstCertificate
argument_list|)
operator|||
name|ignoreErrors
operator|.
name|contains
argument_list|(
name|QSslError
operator|::
name|UnableToGetIssuerCertificate
argument_list|)
condition|)
block|{
break|break;
block|}
continue|continue;
case|case
name|ChainValidationResult_WrongUsage
case|:
if|if
condition|(
name|ignoreAllSslErrors
operator|||
name|ignoreErrors
operator|.
name|contains
argument_list|(
name|QSslError
operator|::
name|InvalidPurpose
argument_list|)
condition|)
break|break;
continue|continue;
case|case
name|ChainValidationResult_InvalidName
case|:
if|if
condition|(
name|ignoreAllSslErrors
operator|||
name|ignoreErrors
operator|.
name|contains
argument_list|(
name|QSslError
operator|::
name|HostNameMismatch
argument_list|)
operator|||
name|ignoreErrors
operator|.
name|contains
argument_list|(
name|QSslError
operator|::
name|SubjectIssuerMismatch
argument_list|)
condition|)
block|{
break|break;
block|}
continue|continue;
case|case
name|ChainValidationResult_RevocationInformationMissing
case|:
case|case
name|ChainValidationResult_RevocationFailure
case|:
default|default:
if|if
condition|(
name|ignoreAllSslErrors
condition|)
break|break;
continue|continue;
block|}
name|hr
operator|=
name|ignoreList
operator|->
name|Append
argument_list|(
cast|static_cast
argument_list|<
name|ChainValidationResult
argument_list|>
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
block|}
name|ComPtr
argument_list|<
name|IAsyncAction
argument_list|>
name|op
decl_stmt|;
name|hr
operator|=
name|socket
operator|->
name|UpgradeToSslAsync
argument_list|(
name|protectionLevel
argument_list|,
name|hostName
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|op
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|q
operator|->
name|setErrorString
argument_list|(
name|QSslSocket
operator|::
name|tr
argument_list|(
literal|"Error creating SSL session: %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|qt_error_string
argument_list|(
name|hr
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|->
name|setSocketError
argument_list|(
name|QAbstractSocket
operator|::
name|SslInternalError
argument_list|)
expr_stmt|;
emit|emit
name|q
operator|->
name|error
argument_list|(
name|QAbstractSocket
operator|::
name|SslInternalError
argument_list|)
emit|;
return|return;
block|}
name|hr
operator|=
name|op
operator|->
name|put_Completed
argument_list|(
name|Callback
argument_list|<
name|IAsyncActionCompletedHandler
argument_list|>
argument_list|(
name|this
argument_list|,
operator|&
name|QSslSocketBackendPrivate
operator|::
name|onSslUpgrade
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|onSslUpgrade
name|HRESULT
name|QSslSocketBackendPrivate
operator|::
name|onSslUpgrade
parameter_list|(
name|IAsyncAction
modifier|*
name|action
parameter_list|,
name|AsyncStatus
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QSslSocket
argument_list|)
expr_stmt|;
if|if
condition|(
name|wasDeleted
condition|)
block|{
name|qWarning
argument_list|(
literal|"SSL upgrade callback received after the delegate was deleted. "
literal|"This may be indicative of an internal bug in the WinRT SSL implementation."
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
block|}
name|HRESULT
name|hr
init|=
name|action
operator|->
name|GetResults
argument_list|()
decl_stmt|;
name|QSet
argument_list|<
name|QSslError
argument_list|>
name|errors
decl_stmt|;
switch|switch
condition|(
name|hr
condition|)
block|{
case|case
name|SEC_E_INVALID_TOKEN
case|:
comment|// Occurs when the server doesn't support the requested protocol
name|q
operator|->
name|setErrorString
argument_list|(
name|qt_error_string
argument_list|(
name|hr
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|->
name|setSocketError
argument_list|(
name|QAbstractSocket
operator|::
name|SslHandshakeFailedError
argument_list|)
expr_stmt|;
emit|emit
name|q
operator|->
name|error
argument_list|(
name|QAbstractSocket
operator|::
name|SslHandshakeFailedError
argument_list|)
emit|;
name|q
operator|->
name|disconnectFromHost
argument_list|()
expr_stmt|;
return|return
name|S_OK
return|;
default|default:
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
name|qErrnoWarning
argument_list|(
name|hr
argument_list|,
literal|"error"
argument_list|)
expr_stmt|;
comment|// Unhandled error; let sslErrors take care of it
break|break;
block|}
name|IStreamSocket
modifier|*
name|socket
init|=
cast|reinterpret_cast
argument_list|<
name|IStreamSocket
operator|*
argument_list|>
argument_list|(
name|plainSocket
operator|->
name|socketDescriptor
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|qintptr
argument_list|(
name|socket
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
name|qWarning
argument_list|(
literal|"The underlying TCP socket used by the SSL socket is invalid. "
literal|"This may be indicative of an internal bug in the WinRT SSL implementation."
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
block|}
name|ComPtr
argument_list|<
name|IStreamSocketInformation
argument_list|>
name|info
decl_stmt|;
name|hr
operator|=
name|socket
operator|->
name|get_Information
argument_list|(
operator|&
name|info
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|ComPtr
argument_list|<
name|IStreamSocketInformation2
argument_list|>
name|info2
decl_stmt|;
name|hr
operator|=
name|info
operator|.
name|As
argument_list|(
operator|&
name|info2
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
comment|// Cipher
name|QSsl
operator|::
name|SslProtocol
name|protocol
decl_stmt|;
name|SocketProtectionLevel
name|protectionLevel
decl_stmt|;
name|hr
operator|=
name|info
operator|->
name|get_ProtectionLevel
argument_list|(
operator|&
name|protectionLevel
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|protectionLevel
condition|)
block|{
default|default:
name|protocol
operator|=
name|QSsl
operator|::
name|UnknownProtocol
expr_stmt|;
break|break;
case|case
name|SocketProtectionLevel_Ssl
case|:
name|protocol
operator|=
name|QSsl
operator|::
name|SslV3
expr_stmt|;
break|break;
case|case
name|SocketProtectionLevel_Tls10
case|:
name|protocol
operator|=
name|QSsl
operator|::
name|TlsV1_0
expr_stmt|;
break|break;
case|case
name|SocketProtectionLevel_Tls11
case|:
name|protocol
operator|=
name|QSsl
operator|::
name|TlsV1_1
expr_stmt|;
break|break;
case|case
name|SocketProtectionLevel_Tls12
case|:
name|protocol
operator|=
name|QSsl
operator|::
name|TlsV1_2
expr_stmt|;
break|break;
block|}
name|configuration
operator|.
name|sessionCipher
operator|=
name|QSslCipher
argument_list|(
name|QStringLiteral
argument_list|(
literal|"WINRT"
argument_list|)
argument_list|,
name|protocol
argument_list|)
expr_stmt|;
comment|// The actual cipher name is not accessible
comment|// Certificate& chain
name|ComPtr
argument_list|<
name|ICertificate
argument_list|>
name|certificate
decl_stmt|;
name|hr
operator|=
name|info2
operator|->
name|get_ServerCertificate
argument_list|(
operator|&
name|certificate
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QSslCertificate
argument_list|>
name|peerCertificateChain
decl_stmt|;
if|if
condition|(
name|certificate
condition|)
block|{
name|ComPtr
argument_list|<
name|IAsyncOperation
argument_list|<
name|CertificateChain
modifier|*
argument_list|>
argument_list|>
name|op
decl_stmt|;
name|hr
operator|=
name|certificate
operator|->
name|BuildChainAsync
argument_list|(
name|Q_NULLPTR
argument_list|,
operator|&
name|op
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|ComPtr
argument_list|<
name|ICertificateChain
argument_list|>
name|certificateChain
decl_stmt|;
name|hr
operator|=
name|QWinRTFunctions
operator|::
name|await
argument_list|(
name|op
argument_list|,
name|certificateChain
operator|.
name|GetAddressOf
argument_list|()
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|ComPtr
argument_list|<
name|IVectorView
argument_list|<
name|Certificate
modifier|*
argument_list|>
argument_list|>
name|certificates
decl_stmt|;
name|hr
operator|=
name|certificateChain
operator|->
name|GetCertificates
argument_list|(
literal|true
argument_list|,
operator|&
name|certificates
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|quint32
name|certificatesLength
decl_stmt|;
name|hr
operator|=
name|certificates
operator|->
name|get_Size
argument_list|(
operator|&
name|certificatesLength
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
for|for
control|(
name|quint32
name|i
init|=
literal|0
init|;
name|i
operator|<
name|certificatesLength
condition|;
operator|++
name|i
control|)
block|{
name|ComPtr
argument_list|<
name|ICertificate
argument_list|>
name|chainCertificate
decl_stmt|;
name|hr
operator|=
name|certificates
operator|->
name|GetAt
argument_list|(
name|i
argument_list|,
operator|&
name|chainCertificate
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|peerCertificateChain
operator|.
name|append
argument_list|(
name|QSslCertificatePrivate
operator|::
name|QSslCertificate_from_Certificate
argument_list|(
name|chainCertificate
operator|.
name|Get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|configuration
operator|.
name|peerCertificate
operator|=
name|certificate
condition|?
name|QSslCertificatePrivate
operator|::
name|QSslCertificate_from_Certificate
argument_list|(
name|certificate
operator|.
name|Get
argument_list|()
argument_list|)
else|:
name|QSslCertificate
argument_list|()
expr_stmt|;
name|configuration
operator|.
name|peerCertificateChain
operator|=
name|peerCertificateChain
expr_stmt|;
comment|// Errors
name|ComPtr
argument_list|<
name|IVectorView
argument_list|<
name|ChainValidationResult
argument_list|>
argument_list|>
name|chainValidationResults
decl_stmt|;
name|hr
operator|=
name|info2
operator|->
name|get_ServerCertificateErrors
argument_list|(
operator|&
name|chainValidationResults
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|quint32
name|size
decl_stmt|;
name|hr
operator|=
name|chainValidationResults
operator|->
name|get_Size
argument_list|(
operator|&
name|size
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
for|for
control|(
name|quint32
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
operator|++
name|i
control|)
block|{
name|ChainValidationResult
name|result
decl_stmt|;
name|hr
operator|=
name|chainValidationResults
operator|->
name|GetAt
argument_list|(
name|i
argument_list|,
operator|&
name|result
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|result
condition|)
block|{
case|case
name|ChainValidationResult_Success
case|:
break|break;
case|case
name|ChainValidationResult_Untrusted
case|:
name|errors
operator|.
name|insert
argument_list|(
name|QSslError
operator|::
name|CertificateUntrusted
argument_list|)
expr_stmt|;
break|break;
case|case
name|ChainValidationResult_Revoked
case|:
name|errors
operator|.
name|insert
argument_list|(
name|QSslError
operator|::
name|CertificateRevoked
argument_list|)
expr_stmt|;
break|break;
case|case
name|ChainValidationResult_Expired
case|:
name|errors
operator|.
name|insert
argument_list|(
name|QSslError
operator|::
name|CertificateExpired
argument_list|)
expr_stmt|;
break|break;
case|case
name|ChainValidationResult_IncompleteChain
case|:
name|errors
operator|.
name|insert
argument_list|(
name|QSslError
operator|::
name|UnableToGetIssuerCertificate
argument_list|)
expr_stmt|;
break|break;
case|case
name|ChainValidationResult_InvalidSignature
case|:
name|errors
operator|.
name|insert
argument_list|(
name|QSslError
operator|::
name|CertificateSignatureFailed
argument_list|)
expr_stmt|;
break|break;
case|case
name|ChainValidationResult_WrongUsage
case|:
name|errors
operator|.
name|insert
argument_list|(
name|QSslError
operator|::
name|InvalidPurpose
argument_list|)
expr_stmt|;
break|break;
case|case
name|ChainValidationResult_InvalidName
case|:
name|errors
operator|.
name|insert
argument_list|(
name|QSslError
operator|::
name|HostNameMismatch
argument_list|)
expr_stmt|;
break|break;
case|case
name|ChainValidationResult_InvalidCertificateAuthorityPolicy
case|:
name|errors
operator|.
name|insert
argument_list|(
name|QSslError
operator|::
name|InvalidCaCertificate
argument_list|)
expr_stmt|;
break|break;
default|default:
name|errors
operator|.
name|insert
argument_list|(
name|QSslError
operator|::
name|UnspecifiedError
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|sslErrors
operator|=
name|errors
operator|.
name|toList
argument_list|()
expr_stmt|;
comment|// Peer validation
if|if
condition|(
operator|!
name|configuration
operator|.
name|peerCertificate
operator|.
name|isNull
argument_list|()
condition|)
block|{
specifier|const
name|QString
name|peerName
init|=
name|verificationPeerName
operator|.
name|isEmpty
argument_list|()
condition|?
name|q
operator|->
name|peerName
argument_list|()
else|:
name|verificationPeerName
decl_stmt|;
if|if
condition|(
operator|!
name|isMatchingHostname
argument_list|(
name|configuration
operator|.
name|peerCertificate
argument_list|,
name|peerName
argument_list|)
condition|)
block|{
comment|// No matches in common names or alternate names.
specifier|const
name|QSslError
name|error
argument_list|(
name|QSslError
operator|::
name|HostNameMismatch
argument_list|,
name|configuration
operator|.
name|peerCertificate
argument_list|)
decl_stmt|;
specifier|const
name|int
name|index
init|=
name|sslErrors
operator|.
name|indexOf
argument_list|(
name|QSslError
operator|::
name|HostNameMismatch
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>=
literal|0
condition|)
comment|// Replace the existing error
name|sslErrors
index|[
name|index
index|]
operator|=
name|error
expr_stmt|;
else|else
name|sslErrors
operator|.
name|append
argument_list|(
name|error
argument_list|)
expr_stmt|;
emit|emit
name|q
operator|->
name|peerVerifyError
argument_list|(
name|error
argument_list|)
emit|;
block|}
comment|// Peer validation required, but no certificate is present
block|}
elseif|else
if|if
condition|(
name|configuration
operator|.
name|peerVerifyMode
operator|==
name|QSslSocket
operator|::
name|VerifyPeer
operator|||
name|configuration
operator|.
name|peerVerifyMode
operator|==
name|QSslSocket
operator|::
name|AutoVerifyPeer
condition|)
block|{
name|QSslError
name|error
argument_list|(
name|QSslError
operator|::
name|NoPeerCertificate
argument_list|)
decl_stmt|;
name|sslErrors
operator|.
name|append
argument_list|(
name|error
argument_list|)
expr_stmt|;
emit|emit
name|q
operator|->
name|peerVerifyError
argument_list|(
name|error
argument_list|)
emit|;
block|}
comment|// Peer chain validation
foreach|foreach
control|(
specifier|const
name|QSslCertificate
modifier|&
name|certificate
decl|,
name|peerCertificateChain
control|)
block|{
if|if
condition|(
operator|!
name|QSslCertificatePrivate
operator|::
name|isBlacklisted
argument_list|(
name|certificate
argument_list|)
condition|)
continue|continue;
name|QSslError
name|error
argument_list|(
name|QSslError
operator|::
name|CertificateBlacklisted
argument_list|,
name|certificate
argument_list|)
decl_stmt|;
name|sslErrors
operator|.
name|append
argument_list|(
name|error
argument_list|)
expr_stmt|;
emit|emit
name|q
operator|->
name|peerVerifyError
argument_list|(
name|error
argument_list|)
emit|;
block|}
if|if
condition|(
operator|!
name|sslErrors
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
emit|emit
name|q
operator|->
name|sslErrors
argument_list|(
name|sslErrors
argument_list|)
emit|;
name|q
operator|->
name|setErrorString
argument_list|(
name|sslErrors
operator|.
name|first
argument_list|()
operator|.
name|errorString
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|->
name|setSocketError
argument_list|(
name|QAbstractSocket
operator|::
name|SslHandshakeFailedError
argument_list|)
expr_stmt|;
emit|emit
name|q
operator|->
name|error
argument_list|(
name|QAbstractSocket
operator|::
name|SslHandshakeFailedError
argument_list|)
emit|;
comment|// Disconnect if there are any non-ignorable errors
foreach|foreach
control|(
specifier|const
name|QSslError
modifier|&
name|error
decl|,
name|sslErrors
control|)
block|{
if|if
condition|(
name|ignoreErrorsList
operator|.
name|contains
argument_list|(
name|error
argument_list|)
condition|)
continue|continue;
name|q
operator|->
name|disconnectFromHost
argument_list|()
expr_stmt|;
return|return
name|S_OK
return|;
block|}
block|}
if|if
condition|(
name|readBufferMaxSize
condition|)
name|plainSocket
operator|->
name|setReadBufferSize
argument_list|(
name|readBufferMaxSize
argument_list|)
expr_stmt|;
name|connectionEncrypted
operator|=
literal|true
expr_stmt|;
emit|emit
name|q
operator|->
name|encrypted
argument_list|()
emit|;
if|if
condition|(
name|pendingClose
condition|)
block|{
name|pendingClose
operator|=
literal|false
expr_stmt|;
name|q
operator|->
name|disconnectFromHost
argument_list|()
expr_stmt|;
block|}
return|return
name|S_OK
return|;
block|}
end_function
begin_function
DECL|function|verify
name|QList
argument_list|<
name|QSslError
argument_list|>
name|QSslSocketBackendPrivate
operator|::
name|verify
parameter_list|(
name|QList
argument_list|<
name|QSslCertificate
argument_list|>
name|certificateChain
parameter_list|,
specifier|const
name|QString
modifier|&
name|hostName
parameter_list|)
block|{
name|Q_UNIMPLEMENTED
argument_list|()
expr_stmt|;
name|Q_UNUSED
argument_list|(
argument|certificateChain
argument_list|)
name|Q_UNUSED
argument_list|(
argument|hostName
argument_list|)
name|QList
argument_list|<
name|QSslError
argument_list|>
name|errors
decl_stmt|;
return|return
name|errors
return|;
block|}
end_function
begin_function
DECL|function|importPKCS12
name|bool
name|QSslSocketBackendPrivate
operator|::
name|importPKCS12
parameter_list|(
name|QIODevice
modifier|*
name|device
parameter_list|,
name|QSslKey
modifier|*
name|key
parameter_list|,
name|QSslCertificate
modifier|*
name|cert
parameter_list|,
name|QList
argument_list|<
name|QSslCertificate
argument_list|>
modifier|*
name|caCertificates
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|passPhrase
parameter_list|)
block|{
name|Q_UNIMPLEMENTED
argument_list|()
expr_stmt|;
name|Q_UNUSED
argument_list|(
argument|device
argument_list|)
name|Q_UNUSED
argument_list|(
argument|key
argument_list|)
name|Q_UNUSED
argument_list|(
argument|cert
argument_list|)
name|Q_UNUSED
argument_list|(
argument|caCertificates
argument_list|)
name|Q_UNUSED
argument_list|(
argument|passPhrase
argument_list|)
return|return
literal|false
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
