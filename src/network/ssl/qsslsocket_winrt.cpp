begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtNetwork module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|/**************************************************************************** ** ** In addition, as a special exception, the copyright holders listed above give ** permission to link the code of its release of Qt with the OpenSSL project's ** "OpenSSL" library (or modified versions of the "OpenSSL" library that use the ** same license as the original version), and distribute the linked executables. ** ** You must comply with the GNU General Public License version 2 in all ** respects for all of the code used other than the "OpenSSL" code.  If you ** modify this file, you may extend this exception to your version of the file, ** but you are not obligated to do so.  If you do not wish to do so, delete ** this exception statement from your version of this file. ** ****************************************************************************/
end_comment
begin_comment
comment|//#define QSSLSOCKET_DEBUG
end_comment
begin_comment
comment|//#define QT_DECRYPT_SSL_TRAFFIC
end_comment
begin_include
include|#
directive|include
file|"qsslsocket_winrt_p.h"
end_include
begin_include
include|#
directive|include
file|"qsslsocket.h"
end_include
begin_include
include|#
directive|include
file|"qsslcertificate_p.h"
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|member|s_loadRootCertsOnDemand
name|bool
name|QSslSocketPrivate
operator|::
name|s_loadRootCertsOnDemand
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_constructor
DECL|function|QSslSocketBackendPrivate
name|QSslSocketBackendPrivate
operator|::
name|QSslSocketBackendPrivate
parameter_list|()
block|{
name|ensureInitialized
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QSslSocketBackendPrivate
name|QSslSocketBackendPrivate
operator|::
name|~
name|QSslSocketBackendPrivate
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|deinitialize
name|void
name|QSslSocketPrivate
operator|::
name|deinitialize
parameter_list|()
block|{
name|Q_UNIMPLEMENTED
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|supportsSsl
name|bool
name|QSslSocketPrivate
operator|::
name|supportsSsl
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|ensureLibraryLoaded
name|bool
name|QSslSocketPrivate
operator|::
name|ensureLibraryLoaded
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|ensureCiphersAndCertsLoaded
name|void
name|QSslSocketPrivate
operator|::
name|ensureCiphersAndCertsLoaded
parameter_list|()
block|{
name|Q_UNIMPLEMENTED
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|ensureInitialized
name|void
name|QSslSocketPrivate
operator|::
name|ensureInitialized
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|sslLibraryVersionNumber
name|long
name|QSslSocketPrivate
operator|::
name|sslLibraryVersionNumber
parameter_list|()
block|{
name|Q_UNIMPLEMENTED
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|sslLibraryVersionString
name|QString
name|QSslSocketPrivate
operator|::
name|sslLibraryVersionString
parameter_list|()
block|{
name|Q_UNIMPLEMENTED
argument_list|()
expr_stmt|;
return|return
name|QString
operator|::
name|number
argument_list|(
name|sslLibraryVersionNumber
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|sslLibraryBuildVersionNumber
name|long
name|QSslSocketPrivate
operator|::
name|sslLibraryBuildVersionNumber
parameter_list|()
block|{
name|Q_UNIMPLEMENTED
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|sslLibraryBuildVersionString
name|QString
name|QSslSocketPrivate
operator|::
name|sslLibraryBuildVersionString
parameter_list|()
block|{
name|Q_UNIMPLEMENTED
argument_list|()
expr_stmt|;
return|return
name|QString
operator|::
name|number
argument_list|(
name|sslLibraryBuildVersionNumber
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|resetDefaultCiphers
name|void
name|QSslSocketPrivate
operator|::
name|resetDefaultCiphers
parameter_list|()
block|{
name|Q_UNIMPLEMENTED
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|systemCaCertificates
name|QList
argument_list|<
name|QSslCertificate
argument_list|>
name|QSslSocketPrivate
operator|::
name|systemCaCertificates
parameter_list|()
block|{
name|Q_UNIMPLEMENTED
argument_list|()
expr_stmt|;
name|ensureInitialized
argument_list|()
expr_stmt|;
name|QList
argument_list|<
name|QSslCertificate
argument_list|>
name|systemCerts
decl_stmt|;
return|return
name|systemCerts
return|;
block|}
end_function
begin_function
DECL|function|startClientEncryption
name|void
name|QSslSocketBackendPrivate
operator|::
name|startClientEncryption
parameter_list|()
block|{
name|Q_UNIMPLEMENTED
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|startServerEncryption
name|void
name|QSslSocketBackendPrivate
operator|::
name|startServerEncryption
parameter_list|()
block|{
name|Q_UNIMPLEMENTED
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|transmit
name|void
name|QSslSocketBackendPrivate
operator|::
name|transmit
parameter_list|()
block|{
name|Q_UNIMPLEMENTED
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|disconnectFromHost
name|void
name|QSslSocketBackendPrivate
operator|::
name|disconnectFromHost
parameter_list|()
block|{
name|Q_UNIMPLEMENTED
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|disconnected
name|void
name|QSslSocketBackendPrivate
operator|::
name|disconnected
parameter_list|()
block|{
name|Q_UNIMPLEMENTED
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sessionCipher
name|QSslCipher
name|QSslSocketBackendPrivate
operator|::
name|sessionCipher
parameter_list|()
specifier|const
block|{
name|Q_UNIMPLEMENTED
argument_list|()
expr_stmt|;
return|return
name|QSslCipher
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|sessionProtocol
name|QSsl
operator|::
name|SslProtocol
name|QSslSocketBackendPrivate
operator|::
name|sessionProtocol
parameter_list|()
specifier|const
block|{
name|Q_UNIMPLEMENTED
argument_list|()
expr_stmt|;
return|return
name|QSsl
operator|::
name|UnknownProtocol
return|;
block|}
end_function
begin_function
DECL|function|continueHandshake
name|void
name|QSslSocketBackendPrivate
operator|::
name|continueHandshake
parameter_list|()
block|{
name|Q_UNIMPLEMENTED
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|verify
name|QList
argument_list|<
name|QSslError
argument_list|>
name|QSslSocketBackendPrivate
operator|::
name|verify
parameter_list|(
name|QList
argument_list|<
name|QSslCertificate
argument_list|>
name|certificateChain
parameter_list|,
specifier|const
name|QString
modifier|&
name|hostName
parameter_list|)
block|{
name|Q_UNIMPLEMENTED
argument_list|()
expr_stmt|;
name|Q_UNUSED
argument_list|(
argument|certificateChain
argument_list|)
name|Q_UNUSED
argument_list|(
argument|hostName
argument_list|)
name|QList
argument_list|<
name|QSslError
argument_list|>
name|errors
decl_stmt|;
return|return
name|errors
return|;
block|}
end_function
begin_function
DECL|function|importPKCS12
name|bool
name|QSslSocketBackendPrivate
operator|::
name|importPKCS12
parameter_list|(
name|QIODevice
modifier|*
name|device
parameter_list|,
name|QSslKey
modifier|*
name|key
parameter_list|,
name|QSslCertificate
modifier|*
name|cert
parameter_list|,
name|QList
argument_list|<
name|QSslCertificate
argument_list|>
modifier|*
name|caCertificates
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|passPhrase
parameter_list|)
block|{
name|Q_UNIMPLEMENTED
argument_list|()
expr_stmt|;
name|Q_UNUSED
argument_list|(
argument|device
argument_list|)
name|Q_UNUSED
argument_list|(
argument|key
argument_list|)
name|Q_UNUSED
argument_list|(
argument|cert
argument_list|)
name|Q_UNUSED
argument_list|(
argument|caCertificates
argument_list|)
name|Q_UNUSED
argument_list|(
argument|passPhrase
argument_list|)
return|return
literal|false
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
