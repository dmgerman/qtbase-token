begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Jeremy LainÃ©<jeremy.laine@m4x.org> ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtNetwork module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QASN1ELEMENT_P_H
end_ifndef
begin_define
DECL|macro|QASN1ELEMENT_P_H
define|#
directive|define
name|QASN1ELEMENT_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists for the convenience
end_comment
begin_comment
comment|// of the QLibrary class.  This header file may change from
end_comment
begin_comment
comment|// version to version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|<QtCore/qdatetime.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qmap.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|macro|RSA_ENCRYPTION_OID
define|#
directive|define
name|RSA_ENCRYPTION_OID
value|QByteArrayLiteral("1.2.840.113549.1.1.1")
DECL|macro|DSA_ENCRYPTION_OID
define|#
directive|define
name|DSA_ENCRYPTION_OID
value|QByteArrayLiteral("1.2.840.10040.4.1")
DECL|macro|EC_ENCRYPTION_OID
define|#
directive|define
name|EC_ENCRYPTION_OID
value|QByteArrayLiteral("1.2.840.10045.2.1")
name|class
name|Q_AUTOTEST_EXPORT
name|QAsn1Element
block|{
name|public
label|:
enum|enum
name|ElementType
block|{
comment|// universal
name|BooleanType
init|=
literal|0x01
block|,
name|IntegerType
init|=
literal|0x02
block|,
name|BitStringType
init|=
literal|0x03
block|,
name|OctetStringType
init|=
literal|0x04
block|,
name|NullType
init|=
literal|0x05
block|,
name|ObjectIdentifierType
init|=
literal|0x06
block|,
name|Utf8StringType
init|=
literal|0x0c
block|,
name|PrintableStringType
init|=
literal|0x13
block|,
name|TeletexStringType
init|=
literal|0x14
block|,
name|UtcTimeType
init|=
literal|0x17
block|,
name|GeneralizedTimeType
init|=
literal|0x18
block|,
name|SequenceType
init|=
literal|0x30
block|,
name|SetType
init|=
literal|0x31
block|,
comment|// GeneralNameTypes
name|Rfc822NameType
init|=
literal|0x81
block|,
name|DnsNameType
init|=
literal|0x82
block|,
name|UniformResourceIdentifierType
init|=
literal|0x86
block|,
comment|// context specific
name|Context0Type
init|=
literal|0xA0
block|,
name|Context1Type
init|=
literal|0xA1
block|,
name|Context3Type
init|=
literal|0xA3
block|}
enum|;
name|explicit
name|QAsn1Element
parameter_list|(
name|quint8
name|type
init|=
literal|0
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|value
init|=
name|QByteArray
argument_list|()
parameter_list|)
function_decl|;
name|bool
name|read
parameter_list|(
name|QDataStream
modifier|&
name|data
parameter_list|)
function_decl|;
name|bool
name|read
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|data
parameter_list|)
function_decl|;
name|void
name|write
argument_list|(
name|QDataStream
operator|&
name|data
argument_list|)
decl|const
decl_stmt|;
specifier|static
name|QAsn1Element
name|fromBool
parameter_list|(
name|bool
name|val
parameter_list|)
function_decl|;
specifier|static
name|QAsn1Element
name|fromInteger
parameter_list|(
name|unsigned
name|int
name|val
parameter_list|)
function_decl|;
specifier|static
name|QAsn1Element
name|fromVector
argument_list|(
specifier|const
name|QVector
operator|<
name|QAsn1Element
operator|>
operator|&
name|items
argument_list|)
decl_stmt|;
specifier|static
name|QAsn1Element
name|fromObjectId
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|id
parameter_list|)
function_decl|;
name|bool
name|toBool
argument_list|(
name|bool
operator|*
name|ok
operator|=
literal|0
argument_list|)
decl|const
decl_stmt|;
name|QDateTime
name|toDateTime
argument_list|()
specifier|const
expr_stmt|;
name|QMultiMap
operator|<
name|QByteArray
operator|,
name|QString
operator|>
name|toInfo
argument_list|()
specifier|const
expr_stmt|;
name|qint64
name|toInteger
argument_list|(
name|bool
operator|*
name|ok
operator|=
literal|0
argument_list|)
decl|const
decl_stmt|;
name|QVector
operator|<
name|QAsn1Element
operator|>
name|toVector
argument_list|()
specifier|const
expr_stmt|;
name|QByteArray
name|toObjectId
argument_list|()
specifier|const
expr_stmt|;
name|QByteArray
name|toObjectName
argument_list|()
specifier|const
expr_stmt|;
name|QString
name|toString
argument_list|()
specifier|const
expr_stmt|;
name|quint8
name|type
argument_list|()
specifier|const
block|{
return|return
name|mType
return|;
block|}
name|QByteArray
name|value
argument_list|()
specifier|const
block|{
return|return
name|mValue
return|;
block|}
name|friend
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QAsn1Element
operator|&
operator|,
specifier|const
name|QAsn1Element
operator|&
operator|)
expr_stmt|;
name|friend
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|QAsn1Element
operator|&
operator|,
specifier|const
name|QAsn1Element
operator|&
operator|)
expr_stmt|;
name|private
label|:
name|quint8
name|mType
decl_stmt|;
name|QByteArray
name|mValue
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_expr_stmt
name|Q_DECLARE_TYPEINFO
argument_list|(
name|QAsn1Element
argument_list|,
name|Q_MOVABLE_TYPE
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|function|operator
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QAsn1Element
operator|&
name|e1
operator|,
specifier|const
name|QAsn1Element
operator|&
name|e2
operator|)
block|{
return|return
name|e1
operator|.
name|mType
operator|==
name|e2
operator|.
name|mType
operator|&&
name|e1
operator|.
name|mValue
operator|==
name|e2
operator|.
name|mValue
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|operator
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|QAsn1Element
operator|&
name|e1
operator|,
specifier|const
name|QAsn1Element
operator|&
name|e2
operator|)
block|{
return|return
name|e1
operator|.
name|mType
operator|!=
name|e2
operator|.
name|mType
operator|||
name|e1
operator|.
name|mValue
operator|!=
name|e2
operator|.
name|mValue
return|;
block|}
end_expr_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
end_unit
