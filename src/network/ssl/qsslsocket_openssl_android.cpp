begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtNetwork module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|/**************************************************************************** ** ** In addition, as a special exception, the copyright holders listed above give ** permission to link the code of its release of Qt with the OpenSSL project's ** "OpenSSL" library (or modified versions of the "OpenSSL" library that use the ** same license as the original version), and distribute the linked executables. ** ** You must comply with the GNU General Public License version 2 in all ** respects for all of the code used other than the "OpenSSL" code.  If you ** modify this file, you may extend this exception to your version of the file, ** but you are not obligated to do so.  If you do not wish to do so, delete ** this exception statement from your version of this file. ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qsslsocket_openssl_p.h"
end_include
begin_include
include|#
directive|include
file|<jni.h>
end_include
begin_include
include|#
directive|include
file|<android/log.h>
end_include
begin_decl_stmt
DECL|variable|javaVM
specifier|static
name|JavaVM
modifier|*
name|javaVM
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|appClass
specifier|static
name|jclass
name|appClass
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|getSslCertificatesMethodID
specifier|static
name|jmethodID
name|getSslCertificatesMethodID
decl_stmt|;
end_decl_stmt
begin_struct
DECL|struct|AttachedJNIEnv
struct|struct
name|AttachedJNIEnv
block|{
DECL|function|AttachedJNIEnv
name|AttachedJNIEnv
parameter_list|()
block|{
name|attached
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|javaVM
operator|->
name|GetEnv
argument_list|(
operator|(
name|void
operator|*
operator|*
operator|)
operator|&
name|jniEnv
argument_list|,
name|JNI_VERSION_1_6
argument_list|)
operator|<
literal|0
condition|)
block|{
if|if
condition|(
name|javaVM
operator|->
name|AttachCurrentThread
argument_list|(
operator|&
name|jniEnv
argument_list|,
name|NULL
argument_list|)
operator|<
literal|0
condition|)
block|{
name|__android_log_print
argument_list|(
name|ANDROID_LOG_ERROR
argument_list|,
literal|"Qt"
argument_list|,
literal|"AttachCurrentThread failed"
argument_list|)
expr_stmt|;
name|jniEnv
operator|=
literal|0
expr_stmt|;
return|return;
block|}
name|attached
operator|=
literal|true
expr_stmt|;
block|}
block|}
DECL|function|~AttachedJNIEnv
name|~
name|AttachedJNIEnv
parameter_list|()
block|{
if|if
condition|(
name|attached
condition|)
name|javaVM
operator|->
name|DetachCurrentThread
argument_list|()
expr_stmt|;
block|}
DECL|member|attached
name|bool
name|attached
decl_stmt|;
DECL|member|jniEnv
name|JNIEnv
modifier|*
name|jniEnv
decl_stmt|;
block|}
struct|;
end_struct
begin_decl_stmt
DECL|variable|logTag
specifier|static
specifier|const
name|char
name|logTag
index|[]
init|=
literal|"Qt"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|classErrorMsg
specifier|static
specifier|const
name|char
name|classErrorMsg
index|[]
init|=
literal|"Can't find class \"%s\""
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|methodErrorMsg
specifier|static
specifier|const
name|char
name|methodErrorMsg
index|[]
init|=
literal|"Can't find method \"%s%s\""
decl_stmt|;
end_decl_stmt
begin_define
DECL|macro|FIND_AND_CHECK_CLASS
define|#
directive|define
name|FIND_AND_CHECK_CLASS
parameter_list|(
name|CLASS_NAME
parameter_list|)
define|\
value|clazz = env->FindClass(CLASS_NAME); \ if (!clazz) { \     __android_log_print(ANDROID_LOG_FATAL, logTag, classErrorMsg, CLASS_NAME); \     return JNI_FALSE; \ }
end_define
begin_define
DECL|macro|GET_AND_CHECK_STATIC_METHOD
define|#
directive|define
name|GET_AND_CHECK_STATIC_METHOD
parameter_list|(
name|VAR
parameter_list|,
name|CLASS
parameter_list|,
name|METHOD_NAME
parameter_list|,
name|METHOD_SIGNATURE
parameter_list|)
define|\
value|VAR = env->GetStaticMethodID(CLASS, METHOD_NAME, METHOD_SIGNATURE); \ if (!VAR) { \     __android_log_print(ANDROID_LOG_FATAL, logTag, methodErrorMsg, METHOD_NAME, METHOD_SIGNATURE); \     return JNI_FALSE; \ }
end_define
begin_function
DECL|function|registerNatives
specifier|static
name|bool
name|registerNatives
parameter_list|(
name|JNIEnv
modifier|*
name|env
parameter_list|)
block|{
name|jclass
name|clazz
decl_stmt|;
name|FIND_AND_CHECK_CLASS
argument_list|(
literal|"org/qtproject/qt5/android/QtNative"
argument_list|)
expr_stmt|;
name|appClass
operator|=
cast|static_cast
argument_list|<
name|jclass
argument_list|>
argument_list|(
name|env
operator|->
name|NewGlobalRef
argument_list|(
name|clazz
argument_list|)
argument_list|)
expr_stmt|;
if|#
directive|if
literal|0
comment|//we don't call C++ functions from Java at this time
block|if (env->RegisterNatives(appClass, methods, sizeof(methods) / sizeof(methods[0]))< 0) {         __android_log_print(ANDROID_LOG_FATAL, logTag, "RegisterNatives failed");         return JNI_FALSE;     }
endif|#
directive|endif
name|GET_AND_CHECK_STATIC_METHOD
argument_list|(
name|getSslCertificatesMethodID
argument_list|,
name|appClass
argument_list|,
literal|"getSSLCertificates"
argument_list|,
literal|"()[[B"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|JNI_OnLoad
name|Q_DECL_EXPORT
name|jint
name|JNICALL
name|JNI_OnLoad
parameter_list|(
name|JavaVM
modifier|*
name|vm
parameter_list|,
name|void
modifier|*
comment|/*reserved*/
parameter_list|)
block|{
typedef|typedef
union|union
block|{
name|JNIEnv
modifier|*
name|nativeEnvironment
decl_stmt|;
name|void
modifier|*
name|venv
decl_stmt|;
block|}
name|UnionJNIEnvToVoid
typedef|;
name|__android_log_print
argument_list|(
name|ANDROID_LOG_INFO
argument_list|,
name|logTag
argument_list|,
literal|"Network start"
argument_list|)
expr_stmt|;
name|UnionJNIEnvToVoid
name|uenv
decl_stmt|;
name|uenv
operator|.
name|venv
operator|=
name|NULL
expr_stmt|;
name|javaVM
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|vm
operator|->
name|GetEnv
argument_list|(
operator|&
name|uenv
operator|.
name|venv
argument_list|,
name|JNI_VERSION_1_4
argument_list|)
operator|!=
name|JNI_OK
condition|)
block|{
name|__android_log_print
argument_list|(
name|ANDROID_LOG_FATAL
argument_list|,
name|logTag
argument_list|,
literal|"GetEnv failed"
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
name|JNIEnv
modifier|*
name|env
init|=
name|uenv
operator|.
name|nativeEnvironment
decl_stmt|;
if|if
condition|(
operator|!
name|registerNatives
argument_list|(
name|env
argument_list|)
condition|)
block|{
name|__android_log_print
argument_list|(
name|ANDROID_LOG_FATAL
argument_list|,
name|logTag
argument_list|,
literal|"registerNatives failed"
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
name|javaVM
operator|=
name|vm
expr_stmt|;
return|return
name|JNI_VERSION_1_4
return|;
block|}
end_function
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|fetchSslCertificateData
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|QSslSocketPrivate
operator|::
name|fetchSslCertificateData
parameter_list|()
block|{
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|certificateData
decl_stmt|;
name|AttachedJNIEnv
name|env
decl_stmt|;
if|if
condition|(
name|env
operator|.
name|jniEnv
condition|)
block|{
name|jobjectArray
name|jcertificates
init|=
cast|static_cast
argument_list|<
name|jobjectArray
argument_list|>
argument_list|(
name|env
operator|.
name|jniEnv
operator|->
name|CallStaticObjectMethod
argument_list|(
name|appClass
argument_list|,
name|getSslCertificatesMethodID
argument_list|)
argument_list|)
decl_stmt|;
name|jint
name|nCertificates
init|=
name|env
operator|.
name|jniEnv
operator|->
name|GetArrayLength
argument_list|(
name|jcertificates
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nCertificates
condition|;
operator|++
name|i
control|)
block|{
name|jbyteArray
name|jCert
init|=
cast|static_cast
argument_list|<
name|jbyteArray
argument_list|>
argument_list|(
name|env
operator|.
name|jniEnv
operator|->
name|GetObjectArrayElement
argument_list|(
name|jcertificates
argument_list|,
name|i
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|uint
name|sz
init|=
name|env
operator|.
name|jniEnv
operator|->
name|GetArrayLength
argument_list|(
name|jCert
argument_list|)
decl_stmt|;
name|jbyte
modifier|*
name|buffer
init|=
name|env
operator|.
name|jniEnv
operator|->
name|GetByteArrayElements
argument_list|(
name|jCert
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|certificateData
operator|.
name|append
argument_list|(
name|QByteArray
argument_list|(
cast|reinterpret_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
name|buffer
argument_list|)
argument_list|,
name|sz
argument_list|)
argument_list|)
expr_stmt|;
name|env
operator|.
name|jniEnv
operator|->
name|ReleaseByteArrayElements
argument_list|(
name|jCert
argument_list|,
name|buffer
argument_list|,
name|JNI_ABORT
argument_list|)
expr_stmt|;
comment|// don't copy back the elements
name|env
operator|.
name|jniEnv
operator|->
name|DeleteLocalRef
argument_list|(
name|jCert
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|certificateData
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
