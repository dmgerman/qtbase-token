begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtNetwork module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qsslsocket_openssl_symbols_p.h"
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_WIN
end_ifdef
begin_include
include|#
directive|include
file|<private/qsystemlibrary_p.h>
end_include
begin_else
else|#
directive|else
end_else
begin_include
include|#
directive|include
file|<QtCore/qlibrary.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<QtCore/qmutex.h>
end_include
begin_include
include|#
directive|include
file|<private/qmutexpool_p.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qdatetime.h>
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
end_if
begin_include
include|#
directive|include
file|<QtCore/qdir.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
comment|/*     Note to maintainer:     -------------------      We load OpenSSL symbols dynamically. Because symbols are known to     disappear, and signatures sometimes change, between releases, we need to     be careful about how this is done. To ensure we don't end up dereferencing     null function pointers, and continue running even if certain functions are     missing, we define helper functions for each of the symbols we load from     OpenSSL, all prefixed with "q_" (declared in     qsslsocket_openssl_symbols_p.h). So instead of calling SSL_connect     directly, we call q_SSL_connect, which is a function that checks if the     actual SSL_connect fptr is null, and returns a failure if it is, or calls     SSL_connect if it isn't.      This requires a somewhat tedious process of declaring each function we     want to call in OpenSSL thrice: once with the q_, in _p.h, once using the     DEFINEFUNC macros below, and once in the function that actually resolves     the symbols, below the DEFINEFUNC declarations below.      There's one DEFINEFUNC macro declared for every number of arguments     exposed by OpenSSL (feel free to extend when needed). The easiest thing to     do is to find an existing entry that matches the arg count of the function     you want to import, and do the same.      The first macro arg is the function return type. The second is the     verbatim name of the function/symbol. Then follows a list of N pairs of     argument types with a variable name, and just the variable name (char *a,     a, char *b, b, etc). Finally there's two arguments - a suitable return     statement for the error case (for an int function, return 0 or return -1     is usually right). Then either just "return" or DUMMYARG, the latter being     for void functions.      Note: Take into account that these macros and declarations are processed     at compile-time, and the result depends on the OpenSSL headers the     compiling host has installed, but the symbols are resolved at run-time,     possibly with a different version of OpenSSL. */
ifdef|#
directive|ifdef
name|SSLEAY_MACROS
name|DEFINEFUNC3
argument_list|(
name|void
operator|*
argument_list|,
name|ASN1_dup
argument_list|,
name|i2d_of_void
operator|*
name|a
argument_list|,
name|a
argument_list|,
name|d2i_of_void
operator|*
name|b
argument_list|,
name|b
argument_list|,
name|char
operator|*
name|c
argument_list|,
name|c
argument_list|, return
literal|0
argument_list|, return)
endif|#
directive|endif
name|DEFINEFUNC
argument_list|(
name|long
argument_list|,
name|ASN1_INTEGER_get
argument_list|,
name|ASN1_INTEGER
operator|*
name|a
argument_list|,
name|a
argument_list|, return
literal|0
argument_list|, return)
name|DEFINEFUNC
argument_list|(
name|unsigned
name|char
operator|*
argument_list|,
name|ASN1_STRING_data
argument_list|,
name|ASN1_STRING
operator|*
name|a
argument_list|,
name|a
argument_list|, return
literal|0
argument_list|, return)
name|DEFINEFUNC
argument_list|(
name|int
argument_list|,
name|ASN1_STRING_length
argument_list|,
name|ASN1_STRING
operator|*
name|a
argument_list|,
name|a
argument_list|, return
literal|0
argument_list|, return)
name|DEFINEFUNC4
argument_list|(
name|long
argument_list|,
name|BIO_ctrl
argument_list|,
name|BIO
operator|*
name|a
argument_list|,
name|a
argument_list|,
name|int
name|b
argument_list|,
name|b
argument_list|,
name|long
name|c
argument_list|,
name|c
argument_list|,
name|void
operator|*
name|d
argument_list|,
name|d
argument_list|, return
operator|-
literal|1
argument_list|, return)
name|DEFINEFUNC
argument_list|(
name|int
argument_list|,
name|BIO_free
argument_list|,
name|BIO
operator|*
name|a
argument_list|,
name|a
argument_list|, return
literal|0
argument_list|, return)
name|DEFINEFUNC
argument_list|(
name|BIO
operator|*
argument_list|,
name|BIO_new
argument_list|,
name|BIO_METHOD
operator|*
name|a
argument_list|,
name|a
argument_list|, return
literal|0
argument_list|, return)
name|DEFINEFUNC2
argument_list|(
name|BIO
operator|*
argument_list|,
name|BIO_new_mem_buf
argument_list|,
name|void
operator|*
name|a
argument_list|,
name|a
argument_list|,
name|int
name|b
argument_list|,
name|b
argument_list|, return
literal|0
argument_list|, return)
name|DEFINEFUNC3
argument_list|(
name|int
argument_list|,
name|BIO_read
argument_list|,
name|BIO
operator|*
name|a
argument_list|,
name|a
argument_list|,
name|void
operator|*
name|b
argument_list|,
name|b
argument_list|,
name|int
name|c
argument_list|,
name|c
argument_list|, return
operator|-
literal|1
argument_list|, return)
name|DEFINEFUNC
argument_list|(
name|BIO_METHOD
operator|*
argument_list|,
name|BIO_s_mem
argument_list|,
name|void
argument_list|,
name|DUMMYARG
argument_list|, return
literal|0
argument_list|, return)
name|DEFINEFUNC3
argument_list|(
name|int
argument_list|,
name|BIO_write
argument_list|,
name|BIO
operator|*
name|a
argument_list|,
name|a
argument_list|,
specifier|const
name|void
operator|*
name|b
argument_list|,
name|b
argument_list|,
name|int
name|c
argument_list|,
name|c
argument_list|, return
operator|-
literal|1
argument_list|, return)
name|DEFINEFUNC
argument_list|(
name|int
argument_list|,
name|BN_num_bits
argument_list|,
specifier|const
name|BIGNUM
operator|*
name|a
argument_list|,
name|a
argument_list|, return
literal|0
argument_list|, return)
name|DEFINEFUNC
argument_list|(
name|int
argument_list|,
name|CRYPTO_num_locks
argument_list|,
name|DUMMYARG
argument_list|,
name|DUMMYARG
argument_list|, return
literal|0
argument_list|, return)
name|DEFINEFUNC
argument_list|(
name|void
argument_list|,
name|CRYPTO_set_locking_callback
argument_list|,
name|void
argument_list|(
operator|*
name|a
argument_list|)
argument_list|(
name|int
argument_list|,
name|int
argument_list|,
specifier|const
name|char
operator|*
argument_list|,
name|int
argument_list|)
argument_list|,
name|a
argument_list|, return,
name|DUMMYARG
argument_list|)
name|DEFINEFUNC
argument_list|(
name|void
argument_list|,
name|CRYPTO_set_id_callback
argument_list|,
name|unsigned
name|long
argument_list|(
operator|*
name|a
argument_list|)
argument_list|()
argument_list|,
name|a
argument_list|, return,
name|DUMMYARG
argument_list|)
name|DEFINEFUNC
argument_list|(
name|void
argument_list|,
name|CRYPTO_free
argument_list|,
name|void
operator|*
name|a
argument_list|,
name|a
argument_list|, return,
name|DUMMYARG
argument_list|)
name|DEFINEFUNC
argument_list|(
name|void
argument_list|,
name|DSA_free
argument_list|,
name|DSA
operator|*
name|a
argument_list|,
name|a
argument_list|, return,
name|DUMMYARG
argument_list|)
if|#
directive|if
name|OPENSSL_VERSION_NUMBER
operator|<
literal|0x00908000L
name|DEFINEFUNC3
argument_list|(
name|X509
operator|*
argument_list|,
name|d2i_X509
argument_list|,
name|X509
operator|*
operator|*
name|a
argument_list|,
name|a
argument_list|,
name|unsigned
name|char
operator|*
operator|*
name|b
argument_list|,
name|b
argument_list|,
name|long
name|c
argument_list|,
name|c
argument_list|, return
literal|0
argument_list|, return)
else|#
directive|else
comment|// 0.9.8 broke SC and BC by changing this signature.
name|DEFINEFUNC3
argument_list|(
name|X509
operator|*
argument_list|,
name|d2i_X509
argument_list|,
name|X509
operator|*
operator|*
name|a
argument_list|,
name|a
argument_list|,
specifier|const
name|unsigned
name|char
operator|*
operator|*
name|b
argument_list|,
name|b
argument_list|,
name|long
name|c
argument_list|,
name|c
argument_list|, return
literal|0
argument_list|, return)
endif|#
directive|endif
name|DEFINEFUNC2
argument_list|(
name|char
operator|*
argument_list|,
name|ERR_error_string
argument_list|,
name|unsigned
name|long
name|a
argument_list|,
name|a
argument_list|,
name|char
operator|*
name|b
argument_list|,
name|b
argument_list|, return
literal|0
argument_list|, return)
name|DEFINEFUNC
argument_list|(
name|unsigned
name|long
argument_list|,
name|ERR_get_error
argument_list|,
name|DUMMYARG
argument_list|,
name|DUMMYARG
argument_list|, return
literal|0
argument_list|, return)
name|DEFINEFUNC
argument_list|(
specifier|const
name|EVP_CIPHER
operator|*
argument_list|,
name|EVP_des_ede3_cbc
argument_list|,
name|DUMMYARG
argument_list|,
name|DUMMYARG
argument_list|, return
literal|0
argument_list|, return)
name|DEFINEFUNC3
argument_list|(
name|int
argument_list|,
name|EVP_PKEY_assign
argument_list|,
name|EVP_PKEY
operator|*
name|a
argument_list|,
name|a
argument_list|,
name|int
name|b
argument_list|,
name|b
argument_list|,
name|char
operator|*
name|c
argument_list|,
name|c
argument_list|, return
operator|-
literal|1
argument_list|, return)
name|DEFINEFUNC2
argument_list|(
name|int
argument_list|,
name|EVP_PKEY_set1_RSA
argument_list|,
name|EVP_PKEY
operator|*
name|a
argument_list|,
name|a
argument_list|,
name|RSA
operator|*
name|b
argument_list|,
name|b
argument_list|, return
operator|-
literal|1
argument_list|, return)
name|DEFINEFUNC2
argument_list|(
name|int
argument_list|,
name|EVP_PKEY_set1_DSA
argument_list|,
name|EVP_PKEY
operator|*
name|a
argument_list|,
name|a
argument_list|,
name|DSA
operator|*
name|b
argument_list|,
name|b
argument_list|, return
operator|-
literal|1
argument_list|, return)
name|DEFINEFUNC
argument_list|(
name|void
argument_list|,
name|EVP_PKEY_free
argument_list|,
name|EVP_PKEY
operator|*
name|a
argument_list|,
name|a
argument_list|, return,
name|DUMMYARG
argument_list|)
name|DEFINEFUNC
argument_list|(
name|DSA
operator|*
argument_list|,
name|EVP_PKEY_get1_DSA
argument_list|,
name|EVP_PKEY
operator|*
name|a
argument_list|,
name|a
argument_list|, return
literal|0
argument_list|, return)
name|DEFINEFUNC
argument_list|(
name|RSA
operator|*
argument_list|,
name|EVP_PKEY_get1_RSA
argument_list|,
name|EVP_PKEY
operator|*
name|a
argument_list|,
name|a
argument_list|, return
literal|0
argument_list|, return)
name|DEFINEFUNC
argument_list|(
name|EVP_PKEY
operator|*
argument_list|,
name|EVP_PKEY_new
argument_list|,
name|DUMMYARG
argument_list|,
name|DUMMYARG
argument_list|, return
literal|0
argument_list|, return)
name|DEFINEFUNC
argument_list|(
name|int
argument_list|,
name|EVP_PKEY_type
argument_list|,
name|int
name|a
argument_list|,
name|a
argument_list|, return
name|NID_undef
argument_list|, return)
name|DEFINEFUNC2
argument_list|(
name|int
argument_list|,
name|i2d_X509
argument_list|,
name|X509
operator|*
name|a
argument_list|,
name|a
argument_list|,
name|unsigned
name|char
operator|*
operator|*
name|b
argument_list|,
name|b
argument_list|, return
operator|-
literal|1
argument_list|, return)
name|DEFINEFUNC
argument_list|(
specifier|const
name|char
operator|*
argument_list|,
name|OBJ_nid2sn
argument_list|,
name|int
name|a
argument_list|,
name|a
argument_list|, return
literal|0
argument_list|, return)
name|DEFINEFUNC
argument_list|(
name|int
argument_list|,
name|OBJ_obj2nid
argument_list|,
specifier|const
name|ASN1_OBJECT
operator|*
name|a
argument_list|,
name|a
argument_list|, return
name|NID_undef
argument_list|, return)
ifdef|#
directive|ifdef
name|SSLEAY_MACROS
name|DEFINEFUNC6
argument_list|(
name|void
operator|*
argument_list|,
name|PEM_ASN1_read_bio
argument_list|,
name|d2i_of_void
operator|*
name|a
argument_list|,
name|a
argument_list|,
specifier|const
name|char
operator|*
name|b
argument_list|,
name|b
argument_list|,
name|BIO
operator|*
name|c
argument_list|,
name|c
argument_list|,
name|void
operator|*
operator|*
name|d
argument_list|,
name|d
argument_list|,
name|pem_password_cb
operator|*
name|e
argument_list|,
name|e
argument_list|,
name|void
operator|*
name|f
argument_list|,
name|f
argument_list|, return
literal|0
argument_list|, return)
name|DEFINEFUNC6
argument_list|(
name|void
operator|*
argument_list|,
name|PEM_ASN1_write_bio
argument_list|,
name|d2i_of_void
operator|*
name|a
argument_list|,
name|a
argument_list|,
specifier|const
name|char
operator|*
name|b
argument_list|,
name|b
argument_list|,
name|BIO
operator|*
name|c
argument_list|,
name|c
argument_list|,
name|void
operator|*
operator|*
name|d
argument_list|,
name|d
argument_list|,
name|pem_password_cb
operator|*
name|e
argument_list|,
name|e
argument_list|,
name|void
operator|*
name|f
argument_list|,
name|f
argument_list|, return
literal|0
argument_list|, return)
else|#
directive|else
name|DEFINEFUNC4
argument_list|(
name|DSA
operator|*
argument_list|,
name|PEM_read_bio_DSAPrivateKey
argument_list|,
name|BIO
operator|*
name|a
argument_list|,
name|a
argument_list|,
name|DSA
operator|*
operator|*
name|b
argument_list|,
name|b
argument_list|,
name|pem_password_cb
operator|*
name|c
argument_list|,
name|c
argument_list|,
name|void
operator|*
name|d
argument_list|,
name|d
argument_list|, return
literal|0
argument_list|, return)
name|DEFINEFUNC4
argument_list|(
name|RSA
operator|*
argument_list|,
name|PEM_read_bio_RSAPrivateKey
argument_list|,
name|BIO
operator|*
name|a
argument_list|,
name|a
argument_list|,
name|RSA
operator|*
operator|*
name|b
argument_list|,
name|b
argument_list|,
name|pem_password_cb
operator|*
name|c
argument_list|,
name|c
argument_list|,
name|void
operator|*
name|d
argument_list|,
name|d
argument_list|, return
literal|0
argument_list|, return)
name|DEFINEFUNC7
argument_list|(
name|int
argument_list|,
name|PEM_write_bio_DSAPrivateKey
argument_list|,
name|BIO
operator|*
name|a
argument_list|,
name|a
argument_list|,
name|DSA
operator|*
name|b
argument_list|,
name|b
argument_list|,
specifier|const
name|EVP_CIPHER
operator|*
name|c
argument_list|,
name|c
argument_list|,
name|unsigned
name|char
operator|*
name|d
argument_list|,
name|d
argument_list|,
name|int
name|e
argument_list|,
name|e
argument_list|,
name|pem_password_cb
operator|*
name|f
argument_list|,
name|f
argument_list|,
name|void
operator|*
name|g
argument_list|,
name|g
argument_list|, return
literal|0
argument_list|, return)
name|DEFINEFUNC7
argument_list|(
name|int
argument_list|,
name|PEM_write_bio_RSAPrivateKey
argument_list|,
name|BIO
operator|*
name|a
argument_list|,
name|a
argument_list|,
name|RSA
operator|*
name|b
argument_list|,
name|b
argument_list|,
specifier|const
name|EVP_CIPHER
operator|*
name|c
argument_list|,
name|c
argument_list|,
name|unsigned
name|char
operator|*
name|d
argument_list|,
name|d
argument_list|,
name|int
name|e
argument_list|,
name|e
argument_list|,
name|pem_password_cb
operator|*
name|f
argument_list|,
name|f
argument_list|,
name|void
operator|*
name|g
argument_list|,
name|g
argument_list|, return
literal|0
argument_list|, return)
endif|#
directive|endif
name|DEFINEFUNC4
argument_list|(
name|DSA
operator|*
argument_list|,
name|PEM_read_bio_DSA_PUBKEY
argument_list|,
name|BIO
operator|*
name|a
argument_list|,
name|a
argument_list|,
name|DSA
operator|*
operator|*
name|b
argument_list|,
name|b
argument_list|,
name|pem_password_cb
operator|*
name|c
argument_list|,
name|c
argument_list|,
name|void
operator|*
name|d
argument_list|,
name|d
argument_list|, return
literal|0
argument_list|, return)
name|DEFINEFUNC4
argument_list|(
name|RSA
operator|*
argument_list|,
name|PEM_read_bio_RSA_PUBKEY
argument_list|,
name|BIO
operator|*
name|a
argument_list|,
name|a
argument_list|,
name|RSA
operator|*
operator|*
name|b
argument_list|,
name|b
argument_list|,
name|pem_password_cb
operator|*
name|c
argument_list|,
name|c
argument_list|,
name|void
operator|*
name|d
argument_list|,
name|d
argument_list|, return
literal|0
argument_list|, return)
name|DEFINEFUNC2
argument_list|(
name|int
argument_list|,
name|PEM_write_bio_DSA_PUBKEY
argument_list|,
name|BIO
operator|*
name|a
argument_list|,
name|a
argument_list|,
name|DSA
operator|*
name|b
argument_list|,
name|b
argument_list|, return
literal|0
argument_list|, return)
name|DEFINEFUNC2
argument_list|(
name|int
argument_list|,
name|PEM_write_bio_RSA_PUBKEY
argument_list|,
name|BIO
operator|*
name|a
argument_list|,
name|a
argument_list|,
name|RSA
operator|*
name|b
argument_list|,
name|b
argument_list|, return
literal|0
argument_list|, return)
name|DEFINEFUNC2
argument_list|(
name|void
argument_list|,
name|RAND_seed
argument_list|,
specifier|const
name|void
operator|*
name|a
argument_list|,
name|a
argument_list|,
name|int
name|b
argument_list|,
name|b
argument_list|, return,
name|DUMMYARG
argument_list|)
name|DEFINEFUNC
argument_list|(
name|int
argument_list|,
name|RAND_status
argument_list|,
name|void
argument_list|,
name|DUMMYARG
argument_list|, return
operator|-
literal|1
argument_list|, return)
name|DEFINEFUNC
argument_list|(
name|void
argument_list|,
name|RSA_free
argument_list|,
name|RSA
operator|*
name|a
argument_list|,
name|a
argument_list|, return,
name|DUMMYARG
argument_list|)
name|DEFINEFUNC
argument_list|(
name|int
argument_list|,
name|sk_num
argument_list|,
name|STACK
operator|*
name|a
argument_list|,
name|a
argument_list|, return
operator|-
literal|1
argument_list|, return)
name|DEFINEFUNC2
argument_list|(
name|void
argument_list|,
name|sk_pop_free
argument_list|,
name|STACK
operator|*
name|a
argument_list|,
name|a
argument_list|,
name|void
argument_list|(
operator|*
name|b
argument_list|)
argument_list|(
name|void
operator|*
argument_list|)
argument_list|,
name|b
argument_list|, return,
name|DUMMYARG
argument_list|)
if|#
directive|if
name|OPENSSL_VERSION_NUMBER
operator|>=
literal|0x10000000L
name|DEFINEFUNC
argument_list|(
name|void
argument_list|,
name|sk_free
argument_list|,
name|_STACK
operator|*
name|a
argument_list|,
name|a
argument_list|, return,
name|DUMMYARG
argument_list|)
name|DEFINEFUNC2
argument_list|(
name|void
operator|*
argument_list|,
name|sk_value
argument_list|,
name|STACK
operator|*
name|a
argument_list|,
name|a
argument_list|,
name|int
name|b
argument_list|,
name|b
argument_list|, return
literal|0
argument_list|, return)
else|#
directive|else
name|DEFINEFUNC
argument_list|(
name|void
argument_list|,
name|sk_free
argument_list|,
name|STACK
operator|*
name|a
argument_list|,
name|a
argument_list|, return,
name|DUMMYARG
argument_list|)
name|DEFINEFUNC2
argument_list|(
name|char
operator|*
argument_list|,
name|sk_value
argument_list|,
name|STACK
operator|*
name|a
argument_list|,
name|a
argument_list|,
name|int
name|b
argument_list|,
name|b
argument_list|, return
literal|0
argument_list|, return)
endif|#
directive|endif
name|DEFINEFUNC
argument_list|(
name|int
argument_list|,
name|SSL_accept
argument_list|,
name|SSL
operator|*
name|a
argument_list|,
name|a
argument_list|, return
operator|-
literal|1
argument_list|, return)
name|DEFINEFUNC
argument_list|(
name|int
argument_list|,
name|SSL_clear
argument_list|,
name|SSL
operator|*
name|a
argument_list|,
name|a
argument_list|, return
operator|-
literal|1
argument_list|, return)
name|DEFINEFUNC3
argument_list|(
name|char
operator|*
argument_list|,
name|SSL_CIPHER_description
argument_list|,
name|SSL_CIPHER
operator|*
name|a
argument_list|,
name|a
argument_list|,
name|char
operator|*
name|b
argument_list|,
name|b
argument_list|,
name|int
name|c
argument_list|,
name|c
argument_list|, return
literal|0
argument_list|, return)
name|DEFINEFUNC
argument_list|(
name|int
argument_list|,
name|SSL_connect
argument_list|,
name|SSL
operator|*
name|a
argument_list|,
name|a
argument_list|, return
operator|-
literal|1
argument_list|, return)
if|#
directive|if
name|OPENSSL_VERSION_NUMBER
operator|>=
literal|0x00908000L
comment|// 0.9.8 broke SC and BC by changing this function's signature.
name|DEFINEFUNC
argument_list|(
name|int
argument_list|,
name|SSL_CTX_check_private_key
argument_list|,
specifier|const
name|SSL_CTX
operator|*
name|a
argument_list|,
name|a
argument_list|, return
operator|-
literal|1
argument_list|, return)
else|#
directive|else
name|DEFINEFUNC
argument_list|(
name|int
argument_list|,
name|SSL_CTX_check_private_key
argument_list|,
name|SSL_CTX
operator|*
name|a
argument_list|,
name|a
argument_list|, return
operator|-
literal|1
argument_list|, return)
endif|#
directive|endif
name|DEFINEFUNC4
argument_list|(
name|long
argument_list|,
name|SSL_CTX_ctrl
argument_list|,
name|SSL_CTX
operator|*
name|a
argument_list|,
name|a
argument_list|,
name|int
name|b
argument_list|,
name|b
argument_list|,
name|long
name|c
argument_list|,
name|c
argument_list|,
name|void
operator|*
name|d
argument_list|,
name|d
argument_list|, return
operator|-
literal|1
argument_list|, return)
name|DEFINEFUNC
argument_list|(
name|void
argument_list|,
name|SSL_CTX_free
argument_list|,
name|SSL_CTX
operator|*
name|a
argument_list|,
name|a
argument_list|, return,
name|DUMMYARG
argument_list|)
if|#
directive|if
name|OPENSSL_VERSION_NUMBER
operator|>=
literal|0x10000000L
name|DEFINEFUNC
argument_list|(
name|SSL_CTX
operator|*
argument_list|,
name|SSL_CTX_new
argument_list|,
specifier|const
name|SSL_METHOD
operator|*
name|a
argument_list|,
name|a
argument_list|, return
literal|0
argument_list|, return)
else|#
directive|else
name|DEFINEFUNC
argument_list|(
name|SSL_CTX
operator|*
argument_list|,
name|SSL_CTX_new
argument_list|,
name|SSL_METHOD
operator|*
name|a
argument_list|,
name|a
argument_list|, return
literal|0
argument_list|, return)
endif|#
directive|endif
name|DEFINEFUNC2
argument_list|(
name|int
argument_list|,
name|SSL_CTX_set_cipher_list
argument_list|,
name|SSL_CTX
operator|*
name|a
argument_list|,
name|a
argument_list|,
specifier|const
name|char
operator|*
name|b
argument_list|,
name|b
argument_list|, return
operator|-
literal|1
argument_list|, return)
name|DEFINEFUNC
argument_list|(
name|int
argument_list|,
name|SSL_CTX_set_default_verify_paths
argument_list|,
name|SSL_CTX
operator|*
name|a
argument_list|,
name|a
argument_list|, return
operator|-
literal|1
argument_list|, return)
name|DEFINEFUNC3
argument_list|(
name|void
argument_list|,
name|SSL_CTX_set_verify
argument_list|,
name|SSL_CTX
operator|*
name|a
argument_list|,
name|a
argument_list|,
name|int
name|b
argument_list|,
name|b
argument_list|,
name|int
argument_list|(
operator|*
name|c
argument_list|)
argument_list|(
name|int
argument_list|,
name|X509_STORE_CTX
operator|*
argument_list|)
argument_list|,
name|c
argument_list|, return,
name|DUMMYARG
argument_list|)
name|DEFINEFUNC2
argument_list|(
name|void
argument_list|,
name|SSL_CTX_set_verify_depth
argument_list|,
name|SSL_CTX
operator|*
name|a
argument_list|,
name|a
argument_list|,
name|int
name|b
argument_list|,
name|b
argument_list|, return,
name|DUMMYARG
argument_list|)
name|DEFINEFUNC2
argument_list|(
name|int
argument_list|,
name|SSL_CTX_use_certificate
argument_list|,
name|SSL_CTX
operator|*
name|a
argument_list|,
name|a
argument_list|,
name|X509
operator|*
name|b
argument_list|,
name|b
argument_list|, return
operator|-
literal|1
argument_list|, return)
name|DEFINEFUNC3
argument_list|(
name|int
argument_list|,
name|SSL_CTX_use_certificate_file
argument_list|,
name|SSL_CTX
operator|*
name|a
argument_list|,
name|a
argument_list|,
specifier|const
name|char
operator|*
name|b
argument_list|,
name|b
argument_list|,
name|int
name|c
argument_list|,
name|c
argument_list|, return
operator|-
literal|1
argument_list|, return)
name|DEFINEFUNC2
argument_list|(
name|int
argument_list|,
name|SSL_CTX_use_PrivateKey
argument_list|,
name|SSL_CTX
operator|*
name|a
argument_list|,
name|a
argument_list|,
name|EVP_PKEY
operator|*
name|b
argument_list|,
name|b
argument_list|, return
operator|-
literal|1
argument_list|, return)
name|DEFINEFUNC2
argument_list|(
name|int
argument_list|,
name|SSL_CTX_use_RSAPrivateKey
argument_list|,
name|SSL_CTX
operator|*
name|a
argument_list|,
name|a
argument_list|,
name|RSA
operator|*
name|b
argument_list|,
name|b
argument_list|, return
operator|-
literal|1
argument_list|, return)
name|DEFINEFUNC3
argument_list|(
name|int
argument_list|,
name|SSL_CTX_use_PrivateKey_file
argument_list|,
name|SSL_CTX
operator|*
name|a
argument_list|,
name|a
argument_list|,
specifier|const
name|char
operator|*
name|b
argument_list|,
name|b
argument_list|,
name|int
name|c
argument_list|,
name|c
argument_list|, return
operator|-
literal|1
argument_list|, return)
name|DEFINEFUNC
argument_list|(
name|void
argument_list|,
name|SSL_free
argument_list|,
name|SSL
operator|*
name|a
argument_list|,
name|a
argument_list|, return,
name|DUMMYARG
argument_list|)
if|#
directive|if
name|OPENSSL_VERSION_NUMBER
operator|>=
literal|0x00908000L
comment|// 0.9.8 broke SC and BC by changing this function's signature.
DECL|variable|a
DECL|variable|a
name|DEFINEFUNC
argument_list|(
name|STACK_OF
argument_list|(
name|SSL_CIPHER
argument_list|)
operator|*
argument_list|,
name|SSL_get_ciphers
argument_list|,
specifier|const
name|SSL
operator|*
name|a
argument_list|,
name|a
argument_list|, return
literal|0
argument_list|, return)
else|#
directive|else
name|DEFINEFUNC
argument_list|(
name|STACK_OF
argument_list|(
name|SSL_CIPHER
argument_list|)
operator|*
argument_list|,
name|SSL_get_ciphers
argument_list|,
name|SSL
operator|*
name|a
argument_list|,
name|a
argument_list|, return
literal|0
argument_list|, return)
endif|#
directive|endif
if|#
directive|if
name|OPENSSL_VERSION_NUMBER
operator|>=
literal|0x10000000L
name|DEFINEFUNC
argument_list|(
specifier|const
name|SSL_CIPHER
operator|*
argument_list|,
name|SSL_get_current_cipher
argument_list|,
name|SSL
operator|*
name|a
argument_list|,
name|a
argument_list|, return
literal|0
argument_list|, return)
else|#
directive|else
name|DEFINEFUNC
argument_list|(
name|SSL_CIPHER
operator|*
argument_list|,
name|SSL_get_current_cipher
argument_list|,
name|SSL
operator|*
name|a
argument_list|,
name|a
argument_list|, return
literal|0
argument_list|, return)
endif|#
directive|endif
name|DEFINEFUNC2
argument_list|(
name|int
argument_list|,
name|SSL_get_error
argument_list|,
name|SSL
operator|*
name|a
argument_list|,
name|a
argument_list|,
name|int
name|b
argument_list|,
name|b
argument_list|, return
operator|-
literal|1
argument_list|, return)
name|DEFINEFUNC
argument_list|(
name|STACK_OF
argument_list|(
name|X509
argument_list|)
operator|*
argument_list|,
name|SSL_get_peer_cert_chain
argument_list|,
name|SSL
operator|*
name|a
argument_list|,
name|a
argument_list|, return
literal|0
argument_list|, return)
name|DEFINEFUNC
argument_list|(
name|X509
operator|*
argument_list|,
name|SSL_get_peer_certificate
argument_list|,
name|SSL
operator|*
name|a
argument_list|,
name|a
argument_list|, return
literal|0
argument_list|, return)
if|#
directive|if
name|OPENSSL_VERSION_NUMBER
operator|>=
literal|0x00908000L
comment|// 0.9.8 broke SC and BC by changing this function's signature.
name|DEFINEFUNC
argument_list|(
name|long
argument_list|,
name|SSL_get_verify_result
argument_list|,
specifier|const
name|SSL
operator|*
name|a
argument_list|,
name|a
argument_list|, return
operator|-
literal|1
argument_list|, return)
else|#
directive|else
name|DEFINEFUNC
argument_list|(
name|long
argument_list|,
name|SSL_get_verify_result
argument_list|,
name|SSL
operator|*
name|a
argument_list|,
name|a
argument_list|, return
operator|-
literal|1
argument_list|, return)
endif|#
directive|endif
name|DEFINEFUNC
argument_list|(
name|int
argument_list|,
name|SSL_library_init
argument_list|,
name|void
argument_list|,
name|DUMMYARG
argument_list|, return
operator|-
literal|1
argument_list|, return)
name|DEFINEFUNC
argument_list|(
name|void
argument_list|,
name|SSL_load_error_strings
argument_list|,
name|void
argument_list|,
name|DUMMYARG
argument_list|, return,
name|DUMMYARG
argument_list|)
name|DEFINEFUNC
argument_list|(
name|SSL
operator|*
argument_list|,
name|SSL_new
argument_list|,
name|SSL_CTX
operator|*
name|a
argument_list|,
name|a
argument_list|, return
literal|0
argument_list|, return)
if|#
directive|if
name|OPENSSL_VERSION_NUMBER
operator|>=
literal|0x0090806fL
operator|&&
operator|!
name|defined
argument_list|(
name|OPENSSL_NO_TLSEXT
argument_list|)
name|DEFINEFUNC4
argument_list|(
name|long
argument_list|,
name|SSL_ctrl
argument_list|,
name|SSL
operator|*
name|a
argument_list|,
name|a
argument_list|,
name|int
name|cmd
argument_list|,
name|cmd
argument_list|,
name|long
name|larg
argument_list|,
name|larg
argument_list|,
specifier|const
name|void
operator|*
name|parg
argument_list|,
name|parg
argument_list|, return
operator|-
literal|1
argument_list|, return)
endif|#
directive|endif
name|DEFINEFUNC3
argument_list|(
name|int
argument_list|,
name|SSL_read
argument_list|,
name|SSL
operator|*
name|a
argument_list|,
name|a
argument_list|,
name|void
operator|*
name|b
argument_list|,
name|b
argument_list|,
name|int
name|c
argument_list|,
name|c
argument_list|, return
operator|-
literal|1
argument_list|, return)
name|DEFINEFUNC3
argument_list|(
name|void
argument_list|,
name|SSL_set_bio
argument_list|,
name|SSL
operator|*
name|a
argument_list|,
name|a
argument_list|,
name|BIO
operator|*
name|b
argument_list|,
name|b
argument_list|,
name|BIO
operator|*
name|c
argument_list|,
name|c
argument_list|, return,
name|DUMMYARG
argument_list|)
name|DEFINEFUNC
argument_list|(
name|void
argument_list|,
name|SSL_set_accept_state
argument_list|,
name|SSL
operator|*
name|a
argument_list|,
name|a
argument_list|, return,
name|DUMMYARG
argument_list|)
name|DEFINEFUNC
argument_list|(
name|void
argument_list|,
name|SSL_set_connect_state
argument_list|,
name|SSL
operator|*
name|a
argument_list|,
name|a
argument_list|, return,
name|DUMMYARG
argument_list|)
name|DEFINEFUNC
argument_list|(
name|int
argument_list|,
name|SSL_shutdown
argument_list|,
name|SSL
operator|*
name|a
argument_list|,
name|a
argument_list|, return
operator|-
literal|1
argument_list|, return)
if|#
directive|if
name|OPENSSL_VERSION_NUMBER
operator|>=
literal|0x10000000L
name|DEFINEFUNC
argument_list|(
specifier|const
name|SSL_METHOD
operator|*
argument_list|,
name|SSLv2_client_method
argument_list|,
name|DUMMYARG
argument_list|,
name|DUMMYARG
argument_list|, return
literal|0
argument_list|, return)
name|DEFINEFUNC
argument_list|(
specifier|const
name|SSL_METHOD
operator|*
argument_list|,
name|SSLv3_client_method
argument_list|,
name|DUMMYARG
argument_list|,
name|DUMMYARG
argument_list|, return
literal|0
argument_list|, return)
name|DEFINEFUNC
argument_list|(
specifier|const
name|SSL_METHOD
operator|*
argument_list|,
name|SSLv23_client_method
argument_list|,
name|DUMMYARG
argument_list|,
name|DUMMYARG
argument_list|, return
literal|0
argument_list|, return)
name|DEFINEFUNC
argument_list|(
specifier|const
name|SSL_METHOD
operator|*
argument_list|,
name|TLSv1_client_method
argument_list|,
name|DUMMYARG
argument_list|,
name|DUMMYARG
argument_list|, return
literal|0
argument_list|, return)
name|DEFINEFUNC
argument_list|(
specifier|const
name|SSL_METHOD
operator|*
argument_list|,
name|SSLv2_server_method
argument_list|,
name|DUMMYARG
argument_list|,
name|DUMMYARG
argument_list|, return
literal|0
argument_list|, return)
name|DEFINEFUNC
argument_list|(
specifier|const
name|SSL_METHOD
operator|*
argument_list|,
name|SSLv3_server_method
argument_list|,
name|DUMMYARG
argument_list|,
name|DUMMYARG
argument_list|, return
literal|0
argument_list|, return)
name|DEFINEFUNC
argument_list|(
specifier|const
name|SSL_METHOD
operator|*
argument_list|,
name|SSLv23_server_method
argument_list|,
name|DUMMYARG
argument_list|,
name|DUMMYARG
argument_list|, return
literal|0
argument_list|, return)
name|DEFINEFUNC
argument_list|(
specifier|const
name|SSL_METHOD
operator|*
argument_list|,
name|TLSv1_server_method
argument_list|,
name|DUMMYARG
argument_list|,
name|DUMMYARG
argument_list|, return
literal|0
argument_list|, return)
else|#
directive|else
name|DEFINEFUNC
argument_list|(
name|SSL_METHOD
operator|*
argument_list|,
name|SSLv2_client_method
argument_list|,
name|DUMMYARG
argument_list|,
name|DUMMYARG
argument_list|, return
literal|0
argument_list|, return)
name|DEFINEFUNC
argument_list|(
name|SSL_METHOD
operator|*
argument_list|,
name|SSLv3_client_method
argument_list|,
name|DUMMYARG
argument_list|,
name|DUMMYARG
argument_list|, return
literal|0
argument_list|, return)
name|DEFINEFUNC
argument_list|(
name|SSL_METHOD
operator|*
argument_list|,
name|SSLv23_client_method
argument_list|,
name|DUMMYARG
argument_list|,
name|DUMMYARG
argument_list|, return
literal|0
argument_list|, return)
name|DEFINEFUNC
argument_list|(
name|SSL_METHOD
operator|*
argument_list|,
name|TLSv1_client_method
argument_list|,
name|DUMMYARG
argument_list|,
name|DUMMYARG
argument_list|, return
literal|0
argument_list|, return)
name|DEFINEFUNC
argument_list|(
name|SSL_METHOD
operator|*
argument_list|,
name|SSLv2_server_method
argument_list|,
name|DUMMYARG
argument_list|,
name|DUMMYARG
argument_list|, return
literal|0
argument_list|, return)
name|DEFINEFUNC
argument_list|(
name|SSL_METHOD
operator|*
argument_list|,
name|SSLv3_server_method
argument_list|,
name|DUMMYARG
argument_list|,
name|DUMMYARG
argument_list|, return
literal|0
argument_list|, return)
name|DEFINEFUNC
argument_list|(
name|SSL_METHOD
operator|*
argument_list|,
name|SSLv23_server_method
argument_list|,
name|DUMMYARG
argument_list|,
name|DUMMYARG
argument_list|, return
literal|0
argument_list|, return)
name|DEFINEFUNC
argument_list|(
name|SSL_METHOD
operator|*
argument_list|,
name|TLSv1_server_method
argument_list|,
name|DUMMYARG
argument_list|,
name|DUMMYARG
argument_list|, return
literal|0
argument_list|, return)
endif|#
directive|endif
name|DEFINEFUNC3
argument_list|(
name|int
argument_list|,
name|SSL_write
argument_list|,
name|SSL
operator|*
name|a
argument_list|,
name|a
argument_list|,
specifier|const
name|void
operator|*
name|b
argument_list|,
name|b
argument_list|,
name|int
name|c
argument_list|,
name|c
argument_list|, return
operator|-
literal|1
argument_list|, return)
name|DEFINEFUNC2
argument_list|(
name|int
argument_list|,
name|X509_cmp
argument_list|,
name|X509
operator|*
name|a
argument_list|,
name|a
argument_list|,
name|X509
operator|*
name|b
argument_list|,
name|b
argument_list|, return
operator|-
literal|1
argument_list|, return)
ifndef|#
directive|ifndef
name|SSLEAY_MACROS
name|DEFINEFUNC
argument_list|(
name|X509
operator|*
argument_list|,
name|X509_dup
argument_list|,
name|X509
operator|*
name|a
argument_list|,
name|a
argument_list|, return
literal|0
argument_list|, return)
endif|#
directive|endif
name|DEFINEFUNC
argument_list|(
name|ASN1_OBJECT
operator|*
argument_list|,
name|X509_EXTENSION_get_object
argument_list|,
name|X509_EXTENSION
operator|*
name|a
argument_list|,
name|a
argument_list|, return
literal|0
argument_list|, return)
name|DEFINEFUNC
argument_list|(
name|void
argument_list|,
name|X509_free
argument_list|,
name|X509
operator|*
name|a
argument_list|,
name|a
argument_list|, return,
name|DUMMYARG
argument_list|)
name|DEFINEFUNC2
argument_list|(
name|X509_EXTENSION
operator|*
argument_list|,
name|X509_get_ext
argument_list|,
name|X509
operator|*
name|a
argument_list|,
name|a
argument_list|,
name|int
name|b
argument_list|,
name|b
argument_list|, return
literal|0
argument_list|, return)
name|DEFINEFUNC
argument_list|(
name|int
argument_list|,
name|X509_get_ext_count
argument_list|,
name|X509
operator|*
name|a
argument_list|,
name|a
argument_list|, return
literal|0
argument_list|, return)
name|DEFINEFUNC4
argument_list|(
name|void
operator|*
argument_list|,
name|X509_get_ext_d2i
argument_list|,
name|X509
operator|*
name|a
argument_list|,
name|a
argument_list|,
name|int
name|b
argument_list|,
name|b
argument_list|,
name|int
operator|*
name|c
argument_list|,
name|c
argument_list|,
name|int
operator|*
name|d
argument_list|,
name|d
argument_list|, return
literal|0
argument_list|, return)
name|DEFINEFUNC
argument_list|(
name|X509_NAME
operator|*
argument_list|,
name|X509_get_issuer_name
argument_list|,
name|X509
operator|*
name|a
argument_list|,
name|a
argument_list|, return
literal|0
argument_list|, return)
name|DEFINEFUNC
argument_list|(
name|X509_NAME
operator|*
argument_list|,
name|X509_get_subject_name
argument_list|,
name|X509
operator|*
name|a
argument_list|,
name|a
argument_list|, return
literal|0
argument_list|, return)
name|DEFINEFUNC
argument_list|(
name|int
argument_list|,
name|X509_verify_cert
argument_list|,
name|X509_STORE_CTX
operator|*
name|a
argument_list|,
name|a
argument_list|, return
operator|-
literal|1
argument_list|, return)
name|DEFINEFUNC3
argument_list|(
name|char
operator|*
argument_list|,
name|X509_NAME_oneline
argument_list|,
name|X509_NAME
operator|*
name|a
argument_list|,
name|a
argument_list|,
name|char
operator|*
name|b
argument_list|,
name|b
argument_list|,
name|int
name|c
argument_list|,
name|c
argument_list|, return
literal|0
argument_list|, return)
name|DEFINEFUNC
argument_list|(
name|EVP_PKEY
operator|*
argument_list|,
name|X509_PUBKEY_get
argument_list|,
name|X509_PUBKEY
operator|*
name|a
argument_list|,
name|a
argument_list|, return
literal|0
argument_list|, return)
name|DEFINEFUNC
argument_list|(
name|void
argument_list|,
name|X509_STORE_free
argument_list|,
name|X509_STORE
operator|*
name|a
argument_list|,
name|a
argument_list|, return,
name|DUMMYARG
argument_list|)
name|DEFINEFUNC
argument_list|(
name|X509_STORE
operator|*
argument_list|,
name|X509_STORE_new
argument_list|,
name|DUMMYARG
argument_list|,
name|DUMMYARG
argument_list|, return
literal|0
argument_list|, return)
name|DEFINEFUNC2
argument_list|(
name|int
argument_list|,
name|X509_STORE_add_cert
argument_list|,
name|X509_STORE
operator|*
name|a
argument_list|,
name|a
argument_list|,
name|X509
operator|*
name|b
argument_list|,
name|b
argument_list|, return
literal|0
argument_list|, return)
name|DEFINEFUNC
argument_list|(
name|void
argument_list|,
name|X509_STORE_CTX_free
argument_list|,
name|X509_STORE_CTX
operator|*
name|a
argument_list|,
name|a
argument_list|, return,
name|DUMMYARG
argument_list|)
name|DEFINEFUNC4
argument_list|(
name|int
argument_list|,
name|X509_STORE_CTX_init
argument_list|,
name|X509_STORE_CTX
operator|*
name|a
argument_list|,
name|a
argument_list|,
name|X509_STORE
operator|*
name|b
argument_list|,
name|b
argument_list|,
name|X509
operator|*
name|c
argument_list|,
name|c
argument_list|,
name|STACK_OF
argument_list|(
name|X509
argument_list|)
operator|*
name|d
argument_list|,
name|d
argument_list|, return
operator|-
literal|1
argument_list|, return)
name|DEFINEFUNC2
argument_list|(
name|int
argument_list|,
name|X509_STORE_CTX_set_purpose
argument_list|,
name|X509_STORE_CTX
operator|*
name|a
argument_list|,
name|a
argument_list|,
name|int
name|b
argument_list|,
name|b
argument_list|, return
operator|-
literal|1
argument_list|, return)
name|DEFINEFUNC
argument_list|(
name|X509_STORE_CTX
operator|*
argument_list|,
name|X509_STORE_CTX_new
argument_list|,
name|DUMMYARG
argument_list|,
name|DUMMYARG
argument_list|, return
literal|0
argument_list|, return)
ifdef|#
directive|ifdef
name|SSLEAY_MACROS
name|DEFINEFUNC2
argument_list|(
name|int
argument_list|,
name|i2d_DSAPrivateKey
argument_list|,
specifier|const
name|DSA
operator|*
name|a
argument_list|,
name|a
argument_list|,
name|unsigned
name|char
operator|*
operator|*
name|b
argument_list|,
name|b
argument_list|, return
operator|-
literal|1
argument_list|, return)
name|DEFINEFUNC2
argument_list|(
name|int
argument_list|,
name|i2d_RSAPrivateKey
argument_list|,
specifier|const
name|RSA
operator|*
name|a
argument_list|,
name|a
argument_list|,
name|unsigned
name|char
operator|*
operator|*
name|b
argument_list|,
name|b
argument_list|, return
operator|-
literal|1
argument_list|, return)
name|DEFINEFUNC3
argument_list|(
name|RSA
operator|*
argument_list|,
name|d2i_RSAPrivateKey
argument_list|,
name|RSA
operator|*
operator|*
name|a
argument_list|,
name|a
argument_list|,
name|unsigned
name|char
operator|*
operator|*
name|b
argument_list|,
name|b
argument_list|,
name|long
name|c
argument_list|,
name|c
argument_list|, return
literal|0
argument_list|, return)
name|DEFINEFUNC3
argument_list|(
name|DSA
operator|*
argument_list|,
name|d2i_DSAPrivateKey
argument_list|,
name|DSA
operator|*
operator|*
name|a
argument_list|,
name|a
argument_list|,
name|unsigned
name|char
operator|*
operator|*
name|b
argument_list|,
name|b
argument_list|,
name|long
name|c
argument_list|,
name|c
argument_list|, return
literal|0
argument_list|, return)
endif|#
directive|endif
name|DEFINEFUNC
argument_list|(
name|void
argument_list|,
name|OPENSSL_add_all_algorithms_noconf
argument_list|,
name|void
argument_list|,
name|DUMMYARG
argument_list|, return,
name|DUMMYARG
argument_list|)
name|DEFINEFUNC
argument_list|(
name|void
argument_list|,
name|OPENSSL_add_all_algorithms_conf
argument_list|,
name|void
argument_list|,
name|DUMMYARG
argument_list|, return,
name|DUMMYARG
argument_list|)
name|DEFINEFUNC3
argument_list|(
name|int
argument_list|,
name|SSL_CTX_load_verify_locations
argument_list|,
name|SSL_CTX
operator|*
name|ctx
argument_list|,
name|ctx
argument_list|,
specifier|const
name|char
operator|*
name|CAfile
argument_list|,
name|CAfile
argument_list|,
specifier|const
name|char
operator|*
name|CApath
argument_list|,
name|CApath
argument_list|, return
literal|0
argument_list|, return)
name|DEFINEFUNC
argument_list|(
name|long
argument_list|,
name|SSLeay
argument_list|,
name|void
argument_list|,
name|DUMMYARG
argument_list|, return
literal|0
argument_list|, return)
ifdef|#
directive|ifdef
name|Q_OS_SYMBIAN
DECL|macro|RESOLVEFUNC
define|#
directive|define
name|RESOLVEFUNC
parameter_list|(
name|func
parameter_list|,
name|ordinal
parameter_list|,
name|lib
parameter_list|)
define|\
value|if (!(_q_##func = _q_PTR_##func(lib->resolve(#ordinal)))) \         qWarning("QSslSocket: cannot resolve "#func);
else|#
directive|else
define|#
directive|define
name|RESOLVEFUNC
parameter_list|(
name|func
parameter_list|)
define|\
value|if (!(_q_##func = _q_PTR_##func(libs.first->resolve(#func)))     \&& !(_q_##func = _q_PTR_##func(libs.second->resolve(#func)))) \         qWarning("QSslSocket: cannot resolve "#func);
endif|#
directive|endif
if|#
directive|if
operator|!
name|defined
name|QT_LINKED_OPENSSL
ifdef|#
directive|ifdef
name|QT_NO_LIBRARY
name|bool
name|q_resolveOpenSslSymbols
argument_list|()
argument_list|{
name|qWarning
argument_list|(
literal|"QSslSocket: unable to resolve symbols. "
literal|"QT_NO_LIBRARY is defined which means runtime resolving of "
literal|"libraries won't work."
argument_list|)
argument_list|;
name|qWarning
argument_list|(
literal|"Either compile Qt statically or with support for runtime resolving "
literal|"of libraries."
argument_list|)
argument_list|;     return
literal|false
argument_list|; }
else|#
directive|else
ifdef|#
directive|ifdef
name|Q_OS_UNIX
decl|static
name|bool
name|libGreaterThan
argument_list|(
specifier|const
name|QString
operator|&
name|lhs
argument_list|,
specifier|const
name|QString
operator|&
name|rhs
argument_list|)
argument_list|{
name|QStringList
name|lhsparts
operator|=
name|lhs
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
argument_list|)
argument_list|;
name|QStringList
name|rhsparts
operator|=
name|rhs
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
argument_list|)
argument_list|;
name|Q_ASSERT
argument_list|(
name|lhsparts
operator|.
name|count
argument_list|()
operator|>
literal|1
operator|&&
name|rhsparts
operator|.
name|count
argument_list|()
operator|>
literal|1
argument_list|)
argument_list|;      for
operator|(
name|int
name|i
operator|=
literal|1
expr|;
name|i
operator|<
name|rhsparts
operator|.
name|count
argument_list|()
expr|;
operator|++
name|i
operator|)
block|{
if|if
condition|(
name|lhsparts
operator|.
name|count
argument_list|()
operator|<=
name|i
condition|)
comment|// left hand side is shorter, so it's less than rhs
return|return
literal|false
return|;
name|bool
name|ok
operator|=
literal|false
argument_list|;
name|int
name|b
operator|=
literal|0
argument_list|;
name|int
name|a
operator|=
name|lhsparts
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|toInt
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|;         if
operator|(
name|ok
operator|)
name|b
operator|=
name|rhsparts
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|toInt
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|;         if
operator|(
name|ok
operator|)
block|{
comment|// both toInt succeeded
if|if
condition|(
name|a
operator|==
name|b
condition|)
continue|continue;
return|return
name|a
operator|>
name|b
return|;
end_decl_stmt
begin_block
unit|} else
block|{
comment|// compare as strings;
if|if
condition|(
name|lhsparts
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
name|rhsparts
operator|.
name|at
argument_list|(
name|i
argument_list|)
condition|)
continue|continue;
return|return
name|lhsparts
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|>
name|rhsparts
operator|.
name|at
argument_list|(
name|i
argument_list|)
return|;
block|}
end_block
begin_comment
unit|}
comment|// they compared strictly equally so far
end_comment
begin_comment
comment|// lhs cannot be less than rhs
end_comment
begin_expr_stmt
unit|return
literal|true
expr_stmt|;
end_expr_stmt
begin_function
unit|}  static
name|QStringList
name|findAllLibSsl
parameter_list|()
block|{
name|QStringList
name|paths
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_DARWIN
name|paths
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
name|qgetenv
argument_list|(
literal|"DYLD_LIBRARY_PATH"
argument_list|)
argument_list|)
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
argument_list|,
name|QString
operator|::
name|SkipEmptyParts
argument_list|)
expr_stmt|;
else|#
directive|else
name|paths
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
name|qgetenv
argument_list|(
literal|"LD_LIBRARY_PATH"
argument_list|)
argument_list|)
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
argument_list|,
name|QString
operator|::
name|SkipEmptyParts
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|paths
operator|<<
name|QLatin1String
argument_list|(
literal|"/lib"
argument_list|)
operator|<<
name|QLatin1String
argument_list|(
literal|"/usr/lib"
argument_list|)
operator|<<
name|QLatin1String
argument_list|(
literal|"/usr/local/lib"
argument_list|)
expr_stmt|;
name|QStringList
name|foundSsls
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|path
decl|,
name|paths
control|)
block|{
name|QDir
name|dir
init|=
name|QDir
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|QStringList
name|entryList
init|=
name|dir
operator|.
name|entryList
argument_list|(
name|QStringList
argument_list|()
operator|<<
name|QLatin1String
argument_list|(
literal|"libssl.*"
argument_list|)
argument_list|,
name|QDir
operator|::
name|Files
argument_list|)
decl_stmt|;
name|qSort
argument_list|(
name|entryList
operator|.
name|begin
argument_list|()
argument_list|,
name|entryList
operator|.
name|end
argument_list|()
argument_list|,
name|libGreaterThan
argument_list|)
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|entry
decl|,
name|entryList
control|)
name|foundSsls
operator|<<
name|path
operator|+
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
operator|+
name|entry
expr_stmt|;
block|}
return|return
name|foundSsls
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_WIN
end_ifdef
begin_function
specifier|static
name|QPair
argument_list|<
name|QSystemLibrary
modifier|*
argument_list|,
name|QSystemLibrary
modifier|*
argument_list|>
name|loadOpenSslWin32
parameter_list|()
block|{
name|QPair
argument_list|<
name|QSystemLibrary
modifier|*
argument_list|,
name|QSystemLibrary
modifier|*
argument_list|>
name|pair
decl_stmt|;
name|pair
operator|.
name|first
operator|=
literal|0
expr_stmt|;
name|pair
operator|.
name|second
operator|=
literal|0
expr_stmt|;
name|QSystemLibrary
modifier|*
name|ssleay32
init|=
operator|new
name|QSystemLibrary
argument_list|(
name|QLatin1String
argument_list|(
literal|"ssleay32"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ssleay32
operator|->
name|load
argument_list|(
literal|false
argument_list|)
condition|)
block|{
comment|// Cannot find ssleay32.dll
operator|delete
name|ssleay32
expr_stmt|;
return|return
name|pair
return|;
block|}
name|QSystemLibrary
modifier|*
name|libeay32
init|=
operator|new
name|QSystemLibrary
argument_list|(
name|QLatin1String
argument_list|(
literal|"libeay32"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|libeay32
operator|->
name|load
argument_list|(
literal|false
argument_list|)
condition|)
block|{
operator|delete
name|ssleay32
expr_stmt|;
operator|delete
name|libeay32
expr_stmt|;
return|return
name|pair
return|;
block|}
name|pair
operator|.
name|first
operator|=
name|ssleay32
expr_stmt|;
name|pair
operator|.
name|second
operator|=
name|libeay32
expr_stmt|;
return|return
name|pair
return|;
block|}
end_function
begin_else
else|#
directive|else
end_else
begin_function
specifier|static
name|QPair
argument_list|<
name|QLibrary
modifier|*
argument_list|,
name|QLibrary
modifier|*
argument_list|>
name|loadOpenSsl
parameter_list|()
block|{
name|QPair
argument_list|<
name|QLibrary
modifier|*
argument_list|,
name|QLibrary
modifier|*
argument_list|>
name|pair
decl_stmt|;
name|pair
operator|.
name|first
operator|=
literal|0
expr_stmt|;
name|pair
operator|.
name|second
operator|=
literal|0
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
name|QLibrary
modifier|*
name|libssl
init|=
operator|new
name|QLibrary
argument_list|(
name|QLatin1String
argument_list|(
literal|"libssl"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|libssl
operator|->
name|load
argument_list|()
condition|)
block|{
comment|// Cannot find ssleay32.dll
operator|delete
name|libssl
expr_stmt|;
return|return
name|pair
return|;
block|}
name|QLibrary
modifier|*
name|libcrypto
init|=
operator|new
name|QLibrary
argument_list|(
name|QLatin1String
argument_list|(
literal|"libcrypto"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|libcrypto
operator|->
name|load
argument_list|()
condition|)
block|{
operator|delete
name|libcrypto
expr_stmt|;
operator|delete
name|libssl
expr_stmt|;
return|return
name|pair
return|;
block|}
name|pair
operator|.
name|first
operator|=
name|libssl
expr_stmt|;
name|pair
operator|.
name|second
operator|=
name|libcrypto
expr_stmt|;
return|return
name|pair
return|;
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
name|QLibrary
modifier|*
modifier|&
name|libssl
init|=
name|pair
operator|.
name|first
decl_stmt|;
name|QLibrary
modifier|*
modifier|&
name|libcrypto
init|=
name|pair
operator|.
name|second
decl_stmt|;
name|libssl
operator|=
operator|new
name|QLibrary
expr_stmt|;
name|libcrypto
operator|=
operator|new
name|QLibrary
expr_stmt|;
comment|// Try to find the libssl library on the system.
comment|//
comment|// Up until Qt 4.3, this only searched for the "ssl" library at version -1, that
comment|// is, libssl.so on most Unix systems.  However, the .so file isn't present in
comment|// user installations because it's considered a development file.
comment|//
comment|// The right thing to do is to load the library at the major version we know how
comment|// to work with: the SHLIB_VERSION_NUMBER version (macro defined in opensslv.h)
comment|//
comment|// However, OpenSSL is a well-known case of binary-compatibility breakage. To
comment|// avoid such problems, many system integrators and Linux distributions change
comment|// the soname of the binary, letting the full version number be the soname. So
comment|// we'll find libssl.so.0.9.7, libssl.so.0.9.8, etc. in the system. For that
comment|// reason, we will search a few common paths (see findAllLibSsl() above) in hopes
comment|// we find one that works.
comment|//
comment|// It is important, however, to try the canonical name and the unversioned name
comment|// without going through the loop. By not specifying a path, we let the system
comment|// dlopen(3) function determine it for us. This will include any DT_RUNPATH or
comment|// DT_RPATH tags on our library header as well as other system-specific search
comment|// paths. See the man page for dlopen(3) on your system for more information.
ifdef|#
directive|ifdef
name|Q_OS_OPENBSD
name|libcrypto
operator|->
name|setLoadHints
argument_list|(
name|QLibrary
operator|::
name|ExportExternalSymbolsHint
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|SHLIB_VERSION_NUMBER
comment|// first attempt: the canonical name is libssl.so.<SHLIB_VERSION_NUMBER>
name|libssl
operator|->
name|setFileNameAndVersion
argument_list|(
name|QLatin1String
argument_list|(
literal|"ssl"
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
name|SHLIB_VERSION_NUMBER
argument_list|)
argument_list|)
expr_stmt|;
name|libcrypto
operator|->
name|setFileNameAndVersion
argument_list|(
name|QLatin1String
argument_list|(
literal|"crypto"
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
name|SHLIB_VERSION_NUMBER
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|libcrypto
operator|->
name|load
argument_list|()
operator|&&
name|libssl
operator|->
name|load
argument_list|()
condition|)
block|{
comment|// libssl.so.<SHLIB_VERSION_NUMBER> and libcrypto.so.<SHLIB_VERSION_NUMBER> found
return|return
name|pair
return|;
block|}
else|else
block|{
name|libssl
operator|->
name|unload
argument_list|()
expr_stmt|;
name|libcrypto
operator|->
name|unload
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
comment|// second attempt: find the development files libssl.so and libcrypto.so
name|libssl
operator|->
name|setFileNameAndVersion
argument_list|(
name|QLatin1String
argument_list|(
literal|"ssl"
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|libcrypto
operator|->
name|setFileNameAndVersion
argument_list|(
name|QLatin1String
argument_list|(
literal|"crypto"
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|libcrypto
operator|->
name|load
argument_list|()
operator|&&
name|libssl
operator|->
name|load
argument_list|()
condition|)
block|{
comment|// libssl.so.0 and libcrypto.so.0 found
return|return
name|pair
return|;
block|}
else|else
block|{
name|libssl
operator|->
name|unload
argument_list|()
expr_stmt|;
name|libcrypto
operator|->
name|unload
argument_list|()
expr_stmt|;
block|}
comment|// third attempt: loop on the most common library paths and find libssl
name|QStringList
name|sslList
init|=
name|findAllLibSsl
argument_list|()
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|ssl
decl|,
name|sslList
control|)
block|{
name|QString
name|crypto
init|=
name|ssl
decl_stmt|;
name|crypto
operator|.
name|replace
argument_list|(
name|QLatin1String
argument_list|(
literal|"ssl"
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"crypto"
argument_list|)
argument_list|)
expr_stmt|;
name|libssl
operator|->
name|setFileNameAndVersion
argument_list|(
name|ssl
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|libcrypto
operator|->
name|setFileNameAndVersion
argument_list|(
name|crypto
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|libcrypto
operator|->
name|load
argument_list|()
operator|&&
name|libssl
operator|->
name|load
argument_list|()
condition|)
block|{
comment|// libssl.so.0 and libcrypto.so.0 found
return|return
name|pair
return|;
block|}
else|else
block|{
name|libssl
operator|->
name|unload
argument_list|()
expr_stmt|;
name|libcrypto
operator|->
name|unload
argument_list|()
expr_stmt|;
block|}
block|}
comment|// failed to load anything
operator|delete
name|libssl
expr_stmt|;
operator|delete
name|libcrypto
expr_stmt|;
name|libssl
operator|=
name|libcrypto
operator|=
literal|0
expr_stmt|;
return|return
name|pair
return|;
else|#
directive|else
comment|// not implemented for this platform yet
return|return
name|pair
return|;
endif|#
directive|endif
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
name|bool
name|q_resolveOpenSslSymbols
parameter_list|()
block|{
specifier|static
specifier|volatile
name|bool
name|symbolsResolved
init|=
literal|false
decl_stmt|;
specifier|static
specifier|volatile
name|bool
name|triedToResolveSymbols
init|=
literal|false
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_THREAD
name|QMutexLocker
name|locker
argument_list|(
name|QMutexPool
operator|::
name|globalInstanceGet
argument_list|(
operator|(
name|void
operator|*
operator|)
operator|&
name|q_SSL_library_init
argument_list|)
argument_list|)
decl_stmt|;
endif|#
directive|endif
if|if
condition|(
name|symbolsResolved
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|triedToResolveSymbols
condition|)
return|return
literal|false
return|;
name|triedToResolveSymbols
operator|=
literal|true
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN
name|QPair
argument_list|<
name|QSystemLibrary
modifier|*
argument_list|,
name|QSystemLibrary
modifier|*
argument_list|>
name|libs
init|=
name|loadOpenSslWin32
argument_list|()
decl_stmt|;
else|#
directive|else
name|QPair
argument_list|<
name|QLibrary
modifier|*
argument_list|,
name|QLibrary
modifier|*
argument_list|>
name|libs
init|=
name|loadOpenSsl
argument_list|()
decl_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|libs
operator|.
name|first
operator|||
operator|!
name|libs
operator|.
name|second
condition|)
comment|// failed to load them
return|return
literal|false
return|;
ifdef|#
directive|ifdef
name|Q_OS_SYMBIAN
ifdef|#
directive|ifdef
name|SSLEAY_MACROS
name|RESOLVEFUNC
argument_list|(
argument|ASN1_dup
argument_list|,
literal|125
argument_list|,
argument|libs.second
argument_list|)
endif|#
directive|endif
name|RESOLVEFUNC
argument_list|(
argument|ASN1_INTEGER_get
argument_list|,
literal|48
argument_list|,
argument|libs.second
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|ASN1_STRING_data
argument_list|,
literal|71
argument_list|,
argument|libs.second
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|ASN1_STRING_length
argument_list|,
literal|76
argument_list|,
argument|libs.second
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|BIO_ctrl
argument_list|,
literal|184
argument_list|,
argument|libs.second
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|BIO_free
argument_list|,
literal|209
argument_list|,
argument|libs.second
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|BIO_new
argument_list|,
literal|222
argument_list|,
argument|libs.second
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|BIO_new_mem_buf
argument_list|,
literal|230
argument_list|,
argument|libs.second
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|BIO_read
argument_list|,
literal|244
argument_list|,
argument|libs.second
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|BIO_s_mem
argument_list|,
literal|251
argument_list|,
argument|libs.second
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|BIO_write
argument_list|,
literal|269
argument_list|,
argument|libs.second
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|BN_num_bits
argument_list|,
literal|387
argument_list|,
argument|libs.second
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|CRYPTO_free
argument_list|,
literal|469
argument_list|,
argument|libs.second
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|CRYPTO_num_locks
argument_list|,
literal|500
argument_list|,
argument|libs.second
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|CRYPTO_set_id_callback
argument_list|,
literal|513
argument_list|,
argument|libs.second
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|CRYPTO_set_locking_callback
argument_list|,
literal|516
argument_list|,
argument|libs.second
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|DSA_free
argument_list|,
literal|594
argument_list|,
argument|libs.second
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|ERR_error_string
argument_list|,
literal|744
argument_list|,
argument|libs.second
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|ERR_get_error
argument_list|,
literal|749
argument_list|,
argument|libs.second
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|EVP_des_ede3_cbc
argument_list|,
literal|919
argument_list|,
argument|libs.second
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|EVP_PKEY_assign
argument_list|,
literal|859
argument_list|,
argument|libs.second
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|EVP_PKEY_set1_RSA
argument_list|,
literal|880
argument_list|,
argument|libs.second
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|EVP_PKEY_set1_DSA
argument_list|,
literal|879
argument_list|,
argument|libs.second
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|EVP_PKEY_free
argument_list|,
literal|867
argument_list|,
argument|libs.second
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|EVP_PKEY_get1_DSA
argument_list|,
literal|869
argument_list|,
argument|libs.second
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|EVP_PKEY_get1_RSA
argument_list|,
literal|870
argument_list|,
argument|libs.second
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|EVP_PKEY_new
argument_list|,
literal|876
argument_list|,
argument|libs.second
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|EVP_PKEY_type
argument_list|,
literal|882
argument_list|,
argument|libs.second
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|OBJ_nid2sn
argument_list|,
literal|1036
argument_list|,
argument|libs.second
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|OBJ_obj2nid
argument_list|,
literal|1037
argument_list|,
argument|libs.second
argument_list|)
ifdef|#
directive|ifdef
name|SSLEAY_MACROS
comment|// ### verify
name|RESOLVEFUNC
argument_list|(
argument|PEM_ASN1_read_bio
argument_list|,
literal|1180
argument_list|,
argument|libs.second
argument_list|)
else|#
directive|else
name|RESOLVEFUNC
argument_list|(
argument|PEM_read_bio_DSAPrivateKey
argument_list|,
literal|1219
argument_list|,
argument|libs.second
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|PEM_read_bio_RSAPrivateKey
argument_list|,
literal|1228
argument_list|,
argument|libs.second
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|PEM_write_bio_DSAPrivateKey
argument_list|,
literal|1260
argument_list|,
argument|libs.second
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|PEM_write_bio_RSAPrivateKey
argument_list|,
literal|1271
argument_list|,
argument|libs.second
argument_list|)
endif|#
directive|endif
name|RESOLVEFUNC
argument_list|(
argument|PEM_read_bio_DSA_PUBKEY
argument_list|,
literal|1220
argument_list|,
argument|libs.second
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|PEM_read_bio_RSA_PUBKEY
argument_list|,
literal|1230
argument_list|,
argument|libs.second
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|PEM_write_bio_DSA_PUBKEY
argument_list|,
literal|1261
argument_list|,
argument|libs.second
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|PEM_write_bio_RSA_PUBKEY
argument_list|,
literal|1273
argument_list|,
argument|libs.second
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|RAND_seed
argument_list|,
literal|1426
argument_list|,
argument|libs.second
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|RAND_status
argument_list|,
literal|1429
argument_list|,
argument|libs.second
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|RSA_free
argument_list|,
literal|1450
argument_list|,
argument|libs.second
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|sk_free
argument_list|,
literal|2571
argument_list|,
argument|libs.second
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|sk_num
argument_list|,
literal|2576
argument_list|,
argument|libs.second
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|sk_pop_free
argument_list|,
literal|2578
argument_list|,
argument|libs.second
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|sk_value
argument_list|,
literal|2585
argument_list|,
argument|libs.second
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_CIPHER_description
argument_list|,
literal|11
argument_list|,
argument|libs.first
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_CTX_check_private_key
argument_list|,
literal|21
argument_list|,
argument|libs.first
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_CTX_ctrl
argument_list|,
literal|22
argument_list|,
argument|libs.first
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_CTX_free
argument_list|,
literal|24
argument_list|,
argument|libs.first
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_CTX_new
argument_list|,
literal|35
argument_list|,
argument|libs.first
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_CTX_set_cipher_list
argument_list|,
literal|40
argument_list|,
argument|libs.first
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_CTX_set_default_verify_paths
argument_list|,
literal|44
argument_list|,
argument|libs.first
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_CTX_set_verify
argument_list|,
literal|56
argument_list|,
argument|libs.first
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_CTX_set_verify_depth
argument_list|,
literal|57
argument_list|,
argument|libs.first
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_CTX_use_certificate
argument_list|,
literal|64
argument_list|,
argument|libs.first
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_CTX_use_certificate_file
argument_list|,
literal|67
argument_list|,
argument|libs.first
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_CTX_use_PrivateKey
argument_list|,
literal|58
argument_list|,
argument|libs.first
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_CTX_use_RSAPrivateKey
argument_list|,
literal|61
argument_list|,
argument|libs.first
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_CTX_use_PrivateKey_file
argument_list|,
literal|60
argument_list|,
argument|libs.first
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_accept
argument_list|,
literal|82
argument_list|,
argument|libs.first
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_clear
argument_list|,
literal|92
argument_list|,
argument|libs.first
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_connect
argument_list|,
literal|93
argument_list|,
argument|libs.first
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_free
argument_list|,
literal|99
argument_list|,
argument|libs.first
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_get_ciphers
argument_list|,
literal|104
argument_list|,
argument|libs.first
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_get_current_cipher
argument_list|,
literal|106
argument_list|,
argument|libs.first
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_get_error
argument_list|,
literal|110
argument_list|,
argument|libs.first
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_get_peer_cert_chain
argument_list|,
literal|117
argument_list|,
argument|libs.first
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_get_peer_certificate
argument_list|,
literal|118
argument_list|,
argument|libs.first
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_get_verify_result
argument_list|,
literal|132
argument_list|,
argument|libs.first
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_library_init
argument_list|,
literal|137
argument_list|,
argument|libs.first
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_load_error_strings
argument_list|,
literal|139
argument_list|,
argument|libs.first
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_new
argument_list|,
literal|140
argument_list|,
argument|libs.first
argument_list|)
if|#
directive|if
name|OPENSSL_VERSION_NUMBER
operator|>=
literal|0x0090806fL
operator|&&
operator|!
name|defined
argument_list|(
name|OPENSSL_NO_TLSEXT
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_ctrl
argument_list|,
literal|95
argument_list|,
argument|libs.first
argument_list|)
endif|#
directive|endif
name|RESOLVEFUNC
argument_list|(
argument|SSL_read
argument_list|,
literal|143
argument_list|,
argument|libs.first
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_set_accept_state
argument_list|,
literal|148
argument_list|,
argument|libs.first
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_set_bio
argument_list|,
literal|149
argument_list|,
argument|libs.first
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_set_connect_state
argument_list|,
literal|152
argument_list|,
argument|libs.first
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_shutdown
argument_list|,
literal|173
argument_list|,
argument|libs.first
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_write
argument_list|,
literal|188
argument_list|,
argument|libs.first
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSLv2_client_method
argument_list|,
literal|192
argument_list|,
argument|libs.first
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSLv3_client_method
argument_list|,
literal|195
argument_list|,
argument|libs.first
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSLv23_client_method
argument_list|,
literal|189
argument_list|,
argument|libs.first
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|TLSv1_client_method
argument_list|,
literal|198
argument_list|,
argument|libs.first
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSLv2_server_method
argument_list|,
literal|194
argument_list|,
argument|libs.first
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSLv3_server_method
argument_list|,
literal|197
argument_list|,
argument|libs.first
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSLv23_server_method
argument_list|,
literal|191
argument_list|,
argument|libs.first
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|TLSv1_server_method
argument_list|,
literal|200
argument_list|,
argument|libs.first
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_CTX_load_verify_locations
argument_list|,
literal|34
argument_list|,
argument|libs.first
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|X509_NAME_oneline
argument_list|,
literal|1830
argument_list|,
argument|libs.second
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|X509_PUBKEY_get
argument_list|,
literal|1844
argument_list|,
argument|libs.second
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|X509_STORE_free
argument_list|,
literal|1939
argument_list|,
argument|libs.second
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|X509_STORE_new
argument_list|,
literal|1942
argument_list|,
argument|libs.second
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|X509_STORE_add_cert
argument_list|,
literal|1936
argument_list|,
argument|libs.second
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|X509_STORE_CTX_free
argument_list|,
literal|1907
argument_list|,
argument|libs.second
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|X509_STORE_CTX_init
argument_list|,
literal|1919
argument_list|,
argument|libs.second
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|X509_STORE_CTX_new
argument_list|,
literal|1920
argument_list|,
argument|libs.second
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|X509_STORE_CTX_set_purpose
argument_list|,
literal|1931
argument_list|,
argument|libs.second
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|X509_cmp
argument_list|,
literal|1992
argument_list|,
argument|libs.second
argument_list|)
ifndef|#
directive|ifndef
name|SSLEAY_MACROS
name|RESOLVEFUNC
argument_list|(
argument|X509_dup
argument_list|,
literal|1997
argument_list|,
argument|libs.second
argument_list|)
endif|#
directive|endif
name|RESOLVEFUNC
argument_list|(
argument|X509_EXTENSION_get_object
argument_list|,
literal|1785
argument_list|,
argument|libs.second
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|X509_free
argument_list|,
literal|2001
argument_list|,
argument|libs.second
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|X509_get_ext
argument_list|,
literal|2012
argument_list|,
argument|libs.second
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|X509_get_ext_count
argument_list|,
literal|2016
argument_list|,
argument|libs.second
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|X509_get_ext_d2i
argument_list|,
literal|2017
argument_list|,
argument|libs.second
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|X509_get_issuer_name
argument_list|,
literal|2018
argument_list|,
argument|libs.second
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|X509_get_subject_name
argument_list|,
literal|2022
argument_list|,
argument|libs.second
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|X509_verify_cert
argument_list|,
literal|2069
argument_list|,
argument|libs.second
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|d2i_X509
argument_list|,
literal|2309
argument_list|,
argument|libs.second
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|i2d_X509
argument_list|,
literal|2489
argument_list|,
argument|libs.second
argument_list|)
ifdef|#
directive|ifdef
name|SSLEAY_MACROS
name|RESOLVEFUNC
argument_list|(
argument|i2d_DSAPrivateKey
argument_list|,
literal|2395
argument_list|,
argument|libs.second
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|i2d_RSAPrivateKey
argument_list|,
literal|2476
argument_list|,
argument|libs.second
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|d2i_DSAPrivateKey
argument_list|,
literal|2220
argument_list|,
argument|libs.second
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|d2i_RSAPrivateKey
argument_list|,
literal|2296
argument_list|,
argument|libs.second
argument_list|)
endif|#
directive|endif
name|RESOLVEFUNC
argument_list|(
argument|OPENSSL_add_all_algorithms_noconf
argument_list|,
literal|1153
argument_list|,
argument|libs.second
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|OPENSSL_add_all_algorithms_conf
argument_list|,
literal|1152
argument_list|,
argument|libs.second
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSLeay
argument_list|,
literal|1504
argument_list|,
argument|libs.second
argument_list|)
else|#
directive|else
comment|// Q_OS_SYMBIAN
ifdef|#
directive|ifdef
name|SSLEAY_MACROS
name|RESOLVEFUNC
argument_list|(
argument|ASN1_dup
argument_list|)
endif|#
directive|endif
name|RESOLVEFUNC
argument_list|(
argument|ASN1_INTEGER_get
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|ASN1_STRING_data
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|ASN1_STRING_length
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|BIO_ctrl
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|BIO_free
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|BIO_new
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|BIO_new_mem_buf
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|BIO_read
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|BIO_s_mem
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|BIO_write
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|BN_num_bits
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|CRYPTO_free
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|CRYPTO_num_locks
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|CRYPTO_set_id_callback
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|CRYPTO_set_locking_callback
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|DSA_free
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|ERR_error_string
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|ERR_get_error
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|EVP_des_ede3_cbc
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|EVP_PKEY_assign
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|EVP_PKEY_set1_RSA
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|EVP_PKEY_set1_DSA
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|EVP_PKEY_free
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|EVP_PKEY_get1_DSA
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|EVP_PKEY_get1_RSA
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|EVP_PKEY_new
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|EVP_PKEY_type
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|OBJ_nid2sn
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|OBJ_obj2nid
argument_list|)
ifdef|#
directive|ifdef
name|SSLEAY_MACROS
comment|// ### verify
name|RESOLVEFUNC
argument_list|(
argument|PEM_ASN1_read_bio
argument_list|)
else|#
directive|else
name|RESOLVEFUNC
argument_list|(
argument|PEM_read_bio_DSAPrivateKey
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|PEM_read_bio_RSAPrivateKey
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|PEM_write_bio_DSAPrivateKey
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|PEM_write_bio_RSAPrivateKey
argument_list|)
endif|#
directive|endif
name|RESOLVEFUNC
argument_list|(
argument|PEM_read_bio_DSA_PUBKEY
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|PEM_read_bio_RSA_PUBKEY
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|PEM_write_bio_DSA_PUBKEY
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|PEM_write_bio_RSA_PUBKEY
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|RAND_seed
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|RAND_status
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|RSA_free
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|sk_free
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|sk_num
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|sk_pop_free
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|sk_value
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_CIPHER_description
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_CTX_check_private_key
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_CTX_ctrl
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_CTX_free
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_CTX_new
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_CTX_set_cipher_list
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_CTX_set_default_verify_paths
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_CTX_set_verify
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_CTX_set_verify_depth
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_CTX_use_certificate
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_CTX_use_certificate_file
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_CTX_use_PrivateKey
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_CTX_use_RSAPrivateKey
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_CTX_use_PrivateKey_file
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_accept
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_clear
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_connect
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_free
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_get_ciphers
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_get_current_cipher
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_get_error
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_get_peer_cert_chain
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_get_peer_certificate
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_get_verify_result
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_library_init
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_load_error_strings
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_new
argument_list|)
if|#
directive|if
name|OPENSSL_VERSION_NUMBER
operator|>=
literal|0x0090806fL
operator|&&
operator|!
name|defined
argument_list|(
name|OPENSSL_NO_TLSEXT
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_ctrl
argument_list|)
endif|#
directive|endif
name|RESOLVEFUNC
argument_list|(
argument|SSL_read
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_set_accept_state
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_set_bio
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_set_connect_state
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_shutdown
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_write
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSLv2_client_method
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSLv3_client_method
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSLv23_client_method
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|TLSv1_client_method
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSLv2_server_method
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSLv3_server_method
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSLv23_server_method
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|TLSv1_server_method
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|X509_NAME_oneline
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|X509_PUBKEY_get
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|X509_STORE_free
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|X509_STORE_new
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|X509_STORE_add_cert
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|X509_STORE_CTX_free
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|X509_STORE_CTX_init
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|X509_STORE_CTX_new
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|X509_STORE_CTX_set_purpose
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|X509_cmp
argument_list|)
ifndef|#
directive|ifndef
name|SSLEAY_MACROS
name|RESOLVEFUNC
argument_list|(
argument|X509_dup
argument_list|)
endif|#
directive|endif
name|RESOLVEFUNC
argument_list|(
argument|X509_EXTENSION_get_object
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|X509_free
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|X509_get_ext
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|X509_get_ext_count
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|X509_get_ext_d2i
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|X509_get_issuer_name
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|X509_get_subject_name
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|X509_verify_cert
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|d2i_X509
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|i2d_X509
argument_list|)
ifdef|#
directive|ifdef
name|SSLEAY_MACROS
name|RESOLVEFUNC
argument_list|(
argument|i2d_DSAPrivateKey
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|i2d_RSAPrivateKey
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|d2i_DSAPrivateKey
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|d2i_RSAPrivateKey
argument_list|)
endif|#
directive|endif
name|RESOLVEFUNC
argument_list|(
argument|OPENSSL_add_all_algorithms_noconf
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|OPENSSL_add_all_algorithms_conf
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_CTX_load_verify_locations
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSLeay
argument_list|)
endif|#
directive|endif
comment|// Q_OS_SYMBIAN
name|symbolsResolved
operator|=
literal|true
expr_stmt|;
operator|delete
name|libs
operator|.
name|first
expr_stmt|;
operator|delete
name|libs
operator|.
name|second
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_LIBRARY
end_comment
begin_else
else|#
directive|else
end_else
begin_comment
comment|// !defined QT_LINKED_OPENSSL
end_comment
begin_function
name|bool
name|q_resolveOpenSslSymbols
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|QT_NO_OPENSSL
return|return
literal|false
return|;
endif|#
directive|endif
return|return
literal|true
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// !defined QT_LINKED_OPENSSL
end_comment
begin_comment
comment|//==============================================================================
end_comment
begin_comment
comment|// contributed by Jay Case of Sarvega, Inc.; http://sarvega.com/
end_comment
begin_comment
comment|// Based on X509_cmp_time() for intitial buffer hacking.
end_comment
begin_comment
comment|//==============================================================================
end_comment
begin_function
name|QDateTime
name|q_getTimeFromASN1
parameter_list|(
specifier|const
name|ASN1_TIME
modifier|*
name|aTime
parameter_list|)
block|{
name|size_t
name|lTimeLength
init|=
name|aTime
operator|->
name|length
decl_stmt|;
name|char
modifier|*
name|pString
init|=
operator|(
name|char
operator|*
operator|)
name|aTime
operator|->
name|data
decl_stmt|;
if|if
condition|(
name|aTime
operator|->
name|type
operator|==
name|V_ASN1_UTCTIME
condition|)
block|{
name|char
name|lBuffer
index|[
literal|24
index|]
decl_stmt|;
name|char
modifier|*
name|pBuffer
init|=
name|lBuffer
decl_stmt|;
if|if
condition|(
operator|(
name|lTimeLength
operator|<
literal|11
operator|)
operator|||
operator|(
name|lTimeLength
operator|>
literal|17
operator|)
condition|)
return|return
name|QDateTime
argument_list|()
return|;
name|memcpy
argument_list|(
name|pBuffer
argument_list|,
name|pString
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|pBuffer
operator|+=
literal|10
expr_stmt|;
name|pString
operator|+=
literal|10
expr_stmt|;
if|if
condition|(
operator|(
operator|*
name|pString
operator|==
literal|'Z'
operator|)
operator|||
operator|(
operator|*
name|pString
operator|==
literal|'-'
operator|)
operator|||
operator|(
operator|*
name|pString
operator|==
literal|'+'
operator|)
condition|)
block|{
operator|*
name|pBuffer
operator|++
operator|=
literal|'0'
expr_stmt|;
operator|*
name|pBuffer
operator|++
operator|=
literal|'0'
expr_stmt|;
block|}
else|else
block|{
operator|*
name|pBuffer
operator|++
operator|=
operator|*
name|pString
operator|++
expr_stmt|;
operator|*
name|pBuffer
operator|++
operator|=
operator|*
name|pString
operator|++
expr_stmt|;
comment|// Skip any fractional seconds...
if|if
condition|(
operator|*
name|pString
operator|==
literal|'.'
condition|)
block|{
name|pString
operator|++
expr_stmt|;
while|while
condition|(
operator|(
operator|*
name|pString
operator|>=
literal|'0'
operator|)
operator|&&
operator|(
operator|*
name|pString
operator|<=
literal|'9'
operator|)
condition|)
name|pString
operator|++
expr_stmt|;
block|}
block|}
operator|*
name|pBuffer
operator|++
operator|=
literal|'Z'
expr_stmt|;
operator|*
name|pBuffer
operator|++
operator|=
literal|'\0'
expr_stmt|;
name|time_t
name|lSecondsFromUCT
decl_stmt|;
if|if
condition|(
operator|*
name|pString
operator|==
literal|'Z'
condition|)
block|{
name|lSecondsFromUCT
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|(
operator|*
name|pString
operator|!=
literal|'+'
operator|)
operator|&&
operator|(
operator|*
name|pString
operator|!=
literal|'-'
operator|)
condition|)
return|return
name|QDateTime
argument_list|()
return|;
name|lSecondsFromUCT
operator|=
operator|(
operator|(
name|pString
index|[
literal|1
index|]
operator|-
literal|'0'
operator|)
operator|*
literal|10
operator|+
operator|(
name|pString
index|[
literal|2
index|]
operator|-
literal|'0'
operator|)
operator|)
operator|*
literal|60
expr_stmt|;
name|lSecondsFromUCT
operator|+=
operator|(
name|pString
index|[
literal|3
index|]
operator|-
literal|'0'
operator|)
operator|*
literal|10
operator|+
operator|(
name|pString
index|[
literal|4
index|]
operator|-
literal|'0'
operator|)
expr_stmt|;
name|lSecondsFromUCT
operator|*=
literal|60
expr_stmt|;
if|if
condition|(
operator|*
name|pString
operator|==
literal|'-'
condition|)
name|lSecondsFromUCT
operator|=
operator|-
name|lSecondsFromUCT
expr_stmt|;
block|}
name|tm
name|lTime
decl_stmt|;
name|lTime
operator|.
name|tm_sec
operator|=
operator|(
operator|(
name|lBuffer
index|[
literal|10
index|]
operator|-
literal|'0'
operator|)
operator|*
literal|10
operator|)
operator|+
operator|(
name|lBuffer
index|[
literal|11
index|]
operator|-
literal|'0'
operator|)
expr_stmt|;
name|lTime
operator|.
name|tm_min
operator|=
operator|(
operator|(
name|lBuffer
index|[
literal|8
index|]
operator|-
literal|'0'
operator|)
operator|*
literal|10
operator|)
operator|+
operator|(
name|lBuffer
index|[
literal|9
index|]
operator|-
literal|'0'
operator|)
expr_stmt|;
name|lTime
operator|.
name|tm_hour
operator|=
operator|(
operator|(
name|lBuffer
index|[
literal|6
index|]
operator|-
literal|'0'
operator|)
operator|*
literal|10
operator|)
operator|+
operator|(
name|lBuffer
index|[
literal|7
index|]
operator|-
literal|'0'
operator|)
expr_stmt|;
name|lTime
operator|.
name|tm_mday
operator|=
operator|(
operator|(
name|lBuffer
index|[
literal|4
index|]
operator|-
literal|'0'
operator|)
operator|*
literal|10
operator|)
operator|+
operator|(
name|lBuffer
index|[
literal|5
index|]
operator|-
literal|'0'
operator|)
expr_stmt|;
name|lTime
operator|.
name|tm_mon
operator|=
operator|(
operator|(
operator|(
name|lBuffer
index|[
literal|2
index|]
operator|-
literal|'0'
operator|)
operator|*
literal|10
operator|)
operator|+
operator|(
name|lBuffer
index|[
literal|3
index|]
operator|-
literal|'0'
operator|)
operator|)
operator|-
literal|1
expr_stmt|;
name|lTime
operator|.
name|tm_year
operator|=
operator|(
operator|(
name|lBuffer
index|[
literal|0
index|]
operator|-
literal|'0'
operator|)
operator|*
literal|10
operator|)
operator|+
operator|(
name|lBuffer
index|[
literal|1
index|]
operator|-
literal|'0'
operator|)
expr_stmt|;
if|if
condition|(
name|lTime
operator|.
name|tm_year
operator|<
literal|50
condition|)
name|lTime
operator|.
name|tm_year
operator|+=
literal|100
expr_stmt|;
comment|// RFC 2459
name|QDate
name|resDate
argument_list|(
name|lTime
operator|.
name|tm_year
operator|+
literal|1900
argument_list|,
name|lTime
operator|.
name|tm_mon
operator|+
literal|1
argument_list|,
name|lTime
operator|.
name|tm_mday
argument_list|)
decl_stmt|;
name|QTime
name|resTime
argument_list|(
name|lTime
operator|.
name|tm_hour
argument_list|,
name|lTime
operator|.
name|tm_min
argument_list|,
name|lTime
operator|.
name|tm_sec
argument_list|)
decl_stmt|;
name|QDateTime
name|result
argument_list|(
name|resDate
argument_list|,
name|resTime
argument_list|,
name|Qt
operator|::
name|UTC
argument_list|)
decl_stmt|;
name|result
operator|=
name|result
operator|.
name|addSecs
argument_list|(
name|lSecondsFromUCT
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
elseif|else
if|if
condition|(
name|aTime
operator|->
name|type
operator|==
name|V_ASN1_GENERALIZEDTIME
condition|)
block|{
if|if
condition|(
name|lTimeLength
operator|<
literal|15
condition|)
return|return
name|QDateTime
argument_list|()
return|;
comment|// hopefully never triggered
comment|// generalized time is always YYYYMMDDHHMMSSZ (RFC 2459, section 4.1.2.5.2)
name|tm
name|lTime
decl_stmt|;
name|lTime
operator|.
name|tm_sec
operator|=
operator|(
operator|(
name|pString
index|[
literal|12
index|]
operator|-
literal|'0'
operator|)
operator|*
literal|10
operator|)
operator|+
operator|(
name|pString
index|[
literal|13
index|]
operator|-
literal|'0'
operator|)
expr_stmt|;
name|lTime
operator|.
name|tm_min
operator|=
operator|(
operator|(
name|pString
index|[
literal|10
index|]
operator|-
literal|'0'
operator|)
operator|*
literal|10
operator|)
operator|+
operator|(
name|pString
index|[
literal|11
index|]
operator|-
literal|'0'
operator|)
expr_stmt|;
name|lTime
operator|.
name|tm_hour
operator|=
operator|(
operator|(
name|pString
index|[
literal|8
index|]
operator|-
literal|'0'
operator|)
operator|*
literal|10
operator|)
operator|+
operator|(
name|pString
index|[
literal|9
index|]
operator|-
literal|'0'
operator|)
expr_stmt|;
name|lTime
operator|.
name|tm_mday
operator|=
operator|(
operator|(
name|pString
index|[
literal|6
index|]
operator|-
literal|'0'
operator|)
operator|*
literal|10
operator|)
operator|+
operator|(
name|pString
index|[
literal|7
index|]
operator|-
literal|'0'
operator|)
expr_stmt|;
name|lTime
operator|.
name|tm_mon
operator|=
operator|(
operator|(
operator|(
name|pString
index|[
literal|4
index|]
operator|-
literal|'0'
operator|)
operator|*
literal|10
operator|)
operator|+
operator|(
name|pString
index|[
literal|5
index|]
operator|-
literal|'0'
operator|)
operator|)
expr_stmt|;
name|lTime
operator|.
name|tm_year
operator|=
operator|(
operator|(
name|pString
index|[
literal|0
index|]
operator|-
literal|'0'
operator|)
operator|*
literal|1000
operator|)
operator|+
operator|(
operator|(
name|pString
index|[
literal|1
index|]
operator|-
literal|'0'
operator|)
operator|*
literal|100
operator|)
operator|+
operator|(
operator|(
name|pString
index|[
literal|2
index|]
operator|-
literal|'0'
operator|)
operator|*
literal|10
operator|)
operator|+
operator|(
name|pString
index|[
literal|3
index|]
operator|-
literal|'0'
operator|)
expr_stmt|;
name|QDate
name|resDate
argument_list|(
name|lTime
operator|.
name|tm_year
argument_list|,
name|lTime
operator|.
name|tm_mon
argument_list|,
name|lTime
operator|.
name|tm_mday
argument_list|)
decl_stmt|;
name|QTime
name|resTime
argument_list|(
name|lTime
operator|.
name|tm_hour
argument_list|,
name|lTime
operator|.
name|tm_min
argument_list|,
name|lTime
operator|.
name|tm_sec
argument_list|)
decl_stmt|;
name|QDateTime
name|result
argument_list|(
name|resDate
argument_list|,
name|resTime
argument_list|,
name|Qt
operator|::
name|UTC
argument_list|)
decl_stmt|;
return|return
name|result
return|;
block|}
else|else
block|{
name|qWarning
argument_list|(
literal|"unsupported date format detected"
argument_list|)
expr_stmt|;
return|return
name|QDateTime
argument_list|()
return|;
block|}
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
