begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Copyright (C) 2014 BlackBerry Limited. All rights reserved. ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtNetwork module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|/**************************************************************************** ** ** In addition, as a special exception, the copyright holders listed above give ** permission to link the code of its release of Qt with the OpenSSL project's ** "OpenSSL" library (or modified versions of the "OpenSSL" library that use the ** same license as the original version), and distribute the linked executables. ** ** You must comply with the GNU General Public License version 2 in all ** respects for all of the code used other than the "OpenSSL" code.  If you ** modify this file, you may extend this exception to your version of the file, ** but you are not obligated to do so.  If you do not wish to do so, delete ** this exception statement from your version of this file. ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qsslsocket_openssl_symbols_p.h"
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_WIN
end_ifdef
begin_include
include|#
directive|include
file|<private/qsystemlibrary_p.h>
end_include
begin_else
else|#
directive|else
end_else
begin_include
include|#
directive|include
file|<QtCore/qlibrary.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<QtCore/qmutex.h>
end_include
begin_include
include|#
directive|include
file|<private/qmutexpool_p.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qdatetime.h>
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
end_if
begin_include
include|#
directive|include
file|<QtCore/qdir.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_LINUX
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_ANDROID
argument_list|)
end_if
begin_include
include|#
directive|include
file|<link.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<algorithm>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_comment
comment|/*     Note to maintainer:     -------------------      We load OpenSSL symbols dynamically. Because symbols are known to     disappear, and signatures sometimes change, between releases, we need to     be careful about how this is done. To ensure we don't end up dereferencing     null function pointers, and continue running even if certain functions are     missing, we define helper functions for each of the symbols we load from     OpenSSL, all prefixed with "q_" (declared in     qsslsocket_openssl_symbols_p.h). So instead of calling SSL_connect     directly, we call q_SSL_connect, which is a function that checks if the     actual SSL_connect fptr is null, and returns a failure if it is, or calls     SSL_connect if it isn't.      This requires a somewhat tedious process of declaring each function we     want to call in OpenSSL thrice: once with the q_, in _p.h, once using the     DEFINEFUNC macros below, and once in the function that actually resolves     the symbols, below the DEFINEFUNC declarations below.      There's one DEFINEFUNC macro declared for every number of arguments     exposed by OpenSSL (feel free to extend when needed). The easiest thing to     do is to find an existing entry that matches the arg count of the function     you want to import, and do the same.      The first macro arg is the function return type. The second is the     verbatim name of the function/symbol. Then follows a list of N pairs of     argument types with a variable name, and just the variable name (char *a,     a, char *b, b, etc). Finally there's two arguments - a suitable return     statement for the error case (for an int function, return 0 or return -1     is usually right). Then either just "return" or DUMMYARG, the latter being     for void functions.      Note: Take into account that these macros and declarations are processed     at compile-time, and the result depends on the OpenSSL headers the     compiling host has installed, but the symbols are resolved at run-time,     possibly with a different version of OpenSSL. */
end_comment
begin_namespace
namespace|namespace
block|{
DECL|function|qsslSocketUnresolvedSymbolWarning
name|void
name|qsslSocketUnresolvedSymbolWarning
parameter_list|(
specifier|const
name|char
modifier|*
name|functionName
parameter_list|)
block|{
name|qWarning
argument_list|(
literal|"QSslSocket: cannot call unresolved function %s"
argument_list|,
name|functionName
argument_list|)
expr_stmt|;
block|}
DECL|function|qsslSocketCannotResolveSymbolWarning
name|void
name|qsslSocketCannotResolveSymbolWarning
parameter_list|(
specifier|const
name|char
modifier|*
name|functionName
parameter_list|)
block|{
name|qWarning
argument_list|(
literal|"QSslSocket: cannot resolve %s"
argument_list|,
name|functionName
argument_list|)
expr_stmt|;
block|}
block|}
end_namespace
begin_ifdef
ifdef|#
directive|ifdef
name|SSLEAY_MACROS
end_ifdef
begin_macro
name|DEFINEFUNC3
argument_list|(
argument|void *
argument_list|,
argument|ASN1_dup
argument_list|,
argument|i2d_of_void *a
argument_list|,
argument|a
argument_list|,
argument|d2i_of_void *b
argument_list|,
argument|b
argument_list|,
argument|char *c
argument_list|,
argument|c
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|DEFINEFUNC
argument_list|(
argument|long
argument_list|,
argument|ASN1_INTEGER_get
argument_list|,
argument|ASN1_INTEGER *a
argument_list|,
argument|a
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|unsigned char *
argument_list|,
argument|ASN1_STRING_data
argument_list|,
argument|ASN1_STRING *a
argument_list|,
argument|a
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|int
argument_list|,
argument|ASN1_STRING_length
argument_list|,
argument|ASN1_STRING *a
argument_list|,
argument|a
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC2
argument_list|(
argument|int
argument_list|,
argument|ASN1_STRING_to_UTF8
argument_list|,
argument|unsigned char **a
argument_list|,
argument|a
argument_list|,
argument|ASN1_STRING *b
argument_list|,
argument|b
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_macro
name|DEFINEFUNC4
argument_list|(
argument|long
argument_list|,
argument|BIO_ctrl
argument_list|,
argument|BIO *a
argument_list|,
argument|a
argument_list|,
argument|int b
argument_list|,
argument|b
argument_list|,
argument|long c
argument_list|,
argument|c
argument_list|,
argument|void *d
argument_list|,
argument|d
argument_list|,
argument|return -
literal|1
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|int
argument_list|,
argument|BIO_free
argument_list|,
argument|BIO *a
argument_list|,
argument|a
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|BIO *
argument_list|,
argument|BIO_new
argument_list|,
argument|BIO_METHOD *a
argument_list|,
argument|a
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC2
argument_list|(
argument|BIO *
argument_list|,
argument|BIO_new_mem_buf
argument_list|,
argument|void *a
argument_list|,
argument|a
argument_list|,
argument|int b
argument_list|,
argument|b
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC3
argument_list|(
argument|int
argument_list|,
argument|BIO_read
argument_list|,
argument|BIO *a
argument_list|,
argument|a
argument_list|,
argument|void *b
argument_list|,
argument|b
argument_list|,
argument|int c
argument_list|,
argument|c
argument_list|,
argument|return -
literal|1
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|BIO_METHOD *
argument_list|,
argument|BIO_s_mem
argument_list|,
argument|void
argument_list|,
argument|DUMMYARG
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC3
argument_list|(
argument|int
argument_list|,
argument|BIO_write
argument_list|,
argument|BIO *a
argument_list|,
argument|a
argument_list|,
argument|const void *b
argument_list|,
argument|b
argument_list|,
argument|int c
argument_list|,
argument|c
argument_list|,
argument|return -
literal|1
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|int
argument_list|,
argument|BN_num_bits
argument_list|,
argument|const BIGNUM *a
argument_list|,
argument|a
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|int
argument_list|,
argument|CRYPTO_num_locks
argument_list|,
argument|DUMMYARG
argument_list|,
argument|DUMMYARG
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|void
argument_list|,
argument|CRYPTO_set_locking_callback
argument_list|,
argument|void (*a)(int, int, const char *, int)
argument_list|,
argument|a
argument_list|,
argument|return
argument_list|,
argument|DUMMYARG
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|void
argument_list|,
argument|CRYPTO_set_id_callback
argument_list|,
argument|unsigned long (*a)()
argument_list|,
argument|a
argument_list|,
argument|return
argument_list|,
argument|DUMMYARG
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|void
argument_list|,
argument|CRYPTO_free
argument_list|,
argument|void *a
argument_list|,
argument|a
argument_list|,
argument|return
argument_list|,
argument|DUMMYARG
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|void
argument_list|,
argument|DSA_free
argument_list|,
argument|DSA *a
argument_list|,
argument|a
argument_list|,
argument|return
argument_list|,
argument|DUMMYARG
argument_list|)
end_macro
begin_if
if|#
directive|if
name|OPENSSL_VERSION_NUMBER
operator|<
literal|0x00908000L
end_if
begin_macro
name|DEFINEFUNC3
argument_list|(
argument|X509 *
argument_list|,
argument|d2i_X509
argument_list|,
argument|X509 **a
argument_list|,
argument|a
argument_list|,
argument|unsigned char **b
argument_list|,
argument|b
argument_list|,
argument|long c
argument_list|,
argument|c
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_else
else|#
directive|else
end_else
begin_comment
comment|// 0.9.8 broke SC and BC by changing this signature.
end_comment
begin_macro
name|DEFINEFUNC3
argument_list|(
argument|X509 *
argument_list|,
argument|d2i_X509
argument_list|,
argument|X509 **a
argument_list|,
argument|a
argument_list|,
argument|const unsigned char **b
argument_list|,
argument|b
argument_list|,
argument|long c
argument_list|,
argument|c
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|DEFINEFUNC2
argument_list|(
argument|char *
argument_list|,
argument|ERR_error_string
argument_list|,
argument|unsigned long a
argument_list|,
argument|a
argument_list|,
argument|char *b
argument_list|,
argument|b
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|unsigned long
argument_list|,
argument|ERR_get_error
argument_list|,
argument|DUMMYARG
argument_list|,
argument|DUMMYARG
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|void
argument_list|,
argument|ERR_free_strings
argument_list|,
argument|void
argument_list|,
argument|DUMMYARG
argument_list|,
argument|return
argument_list|,
argument|DUMMYARG
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|const EVP_CIPHER *
argument_list|,
argument|EVP_des_ede3_cbc
argument_list|,
argument|DUMMYARG
argument_list|,
argument|DUMMYARG
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC3
argument_list|(
argument|int
argument_list|,
argument|EVP_PKEY_assign
argument_list|,
argument|EVP_PKEY *a
argument_list|,
argument|a
argument_list|,
argument|int b
argument_list|,
argument|b
argument_list|,
argument|char *c
argument_list|,
argument|c
argument_list|,
argument|return -
literal|1
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC2
argument_list|(
argument|int
argument_list|,
argument|EVP_PKEY_set1_RSA
argument_list|,
argument|EVP_PKEY *a
argument_list|,
argument|a
argument_list|,
argument|RSA *b
argument_list|,
argument|b
argument_list|,
argument|return -
literal|1
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC2
argument_list|(
argument|int
argument_list|,
argument|EVP_PKEY_set1_DSA
argument_list|,
argument|EVP_PKEY *a
argument_list|,
argument|a
argument_list|,
argument|DSA *b
argument_list|,
argument|b
argument_list|,
argument|return -
literal|1
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|void
argument_list|,
argument|EVP_PKEY_free
argument_list|,
argument|EVP_PKEY *a
argument_list|,
argument|a
argument_list|,
argument|return
argument_list|,
argument|DUMMYARG
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|DSA *
argument_list|,
argument|EVP_PKEY_get1_DSA
argument_list|,
argument|EVP_PKEY *a
argument_list|,
argument|a
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|RSA *
argument_list|,
argument|EVP_PKEY_get1_RSA
argument_list|,
argument|EVP_PKEY *a
argument_list|,
argument|a
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|EVP_PKEY *
argument_list|,
argument|EVP_PKEY_new
argument_list|,
argument|DUMMYARG
argument_list|,
argument|DUMMYARG
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|int
argument_list|,
argument|EVP_PKEY_type
argument_list|,
argument|int a
argument_list|,
argument|a
argument_list|,
argument|return NID_undef
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC2
argument_list|(
argument|int
argument_list|,
argument|i2d_X509
argument_list|,
argument|X509 *a
argument_list|,
argument|a
argument_list|,
argument|unsigned char **b
argument_list|,
argument|b
argument_list|,
argument|return -
literal|1
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|const char *
argument_list|,
argument|OBJ_nid2sn
argument_list|,
argument|int a
argument_list|,
argument|a
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|const char *
argument_list|,
argument|OBJ_nid2ln
argument_list|,
argument|int a
argument_list|,
argument|a
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC3
argument_list|(
argument|int
argument_list|,
argument|i2t_ASN1_OBJECT
argument_list|,
argument|char *a
argument_list|,
argument|a
argument_list|,
argument|int b
argument_list|,
argument|b
argument_list|,
argument|ASN1_OBJECT *c
argument_list|,
argument|c
argument_list|,
argument|return -
literal|1
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC4
argument_list|(
argument|int
argument_list|,
argument|OBJ_obj2txt
argument_list|,
argument|char *a
argument_list|,
argument|a
argument_list|,
argument|int b
argument_list|,
argument|b
argument_list|,
argument|ASN1_OBJECT *c
argument_list|,
argument|c
argument_list|,
argument|int d
argument_list|,
argument|d
argument_list|,
argument|return -
literal|1
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|int
argument_list|,
argument|OBJ_obj2nid
argument_list|,
argument|const ASN1_OBJECT *a
argument_list|,
argument|a
argument_list|,
argument|return NID_undef
argument_list|,
argument|return
argument_list|)
end_macro
begin_ifdef
ifdef|#
directive|ifdef
name|SSLEAY_MACROS
end_ifdef
begin_macro
name|DEFINEFUNC6
argument_list|(
argument|void *
argument_list|,
argument|PEM_ASN1_read_bio
argument_list|,
argument|d2i_of_void *a
argument_list|,
argument|a
argument_list|,
argument|const char *b
argument_list|,
argument|b
argument_list|,
argument|BIO *c
argument_list|,
argument|c
argument_list|,
argument|void **d
argument_list|,
argument|d
argument_list|,
argument|pem_password_cb *e
argument_list|,
argument|e
argument_list|,
argument|void *f
argument_list|,
argument|f
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC6
argument_list|(
argument|void *
argument_list|,
argument|PEM_ASN1_write_bio
argument_list|,
argument|d2i_of_void *a
argument_list|,
argument|a
argument_list|,
argument|const char *b
argument_list|,
argument|b
argument_list|,
argument|BIO *c
argument_list|,
argument|c
argument_list|,
argument|void **d
argument_list|,
argument|d
argument_list|,
argument|pem_password_cb *e
argument_list|,
argument|e
argument_list|,
argument|void *f
argument_list|,
argument|f
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_else
else|#
directive|else
end_else
begin_macro
name|DEFINEFUNC4
argument_list|(
argument|DSA *
argument_list|,
argument|PEM_read_bio_DSAPrivateKey
argument_list|,
argument|BIO *a
argument_list|,
argument|a
argument_list|,
argument|DSA **b
argument_list|,
argument|b
argument_list|,
argument|pem_password_cb *c
argument_list|,
argument|c
argument_list|,
argument|void *d
argument_list|,
argument|d
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC4
argument_list|(
argument|RSA *
argument_list|,
argument|PEM_read_bio_RSAPrivateKey
argument_list|,
argument|BIO *a
argument_list|,
argument|a
argument_list|,
argument|RSA **b
argument_list|,
argument|b
argument_list|,
argument|pem_password_cb *c
argument_list|,
argument|c
argument_list|,
argument|void *d
argument_list|,
argument|d
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC7
argument_list|(
argument|int
argument_list|,
argument|PEM_write_bio_DSAPrivateKey
argument_list|,
argument|BIO *a
argument_list|,
argument|a
argument_list|,
argument|DSA *b
argument_list|,
argument|b
argument_list|,
argument|const EVP_CIPHER *c
argument_list|,
argument|c
argument_list|,
argument|unsigned char *d
argument_list|,
argument|d
argument_list|,
argument|int e
argument_list|,
argument|e
argument_list|,
argument|pem_password_cb *f
argument_list|,
argument|f
argument_list|,
argument|void *g
argument_list|,
argument|g
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC7
argument_list|(
argument|int
argument_list|,
argument|PEM_write_bio_RSAPrivateKey
argument_list|,
argument|BIO *a
argument_list|,
argument|a
argument_list|,
argument|RSA *b
argument_list|,
argument|b
argument_list|,
argument|const EVP_CIPHER *c
argument_list|,
argument|c
argument_list|,
argument|unsigned char *d
argument_list|,
argument|d
argument_list|,
argument|int e
argument_list|,
argument|e
argument_list|,
argument|pem_password_cb *f
argument_list|,
argument|f
argument_list|,
argument|void *g
argument_list|,
argument|g
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|DEFINEFUNC4
argument_list|(
argument|DSA *
argument_list|,
argument|PEM_read_bio_DSA_PUBKEY
argument_list|,
argument|BIO *a
argument_list|,
argument|a
argument_list|,
argument|DSA **b
argument_list|,
argument|b
argument_list|,
argument|pem_password_cb *c
argument_list|,
argument|c
argument_list|,
argument|void *d
argument_list|,
argument|d
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC4
argument_list|(
argument|RSA *
argument_list|,
argument|PEM_read_bio_RSA_PUBKEY
argument_list|,
argument|BIO *a
argument_list|,
argument|a
argument_list|,
argument|RSA **b
argument_list|,
argument|b
argument_list|,
argument|pem_password_cb *c
argument_list|,
argument|c
argument_list|,
argument|void *d
argument_list|,
argument|d
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC2
argument_list|(
argument|int
argument_list|,
argument|PEM_write_bio_DSA_PUBKEY
argument_list|,
argument|BIO *a
argument_list|,
argument|a
argument_list|,
argument|DSA *b
argument_list|,
argument|b
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC2
argument_list|(
argument|int
argument_list|,
argument|PEM_write_bio_RSA_PUBKEY
argument_list|,
argument|BIO *a
argument_list|,
argument|a
argument_list|,
argument|RSA *b
argument_list|,
argument|b
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC2
argument_list|(
argument|void
argument_list|,
argument|RAND_seed
argument_list|,
argument|const void *a
argument_list|,
argument|a
argument_list|,
argument|int b
argument_list|,
argument|b
argument_list|,
argument|return
argument_list|,
argument|DUMMYARG
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|int
argument_list|,
argument|RAND_status
argument_list|,
argument|void
argument_list|,
argument|DUMMYARG
argument_list|,
argument|return -
literal|1
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|void
argument_list|,
argument|RSA_free
argument_list|,
argument|RSA *a
argument_list|,
argument|a
argument_list|,
argument|return
argument_list|,
argument|DUMMYARG
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|int
argument_list|,
argument|sk_num
argument_list|,
argument|STACK *a
argument_list|,
argument|a
argument_list|,
argument|return -
literal|1
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC2
argument_list|(
argument|void
argument_list|,
argument|sk_pop_free
argument_list|,
argument|STACK *a
argument_list|,
argument|a
argument_list|,
argument|void (*b)(void*)
argument_list|,
argument|b
argument_list|,
argument|return
argument_list|,
argument|DUMMYARG
argument_list|)
end_macro
begin_if
if|#
directive|if
name|OPENSSL_VERSION_NUMBER
operator|>=
literal|0x10000000L
end_if
begin_macro
name|DEFINEFUNC
argument_list|(
argument|_STACK *
argument_list|,
argument|sk_new_null
argument_list|,
argument|DUMMYARG
argument_list|,
argument|DUMMYARG
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC2
argument_list|(
argument|void
argument_list|,
argument|sk_push
argument_list|,
argument|_STACK *a
argument_list|,
argument|a
argument_list|,
argument|void *b
argument_list|,
argument|b
argument_list|,
argument|return
argument_list|,
argument|DUMMYARG
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|void
argument_list|,
argument|sk_free
argument_list|,
argument|_STACK *a
argument_list|,
argument|a
argument_list|,
argument|return
argument_list|,
argument|DUMMYARG
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC2
argument_list|(
argument|void *
argument_list|,
argument|sk_value
argument_list|,
argument|STACK *a
argument_list|,
argument|a
argument_list|,
argument|int b
argument_list|,
argument|b
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_else
else|#
directive|else
end_else
begin_macro
name|DEFINEFUNC
argument_list|(
argument|STACK *
argument_list|,
argument|sk_new_null
argument_list|,
argument|DUMMYARG
argument_list|,
argument|DUMMYARG
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC2
argument_list|(
argument|void
argument_list|,
argument|sk_push
argument_list|,
argument|STACK *a
argument_list|,
argument|a
argument_list|,
argument|char *b
argument_list|,
argument|b
argument_list|,
argument|return
argument_list|,
argument|DUMMYARG
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|void
argument_list|,
argument|sk_free
argument_list|,
argument|STACK *a
argument_list|,
argument|a
argument_list|,
argument|return
argument_list|,
argument|DUMMYARG
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC2
argument_list|(
argument|char *
argument_list|,
argument|sk_value
argument_list|,
argument|STACK *a
argument_list|,
argument|a
argument_list|,
argument|int b
argument_list|,
argument|b
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|DEFINEFUNC
argument_list|(
argument|int
argument_list|,
argument|SSL_accept
argument_list|,
argument|SSL *a
argument_list|,
argument|a
argument_list|,
argument|return -
literal|1
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|int
argument_list|,
argument|SSL_clear
argument_list|,
argument|SSL *a
argument_list|,
argument|a
argument_list|,
argument|return -
literal|1
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC3
argument_list|(
argument|char *
argument_list|,
argument|SSL_CIPHER_description
argument_list|,
argument|SSL_CIPHER *a
argument_list|,
argument|a
argument_list|,
argument|char *b
argument_list|,
argument|b
argument_list|,
argument|int c
argument_list|,
argument|c
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC2
argument_list|(
argument|int
argument_list|,
argument|SSL_CIPHER_get_bits
argument_list|,
argument|SSL_CIPHER *a
argument_list|,
argument|a
argument_list|,
argument|int *b
argument_list|,
argument|b
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|int
argument_list|,
argument|SSL_connect
argument_list|,
argument|SSL *a
argument_list|,
argument|a
argument_list|,
argument|return -
literal|1
argument_list|,
argument|return
argument_list|)
end_macro
begin_if
if|#
directive|if
name|OPENSSL_VERSION_NUMBER
operator|>=
literal|0x00908000L
end_if
begin_comment
comment|// 0.9.8 broke SC and BC by changing this function's signature.
end_comment
begin_macro
name|DEFINEFUNC
argument_list|(
argument|int
argument_list|,
argument|SSL_CTX_check_private_key
argument_list|,
argument|const SSL_CTX *a
argument_list|,
argument|a
argument_list|,
argument|return -
literal|1
argument_list|,
argument|return
argument_list|)
end_macro
begin_else
else|#
directive|else
end_else
begin_macro
name|DEFINEFUNC
argument_list|(
argument|int
argument_list|,
argument|SSL_CTX_check_private_key
argument_list|,
argument|SSL_CTX *a
argument_list|,
argument|a
argument_list|,
argument|return -
literal|1
argument_list|,
argument|return
argument_list|)
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|DEFINEFUNC4
argument_list|(
argument|long
argument_list|,
argument|SSL_CTX_ctrl
argument_list|,
argument|SSL_CTX *a
argument_list|,
argument|a
argument_list|,
argument|int b
argument_list|,
argument|b
argument_list|,
argument|long c
argument_list|,
argument|c
argument_list|,
argument|void *d
argument_list|,
argument|d
argument_list|,
argument|return -
literal|1
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|void
argument_list|,
argument|SSL_CTX_free
argument_list|,
argument|SSL_CTX *a
argument_list|,
argument|a
argument_list|,
argument|return
argument_list|,
argument|DUMMYARG
argument_list|)
end_macro
begin_if
if|#
directive|if
name|OPENSSL_VERSION_NUMBER
operator|>=
literal|0x10000000L
end_if
begin_macro
name|DEFINEFUNC
argument_list|(
argument|SSL_CTX *
argument_list|,
argument|SSL_CTX_new
argument_list|,
argument|const SSL_METHOD *a
argument_list|,
argument|a
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_else
else|#
directive|else
end_else
begin_macro
name|DEFINEFUNC
argument_list|(
argument|SSL_CTX *
argument_list|,
argument|SSL_CTX_new
argument_list|,
argument|SSL_METHOD *a
argument_list|,
argument|a
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|DEFINEFUNC2
argument_list|(
argument|int
argument_list|,
argument|SSL_CTX_set_cipher_list
argument_list|,
argument|SSL_CTX *a
argument_list|,
argument|a
argument_list|,
argument|const char *b
argument_list|,
argument|b
argument_list|,
argument|return -
literal|1
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|int
argument_list|,
argument|SSL_CTX_set_default_verify_paths
argument_list|,
argument|SSL_CTX *a
argument_list|,
argument|a
argument_list|,
argument|return -
literal|1
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC3
argument_list|(
argument|void
argument_list|,
argument|SSL_CTX_set_verify
argument_list|,
argument|SSL_CTX *a
argument_list|,
argument|a
argument_list|,
argument|int b
argument_list|,
argument|b
argument_list|,
argument|int (*c)(int, X509_STORE_CTX *)
argument_list|,
argument|c
argument_list|,
argument|return
argument_list|,
argument|DUMMYARG
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC2
argument_list|(
argument|void
argument_list|,
argument|SSL_CTX_set_verify_depth
argument_list|,
argument|SSL_CTX *a
argument_list|,
argument|a
argument_list|,
argument|int b
argument_list|,
argument|b
argument_list|,
argument|return
argument_list|,
argument|DUMMYARG
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC2
argument_list|(
argument|int
argument_list|,
argument|SSL_CTX_use_certificate
argument_list|,
argument|SSL_CTX *a
argument_list|,
argument|a
argument_list|,
argument|X509 *b
argument_list|,
argument|b
argument_list|,
argument|return -
literal|1
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC3
argument_list|(
argument|int
argument_list|,
argument|SSL_CTX_use_certificate_file
argument_list|,
argument|SSL_CTX *a
argument_list|,
argument|a
argument_list|,
argument|const char *b
argument_list|,
argument|b
argument_list|,
argument|int c
argument_list|,
argument|c
argument_list|,
argument|return -
literal|1
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC2
argument_list|(
argument|int
argument_list|,
argument|SSL_CTX_use_PrivateKey
argument_list|,
argument|SSL_CTX *a
argument_list|,
argument|a
argument_list|,
argument|EVP_PKEY *b
argument_list|,
argument|b
argument_list|,
argument|return -
literal|1
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC2
argument_list|(
argument|int
argument_list|,
argument|SSL_CTX_use_RSAPrivateKey
argument_list|,
argument|SSL_CTX *a
argument_list|,
argument|a
argument_list|,
argument|RSA *b
argument_list|,
argument|b
argument_list|,
argument|return -
literal|1
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC3
argument_list|(
argument|int
argument_list|,
argument|SSL_CTX_use_PrivateKey_file
argument_list|,
argument|SSL_CTX *a
argument_list|,
argument|a
argument_list|,
argument|const char *b
argument_list|,
argument|b
argument_list|,
argument|int c
argument_list|,
argument|c
argument_list|,
argument|return -
literal|1
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|void
argument_list|,
argument|SSL_free
argument_list|,
argument|SSL *a
argument_list|,
argument|a
argument_list|,
argument|return
argument_list|,
argument|DUMMYARG
argument_list|)
end_macro
begin_if
if|#
directive|if
name|OPENSSL_VERSION_NUMBER
operator|>=
literal|0x00908000L
end_if
begin_comment
comment|// 0.9.8 broke SC and BC by changing this function's signature.
end_comment
begin_macro
DECL|variable|a
DECL|variable|a
name|DEFINEFUNC
argument_list|(
argument|STACK_OF(SSL_CIPHER) *
argument_list|,
argument|SSL_get_ciphers
argument_list|,
argument|const SSL *a
argument_list|,
argument|a
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_else
else|#
directive|else
end_else
begin_macro
name|DEFINEFUNC
argument_list|(
argument|STACK_OF(SSL_CIPHER) *
argument_list|,
argument|SSL_get_ciphers
argument_list|,
argument|SSL *a
argument_list|,
argument|a
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|OPENSSL_VERSION_NUMBER
operator|>=
literal|0x10000000L
end_if
begin_macro
name|DEFINEFUNC
argument_list|(
argument|const SSL_CIPHER *
argument_list|,
argument|SSL_get_current_cipher
argument_list|,
argument|SSL *a
argument_list|,
argument|a
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_else
else|#
directive|else
end_else
begin_macro
name|DEFINEFUNC
argument_list|(
argument|SSL_CIPHER *
argument_list|,
argument|SSL_get_current_cipher
argument_list|,
argument|SSL *a
argument_list|,
argument|a
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|DEFINEFUNC2
argument_list|(
argument|int
argument_list|,
argument|SSL_get_error
argument_list|,
argument|SSL *a
argument_list|,
argument|a
argument_list|,
argument|int b
argument_list|,
argument|b
argument_list|,
argument|return -
literal|1
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|STACK_OF(X509) *
argument_list|,
argument|SSL_get_peer_cert_chain
argument_list|,
argument|SSL *a
argument_list|,
argument|a
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|X509 *
argument_list|,
argument|SSL_get_peer_certificate
argument_list|,
argument|SSL *a
argument_list|,
argument|a
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_if
if|#
directive|if
name|OPENSSL_VERSION_NUMBER
operator|>=
literal|0x00908000L
end_if
begin_comment
comment|// 0.9.8 broke SC and BC by changing this function's signature.
end_comment
begin_macro
name|DEFINEFUNC
argument_list|(
argument|long
argument_list|,
argument|SSL_get_verify_result
argument_list|,
argument|const SSL *a
argument_list|,
argument|a
argument_list|,
argument|return -
literal|1
argument_list|,
argument|return
argument_list|)
end_macro
begin_else
else|#
directive|else
end_else
begin_macro
name|DEFINEFUNC
argument_list|(
argument|long
argument_list|,
argument|SSL_get_verify_result
argument_list|,
argument|SSL *a
argument_list|,
argument|a
argument_list|,
argument|return -
literal|1
argument_list|,
argument|return
argument_list|)
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|DEFINEFUNC
argument_list|(
argument|int
argument_list|,
argument|SSL_library_init
argument_list|,
argument|void
argument_list|,
argument|DUMMYARG
argument_list|,
argument|return -
literal|1
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|void
argument_list|,
argument|SSL_load_error_strings
argument_list|,
argument|void
argument_list|,
argument|DUMMYARG
argument_list|,
argument|return
argument_list|,
argument|DUMMYARG
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|SSL *
argument_list|,
argument|SSL_new
argument_list|,
argument|SSL_CTX *a
argument_list|,
argument|a
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_if
if|#
directive|if
name|OPENSSL_VERSION_NUMBER
operator|>=
literal|0x0090806fL
operator|&&
operator|!
name|defined
argument_list|(
name|OPENSSL_NO_TLSEXT
argument_list|)
end_if
begin_macro
name|DEFINEFUNC4
argument_list|(
argument|long
argument_list|,
argument|SSL_ctrl
argument_list|,
argument|SSL *a
argument_list|,
argument|a
argument_list|,
argument|int cmd
argument_list|,
argument|cmd
argument_list|,
argument|long larg
argument_list|,
argument|larg
argument_list|,
argument|void *parg
argument_list|,
argument|parg
argument_list|,
argument|return -
literal|1
argument_list|,
argument|return
argument_list|)
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|DEFINEFUNC3
argument_list|(
argument|int
argument_list|,
argument|SSL_read
argument_list|,
argument|SSL *a
argument_list|,
argument|a
argument_list|,
argument|void *b
argument_list|,
argument|b
argument_list|,
argument|int c
argument_list|,
argument|c
argument_list|,
argument|return -
literal|1
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC3
argument_list|(
argument|void
argument_list|,
argument|SSL_set_bio
argument_list|,
argument|SSL *a
argument_list|,
argument|a
argument_list|,
argument|BIO *b
argument_list|,
argument|b
argument_list|,
argument|BIO *c
argument_list|,
argument|c
argument_list|,
argument|return
argument_list|,
argument|DUMMYARG
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|void
argument_list|,
argument|SSL_set_accept_state
argument_list|,
argument|SSL *a
argument_list|,
argument|a
argument_list|,
argument|return
argument_list|,
argument|DUMMYARG
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|void
argument_list|,
argument|SSL_set_connect_state
argument_list|,
argument|SSL *a
argument_list|,
argument|a
argument_list|,
argument|return
argument_list|,
argument|DUMMYARG
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|int
argument_list|,
argument|SSL_shutdown
argument_list|,
argument|SSL *a
argument_list|,
argument|a
argument_list|,
argument|return -
literal|1
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC2
argument_list|(
argument|int
argument_list|,
argument|SSL_set_session
argument_list|,
argument|SSL* to
argument_list|,
argument|to
argument_list|,
argument|SSL_SESSION *session
argument_list|,
argument|session
argument_list|,
argument|return -
literal|1
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|void
argument_list|,
argument|SSL_SESSION_free
argument_list|,
argument|SSL_SESSION *ses
argument_list|,
argument|ses
argument_list|,
argument|return
argument_list|,
argument|DUMMYARG
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|SSL_SESSION*
argument_list|,
argument|SSL_get1_session
argument_list|,
argument|SSL *ssl
argument_list|,
argument|ssl
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|SSL_SESSION*
argument_list|,
argument|SSL_get_session
argument_list|,
argument|const SSL *ssl
argument_list|,
argument|ssl
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_if
if|#
directive|if
name|OPENSSL_VERSION_NUMBER
operator|>=
literal|0x10000000L
end_if
begin_ifndef
ifndef|#
directive|ifndef
name|OPENSSL_NO_SSL2
end_ifndef
begin_macro
name|DEFINEFUNC
argument_list|(
argument|const SSL_METHOD *
argument_list|,
argument|SSLv2_client_method
argument_list|,
argument|DUMMYARG
argument_list|,
argument|DUMMYARG
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|DEFINEFUNC
argument_list|(
argument|const SSL_METHOD *
argument_list|,
argument|SSLv3_client_method
argument_list|,
argument|DUMMYARG
argument_list|,
argument|DUMMYARG
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|const SSL_METHOD *
argument_list|,
argument|SSLv23_client_method
argument_list|,
argument|DUMMYARG
argument_list|,
argument|DUMMYARG
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|const SSL_METHOD *
argument_list|,
argument|TLSv1_client_method
argument_list|,
argument|DUMMYARG
argument_list|,
argument|DUMMYARG
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_if
if|#
directive|if
name|OPENSSL_VERSION_NUMBER
operator|>=
literal|0x10001000L
end_if
begin_macro
name|DEFINEFUNC
argument_list|(
argument|const SSL_METHOD *
argument_list|,
argument|TLSv1_1_client_method
argument_list|,
argument|DUMMYARG
argument_list|,
argument|DUMMYARG
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|const SSL_METHOD *
argument_list|,
argument|TLSv1_2_client_method
argument_list|,
argument|DUMMYARG
argument_list|,
argument|DUMMYARG
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|OPENSSL_NO_SSL2
end_ifndef
begin_macro
name|DEFINEFUNC
argument_list|(
argument|const SSL_METHOD *
argument_list|,
argument|SSLv2_server_method
argument_list|,
argument|DUMMYARG
argument_list|,
argument|DUMMYARG
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|DEFINEFUNC
argument_list|(
argument|const SSL_METHOD *
argument_list|,
argument|SSLv3_server_method
argument_list|,
argument|DUMMYARG
argument_list|,
argument|DUMMYARG
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|const SSL_METHOD *
argument_list|,
argument|SSLv23_server_method
argument_list|,
argument|DUMMYARG
argument_list|,
argument|DUMMYARG
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|const SSL_METHOD *
argument_list|,
argument|TLSv1_server_method
argument_list|,
argument|DUMMYARG
argument_list|,
argument|DUMMYARG
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_if
if|#
directive|if
name|OPENSSL_VERSION_NUMBER
operator|>=
literal|0x10001000L
end_if
begin_macro
name|DEFINEFUNC
argument_list|(
argument|const SSL_METHOD *
argument_list|,
argument|TLSv1_1_server_method
argument_list|,
argument|DUMMYARG
argument_list|,
argument|DUMMYARG
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|const SSL_METHOD *
argument_list|,
argument|TLSv1_2_server_method
argument_list|,
argument|DUMMYARG
argument_list|,
argument|DUMMYARG
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_else
else|#
directive|else
end_else
begin_macro
name|DEFINEFUNC
argument_list|(
argument|SSL_METHOD *
argument_list|,
argument|SSLv2_client_method
argument_list|,
argument|DUMMYARG
argument_list|,
argument|DUMMYARG
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|SSL_METHOD *
argument_list|,
argument|SSLv3_client_method
argument_list|,
argument|DUMMYARG
argument_list|,
argument|DUMMYARG
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|SSL_METHOD *
argument_list|,
argument|SSLv23_client_method
argument_list|,
argument|DUMMYARG
argument_list|,
argument|DUMMYARG
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|SSL_METHOD *
argument_list|,
argument|TLSv1_client_method
argument_list|,
argument|DUMMYARG
argument_list|,
argument|DUMMYARG
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|SSL_METHOD *
argument_list|,
argument|SSLv2_server_method
argument_list|,
argument|DUMMYARG
argument_list|,
argument|DUMMYARG
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|SSL_METHOD *
argument_list|,
argument|SSLv3_server_method
argument_list|,
argument|DUMMYARG
argument_list|,
argument|DUMMYARG
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|SSL_METHOD *
argument_list|,
argument|SSLv23_server_method
argument_list|,
argument|DUMMYARG
argument_list|,
argument|DUMMYARG
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|SSL_METHOD *
argument_list|,
argument|TLSv1_server_method
argument_list|,
argument|DUMMYARG
argument_list|,
argument|DUMMYARG
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|DEFINEFUNC3
argument_list|(
argument|int
argument_list|,
argument|SSL_write
argument_list|,
argument|SSL *a
argument_list|,
argument|a
argument_list|,
argument|const void *b
argument_list|,
argument|b
argument_list|,
argument|int c
argument_list|,
argument|c
argument_list|,
argument|return -
literal|1
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC2
argument_list|(
argument|int
argument_list|,
argument|X509_cmp
argument_list|,
argument|X509 *a
argument_list|,
argument|a
argument_list|,
argument|X509 *b
argument_list|,
argument|b
argument_list|,
argument|return -
literal|1
argument_list|,
argument|return
argument_list|)
end_macro
begin_ifndef
ifndef|#
directive|ifndef
name|SSLEAY_MACROS
end_ifndef
begin_macro
name|DEFINEFUNC
argument_list|(
argument|X509 *
argument_list|,
argument|X509_dup
argument_list|,
argument|X509 *a
argument_list|,
argument|a
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|DEFINEFUNC2
argument_list|(
argument|void
argument_list|,
argument|X509_print
argument_list|,
argument|BIO *a
argument_list|,
argument|a
argument_list|,
argument|X509 *b
argument_list|,
argument|b
argument_list|,
argument|return
argument_list|,
argument|DUMMYARG
argument_list|)
end_macro
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_macro
name|DEFINEFUNC
argument_list|(
argument|ASN1_OBJECT *
argument_list|,
argument|X509_EXTENSION_get_object
argument_list|,
argument|X509_EXTENSION *a
argument_list|,
argument|a
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|void
argument_list|,
argument|X509_free
argument_list|,
argument|X509 *a
argument_list|,
argument|a
argument_list|,
argument|return
argument_list|,
argument|DUMMYARG
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC2
argument_list|(
argument|X509_EXTENSION *
argument_list|,
argument|X509_get_ext
argument_list|,
argument|X509 *a
argument_list|,
argument|a
argument_list|,
argument|int b
argument_list|,
argument|b
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|int
argument_list|,
argument|X509_get_ext_count
argument_list|,
argument|X509 *a
argument_list|,
argument|a
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC4
argument_list|(
argument|void *
argument_list|,
argument|X509_get_ext_d2i
argument_list|,
argument|X509 *a
argument_list|,
argument|a
argument_list|,
argument|int b
argument_list|,
argument|b
argument_list|,
argument|int *c
argument_list|,
argument|c
argument_list|,
argument|int *d
argument_list|,
argument|d
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|const X509V3_EXT_METHOD *
argument_list|,
argument|X509V3_EXT_get
argument_list|,
argument|X509_EXTENSION *a
argument_list|,
argument|a
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|void *
argument_list|,
argument|X509V3_EXT_d2i
argument_list|,
argument|X509_EXTENSION *a
argument_list|,
argument|a
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|int
argument_list|,
argument|X509_EXTENSION_get_critical
argument_list|,
argument|X509_EXTENSION *a
argument_list|,
argument|a
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|ASN1_OCTET_STRING *
argument_list|,
argument|X509_EXTENSION_get_data
argument_list|,
argument|X509_EXTENSION *a
argument_list|,
argument|a
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|void
argument_list|,
argument|BASIC_CONSTRAINTS_free
argument_list|,
argument|BASIC_CONSTRAINTS *a
argument_list|,
argument|a
argument_list|,
argument|return
argument_list|,
argument|DUMMYARG
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|void
argument_list|,
argument|AUTHORITY_KEYID_free
argument_list|,
argument|AUTHORITY_KEYID *a
argument_list|,
argument|a
argument_list|,
argument|return
argument_list|,
argument|DUMMYARG
argument_list|)
end_macro
begin_if
if|#
directive|if
name|OPENSSL_VERSION_NUMBER
operator|>=
literal|0x10000000L
end_if
begin_macro
name|DEFINEFUNC2
argument_list|(
argument|int
argument_list|,
argument|ASN1_STRING_print
argument_list|,
argument|BIO *a
argument_list|,
argument|a
argument_list|,
argument|const ASN1_STRING *b
argument_list|,
argument|b
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_else
else|#
directive|else
end_else
begin_macro
name|DEFINEFUNC2
argument_list|(
argument|int
argument_list|,
argument|ASN1_STRING_print
argument_list|,
argument|BIO *a
argument_list|,
argument|a
argument_list|,
argument|ASN1_STRING *b
argument_list|,
argument|b
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|DEFINEFUNC
argument_list|(
argument|X509_NAME *
argument_list|,
argument|X509_get_issuer_name
argument_list|,
argument|X509 *a
argument_list|,
argument|a
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|X509_NAME *
argument_list|,
argument|X509_get_subject_name
argument_list|,
argument|X509 *a
argument_list|,
argument|a
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|int
argument_list|,
argument|X509_verify_cert
argument_list|,
argument|X509_STORE_CTX *a
argument_list|,
argument|a
argument_list|,
argument|return -
literal|1
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|int
argument_list|,
argument|X509_NAME_entry_count
argument_list|,
argument|X509_NAME *a
argument_list|,
argument|a
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC2
argument_list|(
argument|X509_NAME_ENTRY *
argument_list|,
argument|X509_NAME_get_entry
argument_list|,
argument|X509_NAME *a
argument_list|,
argument|a
argument_list|,
argument|int b
argument_list|,
argument|b
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|ASN1_STRING *
argument_list|,
argument|X509_NAME_ENTRY_get_data
argument_list|,
argument|X509_NAME_ENTRY *a
argument_list|,
argument|a
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|ASN1_OBJECT *
argument_list|,
argument|X509_NAME_ENTRY_get_object
argument_list|,
argument|X509_NAME_ENTRY *a
argument_list|,
argument|a
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|EVP_PKEY *
argument_list|,
argument|X509_PUBKEY_get
argument_list|,
argument|X509_PUBKEY *a
argument_list|,
argument|a
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|void
argument_list|,
argument|X509_STORE_free
argument_list|,
argument|X509_STORE *a
argument_list|,
argument|a
argument_list|,
argument|return
argument_list|,
argument|DUMMYARG
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|X509_STORE *
argument_list|,
argument|X509_STORE_new
argument_list|,
argument|DUMMYARG
argument_list|,
argument|DUMMYARG
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC2
argument_list|(
argument|int
argument_list|,
argument|X509_STORE_add_cert
argument_list|,
argument|X509_STORE *a
argument_list|,
argument|a
argument_list|,
argument|X509 *b
argument_list|,
argument|b
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|void
argument_list|,
argument|X509_STORE_CTX_free
argument_list|,
argument|X509_STORE_CTX *a
argument_list|,
argument|a
argument_list|,
argument|return
argument_list|,
argument|DUMMYARG
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC4
argument_list|(
argument|int
argument_list|,
argument|X509_STORE_CTX_init
argument_list|,
argument|X509_STORE_CTX *a
argument_list|,
argument|a
argument_list|,
argument|X509_STORE *b
argument_list|,
argument|b
argument_list|,
argument|X509 *c
argument_list|,
argument|c
argument_list|,
argument|STACK_OF(X509) *d
argument_list|,
argument|d
argument_list|,
argument|return -
literal|1
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC2
argument_list|(
argument|int
argument_list|,
argument|X509_STORE_CTX_set_purpose
argument_list|,
argument|X509_STORE_CTX *a
argument_list|,
argument|a
argument_list|,
argument|int b
argument_list|,
argument|b
argument_list|,
argument|return -
literal|1
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|int
argument_list|,
argument|X509_STORE_CTX_get_error
argument_list|,
argument|X509_STORE_CTX *a
argument_list|,
argument|a
argument_list|,
argument|return -
literal|1
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|int
argument_list|,
argument|X509_STORE_CTX_get_error_depth
argument_list|,
argument|X509_STORE_CTX *a
argument_list|,
argument|a
argument_list|,
argument|return -
literal|1
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|X509 *
argument_list|,
argument|X509_STORE_CTX_get_current_cert
argument_list|,
argument|X509_STORE_CTX *a
argument_list|,
argument|a
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
DECL|variable|a
DECL|variable|a
name|DEFINEFUNC
argument_list|(
argument|STACK_OF(X509) *
argument_list|,
argument|X509_STORE_CTX_get_chain
argument_list|,
argument|X509_STORE_CTX *a
argument_list|,
argument|a
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|X509_STORE_CTX *
argument_list|,
argument|X509_STORE_CTX_new
argument_list|,
argument|DUMMYARG
argument_list|,
argument|DUMMYARG
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_ifdef
ifdef|#
directive|ifdef
name|SSLEAY_MACROS
end_ifdef
begin_macro
name|DEFINEFUNC2
argument_list|(
argument|int
argument_list|,
argument|i2d_DSAPrivateKey
argument_list|,
argument|const DSA *a
argument_list|,
argument|a
argument_list|,
argument|unsigned char **b
argument_list|,
argument|b
argument_list|,
argument|return -
literal|1
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC2
argument_list|(
argument|int
argument_list|,
argument|i2d_RSAPrivateKey
argument_list|,
argument|const RSA *a
argument_list|,
argument|a
argument_list|,
argument|unsigned char **b
argument_list|,
argument|b
argument_list|,
argument|return -
literal|1
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC3
argument_list|(
argument|RSA *
argument_list|,
argument|d2i_RSAPrivateKey
argument_list|,
argument|RSA **a
argument_list|,
argument|a
argument_list|,
argument|unsigned char **b
argument_list|,
argument|b
argument_list|,
argument|long c
argument_list|,
argument|c
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC3
argument_list|(
argument|DSA *
argument_list|,
argument|d2i_DSAPrivateKey
argument_list|,
argument|DSA **a
argument_list|,
argument|a
argument_list|,
argument|unsigned char **b
argument_list|,
argument|b
argument_list|,
argument|long c
argument_list|,
argument|c
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|DEFINEFUNC
argument_list|(
argument|void
argument_list|,
argument|OPENSSL_add_all_algorithms_noconf
argument_list|,
argument|void
argument_list|,
argument|DUMMYARG
argument_list|,
argument|return
argument_list|,
argument|DUMMYARG
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|void
argument_list|,
argument|OPENSSL_add_all_algorithms_conf
argument_list|,
argument|void
argument_list|,
argument|DUMMYARG
argument_list|,
argument|return
argument_list|,
argument|DUMMYARG
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC3
argument_list|(
argument|int
argument_list|,
argument|SSL_CTX_load_verify_locations
argument_list|,
argument|SSL_CTX *ctx
argument_list|,
argument|ctx
argument_list|,
argument|const char *CAfile
argument_list|,
argument|CAfile
argument_list|,
argument|const char *CApath
argument_list|,
argument|CApath
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|long
argument_list|,
argument|SSLeay
argument_list|,
argument|void
argument_list|,
argument|DUMMYARG
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|const char *
argument_list|,
argument|SSLeay_version
argument_list|,
argument|int a
argument_list|,
argument|a
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC2
argument_list|(
argument|int
argument_list|,
argument|i2d_SSL_SESSION
argument_list|,
argument|SSL_SESSION *in
argument_list|,
argument|in
argument_list|,
argument|unsigned char **pp
argument_list|,
argument|pp
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC3
argument_list|(
argument|SSL_SESSION *
argument_list|,
argument|d2i_SSL_SESSION
argument_list|,
argument|SSL_SESSION **a
argument_list|,
argument|a
argument_list|,
argument|const unsigned char **pp
argument_list|,
argument|pp
argument_list|,
argument|long length
argument_list|,
argument|length
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_if
if|#
directive|if
name|OPENSSL_VERSION_NUMBER
operator|>=
literal|0x1000100fL
operator|&&
operator|!
name|defined
argument_list|(
name|OPENSSL_NO_TLSEXT
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|OPENSSL_NO_NEXTPROTONEG
argument_list|)
end_if
begin_macro
name|DEFINEFUNC6
argument_list|(
argument|int
argument_list|,
argument|SSL_select_next_proto
argument_list|,
argument|unsigned char **out
argument_list|,
argument|out
argument_list|,
argument|unsigned char *outlen
argument_list|,
argument|outlen
argument_list|,
argument|const unsigned char *in
argument_list|,
argument|in
argument_list|,
argument|unsigned int inlen
argument_list|,
argument|inlen
argument_list|,
argument|const unsigned char *client
argument_list|,
argument|client
argument_list|,
argument|unsigned int client_len
argument_list|,
argument|client_len
argument_list|,
argument|return -
literal|1
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC3
argument_list|(
argument|void
argument_list|,
argument|SSL_CTX_set_next_proto_select_cb
argument_list|,
argument|SSL_CTX *s
argument_list|,
argument|s
argument_list|,
argument|int (*cb) (SSL *ssl, unsigned char **out,                        unsigned char *outlen,                        const unsigned char *in,                        unsigned int inlen, void *arg)
argument_list|,
argument|cb
argument_list|,
argument|void *arg
argument_list|,
argument|arg
argument_list|,
argument|return
argument_list|,
argument|DUMMYARG
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC3
argument_list|(
argument|void
argument_list|,
argument|SSL_get0_next_proto_negotiated
argument_list|,
argument|const SSL *s
argument_list|,
argument|s
argument_list|,
argument|const unsigned char **data
argument_list|,
argument|data
argument_list|,
argument|unsigned *len
argument_list|,
argument|len
argument_list|,
argument|return
argument_list|,
argument|DUMMYARG
argument_list|)
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// OPENSSL_VERSION_NUMBER>= 0x1000100fL ...
end_comment
begin_macro
name|DEFINEFUNC
argument_list|(
argument|DH *
argument_list|,
argument|DH_new
argument_list|,
argument|DUMMYARG
argument_list|,
argument|DUMMYARG
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|void
argument_list|,
argument|DH_free
argument_list|,
argument|DH *dh
argument_list|,
argument|dh
argument_list|,
argument|return
argument_list|,
argument|DUMMYARG
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC3
argument_list|(
argument|BIGNUM *
argument_list|,
argument|BN_bin2bn
argument_list|,
argument|const unsigned char *s
argument_list|,
argument|s
argument_list|,
argument|int len
argument_list|,
argument|len
argument_list|,
argument|BIGNUM *ret
argument_list|,
argument|ret
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|EC_KEY *
argument_list|,
argument|EC_KEY_new_by_curve_name
argument_list|,
argument|int nid
argument_list|,
argument|nid
argument_list|,
argument|return
literal|0
argument_list|,
argument|return
argument_list|)
end_macro
begin_macro
name|DEFINEFUNC
argument_list|(
argument|void
argument_list|,
argument|EC_KEY_free
argument_list|,
argument|EC_KEY *ecdh
argument_list|,
argument|ecdh
argument_list|,
argument|return
argument_list|,
argument|DUMMYARG
argument_list|)
end_macro
begin_define
DECL|macro|RESOLVEFUNC
define|#
directive|define
name|RESOLVEFUNC
parameter_list|(
name|func
parameter_list|)
define|\
value|if (!(_q_##func = _q_PTR_##func(libs.first->resolve(#func)))     \&& !(_q_##func = _q_PTR_##func(libs.second->resolve(#func)))) \         qsslSocketCannotResolveSymbolWarning(#func);
end_define
begin_if
if|#
directive|if
operator|!
name|defined
name|QT_LINKED_OPENSSL
end_if
begin_ifdef
ifdef|#
directive|ifdef
name|QT_NO_LIBRARY
end_ifdef
begin_function
name|bool
name|q_resolveOpenSslSymbols
parameter_list|()
block|{
name|qWarning
argument_list|(
literal|"QSslSocket: unable to resolve symbols. "
literal|"QT_NO_LIBRARY is defined which means runtime resolving of "
literal|"libraries won't work."
argument_list|)
expr_stmt|;
name|qWarning
argument_list|(
literal|"Either compile Qt statically or with support for runtime resolving "
literal|"of libraries."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_else
else|#
directive|else
end_else
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_UNIX
end_ifdef
begin_function
specifier|static
name|bool
name|libGreaterThan
parameter_list|(
specifier|const
name|QString
modifier|&
name|lhs
parameter_list|,
specifier|const
name|QString
modifier|&
name|rhs
parameter_list|)
block|{
name|QStringList
name|lhsparts
init|=
name|lhs
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
argument_list|)
decl_stmt|;
name|QStringList
name|rhsparts
init|=
name|rhs
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|lhsparts
operator|.
name|count
argument_list|()
operator|>
literal|1
operator|&&
name|rhsparts
operator|.
name|count
argument_list|()
operator|>
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|rhsparts
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|lhsparts
operator|.
name|count
argument_list|()
operator|<=
name|i
condition|)
comment|// left hand side is shorter, so it's less than rhs
return|return
literal|false
return|;
name|bool
name|ok
init|=
literal|false
decl_stmt|;
name|int
name|b
init|=
literal|0
decl_stmt|;
name|int
name|a
init|=
name|lhsparts
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|toInt
argument_list|(
operator|&
name|ok
argument_list|)
decl_stmt|;
if|if
condition|(
name|ok
condition|)
name|b
operator|=
name|rhsparts
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|toInt
argument_list|(
operator|&
name|ok
argument_list|)
expr_stmt|;
if|if
condition|(
name|ok
condition|)
block|{
comment|// both toInt succeeded
if|if
condition|(
name|a
operator|==
name|b
condition|)
continue|continue;
return|return
name|a
operator|>
name|b
return|;
block|}
else|else
block|{
comment|// compare as strings;
if|if
condition|(
name|lhsparts
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
name|rhsparts
operator|.
name|at
argument_list|(
name|i
argument_list|)
condition|)
continue|continue;
return|return
name|lhsparts
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|>
name|rhsparts
operator|.
name|at
argument_list|(
name|i
argument_list|)
return|;
block|}
block|}
comment|// they compared strictly equally so far
comment|// lhs cannot be less than rhs
return|return
literal|true
return|;
block|}
end_function
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_LINUX
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_ANDROID
argument_list|)
end_if
begin_function
specifier|static
name|int
name|dlIterateCallback
parameter_list|(
name|struct
name|dl_phdr_info
modifier|*
name|info
parameter_list|,
name|size_t
name|size
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
block|{
if|if
condition|(
name|size
operator|<
sizeof|sizeof
argument_list|(
name|info
operator|->
name|dlpi_addr
argument_list|)
operator|+
sizeof|sizeof
argument_list|(
name|info
operator|->
name|dlpi_name
argument_list|)
condition|)
return|return
literal|1
return|;
name|QSet
argument_list|<
name|QString
argument_list|>
modifier|*
name|paths
init|=
operator|(
name|QSet
argument_list|<
name|QString
argument_list|>
operator|*
operator|)
name|data
decl_stmt|;
name|QString
name|path
init|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|info
operator|->
name|dlpi_name
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|path
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QFileInfo
name|fi
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|path
operator|=
name|fi
operator|.
name|absolutePath
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|path
operator|.
name|isEmpty
argument_list|()
condition|)
name|paths
operator|->
name|insert
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
specifier|static
name|QStringList
name|libraryPathList
parameter_list|()
block|{
name|QStringList
name|paths
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_DARWIN
name|paths
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
name|qgetenv
argument_list|(
literal|"DYLD_LIBRARY_PATH"
argument_list|)
argument_list|)
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
argument_list|,
name|QString
operator|::
name|SkipEmptyParts
argument_list|)
expr_stmt|;
else|#
directive|else
name|paths
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
name|qgetenv
argument_list|(
literal|"LD_LIBRARY_PATH"
argument_list|)
argument_list|)
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
argument_list|,
name|QString
operator|::
name|SkipEmptyParts
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|paths
operator|<<
name|QLatin1String
argument_list|(
literal|"/lib"
argument_list|)
operator|<<
name|QLatin1String
argument_list|(
literal|"/usr/lib"
argument_list|)
operator|<<
name|QLatin1String
argument_list|(
literal|"/usr/local/lib"
argument_list|)
expr_stmt|;
name|paths
operator|<<
name|QLatin1String
argument_list|(
literal|"/lib64"
argument_list|)
operator|<<
name|QLatin1String
argument_list|(
literal|"/usr/lib64"
argument_list|)
operator|<<
name|QLatin1String
argument_list|(
literal|"/usr/local/lib64"
argument_list|)
expr_stmt|;
name|paths
operator|<<
name|QLatin1String
argument_list|(
literal|"/lib32"
argument_list|)
operator|<<
name|QLatin1String
argument_list|(
literal|"/usr/lib32"
argument_list|)
operator|<<
name|QLatin1String
argument_list|(
literal|"/usr/local/lib32"
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_ANDROID
argument_list|)
name|paths
operator|<<
name|QLatin1String
argument_list|(
literal|"/system/lib"
argument_list|)
expr_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_LINUX
argument_list|)
comment|// discover paths of already loaded libraries
name|QSet
argument_list|<
name|QString
argument_list|>
name|loadedPaths
decl_stmt|;
name|dl_iterate_phdr
argument_list|(
name|dlIterateCallback
argument_list|,
operator|&
name|loadedPaths
argument_list|)
expr_stmt|;
name|paths
operator|.
name|append
argument_list|(
name|loadedPaths
operator|.
name|toList
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|paths
return|;
block|}
end_function
begin_function
specifier|static
name|QStringList
name|findAllLibSsl
parameter_list|()
block|{
name|QStringList
name|paths
init|=
name|libraryPathList
argument_list|()
decl_stmt|;
name|QStringList
name|foundSsls
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|path
decl|,
name|paths
control|)
block|{
name|QDir
name|dir
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|QStringList
name|entryList
init|=
name|dir
operator|.
name|entryList
argument_list|(
name|QStringList
argument_list|()
operator|<<
name|QLatin1String
argument_list|(
literal|"libssl.*"
argument_list|)
argument_list|,
name|QDir
operator|::
name|Files
argument_list|)
decl_stmt|;
name|std
operator|::
name|sort
argument_list|(
name|entryList
operator|.
name|begin
argument_list|()
argument_list|,
name|entryList
operator|.
name|end
argument_list|()
argument_list|,
name|libGreaterThan
argument_list|)
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|entry
decl|,
name|entryList
control|)
name|foundSsls
operator|<<
name|path
operator|+
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
operator|+
name|entry
expr_stmt|;
block|}
return|return
name|foundSsls
return|;
block|}
end_function
begin_function
specifier|static
name|QStringList
name|findAllLibCrypto
parameter_list|()
block|{
name|QStringList
name|paths
init|=
name|libraryPathList
argument_list|()
decl_stmt|;
name|QStringList
name|foundCryptos
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|path
decl|,
name|paths
control|)
block|{
name|QDir
name|dir
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|QStringList
name|entryList
init|=
name|dir
operator|.
name|entryList
argument_list|(
name|QStringList
argument_list|()
operator|<<
name|QLatin1String
argument_list|(
literal|"libcrypto.*"
argument_list|)
argument_list|,
name|QDir
operator|::
name|Files
argument_list|)
decl_stmt|;
name|std
operator|::
name|sort
argument_list|(
name|entryList
operator|.
name|begin
argument_list|()
argument_list|,
name|entryList
operator|.
name|end
argument_list|()
argument_list|,
name|libGreaterThan
argument_list|)
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|entry
decl|,
name|entryList
control|)
name|foundCryptos
operator|<<
name|path
operator|+
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
operator|+
name|entry
expr_stmt|;
block|}
return|return
name|foundCryptos
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_WIN
end_ifdef
begin_function
specifier|static
name|bool
name|tryToLoadOpenSslWin32Library
parameter_list|(
name|QLatin1String
name|ssleay32LibName
parameter_list|,
name|QLatin1String
name|libeay32LibName
parameter_list|,
name|QPair
argument_list|<
name|QSystemLibrary
modifier|*
argument_list|,
name|QSystemLibrary
modifier|*
argument_list|>
modifier|&
name|pair
parameter_list|)
block|{
name|pair
operator|.
name|first
operator|=
literal|0
expr_stmt|;
name|pair
operator|.
name|second
operator|=
literal|0
expr_stmt|;
name|QSystemLibrary
modifier|*
name|ssleay32
init|=
operator|new
name|QSystemLibrary
argument_list|(
name|ssleay32LibName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ssleay32
operator|->
name|load
argument_list|(
literal|false
argument_list|)
condition|)
block|{
operator|delete
name|ssleay32
expr_stmt|;
return|return
name|FALSE
return|;
block|}
name|QSystemLibrary
modifier|*
name|libeay32
init|=
operator|new
name|QSystemLibrary
argument_list|(
name|libeay32LibName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|libeay32
operator|->
name|load
argument_list|(
literal|false
argument_list|)
condition|)
block|{
operator|delete
name|ssleay32
expr_stmt|;
operator|delete
name|libeay32
expr_stmt|;
return|return
name|FALSE
return|;
block|}
name|pair
operator|.
name|first
operator|=
name|ssleay32
expr_stmt|;
name|pair
operator|.
name|second
operator|=
name|libeay32
expr_stmt|;
return|return
name|TRUE
return|;
block|}
end_function
begin_function
specifier|static
name|QPair
argument_list|<
name|QSystemLibrary
modifier|*
argument_list|,
name|QSystemLibrary
modifier|*
argument_list|>
name|loadOpenSslWin32
parameter_list|()
block|{
name|QPair
argument_list|<
name|QSystemLibrary
modifier|*
argument_list|,
name|QSystemLibrary
modifier|*
argument_list|>
name|pair
decl_stmt|;
name|pair
operator|.
name|first
operator|=
literal|0
expr_stmt|;
name|pair
operator|.
name|second
operator|=
literal|0
expr_stmt|;
comment|// When OpenSSL is built using MSVC then the libraries are named 'ssleay32.dll' and 'libeay32'dll'.
comment|// When OpenSSL is built using GCC then different library names are used (depending on the OpenSSL version)
comment|// The oldest version of a GCC-based OpenSSL which can be detected by the code below is 0.9.8g (released in 2007)
if|if
condition|(
operator|!
name|tryToLoadOpenSslWin32Library
argument_list|(
name|QLatin1String
argument_list|(
literal|"ssleay32"
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"libeay32"
argument_list|)
argument_list|,
name|pair
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|tryToLoadOpenSslWin32Library
argument_list|(
name|QLatin1String
argument_list|(
literal|"libssl-10"
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"libcrypto-10"
argument_list|)
argument_list|,
name|pair
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|tryToLoadOpenSslWin32Library
argument_list|(
name|QLatin1String
argument_list|(
literal|"libssl-8"
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"libcrypto-8"
argument_list|)
argument_list|,
name|pair
argument_list|)
condition|)
block|{
name|tryToLoadOpenSslWin32Library
argument_list|(
name|QLatin1String
argument_list|(
literal|"libssl-7"
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"libcrypto-7"
argument_list|)
argument_list|,
name|pair
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|pair
return|;
block|}
end_function
begin_else
else|#
directive|else
end_else
begin_function
specifier|static
name|QPair
argument_list|<
name|QLibrary
modifier|*
argument_list|,
name|QLibrary
modifier|*
argument_list|>
name|loadOpenSsl
parameter_list|()
block|{
name|QPair
argument_list|<
name|QLibrary
modifier|*
argument_list|,
name|QLibrary
modifier|*
argument_list|>
name|pair
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
name|QLibrary
modifier|*
modifier|&
name|libssl
init|=
name|pair
operator|.
name|first
decl_stmt|;
name|QLibrary
modifier|*
modifier|&
name|libcrypto
init|=
name|pair
operator|.
name|second
decl_stmt|;
name|libssl
operator|=
operator|new
name|QLibrary
expr_stmt|;
name|libcrypto
operator|=
operator|new
name|QLibrary
expr_stmt|;
comment|// Try to find the libssl library on the system.
comment|//
comment|// Up until Qt 4.3, this only searched for the "ssl" library at version -1, that
comment|// is, libssl.so on most Unix systems.  However, the .so file isn't present in
comment|// user installations because it's considered a development file.
comment|//
comment|// The right thing to do is to load the library at the major version we know how
comment|// to work with: the SHLIB_VERSION_NUMBER version (macro defined in opensslv.h)
comment|//
comment|// However, OpenSSL is a well-known case of binary-compatibility breakage. To
comment|// avoid such problems, many system integrators and Linux distributions change
comment|// the soname of the binary, letting the full version number be the soname. So
comment|// we'll find libssl.so.0.9.7, libssl.so.0.9.8, etc. in the system. For that
comment|// reason, we will search a few common paths (see findAllLibSsl() above) in hopes
comment|// we find one that works.
comment|//
comment|// It is important, however, to try the canonical name and the unversioned name
comment|// without going through the loop. By not specifying a path, we let the system
comment|// dlopen(3) function determine it for us. This will include any DT_RUNPATH or
comment|// DT_RPATH tags on our library header as well as other system-specific search
comment|// paths. See the man page for dlopen(3) on your system for more information.
ifdef|#
directive|ifdef
name|Q_OS_OPENBSD
name|libcrypto
operator|->
name|setLoadHints
argument_list|(
name|QLibrary
operator|::
name|ExportExternalSymbolsHint
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|SHLIB_VERSION_NUMBER
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_QNX
argument_list|)
comment|// on QNX, the libs are always libssl.so and libcrypto.so
comment|// first attempt: the canonical name is libssl.so.<SHLIB_VERSION_NUMBER>
name|libssl
operator|->
name|setFileNameAndVersion
argument_list|(
name|QLatin1String
argument_list|(
literal|"ssl"
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
name|SHLIB_VERSION_NUMBER
argument_list|)
argument_list|)
expr_stmt|;
name|libcrypto
operator|->
name|setFileNameAndVersion
argument_list|(
name|QLatin1String
argument_list|(
literal|"crypto"
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
name|SHLIB_VERSION_NUMBER
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|libcrypto
operator|->
name|load
argument_list|()
operator|&&
name|libssl
operator|->
name|load
argument_list|()
condition|)
block|{
comment|// libssl.so.<SHLIB_VERSION_NUMBER> and libcrypto.so.<SHLIB_VERSION_NUMBER> found
return|return
name|pair
return|;
block|}
else|else
block|{
name|libssl
operator|->
name|unload
argument_list|()
expr_stmt|;
name|libcrypto
operator|->
name|unload
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
comment|// second attempt: find the development files libssl.so and libcrypto.so
name|libssl
operator|->
name|setFileNameAndVersion
argument_list|(
name|QLatin1String
argument_list|(
literal|"ssl"
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|libcrypto
operator|->
name|setFileNameAndVersion
argument_list|(
name|QLatin1String
argument_list|(
literal|"crypto"
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|libcrypto
operator|->
name|load
argument_list|()
operator|&&
name|libssl
operator|->
name|load
argument_list|()
condition|)
block|{
comment|// libssl.so.0 and libcrypto.so.0 found
return|return
name|pair
return|;
block|}
else|else
block|{
name|libssl
operator|->
name|unload
argument_list|()
expr_stmt|;
name|libcrypto
operator|->
name|unload
argument_list|()
expr_stmt|;
block|}
comment|// third attempt: loop on the most common library paths and find libssl
name|QStringList
name|sslList
init|=
name|findAllLibSsl
argument_list|()
decl_stmt|;
name|QStringList
name|cryptoList
init|=
name|findAllLibCrypto
argument_list|()
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|crypto
decl|,
name|cryptoList
control|)
block|{
name|libcrypto
operator|->
name|setFileNameAndVersion
argument_list|(
name|crypto
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|libcrypto
operator|->
name|load
argument_list|()
condition|)
block|{
name|QFileInfo
name|fi
argument_list|(
name|crypto
argument_list|)
decl_stmt|;
name|QString
name|version
init|=
name|fi
operator|.
name|completeSuffix
argument_list|()
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|ssl
decl|,
name|sslList
control|)
block|{
if|if
condition|(
operator|!
name|ssl
operator|.
name|endsWith
argument_list|(
name|version
argument_list|)
condition|)
continue|continue;
name|libssl
operator|->
name|setFileNameAndVersion
argument_list|(
name|ssl
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|libssl
operator|->
name|load
argument_list|()
condition|)
block|{
comment|// libssl.so.x and libcrypto.so.x found
return|return
name|pair
return|;
block|}
else|else
block|{
name|libssl
operator|->
name|unload
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|libcrypto
operator|->
name|unload
argument_list|()
expr_stmt|;
block|}
comment|// failed to load anything
operator|delete
name|libssl
expr_stmt|;
operator|delete
name|libcrypto
expr_stmt|;
name|libssl
operator|=
name|libcrypto
operator|=
literal|0
expr_stmt|;
return|return
name|pair
return|;
else|#
directive|else
comment|// not implemented for this platform yet
return|return
name|pair
return|;
endif|#
directive|endif
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
name|bool
name|q_resolveOpenSslSymbols
parameter_list|()
block|{
specifier|static
name|bool
name|symbolsResolved
init|=
literal|false
decl_stmt|;
specifier|static
name|bool
name|triedToResolveSymbols
init|=
literal|false
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_THREAD
name|QMutexLocker
name|locker
argument_list|(
name|QMutexPool
operator|::
name|globalInstanceGet
argument_list|(
operator|(
name|void
operator|*
operator|)
operator|&
name|q_SSL_library_init
argument_list|)
argument_list|)
decl_stmt|;
endif|#
directive|endif
if|if
condition|(
name|symbolsResolved
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|triedToResolveSymbols
condition|)
return|return
literal|false
return|;
name|triedToResolveSymbols
operator|=
literal|true
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN
name|QPair
argument_list|<
name|QSystemLibrary
modifier|*
argument_list|,
name|QSystemLibrary
modifier|*
argument_list|>
name|libs
init|=
name|loadOpenSslWin32
argument_list|()
decl_stmt|;
else|#
directive|else
name|QPair
argument_list|<
name|QLibrary
modifier|*
argument_list|,
name|QLibrary
modifier|*
argument_list|>
name|libs
init|=
name|loadOpenSsl
argument_list|()
decl_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|libs
operator|.
name|first
operator|||
operator|!
name|libs
operator|.
name|second
condition|)
comment|// failed to load them
return|return
literal|false
return|;
ifdef|#
directive|ifdef
name|SSLEAY_MACROS
name|RESOLVEFUNC
argument_list|(
argument|ASN1_dup
argument_list|)
endif|#
directive|endif
name|RESOLVEFUNC
argument_list|(
argument|ASN1_INTEGER_get
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|ASN1_STRING_data
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|ASN1_STRING_length
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|ASN1_STRING_to_UTF8
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|BIO_ctrl
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|BIO_free
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|BIO_new
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|BIO_new_mem_buf
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|BIO_read
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|BIO_s_mem
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|BIO_write
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|BN_num_bits
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|CRYPTO_free
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|CRYPTO_num_locks
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|CRYPTO_set_id_callback
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|CRYPTO_set_locking_callback
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|DSA_free
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|ERR_error_string
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|ERR_get_error
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|ERR_free_strings
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|EVP_des_ede3_cbc
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|EVP_PKEY_assign
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|EVP_PKEY_set1_RSA
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|EVP_PKEY_set1_DSA
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|EVP_PKEY_free
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|EVP_PKEY_get1_DSA
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|EVP_PKEY_get1_RSA
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|EVP_PKEY_new
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|EVP_PKEY_type
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|OBJ_nid2sn
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|OBJ_nid2ln
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|i2t_ASN1_OBJECT
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|OBJ_obj2txt
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|OBJ_obj2nid
argument_list|)
ifdef|#
directive|ifdef
name|SSLEAY_MACROS
comment|// ### verify
name|RESOLVEFUNC
argument_list|(
argument|PEM_ASN1_read_bio
argument_list|)
else|#
directive|else
name|RESOLVEFUNC
argument_list|(
argument|PEM_read_bio_DSAPrivateKey
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|PEM_read_bio_RSAPrivateKey
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|PEM_write_bio_DSAPrivateKey
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|PEM_write_bio_RSAPrivateKey
argument_list|)
endif|#
directive|endif
name|RESOLVEFUNC
argument_list|(
argument|PEM_read_bio_DSA_PUBKEY
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|PEM_read_bio_RSA_PUBKEY
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|PEM_write_bio_DSA_PUBKEY
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|PEM_write_bio_RSA_PUBKEY
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|RAND_seed
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|RAND_status
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|RSA_free
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|sk_new_null
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|sk_push
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|sk_free
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|sk_num
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|sk_pop_free
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|sk_value
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_CIPHER_description
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_CIPHER_get_bits
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_CTX_check_private_key
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_CTX_ctrl
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_CTX_free
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_CTX_new
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_CTX_set_cipher_list
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_CTX_set_default_verify_paths
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_CTX_set_verify
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_CTX_set_verify_depth
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_CTX_use_certificate
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_CTX_use_certificate_file
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_CTX_use_PrivateKey
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_CTX_use_RSAPrivateKey
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_CTX_use_PrivateKey_file
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_accept
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_clear
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_connect
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_free
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_get_ciphers
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_get_current_cipher
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_get_error
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_get_peer_cert_chain
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_get_peer_certificate
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_get_verify_result
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_library_init
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_load_error_strings
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_new
argument_list|)
if|#
directive|if
name|OPENSSL_VERSION_NUMBER
operator|>=
literal|0x0090806fL
operator|&&
operator|!
name|defined
argument_list|(
name|OPENSSL_NO_TLSEXT
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_ctrl
argument_list|)
endif|#
directive|endif
name|RESOLVEFUNC
argument_list|(
argument|SSL_read
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_set_accept_state
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_set_bio
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_set_connect_state
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_shutdown
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_set_session
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_SESSION_free
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_get1_session
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_get_session
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_write
argument_list|)
ifndef|#
directive|ifndef
name|OPENSSL_NO_SSL2
name|RESOLVEFUNC
argument_list|(
argument|SSLv2_client_method
argument_list|)
endif|#
directive|endif
name|RESOLVEFUNC
argument_list|(
argument|SSLv3_client_method
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSLv23_client_method
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|TLSv1_client_method
argument_list|)
if|#
directive|if
name|OPENSSL_VERSION_NUMBER
operator|>=
literal|0x10001000L
name|RESOLVEFUNC
argument_list|(
argument|TLSv1_1_client_method
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|TLSv1_2_client_method
argument_list|)
endif|#
directive|endif
ifndef|#
directive|ifndef
name|OPENSSL_NO_SSL2
name|RESOLVEFUNC
argument_list|(
argument|SSLv2_server_method
argument_list|)
endif|#
directive|endif
name|RESOLVEFUNC
argument_list|(
argument|SSLv3_server_method
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSLv23_server_method
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|TLSv1_server_method
argument_list|)
if|#
directive|if
name|OPENSSL_VERSION_NUMBER
operator|>=
literal|0x10001000L
name|RESOLVEFUNC
argument_list|(
argument|TLSv1_1_server_method
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|TLSv1_2_server_method
argument_list|)
endif|#
directive|endif
name|RESOLVEFUNC
argument_list|(
argument|X509_NAME_entry_count
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|X509_NAME_get_entry
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|X509_NAME_ENTRY_get_data
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|X509_NAME_ENTRY_get_object
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|X509_PUBKEY_get
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|X509_STORE_free
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|X509_STORE_new
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|X509_STORE_add_cert
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|X509_STORE_CTX_free
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|X509_STORE_CTX_init
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|X509_STORE_CTX_new
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|X509_STORE_CTX_set_purpose
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|X509_STORE_CTX_get_error
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|X509_STORE_CTX_get_error_depth
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|X509_STORE_CTX_get_current_cert
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|X509_STORE_CTX_get_chain
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|X509_cmp
argument_list|)
ifndef|#
directive|ifndef
name|SSLEAY_MACROS
name|RESOLVEFUNC
argument_list|(
argument|X509_dup
argument_list|)
endif|#
directive|endif
name|RESOLVEFUNC
argument_list|(
argument|X509_print
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|X509_EXTENSION_get_object
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|X509_free
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|X509_get_ext
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|X509_get_ext_count
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|X509_get_ext_d2i
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|X509V3_EXT_get
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|X509V3_EXT_d2i
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|X509_EXTENSION_get_critical
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|X509_EXTENSION_get_data
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|BASIC_CONSTRAINTS_free
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|AUTHORITY_KEYID_free
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|ASN1_STRING_print
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|X509_get_issuer_name
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|X509_get_subject_name
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|X509_verify_cert
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|d2i_X509
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|i2d_X509
argument_list|)
ifdef|#
directive|ifdef
name|SSLEAY_MACROS
name|RESOLVEFUNC
argument_list|(
argument|i2d_DSAPrivateKey
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|i2d_RSAPrivateKey
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|d2i_DSAPrivateKey
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|d2i_RSAPrivateKey
argument_list|)
endif|#
directive|endif
name|RESOLVEFUNC
argument_list|(
argument|OPENSSL_add_all_algorithms_noconf
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|OPENSSL_add_all_algorithms_conf
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_CTX_load_verify_locations
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSLeay
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSLeay_version
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|i2d_SSL_SESSION
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|d2i_SSL_SESSION
argument_list|)
if|#
directive|if
name|OPENSSL_VERSION_NUMBER
operator|>=
literal|0x1000100fL
operator|&&
operator|!
name|defined
argument_list|(
name|OPENSSL_NO_TLSEXT
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|OPENSSL_NO_NEXTPROTONEG
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_select_next_proto
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_CTX_set_next_proto_select_cb
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|SSL_get0_next_proto_negotiated
argument_list|)
endif|#
directive|endif
comment|// OPENSSL_VERSION_NUMBER>= 0x1000100fL ...
name|RESOLVEFUNC
argument_list|(
argument|DH_new
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|DH_free
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|BN_bin2bn
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|EC_KEY_new_by_curve_name
argument_list|)
name|RESOLVEFUNC
argument_list|(
argument|EC_KEY_free
argument_list|)
name|symbolsResolved
operator|=
literal|true
expr_stmt|;
operator|delete
name|libs
operator|.
name|first
expr_stmt|;
operator|delete
name|libs
operator|.
name|second
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_LIBRARY
end_comment
begin_else
else|#
directive|else
end_else
begin_comment
comment|// !defined QT_LINKED_OPENSSL
end_comment
begin_function
name|bool
name|q_resolveOpenSslSymbols
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|QT_NO_OPENSSL
return|return
literal|false
return|;
endif|#
directive|endif
return|return
literal|true
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// !defined QT_LINKED_OPENSSL
end_comment
begin_comment
comment|//==============================================================================
end_comment
begin_comment
comment|// contributed by Jay Case of Sarvega, Inc.; http://sarvega.com/
end_comment
begin_comment
comment|// Based on X509_cmp_time() for intitial buffer hacking.
end_comment
begin_comment
comment|//==============================================================================
end_comment
begin_function
name|QDateTime
name|q_getTimeFromASN1
parameter_list|(
specifier|const
name|ASN1_TIME
modifier|*
name|aTime
parameter_list|)
block|{
name|size_t
name|lTimeLength
init|=
name|aTime
operator|->
name|length
decl_stmt|;
name|char
modifier|*
name|pString
init|=
operator|(
name|char
operator|*
operator|)
name|aTime
operator|->
name|data
decl_stmt|;
if|if
condition|(
name|aTime
operator|->
name|type
operator|==
name|V_ASN1_UTCTIME
condition|)
block|{
name|char
name|lBuffer
index|[
literal|24
index|]
decl_stmt|;
name|char
modifier|*
name|pBuffer
init|=
name|lBuffer
decl_stmt|;
if|if
condition|(
operator|(
name|lTimeLength
operator|<
literal|11
operator|)
operator|||
operator|(
name|lTimeLength
operator|>
literal|17
operator|)
condition|)
return|return
name|QDateTime
argument_list|()
return|;
name|memcpy
argument_list|(
name|pBuffer
argument_list|,
name|pString
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|pBuffer
operator|+=
literal|10
expr_stmt|;
name|pString
operator|+=
literal|10
expr_stmt|;
if|if
condition|(
operator|(
operator|*
name|pString
operator|==
literal|'Z'
operator|)
operator|||
operator|(
operator|*
name|pString
operator|==
literal|'-'
operator|)
operator|||
operator|(
operator|*
name|pString
operator|==
literal|'+'
operator|)
condition|)
block|{
operator|*
name|pBuffer
operator|++
operator|=
literal|'0'
expr_stmt|;
operator|*
name|pBuffer
operator|++
operator|=
literal|'0'
expr_stmt|;
block|}
else|else
block|{
operator|*
name|pBuffer
operator|++
operator|=
operator|*
name|pString
operator|++
expr_stmt|;
operator|*
name|pBuffer
operator|++
operator|=
operator|*
name|pString
operator|++
expr_stmt|;
comment|// Skip any fractional seconds...
if|if
condition|(
operator|*
name|pString
operator|==
literal|'.'
condition|)
block|{
name|pString
operator|++
expr_stmt|;
while|while
condition|(
operator|(
operator|*
name|pString
operator|>=
literal|'0'
operator|)
operator|&&
operator|(
operator|*
name|pString
operator|<=
literal|'9'
operator|)
condition|)
name|pString
operator|++
expr_stmt|;
block|}
block|}
operator|*
name|pBuffer
operator|++
operator|=
literal|'Z'
expr_stmt|;
operator|*
name|pBuffer
operator|++
operator|=
literal|'\0'
expr_stmt|;
name|time_t
name|lSecondsFromUCT
decl_stmt|;
if|if
condition|(
operator|*
name|pString
operator|==
literal|'Z'
condition|)
block|{
name|lSecondsFromUCT
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|(
operator|*
name|pString
operator|!=
literal|'+'
operator|)
operator|&&
operator|(
operator|*
name|pString
operator|!=
literal|'-'
operator|)
condition|)
return|return
name|QDateTime
argument_list|()
return|;
name|lSecondsFromUCT
operator|=
operator|(
operator|(
name|pString
index|[
literal|1
index|]
operator|-
literal|'0'
operator|)
operator|*
literal|10
operator|+
operator|(
name|pString
index|[
literal|2
index|]
operator|-
literal|'0'
operator|)
operator|)
operator|*
literal|60
expr_stmt|;
name|lSecondsFromUCT
operator|+=
operator|(
name|pString
index|[
literal|3
index|]
operator|-
literal|'0'
operator|)
operator|*
literal|10
operator|+
operator|(
name|pString
index|[
literal|4
index|]
operator|-
literal|'0'
operator|)
expr_stmt|;
name|lSecondsFromUCT
operator|*=
literal|60
expr_stmt|;
if|if
condition|(
operator|*
name|pString
operator|==
literal|'-'
condition|)
name|lSecondsFromUCT
operator|=
operator|-
name|lSecondsFromUCT
expr_stmt|;
block|}
name|tm
name|lTime
decl_stmt|;
name|lTime
operator|.
name|tm_sec
operator|=
operator|(
operator|(
name|lBuffer
index|[
literal|10
index|]
operator|-
literal|'0'
operator|)
operator|*
literal|10
operator|)
operator|+
operator|(
name|lBuffer
index|[
literal|11
index|]
operator|-
literal|'0'
operator|)
expr_stmt|;
name|lTime
operator|.
name|tm_min
operator|=
operator|(
operator|(
name|lBuffer
index|[
literal|8
index|]
operator|-
literal|'0'
operator|)
operator|*
literal|10
operator|)
operator|+
operator|(
name|lBuffer
index|[
literal|9
index|]
operator|-
literal|'0'
operator|)
expr_stmt|;
name|lTime
operator|.
name|tm_hour
operator|=
operator|(
operator|(
name|lBuffer
index|[
literal|6
index|]
operator|-
literal|'0'
operator|)
operator|*
literal|10
operator|)
operator|+
operator|(
name|lBuffer
index|[
literal|7
index|]
operator|-
literal|'0'
operator|)
expr_stmt|;
name|lTime
operator|.
name|tm_mday
operator|=
operator|(
operator|(
name|lBuffer
index|[
literal|4
index|]
operator|-
literal|'0'
operator|)
operator|*
literal|10
operator|)
operator|+
operator|(
name|lBuffer
index|[
literal|5
index|]
operator|-
literal|'0'
operator|)
expr_stmt|;
name|lTime
operator|.
name|tm_mon
operator|=
operator|(
operator|(
operator|(
name|lBuffer
index|[
literal|2
index|]
operator|-
literal|'0'
operator|)
operator|*
literal|10
operator|)
operator|+
operator|(
name|lBuffer
index|[
literal|3
index|]
operator|-
literal|'0'
operator|)
operator|)
operator|-
literal|1
expr_stmt|;
name|lTime
operator|.
name|tm_year
operator|=
operator|(
operator|(
name|lBuffer
index|[
literal|0
index|]
operator|-
literal|'0'
operator|)
operator|*
literal|10
operator|)
operator|+
operator|(
name|lBuffer
index|[
literal|1
index|]
operator|-
literal|'0'
operator|)
expr_stmt|;
if|if
condition|(
name|lTime
operator|.
name|tm_year
operator|<
literal|50
condition|)
name|lTime
operator|.
name|tm_year
operator|+=
literal|100
expr_stmt|;
comment|// RFC 2459
name|QDate
name|resDate
argument_list|(
name|lTime
operator|.
name|tm_year
operator|+
literal|1900
argument_list|,
name|lTime
operator|.
name|tm_mon
operator|+
literal|1
argument_list|,
name|lTime
operator|.
name|tm_mday
argument_list|)
decl_stmt|;
name|QTime
name|resTime
argument_list|(
name|lTime
operator|.
name|tm_hour
argument_list|,
name|lTime
operator|.
name|tm_min
argument_list|,
name|lTime
operator|.
name|tm_sec
argument_list|)
decl_stmt|;
name|QDateTime
name|result
argument_list|(
name|resDate
argument_list|,
name|resTime
argument_list|,
name|Qt
operator|::
name|UTC
argument_list|)
decl_stmt|;
name|result
operator|=
name|result
operator|.
name|addSecs
argument_list|(
name|lSecondsFromUCT
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
elseif|else
if|if
condition|(
name|aTime
operator|->
name|type
operator|==
name|V_ASN1_GENERALIZEDTIME
condition|)
block|{
if|if
condition|(
name|lTimeLength
operator|<
literal|15
condition|)
return|return
name|QDateTime
argument_list|()
return|;
comment|// hopefully never triggered
comment|// generalized time is always YYYYMMDDHHMMSSZ (RFC 2459, section 4.1.2.5.2)
name|tm
name|lTime
decl_stmt|;
name|lTime
operator|.
name|tm_sec
operator|=
operator|(
operator|(
name|pString
index|[
literal|12
index|]
operator|-
literal|'0'
operator|)
operator|*
literal|10
operator|)
operator|+
operator|(
name|pString
index|[
literal|13
index|]
operator|-
literal|'0'
operator|)
expr_stmt|;
name|lTime
operator|.
name|tm_min
operator|=
operator|(
operator|(
name|pString
index|[
literal|10
index|]
operator|-
literal|'0'
operator|)
operator|*
literal|10
operator|)
operator|+
operator|(
name|pString
index|[
literal|11
index|]
operator|-
literal|'0'
operator|)
expr_stmt|;
name|lTime
operator|.
name|tm_hour
operator|=
operator|(
operator|(
name|pString
index|[
literal|8
index|]
operator|-
literal|'0'
operator|)
operator|*
literal|10
operator|)
operator|+
operator|(
name|pString
index|[
literal|9
index|]
operator|-
literal|'0'
operator|)
expr_stmt|;
name|lTime
operator|.
name|tm_mday
operator|=
operator|(
operator|(
name|pString
index|[
literal|6
index|]
operator|-
literal|'0'
operator|)
operator|*
literal|10
operator|)
operator|+
operator|(
name|pString
index|[
literal|7
index|]
operator|-
literal|'0'
operator|)
expr_stmt|;
name|lTime
operator|.
name|tm_mon
operator|=
operator|(
operator|(
operator|(
name|pString
index|[
literal|4
index|]
operator|-
literal|'0'
operator|)
operator|*
literal|10
operator|)
operator|+
operator|(
name|pString
index|[
literal|5
index|]
operator|-
literal|'0'
operator|)
operator|)
expr_stmt|;
name|lTime
operator|.
name|tm_year
operator|=
operator|(
operator|(
name|pString
index|[
literal|0
index|]
operator|-
literal|'0'
operator|)
operator|*
literal|1000
operator|)
operator|+
operator|(
operator|(
name|pString
index|[
literal|1
index|]
operator|-
literal|'0'
operator|)
operator|*
literal|100
operator|)
operator|+
operator|(
operator|(
name|pString
index|[
literal|2
index|]
operator|-
literal|'0'
operator|)
operator|*
literal|10
operator|)
operator|+
operator|(
name|pString
index|[
literal|3
index|]
operator|-
literal|'0'
operator|)
expr_stmt|;
name|QDate
name|resDate
argument_list|(
name|lTime
operator|.
name|tm_year
argument_list|,
name|lTime
operator|.
name|tm_mon
argument_list|,
name|lTime
operator|.
name|tm_mday
argument_list|)
decl_stmt|;
name|QTime
name|resTime
argument_list|(
name|lTime
operator|.
name|tm_hour
argument_list|,
name|lTime
operator|.
name|tm_min
argument_list|,
name|lTime
operator|.
name|tm_sec
argument_list|)
decl_stmt|;
name|QDateTime
name|result
argument_list|(
name|resDate
argument_list|,
name|resTime
argument_list|,
name|Qt
operator|::
name|UTC
argument_list|)
decl_stmt|;
return|return
name|result
return|;
block|}
else|else
block|{
name|qWarning
argument_list|(
literal|"unsupported date format detected"
argument_list|)
expr_stmt|;
return|return
name|QDateTime
argument_list|()
return|;
block|}
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
