begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the QtNetwork module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qssl_p.h"
end_include
begin_include
include|#
directive|include
file|"qsslkey.h"
end_include
begin_include
include|#
directive|include
file|"qsslkey_p.h"
end_include
begin_include
include|#
directive|include
file|"qsslcertificate_p.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/qfunctions_winrt.h>
end_include
begin_include
include|#
directive|include
file|<wrl.h>
end_include
begin_include
include|#
directive|include
file|<windows.security.cryptography.h>
end_include
begin_include
include|#
directive|include
file|<windows.security.cryptography.core.h>
end_include
begin_include
include|#
directive|include
file|<windows.security.cryptography.certificates.h>
end_include
begin_include
include|#
directive|include
file|<windows.storage.streams.h>
end_include
begin_include
include|#
directive|include
file|<robuffer.h>
end_include
begin_using
using|using
namespace|namespace
name|Microsoft
operator|::
name|WRL
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|Microsoft
operator|::
name|WRL
operator|::
name|Wrappers
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|Foundation
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|Security
operator|::
name|Cryptography
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|Security
operator|::
name|Cryptography
operator|::
name|Certificates
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|Security
operator|::
name|Cryptography
operator|::
name|Core
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|Storage
operator|::
name|Streams
namespace|;
end_using
begin_macro
name|QT_USE_NAMESPACE
end_macro
begin_struct
DECL|struct|SslKeyGlobal
struct|struct
name|SslKeyGlobal
block|{
DECL|function|SslKeyGlobal
name|SslKeyGlobal
parameter_list|()
block|{
name|HRESULT
name|hr
decl_stmt|;
name|hr
operator|=
name|GetActivationFactory
argument_list|(
name|HString
operator|::
name|MakeReference
argument_list|(
name|RuntimeClass_Windows_Security_Cryptography_Core_CryptographicEngine
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|engine
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|ComPtr
argument_list|<
name|ISymmetricKeyAlgorithmProviderStatics
argument_list|>
name|keyProviderFactory
decl_stmt|;
name|hr
operator|=
name|GetActivationFactory
argument_list|(
name|HString
operator|::
name|MakeReference
argument_list|(
name|RuntimeClass_Windows_Security_Cryptography_Core_SymmetricKeyAlgorithmProvider
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|keyProviderFactory
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|hr
operator|=
name|keyProviderFactory
operator|->
name|OpenAlgorithm
argument_list|(
name|HString
operator|::
name|MakeReference
argument_list|(
literal|L"DES_CBC"
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|keyProviders
index|[
name|QSslKeyPrivate
operator|::
name|DesCbc
index|]
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|hr
operator|=
name|keyProviderFactory
operator|->
name|OpenAlgorithm
argument_list|(
name|HString
operator|::
name|MakeReference
argument_list|(
literal|L"3DES_CBC"
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|keyProviders
index|[
name|QSslKeyPrivate
operator|::
name|DesEde3Cbc
index|]
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|hr
operator|=
name|keyProviderFactory
operator|->
name|OpenAlgorithm
argument_list|(
name|HString
operator|::
name|MakeReference
argument_list|(
literal|L"RC2_CBC"
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|keyProviders
index|[
name|QSslKeyPrivate
operator|::
name|Rc2Cbc
index|]
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|hr
operator|=
name|GetActivationFactory
argument_list|(
name|HString
operator|::
name|MakeReference
argument_list|(
name|RuntimeClass_Windows_Security_Cryptography_CryptographicBuffer
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|bufferFactory
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
block|}
DECL|member|engine
name|ComPtr
argument_list|<
name|ICryptographicEngineStatics
argument_list|>
name|engine
decl_stmt|;
DECL|member|keyProviders
name|QHash
argument_list|<
name|QSslKeyPrivate
operator|::
name|Cipher
argument_list|,
name|ComPtr
argument_list|<
name|ISymmetricKeyAlgorithmProvider
argument_list|>
argument_list|>
name|keyProviders
decl_stmt|;
DECL|member|bufferFactory
name|ComPtr
argument_list|<
name|ICryptographicBufferStatics
argument_list|>
name|bufferFactory
decl_stmt|;
block|}
struct|;
end_struct
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|SslKeyGlobal
argument_list|,
argument|g
argument_list|)
end_macro
begin_function
DECL|function|doCrypt
specifier|static
name|QByteArray
name|doCrypt
parameter_list|(
name|QSslKeyPrivate
operator|::
name|Cipher
name|cipher
parameter_list|,
name|QByteArray
name|data
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|key
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|iv
parameter_list|,
name|bool
name|encrypt
parameter_list|)
block|{
name|HRESULT
name|hr
decl_stmt|;
name|ISymmetricKeyAlgorithmProvider
modifier|*
name|keyProvider
init|=
name|g
operator|->
name|keyProviders
index|[
name|cipher
index|]
operator|.
name|Get
argument_list|()
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|keyProvider
argument_list|)
expr_stmt|;
name|ComPtr
argument_list|<
name|IBuffer
argument_list|>
name|keyBuffer
decl_stmt|;
name|hr
operator|=
name|g
operator|->
name|bufferFactory
operator|->
name|CreateFromByteArray
argument_list|(
name|key
operator|.
name|length
argument_list|()
argument_list|,
operator|(
name|BYTE
operator|*
operator|)
name|key
operator|.
name|data
argument_list|()
argument_list|,
operator|&
name|keyBuffer
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|ComPtr
argument_list|<
name|ICryptographicKey
argument_list|>
name|cryptographicKey
decl_stmt|;
name|hr
operator|=
name|keyProvider
operator|->
name|CreateSymmetricKey
argument_list|(
name|keyBuffer
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|cryptographicKey
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|UINT32
name|blockLength
decl_stmt|;
name|hr
operator|=
name|keyProvider
operator|->
name|get_BlockLength
argument_list|(
operator|&
name|blockLength
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
if|if
condition|(
name|encrypt
condition|)
block|{
comment|// Add padding
specifier|const
name|char
name|padding
init|=
name|blockLength
operator|-
name|data
operator|.
name|length
argument_list|()
operator|%
name|blockLength
decl_stmt|;
name|data
operator|+=
name|QByteArray
argument_list|(
name|padding
argument_list|,
name|padding
argument_list|)
expr_stmt|;
block|}
name|ComPtr
argument_list|<
name|IBuffer
argument_list|>
name|dataBuffer
decl_stmt|;
name|hr
operator|=
name|g
operator|->
name|bufferFactory
operator|->
name|CreateFromByteArray
argument_list|(
name|data
operator|.
name|length
argument_list|()
argument_list|,
operator|(
name|BYTE
operator|*
operator|)
name|data
operator|.
name|data
argument_list|()
argument_list|,
operator|&
name|dataBuffer
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|ComPtr
argument_list|<
name|IBuffer
argument_list|>
name|ivBuffer
decl_stmt|;
name|hr
operator|=
name|g
operator|->
name|bufferFactory
operator|->
name|CreateFromByteArray
argument_list|(
name|iv
operator|.
name|length
argument_list|()
argument_list|,
operator|(
name|BYTE
operator|*
operator|)
name|iv
operator|.
name|data
argument_list|()
argument_list|,
operator|&
name|ivBuffer
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|ComPtr
argument_list|<
name|IBuffer
argument_list|>
name|resultBuffer
decl_stmt|;
name|hr
operator|=
name|encrypt
condition|?
name|g
operator|->
name|engine
operator|->
name|Encrypt
argument_list|(
name|cryptographicKey
operator|.
name|Get
argument_list|()
argument_list|,
name|dataBuffer
operator|.
name|Get
argument_list|()
argument_list|,
name|ivBuffer
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|resultBuffer
argument_list|)
else|:
name|g
operator|->
name|engine
operator|->
name|Decrypt
argument_list|(
name|cryptographicKey
operator|.
name|Get
argument_list|()
argument_list|,
name|dataBuffer
operator|.
name|Get
argument_list|()
argument_list|,
name|ivBuffer
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|resultBuffer
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|UINT32
name|resultLength
decl_stmt|;
name|hr
operator|=
name|resultBuffer
operator|->
name|get_Length
argument_list|(
operator|&
name|resultLength
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|ComPtr
argument_list|<
name|Windows
operator|::
name|Storage
operator|::
name|Streams
operator|::
name|IBufferByteAccess
argument_list|>
name|bufferAccess
decl_stmt|;
name|hr
operator|=
name|resultBuffer
operator|.
name|As
argument_list|(
operator|&
name|bufferAccess
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|byte
modifier|*
name|resultData
decl_stmt|;
name|hr
operator|=
name|bufferAccess
operator|->
name|Buffer
argument_list|(
operator|&
name|resultData
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|encrypt
condition|)
block|{
comment|// Remove padding
specifier|const
name|uchar
name|padding
init|=
name|resultData
index|[
name|resultLength
operator|-
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|padding
operator|>
literal|0
operator|&&
name|padding
operator|<=
name|blockLength
condition|)
name|resultLength
operator|-=
name|padding
expr_stmt|;
else|else
name|qCWarning
argument_list|(
name|lcSsl
argument_list|,
literal|"Invalid padding length of %u; decryption likely failed."
argument_list|,
name|padding
argument_list|)
expr_stmt|;
block|}
return|return
name|QByteArray
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|resultData
argument_list|)
argument_list|,
name|resultLength
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|decrypt
name|QByteArray
name|QSslKeyPrivate
operator|::
name|decrypt
parameter_list|(
name|Cipher
name|cipher
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|data
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|key
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|iv
parameter_list|)
block|{
return|return
name|doCrypt
argument_list|(
name|cipher
argument_list|,
name|data
argument_list|,
name|key
argument_list|,
name|iv
argument_list|,
literal|false
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|encrypt
name|QByteArray
name|QSslKeyPrivate
operator|::
name|encrypt
parameter_list|(
name|Cipher
name|cipher
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|data
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|key
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|iv
parameter_list|)
block|{
return|return
name|doCrypt
argument_list|(
name|cipher
argument_list|,
name|data
argument_list|,
name|key
argument_list|,
name|iv
argument_list|,
literal|true
argument_list|)
return|;
block|}
end_function
end_unit
