begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Copyright (C) 2014 BlackBerry Limited. All rights reserved. ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtNetwork module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia. For licensing terms and ** conditions see http://qt.digia.com/licensing. For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights. These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|/**************************************************************************** ** ** In addition, as a special exception, the copyright holders listed above give ** permission to link the code of its release of Qt with the OpenSSL project's ** "OpenSSL" library (or modified versions of the "OpenSSL" library that use the ** same license as the original version), and distribute the linked executables. ** ** You must comply with the GNU General Public License version 2 in all ** respects for all of the code used other than the "OpenSSL" code.  If you ** modify this file, you may extend this exception to your version of the file, ** but you are not obligated to do so.  If you do not wish to do so, delete ** this exception statement from your version of this file. ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QSSLSOCKET_OPENSSL_SYMBOLS_P_H
end_ifndef
begin_define
DECL|macro|QSSLSOCKET_OPENSSL_SYMBOLS_P_H
define|#
directive|define
name|QSSLSOCKET_OPENSSL_SYMBOLS_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists for the convenience
end_comment
begin_comment
comment|// of the QLibrary class.  This header file may change from
end_comment
begin_comment
comment|// version to version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"qsslsocket_openssl_p.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/qglobal.h>
end_include
begin_function_decl
name|QT_BEGIN_NAMESPACE
DECL|macro|DUMMYARG
define|#
directive|define
name|DUMMYARG
if|#
directive|if
operator|!
name|defined
name|QT_LINKED_OPENSSL
comment|// **************** Shared declarations ******************
comment|// ret func(arg)
DECL|macro|DEFINEFUNC
define|#
directive|define
name|DEFINEFUNC
parameter_list|(
name|ret
parameter_list|,
name|func
parameter_list|,
name|arg
parameter_list|,
name|a
parameter_list|,
name|err
parameter_list|,
name|funcret
parameter_list|)
define|\
value|typedef ret (*_q_PTR_##func)(arg); \     static _q_PTR_##func _q_##func = 0; \     ret q_##func(arg) { \         if (Q_UNLIKELY(!_q_##func)) { \             qsslSocketUnresolvedSymbolWarning(#func); \             err; \         } \         funcret _q_##func(a); \     }
comment|// ret func(arg1, arg2)
DECL|macro|DEFINEFUNC2
define|#
directive|define
name|DEFINEFUNC2
parameter_list|(
name|ret
parameter_list|,
name|func
parameter_list|,
name|arg1
parameter_list|,
name|a
parameter_list|,
name|arg2
parameter_list|,
name|b
parameter_list|,
name|err
parameter_list|,
name|funcret
parameter_list|)
define|\
value|typedef ret (*_q_PTR_##func)(arg1, arg2);         \     static _q_PTR_##func _q_##func = 0;               \     ret q_##func(arg1, arg2) { \         if (Q_UNLIKELY(!_q_##func)) { \             qsslSocketUnresolvedSymbolWarning(#func);\             err; \         } \         funcret _q_##func(a, b); \     }
comment|// ret func(arg1, arg2, arg3)
DECL|macro|DEFINEFUNC3
define|#
directive|define
name|DEFINEFUNC3
parameter_list|(
name|ret
parameter_list|,
name|func
parameter_list|,
name|arg1
parameter_list|,
name|a
parameter_list|,
name|arg2
parameter_list|,
name|b
parameter_list|,
name|arg3
parameter_list|,
name|c
parameter_list|,
name|err
parameter_list|,
name|funcret
parameter_list|)
define|\
value|typedef ret (*_q_PTR_##func)(arg1, arg2, arg3);            \     static _q_PTR_##func _q_##func = 0;                        \     ret q_##func(arg1, arg2, arg3) { \         if (Q_UNLIKELY(!_q_##func)) { \             qsslSocketUnresolvedSymbolWarning(#func); \             err; \         } \         funcret _q_##func(a, b, c); \     }
comment|// ret func(arg1, arg2, arg3, arg4)
DECL|macro|DEFINEFUNC4
define|#
directive|define
name|DEFINEFUNC4
parameter_list|(
name|ret
parameter_list|,
name|func
parameter_list|,
name|arg1
parameter_list|,
name|a
parameter_list|,
name|arg2
parameter_list|,
name|b
parameter_list|,
name|arg3
parameter_list|,
name|c
parameter_list|,
name|arg4
parameter_list|,
name|d
parameter_list|,
name|err
parameter_list|,
name|funcret
parameter_list|)
define|\
value|typedef ret (*_q_PTR_##func)(arg1, arg2, arg3, arg4);               \     static _q_PTR_##func _q_##func = 0;                                 \     ret q_##func(arg1, arg2, arg3, arg4) { \          if (Q_UNLIKELY(!_q_##func)) { \              qsslSocketUnresolvedSymbolWarning(#func); \              err; \          } \          funcret _q_##func(a, b, c, d); \     }
comment|// ret func(arg1, arg2, arg3, arg4, arg5)
DECL|macro|DEFINEFUNC5
define|#
directive|define
name|DEFINEFUNC5
parameter_list|(
name|ret
parameter_list|,
name|func
parameter_list|,
name|arg1
parameter_list|,
name|a
parameter_list|,
name|arg2
parameter_list|,
name|b
parameter_list|,
name|arg3
parameter_list|,
name|c
parameter_list|,
name|arg4
parameter_list|,
name|d
parameter_list|,
name|arg5
parameter_list|,
name|e
parameter_list|,
name|err
parameter_list|,
name|funcret
parameter_list|)
define|\
value|typedef ret (*_q_PTR_##func)(arg1, arg2, arg3, arg4, arg5);         \     static _q_PTR_##func _q_##func = 0;                                 \     ret q_##func(arg1, arg2, arg3, arg4, arg5) { \         if (Q_UNLIKELY(!_q_##func)) { \             qsslSocketUnresolvedSymbolWarning(#func); \             err; \         } \         funcret _q_##func(a, b, c, d, e); \     }
comment|// ret func(arg1, arg2, arg3, arg4, arg6)
DECL|macro|DEFINEFUNC6
define|#
directive|define
name|DEFINEFUNC6
parameter_list|(
name|ret
parameter_list|,
name|func
parameter_list|,
name|arg1
parameter_list|,
name|a
parameter_list|,
name|arg2
parameter_list|,
name|b
parameter_list|,
name|arg3
parameter_list|,
name|c
parameter_list|,
name|arg4
parameter_list|,
name|d
parameter_list|,
name|arg5
parameter_list|,
name|e
parameter_list|,
name|arg6
parameter_list|,
name|f
parameter_list|,
name|err
parameter_list|,
name|funcret
parameter_list|)
define|\
value|typedef ret (*_q_PTR_##func)(arg1, arg2, arg3, arg4, arg5, arg6);   \     static _q_PTR_##func _q_##func = 0;                                 \     ret q_##func(arg1, arg2, arg3, arg4, arg5, arg6) { \         if (Q_UNLIKELY(!_q_##func)) { \             qsslSocketUnresolvedSymbolWarning(#func); \             err; \         } \         funcret _q_##func(a, b, c, d, e, f); \     }
comment|// ret func(arg1, arg2, arg3, arg4, arg6, arg7)
DECL|macro|DEFINEFUNC7
define|#
directive|define
name|DEFINEFUNC7
parameter_list|(
name|ret
parameter_list|,
name|func
parameter_list|,
name|arg1
parameter_list|,
name|a
parameter_list|,
name|arg2
parameter_list|,
name|b
parameter_list|,
name|arg3
parameter_list|,
name|c
parameter_list|,
name|arg4
parameter_list|,
name|d
parameter_list|,
name|arg5
parameter_list|,
name|e
parameter_list|,
name|arg6
parameter_list|,
name|f
parameter_list|,
name|arg7
parameter_list|,
name|g
parameter_list|,
name|err
parameter_list|,
name|funcret
parameter_list|)
define|\
value|typedef ret (*_q_PTR_##func)(arg1, arg2, arg3, arg4, arg5, arg6, arg7);   \     static _q_PTR_##func _q_##func = 0;                                       \     ret q_##func(arg1, arg2, arg3, arg4, arg5, arg6, arg7) { \         if (Q_UNLIKELY(!_q_##func)) { \             qsslSocketUnresolvedSymbolWarning(#func); \             err; \         } \         funcret _q_##func(a, b, c, d, e, f, g); \     }
comment|// ret func(arg1, arg2, arg3, arg4, arg6, arg7, arg8, arg9)
DECL|macro|DEFINEFUNC9
define|#
directive|define
name|DEFINEFUNC9
parameter_list|(
name|ret
parameter_list|,
name|func
parameter_list|,
name|arg1
parameter_list|,
name|a
parameter_list|,
name|arg2
parameter_list|,
name|b
parameter_list|,
name|arg3
parameter_list|,
name|c
parameter_list|,
name|arg4
parameter_list|,
name|d
parameter_list|,
name|arg5
parameter_list|,
name|e
parameter_list|,
name|arg6
parameter_list|,
name|f
parameter_list|,
name|arg7
parameter_list|,
name|g
parameter_list|,
name|arg8
parameter_list|,
name|h
parameter_list|,
name|arg9
parameter_list|,
name|i
parameter_list|,
name|err
parameter_list|,
name|funcret
parameter_list|)
define|\
value|typedef ret (*_q_PTR_##func)(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);   \     static _q_PTR_##func _q_##func = 0;                                                   \     ret q_##func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9) { \         if (Q_UNLIKELY(!_q_##func)) { \             qsslSocketUnresolvedSymbolWarning(#func); \             err; \         }   \         funcret _q_##func(a, b, c, d, e, f, g, h, i); \     }
comment|// **************** Shared declarations ******************
else|#
directive|else
comment|// !defined QT_LINKED_OPENSSL
comment|// **************** Static declarations ******************
comment|// ret func(arg)
define|#
directive|define
name|DEFINEFUNC
parameter_list|(
name|ret
parameter_list|,
name|func
parameter_list|,
name|arg
parameter_list|,
name|a
parameter_list|,
name|err
parameter_list|,
name|funcret
parameter_list|)
define|\
value|ret q_##func(arg) { funcret func(a); }
comment|// ret func(arg1, arg2)
define|#
directive|define
name|DEFINEFUNC2
parameter_list|(
name|ret
parameter_list|,
name|func
parameter_list|,
name|arg1
parameter_list|,
name|a
parameter_list|,
name|arg2
parameter_list|,
name|b
parameter_list|,
name|err
parameter_list|,
name|funcret
parameter_list|)
define|\
value|ret q_##func(arg1, arg2) { funcret func(a, b); }
comment|// ret func(arg1, arg2, arg3)
define|#
directive|define
name|DEFINEFUNC3
parameter_list|(
name|ret
parameter_list|,
name|func
parameter_list|,
name|arg1
parameter_list|,
name|a
parameter_list|,
name|arg2
parameter_list|,
name|b
parameter_list|,
name|arg3
parameter_list|,
name|c
parameter_list|,
name|err
parameter_list|,
name|funcret
parameter_list|)
define|\
value|ret q_##func(arg1, arg2, arg3) { funcret func(a, b, c); }
comment|// ret func(arg1, arg2, arg3, arg4)
define|#
directive|define
name|DEFINEFUNC4
parameter_list|(
name|ret
parameter_list|,
name|func
parameter_list|,
name|arg1
parameter_list|,
name|a
parameter_list|,
name|arg2
parameter_list|,
name|b
parameter_list|,
name|arg3
parameter_list|,
name|c
parameter_list|,
name|arg4
parameter_list|,
name|d
parameter_list|,
name|err
parameter_list|,
name|funcret
parameter_list|)
define|\
value|ret q_##func(arg1, arg2, arg3, arg4) { funcret func(a, b, c, d); }
comment|// ret func(arg1, arg2, arg3, arg4, arg5)
define|#
directive|define
name|DEFINEFUNC5
parameter_list|(
name|ret
parameter_list|,
name|func
parameter_list|,
name|arg1
parameter_list|,
name|a
parameter_list|,
name|arg2
parameter_list|,
name|b
parameter_list|,
name|arg3
parameter_list|,
name|c
parameter_list|,
name|arg4
parameter_list|,
name|d
parameter_list|,
name|arg5
parameter_list|,
name|e
parameter_list|,
name|err
parameter_list|,
name|funcret
parameter_list|)
define|\
value|ret q_##func(arg1, arg2, arg3, arg4, arg5) { funcret func(a, b, c, d, e); }
comment|// ret func(arg1, arg2, arg3, arg4, arg6)
define|#
directive|define
name|DEFINEFUNC6
parameter_list|(
name|ret
parameter_list|,
name|func
parameter_list|,
name|arg1
parameter_list|,
name|a
parameter_list|,
name|arg2
parameter_list|,
name|b
parameter_list|,
name|arg3
parameter_list|,
name|c
parameter_list|,
name|arg4
parameter_list|,
name|d
parameter_list|,
name|arg5
parameter_list|,
name|e
parameter_list|,
name|arg6
parameter_list|,
name|f
parameter_list|,
name|err
parameter_list|,
name|funcret
parameter_list|)
define|\
value|ret q_##func(arg1, arg2, arg3, arg4, arg5, arg6) { funcret func(a, b, c, d, e, f); }
comment|// ret func(arg1, arg2, arg3, arg4, arg6, arg7)
define|#
directive|define
name|DEFINEFUNC7
parameter_list|(
name|ret
parameter_list|,
name|func
parameter_list|,
name|arg1
parameter_list|,
name|a
parameter_list|,
name|arg2
parameter_list|,
name|b
parameter_list|,
name|arg3
parameter_list|,
name|c
parameter_list|,
name|arg4
parameter_list|,
name|d
parameter_list|,
name|arg5
parameter_list|,
name|e
parameter_list|,
name|arg6
parameter_list|,
name|f
parameter_list|,
name|arg7
parameter_list|,
name|g
parameter_list|,
name|err
parameter_list|,
name|funcret
parameter_list|)
define|\
value|ret q_##func(arg1, arg2, arg3, arg4, arg5, arg6, arg7) { funcret func(a, b, c, d, e, f, g); }
comment|// ret func(arg1, arg2, arg3, arg4, arg6, arg7, arg8, arg9)
define|#
directive|define
name|DEFINEFUNC9
parameter_list|(
name|ret
parameter_list|,
name|func
parameter_list|,
name|arg1
parameter_list|,
name|a
parameter_list|,
name|arg2
parameter_list|,
name|b
parameter_list|,
name|arg3
parameter_list|,
name|c
parameter_list|,
name|arg4
parameter_list|,
name|d
parameter_list|,
name|arg5
parameter_list|,
name|e
parameter_list|,
name|arg6
parameter_list|,
name|f
parameter_list|,
name|arg7
parameter_list|,
name|g
parameter_list|,
name|arg8
parameter_list|,
name|h
parameter_list|,
name|arg9
parameter_list|,
name|i
parameter_list|,
name|err
parameter_list|,
name|funcret
parameter_list|)
define|\
value|ret q_##func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9) { funcret func(a, b, c, d, e, f, g, h, i); }
comment|// **************** Static declarations ******************
endif|#
directive|endif
comment|// !defined QT_LINKED_OPENSSL
name|bool
name|q_resolveOpenSslSymbols
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|long
name|q_ASN1_INTEGER_get
parameter_list|(
name|ASN1_INTEGER
modifier|*
name|a
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|unsigned
name|char
modifier|*
name|q_ASN1_STRING_data
parameter_list|(
name|ASN1_STRING
modifier|*
name|a
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|q_ASN1_STRING_length
parameter_list|(
name|ASN1_STRING
modifier|*
name|a
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|q_ASN1_STRING_to_UTF8
parameter_list|(
name|unsigned
name|char
modifier|*
modifier|*
name|a
parameter_list|,
name|ASN1_STRING
modifier|*
name|b
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|long
name|q_BIO_ctrl
parameter_list|(
name|BIO
modifier|*
name|a
parameter_list|,
name|int
name|b
parameter_list|,
name|long
name|c
parameter_list|,
name|void
modifier|*
name|d
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|q_BIO_free
parameter_list|(
name|BIO
modifier|*
name|a
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|BIO
modifier|*
name|q_BIO_new
parameter_list|(
name|BIO_METHOD
modifier|*
name|a
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|BIO
modifier|*
name|q_BIO_new_mem_buf
parameter_list|(
name|void
modifier|*
name|a
parameter_list|,
name|int
name|b
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|q_BIO_read
parameter_list|(
name|BIO
modifier|*
name|a
parameter_list|,
name|void
modifier|*
name|b
parameter_list|,
name|int
name|c
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|BIO_METHOD
modifier|*
name|q_BIO_s_mem
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|int
name|q_BIO_write
parameter_list|(
name|BIO
modifier|*
name|a
parameter_list|,
specifier|const
name|void
modifier|*
name|b
parameter_list|,
name|int
name|c
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|q_BN_num_bits
parameter_list|(
specifier|const
name|BIGNUM
modifier|*
name|a
parameter_list|)
function_decl|;
end_function_decl
begin_ifndef
ifndef|#
directive|ifndef
name|OPENSSL_NO_EC
end_ifndef
begin_function_decl
specifier|const
name|EC_GROUP
modifier|*
name|q_EC_KEY_get0_group
parameter_list|(
specifier|const
name|EC_KEY
modifier|*
name|k
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|q_EC_GROUP_get_degree
parameter_list|(
specifier|const
name|EC_GROUP
modifier|*
name|g
parameter_list|)
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_function_decl
name|int
name|q_CRYPTO_num_locks
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|void
name|q_CRYPTO_set_locking_callback
parameter_list|(
name|void
function_decl|(
modifier|*
name|a
function_decl|)
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
name|void
name|q_CRYPTO_set_id_callback
argument_list|(
name|unsigned
name|long
argument_list|(
operator|*
name|a
argument_list|)
argument_list|()
argument_list|)
decl_stmt|;
end_decl_stmt
begin_function_decl
name|void
name|q_CRYPTO_free
parameter_list|(
name|void
modifier|*
name|a
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|DSA
modifier|*
name|q_DSA_new
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|void
name|q_DSA_free
parameter_list|(
name|DSA
modifier|*
name|a
parameter_list|)
function_decl|;
end_function_decl
begin_if
if|#
directive|if
name|OPENSSL_VERSION_NUMBER
operator|>=
literal|0x00908000L
end_if
begin_comment
comment|// 0.9.8 broke SC and BC by changing this function's signature.
end_comment
begin_function_decl
name|X509
modifier|*
name|q_d2i_X509
parameter_list|(
name|X509
modifier|*
modifier|*
name|a
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
modifier|*
name|b
parameter_list|,
name|long
name|c
parameter_list|)
function_decl|;
end_function_decl
begin_else
else|#
directive|else
end_else
begin_function_decl
name|X509
modifier|*
name|q_d2i_X509
parameter_list|(
name|X509
modifier|*
modifier|*
name|a
parameter_list|,
name|unsigned
name|char
modifier|*
modifier|*
name|b
parameter_list|,
name|long
name|c
parameter_list|)
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_function_decl
name|char
modifier|*
name|q_ERR_error_string
parameter_list|(
name|unsigned
name|long
name|a
parameter_list|,
name|char
modifier|*
name|b
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|unsigned
name|long
name|q_ERR_get_error
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|void
name|q_ERR_free_strings
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
specifier|const
name|EVP_CIPHER
modifier|*
name|q_EVP_des_ede3_cbc
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|int
name|q_EVP_PKEY_assign
parameter_list|(
name|EVP_PKEY
modifier|*
name|a
parameter_list|,
name|int
name|b
parameter_list|,
name|char
modifier|*
name|c
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|Q_AUTOTEST_EXPORT
name|int
name|q_EVP_PKEY_set1_RSA
parameter_list|(
name|EVP_PKEY
modifier|*
name|a
parameter_list|,
name|RSA
modifier|*
name|b
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|q_EVP_PKEY_set1_DSA
parameter_list|(
name|EVP_PKEY
modifier|*
name|a
parameter_list|,
name|DSA
modifier|*
name|b
parameter_list|)
function_decl|;
end_function_decl
begin_ifndef
ifndef|#
directive|ifndef
name|OPENSSL_NO_EC
end_ifndef
begin_function_decl
name|int
name|q_EVP_PKEY_set1_EC_KEY
parameter_list|(
name|EVP_PKEY
modifier|*
name|a
parameter_list|,
name|EC_KEY
modifier|*
name|b
parameter_list|)
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_function_decl
name|void
name|q_EVP_PKEY_free
parameter_list|(
name|EVP_PKEY
modifier|*
name|a
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|RSA
modifier|*
name|q_EVP_PKEY_get1_RSA
parameter_list|(
name|EVP_PKEY
modifier|*
name|a
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|DSA
modifier|*
name|q_EVP_PKEY_get1_DSA
parameter_list|(
name|EVP_PKEY
modifier|*
name|a
parameter_list|)
function_decl|;
end_function_decl
begin_ifndef
ifndef|#
directive|ifndef
name|OPENSSL_NO_EC
end_ifndef
begin_function_decl
name|EC_KEY
modifier|*
name|q_EVP_PKEY_get1_EC_KEY
parameter_list|(
name|EVP_PKEY
modifier|*
name|a
parameter_list|)
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_function_decl
name|int
name|q_EVP_PKEY_type
parameter_list|(
name|int
name|a
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|Q_AUTOTEST_EXPORT
name|EVP_PKEY
modifier|*
name|q_EVP_PKEY_new
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|int
name|q_i2d_X509
parameter_list|(
name|X509
modifier|*
name|a
parameter_list|,
name|unsigned
name|char
modifier|*
modifier|*
name|b
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|const
name|char
modifier|*
name|q_OBJ_nid2sn
parameter_list|(
name|int
name|a
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|const
name|char
modifier|*
name|q_OBJ_nid2ln
parameter_list|(
name|int
name|a
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|q_OBJ_sn2nid
parameter_list|(
specifier|const
name|char
modifier|*
name|s
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|q_i2t_ASN1_OBJECT
parameter_list|(
name|char
modifier|*
name|buf
parameter_list|,
name|int
name|buf_len
parameter_list|,
name|ASN1_OBJECT
modifier|*
name|obj
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|q_OBJ_obj2txt
parameter_list|(
name|char
modifier|*
name|buf
parameter_list|,
name|int
name|buf_len
parameter_list|,
name|ASN1_OBJECT
modifier|*
name|obj
parameter_list|,
name|int
name|no_name
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|q_OBJ_obj2nid
parameter_list|(
specifier|const
name|ASN1_OBJECT
modifier|*
name|a
parameter_list|)
function_decl|;
end_function_decl
begin_ifdef
ifdef|#
directive|ifdef
name|SSLEAY_MACROS
end_ifdef
begin_comment
comment|// ### verify
end_comment
begin_function_decl
name|void
modifier|*
name|q_PEM_ASN1_read_bio
parameter_list|(
name|d2i_of_void
modifier|*
name|a
parameter_list|,
specifier|const
name|char
modifier|*
name|b
parameter_list|,
name|BIO
modifier|*
name|c
parameter_list|,
name|void
modifier|*
modifier|*
name|d
parameter_list|,
name|pem_password_cb
modifier|*
name|e
parameter_list|,
name|void
modifier|*
name|f
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|// ### ditto for write
end_comment
begin_else
else|#
directive|else
end_else
begin_function_decl
name|DSA
modifier|*
name|q_PEM_read_bio_DSAPrivateKey
parameter_list|(
name|BIO
modifier|*
name|a
parameter_list|,
name|DSA
modifier|*
modifier|*
name|b
parameter_list|,
name|pem_password_cb
modifier|*
name|c
parameter_list|,
name|void
modifier|*
name|d
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|RSA
modifier|*
name|q_PEM_read_bio_RSAPrivateKey
parameter_list|(
name|BIO
modifier|*
name|a
parameter_list|,
name|RSA
modifier|*
modifier|*
name|b
parameter_list|,
name|pem_password_cb
modifier|*
name|c
parameter_list|,
name|void
modifier|*
name|d
parameter_list|)
function_decl|;
end_function_decl
begin_ifndef
ifndef|#
directive|ifndef
name|OPENSSL_NO_EC
end_ifndef
begin_function_decl
name|EC_KEY
modifier|*
name|q_PEM_read_bio_ECPrivateKey
parameter_list|(
name|BIO
modifier|*
name|a
parameter_list|,
name|EC_KEY
modifier|*
modifier|*
name|b
parameter_list|,
name|pem_password_cb
modifier|*
name|c
parameter_list|,
name|void
modifier|*
name|d
parameter_list|)
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_function_decl
name|int
name|q_PEM_write_bio_DSAPrivateKey
parameter_list|(
name|BIO
modifier|*
name|a
parameter_list|,
name|DSA
modifier|*
name|b
parameter_list|,
specifier|const
name|EVP_CIPHER
modifier|*
name|c
parameter_list|,
name|unsigned
name|char
modifier|*
name|d
parameter_list|,
name|int
name|e
parameter_list|,
name|pem_password_cb
modifier|*
name|f
parameter_list|,
name|void
modifier|*
name|g
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|q_PEM_write_bio_RSAPrivateKey
parameter_list|(
name|BIO
modifier|*
name|a
parameter_list|,
name|RSA
modifier|*
name|b
parameter_list|,
specifier|const
name|EVP_CIPHER
modifier|*
name|c
parameter_list|,
name|unsigned
name|char
modifier|*
name|d
parameter_list|,
name|int
name|e
parameter_list|,
name|pem_password_cb
modifier|*
name|f
parameter_list|,
name|void
modifier|*
name|g
parameter_list|)
function_decl|;
end_function_decl
begin_ifndef
ifndef|#
directive|ifndef
name|OPENSSL_NO_EC
end_ifndef
begin_function_decl
name|int
name|q_PEM_write_bio_ECPrivateKey
parameter_list|(
name|BIO
modifier|*
name|a
parameter_list|,
name|EC_KEY
modifier|*
name|b
parameter_list|,
specifier|const
name|EVP_CIPHER
modifier|*
name|c
parameter_list|,
name|unsigned
name|char
modifier|*
name|d
parameter_list|,
name|int
name|e
parameter_list|,
name|pem_password_cb
modifier|*
name|f
parameter_list|,
name|void
modifier|*
name|g
parameter_list|)
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_function_decl
name|DSA
modifier|*
name|q_PEM_read_bio_DSA_PUBKEY
parameter_list|(
name|BIO
modifier|*
name|a
parameter_list|,
name|DSA
modifier|*
modifier|*
name|b
parameter_list|,
name|pem_password_cb
modifier|*
name|c
parameter_list|,
name|void
modifier|*
name|d
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|RSA
modifier|*
name|q_PEM_read_bio_RSA_PUBKEY
parameter_list|(
name|BIO
modifier|*
name|a
parameter_list|,
name|RSA
modifier|*
modifier|*
name|b
parameter_list|,
name|pem_password_cb
modifier|*
name|c
parameter_list|,
name|void
modifier|*
name|d
parameter_list|)
function_decl|;
end_function_decl
begin_ifndef
ifndef|#
directive|ifndef
name|OPENSSL_NO_EC
end_ifndef
begin_function_decl
name|EC_KEY
modifier|*
name|q_PEM_read_bio_EC_PUBKEY
parameter_list|(
name|BIO
modifier|*
name|a
parameter_list|,
name|EC_KEY
modifier|*
modifier|*
name|b
parameter_list|,
name|pem_password_cb
modifier|*
name|c
parameter_list|,
name|void
modifier|*
name|d
parameter_list|)
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_function_decl
name|int
name|q_PEM_write_bio_DSA_PUBKEY
parameter_list|(
name|BIO
modifier|*
name|a
parameter_list|,
name|DSA
modifier|*
name|b
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|q_PEM_write_bio_RSA_PUBKEY
parameter_list|(
name|BIO
modifier|*
name|a
parameter_list|,
name|RSA
modifier|*
name|b
parameter_list|)
function_decl|;
end_function_decl
begin_ifndef
ifndef|#
directive|ifndef
name|OPENSSL_NO_EC
end_ifndef
begin_function_decl
name|int
name|q_PEM_write_bio_EC_PUBKEY
parameter_list|(
name|BIO
modifier|*
name|a
parameter_list|,
name|EC_KEY
modifier|*
name|b
parameter_list|)
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_function_decl
name|void
name|q_RAND_seed
parameter_list|(
specifier|const
name|void
modifier|*
name|a
parameter_list|,
name|int
name|b
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|q_RAND_status
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|RSA
modifier|*
name|q_RSA_new
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|void
name|q_RSA_free
parameter_list|(
name|RSA
modifier|*
name|a
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|q_sk_num
parameter_list|(
name|STACK
modifier|*
name|a
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|q_sk_pop_free
parameter_list|(
name|STACK
modifier|*
name|a
parameter_list|,
name|void
function_decl|(
modifier|*
name|b
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
parameter_list|)
function_decl|;
end_function_decl
begin_if
if|#
directive|if
name|OPENSSL_VERSION_NUMBER
operator|>=
literal|0x10000000L
end_if
begin_function_decl
name|_STACK
modifier|*
name|q_sk_new_null
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|void
name|q_sk_push
parameter_list|(
name|_STACK
modifier|*
name|st
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|q_sk_free
parameter_list|(
name|_STACK
modifier|*
name|a
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
modifier|*
name|q_sk_value
parameter_list|(
name|STACK
modifier|*
name|a
parameter_list|,
name|int
name|b
parameter_list|)
function_decl|;
end_function_decl
begin_else
else|#
directive|else
end_else
begin_function_decl
name|STACK
modifier|*
name|q_sk_new_null
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|void
name|q_sk_push
parameter_list|(
name|STACK
modifier|*
name|st
parameter_list|,
name|char
modifier|*
name|data
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|q_sk_free
parameter_list|(
name|STACK
modifier|*
name|a
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|char
modifier|*
name|q_sk_value
parameter_list|(
name|STACK
modifier|*
name|a
parameter_list|,
name|int
name|b
parameter_list|)
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_function_decl
name|int
name|q_SSL_accept
parameter_list|(
name|SSL
modifier|*
name|a
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|q_SSL_clear
parameter_list|(
name|SSL
modifier|*
name|a
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|char
modifier|*
name|q_SSL_CIPHER_description
parameter_list|(
name|SSL_CIPHER
modifier|*
name|a
parameter_list|,
name|char
modifier|*
name|b
parameter_list|,
name|int
name|c
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|q_SSL_CIPHER_get_bits
parameter_list|(
name|SSL_CIPHER
modifier|*
name|a
parameter_list|,
name|int
modifier|*
name|b
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|q_SSL_connect
parameter_list|(
name|SSL
modifier|*
name|a
parameter_list|)
function_decl|;
end_function_decl
begin_if
if|#
directive|if
name|OPENSSL_VERSION_NUMBER
operator|>=
literal|0x00908000L
end_if
begin_comment
comment|// 0.9.8 broke SC and BC by changing this function's signature.
end_comment
begin_function_decl
name|int
name|q_SSL_CTX_check_private_key
parameter_list|(
specifier|const
name|SSL_CTX
modifier|*
name|a
parameter_list|)
function_decl|;
end_function_decl
begin_else
else|#
directive|else
end_else
begin_function_decl
name|int
name|q_SSL_CTX_check_private_key
parameter_list|(
name|SSL_CTX
modifier|*
name|a
parameter_list|)
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_function_decl
name|long
name|q_SSL_CTX_ctrl
parameter_list|(
name|SSL_CTX
modifier|*
name|a
parameter_list|,
name|int
name|b
parameter_list|,
name|long
name|c
parameter_list|,
name|void
modifier|*
name|d
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|q_SSL_CTX_free
parameter_list|(
name|SSL_CTX
modifier|*
name|a
parameter_list|)
function_decl|;
end_function_decl
begin_if
if|#
directive|if
name|OPENSSL_VERSION_NUMBER
operator|>=
literal|0x10000000L
end_if
begin_function_decl
name|SSL_CTX
modifier|*
name|q_SSL_CTX_new
parameter_list|(
specifier|const
name|SSL_METHOD
modifier|*
name|a
parameter_list|)
function_decl|;
end_function_decl
begin_else
else|#
directive|else
end_else
begin_function_decl
name|SSL_CTX
modifier|*
name|q_SSL_CTX_new
parameter_list|(
name|SSL_METHOD
modifier|*
name|a
parameter_list|)
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_function_decl
name|int
name|q_SSL_CTX_set_cipher_list
parameter_list|(
name|SSL_CTX
modifier|*
name|a
parameter_list|,
specifier|const
name|char
modifier|*
name|b
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|q_SSL_CTX_set_default_verify_paths
parameter_list|(
name|SSL_CTX
modifier|*
name|a
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|q_SSL_CTX_set_verify
parameter_list|(
name|SSL_CTX
modifier|*
name|a
parameter_list|,
name|int
name|b
parameter_list|,
name|int
function_decl|(
modifier|*
name|c
function_decl|)
parameter_list|(
name|int
parameter_list|,
name|X509_STORE_CTX
modifier|*
parameter_list|)
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|q_SSL_CTX_set_verify_depth
parameter_list|(
name|SSL_CTX
modifier|*
name|a
parameter_list|,
name|int
name|b
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|q_SSL_CTX_use_certificate
parameter_list|(
name|SSL_CTX
modifier|*
name|a
parameter_list|,
name|X509
modifier|*
name|b
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|q_SSL_CTX_use_certificate_file
parameter_list|(
name|SSL_CTX
modifier|*
name|a
parameter_list|,
specifier|const
name|char
modifier|*
name|b
parameter_list|,
name|int
name|c
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|q_SSL_CTX_use_PrivateKey
parameter_list|(
name|SSL_CTX
modifier|*
name|a
parameter_list|,
name|EVP_PKEY
modifier|*
name|b
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|q_SSL_CTX_use_RSAPrivateKey
parameter_list|(
name|SSL_CTX
modifier|*
name|a
parameter_list|,
name|RSA
modifier|*
name|b
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|q_SSL_CTX_use_PrivateKey_file
parameter_list|(
name|SSL_CTX
modifier|*
name|a
parameter_list|,
specifier|const
name|char
modifier|*
name|b
parameter_list|,
name|int
name|c
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|q_SSL_free
parameter_list|(
name|SSL
modifier|*
name|a
parameter_list|)
function_decl|;
end_function_decl
begin_if
if|#
directive|if
name|OPENSSL_VERSION_NUMBER
operator|>=
literal|0x00908000L
end_if
begin_comment
comment|// 0.9.8 broke SC and BC by changing this function's signature.
end_comment
begin_expr_stmt
name|STACK_OF
argument_list|(
name|SSL_CIPHER
argument_list|)
operator|*
name|q_SSL_get_ciphers
argument_list|(
specifier|const
name|SSL
operator|*
name|a
argument_list|)
expr_stmt|;
end_expr_stmt
begin_else
else|#
directive|else
end_else
begin_expr_stmt
name|STACK_OF
argument_list|(
name|SSL_CIPHER
argument_list|)
operator|*
name|q_SSL_get_ciphers
argument_list|(
name|SSL
operator|*
name|a
argument_list|)
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|OPENSSL_VERSION_NUMBER
operator|>=
literal|0x10000000L
end_if
begin_function_decl
DECL|variable|q_SSL_get_current_cipher
specifier|const
name|SSL_CIPHER
modifier|*
name|q_SSL_get_current_cipher
parameter_list|(
name|SSL
modifier|*
name|a
parameter_list|)
function_decl|;
end_function_decl
begin_else
else|#
directive|else
end_else
begin_function_decl
name|SSL_CIPHER
modifier|*
name|q_SSL_get_current_cipher
parameter_list|(
name|SSL
modifier|*
name|a
parameter_list|)
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_function_decl
name|int
name|q_SSL_version
parameter_list|(
specifier|const
name|SSL
modifier|*
name|a
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|q_SSL_get_error
parameter_list|(
name|SSL
modifier|*
name|a
parameter_list|,
name|int
name|b
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|STACK_OF
argument_list|(
name|X509
argument_list|)
operator|*
name|q_SSL_get_peer_cert_chain
argument_list|(
name|SSL
operator|*
name|a
argument_list|)
expr_stmt|;
end_expr_stmt
begin_function_decl
DECL|variable|q_SSL_get_peer_certificate
name|X509
modifier|*
name|q_SSL_get_peer_certificate
parameter_list|(
name|SSL
modifier|*
name|a
parameter_list|)
function_decl|;
end_function_decl
begin_if
if|#
directive|if
name|OPENSSL_VERSION_NUMBER
operator|>=
literal|0x00908000L
end_if
begin_comment
comment|// 0.9.8 broke SC and BC by changing this function's signature.
end_comment
begin_function_decl
name|long
name|q_SSL_get_verify_result
parameter_list|(
specifier|const
name|SSL
modifier|*
name|a
parameter_list|)
function_decl|;
end_function_decl
begin_else
else|#
directive|else
end_else
begin_function_decl
name|long
name|q_SSL_get_verify_result
parameter_list|(
name|SSL
modifier|*
name|a
parameter_list|)
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_function_decl
name|int
name|q_SSL_library_init
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|void
name|q_SSL_load_error_strings
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|SSL
modifier|*
name|q_SSL_new
parameter_list|(
name|SSL_CTX
modifier|*
name|a
parameter_list|)
function_decl|;
end_function_decl
begin_if
if|#
directive|if
name|OPENSSL_VERSION_NUMBER
operator|>=
literal|0x0090806fL
operator|&&
operator|!
name|defined
argument_list|(
name|OPENSSL_NO_TLSEXT
argument_list|)
end_if
begin_function_decl
name|long
name|q_SSL_ctrl
parameter_list|(
name|SSL
modifier|*
name|ssl
parameter_list|,
name|int
name|cmd
parameter_list|,
name|long
name|larg
parameter_list|,
name|void
modifier|*
name|parg
parameter_list|)
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_function_decl
name|int
name|q_SSL_read
parameter_list|(
name|SSL
modifier|*
name|a
parameter_list|,
name|void
modifier|*
name|b
parameter_list|,
name|int
name|c
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|q_SSL_set_bio
parameter_list|(
name|SSL
modifier|*
name|a
parameter_list|,
name|BIO
modifier|*
name|b
parameter_list|,
name|BIO
modifier|*
name|c
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|q_SSL_set_accept_state
parameter_list|(
name|SSL
modifier|*
name|a
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|q_SSL_set_connect_state
parameter_list|(
name|SSL
modifier|*
name|a
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|q_SSL_shutdown
parameter_list|(
name|SSL
modifier|*
name|a
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|q_SSL_set_session
parameter_list|(
name|SSL
modifier|*
name|to
parameter_list|,
name|SSL_SESSION
modifier|*
name|session
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|q_SSL_SESSION_free
parameter_list|(
name|SSL_SESSION
modifier|*
name|ses
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|SSL_SESSION
modifier|*
name|q_SSL_get1_session
parameter_list|(
name|SSL
modifier|*
name|ssl
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|SSL_SESSION
modifier|*
name|q_SSL_get_session
parameter_list|(
specifier|const
name|SSL
modifier|*
name|ssl
parameter_list|)
function_decl|;
end_function_decl
begin_if
if|#
directive|if
name|OPENSSL_VERSION_NUMBER
operator|>=
literal|0x10000000L
end_if
begin_function_decl
specifier|const
name|SSL_METHOD
modifier|*
name|q_SSLv2_client_method
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
specifier|const
name|SSL_METHOD
modifier|*
name|q_SSLv3_client_method
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
specifier|const
name|SSL_METHOD
modifier|*
name|q_SSLv23_client_method
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
specifier|const
name|SSL_METHOD
modifier|*
name|q_TLSv1_client_method
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
specifier|const
name|SSL_METHOD
modifier|*
name|q_TLSv1_1_client_method
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
specifier|const
name|SSL_METHOD
modifier|*
name|q_TLSv1_2_client_method
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
specifier|const
name|SSL_METHOD
modifier|*
name|q_SSLv2_server_method
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
specifier|const
name|SSL_METHOD
modifier|*
name|q_SSLv3_server_method
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
specifier|const
name|SSL_METHOD
modifier|*
name|q_SSLv23_server_method
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
specifier|const
name|SSL_METHOD
modifier|*
name|q_TLSv1_server_method
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
specifier|const
name|SSL_METHOD
modifier|*
name|q_TLSv1_1_server_method
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
specifier|const
name|SSL_METHOD
modifier|*
name|q_TLSv1_2_server_method
parameter_list|()
function_decl|;
end_function_decl
begin_else
else|#
directive|else
end_else
begin_function_decl
name|SSL_METHOD
modifier|*
name|q_SSLv2_client_method
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|SSL_METHOD
modifier|*
name|q_SSLv3_client_method
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|SSL_METHOD
modifier|*
name|q_SSLv23_client_method
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|SSL_METHOD
modifier|*
name|q_TLSv1_client_method
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|SSL_METHOD
modifier|*
name|q_TLSv1_1_client_method
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|SSL_METHOD
modifier|*
name|q_TLSv1_2_client_method
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|SSL_METHOD
modifier|*
name|q_SSLv2_server_method
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|SSL_METHOD
modifier|*
name|q_SSLv3_server_method
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|SSL_METHOD
modifier|*
name|q_SSLv23_server_method
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|SSL_METHOD
modifier|*
name|q_TLSv1_server_method
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|SSL_METHOD
modifier|*
name|q_TLSv1_1_server_method
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|SSL_METHOD
modifier|*
name|q_TLSv1_2_server_method
parameter_list|()
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_function_decl
name|int
name|q_SSL_write
parameter_list|(
name|SSL
modifier|*
name|a
parameter_list|,
specifier|const
name|void
modifier|*
name|b
parameter_list|,
name|int
name|c
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|q_X509_cmp
parameter_list|(
name|X509
modifier|*
name|a
parameter_list|,
name|X509
modifier|*
name|b
parameter_list|)
function_decl|;
end_function_decl
begin_ifdef
ifdef|#
directive|ifdef
name|SSLEAY_MACROS
end_ifdef
begin_function_decl
name|void
modifier|*
name|q_ASN1_dup
parameter_list|(
name|i2d_of_void
modifier|*
name|i2d
parameter_list|,
name|d2i_of_void
modifier|*
name|d2i
parameter_list|,
name|char
modifier|*
name|x
parameter_list|)
function_decl|;
end_function_decl
begin_define
DECL|macro|q_X509_dup
define|#
directive|define
name|q_X509_dup
parameter_list|(
name|x509
parameter_list|)
value|(X509 *)q_ASN1_dup((i2d_of_void *)q_i2d_X509, \                 (d2i_of_void *)q_d2i_X509,(char *)x509)
end_define
begin_else
else|#
directive|else
end_else
begin_function_decl
name|X509
modifier|*
name|q_X509_dup
parameter_list|(
name|X509
modifier|*
name|a
parameter_list|)
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_function_decl
name|void
name|q_X509_print
parameter_list|(
name|BIO
modifier|*
name|a
parameter_list|,
name|X509
modifier|*
name|b
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|ASN1_OBJECT
modifier|*
name|q_X509_EXTENSION_get_object
parameter_list|(
name|X509_EXTENSION
modifier|*
name|a
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|q_X509_free
parameter_list|(
name|X509
modifier|*
name|a
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|X509_EXTENSION
modifier|*
name|q_X509_get_ext
parameter_list|(
name|X509
modifier|*
name|a
parameter_list|,
name|int
name|b
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|q_X509_get_ext_count
parameter_list|(
name|X509
modifier|*
name|a
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
modifier|*
name|q_X509_get_ext_d2i
parameter_list|(
name|X509
modifier|*
name|a
parameter_list|,
name|int
name|b
parameter_list|,
name|int
modifier|*
name|c
parameter_list|,
name|int
modifier|*
name|d
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|const
name|X509V3_EXT_METHOD
modifier|*
name|q_X509V3_EXT_get
parameter_list|(
name|X509_EXTENSION
modifier|*
name|a
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
modifier|*
name|q_X509V3_EXT_d2i
parameter_list|(
name|X509_EXTENSION
modifier|*
name|a
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|q_X509_EXTENSION_get_critical
parameter_list|(
name|X509_EXTENSION
modifier|*
name|a
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|ASN1_OCTET_STRING
modifier|*
name|q_X509_EXTENSION_get_data
parameter_list|(
name|X509_EXTENSION
modifier|*
name|a
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|q_BASIC_CONSTRAINTS_free
parameter_list|(
name|BASIC_CONSTRAINTS
modifier|*
name|a
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|q_AUTHORITY_KEYID_free
parameter_list|(
name|AUTHORITY_KEYID
modifier|*
name|a
parameter_list|)
function_decl|;
end_function_decl
begin_if
if|#
directive|if
name|OPENSSL_VERSION_NUMBER
operator|>=
literal|0x10000000L
end_if
begin_function_decl
name|int
name|q_ASN1_STRING_print
parameter_list|(
name|BIO
modifier|*
name|a
parameter_list|,
specifier|const
name|ASN1_STRING
modifier|*
name|b
parameter_list|)
function_decl|;
end_function_decl
begin_else
else|#
directive|else
end_else
begin_function_decl
name|int
name|q_ASN1_STRING_print
parameter_list|(
name|BIO
modifier|*
name|a
parameter_list|,
name|ASN1_STRING
modifier|*
name|b
parameter_list|)
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_function_decl
name|int
name|q_X509_check_issued
parameter_list|(
name|X509
modifier|*
name|a
parameter_list|,
name|X509
modifier|*
name|b
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|X509_NAME
modifier|*
name|q_X509_get_issuer_name
parameter_list|(
name|X509
modifier|*
name|a
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|X509_NAME
modifier|*
name|q_X509_get_subject_name
parameter_list|(
name|X509
modifier|*
name|a
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|q_X509_verify_cert
parameter_list|(
name|X509_STORE_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|q_X509_NAME_entry_count
parameter_list|(
name|X509_NAME
modifier|*
name|a
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|X509_NAME_ENTRY
modifier|*
name|q_X509_NAME_get_entry
parameter_list|(
name|X509_NAME
modifier|*
name|a
parameter_list|,
name|int
name|b
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|ASN1_STRING
modifier|*
name|q_X509_NAME_ENTRY_get_data
parameter_list|(
name|X509_NAME_ENTRY
modifier|*
name|a
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|ASN1_OBJECT
modifier|*
name|q_X509_NAME_ENTRY_get_object
parameter_list|(
name|X509_NAME_ENTRY
modifier|*
name|a
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|EVP_PKEY
modifier|*
name|q_X509_PUBKEY_get
parameter_list|(
name|X509_PUBKEY
modifier|*
name|a
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|q_X509_STORE_free
parameter_list|(
name|X509_STORE
modifier|*
name|store
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|X509_STORE
modifier|*
name|q_X509_STORE_new
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|int
name|q_X509_STORE_add_cert
parameter_list|(
name|X509_STORE
modifier|*
name|ctx
parameter_list|,
name|X509
modifier|*
name|x
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|q_X509_STORE_CTX_free
parameter_list|(
name|X509_STORE_CTX
modifier|*
name|storeCtx
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
name|int
name|q_X509_STORE_CTX_init
argument_list|(
name|X509_STORE_CTX
operator|*
name|ctx
argument_list|,
name|X509_STORE
operator|*
name|store
argument_list|,
name|X509
operator|*
name|x509
argument_list|,
name|STACK_OF
argument_list|(
name|X509
argument_list|)
operator|*
name|chain
argument_list|)
decl_stmt|;
end_decl_stmt
begin_function_decl
name|X509_STORE_CTX
modifier|*
name|q_X509_STORE_CTX_new
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|int
name|q_X509_STORE_CTX_set_purpose
parameter_list|(
name|X509_STORE_CTX
modifier|*
name|ctx
parameter_list|,
name|int
name|purpose
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|q_X509_STORE_CTX_get_error
parameter_list|(
name|X509_STORE_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|q_X509_STORE_CTX_get_error_depth
parameter_list|(
name|X509_STORE_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|X509
modifier|*
name|q_X509_STORE_CTX_get_current_cert
parameter_list|(
name|X509_STORE_CTX
modifier|*
name|ctx
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|STACK_OF
argument_list|(
name|X509
argument_list|)
operator|*
name|q_X509_STORE_CTX_get_chain
argument_list|(
name|X509_STORE_CTX
operator|*
name|ctx
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// Diffie-Hellman support
end_comment
begin_function_decl
DECL|variable|q_DH_new
name|DH
modifier|*
name|q_DH_new
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|void
name|q_DH_free
parameter_list|(
name|DH
modifier|*
name|dh
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|BIGNUM
modifier|*
name|q_BN_bin2bn
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|s
parameter_list|,
name|int
name|len
parameter_list|,
name|BIGNUM
modifier|*
name|ret
parameter_list|)
function_decl|;
end_function_decl
begin_define
DECL|macro|q_SSL_CTX_set_tmp_dh
define|#
directive|define
name|q_SSL_CTX_set_tmp_dh
parameter_list|(
name|ctx
parameter_list|,
name|dh
parameter_list|)
value|q_SSL_CTX_ctrl((ctx), SSL_CTRL_SET_TMP_DH, 0, (char *)dh)
end_define
begin_ifndef
ifndef|#
directive|ifndef
name|OPENSSL_NO_EC
end_ifndef
begin_comment
comment|// EC Diffie-Hellman support
end_comment
begin_function_decl
name|EC_KEY
modifier|*
name|q_EC_KEY_dup
parameter_list|(
specifier|const
name|EC_KEY
modifier|*
name|src
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|EC_KEY
modifier|*
name|q_EC_KEY_new_by_curve_name
parameter_list|(
name|int
name|nid
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|q_EC_KEY_free
parameter_list|(
name|EC_KEY
modifier|*
name|ecdh
parameter_list|)
function_decl|;
end_function_decl
begin_define
DECL|macro|q_SSL_CTX_set_tmp_ecdh
define|#
directive|define
name|q_SSL_CTX_set_tmp_ecdh
parameter_list|(
name|ctx
parameter_list|,
name|ecdh
parameter_list|)
value|q_SSL_CTX_ctrl((ctx), SSL_CTRL_SET_TMP_ECDH, 0, (char *)ecdh)
end_define
begin_comment
comment|// EC curves management
end_comment
begin_function_decl
name|size_t
name|q_EC_get_builtin_curves
parameter_list|(
name|EC_builtin_curve
modifier|*
name|r
parameter_list|,
name|size_t
name|nitems
parameter_list|)
function_decl|;
end_function_decl
begin_if
if|#
directive|if
name|OPENSSL_VERSION_NUMBER
operator|>=
literal|0x10002000L
end_if
begin_function_decl
name|int
name|q_EC_curve_nist2nid
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// OPENSSL_VERSION_NUMBER>= 0x10002000L
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// OPENSSL_NO_EC
end_comment
begin_comment
comment|// PKCS#12 support
end_comment
begin_decl_stmt
name|int
name|q_PKCS12_parse
argument_list|(
name|PKCS12
operator|*
name|p12
argument_list|,
specifier|const
name|char
operator|*
name|pass
argument_list|,
name|EVP_PKEY
operator|*
operator|*
name|pkey
argument_list|,
name|X509
operator|*
operator|*
name|cert
argument_list|,
name|STACK_OF
argument_list|(
name|X509
argument_list|)
operator|*
operator|*
name|ca
argument_list|)
decl_stmt|;
end_decl_stmt
begin_function_decl
name|PKCS12
modifier|*
name|q_d2i_PKCS12_bio
parameter_list|(
name|BIO
modifier|*
name|bio
parameter_list|,
name|PKCS12
modifier|*
modifier|*
name|pkcs12
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|q_PKCS12_free
parameter_list|(
name|PKCS12
modifier|*
name|pkcs12
parameter_list|)
function_decl|;
end_function_decl
begin_define
DECL|macro|q_BIO_get_mem_data
define|#
directive|define
name|q_BIO_get_mem_data
parameter_list|(
name|b
parameter_list|,
name|pp
parameter_list|)
value|(int)q_BIO_ctrl(b,BIO_CTRL_INFO,0,(char *)pp)
end_define
begin_define
DECL|macro|q_BIO_pending
define|#
directive|define
name|q_BIO_pending
parameter_list|(
name|b
parameter_list|)
value|(int)q_BIO_ctrl(b,BIO_CTRL_PENDING,0,NULL)
end_define
begin_ifdef
ifdef|#
directive|ifdef
name|SSLEAY_MACROS
end_ifdef
begin_function_decl
name|int
name|q_i2d_DSAPrivateKey
parameter_list|(
specifier|const
name|DSA
modifier|*
name|a
parameter_list|,
name|unsigned
name|char
modifier|*
modifier|*
name|pp
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|q_i2d_RSAPrivateKey
parameter_list|(
specifier|const
name|RSA
modifier|*
name|a
parameter_list|,
name|unsigned
name|char
modifier|*
modifier|*
name|pp
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|RSA
modifier|*
name|q_d2i_RSAPrivateKey
parameter_list|(
name|RSA
modifier|*
modifier|*
name|a
parameter_list|,
name|unsigned
name|char
modifier|*
modifier|*
name|pp
parameter_list|,
name|long
name|length
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|DSA
modifier|*
name|q_d2i_DSAPrivateKey
parameter_list|(
name|DSA
modifier|*
modifier|*
name|a
parameter_list|,
name|unsigned
name|char
modifier|*
modifier|*
name|pp
parameter_list|,
name|long
name|length
parameter_list|)
function_decl|;
end_function_decl
begin_define
DECL|macro|q_PEM_read_bio_RSAPrivateKey
define|#
directive|define
name|q_PEM_read_bio_RSAPrivateKey
parameter_list|(
name|bp
parameter_list|,
name|x
parameter_list|,
name|cb
parameter_list|,
name|u
parameter_list|)
define|\
value|(RSA *)q_PEM_ASN1_read_bio( \         (void *(*)(void**, const unsigned char**, long int))q_d2i_RSAPrivateKey, PEM_STRING_RSA, bp, (void **)x, cb, u)
end_define
begin_define
DECL|macro|q_PEM_read_bio_DSAPrivateKey
define|#
directive|define
name|q_PEM_read_bio_DSAPrivateKey
parameter_list|(
name|bp
parameter_list|,
name|x
parameter_list|,
name|cb
parameter_list|,
name|u
parameter_list|)
define|\
value|(DSA *)q_PEM_ASN1_read_bio( \         (void *(*)(void**, const unsigned char**, long int))q_d2i_DSAPrivateKey, PEM_STRING_DSA, bp, (void **)x, cb, u)
end_define
begin_define
DECL|macro|q_PEM_write_bio_RSAPrivateKey
define|#
directive|define
name|q_PEM_write_bio_RSAPrivateKey
parameter_list|(
name|bp
parameter_list|,
name|x
parameter_list|,
name|enc
parameter_list|,
name|kstr
parameter_list|,
name|klen
parameter_list|,
name|cb
parameter_list|,
name|u
parameter_list|)
define|\
value|PEM_ASN1_write_bio((int (*)(void*, unsigned char**))q_i2d_RSAPrivateKey,PEM_STRING_RSA,\                            bp,(char *)x,enc,kstr,klen,cb,u)
end_define
begin_define
DECL|macro|q_PEM_write_bio_DSAPrivateKey
define|#
directive|define
name|q_PEM_write_bio_DSAPrivateKey
parameter_list|(
name|bp
parameter_list|,
name|x
parameter_list|,
name|enc
parameter_list|,
name|kstr
parameter_list|,
name|klen
parameter_list|,
name|cb
parameter_list|,
name|u
parameter_list|)
define|\
value|PEM_ASN1_write_bio((int (*)(void*, unsigned char**))q_i2d_DSAPrivateKey,PEM_STRING_DSA,\                            bp,(char *)x,enc,kstr,klen,cb,u)
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_define
DECL|macro|q_SSL_CTX_set_options
define|#
directive|define
name|q_SSL_CTX_set_options
parameter_list|(
name|ctx
parameter_list|,
name|op
parameter_list|)
value|q_SSL_CTX_ctrl((ctx),SSL_CTRL_OPTIONS,(op),NULL)
end_define
begin_define
DECL|macro|q_SSL_CTX_set_mode
define|#
directive|define
name|q_SSL_CTX_set_mode
parameter_list|(
name|ctx
parameter_list|,
name|op
parameter_list|)
value|q_SSL_CTX_ctrl((ctx),SSL_CTRL_MODE,(op),NULL)
end_define
begin_define
DECL|macro|q_SKM_sk_num
define|#
directive|define
name|q_SKM_sk_num
parameter_list|(
name|type
parameter_list|,
name|st
parameter_list|)
value|((int (*)(const STACK_OF(type) *))q_sk_num)(st)
end_define
begin_define
DECL|macro|q_SKM_sk_value
define|#
directive|define
name|q_SKM_sk_value
parameter_list|(
name|type
parameter_list|,
name|st
parameter_list|,
name|i
parameter_list|)
value|((type * (*)(const STACK_OF(type) *, int))q_sk_value)(st, i)
end_define
begin_define
DECL|macro|q_sk_GENERAL_NAME_num
define|#
directive|define
name|q_sk_GENERAL_NAME_num
parameter_list|(
name|st
parameter_list|)
value|q_SKM_sk_num(GENERAL_NAME, (st))
end_define
begin_define
DECL|macro|q_sk_GENERAL_NAME_value
define|#
directive|define
name|q_sk_GENERAL_NAME_value
parameter_list|(
name|st
parameter_list|,
name|i
parameter_list|)
value|q_SKM_sk_value(GENERAL_NAME, (st), (i))
end_define
begin_define
DECL|macro|q_sk_X509_num
define|#
directive|define
name|q_sk_X509_num
parameter_list|(
name|st
parameter_list|)
value|q_SKM_sk_num(X509, (st))
end_define
begin_define
DECL|macro|q_sk_X509_value
define|#
directive|define
name|q_sk_X509_value
parameter_list|(
name|st
parameter_list|,
name|i
parameter_list|)
value|q_SKM_sk_value(X509, (st), (i))
end_define
begin_define
DECL|macro|q_sk_SSL_CIPHER_num
define|#
directive|define
name|q_sk_SSL_CIPHER_num
parameter_list|(
name|st
parameter_list|)
value|q_SKM_sk_num(SSL_CIPHER, (st))
end_define
begin_define
DECL|macro|q_sk_SSL_CIPHER_value
define|#
directive|define
name|q_sk_SSL_CIPHER_value
parameter_list|(
name|st
parameter_list|,
name|i
parameter_list|)
value|q_SKM_sk_value(SSL_CIPHER, (st), (i))
end_define
begin_define
DECL|macro|q_SSL_CTX_add_extra_chain_cert
define|#
directive|define
name|q_SSL_CTX_add_extra_chain_cert
parameter_list|(
name|ctx
parameter_list|,
name|x509
parameter_list|)
define|\
value|q_SSL_CTX_ctrl(ctx,SSL_CTRL_EXTRA_CHAIN_CERT,0,(char *)x509)
end_define
begin_define
DECL|macro|q_X509_get_notAfter
define|#
directive|define
name|q_X509_get_notAfter
parameter_list|(
name|x
parameter_list|)
value|X509_get_notAfter(x)
end_define
begin_define
DECL|macro|q_X509_get_notBefore
define|#
directive|define
name|q_X509_get_notBefore
parameter_list|(
name|x
parameter_list|)
value|X509_get_notBefore(x)
end_define
begin_define
DECL|macro|q_EVP_PKEY_assign_RSA
define|#
directive|define
name|q_EVP_PKEY_assign_RSA
parameter_list|(
name|pkey
parameter_list|,
name|rsa
parameter_list|)
value|q_EVP_PKEY_assign((pkey),EVP_PKEY_RSA,\                                         (char *)(rsa))
end_define
begin_define
DECL|macro|q_EVP_PKEY_assign_DSA
define|#
directive|define
name|q_EVP_PKEY_assign_DSA
parameter_list|(
name|pkey
parameter_list|,
name|dsa
parameter_list|)
value|q_EVP_PKEY_assign((pkey),EVP_PKEY_DSA,\                                         (char *)(dsa))
end_define
begin_define
DECL|macro|q_OpenSSL_add_all_algorithms
define|#
directive|define
name|q_OpenSSL_add_all_algorithms
parameter_list|()
value|q_OPENSSL_add_all_algorithms_conf()
end_define
begin_function_decl
name|void
name|q_OPENSSL_add_all_algorithms_noconf
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|void
name|q_OPENSSL_add_all_algorithms_conf
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|int
name|q_SSL_CTX_load_verify_locations
parameter_list|(
name|SSL_CTX
modifier|*
name|ctx
parameter_list|,
specifier|const
name|char
modifier|*
name|CAfile
parameter_list|,
specifier|const
name|char
modifier|*
name|CApath
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|long
name|q_SSLeay
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
specifier|const
name|char
modifier|*
name|q_SSLeay_version
parameter_list|(
name|int
name|type
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|q_i2d_SSL_SESSION
parameter_list|(
name|SSL_SESSION
modifier|*
name|in
parameter_list|,
name|unsigned
name|char
modifier|*
modifier|*
name|pp
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|SSL_SESSION
modifier|*
name|q_d2i_SSL_SESSION
parameter_list|(
name|SSL_SESSION
modifier|*
modifier|*
name|a
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
modifier|*
name|pp
parameter_list|,
name|long
name|length
parameter_list|)
function_decl|;
end_function_decl
begin_if
if|#
directive|if
name|OPENSSL_VERSION_NUMBER
operator|>=
literal|0x1000100fL
operator|&&
operator|!
name|defined
argument_list|(
name|OPENSSL_NO_TLSEXT
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|OPENSSL_NO_NEXTPROTONEG
argument_list|)
end_if
begin_function_decl
name|int
name|q_SSL_select_next_proto
parameter_list|(
name|unsigned
name|char
modifier|*
modifier|*
name|out
parameter_list|,
name|unsigned
name|char
modifier|*
name|outlen
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|in
parameter_list|,
name|unsigned
name|int
name|inlen
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|client
parameter_list|,
name|unsigned
name|int
name|client_len
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|q_SSL_CTX_set_next_proto_select_cb
parameter_list|(
name|SSL_CTX
modifier|*
name|s
parameter_list|,
name|int
function_decl|(
modifier|*
name|cb
function_decl|)
parameter_list|(
name|SSL
modifier|*
name|ssl
parameter_list|,
name|unsigned
name|char
modifier|*
modifier|*
name|out
parameter_list|,
name|unsigned
name|char
modifier|*
name|outlen
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|in
parameter_list|,
name|unsigned
name|int
name|inlen
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|q_SSL_get0_next_proto_negotiated
parameter_list|(
specifier|const
name|SSL
modifier|*
name|s
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
modifier|*
name|data
parameter_list|,
name|unsigned
modifier|*
name|len
parameter_list|)
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// OPENSSL_VERSION_NUMBER>= 0x1000100fL ...
end_comment
begin_comment
comment|// Helper function
end_comment
begin_decl_stmt
DECL|variable|QDateTime
name|class
name|QDateTime
decl_stmt|;
end_decl_stmt
begin_function_decl
name|QDateTime
name|q_getTimeFromASN1
parameter_list|(
specifier|const
name|ASN1_TIME
modifier|*
name|aTime
parameter_list|)
function_decl|;
end_function_decl
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
end_unit
