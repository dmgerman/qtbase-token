begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Jeremy LainÃ©<jeremy.laine@m4x.org> ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtNetwork module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qsslsocket.h"
end_include
begin_include
include|#
directive|include
file|"qsslsocket_mac_p.h"
end_include
begin_include
include|#
directive|include
file|"qasn1element_p.h"
end_include
begin_include
include|#
directive|include
file|"qsslcertificate_p.h"
end_include
begin_include
include|#
directive|include
file|"qsslcipher_p.h"
end_include
begin_include
include|#
directive|include
file|"qsslkey_p.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/qmessageauthenticationcode.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qcryptographichash.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qdatastream.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qsysinfo.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qvector.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qmutex.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qdebug.h>
end_include
begin_include
include|#
directive|include
file|<algorithm>
end_include
begin_include
include|#
directive|include
file|<cstddef>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
name|Q_GLOBAL_STATIC_WITH_ARGS
argument_list|(
name|QMutex
argument_list|,
name|qt_securetransport_mutex
argument_list|,
operator|(
name|QMutex
operator|::
name|Recursive
operator|)
argument_list|)
comment|//#define QSSLSOCKET_DEBUG
DECL|member|s_libraryLoaded
name|bool
name|QSslSocketPrivate
operator|::
name|s_libraryLoaded
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|s_loadedCiphersAndCerts
name|bool
name|QSslSocketPrivate
operator|::
name|s_loadedCiphersAndCerts
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|s_loadRootCertsOnDemand
name|bool
name|QSslSocketPrivate
operator|::
name|s_loadRootCertsOnDemand
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|Q_OS_IOS
end_ifndef
begin_comment
comment|// dhparam is not used on iOS. (see the SSLSetDiffieHellmanParams call below)
end_comment
begin_decl_stmt
DECL|variable|dhparam
specifier|static
specifier|const
name|uint8_t
name|dhparam
index|[]
init|=
literal|"\x30\x82\x01\x08\x02\x82\x01\x01\x00\x97\xea\xd0\x46\xf7\xae\xa7\x76\x80"
literal|"\x9c\x74\x56\x98\xd8\x56\x97\x2b\x20\x6c\x77\xe2\x82\xbb\xc8\x84\xbe\xe7"
literal|"\x63\xaf\xcc\x30\xd0\x67\x97\x7d\x1b\xab\x59\x30\xa9\x13\x67\x21\xd7\xd4"
literal|"\x0e\x46\xcf\xe5\x80\xdf\xc9\xb9\xba\x54\x9b\x46\x2f\x3b\x45\xfc\x2f\xaf"
literal|"\xad\xc0\x17\x56\xdd\x52\x42\x57\x45\x70\x14\xe5\xbe\x67\xaa\xde\x69\x75"
literal|"\x30\x0d\xf9\xa2\xc4\x63\x4d\x7a\x39\xef\x14\x62\x18\x33\x44\xa1\xf9\xc1"
literal|"\x52\xd1\xb6\x72\x21\x98\xf8\xab\x16\x1b\x7b\x37\x65\xe3\xc5\x11\x00\xf6"
literal|"\x36\x1f\xd8\x5f\xd8\x9f\x43\xa8\xce\x9d\xbf\x5e\xd6\x2d\xfa\x0a\xc2\x01"
literal|"\x54\xc2\xd9\x81\x54\x55\xb5\x26\xf8\x88\x37\xf5\xfe\xe0\xef\x4a\x34\x81"
literal|"\xdc\x5a\xb3\x71\x46\x27\xe3\xcd\x24\xf6\x1b\xf1\xe2\x0f\xc2\xa1\x39\x53"
literal|"\x5b\xc5\x38\x46\x8e\x67\x4c\xd9\xdd\xe4\x37\x06\x03\x16\xf1\x1d\x7a\xba"
literal|"\x2d\xc1\xe4\x03\x1a\x58\xe5\x29\x5a\x29\x06\x69\x61\x7a\xd8\xa9\x05\x9f"
literal|"\xc1\xa2\x45\x9c\x17\xad\x52\x69\x33\xdc\x18\x8d\x15\xa6\x5e\xcd\x94\xf4"
literal|"\x45\xbb\x9f\xc2\x7b\x85\x00\x61\xb0\x1a\xdc\x3c\x86\xaa\x9f\x5c\x04\xb3"
literal|"\x90\x0b\x35\x64\xff\xd9\xe3\xac\xf2\xf2\xeb\x3a\x63\x02\x01\x02"
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// No ioErr on iOS. (defined in MacErrors.h on OS X)
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_IOS
end_ifdef
begin_define
DECL|macro|ioErr
define|#
directive|define
name|ioErr
value|-36
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|_q_SSLRead
specifier|static
name|OSStatus
name|_q_SSLRead
parameter_list|(
name|QTcpSocket
modifier|*
name|plainSocket
parameter_list|,
name|char
modifier|*
name|data
parameter_list|,
name|size_t
modifier|*
name|dataLength
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|plainSocket
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|dataLength
argument_list|)
expr_stmt|;
specifier|const
name|qint64
name|bytes
init|=
name|plainSocket
operator|->
name|read
argument_list|(
name|data
argument_list|,
operator|*
name|dataLength
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|QSSLSOCKET_DEBUG
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
name|plainSocket
operator|<<
literal|"read"
operator|<<
name|bytes
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|bytes
operator|<
literal|0
condition|)
block|{
operator|*
name|dataLength
operator|=
literal|0
expr_stmt|;
return|return
name|ioErr
return|;
block|}
specifier|const
name|OSStatus
name|err
init|=
operator|(
name|size_t
argument_list|(
name|bytes
argument_list|)
operator|<
operator|*
name|dataLength
operator|)
condition|?
name|errSSLWouldBlock
else|:
name|noErr
decl_stmt|;
operator|*
name|dataLength
operator|=
name|bytes
expr_stmt|;
return|return
name|err
return|;
block|}
end_function
begin_function
DECL|function|_q_SSLWrite
specifier|static
name|OSStatus
name|_q_SSLWrite
parameter_list|(
name|QTcpSocket
modifier|*
name|plainSocket
parameter_list|,
specifier|const
name|char
modifier|*
name|data
parameter_list|,
name|size_t
modifier|*
name|dataLength
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|plainSocket
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|dataLength
argument_list|)
expr_stmt|;
specifier|const
name|qint64
name|bytes
init|=
name|plainSocket
operator|->
name|write
argument_list|(
name|data
argument_list|,
operator|*
name|dataLength
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|QSSLSOCKET_DEBUG
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
name|plainSocket
operator|<<
literal|"write"
operator|<<
name|bytes
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|bytes
operator|<
literal|0
condition|)
block|{
operator|*
name|dataLength
operator|=
literal|0
expr_stmt|;
return|return
name|ioErr
return|;
block|}
specifier|const
name|OSStatus
name|err
init|=
operator|(
name|size_t
argument_list|(
name|bytes
argument_list|)
operator|<
operator|*
name|dataLength
operator|)
condition|?
name|errSSLWouldBlock
else|:
name|noErr
decl_stmt|;
operator|*
name|dataLength
operator|=
name|bytes
expr_stmt|;
return|return
name|err
return|;
block|}
end_function
begin_function
DECL|function|ensureInitialized
name|void
name|QSslSocketPrivate
operator|::
name|ensureInitialized
parameter_list|()
block|{
specifier|const
name|QMutexLocker
name|locker
argument_list|(
name|qt_securetransport_mutex
argument_list|)
decl_stmt|;
if|if
condition|(
name|s_loadedCiphersAndCerts
condition|)
return|return;
comment|// We have to set it before setDefaultSupportedCiphers,
comment|// since this function can trigger static (global)'s initialization
comment|// and as a result - recursive ensureInitialized call
comment|// from QSslCertificatePrivate's ctor.
name|s_loadedCiphersAndCerts
operator|=
literal|true
expr_stmt|;
name|QCFType
argument_list|<
name|SSLContextRef
argument_list|>
name|context
argument_list|(
name|SSLCreateContext
argument_list|(
name|Q_NULLPTR
argument_list|,
name|kSSLClientSide
argument_list|,
name|kSSLStreamType
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
name|QList
argument_list|<
name|QSslCipher
argument_list|>
name|ciphers
decl_stmt|;
name|QList
argument_list|<
name|QSslCipher
argument_list|>
name|defaultCiphers
decl_stmt|;
name|size_t
name|numCiphers
init|=
literal|0
decl_stmt|;
comment|// Fails only if any of parameters is null.
name|SSLGetNumberSupportedCiphers
argument_list|(
name|context
argument_list|,
operator|&
name|numCiphers
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|SSLCipherSuite
argument_list|>
name|cfCiphers
argument_list|(
name|numCiphers
argument_list|)
decl_stmt|;
comment|// Fails only if any of parameter is null or number of ciphers is wrong.
name|SSLGetSupportedCiphers
argument_list|(
name|context
argument_list|,
name|cfCiphers
operator|.
name|data
argument_list|()
argument_list|,
operator|&
name|numCiphers
argument_list|)
expr_stmt|;
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size_t
argument_list|(
name|cfCiphers
operator|.
name|size
argument_list|()
argument_list|)
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QSslCipher
name|ciph
argument_list|(
name|QSslSocketBackendPrivate
operator|::
name|QSslCipher_from_SSLCipherSuite
argument_list|(
name|cfCiphers
index|[
name|i
index|]
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ciph
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|ciphers
operator|<<
name|ciph
expr_stmt|;
if|if
condition|(
name|ciph
operator|.
name|usedBits
argument_list|()
operator|>=
literal|128
condition|)
name|defaultCiphers
operator|<<
name|ciph
expr_stmt|;
block|}
block|}
name|setDefaultSupportedCiphers
argument_list|(
name|ciphers
argument_list|)
expr_stmt|;
name|setDefaultCiphers
argument_list|(
name|defaultCiphers
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|s_loadRootCertsOnDemand
condition|)
name|setDefaultCaCertificates
argument_list|(
name|systemCaCertificates
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"SSLCreateContext failed"
expr_stmt|;
name|s_loadedCiphersAndCerts
operator|=
literal|false
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|sslLibraryVersionNumber
name|long
name|QSslSocketPrivate
operator|::
name|sslLibraryVersionNumber
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|sslLibraryVersionString
name|QString
name|QSslSocketPrivate
operator|::
name|sslLibraryVersionString
parameter_list|()
block|{
return|return
name|QStringLiteral
argument_list|(
literal|"Secure Transport, "
argument_list|)
operator|+
name|QSysInfo
operator|::
name|prettyProductName
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|sslLibraryBuildVersionNumber
name|long
name|QSslSocketPrivate
operator|::
name|sslLibraryBuildVersionNumber
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|sslLibraryBuildVersionString
name|QString
name|QSslSocketPrivate
operator|::
name|sslLibraryBuildVersionString
parameter_list|()
block|{
return|return
name|sslLibraryVersionString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|supportsSsl
name|bool
name|QSslSocketPrivate
operator|::
name|supportsSsl
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|resetDefaultCiphers
name|void
name|QSslSocketPrivate
operator|::
name|resetDefaultCiphers
parameter_list|()
block|{
name|Q_UNIMPLEMENTED
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|resetDefaultEllipticCurves
name|void
name|QSslSocketPrivate
operator|::
name|resetDefaultEllipticCurves
parameter_list|()
block|{
comment|// No public API for this (?).
name|Q_UNIMPLEMENTED
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|systemCaCertificates
name|QList
argument_list|<
name|QSslCertificate
argument_list|>
name|QSslSocketPrivate
operator|::
name|systemCaCertificates
parameter_list|()
block|{
name|QList
argument_list|<
name|QSslCertificate
argument_list|>
name|systemCerts
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_OSX
comment|// SecTrustSettingsCopyCertificates is not defined on iOS.
name|QCFType
argument_list|<
name|CFArrayRef
argument_list|>
name|cfCerts
decl_stmt|;
name|OSStatus
name|status
init|=
name|SecTrustSettingsCopyCertificates
argument_list|(
name|kSecTrustSettingsDomainSystem
argument_list|,
operator|&
name|cfCerts
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|==
name|noErr
condition|)
block|{
specifier|const
name|CFIndex
name|size
init|=
name|CFArrayGetCount
argument_list|(
name|cfCerts
argument_list|)
decl_stmt|;
for|for
control|(
name|CFIndex
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
operator|++
name|i
control|)
block|{
name|SecCertificateRef
name|cfCert
init|=
operator|(
name|SecCertificateRef
operator|)
name|CFArrayGetValueAtIndex
argument_list|(
name|cfCerts
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|QCFType
argument_list|<
name|CFDataRef
argument_list|>
name|derData
init|=
name|SecCertificateCopyData
argument_list|(
name|cfCert
argument_list|)
decl_stmt|;
name|systemCerts
operator|<<
name|QSslCertificate
argument_list|(
name|QByteArray
operator|::
name|fromCFData
argument_list|(
name|derData
argument_list|)
argument_list|,
name|QSsl
operator|::
name|Der
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// no detailed error handling here
name|qWarning
argument_list|(
literal|"could not retrieve system CA certificates"
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
return|return
name|systemCerts
return|;
block|}
end_function
begin_constructor
DECL|function|QSslSocketBackendPrivate
name|QSslSocketBackendPrivate
operator|::
name|QSslSocketBackendPrivate
parameter_list|()
member_init_list|:
name|context
argument_list|(
name|Q_NULLPTR
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QSslSocketBackendPrivate
name|QSslSocketBackendPrivate
operator|::
name|~
name|QSslSocketBackendPrivate
parameter_list|()
block|{
name|destroySslContext
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|continueHandshake
name|void
name|QSslSocketBackendPrivate
operator|::
name|continueHandshake
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|QSSLSOCKET_DEBUG
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
name|plainSocket
operator|<<
literal|"connection encrypted"
expr_stmt|;
endif|#
directive|endif
name|Q_Q
argument_list|(
name|QSslSocket
argument_list|)
expr_stmt|;
name|connectionEncrypted
operator|=
literal|true
expr_stmt|;
emit|emit
name|q
operator|->
name|encrypted
argument_list|()
emit|;
if|if
condition|(
name|autoStartHandshake
operator|&&
name|pendingClose
condition|)
block|{
name|pendingClose
operator|=
literal|false
expr_stmt|;
name|q
operator|->
name|disconnectFromHost
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|disconnected
name|void
name|QSslSocketBackendPrivate
operator|::
name|disconnected
parameter_list|()
block|{
if|if
condition|(
name|plainSocket
operator|->
name|bytesAvailable
argument_list|()
operator|<=
literal|0
condition|)
name|destroySslContext
argument_list|()
expr_stmt|;
comment|// If there is still buffered data in the plain socket, don't destroy the ssl context yet.
comment|// It will be destroyed when the socket is deleted.
block|}
end_function
begin_function
DECL|function|disconnectFromHost
name|void
name|QSslSocketBackendPrivate
operator|::
name|disconnectFromHost
parameter_list|()
block|{
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|shutdown
condition|)
block|{
name|SSLClose
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|shutdown
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|plainSocket
operator|->
name|disconnectFromHost
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sessionCipher
name|QSslCipher
name|QSslSocketBackendPrivate
operator|::
name|sessionCipher
parameter_list|()
specifier|const
block|{
name|SSLCipherSuite
name|cipher
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|context
operator|&&
name|SSLGetNegotiatedCipher
argument_list|(
name|context
argument_list|,
operator|&
name|cipher
argument_list|)
operator|==
name|noErr
condition|)
return|return
name|QSslCipher_from_SSLCipherSuite
argument_list|(
name|cipher
argument_list|)
return|;
return|return
name|QSslCipher
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|sessionProtocol
name|QSsl
operator|::
name|SslProtocol
name|QSslSocketBackendPrivate
operator|::
name|sessionProtocol
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|context
condition|)
return|return
name|QSsl
operator|::
name|UnknownProtocol
return|;
name|SSLProtocol
name|protocol
init|=
name|kSSLProtocolUnknown
decl_stmt|;
specifier|const
name|OSStatus
name|err
init|=
name|SSLGetNegotiatedProtocolVersion
argument_list|(
name|context
argument_list|,
operator|&
name|protocol
argument_list|)
decl_stmt|;
if|if
condition|(
name|err
operator|!=
name|noErr
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"SSLGetNegotiatedProtocolVersion failed:"
operator|<<
name|int
argument_list|(
name|err
argument_list|)
expr_stmt|;
return|return
name|QSsl
operator|::
name|UnknownProtocol
return|;
block|}
switch|switch
condition|(
name|protocol
condition|)
block|{
case|case
name|kSSLProtocol2
case|:
return|return
name|QSsl
operator|::
name|SslV2
return|;
case|case
name|kSSLProtocol3
case|:
return|return
name|QSsl
operator|::
name|SslV3
return|;
case|case
name|kTLSProtocol1
case|:
return|return
name|QSsl
operator|::
name|TlsV1_0
return|;
case|case
name|kTLSProtocol11
case|:
return|return
name|QSsl
operator|::
name|TlsV1_1
return|;
case|case
name|kTLSProtocol12
case|:
return|return
name|QSsl
operator|::
name|TlsV1_2
return|;
default|default:
return|return
name|QSsl
operator|::
name|UnknownProtocol
return|;
block|}
block|}
end_function
begin_function
DECL|function|startClientEncryption
name|void
name|QSslSocketBackendPrivate
operator|::
name|startClientEncryption
parameter_list|()
block|{
if|if
condition|(
operator|!
name|initSslContext
argument_list|()
condition|)
block|{
comment|// Error description/code were set, 'error' emitted
comment|// by initSslContext, but OpenSSL socket also sets error
comment|// emits a signal twice, so ...
name|setError
argument_list|(
literal|"Unable to init SSL Context"
argument_list|,
name|QAbstractSocket
operator|::
name|SslInternalError
argument_list|)
expr_stmt|;
return|return;
block|}
name|startHandshake
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|startServerEncryption
name|void
name|QSslSocketBackendPrivate
operator|::
name|startServerEncryption
parameter_list|()
block|{
if|if
condition|(
operator|!
name|initSslContext
argument_list|()
condition|)
block|{
comment|// Error description/code were set, 'error' emitted
comment|// by initSslContext, but OpenSSL socket also sets error
comment|// emits a signal twice, so ...
name|setError
argument_list|(
literal|"Unable to init SSL Context"
argument_list|,
name|QAbstractSocket
operator|::
name|SslInternalError
argument_list|)
expr_stmt|;
return|return;
block|}
name|startHandshake
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|transmit
name|void
name|QSslSocketBackendPrivate
operator|::
name|transmit
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QSslSocket
argument_list|)
expr_stmt|;
comment|// If we don't have any SSL context, don't bother transmitting.
comment|// Edit: if SSL session closed, don't bother either.
if|if
condition|(
operator|!
name|context
operator|||
name|shutdown
condition|)
return|return;
if|if
condition|(
operator|!
name|connectionEncrypted
condition|)
name|startHandshake
argument_list|()
expr_stmt|;
if|if
condition|(
name|connectionEncrypted
operator|&&
operator|!
name|writeBuffer
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|qint64
name|totalBytesWritten
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|writeBuffer
operator|.
name|nextDataBlockSize
argument_list|()
operator|>
literal|0
condition|)
block|{
specifier|const
name|size_t
name|nextDataBlockSize
init|=
name|writeBuffer
operator|.
name|nextDataBlockSize
argument_list|()
decl_stmt|;
name|size_t
name|writtenBytes
init|=
literal|0
decl_stmt|;
specifier|const
name|OSStatus
name|err
init|=
name|SSLWrite
argument_list|(
name|context
argument_list|,
name|writeBuffer
operator|.
name|readPointer
argument_list|()
argument_list|,
name|nextDataBlockSize
argument_list|,
operator|&
name|writtenBytes
argument_list|)
decl_stmt|;
if|if
condition|(
name|err
operator|!=
name|noErr
operator|&&
name|err
operator|!=
name|errSSLWouldBlock
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"SSL write failed with error:"
operator|<<
name|int
argument_list|(
name|err
argument_list|)
expr_stmt|;
name|setError
argument_list|(
literal|"SSL write failed"
argument_list|,
name|QAbstractSocket
operator|::
name|SslInternalError
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|writtenBytes
condition|)
block|{
name|writeBuffer
operator|.
name|free
argument_list|(
name|writtenBytes
argument_list|)
expr_stmt|;
name|totalBytesWritten
operator|+=
name|writtenBytes
expr_stmt|;
block|}
if|if
condition|(
name|writtenBytes
operator|<
name|nextDataBlockSize
condition|)
break|break;
block|}
if|if
condition|(
name|totalBytesWritten
operator|>
literal|0
condition|)
block|{
comment|// Don't emit bytesWritten() recursively.
if|if
condition|(
operator|!
name|emittedBytesWritten
condition|)
block|{
name|emittedBytesWritten
operator|=
literal|true
expr_stmt|;
emit|emit
name|q
operator|->
name|bytesWritten
argument_list|(
name|totalBytesWritten
argument_list|)
emit|;
name|emittedBytesWritten
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|connectionEncrypted
condition|)
block|{
name|QVarLengthArray
argument_list|<
name|char
argument_list|,
literal|4096
argument_list|>
name|data
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|size_t
name|readBytes
init|=
literal|0
decl_stmt|;
name|data
operator|.
name|resize
argument_list|(
literal|4096
argument_list|)
expr_stmt|;
specifier|const
name|OSStatus
name|err
init|=
name|SSLRead
argument_list|(
name|context
argument_list|,
name|data
operator|.
name|data
argument_list|()
argument_list|,
name|data
operator|.
name|size
argument_list|()
argument_list|,
operator|&
name|readBytes
argument_list|)
decl_stmt|;
if|if
condition|(
name|err
operator|==
name|errSSLClosedGraceful
condition|)
block|{
name|shutdown
operator|=
literal|true
expr_stmt|;
comment|// the other side shut down, make sure we do not send shutdown ourselves
name|setError
argument_list|(
name|QSslSocket
operator|::
name|tr
argument_list|(
literal|"The TLS/SSL connection has been closed"
argument_list|)
argument_list|,
name|QAbstractSocket
operator|::
name|RemoteHostClosedError
argument_list|)
expr_stmt|;
break|break;
block|}
elseif|else
if|if
condition|(
name|err
operator|!=
name|noErr
operator|&&
name|err
operator|!=
name|errSSLWouldBlock
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"SSLRead failed with:"
operator|<<
name|int
argument_list|(
name|err
argument_list|)
expr_stmt|;
name|setError
argument_list|(
literal|"SSL read failed"
argument_list|,
name|QAbstractSocket
operator|::
name|SslInternalError
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|readBytes
condition|)
block|{
name|char
modifier|*
specifier|const
name|ptr
init|=
name|buffer
operator|.
name|reserve
argument_list|(
name|readBytes
argument_list|)
decl_stmt|;
name|std
operator|::
name|copy
argument_list|(
name|data
operator|.
name|data
argument_list|()
argument_list|,
name|data
operator|.
name|data
argument_list|()
operator|+
name|readBytes
argument_list|,
name|ptr
argument_list|)
expr_stmt|;
if|if
condition|(
name|readyReadEmittedPointer
condition|)
operator|*
name|readyReadEmittedPointer
operator|=
literal|true
expr_stmt|;
emit|emit
name|q
operator|->
name|readyRead
argument_list|()
emit|;
block|}
if|if
condition|(
name|err
operator|==
name|errSSLWouldBlock
condition|)
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|verify
name|QList
argument_list|<
name|QSslError
argument_list|>
function|(
name|QSslSocketBackendPrivate
operator|::
name|verify
function|)
parameter_list|(
name|QList
argument_list|<
name|QSslCertificate
argument_list|>
name|certificateChain
parameter_list|,
specifier|const
name|QString
modifier|&
name|hostName
parameter_list|)
block|{
name|Q_UNIMPLEMENTED
argument_list|()
expr_stmt|;
name|Q_UNUSED
argument_list|(
argument|certificateChain
argument_list|)
name|Q_UNUSED
argument_list|(
argument|hostName
argument_list|)
name|QList
argument_list|<
name|QSslError
argument_list|>
name|errors
decl_stmt|;
name|errors
operator|<<
name|QSslError
argument_list|(
name|QSslError
operator|::
name|UnspecifiedError
argument_list|)
expr_stmt|;
return|return
name|errors
return|;
block|}
end_function
begin_function
DECL|function|importPkcs12
name|bool
name|QSslSocketBackendPrivate
operator|::
name|importPkcs12
parameter_list|(
name|QIODevice
modifier|*
name|device
parameter_list|,
name|QSslKey
modifier|*
name|key
parameter_list|,
name|QSslCertificate
modifier|*
name|cert
parameter_list|,
name|QList
argument_list|<
name|QSslCertificate
argument_list|>
modifier|*
name|caCertificates
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|passPhrase
parameter_list|)
block|{
name|Q_UNIMPLEMENTED
argument_list|()
expr_stmt|;
name|Q_UNUSED
argument_list|(
argument|device
argument_list|)
name|Q_UNUSED
argument_list|(
argument|key
argument_list|)
name|Q_UNUSED
argument_list|(
argument|cert
argument_list|)
name|Q_UNUSED
argument_list|(
argument|caCertificates
argument_list|)
name|Q_UNUSED
argument_list|(
argument|passPhrase
argument_list|)
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|QSslCipher_from_SSLCipherSuite
name|QSslCipher
name|QSslSocketBackendPrivate
operator|::
name|QSslCipher_from_SSLCipherSuite
parameter_list|(
name|SSLCipherSuite
name|cipher
parameter_list|)
block|{
name|QSslCipher
name|ciph
decl_stmt|;
switch|switch
condition|(
name|cipher
condition|)
block|{
case|case
name|SSL_RSA_WITH_NULL_MD5
case|:
name|ciph
operator|.
name|d
operator|->
name|name
operator|=
name|QLatin1String
argument_list|(
literal|"NULL-MD5"
argument_list|)
expr_stmt|;
name|ciph
operator|.
name|d
operator|->
name|protocol
operator|=
name|QSsl
operator|::
name|SslV3
expr_stmt|;
break|break;
case|case
name|SSL_RSA_WITH_NULL_SHA
case|:
name|ciph
operator|.
name|d
operator|->
name|name
operator|=
name|QLatin1String
argument_list|(
literal|"NULL-SHA"
argument_list|)
expr_stmt|;
name|ciph
operator|.
name|d
operator|->
name|protocol
operator|=
name|QSsl
operator|::
name|SslV3
expr_stmt|;
break|break;
case|case
name|SSL_RSA_WITH_RC4_128_MD5
case|:
name|ciph
operator|.
name|d
operator|->
name|name
operator|=
name|QLatin1String
argument_list|(
literal|"RC4-MD5"
argument_list|)
expr_stmt|;
name|ciph
operator|.
name|d
operator|->
name|protocol
operator|=
name|QSsl
operator|::
name|SslV3
expr_stmt|;
break|break;
case|case
name|SSL_RSA_WITH_RC4_128_SHA
case|:
name|ciph
operator|.
name|d
operator|->
name|name
operator|=
name|QLatin1String
argument_list|(
literal|"RC4-SHA"
argument_list|)
expr_stmt|;
name|ciph
operator|.
name|d
operator|->
name|protocol
operator|=
name|QSsl
operator|::
name|SslV3
expr_stmt|;
break|break;
case|case
name|TLS_RSA_WITH_3DES_EDE_CBC_SHA
case|:
name|ciph
operator|.
name|d
operator|->
name|name
operator|=
name|QLatin1String
argument_list|(
literal|"DES-CBC3-SHA"
argument_list|)
expr_stmt|;
break|break;
case|case
name|TLS_RSA_WITH_AES_128_CBC_SHA
case|:
name|ciph
operator|.
name|d
operator|->
name|name
operator|=
name|QLatin1String
argument_list|(
literal|"AES128-SHA"
argument_list|)
expr_stmt|;
break|break;
case|case
name|TLS_RSA_WITH_AES_128_CBC_SHA256
case|:
name|ciph
operator|.
name|d
operator|->
name|name
operator|=
name|QLatin1String
argument_list|(
literal|"AES128-SHA256"
argument_list|)
expr_stmt|;
break|break;
case|case
name|TLS_RSA_WITH_AES_256_CBC_SHA
case|:
name|ciph
operator|.
name|d
operator|->
name|name
operator|=
name|QLatin1String
argument_list|(
literal|"AES256-SHA"
argument_list|)
expr_stmt|;
break|break;
case|case
name|TLS_RSA_WITH_AES_256_CBC_SHA256
case|:
name|ciph
operator|.
name|d
operator|->
name|name
operator|=
name|QLatin1String
argument_list|(
literal|"AES256-SHA256"
argument_list|)
expr_stmt|;
break|break;
case|case
name|TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA
case|:
name|ciph
operator|.
name|d
operator|->
name|name
operator|=
name|QLatin1String
argument_list|(
literal|"DHE-RSA-DES-CBC3-SHA"
argument_list|)
expr_stmt|;
break|break;
case|case
name|TLS_DHE_RSA_WITH_AES_128_CBC_SHA
case|:
name|ciph
operator|.
name|d
operator|->
name|name
operator|=
name|QLatin1String
argument_list|(
literal|"DHE-RSA-AES128-SHA"
argument_list|)
expr_stmt|;
break|break;
case|case
name|TLS_DHE_RSA_WITH_AES_128_CBC_SHA256
case|:
name|ciph
operator|.
name|d
operator|->
name|name
operator|=
name|QLatin1String
argument_list|(
literal|"DHE-RSA-AES128-SHA256"
argument_list|)
expr_stmt|;
break|break;
case|case
name|TLS_DHE_RSA_WITH_AES_256_CBC_SHA
case|:
name|ciph
operator|.
name|d
operator|->
name|name
operator|=
name|QLatin1String
argument_list|(
literal|"DHE-RSA-AES256-SHA"
argument_list|)
expr_stmt|;
break|break;
case|case
name|TLS_DHE_RSA_WITH_AES_256_CBC_SHA256
case|:
name|ciph
operator|.
name|d
operator|->
name|name
operator|=
name|QLatin1String
argument_list|(
literal|"DHE-RSA-AES256-SHA256"
argument_list|)
expr_stmt|;
break|break;
case|case
name|TLS_ECDH_ECDSA_WITH_NULL_SHA
case|:
name|ciph
operator|.
name|d
operator|->
name|name
operator|=
name|QLatin1String
argument_list|(
literal|"ECDH-ECDSA-NULL-SHA"
argument_list|)
expr_stmt|;
break|break;
case|case
name|TLS_ECDH_ECDSA_WITH_RC4_128_SHA
case|:
name|ciph
operator|.
name|d
operator|->
name|name
operator|=
name|QLatin1String
argument_list|(
literal|"ECDH-ECDSA-RC4-SHA"
argument_list|)
expr_stmt|;
break|break;
case|case
name|TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA
case|:
name|ciph
operator|.
name|d
operator|->
name|name
operator|=
name|QLatin1String
argument_list|(
literal|"ECDH-ECDSA-DES-CBC3-SHA"
argument_list|)
expr_stmt|;
break|break;
case|case
name|TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA
case|:
name|ciph
operator|.
name|d
operator|->
name|name
operator|=
name|QLatin1String
argument_list|(
literal|"ECDH-ECDSA-AES128-SHA"
argument_list|)
expr_stmt|;
break|break;
case|case
name|TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256
case|:
name|ciph
operator|.
name|d
operator|->
name|name
operator|=
name|QLatin1String
argument_list|(
literal|"ECDH-ECDSA-AES128-SHA256"
argument_list|)
expr_stmt|;
break|break;
case|case
name|TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA
case|:
name|ciph
operator|.
name|d
operator|->
name|name
operator|=
name|QLatin1String
argument_list|(
literal|"ECDH-ECDSA-AES256-SHA"
argument_list|)
expr_stmt|;
break|break;
case|case
name|TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384
case|:
name|ciph
operator|.
name|d
operator|->
name|name
operator|=
name|QLatin1String
argument_list|(
literal|"ECDH-ECDSA-AES256-SHA384"
argument_list|)
expr_stmt|;
break|break;
case|case
name|TLS_ECDH_RSA_WITH_NULL_SHA
case|:
name|ciph
operator|.
name|d
operator|->
name|name
operator|=
name|QLatin1String
argument_list|(
literal|"ECDH-RSA-NULL-SHA"
argument_list|)
expr_stmt|;
break|break;
case|case
name|TLS_ECDH_RSA_WITH_RC4_128_SHA
case|:
name|ciph
operator|.
name|d
operator|->
name|name
operator|=
name|QLatin1String
argument_list|(
literal|"ECDH-RSA-AES256-SHA"
argument_list|)
expr_stmt|;
break|break;
case|case
name|TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA
case|:
name|ciph
operator|.
name|d
operator|->
name|name
operator|=
name|QLatin1String
argument_list|(
literal|"ECDH-RSA-DES-CBC3-SHA"
argument_list|)
expr_stmt|;
break|break;
case|case
name|TLS_ECDH_RSA_WITH_AES_128_CBC_SHA
case|:
name|ciph
operator|.
name|d
operator|->
name|name
operator|=
name|QLatin1String
argument_list|(
literal|"ECDH-RSA-AES128-SHA"
argument_list|)
expr_stmt|;
break|break;
case|case
name|TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256
case|:
name|ciph
operator|.
name|d
operator|->
name|name
operator|=
name|QLatin1String
argument_list|(
literal|"ECDH-RSA-AES128-SHA256"
argument_list|)
expr_stmt|;
break|break;
case|case
name|TLS_ECDH_RSA_WITH_AES_256_CBC_SHA
case|:
name|ciph
operator|.
name|d
operator|->
name|name
operator|=
name|QLatin1String
argument_list|(
literal|"ECDH-RSA-AES256-SHA"
argument_list|)
expr_stmt|;
break|break;
case|case
name|TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384
case|:
name|ciph
operator|.
name|d
operator|->
name|name
operator|=
name|QLatin1String
argument_list|(
literal|"ECDH-RSA-AES256-SHA384"
argument_list|)
expr_stmt|;
break|break;
case|case
name|TLS_ECDHE_ECDSA_WITH_NULL_SHA
case|:
name|ciph
operator|.
name|d
operator|->
name|name
operator|=
name|QLatin1String
argument_list|(
literal|"ECDHE-ECDSA-NULL-SHA"
argument_list|)
expr_stmt|;
break|break;
case|case
name|TLS_ECDHE_ECDSA_WITH_RC4_128_SHA
case|:
name|ciph
operator|.
name|d
operator|->
name|name
operator|=
name|QLatin1String
argument_list|(
literal|"ECDHE-ECDSA-RC4-SHA"
argument_list|)
expr_stmt|;
break|break;
case|case
name|TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA
case|:
name|ciph
operator|.
name|d
operator|->
name|name
operator|=
name|QLatin1String
argument_list|(
literal|"ECDHE-ECDSA-DES-CBC3-SHA"
argument_list|)
expr_stmt|;
break|break;
case|case
name|TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA
case|:
name|ciph
operator|.
name|d
operator|->
name|name
operator|=
name|QLatin1String
argument_list|(
literal|"ECDHE-ECDSA-AES128-SHA"
argument_list|)
expr_stmt|;
break|break;
case|case
name|TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256
case|:
name|ciph
operator|.
name|d
operator|->
name|name
operator|=
name|QLatin1String
argument_list|(
literal|"ECDHE-ECDSA-AES128-SHA256"
argument_list|)
expr_stmt|;
break|break;
case|case
name|TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA
case|:
name|ciph
operator|.
name|d
operator|->
name|name
operator|=
name|QLatin1String
argument_list|(
literal|"ECDHE-ECDSA-AES256-SHA"
argument_list|)
expr_stmt|;
break|break;
case|case
name|TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384
case|:
name|ciph
operator|.
name|d
operator|->
name|name
operator|=
name|QLatin1String
argument_list|(
literal|"ECDHE-ECDSA-AES256-SHA384"
argument_list|)
expr_stmt|;
break|break;
case|case
name|TLS_ECDHE_RSA_WITH_NULL_SHA
case|:
name|ciph
operator|.
name|d
operator|->
name|name
operator|=
name|QLatin1String
argument_list|(
literal|"ECDHE-RSA-NULL-SHA"
argument_list|)
expr_stmt|;
break|break;
case|case
name|TLS_ECDHE_RSA_WITH_RC4_128_SHA
case|:
name|ciph
operator|.
name|d
operator|->
name|name
operator|=
name|QLatin1String
argument_list|(
literal|"ECDHE-RSA-AES256-SHA"
argument_list|)
expr_stmt|;
break|break;
case|case
name|TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA
case|:
name|ciph
operator|.
name|d
operator|->
name|name
operator|=
name|QLatin1String
argument_list|(
literal|"ECDHE-RSA-DES-CBC3-SHA"
argument_list|)
expr_stmt|;
break|break;
case|case
name|TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA
case|:
name|ciph
operator|.
name|d
operator|->
name|name
operator|=
name|QLatin1String
argument_list|(
literal|"ECDHE-RSA-AES128-SHA"
argument_list|)
expr_stmt|;
break|break;
case|case
name|TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256
case|:
name|ciph
operator|.
name|d
operator|->
name|name
operator|=
name|QLatin1String
argument_list|(
literal|"ECDHE-RSA-AES128-SHA256"
argument_list|)
expr_stmt|;
break|break;
case|case
name|TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA
case|:
name|ciph
operator|.
name|d
operator|->
name|name
operator|=
name|QLatin1String
argument_list|(
literal|"ECDHE-RSA-AES256-SHA"
argument_list|)
expr_stmt|;
break|break;
case|case
name|TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384
case|:
name|ciph
operator|.
name|d
operator|->
name|name
operator|=
name|QLatin1String
argument_list|(
literal|"ECDHE-RSA-AES256-SHA384"
argument_list|)
expr_stmt|;
break|break;
default|default:
return|return
name|ciph
return|;
block|}
name|ciph
operator|.
name|d
operator|->
name|isNull
operator|=
literal|false
expr_stmt|;
comment|// protocol
if|if
condition|(
name|ciph
operator|.
name|d
operator|->
name|protocol
operator|==
name|QSsl
operator|::
name|SslV3
condition|)
block|{
name|ciph
operator|.
name|d
operator|->
name|protocolString
operator|=
name|QLatin1String
argument_list|(
literal|"SSLv3"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ciph
operator|.
name|d
operator|->
name|protocol
operator|=
name|QSsl
operator|::
name|TlsV1_2
expr_stmt|;
name|ciph
operator|.
name|d
operator|->
name|protocolString
operator|=
name|QLatin1String
argument_list|(
literal|"TLSv1.2"
argument_list|)
expr_stmt|;
block|}
specifier|const
name|QStringList
name|bits
init|=
name|ciph
operator|.
name|d
operator|->
name|name
operator|.
name|split
argument_list|(
literal|'-'
argument_list|)
decl_stmt|;
if|if
condition|(
name|bits
operator|.
name|size
argument_list|()
operator|>=
literal|2
condition|)
block|{
if|if
condition|(
name|bits
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|||
name|bits
operator|.
name|size
argument_list|()
operator|==
literal|3
condition|)
block|{
name|ciph
operator|.
name|d
operator|->
name|keyExchangeMethod
operator|=
name|QLatin1String
argument_list|(
literal|"RSA"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ciph
operator|.
name|d
operator|->
name|name
operator|.
name|startsWith
argument_list|(
literal|"DH-"
argument_list|)
operator|||
name|ciph
operator|.
name|d
operator|->
name|name
operator|.
name|startsWith
argument_list|(
literal|"DHE-"
argument_list|)
condition|)
block|{
name|ciph
operator|.
name|d
operator|->
name|keyExchangeMethod
operator|=
name|QLatin1String
argument_list|(
literal|"DH"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ciph
operator|.
name|d
operator|->
name|name
operator|.
name|startsWith
argument_list|(
literal|"ECDH-"
argument_list|)
operator|||
name|ciph
operator|.
name|d
operator|->
name|name
operator|.
name|startsWith
argument_list|(
literal|"ECDHE-"
argument_list|)
condition|)
block|{
name|ciph
operator|.
name|d
operator|->
name|keyExchangeMethod
operator|=
name|QLatin1String
argument_list|(
literal|"ECDH"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"Unknown Kx"
operator|<<
name|ciph
operator|.
name|d
operator|->
name|name
expr_stmt|;
block|}
if|if
condition|(
name|bits
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|||
name|bits
operator|.
name|size
argument_list|()
operator|==
literal|3
condition|)
block|{
name|ciph
operator|.
name|d
operator|->
name|authenticationMethod
operator|=
name|QLatin1String
argument_list|(
literal|"RSA"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ciph
operator|.
name|d
operator|->
name|name
operator|.
name|contains
argument_list|(
literal|"-ECDSA-"
argument_list|)
condition|)
block|{
name|ciph
operator|.
name|d
operator|->
name|authenticationMethod
operator|=
name|QLatin1String
argument_list|(
literal|"ECDSA"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ciph
operator|.
name|d
operator|->
name|name
operator|.
name|contains
argument_list|(
literal|"-RSA-"
argument_list|)
condition|)
block|{
name|ciph
operator|.
name|d
operator|->
name|authenticationMethod
operator|=
name|QLatin1String
argument_list|(
literal|"RSA"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"Unknown Au"
operator|<<
name|ciph
operator|.
name|d
operator|->
name|name
expr_stmt|;
block|}
if|if
condition|(
name|ciph
operator|.
name|d
operator|->
name|name
operator|.
name|contains
argument_list|(
literal|"RC4-"
argument_list|)
condition|)
block|{
name|ciph
operator|.
name|d
operator|->
name|encryptionMethod
operator|=
name|QLatin1String
argument_list|(
literal|"RC4(128)"
argument_list|)
expr_stmt|;
name|ciph
operator|.
name|d
operator|->
name|bits
operator|=
literal|128
expr_stmt|;
name|ciph
operator|.
name|d
operator|->
name|supportedBits
operator|=
literal|128
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ciph
operator|.
name|d
operator|->
name|name
operator|.
name|contains
argument_list|(
literal|"DES-CBC3-"
argument_list|)
condition|)
block|{
name|ciph
operator|.
name|d
operator|->
name|encryptionMethod
operator|=
name|QLatin1String
argument_list|(
literal|"3DES(168)"
argument_list|)
expr_stmt|;
name|ciph
operator|.
name|d
operator|->
name|bits
operator|=
literal|168
expr_stmt|;
name|ciph
operator|.
name|d
operator|->
name|supportedBits
operator|=
literal|168
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ciph
operator|.
name|d
operator|->
name|name
operator|.
name|contains
argument_list|(
literal|"AES128-"
argument_list|)
condition|)
block|{
name|ciph
operator|.
name|d
operator|->
name|encryptionMethod
operator|=
name|QLatin1String
argument_list|(
literal|"AES(128)"
argument_list|)
expr_stmt|;
name|ciph
operator|.
name|d
operator|->
name|bits
operator|=
literal|128
expr_stmt|;
name|ciph
operator|.
name|d
operator|->
name|supportedBits
operator|=
literal|128
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ciph
operator|.
name|d
operator|->
name|name
operator|.
name|contains
argument_list|(
literal|"AES256-"
argument_list|)
condition|)
block|{
name|ciph
operator|.
name|d
operator|->
name|encryptionMethod
operator|=
name|QLatin1String
argument_list|(
literal|"AES(256)"
argument_list|)
expr_stmt|;
name|ciph
operator|.
name|d
operator|->
name|bits
operator|=
literal|256
expr_stmt|;
name|ciph
operator|.
name|d
operator|->
name|supportedBits
operator|=
literal|256
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ciph
operator|.
name|d
operator|->
name|name
operator|.
name|contains
argument_list|(
literal|"NULL-"
argument_list|)
condition|)
block|{
name|ciph
operator|.
name|d
operator|->
name|encryptionMethod
operator|=
name|QLatin1String
argument_list|(
literal|"NULL"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"Unknown Enc"
operator|<<
name|ciph
operator|.
name|d
operator|->
name|name
expr_stmt|;
block|}
block|}
return|return
name|ciph
return|;
block|}
end_function
begin_function
DECL|function|initSslContext
name|bool
name|QSslSocketBackendPrivate
operator|::
name|initSslContext
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QSslSocket
argument_list|)
expr_stmt|;
name|Q_ASSERT_X
argument_list|(
operator|!
name|context
argument_list|,
name|Q_FUNC_INFO
argument_list|,
literal|"invalid socket state, context is not null"
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|plainSocket
argument_list|)
expr_stmt|;
name|SSLProtocolSide
name|side
init|=
name|kSSLClientSide
decl_stmt|;
if|if
condition|(
name|mode
operator|==
name|QSslSocket
operator|::
name|SslServerMode
condition|)
name|side
operator|=
name|kSSLServerSide
expr_stmt|;
name|context
operator|=
name|SSLCreateContext
argument_list|(
name|Q_NULLPTR
argument_list|,
name|side
argument_list|,
name|kSSLStreamType
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|context
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"SSLCreateContext failed"
expr_stmt|;
name|setError
argument_list|(
literal|"SSLCreateContext failed"
argument_list|,
name|QAbstractSocket
operator|::
name|SslInternalError
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|const
name|OSStatus
name|err
init|=
name|SSLSetIOFuncs
argument_list|(
name|context
argument_list|,
cast|reinterpret_cast
argument_list|<
name|SSLReadFunc
argument_list|>
argument_list|(
operator|&
name|_q_SSLRead
argument_list|)
argument_list|,
cast|reinterpret_cast
argument_list|<
name|SSLWriteFunc
argument_list|>
argument_list|(
operator|&
name|_q_SSLWrite
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|err
operator|!=
name|noErr
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"SSLSetIOFuncs failed with error "
operator|<<
name|int
argument_list|(
name|err
argument_list|)
expr_stmt|;
name|destroySslContext
argument_list|()
expr_stmt|;
name|setError
argument_list|(
literal|"SSLSetIOFuncs failed"
argument_list|,
name|QAbstractSocket
operator|::
name|SslInternalError
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|SSLSetConnection
argument_list|(
name|context
argument_list|,
name|plainSocket
argument_list|)
expr_stmt|;
if|if
condition|(
name|mode
operator|==
name|QSslSocket
operator|::
name|SslServerMode
operator|&&
operator|!
name|configuration
operator|.
name|localCertificateChain
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QString
name|errorDescription
decl_stmt|;
name|QAbstractSocket
operator|::
name|SocketError
name|errorCode
init|=
name|QAbstractSocket
operator|::
name|UnknownSocketError
decl_stmt|;
if|if
condition|(
operator|!
name|setSessionCertificate
argument_list|(
name|errorDescription
argument_list|,
name|errorCode
argument_list|)
condition|)
block|{
name|destroySslContext
argument_list|()
expr_stmt|;
name|setError
argument_list|(
name|errorDescription
argument_list|,
name|errorCode
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
operator|!
name|setSessionProtocol
argument_list|()
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"failed to set protocol version"
expr_stmt|;
name|destroySslContext
argument_list|()
expr_stmt|;
name|setError
argument_list|(
literal|"Failed to set protocol version"
argument_list|,
name|QAbstractSocket
operator|::
name|SslInternalError
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
ifdef|#
directive|ifdef
name|Q_OS_OSX
if|if
condition|(
name|QSysInfo
operator|::
name|MacintoshVersion
operator|<
name|QSysInfo
operator|::
name|MV_10_8
condition|)
block|{
comment|// Starting from OS X 10.8 SSLSetSessionOption with kSSLSessionOptionBreakOnServerAuth/
comment|// kSSLSessionOptionBreakOnClientAuth disables automatic certificate validation.
comment|// But for OS X versions below 10.8 we have to do it explicitly:
specifier|const
name|OSStatus
name|err
init|=
name|SSLSetEnableCertVerify
argument_list|(
name|context
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|err
operator|!=
name|noErr
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"SSLSetEnableCertVerify failed:"
operator|<<
name|int
argument_list|(
name|err
argument_list|)
expr_stmt|;
name|destroySslContext
argument_list|()
expr_stmt|;
name|setError
argument_list|(
name|QStringLiteral
argument_list|(
literal|"SSLSetEnableCertVerify failed: %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|err
argument_list|)
argument_list|,
name|QSslSocket
operator|::
name|SslInternalError
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
endif|#
directive|endif
if|if
condition|(
name|mode
operator|==
name|QSslSocket
operator|::
name|SslClientMode
condition|)
block|{
comment|// enable Server Name Indication (SNI)
name|QString
name|tlsHostName
argument_list|(
name|verificationPeerName
operator|.
name|isEmpty
argument_list|()
condition|?
name|q
operator|->
name|peerName
argument_list|()
else|:
name|verificationPeerName
argument_list|)
decl_stmt|;
if|if
condition|(
name|tlsHostName
operator|.
name|isEmpty
argument_list|()
condition|)
name|tlsHostName
operator|=
name|hostName
expr_stmt|;
specifier|const
name|QByteArray
name|ace
argument_list|(
name|QUrl
operator|::
name|toAce
argument_list|(
name|tlsHostName
argument_list|)
argument_list|)
decl_stmt|;
name|SSLSetPeerDomainName
argument_list|(
name|context
argument_list|,
name|ace
operator|.
name|data
argument_list|()
argument_list|,
name|ace
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// tell SecureTransport we handle peer verification ourselves
name|OSStatus
name|err
init|=
name|SSLSetSessionOption
argument_list|(
name|context
argument_list|,
name|kSSLSessionOptionBreakOnServerAuth
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|err
operator|==
name|noErr
condition|)
name|err
operator|=
name|SSLSetSessionOption
argument_list|(
name|context
argument_list|,
name|kSSLSessionOptionBreakOnCertRequested
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|err
operator|!=
name|noErr
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"SSLSetSessionOption failed:"
operator|<<
name|int
argument_list|(
name|err
argument_list|)
expr_stmt|;
name|destroySslContext
argument_list|()
expr_stmt|;
name|setError
argument_list|(
name|QStringLiteral
argument_list|(
literal|"SSLSetSessionOption failed: %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|err
argument_list|)
argument_list|,
name|QSslSocket
operator|::
name|SslInternalError
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|//
block|}
else|else
block|{
if|if
condition|(
name|configuration
operator|.
name|peerVerifyMode
operator|!=
name|QSslSocket
operator|::
name|VerifyNone
condition|)
block|{
comment|// kAlwaysAuthenticate - always fails even if we set break on client auth.
name|OSStatus
name|err
init|=
name|SSLSetClientSideAuthenticate
argument_list|(
name|context
argument_list|,
name|kTryAuthenticate
argument_list|)
decl_stmt|;
if|if
condition|(
name|err
operator|==
name|noErr
condition|)
block|{
comment|// We'd like to verify peer ourselves, otherwise handshake will
comment|// most probably fail before we can do anything.
name|err
operator|=
name|SSLSetSessionOption
argument_list|(
name|context
argument_list|,
name|kSSLSessionOptionBreakOnClientAuth
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|err
operator|!=
name|noErr
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"failed to set SSL context option in server mode"
expr_stmt|;
name|destroySslContext
argument_list|()
expr_stmt|;
name|setError
argument_list|(
name|QStringLiteral
argument_list|(
literal|"failed to set SSL context option in server mode: %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|err
argument_list|)
argument_list|,
name|QAbstractSocket
operator|::
name|SslInternalError
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
ifndef|#
directive|ifndef
name|Q_OS_IOS
comment|// No SSLSetDiffieHellmanParams on iOS; calling it is optional according to docs.
name|SSLSetDiffieHellmanParams
argument_list|(
name|context
argument_list|,
name|dhparam
argument_list|,
sizeof|sizeof
argument_list|(
name|dhparam
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|destroySslContext
name|void
name|QSslSocketBackendPrivate
operator|::
name|destroySslContext
parameter_list|()
block|{
name|context
operator|=
name|Q_NULLPTR
expr_stmt|;
block|}
end_function
begin_function_decl
specifier|static
name|QByteArray
name|_q_makePkcs12
parameter_list|(
specifier|const
name|QList
argument_list|<
name|QSslCertificate
argument_list|>
modifier|&
name|certs
parameter_list|,
specifier|const
name|QSslKey
modifier|&
name|key
parameter_list|,
specifier|const
name|QString
modifier|&
name|passPhrase
parameter_list|)
function_decl|;
end_function_decl
begin_function
DECL|function|setSessionCertificate
name|bool
name|QSslSocketBackendPrivate
operator|::
name|setSessionCertificate
parameter_list|(
name|QString
modifier|&
name|errorDescription
parameter_list|,
name|QAbstractSocket
operator|::
name|SocketError
modifier|&
name|errorCode
parameter_list|)
block|{
name|Q_ASSERT_X
argument_list|(
name|context
argument_list|,
name|Q_FUNC_INFO
argument_list|,
literal|"invalid SSL context (null)"
argument_list|)
expr_stmt|;
name|QSslCertificate
name|localCertificate
decl_stmt|;
if|if
condition|(
operator|!
name|configuration
operator|.
name|localCertificateChain
operator|.
name|isEmpty
argument_list|()
condition|)
name|localCertificate
operator|=
name|configuration
operator|.
name|localCertificateChain
index|[
literal|0
index|]
expr_stmt|;
if|if
condition|(
operator|!
name|localCertificate
operator|.
name|isNull
argument_list|()
condition|)
block|{
comment|// Require a private key as well.
if|if
condition|(
name|configuration
operator|.
name|privateKey
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|errorCode
operator|=
name|QAbstractSocket
operator|::
name|SslInvalidUserDataError
expr_stmt|;
name|errorDescription
operator|=
name|QStringLiteral
argument_list|(
literal|"Cannot provide a certificate with no key"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// import certificates and key
specifier|const
name|QString
name|passPhrase
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"foobar"
argument_list|)
argument_list|)
decl_stmt|;
name|QCFType
argument_list|<
name|CFDataRef
argument_list|>
name|pkcs12
init|=
name|_q_makePkcs12
argument_list|(
name|configuration
operator|.
name|localCertificateChain
argument_list|,
name|configuration
operator|.
name|privateKey
argument_list|,
name|passPhrase
argument_list|)
operator|.
name|toCFData
argument_list|()
decl_stmt|;
name|QCFType
argument_list|<
name|CFStringRef
argument_list|>
name|password
init|=
name|passPhrase
operator|.
name|toCFString
argument_list|()
decl_stmt|;
specifier|const
name|void
modifier|*
name|keys
index|[]
init|=
block|{
name|kSecImportExportPassphrase
block|}
decl_stmt|;
specifier|const
name|void
modifier|*
name|values
index|[]
init|=
block|{
name|password
block|}
decl_stmt|;
name|QCFType
argument_list|<
name|CFDictionaryRef
argument_list|>
name|options
argument_list|(
name|CFDictionaryCreate
argument_list|(
name|Q_NULLPTR
argument_list|,
name|keys
argument_list|,
name|values
argument_list|,
literal|1
argument_list|,
name|Q_NULLPTR
argument_list|,
name|Q_NULLPTR
argument_list|)
argument_list|)
decl_stmt|;
name|CFArrayRef
name|items
init|=
name|Q_NULLPTR
decl_stmt|;
name|OSStatus
name|err
init|=
name|SecPKCS12Import
argument_list|(
name|pkcs12
argument_list|,
name|options
argument_list|,
operator|&
name|items
argument_list|)
decl_stmt|;
if|if
condition|(
name|err
operator|!=
name|noErr
condition|)
block|{
ifdef|#
directive|ifdef
name|QSSLSOCKET_DEBUG
name|qWarning
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
name|plainSocket
operator|<<
name|QStringLiteral
argument_list|(
literal|"SecPKCS12Import failed: %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|err
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|errorCode
operator|=
name|QAbstractSocket
operator|::
name|SslInvalidUserDataError
expr_stmt|;
name|errorDescription
operator|=
name|QStringLiteral
argument_list|(
literal|"SecPKCS12Import failed: %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|err
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|CFArrayGetCount
argument_list|(
name|items
argument_list|)
condition|)
block|{
ifdef|#
directive|ifdef
name|QSSLSOCKET_DEBUG
name|qWarning
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
name|plainSocket
operator|<<
literal|"SecPKCS12Import returned no items"
expr_stmt|;
endif|#
directive|endif
name|errorCode
operator|=
name|QAbstractSocket
operator|::
name|SslInvalidUserDataError
expr_stmt|;
name|errorDescription
operator|=
name|QStringLiteral
argument_list|(
literal|"SecPKCS12Import returned no items"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|CFDictionaryRef
name|import
init|=
operator|(
name|CFDictionaryRef
operator|)
name|CFArrayGetValueAtIndex
argument_list|(
name|items
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|SecIdentityRef
name|identity
init|=
operator|(
name|SecIdentityRef
operator|)
name|CFDictionaryGetValue
argument_list|(
name|import
argument_list|,
name|kSecImportItemIdentity
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|identity
condition|)
block|{
ifdef|#
directive|ifdef
name|QSSLSOCKET_DEBUG
name|qWarning
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
name|plainSocket
operator|<<
literal|"SecPKCS12Import returned no identity"
expr_stmt|;
endif|#
directive|endif
name|errorCode
operator|=
name|QAbstractSocket
operator|::
name|SslInvalidUserDataError
expr_stmt|;
name|errorDescription
operator|=
name|QStringLiteral
argument_list|(
literal|"SecPKCS12Import returned no identity"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|QCFType
argument_list|<
name|CFMutableArrayRef
argument_list|>
name|certs
init|=
name|CFArrayCreateMutable
argument_list|(
name|Q_NULLPTR
argument_list|,
literal|0
argument_list|,
operator|&
name|kCFTypeArrayCallBacks
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|certs
condition|)
block|{
name|errorCode
operator|=
name|QAbstractSocket
operator|::
name|SslInternalError
expr_stmt|;
name|errorDescription
operator|=
name|QStringLiteral
argument_list|(
literal|"Failed to allocate certificates array"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|CFArrayAppendValue
argument_list|(
name|certs
argument_list|,
name|identity
argument_list|)
expr_stmt|;
name|QCFType
argument_list|<
name|CFArrayRef
argument_list|>
name|chain
argument_list|(
operator|(
name|CFArrayRef
operator|)
name|CFDictionaryGetValue
argument_list|(
name|import
argument_list|,
name|kSecImportItemCertChain
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|chain
condition|)
block|{
for|for
control|(
name|CFIndex
name|i
init|=
literal|1
init|,
name|e
init|=
name|CFArrayGetCount
argument_list|(
name|chain
argument_list|)
init|;
name|i
operator|<
name|e
condition|;
operator|++
name|i
control|)
name|CFArrayAppendValue
argument_list|(
name|certs
argument_list|,
name|CFArrayGetValueAtIndex
argument_list|(
name|chain
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|err
operator|=
name|SSLSetCertificate
argument_list|(
name|context
argument_list|,
name|certs
argument_list|)
expr_stmt|;
if|if
condition|(
name|err
operator|!=
name|noErr
condition|)
block|{
ifdef|#
directive|ifdef
name|QSSLSOCKET_DEBUG
name|qWarning
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
name|plainSocket
operator|<<
name|QStringLiteral
argument_list|(
literal|"Cannot set certificate and key: %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|err
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|errorCode
operator|=
name|QAbstractSocket
operator|::
name|SslInvalidUserDataError
expr_stmt|;
name|errorDescription
operator|=
name|QStringLiteral
argument_list|(
literal|"Cannot set certificate and key: %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|err
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|setSessionProtocol
name|bool
name|QSslSocketBackendPrivate
operator|::
name|setSessionProtocol
parameter_list|()
block|{
name|Q_ASSERT_X
argument_list|(
name|context
argument_list|,
name|Q_FUNC_INFO
argument_list|,
literal|"invalid SSL context (null)"
argument_list|)
expr_stmt|;
name|OSStatus
name|err
init|=
name|noErr
decl_stmt|;
comment|// QSsl::SslV2 == kSSLProtocol2 is disabled in secure transport and
comment|// always fails with errSSLIllegalParam:
comment|// if (version< MINIMUM_STREAM_VERSION || version> MAXIMUM_STREAM_VERSION)
comment|//     return errSSLIllegalParam;
comment|// where MINIMUM_STREAM_VERSION is SSL_Version_3_0, MAXIMUM_STREAM_VERSION is TLS_Version_1_2.
if|if
condition|(
name|configuration
operator|.
name|protocol
operator|==
name|QSsl
operator|::
name|SslV2
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"protocol QSsl::SslV2 is disabled"
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|configuration
operator|.
name|protocol
operator|==
name|QSsl
operator|::
name|SslV3
condition|)
block|{
ifdef|#
directive|ifdef
name|QSSLSOCKET_DEBUG
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
name|plainSocket
operator|<<
literal|"requesting : SSLv3"
expr_stmt|;
endif|#
directive|endif
name|err
operator|=
name|SSLSetProtocolVersionMin
argument_list|(
name|context
argument_list|,
name|kSSLProtocol3
argument_list|)
expr_stmt|;
if|if
condition|(
name|err
operator|==
name|noErr
condition|)
name|err
operator|=
name|SSLSetProtocolVersionMax
argument_list|(
name|context
argument_list|,
name|kSSLProtocol3
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configuration
operator|.
name|protocol
operator|==
name|QSsl
operator|::
name|TlsV1_0
condition|)
block|{
ifdef|#
directive|ifdef
name|QSSLSOCKET_DEBUG
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
name|plainSocket
operator|<<
literal|"requesting : TLSv1.0"
expr_stmt|;
endif|#
directive|endif
name|err
operator|=
name|SSLSetProtocolVersionMin
argument_list|(
name|context
argument_list|,
name|kTLSProtocol1
argument_list|)
expr_stmt|;
if|if
condition|(
name|err
operator|==
name|noErr
condition|)
name|err
operator|=
name|SSLSetProtocolVersionMax
argument_list|(
name|context
argument_list|,
name|kTLSProtocol1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configuration
operator|.
name|protocol
operator|==
name|QSsl
operator|::
name|TlsV1_1
condition|)
block|{
ifdef|#
directive|ifdef
name|QSSLSOCKET_DEBUG
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
name|plainSocket
operator|<<
literal|"requesting : TLSv1.1"
expr_stmt|;
endif|#
directive|endif
name|err
operator|=
name|SSLSetProtocolVersionMin
argument_list|(
name|context
argument_list|,
name|kTLSProtocol11
argument_list|)
expr_stmt|;
if|if
condition|(
name|err
operator|==
name|noErr
condition|)
name|err
operator|=
name|SSLSetProtocolVersionMax
argument_list|(
name|context
argument_list|,
name|kTLSProtocol11
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configuration
operator|.
name|protocol
operator|==
name|QSsl
operator|::
name|TlsV1_2
condition|)
block|{
ifdef|#
directive|ifdef
name|QSSLSOCKET_DEBUG
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
name|plainSocket
operator|<<
literal|"requesting : TLSv1.2"
expr_stmt|;
endif|#
directive|endif
name|err
operator|=
name|SSLSetProtocolVersionMin
argument_list|(
name|context
argument_list|,
name|kTLSProtocol12
argument_list|)
expr_stmt|;
if|if
condition|(
name|err
operator|==
name|noErr
condition|)
name|err
operator|=
name|SSLSetProtocolVersionMax
argument_list|(
name|context
argument_list|,
name|kTLSProtocol12
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configuration
operator|.
name|protocol
operator|==
name|QSsl
operator|::
name|AnyProtocol
condition|)
block|{
ifdef|#
directive|ifdef
name|QSSLSOCKET_DEBUG
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
name|plainSocket
operator|<<
literal|"requesting : any"
expr_stmt|;
endif|#
directive|endif
comment|// kSSLProtocol3, since kSSLProtocol2 is disabled:
name|err
operator|=
name|SSLSetProtocolVersionMin
argument_list|(
name|context
argument_list|,
name|kSSLProtocol3
argument_list|)
expr_stmt|;
if|if
condition|(
name|err
operator|==
name|noErr
condition|)
name|err
operator|=
name|SSLSetProtocolVersionMax
argument_list|(
name|context
argument_list|,
name|kTLSProtocol12
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configuration
operator|.
name|protocol
operator|==
name|QSsl
operator|::
name|TlsV1SslV3
condition|)
block|{
ifdef|#
directive|ifdef
name|QSSLSOCKET_DEBUG
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
name|plainSocket
operator|<<
literal|"requesting : SSLv3 - TLSv1.2"
expr_stmt|;
endif|#
directive|endif
name|err
operator|=
name|SSLSetProtocolVersionMin
argument_list|(
name|context
argument_list|,
name|kSSLProtocol3
argument_list|)
expr_stmt|;
if|if
condition|(
name|err
operator|==
name|noErr
condition|)
name|err
operator|=
name|SSLSetProtocolVersionMax
argument_list|(
name|context
argument_list|,
name|kTLSProtocol12
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configuration
operator|.
name|protocol
operator|==
name|QSsl
operator|::
name|SecureProtocols
condition|)
block|{
ifdef|#
directive|ifdef
name|QSSLSOCKET_DEBUG
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
name|plainSocket
operator|<<
literal|"requesting : TLSv1 - TLSv1.2"
expr_stmt|;
endif|#
directive|endif
name|err
operator|=
name|SSLSetProtocolVersionMin
argument_list|(
name|context
argument_list|,
name|kTLSProtocol1
argument_list|)
expr_stmt|;
if|if
condition|(
name|err
operator|==
name|noErr
condition|)
name|err
operator|=
name|SSLSetProtocolVersionMax
argument_list|(
name|context
argument_list|,
name|kTLSProtocol12
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configuration
operator|.
name|protocol
operator|==
name|QSsl
operator|::
name|TlsV1_0OrLater
condition|)
block|{
ifdef|#
directive|ifdef
name|QSSLSOCKET_DEBUG
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
name|plainSocket
operator|<<
literal|"requesting : TLSv1 - TLSv1.2"
expr_stmt|;
endif|#
directive|endif
name|err
operator|=
name|SSLSetProtocolVersionMin
argument_list|(
name|context
argument_list|,
name|kTLSProtocol1
argument_list|)
expr_stmt|;
if|if
condition|(
name|err
operator|==
name|noErr
condition|)
name|err
operator|=
name|SSLSetProtocolVersionMax
argument_list|(
name|context
argument_list|,
name|kTLSProtocol12
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configuration
operator|.
name|protocol
operator|==
name|QSsl
operator|::
name|TlsV1_1OrLater
condition|)
block|{
ifdef|#
directive|ifdef
name|QSSLSOCKET_DEBUG
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
name|plainSocket
operator|<<
literal|"requesting : TLSv1.1 - TLSv1.2"
expr_stmt|;
endif|#
directive|endif
name|err
operator|=
name|SSLSetProtocolVersionMin
argument_list|(
name|context
argument_list|,
name|kTLSProtocol11
argument_list|)
expr_stmt|;
if|if
condition|(
name|err
operator|==
name|noErr
condition|)
name|err
operator|=
name|SSLSetProtocolVersionMax
argument_list|(
name|context
argument_list|,
name|kTLSProtocol12
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configuration
operator|.
name|protocol
operator|==
name|QSsl
operator|::
name|TlsV1_2OrLater
condition|)
block|{
ifdef|#
directive|ifdef
name|QSSLSOCKET_DEBUG
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
name|plainSocket
operator|<<
literal|"requesting : TLSv1.2"
expr_stmt|;
endif|#
directive|endif
name|err
operator|=
name|SSLSetProtocolVersionMin
argument_list|(
name|context
argument_list|,
name|kTLSProtocol12
argument_list|)
expr_stmt|;
if|if
condition|(
name|err
operator|==
name|noErr
condition|)
name|err
operator|=
name|SSLSetProtocolVersionMax
argument_list|(
name|context
argument_list|,
name|kTLSProtocol12
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"no protocol version found in the configuration"
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
name|err
operator|==
name|noErr
return|;
block|}
end_function
begin_function
DECL|function|canIgnoreTrustVerificationFailure
name|bool
name|QSslSocketBackendPrivate
operator|::
name|canIgnoreTrustVerificationFailure
parameter_list|()
specifier|const
block|{
specifier|const
name|QSslSocket
operator|::
name|PeerVerifyMode
name|verifyMode
init|=
name|configuration
operator|.
name|peerVerifyMode
decl_stmt|;
return|return
name|mode
operator|==
name|QSslSocket
operator|::
name|SslServerMode
operator|&&
operator|(
name|verifyMode
operator|==
name|QSslSocket
operator|::
name|QueryPeer
operator|||
name|verifyMode
operator|==
name|QSslSocket
operator|::
name|AutoVerifyPeer
operator|||
name|verifyMode
operator|==
name|QSslSocket
operator|::
name|VerifyNone
operator|)
return|;
block|}
end_function
begin_function
DECL|function|verifySessionProtocol
name|bool
name|QSslSocketBackendPrivate
operator|::
name|verifySessionProtocol
parameter_list|()
specifier|const
block|{
name|bool
name|protocolOk
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|configuration
operator|.
name|protocol
operator|==
name|QSsl
operator|::
name|AnyProtocol
condition|)
name|protocolOk
operator|=
literal|true
expr_stmt|;
elseif|else
if|if
condition|(
name|configuration
operator|.
name|protocol
operator|==
name|QSsl
operator|::
name|TlsV1SslV3
condition|)
name|protocolOk
operator|=
operator|(
name|sessionProtocol
argument_list|()
operator|>=
name|QSsl
operator|::
name|SslV3
operator|)
expr_stmt|;
elseif|else
if|if
condition|(
name|configuration
operator|.
name|protocol
operator|==
name|QSsl
operator|::
name|SecureProtocols
condition|)
name|protocolOk
operator|=
operator|(
name|sessionProtocol
argument_list|()
operator|>=
name|QSsl
operator|::
name|TlsV1_0
operator|)
expr_stmt|;
else|else
name|protocolOk
operator|=
operator|(
name|sessionProtocol
argument_list|()
operator|==
name|configuration
operator|.
name|protocol
operator|)
expr_stmt|;
return|return
name|protocolOk
return|;
block|}
end_function
begin_function
DECL|function|verifyPeerTrust
name|bool
name|QSslSocketBackendPrivate
operator|::
name|verifyPeerTrust
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QSslSocket
argument_list|)
expr_stmt|;
specifier|const
name|QSslSocket
operator|::
name|PeerVerifyMode
name|verifyMode
init|=
name|configuration
operator|.
name|peerVerifyMode
decl_stmt|;
specifier|const
name|bool
name|canIgnoreVerify
init|=
name|canIgnoreTrustVerificationFailure
argument_list|()
decl_stmt|;
name|Q_ASSERT_X
argument_list|(
name|context
argument_list|,
name|Q_FUNC_INFO
argument_list|,
literal|"invalid SSL context (null)"
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|plainSocket
argument_list|)
expr_stmt|;
name|QCFType
argument_list|<
name|SecTrustRef
argument_list|>
name|trust
decl_stmt|;
name|OSStatus
name|err
init|=
name|SSLCopyPeerTrust
argument_list|(
name|context
argument_list|,
operator|&
name|trust
argument_list|)
decl_stmt|;
comment|// !trust - SSLCopyPeerTrust can return noErr but null trust.
if|if
condition|(
name|err
operator|!=
name|noErr
operator|||
operator|!
name|trust
condition|)
block|{
if|if
condition|(
operator|!
name|canIgnoreVerify
condition|)
block|{
name|setError
argument_list|(
name|QStringLiteral
argument_list|(
literal|"Failed to obtain peer trust: %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|err
argument_list|)
argument_list|,
name|QAbstractSocket
operator|::
name|SslHandshakeFailedError
argument_list|)
expr_stmt|;
name|plainSocket
operator|->
name|disconnectFromHost
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
block|}
name|QList
argument_list|<
name|QSslError
argument_list|>
name|errors
decl_stmt|;
comment|// store certificates
specifier|const
name|int
name|certCount
init|=
name|SecTrustGetCertificateCount
argument_list|(
name|trust
argument_list|)
decl_stmt|;
comment|// TODO: why this test depends on configuration.peerCertificateChain not being empty????
if|if
condition|(
name|configuration
operator|.
name|peerCertificateChain
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Apple's docs say SetTrustEvaluate must be called before
comment|// SecTrustGetCertificateAtIndex, but this results
comment|// in 'kSecTrustResultRecoverableTrustFailure', so
comment|// here we just ignore 'res' (later we'll use SetAnchor etc.
comment|// and evaluate again).
name|SecTrustResultType
name|res
init|=
name|kSecTrustResultInvalid
decl_stmt|;
name|err
operator|=
name|SecTrustEvaluate
argument_list|(
name|trust
argument_list|,
operator|&
name|res
argument_list|)
expr_stmt|;
if|if
condition|(
name|err
operator|!=
name|noErr
condition|)
block|{
comment|// We can not ignore this, it's not even about trust verification
comment|// probably ...
name|setError
argument_list|(
literal|"SecTrustEvaluate failed"
argument_list|,
name|QAbstractSocket
operator|::
name|SslHandshakeFailedError
argument_list|)
expr_stmt|;
name|plainSocket
operator|->
name|disconnectFromHost
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|certCount
condition|;
operator|++
name|i
control|)
block|{
name|SecCertificateRef
name|cert
init|=
name|SecTrustGetCertificateAtIndex
argument_list|(
name|trust
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|QCFType
argument_list|<
name|CFDataRef
argument_list|>
name|derData
init|=
name|SecCertificateCopyData
argument_list|(
name|cert
argument_list|)
decl_stmt|;
name|configuration
operator|.
name|peerCertificateChain
operator|<<
name|QSslCertificate
argument_list|(
name|QByteArray
operator|::
name|fromCFData
argument_list|(
name|derData
argument_list|)
argument_list|,
name|QSsl
operator|::
name|Der
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|certCount
operator|>
literal|0
condition|)
block|{
name|SecCertificateRef
name|cert
init|=
name|SecTrustGetCertificateAtIndex
argument_list|(
name|trust
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QCFType
argument_list|<
name|CFDataRef
argument_list|>
name|derData
init|=
name|SecCertificateCopyData
argument_list|(
name|cert
argument_list|)
decl_stmt|;
name|configuration
operator|.
name|peerCertificate
operator|=
name|QSslCertificate
argument_list|(
name|QByteArray
operator|::
name|fromCFData
argument_list|(
name|derData
argument_list|)
argument_list|,
name|QSsl
operator|::
name|Der
argument_list|)
expr_stmt|;
block|}
comment|// check the whole chain for blacklisting (including root, as we check for subjectInfo and issuer)
foreach|foreach
control|(
specifier|const
name|QSslCertificate
modifier|&
name|cert
decl|,
name|configuration
operator|.
name|peerCertificateChain
control|)
block|{
if|if
condition|(
name|QSslCertificatePrivate
operator|::
name|isBlacklisted
argument_list|(
name|cert
argument_list|)
operator|&&
operator|!
name|canIgnoreVerify
condition|)
block|{
specifier|const
name|QSslError
name|error
argument_list|(
name|QSslError
operator|::
name|CertificateBlacklisted
argument_list|,
name|cert
argument_list|)
decl_stmt|;
name|errors
operator|<<
name|error
expr_stmt|;
emit|emit
name|q
operator|->
name|peerVerifyError
argument_list|(
name|error
argument_list|)
emit|;
if|if
condition|(
name|q
operator|->
name|state
argument_list|()
operator|!=
name|QAbstractSocket
operator|::
name|ConnectedState
condition|)
return|return
literal|false
return|;
block|}
block|}
specifier|const
name|bool
name|doVerifyPeer
init|=
name|verifyMode
operator|==
name|QSslSocket
operator|::
name|VerifyPeer
operator|||
operator|(
name|verifyMode
operator|==
name|QSslSocket
operator|::
name|AutoVerifyPeer
operator|&&
name|mode
operator|==
name|QSslSocket
operator|::
name|SslClientMode
operator|)
decl_stmt|;
comment|// Check the peer certificate itself. First try the subject's common name
comment|// (CN) as a wildcard, then try all alternate subject name DNS entries the
comment|// same way.
if|if
condition|(
operator|!
name|configuration
operator|.
name|peerCertificate
operator|.
name|isNull
argument_list|()
condition|)
block|{
comment|// but only if we're a client connecting to a server
comment|// if we're the server, don't check CN
if|if
condition|(
name|mode
operator|==
name|QSslSocket
operator|::
name|SslClientMode
condition|)
block|{
specifier|const
name|QString
name|peerName
argument_list|(
name|verificationPeerName
operator|.
name|isEmpty
argument_list|()
condition|?
name|q
operator|->
name|peerName
argument_list|()
else|:
name|verificationPeerName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isMatchingHostname
argument_list|(
name|configuration
operator|.
name|peerCertificate
argument_list|,
name|peerName
argument_list|)
operator|&&
operator|!
name|canIgnoreVerify
condition|)
block|{
comment|// No matches in common names or alternate names.
specifier|const
name|QSslError
name|error
argument_list|(
name|QSslError
operator|::
name|HostNameMismatch
argument_list|,
name|configuration
operator|.
name|peerCertificate
argument_list|)
decl_stmt|;
name|errors
operator|<<
name|error
expr_stmt|;
emit|emit
name|q
operator|->
name|peerVerifyError
argument_list|(
name|error
argument_list|)
emit|;
if|if
condition|(
name|q
operator|->
name|state
argument_list|()
operator|!=
name|QAbstractSocket
operator|::
name|ConnectedState
condition|)
return|return
literal|false
return|;
block|}
block|}
block|}
else|else
block|{
comment|// No peer certificate presented. Report as error if the socket
comment|// expected one.
if|if
condition|(
name|doVerifyPeer
operator|&&
operator|!
name|canIgnoreVerify
condition|)
block|{
specifier|const
name|QSslError
name|error
argument_list|(
name|QSslError
operator|::
name|NoPeerCertificate
argument_list|)
decl_stmt|;
name|errors
operator|<<
name|error
expr_stmt|;
emit|emit
name|q
operator|->
name|peerVerifyError
argument_list|(
name|error
argument_list|)
emit|;
if|if
condition|(
name|q
operator|->
name|state
argument_list|()
operator|!=
name|QAbstractSocket
operator|::
name|ConnectedState
condition|)
return|return
literal|false
return|;
block|}
block|}
comment|// verify certificate chain
name|QCFType
argument_list|<
name|CFMutableArrayRef
argument_list|>
name|certArray
init|=
name|CFArrayCreateMutable
argument_list|(
name|NULL
argument_list|,
literal|0
argument_list|,
operator|&
name|kCFTypeArrayCallBacks
argument_list|)
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QSslCertificate
modifier|&
name|cert
decl|,
name|configuration
operator|.
name|caCertificates
control|)
block|{
name|QCFType
argument_list|<
name|CFDataRef
argument_list|>
name|certData
init|=
name|cert
operator|.
name|d
operator|->
name|derData
operator|.
name|toCFData
argument_list|()
decl_stmt|;
name|QCFType
argument_list|<
name|SecCertificateRef
argument_list|>
name|certRef
init|=
name|SecCertificateCreateWithData
argument_list|(
name|NULL
argument_list|,
name|certData
argument_list|)
decl_stmt|;
name|CFArrayAppendValue
argument_list|(
name|certArray
argument_list|,
name|certRef
argument_list|)
expr_stmt|;
block|}
name|SecTrustSetAnchorCertificates
argument_list|(
name|trust
argument_list|,
name|certArray
argument_list|)
expr_stmt|;
name|SecTrustSetAnchorCertificatesOnly
argument_list|(
name|trust
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|SecTrustResultType
name|trustResult
init|=
name|kSecTrustResultInvalid
decl_stmt|;
name|SecTrustEvaluate
argument_list|(
name|trust
argument_list|,
operator|&
name|trustResult
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|trustResult
condition|)
block|{
case|case
name|kSecTrustResultUnspecified
case|:
case|case
name|kSecTrustResultProceed
case|:
break|break;
default|default:
if|if
condition|(
operator|!
name|canIgnoreVerify
condition|)
block|{
specifier|const
name|QSslError
name|error
argument_list|(
name|QSslError
operator|::
name|CertificateUntrusted
argument_list|,
name|configuration
operator|.
name|peerCertificate
argument_list|)
decl_stmt|;
name|errors
operator|<<
name|error
expr_stmt|;
emit|emit
name|q
operator|->
name|peerVerifyError
argument_list|(
name|error
argument_list|)
emit|;
block|}
block|}
comment|// report errors
if|if
condition|(
operator|!
name|errors
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|canIgnoreVerify
condition|)
block|{
name|sslErrors
operator|=
name|errors
expr_stmt|;
if|if
condition|(
operator|!
name|checkSslErrors
argument_list|()
condition|)
return|return
literal|false
return|;
block|}
else|else
block|{
name|sslErrors
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/*     Copied verbatim from qsslsocket_openssl.cpp */
end_comment
begin_function
DECL|function|checkSslErrors
name|bool
name|QSslSocketBackendPrivate
operator|::
name|checkSslErrors
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QSslSocket
argument_list|)
expr_stmt|;
if|if
condition|(
name|sslErrors
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|true
return|;
emit|emit
name|q
operator|->
name|sslErrors
argument_list|(
name|sslErrors
argument_list|)
emit|;
specifier|const
name|bool
name|doVerifyPeer
init|=
name|configuration
operator|.
name|peerVerifyMode
operator|==
name|QSslSocket
operator|::
name|VerifyPeer
operator|||
operator|(
name|configuration
operator|.
name|peerVerifyMode
operator|==
name|QSslSocket
operator|::
name|AutoVerifyPeer
operator|&&
name|mode
operator|==
name|QSslSocket
operator|::
name|SslClientMode
operator|)
decl_stmt|;
specifier|const
name|bool
name|doEmitSslError
init|=
operator|!
name|verifyErrorsHaveBeenIgnored
argument_list|()
decl_stmt|;
comment|// check whether we need to emit an SSL handshake error
if|if
condition|(
name|doVerifyPeer
operator|&&
name|doEmitSslError
condition|)
block|{
if|if
condition|(
name|q
operator|->
name|pauseMode
argument_list|()
operator|&
name|QAbstractSocket
operator|::
name|PauseOnSslErrors
condition|)
block|{
name|pauseSocketNotifiers
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|paused
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|setError
argument_list|(
name|sslErrors
operator|.
name|first
argument_list|()
operator|.
name|errorString
argument_list|()
argument_list|,
name|QAbstractSocket
operator|::
name|SslHandshakeFailedError
argument_list|)
expr_stmt|;
name|plainSocket
operator|->
name|disconnectFromHost
argument_list|()
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|startHandshake
name|bool
name|QSslSocketBackendPrivate
operator|::
name|startHandshake
parameter_list|()
block|{
name|Q_ASSERT
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|Q_Q
argument_list|(
name|QSslSocket
argument_list|)
expr_stmt|;
name|OSStatus
name|err
init|=
name|SSLHandshake
argument_list|(
name|context
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|QSSLSOCKET_DEBUG
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
name|plainSocket
operator|<<
literal|"SSLHandhake returned"
operator|<<
name|err
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|err
operator|==
name|errSSLWouldBlock
condition|)
block|{
comment|// startHandshake has to be called again ... later.
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|err
operator|==
name|errSSLServerAuthCompleted
condition|)
block|{
comment|// errSSLServerAuthCompleted is a define for errSSLPeerAuthCompleted,
comment|// it works for both server/client modes.
comment|// In future we'll evaluate peer's trust at this point,
comment|// for now we just continue.
comment|// if (!verifyPeerTrust())
comment|//      ...
return|return
name|startHandshake
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|err
operator|==
name|errSSLClientCertRequested
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|mode
operator|==
name|QSslSocket
operator|::
name|SslClientMode
argument_list|)
expr_stmt|;
name|QString
name|errorDescription
decl_stmt|;
name|QAbstractSocket
operator|::
name|SocketError
name|errorCode
init|=
name|QAbstractSocket
operator|::
name|UnknownSocketError
decl_stmt|;
comment|// setSessionCertificate does not fail if we have no certificate.
comment|// Failure means a real error (invalid certificate, no private key, etc).
if|if
condition|(
operator|!
name|setSessionCertificate
argument_list|(
name|errorDescription
argument_list|,
name|errorCode
argument_list|)
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"Failed to provide a client certificate"
expr_stmt|;
name|setError
argument_list|(
name|errorDescription
argument_list|,
name|errorCode
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
comment|// We try to resume a handshake, even if have no
comment|// local certificates ... (up to server to deal with our failure).
return|return
name|startHandshake
argument_list|()
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|err
operator|!=
name|errSecSuccess
condition|)
block|{
if|if
condition|(
name|err
operator|==
name|errSSLBadCert
operator|&&
name|canIgnoreTrustVerificationFailure
argument_list|()
condition|)
block|{
comment|// We're on the server side and client did not provide any
comment|// certificate. This is the new 'nice' error returned by
comment|// Security Framework after it was recently updated.
return|return
name|startHandshake
argument_list|()
return|;
block|}
name|setError
argument_list|(
name|QStringLiteral
argument_list|(
literal|"Error during SSL handshake: %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|err
argument_list|)
argument_list|,
name|QAbstractSocket
operator|::
name|SslHandshakeFailedError
argument_list|)
expr_stmt|;
name|plainSocket
operator|->
name|disconnectFromHost
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// Connection aborted during handshake phase.
if|if
condition|(
name|q
operator|->
name|state
argument_list|()
operator|!=
name|QAbstractSocket
operator|::
name|ConnectedState
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"connection aborted"
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// check protocol version ourselves, as Secure Transport does not enforce
comment|// the requested min / max versions.
if|if
condition|(
operator|!
name|verifySessionProtocol
argument_list|()
condition|)
block|{
name|setError
argument_list|(
literal|"Protocol version mismatch"
argument_list|,
name|QAbstractSocket
operator|::
name|SslHandshakeFailedError
argument_list|)
expr_stmt|;
name|plainSocket
operator|->
name|disconnectFromHost
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|verifyPeerTrust
argument_list|()
condition|)
block|{
name|continueHandshake
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
end_function
begin_function
DECL|function|setError
name|void
name|QSslSocketBackendPrivate
operator|::
name|setError
parameter_list|(
specifier|const
name|QString
modifier|&
name|errorString
parameter_list|,
name|QAbstractSocket
operator|::
name|SocketError
name|errorCode
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QSslSocket
argument_list|)
expr_stmt|;
name|q
operator|->
name|setErrorString
argument_list|(
name|errorString
argument_list|)
expr_stmt|;
name|q
operator|->
name|setSocketError
argument_list|(
name|errorCode
argument_list|)
expr_stmt|;
emit|emit
name|q
operator|->
name|error
argument_list|(
name|errorCode
argument_list|)
emit|;
block|}
end_function
begin_comment
comment|/*     PKCS12 helpers. */
end_comment
begin_function
DECL|function|wrap
specifier|static
name|QAsn1Element
name|wrap
parameter_list|(
name|quint8
name|type
parameter_list|,
specifier|const
name|QAsn1Element
modifier|&
name|child
parameter_list|)
block|{
name|QByteArray
name|value
decl_stmt|;
name|QDataStream
name|stream
argument_list|(
operator|&
name|value
argument_list|,
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
decl_stmt|;
name|child
operator|.
name|write
argument_list|(
name|stream
argument_list|)
expr_stmt|;
return|return
name|QAsn1Element
argument_list|(
name|type
argument_list|,
name|value
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|_q_PKCS7_data
specifier|static
name|QAsn1Element
name|_q_PKCS7_data
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|data
parameter_list|)
block|{
name|QVector
argument_list|<
name|QAsn1Element
argument_list|>
name|items
decl_stmt|;
name|items
operator|<<
name|QAsn1Element
operator|::
name|fromObjectId
argument_list|(
literal|"1.2.840.113549.1.7.1"
argument_list|)
expr_stmt|;
name|items
operator|<<
name|wrap
argument_list|(
name|QAsn1Element
operator|::
name|Context0Type
argument_list|,
name|QAsn1Element
argument_list|(
name|QAsn1Element
operator|::
name|OctetStringType
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|QAsn1Element
operator|::
name|fromVector
argument_list|(
name|items
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     PKCS #12 key derivation.      Some test vectors:     http://www.drh-consultancy.demon.co.uk/test.txt */
end_comment
begin_function
DECL|function|_q_PKCS12_keygen
specifier|static
name|QByteArray
name|_q_PKCS12_keygen
parameter_list|(
name|char
name|id
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|salt
parameter_list|,
specifier|const
name|QString
modifier|&
name|passPhrase
parameter_list|,
name|int
name|n
parameter_list|,
name|int
name|r
parameter_list|)
block|{
specifier|const
name|int
name|u
init|=
literal|20
decl_stmt|;
specifier|const
name|int
name|v
init|=
literal|64
decl_stmt|;
comment|// password formatting
name|QByteArray
name|passUnicode
argument_list|(
name|passPhrase
operator|.
name|size
argument_list|()
operator|*
literal|2
operator|+
literal|2
argument_list|,
literal|'\0'
argument_list|)
decl_stmt|;
name|char
modifier|*
name|p
init|=
name|passUnicode
operator|.
name|data
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|passPhrase
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|quint16
name|ch
init|=
name|passPhrase
index|[
name|i
index|]
operator|.
name|unicode
argument_list|()
decl_stmt|;
operator|*
operator|(
name|p
operator|++
operator|)
operator|=
operator|(
name|ch
operator|&
literal|0xff00
operator|)
operator|>>
literal|8
expr_stmt|;
operator|*
operator|(
name|p
operator|++
operator|)
operator|=
operator|(
name|ch
operator|&
literal|0xff
operator|)
expr_stmt|;
block|}
comment|// prepare I
name|QByteArray
name|D
argument_list|(
literal|64
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|QByteArray
name|S
decl_stmt|,
name|P
decl_stmt|;
specifier|const
name|int
name|sSize
init|=
name|v
operator|*
operator|(
operator|(
name|salt
operator|.
name|size
argument_list|()
operator|+
name|v
operator|-
literal|1
operator|)
operator|/
name|v
operator|)
decl_stmt|;
name|S
operator|.
name|resize
argument_list|(
name|sSize
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sSize
condition|;
operator|++
name|i
control|)
block|{
name|S
index|[
name|i
index|]
operator|=
name|salt
index|[
name|i
operator|%
name|salt
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
block|}
specifier|const
name|int
name|pSize
init|=
name|v
operator|*
operator|(
operator|(
name|passUnicode
operator|.
name|size
argument_list|()
operator|+
name|v
operator|-
literal|1
operator|)
operator|/
name|v
operator|)
decl_stmt|;
name|P
operator|.
name|resize
argument_list|(
name|pSize
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pSize
condition|;
operator|++
name|i
control|)
block|{
name|P
index|[
name|i
index|]
operator|=
name|passUnicode
index|[
name|i
operator|%
name|passUnicode
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
block|}
name|QByteArray
name|I
init|=
name|S
operator|+
name|P
decl_stmt|;
comment|// apply hashing
specifier|const
name|int
name|c
init|=
operator|(
name|n
operator|+
name|u
operator|-
literal|1
operator|)
operator|/
name|u
decl_stmt|;
name|QByteArray
name|A
decl_stmt|;
name|QByteArray
name|B
decl_stmt|;
name|B
operator|.
name|resize
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|QCryptographicHash
name|hash
argument_list|(
name|QCryptographicHash
operator|::
name|Sha1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|c
condition|;
operator|++
name|i
control|)
block|{
comment|// hash r iterations
name|QByteArray
name|Ai
init|=
name|D
operator|+
name|I
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|r
condition|;
operator|++
name|j
control|)
block|{
name|hash
operator|.
name|reset
argument_list|()
expr_stmt|;
name|hash
operator|.
name|addData
argument_list|(
name|Ai
argument_list|)
expr_stmt|;
name|Ai
operator|=
name|hash
operator|.
name|result
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|v
condition|;
operator|++
name|j
control|)
block|{
name|B
index|[
name|j
index|]
operator|=
name|Ai
index|[
name|j
operator|%
name|u
index|]
expr_stmt|;
block|}
comment|// modify I as Ij = (Ij + B + 1) modulo 2^v
for|for
control|(
name|int
name|p
init|=
literal|0
init|;
name|p
operator|<
name|I
operator|.
name|size
argument_list|()
condition|;
name|p
operator|+=
name|v
control|)
block|{
name|quint8
name|carry
init|=
literal|1
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
name|v
operator|-
literal|1
init|;
name|j
operator|>=
literal|0
condition|;
operator|--
name|j
control|)
block|{
name|quint16
name|v
init|=
name|quint8
argument_list|(
name|I
index|[
name|p
operator|+
name|j
index|]
argument_list|)
operator|+
name|quint8
argument_list|(
name|B
index|[
name|j
index|]
argument_list|)
operator|+
name|carry
decl_stmt|;
name|I
index|[
name|p
operator|+
name|j
index|]
operator|=
name|v
operator|&
literal|0xff
expr_stmt|;
name|carry
operator|=
operator|(
name|v
operator|&
literal|0xff00
operator|)
operator|>>
literal|8
expr_stmt|;
block|}
block|}
name|A
operator|+=
name|Ai
expr_stmt|;
block|}
return|return
name|A
operator|.
name|left
argument_list|(
name|n
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|_q_PKCS12_salt
specifier|static
name|QByteArray
name|_q_PKCS12_salt
parameter_list|()
block|{
name|QByteArray
name|salt
decl_stmt|;
name|salt
operator|.
name|resize
argument_list|(
literal|8
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|salt
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|salt
index|[
name|i
index|]
operator|=
operator|(
name|qrand
argument_list|()
operator|&
literal|0xff
operator|)
expr_stmt|;
block|}
return|return
name|salt
return|;
block|}
end_function
begin_function
DECL|function|_q_PKCS12_certBag
specifier|static
name|QByteArray
name|_q_PKCS12_certBag
parameter_list|(
specifier|const
name|QSslCertificate
modifier|&
name|cert
parameter_list|)
block|{
name|QVector
argument_list|<
name|QAsn1Element
argument_list|>
name|items
decl_stmt|;
name|items
operator|<<
name|QAsn1Element
operator|::
name|fromObjectId
argument_list|(
literal|"1.2.840.113549.1.12.10.1.3"
argument_list|)
expr_stmt|;
comment|// certificate
name|QVector
argument_list|<
name|QAsn1Element
argument_list|>
name|certItems
decl_stmt|;
name|certItems
operator|<<
name|QAsn1Element
operator|::
name|fromObjectId
argument_list|(
literal|"1.2.840.113549.1.9.22.1"
argument_list|)
expr_stmt|;
name|certItems
operator|<<
name|wrap
argument_list|(
name|QAsn1Element
operator|::
name|Context0Type
argument_list|,
name|QAsn1Element
argument_list|(
name|QAsn1Element
operator|::
name|OctetStringType
argument_list|,
name|cert
operator|.
name|toDer
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|items
operator|<<
name|wrap
argument_list|(
name|QAsn1Element
operator|::
name|Context0Type
argument_list|,
name|QAsn1Element
operator|::
name|fromVector
argument_list|(
name|certItems
argument_list|)
argument_list|)
expr_stmt|;
comment|// local key id
specifier|const
name|QByteArray
name|localKeyId
init|=
name|cert
operator|.
name|digest
argument_list|(
name|QCryptographicHash
operator|::
name|Sha1
argument_list|)
decl_stmt|;
name|QVector
argument_list|<
name|QAsn1Element
argument_list|>
name|idItems
decl_stmt|;
name|idItems
operator|<<
name|QAsn1Element
operator|::
name|fromObjectId
argument_list|(
literal|"1.2.840.113549.1.9.21"
argument_list|)
expr_stmt|;
name|idItems
operator|<<
name|wrap
argument_list|(
name|QAsn1Element
operator|::
name|SetType
argument_list|,
name|QAsn1Element
argument_list|(
name|QAsn1Element
operator|::
name|OctetStringType
argument_list|,
name|localKeyId
argument_list|)
argument_list|)
expr_stmt|;
name|items
operator|<<
name|wrap
argument_list|(
name|QAsn1Element
operator|::
name|SetType
argument_list|,
name|QAsn1Element
operator|::
name|fromVector
argument_list|(
name|idItems
argument_list|)
argument_list|)
expr_stmt|;
comment|// dump
name|QAsn1Element
name|root
init|=
name|wrap
argument_list|(
name|QAsn1Element
operator|::
name|SequenceType
argument_list|,
name|QAsn1Element
operator|::
name|fromVector
argument_list|(
name|items
argument_list|)
argument_list|)
decl_stmt|;
name|QByteArray
name|ba
decl_stmt|;
name|QDataStream
name|stream
argument_list|(
operator|&
name|ba
argument_list|,
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
decl_stmt|;
name|root
operator|.
name|write
argument_list|(
name|stream
argument_list|)
expr_stmt|;
return|return
name|ba
return|;
block|}
end_function
begin_function
DECL|function|_q_PKCS12_key
specifier|static
name|QAsn1Element
name|_q_PKCS12_key
parameter_list|(
specifier|const
name|QSslKey
modifier|&
name|key
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|key
operator|.
name|algorithm
argument_list|()
operator|==
name|QSsl
operator|::
name|Rsa
operator|||
name|key
operator|.
name|algorithm
argument_list|()
operator|==
name|QSsl
operator|::
name|Dsa
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|QAsn1Element
argument_list|>
name|keyItems
decl_stmt|;
name|keyItems
operator|<<
name|QAsn1Element
operator|::
name|fromInteger
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|QAsn1Element
argument_list|>
name|algoItems
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|algorithm
argument_list|()
operator|==
name|QSsl
operator|::
name|Rsa
condition|)
name|algoItems
operator|<<
name|QAsn1Element
operator|::
name|fromObjectId
argument_list|(
name|RSA_ENCRYPTION_OID
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|key
operator|.
name|algorithm
argument_list|()
operator|==
name|QSsl
operator|::
name|Dsa
condition|)
name|algoItems
operator|<<
name|QAsn1Element
operator|::
name|fromObjectId
argument_list|(
name|DSA_ENCRYPTION_OID
argument_list|)
expr_stmt|;
name|algoItems
operator|<<
name|QAsn1Element
argument_list|(
name|QAsn1Element
operator|::
name|NullType
argument_list|)
expr_stmt|;
name|keyItems
operator|<<
name|QAsn1Element
operator|::
name|fromVector
argument_list|(
name|algoItems
argument_list|)
expr_stmt|;
name|keyItems
operator|<<
name|QAsn1Element
argument_list|(
name|QAsn1Element
operator|::
name|OctetStringType
argument_list|,
name|key
operator|.
name|toDer
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|QAsn1Element
operator|::
name|fromVector
argument_list|(
name|keyItems
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|_q_PKCS12_shroudedKeyBag
specifier|static
name|QByteArray
name|_q_PKCS12_shroudedKeyBag
parameter_list|(
specifier|const
name|QSslKey
modifier|&
name|key
parameter_list|,
specifier|const
name|QString
modifier|&
name|passPhrase
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|localKeyId
parameter_list|)
block|{
specifier|const
name|int
name|iterations
init|=
literal|2048
decl_stmt|;
name|QByteArray
name|salt
init|=
name|_q_PKCS12_salt
argument_list|()
decl_stmt|;
name|QByteArray
name|cKey
init|=
name|_q_PKCS12_keygen
argument_list|(
literal|1
argument_list|,
name|salt
argument_list|,
name|passPhrase
argument_list|,
literal|24
argument_list|,
name|iterations
argument_list|)
decl_stmt|;
name|QByteArray
name|cIv
init|=
name|_q_PKCS12_keygen
argument_list|(
literal|2
argument_list|,
name|salt
argument_list|,
name|passPhrase
argument_list|,
literal|8
argument_list|,
name|iterations
argument_list|)
decl_stmt|;
comment|// prepare and encrypt data
name|QByteArray
name|plain
decl_stmt|;
name|QDataStream
name|plainStream
argument_list|(
operator|&
name|plain
argument_list|,
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
decl_stmt|;
name|_q_PKCS12_key
argument_list|(
name|key
argument_list|)
operator|.
name|write
argument_list|(
name|plainStream
argument_list|)
expr_stmt|;
name|QByteArray
name|crypted
init|=
name|QSslKeyPrivate
operator|::
name|encrypt
argument_list|(
name|QSslKeyPrivate
operator|::
name|DesEde3Cbc
argument_list|,
name|plain
argument_list|,
name|cKey
argument_list|,
name|cIv
argument_list|)
decl_stmt|;
name|QVector
argument_list|<
name|QAsn1Element
argument_list|>
name|items
decl_stmt|;
name|items
operator|<<
name|QAsn1Element
operator|::
name|fromObjectId
argument_list|(
literal|"1.2.840.113549.1.12.10.1.2"
argument_list|)
expr_stmt|;
comment|// key
name|QVector
argument_list|<
name|QAsn1Element
argument_list|>
name|keyItems
decl_stmt|;
name|QVector
argument_list|<
name|QAsn1Element
argument_list|>
name|algoItems
decl_stmt|;
name|algoItems
operator|<<
name|QAsn1Element
operator|::
name|fromObjectId
argument_list|(
literal|"1.2.840.113549.1.12.1.3"
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|QAsn1Element
argument_list|>
name|paramItems
decl_stmt|;
name|paramItems
operator|<<
name|QAsn1Element
argument_list|(
name|QAsn1Element
operator|::
name|OctetStringType
argument_list|,
name|salt
argument_list|)
expr_stmt|;
name|paramItems
operator|<<
name|QAsn1Element
operator|::
name|fromInteger
argument_list|(
name|iterations
argument_list|)
expr_stmt|;
name|algoItems
operator|<<
name|QAsn1Element
operator|::
name|fromVector
argument_list|(
name|paramItems
argument_list|)
expr_stmt|;
name|keyItems
operator|<<
name|QAsn1Element
operator|::
name|fromVector
argument_list|(
name|algoItems
argument_list|)
expr_stmt|;
name|keyItems
operator|<<
name|QAsn1Element
argument_list|(
name|QAsn1Element
operator|::
name|OctetStringType
argument_list|,
name|crypted
argument_list|)
expr_stmt|;
name|items
operator|<<
name|wrap
argument_list|(
name|QAsn1Element
operator|::
name|Context0Type
argument_list|,
name|QAsn1Element
operator|::
name|fromVector
argument_list|(
name|keyItems
argument_list|)
argument_list|)
expr_stmt|;
comment|// local key id
name|QVector
argument_list|<
name|QAsn1Element
argument_list|>
name|idItems
decl_stmt|;
name|idItems
operator|<<
name|QAsn1Element
operator|::
name|fromObjectId
argument_list|(
literal|"1.2.840.113549.1.9.21"
argument_list|)
expr_stmt|;
name|idItems
operator|<<
name|wrap
argument_list|(
name|QAsn1Element
operator|::
name|SetType
argument_list|,
name|QAsn1Element
argument_list|(
name|QAsn1Element
operator|::
name|OctetStringType
argument_list|,
name|localKeyId
argument_list|)
argument_list|)
expr_stmt|;
name|items
operator|<<
name|wrap
argument_list|(
name|QAsn1Element
operator|::
name|SetType
argument_list|,
name|QAsn1Element
operator|::
name|fromVector
argument_list|(
name|idItems
argument_list|)
argument_list|)
expr_stmt|;
comment|// dump
name|QAsn1Element
name|root
init|=
name|wrap
argument_list|(
name|QAsn1Element
operator|::
name|SequenceType
argument_list|,
name|QAsn1Element
operator|::
name|fromVector
argument_list|(
name|items
argument_list|)
argument_list|)
decl_stmt|;
name|QByteArray
name|ba
decl_stmt|;
name|QDataStream
name|stream
argument_list|(
operator|&
name|ba
argument_list|,
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
decl_stmt|;
name|root
operator|.
name|write
argument_list|(
name|stream
argument_list|)
expr_stmt|;
return|return
name|ba
return|;
block|}
end_function
begin_function
DECL|function|_q_PKCS12_bag
specifier|static
name|QByteArray
name|_q_PKCS12_bag
parameter_list|(
specifier|const
name|QList
argument_list|<
name|QSslCertificate
argument_list|>
modifier|&
name|certs
parameter_list|,
specifier|const
name|QSslKey
modifier|&
name|key
parameter_list|,
specifier|const
name|QString
modifier|&
name|passPhrase
parameter_list|)
block|{
name|QVector
argument_list|<
name|QAsn1Element
argument_list|>
name|items
decl_stmt|;
comment|// certs
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|certs
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|items
operator|<<
name|_q_PKCS7_data
argument_list|(
name|_q_PKCS12_certBag
argument_list|(
name|certs
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// key
specifier|const
name|QByteArray
name|localKeyId
init|=
name|certs
operator|.
name|first
argument_list|()
operator|.
name|digest
argument_list|(
name|QCryptographicHash
operator|::
name|Sha1
argument_list|)
decl_stmt|;
name|items
operator|<<
name|_q_PKCS7_data
argument_list|(
name|_q_PKCS12_shroudedKeyBag
argument_list|(
name|key
argument_list|,
name|passPhrase
argument_list|,
name|localKeyId
argument_list|)
argument_list|)
expr_stmt|;
comment|// dump
name|QAsn1Element
name|root
init|=
name|QAsn1Element
operator|::
name|fromVector
argument_list|(
name|items
argument_list|)
decl_stmt|;
name|QByteArray
name|ba
decl_stmt|;
name|QDataStream
name|stream
argument_list|(
operator|&
name|ba
argument_list|,
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
decl_stmt|;
name|root
operator|.
name|write
argument_list|(
name|stream
argument_list|)
expr_stmt|;
return|return
name|ba
return|;
block|}
end_function
begin_function
DECL|function|_q_PKCS12_mac
specifier|static
name|QAsn1Element
name|_q_PKCS12_mac
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|data
parameter_list|,
specifier|const
name|QString
modifier|&
name|passPhrase
parameter_list|)
block|{
specifier|const
name|int
name|iterations
init|=
literal|2048
decl_stmt|;
comment|// salt generation
name|QByteArray
name|macSalt
init|=
name|_q_PKCS12_salt
argument_list|()
decl_stmt|;
name|QByteArray
name|key
init|=
name|_q_PKCS12_keygen
argument_list|(
literal|3
argument_list|,
name|macSalt
argument_list|,
name|passPhrase
argument_list|,
literal|20
argument_list|,
name|iterations
argument_list|)
decl_stmt|;
comment|// HMAC calculation
name|QMessageAuthenticationCode
name|hmac
argument_list|(
name|QCryptographicHash
operator|::
name|Sha1
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|hmac
operator|.
name|addData
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|QAsn1Element
argument_list|>
name|algoItems
decl_stmt|;
name|algoItems
operator|<<
name|QAsn1Element
operator|::
name|fromObjectId
argument_list|(
literal|"1.3.14.3.2.26"
argument_list|)
expr_stmt|;
name|algoItems
operator|<<
name|QAsn1Element
argument_list|(
name|QAsn1Element
operator|::
name|NullType
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|QAsn1Element
argument_list|>
name|digestItems
decl_stmt|;
name|digestItems
operator|<<
name|QAsn1Element
operator|::
name|fromVector
argument_list|(
name|algoItems
argument_list|)
expr_stmt|;
name|digestItems
operator|<<
name|QAsn1Element
argument_list|(
name|QAsn1Element
operator|::
name|OctetStringType
argument_list|,
name|hmac
operator|.
name|result
argument_list|()
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|QAsn1Element
argument_list|>
name|macItems
decl_stmt|;
name|macItems
operator|<<
name|QAsn1Element
operator|::
name|fromVector
argument_list|(
name|digestItems
argument_list|)
expr_stmt|;
name|macItems
operator|<<
name|QAsn1Element
argument_list|(
name|QAsn1Element
operator|::
name|OctetStringType
argument_list|,
name|macSalt
argument_list|)
expr_stmt|;
name|macItems
operator|<<
name|QAsn1Element
operator|::
name|fromInteger
argument_list|(
name|iterations
argument_list|)
expr_stmt|;
return|return
name|QAsn1Element
operator|::
name|fromVector
argument_list|(
name|macItems
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|_q_makePkcs12
name|QByteArray
name|_q_makePkcs12
parameter_list|(
specifier|const
name|QList
argument_list|<
name|QSslCertificate
argument_list|>
modifier|&
name|certs
parameter_list|,
specifier|const
name|QSslKey
modifier|&
name|key
parameter_list|,
specifier|const
name|QString
modifier|&
name|passPhrase
parameter_list|)
block|{
name|QVector
argument_list|<
name|QAsn1Element
argument_list|>
name|items
decl_stmt|;
comment|// version
name|items
operator|<<
name|QAsn1Element
operator|::
name|fromInteger
argument_list|(
literal|3
argument_list|)
expr_stmt|;
comment|// auth safe
specifier|const
name|QByteArray
name|data
init|=
name|_q_PKCS12_bag
argument_list|(
name|certs
argument_list|,
name|key
argument_list|,
name|passPhrase
argument_list|)
decl_stmt|;
name|items
operator|<<
name|_q_PKCS7_data
argument_list|(
name|data
argument_list|)
expr_stmt|;
comment|// HMAC
name|items
operator|<<
name|_q_PKCS12_mac
argument_list|(
name|data
argument_list|,
name|passPhrase
argument_list|)
expr_stmt|;
comment|// dump
name|QAsn1Element
name|root
init|=
name|QAsn1Element
operator|::
name|fromVector
argument_list|(
name|items
argument_list|)
decl_stmt|;
name|QByteArray
name|ba
decl_stmt|;
name|QDataStream
name|stream
argument_list|(
operator|&
name|ba
argument_list|,
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
decl_stmt|;
name|root
operator|.
name|write
argument_list|(
name|stream
argument_list|)
expr_stmt|;
return|return
name|ba
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
