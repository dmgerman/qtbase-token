begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Jeremy LainÃ©<jeremy.laine@m4x.org> ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the QtNetwork module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qsslkey.h"
end_include
begin_include
include|#
directive|include
file|"qsslkey_p.h"
end_include
begin_include
include|#
directive|include
file|<CommonCrypto/CommonCrypto.h>
end_include
begin_function
name|QT_USE_NAMESPACE
DECL|function|wrapCCCrypt
specifier|static
name|QByteArray
name|wrapCCCrypt
parameter_list|(
name|CCOperation
name|ccOp
parameter_list|,
name|QSslKeyPrivate
operator|::
name|Cipher
name|cipher
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|data
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|key
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|iv
parameter_list|)
block|{
name|int
name|blockSize
decl_stmt|;
name|CCAlgorithm
name|ccAlgorithm
decl_stmt|;
switch|switch
condition|(
name|cipher
condition|)
block|{
case|case
name|QSslKeyPrivate
operator|::
name|DesCbc
case|:
name|blockSize
operator|=
name|kCCBlockSizeDES
expr_stmt|;
name|ccAlgorithm
operator|=
name|kCCAlgorithmDES
expr_stmt|;
break|break;
case|case
name|QSslKeyPrivate
operator|::
name|DesEde3Cbc
case|:
name|blockSize
operator|=
name|kCCBlockSize3DES
expr_stmt|;
name|ccAlgorithm
operator|=
name|kCCAlgorithm3DES
expr_stmt|;
break|break;
case|case
name|QSslKeyPrivate
operator|::
name|Rc2Cbc
case|:
name|blockSize
operator|=
name|kCCBlockSizeRC2
expr_stmt|;
name|ccAlgorithm
operator|=
name|kCCAlgorithmRC2
expr_stmt|;
break|break;
block|}
empty_stmt|;
name|size_t
name|plainLength
init|=
literal|0
decl_stmt|;
name|QByteArray
name|plain
argument_list|(
name|data
operator|.
name|size
argument_list|()
operator|+
name|blockSize
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|CCCryptorStatus
name|status
init|=
name|CCCrypt
argument_list|(
name|ccOp
argument_list|,
name|ccAlgorithm
argument_list|,
name|kCCOptionPKCS7Padding
argument_list|,
name|key
operator|.
name|constData
argument_list|()
argument_list|,
name|key
operator|.
name|size
argument_list|()
argument_list|,
name|iv
operator|.
name|constData
argument_list|()
argument_list|,
name|data
operator|.
name|constData
argument_list|()
argument_list|,
name|data
operator|.
name|size
argument_list|()
argument_list|,
name|plain
operator|.
name|data
argument_list|()
argument_list|,
name|plain
operator|.
name|size
argument_list|()
argument_list|,
operator|&
name|plainLength
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|==
name|kCCSuccess
condition|)
return|return
name|plain
operator|.
name|left
argument_list|(
name|plainLength
argument_list|)
return|;
return|return
name|QByteArray
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|decrypt
name|QByteArray
name|QSslKeyPrivate
operator|::
name|decrypt
parameter_list|(
name|Cipher
name|cipher
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|data
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|key
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|iv
parameter_list|)
block|{
return|return
name|wrapCCCrypt
argument_list|(
name|kCCDecrypt
argument_list|,
name|cipher
argument_list|,
name|data
argument_list|,
name|key
argument_list|,
name|iv
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|encrypt
name|QByteArray
name|QSslKeyPrivate
operator|::
name|encrypt
parameter_list|(
name|Cipher
name|cipher
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|data
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|key
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|iv
parameter_list|)
block|{
return|return
name|wrapCCCrypt
argument_list|(
name|kCCEncrypt
argument_list|,
name|cipher
argument_list|,
name|data
argument_list|,
name|key
argument_list|,
name|iv
argument_list|)
return|;
block|}
end_function
end_unit
