begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the QtNetwork module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qsslcertificate_p.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/qfunctions_winrt.h>
end_include
begin_include
include|#
directive|include
file|<wrl.h>
end_include
begin_include
include|#
directive|include
file|<windows.storage.streams.h>
end_include
begin_include
include|#
directive|include
file|<windows.security.cryptography.h>
end_include
begin_include
include|#
directive|include
file|<robuffer.h>
end_include
begin_using
using|using
namespace|namespace
name|Microsoft
operator|::
name|WRL
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|Microsoft
operator|::
name|WRL
operator|::
name|Wrappers
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|Foundation
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|Security
operator|::
name|Cryptography
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|Security
operator|::
name|Cryptography
operator|::
name|Certificates
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|Storage
operator|::
name|Streams
namespace|;
end_using
begin_macro
name|QT_USE_NAMESPACE
end_macro
begin_struct
DECL|struct|SslCertificateGlobal
struct|struct
name|SslCertificateGlobal
block|{
DECL|function|SslCertificateGlobal
name|SslCertificateGlobal
parameter_list|()
block|{
name|HRESULT
name|hr
decl_stmt|;
name|hr
operator|=
name|GetActivationFactory
argument_list|(
name|HString
operator|::
name|MakeReference
argument_list|(
name|RuntimeClass_Windows_Security_Cryptography_Certificates_Certificate
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|certificateFactory
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|hr
operator|=
name|GetActivationFactory
argument_list|(
name|HString
operator|::
name|MakeReference
argument_list|(
name|RuntimeClass_Windows_Security_Cryptography_CryptographicBuffer
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|bufferFactory
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
block|}
DECL|member|certificateFactory
name|ComPtr
argument_list|<
name|ICertificateFactory
argument_list|>
name|certificateFactory
decl_stmt|;
DECL|member|bufferFactory
name|ComPtr
argument_list|<
name|ICryptographicBufferStatics
argument_list|>
name|bufferFactory
decl_stmt|;
block|}
struct|;
end_struct
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|SslCertificateGlobal
argument_list|,
argument|g
argument_list|)
end_macro
begin_function
DECL|function|QSslCertificate_from_Certificate
name|QSslCertificate
name|QSslCertificatePrivate
operator|::
name|QSslCertificate_from_Certificate
parameter_list|(
name|ICertificate
modifier|*
name|iCertificate
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|iCertificate
argument_list|)
expr_stmt|;
name|ComPtr
argument_list|<
name|IBuffer
argument_list|>
name|buffer
decl_stmt|;
name|HRESULT
name|hr
init|=
name|iCertificate
operator|->
name|GetCertificateBlob
argument_list|(
operator|&
name|buffer
argument_list|)
decl_stmt|;
name|RETURN_IF_FAILED
argument_list|(
literal|"Could not obtain certification blob"
argument_list|,
argument|return QSslCertificate()
argument_list|)
empty_stmt|;
name|ComPtr
argument_list|<
name|Windows
operator|::
name|Storage
operator|::
name|Streams
operator|::
name|IBufferByteAccess
argument_list|>
name|byteAccess
decl_stmt|;
name|hr
operator|=
name|buffer
operator|.
name|As
argument_list|(
operator|&
name|byteAccess
argument_list|)
expr_stmt|;
name|RETURN_IF_FAILED
argument_list|(
literal|"Could not obtain byte access to buffer"
argument_list|,
argument|return QSslCertificate()
argument_list|)
empty_stmt|;
name|char
modifier|*
name|data
decl_stmt|;
name|hr
operator|=
name|byteAccess
operator|->
name|Buffer
argument_list|(
cast|reinterpret_cast
argument_list|<
name|byte
operator|*
operator|*
argument_list|>
argument_list|(
operator|&
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|RETURN_IF_FAILED
argument_list|(
literal|"Could not obtain buffer data"
argument_list|,
argument|return QSslCertificate()
argument_list|)
empty_stmt|;
name|UINT32
name|size
decl_stmt|;
name|hr
operator|=
name|buffer
operator|->
name|get_Length
argument_list|(
operator|&
name|size
argument_list|)
expr_stmt|;
name|RETURN_IF_FAILED
argument_list|(
literal|"Could not obtain buffer length "
argument_list|,
argument|return QSslCertificate()
argument_list|)
empty_stmt|;
name|QByteArray
name|der
argument_list|(
name|data
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|QSslCertificate
name|certificate
decl_stmt|;
name|certificate
operator|.
name|d
operator|->
name|null
operator|=
literal|false
expr_stmt|;
name|certificate
operator|.
name|d
operator|->
name|certificate
operator|=
name|iCertificate
expr_stmt|;
return|return
name|certificatesFromDer
argument_list|(
name|der
argument_list|,
literal|1
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|handle
name|Qt
operator|::
name|HANDLE
name|QSslCertificate
operator|::
name|handle
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|certificate
condition|)
block|{
name|HRESULT
name|hr
decl_stmt|;
name|ComPtr
argument_list|<
name|IBuffer
argument_list|>
name|buffer
decl_stmt|;
name|hr
operator|=
name|g
operator|->
name|bufferFactory
operator|->
name|CreateFromByteArray
argument_list|(
name|d
operator|->
name|derData
operator|.
name|length
argument_list|()
argument_list|,
operator|(
name|BYTE
operator|*
operator|)
name|d
operator|->
name|derData
operator|.
name|data
argument_list|()
argument_list|,
operator|&
name|buffer
argument_list|)
expr_stmt|;
name|RETURN_IF_FAILED
argument_list|(
literal|"Failed to create the certificate data buffer"
argument_list|,
argument|return
literal|0
argument_list|)
empty_stmt|;
name|hr
operator|=
name|g
operator|->
name|certificateFactory
operator|->
name|CreateCertificate
argument_list|(
name|buffer
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|d
operator|->
name|certificate
argument_list|)
expr_stmt|;
name|RETURN_IF_FAILED
argument_list|(
literal|"Failed to create the certificate handle from the data buffer"
argument_list|,
argument|return
literal|0
argument_list|)
empty_stmt|;
block|}
return|return
name|d
operator|->
name|certificate
operator|.
name|Get
argument_list|()
return|;
block|}
end_function
end_unit
