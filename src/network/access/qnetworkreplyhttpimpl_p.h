begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtNetwork module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QNETWORKACCESSHTTPBACKEND_P_H
end_ifndef
begin_define
DECL|macro|QNETWORKACCESSHTTPBACKEND_P_H
define|#
directive|define
name|QNETWORKACCESSHTTPBACKEND_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists for the convenience
end_comment
begin_comment
comment|// of the Network Access API.  This header file may change from
end_comment
begin_comment
comment|// version to version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"qhttpnetworkconnection_p.h"
end_include
begin_include
include|#
directive|include
file|"qnetworkaccessbackend_p.h"
end_include
begin_include
include|#
directive|include
file|"qnetworkrequest.h"
end_include
begin_include
include|#
directive|include
file|"qnetworkreply.h"
end_include
begin_include
include|#
directive|include
file|"qabstractsocket.h"
end_include
begin_include
include|#
directive|include
file|"QtCore/qpointer.h"
end_include
begin_include
include|#
directive|include
file|"QtCore/qdatetime.h"
end_include
begin_include
include|#
directive|include
file|"QtCore/qsharedpointer.h"
end_include
begin_include
include|#
directive|include
file|"qatomic.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_HTTP
end_ifndef
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QNetworkAccessCachedHttpConnection
name|class
name|QNetworkAccessCachedHttpConnection
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QNetworkAccessHttpBackendIODevice
name|class
name|QNetworkAccessHttpBackendIODevice
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QNetworkAccessHttpBackend
range|:
name|public
name|QNetworkAccessBackend
block|{
name|Q_OBJECT
name|public
operator|:
name|QNetworkAccessHttpBackend
argument_list|()
block|;
name|virtual
operator|~
name|QNetworkAccessHttpBackend
argument_list|()
block|;
name|virtual
name|void
name|open
argument_list|()
block|;
name|virtual
name|void
name|closeDownstreamChannel
argument_list|()
block|;
name|virtual
name|void
name|downstreamReadyWrite
argument_list|()
block|;
name|virtual
name|void
name|setDownstreamLimited
argument_list|(
argument|bool b
argument_list|)
block|;
name|virtual
name|void
name|copyFinished
argument_list|(
name|QIODevice
operator|*
argument_list|)
block|;
ifndef|#
directive|ifndef
name|QT_NO_OPENSSL
name|virtual
name|void
name|ignoreSslErrors
argument_list|()
block|;
name|virtual
name|void
name|ignoreSslErrors
argument_list|(
specifier|const
name|QList
operator|<
name|QSslError
operator|>
operator|&
name|errors
argument_list|)
block|;
name|virtual
name|void
name|fetchSslConfiguration
argument_list|(
argument|QSslConfiguration&configuration
argument_list|)
specifier|const
block|;
name|virtual
name|void
name|setSslConfiguration
argument_list|(
specifier|const
name|QSslConfiguration
operator|&
name|configuration
argument_list|)
block|;
endif|#
directive|endif
name|QNetworkCacheMetaData
name|fetchCacheMetaData
argument_list|(
argument|const QNetworkCacheMetaData&metaData
argument_list|)
specifier|const
block|;
comment|// we return true since HTTP needs to send PUT/POST data again after having authenticated
name|bool
name|needsResetableUploadData
argument_list|()
block|{
return|return
name|true
return|;
block|}
name|bool
name|canResume
argument_list|()
specifier|const
block|;
name|void
name|setResumeOffset
argument_list|(
argument|quint64 offset
argument_list|)
block|;
name|signals
operator|:
comment|// To HTTP thread:
name|void
name|startHttpRequest
argument_list|()
block|;
name|void
name|abortHttpRequest
argument_list|()
block|;
name|void
name|startHttpRequestSynchronously
argument_list|()
block|;
name|void
name|haveUploadData
argument_list|(
argument|QByteArray dataArray
argument_list|,
argument|bool dataAtEnd
argument_list|,
argument|qint64 dataSize
argument_list|)
block|;
name|private
name|slots
operator|:
comment|// From HTTP thread:
name|void
name|replyDownloadData
argument_list|(
name|QByteArray
argument_list|)
block|;
name|void
name|replyFinished
argument_list|()
block|;
name|void
name|replyDownloadMetaData
argument_list|(
name|QList
operator|<
name|QPair
operator|<
name|QByteArray
argument_list|,
name|QByteArray
operator|>
expr|>
argument_list|,
name|int
argument_list|,
name|QString
argument_list|,
name|bool
argument_list|,
name|QSharedPointer
operator|<
name|char
operator|>
argument_list|,
name|qint64
argument_list|)
block|;
name|void
name|replyDownloadProgressSlot
argument_list|(
name|qint64
argument_list|,
name|qint64
argument_list|)
block|;
name|void
name|httpAuthenticationRequired
argument_list|(
specifier|const
name|QHttpNetworkRequest
operator|&
name|request
argument_list|,
name|QAuthenticator
operator|*
name|auth
argument_list|)
block|;
name|void
name|httpError
argument_list|(
argument|QNetworkReply::NetworkError error
argument_list|,
argument|const QString&errorString
argument_list|)
block|;
ifndef|#
directive|ifndef
name|QT_NO_OPENSSL
name|void
name|replySslErrors
argument_list|(
specifier|const
name|QList
operator|<
name|QSslError
operator|>
operator|&
argument_list|,
name|bool
operator|*
argument_list|,
name|QList
operator|<
name|QSslError
operator|>
operator|*
argument_list|)
block|;
name|void
name|replySslConfigurationChanged
argument_list|(
specifier|const
name|QSslConfiguration
operator|&
argument_list|)
block|;
endif|#
directive|endif
comment|// From QNonContiguousByteDeviceThreadForwardImpl in HTTP thread:
name|void
name|resetUploadDataSlot
argument_list|(
name|bool
operator|*
name|r
argument_list|)
block|;
name|void
name|wantUploadDataSlot
argument_list|(
name|qint64
argument_list|)
block|;
name|void
name|sentUploadDataSlot
argument_list|(
name|qint64
argument_list|)
block|;
name|bool
name|sendCacheContents
argument_list|(
specifier|const
name|QNetworkCacheMetaData
operator|&
name|metaData
argument_list|)
block|;
name|private
operator|:
name|QHttpNetworkRequest
name|httpRequest
block|;
comment|// There is also a copy in the HTTP thread
name|int
name|statusCode
block|;
name|QString
name|reasonPhrase
block|;
comment|// Will be increased by HTTP thread:
name|QSharedPointer
operator|<
name|QAtomicInt
operator|>
name|pendingDownloadDataEmissions
block|;
name|QSharedPointer
operator|<
name|QAtomicInt
operator|>
name|pendingDownloadProgressEmissions
block|;
name|bool
name|loadingFromCache
block|;
name|QByteDataBuffer
name|pendingDownloadData
block|;
name|bool
name|usingZerocopyDownloadBuffer
block|;
ifndef|#
directive|ifndef
name|QT_NO_OPENSSL
name|QSslConfiguration
operator|*
name|pendingSslConfiguration
block|;
name|bool
name|pendingIgnoreAllSslErrors
block|;
name|QList
operator|<
name|QSslError
operator|>
name|pendingIgnoreSslErrorsList
block|;
endif|#
directive|endif
name|quint64
name|resumeOffset
block|;
name|void
name|validateCache
argument_list|(
name|QHttpNetworkRequest
operator|&
name|httpRequest
argument_list|,
name|bool
operator|&
name|loadedFromCache
argument_list|)
block|;
name|void
name|invalidateCache
argument_list|()
block|;
name|void
name|postRequest
argument_list|()
block|;
name|void
name|readFromHttp
argument_list|()
block|;
name|void
name|checkForRedirect
argument_list|(
argument|const int statusCode
argument_list|)
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QNetworkAccessHttpBackendFactory
range|:
name|public
name|QNetworkAccessBackendFactory
block|{
name|public
operator|:
name|virtual
name|QNetworkAccessBackend
operator|*
name|create
argument_list|(
argument|QNetworkAccessManager::Operation op
argument_list|,
argument|const QNetworkRequest&request
argument_list|)
specifier|const
block|; }
decl_stmt|;
end_decl_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_HTTP
end_comment
begin_endif
endif|#
directive|endif
end_endif
end_unit
