begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 BlackBerry Limited. All rights reserved. ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtNetwork module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<private/qspdyprotocolhandler_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qnoncontiguousbytedevice_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qhttpnetworkconnectionchannel_p.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/QtEndian>
end_include
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_HTTP
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_SSL
argument_list|)
end_if
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|spdyDictionary
specifier|static
specifier|const
name|char
name|spdyDictionary
index|[]
init|=
block|{
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x07
block|,
literal|0x6f
block|,
literal|0x70
block|,
literal|0x74
block|,
literal|0x69
block|,
comment|// ....opti
literal|0x6f
block|,
literal|0x6e
block|,
literal|0x73
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x04
block|,
literal|0x68
block|,
comment|// ons....h
literal|0x65
block|,
literal|0x61
block|,
literal|0x64
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x04
block|,
literal|0x70
block|,
comment|// ead....p
literal|0x6f
block|,
literal|0x73
block|,
literal|0x74
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x03
block|,
literal|0x70
block|,
comment|// ost....p
literal|0x75
block|,
literal|0x74
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x06
block|,
literal|0x64
block|,
literal|0x65
block|,
comment|// ut....de
literal|0x6c
block|,
literal|0x65
block|,
literal|0x74
block|,
literal|0x65
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x05
block|,
comment|// lete....
literal|0x74
block|,
literal|0x72
block|,
literal|0x61
block|,
literal|0x63
block|,
literal|0x65
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
comment|// trace...
literal|0x06
block|,
literal|0x61
block|,
literal|0x63
block|,
literal|0x63
block|,
literal|0x65
block|,
literal|0x70
block|,
literal|0x74
block|,
literal|0x00
block|,
comment|// .accept.
literal|0x00
block|,
literal|0x00
block|,
literal|0x0e
block|,
literal|0x61
block|,
literal|0x63
block|,
literal|0x63
block|,
literal|0x65
block|,
literal|0x70
block|,
comment|// ...accep
literal|0x74
block|,
literal|0x2d
block|,
literal|0x63
block|,
literal|0x68
block|,
literal|0x61
block|,
literal|0x72
block|,
literal|0x73
block|,
literal|0x65
block|,
comment|// t-charse
literal|0x74
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x0f
block|,
literal|0x61
block|,
literal|0x63
block|,
literal|0x63
block|,
comment|// t....acc
literal|0x65
block|,
literal|0x70
block|,
literal|0x74
block|,
literal|0x2d
block|,
literal|0x65
block|,
literal|0x6e
block|,
literal|0x63
block|,
literal|0x6f
block|,
comment|// ept-enco
literal|0x64
block|,
literal|0x69
block|,
literal|0x6e
block|,
literal|0x67
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x0f
block|,
comment|// ding....
literal|0x61
block|,
literal|0x63
block|,
literal|0x63
block|,
literal|0x65
block|,
literal|0x70
block|,
literal|0x74
block|,
literal|0x2d
block|,
literal|0x6c
block|,
comment|// accept-l
literal|0x61
block|,
literal|0x6e
block|,
literal|0x67
block|,
literal|0x75
block|,
literal|0x61
block|,
literal|0x67
block|,
literal|0x65
block|,
literal|0x00
block|,
comment|// anguage.
literal|0x00
block|,
literal|0x00
block|,
literal|0x0d
block|,
literal|0x61
block|,
literal|0x63
block|,
literal|0x63
block|,
literal|0x65
block|,
literal|0x70
block|,
comment|// ...accep
literal|0x74
block|,
literal|0x2d
block|,
literal|0x72
block|,
literal|0x61
block|,
literal|0x6e
block|,
literal|0x67
block|,
literal|0x65
block|,
literal|0x73
block|,
comment|// t-ranges
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x03
block|,
literal|0x61
block|,
literal|0x67
block|,
literal|0x65
block|,
literal|0x00
block|,
comment|// ....age.
literal|0x00
block|,
literal|0x00
block|,
literal|0x05
block|,
literal|0x61
block|,
literal|0x6c
block|,
literal|0x6c
block|,
literal|0x6f
block|,
literal|0x77
block|,
comment|// ...allow
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x0d
block|,
literal|0x61
block|,
literal|0x75
block|,
literal|0x74
block|,
literal|0x68
block|,
comment|// ....auth
literal|0x6f
block|,
literal|0x72
block|,
literal|0x69
block|,
literal|0x7a
block|,
literal|0x61
block|,
literal|0x74
block|,
literal|0x69
block|,
literal|0x6f
block|,
comment|// orizatio
literal|0x6e
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x0d
block|,
literal|0x63
block|,
literal|0x61
block|,
literal|0x63
block|,
comment|// n....cac
literal|0x68
block|,
literal|0x65
block|,
literal|0x2d
block|,
literal|0x63
block|,
literal|0x6f
block|,
literal|0x6e
block|,
literal|0x74
block|,
literal|0x72
block|,
comment|// he-contr
literal|0x6f
block|,
literal|0x6c
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x0a
block|,
literal|0x63
block|,
literal|0x6f
block|,
comment|// ol....co
literal|0x6e
block|,
literal|0x6e
block|,
literal|0x65
block|,
literal|0x63
block|,
literal|0x74
block|,
literal|0x69
block|,
literal|0x6f
block|,
literal|0x6e
block|,
comment|// nnection
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x0c
block|,
literal|0x63
block|,
literal|0x6f
block|,
literal|0x6e
block|,
literal|0x74
block|,
comment|// ....cont
literal|0x65
block|,
literal|0x6e
block|,
literal|0x74
block|,
literal|0x2d
block|,
literal|0x62
block|,
literal|0x61
block|,
literal|0x73
block|,
literal|0x65
block|,
comment|// ent-base
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x10
block|,
literal|0x63
block|,
literal|0x6f
block|,
literal|0x6e
block|,
literal|0x74
block|,
comment|// ....cont
literal|0x65
block|,
literal|0x6e
block|,
literal|0x74
block|,
literal|0x2d
block|,
literal|0x65
block|,
literal|0x6e
block|,
literal|0x63
block|,
literal|0x6f
block|,
comment|// ent-enco
literal|0x64
block|,
literal|0x69
block|,
literal|0x6e
block|,
literal|0x67
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x10
block|,
comment|// ding....
literal|0x63
block|,
literal|0x6f
block|,
literal|0x6e
block|,
literal|0x74
block|,
literal|0x65
block|,
literal|0x6e
block|,
literal|0x74
block|,
literal|0x2d
block|,
comment|// content-
literal|0x6c
block|,
literal|0x61
block|,
literal|0x6e
block|,
literal|0x67
block|,
literal|0x75
block|,
literal|0x61
block|,
literal|0x67
block|,
literal|0x65
block|,
comment|// language
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x0e
block|,
literal|0x63
block|,
literal|0x6f
block|,
literal|0x6e
block|,
literal|0x74
block|,
comment|// ....cont
literal|0x65
block|,
literal|0x6e
block|,
literal|0x74
block|,
literal|0x2d
block|,
literal|0x6c
block|,
literal|0x65
block|,
literal|0x6e
block|,
literal|0x67
block|,
comment|// ent-leng
literal|0x74
block|,
literal|0x68
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x10
block|,
literal|0x63
block|,
literal|0x6f
block|,
comment|// th....co
literal|0x6e
block|,
literal|0x74
block|,
literal|0x65
block|,
literal|0x6e
block|,
literal|0x74
block|,
literal|0x2d
block|,
literal|0x6c
block|,
literal|0x6f
block|,
comment|// ntent-lo
literal|0x63
block|,
literal|0x61
block|,
literal|0x74
block|,
literal|0x69
block|,
literal|0x6f
block|,
literal|0x6e
block|,
literal|0x00
block|,
literal|0x00
block|,
comment|// cation..
literal|0x00
block|,
literal|0x0b
block|,
literal|0x63
block|,
literal|0x6f
block|,
literal|0x6e
block|,
literal|0x74
block|,
literal|0x65
block|,
literal|0x6e
block|,
comment|// ..conten
literal|0x74
block|,
literal|0x2d
block|,
literal|0x6d
block|,
literal|0x64
block|,
literal|0x35
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
comment|// t-md5...
literal|0x0d
block|,
literal|0x63
block|,
literal|0x6f
block|,
literal|0x6e
block|,
literal|0x74
block|,
literal|0x65
block|,
literal|0x6e
block|,
literal|0x74
block|,
comment|// .content
literal|0x2d
block|,
literal|0x72
block|,
literal|0x61
block|,
literal|0x6e
block|,
literal|0x67
block|,
literal|0x65
block|,
literal|0x00
block|,
literal|0x00
block|,
comment|// -range..
literal|0x00
block|,
literal|0x0c
block|,
literal|0x63
block|,
literal|0x6f
block|,
literal|0x6e
block|,
literal|0x74
block|,
literal|0x65
block|,
literal|0x6e
block|,
comment|// ..conten
literal|0x74
block|,
literal|0x2d
block|,
literal|0x74
block|,
literal|0x79
block|,
literal|0x70
block|,
literal|0x65
block|,
literal|0x00
block|,
literal|0x00
block|,
comment|// t-type..
literal|0x00
block|,
literal|0x04
block|,
literal|0x64
block|,
literal|0x61
block|,
literal|0x74
block|,
literal|0x65
block|,
literal|0x00
block|,
literal|0x00
block|,
comment|// ..date..
literal|0x00
block|,
literal|0x04
block|,
literal|0x65
block|,
literal|0x74
block|,
literal|0x61
block|,
literal|0x67
block|,
literal|0x00
block|,
literal|0x00
block|,
comment|// ..etag..
literal|0x00
block|,
literal|0x06
block|,
literal|0x65
block|,
literal|0x78
block|,
literal|0x70
block|,
literal|0x65
block|,
literal|0x63
block|,
literal|0x74
block|,
comment|// ..expect
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x07
block|,
literal|0x65
block|,
literal|0x78
block|,
literal|0x70
block|,
literal|0x69
block|,
comment|// ....expi
literal|0x72
block|,
literal|0x65
block|,
literal|0x73
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x04
block|,
literal|0x66
block|,
comment|// res....f
literal|0x72
block|,
literal|0x6f
block|,
literal|0x6d
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x04
block|,
literal|0x68
block|,
comment|// rom....h
literal|0x6f
block|,
literal|0x73
block|,
literal|0x74
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x08
block|,
literal|0x69
block|,
comment|// ost....i
literal|0x66
block|,
literal|0x2d
block|,
literal|0x6d
block|,
literal|0x61
block|,
literal|0x74
block|,
literal|0x63
block|,
literal|0x68
block|,
literal|0x00
block|,
comment|// f-match.
literal|0x00
block|,
literal|0x00
block|,
literal|0x11
block|,
literal|0x69
block|,
literal|0x66
block|,
literal|0x2d
block|,
literal|0x6d
block|,
literal|0x6f
block|,
comment|// ...if-mo
literal|0x64
block|,
literal|0x69
block|,
literal|0x66
block|,
literal|0x69
block|,
literal|0x65
block|,
literal|0x64
block|,
literal|0x2d
block|,
literal|0x73
block|,
comment|// dified-s
literal|0x69
block|,
literal|0x6e
block|,
literal|0x63
block|,
literal|0x65
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x0d
block|,
comment|// ince....
literal|0x69
block|,
literal|0x66
block|,
literal|0x2d
block|,
literal|0x6e
block|,
literal|0x6f
block|,
literal|0x6e
block|,
literal|0x65
block|,
literal|0x2d
block|,
comment|// if-none-
literal|0x6d
block|,
literal|0x61
block|,
literal|0x74
block|,
literal|0x63
block|,
literal|0x68
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
comment|// match...
literal|0x08
block|,
literal|0x69
block|,
literal|0x66
block|,
literal|0x2d
block|,
literal|0x72
block|,
literal|0x61
block|,
literal|0x6e
block|,
literal|0x67
block|,
comment|// .if-rang
literal|0x65
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x13
block|,
literal|0x69
block|,
literal|0x66
block|,
literal|0x2d
block|,
comment|// e....if-
literal|0x75
block|,
literal|0x6e
block|,
literal|0x6d
block|,
literal|0x6f
block|,
literal|0x64
block|,
literal|0x69
block|,
literal|0x66
block|,
literal|0x69
block|,
comment|// unmodifi
literal|0x65
block|,
literal|0x64
block|,
literal|0x2d
block|,
literal|0x73
block|,
literal|0x69
block|,
literal|0x6e
block|,
literal|0x63
block|,
literal|0x65
block|,
comment|// ed-since
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x0d
block|,
literal|0x6c
block|,
literal|0x61
block|,
literal|0x73
block|,
literal|0x74
block|,
comment|// ....last
literal|0x2d
block|,
literal|0x6d
block|,
literal|0x6f
block|,
literal|0x64
block|,
literal|0x69
block|,
literal|0x66
block|,
literal|0x69
block|,
literal|0x65
block|,
comment|// -modifie
literal|0x64
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x08
block|,
literal|0x6c
block|,
literal|0x6f
block|,
literal|0x63
block|,
comment|// d....loc
literal|0x61
block|,
literal|0x74
block|,
literal|0x69
block|,
literal|0x6f
block|,
literal|0x6e
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
comment|// ation...
literal|0x0c
block|,
literal|0x6d
block|,
literal|0x61
block|,
literal|0x78
block|,
literal|0x2d
block|,
literal|0x66
block|,
literal|0x6f
block|,
literal|0x72
block|,
comment|// .max-for
literal|0x77
block|,
literal|0x61
block|,
literal|0x72
block|,
literal|0x64
block|,
literal|0x73
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
comment|// wards...
literal|0x06
block|,
literal|0x70
block|,
literal|0x72
block|,
literal|0x61
block|,
literal|0x67
block|,
literal|0x6d
block|,
literal|0x61
block|,
literal|0x00
block|,
comment|// .pragma.
literal|0x00
block|,
literal|0x00
block|,
literal|0x12
block|,
literal|0x70
block|,
literal|0x72
block|,
literal|0x6f
block|,
literal|0x78
block|,
literal|0x79
block|,
comment|// ...proxy
literal|0x2d
block|,
literal|0x61
block|,
literal|0x75
block|,
literal|0x74
block|,
literal|0x68
block|,
literal|0x65
block|,
literal|0x6e
block|,
literal|0x74
block|,
comment|// -authent
literal|0x69
block|,
literal|0x63
block|,
literal|0x61
block|,
literal|0x74
block|,
literal|0x65
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
comment|// icate...
literal|0x13
block|,
literal|0x70
block|,
literal|0x72
block|,
literal|0x6f
block|,
literal|0x78
block|,
literal|0x79
block|,
literal|0x2d
block|,
literal|0x61
block|,
comment|// .proxy-a
literal|0x75
block|,
literal|0x74
block|,
literal|0x68
block|,
literal|0x6f
block|,
literal|0x72
block|,
literal|0x69
block|,
literal|0x7a
block|,
literal|0x61
block|,
comment|// uthoriza
literal|0x74
block|,
literal|0x69
block|,
literal|0x6f
block|,
literal|0x6e
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x05
block|,
comment|// tion....
literal|0x72
block|,
literal|0x61
block|,
literal|0x6e
block|,
literal|0x67
block|,
literal|0x65
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
comment|// range...
literal|0x07
block|,
literal|0x72
block|,
literal|0x65
block|,
literal|0x66
block|,
literal|0x65
block|,
literal|0x72
block|,
literal|0x65
block|,
literal|0x72
block|,
comment|// .referer
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x0b
block|,
literal|0x72
block|,
literal|0x65
block|,
literal|0x74
block|,
literal|0x72
block|,
comment|// ....retr
literal|0x79
block|,
literal|0x2d
block|,
literal|0x61
block|,
literal|0x66
block|,
literal|0x74
block|,
literal|0x65
block|,
literal|0x72
block|,
literal|0x00
block|,
comment|// y-after.
literal|0x00
block|,
literal|0x00
block|,
literal|0x06
block|,
literal|0x73
block|,
literal|0x65
block|,
literal|0x72
block|,
literal|0x76
block|,
literal|0x65
block|,
comment|// ...serve
literal|0x72
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x02
block|,
literal|0x74
block|,
literal|0x65
block|,
literal|0x00
block|,
comment|// r....te.
literal|0x00
block|,
literal|0x00
block|,
literal|0x07
block|,
literal|0x74
block|,
literal|0x72
block|,
literal|0x61
block|,
literal|0x69
block|,
literal|0x6c
block|,
comment|// ...trail
literal|0x65
block|,
literal|0x72
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x11
block|,
literal|0x74
block|,
literal|0x72
block|,
comment|// er....tr
literal|0x61
block|,
literal|0x6e
block|,
literal|0x73
block|,
literal|0x66
block|,
literal|0x65
block|,
literal|0x72
block|,
literal|0x2d
block|,
literal|0x65
block|,
comment|// ansfer-e
literal|0x6e
block|,
literal|0x63
block|,
literal|0x6f
block|,
literal|0x64
block|,
literal|0x69
block|,
literal|0x6e
block|,
literal|0x67
block|,
literal|0x00
block|,
comment|// ncoding.
literal|0x00
block|,
literal|0x00
block|,
literal|0x07
block|,
literal|0x75
block|,
literal|0x70
block|,
literal|0x67
block|,
literal|0x72
block|,
literal|0x61
block|,
comment|// ...upgra
literal|0x64
block|,
literal|0x65
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x0a
block|,
literal|0x75
block|,
literal|0x73
block|,
comment|// de....us
literal|0x65
block|,
literal|0x72
block|,
literal|0x2d
block|,
literal|0x61
block|,
literal|0x67
block|,
literal|0x65
block|,
literal|0x6e
block|,
literal|0x74
block|,
comment|// er-agent
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x04
block|,
literal|0x76
block|,
literal|0x61
block|,
literal|0x72
block|,
literal|0x79
block|,
comment|// ....vary
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x03
block|,
literal|0x76
block|,
literal|0x69
block|,
literal|0x61
block|,
literal|0x00
block|,
comment|// ....via.
literal|0x00
block|,
literal|0x00
block|,
literal|0x07
block|,
literal|0x77
block|,
literal|0x61
block|,
literal|0x72
block|,
literal|0x6e
block|,
literal|0x69
block|,
comment|// ...warni
literal|0x6e
block|,
literal|0x67
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x10
block|,
literal|0x77
block|,
literal|0x77
block|,
comment|// ng....ww
literal|0x77
block|,
literal|0x2d
block|,
literal|0x61
block|,
literal|0x75
block|,
literal|0x74
block|,
literal|0x68
block|,
literal|0x65
block|,
literal|0x6e
block|,
comment|// w-authen
literal|0x74
block|,
literal|0x69
block|,
literal|0x63
block|,
literal|0x61
block|,
literal|0x74
block|,
literal|0x65
block|,
literal|0x00
block|,
literal|0x00
block|,
comment|// ticate..
literal|0x00
block|,
literal|0x06
block|,
literal|0x6d
block|,
literal|0x65
block|,
literal|0x74
block|,
literal|0x68
block|,
literal|0x6f
block|,
literal|0x64
block|,
comment|// ..method
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x03
block|,
literal|0x67
block|,
literal|0x65
block|,
literal|0x74
block|,
literal|0x00
block|,
comment|// ....get.
literal|0x00
block|,
literal|0x00
block|,
literal|0x06
block|,
literal|0x73
block|,
literal|0x74
block|,
literal|0x61
block|,
literal|0x74
block|,
literal|0x75
block|,
comment|// ...statu
literal|0x73
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x06
block|,
literal|0x32
block|,
literal|0x30
block|,
literal|0x30
block|,
comment|// s....200
literal|0x20
block|,
literal|0x4f
block|,
literal|0x4b
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x07
block|,
literal|0x76
block|,
comment|// .OK....v
literal|0x65
block|,
literal|0x72
block|,
literal|0x73
block|,
literal|0x69
block|,
literal|0x6f
block|,
literal|0x6e
block|,
literal|0x00
block|,
literal|0x00
block|,
comment|// ersion..
literal|0x00
block|,
literal|0x08
block|,
literal|0x48
block|,
literal|0x54
block|,
literal|0x54
block|,
literal|0x50
block|,
literal|0x2f
block|,
literal|0x31
block|,
comment|// ..HTTP.1
literal|0x2e
block|,
literal|0x31
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x03
block|,
literal|0x75
block|,
literal|0x72
block|,
comment|// .1....ur
literal|0x6c
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x06
block|,
literal|0x70
block|,
literal|0x75
block|,
literal|0x62
block|,
comment|// l....pub
literal|0x6c
block|,
literal|0x69
block|,
literal|0x63
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x0a
block|,
literal|0x73
block|,
comment|// lic....s
literal|0x65
block|,
literal|0x74
block|,
literal|0x2d
block|,
literal|0x63
block|,
literal|0x6f
block|,
literal|0x6f
block|,
literal|0x6b
block|,
literal|0x69
block|,
comment|// et-cooki
literal|0x65
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x0a
block|,
literal|0x6b
block|,
literal|0x65
block|,
literal|0x65
block|,
comment|// e....kee
literal|0x70
block|,
literal|0x2d
block|,
literal|0x61
block|,
literal|0x6c
block|,
literal|0x69
block|,
literal|0x76
block|,
literal|0x65
block|,
literal|0x00
block|,
comment|// p-alive.
literal|0x00
block|,
literal|0x00
block|,
literal|0x06
block|,
literal|0x6f
block|,
literal|0x72
block|,
literal|0x69
block|,
literal|0x67
block|,
literal|0x69
block|,
comment|// ...origi
literal|0x6e
block|,
literal|0x31
block|,
literal|0x30
block|,
literal|0x30
block|,
literal|0x31
block|,
literal|0x30
block|,
literal|0x31
block|,
literal|0x32
block|,
comment|// n1001012
literal|0x30
block|,
literal|0x31
block|,
literal|0x32
block|,
literal|0x30
block|,
literal|0x32
block|,
literal|0x32
block|,
literal|0x30
block|,
literal|0x35
block|,
comment|// 01202205
literal|0x32
block|,
literal|0x30
block|,
literal|0x36
block|,
literal|0x33
block|,
literal|0x30
block|,
literal|0x30
block|,
literal|0x33
block|,
literal|0x30
block|,
comment|// 20630030
literal|0x32
block|,
literal|0x33
block|,
literal|0x30
block|,
literal|0x33
block|,
literal|0x33
block|,
literal|0x30
block|,
literal|0x34
block|,
literal|0x33
block|,
comment|// 23033043
literal|0x30
block|,
literal|0x35
block|,
literal|0x33
block|,
literal|0x30
block|,
literal|0x36
block|,
literal|0x33
block|,
literal|0x30
block|,
literal|0x37
block|,
comment|// 05306307
literal|0x34
block|,
literal|0x30
block|,
literal|0x32
block|,
literal|0x34
block|,
literal|0x30
block|,
literal|0x35
block|,
literal|0x34
block|,
literal|0x30
block|,
comment|// 40240540
literal|0x36
block|,
literal|0x34
block|,
literal|0x30
block|,
literal|0x37
block|,
literal|0x34
block|,
literal|0x30
block|,
literal|0x38
block|,
literal|0x34
block|,
comment|// 64074084
literal|0x30
block|,
literal|0x39
block|,
literal|0x34
block|,
literal|0x31
block|,
literal|0x30
block|,
literal|0x34
block|,
literal|0x31
block|,
literal|0x31
block|,
comment|// 09410411
literal|0x34
block|,
literal|0x31
block|,
literal|0x32
block|,
literal|0x34
block|,
literal|0x31
block|,
literal|0x33
block|,
literal|0x34
block|,
literal|0x31
block|,
comment|// 41241341
literal|0x34
block|,
literal|0x34
block|,
literal|0x31
block|,
literal|0x35
block|,
literal|0x34
block|,
literal|0x31
block|,
literal|0x36
block|,
literal|0x34
block|,
comment|// 44154164
literal|0x31
block|,
literal|0x37
block|,
literal|0x35
block|,
literal|0x30
block|,
literal|0x32
block|,
literal|0x35
block|,
literal|0x30
block|,
literal|0x34
block|,
comment|// 17502504
literal|0x35
block|,
literal|0x30
block|,
literal|0x35
block|,
literal|0x32
block|,
literal|0x30
block|,
literal|0x33
block|,
literal|0x20
block|,
literal|0x4e
block|,
comment|// 505203.N
literal|0x6f
block|,
literal|0x6e
block|,
literal|0x2d
block|,
literal|0x41
block|,
literal|0x75
block|,
literal|0x74
block|,
literal|0x68
block|,
literal|0x6f
block|,
comment|// on-Autho
literal|0x72
block|,
literal|0x69
block|,
literal|0x74
block|,
literal|0x61
block|,
literal|0x74
block|,
literal|0x69
block|,
literal|0x76
block|,
literal|0x65
block|,
comment|// ritative
literal|0x20
block|,
literal|0x49
block|,
literal|0x6e
block|,
literal|0x66
block|,
literal|0x6f
block|,
literal|0x72
block|,
literal|0x6d
block|,
literal|0x61
block|,
comment|// .Informa
literal|0x74
block|,
literal|0x69
block|,
literal|0x6f
block|,
literal|0x6e
block|,
literal|0x32
block|,
literal|0x30
block|,
literal|0x34
block|,
literal|0x20
block|,
comment|// tion204.
literal|0x4e
block|,
literal|0x6f
block|,
literal|0x20
block|,
literal|0x43
block|,
literal|0x6f
block|,
literal|0x6e
block|,
literal|0x74
block|,
literal|0x65
block|,
comment|// No.Conte
literal|0x6e
block|,
literal|0x74
block|,
literal|0x33
block|,
literal|0x30
block|,
literal|0x31
block|,
literal|0x20
block|,
literal|0x4d
block|,
literal|0x6f
block|,
comment|// nt301.Mo
literal|0x76
block|,
literal|0x65
block|,
literal|0x64
block|,
literal|0x20
block|,
literal|0x50
block|,
literal|0x65
block|,
literal|0x72
block|,
literal|0x6d
block|,
comment|// ved.Perm
literal|0x61
block|,
literal|0x6e
block|,
literal|0x65
block|,
literal|0x6e
block|,
literal|0x74
block|,
literal|0x6c
block|,
literal|0x79
block|,
literal|0x34
block|,
comment|// anently4
literal|0x30
block|,
literal|0x30
block|,
literal|0x20
block|,
literal|0x42
block|,
literal|0x61
block|,
literal|0x64
block|,
literal|0x20
block|,
literal|0x52
block|,
comment|// 00.Bad.R
literal|0x65
block|,
literal|0x71
block|,
literal|0x75
block|,
literal|0x65
block|,
literal|0x73
block|,
literal|0x74
block|,
literal|0x34
block|,
literal|0x30
block|,
comment|// equest40
literal|0x31
block|,
literal|0x20
block|,
literal|0x55
block|,
literal|0x6e
block|,
literal|0x61
block|,
literal|0x75
block|,
literal|0x74
block|,
literal|0x68
block|,
comment|// 1.Unauth
literal|0x6f
block|,
literal|0x72
block|,
literal|0x69
block|,
literal|0x7a
block|,
literal|0x65
block|,
literal|0x64
block|,
literal|0x34
block|,
literal|0x30
block|,
comment|// orized40
literal|0x33
block|,
literal|0x20
block|,
literal|0x46
block|,
literal|0x6f
block|,
literal|0x72
block|,
literal|0x62
block|,
literal|0x69
block|,
literal|0x64
block|,
comment|// 3.Forbid
literal|0x64
block|,
literal|0x65
block|,
literal|0x6e
block|,
literal|0x34
block|,
literal|0x30
block|,
literal|0x34
block|,
literal|0x20
block|,
literal|0x4e
block|,
comment|// den404.N
literal|0x6f
block|,
literal|0x74
block|,
literal|0x20
block|,
literal|0x46
block|,
literal|0x6f
block|,
literal|0x75
block|,
literal|0x6e
block|,
literal|0x64
block|,
comment|// ot.Found
literal|0x35
block|,
literal|0x30
block|,
literal|0x30
block|,
literal|0x20
block|,
literal|0x49
block|,
literal|0x6e
block|,
literal|0x74
block|,
literal|0x65
block|,
comment|// 500.Inte
literal|0x72
block|,
literal|0x6e
block|,
literal|0x61
block|,
literal|0x6c
block|,
literal|0x20
block|,
literal|0x53
block|,
literal|0x65
block|,
literal|0x72
block|,
comment|// rnal.Ser
literal|0x76
block|,
literal|0x65
block|,
literal|0x72
block|,
literal|0x20
block|,
literal|0x45
block|,
literal|0x72
block|,
literal|0x72
block|,
literal|0x6f
block|,
comment|// ver.Erro
literal|0x72
block|,
literal|0x35
block|,
literal|0x30
block|,
literal|0x31
block|,
literal|0x20
block|,
literal|0x4e
block|,
literal|0x6f
block|,
literal|0x74
block|,
comment|// r501.Not
literal|0x20
block|,
literal|0x49
block|,
literal|0x6d
block|,
literal|0x70
block|,
literal|0x6c
block|,
literal|0x65
block|,
literal|0x6d
block|,
literal|0x65
block|,
comment|// .Impleme
literal|0x6e
block|,
literal|0x74
block|,
literal|0x65
block|,
literal|0x64
block|,
literal|0x35
block|,
literal|0x30
block|,
literal|0x33
block|,
literal|0x20
block|,
comment|// nted503.
literal|0x53
block|,
literal|0x65
block|,
literal|0x72
block|,
literal|0x76
block|,
literal|0x69
block|,
literal|0x63
block|,
literal|0x65
block|,
literal|0x20
block|,
comment|// Service.
literal|0x55
block|,
literal|0x6e
block|,
literal|0x61
block|,
literal|0x76
block|,
literal|0x61
block|,
literal|0x69
block|,
literal|0x6c
block|,
literal|0x61
block|,
comment|// Unavaila
literal|0x62
block|,
literal|0x6c
block|,
literal|0x65
block|,
literal|0x4a
block|,
literal|0x61
block|,
literal|0x6e
block|,
literal|0x20
block|,
literal|0x46
block|,
comment|// bleJan.F
literal|0x65
block|,
literal|0x62
block|,
literal|0x20
block|,
literal|0x4d
block|,
literal|0x61
block|,
literal|0x72
block|,
literal|0x20
block|,
literal|0x41
block|,
comment|// eb.Mar.A
literal|0x70
block|,
literal|0x72
block|,
literal|0x20
block|,
literal|0x4d
block|,
literal|0x61
block|,
literal|0x79
block|,
literal|0x20
block|,
literal|0x4a
block|,
comment|// pr.May.J
literal|0x75
block|,
literal|0x6e
block|,
literal|0x20
block|,
literal|0x4a
block|,
literal|0x75
block|,
literal|0x6c
block|,
literal|0x20
block|,
literal|0x41
block|,
comment|// un.Jul.A
literal|0x75
block|,
literal|0x67
block|,
literal|0x20
block|,
literal|0x53
block|,
literal|0x65
block|,
literal|0x70
block|,
literal|0x74
block|,
literal|0x20
block|,
comment|// ug.Sept.
literal|0x4f
block|,
literal|0x63
block|,
literal|0x74
block|,
literal|0x20
block|,
literal|0x4e
block|,
literal|0x6f
block|,
literal|0x76
block|,
literal|0x20
block|,
comment|// Oct.Nov.
literal|0x44
block|,
literal|0x65
block|,
literal|0x63
block|,
literal|0x20
block|,
literal|0x30
block|,
literal|0x30
block|,
literal|0x3a
block|,
literal|0x30
block|,
comment|// Dec.00.0
literal|0x30
block|,
literal|0x3a
block|,
literal|0x30
block|,
literal|0x30
block|,
literal|0x20
block|,
literal|0x4d
block|,
literal|0x6f
block|,
literal|0x6e
block|,
comment|// 0.00.Mon
literal|0x2c
block|,
literal|0x20
block|,
literal|0x54
block|,
literal|0x75
block|,
literal|0x65
block|,
literal|0x2c
block|,
literal|0x20
block|,
literal|0x57
block|,
comment|// ..Tue..W
literal|0x65
block|,
literal|0x64
block|,
literal|0x2c
block|,
literal|0x20
block|,
literal|0x54
block|,
literal|0x68
block|,
literal|0x75
block|,
literal|0x2c
block|,
comment|// ed..Thu.
literal|0x20
block|,
literal|0x46
block|,
literal|0x72
block|,
literal|0x69
block|,
literal|0x2c
block|,
literal|0x20
block|,
literal|0x53
block|,
literal|0x61
block|,
comment|// .Fri..Sa
literal|0x74
block|,
literal|0x2c
block|,
literal|0x20
block|,
literal|0x53
block|,
literal|0x75
block|,
literal|0x6e
block|,
literal|0x2c
block|,
literal|0x20
block|,
comment|// t..Sun..
literal|0x47
block|,
literal|0x4d
block|,
literal|0x54
block|,
literal|0x63
block|,
literal|0x68
block|,
literal|0x75
block|,
literal|0x6e
block|,
literal|0x6b
block|,
comment|// GMTchunk
literal|0x65
block|,
literal|0x64
block|,
literal|0x2c
block|,
literal|0x74
block|,
literal|0x65
block|,
literal|0x78
block|,
literal|0x74
block|,
literal|0x2f
block|,
comment|// ed.text.
literal|0x68
block|,
literal|0x74
block|,
literal|0x6d
block|,
literal|0x6c
block|,
literal|0x2c
block|,
literal|0x69
block|,
literal|0x6d
block|,
literal|0x61
block|,
comment|// html.ima
literal|0x67
block|,
literal|0x65
block|,
literal|0x2f
block|,
literal|0x70
block|,
literal|0x6e
block|,
literal|0x67
block|,
literal|0x2c
block|,
literal|0x69
block|,
comment|// ge.png.i
literal|0x6d
block|,
literal|0x61
block|,
literal|0x67
block|,
literal|0x65
block|,
literal|0x2f
block|,
literal|0x6a
block|,
literal|0x70
block|,
literal|0x67
block|,
comment|// mage.jpg
literal|0x2c
block|,
literal|0x69
block|,
literal|0x6d
block|,
literal|0x61
block|,
literal|0x67
block|,
literal|0x65
block|,
literal|0x2f
block|,
literal|0x67
block|,
comment|// .image.g
literal|0x69
block|,
literal|0x66
block|,
literal|0x2c
block|,
literal|0x61
block|,
literal|0x70
block|,
literal|0x70
block|,
literal|0x6c
block|,
literal|0x69
block|,
comment|// if.appli
literal|0x63
block|,
literal|0x61
block|,
literal|0x74
block|,
literal|0x69
block|,
literal|0x6f
block|,
literal|0x6e
block|,
literal|0x2f
block|,
literal|0x78
block|,
comment|// cation.x
literal|0x6d
block|,
literal|0x6c
block|,
literal|0x2c
block|,
literal|0x61
block|,
literal|0x70
block|,
literal|0x70
block|,
literal|0x6c
block|,
literal|0x69
block|,
comment|// ml.appli
literal|0x63
block|,
literal|0x61
block|,
literal|0x74
block|,
literal|0x69
block|,
literal|0x6f
block|,
literal|0x6e
block|,
literal|0x2f
block|,
literal|0x78
block|,
comment|// cation.x
literal|0x68
block|,
literal|0x74
block|,
literal|0x6d
block|,
literal|0x6c
block|,
literal|0x2b
block|,
literal|0x78
block|,
literal|0x6d
block|,
literal|0x6c
block|,
comment|// html.xml
literal|0x2c
block|,
literal|0x74
block|,
literal|0x65
block|,
literal|0x78
block|,
literal|0x74
block|,
literal|0x2f
block|,
literal|0x70
block|,
literal|0x6c
block|,
comment|// .text.pl
literal|0x61
block|,
literal|0x69
block|,
literal|0x6e
block|,
literal|0x2c
block|,
literal|0x74
block|,
literal|0x65
block|,
literal|0x78
block|,
literal|0x74
block|,
comment|// ain.text
literal|0x2f
block|,
literal|0x6a
block|,
literal|0x61
block|,
literal|0x76
block|,
literal|0x61
block|,
literal|0x73
block|,
literal|0x63
block|,
literal|0x72
block|,
comment|// .javascr
literal|0x69
block|,
literal|0x70
block|,
literal|0x74
block|,
literal|0x2c
block|,
literal|0x70
block|,
literal|0x75
block|,
literal|0x62
block|,
literal|0x6c
block|,
comment|// ipt.publ
literal|0x69
block|,
literal|0x63
block|,
literal|0x70
block|,
literal|0x72
block|,
literal|0x69
block|,
literal|0x76
block|,
literal|0x61
block|,
literal|0x74
block|,
comment|// icprivat
literal|0x65
block|,
literal|0x6d
block|,
literal|0x61
block|,
literal|0x78
block|,
literal|0x2d
block|,
literal|0x61
block|,
literal|0x67
block|,
literal|0x65
block|,
comment|// emax-age
literal|0x3d
block|,
literal|0x67
block|,
literal|0x7a
block|,
literal|0x69
block|,
literal|0x70
block|,
literal|0x2c
block|,
literal|0x64
block|,
literal|0x65
block|,
comment|// .gzip.de
literal|0x66
block|,
literal|0x6c
block|,
literal|0x61
block|,
literal|0x74
block|,
literal|0x65
block|,
literal|0x2c
block|,
literal|0x73
block|,
literal|0x64
block|,
comment|// flate.sd
literal|0x63
block|,
literal|0x68
block|,
literal|0x63
block|,
literal|0x68
block|,
literal|0x61
block|,
literal|0x72
block|,
literal|0x73
block|,
literal|0x65
block|,
comment|// chcharse
literal|0x74
block|,
literal|0x3d
block|,
literal|0x75
block|,
literal|0x74
block|,
literal|0x66
block|,
literal|0x2d
block|,
literal|0x38
block|,
literal|0x63
block|,
comment|// t.utf-8c
literal|0x68
block|,
literal|0x61
block|,
literal|0x72
block|,
literal|0x73
block|,
literal|0x65
block|,
literal|0x74
block|,
literal|0x3d
block|,
literal|0x69
block|,
comment|// harset.i
literal|0x73
block|,
literal|0x6f
block|,
literal|0x2d
block|,
literal|0x38
block|,
literal|0x38
block|,
literal|0x35
block|,
literal|0x39
block|,
literal|0x2d
block|,
comment|// so-8859-
literal|0x31
block|,
literal|0x2c
block|,
literal|0x75
block|,
literal|0x74
block|,
literal|0x66
block|,
literal|0x2d
block|,
literal|0x2c
block|,
literal|0x2a
block|,
comment|// 1.utf-..
literal|0x2c
block|,
literal|0x65
block|,
literal|0x6e
block|,
literal|0x71
block|,
literal|0x3d
block|,
literal|0x30
block|,
literal|0x2e
comment|// .enq.0.
block|}
decl_stmt|;
end_decl_stmt
begin_comment
comment|// uncomment to debug
end_comment
begin_comment
comment|//static void printHex(const QByteArray&ba)
end_comment
begin_comment
comment|//{
end_comment
begin_comment
comment|//    QByteArray hex;
end_comment
begin_comment
comment|//    QByteArray clearText;
end_comment
begin_comment
comment|//    for (int a = 0; a< ba.count(); ++a) {
end_comment
begin_comment
comment|//        QByteArray currentHexChar = QByteArray(1, ba.at(a)).toHex().rightJustified(2, ' ');
end_comment
begin_comment
comment|//        QByteArray currentChar;
end_comment
begin_comment
comment|//        if (ba.at(a)>= 32&& ba.at(a)< 126) { // if ASCII, print the letter
end_comment
begin_comment
comment|//            currentChar = QByteArray(1, ba.at(a));
end_comment
begin_comment
comment|//        } else {
end_comment
begin_comment
comment|//            currentChar = " ";
end_comment
begin_comment
comment|//        }
end_comment
begin_comment
comment|//        clearText.append(currentChar.rightJustified(2, ' '));
end_comment
begin_comment
comment|//        hex.append(currentHexChar);
end_comment
begin_comment
comment|//            hex.append(' ');
end_comment
begin_comment
comment|//            clearText.append(' ');
end_comment
begin_comment
comment|//    }
end_comment
begin_comment
comment|//    int chunkSize = 102; // 12 == 4 bytes per line
end_comment
begin_comment
comment|//    for (int a = 0; a< hex.count(); a += chunkSize) {
end_comment
begin_comment
comment|//        qDebug()<< hex.mid(a, chunkSize);
end_comment
begin_comment
comment|//        qDebug()<< clearText.mid(a, chunkSize);
end_comment
begin_comment
comment|//    }
end_comment
begin_comment
comment|//}
end_comment
begin_constructor
DECL|function|QSpdyProtocolHandler
name|QSpdyProtocolHandler
operator|::
name|QSpdyProtocolHandler
parameter_list|(
name|QHttpNetworkConnectionChannel
modifier|*
name|channel
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|QAbstractProtocolHandler
argument_list|(
name|channel
argument_list|)
member_init_list|,
name|m_nextStreamID
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|m_maxConcurrentStreams
argument_list|(
literal|100
argument_list|)
member_init_list|,
comment|// 100 is recommended in the SPDY RFC
name|m_initialWindowSize
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_waitingForCompleteStream
argument_list|(
literal|false
argument_list|)
block|{
name|m_inflateStream
operator|.
name|zalloc
operator|=
name|Z_NULL
expr_stmt|;
name|m_inflateStream
operator|.
name|zfree
operator|=
name|Z_NULL
expr_stmt|;
name|m_inflateStream
operator|.
name|opaque
operator|=
name|Z_NULL
expr_stmt|;
name|int
name|zlibRet
init|=
name|inflateInit
argument_list|(
operator|&
name|m_inflateStream
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|zlibRet
operator|==
name|Z_OK
argument_list|)
expr_stmt|;
name|m_deflateStream
operator|.
name|zalloc
operator|=
name|Z_NULL
expr_stmt|;
name|m_deflateStream
operator|.
name|zfree
operator|=
name|Z_NULL
expr_stmt|;
name|m_deflateStream
operator|.
name|opaque
operator|=
name|Z_NULL
expr_stmt|;
comment|// Do actually not compress (i.e. compression level = 0)
comment|// when sending the headers because of the CRIME attack
name|zlibRet
operator|=
name|deflateInit
argument_list|(
operator|&
name|m_deflateStream
argument_list|,
comment|/* compression level = */
literal|0
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|zlibRet
operator|==
name|Z_OK
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|zlibRet
argument_list|)
expr_stmt|;
comment|// silence -Wunused-variable
block|}
end_constructor
begin_destructor
DECL|function|~QSpdyProtocolHandler
name|QSpdyProtocolHandler
operator|::
name|~
name|QSpdyProtocolHandler
parameter_list|()
block|{
name|deflateEnd
argument_list|(
operator|&
name|m_deflateStream
argument_list|)
expr_stmt|;
name|deflateEnd
argument_list|(
operator|&
name|m_inflateStream
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|sendRequest
name|bool
name|QSpdyProtocolHandler
operator|::
name|sendRequest
parameter_list|()
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|m_reply
argument_list|)
expr_stmt|;
name|int
name|maxPossibleRequests
init|=
name|m_maxConcurrentStreams
operator|-
name|m_inFlightStreams
operator|.
name|count
argument_list|()
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|maxPossibleRequests
operator|>=
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|maxPossibleRequests
operator|==
literal|0
condition|)
return|return
literal|true
return|;
comment|// return early if max concurrent requests are exceeded
name|m_channel
operator|->
name|state
operator|=
name|QHttpNetworkConnectionChannel
operator|::
name|WritingState
expr_stmt|;
comment|// requests will be ordered by priority (see QMultiMap doc)
name|QList
argument_list|<
name|HttpMessagePair
argument_list|>
name|requests
init|=
name|m_channel
operator|->
name|spdyRequestsToSend
operator|.
name|values
argument_list|()
decl_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|priorities
init|=
name|m_channel
operator|->
name|spdyRequestsToSend
operator|.
name|keys
argument_list|()
decl_stmt|;
name|int
name|requestsToSend
init|=
name|qMin
argument_list|(
name|requests
operator|.
name|count
argument_list|()
argument_list|,
name|maxPossibleRequests
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|a
init|=
literal|0
init|;
name|a
operator|<
name|requestsToSend
condition|;
operator|++
name|a
control|)
block|{
name|HttpMessagePair
name|currentPair
init|=
name|requests
operator|.
name|at
argument_list|(
name|a
argument_list|)
decl_stmt|;
name|QHttpNetworkRequest
name|currentRequest
init|=
name|requests
operator|.
name|at
argument_list|(
name|a
argument_list|)
operator|.
name|first
decl_stmt|;
name|QHttpNetworkReply
modifier|*
name|currentReply
init|=
name|requests
operator|.
name|at
argument_list|(
name|a
argument_list|)
operator|.
name|second
decl_stmt|;
name|currentReply
operator|->
name|setSpdyWasUsed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|qint32
name|streamID
init|=
name|generateNextStreamID
argument_list|()
decl_stmt|;
name|currentReply
operator|->
name|setProperty
argument_list|(
literal|"SPDYStreamID"
argument_list|,
name|streamID
argument_list|)
expr_stmt|;
name|currentReply
operator|->
name|setRequest
argument_list|(
name|currentRequest
argument_list|)
expr_stmt|;
name|currentReply
operator|->
name|d_func
argument_list|()
operator|->
name|connection
operator|=
name|m_connection
expr_stmt|;
name|currentReply
operator|->
name|d_func
argument_list|()
operator|->
name|connectionChannel
operator|=
name|m_channel
expr_stmt|;
name|m_inFlightStreams
operator|.
name|insert
argument_list|(
name|streamID
argument_list|,
name|currentPair
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|currentReply
argument_list|,
name|SIGNAL
argument_list|(
name|destroyed
argument_list|(
name|QObject
operator|*
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_replyDestroyed
argument_list|(
name|QObject
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sendSYN_STREAM
argument_list|(
name|currentPair
argument_list|,
name|streamID
argument_list|,
comment|/* associatedToStreamID = */
literal|0
argument_list|)
expr_stmt|;
name|int
name|requestsRemoved
init|=
name|m_channel
operator|->
name|spdyRequestsToSend
operator|.
name|remove
argument_list|(
name|priorities
operator|.
name|at
argument_list|(
name|a
argument_list|)
argument_list|,
name|currentPair
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|requestsRemoved
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|requestsRemoved
argument_list|)
expr_stmt|;
comment|// silence -Wunused-variable
block|}
name|m_channel
operator|->
name|state
operator|=
name|QHttpNetworkConnectionChannel
operator|::
name|IdleState
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|_q_replyDestroyed
name|void
name|QSpdyProtocolHandler
operator|::
name|_q_replyDestroyed
parameter_list|(
name|QObject
modifier|*
name|reply
parameter_list|)
block|{
name|qint32
name|streamID
init|=
name|reply
operator|->
name|property
argument_list|(
literal|"SPDYStreamID"
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|m_inFlightStreams
operator|.
name|remove
argument_list|(
name|streamID
argument_list|)
condition|)
name|sendRST_STREAM
argument_list|(
name|streamID
argument_list|,
name|RST_STREAM_CANCEL
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|_q_receiveReply
name|void
name|QSpdyProtocolHandler
operator|::
name|_q_receiveReply
parameter_list|()
block|{
name|Q_ASSERT
argument_list|(
name|m_socket
argument_list|)
expr_stmt|;
comment|// only run when the QHttpNetworkConnection is not currently being destructed, e.g.
comment|// this function is called from _q_disconnected which is called because
comment|// of ~QHttpNetworkConnectionPrivate
if|if
condition|(
operator|!
name|qobject_cast
argument_list|<
name|QHttpNetworkConnection
operator|*
argument_list|>
argument_list|(
name|m_connection
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|bytesAvailable
argument_list|()
operator|<
literal|8
condition|)
return|return;
comment|// cannot read frame headers, wait for more data
name|char
name|frameHeadersRaw
index|[
literal|8
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|readNextChunk
argument_list|(
literal|8
argument_list|,
name|frameHeadersRaw
argument_list|)
condition|)
return|return;
comment|// this should not happen, we just checked
specifier|const
name|QByteArray
name|frameHeaders
argument_list|(
name|frameHeadersRaw
argument_list|,
literal|8
argument_list|)
decl_stmt|;
comment|// ### try without memcpy
if|if
condition|(
name|frameHeadersRaw
index|[
literal|0
index|]
operator|&
literal|0x80
condition|)
block|{
name|handleControlFrame
argument_list|(
name|frameHeaders
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|handleDataFrame
argument_list|(
name|frameHeaders
argument_list|)
expr_stmt|;
block|}
comment|// after handling the current frame, check whether there is more data waiting
if|if
condition|(
name|m_socket
operator|->
name|bytesAvailable
argument_list|()
operator|>
literal|0
condition|)
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
name|m_channel
argument_list|,
literal|"_q_receiveReply"
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|_q_readyRead
name|void
name|QSpdyProtocolHandler
operator|::
name|_q_readyRead
parameter_list|()
block|{
name|_q_receiveReply
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|twoBytesToInt
specifier|static
name|qint16
name|twoBytesToInt
parameter_list|(
specifier|const
name|char
modifier|*
name|bytes
parameter_list|)
block|{
return|return
name|qFromBigEndian
argument_list|<
name|qint16
argument_list|>
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|uchar
operator|*
argument_list|>
argument_list|(
name|bytes
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|threeBytesToInt
specifier|static
name|qint32
name|threeBytesToInt
parameter_list|(
specifier|const
name|char
modifier|*
name|bytes
parameter_list|)
block|{
return|return
name|qFromBigEndian
argument_list|<
name|qint32
argument_list|>
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|uchar
operator|*
argument_list|>
argument_list|(
name|bytes
argument_list|)
argument_list|)
operator|>>
literal|8
return|;
block|}
end_function
begin_function
DECL|function|fourBytesToInt
specifier|static
name|qint32
name|fourBytesToInt
parameter_list|(
specifier|const
name|char
modifier|*
name|bytes
parameter_list|)
block|{
return|return
name|qFromBigEndian
argument_list|<
name|qint32
argument_list|>
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|uchar
operator|*
argument_list|>
argument_list|(
name|bytes
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|appendIntToThreeBytes
specifier|static
name|void
name|appendIntToThreeBytes
parameter_list|(
name|char
modifier|*
name|output
parameter_list|,
name|qint32
name|number
parameter_list|)
block|{
name|qToBigEndian
argument_list|<
name|qint16
argument_list|>
argument_list|(
name|number
argument_list|,
cast|reinterpret_cast
argument_list|<
name|uchar
operator|*
argument_list|>
argument_list|(
name|output
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|qToBigEndian
argument_list|<
name|qint8
argument_list|>
argument_list|(
name|number
operator|>>
literal|16
argument_list|,
cast|reinterpret_cast
argument_list|<
name|uchar
operator|*
argument_list|>
argument_list|(
name|output
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|appendIntToFourBytes
specifier|static
name|void
name|appendIntToFourBytes
parameter_list|(
name|char
modifier|*
name|output
parameter_list|,
name|qint32
name|number
parameter_list|)
block|{
name|qToBigEndian
argument_list|<
name|qint32
argument_list|>
argument_list|(
name|number
argument_list|,
cast|reinterpret_cast
argument_list|<
name|uchar
operator|*
argument_list|>
argument_list|(
name|output
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|intToFourBytes
specifier|static
name|QByteArray
name|intToFourBytes
parameter_list|(
name|qint32
name|number
parameter_list|)
comment|// ### try to use appendIntToFourBytes where possible
block|{
name|uchar
name|data
index|[
literal|4
index|]
decl_stmt|;
name|qToBigEndian
argument_list|<
name|qint32
argument_list|>
argument_list|(
name|number
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|QByteArray
name|ret
argument_list|(
cast|reinterpret_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
argument_list|,
literal|4
argument_list|)
decl_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|intToThreeBytes
specifier|static
name|QByteArray
name|intToThreeBytes
parameter_list|(
name|qint32
name|number
parameter_list|)
block|{
name|uchar
name|data
index|[
literal|4
index|]
decl_stmt|;
name|qToBigEndian
argument_list|<
name|qint32
argument_list|>
argument_list|(
name|number
operator|<<
literal|8
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|QByteArray
name|ret
argument_list|(
cast|reinterpret_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
argument_list|,
literal|3
argument_list|)
decl_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|getStreamID
specifier|static
name|qint32
name|getStreamID
parameter_list|(
specifier|const
name|char
modifier|*
name|bytes
parameter_list|)
block|{
comment|// eliminate most significant bit; it might be 0 or 1 depending on whether
comment|// we are dealing with a control or data frame
return|return
name|fourBytesToInt
argument_list|(
name|bytes
argument_list|)
operator|&
literal|0x3fffffff
return|;
block|}
end_function
begin_function
DECL|function|headerField
specifier|static
name|QByteArray
name|headerField
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|name
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|value
parameter_list|)
block|{
name|QByteArray
name|ret
decl_stmt|;
name|ret
operator|.
name|reserve
argument_list|(
name|name
operator|.
name|count
argument_list|()
operator|+
name|value
operator|.
name|count
argument_list|()
operator|+
literal|8
argument_list|)
expr_stmt|;
comment|// 4 byte for length each
name|ret
operator|.
name|append
argument_list|(
name|intToFourBytes
argument_list|(
name|name
operator|.
name|count
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|append
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|ret
operator|.
name|append
argument_list|(
name|intToFourBytes
argument_list|(
name|value
operator|.
name|count
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|append
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|uncompressHeader
name|bool
name|QSpdyProtocolHandler
operator|::
name|uncompressHeader
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|input
parameter_list|,
name|QByteArray
modifier|*
name|output
parameter_list|)
block|{
specifier|const
name|size_t
name|chunkSize
init|=
literal|1024
decl_stmt|;
name|char
name|outputRaw
index|[
name|chunkSize
index|]
decl_stmt|;
comment|// input bytes will not be changed by zlib, so it is safe to const_cast here
name|m_inflateStream
operator|.
name|next_in
operator|=
cast|const_cast
argument_list|<
name|Bytef
operator|*
argument_list|>
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|Bytef
operator|*
argument_list|>
argument_list|(
name|input
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|m_inflateStream
operator|.
name|avail_in
operator|=
name|input
operator|.
name|count
argument_list|()
expr_stmt|;
name|m_inflateStream
operator|.
name|total_in
operator|=
name|input
operator|.
name|count
argument_list|()
expr_stmt|;
name|int
name|zlibRet
decl_stmt|;
do|do
block|{
name|m_inflateStream
operator|.
name|next_out
operator|=
cast|reinterpret_cast
argument_list|<
name|Bytef
operator|*
argument_list|>
argument_list|(
name|outputRaw
argument_list|)
expr_stmt|;
name|m_inflateStream
operator|.
name|avail_out
operator|=
name|chunkSize
expr_stmt|;
name|zlibRet
operator|=
name|inflate
argument_list|(
operator|&
name|m_inflateStream
argument_list|,
name|Z_SYNC_FLUSH
argument_list|)
expr_stmt|;
if|if
condition|(
name|zlibRet
operator|==
name|Z_NEED_DICT
condition|)
block|{
name|zlibRet
operator|=
name|inflateSetDictionary
argument_list|(
operator|&
name|m_inflateStream
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|Bytef
operator|*
argument_list|>
argument_list|(
name|spdyDictionary
argument_list|)
argument_list|,
comment|/* dictionaryLength = */
literal|1423
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|zlibRet
operator|==
name|Z_OK
argument_list|)
expr_stmt|;
continue|continue;
block|}
switch|switch
condition|(
name|zlibRet
condition|)
block|{
case|case
name|Z_BUF_ERROR
case|:
block|{
if|if
condition|(
name|m_inflateStream
operator|.
name|avail_in
operator|==
literal|0
condition|)
block|{
name|int
name|outputSize
init|=
name|chunkSize
operator|-
name|m_inflateStream
operator|.
name|avail_out
decl_stmt|;
name|output
operator|->
name|append
argument_list|(
name|outputRaw
argument_list|,
name|outputSize
argument_list|)
expr_stmt|;
name|m_inflateStream
operator|.
name|avail_out
operator|=
name|chunkSize
expr_stmt|;
block|}
break|break;
block|}
case|case
name|Z_OK
case|:
block|{
name|int
name|outputSize
init|=
name|chunkSize
operator|-
name|m_inflateStream
operator|.
name|avail_out
decl_stmt|;
name|output
operator|->
name|append
argument_list|(
name|outputRaw
argument_list|,
name|outputSize
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
name|qWarning
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"got unexpected zlib return value:"
operator|<<
name|zlibRet
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
do|while
condition|(
name|m_inflateStream
operator|.
name|avail_in
operator|>
literal|0
operator|&&
name|zlibRet
operator|!=
name|Z_STREAM_END
condition|)
do|;
name|Q_ASSERT
argument_list|(
name|m_inflateStream
operator|.
name|avail_in
operator|==
literal|0
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|composeHeader
name|QByteArray
name|QSpdyProtocolHandler
operator|::
name|composeHeader
parameter_list|(
specifier|const
name|QHttpNetworkRequest
modifier|&
name|request
parameter_list|)
block|{
name|QByteArray
name|uncompressedHeader
decl_stmt|;
name|uncompressedHeader
operator|.
name|reserve
argument_list|(
literal|300
argument_list|)
expr_stmt|;
comment|// rough estimate
comment|// calculate additional headers first, because we need to know the size
comment|// ### do not partially copy the list, but restrict the set header fields
comment|// in QHttpNetworkConnection
name|QList
argument_list|<
name|QPair
argument_list|<
name|QByteArray
argument_list|,
name|QByteArray
argument_list|>
argument_list|>
name|additionalHeaders
decl_stmt|;
for|for
control|(
name|int
name|a
init|=
literal|0
init|;
name|a
operator|<
name|request
operator|.
name|header
argument_list|()
operator|.
name|count
argument_list|()
condition|;
operator|++
name|a
control|)
block|{
name|QByteArray
name|key
init|=
name|request
operator|.
name|header
argument_list|()
operator|.
name|at
argument_list|(
name|a
argument_list|)
operator|.
name|first
decl_stmt|;
if|if
condition|(
name|key
operator|==
literal|"Connection"
operator|||
name|key
operator|==
literal|"Host"
operator|||
name|key
operator|==
literal|"Keep-Alive"
operator|||
name|key
operator|==
literal|"Proxy-Connection"
operator|||
name|key
operator|==
literal|"Transfer-Encoding"
condition|)
continue|continue;
comment|// those headers are not valid (section 3.2.1)
name|additionalHeaders
operator|.
name|append
argument_list|(
name|request
operator|.
name|header
argument_list|()
operator|.
name|at
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|qint32
name|numberOfHeaderPairs
init|=
literal|5
operator|+
name|additionalHeaders
operator|.
name|count
argument_list|()
decl_stmt|;
comment|// 5 mandatory below + the additional ones
name|uncompressedHeader
operator|.
name|append
argument_list|(
name|intToFourBytes
argument_list|(
name|numberOfHeaderPairs
argument_list|)
argument_list|)
expr_stmt|;
comment|// mandatory header fields:
name|uncompressedHeader
operator|.
name|append
argument_list|(
name|headerField
argument_list|(
literal|":method"
argument_list|,
name|request
operator|.
name|methodName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_NETWORKPROXY
name|bool
name|useProxy
init|=
name|m_connection
operator|->
name|d_func
argument_list|()
operator|->
name|networkProxy
operator|.
name|type
argument_list|()
operator|!=
name|QNetworkProxy
operator|::
name|NoProxy
decl_stmt|;
name|uncompressedHeader
operator|.
name|append
argument_list|(
name|headerField
argument_list|(
literal|":path"
argument_list|,
name|request
operator|.
name|uri
argument_list|(
name|useProxy
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
else|#
directive|else
name|uncompressedHeader
operator|.
name|append
argument_list|(
name|headerField
argument_list|(
literal|":path"
argument_list|,
name|request
operator|.
name|uri
argument_list|(
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|uncompressedHeader
operator|.
name|append
argument_list|(
name|headerField
argument_list|(
literal|":version"
argument_list|,
literal|"HTTP/1.1"
argument_list|)
argument_list|)
expr_stmt|;
name|QHostAddress
name|add
decl_stmt|;
comment|// ### unify with the host parsing from QHttpNetworkConnection
name|QByteArray
name|host
decl_stmt|;
name|QString
name|hostName
init|=
name|m_connection
operator|->
name|hostName
argument_list|()
decl_stmt|;
if|if
condition|(
name|add
operator|.
name|setAddress
argument_list|(
name|hostName
argument_list|)
condition|)
block|{
if|if
condition|(
name|add
operator|.
name|protocol
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|IPv6Protocol
condition|)
name|host
operator|=
literal|"["
operator|+
name|hostName
operator|.
name|toLatin1
argument_list|()
operator|+
literal|"]"
expr_stmt|;
comment|//format the ipv6 in the standard way
else|else
name|host
operator|=
name|hostName
operator|.
name|toLatin1
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|host
operator|=
name|QUrl
operator|::
name|toAce
argument_list|(
name|hostName
argument_list|)
expr_stmt|;
block|}
name|int
name|port
init|=
name|request
operator|.
name|url
argument_list|()
operator|.
name|port
argument_list|()
decl_stmt|;
if|if
condition|(
name|port
operator|!=
operator|-
literal|1
condition|)
block|{
name|host
operator|+=
literal|':'
expr_stmt|;
name|host
operator|+=
name|QByteArray
operator|::
name|number
argument_list|(
name|port
argument_list|)
expr_stmt|;
block|}
name|uncompressedHeader
operator|.
name|append
argument_list|(
name|headerField
argument_list|(
literal|":host"
argument_list|,
name|host
argument_list|)
argument_list|)
expr_stmt|;
name|uncompressedHeader
operator|.
name|append
argument_list|(
name|headerField
argument_list|(
literal|":scheme"
argument_list|,
name|request
operator|.
name|url
argument_list|()
operator|.
name|scheme
argument_list|()
operator|.
name|toLatin1
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// end of mandatory header fields
comment|// now add the additional headers
for|for
control|(
name|int
name|a
init|=
literal|0
init|;
name|a
operator|<
name|additionalHeaders
operator|.
name|count
argument_list|()
condition|;
operator|++
name|a
control|)
block|{
name|uncompressedHeader
operator|.
name|append
argument_list|(
name|headerField
argument_list|(
name|additionalHeaders
operator|.
name|at
argument_list|(
name|a
argument_list|)
operator|.
name|first
operator|.
name|toLower
argument_list|()
argument_list|,
name|additionalHeaders
operator|.
name|at
argument_list|(
name|a
argument_list|)
operator|.
name|second
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|m_deflateStream
operator|.
name|total_in
operator|=
name|uncompressedHeader
operator|.
name|count
argument_list|()
expr_stmt|;
name|m_deflateStream
operator|.
name|avail_in
operator|=
name|uncompressedHeader
operator|.
name|count
argument_list|()
expr_stmt|;
name|m_deflateStream
operator|.
name|next_in
operator|=
cast|reinterpret_cast
argument_list|<
name|unsigned
name|char
operator|*
argument_list|>
argument_list|(
name|uncompressedHeader
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|outputBytes
init|=
name|uncompressedHeader
operator|.
name|count
argument_list|()
operator|+
literal|30
decl_stmt|;
comment|// 30 bytes of compression header overhead
name|m_deflateStream
operator|.
name|avail_out
operator|=
name|outputBytes
expr_stmt|;
name|unsigned
name|char
modifier|*
name|out
init|=
operator|new
name|unsigned
name|char
index|[
name|outputBytes
index|]
decl_stmt|;
name|m_deflateStream
operator|.
name|next_out
operator|=
name|out
expr_stmt|;
name|int
name|availOutBefore
init|=
name|m_deflateStream
operator|.
name|avail_out
decl_stmt|;
name|int
name|zlibRet
init|=
name|deflate
argument_list|(
operator|&
name|m_deflateStream
argument_list|,
name|Z_SYNC_FLUSH
argument_list|)
decl_stmt|;
comment|// do everything in one go since we use no compression
name|int
name|compressedHeaderSize
init|=
name|availOutBefore
operator|-
name|m_deflateStream
operator|.
name|avail_out
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|zlibRet
operator|==
name|Z_OK
argument_list|)
expr_stmt|;
comment|// otherwise, we need to allocate more outputBytes
name|Q_UNUSED
argument_list|(
name|zlibRet
argument_list|)
expr_stmt|;
comment|// silence -Wunused-variable
name|Q_ASSERT
argument_list|(
name|m_deflateStream
operator|.
name|avail_in
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QByteArray
name|compressedHeader
argument_list|(
cast|reinterpret_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
name|out
argument_list|)
argument_list|,
name|compressedHeaderSize
argument_list|)
decl_stmt|;
operator|delete
index|[]
name|out
expr_stmt|;
return|return
name|compressedHeader
return|;
block|}
end_function
begin_function
DECL|function|bytesAvailable
name|quint64
name|QSpdyProtocolHandler
operator|::
name|bytesAvailable
parameter_list|()
specifier|const
block|{
name|Q_ASSERT
argument_list|(
name|m_socket
argument_list|)
expr_stmt|;
return|return
name|m_spdyBuffer
operator|.
name|byteAmount
argument_list|()
operator|+
name|m_socket
operator|->
name|bytesAvailable
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|readNextChunk
name|bool
name|QSpdyProtocolHandler
operator|::
name|readNextChunk
parameter_list|(
name|qint64
name|length
parameter_list|,
name|char
modifier|*
name|sink
parameter_list|)
block|{
name|qint64
name|expectedReadBytes
init|=
name|length
decl_stmt|;
name|qint64
name|requiredBytesFromBuffer
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|m_waitingForCompleteStream
condition|)
block|{
name|requiredBytesFromBuffer
operator|=
name|qMin
argument_list|(
name|length
argument_list|,
name|m_spdyBuffer
operator|.
name|byteAmount
argument_list|()
argument_list|)
expr_stmt|;
comment|// ### if next chunk from buffer bigger than what we want to read,
comment|// we have to call read() (which memcpy's). Otherwise, we can just
comment|// read the next chunk without memcpy'ing.
name|qint64
name|bytesReadFromBuffer
init|=
name|m_spdyBuffer
operator|.
name|read
argument_list|(
name|sink
argument_list|,
name|requiredBytesFromBuffer
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|bytesReadFromBuffer
operator|==
name|requiredBytesFromBuffer
argument_list|)
expr_stmt|;
if|if
condition|(
name|length
operator|<=
name|bytesReadFromBuffer
condition|)
block|{
return|return
literal|true
return|;
comment|// buffer> required size -> no need to read from socket
block|}
name|expectedReadBytes
operator|-=
name|requiredBytesFromBuffer
expr_stmt|;
block|}
name|qint64
name|readBytes
init|=
name|m_socket
operator|->
name|read
argument_list|(
name|sink
operator|+
name|requiredBytesFromBuffer
argument_list|,
name|expectedReadBytes
argument_list|)
decl_stmt|;
if|if
condition|(
name|readBytes
operator|<
name|expectedReadBytes
condition|)
block|{
name|m_waitingForCompleteStream
operator|=
literal|true
expr_stmt|;
comment|// ### this is inefficient, we should not put back so much data into the buffer
name|QByteArray
name|temp
argument_list|(
name|sink
argument_list|,
name|requiredBytesFromBuffer
operator|+
name|readBytes
argument_list|)
decl_stmt|;
name|m_spdyBuffer
operator|.
name|append
argument_list|(
name|temp
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
literal|true
return|;
comment|// buffer must be cleared by calling function
block|}
block|}
end_function
begin_function
DECL|function|sendControlFrame
name|void
name|QSpdyProtocolHandler
operator|::
name|sendControlFrame
parameter_list|(
name|FrameType
name|type
parameter_list|,
name|ControlFrameFlags
name|flags
parameter_list|,
specifier|const
name|char
modifier|*
name|data
parameter_list|,
name|quint32
name|length
parameter_list|)
block|{
comment|// frame type and stream ID
name|char
name|header
index|[
literal|8
index|]
decl_stmt|;
name|header
index|[
literal|0
index|]
operator|=
literal|0x80u
expr_stmt|;
comment|// leftmost bit == 1 -> is a control frame
name|header
index|[
literal|1
index|]
operator|=
literal|0x03
expr_stmt|;
comment|// 3 bit == version 3
name|header
index|[
literal|2
index|]
operator|=
literal|0
expr_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|FrameType_CREDENTIAL
case|:
block|{
name|qWarning
argument_list|(
literal|"sending SPDY CREDENTIAL frame is not yet implemented"
argument_list|)
expr_stmt|;
comment|// QTBUG-36188
return|return;
block|}
default|default:
name|header
index|[
literal|3
index|]
operator|=
name|type
expr_stmt|;
block|}
comment|// flags
name|header
index|[
literal|4
index|]
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|ControlFrame_FLAG_FIN
operator|||
name|length
operator|==
literal|0
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|type
operator|==
name|FrameType_SYN_STREAM
operator|||
name|type
operator|==
name|FrameType_SYN_REPLY
operator|||
name|type
operator|==
name|FrameType_HEADERS
operator|||
name|length
operator|==
literal|0
argument_list|)
expr_stmt|;
name|header
index|[
literal|4
index|]
operator||=
name|ControlFrame_FLAG_FIN
expr_stmt|;
block|}
if|if
condition|(
name|flags
operator|&
name|ControlFrame_FLAG_UNIDIRECTIONAL
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|type
operator|==
name|FrameType_SYN_STREAM
argument_list|)
expr_stmt|;
name|header
index|[
literal|4
index|]
operator||=
name|ControlFrame_FLAG_UNIDIRECTIONAL
expr_stmt|;
block|}
comment|// length
name|appendIntToThreeBytes
argument_list|(
name|header
operator|+
literal|5
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|qint64
name|written
init|=
name|m_socket
operator|->
name|write
argument_list|(
name|header
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|written
operator|==
literal|8
argument_list|)
expr_stmt|;
name|written
operator|=
name|m_socket
operator|->
name|write
argument_list|(
name|data
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|written
operator|==
name|length
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|written
argument_list|)
expr_stmt|;
comment|// silence -Wunused-variable
block|}
end_function
begin_function
DECL|function|sendSYN_STREAM
name|void
name|QSpdyProtocolHandler
operator|::
name|sendSYN_STREAM
parameter_list|(
name|HttpMessagePair
name|messagePair
parameter_list|,
name|qint32
name|streamID
parameter_list|,
name|qint32
name|associatedToStreamID
parameter_list|)
block|{
name|QHttpNetworkRequest
name|request
init|=
name|messagePair
operator|.
name|first
decl_stmt|;
name|QHttpNetworkReply
modifier|*
name|reply
init|=
name|messagePair
operator|.
name|second
decl_stmt|;
name|ControlFrameFlags
name|flags
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|request
operator|.
name|uploadByteDevice
argument_list|()
condition|)
block|{
comment|// no upload -> this is the last frame, send the FIN flag
name|flags
operator||=
name|ControlFrame_FLAG_FIN
expr_stmt|;
name|reply
operator|->
name|d_func
argument_list|()
operator|->
name|state
operator|=
name|QHttpNetworkReplyPrivate
operator|::
name|SPDYHalfClosed
expr_stmt|;
block|}
else|else
block|{
name|reply
operator|->
name|d_func
argument_list|()
operator|->
name|state
operator|=
name|QHttpNetworkReplyPrivate
operator|::
name|SPDYUploading
expr_stmt|;
comment|// hack: set the stream ID on the device directly, so when we get
comment|// the signal for uploading we know which stream we are sending on
name|request
operator|.
name|uploadByteDevice
argument_list|()
operator|->
name|setProperty
argument_list|(
literal|"SPDYStreamID"
argument_list|,
name|streamID
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|request
operator|.
name|uploadByteDevice
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_uploadDataReadyRead
argument_list|()
argument_list|)
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
expr_stmt|;
block|}
name|QByteArray
name|namesAndValues
init|=
name|composeHeader
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|quint32
name|length
init|=
name|namesAndValues
operator|.
name|count
argument_list|()
operator|+
literal|10
decl_stmt|;
comment|// 10 == 4 for Stream-ID + 4 for Associated-To-Stream-ID
comment|// + 2 for Priority, Unused and Slot
name|QByteArray
name|wireData
decl_stmt|;
name|wireData
operator|.
name|reserve
argument_list|(
name|length
argument_list|)
expr_stmt|;
name|wireData
operator|.
name|append
argument_list|(
name|intToFourBytes
argument_list|(
name|streamID
argument_list|)
argument_list|)
expr_stmt|;
name|wireData
operator|.
name|append
argument_list|(
name|intToFourBytes
argument_list|(
name|associatedToStreamID
argument_list|)
argument_list|)
expr_stmt|;
comment|// priority (3 bits) / unused (5 bits) / slot (8 bits)
name|char
name|prioAndSlot
index|[
literal|2
index|]
decl_stmt|;
switch|switch
condition|(
name|request
operator|.
name|priority
argument_list|()
condition|)
block|{
case|case
name|QHttpNetworkRequest
operator|::
name|HighPriority
case|:
name|prioAndSlot
index|[
literal|0
index|]
operator|=
literal|0x00
expr_stmt|;
comment|// == prio 0 (highest)
break|break;
case|case
name|QHttpNetworkRequest
operator|::
name|NormalPriority
case|:
name|prioAndSlot
index|[
literal|0
index|]
operator|=
literal|0x80u
expr_stmt|;
comment|// == prio 4
break|break;
case|case
name|QHttpNetworkRequest
operator|::
name|LowPriority
case|:
name|prioAndSlot
index|[
literal|0
index|]
operator|=
literal|0xe0u
expr_stmt|;
comment|// == prio 7 (lowest)
break|break;
block|}
name|prioAndSlot
index|[
literal|1
index|]
operator|=
literal|0x00
expr_stmt|;
comment|// slot in client certificates (not supported currently)
name|wireData
operator|.
name|append
argument_list|(
name|prioAndSlot
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|wireData
operator|.
name|append
argument_list|(
name|namesAndValues
argument_list|)
expr_stmt|;
name|sendControlFrame
argument_list|(
name|FrameType_SYN_STREAM
argument_list|,
name|flags
argument_list|,
name|wireData
operator|.
name|constData
argument_list|()
argument_list|,
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|reply
operator|->
name|d_func
argument_list|()
operator|->
name|state
operator|==
name|QHttpNetworkReplyPrivate
operator|::
name|SPDYUploading
condition|)
name|uploadData
argument_list|(
name|streamID
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sendRST_STREAM
name|void
name|QSpdyProtocolHandler
operator|::
name|sendRST_STREAM
parameter_list|(
name|qint32
name|streamID
parameter_list|,
name|RST_STREAM_STATUS_CODE
name|statusCode
parameter_list|)
block|{
name|char
name|wireData
index|[
literal|8
index|]
decl_stmt|;
name|appendIntToFourBytes
argument_list|(
name|wireData
argument_list|,
name|streamID
argument_list|)
expr_stmt|;
name|appendIntToFourBytes
argument_list|(
name|wireData
operator|+
literal|4
argument_list|,
name|statusCode
argument_list|)
expr_stmt|;
name|sendControlFrame
argument_list|(
name|FrameType_RST_STREAM
argument_list|,
comment|/* flags = */
literal|0
argument_list|,
name|wireData
argument_list|,
comment|/* length = */
literal|8
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sendPING
name|void
name|QSpdyProtocolHandler
operator|::
name|sendPING
parameter_list|(
name|quint32
name|pingID
parameter_list|)
block|{
name|char
name|rawData
index|[
literal|4
index|]
decl_stmt|;
name|appendIntToFourBytes
argument_list|(
name|rawData
argument_list|,
name|pingID
argument_list|)
expr_stmt|;
name|sendControlFrame
argument_list|(
name|FrameType_PING
argument_list|,
comment|/* flags = */
literal|0
argument_list|,
name|rawData
argument_list|,
comment|/* length = */
literal|4
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|uploadData
name|bool
name|QSpdyProtocolHandler
operator|::
name|uploadData
parameter_list|(
name|qint32
name|streamID
parameter_list|)
block|{
comment|// we only rely on SPDY flow control here and don't care about TCP buffers
if|if
condition|(
operator|!
name|m_inFlightStreams
operator|.
name|contains
argument_list|(
name|streamID
argument_list|)
condition|)
block|{
name|sendRST_STREAM
argument_list|(
name|streamID
argument_list|,
name|RST_STREAM_INVALID_STREAM
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|HttpMessagePair
name|messagePair
init|=
name|m_inFlightStreams
operator|.
name|value
argument_list|(
name|streamID
argument_list|)
decl_stmt|;
name|QHttpNetworkRequest
name|request
init|=
name|messagePair
operator|.
name|first
decl_stmt|;
name|QHttpNetworkReply
modifier|*
name|reply
init|=
name|messagePair
operator|.
name|second
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|reply
argument_list|)
expr_stmt|;
name|QHttpNetworkReplyPrivate
modifier|*
name|replyPrivate
init|=
name|reply
operator|->
name|d_func
argument_list|()
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|replyPrivate
argument_list|)
expr_stmt|;
if|if
condition|(
name|reply
operator|->
name|d_func
argument_list|()
operator|->
name|state
operator|==
name|QHttpNetworkReplyPrivate
operator|::
name|SPDYHalfClosed
operator|||
name|reply
operator|->
name|d_func
argument_list|()
operator|->
name|state
operator|==
name|QHttpNetworkReplyPrivate
operator|::
name|SPDYClosed
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"Trying to upload to closed stream"
expr_stmt|;
return|return
literal|false
return|;
block|}
name|qint32
name|dataLeftInWindow
init|=
name|replyPrivate
operator|->
name|windowSizeUpload
operator|-
name|replyPrivate
operator|->
name|currentlyUploadedDataInWindow
decl_stmt|;
while|while
condition|(
name|dataLeftInWindow
operator|>
literal|0
operator|&&
operator|!
name|request
operator|.
name|uploadByteDevice
argument_list|()
operator|->
name|atEnd
argument_list|()
condition|)
block|{
comment|// get pointer to upload data
name|qint64
name|currentReadSize
init|=
literal|0
decl_stmt|;
specifier|const
name|char
modifier|*
name|readPointer
init|=
name|request
operator|.
name|uploadByteDevice
argument_list|()
operator|->
name|readPointer
argument_list|(
name|dataLeftInWindow
argument_list|,
name|currentReadSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentReadSize
operator|==
operator|-
literal|1
condition|)
block|{
comment|// premature eof happened
name|m_connection
operator|->
name|d_func
argument_list|()
operator|->
name|emitReplyError
argument_list|(
name|m_socket
argument_list|,
name|reply
argument_list|,
name|QNetworkReply
operator|::
name|UnknownNetworkError
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|readPointer
operator|==
literal|0
operator|||
name|currentReadSize
operator|==
literal|0
condition|)
block|{
comment|// nothing to read currently, break the loop
break|break;
block|}
else|else
block|{
name|DataFrameFlags
name|flags
init|=
literal|0
decl_stmt|;
comment|// we will send the FIN flag later if appropriate
name|qint64
name|currentWriteSize
init|=
name|sendDataFrame
argument_list|(
name|streamID
argument_list|,
name|flags
argument_list|,
name|currentReadSize
argument_list|,
name|readPointer
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentWriteSize
operator|==
operator|-
literal|1
operator|||
name|currentWriteSize
operator|!=
name|currentReadSize
condition|)
block|{
comment|// socket broke down
name|m_connection
operator|->
name|d_func
argument_list|()
operator|->
name|emitReplyError
argument_list|(
name|m_socket
argument_list|,
name|reply
argument_list|,
name|QNetworkReply
operator|::
name|UnknownNetworkError
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
name|replyPrivate
operator|->
name|currentlyUploadedDataInWindow
operator|+=
name|currentWriteSize
expr_stmt|;
name|replyPrivate
operator|->
name|totallyUploadedData
operator|+=
name|currentWriteSize
expr_stmt|;
name|dataLeftInWindow
operator|=
name|replyPrivate
operator|->
name|windowSizeUpload
operator|-
name|replyPrivate
operator|->
name|currentlyUploadedDataInWindow
expr_stmt|;
name|request
operator|.
name|uploadByteDevice
argument_list|()
operator|->
name|advanceReadPointer
argument_list|(
name|currentWriteSize
argument_list|)
expr_stmt|;
emit|emit
name|reply
operator|->
name|dataSendProgress
argument_list|(
name|replyPrivate
operator|->
name|totallyUploadedData
argument_list|,
name|request
operator|.
name|contentLength
argument_list|()
argument_list|)
emit|;
block|}
block|}
block|}
if|if
condition|(
name|replyPrivate
operator|->
name|totallyUploadedData
operator|==
name|request
operator|.
name|contentLength
argument_list|()
condition|)
block|{
name|DataFrameFlags
name|finFlag
init|=
name|DataFrame_FLAG_FIN
decl_stmt|;
name|qint64
name|writeSize
init|=
name|sendDataFrame
argument_list|(
name|streamID
argument_list|,
name|finFlag
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|writeSize
operator|==
literal|0
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|writeSize
argument_list|)
expr_stmt|;
comment|// silence -Wunused-variable
name|replyPrivate
operator|->
name|state
operator|=
name|QHttpNetworkReplyPrivate
operator|::
name|SPDYHalfClosed
expr_stmt|;
if|if
condition|(
name|reply
operator|->
name|request
argument_list|()
operator|.
name|uploadByteDevice
argument_list|()
condition|)
name|reply
operator|->
name|request
argument_list|()
operator|.
name|uploadByteDevice
argument_list|()
operator|->
name|disconnect
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|// ### this will not work if the content length is not known, but
comment|// then again many servers will fail in this case anyhow according
comment|// to the SPDY RFC
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|_q_uploadDataReadyRead
name|void
name|QSpdyProtocolHandler
operator|::
name|_q_uploadDataReadyRead
parameter_list|()
block|{
name|QNonContiguousByteDevice
modifier|*
name|device
init|=
name|qobject_cast
argument_list|<
name|QNonContiguousByteDevice
operator|*
argument_list|>
argument_list|(
name|sender
argument_list|()
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|device
argument_list|)
expr_stmt|;
name|qint32
name|streamID
init|=
name|device
operator|->
name|property
argument_list|(
literal|"SPDYStreamID"
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|streamID
operator|>
literal|0
argument_list|)
expr_stmt|;
name|uploadData
argument_list|(
name|streamID
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sendWINDOW_UPDATE
name|void
name|QSpdyProtocolHandler
operator|::
name|sendWINDOW_UPDATE
parameter_list|(
name|qint32
name|streamID
parameter_list|,
name|quint32
name|deltaWindowSize
parameter_list|)
block|{
name|char
name|windowUpdateData
index|[
literal|8
index|]
decl_stmt|;
name|appendIntToFourBytes
argument_list|(
name|windowUpdateData
argument_list|,
name|streamID
argument_list|)
expr_stmt|;
name|appendIntToFourBytes
argument_list|(
name|windowUpdateData
operator|+
literal|4
argument_list|,
name|deltaWindowSize
argument_list|)
expr_stmt|;
name|sendControlFrame
argument_list|(
name|FrameType_WINDOW_UPDATE
argument_list|,
comment|/* flags = */
literal|0
argument_list|,
name|windowUpdateData
argument_list|,
comment|/* length = */
literal|8
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sendDataFrame
name|qint64
name|QSpdyProtocolHandler
operator|::
name|sendDataFrame
parameter_list|(
name|qint32
name|streamID
parameter_list|,
name|DataFrameFlags
name|flags
parameter_list|,
name|quint32
name|length
parameter_list|,
specifier|const
name|char
modifier|*
name|data
parameter_list|)
block|{
name|QByteArray
name|wireData
decl_stmt|;
name|wireData
operator|.
name|reserve
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|wireData
operator|.
name|append
argument_list|(
name|intToFourBytes
argument_list|(
name|streamID
argument_list|)
argument_list|)
expr_stmt|;
name|wireData
operator|.
name|append
argument_list|(
name|flags
argument_list|)
expr_stmt|;
name|wireData
operator|.
name|append
argument_list|(
name|intToThreeBytes
argument_list|(
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|m_socket
argument_list|)
expr_stmt|;
name|m_socket
operator|->
name|write
argument_list|(
name|wireData
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
condition|)
block|{
name|qint64
name|ret
init|=
name|m_socket
operator|->
name|write
argument_list|(
name|data
argument_list|,
name|length
argument_list|)
decl_stmt|;
return|return
name|ret
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
comment|// nothing to write, e.g. FIN flag
block|}
block|}
end_function
begin_function
DECL|function|handleControlFrame
name|void
name|QSpdyProtocolHandler
operator|::
name|handleControlFrame
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|frameHeaders
parameter_list|)
comment|// ### make it char *
block|{
name|Q_ASSERT
argument_list|(
name|frameHeaders
operator|.
name|count
argument_list|()
operator|>=
literal|8
argument_list|)
expr_stmt|;
name|qint16
name|version
init|=
name|twoBytesToInt
argument_list|(
name|frameHeaders
operator|.
name|constData
argument_list|()
argument_list|)
decl_stmt|;
name|version
operator|&=
literal|0x3fff
expr_stmt|;
comment|// eliminate most significant bit to determine version
name|Q_ASSERT
argument_list|(
name|version
operator|==
literal|3
argument_list|)
expr_stmt|;
name|qint16
name|type
init|=
name|twoBytesToInt
argument_list|(
name|frameHeaders
operator|.
name|constData
argument_list|()
operator|+
literal|2
argument_list|)
decl_stmt|;
name|char
name|flags
init|=
name|frameHeaders
operator|.
name|at
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|qint32
name|length
init|=
name|threeBytesToInt
argument_list|(
name|frameHeaders
operator|.
name|constData
argument_list|()
operator|+
literal|5
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QByteArray
name|frameData
decl_stmt|;
name|frameData
operator|.
name|resize
argument_list|(
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|readNextChunk
argument_list|(
name|length
argument_list|,
name|frameData
operator|.
name|data
argument_list|()
argument_list|)
condition|)
block|{
comment|// put back the frame headers to the buffer
name|m_spdyBuffer
operator|.
name|prepend
argument_list|(
name|frameHeaders
argument_list|)
expr_stmt|;
return|return;
comment|// we couldn't read the whole frame and need to wait
block|}
else|else
block|{
name|m_spdyBuffer
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m_waitingForCompleteStream
operator|=
literal|false
expr_stmt|;
block|}
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|FrameType_SYN_STREAM
case|:
block|{
name|handleSYN_STREAM
argument_list|(
name|flags
argument_list|,
name|length
argument_list|,
name|frameData
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|FrameType_SYN_REPLY
case|:
block|{
name|handleSYN_REPLY
argument_list|(
name|flags
argument_list|,
name|length
argument_list|,
name|frameData
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|FrameType_RST_STREAM
case|:
block|{
name|handleRST_STREAM
argument_list|(
name|flags
argument_list|,
name|length
argument_list|,
name|frameData
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|FrameType_SETTINGS
case|:
block|{
name|handleSETTINGS
argument_list|(
name|flags
argument_list|,
name|length
argument_list|,
name|frameData
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|FrameType_PING
case|:
block|{
name|handlePING
argument_list|(
name|flags
argument_list|,
name|length
argument_list|,
name|frameData
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|FrameType_GOAWAY
case|:
block|{
name|handleGOAWAY
argument_list|(
name|flags
argument_list|,
name|length
argument_list|,
name|frameData
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|FrameType_HEADERS
case|:
block|{
name|handleHEADERS
argument_list|(
name|flags
argument_list|,
name|length
argument_list|,
name|frameData
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|FrameType_WINDOW_UPDATE
case|:
block|{
name|handleWINDOW_UPDATE
argument_list|(
name|flags
argument_list|,
name|length
argument_list|,
name|frameData
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
name|qWarning
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"cannot handle frame of type"
operator|<<
name|type
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|handleSYN_STREAM
name|void
name|QSpdyProtocolHandler
operator|::
name|handleSYN_STREAM
parameter_list|(
name|char
comment|/*flags*/
parameter_list|,
name|quint32
comment|/*length*/
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|frameData
parameter_list|)
block|{
comment|// not implemented; will be implemented when servers start using it
comment|// we just tell the server that we do not accept that
name|qint32
name|streamID
init|=
name|getStreamID
argument_list|(
name|frameData
operator|.
name|constData
argument_list|()
argument_list|)
decl_stmt|;
name|sendRST_STREAM
argument_list|(
name|streamID
argument_list|,
name|RST_STREAM_REFUSED_STREAM
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleSYN_REPLY
name|void
name|QSpdyProtocolHandler
operator|::
name|handleSYN_REPLY
parameter_list|(
name|char
name|flags
parameter_list|,
name|quint32
comment|/*length*/
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|frameData
parameter_list|)
block|{
name|parseHttpHeaders
argument_list|(
name|flags
argument_list|,
name|frameData
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|parseHttpHeaders
name|void
name|QSpdyProtocolHandler
operator|::
name|parseHttpHeaders
parameter_list|(
name|char
name|flags
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|frameData
parameter_list|)
block|{
name|qint32
name|streamID
init|=
name|getStreamID
argument_list|(
name|frameData
operator|.
name|constData
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|m_inFlightStreams
operator|.
name|contains
argument_list|(
name|streamID
argument_list|)
condition|)
block|{
name|sendRST_STREAM
argument_list|(
name|streamID
argument_list|,
name|RST_STREAM_INVALID_STREAM
argument_list|)
expr_stmt|;
return|return;
block|}
name|flags
operator|&=
literal|0x3f
expr_stmt|;
name|bool
name|flag_fin
init|=
name|flags
operator|&
literal|0x01
decl_stmt|;
name|QByteArray
name|headerValuePairs
init|=
name|frameData
operator|.
name|mid
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|HttpMessagePair
name|pair
init|=
name|m_inFlightStreams
operator|.
name|value
argument_list|(
name|streamID
argument_list|)
decl_stmt|;
name|QHttpNetworkReply
modifier|*
name|httpReply
init|=
name|pair
operator|.
name|second
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|httpReply
operator|!=
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|httpReply
operator|->
name|d_func
argument_list|()
operator|->
name|state
operator|==
name|QHttpNetworkReplyPrivate
operator|::
name|SPDYClosed
condition|)
block|{
name|sendRST_STREAM
argument_list|(
name|streamID
argument_list|,
name|RST_STREAM_STREAM_ALREADY_CLOSED
argument_list|)
expr_stmt|;
return|return;
block|}
name|QByteArray
name|uncompressedHeader
decl_stmt|;
if|if
condition|(
operator|!
name|uncompressHeader
argument_list|(
name|headerValuePairs
argument_list|,
operator|&
name|uncompressedHeader
argument_list|)
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"error reading header from SYN_REPLY message"
expr_stmt|;
return|return;
block|}
name|qint32
name|headerCount
init|=
name|fourBytesToInt
argument_list|(
name|uncompressedHeader
operator|.
name|constData
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|headerCount
operator|*
literal|8
operator|>
name|uncompressedHeader
operator|.
name|size
argument_list|()
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"error parsing header from SYN_REPLY message"
expr_stmt|;
name|sendRST_STREAM
argument_list|(
name|streamID
argument_list|,
name|RST_STREAM_PROTOCOL_ERROR
argument_list|)
expr_stmt|;
return|return;
block|}
name|qint32
name|readPointer
init|=
literal|4
decl_stmt|;
for|for
control|(
name|qint32
name|a
init|=
literal|0
init|;
name|a
operator|<
name|headerCount
condition|;
operator|++
name|a
control|)
block|{
name|qint32
name|count
init|=
name|fourBytesToInt
argument_list|(
name|uncompressedHeader
operator|.
name|constData
argument_list|()
operator|+
name|readPointer
argument_list|)
decl_stmt|;
name|readPointer
operator|+=
literal|4
expr_stmt|;
name|QByteArray
name|name
init|=
name|uncompressedHeader
operator|.
name|mid
argument_list|(
name|readPointer
argument_list|,
name|count
argument_list|)
decl_stmt|;
name|readPointer
operator|+=
name|count
expr_stmt|;
if|if
condition|(
name|readPointer
operator|>
name|uncompressedHeader
operator|.
name|size
argument_list|()
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"error parsing header from SYN_REPLY message"
expr_stmt|;
name|sendRST_STREAM
argument_list|(
name|streamID
argument_list|,
name|RST_STREAM_PROTOCOL_ERROR
argument_list|)
expr_stmt|;
return|return;
block|}
name|count
operator|=
name|fourBytesToInt
argument_list|(
name|uncompressedHeader
operator|.
name|constData
argument_list|()
operator|+
name|readPointer
argument_list|)
expr_stmt|;
name|readPointer
operator|+=
literal|4
expr_stmt|;
name|QByteArray
name|value
init|=
name|uncompressedHeader
operator|.
name|mid
argument_list|(
name|readPointer
argument_list|,
name|count
argument_list|)
decl_stmt|;
name|readPointer
operator|+=
name|count
expr_stmt|;
if|if
condition|(
name|readPointer
operator|>
name|uncompressedHeader
operator|.
name|size
argument_list|()
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"error parsing header from SYN_REPLY message"
expr_stmt|;
name|sendRST_STREAM
argument_list|(
name|streamID
argument_list|,
name|RST_STREAM_PROTOCOL_ERROR
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|name
operator|==
literal|":status"
condition|)
block|{
name|httpReply
operator|->
name|setStatusCode
argument_list|(
name|value
operator|.
name|left
argument_list|(
literal|3
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
name|httpReply
operator|->
name|d_func
argument_list|()
operator|->
name|reasonPhrase
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
name|value
operator|.
name|mid
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|name
operator|==
literal|":version"
condition|)
block|{
name|int
name|majorVersion
init|=
name|value
operator|.
name|at
argument_list|(
literal|5
argument_list|)
operator|-
literal|48
decl_stmt|;
name|int
name|minorVersion
init|=
name|value
operator|.
name|at
argument_list|(
literal|7
argument_list|)
operator|-
literal|48
decl_stmt|;
name|httpReply
operator|->
name|d_func
argument_list|()
operator|->
name|majorVersion
operator|=
name|majorVersion
expr_stmt|;
name|httpReply
operator|->
name|d_func
argument_list|()
operator|->
name|minorVersion
operator|=
name|minorVersion
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|name
operator|==
literal|"content-length"
condition|)
block|{
name|httpReply
operator|->
name|setContentLength
argument_list|(
name|value
operator|.
name|toLongLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|value
operator|.
name|contains
argument_list|(
literal|'\0'
argument_list|)
condition|)
block|{
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|values
init|=
name|value
operator|.
name|split
argument_list|(
literal|'\0'
argument_list|)
decl_stmt|;
name|QByteArray
name|binder
argument_list|(
literal|", "
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|"set-cookie"
condition|)
name|binder
operator|=
literal|"\n"
expr_stmt|;
name|value
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Q_FOREACH
argument_list|(
argument|const QByteArray& ivalue
argument_list|,
argument|values
argument_list|)
block|{
if|if
condition|(
name|value
operator|.
name|isEmpty
argument_list|()
condition|)
name|value
operator|=
name|ivalue
expr_stmt|;
else|else
name|value
operator|+=
name|binder
operator|+
name|ivalue
expr_stmt|;
block|}
block|}
name|httpReply
operator|->
name|setHeaderField
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
emit|emit
name|httpReply
operator|->
name|headerChanged
argument_list|()
emit|;
if|if
condition|(
name|flag_fin
condition|)
block|{
if|if
condition|(
name|httpReply
operator|->
name|d_func
argument_list|()
operator|->
name|state
operator|!=
name|QHttpNetworkReplyPrivate
operator|::
name|SPDYHalfClosed
condition|)
name|sendDataFrame
argument_list|(
name|streamID
argument_list|,
name|DataFrame_FLAG_FIN
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|replyFinished
argument_list|(
name|httpReply
argument_list|,
name|streamID
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|handleRST_STREAM
name|void
name|QSpdyProtocolHandler
operator|::
name|handleRST_STREAM
parameter_list|(
name|char
comment|/*flags*/
parameter_list|,
name|quint32
name|length
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|frameData
parameter_list|)
block|{
comment|// flags are ignored
name|Q_ASSERT
argument_list|(
name|length
operator|==
literal|8
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|length
argument_list|)
expr_stmt|;
comment|// silence -Wunused-parameter
name|qint32
name|streamID
init|=
name|getStreamID
argument_list|(
name|frameData
operator|.
name|constData
argument_list|()
argument_list|)
decl_stmt|;
name|QHttpNetworkReply
modifier|*
name|httpReply
init|=
name|m_inFlightStreams
operator|.
name|value
argument_list|(
name|streamID
argument_list|)
operator|.
name|second
decl_stmt|;
name|qint32
name|statusCodeInt
init|=
name|fourBytesToInt
argument_list|(
name|frameData
operator|.
name|constData
argument_list|()
operator|+
literal|4
argument_list|)
decl_stmt|;
name|RST_STREAM_STATUS_CODE
name|statusCode
init|=
cast|static_cast
argument_list|<
name|RST_STREAM_STATUS_CODE
argument_list|>
argument_list|(
name|statusCodeInt
argument_list|)
decl_stmt|;
name|QNetworkReply
operator|::
name|NetworkError
name|errorCode
decl_stmt|;
name|QByteArray
name|errorMessage
decl_stmt|;
switch|switch
condition|(
name|statusCode
condition|)
block|{
case|case
name|RST_STREAM_PROTOCOL_ERROR
case|:
name|errorCode
operator|=
name|QNetworkReply
operator|::
name|ProtocolFailure
expr_stmt|;
name|errorMessage
operator|=
literal|"SPDY protocol error"
expr_stmt|;
break|break;
case|case
name|RST_STREAM_INVALID_STREAM
case|:
name|errorCode
operator|=
name|QNetworkReply
operator|::
name|ProtocolFailure
expr_stmt|;
name|errorMessage
operator|=
literal|"SPDY stream is not active"
expr_stmt|;
break|break;
case|case
name|RST_STREAM_REFUSED_STREAM
case|:
name|errorCode
operator|=
name|QNetworkReply
operator|::
name|ProtocolFailure
expr_stmt|;
name|errorMessage
operator|=
literal|"SPDY stream was refused"
expr_stmt|;
break|break;
case|case
name|RST_STREAM_UNSUPPORTED_VERSION
case|:
name|errorCode
operator|=
name|QNetworkReply
operator|::
name|ProtocolUnknownError
expr_stmt|;
name|errorMessage
operator|=
literal|"SPDY version is unknown to the server"
expr_stmt|;
break|break;
case|case
name|RST_STREAM_CANCEL
case|:
name|errorCode
operator|=
name|QNetworkReply
operator|::
name|ProtocolFailure
expr_stmt|;
name|errorMessage
operator|=
literal|"SPDY stream is no longer needed"
expr_stmt|;
break|break;
case|case
name|RST_STREAM_INTERNAL_ERROR
case|:
name|errorCode
operator|=
name|QNetworkReply
operator|::
name|InternalServerError
expr_stmt|;
name|errorMessage
operator|=
literal|"Internal server error"
expr_stmt|;
break|break;
case|case
name|RST_STREAM_FLOW_CONTROL_ERROR
case|:
name|errorCode
operator|=
name|QNetworkReply
operator|::
name|ProtocolFailure
expr_stmt|;
name|errorMessage
operator|=
literal|"peer violated the flow control protocol"
expr_stmt|;
break|break;
case|case
name|RST_STREAM_STREAM_IN_USE
case|:
name|errorCode
operator|=
name|QNetworkReply
operator|::
name|ProtocolFailure
expr_stmt|;
name|errorMessage
operator|=
literal|"server received a SYN_REPLY for an already open stream"
expr_stmt|;
break|break;
case|case
name|RST_STREAM_STREAM_ALREADY_CLOSED
case|:
name|errorCode
operator|=
name|QNetworkReply
operator|::
name|ProtocolFailure
expr_stmt|;
name|errorMessage
operator|=
literal|"server received data or a SYN_REPLY for an already half-closed stream"
expr_stmt|;
break|break;
case|case
name|RST_STREAM_INVALID_CREDENTIALS
case|:
name|errorCode
operator|=
name|QNetworkReply
operator|::
name|ContentAccessDenied
expr_stmt|;
name|errorMessage
operator|=
literal|"server received invalid credentials"
expr_stmt|;
break|break;
case|case
name|RST_STREAM_FRAME_TOO_LARGE
case|:
name|errorCode
operator|=
name|QNetworkReply
operator|::
name|ProtocolFailure
expr_stmt|;
name|errorMessage
operator|=
literal|"server cannot process the frame because it is too large"
expr_stmt|;
break|break;
default|default:
name|qWarning
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"could not understand servers RST_STREAM status code"
expr_stmt|;
name|errorCode
operator|=
name|QNetworkReply
operator|::
name|ProtocolFailure
expr_stmt|;
name|errorMessage
operator|=
literal|"got SPDY RST_STREAM message with unknown error code"
expr_stmt|;
block|}
if|if
condition|(
name|httpReply
condition|)
name|replyFinishedWithError
argument_list|(
name|httpReply
argument_list|,
name|streamID
argument_list|,
name|errorCode
argument_list|,
name|errorMessage
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleSETTINGS
name|void
name|QSpdyProtocolHandler
operator|::
name|handleSETTINGS
parameter_list|(
name|char
name|flags
parameter_list|,
name|quint32
comment|/*length*/
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|frameData
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|frameData
operator|.
name|count
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|SETTINGS_Flags
name|settingsFlags
init|=
cast|static_cast
argument_list|<
name|SETTINGS_Flags
argument_list|>
argument_list|(
name|flags
argument_list|)
decl_stmt|;
if|if
condition|(
name|settingsFlags
operator|&
name|FLAG_SETTINGS_CLEAR_SETTINGS
condition|)
block|{
comment|// ### clear all persistent settings; since we do not persist settings
comment|// as of now, we don't need to clear anything either
block|}
name|qint32
name|numberOfEntries
init|=
name|fourBytesToInt
argument_list|(
name|frameData
operator|.
name|constData
argument_list|()
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|numberOfEntries
operator|>
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|a
init|=
literal|0
init|,
name|frameDataIndex
init|=
literal|4
init|;
name|a
operator|<
name|numberOfEntries
condition|;
operator|++
name|a
operator|,
name|frameDataIndex
operator|+=
literal|8
control|)
block|{
name|SETTINGS_ID_Flag
name|idFlag
init|=
cast|static_cast
argument_list|<
name|SETTINGS_ID_Flag
argument_list|>
argument_list|(
name|frameData
index|[
name|frameDataIndex
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|idFlag
operator|&
name|FLAG_SETTINGS_PERSIST_VALUE
condition|)
block|{
comment|// ### we SHOULD persist the settings here according to the RFC, but we don't have to,
comment|// so implement that later
block|}
comment|// the other value is only sent by us, but not received
name|quint32
name|uniqueID
init|=
cast|static_cast
argument_list|<
name|SETTINGS_ID
argument_list|>
argument_list|(
name|threeBytesToInt
argument_list|(
name|frameData
operator|.
name|constData
argument_list|()
operator|+
name|frameDataIndex
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|quint32
name|value
init|=
name|fourBytesToInt
argument_list|(
name|frameData
operator|.
name|constData
argument_list|()
operator|+
name|frameDataIndex
operator|+
literal|4
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|uniqueID
condition|)
block|{
case|case
name|SETTINGS_UPLOAD_BANDWIDTH
case|:
block|{
comment|// ignored for now, just an estimated informative value
break|break;
block|}
case|case
name|SETTINGS_DOWNLOAD_BANDWIDTH
case|:
block|{
comment|// ignored for now, just an estimated informative value
break|break;
block|}
case|case
name|SETTINGS_ROUND_TRIP_TIME
case|:
block|{
comment|// ignored for now, just an estimated informative value
break|break;
block|}
case|case
name|SETTINGS_MAX_CONCURRENT_STREAMS
case|:
block|{
name|m_maxConcurrentStreams
operator|=
name|value
expr_stmt|;
break|break;
block|}
case|case
name|SETTINGS_CURRENT_CWND
case|:
block|{
comment|// ignored for now, just an informative value
break|break;
block|}
case|case
name|SETTINGS_DOWNLOAD_RETRANS_RATE
case|:
block|{
comment|// ignored for now, just an estimated informative value
break|break;
block|}
case|case
name|SETTINGS_INITIAL_WINDOW_SIZE
case|:
block|{
name|m_initialWindowSize
operator|=
name|value
expr_stmt|;
break|break;
block|}
case|case
name|SETTINGS_CLIENT_CERTIFICATE_VECTOR_SIZE
case|:
block|{
comment|// client certificates are not supported
break|break;
block|}
default|default:
name|qWarning
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"found unknown settings value"
operator|<<
name|value
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|handlePING
name|void
name|QSpdyProtocolHandler
operator|::
name|handlePING
parameter_list|(
name|char
comment|/*flags*/
parameter_list|,
name|quint32
name|length
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|frameData
parameter_list|)
block|{
comment|// flags are ignored
name|Q_ASSERT
argument_list|(
name|length
operator|==
literal|4
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|length
argument_list|)
expr_stmt|;
comment|// silence -Wunused-parameter
name|quint32
name|pingID
init|=
name|fourBytesToInt
argument_list|(
name|frameData
operator|.
name|constData
argument_list|()
argument_list|)
decl_stmt|;
comment|// odd numbered IDs must be ignored
if|if
condition|(
operator|(
name|pingID
operator|&
literal|1
operator|)
operator|==
literal|0
condition|)
comment|// is even?
name|sendPING
argument_list|(
name|pingID
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleGOAWAY
name|void
name|QSpdyProtocolHandler
operator|::
name|handleGOAWAY
parameter_list|(
name|char
comment|/*flags*/
parameter_list|,
name|quint32
comment|/*length*/
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|frameData
parameter_list|)
block|{
comment|// flags are ignored
name|qint32
name|statusCode
init|=
cast|static_cast
argument_list|<
name|GOAWAY_STATUS
argument_list|>
argument_list|(
name|fourBytesToInt
argument_list|(
name|frameData
operator|.
name|constData
argument_list|()
operator|+
literal|4
argument_list|)
argument_list|)
decl_stmt|;
name|QNetworkReply
operator|::
name|NetworkError
name|errorCode
decl_stmt|;
switch|switch
condition|(
name|statusCode
condition|)
block|{
case|case
name|GOAWAY_OK
case|:
block|{
name|errorCode
operator|=
name|QNetworkReply
operator|::
name|NoError
expr_stmt|;
break|break;
block|}
case|case
name|GOAWAY_PROTOCOL_ERROR
case|:
block|{
name|errorCode
operator|=
name|QNetworkReply
operator|::
name|ProtocolFailure
expr_stmt|;
break|break;
block|}
case|case
name|GOAWAY_INTERNAL_ERROR
case|:
block|{
name|errorCode
operator|=
name|QNetworkReply
operator|::
name|InternalServerError
expr_stmt|;
break|break;
block|}
default|default:
name|qWarning
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"unexpected status code"
operator|<<
name|statusCode
expr_stmt|;
name|errorCode
operator|=
name|QNetworkReply
operator|::
name|ProtocolUnknownError
expr_stmt|;
block|}
name|qint32
name|lastGoodStreamID
init|=
name|getStreamID
argument_list|(
name|frameData
operator|.
name|constData
argument_list|()
argument_list|)
decl_stmt|;
comment|// emit errors for all replies after the last good stream ID
name|Q_ASSERT
argument_list|(
name|m_connection
argument_list|)
expr_stmt|;
for|for
control|(
name|qint32
name|currentStreamID
init|=
name|lastGoodStreamID
operator|+
literal|2
init|;
name|currentStreamID
operator|<=
name|m_nextStreamID
condition|;
operator|++
name|currentStreamID
control|)
block|{
name|QHttpNetworkReply
modifier|*
name|reply
init|=
name|m_inFlightStreams
operator|.
name|value
argument_list|(
name|currentStreamID
argument_list|)
operator|.
name|second
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|reply
argument_list|)
expr_stmt|;
name|m_connection
operator|->
name|d_func
argument_list|()
operator|->
name|emitReplyError
argument_list|(
name|m_socket
argument_list|,
name|reply
argument_list|,
name|errorCode
argument_list|)
expr_stmt|;
block|}
comment|// ### we could make sure a new session is initiated anyhow
block|}
end_function
begin_function
DECL|function|handleHEADERS
name|void
name|QSpdyProtocolHandler
operator|::
name|handleHEADERS
parameter_list|(
name|char
name|flags
parameter_list|,
name|quint32
comment|/*length*/
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|frameData
parameter_list|)
block|{
name|parseHttpHeaders
argument_list|(
name|flags
argument_list|,
name|frameData
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleWINDOW_UPDATE
name|void
name|QSpdyProtocolHandler
operator|::
name|handleWINDOW_UPDATE
parameter_list|(
name|char
comment|/*flags*/
parameter_list|,
name|quint32
comment|/*length*/
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|frameData
parameter_list|)
block|{
name|qint32
name|streamID
init|=
name|getStreamID
argument_list|(
name|frameData
operator|.
name|constData
argument_list|()
argument_list|)
decl_stmt|;
name|qint32
name|deltaWindowSize
init|=
name|fourBytesToInt
argument_list|(
name|frameData
operator|.
name|constData
argument_list|()
operator|+
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|m_inFlightStreams
operator|.
name|contains
argument_list|(
name|streamID
argument_list|)
condition|)
block|{
name|sendRST_STREAM
argument_list|(
name|streamID
argument_list|,
name|RST_STREAM_INVALID_STREAM
argument_list|)
expr_stmt|;
return|return;
block|}
name|QHttpNetworkReply
modifier|*
name|reply
init|=
name|m_inFlightStreams
operator|.
name|value
argument_list|(
name|streamID
argument_list|)
operator|.
name|second
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|reply
argument_list|)
expr_stmt|;
name|QHttpNetworkReplyPrivate
modifier|*
name|replyPrivate
init|=
name|reply
operator|->
name|d_func
argument_list|()
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|replyPrivate
argument_list|)
expr_stmt|;
comment|// Ignore WINDOW_UPDATE if we are already done.
if|if
condition|(
name|replyPrivate
operator|->
name|state
operator|==
name|QHttpNetworkReplyPrivate
operator|::
name|SPDYHalfClosed
operator|||
name|replyPrivate
operator|->
name|state
operator|==
name|QHttpNetworkReplyPrivate
operator|::
name|SPDYClosed
condition|)
return|return;
name|replyPrivate
operator|->
name|currentlyUploadedDataInWindow
operator|=
name|replyPrivate
operator|->
name|windowSizeUpload
operator|-
name|deltaWindowSize
expr_stmt|;
name|uploadData
argument_list|(
name|streamID
argument_list|)
expr_stmt|;
comment|// we hopefully can continue to upload
block|}
end_function
begin_function
DECL|function|handleDataFrame
name|void
name|QSpdyProtocolHandler
operator|::
name|handleDataFrame
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|frameHeaders
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|frameHeaders
operator|.
name|count
argument_list|()
operator|>=
literal|8
argument_list|)
expr_stmt|;
name|qint32
name|streamID
init|=
name|getStreamID
argument_list|(
name|frameHeaders
operator|.
name|constData
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|m_inFlightStreams
operator|.
name|contains
argument_list|(
name|streamID
argument_list|)
condition|)
block|{
name|sendRST_STREAM
argument_list|(
name|streamID
argument_list|,
name|RST_STREAM_INVALID_STREAM
argument_list|)
expr_stmt|;
return|return;
block|}
name|unsigned
name|char
name|flags
init|=
cast|static_cast
argument_list|<
name|unsigned
name|char
argument_list|>
argument_list|(
name|frameHeaders
operator|.
name|at
argument_list|(
literal|4
argument_list|)
argument_list|)
decl_stmt|;
name|flags
operator|&=
literal|0x3f
expr_stmt|;
name|bool
name|flag_fin
init|=
name|flags
operator|&
literal|0x01
decl_stmt|;
name|bool
name|flag_compress
init|=
name|flags
operator|&
literal|0x02
decl_stmt|;
name|qint32
name|length
init|=
name|threeBytesToInt
argument_list|(
name|frameHeaders
operator|.
name|constData
argument_list|()
operator|+
literal|5
argument_list|)
decl_stmt|;
name|QByteArray
name|data
decl_stmt|;
name|data
operator|.
name|resize
argument_list|(
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|readNextChunk
argument_list|(
name|length
argument_list|,
name|data
operator|.
name|data
argument_list|()
argument_list|)
condition|)
block|{
comment|// put back the frame headers to the buffer
name|m_spdyBuffer
operator|.
name|prepend
argument_list|(
name|frameHeaders
argument_list|)
expr_stmt|;
return|return;
comment|// we couldn't read the whole frame and need to wait
block|}
else|else
block|{
name|m_spdyBuffer
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m_waitingForCompleteStream
operator|=
literal|false
expr_stmt|;
block|}
name|HttpMessagePair
name|pair
init|=
name|m_inFlightStreams
operator|.
name|value
argument_list|(
name|streamID
argument_list|)
decl_stmt|;
name|QHttpNetworkRequest
name|httpRequest
init|=
name|pair
operator|.
name|first
decl_stmt|;
name|QHttpNetworkReply
modifier|*
name|httpReply
init|=
name|pair
operator|.
name|second
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|httpReply
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QHttpNetworkReplyPrivate
modifier|*
name|replyPrivate
init|=
name|httpReply
operator|->
name|d_func
argument_list|()
decl_stmt|;
if|if
condition|(
name|replyPrivate
operator|->
name|state
operator|==
name|QHttpNetworkReplyPrivate
operator|::
name|SPDYClosed
condition|)
block|{
name|sendRST_STREAM
argument_list|(
name|streamID
argument_list|,
name|RST_STREAM_STREAM_ALREADY_CLOSED
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// check whether we need to send WINDOW_UPDATE (i.e. tell the sender it can send more)
name|replyPrivate
operator|->
name|currentlyReceivedDataInWindow
operator|+=
name|length
expr_stmt|;
name|qint32
name|dataLeftInWindow
init|=
name|replyPrivate
operator|->
name|windowSizeDownload
operator|-
name|replyPrivate
operator|->
name|currentlyReceivedDataInWindow
decl_stmt|;
if|if
condition|(
name|replyPrivate
operator|->
name|currentlyReceivedDataInWindow
operator|>
literal|0
operator|&&
name|dataLeftInWindow
operator|<
name|replyPrivate
operator|->
name|windowSizeDownload
operator|/
literal|2
condition|)
block|{
comment|// socket read buffer size is 64K actually, hard coded in the channel
comment|// We can read way more than 64K per socket, because the window size
comment|// here is per stream.
if|if
condition|(
name|replyPrivate
operator|->
name|windowSizeDownload
operator|>=
name|m_socket
operator|->
name|readBufferSize
argument_list|()
condition|)
block|{
name|replyPrivate
operator|->
name|windowSizeDownload
operator|=
name|m_socket
operator|->
name|readBufferSize
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|replyPrivate
operator|->
name|windowSizeDownload
operator|*=
literal|1.5
expr_stmt|;
block|}
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
name|this
argument_list|,
literal|"sendWINDOW_UPDATE"
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|,
name|Q_ARG
argument_list|(
name|qint32
argument_list|,
name|streamID
argument_list|)
argument_list|,
name|Q_ARG
argument_list|(
name|quint32
argument_list|,
name|replyPrivate
operator|->
name|windowSizeDownload
argument_list|)
argument_list|)
expr_stmt|;
comment|// setting the current data count to 0 is a race condition,
comment|// because we call sendWINDOW_UPDATE through the event loop.
comment|// But then again, the whole situation is a race condition because
comment|// we don't know when the packet will arrive at the server; so
comment|// this is most likely good enough here.
name|replyPrivate
operator|->
name|currentlyReceivedDataInWindow
operator|=
literal|0
expr_stmt|;
block|}
name|httpReply
operator|->
name|d_func
argument_list|()
operator|->
name|compressedData
operator|.
name|append
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|replyPrivate
operator|->
name|totalProgress
operator|+=
name|length
expr_stmt|;
if|if
condition|(
name|httpRequest
operator|.
name|d
operator|->
name|autoDecompress
operator|&&
name|httpReply
operator|->
name|d_func
argument_list|()
operator|->
name|isCompressed
argument_list|()
condition|)
block|{
name|QByteDataBuffer
name|inDataBuffer
decl_stmt|;
comment|// ### should we introduce one in the http reply?
name|inDataBuffer
operator|.
name|append
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|qint64
name|compressedCount
init|=
name|httpReply
operator|->
name|d_func
argument_list|()
operator|->
name|uncompressBodyData
argument_list|(
operator|&
name|inDataBuffer
argument_list|,
operator|&
name|replyPrivate
operator|->
name|responseData
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|compressedCount
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|compressedCount
argument_list|)
expr_stmt|;
comment|// silence -Wunused-variable
block|}
else|else
block|{
name|replyPrivate
operator|->
name|responseData
operator|.
name|append
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|replyPrivate
operator|->
name|shouldEmitSignals
argument_list|()
condition|)
block|{
emit|emit
name|httpReply
operator|->
name|readyRead
argument_list|()
emit|;
emit|emit
name|httpReply
operator|->
name|dataReadProgress
argument_list|(
name|replyPrivate
operator|->
name|totalProgress
argument_list|,
name|replyPrivate
operator|->
name|bodyLength
argument_list|)
emit|;
block|}
if|if
condition|(
name|flag_compress
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"SPDY level compression is not supported"
expr_stmt|;
block|}
if|if
condition|(
name|flag_fin
condition|)
block|{
if|if
condition|(
name|httpReply
operator|->
name|d_func
argument_list|()
operator|->
name|state
operator|!=
name|QHttpNetworkReplyPrivate
operator|::
name|SPDYHalfClosed
condition|)
name|sendDataFrame
argument_list|(
name|streamID
argument_list|,
name|DataFrame_FLAG_FIN
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|replyFinished
argument_list|(
name|httpReply
argument_list|,
name|streamID
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|replyFinished
name|void
name|QSpdyProtocolHandler
operator|::
name|replyFinished
parameter_list|(
name|QHttpNetworkReply
modifier|*
name|httpReply
parameter_list|,
name|qint32
name|streamID
parameter_list|)
block|{
name|httpReply
operator|->
name|d_func
argument_list|()
operator|->
name|state
operator|=
name|QHttpNetworkReplyPrivate
operator|::
name|SPDYClosed
expr_stmt|;
name|httpReply
operator|->
name|disconnect
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|httpReply
operator|->
name|request
argument_list|()
operator|.
name|uploadByteDevice
argument_list|()
condition|)
name|httpReply
operator|->
name|request
argument_list|()
operator|.
name|uploadByteDevice
argument_list|()
operator|->
name|disconnect
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|int
name|streamsRemoved
init|=
name|m_inFlightStreams
operator|.
name|remove
argument_list|(
name|streamID
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|streamsRemoved
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|streamsRemoved
argument_list|)
expr_stmt|;
comment|// silence -Wunused-variable
emit|emit
name|httpReply
operator|->
name|finished
argument_list|()
emit|;
block|}
end_function
begin_function
DECL|function|replyFinishedWithError
name|void
name|QSpdyProtocolHandler
operator|::
name|replyFinishedWithError
parameter_list|(
name|QHttpNetworkReply
modifier|*
name|httpReply
parameter_list|,
name|qint32
name|streamID
parameter_list|,
name|QNetworkReply
operator|::
name|NetworkError
name|errorCode
parameter_list|,
specifier|const
name|char
modifier|*
name|errorMessage
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|httpReply
argument_list|)
expr_stmt|;
name|httpReply
operator|->
name|d_func
argument_list|()
operator|->
name|state
operator|=
name|QHttpNetworkReplyPrivate
operator|::
name|SPDYClosed
expr_stmt|;
name|httpReply
operator|->
name|disconnect
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|httpReply
operator|->
name|request
argument_list|()
operator|.
name|uploadByteDevice
argument_list|()
condition|)
name|httpReply
operator|->
name|request
argument_list|()
operator|.
name|uploadByteDevice
argument_list|()
operator|->
name|disconnect
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|int
name|streamsRemoved
init|=
name|m_inFlightStreams
operator|.
name|remove
argument_list|(
name|streamID
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|streamsRemoved
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|streamsRemoved
argument_list|)
expr_stmt|;
comment|// silence -Wunused-variable
emit|emit
name|httpReply
operator|->
name|finishedWithError
argument_list|(
name|errorCode
argument_list|,
name|QSpdyProtocolHandler
operator|::
name|tr
argument_list|(
name|errorMessage
argument_list|)
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|generateNextStreamID
name|qint32
name|QSpdyProtocolHandler
operator|::
name|generateNextStreamID
parameter_list|()
block|{
comment|// stream IDs initiated by the client must be odd
name|m_nextStreamID
operator|+=
literal|2
expr_stmt|;
return|return
name|m_nextStreamID
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// !defined(QT_NO_HTTP)&& !defined(QT_NO_SSL)
end_comment
end_unit
