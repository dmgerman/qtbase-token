begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtNetwork module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QHTTPMULTIPART_H
end_ifndef
begin_define
DECL|macro|QHTTPMULTIPART_H
define|#
directive|define
name|QHTTPMULTIPART_H
end_define
begin_include
include|#
directive|include
file|<QtCore/QSharedDataPointer>
end_include
begin_include
include|#
directive|include
file|<QtCore/QByteArray>
end_include
begin_include
include|#
directive|include
file|<QtCore/QIODevice>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/QNetworkRequest>
end_include
begin_decl_stmt
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
DECL|variable|QHttpPartPrivate
name|class
name|QHttpPartPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QHttpMultiPart
name|class
name|QHttpMultiPart
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_NETWORK_EXPORT
name|QHttpPart
block|{
name|public
label|:
name|QHttpPart
argument_list|()
expr_stmt|;
name|QHttpPart
argument_list|(
specifier|const
name|QHttpPart
operator|&
name|other
argument_list|)
expr_stmt|;
operator|~
name|QHttpPart
argument_list|()
expr_stmt|;
name|QHttpPart
modifier|&
name|operator
init|=
operator|(
specifier|const
name|QHttpPart
operator|&
name|other
operator|)
decl_stmt|;
name|void
name|swap
parameter_list|(
name|QHttpPart
modifier|&
name|other
parameter_list|)
block|{
name|qSwap
argument_list|(
name|d
argument_list|,
name|other
operator|.
name|d
argument_list|)
expr_stmt|;
block|}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QHttpPart
operator|&
name|other
operator|)
specifier|const
expr_stmt|;
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|QHttpPart
operator|&
name|other
operator|)
specifier|const
block|{
return|return
operator|!
name|operator
operator|==
operator|(
name|other
operator|)
return|;
block|}
name|void
name|setHeader
argument_list|(
name|QNetworkRequest
operator|::
name|KnownHeaders
name|header
argument_list|,
specifier|const
name|QVariant
operator|&
name|value
argument_list|)
decl_stmt|;
name|void
name|setRawHeader
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|headerName
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|headerValue
parameter_list|)
function_decl|;
name|void
name|setBody
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|body
parameter_list|)
function_decl|;
name|void
name|setBodyDevice
parameter_list|(
name|QIODevice
modifier|*
name|device
parameter_list|)
function_decl|;
name|private
label|:
name|QSharedDataPointer
operator|<
name|QHttpPartPrivate
operator|>
name|d
expr_stmt|;
name|friend
name|class
name|QHttpMultiPartIODevice
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_macro
name|Q_DECLARE_SHARED
argument_list|(
argument|QHttpPart
argument_list|)
end_macro
begin_decl_stmt
name|class
name|QHttpMultiPartPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_NETWORK_EXPORT
name|QHttpMultiPart
range|:
name|public
name|QObject
block|{
name|Q_OBJECT
name|public
operator|:
expr|enum
name|ContentType
block|{
name|MixedType
block|,
name|RelatedType
block|,
name|FormDataType
block|,
name|AlternativeType
block|}
block|;
name|explicit
name|QHttpMultiPart
argument_list|(
name|QObject
operator|*
name|parent
operator|=
literal|0
argument_list|)
block|;
name|explicit
name|QHttpMultiPart
argument_list|(
argument|ContentType contentType
argument_list|,
argument|QObject *parent =
literal|0
argument_list|)
block|;
operator|~
name|QHttpMultiPart
argument_list|()
block|;
name|void
name|append
argument_list|(
specifier|const
name|QHttpPart
operator|&
name|httpPart
argument_list|)
block|;
name|void
name|setContentType
argument_list|(
argument|ContentType contentType
argument_list|)
block|;
name|QByteArray
name|boundary
argument_list|()
specifier|const
block|;
name|void
name|setBoundary
argument_list|(
specifier|const
name|QByteArray
operator|&
name|boundary
argument_list|)
block|;
name|private
operator|:
name|Q_DECLARE_PRIVATE
argument_list|(
argument|QHttpMultiPart
argument_list|)
name|Q_DISABLE_COPY
argument_list|(
argument|QHttpMultiPart
argument_list|)
name|friend
name|class
name|QNetworkAccessManager
block|;
name|friend
name|class
name|QNetworkAccessManagerPrivate
block|; }
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|QT_END_NAMESPACE
name|QT_END_HEADER
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QHTTPMULTIPART_H
end_comment
end_unit
