begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtNetwork module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QNETWORKACCESSCACHE_P_H
end_ifndef
begin_define
DECL|macro|QNETWORKACCESSCACHE_P_H
define|#
directive|define
name|QNETWORKACCESSCACHE_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists for the convenience
end_comment
begin_comment
comment|// of the Network Access API.  This header file may change from
end_comment
begin_comment
comment|// version to version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"QtCore/qobject.h"
end_include
begin_include
include|#
directive|include
file|"QtCore/qbasictimer.h"
end_include
begin_include
include|#
directive|include
file|"QtCore/qbytearray.h"
end_include
begin_include
include|#
directive|include
file|"QtCore/qhash.h"
end_include
begin_include
include|#
directive|include
file|"QtCore/qmetatype.h"
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QNetworkRequest
name|class
name|QNetworkRequest
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QUrl
name|class
name|QUrl
decl_stmt|;
end_decl_stmt
begin_comment
comment|// this class is not about caching files but about
end_comment
begin_comment
comment|// caching objects used by QNetworkAccessManager, e.g. existing TCP connections
end_comment
begin_comment
comment|// or credentials.
end_comment
begin_decl_stmt
name|class
name|QNetworkAccessCache
range|:
name|public
name|QObject
block|{
name|Q_OBJECT
name|public
operator|:
expr|struct
name|Node
block|;
typedef|typedef
name|QHash
operator|<
name|QByteArray
operator|,
name|Node
operator|>
name|NodeHash
expr_stmt|;
name|class
name|CacheableObject
block|{
name|friend
name|class
name|QNetworkAccessCache
block|;
name|QByteArray
name|key
block|;
name|bool
name|expires
block|;
name|bool
name|shareable
block|;
name|public
operator|:
name|CacheableObject
argument_list|()
block|;
name|virtual
operator|~
name|CacheableObject
argument_list|()
block|;
name|virtual
name|void
name|dispose
argument_list|()
operator|=
literal|0
block|;
specifier|inline
name|QByteArray
name|cacheKey
argument_list|()
specifier|const
block|{
return|return
name|key
return|;
block|}
name|protected
operator|:
name|void
name|setExpires
argument_list|(
argument|bool enable
argument_list|)
block|;
name|void
name|setShareable
argument_list|(
argument|bool enable
argument_list|)
block|;     }
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|QNetworkAccessCache
argument_list|()
expr_stmt|;
end_expr_stmt
begin_expr_stmt
operator|~
name|QNetworkAccessCache
argument_list|()
expr_stmt|;
end_expr_stmt
begin_function_decl
name|void
name|clear
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|void
name|addEntry
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|key
parameter_list|,
name|CacheableObject
modifier|*
name|entry
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
name|bool
name|hasEntry
argument_list|(
specifier|const
name|QByteArray
operator|&
name|key
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_function_decl
name|bool
name|requestEntry
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|key
parameter_list|,
name|QObject
modifier|*
name|target
parameter_list|,
specifier|const
name|char
modifier|*
name|member
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|CacheableObject
modifier|*
name|requestEntryNow
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|key
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|releaseEntry
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|key
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|removeEntry
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|key
parameter_list|)
function_decl|;
end_function_decl
begin_label
name|signals
label|:
end_label
begin_decl_stmt
name|void
name|entryReady
argument_list|(
name|QNetworkAccessCache
operator|::
name|CacheableObject
operator|*
argument_list|)
decl_stmt|;
end_decl_stmt
begin_label
name|protected
label|:
end_label
begin_decl_stmt
name|void
name|timerEvent
argument_list|(
name|QTimerEvent
operator|*
argument_list|)
name|Q_DECL_OVERRIDE
decl_stmt|;
end_decl_stmt
begin_label
name|private
label|:
end_label
begin_comment
comment|// idea copied from qcache.h
end_comment
begin_decl_stmt
name|NodeHash
name|hash
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|Node
modifier|*
name|oldest
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|Node
modifier|*
name|newest
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QBasicTimer
name|timer
decl_stmt|;
end_decl_stmt
begin_function_decl
name|void
name|linkEntry
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|key
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|bool
name|unlinkEntry
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|key
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|updateTimer
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|bool
name|emitEntryReady
parameter_list|(
name|Node
modifier|*
name|node
parameter_list|,
name|QObject
modifier|*
name|target
parameter_list|,
specifier|const
name|char
modifier|*
name|member
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
unit|};
name|QT_END_NAMESPACE
name|Q_DECLARE_METATYPE
argument_list|(
name|QNetworkAccessCache
operator|::
name|CacheableObject
operator|*
argument_list|)
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
end_unit
