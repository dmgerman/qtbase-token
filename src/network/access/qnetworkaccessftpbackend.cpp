begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtNetwork module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qnetworkaccessftpbackend_p.h"
end_include
begin_include
include|#
directive|include
file|"qnetworkaccessmanager_p.h"
end_include
begin_include
include|#
directive|include
file|"QtNetwork/qauthenticator.h"
end_include
begin_include
include|#
directive|include
file|"private/qnoncontiguousbytedevice_p.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_FTP
end_ifndef
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
name|enum
type|{
DECL|enumerator|DefaultFtpPort
name|DefaultFtpPort
init|=
literal|21
end_decl_stmt
begin_function
DECL|enumerator|DefaultFtpPort
unit|};
DECL|function|makeCacheKey
specifier|static
name|QByteArray
name|makeCacheKey
parameter_list|(
specifier|const
name|QUrl
modifier|&
name|url
parameter_list|)
block|{
name|QUrl
name|copy
init|=
name|url
decl_stmt|;
name|copy
operator|.
name|setPort
argument_list|(
name|url
operator|.
name|port
argument_list|(
name|DefaultFtpPort
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|"ftp-connection:"
operator|+
name|copy
operator|.
name|toEncoded
argument_list|(
name|QUrl
operator|::
name|RemovePassword
operator||
name|QUrl
operator|::
name|RemovePath
operator||
name|QUrl
operator|::
name|RemoveQuery
operator||
name|QUrl
operator|::
name|RemoveFragment
argument_list|)
return|;
block|}
end_function
begin_function
name|QNetworkAccessBackend
modifier|*
DECL|function|create
name|QNetworkAccessFtpBackendFactory
operator|::
name|create
parameter_list|(
name|QNetworkAccessManager
operator|::
name|Operation
name|op
parameter_list|,
specifier|const
name|QNetworkRequest
modifier|&
name|request
parameter_list|)
specifier|const
block|{
comment|// is it an operation we know of?
switch|switch
condition|(
name|op
condition|)
block|{
case|case
name|QNetworkAccessManager
operator|::
name|GetOperation
case|:
case|case
name|QNetworkAccessManager
operator|::
name|PutOperation
case|:
break|break;
default|default:
comment|// no, we can't handle this operation
return|return
literal|0
return|;
block|}
name|QUrl
name|url
init|=
name|request
operator|.
name|url
argument_list|()
decl_stmt|;
if|if
condition|(
name|url
operator|.
name|scheme
argument_list|()
operator|.
name|compare
argument_list|(
name|QLatin1String
argument_list|(
literal|"ftp"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|==
literal|0
condition|)
return|return
operator|new
name|QNetworkAccessFtpBackend
return|;
return|return
literal|0
return|;
block|}
end_function
begin_class
DECL|class|QNetworkAccessCachedFtpConnection
class|class
name|QNetworkAccessCachedFtpConnection
super|:
specifier|public
name|QFtp
super|,
specifier|public
name|QNetworkAccessCache
operator|::
name|CacheableObject
block|{
comment|// Q_OBJECT
public|public:
DECL|function|QNetworkAccessCachedFtpConnection
name|QNetworkAccessCachedFtpConnection
parameter_list|()
block|{
name|setExpires
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setShareable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|function|dispose
name|void
name|dispose
parameter_list|()
block|{
name|connect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|done
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|deleteLater
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|close
argument_list|()
expr_stmt|;
block|}
block|}
class|;
end_class
begin_constructor
DECL|function|QNetworkAccessFtpBackend
name|QNetworkAccessFtpBackend
operator|::
name|QNetworkAccessFtpBackend
parameter_list|()
member_init_list|:
name|ftp
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|uploadDevice
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|totalBytes
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|helpId
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|sizeId
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|mdtmId
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|supportsSize
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|supportsMdtm
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|state
argument_list|(
name|Idle
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QNetworkAccessFtpBackend
name|QNetworkAccessFtpBackend
operator|::
name|~
name|QNetworkAccessFtpBackend
parameter_list|()
block|{
comment|//if backend destroyed while in use, then abort (this is the code path from QNetworkReply::abort)
if|if
condition|(
name|ftp
operator|&&
name|state
operator|!=
name|Disconnecting
condition|)
name|ftp
operator|->
name|abort
argument_list|()
expr_stmt|;
name|disconnectFromFtp
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|open
name|void
name|QNetworkAccessFtpBackend
operator|::
name|open
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_NO_NETWORKPROXY
name|QNetworkProxy
name|proxy
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QNetworkProxy
modifier|&
name|p
decl|,
name|proxyList
argument_list|()
control|)
block|{
comment|// use the first FTP proxy
comment|// or no proxy at all
if|if
condition|(
name|p
operator|.
name|type
argument_list|()
operator|==
name|QNetworkProxy
operator|::
name|FtpCachingProxy
operator|||
name|p
operator|.
name|type
argument_list|()
operator|==
name|QNetworkProxy
operator|::
name|NoProxy
condition|)
block|{
name|proxy
operator|=
name|p
expr_stmt|;
break|break;
block|}
block|}
comment|// did we find an FTP proxy or a NoProxy?
if|if
condition|(
name|proxy
operator|.
name|type
argument_list|()
operator|==
name|QNetworkProxy
operator|::
name|DefaultProxy
condition|)
block|{
comment|// unsuitable proxies
name|error
argument_list|(
name|QNetworkReply
operator|::
name|ProxyNotFoundError
argument_list|,
name|tr
argument_list|(
literal|"No suitable proxy found"
argument_list|)
argument_list|)
expr_stmt|;
name|finished
argument_list|()
expr_stmt|;
return|return;
block|}
endif|#
directive|endif
name|QUrl
name|url
init|=
name|this
operator|->
name|url
argument_list|()
decl_stmt|;
if|if
condition|(
name|url
operator|.
name|path
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|url
operator|.
name|setPath
argument_list|(
name|QLatin1String
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|setUrl
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|url
operator|.
name|path
argument_list|()
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
condition|)
block|{
name|error
argument_list|(
name|QNetworkReply
operator|::
name|ContentOperationNotPermittedError
argument_list|,
name|tr
argument_list|(
literal|"Cannot open %1: is a directory"
argument_list|)
operator|.
name|arg
argument_list|(
name|url
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|finished
argument_list|()
expr_stmt|;
return|return;
block|}
name|state
operator|=
name|LoggingIn
expr_stmt|;
name|QNetworkAccessCache
modifier|*
name|objectCache
init|=
name|QNetworkAccessManagerPrivate
operator|::
name|getObjectCache
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|QByteArray
name|cacheKey
init|=
name|makeCacheKey
argument_list|(
name|url
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|objectCache
operator|->
name|requestEntry
argument_list|(
name|cacheKey
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|ftpConnectionReady
argument_list|(
name|QNetworkAccessCache
operator|::
name|CacheableObject
operator|*
argument_list|)
argument_list|)
argument_list|)
condition|)
block|{
name|ftp
operator|=
operator|new
name|QNetworkAccessCachedFtpConnection
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_BEARERMANAGEMENT
comment|//copy network session down to the QFtp
name|ftp
operator|->
name|setProperty
argument_list|(
literal|"_q_networksession"
argument_list|,
name|property
argument_list|(
literal|"_q_networksession"
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_NETWORKPROXY
if|if
condition|(
name|proxy
operator|.
name|type
argument_list|()
operator|==
name|QNetworkProxy
operator|::
name|FtpCachingProxy
condition|)
name|ftp
operator|->
name|setProxy
argument_list|(
name|proxy
operator|.
name|hostName
argument_list|()
argument_list|,
name|proxy
operator|.
name|port
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|ftp
operator|->
name|connectToHost
argument_list|(
name|url
operator|.
name|host
argument_list|()
argument_list|,
name|url
operator|.
name|port
argument_list|(
name|DefaultFtpPort
argument_list|)
argument_list|)
expr_stmt|;
name|ftp
operator|->
name|login
argument_list|(
name|url
operator|.
name|userName
argument_list|()
argument_list|,
name|url
operator|.
name|password
argument_list|()
argument_list|)
expr_stmt|;
name|objectCache
operator|->
name|addEntry
argument_list|(
name|cacheKey
argument_list|,
name|ftp
argument_list|)
expr_stmt|;
name|ftpConnectionReady
argument_list|(
name|ftp
argument_list|)
expr_stmt|;
block|}
comment|// Put operation
if|if
condition|(
name|operation
argument_list|()
operator|==
name|QNetworkAccessManager
operator|::
name|PutOperation
condition|)
block|{
name|uploadDevice
operator|=
name|QNonContiguousByteDeviceFactory
operator|::
name|wrap
argument_list|(
name|createUploadByteDevice
argument_list|()
argument_list|)
expr_stmt|;
name|uploadDevice
operator|->
name|setParent
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|closeDownstreamChannel
name|void
name|QNetworkAccessFtpBackend
operator|::
name|closeDownstreamChannel
parameter_list|()
block|{
name|state
operator|=
name|Disconnecting
expr_stmt|;
if|if
condition|(
name|operation
argument_list|()
operator|==
name|QNetworkAccessManager
operator|::
name|GetOperation
condition|)
name|ftp
operator|->
name|abort
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|downstreamReadyWrite
name|void
name|QNetworkAccessFtpBackend
operator|::
name|downstreamReadyWrite
parameter_list|()
block|{
if|if
condition|(
name|state
operator|==
name|Transferring
operator|&&
name|ftp
operator|&&
name|ftp
operator|->
name|bytesAvailable
argument_list|()
condition|)
name|ftpReadyRead
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|ftpConnectionReady
name|void
name|QNetworkAccessFtpBackend
operator|::
name|ftpConnectionReady
parameter_list|(
name|QNetworkAccessCache
operator|::
name|CacheableObject
modifier|*
name|o
parameter_list|)
block|{
name|ftp
operator|=
cast|static_cast
argument_list|<
name|QNetworkAccessCachedFtpConnection
operator|*
argument_list|>
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|ftp
argument_list|,
name|SIGNAL
argument_list|(
name|done
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|ftpDone
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|ftp
argument_list|,
name|SIGNAL
argument_list|(
name|rawCommandReply
argument_list|(
name|int
argument_list|,
name|QString
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|ftpRawCommandReply
argument_list|(
name|int
argument_list|,
name|QString
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|ftp
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|ftpReadyRead
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// is the login process done already?
if|if
condition|(
name|ftp
operator|->
name|state
argument_list|()
operator|==
name|QFtp
operator|::
name|LoggedIn
condition|)
name|ftpDone
argument_list|()
expr_stmt|;
comment|// no, defer the actual operation until after we've logged in
block|}
end_function
begin_function
DECL|function|disconnectFromFtp
name|void
name|QNetworkAccessFtpBackend
operator|::
name|disconnectFromFtp
parameter_list|()
block|{
name|state
operator|=
name|Disconnecting
expr_stmt|;
if|if
condition|(
name|ftp
condition|)
block|{
name|disconnect
argument_list|(
name|ftp
argument_list|,
literal|0
argument_list|,
name|this
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QByteArray
name|key
init|=
name|makeCacheKey
argument_list|(
name|url
argument_list|()
argument_list|)
decl_stmt|;
name|QNetworkAccessManagerPrivate
operator|::
name|getObjectCache
argument_list|(
name|this
argument_list|)
operator|->
name|releaseEntry
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|ftp
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|ftpDone
name|void
name|QNetworkAccessFtpBackend
operator|::
name|ftpDone
parameter_list|()
block|{
comment|// the last command we sent is done
if|if
condition|(
name|state
operator|==
name|LoggingIn
operator|&&
name|ftp
operator|->
name|state
argument_list|()
operator|!=
name|QFtp
operator|::
name|LoggedIn
condition|)
block|{
if|if
condition|(
name|ftp
operator|->
name|state
argument_list|()
operator|==
name|QFtp
operator|::
name|Connected
condition|)
block|{
comment|// the login did not succeed
name|QUrl
name|newUrl
init|=
name|url
argument_list|()
decl_stmt|;
name|QString
name|userInfo
init|=
name|newUrl
operator|.
name|userInfo
argument_list|()
decl_stmt|;
name|newUrl
operator|.
name|setUserInfo
argument_list|(
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|setUrl
argument_list|(
name|newUrl
argument_list|)
expr_stmt|;
name|QAuthenticator
name|auth
decl_stmt|;
name|authenticationRequired
argument_list|(
operator|&
name|auth
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|auth
operator|.
name|isNull
argument_list|()
condition|)
block|{
comment|// try again:
name|newUrl
operator|.
name|setUserName
argument_list|(
name|auth
operator|.
name|user
argument_list|()
argument_list|)
expr_stmt|;
name|ftp
operator|->
name|login
argument_list|(
name|auth
operator|.
name|user
argument_list|()
argument_list|,
name|auth
operator|.
name|password
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Re insert the user info so that we can remove the cache entry.
name|newUrl
operator|.
name|setUserInfo
argument_list|(
name|userInfo
argument_list|)
expr_stmt|;
name|setUrl
argument_list|(
name|newUrl
argument_list|)
expr_stmt|;
name|error
argument_list|(
name|QNetworkReply
operator|::
name|AuthenticationRequiredError
argument_list|,
name|tr
argument_list|(
literal|"Logging in to %1 failed: authentication required"
argument_list|)
operator|.
name|arg
argument_list|(
name|url
argument_list|()
operator|.
name|host
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// we did not connect
name|QNetworkReply
operator|::
name|NetworkError
name|code
decl_stmt|;
switch|switch
condition|(
name|ftp
operator|->
name|error
argument_list|()
condition|)
block|{
case|case
name|QFtp
operator|::
name|HostNotFound
case|:
name|code
operator|=
name|QNetworkReply
operator|::
name|HostNotFoundError
expr_stmt|;
break|break;
case|case
name|QFtp
operator|::
name|ConnectionRefused
case|:
name|code
operator|=
name|QNetworkReply
operator|::
name|ConnectionRefusedError
expr_stmt|;
break|break;
default|default:
name|code
operator|=
name|QNetworkReply
operator|::
name|ProtocolFailure
expr_stmt|;
break|break;
block|}
name|error
argument_list|(
name|code
argument_list|,
name|ftp
operator|->
name|errorString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// we're not connected, so remove the cache entry:
name|QByteArray
name|key
init|=
name|makeCacheKey
argument_list|(
name|url
argument_list|()
argument_list|)
decl_stmt|;
name|QNetworkAccessManagerPrivate
operator|::
name|getObjectCache
argument_list|(
name|this
argument_list|)
operator|->
name|removeEntry
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|disconnect
argument_list|(
name|ftp
argument_list|,
literal|0
argument_list|,
name|this
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ftp
operator|->
name|dispose
argument_list|()
expr_stmt|;
name|ftp
operator|=
literal|0
expr_stmt|;
name|state
operator|=
name|Disconnecting
expr_stmt|;
name|finished
argument_list|()
expr_stmt|;
return|return;
block|}
comment|// check for errors:
if|if
condition|(
name|ftp
operator|->
name|error
argument_list|()
operator|!=
name|QFtp
operator|::
name|NoError
condition|)
block|{
name|QString
name|msg
decl_stmt|;
if|if
condition|(
name|operation
argument_list|()
operator|==
name|QNetworkAccessManager
operator|::
name|GetOperation
condition|)
name|msg
operator|=
name|tr
argument_list|(
literal|"Error while downloading %1: %2"
argument_list|)
expr_stmt|;
else|else
name|msg
operator|=
name|tr
argument_list|(
literal|"Error while uploading %1: %2"
argument_list|)
expr_stmt|;
name|msg
operator|=
name|msg
operator|.
name|arg
argument_list|(
name|url
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|ftp
operator|->
name|errorString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
operator|==
name|Statting
condition|)
comment|// file probably doesn't exist
name|error
argument_list|(
name|QNetworkReply
operator|::
name|ContentNotFoundError
argument_list|,
name|msg
argument_list|)
expr_stmt|;
else|else
name|error
argument_list|(
name|QNetworkReply
operator|::
name|ContentAccessDenied
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|disconnectFromFtp
argument_list|()
expr_stmt|;
name|finished
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|state
operator|==
name|LoggingIn
condition|)
block|{
name|state
operator|=
name|CheckingFeatures
expr_stmt|;
if|if
condition|(
name|operation
argument_list|()
operator|==
name|QNetworkAccessManager
operator|::
name|GetOperation
condition|)
block|{
comment|// send help command to find out if server supports "SIZE" and "MDTM"
name|QString
name|command
init|=
name|url
argument_list|()
operator|.
name|path
argument_list|()
decl_stmt|;
name|command
operator|.
name|prepend
argument_list|(
name|QLatin1String
argument_list|(
literal|"%1 "
argument_list|)
argument_list|)
expr_stmt|;
name|helpId
operator|=
name|ftp
operator|->
name|rawCommand
argument_list|(
name|QLatin1String
argument_list|(
literal|"HELP"
argument_list|)
argument_list|)
expr_stmt|;
comment|// get supported commands
block|}
else|else
block|{
name|ftpDone
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|state
operator|==
name|CheckingFeatures
condition|)
block|{
name|state
operator|=
name|Statting
expr_stmt|;
if|if
condition|(
name|operation
argument_list|()
operator|==
name|QNetworkAccessManager
operator|::
name|GetOperation
condition|)
block|{
comment|// logged in successfully, send the stat requests (if supported)
name|QString
name|command
init|=
name|url
argument_list|()
operator|.
name|path
argument_list|()
decl_stmt|;
name|command
operator|.
name|prepend
argument_list|(
name|QLatin1String
argument_list|(
literal|"%1 "
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|supportsSize
condition|)
block|{
name|ftp
operator|->
name|rawCommand
argument_list|(
name|QLatin1String
argument_list|(
literal|"TYPE I"
argument_list|)
argument_list|)
expr_stmt|;
name|sizeId
operator|=
name|ftp
operator|->
name|rawCommand
argument_list|(
name|command
operator|.
name|arg
argument_list|(
name|QLatin1String
argument_list|(
literal|"SIZE"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// get size
block|}
if|if
condition|(
name|supportsMdtm
condition|)
name|mdtmId
operator|=
name|ftp
operator|->
name|rawCommand
argument_list|(
name|command
operator|.
name|arg
argument_list|(
name|QLatin1String
argument_list|(
literal|"MDTM"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// get modified time
if|if
condition|(
operator|!
name|supportsSize
operator|&&
operator|!
name|supportsMdtm
condition|)
name|ftpDone
argument_list|()
expr_stmt|;
comment|// no commands sent, move to the next state
block|}
else|else
block|{
name|ftpDone
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|state
operator|==
name|Statting
condition|)
block|{
comment|// statted successfully, send the actual request
emit|emit
name|metaDataChanged
argument_list|()
emit|;
name|state
operator|=
name|Transferring
expr_stmt|;
name|QFtp
operator|::
name|TransferType
name|type
init|=
name|QFtp
operator|::
name|Binary
decl_stmt|;
if|if
condition|(
name|operation
argument_list|()
operator|==
name|QNetworkAccessManager
operator|::
name|GetOperation
condition|)
block|{
name|setCachingEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ftp
operator|->
name|get
argument_list|(
name|url
argument_list|()
operator|.
name|path
argument_list|()
argument_list|,
literal|0
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ftp
operator|->
name|put
argument_list|(
name|uploadDevice
argument_list|,
name|url
argument_list|()
operator|.
name|path
argument_list|()
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|state
operator|==
name|Transferring
condition|)
block|{
comment|// upload or download finished
name|disconnectFromFtp
argument_list|()
expr_stmt|;
name|finished
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|ftpReadyRead
name|void
name|QNetworkAccessFtpBackend
operator|::
name|ftpReadyRead
parameter_list|()
block|{
name|QByteArray
name|data
init|=
name|ftp
operator|->
name|readAll
argument_list|()
decl_stmt|;
name|QByteDataBuffer
name|list
decl_stmt|;
name|list
operator|.
name|append
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|data
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// important because of implicit sharing!
name|writeDownstreamData
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|ftpRawCommandReply
name|void
name|QNetworkAccessFtpBackend
operator|::
name|ftpRawCommandReply
parameter_list|(
name|int
name|code
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
comment|//qDebug()<< "FTP reply:"<< code<< text;
name|int
name|id
init|=
name|ftp
operator|->
name|currentId
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|id
operator|==
name|helpId
operator|)
operator|&&
operator|(
operator|(
name|code
operator|==
literal|200
operator|)
operator|||
operator|(
name|code
operator|==
literal|214
operator|)
operator|)
condition|)
block|{
comment|// supported commands
comment|// the "FEAT" ftp command would be nice here, but it is not part of the
comment|// initial FTP RFC 959, neither ar "SIZE" nor "MDTM" (they are all specified
comment|// in RFC 3659)
if|if
condition|(
name|text
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"SIZE"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
condition|)
name|supportsSize
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|text
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"MDTM"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
condition|)
name|supportsMdtm
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|code
operator|==
literal|213
condition|)
block|{
comment|// file status
if|if
condition|(
name|id
operator|==
name|sizeId
condition|)
block|{
comment|// reply to the size command
name|setHeader
argument_list|(
name|QNetworkRequest
operator|::
name|ContentLengthHeader
argument_list|,
name|text
operator|.
name|toLongLong
argument_list|()
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_DATESTRING
block|}
elseif|else
if|if
condition|(
name|id
operator|==
name|mdtmId
condition|)
block|{
name|QDateTime
name|dt
init|=
name|QDateTime
operator|::
name|fromString
argument_list|(
name|text
argument_list|,
name|QLatin1String
argument_list|(
literal|"yyyyMMddHHmmss"
argument_list|)
argument_list|)
decl_stmt|;
name|setHeader
argument_list|(
name|QNetworkRequest
operator|::
name|LastModifiedHeader
argument_list|,
name|dt
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
block|}
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_FTP
end_comment
end_unit
