begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtNetwork module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|//#define QNETWORKDISKCACHE_DEBUG
end_comment
begin_include
include|#
directive|include
file|"qnetworkdiskcache.h"
end_include
begin_include
include|#
directive|include
file|"qnetworkdiskcache_p.h"
end_include
begin_include
include|#
directive|include
file|"QtCore/qscopedpointer.h"
end_include
begin_include
include|#
directive|include
file|<qfile.h>
end_include
begin_include
include|#
directive|include
file|<qdir.h>
end_include
begin_include
include|#
directive|include
file|<qdatetime.h>
end_include
begin_include
include|#
directive|include
file|<qdiriterator.h>
end_include
begin_include
include|#
directive|include
file|<qurl.h>
end_include
begin_include
include|#
directive|include
file|<qcryptographichash.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_define
DECL|macro|CACHE_POSTFIX
define|#
directive|define
name|CACHE_POSTFIX
value|QLatin1String(".d")
end_define
begin_define
DECL|macro|PREPARED_SLASH
define|#
directive|define
name|PREPARED_SLASH
value|QLatin1String("prepared/")
end_define
begin_define
DECL|macro|CACHE_VERSION
define|#
directive|define
name|CACHE_VERSION
value|7
end_define
begin_define
DECL|macro|DATA_DIR
define|#
directive|define
name|DATA_DIR
value|QLatin1String("data")
end_define
begin_define
DECL|macro|MAX_COMPRESSION_SIZE
define|#
directive|define
name|MAX_COMPRESSION_SIZE
value|(1024 * 1024 * 3)
end_define
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_NETWORKDISKCACHE
end_ifndef
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_comment
comment|/*!     \class QNetworkDiskCache     \since 4.5     \inmodule QtNetwork      \brief The QNetworkDiskCache class provides a very basic disk cache.      QNetworkDiskCache stores each url in its own file inside of the     cacheDirectory using QDataStream.  Files with a text MimeType     are compressed using qCompress.  Each cache file starts with "cache_"     and ends in ".cache".  Data is written to disk only in insert()     and updateMetaData().      Currently you cannot share the same cache files with more than     one disk cache.      QNetworkDiskCache by default limits the amount of space that the cache will     use on the system to 50MB.      Note you have to set the cache directory before it will work.      A network disk cache can be enabled by:      \snippet code/src_network_access_qnetworkdiskcache.cpp 0      When sending requests, to control the preference of when to use the cache     and when to use the network, consider the following:      \snippet code/src_network_access_qnetworkdiskcache.cpp 1      To check whether the response came from the cache or from the network, the     following can be applied:      \snippet code/src_network_access_qnetworkdiskcache.cpp 2 */
end_comment
begin_comment
comment|/*!     Creates a new disk cache. The \a parent argument is passed to     QAbstractNetworkCache's constructor.  */
end_comment
begin_constructor
DECL|function|QNetworkDiskCache
name|QNetworkDiskCache
operator|::
name|QNetworkDiskCache
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QAbstractNetworkCache
argument_list|(
operator|*
operator|new
name|QNetworkDiskCachePrivate
argument_list|,
name|parent
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Destroys the cache object.  This does not clear the disk cache.  */
end_comment
begin_destructor
DECL|function|~QNetworkDiskCache
name|QNetworkDiskCache
operator|::
name|~
name|QNetworkDiskCache
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QNetworkDiskCache
argument_list|)
expr_stmt|;
name|QHashIterator
argument_list|<
name|QIODevice
modifier|*
argument_list|,
name|QCacheItem
modifier|*
argument_list|>
name|it
argument_list|(
name|d
operator|->
name|inserting
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
operator|delete
name|it
operator|.
name|value
argument_list|()
expr_stmt|;
block|}
block|}
end_destructor
begin_comment
comment|/*!     Returns the location where cached files will be stored. */
end_comment
begin_function
DECL|function|cacheDirectory
name|QString
name|QNetworkDiskCache
operator|::
name|cacheDirectory
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QNetworkDiskCache
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|cacheDirectory
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the directory where cached files will be stored to \a cacheDir      QNetworkDiskCache will create this directory if it does not exists.      Prepared cache items will be stored in the new cache directory when     they are inserted.      \sa QDesktopServices::CacheLocation */
end_comment
begin_function
DECL|function|setCacheDirectory
name|void
name|QNetworkDiskCache
operator|::
name|setCacheDirectory
parameter_list|(
specifier|const
name|QString
modifier|&
name|cacheDir
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QNETWORKDISKCACHE_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
literal|"QNetworkDiskCache::setCacheDirectory()"
operator|<<
name|cacheDir
expr_stmt|;
endif|#
directive|endif
name|Q_D
argument_list|(
name|QNetworkDiskCache
argument_list|)
expr_stmt|;
if|if
condition|(
name|cacheDir
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|d
operator|->
name|cacheDirectory
operator|=
name|cacheDir
expr_stmt|;
name|QDir
name|dir
argument_list|(
name|d
operator|->
name|cacheDirectory
argument_list|)
decl_stmt|;
name|d
operator|->
name|cacheDirectory
operator|=
name|dir
operator|.
name|absolutePath
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|cacheDirectory
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
condition|)
name|d
operator|->
name|cacheDirectory
operator|+=
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
name|d
operator|->
name|dataDirectory
operator|=
name|d
operator|->
name|cacheDirectory
operator|+
name|DATA_DIR
operator|+
name|QString
operator|::
name|number
argument_list|(
name|CACHE_VERSION
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
name|d
operator|->
name|prepareLayout
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|cacheSize
name|qint64
name|QNetworkDiskCache
operator|::
name|cacheSize
parameter_list|()
specifier|const
block|{
if|#
directive|if
name|defined
argument_list|(
name|QNETWORKDISKCACHE_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
literal|"QNetworkDiskCache::cacheSize()"
expr_stmt|;
endif|#
directive|endif
name|Q_D
argument_list|(
specifier|const
name|QNetworkDiskCache
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|cacheDirectory
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|0
return|;
if|if
condition|(
name|d
operator|->
name|currentCacheSize
operator|<
literal|0
condition|)
block|{
name|QNetworkDiskCache
modifier|*
name|that
init|=
cast|const_cast
argument_list|<
name|QNetworkDiskCache
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|that
operator|->
name|d_func
argument_list|()
operator|->
name|currentCacheSize
operator|=
name|that
operator|->
name|expire
argument_list|()
expr_stmt|;
block|}
return|return
name|d
operator|->
name|currentCacheSize
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|prepare
name|QIODevice
modifier|*
name|QNetworkDiskCache
operator|::
name|prepare
parameter_list|(
specifier|const
name|QNetworkCacheMetaData
modifier|&
name|metaData
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QNETWORKDISKCACHE_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
literal|"QNetworkDiskCache::prepare()"
operator|<<
name|metaData
operator|.
name|url
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|Q_D
argument_list|(
name|QNetworkDiskCache
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|metaData
operator|.
name|isValid
argument_list|()
operator|||
operator|!
name|metaData
operator|.
name|url
argument_list|()
operator|.
name|isValid
argument_list|()
operator|||
operator|!
name|metaData
operator|.
name|saveToDisk
argument_list|()
condition|)
return|return
literal|0
return|;
if|if
condition|(
name|d
operator|->
name|cacheDirectory
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"QNetworkDiskCache::prepare() The cache directory is not set"
expr_stmt|;
return|return
literal|0
return|;
block|}
foreach|foreach
control|(
specifier|const
name|QNetworkCacheMetaData
operator|::
name|RawHeader
modifier|&
name|header
decl|,
name|metaData
operator|.
name|rawHeaders
argument_list|()
control|)
block|{
if|if
condition|(
name|header
operator|.
name|first
operator|.
name|toLower
argument_list|()
operator|==
literal|"content-length"
condition|)
block|{
specifier|const
name|qint64
name|size
init|=
name|header
operator|.
name|second
operator|.
name|toLongLong
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|>
operator|(
name|maximumCacheSize
argument_list|()
operator|*
literal|3
operator|)
operator|/
literal|4
condition|)
return|return
literal|0
return|;
break|break;
block|}
block|}
name|QScopedPointer
argument_list|<
name|QCacheItem
argument_list|>
name|cacheItem
argument_list|(
operator|new
name|QCacheItem
argument_list|)
decl_stmt|;
name|cacheItem
operator|->
name|metaData
operator|=
name|metaData
expr_stmt|;
name|QIODevice
modifier|*
name|device
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|cacheItem
operator|->
name|canCompress
argument_list|()
condition|)
block|{
name|cacheItem
operator|->
name|data
operator|.
name|open
argument_list|(
name|QBuffer
operator|::
name|ReadWrite
argument_list|)
expr_stmt|;
name|device
operator|=
operator|&
operator|(
name|cacheItem
operator|->
name|data
operator|)
expr_stmt|;
block|}
else|else
block|{
name|QString
name|templateName
init|=
name|d
operator|->
name|tmpCacheFileName
argument_list|()
decl_stmt|;
name|QT_TRY
block|{
name|cacheItem
operator|->
name|file
operator|=
operator|new
name|QTemporaryFile
argument_list|(
name|templateName
argument_list|,
operator|&
name|cacheItem
operator|->
name|data
argument_list|)
expr_stmt|;
block|}
name|QT_CATCH
argument_list|(
argument|...
argument_list|)
block|{
name|cacheItem
operator|->
name|file
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|cacheItem
operator|->
name|file
operator|||
operator|!
name|cacheItem
operator|->
name|file
operator|->
name|open
argument_list|()
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"QNetworkDiskCache::prepare() unable to open temporary file"
expr_stmt|;
name|cacheItem
operator|.
name|reset
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
name|cacheItem
operator|->
name|writeHeader
argument_list|(
name|cacheItem
operator|->
name|file
argument_list|)
expr_stmt|;
name|device
operator|=
name|cacheItem
operator|->
name|file
expr_stmt|;
block|}
name|d
operator|->
name|inserting
index|[
name|device
index|]
operator|=
name|cacheItem
operator|.
name|take
argument_list|()
expr_stmt|;
return|return
name|device
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|insert
name|void
name|QNetworkDiskCache
operator|::
name|insert
parameter_list|(
name|QIODevice
modifier|*
name|device
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QNETWORKDISKCACHE_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
literal|"QNetworkDiskCache::insert()"
operator|<<
name|device
expr_stmt|;
endif|#
directive|endif
name|Q_D
argument_list|(
name|QNetworkDiskCache
argument_list|)
expr_stmt|;
name|QHash
argument_list|<
name|QIODevice
modifier|*
argument_list|,
name|QCacheItem
modifier|*
argument_list|>
operator|::
name|iterator
name|it
init|=
name|d
operator|->
name|inserting
operator|.
name|find
argument_list|(
name|device
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|==
name|d
operator|->
name|inserting
operator|.
name|end
argument_list|()
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"QNetworkDiskCache::insert() called on a device we don't know about"
operator|<<
name|device
expr_stmt|;
return|return;
block|}
name|d
operator|->
name|storeItem
argument_list|(
name|it
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
name|it
operator|.
name|value
argument_list|()
expr_stmt|;
name|d
operator|->
name|inserting
operator|.
name|erase
argument_list|(
name|it
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Create subdirectories and other housekeeping on the filesystem.     Prevents too many files from being present in any single directory. */
end_comment
begin_function
DECL|function|prepareLayout
name|void
name|QNetworkDiskCachePrivate
operator|::
name|prepareLayout
parameter_list|()
block|{
name|QDir
name|helper
decl_stmt|;
name|helper
operator|.
name|mkpath
argument_list|(
name|cacheDirectory
operator|+
name|PREPARED_SLASH
argument_list|)
expr_stmt|;
comment|//Create directory and subdirectories 0-F
name|helper
operator|.
name|mkpath
argument_list|(
name|dataDirectory
argument_list|)
expr_stmt|;
for|for
control|(
name|uint
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|16
condition|;
name|i
operator|++
control|)
block|{
name|QString
name|str
init|=
name|QString
operator|::
name|number
argument_list|(
name|i
argument_list|,
literal|16
argument_list|)
decl_stmt|;
name|QString
name|subdir
init|=
name|dataDirectory
operator|+
name|str
decl_stmt|;
name|helper
operator|.
name|mkdir
argument_list|(
name|subdir
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|storeItem
name|void
name|QNetworkDiskCachePrivate
operator|::
name|storeItem
parameter_list|(
name|QCacheItem
modifier|*
name|cacheItem
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QNetworkDiskCache
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|cacheItem
operator|->
name|metaData
operator|.
name|saveToDisk
argument_list|()
argument_list|)
expr_stmt|;
name|QString
name|fileName
init|=
name|cacheFileName
argument_list|(
name|cacheItem
operator|->
name|metaData
operator|.
name|url
argument_list|()
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
operator|!
name|fileName
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|QFile
operator|::
name|exists
argument_list|(
name|fileName
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|QFile
operator|::
name|remove
argument_list|(
name|fileName
argument_list|)
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"QNetworkDiskCache: couldn't remove the cache file "
operator|<<
name|fileName
expr_stmt|;
return|return;
block|}
block|}
if|if
condition|(
name|currentCacheSize
operator|>
literal|0
condition|)
name|currentCacheSize
operator|+=
literal|1024
operator|+
name|cacheItem
operator|->
name|size
argument_list|()
expr_stmt|;
name|currentCacheSize
operator|=
name|q
operator|->
name|expire
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|cacheItem
operator|->
name|file
condition|)
block|{
name|QString
name|templateName
init|=
name|tmpCacheFileName
argument_list|()
decl_stmt|;
name|cacheItem
operator|->
name|file
operator|=
operator|new
name|QTemporaryFile
argument_list|(
name|templateName
argument_list|,
operator|&
name|cacheItem
operator|->
name|data
argument_list|)
expr_stmt|;
if|if
condition|(
name|cacheItem
operator|->
name|file
operator|->
name|open
argument_list|()
condition|)
block|{
name|cacheItem
operator|->
name|writeHeader
argument_list|(
name|cacheItem
operator|->
name|file
argument_list|)
expr_stmt|;
name|cacheItem
operator|->
name|writeCompressedData
argument_list|(
name|cacheItem
operator|->
name|file
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|cacheItem
operator|->
name|file
operator|&&
name|cacheItem
operator|->
name|file
operator|->
name|isOpen
argument_list|()
operator|&&
name|cacheItem
operator|->
name|file
operator|->
name|error
argument_list|()
operator|==
name|QFile
operator|::
name|NoError
condition|)
block|{
name|cacheItem
operator|->
name|file
operator|->
name|setAutoRemove
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// ### use atomic rename rather then remove& rename
if|if
condition|(
name|cacheItem
operator|->
name|file
operator|->
name|rename
argument_list|(
name|fileName
argument_list|)
condition|)
name|currentCacheSize
operator|+=
name|cacheItem
operator|->
name|file
operator|->
name|size
argument_list|()
expr_stmt|;
else|else
name|cacheItem
operator|->
name|file
operator|->
name|setAutoRemove
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cacheItem
operator|->
name|metaData
operator|.
name|url
argument_list|()
operator|==
name|lastItem
operator|.
name|metaData
operator|.
name|url
argument_list|()
condition|)
name|lastItem
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|remove
name|bool
name|QNetworkDiskCache
operator|::
name|remove
parameter_list|(
specifier|const
name|QUrl
modifier|&
name|url
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QNETWORKDISKCACHE_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
literal|"QNetworkDiskCache::remove()"
operator|<<
name|url
expr_stmt|;
endif|#
directive|endif
name|Q_D
argument_list|(
name|QNetworkDiskCache
argument_list|)
expr_stmt|;
comment|// remove is also used to cancel insertions, not a common operation
name|QHashIterator
argument_list|<
name|QIODevice
modifier|*
argument_list|,
name|QCacheItem
modifier|*
argument_list|>
name|it
argument_list|(
name|d
operator|->
name|inserting
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|QCacheItem
modifier|*
name|item
init|=
name|it
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|item
operator|&&
name|item
operator|->
name|metaData
operator|.
name|url
argument_list|()
operator|==
name|url
condition|)
block|{
operator|delete
name|item
expr_stmt|;
name|d
operator|->
name|inserting
operator|.
name|remove
argument_list|(
name|it
operator|.
name|key
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
if|if
condition|(
name|d
operator|->
name|lastItem
operator|.
name|metaData
operator|.
name|url
argument_list|()
operator|==
name|url
condition|)
name|d
operator|->
name|lastItem
operator|.
name|reset
argument_list|()
expr_stmt|;
return|return
name|d
operator|->
name|removeFile
argument_list|(
name|d
operator|->
name|cacheFileName
argument_list|(
name|url
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Put all of the misc file removing into one function to be extra safe  */
end_comment
begin_function
DECL|function|removeFile
name|bool
name|QNetworkDiskCachePrivate
operator|::
name|removeFile
parameter_list|(
specifier|const
name|QString
modifier|&
name|file
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QNETWORKDISKCACHE_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
literal|"QNetworkDiskCache::removFile()"
operator|<<
name|file
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|file
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
name|QFileInfo
name|info
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|QString
name|fileName
init|=
name|info
operator|.
name|fileName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|fileName
operator|.
name|endsWith
argument_list|(
name|CACHE_POSTFIX
argument_list|)
condition|)
return|return
literal|false
return|;
name|qint64
name|size
init|=
name|info
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|QFile
operator|::
name|remove
argument_list|(
name|file
argument_list|)
condition|)
block|{
name|currentCacheSize
operator|-=
name|size
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|metaData
name|QNetworkCacheMetaData
name|QNetworkDiskCache
operator|::
name|metaData
parameter_list|(
specifier|const
name|QUrl
modifier|&
name|url
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QNETWORKDISKCACHE_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
literal|"QNetworkDiskCache::metaData()"
operator|<<
name|url
expr_stmt|;
endif|#
directive|endif
name|Q_D
argument_list|(
name|QNetworkDiskCache
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|lastItem
operator|.
name|metaData
operator|.
name|url
argument_list|()
operator|==
name|url
condition|)
return|return
name|d
operator|->
name|lastItem
operator|.
name|metaData
return|;
return|return
name|fileMetaData
argument_list|(
name|d
operator|->
name|cacheFileName
argument_list|(
name|url
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the QNetworkCacheMetaData for the cache file \a fileName.      If \a fileName is not a cache file QNetworkCacheMetaData will be invalid.  */
end_comment
begin_function
DECL|function|fileMetaData
name|QNetworkCacheMetaData
name|QNetworkDiskCache
operator|::
name|fileMetaData
parameter_list|(
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|)
specifier|const
block|{
if|#
directive|if
name|defined
argument_list|(
name|QNETWORKDISKCACHE_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
literal|"QNetworkDiskCache::fileMetaData()"
operator|<<
name|fileName
expr_stmt|;
endif|#
directive|endif
name|Q_D
argument_list|(
specifier|const
name|QNetworkDiskCache
argument_list|)
expr_stmt|;
name|QFile
name|file
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
argument_list|)
condition|)
return|return
name|QNetworkCacheMetaData
argument_list|()
return|;
if|if
condition|(
operator|!
name|d
operator|->
name|lastItem
operator|.
name|read
argument_list|(
operator|&
name|file
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
name|QNetworkDiskCachePrivate
modifier|*
name|that
init|=
cast|const_cast
argument_list|<
name|QNetworkDiskCachePrivate
operator|*
argument_list|>
argument_list|(
name|d
argument_list|)
decl_stmt|;
name|that
operator|->
name|removeFile
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
block|}
return|return
name|d
operator|->
name|lastItem
operator|.
name|metaData
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|data
name|QIODevice
modifier|*
name|QNetworkDiskCache
operator|::
name|data
parameter_list|(
specifier|const
name|QUrl
modifier|&
name|url
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QNETWORKDISKCACHE_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
literal|"QNetworkDiskCache::data()"
operator|<<
name|url
expr_stmt|;
endif|#
directive|endif
name|Q_D
argument_list|(
name|QNetworkDiskCache
argument_list|)
expr_stmt|;
name|QScopedPointer
argument_list|<
name|QBuffer
argument_list|>
name|buffer
decl_stmt|;
if|if
condition|(
operator|!
name|url
operator|.
name|isValid
argument_list|()
condition|)
return|return
literal|0
return|;
if|if
condition|(
name|d
operator|->
name|lastItem
operator|.
name|metaData
operator|.
name|url
argument_list|()
operator|==
name|url
operator|&&
name|d
operator|->
name|lastItem
operator|.
name|data
operator|.
name|isOpen
argument_list|()
condition|)
block|{
name|buffer
operator|.
name|reset
argument_list|(
operator|new
name|QBuffer
argument_list|)
expr_stmt|;
name|buffer
operator|->
name|setData
argument_list|(
name|d
operator|->
name|lastItem
operator|.
name|data
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QScopedPointer
argument_list|<
name|QFile
argument_list|>
name|file
argument_list|(
operator|new
name|QFile
argument_list|(
name|d
operator|->
name|cacheFileName
argument_list|(
name|url
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|->
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
operator||
name|QIODevice
operator|::
name|Unbuffered
argument_list|)
condition|)
return|return
literal|0
return|;
if|if
condition|(
operator|!
name|d
operator|->
name|lastItem
operator|.
name|read
argument_list|(
name|file
operator|.
name|data
argument_list|()
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|file
operator|->
name|close
argument_list|()
expr_stmt|;
name|remove
argument_list|(
name|url
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
if|if
condition|(
name|d
operator|->
name|lastItem
operator|.
name|data
operator|.
name|isOpen
argument_list|()
condition|)
block|{
comment|// compressed
name|buffer
operator|.
name|reset
argument_list|(
operator|new
name|QBuffer
argument_list|)
expr_stmt|;
name|buffer
operator|->
name|setData
argument_list|(
name|d
operator|->
name|lastItem
operator|.
name|data
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buffer
operator|.
name|reset
argument_list|(
operator|new
name|QBuffer
argument_list|)
expr_stmt|;
comment|// ### verify that QFile uses the fd size and not the file name
name|qint64
name|size
init|=
name|file
operator|->
name|size
argument_list|()
operator|-
name|file
operator|->
name|pos
argument_list|()
decl_stmt|;
specifier|const
name|uchar
modifier|*
name|p
init|=
literal|0
decl_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_INTEGRITY
argument_list|)
name|p
operator|=
name|file
operator|->
name|map
argument_list|(
name|file
operator|->
name|pos
argument_list|()
argument_list|,
name|size
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|p
condition|)
block|{
name|buffer
operator|->
name|setData
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|)
name|p
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|file
operator|.
name|take
argument_list|()
operator|->
name|setParent
argument_list|(
name|buffer
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buffer
operator|->
name|setData
argument_list|(
name|file
operator|->
name|readAll
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|buffer
operator|->
name|open
argument_list|(
name|QBuffer
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|take
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|updateMetaData
name|void
name|QNetworkDiskCache
operator|::
name|updateMetaData
parameter_list|(
specifier|const
name|QNetworkCacheMetaData
modifier|&
name|metaData
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QNETWORKDISKCACHE_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
literal|"QNetworkDiskCache::updateMetaData()"
operator|<<
name|metaData
operator|.
name|url
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|QUrl
name|url
init|=
name|metaData
operator|.
name|url
argument_list|()
decl_stmt|;
name|QIODevice
modifier|*
name|oldDevice
init|=
name|data
argument_list|(
name|url
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|oldDevice
condition|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QNETWORKDISKCACHE_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
literal|"QNetworkDiskCache::updateMetaData(), no device!"
expr_stmt|;
endif|#
directive|endif
return|return;
block|}
name|QIODevice
modifier|*
name|newDevice
init|=
name|prepare
argument_list|(
name|metaData
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|newDevice
condition|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QNETWORKDISKCACHE_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
literal|"QNetworkDiskCache::updateMetaData(), no new device!"
operator|<<
name|url
expr_stmt|;
endif|#
directive|endif
return|return;
block|}
name|char
name|data
index|[
literal|1024
index|]
decl_stmt|;
while|while
condition|(
operator|!
name|oldDevice
operator|->
name|atEnd
argument_list|()
condition|)
block|{
name|qint64
name|s
init|=
name|oldDevice
operator|->
name|read
argument_list|(
name|data
argument_list|,
literal|1024
argument_list|)
decl_stmt|;
name|newDevice
operator|->
name|write
argument_list|(
name|data
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
operator|delete
name|oldDevice
expr_stmt|;
name|insert
argument_list|(
name|newDevice
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the current maximum size for the disk cache.      \sa setMaximumCacheSize()  */
end_comment
begin_function
DECL|function|maximumCacheSize
name|qint64
name|QNetworkDiskCache
operator|::
name|maximumCacheSize
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QNetworkDiskCache
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|maximumCacheSize
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the maximum size of the disk cache to be \a size.      If the new size is smaller then the current cache size then the cache will call expire().      \sa maximumCacheSize()  */
end_comment
begin_function
DECL|function|setMaximumCacheSize
name|void
name|QNetworkDiskCache
operator|::
name|setMaximumCacheSize
parameter_list|(
name|qint64
name|size
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QNetworkDiskCache
argument_list|)
expr_stmt|;
name|bool
name|expireCache
init|=
operator|(
name|size
operator|<
name|d
operator|->
name|maximumCacheSize
operator|)
decl_stmt|;
name|d
operator|->
name|maximumCacheSize
operator|=
name|size
expr_stmt|;
if|if
condition|(
name|expireCache
condition|)
name|d
operator|->
name|currentCacheSize
operator|=
name|expire
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Cleans the cache so that its size is under the maximum cache size.     Returns the current size of the cache.      When the current size of the cache is greater than the maximumCacheSize()     older cache files are removed until the total size is less then 90% of     maximumCacheSize() starting with the oldest ones first using the file     creation date to determine how old a cache file is.      Subclasses can reimplement this function to change the order that cache     files are removed taking into account information in the application     knows about that QNetworkDiskCache does not, for example the number of times     a cache is accessed.      Note: cacheSize() calls expire if the current cache size is unknown.      \sa maximumCacheSize(), fileMetaData()  */
end_comment
begin_function
DECL|function|expire
name|qint64
name|QNetworkDiskCache
operator|::
name|expire
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QNetworkDiskCache
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|currentCacheSize
operator|>=
literal|0
operator|&&
name|d
operator|->
name|currentCacheSize
operator|<
name|maximumCacheSize
argument_list|()
condition|)
return|return
name|d
operator|->
name|currentCacheSize
return|;
if|if
condition|(
name|cacheDirectory
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"QNetworkDiskCache::expire() The cache directory is not set"
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|// close file handle to prevent "in use" error when QFile::remove() is called
name|d
operator|->
name|lastItem
operator|.
name|reset
argument_list|()
expr_stmt|;
name|QDir
operator|::
name|Filters
name|filters
init|=
name|QDir
operator|::
name|AllDirs
operator||
name|QDir
operator|::
name|Files
operator||
name|QDir
operator|::
name|NoDotAndDotDot
decl_stmt|;
name|QDirIterator
name|it
argument_list|(
name|cacheDirectory
argument_list|()
argument_list|,
name|filters
argument_list|,
name|QDirIterator
operator|::
name|Subdirectories
argument_list|)
decl_stmt|;
name|QMultiMap
argument_list|<
name|QDateTime
argument_list|,
name|QString
argument_list|>
name|cacheItems
decl_stmt|;
name|qint64
name|totalSize
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|QString
name|path
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|QFileInfo
name|info
init|=
name|it
operator|.
name|fileInfo
argument_list|()
decl_stmt|;
name|QString
name|fileName
init|=
name|info
operator|.
name|fileName
argument_list|()
decl_stmt|;
if|if
condition|(
name|fileName
operator|.
name|endsWith
argument_list|(
name|CACHE_POSTFIX
argument_list|)
condition|)
block|{
name|cacheItems
operator|.
name|insert
argument_list|(
name|info
operator|.
name|created
argument_list|()
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|totalSize
operator|+=
name|info
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
block|}
name|int
name|removedFiles
init|=
literal|0
decl_stmt|;
name|qint64
name|goal
init|=
operator|(
name|maximumCacheSize
argument_list|()
operator|*
literal|9
operator|)
operator|/
literal|10
decl_stmt|;
name|QMultiMap
argument_list|<
name|QDateTime
argument_list|,
name|QString
argument_list|>
operator|::
name|const_iterator
name|i
init|=
name|cacheItems
operator|.
name|constBegin
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|!=
name|cacheItems
operator|.
name|constEnd
argument_list|()
condition|)
block|{
if|if
condition|(
name|totalSize
operator|<
name|goal
condition|)
break|break;
name|QString
name|name
init|=
name|i
operator|.
name|value
argument_list|()
decl_stmt|;
name|QFile
name|file
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|qint64
name|size
init|=
name|file
operator|.
name|size
argument_list|()
decl_stmt|;
name|file
operator|.
name|remove
argument_list|()
expr_stmt|;
name|totalSize
operator|-=
name|size
expr_stmt|;
operator|++
name|removedFiles
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
if|#
directive|if
name|defined
argument_list|(
name|QNETWORKDISKCACHE_DEBUG
argument_list|)
if|if
condition|(
name|removedFiles
operator|>
literal|0
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"QNetworkDiskCache::expire()"
operator|<<
literal|"Removed:"
operator|<<
name|removedFiles
operator|<<
literal|"Kept:"
operator|<<
name|cacheItems
operator|.
name|count
argument_list|()
operator|-
name|removedFiles
expr_stmt|;
block|}
endif|#
directive|endif
return|return
name|totalSize
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|clear
name|void
name|QNetworkDiskCache
operator|::
name|clear
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|QNETWORKDISKCACHE_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
literal|"QNetworkDiskCache::clear()"
expr_stmt|;
endif|#
directive|endif
name|Q_D
argument_list|(
name|QNetworkDiskCache
argument_list|)
expr_stmt|;
name|qint64
name|size
init|=
name|d
operator|->
name|maximumCacheSize
decl_stmt|;
name|d
operator|->
name|maximumCacheSize
operator|=
literal|0
expr_stmt|;
name|d
operator|->
name|currentCacheSize
operator|=
name|expire
argument_list|()
expr_stmt|;
name|d
operator|->
name|maximumCacheSize
operator|=
name|size
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Given a URL, generates a unique enough filename (and subdirectory)  */
end_comment
begin_function
DECL|function|uniqueFileName
name|QString
name|QNetworkDiskCachePrivate
operator|::
name|uniqueFileName
parameter_list|(
specifier|const
name|QUrl
modifier|&
name|url
parameter_list|)
block|{
name|QUrl
name|cleanUrl
init|=
name|url
decl_stmt|;
name|cleanUrl
operator|.
name|setPassword
argument_list|(
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|cleanUrl
operator|.
name|setFragment
argument_list|(
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCryptographicHash
name|hash
argument_list|(
name|QCryptographicHash
operator|::
name|Sha1
argument_list|)
decl_stmt|;
name|hash
operator|.
name|addData
argument_list|(
name|cleanUrl
operator|.
name|toEncoded
argument_list|()
argument_list|)
expr_stmt|;
comment|// convert sha1 to base36 form and return first 8 bytes for use as string
name|QByteArray
name|id
init|=
name|QByteArray
operator|::
name|number
argument_list|(
operator|*
operator|(
name|qlonglong
operator|*
operator|)
name|hash
operator|.
name|result
argument_list|()
operator|.
name|data
argument_list|()
argument_list|,
literal|36
argument_list|)
operator|.
name|left
argument_list|(
literal|8
argument_list|)
decl_stmt|;
comment|// generates<one-char subdir>/<8-char filname.d>
name|uint
name|code
init|=
operator|(
name|uint
operator|)
name|id
operator|.
name|at
argument_list|(
name|id
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|%
literal|16
decl_stmt|;
name|QString
name|pathFragment
init|=
name|QString
operator|::
name|number
argument_list|(
name|code
argument_list|,
literal|16
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
operator|+
name|QLatin1String
argument_list|(
name|id
argument_list|)
operator|+
name|CACHE_POSTFIX
decl_stmt|;
return|return
name|pathFragment
return|;
block|}
end_function
begin_function
DECL|function|tmpCacheFileName
name|QString
name|QNetworkDiskCachePrivate
operator|::
name|tmpCacheFileName
parameter_list|()
specifier|const
block|{
comment|//The subdirectory is presumed to be already read for use.
return|return
name|cacheDirectory
operator|+
name|PREPARED_SLASH
operator|+
name|QLatin1String
argument_list|(
literal|"XXXXXX"
argument_list|)
operator|+
name|CACHE_POSTFIX
return|;
block|}
end_function
begin_comment
comment|/*!     Generates fully qualified path of cached resource from a URL.  */
end_comment
begin_function
DECL|function|cacheFileName
name|QString
name|QNetworkDiskCachePrivate
operator|::
name|cacheFileName
parameter_list|(
specifier|const
name|QUrl
modifier|&
name|url
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|url
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|QString
argument_list|()
return|;
name|QString
name|fullpath
init|=
name|dataDirectory
operator|+
name|uniqueFileName
argument_list|(
name|url
argument_list|)
decl_stmt|;
return|return
name|fullpath
return|;
block|}
end_function
begin_comment
comment|/*!     We compress small text and JavaScript files.  */
end_comment
begin_function
DECL|function|canCompress
name|bool
name|QCacheItem
operator|::
name|canCompress
parameter_list|()
specifier|const
block|{
name|bool
name|sizeOk
init|=
literal|false
decl_stmt|;
name|bool
name|typeOk
init|=
literal|false
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QNetworkCacheMetaData
operator|::
name|RawHeader
modifier|&
name|header
decl|,
name|metaData
operator|.
name|rawHeaders
argument_list|()
control|)
block|{
if|if
condition|(
name|header
operator|.
name|first
operator|.
name|toLower
argument_list|()
operator|==
literal|"content-length"
condition|)
block|{
name|qint64
name|size
init|=
name|header
operator|.
name|second
operator|.
name|toLongLong
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|>
name|MAX_COMPRESSION_SIZE
condition|)
return|return
literal|false
return|;
else|else
name|sizeOk
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|header
operator|.
name|first
operator|.
name|toLower
argument_list|()
operator|==
literal|"content-type"
condition|)
block|{
name|QByteArray
name|type
init|=
name|header
operator|.
name|second
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|startsWith
argument_list|(
literal|"text/"
argument_list|)
operator|||
operator|(
name|type
operator|.
name|startsWith
argument_list|(
literal|"application/"
argument_list|)
operator|&&
operator|(
name|type
operator|.
name|endsWith
argument_list|(
literal|"javascript"
argument_list|)
operator|||
name|type
operator|.
name|endsWith
argument_list|(
literal|"ecmascript"
argument_list|)
operator|)
operator|)
condition|)
name|typeOk
operator|=
literal|true
expr_stmt|;
else|else
return|return
literal|false
return|;
block|}
if|if
condition|(
name|sizeOk
operator|&&
name|typeOk
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_enum
enum|enum
block|{
DECL|enumerator|CacheMagic
name|CacheMagic
init|=
literal|0xe8
block|,
DECL|enumerator|CurrentCacheVersion
name|CurrentCacheVersion
init|=
name|CACHE_VERSION
block|}
enum|;
end_enum
begin_function
DECL|function|writeHeader
name|void
name|QCacheItem
operator|::
name|writeHeader
parameter_list|(
name|QFile
modifier|*
name|device
parameter_list|)
specifier|const
block|{
name|QDataStream
name|out
argument_list|(
name|device
argument_list|)
decl_stmt|;
name|out
operator|<<
name|qint32
argument_list|(
name|CacheMagic
argument_list|)
expr_stmt|;
name|out
operator|<<
name|qint32
argument_list|(
name|CurrentCacheVersion
argument_list|)
expr_stmt|;
name|out
operator|<<
name|metaData
expr_stmt|;
name|bool
name|compressed
init|=
name|canCompress
argument_list|()
decl_stmt|;
name|out
operator|<<
name|compressed
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeCompressedData
name|void
name|QCacheItem
operator|::
name|writeCompressedData
parameter_list|(
name|QFile
modifier|*
name|device
parameter_list|)
specifier|const
block|{
name|QDataStream
name|out
argument_list|(
name|device
argument_list|)
decl_stmt|;
name|out
operator|<<
name|qCompress
argument_list|(
name|data
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns false if the file is a cache file,     but is an older version and should be removed otherwise true.  */
end_comment
begin_function
DECL|function|read
name|bool
name|QCacheItem
operator|::
name|read
parameter_list|(
name|QFile
modifier|*
name|device
parameter_list|,
name|bool
name|readData
parameter_list|)
block|{
name|reset
argument_list|()
expr_stmt|;
name|QDataStream
name|in
argument_list|(
name|device
argument_list|)
decl_stmt|;
name|qint32
name|marker
decl_stmt|;
name|qint32
name|v
decl_stmt|;
name|in
operator|>>
name|marker
expr_stmt|;
name|in
operator|>>
name|v
expr_stmt|;
if|if
condition|(
name|marker
operator|!=
name|CacheMagic
condition|)
return|return
literal|true
return|;
comment|// If the cache magic is correct, but the version is not we should remove it
if|if
condition|(
name|v
operator|!=
name|CurrentCacheVersion
condition|)
return|return
literal|false
return|;
name|bool
name|compressed
decl_stmt|;
name|QByteArray
name|dataBA
decl_stmt|;
name|in
operator|>>
name|metaData
expr_stmt|;
name|in
operator|>>
name|compressed
expr_stmt|;
if|if
condition|(
name|readData
operator|&&
name|compressed
condition|)
block|{
name|in
operator|>>
name|dataBA
expr_stmt|;
name|data
operator|.
name|setData
argument_list|(
name|qUncompress
argument_list|(
name|dataBA
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|.
name|open
argument_list|(
name|QBuffer
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
block|}
comment|// quick and dirty check if metadata's URL field and the file's name are in synch
name|QString
name|expectedFilename
init|=
name|QNetworkDiskCachePrivate
operator|::
name|uniqueFileName
argument_list|(
name|metaData
operator|.
name|url
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|device
operator|->
name|fileName
argument_list|()
operator|.
name|endsWith
argument_list|(
name|expectedFilename
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
name|metaData
operator|.
name|isValid
argument_list|()
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_NETWORKDISKCACHE
end_comment
end_unit
