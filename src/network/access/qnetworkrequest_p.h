begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the QtNetwork module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QNETWORKREQUEST_P_H
end_ifndef
begin_define
DECL|macro|QNETWORKREQUEST_P_H
define|#
directive|define
name|QNETWORKREQUEST_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists for the convenience
end_comment
begin_comment
comment|// of the Network Access API.  This header file may change from
end_comment
begin_comment
comment|// version to version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"qnetworkrequest.h"
end_include
begin_include
include|#
directive|include
file|"QtCore/qbytearray.h"
end_include
begin_include
include|#
directive|include
file|"QtCore/qlist.h"
end_include
begin_include
include|#
directive|include
file|"QtCore/qhash.h"
end_include
begin_include
include|#
directive|include
file|"QtCore/qshareddata.h"
end_include
begin_include
include|#
directive|include
file|"QtCore/qsharedpointer.h"
end_include
begin_include
include|#
directive|include
file|"QtCore/qpointer.h"
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
comment|// this is the common part between QNetworkRequestPrivate, QNetworkReplyPrivate and QHttpPartPrivate
name|class
name|QNetworkHeadersPrivate
block|{
name|public
label|:
typedef|typedef
name|QPair
operator|<
name|QByteArray
operator|,
name|QByteArray
operator|>
name|RawHeaderPair
expr_stmt|;
typedef|typedef
name|QList
operator|<
name|RawHeaderPair
operator|>
name|RawHeadersList
expr_stmt|;
typedef|typedef
name|QHash
operator|<
name|QNetworkRequest
operator|::
name|KnownHeaders
operator|,
name|QVariant
operator|>
name|CookedHeadersMap
expr_stmt|;
typedef|typedef
name|QHash
operator|<
name|QNetworkRequest
operator|::
name|Attribute
operator|,
name|QVariant
operator|>
name|AttributesMap
expr_stmt|;
name|RawHeadersList
name|rawHeaders
decl_stmt|;
name|CookedHeadersMap
name|cookedHeaders
decl_stmt|;
name|AttributesMap
name|attributes
decl_stmt|;
name|QPointer
operator|<
name|QObject
operator|>
name|originatingObject
expr_stmt|;
name|RawHeadersList
operator|::
name|ConstIterator
name|findRawHeader
argument_list|(
argument|const QByteArray&key
argument_list|)
specifier|const
expr_stmt|;
name|RawHeadersList
name|allRawHeaders
argument_list|()
specifier|const
expr_stmt|;
name|QList
operator|<
name|QByteArray
operator|>
name|rawHeadersKeys
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setRawHeader
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|key
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|value
parameter_list|)
function_decl|;
name|void
name|setAllRawHeaders
parameter_list|(
specifier|const
name|RawHeadersList
modifier|&
name|list
parameter_list|)
function_decl|;
name|void
name|setCookedHeader
argument_list|(
name|QNetworkRequest
operator|::
name|KnownHeaders
name|header
argument_list|,
specifier|const
name|QVariant
operator|&
name|value
argument_list|)
decl_stmt|;
specifier|static
name|QDateTime
name|fromHttpDate
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|value
parameter_list|)
function_decl|;
specifier|static
name|QByteArray
name|toHttpDate
parameter_list|(
specifier|const
name|QDateTime
modifier|&
name|dt
parameter_list|)
function_decl|;
name|private
label|:
name|void
name|setRawHeaderInternal
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|key
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|value
parameter_list|)
function_decl|;
name|void
name|parseAndSetHeader
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|key
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|value
parameter_list|)
function_decl|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_expr_stmt
name|Q_DECLARE_TYPEINFO
argument_list|(
name|QNetworkHeadersPrivate
operator|::
name|RawHeaderPair
argument_list|,
name|Q_MOVABLE_TYPE
argument_list|)
expr_stmt|;
end_expr_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
end_unit
