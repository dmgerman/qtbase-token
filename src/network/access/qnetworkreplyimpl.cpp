begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtNetwork module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qnetworkreplyimpl_p.h"
end_include
begin_include
include|#
directive|include
file|"qnetworkaccessbackend_p.h"
end_include
begin_include
include|#
directive|include
file|"qnetworkcookie.h"
end_include
begin_include
include|#
directive|include
file|"qnetworkcookiejar.h"
end_include
begin_include
include|#
directive|include
file|"qabstractnetworkcache.h"
end_include
begin_include
include|#
directive|include
file|"QtCore/qcoreapplication.h"
end_include
begin_include
include|#
directive|include
file|"QtCore/qdatetime.h"
end_include
begin_include
include|#
directive|include
file|"QtNetwork/qsslconfiguration.h"
end_include
begin_include
include|#
directive|include
file|"QtNetwork/qnetworksession.h"
end_include
begin_include
include|#
directive|include
file|"qnetworkaccessmanager_p.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/QCoreApplication>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_constructor
DECL|function|QNetworkReplyImplPrivate
specifier|inline
name|QNetworkReplyImplPrivate
operator|::
name|QNetworkReplyImplPrivate
parameter_list|()
member_init_list|:
name|backend
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|outgoingData
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|copyDevice
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|cacheEnabled
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|cacheSaveDevice
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|notificationHandlingPaused
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|bytesDownloaded
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|lastBytesDownloaded
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|bytesUploaded
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|preMigrationDownloaded
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|httpStatusCode
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|state
argument_list|(
name|Idle
argument_list|)
member_init_list|,
name|downloadBufferReadPosition
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|downloadBufferCurrentSize
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|downloadBufferMaximumSize
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|downloadBuffer
argument_list|(
literal|0
argument_list|)
block|{
if|if
condition|(
name|request
operator|.
name|attribute
argument_list|(
name|QNetworkRequest
operator|::
name|EmitAllUploadProgressSignalsAttribute
argument_list|)
operator|.
name|toBool
argument_list|()
operator|==
literal|true
condition|)
name|emitAllUploadProgressSignals
operator|=
literal|true
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|_q_startOperation
name|void
name|QNetworkReplyImplPrivate
operator|::
name|_q_startOperation
parameter_list|()
block|{
comment|// ensure this function is only being called once
if|if
condition|(
name|state
operator|==
name|Working
operator|||
name|state
operator|==
name|Finished
condition|)
block|{
name|qDebug
argument_list|(
literal|"QNetworkReplyImpl::_q_startOperation was called more than once"
argument_list|)
expr_stmt|;
return|return;
block|}
name|state
operator|=
name|Working
expr_stmt|;
comment|// note: if that method is called directly, it cannot happen that the backend is 0,
comment|// because we just checked via a qobject_cast that we got a http backend (see
comment|// QNetworkReplyImplPrivate::setup())
if|if
condition|(
operator|!
name|backend
condition|)
block|{
name|error
argument_list|(
name|QNetworkReplyImpl
operator|::
name|ProtocolUnknownError
argument_list|,
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QNetworkReply"
argument_list|,
literal|"Protocol \"%1\" is unknown"
argument_list|)
operator|.
name|arg
argument_list|(
name|url
operator|.
name|scheme
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// not really true!;
name|finished
argument_list|()
expr_stmt|;
return|return;
block|}
ifndef|#
directive|ifndef
name|QT_NO_BEARERMANAGEMENT
name|Q_Q
argument_list|(
name|QNetworkReplyImpl
argument_list|)
expr_stmt|;
comment|// Do not start background requests if they are not allowed by session policy
name|QSharedPointer
argument_list|<
name|QNetworkSession
argument_list|>
name|session
argument_list|(
name|manager
operator|->
name|d_func
argument_list|()
operator|->
name|getNetworkSession
argument_list|()
argument_list|)
decl_stmt|;
name|QVariant
name|isBackground
init|=
name|backend
operator|->
name|request
argument_list|()
operator|.
name|attribute
argument_list|(
name|QNetworkRequest
operator|::
name|BackgroundRequestAttribute
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
literal|false
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|isBackground
operator|.
name|toBool
argument_list|()
operator|&&
name|session
operator|&&
name|session
operator|->
name|usagePolicies
argument_list|()
operator|.
name|testFlag
argument_list|(
name|QNetworkSession
operator|::
name|NoBackgroundTrafficPolicy
argument_list|)
condition|)
block|{
name|error
argument_list|(
name|QNetworkReply
operator|::
name|BackgroundRequestNotAllowedError
argument_list|,
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QNetworkReply"
argument_list|,
literal|"Background request not allowed."
argument_list|)
argument_list|)
expr_stmt|;
name|finished
argument_list|()
expr_stmt|;
return|return;
block|}
endif|#
directive|endif
if|if
condition|(
operator|!
name|backend
operator|->
name|start
argument_list|()
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_BEARERMANAGEMENT
comment|// backend failed to start because the session state is not Connected.
comment|// QNetworkAccessManager will call _q_startOperation again for us when the session
comment|// state changes.
name|state
operator|=
name|WaitingForSession
expr_stmt|;
if|if
condition|(
name|session
condition|)
block|{
name|QObject
operator|::
name|connect
argument_list|(
name|session
operator|.
name|data
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|error
argument_list|(
name|QNetworkSession
operator|::
name|SessionError
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_networkSessionFailed
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|session
operator|->
name|isOpen
argument_list|()
condition|)
block|{
name|session
operator|->
name|setSessionProperty
argument_list|(
name|QStringLiteral
argument_list|(
literal|"ConnectInBackground"
argument_list|)
argument_list|,
name|isBackground
argument_list|)
expr_stmt|;
name|session
operator|->
name|open
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|qWarning
argument_list|(
literal|"Backend is waiting for QNetworkSession to connect, but there is none!"
argument_list|)
expr_stmt|;
name|state
operator|=
name|Working
expr_stmt|;
name|error
argument_list|(
name|QNetworkReplyImpl
operator|::
name|NetworkSessionFailedError
argument_list|,
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QNetworkReply"
argument_list|,
literal|"Network session error."
argument_list|)
argument_list|)
expr_stmt|;
name|finished
argument_list|()
expr_stmt|;
block|}
else|#
directive|else
name|qWarning
argument_list|(
literal|"Backend start failed"
argument_list|)
expr_stmt|;
name|state
operator|=
name|Working
expr_stmt|;
name|error
argument_list|(
name|QNetworkReplyImpl
operator|::
name|UnknownNetworkError
argument_list|,
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QNetworkReply"
argument_list|,
literal|"backend start error."
argument_list|)
argument_list|)
expr_stmt|;
name|finished
argument_list|()
expr_stmt|;
endif|#
directive|endif
return|return;
block|}
else|else
block|{
ifndef|#
directive|ifndef
name|QT_NO_BEARERMANAGEMENT
if|if
condition|(
name|session
condition|)
block|{
name|QObject
operator|::
name|connect
argument_list|(
name|session
operator|.
name|data
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|stateChanged
argument_list|(
name|QNetworkSession
operator|::
name|State
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_networkSessionStateChanged
argument_list|(
name|QNetworkSession
operator|::
name|State
argument_list|)
argument_list|)
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
ifndef|#
directive|ifndef
name|QT_NO_BEARERMANAGEMENT
if|if
condition|(
name|session
condition|)
block|{
comment|//get notification of policy changes.
name|QObject
operator|::
name|connect
argument_list|(
name|session
operator|.
name|data
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|usagePoliciesChanged
argument_list|(
name|QNetworkSession
operator|::
name|UsagePolicies
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_networkSessionUsagePoliciesChanged
argument_list|(
name|QNetworkSession
operator|::
name|UsagePolicies
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
comment|// Prepare timer for progress notifications
name|downloadProgressSignalChoke
operator|.
name|start
argument_list|()
expr_stmt|;
name|uploadProgressSignalChoke
operator|.
name|invalidate
argument_list|()
expr_stmt|;
if|if
condition|(
name|backend
operator|&&
name|backend
operator|->
name|isSynchronous
argument_list|()
condition|)
block|{
name|state
operator|=
name|Finished
expr_stmt|;
name|q_func
argument_list|()
operator|->
name|setFinished
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|state
operator|!=
name|Finished
condition|)
block|{
if|if
condition|(
name|operation
operator|==
name|QNetworkAccessManager
operator|::
name|GetOperation
condition|)
name|pendingNotifications
operator|.
name|append
argument_list|(
name|NotifyDownstreamReadyWrite
argument_list|)
expr_stmt|;
name|handleNotifications
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|_q_copyReadyRead
name|void
name|QNetworkReplyImplPrivate
operator|::
name|_q_copyReadyRead
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QNetworkReplyImpl
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
operator|!=
name|Working
condition|)
return|return;
if|if
condition|(
operator|!
name|copyDevice
operator|||
operator|!
name|q
operator|->
name|isOpen
argument_list|()
condition|)
return|return;
comment|// FIXME Optimize to use download buffer if it is a QBuffer.
comment|// Needs to be done where sendCacheContents() (?) of HTTP is emitting
comment|// metaDataChanged ?
forever|forever
block|{
name|qint64
name|bytesToRead
init|=
name|nextDownstreamBlockSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|bytesToRead
operator|==
literal|0
condition|)
comment|// we'll be called again, eventually
break|break;
name|bytesToRead
operator|=
name|qBound
argument_list|<
name|qint64
argument_list|>
argument_list|(
literal|1
argument_list|,
name|bytesToRead
argument_list|,
name|copyDevice
operator|->
name|bytesAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|QByteArray
name|byteData
decl_stmt|;
name|byteData
operator|.
name|resize
argument_list|(
name|bytesToRead
argument_list|)
expr_stmt|;
name|qint64
name|bytesActuallyRead
init|=
name|copyDevice
operator|->
name|read
argument_list|(
name|byteData
operator|.
name|data
argument_list|()
argument_list|,
name|byteData
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|bytesActuallyRead
operator|==
operator|-
literal|1
condition|)
block|{
name|byteData
operator|.
name|clear
argument_list|()
expr_stmt|;
name|backendNotify
argument_list|(
name|NotifyCopyFinished
argument_list|)
expr_stmt|;
break|break;
block|}
name|byteData
operator|.
name|resize
argument_list|(
name|bytesActuallyRead
argument_list|)
expr_stmt|;
name|readBuffer
operator|.
name|append
argument_list|(
name|byteData
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|copyDevice
operator|->
name|isSequential
argument_list|()
operator|&&
name|copyDevice
operator|->
name|atEnd
argument_list|()
condition|)
block|{
name|backendNotify
argument_list|(
name|NotifyCopyFinished
argument_list|)
expr_stmt|;
name|bytesDownloaded
operator|+=
name|bytesActuallyRead
expr_stmt|;
break|break;
block|}
name|bytesDownloaded
operator|+=
name|bytesActuallyRead
expr_stmt|;
block|}
if|if
condition|(
name|bytesDownloaded
operator|==
name|lastBytesDownloaded
condition|)
block|{
comment|// we didn't read anything
return|return;
block|}
name|lastBytesDownloaded
operator|=
name|bytesDownloaded
expr_stmt|;
name|QVariant
name|totalSize
init|=
name|cookedHeaders
operator|.
name|value
argument_list|(
name|QNetworkRequest
operator|::
name|ContentLengthHeader
argument_list|)
decl_stmt|;
if|if
condition|(
name|preMigrationDownloaded
operator|!=
name|Q_INT64_C
argument_list|(
operator|-
literal|1
argument_list|)
condition|)
name|totalSize
operator|=
name|totalSize
operator|.
name|toLongLong
argument_list|()
operator|+
name|preMigrationDownloaded
expr_stmt|;
name|pauseNotificationHandling
argument_list|()
expr_stmt|;
comment|// emit readyRead before downloadProgress incase this will cause events to be
comment|// processed and we get into a recursive call (as in QProgressDialog).
emit|emit
name|q
operator|->
name|readyRead
argument_list|()
emit|;
if|if
condition|(
name|downloadProgressSignalChoke
operator|.
name|elapsed
argument_list|()
operator|>=
name|progressSignalInterval
condition|)
block|{
name|downloadProgressSignalChoke
operator|.
name|restart
argument_list|()
expr_stmt|;
emit|emit
name|q
operator|->
name|downloadProgress
argument_list|(
name|bytesDownloaded
argument_list|,
name|totalSize
operator|.
name|isNull
argument_list|()
condition|?
name|Q_INT64_C
argument_list|(
operator|-
literal|1
argument_list|)
else|:
name|totalSize
operator|.
name|toLongLong
argument_list|()
argument_list|)
emit|;
block|}
name|resumeNotificationHandling
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|_q_copyReadChannelFinished
name|void
name|QNetworkReplyImplPrivate
operator|::
name|_q_copyReadChannelFinished
parameter_list|()
block|{
name|_q_copyReadyRead
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|_q_bufferOutgoingDataFinished
name|void
name|QNetworkReplyImplPrivate
operator|::
name|_q_bufferOutgoingDataFinished
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QNetworkReplyImpl
argument_list|)
expr_stmt|;
comment|// make sure this is only called once, ever.
comment|//_q_bufferOutgoingData may call it or the readChannelFinished emission
if|if
condition|(
name|state
operator|!=
name|Buffering
condition|)
return|return;
comment|// disconnect signals
name|QObject
operator|::
name|disconnect
argument_list|(
name|outgoingData
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_bufferOutgoingData
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|disconnect
argument_list|(
name|outgoingData
argument_list|,
name|SIGNAL
argument_list|(
name|readChannelFinished
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_bufferOutgoingDataFinished
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// finally, start the request
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
name|q
argument_list|,
literal|"_q_startOperation"
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|_q_bufferOutgoingData
name|void
name|QNetworkReplyImplPrivate
operator|::
name|_q_bufferOutgoingData
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QNetworkReplyImpl
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outgoingDataBuffer
condition|)
block|{
comment|// first call, create our buffer
name|outgoingDataBuffer
operator|=
name|QSharedPointer
argument_list|<
name|QRingBuffer
argument_list|>
operator|::
name|create
argument_list|()
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|outgoingData
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_bufferOutgoingData
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|outgoingData
argument_list|,
name|SIGNAL
argument_list|(
name|readChannelFinished
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_bufferOutgoingDataFinished
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|qint64
name|bytesBuffered
init|=
literal|0
decl_stmt|;
name|qint64
name|bytesToBuffer
init|=
literal|0
decl_stmt|;
comment|// read data into our buffer
forever|forever
block|{
name|bytesToBuffer
operator|=
name|outgoingData
operator|->
name|bytesAvailable
argument_list|()
expr_stmt|;
comment|// unknown? just try 2 kB, this also ensures we always try to read the EOF
if|if
condition|(
name|bytesToBuffer
operator|<=
literal|0
condition|)
name|bytesToBuffer
operator|=
literal|2
operator|*
literal|1024
expr_stmt|;
name|char
modifier|*
name|dst
init|=
name|outgoingDataBuffer
operator|->
name|reserve
argument_list|(
name|bytesToBuffer
argument_list|)
decl_stmt|;
name|bytesBuffered
operator|=
name|outgoingData
operator|->
name|read
argument_list|(
name|dst
argument_list|,
name|bytesToBuffer
argument_list|)
expr_stmt|;
if|if
condition|(
name|bytesBuffered
operator|==
operator|-
literal|1
condition|)
block|{
comment|// EOF has been reached.
name|outgoingDataBuffer
operator|->
name|chop
argument_list|(
name|bytesToBuffer
argument_list|)
expr_stmt|;
name|_q_bufferOutgoingDataFinished
argument_list|()
expr_stmt|;
break|break;
block|}
elseif|else
if|if
condition|(
name|bytesBuffered
operator|==
literal|0
condition|)
block|{
comment|// nothing read right now, just wait until we get called again
name|outgoingDataBuffer
operator|->
name|chop
argument_list|(
name|bytesToBuffer
argument_list|)
expr_stmt|;
break|break;
block|}
else|else
block|{
comment|// don't break, try to read() again
name|outgoingDataBuffer
operator|->
name|chop
argument_list|(
name|bytesToBuffer
operator|-
name|bytesBuffered
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_BEARERMANAGEMENT
end_ifndef
begin_function
DECL|function|_q_networkSessionConnected
name|void
name|QNetworkReplyImplPrivate
operator|::
name|_q_networkSessionConnected
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QNetworkReplyImpl
argument_list|)
expr_stmt|;
if|if
condition|(
name|manager
operator|.
name|isNull
argument_list|()
condition|)
return|return;
name|QSharedPointer
argument_list|<
name|QNetworkSession
argument_list|>
name|session
init|=
name|manager
operator|->
name|d_func
argument_list|()
operator|->
name|getNetworkSession
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|session
condition|)
return|return;
if|if
condition|(
name|session
operator|->
name|state
argument_list|()
operator|!=
name|QNetworkSession
operator|::
name|Connected
condition|)
return|return;
switch|switch
condition|(
name|state
condition|)
block|{
case|case
name|QNetworkReplyPrivate
operator|::
name|Buffering
case|:
case|case
name|QNetworkReplyPrivate
operator|::
name|Working
case|:
case|case
name|QNetworkReplyPrivate
operator|::
name|Reconnecting
case|:
comment|// Migrate existing downloads to new network connection.
name|migrateBackend
argument_list|()
expr_stmt|;
break|break;
case|case
name|QNetworkReplyPrivate
operator|::
name|WaitingForSession
case|:
comment|// Start waiting requests.
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
name|q
argument_list|,
literal|"_q_startOperation"
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
expr_stmt|;
break|break;
default|default:
empty_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|_q_networkSessionStateChanged
name|void
name|QNetworkReplyImplPrivate
operator|::
name|_q_networkSessionStateChanged
parameter_list|(
name|QNetworkSession
operator|::
name|State
name|sessionState
parameter_list|)
block|{
if|if
condition|(
name|sessionState
operator|==
name|QNetworkSession
operator|::
name|Disconnected
operator|&&
operator|(
name|state
operator|!=
name|Idle
operator|||
name|state
operator|!=
name|Reconnecting
operator|)
condition|)
block|{
name|error
argument_list|(
name|QNetworkReplyImpl
operator|::
name|NetworkSessionFailedError
argument_list|,
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QNetworkReply"
argument_list|,
literal|"Network session error."
argument_list|)
argument_list|)
expr_stmt|;
name|finished
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|_q_networkSessionFailed
name|void
name|QNetworkReplyImplPrivate
operator|::
name|_q_networkSessionFailed
parameter_list|()
block|{
comment|// Abort waiting and working replies.
if|if
condition|(
name|state
operator|==
name|WaitingForSession
operator|||
name|state
operator|==
name|Working
condition|)
block|{
name|state
operator|=
name|Working
expr_stmt|;
name|QSharedPointer
argument_list|<
name|QNetworkSession
argument_list|>
name|session
argument_list|(
name|manager
operator|->
name|d_func
argument_list|()
operator|->
name|getNetworkSession
argument_list|()
argument_list|)
decl_stmt|;
name|QString
name|errorStr
decl_stmt|;
if|if
condition|(
name|session
condition|)
name|errorStr
operator|=
name|session
operator|->
name|errorString
argument_list|()
expr_stmt|;
else|else
name|errorStr
operator|=
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QNetworkReply"
argument_list|,
literal|"Network session error."
argument_list|)
expr_stmt|;
name|error
argument_list|(
name|QNetworkReplyImpl
operator|::
name|NetworkSessionFailedError
argument_list|,
name|errorStr
argument_list|)
expr_stmt|;
name|finished
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|_q_networkSessionUsagePoliciesChanged
name|void
name|QNetworkReplyImplPrivate
operator|::
name|_q_networkSessionUsagePoliciesChanged
parameter_list|(
name|QNetworkSession
operator|::
name|UsagePolicies
name|newPolicies
parameter_list|)
block|{
if|if
condition|(
name|backend
operator|->
name|request
argument_list|()
operator|.
name|attribute
argument_list|(
name|QNetworkRequest
operator|::
name|BackgroundRequestAttribute
argument_list|)
operator|.
name|toBool
argument_list|()
condition|)
block|{
if|if
condition|(
name|newPolicies
operator|&
name|QNetworkSession
operator|::
name|NoBackgroundTrafficPolicy
condition|)
block|{
comment|// Abort waiting and working replies.
if|if
condition|(
name|state
operator|==
name|WaitingForSession
operator|||
name|state
operator|==
name|Working
condition|)
block|{
name|state
operator|=
name|Working
expr_stmt|;
name|error
argument_list|(
name|QNetworkReply
operator|::
name|BackgroundRequestNotAllowedError
argument_list|,
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QNetworkReply"
argument_list|,
literal|"Background request not allowed."
argument_list|)
argument_list|)
expr_stmt|;
name|finished
argument_list|()
expr_stmt|;
block|}
comment|// ### if backend->canResume(), then we could resume automatically, however no backend supports resuming
block|}
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|setup
name|void
name|QNetworkReplyImplPrivate
operator|::
name|setup
parameter_list|(
name|QNetworkAccessManager
operator|::
name|Operation
name|op
parameter_list|,
specifier|const
name|QNetworkRequest
modifier|&
name|req
parameter_list|,
name|QIODevice
modifier|*
name|data
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QNetworkReplyImpl
argument_list|)
expr_stmt|;
name|outgoingData
operator|=
name|data
expr_stmt|;
name|request
operator|=
name|req
expr_stmt|;
name|url
operator|=
name|request
operator|.
name|url
argument_list|()
expr_stmt|;
name|operation
operator|=
name|op
expr_stmt|;
name|q
operator|->
name|QIODevice
operator|::
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
comment|// Internal code that does a HTTP reply for the synchronous Ajax
comment|// in Qt WebKit.
name|QVariant
name|synchronousHttpAttribute
init|=
name|req
operator|.
name|attribute
argument_list|(
cast|static_cast
argument_list|<
name|QNetworkRequest
operator|::
name|Attribute
argument_list|>
argument_list|(
name|QNetworkRequest
operator|::
name|SynchronousRequestAttribute
argument_list|)
argument_list|)
decl_stmt|;
comment|// The synchronous HTTP is a corner case, we will put all upload data in one big QByteArray in the outgoingDataBuffer.
comment|// Yes, this is not the most efficient thing to do, but on the other hand synchronous XHR needs to die anyway.
if|if
condition|(
name|synchronousHttpAttribute
operator|.
name|toBool
argument_list|()
operator|&&
name|outgoingData
condition|)
block|{
name|outgoingDataBuffer
operator|=
name|QSharedPointer
argument_list|<
name|QRingBuffer
argument_list|>
operator|::
name|create
argument_list|()
expr_stmt|;
name|qint64
name|previousDataSize
init|=
literal|0
decl_stmt|;
do|do
block|{
name|previousDataSize
operator|=
name|outgoingDataBuffer
operator|->
name|size
argument_list|()
expr_stmt|;
name|outgoingDataBuffer
operator|->
name|append
argument_list|(
name|outgoingData
operator|->
name|readAll
argument_list|()
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|outgoingDataBuffer
operator|->
name|size
argument_list|()
operator|!=
name|previousDataSize
condition|)
do|;
block|}
if|if
condition|(
name|backend
condition|)
name|backend
operator|->
name|setSynchronous
argument_list|(
name|synchronousHttpAttribute
operator|.
name|toBool
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|outgoingData
operator|&&
name|backend
operator|&&
operator|!
name|backend
operator|->
name|isSynchronous
argument_list|()
condition|)
block|{
comment|// there is data to be uploaded, e.g. HTTP POST.
if|if
condition|(
operator|!
name|backend
operator|->
name|needsResetableUploadData
argument_list|()
operator|||
operator|!
name|outgoingData
operator|->
name|isSequential
argument_list|()
condition|)
block|{
comment|// backend does not need upload buffering or
comment|// fixed size non-sequential
comment|// just start the operation
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
name|q
argument_list|,
literal|"_q_startOperation"
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bool
name|bufferingDisallowed
init|=
name|req
operator|.
name|attribute
argument_list|(
name|QNetworkRequest
operator|::
name|DoNotBufferUploadDataAttribute
argument_list|,
literal|false
argument_list|)
operator|.
name|toBool
argument_list|()
decl_stmt|;
if|if
condition|(
name|bufferingDisallowed
condition|)
block|{
comment|// if a valid content-length header for the request was supplied, we can disable buffering
comment|// if not, we will buffer anyway
if|if
condition|(
name|req
operator|.
name|header
argument_list|(
name|QNetworkRequest
operator|::
name|ContentLengthHeader
argument_list|)
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
name|q
argument_list|,
literal|"_q_startOperation"
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|state
operator|=
name|Buffering
expr_stmt|;
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
name|q
argument_list|,
literal|"_q_bufferOutgoingData"
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// _q_startOperation will be called when the buffering has finished.
name|state
operator|=
name|Buffering
expr_stmt|;
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
name|q
argument_list|,
literal|"_q_bufferOutgoingData"
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// for HTTP, we want to send out the request as fast as possible to the network, without
comment|// invoking methods in a QueuedConnection
if|if
condition|(
name|backend
operator|&&
name|backend
operator|->
name|isSynchronous
argument_list|()
condition|)
name|_q_startOperation
argument_list|()
expr_stmt|;
else|else
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
name|q
argument_list|,
literal|"_q_startOperation"
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|backendNotify
name|void
name|QNetworkReplyImplPrivate
operator|::
name|backendNotify
parameter_list|(
name|InternalNotifications
name|notification
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QNetworkReplyImpl
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|pendingNotifications
operator|.
name|contains
argument_list|(
name|notification
argument_list|)
condition|)
name|pendingNotifications
operator|.
name|enqueue
argument_list|(
name|notification
argument_list|)
expr_stmt|;
if|if
condition|(
name|pendingNotifications
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
name|q
argument_list|,
operator|new
name|QEvent
argument_list|(
name|QEvent
operator|::
name|NetworkReplyUpdated
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleNotifications
name|void
name|QNetworkReplyImplPrivate
operator|::
name|handleNotifications
parameter_list|()
block|{
if|if
condition|(
name|notificationHandlingPaused
condition|)
return|return;
name|NotificationQueue
name|current
init|=
name|pendingNotifications
decl_stmt|;
name|pendingNotifications
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|state
operator|!=
name|Working
condition|)
return|return;
while|while
condition|(
name|state
operator|==
name|Working
operator|&&
operator|!
name|current
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|InternalNotifications
name|notification
init|=
name|current
operator|.
name|dequeue
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|notification
condition|)
block|{
case|case
name|NotifyDownstreamReadyWrite
case|:
if|if
condition|(
name|copyDevice
condition|)
name|_q_copyReadyRead
argument_list|()
expr_stmt|;
else|else
name|backend
operator|->
name|downstreamReadyWrite
argument_list|()
expr_stmt|;
break|break;
case|case
name|NotifyCloseDownstreamChannel
case|:
name|backend
operator|->
name|closeDownstreamChannel
argument_list|()
expr_stmt|;
break|break;
case|case
name|NotifyCopyFinished
case|:
block|{
name|QIODevice
modifier|*
name|dev
init|=
name|copyDevice
decl_stmt|;
name|copyDevice
operator|=
literal|0
expr_stmt|;
name|backend
operator|->
name|copyFinished
argument_list|(
name|dev
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
end_function
begin_comment
comment|// Do not handle the notifications while we are emitting downloadProgress
end_comment
begin_comment
comment|// or readyRead
end_comment
begin_function
DECL|function|pauseNotificationHandling
name|void
name|QNetworkReplyImplPrivate
operator|::
name|pauseNotificationHandling
parameter_list|()
block|{
name|notificationHandlingPaused
operator|=
literal|true
expr_stmt|;
block|}
end_function
begin_comment
comment|// Resume notification handling
end_comment
begin_function
DECL|function|resumeNotificationHandling
name|void
name|QNetworkReplyImplPrivate
operator|::
name|resumeNotificationHandling
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QNetworkReplyImpl
argument_list|)
expr_stmt|;
name|notificationHandlingPaused
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|pendingNotifications
operator|.
name|size
argument_list|()
operator|>=
literal|1
condition|)
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
name|q
argument_list|,
operator|new
name|QEvent
argument_list|(
name|QEvent
operator|::
name|NetworkReplyUpdated
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|networkCache
name|QAbstractNetworkCache
modifier|*
name|QNetworkReplyImplPrivate
operator|::
name|networkCache
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|backend
condition|)
return|return
literal|0
return|;
return|return
name|backend
operator|->
name|networkCache
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|createCache
name|void
name|QNetworkReplyImplPrivate
operator|::
name|createCache
parameter_list|()
block|{
comment|// check if we can save and if we're allowed to
if|if
condition|(
operator|!
name|networkCache
argument_list|()
operator|||
operator|!
name|request
operator|.
name|attribute
argument_list|(
name|QNetworkRequest
operator|::
name|CacheSaveControlAttribute
argument_list|,
literal|true
argument_list|)
operator|.
name|toBool
argument_list|()
condition|)
return|return;
name|cacheEnabled
operator|=
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isCachingEnabled
name|bool
name|QNetworkReplyImplPrivate
operator|::
name|isCachingEnabled
parameter_list|()
specifier|const
block|{
return|return
operator|(
name|cacheEnabled
operator|&&
name|networkCache
argument_list|()
operator|!=
literal|0
operator|)
return|;
block|}
end_function
begin_function
DECL|function|setCachingEnabled
name|void
name|QNetworkReplyImplPrivate
operator|::
name|setCachingEnabled
parameter_list|(
name|bool
name|enable
parameter_list|)
block|{
if|if
condition|(
operator|!
name|enable
operator|&&
operator|!
name|cacheEnabled
condition|)
return|return;
comment|// nothing to do
if|if
condition|(
name|enable
operator|&&
name|cacheEnabled
condition|)
return|return;
comment|// nothing to do either!
if|if
condition|(
name|enable
condition|)
block|{
if|if
condition|(
name|bytesDownloaded
condition|)
block|{
comment|// refuse to enable in this case
name|qCritical
argument_list|(
literal|"QNetworkReplyImpl: backend error: caching was enabled after some bytes had been written"
argument_list|)
expr_stmt|;
return|return;
block|}
name|createCache
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// someone told us to turn on, then back off?
comment|// ok... but you should make up your mind
name|qDebug
argument_list|(
literal|"QNetworkReplyImpl: setCachingEnabled(true) called after setCachingEnabled(false) -- "
literal|"backend %s probably needs to be fixed"
argument_list|,
name|backend
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
argument_list|)
expr_stmt|;
name|networkCache
argument_list|()
operator|->
name|remove
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|cacheSaveDevice
operator|=
literal|0
expr_stmt|;
name|cacheEnabled
operator|=
literal|false
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|completeCacheSave
name|void
name|QNetworkReplyImplPrivate
operator|::
name|completeCacheSave
parameter_list|()
block|{
if|if
condition|(
name|cacheEnabled
operator|&&
name|errorCode
operator|!=
name|QNetworkReplyImpl
operator|::
name|NoError
condition|)
block|{
name|networkCache
argument_list|()
operator|->
name|remove
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cacheEnabled
operator|&&
name|cacheSaveDevice
condition|)
block|{
name|networkCache
argument_list|()
operator|->
name|insert
argument_list|(
name|cacheSaveDevice
argument_list|)
expr_stmt|;
block|}
name|cacheSaveDevice
operator|=
literal|0
expr_stmt|;
name|cacheEnabled
operator|=
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|emitUploadProgress
name|void
name|QNetworkReplyImplPrivate
operator|::
name|emitUploadProgress
parameter_list|(
name|qint64
name|bytesSent
parameter_list|,
name|qint64
name|bytesTotal
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QNetworkReplyImpl
argument_list|)
expr_stmt|;
name|bytesUploaded
operator|=
name|bytesSent
expr_stmt|;
if|if
condition|(
operator|!
name|emitAllUploadProgressSignals
condition|)
block|{
comment|//choke signal emissions, except the first and last signals which are unconditional
if|if
condition|(
name|uploadProgressSignalChoke
operator|.
name|isValid
argument_list|()
condition|)
block|{
if|if
condition|(
name|bytesSent
operator|!=
name|bytesTotal
operator|&&
name|uploadProgressSignalChoke
operator|.
name|elapsed
argument_list|()
operator|<
name|progressSignalInterval
condition|)
block|{
return|return;
block|}
name|uploadProgressSignalChoke
operator|.
name|restart
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|uploadProgressSignalChoke
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
name|pauseNotificationHandling
argument_list|()
expr_stmt|;
emit|emit
name|q
operator|->
name|uploadProgress
argument_list|(
name|bytesSent
argument_list|,
name|bytesTotal
argument_list|)
emit|;
name|resumeNotificationHandling
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|nextDownstreamBlockSize
name|qint64
name|QNetworkReplyImplPrivate
operator|::
name|nextDownstreamBlockSize
parameter_list|()
specifier|const
block|{
enum|enum
block|{
name|DesiredBufferSize
init|=
literal|32
operator|*
literal|1024
block|}
enum|;
if|if
condition|(
name|readBufferMaxSize
operator|==
literal|0
condition|)
return|return
name|DesiredBufferSize
return|;
return|return
name|qMax
argument_list|<
name|qint64
argument_list|>
argument_list|(
literal|0
argument_list|,
name|readBufferMaxSize
operator|-
name|readBuffer
operator|.
name|byteAmount
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|initCacheSaveDevice
name|void
name|QNetworkReplyImplPrivate
operator|::
name|initCacheSaveDevice
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QNetworkReplyImpl
argument_list|)
expr_stmt|;
comment|// The disk cache does not support partial content, so don't even try to
comment|// save any such content into the cache.
if|if
condition|(
name|q
operator|->
name|attribute
argument_list|(
name|QNetworkRequest
operator|::
name|HttpStatusCodeAttribute
argument_list|)
operator|.
name|toInt
argument_list|()
operator|==
literal|206
condition|)
block|{
name|cacheEnabled
operator|=
literal|false
expr_stmt|;
return|return;
block|}
comment|// save the meta data
name|QNetworkCacheMetaData
name|metaData
decl_stmt|;
name|metaData
operator|.
name|setUrl
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|metaData
operator|=
name|backend
operator|->
name|fetchCacheMetaData
argument_list|(
name|metaData
argument_list|)
expr_stmt|;
comment|// save the redirect request also in the cache
name|QVariant
name|redirectionTarget
init|=
name|q
operator|->
name|attribute
argument_list|(
name|QNetworkRequest
operator|::
name|RedirectionTargetAttribute
argument_list|)
decl_stmt|;
if|if
condition|(
name|redirectionTarget
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|QNetworkCacheMetaData
operator|::
name|AttributesMap
name|attributes
init|=
name|metaData
operator|.
name|attributes
argument_list|()
decl_stmt|;
name|attributes
operator|.
name|insert
argument_list|(
name|QNetworkRequest
operator|::
name|RedirectionTargetAttribute
argument_list|,
name|redirectionTarget
argument_list|)
expr_stmt|;
name|metaData
operator|.
name|setAttributes
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
block|}
name|cacheSaveDevice
operator|=
name|networkCache
argument_list|()
operator|->
name|prepare
argument_list|(
name|metaData
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|cacheSaveDevice
operator|||
operator|(
name|cacheSaveDevice
operator|&&
operator|!
name|cacheSaveDevice
operator|->
name|isOpen
argument_list|()
operator|)
condition|)
block|{
if|if
condition|(
name|cacheSaveDevice
operator|&&
operator|!
name|cacheSaveDevice
operator|->
name|isOpen
argument_list|()
condition|)
name|qCritical
argument_list|(
literal|"QNetworkReplyImpl: network cache returned a device that is not open -- "
literal|"class %s probably needs to be fixed"
argument_list|,
name|networkCache
argument_list|()
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
argument_list|)
expr_stmt|;
name|networkCache
argument_list|()
operator|->
name|remove
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|cacheSaveDevice
operator|=
literal|0
expr_stmt|;
name|cacheEnabled
operator|=
literal|false
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|// we received downstream data and send this to the cache
end_comment
begin_comment
comment|// and to our readBuffer (which in turn gets read by the user of QNetworkReply)
end_comment
begin_function
DECL|function|appendDownstreamData
name|void
name|QNetworkReplyImplPrivate
operator|::
name|appendDownstreamData
parameter_list|(
name|QByteDataBuffer
modifier|&
name|data
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QNetworkReplyImpl
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|q
operator|->
name|isOpen
argument_list|()
condition|)
return|return;
if|if
condition|(
name|cacheEnabled
operator|&&
operator|!
name|cacheSaveDevice
condition|)
block|{
name|initCacheSaveDevice
argument_list|()
expr_stmt|;
block|}
name|qint64
name|bytesWritten
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|bufferCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|QByteArray
specifier|const
modifier|&
name|item
init|=
name|data
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|cacheSaveDevice
condition|)
name|cacheSaveDevice
operator|->
name|write
argument_list|(
name|item
operator|.
name|constData
argument_list|()
argument_list|,
name|item
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|readBuffer
operator|.
name|append
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|bytesWritten
operator|+=
name|item
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
name|data
operator|.
name|clear
argument_list|()
expr_stmt|;
name|bytesDownloaded
operator|+=
name|bytesWritten
expr_stmt|;
name|lastBytesDownloaded
operator|=
name|bytesDownloaded
expr_stmt|;
name|appendDownstreamDataSignalEmissions
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|appendDownstreamDataSignalEmissions
name|void
name|QNetworkReplyImplPrivate
operator|::
name|appendDownstreamDataSignalEmissions
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QNetworkReplyImpl
argument_list|)
expr_stmt|;
name|QVariant
name|totalSize
init|=
name|cookedHeaders
operator|.
name|value
argument_list|(
name|QNetworkRequest
operator|::
name|ContentLengthHeader
argument_list|)
decl_stmt|;
if|if
condition|(
name|preMigrationDownloaded
operator|!=
name|Q_INT64_C
argument_list|(
operator|-
literal|1
argument_list|)
condition|)
name|totalSize
operator|=
name|totalSize
operator|.
name|toLongLong
argument_list|()
operator|+
name|preMigrationDownloaded
expr_stmt|;
name|pauseNotificationHandling
argument_list|()
expr_stmt|;
comment|// important: At the point of this readyRead(), the data parameter list must be empty,
comment|// else implicit sharing will trigger memcpy when the user is reading data!
emit|emit
name|q
operator|->
name|readyRead
argument_list|()
emit|;
comment|// emit readyRead before downloadProgress incase this will cause events to be
comment|// processed and we get into a recursive call (as in QProgressDialog).
if|if
condition|(
name|downloadProgressSignalChoke
operator|.
name|elapsed
argument_list|()
operator|>=
name|progressSignalInterval
condition|)
block|{
name|downloadProgressSignalChoke
operator|.
name|restart
argument_list|()
expr_stmt|;
emit|emit
name|q
operator|->
name|downloadProgress
argument_list|(
name|bytesDownloaded
argument_list|,
name|totalSize
operator|.
name|isNull
argument_list|()
condition|?
name|Q_INT64_C
argument_list|(
operator|-
literal|1
argument_list|)
else|:
name|totalSize
operator|.
name|toLongLong
argument_list|()
argument_list|)
emit|;
block|}
name|resumeNotificationHandling
argument_list|()
expr_stmt|;
comment|// do we still have room in the buffer?
if|if
condition|(
name|nextDownstreamBlockSize
argument_list|()
operator|>
literal|0
condition|)
name|backendNotify
argument_list|(
name|QNetworkReplyImplPrivate
operator|::
name|NotifyDownstreamReadyWrite
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// this is used when it was fetched from the cache, right?
end_comment
begin_function
DECL|function|appendDownstreamData
name|void
name|QNetworkReplyImplPrivate
operator|::
name|appendDownstreamData
parameter_list|(
name|QIODevice
modifier|*
name|data
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QNetworkReplyImpl
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|q
operator|->
name|isOpen
argument_list|()
condition|)
return|return;
comment|// read until EOF from data
if|if
condition|(
name|copyDevice
condition|)
block|{
name|qCritical
argument_list|(
literal|"QNetworkReplyImpl: copy from QIODevice already in progress -- "
literal|"backend probly needs to be fixed"
argument_list|)
expr_stmt|;
return|return;
block|}
name|copyDevice
operator|=
name|data
expr_stmt|;
name|q
operator|->
name|connect
argument_list|(
name|copyDevice
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|_q_copyReadyRead
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|->
name|connect
argument_list|(
name|copyDevice
argument_list|,
name|SIGNAL
argument_list|(
name|readChannelFinished
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|_q_copyReadChannelFinished
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// start the copy:
name|_q_copyReadyRead
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|appendDownstreamData
name|void
name|QNetworkReplyImplPrivate
operator|::
name|appendDownstreamData
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|data
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
argument|data
argument_list|)
comment|// TODO implement
comment|// TODO call
name|qFatal
argument_list|(
literal|"QNetworkReplyImplPrivate::appendDownstreamData not implemented"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|downloadBufferDeleter
specifier|static
name|void
name|downloadBufferDeleter
parameter_list|(
name|char
modifier|*
name|ptr
parameter_list|)
block|{
operator|delete
index|[]
name|ptr
expr_stmt|;
block|}
end_function
begin_function
DECL|function|getDownloadBuffer
name|char
modifier|*
name|QNetworkReplyImplPrivate
operator|::
name|getDownloadBuffer
parameter_list|(
name|qint64
name|size
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QNetworkReplyImpl
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|downloadBuffer
condition|)
block|{
comment|// We are requested to create it
comment|// Check attribute() if allocating a buffer of that size can be allowed
name|QVariant
name|bufferAllocationPolicy
init|=
name|request
operator|.
name|attribute
argument_list|(
name|QNetworkRequest
operator|::
name|MaximumDownloadBufferSizeAttribute
argument_list|)
decl_stmt|;
if|if
condition|(
name|bufferAllocationPolicy
operator|.
name|isValid
argument_list|()
operator|&&
name|bufferAllocationPolicy
operator|.
name|toLongLong
argument_list|()
operator|>=
name|size
condition|)
block|{
name|downloadBufferCurrentSize
operator|=
literal|0
expr_stmt|;
name|downloadBufferMaximumSize
operator|=
name|size
expr_stmt|;
name|downloadBuffer
operator|=
operator|new
name|char
index|[
name|downloadBufferMaximumSize
index|]
expr_stmt|;
comment|// throws if allocation fails
name|downloadBufferPointer
operator|=
name|QSharedPointer
argument_list|<
name|char
argument_list|>
argument_list|(
name|downloadBuffer
argument_list|,
name|downloadBufferDeleter
argument_list|)
expr_stmt|;
name|q
operator|->
name|setAttribute
argument_list|(
name|QNetworkRequest
operator|::
name|DownloadBufferAttribute
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|<
name|QSharedPointer
argument_list|<
name|char
argument_list|>
argument_list|>
argument_list|(
name|downloadBufferPointer
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|downloadBuffer
return|;
block|}
end_function
begin_function
DECL|function|setDownloadBuffer
name|void
name|QNetworkReplyImplPrivate
operator|::
name|setDownloadBuffer
parameter_list|(
name|QSharedPointer
argument_list|<
name|char
argument_list|>
name|sp
parameter_list|,
name|qint64
name|size
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QNetworkReplyImpl
argument_list|)
expr_stmt|;
name|downloadBufferPointer
operator|=
name|sp
expr_stmt|;
name|downloadBuffer
operator|=
name|downloadBufferPointer
operator|.
name|data
argument_list|()
expr_stmt|;
name|downloadBufferCurrentSize
operator|=
literal|0
expr_stmt|;
name|downloadBufferMaximumSize
operator|=
name|size
expr_stmt|;
name|q
operator|->
name|setAttribute
argument_list|(
name|QNetworkRequest
operator|::
name|DownloadBufferAttribute
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|<
name|QSharedPointer
argument_list|<
name|char
argument_list|>
argument_list|>
argument_list|(
name|downloadBufferPointer
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|appendDownstreamDataDownloadBuffer
name|void
name|QNetworkReplyImplPrivate
operator|::
name|appendDownstreamDataDownloadBuffer
parameter_list|(
name|qint64
name|bytesReceived
parameter_list|,
name|qint64
name|bytesTotal
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QNetworkReplyImpl
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|q
operator|->
name|isOpen
argument_list|()
condition|)
return|return;
if|if
condition|(
name|cacheEnabled
operator|&&
operator|!
name|cacheSaveDevice
condition|)
name|initCacheSaveDevice
argument_list|()
expr_stmt|;
if|if
condition|(
name|cacheSaveDevice
operator|&&
name|bytesReceived
operator|==
name|bytesTotal
condition|)
block|{
comment|//        if (lastBytesDownloaded == -1)
comment|//            lastBytesDownloaded = 0;
comment|//        cacheSaveDevice->write(downloadBuffer + lastBytesDownloaded, bytesReceived - lastBytesDownloaded);
comment|// Write everything in one go if we use a download buffer. might be more performant.
name|cacheSaveDevice
operator|->
name|write
argument_list|(
name|downloadBuffer
argument_list|,
name|bytesTotal
argument_list|)
expr_stmt|;
block|}
name|bytesDownloaded
operator|=
name|bytesReceived
expr_stmt|;
name|lastBytesDownloaded
operator|=
name|bytesReceived
expr_stmt|;
name|downloadBufferCurrentSize
operator|=
name|bytesReceived
expr_stmt|;
comment|// Only emit readyRead when actual data is there
comment|// emit readyRead before downloadProgress incase this will cause events to be
comment|// processed and we get into a recursive call (as in QProgressDialog).
if|if
condition|(
name|bytesDownloaded
operator|>
literal|0
condition|)
emit|emit
name|q
operator|->
name|readyRead
argument_list|()
emit|;
if|if
condition|(
name|downloadProgressSignalChoke
operator|.
name|elapsed
argument_list|()
operator|>=
name|progressSignalInterval
condition|)
block|{
name|downloadProgressSignalChoke
operator|.
name|restart
argument_list|()
expr_stmt|;
emit|emit
name|q
operator|->
name|downloadProgress
argument_list|(
name|bytesDownloaded
argument_list|,
name|bytesTotal
argument_list|)
emit|;
block|}
block|}
end_function
begin_function
DECL|function|finished
name|void
name|QNetworkReplyImplPrivate
operator|::
name|finished
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QNetworkReplyImpl
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
operator|==
name|Finished
operator|||
name|state
operator|==
name|Aborted
operator|||
name|state
operator|==
name|WaitingForSession
condition|)
return|return;
name|pauseNotificationHandling
argument_list|()
expr_stmt|;
name|QVariant
name|totalSize
init|=
name|cookedHeaders
operator|.
name|value
argument_list|(
name|QNetworkRequest
operator|::
name|ContentLengthHeader
argument_list|)
decl_stmt|;
if|if
condition|(
name|preMigrationDownloaded
operator|!=
name|Q_INT64_C
argument_list|(
operator|-
literal|1
argument_list|)
condition|)
name|totalSize
operator|=
name|totalSize
operator|.
name|toLongLong
argument_list|()
operator|+
name|preMigrationDownloaded
expr_stmt|;
if|if
condition|(
operator|!
name|manager
operator|.
name|isNull
argument_list|()
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_BEARERMANAGEMENT
name|QSharedPointer
argument_list|<
name|QNetworkSession
argument_list|>
name|session
argument_list|(
name|manager
operator|->
name|d_func
argument_list|()
operator|->
name|getNetworkSession
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|&&
name|session
operator|->
name|state
argument_list|()
operator|==
name|QNetworkSession
operator|::
name|Roaming
operator|&&
name|state
operator|==
name|Working
operator|&&
name|errorCode
operator|!=
name|QNetworkReply
operator|::
name|OperationCanceledError
condition|)
block|{
comment|// only content with a known size will fail with a temporary network failure error
if|if
condition|(
operator|!
name|totalSize
operator|.
name|isNull
argument_list|()
condition|)
block|{
if|if
condition|(
name|bytesDownloaded
operator|!=
name|totalSize
condition|)
block|{
if|if
condition|(
name|migrateBackend
argument_list|()
condition|)
block|{
comment|// either we are migrating or the request is finished/aborted
if|if
condition|(
name|state
operator|==
name|Reconnecting
operator|||
name|state
operator|==
name|WaitingForSession
condition|)
block|{
name|resumeNotificationHandling
argument_list|()
expr_stmt|;
return|return;
comment|// exit early if we are migrating.
block|}
block|}
else|else
block|{
name|error
argument_list|(
name|QNetworkReply
operator|::
name|TemporaryNetworkFailureError
argument_list|,
name|QNetworkReply
operator|::
name|tr
argument_list|(
literal|"Temporary network failure."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
endif|#
directive|endif
block|}
name|resumeNotificationHandling
argument_list|()
expr_stmt|;
name|state
operator|=
name|Finished
expr_stmt|;
name|q
operator|->
name|setFinished
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|pendingNotifications
operator|.
name|clear
argument_list|()
expr_stmt|;
name|pauseNotificationHandling
argument_list|()
expr_stmt|;
if|if
condition|(
name|totalSize
operator|.
name|isNull
argument_list|()
operator|||
name|totalSize
operator|==
operator|-
literal|1
condition|)
block|{
emit|emit
name|q
operator|->
name|downloadProgress
argument_list|(
name|bytesDownloaded
argument_list|,
name|bytesDownloaded
argument_list|)
emit|;
block|}
else|else
block|{
emit|emit
name|q
operator|->
name|downloadProgress
argument_list|(
name|bytesDownloaded
argument_list|,
name|totalSize
operator|.
name|toLongLong
argument_list|()
argument_list|)
emit|;
block|}
if|if
condition|(
name|bytesUploaded
operator|==
operator|-
literal|1
operator|&&
operator|(
name|outgoingData
operator|||
name|outgoingDataBuffer
operator|)
condition|)
emit|emit
name|q
operator|->
name|uploadProgress
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
emit|;
name|resumeNotificationHandling
argument_list|()
expr_stmt|;
comment|// if we don't know the total size of or we received everything save the cache
if|if
condition|(
name|totalSize
operator|.
name|isNull
argument_list|()
operator|||
name|totalSize
operator|==
operator|-
literal|1
operator|||
name|bytesDownloaded
operator|==
name|totalSize
condition|)
name|completeCacheSave
argument_list|()
expr_stmt|;
comment|// note: might not be a good idea, since users could decide to delete us
comment|// which would delete the backend too...
comment|// maybe we should protect the backend
name|pauseNotificationHandling
argument_list|()
expr_stmt|;
emit|emit
name|q
operator|->
name|readChannelFinished
argument_list|()
emit|;
emit|emit
name|q
operator|->
name|finished
argument_list|()
emit|;
name|resumeNotificationHandling
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|error
name|void
name|QNetworkReplyImplPrivate
operator|::
name|error
parameter_list|(
name|QNetworkReplyImpl
operator|::
name|NetworkError
name|code
parameter_list|,
specifier|const
name|QString
modifier|&
name|errorMessage
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QNetworkReplyImpl
argument_list|)
expr_stmt|;
comment|// Can't set and emit multiple errors.
if|if
condition|(
name|errorCode
operator|!=
name|QNetworkReply
operator|::
name|NoError
condition|)
block|{
name|qWarning
argument_list|(
literal|"QNetworkReplyImplPrivate::error: Internal problem, this method must only be called once."
argument_list|)
expr_stmt|;
return|return;
block|}
name|errorCode
operator|=
name|code
expr_stmt|;
name|q
operator|->
name|setErrorString
argument_list|(
name|errorMessage
argument_list|)
expr_stmt|;
comment|// note: might not be a good idea, since users could decide to delete us
comment|// which would delete the backend too...
comment|// maybe we should protect the backend
emit|emit
name|q
operator|->
name|error
argument_list|(
name|code
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|metaDataChanged
name|void
name|QNetworkReplyImplPrivate
operator|::
name|metaDataChanged
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QNetworkReplyImpl
argument_list|)
expr_stmt|;
comment|// 1. do we have cookies?
comment|// 2. are we allowed to set them?
if|if
condition|(
name|cookedHeaders
operator|.
name|contains
argument_list|(
name|QNetworkRequest
operator|::
name|SetCookieHeader
argument_list|)
operator|&&
operator|!
name|manager
operator|.
name|isNull
argument_list|()
operator|&&
operator|(
cast|static_cast
argument_list|<
name|QNetworkRequest
operator|::
name|LoadControl
argument_list|>
argument_list|(
name|request
operator|.
name|attribute
argument_list|(
name|QNetworkRequest
operator|::
name|CookieSaveControlAttribute
argument_list|,
name|QNetworkRequest
operator|::
name|Automatic
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|)
operator|==
name|QNetworkRequest
operator|::
name|Automatic
operator|)
condition|)
block|{
name|QList
argument_list|<
name|QNetworkCookie
argument_list|>
name|cookies
init|=
name|qvariant_cast
argument_list|<
name|QList
argument_list|<
name|QNetworkCookie
argument_list|>
argument_list|>
argument_list|(
name|cookedHeaders
operator|.
name|value
argument_list|(
name|QNetworkRequest
operator|::
name|SetCookieHeader
argument_list|)
argument_list|)
decl_stmt|;
name|QNetworkCookieJar
modifier|*
name|jar
init|=
name|manager
operator|->
name|cookieJar
argument_list|()
decl_stmt|;
if|if
condition|(
name|jar
condition|)
name|jar
operator|->
name|setCookiesFromUrl
argument_list|(
name|cookies
argument_list|,
name|url
argument_list|)
expr_stmt|;
block|}
emit|emit
name|q
operator|->
name|metaDataChanged
argument_list|()
emit|;
block|}
end_function
begin_function
DECL|function|redirectionRequested
name|void
name|QNetworkReplyImplPrivate
operator|::
name|redirectionRequested
parameter_list|(
specifier|const
name|QUrl
modifier|&
name|target
parameter_list|)
block|{
name|attributes
operator|.
name|insert
argument_list|(
name|QNetworkRequest
operator|::
name|RedirectionTargetAttribute
argument_list|,
name|target
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|encrypted
name|void
name|QNetworkReplyImplPrivate
operator|::
name|encrypted
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_NO_SSL
name|Q_Q
argument_list|(
name|QNetworkReplyImpl
argument_list|)
expr_stmt|;
emit|emit
name|q
operator|->
name|encrypted
argument_list|()
emit|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|sslErrors
name|void
name|QNetworkReplyImplPrivate
operator|::
name|sslErrors
parameter_list|(
specifier|const
name|QList
argument_list|<
name|QSslError
argument_list|>
modifier|&
name|errors
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_SSL
name|Q_Q
argument_list|(
name|QNetworkReplyImpl
argument_list|)
expr_stmt|;
emit|emit
name|q
operator|->
name|sslErrors
argument_list|(
name|errors
argument_list|)
emit|;
else|#
directive|else
name|Q_UNUSED
argument_list|(
name|errors
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_constructor
DECL|function|QNetworkReplyImpl
name|QNetworkReplyImpl
operator|::
name|QNetworkReplyImpl
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QNetworkReply
argument_list|(
operator|*
operator|new
name|QNetworkReplyImplPrivate
argument_list|,
name|parent
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QNetworkReplyImpl
name|QNetworkReplyImpl
operator|::
name|~
name|QNetworkReplyImpl
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QNetworkReplyImpl
argument_list|)
expr_stmt|;
comment|// This code removes the data from the cache if it was prematurely aborted.
comment|// See QNetworkReplyImplPrivate::completeCacheSave(), we disable caching there after the cache
comment|// save had been properly finished. So if it is still enabled it means we got deleted/aborted.
if|if
condition|(
name|d
operator|->
name|isCachingEnabled
argument_list|()
condition|)
name|d
operator|->
name|networkCache
argument_list|()
operator|->
name|remove
argument_list|(
name|url
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|abort
name|void
name|QNetworkReplyImpl
operator|::
name|abort
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QNetworkReplyImpl
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|state
operator|==
name|QNetworkReplyPrivate
operator|::
name|Finished
operator|||
name|d
operator|->
name|state
operator|==
name|QNetworkReplyPrivate
operator|::
name|Aborted
condition|)
return|return;
comment|// stop both upload and download
if|if
condition|(
name|d
operator|->
name|outgoingData
condition|)
name|disconnect
argument_list|(
name|d
operator|->
name|outgoingData
argument_list|,
literal|0
argument_list|,
name|this
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|copyDevice
condition|)
name|disconnect
argument_list|(
name|d
operator|->
name|copyDevice
argument_list|,
literal|0
argument_list|,
name|this
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QNetworkReply
operator|::
name|close
argument_list|()
expr_stmt|;
comment|// call finished which will emit signals
name|d
operator|->
name|error
argument_list|(
name|OperationCanceledError
argument_list|,
name|tr
argument_list|(
literal|"Operation canceled"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|state
operator|==
name|QNetworkReplyPrivate
operator|::
name|WaitingForSession
condition|)
name|d
operator|->
name|state
operator|=
name|QNetworkReplyPrivate
operator|::
name|Working
expr_stmt|;
name|d
operator|->
name|finished
argument_list|()
expr_stmt|;
name|d
operator|->
name|state
operator|=
name|QNetworkReplyPrivate
operator|::
name|Aborted
expr_stmt|;
comment|// finished may access the backend
if|if
condition|(
name|d
operator|->
name|backend
condition|)
block|{
name|d
operator|->
name|backend
operator|->
name|deleteLater
argument_list|()
expr_stmt|;
name|d
operator|->
name|backend
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|close
name|void
name|QNetworkReplyImpl
operator|::
name|close
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QNetworkReplyImpl
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|state
operator|==
name|QNetworkReplyPrivate
operator|::
name|Aborted
operator|||
name|d
operator|->
name|state
operator|==
name|QNetworkReplyPrivate
operator|::
name|Finished
condition|)
return|return;
comment|// stop the download
if|if
condition|(
name|d
operator|->
name|backend
condition|)
name|d
operator|->
name|backend
operator|->
name|closeDownstreamChannel
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|copyDevice
condition|)
name|disconnect
argument_list|(
name|d
operator|->
name|copyDevice
argument_list|,
literal|0
argument_list|,
name|this
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QNetworkReply
operator|::
name|close
argument_list|()
expr_stmt|;
comment|// call finished which will emit signals
name|d
operator|->
name|error
argument_list|(
name|OperationCanceledError
argument_list|,
name|tr
argument_list|(
literal|"Operation canceled"
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|finished
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|canReadLine
name|bool
name|QNetworkReplyImpl
operator|::
name|canReadLine
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QNetworkReplyImpl
argument_list|)
expr_stmt|;
return|return
name|QNetworkReply
operator|::
name|canReadLine
argument_list|()
operator|||
name|d
operator|->
name|readBuffer
operator|.
name|canReadLine
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the number of bytes available for reading with     QIODevice::read(). The number of bytes available may grow until     the finished() signal is emitted. */
end_comment
begin_function
DECL|function|bytesAvailable
name|qint64
name|QNetworkReplyImpl
operator|::
name|bytesAvailable
parameter_list|()
specifier|const
block|{
comment|// Special case for the "zero copy" download buffer
name|Q_D
argument_list|(
specifier|const
name|QNetworkReplyImpl
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|downloadBuffer
condition|)
block|{
name|qint64
name|maxAvail
init|=
name|d
operator|->
name|downloadBufferCurrentSize
operator|-
name|d
operator|->
name|downloadBufferReadPosition
decl_stmt|;
return|return
name|QNetworkReply
operator|::
name|bytesAvailable
argument_list|()
operator|+
name|maxAvail
return|;
block|}
return|return
name|QNetworkReply
operator|::
name|bytesAvailable
argument_list|()
operator|+
name|d_func
argument_list|()
operator|->
name|readBuffer
operator|.
name|byteAmount
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setReadBufferSize
name|void
name|QNetworkReplyImpl
operator|::
name|setReadBufferSize
parameter_list|(
name|qint64
name|size
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QNetworkReplyImpl
argument_list|)
expr_stmt|;
if|if
condition|(
name|size
operator|>
name|d
operator|->
name|readBufferMaxSize
operator|&&
name|size
operator|>
name|d
operator|->
name|readBuffer
operator|.
name|byteAmount
argument_list|()
condition|)
name|d
operator|->
name|backendNotify
argument_list|(
name|QNetworkReplyImplPrivate
operator|::
name|NotifyDownstreamReadyWrite
argument_list|)
expr_stmt|;
name|QNetworkReply
operator|::
name|setReadBufferSize
argument_list|(
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|backend
condition|)
name|d
operator|->
name|backend
operator|->
name|setDownstreamLimited
argument_list|(
name|d
operator|->
name|readBufferMaxSize
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_SSL
end_ifndef
begin_function
DECL|function|sslConfigurationImplementation
name|void
name|QNetworkReplyImpl
operator|::
name|sslConfigurationImplementation
parameter_list|(
name|QSslConfiguration
modifier|&
name|configuration
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QNetworkReplyImpl
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|backend
condition|)
name|d
operator|->
name|backend
operator|->
name|fetchSslConfiguration
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setSslConfigurationImplementation
name|void
name|QNetworkReplyImpl
operator|::
name|setSslConfigurationImplementation
parameter_list|(
specifier|const
name|QSslConfiguration
modifier|&
name|config
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QNetworkReplyImpl
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|backend
operator|&&
operator|!
name|config
operator|.
name|isNull
argument_list|()
condition|)
name|d
operator|->
name|backend
operator|->
name|setSslConfiguration
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|ignoreSslErrors
name|void
name|QNetworkReplyImpl
operator|::
name|ignoreSslErrors
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QNetworkReplyImpl
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|backend
condition|)
name|d
operator|->
name|backend
operator|->
name|ignoreSslErrors
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|ignoreSslErrorsImplementation
name|void
name|QNetworkReplyImpl
operator|::
name|ignoreSslErrorsImplementation
parameter_list|(
specifier|const
name|QList
argument_list|<
name|QSslError
argument_list|>
modifier|&
name|errors
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QNetworkReplyImpl
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|backend
condition|)
name|d
operator|->
name|backend
operator|->
name|ignoreSslErrors
argument_list|(
name|errors
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_SSL
end_comment
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|readData
name|qint64
name|QNetworkReplyImpl
operator|::
name|readData
parameter_list|(
name|char
modifier|*
name|data
parameter_list|,
name|qint64
name|maxlen
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QNetworkReplyImpl
argument_list|)
expr_stmt|;
comment|// Special case code if we have the "zero copy" download buffer
if|if
condition|(
name|d
operator|->
name|downloadBuffer
condition|)
block|{
name|qint64
name|maxAvail
init|=
name|qMin
argument_list|<
name|qint64
argument_list|>
argument_list|(
name|d
operator|->
name|downloadBufferCurrentSize
operator|-
name|d
operator|->
name|downloadBufferReadPosition
argument_list|,
name|maxlen
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxAvail
operator|==
literal|0
condition|)
return|return
name|d
operator|->
name|state
operator|==
name|QNetworkReplyPrivate
operator|::
name|Finished
condition|?
operator|-
literal|1
else|:
literal|0
return|;
comment|// FIXME what about "Aborted" state?
name|memcpy
argument_list|(
name|data
argument_list|,
name|d
operator|->
name|downloadBuffer
operator|+
name|d
operator|->
name|downloadBufferReadPosition
argument_list|,
name|maxAvail
argument_list|)
expr_stmt|;
name|d
operator|->
name|downloadBufferReadPosition
operator|+=
name|maxAvail
expr_stmt|;
return|return
name|maxAvail
return|;
block|}
if|if
condition|(
name|d
operator|->
name|readBuffer
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|d
operator|->
name|state
operator|==
name|QNetworkReplyPrivate
operator|::
name|Finished
condition|?
operator|-
literal|1
else|:
literal|0
return|;
comment|// FIXME what about "Aborted" state?
name|d
operator|->
name|backendNotify
argument_list|(
name|QNetworkReplyImplPrivate
operator|::
name|NotifyDownstreamReadyWrite
argument_list|)
expr_stmt|;
if|if
condition|(
name|maxlen
operator|==
literal|1
condition|)
block|{
comment|// optimization for getChar()
operator|*
name|data
operator|=
name|d
operator|->
name|readBuffer
operator|.
name|getChar
argument_list|()
expr_stmt|;
return|return
literal|1
return|;
block|}
name|maxlen
operator|=
name|qMin
argument_list|<
name|qint64
argument_list|>
argument_list|(
name|maxlen
argument_list|,
name|d
operator|->
name|readBuffer
operator|.
name|byteAmount
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|readBuffer
operator|.
name|read
argument_list|(
name|data
argument_list|,
name|maxlen
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!    \internal Reimplemented for internal purposes */
end_comment
begin_function
DECL|function|event
name|bool
name|QNetworkReplyImpl
operator|::
name|event
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|NetworkReplyUpdated
condition|)
block|{
name|d_func
argument_list|()
operator|->
name|handleNotifications
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
name|QObject
operator|::
name|event
argument_list|(
name|e
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*     Migrates the backend of the QNetworkReply to a new network connection if required.  Returns     true if the reply is migrated or it is not required; otherwise returns \c false. */
end_comment
begin_function
DECL|function|migrateBackend
name|bool
name|QNetworkReplyImplPrivate
operator|::
name|migrateBackend
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QNetworkReplyImpl
argument_list|)
expr_stmt|;
comment|// Network reply is already finished or aborted, don't need to migrate.
if|if
condition|(
name|state
operator|==
name|Finished
operator|||
name|state
operator|==
name|Aborted
condition|)
return|return
literal|true
return|;
comment|// Request has outgoing data, not migrating.
if|if
condition|(
name|outgoingData
condition|)
return|return
literal|false
return|;
comment|// Request is serviced from the cache, don't need to migrate.
if|if
condition|(
name|copyDevice
condition|)
return|return
literal|true
return|;
comment|// Backend does not support resuming download.
if|if
condition|(
operator|!
name|backend
operator|->
name|canResume
argument_list|()
condition|)
return|return
literal|false
return|;
name|state
operator|=
name|QNetworkReplyPrivate
operator|::
name|Reconnecting
expr_stmt|;
if|if
condition|(
name|backend
condition|)
block|{
operator|delete
name|backend
expr_stmt|;
name|backend
operator|=
literal|0
expr_stmt|;
block|}
name|cookedHeaders
operator|.
name|clear
argument_list|()
expr_stmt|;
name|rawHeaders
operator|.
name|clear
argument_list|()
expr_stmt|;
name|preMigrationDownloaded
operator|=
name|bytesDownloaded
expr_stmt|;
name|backend
operator|=
name|manager
operator|->
name|d_func
argument_list|()
operator|->
name|findBackend
argument_list|(
name|operation
argument_list|,
name|request
argument_list|)
expr_stmt|;
if|if
condition|(
name|backend
condition|)
block|{
name|backend
operator|->
name|setParent
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|backend
operator|->
name|reply
operator|=
name|this
expr_stmt|;
name|backend
operator|->
name|setResumeOffset
argument_list|(
name|bytesDownloaded
argument_list|)
expr_stmt|;
block|}
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
name|q
argument_list|,
literal|"_q_startOperation"
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_BEARERMANAGEMENT
end_ifndef
begin_constructor
DECL|function|QDisabledNetworkReply
name|QDisabledNetworkReply
operator|::
name|QDisabledNetworkReply
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|,
specifier|const
name|QNetworkRequest
modifier|&
name|req
parameter_list|,
name|QNetworkAccessManager
operator|::
name|Operation
name|op
parameter_list|)
member_init_list|:
name|QNetworkReply
argument_list|(
name|parent
argument_list|)
block|{
name|setRequest
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|setUrl
argument_list|(
name|req
operator|.
name|url
argument_list|()
argument_list|)
expr_stmt|;
name|setOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|qRegisterMetaType
argument_list|<
name|QNetworkReply
operator|::
name|NetworkError
argument_list|>
argument_list|()
expr_stmt|;
name|QString
name|msg
init|=
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QNetworkAccessManager"
argument_list|,
literal|"Network access is disabled."
argument_list|)
decl_stmt|;
name|setError
argument_list|(
name|UnknownNetworkError
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
name|this
argument_list|,
literal|"error"
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|,
name|Q_ARG
argument_list|(
name|QNetworkReply
operator|::
name|NetworkError
argument_list|,
name|UnknownNetworkError
argument_list|)
argument_list|)
expr_stmt|;
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
name|this
argument_list|,
literal|"finished"
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QDisabledNetworkReply
name|QDisabledNetworkReply
operator|::
name|~
name|QDisabledNetworkReply
parameter_list|()
block|{ }
end_destructor
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_include
include|#
directive|include
file|"moc_qnetworkreplyimpl_p.cpp"
end_include
end_unit
