begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtNetwork module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qabstractnetworkcache.h"
end_include
begin_include
include|#
directive|include
file|"qabstractnetworkcache_p.h"
end_include
begin_include
include|#
directive|include
file|<qdatetime.h>
end_include
begin_include
include|#
directive|include
file|<qurl.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_class
DECL|class|QNetworkCacheMetaDataPrivate
class|class
name|QNetworkCacheMetaDataPrivate
super|:
specifier|public
name|QSharedData
block|{
public|public:
DECL|function|QNetworkCacheMetaDataPrivate
name|QNetworkCacheMetaDataPrivate
parameter_list|()
member_init_list|:
name|QSharedData
argument_list|()
member_init_list|,
name|saveToDisk
argument_list|(
literal|true
argument_list|)
block|{}
DECL|function|operator ==
name|bool
name|operator
name|==
parameter_list|(
specifier|const
name|QNetworkCacheMetaDataPrivate
modifier|&
name|other
parameter_list|)
specifier|const
block|{
return|return
name|url
operator|==
name|other
operator|.
name|url
operator|&&
name|lastModified
operator|==
name|other
operator|.
name|lastModified
operator|&&
name|expirationDate
operator|==
name|other
operator|.
name|expirationDate
operator|&&
name|headers
operator|==
name|other
operator|.
name|headers
operator|&&
name|saveToDisk
operator|==
name|other
operator|.
name|saveToDisk
return|;
block|}
DECL|member|url
name|QUrl
name|url
decl_stmt|;
DECL|member|lastModified
name|QDateTime
name|lastModified
decl_stmt|;
DECL|member|expirationDate
name|QDateTime
name|expirationDate
decl_stmt|;
DECL|member|headers
name|QNetworkCacheMetaData
operator|::
name|RawHeaderList
name|headers
decl_stmt|;
DECL|member|attributes
name|QNetworkCacheMetaData
operator|::
name|AttributesMap
name|attributes
decl_stmt|;
DECL|member|saveToDisk
name|bool
name|saveToDisk
decl_stmt|;
specifier|static
name|void
name|save
parameter_list|(
name|QDataStream
modifier|&
name|out
parameter_list|,
specifier|const
name|QNetworkCacheMetaData
modifier|&
name|metaData
parameter_list|)
function_decl|;
specifier|static
name|void
name|load
parameter_list|(
name|QDataStream
modifier|&
name|in
parameter_list|,
name|QNetworkCacheMetaData
modifier|&
name|metaData
parameter_list|)
function_decl|;
block|}
class|;
end_class
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|QNetworkCacheMetaDataPrivate
argument_list|,
argument|metadata_shared_invalid
argument_list|)
end_macro
begin_comment
comment|/*!     \class QNetworkCacheMetaData     \since 4.5     \inmodule QtNetwork      \brief The QNetworkCacheMetaData class provides cache information.      QNetworkCacheMetaData provides information about a cache file including     the url, when it was last modified, when the cache file was created, headers     for file and if the file should be saved onto a disk.      \sa QAbstractNetworkCache */
end_comment
begin_comment
comment|/*!     \typedef QNetworkCacheMetaData::RawHeader      Synonym for QPair<QByteArray, QByteArray> */
end_comment
begin_comment
comment|/*!     \typedef QNetworkCacheMetaData::RawHeaderList      Synonym for QList<RawHeader> */
end_comment
begin_comment
comment|/*!   \typedef  QNetworkCacheMetaData::AttributesMap    Synonym for QHash<QNetworkRequest::Attribute, QVariant> */
end_comment
begin_comment
comment|/*!     Constructs an invalid network cache meta data.      \sa isValid()  */
end_comment
begin_constructor
DECL|function|QNetworkCacheMetaData
name|QNetworkCacheMetaData
operator|::
name|QNetworkCacheMetaData
parameter_list|()
member_init_list|:
name|d
argument_list|(
operator|new
name|QNetworkCacheMetaDataPrivate
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Destroys the network cache meta data.  */
end_comment
begin_destructor
DECL|function|~QNetworkCacheMetaData
name|QNetworkCacheMetaData
operator|::
name|~
name|QNetworkCacheMetaData
parameter_list|()
block|{
comment|// QSharedDataPointer takes care of freeing d
block|}
end_destructor
begin_comment
comment|/*!     Constructs a copy of the \a other QNetworkCacheMetaData.  */
end_comment
begin_constructor
DECL|function|QNetworkCacheMetaData
name|QNetworkCacheMetaData
operator|::
name|QNetworkCacheMetaData
parameter_list|(
specifier|const
name|QNetworkCacheMetaData
modifier|&
name|other
parameter_list|)
member_init_list|:
name|d
argument_list|(
name|other
operator|.
name|d
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Makes a copy of the \a other QNetworkCacheMetaData and returns a reference to the copy.  */
end_comment
begin_function
DECL|function|operator =
name|QNetworkCacheMetaData
modifier|&
name|QNetworkCacheMetaData
operator|::
name|operator
name|=
parameter_list|(
specifier|const
name|QNetworkCacheMetaData
modifier|&
name|other
parameter_list|)
block|{
name|d
operator|=
name|other
operator|.
name|d
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_function
begin_comment
comment|/*!     Returns true if this meta data is equal to the \a other meta data; otherwise returns false.      \sa operator!=()  */
end_comment
begin_function
DECL|function|operator ==
name|bool
name|QNetworkCacheMetaData
operator|::
name|operator
name|==
parameter_list|(
specifier|const
name|QNetworkCacheMetaData
modifier|&
name|other
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|d
operator|==
name|other
operator|.
name|d
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|d
operator|&&
name|other
operator|.
name|d
condition|)
return|return
operator|*
name|d
operator|==
operator|*
name|other
operator|.
name|d
return|;
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/*!     \fn bool QNetworkCacheMetaData::operator!=(const QNetworkCacheMetaData&other) const      Returns true if this meta data is not equal to the \a other meta data; otherwise returns false.      \sa operator==()  */
end_comment
begin_comment
comment|/*!     Returns true if this network cache meta data has attributes that have been set otherwise false.  */
end_comment
begin_function
DECL|function|isValid
name|bool
name|QNetworkCacheMetaData
operator|::
name|isValid
parameter_list|()
specifier|const
block|{
return|return
operator|!
operator|(
operator|*
name|d
operator|==
operator|*
name|metadata_shared_invalid
argument_list|()
operator|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns is this cache should be allowed to be stored on disk.      Some cache implementations can keep these cache items in memory for performance reasons,     but for security reasons they should not be written to disk.      Specifically with http, documents marked with Pragma: no-cache, or have a Cache-control set to     no-store or no-cache or any https document that doesn't have "Cache-control: public" set will     set the saveToDisk to false.      \sa setSaveToDisk()  */
end_comment
begin_function
DECL|function|saveToDisk
name|bool
name|QNetworkCacheMetaData
operator|::
name|saveToDisk
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|saveToDisk
return|;
block|}
end_function
begin_comment
comment|/*!     Sets whether this network cache meta data and associated content should be     allowed to be stored on disk to \a allow.      \sa saveToDisk()  */
end_comment
begin_function
DECL|function|setSaveToDisk
name|void
name|QNetworkCacheMetaData
operator|::
name|setSaveToDisk
parameter_list|(
name|bool
name|allow
parameter_list|)
block|{
name|d
operator|->
name|saveToDisk
operator|=
name|allow
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the URL this network cache meta data is referring to.      \sa setUrl()  */
end_comment
begin_function
DECL|function|url
name|QUrl
name|QNetworkCacheMetaData
operator|::
name|url
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|url
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the URL this network cache meta data to to be \a url.      The password and fragment are removed from the url.      \sa url()  */
end_comment
begin_function
DECL|function|setUrl
name|void
name|QNetworkCacheMetaData
operator|::
name|setUrl
parameter_list|(
specifier|const
name|QUrl
modifier|&
name|url
parameter_list|)
block|{
name|d
operator|->
name|url
operator|=
name|url
expr_stmt|;
name|d
operator|->
name|url
operator|.
name|setPassword
argument_list|(
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|url
operator|.
name|setFragment
argument_list|(
name|QString
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns a list of all raw headers that are set in this meta data.     The list is in the same order that the headers were set.      \sa setRawHeaders()  */
end_comment
begin_function
DECL|function|rawHeaders
name|QNetworkCacheMetaData
operator|::
name|RawHeaderList
name|QNetworkCacheMetaData
operator|::
name|rawHeaders
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|headers
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the raw headers to \a list.      \sa rawHeaders()  */
end_comment
begin_function
DECL|function|setRawHeaders
name|void
name|QNetworkCacheMetaData
operator|::
name|setRawHeaders
parameter_list|(
specifier|const
name|RawHeaderList
modifier|&
name|list
parameter_list|)
block|{
name|d
operator|->
name|headers
operator|=
name|list
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the date and time when the meta data was last modified.  */
end_comment
begin_function
DECL|function|lastModified
name|QDateTime
name|QNetworkCacheMetaData
operator|::
name|lastModified
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|lastModified
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the date and time when the meta data was last modified to \a dateTime.  */
end_comment
begin_function
DECL|function|setLastModified
name|void
name|QNetworkCacheMetaData
operator|::
name|setLastModified
parameter_list|(
specifier|const
name|QDateTime
modifier|&
name|dateTime
parameter_list|)
block|{
name|d
operator|->
name|lastModified
operator|=
name|dateTime
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the date and time when the meta data expires.  */
end_comment
begin_function
DECL|function|expirationDate
name|QDateTime
name|QNetworkCacheMetaData
operator|::
name|expirationDate
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|expirationDate
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the date and time when the meta data expires to \a dateTime.  */
end_comment
begin_function
DECL|function|setExpirationDate
name|void
name|QNetworkCacheMetaData
operator|::
name|setExpirationDate
parameter_list|(
specifier|const
name|QDateTime
modifier|&
name|dateTime
parameter_list|)
block|{
name|d
operator|->
name|expirationDate
operator|=
name|dateTime
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.6      Returns all the attributes stored with this cache item.      \sa setAttributes(), QNetworkRequest::Attribute */
end_comment
begin_function
DECL|function|attributes
name|QNetworkCacheMetaData
operator|::
name|AttributesMap
name|QNetworkCacheMetaData
operator|::
name|attributes
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|attributes
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.6      Sets all attributes of this cache item to be the map \a attributes.      \sa attributes(), QNetworkRequest::setAttribute() */
end_comment
begin_function
DECL|function|setAttributes
name|void
name|QNetworkCacheMetaData
operator|::
name|setAttributes
parameter_list|(
specifier|const
name|AttributesMap
modifier|&
name|attributes
parameter_list|)
block|{
name|d
operator|->
name|attributes
operator|=
name|attributes
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \relates QNetworkCacheMetaData     \since 4.5      Writes \a metaData to the \a out stream.      \sa {Serializing Qt Data Types} */
end_comment
begin_function
DECL|function|operator <<
name|QDataStream
modifier|&
name|operator
name|<<
parameter_list|(
name|QDataStream
modifier|&
name|out
parameter_list|,
specifier|const
name|QNetworkCacheMetaData
modifier|&
name|metaData
parameter_list|)
block|{
name|QNetworkCacheMetaDataPrivate
operator|::
name|save
argument_list|(
name|out
argument_list|,
name|metaData
argument_list|)
expr_stmt|;
return|return
name|out
return|;
block|}
end_function
begin_function
DECL|function|operator <<
specifier|static
specifier|inline
name|QDataStream
modifier|&
name|operator
name|<<
parameter_list|(
name|QDataStream
modifier|&
name|out
parameter_list|,
specifier|const
name|QNetworkCacheMetaData
operator|::
name|AttributesMap
modifier|&
name|hash
parameter_list|)
block|{
name|out
operator|<<
name|quint32
argument_list|(
name|hash
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QNetworkCacheMetaData
operator|::
name|AttributesMap
operator|::
name|ConstIterator
name|it
init|=
name|hash
operator|.
name|end
argument_list|()
decl_stmt|;
name|QNetworkCacheMetaData
operator|::
name|AttributesMap
operator|::
name|ConstIterator
name|begin
init|=
name|hash
operator|.
name|begin
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|begin
condition|)
block|{
operator|--
name|it
expr_stmt|;
name|out
operator|<<
name|int
argument_list|(
name|it
operator|.
name|key
argument_list|()
argument_list|)
operator|<<
name|it
operator|.
name|value
argument_list|()
expr_stmt|;
block|}
return|return
name|out
return|;
block|}
end_function
begin_function
DECL|function|save
name|void
name|QNetworkCacheMetaDataPrivate
operator|::
name|save
parameter_list|(
name|QDataStream
modifier|&
name|out
parameter_list|,
specifier|const
name|QNetworkCacheMetaData
modifier|&
name|metaData
parameter_list|)
block|{
comment|// note: if you change the contents of the meta data here
comment|// remember to bump the cache version in qnetworkdiskcache.cpp CurrentCacheVersion
name|out
operator|<<
name|metaData
operator|.
name|url
argument_list|()
expr_stmt|;
name|out
operator|<<
name|metaData
operator|.
name|expirationDate
argument_list|()
expr_stmt|;
name|out
operator|<<
name|metaData
operator|.
name|lastModified
argument_list|()
expr_stmt|;
name|out
operator|<<
name|metaData
operator|.
name|saveToDisk
argument_list|()
expr_stmt|;
name|out
operator|<<
name|metaData
operator|.
name|attributes
argument_list|()
expr_stmt|;
name|out
operator|<<
name|metaData
operator|.
name|rawHeaders
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \relates QNetworkCacheMetaData     \since 4.5      Reads a QNetworkCacheMetaData from the stream \a in into \a metaData.      \sa {Serializing Qt Data Types} */
end_comment
begin_function
DECL|function|operator >>
name|QDataStream
modifier|&
name|operator
name|>>
parameter_list|(
name|QDataStream
modifier|&
name|in
parameter_list|,
name|QNetworkCacheMetaData
modifier|&
name|metaData
parameter_list|)
block|{
name|QNetworkCacheMetaDataPrivate
operator|::
name|load
argument_list|(
name|in
argument_list|,
name|metaData
argument_list|)
expr_stmt|;
return|return
name|in
return|;
block|}
end_function
begin_function
DECL|function|operator >>
specifier|static
specifier|inline
name|QDataStream
modifier|&
name|operator
name|>>
parameter_list|(
name|QDataStream
modifier|&
name|in
parameter_list|,
name|QNetworkCacheMetaData
operator|::
name|AttributesMap
modifier|&
name|hash
parameter_list|)
block|{
name|hash
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QDataStream
operator|::
name|Status
name|oldStatus
init|=
name|in
operator|.
name|status
argument_list|()
decl_stmt|;
name|in
operator|.
name|resetStatus
argument_list|()
expr_stmt|;
name|hash
operator|.
name|clear
argument_list|()
expr_stmt|;
name|quint32
name|n
decl_stmt|;
name|in
operator|>>
name|n
expr_stmt|;
for|for
control|(
name|quint32
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|in
operator|.
name|status
argument_list|()
operator|!=
name|QDataStream
operator|::
name|Ok
condition|)
break|break;
name|int
name|k
decl_stmt|;
name|QVariant
name|t
decl_stmt|;
name|in
operator|>>
name|k
operator|>>
name|t
expr_stmt|;
name|hash
operator|.
name|insertMulti
argument_list|(
name|QNetworkRequest
operator|::
name|Attribute
argument_list|(
name|k
argument_list|)
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|status
argument_list|()
operator|!=
name|QDataStream
operator|::
name|Ok
condition|)
name|hash
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|oldStatus
operator|!=
name|QDataStream
operator|::
name|Ok
condition|)
name|in
operator|.
name|setStatus
argument_list|(
name|oldStatus
argument_list|)
expr_stmt|;
return|return
name|in
return|;
block|}
end_function
begin_function
DECL|function|load
name|void
name|QNetworkCacheMetaDataPrivate
operator|::
name|load
parameter_list|(
name|QDataStream
modifier|&
name|in
parameter_list|,
name|QNetworkCacheMetaData
modifier|&
name|metaData
parameter_list|)
block|{
name|in
operator|>>
name|metaData
operator|.
name|d
operator|->
name|url
expr_stmt|;
name|in
operator|>>
name|metaData
operator|.
name|d
operator|->
name|expirationDate
expr_stmt|;
name|in
operator|>>
name|metaData
operator|.
name|d
operator|->
name|lastModified
expr_stmt|;
name|in
operator|>>
name|metaData
operator|.
name|d
operator|->
name|saveToDisk
expr_stmt|;
name|in
operator|>>
name|metaData
operator|.
name|d
operator|->
name|attributes
expr_stmt|;
name|in
operator|>>
name|metaData
operator|.
name|d
operator|->
name|headers
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \class QAbstractNetworkCache     \since 4.5     \inmodule QtNetwork      \brief The QAbstractNetworkCache class provides the interface for cache implementations.      QAbstractNetworkCache is the base class for every standard cache that is used be     QNetworkAccessManager.  QAbstractNetworkCache is an abstract class and cannot be     instantiated.      \sa QNetworkDiskCache */
end_comment
begin_comment
comment|/*!     Constructs an abstract network cache with the given \a parent. */
end_comment
begin_constructor
DECL|function|QAbstractNetworkCache
name|QAbstractNetworkCache
operator|::
name|QAbstractNetworkCache
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
operator|*
operator|new
name|QAbstractNetworkCachePrivate
argument_list|,
name|parent
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     \internal */
end_comment
begin_constructor
DECL|function|QAbstractNetworkCache
name|QAbstractNetworkCache
operator|::
name|QAbstractNetworkCache
parameter_list|(
name|QAbstractNetworkCachePrivate
modifier|&
name|dd
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|dd
argument_list|,
name|parent
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Destroys the cache.      Any operations that have not been inserted are discarded.      \sa insert()  */
end_comment
begin_destructor
DECL|function|~QAbstractNetworkCache
name|QAbstractNetworkCache
operator|::
name|~
name|QAbstractNetworkCache
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     \fn QNetworkCacheMetaData QAbstractNetworkCache::metaData(const QUrl&url) = 0     Returns the meta data for the url \a url.      If the url is valid and the cache contains the data for url,     a valid QNetworkCacheMetaData is returned.      In the base class this is a pure virtual function.      \sa updateMetaData(), data() */
end_comment
begin_comment
comment|/*!     \fn void QAbstractNetworkCache::updateMetaData(const QNetworkCacheMetaData&metaData) = 0     Updates the cache meta date for the metaData's url to \a metaData      If the cache does not contains a cache item for the url then no action is taken.      In the base class this is a pure virtual function.      \sa metaData(), prepare() */
end_comment
begin_comment
comment|/*!     \fn QIODevice *QAbstractNetworkCache::data(const QUrl&url) = 0     Returns the data associated with \a url.      It is up to the application that requests the data to delete     the QIODevice when done with it.      If there is no cache for \a url, the url is invalid, or if there     is an internal cache error 0 is returned.      In the base class this is a pure virtual function.      \sa metaData(), prepare() */
end_comment
begin_comment
comment|/*!     \fn bool QAbstractNetworkCache::remove(const QUrl&url) = 0     Removes the cache entry for \a url, returning true if success otherwise false.      In the base class this is a pure virtual function.      \sa clear(), prepare() */
end_comment
begin_comment
comment|/*!     \fn QIODevice *QAbstractNetworkCache::prepare(const QNetworkCacheMetaData&metaData) = 0     Returns the device that should be populated with the data for     the cache item \a metaData.  When all of the data has been written     insert() should be called.  If metaData is invalid or the url in     the metadata is invalid 0 is returned.      The cache owns the device and will take care of deleting it when     it is inserted or removed.      To cancel a prepared inserted call remove() on the metadata's url.      In the base class this is a pure virtual function.      \sa remove(), updateMetaData(), insert() */
end_comment
begin_comment
comment|/*!     \fn void QAbstractNetworkCache::insert(QIODevice *device) = 0     Inserts the data in \a device and the prepared meta data into the cache.     After this function is called the data and meta data should be retrievable     using data() and metaData().      To cancel a prepared inserted call remove() on the metadata's url.      In the base class this is a pure virtual function.      \sa prepare(), remove() */
end_comment
begin_comment
comment|/*!     \fn qint64 QAbstractNetworkCache::cacheSize() const = 0     Returns the current size taken up by the cache.  Depending upon     the cache implementation this might be disk or memory size.      In the base class this is a pure virtual function.      \sa clear() */
end_comment
begin_comment
comment|/*!     \fn void QAbstractNetworkCache::clear() = 0     Removes all items from the cache.  Unless there was failures     clearing the cache cacheSize() should return 0 after a call to clear.      In the base class this is a pure virtual function.      \sa cacheSize(), remove() */
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
