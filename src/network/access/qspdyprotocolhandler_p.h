begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 BlackBerry Limited. All rights reserved. ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtNetwork module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QSPDYPROTOCOLHANDLER_H
end_ifndef
begin_define
DECL|macro|QSPDYPROTOCOLHANDLER_H
define|#
directive|define
name|QSPDYPROTOCOLHANDLER_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists for the convenience
end_comment
begin_comment
comment|// of the Network Access API.  This header file may change from
end_comment
begin_comment
comment|// version to version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|<private/qabstractprotocolhandler_p.h>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/qnetworkreply.h>
end_include
begin_include
include|#
directive|include
file|<private/qbytedata_p.h>
end_include
begin_include
include|#
directive|include
file|<zlib.h>
end_include
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_HTTP
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_SSL
argument_list|)
end_if
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QHttpNetworkRequest
name|class
name|QHttpNetworkRequest
decl_stmt|;
end_decl_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|HttpMessagePair
end_ifndef
begin_typedef
DECL|typedef|QHttpNetworkRequest
DECL|typedef|HttpMessagePair
typedef|typedef
name|QPair
operator|<
name|QHttpNetworkRequest
operator|,
name|QHttpNetworkReply
operator|*
operator|>
name|HttpMessagePair
expr_stmt|;
end_typedef
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
DECL|variable|QObject
name|class
name|QSpdyProtocolHandler
range|:
name|public
name|QObject
decl_stmt|,
name|public
name|QAbstractProtocolHandler
block|{
name|Q_OBJECT
name|public
range|:
name|QSpdyProtocolHandler
argument_list|(
name|QHttpNetworkConnectionChannel
operator|*
name|channel
argument_list|)
decl_stmt|;
operator|~
name|QSpdyProtocolHandler
argument_list|()
expr_stmt|;
enum|enum
name|DataFrameFlag
block|{
name|DataFrame_FLAG_FIN
init|=
literal|0x01
block|,
name|DataFrame_FLAG_COMPRESS
init|=
literal|0x02
block|}
enum|;
name|Q_DECLARE_FLAGS
argument_list|(
name|DataFrameFlags
argument_list|,
name|DataFrameFlag
argument_list|)
expr|enum
name|ControlFrameFlag
block|{
name|ControlFrame_FLAG_FIN
operator|=
literal|0x01
block|,
name|ControlFrame_FLAG_UNIDIRECTIONAL
operator|=
literal|0x02
block|}
expr_stmt|;
name|Q_DECLARE_FLAGS
argument_list|(
name|ControlFrameFlags
argument_list|,
name|ControlFrameFlag
argument_list|)
expr|enum
name|SETTINGS_Flag
block|{
name|FLAG_SETTINGS_CLEAR_SETTINGS
operator|=
literal|0x01
block|}
expr_stmt|;
name|Q_DECLARE_FLAGS
argument_list|(
name|SETTINGS_Flags
argument_list|,
name|SETTINGS_Flag
argument_list|)
expr|enum
name|SETTINGS_ID_Flag
block|{
name|FLAG_SETTINGS_PERSIST_VALUE
operator|=
literal|0x01
block|,
name|FLAG_SETTINGS_PERSISTED
operator|=
literal|0x02
block|}
expr_stmt|;
name|Q_DECLARE_FLAGS
argument_list|(
argument|SETTINGS_ID_Flags
argument_list|,
argument|SETTINGS_ID_Flag
argument_list|)
name|virtual
name|void
name|_q_receiveReply
argument_list|()
name|Q_DECL_OVERRIDE
expr_stmt|;
name|virtual
name|void
name|_q_readyRead
argument_list|()
name|Q_DECL_OVERRIDE
expr_stmt|;
name|virtual
name|bool
name|sendRequest
argument_list|()
name|Q_DECL_OVERRIDE
expr_stmt|;
name|private
name|slots
range|:
name|void
name|_q_uploadDataReadyRead
argument_list|()
decl_stmt|;
name|private
label|:
enum|enum
name|FrameType
block|{
name|FrameType_SYN_STREAM
init|=
literal|1
block|,
name|FrameType_SYN_REPLY
init|=
literal|2
block|,
name|FrameType_RST_STREAM
init|=
literal|3
block|,
name|FrameType_SETTINGS
init|=
literal|4
block|,
name|FrameType_PING
init|=
literal|6
block|,
name|FrameType_GOAWAY
init|=
literal|7
block|,
name|FrameType_HEADERS
init|=
literal|8
block|,
name|FrameType_WINDOW_UPDATE
init|=
literal|9
block|,
name|FrameType_CREDENTIAL
comment|// has a special type
block|}
enum|;
enum|enum
name|StatusCode
block|{
name|StatusCode_PROTOCOL_ERROR
init|=
literal|1
block|,
name|StatusCode_INVALID_STREAM
init|=
literal|2
block|,
name|StatusCode_REFUSED_STREAM
init|=
literal|3
block|,
name|StatusCode_UNSUPPORTED_VERSION
init|=
literal|4
block|,
name|StatusCode_CANCEL
init|=
literal|5
block|,
name|StatusCode_INTERNAL_ERROR
init|=
literal|6
block|,
name|StatusCode_FLOW_CONTROL_ERROR
init|=
literal|7
block|,
name|StatusCode_STREAM_IN_USE
init|=
literal|8
block|,
name|StatusCode_STREAM_ALREADY_CLOSED
init|=
literal|9
block|,
name|StatusCode_INVALID_CREDENTIALS
init|=
literal|10
block|,
name|StatusCode_FRAME_TOO_LARGE
init|=
literal|11
block|}
enum|;
enum|enum
name|SETTINGS_ID
block|{
name|SETTINGS_UPLOAD_BANDWIDTH
init|=
literal|1
block|,
name|SETTINGS_DOWNLOAD_BANDWIDTH
init|=
literal|2
block|,
name|SETTINGS_ROUND_TRIP_TIME
init|=
literal|3
block|,
name|SETTINGS_MAX_CONCURRENT_STREAMS
init|=
literal|4
block|,
name|SETTINGS_CURRENT_CWND
init|=
literal|5
block|,
name|SETTINGS_DOWNLOAD_RETRANS_RATE
init|=
literal|6
block|,
name|SETTINGS_INITIAL_WINDOW_SIZE
init|=
literal|7
block|,
name|SETTINGS_CLIENT_CERTIFICATE_VECTOR_SIZE
init|=
literal|8
block|}
enum|;
enum|enum
name|GOAWAY_STATUS
block|{
name|GOAWAY_OK
init|=
literal|0
block|,
name|GOAWAY_PROTOCOL_ERROR
init|=
literal|1
block|,
name|GOAWAY_INTERNAL_ERROR
init|=
literal|11
block|}
enum|;
enum|enum
name|RST_STREAM_STATUS_CODE
block|{
name|RST_STREAM_PROTOCOL_ERROR
init|=
literal|1
block|,
name|RST_STREAM_INVALID_STREAM
init|=
literal|2
block|,
name|RST_STREAM_REFUSED_STREAM
init|=
literal|3
block|,
name|RST_STREAM_UNSUPPORTED_VERSION
init|=
literal|4
block|,
name|RST_STREAM_CANCEL
init|=
literal|5
block|,
name|RST_STREAM_INTERNAL_ERROR
init|=
literal|6
block|,
name|RST_STREAM_FLOW_CONTROL_ERROR
init|=
literal|7
block|,
name|RST_STREAM_STREAM_IN_USE
init|=
literal|8
block|,
name|RST_STREAM_STREAM_ALREADY_CLOSED
init|=
literal|9
block|,
name|RST_STREAM_INVALID_CREDENTIALS
init|=
literal|10
block|,
name|RST_STREAM_FRAME_TOO_LARGE
init|=
literal|11
block|}
enum|;
name|quint64
name|bytesAvailable
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|readNextChunk
parameter_list|(
name|qint64
name|length
parameter_list|,
name|char
modifier|*
name|sink
parameter_list|)
function_decl|;
name|void
name|sendControlFrame
parameter_list|(
name|FrameType
name|type
parameter_list|,
name|ControlFrameFlags
name|flags
parameter_list|,
specifier|const
name|char
modifier|*
name|data
parameter_list|,
name|quint32
name|length
parameter_list|)
function_decl|;
name|void
name|sendSYN_STREAM
parameter_list|(
name|HttpMessagePair
name|pair
parameter_list|,
name|qint32
name|streamID
parameter_list|,
name|qint32
name|associatedToStreamID
parameter_list|)
function_decl|;
name|void
name|sendRST_STREAM
parameter_list|(
name|qint32
name|streamID
parameter_list|,
name|RST_STREAM_STATUS_CODE
name|statusCode
parameter_list|)
function_decl|;
name|void
name|sendPING
parameter_list|(
name|quint32
name|pingID
parameter_list|)
function_decl|;
name|bool
name|uploadData
parameter_list|(
name|qint32
name|streamID
parameter_list|)
function_decl|;
name|Q_INVOKABLE
name|void
name|sendWINDOW_UPDATE
parameter_list|(
name|qint32
name|streamID
parameter_list|,
name|quint32
name|deltaWindowSize
parameter_list|)
function_decl|;
name|qint64
name|sendDataFrame
parameter_list|(
name|qint32
name|streamID
parameter_list|,
name|DataFrameFlags
name|flags
parameter_list|,
name|quint32
name|length
parameter_list|,
specifier|const
name|char
modifier|*
name|data
parameter_list|)
function_decl|;
name|QByteArray
name|composeHeader
parameter_list|(
specifier|const
name|QHttpNetworkRequest
modifier|&
name|request
parameter_list|)
function_decl|;
name|bool
name|uncompressHeader
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|input
parameter_list|,
name|QByteArray
modifier|*
name|output
parameter_list|)
function_decl|;
name|void
name|handleControlFrame
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|frameHeaders
parameter_list|)
function_decl|;
name|void
name|handleDataFrame
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|frameHeaders
parameter_list|)
function_decl|;
name|void
name|handleSYN_STREAM
parameter_list|(
name|char
parameter_list|,
name|quint32
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|frameData
parameter_list|)
function_decl|;
name|void
name|handleSYN_REPLY
parameter_list|(
name|char
name|flags
parameter_list|,
name|quint32
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|frameData
parameter_list|)
function_decl|;
name|void
name|handleRST_STREAM
parameter_list|(
name|char
name|flags
parameter_list|,
name|quint32
name|length
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|frameData
parameter_list|)
function_decl|;
name|void
name|handleSETTINGS
parameter_list|(
name|char
name|flags
parameter_list|,
name|quint32
name|length
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|frameData
parameter_list|)
function_decl|;
name|void
name|handlePING
parameter_list|(
name|char
parameter_list|,
name|quint32
name|length
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|frameData
parameter_list|)
function_decl|;
name|void
name|handleGOAWAY
parameter_list|(
name|char
name|flags
parameter_list|,
name|quint32
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|frameData
parameter_list|)
function_decl|;
name|void
name|handleHEADERS
parameter_list|(
name|char
name|flags
parameter_list|,
name|quint32
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|frameData
parameter_list|)
function_decl|;
name|void
name|handleWINDOW_UPDATE
parameter_list|(
name|char
parameter_list|,
name|quint32
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|frameData
parameter_list|)
function_decl|;
name|qint32
name|generateNextStreamID
parameter_list|()
function_decl|;
name|void
name|parseHttpHeaders
parameter_list|(
name|char
name|flags
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|frameData
parameter_list|)
function_decl|;
name|void
name|replyFinished
parameter_list|(
name|QHttpNetworkReply
modifier|*
name|httpReply
parameter_list|,
name|qint32
name|streamID
parameter_list|)
function_decl|;
name|void
name|replyFinishedWithError
argument_list|(
name|QHttpNetworkReply
operator|*
name|httpReply
argument_list|,
name|qint32
name|streamID
argument_list|,
name|QNetworkReply
operator|::
name|NetworkError
name|errorCode
argument_list|,
specifier|const
name|char
operator|*
name|errorMessage
argument_list|)
decl_stmt|;
name|qint32
name|m_nextStreamID
decl_stmt|;
name|QHash
operator|<
name|quint32
operator|,
name|HttpMessagePair
operator|>
name|m_inFlightStreams
expr_stmt|;
name|qint32
name|m_maxConcurrentStreams
decl_stmt|;
name|quint32
name|m_initialWindowSize
decl_stmt|;
name|QByteDataBuffer
name|m_spdyBuffer
decl_stmt|;
name|bool
name|m_waitingForCompleteStream
decl_stmt|;
name|z_stream
name|m_deflateStream
decl_stmt|;
name|z_stream
name|m_inflateStream
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_macro
name|Q_DECLARE_OPERATORS_FOR_FLAGS
argument_list|(
argument|QSpdyProtocolHandler::DataFrameFlags
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_OPERATORS_FOR_FLAGS
argument_list|(
argument|QSpdyProtocolHandler::ControlFrameFlags
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_OPERATORS_FOR_FLAGS
argument_list|(
argument|QSpdyProtocolHandler::SETTINGS_Flags
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_OPERATORS_FOR_FLAGS
argument_list|(
argument|QSpdyProtocolHandler::SETTINGS_ID_Flags
argument_list|)
end_macro
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// !defined(QT_NO_HTTP)&& !defined(QT_NO_SSL)
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QSPDYPROTOCOLHANDLER_H
end_comment
end_unit
