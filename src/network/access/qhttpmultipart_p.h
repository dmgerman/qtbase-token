begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtNetwork module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia. For licensing terms and ** conditions see http://qt.digia.com/licensing. For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights. These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QHTTPMULTIPART_P_H
end_ifndef
begin_define
DECL|macro|QHTTPMULTIPART_P_H
define|#
directive|define
name|QHTTPMULTIPART_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists for the convenience
end_comment
begin_comment
comment|// of the Network Access API.  This header file may change from
end_comment
begin_comment
comment|// version to version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"QtCore/qshareddata.h"
end_include
begin_include
include|#
directive|include
file|"qnetworkrequest_p.h"
end_include
begin_comment
comment|// for deriving QHttpPartPrivate from QNetworkHeadersPrivate
end_comment
begin_include
include|#
directive|include
file|"private/qobject_p.h"
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QSharedData
name|class
name|QHttpPartPrivate
range|:
name|public
name|QSharedData
decl_stmt|,
name|public
name|QNetworkHeadersPrivate
block|{
name|public
label|:
specifier|inline
name|QHttpPartPrivate
argument_list|()
operator|:
name|bodyDevice
argument_list|(
literal|0
argument_list|)
operator|,
name|headerCreated
argument_list|(
name|false
argument_list|)
operator|,
name|readPointer
argument_list|(
literal|0
argument_list|)
block|{     }
operator|~
name|QHttpPartPrivate
argument_list|()
block|{     }
name|QHttpPartPrivate
argument_list|(
specifier|const
name|QHttpPartPrivate
operator|&
name|other
argument_list|)
operator|:
name|QSharedData
argument_list|(
name|other
argument_list|)
operator|,
name|QNetworkHeadersPrivate
argument_list|(
name|other
argument_list|)
operator|,
name|body
argument_list|(
name|other
operator|.
name|body
argument_list|)
operator|,
name|header
argument_list|(
name|other
operator|.
name|header
argument_list|)
operator|,
name|headerCreated
argument_list|(
name|other
operator|.
name|headerCreated
argument_list|)
operator|,
name|readPointer
argument_list|(
argument|other.readPointer
argument_list|)
block|{
name|bodyDevice
operator|=
name|other
operator|.
name|bodyDevice
block|;     }
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QHttpPartPrivate
operator|&
name|other
operator|)
specifier|const
block|{
return|return
name|rawHeaders
operator|==
name|other
operator|.
name|rawHeaders
operator|&&
name|body
operator|==
name|other
operator|.
name|body
operator|&&
name|bodyDevice
operator|==
name|other
operator|.
name|bodyDevice
operator|&&
name|readPointer
operator|==
name|other
operator|.
name|readPointer
return|;
block|}
name|void
name|setBodyDevice
parameter_list|(
name|QIODevice
modifier|*
name|device
parameter_list|)
block|{
name|bodyDevice
operator|=
name|device
expr_stmt|;
name|readPointer
operator|=
literal|0
expr_stmt|;
block|}
name|void
name|setBody
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|newBody
parameter_list|)
block|{
name|body
operator|=
name|newBody
expr_stmt|;
name|readPointer
operator|=
literal|0
expr_stmt|;
block|}
comment|// QIODevice-style methods called by QHttpMultiPartIODevice (but this class is
comment|// not a QIODevice):
name|qint64
name|bytesAvailable
argument_list|()
specifier|const
expr_stmt|;
name|qint64
name|readData
parameter_list|(
name|char
modifier|*
name|data
parameter_list|,
name|qint64
name|maxSize
parameter_list|)
function_decl|;
name|qint64
name|size
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|reset
parameter_list|()
function_decl|;
name|QByteArray
name|body
decl_stmt|;
name|QIODevice
modifier|*
name|bodyDevice
decl_stmt|;
name|private
label|:
name|void
name|checkHeaderCreated
argument_list|()
specifier|const
expr_stmt|;
name|mutable
name|QByteArray
name|header
decl_stmt|;
name|mutable
name|bool
name|headerCreated
decl_stmt|;
name|qint64
name|readPointer
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
DECL|variable|QHttpMultiPartPrivate
name|class
name|QHttpMultiPartPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_AUTOTEST_EXPORT
name|QHttpMultiPartIODevice
range|:
name|public
name|QIODevice
block|{
name|public
operator|:
name|QHttpMultiPartIODevice
argument_list|(
name|QHttpMultiPartPrivate
operator|*
name|parentMultiPart
argument_list|)
operator|:
name|QIODevice
argument_list|()
block|,
name|multiPart
argument_list|(
name|parentMultiPart
argument_list|)
block|,
name|readPointer
argument_list|(
literal|0
argument_list|)
block|,
name|deviceSize
argument_list|(
argument|-
literal|1
argument_list|)
block|{     }
operator|~
name|QHttpMultiPartIODevice
argument_list|()
block|{     }
name|virtual
name|bool
name|atEnd
argument_list|()
specifier|const
block|{
return|return
name|readPointer
operator|==
name|size
argument_list|()
return|;
block|}
name|virtual
name|qint64
name|bytesAvailable
argument_list|()
specifier|const
block|{
return|return
name|size
argument_list|()
operator|-
name|readPointer
return|;
block|}
name|virtual
name|void
name|close
argument_list|()
block|{
name|readPointer
operator|=
literal|0
block|;
name|partOffsets
operator|.
name|clear
argument_list|()
block|;
name|deviceSize
operator|=
operator|-
literal|1
block|;
name|QIODevice
operator|::
name|close
argument_list|()
block|;     }
name|virtual
name|qint64
name|bytesToWrite
argument_list|()
specifier|const
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|qint64
name|size
argument_list|()
specifier|const
block|;
name|virtual
name|bool
name|isSequential
argument_list|()
specifier|const
block|;
name|virtual
name|bool
name|reset
argument_list|()
block|;
name|virtual
name|qint64
name|readData
argument_list|(
argument|char *data
argument_list|,
argument|qint64 maxSize
argument_list|)
block|;
name|virtual
name|qint64
name|writeData
argument_list|(
argument|const char *data
argument_list|,
argument|qint64 maxSize
argument_list|)
block|;
name|QHttpMultiPartPrivate
operator|*
name|multiPart
block|;
name|qint64
name|readPointer
block|;
name|mutable
name|QList
operator|<
name|qint64
operator|>
name|partOffsets
block|;
name|mutable
name|qint64
name|deviceSize
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QHttpMultiPartPrivate
range|:
name|public
name|QObjectPrivate
block|{
name|public
operator|:
name|QHttpMultiPartPrivate
argument_list|()
block|;
operator|~
name|QHttpMultiPartPrivate
argument_list|()
block|{
name|delete
name|device
block|;     }
name|QList
operator|<
name|QHttpPart
operator|>
name|parts
block|;
name|QByteArray
name|boundary
block|;
name|QHttpMultiPart
operator|::
name|ContentType
name|contentType
block|;
name|QHttpMultiPartIODevice
operator|*
name|device
block|;  }
decl_stmt|;
end_decl_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QHTTPMULTIPART_P_H
end_comment
end_unit
