begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtNetwork module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QHTTP_H
end_ifndef
begin_define
DECL|macro|QHTTP_H
define|#
directive|define
name|QHTTP_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qobject.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qstringlist.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qmap.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qpair.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qscopedpointer.h>
end_include
begin_function
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
name|QT_MODULE
parameter_list|(
name|Network
parameter_list|)
ifndef|#
directive|ifndef
name|QT_NO_HTTP
if|#
directive|if
literal|0
pragma|#
directive|pragma
name|qt_class
name|(
name|QHttp
name|)
endif|#
directive|endif
name|class
name|QHttpHeaderPrivate
decl_stmt|;
name|class
name|QHttpHeader
decl_stmt|{ public:     QHttpHeader(
end_function
begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt
begin_expr_stmt
name|QHttpHeader
argument_list|(
specifier|const
name|QHttpHeader
operator|&
name|header
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QHttpHeader
argument_list|(
specifier|const
name|QString
operator|&
name|str
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|virtual
operator|~
name|QHttpHeader
argument_list|()
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|QHttpHeader
modifier|&
name|operator
init|=
operator|(
specifier|const
name|QHttpHeader
operator|&
name|h
operator|)
decl_stmt|;
end_decl_stmt
begin_function_decl
name|void
name|setValue
parameter_list|(
specifier|const
name|QString
modifier|&
name|key
parameter_list|,
specifier|const
name|QString
modifier|&
name|value
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
name|void
name|setValues
argument_list|(
specifier|const
name|QList
operator|<
name|QPair
operator|<
name|QString
argument_list|,
name|QString
operator|>
expr|>
operator|&
name|values
argument_list|)
decl_stmt|;
end_decl_stmt
begin_function_decl
name|void
name|addValue
parameter_list|(
specifier|const
name|QString
modifier|&
name|key
parameter_list|,
specifier|const
name|QString
modifier|&
name|value
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|QList
operator|<
name|QPair
operator|<
name|QString
operator|,
name|QString
operator|>
expr|>
name|values
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|bool
name|hasKey
argument_list|(
specifier|const
name|QString
operator|&
name|key
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|QStringList
name|keys
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|QString
name|value
argument_list|(
specifier|const
name|QString
operator|&
name|key
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QStringList
name|allValues
argument_list|(
specifier|const
name|QString
operator|&
name|key
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_function_decl
name|void
name|removeValue
parameter_list|(
specifier|const
name|QString
modifier|&
name|key
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|removeAllValues
parameter_list|(
specifier|const
name|QString
modifier|&
name|key
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|// ### Qt 5: change to qint64
end_comment
begin_expr_stmt
name|bool
name|hasContentLength
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|uint
name|contentLength
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_function_decl
name|void
name|setContentLength
parameter_list|(
name|int
name|len
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|bool
name|hasContentType
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QString
name|contentType
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_function_decl
name|void
name|setContentType
parameter_list|(
specifier|const
name|QString
modifier|&
name|type
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|virtual
name|QString
name|toString
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|bool
name|isValid
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|virtual
name|int
name|majorVersion
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|virtual
name|int
name|minorVersion
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
end_expr_stmt
begin_label
name|protected
label|:
end_label
begin_function_decl
name|virtual
name|bool
name|parseLine
parameter_list|(
specifier|const
name|QString
modifier|&
name|line
parameter_list|,
name|int
name|number
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|bool
name|parse
parameter_list|(
specifier|const
name|QString
modifier|&
name|str
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|setValid
parameter_list|(
name|bool
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|QHttpHeader
argument_list|(
name|QHttpHeaderPrivate
operator|&
name|dd
argument_list|,
specifier|const
name|QString
operator|&
name|str
operator|=
name|QString
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QHttpHeader
argument_list|(
name|QHttpHeaderPrivate
operator|&
name|dd
argument_list|,
specifier|const
name|QHttpHeader
operator|&
name|header
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QScopedPointer
operator|<
name|QHttpHeaderPrivate
operator|>
name|d_ptr
expr_stmt|;
end_expr_stmt
begin_label
name|private
label|:
end_label
begin_macro
name|Q_DECLARE_PRIVATE
argument_list|(
argument|QHttpHeader
argument_list|)
end_macro
begin_decl_stmt
unit|};
DECL|variable|QHttpResponseHeaderPrivate
name|class
name|QHttpResponseHeaderPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QHttpResponseHeader
range|:
name|public
name|QHttpHeader
block|{
name|public
operator|:
name|QHttpResponseHeader
argument_list|()
block|;
name|QHttpResponseHeader
argument_list|(
specifier|const
name|QHttpResponseHeader
operator|&
name|header
argument_list|)
block|;
name|QHttpResponseHeader
argument_list|(
specifier|const
name|QString
operator|&
name|str
argument_list|)
block|;
name|QHttpResponseHeader
argument_list|(
argument|int code
argument_list|,
argument|const QString&text = QString()
argument_list|,
argument|int majorVer =
literal|1
argument_list|,
argument|int minorVer =
literal|1
argument_list|)
block|;
name|QHttpResponseHeader
operator|&
name|operator
operator|=
operator|(
specifier|const
name|QHttpResponseHeader
operator|&
name|header
operator|)
block|;
name|void
name|setStatusLine
argument_list|(
argument|int code
argument_list|,
argument|const QString&text = QString()
argument_list|,
argument|int majorVer =
literal|1
argument_list|,
argument|int minorVer =
literal|1
argument_list|)
block|;
name|int
name|statusCode
argument_list|()
specifier|const
block|;
name|QString
name|reasonPhrase
argument_list|()
specifier|const
block|;
name|int
name|majorVersion
argument_list|()
specifier|const
block|;
name|int
name|minorVersion
argument_list|()
specifier|const
block|;
name|QString
name|toString
argument_list|()
specifier|const
block|;
name|protected
operator|:
name|bool
name|parseLine
argument_list|(
argument|const QString&line
argument_list|,
argument|int number
argument_list|)
block|;
name|private
operator|:
name|Q_DECLARE_PRIVATE
argument_list|(
argument|QHttpResponseHeader
argument_list|)
name|friend
name|class
name|QHttpPrivate
block|; }
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_HTTP
end_comment
begin_expr_stmt
name|QT_END_NAMESPACE
name|QT_END_HEADER
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QHTTP_H
end_comment
end_unit
