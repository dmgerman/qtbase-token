begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtNetwork module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|//#define QHTTP_DEBUG
end_comment
begin_include
include|#
directive|include
file|<qplatformdefs.h>
end_include
begin_include
include|#
directive|include
file|"qhttpheader_p.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_HTTP
end_ifndef
begin_include
include|#
directive|include
file|"private/qobject_p.h"
end_include
begin_include
include|#
directive|include
file|"qtcpsocket.h"
end_include
begin_include
include|#
directive|include
file|"qsslsocket.h"
end_include
begin_include
include|#
directive|include
file|"qtextstream.h"
end_include
begin_include
include|#
directive|include
file|"qmap.h"
end_include
begin_include
include|#
directive|include
file|"qlist.h"
end_include
begin_include
include|#
directive|include
file|"qstring.h"
end_include
begin_include
include|#
directive|include
file|"qstringlist.h"
end_include
begin_include
include|#
directive|include
file|"qbuffer.h"
end_include
begin_include
include|#
directive|include
file|"private/qringbuffer_p.h"
end_include
begin_include
include|#
directive|include
file|"qcoreevent.h"
end_include
begin_include
include|#
directive|include
file|"qurl.h"
end_include
begin_include
include|#
directive|include
file|"qnetworkproxy.h"
end_include
begin_include
include|#
directive|include
file|"qauthenticator.h"
end_include
begin_include
include|#
directive|include
file|"qauthenticator_p.h"
end_include
begin_include
include|#
directive|include
file|"qdebug.h"
end_include
begin_include
include|#
directive|include
file|"qtimer.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_HTTP
end_ifndef
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_class
DECL|class|QHttpHeaderPrivate
class|class
name|QHttpHeaderPrivate
block|{
name|Q_DECLARE_PUBLIC
parameter_list|(
name|QHttpHeader
parameter_list|)
specifier|public
private|:
DECL|function|~QHttpHeaderPrivate
specifier|inline
specifier|virtual
name|~
name|QHttpHeaderPrivate
parameter_list|()
block|{}
DECL|member|values
name|QList
argument_list|<
name|QPair
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
argument_list|>
name|values
decl_stmt|;
DECL|member|valid
name|bool
name|valid
decl_stmt|;
DECL|member|q_ptr
name|QHttpHeader
modifier|*
name|q_ptr
decl_stmt|;
block|}
class|;
end_class
begin_comment
comment|/****************************************************  *  * QHttpHeader  *  ****************************************************/
end_comment
begin_comment
comment|/*!     \class QHttpHeader     \obsolete     \brief The QHttpHeader class contains header information for HTTP.      \ingroup network     \inmodule QtNetwork      In most cases you should use the more specialized derivatives of     this class, QHttpResponseHeader and QHttpRequestHeader, rather     than directly using QHttpHeader.      QHttpHeader provides the HTTP header fields. A HTTP header field     consists of a name followed by a colon, a single space, and the     field value. (See RFC 1945.) Field names are case-insensitive. A     typical header field looks like this:     \snippet doc/src/snippets/code/src_network_access_qhttp.cpp 0      In the API the header field name is called the "key" and the     content is called the "value". You can get and set a header     field's value by using its key with value() and setValue(), e.g.     \snippet doc/src/snippets/code/src_network_access_qhttp.cpp 1      Some fields are so common that getters and setters are provided     for them as a convenient alternative to using \l value() and     \l setValue(), e.g. contentLength() and contentType(),     setContentLength() and setContentType().      Each header key has a \e single value associated with it. If you     set the value for a key which already exists the previous value     will be discarded.      \sa QHttpRequestHeader QHttpResponseHeader */
end_comment
begin_comment
comment|/*!     \fn int QHttpHeader::majorVersion() const      Returns the major protocol-version of the HTTP header. */
end_comment
begin_comment
comment|/*!     \fn int QHttpHeader::minorVersion() const      Returns the minor protocol-version of the HTTP header. */
end_comment
begin_comment
comment|/*!         Constructs an empty HTTP header. */
end_comment
begin_constructor
DECL|function|QHttpHeader
name|QHttpHeader
operator|::
name|QHttpHeader
parameter_list|()
member_init_list|:
name|d_ptr
argument_list|(
operator|new
name|QHttpHeaderPrivate
argument_list|)
block|{
name|Q_D
argument_list|(
name|QHttpHeader
argument_list|)
expr_stmt|;
name|d
operator|->
name|q_ptr
operator|=
name|this
expr_stmt|;
name|d
operator|->
name|valid
operator|=
literal|true
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!         Constructs a copy of \a header. */
end_comment
begin_constructor
DECL|function|QHttpHeader
name|QHttpHeader
operator|::
name|QHttpHeader
parameter_list|(
specifier|const
name|QHttpHeader
modifier|&
name|header
parameter_list|)
member_init_list|:
name|d_ptr
argument_list|(
operator|new
name|QHttpHeaderPrivate
argument_list|)
block|{
name|Q_D
argument_list|(
name|QHttpHeader
argument_list|)
expr_stmt|;
name|d
operator|->
name|q_ptr
operator|=
name|this
expr_stmt|;
name|d
operator|->
name|valid
operator|=
name|header
operator|.
name|d_func
argument_list|()
operator|->
name|valid
expr_stmt|;
name|d
operator|->
name|values
operator|=
name|header
operator|.
name|d_func
argument_list|()
operator|->
name|values
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Constructs a HTTP header for \a str.      This constructor parses the string \a str for header fields and     adds this information. The \a str should consist of one or more     "\r\n" delimited lines; each of these lines should have the format     key, colon, space, value. */
end_comment
begin_constructor
DECL|function|QHttpHeader
name|QHttpHeader
operator|::
name|QHttpHeader
parameter_list|(
specifier|const
name|QString
modifier|&
name|str
parameter_list|)
member_init_list|:
name|d_ptr
argument_list|(
operator|new
name|QHttpHeaderPrivate
argument_list|)
block|{
name|Q_D
argument_list|(
name|QHttpHeader
argument_list|)
expr_stmt|;
name|d
operator|->
name|q_ptr
operator|=
name|this
expr_stmt|;
name|d
operator|->
name|valid
operator|=
literal|true
expr_stmt|;
name|parse
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*! \internal  */
end_comment
begin_constructor
DECL|function|QHttpHeader
name|QHttpHeader
operator|::
name|QHttpHeader
parameter_list|(
name|QHttpHeaderPrivate
modifier|&
name|dd
parameter_list|,
specifier|const
name|QString
modifier|&
name|str
parameter_list|)
member_init_list|:
name|d_ptr
argument_list|(
operator|&
name|dd
argument_list|)
block|{
name|Q_D
argument_list|(
name|QHttpHeader
argument_list|)
expr_stmt|;
name|d
operator|->
name|q_ptr
operator|=
name|this
expr_stmt|;
name|d
operator|->
name|valid
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|str
operator|.
name|isEmpty
argument_list|()
condition|)
name|parse
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*! \internal  */
end_comment
begin_constructor
DECL|function|QHttpHeader
name|QHttpHeader
operator|::
name|QHttpHeader
parameter_list|(
name|QHttpHeaderPrivate
modifier|&
name|dd
parameter_list|,
specifier|const
name|QHttpHeader
modifier|&
name|header
parameter_list|)
member_init_list|:
name|d_ptr
argument_list|(
operator|&
name|dd
argument_list|)
block|{
name|Q_D
argument_list|(
name|QHttpHeader
argument_list|)
expr_stmt|;
name|d
operator|->
name|q_ptr
operator|=
name|this
expr_stmt|;
name|d
operator|->
name|valid
operator|=
name|header
operator|.
name|d_func
argument_list|()
operator|->
name|valid
expr_stmt|;
name|d
operator|->
name|values
operator|=
name|header
operator|.
name|d_func
argument_list|()
operator|->
name|values
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Destructor. */
end_comment
begin_destructor
DECL|function|~QHttpHeader
name|QHttpHeader
operator|::
name|~
name|QHttpHeader
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     Assigns \a h and returns a reference to this http header. */
end_comment
begin_function
DECL|function|operator =
name|QHttpHeader
modifier|&
name|QHttpHeader
operator|::
name|operator
name|=
parameter_list|(
specifier|const
name|QHttpHeader
modifier|&
name|h
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QHttpHeader
argument_list|)
expr_stmt|;
name|d
operator|->
name|values
operator|=
name|h
operator|.
name|d_func
argument_list|()
operator|->
name|values
expr_stmt|;
name|d
operator|->
name|valid
operator|=
name|h
operator|.
name|d_func
argument_list|()
operator|->
name|valid
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_function
begin_comment
comment|/*!     Returns true if the HTTP header is valid; otherwise returns false.      A QHttpHeader is invalid if it was created by parsing a malformed string. */
end_comment
begin_function
DECL|function|isValid
name|bool
name|QHttpHeader
operator|::
name|isValid
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QHttpHeader
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|valid
return|;
block|}
end_function
begin_comment
comment|/*! \internal     Parses the HTTP header string \a str for header fields and adds     the keys/values it finds. If the string is not parsed successfully     the QHttpHeader becomes \link isValid() invalid\endlink.      Returns true if \a str was successfully parsed; otherwise returns false.      \sa toString() */
end_comment
begin_function
DECL|function|parse
name|bool
name|QHttpHeader
operator|::
name|parse
parameter_list|(
specifier|const
name|QString
modifier|&
name|str
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QHttpHeader
argument_list|)
expr_stmt|;
name|QStringList
name|lst
decl_stmt|;
name|int
name|pos
init|=
name|str
operator|.
name|indexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\n'
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|>
literal|0
operator|&&
name|str
operator|.
name|at
argument_list|(
name|pos
operator|-
literal|1
argument_list|)
operator|==
name|QLatin1Char
argument_list|(
literal|'\r'
argument_list|)
condition|)
name|lst
operator|=
name|str
operator|.
name|trimmed
argument_list|()
operator|.
name|split
argument_list|(
name|QLatin1String
argument_list|(
literal|"\r\n"
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|lst
operator|=
name|str
operator|.
name|trimmed
argument_list|()
operator|.
name|split
argument_list|(
name|QLatin1String
argument_list|(
literal|"\n"
argument_list|)
argument_list|)
expr_stmt|;
name|lst
operator|.
name|removeAll
argument_list|(
name|QString
argument_list|()
argument_list|)
expr_stmt|;
comment|// No empties
if|if
condition|(
name|lst
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|true
return|;
name|QStringList
name|lines
decl_stmt|;
name|QStringList
operator|::
name|Iterator
name|it
init|=
name|lst
operator|.
name|begin
argument_list|()
decl_stmt|;
for|for
control|(
init|;
name|it
operator|!=
name|lst
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
if|if
condition|(
operator|!
operator|(
operator|*
name|it
operator|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|(
operator|*
name|it
operator|)
index|[
literal|0
index|]
operator|.
name|isSpace
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|lines
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|lines
operator|.
name|last
argument_list|()
operator|+=
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|lines
operator|.
name|last
argument_list|()
operator|+=
operator|(
operator|*
name|it
operator|)
operator|.
name|trimmed
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|lines
operator|.
name|append
argument_list|(
operator|(
operator|*
name|it
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|int
name|number
init|=
literal|0
decl_stmt|;
name|it
operator|=
name|lines
operator|.
name|begin
argument_list|()
expr_stmt|;
for|for
control|(
init|;
name|it
operator|!=
name|lines
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
if|if
condition|(
operator|!
name|parseLine
argument_list|(
operator|*
name|it
argument_list|,
name|number
operator|++
argument_list|)
condition|)
block|{
name|d
operator|->
name|valid
operator|=
literal|false
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/*! \internal */
end_comment
begin_function
DECL|function|setValid
name|void
name|QHttpHeader
operator|::
name|setValid
parameter_list|(
name|bool
name|v
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QHttpHeader
argument_list|)
expr_stmt|;
name|d
operator|->
name|valid
operator|=
name|v
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the first value for the entry with the given \a key. If no entry     has this \a key, an empty string is returned.      \sa setValue() removeValue() hasKey() keys() */
end_comment
begin_function
DECL|function|value
name|QString
name|QHttpHeader
operator|::
name|value
parameter_list|(
specifier|const
name|QString
modifier|&
name|key
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QHttpHeader
argument_list|)
expr_stmt|;
name|QString
name|lowercaseKey
init|=
name|key
operator|.
name|toLower
argument_list|()
decl_stmt|;
name|QList
argument_list|<
name|QPair
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
argument_list|>
operator|::
name|ConstIterator
name|it
init|=
name|d
operator|->
name|values
operator|.
name|constBegin
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|d
operator|->
name|values
operator|.
name|constEnd
argument_list|()
condition|)
block|{
if|if
condition|(
operator|(
operator|*
name|it
operator|)
operator|.
name|first
operator|.
name|toLower
argument_list|()
operator|==
name|lowercaseKey
condition|)
return|return
operator|(
operator|*
name|it
operator|)
operator|.
name|second
return|;
operator|++
name|it
expr_stmt|;
block|}
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns all the entries with the given \a key. If no entry     has this \a key, an empty string list is returned. */
end_comment
begin_function
DECL|function|allValues
name|QStringList
name|QHttpHeader
operator|::
name|allValues
parameter_list|(
specifier|const
name|QString
modifier|&
name|key
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QHttpHeader
argument_list|)
expr_stmt|;
name|QString
name|lowercaseKey
init|=
name|key
operator|.
name|toLower
argument_list|()
decl_stmt|;
name|QStringList
name|valueList
decl_stmt|;
name|QList
argument_list|<
name|QPair
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
argument_list|>
operator|::
name|ConstIterator
name|it
init|=
name|d
operator|->
name|values
operator|.
name|constBegin
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|d
operator|->
name|values
operator|.
name|constEnd
argument_list|()
condition|)
block|{
if|if
condition|(
operator|(
operator|*
name|it
operator|)
operator|.
name|first
operator|.
name|toLower
argument_list|()
operator|==
name|lowercaseKey
condition|)
name|valueList
operator|.
name|append
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|.
name|second
argument_list|)
expr_stmt|;
operator|++
name|it
expr_stmt|;
block|}
return|return
name|valueList
return|;
block|}
end_function
begin_comment
comment|/*!     Returns a list of the keys in the HTTP header.      \sa hasKey() */
end_comment
begin_function
DECL|function|keys
name|QStringList
name|QHttpHeader
operator|::
name|keys
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QHttpHeader
argument_list|)
expr_stmt|;
name|QStringList
name|keyList
decl_stmt|;
name|QSet
argument_list|<
name|QString
argument_list|>
name|seenKeys
decl_stmt|;
name|QList
argument_list|<
name|QPair
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
argument_list|>
operator|::
name|ConstIterator
name|it
init|=
name|d
operator|->
name|values
operator|.
name|constBegin
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|d
operator|->
name|values
operator|.
name|constEnd
argument_list|()
condition|)
block|{
specifier|const
name|QString
modifier|&
name|key
init|=
operator|(
operator|*
name|it
operator|)
operator|.
name|first
decl_stmt|;
name|QString
name|lowercaseKey
init|=
name|key
operator|.
name|toLower
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|seenKeys
operator|.
name|contains
argument_list|(
name|lowercaseKey
argument_list|)
condition|)
block|{
name|keyList
operator|.
name|append
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|seenKeys
operator|.
name|insert
argument_list|(
name|lowercaseKey
argument_list|)
expr_stmt|;
block|}
operator|++
name|it
expr_stmt|;
block|}
return|return
name|keyList
return|;
block|}
end_function
begin_comment
comment|/*!     Returns true if the HTTP header has an entry with the given \a     key; otherwise returns false.      \sa value() setValue() keys() */
end_comment
begin_function
DECL|function|hasKey
name|bool
name|QHttpHeader
operator|::
name|hasKey
parameter_list|(
specifier|const
name|QString
modifier|&
name|key
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QHttpHeader
argument_list|)
expr_stmt|;
name|QString
name|lowercaseKey
init|=
name|key
operator|.
name|toLower
argument_list|()
decl_stmt|;
name|QList
argument_list|<
name|QPair
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
argument_list|>
operator|::
name|ConstIterator
name|it
init|=
name|d
operator|->
name|values
operator|.
name|constBegin
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|d
operator|->
name|values
operator|.
name|constEnd
argument_list|()
condition|)
block|{
if|if
condition|(
operator|(
operator|*
name|it
operator|)
operator|.
name|first
operator|.
name|toLower
argument_list|()
operator|==
name|lowercaseKey
condition|)
return|return
literal|true
return|;
operator|++
name|it
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the value of the entry with the \a key to \a value.      If no entry with \a key exists, a new entry with the given \a key     and \a value is created. If an entry with the \a key already     exists, the first value is discarded and replaced with the given     \a value.      \sa value() hasKey() removeValue() */
end_comment
begin_function
DECL|function|setValue
name|void
name|QHttpHeader
operator|::
name|setValue
parameter_list|(
specifier|const
name|QString
modifier|&
name|key
parameter_list|,
specifier|const
name|QString
modifier|&
name|value
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QHttpHeader
argument_list|)
expr_stmt|;
name|QString
name|lowercaseKey
init|=
name|key
operator|.
name|toLower
argument_list|()
decl_stmt|;
name|QList
argument_list|<
name|QPair
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
argument_list|>
operator|::
name|Iterator
name|it
init|=
name|d
operator|->
name|values
operator|.
name|begin
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|d
operator|->
name|values
operator|.
name|end
argument_list|()
condition|)
block|{
if|if
condition|(
operator|(
operator|*
name|it
operator|)
operator|.
name|first
operator|.
name|toLower
argument_list|()
operator|==
name|lowercaseKey
condition|)
block|{
operator|(
operator|*
name|it
operator|)
operator|.
name|second
operator|=
name|value
expr_stmt|;
return|return;
block|}
operator|++
name|it
expr_stmt|;
block|}
comment|// not found so add
name|addValue
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the header entries to be the list of key value pairs in \a values. */
end_comment
begin_function
DECL|function|setValues
name|void
name|QHttpHeader
operator|::
name|setValues
parameter_list|(
specifier|const
name|QList
argument_list|<
name|QPair
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
argument_list|>
modifier|&
name|values
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QHttpHeader
argument_list|)
expr_stmt|;
name|d
operator|->
name|values
operator|=
name|values
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Adds a new entry with the \a key and \a value. */
end_comment
begin_function
DECL|function|addValue
name|void
name|QHttpHeader
operator|::
name|addValue
parameter_list|(
specifier|const
name|QString
modifier|&
name|key
parameter_list|,
specifier|const
name|QString
modifier|&
name|value
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QHttpHeader
argument_list|)
expr_stmt|;
name|d
operator|->
name|values
operator|.
name|append
argument_list|(
name|qMakePair
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns all the entries in the header. */
end_comment
begin_function
DECL|function|values
name|QList
argument_list|<
name|QPair
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
argument_list|>
name|QHttpHeader
operator|::
name|values
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QHttpHeader
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|values
return|;
block|}
end_function
begin_comment
comment|/*!     Removes the entry with the key \a key from the HTTP header.      \sa value() setValue() */
end_comment
begin_function
DECL|function|removeValue
name|void
name|QHttpHeader
operator|::
name|removeValue
parameter_list|(
specifier|const
name|QString
modifier|&
name|key
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QHttpHeader
argument_list|)
expr_stmt|;
name|QString
name|lowercaseKey
init|=
name|key
operator|.
name|toLower
argument_list|()
decl_stmt|;
name|QList
argument_list|<
name|QPair
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
argument_list|>
operator|::
name|Iterator
name|it
init|=
name|d
operator|->
name|values
operator|.
name|begin
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|d
operator|->
name|values
operator|.
name|end
argument_list|()
condition|)
block|{
if|if
condition|(
operator|(
operator|*
name|it
operator|)
operator|.
name|first
operator|.
name|toLower
argument_list|()
operator|==
name|lowercaseKey
condition|)
block|{
name|d
operator|->
name|values
operator|.
name|erase
argument_list|(
name|it
argument_list|)
expr_stmt|;
return|return;
block|}
operator|++
name|it
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     Removes all the entries with the key \a key from the HTTP header. */
end_comment
begin_function
DECL|function|removeAllValues
name|void
name|QHttpHeader
operator|::
name|removeAllValues
parameter_list|(
specifier|const
name|QString
modifier|&
name|key
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QHttpHeader
argument_list|)
expr_stmt|;
name|QString
name|lowercaseKey
init|=
name|key
operator|.
name|toLower
argument_list|()
decl_stmt|;
name|QList
argument_list|<
name|QPair
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
argument_list|>
operator|::
name|Iterator
name|it
init|=
name|d
operator|->
name|values
operator|.
name|begin
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|d
operator|->
name|values
operator|.
name|end
argument_list|()
condition|)
block|{
if|if
condition|(
operator|(
operator|*
name|it
operator|)
operator|.
name|first
operator|.
name|toLower
argument_list|()
operator|==
name|lowercaseKey
condition|)
block|{
name|it
operator|=
name|d
operator|->
name|values
operator|.
name|erase
argument_list|(
name|it
argument_list|)
expr_stmt|;
continue|continue;
block|}
operator|++
name|it
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*! \internal     Parses the single HTTP header line \a line which has the format     key, colon, space, value, and adds key/value to the headers. The     linenumber is \a number. Returns true if the line was successfully     parsed and the key/value added; otherwise returns false.      \sa parse() */
end_comment
begin_function
DECL|function|parseLine
name|bool
name|QHttpHeader
operator|::
name|parseLine
parameter_list|(
specifier|const
name|QString
modifier|&
name|line
parameter_list|,
name|int
parameter_list|)
block|{
name|int
name|i
init|=
name|line
operator|.
name|indexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|==
operator|-
literal|1
condition|)
return|return
literal|false
return|;
name|addValue
argument_list|(
name|line
operator|.
name|left
argument_list|(
name|i
argument_list|)
operator|.
name|trimmed
argument_list|()
argument_list|,
name|line
operator|.
name|mid
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|.
name|trimmed
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/*!     Returns a string representation of the HTTP header.      The string is suitable for use by the constructor that takes a     QString. It consists of lines with the format: key, colon, space,     value, "\r\n". */
end_comment
begin_function
DECL|function|toString
name|QString
name|QHttpHeader
operator|::
name|toString
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QHttpHeader
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isValid
argument_list|()
condition|)
return|return
name|QLatin1String
argument_list|(
literal|""
argument_list|)
return|;
name|QString
name|ret
init|=
name|QLatin1String
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|QPair
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
argument_list|>
operator|::
name|ConstIterator
name|it
init|=
name|d
operator|->
name|values
operator|.
name|constBegin
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|d
operator|->
name|values
operator|.
name|constEnd
argument_list|()
condition|)
block|{
name|ret
operator|+=
operator|(
operator|*
name|it
operator|)
operator|.
name|first
operator|+
name|QLatin1String
argument_list|(
literal|": "
argument_list|)
operator|+
operator|(
operator|*
name|it
operator|)
operator|.
name|second
operator|+
name|QLatin1String
argument_list|(
literal|"\r\n"
argument_list|)
expr_stmt|;
operator|++
name|it
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
end_function
begin_comment
comment|/*!     Returns true if the header has an entry for the special HTTP     header field \c content-length; otherwise returns false.      \sa contentLength() setContentLength() */
end_comment
begin_function
DECL|function|hasContentLength
name|bool
name|QHttpHeader
operator|::
name|hasContentLength
parameter_list|()
specifier|const
block|{
return|return
name|hasKey
argument_list|(
name|QLatin1String
argument_list|(
literal|"content-length"
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the value of the special HTTP header field \c     content-length.      \sa setContentLength() hasContentLength() */
end_comment
begin_function
DECL|function|contentLength
name|uint
name|QHttpHeader
operator|::
name|contentLength
parameter_list|()
specifier|const
block|{
return|return
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"content-length"
argument_list|)
argument_list|)
operator|.
name|toUInt
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the value of the special HTTP header field \c content-length     to \a len.      \sa contentLength() hasContentLength() */
end_comment
begin_function
DECL|function|setContentLength
name|void
name|QHttpHeader
operator|::
name|setContentLength
parameter_list|(
name|int
name|len
parameter_list|)
block|{
name|setValue
argument_list|(
name|QLatin1String
argument_list|(
literal|"content-length"
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|len
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns true if the header has an entry for the special HTTP     header field \c content-type; otherwise returns false.      \sa contentType() setContentType() */
end_comment
begin_function
DECL|function|hasContentType
name|bool
name|QHttpHeader
operator|::
name|hasContentType
parameter_list|()
specifier|const
block|{
return|return
name|hasKey
argument_list|(
name|QLatin1String
argument_list|(
literal|"content-type"
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the value of the special HTTP header field \c content-type.      \sa setContentType() hasContentType() */
end_comment
begin_function
DECL|function|contentType
name|QString
name|QHttpHeader
operator|::
name|contentType
parameter_list|()
specifier|const
block|{
name|QString
name|type
init|=
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"content-type"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|QString
argument_list|()
return|;
name|int
name|pos
init|=
name|type
operator|.
name|indexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|';'
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|==
operator|-
literal|1
condition|)
return|return
name|type
return|;
return|return
name|type
operator|.
name|left
argument_list|(
name|pos
argument_list|)
operator|.
name|trimmed
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the value of the special HTTP header field \c content-type to     \a type.      \sa contentType() hasContentType() */
end_comment
begin_function
DECL|function|setContentType
name|void
name|QHttpHeader
operator|::
name|setContentType
parameter_list|(
specifier|const
name|QString
modifier|&
name|type
parameter_list|)
block|{
name|setValue
argument_list|(
name|QLatin1String
argument_list|(
literal|"content-type"
argument_list|)
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|QHttpResponseHeaderPrivate
class|class
name|QHttpResponseHeaderPrivate
super|:
specifier|public
name|QHttpHeaderPrivate
block|{
name|Q_DECLARE_PUBLIC
parameter_list|(
name|QHttpResponseHeader
parameter_list|)
specifier|public
private|:
DECL|member|statCode
name|int
name|statCode
decl_stmt|;
DECL|member|reasonPhr
name|QString
name|reasonPhr
decl_stmt|;
DECL|member|majVer
name|int
name|majVer
decl_stmt|;
DECL|member|minVer
name|int
name|minVer
decl_stmt|;
block|}
class|;
end_class
begin_comment
comment|/****************************************************  *  * QHttpResponseHeader  *  ****************************************************/
end_comment
begin_comment
comment|/*!     \class QHttpResponseHeader     \obsolete     \brief The QHttpResponseHeader class contains response header information for HTTP.      \ingroup network     \inmodule QtNetwork      HTTP responses have a status code that indicates the status of the     response. This code is a 3-digit integer result code (for details     see to RFC 1945). In addition to the status code, you can also     specify a human-readable text that describes the reason for the     code ("reason phrase"). This class allows you to get the status     code and the reason phrase.      \sa QHttpRequestHeader, {HTTP Example} */
end_comment
begin_comment
comment|/*!     Constructs an empty HTTP response header. */
end_comment
begin_constructor
DECL|function|QHttpResponseHeader
name|QHttpResponseHeader
operator|::
name|QHttpResponseHeader
parameter_list|()
member_init_list|:
name|QHttpHeader
argument_list|(
operator|*
operator|new
name|QHttpResponseHeaderPrivate
argument_list|)
block|{
name|setValid
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Constructs a copy of \a header. */
end_comment
begin_constructor
DECL|function|QHttpResponseHeader
name|QHttpResponseHeader
operator|::
name|QHttpResponseHeader
parameter_list|(
specifier|const
name|QHttpResponseHeader
modifier|&
name|header
parameter_list|)
member_init_list|:
name|QHttpHeader
argument_list|(
operator|*
operator|new
name|QHttpResponseHeaderPrivate
argument_list|,
name|header
argument_list|)
block|{
name|Q_D
argument_list|(
name|QHttpResponseHeader
argument_list|)
expr_stmt|;
name|d
operator|->
name|statCode
operator|=
name|header
operator|.
name|d_func
argument_list|()
operator|->
name|statCode
expr_stmt|;
name|d
operator|->
name|reasonPhr
operator|=
name|header
operator|.
name|d_func
argument_list|()
operator|->
name|reasonPhr
expr_stmt|;
name|d
operator|->
name|majVer
operator|=
name|header
operator|.
name|d_func
argument_list|()
operator|->
name|majVer
expr_stmt|;
name|d
operator|->
name|minVer
operator|=
name|header
operator|.
name|d_func
argument_list|()
operator|->
name|minVer
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Copies the contents of \a header into this QHttpResponseHeader. */
end_comment
begin_function
DECL|function|operator =
name|QHttpResponseHeader
modifier|&
name|QHttpResponseHeader
operator|::
name|operator
name|=
parameter_list|(
specifier|const
name|QHttpResponseHeader
modifier|&
name|header
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QHttpResponseHeader
argument_list|)
expr_stmt|;
name|QHttpHeader
operator|::
name|operator
name|=
parameter_list|(
name|header
parameter_list|)
function_decl|;
name|d
operator|->
name|statCode
operator|=
name|header
operator|.
name|d_func
argument_list|()
operator|->
name|statCode
expr_stmt|;
name|d
operator|->
name|reasonPhr
operator|=
name|header
operator|.
name|d_func
argument_list|()
operator|->
name|reasonPhr
expr_stmt|;
name|d
operator|->
name|majVer
operator|=
name|header
operator|.
name|d_func
argument_list|()
operator|->
name|majVer
expr_stmt|;
name|d
operator|->
name|minVer
operator|=
name|header
operator|.
name|d_func
argument_list|()
operator|->
name|minVer
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_function
begin_comment
comment|/*!     Constructs a HTTP response header from the string \a str. The     string is parsed and the information is set. The \a str should     consist of one or more "\r\n" delimited lines; the first line should be the     status-line (format: HTTP-version, space, status-code, space,     reason-phrase); each of remaining lines should have the format key, colon,     space, value. */
end_comment
begin_constructor
DECL|function|QHttpResponseHeader
name|QHttpResponseHeader
operator|::
name|QHttpResponseHeader
parameter_list|(
specifier|const
name|QString
modifier|&
name|str
parameter_list|)
member_init_list|:
name|QHttpHeader
argument_list|(
operator|*
operator|new
name|QHttpResponseHeaderPrivate
argument_list|)
block|{
name|parse
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     \since 4.1      Constructs a QHttpResponseHeader, setting the status code to \a code, the     reason phrase to \a text and the protocol-version to \a majorVer and \a     minorVer.      \sa statusCode() reasonPhrase() majorVersion() minorVersion() */
end_comment
begin_constructor
DECL|function|QHttpResponseHeader
name|QHttpResponseHeader
operator|::
name|QHttpResponseHeader
parameter_list|(
name|int
name|code
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|int
name|majorVer
parameter_list|,
name|int
name|minorVer
parameter_list|)
member_init_list|:
name|QHttpHeader
argument_list|(
operator|*
operator|new
name|QHttpResponseHeaderPrivate
argument_list|)
block|{
name|setStatusLine
argument_list|(
name|code
argument_list|,
name|text
argument_list|,
name|majorVer
argument_list|,
name|minorVer
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     \since 4.1      Sets the status code to \a code, the reason phrase to \a text and     the protocol-version to \a majorVer and \a minorVer.      \sa statusCode() reasonPhrase() majorVersion() minorVersion() */
end_comment
begin_function
DECL|function|setStatusLine
name|void
name|QHttpResponseHeader
operator|::
name|setStatusLine
parameter_list|(
name|int
name|code
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|int
name|majorVer
parameter_list|,
name|int
name|minorVer
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QHttpResponseHeader
argument_list|)
expr_stmt|;
name|setValid
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|d
operator|->
name|statCode
operator|=
name|code
expr_stmt|;
name|d
operator|->
name|reasonPhr
operator|=
name|text
expr_stmt|;
name|d
operator|->
name|majVer
operator|=
name|majorVer
expr_stmt|;
name|d
operator|->
name|minVer
operator|=
name|minorVer
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the status code of the HTTP response header.      \sa reasonPhrase() majorVersion() minorVersion() */
end_comment
begin_function
DECL|function|statusCode
name|int
name|QHttpResponseHeader
operator|::
name|statusCode
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QHttpResponseHeader
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|statCode
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the reason phrase of the HTTP response header.      \sa statusCode() majorVersion() minorVersion() */
end_comment
begin_function
DECL|function|reasonPhrase
name|QString
name|QHttpResponseHeader
operator|::
name|reasonPhrase
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QHttpResponseHeader
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|reasonPhr
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the major protocol-version of the HTTP response header.      \sa minorVersion() statusCode() reasonPhrase() */
end_comment
begin_function
DECL|function|majorVersion
name|int
name|QHttpResponseHeader
operator|::
name|majorVersion
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QHttpResponseHeader
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|majVer
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the minor protocol-version of the HTTP response header.      \sa majorVersion() statusCode() reasonPhrase() */
end_comment
begin_function
DECL|function|minorVersion
name|int
name|QHttpResponseHeader
operator|::
name|minorVersion
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QHttpResponseHeader
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|minVer
return|;
block|}
end_function
begin_comment
comment|/*! \internal */
end_comment
begin_function
DECL|function|parseLine
name|bool
name|QHttpResponseHeader
operator|::
name|parseLine
parameter_list|(
specifier|const
name|QString
modifier|&
name|line
parameter_list|,
name|int
name|number
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QHttpResponseHeader
argument_list|)
expr_stmt|;
if|if
condition|(
name|number
operator|!=
literal|0
condition|)
return|return
name|QHttpHeader
operator|::
name|parseLine
argument_list|(
name|line
argument_list|,
name|number
argument_list|)
return|;
name|QString
name|l
init|=
name|line
operator|.
name|simplified
argument_list|()
decl_stmt|;
if|if
condition|(
name|l
operator|.
name|length
argument_list|()
operator|<
literal|10
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|l
operator|.
name|left
argument_list|(
literal|5
argument_list|)
operator|==
name|QLatin1String
argument_list|(
literal|"HTTP/"
argument_list|)
operator|&&
name|l
index|[
literal|5
index|]
operator|.
name|isDigit
argument_list|()
operator|&&
name|l
index|[
literal|6
index|]
operator|==
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
operator|&&
name|l
index|[
literal|7
index|]
operator|.
name|isDigit
argument_list|()
operator|&&
name|l
index|[
literal|8
index|]
operator|==
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
operator|&&
name|l
index|[
literal|9
index|]
operator|.
name|isDigit
argument_list|()
condition|)
block|{
name|d
operator|->
name|majVer
operator|=
name|l
index|[
literal|5
index|]
operator|.
name|toLatin1
argument_list|()
operator|-
literal|'0'
expr_stmt|;
name|d
operator|->
name|minVer
operator|=
name|l
index|[
literal|7
index|]
operator|.
name|toLatin1
argument_list|()
operator|-
literal|'0'
expr_stmt|;
name|int
name|pos
init|=
name|l
operator|.
name|indexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
argument_list|,
literal|9
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|!=
operator|-
literal|1
condition|)
block|{
name|d
operator|->
name|reasonPhr
operator|=
name|l
operator|.
name|mid
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
expr_stmt|;
name|d
operator|->
name|statCode
operator|=
name|l
operator|.
name|mid
argument_list|(
literal|9
argument_list|,
name|pos
operator|-
literal|9
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|statCode
operator|=
name|l
operator|.
name|mid
argument_list|(
literal|9
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
name|d
operator|->
name|reasonPhr
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|toString
name|QString
name|QHttpResponseHeader
operator|::
name|toString
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QHttpResponseHeader
argument_list|)
expr_stmt|;
name|QString
name|ret
argument_list|(
name|QLatin1String
argument_list|(
literal|"HTTP/%1.%2 %3 %4\r\n%5\r\n"
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|ret
operator|.
name|arg
argument_list|(
name|d
operator|->
name|majVer
argument_list|)
operator|.
name|arg
argument_list|(
name|d
operator|->
name|minVer
argument_list|)
operator|.
name|arg
argument_list|(
name|d
operator|->
name|statCode
argument_list|)
operator|.
name|arg
argument_list|(
name|d
operator|->
name|reasonPhr
argument_list|)
operator|.
name|arg
argument_list|(
name|QHttpHeader
operator|::
name|toString
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
end_unit
