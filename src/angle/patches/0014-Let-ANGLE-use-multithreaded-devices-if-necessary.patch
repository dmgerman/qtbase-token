From a3046fef7f754f06937161e779ce0a651e77317b Mon Sep 17 00:00:00 2001
From: Michael Bruning <michael.bruning@digia.com>
Date: Mon, 22 Sep 2014 23:23:40 +0300
Subject: [PATCH 14/16] Let ANGLE use multithreaded devices if necessary.

This is needed to prevent lock-ups in application that use ANGLE from
multiple threads, as e.g. QtWebEngine based applications do.

The environment variable QT_D3DCREATE_MULTITHREADED is used to
communicate this from the QtWebEngine module.

Change-Id: Ibd5a5c75eb68af567d420d9a35efb3490c93b27c
---
 src/3rdparty/angle/src/common/platform.h                    |  1 +
 .../angle/src/libGLESv2/renderer/d3d/d3d11/Renderer11.cpp   | 13 +++++++++++++
 .../angle/src/libGLESv2/renderer/d3d/d3d9/Renderer9.cpp     |  4 ++++
 3 files changed, 18 insertions(+)

diff --git a/src/3rdparty/angle/src/common/platform.h b/src/3rdparty/angle/src/common/platform.h
index 387ba41..7d0d957 100644
--- a/src/3rdparty/angle/src/common/platform.h
+++ b/src/3rdparty/angle/src/common/platform.h
@@ -57,6 +57,7 @@
 
 #   if defined(ANGLE_ENABLE_D3D11)
 #       include <d3d10_1.h>
+#       include <d3d10.h>
 #       include <d3d11.h>
 #       include <dxgi.h>
 #       include <dxgi1_2.h>
diff --git a/src/3rdparty/angle/src/libGLESv2/renderer/d3d/d3d11/Renderer11.cpp b/src/3rdparty/angle/src/libGLESv2/renderer/d3d/d3d11/Renderer11.cpp
index b4b26a8..bd07ee1 100644
--- a/src/3rdparty/angle/src/libGLESv2/renderer/d3d/d3d11/Renderer11.cpp
+++ b/src/3rdparty/angle/src/libGLESv2/renderer/d3d/d3d11/Renderer11.cpp
@@ -301,6 +301,19 @@ EGLint Renderer11::initialize()
     }
 #endif
 
+#if !defined(ANGLE_PLATFORM_WINRT)
+    static wchar_t *qt_d3dcreate_multihreaded_var = _wgetenv(L"QT_D3DCREATE_MULTITHREADED");
+    if (qt_d3dcreate_multihreaded_var && wcsstr(qt_d3dcreate_multihreaded_var, L"1"))
+    {
+        ID3D10Multithread *multithread;
+        result = mDevice->QueryInterface(IID_PPV_ARGS(&multithread));
+        ASSERT(SUCCEEDED(result));
+        result = multithread->SetMultithreadProtected(true);
+        ASSERT(SUCCEEDED(result));
+        multithread->Release();
+    }
+#endif
+
     initializeDevice();
 
     return EGL_SUCCESS;
diff --git a/src/3rdparty/angle/src/libGLESv2/renderer/d3d/d3d9/Renderer9.cpp b/src/3rdparty/angle/src/libGLESv2/renderer/d3d/d3d9/Renderer9.cpp
index e8564bd..1d52705 100644
--- a/src/3rdparty/angle/src/libGLESv2/renderer/d3d/d3d9/Renderer9.cpp
+++ b/src/3rdparty/angle/src/libGLESv2/renderer/d3d/d3d9/Renderer9.cpp
@@ -304,6 +304,10 @@ EGLint Renderer9::initialize()
     D3DPRESENT_PARAMETERS presentParameters = getDefaultPresentParameters();
     DWORD behaviorFlags = D3DCREATE_FPU_PRESERVE | D3DCREATE_NOWINDOWCHANGES;
 
+    static wchar_t *qt_d3dcreate_multihreaded_var = _wgetenv(L"QT_D3DCREATE_MULTITHREADED");
+    if (qt_d3dcreate_multihreaded_var && wcsstr(qt_d3dcreate_multihreaded_var, L"1"))
+        behaviorFlags |= D3DCREATE_MULTITHREADED;
+
     {
         result = mD3d9->CreateDevice(mAdapter, mDeviceType, mDeviceWindow, behaviorFlags | D3DCREATE_HARDWARE_VERTEXPROCESSING | D3DCREATE_PUREDEVICE, &presentParameters, &mDevice);
     }
-- 
1.9.0.msysgit.0

