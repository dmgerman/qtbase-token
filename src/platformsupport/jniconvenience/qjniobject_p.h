begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QJNIOBJECT_H
end_ifndef
begin_define
DECL|macro|QJNIOBJECT_H
define|#
directive|define
name|QJNIOBJECT_H
end_define
begin_include
include|#
directive|include
file|<qglobal.h>
end_include
begin_include
include|#
directive|include
file|<qsharedpointer.h>
end_include
begin_include
include|#
directive|include
file|<jni.h>
end_include
begin_expr_stmt
name|QT_BEGIN_NAMESPACE
name|template
operator|<
name|typename
name|T
operator|>
DECL|variable|QJNILocalRef
name|class
name|QJNILocalRef
expr_stmt|;
end_expr_stmt
begin_comment
comment|/**  * Allows to wrap any Java class and partially hide some of the jni calls.  *  * Usage example:  *  *    QJNIObject javaString("java/lang/String");  *    jchar char = javaString.callMethod<jchar>("charAt", "(I)C", 0);  *  *    ----  *  *    jstring string = QJNIObject::callStaticMethod<jstring>("java/lang/String",  *                                                           "valueOf",  *                                                           "(I)Ljava/lang/String;", 2);  *  *    ----  *  *    // Constructor with argument  *    jstring someString;  *    QJNIObject someObject("java/some/Class", "(Ljava/lang/String;)V", someString);  *    someObject.setField<jint>("fieldName", 10);  *    someObject.callMethod<void>("doStuff");  */
end_comment
begin_decl_stmt
name|class
name|QJNIObjectPrivate
block|{
name|public
label|:
name|QJNIObjectPrivate
argument_list|(
specifier|const
name|char
operator|*
name|className
argument_list|)
expr_stmt|;
name|QJNIObjectPrivate
argument_list|(
argument|const char *className
argument_list|,
argument|const char *sig
argument_list|,
argument|va_list args
argument_list|)
empty_stmt|;
name|QJNIObjectPrivate
argument_list|(
argument|jclass clazz
argument_list|)
empty_stmt|;
name|QJNIObjectPrivate
argument_list|(
argument|jclass clazz
argument_list|,
argument|const char *sig
argument_list|,
argument|va_list args
argument_list|)
empty_stmt|;
name|QJNIObjectPrivate
argument_list|(
argument|jobject obj
argument_list|)
empty_stmt|;
operator|~
name|QJNIObjectPrivate
argument_list|()
expr_stmt|;
name|private
label|:
name|Q_DISABLE_COPY
argument_list|(
argument|QJNIObjectPrivate
argument_list|)
name|friend
name|class
name|QJNIObject
decl_stmt|;
name|jobject
name|m_jobject
decl_stmt|;
name|jclass
name|m_jclass
decl_stmt|;
name|bool
name|m_own_jclass
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
name|class
name|QJNIObject
block|{
name|public
label|:
name|QJNIObject
argument_list|(
specifier|const
name|char
operator|*
name|className
argument_list|)
operator|:
name|d
argument_list|(
argument|new QJNIObjectPrivate(className)
argument_list|)
block|{ }
name|QJNIObject
argument_list|(
specifier|const
name|char
operator|*
name|className
argument_list|,
specifier|const
name|char
operator|*
name|sig
argument_list|,
operator|...
argument_list|)
expr_stmt|;
name|QJNIObject
argument_list|(
argument|jclass clazz
argument_list|)
block|:
name|d
argument_list|(
argument|new QJNIObjectPrivate(clazz)
argument_list|)
block|{ }
name|QJNIObject
argument_list|(
argument|jclass clazz
argument_list|,
argument|const char *sig
argument_list|,
argument|...
argument_list|)
empty_stmt|;
name|QJNIObject
argument_list|(
argument|jobject obj
argument_list|)
block|:
name|d
argument_list|(
argument|new QJNIObjectPrivate(obj)
argument_list|)
block|{ }
name|virtual
operator|~
name|QJNIObject
argument_list|()
block|{ }
specifier|static
name|bool
name|isClassAvailable
argument_list|(
specifier|const
name|char
operator|*
name|className
argument_list|)
expr_stmt|;
name|bool
name|isValid
argument_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|m_jobject
operator|!=
literal|0
return|;
block|}
name|jobject
name|object
argument_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|m_jobject
return|;
block|}
name|template
operator|<
name|typename
name|T
operator|>
name|T
name|callMethod
argument_list|(
specifier|const
name|char
operator|*
name|methodName
argument_list|)
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|>
name|T
name|callMethod
argument_list|(
specifier|const
name|char
operator|*
name|methodName
argument_list|,
specifier|const
name|char
operator|*
name|sig
argument_list|,
operator|...
argument_list|)
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|>
name|QJNILocalRef
operator|<
name|T
operator|>
name|callObjectMethod
argument_list|(
specifier|const
name|char
operator|*
name|methodName
argument_list|)
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|>
name|QJNILocalRef
operator|<
name|T
operator|>
name|callObjectMethod
argument_list|(
specifier|const
name|char
operator|*
name|methodName
argument_list|,
specifier|const
name|char
operator|*
name|sig
argument_list|,
operator|...
argument_list|)
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
name|T
name|callStaticMethod
argument_list|(
specifier|const
name|char
operator|*
name|className
argument_list|,
specifier|const
name|char
operator|*
name|methodName
argument_list|)
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
name|T
name|callStaticMethod
argument_list|(
specifier|const
name|char
operator|*
name|className
argument_list|,
specifier|const
name|char
operator|*
name|methodName
argument_list|,
specifier|const
name|char
operator|*
name|sig
argument_list|,
operator|...
argument_list|)
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
name|QJNILocalRef
operator|<
name|T
operator|>
name|callStaticObjectMethod
argument_list|(
specifier|const
name|char
operator|*
name|className
argument_list|,
specifier|const
name|char
operator|*
name|methodName
argument_list|)
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
name|QJNILocalRef
operator|<
name|T
operator|>
name|callStaticObjectMethod
argument_list|(
specifier|const
name|char
operator|*
name|className
argument_list|,
specifier|const
name|char
operator|*
name|methodName
argument_list|,
specifier|const
name|char
operator|*
name|sig
argument_list|,
operator|...
argument_list|)
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
name|T
name|callStaticMethod
argument_list|(
argument|jclass clazz
argument_list|,
argument|const char *methodName
argument_list|)
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
name|T
name|callStaticMethod
argument_list|(
argument|jclass clazz
argument_list|,
argument|const char *methodName
argument_list|,
argument|const char *sig
argument_list|,
argument|...
argument_list|)
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
name|QJNILocalRef
operator|<
name|T
operator|>
name|callStaticObjectMethod
argument_list|(
argument|jclass clazz
argument_list|,
argument|const char *methodName
argument_list|)
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
name|QJNILocalRef
operator|<
name|T
operator|>
name|callStaticObjectMethod
argument_list|(
argument|jclass clazz
argument_list|,
argument|const char *methodName
argument_list|,
argument|const char *sig
argument_list|,
argument|...
argument_list|)
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|>
name|T
name|getField
argument_list|(
specifier|const
name|char
operator|*
name|fieldName
argument_list|)
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|>
name|T
name|getField
argument_list|(
specifier|const
name|char
operator|*
name|fieldName
argument_list|,
specifier|const
name|char
operator|*
name|sig
argument_list|)
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|>
name|QJNILocalRef
operator|<
name|T
operator|>
name|getObjectField
argument_list|(
specifier|const
name|char
operator|*
name|fieldName
argument_list|)
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|>
name|QJNILocalRef
operator|<
name|T
operator|>
name|getObjectField
argument_list|(
specifier|const
name|char
operator|*
name|fieldName
argument_list|,
specifier|const
name|char
operator|*
name|sig
argument_list|)
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|>
name|void
name|setField
argument_list|(
argument|const char *fieldName
argument_list|,
argument|T value
argument_list|)
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|>
name|void
name|setField
argument_list|(
argument|const char *fieldName
argument_list|,
argument|const char *sig
argument_list|,
argument|T value
argument_list|)
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
name|QJNILocalRef
operator|<
name|T
operator|>
name|getStaticObjectField
argument_list|(
specifier|const
name|char
operator|*
name|className
argument_list|,
specifier|const
name|char
operator|*
name|fieldName
argument_list|)
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
name|QJNILocalRef
operator|<
name|T
operator|>
name|getStaticObjectField
argument_list|(
specifier|const
name|char
operator|*
name|className
argument_list|,
specifier|const
name|char
operator|*
name|fieldName
argument_list|,
specifier|const
name|char
operator|*
name|sig
argument_list|)
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
name|T
name|getStaticField
argument_list|(
specifier|const
name|char
operator|*
name|className
argument_list|,
specifier|const
name|char
operator|*
name|fieldName
argument_list|)
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
name|QJNILocalRef
operator|<
name|T
operator|>
name|getStaticObjectField
argument_list|(
argument|jclass clazz
argument_list|,
argument|const char *fieldName
argument_list|)
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
name|QJNILocalRef
operator|<
name|T
operator|>
name|getStaticObjectField
argument_list|(
argument|jclass clazz
argument_list|,
argument|const char *fieldName
argument_list|,
argument|const char *sig
argument_list|)
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
name|T
name|getStaticField
argument_list|(
argument|jclass clazz
argument_list|,
argument|const char *fieldName
argument_list|)
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
name|void
name|setStaticField
argument_list|(
argument|const char *className
argument_list|,
argument|const char *fieldName
argument_list|,
argument|const char *sig
argument_list|,
argument|T value
argument_list|)
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
name|void
name|setStaticField
argument_list|(
argument|const char *className
argument_list|,
argument|const char *fieldName
argument_list|,
argument|T value
argument_list|)
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
name|void
name|setStaticField
argument_list|(
argument|jclass clazz
argument_list|,
argument|const char *fieldName
argument_list|,
argument|const char *sig
argument_list|,
argument|T value
argument_list|)
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
name|void
name|setStaticField
argument_list|(
argument|jclass clazz
argument_list|,
argument|const char *fieldName
argument_list|,
argument|T value
argument_list|)
expr_stmt|;
name|private
label|:
name|QSharedPointer
operator|<
name|QJNIObjectPrivate
operator|>
name|d
expr_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QJNIOBJECT_H
end_comment
end_unit
