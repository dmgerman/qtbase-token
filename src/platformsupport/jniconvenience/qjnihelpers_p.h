begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QJNIHELPERS_H
end_ifndef
begin_define
DECL|macro|QJNIHELPERS_H
define|#
directive|define
name|QJNIHELPERS_H
end_define
begin_include
include|#
directive|include
file|<jni.h>
end_include
begin_include
include|#
directive|include
file|<qglobal.h>
end_include
begin_include
include|#
directive|include
file|<QString>
end_include
begin_include
include|#
directive|include
file|<QThreadStorage>
end_include
begin_expr_stmt
name|QT_BEGIN_NAMESPACE
name|template
operator|<
name|typename
name|T
operator|>
DECL|variable|QJNILocalRef
name|class
name|QJNILocalRef
expr_stmt|;
end_expr_stmt
begin_function_decl
name|QString
name|qt_convertJString
parameter_list|(
name|jstring
name|string
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|QJNILocalRef
operator|<
name|jstring
operator|>
name|qt_toJString
argument_list|(
specifier|const
name|QString
operator|&
name|string
argument_list|)
expr_stmt|;
end_expr_stmt
begin_struct
DECL|struct|QAttachedJNIEnv
struct|struct
name|QAttachedJNIEnv
block|{
name|QAttachedJNIEnv
argument_list|()
expr_stmt|;
operator|~
name|QAttachedJNIEnv
argument_list|()
expr_stmt|;
specifier|static
name|JavaVM
modifier|*
name|javaVM
parameter_list|()
function_decl|;
DECL|function|operator
name|JNIEnv
operator|*
name|operator
operator|->
expr|(
block|)
block|{
return|return
name|jniEnv
return|;
block|}
name|operator
name|JNIEnv
modifier|*
argument_list|()
decl|const
block|{
return|return
name|jniEnv
return|;
block|}
DECL|member|jniEnv
name|JNIEnv
modifier|*
name|jniEnv
struct|;
end_struct
begin_label
DECL|member|private
name|private
label|:
end_label
begin_expr_stmt
specifier|static
name|QThreadStorage
operator|<
name|int
operator|>
name|m_refCount
expr_stmt|;
end_expr_stmt
begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|T
operator|>
name|class
name|QJNILocalRef
block|{
name|public
operator|:
specifier|inline
name|QJNILocalRef
argument_list|()
operator|:
name|m_obj
argument_list|(
literal|0
argument_list|)
block|{ }
specifier|inline
name|explicit
name|QJNILocalRef
argument_list|(
argument|T o
argument_list|)
operator|:
name|m_obj
argument_list|(
argument|o
argument_list|)
block|{ }
specifier|inline
name|QJNILocalRef
argument_list|(
specifier|const
name|QJNILocalRef
operator|<
name|T
operator|>
operator|&
name|other
argument_list|)
operator|:
name|m_obj
argument_list|(
argument|other.m_obj
argument_list|)
block|{
if|if
condition|(
name|other
operator|.
name|m_obj
condition|)
name|m_obj
operator|=
name|static_cast
operator|<
name|T
operator|>
operator|(
name|m_env
operator|->
name|NewLocalRef
argument_list|(
name|other
operator|.
name|m_obj
argument_list|)
operator|)
expr_stmt|;
block|}
name|template
operator|<
name|typename
name|X
operator|>
specifier|inline
name|QJNILocalRef
argument_list|(
specifier|const
name|QJNILocalRef
operator|<
name|X
operator|>
operator|&
name|other
argument_list|)
operator|:
name|m_obj
argument_list|(
argument|other.m_obj
argument_list|)
block|{
if|if
condition|(
name|other
operator|.
name|m_obj
condition|)
name|m_obj
operator|=
name|static_cast
operator|<
name|T
operator|>
operator|(
name|m_env
operator|->
name|NewLocalRef
argument_list|(
name|other
operator|.
name|m_obj
argument_list|)
operator|)
expr_stmt|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
operator|~
name|QJNILocalRef
argument_list|()
block|{
name|release
argument_list|()
block|; }
specifier|inline
name|QJNILocalRef
operator|<
name|T
operator|>
operator|&
name|operator
operator|=
operator|(
specifier|const
name|QJNILocalRef
operator|<
name|T
operator|>
operator|&
name|other
operator|)
block|{
name|release
argument_list|()
block|;
name|m_obj
operator|=
name|other
operator|.
name|m_obj
block|;
comment|// for type checking
if|if
condition|(
name|other
operator|.
name|m_obj
condition|)
name|m_obj
operator|=
name|static_cast
operator|<
name|T
operator|>
operator|(
name|m_env
operator|->
name|NewLocalRef
argument_list|(
name|other
operator|.
name|m_obj
argument_list|)
operator|)
expr_stmt|;
end_expr_stmt
begin_return
return|return
operator|*
name|this
return|;
end_return
begin_expr_stmt
unit|}      template
operator|<
name|typename
name|X
operator|>
specifier|inline
name|QJNILocalRef
operator|<
name|T
operator|>
operator|&
name|operator
operator|=
operator|(
specifier|const
name|QJNILocalRef
operator|<
name|X
operator|>
operator|&
name|other
operator|)
block|{
name|release
argument_list|()
block|;
name|m_obj
operator|=
name|other
operator|.
name|m_obj
block|;
comment|// for type checking
if|if
condition|(
name|other
operator|.
name|m_obj
condition|)
name|m_obj
operator|=
name|static_cast
operator|<
name|T
operator|>
operator|(
name|m_env
operator|->
name|NewLocalRef
argument_list|(
name|other
operator|.
name|m_obj
argument_list|)
operator|)
expr_stmt|;
end_expr_stmt
begin_return
return|return
operator|*
name|this
return|;
end_return
begin_expr_stmt
unit|}      inline
name|QJNILocalRef
operator|<
name|T
operator|>
operator|&
name|operator
operator|=
operator|(
name|T
name|o
operator|)
block|{
name|release
argument_list|()
block|;
name|m_obj
operator|=
name|o
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|X
operator|>
specifier|inline
name|QJNILocalRef
operator|<
name|T
operator|>
operator|&
name|operator
operator|=
operator|(
name|X
name|o
operator|)
block|{
name|release
argument_list|()
block|;
name|m_obj
operator|=
name|o
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|!
operator|(
operator|)
specifier|const
block|{
return|return
operator|!
name|m_obj
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|isNull
argument_list|()
specifier|const
block|{
return|return
operator|!
name|m_obj
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|T
name|object
argument_list|()
specifier|const
block|{
return|return
name|m_obj
return|;
block|}
end_expr_stmt
begin_label
name|private
label|:
end_label
begin_function
name|void
name|release
parameter_list|()
block|{
if|if
condition|(
name|m_obj
condition|)
block|{
name|m_env
operator|->
name|DeleteLocalRef
argument_list|(
name|m_obj
argument_list|)
expr_stmt|;
name|m_obj
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_decl_stmt
name|QAttachedJNIEnv
name|m_env
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|T
name|m_obj
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|template
operator|<
name|class
name|X
operator|>
name|friend
name|class
name|QJNILocalRef
expr_stmt|;
end_expr_stmt
begin_expr_stmt
unit|};
DECL|variable|T
name|template
operator|<
name|class
name|T
operator|,
name|class
name|X
operator|>
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QJNILocalRef
operator|<
name|T
operator|>
operator|&
name|ptr1
operator|,
specifier|const
name|QJNILocalRef
operator|<
name|X
operator|>
operator|&
name|ptr2
operator|)
block|{
return|return
name|ptr1
operator|.
name|m_obj
operator|==
name|ptr2
operator|.
name|m_obj
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|variable|T
name|template
operator|<
name|class
name|T
operator|,
name|class
name|X
operator|>
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|QJNILocalRef
operator|<
name|T
operator|>
operator|&
name|ptr1
operator|,
specifier|const
name|QJNILocalRef
operator|<
name|X
operator|>
operator|&
name|ptr2
operator|)
block|{
return|return
name|ptr1
operator|.
name|m_obj
operator|!=
name|ptr2
operator|.
name|m_obj
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|variable|T
name|template
operator|<
name|class
name|T
operator|,
name|class
name|X
operator|>
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QJNILocalRef
operator|<
name|T
operator|>
operator|&
name|ptr1
operator|,
name|X
name|ptr2
operator|)
block|{
return|return
name|ptr1
operator|.
name|m_obj
operator|==
name|ptr2
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|variable|T
name|template
operator|<
name|class
name|T
operator|,
name|class
name|X
operator|>
DECL|function|operator
name|bool
name|operator
operator|==
operator|(
name|T
name|ptr1
operator|,
specifier|const
name|QJNILocalRef
operator|<
name|X
operator|>
operator|&
name|ptr2
operator|)
block|{
return|return
name|ptr1
operator|==
name|ptr2
operator|.
name|m_obj
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|variable|T
name|template
operator|<
name|class
name|T
operator|,
name|class
name|X
operator|>
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|QJNILocalRef
operator|<
name|T
operator|>
operator|&
name|ptr1
operator|,
name|X
name|ptr2
operator|)
block|{
return|return
operator|!
operator|(
name|ptr1
operator|==
name|ptr2
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|variable|T
name|template
operator|<
name|class
name|T
operator|,
name|class
name|X
operator|>
DECL|function|operator
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|T
operator|*
name|ptr1
operator|,
specifier|const
name|QJNILocalRef
operator|<
name|X
operator|>
operator|&
name|ptr2
operator|)
block|{
return|return
operator|!
operator|(
name|ptr2
operator|==
name|ptr1
operator|)
return|;
block|}
end_expr_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QJNIHELPERS_H
end_comment
end_unit
