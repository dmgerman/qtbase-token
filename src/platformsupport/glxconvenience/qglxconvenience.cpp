begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|// We have to include this before the X11 headers dragged in by
end_comment
begin_comment
comment|// qglxconvenience_p.h.
end_comment
begin_include
include|#
directive|include
file|<QtCore/QByteArray>
end_include
begin_include
include|#
directive|include
file|<QtCore/QScopedPointer>
end_include
begin_include
include|#
directive|include
file|"qglxconvenience_p.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/QVector>
end_include
begin_include
include|#
directive|include
file|<QtCore/QVarLengthArray>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_XRENDER
end_ifndef
begin_include
include|#
directive|include
file|<X11/extensions/Xrender.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<GL/glxext.h>
end_include
begin_enum
enum|enum
block|{
DECL|enumerator|XFocusOut
name|XFocusOut
init|=
name|FocusOut
block|,
DECL|enumerator|XFocusIn
name|XFocusIn
init|=
name|FocusIn
block|,
DECL|enumerator|XKeyPress
name|XKeyPress
init|=
name|KeyPress
block|,
DECL|enumerator|XKeyRelease
name|XKeyRelease
init|=
name|KeyRelease
block|,
DECL|enumerator|XNone
name|XNone
init|=
name|None
block|,
DECL|enumerator|XRevertToParent
name|XRevertToParent
init|=
name|RevertToParent
block|,
DECL|enumerator|XGrayScale
name|XGrayScale
init|=
name|GrayScale
block|,
DECL|enumerator|XCursorShape
name|XCursorShape
init|=
name|CursorShape
block|}
enum|;
end_enum
begin_undef
DECL|macro|FocusOut
undef|#
directive|undef
name|FocusOut
end_undef
begin_undef
DECL|macro|FocusIn
undef|#
directive|undef
name|FocusIn
end_undef
begin_undef
DECL|macro|KeyPress
undef|#
directive|undef
name|KeyPress
end_undef
begin_undef
DECL|macro|KeyRelease
undef|#
directive|undef
name|KeyRelease
end_undef
begin_undef
DECL|macro|None
undef|#
directive|undef
name|None
end_undef
begin_undef
DECL|macro|RevertToParent
undef|#
directive|undef
name|RevertToParent
end_undef
begin_undef
DECL|macro|GrayScale
undef|#
directive|undef
name|GrayScale
end_undef
begin_undef
DECL|macro|CursorShape
undef|#
directive|undef
name|CursorShape
end_undef
begin_ifdef
ifdef|#
directive|ifdef
name|FontChange
end_ifdef
begin_undef
DECL|macro|FontChange
undef|#
directive|undef
name|FontChange
end_undef
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|qglx_buildSpec
name|QVector
argument_list|<
name|int
argument_list|>
name|qglx_buildSpec
parameter_list|(
specifier|const
name|QSurfaceFormat
modifier|&
name|format
parameter_list|,
name|int
name|drawableBit
parameter_list|)
block|{
name|QVector
argument_list|<
name|int
argument_list|>
name|spec
decl_stmt|;
name|spec
operator|<<
name|GLX_LEVEL
operator|<<
literal|0
operator|<<
name|GLX_RENDER_TYPE
operator|<<
name|GLX_RGBA_BIT
operator|<<
name|GLX_RED_SIZE
operator|<<
name|qMax
argument_list|(
literal|1
argument_list|,
name|format
operator|.
name|redBufferSize
argument_list|()
argument_list|)
operator|<<
name|GLX_GREEN_SIZE
operator|<<
name|qMax
argument_list|(
literal|1
argument_list|,
name|format
operator|.
name|greenBufferSize
argument_list|()
argument_list|)
operator|<<
name|GLX_BLUE_SIZE
operator|<<
name|qMax
argument_list|(
literal|1
argument_list|,
name|format
operator|.
name|blueBufferSize
argument_list|()
argument_list|)
operator|<<
name|GLX_ALPHA_SIZE
operator|<<
name|qMax
argument_list|(
literal|0
argument_list|,
name|format
operator|.
name|alphaBufferSize
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|format
operator|.
name|swapBehavior
argument_list|()
operator|!=
name|QSurfaceFormat
operator|::
name|SingleBuffer
condition|)
name|spec
operator|<<
name|GLX_DOUBLEBUFFER
operator|<<
name|True
expr_stmt|;
if|if
condition|(
name|format
operator|.
name|stereo
argument_list|()
condition|)
name|spec
operator|<<
name|GLX_STEREO
operator|<<
name|True
expr_stmt|;
if|if
condition|(
name|format
operator|.
name|depthBufferSize
argument_list|()
operator|!=
operator|-
literal|1
condition|)
name|spec
operator|<<
name|GLX_DEPTH_SIZE
operator|<<
name|format
operator|.
name|depthBufferSize
argument_list|()
expr_stmt|;
if|if
condition|(
name|format
operator|.
name|stencilBufferSize
argument_list|()
operator|!=
operator|-
literal|1
condition|)
name|spec
operator|<<
name|GLX_STENCIL_SIZE
operator|<<
name|format
operator|.
name|stencilBufferSize
argument_list|()
expr_stmt|;
if|if
condition|(
name|format
operator|.
name|samples
argument_list|()
operator|>
literal|1
condition|)
name|spec
operator|<<
name|GLX_SAMPLE_BUFFERS_ARB
operator|<<
literal|1
operator|<<
name|GLX_SAMPLES_ARB
operator|<<
name|format
operator|.
name|samples
argument_list|()
expr_stmt|;
name|spec
operator|<<
name|GLX_DRAWABLE_TYPE
operator|<<
name|drawableBit
operator|<<
name|XNone
expr_stmt|;
return|return
name|spec
return|;
block|}
end_function
begin_namespace
namespace|namespace
block|{
DECL|struct|QXcbSoftwareOpenGLEnforcer
struct|struct
name|QXcbSoftwareOpenGLEnforcer
block|{
DECL|function|QXcbSoftwareOpenGLEnforcer
name|QXcbSoftwareOpenGLEnforcer
parameter_list|()
block|{
comment|// Allow forcing LIBGL_ALWAYS_SOFTWARE for Qt 5 applications only.
comment|// This is most useful with drivers that only support OpenGL 1.
comment|// We need OpenGL 2, but the user probably doesn't want
comment|// LIBGL_ALWAYS_SOFTWARE in OpenGL 1 apps.
if|if
condition|(
operator|!
name|checkedForceSoftwareOpenGL
condition|)
block|{
comment|// If LIBGL_ALWAYS_SOFTWARE is already set, don't mess with it.
comment|// We want to unset LIBGL_ALWAYS_SOFTWARE at the end so it does not
comment|// get inherited by other processes, of course only if it wasn't
comment|// already set before.
if|if
condition|(
operator|!
name|qEnvironmentVariableIsEmpty
argument_list|(
literal|"QT_XCB_FORCE_SOFTWARE_OPENGL"
argument_list|)
operator|&&
operator|!
name|qEnvironmentVariableIsSet
argument_list|(
literal|"LIBGL_ALWAYS_SOFTWARE"
argument_list|)
condition|)
name|forceSoftwareOpenGL
operator|=
literal|true
expr_stmt|;
name|checkedForceSoftwareOpenGL
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|forceSoftwareOpenGL
condition|)
name|qputenv
argument_list|(
literal|"LIBGL_ALWAYS_SOFTWARE"
argument_list|,
name|QByteArrayLiteral
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|~QXcbSoftwareOpenGLEnforcer
name|~
name|QXcbSoftwareOpenGLEnforcer
parameter_list|()
block|{
comment|// unset LIBGL_ALWAYS_SOFTWARE now so other processes don't inherit it
if|if
condition|(
name|forceSoftwareOpenGL
condition|)
name|qunsetenv
argument_list|(
literal|"LIBGL_ALWAYS_SOFTWARE"
argument_list|)
expr_stmt|;
block|}
DECL|member|checkedForceSoftwareOpenGL
specifier|static
name|bool
name|checkedForceSoftwareOpenGL
decl_stmt|;
DECL|member|forceSoftwareOpenGL
specifier|static
name|bool
name|forceSoftwareOpenGL
decl_stmt|;
block|}
struct|;
DECL|member|checkedForceSoftwareOpenGL
name|bool
name|QXcbSoftwareOpenGLEnforcer
operator|::
name|checkedForceSoftwareOpenGL
init|=
literal|false
decl_stmt|;
DECL|member|forceSoftwareOpenGL
name|bool
name|QXcbSoftwareOpenGLEnforcer
operator|::
name|forceSoftwareOpenGL
init|=
literal|false
decl_stmt|;
template|template
parameter_list|<
name|class
name|T
parameter_list|>
struct|struct
DECL|struct|QXlibScopedPointerDeleter
name|QXlibScopedPointerDeleter
block|{
DECL|function|cleanup
specifier|static
specifier|inline
name|void
name|cleanup
parameter_list|(
name|T
modifier|*
name|pointer
parameter_list|)
block|{
name|XFree
argument_list|(
name|pointer
argument_list|)
expr_stmt|;
block|}
block|}
struct|;
template|template
parameter_list|<
name|class
name|T
parameter_list|>
using|using
name|QXlibPointer
init|=
name|QScopedPointer
argument_list|<
name|T
argument_list|,
name|QXlibScopedPointerDeleter
argument_list|<
name|T
argument_list|>
argument_list|>
using|;
template|template
parameter_list|<
name|class
name|T
parameter_list|>
using|using
name|QXlibArrayPointer
init|=
name|QScopedArrayPointer
argument_list|<
name|T
argument_list|,
name|QXlibScopedPointerDeleter
argument_list|<
name|T
argument_list|>
argument_list|>
using|;
block|}
end_namespace
begin_function
DECL|function|qglx_findConfig
name|GLXFBConfig
name|qglx_findConfig
parameter_list|(
name|Display
modifier|*
name|display
parameter_list|,
name|int
name|screen
parameter_list|,
name|QSurfaceFormat
name|format
parameter_list|,
name|bool
name|highestPixelFormat
parameter_list|,
name|int
name|drawableBit
parameter_list|)
block|{
name|QXcbSoftwareOpenGLEnforcer
name|softwareOpenGLEnforcer
decl_stmt|;
name|GLXFBConfig
name|config
init|=
literal|0
decl_stmt|;
do|do
block|{
specifier|const
name|QVector
argument_list|<
name|int
argument_list|>
name|spec
init|=
name|qglx_buildSpec
argument_list|(
name|format
argument_list|,
name|drawableBit
argument_list|)
decl_stmt|;
name|int
name|confcount
init|=
literal|0
decl_stmt|;
name|QXlibArrayPointer
argument_list|<
name|GLXFBConfig
argument_list|>
name|configs
argument_list|(
name|glXChooseFBConfig
argument_list|(
name|display
argument_list|,
name|screen
argument_list|,
name|spec
operator|.
name|constData
argument_list|()
argument_list|,
operator|&
name|confcount
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|config
operator|&&
name|confcount
operator|>
literal|0
condition|)
block|{
name|config
operator|=
name|configs
index|[
literal|0
index|]
expr_stmt|;
if|if
condition|(
name|highestPixelFormat
operator|&&
operator|!
name|format
operator|.
name|hasAlpha
argument_list|()
condition|)
break|break;
block|}
specifier|const
name|int
name|requestedRed
init|=
name|qMax
argument_list|(
literal|0
argument_list|,
name|format
operator|.
name|redBufferSize
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|int
name|requestedGreen
init|=
name|qMax
argument_list|(
literal|0
argument_list|,
name|format
operator|.
name|greenBufferSize
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|int
name|requestedBlue
init|=
name|qMax
argument_list|(
literal|0
argument_list|,
name|format
operator|.
name|blueBufferSize
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|int
name|requestedAlpha
init|=
name|qMax
argument_list|(
literal|0
argument_list|,
name|format
operator|.
name|alphaBufferSize
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|confcount
condition|;
name|i
operator|++
control|)
block|{
name|GLXFBConfig
name|candidate
init|=
name|configs
index|[
name|i
index|]
decl_stmt|;
name|QXlibPointer
argument_list|<
name|XVisualInfo
argument_list|>
name|visual
argument_list|(
name|glXGetVisualFromFBConfig
argument_list|(
name|display
argument_list|,
name|candidate
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|int
name|actualRed
init|=
name|qPopulationCount
argument_list|(
name|visual
operator|->
name|red_mask
argument_list|)
decl_stmt|;
specifier|const
name|int
name|actualGreen
init|=
name|qPopulationCount
argument_list|(
name|visual
operator|->
name|green_mask
argument_list|)
decl_stmt|;
specifier|const
name|int
name|actualBlue
init|=
name|qPopulationCount
argument_list|(
name|visual
operator|->
name|blue_mask
argument_list|)
decl_stmt|;
specifier|const
name|int
name|actualAlpha
init|=
name|visual
operator|->
name|depth
operator|-
name|actualRed
operator|-
name|actualGreen
operator|-
name|actualBlue
decl_stmt|;
if|if
condition|(
name|requestedRed
operator|&&
name|actualRed
operator|!=
name|requestedRed
condition|)
continue|continue;
if|if
condition|(
name|requestedGreen
operator|&&
name|actualGreen
operator|!=
name|requestedGreen
condition|)
continue|continue;
if|if
condition|(
name|requestedBlue
operator|&&
name|actualBlue
operator|!=
name|requestedBlue
condition|)
continue|continue;
if|if
condition|(
name|requestedAlpha
operator|&&
name|actualAlpha
operator|!=
name|requestedAlpha
condition|)
continue|continue;
return|return
name|candidate
return|;
block|}
block|}
do|while
condition|(
name|qglx_reduceFormat
argument_list|(
operator|&
name|format
argument_list|)
condition|)
do|;
return|return
name|config
return|;
block|}
end_function
begin_function
DECL|function|qglx_findVisualInfo
name|XVisualInfo
modifier|*
name|qglx_findVisualInfo
parameter_list|(
name|Display
modifier|*
name|display
parameter_list|,
name|int
name|screen
parameter_list|,
name|QSurfaceFormat
modifier|*
name|format
parameter_list|,
name|int
name|drawableBit
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|format
argument_list|)
expr_stmt|;
name|XVisualInfo
modifier|*
name|visualInfo
init|=
literal|0
decl_stmt|;
name|GLXFBConfig
name|config
init|=
name|qglx_findConfig
argument_list|(
name|display
argument_list|,
name|screen
argument_list|,
operator|*
name|format
argument_list|,
literal|false
argument_list|,
name|drawableBit
argument_list|)
decl_stmt|;
if|if
condition|(
name|config
condition|)
name|visualInfo
operator|=
name|glXGetVisualFromFBConfig
argument_list|(
name|display
argument_list|,
name|config
argument_list|)
expr_stmt|;
if|if
condition|(
name|visualInfo
condition|)
block|{
name|qglx_surfaceFormatFromGLXFBConfig
argument_list|(
name|format
argument_list|,
name|display
argument_list|,
name|config
argument_list|)
expr_stmt|;
return|return
name|visualInfo
return|;
block|}
comment|// attempt to fall back to glXChooseVisual
do|do
block|{
name|QVector
argument_list|<
name|int
argument_list|>
name|attribs
init|=
name|qglx_buildSpec
argument_list|(
operator|*
name|format
argument_list|,
name|drawableBit
argument_list|)
decl_stmt|;
name|visualInfo
operator|=
name|glXChooseVisual
argument_list|(
name|display
argument_list|,
name|screen
argument_list|,
name|attribs
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|visualInfo
condition|)
block|{
name|qglx_surfaceFormatFromVisualInfo
argument_list|(
name|format
argument_list|,
name|display
argument_list|,
name|visualInfo
argument_list|)
expr_stmt|;
return|return
name|visualInfo
return|;
block|}
block|}
do|while
condition|(
name|qglx_reduceFormat
argument_list|(
name|format
argument_list|)
condition|)
do|;
return|return
name|visualInfo
return|;
block|}
end_function
begin_function
DECL|function|qglx_surfaceFormatFromGLXFBConfig
name|void
name|qglx_surfaceFormatFromGLXFBConfig
parameter_list|(
name|QSurfaceFormat
modifier|*
name|format
parameter_list|,
name|Display
modifier|*
name|display
parameter_list|,
name|GLXFBConfig
name|config
parameter_list|)
block|{
name|int
name|redSize
init|=
literal|0
decl_stmt|;
name|int
name|greenSize
init|=
literal|0
decl_stmt|;
name|int
name|blueSize
init|=
literal|0
decl_stmt|;
name|int
name|alphaSize
init|=
literal|0
decl_stmt|;
name|int
name|depthSize
init|=
literal|0
decl_stmt|;
name|int
name|stencilSize
init|=
literal|0
decl_stmt|;
name|int
name|sampleBuffers
init|=
literal|0
decl_stmt|;
name|int
name|sampleCount
init|=
literal|0
decl_stmt|;
name|int
name|stereo
init|=
literal|0
decl_stmt|;
name|glXGetFBConfigAttrib
argument_list|(
name|display
argument_list|,
name|config
argument_list|,
name|GLX_RED_SIZE
argument_list|,
operator|&
name|redSize
argument_list|)
expr_stmt|;
name|glXGetFBConfigAttrib
argument_list|(
name|display
argument_list|,
name|config
argument_list|,
name|GLX_GREEN_SIZE
argument_list|,
operator|&
name|greenSize
argument_list|)
expr_stmt|;
name|glXGetFBConfigAttrib
argument_list|(
name|display
argument_list|,
name|config
argument_list|,
name|GLX_BLUE_SIZE
argument_list|,
operator|&
name|blueSize
argument_list|)
expr_stmt|;
name|glXGetFBConfigAttrib
argument_list|(
name|display
argument_list|,
name|config
argument_list|,
name|GLX_ALPHA_SIZE
argument_list|,
operator|&
name|alphaSize
argument_list|)
expr_stmt|;
name|glXGetFBConfigAttrib
argument_list|(
name|display
argument_list|,
name|config
argument_list|,
name|GLX_DEPTH_SIZE
argument_list|,
operator|&
name|depthSize
argument_list|)
expr_stmt|;
name|glXGetFBConfigAttrib
argument_list|(
name|display
argument_list|,
name|config
argument_list|,
name|GLX_STENCIL_SIZE
argument_list|,
operator|&
name|stencilSize
argument_list|)
expr_stmt|;
name|glXGetFBConfigAttrib
argument_list|(
name|display
argument_list|,
name|config
argument_list|,
name|GLX_SAMPLES_ARB
argument_list|,
operator|&
name|sampleBuffers
argument_list|)
expr_stmt|;
name|glXGetFBConfigAttrib
argument_list|(
name|display
argument_list|,
name|config
argument_list|,
name|GLX_STEREO
argument_list|,
operator|&
name|stereo
argument_list|)
expr_stmt|;
name|format
operator|->
name|setRedBufferSize
argument_list|(
name|redSize
argument_list|)
expr_stmt|;
name|format
operator|->
name|setGreenBufferSize
argument_list|(
name|greenSize
argument_list|)
expr_stmt|;
name|format
operator|->
name|setBlueBufferSize
argument_list|(
name|blueSize
argument_list|)
expr_stmt|;
name|format
operator|->
name|setAlphaBufferSize
argument_list|(
name|alphaSize
argument_list|)
expr_stmt|;
name|format
operator|->
name|setDepthBufferSize
argument_list|(
name|depthSize
argument_list|)
expr_stmt|;
name|format
operator|->
name|setStencilBufferSize
argument_list|(
name|stencilSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|sampleBuffers
condition|)
block|{
name|glXGetFBConfigAttrib
argument_list|(
name|display
argument_list|,
name|config
argument_list|,
name|GLX_SAMPLES_ARB
argument_list|,
operator|&
name|sampleCount
argument_list|)
expr_stmt|;
name|format
operator|->
name|setSamples
argument_list|(
name|sampleCount
argument_list|)
expr_stmt|;
block|}
name|format
operator|->
name|setStereo
argument_list|(
name|stereo
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglx_surfaceFormatFromVisualInfo
name|void
name|qglx_surfaceFormatFromVisualInfo
parameter_list|(
name|QSurfaceFormat
modifier|*
name|format
parameter_list|,
name|Display
modifier|*
name|display
parameter_list|,
name|XVisualInfo
modifier|*
name|visualInfo
parameter_list|)
block|{
name|int
name|redSize
init|=
literal|0
decl_stmt|;
name|int
name|greenSize
init|=
literal|0
decl_stmt|;
name|int
name|blueSize
init|=
literal|0
decl_stmt|;
name|int
name|alphaSize
init|=
literal|0
decl_stmt|;
name|int
name|depthSize
init|=
literal|0
decl_stmt|;
name|int
name|stencilSize
init|=
literal|0
decl_stmt|;
name|int
name|sampleBuffers
init|=
literal|0
decl_stmt|;
name|int
name|sampleCount
init|=
literal|0
decl_stmt|;
name|int
name|stereo
init|=
literal|0
decl_stmt|;
name|glXGetConfig
argument_list|(
name|display
argument_list|,
name|visualInfo
argument_list|,
name|GLX_RED_SIZE
argument_list|,
operator|&
name|redSize
argument_list|)
expr_stmt|;
name|glXGetConfig
argument_list|(
name|display
argument_list|,
name|visualInfo
argument_list|,
name|GLX_GREEN_SIZE
argument_list|,
operator|&
name|greenSize
argument_list|)
expr_stmt|;
name|glXGetConfig
argument_list|(
name|display
argument_list|,
name|visualInfo
argument_list|,
name|GLX_BLUE_SIZE
argument_list|,
operator|&
name|blueSize
argument_list|)
expr_stmt|;
name|glXGetConfig
argument_list|(
name|display
argument_list|,
name|visualInfo
argument_list|,
name|GLX_ALPHA_SIZE
argument_list|,
operator|&
name|alphaSize
argument_list|)
expr_stmt|;
name|glXGetConfig
argument_list|(
name|display
argument_list|,
name|visualInfo
argument_list|,
name|GLX_DEPTH_SIZE
argument_list|,
operator|&
name|depthSize
argument_list|)
expr_stmt|;
name|glXGetConfig
argument_list|(
name|display
argument_list|,
name|visualInfo
argument_list|,
name|GLX_STENCIL_SIZE
argument_list|,
operator|&
name|stencilSize
argument_list|)
expr_stmt|;
name|glXGetConfig
argument_list|(
name|display
argument_list|,
name|visualInfo
argument_list|,
name|GLX_SAMPLES_ARB
argument_list|,
operator|&
name|sampleBuffers
argument_list|)
expr_stmt|;
name|glXGetConfig
argument_list|(
name|display
argument_list|,
name|visualInfo
argument_list|,
name|GLX_STEREO
argument_list|,
operator|&
name|stereo
argument_list|)
expr_stmt|;
name|format
operator|->
name|setRedBufferSize
argument_list|(
name|redSize
argument_list|)
expr_stmt|;
name|format
operator|->
name|setGreenBufferSize
argument_list|(
name|greenSize
argument_list|)
expr_stmt|;
name|format
operator|->
name|setBlueBufferSize
argument_list|(
name|blueSize
argument_list|)
expr_stmt|;
name|format
operator|->
name|setAlphaBufferSize
argument_list|(
name|alphaSize
argument_list|)
expr_stmt|;
name|format
operator|->
name|setDepthBufferSize
argument_list|(
name|depthSize
argument_list|)
expr_stmt|;
name|format
operator|->
name|setStencilBufferSize
argument_list|(
name|stencilSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|sampleBuffers
condition|)
block|{
name|glXGetConfig
argument_list|(
name|display
argument_list|,
name|visualInfo
argument_list|,
name|GLX_SAMPLES_ARB
argument_list|,
operator|&
name|sampleCount
argument_list|)
expr_stmt|;
name|format
operator|->
name|setSamples
argument_list|(
name|sampleCount
argument_list|)
expr_stmt|;
block|}
name|format
operator|->
name|setStereo
argument_list|(
name|stereo
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglx_reduceFormat
name|bool
name|qglx_reduceFormat
parameter_list|(
name|QSurfaceFormat
modifier|*
name|format
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|format
argument_list|)
expr_stmt|;
if|if
condition|(
name|format
operator|->
name|redBufferSize
argument_list|()
operator|>
literal|1
condition|)
block|{
name|format
operator|->
name|setRedBufferSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|format
operator|->
name|greenBufferSize
argument_list|()
operator|>
literal|1
condition|)
block|{
name|format
operator|->
name|setGreenBufferSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|format
operator|->
name|blueBufferSize
argument_list|()
operator|>
literal|1
condition|)
block|{
name|format
operator|->
name|setBlueBufferSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|format
operator|->
name|swapBehavior
argument_list|()
operator|!=
name|QSurfaceFormat
operator|::
name|SingleBuffer
condition|)
block|{
name|format
operator|->
name|setSwapBehavior
argument_list|(
name|QSurfaceFormat
operator|::
name|SingleBuffer
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|format
operator|->
name|samples
argument_list|()
operator|>
literal|1
condition|)
block|{
name|format
operator|->
name|setSamples
argument_list|(
name|qMin
argument_list|(
literal|16
argument_list|,
name|format
operator|->
name|samples
argument_list|()
operator|/
literal|2
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|format
operator|->
name|depthBufferSize
argument_list|()
operator|>=
literal|32
condition|)
block|{
name|format
operator|->
name|setDepthBufferSize
argument_list|(
literal|24
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|format
operator|->
name|depthBufferSize
argument_list|()
operator|>
literal|1
condition|)
block|{
name|format
operator|->
name|setDepthBufferSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|format
operator|->
name|depthBufferSize
argument_list|()
operator|>
literal|0
condition|)
block|{
name|format
operator|->
name|setDepthBufferSize
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|format
operator|->
name|hasAlpha
argument_list|()
condition|)
block|{
name|format
operator|->
name|setAlphaBufferSize
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|format
operator|->
name|stencilBufferSize
argument_list|()
operator|>
literal|1
condition|)
block|{
name|format
operator|->
name|setStencilBufferSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|format
operator|->
name|stencilBufferSize
argument_list|()
operator|>
literal|0
condition|)
block|{
name|format
operator|->
name|setStencilBufferSize
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
end_unit
