begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qgenericunixthemes_p.h"
end_include
begin_include
include|#
directive|include
file|"../../services/genericunix/qgenericunixservices_p.h"
end_include
begin_include
include|#
directive|include
file|<QtGui/QPalette>
end_include
begin_include
include|#
directive|include
file|<QtGui/QGuiApplication>
end_include
begin_include
include|#
directive|include
file|<QtCore/QDir>
end_include
begin_include
include|#
directive|include
file|<QtCore/QFileInfo>
end_include
begin_include
include|#
directive|include
file|<QtCore/QFile>
end_include
begin_include
include|#
directive|include
file|<QtCore/QDebug>
end_include
begin_include
include|#
directive|include
file|<QtCore/QSettings>
end_include
begin_include
include|#
directive|include
file|<QtCore/QVariant>
end_include
begin_include
include|#
directive|include
file|<QtCore/QStringList>
end_include
begin_function
name|QT_BEGIN_NAMESPACE
comment|/*!     \class QGenericX11ThemeQKdeTheme     \brief QGenericX11Theme is a generic theme implementation for X11.     \since 5.0     \internal     \ingroup qpa */
comment|// Helper to return the icon theme paths from XDG.
DECL|function|xdgIconThemePaths
name|QStringList
name|QGenericUnixTheme
operator|::
name|xdgIconThemePaths
parameter_list|()
block|{
name|QStringList
name|paths
decl_stmt|;
comment|// Add home directory first in search path
specifier|const
name|QFileInfo
name|homeIconDir
argument_list|(
name|QDir
operator|::
name|homePath
argument_list|()
operator|+
name|QStringLiteral
argument_list|(
literal|"/.icons"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|homeIconDir
operator|.
name|isDir
argument_list|()
condition|)
name|paths
operator|.
name|prepend
argument_list|(
name|homeIconDir
operator|.
name|absoluteFilePath
argument_list|()
argument_list|)
expr_stmt|;
name|QString
name|xdgDirString
init|=
name|QFile
operator|::
name|decodeName
argument_list|(
name|qgetenv
argument_list|(
literal|"XDG_DATA_DIRS"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|xdgDirString
operator|.
name|isEmpty
argument_list|()
condition|)
name|xdgDirString
operator|=
name|QLatin1String
argument_list|(
literal|"/usr/local/share/:/usr/share/"
argument_list|)
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|xdgDir
decl|,
name|xdgDirString
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
argument_list|)
control|)
block|{
specifier|const
name|QFileInfo
name|xdgIconsDir
argument_list|(
name|xdgDir
operator|+
name|QStringLiteral
argument_list|(
literal|"/icons"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|xdgIconsDir
operator|.
name|isDir
argument_list|()
condition|)
name|paths
operator|.
name|append
argument_list|(
name|xdgIconsDir
operator|.
name|absoluteFilePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|paths
return|;
block|}
end_function
begin_function
DECL|function|themeHint
name|QVariant
name|QGenericUnixTheme
operator|::
name|themeHint
parameter_list|(
name|ThemeHint
name|hint
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|hint
condition|)
block|{
case|case
name|QPlatformTheme
operator|::
name|SystemIconFallbackThemeName
case|:
return|return
name|QVariant
argument_list|(
name|QString
argument_list|(
name|QStringLiteral
argument_list|(
literal|"hicolor"
argument_list|)
argument_list|)
argument_list|)
return|;
case|case
name|QPlatformTheme
operator|::
name|IconThemeSearchPaths
case|:
return|return
name|xdgIconThemePaths
argument_list|()
return|;
case|case
name|QPlatformTheme
operator|::
name|StyleNames
case|:
block|{
name|QStringList
name|styleNames
decl_stmt|;
name|styleNames
operator|<<
name|QStringLiteral
argument_list|(
literal|"Plastique"
argument_list|)
operator|<<
name|QStringLiteral
argument_list|(
literal|"Windows"
argument_list|)
expr_stmt|;
return|return
name|QVariant
argument_list|(
name|styleNames
argument_list|)
return|;
block|}
break|break;
default|default:
break|break;
block|}
return|return
name|QPlatformTheme
operator|::
name|themeHint
argument_list|(
name|hint
argument_list|)
return|;
block|}
end_function
begin_comment
comment|// Reads the color from the KDE configuration, and store it in the
end_comment
begin_comment
comment|// palette with the given color role if found.
end_comment
begin_function
DECL|function|kdeColor
specifier|static
specifier|inline
name|bool
name|kdeColor
parameter_list|(
name|QPalette
modifier|*
name|pal
parameter_list|,
name|QPalette
operator|::
name|ColorRole
name|role
parameter_list|,
specifier|const
name|QSettings
modifier|&
name|kdeSettings
parameter_list|,
specifier|const
name|QString
modifier|&
name|key
parameter_list|)
block|{
specifier|const
name|QVariant
name|value
init|=
name|kdeSettings
operator|.
name|value
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|value
operator|.
name|isValid
argument_list|()
condition|)
return|return
literal|false
return|;
specifier|const
name|QStringList
name|values
init|=
name|value
operator|.
name|toStringList
argument_list|()
decl_stmt|;
if|if
condition|(
name|values
operator|.
name|size
argument_list|()
operator|!=
literal|3
condition|)
return|return
literal|false
return|;
name|pal
operator|->
name|setBrush
argument_list|(
name|role
argument_list|,
name|QColor
argument_list|(
name|values
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|values
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|values
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|// Reads the KDE system palette
end_comment
begin_function
DECL|function|readKdeSystemPalette
specifier|static
specifier|inline
name|bool
name|readKdeSystemPalette
parameter_list|(
specifier|const
name|QSettings
modifier|&
name|kdeSettings
parameter_list|,
name|QPalette
modifier|*
name|pal
parameter_list|)
block|{
comment|// Setup KDE palette
return|return
name|kdeColor
argument_list|(
name|pal
argument_list|,
name|QPalette
operator|::
name|Button
argument_list|,
name|kdeSettings
argument_list|,
name|QStringLiteral
argument_list|(
literal|"Colors:Button/BackgroundNormal"
argument_list|)
argument_list|)
operator|||
name|kdeColor
argument_list|(
name|pal
argument_list|,
name|QPalette
operator|::
name|Window
argument_list|,
name|kdeSettings
argument_list|,
name|QStringLiteral
argument_list|(
literal|"Colors:Window/BackgroundNormal"
argument_list|)
argument_list|)
operator|||
name|kdeColor
argument_list|(
name|pal
argument_list|,
name|QPalette
operator|::
name|Text
argument_list|,
name|kdeSettings
argument_list|,
name|QStringLiteral
argument_list|(
literal|"Colors:View/ForegroundNormal"
argument_list|)
argument_list|)
operator|||
name|kdeColor
argument_list|(
name|pal
argument_list|,
name|QPalette
operator|::
name|WindowText
argument_list|,
name|kdeSettings
argument_list|,
name|QStringLiteral
argument_list|(
literal|"Colors:Window/ForegroundNormal"
argument_list|)
argument_list|)
operator|||
name|kdeColor
argument_list|(
name|pal
argument_list|,
name|QPalette
operator|::
name|Base
argument_list|,
name|kdeSettings
argument_list|,
name|QStringLiteral
argument_list|(
literal|"Colors:View/BackgroundNormal"
argument_list|)
argument_list|)
operator|||
name|kdeColor
argument_list|(
name|pal
argument_list|,
name|QPalette
operator|::
name|Highlight
argument_list|,
name|kdeSettings
argument_list|,
name|QStringLiteral
argument_list|(
literal|"Colors:Selection/BackgroundNormal"
argument_list|)
argument_list|)
operator|||
name|kdeColor
argument_list|(
name|pal
argument_list|,
name|QPalette
operator|::
name|HighlightedText
argument_list|,
name|kdeSettings
argument_list|,
name|QStringLiteral
argument_list|(
literal|"Colors:Selection/ForegroundNormal"
argument_list|)
argument_list|)
operator|||
name|kdeColor
argument_list|(
name|pal
argument_list|,
name|QPalette
operator|::
name|AlternateBase
argument_list|,
name|kdeSettings
argument_list|,
name|QStringLiteral
argument_list|(
literal|"Colors:View/BackgroundAlternate"
argument_list|)
argument_list|)
operator|||
name|kdeColor
argument_list|(
name|pal
argument_list|,
name|QPalette
operator|::
name|ButtonText
argument_list|,
name|kdeSettings
argument_list|,
name|QStringLiteral
argument_list|(
literal|"Colors:Button/ForegroundNormal"
argument_list|)
argument_list|)
operator|||
name|kdeColor
argument_list|(
name|pal
argument_list|,
name|QPalette
operator|::
name|Link
argument_list|,
name|kdeSettings
argument_list|,
name|QStringLiteral
argument_list|(
literal|"Colors:View/ForegroundLink"
argument_list|)
argument_list|)
operator|||
name|kdeColor
argument_list|(
name|pal
argument_list|,
name|QPalette
operator|::
name|LinkVisited
argument_list|,
name|kdeSettings
argument_list|,
name|QStringLiteral
argument_list|(
literal|"Colors:View/ForegroundVisited"
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \class QKdeTheme     \brief QKdeTheme is a theme implementation for the KDE desktop (version 4 or higher).     \since 5.0     \internal     \ingroup qpa */
end_comment
begin_constructor
DECL|function|QKdeTheme
name|QKdeTheme
operator|::
name|QKdeTheme
parameter_list|(
specifier|const
name|QString
modifier|&
name|kdeHome
parameter_list|,
name|int
name|kdeVersion
parameter_list|)
member_init_list|:
name|m_kdeHome
argument_list|(
name|kdeHome
argument_list|)
member_init_list|,
name|m_kdeVersion
argument_list|(
name|kdeVersion
argument_list|)
member_init_list|,
name|m_toolButtonStyle
argument_list|(
name|Qt
operator|::
name|ToolButtonTextBesideIcon
argument_list|)
member_init_list|,
name|m_toolBarIconSize
argument_list|(
literal|0
argument_list|)
block|{
name|qFill
argument_list|(
name|m_palettes
argument_list|,
name|m_palettes
operator|+
name|NPalettes
argument_list|,
cast|static_cast
argument_list|<
name|QPalette
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|clearPalettes
name|void
name|QKdeTheme
operator|::
name|clearPalettes
parameter_list|()
block|{
name|qDeleteAll
argument_list|(
name|m_palettes
argument_list|,
name|m_palettes
operator|+
name|NPalettes
argument_list|)
expr_stmt|;
name|qFill
argument_list|(
name|m_palettes
argument_list|,
name|m_palettes
operator|+
name|NPalettes
argument_list|,
cast|static_cast
argument_list|<
name|QPalette
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|refresh
name|void
name|QKdeTheme
operator|::
name|refresh
parameter_list|()
block|{
name|clearPalettes
argument_list|()
expr_stmt|;
name|m_toolButtonStyle
operator|=
name|Qt
operator|::
name|ToolButtonTextBesideIcon
expr_stmt|;
name|m_toolBarIconSize
operator|=
literal|0
expr_stmt|;
name|m_styleNames
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m_styleNames
operator|<<
name|QStringLiteral
argument_list|(
literal|"Oxygen"
argument_list|)
operator|<<
name|QStringLiteral
argument_list|(
literal|"plastique"
argument_list|)
operator|<<
name|QStringLiteral
argument_list|(
literal|"windows"
argument_list|)
expr_stmt|;
name|m_iconFallbackThemeName
operator|=
name|m_iconThemeName
operator|=
name|QStringLiteral
argument_list|(
literal|"oxygen"
argument_list|)
expr_stmt|;
comment|// Read settings file.
specifier|const
name|QString
name|settingsFile
init|=
name|globalSettingsFile
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|QFileInfo
argument_list|(
name|settingsFile
argument_list|)
operator|.
name|isReadable
argument_list|()
condition|)
return|return;
specifier|const
name|QSettings
name|kdeSettings
argument_list|(
name|settingsFile
argument_list|,
name|QSettings
operator|::
name|IniFormat
argument_list|)
decl_stmt|;
name|QPalette
name|systemPalette
decl_stmt|;
if|if
condition|(
name|readKdeSystemPalette
argument_list|(
name|kdeSettings
argument_list|,
operator|&
name|systemPalette
argument_list|)
condition|)
name|m_palettes
index|[
name|SystemPalette
index|]
operator|=
operator|new
name|QPalette
argument_list|(
name|systemPalette
argument_list|)
expr_stmt|;
comment|//## TODO tooltip color
specifier|const
name|QVariant
name|styleValue
init|=
name|kdeSettings
operator|.
name|value
argument_list|(
name|QStringLiteral
argument_list|(
literal|"widgetStyle"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|styleValue
operator|.
name|isValid
argument_list|()
condition|)
block|{
specifier|const
name|QString
name|style
init|=
name|styleValue
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|style
operator|!=
name|m_styleNames
operator|.
name|front
argument_list|()
condition|)
name|m_styleNames
operator|.
name|push_front
argument_list|(
name|style
argument_list|)
expr_stmt|;
block|}
specifier|const
name|QVariant
name|themeValue
init|=
name|kdeSettings
operator|.
name|value
argument_list|(
name|QStringLiteral
argument_list|(
literal|"Icons/Theme"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|themeValue
operator|.
name|isValid
argument_list|()
condition|)
name|m_iconThemeName
operator|=
name|themeValue
operator|.
name|toString
argument_list|()
expr_stmt|;
specifier|const
name|QVariant
name|toolBarIconSizeValue
init|=
name|kdeSettings
operator|.
name|value
argument_list|(
name|QStringLiteral
argument_list|(
literal|"ToolbarIcons/Size"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|toolBarIconSizeValue
operator|.
name|isValid
argument_list|()
condition|)
name|m_toolBarIconSize
operator|=
name|toolBarIconSizeValue
operator|.
name|toInt
argument_list|()
expr_stmt|;
specifier|const
name|QVariant
name|toolbarStyleValue
init|=
name|kdeSettings
operator|.
name|value
argument_list|(
name|QStringLiteral
argument_list|(
literal|"ToolButtonStyle"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|toolbarStyleValue
operator|.
name|isValid
argument_list|()
condition|)
block|{
specifier|const
name|QString
name|toolBarStyle
init|=
name|toolbarStyleValue
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|toolBarStyle
operator|==
name|QStringLiteral
argument_list|(
literal|"TextBesideIcon"
argument_list|)
condition|)
name|m_toolButtonStyle
operator|=
name|Qt
operator|::
name|ToolButtonTextBesideIcon
expr_stmt|;
elseif|else
if|if
condition|(
name|toolBarStyle
operator|==
name|QStringLiteral
argument_list|(
literal|"TextOnly"
argument_list|)
condition|)
name|m_toolButtonStyle
operator|=
name|Qt
operator|::
name|ToolButtonTextOnly
expr_stmt|;
elseif|else
if|if
condition|(
name|toolBarStyle
operator|==
name|QStringLiteral
argument_list|(
literal|"TextUnderIcon"
argument_list|)
condition|)
name|m_toolButtonStyle
operator|=
name|Qt
operator|::
name|ToolButtonTextUnderIcon
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|globalSettingsFile
name|QString
name|QKdeTheme
operator|::
name|globalSettingsFile
parameter_list|()
specifier|const
block|{
return|return
name|m_kdeHome
operator|+
name|QStringLiteral
argument_list|(
literal|"/share/config/kdeglobals"
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|kdeIconThemeSearchPaths
specifier|static
name|QStringList
name|kdeIconThemeSearchPaths
parameter_list|(
specifier|const
name|QString
modifier|&
name|kdeHome
parameter_list|)
block|{
name|QStringList
name|candidates
init|=
name|QStringList
argument_list|(
name|kdeHome
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|kdeDirs
init|=
name|QFile
operator|::
name|decodeName
argument_list|(
name|qgetenv
argument_list|(
literal|"KDEDIRS"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|kdeDirs
operator|.
name|isEmpty
argument_list|()
condition|)
name|candidates
operator|.
name|append
argument_list|(
name|kdeDirs
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QStringList
name|paths
init|=
name|QGenericUnixTheme
operator|::
name|xdgIconThemePaths
argument_list|()
decl_stmt|;
specifier|const
name|QString
name|iconPath
init|=
name|QStringLiteral
argument_list|(
literal|"/share/icons"
argument_list|)
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|candidate
decl|,
name|candidates
control|)
block|{
specifier|const
name|QFileInfo
name|fi
argument_list|(
name|candidate
operator|+
name|iconPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|fi
operator|.
name|isDir
argument_list|()
condition|)
name|paths
operator|.
name|append
argument_list|(
name|fi
operator|.
name|absoluteFilePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|paths
return|;
block|}
end_function
begin_function
DECL|function|themeHint
name|QVariant
name|QKdeTheme
operator|::
name|themeHint
parameter_list|(
name|QPlatformTheme
operator|::
name|ThemeHint
name|hint
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|hint
condition|)
block|{
case|case
name|QPlatformTheme
operator|::
name|ToolButtonStyle
case|:
return|return
name|QVariant
argument_list|(
name|m_toolButtonStyle
argument_list|)
return|;
case|case
name|QPlatformTheme
operator|::
name|ToolBarIconSize
case|:
return|return
name|QVariant
argument_list|(
name|m_toolBarIconSize
argument_list|)
return|;
case|case
name|QPlatformTheme
operator|::
name|SystemIconThemeName
case|:
return|return
name|QVariant
argument_list|(
name|m_iconThemeName
argument_list|)
return|;
case|case
name|QPlatformTheme
operator|::
name|SystemIconFallbackThemeName
case|:
return|return
name|QVariant
argument_list|(
name|m_iconFallbackThemeName
argument_list|)
return|;
case|case
name|QPlatformTheme
operator|::
name|IconThemeSearchPaths
case|:
return|return
name|QVariant
argument_list|(
name|kdeIconThemeSearchPaths
argument_list|(
name|m_kdeHome
argument_list|)
argument_list|)
return|;
case|case
name|QPlatformTheme
operator|::
name|StyleNames
case|:
return|return
name|QVariant
argument_list|(
name|m_styleNames
argument_list|)
return|;
default|default:
break|break;
block|}
return|return
name|QPlatformTheme
operator|::
name|themeHint
argument_list|(
name|hint
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|createKdeTheme
name|QPlatformTheme
modifier|*
name|QKdeTheme
operator|::
name|createKdeTheme
parameter_list|()
block|{
comment|// Check for version>= 4 and determine home folder from environment,
comment|// defaulting to ~/.kde<version>, ~/.kde
specifier|const
name|QByteArray
name|kdeVersionBA
init|=
name|qgetenv
argument_list|(
literal|"KDE_SESSION_VERSION"
argument_list|)
decl_stmt|;
specifier|const
name|int
name|kdeVersion
init|=
name|kdeVersionBA
operator|.
name|toInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|kdeVersion
operator|<
literal|4
condition|)
return|return
literal|0
return|;
specifier|const
name|QString
name|kdeHomePathVar
init|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|qgetenv
argument_list|(
literal|"KDEHOME"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|kdeHomePathVar
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
operator|new
name|QKdeTheme
argument_list|(
name|kdeHomePathVar
argument_list|,
name|kdeVersion
argument_list|)
return|;
specifier|const
name|QString
name|kdeVersionHomePath
init|=
name|QDir
operator|::
name|homePath
argument_list|()
operator|+
name|QStringLiteral
argument_list|(
literal|"/.kde"
argument_list|)
operator|+
name|QLatin1String
argument_list|(
name|kdeVersionBA
argument_list|)
decl_stmt|;
if|if
condition|(
name|QFileInfo
argument_list|(
name|kdeVersionHomePath
argument_list|)
operator|.
name|isDir
argument_list|()
condition|)
return|return
operator|new
name|QKdeTheme
argument_list|(
name|kdeVersionHomePath
argument_list|,
name|kdeVersion
argument_list|)
return|;
specifier|const
name|QString
name|kdeHomePath
init|=
name|QDir
operator|::
name|homePath
argument_list|()
operator|+
name|QStringLiteral
argument_list|(
literal|"/.kde"
argument_list|)
decl_stmt|;
if|if
condition|(
name|QFileInfo
argument_list|(
name|kdeHomePath
argument_list|)
operator|.
name|isDir
argument_list|()
condition|)
return|return
operator|new
name|QKdeTheme
argument_list|(
name|kdeHomePath
argument_list|,
name|kdeVersion
argument_list|)
return|;
name|qWarning
argument_list|(
literal|"%s: Unable to determine KDEHOME"
argument_list|,
name|Q_FUNC_INFO
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     \class QGnomeTheme     \brief QGnomeTheme is a theme implementation for the Gnome desktop.     \since 5.0     \internal     \ingroup qpa */
end_comment
begin_function
DECL|function|themeHint
name|QVariant
name|QGnomeTheme
operator|::
name|themeHint
parameter_list|(
name|QPlatformTheme
operator|::
name|ThemeHint
name|hint
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|hint
condition|)
block|{
case|case
name|QPlatformTheme
operator|::
name|SystemIconThemeName
case|:
case|case
name|QPlatformTheme
operator|::
name|SystemIconFallbackThemeName
case|:
return|return
name|QVariant
argument_list|(
name|QString
argument_list|(
name|QStringLiteral
argument_list|(
literal|"gnome"
argument_list|)
argument_list|)
argument_list|)
return|;
case|case
name|QPlatformTheme
operator|::
name|IconThemeSearchPaths
case|:
return|return
name|QVariant
argument_list|(
name|QGenericUnixTheme
operator|::
name|xdgIconThemePaths
argument_list|()
argument_list|)
return|;
case|case
name|QPlatformTheme
operator|::
name|StyleNames
case|:
block|{
name|QStringList
name|styleNames
decl_stmt|;
name|styleNames
operator|<<
name|QStringLiteral
argument_list|(
literal|"GTK+"
argument_list|)
operator|<<
name|QStringLiteral
argument_list|(
literal|"cleanlooks"
argument_list|)
operator|<<
name|QStringLiteral
argument_list|(
literal|"windows"
argument_list|)
expr_stmt|;
return|return
name|QVariant
argument_list|(
name|styleNames
argument_list|)
return|;
block|}
default|default:
break|break;
block|}
return|return
name|QPlatformTheme
operator|::
name|themeHint
argument_list|(
name|hint
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \brief Creates a UNIX theme according to the detected desktop environment. */
end_comment
begin_function
DECL|function|createUnixTheme
name|QPlatformTheme
modifier|*
name|QGenericUnixTheme
operator|::
name|createUnixTheme
parameter_list|()
block|{
name|QPlatformTheme
modifier|*
name|result
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|QGuiApplication
operator|::
name|desktopSettingsAware
argument_list|()
condition|)
block|{
switch|switch
condition|(
name|QGenericUnixServices
operator|::
name|desktopEnvironment
argument_list|()
condition|)
block|{
case|case
name|QGenericUnixServices
operator|::
name|DE_UNKNOWN
case|:
break|break;
case|case
name|QGenericUnixServices
operator|::
name|DE_KDE
case|:
name|result
operator|=
name|QKdeTheme
operator|::
name|createKdeTheme
argument_list|()
expr_stmt|;
break|break;
case|case
name|QGenericUnixServices
operator|::
name|DE_GNOME
case|:
name|result
operator|=
operator|new
name|QGnomeTheme
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|result
condition|)
name|result
operator|=
operator|new
name|QGenericUnixTheme
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
