begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|/*     This file was originally created by qdbusxml2cpp version 0.8     Command line was:     qdbusxml2cpp -p qxdgnotificationproxy ../../3rdparty/dbus-ifaces/org.freedesktop.Notifications.xml      However it is maintained manually.      It is also not part of the public API. This header file may change from     version to version without notice, or even be removed. */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QXDGNOTIFICATIONPROXY_P_H
end_ifndef
begin_define
DECL|macro|QXDGNOTIFICATIONPROXY_P_H
define|#
directive|define
name|QXDGNOTIFICATIONPROXY_P_H
end_define
begin_include
include|#
directive|include
file|<QtCore/QObject>
end_include
begin_include
include|#
directive|include
file|<QtCore/QByteArray>
end_include
begin_include
include|#
directive|include
file|<QtCore/QList>
end_include
begin_include
include|#
directive|include
file|<QtCore/QMap>
end_include
begin_include
include|#
directive|include
file|<QtCore/QString>
end_include
begin_include
include|#
directive|include
file|<QtCore/QStringList>
end_include
begin_include
include|#
directive|include
file|<QtCore/QVariant>
end_include
begin_include
include|#
directive|include
file|<QtDBus/QtDBus>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|function|Q_DECLARE_LOGGING_CATEGORY
name|Q_DECLARE_LOGGING_CATEGORY
argument_list|(
name|qLcTray
argument_list|)
comment|/*  * Proxy class for interface org.freedesktop.Notifications  */
name|class
name|QXdgNotificationInterface
range|:
name|public
name|QDBusAbstractInterface
block|{
name|Q_OBJECT
name|public
operator|:
specifier|static
specifier|inline
specifier|const
name|char
operator|*
name|staticInterfaceName
argument_list|()
block|{
return|return
literal|"org.freedesktop.Notifications"
return|;
block|}
name|public
operator|:
name|QXdgNotificationInterface
argument_list|(
specifier|const
name|QString
operator|&
name|service
argument_list|,
specifier|const
name|QString
operator|&
name|path
argument_list|,
specifier|const
name|QDBusConnection
operator|&
name|connection
argument_list|,
name|QObject
operator|*
name|parent
operator|=
literal|0
argument_list|)
block|;
operator|~
name|QXdgNotificationInterface
argument_list|()
block|;
name|public
name|Q_SLOTS
operator|:
comment|// METHODS
specifier|inline
name|QDBusPendingReply
operator|<
operator|>
name|closeNotification
argument_list|(
argument|uint id
argument_list|)
block|{
name|QList
operator|<
name|QVariant
operator|>
name|argumentList
block|;
name|argumentList
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|id
argument_list|)
block|;
return|return
name|asyncCallWithArgumentList
argument_list|(
name|QStringLiteral
argument_list|(
literal|"CloseNotification"
argument_list|)
argument_list|,
name|argumentList
argument_list|)
return|;
block|}
specifier|inline
name|QDBusPendingReply
operator|<
name|QStringList
operator|>
name|getCapabilities
argument_list|()
block|{
name|QList
operator|<
name|QVariant
operator|>
name|argumentList
block|;
return|return
name|asyncCallWithArgumentList
argument_list|(
name|QStringLiteral
argument_list|(
literal|"GetCapabilities"
argument_list|)
argument_list|,
name|argumentList
argument_list|)
return|;
block|}
specifier|inline
name|QDBusPendingReply
operator|<
name|QString
block|,
name|QString
block|,
name|QString
block|,
name|QString
operator|>
name|getServerInformation
argument_list|()
block|{
name|QList
operator|<
name|QVariant
operator|>
name|argumentList
block|;
return|return
name|asyncCallWithArgumentList
argument_list|(
name|QStringLiteral
argument_list|(
literal|"GetServerInformation"
argument_list|)
argument_list|,
name|argumentList
argument_list|)
return|;
block|}
specifier|inline
name|QDBusReply
operator|<
name|QString
operator|>
name|getServerInformation
argument_list|(
argument|QString&vendor
argument_list|,
argument|QString&version
argument_list|,
argument|QString&specVersion
argument_list|)
block|{
name|QList
operator|<
name|QVariant
operator|>
name|argumentList
block|;
name|QDBusMessage
name|reply
operator|=
name|callWithArgumentList
argument_list|(
name|QDBus
operator|::
name|Block
argument_list|,
name|QStringLiteral
argument_list|(
literal|"GetServerInformation"
argument_list|)
argument_list|,
name|argumentList
argument_list|)
block|;
if|if
condition|(
name|reply
operator|.
name|type
argument_list|()
operator|==
name|QDBusMessage
operator|::
name|ReplyMessage
operator|&&
name|reply
operator|.
name|arguments
argument_list|()
operator|.
name|count
argument_list|()
operator|==
literal|4
condition|)
block|{
name|vendor
operator|=
name|qdbus_cast
operator|<
name|QString
operator|>
operator|(
name|reply
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|)
expr_stmt|;
name|version
operator|=
name|qdbus_cast
operator|<
name|QString
operator|>
operator|(
name|reply
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|)
expr_stmt|;
name|specVersion
operator|=
name|qdbus_cast
operator|<
name|QString
operator|>
operator|(
name|reply
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|3
argument_list|)
operator|)
expr_stmt|;
block|}
return|return
name|reply
return|;
block|}
comment|// see https://developer.gnome.org/notification-spec/#basic-design
specifier|inline
name|QDBusPendingReply
operator|<
name|uint
operator|>
name|notify
argument_list|(
argument|const QString&appName
argument_list|,
argument|uint replacesId
argument_list|,
argument|const QString&appIcon
argument_list|,
argument|const QString&summary
argument_list|,
argument|const QString&body
argument_list|,
argument|const QStringList&actions
argument_list|,
argument|const QVariantMap&hints
argument_list|,
argument|int timeout
argument_list|)
block|{
name|qCDebug
argument_list|(
name|qLcTray
argument_list|)
operator|<<
name|appName
operator|<<
name|replacesId
operator|<<
name|appIcon
operator|<<
name|summary
operator|<<
name|body
operator|<<
name|actions
operator|<<
name|hints
operator|<<
name|timeout
block|;
name|QList
operator|<
name|QVariant
operator|>
name|argumentList
block|;
name|argumentList
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|appName
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|replacesId
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|appIcon
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|summary
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|body
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|actions
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|hints
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|timeout
argument_list|)
block|;
return|return
name|asyncCallWithArgumentList
argument_list|(
name|QStringLiteral
argument_list|(
literal|"Notify"
argument_list|)
argument_list|,
name|argumentList
argument_list|)
return|;
block|}
name|Q_SIGNALS
operator|:
name|void
name|ActionInvoked
argument_list|(
argument|uint id
argument_list|,
argument|const QString&action_key
argument_list|)
block|;
name|void
name|NotificationClosed
argument_list|(
argument|uint id
argument_list|,
argument|uint reason
argument_list|)
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|namespace
name|org
block|{
name|namespace
name|freedesktop
block|{
typedef|typedef
operator|::
name|QXdgNotificationInterface
name|Notifications
expr_stmt|;
block|}
block|}
end_decl_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
end_unit
