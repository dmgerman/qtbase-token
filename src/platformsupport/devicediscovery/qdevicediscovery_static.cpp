begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qdevicediscovery_p.h"
end_include
begin_include
include|#
directive|include
file|<QStringList>
end_include
begin_include
include|#
directive|include
file|<QCoreApplication>
end_include
begin_include
include|#
directive|include
file|<QObject>
end_include
begin_include
include|#
directive|include
file|<QHash>
end_include
begin_include
include|#
directive|include
file|<QDir>
end_include
begin_comment
comment|//#define QT_QPA_DEVICE_DISCOVERY_DEBUG
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|QT_QPA_DEVICE_DISCOVERY_DEBUG
end_ifdef
begin_include
include|#
directive|include
file|<QtDebug>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|create
name|QDeviceDiscovery
modifier|*
name|QDeviceDiscovery
operator|::
name|create
parameter_list|(
name|QDeviceTypes
name|types
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
block|{
return|return
operator|new
name|QDeviceDiscovery
argument_list|(
name|types
argument_list|,
name|parent
argument_list|)
return|;
block|}
end_function
begin_constructor
DECL|function|QDeviceDiscovery
name|QDeviceDiscovery
operator|::
name|QDeviceDiscovery
parameter_list|(
name|QDeviceTypes
name|types
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|m_types
argument_list|(
name|types
argument_list|)
block|{
ifdef|#
directive|ifdef
name|QT_QPA_DEVICE_DISCOVERY_DEBUG
name|qWarning
argument_list|()
operator|<<
literal|"New static DeviceDiscovery created for type"
operator|<<
name|types
expr_stmt|;
endif|#
directive|endif
block|}
end_constructor
begin_destructor
DECL|function|~QDeviceDiscovery
name|QDeviceDiscovery
operator|::
name|~
name|QDeviceDiscovery
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|scanConnectedDevices
name|QStringList
name|QDeviceDiscovery
operator|::
name|scanConnectedDevices
parameter_list|()
block|{
name|QStringList
name|devices
decl_stmt|;
comment|// check for input devices
name|QDir
name|dir
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|QT_EVDEV_DEVICE_PATH
argument_list|)
argument_list|)
decl_stmt|;
name|dir
operator|.
name|setFilter
argument_list|(
name|QDir
operator|::
name|System
argument_list|)
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|deviceFile
decl|,
name|dir
operator|.
name|entryList
argument_list|()
control|)
block|{
if|if
condition|(
name|checkDeviceType
argument_list|(
name|deviceFile
argument_list|)
condition|)
name|devices
operator|<<
operator|(
name|dir
operator|.
name|absolutePath
argument_list|()
operator|+
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"/"
argument_list|)
operator|+
name|deviceFile
operator|)
expr_stmt|;
block|}
comment|// check for drm devices
name|dir
operator|.
name|setPath
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|QT_DRM_DEVICE_PATH
argument_list|)
argument_list|)
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|deviceFile
decl|,
name|dir
operator|.
name|entryList
argument_list|()
control|)
block|{
if|if
condition|(
name|checkDeviceType
argument_list|(
name|deviceFile
argument_list|)
condition|)
name|devices
operator|<<
operator|(
name|dir
operator|.
name|absolutePath
argument_list|()
operator|+
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"/"
argument_list|)
operator|+
name|deviceFile
operator|)
expr_stmt|;
block|}
ifdef|#
directive|ifdef
name|QT_QPA_DEVICE_DISCOVERY_DEBUG
name|qWarning
argument_list|()
operator|<<
literal|"Static DeviceDiscovery found matching devices"
operator|<<
name|devices
expr_stmt|;
endif|#
directive|endif
return|return
name|devices
return|;
block|}
end_function
begin_function
DECL|function|checkDeviceType
name|bool
name|QDeviceDiscovery
operator|::
name|checkDeviceType
parameter_list|(
specifier|const
name|QString
modifier|&
name|device
parameter_list|)
block|{
if|if
condition|(
operator|(
name|m_types
operator|&
operator|(
name|Device_Keyboard
operator||
name|Device_Mouse
operator||
name|Device_Touchpad
operator||
name|Device_Touchscreen
operator|)
operator|)
operator|&&
name|device
operator|.
name|startsWith
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|QT_EVDEV_DEVICE_PREFIX
argument_list|)
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
operator|(
name|m_types
operator|&
name|Device_DRM
operator|)
operator|&&
name|device
operator|.
name|startsWith
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|QT_DRM_DEVICE_PREFIX
argument_list|)
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
