begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qdevicediscovery_static_p.h"
end_include
begin_include
include|#
directive|include
file|<QStringList>
end_include
begin_include
include|#
directive|include
file|<QCoreApplication>
end_include
begin_include
include|#
directive|include
file|<QObject>
end_include
begin_include
include|#
directive|include
file|<QHash>
end_include
begin_include
include|#
directive|include
file|<QDir>
end_include
begin_include
include|#
directive|include
file|<QLoggingCategory>
end_include
begin_include
include|#
directive|include
file|<QtCore/private/qcore_unix_p.h>
end_include
begin_include
include|#
directive|include
file|<linux/input.h>
end_include
begin_include
include|#
directive|include
file|<fcntl.h>
end_include
begin_comment
comment|/* android (and perhaps some other linux-derived stuff) don't define everything  * in linux/input.h, so we'll need to do that ourselves.  */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|KEY_CNT
end_ifndef
begin_define
DECL|macro|KEY_CNT
define|#
directive|define
name|KEY_CNT
value|(KEY_MAX+1)
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|REL_CNT
end_ifndef
begin_define
DECL|macro|REL_CNT
define|#
directive|define
name|REL_CNT
value|(REL_MAX+1)
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|ABS_CNT
end_ifndef
begin_define
DECL|macro|ABS_CNT
define|#
directive|define
name|ABS_CNT
value|(ABS_MAX+1)
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|ABS_MT_POSITION_X
end_ifndef
begin_define
DECL|macro|ABS_MT_POSITION_X
define|#
directive|define
name|ABS_MT_POSITION_X
value|0x35
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|ABS_MT_POSITION_Y
end_ifndef
begin_define
DECL|macro|ABS_MT_POSITION_Y
define|#
directive|define
name|ABS_MT_POSITION_Y
value|0x36
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_define
DECL|macro|LONG_BITS
define|#
directive|define
name|LONG_BITS
value|(sizeof(long) * 8 )
end_define
begin_define
DECL|macro|LONG_FIELD_SIZE
define|#
directive|define
name|LONG_FIELD_SIZE
parameter_list|(
name|bits
parameter_list|)
value|((bits / LONG_BITS) + 1)
end_define
begin_function
DECL|function|testBit
specifier|static
name|bool
name|testBit
parameter_list|(
name|long
name|bit
parameter_list|,
specifier|const
name|long
modifier|*
name|field
parameter_list|)
block|{
return|return
operator|(
name|field
index|[
name|bit
operator|/
name|LONG_BITS
index|]
operator|>>
name|bit
operator|%
name|LONG_BITS
operator|)
operator|&
literal|1
return|;
block|}
end_function
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
name|Q_LOGGING_CATEGORY
argument_list|(
name|lcDD
argument_list|,
literal|"qt.qpa.input"
argument_list|)
DECL|function|create
name|QDeviceDiscovery
modifier|*
name|QDeviceDiscovery
operator|::
name|create
argument_list|(
name|QDeviceTypes
name|types
argument_list|,
name|QObject
operator|*
name|parent
argument_list|)
argument_list|{     return
operator|new
name|QDeviceDiscoveryStatic
argument_list|(
name|types
argument_list|,
name|parent
argument_list|)
argument_list|; }
DECL|function|QDeviceDiscoveryStatic
name|QDeviceDiscoveryStatic
operator|::
name|QDeviceDiscoveryStatic
argument_list|(
name|QDeviceTypes
name|types
argument_list|,
name|QObject
operator|*
name|parent
argument_list|)
range|:
name|QDeviceDiscovery
argument_list|(
argument|types
argument_list|,
argument|parent
argument_list|)
block|{
name|qCDebug
argument_list|(
name|lcDD
argument_list|)
operator|<<
literal|"static device discovery for type"
operator|<<
name|types
block|; }
DECL|function|scanConnectedDevices
name|QStringList
name|QDeviceDiscoveryStatic
operator|::
name|scanConnectedDevices
operator|(
operator|)
block|{
name|QStringList
name|devices
block|;
name|QDir
name|dir
block|;
name|dir
operator|.
name|setFilter
argument_list|(
name|QDir
operator|::
name|System
argument_list|)
block|;
comment|// check for input devices
if|if
condition|(
name|m_types
operator|&
name|Device_InputMask
condition|)
block|{
name|dir
operator|.
name|setPath
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|QT_EVDEV_DEVICE_PATH
argument_list|)
argument_list|)
block|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|deviceFile
decl|,
name|dir
operator|.
name|entryList
argument_list|()
control|)
block|{
name|QString
name|absoluteFilePath
operator|=
name|dir
operator|.
name|absolutePath
argument_list|()
operator|+
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
operator|+
name|deviceFile
block|;
if|if
condition|(
name|checkDeviceType
argument_list|(
name|absoluteFilePath
argument_list|)
condition|)
name|devices
operator|<<
name|absoluteFilePath
expr_stmt|;
block|}
block|}
end_decl_stmt
begin_comment
comment|// check for drm devices
end_comment
begin_if
if|if
condition|(
name|m_types
operator|&
name|Device_VideoMask
condition|)
block|{
name|dir
operator|.
name|setPath
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|QT_DRM_DEVICE_PATH
argument_list|)
argument_list|)
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|deviceFile
decl|,
name|dir
operator|.
name|entryList
argument_list|()
control|)
block|{
name|QString
name|absoluteFilePath
init|=
name|dir
operator|.
name|absolutePath
argument_list|()
operator|+
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
operator|+
name|deviceFile
decl_stmt|;
if|if
condition|(
name|checkDeviceType
argument_list|(
name|absoluteFilePath
argument_list|)
condition|)
name|devices
operator|<<
name|absoluteFilePath
expr_stmt|;
block|}
block|}
end_if
begin_expr_stmt
name|qCDebug
argument_list|(
name|lcDD
argument_list|)
operator|<<
literal|"Found matching devices"
operator|<<
name|devices
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|devices
return|;
end_return
begin_macro
unit|}  bool
DECL|function|checkDeviceType
name|QDeviceDiscoveryStatic
end_macro
begin_expr_stmt
DECL|function|checkDeviceType
operator|::
name|checkDeviceType
operator|(
specifier|const
name|QString
operator|&
name|device
operator|)
block|{
name|int
name|fd
operator|=
name|QT_OPEN
argument_list|(
name|device
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|O_RDONLY
operator||
name|O_NDELAY
argument_list|,
literal|0
argument_list|)
block|;
if|if
condition|(
name|Q_UNLIKELY
argument_list|(
name|fd
operator|==
operator|-
literal|1
argument_list|)
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"Device discovery cannot open device"
operator|<<
name|device
expr_stmt|;
return|return
literal|false
return|;
block|}
name|qCDebug
argument_list|(
name|lcDD
argument_list|)
operator|<<
literal|"doing static device discovery for "
operator|<<
name|device
expr_stmt|;
end_expr_stmt
begin_if
if|if
condition|(
operator|(
name|m_types
operator|&
name|Device_DRM
operator|)
operator|&&
name|device
operator|.
name|contains
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|QT_DRM_DEVICE_PREFIX
argument_list|)
argument_list|)
condition|)
block|{
name|QT_CLOSE
argument_list|(
name|fd
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_if
begin_decl_stmt
name|long
name|bitsAbs
index|[
name|LONG_FIELD_SIZE
argument_list|(
name|ABS_CNT
argument_list|)
index|]
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|long
name|bitsKey
index|[
name|LONG_FIELD_SIZE
argument_list|(
name|KEY_CNT
argument_list|)
index|]
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|long
name|bitsRel
index|[
name|LONG_FIELD_SIZE
argument_list|(
name|REL_CNT
argument_list|)
index|]
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|memset
argument_list|(
name|bitsAbs
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|bitsAbs
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|memset
argument_list|(
name|bitsKey
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|bitsKey
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|memset
argument_list|(
name|bitsRel
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|bitsRel
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|ioctl
argument_list|(
name|fd
argument_list|,
name|EVIOCGBIT
argument_list|(
name|EV_ABS
argument_list|,
sizeof|sizeof
argument_list|(
name|bitsAbs
argument_list|)
argument_list|)
argument_list|,
name|bitsAbs
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|ioctl
argument_list|(
name|fd
argument_list|,
name|EVIOCGBIT
argument_list|(
name|EV_KEY
argument_list|,
sizeof|sizeof
argument_list|(
name|bitsKey
argument_list|)
argument_list|)
argument_list|,
name|bitsKey
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|ioctl
argument_list|(
name|fd
argument_list|,
name|EVIOCGBIT
argument_list|(
name|EV_REL
argument_list|,
sizeof|sizeof
argument_list|(
name|bitsRel
argument_list|)
argument_list|)
argument_list|,
name|bitsRel
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QT_CLOSE
argument_list|(
name|fd
argument_list|)
expr_stmt|;
end_expr_stmt
begin_if
if|if
condition|(
operator|(
name|m_types
operator|&
name|Device_Keyboard
operator|)
condition|)
block|{
if|if
condition|(
name|testBit
argument_list|(
name|KEY_Q
argument_list|,
name|bitsKey
argument_list|)
condition|)
block|{
name|qCDebug
argument_list|(
name|lcDD
argument_list|)
operator|<<
literal|"Found keyboard at"
operator|<<
name|device
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
end_if
begin_if
if|if
condition|(
operator|(
name|m_types
operator|&
name|Device_Mouse
operator|)
condition|)
block|{
if|if
condition|(
name|testBit
argument_list|(
name|REL_X
argument_list|,
name|bitsRel
argument_list|)
operator|&&
name|testBit
argument_list|(
name|REL_Y
argument_list|,
name|bitsRel
argument_list|)
operator|&&
name|testBit
argument_list|(
name|BTN_MOUSE
argument_list|,
name|bitsKey
argument_list|)
condition|)
block|{
name|qCDebug
argument_list|(
name|lcDD
argument_list|)
operator|<<
literal|"Found mouse at"
operator|<<
name|device
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
end_if
begin_if
if|if
condition|(
operator|(
name|m_types
operator|&
operator|(
name|Device_Touchpad
operator||
name|Device_Touchscreen
operator|)
operator|)
condition|)
block|{
if|if
condition|(
name|testBit
argument_list|(
name|ABS_X
argument_list|,
name|bitsAbs
argument_list|)
operator|&&
name|testBit
argument_list|(
name|ABS_Y
argument_list|,
name|bitsAbs
argument_list|)
condition|)
block|{
if|if
condition|(
operator|(
name|m_types
operator|&
name|Device_Touchpad
operator|)
operator|&&
name|testBit
argument_list|(
name|BTN_TOOL_FINGER
argument_list|,
name|bitsKey
argument_list|)
condition|)
block|{
name|qCDebug
argument_list|(
name|lcDD
argument_list|)
operator|<<
literal|"Found touchpad at"
operator|<<
name|device
expr_stmt|;
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
operator|(
name|m_types
operator|&
name|Device_Touchscreen
operator|)
operator|&&
name|testBit
argument_list|(
name|BTN_TOUCH
argument_list|,
name|bitsKey
argument_list|)
condition|)
block|{
name|qCDebug
argument_list|(
name|lcDD
argument_list|)
operator|<<
literal|"Found touchscreen at"
operator|<<
name|device
expr_stmt|;
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
operator|(
name|m_types
operator|&
name|Device_Tablet
operator|)
operator|&&
operator|(
name|testBit
argument_list|(
name|BTN_STYLUS
argument_list|,
name|bitsKey
argument_list|)
operator|||
name|testBit
argument_list|(
name|BTN_TOOL_PEN
argument_list|,
name|bitsKey
argument_list|)
operator|)
condition|)
block|{
name|qCDebug
argument_list|(
name|lcDD
argument_list|)
operator|<<
literal|"Found tablet at"
operator|<<
name|device
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|testBit
argument_list|(
name|ABS_MT_POSITION_X
argument_list|,
name|bitsAbs
argument_list|)
operator|&&
name|testBit
argument_list|(
name|ABS_MT_POSITION_Y
argument_list|,
name|bitsAbs
argument_list|)
condition|)
block|{
name|qCDebug
argument_list|(
name|lcDD
argument_list|)
operator|<<
literal|"Found new-style touchscreen at"
operator|<<
name|device
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
end_if
begin_if
if|if
condition|(
operator|(
name|m_types
operator|&
name|Device_Joystick
operator|)
condition|)
block|{
if|if
condition|(
name|testBit
argument_list|(
name|BTN_A
argument_list|,
name|bitsKey
argument_list|)
operator|||
name|testBit
argument_list|(
name|BTN_TRIGGER
argument_list|,
name|bitsKey
argument_list|)
operator|||
name|testBit
argument_list|(
name|ABS_RX
argument_list|,
name|bitsAbs
argument_list|)
condition|)
block|{
name|qCDebug
argument_list|(
name|lcDD
argument_list|)
operator|<<
literal|"Found joystick/gamepad at"
operator|<<
name|device
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
end_if
begin_return
return|return
literal|false
return|;
end_return
unit|}  QT_END_NAMESPACE
end_unit
