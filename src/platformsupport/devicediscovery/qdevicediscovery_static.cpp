begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia. For licensing terms and ** conditions see http://qt.digia.com/licensing. For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights. These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qdevicediscovery_p.h"
end_include
begin_include
include|#
directive|include
file|<QStringList>
end_include
begin_include
include|#
directive|include
file|<QCoreApplication>
end_include
begin_include
include|#
directive|include
file|<QObject>
end_include
begin_include
include|#
directive|include
file|<QHash>
end_include
begin_include
include|#
directive|include
file|<QDir>
end_include
begin_include
include|#
directive|include
file|<QtCore/private/qcore_unix_p.h>
end_include
begin_include
include|#
directive|include
file|<linux/input.h>
end_include
begin_include
include|#
directive|include
file|<fcntl.h>
end_include
begin_comment
comment|/* android (and perhaps some other linux-derived stuff) don't define everything  * in linux/input.h, so we'll need to do that ourselves.  */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|KEY_CNT
end_ifndef
begin_define
DECL|macro|KEY_CNT
define|#
directive|define
name|KEY_CNT
value|(KEY_MAX+1)
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|REL_CNT
end_ifndef
begin_define
DECL|macro|REL_CNT
define|#
directive|define
name|REL_CNT
value|(REL_MAX+1)
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|ABS_CNT
end_ifndef
begin_define
DECL|macro|ABS_CNT
define|#
directive|define
name|ABS_CNT
value|(ABS_MAX+1)
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//#define QT_QPA_DEVICE_DISCOVERY_DEBUG
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|QT_QPA_DEVICE_DISCOVERY_DEBUG
end_ifdef
begin_include
include|#
directive|include
file|<QtDebug>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_define
DECL|macro|LONG_BITS
define|#
directive|define
name|LONG_BITS
value|(sizeof(long) * 8 )
end_define
begin_define
DECL|macro|LONG_FIELD_SIZE
define|#
directive|define
name|LONG_FIELD_SIZE
parameter_list|(
name|bits
parameter_list|)
value|((bits / LONG_BITS) + 1)
end_define
begin_function
DECL|function|testBit
specifier|static
name|bool
name|testBit
parameter_list|(
name|long
name|bit
parameter_list|,
specifier|const
name|long
modifier|*
name|field
parameter_list|)
block|{
return|return
operator|(
name|field
index|[
name|bit
operator|/
name|LONG_BITS
index|]
operator|>>
name|bit
operator|%
name|LONG_BITS
operator|)
operator|&
literal|1
return|;
block|}
end_function
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|create
name|QDeviceDiscovery
modifier|*
name|QDeviceDiscovery
operator|::
name|create
parameter_list|(
name|QDeviceTypes
name|types
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
block|{
return|return
operator|new
name|QDeviceDiscovery
argument_list|(
name|types
argument_list|,
name|parent
argument_list|)
return|;
block|}
end_function
begin_constructor
DECL|function|QDeviceDiscovery
name|QDeviceDiscovery
operator|::
name|QDeviceDiscovery
parameter_list|(
name|QDeviceTypes
name|types
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|m_types
argument_list|(
name|types
argument_list|)
block|{
ifdef|#
directive|ifdef
name|QT_QPA_DEVICE_DISCOVERY_DEBUG
name|qWarning
argument_list|()
operator|<<
literal|"New DeviceDiscovery created for type"
operator|<<
name|types
expr_stmt|;
endif|#
directive|endif
block|}
end_constructor
begin_destructor
DECL|function|~QDeviceDiscovery
name|QDeviceDiscovery
operator|::
name|~
name|QDeviceDiscovery
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|scanConnectedDevices
name|QStringList
name|QDeviceDiscovery
operator|::
name|scanConnectedDevices
parameter_list|()
block|{
name|QStringList
name|devices
decl_stmt|;
name|QDir
name|dir
decl_stmt|;
name|dir
operator|.
name|setFilter
argument_list|(
name|QDir
operator|::
name|System
argument_list|)
expr_stmt|;
comment|// check for input devices
if|if
condition|(
name|m_types
operator|&
name|Device_InputMask
condition|)
block|{
name|dir
operator|.
name|setPath
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|QT_EVDEV_DEVICE_PATH
argument_list|)
argument_list|)
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|deviceFile
decl|,
name|dir
operator|.
name|entryList
argument_list|()
control|)
block|{
name|QString
name|absoluteFilePath
init|=
name|dir
operator|.
name|absolutePath
argument_list|()
operator|+
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"/"
argument_list|)
operator|+
name|deviceFile
decl_stmt|;
if|if
condition|(
name|checkDeviceType
argument_list|(
name|absoluteFilePath
argument_list|)
condition|)
name|devices
operator|<<
name|absoluteFilePath
expr_stmt|;
block|}
block|}
comment|// check for drm devices
if|if
condition|(
name|m_types
operator|&
name|Device_VideoMask
condition|)
block|{
name|dir
operator|.
name|setPath
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|QT_DRM_DEVICE_PATH
argument_list|)
argument_list|)
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|deviceFile
decl|,
name|dir
operator|.
name|entryList
argument_list|()
control|)
block|{
name|QString
name|absoluteFilePath
init|=
name|dir
operator|.
name|absolutePath
argument_list|()
operator|+
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"/"
argument_list|)
operator|+
name|deviceFile
decl_stmt|;
if|if
condition|(
name|checkDeviceType
argument_list|(
name|absoluteFilePath
argument_list|)
condition|)
name|devices
operator|<<
name|absoluteFilePath
expr_stmt|;
block|}
block|}
ifdef|#
directive|ifdef
name|QT_QPA_DEVICE_DISCOVERY_DEBUG
name|qWarning
argument_list|()
operator|<<
literal|"DeviceDiscovery found matching devices"
operator|<<
name|devices
expr_stmt|;
endif|#
directive|endif
return|return
name|devices
return|;
block|}
end_function
begin_function
DECL|function|checkDeviceType
name|bool
name|QDeviceDiscovery
operator|::
name|checkDeviceType
parameter_list|(
specifier|const
name|QString
modifier|&
name|device
parameter_list|)
block|{
name|bool
name|ret
init|=
literal|false
decl_stmt|;
name|int
name|fd
init|=
name|QT_OPEN
argument_list|(
name|device
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|O_RDONLY
operator||
name|O_NDELAY
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fd
condition|)
block|{
ifdef|#
directive|ifdef
name|QT_QPA_DEVICE_DISCOVERY_DEBUG
name|qWarning
argument_list|()
operator|<<
literal|"DeviceDiscovery cannot open device"
operator|<<
name|device
expr_stmt|;
endif|#
directive|endif
return|return
literal|false
return|;
block|}
name|long
name|bitsKey
index|[
name|LONG_FIELD_SIZE
argument_list|(
name|KEY_CNT
argument_list|)
index|]
decl_stmt|;
if|if
condition|(
name|ioctl
argument_list|(
name|fd
argument_list|,
name|EVIOCGBIT
argument_list|(
name|EV_KEY
argument_list|,
sizeof|sizeof
argument_list|(
name|bitsKey
argument_list|)
argument_list|)
argument_list|,
name|bitsKey
argument_list|)
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|ret
operator|&&
operator|(
name|m_types
operator|&
name|Device_Keyboard
operator|)
condition|)
block|{
if|if
condition|(
name|testBit
argument_list|(
name|KEY_Q
argument_list|,
name|bitsKey
argument_list|)
condition|)
block|{
ifdef|#
directive|ifdef
name|QT_QPA_DEVICE_DISCOVERY_DEBUG
name|qWarning
argument_list|()
operator|<<
literal|"DeviceDiscovery found keyboard at"
operator|<<
name|device
expr_stmt|;
endif|#
directive|endif
name|ret
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|ret
operator|&&
operator|(
name|m_types
operator|&
name|Device_Mouse
operator|)
condition|)
block|{
name|long
name|bitsRel
index|[
name|LONG_FIELD_SIZE
argument_list|(
name|REL_CNT
argument_list|)
index|]
decl_stmt|;
if|if
condition|(
name|ioctl
argument_list|(
name|fd
argument_list|,
name|EVIOCGBIT
argument_list|(
name|EV_REL
argument_list|,
sizeof|sizeof
argument_list|(
name|bitsRel
argument_list|)
argument_list|)
argument_list|,
name|bitsRel
argument_list|)
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|testBit
argument_list|(
name|REL_X
argument_list|,
name|bitsRel
argument_list|)
operator|&&
name|testBit
argument_list|(
name|REL_Y
argument_list|,
name|bitsRel
argument_list|)
operator|&&
name|testBit
argument_list|(
name|BTN_MOUSE
argument_list|,
name|bitsKey
argument_list|)
condition|)
block|{
ifdef|#
directive|ifdef
name|QT_QPA_DEVICE_DISCOVERY_DEBUG
name|qWarning
argument_list|()
operator|<<
literal|"DeviceDiscovery found mouse at"
operator|<<
name|device
expr_stmt|;
endif|#
directive|endif
name|ret
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|ret
operator|&&
operator|(
name|m_types
operator|&
operator|(
name|Device_Touchpad
operator||
name|Device_Touchscreen
operator|)
operator|)
condition|)
block|{
name|long
name|bitsAbs
index|[
name|LONG_FIELD_SIZE
argument_list|(
name|ABS_CNT
argument_list|)
index|]
decl_stmt|;
if|if
condition|(
name|ioctl
argument_list|(
name|fd
argument_list|,
name|EVIOCGBIT
argument_list|(
name|EV_ABS
argument_list|,
sizeof|sizeof
argument_list|(
name|bitsAbs
argument_list|)
argument_list|)
argument_list|,
name|bitsAbs
argument_list|)
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|testBit
argument_list|(
name|ABS_X
argument_list|,
name|bitsAbs
argument_list|)
operator|&&
name|testBit
argument_list|(
name|ABS_Y
argument_list|,
name|bitsAbs
argument_list|)
condition|)
block|{
if|if
condition|(
operator|(
name|m_types
operator|&
name|Device_Touchpad
operator|)
operator|&&
name|testBit
argument_list|(
name|BTN_TOOL_FINGER
argument_list|,
name|bitsKey
argument_list|)
condition|)
block|{
ifdef|#
directive|ifdef
name|QT_QPA_DEVICE_DISCOVERY_DEBUG
name|qWarning
argument_list|()
operator|<<
literal|"DeviceDiscovery found touchpad at"
operator|<<
name|device
expr_stmt|;
endif|#
directive|endif
name|ret
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|m_types
operator|&
name|Device_Touchscreen
operator|)
operator|&&
name|testBit
argument_list|(
name|BTN_TOUCH
argument_list|,
name|bitsKey
argument_list|)
condition|)
block|{
ifdef|#
directive|ifdef
name|QT_QPA_DEVICE_DISCOVERY_DEBUG
name|qWarning
argument_list|()
operator|<<
literal|"DeviceDiscovery found touchscreen at"
operator|<<
name|device
expr_stmt|;
endif|#
directive|endif
name|ret
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|m_types
operator|&
name|Device_Tablet
operator|)
operator|&&
operator|(
name|testBit
argument_list|(
name|BTN_STYLUS
argument_list|,
name|bitsKey
argument_list|)
operator|||
name|testBit
argument_list|(
name|BTN_TOOL_PEN
argument_list|,
name|bitsKey
argument_list|)
operator|)
condition|)
block|{
ifdef|#
directive|ifdef
name|QT_QPA_DEVICE_DISCOVERY_DEBUG
name|qWarning
argument_list|()
operator|<<
literal|"DeviceDiscovery found tablet at"
operator|<<
name|device
expr_stmt|;
endif|#
directive|endif
name|ret
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|ret
operator|&&
operator|(
name|m_types
operator|&
name|Device_DRM
operator|)
operator|&&
name|device
operator|.
name|contains
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|QT_DRM_DEVICE_PREFIX
argument_list|)
argument_list|)
condition|)
name|ret
operator|=
literal|true
expr_stmt|;
name|QT_CLOSE
argument_list|(
name|fd
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
