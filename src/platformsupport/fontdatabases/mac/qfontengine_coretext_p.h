begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QFONTENGINE_CORETEXT_P_H
end_ifndef
begin_define
DECL|macro|QFONTENGINE_CORETEXT_P_H
define|#
directive|define
name|QFONTENGINE_CORETEXT_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists purely as an
end_comment
begin_comment
comment|// implementation detail.  This header file may change from version to
end_comment
begin_comment
comment|// version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|<private/qfontengine_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qcore_mac_p.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|Q_OS_IOS
end_ifndef
begin_include
include|#
directive|include
file|<ApplicationServices/ApplicationServices.h>
end_include
begin_else
else|#
directive|else
end_else
begin_include
include|#
directive|include
file|<CoreText/CoreText.h>
end_include
begin_include
include|#
directive|include
file|<CoreGraphics/CoreGraphics.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
name|class
name|QCoreTextFontEngine
range|:
name|public
name|QFontEngine
block|{
name|public
operator|:
name|QCoreTextFontEngine
argument_list|(
argument|CTFontRef font
argument_list|,
argument|const QFontDef&def
argument_list|)
block|;
name|QCoreTextFontEngine
argument_list|(
argument|CGFontRef font
argument_list|,
argument|const QFontDef&def
argument_list|)
block|;
operator|~
name|QCoreTextFontEngine
argument_list|()
block|;
name|glyph_t
name|glyphIndex
argument_list|(
argument|uint ucs4
argument_list|)
specifier|const
name|Q_DECL_OVERRIDE
block|;
name|bool
name|stringToCMap
argument_list|(
argument|const QChar *str
argument_list|,
argument|int len
argument_list|,
argument|QGlyphLayout *glyphs
argument_list|,
argument|int *nglyphs
argument_list|,
argument|ShaperFlags flags
argument_list|)
specifier|const
name|Q_DECL_OVERRIDE
block|;
name|void
name|recalcAdvances
argument_list|(
argument|QGlyphLayout *
argument_list|,
argument|ShaperFlags
argument_list|)
specifier|const
name|Q_DECL_OVERRIDE
block|;
name|glyph_metrics_t
name|boundingBox
argument_list|(
argument|const QGlyphLayout&glyphs
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|glyph_metrics_t
name|boundingBox
argument_list|(
argument|glyph_t glyph
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|QFixed
name|ascent
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|;
name|QFixed
name|descent
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|;
name|QFixed
name|leading
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|;
name|QFixed
name|xHeight
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|;
name|qreal
name|maxCharWidth
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|;
name|QFixed
name|averageCharWidth
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|;
name|void
name|addGlyphsToPath
argument_list|(
argument|glyph_t *glyphs
argument_list|,
argument|QFixedPoint *positions
argument_list|,
argument|int numGlyphs
argument_list|,
argument|QPainterPath *path
argument_list|,
argument|QTextItem::RenderFlags
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|bool
name|canRender
argument_list|(
argument|const QChar *string
argument_list|,
argument|int len
argument_list|)
specifier|const
name|Q_DECL_OVERRIDE
block|;
name|int
name|synthesized
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|synthesisFlags
return|;
block|}
name|bool
name|supportsSubPixelPositions
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|true
return|;
block|}
name|void
name|draw
argument_list|(
argument|CGContextRef ctx
argument_list|,
argument|qreal x
argument_list|,
argument|qreal y
argument_list|,
argument|const QTextItemInt&ti
argument_list|,
argument|int paintDeviceHeight
argument_list|)
block|;
name|FaceId
name|faceId
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|;
name|bool
name|getSfntTableData
argument_list|(
argument|uint
comment|/*tag*/
argument_list|,
argument|uchar *
comment|/*buffer*/
argument_list|,
argument|uint *
comment|/*length*/
argument_list|)
specifier|const
name|Q_DECL_OVERRIDE
block|;
name|void
name|getUnscaledGlyph
argument_list|(
argument|glyph_t glyph
argument_list|,
argument|QPainterPath *path
argument_list|,
argument|glyph_metrics_t *metrics
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|QImage
name|alphaMapForGlyph
argument_list|(
argument|glyph_t
argument_list|,
argument|QFixed subPixelPosition
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|QImage
name|alphaMapForGlyph
argument_list|(
argument|glyph_t glyph
argument_list|,
argument|QFixed subPixelPosition
argument_list|,
argument|const QTransform&t
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|QImage
name|alphaRGBMapForGlyph
argument_list|(
argument|glyph_t
argument_list|,
argument|QFixed subPixelPosition
argument_list|,
argument|const QTransform&t
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|glyph_metrics_t
name|alphaMapBoundingBox
argument_list|(
argument|glyph_t glyph
argument_list|,
argument|QFixed
argument_list|,
argument|const QTransform&matrix
argument_list|,
argument|GlyphFormat
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|QImage
name|bitmapForGlyph
argument_list|(
argument|glyph_t
argument_list|,
argument|QFixed subPixelPosition
argument_list|,
argument|const QTransform&t
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|QFixed
name|emSquareSize
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|;
name|bool
name|supportsTransformation
argument_list|(
argument|const QTransform&transform
argument_list|)
specifier|const
name|Q_DECL_OVERRIDE
block|;
name|QFontEngine
operator|*
name|cloneWithSize
argument_list|(
argument|qreal pixelSize
argument_list|)
specifier|const
name|Q_DECL_OVERRIDE
block|;
name|int
name|glyphMargin
argument_list|(
argument|QFontEngine::GlyphFormat format
argument_list|)
name|Q_DECL_OVERRIDE
block|{
name|Q_UNUSED
argument_list|(
name|format
argument_list|)
block|;
return|return
literal|0
return|;
block|}
name|QFontEngine
operator|::
name|Properties
name|properties
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|;
specifier|static
name|bool
name|supportsColorGlyphs
argument_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_IOS
argument_list|)
return|return
name|true
return|;
elif|#
directive|elif
name|MAC_OS_X_VERSION_MAX_ALLOWED
operator|>=
literal|1070
if|#
directive|if
name|MAC_OS_X_VERSION_MIN_REQUIRED
operator|<
literal|1070
return|return
operator|&
name|CTFontDrawGlyphs
return|;
end_decl_stmt
begin_else
else|#
directive|else
end_else
begin_return
return|return
name|true
return|;
end_return
begin_endif
endif|#
directive|endif
end_endif
begin_else
else|#
directive|else
end_else
begin_return
return|return
name|false
return|;
end_return
begin_endif
endif|#
directive|endif
end_endif
begin_function_decl
unit|}      static
name|bool
name|ct_getSfntTable
parameter_list|(
name|void
modifier|*
name|user_data
parameter_list|,
name|uint
name|tag
parameter_list|,
name|uchar
modifier|*
name|buffer
parameter_list|,
name|uint
modifier|*
name|length
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
specifier|static
name|QFont
operator|::
name|Weight
name|qtWeightFromCFWeight
argument_list|(
argument|float value
argument_list|)
expr_stmt|;
end_expr_stmt
begin_decl_stmt
specifier|static
name|int
name|antialiasingThreshold
decl_stmt|;
end_decl_stmt
begin_expr_stmt
specifier|static
name|QFontEngine
operator|::
name|GlyphFormat
name|defaultGlyphFormat
expr_stmt|;
end_expr_stmt
begin_label
name|private
label|:
end_label
begin_function_decl
name|void
name|init
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|QImage
name|imageForGlyph
parameter_list|(
name|glyph_t
name|glyph
parameter_list|,
name|QFixed
name|subPixelPosition
parameter_list|,
name|bool
name|colorful
parameter_list|,
specifier|const
name|QTransform
modifier|&
name|m
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
name|CTFontRef
name|ctfont
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|CGFontRef
name|cgFont
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|int
name|synthesisFlags
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|CGAffineTransform
name|transform
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QFixed
name|avgCharWidth
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|QFontEngine
operator|::
name|FaceId
name|face_id
expr_stmt|;
end_expr_stmt
begin_function_decl
unit|};
name|CGAffineTransform
name|qt_transform_from_fontdef
parameter_list|(
specifier|const
name|QFontDef
modifier|&
name|fontDef
parameter_list|)
function_decl|;
end_function_decl
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QFONTENGINE_CORETEXT_P_H
end_comment
end_unit
