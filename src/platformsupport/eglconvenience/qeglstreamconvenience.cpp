begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qeglstreamconvenience_p.h"
end_include
begin_include
include|#
directive|include
file|<string.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_constructor
DECL|function|QEGLStreamConvenience
name|QEGLStreamConvenience
operator|::
name|QEGLStreamConvenience
parameter_list|()
member_init_list|:
name|initialized
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|has_egl_platform_device
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|has_egl_device_base
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|has_egl_stream
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|has_egl_stream_producer_eglsurface
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|has_egl_stream_consumer_egloutput
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|has_egl_output_drm
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|has_egl_output_base
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|has_egl_stream_cross_process_fd
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|has_egl_stream_consumer_gltexture
argument_list|(
literal|false
argument_list|)
block|{
specifier|const
name|char
modifier|*
name|extensions
init|=
name|eglQueryString
argument_list|(
name|EGL_NO_DISPLAY
argument_list|,
name|EGL_EXTENSIONS
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|extensions
condition|)
block|{
name|qWarning
argument_list|(
literal|"Failed to query EGL extensions"
argument_list|)
expr_stmt|;
return|return;
block|}
name|query_devices
operator|=
cast|reinterpret_cast
argument_list|<
name|PFNEGLQUERYDEVICESEXTPROC
argument_list|>
argument_list|(
name|eglGetProcAddress
argument_list|(
literal|"eglQueryDevicesEXT"
argument_list|)
argument_list|)
expr_stmt|;
name|query_device_string
operator|=
cast|reinterpret_cast
argument_list|<
name|PFNEGLQUERYDEVICESTRINGEXTPROC
argument_list|>
argument_list|(
name|eglGetProcAddress
argument_list|(
literal|"eglQueryDeviceStringEXT"
argument_list|)
argument_list|)
expr_stmt|;
name|get_platform_display
operator|=
cast|reinterpret_cast
argument_list|<
name|PFNEGLGETPLATFORMDISPLAYEXTPROC
argument_list|>
argument_list|(
name|eglGetProcAddress
argument_list|(
literal|"eglGetPlatformDisplayEXT"
argument_list|)
argument_list|)
expr_stmt|;
name|has_egl_device_base
operator|=
name|strstr
argument_list|(
name|extensions
argument_list|,
literal|"EGL_EXT_device_base"
argument_list|)
expr_stmt|;
name|has_egl_platform_device
operator|=
name|strstr
argument_list|(
name|extensions
argument_list|,
literal|"EGL_EXT_platform_device"
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|initialize
name|void
name|QEGLStreamConvenience
operator|::
name|initialize
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|)
block|{
if|if
condition|(
name|initialized
condition|)
return|return;
if|if
condition|(
operator|!
name|eglBindAPI
argument_list|(
name|EGL_OPENGL_ES_API
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"Failed to bind OpenGL ES API"
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|const
name|char
modifier|*
name|extensions
init|=
name|eglQueryString
argument_list|(
name|dpy
argument_list|,
name|EGL_EXTENSIONS
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|extensions
condition|)
block|{
name|qWarning
argument_list|(
literal|"Failed to query EGL extensions"
argument_list|)
expr_stmt|;
return|return;
block|}
name|create_stream
operator|=
cast|reinterpret_cast
argument_list|<
name|PFNEGLCREATESTREAMKHRPROC
argument_list|>
argument_list|(
name|eglGetProcAddress
argument_list|(
literal|"eglCreateStreamKHR"
argument_list|)
argument_list|)
expr_stmt|;
name|destroy_stream
operator|=
cast|reinterpret_cast
argument_list|<
name|PFNEGLDESTROYSTREAMKHRPROC
argument_list|>
argument_list|(
name|eglGetProcAddress
argument_list|(
literal|"eglDestroyStreamKHR"
argument_list|)
argument_list|)
expr_stmt|;
name|stream_attrib
operator|=
cast|reinterpret_cast
argument_list|<
name|PFNEGLSTREAMATTRIBKHRPROC
argument_list|>
argument_list|(
name|eglGetProcAddress
argument_list|(
literal|"eglStreamAttribKHR"
argument_list|)
argument_list|)
expr_stmt|;
name|query_stream
operator|=
cast|reinterpret_cast
argument_list|<
name|PFNEGLQUERYSTREAMKHRPROC
argument_list|>
argument_list|(
name|eglGetProcAddress
argument_list|(
literal|"eglQueryStreamKHR"
argument_list|)
argument_list|)
expr_stmt|;
name|query_stream_u64
operator|=
cast|reinterpret_cast
argument_list|<
name|PFNEGLQUERYSTREAMU64KHRPROC
argument_list|>
argument_list|(
name|eglGetProcAddress
argument_list|(
literal|"eglQueryStreamu64KHR"
argument_list|)
argument_list|)
expr_stmt|;
name|create_stream_producer_surface
operator|=
cast|reinterpret_cast
argument_list|<
name|PFNEGLCREATESTREAMPRODUCERSURFACEKHRPROC
argument_list|>
argument_list|(
name|eglGetProcAddress
argument_list|(
literal|"eglCreateStreamProducerSurfaceKHR"
argument_list|)
argument_list|)
expr_stmt|;
name|stream_consumer_output
operator|=
cast|reinterpret_cast
argument_list|<
name|PFNEGLSTREAMCONSUMEROUTPUTEXTPROC
argument_list|>
argument_list|(
name|eglGetProcAddress
argument_list|(
literal|"eglStreamConsumerOutputEXT"
argument_list|)
argument_list|)
expr_stmt|;
name|get_output_layers
operator|=
cast|reinterpret_cast
argument_list|<
name|PFNEGLGETOUTPUTLAYERSEXTPROC
argument_list|>
argument_list|(
name|eglGetProcAddress
argument_list|(
literal|"eglGetOutputLayersEXT"
argument_list|)
argument_list|)
expr_stmt|;
name|get_output_ports
operator|=
cast|reinterpret_cast
argument_list|<
name|PFNEGLGETOUTPUTPORTSEXTPROC
argument_list|>
argument_list|(
name|eglGetProcAddress
argument_list|(
literal|"eglGetOutputPortsEXT"
argument_list|)
argument_list|)
expr_stmt|;
name|output_layer_attrib
operator|=
cast|reinterpret_cast
argument_list|<
name|PFNEGLOUTPUTLAYERATTRIBEXTPROC
argument_list|>
argument_list|(
name|eglGetProcAddress
argument_list|(
literal|"eglOutputLayerAttribEXT"
argument_list|)
argument_list|)
expr_stmt|;
name|query_output_layer_attrib
operator|=
cast|reinterpret_cast
argument_list|<
name|PFNEGLQUERYOUTPUTLAYERATTRIBEXTPROC
argument_list|>
argument_list|(
name|eglGetProcAddress
argument_list|(
literal|"eglQueryOutputLayerAttribEXT"
argument_list|)
argument_list|)
expr_stmt|;
name|query_output_layer_string
operator|=
cast|reinterpret_cast
argument_list|<
name|PFNEGLQUERYOUTPUTLAYERSTRINGEXTPROC
argument_list|>
argument_list|(
name|eglGetProcAddress
argument_list|(
literal|"eglQueryOutputLayerStringEXT"
argument_list|)
argument_list|)
expr_stmt|;
name|query_output_port_attrib
operator|=
cast|reinterpret_cast
argument_list|<
name|PFNEGLQUERYOUTPUTPORTATTRIBEXTPROC
argument_list|>
argument_list|(
name|eglGetProcAddress
argument_list|(
literal|"eglQueryOutputPortAttribEXT"
argument_list|)
argument_list|)
expr_stmt|;
name|query_output_port_string
operator|=
cast|reinterpret_cast
argument_list|<
name|PFNEGLQUERYOUTPUTPORTSTRINGEXTPROC
argument_list|>
argument_list|(
name|eglGetProcAddress
argument_list|(
literal|"eglQueryOutputPortStringEXT"
argument_list|)
argument_list|)
expr_stmt|;
name|get_stream_file_descriptor
operator|=
cast|reinterpret_cast
argument_list|<
name|PFNEGLGETSTREAMFILEDESCRIPTORKHRPROC
argument_list|>
argument_list|(
name|eglGetProcAddress
argument_list|(
literal|"eglGetStreamFileDescriptorKHR"
argument_list|)
argument_list|)
expr_stmt|;
name|create_stream_from_file_descriptor
operator|=
cast|reinterpret_cast
argument_list|<
name|PFNEGLCREATESTREAMFROMFILEDESCRIPTORKHRPROC
argument_list|>
argument_list|(
name|eglGetProcAddress
argument_list|(
literal|"eglCreateStreamFromFileDescriptorKHR"
argument_list|)
argument_list|)
expr_stmt|;
name|stream_consumer_gltexture
operator|=
cast|reinterpret_cast
argument_list|<
name|PFNEGLSTREAMCONSUMERGLTEXTUREEXTERNALKHRPROC
argument_list|>
argument_list|(
name|eglGetProcAddress
argument_list|(
literal|"eglStreamConsumerGLTextureExternalKHR"
argument_list|)
argument_list|)
expr_stmt|;
name|stream_consumer_acquire
operator|=
cast|reinterpret_cast
argument_list|<
name|PFNEGLSTREAMCONSUMERACQUIREKHRPROC
argument_list|>
argument_list|(
name|eglGetProcAddress
argument_list|(
literal|"eglStreamConsumerAcquireKHR"
argument_list|)
argument_list|)
expr_stmt|;
name|stream_consumer_release
operator|=
cast|reinterpret_cast
argument_list|<
name|PFNEGLSTREAMCONSUMERRELEASEKHRPROC
argument_list|>
argument_list|(
name|eglGetProcAddress
argument_list|(
literal|"eglStreamConsumerReleaseKHR"
argument_list|)
argument_list|)
expr_stmt|;
name|has_egl_stream
operator|=
name|strstr
argument_list|(
name|extensions
argument_list|,
literal|"EGL_KHR_stream"
argument_list|)
expr_stmt|;
name|has_egl_stream_producer_eglsurface
operator|=
name|strstr
argument_list|(
name|extensions
argument_list|,
literal|"EGL_KHR_stream_producer_eglsurface"
argument_list|)
expr_stmt|;
name|has_egl_stream_consumer_egloutput
operator|=
name|strstr
argument_list|(
name|extensions
argument_list|,
literal|"EGL_EXT_stream_consumer_egloutput"
argument_list|)
expr_stmt|;
name|has_egl_output_drm
operator|=
name|strstr
argument_list|(
name|extensions
argument_list|,
literal|"EGL_EXT_output_drm"
argument_list|)
expr_stmt|;
name|has_egl_output_base
operator|=
name|strstr
argument_list|(
name|extensions
argument_list|,
literal|"EGL_EXT_output_base"
argument_list|)
expr_stmt|;
name|has_egl_stream_cross_process_fd
operator|=
name|strstr
argument_list|(
name|extensions
argument_list|,
literal|"EGL_KHR_stream_cross_process_fd"
argument_list|)
expr_stmt|;
name|has_egl_stream_consumer_gltexture
operator|=
name|strstr
argument_list|(
name|extensions
argument_list|,
literal|"EGL_KHR_stream_consumer_gltexture"
argument_list|)
expr_stmt|;
name|initialized
operator|=
literal|true
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
