begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtGui/QOpenGLContext>
end_include
begin_include
include|#
directive|include
file|<QtGui/QOpenGLShaderProgram>
end_include
begin_include
include|#
directive|include
file|<QtGui/QOpenGLFramebufferObject>
end_include
begin_include
include|#
directive|include
file|<QtGui/private/qopengltextureblitter_p.h>
end_include
begin_include
include|#
directive|include
file|<qpa/qplatformbackingstore.h>
end_include
begin_include
include|#
directive|include
file|"qeglcompositor_p.h"
end_include
begin_include
include|#
directive|include
file|"qeglplatformwindow_p.h"
end_include
begin_include
include|#
directive|include
file|"qeglplatformscreen_p.h"
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|compositor
specifier|static
name|QEGLCompositor
modifier|*
name|compositor
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_constructor
DECL|function|QEGLCompositor
name|QEGLCompositor
operator|::
name|QEGLCompositor
parameter_list|()
member_init_list|:
name|m_context
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_window
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_blitter
argument_list|(
literal|0
argument_list|)
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|compositor
argument_list|)
expr_stmt|;
name|m_updateTimer
operator|.
name|setSingleShot
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|m_updateTimer
operator|.
name|setInterval
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|m_updateTimer
argument_list|,
name|SIGNAL
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|renderAll
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QEGLCompositor
name|QEGLCompositor
operator|::
name|~
name|QEGLCompositor
parameter_list|()
block|{
name|Q_ASSERT
argument_list|(
name|compositor
operator|==
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_blitter
condition|)
block|{
name|m_blitter
operator|->
name|destroy
argument_list|()
expr_stmt|;
operator|delete
name|m_blitter
expr_stmt|;
block|}
name|compositor
operator|=
literal|0
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|schedule
name|void
name|QEGLCompositor
operator|::
name|schedule
parameter_list|(
name|QOpenGLContext
modifier|*
name|context
parameter_list|,
name|QEGLPlatformWindow
modifier|*
name|window
parameter_list|)
block|{
name|m_context
operator|=
name|context
expr_stmt|;
name|m_window
operator|=
name|window
expr_stmt|;
if|if
condition|(
operator|!
name|m_updateTimer
operator|.
name|isActive
argument_list|()
condition|)
name|m_updateTimer
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|renderAll
name|void
name|QEGLCompositor
operator|::
name|renderAll
parameter_list|()
block|{
name|Q_ASSERT
argument_list|(
name|m_context
operator|&&
name|m_window
argument_list|)
expr_stmt|;
name|m_context
operator|->
name|makeCurrent
argument_list|(
name|m_window
operator|->
name|window
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|m_blitter
condition|)
block|{
name|m_blitter
operator|=
operator|new
name|QOpenGLTextureBlitter
expr_stmt|;
name|m_blitter
operator|->
name|create
argument_list|()
expr_stmt|;
block|}
name|m_blitter
operator|->
name|bind
argument_list|()
expr_stmt|;
name|QEGLPlatformScreen
modifier|*
name|screen
init|=
cast|static_cast
argument_list|<
name|QEGLPlatformScreen
operator|*
argument_list|>
argument_list|(
name|m_window
operator|->
name|screen
argument_list|()
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|QEGLPlatformWindow
modifier|*
argument_list|>
name|windows
init|=
name|screen
operator|->
name|windows
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|windows
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|render
argument_list|(
name|windows
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|m_blitter
operator|->
name|release
argument_list|()
expr_stmt|;
name|m_context
operator|->
name|swapBuffers
argument_list|(
name|m_window
operator|->
name|window
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|windows
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|windows
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|composited
argument_list|()
expr_stmt|;
block|}
end_function
begin_struct
DECL|struct|BlendStateBinder
struct|struct
name|BlendStateBinder
block|{
DECL|function|BlendStateBinder
name|BlendStateBinder
parameter_list|()
member_init_list|:
name|m_blend
argument_list|(
literal|false
argument_list|)
block|{
name|glDisable
argument_list|(
name|GL_BLEND
argument_list|)
expr_stmt|;
block|}
DECL|function|set
name|void
name|set
parameter_list|(
name|bool
name|blend
parameter_list|)
block|{
if|if
condition|(
name|blend
operator|!=
name|m_blend
condition|)
block|{
if|if
condition|(
name|blend
condition|)
block|{
name|glEnable
argument_list|(
name|GL_BLEND
argument_list|)
expr_stmt|;
name|glBlendFunc
argument_list|(
name|GL_SRC_ALPHA
argument_list|,
name|GL_ONE_MINUS_SRC_ALPHA
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|glDisable
argument_list|(
name|GL_BLEND
argument_list|)
expr_stmt|;
block|}
name|m_blend
operator|=
name|blend
expr_stmt|;
block|}
block|}
DECL|function|~BlendStateBinder
name|~
name|BlendStateBinder
parameter_list|()
block|{
if|if
condition|(
name|m_blend
condition|)
name|glDisable
argument_list|(
name|GL_BLEND
argument_list|)
expr_stmt|;
block|}
DECL|member|m_blend
name|bool
name|m_blend
decl_stmt|;
block|}
struct|;
end_struct
begin_function
DECL|function|render
name|void
name|QEGLCompositor
operator|::
name|render
parameter_list|(
name|QEGLPlatformWindow
modifier|*
name|window
parameter_list|)
block|{
specifier|const
name|QPlatformTextureList
modifier|*
name|textures
init|=
name|window
operator|->
name|textures
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|textures
condition|)
return|return;
specifier|const
name|QRect
name|targetWindowRect
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|window
operator|->
name|screen
argument_list|()
operator|->
name|geometry
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|glViewport
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|targetWindowRect
operator|.
name|width
argument_list|()
argument_list|,
name|targetWindowRect
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|float
name|currentOpacity
init|=
literal|1.0f
decl_stmt|;
name|BlendStateBinder
name|blend
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|textures
operator|->
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|uint
name|textureId
init|=
name|textures
operator|->
name|textureId
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QMatrix4x4
name|target
init|=
name|QOpenGLTextureBlitter
operator|::
name|targetTransform
argument_list|(
name|textures
operator|->
name|geometry
argument_list|(
name|i
argument_list|)
argument_list|,
name|targetWindowRect
argument_list|)
decl_stmt|;
specifier|const
name|float
name|opacity
init|=
name|window
operator|->
name|window
argument_list|()
operator|->
name|opacity
argument_list|()
decl_stmt|;
if|if
condition|(
name|opacity
operator|!=
name|currentOpacity
condition|)
block|{
name|currentOpacity
operator|=
name|opacity
expr_stmt|;
name|m_blitter
operator|->
name|setOpacity
argument_list|(
name|currentOpacity
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|textures
operator|->
name|count
argument_list|()
operator|>
literal|1
operator|&&
name|i
operator|==
name|textures
operator|->
name|count
argument_list|()
operator|-
literal|1
condition|)
block|{
comment|// Backingstore for a widget with QOpenGLWidget subwidgets
name|blend
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|m_blitter
operator|->
name|blit
argument_list|(
name|textureId
argument_list|,
name|target
argument_list|,
name|QOpenGLTextureBlitter
operator|::
name|OriginTopLeft
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|textures
operator|->
name|count
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// A regular QWidget window
specifier|const
name|bool
name|translucent
init|=
name|window
operator|->
name|window
argument_list|()
operator|->
name|requestedFormat
argument_list|()
operator|.
name|alphaBufferSize
argument_list|()
operator|>
literal|0
decl_stmt|;
name|blend
operator|.
name|set
argument_list|(
name|translucent
argument_list|)
expr_stmt|;
name|m_blitter
operator|->
name|blit
argument_list|(
name|textureId
argument_list|,
name|target
argument_list|,
name|QOpenGLTextureBlitter
operator|::
name|OriginTopLeft
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|textures
operator|->
name|stacksOnTop
argument_list|(
name|i
argument_list|)
condition|)
block|{
comment|// Texture from an FBO belonging to a QOpenGLWidget
name|blend
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|m_blitter
operator|->
name|blit
argument_list|(
name|textureId
argument_list|,
name|target
argument_list|,
name|QOpenGLTextureBlitter
operator|::
name|OriginBottomLeft
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|textures
operator|->
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|textures
operator|->
name|stacksOnTop
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|QMatrix4x4
name|target
init|=
name|QOpenGLTextureBlitter
operator|::
name|targetTransform
argument_list|(
name|textures
operator|->
name|geometry
argument_list|(
name|i
argument_list|)
argument_list|,
name|targetWindowRect
argument_list|)
decl_stmt|;
name|blend
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|m_blitter
operator|->
name|blit
argument_list|(
name|textures
operator|->
name|textureId
argument_list|(
name|i
argument_list|)
argument_list|,
name|target
argument_list|,
name|QOpenGLTextureBlitter
operator|::
name|OriginBottomLeft
argument_list|)
expr_stmt|;
block|}
block|}
name|m_blitter
operator|->
name|setOpacity
argument_list|(
literal|1.0f
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|instance
name|QEGLCompositor
modifier|*
name|QEGLCompositor
operator|::
name|instance
parameter_list|()
block|{
if|if
condition|(
operator|!
name|compositor
condition|)
name|compositor
operator|=
operator|new
name|QEGLCompositor
expr_stmt|;
return|return
name|compositor
return|;
block|}
end_function
begin_function
DECL|function|destroy
name|void
name|QEGLCompositor
operator|::
name|destroy
parameter_list|()
block|{
operator|delete
name|compositor
expr_stmt|;
name|compositor
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
