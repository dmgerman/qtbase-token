begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia. For licensing terms and ** conditions see http://qt.digia.com/licensing. For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights. These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qeglcompositor_p.h"
end_include
begin_include
include|#
directive|include
file|"qeglplatformscreen_p.h"
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_comment
comment|/*!     \class QEGLPlatformScreen     \brief Base class for EGL-based platform screen implementations.     \since 5.2     \internal     \ingroup qpa      This class provides a lightweight base for QPlatformScreen     implementations. It covers basic window stack management which is     necessary when compositing multiple raster (widget-based) windows     together into one single native surface.      Reimplementing the virtuals are essential when using     QEGLPlatformBackingStore. The context and the window returned from     these are the ones that are used when compositing the textures     generated from the raster (widget) based windows.      \note It is up to the QEGLPlatformWindow subclasses to use the     functions, like addWindow(), removeWindow(), etc., provided here.  */
end_comment
begin_constructor
DECL|function|QEGLPlatformScreen
name|QEGLPlatformScreen
operator|::
name|QEGLPlatformScreen
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|)
member_init_list|:
name|m_dpy
argument_list|(
name|dpy
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QEGLPlatformScreen
name|QEGLPlatformScreen
operator|::
name|~
name|QEGLPlatformScreen
parameter_list|()
block|{
name|QEGLCompositor
operator|::
name|destroy
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|addWindow
name|void
name|QEGLPlatformScreen
operator|::
name|addWindow
parameter_list|(
name|QEGLPlatformWindow
modifier|*
name|window
parameter_list|)
block|{
if|if
condition|(
operator|!
name|m_windows
operator|.
name|contains
argument_list|(
name|window
argument_list|)
condition|)
block|{
name|m_windows
operator|.
name|append
argument_list|(
name|window
argument_list|)
expr_stmt|;
name|topWindowChanged
argument_list|(
name|window
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|removeWindow
name|void
name|QEGLPlatformScreen
operator|::
name|removeWindow
parameter_list|(
name|QEGLPlatformWindow
modifier|*
name|window
parameter_list|)
block|{
name|m_windows
operator|.
name|removeOne
argument_list|(
name|window
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|m_windows
operator|.
name|isEmpty
argument_list|()
condition|)
name|topWindowChanged
argument_list|(
name|m_windows
operator|.
name|last
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|moveToTop
name|void
name|QEGLPlatformScreen
operator|::
name|moveToTop
parameter_list|(
name|QEGLPlatformWindow
modifier|*
name|window
parameter_list|)
block|{
name|m_windows
operator|.
name|removeOne
argument_list|(
name|window
argument_list|)
expr_stmt|;
name|m_windows
operator|.
name|append
argument_list|(
name|window
argument_list|)
expr_stmt|;
name|topWindowChanged
argument_list|(
name|window
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|changeWindowIndex
name|void
name|QEGLPlatformScreen
operator|::
name|changeWindowIndex
parameter_list|(
name|QEGLPlatformWindow
modifier|*
name|window
parameter_list|,
name|int
name|newIdx
parameter_list|)
block|{
name|int
name|idx
init|=
name|m_windows
operator|.
name|indexOf
argument_list|(
name|window
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|!=
operator|-
literal|1
operator|&&
name|idx
operator|!=
name|newIdx
condition|)
block|{
name|m_windows
operator|.
name|move
argument_list|(
name|idx
argument_list|,
name|newIdx
argument_list|)
expr_stmt|;
if|if
condition|(
name|newIdx
operator|==
name|m_windows
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
name|topWindowChanged
argument_list|(
name|m_windows
operator|.
name|last
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
