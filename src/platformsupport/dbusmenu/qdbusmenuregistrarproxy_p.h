begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 Dmitry Shachnev<mitya57@gmail.com> ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|/*  * This file was originally created by qdbusxml2cpp version 0.8  * Command line was: qdbusxml2cpp -p qdbusmenuregistrarproxy ../../3rdparty/dbus-ifaces/com.canonical.AppMenu.Registrar.xml  *  * However it is maintained manually.  */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QDBUSMENUREGISTRARPROXY_P_H
end_ifndef
begin_define
DECL|macro|QDBUSMENUREGISTRARPROXY_P_H
define|#
directive|define
name|QDBUSMENUREGISTRARPROXY_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists purely as an
end_comment
begin_comment
comment|// implementation detail.  This header file may change from version to
end_comment
begin_comment
comment|// version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|<QtCore/QObject>
end_include
begin_include
include|#
directive|include
file|<QtCore/QByteArray>
end_include
begin_include
include|#
directive|include
file|<QtCore/QList>
end_include
begin_include
include|#
directive|include
file|<QtCore/QString>
end_include
begin_include
include|#
directive|include
file|<QtCore/QVariant>
end_include
begin_include
include|#
directive|include
file|<QtDBus/QDBusAbstractInterface>
end_include
begin_include
include|#
directive|include
file|<QtDBus/QDBusConnection>
end_include
begin_include
include|#
directive|include
file|<QtDBus/QDBusReply>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
comment|/*  * Proxy class for interface com.canonical.AppMenu.Registrar  */
name|class
name|QDBusMenuRegistrarInterface
range|:
name|public
name|QDBusAbstractInterface
block|{
name|Q_OBJECT
name|public
operator|:
specifier|static
specifier|inline
specifier|const
name|char
operator|*
name|staticInterfaceName
argument_list|()
block|{
return|return
literal|"com.canonical.AppMenu.Registrar"
return|;
block|}
name|public
operator|:
name|explicit
name|QDBusMenuRegistrarInterface
argument_list|(
specifier|const
name|QString
operator|&
name|service
argument_list|,
specifier|const
name|QString
operator|&
name|path
argument_list|,
specifier|const
name|QDBusConnection
operator|&
name|connection
argument_list|,
name|QObject
operator|*
name|parent
operator|=
name|nullptr
argument_list|)
block|;
operator|~
name|QDBusMenuRegistrarInterface
argument_list|()
block|;
name|public
name|Q_SLOTS
operator|:
comment|// METHODS
name|QDBusPendingReply
operator|<
name|QString
block|,
name|QDBusObjectPath
operator|>
name|GetMenuForWindow
argument_list|(
argument|uint windowId
argument_list|)
block|{
name|QList
operator|<
name|QVariant
operator|>
name|argumentList
block|;
name|argumentList
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|windowId
argument_list|)
block|;
return|return
name|asyncCallWithArgumentList
argument_list|(
name|QStringLiteral
argument_list|(
literal|"GetMenuForWindow"
argument_list|)
argument_list|,
name|argumentList
argument_list|)
return|;
block|}
name|QDBusReply
operator|<
name|QString
operator|>
name|GetMenuForWindow
argument_list|(
argument|uint windowId
argument_list|,
argument|QDBusObjectPath&menuObjectPath
argument_list|)
block|{
name|QList
operator|<
name|QVariant
operator|>
name|argumentList
block|;
name|argumentList
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|windowId
argument_list|)
block|;
name|QDBusMessage
name|reply
operator|=
name|callWithArgumentList
argument_list|(
name|QDBus
operator|::
name|Block
argument_list|,
name|QStringLiteral
argument_list|(
literal|"GetMenuForWindow"
argument_list|)
argument_list|,
name|argumentList
argument_list|)
block|;
name|QList
operator|<
name|QVariant
operator|>
name|arguments
operator|=
name|reply
operator|.
name|arguments
argument_list|()
block|;
if|if
condition|(
name|reply
operator|.
name|type
argument_list|()
operator|==
name|QDBusMessage
operator|::
name|ReplyMessage
operator|&&
name|arguments
operator|.
name|count
argument_list|()
operator|==
literal|2
condition|)
name|menuObjectPath
operator|=
name|qdbus_cast
operator|<
name|QDBusObjectPath
operator|>
operator|(
name|arguments
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|)
expr_stmt|;
return|return
name|reply
return|;
block|}
end_decl_stmt
begin_expr_stmt
name|QDBusPendingReply
operator|<
operator|>
name|RegisterWindow
argument_list|(
argument|uint windowId
argument_list|,
argument|const QDBusObjectPath&menuObjectPath
argument_list|)
block|{
name|QList
operator|<
name|QVariant
operator|>
name|argumentList
block|;
name|argumentList
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|windowId
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|menuObjectPath
argument_list|)
block|;
return|return
name|asyncCallWithArgumentList
argument_list|(
name|QStringLiteral
argument_list|(
literal|"RegisterWindow"
argument_list|)
argument_list|,
name|argumentList
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|QDBusPendingReply
operator|<
operator|>
name|UnregisterWindow
argument_list|(
argument|uint windowId
argument_list|)
block|{
name|QList
operator|<
name|QVariant
operator|>
name|argumentList
block|;
name|argumentList
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|windowId
argument_list|)
block|;
return|return
name|asyncCallWithArgumentList
argument_list|(
name|QStringLiteral
argument_list|(
literal|"UnregisterWindow"
argument_list|)
argument_list|,
name|argumentList
argument_list|)
return|;
block|}
end_expr_stmt
begin_macro
unit|};
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QDBUSMENUREGISTRARPROXY_P_H
end_comment
end_unit
