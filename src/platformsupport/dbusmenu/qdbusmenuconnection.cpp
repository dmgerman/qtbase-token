begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia. For licensing terms and ** conditions see http://qt.digia.com/licensing. For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights. These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_SYSTEMTRAYICON
end_ifndef
begin_include
include|#
directive|include
file|"qdbustrayicon_p.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|"qdbusmenuconnection_p.h"
end_include
begin_include
include|#
directive|include
file|"qdbusmenuadaptor_p.h"
end_include
begin_include
include|#
directive|include
file|"qdbusplatformmenu_p.h"
end_include
begin_include
include|#
directive|include
file|<QtDBus/QDBusMessage>
end_include
begin_include
include|#
directive|include
file|<QtDBus/QDBusServiceWatcher>
end_include
begin_include
include|#
directive|include
file|<QtDBus/QDBusConnectionInterface>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<qcoreapplication.h>
end_include
begin_function_decl
name|QT_BEGIN_NAMESPACE
name|Q_DECLARE_LOGGING_CATEGORY
parameter_list|(
name|qLcMenu
parameter_list|)
DECL|variable|StatusNotifierWatcherService
specifier|const
name|QString
name|StatusNotifierWatcherService
decl_stmt|= QLatin1String("org.kde.StatusNotifierWatcher"
end_function_decl
begin_empty_stmt
DECL|variable|StatusNotifierWatcherService
unit|)
empty_stmt|;
end_empty_stmt
begin_decl_stmt
DECL|variable|StatusNotifierWatcherPath
specifier|const
name|QString
name|StatusNotifierWatcherPath
init|=
name|QLatin1String
argument_list|(
literal|"/StatusNotifierWatcher"
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|StatusNotifierItemPath
specifier|const
name|QString
name|StatusNotifierItemPath
init|=
name|QLatin1String
argument_list|(
literal|"/StatusNotifierItem"
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|MenuBarPath
specifier|const
name|QString
name|MenuBarPath
init|=
name|QLatin1String
argument_list|(
literal|"/MenuBar"
argument_list|)
decl_stmt|;
end_decl_stmt
begin_comment
comment|/*!     \class QDBusMenuConnection     \internal     A D-Bus connection which is used for both menu and tray icon services.     Connects to the session bus and registers with the respective watcher services. */
end_comment
begin_constructor
DECL|function|QDBusMenuConnection
name|QDBusMenuConnection
operator|::
name|QDBusMenuConnection
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|m_connection
argument_list|(
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
argument_list|)
member_init_list|,
name|m_dbusWatcher
argument_list|(
operator|new
name|QDBusServiceWatcher
argument_list|(
name|StatusNotifierWatcherService
argument_list|,
name|m_connection
argument_list|,
name|QDBusServiceWatcher
operator|::
name|WatchForRegistration
argument_list|,
name|this
argument_list|)
argument_list|)
member_init_list|,
name|m_watcherRegistered
argument_list|(
literal|false
argument_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_SYSTEMTRAYICON
comment|// Start monitoring if any known tray-related services are registered.
if|if
condition|(
name|m_connection
operator|.
name|interface
argument_list|()
operator|->
name|isServiceRegistered
argument_list|(
name|StatusNotifierWatcherService
argument_list|)
condition|)
name|m_watcherRegistered
operator|=
literal|true
expr_stmt|;
else|else
name|qCDebug
argument_list|(
name|qLcMenu
argument_list|)
operator|<<
literal|"failed to find service"
operator|<<
name|StatusNotifierWatcherService
expr_stmt|;
endif|#
directive|endif
block|}
end_constructor
begin_function
DECL|function|dbusError
name|void
name|QDBusMenuConnection
operator|::
name|dbusError
parameter_list|(
specifier|const
name|QDBusError
modifier|&
name|error
parameter_list|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"QDBusTrayIcon encountered a D-Bus error:"
operator|<<
name|error
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_SYSTEMTRAYICON
end_ifndef
begin_function
DECL|function|registerTrayIcon
name|bool
name|QDBusMenuConnection
operator|::
name|registerTrayIcon
parameter_list|(
name|QDBusTrayIcon
modifier|*
name|item
parameter_list|)
block|{
name|bool
name|success
init|=
name|connection
argument_list|()
operator|.
name|registerService
argument_list|(
name|item
operator|->
name|instanceId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"failed to register service"
operator|<<
name|item
operator|->
name|instanceId
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
name|success
operator|=
name|connection
argument_list|()
operator|.
name|registerObject
argument_list|(
name|StatusNotifierItemPath
argument_list|,
name|item
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|unregisterTrayIcon
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|qWarning
argument_list|()
operator|<<
literal|"failed to register"
operator|<<
name|item
operator|->
name|instanceId
argument_list|()
operator|<<
name|StatusNotifierItemPath
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|item
operator|->
name|menu
argument_list|()
condition|)
block|{
name|success
operator|=
name|connection
argument_list|()
operator|.
name|registerObject
argument_list|(
name|MenuBarPath
argument_list|,
name|item
operator|->
name|menu
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|unregisterTrayIcon
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|qWarning
argument_list|()
operator|<<
literal|"failed to register"
operator|<<
name|item
operator|->
name|instanceId
argument_list|()
operator|<<
name|MenuBarPath
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
name|QDBusMessage
name|registerMethod
init|=
name|QDBusMessage
operator|::
name|createMethodCall
argument_list|(
name|StatusNotifierWatcherService
argument_list|,
name|StatusNotifierWatcherPath
argument_list|,
name|StatusNotifierWatcherService
argument_list|,
name|QLatin1String
argument_list|(
literal|"RegisterStatusNotifierItem"
argument_list|)
argument_list|)
decl_stmt|;
name|registerMethod
operator|.
name|setArguments
argument_list|(
name|QVariantList
argument_list|()
operator|<<
name|item
operator|->
name|instanceId
argument_list|()
argument_list|)
expr_stmt|;
name|success
operator|=
name|m_connection
operator|.
name|callWithCallback
argument_list|(
name|registerMethod
argument_list|,
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|trayIconRegistered
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|dbusError
argument_list|(
name|QDBusError
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|success
return|;
block|}
end_function
begin_function
DECL|function|unregisterTrayIcon
name|bool
name|QDBusMenuConnection
operator|::
name|unregisterTrayIcon
parameter_list|(
name|QDBusTrayIcon
modifier|*
name|item
parameter_list|)
block|{
name|connection
argument_list|()
operator|.
name|unregisterObject
argument_list|(
name|MenuBarPath
argument_list|)
expr_stmt|;
name|connection
argument_list|()
operator|.
name|unregisterObject
argument_list|(
name|StatusNotifierItemPath
argument_list|)
expr_stmt|;
name|bool
name|success
init|=
name|connection
argument_list|()
operator|.
name|unregisterService
argument_list|(
name|item
operator|->
name|instanceId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|success
condition|)
name|qWarning
argument_list|()
operator|<<
literal|"failed to unregister service"
operator|<<
name|item
operator|->
name|instanceId
argument_list|()
expr_stmt|;
return|return
name|success
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_SYSTEMTRAYICON
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
