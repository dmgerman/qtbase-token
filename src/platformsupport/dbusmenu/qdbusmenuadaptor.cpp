begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|/*     This file was originally created by qdbusxml2cpp version 0.8     Command line was:     qdbusxml2cpp -a dbusmenu ../../3rdparty/dbus-ifaces/dbus-menu.xml      However it is maintained manually. */
end_comment
begin_include
include|#
directive|include
file|"qdbusmenuadaptor_p.h"
end_include
begin_include
include|#
directive|include
file|"qdbusplatformmenu_p.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/QMetaObject>
end_include
begin_include
include|#
directive|include
file|<QtCore/QByteArray>
end_include
begin_include
include|#
directive|include
file|<QtCore/QList>
end_include
begin_include
include|#
directive|include
file|<QtCore/QMap>
end_include
begin_include
include|#
directive|include
file|<QtCore/QString>
end_include
begin_include
include|#
directive|include
file|<QtCore/QStringList>
end_include
begin_include
include|#
directive|include
file|<QtCore/QVariant>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_constructor
DECL|function|QDBusMenuAdaptor
name|QDBusMenuAdaptor
operator|::
name|QDBusMenuAdaptor
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QDBusAbstractAdaptor
argument_list|(
name|parent
argument_list|)
block|{
name|setAutoRelaySignals
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QDBusMenuAdaptor
name|QDBusMenuAdaptor
operator|::
name|~
name|QDBusMenuAdaptor
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|status
name|QString
name|QDBusMenuAdaptor
operator|::
name|status
parameter_list|()
specifier|const
block|{
name|qCDebug
argument_list|(
name|qLcMenu
argument_list|)
expr_stmt|;
return|return
name|QLatin1String
argument_list|(
literal|"normal"
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|textDirection
name|QString
name|QDBusMenuAdaptor
operator|::
name|textDirection
parameter_list|()
specifier|const
block|{
return|return
name|QLocale
argument_list|()
operator|.
name|textDirection
argument_list|()
operator|==
name|Qt
operator|::
name|RightToLeft
condition|?
name|QLatin1String
argument_list|(
literal|"rtl"
argument_list|)
else|:
name|QLatin1String
argument_list|(
literal|"ltr"
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|version
name|uint
name|QDBusMenuAdaptor
operator|::
name|version
parameter_list|()
specifier|const
block|{
return|return
literal|4
return|;
block|}
end_function
begin_function
DECL|function|AboutToShow
name|bool
name|QDBusMenuAdaptor
operator|::
name|AboutToShow
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|qCDebug
argument_list|(
name|qLcMenu
argument_list|)
operator|<<
name|id
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|AboutToShowGroup
name|QList
argument_list|<
name|int
argument_list|>
name|QDBusMenuAdaptor
operator|::
name|AboutToShowGroup
parameter_list|(
specifier|const
name|QList
argument_list|<
name|int
argument_list|>
modifier|&
name|ids
parameter_list|,
name|QList
argument_list|<
name|int
argument_list|>
modifier|&
name|idErrors
parameter_list|)
block|{
name|qCDebug
argument_list|(
name|qLcMenu
argument_list|)
operator|<<
name|ids
expr_stmt|;
name|Q_UNUSED
argument_list|(
argument|idErrors
argument_list|)
name|idErrors
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
return|;
comment|// updatesNeeded
block|}
end_function
begin_function
DECL|function|Event
name|void
name|QDBusMenuAdaptor
operator|::
name|Event
parameter_list|(
name|int
name|id
parameter_list|,
specifier|const
name|QString
modifier|&
name|eventId
parameter_list|,
specifier|const
name|QDBusVariant
modifier|&
name|data
parameter_list|,
name|uint
name|timestamp
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
argument|data
argument_list|)
name|Q_UNUSED
argument_list|(
argument|timestamp
argument_list|)
name|QDBusPlatformMenuItem
modifier|*
name|item
init|=
name|QDBusPlatformMenuItem
operator|::
name|byId
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|qCDebug
argument_list|(
name|qLcMenu
argument_list|)
operator|<<
name|id
operator|<<
operator|(
name|item
condition|?
name|item
operator|->
name|text
argument_list|()
else|:
name|QLatin1String
argument_list|(
literal|""
argument_list|)
operator|)
operator|<<
name|eventId
expr_stmt|;
comment|// Events occur on both menus and menuitems, but we only care if it's an item being clicked.
if|if
condition|(
name|item
operator|&&
name|eventId
operator|==
name|QLatin1String
argument_list|(
literal|"clicked"
argument_list|)
condition|)
name|item
operator|->
name|trigger
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|EventGroup
name|void
name|QDBusMenuAdaptor
operator|::
name|EventGroup
parameter_list|(
specifier|const
name|QDBusMenuEventList
modifier|&
name|events
parameter_list|)
block|{
name|Q_FOREACH
argument_list|(
argument|const QDBusMenuEvent&ev
argument_list|,
argument|events
argument_list|)
name|Event
argument_list|(
name|ev
operator|.
name|m_id
argument_list|,
name|ev
operator|.
name|m_eventId
argument_list|,
name|ev
operator|.
name|m_data
argument_list|,
name|ev
operator|.
name|m_timestamp
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|GetGroupProperties
name|QDBusMenuItemList
name|QDBusMenuAdaptor
operator|::
name|GetGroupProperties
parameter_list|(
specifier|const
name|QList
argument_list|<
name|int
argument_list|>
modifier|&
name|ids
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|propertyNames
parameter_list|)
block|{
name|qCDebug
argument_list|(
name|qLcMenu
argument_list|)
operator|<<
name|ids
operator|<<
name|propertyNames
operator|<<
literal|"=>"
operator|<<
name|QDBusMenuItem
operator|::
name|items
argument_list|(
name|ids
argument_list|,
name|propertyNames
argument_list|)
expr_stmt|;
return|return
name|QDBusMenuItem
operator|::
name|items
argument_list|(
name|ids
argument_list|,
name|propertyNames
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|GetLayout
name|uint
name|QDBusMenuAdaptor
operator|::
name|GetLayout
parameter_list|(
name|int
name|parentId
parameter_list|,
name|int
name|recursionDepth
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|propertyNames
parameter_list|,
name|QDBusMenuLayoutItem
modifier|&
name|layout
parameter_list|)
block|{
name|uint
name|ret
init|=
name|layout
operator|.
name|populate
argument_list|(
name|parentId
argument_list|,
name|recursionDepth
argument_list|,
name|propertyNames
argument_list|)
decl_stmt|;
name|qCDebug
argument_list|(
name|qLcMenu
argument_list|)
operator|<<
name|parentId
operator|<<
literal|"depth"
operator|<<
name|recursionDepth
operator|<<
name|propertyNames
operator|<<
name|layout
operator|.
name|m_id
operator|<<
name|layout
operator|.
name|m_properties
operator|<<
literal|"revision"
operator|<<
name|ret
operator|<<
name|layout
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|GetProperty
name|QDBusVariant
name|QDBusMenuAdaptor
operator|::
name|GetProperty
parameter_list|(
name|int
name|id
parameter_list|,
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
block|{
name|qCDebug
argument_list|(
name|qLcMenu
argument_list|)
operator|<<
name|id
operator|<<
name|name
expr_stmt|;
comment|// handle method call com.canonical.dbusmenu.GetProperty
name|QDBusVariant
name|value
decl_stmt|;
return|return
name|value
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
