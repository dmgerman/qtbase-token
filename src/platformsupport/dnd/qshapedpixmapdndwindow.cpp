begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qshapedpixmapdndwindow_p.h"
end_include
begin_include
include|#
directive|include
file|<QtGui/QPainter>
end_include
begin_include
include|#
directive|include
file|<QtGui/QCursor>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_constructor
DECL|function|QShapedPixmapWindow
name|QShapedPixmapWindow
operator|::
name|QShapedPixmapWindow
parameter_list|()
member_init_list|:
name|QWindow
argument_list|()
member_init_list|,
name|m_backingStore
argument_list|(
literal|0
argument_list|)
block|{
name|setSurfaceType
argument_list|(
name|RasterSurface
argument_list|)
expr_stmt|;
name|setWindowFlags
argument_list|(
name|Qt
operator|::
name|ToolTip
operator||
name|Qt
operator|::
name|FramelessWindowHint
operator||
name|Qt
operator|::
name|X11BypassWindowManagerHint
operator||
name|Qt
operator|::
name|WindowTransparentForInput
argument_list|)
expr_stmt|;
name|create
argument_list|()
expr_stmt|;
name|m_backingStore
operator|=
operator|new
name|QBackingStore
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|render
name|void
name|QShapedPixmapWindow
operator|::
name|render
parameter_list|()
block|{
name|QRect
name|rect
argument_list|(
name|QPoint
argument_list|()
argument_list|,
name|geometry
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|m_backingStore
operator|->
name|beginPaint
argument_list|(
name|rect
argument_list|)
expr_stmt|;
name|QPaintDevice
modifier|*
name|device
init|=
name|m_backingStore
operator|->
name|paintDevice
argument_list|()
decl_stmt|;
block|{
name|QPainter
name|p
argument_list|(
name|device
argument_list|)
decl_stmt|;
name|p
operator|.
name|drawPixmap
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|m_pixmap
argument_list|)
expr_stmt|;
block|}
name|m_backingStore
operator|->
name|endPaint
argument_list|()
expr_stmt|;
name|m_backingStore
operator|->
name|flush
argument_list|(
name|rect
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setPixmap
name|void
name|QShapedPixmapWindow
operator|::
name|setPixmap
parameter_list|(
specifier|const
name|QPixmap
modifier|&
name|pixmap
parameter_list|)
block|{
name|m_pixmap
operator|=
name|pixmap
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setHotspot
name|void
name|QShapedPixmapWindow
operator|::
name|setHotspot
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|hotspot
parameter_list|)
block|{
name|m_hotSpot
operator|=
name|hotspot
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateGeometry
name|void
name|QShapedPixmapWindow
operator|::
name|updateGeometry
parameter_list|()
block|{
name|QRect
name|rect
argument_list|(
name|QCursor
operator|::
name|pos
argument_list|()
operator|-
name|m_hotSpot
argument_list|,
name|m_pixmap
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_backingStore
operator|->
name|size
argument_list|()
operator|!=
name|m_pixmap
operator|.
name|size
argument_list|()
condition|)
name|m_backingStore
operator|->
name|resize
argument_list|(
name|m_pixmap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|setGeometry
argument_list|(
name|rect
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|exposeEvent
name|void
name|QShapedPixmapWindow
operator|::
name|exposeEvent
parameter_list|(
name|QExposeEvent
modifier|*
parameter_list|)
block|{
name|render
argument_list|()
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
