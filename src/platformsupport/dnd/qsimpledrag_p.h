begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QSIMPLEDRAG_H
end_ifndef
begin_define
DECL|macro|QSIMPLEDRAG_H
define|#
directive|define
name|QSIMPLEDRAG_H
end_define
begin_include
include|#
directive|include
file|<qpa/qplatformdrag.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/QObject>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
name|QT_BEGIN_HEADER
ifndef|#
directive|ifndef
name|QT_NO_DRAGANDDROP
DECL|variable|QMouseEvent
name|class
name|QMouseEvent
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QWindow
name|class
name|QWindow
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QEventLoop
name|class
name|QEventLoop
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QDropData
name|class
name|QDropData
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QShapedPixmapWindow
name|class
name|QShapedPixmapWindow
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QPlatformDrag
name|class
name|QBasicDrag
range|:
name|public
name|QPlatformDrag
decl_stmt|,
name|public
name|QObject
block|{
name|public
label|:
name|virtual
operator|~
name|QBasicDrag
argument_list|()
expr_stmt|;
name|virtual
name|Qt
operator|::
name|DropAction
name|drag
argument_list|(
name|QDrag
operator|*
name|drag
argument_list|)
expr_stmt|;
name|virtual
name|bool
name|eventFilter
parameter_list|(
name|QObject
modifier|*
name|o
parameter_list|,
name|QEvent
modifier|*
name|e
parameter_list|)
function_decl|;
name|protected
label|:
name|QBasicDrag
argument_list|()
expr_stmt|;
name|virtual
name|void
name|startDrag
parameter_list|()
function_decl|;
name|virtual
name|void
name|cancel
parameter_list|()
function_decl|;
name|virtual
name|void
name|move
parameter_list|(
specifier|const
name|QMouseEvent
modifier|*
name|me
parameter_list|)
function_decl|;
name|virtual
name|void
name|drop
parameter_list|(
specifier|const
name|QMouseEvent
modifier|*
name|me
parameter_list|)
function_decl|;
name|virtual
name|void
name|endDrag
parameter_list|()
function_decl|;
name|QShapedPixmapWindow
operator|*
name|shapedPixmapWindow
argument_list|()
specifier|const
block|{
return|return
name|m_drag_icon_window
return|;
block|}
name|void
name|updateCursor
argument_list|(
name|Qt
operator|::
name|DropAction
name|action
argument_list|)
decl_stmt|;
name|bool
name|canDrop
argument_list|()
specifier|const
block|{
return|return
name|m_can_drop
return|;
block|}
name|void
name|setCanDrop
parameter_list|(
name|bool
name|c
parameter_list|)
block|{
name|m_can_drop
operator|=
name|c
expr_stmt|;
block|}
name|Qt
operator|::
name|DropAction
name|executedDropAction
argument_list|()
specifier|const
block|{
return|return
name|m_executed_drop_action
return|;
block|}
name|void
name|setExecutedDropAction
argument_list|(
name|Qt
operator|::
name|DropAction
name|da
argument_list|)
block|{
name|m_executed_drop_action
operator|=
name|da
expr_stmt|;
block|}
name|QDrag
operator|*
name|drag
argument_list|()
specifier|const
block|{
return|return
name|m_drag
return|;
block|}
name|private
label|:
name|void
name|enableEventFilter
parameter_list|()
function_decl|;
name|void
name|disableEventFilter
parameter_list|()
function_decl|;
name|void
name|resetDndState
parameter_list|(
name|bool
name|deleteSource
parameter_list|)
function_decl|;
name|void
name|exitDndEventLoop
parameter_list|()
function_decl|;
name|bool
name|m_restoreCursor
decl_stmt|;
name|QEventLoop
modifier|*
name|m_eventLoop
decl_stmt|;
name|Qt
operator|::
name|DropAction
name|m_executed_drop_action
expr_stmt|;
name|bool
name|m_can_drop
decl_stmt|;
name|QDrag
modifier|*
name|m_drag
decl_stmt|;
name|QShapedPixmapWindow
modifier|*
name|m_drag_icon_window
decl_stmt|;
name|Qt
operator|::
name|DropAction
name|m_cursor_drop_action
expr_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
name|class
name|QSimpleDrag
range|:
name|public
name|QBasicDrag
block|{
name|public
operator|:
name|QSimpleDrag
argument_list|()
block|;
name|virtual
name|QMimeData
operator|*
name|platformDropData
argument_list|()
block|;
name|protected
operator|:
name|virtual
name|void
name|startDrag
argument_list|()
block|;
name|virtual
name|void
name|cancel
argument_list|()
block|;
name|virtual
name|void
name|move
argument_list|(
specifier|const
name|QMouseEvent
operator|*
name|me
argument_list|)
block|;
name|virtual
name|void
name|drop
argument_list|(
specifier|const
name|QMouseEvent
operator|*
name|me
argument_list|)
block|;
name|private
operator|:
name|QWindow
operator|*
name|m_current_window
block|; }
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DRAGANDDROP
end_comment
begin_expr_stmt
name|QT_END_HEADER
name|QT_END_NAMESPACE
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
end_unit
