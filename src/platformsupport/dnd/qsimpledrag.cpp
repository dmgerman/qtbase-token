begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qsimpledrag_p.h"
end_include
begin_include
include|#
directive|include
file|"qbitmap.h"
end_include
begin_include
include|#
directive|include
file|"qdrag.h"
end_include
begin_include
include|#
directive|include
file|"qpixmap.h"
end_include
begin_include
include|#
directive|include
file|"qevent.h"
end_include
begin_include
include|#
directive|include
file|"qfile.h"
end_include
begin_include
include|#
directive|include
file|"qtextcodec.h"
end_include
begin_include
include|#
directive|include
file|"qguiapplication.h"
end_include
begin_include
include|#
directive|include
file|"qpoint.h"
end_include
begin_include
include|#
directive|include
file|"qbuffer.h"
end_include
begin_include
include|#
directive|include
file|"qimage.h"
end_include
begin_include
include|#
directive|include
file|"qregexp.h"
end_include
begin_include
include|#
directive|include
file|"qdir.h"
end_include
begin_include
include|#
directive|include
file|"qimagereader.h"
end_include
begin_include
include|#
directive|include
file|"qimagewriter.h"
end_include
begin_include
include|#
directive|include
file|<private/qguiapplication_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qdnd_p.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_class
DECL|class|QDropData
class|class
name|QDropData
super|:
specifier|public
name|QInternalMimeData
block|{
public|public:
name|QDropData
parameter_list|()
constructor_decl|;
name|~
name|QDropData
parameter_list|()
destructor_decl|;
protected|protected:
name|bool
name|hasFormat_sys
parameter_list|(
specifier|const
name|QString
modifier|&
name|mimeType
parameter_list|)
specifier|const
function_decl|;
name|QStringList
name|formats_sys
parameter_list|()
specifier|const
function_decl|;
name|QVariant
name|retrieveData_sys
parameter_list|(
specifier|const
name|QString
modifier|&
name|mimeType
parameter_list|,
name|QVariant
operator|::
name|Type
name|type
parameter_list|)
specifier|const
function_decl|;
block|}
class|;
end_class
begin_constructor
DECL|function|QSimpleDrag
name|QSimpleDrag
operator|::
name|QSimpleDrag
parameter_list|()
block|{
name|m_dropData
operator|=
operator|new
name|QDropData
argument_list|()
expr_stmt|;
name|currentWindow
operator|=
literal|0
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QSimpleDrag
name|QSimpleDrag
operator|::
name|~
name|QSimpleDrag
parameter_list|()
block|{
operator|delete
name|m_dropData
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|platformDropData
name|QMimeData
modifier|*
name|QSimpleDrag
operator|::
name|platformDropData
parameter_list|()
block|{
return|return
name|m_dropData
return|;
block|}
end_function
begin_function
DECL|function|cancel
name|void
name|QSimpleDrag
operator|::
name|cancel
parameter_list|()
block|{
name|QDragManager
modifier|*
name|m
init|=
name|QDragManager
operator|::
name|self
argument_list|()
decl_stmt|;
comment|//    qDebug("QDragManager::cancel");
if|if
condition|(
name|m
operator|->
name|object
operator|->
name|target
argument_list|()
condition|)
block|{
name|QDragLeaveEvent
name|dle
decl_stmt|;
name|QCoreApplication
operator|::
name|sendEvent
argument_list|(
name|m
operator|->
name|object
operator|->
name|target
argument_list|()
argument_list|,
operator|&
name|dle
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|move
name|void
name|QSimpleDrag
operator|::
name|move
parameter_list|(
specifier|const
name|QMouseEvent
modifier|*
name|me
parameter_list|)
block|{
name|QWindow
modifier|*
name|window
init|=
name|QGuiApplication
operator|::
name|topLevelAt
argument_list|(
name|me
operator|->
name|globalPos
argument_list|()
argument_list|)
decl_stmt|;
name|QPoint
name|pos
decl_stmt|;
if|if
condition|(
name|window
condition|)
name|pos
operator|=
name|me
operator|->
name|globalPos
argument_list|()
operator|-
name|window
operator|->
name|geometry
argument_list|()
operator|.
name|topLeft
argument_list|()
expr_stmt|;
name|QDragManager
modifier|*
name|m
init|=
name|QDragManager
operator|::
name|self
argument_list|()
decl_stmt|;
if|if
condition|(
name|me
operator|->
name|buttons
argument_list|()
condition|)
block|{
name|Qt
operator|::
name|DropAction
name|prevAction
init|=
name|m
operator|->
name|global_accepted_action
decl_stmt|;
if|if
condition|(
name|currentWindow
operator|!=
name|window
condition|)
block|{
if|if
condition|(
name|currentWindow
condition|)
block|{
name|QDragLeaveEvent
name|dle
decl_stmt|;
name|QCoreApplication
operator|::
name|sendEvent
argument_list|(
name|currentWindow
argument_list|,
operator|&
name|dle
argument_list|)
expr_stmt|;
name|m
operator|->
name|willDrop
operator|=
literal|false
expr_stmt|;
name|m
operator|->
name|global_accepted_action
operator|=
name|Qt
operator|::
name|IgnoreAction
expr_stmt|;
block|}
name|currentWindow
operator|=
name|window
expr_stmt|;
if|if
condition|(
name|currentWindow
condition|)
block|{
name|QDragEnterEvent
name|dee
argument_list|(
name|pos
argument_list|,
name|m
operator|->
name|possible_actions
argument_list|,
name|m
operator|->
name|dropData
argument_list|()
argument_list|,
name|me
operator|->
name|buttons
argument_list|()
argument_list|,
name|me
operator|->
name|modifiers
argument_list|()
argument_list|)
decl_stmt|;
name|QCoreApplication
operator|::
name|sendEvent
argument_list|(
name|currentWindow
argument_list|,
operator|&
name|dee
argument_list|)
expr_stmt|;
name|m
operator|->
name|willDrop
operator|=
name|dee
operator|.
name|isAccepted
argument_list|()
operator|&&
name|dee
operator|.
name|dropAction
argument_list|()
operator|!=
name|Qt
operator|::
name|IgnoreAction
expr_stmt|;
name|m
operator|->
name|global_accepted_action
operator|=
name|m
operator|->
name|willDrop
condition|?
name|dee
operator|.
name|dropAction
argument_list|()
else|:
name|Qt
operator|::
name|IgnoreAction
expr_stmt|;
block|}
name|m
operator|->
name|updateCursor
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|window
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|currentWindow
argument_list|)
expr_stmt|;
name|QDragMoveEvent
name|dme
argument_list|(
name|pos
argument_list|,
name|m
operator|->
name|possible_actions
argument_list|,
name|m
operator|->
name|dropData
argument_list|()
argument_list|,
name|me
operator|->
name|buttons
argument_list|()
argument_list|,
name|me
operator|->
name|modifiers
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|->
name|global_accepted_action
operator|!=
name|Qt
operator|::
name|IgnoreAction
condition|)
block|{
name|dme
operator|.
name|setDropAction
argument_list|(
name|m
operator|->
name|global_accepted_action
argument_list|)
expr_stmt|;
name|dme
operator|.
name|accept
argument_list|()
expr_stmt|;
block|}
name|QCoreApplication
operator|::
name|sendEvent
argument_list|(
name|currentWindow
argument_list|,
operator|&
name|dme
argument_list|)
expr_stmt|;
name|m
operator|->
name|willDrop
operator|=
name|dme
operator|.
name|isAccepted
argument_list|()
expr_stmt|;
name|m
operator|->
name|global_accepted_action
operator|=
name|m
operator|->
name|willDrop
condition|?
name|dme
operator|.
name|dropAction
argument_list|()
else|:
name|Qt
operator|::
name|IgnoreAction
expr_stmt|;
name|m
operator|->
name|updatePixmap
argument_list|()
expr_stmt|;
name|m
operator|->
name|updateCursor
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|m
operator|->
name|global_accepted_action
operator|!=
name|prevAction
condition|)
name|m
operator|->
name|emitActionChanged
argument_list|(
name|m
operator|->
name|global_accepted_action
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|drop
name|void
name|QSimpleDrag
operator|::
name|drop
parameter_list|(
specifier|const
name|QMouseEvent
modifier|*
name|me
parameter_list|)
block|{
name|QDragManager
modifier|*
name|m
init|=
name|QDragManager
operator|::
name|self
argument_list|()
decl_stmt|;
name|QWindow
modifier|*
name|window
init|=
name|QGuiApplication
operator|::
name|topLevelAt
argument_list|(
name|me
operator|->
name|globalPos
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|window
condition|)
block|{
name|QPoint
name|pos
init|=
name|me
operator|->
name|globalPos
argument_list|()
operator|-
name|window
operator|->
name|geometry
argument_list|()
operator|.
name|topLeft
argument_list|()
decl_stmt|;
name|QDropEvent
name|de
argument_list|(
name|pos
argument_list|,
name|m
operator|->
name|possible_actions
argument_list|,
name|m
operator|->
name|dropData
argument_list|()
argument_list|,
name|me
operator|->
name|buttons
argument_list|()
argument_list|,
name|me
operator|->
name|modifiers
argument_list|()
argument_list|)
decl_stmt|;
name|QCoreApplication
operator|::
name|sendEvent
argument_list|(
name|window
argument_list|,
operator|&
name|de
argument_list|)
expr_stmt|;
if|if
condition|(
name|de
operator|.
name|isAccepted
argument_list|()
condition|)
name|m
operator|->
name|global_accepted_action
operator|=
name|de
operator|.
name|dropAction
argument_list|()
expr_stmt|;
else|else
name|m
operator|->
name|global_accepted_action
operator|=
name|Qt
operator|::
name|IgnoreAction
expr_stmt|;
block|}
name|currentWindow
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|QDropData
name|QDropData
operator|::
name|QDropData
parameter_list|()
member_init_list|:
name|QInternalMimeData
argument_list|()
block|{ }
end_constructor
begin_destructor
DECL|function|~QDropData
name|QDropData
operator|::
name|~
name|QDropData
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|retrieveData_sys
name|QVariant
name|QDropData
operator|::
name|retrieveData_sys
parameter_list|(
specifier|const
name|QString
modifier|&
name|mimetype
parameter_list|,
name|QVariant
operator|::
name|Type
name|type
parameter_list|)
specifier|const
block|{
name|QDrag
modifier|*
name|object
init|=
name|QDragManager
operator|::
name|self
argument_list|()
operator|->
name|object
decl_stmt|;
if|if
condition|(
operator|!
name|object
condition|)
return|return
name|QVariant
argument_list|()
return|;
name|QByteArray
name|data
init|=
name|object
operator|->
name|mimeData
argument_list|()
operator|->
name|data
argument_list|(
name|mimetype
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|QVariant
operator|::
name|String
condition|)
return|return
name|QString
operator|::
name|fromUtf8
argument_list|(
name|data
argument_list|)
return|;
return|return
name|data
return|;
block|}
end_function
begin_function
DECL|function|hasFormat_sys
name|bool
name|QDropData
operator|::
name|hasFormat_sys
parameter_list|(
specifier|const
name|QString
modifier|&
name|format
parameter_list|)
specifier|const
block|{
return|return
name|formats
argument_list|()
operator|.
name|contains
argument_list|(
name|format
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|formats_sys
name|QStringList
name|QDropData
operator|::
name|formats_sys
parameter_list|()
specifier|const
block|{
name|QDrag
modifier|*
name|object
init|=
name|QDragManager
operator|::
name|self
argument_list|()
operator|->
name|object
decl_stmt|;
if|if
condition|(
name|object
condition|)
return|return
name|object
operator|->
name|mimeData
argument_list|()
operator|->
name|formats
argument_list|()
return|;
return|return
name|QStringList
argument_list|()
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
