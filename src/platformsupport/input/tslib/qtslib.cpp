begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the plugins module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qtslib_p.h"
end_include
begin_include
include|#
directive|include
file|<QSocketNotifier>
end_include
begin_include
include|#
directive|include
file|<QStringList>
end_include
begin_include
include|#
directive|include
file|<QPoint>
end_include
begin_include
include|#
directive|include
file|<QLoggingCategory>
end_include
begin_include
include|#
directive|include
file|<qpa/qwindowsysteminterface.h>
end_include
begin_include
include|#
directive|include
file|<errno.h>
end_include
begin_include
include|#
directive|include
file|<tslib.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
name|Q_LOGGING_CATEGORY
argument_list|(
name|qLcTsLib
argument_list|,
literal|"qt.qpa.input"
argument_list|)
DECL|function|QTsLibMouseHandler
name|QTsLibMouseHandler
operator|::
name|QTsLibMouseHandler
argument_list|(
specifier|const
name|QString
operator|&
name|key
argument_list|,
specifier|const
name|QString
operator|&
name|specification
argument_list|,
name|QObject
operator|*
name|parent
argument_list|)
range|:
name|QObject
argument_list|(
name|parent
argument_list|)
decl_stmt|,
name|m_notify
argument_list|(
literal|0
argument_list|)
decl_stmt|,
name|m_x
argument_list|(
literal|0
argument_list|)
decl_stmt|,
name|m_y
argument_list|(
literal|0
argument_list|)
decl_stmt|,
name|m_pressed
argument_list|(
literal|0
argument_list|)
decl_stmt|,
name|m_rawMode
argument_list|(
literal|false
argument_list|)
argument_list|{
name|qCDebug
argument_list|(
name|qLcTsLib
argument_list|)
operator|<<
literal|"Initializing tslib plugin"
operator|<<
name|key
operator|<<
name|specification
argument_list|;
name|setObjectName
argument_list|(
name|QLatin1String
argument_list|(
literal|"TSLib Mouse Handler"
argument_list|)
argument_list|)
argument_list|;
name|QByteArray
name|device
operator|=
name|qgetenv
argument_list|(
literal|"TSLIB_TSDEVICE"
argument_list|)
argument_list|;      if
operator|(
name|specification
operator|.
name|startsWith
argument_list|(
name|QStringLiteral
argument_list|(
literal|"/dev/"
argument_list|)
argument_list|)
operator|)
name|device
operator|=
name|specification
operator|.
name|toLocal8Bit
argument_list|()
argument_list|;      if
operator|(
name|device
operator|.
name|isEmpty
argument_list|()
operator|)
name|device
operator|=
name|QByteArrayLiteral
argument_list|(
literal|"/dev/input/event1"
argument_list|)
argument_list|;
name|m_dev
operator|=
name|ts_open
argument_list|(
name|device
operator|.
name|constData
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|;     if
operator|(
operator|!
name|m_dev
operator|)
block|{
name|qErrnoWarning
argument_list|(
name|errno
argument_list|,
literal|"ts_open() failed"
argument_list|)
block|;
return|return;
block|}
if|if
condition|(
name|ts_config
argument_list|(
name|m_dev
argument_list|)
condition|)
name|qErrnoWarning
argument_list|(
name|errno
argument_list|,
literal|"ts_config() failed"
argument_list|)
expr_stmt|;
end_decl_stmt
begin_expr_stmt
name|m_rawMode
operator|=
operator|!
name|key
operator|.
name|compare
argument_list|(
name|QLatin1String
argument_list|(
literal|"TslibRaw"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|int
name|fd
init|=
name|ts_fd
argument_list|(
name|m_dev
argument_list|)
decl_stmt|;
end_decl_stmt
begin_if
if|if
condition|(
name|fd
operator|>=
literal|0
condition|)
block|{
name|qCDebug
argument_list|(
name|qLcTsLib
argument_list|)
operator|<<
literal|"tslib device is"
operator|<<
name|device
expr_stmt|;
name|m_notify
operator|=
operator|new
name|QSocketNotifier
argument_list|(
name|fd
argument_list|,
name|QSocketNotifier
operator|::
name|Read
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|m_notify
argument_list|,
name|SIGNAL
argument_list|(
name|activated
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|readMouseData
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qErrnoWarning
argument_list|(
name|errno
argument_list|,
literal|"tslib: Cannot open input device %s"
argument_list|,
name|device
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_if
begin_destructor
unit|}  QTsLibMouseHandler
DECL|function|~QTsLibMouseHandler
operator|::
name|~
name|QTsLibMouseHandler
parameter_list|()
block|{
if|if
condition|(
name|m_dev
condition|)
name|ts_close
argument_list|(
name|m_dev
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|get_sample
specifier|static
name|bool
name|get_sample
parameter_list|(
name|struct
name|tsdev
modifier|*
name|dev
parameter_list|,
name|struct
name|ts_sample
modifier|*
name|sample
parameter_list|,
name|bool
name|rawMode
parameter_list|)
block|{
if|if
condition|(
name|rawMode
condition|)
return|return
operator|(
name|ts_read_raw
argument_list|(
name|dev
argument_list|,
name|sample
argument_list|,
literal|1
argument_list|)
operator|==
literal|1
operator|)
return|;
else|else
return|return
operator|(
name|ts_read
argument_list|(
name|dev
argument_list|,
name|sample
argument_list|,
literal|1
argument_list|)
operator|==
literal|1
operator|)
return|;
block|}
end_function
begin_function
DECL|function|readMouseData
name|void
name|QTsLibMouseHandler
operator|::
name|readMouseData
parameter_list|()
block|{
name|ts_sample
name|sample
decl_stmt|;
while|while
condition|(
name|get_sample
argument_list|(
name|m_dev
argument_list|,
operator|&
name|sample
argument_list|,
name|m_rawMode
argument_list|)
condition|)
block|{
name|bool
name|pressed
init|=
name|sample
operator|.
name|pressure
decl_stmt|;
name|int
name|x
init|=
name|sample
operator|.
name|x
decl_stmt|;
name|int
name|y
init|=
name|sample
operator|.
name|y
decl_stmt|;
comment|// work around missing coordinates on mouse release
if|if
condition|(
name|sample
operator|.
name|pressure
operator|==
literal|0
operator|&&
name|sample
operator|.
name|x
operator|==
literal|0
operator|&&
name|sample
operator|.
name|y
operator|==
literal|0
condition|)
block|{
name|x
operator|=
name|m_x
expr_stmt|;
name|y
operator|=
name|m_y
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|m_rawMode
condition|)
block|{
comment|//filtering: ignore movements of 2 pixels or less
name|int
name|dx
init|=
name|x
operator|-
name|m_x
decl_stmt|;
name|int
name|dy
init|=
name|y
operator|-
name|m_y
decl_stmt|;
if|if
condition|(
name|dx
operator|*
name|dx
operator|<=
literal|4
operator|&&
name|dy
operator|*
name|dy
operator|<=
literal|4
operator|&&
name|pressed
operator|==
name|m_pressed
condition|)
continue|continue;
block|}
name|QPoint
name|pos
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
decl_stmt|;
name|QWindowSystemInterface
operator|::
name|handleMouseEvent
argument_list|(
literal|0
argument_list|,
name|pos
argument_list|,
name|pos
argument_list|,
name|pressed
condition|?
name|Qt
operator|::
name|LeftButton
else|:
name|Qt
operator|::
name|NoButton
argument_list|)
expr_stmt|;
name|m_x
operator|=
name|x
expr_stmt|;
name|m_y
operator|=
name|y
expr_stmt|;
name|m_pressed
operator|=
name|pressed
expr_stmt|;
block|}
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
