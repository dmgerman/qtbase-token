begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qevdevmousehandler_p.h"
end_include
begin_include
include|#
directive|include
file|<QSocketNotifier>
end_include
begin_include
include|#
directive|include
file|<QStringList>
end_include
begin_include
include|#
directive|include
file|<QPoint>
end_include
begin_include
include|#
directive|include
file|<QGuiApplication>
end_include
begin_include
include|#
directive|include
file|<QScreen>
end_include
begin_include
include|#
directive|include
file|<QLoggingCategory>
end_include
begin_include
include|#
directive|include
file|<qpa/qwindowsysteminterface.h>
end_include
begin_include
include|#
directive|include
file|<qplatformdefs.h>
end_include
begin_include
include|#
directive|include
file|<private/qcore_unix_p.h>
end_include
begin_comment
comment|// overrides QT_OPEN
end_comment
begin_include
include|#
directive|include
file|<private/qhighdpiscaling_p.h>
end_include
begin_include
include|#
directive|include
file|<errno.h>
end_include
begin_include
include|#
directive|include
file|<linux/kd.h>
end_include
begin_include
include|#
directive|include
file|<linux/input.h>
end_include
begin_define
DECL|macro|TEST_BIT
define|#
directive|define
name|TEST_BIT
parameter_list|(
name|array
parameter_list|,
name|bit
parameter_list|)
value|(array[bit/8]& (1<<(bit%8)))
end_define
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
name|Q_LOGGING_CATEGORY
argument_list|(
name|qLcEvdevMouse
argument_list|,
literal|"qt.qpa.input"
argument_list|)
DECL|function|create
name|QEvdevMouseHandler
modifier|*
name|QEvdevMouseHandler
operator|::
name|create
argument_list|(
specifier|const
name|QString
operator|&
name|device
argument_list|,
specifier|const
name|QString
operator|&
name|specification
argument_list|)
argument_list|{
name|qCDebug
argument_list|(
name|qLcEvdevMouse
argument_list|)
operator|<<
literal|"create mouse handler for"
operator|<<
name|device
operator|<<
name|specification
argument_list|;
name|bool
name|compression
operator|=
literal|true
argument_list|;
name|int
name|jitterLimit
operator|=
literal|0
argument_list|;
name|int
name|grab
operator|=
literal|0
argument_list|;
name|bool
name|abs
operator|=
literal|false
argument_list|;
specifier|const
name|auto
name|args
operator|=
name|specification
operator|.
name|splitRef
argument_list|(
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
argument_list|)
argument_list|;     for
operator|(
specifier|const
name|QStringRef
operator|&
name|arg
operator|:
name|args
operator|)
block|{
if|if
condition|(
name|arg
operator|==
name|QLatin1String
argument_list|(
literal|"nocompress"
argument_list|)
condition|)
name|compression
operator|=
literal|false
expr_stmt|;
elseif|else
if|if
condition|(
name|arg
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"dejitter="
argument_list|)
argument_list|)
condition|)
name|jitterLimit
operator|=
name|arg
operator|.
name|mid
argument_list|(
literal|9
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|arg
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"grab="
argument_list|)
argument_list|)
condition|)
name|grab
operator|=
name|arg
operator|.
name|mid
argument_list|(
literal|5
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|arg
operator|==
name|QLatin1String
argument_list|(
literal|"abs"
argument_list|)
condition|)
name|abs
operator|=
literal|true
expr_stmt|;
block|}
name|int
name|fd
argument_list|;
name|fd
operator|=
name|qt_safe_open
argument_list|(
name|device
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|O_RDONLY
operator||
name|O_NDELAY
argument_list|,
literal|0
argument_list|)
argument_list|;     if
operator|(
name|fd
operator|>=
literal|0
operator|)
block|{
operator|::
name|ioctl
argument_list|(
name|fd
argument_list|,
name|EVIOCGRAB
argument_list|,
name|grab
argument_list|)
block|;
return|return
operator|new
name|QEvdevMouseHandler
argument_list|(
name|device
argument_list|,
name|fd
argument_list|,
name|abs
argument_list|,
name|compression
argument_list|,
name|jitterLimit
argument_list|)
return|;
block|}
else|else
block|{
name|qErrnoWarning
argument_list|(
name|errno
argument_list|,
literal|"Cannot open mouse input device %s"
argument_list|,
name|qPrintable
argument_list|(
name|device
argument_list|)
argument_list|)
block|;
return|return
literal|0
return|;
block|}
expr|}
DECL|function|QEvdevMouseHandler
name|QEvdevMouseHandler
operator|::
name|QEvdevMouseHandler
operator|(
specifier|const
name|QString
operator|&
name|device
operator|,
name|int
name|fd
operator|,
name|bool
name|abs
operator|,
name|bool
name|compression
operator|,
name|int
name|jitterLimit
operator|)
operator|:
name|m_device
argument_list|(
name|device
argument_list|)
operator|,
name|m_fd
argument_list|(
name|fd
argument_list|)
operator|,
name|m_notify
argument_list|(
literal|0
argument_list|)
operator|,
name|m_x
argument_list|(
literal|0
argument_list|)
operator|,
name|m_y
argument_list|(
literal|0
argument_list|)
operator|,
name|m_prevx
argument_list|(
literal|0
argument_list|)
operator|,
name|m_prevy
argument_list|(
literal|0
argument_list|)
operator|,
name|m_abs
argument_list|(
name|abs
argument_list|)
operator|,
name|m_compression
argument_list|(
name|compression
argument_list|)
operator|,
name|m_buttons
argument_list|(
literal|0
argument_list|)
operator|,
name|m_prevInvalid
argument_list|(
literal|true
argument_list|)
block|{
name|setObjectName
argument_list|(
name|QLatin1String
argument_list|(
literal|"Evdev Mouse Handler"
argument_list|)
argument_list|)
block|;
name|m_jitterLimitSquared
operator|=
name|jitterLimit
operator|*
name|jitterLimit
block|;
comment|// Some touch screens present as mice with absolute coordinates.
comment|// These can not be differentiated from touchpads, so supplying abs to QT_QPA_EVDEV_MOUSE_PARAMETERS
comment|// will force qevdevmousehandler to treat the coordinates as absolute, scaled to the hardware maximums.
comment|// Turning this on will not affect mice as these do not report in absolute coordinates
comment|// but will make touchpads act like touch screens
if|if
condition|(
name|m_abs
condition|)
name|m_abs
operator|=
name|getHardwareMaximum
argument_list|()
expr_stmt|;
comment|// socket notifier for events on the mouse device
name|QSocketNotifier
operator|*
name|notifier
expr_stmt|;
name|notifier
operator|=
operator|new
name|QSocketNotifier
argument_list|(
name|m_fd
argument_list|,
name|QSocketNotifier
operator|::
name|Read
argument_list|,
name|this
argument_list|)
argument_list|;
name|connect
argument_list|(
name|notifier
argument_list|,
name|SIGNAL
argument_list|(
name|activated
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|readMouseData
argument_list|()
argument_list|)
argument_list|)
argument_list|; }
DECL|function|~QEvdevMouseHandler
name|QEvdevMouseHandler
operator|::
name|~
name|QEvdevMouseHandler
argument_list|()
argument_list|{     if
operator|(
name|m_fd
operator|>=
literal|0
operator|)
name|qt_safe_close
argument_list|(
name|m_fd
argument_list|)
argument_list|; }
comment|// Ask touch screen hardware for information on coordinate maximums
comment|// If any ioctls fail, revert to non abs mode
DECL|function|getHardwareMaximum
name|bool
name|QEvdevMouseHandler
operator|::
name|getHardwareMaximum
argument_list|()
argument_list|{
name|unsigned
name|char
name|absFeatures
index|[
operator|(
name|ABS_MAX
operator|/
literal|8
operator|)
operator|+
literal|1
index|]
argument_list|;
name|memset
argument_list|(
name|absFeatures
argument_list|,
literal|'\0'
argument_list|,
sizeof|sizeof
argument_list|(
name|absFeatures
argument_list|)
argument_list|)
argument_list|;
comment|// test if ABS_X, ABS_Y are available
argument_list|if
operator|(
name|ioctl
argument_list|(
name|m_fd
argument_list|,
name|EVIOCGBIT
argument_list|(
name|EV_ABS
argument_list|,
sizeof|sizeof
argument_list|(
name|absFeatures
argument_list|)
argument_list|)
argument_list|,
name|absFeatures
argument_list|)
operator|==
operator|-
literal|1
operator|)
return|return
literal|false
return|;
end_decl_stmt
begin_if
if|if
condition|(
operator|(
operator|!
name|TEST_BIT
argument_list|(
name|absFeatures
argument_list|,
name|ABS_X
argument_list|)
operator|)
operator|||
operator|(
operator|!
name|TEST_BIT
argument_list|(
name|absFeatures
argument_list|,
name|ABS_Y
argument_list|)
operator|)
condition|)
return|return
literal|false
return|;
end_if
begin_comment
comment|// ask hardware for minimum and maximum values
end_comment
begin_decl_stmt
name|struct
name|input_absinfo
name|absInfo
decl_stmt|;
end_decl_stmt
begin_if
if|if
condition|(
name|ioctl
argument_list|(
name|m_fd
argument_list|,
name|EVIOCGABS
argument_list|(
name|ABS_X
argument_list|)
argument_list|,
operator|&
name|absInfo
argument_list|)
operator|==
operator|-
literal|1
condition|)
return|return
literal|false
return|;
end_if
begin_expr_stmt
name|m_hardwareWidth
operator|=
name|absInfo
operator|.
name|maximum
operator|-
name|absInfo
operator|.
name|minimum
expr_stmt|;
end_expr_stmt
begin_if
if|if
condition|(
name|ioctl
argument_list|(
name|m_fd
argument_list|,
name|EVIOCGABS
argument_list|(
name|ABS_Y
argument_list|)
argument_list|,
operator|&
name|absInfo
argument_list|)
operator|==
operator|-
literal|1
condition|)
return|return
literal|false
return|;
end_if
begin_expr_stmt
name|m_hardwareHeight
operator|=
name|absInfo
operator|.
name|maximum
operator|-
name|absInfo
operator|.
name|minimum
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|QScreen
modifier|*
name|primaryScreen
init|=
name|QGuiApplication
operator|::
name|primaryScreen
argument_list|()
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QRect
name|g
init|=
name|QHighDpi
operator|::
name|toNativePixels
argument_list|(
name|primaryScreen
operator|->
name|virtualGeometry
argument_list|()
argument_list|,
name|primaryScreen
argument_list|)
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|m_hardwareScalerX
operator|=
cast|static_cast
argument_list|<
name|qreal
argument_list|>
argument_list|(
name|m_hardwareWidth
argument_list|)
operator|/
operator|(
name|g
operator|.
name|right
argument_list|()
operator|-
name|g
operator|.
name|left
argument_list|()
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|m_hardwareScalerY
operator|=
cast|static_cast
argument_list|<
name|qreal
argument_list|>
argument_list|(
name|m_hardwareHeight
argument_list|)
operator|/
operator|(
name|g
operator|.
name|bottom
argument_list|()
operator|-
name|g
operator|.
name|top
argument_list|()
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|qCDebug
argument_list|(
name|qLcEvdevMouse
argument_list|)
operator|<<
literal|"Absolute pointing device"
operator|<<
literal|"hardware max x"
operator|<<
name|m_hardwareWidth
operator|<<
literal|"hardware max y"
operator|<<
name|m_hardwareHeight
operator|<<
literal|"hardware scalers x"
operator|<<
name|m_hardwareScalerX
operator|<<
literal|'y'
operator|<<
name|m_hardwareScalerY
expr_stmt|;
end_expr_stmt
begin_return
return|return
literal|true
return|;
end_return
begin_macro
unit|}  void
DECL|function|sendMouseEvent
name|QEvdevMouseHandler
end_macro
begin_expr_stmt
DECL|function|sendMouseEvent
operator|::
name|sendMouseEvent
operator|(
operator|)
block|{
name|int
name|x
block|;
name|int
name|y
block|;
if|if
condition|(
operator|!
name|m_abs
condition|)
block|{
name|x
operator|=
name|m_x
operator|-
name|m_prevx
expr_stmt|;
name|y
operator|=
name|m_y
operator|-
name|m_prevy
expr_stmt|;
block|}
end_expr_stmt
begin_else
else|else
block|{
name|x
operator|=
name|m_x
operator|/
name|m_hardwareScalerX
expr_stmt|;
name|y
operator|=
name|m_y
operator|/
name|m_hardwareScalerY
expr_stmt|;
block|}
end_else
begin_if
if|if
condition|(
name|m_prevInvalid
condition|)
block|{
name|x
operator|=
name|y
operator|=
literal|0
expr_stmt|;
name|m_prevInvalid
operator|=
literal|false
expr_stmt|;
block|}
end_if
begin_emit
emit|emit
name|handleMouseEvent
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|m_abs
argument_list|,
name|m_buttons
argument_list|)
emit|;
end_emit
begin_expr_stmt
name|m_prevx
operator|=
name|m_x
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|m_prevy
operator|=
name|m_y
expr_stmt|;
end_expr_stmt
begin_macro
unit|}  void
DECL|function|readMouseData
name|QEvdevMouseHandler
end_macro
begin_expr_stmt
DECL|function|readMouseData
operator|::
name|readMouseData
operator|(
operator|)
block|{     struct
operator|::
name|input_event
name|buffer
index|[
literal|32
index|]
block|;
name|int
name|n
operator|=
literal|0
block|;
name|bool
name|posChanged
operator|=
literal|false
block|,
name|btnChanged
operator|=
literal|false
block|;
name|bool
name|pendingMouseEvent
operator|=
literal|false
block|;
name|int
name|eventCompressCount
operator|=
literal|0
block|;
forever|forever
block|{
name|int
name|result
init|=
name|QT_READ
argument_list|(
name|m_fd
argument_list|,
cast|reinterpret_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
name|buffer
argument_list|)
operator|+
name|n
argument_list|,
sizeof|sizeof
argument_list|(
name|buffer
argument_list|)
operator|-
name|n
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|0
condition|)
block|{
name|qWarning
argument_list|(
literal|"evdevmouse: Got EOF from the input device"
argument_list|)
expr_stmt|;
return|return;
block|}
end_expr_stmt
begin_elseif
elseif|else
if|if
condition|(
name|result
operator|<
literal|0
condition|)
block|{
if|if
condition|(
name|errno
operator|!=
name|EINTR
operator|&&
name|errno
operator|!=
name|EAGAIN
condition|)
block|{
name|qErrnoWarning
argument_list|(
name|errno
argument_list|,
literal|"evdevmouse: Could not read from input device"
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
end_elseif
begin_else
else|else
block|{
name|n
operator|+=
name|result
expr_stmt|;
if|if
condition|(
name|n
operator|%
sizeof|sizeof
argument_list|(
name|buffer
index|[
literal|0
index|]
argument_list|)
operator|==
literal|0
condition|)
break|break;
block|}
end_else
begin_expr_stmt
unit|}      n
operator|/=
sizeof|sizeof
argument_list|(
name|buffer
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
end_expr_stmt
begin_for
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
operator|++
name|i
control|)
block|{
name|struct
operator|::
name|input_event
modifier|*
name|data
init|=
operator|&
name|buffer
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|data
operator|->
name|type
operator|==
name|EV_ABS
condition|)
block|{
comment|// Touchpads: store the absolute position for now, will calculate a relative one later.
if|if
condition|(
name|data
operator|->
name|code
operator|==
name|ABS_X
operator|&&
name|m_x
operator|!=
name|data
operator|->
name|value
condition|)
block|{
name|m_x
operator|=
name|data
operator|->
name|value
expr_stmt|;
name|posChanged
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|data
operator|->
name|code
operator|==
name|ABS_Y
operator|&&
name|m_y
operator|!=
name|data
operator|->
name|value
condition|)
block|{
name|m_y
operator|=
name|data
operator|->
name|value
expr_stmt|;
name|posChanged
operator|=
literal|true
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|data
operator|->
name|type
operator|==
name|EV_REL
condition|)
block|{
if|if
condition|(
name|data
operator|->
name|code
operator|==
name|REL_X
condition|)
block|{
name|m_x
operator|+=
name|data
operator|->
name|value
expr_stmt|;
name|posChanged
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|data
operator|->
name|code
operator|==
name|REL_Y
condition|)
block|{
name|m_y
operator|+=
name|data
operator|->
name|value
expr_stmt|;
name|posChanged
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|data
operator|->
name|code
operator|==
name|ABS_WHEEL
condition|)
block|{
comment|// vertical scroll
comment|// data->value: 1 == up, -1 == down
specifier|const
name|int
name|delta
init|=
literal|120
operator|*
name|data
operator|->
name|value
decl_stmt|;
emit|emit
name|handleWheelEvent
argument_list|(
name|delta
argument_list|,
name|Qt
operator|::
name|Vertical
argument_list|)
emit|;
block|}
elseif|else
if|if
condition|(
name|data
operator|->
name|code
operator|==
name|ABS_THROTTLE
condition|)
block|{
comment|// horizontal scroll
comment|// data->value: 1 == right, -1 == left
specifier|const
name|int
name|delta
init|=
literal|120
operator|*
operator|-
name|data
operator|->
name|value
decl_stmt|;
emit|emit
name|handleWheelEvent
argument_list|(
name|delta
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|)
emit|;
block|}
block|}
elseif|else
if|if
condition|(
name|data
operator|->
name|type
operator|==
name|EV_KEY
operator|&&
name|data
operator|->
name|code
operator|==
name|BTN_TOUCH
condition|)
block|{
comment|// We care about touchpads only, not touchscreens -> don't map to button press.
comment|// Need to invalidate prevx/y however to get proper relative pos.
name|m_prevInvalid
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|data
operator|->
name|type
operator|==
name|EV_KEY
operator|&&
name|data
operator|->
name|code
operator|>=
name|BTN_LEFT
operator|&&
name|data
operator|->
name|code
operator|<=
name|BTN_JOYSTICK
condition|)
block|{
name|Qt
operator|::
name|MouseButton
name|button
init|=
name|Qt
operator|::
name|NoButton
decl_stmt|;
comment|// BTN_LEFT == 0x110 in kernel's input.h
comment|// The range of possible mouse buttons ends just before BTN_JOYSTICK, value 0x120.
switch|switch
condition|(
name|data
operator|->
name|code
condition|)
block|{
case|case
literal|0x110
case|:
name|button
operator|=
name|Qt
operator|::
name|LeftButton
expr_stmt|;
break|break;
comment|// BTN_LEFT
case|case
literal|0x111
case|:
name|button
operator|=
name|Qt
operator|::
name|RightButton
expr_stmt|;
break|break;
case|case
literal|0x112
case|:
name|button
operator|=
name|Qt
operator|::
name|MiddleButton
expr_stmt|;
break|break;
case|case
literal|0x113
case|:
name|button
operator|=
name|Qt
operator|::
name|ExtraButton1
expr_stmt|;
break|break;
comment|// AKA Qt::BackButton
case|case
literal|0x114
case|:
name|button
operator|=
name|Qt
operator|::
name|ExtraButton2
expr_stmt|;
break|break;
comment|// AKA Qt::ForwardButton
case|case
literal|0x115
case|:
name|button
operator|=
name|Qt
operator|::
name|ExtraButton3
expr_stmt|;
break|break;
comment|// AKA Qt::TaskButton
case|case
literal|0x116
case|:
name|button
operator|=
name|Qt
operator|::
name|ExtraButton4
expr_stmt|;
break|break;
case|case
literal|0x117
case|:
name|button
operator|=
name|Qt
operator|::
name|ExtraButton5
expr_stmt|;
break|break;
case|case
literal|0x118
case|:
name|button
operator|=
name|Qt
operator|::
name|ExtraButton6
expr_stmt|;
break|break;
case|case
literal|0x119
case|:
name|button
operator|=
name|Qt
operator|::
name|ExtraButton7
expr_stmt|;
break|break;
case|case
literal|0x11a
case|:
name|button
operator|=
name|Qt
operator|::
name|ExtraButton8
expr_stmt|;
break|break;
case|case
literal|0x11b
case|:
name|button
operator|=
name|Qt
operator|::
name|ExtraButton9
expr_stmt|;
break|break;
case|case
literal|0x11c
case|:
name|button
operator|=
name|Qt
operator|::
name|ExtraButton10
expr_stmt|;
break|break;
case|case
literal|0x11d
case|:
name|button
operator|=
name|Qt
operator|::
name|ExtraButton11
expr_stmt|;
break|break;
case|case
literal|0x11e
case|:
name|button
operator|=
name|Qt
operator|::
name|ExtraButton12
expr_stmt|;
break|break;
case|case
literal|0x11f
case|:
name|button
operator|=
name|Qt
operator|::
name|ExtraButton13
expr_stmt|;
break|break;
block|}
name|m_buttons
operator|.
name|setFlag
argument_list|(
name|button
argument_list|,
name|data
operator|->
name|value
argument_list|)
expr_stmt|;
name|btnChanged
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|data
operator|->
name|type
operator|==
name|EV_SYN
operator|&&
name|data
operator|->
name|code
operator|==
name|SYN_REPORT
condition|)
block|{
if|if
condition|(
name|btnChanged
condition|)
block|{
name|btnChanged
operator|=
name|posChanged
operator|=
literal|false
expr_stmt|;
name|sendMouseEvent
argument_list|()
expr_stmt|;
name|pendingMouseEvent
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|posChanged
condition|)
block|{
name|posChanged
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|m_compression
condition|)
block|{
name|pendingMouseEvent
operator|=
literal|true
expr_stmt|;
name|eventCompressCount
operator|++
expr_stmt|;
block|}
else|else
block|{
name|sendMouseEvent
argument_list|()
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|data
operator|->
name|type
operator|==
name|EV_MSC
operator|&&
name|data
operator|->
name|code
operator|==
name|MSC_SCAN
condition|)
block|{
comment|// kernel encountered an unmapped key - just ignore it
continue|continue;
block|}
block|}
end_for
begin_if
if|if
condition|(
name|m_compression
operator|&&
name|pendingMouseEvent
condition|)
block|{
name|int
name|distanceSquared
init|=
operator|(
name|m_x
operator|-
name|m_prevx
operator|)
operator|*
operator|(
name|m_x
operator|-
name|m_prevx
operator|)
operator|+
operator|(
name|m_y
operator|-
name|m_prevy
operator|)
operator|*
operator|(
name|m_y
operator|-
name|m_prevy
operator|)
decl_stmt|;
if|if
condition|(
name|distanceSquared
operator|>
name|m_jitterLimitSquared
condition|)
name|sendMouseEvent
argument_list|()
expr_stmt|;
block|}
end_if
unit|}  QT_END_NAMESPACE
end_unit
