begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the plugins module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qlibinputkeyboard_p.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/QTextCodec>
end_include
begin_include
include|#
directive|include
file|<qpa/qwindowsysteminterface.h>
end_include
begin_include
include|#
directive|include
file|<libinput.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_XKBCOMMON_EVDEV
end_ifndef
begin_include
include|#
directive|include
file|<xkbcommon/xkbcommon-keysyms.h>
end_include
begin_include
include|#
directive|include
file|<xkbcommon/xkbcommon-names.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|REPEAT_DELAY
specifier|const
name|int
name|REPEAT_DELAY
init|=
literal|500
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|REPEAT_RATE
specifier|const
name|int
name|REPEAT_RATE
init|=
literal|100
decl_stmt|;
end_decl_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_XKBCOMMON_EVDEV
end_ifndef
begin_struct
DECL|struct|KeyTabEntry
struct|struct
name|KeyTabEntry
block|{
DECL|member|xkbkey
name|int
name|xkbkey
decl_stmt|;
DECL|member|qtkey
name|int
name|qtkey
decl_stmt|;
block|}
struct|;
end_struct
begin_function
DECL|function|operator ==
specifier|static
specifier|inline
name|bool
name|operator
name|==
parameter_list|(
specifier|const
name|KeyTabEntry
modifier|&
name|a
parameter_list|,
specifier|const
name|KeyTabEntry
modifier|&
name|b
parameter_list|)
block|{
return|return
name|a
operator|.
name|xkbkey
operator|==
name|b
operator|.
name|xkbkey
return|;
block|}
end_function
begin_decl_stmt
DECL|variable|keyTab
specifier|static
specifier|const
name|KeyTabEntry
name|keyTab
index|[]
init|=
block|{
block|{
name|XKB_KEY_Escape
block|,
name|Qt
operator|::
name|Key_Escape
block|}
block|,
block|{
name|XKB_KEY_Tab
block|,
name|Qt
operator|::
name|Key_Tab
block|}
block|,
block|{
name|XKB_KEY_ISO_Left_Tab
block|,
name|Qt
operator|::
name|Key_Backtab
block|}
block|,
block|{
name|XKB_KEY_BackSpace
block|,
name|Qt
operator|::
name|Key_Backspace
block|}
block|,
block|{
name|XKB_KEY_Return
block|,
name|Qt
operator|::
name|Key_Return
block|}
block|,
block|{
name|XKB_KEY_Insert
block|,
name|Qt
operator|::
name|Key_Insert
block|}
block|,
block|{
name|XKB_KEY_Delete
block|,
name|Qt
operator|::
name|Key_Delete
block|}
block|,
block|{
name|XKB_KEY_Clear
block|,
name|Qt
operator|::
name|Key_Delete
block|}
block|,
block|{
name|XKB_KEY_Pause
block|,
name|Qt
operator|::
name|Key_Pause
block|}
block|,
block|{
name|XKB_KEY_Print
block|,
name|Qt
operator|::
name|Key_Print
block|}
block|,
block|{
name|XKB_KEY_Home
block|,
name|Qt
operator|::
name|Key_Home
block|}
block|,
block|{
name|XKB_KEY_End
block|,
name|Qt
operator|::
name|Key_End
block|}
block|,
block|{
name|XKB_KEY_Left
block|,
name|Qt
operator|::
name|Key_Left
block|}
block|,
block|{
name|XKB_KEY_Up
block|,
name|Qt
operator|::
name|Key_Up
block|}
block|,
block|{
name|XKB_KEY_Right
block|,
name|Qt
operator|::
name|Key_Right
block|}
block|,
block|{
name|XKB_KEY_Down
block|,
name|Qt
operator|::
name|Key_Down
block|}
block|,
block|{
name|XKB_KEY_Prior
block|,
name|Qt
operator|::
name|Key_PageUp
block|}
block|,
block|{
name|XKB_KEY_Next
block|,
name|Qt
operator|::
name|Key_PageDown
block|}
block|,
block|{
name|XKB_KEY_Shift_L
block|,
name|Qt
operator|::
name|Key_Shift
block|}
block|,
block|{
name|XKB_KEY_Shift_R
block|,
name|Qt
operator|::
name|Key_Shift
block|}
block|,
block|{
name|XKB_KEY_Shift_Lock
block|,
name|Qt
operator|::
name|Key_Shift
block|}
block|,
block|{
name|XKB_KEY_Control_L
block|,
name|Qt
operator|::
name|Key_Control
block|}
block|,
block|{
name|XKB_KEY_Control_R
block|,
name|Qt
operator|::
name|Key_Control
block|}
block|,
block|{
name|XKB_KEY_Meta_L
block|,
name|Qt
operator|::
name|Key_Meta
block|}
block|,
block|{
name|XKB_KEY_Meta_R
block|,
name|Qt
operator|::
name|Key_Meta
block|}
block|,
block|{
name|XKB_KEY_Alt_L
block|,
name|Qt
operator|::
name|Key_Alt
block|}
block|,
block|{
name|XKB_KEY_Alt_R
block|,
name|Qt
operator|::
name|Key_Alt
block|}
block|,
block|{
name|XKB_KEY_Caps_Lock
block|,
name|Qt
operator|::
name|Key_CapsLock
block|}
block|,
block|{
name|XKB_KEY_Num_Lock
block|,
name|Qt
operator|::
name|Key_NumLock
block|}
block|,
block|{
name|XKB_KEY_Scroll_Lock
block|,
name|Qt
operator|::
name|Key_ScrollLock
block|}
block|,
block|{
name|XKB_KEY_Super_L
block|,
name|Qt
operator|::
name|Key_Super_L
block|}
block|,
block|{
name|XKB_KEY_Super_R
block|,
name|Qt
operator|::
name|Key_Super_R
block|}
block|,
block|{
name|XKB_KEY_Menu
block|,
name|Qt
operator|::
name|Key_Menu
block|}
block|,
block|{
name|XKB_KEY_Hyper_L
block|,
name|Qt
operator|::
name|Key_Hyper_L
block|}
block|,
block|{
name|XKB_KEY_Hyper_R
block|,
name|Qt
operator|::
name|Key_Hyper_R
block|}
block|,
block|{
name|XKB_KEY_Help
block|,
name|Qt
operator|::
name|Key_Help
block|}
block|,
block|{
name|XKB_KEY_KP_Space
block|,
name|Qt
operator|::
name|Key_Space
block|}
block|,
block|{
name|XKB_KEY_KP_Tab
block|,
name|Qt
operator|::
name|Key_Tab
block|}
block|,
block|{
name|XKB_KEY_KP_Enter
block|,
name|Qt
operator|::
name|Key_Enter
block|}
block|,
block|{
name|XKB_KEY_KP_Home
block|,
name|Qt
operator|::
name|Key_Home
block|}
block|,
block|{
name|XKB_KEY_KP_Left
block|,
name|Qt
operator|::
name|Key_Left
block|}
block|,
block|{
name|XKB_KEY_KP_Up
block|,
name|Qt
operator|::
name|Key_Up
block|}
block|,
block|{
name|XKB_KEY_KP_Right
block|,
name|Qt
operator|::
name|Key_Right
block|}
block|,
block|{
name|XKB_KEY_KP_Down
block|,
name|Qt
operator|::
name|Key_Down
block|}
block|,
block|{
name|XKB_KEY_KP_Prior
block|,
name|Qt
operator|::
name|Key_PageUp
block|}
block|,
block|{
name|XKB_KEY_KP_Next
block|,
name|Qt
operator|::
name|Key_PageDown
block|}
block|,
block|{
name|XKB_KEY_KP_End
block|,
name|Qt
operator|::
name|Key_End
block|}
block|,
block|{
name|XKB_KEY_KP_Begin
block|,
name|Qt
operator|::
name|Key_Clear
block|}
block|,
block|{
name|XKB_KEY_KP_Insert
block|,
name|Qt
operator|::
name|Key_Insert
block|}
block|,
block|{
name|XKB_KEY_KP_Delete
block|,
name|Qt
operator|::
name|Key_Delete
block|}
block|,
block|{
name|XKB_KEY_KP_Equal
block|,
name|Qt
operator|::
name|Key_Equal
block|}
block|,
block|{
name|XKB_KEY_KP_Multiply
block|,
name|Qt
operator|::
name|Key_Asterisk
block|}
block|,
block|{
name|XKB_KEY_KP_Add
block|,
name|Qt
operator|::
name|Key_Plus
block|}
block|,
block|{
name|XKB_KEY_KP_Separator
block|,
name|Qt
operator|::
name|Key_Comma
block|}
block|,
block|{
name|XKB_KEY_KP_Subtract
block|,
name|Qt
operator|::
name|Key_Minus
block|}
block|,
block|{
name|XKB_KEY_KP_Decimal
block|,
name|Qt
operator|::
name|Key_Period
block|}
block|,
block|{
name|XKB_KEY_KP_Divide
block|,
name|Qt
operator|::
name|Key_Slash
block|}
block|, }
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_constructor
DECL|function|QLibInputKeyboard
name|QLibInputKeyboard
operator|::
name|QLibInputKeyboard
parameter_list|()
ifndef|#
directive|ifndef
name|QT_NO_XKBCOMMON_EVDEV
member_init_list|:
name|m_ctx
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_keymap
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_state
argument_list|(
literal|0
argument_list|)
endif|#
directive|endif
block|{
ifndef|#
directive|ifndef
name|QT_NO_XKBCOMMON_EVDEV
name|m_ctx
operator|=
name|xkb_context_new
argument_list|(
name|XKB_CONTEXT_NO_FLAGS
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|m_ctx
condition|)
block|{
name|qWarning
argument_list|(
literal|"Failed to create xkb context"
argument_list|)
expr_stmt|;
return|return;
block|}
name|m_keymap
operator|=
name|xkb_keymap_new_from_names
argument_list|(
name|m_ctx
argument_list|,
name|Q_NULLPTR
argument_list|,
name|XKB_KEYMAP_COMPILE_NO_FLAGS
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|m_keymap
condition|)
block|{
name|qWarning
argument_list|(
literal|"Failed to compile keymap"
argument_list|)
expr_stmt|;
return|return;
block|}
name|m_state
operator|=
name|xkb_state_new
argument_list|(
name|m_keymap
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|m_state
condition|)
block|{
name|qWarning
argument_list|(
literal|"Failed to create xkb state"
argument_list|)
expr_stmt|;
return|return;
block|}
name|m_modindex
index|[
literal|0
index|]
operator|=
name|xkb_keymap_mod_get_index
argument_list|(
name|m_keymap
argument_list|,
name|XKB_MOD_NAME_CTRL
argument_list|)
expr_stmt|;
name|m_modindex
index|[
literal|1
index|]
operator|=
name|xkb_keymap_mod_get_index
argument_list|(
name|m_keymap
argument_list|,
name|XKB_MOD_NAME_ALT
argument_list|)
expr_stmt|;
name|m_modindex
index|[
literal|2
index|]
operator|=
name|xkb_keymap_mod_get_index
argument_list|(
name|m_keymap
argument_list|,
name|XKB_MOD_NAME_SHIFT
argument_list|)
expr_stmt|;
name|m_modindex
index|[
literal|3
index|]
operator|=
name|xkb_keymap_mod_get_index
argument_list|(
name|m_keymap
argument_list|,
name|XKB_MOD_NAME_LOGO
argument_list|)
expr_stmt|;
name|m_repeatTimer
operator|.
name|setSingleShot
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|m_repeatTimer
argument_list|,
operator|&
name|QTimer
operator|::
name|timeout
argument_list|,
name|this
argument_list|,
operator|&
name|QLibInputKeyboard
operator|::
name|handleRepeat
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_constructor
begin_destructor
DECL|function|~QLibInputKeyboard
name|QLibInputKeyboard
operator|::
name|~
name|QLibInputKeyboard
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_NO_XKBCOMMON_EVDEV
if|if
condition|(
name|m_state
condition|)
name|xkb_state_unref
argument_list|(
name|m_state
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_keymap
condition|)
name|xkb_keymap_unref
argument_list|(
name|m_keymap
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_ctx
condition|)
name|xkb_context_unref
argument_list|(
name|m_ctx
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_destructor
begin_function
DECL|function|processKey
name|void
name|QLibInputKeyboard
operator|::
name|processKey
parameter_list|(
name|libinput_event_keyboard
modifier|*
name|e
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_XKBCOMMON_EVDEV
if|if
condition|(
operator|!
name|m_ctx
operator|||
operator|!
name|m_keymap
operator|||
operator|!
name|m_state
condition|)
return|return;
specifier|const
name|uint32_t
name|k
init|=
name|libinput_event_keyboard_get_key
argument_list|(
name|e
argument_list|)
operator|+
literal|8
decl_stmt|;
specifier|const
name|bool
name|pressed
init|=
name|libinput_event_keyboard_get_key_state
argument_list|(
name|e
argument_list|)
operator|==
name|LIBINPUT_KEY_STATE_PRESSED
decl_stmt|;
name|QByteArray
name|chars
decl_stmt|;
name|chars
operator|.
name|resize
argument_list|(
literal|1
operator|+
name|xkb_state_key_get_utf8
argument_list|(
name|m_state
argument_list|,
name|k
argument_list|,
name|Q_NULLPTR
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|xkb_state_key_get_utf8
argument_list|(
name|m_state
argument_list|,
name|k
argument_list|,
name|chars
operator|.
name|data
argument_list|()
argument_list|,
name|chars
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|text
init|=
name|QString
operator|::
name|fromUtf8
argument_list|(
name|chars
argument_list|)
decl_stmt|;
specifier|const
name|xkb_keysym_t
name|sym
init|=
name|xkb_state_key_get_one_sym
argument_list|(
name|m_state
argument_list|,
name|k
argument_list|)
decl_stmt|;
name|Qt
operator|::
name|KeyboardModifiers
name|mods
init|=
name|Qt
operator|::
name|NoModifier
decl_stmt|;
specifier|const
name|int
name|qtkey
init|=
name|keysymToQtKey
argument_list|(
name|sym
argument_list|,
operator|&
name|mods
argument_list|,
name|text
argument_list|)
decl_stmt|;
name|xkb_state_component
name|modtype
init|=
name|xkb_state_component
argument_list|(
name|XKB_STATE_MODS_DEPRESSED
operator||
name|XKB_STATE_MODS_LATCHED
argument_list|)
decl_stmt|;
if|if
condition|(
name|xkb_state_mod_index_is_active
argument_list|(
name|m_state
argument_list|,
name|m_modindex
index|[
literal|0
index|]
argument_list|,
name|modtype
argument_list|)
operator|&&
operator|(
name|qtkey
operator|!=
name|Qt
operator|::
name|Key_Control
operator|||
operator|!
name|pressed
operator|)
condition|)
name|mods
operator||=
name|Qt
operator|::
name|ControlModifier
expr_stmt|;
if|if
condition|(
name|xkb_state_mod_index_is_active
argument_list|(
name|m_state
argument_list|,
name|m_modindex
index|[
literal|1
index|]
argument_list|,
name|modtype
argument_list|)
operator|&&
operator|(
name|qtkey
operator|!=
name|Qt
operator|::
name|Key_Alt
operator|||
operator|!
name|pressed
operator|)
condition|)
name|mods
operator||=
name|Qt
operator|::
name|AltModifier
expr_stmt|;
if|if
condition|(
name|xkb_state_mod_index_is_active
argument_list|(
name|m_state
argument_list|,
name|m_modindex
index|[
literal|2
index|]
argument_list|,
name|modtype
argument_list|)
operator|&&
operator|(
name|qtkey
operator|!=
name|Qt
operator|::
name|Key_Shift
operator|||
operator|!
name|pressed
operator|)
condition|)
name|mods
operator||=
name|Qt
operator|::
name|ShiftModifier
expr_stmt|;
if|if
condition|(
name|xkb_state_mod_index_is_active
argument_list|(
name|m_state
argument_list|,
name|m_modindex
index|[
literal|3
index|]
argument_list|,
name|modtype
argument_list|)
operator|&&
operator|(
name|qtkey
operator|!=
name|Qt
operator|::
name|Key_Meta
operator|||
operator|!
name|pressed
operator|)
condition|)
name|mods
operator||=
name|Qt
operator|::
name|MetaModifier
expr_stmt|;
name|xkb_state_update_key
argument_list|(
name|m_state
argument_list|,
name|k
argument_list|,
name|pressed
condition|?
name|XKB_KEY_DOWN
else|:
name|XKB_KEY_UP
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleExtendedKeyEvent
argument_list|(
name|Q_NULLPTR
argument_list|,
name|pressed
condition|?
name|QEvent
operator|::
name|KeyPress
else|:
name|QEvent
operator|::
name|KeyRelease
argument_list|,
name|qtkey
argument_list|,
name|mods
argument_list|,
name|k
argument_list|,
name|sym
argument_list|,
name|mods
argument_list|,
name|text
argument_list|)
expr_stmt|;
if|if
condition|(
name|pressed
operator|&&
name|xkb_keymap_key_repeats
argument_list|(
name|m_keymap
argument_list|,
name|k
argument_list|)
condition|)
block|{
name|m_repeatData
operator|.
name|qtkey
operator|=
name|qtkey
expr_stmt|;
name|m_repeatData
operator|.
name|mods
operator|=
name|mods
expr_stmt|;
name|m_repeatData
operator|.
name|nativeScanCode
operator|=
name|k
expr_stmt|;
name|m_repeatData
operator|.
name|virtualKey
operator|=
name|sym
expr_stmt|;
name|m_repeatData
operator|.
name|nativeMods
operator|=
name|mods
expr_stmt|;
name|m_repeatData
operator|.
name|unicodeText
operator|=
name|text
expr_stmt|;
name|m_repeatData
operator|.
name|repeatCount
operator|=
literal|1
expr_stmt|;
name|m_repeatTimer
operator|.
name|setInterval
argument_list|(
name|REPEAT_DELAY
argument_list|)
expr_stmt|;
name|m_repeatTimer
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|m_repeatTimer
operator|.
name|isActive
argument_list|()
condition|)
block|{
name|m_repeatTimer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
else|#
directive|else
name|Q_UNUSED
argument_list|(
name|e
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_XKBCOMMON_EVDEV
end_ifndef
begin_function
DECL|function|handleRepeat
name|void
name|QLibInputKeyboard
operator|::
name|handleRepeat
parameter_list|()
block|{
name|QWindowSystemInterface
operator|::
name|handleExtendedKeyEvent
argument_list|(
name|Q_NULLPTR
argument_list|,
name|QEvent
operator|::
name|KeyPress
argument_list|,
name|m_repeatData
operator|.
name|qtkey
argument_list|,
name|m_repeatData
operator|.
name|mods
argument_list|,
name|m_repeatData
operator|.
name|nativeScanCode
argument_list|,
name|m_repeatData
operator|.
name|virtualKey
argument_list|,
name|m_repeatData
operator|.
name|nativeMods
argument_list|,
name|m_repeatData
operator|.
name|unicodeText
argument_list|,
literal|true
argument_list|,
name|m_repeatData
operator|.
name|repeatCount
argument_list|)
expr_stmt|;
name|m_repeatData
operator|.
name|repeatCount
operator|+=
literal|1
expr_stmt|;
name|m_repeatTimer
operator|.
name|setInterval
argument_list|(
name|REPEAT_RATE
argument_list|)
expr_stmt|;
name|m_repeatTimer
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|keysymToQtKey
name|int
name|QLibInputKeyboard
operator|::
name|keysymToQtKey
parameter_list|(
name|xkb_keysym_t
name|key
parameter_list|)
specifier|const
block|{
specifier|const
name|size_t
name|elemCount
init|=
sizeof|sizeof
argument_list|(
name|keyTab
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|KeyTabEntry
argument_list|)
decl_stmt|;
name|KeyTabEntry
name|e
decl_stmt|;
name|e
operator|.
name|xkbkey
operator|=
name|key
expr_stmt|;
specifier|const
name|KeyTabEntry
modifier|*
name|result
init|=
name|std
operator|::
name|find
argument_list|(
name|keyTab
argument_list|,
name|keyTab
operator|+
name|elemCount
argument_list|,
name|e
argument_list|)
decl_stmt|;
return|return
name|result
operator|!=
name|keyTab
operator|+
name|elemCount
condition|?
name|result
operator|->
name|qtkey
else|:
literal|0
return|;
block|}
end_function
begin_function
DECL|function|keysymToQtKey
name|int
name|QLibInputKeyboard
operator|::
name|keysymToQtKey
parameter_list|(
name|xkb_keysym_t
name|keysym
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
modifier|*
name|modifiers
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
specifier|const
block|{
name|int
name|code
init|=
literal|0
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_TEXTCODEC
name|QTextCodec
modifier|*
name|systemCodec
init|=
name|QTextCodec
operator|::
name|codecForLocale
argument_list|()
decl_stmt|;
endif|#
directive|endif
if|if
condition|(
name|keysym
operator|<
literal|128
operator|||
operator|(
name|keysym
operator|<
literal|256
ifndef|#
directive|ifndef
name|QT_NO_TEXTCODEC
operator|&&
name|systemCodec
operator|->
name|mibEnum
argument_list|()
operator|==
literal|4
endif|#
directive|endif
operator|)
condition|)
block|{
comment|// upper-case key, if known
name|code
operator|=
name|isprint
argument_list|(
operator|(
name|int
operator|)
name|keysym
argument_list|)
condition|?
name|toupper
argument_list|(
operator|(
name|int
operator|)
name|keysym
argument_list|)
else|:
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|keysym
operator|>=
name|XKB_KEY_F1
operator|&&
name|keysym
operator|<=
name|XKB_KEY_F35
condition|)
block|{
comment|// function keys
name|code
operator|=
name|Qt
operator|::
name|Key_F1
operator|+
operator|(
operator|(
name|int
operator|)
name|keysym
operator|-
name|XKB_KEY_F1
operator|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|keysym
operator|>=
name|XKB_KEY_KP_Space
operator|&&
name|keysym
operator|<=
name|XKB_KEY_KP_9
condition|)
block|{
if|if
condition|(
name|keysym
operator|>=
name|XKB_KEY_KP_0
condition|)
block|{
comment|// numeric keypad keys
name|code
operator|=
name|Qt
operator|::
name|Key_0
operator|+
operator|(
operator|(
name|int
operator|)
name|keysym
operator|-
name|XKB_KEY_KP_0
operator|)
expr_stmt|;
block|}
else|else
block|{
name|code
operator|=
name|keysymToQtKey
argument_list|(
name|keysym
argument_list|)
expr_stmt|;
block|}
operator|*
name|modifiers
operator||=
name|Qt
operator|::
name|KeypadModifier
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|text
operator|.
name|length
argument_list|()
operator|==
literal|1
operator|&&
name|text
operator|.
name|unicode
argument_list|()
operator|->
name|unicode
argument_list|()
operator|>
literal|0x1f
operator|&&
name|text
operator|.
name|unicode
argument_list|()
operator|->
name|unicode
argument_list|()
operator|!=
literal|0x7f
operator|&&
operator|!
operator|(
name|keysym
operator|>=
name|XKB_KEY_dead_grave
operator|&&
name|keysym
operator|<=
name|XKB_KEY_dead_currency
operator|)
condition|)
block|{
name|code
operator|=
name|text
operator|.
name|unicode
argument_list|()
operator|->
name|toUpper
argument_list|()
operator|.
name|unicode
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// any other keys
name|code
operator|=
name|keysymToQtKey
argument_list|(
name|keysym
argument_list|)
expr_stmt|;
block|}
return|return
name|code
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
