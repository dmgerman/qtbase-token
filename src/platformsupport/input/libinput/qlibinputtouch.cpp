begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the plugins module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qlibinputtouch_p.h"
end_include
begin_include
include|#
directive|include
file|<libinput.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/QGuiApplication>
end_include
begin_include
include|#
directive|include
file|<QtGui/QScreen>
end_include
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|point
name|QWindowSystemInterface
operator|::
name|TouchPoint
modifier|*
name|QLibInputTouch
operator|::
name|DeviceState
operator|::
name|point
parameter_list|(
name|int32_t
name|slot
parameter_list|)
block|{
specifier|const
name|int
name|id
init|=
name|qMax
argument_list|(
literal|0
argument_list|,
name|slot
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_points
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|m_points
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|id
operator|==
name|id
condition|)
return|return
operator|&
name|m_points
index|[
name|i
index|]
return|;
return|return
name|Q_NULLPTR
return|;
block|}
end_function
begin_function
DECL|function|deviceState
name|QLibInputTouch
operator|::
name|DeviceState
modifier|*
name|QLibInputTouch
operator|::
name|deviceState
parameter_list|(
name|libinput_event_touch
modifier|*
name|e
parameter_list|)
block|{
name|libinput_device
modifier|*
name|dev
init|=
name|libinput_event_get_device
argument_list|(
name|libinput_event_touch_get_base_event
argument_list|(
name|e
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|&
name|m_devState
index|[
name|dev
index|]
return|;
block|}
end_function
begin_function
DECL|function|getPos
specifier|static
specifier|inline
name|QPointF
name|getPos
parameter_list|(
name|libinput_event_touch
modifier|*
name|e
parameter_list|)
block|{
specifier|const
name|QSize
name|screenSize
init|=
name|QGuiApplication
operator|::
name|primaryScreen
argument_list|()
operator|->
name|geometry
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|const
name|double
name|x
init|=
name|libinput_event_touch_get_x_transformed
argument_list|(
name|e
argument_list|,
name|screenSize
operator|.
name|width
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|double
name|y
init|=
name|libinput_event_touch_get_y_transformed
argument_list|(
name|e
argument_list|,
name|screenSize
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|QPointF
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|registerDevice
name|void
name|QLibInputTouch
operator|::
name|registerDevice
parameter_list|(
name|libinput_device
modifier|*
name|dev
parameter_list|)
block|{
name|QTouchDevice
modifier|*
modifier|&
name|td
init|=
name|m_devState
index|[
name|dev
index|]
operator|.
name|m_touchDevice
decl_stmt|;
name|td
operator|=
operator|new
name|QTouchDevice
expr_stmt|;
name|td
operator|->
name|setName
argument_list|(
name|QString
operator|::
name|fromUtf8
argument_list|(
name|libinput_device_get_name
argument_list|(
name|dev
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|td
operator|->
name|setType
argument_list|(
name|QTouchDevice
operator|::
name|TouchScreen
argument_list|)
expr_stmt|;
name|td
operator|->
name|setCapabilities
argument_list|(
name|QTouchDevice
operator|::
name|Position
operator||
name|QTouchDevice
operator|::
name|Area
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|registerTouchDevice
argument_list|(
name|td
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|unregisterDevice
name|void
name|QLibInputTouch
operator|::
name|unregisterDevice
parameter_list|(
name|libinput_device
modifier|*
name|dev
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|dev
argument_list|)
expr_stmt|;
comment|// There is no way to remove a QTouchDevice.
block|}
end_function
begin_function
DECL|function|processTouchDown
name|void
name|QLibInputTouch
operator|::
name|processTouchDown
parameter_list|(
name|libinput_event_touch
modifier|*
name|e
parameter_list|)
block|{
name|int
name|slot
init|=
name|libinput_event_touch_get_slot
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|DeviceState
modifier|*
name|state
init|=
name|deviceState
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|QWindowSystemInterface
operator|::
name|TouchPoint
modifier|*
name|tp
init|=
name|state
operator|->
name|point
argument_list|(
name|slot
argument_list|)
decl_stmt|;
if|if
condition|(
name|tp
condition|)
block|{
name|qWarning
argument_list|(
literal|"Incorrect touch state"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QWindowSystemInterface
operator|::
name|TouchPoint
name|newTp
decl_stmt|;
name|newTp
operator|.
name|id
operator|=
name|qMax
argument_list|(
literal|0
argument_list|,
name|slot
argument_list|)
expr_stmt|;
name|newTp
operator|.
name|state
operator|=
name|Qt
operator|::
name|TouchPointPressed
expr_stmt|;
name|newTp
operator|.
name|area
operator|=
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|8
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|newTp
operator|.
name|area
operator|.
name|moveCenter
argument_list|(
name|getPos
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|state
operator|->
name|m_points
operator|.
name|append
argument_list|(
name|newTp
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|processTouchMotion
name|void
name|QLibInputTouch
operator|::
name|processTouchMotion
parameter_list|(
name|libinput_event_touch
modifier|*
name|e
parameter_list|)
block|{
name|int
name|slot
init|=
name|libinput_event_touch_get_slot
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|DeviceState
modifier|*
name|state
init|=
name|deviceState
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|QWindowSystemInterface
operator|::
name|TouchPoint
modifier|*
name|tp
init|=
name|state
operator|->
name|point
argument_list|(
name|slot
argument_list|)
decl_stmt|;
if|if
condition|(
name|tp
condition|)
block|{
specifier|const
name|QPointF
name|p
init|=
name|getPos
argument_list|(
name|e
argument_list|)
decl_stmt|;
if|if
condition|(
name|tp
operator|->
name|area
operator|.
name|center
argument_list|()
operator|!=
name|p
condition|)
block|{
name|tp
operator|->
name|area
operator|.
name|moveCenter
argument_list|(
name|p
argument_list|)
expr_stmt|;
comment|// 'down' may be followed by 'motion' within the same "frame".
comment|// Handle this by compressing and keeping the Pressed state until the 'frame'.
if|if
condition|(
name|tp
operator|->
name|state
operator|!=
name|Qt
operator|::
name|TouchPointPressed
condition|)
name|tp
operator|->
name|state
operator|=
name|Qt
operator|::
name|TouchPointMoved
expr_stmt|;
block|}
else|else
block|{
name|tp
operator|->
name|state
operator|=
name|Qt
operator|::
name|TouchPointStationary
expr_stmt|;
block|}
block|}
else|else
block|{
name|qWarning
argument_list|(
literal|"Inconsistent touch state (got 'motion' without 'down')"
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|processTouchUp
name|void
name|QLibInputTouch
operator|::
name|processTouchUp
parameter_list|(
name|libinput_event_touch
modifier|*
name|e
parameter_list|)
block|{
name|int
name|slot
init|=
name|libinput_event_touch_get_slot
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|DeviceState
modifier|*
name|state
init|=
name|deviceState
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|QWindowSystemInterface
operator|::
name|TouchPoint
modifier|*
name|tp
init|=
name|state
operator|->
name|point
argument_list|(
name|slot
argument_list|)
decl_stmt|;
if|if
condition|(
name|tp
condition|)
block|{
name|tp
operator|->
name|state
operator|=
name|Qt
operator|::
name|TouchPointReleased
expr_stmt|;
comment|// There may not be a Frame event after the last Up. Work this around.
name|Qt
operator|::
name|TouchPointStates
name|s
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|state
operator|->
name|m_points
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|s
operator||=
name|state
operator|->
name|m_points
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|state
expr_stmt|;
if|if
condition|(
name|s
operator|==
name|Qt
operator|::
name|TouchPointReleased
condition|)
name|processTouchFrame
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|(
literal|"Inconsistent touch state (got 'up' without 'down')"
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|processTouchCancel
name|void
name|QLibInputTouch
operator|::
name|processTouchCancel
parameter_list|(
name|libinput_event_touch
modifier|*
name|e
parameter_list|)
block|{
name|DeviceState
modifier|*
name|state
init|=
name|deviceState
argument_list|(
name|e
argument_list|)
decl_stmt|;
if|if
condition|(
name|state
operator|->
name|m_touchDevice
condition|)
name|QWindowSystemInterface
operator|::
name|handleTouchCancelEvent
argument_list|(
name|Q_NULLPTR
argument_list|,
name|state
operator|->
name|m_touchDevice
argument_list|,
name|QGuiApplication
operator|::
name|keyboardModifiers
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|qWarning
argument_list|(
literal|"TouchCancel without registered device"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|processTouchFrame
name|void
name|QLibInputTouch
operator|::
name|processTouchFrame
parameter_list|(
name|libinput_event_touch
modifier|*
name|e
parameter_list|)
block|{
name|DeviceState
modifier|*
name|state
init|=
name|deviceState
argument_list|(
name|e
argument_list|)
decl_stmt|;
if|if
condition|(
name|state
operator|->
name|m_touchDevice
operator|&&
operator|!
name|state
operator|->
name|m_points
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QWindowSystemInterface
operator|::
name|handleTouchEvent
argument_list|(
name|Q_NULLPTR
argument_list|,
name|state
operator|->
name|m_touchDevice
argument_list|,
name|state
operator|->
name|m_points
argument_list|,
name|QGuiApplication
operator|::
name|keyboardModifiers
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|state
operator|->
name|m_points
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QWindowSystemInterface
operator|::
name|TouchPoint
modifier|&
name|tp
argument_list|(
name|state
operator|->
name|m_points
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|tp
operator|.
name|state
operator|==
name|Qt
operator|::
name|TouchPointReleased
condition|)
name|state
operator|->
name|m_points
operator|.
name|removeAt
argument_list|(
name|i
operator|--
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|tp
operator|.
name|state
operator|==
name|Qt
operator|::
name|TouchPointPressed
condition|)
name|tp
operator|.
name|state
operator|=
name|Qt
operator|::
name|TouchPointStationary
expr_stmt|;
block|}
block|}
else|else
block|{
name|qWarning
argument_list|(
literal|"TouchFrame without registered device"
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
