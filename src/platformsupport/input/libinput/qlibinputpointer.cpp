begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the plugins module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qlibinputpointer_p.h"
end_include
begin_include
include|#
directive|include
file|<libinput.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/QGuiApplication>
end_include
begin_include
include|#
directive|include
file|<QtGui/QScreen>
end_include
begin_include
include|#
directive|include
file|<qpa/qwindowsysteminterface.h>
end_include
begin_include
include|#
directive|include
file|<private/qhighdpiscaling_p.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_constructor
DECL|function|QLibInputPointer
name|QLibInputPointer
operator|::
name|QLibInputPointer
parameter_list|()
member_init_list|:
name|m_buttons
argument_list|(
name|Qt
operator|::
name|NoButton
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|processButton
name|void
name|QLibInputPointer
operator|::
name|processButton
parameter_list|(
name|libinput_event_pointer
modifier|*
name|e
parameter_list|)
block|{
specifier|const
name|uint32_t
name|b
init|=
name|libinput_event_pointer_get_button
argument_list|(
name|e
argument_list|)
decl_stmt|;
specifier|const
name|bool
name|pressed
init|=
name|libinput_event_pointer_get_button_state
argument_list|(
name|e
argument_list|)
operator|==
name|LIBINPUT_BUTTON_STATE_PRESSED
decl_stmt|;
name|Qt
operator|::
name|MouseButton
name|button
init|=
name|Qt
operator|::
name|NoButton
decl_stmt|;
switch|switch
condition|(
name|b
condition|)
block|{
case|case
literal|0x110
case|:
name|button
operator|=
name|Qt
operator|::
name|LeftButton
expr_stmt|;
break|break;
comment|// BTN_LEFT
case|case
literal|0x111
case|:
name|button
operator|=
name|Qt
operator|::
name|RightButton
expr_stmt|;
break|break;
case|case
literal|0x112
case|:
name|button
operator|=
name|Qt
operator|::
name|MiddleButton
expr_stmt|;
break|break;
case|case
literal|0x113
case|:
name|button
operator|=
name|Qt
operator|::
name|ExtraButton1
expr_stmt|;
break|break;
comment|// AKA Qt::BackButton
case|case
literal|0x114
case|:
name|button
operator|=
name|Qt
operator|::
name|ExtraButton2
expr_stmt|;
break|break;
comment|// AKA Qt::ForwardButton
case|case
literal|0x115
case|:
name|button
operator|=
name|Qt
operator|::
name|ExtraButton3
expr_stmt|;
break|break;
comment|// AKA Qt::TaskButton
case|case
literal|0x116
case|:
name|button
operator|=
name|Qt
operator|::
name|ExtraButton4
expr_stmt|;
break|break;
case|case
literal|0x117
case|:
name|button
operator|=
name|Qt
operator|::
name|ExtraButton5
expr_stmt|;
break|break;
case|case
literal|0x118
case|:
name|button
operator|=
name|Qt
operator|::
name|ExtraButton6
expr_stmt|;
break|break;
case|case
literal|0x119
case|:
name|button
operator|=
name|Qt
operator|::
name|ExtraButton7
expr_stmt|;
break|break;
case|case
literal|0x11a
case|:
name|button
operator|=
name|Qt
operator|::
name|ExtraButton8
expr_stmt|;
break|break;
case|case
literal|0x11b
case|:
name|button
operator|=
name|Qt
operator|::
name|ExtraButton9
expr_stmt|;
break|break;
case|case
literal|0x11c
case|:
name|button
operator|=
name|Qt
operator|::
name|ExtraButton10
expr_stmt|;
break|break;
case|case
literal|0x11d
case|:
name|button
operator|=
name|Qt
operator|::
name|ExtraButton11
expr_stmt|;
break|break;
case|case
literal|0x11e
case|:
name|button
operator|=
name|Qt
operator|::
name|ExtraButton12
expr_stmt|;
break|break;
case|case
literal|0x11f
case|:
name|button
operator|=
name|Qt
operator|::
name|ExtraButton13
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|pressed
condition|)
name|m_buttons
operator||=
name|button
expr_stmt|;
else|else
name|m_buttons
operator|&=
operator|~
name|button
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleMouseEvent
argument_list|(
name|Q_NULLPTR
argument_list|,
name|m_pos
argument_list|,
name|m_pos
argument_list|,
name|m_buttons
argument_list|,
name|QGuiApplication
operator|::
name|keyboardModifiers
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|processMotion
name|void
name|QLibInputPointer
operator|::
name|processMotion
parameter_list|(
name|libinput_event_pointer
modifier|*
name|e
parameter_list|)
block|{
specifier|const
name|double
name|dx
init|=
name|libinput_event_pointer_get_dx
argument_list|(
name|e
argument_list|)
decl_stmt|;
specifier|const
name|double
name|dy
init|=
name|libinput_event_pointer_get_dy
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|QScreen
modifier|*
specifier|const
name|primaryScreen
init|=
name|QGuiApplication
operator|::
name|primaryScreen
argument_list|()
decl_stmt|;
specifier|const
name|QRect
name|g
init|=
name|QHighDpi
operator|::
name|toNativePixels
argument_list|(
name|primaryScreen
operator|->
name|virtualGeometry
argument_list|()
argument_list|,
name|primaryScreen
argument_list|)
decl_stmt|;
name|m_pos
operator|.
name|setX
argument_list|(
name|qBound
argument_list|(
name|g
operator|.
name|left
argument_list|()
argument_list|,
name|qRound
argument_list|(
name|m_pos
operator|.
name|x
argument_list|()
operator|+
name|dx
argument_list|)
argument_list|,
name|g
operator|.
name|right
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|m_pos
operator|.
name|setY
argument_list|(
name|qBound
argument_list|(
name|g
operator|.
name|top
argument_list|()
argument_list|,
name|qRound
argument_list|(
name|m_pos
operator|.
name|y
argument_list|()
operator|+
name|dy
argument_list|)
argument_list|,
name|g
operator|.
name|bottom
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleMouseEvent
argument_list|(
name|Q_NULLPTR
argument_list|,
name|m_pos
argument_list|,
name|m_pos
argument_list|,
name|m_buttons
argument_list|,
name|QGuiApplication
operator|::
name|keyboardModifiers
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|processAxis
name|void
name|QLibInputPointer
operator|::
name|processAxis
parameter_list|(
name|libinput_event_pointer
modifier|*
name|e
parameter_list|)
block|{
if|#
directive|if
name|QT_LIBINPUT_VERSION_MAJOR
operator|==
literal|0
operator|&&
name|QT_LIBINPUT_VERSION_MINOR
operator|<=
literal|7
specifier|const
name|double
name|v
init|=
name|libinput_event_pointer_get_axis_value
argument_list|(
name|e
argument_list|)
operator|*
literal|120
decl_stmt|;
specifier|const
name|Qt
operator|::
name|Orientation
name|ori
init|=
name|libinput_event_pointer_get_axis
argument_list|(
name|e
argument_list|)
operator|==
name|LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL
condition|?
name|Qt
operator|::
name|Vertical
else|:
name|Qt
operator|::
name|Horizontal
decl_stmt|;
name|QWindowSystemInterface
operator|::
name|handleWheelEvent
argument_list|(
name|Q_NULLPTR
argument_list|,
name|m_pos
argument_list|,
name|m_pos
argument_list|,
name|qRound
argument_list|(
operator|-
name|v
argument_list|)
argument_list|,
name|ori
argument_list|,
name|QGuiApplication
operator|::
name|keyboardModifiers
argument_list|()
argument_list|)
expr_stmt|;
else|#
directive|else
if|if
condition|(
name|libinput_event_pointer_has_axis
argument_list|(
name|e
argument_list|,
name|LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL
argument_list|)
condition|)
block|{
specifier|const
name|double
name|v
init|=
name|libinput_event_pointer_get_axis_value
argument_list|(
name|e
argument_list|,
name|LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL
argument_list|)
operator|*
literal|120
decl_stmt|;
name|QWindowSystemInterface
operator|::
name|handleWheelEvent
argument_list|(
name|Q_NULLPTR
argument_list|,
name|m_pos
argument_list|,
name|m_pos
argument_list|,
name|qRound
argument_list|(
operator|-
name|v
argument_list|)
argument_list|,
name|Qt
operator|::
name|Vertical
argument_list|,
name|QGuiApplication
operator|::
name|keyboardModifiers
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|libinput_event_pointer_has_axis
argument_list|(
name|e
argument_list|,
name|LIBINPUT_POINTER_AXIS_SCROLL_HORIZONTAL
argument_list|)
condition|)
block|{
specifier|const
name|double
name|v
init|=
name|libinput_event_pointer_get_axis_value
argument_list|(
name|e
argument_list|,
name|LIBINPUT_POINTER_AXIS_SCROLL_HORIZONTAL
argument_list|)
operator|*
literal|120
decl_stmt|;
name|QWindowSystemInterface
operator|::
name|handleWheelEvent
argument_list|(
name|Q_NULLPTR
argument_list|,
name|m_pos
argument_list|,
name|m_pos
argument_list|,
name|qRound
argument_list|(
operator|-
name|v
argument_list|)
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|,
name|QGuiApplication
operator|::
name|keyboardModifiers
argument_list|()
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|setPos
name|void
name|QLibInputPointer
operator|::
name|setPos
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|)
block|{
name|QScreen
modifier|*
specifier|const
name|primaryScreen
init|=
name|QGuiApplication
operator|::
name|primaryScreen
argument_list|()
decl_stmt|;
specifier|const
name|QRect
name|g
init|=
name|QHighDpi
operator|::
name|toNativePixels
argument_list|(
name|primaryScreen
operator|->
name|virtualGeometry
argument_list|()
argument_list|,
name|primaryScreen
argument_list|)
decl_stmt|;
name|m_pos
operator|.
name|setX
argument_list|(
name|qBound
argument_list|(
name|g
operator|.
name|left
argument_list|()
argument_list|,
name|pos
operator|.
name|x
argument_list|()
argument_list|,
name|g
operator|.
name|right
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|m_pos
operator|.
name|setY
argument_list|(
name|qBound
argument_list|(
name|g
operator|.
name|top
argument_list|()
argument_list|,
name|pos
operator|.
name|y
argument_list|()
argument_list|,
name|g
operator|.
name|bottom
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
