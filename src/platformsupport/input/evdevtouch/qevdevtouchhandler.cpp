begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the plugins module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qevdevtouchhandler_p.h"
end_include
begin_include
include|#
directive|include
file|<QStringList>
end_include
begin_include
include|#
directive|include
file|<QHash>
end_include
begin_include
include|#
directive|include
file|<QSocketNotifier>
end_include
begin_include
include|#
directive|include
file|<QGuiApplication>
end_include
begin_include
include|#
directive|include
file|<QLoggingCategory>
end_include
begin_include
include|#
directive|include
file|<QtCore/private/qcore_unix_p.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/private/qhighdpiscaling_p.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/private/qguiapplication_p.h>
end_include
begin_include
include|#
directive|include
file|<linux/input.h>
end_include
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_MTDEV
argument_list|)
end_if
begin_extern
extern|extern
literal|"C"
block|{
include|#
directive|include
file|<mtdev.h>
block|}
end_extern
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
name|Q_LOGGING_CATEGORY
argument_list|(
name|qLcEvdevTouch
argument_list|,
literal|"qt.qpa.input"
argument_list|)
comment|/* android (and perhaps some other linux-derived stuff) don't define everything  * in linux/input.h, so we'll need to do that ourselves.  */
ifndef|#
directive|ifndef
name|ABS_MT_TOUCH_MAJOR
DECL|macro|ABS_MT_TOUCH_MAJOR
define|#
directive|define
name|ABS_MT_TOUCH_MAJOR
value|0x30
comment|/* Major axis of touching ellipse */
endif|#
directive|endif
ifndef|#
directive|ifndef
name|ABS_MT_POSITION_X
DECL|macro|ABS_MT_POSITION_X
define|#
directive|define
name|ABS_MT_POSITION_X
value|0x35
comment|/* Center X ellipse position */
endif|#
directive|endif
ifndef|#
directive|ifndef
name|ABS_MT_POSITION_Y
DECL|macro|ABS_MT_POSITION_Y
define|#
directive|define
name|ABS_MT_POSITION_Y
value|0x36
comment|/* Center Y ellipse position */
endif|#
directive|endif
ifndef|#
directive|ifndef
name|ABS_MT_SLOT
DECL|macro|ABS_MT_SLOT
define|#
directive|define
name|ABS_MT_SLOT
value|0x2f
endif|#
directive|endif
ifndef|#
directive|ifndef
name|ABS_CNT
DECL|macro|ABS_CNT
define|#
directive|define
name|ABS_CNT
value|(ABS_MAX+1)
endif|#
directive|endif
ifndef|#
directive|ifndef
name|ABS_MT_TRACKING_ID
DECL|macro|ABS_MT_TRACKING_ID
define|#
directive|define
name|ABS_MT_TRACKING_ID
value|0x39
comment|/* Unique ID of initiated contact */
endif|#
directive|endif
ifndef|#
directive|ifndef
name|SYN_MT_REPORT
DECL|macro|SYN_MT_REPORT
define|#
directive|define
name|SYN_MT_REPORT
value|2
endif|#
directive|endif
DECL|class|QEvdevTouchScreenData
name|class
name|QEvdevTouchScreenData
argument_list|{
specifier|public
operator|:
name|QEvdevTouchScreenData
argument_list|(
name|QEvdevTouchScreenHandler
operator|*
name|q_ptr
argument_list|,
specifier|const
name|QStringList
operator|&
name|args
argument_list|)
argument_list|;
name|void
name|processInputEvent
argument_list|(
name|input_event
operator|*
name|data
argument_list|)
argument_list|;
name|void
name|assignIds
argument_list|()
argument_list|;
DECL|member|q
name|QEvdevTouchScreenHandler
operator|*
name|q
argument_list|;
DECL|member|m_lastEventType
name|int
name|m_lastEventType
argument_list|;
DECL|member|m_touchPoints
name|QList
argument_list|<
name|QWindowSystemInterface
operator|::
name|TouchPoint
argument_list|>
name|m_touchPoints
argument_list|;
DECL|struct|Contact
expr|struct
name|Contact
block|{
DECL|member|trackingId
name|int
name|trackingId
block|;
DECL|member|x
name|int
name|x
block|;
DECL|member|y
name|int
name|y
block|;
DECL|member|maj
name|int
name|maj
block|;
DECL|member|pressure
name|int
name|pressure
block|;
DECL|member|state
name|Qt
operator|::
name|TouchPointState
name|state
block|;
DECL|member|flags
name|QTouchEvent
operator|::
name|TouchPoint
operator|::
name|InfoFlags
name|flags
block|;
DECL|function|Contact
name|Contact
argument_list|()
operator|:
name|trackingId
argument_list|(
operator|-
literal|1
argument_list|)
block|,
name|x
argument_list|(
literal|0
argument_list|)
block|,
name|y
argument_list|(
literal|0
argument_list|)
block|,
name|maj
argument_list|(
operator|-
literal|1
argument_list|)
block|,
name|pressure
argument_list|(
literal|0
argument_list|)
block|,
name|state
argument_list|(
name|Qt
operator|::
name|TouchPointPressed
argument_list|)
block|,
name|flags
argument_list|(
literal|0
argument_list|)
block|{ }
block|}
argument_list|;
DECL|member|m_contacts
name|QHash
argument_list|<
name|int
argument_list|,
name|Contact
argument_list|>
name|m_contacts
argument_list|;
comment|// The key is a tracking id for type A, slot number for type B.
DECL|member|m_lastContacts
name|QHash
argument_list|<
name|int
argument_list|,
name|Contact
argument_list|>
name|m_lastContacts
argument_list|;
DECL|member|m_currentData
name|Contact
name|m_currentData
argument_list|;
DECL|member|m_currentSlot
name|int
name|m_currentSlot
argument_list|;
name|int
name|findClosestContact
argument_list|(
argument|const QHash<int
argument_list|,
argument|Contact>&contacts
argument_list|,
argument|int x
argument_list|,
argument|int y
argument_list|,
argument|int *dist
argument_list|)
argument_list|;
name|void
name|addTouchPoint
argument_list|(
specifier|const
name|Contact
operator|&
name|contact
argument_list|,
name|Qt
operator|::
name|TouchPointStates
operator|*
name|combinedStates
argument_list|)
argument_list|;
name|void
name|reportPoints
argument_list|()
argument_list|;
DECL|member|hw_range_x_min
name|int
name|hw_range_x_min
argument_list|;
DECL|member|hw_range_x_max
name|int
name|hw_range_x_max
argument_list|;
DECL|member|hw_range_y_min
name|int
name|hw_range_y_min
argument_list|;
DECL|member|hw_range_y_max
name|int
name|hw_range_y_max
argument_list|;
DECL|member|hw_pressure_min
name|int
name|hw_pressure_min
argument_list|;
DECL|member|hw_pressure_max
name|int
name|hw_pressure_max
argument_list|;
DECL|member|hw_name
name|QString
name|hw_name
argument_list|;
DECL|member|m_forceToActiveWindow
name|bool
name|m_forceToActiveWindow
argument_list|;
DECL|member|m_typeB
name|bool
name|m_typeB
argument_list|;
DECL|member|m_rotate
name|QTransform
name|m_rotate
argument_list|;
DECL|member|m_singleTouch
name|bool
name|m_singleTouch
argument_list|; }
decl_stmt|;
end_decl_stmt
begin_constructor
DECL|function|QEvdevTouchScreenData
name|QEvdevTouchScreenData
operator|::
name|QEvdevTouchScreenData
parameter_list|(
name|QEvdevTouchScreenHandler
modifier|*
name|q_ptr
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|args
parameter_list|)
member_init_list|:
name|q
argument_list|(
name|q_ptr
argument_list|)
member_init_list|,
name|m_lastEventType
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|m_currentSlot
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|hw_range_x_min
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|hw_range_x_max
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|hw_range_y_min
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|hw_range_y_max
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|hw_pressure_min
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|hw_pressure_max
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_typeB
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|m_singleTouch
argument_list|(
literal|false
argument_list|)
block|{
name|m_forceToActiveWindow
operator|=
name|args
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"force_window"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_define
DECL|macro|LONG_BITS
define|#
directive|define
name|LONG_BITS
value|(sizeof(long)<< 3)
end_define
begin_define
DECL|macro|NUM_LONGS
define|#
directive|define
name|NUM_LONGS
parameter_list|(
name|bits
parameter_list|)
value|(((bits) + LONG_BITS - 1) / LONG_BITS)
end_define
begin_if
if|#
directive|if
name|defined
argument_list|(
name|QT_NO_MTDEV
argument_list|)
end_if
begin_function
DECL|function|testBit
specifier|static
specifier|inline
name|bool
name|testBit
parameter_list|(
name|long
name|bit
parameter_list|,
specifier|const
name|long
modifier|*
name|array
parameter_list|)
block|{
return|return
operator|(
name|array
index|[
name|bit
operator|/
name|LONG_BITS
index|]
operator|>>
name|bit
operator|%
name|LONG_BITS
operator|)
operator|&
literal|1
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_constructor
DECL|function|QEvdevTouchScreenHandler
name|QEvdevTouchScreenHandler
operator|::
name|QEvdevTouchScreenHandler
parameter_list|(
specifier|const
name|QString
modifier|&
name|device
parameter_list|,
specifier|const
name|QString
modifier|&
name|spec
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|m_notify
argument_list|(
name|Q_NULLPTR
argument_list|)
member_init_list|,
name|m_fd
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|d
argument_list|(
name|Q_NULLPTR
argument_list|)
member_init_list|,
name|m_device
argument_list|(
name|Q_NULLPTR
argument_list|)
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_MTDEV
argument_list|)
member_init_list|,
name|m_mtdev
argument_list|(
name|Q_NULLPTR
argument_list|)
endif|#
directive|endif
block|{
name|setObjectName
argument_list|(
name|QLatin1String
argument_list|(
literal|"Evdev Touch Handler"
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QStringList
name|args
init|=
name|spec
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|rotationAngle
init|=
literal|0
decl_stmt|;
name|bool
name|invertx
init|=
literal|false
decl_stmt|;
name|bool
name|inverty
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|args
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"rotate"
argument_list|)
argument_list|)
condition|)
block|{
name|QString
name|rotateArg
init|=
name|args
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|section
argument_list|(
name|QLatin1Char
argument_list|(
literal|'='
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|bool
name|ok
decl_stmt|;
name|uint
name|argValue
init|=
name|rotateArg
operator|.
name|toUInt
argument_list|(
operator|&
name|ok
argument_list|)
decl_stmt|;
if|if
condition|(
name|ok
condition|)
block|{
switch|switch
condition|(
name|argValue
condition|)
block|{
case|case
literal|90
case|:
case|case
literal|180
case|:
case|case
literal|270
case|:
name|rotationAngle
operator|=
name|argValue
expr_stmt|;
default|default:
break|break;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|args
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
name|QLatin1String
argument_list|(
literal|"invertx"
argument_list|)
condition|)
block|{
name|invertx
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
name|QLatin1String
argument_list|(
literal|"inverty"
argument_list|)
condition|)
block|{
name|inverty
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|qCDebug
argument_list|(
name|qLcEvdevTouch
argument_list|,
literal|"evdevtouch: Using device %s"
argument_list|,
name|qPrintable
argument_list|(
name|device
argument_list|)
argument_list|)
expr_stmt|;
name|m_fd
operator|=
name|QT_OPEN
argument_list|(
name|device
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|O_RDONLY
operator||
name|O_NDELAY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_fd
operator|>=
literal|0
condition|)
block|{
name|m_notify
operator|=
operator|new
name|QSocketNotifier
argument_list|(
name|m_fd
argument_list|,
name|QSocketNotifier
operator|::
name|Read
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|m_notify
argument_list|,
name|SIGNAL
argument_list|(
name|activated
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|readData
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qErrnoWarning
argument_list|(
name|errno
argument_list|,
literal|"evdevtouch: Cannot open input device %s"
argument_list|,
name|qPrintable
argument_list|(
name|device
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_MTDEV
argument_list|)
name|m_mtdev
operator|=
cast|static_cast
argument_list|<
name|mtdev
operator|*
argument_list|>
argument_list|(
name|calloc
argument_list|(
literal|1
argument_list|,
sizeof|sizeof
argument_list|(
name|mtdev
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|mtdeverr
init|=
name|mtdev_open
argument_list|(
name|m_mtdev
argument_list|,
name|m_fd
argument_list|)
decl_stmt|;
if|if
condition|(
name|mtdeverr
condition|)
block|{
name|qWarning
argument_list|(
literal|"evdevtouch: mtdev_open failed: %d"
argument_list|,
name|mtdeverr
argument_list|)
expr_stmt|;
name|QT_CLOSE
argument_list|(
name|m_fd
argument_list|)
expr_stmt|;
return|return;
block|}
endif|#
directive|endif
name|d
operator|=
operator|new
name|QEvdevTouchScreenData
argument_list|(
name|this
argument_list|,
name|args
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_MTDEV
argument_list|)
specifier|const
name|char
modifier|*
name|mtdevStr
init|=
literal|"(mtdev)"
decl_stmt|;
name|d
operator|->
name|m_typeB
operator|=
literal|true
expr_stmt|;
else|#
directive|else
specifier|const
name|char
modifier|*
name|mtdevStr
init|=
literal|""
decl_stmt|;
name|long
name|absbits
index|[
name|NUM_LONGS
argument_list|(
name|ABS_CNT
argument_list|)
index|]
decl_stmt|;
if|if
condition|(
name|ioctl
argument_list|(
name|m_fd
argument_list|,
name|EVIOCGBIT
argument_list|(
name|EV_ABS
argument_list|,
sizeof|sizeof
argument_list|(
name|absbits
argument_list|)
argument_list|)
argument_list|,
name|absbits
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|d
operator|->
name|m_typeB
operator|=
name|testBit
argument_list|(
name|ABS_MT_SLOT
argument_list|,
name|absbits
argument_list|)
expr_stmt|;
name|d
operator|->
name|m_singleTouch
operator|=
operator|!
name|testBit
argument_list|(
name|ABS_MT_POSITION_X
argument_list|,
name|absbits
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
name|qCDebug
argument_list|(
name|qLcEvdevTouch
argument_list|,
literal|"evdevtouch: %s: Protocol type %c %s (%s)"
argument_list|,
name|qPrintable
argument_list|(
name|device
argument_list|)
argument_list|,
name|d
operator|->
name|m_typeB
condition|?
literal|'B'
else|:
literal|'A'
argument_list|,
name|mtdevStr
argument_list|,
name|d
operator|->
name|m_singleTouch
condition|?
literal|"single"
else|:
literal|"multi"
argument_list|)
expr_stmt|;
name|input_absinfo
name|absInfo
decl_stmt|;
name|memset
argument_list|(
operator|&
name|absInfo
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|input_absinfo
argument_list|)
argument_list|)
expr_stmt|;
name|bool
name|has_x_range
init|=
literal|false
decl_stmt|,
name|has_y_range
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|ioctl
argument_list|(
name|m_fd
argument_list|,
name|EVIOCGABS
argument_list|(
operator|(
name|d
operator|->
name|m_singleTouch
condition|?
name|ABS_X
else|:
name|ABS_MT_POSITION_X
operator|)
argument_list|)
argument_list|,
operator|&
name|absInfo
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|qCDebug
argument_list|(
name|qLcEvdevTouch
argument_list|,
literal|"evdevtouch: %s: min X: %d max X: %d"
argument_list|,
name|qPrintable
argument_list|(
name|device
argument_list|)
argument_list|,
name|absInfo
operator|.
name|minimum
argument_list|,
name|absInfo
operator|.
name|maximum
argument_list|)
expr_stmt|;
name|d
operator|->
name|hw_range_x_min
operator|=
name|absInfo
operator|.
name|minimum
expr_stmt|;
name|d
operator|->
name|hw_range_x_max
operator|=
name|absInfo
operator|.
name|maximum
expr_stmt|;
name|has_x_range
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|ioctl
argument_list|(
name|m_fd
argument_list|,
name|EVIOCGABS
argument_list|(
operator|(
name|d
operator|->
name|m_singleTouch
condition|?
name|ABS_Y
else|:
name|ABS_MT_POSITION_Y
operator|)
argument_list|)
argument_list|,
operator|&
name|absInfo
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|qCDebug
argument_list|(
name|qLcEvdevTouch
argument_list|,
literal|"evdevtouch: %s: min Y: %d max Y: %d"
argument_list|,
name|qPrintable
argument_list|(
name|device
argument_list|)
argument_list|,
name|absInfo
operator|.
name|minimum
argument_list|,
name|absInfo
operator|.
name|maximum
argument_list|)
expr_stmt|;
name|d
operator|->
name|hw_range_y_min
operator|=
name|absInfo
operator|.
name|minimum
expr_stmt|;
name|d
operator|->
name|hw_range_y_max
operator|=
name|absInfo
operator|.
name|maximum
expr_stmt|;
name|has_y_range
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|has_x_range
operator|||
operator|!
name|has_y_range
condition|)
name|qWarning
argument_list|(
literal|"evdevtouch: %s: Invalid ABS limits, behavior unspecified"
argument_list|,
name|qPrintable
argument_list|(
name|device
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ioctl
argument_list|(
name|m_fd
argument_list|,
name|EVIOCGABS
argument_list|(
name|ABS_PRESSURE
argument_list|)
argument_list|,
operator|&
name|absInfo
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|qCDebug
argument_list|(
name|qLcEvdevTouch
argument_list|,
literal|"evdevtouch: %s: min pressure: %d max pressure: %d"
argument_list|,
name|qPrintable
argument_list|(
name|device
argument_list|)
argument_list|,
name|absInfo
operator|.
name|minimum
argument_list|,
name|absInfo
operator|.
name|maximum
argument_list|)
expr_stmt|;
if|if
condition|(
name|absInfo
operator|.
name|maximum
operator|>
name|absInfo
operator|.
name|minimum
condition|)
block|{
name|d
operator|->
name|hw_pressure_min
operator|=
name|absInfo
operator|.
name|minimum
expr_stmt|;
name|d
operator|->
name|hw_pressure_max
operator|=
name|absInfo
operator|.
name|maximum
expr_stmt|;
block|}
block|}
name|char
name|name
index|[
literal|1024
index|]
decl_stmt|;
if|if
condition|(
name|ioctl
argument_list|(
name|m_fd
argument_list|,
name|EVIOCGNAME
argument_list|(
sizeof|sizeof
argument_list|(
name|name
argument_list|)
operator|-
literal|1
argument_list|)
argument_list|,
name|name
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|d
operator|->
name|hw_name
operator|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|qCDebug
argument_list|(
name|qLcEvdevTouch
argument_list|,
literal|"evdevtouch: %s: device name: %s"
argument_list|,
name|qPrintable
argument_list|(
name|device
argument_list|)
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
comment|// Fix up the coordinate ranges for am335x in case the kernel driver does not have them fixed.
if|if
condition|(
name|d
operator|->
name|hw_name
operator|==
name|QLatin1String
argument_list|(
literal|"ti-tsc"
argument_list|)
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|hw_range_x_min
operator|==
literal|0
operator|&&
name|d
operator|->
name|hw_range_x_max
operator|==
literal|4095
condition|)
block|{
name|d
operator|->
name|hw_range_x_min
operator|=
literal|165
expr_stmt|;
name|d
operator|->
name|hw_range_x_max
operator|=
literal|4016
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|->
name|hw_range_y_min
operator|==
literal|0
operator|&&
name|d
operator|->
name|hw_range_y_max
operator|==
literal|4095
condition|)
block|{
name|d
operator|->
name|hw_range_y_min
operator|=
literal|220
expr_stmt|;
name|d
operator|->
name|hw_range_y_max
operator|=
literal|3907
expr_stmt|;
block|}
name|qCDebug
argument_list|(
name|qLcEvdevTouch
argument_list|,
literal|"evdevtouch: found ti-tsc, overriding: min X: %d max X: %d min Y: %d max Y: %d"
argument_list|,
name|d
operator|->
name|hw_range_x_min
argument_list|,
name|d
operator|->
name|hw_range_x_max
argument_list|,
name|d
operator|->
name|hw_range_y_min
argument_list|,
name|d
operator|->
name|hw_range_y_max
argument_list|)
expr_stmt|;
block|}
name|bool
name|grabSuccess
init|=
operator|!
name|ioctl
argument_list|(
name|m_fd
argument_list|,
name|EVIOCGRAB
argument_list|,
operator|(
name|void
operator|*
operator|)
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|grabSuccess
condition|)
name|ioctl
argument_list|(
name|m_fd
argument_list|,
name|EVIOCGRAB
argument_list|,
operator|(
name|void
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
else|else
name|qWarning
argument_list|(
literal|"evdevtouch: The device is grabbed by another process. No events will be read."
argument_list|)
expr_stmt|;
if|if
condition|(
name|rotationAngle
condition|)
name|d
operator|->
name|m_rotate
operator|=
name|QTransform
operator|::
name|fromTranslate
argument_list|(
literal|0.5
argument_list|,
literal|0.5
argument_list|)
operator|.
name|rotate
argument_list|(
name|rotationAngle
argument_list|)
operator|.
name|translate
argument_list|(
operator|-
literal|0.5
argument_list|,
operator|-
literal|0.5
argument_list|)
expr_stmt|;
if|if
condition|(
name|invertx
condition|)
name|d
operator|->
name|m_rotate
operator|*=
name|QTransform
operator|::
name|fromTranslate
argument_list|(
literal|0.5
argument_list|,
literal|0.5
argument_list|)
operator|.
name|scale
argument_list|(
operator|-
literal|1.0
argument_list|,
literal|1.0
argument_list|)
operator|.
name|translate
argument_list|(
operator|-
literal|0.5
argument_list|,
operator|-
literal|0.5
argument_list|)
expr_stmt|;
if|if
condition|(
name|inverty
condition|)
name|d
operator|->
name|m_rotate
operator|*=
name|QTransform
operator|::
name|fromTranslate
argument_list|(
literal|0.5
argument_list|,
literal|0.5
argument_list|)
operator|.
name|scale
argument_list|(
literal|1.0
argument_list|,
operator|-
literal|1.0
argument_list|)
operator|.
name|translate
argument_list|(
operator|-
literal|0.5
argument_list|,
operator|-
literal|0.5
argument_list|)
expr_stmt|;
name|registerTouchDevice
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QEvdevTouchScreenHandler
name|QEvdevTouchScreenHandler
operator|::
name|~
name|QEvdevTouchScreenHandler
parameter_list|()
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_MTDEV
argument_list|)
if|if
condition|(
name|m_mtdev
condition|)
block|{
name|mtdev_close
argument_list|(
name|m_mtdev
argument_list|)
expr_stmt|;
name|free
argument_list|(
name|m_mtdev
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
name|m_fd
operator|>=
literal|0
condition|)
name|QT_CLOSE
argument_list|(
name|m_fd
argument_list|)
expr_stmt|;
operator|delete
name|d
expr_stmt|;
name|unregisterTouchDevice
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|touchDevice
name|QTouchDevice
modifier|*
name|QEvdevTouchScreenHandler
operator|::
name|touchDevice
parameter_list|()
specifier|const
block|{
return|return
name|m_device
return|;
block|}
end_function
begin_function
DECL|function|readData
name|void
name|QEvdevTouchScreenHandler
operator|::
name|readData
parameter_list|()
block|{
operator|::
name|input_event
name|buffer
index|[
literal|32
index|]
decl_stmt|;
name|int
name|events
init|=
literal|0
decl_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_MTDEV
argument_list|)
forever|forever
block|{
do|do
block|{
name|events
operator|=
name|mtdev_get
argument_list|(
name|m_mtdev
argument_list|,
name|m_fd
argument_list|,
name|buffer
argument_list|,
sizeof|sizeof
argument_list|(
name|buffer
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
operator|::
name|input_event
argument_list|)
argument_list|)
expr_stmt|;
comment|// keep trying mtdev_get if we get interrupted. note that we do not
comment|// (and should not) handle EAGAIN; EAGAIN means that reading would
comment|// block and we'll get back here later to try again anyway.
block|}
do|while
condition|(
name|events
operator|==
operator|-
literal|1
operator|&&
name|errno
operator|==
name|EINTR
condition|)
do|;
comment|// 0 events is EOF, -1 means error, handle both in the same place
if|if
condition|(
name|events
operator|<=
literal|0
condition|)
goto|goto
name|err
goto|;
comment|// process our shiny new events
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|events
condition|;
operator|++
name|i
control|)
name|d
operator|->
name|processInputEvent
argument_list|(
operator|&
name|buffer
index|[
name|i
index|]
argument_list|)
expr_stmt|;
comment|// and try to get more
block|}
else|#
directive|else
name|int
name|n
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|events
operator|=
name|QT_READ
argument_list|(
name|m_fd
argument_list|,
cast|reinterpret_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
name|buffer
argument_list|)
operator|+
name|n
argument_list|,
sizeof|sizeof
argument_list|(
name|buffer
argument_list|)
operator|-
name|n
argument_list|)
expr_stmt|;
if|if
condition|(
name|events
operator|<=
literal|0
condition|)
goto|goto
name|err
goto|;
name|n
operator|+=
name|events
expr_stmt|;
if|if
condition|(
name|n
operator|%
sizeof|sizeof
argument_list|(
operator|::
name|input_event
argument_list|)
operator|==
literal|0
condition|)
break|break;
block|}
name|n
operator|/=
sizeof|sizeof
argument_list|(
operator|::
name|input_event
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
operator|++
name|i
control|)
name|d
operator|->
name|processInputEvent
argument_list|(
operator|&
name|buffer
index|[
name|i
index|]
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return;
name|err
label|:
if|if
condition|(
operator|!
name|events
condition|)
block|{
name|qWarning
argument_list|(
literal|"evdevtouch: Got EOF from input device"
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|events
operator|<
literal|0
condition|)
block|{
if|if
condition|(
name|errno
operator|!=
name|EINTR
operator|&&
name|errno
operator|!=
name|EAGAIN
condition|)
block|{
name|qErrnoWarning
argument_list|(
name|errno
argument_list|,
literal|"evdevtouch: Could not read from input device"
argument_list|)
expr_stmt|;
if|if
condition|(
name|errno
operator|==
name|ENODEV
condition|)
block|{
comment|// device got disconnected -> stop reading
operator|delete
name|m_notify
expr_stmt|;
name|m_notify
operator|=
name|Q_NULLPTR
expr_stmt|;
name|QT_CLOSE
argument_list|(
name|m_fd
argument_list|)
expr_stmt|;
name|m_fd
operator|=
operator|-
literal|1
expr_stmt|;
name|unregisterTouchDevice
argument_list|()
expr_stmt|;
block|}
return|return;
block|}
block|}
block|}
end_function
begin_function
DECL|function|registerTouchDevice
name|void
name|QEvdevTouchScreenHandler
operator|::
name|registerTouchDevice
parameter_list|()
block|{
if|if
condition|(
name|m_device
condition|)
return|return;
name|m_device
operator|=
operator|new
name|QTouchDevice
expr_stmt|;
name|m_device
operator|->
name|setName
argument_list|(
name|d
operator|->
name|hw_name
argument_list|)
expr_stmt|;
name|m_device
operator|->
name|setType
argument_list|(
name|QTouchDevice
operator|::
name|TouchScreen
argument_list|)
expr_stmt|;
name|m_device
operator|->
name|setCapabilities
argument_list|(
name|QTouchDevice
operator|::
name|Position
operator||
name|QTouchDevice
operator|::
name|Area
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|hw_pressure_max
operator|>
name|d
operator|->
name|hw_pressure_min
condition|)
name|m_device
operator|->
name|setCapabilities
argument_list|(
name|m_device
operator|->
name|capabilities
argument_list|()
operator||
name|QTouchDevice
operator|::
name|Pressure
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|registerTouchDevice
argument_list|(
name|m_device
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|unregisterTouchDevice
name|void
name|QEvdevTouchScreenHandler
operator|::
name|unregisterTouchDevice
parameter_list|()
block|{
if|if
condition|(
operator|!
name|m_device
condition|)
return|return;
name|QWindowSystemInterface
operator|::
name|unregisterTouchDevice
argument_list|(
name|m_device
argument_list|)
expr_stmt|;
operator|delete
name|m_device
expr_stmt|;
name|m_device
operator|=
name|Q_NULLPTR
expr_stmt|;
block|}
end_function
begin_function
DECL|function|addTouchPoint
name|void
name|QEvdevTouchScreenData
operator|::
name|addTouchPoint
parameter_list|(
specifier|const
name|Contact
modifier|&
name|contact
parameter_list|,
name|Qt
operator|::
name|TouchPointStates
modifier|*
name|combinedStates
parameter_list|)
block|{
name|QWindowSystemInterface
operator|::
name|TouchPoint
name|tp
decl_stmt|;
name|tp
operator|.
name|id
operator|=
name|contact
operator|.
name|trackingId
expr_stmt|;
name|tp
operator|.
name|flags
operator|=
name|contact
operator|.
name|flags
expr_stmt|;
name|tp
operator|.
name|state
operator|=
name|contact
operator|.
name|state
expr_stmt|;
operator|*
name|combinedStates
operator||=
name|tp
operator|.
name|state
expr_stmt|;
comment|// Store the HW coordinates for now, will be updated later.
name|tp
operator|.
name|area
operator|=
name|QRectF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|contact
operator|.
name|maj
argument_list|,
name|contact
operator|.
name|maj
argument_list|)
expr_stmt|;
name|tp
operator|.
name|area
operator|.
name|moveCenter
argument_list|(
name|QPoint
argument_list|(
name|contact
operator|.
name|x
argument_list|,
name|contact
operator|.
name|y
argument_list|)
argument_list|)
expr_stmt|;
name|tp
operator|.
name|pressure
operator|=
name|contact
operator|.
name|pressure
expr_stmt|;
comment|// Get a normalized position in range 0..1.
name|tp
operator|.
name|normalPosition
operator|=
name|QPointF
argument_list|(
operator|(
name|contact
operator|.
name|x
operator|-
name|hw_range_x_min
operator|)
operator|/
name|qreal
argument_list|(
name|hw_range_x_max
operator|-
name|hw_range_x_min
argument_list|)
argument_list|,
operator|(
name|contact
operator|.
name|y
operator|-
name|hw_range_y_min
operator|)
operator|/
name|qreal
argument_list|(
name|hw_range_y_max
operator|-
name|hw_range_y_min
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|m_rotate
operator|.
name|isIdentity
argument_list|()
condition|)
name|tp
operator|.
name|normalPosition
operator|=
name|m_rotate
operator|.
name|map
argument_list|(
name|tp
operator|.
name|normalPosition
argument_list|)
expr_stmt|;
name|tp
operator|.
name|rawPositions
operator|.
name|append
argument_list|(
name|QPointF
argument_list|(
name|contact
operator|.
name|x
argument_list|,
name|contact
operator|.
name|y
argument_list|)
argument_list|)
expr_stmt|;
name|m_touchPoints
operator|.
name|append
argument_list|(
name|tp
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|processInputEvent
name|void
name|QEvdevTouchScreenData
operator|::
name|processInputEvent
parameter_list|(
name|input_event
modifier|*
name|data
parameter_list|)
block|{
if|if
condition|(
name|data
operator|->
name|type
operator|==
name|EV_ABS
condition|)
block|{
if|if
condition|(
name|data
operator|->
name|code
operator|==
name|ABS_MT_POSITION_X
operator|||
operator|(
name|m_singleTouch
operator|&&
name|data
operator|->
name|code
operator|==
name|ABS_X
operator|)
condition|)
block|{
name|m_currentData
operator|.
name|x
operator|=
name|qBound
argument_list|(
name|hw_range_x_min
argument_list|,
name|data
operator|->
name|value
argument_list|,
name|hw_range_x_max
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_singleTouch
condition|)
name|m_contacts
index|[
name|m_currentSlot
index|]
operator|.
name|x
operator|=
name|m_currentData
operator|.
name|x
expr_stmt|;
if|if
condition|(
name|m_typeB
condition|)
block|{
name|m_contacts
index|[
name|m_currentSlot
index|]
operator|.
name|x
operator|=
name|m_currentData
operator|.
name|x
expr_stmt|;
if|if
condition|(
name|m_contacts
index|[
name|m_currentSlot
index|]
operator|.
name|state
operator|==
name|Qt
operator|::
name|TouchPointStationary
condition|)
name|m_contacts
index|[
name|m_currentSlot
index|]
operator|.
name|state
operator|=
name|Qt
operator|::
name|TouchPointMoved
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|data
operator|->
name|code
operator|==
name|ABS_MT_POSITION_Y
operator|||
operator|(
name|m_singleTouch
operator|&&
name|data
operator|->
name|code
operator|==
name|ABS_Y
operator|)
condition|)
block|{
name|m_currentData
operator|.
name|y
operator|=
name|qBound
argument_list|(
name|hw_range_y_min
argument_list|,
name|data
operator|->
name|value
argument_list|,
name|hw_range_y_max
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_singleTouch
condition|)
name|m_contacts
index|[
name|m_currentSlot
index|]
operator|.
name|y
operator|=
name|m_currentData
operator|.
name|y
expr_stmt|;
if|if
condition|(
name|m_typeB
condition|)
block|{
name|m_contacts
index|[
name|m_currentSlot
index|]
operator|.
name|y
operator|=
name|m_currentData
operator|.
name|y
expr_stmt|;
if|if
condition|(
name|m_contacts
index|[
name|m_currentSlot
index|]
operator|.
name|state
operator|==
name|Qt
operator|::
name|TouchPointStationary
condition|)
name|m_contacts
index|[
name|m_currentSlot
index|]
operator|.
name|state
operator|=
name|Qt
operator|::
name|TouchPointMoved
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|data
operator|->
name|code
operator|==
name|ABS_MT_TRACKING_ID
condition|)
block|{
name|m_currentData
operator|.
name|trackingId
operator|=
name|data
operator|->
name|value
expr_stmt|;
if|if
condition|(
name|m_typeB
condition|)
block|{
if|if
condition|(
name|m_currentData
operator|.
name|trackingId
operator|==
operator|-
literal|1
condition|)
block|{
name|m_contacts
index|[
name|m_currentSlot
index|]
operator|.
name|state
operator|=
name|Qt
operator|::
name|TouchPointReleased
expr_stmt|;
block|}
else|else
block|{
name|m_contacts
index|[
name|m_currentSlot
index|]
operator|.
name|state
operator|=
name|Qt
operator|::
name|TouchPointPressed
expr_stmt|;
name|m_contacts
index|[
name|m_currentSlot
index|]
operator|.
name|trackingId
operator|=
name|m_currentData
operator|.
name|trackingId
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|data
operator|->
name|code
operator|==
name|ABS_MT_TOUCH_MAJOR
condition|)
block|{
name|m_currentData
operator|.
name|maj
operator|=
name|data
operator|->
name|value
expr_stmt|;
if|if
condition|(
name|data
operator|->
name|value
operator|==
literal|0
condition|)
name|m_currentData
operator|.
name|state
operator|=
name|Qt
operator|::
name|TouchPointReleased
expr_stmt|;
if|if
condition|(
name|m_typeB
condition|)
name|m_contacts
index|[
name|m_currentSlot
index|]
operator|.
name|maj
operator|=
name|m_currentData
operator|.
name|maj
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|data
operator|->
name|code
operator|==
name|ABS_PRESSURE
condition|)
block|{
name|m_currentData
operator|.
name|pressure
operator|=
name|qBound
argument_list|(
name|hw_pressure_min
argument_list|,
name|data
operator|->
name|value
argument_list|,
name|hw_pressure_max
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_typeB
operator|||
name|m_singleTouch
condition|)
name|m_contacts
index|[
name|m_currentSlot
index|]
operator|.
name|pressure
operator|=
name|m_currentData
operator|.
name|pressure
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|data
operator|->
name|code
operator|==
name|ABS_MT_SLOT
condition|)
block|{
name|m_currentSlot
operator|=
name|data
operator|->
name|value
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|data
operator|->
name|type
operator|==
name|EV_KEY
operator|&&
operator|!
name|m_typeB
condition|)
block|{
if|if
condition|(
name|data
operator|->
name|code
operator|==
name|BTN_TOUCH
operator|&&
name|data
operator|->
name|value
operator|==
literal|0
condition|)
name|m_contacts
index|[
name|m_currentSlot
index|]
operator|.
name|state
operator|=
name|Qt
operator|::
name|TouchPointReleased
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|data
operator|->
name|type
operator|==
name|EV_SYN
operator|&&
name|data
operator|->
name|code
operator|==
name|SYN_MT_REPORT
operator|&&
name|m_lastEventType
operator|!=
name|EV_SYN
condition|)
block|{
comment|// If there is no tracking id, one will be generated later.
comment|// Until that use a temporary key.
name|int
name|key
init|=
name|m_currentData
operator|.
name|trackingId
decl_stmt|;
if|if
condition|(
name|key
operator|==
operator|-
literal|1
condition|)
name|key
operator|=
name|m_contacts
operator|.
name|count
argument_list|()
expr_stmt|;
name|m_contacts
operator|.
name|insert
argument_list|(
name|key
argument_list|,
name|m_currentData
argument_list|)
expr_stmt|;
name|m_currentData
operator|=
name|Contact
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|data
operator|->
name|type
operator|==
name|EV_SYN
operator|&&
name|data
operator|->
name|code
operator|==
name|SYN_REPORT
condition|)
block|{
comment|// Ensure valid IDs even when the driver does not report ABS_MT_TRACKING_ID.
if|if
condition|(
operator|!
name|m_contacts
operator|.
name|isEmpty
argument_list|()
operator|&&
name|m_contacts
operator|.
name|constBegin
argument_list|()
operator|.
name|value
argument_list|()
operator|.
name|trackingId
operator|==
operator|-
literal|1
condition|)
name|assignIds
argument_list|()
expr_stmt|;
name|m_touchPoints
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Qt
operator|::
name|TouchPointStates
name|combinedStates
decl_stmt|;
name|QMutableHashIterator
argument_list|<
name|int
argument_list|,
name|Contact
argument_list|>
name|it
argument_list|(
name|m_contacts
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|Contact
modifier|&
name|contact
argument_list|(
name|it
operator|.
name|value
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|contact
operator|.
name|state
condition|)
continue|continue;
name|int
name|key
init|=
name|m_typeB
condition|?
name|it
operator|.
name|key
argument_list|()
else|:
name|contact
operator|.
name|trackingId
decl_stmt|;
if|if
condition|(
operator|!
name|m_typeB
operator|&&
name|m_lastContacts
operator|.
name|contains
argument_list|(
name|key
argument_list|)
condition|)
block|{
specifier|const
name|Contact
modifier|&
name|prev
argument_list|(
name|m_lastContacts
operator|.
name|value
argument_list|(
name|key
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|contact
operator|.
name|state
operator|==
name|Qt
operator|::
name|TouchPointReleased
condition|)
block|{
comment|// Copy over the previous values for released points, just in case.
name|contact
operator|.
name|x
operator|=
name|prev
operator|.
name|x
expr_stmt|;
name|contact
operator|.
name|y
operator|=
name|prev
operator|.
name|y
expr_stmt|;
name|contact
operator|.
name|maj
operator|=
name|prev
operator|.
name|maj
expr_stmt|;
block|}
else|else
block|{
name|contact
operator|.
name|state
operator|=
operator|(
name|prev
operator|.
name|x
operator|==
name|contact
operator|.
name|x
operator|&&
name|prev
operator|.
name|y
operator|==
name|contact
operator|.
name|y
operator|)
condition|?
name|Qt
operator|::
name|TouchPointStationary
else|:
name|Qt
operator|::
name|TouchPointMoved
expr_stmt|;
block|}
block|}
comment|// Avoid reporting a contact in released state more than once.
if|if
condition|(
operator|!
name|m_typeB
operator|&&
name|contact
operator|.
name|state
operator|==
name|Qt
operator|::
name|TouchPointReleased
operator|&&
operator|!
name|m_lastContacts
operator|.
name|contains
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
continue|continue;
block|}
name|addTouchPoint
argument_list|(
name|contact
argument_list|,
operator|&
name|combinedStates
argument_list|)
expr_stmt|;
block|}
comment|// Now look for contacts that have disappeared since the last sync.
name|it
operator|=
name|m_lastContacts
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|Contact
modifier|&
name|contact
argument_list|(
name|it
operator|.
name|value
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|key
init|=
name|m_typeB
condition|?
name|it
operator|.
name|key
argument_list|()
else|:
name|contact
operator|.
name|trackingId
decl_stmt|;
if|if
condition|(
operator|!
name|m_contacts
operator|.
name|contains
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|contact
operator|.
name|state
operator|=
name|Qt
operator|::
name|TouchPointReleased
expr_stmt|;
name|addTouchPoint
argument_list|(
name|contact
argument_list|,
operator|&
name|combinedStates
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Remove contacts that have just been reported as released.
name|it
operator|=
name|m_contacts
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|Contact
modifier|&
name|contact
argument_list|(
name|it
operator|.
name|value
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|contact
operator|.
name|state
condition|)
continue|continue;
if|if
condition|(
name|contact
operator|.
name|state
operator|==
name|Qt
operator|::
name|TouchPointReleased
condition|)
block|{
if|if
condition|(
name|m_typeB
condition|)
name|contact
operator|.
name|state
operator|=
cast|static_cast
argument_list|<
name|Qt
operator|::
name|TouchPointState
argument_list|>
argument_list|(
literal|0
argument_list|)
expr_stmt|;
else|else
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|contact
operator|.
name|state
operator|=
name|Qt
operator|::
name|TouchPointStationary
expr_stmt|;
block|}
block|}
name|m_lastContacts
operator|=
name|m_contacts
expr_stmt|;
if|if
condition|(
operator|!
name|m_typeB
operator|&&
operator|!
name|m_singleTouch
condition|)
name|m_contacts
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|m_touchPoints
operator|.
name|isEmpty
argument_list|()
operator|&&
name|combinedStates
operator|!=
name|Qt
operator|::
name|TouchPointStationary
condition|)
name|reportPoints
argument_list|()
expr_stmt|;
block|}
name|m_lastEventType
operator|=
name|data
operator|->
name|type
expr_stmt|;
block|}
end_function
begin_function
DECL|function|findClosestContact
name|int
name|QEvdevTouchScreenData
operator|::
name|findClosestContact
parameter_list|(
specifier|const
name|QHash
argument_list|<
name|int
argument_list|,
name|Contact
argument_list|>
modifier|&
name|contacts
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
modifier|*
name|dist
parameter_list|)
block|{
name|int
name|minDist
init|=
operator|-
literal|1
decl_stmt|,
name|id
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|QHash
argument_list|<
name|int
argument_list|,
name|Contact
argument_list|>
operator|::
name|const_iterator
name|it
init|=
name|contacts
operator|.
name|constBegin
argument_list|()
init|,
name|ite
init|=
name|contacts
operator|.
name|constEnd
argument_list|()
init|;
name|it
operator|!=
name|ite
condition|;
operator|++
name|it
control|)
block|{
specifier|const
name|Contact
modifier|&
name|contact
argument_list|(
name|it
operator|.
name|value
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|dx
init|=
name|x
operator|-
name|contact
operator|.
name|x
decl_stmt|;
name|int
name|dy
init|=
name|y
operator|-
name|contact
operator|.
name|y
decl_stmt|;
name|int
name|dist
init|=
name|dx
operator|*
name|dx
operator|+
name|dy
operator|*
name|dy
decl_stmt|;
if|if
condition|(
name|minDist
operator|==
operator|-
literal|1
operator|||
name|dist
operator|<
name|minDist
condition|)
block|{
name|minDist
operator|=
name|dist
expr_stmt|;
name|id
operator|=
name|contact
operator|.
name|trackingId
expr_stmt|;
block|}
block|}
if|if
condition|(
name|dist
condition|)
operator|*
name|dist
operator|=
name|minDist
expr_stmt|;
return|return
name|id
return|;
block|}
end_function
begin_function
DECL|function|assignIds
name|void
name|QEvdevTouchScreenData
operator|::
name|assignIds
parameter_list|()
block|{
name|QHash
argument_list|<
name|int
argument_list|,
name|Contact
argument_list|>
name|candidates
init|=
name|m_lastContacts
decl_stmt|,
name|pending
init|=
name|m_contacts
decl_stmt|,
name|newContacts
decl_stmt|;
name|int
name|maxId
init|=
operator|-
literal|1
decl_stmt|;
name|QHash
argument_list|<
name|int
argument_list|,
name|Contact
argument_list|>
operator|::
name|iterator
name|it
decl_stmt|,
name|ite
decl_stmt|,
name|bestMatch
decl_stmt|;
while|while
condition|(
operator|!
name|pending
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|candidates
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|int
name|bestDist
init|=
operator|-
literal|1
decl_stmt|,
name|bestId
init|=
literal|0
decl_stmt|;
for|for
control|(
name|it
operator|=
name|pending
operator|.
name|begin
argument_list|()
operator|,
name|ite
operator|=
name|pending
operator|.
name|end
argument_list|()
init|;
name|it
operator|!=
name|ite
condition|;
operator|++
name|it
control|)
block|{
name|int
name|dist
decl_stmt|;
name|int
name|id
init|=
name|findClosestContact
argument_list|(
name|candidates
argument_list|,
name|it
operator|->
name|x
argument_list|,
name|it
operator|->
name|y
argument_list|,
operator|&
name|dist
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|>=
literal|0
operator|&&
operator|(
name|bestDist
operator|==
operator|-
literal|1
operator|||
name|dist
operator|<
name|bestDist
operator|)
condition|)
block|{
name|bestDist
operator|=
name|dist
expr_stmt|;
name|bestId
operator|=
name|id
expr_stmt|;
name|bestMatch
operator|=
name|it
expr_stmt|;
block|}
block|}
if|if
condition|(
name|bestDist
operator|>=
literal|0
condition|)
block|{
name|bestMatch
operator|->
name|trackingId
operator|=
name|bestId
expr_stmt|;
name|newContacts
operator|.
name|insert
argument_list|(
name|bestId
argument_list|,
operator|*
name|bestMatch
argument_list|)
expr_stmt|;
name|candidates
operator|.
name|remove
argument_list|(
name|bestId
argument_list|)
expr_stmt|;
name|pending
operator|.
name|erase
argument_list|(
name|bestMatch
argument_list|)
expr_stmt|;
if|if
condition|(
name|bestId
operator|>
name|maxId
condition|)
name|maxId
operator|=
name|bestId
expr_stmt|;
block|}
block|}
if|if
condition|(
name|candidates
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|it
operator|=
name|pending
operator|.
name|begin
argument_list|()
operator|,
name|ite
operator|=
name|pending
operator|.
name|end
argument_list|()
init|;
name|it
operator|!=
name|ite
condition|;
operator|++
name|it
control|)
block|{
name|it
operator|->
name|trackingId
operator|=
operator|++
name|maxId
expr_stmt|;
name|newContacts
operator|.
name|insert
argument_list|(
name|it
operator|->
name|trackingId
argument_list|,
operator|*
name|it
argument_list|)
expr_stmt|;
block|}
block|}
name|m_contacts
operator|=
name|newContacts
expr_stmt|;
block|}
end_function
begin_function
DECL|function|reportPoints
name|void
name|QEvdevTouchScreenData
operator|::
name|reportPoints
parameter_list|()
block|{
name|QRect
name|winRect
decl_stmt|;
if|if
condition|(
name|m_forceToActiveWindow
condition|)
block|{
name|QWindow
modifier|*
name|win
init|=
name|QGuiApplication
operator|::
name|focusWindow
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|win
condition|)
return|return;
name|winRect
operator|=
name|QHighDpi
operator|::
name|toNativePixels
argument_list|(
name|win
operator|->
name|geometry
argument_list|()
argument_list|,
name|win
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QScreen
modifier|*
name|primary
init|=
name|QGuiApplication
operator|::
name|primaryScreen
argument_list|()
decl_stmt|;
name|winRect
operator|=
name|QHighDpi
operator|::
name|toNativePixels
argument_list|(
name|primary
operator|->
name|geometry
argument_list|()
argument_list|,
name|primary
argument_list|)
expr_stmt|;
block|}
specifier|const
name|int
name|hw_w
init|=
name|hw_range_x_max
operator|-
name|hw_range_x_min
decl_stmt|;
specifier|const
name|int
name|hw_h
init|=
name|hw_range_y_max
operator|-
name|hw_range_y_min
decl_stmt|;
comment|// Map the coordinates based on the normalized position. QPA expects 'area'
comment|// to be in screen coordinates.
specifier|const
name|int
name|pointCount
init|=
name|m_touchPoints
operator|.
name|count
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pointCount
condition|;
operator|++
name|i
control|)
block|{
name|QWindowSystemInterface
operator|::
name|TouchPoint
modifier|&
name|tp
argument_list|(
name|m_touchPoints
index|[
name|i
index|]
argument_list|)
decl_stmt|;
comment|// Generate a screen position that is always inside the active window
comment|// or the primary screen.  Even though we report this as a QRectF, internally
comment|// Qt uses QRect/QPoint so we need to bound the size to winRect.size() - QSize(1, 1)
specifier|const
name|qreal
name|wx
init|=
name|winRect
operator|.
name|left
argument_list|()
operator|+
name|tp
operator|.
name|normalPosition
operator|.
name|x
argument_list|()
operator|*
operator|(
name|winRect
operator|.
name|width
argument_list|()
operator|-
literal|1
operator|)
decl_stmt|;
specifier|const
name|qreal
name|wy
init|=
name|winRect
operator|.
name|top
argument_list|()
operator|+
name|tp
operator|.
name|normalPosition
operator|.
name|y
argument_list|()
operator|*
operator|(
name|winRect
operator|.
name|height
argument_list|()
operator|-
literal|1
operator|)
decl_stmt|;
specifier|const
name|qreal
name|sizeRatio
init|=
operator|(
name|winRect
operator|.
name|width
argument_list|()
operator|+
name|winRect
operator|.
name|height
argument_list|()
operator|)
operator|/
name|qreal
argument_list|(
name|hw_w
operator|+
name|hw_h
argument_list|)
decl_stmt|;
if|if
condition|(
name|tp
operator|.
name|area
operator|.
name|width
argument_list|()
operator|==
operator|-
literal|1
condition|)
comment|// touch major was not provided
name|tp
operator|.
name|area
operator|=
name|QRectF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|8
argument_list|,
literal|8
argument_list|)
expr_stmt|;
else|else
name|tp
operator|.
name|area
operator|=
name|QRectF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|tp
operator|.
name|area
operator|.
name|width
argument_list|()
operator|*
name|sizeRatio
argument_list|,
name|tp
operator|.
name|area
operator|.
name|height
argument_list|()
operator|*
name|sizeRatio
argument_list|)
expr_stmt|;
name|tp
operator|.
name|area
operator|.
name|moveCenter
argument_list|(
name|QPointF
argument_list|(
name|wx
argument_list|,
name|wy
argument_list|)
argument_list|)
expr_stmt|;
comment|// Calculate normalized pressure.
if|if
condition|(
operator|!
name|hw_pressure_min
operator|&&
operator|!
name|hw_pressure_max
condition|)
name|tp
operator|.
name|pressure
operator|=
name|tp
operator|.
name|state
operator|==
name|Qt
operator|::
name|TouchPointReleased
condition|?
literal|0
else|:
literal|1
expr_stmt|;
else|else
name|tp
operator|.
name|pressure
operator|=
operator|(
name|tp
operator|.
name|pressure
operator|-
name|hw_pressure_min
operator|)
operator|/
name|qreal
argument_list|(
name|hw_pressure_max
operator|-
name|hw_pressure_min
argument_list|)
expr_stmt|;
block|}
name|QWindowSystemInterface
operator|::
name|handleTouchEvent
argument_list|(
name|Q_NULLPTR
argument_list|,
name|q
operator|->
name|touchDevice
argument_list|()
argument_list|,
name|m_touchPoints
argument_list|)
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|QEvdevTouchScreenHandlerThread
name|QEvdevTouchScreenHandlerThread
operator|::
name|QEvdevTouchScreenHandlerThread
parameter_list|(
specifier|const
name|QString
modifier|&
name|device
parameter_list|,
specifier|const
name|QString
modifier|&
name|spec
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QDaemonThread
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|m_device
argument_list|(
name|device
argument_list|)
member_init_list|,
name|m_spec
argument_list|(
name|spec
argument_list|)
member_init_list|,
name|m_handler
argument_list|(
name|Q_NULLPTR
argument_list|)
member_init_list|,
name|m_touchDeviceRegistered
argument_list|(
literal|false
argument_list|)
block|{
name|start
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QEvdevTouchScreenHandlerThread
name|QEvdevTouchScreenHandlerThread
operator|::
name|~
name|QEvdevTouchScreenHandlerThread
parameter_list|()
block|{
name|quit
argument_list|()
expr_stmt|;
name|wait
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|run
name|void
name|QEvdevTouchScreenHandlerThread
operator|::
name|run
parameter_list|()
block|{
name|m_handler
operator|=
operator|new
name|QEvdevTouchScreenHandler
argument_list|(
name|m_device
argument_list|,
name|m_spec
argument_list|)
expr_stmt|;
comment|// Report the registration to the parent thread by invoking the method asynchronously
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
name|this
argument_list|,
literal|"notifyTouchDeviceRegistered"
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
expr_stmt|;
name|exec
argument_list|()
expr_stmt|;
operator|delete
name|m_handler
expr_stmt|;
name|m_handler
operator|=
name|Q_NULLPTR
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isTouchDeviceRegistered
name|bool
name|QEvdevTouchScreenHandlerThread
operator|::
name|isTouchDeviceRegistered
parameter_list|()
specifier|const
block|{
return|return
name|m_touchDeviceRegistered
return|;
block|}
end_function
begin_function
DECL|function|notifyTouchDeviceRegistered
name|void
name|QEvdevTouchScreenHandlerThread
operator|::
name|notifyTouchDeviceRegistered
parameter_list|()
block|{
name|m_touchDeviceRegistered
operator|=
literal|true
expr_stmt|;
emit|emit
name|touchDeviceRegistered
argument_list|()
emit|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
