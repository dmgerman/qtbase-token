begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the plugins module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qevdevtouchmanager_p.h"
end_include
begin_include
include|#
directive|include
file|"qevdevtouchhandler_p.h"
end_include
begin_include
include|#
directive|include
file|<QStringList>
end_include
begin_include
include|#
directive|include
file|<QGuiApplication>
end_include
begin_include
include|#
directive|include
file|<QLoggingCategory>
end_include
begin_include
include|#
directive|include
file|<QtPlatformSupport/private/qdevicediscovery_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qguiapplication_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qinputdevicemanager_p_p.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
name|Q_DECLARE_LOGGING_CATEGORY
argument_list|(
name|qLcEvdevTouch
argument_list|)
DECL|function|QEvdevTouchManager
name|QEvdevTouchManager
operator|::
name|QEvdevTouchManager
argument_list|(
specifier|const
name|QString
operator|&
name|key
argument_list|,
specifier|const
name|QString
operator|&
name|specification
argument_list|,
name|QObject
operator|*
name|parent
argument_list|)
range|:
name|QObject
argument_list|(
argument|parent
argument_list|)
block|{
name|Q_UNUSED
argument_list|(
name|key
argument_list|)
block|;
if|if
condition|(
name|qEnvironmentVariableIsSet
argument_list|(
literal|"QT_QPA_EVDEV_DEBUG"
argument_list|)
condition|)
cast|const_cast
argument_list|<
name|QLoggingCategory
operator|&
argument_list|>
argument_list|(
name|qLcEvdevTouch
argument_list|()
argument_list|)
operator|.
name|setEnabled
argument_list|(
name|QtDebugMsg
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QString
name|spec
operator|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|qgetenv
argument_list|(
literal|"QT_QPA_EVDEV_TOUCHSCREEN_PARAMETERS"
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt
begin_if
if|if
condition|(
name|spec
operator|.
name|isEmpty
argument_list|()
condition|)
name|spec
operator|=
name|specification
expr_stmt|;
end_if
begin_decl_stmt
name|QStringList
name|args
init|=
name|spec
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QStringList
name|devices
decl_stmt|;
end_decl_stmt
begin_foreach
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|arg
decl|,
name|args
control|)
block|{
if|if
condition|(
name|arg
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"/dev/"
argument_list|)
argument_list|)
condition|)
block|{
name|devices
operator|.
name|append
argument_list|(
name|arg
argument_list|)
expr_stmt|;
name|args
operator|.
name|removeAll
argument_list|(
name|arg
argument_list|)
expr_stmt|;
block|}
block|}
end_foreach
begin_comment
comment|// build new specification without /dev/ elements
end_comment
begin_expr_stmt
name|m_spec
operator|=
name|args
operator|.
name|join
argument_list|(
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt
begin_foreach
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|device
decl|,
name|devices
control|)
name|addDevice
argument_list|(
name|device
argument_list|)
expr_stmt|;
end_foreach
begin_comment
comment|// when no devices specified, use device discovery to scan and monitor
end_comment
begin_if
if|if
condition|(
name|devices
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|qCDebug
argument_list|(
name|qLcEvdevTouch
argument_list|)
operator|<<
literal|"evdevtouch: Using device discovery"
expr_stmt|;
name|m_deviceDiscovery
operator|=
name|QDeviceDiscovery
operator|::
name|create
argument_list|(
name|QDeviceDiscovery
operator|::
name|Device_Touchpad
operator||
name|QDeviceDiscovery
operator|::
name|Device_Touchscreen
argument_list|,
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_deviceDiscovery
condition|)
block|{
name|QStringList
name|devices
init|=
name|m_deviceDiscovery
operator|->
name|scanConnectedDevices
argument_list|()
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|device
decl|,
name|devices
control|)
name|addDevice
argument_list|(
name|device
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|m_deviceDiscovery
argument_list|,
name|SIGNAL
argument_list|(
name|deviceDetected
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|addDevice
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|m_deviceDiscovery
argument_list|,
name|SIGNAL
argument_list|(
name|deviceRemoved
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|removeDevice
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_if
begin_destructor
unit|}  QEvdevTouchManager
DECL|function|~QEvdevTouchManager
operator|::
name|~
name|QEvdevTouchManager
parameter_list|()
block|{
name|qDeleteAll
argument_list|(
name|m_activeDevices
argument_list|)
expr_stmt|;
name|updateInputDeviceCount
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|addDevice
name|void
name|QEvdevTouchManager
operator|::
name|addDevice
parameter_list|(
specifier|const
name|QString
modifier|&
name|deviceNode
parameter_list|)
block|{
name|qCDebug
argument_list|(
name|qLcEvdevTouch
argument_list|)
operator|<<
literal|"evdevtouch: Adding device at"
operator|<<
name|deviceNode
expr_stmt|;
name|QEvdevTouchScreenHandlerThread
modifier|*
name|handler
decl_stmt|;
name|handler
operator|=
operator|new
name|QEvdevTouchScreenHandlerThread
argument_list|(
name|deviceNode
argument_list|,
name|m_spec
argument_list|)
expr_stmt|;
if|if
condition|(
name|handler
condition|)
block|{
name|m_activeDevices
operator|.
name|insert
argument_list|(
name|deviceNode
argument_list|,
name|handler
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|handler
argument_list|,
operator|&
name|QEvdevTouchScreenHandlerThread
operator|::
name|touchDeviceRegistered
argument_list|,
name|this
argument_list|,
operator|&
name|QEvdevTouchManager
operator|::
name|updateInputDeviceCount
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|(
literal|"evdevtouch: Failed to open touch device %s"
argument_list|,
name|qPrintable
argument_list|(
name|deviceNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|removeDevice
name|void
name|QEvdevTouchManager
operator|::
name|removeDevice
parameter_list|(
specifier|const
name|QString
modifier|&
name|deviceNode
parameter_list|)
block|{
if|if
condition|(
name|m_activeDevices
operator|.
name|contains
argument_list|(
name|deviceNode
argument_list|)
condition|)
block|{
name|qCDebug
argument_list|(
name|qLcEvdevTouch
argument_list|)
operator|<<
literal|"evdevtouch: Removing device at"
operator|<<
name|deviceNode
expr_stmt|;
name|QEvdevTouchScreenHandlerThread
modifier|*
name|handler
init|=
name|m_activeDevices
operator|.
name|value
argument_list|(
name|deviceNode
argument_list|)
decl_stmt|;
name|m_activeDevices
operator|.
name|remove
argument_list|(
name|deviceNode
argument_list|)
expr_stmt|;
operator|delete
name|handler
expr_stmt|;
name|updateInputDeviceCount
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|updateInputDeviceCount
name|void
name|QEvdevTouchManager
operator|::
name|updateInputDeviceCount
parameter_list|()
block|{
name|int
name|registeredTouchDevices
init|=
literal|0
decl_stmt|;
name|Q_FOREACH
argument_list|(
argument|QEvdevTouchScreenHandlerThread *handler
argument_list|,
argument|m_activeDevices
argument_list|)
block|{
if|if
condition|(
name|handler
operator|->
name|isTouchDeviceRegistered
argument_list|()
condition|)
operator|++
name|registeredTouchDevices
expr_stmt|;
block|}
name|qCDebug
argument_list|(
name|qLcEvdevTouch
argument_list|)
operator|<<
literal|"evdevtouch: Updating QInputDeviceManager device count:"
operator|<<
name|registeredTouchDevices
operator|<<
literal|" touch devices,"
operator|<<
name|m_activeDevices
operator|.
name|count
argument_list|()
operator|-
name|registeredTouchDevices
operator|<<
literal|"pending handler(s)"
expr_stmt|;
name|QInputDeviceManagerPrivate
operator|::
name|get
argument_list|(
name|QGuiApplicationPrivate
operator|::
name|inputDeviceManager
argument_list|()
argument_list|)
operator|->
name|setDeviceCount
argument_list|(
name|QInputDeviceManager
operator|::
name|DeviceTypeTouch
argument_list|,
name|registeredTouchDevices
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
