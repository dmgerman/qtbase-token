begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qgenericunixservices_p.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/QStandardPaths>
end_include
begin_include
include|#
directive|include
file|<QtCore/QProcess>
end_include
begin_include
include|#
directive|include
file|<QtCore/QUrl>
end_include
begin_include
include|#
directive|include
file|<QtCore/QDebug>
end_include
begin_include
include|#
directive|include
file|<stdlib.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|enumerator|debug
name|enum
type|{
name|debug
init|=
literal|0
end_decl_stmt
begin_function
DECL|enumerator|debug
unit|};
DECL|function|detectDesktopEnvironment
specifier|static
specifier|inline
name|QByteArray
name|detectDesktopEnvironment
parameter_list|()
block|{
if|if
condition|(
operator|!
name|qEnvironmentVariableIsEmpty
argument_list|(
literal|"KDE_FULL_SESSION"
argument_list|)
condition|)
return|return
name|QByteArray
argument_list|(
literal|"KDE"
argument_list|)
return|;
comment|// Check Unity first, whose older versions also have "GNOME_DESKTOP_SESSION_ID" set.
specifier|const
name|QByteArray
name|xdgCurrentDesktop
init|=
name|qgetenv
argument_list|(
literal|"XDG_CURRENT_DESKTOP"
argument_list|)
decl_stmt|;
if|if
condition|(
name|xdgCurrentDesktop
operator|==
literal|"Unity"
condition|)
return|return
name|QByteArrayLiteral
argument_list|(
literal|"UNITY"
argument_list|)
return|;
comment|// GNOME_DESKTOP_SESSION_ID is deprecated for some reason, but still check it
if|if
condition|(
name|qgetenv
argument_list|(
literal|"DESKTOP_SESSION"
argument_list|)
operator|==
literal|"gnome"
operator|||
operator|!
name|qEnvironmentVariableIsEmpty
argument_list|(
literal|"GNOME_DESKTOP_SESSION_ID"
argument_list|)
condition|)
return|return
name|QByteArray
argument_list|(
literal|"GNOME"
argument_list|)
return|;
return|return
name|QByteArray
argument_list|(
literal|"UNKNOWN"
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|checkExecutable
specifier|static
specifier|inline
name|bool
name|checkExecutable
parameter_list|(
specifier|const
name|QString
modifier|&
name|candidate
parameter_list|,
name|QString
modifier|*
name|result
parameter_list|)
block|{
operator|*
name|result
operator|=
name|QStandardPaths
operator|::
name|findExecutable
argument_list|(
name|candidate
argument_list|)
expr_stmt|;
return|return
operator|!
name|result
operator|->
name|isEmpty
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|detectWebBrowser
specifier|static
specifier|inline
name|bool
name|detectWebBrowser
parameter_list|(
name|QByteArray
name|desktop
parameter_list|,
name|bool
name|checkBrowserVariable
parameter_list|,
name|QString
modifier|*
name|browser
parameter_list|)
block|{
specifier|const
name|char
modifier|*
name|browsers
index|[]
init|=
block|{
literal|"google-chrome"
block|,
literal|"firefox"
block|,
literal|"mozilla"
block|,
literal|"opera"
block|}
decl_stmt|;
name|browser
operator|->
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|checkExecutable
argument_list|(
name|QStringLiteral
argument_list|(
literal|"xdg-open"
argument_list|)
argument_list|,
name|browser
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|checkBrowserVariable
condition|)
block|{
name|QByteArray
name|browserVariable
init|=
name|qgetenv
argument_list|(
literal|"DEFAULT_BROWSER"
argument_list|)
decl_stmt|;
if|if
condition|(
name|browserVariable
operator|.
name|isEmpty
argument_list|()
condition|)
name|browserVariable
operator|=
name|qgetenv
argument_list|(
literal|"BROWSER"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|browserVariable
operator|.
name|isEmpty
argument_list|()
operator|&&
name|checkExecutable
argument_list|(
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|browserVariable
argument_list|)
argument_list|,
name|browser
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
if|if
condition|(
name|desktop
operator|==
name|QByteArray
argument_list|(
literal|"KDE"
argument_list|)
condition|)
block|{
comment|// Konqueror launcher
if|if
condition|(
name|checkExecutable
argument_list|(
name|QStringLiteral
argument_list|(
literal|"kfmclient"
argument_list|)
argument_list|,
name|browser
argument_list|)
condition|)
block|{
name|browser
operator|->
name|append
argument_list|(
name|QStringLiteral
argument_list|(
literal|" exec"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|desktop
operator|==
name|QByteArray
argument_list|(
literal|"GNOME"
argument_list|)
condition|)
block|{
if|if
condition|(
name|checkExecutable
argument_list|(
name|QStringLiteral
argument_list|(
literal|"gnome-open"
argument_list|)
argument_list|,
name|browser
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
sizeof|sizeof
argument_list|(
name|browsers
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|char
operator|*
argument_list|)
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|checkExecutable
argument_list|(
name|QLatin1String
argument_list|(
name|browsers
index|[
name|i
index|]
argument_list|)
argument_list|,
name|browser
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|launch
specifier|static
specifier|inline
name|bool
name|launch
parameter_list|(
specifier|const
name|QString
modifier|&
name|launcher
parameter_list|,
specifier|const
name|QUrl
modifier|&
name|url
parameter_list|)
block|{
specifier|const
name|QString
name|command
init|=
name|launcher
operator|+
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
operator|+
name|QLatin1String
argument_list|(
name|url
operator|.
name|toEncoded
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|debug
condition|)
name|qDebug
argument_list|(
literal|"Launching %s"
argument_list|,
name|qPrintable
argument_list|(
name|command
argument_list|)
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QT_NO_PROCESS
argument_list|)
specifier|const
name|bool
name|ok
init|=
operator|::
name|system
argument_list|(
name|qPrintable
argument_list|(
name|command
operator|+
name|QStringLiteral
argument_list|(
literal|"&"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
else|#
directive|else
specifier|const
name|bool
name|ok
init|=
name|QProcess
operator|::
name|startDetached
argument_list|(
name|command
argument_list|)
decl_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|ok
condition|)
name|qWarning
argument_list|(
literal|"Launch failed (%s)"
argument_list|,
name|qPrintable
argument_list|(
name|command
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ok
return|;
block|}
end_function
begin_function
DECL|function|desktopEnvironment
name|QByteArray
name|QGenericUnixServices
operator|::
name|desktopEnvironment
parameter_list|()
specifier|const
block|{
specifier|static
specifier|const
name|QByteArray
name|result
init|=
name|detectDesktopEnvironment
argument_list|()
decl_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|openUrl
name|bool
name|QGenericUnixServices
operator|::
name|openUrl
parameter_list|(
specifier|const
name|QUrl
modifier|&
name|url
parameter_list|)
block|{
if|if
condition|(
name|url
operator|.
name|scheme
argument_list|()
operator|==
name|QStringLiteral
argument_list|(
literal|"mailto"
argument_list|)
condition|)
return|return
name|openDocument
argument_list|(
name|url
argument_list|)
return|;
if|if
condition|(
name|m_webBrowser
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|detectWebBrowser
argument_list|(
name|desktopEnvironment
argument_list|()
argument_list|,
literal|true
argument_list|,
operator|&
name|m_webBrowser
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: Unable to detect a web browser to launch '%s'"
argument_list|,
name|Q_FUNC_INFO
argument_list|,
name|qPrintable
argument_list|(
name|url
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
name|launch
argument_list|(
name|m_webBrowser
argument_list|,
name|url
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|openDocument
name|bool
name|QGenericUnixServices
operator|::
name|openDocument
parameter_list|(
specifier|const
name|QUrl
modifier|&
name|url
parameter_list|)
block|{
if|if
condition|(
name|m_documentLauncher
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|detectWebBrowser
argument_list|(
name|desktopEnvironment
argument_list|()
argument_list|,
literal|false
argument_list|,
operator|&
name|m_documentLauncher
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: Unable to detect a launcher for '%s'"
argument_list|,
name|Q_FUNC_INFO
argument_list|,
name|qPrintable
argument_list|(
name|url
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
name|launch
argument_list|(
name|m_documentLauncher
argument_list|,
name|url
argument_list|)
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
