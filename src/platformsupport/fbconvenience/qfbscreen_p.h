begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QFBSCREEN_P_H
end_ifndef
begin_define
DECL|macro|QFBSCREEN_P_H
define|#
directive|define
name|QFBSCREEN_P_H
end_define
begin_include
include|#
directive|include
file|<qpa/qplatformscreen.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/QTimer>
end_include
begin_include
include|#
directive|include
file|<QtCore/QSize>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QFbWindow
name|class
name|QFbWindow
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QFbCursor
name|class
name|QFbCursor
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QPainter
name|class
name|QPainter
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QObject
name|class
name|QFbScreen
range|:
name|public
name|QObject
decl_stmt|,
name|public
name|QPlatformScreen
block|{
name|Q_OBJECT
name|public
range|:
name|QFbScreen
argument_list|()
decl_stmt|;
operator|~
name|QFbScreen
argument_list|()
expr_stmt|;
name|virtual
name|QRect
name|geometry
argument_list|()
specifier|const
block|{
return|return
name|mGeometry
return|;
block|}
name|virtual
name|int
name|depth
argument_list|()
specifier|const
block|{
return|return
name|mDepth
return|;
block|}
name|virtual
name|QImage
operator|::
name|Format
name|format
argument_list|()
specifier|const
block|{
return|return
name|mFormat
return|;
block|}
name|virtual
name|QSizeF
name|physicalSize
argument_list|()
specifier|const
block|{
return|return
name|mPhysicalSize
return|;
block|}
name|virtual
name|QWindow
modifier|*
name|topLevelAt
argument_list|(
specifier|const
name|QPoint
operator|&
name|p
argument_list|)
decl|const
decl_stmt|;
comment|// compositor api
name|virtual
name|void
name|addWindow
parameter_list|(
name|QFbWindow
modifier|*
name|window
parameter_list|)
function_decl|;
name|virtual
name|void
name|removeWindow
parameter_list|(
name|QFbWindow
modifier|*
name|window
parameter_list|)
function_decl|;
name|virtual
name|void
name|raise
parameter_list|(
name|QFbWindow
modifier|*
name|window
parameter_list|)
function_decl|;
name|virtual
name|void
name|lower
parameter_list|(
name|QFbWindow
modifier|*
name|window
parameter_list|)
function_decl|;
name|virtual
name|void
name|setDirty
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
function_decl|;
name|protected
name|slots
range|:
name|virtual
name|QRegion
name|doRedraw
argument_list|()
decl_stmt|;
name|protected
label|:
name|void
name|initializeCompositor
parameter_list|()
function_decl|;
name|QList
operator|<
name|QFbWindow
operator|*
operator|>
name|windowStack
expr_stmt|;
name|QRegion
name|repaintRegion
decl_stmt|;
name|QTimer
name|redrawTimer
decl_stmt|;
name|QFbCursor
modifier|*
name|mCursor
decl_stmt|;
name|QRect
name|mGeometry
decl_stmt|;
name|int
name|mDepth
decl_stmt|;
name|QImage
operator|::
name|Format
name|mFormat
expr_stmt|;
name|QSizeF
name|mPhysicalSize
decl_stmt|;
name|QImage
modifier|*
name|mScreenImage
decl_stmt|;
name|private
label|:
name|void
name|invalidateRectCache
parameter_list|()
block|{
name|isUpToDate
operator|=
name|false
expr_stmt|;
block|}
name|void
name|generateRects
parameter_list|()
function_decl|;
name|QPainter
modifier|*
name|mCompositePainter
decl_stmt|;
name|QList
operator|<
name|QPair
operator|<
name|QRect
operator|,
name|int
operator|>
expr|>
name|cachedRects
expr_stmt|;
name|friend
name|class
name|QFbWindow
decl_stmt|;
name|bool
name|isUpToDate
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QFBSCREEN_P_H
end_comment
end_unit
