begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qfbvthandler_p.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/QSocketNotifier>
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_LINUX
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_ANDROID
argument_list|)
operator|&&
operator|(
operator|!
name|defined
argument_list|(
name|QT_NO_EVDEV
argument_list|)
operator|||
operator|!
name|defined
argument_list|(
name|QT_NO_LIBINPUT
argument_list|)
operator|)
end_if
begin_define
DECL|macro|VTH_ENABLED
define|#
directive|define
name|VTH_ENABLED
end_define
begin_include
include|#
directive|include
file|<private/qcore_unix_p.h>
end_include
begin_include
include|#
directive|include
file|<unistd.h>
end_include
begin_include
include|#
directive|include
file|<signal.h>
end_include
begin_include
include|#
directive|include
file|<errno.h>
end_include
begin_include
include|#
directive|include
file|<fcntl.h>
end_include
begin_include
include|#
directive|include
file|<sys/signalfd.h>
end_include
begin_include
include|#
directive|include
file|<sys/ioctl.h>
end_include
begin_include
include|#
directive|include
file|<linux/kd.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|KDSKBMUTE
end_ifndef
begin_define
DECL|macro|KDSKBMUTE
define|#
directive|define
name|KDSKBMUTE
value|0x4B51
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|K_OFF
end_ifdef
begin_define
DECL|macro|KBD_OFF_MODE
define|#
directive|define
name|KBD_OFF_MODE
value|K_OFF
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|KBD_OFF_MODE
define|#
directive|define
name|KBD_OFF_MODE
value|K_RAW
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_function
name|QT_BEGIN_NAMESPACE
ifdef|#
directive|ifdef
name|VTH_ENABLED
DECL|function|setTTYCursor
specifier|static
name|void
name|setTTYCursor
parameter_list|(
name|bool
name|enable
parameter_list|)
block|{
specifier|const
name|char
modifier|*
specifier|const
name|devs
index|[]
init|=
block|{
literal|"/dev/tty0"
block|,
literal|"/dev/tty"
block|,
literal|"/dev/console"
block|,
literal|0
block|}
decl_stmt|;
name|int
name|fd
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
specifier|const
name|char
modifier|*
specifier|const
modifier|*
name|dev
init|=
name|devs
init|;
operator|*
name|dev
condition|;
operator|++
name|dev
control|)
block|{
name|fd
operator|=
name|QT_OPEN
argument_list|(
operator|*
name|dev
argument_list|,
name|O_RDWR
argument_list|)
expr_stmt|;
if|if
condition|(
name|fd
operator|!=
operator|-
literal|1
condition|)
block|{
comment|// Enable/disable screen blanking and the blinking cursor.
specifier|const
name|char
modifier|*
name|termctl
init|=
name|enable
condition|?
literal|"\033[9;15]\033[?33h\033[?25h\033[?0c"
else|:
literal|"\033[9;0]\033[?33l\033[?25l\033[?1c"
decl_stmt|;
name|QT_WRITE
argument_list|(
name|fd
argument_list|,
name|termctl
argument_list|,
name|strlen
argument_list|(
name|termctl
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
name|QT_CLOSE
argument_list|(
name|fd
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|VTH_ENABLED
end_ifdef
begin_decl_stmt
DECL|variable|vth
specifier|static
name|QFbVtHandler
modifier|*
name|vth
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|signalHandler
name|void
name|QFbVtHandler
operator|::
name|signalHandler
parameter_list|(
name|int
name|sigNo
parameter_list|)
block|{
name|char
name|a
init|=
name|sigNo
decl_stmt|;
name|QT_WRITE
argument_list|(
name|vth
operator|->
name|m_sigFd
index|[
literal|0
index|]
argument_list|,
operator|&
name|a
argument_list|,
sizeof|sizeof
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_constructor
DECL|function|QFbVtHandler
name|QFbVtHandler
operator|::
name|QFbVtHandler
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|m_tty
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|m_signalNotifier
argument_list|(
literal|0
argument_list|)
block|{
ifdef|#
directive|ifdef
name|VTH_ENABLED
if|if
condition|(
name|isatty
argument_list|(
literal|0
argument_list|)
condition|)
name|m_tty
operator|=
literal|0
expr_stmt|;
if|if
condition|(
operator|::
name|socketpair
argument_list|(
name|AF_UNIX
argument_list|,
name|SOCK_STREAM
argument_list|,
literal|0
argument_list|,
name|m_sigFd
argument_list|)
condition|)
block|{
name|qErrnoWarning
argument_list|(
name|errno
argument_list|,
literal|"QFbVtHandler: socketpair() failed"
argument_list|)
expr_stmt|;
return|return;
block|}
name|vth
operator|=
name|this
expr_stmt|;
name|setTTYCursor
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setKeyboardEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|m_signalNotifier
operator|=
operator|new
name|QSocketNotifier
argument_list|(
name|m_sigFd
index|[
literal|1
index|]
argument_list|,
name|QSocketNotifier
operator|::
name|Read
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|m_signalNotifier
argument_list|,
operator|&
name|QSocketNotifier
operator|::
name|activated
argument_list|,
name|this
argument_list|,
operator|&
name|QFbVtHandler
operator|::
name|handleSignal
argument_list|)
expr_stmt|;
name|struct
name|sigaction
name|sa
decl_stmt|;
name|sa
operator|.
name|sa_flags
operator|=
literal|0
expr_stmt|;
name|sa
operator|.
name|sa_handler
operator|=
name|signalHandler
expr_stmt|;
name|sigemptyset
argument_list|(
operator|&
name|sa
operator|.
name|sa_mask
argument_list|)
expr_stmt|;
name|sigaction
argument_list|(
name|SIGINT
argument_list|,
operator|&
name|sa
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Ctrl+C
name|sigaction
argument_list|(
name|SIGTSTP
argument_list|,
operator|&
name|sa
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Ctrl+Z
name|sigaction
argument_list|(
name|SIGCONT
argument_list|,
operator|&
name|sa
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|sigaction
argument_list|(
name|SIGTERM
argument_list|,
operator|&
name|sa
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// default signal used by kill
endif|#
directive|endif
block|}
end_constructor
begin_destructor
DECL|function|~QFbVtHandler
name|QFbVtHandler
operator|::
name|~
name|QFbVtHandler
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|VTH_ENABLED
name|setKeyboardEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setTTYCursor
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_signalNotifier
condition|)
block|{
name|close
argument_list|(
name|m_sigFd
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|m_sigFd
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_destructor
begin_function
DECL|function|setKeyboardEnabled
name|void
name|QFbVtHandler
operator|::
name|setKeyboardEnabled
parameter_list|(
name|bool
name|enable
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|VTH_ENABLED
if|if
condition|(
name|m_tty
operator|==
operator|-
literal|1
condition|)
return|return;
if|if
condition|(
name|enable
condition|)
block|{
operator|::
name|ioctl
argument_list|(
name|m_tty
argument_list|,
name|KDSKBMUTE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
operator|::
name|ioctl
argument_list|(
name|m_tty
argument_list|,
name|KDSKBMODE
argument_list|,
name|m_oldKbdMode
argument_list|)
expr_stmt|;
block|}
else|else
block|{
operator|::
name|ioctl
argument_list|(
name|m_tty
argument_list|,
name|KDGKBMODE
argument_list|,
operator|&
name|m_oldKbdMode
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|qEnvironmentVariableIntValue
argument_list|(
literal|"QT_QPA_ENABLE_TERMINAL_KEYBOARD"
argument_list|)
condition|)
block|{
operator|::
name|ioctl
argument_list|(
name|m_tty
argument_list|,
name|KDSKBMUTE
argument_list|,
literal|1
argument_list|)
expr_stmt|;
operator|::
name|ioctl
argument_list|(
name|m_tty
argument_list|,
name|KDSKBMODE
argument_list|,
name|KBD_OFF_MODE
argument_list|)
expr_stmt|;
block|}
block|}
else|#
directive|else
name|Q_UNUSED
argument_list|(
name|enable
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|handleSignal
name|void
name|QFbVtHandler
operator|::
name|handleSignal
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|VTH_ENABLED
name|m_signalNotifier
operator|->
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|char
name|sigNo
decl_stmt|;
if|if
condition|(
name|QT_READ
argument_list|(
name|m_sigFd
index|[
literal|1
index|]
argument_list|,
operator|&
name|sigNo
argument_list|,
sizeof|sizeof
argument_list|(
name|sigNo
argument_list|)
argument_list|)
operator|==
sizeof|sizeof
argument_list|(
name|sigNo
argument_list|)
condition|)
block|{
switch|switch
condition|(
name|sigNo
condition|)
block|{
case|case
name|SIGINT
case|:
comment|// fallthrough
case|case
name|SIGTERM
case|:
name|handleInt
argument_list|()
expr_stmt|;
break|break;
case|case
name|SIGTSTP
case|:
emit|emit
name|aboutToSuspend
argument_list|()
emit|;
name|setKeyboardEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setTTYCursor
argument_list|(
literal|true
argument_list|)
expr_stmt|;
operator|::
name|kill
argument_list|(
name|getpid
argument_list|()
argument_list|,
name|SIGSTOP
argument_list|)
expr_stmt|;
break|break;
case|case
name|SIGCONT
case|:
name|setTTYCursor
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setKeyboardEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
emit|emit
name|resumed
argument_list|()
emit|;
break|break;
default|default:
break|break;
block|}
block|}
name|m_signalNotifier
operator|->
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|handleInt
name|void
name|QFbVtHandler
operator|::
name|handleInt
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|VTH_ENABLED
emit|emit
name|interrupted
argument_list|()
emit|;
name|setKeyboardEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setTTYCursor
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|_exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
