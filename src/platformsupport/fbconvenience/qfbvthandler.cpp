begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qfbvthandler_p.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/QSocketNotifier>
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_LINUX
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_ANDROID
argument_list|)
operator|&&
operator|(
operator|!
name|defined
argument_list|(
name|QT_NO_EVDEV
argument_list|)
operator|||
operator|!
name|defined
argument_list|(
name|QT_NO_LIBINPUT
argument_list|)
operator|)
end_if
begin_define
DECL|macro|VTH_ENABLED
define|#
directive|define
name|VTH_ENABLED
end_define
begin_include
include|#
directive|include
file|<unistd.h>
end_include
begin_include
include|#
directive|include
file|<signal.h>
end_include
begin_include
include|#
directive|include
file|<errno.h>
end_include
begin_include
include|#
directive|include
file|<sys/signalfd.h>
end_include
begin_include
include|#
directive|include
file|<sys/ioctl.h>
end_include
begin_include
include|#
directive|include
file|<linux/kd.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|KDSKBMUTE
end_ifndef
begin_define
DECL|macro|KDSKBMUTE
define|#
directive|define
name|KDSKBMUTE
value|0x4B51
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|K_OFF
end_ifdef
begin_define
DECL|macro|KBD_OFF_MODE
define|#
directive|define
name|KBD_OFF_MODE
value|K_OFF
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|KBD_OFF_MODE
define|#
directive|define
name|KBD_OFF_MODE
value|K_RAW
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_constructor
DECL|function|QFbVtHandler
name|QFbVtHandler
operator|::
name|QFbVtHandler
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|m_tty
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|m_signalFd
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|m_signalNotifier
argument_list|(
literal|0
argument_list|)
block|{
ifdef|#
directive|ifdef
name|VTH_ENABLED
if|if
condition|(
name|isatty
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|m_tty
operator|=
literal|0
expr_stmt|;
name|ioctl
argument_list|(
name|m_tty
argument_list|,
name|KDGKBMODE
argument_list|,
operator|&
name|m_oldKbdMode
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|qEnvironmentVariableIntValue
argument_list|(
literal|"QT_QPA_ENABLE_TERMINAL_KEYBOARD"
argument_list|)
condition|)
block|{
comment|// Disable the tty keyboard.
name|ioctl
argument_list|(
name|m_tty
argument_list|,
name|KDSKBMUTE
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ioctl
argument_list|(
name|m_tty
argument_list|,
name|KDSKBMODE
argument_list|,
name|KBD_OFF_MODE
argument_list|)
expr_stmt|;
block|}
block|}
comment|// SIGSEGV and such cannot safely be blocked. We cannot handle them in an
comment|// async-safe manner either. Restoring the keyboard, video mode, etc. may
comment|// all contain calls that cannot safely be made from a signal handler.
comment|// Other signals: block them and use signalfd.
name|sigset_t
name|mask
decl_stmt|;
name|sigemptyset
argument_list|(
operator|&
name|mask
argument_list|)
expr_stmt|;
comment|// Catch Ctrl+C.
name|sigaddset
argument_list|(
operator|&
name|mask
argument_list|,
name|SIGINT
argument_list|)
expr_stmt|;
comment|// Ctrl+Z. Up to the platform plugins to handle it in a meaningful way.
name|sigaddset
argument_list|(
operator|&
name|mask
argument_list|,
name|SIGTSTP
argument_list|)
expr_stmt|;
name|sigaddset
argument_list|(
operator|&
name|mask
argument_list|,
name|SIGCONT
argument_list|)
expr_stmt|;
comment|// Default signal used by kill. To overcome the common issue of no cleaning
comment|// up when killing a locally started app via a remote session.
name|sigaddset
argument_list|(
operator|&
name|mask
argument_list|,
name|SIGTERM
argument_list|)
expr_stmt|;
name|m_signalFd
operator|=
name|signalfd
argument_list|(
operator|-
literal|1
argument_list|,
operator|&
name|mask
argument_list|,
name|SFD_CLOEXEC
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_signalFd
operator|<
literal|0
condition|)
block|{
name|qErrnoWarning
argument_list|(
name|errno
argument_list|,
literal|"signalfd() failed"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|m_signalNotifier
operator|=
operator|new
name|QSocketNotifier
argument_list|(
name|m_signalFd
argument_list|,
name|QSocketNotifier
operator|::
name|Read
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|m_signalNotifier
argument_list|,
operator|&
name|QSocketNotifier
operator|::
name|activated
argument_list|,
name|this
argument_list|,
operator|&
name|QFbVtHandler
operator|::
name|handleSignal
argument_list|)
expr_stmt|;
comment|// Block the signals that are handled via signalfd. Applies only to the current
comment|// thread, but new threads will inherit the creator's signal mask.
name|pthread_sigmask
argument_list|(
name|SIG_BLOCK
argument_list|,
operator|&
name|mask
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_constructor
begin_destructor
DECL|function|~QFbVtHandler
name|QFbVtHandler
operator|::
name|~
name|QFbVtHandler
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|VTH_ENABLED
name|restoreKeyboard
argument_list|()
expr_stmt|;
if|if
condition|(
name|m_signalFd
operator|!=
operator|-
literal|1
condition|)
name|close
argument_list|(
name|m_signalFd
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_destructor
begin_function
DECL|function|restoreKeyboard
name|void
name|QFbVtHandler
operator|::
name|restoreKeyboard
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|VTH_ENABLED
if|if
condition|(
name|m_tty
operator|==
operator|-
literal|1
condition|)
return|return;
name|ioctl
argument_list|(
name|m_tty
argument_list|,
name|KDSKBMUTE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ioctl
argument_list|(
name|m_tty
argument_list|,
name|KDSKBMODE
argument_list|,
name|m_oldKbdMode
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|// To be called from the slot connected to suspendRequested() in case the
end_comment
begin_comment
comment|// platform plugin does in fact allow suspending on Ctrl+Z.
end_comment
begin_function
DECL|function|suspend
name|void
name|QFbVtHandler
operator|::
name|suspend
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|VTH_ENABLED
name|kill
argument_list|(
name|getpid
argument_list|()
argument_list|,
name|SIGSTOP
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|handleSignal
name|void
name|QFbVtHandler
operator|::
name|handleSignal
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|VTH_ENABLED
name|m_signalNotifier
operator|->
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|signalfd_siginfo
name|sig
decl_stmt|;
if|if
condition|(
name|read
argument_list|(
name|m_signalFd
argument_list|,
operator|&
name|sig
argument_list|,
sizeof|sizeof
argument_list|(
name|sig
argument_list|)
argument_list|)
operator|==
sizeof|sizeof
argument_list|(
name|sig
argument_list|)
condition|)
block|{
switch|switch
condition|(
name|sig
operator|.
name|ssi_signo
condition|)
block|{
case|case
name|SIGINT
case|:
comment|// fallthrough
case|case
name|SIGTERM
case|:
name|handleInt
argument_list|()
expr_stmt|;
break|break;
case|case
name|SIGTSTP
case|:
emit|emit
name|suspendRequested
argument_list|()
emit|;
break|break;
case|case
name|SIGCONT
case|:
emit|emit
name|resumed
argument_list|()
emit|;
break|break;
default|default:
break|break;
block|}
block|}
name|m_signalNotifier
operator|->
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|handleInt
name|void
name|QFbVtHandler
operator|::
name|handleInt
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|VTH_ENABLED
emit|emit
name|interrupted
argument_list|()
emit|;
name|restoreKeyboard
argument_list|()
expr_stmt|;
name|_exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
