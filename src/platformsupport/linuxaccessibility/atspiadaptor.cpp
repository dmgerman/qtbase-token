begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"atspiadaptor_p.h"
end_include
begin_include
include|#
directive|include
file|<QtGui/qwindow.h>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/qapplication.h>
end_include
begin_include
include|#
directive|include
file|<qdbusmessage.h>
end_include
begin_include
include|#
directive|include
file|<qdbusreply.h>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/qwidget.h>
end_include
begin_include
include|#
directive|include
file|<qclipboard.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|"socket_interface.h"
end_include
begin_include
include|#
directive|include
file|"constant_mappings_p.h"
end_include
begin_include
include|#
directive|include
file|"application_p.h"
end_include
begin_comment
comment|/*!     \class AtSpiAdaptor     \internal      \brief AtSpiAdaptor is the main class to forward between QAccessibleInterface and AT-SPI DBus      AtSpiAdaptor implements the functions specified in all at-spi interfaces.     It sends notifications coming from Qt via dbus and listens to incoming dbus requests. */
end_comment
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_constructor
DECL|function|AtSpiAdaptor
name|AtSpiAdaptor
operator|::
name|AtSpiAdaptor
parameter_list|(
name|DBusConnection
modifier|*
name|connection
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QDBusVirtualObject
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|m_dbus
argument_list|(
name|connection
argument_list|)
member_init_list|,
name|initialized
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|sendFocus
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|sendObject
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|sendObject_active_descendant_changed
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|sendObject_attributes_changed
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|sendObject_bounds_changed
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|sendObject_children_changed
argument_list|(
literal|0
argument_list|)
comment|//    , sendObject_children_changed_add(0)
comment|//    , sendObject_children_changed_remove(0)
member_init_list|,
name|sendObject_column_deleted
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|sendObject_column_inserted
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|sendObject_column_reordered
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|sendObject_link_selected
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|sendObject_model_changed
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|sendObject_property_change
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|sendObject_property_change_accessible_description
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|sendObject_property_change_accessible_name
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|sendObject_property_change_accessible_parent
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|sendObject_property_change_accessible_role
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|sendObject_property_change_accessible_table_caption
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|sendObject_property_change_accessible_table_column_description
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|sendObject_property_change_accessible_table_column_header
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|sendObject_property_change_accessible_table_row_description
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|sendObject_property_change_accessible_table_row_header
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|sendObject_property_change_accessible_table_summary
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|sendObject_property_change_accessible_value
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|sendObject_row_deleted
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|sendObject_row_inserted
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|sendObject_row_reordered
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|sendObject_selection_changed
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|sendObject_text_attributes_changed
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|sendObject_text_bounds_changed
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|sendObject_text_caret_moved
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|sendObject_text_changed
argument_list|(
literal|0
argument_list|)
comment|//    , sendObject_text_changed_delete(0)
comment|//    , sendObject_text_changed_insert(0)
member_init_list|,
name|sendObject_text_selection_changed
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|sendObject_value_changed
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|sendObject_visible_data_changed
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|sendWindow
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|sendWindow_activate
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|sendWindow_close
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|sendWindow_create
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|sendWindow_deactivate
argument_list|(
literal|0
argument_list|)
comment|//    , sendWindow_desktop_create(0)
comment|//    , sendWindow_desktop_destroy(0)
member_init_list|,
name|sendWindow_lower
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|sendWindow_maximize
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|sendWindow_minimize
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|sendWindow_move
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|sendWindow_raise
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|sendWindow_reparent
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|sendWindow_resize
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|sendWindow_restore
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|sendWindow_restyle
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|sendWindow_shade
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|sendWindow_unshade
argument_list|(
literal|0
argument_list|)
block|{
name|m_applicationAdaptor
operator|=
operator|new
name|QSpiApplicationAdaptor
argument_list|(
name|m_dbus
operator|->
name|connection
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|m_applicationAdaptor
argument_list|,
name|SIGNAL
argument_list|(
name|windowActivated
argument_list|(
name|QObject
operator|*
argument_list|,
name|bool
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|windowActivated
argument_list|(
name|QObject
operator|*
argument_list|,
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~AtSpiAdaptor
name|AtSpiAdaptor
operator|::
name|~
name|AtSpiAdaptor
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!   Provide DBus introspection.   */
end_comment
begin_function
DECL|function|introspect
name|QString
name|AtSpiAdaptor
operator|::
name|introspect
parameter_list|(
specifier|const
name|QString
modifier|&
name|path
parameter_list|)
specifier|const
block|{
specifier|static
specifier|const
name|QLatin1String
name|accessibleIntrospection
argument_list|(
literal|"<interface name=\"org.a11y.atspi.Accessible\">\n"
literal|"<property access=\"read\" type=\"s\" name=\"Name\"/>\n"
literal|"<property access=\"read\" type=\"s\" name=\"Description\"/>\n"
literal|"<property access=\"read\" type=\"(so)\" name=\"Parent\">\n"
literal|"<annotation value=\"QSpiObjectReference\" name=\"org.qtproject.QtDBus.QtTypeName\"/>\n"
literal|"</property>\n"
literal|"<property access=\"read\" type=\"i\" name=\"ChildCount\"/>\n"
literal|"<method name=\"GetChildAtIndex\">\n"
literal|"<arg direction=\"in\" type=\"i\" name=\"index\"/>\n"
literal|"<arg direction=\"out\" type=\"(so)\"/>\n"
literal|"<annotation value=\"QSpiObjectReference\" name=\"org.qtproject.QtDBus.QtTypeName.Out0\"/>\n"
literal|"</method>\n"
literal|"<method name=\"GetChildren\">\n"
literal|"<arg direction=\"out\" type=\"a(so)\"/>\n"
literal|"<annotation value=\"QSpiObjectReferenceArray\" name=\"org.qtproject.QtDBus.QtTypeName.Out0\"/>\n"
literal|"</method>\n"
literal|"<method name=\"GetIndexInParent\">\n"
literal|"<arg direction=\"out\" type=\"i\"/>\n"
literal|"</method>\n"
literal|"<method name=\"GetRelationSet\">\n"
literal|"<arg direction=\"out\" type=\"a(ua(so))\"/>\n"
literal|"<annotation value=\"QSpiRelationArray\" name=\"org.qtproject.QtDBus.QtTypeName.Out0\"/>\n"
literal|"</method>\n"
literal|"<method name=\"GetRole\">\n"
literal|"<arg direction=\"out\" type=\"u\"/>\n"
literal|"</method>\n"
literal|"<method name=\"GetRoleName\">\n"
literal|"<arg direction=\"out\" type=\"s\"/>\n"
literal|"</method>\n"
literal|"<method name=\"GetLocalizedRoleName\">\n"
literal|"<arg direction=\"out\" type=\"s\"/>\n"
literal|"</method>\n"
literal|"<method name=\"GetState\">\n"
literal|"<arg direction=\"out\" type=\"au\"/>\n"
literal|"<annotation value=\"QSpiUIntList\" name=\"org.qtproject.QtDBus.QtTypeName.Out0\"/>\n"
literal|"</method>\n"
literal|"<method name=\"GetAttributes\">\n"
literal|"<arg direction=\"out\" type=\"a{ss}\"/>\n"
literal|"<annotation value=\"QSpiAttributeSet\" name=\"org.qtproject.QtDBus.QtTypeName.Out0\"/>\n"
literal|"</method>\n"
literal|"<method name=\"GetApplication\">\n"
literal|"<arg direction=\"out\" type=\"(so)\"/>\n"
literal|"<annotation value=\"QSpiObjectReference\" name=\"org.qtproject.QtDBus.QtTypeName.Out0\"/>\n"
literal|"</method>\n"
literal|"</interface>\n"
argument_list|)
decl_stmt|;
specifier|static
specifier|const
name|QLatin1String
name|actionIntrospection
argument_list|(
literal|"<interface name=\"org.a11y.atspi.Action\">\n"
literal|"<property access=\"read\" type=\"i\" name=\"NActions\"/>\n"
literal|"<method name=\"GetDescription\">\n"
literal|"<arg direction=\"in\" type=\"i\" name=\"index\"/>\n"
literal|"<arg direction=\"out\" type=\"s\"/>\n"
literal|"</method>\n"
literal|"<method name=\"GetName\">\n"
literal|"<arg direction=\"in\" type=\"i\" name=\"index\"/>\n"
literal|"<arg direction=\"out\" type=\"s\"/>\n"
literal|"</method>\n"
literal|"<method name=\"GetKeyBinding\">\n"
literal|"<arg direction=\"in\" type=\"i\" name=\"index\"/>\n"
literal|"<arg direction=\"out\" type=\"s\"/>\n"
literal|"</method>\n"
literal|"<method name=\"GetActions\">\n"
literal|"<arg direction=\"out\" type=\"a(sss)\" name=\"index\"/>\n"
literal|"<annotation value=\"QSpiActionArray\" name=\"org.qtproject.QtDBus.QtTypeName.Out0\"/>\n"
literal|"</method>\n"
literal|"<method name=\"DoAction\">\n"
literal|"<arg direction=\"in\" type=\"i\" name=\"index\"/>\n"
literal|"<arg direction=\"out\" type=\"b\"/>\n"
literal|"</method>\n"
literal|"</interface>\n"
argument_list|)
decl_stmt|;
specifier|static
specifier|const
name|QLatin1String
name|applicationIntrospection
argument_list|(
literal|"<interface name=\"org.a11y.atspi.Application\">\n"
literal|"<property access=\"read\" type=\"s\" name=\"ToolkitName\"/>\n"
literal|"<property access=\"read\" type=\"s\" name=\"Version\"/>\n"
literal|"<property access=\"readwrite\" type=\"i\" name=\"Id\"/>\n"
literal|"<method name=\"GetLocale\">\n"
literal|"<arg direction=\"in\" type=\"u\" name=\"lctype\"/>\n"
literal|"<arg direction=\"out\" type=\"s\"/>\n"
literal|"</method>\n"
literal|"<method name=\"GetApplicationBusAddress\">\n"
literal|"<arg direction=\"out\" type=\"s\" name=\"address\"/>\n"
literal|"</method>\n"
literal|"</interface>\n"
argument_list|)
decl_stmt|;
specifier|static
specifier|const
name|QLatin1String
name|componentIntrospection
argument_list|(
literal|"<interface name=\"org.a11y.atspi.Component\">\n"
literal|"<method name=\"Contains\">\n"
literal|"<arg direction=\"in\" type=\"i\" name=\"x\"/>\n"
literal|"<arg direction=\"in\" type=\"i\" name=\"y\"/>\n"
literal|"<arg direction=\"in\" type=\"u\" name=\"coord_type\"/>\n"
literal|"<arg direction=\"out\" type=\"b\"/>\n"
literal|"</method>\n"
literal|"<method name=\"GetAccessibleAtPoint\">\n"
literal|"<arg direction=\"in\" type=\"i\" name=\"x\"/>\n"
literal|"<arg direction=\"in\" type=\"i\" name=\"y\"/>\n"
literal|"<arg direction=\"in\" type=\"u\" name=\"coord_type\"/>\n"
literal|"<arg direction=\"out\" type=\"(so)\"/>\n"
literal|"<annotation value=\"QSpiObjectReference\" name=\"org.qtproject.QtDBus.QtTypeName.Out0\"/>\n"
literal|"</method>\n"
literal|"<method name=\"GetExtents\">\n"
literal|"<arg direction=\"in\" type=\"u\" name=\"coord_type\"/>\n"
literal|"<arg direction=\"out\" type=\"(iiii)\"/>\n"
literal|"<annotation value=\"QSpiRect\" name=\"org.qtproject.QtDBus.QtTypeName.Out0\"/>\n"
literal|"</method>\n"
literal|"<method name=\"GetPosition\">\n"
literal|"<arg direction=\"in\" type=\"u\" name=\"coord_type\"/>\n"
literal|"<arg direction=\"out\" type=\"i\" name=\"x\"/>\n"
literal|"<arg direction=\"out\" type=\"i\" name=\"y\"/>\n"
literal|"</method>\n"
literal|"<method name=\"GetSize\">\n"
literal|"<arg direction=\"out\" type=\"i\" name=\"width\"/>\n"
literal|"<arg direction=\"out\" type=\"i\" name=\"height\"/>\n"
literal|"</method>\n"
literal|"<method name=\"GetLayer\">\n"
literal|"<arg direction=\"out\" type=\"u\"/>\n"
literal|"</method>\n"
literal|"<method name=\"GetMDIZOrder\">\n"
literal|"<arg direction=\"out\" type=\"n\"/>\n"
literal|"</method>\n"
literal|"<method name=\"GrabFocus\">\n"
literal|"<arg direction=\"out\" type=\"b\"/>\n"
literal|"</method>\n"
literal|"<method name=\"GetAlpha\">\n"
literal|"<arg direction=\"out\" type=\"d\"/>\n"
literal|"</method>\n"
literal|"<method name=\"SetExtents\">\n"
literal|"<arg direction=\"in\" type=\"i\" name=\"x\"/>\n"
literal|"<arg direction=\"in\" type=\"i\" name=\"y\"/>\n"
literal|"<arg direction=\"in\" type=\"i\" name=\"width\"/>\n"
literal|"<arg direction=\"in\" type=\"i\" name=\"height\"/>\n"
literal|"<arg direction=\"in\" type=\"u\" name=\"coord_type\"/>\n"
literal|"<arg direction=\"out\" type=\"b\"/>\n"
literal|"</method>\n"
literal|"<method name=\"SetPosition\">\n"
literal|"<arg direction=\"in\" type=\"i\" name=\"x\"/>\n"
literal|"<arg direction=\"in\" type=\"i\" name=\"y\"/>\n"
literal|"<arg direction=\"in\" type=\"u\" name=\"coord_type\"/>\n"
literal|"<arg direction=\"out\" type=\"b\"/>\n"
literal|"</method>\n"
literal|"<method name=\"SetSize\">\n"
literal|"<arg direction=\"in\" type=\"i\" name=\"width\"/>\n"
literal|"<arg direction=\"in\" type=\"i\" name=\"height\"/>\n"
literal|"<arg direction=\"out\" type=\"b\"/>\n"
literal|"</method>\n"
literal|"</interface>\n"
argument_list|)
decl_stmt|;
specifier|static
specifier|const
name|QLatin1String
name|editableTextIntrospection
argument_list|(
literal|"<interface name=\"org.a11y.atspi.EditableText\">\n"
literal|"<method name=\"SetTextContents\">\n"
literal|"<arg direction=\"in\" type=\"s\" name=\"newContents\"/>\n"
literal|"<arg direction=\"out\" type=\"b\"/>\n"
literal|"</method>\n"
literal|"<method name=\"InsertText\">\n"
literal|"<arg direction=\"in\" type=\"i\" name=\"position\"/>\n"
literal|"<arg direction=\"in\" type=\"s\" name=\"text\"/>\n"
literal|"<arg direction=\"in\" type=\"i\" name=\"length\"/>\n"
literal|"<arg direction=\"out\" type=\"b\"/>\n"
literal|"</method>\n"
literal|"<method name=\"CopyText\">\n"
literal|"<arg direction=\"in\" type=\"i\" name=\"startPos\"/>\n"
literal|"<arg direction=\"in\" type=\"i\" name=\"endPos\"/>\n"
literal|"</method>\n"
literal|"<method name=\"CutText\">\n"
literal|"<arg direction=\"in\" type=\"i\" name=\"startPos\"/>\n"
literal|"<arg direction=\"in\" type=\"i\" name=\"endPos\"/>\n"
literal|"<arg direction=\"out\" type=\"b\"/>\n"
literal|"</method>\n"
literal|"<method name=\"DeleteText\">\n"
literal|"<arg direction=\"in\" type=\"i\" name=\"startPos\"/>\n"
literal|"<arg direction=\"in\" type=\"i\" name=\"endPos\"/>\n"
literal|"<arg direction=\"out\" type=\"b\"/>\n"
literal|"</method>\n"
literal|"<method name=\"PasteText\">\n"
literal|"<arg direction=\"in\" type=\"i\" name=\"position\"/>\n"
literal|"<arg direction=\"out\" type=\"b\"/>\n"
literal|"</method>\n"
literal|"</interface>\n"
argument_list|)
decl_stmt|;
specifier|static
specifier|const
name|QLatin1String
name|tableIntrospection
argument_list|(
literal|"<interface name=\"org.a11y.atspi.Table\">\n"
literal|"<property access=\"read\" type=\"i\" name=\"NRows\"/>\n"
literal|"<property access=\"read\" type=\"i\" name=\"NColumns\"/>\n"
literal|"<property access=\"read\" type=\"(so)\" name=\"Caption\">\n"
literal|"<annotation value=\"QSpiObjectReference\" name=\"org.qtproject.QtDBus.QtTypeName\"/>\n"
literal|"</property>\n"
literal|"<property access=\"read\" type=\"(so)\" name=\"Summary\">\n"
literal|"<annotation value=\"QSpiObjectReference\" name=\"org.qtproject.QtDBus.QtTypeName\"/>\n"
literal|"</property>\n"
literal|"<property access=\"read\" type=\"i\" name=\"NSelectedRows\"/>\n"
literal|"<property access=\"read\" type=\"i\" name=\"NSelectedColumns\"/>\n"
literal|"<method name=\"GetAccessibleAt\">\n"
literal|"<arg direction=\"in\" type=\"i\" name=\"row\"/>\n"
literal|"<arg direction=\"in\" type=\"i\" name=\"column\"/>\n"
literal|"<arg direction=\"out\" type=\"(so)\"/>\n"
literal|"<annotation value=\"QSpiObjectReference\" name=\"org.qtproject.QtDBus.QtTypeName.Out0\"/>\n"
literal|"</method>\n"
literal|"<method name=\"GetIndexAt\">\n"
literal|"<arg direction=\"in\" type=\"i\" name=\"row\"/>\n"
literal|"<arg direction=\"in\" type=\"i\" name=\"column\"/>\n"
literal|"<arg direction=\"out\" type=\"i\"/>\n"
literal|"</method>\n"
literal|"<method name=\"GetRowAtIndex\">\n"
literal|"<arg direction=\"in\" type=\"i\" name=\"index\"/>\n"
literal|"<arg direction=\"out\" type=\"i\"/>\n"
literal|"</method>\n"
literal|"<method name=\"GetColumnAtIndex\">\n"
literal|"<arg direction=\"in\" type=\"i\" name=\"index\"/>\n"
literal|"<arg direction=\"out\" type=\"i\"/>\n"
literal|"</method>\n"
literal|"<method name=\"GetRowDescription\">\n"
literal|"<arg direction=\"in\" type=\"i\" name=\"row\"/>\n"
literal|"<arg direction=\"out\" type=\"s\"/>\n"
literal|"</method>\n"
literal|"<method name=\"GetColumnDescription\">\n"
literal|"<arg direction=\"in\" type=\"i\" name=\"column\"/>\n"
literal|"<arg direction=\"out\" type=\"s\"/>\n"
literal|"</method>\n"
literal|"<method name=\"GetRowExtentAt\">\n"
literal|"<arg direction=\"in\" type=\"i\" name=\"row\"/>\n"
literal|"<arg direction=\"in\" type=\"i\" name=\"column\"/>\n"
literal|"<arg direction=\"out\" type=\"i\"/>\n"
literal|"</method>\n"
literal|"<method name=\"GetColumnExtentAt\">\n"
literal|"<arg direction=\"in\" type=\"i\" name=\"row\"/>\n"
literal|"<arg direction=\"in\" type=\"i\" name=\"column\"/>\n"
literal|"<arg direction=\"out\" type=\"i\"/>\n"
literal|"</method>\n"
literal|"<method name=\"GetRowHeader\">\n"
literal|"<arg direction=\"in\" type=\"i\" name=\"row\"/>\n"
literal|"<arg direction=\"out\" type=\"(so)\"/>\n"
literal|"<annotation value=\"QSpiObjectReference\" name=\"org.qtproject.QtDBus.QtTypeName.Out0\"/>\n"
literal|"</method>\n"
literal|"<method name=\"GetColumnHeader\">\n"
literal|"<arg direction=\"in\" type=\"i\" name=\"column\"/>\n"
literal|"<arg direction=\"out\" type=\"(so)\"/>\n"
literal|"<annotation value=\"QSpiObjectReference\" name=\"org.qtproject.QtDBus.QtTypeName.Out0\"/>\n"
literal|"</method>\n"
literal|"<method name=\"GetSelectedRows\">\n"
literal|"<arg direction=\"out\" type=\"ai\"/>\n"
literal|"<annotation value=\"QSpiIntList\" name=\"org.qtproject.QtDBus.QtTypeName.Out0\"/>\n"
literal|"</method>\n"
literal|"<method name=\"GetSelectedColumns\">\n"
literal|"<arg direction=\"out\" type=\"ai\"/>\n"
literal|"<annotation value=\"QSpiIntList\" name=\"org.qtproject.QtDBus.QtTypeName.Out0\"/>\n"
literal|"</method>\n"
literal|"<method name=\"IsRowSelected\">\n"
literal|"<arg direction=\"in\" type=\"i\" name=\"row\"/>\n"
literal|"<arg direction=\"out\" type=\"b\"/>\n"
literal|"</method>\n"
literal|"<method name=\"IsColumnSelected\">\n"
literal|"<arg direction=\"in\" type=\"i\" name=\"column\"/>\n"
literal|"<arg direction=\"out\" type=\"b\"/>\n"
literal|"</method>\n"
literal|"<method name=\"IsSelected\">\n"
literal|"<arg direction=\"in\" type=\"i\" name=\"row\"/>\n"
literal|"<arg direction=\"in\" type=\"i\" name=\"column\"/>\n"
literal|"<arg direction=\"out\" type=\"b\"/>\n"
literal|"</method>\n"
literal|"<method name=\"AddRowSelection\">\n"
literal|"<arg direction=\"in\" type=\"i\" name=\"row\"/>\n"
literal|"<arg direction=\"out\" type=\"b\"/>\n"
literal|"</method>\n"
literal|"<method name=\"AddColumnSelection\">\n"
literal|"<arg direction=\"in\" type=\"i\" name=\"column\"/>\n"
literal|"<arg direction=\"out\" type=\"b\"/>\n"
literal|"</method>\n"
literal|"<method name=\"RemoveRowSelection\">\n"
literal|"<arg direction=\"in\" type=\"i\" name=\"row\"/>\n"
literal|"<arg direction=\"out\" type=\"b\"/>\n"
literal|"</method>\n"
literal|"<method name=\"RemoveColumnSelection\">\n"
literal|"<arg direction=\"in\" type=\"i\" name=\"column\"/>\n"
literal|"<arg direction=\"out\" type=\"b\"/>\n"
literal|"</method>\n"
literal|"<method name=\"GetRowColumnExtentsAtIndex\">\n"
literal|"<arg direction=\"in\" type=\"i\" name=\"index\"/>\n"
literal|"<arg direction=\"out\" type=\"b\"/>\n"
literal|"<arg direction=\"out\" type=\"i\" name=\"row\"/>\n"
literal|"<arg direction=\"out\" type=\"i\" name=\"col\"/>\n"
literal|"<arg direction=\"out\" type=\"i\" name=\"row_extents\"/>\n"
literal|"<arg direction=\"out\" type=\"i\" name=\"col_extents\"/>\n"
literal|"<arg direction=\"out\" type=\"b\" name=\"is_selected\"/>\n"
literal|"</method>\n"
literal|"</interface>\n"
argument_list|)
decl_stmt|;
specifier|static
specifier|const
name|QLatin1String
name|textIntrospection
argument_list|(
literal|"<interface name=\"org.a11y.atspi.Text\">\n"
literal|"<property access=\"read\" type=\"i\" name=\"CharacterCount\"/>\n"
literal|"<property access=\"read\" type=\"i\" name=\"CaretOffset\"/>\n"
literal|"<method name=\"GetText\">\n"
literal|"<arg direction=\"in\" type=\"i\" name=\"startOffset\"/>\n"
literal|"<arg direction=\"in\" type=\"i\" name=\"endOffset\"/>\n"
literal|"<arg direction=\"out\" type=\"s\"/>\n"
literal|"</method>\n"
literal|"<method name=\"SetCaretOffset\">\n"
literal|"<arg direction=\"in\" type=\"i\" name=\"offset\"/>\n"
literal|"<arg direction=\"out\" type=\"b\"/>\n"
literal|"</method>\n"
literal|"<method name=\"GetTextBeforeOffset\">\n"
literal|"<arg direction=\"in\" type=\"i\" name=\"offset\"/>\n"
literal|"<arg direction=\"in\" type=\"u\" name=\"type\"/>\n"
literal|"<arg direction=\"out\" type=\"s\"/>\n"
literal|"<arg direction=\"out\" type=\"i\" name=\"startOffset\"/>\n"
literal|"<arg direction=\"out\" type=\"i\" name=\"endOffset\"/>\n"
literal|"</method>\n"
literal|"<method name=\"GetTextAtOffset\">\n"
literal|"<arg direction=\"in\" type=\"i\" name=\"offset\"/>\n"
literal|"<arg direction=\"in\" type=\"u\" name=\"type\"/>\n"
literal|"<arg direction=\"out\" type=\"s\"/>\n"
literal|"<arg direction=\"out\" type=\"i\" name=\"startOffset\"/>\n"
literal|"<arg direction=\"out\" type=\"i\" name=\"endOffset\"/>\n"
literal|"</method>\n"
literal|"<method name=\"GetTextAfterOffset\">\n"
literal|"<arg direction=\"in\" type=\"i\" name=\"offset\"/>\n"
literal|"<arg direction=\"in\" type=\"u\" name=\"type\"/>\n"
literal|"<arg direction=\"out\" type=\"s\"/>\n"
literal|"<arg direction=\"out\" type=\"i\" name=\"startOffset\"/>\n"
literal|"<arg direction=\"out\" type=\"i\" name=\"endOffset\"/>\n"
literal|"</method>\n"
literal|"<method name=\"GetCharacterAtOffset\">\n"
literal|"<arg direction=\"in\" type=\"i\" name=\"offset\"/>\n"
literal|"<arg direction=\"out\" type=\"i\"/>\n"
literal|"</method>\n"
literal|"<method name=\"GetAttributeValue\">\n"
literal|"<arg direction=\"in\" type=\"i\" name=\"offset\"/>\n"
literal|"<arg direction=\"in\" type=\"s\" name=\"attributeName\"/>\n"
literal|"<arg direction=\"out\" type=\"s\"/>\n"
literal|"<arg direction=\"out\" type=\"i\" name=\"startOffset\"/>\n"
literal|"<arg direction=\"out\" type=\"i\" name=\"endOffset\"/>\n"
literal|"<arg direction=\"out\" type=\"b\" name=\"defined\"/>\n"
literal|"</method>\n"
literal|"<method name=\"GetAttributes\">\n"
literal|"<arg direction=\"in\" type=\"i\" name=\"offset\"/>\n"
literal|"<arg direction=\"out\" type=\"a{ss}\"/>\n"
literal|"<arg direction=\"out\" type=\"i\" name=\"startOffset\"/>\n"
literal|"<arg direction=\"out\" type=\"i\" name=\"endOffset\"/>\n"
literal|"<annotation value=\"QSpiAttributeSet\" name=\"org.qtproject.QtDBus.QtTypeName.Out0\"/>\n"
literal|"</method>\n"
literal|"<method name=\"GetDefaultAttributes\">\n"
literal|"<arg direction=\"out\" type=\"a{ss}\"/>\n"
literal|"<annotation value=\"QSpiAttributeSet\" name=\"org.qtproject.QtDBus.QtTypeName.Out0\"/>\n"
literal|"</method>\n"
literal|"<method name=\"GetCharacterExtents\">\n"
literal|"<arg direction=\"in\" type=\"i\" name=\"offset\"/>\n"
literal|"<arg direction=\"out\" type=\"i\" name=\"x\"/>\n"
literal|"<arg direction=\"out\" type=\"i\" name=\"y\"/>\n"
literal|"<arg direction=\"out\" type=\"i\" name=\"width\"/>\n"
literal|"<arg direction=\"out\" type=\"i\" name=\"height\"/>\n"
literal|"<arg direction=\"in\" type=\"u\" name=\"coordType\"/>\n"
literal|"</method>\n"
literal|"<method name=\"GetOffsetAtPoint\">\n"
literal|"<arg direction=\"in\" type=\"i\" name=\"x\"/>\n"
literal|"<arg direction=\"in\" type=\"i\" name=\"y\"/>\n"
literal|"<arg direction=\"in\" type=\"u\" name=\"coordType\"/>\n"
literal|"<arg direction=\"out\" type=\"i\"/>\n"
literal|"</method>\n"
literal|"<method name=\"GetNSelections\">\n"
literal|"<arg direction=\"out\" type=\"i\"/>\n"
literal|"<method name=\"GetSelection\">\n"
literal|"<arg direction=\"in\" type=\"i\" name=\"selectionNum\"/>\n"
literal|"<arg direction=\"out\" type=\"i\" name=\"startOffset\"/>\n"
literal|"<arg direction=\"out\" type=\"i\" name=\"endOffset\"/>\n"
literal|"</method>\n"
literal|"<method name=\"AddSelection\">\n"
literal|"<arg direction=\"in\" type=\"i\" name=\"startOffset\"/>\n"
literal|"<arg direction=\"in\" type=\"i\" name=\"endOffset\"/>\n"
literal|"<arg direction=\"out\" type=\"b\"/>\n"
literal|"</method>\n"
literal|"<method name=\"RemoveSelection\">\n"
literal|"<arg direction=\"in\" type=\"i\" name=\"selectionNum\"/>\n"
literal|"<arg direction=\"out\" type=\"b\"/>\n"
literal|"</method>\n"
literal|"<method name=\"SetSelection\">\n"
literal|"<arg direction=\"in\" type=\"i\" name=\"selectionNum\"/>\n"
literal|"<arg direction=\"in\" type=\"i\" name=\"startOffset\"/>\n"
literal|"<arg direction=\"in\" type=\"i\" name=\"endOffset\"/>\n"
literal|"<arg direction=\"out\" type=\"b\"/>\n"
literal|"</method>\n"
literal|"<method name=\"GetRangeExtents\">\n"
literal|"<arg direction=\"in\" type=\"i\" name=\"startOffset\"/>\n"
literal|"<arg direction=\"in\" type=\"i\" name=\"endOffset\"/>\n"
literal|"<arg direction=\"out\" type=\"i\" name=\"x\"/>\n"
literal|"<arg direction=\"out\" type=\"i\" name=\"y\"/>\n"
literal|"<arg direction=\"out\" type=\"i\" name=\"width\"/>\n"
literal|"<arg direction=\"out\" type=\"i\" name=\"height\"/>\n"
literal|"<arg direction=\"in\" type=\"u\" name=\"coordType\"/>\n"
literal|"</method>\n"
literal|"<method name=\"GetBoundedRanges\">\n"
literal|"<arg direction=\"in\" type=\"i\" name=\"x\"/>\n"
literal|"<arg direction=\"in\" type=\"i\" name=\"y\"/>\n"
literal|"<arg direction=\"in\" type=\"i\" name=\"width\"/>\n"
literal|"<arg direction=\"in\" type=\"i\" name=\"height\"/>\n"
literal|"<arg direction=\"in\" type=\"u\" name=\"coordType\"/>\n"
literal|"<arg direction=\"in\" type=\"u\" name=\"xClipType\"/>\n"
literal|"<arg direction=\"in\" type=\"u\" name=\"yClipType\"/>\n"
literal|"<arg direction=\"out\" type=\"a(iisv)\"/>\n"
literal|"<annotation value=\"QSpiRangeList\" name=\"org.qtproject.QtDBus.QtTypeName.Out0\"/>\n"
literal|"</method>\n"
literal|"<method name=\"GetAttributeRun\">\n"
literal|"<arg direction=\"in\" type=\"i\" name=\"offset\"/>\n"
literal|"<arg direction=\"in\" type=\"b\" name=\"includeDefaults\"/>\n"
literal|"<arg direction=\"out\" type=\"a{ss}\"/>\n"
literal|"<arg direction=\"out\" type=\"i\" name=\"startOffset\"/>\n"
literal|"<arg direction=\"out\" type=\"i\" name=\"endOffset\"/>\n"
literal|"<annotation value=\"QSpiAttributeSet\" name=\"org.qtproject.QtDBus.QtTypeName.Out0\"/>\n"
literal|"</method>\n"
literal|"<method name=\"GetDefaultAttributeSet\">\n"
literal|"<arg direction=\"out\" type=\"a{ss}\"/>\n"
literal|"<annotation value=\"QSpiAttributeSet\" name=\"org.qtproject.QtDBus.QtTypeName.Out0\"/>\n"
literal|"</method>\n"
literal|"</interface>\n"
argument_list|)
decl_stmt|;
specifier|static
specifier|const
name|QLatin1String
name|valueIntrospection
argument_list|(
literal|"<interface name=\"org.a11y.atspi.Value\">\n"
literal|"<property access=\"read\" type=\"d\" name=\"MinimumValue\"/>\n"
literal|"<property access=\"read\" type=\"d\" name=\"MaximumValue\"/>\n"
literal|"<property access=\"read\" type=\"d\" name=\"MinimumIncrement\"/>\n"
literal|"<property access=\"readwrite\" type=\"d\" name=\"CurrentValue\"/>\n"
literal|"<method name=\"SetCurrentValue\">\n"
literal|"<arg direction=\"in\" type=\"d\" name=\"value\"/>\n"
literal|"</method>\n"
literal|"</interface>\n"
argument_list|)
decl_stmt|;
name|QAIPointer
name|interface
init|=
name|interfaceFromPath
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|interface
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"WARNING Qt AtSpiAdaptor: Could not find accessible on path: "
operator|<<
name|path
expr_stmt|;
return|return
name|QString
argument_list|()
return|;
block|}
name|QStringList
name|interfaces
init|=
name|accessibleInterfaces
argument_list|(
name|interface
argument_list|)
decl_stmt|;
name|QString
name|xml
decl_stmt|;
name|xml
operator|.
name|append
argument_list|(
name|accessibleIntrospection
argument_list|)
expr_stmt|;
if|if
condition|(
name|interfaces
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
name|ATSPI_DBUS_INTERFACE_COMPONENT
argument_list|)
argument_list|)
condition|)
name|xml
operator|.
name|append
argument_list|(
name|componentIntrospection
argument_list|)
expr_stmt|;
if|if
condition|(
name|interfaces
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
name|ATSPI_DBUS_INTERFACE_TEXT
argument_list|)
argument_list|)
condition|)
name|xml
operator|.
name|append
argument_list|(
name|textIntrospection
argument_list|)
expr_stmt|;
if|if
condition|(
name|interfaces
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
name|ATSPI_DBUS_INTERFACE_EDITABLE_TEXT
argument_list|)
argument_list|)
condition|)
name|xml
operator|.
name|append
argument_list|(
name|editableTextIntrospection
argument_list|)
expr_stmt|;
if|if
condition|(
name|interfaces
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
name|ATSPI_DBUS_INTERFACE_ACTION
argument_list|)
argument_list|)
condition|)
name|xml
operator|.
name|append
argument_list|(
name|actionIntrospection
argument_list|)
expr_stmt|;
if|if
condition|(
name|interfaces
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
name|ATSPI_DBUS_INTERFACE_TABLE
argument_list|)
argument_list|)
condition|)
name|xml
operator|.
name|append
argument_list|(
name|tableIntrospection
argument_list|)
expr_stmt|;
if|if
condition|(
name|interfaces
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
name|ATSPI_DBUS_INTERFACE_VALUE
argument_list|)
argument_list|)
condition|)
name|xml
operator|.
name|append
argument_list|(
name|valueIntrospection
argument_list|)
expr_stmt|;
if|if
condition|(
name|path
operator|==
name|QLatin1String
argument_list|(
name|QSPI_OBJECT_PATH_ROOT
argument_list|)
condition|)
name|xml
operator|.
name|append
argument_list|(
name|applicationIntrospection
argument_list|)
expr_stmt|;
return|return
name|xml
return|;
block|}
end_function
begin_comment
comment|/*!   When initialized we will send updates, not before this.    This function also checks which event listeners are registered in the at-spi registry.   */
end_comment
begin_function
DECL|function|setInitialized
name|void
name|AtSpiAdaptor
operator|::
name|setInitialized
parameter_list|(
name|bool
name|init
parameter_list|)
block|{
name|initialized
operator|=
name|init
expr_stmt|;
if|if
condition|(
operator|!
name|initialized
condition|)
return|return;
name|updateEventListeners
argument_list|()
expr_stmt|;
name|bool
name|success
init|=
name|m_dbus
operator|->
name|connection
argument_list|()
operator|.
name|connect
argument_list|(
name|QLatin1String
argument_list|(
literal|"org.a11y.atspi.Registry"
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"/org/a11y/atspi/registry"
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"org.a11y.atspi.Registry"
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"EventListenerRegistered"
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|eventListenerRegistered
argument_list|(
name|QString
argument_list|,
name|QString
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|success
operator|=
name|success
operator|&&
name|m_dbus
operator|->
name|connection
argument_list|()
operator|.
name|connect
argument_list|(
name|QLatin1String
argument_list|(
literal|"org.a11y.atspi.Registry"
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"/org/a11y/atspi/registry"
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"org.a11y.atspi.Registry"
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"EventListenerDeregistered"
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|eventListenerDeregistered
argument_list|(
name|QString
argument_list|,
name|QString
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_ATSPI_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"Registered event listener change listener: "
operator|<<
name|success
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|setBitFlag
name|void
name|AtSpiAdaptor
operator|::
name|setBitFlag
parameter_list|(
specifier|const
name|QString
modifier|&
name|flag
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|flag
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// assume we don't get nonsense - look at first letter only
switch|switch
condition|(
name|flag
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toLower
argument_list|()
operator|.
name|toLatin1
argument_list|()
condition|)
block|{
case|case
literal|'o'
case|:
block|{
if|if
condition|(
name|flag
operator|.
name|size
argument_list|()
operator|<=
literal|8
condition|)
block|{
comment|// Object::
name|sendObject
operator|=
literal|1
expr_stmt|;
block|}
else|else
block|{
comment|// Object:Foo:Bar
name|QString
name|right
init|=
name|flag
operator|.
name|mid
argument_list|(
literal|7
argument_list|)
decl_stmt|;
if|if
condition|(
literal|false
condition|)
block|{             }
elseif|else
if|if
condition|(
name|right
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"ActiveDescendantChanged"
argument_list|)
argument_list|)
condition|)
block|{
name|sendObject_active_descendant_changed
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|right
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"AttributesChanged"
argument_list|)
argument_list|)
condition|)
block|{
name|sendObject_attributes_changed
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|right
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"BoundsChanged"
argument_list|)
argument_list|)
condition|)
block|{
name|sendObject_bounds_changed
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|right
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"ChildrenChanged"
argument_list|)
argument_list|)
condition|)
block|{
name|sendObject_children_changed
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|right
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"ColumnDeleted"
argument_list|)
argument_list|)
condition|)
block|{
name|sendObject_column_deleted
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|right
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"ColumnInserted"
argument_list|)
argument_list|)
condition|)
block|{
name|sendObject_column_inserted
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|right
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"ColumnReordered"
argument_list|)
argument_list|)
condition|)
block|{
name|sendObject_column_reordered
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|right
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"LinkSelected"
argument_list|)
argument_list|)
condition|)
block|{
name|sendObject_link_selected
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|right
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"ModelChanged"
argument_list|)
argument_list|)
condition|)
block|{
name|sendObject_model_changed
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|right
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"PropertyChange"
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|right
operator|==
name|QLatin1String
argument_list|(
literal|"PropertyChange:AccessibleDescription"
argument_list|)
condition|)
block|{
name|sendObject_property_change_accessible_description
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|right
operator|==
name|QLatin1String
argument_list|(
literal|"PropertyChange:AccessibleName"
argument_list|)
condition|)
block|{
name|sendObject_property_change_accessible_name
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|right
operator|==
name|QLatin1String
argument_list|(
literal|"PropertyChange:AccessibleParent"
argument_list|)
condition|)
block|{
name|sendObject_property_change_accessible_parent
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|right
operator|==
name|QLatin1String
argument_list|(
literal|"PropertyChange:AccessibleRole"
argument_list|)
condition|)
block|{
name|sendObject_property_change_accessible_role
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|right
operator|==
name|QLatin1String
argument_list|(
literal|"PropertyChange:TableCaption"
argument_list|)
condition|)
block|{
name|sendObject_property_change_accessible_table_caption
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|right
operator|==
name|QLatin1String
argument_list|(
literal|"PropertyChange:TableColumnDescription"
argument_list|)
condition|)
block|{
name|sendObject_property_change_accessible_table_column_description
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|right
operator|==
name|QLatin1String
argument_list|(
literal|"PropertyChange:TableColumnHeader"
argument_list|)
condition|)
block|{
name|sendObject_property_change_accessible_table_column_header
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|right
operator|==
name|QLatin1String
argument_list|(
literal|"PropertyChange:TableRowDescription"
argument_list|)
condition|)
block|{
name|sendObject_property_change_accessible_table_row_description
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|right
operator|==
name|QLatin1String
argument_list|(
literal|"PropertyChange:TableRowHeader"
argument_list|)
condition|)
block|{
name|sendObject_property_change_accessible_table_row_header
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|right
operator|==
name|QLatin1String
argument_list|(
literal|"PropertyChange:TableSummary"
argument_list|)
condition|)
block|{
name|sendObject_property_change_accessible_table_summary
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|right
operator|==
name|QLatin1String
argument_list|(
literal|"PropertyChange:AccessibleValue"
argument_list|)
condition|)
block|{
name|sendObject_property_change_accessible_value
operator|=
literal|1
expr_stmt|;
block|}
else|else
block|{
name|sendObject_property_change
operator|=
literal|1
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|right
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"RowDeleted"
argument_list|)
argument_list|)
condition|)
block|{
name|sendObject_row_deleted
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|right
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"RowInserted"
argument_list|)
argument_list|)
condition|)
block|{
name|sendObject_row_inserted
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|right
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"RowReordered"
argument_list|)
argument_list|)
condition|)
block|{
name|sendObject_row_reordered
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|right
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"SelectionChanged"
argument_list|)
argument_list|)
condition|)
block|{
name|sendObject_selection_changed
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|right
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"StateChanged"
argument_list|)
argument_list|)
condition|)
block|{
name|sendObject_state_changed
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|right
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"TextAttributesChanged"
argument_list|)
argument_list|)
condition|)
block|{
name|sendObject_text_attributes_changed
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|right
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"TextBoundsChanged"
argument_list|)
argument_list|)
condition|)
block|{
name|sendObject_text_bounds_changed
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|right
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"TextCaretMoved"
argument_list|)
argument_list|)
condition|)
block|{
name|sendObject_text_caret_moved
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|right
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"TextChanged"
argument_list|)
argument_list|)
condition|)
block|{
name|sendObject_text_changed
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|right
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"TextSelectionChanged"
argument_list|)
argument_list|)
condition|)
block|{
name|sendObject_text_selection_changed
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|right
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"ValueChanged"
argument_list|)
argument_list|)
condition|)
block|{
name|sendObject_value_changed
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|right
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"VisibleDataChanged"
argument_list|)
argument_list|)
condition|)
block|{
name|sendObject_visible_data_changed
operator|=
literal|1
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|()
operator|<<
literal|"WARNING: subscription string not handled:"
operator|<<
name|flag
expr_stmt|;
block|}
block|}
break|break;
block|}
case|case
literal|'w'
case|:
block|{
comment|// window
if|if
condition|(
name|flag
operator|.
name|size
argument_list|()
operator|<=
literal|8
condition|)
block|{
name|sendWindow
operator|=
literal|1
expr_stmt|;
block|}
else|else
block|{
comment|// object:Foo:Bar
name|QString
name|right
init|=
name|flag
operator|.
name|mid
argument_list|(
literal|7
argument_list|)
decl_stmt|;
if|if
condition|(
literal|false
condition|)
block|{             }
elseif|else
if|if
condition|(
name|right
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"Activate"
argument_list|)
argument_list|)
condition|)
block|{
name|sendWindow_activate
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|right
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"Close"
argument_list|)
argument_list|)
condition|)
block|{
name|sendWindow_close
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|right
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"Create"
argument_list|)
argument_list|)
condition|)
block|{
name|sendWindow_create
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|right
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"Deactivate"
argument_list|)
argument_list|)
condition|)
block|{
name|sendWindow_deactivate
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|right
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"Lower"
argument_list|)
argument_list|)
condition|)
block|{
name|sendWindow_lower
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|right
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"Maximize"
argument_list|)
argument_list|)
condition|)
block|{
name|sendWindow_maximize
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|right
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"Minimize"
argument_list|)
argument_list|)
condition|)
block|{
name|sendWindow_minimize
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|right
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"Move"
argument_list|)
argument_list|)
condition|)
block|{
name|sendWindow_move
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|right
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"Raise"
argument_list|)
argument_list|)
condition|)
block|{
name|sendWindow_raise
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|right
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"Reparent"
argument_list|)
argument_list|)
condition|)
block|{
name|sendWindow_reparent
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|right
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"Resize"
argument_list|)
argument_list|)
condition|)
block|{
name|sendWindow_resize
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|right
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"Restore"
argument_list|)
argument_list|)
condition|)
block|{
name|sendWindow_restore
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|right
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"Restyle"
argument_list|)
argument_list|)
condition|)
block|{
name|sendWindow_restyle
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|right
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"Shade"
argument_list|)
argument_list|)
condition|)
block|{
name|sendWindow_shade
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|right
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unshade"
argument_list|)
argument_list|)
condition|)
block|{
name|sendWindow_unshade
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|right
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"DesktopCreate"
argument_list|)
argument_list|)
condition|)
block|{
comment|// ignore this one
block|}
elseif|else
if|if
condition|(
name|right
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"DesktopDestroy"
argument_list|)
argument_list|)
condition|)
block|{
comment|// ignore this one
block|}
else|else
block|{
name|qWarning
argument_list|()
operator|<<
literal|"WARNING: subscription string not handled:"
operator|<<
name|flag
expr_stmt|;
block|}
block|}
break|break;
block|}
case|case
literal|'f'
case|:
block|{
name|sendFocus
operator|=
literal|1
expr_stmt|;
break|break;
block|}
case|case
literal|'d'
case|:
block|{
comment|// document is not implemented
break|break;
block|}
case|case
literal|'t'
case|:
block|{
comment|// terminal is not implemented
break|break;
block|}
case|case
literal|'m'
case|:
block|{
comment|// mouse* is handled in a different way by the gnome atspi stack
break|break;
block|}
default|default:
name|qWarning
argument_list|()
operator|<<
literal|"WARNING: subscription string not handled:"
operator|<<
name|flag
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!   Checks via dbus which events should be sent.   */
end_comment
begin_function
DECL|function|updateEventListeners
name|void
name|AtSpiAdaptor
operator|::
name|updateEventListeners
parameter_list|()
block|{
name|QDBusMessage
name|m
init|=
name|QDBusMessage
operator|::
name|createMethodCall
argument_list|(
name|QLatin1String
argument_list|(
literal|"org.a11y.atspi.Registry"
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"/org/a11y/atspi/registry"
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"org.a11y.atspi.Registry"
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"GetRegisteredEvents"
argument_list|)
argument_list|)
decl_stmt|;
name|QDBusReply
argument_list|<
name|QSpiEventListenerArray
argument_list|>
name|listenersReply
init|=
name|m_dbus
operator|->
name|connection
argument_list|()
operator|.
name|call
argument_list|(
name|m
argument_list|)
decl_stmt|;
if|if
condition|(
name|listenersReply
operator|.
name|isValid
argument_list|()
condition|)
block|{
specifier|const
name|QSpiEventListenerArray
name|evList
init|=
name|listenersReply
operator|.
name|value
argument_list|()
decl_stmt|;
name|Q_FOREACH
argument_list|(
argument|const QSpiEventListener&ev
argument_list|,
argument|evList
argument_list|)
block|{
name|setBitFlag
argument_list|(
name|ev
operator|.
name|eventName
argument_list|)
expr_stmt|;
block|}
name|m_applicationAdaptor
operator|->
name|sendEvents
argument_list|(
operator|!
name|evList
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|()
operator|<<
literal|"Could not query active accessibility event listeners."
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|eventListenerDeregistered
name|void
name|AtSpiAdaptor
operator|::
name|eventListenerDeregistered
parameter_list|(
specifier|const
name|QString
modifier|&
comment|/*bus*/
parameter_list|,
specifier|const
name|QString
modifier|&
comment|/*path*/
parameter_list|)
block|{
comment|//    qDebug()<< "AtSpiAdaptor::eventListenerDeregistered: "<< bus<< path;
name|updateEventListeners
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|eventListenerRegistered
name|void
name|AtSpiAdaptor
operator|::
name|eventListenerRegistered
parameter_list|(
specifier|const
name|QString
modifier|&
comment|/*bus*/
parameter_list|,
specifier|const
name|QString
modifier|&
comment|/*path*/
parameter_list|)
block|{
comment|//    qDebug()<< "AtSpiAdaptor::eventListenerRegistered: "<< bus<< path;
name|updateEventListeners
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   This slot needs to get called when a \a window has be activated or deactivated (become focused).   When \a active is true, the window just received focus, otherwise it lost the focus.   */
end_comment
begin_function
DECL|function|windowActivated
name|void
name|AtSpiAdaptor
operator|::
name|windowActivated
parameter_list|(
name|QObject
modifier|*
name|window
parameter_list|,
name|bool
name|active
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|sendWindow
operator|||
name|sendWindow_activate
operator|)
condition|)
return|return;
name|QAccessibleInterface
modifier|*
name|iface
init|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|window
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|iface
operator|&&
name|iface
operator|->
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QString
name|windowTitle
init|=
name|iface
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Name
argument_list|)
decl_stmt|;
operator|delete
name|iface
expr_stmt|;
name|QDBusVariant
name|data
decl_stmt|;
name|data
operator|.
name|setVariant
argument_list|(
name|windowTitle
argument_list|)
expr_stmt|;
name|QVariantList
name|args
init|=
name|packDBusSignalArguments
argument_list|(
name|QString
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|data
argument_list|)
argument_list|)
decl_stmt|;
name|QString
name|status
init|=
name|active
condition|?
name|QLatin1String
argument_list|(
literal|"Activate"
argument_list|)
else|:
name|QLatin1String
argument_list|(
literal|"Deactivate"
argument_list|)
decl_stmt|;
name|QString
name|path
init|=
name|pathForObject
argument_list|(
name|window
argument_list|)
decl_stmt|;
name|sendDBusSignal
argument_list|(
name|path
argument_list|,
name|QLatin1String
argument_list|(
name|ATSPI_DBUS_INTERFACE_EVENT_WINDOW
argument_list|)
argument_list|,
name|status
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|QVariantList
name|stateArgs
init|=
name|packDBusSignalArguments
argument_list|(
name|QLatin1String
argument_list|(
literal|"active"
argument_list|)
argument_list|,
name|active
condition|?
literal|1
else|:
literal|0
argument_list|,
literal|0
argument_list|,
name|variantForPath
argument_list|(
name|path
argument_list|)
argument_list|)
decl_stmt|;
name|sendDBusSignal
argument_list|(
name|path
argument_list|,
name|QLatin1String
argument_list|(
name|ATSPI_DBUS_INTERFACE_EVENT_OBJECT
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"StateChanged"
argument_list|)
argument_list|,
name|stateArgs
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|packDBusSignalArguments
name|QVariantList
name|AtSpiAdaptor
operator|::
name|packDBusSignalArguments
parameter_list|(
specifier|const
name|QString
modifier|&
name|type
parameter_list|,
name|int
name|data1
parameter_list|,
name|int
name|data2
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|variantData
parameter_list|)
specifier|const
block|{
name|QVariantList
name|arguments
decl_stmt|;
name|arguments
operator|<<
name|type
operator|<<
name|data1
operator|<<
name|data2
operator|<<
name|variantData
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QSpiObjectReference
argument_list|(
name|m_dbus
operator|->
name|connection
argument_list|()
argument_list|,
name|QDBusObjectPath
argument_list|(
name|QSPI_OBJECT_PATH_ROOT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|arguments
return|;
block|}
end_function
begin_function
DECL|function|variantForPath
name|QVariant
name|AtSpiAdaptor
operator|::
name|variantForPath
parameter_list|(
specifier|const
name|QString
modifier|&
name|path
parameter_list|)
specifier|const
block|{
name|QDBusVariant
name|data
decl_stmt|;
name|data
operator|.
name|setVariant
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QSpiObjectReference
argument_list|(
name|m_dbus
operator|->
name|connection
argument_list|()
argument_list|,
name|QDBusObjectPath
argument_list|(
name|path
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|QVariant
operator|::
name|fromValue
argument_list|(
name|data
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|sendDBusSignal
name|bool
name|AtSpiAdaptor
operator|::
name|sendDBusSignal
parameter_list|(
specifier|const
name|QString
modifier|&
name|path
parameter_list|,
specifier|const
name|QString
modifier|&
name|interface
parameter_list|,
specifier|const
name|QString
modifier|&
name|signalName
parameter_list|,
specifier|const
name|QVariantList
modifier|&
name|arguments
parameter_list|)
specifier|const
block|{
name|QDBusMessage
name|message
init|=
name|QDBusMessage
operator|::
name|createSignal
argument_list|(
name|path
argument_list|,
name|interface
argument_list|,
name|signalName
argument_list|)
decl_stmt|;
name|message
operator|.
name|setArguments
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
return|return
name|m_dbus
operator|->
name|connection
argument_list|()
operator|.
name|send
argument_list|(
name|message
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|interfaceFromPath
name|QAIPointer
name|AtSpiAdaptor
operator|::
name|interfaceFromPath
parameter_list|(
specifier|const
name|QString
modifier|&
name|dbusPath
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|dbusPath
operator|==
name|QLatin1String
argument_list|(
name|QSPI_OBJECT_PATH_ROOT
argument_list|)
condition|)
return|return
name|QAIPointer
argument_list|(
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|qApp
argument_list|)
argument_list|)
return|;
name|QStringList
name|parts
init|=
name|dbusPath
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|parts
operator|.
name|size
argument_list|()
operator|<=
literal|5
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"invalid path: "
operator|<<
name|dbusPath
expr_stmt|;
return|return
name|QAIPointer
argument_list|()
return|;
block|}
name|QString
name|objectString
init|=
name|parts
operator|.
name|at
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|quintptr
name|uintptr
init|=
name|objectString
operator|.
name|toULongLong
argument_list|()
decl_stmt|;
if|if
condition|(
name|uintptr
operator|&&
name|m_handledObjects
operator|.
name|contains
argument_list|(
name|uintptr
argument_list|)
condition|)
block|{
comment|// We found the pointer, check if it's still valid:
if|if
condition|(
name|m_handledObjects
index|[
name|uintptr
index|]
condition|)
block|{
name|QObject
modifier|*
name|object
init|=
cast|reinterpret_cast
argument_list|<
name|QObject
operator|*
argument_list|>
argument_list|(
name|uintptr
argument_list|)
decl_stmt|;
name|QAIPointer
name|interface
init|=
name|QAIPointer
argument_list|(
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|object
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|interface
condition|)
return|return
name|QAIPointer
argument_list|()
return|;
for|for
control|(
name|int
name|i
init|=
literal|6
init|;
name|i
operator|<
name|parts
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|int
name|childIndex
init|=
name|parts
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|childIndex
operator|<
literal|0
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"Invalid child index"
expr_stmt|;
return|return
name|QAIPointer
argument_list|()
return|;
block|}
name|QAIPointer
name|childInterface
argument_list|(
name|interface
operator|->
name|child
argument_list|(
name|childIndex
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|childInterface
condition|)
name|interface
operator|=
name|childInterface
expr_stmt|;
block|}
return|return
name|interface
return|;
block|}
else|else
block|{
name|m_handledObjects
operator|.
name|remove
argument_list|(
name|uintptr
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|QAIPointer
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     This function gets called when Qt notifies about accessibility updates. */
end_comment
begin_function
DECL|function|notify
name|void
name|AtSpiAdaptor
operator|::
name|notify
parameter_list|(
name|QAccessibleEvent
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
operator|!
name|initialized
condition|)
return|return;
switch|switch
condition|(
name|event
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|QAccessible
operator|::
name|ObjectCreated
case|:
if|if
condition|(
name|sendObject
operator|||
name|sendObject_children_changed
condition|)
name|notifyAboutCreation
argument_list|(
name|QAIPointer
argument_list|(
name|event
operator|->
name|accessibleInterface
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QAccessible
operator|::
name|ObjectShow
case|:
block|{
if|if
condition|(
name|sendObject
operator|||
name|sendObject_state_changed
condition|)
block|{
name|QString
name|path
init|=
name|pathForInterface
argument_list|(
name|QAIPointer
argument_list|(
name|event
operator|->
name|accessibleInterface
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QVariantList
name|stateArgs
init|=
name|packDBusSignalArguments
argument_list|(
name|QLatin1String
argument_list|(
literal|"showing"
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
name|variantForPath
argument_list|(
name|path
argument_list|)
argument_list|)
decl_stmt|;
name|sendDBusSignal
argument_list|(
name|path
argument_list|,
name|QLatin1String
argument_list|(
name|ATSPI_DBUS_INTERFACE_EVENT_OBJECT
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"StateChanged"
argument_list|)
argument_list|,
name|stateArgs
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|QAccessible
operator|::
name|ObjectHide
case|:
block|{
if|if
condition|(
name|sendObject
operator|||
name|sendObject_state_changed
condition|)
block|{
name|QString
name|path
init|=
name|pathForInterface
argument_list|(
name|QAIPointer
argument_list|(
name|event
operator|->
name|accessibleInterface
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QVariantList
name|stateArgs
init|=
name|packDBusSignalArguments
argument_list|(
name|QLatin1String
argument_list|(
literal|"showing"
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|variantForPath
argument_list|(
name|path
argument_list|)
argument_list|)
decl_stmt|;
name|sendDBusSignal
argument_list|(
name|path
argument_list|,
name|QLatin1String
argument_list|(
name|ATSPI_DBUS_INTERFACE_EVENT_OBJECT
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"StateChanged"
argument_list|)
argument_list|,
name|stateArgs
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|QAccessible
operator|::
name|ObjectDestroyed
case|:
block|{
if|if
condition|(
name|sendObject
operator|||
name|sendObject_state_changed
condition|)
name|notifyAboutDestruction
argument_list|(
name|QAIPointer
argument_list|(
name|event
operator|->
name|accessibleInterface
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QAccessible
operator|::
name|NameChanged
case|:
block|{
if|if
condition|(
name|sendObject
operator|||
name|sendObject_property_change
operator|||
name|sendObject_property_change_accessible_name
condition|)
block|{
name|QString
name|path
init|=
name|pathForInterface
argument_list|(
name|QAIPointer
argument_list|(
name|event
operator|->
name|accessibleInterface
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QVariantList
name|args
init|=
name|packDBusSignalArguments
argument_list|(
name|QLatin1String
argument_list|(
literal|"accessible-name"
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|variantForPath
argument_list|(
name|path
argument_list|)
argument_list|)
decl_stmt|;
name|sendDBusSignal
argument_list|(
name|path
argument_list|,
name|QLatin1String
argument_list|(
name|ATSPI_DBUS_INTERFACE_EVENT_OBJECT
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"PropertyChange"
argument_list|)
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|QAccessible
operator|::
name|DescriptionChanged
case|:
block|{
if|if
condition|(
name|sendObject
operator|||
name|sendObject_property_change
operator|||
name|sendObject_property_change_accessible_description
condition|)
block|{
name|QString
name|path
init|=
name|pathForInterface
argument_list|(
name|QAIPointer
argument_list|(
name|event
operator|->
name|accessibleInterface
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QVariantList
name|args
init|=
name|packDBusSignalArguments
argument_list|(
name|QLatin1String
argument_list|(
literal|"accessible-description"
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|variantForPath
argument_list|(
name|path
argument_list|)
argument_list|)
decl_stmt|;
name|sendDBusSignal
argument_list|(
name|path
argument_list|,
name|QLatin1String
argument_list|(
name|ATSPI_DBUS_INTERFACE_EVENT_OBJECT
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"PropertyChange"
argument_list|)
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|QAccessible
operator|::
name|Focus
case|:
block|{
if|if
condition|(
name|sendFocus
operator|||
name|sendObject
operator|||
name|sendObject_state_changed
condition|)
name|sendFocusChanged
argument_list|(
name|QAIPointer
argument_list|(
name|event
operator|->
name|accessibleInterface
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QAccessible
operator|::
name|TextInserted
case|:
case|case
name|QAccessible
operator|::
name|TextRemoved
case|:
case|case
name|QAccessible
operator|::
name|TextUpdated
case|:
block|{
if|if
condition|(
name|sendObject
operator|||
name|sendObject_text_changed
condition|)
block|{
name|QAIPointer
name|iface
init|=
name|QAIPointer
argument_list|(
name|event
operator|->
name|accessibleInterface
argument_list|()
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|iface
operator|->
name|textInterface
argument_list|()
argument_list|)
expr_stmt|;
name|QString
name|path
init|=
name|pathForInterface
argument_list|(
name|iface
argument_list|)
decl_stmt|;
name|int
name|changePosition
init|=
literal|0
decl_stmt|;
name|int
name|cursorPosition
init|=
literal|0
decl_stmt|;
name|QString
name|textRemoved
decl_stmt|;
name|QString
name|textInserted
decl_stmt|;
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QAccessible
operator|::
name|TextInserted
condition|)
block|{
name|QAccessibleTextInsertEvent
modifier|*
name|textEvent
init|=
cast|static_cast
argument_list|<
name|QAccessibleTextInsertEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
decl_stmt|;
name|textInserted
operator|=
name|textEvent
operator|->
name|textInserted
argument_list|()
expr_stmt|;
name|changePosition
operator|=
name|textEvent
operator|->
name|changePosition
argument_list|()
expr_stmt|;
name|cursorPosition
operator|=
name|textEvent
operator|->
name|cursorPosition
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QAccessible
operator|::
name|TextRemoved
condition|)
block|{
name|QAccessibleTextRemoveEvent
modifier|*
name|textEvent
init|=
cast|static_cast
argument_list|<
name|QAccessibleTextRemoveEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
decl_stmt|;
name|textRemoved
operator|=
name|textEvent
operator|->
name|textRemoved
argument_list|()
expr_stmt|;
name|changePosition
operator|=
name|textEvent
operator|->
name|changePosition
argument_list|()
expr_stmt|;
name|cursorPosition
operator|=
name|textEvent
operator|->
name|cursorPosition
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QAccessible
operator|::
name|TextInserted
condition|)
block|{
name|QAccessibleTextUpdateEvent
modifier|*
name|textEvent
init|=
cast|static_cast
argument_list|<
name|QAccessibleTextUpdateEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
decl_stmt|;
name|textInserted
operator|=
name|textEvent
operator|->
name|textInserted
argument_list|()
expr_stmt|;
name|textRemoved
operator|=
name|textEvent
operator|->
name|textRemoved
argument_list|()
expr_stmt|;
name|changePosition
operator|=
name|textEvent
operator|->
name|changePosition
argument_list|()
expr_stmt|;
name|cursorPosition
operator|=
name|textEvent
operator|->
name|cursorPosition
argument_list|()
expr_stmt|;
block|}
name|QDBusVariant
name|data
decl_stmt|;
if|if
condition|(
operator|!
name|textRemoved
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|data
operator|.
name|setVariant
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|textRemoved
argument_list|)
argument_list|)
expr_stmt|;
name|QVariantList
name|args
init|=
name|packDBusSignalArguments
argument_list|(
name|QLatin1String
argument_list|(
literal|"delete"
argument_list|)
argument_list|,
name|changePosition
argument_list|,
name|textRemoved
operator|.
name|length
argument_list|()
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|data
argument_list|)
argument_list|)
decl_stmt|;
name|sendDBusSignal
argument_list|(
name|path
argument_list|,
name|QLatin1String
argument_list|(
name|ATSPI_DBUS_INTERFACE_EVENT_OBJECT
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"TextChanged"
argument_list|)
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|textInserted
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|data
operator|.
name|setVariant
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|textInserted
argument_list|)
argument_list|)
expr_stmt|;
name|QVariantList
name|args
init|=
name|packDBusSignalArguments
argument_list|(
name|QLatin1String
argument_list|(
literal|"insert"
argument_list|)
argument_list|,
name|changePosition
argument_list|,
name|textInserted
operator|.
name|length
argument_list|()
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|data
argument_list|)
argument_list|)
decl_stmt|;
name|sendDBusSignal
argument_list|(
name|path
argument_list|,
name|QLatin1String
argument_list|(
name|ATSPI_DBUS_INTERFACE_EVENT_OBJECT
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"TextChanged"
argument_list|)
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
comment|// send a cursor update
name|Q_UNUSED
argument_list|(
argument|cursorPosition
argument_list|)
comment|//            QDBusVariant cursorData;
comment|//            cursorData.setVariant(QVariant::fromValue(cursorPosition));
comment|//            QVariantList args = packDBusSignalArguments(QString(), cursorPosition, 0, QVariant::fromValue(cursorData));
comment|//            sendDBusSignal(path, QLatin1String(ATSPI_DBUS_INTERFACE_EVENT_OBJECT),
comment|//                           QLatin1String("TextCaretMoved"), args);
block|}
break|break;
block|}
case|case
name|QAccessible
operator|::
name|TextCaretMoved
case|:
block|{
if|if
condition|(
name|sendObject
operator|||
name|sendObject_text_caret_moved
condition|)
block|{
name|QAIPointer
name|iface
init|=
name|QAIPointer
argument_list|(
name|event
operator|->
name|accessibleInterface
argument_list|()
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|iface
operator|->
name|textInterface
argument_list|()
argument_list|)
expr_stmt|;
name|QString
name|path
init|=
name|pathForInterface
argument_list|(
name|iface
argument_list|)
decl_stmt|;
name|QDBusVariant
name|cursorData
decl_stmt|;
name|int
name|pos
init|=
name|iface
operator|->
name|textInterface
argument_list|()
operator|->
name|cursorPosition
argument_list|()
decl_stmt|;
name|cursorData
operator|.
name|setVariant
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|pos
argument_list|)
argument_list|)
expr_stmt|;
name|QVariantList
name|args
init|=
name|packDBusSignalArguments
argument_list|(
name|QString
argument_list|()
argument_list|,
name|pos
argument_list|,
literal|0
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|cursorData
argument_list|)
argument_list|)
decl_stmt|;
name|sendDBusSignal
argument_list|(
name|path
argument_list|,
name|QLatin1String
argument_list|(
name|ATSPI_DBUS_INTERFACE_EVENT_OBJECT
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"TextCaretMoved"
argument_list|)
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|QAccessible
operator|::
name|TextSelectionChanged
case|:
block|{
if|if
condition|(
name|sendObject
operator|||
name|sendObject_text_selection_changed
condition|)
block|{
name|QAIPointer
name|iface
init|=
name|QAIPointer
argument_list|(
name|event
operator|->
name|accessibleInterface
argument_list|()
argument_list|)
decl_stmt|;
name|QString
name|path
init|=
name|pathForInterface
argument_list|(
name|iface
argument_list|)
decl_stmt|;
name|QVariantList
name|args
init|=
name|packDBusSignalArguments
argument_list|(
name|QString
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QDBusVariant
argument_list|(
name|QVariant
argument_list|(
name|QString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|sendDBusSignal
argument_list|(
name|path
argument_list|,
name|QLatin1String
argument_list|(
name|ATSPI_DBUS_INTERFACE_EVENT_OBJECT
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"TextSelectionChanged"
argument_list|)
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|QAccessible
operator|::
name|ValueChanged
case|:
block|{
if|if
condition|(
name|sendObject
operator|||
name|sendObject_value_changed
condition|)
block|{
name|QAIPointer
name|iface
init|=
name|QAIPointer
argument_list|(
name|event
operator|->
name|accessibleInterface
argument_list|()
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|iface
operator|->
name|valueInterface
argument_list|()
argument_list|)
expr_stmt|;
name|QString
name|path
init|=
name|pathForInterface
argument_list|(
name|iface
argument_list|)
decl_stmt|;
name|QVariantList
name|args
init|=
name|packDBusSignalArguments
argument_list|(
name|QLatin1String
argument_list|(
literal|"accessible-value"
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|variantForPath
argument_list|(
name|path
argument_list|)
argument_list|)
decl_stmt|;
name|sendDBusSignal
argument_list|(
name|path
argument_list|,
name|QLatin1String
argument_list|(
name|ATSPI_DBUS_INTERFACE_EVENT_OBJECT
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"PropertyChange"
argument_list|)
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|QAccessible
operator|::
name|Selection
case|:
block|{
name|QAIPointer
name|iface
init|=
name|QAIPointer
argument_list|(
name|event
operator|->
name|accessibleInterface
argument_list|()
argument_list|)
decl_stmt|;
name|QString
name|path
init|=
name|pathForInterface
argument_list|(
name|iface
argument_list|)
decl_stmt|;
name|int
name|selected
init|=
name|iface
operator|->
name|state
argument_list|()
operator|.
name|selected
condition|?
literal|1
else|:
literal|0
decl_stmt|;
name|QVariantList
name|stateArgs
init|=
name|packDBusSignalArguments
argument_list|(
name|QLatin1String
argument_list|(
literal|"selected"
argument_list|)
argument_list|,
name|selected
argument_list|,
literal|0
argument_list|,
name|variantForPath
argument_list|(
name|path
argument_list|)
argument_list|)
decl_stmt|;
name|sendDBusSignal
argument_list|(
name|path
argument_list|,
name|QLatin1String
argument_list|(
name|ATSPI_DBUS_INTERFACE_EVENT_OBJECT
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"StateChanged"
argument_list|)
argument_list|,
name|stateArgs
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QAccessible
operator|::
name|StateChanged
case|:
block|{
if|if
condition|(
name|sendObject
operator|||
name|sendObject_state_changed
operator|||
name|sendWindow
operator|||
name|sendWindow_activate
condition|)
block|{
name|QAccessible
operator|::
name|State
name|stateChange
init|=
cast|static_cast
argument_list|<
name|QAccessibleStateChangeEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
operator|->
name|changedStates
argument_list|()
decl_stmt|;
if|if
condition|(
name|stateChange
operator|.
name|checked
condition|)
block|{
name|QAIPointer
name|iface
init|=
name|QAIPointer
argument_list|(
name|event
operator|->
name|accessibleInterface
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|checked
init|=
name|iface
operator|->
name|state
argument_list|()
operator|.
name|checked
decl_stmt|;
name|QString
name|path
init|=
name|pathForInterface
argument_list|(
name|iface
argument_list|)
decl_stmt|;
name|QVariantList
name|args
init|=
name|packDBusSignalArguments
argument_list|(
name|QLatin1String
argument_list|(
literal|"checked"
argument_list|)
argument_list|,
name|checked
argument_list|,
literal|0
argument_list|,
name|variantForPath
argument_list|(
name|path
argument_list|)
argument_list|)
decl_stmt|;
name|sendDBusSignal
argument_list|(
name|path
argument_list|,
name|QLatin1String
argument_list|(
name|ATSPI_DBUS_INTERFACE_EVENT_OBJECT
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"StateChanged"
argument_list|)
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|stateChange
operator|.
name|active
condition|)
block|{
name|QAIPointer
name|iface
init|=
name|QAIPointer
argument_list|(
name|event
operator|->
name|accessibleInterface
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|iface
operator|->
name|role
argument_list|()
operator|==
name|QAccessible
operator|::
name|Window
operator|&&
operator|(
name|sendWindow
operator|||
name|sendWindow_activate
operator|)
operator|)
condition|)
return|return;
name|QString
name|windowTitle
init|=
name|iface
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Name
argument_list|)
decl_stmt|;
name|QDBusVariant
name|data
decl_stmt|;
name|data
operator|.
name|setVariant
argument_list|(
name|windowTitle
argument_list|)
expr_stmt|;
name|QVariantList
name|args
init|=
name|packDBusSignalArguments
argument_list|(
name|QString
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|data
argument_list|)
argument_list|)
decl_stmt|;
name|QString
name|status
init|=
name|iface
operator|->
name|state
argument_list|()
operator|.
name|active
condition|?
name|QLatin1String
argument_list|(
literal|"Activate"
argument_list|)
else|:
name|QLatin1String
argument_list|(
literal|"Deactivate"
argument_list|)
decl_stmt|;
name|QString
name|path
init|=
name|pathForInterface
argument_list|(
name|iface
argument_list|)
decl_stmt|;
name|sendDBusSignal
argument_list|(
name|path
argument_list|,
name|QLatin1String
argument_list|(
name|ATSPI_DBUS_INTERFACE_EVENT_WINDOW
argument_list|)
argument_list|,
name|status
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|QVariantList
name|stateArgs
init|=
name|packDBusSignalArguments
argument_list|(
name|QLatin1String
argument_list|(
literal|"active"
argument_list|)
argument_list|,
name|iface
operator|->
name|state
argument_list|()
operator|.
name|active
condition|?
literal|1
else|:
literal|0
argument_list|,
literal|0
argument_list|,
name|variantForPath
argument_list|(
name|path
argument_list|)
argument_list|)
decl_stmt|;
name|sendDBusSignal
argument_list|(
name|path
argument_list|,
name|QLatin1String
argument_list|(
name|ATSPI_DBUS_INTERFACE_EVENT_OBJECT
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"StateChanged"
argument_list|)
argument_list|,
name|stateArgs
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
block|}
comment|//    case QAccessible::TableModelChanged: {
comment|//        // This is rather evil. We don't send data and hope that at-spi fetches the right child.
comment|//        // This hack fails when a row gets removed and a different one added in its place.
comment|//        QDBusVariant data;
comment|//        emit ChildrenChanged("add", 0, 0, data, spiBridge->getRootReference());
comment|//        break;
comment|//    }
comment|//    case QAccessible::TableModelChanged:
comment|//        QAccessible2::TableModelChange change = interface->tableInterface()->modelChange();
comment|//        // assume we should reset if everything is 0
comment|//        if (change.firstColumn == 0&& change.firstRow == 0&& change.lastColumn == 0&& change.lastRow == 0) {
comment|//            notifyAboutDestruction(accessible);
comment|//            notifyAboutCreation(accessible);
comment|//        }
comment|//        break;
case|case
name|QAccessible
operator|::
name|ParentChanged
case|:
break|break;
case|case
name|QAccessible
operator|::
name|DialogStart
case|:
break|break;
case|case
name|QAccessible
operator|::
name|DialogEnd
case|:
break|break;
case|case
name|QAccessible
operator|::
name|SelectionRemove
case|:
break|break;
default|default:
name|QAIPointer
name|iface
init|=
name|QAIPointer
argument_list|(
name|event
operator|->
name|accessibleInterface
argument_list|()
argument_list|)
decl_stmt|;
name|qWarning
argument_list|()
operator|<<
literal|"QSpiAccessible::accessibleEvent not handled: "
operator|<<
name|QString
operator|::
name|number
argument_list|(
name|event
operator|->
name|type
argument_list|()
argument_list|,
literal|16
argument_list|)
operator|<<
literal|" obj: "
operator|<<
name|iface
operator|->
name|object
argument_list|()
operator|<<
operator|(
operator|(
name|iface
operator|->
name|isValid
argument_list|()
operator|&&
name|iface
operator|->
name|object
argument_list|()
operator|)
condition|?
name|iface
operator|->
name|object
argument_list|()
operator|->
name|objectName
argument_list|()
else|:
name|QLatin1String
argument_list|(
literal|" invalid interface!"
argument_list|)
operator|)
expr_stmt|;
break|break;
block|}
block|}
end_function
begin_function
DECL|function|sendFocusChanged
name|void
name|AtSpiAdaptor
operator|::
name|sendFocusChanged
parameter_list|(
specifier|const
name|QAIPointer
modifier|&
name|interface
parameter_list|)
specifier|const
block|{
specifier|static
name|QString
name|lastFocusPath
decl_stmt|;
comment|// "remove" old focus
if|if
condition|(
operator|!
name|lastFocusPath
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QVariantList
name|stateArgs
init|=
name|packDBusSignalArguments
argument_list|(
name|QLatin1String
argument_list|(
literal|"focused"
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|variantForPath
argument_list|(
name|lastFocusPath
argument_list|)
argument_list|)
decl_stmt|;
name|sendDBusSignal
argument_list|(
name|lastFocusPath
argument_list|,
name|QLatin1String
argument_list|(
name|ATSPI_DBUS_INTERFACE_EVENT_OBJECT
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"StateChanged"
argument_list|)
argument_list|,
name|stateArgs
argument_list|)
expr_stmt|;
block|}
comment|// send new focus
block|{
name|QString
name|path
init|=
name|pathForInterface
argument_list|(
name|interface
argument_list|)
decl_stmt|;
name|QVariantList
name|stateArgs
init|=
name|packDBusSignalArguments
argument_list|(
name|QLatin1String
argument_list|(
literal|"focused"
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
name|variantForPath
argument_list|(
name|path
argument_list|)
argument_list|)
decl_stmt|;
name|sendDBusSignal
argument_list|(
name|path
argument_list|,
name|QLatin1String
argument_list|(
name|ATSPI_DBUS_INTERFACE_EVENT_OBJECT
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"StateChanged"
argument_list|)
argument_list|,
name|stateArgs
argument_list|)
expr_stmt|;
name|QVariantList
name|focusArgs
init|=
name|packDBusSignalArguments
argument_list|(
name|QString
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|variantForPath
argument_list|(
name|path
argument_list|)
argument_list|)
decl_stmt|;
name|sendDBusSignal
argument_list|(
name|path
argument_list|,
name|QLatin1String
argument_list|(
name|ATSPI_DBUS_INTERFACE_EVENT_FOCUS
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"Focus"
argument_list|)
argument_list|,
name|focusArgs
argument_list|)
expr_stmt|;
name|lastFocusPath
operator|=
name|path
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|notifyAboutCreation
name|void
name|AtSpiAdaptor
operator|::
name|notifyAboutCreation
parameter_list|(
specifier|const
name|QAIPointer
modifier|&
name|interface
parameter_list|)
specifier|const
block|{
comment|//    // say hello to d-bus
comment|//    cache->emitAddAccessible(accessible->getCacheItem());
comment|// notify about the new child of our parent
name|QAIPointer
name|parent
argument_list|(
name|interface
operator|->
name|parent
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|parent
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"AtSpiAdaptor::notifyAboutCreation: Could not find parent for "
operator|<<
name|interface
operator|->
name|object
argument_list|()
expr_stmt|;
return|return;
block|}
name|QString
name|path
init|=
name|pathForInterface
argument_list|(
name|interface
argument_list|)
decl_stmt|;
name|int
name|childCount
init|=
name|parent
operator|->
name|childCount
argument_list|()
decl_stmt|;
name|QString
name|parentPath
init|=
name|pathForInterface
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|QVariantList
name|args
init|=
name|packDBusSignalArguments
argument_list|(
name|QLatin1String
argument_list|(
literal|"add"
argument_list|)
argument_list|,
name|childCount
argument_list|,
literal|0
argument_list|,
name|variantForPath
argument_list|(
name|path
argument_list|)
argument_list|)
decl_stmt|;
name|sendDBusSignal
argument_list|(
name|parentPath
argument_list|,
name|QLatin1String
argument_list|(
name|ATSPI_DBUS_INTERFACE_EVENT_OBJECT
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"ChildrenChanged"
argument_list|)
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|notifyAboutDestruction
name|void
name|AtSpiAdaptor
operator|::
name|notifyAboutDestruction
parameter_list|(
specifier|const
name|QAIPointer
modifier|&
name|interface
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|interface
operator|->
name|isValid
argument_list|()
condition|)
return|return;
name|QAIPointer
name|parent
argument_list|(
name|interface
operator|->
name|parent
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|parent
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"AtSpiAdaptor::notifyAboutDestruction: Could not find parent for "
operator|<<
name|interface
operator|->
name|object
argument_list|()
expr_stmt|;
return|return;
block|}
name|QString
name|path
init|=
name|pathForInterface
argument_list|(
name|interface
argument_list|)
decl_stmt|;
comment|// this is in the destructor. we have no clue which child we used to be.
comment|// FIXME
name|int
name|childIndex
init|=
operator|-
literal|1
decl_stmt|;
comment|//    if (child) {
comment|//        childIndex = child;
comment|//    } else {
comment|//        childIndex = parent->indexOfChild(interface);
comment|//    }
name|QString
name|parentPath
init|=
name|pathForInterface
argument_list|(
name|parent
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|QVariantList
name|args
init|=
name|packDBusSignalArguments
argument_list|(
name|QLatin1String
argument_list|(
literal|"remove"
argument_list|)
argument_list|,
name|childIndex
argument_list|,
literal|0
argument_list|,
name|variantForPath
argument_list|(
name|path
argument_list|)
argument_list|)
decl_stmt|;
name|sendDBusSignal
argument_list|(
name|parentPath
argument_list|,
name|QLatin1String
argument_list|(
name|ATSPI_DBUS_INTERFACE_EVENT_OBJECT
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"ChildrenChanged"
argument_list|)
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Handle incoming DBus message.   This function dispatches the dbus message to the right interface handler.   */
end_comment
begin_function
DECL|function|handleMessage
name|bool
name|AtSpiAdaptor
operator|::
name|handleMessage
parameter_list|(
specifier|const
name|QDBusMessage
modifier|&
name|message
parameter_list|,
specifier|const
name|QDBusConnection
modifier|&
name|connection
parameter_list|)
block|{
comment|// get accessible interface
name|QAIPointer
name|accessible
init|=
name|interfaceFromPath
argument_list|(
name|message
operator|.
name|path
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|accessible
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"WARNING Qt AtSpiAdaptor: Could not find accessible on path: "
operator|<<
name|message
operator|.
name|path
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
name|QString
name|interface
init|=
name|message
operator|.
name|interface
argument_list|()
decl_stmt|;
name|QString
name|function
init|=
name|message
operator|.
name|member
argument_list|()
decl_stmt|;
comment|// qDebug()<< "AtSpiAdaptor::handleMessage: "<< interface<< function;
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"Introspect"
argument_list|)
condition|)
block|{
comment|//introspect(message.path());
return|return
literal|false
return|;
block|}
comment|// handle properties like regular functions
if|if
condition|(
name|interface
operator|==
name|QLatin1String
argument_list|(
literal|"org.freedesktop.DBus.Properties"
argument_list|)
condition|)
block|{
name|interface
operator|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
comment|// Get/Set + Name
name|function
operator|=
name|message
operator|.
name|member
argument_list|()
operator|+
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
comment|// switch interface to call
if|if
condition|(
name|interface
operator|==
name|QLatin1String
argument_list|(
name|ATSPI_DBUS_INTERFACE_ACCESSIBLE
argument_list|)
condition|)
return|return
name|accessibleInterface
argument_list|(
name|accessible
argument_list|,
name|function
argument_list|,
name|message
argument_list|,
name|connection
argument_list|)
return|;
if|if
condition|(
name|interface
operator|==
name|QLatin1String
argument_list|(
name|ATSPI_DBUS_INTERFACE_APPLICATION
argument_list|)
condition|)
return|return
name|applicationInterface
argument_list|(
name|accessible
argument_list|,
name|function
argument_list|,
name|message
argument_list|,
name|connection
argument_list|)
return|;
if|if
condition|(
name|interface
operator|==
name|QLatin1String
argument_list|(
name|ATSPI_DBUS_INTERFACE_COMPONENT
argument_list|)
condition|)
return|return
name|componentInterface
argument_list|(
name|accessible
argument_list|,
name|function
argument_list|,
name|message
argument_list|,
name|connection
argument_list|)
return|;
if|if
condition|(
name|interface
operator|==
name|QLatin1String
argument_list|(
name|ATSPI_DBUS_INTERFACE_ACTION
argument_list|)
condition|)
return|return
name|actionInterface
argument_list|(
name|accessible
argument_list|,
name|function
argument_list|,
name|message
argument_list|,
name|connection
argument_list|)
return|;
if|if
condition|(
name|interface
operator|==
name|QLatin1String
argument_list|(
name|ATSPI_DBUS_INTERFACE_TEXT
argument_list|)
condition|)
return|return
name|textInterface
argument_list|(
name|accessible
argument_list|,
name|function
argument_list|,
name|message
argument_list|,
name|connection
argument_list|)
return|;
if|if
condition|(
name|interface
operator|==
name|QLatin1String
argument_list|(
name|ATSPI_DBUS_INTERFACE_EDITABLE_TEXT
argument_list|)
condition|)
return|return
name|editableTextInterface
argument_list|(
name|accessible
argument_list|,
name|function
argument_list|,
name|message
argument_list|,
name|connection
argument_list|)
return|;
if|if
condition|(
name|interface
operator|==
name|QLatin1String
argument_list|(
name|ATSPI_DBUS_INTERFACE_VALUE
argument_list|)
condition|)
return|return
name|valueInterface
argument_list|(
name|accessible
argument_list|,
name|function
argument_list|,
name|message
argument_list|,
name|connection
argument_list|)
return|;
if|if
condition|(
name|interface
operator|==
name|QLatin1String
argument_list|(
name|ATSPI_DBUS_INTERFACE_TABLE
argument_list|)
condition|)
return|return
name|tableInterface
argument_list|(
name|accessible
argument_list|,
name|function
argument_list|,
name|message
argument_list|,
name|connection
argument_list|)
return|;
name|qWarning
argument_list|()
operator|<<
literal|"AtSpiAdaptor::handleMessage with unknown interface: "
operator|<<
name|message
operator|.
name|path
argument_list|()
operator|<<
name|interface
operator|<<
name|function
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|// Application
end_comment
begin_function
DECL|function|applicationInterface
name|bool
name|AtSpiAdaptor
operator|::
name|applicationInterface
parameter_list|(
specifier|const
name|QAIPointer
modifier|&
name|interface
parameter_list|,
specifier|const
name|QString
modifier|&
name|function
parameter_list|,
specifier|const
name|QDBusMessage
modifier|&
name|message
parameter_list|,
specifier|const
name|QDBusConnection
modifier|&
name|connection
parameter_list|)
block|{
if|if
condition|(
name|message
operator|.
name|path
argument_list|()
operator|!=
name|QLatin1String
argument_list|(
name|ATSPI_DBUS_PATH_ROOT
argument_list|)
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"WARNING Qt AtSpiAdaptor: Could not find application interface for: "
operator|<<
name|message
operator|.
name|path
argument_list|()
operator|<<
name|interface
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"SetId"
argument_list|)
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|message
operator|.
name|signature
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"ssv"
argument_list|)
argument_list|)
expr_stmt|;
name|QVariant
name|value
init|=
name|qvariant_cast
argument_list|<
name|QDBusVariant
argument_list|>
argument_list|(
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|variant
argument_list|()
decl_stmt|;
name|m_applicationId
operator|=
name|value
operator|.
name|toInt
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"GetId"
argument_list|)
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|message
operator|.
name|signature
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"ss"
argument_list|)
argument_list|)
expr_stmt|;
name|QDBusMessage
name|reply
init|=
name|message
operator|.
name|createReply
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QDBusVariant
argument_list|(
name|m_applicationId
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|connection
operator|.
name|send
argument_list|(
name|reply
argument_list|)
return|;
block|}
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"GetToolkitName"
argument_list|)
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|message
operator|.
name|signature
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"ss"
argument_list|)
argument_list|)
expr_stmt|;
name|QDBusMessage
name|reply
init|=
name|message
operator|.
name|createReply
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QDBusVariant
argument_list|(
name|QLatin1String
argument_list|(
literal|"Qt"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|connection
operator|.
name|send
argument_list|(
name|reply
argument_list|)
return|;
block|}
name|qDebug
argument_list|()
operator|<<
literal|"AtSpiAdaptor::applicationInterface "
operator|<<
name|message
operator|.
name|path
argument_list|()
operator|<<
name|interface
operator|<<
name|function
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/*!   Register this application as accessible on the accessibility DBus.   */
end_comment
begin_function
DECL|function|registerApplication
name|void
name|AtSpiAdaptor
operator|::
name|registerApplication
parameter_list|()
block|{
name|OrgA11yAtspiSocketInterface
modifier|*
name|registry
decl_stmt|;
name|registry
operator|=
operator|new
name|OrgA11yAtspiSocketInterface
argument_list|(
name|QLatin1String
argument_list|(
name|QSPI_REGISTRY_NAME
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
name|QSPI_OBJECT_PATH_ROOT
argument_list|)
argument_list|,
name|m_dbus
operator|->
name|connection
argument_list|()
argument_list|)
expr_stmt|;
name|QDBusPendingReply
argument_list|<
name|QSpiObjectReference
argument_list|>
name|reply
decl_stmt|;
name|QSpiObjectReference
name|ref
init|=
name|QSpiObjectReference
argument_list|(
name|m_dbus
operator|->
name|connection
argument_list|()
argument_list|,
name|QDBusObjectPath
argument_list|(
name|QSPI_OBJECT_PATH_ROOT
argument_list|)
argument_list|)
decl_stmt|;
name|reply
operator|=
name|registry
operator|->
name|Embed
argument_list|(
name|ref
argument_list|)
expr_stmt|;
name|reply
operator|.
name|waitForFinished
argument_list|()
expr_stmt|;
comment|// TODO: make this async
if|if
condition|(
name|reply
operator|.
name|isValid
argument_list|()
condition|)
block|{
specifier|const
name|QSpiObjectReference
modifier|&
name|socket
init|=
name|reply
operator|.
name|value
argument_list|()
decl_stmt|;
name|accessibilityRegistry
operator|=
name|QSpiObjectReference
argument_list|(
name|socket
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|()
operator|<<
literal|"Error in contacting registry"
expr_stmt|;
name|qWarning
argument_list|()
operator|<<
name|reply
operator|.
name|error
argument_list|()
operator|.
name|name
argument_list|()
expr_stmt|;
name|qWarning
argument_list|()
operator|<<
name|reply
operator|.
name|error
argument_list|()
operator|.
name|message
argument_list|()
expr_stmt|;
block|}
operator|delete
name|registry
expr_stmt|;
block|}
end_function
begin_comment
comment|// Accessible
end_comment
begin_function
DECL|function|accessibleInterface
name|bool
name|AtSpiAdaptor
operator|::
name|accessibleInterface
parameter_list|(
specifier|const
name|QAIPointer
modifier|&
name|interface
parameter_list|,
specifier|const
name|QString
modifier|&
name|function
parameter_list|,
specifier|const
name|QDBusMessage
modifier|&
name|message
parameter_list|,
specifier|const
name|QDBusConnection
modifier|&
name|connection
parameter_list|)
block|{
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"GetRole"
argument_list|)
condition|)
block|{
name|sendReply
argument_list|(
name|connection
argument_list|,
name|message
argument_list|,
operator|(
name|uint
operator|)
name|getRole
argument_list|(
name|interface
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"GetName"
argument_list|)
condition|)
block|{
name|sendReply
argument_list|(
name|connection
argument_list|,
name|message
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QDBusVariant
argument_list|(
name|interface
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Name
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"GetRoleName"
argument_list|)
condition|)
block|{
name|sendReply
argument_list|(
name|connection
argument_list|,
name|message
argument_list|,
name|qSpiRoleMapping
index|[
name|interface
operator|->
name|role
argument_list|()
index|]
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"GetLocalizedRoleName"
argument_list|)
condition|)
block|{
name|sendReply
argument_list|(
name|connection
argument_list|,
name|message
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|qSpiRoleMapping
index|[
name|interface
operator|->
name|role
argument_list|()
index|]
operator|.
name|localizedName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"GetChildCount"
argument_list|)
condition|)
block|{
name|sendReply
argument_list|(
name|connection
argument_list|,
name|message
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QDBusVariant
argument_list|(
name|interface
operator|->
name|childCount
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"GetIndexInParent"
argument_list|)
condition|)
block|{
name|int
name|childIndex
init|=
operator|-
literal|1
decl_stmt|;
name|QAIPointer
name|parent
argument_list|(
name|interface
operator|->
name|parent
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|parent
condition|)
block|{
name|childIndex
operator|=
name|parent
operator|->
name|indexOfChild
argument_list|(
name|interface
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|childIndex
operator|<
literal|0
condition|)
name|qWarning
argument_list|()
operator|<<
literal|"GetIndexInParent get invalid index: "
operator|<<
name|childIndex
operator|<<
name|interface
expr_stmt|;
block|}
name|sendReply
argument_list|(
name|connection
argument_list|,
name|message
argument_list|,
name|childIndex
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"GetParent"
argument_list|)
condition|)
block|{
name|QString
name|path
decl_stmt|;
name|QAIPointer
name|parent
argument_list|(
name|interface
operator|->
name|parent
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|parent
condition|)
block|{
name|path
operator|=
name|QLatin1String
argument_list|(
name|ATSPI_DBUS_PATH_NULL
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parent
operator|->
name|role
argument_list|()
operator|==
name|QAccessible
operator|::
name|Application
condition|)
block|{
name|path
operator|=
name|QLatin1String
argument_list|(
name|ATSPI_DBUS_PATH_ROOT
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|path
operator|=
name|pathForInterface
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
comment|// Parent is a property, so it needs to be wrapped inside an extra variant.
name|sendReply
argument_list|(
name|connection
argument_list|,
name|message
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QDBusVariant
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QSpiObjectReference
argument_list|(
name|connection
argument_list|,
name|QDBusObjectPath
argument_list|(
name|path
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"GetChildAtIndex"
argument_list|)
condition|)
block|{
name|int
name|index
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|first
argument_list|()
operator|.
name|toInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
condition|)
block|{
name|sendReply
argument_list|(
name|connection
argument_list|,
name|message
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QSpiObjectReference
argument_list|(
name|connection
argument_list|,
name|QDBusObjectPath
argument_list|(
name|ATSPI_DBUS_PATH_NULL
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QAIPointer
name|childInterface
init|=
name|QAIPointer
argument_list|(
name|interface
operator|->
name|child
argument_list|(
name|index
argument_list|)
argument_list|)
decl_stmt|;
name|sendReply
argument_list|(
name|connection
argument_list|,
name|message
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QSpiObjectReference
argument_list|(
name|connection
argument_list|,
name|QDBusObjectPath
argument_list|(
name|pathForInterface
argument_list|(
name|childInterface
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"GetInterfaces"
argument_list|)
condition|)
block|{
name|sendReply
argument_list|(
name|connection
argument_list|,
name|message
argument_list|,
name|accessibleInterfaces
argument_list|(
name|interface
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"GetDescription"
argument_list|)
condition|)
block|{
name|sendReply
argument_list|(
name|connection
argument_list|,
name|message
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QDBusVariant
argument_list|(
name|interface
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Description
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"GetState"
argument_list|)
condition|)
block|{
name|quint64
name|spiState
init|=
name|spiStatesFromQState
argument_list|(
name|interface
operator|->
name|state
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|interface
operator|->
name|tableInterface
argument_list|()
condition|)
block|{
name|setSpiStateBit
argument_list|(
operator|&
name|spiState
argument_list|,
name|ATSPI_STATE_MANAGES_DESCENDANTS
argument_list|)
expr_stmt|;
block|}
comment|// FIXME: figure out if this is a top level window and set its active state accordingly
comment|//        if (interface->object()&& interface->object()->isWidgetType()) {
comment|//            QWidget *w = qobject_cast<QWidget*>(interface->object());
comment|//            if (w->topLevelWidget()&& w->isActiveWindow()) {
comment|//                setSpiStateBit(&spiState, ATSPI_STATE_ACTIVE);
comment|//            }
comment|//        }
name|QAccessible
operator|::
name|Role
name|role
init|=
name|interface
operator|->
name|role
argument_list|()
decl_stmt|;
if|if
condition|(
name|role
operator|==
name|QAccessible
operator|::
name|TreeItem
operator|||
name|role
operator|==
name|QAccessible
operator|::
name|ListItem
condition|)
block|{
comment|/* Transient means libatspi2 will not cache items.                This is important because when adding/removing an item                the cache becomes outdated and we don't change the paths of                items in lists/trees/tables. */
name|setSpiStateBit
argument_list|(
operator|&
name|spiState
argument_list|,
name|ATSPI_STATE_TRANSIENT
argument_list|)
expr_stmt|;
block|}
name|sendReply
argument_list|(
name|connection
argument_list|,
name|message
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|spiStateSetFromSpiStates
argument_list|(
name|spiState
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"GetAttributes"
argument_list|)
condition|)
block|{
name|sendReply
argument_list|(
name|connection
argument_list|,
name|message
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QSpiAttributeSet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"GetRelationSet"
argument_list|)
condition|)
block|{
name|sendReply
argument_list|(
name|connection
argument_list|,
name|message
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|relationSet
argument_list|(
name|interface
argument_list|,
name|connection
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"GetApplication"
argument_list|)
condition|)
block|{
name|sendReply
argument_list|(
name|connection
argument_list|,
name|message
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QSpiObjectReference
argument_list|(
name|connection
argument_list|,
name|QDBusObjectPath
argument_list|(
name|QSPI_OBJECT_PATH_ROOT
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"GetChildren"
argument_list|)
condition|)
block|{
name|QSpiObjectReferenceArray
name|children
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|interface
operator|->
name|childCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|childPath
init|=
name|pathForInterface
argument_list|(
name|QAIPointer
argument_list|(
name|interface
operator|->
name|child
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSpiObjectReference
name|ref
argument_list|(
name|connection
argument_list|,
name|QDBusObjectPath
argument_list|(
name|childPath
argument_list|)
argument_list|)
decl_stmt|;
name|children
operator|<<
name|ref
expr_stmt|;
block|}
name|connection
operator|.
name|send
argument_list|(
name|message
operator|.
name|createReply
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|children
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|()
operator|<<
literal|"WARNING: AtSpiAdaptor::handleMessage does not implement "
operator|<<
name|function
operator|<<
name|message
operator|.
name|path
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|getRole
name|AtspiRole
name|AtSpiAdaptor
operator|::
name|getRole
parameter_list|(
specifier|const
name|QAIPointer
modifier|&
name|interface
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|(
name|interface
operator|->
name|role
argument_list|()
operator|==
name|QAccessible
operator|::
name|EditableText
operator|)
operator|&&
name|interface
operator|->
name|state
argument_list|()
operator|.
name|passwordEdit
condition|)
return|return
name|ATSPI_ROLE_PASSWORD_TEXT
return|;
return|return
name|qSpiRoleMapping
index|[
name|interface
operator|->
name|role
argument_list|()
index|]
operator|.
name|spiRole
argument_list|()
return|;
block|}
end_function
begin_comment
comment|//#define ACCESSIBLE_CREATION_DEBUG
end_comment
begin_function
DECL|function|accessibleInterfaces
name|QStringList
name|AtSpiAdaptor
operator|::
name|accessibleInterfaces
parameter_list|(
specifier|const
name|QAIPointer
modifier|&
name|interface
parameter_list|)
specifier|const
block|{
name|QStringList
name|ifaces
decl_stmt|;
ifdef|#
directive|ifdef
name|ACCESSIBLE_CREATION_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"AtSpiAdaptor::accessibleInterfaces create: "
operator|<<
name|interface
operator|->
name|object
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|ifaces
operator|<<
name|QLatin1String
argument_list|(
name|ATSPI_DBUS_INTERFACE_ACCESSIBLE
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
operator|!
name|interface
operator|->
name|rect
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
operator|||
operator|(
name|interface
operator|->
name|object
argument_list|()
operator|&&
name|interface
operator|->
name|object
argument_list|()
operator|->
name|isWidgetType
argument_list|()
operator|)
operator|||
operator|(
name|interface
operator|->
name|role
argument_list|()
operator|==
name|QAccessible
operator|::
name|ListItem
operator|)
operator|||
operator|(
name|interface
operator|->
name|role
argument_list|()
operator|==
name|QAccessible
operator|::
name|Cell
operator|)
operator|||
operator|(
name|interface
operator|->
name|role
argument_list|()
operator|==
name|QAccessible
operator|::
name|TreeItem
operator|)
operator|||
operator|(
name|interface
operator|->
name|role
argument_list|()
operator|==
name|QAccessible
operator|::
name|Row
operator|)
operator|||
operator|(
name|interface
operator|->
name|object
argument_list|()
operator|&&
name|interface
operator|->
name|object
argument_list|()
operator|->
name|inherits
argument_list|(
literal|"QSGItem"
argument_list|)
operator|)
condition|)
block|{
name|ifaces
operator|<<
name|QLatin1String
argument_list|(
name|ATSPI_DBUS_INTERFACE_COMPONENT
argument_list|)
expr_stmt|;
block|}
ifdef|#
directive|ifdef
name|ACCESSIBLE_CREATION_DEBUG
else|else
block|{
name|qDebug
argument_list|()
operator|<<
literal|" IS NOT a component"
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
name|interface
operator|->
name|actionInterface
argument_list|()
condition|)
name|ifaces
operator|<<
name|QLatin1String
argument_list|(
name|ATSPI_DBUS_INTERFACE_ACTION
argument_list|)
expr_stmt|;
if|if
condition|(
name|interface
operator|->
name|textInterface
argument_list|()
condition|)
name|ifaces
operator|<<
name|QLatin1String
argument_list|(
name|ATSPI_DBUS_INTERFACE_TEXT
argument_list|)
expr_stmt|;
if|if
condition|(
name|interface
operator|->
name|editableTextInterface
argument_list|()
condition|)
name|ifaces
operator|<<
name|QLatin1String
argument_list|(
name|ATSPI_DBUS_INTERFACE_EDITABLE_TEXT
argument_list|)
expr_stmt|;
if|if
condition|(
name|interface
operator|->
name|valueInterface
argument_list|()
condition|)
name|ifaces
operator|<<
name|QLatin1String
argument_list|(
name|ATSPI_DBUS_INTERFACE_VALUE
argument_list|)
expr_stmt|;
if|if
condition|(
name|interface
operator|->
name|tableInterface
argument_list|()
condition|)
name|ifaces
operator|<<
name|QLatin1String
argument_list|(
name|ATSPI_DBUS_INTERFACE_TABLE
argument_list|)
expr_stmt|;
return|return
name|ifaces
return|;
block|}
end_function
begin_function
DECL|function|relationSet
name|QSpiRelationArray
name|AtSpiAdaptor
operator|::
name|relationSet
parameter_list|(
specifier|const
name|QAIPointer
modifier|&
name|interface
parameter_list|,
specifier|const
name|QDBusConnection
modifier|&
name|connection
parameter_list|)
specifier|const
block|{
typedef|typedef
name|QPair
argument_list|<
name|QAccessibleInterface
modifier|*
argument_list|,
name|QAccessible
operator|::
name|Relation
argument_list|>
name|RelationPair
typedef|;
name|QVector
argument_list|<
name|RelationPair
argument_list|>
name|relationInterfaces
decl_stmt|;
name|relationInterfaces
operator|=
name|interface
operator|->
name|relations
argument_list|()
expr_stmt|;
name|QSpiRelationArray
name|relations
decl_stmt|;
name|Q_FOREACH
argument_list|(
argument|const RelationPair&pair
argument_list|,
argument|relationInterfaces
argument_list|)
block|{
comment|// FIXME: this loop seems a bit strange... "related" always have one item when we check.
comment|//And why is it a list, when it always have one item? And it seems to assume that the QAccessible::Relation enum maps directly to AtSpi
name|QList
argument_list|<
name|QSpiObjectReference
argument_list|>
name|related
decl_stmt|;
name|QDBusObjectPath
name|path
init|=
name|QDBusObjectPath
argument_list|(
name|pathForInterface
argument_list|(
name|QAIPointer
argument_list|(
name|pair
operator|.
name|first
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|related
operator|.
name|append
argument_list|(
name|QSpiObjectReference
argument_list|(
name|connection
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|related
operator|.
name|isEmpty
argument_list|()
condition|)
name|relations
operator|.
name|append
argument_list|(
name|QSpiRelationArrayEntry
argument_list|(
name|qAccessibleRelationToAtSpiRelation
argument_list|(
name|pair
operator|.
name|second
argument_list|)
argument_list|,
name|related
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|relations
return|;
block|}
end_function
begin_function
DECL|function|sendReply
name|void
name|AtSpiAdaptor
operator|::
name|sendReply
parameter_list|(
specifier|const
name|QDBusConnection
modifier|&
name|connection
parameter_list|,
specifier|const
name|QDBusMessage
modifier|&
name|message
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|argument
parameter_list|)
specifier|const
block|{
name|QDBusMessage
name|reply
init|=
name|message
operator|.
name|createReply
argument_list|(
name|argument
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|reply
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|pathForObject
name|QString
name|AtSpiAdaptor
operator|::
name|pathForObject
parameter_list|(
name|QObject
modifier|*
name|object
parameter_list|)
specifier|const
block|{
name|Q_ASSERT
argument_list|(
name|object
argument_list|)
expr_stmt|;
if|if
condition|(
name|object
operator|==
name|qApp
condition|)
block|{
return|return
name|QLatin1String
argument_list|(
name|QSPI_OBJECT_PATH_ROOT
argument_list|)
return|;
block|}
if|if
condition|(
name|qstrcmp
argument_list|(
name|object
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
argument_list|,
literal|"QAction"
argument_list|)
operator|==
literal|0
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"AtSpiAdaptor::pathForObject: warning: creating path with QAction as object."
expr_stmt|;
block|}
name|quintptr
name|uintptr
init|=
cast|reinterpret_cast
argument_list|<
name|quintptr
argument_list|>
argument_list|(
name|object
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|m_handledObjects
operator|.
name|contains
argument_list|(
name|uintptr
argument_list|)
condition|)
name|m_handledObjects
index|[
name|uintptr
index|]
operator|=
name|QPointer
argument_list|<
name|QObject
argument_list|>
argument_list|(
name|object
argument_list|)
expr_stmt|;
return|return
name|QLatin1String
argument_list|(
name|QSPI_OBJECT_PATH_PREFIX
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|uintptr
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|pathForInterface
name|QString
name|AtSpiAdaptor
operator|::
name|pathForInterface
parameter_list|(
specifier|const
name|QAIPointer
modifier|&
name|interface
parameter_list|,
name|bool
name|inDestructor
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|interface
operator|||
operator|!
name|interface
operator|->
name|isValid
argument_list|()
condition|)
return|return
name|QLatin1String
argument_list|(
name|ATSPI_DBUS_PATH_NULL
argument_list|)
return|;
if|if
condition|(
name|interface
operator|->
name|role
argument_list|()
operator|==
name|QAccessible
operator|::
name|Application
condition|)
return|return
name|QLatin1String
argument_list|(
name|QSPI_OBJECT_PATH_ROOT
argument_list|)
return|;
name|QAIPointer
name|interfaceWithObject
init|=
name|interface
decl_stmt|;
name|QString
name|path
decl_stmt|;
if|if
condition|(
name|interface
operator|->
name|role
argument_list|()
operator|==
name|QAccessible
operator|::
name|MenuItem
operator|&&
name|interface
operator|->
name|object
argument_list|()
operator|&&
name|inheritsQAction
argument_list|(
name|interface
operator|->
name|object
argument_list|()
argument_list|)
condition|)
block|{
name|interfaceWithObject
operator|=
name|QAIPointer
argument_list|(
name|interface
operator|->
name|parent
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|childIndex
init|=
name|interfaceWithObject
operator|->
name|indexOfChild
argument_list|(
name|interface
operator|.
name|data
argument_list|()
argument_list|)
decl_stmt|;
name|path
operator|.
name|append
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"/%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|childIndex
argument_list|)
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
operator|!
name|interfaceWithObject
operator|->
name|object
argument_list|()
condition|)
block|{
name|QAIPointer
name|parentInterface
argument_list|(
name|interfaceWithObject
operator|->
name|parent
argument_list|()
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|parentInterface
operator|->
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|index
init|=
name|parentInterface
operator|->
name|indexOfChild
argument_list|(
name|interfaceWithObject
operator|.
name|data
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"Object claims to have child that we cannot navigate to. FIX IT!"
operator|<<
name|parentInterface
operator|->
name|object
argument_list|()
expr_stmt|;
return|return
name|QLatin1String
argument_list|(
name|ATSPI_DBUS_PATH_NULL
argument_list|)
return|;
block|}
name|path
operator|.
name|prepend
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
name|interfaceWithObject
operator|=
name|parentInterface
expr_stmt|;
block|}
name|quintptr
name|uintptr
init|=
cast|reinterpret_cast
argument_list|<
name|quintptr
argument_list|>
argument_list|(
name|interfaceWithObject
operator|->
name|object
argument_list|()
argument_list|)
decl_stmt|;
name|path
operator|.
name|prepend
argument_list|(
name|QLatin1String
argument_list|(
name|QSPI_OBJECT_PATH_PREFIX
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|uintptr
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|inDestructor
operator|&&
operator|!
name|m_handledObjects
operator|.
name|contains
argument_list|(
name|uintptr
argument_list|)
condition|)
name|m_handledObjects
index|[
name|uintptr
index|]
operator|=
name|QPointer
argument_list|<
name|QObject
argument_list|>
argument_list|(
name|interfaceWithObject
operator|->
name|object
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|path
return|;
block|}
end_function
begin_function
DECL|function|inheritsQAction
name|bool
name|AtSpiAdaptor
operator|::
name|inheritsQAction
parameter_list|(
name|QObject
modifier|*
name|object
parameter_list|)
block|{
specifier|const
name|QMetaObject
modifier|*
name|mo
init|=
name|object
operator|->
name|metaObject
argument_list|()
decl_stmt|;
while|while
condition|(
name|mo
condition|)
block|{
specifier|const
name|QLatin1String
name|cn
argument_list|(
name|mo
operator|->
name|className
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cn
operator|==
name|QLatin1String
argument_list|(
literal|"QAction"
argument_list|)
condition|)
return|return
literal|true
return|;
name|mo
operator|=
name|mo
operator|->
name|superClass
argument_list|()
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|// Component
end_comment
begin_function
DECL|function|getWindow
specifier|static
name|QAIPointer
name|getWindow
parameter_list|(
name|QAIPointer
name|interface
parameter_list|)
block|{
if|if
condition|(
name|interface
operator|->
name|role
argument_list|()
operator|==
name|QAccessible
operator|::
name|Window
condition|)
return|return
name|interface
return|;
name|QAIPointer
name|parent
argument_list|(
name|interface
operator|->
name|parent
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|parent
operator|&&
name|parent
operator|->
name|role
argument_list|()
operator|!=
name|QAccessible
operator|::
name|Window
condition|)
name|parent
operator|=
name|QAIPointer
argument_list|(
name|parent
operator|->
name|parent
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|parent
return|;
block|}
end_function
begin_function
DECL|function|getRelativeRect
specifier|static
name|QRect
name|getRelativeRect
parameter_list|(
specifier|const
name|QAIPointer
modifier|&
name|interface
parameter_list|)
block|{
name|QAIPointer
name|window
decl_stmt|;
name|QRect
name|wr
decl_stmt|,
name|cr
decl_stmt|;
name|cr
operator|=
name|interface
operator|->
name|rect
argument_list|()
expr_stmt|;
name|window
operator|=
name|getWindow
argument_list|(
name|interface
argument_list|)
expr_stmt|;
if|if
condition|(
name|window
condition|)
block|{
name|wr
operator|=
name|window
operator|->
name|rect
argument_list|()
expr_stmt|;
name|cr
operator|.
name|setX
argument_list|(
name|cr
operator|.
name|x
argument_list|()
operator|-
name|wr
operator|.
name|x
argument_list|()
argument_list|)
expr_stmt|;
name|cr
operator|.
name|setY
argument_list|(
name|cr
operator|.
name|x
argument_list|()
operator|-
name|wr
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|cr
return|;
block|}
end_function
begin_function
DECL|function|componentInterface
name|bool
name|AtSpiAdaptor
operator|::
name|componentInterface
parameter_list|(
specifier|const
name|QAIPointer
modifier|&
name|interface
parameter_list|,
specifier|const
name|QString
modifier|&
name|function
parameter_list|,
specifier|const
name|QDBusMessage
modifier|&
name|message
parameter_list|,
specifier|const
name|QDBusConnection
modifier|&
name|connection
parameter_list|)
block|{
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"Contains"
argument_list|)
condition|)
block|{
name|bool
name|ret
init|=
literal|false
decl_stmt|;
name|int
name|x
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|int
name|y
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|uint
name|coordType
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|.
name|toUInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|coordType
operator|==
name|ATSPI_COORD_TYPE_SCREEN
condition|)
name|ret
operator|=
name|interface
operator|->
name|rect
argument_list|()
operator|.
name|contains
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
else|else
name|ret
operator|=
name|getRelativeRect
argument_list|(
name|interface
argument_list|)
operator|.
name|contains
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|sendReply
argument_list|(
name|connection
argument_list|,
name|message
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"GetAccessibleAtPoint"
argument_list|)
condition|)
block|{
name|int
name|x
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|int
name|y
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|uint
name|coordType
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|.
name|toUInt
argument_list|()
decl_stmt|;
name|Q_UNUSED
argument_list|(
argument|coordType
argument_list|)
comment|// FIXME
name|QAIPointer
name|childInterface
argument_list|(
name|interface
operator|->
name|childAt
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|)
decl_stmt|;
name|QAIPointer
name|iface
decl_stmt|;
while|while
condition|(
name|childInterface
condition|)
block|{
name|iface
operator|=
name|childInterface
expr_stmt|;
name|childInterface
operator|=
name|QAIPointer
argument_list|(
name|iface
operator|->
name|childAt
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iface
condition|)
block|{
name|QString
name|path
init|=
name|pathForInterface
argument_list|(
name|iface
argument_list|)
decl_stmt|;
name|sendReply
argument_list|(
name|connection
argument_list|,
name|message
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QSpiObjectReference
argument_list|(
name|connection
argument_list|,
name|QDBusObjectPath
argument_list|(
name|path
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sendReply
argument_list|(
name|connection
argument_list|,
name|message
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QSpiObjectReference
argument_list|(
name|connection
argument_list|,
name|QDBusObjectPath
argument_list|(
name|ATSPI_DBUS_PATH_NULL
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"GetAlpha"
argument_list|)
condition|)
block|{
name|sendReply
argument_list|(
name|connection
argument_list|,
name|message
argument_list|,
operator|(
name|double
operator|)
literal|1.0
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"GetExtents"
argument_list|)
condition|)
block|{
name|uint
name|coordType
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toUInt
argument_list|()
decl_stmt|;
name|sendReply
argument_list|(
name|connection
argument_list|,
name|message
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|getExtents
argument_list|(
name|interface
argument_list|,
name|coordType
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"GetLayer"
argument_list|)
condition|)
block|{
name|sendReply
argument_list|(
name|connection
argument_list|,
name|message
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
operator|(
name|uint
operator|)
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"GetMDIZOrder"
argument_list|)
condition|)
block|{
name|sendReply
argument_list|(
name|connection
argument_list|,
name|message
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"GetPosition"
argument_list|)
condition|)
block|{
name|uint
name|coordType
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toUInt
argument_list|()
decl_stmt|;
name|QRect
name|rect
decl_stmt|;
if|if
condition|(
name|coordType
operator|==
name|ATSPI_COORD_TYPE_SCREEN
condition|)
name|rect
operator|=
name|interface
operator|->
name|rect
argument_list|()
expr_stmt|;
else|else
name|rect
operator|=
name|getRelativeRect
argument_list|(
name|interface
argument_list|)
expr_stmt|;
name|QVariantList
name|pos
decl_stmt|;
name|pos
operator|<<
name|rect
operator|.
name|x
argument_list|()
operator|<<
name|rect
operator|.
name|y
argument_list|()
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|message
operator|.
name|createReply
argument_list|(
name|pos
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"GetSize"
argument_list|)
condition|)
block|{
name|QRect
name|rect
init|=
name|interface
operator|->
name|rect
argument_list|()
decl_stmt|;
name|QVariantList
name|size
decl_stmt|;
name|size
operator|<<
name|rect
operator|.
name|width
argument_list|()
operator|<<
name|rect
operator|.
name|height
argument_list|()
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|message
operator|.
name|createReply
argument_list|(
name|size
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"GrabFocus"
argument_list|)
condition|)
block|{
comment|// FIXME: implement focus grabbing
comment|//        if (interface->object()&& interface->object()->isWidgetType()) {
comment|//            QWidget* w = static_cast<QWidget*>(interface->object());
comment|//            w->setFocus(Qt::OtherFocusReason);
comment|//            sendReply(connection, message, true);
comment|//        }
name|sendReply
argument_list|(
name|connection
argument_list|,
name|message
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"SetExtents"
argument_list|)
condition|)
block|{
comment|//        int x = message.arguments().at(0).toInt();
comment|//        int y = message.arguments().at(1).toInt();
comment|//        int width = message.arguments().at(2).toInt();
comment|//        int height = message.arguments().at(3).toInt();
comment|//        uint coordinateType = message.arguments().at(4).toUInt();
name|qWarning
argument_list|()
operator|<<
literal|"SetExtents is not implemented."
expr_stmt|;
name|sendReply
argument_list|(
name|connection
argument_list|,
name|message
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"SetPosition"
argument_list|)
condition|)
block|{
comment|//        int x = message.arguments().at(0).toInt();
comment|//        int y = message.arguments().at(1).toInt();
comment|//        uint coordinateType = message.arguments().at(2).toUInt();
name|qWarning
argument_list|()
operator|<<
literal|"SetPosition is not implemented."
expr_stmt|;
name|sendReply
argument_list|(
name|connection
argument_list|,
name|message
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"SetSize"
argument_list|)
condition|)
block|{
comment|//        int width = message.arguments().at(0).toInt();
comment|//        int height = message.arguments().at(1).toInt();
name|qWarning
argument_list|()
operator|<<
literal|"SetSize is not implemented."
expr_stmt|;
name|sendReply
argument_list|(
name|connection
argument_list|,
name|message
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|()
operator|<<
literal|"WARNING: AtSpiAdaptor::handleMessage does not implement "
operator|<<
name|function
operator|<<
name|message
operator|.
name|path
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|getExtents
name|QRect
name|AtSpiAdaptor
operator|::
name|getExtents
parameter_list|(
specifier|const
name|QAIPointer
modifier|&
name|interface
parameter_list|,
name|uint
name|coordType
parameter_list|)
block|{
return|return
operator|(
name|coordType
operator|==
name|ATSPI_COORD_TYPE_SCREEN
operator|)
condition|?
name|interface
operator|->
name|rect
argument_list|()
else|:
name|getRelativeRect
argument_list|(
name|interface
argument_list|)
return|;
block|}
end_function
begin_comment
comment|// Action interface
end_comment
begin_function
DECL|function|actionInterface
name|bool
name|AtSpiAdaptor
operator|::
name|actionInterface
parameter_list|(
specifier|const
name|QAIPointer
modifier|&
name|interface
parameter_list|,
specifier|const
name|QString
modifier|&
name|function
parameter_list|,
specifier|const
name|QDBusMessage
modifier|&
name|message
parameter_list|,
specifier|const
name|QDBusConnection
modifier|&
name|connection
parameter_list|)
block|{
name|QAccessibleActionInterface
modifier|*
name|actionIface
init|=
name|interface
operator|->
name|actionInterface
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|actionIface
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"GetNActions"
argument_list|)
condition|)
block|{
name|sendReply
argument_list|(
name|connection
argument_list|,
name|message
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QDBusVariant
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|actionIface
operator|->
name|actionNames
argument_list|()
operator|.
name|count
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"DoAction"
argument_list|)
condition|)
block|{
name|int
name|index
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
operator|||
name|index
operator|>=
name|actionIface
operator|->
name|actionNames
argument_list|()
operator|.
name|count
argument_list|()
condition|)
return|return
literal|false
return|;
name|interface
operator|->
name|actionInterface
argument_list|()
operator|->
name|doAction
argument_list|(
name|actionIface
operator|->
name|actionNames
argument_list|()
operator|.
name|at
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
name|sendReply
argument_list|(
name|connection
argument_list|,
name|message
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"GetActions"
argument_list|)
condition|)
block|{
name|sendReply
argument_list|(
name|connection
argument_list|,
name|message
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|getActions
argument_list|(
name|actionIface
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"GetName"
argument_list|)
condition|)
block|{
name|int
name|index
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
operator|||
name|index
operator|>=
name|actionIface
operator|->
name|actionNames
argument_list|()
operator|.
name|count
argument_list|()
condition|)
return|return
literal|false
return|;
name|sendReply
argument_list|(
name|connection
argument_list|,
name|message
argument_list|,
name|actionIface
operator|->
name|actionNames
argument_list|()
operator|.
name|at
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"GetDescription"
argument_list|)
condition|)
block|{
name|int
name|index
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
operator|||
name|index
operator|>=
name|actionIface
operator|->
name|actionNames
argument_list|()
operator|.
name|count
argument_list|()
condition|)
return|return
literal|false
return|;
name|sendReply
argument_list|(
name|connection
argument_list|,
name|message
argument_list|,
name|actionIface
operator|->
name|localizedActionDescription
argument_list|(
name|actionIface
operator|->
name|actionNames
argument_list|()
operator|.
name|at
argument_list|(
name|index
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"GetKeyBinding"
argument_list|)
condition|)
block|{
name|int
name|index
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
operator|||
name|index
operator|>=
name|actionIface
operator|->
name|actionNames
argument_list|()
operator|.
name|count
argument_list|()
condition|)
return|return
literal|false
return|;
name|QStringList
name|keyBindings
decl_stmt|;
name|keyBindings
operator|=
name|actionIface
operator|->
name|keyBindingsForAction
argument_list|(
name|actionIface
operator|->
name|actionNames
argument_list|()
operator|.
name|value
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|keyBindings
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QString
name|acc
init|=
name|interface
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Accelerator
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|acc
operator|.
name|isEmpty
argument_list|()
condition|)
name|keyBindings
operator|.
name|append
argument_list|(
name|acc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|keyBindings
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|sendReply
argument_list|(
name|connection
argument_list|,
name|message
argument_list|,
name|keyBindings
operator|.
name|join
argument_list|(
name|QLatin1Char
argument_list|(
literal|';'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|sendReply
argument_list|(
name|connection
argument_list|,
name|message
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|()
operator|<<
literal|"WARNING: AtSpiAdaptor::handleMessage does not implement "
operator|<<
name|function
operator|<<
name|message
operator|.
name|path
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|getActions
name|QSpiActionArray
name|AtSpiAdaptor
operator|::
name|getActions
parameter_list|(
name|QAccessibleActionInterface
modifier|*
name|actionInterface
parameter_list|)
specifier|const
block|{
name|QSpiActionArray
name|actions
decl_stmt|;
name|Q_FOREACH
argument_list|(
argument|const QString&actionName
argument_list|,
argument|actionInterface->actionNames()
argument_list|)
block|{
name|QSpiAction
name|action
decl_stmt|;
name|QStringList
name|keyBindings
decl_stmt|;
name|action
operator|.
name|description
operator|=
name|actionInterface
operator|->
name|localizedActionDescription
argument_list|(
name|actionName
argument_list|)
expr_stmt|;
name|keyBindings
operator|=
name|actionInterface
operator|->
name|keyBindingsForAction
argument_list|(
name|actionName
argument_list|)
expr_stmt|;
if|if
condition|(
name|keyBindings
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|action
operator|.
name|keyBinding
operator|=
name|keyBindings
index|[
literal|0
index|]
expr_stmt|;
else|else
name|action
operator|.
name|keyBinding
operator|=
name|QString
argument_list|()
expr_stmt|;
name|actions
operator|<<
name|action
expr_stmt|;
block|}
return|return
name|actions
return|;
block|}
end_function
begin_comment
comment|// Text interface
end_comment
begin_function
DECL|function|textInterface
name|bool
name|AtSpiAdaptor
operator|::
name|textInterface
parameter_list|(
specifier|const
name|QAIPointer
modifier|&
name|interface
parameter_list|,
specifier|const
name|QString
modifier|&
name|function
parameter_list|,
specifier|const
name|QDBusMessage
modifier|&
name|message
parameter_list|,
specifier|const
name|QDBusConnection
modifier|&
name|connection
parameter_list|)
block|{
if|if
condition|(
operator|!
name|interface
operator|->
name|textInterface
argument_list|()
condition|)
return|return
literal|false
return|;
comment|// properties
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"GetCaretOffset"
argument_list|)
condition|)
block|{
name|sendReply
argument_list|(
name|connection
argument_list|,
name|message
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QDBusVariant
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|interface
operator|->
name|textInterface
argument_list|()
operator|->
name|cursorPosition
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"GetCharacterCount"
argument_list|)
condition|)
block|{
name|sendReply
argument_list|(
name|connection
argument_list|,
name|message
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QDBusVariant
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|interface
operator|->
name|textInterface
argument_list|()
operator|->
name|characterCount
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// functions
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"AddSelection"
argument_list|)
condition|)
block|{
name|int
name|startOffset
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|int
name|endOffset
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|int
name|lastSelection
init|=
name|interface
operator|->
name|textInterface
argument_list|()
operator|->
name|selectionCount
argument_list|()
decl_stmt|;
name|interface
operator|->
name|textInterface
argument_list|()
operator|->
name|setSelection
argument_list|(
name|lastSelection
argument_list|,
name|startOffset
argument_list|,
name|endOffset
argument_list|)
expr_stmt|;
name|sendReply
argument_list|(
name|connection
argument_list|,
name|message
argument_list|,
operator|(
name|interface
operator|->
name|textInterface
argument_list|()
operator|->
name|selectionCount
argument_list|()
operator|>
name|lastSelection
operator|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"GetAttributeRun"
argument_list|)
condition|)
block|{
name|int
name|offset
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|bool
name|includeDefaults
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toBool
argument_list|()
decl_stmt|;
name|Q_UNUSED
argument_list|(
argument|includeDefaults
argument_list|)
name|connection
operator|.
name|send
argument_list|(
name|message
operator|.
name|createReply
argument_list|(
name|getAttributes
argument_list|(
name|interface
argument_list|,
name|offset
argument_list|,
name|includeDefaults
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"GetAttributeValue"
argument_list|)
condition|)
block|{
name|int
name|offset
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|QString
name|attributeName
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|message
operator|.
name|createReply
argument_list|(
name|getAttributeValue
argument_list|(
name|interface
argument_list|,
name|offset
argument_list|,
name|attributeName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"GetAttributes"
argument_list|)
condition|)
block|{
name|int
name|offset
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|message
operator|.
name|createReply
argument_list|(
name|getAttributes
argument_list|(
name|interface
argument_list|,
name|offset
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"GetBoundedRanges"
argument_list|)
condition|)
block|{
name|int
name|x
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|int
name|y
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|int
name|width
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|int
name|height
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|3
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|uint
name|coordType
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|4
argument_list|)
operator|.
name|toUInt
argument_list|()
decl_stmt|;
name|uint
name|xClipType
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|5
argument_list|)
operator|.
name|toUInt
argument_list|()
decl_stmt|;
name|uint
name|yClipType
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|6
argument_list|)
operator|.
name|toUInt
argument_list|()
decl_stmt|;
name|Q_UNUSED
argument_list|(
argument|x
argument_list|)
name|Q_UNUSED
argument_list|(
argument|y
argument_list|)
name|Q_UNUSED
argument_list|(
argument|width
argument_list|)
name|Q_UNUSED
argument_list|(
argument|height
argument_list|)
name|Q_UNUSED
argument_list|(
argument|coordType
argument_list|)
name|Q_UNUSED
argument_list|(
argument|xClipType
argument_list|)
name|Q_UNUSED
argument_list|(
argument|yClipType
argument_list|)
name|qWarning
argument_list|(
literal|"Not implemented: QSpiAdaptor::GetBoundedRanges"
argument_list|)
expr_stmt|;
name|sendReply
argument_list|(
name|connection
argument_list|,
name|message
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QSpiTextRangeList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"GetCharacterAtOffset"
argument_list|)
condition|)
block|{
name|int
name|offset
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|int
name|start
decl_stmt|;
name|int
name|end
decl_stmt|;
name|QString
name|result
init|=
name|interface
operator|->
name|textInterface
argument_list|()
operator|->
name|textAtOffset
argument_list|(
name|offset
argument_list|,
name|QAccessible2
operator|::
name|CharBoundary
argument_list|,
operator|&
name|start
argument_list|,
operator|&
name|end
argument_list|)
decl_stmt|;
name|sendReply
argument_list|(
name|connection
argument_list|,
name|message
argument_list|,
operator|(
name|int
operator|)
operator|*
operator|(
name|qPrintable
argument_list|(
name|result
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"GetCharacterExtents"
argument_list|)
condition|)
block|{
name|int
name|offset
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|int
name|coordType
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toUInt
argument_list|()
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|message
operator|.
name|createReply
argument_list|(
name|getCharacterExtents
argument_list|(
name|interface
argument_list|,
name|offset
argument_list|,
name|coordType
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"GetDefaultAttributeSet"
argument_list|)
operator|||
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"GetDefaultAttributes"
argument_list|)
condition|)
block|{
comment|// GetDefaultAttributes is deprecated in favour of GetDefaultAttributeSet.
comment|// Empty set seems reasonable. There is no default attribute set.
name|sendReply
argument_list|(
name|connection
argument_list|,
name|message
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QSpiAttributeSet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"GetNSelections"
argument_list|)
condition|)
block|{
name|sendReply
argument_list|(
name|connection
argument_list|,
name|message
argument_list|,
name|interface
operator|->
name|textInterface
argument_list|()
operator|->
name|selectionCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"GetOffsetAtPoint"
argument_list|)
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
name|message
operator|.
name|signature
argument_list|()
expr_stmt|;
name|Q_ASSERT
argument_list|(
operator|!
name|message
operator|.
name|signature
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QPoint
name|point
argument_list|(
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|)
decl_stmt|;
name|uint
name|coordType
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|.
name|toUInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|coordType
operator|==
name|ATSPI_COORD_TYPE_WINDOW
condition|)
block|{
name|QWindow
modifier|*
name|win
init|=
name|interface
operator|->
name|window
argument_list|()
decl_stmt|;
name|point
operator|-=
name|QPoint
argument_list|(
name|win
operator|->
name|x
argument_list|()
argument_list|,
name|win
operator|->
name|y
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|offset
init|=
name|interface
operator|->
name|textInterface
argument_list|()
operator|->
name|offsetAtPoint
argument_list|(
name|point
argument_list|)
decl_stmt|;
name|sendReply
argument_list|(
name|connection
argument_list|,
name|message
argument_list|,
name|offset
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"GetRangeExtents"
argument_list|)
condition|)
block|{
name|int
name|startOffset
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|int
name|endOffset
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|uint
name|coordType
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|.
name|toUInt
argument_list|()
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|message
operator|.
name|createReply
argument_list|(
name|getRangeExtents
argument_list|(
name|interface
argument_list|,
name|startOffset
argument_list|,
name|endOffset
argument_list|,
name|coordType
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"GetSelection"
argument_list|)
condition|)
block|{
name|int
name|selectionNum
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|int
name|start
decl_stmt|,
name|end
decl_stmt|;
name|interface
operator|->
name|textInterface
argument_list|()
operator|->
name|selection
argument_list|(
name|selectionNum
argument_list|,
operator|&
name|start
argument_list|,
operator|&
name|end
argument_list|)
expr_stmt|;
if|if
condition|(
name|start
operator|<
literal|0
condition|)
name|start
operator|=
name|end
operator|=
name|interface
operator|->
name|textInterface
argument_list|()
operator|->
name|cursorPosition
argument_list|()
expr_stmt|;
name|QVariantList
name|sel
decl_stmt|;
name|sel
operator|<<
name|start
operator|<<
name|end
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|message
operator|.
name|createReply
argument_list|(
name|sel
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"GetText"
argument_list|)
condition|)
block|{
name|int
name|startOffset
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|int
name|endOffset
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|endOffset
operator|==
operator|-
literal|1
condition|)
comment|// AT-SPI uses -1 to signal all characters
name|endOffset
operator|=
name|interface
operator|->
name|textInterface
argument_list|()
operator|->
name|characterCount
argument_list|()
expr_stmt|;
name|sendReply
argument_list|(
name|connection
argument_list|,
name|message
argument_list|,
name|interface
operator|->
name|textInterface
argument_list|()
operator|->
name|text
argument_list|(
name|startOffset
argument_list|,
name|endOffset
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"GetTextAfterOffset"
argument_list|)
condition|)
block|{
name|int
name|offset
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|int
name|type
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toUInt
argument_list|()
decl_stmt|;
name|int
name|startOffset
decl_stmt|,
name|endOffset
decl_stmt|;
name|QString
name|text
init|=
name|interface
operator|->
name|textInterface
argument_list|()
operator|->
name|textAfterOffset
argument_list|(
name|offset
argument_list|,
name|qAccessibleBoundaryType
argument_list|(
name|type
argument_list|)
argument_list|,
operator|&
name|startOffset
argument_list|,
operator|&
name|endOffset
argument_list|)
decl_stmt|;
name|QVariantList
name|ret
decl_stmt|;
name|ret
operator|<<
name|text
operator|<<
name|startOffset
operator|<<
name|endOffset
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|message
operator|.
name|createReply
argument_list|(
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"GetTextAtOffset"
argument_list|)
condition|)
block|{
name|int
name|offset
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|int
name|type
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toUInt
argument_list|()
decl_stmt|;
name|int
name|startOffset
decl_stmt|,
name|endOffset
decl_stmt|;
name|QString
name|text
init|=
name|interface
operator|->
name|textInterface
argument_list|()
operator|->
name|textAtOffset
argument_list|(
name|offset
argument_list|,
name|qAccessibleBoundaryType
argument_list|(
name|type
argument_list|)
argument_list|,
operator|&
name|startOffset
argument_list|,
operator|&
name|endOffset
argument_list|)
decl_stmt|;
name|QVariantList
name|ret
decl_stmt|;
name|ret
operator|<<
name|text
operator|<<
name|startOffset
operator|<<
name|endOffset
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|message
operator|.
name|createReply
argument_list|(
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"GetTextBeforeOffset"
argument_list|)
condition|)
block|{
name|int
name|offset
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|int
name|type
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toUInt
argument_list|()
decl_stmt|;
name|int
name|startOffset
decl_stmt|,
name|endOffset
decl_stmt|;
name|QString
name|text
init|=
name|interface
operator|->
name|textInterface
argument_list|()
operator|->
name|textBeforeOffset
argument_list|(
name|offset
argument_list|,
name|qAccessibleBoundaryType
argument_list|(
name|type
argument_list|)
argument_list|,
operator|&
name|startOffset
argument_list|,
operator|&
name|endOffset
argument_list|)
decl_stmt|;
name|QVariantList
name|ret
decl_stmt|;
name|ret
operator|<<
name|text
operator|<<
name|startOffset
operator|<<
name|endOffset
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|message
operator|.
name|createReply
argument_list|(
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"RemoveSelection"
argument_list|)
condition|)
block|{
name|int
name|selectionNum
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|interface
operator|->
name|textInterface
argument_list|()
operator|->
name|removeSelection
argument_list|(
name|selectionNum
argument_list|)
expr_stmt|;
name|sendReply
argument_list|(
name|connection
argument_list|,
name|message
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"SetCaretOffset"
argument_list|)
condition|)
block|{
name|int
name|offset
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|interface
operator|->
name|textInterface
argument_list|()
operator|->
name|setCursorPosition
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|sendReply
argument_list|(
name|connection
argument_list|,
name|message
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"SetSelection"
argument_list|)
condition|)
block|{
name|int
name|selectionNum
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|int
name|startOffset
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|int
name|endOffset
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|interface
operator|->
name|textInterface
argument_list|()
operator|->
name|setSelection
argument_list|(
name|selectionNum
argument_list|,
name|startOffset
argument_list|,
name|endOffset
argument_list|)
expr_stmt|;
name|sendReply
argument_list|(
name|connection
argument_list|,
name|message
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|()
operator|<<
literal|"WARNING: AtSpiAdaptor::handleMessage does not implement "
operator|<<
name|function
operator|<<
name|message
operator|.
name|path
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|qAccessibleBoundaryType
name|QAccessible2
operator|::
name|BoundaryType
name|AtSpiAdaptor
operator|::
name|qAccessibleBoundaryType
parameter_list|(
name|int
name|atspiTextBoundaryType
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|atspiTextBoundaryType
condition|)
block|{
case|case
name|ATSPI_TEXT_BOUNDARY_CHAR
case|:
return|return
name|QAccessible2
operator|::
name|CharBoundary
return|;
case|case
name|ATSPI_TEXT_BOUNDARY_WORD_START
case|:
case|case
name|ATSPI_TEXT_BOUNDARY_WORD_END
case|:
return|return
name|QAccessible2
operator|::
name|WordBoundary
return|;
case|case
name|ATSPI_TEXT_BOUNDARY_SENTENCE_START
case|:
case|case
name|ATSPI_TEXT_BOUNDARY_SENTENCE_END
case|:
return|return
name|QAccessible2
operator|::
name|SentenceBoundary
return|;
case|case
name|ATSPI_TEXT_BOUNDARY_LINE_START
case|:
case|case
name|ATSPI_TEXT_BOUNDARY_LINE_END
case|:
return|return
name|QAccessible2
operator|::
name|LineBoundary
return|;
block|}
name|Q_ASSERT_X
argument_list|(
literal|0
argument_list|,
literal|""
argument_list|,
literal|"Requested invalid boundary type."
argument_list|)
expr_stmt|;
return|return
name|QAccessible2
operator|::
name|CharBoundary
return|;
block|}
end_function
begin_comment
comment|// FIXME all attribute methods below should share code
end_comment
begin_function
DECL|function|getAttributes
name|QVariantList
name|AtSpiAdaptor
operator|::
name|getAttributes
parameter_list|(
specifier|const
name|QAIPointer
modifier|&
name|interface
parameter_list|,
name|int
name|offset
parameter_list|,
name|bool
name|includeDefaults
parameter_list|)
specifier|const
block|{
name|Q_UNUSED
argument_list|(
name|includeDefaults
argument_list|)
expr_stmt|;
name|QSpiAttributeSet
name|set
decl_stmt|;
name|int
name|startOffset
decl_stmt|;
name|int
name|endOffset
decl_stmt|;
name|QString
name|joined
init|=
name|interface
operator|->
name|textInterface
argument_list|()
operator|->
name|attributes
argument_list|(
name|offset
argument_list|,
operator|&
name|startOffset
argument_list|,
operator|&
name|endOffset
argument_list|)
decl_stmt|;
name|QStringList
name|attributes
init|=
name|joined
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|';'
argument_list|)
argument_list|,
name|QString
operator|::
name|SkipEmptyParts
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|attr
decl|,
name|attributes
control|)
block|{
name|QStringList
name|items
decl_stmt|;
name|items
operator|=
name|attr
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
argument_list|,
name|QString
operator|::
name|SkipEmptyParts
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
expr_stmt|;
name|set
index|[
name|items
index|[
literal|0
index|]
index|]
operator|=
name|items
index|[
literal|1
index|]
expr_stmt|;
block|}
name|QVariantList
name|list
decl_stmt|;
name|list
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|set
argument_list|)
operator|<<
name|startOffset
operator|<<
name|endOffset
expr_stmt|;
return|return
name|list
return|;
block|}
end_function
begin_function
DECL|function|getAttributeValue
name|QVariantList
name|AtSpiAdaptor
operator|::
name|getAttributeValue
parameter_list|(
specifier|const
name|QAIPointer
modifier|&
name|interface
parameter_list|,
name|int
name|offset
parameter_list|,
specifier|const
name|QString
modifier|&
name|attributeName
parameter_list|)
specifier|const
block|{
name|QString
name|mapped
decl_stmt|;
name|QString
name|joined
decl_stmt|;
name|QStringList
name|attributes
decl_stmt|;
name|QSpiAttributeSet
name|map
decl_stmt|;
name|int
name|startOffset
decl_stmt|;
name|int
name|endOffset
decl_stmt|;
name|bool
name|defined
decl_stmt|;
name|joined
operator|=
name|interface
operator|->
name|textInterface
argument_list|()
operator|->
name|attributes
argument_list|(
name|offset
argument_list|,
operator|&
name|startOffset
argument_list|,
operator|&
name|endOffset
argument_list|)
expr_stmt|;
name|attributes
operator|=
name|joined
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|';'
argument_list|)
argument_list|,
name|QString
operator|::
name|SkipEmptyParts
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|attr
decl|,
name|attributes
control|)
block|{
name|QStringList
name|items
decl_stmt|;
name|items
operator|=
name|attr
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
argument_list|,
name|QString
operator|::
name|SkipEmptyParts
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
expr_stmt|;
name|map
index|[
name|items
index|[
literal|0
index|]
index|]
operator|=
name|items
index|[
literal|1
index|]
expr_stmt|;
block|}
name|mapped
operator|=
name|map
index|[
name|attributeName
index|]
expr_stmt|;
name|defined
operator|=
name|mapped
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|QVariantList
name|list
decl_stmt|;
name|list
operator|<<
name|mapped
operator|<<
name|startOffset
operator|<<
name|endOffset
operator|<<
name|defined
expr_stmt|;
return|return
name|list
return|;
block|}
end_function
begin_function
DECL|function|getCharacterExtents
name|QRect
name|AtSpiAdaptor
operator|::
name|getCharacterExtents
parameter_list|(
specifier|const
name|QAIPointer
modifier|&
name|interface
parameter_list|,
name|int
name|offset
parameter_list|,
name|uint
name|coordType
parameter_list|)
specifier|const
block|{
name|QRect
name|rect
init|=
name|interface
operator|->
name|textInterface
argument_list|()
operator|->
name|characterRect
argument_list|(
name|offset
argument_list|)
decl_stmt|;
if|if
condition|(
name|coordType
operator|==
name|ATSPI_COORD_TYPE_WINDOW
condition|)
name|rect
operator|=
name|translateRectToWindowCoordinates
argument_list|(
name|interface
argument_list|,
name|rect
argument_list|)
expr_stmt|;
return|return
name|rect
return|;
block|}
end_function
begin_function
DECL|function|getRangeExtents
name|QRect
name|AtSpiAdaptor
operator|::
name|getRangeExtents
parameter_list|(
specifier|const
name|QAIPointer
modifier|&
name|interface
parameter_list|,
name|int
name|startOffset
parameter_list|,
name|int
name|endOffset
parameter_list|,
name|uint
name|coordType
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|endOffset
operator|==
operator|-
literal|1
condition|)
name|endOffset
operator|=
name|interface
operator|->
name|textInterface
argument_list|()
operator|->
name|characterCount
argument_list|()
expr_stmt|;
name|QAccessibleTextInterface
modifier|*
name|textInterface
init|=
name|interface
operator|->
name|textInterface
argument_list|()
decl_stmt|;
if|if
condition|(
name|endOffset
operator|<=
name|startOffset
operator|||
operator|!
name|textInterface
condition|)
return|return
name|QRect
argument_list|()
return|;
name|QRect
name|rect
init|=
name|textInterface
operator|->
name|characterRect
argument_list|(
name|startOffset
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|startOffset
operator|+
literal|1
init|;
name|i
operator|<=
name|endOffset
condition|;
name|i
operator|++
control|)
name|rect
operator|=
name|rect
operator||
name|textInterface
operator|->
name|characterRect
argument_list|(
name|i
argument_list|)
expr_stmt|;
comment|// relative to window
if|if
condition|(
name|coordType
operator|==
name|ATSPI_COORD_TYPE_WINDOW
condition|)
name|rect
operator|=
name|translateRectToWindowCoordinates
argument_list|(
name|interface
argument_list|,
name|rect
argument_list|)
expr_stmt|;
return|return
name|rect
return|;
block|}
end_function
begin_function
DECL|function|translateRectToWindowCoordinates
name|QRect
name|AtSpiAdaptor
operator|::
name|translateRectToWindowCoordinates
parameter_list|(
specifier|const
name|QAIPointer
modifier|&
name|interface
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
block|{
name|QAIPointer
name|window
init|=
name|getWindow
argument_list|(
name|interface
argument_list|)
decl_stmt|;
if|if
condition|(
name|window
condition|)
return|return
name|rect
operator|.
name|translated
argument_list|(
operator|-
name|window
operator|->
name|rect
argument_list|()
operator|.
name|x
argument_list|()
argument_list|,
operator|-
name|window
operator|->
name|rect
argument_list|()
operator|.
name|y
argument_list|()
argument_list|)
return|;
return|return
name|rect
return|;
block|}
end_function
begin_comment
comment|// Editable Text interface
end_comment
begin_function
DECL|function|textForRange
specifier|static
name|QString
name|textForRange
parameter_list|(
name|QAccessibleInterface
modifier|*
name|accessible
parameter_list|,
name|int
name|startOffset
parameter_list|,
name|int
name|endOffset
parameter_list|)
block|{
if|if
condition|(
name|QAccessibleTextInterface
modifier|*
name|textIface
init|=
name|accessible
operator|->
name|textInterface
argument_list|()
condition|)
block|{
if|if
condition|(
name|endOffset
operator|==
operator|-
literal|1
condition|)
name|endOffset
operator|=
name|textIface
operator|->
name|characterCount
argument_list|()
expr_stmt|;
return|return
name|textIface
operator|->
name|text
argument_list|(
name|startOffset
argument_list|,
name|endOffset
argument_list|)
return|;
block|}
name|QString
name|txt
init|=
name|accessible
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Value
argument_list|)
decl_stmt|;
if|if
condition|(
name|endOffset
operator|==
operator|-
literal|1
condition|)
name|endOffset
operator|=
name|txt
operator|.
name|length
argument_list|()
expr_stmt|;
return|return
name|txt
operator|.
name|mid
argument_list|(
name|startOffset
argument_list|,
name|endOffset
operator|-
name|startOffset
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|replaceTextFallback
specifier|static
name|void
name|replaceTextFallback
parameter_list|(
name|QAccessibleInterface
modifier|*
name|accessible
parameter_list|,
name|long
name|startOffset
parameter_list|,
name|long
name|endOffset
parameter_list|,
specifier|const
name|QString
modifier|&
name|txt
parameter_list|)
block|{
name|QString
name|t
init|=
name|textForRange
argument_list|(
name|accessible
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|endOffset
operator|==
operator|-
literal|1
condition|)
name|endOffset
operator|=
name|t
operator|.
name|length
argument_list|()
expr_stmt|;
if|if
condition|(
name|endOffset
operator|-
name|startOffset
operator|==
literal|0
condition|)
name|t
operator|.
name|insert
argument_list|(
name|startOffset
argument_list|,
name|txt
argument_list|)
expr_stmt|;
else|else
name|t
operator|.
name|replace
argument_list|(
name|startOffset
argument_list|,
name|endOffset
operator|-
name|startOffset
argument_list|,
name|txt
argument_list|)
expr_stmt|;
name|accessible
operator|->
name|setText
argument_list|(
name|QAccessible
operator|::
name|Value
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|editableTextInterface
name|bool
name|AtSpiAdaptor
operator|::
name|editableTextInterface
parameter_list|(
specifier|const
name|QAIPointer
modifier|&
name|interface
parameter_list|,
specifier|const
name|QString
modifier|&
name|function
parameter_list|,
specifier|const
name|QDBusMessage
modifier|&
name|message
parameter_list|,
specifier|const
name|QDBusConnection
modifier|&
name|connection
parameter_list|)
block|{
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"CopyText"
argument_list|)
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
name|int
name|startOffset
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|int
name|endOffset
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
specifier|const
name|QString
name|t
init|=
name|textForRange
argument_list|(
name|interface
operator|.
name|data
argument_list|()
argument_list|,
name|startOffset
argument_list|,
name|endOffset
argument_list|)
decl_stmt|;
name|QGuiApplication
operator|::
name|clipboard
argument_list|()
operator|->
name|setText
argument_list|(
name|t
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|connection
operator|.
name|send
argument_list|(
name|message
operator|.
name|createReply
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"CutText"
argument_list|)
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
name|int
name|startOffset
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|int
name|endOffset
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
specifier|const
name|QString
name|t
init|=
name|textForRange
argument_list|(
name|interface
operator|.
name|data
argument_list|()
argument_list|,
name|startOffset
argument_list|,
name|endOffset
argument_list|)
decl_stmt|;
if|if
condition|(
name|QAccessibleEditableTextInterface
modifier|*
name|editableTextIface
init|=
name|interface
operator|->
name|editableTextInterface
argument_list|()
condition|)
name|editableTextIface
operator|->
name|deleteText
argument_list|(
name|startOffset
argument_list|,
name|endOffset
argument_list|)
expr_stmt|;
else|else
name|replaceTextFallback
argument_list|(
name|interface
operator|.
name|data
argument_list|()
argument_list|,
name|startOffset
argument_list|,
name|endOffset
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QGuiApplication
operator|::
name|clipboard
argument_list|()
operator|->
name|setText
argument_list|(
name|t
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|connection
operator|.
name|send
argument_list|(
name|message
operator|.
name|createReply
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"DeleteText"
argument_list|)
condition|)
block|{
name|int
name|startOffset
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|int
name|endOffset
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|QAccessibleEditableTextInterface
modifier|*
name|editableTextIface
init|=
name|interface
operator|->
name|editableTextInterface
argument_list|()
condition|)
name|editableTextIface
operator|->
name|deleteText
argument_list|(
name|startOffset
argument_list|,
name|endOffset
argument_list|)
expr_stmt|;
else|else
name|replaceTextFallback
argument_list|(
name|interface
operator|.
name|data
argument_list|()
argument_list|,
name|startOffset
argument_list|,
name|endOffset
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|message
operator|.
name|createReply
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"InsertText"
argument_list|)
condition|)
block|{
name|int
name|position
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|QString
name|text
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|int
name|length
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|text
operator|.
name|resize
argument_list|(
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|QAccessibleEditableTextInterface
modifier|*
name|editableTextIface
init|=
name|interface
operator|->
name|editableTextInterface
argument_list|()
condition|)
name|editableTextIface
operator|->
name|insertText
argument_list|(
name|position
argument_list|,
name|text
argument_list|)
expr_stmt|;
else|else
name|replaceTextFallback
argument_list|(
name|interface
operator|.
name|data
argument_list|()
argument_list|,
name|position
argument_list|,
name|position
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|message
operator|.
name|createReply
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"PasteText"
argument_list|)
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
name|int
name|position
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
specifier|const
name|QString
name|txt
init|=
name|QGuiApplication
operator|::
name|clipboard
argument_list|()
operator|->
name|text
argument_list|()
decl_stmt|;
if|if
condition|(
name|QAccessibleEditableTextInterface
modifier|*
name|editableTextIface
init|=
name|interface
operator|->
name|editableTextInterface
argument_list|()
condition|)
name|editableTextIface
operator|->
name|insertText
argument_list|(
name|position
argument_list|,
name|txt
argument_list|)
expr_stmt|;
else|else
name|replaceTextFallback
argument_list|(
name|interface
operator|.
name|data
argument_list|()
argument_list|,
name|position
argument_list|,
name|position
argument_list|,
name|txt
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|connection
operator|.
name|send
argument_list|(
name|message
operator|.
name|createReply
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"SetTextContents"
argument_list|)
condition|)
block|{
name|QString
name|newContents
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|interface
operator|->
name|editableTextInterface
argument_list|()
operator|->
name|replaceText
argument_list|(
literal|0
argument_list|,
name|interface
operator|->
name|textInterface
argument_list|()
operator|->
name|characterCount
argument_list|()
argument_list|,
name|newContents
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|message
operator|.
name|createReply
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|connection
operator|.
name|send
argument_list|(
name|message
operator|.
name|createReply
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|()
operator|<<
literal|"WARNING: AtSpiAdaptor::handleMessage does not implement "
operator|<<
name|function
operator|<<
name|message
operator|.
name|path
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|// Value interface
end_comment
begin_function
DECL|function|valueInterface
name|bool
name|AtSpiAdaptor
operator|::
name|valueInterface
parameter_list|(
specifier|const
name|QAIPointer
modifier|&
name|interface
parameter_list|,
specifier|const
name|QString
modifier|&
name|function
parameter_list|,
specifier|const
name|QDBusMessage
modifier|&
name|message
parameter_list|,
specifier|const
name|QDBusConnection
modifier|&
name|connection
parameter_list|)
block|{
if|if
condition|(
literal|0
condition|)
block|{     }
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"SetCurrentValue"
argument_list|)
condition|)
block|{
name|QDBusVariant
name|v
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|.
name|value
argument_list|<
name|QDBusVariant
argument_list|>
argument_list|()
decl_stmt|;
name|double
name|value
init|=
name|v
operator|.
name|variant
argument_list|()
operator|.
name|toDouble
argument_list|()
decl_stmt|;
comment|//Temporary fix
comment|//See https://bugzilla.gnome.org/show_bug.cgi?id=652596
name|interface
operator|->
name|valueInterface
argument_list|()
operator|->
name|setCurrentValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|message
operator|.
name|createReply
argument_list|()
argument_list|)
expr_stmt|;
comment|// FIXME is the reply needed?
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"GetCurrentValue"
argument_list|)
condition|)
block|{
name|bool
name|success
decl_stmt|;
name|double
name|val
init|=
name|interface
operator|->
name|valueInterface
argument_list|()
operator|->
name|currentValue
argument_list|()
operator|.
name|toDouble
argument_list|(
operator|&
name|success
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|success
condition|)
name|qWarning
argument_list|(
literal|"AtSpiAdaptor::valueInterface: Could not convert current value to double."
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|message
operator|.
name|createReply
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QDBusVariant
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|val
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"GetMaximumValue"
argument_list|)
condition|)
block|{
name|bool
name|success
decl_stmt|;
name|double
name|val
init|=
name|interface
operator|->
name|valueInterface
argument_list|()
operator|->
name|maximumValue
argument_list|()
operator|.
name|toDouble
argument_list|(
operator|&
name|success
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|success
condition|)
name|qWarning
argument_list|(
literal|"AtSpiAdaptor::valueInterface: Could not convert current value to double."
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|message
operator|.
name|createReply
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QDBusVariant
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|val
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"GetMinimumIncrement"
argument_list|)
condition|)
block|{
name|connection
operator|.
name|send
argument_list|(
name|message
operator|.
name|createReply
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QDBusVariant
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
literal|0.0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"GetMinimumValue"
argument_list|)
condition|)
block|{
name|bool
name|success
decl_stmt|;
name|double
name|val
init|=
name|interface
operator|->
name|valueInterface
argument_list|()
operator|->
name|minimumValue
argument_list|()
operator|.
name|toDouble
argument_list|(
operator|&
name|success
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|success
condition|)
name|qWarning
argument_list|(
literal|"AtSpiAdaptor::valueInterface: Could not convert current value to double."
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|message
operator|.
name|createReply
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QDBusVariant
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|val
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|()
operator|<<
literal|"WARNING: AtSpiAdaptor::handleMessage does not implement "
operator|<<
name|function
operator|<<
name|message
operator|.
name|path
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|// Table interface
end_comment
begin_function
DECL|function|tableInterface
name|bool
name|AtSpiAdaptor
operator|::
name|tableInterface
parameter_list|(
specifier|const
name|QAIPointer
modifier|&
name|interface
parameter_list|,
specifier|const
name|QString
modifier|&
name|function
parameter_list|,
specifier|const
name|QDBusMessage
modifier|&
name|message
parameter_list|,
specifier|const
name|QDBusConnection
modifier|&
name|connection
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|interface
operator|->
name|tableInterface
argument_list|()
operator|||
name|interface
operator|->
name|tableCellInterface
argument_list|()
operator|)
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"WARNING Qt AtSpiAdaptor: Could not find table interface for: "
operator|<<
name|message
operator|.
name|path
argument_list|()
operator|<<
name|interface
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
literal|0
condition|)
block|{
comment|// properties
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"GetCaption"
argument_list|)
condition|)
block|{
name|QAIPointer
name|captionInterface
init|=
name|QAIPointer
argument_list|(
name|interface
operator|->
name|tableInterface
argument_list|()
operator|->
name|caption
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|captionInterface
condition|)
block|{
name|QSpiObjectReference
name|ref
init|=
name|QSpiObjectReference
argument_list|(
name|connection
argument_list|,
name|QDBusObjectPath
argument_list|(
name|pathForInterface
argument_list|(
name|captionInterface
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|sendReply
argument_list|(
name|connection
argument_list|,
name|message
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|ref
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sendReply
argument_list|(
name|connection
argument_list|,
name|message
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QSpiObjectReference
argument_list|(
name|connection
argument_list|,
name|QDBusObjectPath
argument_list|(
name|ATSPI_DBUS_PATH_NULL
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"GetNColumns"
argument_list|)
condition|)
block|{
name|connection
operator|.
name|send
argument_list|(
name|message
operator|.
name|createReply
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QDBusVariant
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|interface
operator|->
name|tableInterface
argument_list|()
operator|->
name|columnCount
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"GetNRows"
argument_list|)
condition|)
block|{
name|connection
operator|.
name|send
argument_list|(
name|message
operator|.
name|createReply
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QDBusVariant
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|interface
operator|->
name|tableInterface
argument_list|()
operator|->
name|rowCount
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"GetNSelectedColumns"
argument_list|)
condition|)
block|{
name|connection
operator|.
name|send
argument_list|(
name|message
operator|.
name|createReply
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QDBusVariant
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|interface
operator|->
name|tableInterface
argument_list|()
operator|->
name|selectedColumnCount
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"GetNSelectedRows"
argument_list|)
condition|)
block|{
name|connection
operator|.
name|send
argument_list|(
name|message
operator|.
name|createReply
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QDBusVariant
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|interface
operator|->
name|tableInterface
argument_list|()
operator|->
name|selectedRowCount
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"GetSummary"
argument_list|)
condition|)
block|{
name|QAIPointer
name|summary
init|=
name|interface
operator|->
name|tableInterface
argument_list|()
condition|?
name|QAIPointer
argument_list|(
name|interface
operator|->
name|tableInterface
argument_list|()
operator|->
name|summary
argument_list|()
argument_list|)
else|:
name|QAIPointer
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QSpiObjectReference
name|ref
argument_list|(
name|connection
argument_list|,
name|QDBusObjectPath
argument_list|(
name|pathForInterface
argument_list|(
name|summary
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|message
operator|.
name|createReply
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QDBusVariant
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|ref
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"GetAccessibleAt"
argument_list|)
condition|)
block|{
name|int
name|row
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|int
name|column
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|interface
operator|->
name|tableInterface
argument_list|()
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|row
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|column
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|row
operator|<
name|interface
operator|->
name|tableInterface
argument_list|()
operator|->
name|rowCount
argument_list|()
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|column
operator|<
name|interface
operator|->
name|tableInterface
argument_list|()
operator|->
name|columnCount
argument_list|()
argument_list|)
expr_stmt|;
name|QSpiObjectReference
name|ref
decl_stmt|;
name|QAIPointer
name|cell
argument_list|(
name|interface
operator|->
name|tableInterface
argument_list|()
operator|->
name|cellAt
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|cell
condition|)
block|{
name|ref
operator|=
name|QSpiObjectReference
argument_list|(
name|connection
argument_list|,
name|QDBusObjectPath
argument_list|(
name|pathForInterface
argument_list|(
name|cell
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|()
operator|<<
literal|"WARNING: no cell interface returned for "
operator|<<
name|interface
operator|->
name|object
argument_list|()
operator|<<
name|row
operator|<<
name|column
expr_stmt|;
name|ref
operator|=
name|QSpiObjectReference
argument_list|()
expr_stmt|;
block|}
name|connection
operator|.
name|send
argument_list|(
name|message
operator|.
name|createReply
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|ref
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"GetIndexAt"
argument_list|)
condition|)
block|{
name|int
name|row
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|int
name|column
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|QAccessibleInterface
modifier|*
name|cell
init|=
name|interface
operator|->
name|tableInterface
argument_list|()
operator|->
name|cellAt
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|cell
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"WARNING: AtSpiAdaptor::GetIndexAt("
operator|<<
name|row
operator|<<
literal|","
operator|<<
name|column
operator|<<
literal|") did not find a cell. "
operator|<<
name|interface
expr_stmt|;
return|return
literal|false
return|;
block|}
name|int
name|index
init|=
name|interface
operator|->
name|indexOfChild
argument_list|(
name|cell
argument_list|)
decl_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"QSpiAdaptor::GetIndexAt row:"
operator|<<
name|row
operator|<<
literal|" col:"
operator|<<
name|column
operator|<<
literal|" logical index:"
operator|<<
name|index
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|index
operator|>
literal|0
argument_list|)
expr_stmt|;
operator|delete
name|cell
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|message
operator|.
name|createReply
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"GetColumnAtIndex"
argument_list|)
operator|)
operator|||
operator|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"GetRowAtIndex"
argument_list|)
operator|)
condition|)
block|{
name|int
name|index
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|int
name|ret
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|index
operator|>=
literal|0
condition|)
block|{
name|QAIPointer
name|cell
init|=
name|QAIPointer
argument_list|(
name|interface
operator|->
name|child
argument_list|(
name|index
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|cell
condition|)
block|{
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"GetColumnAtIndex"
argument_list|)
condition|)
block|{
if|if
condition|(
name|cell
operator|->
name|role
argument_list|()
operator|==
name|QAccessible
operator|::
name|ColumnHeader
condition|)
block|{
name|ret
operator|=
name|index
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cell
operator|->
name|role
argument_list|()
operator|==
name|QAccessible
operator|::
name|RowHeader
condition|)
block|{
name|ret
operator|=
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|cell
operator|->
name|tableCellInterface
argument_list|()
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"WARNING: AtSpiAdaptor::"
operator|<<
name|function
operator|<<
literal|" No table cell interface: "
operator|<<
name|cell
expr_stmt|;
return|return
literal|false
return|;
block|}
name|ret
operator|=
name|cell
operator|->
name|tableCellInterface
argument_list|()
operator|->
name|columnIndex
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|cell
operator|->
name|role
argument_list|()
operator|==
name|QAccessible
operator|::
name|ColumnHeader
condition|)
block|{
name|ret
operator|=
operator|-
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cell
operator|->
name|role
argument_list|()
operator|==
name|QAccessible
operator|::
name|RowHeader
condition|)
block|{
name|ret
operator|=
name|index
operator|%
name|interface
operator|->
name|tableInterface
argument_list|()
operator|->
name|columnCount
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|cell
operator|->
name|tableCellInterface
argument_list|()
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"WARNING: AtSpiAdaptor::"
operator|<<
name|function
operator|<<
literal|" No table cell interface: "
operator|<<
name|cell
expr_stmt|;
return|return
literal|false
return|;
block|}
name|ret
operator|=
name|cell
operator|->
name|tableCellInterface
argument_list|()
operator|->
name|rowIndex
argument_list|()
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|qWarning
argument_list|()
operator|<<
literal|"WARNING: AtSpiAdaptor::"
operator|<<
name|function
operator|<<
literal|" No cell at index: "
operator|<<
name|index
operator|<<
name|interface
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
name|connection
operator|.
name|send
argument_list|(
name|message
operator|.
name|createReply
argument_list|(
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"GetColumnDescription"
argument_list|)
condition|)
block|{
name|int
name|column
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|message
operator|.
name|createReply
argument_list|(
name|interface
operator|->
name|tableInterface
argument_list|()
operator|->
name|columnDescription
argument_list|(
name|column
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"GetRowDescription"
argument_list|)
condition|)
block|{
name|int
name|row
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|message
operator|.
name|createReply
argument_list|(
name|interface
operator|->
name|tableInterface
argument_list|()
operator|->
name|rowDescription
argument_list|(
name|row
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"GetRowColumnExtentsAtIndex"
argument_list|)
condition|)
block|{
name|int
name|index
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|bool
name|success
init|=
literal|false
decl_stmt|;
name|int
name|row
decl_stmt|,
name|col
decl_stmt|,
name|rowExtents
decl_stmt|,
name|colExtents
decl_stmt|;
name|bool
name|isSelected
decl_stmt|;
name|int
name|cols
init|=
name|interface
operator|->
name|tableInterface
argument_list|()
operator|->
name|columnCount
argument_list|()
decl_stmt|;
name|row
operator|=
name|index
operator|/
name|cols
expr_stmt|;
name|col
operator|=
name|index
operator|%
name|cols
expr_stmt|;
name|QAccessibleTableCellInterface
modifier|*
name|cell
init|=
name|interface
operator|->
name|tableInterface
argument_list|()
operator|->
name|cellAt
argument_list|(
name|row
argument_list|,
name|col
argument_list|)
operator|->
name|tableCellInterface
argument_list|()
decl_stmt|;
if|if
condition|(
name|cell
condition|)
block|{
name|cell
operator|->
name|rowColumnExtents
argument_list|(
operator|&
name|row
argument_list|,
operator|&
name|col
argument_list|,
operator|&
name|rowExtents
argument_list|,
operator|&
name|colExtents
argument_list|,
operator|&
name|isSelected
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
operator|delete
name|cell
expr_stmt|;
block|}
name|QVariantList
name|list
decl_stmt|;
name|list
operator|<<
name|success
operator|<<
name|row
operator|<<
name|col
operator|<<
name|rowExtents
operator|<<
name|colExtents
operator|<<
name|isSelected
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|message
operator|.
name|createReply
argument_list|(
name|list
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"GetColumnExtentAt"
argument_list|)
condition|)
block|{
name|int
name|row
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|int
name|column
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|message
operator|.
name|createReply
argument_list|(
name|interface
operator|->
name|tableInterface
argument_list|()
operator|->
name|cellAt
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
operator|->
name|tableCellInterface
argument_list|()
operator|->
name|columnExtent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"GetRowExtentAt"
argument_list|)
condition|)
block|{
name|int
name|row
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|int
name|column
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|message
operator|.
name|createReply
argument_list|(
name|interface
operator|->
name|tableInterface
argument_list|()
operator|->
name|cellAt
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
operator|->
name|tableCellInterface
argument_list|()
operator|->
name|rowExtent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"GetColumnHeader"
argument_list|)
condition|)
block|{
name|int
name|column
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|QSpiObjectReference
name|ref
decl_stmt|;
name|QAIPointer
name|cell
argument_list|(
name|interface
operator|->
name|tableInterface
argument_list|()
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
name|column
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|cell
operator|&&
name|cell
operator|->
name|tableCellInterface
argument_list|()
condition|)
block|{
name|QList
argument_list|<
name|QAccessibleInterface
modifier|*
argument_list|>
name|header
init|=
name|cell
operator|->
name|tableCellInterface
argument_list|()
operator|->
name|columnHeaderCells
argument_list|()
decl_stmt|;
if|if
condition|(
name|header
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ref
operator|=
name|QSpiObjectReference
argument_list|(
name|connection
argument_list|,
name|QDBusObjectPath
argument_list|(
name|pathForInterface
argument_list|(
name|QAIPointer
argument_list|(
name|header
operator|.
name|takeAt
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|qDeleteAll
argument_list|(
name|header
argument_list|)
expr_stmt|;
block|}
block|}
name|connection
operator|.
name|send
argument_list|(
name|message
operator|.
name|createReply
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|ref
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"GetRowHeader"
argument_list|)
condition|)
block|{
name|int
name|row
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|QSpiObjectReference
name|ref
decl_stmt|;
name|QAccessibleTableCellInterface
modifier|*
name|cell
init|=
name|interface
operator|->
name|tableInterface
argument_list|()
operator|->
name|cellAt
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
operator|->
name|tableCellInterface
argument_list|()
decl_stmt|;
if|if
condition|(
name|cell
condition|)
block|{
name|QList
argument_list|<
name|QAccessibleInterface
modifier|*
argument_list|>
name|header
init|=
name|cell
operator|->
name|rowHeaderCells
argument_list|()
decl_stmt|;
operator|delete
name|cell
expr_stmt|;
if|if
condition|(
name|header
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ref
operator|=
name|QSpiObjectReference
argument_list|(
name|connection
argument_list|,
name|QDBusObjectPath
argument_list|(
name|pathForInterface
argument_list|(
name|QAIPointer
argument_list|(
name|header
operator|.
name|takeAt
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|qDeleteAll
argument_list|(
name|header
argument_list|)
expr_stmt|;
block|}
block|}
name|connection
operator|.
name|send
argument_list|(
name|message
operator|.
name|createReply
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|ref
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"GetSelectedColumns"
argument_list|)
condition|)
block|{
name|connection
operator|.
name|send
argument_list|(
name|message
operator|.
name|createReply
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|interface
operator|->
name|tableInterface
argument_list|()
operator|->
name|selectedColumns
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"GetSelectedRows"
argument_list|)
condition|)
block|{
name|connection
operator|.
name|send
argument_list|(
name|message
operator|.
name|createReply
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|interface
operator|->
name|tableInterface
argument_list|()
operator|->
name|selectedRows
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"IsColumnSelected"
argument_list|)
condition|)
block|{
name|int
name|column
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|message
operator|.
name|createReply
argument_list|(
name|interface
operator|->
name|tableInterface
argument_list|()
operator|->
name|isColumnSelected
argument_list|(
name|column
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"IsRowSelected"
argument_list|)
condition|)
block|{
name|int
name|row
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|message
operator|.
name|createReply
argument_list|(
name|interface
operator|->
name|tableInterface
argument_list|()
operator|->
name|isRowSelected
argument_list|(
name|row
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"IsSelected"
argument_list|)
condition|)
block|{
name|int
name|row
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|int
name|column
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|QAccessibleTableCellInterface
modifier|*
name|cell
init|=
name|interface
operator|->
name|tableInterface
argument_list|()
operator|->
name|cellAt
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
operator|->
name|tableCellInterface
argument_list|()
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|message
operator|.
name|createReply
argument_list|(
name|cell
operator|->
name|isSelected
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
name|cell
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"AddColumnSelection"
argument_list|)
condition|)
block|{
name|int
name|column
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|message
operator|.
name|createReply
argument_list|(
name|interface
operator|->
name|tableInterface
argument_list|()
operator|->
name|selectColumn
argument_list|(
name|column
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"AddRowSelection"
argument_list|)
condition|)
block|{
name|int
name|row
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|message
operator|.
name|createReply
argument_list|(
name|interface
operator|->
name|tableInterface
argument_list|()
operator|->
name|selectRow
argument_list|(
name|row
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"RemoveColumnSelection"
argument_list|)
condition|)
block|{
name|int
name|column
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|message
operator|.
name|createReply
argument_list|(
name|interface
operator|->
name|tableInterface
argument_list|()
operator|->
name|unselectColumn
argument_list|(
name|column
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"RemoveRowSelection"
argument_list|)
condition|)
block|{
name|int
name|row
init|=
name|message
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|message
operator|.
name|createReply
argument_list|(
name|interface
operator|->
name|tableInterface
argument_list|()
operator|->
name|unselectRow
argument_list|(
name|row
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|()
operator|<<
literal|"WARNING: AtSpiAdaptor::handleMessage does not implement "
operator|<<
name|function
operator|<<
name|message
operator|.
name|path
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
