begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qprintpreviewwidget.h"
end_include
begin_include
include|#
directive|include
file|"private/qwidget_p.h"
end_include
begin_include
include|#
directive|include
file|<private/qprinter_p.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qmath.h>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/qboxlayout.h>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/qgraphicsitem.h>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/qgraphicsview.h>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/qscrollbar.h>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/qstyleoption.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_PRINTPREVIEWWIDGET
end_ifndef
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_namespace
namespace|namespace
block|{
DECL|class|PageItem
class|class
name|PageItem
super|:
specifier|public
name|QGraphicsItem
block|{
public|public:
DECL|function|PageItem
name|PageItem
parameter_list|(
name|int
name|_pageNum
parameter_list|,
specifier|const
name|QPicture
modifier|*
name|_pagePicture
parameter_list|,
name|QSize
name|_paperSize
parameter_list|,
name|QRect
name|_pageRect
parameter_list|)
member_init_list|:
name|pageNum
argument_list|(
name|_pageNum
argument_list|)
member_init_list|,
name|pagePicture
argument_list|(
name|_pagePicture
argument_list|)
member_init_list|,
name|paperSize
argument_list|(
name|_paperSize
argument_list|)
member_init_list|,
name|pageRect
argument_list|(
name|_pageRect
argument_list|)
block|{
name|qreal
name|border
init|=
name|qMax
argument_list|(
name|paperSize
operator|.
name|height
argument_list|()
argument_list|,
name|paperSize
operator|.
name|width
argument_list|()
argument_list|)
operator|/
literal|25
decl_stmt|;
name|brect
operator|=
name|QRectF
argument_list|(
name|QPointF
argument_list|(
operator|-
name|border
argument_list|,
operator|-
name|border
argument_list|)
argument_list|,
name|QSizeF
argument_list|(
name|paperSize
argument_list|)
operator|+
name|QSizeF
argument_list|(
literal|2
operator|*
name|border
argument_list|,
literal|2
operator|*
name|border
argument_list|)
argument_list|)
expr_stmt|;
name|setCacheMode
argument_list|(
name|DeviceCoordinateCache
argument_list|)
expr_stmt|;
block|}
DECL|function|boundingRect
specifier|inline
name|QRectF
name|boundingRect
parameter_list|()
specifier|const
block|{
return|return
name|brect
return|;
block|}
DECL|function|pageNumber
specifier|inline
name|int
name|pageNumber
parameter_list|()
specifier|const
block|{
return|return
name|pageNum
return|;
block|}
name|void
name|paint
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QStyleOptionGraphicsItem
modifier|*
name|item
parameter_list|,
name|QWidget
modifier|*
name|widget
parameter_list|)
function_decl|;
private|private:
DECL|member|pageNum
name|int
name|pageNum
decl_stmt|;
DECL|member|pagePicture
specifier|const
name|QPicture
modifier|*
name|pagePicture
decl_stmt|;
DECL|member|paperSize
name|QSize
name|paperSize
decl_stmt|;
DECL|member|pageRect
name|QRect
name|pageRect
decl_stmt|;
DECL|member|brect
name|QRectF
name|brect
decl_stmt|;
block|}
class|;
DECL|function|paint
name|void
name|PageItem
operator|::
name|paint
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QStyleOptionGraphicsItem
modifier|*
name|option
parameter_list|,
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|widget
argument_list|)
expr_stmt|;
if|#
directive|if
literal|0
comment|// Draw item bounding rect, for debugging
block|painter->save();     painter->setPen(QPen(Qt::red, 0));     painter->setBrush(Qt::NoBrush);     painter->drawRect(QRectF(-border()+1.0, -border()+1.0, boundingRect().width()-2, boundingRect().height()-2));     painter->restore();
endif|#
directive|endif
name|QRectF
name|paperRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|paperSize
operator|.
name|width
argument_list|()
argument_list|,
name|paperSize
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
comment|// Draw shadow
name|painter
operator|->
name|setClipRect
argument_list|(
name|option
operator|->
name|exposedRect
argument_list|)
expr_stmt|;
name|qreal
name|shWidth
init|=
name|paperRect
operator|.
name|width
argument_list|()
operator|/
literal|100
decl_stmt|;
name|QRectF
name|rshadow
argument_list|(
name|paperRect
operator|.
name|topRight
argument_list|()
operator|+
name|QPointF
argument_list|(
literal|0
argument_list|,
name|shWidth
argument_list|)
argument_list|,
name|paperRect
operator|.
name|bottomRight
argument_list|()
operator|+
name|QPointF
argument_list|(
name|shWidth
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|QLinearGradient
name|rgrad
argument_list|(
name|rshadow
operator|.
name|topLeft
argument_list|()
argument_list|,
name|rshadow
operator|.
name|topRight
argument_list|()
argument_list|)
decl_stmt|;
name|rgrad
operator|.
name|setColorAt
argument_list|(
literal|0.0
argument_list|,
name|QColor
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|255
argument_list|)
argument_list|)
expr_stmt|;
name|rgrad
operator|.
name|setColorAt
argument_list|(
literal|1.0
argument_list|,
name|QColor
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|->
name|fillRect
argument_list|(
name|rshadow
argument_list|,
name|QBrush
argument_list|(
name|rgrad
argument_list|)
argument_list|)
expr_stmt|;
name|QRectF
name|bshadow
argument_list|(
name|paperRect
operator|.
name|bottomLeft
argument_list|()
operator|+
name|QPointF
argument_list|(
name|shWidth
argument_list|,
literal|0
argument_list|)
argument_list|,
name|paperRect
operator|.
name|bottomRight
argument_list|()
operator|+
name|QPointF
argument_list|(
literal|0
argument_list|,
name|shWidth
argument_list|)
argument_list|)
decl_stmt|;
name|QLinearGradient
name|bgrad
argument_list|(
name|bshadow
operator|.
name|topLeft
argument_list|()
argument_list|,
name|bshadow
operator|.
name|bottomLeft
argument_list|()
argument_list|)
decl_stmt|;
name|bgrad
operator|.
name|setColorAt
argument_list|(
literal|0.0
argument_list|,
name|QColor
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|255
argument_list|)
argument_list|)
expr_stmt|;
name|bgrad
operator|.
name|setColorAt
argument_list|(
literal|1.0
argument_list|,
name|QColor
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|->
name|fillRect
argument_list|(
name|bshadow
argument_list|,
name|QBrush
argument_list|(
name|bgrad
argument_list|)
argument_list|)
expr_stmt|;
name|QRectF
name|cshadow
argument_list|(
name|paperRect
operator|.
name|bottomRight
argument_list|()
argument_list|,
name|paperRect
operator|.
name|bottomRight
argument_list|()
operator|+
name|QPointF
argument_list|(
name|shWidth
argument_list|,
name|shWidth
argument_list|)
argument_list|)
decl_stmt|;
name|QRadialGradient
name|cgrad
argument_list|(
name|cshadow
operator|.
name|topLeft
argument_list|()
argument_list|,
name|shWidth
argument_list|,
name|cshadow
operator|.
name|topLeft
argument_list|()
argument_list|)
decl_stmt|;
name|cgrad
operator|.
name|setColorAt
argument_list|(
literal|0.0
argument_list|,
name|QColor
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|255
argument_list|)
argument_list|)
expr_stmt|;
name|cgrad
operator|.
name|setColorAt
argument_list|(
literal|1.0
argument_list|,
name|QColor
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|->
name|fillRect
argument_list|(
name|cshadow
argument_list|,
name|QBrush
argument_list|(
name|cgrad
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setClipRect
argument_list|(
name|paperRect
operator|&
name|option
operator|->
name|exposedRect
argument_list|)
expr_stmt|;
name|painter
operator|->
name|fillRect
argument_list|(
name|paperRect
argument_list|,
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|pagePicture
condition|)
return|return;
name|painter
operator|->
name|drawPicture
argument_list|(
name|pageRect
operator|.
name|topLeft
argument_list|()
argument_list|,
operator|*
name|pagePicture
argument_list|)
expr_stmt|;
comment|// Effect: make anything drawn in the margins look washed out.
name|QPainterPath
name|path
decl_stmt|;
name|path
operator|.
name|addRect
argument_list|(
name|paperRect
argument_list|)
expr_stmt|;
name|path
operator|.
name|addRect
argument_list|(
name|pageRect
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|QPen
argument_list|(
name|Qt
operator|::
name|NoPen
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setBrush
argument_list|(
name|QColor
argument_list|(
literal|255
argument_list|,
literal|255
argument_list|,
literal|255
argument_list|,
literal|180
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
if|#
directive|if
literal|0
comment|// Draw frame around paper.
block|painter->setPen(QPen(Qt::black, 0));     painter->setBrush(Qt::NoBrush);     painter->drawRect(paperRect);
endif|#
directive|endif
comment|// todo: drawtext "Page N" below paper
block|}
DECL|class|GraphicsView
class|class
name|GraphicsView
super|:
specifier|public
name|QGraphicsView
block|{
name|Q_OBJECT
public|public:
DECL|function|GraphicsView
name|GraphicsView
parameter_list|(
name|QWidget
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QGraphicsView
argument_list|(
name|parent
argument_list|)
block|{
ifdef|#
directive|ifdef
name|Q_WS_MAC
name|setFrameStyle
argument_list|(
name|QFrame
operator|::
name|NoFrame
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
signals|signals:
name|void
name|resized
parameter_list|()
function_decl|;
protected|protected:
DECL|function|resizeEvent
name|void
name|resizeEvent
parameter_list|(
name|QResizeEvent
modifier|*
name|e
parameter_list|)
block|{
name|QGraphicsView
operator|::
name|resizeEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
emit|emit
name|resized
argument_list|()
emit|;
block|}
DECL|function|showEvent
name|void
name|showEvent
parameter_list|(
name|QShowEvent
modifier|*
name|e
parameter_list|)
block|{
name|QGraphicsView
operator|::
name|showEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
emit|emit
name|resized
argument_list|()
emit|;
block|}
block|}
class|;
block|}
end_namespace
begin_comment
comment|// anonymous namespace
end_comment
begin_class
DECL|class|QPrintPreviewWidgetPrivate
class|class
name|QPrintPreviewWidgetPrivate
super|:
specifier|public
name|QWidgetPrivate
block|{
name|Q_DECLARE_PUBLIC
parameter_list|(
name|QPrintPreviewWidget
parameter_list|)
specifier|public
private|:
DECL|function|QPrintPreviewWidgetPrivate
name|QPrintPreviewWidgetPrivate
parameter_list|()
member_init_list|:
name|scene
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|curPage
argument_list|(
literal|1
argument_list|)
member_init_list|,
name|viewMode
argument_list|(
name|QPrintPreviewWidget
operator|::
name|SinglePageView
argument_list|)
member_init_list|,
name|zoomMode
argument_list|(
name|QPrintPreviewWidget
operator|::
name|FitInView
argument_list|)
member_init_list|,
name|zoomFactor
argument_list|(
literal|1
argument_list|)
member_init_list|,
name|initialized
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|fitting
argument_list|(
literal|true
argument_list|)
block|{}
comment|// private slots
name|void
name|_q_fit
parameter_list|(
name|bool
name|doFitting
init|=
literal|false
parameter_list|)
function_decl|;
name|void
name|_q_updateCurrentPage
parameter_list|()
function_decl|;
name|void
name|init
parameter_list|()
function_decl|;
name|void
name|populateScene
parameter_list|()
function_decl|;
name|void
name|layoutPages
parameter_list|()
function_decl|;
name|void
name|generatePreview
parameter_list|()
function_decl|;
name|void
name|setCurrentPage
parameter_list|(
name|int
name|pageNumber
parameter_list|)
function_decl|;
name|void
name|zoom
parameter_list|(
name|qreal
name|zoom
parameter_list|)
function_decl|;
name|void
name|setZoomFactor
parameter_list|(
name|qreal
name|zoomFactor
parameter_list|)
function_decl|;
name|int
name|calcCurrentPage
parameter_list|()
function_decl|;
DECL|member|graphicsView
name|GraphicsView
modifier|*
name|graphicsView
decl_stmt|;
DECL|member|scene
name|QGraphicsScene
modifier|*
name|scene
decl_stmt|;
DECL|member|curPage
name|int
name|curPage
decl_stmt|;
DECL|member|pictures
name|QList
argument_list|<
specifier|const
name|QPicture
modifier|*
argument_list|>
name|pictures
decl_stmt|;
DECL|member|pages
name|QList
argument_list|<
name|QGraphicsItem
modifier|*
argument_list|>
name|pages
decl_stmt|;
DECL|member|viewMode
name|QPrintPreviewWidget
operator|::
name|ViewMode
name|viewMode
decl_stmt|;
DECL|member|zoomMode
name|QPrintPreviewWidget
operator|::
name|ZoomMode
name|zoomMode
decl_stmt|;
DECL|member|zoomFactor
name|qreal
name|zoomFactor
decl_stmt|;
DECL|member|ownPrinter
name|bool
name|ownPrinter
decl_stmt|;
DECL|member|printer
name|QPrinter
modifier|*
name|printer
decl_stmt|;
DECL|member|initialized
name|bool
name|initialized
decl_stmt|;
DECL|member|fitting
name|bool
name|fitting
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|_q_fit
name|void
name|QPrintPreviewWidgetPrivate
operator|::
name|_q_fit
parameter_list|(
name|bool
name|doFitting
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QPrintPreviewWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|curPage
argument_list|<
literal|1
operator|||
name|curPage
argument_list|>
name|pages
operator|.
name|count
argument_list|()
condition|)
return|return;
if|if
condition|(
operator|!
name|doFitting
operator|&&
operator|!
name|fitting
condition|)
return|return;
if|if
condition|(
name|doFitting
operator|&&
name|fitting
condition|)
block|{
name|QRect
name|viewRect
init|=
name|graphicsView
operator|->
name|viewport
argument_list|()
operator|->
name|rect
argument_list|()
decl_stmt|;
if|if
condition|(
name|zoomMode
operator|==
name|QPrintPreviewWidget
operator|::
name|FitInView
condition|)
block|{
name|QList
argument_list|<
name|QGraphicsItem
modifier|*
argument_list|>
name|containedItems
init|=
name|graphicsView
operator|->
name|items
argument_list|(
name|viewRect
argument_list|,
name|Qt
operator|::
name|ContainsItemBoundingRect
argument_list|)
decl_stmt|;
foreach|foreach
control|(
name|QGraphicsItem
modifier|*
name|item
decl|,
name|containedItems
control|)
block|{
name|PageItem
modifier|*
name|pg
init|=
cast|static_cast
argument_list|<
name|PageItem
operator|*
argument_list|>
argument_list|(
name|item
argument_list|)
decl_stmt|;
if|if
condition|(
name|pg
operator|->
name|pageNumber
argument_list|()
operator|==
name|curPage
condition|)
return|return;
block|}
block|}
name|int
name|newPage
init|=
name|calcCurrentPage
argument_list|()
decl_stmt|;
if|if
condition|(
name|newPage
operator|!=
name|curPage
condition|)
name|curPage
operator|=
name|newPage
expr_stmt|;
block|}
name|QRectF
name|target
init|=
name|pages
operator|.
name|at
argument_list|(
name|curPage
operator|-
literal|1
argument_list|)
operator|->
name|sceneBoundingRect
argument_list|()
decl_stmt|;
if|if
condition|(
name|viewMode
operator|==
name|QPrintPreviewWidget
operator|::
name|FacingPagesView
condition|)
block|{
comment|// fit two pages
if|if
condition|(
name|curPage
operator|%
literal|2
condition|)
name|target
operator|.
name|setLeft
argument_list|(
name|target
operator|.
name|left
argument_list|()
operator|-
name|target
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|target
operator|.
name|setRight
argument_list|(
name|target
operator|.
name|right
argument_list|()
operator|+
name|target
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|viewMode
operator|==
name|QPrintPreviewWidget
operator|::
name|AllPagesView
condition|)
block|{
name|target
operator|=
name|scene
operator|->
name|itemsBoundingRect
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|zoomMode
operator|==
name|QPrintPreviewWidget
operator|::
name|FitToWidth
condition|)
block|{
name|QTransform
name|t
decl_stmt|;
name|qreal
name|scale
init|=
name|graphicsView
operator|->
name|viewport
argument_list|()
operator|->
name|width
argument_list|()
operator|/
name|target
operator|.
name|width
argument_list|()
decl_stmt|;
name|t
operator|.
name|scale
argument_list|(
name|scale
argument_list|,
name|scale
argument_list|)
expr_stmt|;
name|graphicsView
operator|->
name|setTransform
argument_list|(
name|t
argument_list|)
expr_stmt|;
if|if
condition|(
name|doFitting
operator|&&
name|fitting
condition|)
block|{
name|QRectF
name|viewSceneRect
init|=
name|graphicsView
operator|->
name|viewportTransform
argument_list|()
operator|.
name|mapRect
argument_list|(
name|graphicsView
operator|->
name|viewport
argument_list|()
operator|->
name|rect
argument_list|()
argument_list|)
decl_stmt|;
name|viewSceneRect
operator|.
name|moveTop
argument_list|(
name|target
operator|.
name|top
argument_list|()
argument_list|)
expr_stmt|;
name|graphicsView
operator|->
name|ensureVisible
argument_list|(
name|viewSceneRect
argument_list|)
expr_stmt|;
comment|// Nah...
block|}
block|}
else|else
block|{
name|graphicsView
operator|->
name|fitInView
argument_list|(
name|target
argument_list|,
name|Qt
operator|::
name|KeepAspectRatio
argument_list|)
expr_stmt|;
if|if
condition|(
name|zoomMode
operator|==
name|QPrintPreviewWidget
operator|::
name|FitInView
condition|)
block|{
name|int
name|step
init|=
name|qRound
argument_list|(
name|graphicsView
operator|->
name|matrix
argument_list|()
operator|.
name|mapRect
argument_list|(
name|target
argument_list|)
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
name|graphicsView
operator|->
name|verticalScrollBar
argument_list|()
operator|->
name|setSingleStep
argument_list|(
name|step
argument_list|)
expr_stmt|;
name|graphicsView
operator|->
name|verticalScrollBar
argument_list|()
operator|->
name|setPageStep
argument_list|(
name|step
argument_list|)
expr_stmt|;
block|}
block|}
name|zoomFactor
operator|=
name|graphicsView
operator|->
name|transform
argument_list|()
operator|.
name|m11
argument_list|()
operator|*
operator|(
name|float
argument_list|(
name|printer
operator|->
name|logicalDpiY
argument_list|()
argument_list|)
operator|/
name|q
operator|->
name|logicalDpiY
argument_list|()
operator|)
expr_stmt|;
emit|emit
name|q
operator|->
name|previewChanged
argument_list|()
emit|;
block|}
end_function
begin_function
DECL|function|_q_updateCurrentPage
name|void
name|QPrintPreviewWidgetPrivate
operator|::
name|_q_updateCurrentPage
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QPrintPreviewWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|viewMode
operator|==
name|QPrintPreviewWidget
operator|::
name|AllPagesView
condition|)
return|return;
name|int
name|newPage
init|=
name|calcCurrentPage
argument_list|()
decl_stmt|;
if|if
condition|(
name|newPage
operator|!=
name|curPage
condition|)
block|{
name|curPage
operator|=
name|newPage
expr_stmt|;
emit|emit
name|q
operator|->
name|previewChanged
argument_list|()
emit|;
block|}
block|}
end_function
begin_function
DECL|function|calcCurrentPage
name|int
name|QPrintPreviewWidgetPrivate
operator|::
name|calcCurrentPage
parameter_list|()
block|{
name|int
name|maxArea
init|=
literal|0
decl_stmt|;
name|int
name|newPage
init|=
name|curPage
decl_stmt|;
name|QRect
name|viewRect
init|=
name|graphicsView
operator|->
name|viewport
argument_list|()
operator|->
name|rect
argument_list|()
decl_stmt|;
name|QList
argument_list|<
name|QGraphicsItem
modifier|*
argument_list|>
name|items
init|=
name|graphicsView
operator|->
name|items
argument_list|(
name|viewRect
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|items
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|PageItem
modifier|*
name|pg
init|=
cast|static_cast
argument_list|<
name|PageItem
operator|*
argument_list|>
argument_list|(
name|items
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|QRect
name|overlap
init|=
name|graphicsView
operator|->
name|mapFromScene
argument_list|(
name|pg
operator|->
name|sceneBoundingRect
argument_list|()
argument_list|)
operator|.
name|boundingRect
argument_list|()
operator|&
name|viewRect
decl_stmt|;
name|int
name|area
init|=
name|overlap
operator|.
name|width
argument_list|()
operator|*
name|overlap
operator|.
name|height
argument_list|()
decl_stmt|;
if|if
condition|(
name|area
operator|>
name|maxArea
condition|)
block|{
name|maxArea
operator|=
name|area
expr_stmt|;
name|newPage
operator|=
name|pg
operator|->
name|pageNumber
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|area
operator|==
name|maxArea
operator|&&
name|pg
operator|->
name|pageNumber
argument_list|()
operator|<
name|newPage
condition|)
block|{
name|newPage
operator|=
name|pg
operator|->
name|pageNumber
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|newPage
return|;
block|}
end_function
begin_function
DECL|function|init
name|void
name|QPrintPreviewWidgetPrivate
operator|::
name|init
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QPrintPreviewWidget
argument_list|)
expr_stmt|;
name|graphicsView
operator|=
operator|new
name|GraphicsView
expr_stmt|;
name|graphicsView
operator|->
name|setInteractive
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|graphicsView
operator|->
name|setDragMode
argument_list|(
name|QGraphicsView
operator|::
name|ScrollHandDrag
argument_list|)
expr_stmt|;
name|graphicsView
operator|->
name|setViewportUpdateMode
argument_list|(
name|QGraphicsView
operator|::
name|SmartViewportUpdate
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|graphicsView
operator|->
name|verticalScrollBar
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|valueChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_updateCurrentPage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|graphicsView
argument_list|,
name|SIGNAL
argument_list|(
name|resized
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_fit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|scene
operator|=
operator|new
name|QGraphicsScene
argument_list|(
name|graphicsView
argument_list|)
expr_stmt|;
name|scene
operator|->
name|setBackgroundBrush
argument_list|(
name|Qt
operator|::
name|gray
argument_list|)
expr_stmt|;
name|graphicsView
operator|->
name|setScene
argument_list|(
name|scene
argument_list|)
expr_stmt|;
name|QVBoxLayout
modifier|*
name|layout
init|=
operator|new
name|QVBoxLayout
decl_stmt|;
name|q
operator|->
name|setLayout
argument_list|(
name|layout
argument_list|)
expr_stmt|;
name|layout
operator|->
name|setContentsMargins
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
name|graphicsView
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|populateScene
name|void
name|QPrintPreviewWidgetPrivate
operator|::
name|populateScene
parameter_list|()
block|{
comment|// remove old pages
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pages
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
name|scene
operator|->
name|removeItem
argument_list|(
name|pages
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|qDeleteAll
argument_list|(
name|pages
argument_list|)
expr_stmt|;
name|pages
operator|.
name|clear
argument_list|()
expr_stmt|;
name|int
name|numPages
init|=
name|pictures
operator|.
name|count
argument_list|()
decl_stmt|;
name|QSize
name|paperSize
init|=
name|printer
operator|->
name|paperRect
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|QRect
name|pageRect
init|=
name|printer
operator|->
name|pageRect
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numPages
condition|;
name|i
operator|++
control|)
block|{
name|PageItem
modifier|*
name|item
init|=
operator|new
name|PageItem
argument_list|(
name|i
operator|+
literal|1
argument_list|,
name|pictures
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|paperSize
argument_list|,
name|pageRect
argument_list|)
decl_stmt|;
name|scene
operator|->
name|addItem
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|pages
operator|.
name|append
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|layoutPages
name|void
name|QPrintPreviewWidgetPrivate
operator|::
name|layoutPages
parameter_list|()
block|{
name|int
name|numPages
init|=
name|pages
operator|.
name|count
argument_list|()
decl_stmt|;
if|if
condition|(
name|numPages
operator|<
literal|1
condition|)
return|return;
name|int
name|numPagePlaces
init|=
name|numPages
decl_stmt|;
name|int
name|cols
init|=
literal|1
decl_stmt|;
comment|// singleMode and default
if|if
condition|(
name|viewMode
operator|==
name|QPrintPreviewWidget
operator|::
name|AllPagesView
condition|)
block|{
if|if
condition|(
name|printer
operator|->
name|orientation
argument_list|()
operator|==
name|QPrinter
operator|::
name|Portrait
condition|)
name|cols
operator|=
name|qCeil
argument_list|(
name|qSqrt
argument_list|(
operator|(
name|float
operator|)
name|numPages
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|cols
operator|=
name|qFloor
argument_list|(
name|qSqrt
argument_list|(
operator|(
name|float
operator|)
name|numPages
argument_list|)
argument_list|)
expr_stmt|;
name|cols
operator|+=
name|cols
operator|%
literal|2
expr_stmt|;
comment|// Nicer with an even number of cols
block|}
elseif|else
if|if
condition|(
name|viewMode
operator|==
name|QPrintPreviewWidget
operator|::
name|FacingPagesView
condition|)
block|{
name|cols
operator|=
literal|2
expr_stmt|;
name|numPagePlaces
operator|+=
literal|1
expr_stmt|;
block|}
name|int
name|rows
init|=
name|qCeil
argument_list|(
name|qreal
argument_list|(
name|numPagePlaces
argument_list|)
operator|/
name|cols
argument_list|)
decl_stmt|;
name|qreal
name|itemWidth
init|=
name|pages
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|->
name|boundingRect
argument_list|()
operator|.
name|width
argument_list|()
decl_stmt|;
name|qreal
name|itemHeight
init|=
name|pages
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|->
name|boundingRect
argument_list|()
operator|.
name|height
argument_list|()
decl_stmt|;
name|int
name|pageNum
init|=
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rows
operator|&&
name|pageNum
operator|<=
name|numPages
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|cols
operator|&&
name|pageNum
operator|<=
name|numPages
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|i
operator|&&
operator|!
name|j
operator|&&
name|viewMode
operator|==
name|QPrintPreviewWidget
operator|::
name|FacingPagesView
condition|)
block|{
comment|// Front page doesn't have a facing page
continue|continue;
block|}
else|else
block|{
name|pages
operator|.
name|at
argument_list|(
name|pageNum
operator|-
literal|1
argument_list|)
operator|->
name|setPos
argument_list|(
name|QPointF
argument_list|(
name|j
operator|*
name|itemWidth
argument_list|,
name|i
operator|*
name|itemHeight
argument_list|)
argument_list|)
expr_stmt|;
name|pageNum
operator|++
expr_stmt|;
block|}
block|}
block|}
name|scene
operator|->
name|setSceneRect
argument_list|(
name|scene
operator|->
name|itemsBoundingRect
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|generatePreview
name|void
name|QPrintPreviewWidgetPrivate
operator|::
name|generatePreview
parameter_list|()
block|{
comment|//### If QPrinter::setPreviewMode() becomes public, handle the
comment|//### case that we have been constructed with a printer that
comment|//### _already_ has been preview-painted to, so we should
comment|//### initially just show the pages it already contains, and not
comment|//### emit paintRequested() until the user changes some parameter
name|Q_Q
argument_list|(
name|QPrintPreviewWidget
argument_list|)
expr_stmt|;
name|printer
operator|->
name|d_func
argument_list|()
operator|->
name|setPreviewMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
emit|emit
name|q
operator|->
name|paintRequested
argument_list|(
name|printer
argument_list|)
emit|;
name|printer
operator|->
name|d_func
argument_list|()
operator|->
name|setPreviewMode
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|pictures
operator|=
name|printer
operator|->
name|d_func
argument_list|()
operator|->
name|previewPages
argument_list|()
expr_stmt|;
name|populateScene
argument_list|()
expr_stmt|;
comment|// i.e. setPreviewPrintedPictures() e.l.
name|layoutPages
argument_list|()
expr_stmt|;
name|curPage
operator|=
name|qBound
argument_list|(
literal|1
argument_list|,
name|curPage
argument_list|,
name|pages
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|fitting
condition|)
name|_q_fit
argument_list|()
expr_stmt|;
emit|emit
name|q
operator|->
name|previewChanged
argument_list|()
emit|;
block|}
end_function
begin_function
DECL|function|setCurrentPage
name|void
name|QPrintPreviewWidgetPrivate
operator|::
name|setCurrentPage
parameter_list|(
name|int
name|pageNumber
parameter_list|)
block|{
if|if
condition|(
name|pageNumber
argument_list|<
literal|1
operator|||
name|pageNumber
argument_list|>
name|pages
operator|.
name|count
argument_list|()
condition|)
return|return;
name|int
name|lastPage
init|=
name|curPage
decl_stmt|;
name|curPage
operator|=
name|pageNumber
expr_stmt|;
if|if
condition|(
name|lastPage
operator|!=
name|curPage
operator|&&
name|lastPage
operator|>
literal|0
operator|&&
name|lastPage
operator|<=
name|pages
operator|.
name|count
argument_list|()
condition|)
block|{
if|if
condition|(
name|zoomMode
operator|!=
name|QPrintPreviewWidget
operator|::
name|FitInView
condition|)
block|{
name|QScrollBar
modifier|*
name|hsc
init|=
name|graphicsView
operator|->
name|horizontalScrollBar
argument_list|()
decl_stmt|;
name|QScrollBar
modifier|*
name|vsc
init|=
name|graphicsView
operator|->
name|verticalScrollBar
argument_list|()
decl_stmt|;
name|QPointF
name|pt
init|=
name|graphicsView
operator|->
name|transform
argument_list|()
operator|.
name|map
argument_list|(
name|pages
operator|.
name|at
argument_list|(
name|curPage
operator|-
literal|1
argument_list|)
operator|->
name|pos
argument_list|()
argument_list|)
decl_stmt|;
name|vsc
operator|->
name|setValue
argument_list|(
name|int
argument_list|(
name|pt
operator|.
name|y
argument_list|()
argument_list|)
operator|-
literal|10
argument_list|)
expr_stmt|;
name|hsc
operator|->
name|setValue
argument_list|(
name|int
argument_list|(
name|pt
operator|.
name|x
argument_list|()
argument_list|)
operator|-
literal|10
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|graphicsView
operator|->
name|centerOn
argument_list|(
name|pages
operator|.
name|at
argument_list|(
name|curPage
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|zoom
name|void
name|QPrintPreviewWidgetPrivate
operator|::
name|zoom
parameter_list|(
name|qreal
name|zoom
parameter_list|)
block|{
name|zoomFactor
operator|*=
name|zoom
expr_stmt|;
name|graphicsView
operator|->
name|scale
argument_list|(
name|zoom
argument_list|,
name|zoom
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setZoomFactor
name|void
name|QPrintPreviewWidgetPrivate
operator|::
name|setZoomFactor
parameter_list|(
name|qreal
name|_zoomFactor
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QPrintPreviewWidget
argument_list|)
expr_stmt|;
name|zoomFactor
operator|=
name|_zoomFactor
expr_stmt|;
name|graphicsView
operator|->
name|resetTransform
argument_list|()
expr_stmt|;
name|int
name|dpi_y
init|=
name|q
operator|->
name|logicalDpiY
argument_list|()
decl_stmt|;
name|int
name|printer_dpi_y
init|=
name|printer
operator|->
name|logicalDpiY
argument_list|()
decl_stmt|;
name|graphicsView
operator|->
name|scale
argument_list|(
name|zoomFactor
operator|*
operator|(
name|dpi_y
operator|/
name|float
argument_list|(
name|printer_dpi_y
argument_list|)
operator|)
argument_list|,
name|zoomFactor
operator|*
operator|(
name|dpi_y
operator|/
name|float
argument_list|(
name|printer_dpi_y
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|///////////////////////////////////////
end_comment
begin_comment
comment|/*!     \class QPrintPreviewWidget     \since 4.4      \brief The QPrintPreviewWidget class provides a widget for     previewing page layouts for printer output.      \ingroup printing     \inmodule QtPrintSupport      QPrintPreviewDialog uses a QPrintPreviewWidget internally, and the     purpose of QPrintPreviewWidget is to make it possible to embed the     preview into other widgets. It also makes it possible to build a different     user interface around it than the default one provided with QPrintPreviewDialog.      Using QPrintPreviewWidget is straightforward:      \list 1     \o Create the QPrintPreviewWidget      Construct the QPrintPreviewWidget either by passing in an     existing QPrinter object, or have QPrintPreviewWidget create a     default constructed QPrinter object for you.      \o Connect the paintRequested() signal to a slot.      When the widget needs to generate a set of preview pages, a     paintRequested() signal will be emitted from the widget. Connect a     slot to this signal, and draw onto the QPrinter passed in as a     signal parameter. Call QPrinter::newPage(), to start a new     page in the preview.      \endlist      \sa QPrinter, QPrintDialog, QPageSetupDialog, QPrintPreviewDialog */
end_comment
begin_comment
comment|/*!     \enum QPrintPreviewWidget::ViewMode      This enum is used to describe the view mode of the preview widget.      \value SinglePageView   A mode where single pages in the preview                             is viewed.      \value FacingPagesView  A mode where the facing pages in the preview                             is viewed.      \value AllPagesView     A view mode where all the pages in the preview                             is viewed. */
end_comment
begin_comment
comment|/*!     \enum QPrintPreviewWidget::ZoomMode      This enum is used to describe zoom mode of the preview widget.      \value CustomZoom  The zoom is set to a custom zoom value.      \value FitToWidth  This mode fits the current page to the width of the view.      \value FitInView   This mode fits the current page inside the view.  */
end_comment
begin_comment
comment|/*!     Constructs a QPrintPreviewWidget based on \a printer and with \a     parent as the parent widget. The widget flags \a flags are passed on     to the QWidget constructor.      \sa QWidget::setWindowFlags() */
end_comment
begin_constructor
DECL|function|QPrintPreviewWidget
name|QPrintPreviewWidget
operator|::
name|QPrintPreviewWidget
parameter_list|(
name|QPrinter
modifier|*
name|printer
parameter_list|,
name|QWidget
modifier|*
name|parent
parameter_list|,
name|Qt
operator|::
name|WindowFlags
name|flags
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
operator|*
operator|new
name|QPrintPreviewWidgetPrivate
argument_list|,
name|parent
argument_list|,
name|flags
argument_list|)
block|{
name|Q_D
argument_list|(
name|QPrintPreviewWidget
argument_list|)
expr_stmt|;
name|d
operator|->
name|printer
operator|=
name|printer
expr_stmt|;
name|d
operator|->
name|ownPrinter
operator|=
literal|false
expr_stmt|;
name|d
operator|->
name|init
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     \overload      This will cause QPrintPreviewWidget to create an internal, default     constructed QPrinter object, which will be used to generate the     preview. */
end_comment
begin_constructor
DECL|function|QPrintPreviewWidget
name|QPrintPreviewWidget
operator|::
name|QPrintPreviewWidget
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|,
name|Qt
operator|::
name|WindowFlags
name|flags
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
operator|*
operator|new
name|QPrintPreviewWidgetPrivate
argument_list|,
name|parent
argument_list|,
name|flags
argument_list|)
block|{
name|Q_D
argument_list|(
name|QPrintPreviewWidget
argument_list|)
expr_stmt|;
name|d
operator|->
name|printer
operator|=
operator|new
name|QPrinter
expr_stmt|;
name|d
operator|->
name|ownPrinter
operator|=
literal|true
expr_stmt|;
name|d
operator|->
name|init
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Destroys the QPrintPreviewWidget. */
end_comment
begin_destructor
DECL|function|~QPrintPreviewWidget
name|QPrintPreviewWidget
operator|::
name|~
name|QPrintPreviewWidget
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QPrintPreviewWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|ownPrinter
condition|)
operator|delete
name|d
operator|->
name|printer
expr_stmt|;
block|}
end_destructor
begin_comment
comment|/*!     Returns the current view mode. The default view mode is SinglePageView. */
end_comment
begin_function
DECL|function|viewMode
name|QPrintPreviewWidget
operator|::
name|ViewMode
name|QPrintPreviewWidget
operator|::
name|viewMode
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPrintPreviewWidget
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|viewMode
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the view mode to \a mode. The default view mode is     SinglePageView. */
end_comment
begin_function
DECL|function|setViewMode
name|void
name|QPrintPreviewWidget
operator|::
name|setViewMode
parameter_list|(
name|ViewMode
name|mode
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPrintPreviewWidget
argument_list|)
expr_stmt|;
name|d
operator|->
name|viewMode
operator|=
name|mode
expr_stmt|;
name|d
operator|->
name|layoutPages
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|viewMode
operator|==
name|AllPagesView
condition|)
block|{
name|d
operator|->
name|graphicsView
operator|->
name|fitInView
argument_list|(
name|d
operator|->
name|scene
operator|->
name|itemsBoundingRect
argument_list|()
argument_list|,
name|Qt
operator|::
name|KeepAspectRatio
argument_list|)
expr_stmt|;
name|d
operator|->
name|fitting
operator|=
literal|false
expr_stmt|;
name|d
operator|->
name|zoomMode
operator|=
name|QPrintPreviewWidget
operator|::
name|CustomZoom
expr_stmt|;
name|d
operator|->
name|zoomFactor
operator|=
name|d
operator|->
name|graphicsView
operator|->
name|transform
argument_list|()
operator|.
name|m11
argument_list|()
operator|*
operator|(
name|float
argument_list|(
name|d
operator|->
name|printer
operator|->
name|logicalDpiY
argument_list|()
argument_list|)
operator|/
name|logicalDpiY
argument_list|()
operator|)
expr_stmt|;
emit|emit
name|previewChanged
argument_list|()
emit|;
block|}
else|else
block|{
name|d
operator|->
name|fitting
operator|=
literal|true
expr_stmt|;
name|d
operator|->
name|_q_fit
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     Returns the current orientation of the preview. This value is     obtained from the QPrinter object associated with the preview. */
end_comment
begin_function
DECL|function|orientation
name|QPrinter
operator|::
name|Orientation
name|QPrintPreviewWidget
operator|::
name|orientation
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPrintPreviewWidget
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|printer
operator|->
name|orientation
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the current orientation to \a orientation. This value will be     set on the QPrinter object associated with the preview. */
end_comment
begin_function
DECL|function|setOrientation
name|void
name|QPrintPreviewWidget
operator|::
name|setOrientation
parameter_list|(
name|QPrinter
operator|::
name|Orientation
name|orientation
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPrintPreviewWidget
argument_list|)
expr_stmt|;
name|d
operator|->
name|printer
operator|->
name|setOrientation
argument_list|(
name|orientation
argument_list|)
expr_stmt|;
name|d
operator|->
name|generatePreview
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Prints the preview to the printer associated with the preview. */
end_comment
begin_function
DECL|function|print
name|void
name|QPrintPreviewWidget
operator|::
name|print
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QPrintPreviewWidget
argument_list|)
expr_stmt|;
comment|// ### make use of the generated pages
emit|emit
name|paintRequested
argument_list|(
name|d
operator|->
name|printer
argument_list|)
emit|;
block|}
end_function
begin_comment
comment|/*!     Zooms the current view in by \a factor. The default value for \a     factor is 1.1, which means the view will be scaled up by 10%. */
end_comment
begin_function
DECL|function|zoomIn
name|void
name|QPrintPreviewWidget
operator|::
name|zoomIn
parameter_list|(
name|qreal
name|factor
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPrintPreviewWidget
argument_list|)
expr_stmt|;
name|d
operator|->
name|fitting
operator|=
literal|false
expr_stmt|;
name|d
operator|->
name|zoomMode
operator|=
name|QPrintPreviewWidget
operator|::
name|CustomZoom
expr_stmt|;
name|d
operator|->
name|zoom
argument_list|(
name|factor
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Zooms the current view out by \a factor. The default value for \a     factor is 1.1, which means the view will be scaled down by 10%. */
end_comment
begin_function
DECL|function|zoomOut
name|void
name|QPrintPreviewWidget
operator|::
name|zoomOut
parameter_list|(
name|qreal
name|factor
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPrintPreviewWidget
argument_list|)
expr_stmt|;
name|d
operator|->
name|fitting
operator|=
literal|false
expr_stmt|;
name|d
operator|->
name|zoomMode
operator|=
name|QPrintPreviewWidget
operator|::
name|CustomZoom
expr_stmt|;
name|d
operator|->
name|zoom
argument_list|(
literal|1
operator|/
name|factor
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the zoom factor of the view. */
end_comment
begin_function
DECL|function|zoomFactor
name|qreal
name|QPrintPreviewWidget
operator|::
name|zoomFactor
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPrintPreviewWidget
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|zoomFactor
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the zoom factor of the view to \a factor. For example, a     value of 1.0 indicates an unscaled view, which is approximately     the size the view will have on paper. A value of 0.5 will halve     the size of the view, while a value of 2.0 will double the size of     the view. */
end_comment
begin_function
DECL|function|setZoomFactor
name|void
name|QPrintPreviewWidget
operator|::
name|setZoomFactor
parameter_list|(
name|qreal
name|factor
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPrintPreviewWidget
argument_list|)
expr_stmt|;
name|d
operator|->
name|fitting
operator|=
literal|false
expr_stmt|;
name|d
operator|->
name|zoomMode
operator|=
name|QPrintPreviewWidget
operator|::
name|CustomZoom
expr_stmt|;
name|d
operator|->
name|setZoomFactor
argument_list|(
name|factor
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \obsolete     Returns the number of pages in the preview.     \sa pageCount() */
end_comment
begin_function
DECL|function|numPages
name|int
name|QPrintPreviewWidget
operator|::
name|numPages
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPrintPreviewWidget
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|pages
operator|.
name|size
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.6     Returns the number of pages in the preview. */
end_comment
begin_function
DECL|function|pageCount
name|int
name|QPrintPreviewWidget
operator|::
name|pageCount
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPrintPreviewWidget
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|pages
operator|.
name|size
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the currently viewed page in the preview. */
end_comment
begin_function
DECL|function|currentPage
name|int
name|QPrintPreviewWidget
operator|::
name|currentPage
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPrintPreviewWidget
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|curPage
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the current page in the preview. This will cause the view to     skip to the beginning of \a page. */
end_comment
begin_function
DECL|function|setCurrentPage
name|void
name|QPrintPreviewWidget
operator|::
name|setCurrentPage
parameter_list|(
name|int
name|page
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPrintPreviewWidget
argument_list|)
expr_stmt|;
name|d
operator|->
name|setCurrentPage
argument_list|(
name|page
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     This is a convenience function and is the same as calling \c     {setZoomMode(QPrintPreviewWidget::FitToWidth)}. */
end_comment
begin_function
DECL|function|fitToWidth
name|void
name|QPrintPreviewWidget
operator|::
name|fitToWidth
parameter_list|()
block|{
name|setZoomMode
argument_list|(
name|FitToWidth
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     This is a convenience function and is the same as calling \c     {setZoomMode(QPrintPreviewWidget::FitInView)}. */
end_comment
begin_function
DECL|function|fitInView
name|void
name|QPrintPreviewWidget
operator|::
name|fitInView
parameter_list|()
block|{
name|setZoomMode
argument_list|(
name|FitInView
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the zoom mode to \a zoomMode. The default zoom mode is FitInView.      \sa zoomMode(), viewMode(), setViewMode() */
end_comment
begin_function
DECL|function|setZoomMode
name|void
name|QPrintPreviewWidget
operator|::
name|setZoomMode
parameter_list|(
name|QPrintPreviewWidget
operator|::
name|ZoomMode
name|zoomMode
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPrintPreviewWidget
argument_list|)
expr_stmt|;
name|d
operator|->
name|zoomMode
operator|=
name|zoomMode
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|zoomMode
operator|==
name|FitInView
operator|||
name|d
operator|->
name|zoomMode
operator|==
name|FitToWidth
condition|)
block|{
name|d
operator|->
name|fitting
operator|=
literal|true
expr_stmt|;
name|d
operator|->
name|_q_fit
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|fitting
operator|=
literal|false
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     Returns the current zoom mode.      \sa setZoomMode(), viewMode(), setViewMode() */
end_comment
begin_function
DECL|function|zoomMode
name|QPrintPreviewWidget
operator|::
name|ZoomMode
name|QPrintPreviewWidget
operator|::
name|zoomMode
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPrintPreviewWidget
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|zoomMode
return|;
block|}
end_function
begin_comment
comment|/*!     This is a convenience function and is the same as calling \c     {setOrientation(QPrinter::Landscape)}. */
end_comment
begin_function
DECL|function|setLandscapeOrientation
name|void
name|QPrintPreviewWidget
operator|::
name|setLandscapeOrientation
parameter_list|()
block|{
name|setOrientation
argument_list|(
name|QPrinter
operator|::
name|Landscape
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     This is a convenience function and is the same as calling \c     {setOrientation(QPrinter::Portrait)}. */
end_comment
begin_function
DECL|function|setPortraitOrientation
name|void
name|QPrintPreviewWidget
operator|::
name|setPortraitOrientation
parameter_list|()
block|{
name|setOrientation
argument_list|(
name|QPrinter
operator|::
name|Portrait
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     This is a convenience function and is the same as calling \c     {setViewMode(QPrintPreviewWidget::SinglePageView)}. */
end_comment
begin_function
DECL|function|setSinglePageViewMode
name|void
name|QPrintPreviewWidget
operator|::
name|setSinglePageViewMode
parameter_list|()
block|{
name|setViewMode
argument_list|(
name|SinglePageView
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     This is a convenience function and is the same as calling \c     {setViewMode(QPrintPreviewWidget::FacingPagesView)}. */
end_comment
begin_function
DECL|function|setFacingPagesViewMode
name|void
name|QPrintPreviewWidget
operator|::
name|setFacingPagesViewMode
parameter_list|()
block|{
name|setViewMode
argument_list|(
name|FacingPagesView
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     This is a convenience function and is the same as calling \c     {setViewMode(QPrintPreviewWidget::AllPagesView)}. */
end_comment
begin_function
DECL|function|setAllPagesViewMode
name|void
name|QPrintPreviewWidget
operator|::
name|setAllPagesViewMode
parameter_list|()
block|{
name|setViewMode
argument_list|(
name|AllPagesView
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     This function updates the preview, which causes the     paintRequested() signal to be emitted. */
end_comment
begin_function
DECL|function|updatePreview
name|void
name|QPrintPreviewWidget
operator|::
name|updatePreview
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QPrintPreviewWidget
argument_list|)
expr_stmt|;
name|d
operator|->
name|initialized
operator|=
literal|true
expr_stmt|;
name|d
operator|->
name|generatePreview
argument_list|()
expr_stmt|;
name|d
operator|->
name|graphicsView
operator|->
name|updateGeometry
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|setVisible
name|void
name|QPrintPreviewWidget
operator|::
name|setVisible
parameter_list|(
name|bool
name|visible
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPrintPreviewWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|visible
operator|&&
operator|!
name|d
operator|->
name|initialized
condition|)
name|updatePreview
argument_list|()
expr_stmt|;
name|QWidget
operator|::
name|setVisible
argument_list|(
name|visible
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \fn void QPrintPreviewWidget::paintRequested(QPrinter *printer)      This signal is emitted when the preview widget needs to generate a     set of preview pages. \a printer is the printer associated with     this preview widget. */
end_comment
begin_comment
comment|/*!     \fn void QPrintPreviewWidget::previewChanged()      This signal is emitted whenever the preview widget has changed     some internal state, such as the orientation. */
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_include
include|#
directive|include
file|"moc_qprintpreviewwidget.cpp"
end_include
begin_include
include|#
directive|include
file|"qprintpreviewwidget.moc"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_PRINTPREVIEWWIDGET
end_comment
end_unit
