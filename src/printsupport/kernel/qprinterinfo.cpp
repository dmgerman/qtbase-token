begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the documentation of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:FDL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Free Documentation License Usage ** Alternatively, this file may be used under the terms of the GNU Free ** Documentation License version 1.3 as published by the Free Software ** Foundation and appearing in the file included in the packaging of ** this file. Please review the following information to ensure ** the GNU Free Documentation License version 1.3 requirements ** will be met: http://www.gnu.org/copyleft/fdl.html. ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qprinterinfo.h"
end_include
begin_include
include|#
directive|include
file|"qprinterinfo_p.h"
end_include
begin_include
include|#
directive|include
file|"qprintdevice_p.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_PRINTER
end_ifndef
begin_include
include|#
directive|include
file|<QtCore/qdebug.h>
end_include
begin_include
include|#
directive|include
file|<qpa/qplatformprintplugin.h>
end_include
begin_include
include|#
directive|include
file|<qpa/qplatformprintersupport.h>
end_include
begin_function_decl
name|QT_BEGIN_NAMESPACE
name|Q_GLOBAL_STATIC
parameter_list|(
name|QPrinterInfoPrivate
parameter_list|,
name|shared_null
parameter_list|)
function_decl|;
end_function_decl
begin_class
DECL|class|QPrinterInfoPrivateDeleter
class|class
name|QPrinterInfoPrivateDeleter
block|{
public|public:
DECL|function|cleanup
specifier|static
specifier|inline
name|void
name|cleanup
parameter_list|(
name|QPrinterInfoPrivate
modifier|*
name|d
parameter_list|)
block|{
if|if
condition|(
name|d
operator|!=
name|shared_null
condition|)
operator|delete
name|d
expr_stmt|;
block|}
block|}
class|;
end_class
begin_constructor
DECL|function|QPrinterInfoPrivate
name|QPrinterInfoPrivate
operator|::
name|QPrinterInfoPrivate
parameter_list|(
specifier|const
name|QString
modifier|&
name|id
parameter_list|)
block|{
if|if
condition|(
operator|!
name|id
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QPlatformPrinterSupport
modifier|*
name|ps
init|=
name|QPlatformPrinterSupportPlugin
operator|::
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ps
condition|)
name|m_printDevice
operator|=
name|ps
operator|->
name|createPrintDevice
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
end_constructor
begin_destructor
DECL|function|~QPrinterInfoPrivate
name|QPrinterInfoPrivate
operator|::
name|~
name|QPrinterInfoPrivate
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     \class QPrinterInfo      \brief The QPrinterInfo class gives access to information about     existing printers.      \ingroup printing     \inmodule QtPrintSupport      Use the static functions to generate a list of QPrinterInfo     objects. Each QPrinterInfo object in the list represents a single     printer and can be queried for name, supported paper sizes, and     whether or not it is the default printer.      \since 4.4 */
end_comment
begin_comment
comment|/*!     Constructs an empty QPrinterInfo object.      \sa isNull() */
end_comment
begin_constructor
DECL|function|QPrinterInfo
name|QPrinterInfo
operator|::
name|QPrinterInfo
parameter_list|()
member_init_list|:
name|d_ptr
argument_list|(
name|shared_null
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Constructs a copy of \a other. */
end_comment
begin_constructor
DECL|function|QPrinterInfo
name|QPrinterInfo
operator|::
name|QPrinterInfo
parameter_list|(
specifier|const
name|QPrinterInfo
modifier|&
name|other
parameter_list|)
member_init_list|:
name|d_ptr
argument_list|(
operator|(
name|other
operator|.
name|d_ptr
operator|.
name|data
argument_list|()
operator|==
name|shared_null
operator|)
condition|?
name|shared_null
else|:
operator|new
name|QPrinterInfoPrivate
argument_list|(
operator|*
name|other
operator|.
name|d_ptr
argument_list|)
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Constructs a QPrinterInfo object from \a printer. */
end_comment
begin_constructor
DECL|function|QPrinterInfo
name|QPrinterInfo
operator|::
name|QPrinterInfo
parameter_list|(
specifier|const
name|QPrinter
modifier|&
name|printer
parameter_list|)
member_init_list|:
name|d_ptr
argument_list|(
name|shared_null
argument_list|)
block|{
name|QPlatformPrinterSupport
modifier|*
name|ps
init|=
name|QPlatformPrinterSupportPlugin
operator|::
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ps
condition|)
block|{
name|QPrinterInfo
name|pi
argument_list|(
name|printer
operator|.
name|printerName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pi
operator|.
name|d_ptr
operator|.
name|data
argument_list|()
operator|==
name|shared_null
condition|)
name|d_ptr
operator|.
name|reset
argument_list|(
name|shared_null
argument_list|)
expr_stmt|;
else|else
name|d_ptr
operator|.
name|reset
argument_list|(
operator|new
name|QPrinterInfoPrivate
argument_list|(
operator|*
name|pi
operator|.
name|d_ptr
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_constructor
begin_comment
comment|/*!     \internal */
end_comment
begin_constructor
DECL|function|QPrinterInfo
name|QPrinterInfo
operator|::
name|QPrinterInfo
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
member_init_list|:
name|d_ptr
argument_list|(
operator|new
name|QPrinterInfoPrivate
argument_list|(
name|name
argument_list|)
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Destroys the QPrinterInfo object. References to the values in the     object become invalid. */
end_comment
begin_destructor
DECL|function|~QPrinterInfo
name|QPrinterInfo
operator|::
name|~
name|QPrinterInfo
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     Sets the QPrinterInfo object to be equal to \a other. */
end_comment
begin_function
DECL|function|operator =
name|QPrinterInfo
modifier|&
name|QPrinterInfo
operator|::
name|operator
name|=
parameter_list|(
specifier|const
name|QPrinterInfo
modifier|&
name|other
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|d_ptr
argument_list|)
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|d_ptr
operator|.
name|data
argument_list|()
operator|==
name|shared_null
condition|)
name|d_ptr
operator|.
name|reset
argument_list|(
name|shared_null
argument_list|)
expr_stmt|;
else|else
name|d_ptr
operator|.
name|reset
argument_list|(
operator|new
name|QPrinterInfoPrivate
argument_list|(
operator|*
name|other
operator|.
name|d_ptr
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the name of the printer.      This is a unique id to identify the printer and may not be human-readable.      \sa QPrinterInfo::description()     \sa QPrinter::setPrinterName() */
end_comment
begin_function
DECL|function|printerName
name|QString
name|QPrinterInfo
operator|::
name|printerName
parameter_list|()
specifier|const
block|{
specifier|const
name|Q_D
argument_list|(
name|QPrinterInfo
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|m_printDevice
operator|.
name|id
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the human-readable description of the printer.      \since 5.0     \sa QPrinterInfo::printerName() */
end_comment
begin_function
DECL|function|description
name|QString
name|QPrinterInfo
operator|::
name|description
parameter_list|()
specifier|const
block|{
specifier|const
name|Q_D
argument_list|(
name|QPrinterInfo
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|m_printDevice
operator|.
name|name
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the human-readable location of the printer.      \since 5.0 */
end_comment
begin_function
DECL|function|location
name|QString
name|QPrinterInfo
operator|::
name|location
parameter_list|()
specifier|const
block|{
specifier|const
name|Q_D
argument_list|(
name|QPrinterInfo
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|m_printDevice
operator|.
name|location
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the human-readable make and model of the printer.      \since 5.0 */
end_comment
begin_function
DECL|function|makeAndModel
name|QString
name|QPrinterInfo
operator|::
name|makeAndModel
parameter_list|()
specifier|const
block|{
specifier|const
name|Q_D
argument_list|(
name|QPrinterInfo
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|m_printDevice
operator|.
name|makeAndModel
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns whether this QPrinterInfo object holds a printer definition.      An empty QPrinterInfo object could result for example from calling     defaultPrinter() when there are no printers on the system. */
end_comment
begin_function
DECL|function|isNull
name|bool
name|QPrinterInfo
operator|::
name|isNull
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPrinterInfo
argument_list|)
expr_stmt|;
return|return
name|d
operator|==
name|shared_null
operator|||
operator|!
name|d
operator|->
name|m_printDevice
operator|.
name|isValid
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns whether this printer is currently the default printer. */
end_comment
begin_function
DECL|function|isDefault
name|bool
name|QPrinterInfo
operator|::
name|isDefault
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPrinterInfo
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|m_printDevice
operator|.
name|isDefault
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns whether this printer is a remote network printer.      \since 5.3 */
end_comment
begin_function
DECL|function|isRemote
name|bool
name|QPrinterInfo
operator|::
name|isRemote
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPrinterInfo
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|m_printDevice
operator|.
name|isRemote
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the current state of this printer.      This state may not always be accurate, depending on the platform, printer     driver, or printer itself.      \since 5.3 */
end_comment
begin_function
DECL|function|state
name|QPrinter
operator|::
name|PrinterState
name|QPrinterInfo
operator|::
name|state
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPrinterInfo
argument_list|)
expr_stmt|;
return|return
name|QPrinter
operator|::
name|PrinterState
argument_list|(
name|d
operator|->
name|m_printDevice
operator|.
name|state
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns a list of Page Sizes supported by this printer.      \since 5.3 */
end_comment
begin_function
DECL|function|supportedPageSizes
name|QList
argument_list|<
name|QPageSize
argument_list|>
name|QPrinterInfo
operator|::
name|supportedPageSizes
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPrinterInfo
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|m_printDevice
operator|.
name|supportedPageSizes
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the current default Page Size for this printer.      \since 5.3 */
end_comment
begin_function
DECL|function|defaultPageSize
name|QPageSize
name|QPrinterInfo
operator|::
name|defaultPageSize
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPrinterInfo
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|m_printDevice
operator|.
name|defaultPageSize
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns whether this printer supports custom page sizes.      \since 5.3 */
end_comment
begin_function
DECL|function|supportsCustomPageSizes
name|bool
name|QPrinterInfo
operator|::
name|supportsCustomPageSizes
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPrinterInfo
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|m_printDevice
operator|.
name|supportsCustomPageSizes
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the minimum physical page size supported by this printer.      \sa maximumPhysicalPageSize()      \since 5.3 */
end_comment
begin_function
DECL|function|minimumPhysicalPageSize
name|QPageSize
name|QPrinterInfo
operator|::
name|minimumPhysicalPageSize
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPrinterInfo
argument_list|)
expr_stmt|;
return|return
name|QPageSize
argument_list|(
name|d
operator|->
name|m_printDevice
operator|.
name|minimumPhysicalPageSize
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|,
name|QPageSize
operator|::
name|ExactMatch
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the maximum physical page size supported by this printer.      \sa minimumPhysicalPageSize()      \since 5.3 */
end_comment
begin_function
DECL|function|maximumPhysicalPageSize
name|QPageSize
name|QPrinterInfo
operator|::
name|maximumPhysicalPageSize
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPrinterInfo
argument_list|)
expr_stmt|;
return|return
name|QPageSize
argument_list|(
name|d
operator|->
name|m_printDevice
operator|.
name|maximumPhysicalPageSize
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|,
name|QPageSize
operator|::
name|ExactMatch
argument_list|)
return|;
block|}
end_function
begin_if
if|#
directive|if
name|QT_DEPRECATED_SINCE
argument_list|(
literal|5
operator|,
literal|3
argument_list|)
end_if
begin_comment
comment|/*!     \obsolete Use supportedPageSizes() instead.      Returns a list of supported paper sizes by the printer.      Not all printer drivers support this query, so the list may be empty.      \since 4.4 */
end_comment
begin_function
DECL|function|supportedPaperSizes
name|QList
argument_list|<
name|QPrinter
operator|::
name|PaperSize
argument_list|>
name|QPrinterInfo
operator|::
name|supportedPaperSizes
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPrinterInfo
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QPrinter
operator|::
name|PaperSize
argument_list|>
name|list
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QPageSize
modifier|&
name|pageSize
decl|,
name|d
operator|->
name|m_printDevice
operator|.
name|supportedPageSizes
argument_list|()
control|)
name|list
operator|.
name|append
argument_list|(
name|QPrinter
operator|::
name|PaperSize
argument_list|(
name|pageSize
operator|.
name|id
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
end_function
begin_comment
comment|/*!     \obsolete Use supportedPageSizes() instead.      Returns a list of all the paper names supported by the driver with the     corresponding size in millimeters.      Not all printer drivers support this query, so the list may be empty.      \since 5.1 */
end_comment
begin_function
DECL|function|supportedSizesWithNames
name|QList
argument_list|<
name|QPair
argument_list|<
name|QString
argument_list|,
name|QSizeF
argument_list|>
argument_list|>
name|QPrinterInfo
operator|::
name|supportedSizesWithNames
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPrinterInfo
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QPair
argument_list|<
name|QString
argument_list|,
name|QSizeF
argument_list|>
argument_list|>
name|list
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QPageSize
modifier|&
name|pageSize
decl|,
name|d
operator|->
name|m_printDevice
operator|.
name|supportedPageSizes
argument_list|()
control|)
name|list
operator|.
name|append
argument_list|(
name|qMakePair
argument_list|(
name|pageSize
operator|.
name|name
argument_list|()
argument_list|,
name|pageSize
operator|.
name|size
argument_list|(
name|QPageSize
operator|::
name|Millimeter
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_DEPRECATED_SINCE(5,3)
end_comment
begin_comment
comment|/*!     Returns a list of resolutions supported by this printer.      \since 5.3 */
end_comment
begin_function
DECL|function|supportedResolutions
name|QList
argument_list|<
name|int
argument_list|>
name|QPrinterInfo
operator|::
name|supportedResolutions
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPrinterInfo
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|m_printDevice
operator|.
name|supportedResolutions
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the default duplex mode of this printer.      \since 5.4 */
end_comment
begin_function
DECL|function|defaultDuplexMode
name|QPrinter
operator|::
name|DuplexMode
name|QPrinterInfo
operator|::
name|defaultDuplexMode
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPrinterInfo
argument_list|)
expr_stmt|;
return|return
name|QPrinter
operator|::
name|DuplexMode
argument_list|(
name|d
operator|->
name|m_printDevice
operator|.
name|defaultDuplexMode
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns a list of duplex modes supported by this printer.      \since 5.4 */
end_comment
begin_function
DECL|function|supportedDuplexModes
name|QList
argument_list|<
name|QPrinter
operator|::
name|DuplexMode
argument_list|>
name|QPrinterInfo
operator|::
name|supportedDuplexModes
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPrinterInfo
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QPrinter
operator|::
name|DuplexMode
argument_list|>
name|list
decl_stmt|;
foreach|foreach
control|(
name|QPrint
operator|::
name|DuplexMode
name|mode
decl|,
name|d
operator|->
name|m_printDevice
operator|.
name|supportedDuplexModes
argument_list|()
control|)
name|list
operator|<<
name|QPrinter
operator|::
name|DuplexMode
argument_list|(
name|mode
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
end_function
begin_comment
comment|/*!     Returns a list of all the available Printer Names on this system.      It is recommended to use this instead of availablePrinters() as     it will be faster on most systems.      Note that the list may become outdated if changes are made on the local     system or remote print server. Only instantiate required QPrinterInfo     instances when needed, and always check for validity before calling.      \since 5.3 */
end_comment
begin_function
DECL|function|availablePrinterNames
name|QStringList
name|QPrinterInfo
operator|::
name|availablePrinterNames
parameter_list|()
block|{
name|QPlatformPrinterSupport
modifier|*
name|ps
init|=
name|QPlatformPrinterSupportPlugin
operator|::
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ps
condition|)
return|return
name|ps
operator|->
name|availablePrintDeviceIds
argument_list|()
return|;
return|return
name|QStringList
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns a list of QPrinterInfo objects for all the available printers     on this system.      It is NOT recommended to use this as creating each printer instance may     take a long time, especially if there are remote networked printers, and     retained instances may become outdated if changes are made on the local     system or remote print server. Use availablePrinterNames() instead and     only instantiate printer instances as you need them. */
end_comment
begin_function
DECL|function|availablePrinters
name|QList
argument_list|<
name|QPrinterInfo
argument_list|>
name|QPrinterInfo
operator|::
name|availablePrinters
parameter_list|()
block|{
name|QList
argument_list|<
name|QPrinterInfo
argument_list|>
name|list
decl_stmt|;
name|QPlatformPrinterSupport
modifier|*
name|ps
init|=
name|QPlatformPrinterSupportPlugin
operator|::
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ps
condition|)
block|{
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|id
decl|,
name|ps
operator|->
name|availablePrintDeviceIds
argument_list|()
control|)
name|list
operator|.
name|append
argument_list|(
name|QPrinterInfo
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the current default printer name.      \since 5.3 */
end_comment
begin_function
DECL|function|defaultPrinterName
name|QString
name|QPrinterInfo
operator|::
name|defaultPrinterName
parameter_list|()
block|{
name|QPlatformPrinterSupport
modifier|*
name|ps
init|=
name|QPlatformPrinterSupportPlugin
operator|::
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ps
condition|)
return|return
name|ps
operator|->
name|defaultPrintDeviceId
argument_list|()
return|;
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the default printer on the system.      The return value should be checked using isNull() before being     used, in case there is no default printer.      On some systems it is possible for there to be available printers     but none of them set to be the default printer.      \sa isNull()     \sa isDefault()     \sa availablePrinters() */
end_comment
begin_function
DECL|function|defaultPrinter
name|QPrinterInfo
name|QPrinterInfo
operator|::
name|defaultPrinter
parameter_list|()
block|{
name|QPlatformPrinterSupport
modifier|*
name|ps
init|=
name|QPlatformPrinterSupportPlugin
operator|::
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ps
condition|)
return|return
name|QPrinterInfo
argument_list|(
name|ps
operator|->
name|defaultPrintDeviceId
argument_list|()
argument_list|)
return|;
return|return
name|QPrinterInfo
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the printer \a printerName.      The return value should be checked using isNull() before being     used, in case the named printer does not exist.      \since 5.0     \sa isNull() */
end_comment
begin_function
DECL|function|printerInfo
name|QPrinterInfo
name|QPrinterInfo
operator|::
name|printerInfo
parameter_list|(
specifier|const
name|QString
modifier|&
name|printerName
parameter_list|)
block|{
return|return
name|QPrinterInfo
argument_list|(
name|printerName
argument_list|)
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DEBUG_STREAM
end_ifndef
begin_function
DECL|function|operator <<
name|QDebug
name|operator
name|<<
parameter_list|(
name|QDebug
name|debug
parameter_list|,
specifier|const
name|QPrinterInfo
modifier|&
name|p
parameter_list|)
block|{
name|QDebugStateSaver
name|saver
argument_list|(
name|debug
argument_list|)
decl_stmt|;
name|debug
operator|.
name|nospace
argument_list|()
expr_stmt|;
name|debug
operator|<<
literal|"QPrinterInfo("
expr_stmt|;
if|if
condition|(
name|p
operator|.
name|isNull
argument_list|()
condition|)
name|debug
operator|<<
literal|"null"
expr_stmt|;
else|else
name|p
operator|.
name|d_ptr
operator|->
name|m_printDevice
operator|.
name|format
argument_list|(
name|debug
argument_list|)
expr_stmt|;
name|debug
operator|<<
literal|')'
expr_stmt|;
return|return
name|debug
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// !QT_NO_DEBUG_STREAM
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_PRINTER
end_comment
end_unit
