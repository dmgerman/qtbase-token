begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qprinterinfo.h"
end_include
begin_include
include|#
directive|include
file|"qprinterinfo_p.h"
end_include
begin_include
include|#
directive|include
file|<qfile.h>
end_include
begin_include
include|#
directive|include
file|<qfileinfo.h>
end_include
begin_include
include|#
directive|include
file|<qdir.h>
end_include
begin_include
include|#
directive|include
file|<qlibrary.h>
end_include
begin_include
include|#
directive|include
file|<qtextstream.h>
end_include
begin_include
include|#
directive|include
file|<qcoreapplication.h>
end_include
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_CUPS
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_LIBRARY
argument_list|)
end_if
begin_include
include|#
directive|include
file|<private/qcups_p.h>
end_include
begin_include
include|#
directive|include
file|<cups/cups.h>
end_include
begin_include
include|#
directive|include
file|<private/qpdf_p.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<private/qprinterinfo_unix_p.h>
end_include
begin_expr_stmt
name|QT_BEGIN_NAMESPACE
ifndef|#
directive|ifndef
name|QT_NO_PRINTER
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_CUPS
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_LIBRARY
argument_list|)
comment|// preserver names in ascending order for the binary search
DECL|struct|NamedPaperSize
specifier|static
specifier|const
expr|struct
name|NamedPaperSize
block|{
DECL|member|name
specifier|const
name|char
operator|*
specifier|const
name|name
block|;
DECL|member|size
name|QPrinter
operator|::
name|PaperSize
name|size
block|; }
DECL|variable|named_sizes_map
name|named_sizes_map
index|[
name|QPrinter
operator|::
name|NPageSize
index|]
operator|=
block|{
block|{
literal|"A0"
block|,
name|QPrinter
operator|::
name|A0
block|}
block|,
block|{
literal|"A1"
block|,
name|QPrinter
operator|::
name|A1
block|}
block|,
block|{
literal|"A2"
block|,
name|QPrinter
operator|::
name|A2
block|}
block|,
block|{
literal|"A3"
block|,
name|QPrinter
operator|::
name|A3
block|}
block|,
block|{
literal|"A4"
block|,
name|QPrinter
operator|::
name|A4
block|}
block|,
block|{
literal|"A5"
block|,
name|QPrinter
operator|::
name|A5
block|}
block|,
block|{
literal|"A6"
block|,
name|QPrinter
operator|::
name|A6
block|}
block|,
block|{
literal|"A7"
block|,
name|QPrinter
operator|::
name|A7
block|}
block|,
block|{
literal|"A8"
block|,
name|QPrinter
operator|::
name|A8
block|}
block|,
block|{
literal|"A9"
block|,
name|QPrinter
operator|::
name|A9
block|}
block|,
block|{
literal|"B0"
block|,
name|QPrinter
operator|::
name|B0
block|}
block|,
block|{
literal|"B1"
block|,
name|QPrinter
operator|::
name|B1
block|}
block|,
block|{
literal|"B10"
block|,
name|QPrinter
operator|::
name|B10
block|}
block|,
block|{
literal|"B2"
block|,
name|QPrinter
operator|::
name|B2
block|}
block|,
block|{
literal|"B4"
block|,
name|QPrinter
operator|::
name|B4
block|}
block|,
block|{
literal|"B5"
block|,
name|QPrinter
operator|::
name|B5
block|}
block|,
block|{
literal|"B6"
block|,
name|QPrinter
operator|::
name|B6
block|}
block|,
block|{
literal|"B7"
block|,
name|QPrinter
operator|::
name|B7
block|}
block|,
block|{
literal|"B8"
block|,
name|QPrinter
operator|::
name|B8
block|}
block|,
block|{
literal|"B9"
block|,
name|QPrinter
operator|::
name|B9
block|}
block|,
block|{
literal|"C5E"
block|,
name|QPrinter
operator|::
name|C5E
block|}
block|,
block|{
literal|"Comm10E"
block|,
name|QPrinter
operator|::
name|Comm10E
block|}
block|,
block|{
literal|"Custom"
block|,
name|QPrinter
operator|::
name|Custom
block|}
block|,
block|{
literal|"DLE"
block|,
name|QPrinter
operator|::
name|DLE
block|}
block|,
block|{
literal|"Executive"
block|,
name|QPrinter
operator|::
name|Executive
block|}
block|,
block|{
literal|"Folio"
block|,
name|QPrinter
operator|::
name|Folio
block|}
block|,
block|{
literal|"Ledger"
block|,
name|QPrinter
operator|::
name|Ledger
block|}
block|,
block|{
literal|"Legal"
block|,
name|QPrinter
operator|::
name|Legal
block|}
block|,
block|{
literal|"Letter"
block|,
name|QPrinter
operator|::
name|Letter
block|}
block|,
block|{
literal|"Tabloid"
block|,
name|QPrinter
operator|::
name|Tabloid
block|}
block|}
expr_stmt|;
end_expr_stmt
begin_function
DECL|function|operator <
specifier|inline
name|bool
name|operator
name|<
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|NamedPaperSize
modifier|&
name|data
parameter_list|)
block|{
return|return
name|qstrcmp
argument_list|(
name|name
argument_list|,
name|data
operator|.
name|name
argument_list|)
operator|<
literal|0
return|;
block|}
end_function
begin_function
DECL|function|operator <
specifier|inline
name|bool
name|operator
name|<
parameter_list|(
specifier|const
name|NamedPaperSize
modifier|&
name|data
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
block|{
return|return
name|qstrcmp
argument_list|(
name|data
operator|.
name|name
argument_list|,
name|name
argument_list|)
operator|<
literal|0
return|;
block|}
end_function
begin_function
DECL|function|string2PaperSize
specifier|static
specifier|inline
name|QPrinter
operator|::
name|PaperSize
name|string2PaperSize
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|)
block|{
specifier|const
name|NamedPaperSize
modifier|*
name|r
init|=
name|qBinaryFind
argument_list|(
name|named_sizes_map
argument_list|,
name|named_sizes_map
operator|+
name|QPrinter
operator|::
name|NPageSize
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|-
name|named_sizes_map
operator|!=
name|QPrinter
operator|::
name|NPageSize
condition|)
return|return
name|r
operator|->
name|size
return|;
return|return
name|QPrinter
operator|::
name|Custom
return|;
block|}
end_function
begin_function
DECL|function|paperSize2String
specifier|static
specifier|inline
specifier|const
name|char
modifier|*
name|paperSize2String
parameter_list|(
name|QPrinter
operator|::
name|PaperSize
name|size
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|QPrinter
operator|::
name|NPageSize
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|size
operator|==
name|named_sizes_map
index|[
name|i
index|]
operator|.
name|size
condition|)
return|return
name|named_sizes_map
index|[
name|i
index|]
operator|.
name|name
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|qt_perhapsAddPrinter
name|void
name|qt_perhapsAddPrinter
parameter_list|(
name|QList
argument_list|<
name|QPrinterDescription
argument_list|>
modifier|*
name|printers
parameter_list|,
specifier|const
name|QString
modifier|&
name|name
parameter_list|,
name|QString
name|host
parameter_list|,
name|QString
name|comment
parameter_list|,
name|QStringList
name|aliases
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|printers
operator|->
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|printers
operator|->
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|samePrinter
argument_list|(
name|name
argument_list|)
condition|)
return|return;
if|if
condition|(
name|host
operator|.
name|isEmpty
argument_list|()
condition|)
name|host
operator|=
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPrinter"
argument_list|,
literal|"locally connected"
argument_list|)
expr_stmt|;
name|printers
operator|->
name|append
argument_list|(
name|QPrinterDescription
argument_list|(
name|name
operator|.
name|simplified
argument_list|()
argument_list|,
name|host
operator|.
name|simplified
argument_list|()
argument_list|,
name|comment
operator|.
name|simplified
argument_list|()
argument_list|,
name|aliases
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_parsePrinterDesc
name|void
name|qt_parsePrinterDesc
parameter_list|(
name|QString
name|printerDesc
parameter_list|,
name|QList
argument_list|<
name|QPrinterDescription
argument_list|>
modifier|*
name|printers
parameter_list|)
block|{
if|if
condition|(
name|printerDesc
operator|.
name|length
argument_list|()
operator|<
literal|1
condition|)
return|return;
name|printerDesc
operator|=
name|printerDesc
operator|.
name|simplified
argument_list|()
expr_stmt|;
name|int
name|i
init|=
name|printerDesc
operator|.
name|indexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
argument_list|)
decl_stmt|;
name|QString
name|printerName
decl_stmt|,
name|printerComment
decl_stmt|,
name|printerHost
decl_stmt|;
name|QStringList
name|aliases
decl_stmt|;
if|if
condition|(
name|i
operator|>=
literal|0
condition|)
block|{
comment|// have ':' want '|'
name|int
name|j
init|=
name|printerDesc
operator|.
name|indexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|'|'
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|j
operator|>
literal|0
operator|&&
name|j
operator|<
name|i
condition|)
block|{
name|printerName
operator|=
name|printerDesc
operator|.
name|left
argument_list|(
name|j
argument_list|)
expr_stmt|;
name|aliases
operator|=
name|printerDesc
operator|.
name|mid
argument_list|(
name|j
operator|+
literal|1
argument_list|,
name|i
operator|-
name|j
operator|-
literal|1
argument_list|)
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|'|'
argument_list|)
argument_list|)
expr_stmt|;
comment|// try extracting a comment from the aliases
name|printerComment
operator|=
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPrinter"
argument_list|,
literal|"Aliases: %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|aliases
operator|.
name|join
argument_list|(
name|QLatin1String
argument_list|(
literal|", "
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|printerName
operator|=
name|printerDesc
operator|.
name|left
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
comment|// look for lprng pseudo all printers entry
name|i
operator|=
name|printerDesc
operator|.
name|indexOf
argument_list|(
name|QRegExp
argument_list|(
name|QLatin1String
argument_list|(
literal|": *all *="
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|>=
literal|0
condition|)
name|printerName
operator|=
name|QString
argument_list|()
expr_stmt|;
comment|// look for signs of this being a remote printer
name|i
operator|=
name|printerDesc
operator|.
name|indexOf
argument_list|(
name|QRegExp
argument_list|(
name|QLatin1String
argument_list|(
literal|": *rm *="
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|>=
literal|0
condition|)
block|{
comment|// point k at the end of remote host name
while|while
condition|(
name|printerDesc
index|[
name|i
index|]
operator|!=
name|QLatin1Char
argument_list|(
literal|'='
argument_list|)
condition|)
name|i
operator|++
expr_stmt|;
while|while
condition|(
name|printerDesc
index|[
name|i
index|]
operator|==
name|QLatin1Char
argument_list|(
literal|'='
argument_list|)
operator|||
name|printerDesc
index|[
name|i
index|]
operator|.
name|isSpace
argument_list|()
condition|)
name|i
operator|++
expr_stmt|;
name|j
operator|=
name|i
expr_stmt|;
while|while
condition|(
name|j
operator|<
operator|(
name|int
operator|)
name|printerDesc
operator|.
name|length
argument_list|()
operator|&&
name|printerDesc
index|[
name|j
index|]
operator|!=
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
condition|)
name|j
operator|++
expr_stmt|;
comment|// and stuff that into the string
name|printerHost
operator|=
name|printerDesc
operator|.
name|mid
argument_list|(
name|i
argument_list|,
name|j
operator|-
name|i
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|printerName
operator|.
name|length
argument_list|()
condition|)
name|qt_perhapsAddPrinter
argument_list|(
name|printers
argument_list|,
name|printerName
argument_list|,
name|printerHost
argument_list|,
name|printerComment
argument_list|,
name|aliases
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_parsePrintcap
name|int
name|qt_parsePrintcap
parameter_list|(
name|QList
argument_list|<
name|QPrinterDescription
argument_list|>
modifier|*
name|printers
parameter_list|,
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|)
block|{
name|QFile
name|printcap
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|printcap
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
condition|)
return|return
name|NotFound
return|;
name|char
modifier|*
name|line_ascii
init|=
operator|new
name|char
index|[
literal|1025
index|]
decl_stmt|;
name|line_ascii
index|[
literal|1024
index|]
operator|=
literal|'\0'
expr_stmt|;
name|QString
name|printerDesc
decl_stmt|;
name|bool
name|atEnd
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|atEnd
condition|)
block|{
if|if
condition|(
name|printcap
operator|.
name|atEnd
argument_list|()
operator|||
name|printcap
operator|.
name|readLine
argument_list|(
name|line_ascii
argument_list|,
literal|1024
argument_list|)
operator|<=
literal|0
condition|)
name|atEnd
operator|=
literal|true
expr_stmt|;
name|QString
name|line
init|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|line_ascii
argument_list|)
decl_stmt|;
name|line
operator|=
name|line
operator|.
name|trimmed
argument_list|()
expr_stmt|;
if|if
condition|(
name|line
operator|.
name|length
argument_list|()
operator|>=
literal|1
operator|&&
name|line
index|[
name|int
argument_list|(
name|line
operator|.
name|length
argument_list|()
argument_list|)
operator|-
literal|1
index|]
operator|==
name|QLatin1Char
argument_list|(
literal|'\\'
argument_list|)
condition|)
name|line
operator|.
name|chop
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|line
index|[
literal|0
index|]
operator|==
name|QLatin1Char
argument_list|(
literal|'#'
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|atEnd
condition|)
continue|continue;
block|}
elseif|else
if|if
condition|(
name|line
index|[
literal|0
index|]
operator|==
name|QLatin1Char
argument_list|(
literal|'|'
argument_list|)
operator|||
name|line
index|[
literal|0
index|]
operator|==
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
operator|||
name|line
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|printerDesc
operator|+=
name|line
expr_stmt|;
if|if
condition|(
operator|!
name|atEnd
condition|)
continue|continue;
block|}
name|qt_parsePrinterDesc
argument_list|(
name|printerDesc
argument_list|,
name|printers
argument_list|)
expr_stmt|;
comment|// add the first line of the new printer definition
name|printerDesc
operator|=
name|line
expr_stmt|;
block|}
operator|delete
index|[]
name|line_ascii
expr_stmt|;
return|return
name|Success
return|;
block|}
end_function
begin_comment
comment|/*!   \internal    Checks $HOME/.printers for a line matching '_default<name>' (where<name> does not contain any white space). The first such match   results in<name> being returned.   If no lines match then an empty string is returned. */
end_comment
begin_function
DECL|function|qt_getDefaultFromHomePrinters
name|QString
name|qt_getDefaultFromHomePrinters
parameter_list|()
block|{
name|QFile
name|file
argument_list|(
name|QDir
operator|::
name|homePath
argument_list|()
operator|+
name|QLatin1String
argument_list|(
literal|"/.printers"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
condition|)
return|return
name|QString
argument_list|()
return|;
name|QString
name|all
argument_list|(
name|QLatin1String
argument_list|(
name|file
operator|.
name|readAll
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QStringList
name|words
init|=
name|all
operator|.
name|split
argument_list|(
name|QRegExp
argument_list|(
name|QLatin1String
argument_list|(
literal|"\\W+"
argument_list|)
argument_list|)
argument_list|,
name|QString
operator|::
name|SkipEmptyParts
argument_list|)
decl_stmt|;
specifier|const
name|int
name|i
init|=
name|words
operator|.
name|indexOf
argument_list|(
name|QLatin1String
argument_list|(
literal|"_default"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|!=
operator|-
literal|1
operator|&&
name|i
operator|<
name|words
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
return|return
name|words
operator|.
name|at
argument_list|(
name|i
operator|+
literal|1
argument_list|)
return|;
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_comment
comment|// solaris, not 2.6
end_comment
begin_function
DECL|function|qt_parseEtcLpPrinters
name|void
name|qt_parseEtcLpPrinters
parameter_list|(
name|QList
argument_list|<
name|QPrinterDescription
argument_list|>
modifier|*
name|printers
parameter_list|)
block|{
name|QDir
name|lp
argument_list|(
name|QLatin1String
argument_list|(
literal|"/etc/lp/printers"
argument_list|)
argument_list|)
decl_stmt|;
name|QFileInfoList
name|dirs
init|=
name|lp
operator|.
name|entryInfoList
argument_list|()
decl_stmt|;
if|if
condition|(
name|dirs
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|QString
name|tmp
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dirs
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QFileInfo
name|printer
init|=
name|dirs
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|printer
operator|.
name|isDir
argument_list|()
condition|)
block|{
name|tmp
operator|.
name|sprintf
argument_list|(
literal|"/etc/lp/printers/%s/configuration"
argument_list|,
name|QFile
operator|::
name|encodeName
argument_list|(
name|printer
operator|.
name|fileName
argument_list|()
argument_list|)
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|QFile
name|configuration
argument_list|(
name|tmp
argument_list|)
decl_stmt|;
name|char
modifier|*
name|line
init|=
operator|new
name|char
index|[
literal|1025
index|]
decl_stmt|;
name|QString
name|remote
argument_list|(
name|QLatin1String
argument_list|(
literal|"Remote:"
argument_list|)
argument_list|)
decl_stmt|;
name|QString
name|contentType
argument_list|(
name|QLatin1String
argument_list|(
literal|"Content types:"
argument_list|)
argument_list|)
decl_stmt|;
name|QString
name|printerHost
decl_stmt|;
name|bool
name|canPrintPostscript
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|configuration
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
condition|)
block|{
while|while
condition|(
operator|!
name|configuration
operator|.
name|atEnd
argument_list|()
operator|&&
name|configuration
operator|.
name|readLine
argument_list|(
name|line
argument_list|,
literal|1024
argument_list|)
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|line
argument_list|)
operator|.
name|startsWith
argument_list|(
name|remote
argument_list|)
condition|)
block|{
specifier|const
name|char
modifier|*
name|p
init|=
name|line
decl_stmt|;
while|while
condition|(
operator|*
name|p
operator|!=
literal|':'
condition|)
name|p
operator|++
expr_stmt|;
name|p
operator|++
expr_stmt|;
while|while
condition|(
name|isspace
argument_list|(
operator|(
name|uchar
operator|)
operator|*
name|p
argument_list|)
condition|)
name|p
operator|++
expr_stmt|;
name|printerHost
operator|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|printerHost
operator|=
name|printerHost
operator|.
name|simplified
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|line
argument_list|)
operator|.
name|startsWith
argument_list|(
name|contentType
argument_list|)
condition|)
block|{
name|char
modifier|*
name|p
init|=
name|line
decl_stmt|;
while|while
condition|(
operator|*
name|p
operator|!=
literal|':'
condition|)
name|p
operator|++
expr_stmt|;
name|p
operator|++
expr_stmt|;
name|char
modifier|*
name|e
decl_stmt|;
while|while
condition|(
operator|*
name|p
condition|)
block|{
while|while
condition|(
name|isspace
argument_list|(
operator|(
name|uchar
operator|)
operator|*
name|p
argument_list|)
condition|)
name|p
operator|++
expr_stmt|;
if|if
condition|(
operator|*
name|p
condition|)
block|{
name|char
name|s
decl_stmt|;
name|e
operator|=
name|p
expr_stmt|;
while|while
condition|(
name|isalnum
argument_list|(
operator|(
name|uchar
operator|)
operator|*
name|e
argument_list|)
condition|)
name|e
operator|++
expr_stmt|;
name|s
operator|=
operator|*
name|e
expr_stmt|;
operator|*
name|e
operator|=
literal|'\0'
expr_stmt|;
if|if
condition|(
operator|!
name|qstrcmp
argument_list|(
name|p
argument_list|,
literal|"postscript"
argument_list|)
operator|||
operator|!
name|qstrcmp
argument_list|(
name|p
argument_list|,
literal|"any"
argument_list|)
condition|)
name|canPrintPostscript
operator|=
literal|true
expr_stmt|;
operator|*
name|e
operator|=
name|s
expr_stmt|;
if|if
condition|(
name|s
operator|==
literal|','
condition|)
name|e
operator|++
expr_stmt|;
name|p
operator|=
name|e
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|canPrintPostscript
condition|)
name|qt_perhapsAddPrinter
argument_list|(
name|printers
argument_list|,
name|printer
operator|.
name|fileName
argument_list|()
argument_list|,
name|printerHost
argument_list|,
name|QLatin1String
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
operator|delete
index|[]
name|line
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|// solaris 2.6
end_comment
begin_function
DECL|function|qt_parsePrintersConf
name|char
modifier|*
name|qt_parsePrintersConf
parameter_list|(
name|QList
argument_list|<
name|QPrinterDescription
argument_list|>
modifier|*
name|printers
parameter_list|,
name|bool
modifier|*
name|found
parameter_list|)
block|{
name|QFile
name|pc
argument_list|(
name|QLatin1String
argument_list|(
literal|"/etc/printers.conf"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|pc
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
condition|)
block|{
if|if
condition|(
name|found
condition|)
operator|*
name|found
operator|=
literal|false
expr_stmt|;
return|return
literal|0
return|;
block|}
if|if
condition|(
name|found
condition|)
operator|*
name|found
operator|=
literal|true
expr_stmt|;
name|char
modifier|*
name|line
init|=
operator|new
name|char
index|[
literal|1025
index|]
decl_stmt|;
name|line
index|[
literal|1024
index|]
operator|=
literal|'\0'
expr_stmt|;
name|QString
name|printerDesc
decl_stmt|;
name|int
name|lineLength
init|=
literal|0
decl_stmt|;
name|char
modifier|*
name|defaultPrinter
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|pc
operator|.
name|atEnd
argument_list|()
operator|&&
operator|(
name|lineLength
operator|=
name|pc
operator|.
name|readLine
argument_list|(
name|line
argument_list|,
literal|1024
argument_list|)
operator|)
operator|>
literal|0
condition|)
block|{
if|if
condition|(
operator|*
name|line
operator|==
literal|'#'
condition|)
block|{
operator|*
name|line
operator|=
literal|'\0'
expr_stmt|;
name|lineLength
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|lineLength
operator|>=
literal|2
operator|&&
name|line
index|[
name|lineLength
operator|-
literal|2
index|]
operator|==
literal|'\\'
condition|)
block|{
name|line
index|[
name|lineLength
operator|-
literal|2
index|]
operator|=
literal|'\0'
expr_stmt|;
name|printerDesc
operator|+=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|printerDesc
operator|+=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|printerDesc
operator|=
name|printerDesc
operator|.
name|simplified
argument_list|()
expr_stmt|;
name|int
name|i
init|=
name|printerDesc
operator|.
name|indexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
argument_list|)
decl_stmt|;
name|QString
name|printerName
decl_stmt|,
name|printerHost
decl_stmt|,
name|printerComment
decl_stmt|;
name|QStringList
name|aliases
decl_stmt|;
if|if
condition|(
name|i
operator|>=
literal|0
condition|)
block|{
comment|// have : want |
name|int
name|j
init|=
name|printerDesc
operator|.
name|indexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|'|'
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|j
operator|>=
name|i
condition|)
name|j
operator|=
operator|-
literal|1
expr_stmt|;
name|printerName
operator|=
name|printerDesc
operator|.
name|mid
argument_list|(
literal|0
argument_list|,
name|j
operator|<
literal|0
condition|?
name|i
else|:
name|j
argument_list|)
expr_stmt|;
if|if
condition|(
name|printerName
operator|==
name|QLatin1String
argument_list|(
literal|"_default"
argument_list|)
condition|)
block|{
name|i
operator|=
name|printerDesc
operator|.
name|indexOf
argument_list|(
name|QRegExp
argument_list|(
name|QLatin1String
argument_list|(
literal|": *use *="
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|printerDesc
index|[
name|i
index|]
operator|!=
name|QLatin1Char
argument_list|(
literal|'='
argument_list|)
condition|)
name|i
operator|++
expr_stmt|;
while|while
condition|(
name|printerDesc
index|[
name|i
index|]
operator|==
name|QLatin1Char
argument_list|(
literal|'='
argument_list|)
operator|||
name|printerDesc
index|[
name|i
index|]
operator|.
name|isSpace
argument_list|()
condition|)
name|i
operator|++
expr_stmt|;
name|j
operator|=
name|i
expr_stmt|;
while|while
condition|(
name|j
operator|<
operator|(
name|int
operator|)
name|printerDesc
operator|.
name|length
argument_list|()
operator|&&
name|printerDesc
index|[
name|j
index|]
operator|!=
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
operator|&&
name|printerDesc
index|[
name|j
index|]
operator|!=
name|QLatin1Char
argument_list|(
literal|','
argument_list|)
condition|)
name|j
operator|++
expr_stmt|;
comment|// that's our default printer
name|defaultPrinter
operator|=
name|qstrdup
argument_list|(
name|printerDesc
operator|.
name|mid
argument_list|(
name|i
argument_list|,
name|j
operator|-
name|i
argument_list|)
operator|.
name|toLatin1
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|printerName
operator|=
name|QString
argument_list|()
expr_stmt|;
name|printerDesc
operator|=
name|QString
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|printerName
operator|==
name|QLatin1String
argument_list|(
literal|"_all"
argument_list|)
condition|)
block|{
comment|// skip it.. any other cases we want to skip?
name|printerName
operator|=
name|QString
argument_list|()
expr_stmt|;
name|printerDesc
operator|=
name|QString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|j
operator|>
literal|0
condition|)
block|{
comment|// try extracting a comment from the aliases
name|aliases
operator|=
name|printerDesc
operator|.
name|mid
argument_list|(
name|j
operator|+
literal|1
argument_list|,
name|i
operator|-
name|j
operator|-
literal|1
argument_list|)
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|'|'
argument_list|)
argument_list|)
expr_stmt|;
name|printerComment
operator|=
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPrinter"
argument_list|,
literal|"Aliases: %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|aliases
operator|.
name|join
argument_list|(
name|QLatin1String
argument_list|(
literal|", "
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// look for signs of this being a remote printer
name|i
operator|=
name|printerDesc
operator|.
name|indexOf
argument_list|(
name|QRegExp
argument_list|(
name|QLatin1String
argument_list|(
literal|": *bsdaddr *="
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|>=
literal|0
condition|)
block|{
comment|// point k at the end of remote host name
while|while
condition|(
name|printerDesc
index|[
name|i
index|]
operator|!=
name|QLatin1Char
argument_list|(
literal|'='
argument_list|)
condition|)
name|i
operator|++
expr_stmt|;
while|while
condition|(
name|printerDesc
index|[
name|i
index|]
operator|==
name|QLatin1Char
argument_list|(
literal|'='
argument_list|)
operator|||
name|printerDesc
index|[
name|i
index|]
operator|.
name|isSpace
argument_list|()
condition|)
name|i
operator|++
expr_stmt|;
name|j
operator|=
name|i
expr_stmt|;
while|while
condition|(
name|j
operator|<
operator|(
name|int
operator|)
name|printerDesc
operator|.
name|length
argument_list|()
operator|&&
name|printerDesc
index|[
name|j
index|]
operator|!=
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
operator|&&
name|printerDesc
index|[
name|j
index|]
operator|!=
name|QLatin1Char
argument_list|(
literal|','
argument_list|)
condition|)
name|j
operator|++
expr_stmt|;
comment|// and stuff that into the string
name|printerHost
operator|=
name|printerDesc
operator|.
name|mid
argument_list|(
name|i
argument_list|,
name|j
operator|-
name|i
argument_list|)
expr_stmt|;
comment|// maybe stick the remote printer name into the comment
if|if
condition|(
name|printerDesc
index|[
name|j
index|]
operator|==
name|QLatin1Char
argument_list|(
literal|','
argument_list|)
condition|)
block|{
name|i
operator|=
operator|++
name|j
expr_stmt|;
while|while
condition|(
name|printerDesc
index|[
name|i
index|]
operator|.
name|isSpace
argument_list|()
condition|)
name|i
operator|++
expr_stmt|;
name|j
operator|=
name|i
expr_stmt|;
while|while
condition|(
name|j
operator|<
operator|(
name|int
operator|)
name|printerDesc
operator|.
name|length
argument_list|()
operator|&&
name|printerDesc
index|[
name|j
index|]
operator|!=
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
operator|&&
name|printerDesc
index|[
name|j
index|]
operator|!=
name|QLatin1Char
argument_list|(
literal|','
argument_list|)
condition|)
name|j
operator|++
expr_stmt|;
if|if
condition|(
name|printerName
operator|!=
name|printerDesc
operator|.
name|mid
argument_list|(
name|i
argument_list|,
name|j
operator|-
name|i
argument_list|)
condition|)
block|{
name|printerComment
operator|=
name|QLatin1String
argument_list|(
literal|"Remote name: "
argument_list|)
expr_stmt|;
name|printerComment
operator|+=
name|printerDesc
operator|.
name|mid
argument_list|(
name|i
argument_list|,
name|j
operator|-
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|printerComment
operator|==
name|QLatin1String
argument_list|(
literal|":"
argument_list|)
condition|)
name|printerComment
operator|=
name|QString
argument_list|()
expr_stmt|;
comment|// for cups
if|if
condition|(
name|printerName
operator|.
name|length
argument_list|()
condition|)
name|qt_perhapsAddPrinter
argument_list|(
name|printers
argument_list|,
name|printerName
argument_list|,
name|printerHost
argument_list|,
name|printerComment
argument_list|,
name|aliases
argument_list|)
expr_stmt|;
comment|// chop away the line, for processing the next one
name|printerDesc
operator|=
name|QString
argument_list|()
expr_stmt|;
block|}
block|}
operator|delete
index|[]
name|line
expr_stmt|;
return|return
name|defaultPrinter
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_NIS
end_ifndef
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_C_CALLBACKS
argument_list|)
end_if
begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
DECL|function|qt_pd_foreach
name|int
name|qt_pd_foreach
parameter_list|(
name|int
comment|/*status */
parameter_list|,
name|char
modifier|*
comment|/*key */
parameter_list|,
name|int
comment|/*keyLen */
parameter_list|,
name|char
modifier|*
name|val
parameter_list|,
name|int
name|valLen
parameter_list|,
name|char
modifier|*
name|data
parameter_list|)
block|{
name|qt_parsePrinterDesc
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|val
argument_list|,
name|valLen
argument_list|)
argument_list|,
operator|(
name|QList
argument_list|<
name|QPrinterDescription
argument_list|>
operator|*
operator|)
name|data
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
if|#
directive|if
name|defined
argument_list|(
name|Q_C_CALLBACKS
argument_list|)
block|}
end_extern
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|qt_retrieveNisPrinters
name|int
name|qt_retrieveNisPrinters
parameter_list|(
name|QList
argument_list|<
name|QPrinterDescription
argument_list|>
modifier|*
name|printers
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_LIBRARY
typedef|typedef
name|int
function_decl|(
modifier|*
name|WildCast
function_decl|)
parameter_list|(
name|int
parameter_list|,
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|char
modifier|*
parameter_list|)
function_decl|;
name|char
name|printersConfByname
index|[]
init|=
literal|"printers.conf.byname"
decl_stmt|;
name|char
modifier|*
name|domain
decl_stmt|;
name|int
name|err
decl_stmt|;
name|QLibrary
name|lib
argument_list|(
name|QLatin1String
argument_list|(
literal|"nsl"
argument_list|)
argument_list|)
decl_stmt|;
typedef|typedef
name|int
function_decl|(
modifier|*
name|ypGetDefaultDomain
function_decl|)
parameter_list|(
name|char
modifier|*
modifier|*
parameter_list|)
function_decl|;
name|ypGetDefaultDomain
name|_ypGetDefaultDomain
init|=
operator|(
name|ypGetDefaultDomain
operator|)
name|lib
operator|.
name|resolve
argument_list|(
literal|"yp_get_default_domain"
argument_list|)
decl_stmt|;
typedef|typedef
name|int
function_decl|(
modifier|*
name|ypAll
function_decl|)
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|struct
name|ypall_callback
modifier|*
parameter_list|)
function_decl|;
name|ypAll
name|_ypAll
init|=
operator|(
name|ypAll
operator|)
name|lib
operator|.
name|resolve
argument_list|(
literal|"yp_all"
argument_list|)
decl_stmt|;
if|if
condition|(
name|_ypGetDefaultDomain
operator|&&
name|_ypAll
condition|)
block|{
name|err
operator|=
name|_ypGetDefaultDomain
argument_list|(
operator|&
name|domain
argument_list|)
expr_stmt|;
if|if
condition|(
name|err
operator|==
literal|0
condition|)
block|{
name|ypall_callback
name|cb
decl_stmt|;
comment|// wild cast to support K&R-style system headers
operator|(
name|WildCast
operator|&
operator|)
name|cb
operator|.
foreach|foreach =
control|(
name|WildCast
control|)
name|qt_pd_foreach
expr_stmt|;
name|cb
operator|.
name|data
operator|=
operator|(
name|char
operator|*
operator|)
name|printers
expr_stmt|;
name|err
operator|=
name|_ypAll
argument_list|(
name|domain
argument_list|,
name|printersConfByname
argument_list|,
operator|&
name|cb
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|err
condition|)
return|return
name|Success
return|;
block|}
endif|#
directive|endif
comment|//QT_NO_LIBRARY
return|return
name|Unavail
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_NIS
end_comment
begin_function
DECL|function|qt_parseNsswitchPrintersEntry
name|char
modifier|*
name|qt_parseNsswitchPrintersEntry
parameter_list|(
name|QList
argument_list|<
name|QPrinterDescription
argument_list|>
modifier|*
name|printers
parameter_list|,
name|char
modifier|*
name|line
parameter_list|)
block|{
DECL|macro|skipSpaces
define|#
directive|define
name|skipSpaces
parameter_list|()
define|\
value|while (line[k] != '\0'&& isspace((uchar) line[k])) \         k++
name|char
modifier|*
name|defaultPrinter
init|=
literal|0
decl_stmt|;
name|bool
name|stop
init|=
literal|false
decl_stmt|;
name|int
name|lastStatus
init|=
name|NotFound
decl_stmt|;
name|int
name|k
init|=
literal|8
decl_stmt|;
name|skipSpaces
argument_list|()
expr_stmt|;
if|if
condition|(
name|line
index|[
name|k
index|]
operator|!=
literal|':'
condition|)
return|return
literal|0
return|;
name|k
operator|++
expr_stmt|;
name|char
modifier|*
name|cp
init|=
name|strchr
argument_list|(
name|line
argument_list|,
literal|'#'
argument_list|)
decl_stmt|;
if|if
condition|(
name|cp
operator|!=
literal|0
condition|)
operator|*
name|cp
operator|=
literal|'\0'
expr_stmt|;
while|while
condition|(
name|line
index|[
name|k
index|]
operator|!=
literal|'\0'
condition|)
block|{
if|if
condition|(
name|isspace
argument_list|(
operator|(
name|uchar
operator|)
name|line
index|[
name|k
index|]
argument_list|)
condition|)
block|{
name|k
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|line
index|[
name|k
index|]
operator|==
literal|'['
condition|)
block|{
name|k
operator|++
expr_stmt|;
name|skipSpaces
argument_list|()
expr_stmt|;
while|while
condition|(
name|line
index|[
name|k
index|]
operator|!=
literal|'\0'
condition|)
block|{
name|char
name|status
init|=
name|tolower
argument_list|(
name|line
index|[
name|k
index|]
argument_list|)
decl_stmt|;
name|char
name|action
init|=
literal|'?'
decl_stmt|;
while|while
condition|(
name|line
index|[
name|k
index|]
operator|!=
literal|'='
operator|&&
name|line
index|[
name|k
index|]
operator|!=
literal|']'
operator|&&
name|line
index|[
name|k
index|]
operator|!=
literal|'\0'
condition|)
name|k
operator|++
expr_stmt|;
if|if
condition|(
name|line
index|[
name|k
index|]
operator|==
literal|'='
condition|)
block|{
name|k
operator|++
expr_stmt|;
name|skipSpaces
argument_list|()
expr_stmt|;
name|action
operator|=
name|tolower
argument_list|(
name|line
index|[
name|k
index|]
argument_list|)
expr_stmt|;
while|while
condition|(
name|line
index|[
name|k
index|]
operator|!=
literal|'\0'
operator|&&
operator|!
name|isspace
argument_list|(
operator|(
name|uchar
operator|)
name|line
index|[
name|k
index|]
argument_list|)
operator|&&
name|line
index|[
name|k
index|]
operator|!=
literal|']'
condition|)
name|k
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|line
index|[
name|k
index|]
operator|==
literal|']'
condition|)
block|{
name|k
operator|++
expr_stmt|;
break|break;
block|}
name|skipSpaces
argument_list|()
expr_stmt|;
if|if
condition|(
name|lastStatus
operator|==
name|status
condition|)
name|stop
operator|=
operator|(
name|action
operator|==
operator|(
name|char
operator|)
name|Return
operator|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|stop
condition|)
break|break;
name|QByteArray
name|source
decl_stmt|;
while|while
condition|(
name|line
index|[
name|k
index|]
operator|!=
literal|'\0'
operator|&&
operator|!
name|isspace
argument_list|(
operator|(
name|uchar
operator|)
name|line
index|[
name|k
index|]
argument_list|)
operator|&&
name|line
index|[
name|k
index|]
operator|!=
literal|'['
condition|)
block|{
name|source
operator|+=
name|line
index|[
name|k
index|]
expr_stmt|;
name|k
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|source
operator|==
literal|"user"
condition|)
block|{
name|lastStatus
operator|=
name|qt_parsePrintcap
argument_list|(
name|printers
argument_list|,
name|QDir
operator|::
name|homePath
argument_list|()
operator|+
name|QLatin1String
argument_list|(
literal|"/.printers"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|source
operator|==
literal|"files"
condition|)
block|{
name|bool
name|found
decl_stmt|;
name|defaultPrinter
operator|=
name|qt_parsePrintersConf
argument_list|(
name|printers
argument_list|,
operator|&
name|found
argument_list|)
expr_stmt|;
if|if
condition|(
name|found
condition|)
name|lastStatus
operator|=
name|Success
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_NIS
block|}
elseif|else
if|if
condition|(
name|source
operator|==
literal|"nis"
condition|)
block|{
name|lastStatus
operator|=
name|qt_retrieveNisPrinters
argument_list|(
name|printers
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
else|else
block|{
comment|// nisplus, dns, etc., are not implemented yet
name|lastStatus
operator|=
name|NotFound
expr_stmt|;
block|}
name|stop
operator|=
operator|(
name|lastStatus
operator|==
name|Success
operator|)
expr_stmt|;
block|}
block|}
return|return
name|defaultPrinter
return|;
block|}
end_function
begin_function
DECL|function|qt_parseNsswitchConf
name|char
modifier|*
name|qt_parseNsswitchConf
parameter_list|(
name|QList
argument_list|<
name|QPrinterDescription
argument_list|>
modifier|*
name|printers
parameter_list|)
block|{
name|QFile
name|nc
argument_list|(
name|QLatin1String
argument_list|(
literal|"/etc/nsswitch.conf"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|nc
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
condition|)
return|return
literal|0
return|;
name|char
modifier|*
name|defaultPrinter
init|=
literal|0
decl_stmt|;
name|char
modifier|*
name|line
init|=
operator|new
name|char
index|[
literal|1025
index|]
decl_stmt|;
name|line
index|[
literal|1024
index|]
operator|=
literal|'\0'
expr_stmt|;
while|while
condition|(
operator|!
name|nc
operator|.
name|atEnd
argument_list|()
operator|&&
name|nc
operator|.
name|readLine
argument_list|(
name|line
argument_list|,
literal|1024
argument_list|)
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|qstrncmp
argument_list|(
name|line
argument_list|,
literal|"printers"
argument_list|,
literal|8
argument_list|)
operator|==
literal|0
condition|)
block|{
name|defaultPrinter
operator|=
name|qt_parseNsswitchPrintersEntry
argument_list|(
name|printers
argument_list|,
name|line
argument_list|)
expr_stmt|;
operator|delete
index|[]
name|line
expr_stmt|;
return|return
name|defaultPrinter
return|;
block|}
block|}
name|strcpy
argument_list|(
name|line
argument_list|,
literal|"printers: user files nis nisplus xfn"
argument_list|)
expr_stmt|;
name|defaultPrinter
operator|=
name|qt_parseNsswitchPrintersEntry
argument_list|(
name|printers
argument_list|,
name|line
argument_list|)
expr_stmt|;
operator|delete
index|[]
name|line
expr_stmt|;
return|return
name|defaultPrinter
return|;
block|}
end_function
begin_comment
comment|// HP-UX
end_comment
begin_function
DECL|function|qt_parseEtcLpMember
name|void
name|qt_parseEtcLpMember
parameter_list|(
name|QList
argument_list|<
name|QPrinterDescription
argument_list|>
modifier|*
name|printers
parameter_list|)
block|{
name|QDir
name|lp
argument_list|(
name|QLatin1String
argument_list|(
literal|"/etc/lp/member"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|lp
operator|.
name|exists
argument_list|()
condition|)
return|return;
name|QFileInfoList
name|dirs
init|=
name|lp
operator|.
name|entryInfoList
argument_list|()
decl_stmt|;
if|if
condition|(
name|dirs
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dirs
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QFileInfo
name|printer
init|=
name|dirs
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// I haven't found any real documentation, so I'm guessing that
comment|// since lpstat uses /etc/lp/member rather than one of the
comment|// other directories, it's the one to use.  I did not find a
comment|// decent way to locate aliases and remote printers.
if|if
condition|(
name|printer
operator|.
name|isFile
argument_list|()
condition|)
name|qt_perhapsAddPrinter
argument_list|(
name|printers
argument_list|,
name|printer
operator|.
name|fileName
argument_list|()
argument_list|,
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPrinter"
argument_list|,
literal|"unknown"
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|// IRIX 6.x
end_comment
begin_function
DECL|function|qt_parseSpoolInterface
name|void
name|qt_parseSpoolInterface
parameter_list|(
name|QList
argument_list|<
name|QPrinterDescription
argument_list|>
modifier|*
name|printers
parameter_list|)
block|{
name|QDir
name|lp
argument_list|(
name|QLatin1String
argument_list|(
literal|"/usr/spool/lp/interface"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|lp
operator|.
name|exists
argument_list|()
condition|)
return|return;
name|QFileInfoList
name|files
init|=
name|lp
operator|.
name|entryInfoList
argument_list|()
decl_stmt|;
if|if
condition|(
name|files
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|files
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QFileInfo
name|printer
init|=
name|files
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|printer
operator|.
name|isFile
argument_list|()
condition|)
continue|continue;
comment|// parse out some information
name|QFile
name|configFile
argument_list|(
name|printer
operator|.
name|filePath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|configFile
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
condition|)
continue|continue;
name|QByteArray
name|line
decl_stmt|;
name|line
operator|.
name|resize
argument_list|(
literal|1025
argument_list|)
expr_stmt|;
name|QString
name|namePrinter
decl_stmt|;
name|QString
name|hostName
decl_stmt|;
name|QString
name|hostPrinter
decl_stmt|;
name|QString
name|printerType
decl_stmt|;
name|QString
name|nameKey
argument_list|(
name|QLatin1String
argument_list|(
literal|"NAME="
argument_list|)
argument_list|)
decl_stmt|;
name|QString
name|typeKey
argument_list|(
name|QLatin1String
argument_list|(
literal|"TYPE="
argument_list|)
argument_list|)
decl_stmt|;
name|QString
name|hostKey
argument_list|(
name|QLatin1String
argument_list|(
literal|"HOSTNAME="
argument_list|)
argument_list|)
decl_stmt|;
name|QString
name|hostPrinterKey
argument_list|(
name|QLatin1String
argument_list|(
literal|"HOSTPRINTER="
argument_list|)
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|configFile
operator|.
name|atEnd
argument_list|()
operator|&&
operator|(
name|configFile
operator|.
name|readLine
argument_list|(
name|line
operator|.
name|data
argument_list|()
argument_list|,
literal|1024
argument_list|)
operator|)
operator|>
literal|0
condition|)
block|{
name|QString
name|uline
init|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|line
argument_list|)
decl_stmt|;
if|if
condition|(
name|uline
operator|.
name|startsWith
argument_list|(
name|typeKey
argument_list|)
condition|)
block|{
name|printerType
operator|=
name|uline
operator|.
name|mid
argument_list|(
name|nameKey
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|printerType
operator|=
name|printerType
operator|.
name|simplified
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|uline
operator|.
name|startsWith
argument_list|(
name|hostKey
argument_list|)
condition|)
block|{
name|hostName
operator|=
name|uline
operator|.
name|mid
argument_list|(
name|hostKey
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|hostName
operator|=
name|hostName
operator|.
name|simplified
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|uline
operator|.
name|startsWith
argument_list|(
name|hostPrinterKey
argument_list|)
condition|)
block|{
name|hostPrinter
operator|=
name|uline
operator|.
name|mid
argument_list|(
name|hostPrinterKey
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|hostPrinter
operator|=
name|hostPrinter
operator|.
name|simplified
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|uline
operator|.
name|startsWith
argument_list|(
name|nameKey
argument_list|)
condition|)
block|{
name|namePrinter
operator|=
name|uline
operator|.
name|mid
argument_list|(
name|nameKey
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|namePrinter
operator|=
name|namePrinter
operator|.
name|simplified
argument_list|()
expr_stmt|;
block|}
block|}
name|configFile
operator|.
name|close
argument_list|()
expr_stmt|;
name|printerType
operator|=
name|printerType
operator|.
name|trimmed
argument_list|()
expr_stmt|;
if|if
condition|(
name|printerType
operator|.
name|indexOf
argument_list|(
name|QLatin1String
argument_list|(
literal|"postscript"
argument_list|)
argument_list|,
literal|0
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|<
literal|0
condition|)
continue|continue;
name|int
name|ii
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|ii
operator|=
name|namePrinter
operator|.
name|indexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|'"'
argument_list|)
argument_list|,
name|ii
argument_list|)
operator|)
operator|>=
literal|0
condition|)
name|namePrinter
operator|.
name|remove
argument_list|(
name|ii
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|hostName
operator|.
name|isEmpty
argument_list|()
operator|||
name|hostPrinter
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|qt_perhapsAddPrinter
argument_list|(
name|printers
argument_list|,
name|printer
operator|.
name|fileName
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|""
argument_list|)
argument_list|,
name|namePrinter
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QString
name|comment
decl_stmt|;
name|comment
operator|=
name|namePrinter
expr_stmt|;
name|comment
operator|+=
name|QLatin1String
argument_list|(
literal|" ("
argument_list|)
expr_stmt|;
name|comment
operator|+=
name|hostPrinter
expr_stmt|;
name|comment
operator|+=
name|QLatin1Char
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
name|qt_perhapsAddPrinter
argument_list|(
name|printers
argument_list|,
name|printer
operator|.
name|fileName
argument_list|()
argument_list|,
name|hostName
argument_list|,
name|comment
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|// Every unix must have its own.  It's a standard.  Here is AIX.
end_comment
begin_function
DECL|function|qt_parseQconfig
name|void
name|qt_parseQconfig
parameter_list|(
name|QList
argument_list|<
name|QPrinterDescription
argument_list|>
modifier|*
name|printers
parameter_list|)
block|{
name|QFile
name|qconfig
argument_list|(
name|QLatin1String
argument_list|(
literal|"/etc/qconfig"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|qconfig
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
condition|)
return|return;
name|QTextStream
name|ts
argument_list|(
operator|&
name|qconfig
argument_list|)
decl_stmt|;
name|QString
name|line
decl_stmt|;
name|QString
name|stanzaName
decl_stmt|;
comment|// either a queue or a device name
name|bool
name|up
init|=
literal|true
decl_stmt|;
comment|// queue up?  default true, can be false
name|QString
name|remoteHost
decl_stmt|;
comment|// null if local
name|QString
name|deviceName
decl_stmt|;
comment|// null if remote
name|QRegExp
name|newStanza
argument_list|(
name|QLatin1String
argument_list|(
literal|"^[0-z\\-]*:$"
argument_list|)
argument_list|)
decl_stmt|;
comment|// our basic strategy here is to process each line, detecting new
comment|// stanzas.  each time we see a new stanza, we check if the
comment|// previous stanza was a valid queue for a) a remote printer or b)
comment|// a local printer.  if it wasn't, we assume that what we see is
comment|// the start of the first stanza, or that the previous stanza was
comment|// a device stanza, or that there is some syntax error (we don't
comment|// report those).
do|do
block|{
name|line
operator|=
name|ts
operator|.
name|readLine
argument_list|()
expr_stmt|;
name|bool
name|indented
init|=
name|line
index|[
literal|0
index|]
operator|.
name|isSpace
argument_list|()
decl_stmt|;
name|line
operator|=
name|line
operator|.
name|simplified
argument_list|()
expr_stmt|;
name|int
name|i
init|=
name|line
operator|.
name|indexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|'='
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|indented
operator|&&
name|i
operator|!=
operator|-
literal|1
condition|)
block|{
comment|// line in stanza
name|QString
name|variable
init|=
name|line
operator|.
name|left
argument_list|(
name|i
argument_list|)
operator|.
name|simplified
argument_list|()
decl_stmt|;
name|QString
name|value
init|=
name|line
operator|.
name|mid
argument_list|(
name|i
operator|+
literal|1
argument_list|,
name|line
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|simplified
argument_list|()
decl_stmt|;
if|if
condition|(
name|variable
operator|==
name|QLatin1String
argument_list|(
literal|"device"
argument_list|)
condition|)
name|deviceName
operator|=
name|value
expr_stmt|;
elseif|else
if|if
condition|(
name|variable
operator|==
name|QLatin1String
argument_list|(
literal|"host"
argument_list|)
condition|)
name|remoteHost
operator|=
name|value
expr_stmt|;
elseif|else
if|if
condition|(
name|variable
operator|==
name|QLatin1String
argument_list|(
literal|"up"
argument_list|)
condition|)
name|up
operator|=
operator|!
operator|(
name|value
operator|.
name|toLower
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"false"
argument_list|)
operator|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|line
index|[
literal|0
index|]
operator|==
name|QLatin1Char
argument_list|(
literal|'*'
argument_list|)
condition|)
block|{
comment|// comment
comment|// nothing to do
block|}
elseif|else
if|if
condition|(
name|ts
operator|.
name|atEnd
argument_list|()
operator|||
comment|// end of file, or beginning of new stanza
operator|(
operator|!
name|indented
operator|&&
name|line
operator|.
name|contains
argument_list|(
name|newStanza
argument_list|)
operator|)
condition|)
block|{
if|if
condition|(
name|up
operator|&&
name|stanzaName
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
name|stanzaName
operator|.
name|length
argument_list|()
operator|<
literal|21
condition|)
block|{
if|if
condition|(
name|remoteHost
operator|.
name|length
argument_list|()
condition|)
comment|// remote printer
name|qt_perhapsAddPrinter
argument_list|(
name|printers
argument_list|,
name|stanzaName
argument_list|,
name|remoteHost
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|deviceName
operator|.
name|length
argument_list|()
condition|)
comment|// local printer
name|qt_perhapsAddPrinter
argument_list|(
name|printers
argument_list|,
name|stanzaName
argument_list|,
name|QString
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|line
operator|.
name|chop
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|line
operator|.
name|length
argument_list|()
operator|>=
literal|1
operator|&&
name|line
operator|.
name|length
argument_list|()
operator|<=
literal|20
condition|)
name|stanzaName
operator|=
name|line
expr_stmt|;
name|up
operator|=
literal|true
expr_stmt|;
name|remoteHost
operator|.
name|clear
argument_list|()
expr_stmt|;
name|deviceName
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// syntax error?  ignore.
block|}
block|}
do|while
condition|(
operator|!
name|ts
operator|.
name|atEnd
argument_list|()
condition|)
do|;
block|}
end_function
begin_function
DECL|function|qt_getLprPrinters
name|Q_PRINTSUPPORT_EXPORT
name|int
name|qt_getLprPrinters
parameter_list|(
name|QList
argument_list|<
name|QPrinterDescription
argument_list|>
modifier|&
name|printers
parameter_list|)
block|{
name|QByteArray
name|etcLpDefault
decl_stmt|;
name|qt_parsePrintcap
argument_list|(
operator|&
name|printers
argument_list|,
name|QLatin1String
argument_list|(
literal|"/etc/printcap"
argument_list|)
argument_list|)
expr_stmt|;
name|qt_parseEtcLpMember
argument_list|(
operator|&
name|printers
argument_list|)
expr_stmt|;
name|qt_parseSpoolInterface
argument_list|(
operator|&
name|printers
argument_list|)
expr_stmt|;
name|qt_parseQconfig
argument_list|(
operator|&
name|printers
argument_list|)
expr_stmt|;
name|QFileInfo
name|f
decl_stmt|;
name|f
operator|.
name|setFile
argument_list|(
name|QLatin1String
argument_list|(
literal|"/etc/lp/printers"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|f
operator|.
name|isDir
argument_list|()
condition|)
block|{
name|qt_parseEtcLpPrinters
argument_list|(
operator|&
name|printers
argument_list|)
expr_stmt|;
name|QFile
name|def
argument_list|(
name|QLatin1String
argument_list|(
literal|"/etc/lp/default"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|def
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
condition|)
block|{
name|etcLpDefault
operator|.
name|resize
argument_list|(
literal|1025
argument_list|)
expr_stmt|;
if|if
condition|(
name|def
operator|.
name|readLine
argument_list|(
name|etcLpDefault
operator|.
name|data
argument_list|()
argument_list|,
literal|1024
argument_list|)
operator|>
literal|0
condition|)
block|{
name|QRegExp
name|rx
argument_list|(
name|QLatin1String
argument_list|(
literal|"^(\\S+)"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|rx
operator|.
name|indexIn
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|etcLpDefault
argument_list|)
argument_list|)
operator|!=
operator|-
literal|1
condition|)
name|etcLpDefault
operator|=
name|rx
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
operator|.
name|toLatin1
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|char
modifier|*
name|def
init|=
literal|0
decl_stmt|;
name|f
operator|.
name|setFile
argument_list|(
name|QLatin1String
argument_list|(
literal|"/etc/nsswitch.conf"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|f
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|def
operator|=
name|qt_parseNsswitchConf
argument_list|(
operator|&
name|printers
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|f
operator|.
name|setFile
argument_list|(
name|QLatin1String
argument_list|(
literal|"/etc/printers.conf"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|f
operator|.
name|isFile
argument_list|()
condition|)
name|def
operator|=
name|qt_parsePrintersConf
argument_list|(
operator|&
name|printers
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|def
condition|)
block|{
name|etcLpDefault
operator|=
name|def
expr_stmt|;
operator|delete
index|[]
name|def
expr_stmt|;
block|}
name|QString
name|homePrintersDefault
init|=
name|qt_getDefaultFromHomePrinters
argument_list|()
decl_stmt|;
comment|// all printers hopefully known.  try to find a good default
name|QString
name|dollarPrinter
decl_stmt|;
block|{
name|dollarPrinter
operator|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|qgetenv
argument_list|(
literal|"PRINTER"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|dollarPrinter
operator|.
name|isEmpty
argument_list|()
condition|)
name|dollarPrinter
operator|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|qgetenv
argument_list|(
literal|"LPDEST"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|dollarPrinter
operator|.
name|isEmpty
argument_list|()
condition|)
name|dollarPrinter
operator|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|qgetenv
argument_list|(
literal|"NPRINTER"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|dollarPrinter
operator|.
name|isEmpty
argument_list|()
condition|)
name|dollarPrinter
operator|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|qgetenv
argument_list|(
literal|"NGPRINTER"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dollarPrinter
operator|.
name|isEmpty
argument_list|()
condition|)
name|qt_perhapsAddPrinter
argument_list|(
operator|&
name|printers
argument_list|,
name|dollarPrinter
argument_list|,
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPrinter"
argument_list|,
literal|"unknown"
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QRegExp
name|ps
argument_list|(
name|QLatin1String
argument_list|(
literal|"[^a-z]ps(?:[^a-z]|$)"
argument_list|)
argument_list|)
decl_stmt|;
name|QRegExp
name|lp
argument_list|(
name|QLatin1String
argument_list|(
literal|"[^a-z]lp(?:[^a-z]|$)"
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|quality
init|=
literal|0
decl_stmt|;
name|int
name|best
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|printers
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|name
init|=
name|printers
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|name
decl_stmt|;
name|QString
name|comment
init|=
name|printers
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|comment
decl_stmt|;
if|if
condition|(
name|quality
operator|<
literal|5
operator|&&
name|name
operator|==
name|dollarPrinter
condition|)
block|{
name|best
operator|=
name|i
expr_stmt|;
name|quality
operator|=
literal|5
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|quality
operator|<
literal|4
operator|&&
operator|!
name|homePrintersDefault
operator|.
name|isEmpty
argument_list|()
operator|&&
name|name
operator|==
name|homePrintersDefault
condition|)
block|{
name|best
operator|=
name|i
expr_stmt|;
name|quality
operator|=
literal|4
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|quality
operator|<
literal|3
operator|&&
operator|!
name|etcLpDefault
operator|.
name|isEmpty
argument_list|()
operator|&&
name|name
operator|==
name|QLatin1String
argument_list|(
name|etcLpDefault
argument_list|)
condition|)
block|{
name|best
operator|=
name|i
expr_stmt|;
name|quality
operator|=
literal|3
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|quality
operator|<
literal|2
operator|&&
operator|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"ps"
argument_list|)
operator|||
name|ps
operator|.
name|indexIn
argument_list|(
name|comment
argument_list|)
operator|!=
operator|-
literal|1
operator|)
condition|)
block|{
name|best
operator|=
name|i
expr_stmt|;
name|quality
operator|=
literal|2
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|quality
operator|<
literal|1
operator|&&
operator|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"lp"
argument_list|)
operator|||
name|lp
operator|.
name|indexIn
argument_list|(
name|comment
argument_list|)
operator|>
operator|-
literal|1
operator|)
condition|)
block|{
name|best
operator|=
name|i
expr_stmt|;
name|quality
operator|=
literal|1
expr_stmt|;
block|}
block|}
return|return
name|best
return|;
block|}
end_function
begin_comment
comment|/////////////////////////////////////////////////////////////////////////////
end_comment
begin_comment
comment|/////////////////////////////////////////////////////////////////////////////
end_comment
begin_function
DECL|function|qt_getCupsPrinterPaperSizes
name|QList
argument_list|<
name|QPrinter
operator|::
name|PaperSize
argument_list|>
name|qt_getCupsPrinterPaperSizes
parameter_list|(
name|int
name|cupsPrinterIndex
parameter_list|)
block|{
name|QList
argument_list|<
name|QPrinter
operator|::
name|PaperSize
argument_list|>
name|result
decl_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_CUPS
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_LIBRARY
argument_list|)
if|if
condition|(
operator|!
name|QCUPSSupport
operator|::
name|isAvailable
argument_list|()
operator|||
name|cupsPrinterIndex
operator|<
literal|0
condition|)
return|return
name|result
return|;
comment|// Find paper sizes from CUPS.
name|QCUPSSupport
name|cups
decl_stmt|;
name|cups
operator|.
name|setCurrentPrinter
argument_list|(
name|cupsPrinterIndex
argument_list|)
expr_stmt|;
if|if
condition|(
specifier|const
name|ppd_option_t
modifier|*
name|size
init|=
name|cups
operator|.
name|pageSizes
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|size
operator|->
name|num_choices
condition|;
operator|++
name|j
control|)
name|result
operator|.
name|append
argument_list|(
name|string2PaperSize
argument_list|(
name|size
operator|->
name|choices
index|[
name|j
index|]
operator|.
name|choice
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|#
directive|else
name|Q_UNUSED
argument_list|(
argument|cupsPrinterIndex
argument_list|)
endif|#
directive|endif
return|return
name|result
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_PRINTER
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
