begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QPRINTENGINE_WIN_P_H
end_ifndef
begin_define
DECL|macro|QPRINTENGINE_WIN_P_H
define|#
directive|define
name|QPRINTENGINE_WIN_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists for the convenience
end_comment
begin_comment
comment|// of other Qt classes.  This header file may change from version to
end_comment
begin_comment
comment|// version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|<QtCore/qglobal.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_PRINTER
end_ifndef
begin_include
include|#
directive|include
file|<QtGui/qpaintengine.h>
end_include
begin_include
include|#
directive|include
file|<QtPrintSupport/QPrintEngine>
end_include
begin_include
include|#
directive|include
file|<QtPrintSupport/QPrinter>
end_include
begin_include
include|#
directive|include
file|<QtPrintSupport/QPrinterInfo>
end_include
begin_include
include|#
directive|include
file|<private/qpaintengine_alpha_p.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qt_windows.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QWin32PrintEnginePrivate
name|class
name|QWin32PrintEnginePrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QPrinterPrivate
name|class
name|QPrinterPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QPainterState
name|class
name|QPainterState
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QAlphaPaintEngine
name|class
name|Q_PRINTSUPPORT_EXPORT
name|QWin32PrintEngine
range|:
name|public
name|QAlphaPaintEngine
decl_stmt|,
name|public
name|QPrintEngine
block|{
name|Q_DECLARE_PRIVATE
argument_list|(
argument|QWin32PrintEngine
argument_list|)
name|public
label|:
name|QWin32PrintEngine
argument_list|(
argument|QPrinter::PrinterMode mode
argument_list|)
empty_stmt|;
comment|// override QWin32PaintEngine
name|bool
name|begin
parameter_list|(
name|QPaintDevice
modifier|*
name|dev
parameter_list|)
function_decl|;
name|bool
name|end
parameter_list|()
function_decl|;
name|void
name|updateState
parameter_list|(
specifier|const
name|QPaintEngineState
modifier|&
name|state
parameter_list|)
function_decl|;
name|void
name|updateMatrix
parameter_list|(
specifier|const
name|QTransform
modifier|&
name|matrix
parameter_list|)
function_decl|;
name|void
name|updateClipPath
argument_list|(
specifier|const
name|QPainterPath
operator|&
name|clip
argument_list|,
name|Qt
operator|::
name|ClipOperation
name|op
argument_list|)
decl_stmt|;
name|void
name|drawPath
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|path
parameter_list|)
function_decl|;
name|void
name|drawPolygon
parameter_list|(
specifier|const
name|QPointF
modifier|*
name|points
parameter_list|,
name|int
name|pointCount
parameter_list|,
name|PolygonDrawMode
name|mode
parameter_list|)
function_decl|;
name|void
name|drawTextItem
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|p
parameter_list|,
specifier|const
name|QTextItem
modifier|&
name|textItem
parameter_list|)
function_decl|;
name|void
name|drawPixmap
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|r
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|pm
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|sr
parameter_list|)
function_decl|;
name|void
name|drawTiledPixmap
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|r
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|pm
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|p
parameter_list|)
function_decl|;
name|void
name|setProperty
parameter_list|(
name|PrintEnginePropertyKey
name|key
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|value
parameter_list|)
function_decl|;
name|QVariant
name|property
argument_list|(
name|PrintEnginePropertyKey
name|key
argument_list|)
decl|const
decl_stmt|;
name|bool
name|newPage
parameter_list|()
function_decl|;
name|bool
name|abort
parameter_list|()
function_decl|;
name|int
name|metric
argument_list|(
name|QPaintDevice
operator|::
name|PaintDeviceMetric
argument_list|)
decl|const
decl_stmt|;
name|QPrinter
operator|::
name|PrinterState
name|printerState
argument_list|()
specifier|const
expr_stmt|;
name|QPaintEngine
operator|::
name|Type
name|type
argument_list|()
specifier|const
block|{
return|return
name|Windows
return|;
block|}
name|HDC
name|getDC
argument_list|()
specifier|const
expr_stmt|;
name|void
name|releaseDC
argument_list|(
name|HDC
argument_list|)
decl|const
decl_stmt|;
specifier|static
name|QList
operator|<
name|QPrinter
operator|::
name|PaperSize
operator|>
name|supportedPaperSizes
argument_list|(
specifier|const
name|QPrinterInfo
operator|&
name|printerInfo
argument_list|)
expr_stmt|;
specifier|static
name|QList
operator|<
name|QPair
operator|<
name|QString
operator|,
name|QSizeF
operator|>
expr|>
name|supportedSizesWithNames
argument_list|(
specifier|const
name|QPrinterInfo
operator|&
name|printerInfo
argument_list|)
expr_stmt|;
specifier|static
name|void
name|queryDefaultPrinter
parameter_list|(
name|QString
modifier|&
name|name
parameter_list|,
name|QString
modifier|&
name|program
parameter_list|,
name|QString
modifier|&
name|port
parameter_list|)
function_decl|;
name|private
label|:
name|friend
name|class
name|QPrintDialog
decl_stmt|;
name|friend
name|class
name|QPageSetupDialog
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
name|class
name|QWin32PrintEnginePrivate
range|:
name|public
name|QAlphaPaintEnginePrivate
block|{
name|Q_DECLARE_PUBLIC
argument_list|(
argument|QWin32PrintEngine
argument_list|)
name|public
operator|:
name|QWin32PrintEnginePrivate
argument_list|()
operator|:
name|hPrinter
argument_list|(
literal|0
argument_list|)
block|,
name|globalDevMode
argument_list|(
literal|0
argument_list|)
block|,
name|devMode
argument_list|(
literal|0
argument_list|)
block|,
name|pInfo
argument_list|(
literal|0
argument_list|)
block|,
name|hdc
argument_list|(
literal|0
argument_list|)
block|,
name|mode
argument_list|(
name|QPrinter
operator|::
name|ScreenResolution
argument_list|)
block|,
name|state
argument_list|(
name|QPrinter
operator|::
name|Idle
argument_list|)
block|,
name|resolution
argument_list|(
literal|0
argument_list|)
block|,
name|pageMarginsSet
argument_list|(
name|false
argument_list|)
block|,
name|num_copies
argument_list|(
literal|1
argument_list|)
block|,
name|printToFile
argument_list|(
name|false
argument_list|)
block|,
name|fullPage
argument_list|(
name|false
argument_list|)
block|,
name|reinit
argument_list|(
name|false
argument_list|)
block|,
name|has_custom_paper_size
argument_list|(
argument|false
argument_list|)
block|{     }
operator|~
name|QWin32PrintEnginePrivate
argument_list|()
block|;
comment|/* Reads the default printer name and its driver (printerProgram) into        the engines private data. */
name|void
name|queryDefault
argument_list|()
block|;
comment|/* Initializes the printer data based on the current printer name. This        function creates a DEVMODE struct, HDC and a printer handle. If these        structures are already in use, they are freed using release     */
name|void
name|initialize
argument_list|()
block|;
comment|/* Initializes data in the print engine whenever the HDC has been renewed     */
name|void
name|initHDC
argument_list|()
block|;
comment|/* Releases all the handles the printer currently holds, HDC, DEVMODE,        etc and resets the corresponding members to 0. */
name|void
name|release
argument_list|()
block|;
comment|/* Queries the resolutions for the current printer, and returns them        in a list. */
name|QList
operator|<
name|QVariant
operator|>
name|queryResolutions
argument_list|()
specifier|const
block|;
comment|/* Resets the DC with changes in devmode. If the printer is active        this function only sets the reinit variable to true so it        is handled in the next begin or newpage. */
name|void
name|doReinit
argument_list|()
block|;
comment|/* Used by print/page setup dialogs */
name|HGLOBAL
operator|*
name|createDevNames
argument_list|()
block|;
name|void
name|readDevmode
argument_list|(
argument|HGLOBAL globalDevmode
argument_list|)
block|;
name|void
name|readDevnames
argument_list|(
argument|HGLOBAL globalDevnames
argument_list|)
block|;
specifier|inline
name|bool
name|resetDC
argument_list|()
block|{
name|hdc
operator|=
name|ResetDC
argument_list|(
name|hdc
argument_list|,
name|devMode
argument_list|)
block|;
return|return
name|hdc
operator|!=
literal|0
return|;
block|}
name|void
name|strokePath
argument_list|(
specifier|const
name|QPainterPath
operator|&
name|path
argument_list|,
specifier|const
name|QColor
operator|&
name|color
argument_list|)
block|;
name|void
name|fillPath
argument_list|(
specifier|const
name|QPainterPath
operator|&
name|path
argument_list|,
specifier|const
name|QColor
operator|&
name|color
argument_list|)
block|;
name|void
name|composeGdiPath
argument_list|(
specifier|const
name|QPainterPath
operator|&
name|path
argument_list|)
block|;
name|void
name|fillPath_dev
argument_list|(
specifier|const
name|QPainterPath
operator|&
name|path
argument_list|,
specifier|const
name|QColor
operator|&
name|color
argument_list|)
block|;
name|void
name|strokePath_dev
argument_list|(
argument|const QPainterPath&path
argument_list|,
argument|const QColor&color
argument_list|,
argument|qreal width
argument_list|)
block|;
name|void
name|updateOrigin
argument_list|()
block|;
name|void
name|initDevRects
argument_list|()
block|;
name|void
name|setPageMargins
argument_list|(
argument|int margin_left
argument_list|,
argument|int margin_top
argument_list|,
argument|int margin_right
argument_list|,
argument|int margin_bottom
argument_list|)
block|;
name|QRect
name|getPageMargins
argument_list|()
specifier|const
block|;
name|void
name|updateCustomPaperSize
argument_list|()
block|;
comment|// Windows GDI printer references.
name|HANDLE
name|hPrinter
block|;
name|HGLOBAL
name|globalDevMode
block|;
name|DEVMODE
operator|*
name|devMode
block|;
name|PRINTER_INFO_2
operator|*
name|pInfo
block|;
name|HGLOBAL
name|hMem
block|;
name|HDC
name|hdc
block|;
name|QPrinter
operator|::
name|PrinterMode
name|mode
block|;
comment|// Printer info
name|QString
name|name
block|;
name|QString
name|program
block|;
name|QString
name|port
block|;
comment|// Document info
name|QString
name|docName
block|;
name|QString
name|m_creator
block|;
name|QString
name|fileName
block|;
name|QPrinter
operator|::
name|PrinterState
name|state
block|;
name|int
name|resolution
block|;
comment|// This QRect is used to store the exact values
comment|// entered into the PageSetup Dialog because those are
comment|// entered in mm but are since converted to device coordinates.
comment|// If they were to be converted back when displaying the dialog
comment|// again, there would be inaccuracies so when the user entered 10
comment|// it may show up as 9.99 the next time the dialog is opened.
comment|// We don't want that confusion.
name|QRect
name|previousDialogMargins
block|;
name|bool
name|pageMarginsSet
block|;
name|QRect
name|devPageRect
block|;
name|QRect
name|devPhysicalPageRect
block|;
name|QRect
name|devPaperRect
block|;
name|qreal
name|stretch_x
block|;
name|qreal
name|stretch_y
block|;
name|int
name|origin_x
block|;
name|int
name|origin_y
block|;
name|int
name|dpi_x
block|;
name|int
name|dpi_y
block|;
name|int
name|dpi_display
block|;
name|int
name|num_copies
block|;
name|uint
name|printToFile
operator|:
literal|1
block|;
name|uint
name|fullPage
operator|:
literal|1
block|;
name|uint
name|reinit
operator|:
literal|1
block|;
name|uint
name|complex_xform
operator|:
literal|1
block|;
name|uint
name|has_pen
operator|:
literal|1
block|;
name|uint
name|has_brush
operator|:
literal|1
block|;
name|uint
name|has_custom_paper_size
operator|:
literal|1
block|;
name|uint
name|txop
block|;
name|QColor
name|brush_color
block|;
name|QPen
name|pen
block|;
name|QColor
name|pen_color
block|;
name|QSizeF
name|paper_size
block|;
name|QTransform
name|painterMatrix
block|;
name|QTransform
name|matrix
block|; }
decl_stmt|;
end_decl_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_PRINTER
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QPRINTENGINE_WIN_P_H
end_comment
end_unit
