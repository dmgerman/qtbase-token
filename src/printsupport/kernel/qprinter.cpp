begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia. For licensing terms and ** conditions see http://qt.digia.com/licensing. For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights. These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qprinter.h"
end_include
begin_include
include|#
directive|include
file|"qprinter_p.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_PRINTER
end_ifndef
begin_include
include|#
directive|include
file|<qpa/qplatformprintplugin.h>
end_include
begin_include
include|#
directive|include
file|<qpa/qplatformprintersupport.h>
end_include
begin_include
include|#
directive|include
file|"qprintengine.h"
end_include
begin_include
include|#
directive|include
file|"qlist.h"
end_include
begin_include
include|#
directive|include
file|<qcoreapplication.h>
end_include
begin_include
include|#
directive|include
file|<qfileinfo.h>
end_include
begin_include
include|#
directive|include
file|<private/qpagedpaintdevice_p.h>
end_include
begin_include
include|#
directive|include
file|"qprintengine_pdf_p.h"
end_include
begin_include
include|#
directive|include
file|<qpicture.h>
end_include
begin_include
include|#
directive|include
file|<private/qpaintengine_preview_p.h>
end_include
begin_function_decl
name|QT_BEGIN_NAMESPACE
DECL|macro|ABORT_IF_ACTIVE
define|#
directive|define
name|ABORT_IF_ACTIVE
parameter_list|(
name|location
parameter_list|)
define|\
value|if (d->printEngine->printerState() == QPrinter::Active) { \         qWarning("%s: Cannot be changed while printer is active", location); \         return; \     }
DECL|macro|ABORT_IF_ACTIVE_RETURN
define|#
directive|define
name|ABORT_IF_ACTIVE_RETURN
parameter_list|(
name|location
parameter_list|,
name|retValue
parameter_list|)
define|\
value|if (d->printEngine->printerState() == QPrinter::Active) { \         qWarning("%s: Cannot be changed while printer is active", location); \         return retValue; \     }
specifier|extern
name|qreal
name|qt_pixelMultiplier
parameter_list|(
name|int
name|resolution
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|QMarginsF
name|qt_convertMargins
parameter_list|(
specifier|const
name|QMarginsF
modifier|&
name|margins
parameter_list|,
name|QPageLayout
operator|::
name|Unit
name|fromUnits
parameter_list|,
name|QPageLayout
operator|::
name|Unit
name|toUnits
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/// return the multiplier of converting from the unit value to postscript-points.
end_comment
begin_function
DECL|function|qt_multiplierForUnit
name|Q_PRINTSUPPORT_EXPORT
name|double
name|qt_multiplierForUnit
parameter_list|(
name|QPrinter
operator|::
name|Unit
name|unit
parameter_list|,
name|int
name|resolution
parameter_list|)
block|{
switch|switch
condition|(
name|unit
condition|)
block|{
case|case
name|QPrinter
operator|::
name|Millimeter
case|:
return|return
literal|2.83464566929
return|;
case|case
name|QPrinter
operator|::
name|Point
case|:
return|return
literal|1.0
return|;
case|case
name|QPrinter
operator|::
name|Inch
case|:
return|return
literal|72.0
return|;
case|case
name|QPrinter
operator|::
name|Pica
case|:
return|return
literal|12
return|;
case|case
name|QPrinter
operator|::
name|Didot
case|:
return|return
literal|1.065826771
return|;
case|case
name|QPrinter
operator|::
name|Cicero
case|:
return|return
literal|12.789921252
return|;
case|case
name|QPrinter
operator|::
name|DevicePixel
case|:
return|return
literal|72.0
operator|/
name|resolution
return|;
block|}
return|return
literal|1.0
return|;
block|}
end_function
begin_comment
comment|// not static: it's needed in qpagesetupdialog_unix.cpp
end_comment
begin_function
DECL|function|qt_printerPaperSize
name|Q_PRINTSUPPORT_EXPORT
name|QSizeF
name|qt_printerPaperSize
parameter_list|(
name|QPrinter
operator|::
name|Orientation
name|orientation
parameter_list|,
name|QPrinter
operator|::
name|PaperSize
name|paperSize
parameter_list|,
name|QPrinter
operator|::
name|Unit
name|unit
parameter_list|,
name|int
name|resolution
parameter_list|)
block|{
name|QPageSize
name|pageSize
init|=
name|QPageSize
argument_list|(
name|QPageSize
operator|::
name|PageSizeId
argument_list|(
name|paperSize
argument_list|)
argument_list|)
decl_stmt|;
name|QSizeF
name|sizef
decl_stmt|;
if|if
condition|(
name|unit
operator|==
name|QPrinter
operator|::
name|DevicePixel
condition|)
name|sizef
operator|=
name|pageSize
operator|.
name|size
argument_list|(
name|QPageSize
operator|::
name|Point
argument_list|)
operator|*
name|qt_multiplierForUnit
argument_list|(
name|unit
argument_list|,
name|resolution
argument_list|)
expr_stmt|;
else|else
name|sizef
operator|=
name|pageSize
operator|.
name|size
argument_list|(
name|QPageSize
operator|::
name|Unit
argument_list|(
name|unit
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|orientation
operator|==
name|QPrinter
operator|::
name|Landscape
condition|?
name|sizef
operator|.
name|transposed
argument_list|()
else|:
name|sizef
return|;
block|}
end_function
begin_function
DECL|function|findValidPrinter
name|QPrinterInfo
name|QPrinterPrivate
operator|::
name|findValidPrinter
parameter_list|(
specifier|const
name|QPrinterInfo
modifier|&
name|printer
parameter_list|)
block|{
comment|// Try find a valid printer to use, either the one given, the default or the first available
name|QPrinterInfo
name|printerToUse
init|=
name|printer
decl_stmt|;
if|if
condition|(
name|printerToUse
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|printerToUse
operator|=
name|QPrinterInfo
operator|::
name|defaultPrinter
argument_list|()
expr_stmt|;
if|if
condition|(
name|printerToUse
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|QStringList
name|availablePrinterNames
init|=
name|QPrinterInfo
operator|::
name|availablePrinterNames
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|availablePrinterNames
operator|.
name|isEmpty
argument_list|()
condition|)
name|printerToUse
operator|=
name|QPrinterInfo
operator|::
name|printerInfo
argument_list|(
name|availablePrinterNames
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|printerToUse
return|;
block|}
end_function
begin_function
DECL|function|initEngines
name|void
name|QPrinterPrivate
operator|::
name|initEngines
parameter_list|(
name|QPrinter
operator|::
name|OutputFormat
name|format
parameter_list|,
specifier|const
name|QPrinterInfo
modifier|&
name|printer
parameter_list|)
block|{
comment|// Default to PdfFormat
name|outputFormat
operator|=
name|QPrinter
operator|::
name|PdfFormat
expr_stmt|;
name|QPlatformPrinterSupport
modifier|*
name|ps
init|=
literal|0
decl_stmt|;
name|QString
name|printerName
decl_stmt|;
comment|// Only set NativeFormat if we have a valid plugin and printer to use
if|if
condition|(
name|format
operator|==
name|QPrinter
operator|::
name|NativeFormat
condition|)
block|{
name|ps
operator|=
name|QPlatformPrinterSupportPlugin
operator|::
name|get
argument_list|()
expr_stmt|;
name|QPrinterInfo
name|printerToUse
init|=
name|findValidPrinter
argument_list|(
name|printer
argument_list|)
decl_stmt|;
if|if
condition|(
name|ps
operator|&&
operator|!
name|printerToUse
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|outputFormat
operator|=
name|QPrinter
operator|::
name|NativeFormat
expr_stmt|;
name|printerName
operator|=
name|printerToUse
operator|.
name|printerName
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|outputFormat
operator|==
name|QPrinter
operator|::
name|NativeFormat
condition|)
block|{
name|printEngine
operator|=
name|ps
operator|->
name|createNativePrintEngine
argument_list|(
name|printerMode
argument_list|)
expr_stmt|;
name|paintEngine
operator|=
name|ps
operator|->
name|createPaintEngine
argument_list|(
name|printEngine
argument_list|,
name|printerMode
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QPdfPrintEngine
modifier|*
name|pdfEngine
init|=
operator|new
name|QPdfPrintEngine
argument_list|(
name|printerMode
argument_list|)
decl_stmt|;
name|paintEngine
operator|=
name|pdfEngine
expr_stmt|;
name|printEngine
operator|=
name|pdfEngine
expr_stmt|;
block|}
name|use_default_engine
operator|=
literal|true
expr_stmt|;
name|had_default_engines
operator|=
literal|true
expr_stmt|;
name|setProperty
argument_list|(
name|QPrintEngine
operator|::
name|PPK_PrinterName
argument_list|,
name|printerName
argument_list|)
expr_stmt|;
name|validPrinter
operator|=
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|changeEngines
name|void
name|QPrinterPrivate
operator|::
name|changeEngines
parameter_list|(
name|QPrinter
operator|::
name|OutputFormat
name|format
parameter_list|,
specifier|const
name|QPrinterInfo
modifier|&
name|printer
parameter_list|)
block|{
name|QPrintEngine
modifier|*
name|oldPrintEngine
init|=
name|printEngine
decl_stmt|;
specifier|const
name|bool
name|def_engine
init|=
name|use_default_engine
decl_stmt|;
name|initEngines
argument_list|(
name|format
argument_list|,
name|printer
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldPrintEngine
condition|)
block|{
foreach|foreach
control|(
name|QPrintEngine
operator|::
name|PrintEnginePropertyKey
name|key
decl|,
name|m_properties
operator|.
name|values
argument_list|()
control|)
block|{
name|QVariant
name|prop
decl_stmt|;
comment|// PPK_NumberOfCopies need special treatmeant since it in most cases
comment|// will return 1, disregarding the actual value that was set
comment|// PPK_PrinterName also needs special treatment as initEngines has set it already
if|if
condition|(
name|key
operator|==
name|QPrintEngine
operator|::
name|PPK_NumberOfCopies
condition|)
name|prop
operator|=
name|QVariant
argument_list|(
name|q_ptr
operator|->
name|copyCount
argument_list|()
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|key
operator|!=
name|QPrintEngine
operator|::
name|PPK_PrinterName
condition|)
name|prop
operator|=
name|oldPrintEngine
operator|->
name|property
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|prop
operator|.
name|isValid
argument_list|()
condition|)
name|setProperty
argument_list|(
name|key
argument_list|,
name|prop
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|def_engine
condition|)
operator|delete
name|oldPrintEngine
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_PRINTPREVIEWWIDGET
end_ifndef
begin_function
DECL|function|previewPages
name|QList
argument_list|<
specifier|const
name|QPicture
modifier|*
argument_list|>
name|QPrinterPrivate
operator|::
name|previewPages
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|previewEngine
condition|)
return|return
name|previewEngine
operator|->
name|pages
argument_list|()
return|;
return|return
name|QList
argument_list|<
specifier|const
name|QPicture
operator|*
argument_list|>
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setPreviewMode
name|void
name|QPrinterPrivate
operator|::
name|setPreviewMode
parameter_list|(
name|bool
name|enable
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QPrinter
argument_list|)
expr_stmt|;
if|if
condition|(
name|enable
condition|)
block|{
if|if
condition|(
operator|!
name|previewEngine
condition|)
name|previewEngine
operator|=
operator|new
name|QPreviewPaintEngine
expr_stmt|;
name|had_default_engines
operator|=
name|use_default_engine
expr_stmt|;
name|use_default_engine
operator|=
literal|false
expr_stmt|;
name|realPrintEngine
operator|=
name|printEngine
expr_stmt|;
name|realPaintEngine
operator|=
name|paintEngine
expr_stmt|;
name|q
operator|->
name|setEngines
argument_list|(
name|previewEngine
argument_list|,
name|previewEngine
argument_list|)
expr_stmt|;
name|previewEngine
operator|->
name|setProxyEngines
argument_list|(
name|realPrintEngine
argument_list|,
name|realPaintEngine
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|q
operator|->
name|setEngines
argument_list|(
name|realPrintEngine
argument_list|,
name|realPaintEngine
argument_list|)
expr_stmt|;
name|use_default_engine
operator|=
name|had_default_engines
expr_stmt|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_PRINTPREVIEWWIDGET
end_comment
begin_function
DECL|function|setProperty
name|void
name|QPrinterPrivate
operator|::
name|setProperty
parameter_list|(
name|QPrintEngine
operator|::
name|PrintEnginePropertyKey
name|key
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|value
parameter_list|)
block|{
name|printEngine
operator|->
name|setProperty
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|m_properties
operator|.
name|insert
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|QPrinterPagedPaintDevicePrivate
class|class
name|QPrinterPagedPaintDevicePrivate
super|:
specifier|public
name|QPagedPaintDevicePrivate
block|{
public|public:
DECL|function|QPrinterPagedPaintDevicePrivate
name|QPrinterPagedPaintDevicePrivate
parameter_list|(
name|QPrinterPrivate
modifier|*
name|d
parameter_list|)
member_init_list|:
name|QPagedPaintDevicePrivate
argument_list|()
member_init_list|,
name|pd
argument_list|(
name|d
argument_list|)
block|{}
DECL|function|~QPrinterPagedPaintDevicePrivate
specifier|virtual
name|~
name|QPrinterPagedPaintDevicePrivate
parameter_list|()
block|{}
name|bool
name|setPageLayout
parameter_list|(
specifier|const
name|QPageLayout
modifier|&
name|newPageLayout
parameter_list|)
name|Q_DECL_OVERRIDE
block|{
if|if
condition|(
name|pd
operator|->
name|paintEngine
operator|->
name|type
argument_list|()
operator|!=
name|QPaintEngine
operator|::
name|Pdf
operator|&&
name|pd
operator|->
name|printEngine
operator|->
name|printerState
argument_list|()
operator|==
name|QPrinter
operator|::
name|Active
condition|)
block|{
name|qWarning
argument_list|(
literal|"QPrinter::setPageLayout: Cannot be changed while printer is active"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// Try to set the print engine page layout
name|pd
operator|->
name|setProperty
argument_list|(
name|QPrintEngine
operator|::
name|PPK_QPageLayout
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|newPageLayout
argument_list|)
argument_list|)
expr_stmt|;
comment|// Set QPagedPaintDevice layout to match the current print engine value
name|m_pageLayout
operator|=
name|pageLayout
argument_list|()
expr_stmt|;
return|return
name|pageLayout
argument_list|()
operator|.
name|isEquivalentTo
argument_list|(
name|newPageLayout
argument_list|)
return|;
block|}
name|bool
name|setPageSize
parameter_list|(
specifier|const
name|QPageSize
modifier|&
name|pageSize
parameter_list|)
name|Q_DECL_OVERRIDE
block|{
if|if
condition|(
name|pd
operator|->
name|paintEngine
operator|->
name|type
argument_list|()
operator|!=
name|QPaintEngine
operator|::
name|Pdf
operator|&&
name|pd
operator|->
name|printEngine
operator|->
name|printerState
argument_list|()
operator|==
name|QPrinter
operator|::
name|Active
condition|)
block|{
name|qWarning
argument_list|(
literal|"QPrinter::setPageLayout: Cannot be changed while printer is active"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// Try to set the print engine page size
name|pd
operator|->
name|setProperty
argument_list|(
name|QPrintEngine
operator|::
name|PPK_QPageSize
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|pageSize
argument_list|)
argument_list|)
expr_stmt|;
comment|// Set QPagedPaintDevice layout to match the current print engine value
name|m_pageLayout
operator|=
name|pageLayout
argument_list|()
expr_stmt|;
return|return
name|pageLayout
argument_list|()
operator|.
name|pageSize
argument_list|()
operator|.
name|isEquivalentTo
argument_list|(
name|pageSize
argument_list|)
return|;
block|}
name|bool
name|setPageOrientation
parameter_list|(
name|QPageLayout
operator|::
name|Orientation
name|orientation
parameter_list|)
name|Q_DECL_OVERRIDE
block|{
comment|// Set the print engine value
name|pd
operator|->
name|setProperty
argument_list|(
name|QPrintEngine
operator|::
name|PPK_Orientation
argument_list|,
name|orientation
argument_list|)
expr_stmt|;
comment|// Set QPagedPaintDevice layout to match the current print engine value
name|m_pageLayout
operator|=
name|pageLayout
argument_list|()
expr_stmt|;
return|return
name|pageLayout
argument_list|()
operator|.
name|orientation
argument_list|()
operator|==
name|orientation
return|;
block|}
name|bool
name|setPageMargins
parameter_list|(
specifier|const
name|QMarginsF
modifier|&
name|margins
parameter_list|)
name|Q_DECL_OVERRIDE
block|{
return|return
name|setPageMargins
argument_list|(
name|margins
argument_list|,
name|pageLayout
argument_list|()
operator|.
name|units
argument_list|()
argument_list|)
return|;
block|}
name|bool
name|setPageMargins
parameter_list|(
specifier|const
name|QMarginsF
modifier|&
name|margins
parameter_list|,
name|QPageLayout
operator|::
name|Unit
name|units
parameter_list|)
name|Q_DECL_OVERRIDE
block|{
comment|// Try to set print engine margins
name|QPair
argument_list|<
name|QMarginsF
argument_list|,
name|QPageLayout
operator|::
name|Unit
argument_list|>
name|pair
init|=
name|qMakePair
argument_list|(
name|margins
argument_list|,
name|units
argument_list|)
decl_stmt|;
name|pd
operator|->
name|setProperty
argument_list|(
name|QPrintEngine
operator|::
name|PPK_QPageMargins
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|pair
argument_list|)
argument_list|)
expr_stmt|;
comment|// Set QPagedPaintDevice layout to match the current print engine value
name|m_pageLayout
operator|=
name|pageLayout
argument_list|()
expr_stmt|;
return|return
name|pageLayout
argument_list|()
operator|.
name|margins
argument_list|()
operator|==
name|margins
operator|&&
name|pageLayout
argument_list|()
operator|.
name|units
argument_list|()
operator|==
name|units
return|;
block|}
name|QPageLayout
name|pageLayout
parameter_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|pd
operator|->
name|printEngine
operator|->
name|property
argument_list|(
name|QPrintEngine
operator|::
name|PPK_QPageLayout
argument_list|)
operator|.
name|value
argument_list|<
name|QPageLayout
argument_list|>
argument_list|()
return|;
block|}
DECL|member|pd
name|QPrinterPrivate
modifier|*
name|pd
decl_stmt|;
block|}
class|;
end_class
begin_comment
comment|/*!   \class QPrinter   \reentrant    \brief The QPrinter class is a paint device that paints on a printer.    \ingroup printing   \inmodule QtPrintSupport     This device represents a series of pages of printed output, and is   used in almost exactly the same way as other paint devices such as   QWidget and QPixmap.   A set of additional functions are provided to manage device-specific   features, such as orientation and resolution, and to step through   the pages in a document as it is generated.    When printing directly to a printer on Windows or Mac OS X, QPrinter uses   the built-in printer drivers. On X11, QPrinter uses the   \l{Common Unix Printing System (CUPS)}   to send PDF output to the printer. As an alternative,   the printProgram() function can be used to specify the command or utility   to use instead of the system default.    Note that setting parameters like paper size and resolution on an   invalid printer is undefined. You can use QPrinter::isValid() to   verify this before changing any parameters.    QPrinter supports a number of parameters, most of which can be   changed by the end user through a \l{QPrintDialog}{print dialog}. In   general, QPrinter passes these functions onto the underlying QPrintEngine.    The most important parameters are:   \list   \li setOrientation() tells QPrinter which page orientation to use.   \li setPaperSize() tells QPrinter what paper size to expect from the   printer.   \li setResolution() tells QPrinter what resolution you wish the   printer to provide, in dots per inch (DPI).   \li setFullPage() tells QPrinter whether you want to deal with the   full page or just with the part the printer can draw on.   \li setCopyCount() tells QPrinter how many copies of the document   it should print.   \endlist    Many of these functions can only be called before the actual printing   begins (i.e., before QPainter::begin() is called). This usually makes   sense because, for example, it's not possible to change the number of   copies when you are halfway through printing. There are also some   settings that the user sets (through the printer dialog) and that   applications are expected to obey. See QAbstractPrintDialog's   documentation for more details.    When QPainter::begin() is called, the QPrinter it operates on is prepared for   a new page, enabling the QPainter to be used immediately to paint the first   page in a document. Once the first page has been painted, newPage() can be   called to request a new blank page to paint on, or QPainter::end() can be   called to finish printing. The second page and all following pages are   prepared using a call to newPage() before they are painted.    The first page in a document does not need to be preceded by a call to   newPage(). You only need to calling newPage() after QPainter::begin() if you   need to insert a blank page at the beginning of a printed document.   Similarly, calling newPage() after the last page in a document is painted will   result in a trailing blank page appended to the end of the printed document.    If you want to abort the print job, abort() will try its best to   stop printing. It may cancel the entire job or just part of it.    Since QPrinter can print to any QPrintEngine subclass, it is possible to   extend printing support to cover new types of printing subsystem by   subclassing QPrintEngine and reimplementing its interface.    \sa QPrintDialog, {Qt Print Support} */
end_comment
begin_comment
comment|/*!     \enum QPrinter::PrinterState      \value Idle     \value Active     \value Aborted     \value Error */
end_comment
begin_comment
comment|/*!     \enum QPrinter::PrinterMode      This enum describes the mode the printer should work in. It     basically presets a certain resolution and working mode.      \value ScreenResolution Sets the resolution of the print device to     the screen resolution. This has the big advantage that the results     obtained when painting on the printer will match more or less     exactly the visible output on the screen. It is the easiest to     use, as font metrics on the screen and on the printer are the     same. This is the default value. ScreenResolution will produce a     lower quality output than HighResolution and should only be used     for drafts.      \value PrinterResolution This value is deprecated. It is     equivalent to ScreenResolution on Unix and HighResolution on     Windows and Mac. Due to the difference between ScreenResolution     and HighResolution, use of this value may lead to non-portable     printer code.      \value HighResolution On Windows, sets the printer resolution to that     defined for the printer in use. For PDF printing, sets the     resolution of the PDF driver to 1200 dpi.      \note When rendering text on a QPrinter device, it is important     to realize that the size of text, when specified in points, is     independent of the resolution specified for the device itself.     Therefore, it may be useful to specify the font size in pixels     when combining text with graphics to ensure that their relative     sizes are what you expect. */
end_comment
begin_comment
comment|/*!   \enum QPrinter::Orientation    This enum type (not to be confused with \c Orientation) is used   to specify each page's orientation.    \value Portrait the page's height is greater than its width.    \value Landscape the page's width is greater than its height.    This type interacts with \l QPrinter::PaperSize and   QPrinter::setFullPage() to determine the final size of the page   available to the application. */
end_comment
begin_comment
comment|/*!     \enum QPrinter::PrintRange      Used to specify the print range selection option.      \value AllPages All pages should be printed.     \value Selection Only the selection should be printed.     \value PageRange The specified page range should be printed.     \value CurrentPage Only the current page should be printed.      \sa setPrintRange(), printRange(), QAbstractPrintDialog::PrintRange */
end_comment
begin_comment
comment|/*!     \enum QPrinter::PaperSize     \since 4.4      This enum type specifies what paper size QPrinter should use.     QPrinter does not check that the paper size is available; it just     uses this information, together with QPrinter::Orientation and     QPrinter::setFullPage(), to determine the printable area.      The defined sizes (with setFullPage(true)) are:      \value A0 841 x 1189 mm     \value A1 594 x 841 mm     \value A2 420 x 594 mm     \value A3 297 x 420 mm     \value A4 210 x 297 mm, 8.26 x 11.69 inches     \value A5 148 x 210 mm     \value A6 105 x 148 mm     \value A7 74 x 105 mm     \value A8 52 x 74 mm     \value A9 37 x 52 mm     \value B0 1000 x 1414 mm     \value B1 707 x 1000 mm     \value B2 500 x 707 mm     \value B3 353 x 500 mm     \value B4 250 x 353 mm     \value B5 176 x 250 mm, 6.93 x 9.84 inches     \value B6 125 x 176 mm     \value B7 88 x 125 mm     \value B8 62 x 88 mm     \value B9 33 x 62 mm     \value B10 31 x 44 mm     \value C5E 163 x 229 mm     \value Comm10E 105 x 241 mm, U.S. Common 10 Envelope     \value DLE 110 x 220 mm     \value Executive 7.5 x 10 inches, 190.5 x 254 mm     \value Folio 210 x 330 mm     \value Ledger 431.8 x 279.4 mm     \value Legal 8.5 x 14 inches, 215.9 x 355.6 mm     \value Letter 8.5 x 11 inches, 215.9 x 279.4 mm     \value Tabloid 279.4 x 431.8 mm     \value Custom Unknown, or a user defined size.     \value A10     \value A3Extra     \value A4Extra     \value A4Plus     \value A4Small     \value A5Extra     \value B5Extra     \value JisB0     \value JisB1     \value JisB2     \value JisB3     \value JisB4     \value JisB5     \value JisB6,     \value JisB7     \value JisB8     \value JisB9     \value JisB10     \value AnsiA = Letter     \value AnsiB = Ledger     \value AnsiC     \value AnsiD     \value AnsiE     \value LegalExtra     \value LetterExtra     \value LetterPlus     \value LetterSmall     \value TabloidExtra     \value ArchA     \value ArchB     \value ArchC     \value ArchD     \value ArchE     \value Imperial7x9     \value Imperial8x10     \value Imperial9x11     \value Imperial9x12     \value Imperial10x11     \value Imperial10x13     \value Imperial10x14     \value Imperial12x11     \value Imperial15x11     \value ExecutiveStandard     \value Note     \value Quarto     \value Statement     \value SuperA     \value SuperB     \value Postcard     \value DoublePostcard     \value Prc16K     \value Prc32K     \value Prc32KBig     \value FanFoldUS     \value FanFoldGerman     \value FanFoldGermanLegal     \value EnvelopeB4     \value EnvelopeB5     \value EnvelopeB6     \value EnvelopeC0     \value EnvelopeC1     \value EnvelopeC2     \value EnvelopeC3     \value EnvelopeC4     \value EnvelopeC5 = C5E     \value EnvelopeC6     \value EnvelopeC65     \value EnvelopeC7     \value EnvelopeDL = DLE     \value Envelope9     \value Envelope10 = Comm10E     \value Envelope11     \value Envelope12     \value Envelope14     \value EnvelopeMonarch     \value EnvelopePersonal     \value EnvelopeChou3     \value EnvelopeChou4     \value EnvelopeInvite     \value EnvelopeItalian     \value EnvelopeKaku2     \value EnvelopeKaku3     \value EnvelopePrc1     \value EnvelopePrc2     \value EnvelopePrc3     \value EnvelopePrc4     \value EnvelopePrc5     \value EnvelopePrc6     \value EnvelopePrc7     \value EnvelopePrc8     \value EnvelopePrc9     \value EnvelopePrc10     \value EnvelopeYou4     \value LastPageSize = EnvelopeYou4     \omitvalue NPageSize     \omitvalue NPaperSize      With setFullPage(false) (the default), the metrics will be a bit     smaller; how much depends on the printer in use.      Due to historic reasons QPageSize::Executive is not the same as the standard     Postscript and Windows Executive size, use QPageSize::ExecutiveStandard instead.      The Postscript standard size QPageSize::Folio is different to the Windows     DMPAPER_FOLIO size, use the Postscript standard size QPageSize::FanFoldGermanLegal     if needed. */
end_comment
begin_comment
comment|/*!   \enum QPrinter::PageOrder    This enum type is used by QPrinter to tell the application program   how to print.    \value FirstPageFirst  the lowest-numbered page should be printed   first.    \value LastPageFirst  the highest-numbered page should be printed   first. */
end_comment
begin_comment
comment|/*!   \enum QPrinter::ColorMode    This enum type is used to indicate whether QPrinter should print   in color or not.    \value Color  print in color if available, otherwise in grayscale.    \value GrayScale  print in grayscale, even on color printers. */
end_comment
begin_comment
comment|/*!   \enum QPrinter::PaperSource    This enum type specifies what paper source QPrinter is to use.   QPrinter does not check that the paper source is available; it   just uses this information to try and set the paper source.   Whether it will set the paper source depends on whether the   printer has that particular source.    \warning This is currently only implemented for Windows.    \value Auto   \value Cassette   \value Envelope   \value EnvelopeManual   \value FormSource   \value LargeCapacity   \value LargeFormat   \value Lower   \value MaxPageSource Deprecated, use LastPaperSource instead   \value Middle   \value Manual   \value OnlyOne   \value Tractor   \value SmallFormat   \value Upper   \value CustomSource A PaperSource defined by the printer that is unknown to Qt   \value LastPaperSource The highest valid PaperSource value, currently CustomSource */
end_comment
begin_comment
comment|/*!   \enum QPrinter::Unit   \since 4.4    This enum type is used to specify the measurement unit for page and   paper sizes.    \value Millimeter   \value Point   \value Inch   \value Pica   \value Didot   \value Cicero   \value DevicePixel    Note the difference between Point and DevicePixel. The Point unit is   defined to be 1/72th of an inch, while the DevicePixel unit is   resolution dependant and is based on the actual pixels, or dots, on   the printer. */
end_comment
begin_comment
comment|/*!     Creates a new printer object with the given \a mode. */
end_comment
begin_constructor
DECL|function|QPrinter
name|QPrinter
operator|::
name|QPrinter
parameter_list|(
name|PrinterMode
name|mode
parameter_list|)
member_init_list|:
name|QPagedPaintDevice
argument_list|()
member_init_list|,
name|d_ptr
argument_list|(
operator|new
name|QPrinterPrivate
argument_list|(
name|this
argument_list|)
argument_list|)
block|{
operator|delete
name|d
expr_stmt|;
name|d
operator|=
operator|new
name|QPrinterPagedPaintDevicePrivate
argument_list|(
name|d_func
argument_list|()
argument_list|)
expr_stmt|;
name|d_ptr
operator|->
name|init
argument_list|(
name|QPrinterInfo
argument_list|()
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     \since 4.4      Creates a new printer object with the given \a printer and \a mode. */
end_comment
begin_constructor
DECL|function|QPrinter
name|QPrinter
operator|::
name|QPrinter
parameter_list|(
specifier|const
name|QPrinterInfo
modifier|&
name|printer
parameter_list|,
name|PrinterMode
name|mode
parameter_list|)
member_init_list|:
name|QPagedPaintDevice
argument_list|()
member_init_list|,
name|d_ptr
argument_list|(
operator|new
name|QPrinterPrivate
argument_list|(
name|this
argument_list|)
argument_list|)
block|{
operator|delete
name|d
expr_stmt|;
name|d
operator|=
operator|new
name|QPrinterPagedPaintDevicePrivate
argument_list|(
name|d_func
argument_list|()
argument_list|)
expr_stmt|;
name|d_ptr
operator|->
name|init
argument_list|(
name|printer
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|init
name|void
name|QPrinterPrivate
operator|::
name|init
parameter_list|(
specifier|const
name|QPrinterInfo
modifier|&
name|printer
parameter_list|,
name|QPrinter
operator|::
name|PrinterMode
name|mode
parameter_list|)
block|{
if|if
condition|(
operator|!
name|QCoreApplication
operator|::
name|instance
argument_list|()
condition|)
block|{
name|qFatal
argument_list|(
literal|"QPrinter: Must construct a QCoreApplication before a QPrinter"
argument_list|)
expr_stmt|;
return|return;
block|}
name|printerMode
operator|=
name|mode
expr_stmt|;
name|initEngines
argument_list|(
name|QPrinter
operator|::
name|NativeFormat
argument_list|,
name|printer
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     This function is used by subclasses of QPrinter to specify custom     print and paint engines (\a printEngine and \a paintEngine,     respectively).      QPrinter does not take ownership of the engines, so you need to     manage these engine instances yourself.      Note that changing the engines will reset the printer state and     all its properties.      \sa printEngine(), paintEngine(), setOutputFormat()      \since 4.1 */
end_comment
begin_function
DECL|function|setEngines
name|void
name|QPrinter
operator|::
name|setEngines
parameter_list|(
name|QPrintEngine
modifier|*
name|printEngine
parameter_list|,
name|QPaintEngine
modifier|*
name|paintEngine
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPrinter
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|use_default_engine
condition|)
operator|delete
name|d
operator|->
name|printEngine
expr_stmt|;
name|d
operator|->
name|printEngine
operator|=
name|printEngine
expr_stmt|;
name|d
operator|->
name|paintEngine
operator|=
name|paintEngine
expr_stmt|;
name|d
operator|->
name|use_default_engine
operator|=
literal|false
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Destroys the printer object and frees any allocated resources. If     the printer is destroyed while a print job is in progress this may     or may not affect the print job. */
end_comment
begin_destructor
DECL|function|~QPrinter
name|QPrinter
operator|::
name|~
name|QPrinter
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QPrinter
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|use_default_engine
condition|)
operator|delete
name|d
operator|->
name|printEngine
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_PRINTPREVIEWWIDGET
operator|delete
name|d
operator|->
name|previewEngine
expr_stmt|;
endif|#
directive|endif
block|}
end_destructor
begin_comment
comment|/*!     \enum QPrinter::OutputFormat      The OutputFormat enum is used to describe the format QPrinter should     use for printing.      \value NativeFormat QPrinter will print output using a method defined     by the platform it is running on. This mode is the default when printing     directly to a printer.      \value PdfFormat QPrinter will generate its output as a searchable PDF file.     This mode is the default when printing to a file.      \sa outputFormat(), setOutputFormat(), setOutputFileName() */
end_comment
begin_comment
comment|/*!     \since 4.1      Sets the output format for this printer to \a format.      If \a format is the same value as currently set then no change will be made.      If \a format is NativeFormat then the printerName will be set to the default     printer.  If there are no valid printers configured then no change will be made.     If you want to set NativeFormat with a specific printerName then use     setPrinterName().      \sa setPrinterName() */
end_comment
begin_function
DECL|function|setOutputFormat
name|void
name|QPrinter
operator|::
name|setOutputFormat
parameter_list|(
name|OutputFormat
name|format
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPrinter
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|outputFormat
operator|==
name|format
condition|)
return|return;
if|if
condition|(
name|format
operator|==
name|QPrinter
operator|::
name|NativeFormat
condition|)
block|{
name|QPrinterInfo
name|printerToUse
init|=
name|d
operator|->
name|findValidPrinter
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|printerToUse
operator|.
name|isNull
argument_list|()
condition|)
name|d
operator|->
name|changeEngines
argument_list|(
name|format
argument_list|,
name|printerToUse
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|changeEngines
argument_list|(
name|format
argument_list|,
name|QPrinterInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \since 4.1      Returns the output format for this printer. */
end_comment
begin_function
DECL|function|outputFormat
name|QPrinter
operator|::
name|OutputFormat
name|QPrinter
operator|::
name|outputFormat
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPrinter
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|outputFormat
return|;
block|}
end_function
begin_comment
comment|/*! \internal */
end_comment
begin_function
DECL|function|devType
name|int
name|QPrinter
operator|::
name|devType
parameter_list|()
specifier|const
block|{
return|return
name|QInternal
operator|::
name|Printer
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the printer name. This value is initially set to the name     of the default printer.      \sa setPrinterName() */
end_comment
begin_function
DECL|function|printerName
name|QString
name|QPrinter
operator|::
name|printerName
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPrinter
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|printEngine
operator|->
name|property
argument_list|(
name|QPrintEngine
operator|::
name|PPK_PrinterName
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the printer name to \a name.      If the \a name is empty then the output format will be set to PdfFormat.      If the \a name is not a valid printer then no change will be made.      If the \a name is a valid printer then the output format will be set to NativeFormat.      \sa printerName(), isValid(), setOutputFormat() */
end_comment
begin_function
DECL|function|setPrinterName
name|void
name|QPrinter
operator|::
name|setPrinterName
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPrinter
argument_list|)
expr_stmt|;
name|ABORT_IF_ACTIVE
argument_list|(
literal|"QPrinter::setPrinterName"
argument_list|)
expr_stmt|;
if|if
condition|(
name|printerName
argument_list|()
operator|==
name|name
condition|)
return|return;
if|if
condition|(
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|PdfFormat
argument_list|)
expr_stmt|;
return|return;
block|}
name|QPrinterInfo
name|printerToUse
init|=
name|QPrinterInfo
operator|::
name|printerInfo
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|printerToUse
operator|.
name|isNull
argument_list|()
condition|)
return|return;
if|if
condition|(
name|outputFormat
argument_list|()
operator|==
name|QPrinter
operator|::
name|PdfFormat
condition|)
block|{
name|d
operator|->
name|changeEngines
argument_list|(
name|QPrinter
operator|::
name|NativeFormat
argument_list|,
name|printerToUse
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|setProperty
argument_list|(
name|QPrintEngine
operator|::
name|PPK_PrinterName
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!   \since 4.4    Returns \c true if the printer currently selected is a valid printer   in the system, or a pure PDF printer; otherwise returns \c false.    To detect other failures check the output of QPainter::begin() or QPrinter::newPage().    \snippet printing-qprinter/errors.cpp 0    \sa setPrinterName() */
end_comment
begin_function
DECL|function|isValid
name|bool
name|QPrinter
operator|::
name|isValid
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPrinter
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|qApp
condition|)
return|return
literal|false
return|;
return|return
name|d
operator|->
name|validPrinter
return|;
block|}
end_function
begin_comment
comment|/*!   \fn QString QPrinter::outputFileName() const    Returns the name of the output file. By default, this is an empty string   (indicating that the printer shouldn't print to file).    \sa QPrintEngine::PrintEnginePropertyKey  */
end_comment
begin_function
DECL|function|outputFileName
name|QString
name|QPrinter
operator|::
name|outputFileName
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPrinter
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|printEngine
operator|->
name|property
argument_list|(
name|QPrintEngine
operator|::
name|PPK_OutputFileName
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the name of the output file to \a fileName.      Setting a null or empty name (0 or "") disables printing to a file.     Setting a non-empty name enables printing to a file.      This can change the value of outputFormat().     If the file name has the ".pdf" suffix PDF is generated. If the file name     has a suffix other than ".pdf", the output format used is the     one set with setOutputFormat().      QPrinter uses Qt's cross-platform PDF print engines     respectively. If you can produce this format natively, for example     Mac OS X can generate PDF's from its print engine, set the output format     back to NativeFormat.      \sa outputFileName(), setOutputFormat() */
end_comment
begin_function
DECL|function|setOutputFileName
name|void
name|QPrinter
operator|::
name|setOutputFileName
parameter_list|(
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPrinter
argument_list|)
expr_stmt|;
name|ABORT_IF_ACTIVE
argument_list|(
literal|"QPrinter::setOutputFileName"
argument_list|)
expr_stmt|;
name|QFileInfo
name|fi
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fi
operator|.
name|suffix
argument_list|()
operator|.
name|compare
argument_list|(
name|QLatin1String
argument_list|(
literal|"pdf"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
condition|)
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|PdfFormat
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|fileName
operator|.
name|isEmpty
argument_list|()
condition|)
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|NativeFormat
argument_list|)
expr_stmt|;
name|d
operator|->
name|setProperty
argument_list|(
name|QPrintEngine
operator|::
name|PPK_OutputFileName
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Returns the name of the program that sends the print output to the   printer.    The default is to return an empty string; meaning that QPrinter will try to   be smart in a system-dependent way. On X11 only, you can set it to something   different to use a specific print program. On the other platforms, this   returns an empty string.    \sa setPrintProgram(), setPrinterSelectionOption() */
end_comment
begin_function
DECL|function|printProgram
name|QString
name|QPrinter
operator|::
name|printProgram
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPrinter
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|printEngine
operator|->
name|property
argument_list|(
name|QPrintEngine
operator|::
name|PPK_PrinterProgram
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!   Sets the name of the program that should do the print job to \a   printProg.    On X11, this function sets the program to call with the PDF   output. On other platforms, it has no effect.    \sa printProgram() */
end_comment
begin_function
DECL|function|setPrintProgram
name|void
name|QPrinter
operator|::
name|setPrintProgram
parameter_list|(
specifier|const
name|QString
modifier|&
name|printProg
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPrinter
argument_list|)
expr_stmt|;
name|ABORT_IF_ACTIVE
argument_list|(
literal|"QPrinter::setPrintProgram"
argument_list|)
expr_stmt|;
name|d
operator|->
name|setProperty
argument_list|(
name|QPrintEngine
operator|::
name|PPK_PrinterProgram
argument_list|,
name|printProg
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Returns the document name.    \sa setDocName(), QPrintEngine::PrintEnginePropertyKey */
end_comment
begin_function
DECL|function|docName
name|QString
name|QPrinter
operator|::
name|docName
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPrinter
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|printEngine
operator|->
name|property
argument_list|(
name|QPrintEngine
operator|::
name|PPK_DocumentName
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!   Sets the document name to \a name.    On X11, the document name is for example used as the default   output filename in QPrintDialog. Note that the document name does   not affect the file name if the printer is printing to a file.   Use the setOutputFile() function for this.    \sa docName(), QPrintEngine::PrintEnginePropertyKey */
end_comment
begin_function
DECL|function|setDocName
name|void
name|QPrinter
operator|::
name|setDocName
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPrinter
argument_list|)
expr_stmt|;
name|ABORT_IF_ACTIVE
argument_list|(
literal|"QPrinter::setDocName"
argument_list|)
expr_stmt|;
name|d
operator|->
name|setProperty
argument_list|(
name|QPrintEngine
operator|::
name|PPK_DocumentName
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Returns the name of the application that created the document.    \sa setCreator() */
end_comment
begin_function
DECL|function|creator
name|QString
name|QPrinter
operator|::
name|creator
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPrinter
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|printEngine
operator|->
name|property
argument_list|(
name|QPrintEngine
operator|::
name|PPK_Creator
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!   Sets the name of the application that created the document to \a   creator.    This function is only applicable to the X11 version of Qt. If no   creator name is specified, the creator will be set to "Qt"   followed by some version number.    \sa creator() */
end_comment
begin_function
DECL|function|setCreator
name|void
name|QPrinter
operator|::
name|setCreator
parameter_list|(
specifier|const
name|QString
modifier|&
name|creator
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPrinter
argument_list|)
expr_stmt|;
name|ABORT_IF_ACTIVE
argument_list|(
literal|"QPrinter::setCreator"
argument_list|)
expr_stmt|;
name|d
operator|->
name|setProperty
argument_list|(
name|QPrintEngine
operator|::
name|PPK_Creator
argument_list|,
name|creator
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Defined in QPagedPaintDevice but non-virtual, add QPrinter specific doc here
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|Q_QDOC
end_ifdef
begin_comment
comment|/*!     \fn bool QPrinter::setPageLayout(const QPageLayout&newLayout)     \since 5.3      Sets the page layout to \a newLayout.      If the \a newLayout is not valid for the current printer then the page     layout will not be changed.  For example, if the page size is not supported     by the printer, or if the margins fall outside the printable area.      Returns true if the page layout was successfully set to \a newLayout.      \sa pageLayout(), setPageSize(), setPageOrientation(), setPageMargins() */
end_comment
begin_comment
comment|/*!     \fn bool QPrinter::setPageSize(const QPageSize&pageSize)     \since 5.3      Sets the page size to \a pageSize.      If the \a pageSize is not valid for the current printer then the page     size will not be changed.      Changing the page size may affect the current page margins if they fall     outside the printable margins for the new page size on the current printer.      To obtain the current QPageSize use pageLayout().pageSize().      Returns true if the page size was successfully set to \a pageSize.      \sa pageLayout(), setPageLayout() */
end_comment
begin_comment
comment|/*!     \fn bool QPrinter::setPageOrientation(QPageLayout::Orientation orientation)     \since 5.3      Sets the page \a orientation to QPageLayout::Portrait or QPageLayout::Landscape.      The printer driver reads this setting and prints the page using the     specified orientation.      On Windows and Mac, this option can be changed while printing and will     take effect from the next call to newPage().      To obtain the current QPageLayout::Orientation use pageLayout().pageOrientation().      Returns true if the page orientation was successfully set to \a orientation.      \sa pageLayout(), setPageLayout() */
end_comment
begin_comment
comment|/*!     \fn bool QPrinter::setPageMargins(const QMarginsF&margins, QPageLayout::Unit units)     \since 5.3      Set the page margins to \a margins in the given \a units.  If \a units are     not provided then the current units are used.      If in Full Page mode then no check is performed on the \a margins set,     otherwise the \a margins must fall within the printable area for the page     size on the current printer.      To obtain the current page margins use pageLayout().pageMargins().      Returns true if the page margins was successfully set to \a margins.      \sa pageLayout(), setPageLayout() */
end_comment
begin_comment
comment|/*!     \fn QPageLayout QPrinter::pageLayout() const     \since 5.3      Returns the current page layout.  Use this method to access the current     QPageSize, QPageLayout::Orientation, QMarginsF, fullPageRect() and paintRect().      Note that you cannot use the setters on the returned object, you must either     call the QPrinter methods or setPageLayout().      \sa setPageLayout(), setPageSize(), setPageOrientation(), setPageMargins() */
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*!   \obsolete Use pageLayout().pageOrientation() instead.    Returns the orientation setting. This is driver-dependent, but is usually   QPrinter::Portrait.    \sa pageLayout() */
end_comment
begin_function
DECL|function|orientation
name|QPrinter
operator|::
name|Orientation
name|QPrinter
operator|::
name|orientation
parameter_list|()
specifier|const
block|{
return|return
name|QPrinter
operator|::
name|Orientation
argument_list|(
name|pageLayout
argument_list|()
operator|.
name|orientation
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   \obsolete Use setPageOrientation() instead.    Sets the print orientation to \a orientation.    The orientation can be either QPrinter::Portrait or   QPrinter::Landscape.    The printer driver reads this setting and prints using the   specified orientation.    On Windows and Mac, this option can be changed while printing and will   take effect from the next call to newPage().    \sa setPageOrientation() */
end_comment
begin_function
DECL|function|setOrientation
name|void
name|QPrinter
operator|::
name|setOrientation
parameter_list|(
name|Orientation
name|orientation
parameter_list|)
block|{
name|setPageOrientation
argument_list|(
name|QPageLayout
operator|::
name|Orientation
argument_list|(
name|orientation
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.4      \obsolete Use pageLayout().pageSize().id() instead.      Returns the printer paper size. The default value is driver-dependent.      \sa pageLayout() */
end_comment
begin_function
DECL|function|paperSize
name|QPrinter
operator|::
name|PaperSize
name|QPrinter
operator|::
name|paperSize
parameter_list|()
specifier|const
block|{
return|return
name|pageSize
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.4      \obsolete Use setPageSize(QPageSize) instead.      Sets the printer paper size to \a newPaperSize if that size is     supported. The result is undefined if \a newPaperSize is not     supported.      The default paper size is driver-dependent.      This function is useful mostly for setting a default value that     the user can override in the print dialog.      \sa setPageSize() */
end_comment
begin_function
DECL|function|setPaperSize
name|void
name|QPrinter
operator|::
name|setPaperSize
parameter_list|(
name|PaperSize
name|newPaperSize
parameter_list|)
block|{
name|setPageSize
argument_list|(
name|QPageSize
argument_list|(
name|QPageSize
operator|::
name|PageSizeId
argument_list|(
name|newPaperSize
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \obsolete Use pageLayout().pageSize().id() instead.      Returns the printer page size. The default value is driver-dependent.      \sa pageLayout() */
end_comment
begin_function
DECL|function|pageSize
name|QPrinter
operator|::
name|PageSize
name|QPrinter
operator|::
name|pageSize
parameter_list|()
specifier|const
block|{
return|return
name|QPrinter
operator|::
name|PaperSize
argument_list|(
name|pageLayout
argument_list|()
operator|.
name|pageSize
argument_list|()
operator|.
name|id
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \obsolete Use setPageSize(QPageSize) instead.      Sets the printer page size based on \a newPageSize.      \sa setPageSize() */
end_comment
begin_function
DECL|function|setPageSize
name|void
name|QPrinter
operator|::
name|setPageSize
parameter_list|(
name|PageSize
name|newPageSize
parameter_list|)
block|{
name|setPageSize
argument_list|(
name|QPageSize
argument_list|(
name|QPageSize
operator|::
name|PageSizeId
argument_list|(
name|newPageSize
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.4      \obsolete Use setPageSize(QPageSize) instead.      Sets the paper size based on \a paperSize in \a unit.      Note that the paper size is defined in a portrait layout, regardless of     what the current printer orientation is set to.      \sa setPageSize() */
end_comment
begin_function
DECL|function|setPaperSize
name|void
name|QPrinter
operator|::
name|setPaperSize
parameter_list|(
specifier|const
name|QSizeF
modifier|&
name|paperSize
parameter_list|,
name|QPrinter
operator|::
name|Unit
name|unit
parameter_list|)
block|{
name|setPageSize
argument_list|(
name|QPageSize
argument_list|(
name|paperSize
argument_list|,
name|QPageSize
operator|::
name|Unit
argument_list|(
name|unit
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp      \obsolete Use setPageSize(QPageSize) instead.      Use setPageSize(QPageSize) instead.      Note that the page size is defined in a portrait layout, regardless of     what the current printer orientation is set to.      \sa setPageSize() */
end_comment
begin_function
DECL|function|setPageSizeMM
name|void
name|QPrinter
operator|::
name|setPageSizeMM
parameter_list|(
specifier|const
name|QSizeF
modifier|&
name|size
parameter_list|)
block|{
name|setPageSize
argument_list|(
name|QPageSize
argument_list|(
name|size
argument_list|,
name|QPageSize
operator|::
name|Millimeter
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.4      \obsolete Use pageLayout().pageSize().size() or     pageLayout().fullPageSize() instead.      Returns the paper size in \a unit.      Note that the returned size reflects the current paper orientation.      \sa pageLayout() */
end_comment
begin_function
DECL|function|paperSize
name|QSizeF
name|QPrinter
operator|::
name|paperSize
parameter_list|(
name|Unit
name|unit
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|unit
operator|==
name|QPrinter
operator|::
name|DevicePixel
condition|)
return|return
name|pageLayout
argument_list|()
operator|.
name|fullRectPixels
argument_list|(
name|resolution
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
return|;
else|else
return|return
name|pageLayout
argument_list|()
operator|.
name|fullRect
argument_list|(
name|QPageLayout
operator|::
name|Unit
argument_list|(
name|unit
argument_list|)
argument_list|)
operator|.
name|size
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \since 5.1      \obsolete Use setPageSize(QPageSize) instead.      Sets the paper used by the printer to \a paperName.      \sa setPageSize() */
end_comment
begin_function
DECL|function|setPaperName
name|void
name|QPrinter
operator|::
name|setPaperName
parameter_list|(
specifier|const
name|QString
modifier|&
name|paperName
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPrinter
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|paintEngine
operator|->
name|type
argument_list|()
operator|!=
name|QPaintEngine
operator|::
name|Pdf
condition|)
name|ABORT_IF_ACTIVE
argument_list|(
literal|"QPrinter::setPaperName"
argument_list|)
expr_stmt|;
name|d
operator|->
name|setProperty
argument_list|(
name|QPrintEngine
operator|::
name|PPK_PaperName
argument_list|,
name|paperName
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 5.1      \obsolete Use pageLayout().pageSize().name() instead.      Returns the paper name of the paper set on the printer.      The default value for this is driver-dependent.      \sa pageLayout() */
end_comment
begin_function
DECL|function|paperName
name|QString
name|QPrinter
operator|::
name|paperName
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPrinter
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|printEngine
operator|->
name|property
argument_list|(
name|QPrintEngine
operator|::
name|PPK_PaperName
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the page order to \a pageOrder.      The page order can be QPrinter::FirstPageFirst or     QPrinter::LastPageFirst. The application is responsible for     reading the page order and printing accordingly.      This function is mostly useful for setting a default value that     the user can override in the print dialog.      This function is only supported under X11. */
end_comment
begin_function
DECL|function|setPageOrder
name|void
name|QPrinter
operator|::
name|setPageOrder
parameter_list|(
name|PageOrder
name|pageOrder
parameter_list|)
block|{
name|d
operator|->
name|pageOrderAscending
operator|=
operator|(
name|pageOrder
operator|==
name|FirstPageFirst
operator|)
expr_stmt|;
name|Q_D
argument_list|(
name|QPrinter
argument_list|)
expr_stmt|;
name|ABORT_IF_ACTIVE
argument_list|(
literal|"QPrinter::setPageOrder"
argument_list|)
expr_stmt|;
name|d
operator|->
name|setProperty
argument_list|(
name|QPrintEngine
operator|::
name|PPK_PageOrder
argument_list|,
name|pageOrder
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Returns the current page order.    The default page order is \c FirstPageFirst. */
end_comment
begin_function
DECL|function|pageOrder
name|QPrinter
operator|::
name|PageOrder
name|QPrinter
operator|::
name|pageOrder
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPrinter
argument_list|)
expr_stmt|;
return|return
name|QPrinter
operator|::
name|PageOrder
argument_list|(
name|d
operator|->
name|printEngine
operator|->
name|property
argument_list|(
name|QPrintEngine
operator|::
name|PPK_PageOrder
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   Sets the printer's color mode to \a newColorMode, which can be   either \c Color or \c GrayScale.    \sa colorMode() */
end_comment
begin_function
DECL|function|setColorMode
name|void
name|QPrinter
operator|::
name|setColorMode
parameter_list|(
name|ColorMode
name|newColorMode
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPrinter
argument_list|)
expr_stmt|;
name|ABORT_IF_ACTIVE
argument_list|(
literal|"QPrinter::setColorMode"
argument_list|)
expr_stmt|;
name|d
operator|->
name|setProperty
argument_list|(
name|QPrintEngine
operator|::
name|PPK_ColorMode
argument_list|,
name|newColorMode
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Returns the current color mode.    \sa setColorMode() */
end_comment
begin_function
DECL|function|colorMode
name|QPrinter
operator|::
name|ColorMode
name|QPrinter
operator|::
name|colorMode
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPrinter
argument_list|)
expr_stmt|;
return|return
name|QPrinter
operator|::
name|ColorMode
argument_list|(
name|d
operator|->
name|printEngine
operator|->
name|property
argument_list|(
name|QPrintEngine
operator|::
name|PPK_ColorMode
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   \obsolete   Returns the number of copies to be printed. The default value is 1.    On Windows, Mac OS X and X11 systems that support CUPS, this will always   return 1 as these operating systems can internally handle the number   of copies.    On X11, this value will return the number of times the application is   required to print in order to match the number specified in the printer setup   dialog. This has been done since some printer drivers are not capable of   buffering up the copies and in those cases the application must make an   explicit call to the print code for each copy.    Use copyCount() in conjunction with supportsMultipleCopies() instead.    \sa setNumCopies(), actualNumCopies() */
end_comment
begin_function
DECL|function|numCopies
name|int
name|QPrinter
operator|::
name|numCopies
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPrinter
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|printEngine
operator|->
name|property
argument_list|(
name|QPrintEngine
operator|::
name|PPK_NumberOfCopies
argument_list|)
operator|.
name|toInt
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \obsolete     \since 4.6      Returns the number of copies that will be printed. The default     value is 1.      This function always returns the actual value specified in the print     dialog or using setNumCopies().      Use copyCount() instead.      \sa setNumCopies(), numCopies() */
end_comment
begin_function
DECL|function|actualNumCopies
name|int
name|QPrinter
operator|::
name|actualNumCopies
parameter_list|()
specifier|const
block|{
return|return
name|copyCount
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!   \obsolete   Sets the number of copies to be printed to \a numCopies.    The printer driver reads this setting and prints the specified   number of copies.    Use setCopyCount() instead.    \sa numCopies() */
end_comment
begin_function
DECL|function|setNumCopies
name|void
name|QPrinter
operator|::
name|setNumCopies
parameter_list|(
name|int
name|numCopies
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPrinter
argument_list|)
expr_stmt|;
name|ABORT_IF_ACTIVE
argument_list|(
literal|"QPrinter::setNumCopies"
argument_list|)
expr_stmt|;
name|d
operator|->
name|setProperty
argument_list|(
name|QPrintEngine
operator|::
name|PPK_NumberOfCopies
argument_list|,
name|numCopies
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.7      Sets the number of copies to be printed to \a count.      The printer driver reads this setting and prints the specified number of     copies.      \sa copyCount(), supportsMultipleCopies() */
end_comment
begin_function
DECL|function|setCopyCount
name|void
name|QPrinter
operator|::
name|setCopyCount
parameter_list|(
name|int
name|count
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPrinter
argument_list|)
expr_stmt|;
name|ABORT_IF_ACTIVE
argument_list|(
literal|"QPrinter::setCopyCount;"
argument_list|)
expr_stmt|;
name|d
operator|->
name|setProperty
argument_list|(
name|QPrintEngine
operator|::
name|PPK_CopyCount
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.7      Returns the number of copies that will be printed. The default value is 1.      \sa setCopyCount(), supportsMultipleCopies() */
end_comment
begin_function
DECL|function|copyCount
name|int
name|QPrinter
operator|::
name|copyCount
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPrinter
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|printEngine
operator|->
name|property
argument_list|(
name|QPrintEngine
operator|::
name|PPK_CopyCount
argument_list|)
operator|.
name|toInt
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.7      Returns \c true if the printer supports printing multiple copies of the same     document in one job; otherwise false is returned.      On most systems this function will return true. However, on X11 systems     that do not support CUPS, this function will return false. That means the     application has to handle the number of copies by printing the same     document the required number of times.      \sa setCopyCount(), copyCount() */
end_comment
begin_function
DECL|function|supportsMultipleCopies
name|bool
name|QPrinter
operator|::
name|supportsMultipleCopies
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPrinter
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|printEngine
operator|->
name|property
argument_list|(
name|QPrintEngine
operator|::
name|PPK_SupportsMultipleCopies
argument_list|)
operator|.
name|toBool
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.1      Returns \c true if collation is turned on when multiple copies is selected.     Returns \c false if it is turned off when multiple copies is selected.     When collating is turned off the printing of each individual page will be repeated     the numCopies() amount before the next page is started. With collating turned on     all pages are printed before the next copy of those pages is started.      \sa setCollateCopies() */
end_comment
begin_function
DECL|function|collateCopies
name|bool
name|QPrinter
operator|::
name|collateCopies
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPrinter
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|printEngine
operator|->
name|property
argument_list|(
name|QPrintEngine
operator|::
name|PPK_CollateCopies
argument_list|)
operator|.
name|toBool
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.1      Sets the default value for collation checkbox when the print     dialog appears.  If \a collate is true, it will enable     setCollateCopiesEnabled().  The default value is false. This value     will be changed by what the user presses in the print dialog.      \sa collateCopies() */
end_comment
begin_function
DECL|function|setCollateCopies
name|void
name|QPrinter
operator|::
name|setCollateCopies
parameter_list|(
name|bool
name|collate
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPrinter
argument_list|)
expr_stmt|;
name|ABORT_IF_ACTIVE
argument_list|(
literal|"QPrinter::setCollateCopies"
argument_list|)
expr_stmt|;
name|d
operator|->
name|setProperty
argument_list|(
name|QPrintEngine
operator|::
name|PPK_CollateCopies
argument_list|,
name|collate
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   If \a fp is true, enables support for painting over the entire page;   otherwise restricts painting to the printable area reported by the   device.    By default, full page printing is disabled. In this case, the origin   of the QPrinter's coordinate system coincides with the top-left   corner of the printable area.    If full page printing is enabled, the origin of the QPrinter's   coordinate system coincides with the top-left corner of the paper   itself. In this case, the   \l{QPaintDevice::PaintDeviceMetric}{device metrics} will report   the exact same dimensions as indicated by \l{PaperSize}. It may not   be possible to print on the entire physical page because of the   printer's margins, so the application must account for the margins   itself.    \sa fullPage(), pageLayout(), setPageSize(), width(), height() */
end_comment
begin_function
DECL|function|setFullPage
name|void
name|QPrinter
operator|::
name|setFullPage
parameter_list|(
name|bool
name|fp
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPrinter
argument_list|)
expr_stmt|;
comment|// Set the print engine
name|d
operator|->
name|setProperty
argument_list|(
name|QPrintEngine
operator|::
name|PPK_FullPage
argument_list|,
name|fp
argument_list|)
expr_stmt|;
comment|// Set QPagedPaintDevice layout to match the current print engine value
name|devicePageLayout
argument_list|()
operator|=
name|pageLayout
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Returns \c true if the origin of the printer's coordinate system is   at the corner of the page and false if it is at the edge of the   printable area.    See setFullPage() for details and caveats.    \sa setFullPage(), pageLayout() */
end_comment
begin_function
DECL|function|fullPage
name|bool
name|QPrinter
operator|::
name|fullPage
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPrinter
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|printEngine
operator|->
name|property
argument_list|(
name|QPrintEngine
operator|::
name|PPK_FullPage
argument_list|)
operator|.
name|toBool
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!   Requests that the printer prints at \a dpi or as near to \a dpi as   possible.    This setting affects the coordinate system as returned by, for   example QPainter::viewport().    This function must be called before QPainter::begin() to have an effect on   all platforms.    \sa resolution(), setPaperSize() */
end_comment
begin_function
DECL|function|setResolution
name|void
name|QPrinter
operator|::
name|setResolution
parameter_list|(
name|int
name|dpi
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPrinter
argument_list|)
expr_stmt|;
name|ABORT_IF_ACTIVE
argument_list|(
literal|"QPrinter::setResolution"
argument_list|)
expr_stmt|;
name|d
operator|->
name|setProperty
argument_list|(
name|QPrintEngine
operator|::
name|PPK_Resolution
argument_list|,
name|dpi
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Returns the current assumed resolution of the printer, as set by   setResolution() or by the printer driver.    \sa setResolution() */
end_comment
begin_function
DECL|function|resolution
name|int
name|QPrinter
operator|::
name|resolution
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPrinter
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|printEngine
operator|->
name|property
argument_list|(
name|QPrintEngine
operator|::
name|PPK_Resolution
argument_list|)
operator|.
name|toInt
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!   Sets the paper source setting to \a source.    Windows only: This option can be changed while printing and will   take effect from the next call to newPage()    \sa paperSource() */
end_comment
begin_function
DECL|function|setPaperSource
name|void
name|QPrinter
operator|::
name|setPaperSource
parameter_list|(
name|PaperSource
name|source
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPrinter
argument_list|)
expr_stmt|;
name|d
operator|->
name|setProperty
argument_list|(
name|QPrintEngine
operator|::
name|PPK_PaperSource
argument_list|,
name|source
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the printer's paper source. This is \c Manual or a printer     tray or paper cassette. */
end_comment
begin_function
DECL|function|paperSource
name|QPrinter
operator|::
name|PaperSource
name|QPrinter
operator|::
name|paperSource
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPrinter
argument_list|)
expr_stmt|;
return|return
name|QPrinter
operator|::
name|PaperSource
argument_list|(
name|d
operator|->
name|printEngine
operator|->
name|property
argument_list|(
name|QPrintEngine
operator|::
name|PPK_PaperSource
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   \since 4.1    Enabled or disables font embedding depending on \a enable.    Currently this option is only supported on X11.    \sa fontEmbeddingEnabled() */
end_comment
begin_function
DECL|function|setFontEmbeddingEnabled
name|void
name|QPrinter
operator|::
name|setFontEmbeddingEnabled
parameter_list|(
name|bool
name|enable
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPrinter
argument_list|)
expr_stmt|;
name|d
operator|->
name|setProperty
argument_list|(
name|QPrintEngine
operator|::
name|PPK_FontEmbedding
argument_list|,
name|enable
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \since 4.1    Returns \c true if font embedding is enabled.    Currently this option is only supported on X11.    \sa setFontEmbeddingEnabled() */
end_comment
begin_function
DECL|function|fontEmbeddingEnabled
name|bool
name|QPrinter
operator|::
name|fontEmbeddingEnabled
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPrinter
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|printEngine
operator|->
name|property
argument_list|(
name|QPrintEngine
operator|::
name|PPK_FontEmbedding
argument_list|)
operator|.
name|toBool
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \enum QPrinter::DuplexMode     \since 4.4      This enum is used to indicate whether printing will occur on one or both sides     of each sheet of paper (simplex or duplex printing).      \value DuplexNone       Single sided (simplex) printing only.     \value DuplexAuto       The printer's default setting is used to determine whether                             duplex printing is used.     \value DuplexLongSide   Both sides of each sheet of paper are used for printing.                             The paper is turned over its longest edge before the second                             side is printed     \value DuplexShortSide  Both sides of each sheet of paper are used for printing.                             The paper is turned over its shortest edge before the second                             side is printed */
end_comment
begin_comment
comment|/*!   \since 4.2    Enables double sided printing if \a doubleSided is true; otherwise disables it.    Currently this option is only supported on X11. */
end_comment
begin_function
DECL|function|setDoubleSidedPrinting
name|void
name|QPrinter
operator|::
name|setDoubleSidedPrinting
parameter_list|(
name|bool
name|doubleSided
parameter_list|)
block|{
name|setDuplex
argument_list|(
name|doubleSided
condition|?
name|DuplexAuto
else|:
name|DuplexNone
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \since 4.2    Returns \c true if double side printing is enabled.    Currently this option is only supported on X11. */
end_comment
begin_function
DECL|function|doubleSidedPrinting
name|bool
name|QPrinter
operator|::
name|doubleSidedPrinting
parameter_list|()
specifier|const
block|{
return|return
name|duplex
argument_list|()
operator|!=
name|DuplexNone
return|;
block|}
end_function
begin_comment
comment|/*!   \since 4.4    Enables double sided printing based on the \a duplex mode.    Currently this option is only supported on X11. */
end_comment
begin_function
DECL|function|setDuplex
name|void
name|QPrinter
operator|::
name|setDuplex
parameter_list|(
name|DuplexMode
name|duplex
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPrinter
argument_list|)
expr_stmt|;
name|d
operator|->
name|setProperty
argument_list|(
name|QPrintEngine
operator|::
name|PPK_Duplex
argument_list|,
name|duplex
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \since 4.4    Returns the current duplex mode.    Currently this option is only supported on X11. */
end_comment
begin_function
DECL|function|duplex
name|QPrinter
operator|::
name|DuplexMode
name|QPrinter
operator|::
name|duplex
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPrinter
argument_list|)
expr_stmt|;
return|return
cast|static_cast
argument_list|<
name|DuplexMode
argument_list|>
argument_list|(
name|d
operator|->
name|printEngine
operator|->
name|property
argument_list|(
name|QPrintEngine
operator|::
name|PPK_Duplex
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.4      Returns the page's rectangle in \a unit; this is usually smaller     than the paperRect() since the page normally has margins between     its borders and the paper.      \sa paperSize() */
end_comment
begin_function
DECL|function|pageRect
name|QRectF
name|QPrinter
operator|::
name|pageRect
parameter_list|(
name|Unit
name|unit
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|unit
operator|==
name|QPrinter
operator|::
name|DevicePixel
condition|)
return|return
name|pageLayout
argument_list|()
operator|.
name|paintRectPixels
argument_list|(
name|resolution
argument_list|()
argument_list|)
return|;
else|else
return|return
name|pageLayout
argument_list|()
operator|.
name|paintRect
argument_list|(
name|QPageLayout
operator|::
name|Unit
argument_list|(
name|unit
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.4      Returns the paper's rectangle in \a unit; this is usually larger     than the pageRect().     \sa pageRect() */
end_comment
begin_function
DECL|function|paperRect
name|QRectF
name|QPrinter
operator|::
name|paperRect
parameter_list|(
name|Unit
name|unit
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|unit
operator|==
name|QPrinter
operator|::
name|DevicePixel
condition|)
return|return
name|pageLayout
argument_list|()
operator|.
name|fullRectPixels
argument_list|(
name|resolution
argument_list|()
argument_list|)
return|;
else|else
return|return
name|pageLayout
argument_list|()
operator|.
name|fullRect
argument_list|(
name|QPageLayout
operator|::
name|Unit
argument_list|(
name|unit
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \obsolete Use pageLayout().paintRect() instead.      Returns the page's rectangle; this is usually smaller than the     paperRect() since the page normally has margins between its     borders and the paper.      The unit of the returned rectangle is DevicePixel.      \sa pageLayout() */
end_comment
begin_function
DECL|function|pageRect
name|QRect
name|QPrinter
operator|::
name|pageRect
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPrinter
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|printEngine
operator|->
name|property
argument_list|(
name|QPrintEngine
operator|::
name|PPK_PageRect
argument_list|)
operator|.
name|toRect
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \obsolete Use pageLayout().fullPageRect() instead.      Returns the paper's rectangle; this is usually larger than the     pageRect().      The unit of the returned rectangle is DevicePixel.      \sa pageLayout() */
end_comment
begin_function
DECL|function|paperRect
name|QRect
name|QPrinter
operator|::
name|paperRect
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPrinter
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|printEngine
operator|->
name|property
argument_list|(
name|QPrintEngine
operator|::
name|PPK_PaperRect
argument_list|)
operator|.
name|toRect
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.4      \obsolete Use setPageMargins(QMarginsF, QPageLayout::Unit) instead.      This function sets the \a left, \a top, \a right and \a bottom     page margins for this printer. The unit of the margins are     specified with the \a unit parameter.      \sa setPageMargins() */
end_comment
begin_function
DECL|function|setPageMargins
name|void
name|QPrinter
operator|::
name|setPageMargins
parameter_list|(
name|qreal
name|left
parameter_list|,
name|qreal
name|top
parameter_list|,
name|qreal
name|right
parameter_list|,
name|qreal
name|bottom
parameter_list|,
name|QPrinter
operator|::
name|Unit
name|unit
parameter_list|)
block|{
if|if
condition|(
name|unit
operator|==
name|QPrinter
operator|::
name|DevicePixel
condition|)
block|{
name|QMarginsF
name|margins
init|=
name|QMarginsF
argument_list|(
name|left
argument_list|,
name|top
argument_list|,
name|right
argument_list|,
name|bottom
argument_list|)
decl_stmt|;
name|margins
operator|*=
name|qt_pixelMultiplier
argument_list|(
name|resolution
argument_list|()
argument_list|)
expr_stmt|;
name|margins
operator|=
name|qt_convertMargins
argument_list|(
name|margins
argument_list|,
name|QPageLayout
operator|::
name|Point
argument_list|,
name|pageLayout
argument_list|()
operator|.
name|units
argument_list|()
argument_list|)
expr_stmt|;
name|setPageMargins
argument_list|(
name|margins
argument_list|,
name|pageLayout
argument_list|()
operator|.
name|units
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setPageMargins
argument_list|(
name|QMarginsF
argument_list|(
name|left
argument_list|,
name|top
argument_list|,
name|right
argument_list|,
name|bottom
argument_list|)
argument_list|,
name|QPageLayout
operator|::
name|Unit
argument_list|(
name|unit
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \reimp      \obsolete Use setPageMargins(QMarginsF, QPageLayout::Unit) instead.      \sa setPageMargins()   */
end_comment
begin_function
DECL|function|setMargins
name|void
name|QPrinter
operator|::
name|setMargins
parameter_list|(
specifier|const
name|Margins
modifier|&
name|m
parameter_list|)
block|{
name|setPageMargins
argument_list|(
name|QMarginsF
argument_list|(
name|m
operator|.
name|left
argument_list|,
name|m
operator|.
name|top
argument_list|,
name|m
operator|.
name|right
argument_list|,
name|m
operator|.
name|bottom
argument_list|)
argument_list|,
name|QPageLayout
operator|::
name|Millimeter
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.4      \obsolete Use pageLayout().pageMargins() instead.      Returns the page margins for this printer in \a left, \a top, \a     right, \a bottom. The unit of the returned margins are specified     with the \a unit parameter.      \sa pageLayout(), setPageMargins() */
end_comment
begin_function
DECL|function|getPageMargins
name|void
name|QPrinter
operator|::
name|getPageMargins
parameter_list|(
name|qreal
modifier|*
name|left
parameter_list|,
name|qreal
modifier|*
name|top
parameter_list|,
name|qreal
modifier|*
name|right
parameter_list|,
name|qreal
modifier|*
name|bottom
parameter_list|,
name|QPrinter
operator|::
name|Unit
name|unit
parameter_list|)
specifier|const
block|{
name|QMarginsF
name|margins
decl_stmt|;
if|if
condition|(
name|unit
operator|==
name|QPrinter
operator|::
name|DevicePixel
condition|)
block|{
name|QMargins
name|tmp
init|=
name|pageLayout
argument_list|()
operator|.
name|marginsPixels
argument_list|(
name|resolution
argument_list|()
argument_list|)
decl_stmt|;
name|margins
operator|=
name|QMarginsF
argument_list|(
name|tmp
operator|.
name|left
argument_list|()
argument_list|,
name|tmp
operator|.
name|top
argument_list|()
argument_list|,
name|tmp
operator|.
name|right
argument_list|()
argument_list|,
name|tmp
operator|.
name|bottom
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|margins
operator|=
name|pageLayout
argument_list|()
operator|.
name|margins
argument_list|(
name|QPageLayout
operator|::
name|Unit
argument_list|(
name|unit
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|left
condition|)
operator|*
name|left
operator|=
name|margins
operator|.
name|left
argument_list|()
expr_stmt|;
if|if
condition|(
name|right
condition|)
operator|*
name|right
operator|=
name|margins
operator|.
name|right
argument_list|()
expr_stmt|;
if|if
condition|(
name|top
condition|)
operator|*
name|top
operator|=
name|margins
operator|.
name|top
argument_list|()
expr_stmt|;
if|if
condition|(
name|bottom
condition|)
operator|*
name|bottom
operator|=
name|margins
operator|.
name|bottom
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal      Returns the metric for the given \a id. */
end_comment
begin_function
DECL|function|metric
name|int
name|QPrinter
operator|::
name|metric
parameter_list|(
name|PaintDeviceMetric
name|id
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPrinter
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|printEngine
operator|->
name|metric
argument_list|(
name|id
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the paint engine used by the printer. */
end_comment
begin_function
DECL|function|paintEngine
name|QPaintEngine
modifier|*
name|QPrinter
operator|::
name|paintEngine
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPrinter
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|paintEngine
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.1      Returns the print engine used by the printer. */
end_comment
begin_function
DECL|function|printEngine
name|QPrintEngine
modifier|*
name|QPrinter
operator|::
name|printEngine
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPrinter
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|printEngine
return|;
block|}
end_function
begin_comment
comment|/*!     \obsolete Use QPageSize::id(windowsId) and setPageLayout(QPageSize) instead.      Sets the page size to be used by the printer under Windows to \a     pageSize.      \sa pageLayout() */
end_comment
begin_function
DECL|function|setWinPageSize
name|void
name|QPrinter
operator|::
name|setWinPageSize
parameter_list|(
name|int
name|pageSize
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPrinter
argument_list|)
expr_stmt|;
name|ABORT_IF_ACTIVE
argument_list|(
literal|"QPrinter::setWinPageSize"
argument_list|)
expr_stmt|;
name|d
operator|->
name|setProperty
argument_list|(
name|QPrintEngine
operator|::
name|PPK_WindowsPageSize
argument_list|,
name|pageSize
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \obsolete Use pageLayout.pageSize().windowsId() instead.      Returns the page size used by the printer under Windows.      \sa pageLayout() */
end_comment
begin_function
DECL|function|winPageSize
name|int
name|QPrinter
operator|::
name|winPageSize
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPrinter
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|printEngine
operator|->
name|property
argument_list|(
name|QPrintEngine
operator|::
name|PPK_WindowsPageSize
argument_list|)
operator|.
name|toInt
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns a list of the resolutions (a list of dots-per-inch     integers) that the printer says it supports.      For X11 where all printing is directly to PDF, this     function will always return a one item list containing only the     PDF resolution, i.e., 72 (72 dpi -- but see PrinterMode). */
end_comment
begin_function
DECL|function|supportedResolutions
name|QList
argument_list|<
name|int
argument_list|>
name|QPrinter
operator|::
name|supportedResolutions
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPrinter
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QVariant
argument_list|>
name|varlist
init|=
name|d
operator|->
name|printEngine
operator|->
name|property
argument_list|(
name|QPrintEngine
operator|::
name|PPK_SupportedResolutions
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|intlist
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|varlist
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|intlist
operator|<<
name|varlist
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
return|return
name|intlist
return|;
block|}
end_function
begin_comment
comment|/*!     Tells the printer to eject the current page and to continue     printing on a new page. Returns \c true if this was successful;     otherwise returns \c false.      Calling newPage() on an inactive QPrinter object will always     fail. */
end_comment
begin_function
DECL|function|newPage
name|bool
name|QPrinter
operator|::
name|newPage
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QPrinter
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|printEngine
operator|->
name|printerState
argument_list|()
operator|!=
name|QPrinter
operator|::
name|Active
condition|)
return|return
literal|false
return|;
return|return
name|d
operator|->
name|printEngine
operator|->
name|newPage
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Aborts the current print run. Returns \c true if the print run was     successfully aborted and printerState() will return QPrinter::Aborted; otherwise     returns \c false.      It is not always possible to abort a print job. For example,     all the data has gone to the printer but the printer cannot or     will not cancel the job when asked to. */
end_comment
begin_function
DECL|function|abort
name|bool
name|QPrinter
operator|::
name|abort
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QPrinter
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|printEngine
operator|->
name|abort
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the current state of the printer. This may not always be     accurate (for example if the printer doesn't have the capability     of reporting its state to the operating system). */
end_comment
begin_function
DECL|function|printerState
name|QPrinter
operator|::
name|PrinterState
name|QPrinter
operator|::
name|printerState
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPrinter
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|printEngine
operator|->
name|printerState
argument_list|()
return|;
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_WIN
end_ifdef
begin_comment
comment|/*!     Returns the supported paper sizes for this printer.      The values will be either a value that matches an entry in the     QPrinter::PaperSource enum or a driver spesific value. The driver     spesific values are greater than the constant DMBIN_USER declared     in wingdi.h.      \warning This function is only available in windows. */
end_comment
begin_function
DECL|function|supportedPaperSources
name|QList
argument_list|<
name|QPrinter
operator|::
name|PaperSource
argument_list|>
name|QPrinter
operator|::
name|supportedPaperSources
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPrinter
argument_list|)
expr_stmt|;
name|QVariant
name|v
init|=
name|d
operator|->
name|printEngine
operator|->
name|property
argument_list|(
name|QPrintEngine
operator|::
name|PPK_PaperSources
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|QVariant
argument_list|>
name|variant_list
init|=
name|v
operator|.
name|toList
argument_list|()
decl_stmt|;
name|QList
argument_list|<
name|QPrinter
operator|::
name|PaperSource
argument_list|>
name|int_list
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|variant_list
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|int_list
operator|<<
operator|(
name|QPrinter
operator|::
name|PaperSource
operator|)
name|variant_list
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
return|return
name|int_list
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Q_OS_WIN
end_comment
begin_comment
comment|/*!     \fn QString QPrinter::printerSelectionOption() const      Returns the printer options selection string. This is useful only     if the print command has been explicitly set.      The default value (an empty string) implies that the printer should     be selected in a system-dependent manner.      Any other value implies that the given value should be used.      This function always returns an empty string on Windows and Mac.      \sa setPrinterSelectionOption(), setPrintProgram() */
end_comment
begin_function
DECL|function|printerSelectionOption
name|QString
name|QPrinter
operator|::
name|printerSelectionOption
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPrinter
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|printEngine
operator|->
name|property
argument_list|(
name|QPrintEngine
operator|::
name|PPK_SelectionOption
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \fn void QPrinter::setPrinterSelectionOption(const QString&option)      Sets the printer to use \a option to select the printer. \a option     is null by default (which implies that Qt should be smart enough     to guess correctly), but it can be set to other values to use a     specific printer selection option.      If the printer selection option is changed while the printer is     active, the current print job may or may not be affected.      This function has no effect on Windows or Mac.      \sa printerSelectionOption(), setPrintProgram() */
end_comment
begin_function
DECL|function|setPrinterSelectionOption
name|void
name|QPrinter
operator|::
name|setPrinterSelectionOption
parameter_list|(
specifier|const
name|QString
modifier|&
name|option
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPrinter
argument_list|)
expr_stmt|;
name|d
operator|->
name|setProperty
argument_list|(
name|QPrintEngine
operator|::
name|PPK_SelectionOption
argument_list|,
name|option
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.1     \fn int QPrinter::fromPage() const      Returns the number of the first page in a range of pages to be printed     (the "from page" setting). Pages in a document are numbered according to     the convention that the first page is page 1.      By default, this function returns a special value of 0, meaning that     the "from page" setting is unset.      \note If fromPage() and toPage() both return 0, this indicates that     \e{the whole document will be printed}.      \sa setFromTo(), toPage() */
end_comment
begin_function
DECL|function|fromPage
name|int
name|QPrinter
operator|::
name|fromPage
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|fromPage
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.1      Returns the number of the last page in a range of pages to be printed     (the "to page" setting). Pages in a document are numbered according to     the convention that the first page is page 1.      By default, this function returns a special value of 0, meaning that     the "to page" setting is unset.      \note If fromPage() and toPage() both return 0, this indicates that     \e{the whole document will be printed}.      The programmer is responsible for reading this setting and     printing accordingly.      \sa setFromTo(), fromPage() */
end_comment
begin_function
DECL|function|toPage
name|int
name|QPrinter
operator|::
name|toPage
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|toPage
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.1      Sets the range of pages to be printed to cover the pages with numbers     specified by \a from and \a to, where \a from corresponds to the first     page in the range and \a to corresponds to the last.      \note Pages in a document are numbered according to the convention that     the first page is page 1. However, if \a from and \a to are both set to 0,     the \e{whole document will be printed}.      This function is mostly used to set a default value that the user can     override in the print dialog when you call setup().      \sa fromPage(), toPage() */
end_comment
begin_function
DECL|function|setFromTo
name|void
name|QPrinter
operator|::
name|setFromTo
parameter_list|(
name|int
name|from
parameter_list|,
name|int
name|to
parameter_list|)
block|{
if|if
condition|(
name|from
operator|>
name|to
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"QPrinter::setFromTo: 'from' must be less than or equal to 'to'"
expr_stmt|;
name|from
operator|=
name|to
expr_stmt|;
block|}
name|d
operator|->
name|fromPage
operator|=
name|from
expr_stmt|;
name|d
operator|->
name|toPage
operator|=
name|to
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.1      Sets the print range option in to be \a range. */
end_comment
begin_function
DECL|function|setPrintRange
name|void
name|QPrinter
operator|::
name|setPrintRange
parameter_list|(
name|PrintRange
name|range
parameter_list|)
block|{
name|d
operator|->
name|printSelectionOnly
operator|=
operator|(
name|range
operator|==
name|Selection
operator|)
expr_stmt|;
name|Q_D
argument_list|(
name|QPrinter
argument_list|)
expr_stmt|;
name|d
operator|->
name|printRange
operator|=
name|range
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.1      Returns the page range of the QPrinter. After the print setup     dialog has been opened, this function returns the value selected     by the user.      \sa setPrintRange() */
end_comment
begin_function
DECL|function|printRange
name|QPrinter
operator|::
name|PrintRange
name|QPrinter
operator|::
name|printRange
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPrinter
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|printRange
return|;
block|}
end_function
begin_comment
comment|/*!     \class QPrintEngine     \reentrant      \ingroup printing     \inmodule QtPrintSupport      \brief The QPrintEngine class defines an interface for how QPrinter     interacts with a given printing subsystem.      The common case when creating your own print engine is to derive from both     QPaintEngine and QPrintEngine. Various properties of a print engine are     given with property() and set with setProperty().      \sa QPaintEngine */
end_comment
begin_comment
comment|/*!     \enum QPrintEngine::PrintEnginePropertyKey      This enum is used to communicate properties between the print     engine and QPrinter. A property may or may not be supported by a     given print engine.      \value PPK_CollateCopies A boolean value indicating whether the     printout should be collated or not.      \value PPK_ColorMode Refers to QPrinter::ColorMode, either color or     monochrome.      \value PPK_Creator A string describing the document's creator.      \value PPK_Duplex A boolean value indicating whether both sides of     the printer paper should be used for the printout.      \value PPK_DocumentName A string describing the document name in     the spooler.      \value PPK_FontEmbedding A boolean value indicating whether data for     the document's fonts should be embedded in the data sent to the     printer.      \value PPK_FullPage A boolean describing if the printer should be     full page or not.      \value PPK_NumberOfCopies Obsolete. An integer specifying the number of     copies. Use PPK_CopyCount instead.      \value PPK_Orientation Specifies a QPrinter::Orientation value.      \value PPK_OutputFileName The output file name as a string. An     empty file name indicates that the printer should not print to a file.      \value PPK_PageOrder Specifies a QPrinter::PageOrder value.      \value PPK_PageRect A QRect specifying the page rectangle      \value PPK_PageSize Obsolete. Use PPK_PaperSize instead.      \value PPK_PaperRect A QRect specifying the paper rectangle.      \value PPK_PaperSource Specifies a QPrinter::PaperSource value.      \value PPK_PaperSources Specifies more than one QPrinter::PaperSource value.      \value PPK_PaperName A string specifying the name of the paper.      \value PPK_PaperSize Specifies a QPrinter::PaperSize value.      \value PPK_PrinterName A string specifying the name of the printer.      \value PPK_PrinterProgram A string specifying the name of the     printer program used for printing,      \value PPK_Resolution An integer describing the dots per inch for     this printer.      \value PPK_SelectionOption      \value PPK_SupportedResolutions A list of integer QVariants     describing the set of supported resolutions that the printer has.      \value PPK_WindowsPageSize An integer specifying a DM_PAPER entry     on Windows.      \value PPK_CustomPaperSize A QSizeF specifying a custom paper size     in the QPrinter::Point unit.      \value PPK_PageMargins A QList<QVariant> containing the left, top,     right and bottom margin values in the QPrinter::Point unit.      \value PPK_CopyCount An integer specifying the number of copies to print.      \value PPK_SupportsMultipleCopies A boolean value indicating whether or not     the printer supports printing multiple copies in one job.      \value PPK_QPageSize Set the page size using a QPageSize object.      \value PPK_QPageMargins Set the page margins using a QPair of QMarginsF and QPageLayout::Unit.      \value PPK_QPageLayout Set the page layout using a QPageLayout object.      \value PPK_CustomBase Basis for extension. */
end_comment
begin_comment
comment|/*!     \fn QPrintEngine::~QPrintEngine()      Destroys the print engine. */
end_comment
begin_comment
comment|/*!     \fn void QPrintEngine::setProperty(PrintEnginePropertyKey key, const QVariant&value)      Sets the print engine's property specified by \a key to the given \a value.      \sa property() */
end_comment
begin_comment
comment|/*!     \fn void QPrintEngine::property(PrintEnginePropertyKey key) const      Returns the print engine's property specified by \a key.      \sa setProperty() */
end_comment
begin_comment
comment|/*!     \fn bool QPrintEngine::newPage()      Instructs the print engine to start a new page. Returns \c true if     the printer was able to create the new page; otherwise returns \c false. */
end_comment
begin_comment
comment|/*!     \fn bool QPrintEngine::abort()      Instructs the print engine to abort the printing process. Returns     true if successful; otherwise returns \c false. */
end_comment
begin_comment
comment|/*!     \fn int QPrintEngine::metric(QPaintDevice::PaintDeviceMetric id) const      Returns the metric for the given \a id. */
end_comment
begin_comment
comment|/*!     \fn QPrinter::PrinterState QPrintEngine::printerState() const      Returns the current state of the printer being used by the print engine. */
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_PRINTER
end_comment
end_unit
