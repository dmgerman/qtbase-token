begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 John Layt<jlayt@kde.org> ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtPrintSupport module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QPLATFORMPRINTDEVICE_H
end_ifndef
begin_define
DECL|macro|QPLATFORMPRINTDEVICE_H
define|#
directive|define
name|QPLATFORMPRINTDEVICE_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists for the convenience
end_comment
begin_comment
comment|// of internal files.  This header file may change from version to version
end_comment
begin_comment
comment|// without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|<private/qprint_p.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qvector.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qmimetype.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qpagelayout.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
ifndef|#
directive|ifndef
name|QT_NO_PRINTER
name|class
name|Q_PRINTSUPPORT_EXPORT
name|QPlatformPrintDevice
block|{
name|Q_DISABLE_COPY
argument_list|(
argument|QPlatformPrintDevice
argument_list|)
name|public
label|:
name|QPlatformPrintDevice
argument_list|()
expr_stmt|;
name|explicit
name|QPlatformPrintDevice
parameter_list|(
specifier|const
name|QString
modifier|&
name|id
parameter_list|)
function_decl|;
name|virtual
operator|~
name|QPlatformPrintDevice
argument_list|()
expr_stmt|;
name|virtual
name|QString
name|id
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|QString
name|name
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|QString
name|location
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|QString
name|makeAndModel
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|bool
name|isValid
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|bool
name|isDefault
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|bool
name|isRemote
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|QPrint
operator|::
name|DeviceState
name|state
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|bool
name|isValidPageLayout
argument_list|(
specifier|const
name|QPageLayout
operator|&
name|layout
argument_list|,
name|int
name|resolution
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|bool
name|supportsMultipleCopies
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|bool
name|supportsCollateCopies
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|QPageSize
name|defaultPageSize
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|QList
operator|<
name|QPageSize
operator|>
name|supportedPageSizes
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|QPageSize
name|supportedPageSize
argument_list|(
specifier|const
name|QPageSize
operator|&
name|pageSize
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|QPageSize
name|supportedPageSize
argument_list|(
name|QPageSize
operator|::
name|PageSizeId
name|pageSizeId
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|QPageSize
name|supportedPageSize
argument_list|(
specifier|const
name|QString
operator|&
name|pageName
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|QPageSize
name|supportedPageSize
argument_list|(
specifier|const
name|QSize
operator|&
name|pointSize
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|QPageSize
name|supportedPageSize
argument_list|(
specifier|const
name|QSizeF
operator|&
name|size
argument_list|,
name|QPageSize
operator|::
name|Unit
name|units
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|bool
name|supportsCustomPageSizes
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|QSize
name|minimumPhysicalPageSize
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|QSize
name|maximumPhysicalPageSize
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|QMarginsF
name|printableMargins
argument_list|(
specifier|const
name|QPageSize
operator|&
name|pageSize
argument_list|,
name|QPageLayout
operator|::
name|Orientation
name|orientation
argument_list|,
name|int
name|resolution
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|int
name|defaultResolution
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|QList
operator|<
name|int
operator|>
name|supportedResolutions
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|QPrint
operator|::
name|InputSlot
name|defaultInputSlot
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|QList
operator|<
name|QPrint
operator|::
name|InputSlot
operator|>
name|supportedInputSlots
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|QPrint
operator|::
name|OutputBin
name|defaultOutputBin
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|QList
operator|<
name|QPrint
operator|::
name|OutputBin
operator|>
name|supportedOutputBins
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|QPrint
operator|::
name|DuplexMode
name|defaultDuplexMode
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|QList
operator|<
name|QPrint
operator|::
name|DuplexMode
operator|>
name|supportedDuplexModes
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|QPrint
operator|::
name|ColorMode
name|defaultColorMode
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|QList
operator|<
name|QPrint
operator|::
name|ColorMode
operator|>
name|supportedColorModes
argument_list|()
specifier|const
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_MIMETYPE
name|virtual
name|QList
operator|<
name|QMimeType
operator|>
name|supportedMimeTypes
argument_list|()
specifier|const
expr_stmt|;
endif|#
directive|endif
specifier|static
name|QPageSize
name|createPageSize
parameter_list|(
specifier|const
name|QString
modifier|&
name|key
parameter_list|,
specifier|const
name|QSize
modifier|&
name|size
parameter_list|,
specifier|const
name|QString
modifier|&
name|localizedName
parameter_list|)
function_decl|;
specifier|static
name|QPageSize
name|createPageSize
parameter_list|(
name|int
name|windowsId
parameter_list|,
specifier|const
name|QSize
modifier|&
name|size
parameter_list|,
specifier|const
name|QString
modifier|&
name|localizedName
parameter_list|)
function_decl|;
name|protected
label|:
name|virtual
name|void
name|loadPageSizes
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|void
name|loadResolutions
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|void
name|loadInputSlots
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|void
name|loadOutputBins
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|void
name|loadDuplexModes
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|void
name|loadColorModes
argument_list|()
specifier|const
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_MIMETYPE
name|virtual
name|void
name|loadMimeTypes
argument_list|()
specifier|const
expr_stmt|;
endif|#
directive|endif
name|QPageSize
name|supportedPageSizeMatch
argument_list|(
specifier|const
name|QPageSize
operator|&
name|pageSize
argument_list|)
decl|const
decl_stmt|;
name|QString
name|m_id
decl_stmt|;
name|QString
name|m_name
decl_stmt|;
name|QString
name|m_location
decl_stmt|;
name|QString
name|m_makeAndModel
decl_stmt|;
name|bool
name|m_isRemote
decl_stmt|;
name|bool
name|m_supportsMultipleCopies
decl_stmt|;
name|bool
name|m_supportsCollateCopies
decl_stmt|;
name|mutable
name|bool
name|m_havePageSizes
decl_stmt|;
name|mutable
name|QVector
operator|<
name|QPageSize
operator|>
name|m_pageSizes
expr_stmt|;
name|bool
name|m_supportsCustomPageSizes
decl_stmt|;
name|QSize
name|m_minimumPhysicalPageSize
decl_stmt|;
name|QSize
name|m_maximumPhysicalPageSize
decl_stmt|;
name|mutable
name|bool
name|m_haveResolutions
decl_stmt|;
name|mutable
name|QVector
operator|<
name|int
operator|>
name|m_resolutions
expr_stmt|;
name|mutable
name|bool
name|m_haveInputSlots
decl_stmt|;
name|mutable
name|QVector
operator|<
name|QPrint
operator|::
name|InputSlot
operator|>
name|m_inputSlots
expr_stmt|;
name|mutable
name|bool
name|m_haveOutputBins
decl_stmt|;
name|mutable
name|QVector
operator|<
name|QPrint
operator|::
name|OutputBin
operator|>
name|m_outputBins
expr_stmt|;
name|mutable
name|bool
name|m_haveDuplexModes
decl_stmt|;
name|mutable
name|QVector
operator|<
name|QPrint
operator|::
name|DuplexMode
operator|>
name|m_duplexModes
expr_stmt|;
name|mutable
name|bool
name|m_haveColorModes
decl_stmt|;
name|mutable
name|QVector
operator|<
name|QPrint
operator|::
name|ColorMode
operator|>
name|m_colorModes
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_MIMETYPE
name|mutable
name|bool
name|m_haveMimeTypes
decl_stmt|;
name|mutable
name|QVector
operator|<
name|QMimeType
operator|>
name|m_mimeTypes
expr_stmt|;
endif|#
directive|endif
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_PRINTER
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QPLATFORMPRINTDEVICE_H
end_comment
end_unit
