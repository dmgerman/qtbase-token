begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qpagesetupdialog.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_PRINTDIALOG
end_ifndef
begin_include
include|#
directive|include
file|"qpagesetupdialog_unix_p.h"
end_include
begin_include
include|#
directive|include
file|<private/qpagesetupdialog_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qprintdevice_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qcups_p.h>
end_include
begin_include
include|#
directive|include
file|"qpainter.h"
end_include
begin_include
include|#
directive|include
file|"qprintdialog.h"
end_include
begin_include
include|#
directive|include
file|"qdialogbuttonbox.h"
end_include
begin_include
include|#
directive|include
file|<ui_qpagesetupwidget.h>
end_include
begin_include
include|#
directive|include
file|<QtPrintSupport/qprinter.h>
end_include
begin_include
include|#
directive|include
file|<qpa/qplatformprintplugin.h>
end_include
begin_include
include|#
directive|include
file|<qpa/qplatformprintersupport.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
comment|// Disabled until we have support for papersources on unix
comment|// #define PSD_ENABLE_PAPERSOURCE
ifdef|#
directive|ifdef
name|PSD_ENABLE_PAPERSOURCE
DECL|variable|paperSourceNames
specifier|static
specifier|const
name|char
modifier|*
name|paperSourceNames
index|[]
init|=
block|{
literal|"Only One"
block|,
literal|"Lower"
block|,
literal|"Middle"
block|,
literal|"Manual"
block|,
literal|"Envelope"
block|,
literal|"Envelope manual"
block|,
literal|"Auto"
block|,
literal|"Tractor"
block|,
literal|"Small format"
block|,
literal|"Large format"
block|,
literal|"Large capacity"
block|,
literal|"Cassette"
block|,
literal|"Form source"
block|,
literal|0
block|}
decl_stmt|;
end_decl_stmt
begin_struct
DECL|struct|PaperSourceNames
struct|struct
name|PaperSourceNames
block|{
DECL|function|PaperSourceNames
name|PaperSourceNames
parameter_list|(
specifier|const
name|char
modifier|*
name|nam
parameter_list|,
name|QPrinter
operator|::
name|PaperSource
name|ps
parameter_list|)
member_init_list|:
name|paperSource
argument_list|(
name|ps
argument_list|)
member_init_list|,
name|name
argument_list|(
name|nam
argument_list|)
block|{}
DECL|member|paperSource
name|QPrinter
operator|::
name|PaperSource
name|paperSource
decl_stmt|;
DECL|member|name
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
block|}
struct|;
end_struct
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QPagePreview
end_comment
begin_comment
comment|// - Private widget to display preview of page layout
end_comment
begin_comment
comment|// - Embedded in QPageSetupWidget
end_comment
begin_class
DECL|class|QPagePreview
class|class
name|QPagePreview
super|:
specifier|public
name|QWidget
block|{
public|public:
DECL|function|QPagePreview
name|QPagePreview
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
name|parent
argument_list|)
block|{
name|setSizePolicy
argument_list|(
name|QSizePolicy
operator|::
name|Expanding
argument_list|,
name|QSizePolicy
operator|::
name|Expanding
argument_list|)
expr_stmt|;
name|setMinimumSize
argument_list|(
literal|50
argument_list|,
literal|50
argument_list|)
expr_stmt|;
block|}
DECL|function|setPageLayout
name|void
name|setPageLayout
parameter_list|(
specifier|const
name|QPageLayout
modifier|&
name|layout
parameter_list|)
block|{
name|m_pageLayout
operator|=
name|layout
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
block|}
DECL|function|setPagePreviewLayout
name|void
name|setPagePreviewLayout
parameter_list|(
name|int
name|columns
parameter_list|,
name|int
name|rows
parameter_list|)
block|{
name|m_pagePreviewColumns
operator|=
name|columns
expr_stmt|;
name|m_pagePreviewRows
operator|=
name|rows
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
block|}
protected|protected:
DECL|function|paintEvent
name|void
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
parameter_list|)
block|{
name|QSize
name|pageSize
init|=
name|m_pageLayout
operator|.
name|fullRectPoints
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|QSizeF
name|scaledSize
init|=
name|pageSize
operator|.
name|scaled
argument_list|(
name|width
argument_list|()
operator|-
literal|10
argument_list|,
name|height
argument_list|()
operator|-
literal|10
argument_list|,
name|Qt
operator|::
name|KeepAspectRatio
argument_list|)
decl_stmt|;
name|QRect
name|pageRect
init|=
name|QRect
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|scaledSize
operator|.
name|toSize
argument_list|()
argument_list|)
decl_stmt|;
name|pageRect
operator|.
name|moveCenter
argument_list|(
name|rect
argument_list|()
operator|.
name|center
argument_list|()
argument_list|)
expr_stmt|;
name|qreal
name|width_factor
init|=
name|scaledSize
operator|.
name|width
argument_list|()
operator|/
name|pageSize
operator|.
name|width
argument_list|()
decl_stmt|;
name|qreal
name|height_factor
init|=
name|scaledSize
operator|.
name|height
argument_list|()
operator|/
name|pageSize
operator|.
name|height
argument_list|()
decl_stmt|;
name|QMarginsF
name|margins
init|=
name|m_pageLayout
operator|.
name|margins
argument_list|(
name|QPageLayout
operator|::
name|Point
argument_list|)
decl_stmt|;
name|int
name|left
init|=
name|qRound
argument_list|(
name|margins
operator|.
name|left
argument_list|()
operator|*
name|width_factor
argument_list|)
decl_stmt|;
name|int
name|top
init|=
name|qRound
argument_list|(
name|margins
operator|.
name|top
argument_list|()
operator|*
name|height_factor
argument_list|)
decl_stmt|;
name|int
name|right
init|=
name|qRound
argument_list|(
name|margins
operator|.
name|right
argument_list|()
operator|*
name|width_factor
argument_list|)
decl_stmt|;
name|int
name|bottom
init|=
name|qRound
argument_list|(
name|margins
operator|.
name|bottom
argument_list|()
operator|*
name|height_factor
argument_list|)
decl_stmt|;
name|QRect
name|marginRect
argument_list|(
name|pageRect
operator|.
name|x
argument_list|()
operator|+
name|left
argument_list|,
name|pageRect
operator|.
name|y
argument_list|()
operator|+
name|top
argument_list|,
name|pageRect
operator|.
name|width
argument_list|()
operator|-
operator|(
name|left
operator|+
name|right
operator|+
literal|1
operator|)
argument_list|,
name|pageRect
operator|.
name|height
argument_list|()
operator|-
operator|(
name|top
operator|+
name|bottom
operator|+
literal|1
operator|)
argument_list|)
decl_stmt|;
name|QPainter
name|p
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|QColor
name|shadow
argument_list|(
name|palette
argument_list|()
operator|.
name|mid
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|6
condition|;
operator|++
name|i
control|)
block|{
name|shadow
operator|.
name|setAlpha
argument_list|(
literal|180
operator|-
name|i
operator|*
literal|30
argument_list|)
expr_stmt|;
name|QRect
name|offset
argument_list|(
name|pageRect
operator|.
name|adjusted
argument_list|(
name|i
argument_list|,
name|i
argument_list|,
name|i
argument_list|,
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|p
operator|.
name|setPen
argument_list|(
name|shadow
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawLine
argument_list|(
name|offset
operator|.
name|left
argument_list|()
argument_list|,
name|offset
operator|.
name|bottom
argument_list|()
argument_list|,
name|offset
operator|.
name|right
argument_list|()
argument_list|,
name|offset
operator|.
name|bottom
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawLine
argument_list|(
name|offset
operator|.
name|right
argument_list|()
argument_list|,
name|offset
operator|.
name|top
argument_list|()
argument_list|,
name|offset
operator|.
name|right
argument_list|()
argument_list|,
name|offset
operator|.
name|bottom
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|p
operator|.
name|fillRect
argument_list|(
name|pageRect
argument_list|,
name|palette
argument_list|()
operator|.
name|light
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|marginRect
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|p
operator|.
name|setPen
argument_list|(
name|QPen
argument_list|(
name|palette
argument_list|()
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Dark
argument_list|)
argument_list|,
literal|0
argument_list|,
name|Qt
operator|::
name|DotLine
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawRect
argument_list|(
name|marginRect
argument_list|)
expr_stmt|;
name|marginRect
operator|.
name|adjust
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|p
operator|.
name|setClipRect
argument_list|(
name|marginRect
argument_list|)
expr_stmt|;
name|QFont
name|font
decl_stmt|;
name|font
operator|.
name|setPointSizeF
argument_list|(
name|font
operator|.
name|pointSizeF
argument_list|()
operator|*
literal|0.25
argument_list|)
expr_stmt|;
name|p
operator|.
name|setFont
argument_list|(
name|font
argument_list|)
expr_stmt|;
name|p
operator|.
name|setPen
argument_list|(
name|palette
argument_list|()
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Dark
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|text
argument_list|(
name|QLatin1String
argument_list|(
literal|"Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi."
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
operator|++
name|i
control|)
name|text
operator|+=
name|text
expr_stmt|;
specifier|const
name|int
name|spacing
init|=
name|pageRect
operator|.
name|width
argument_list|()
operator|*
literal|0.1
decl_stmt|;
specifier|const
name|int
name|textWidth
init|=
operator|(
name|marginRect
operator|.
name|width
argument_list|()
operator|-
operator|(
name|spacing
operator|*
operator|(
name|m_pagePreviewColumns
operator|-
literal|1
operator|)
operator|)
operator|)
operator|/
name|m_pagePreviewColumns
decl_stmt|;
specifier|const
name|int
name|textHeight
init|=
operator|(
name|marginRect
operator|.
name|height
argument_list|()
operator|-
operator|(
name|spacing
operator|*
operator|(
name|m_pagePreviewRows
operator|-
literal|1
operator|)
operator|)
operator|)
operator|/
name|m_pagePreviewRows
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|m_pagePreviewColumns
condition|;
operator|++
name|x
control|)
block|{
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|m_pagePreviewRows
condition|;
operator|++
name|y
control|)
block|{
name|QRect
name|textRect
argument_list|(
name|marginRect
operator|.
name|left
argument_list|()
operator|+
name|x
operator|*
operator|(
name|textWidth
operator|+
name|spacing
operator|)
argument_list|,
name|marginRect
operator|.
name|top
argument_list|()
operator|+
name|y
operator|*
operator|(
name|textHeight
operator|+
name|spacing
operator|)
argument_list|,
name|textWidth
argument_list|,
name|textHeight
argument_list|)
decl_stmt|;
name|p
operator|.
name|drawText
argument_list|(
name|textRect
argument_list|,
name|Qt
operator|::
name|TextWordWrap
operator||
name|Qt
operator|::
name|AlignVCenter
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
private|private:
comment|// Page Layout
DECL|member|m_pageLayout
name|QPageLayout
name|m_pageLayout
decl_stmt|;
comment|// Pages Per Sheet / n-up layout
DECL|member|m_pagePreviewColumns
DECL|member|m_pagePreviewRows
name|int
name|m_pagePreviewColumns
decl_stmt|,
name|m_pagePreviewRows
decl_stmt|;
block|}
class|;
end_class
begin_comment
comment|// QUnixPageSetupDialogPrivate
end_comment
begin_comment
comment|// - Linux / Cups implementation of QPageSetupDialogPrivate
end_comment
begin_comment
comment|// - Embeds QPageSetupWidget
end_comment
begin_class
DECL|class|QUnixPageSetupDialogPrivate
class|class
name|QUnixPageSetupDialogPrivate
super|:
specifier|public
name|QPageSetupDialogPrivate
block|{
name|Q_DECLARE_PUBLIC
parameter_list|(
name|QPageSetupDialog
parameter_list|)
specifier|public
private|:
name|QUnixPageSetupDialogPrivate
parameter_list|(
name|QPrinter
modifier|*
name|printer
parameter_list|)
constructor_decl|;
name|~
name|QUnixPageSetupDialogPrivate
parameter_list|()
destructor_decl|;
name|void
name|init
parameter_list|()
function_decl|;
DECL|member|widget
name|QPageSetupWidget
modifier|*
name|widget
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|QUnixPageSetupDialogPrivate
name|QUnixPageSetupDialogPrivate
operator|::
name|QUnixPageSetupDialogPrivate
parameter_list|(
name|QPrinter
modifier|*
name|printer
parameter_list|)
member_init_list|:
name|QPageSetupDialogPrivate
argument_list|(
name|printer
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QUnixPageSetupDialogPrivate
name|QUnixPageSetupDialogPrivate
operator|::
name|~
name|QUnixPageSetupDialogPrivate
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|init
name|void
name|QUnixPageSetupDialogPrivate
operator|::
name|init
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QPageSetupDialog
argument_list|)
expr_stmt|;
name|widget
operator|=
operator|new
name|QPageSetupWidget
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|widget
operator|->
name|setPrinter
argument_list|(
name|printer
argument_list|)
expr_stmt|;
name|QDialogButtonBox
modifier|*
name|buttons
init|=
operator|new
name|QDialogButtonBox
argument_list|(
name|QDialogButtonBox
operator|::
name|Ok
operator||
name|QDialogButtonBox
operator|::
name|Cancel
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|,
name|q
argument_list|)
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|buttons
argument_list|,
name|SIGNAL
argument_list|(
name|accepted
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|accept
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|buttons
argument_list|,
name|SIGNAL
argument_list|(
name|rejected
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|reject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVBoxLayout
modifier|*
name|lay
init|=
operator|new
name|QVBoxLayout
argument_list|(
name|q
argument_list|)
decl_stmt|;
name|lay
operator|->
name|addWidget
argument_list|(
name|widget
argument_list|)
expr_stmt|;
name|lay
operator|->
name|addWidget
argument_list|(
name|buttons
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// QPageSetupWidget
end_comment
begin_comment
comment|// - Private widget implementation for Linux / CUPS
end_comment
begin_comment
comment|// - Embeds QPagePreview
end_comment
begin_comment
comment|// - TODO Could be made public as a stand-alone widget?
end_comment
begin_constructor
DECL|function|QPageSetupWidget
name|QPageSetupWidget
operator|::
name|QPageSetupWidget
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|m_pagePreview
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_printer
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_outputFormat
argument_list|(
name|QPrinter
operator|::
name|PdfFormat
argument_list|)
member_init_list|,
name|m_units
argument_list|(
name|QPageLayout
operator|::
name|Point
argument_list|)
member_init_list|,
name|m_blockSignals
argument_list|(
literal|false
argument_list|)
block|{
name|m_ui
operator|.
name|setupUi
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|QVBoxLayout
modifier|*
name|lay
init|=
operator|new
name|QVBoxLayout
argument_list|(
name|m_ui
operator|.
name|preview
argument_list|)
decl_stmt|;
name|m_ui
operator|.
name|preview
operator|->
name|setLayout
argument_list|(
name|lay
argument_list|)
expr_stmt|;
name|m_pagePreview
operator|=
operator|new
name|QPagePreview
argument_list|(
name|m_ui
operator|.
name|preview
argument_list|)
expr_stmt|;
name|m_pagePreview
operator|->
name|setPagePreviewLayout
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|lay
operator|->
name|addWidget
argument_list|(
name|m_pagePreview
argument_list|)
expr_stmt|;
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Polished
argument_list|,
literal|false
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|PSD_ENABLE_PAPERSOURCE
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|paperSourceNames
index|[
name|i
index|]
condition|;
operator|++
name|i
control|)
name|m_ui
operator|.
name|paperSource
operator|->
name|insertItem
argument_list|(
name|paperSourceNames
index|[
name|i
index|]
argument_list|)
expr_stmt|;
else|#
directive|else
name|m_ui
operator|.
name|paperSourceLabel
operator|->
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|m_ui
operator|.
name|paperSource
operator|->
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|m_ui
operator|.
name|reverseLandscape
operator|->
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|m_ui
operator|.
name|reversePortrait
operator|->
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|initUnits
argument_list|()
expr_stmt|;
name|initPagesPerSheet
argument_list|()
expr_stmt|;
name|connect
argument_list|(
name|m_ui
operator|.
name|unitCombo
argument_list|,
name|SIGNAL
argument_list|(
name|activated
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|unitChanged
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|m_ui
operator|.
name|pageSizeCombo
argument_list|,
name|SIGNAL
argument_list|(
name|currentIndexChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|pageSizeChanged
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|m_ui
operator|.
name|pageWidth
argument_list|,
name|SIGNAL
argument_list|(
name|valueChanged
argument_list|(
name|double
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|pageSizeChanged
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|m_ui
operator|.
name|pageHeight
argument_list|,
name|SIGNAL
argument_list|(
name|valueChanged
argument_list|(
name|double
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|pageSizeChanged
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|m_ui
operator|.
name|leftMargin
argument_list|,
name|SIGNAL
argument_list|(
name|valueChanged
argument_list|(
name|double
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|leftMarginChanged
argument_list|(
name|double
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|m_ui
operator|.
name|topMargin
argument_list|,
name|SIGNAL
argument_list|(
name|valueChanged
argument_list|(
name|double
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|topMarginChanged
argument_list|(
name|double
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|m_ui
operator|.
name|rightMargin
argument_list|,
name|SIGNAL
argument_list|(
name|valueChanged
argument_list|(
name|double
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|rightMarginChanged
argument_list|(
name|double
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|m_ui
operator|.
name|bottomMargin
argument_list|,
name|SIGNAL
argument_list|(
name|valueChanged
argument_list|(
name|double
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|bottomMarginChanged
argument_list|(
name|double
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|m_ui
operator|.
name|portrait
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|pageOrientationChanged
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|m_ui
operator|.
name|landscape
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|pageOrientationChanged
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|m_ui
operator|.
name|pagesPerSheetCombo
argument_list|,
name|SIGNAL
argument_list|(
name|currentIndexChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|pagesPerSheetChanged
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|// Init the Units combo box
end_comment
begin_function
DECL|function|initUnits
name|void
name|QPageSetupWidget
operator|::
name|initUnits
parameter_list|()
block|{
name|m_ui
operator|.
name|unitCombo
operator|->
name|addItem
argument_list|(
name|tr
argument_list|(
literal|"Millimeters (mm)"
argument_list|)
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QPageLayout
operator|::
name|Millimeter
argument_list|)
argument_list|)
expr_stmt|;
name|m_ui
operator|.
name|unitCombo
operator|->
name|addItem
argument_list|(
name|tr
argument_list|(
literal|"Inches (in)"
argument_list|)
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QPageLayout
operator|::
name|Inch
argument_list|)
argument_list|)
expr_stmt|;
name|m_ui
operator|.
name|unitCombo
operator|->
name|addItem
argument_list|(
name|tr
argument_list|(
literal|"Points (pt)"
argument_list|)
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QPageLayout
operator|::
name|Point
argument_list|)
argument_list|)
expr_stmt|;
name|m_ui
operator|.
name|unitCombo
operator|->
name|addItem
argument_list|(
name|tr
argument_list|(
literal|"Pica (PÌ¸)"
argument_list|)
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QPageLayout
operator|::
name|Pica
argument_list|)
argument_list|)
expr_stmt|;
name|m_ui
operator|.
name|unitCombo
operator|->
name|addItem
argument_list|(
name|tr
argument_list|(
literal|"Didot (DD)"
argument_list|)
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QPageLayout
operator|::
name|Didot
argument_list|)
argument_list|)
expr_stmt|;
name|m_ui
operator|.
name|unitCombo
operator|->
name|addItem
argument_list|(
name|tr
argument_list|(
literal|"Cicero (CC)"
argument_list|)
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QPageLayout
operator|::
name|Cicero
argument_list|)
argument_list|)
expr_stmt|;
comment|// Initailly default to locale measurement system, mm if metric, in otherwise
name|m_ui
operator|.
name|unitCombo
operator|->
name|setCurrentIndex
argument_list|(
name|QLocale
argument_list|()
operator|.
name|measurementSystem
argument_list|()
operator|!=
name|QLocale
operator|::
name|MetricSystem
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Init the Pages Per Sheet (n-up) combo boxes if using CUPS
end_comment
begin_function
DECL|function|initPagesPerSheet
name|void
name|QPageSetupWidget
operator|::
name|initPagesPerSheet
parameter_list|()
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_CUPS
argument_list|)
name|m_ui
operator|.
name|pagesPerSheetLayoutCombo
operator|->
name|addItem
argument_list|(
name|QPrintDialog
operator|::
name|tr
argument_list|(
literal|"Left to Right, Top to Bottom"
argument_list|)
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QCUPSSupport
operator|::
name|LeftToRightTopToBottom
argument_list|)
argument_list|)
expr_stmt|;
name|m_ui
operator|.
name|pagesPerSheetLayoutCombo
operator|->
name|addItem
argument_list|(
name|QPrintDialog
operator|::
name|tr
argument_list|(
literal|"Left to Right, Bottom to Top"
argument_list|)
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QCUPSSupport
operator|::
name|LeftToRightBottomToTop
argument_list|)
argument_list|)
expr_stmt|;
name|m_ui
operator|.
name|pagesPerSheetLayoutCombo
operator|->
name|addItem
argument_list|(
name|QPrintDialog
operator|::
name|tr
argument_list|(
literal|"Right to Left, Bottom to Top"
argument_list|)
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QCUPSSupport
operator|::
name|RightToLeftBottomToTop
argument_list|)
argument_list|)
expr_stmt|;
name|m_ui
operator|.
name|pagesPerSheetLayoutCombo
operator|->
name|addItem
argument_list|(
name|QPrintDialog
operator|::
name|tr
argument_list|(
literal|"Right to Left, Top to Bottom"
argument_list|)
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QCUPSSupport
operator|::
name|RightToLeftTopToBottom
argument_list|)
argument_list|)
expr_stmt|;
name|m_ui
operator|.
name|pagesPerSheetLayoutCombo
operator|->
name|addItem
argument_list|(
name|QPrintDialog
operator|::
name|tr
argument_list|(
literal|"Bottom to Top, Left to Right"
argument_list|)
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QCUPSSupport
operator|::
name|BottomToTopLeftToRight
argument_list|)
argument_list|)
expr_stmt|;
name|m_ui
operator|.
name|pagesPerSheetLayoutCombo
operator|->
name|addItem
argument_list|(
name|QPrintDialog
operator|::
name|tr
argument_list|(
literal|"Bottom to Top, Right to Left"
argument_list|)
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QCUPSSupport
operator|::
name|BottomToTopRightToLeft
argument_list|)
argument_list|)
expr_stmt|;
name|m_ui
operator|.
name|pagesPerSheetLayoutCombo
operator|->
name|addItem
argument_list|(
name|QPrintDialog
operator|::
name|tr
argument_list|(
literal|"Top to Bottom, Left to Right"
argument_list|)
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QCUPSSupport
operator|::
name|TopToBottomLeftToRight
argument_list|)
argument_list|)
expr_stmt|;
name|m_ui
operator|.
name|pagesPerSheetLayoutCombo
operator|->
name|addItem
argument_list|(
name|QPrintDialog
operator|::
name|tr
argument_list|(
literal|"Top to Bottom, Right to Left"
argument_list|)
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QCUPSSupport
operator|::
name|TopToBottomRightToLeft
argument_list|)
argument_list|)
expr_stmt|;
name|m_ui
operator|.
name|pagesPerSheetCombo
operator|->
name|addItem
argument_list|(
name|QPrintDialog
operator|::
name|tr
argument_list|(
literal|"1 (1x1)"
argument_list|)
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QCUPSSupport
operator|::
name|OnePagePerSheet
argument_list|)
argument_list|)
expr_stmt|;
name|m_ui
operator|.
name|pagesPerSheetCombo
operator|->
name|addItem
argument_list|(
name|QPrintDialog
operator|::
name|tr
argument_list|(
literal|"2 (2x1)"
argument_list|)
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QCUPSSupport
operator|::
name|TwoPagesPerSheet
argument_list|)
argument_list|)
expr_stmt|;
name|m_ui
operator|.
name|pagesPerSheetCombo
operator|->
name|addItem
argument_list|(
name|QPrintDialog
operator|::
name|tr
argument_list|(
literal|"4 (2x2)"
argument_list|)
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QCUPSSupport
operator|::
name|FourPagesPerSheet
argument_list|)
argument_list|)
expr_stmt|;
name|m_ui
operator|.
name|pagesPerSheetCombo
operator|->
name|addItem
argument_list|(
name|QPrintDialog
operator|::
name|tr
argument_list|(
literal|"6 (2x3)"
argument_list|)
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QCUPSSupport
operator|::
name|SixPagesPerSheet
argument_list|)
argument_list|)
expr_stmt|;
name|m_ui
operator|.
name|pagesPerSheetCombo
operator|->
name|addItem
argument_list|(
name|QPrintDialog
operator|::
name|tr
argument_list|(
literal|"9 (3x3)"
argument_list|)
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QCUPSSupport
operator|::
name|NinePagesPerSheet
argument_list|)
argument_list|)
expr_stmt|;
name|m_ui
operator|.
name|pagesPerSheetCombo
operator|->
name|addItem
argument_list|(
name|QPrintDialog
operator|::
name|tr
argument_list|(
literal|"16 (4x4)"
argument_list|)
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QCUPSSupport
operator|::
name|SixteenPagesPerSheet
argument_list|)
argument_list|)
expr_stmt|;
comment|// Set to QCUPSSupport::OnePagePerSheet
name|m_ui
operator|.
name|pagesPerSheetCombo
operator|->
name|setCurrentIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Set to QCUPSSupport::LeftToRightTopToBottom
name|m_ui
operator|.
name|pagesPerSheetLayoutCombo
operator|->
name|setCurrentIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
else|#
directive|else
comment|// Disable if CUPS wasn't found
name|m_ui
operator|.
name|pagesPerSheetButtonGroup
operator|->
name|hide
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|initPageSizes
name|void
name|QPageSetupWidget
operator|::
name|initPageSizes
parameter_list|()
block|{
name|m_blockSignals
operator|=
literal|true
expr_stmt|;
name|m_ui
operator|.
name|pageSizeCombo
operator|->
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|m_outputFormat
operator|==
name|QPrinter
operator|::
name|NativeFormat
operator|&&
operator|!
name|m_printerName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QPlatformPrinterSupport
modifier|*
name|ps
init|=
name|QPlatformPrinterSupportPlugin
operator|::
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ps
condition|)
block|{
name|QPrintDevice
name|printDevice
init|=
name|ps
operator|->
name|createPrintDevice
argument_list|(
name|m_printerName
argument_list|)
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QPageSize
modifier|&
name|pageSize
decl|,
name|printDevice
operator|.
name|supportedPageSizes
argument_list|()
control|)
block|{
name|m_ui
operator|.
name|pageSizeCombo
operator|->
name|addItem
argument_list|(
name|pageSize
operator|.
name|name
argument_list|()
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|pageSize
operator|.
name|id
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_ui
operator|.
name|pageSizeCombo
operator|->
name|count
argument_list|()
operator|>
literal|0
operator|&&
name|printDevice
operator|.
name|supportsCustomPageSizes
argument_list|()
condition|)
block|{
name|m_ui
operator|.
name|pageSizeCombo
operator|->
name|addItem
argument_list|(
name|tr
argument_list|(
literal|"Custom"
argument_list|)
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QPageSize
operator|::
name|Custom
argument_list|)
argument_list|)
expr_stmt|;
name|m_blockSignals
operator|=
literal|false
expr_stmt|;
return|return;
block|}
block|}
block|}
comment|// If PdfFormat or no available printer page sizes, populate with all page sizes
for|for
control|(
name|int
name|id
init|=
literal|0
init|;
name|id
operator|<
name|QPageSize
operator|::
name|LastPageSize
condition|;
operator|++
name|id
control|)
block|{
if|if
condition|(
name|QPageSize
operator|::
name|PageSizeId
argument_list|(
name|id
argument_list|)
operator|==
name|QPageSize
operator|::
name|Custom
condition|)
block|{
name|m_ui
operator|.
name|pageSizeCombo
operator|->
name|addItem
argument_list|(
name|tr
argument_list|(
literal|"Custom"
argument_list|)
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QPageSize
name|pageSize
init|=
name|QPageSize
argument_list|(
name|QPageSize
operator|::
name|PageSizeId
argument_list|(
name|id
argument_list|)
argument_list|)
decl_stmt|;
name|m_ui
operator|.
name|pageSizeCombo
operator|->
name|addItem
argument_list|(
name|pageSize
operator|.
name|name
argument_list|()
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
block|}
name|m_blockSignals
operator|=
literal|false
expr_stmt|;
block|}
end_function
begin_comment
comment|// Set the dialog to use the given QPrinter
end_comment
begin_comment
comment|// Usually only called on first creation
end_comment
begin_function
DECL|function|setPrinter
name|void
name|QPageSetupWidget
operator|::
name|setPrinter
parameter_list|(
name|QPrinter
modifier|*
name|printer
parameter_list|)
block|{
name|m_printer
operator|=
name|printer
expr_stmt|;
comment|// Initialize the layout to the current QPrinter layout
name|m_pageLayout
operator|=
name|m_printer
operator|->
name|pageLayout
argument_list|()
expr_stmt|;
comment|// Assume if margins are Points then is by default, so set to locale default units
if|if
condition|(
name|m_pageLayout
operator|.
name|units
argument_list|()
operator|==
name|QPageLayout
operator|::
name|Point
condition|)
block|{
if|if
condition|(
name|QLocale
argument_list|()
operator|.
name|measurementSystem
argument_list|()
operator|==
name|QLocale
operator|::
name|MetricSystem
condition|)
name|m_pageLayout
operator|.
name|setUnits
argument_list|(
name|QPageLayout
operator|::
name|Millimeter
argument_list|)
expr_stmt|;
else|else
name|m_pageLayout
operator|.
name|setUnits
argument_list|(
name|QPageLayout
operator|::
name|Inch
argument_list|)
expr_stmt|;
block|}
name|m_units
operator|=
name|m_pageLayout
operator|.
name|units
argument_list|()
expr_stmt|;
name|m_pagePreview
operator|->
name|setPageLayout
argument_list|(
name|m_pageLayout
argument_list|)
expr_stmt|;
comment|// Then update the widget with the current printer details
name|selectPrinter
argument_list|(
name|m_printer
operator|->
name|outputFormat
argument_list|()
argument_list|,
name|m_printer
operator|->
name|printerName
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// The printer selected in the QPrintDialog has been changed, update the widget to reflect this
end_comment
begin_comment
comment|// Note the QPrinter is not updated at this time in case the user presses the Cancel button in QPrintDialog
end_comment
begin_function
DECL|function|selectPrinter
name|void
name|QPageSetupWidget
operator|::
name|selectPrinter
parameter_list|(
name|QPrinter
operator|::
name|OutputFormat
name|outputFormat
parameter_list|,
specifier|const
name|QString
modifier|&
name|printerName
parameter_list|)
block|{
name|m_outputFormat
operator|=
name|outputFormat
expr_stmt|;
name|m_printerName
operator|=
name|printerName
expr_stmt|;
name|initPageSizes
argument_list|()
expr_stmt|;
name|updateWidget
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|// Update the widget with the current settings
end_comment
begin_comment
comment|// TODO Break up into more intelligent chunks?
end_comment
begin_function
DECL|function|updateWidget
name|void
name|QPageSetupWidget
operator|::
name|updateWidget
parameter_list|()
block|{
name|m_blockSignals
operator|=
literal|true
expr_stmt|;
name|QString
name|suffix
decl_stmt|;
switch|switch
condition|(
name|m_units
condition|)
block|{
case|case
name|QPageLayout
operator|::
name|Millimeter
case|:
name|suffix
operator|=
name|tr
argument_list|(
literal|"mm"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPageLayout
operator|::
name|Point
case|:
name|suffix
operator|=
name|tr
argument_list|(
literal|"pt"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPageLayout
operator|::
name|Inch
case|:
name|suffix
operator|=
name|tr
argument_list|(
literal|"in"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPageLayout
operator|::
name|Pica
case|:
name|suffix
operator|=
name|tr
argument_list|(
literal|"PÌ¸"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPageLayout
operator|::
name|Didot
case|:
name|suffix
operator|=
name|tr
argument_list|(
literal|"DD"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPageLayout
operator|::
name|Cicero
case|:
name|suffix
operator|=
name|tr
argument_list|(
literal|"CC"
argument_list|)
expr_stmt|;
break|break;
block|}
name|m_ui
operator|.
name|unitCombo
operator|->
name|setCurrentIndex
argument_list|(
name|m_ui
operator|.
name|unitCombo
operator|->
name|findData
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|m_units
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|m_ui
operator|.
name|pageSizeCombo
operator|->
name|setCurrentIndex
argument_list|(
name|m_ui
operator|.
name|pageSizeCombo
operator|->
name|findData
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|m_pageLayout
operator|.
name|pageSize
argument_list|()
operator|.
name|id
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QMarginsF
name|min
decl_stmt|;
name|QMarginsF
name|max
decl_stmt|;
if|if
condition|(
name|m_pageLayout
operator|.
name|mode
argument_list|()
operator|==
name|QPageLayout
operator|::
name|FullPageMode
condition|)
block|{
name|min
operator|=
name|QMarginsF
argument_list|(
literal|0.0
argument_list|,
literal|0.0
argument_list|,
literal|0.0
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
name|max
operator|=
name|QMarginsF
argument_list|(
literal|9999.9999
argument_list|,
literal|9999.9999
argument_list|,
literal|9999.9999
argument_list|,
literal|9999.9999
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|min
operator|=
name|m_pageLayout
operator|.
name|minimumMargins
argument_list|()
expr_stmt|;
name|max
operator|=
name|m_pageLayout
operator|.
name|maximumMargins
argument_list|()
expr_stmt|;
block|}
name|m_ui
operator|.
name|leftMargin
operator|->
name|setSuffix
argument_list|(
name|suffix
argument_list|)
expr_stmt|;
name|m_ui
operator|.
name|leftMargin
operator|->
name|setMinimum
argument_list|(
name|min
operator|.
name|left
argument_list|()
argument_list|)
expr_stmt|;
name|m_ui
operator|.
name|leftMargin
operator|->
name|setMaximum
argument_list|(
name|max
operator|.
name|left
argument_list|()
argument_list|)
expr_stmt|;
name|m_ui
operator|.
name|leftMargin
operator|->
name|setValue
argument_list|(
name|m_pageLayout
operator|.
name|margins
argument_list|()
operator|.
name|left
argument_list|()
argument_list|)
expr_stmt|;
name|m_ui
operator|.
name|rightMargin
operator|->
name|setSuffix
argument_list|(
name|suffix
argument_list|)
expr_stmt|;
name|m_ui
operator|.
name|rightMargin
operator|->
name|setMinimum
argument_list|(
name|min
operator|.
name|right
argument_list|()
argument_list|)
expr_stmt|;
name|m_ui
operator|.
name|rightMargin
operator|->
name|setMaximum
argument_list|(
name|max
operator|.
name|right
argument_list|()
argument_list|)
expr_stmt|;
name|m_ui
operator|.
name|rightMargin
operator|->
name|setValue
argument_list|(
name|m_pageLayout
operator|.
name|margins
argument_list|()
operator|.
name|right
argument_list|()
argument_list|)
expr_stmt|;
name|m_ui
operator|.
name|topMargin
operator|->
name|setSuffix
argument_list|(
name|suffix
argument_list|)
expr_stmt|;
name|m_ui
operator|.
name|topMargin
operator|->
name|setMinimum
argument_list|(
name|min
operator|.
name|top
argument_list|()
argument_list|)
expr_stmt|;
name|m_ui
operator|.
name|topMargin
operator|->
name|setMaximum
argument_list|(
name|max
operator|.
name|top
argument_list|()
argument_list|)
expr_stmt|;
name|m_ui
operator|.
name|topMargin
operator|->
name|setValue
argument_list|(
name|m_pageLayout
operator|.
name|margins
argument_list|()
operator|.
name|top
argument_list|()
argument_list|)
expr_stmt|;
name|m_ui
operator|.
name|bottomMargin
operator|->
name|setSuffix
argument_list|(
name|suffix
argument_list|)
expr_stmt|;
name|m_ui
operator|.
name|bottomMargin
operator|->
name|setMinimum
argument_list|(
name|min
operator|.
name|bottom
argument_list|()
argument_list|)
expr_stmt|;
name|m_ui
operator|.
name|bottomMargin
operator|->
name|setMaximum
argument_list|(
name|max
operator|.
name|bottom
argument_list|()
argument_list|)
expr_stmt|;
name|m_ui
operator|.
name|bottomMargin
operator|->
name|setValue
argument_list|(
name|m_pageLayout
operator|.
name|margins
argument_list|()
operator|.
name|bottom
argument_list|()
argument_list|)
expr_stmt|;
name|bool
name|isCustom
init|=
name|m_ui
operator|.
name|pageSizeCombo
operator|->
name|currentData
argument_list|()
operator|.
name|value
argument_list|<
name|QPageSize
operator|::
name|PageSizeId
argument_list|>
argument_list|()
operator|==
name|QPageSize
operator|::
name|Custom
decl_stmt|;
name|m_ui
operator|.
name|pageWidth
operator|->
name|setSuffix
argument_list|(
name|suffix
argument_list|)
expr_stmt|;
name|m_ui
operator|.
name|pageWidth
operator|->
name|setValue
argument_list|(
name|m_pageLayout
operator|.
name|fullRect
argument_list|(
name|m_units
argument_list|)
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|m_ui
operator|.
name|pageWidth
operator|->
name|setEnabled
argument_list|(
name|isCustom
argument_list|)
expr_stmt|;
name|m_ui
operator|.
name|widthLabel
operator|->
name|setEnabled
argument_list|(
name|isCustom
argument_list|)
expr_stmt|;
name|m_ui
operator|.
name|pageHeight
operator|->
name|setSuffix
argument_list|(
name|suffix
argument_list|)
expr_stmt|;
name|m_ui
operator|.
name|pageHeight
operator|->
name|setValue
argument_list|(
name|m_pageLayout
operator|.
name|fullRect
argument_list|(
name|m_units
argument_list|)
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|m_ui
operator|.
name|pageHeight
operator|->
name|setEnabled
argument_list|(
name|isCustom
argument_list|)
expr_stmt|;
name|m_ui
operator|.
name|heightLabel
operator|->
name|setEnabled
argument_list|(
name|isCustom
argument_list|)
expr_stmt|;
name|m_ui
operator|.
name|landscape
operator|->
name|setChecked
argument_list|(
name|m_pageLayout
operator|.
name|orientation
argument_list|()
operator|==
name|QPageLayout
operator|::
name|Landscape
argument_list|)
expr_stmt|;
name|m_ui
operator|.
name|pagesPerSheetButtonGroup
operator|->
name|setEnabled
argument_list|(
name|m_outputFormat
operator|==
name|QPrinter
operator|::
name|NativeFormat
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|PSD_ENABLE_PAPERSOURCE
name|m_ui
operator|.
name|paperSource
operator|->
name|setCurrentItem
argument_list|(
name|printer
operator|->
name|paperSource
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|m_blockSignals
operator|=
literal|false
expr_stmt|;
block|}
end_function
begin_comment
comment|// Set the dialog chosen options on the QPrinter
end_comment
begin_comment
comment|// Normally only called when the QPrintDialog or QPageSetupDialog OK button is pressed
end_comment
begin_function
DECL|function|setupPrinter
name|void
name|QPageSetupWidget
operator|::
name|setupPrinter
parameter_list|()
specifier|const
block|{
name|m_printer
operator|->
name|setPageLayout
argument_list|(
name|m_pageLayout
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_CUPS
argument_list|)
name|QCUPSSupport
operator|::
name|PagesPerSheet
name|pagesPerSheet
init|=
name|m_ui
operator|.
name|pagesPerSheetCombo
operator|->
name|currentData
argument_list|()
operator|.
name|value
argument_list|<
name|QCUPSSupport
operator|::
name|PagesPerSheet
argument_list|>
argument_list|()
decl_stmt|;
name|QCUPSSupport
operator|::
name|PagesPerSheetLayout
name|pagesPerSheetLayout
init|=
name|m_ui
operator|.
name|pagesPerSheetLayoutCombo
operator|->
name|currentData
argument_list|()
operator|.
name|value
argument_list|<
name|QCUPSSupport
operator|::
name|PagesPerSheetLayout
argument_list|>
argument_list|()
decl_stmt|;
name|QCUPSSupport
operator|::
name|setPagesPerSheetLayout
argument_list|(
name|m_printer
argument_list|,
name|pagesPerSheet
argument_list|,
name|pagesPerSheetLayout
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|PSD_ENABLE_PAPERSOURCE
name|m_printer
operator|->
name|setPaperSource
argument_list|(
operator|(
name|QPrinter
operator|::
name|PaperSource
operator|)
name|m_ui
operator|.
name|paperSource
operator|->
name|currentIndex
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|// Updates size/preview after the combobox has been changed.
end_comment
begin_function
DECL|function|pageSizeChanged
name|void
name|QPageSetupWidget
operator|::
name|pageSizeChanged
parameter_list|()
block|{
if|if
condition|(
name|m_blockSignals
condition|)
return|return;
name|QPageSize
operator|::
name|PageSizeId
name|id
init|=
name|m_ui
operator|.
name|pageSizeCombo
operator|->
name|currentData
argument_list|()
operator|.
name|value
argument_list|<
name|QPageSize
operator|::
name|PageSizeId
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|id
operator|!=
name|QPageSize
operator|::
name|Custom
condition|)
block|{
comment|// TODO Set layout margin min/max to printer custom min/max
name|m_pageLayout
operator|.
name|setPageSize
argument_list|(
name|QPageSize
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QSizeF
name|customSize
decl_stmt|;
if|if
condition|(
name|m_pageLayout
operator|.
name|orientation
argument_list|()
operator|==
name|QPageLayout
operator|::
name|Landscape
condition|)
name|customSize
operator|=
name|QSizeF
argument_list|(
name|m_ui
operator|.
name|pageHeight
operator|->
name|value
argument_list|()
argument_list|,
name|m_ui
operator|.
name|pageWidth
operator|->
name|value
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|customSize
operator|=
name|QSizeF
argument_list|(
name|m_ui
operator|.
name|pageWidth
operator|->
name|value
argument_list|()
argument_list|,
name|m_ui
operator|.
name|pageHeight
operator|->
name|value
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO Set layout margin min/max to printer min/max for page size
name|m_pageLayout
operator|.
name|setPageSize
argument_list|(
name|QPageSize
argument_list|(
name|customSize
argument_list|,
name|QPageSize
operator|::
name|Unit
argument_list|(
name|m_units
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|m_pagePreview
operator|->
name|setPageLayout
argument_list|(
name|m_pageLayout
argument_list|)
expr_stmt|;
name|updateWidget
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|pageOrientationChanged
name|void
name|QPageSetupWidget
operator|::
name|pageOrientationChanged
parameter_list|()
block|{
if|if
condition|(
name|m_blockSignals
condition|)
return|return;
name|m_pageLayout
operator|.
name|setOrientation
argument_list|(
name|m_ui
operator|.
name|portrait
operator|->
name|isChecked
argument_list|()
condition|?
name|QPageLayout
operator|::
name|Portrait
else|:
name|QPageLayout
operator|::
name|Landscape
argument_list|)
expr_stmt|;
name|m_pagePreview
operator|->
name|setPageLayout
argument_list|(
name|m_pageLayout
argument_list|)
expr_stmt|;
name|updateWidget
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|pagesPerSheetChanged
name|void
name|QPageSetupWidget
operator|::
name|pagesPerSheetChanged
parameter_list|()
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_CUPS
argument_list|)
switch|switch
condition|(
name|m_ui
operator|.
name|pagesPerSheetCombo
operator|->
name|currentData
argument_list|()
operator|.
name|toInt
argument_list|()
condition|)
block|{
case|case
name|QCUPSSupport
operator|::
name|OnePagePerSheet
case|:
name|m_pagePreview
operator|->
name|setPagePreviewLayout
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
name|QCUPSSupport
operator|::
name|TwoPagesPerSheet
case|:
name|m_pagePreview
operator|->
name|setPagePreviewLayout
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
break|break;
case|case
name|QCUPSSupport
operator|::
name|FourPagesPerSheet
case|:
name|m_pagePreview
operator|->
name|setPagePreviewLayout
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
break|break;
case|case
name|QCUPSSupport
operator|::
name|SixPagesPerSheet
case|:
name|m_pagePreview
operator|->
name|setPagePreviewLayout
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|)
expr_stmt|;
break|break;
case|case
name|QCUPSSupport
operator|::
name|NinePagesPerSheet
case|:
name|m_pagePreview
operator|->
name|setPagePreviewLayout
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|)
expr_stmt|;
break|break;
case|case
name|QCUPSSupport
operator|::
name|SixteenPagesPerSheet
case|:
name|m_pagePreview
operator|->
name|setPagePreviewLayout
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|)
expr_stmt|;
break|break;
block|}
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|unitChanged
name|void
name|QPageSetupWidget
operator|::
name|unitChanged
parameter_list|()
block|{
if|if
condition|(
name|m_blockSignals
condition|)
return|return;
name|m_units
operator|=
name|m_ui
operator|.
name|unitCombo
operator|->
name|currentData
argument_list|()
operator|.
name|value
argument_list|<
name|QPageLayout
operator|::
name|Unit
argument_list|>
argument_list|()
expr_stmt|;
name|m_pageLayout
operator|.
name|setUnits
argument_list|(
name|m_units
argument_list|)
expr_stmt|;
name|updateWidget
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|topMarginChanged
name|void
name|QPageSetupWidget
operator|::
name|topMarginChanged
parameter_list|(
name|double
name|newValue
parameter_list|)
block|{
if|if
condition|(
name|m_blockSignals
condition|)
return|return;
name|m_pageLayout
operator|.
name|setTopMargin
argument_list|(
name|newValue
argument_list|)
expr_stmt|;
name|m_pagePreview
operator|->
name|setPageLayout
argument_list|(
name|m_pageLayout
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|bottomMarginChanged
name|void
name|QPageSetupWidget
operator|::
name|bottomMarginChanged
parameter_list|(
name|double
name|newValue
parameter_list|)
block|{
if|if
condition|(
name|m_blockSignals
condition|)
return|return;
name|m_pageLayout
operator|.
name|setBottomMargin
argument_list|(
name|newValue
argument_list|)
expr_stmt|;
name|m_pagePreview
operator|->
name|setPageLayout
argument_list|(
name|m_pageLayout
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|leftMarginChanged
name|void
name|QPageSetupWidget
operator|::
name|leftMarginChanged
parameter_list|(
name|double
name|newValue
parameter_list|)
block|{
if|if
condition|(
name|m_blockSignals
condition|)
return|return;
name|m_pageLayout
operator|.
name|setLeftMargin
argument_list|(
name|newValue
argument_list|)
expr_stmt|;
name|m_pagePreview
operator|->
name|setPageLayout
argument_list|(
name|m_pageLayout
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|rightMarginChanged
name|void
name|QPageSetupWidget
operator|::
name|rightMarginChanged
parameter_list|(
name|double
name|newValue
parameter_list|)
block|{
if|if
condition|(
name|m_blockSignals
condition|)
return|return;
name|m_pageLayout
operator|.
name|setRightMargin
argument_list|(
name|newValue
argument_list|)
expr_stmt|;
name|m_pagePreview
operator|->
name|setPageLayout
argument_list|(
name|m_pageLayout
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// QPageSetupDialog
end_comment
begin_comment
comment|// - Public Linux / CUPS class implementation
end_comment
begin_constructor
DECL|function|QPageSetupDialog
name|QPageSetupDialog
operator|::
name|QPageSetupDialog
parameter_list|(
name|QPrinter
modifier|*
name|printer
parameter_list|,
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QDialog
argument_list|(
operator|*
operator|(
operator|new
name|QUnixPageSetupDialogPrivate
argument_list|(
name|printer
argument_list|)
operator|)
argument_list|,
name|parent
argument_list|)
block|{
name|Q_D
argument_list|(
name|QPageSetupDialog
argument_list|)
expr_stmt|;
name|setWindowTitle
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPrintPreviewDialog"
argument_list|,
literal|"Page Setup"
argument_list|)
argument_list|)
expr_stmt|;
cast|static_cast
argument_list|<
name|QUnixPageSetupDialogPrivate
operator|*
argument_list|>
argument_list|(
name|d
argument_list|)
operator|->
name|init
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_constructor
DECL|function|QPageSetupDialog
name|QPageSetupDialog
operator|::
name|QPageSetupDialog
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QDialog
argument_list|(
operator|*
operator|(
operator|new
name|QUnixPageSetupDialogPrivate
argument_list|(
literal|0
argument_list|)
operator|)
argument_list|,
name|parent
argument_list|)
block|{
name|Q_D
argument_list|(
name|QPageSetupDialog
argument_list|)
expr_stmt|;
name|setWindowTitle
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPrintPreviewDialog"
argument_list|,
literal|"Page Setup"
argument_list|)
argument_list|)
expr_stmt|;
cast|static_cast
argument_list|<
name|QUnixPageSetupDialogPrivate
operator|*
argument_list|>
argument_list|(
name|d
argument_list|)
operator|->
name|init
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|exec
name|int
name|QPageSetupDialog
operator|::
name|exec
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QPageSetupDialog
argument_list|)
expr_stmt|;
name|int
name|ret
init|=
name|QDialog
operator|::
name|exec
argument_list|()
decl_stmt|;
if|if
condition|(
name|ret
operator|==
name|Accepted
condition|)
cast|static_cast
argument_list|<
name|QUnixPageSetupDialogPrivate
operator|*
argument_list|>
argument_list|(
name|d
argument_list|)
operator|->
name|widget
operator|->
name|setupPrinter
argument_list|()
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_include
include|#
directive|include
file|"moc_qpagesetupdialog.cpp"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_PRINTDIALOG
end_comment
end_unit
