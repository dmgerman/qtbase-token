begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qpagesetupdialog.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_PRINTDIALOG
end_ifndef
begin_include
include|#
directive|include
file|"qpagesetupdialog_unix_p.h"
end_include
begin_include
include|#
directive|include
file|"qpainter.h"
end_include
begin_include
include|#
directive|include
file|"qprintdialog.h"
end_include
begin_include
include|#
directive|include
file|"qdialogbuttonbox.h"
end_include
begin_include
include|#
directive|include
file|<ui_qpagesetupwidget.h>
end_include
begin_include
include|#
directive|include
file|<QtPrintSupport/qprinter.h>
end_include
begin_include
include|#
directive|include
file|<private/qpagesetupdialog_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qprinter_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qprintengine_pdf_p.h>
end_include
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_CUPS
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_LIBRARY
argument_list|)
end_if
begin_include
include|#
directive|include
file|<private/qcups_p.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_function_decl
name|QT_BEGIN_NAMESPACE
name|QSizeF
name|qt_printerPaperSize
parameter_list|(
name|QPrinter
operator|::
name|Orientation
parameter_list|,
name|QPrinter
operator|::
name|PaperSize
parameter_list|,
name|QPrinter
operator|::
name|Unit
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|// Disabled until we have support for papersources on unix
end_comment
begin_comment
comment|// #define PSD_ENABLE_PAPERSOURCE
end_comment
begin_function
DECL|function|populatePaperSizes
specifier|static
name|void
name|populatePaperSizes
parameter_list|(
name|QComboBox
modifier|*
name|cb
parameter_list|)
block|{
name|cb
operator|->
name|addItem
argument_list|(
name|QPrintDialog
operator|::
name|tr
argument_list|(
literal|"A0"
argument_list|)
argument_list|,
name|QPrinter
operator|::
name|A0
argument_list|)
expr_stmt|;
name|cb
operator|->
name|addItem
argument_list|(
name|QPrintDialog
operator|::
name|tr
argument_list|(
literal|"A1"
argument_list|)
argument_list|,
name|QPrinter
operator|::
name|A1
argument_list|)
expr_stmt|;
name|cb
operator|->
name|addItem
argument_list|(
name|QPrintDialog
operator|::
name|tr
argument_list|(
literal|"A2"
argument_list|)
argument_list|,
name|QPrinter
operator|::
name|A2
argument_list|)
expr_stmt|;
name|cb
operator|->
name|addItem
argument_list|(
name|QPrintDialog
operator|::
name|tr
argument_list|(
literal|"A3"
argument_list|)
argument_list|,
name|QPrinter
operator|::
name|A3
argument_list|)
expr_stmt|;
name|cb
operator|->
name|addItem
argument_list|(
name|QPrintDialog
operator|::
name|tr
argument_list|(
literal|"A4"
argument_list|)
argument_list|,
name|QPrinter
operator|::
name|A4
argument_list|)
expr_stmt|;
name|cb
operator|->
name|addItem
argument_list|(
name|QPrintDialog
operator|::
name|tr
argument_list|(
literal|"A5"
argument_list|)
argument_list|,
name|QPrinter
operator|::
name|A5
argument_list|)
expr_stmt|;
name|cb
operator|->
name|addItem
argument_list|(
name|QPrintDialog
operator|::
name|tr
argument_list|(
literal|"A6"
argument_list|)
argument_list|,
name|QPrinter
operator|::
name|A6
argument_list|)
expr_stmt|;
name|cb
operator|->
name|addItem
argument_list|(
name|QPrintDialog
operator|::
name|tr
argument_list|(
literal|"A7"
argument_list|)
argument_list|,
name|QPrinter
operator|::
name|A7
argument_list|)
expr_stmt|;
name|cb
operator|->
name|addItem
argument_list|(
name|QPrintDialog
operator|::
name|tr
argument_list|(
literal|"A8"
argument_list|)
argument_list|,
name|QPrinter
operator|::
name|A8
argument_list|)
expr_stmt|;
name|cb
operator|->
name|addItem
argument_list|(
name|QPrintDialog
operator|::
name|tr
argument_list|(
literal|"A9"
argument_list|)
argument_list|,
name|QPrinter
operator|::
name|A9
argument_list|)
expr_stmt|;
name|cb
operator|->
name|addItem
argument_list|(
name|QPrintDialog
operator|::
name|tr
argument_list|(
literal|"B0"
argument_list|)
argument_list|,
name|QPrinter
operator|::
name|B0
argument_list|)
expr_stmt|;
name|cb
operator|->
name|addItem
argument_list|(
name|QPrintDialog
operator|::
name|tr
argument_list|(
literal|"B1"
argument_list|)
argument_list|,
name|QPrinter
operator|::
name|B1
argument_list|)
expr_stmt|;
name|cb
operator|->
name|addItem
argument_list|(
name|QPrintDialog
operator|::
name|tr
argument_list|(
literal|"B2"
argument_list|)
argument_list|,
name|QPrinter
operator|::
name|B2
argument_list|)
expr_stmt|;
name|cb
operator|->
name|addItem
argument_list|(
name|QPrintDialog
operator|::
name|tr
argument_list|(
literal|"B3"
argument_list|)
argument_list|,
name|QPrinter
operator|::
name|B3
argument_list|)
expr_stmt|;
name|cb
operator|->
name|addItem
argument_list|(
name|QPrintDialog
operator|::
name|tr
argument_list|(
literal|"B4"
argument_list|)
argument_list|,
name|QPrinter
operator|::
name|B4
argument_list|)
expr_stmt|;
name|cb
operator|->
name|addItem
argument_list|(
name|QPrintDialog
operator|::
name|tr
argument_list|(
literal|"B5"
argument_list|)
argument_list|,
name|QPrinter
operator|::
name|B5
argument_list|)
expr_stmt|;
name|cb
operator|->
name|addItem
argument_list|(
name|QPrintDialog
operator|::
name|tr
argument_list|(
literal|"B6"
argument_list|)
argument_list|,
name|QPrinter
operator|::
name|B6
argument_list|)
expr_stmt|;
name|cb
operator|->
name|addItem
argument_list|(
name|QPrintDialog
operator|::
name|tr
argument_list|(
literal|"B7"
argument_list|)
argument_list|,
name|QPrinter
operator|::
name|B7
argument_list|)
expr_stmt|;
name|cb
operator|->
name|addItem
argument_list|(
name|QPrintDialog
operator|::
name|tr
argument_list|(
literal|"B8"
argument_list|)
argument_list|,
name|QPrinter
operator|::
name|B8
argument_list|)
expr_stmt|;
name|cb
operator|->
name|addItem
argument_list|(
name|QPrintDialog
operator|::
name|tr
argument_list|(
literal|"B9"
argument_list|)
argument_list|,
name|QPrinter
operator|::
name|B9
argument_list|)
expr_stmt|;
name|cb
operator|->
name|addItem
argument_list|(
name|QPrintDialog
operator|::
name|tr
argument_list|(
literal|"B10"
argument_list|)
argument_list|,
name|QPrinter
operator|::
name|B10
argument_list|)
expr_stmt|;
name|cb
operator|->
name|addItem
argument_list|(
name|QPrintDialog
operator|::
name|tr
argument_list|(
literal|"C5E"
argument_list|)
argument_list|,
name|QPrinter
operator|::
name|C5E
argument_list|)
expr_stmt|;
name|cb
operator|->
name|addItem
argument_list|(
name|QPrintDialog
operator|::
name|tr
argument_list|(
literal|"DLE"
argument_list|)
argument_list|,
name|QPrinter
operator|::
name|DLE
argument_list|)
expr_stmt|;
name|cb
operator|->
name|addItem
argument_list|(
name|QPrintDialog
operator|::
name|tr
argument_list|(
literal|"Executive"
argument_list|)
argument_list|,
name|QPrinter
operator|::
name|Executive
argument_list|)
expr_stmt|;
name|cb
operator|->
name|addItem
argument_list|(
name|QPrintDialog
operator|::
name|tr
argument_list|(
literal|"Folio"
argument_list|)
argument_list|,
name|QPrinter
operator|::
name|Folio
argument_list|)
expr_stmt|;
name|cb
operator|->
name|addItem
argument_list|(
name|QPrintDialog
operator|::
name|tr
argument_list|(
literal|"Ledger"
argument_list|)
argument_list|,
name|QPrinter
operator|::
name|Ledger
argument_list|)
expr_stmt|;
name|cb
operator|->
name|addItem
argument_list|(
name|QPrintDialog
operator|::
name|tr
argument_list|(
literal|"Legal"
argument_list|)
argument_list|,
name|QPrinter
operator|::
name|Legal
argument_list|)
expr_stmt|;
name|cb
operator|->
name|addItem
argument_list|(
name|QPrintDialog
operator|::
name|tr
argument_list|(
literal|"Letter"
argument_list|)
argument_list|,
name|QPrinter
operator|::
name|Letter
argument_list|)
expr_stmt|;
name|cb
operator|->
name|addItem
argument_list|(
name|QPrintDialog
operator|::
name|tr
argument_list|(
literal|"Tabloid"
argument_list|)
argument_list|,
name|QPrinter
operator|::
name|Tabloid
argument_list|)
expr_stmt|;
name|cb
operator|->
name|addItem
argument_list|(
name|QPrintDialog
operator|::
name|tr
argument_list|(
literal|"US Common #10 Envelope"
argument_list|)
argument_list|,
name|QPrinter
operator|::
name|Comm10E
argument_list|)
expr_stmt|;
name|cb
operator|->
name|addItem
argument_list|(
name|QPrintDialog
operator|::
name|tr
argument_list|(
literal|"Custom"
argument_list|)
argument_list|,
name|QPrinter
operator|::
name|Custom
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sizeForOrientation
specifier|static
name|QSizeF
name|sizeForOrientation
parameter_list|(
name|QPrinter
operator|::
name|Orientation
name|orientation
parameter_list|,
specifier|const
name|QSizeF
modifier|&
name|size
parameter_list|)
block|{
return|return
operator|(
name|orientation
operator|==
name|QPrinter
operator|::
name|Portrait
operator|)
condition|?
name|size
else|:
name|QSizeF
argument_list|(
name|size
operator|.
name|height
argument_list|()
argument_list|,
name|size
operator|.
name|width
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|PSD_ENABLE_PAPERSOURCE
end_ifdef
begin_decl_stmt
DECL|variable|paperSourceNames
specifier|static
specifier|const
name|char
modifier|*
name|paperSourceNames
index|[]
init|=
block|{
literal|"Only One"
block|,
literal|"Lower"
block|,
literal|"Middle"
block|,
literal|"Manual"
block|,
literal|"Envelope"
block|,
literal|"Envelope manual"
block|,
literal|"Auto"
block|,
literal|"Tractor"
block|,
literal|"Small format"
block|,
literal|"Large format"
block|,
literal|"Large capacity"
block|,
literal|"Cassette"
block|,
literal|"Form source"
block|,
literal|0
block|}
decl_stmt|;
end_decl_stmt
begin_struct
DECL|struct|PaperSourceNames
struct|struct
name|PaperSourceNames
block|{
DECL|function|PaperSourceNames
name|PaperSourceNames
parameter_list|(
specifier|const
name|char
modifier|*
name|nam
parameter_list|,
name|QPrinter
operator|::
name|PaperSource
name|ps
parameter_list|)
member_init_list|:
name|paperSource
argument_list|(
name|ps
argument_list|)
member_init_list|,
name|name
argument_list|(
name|nam
argument_list|)
block|{}
DECL|member|paperSource
name|QPrinter
operator|::
name|PaperSource
name|paperSource
decl_stmt|;
DECL|member|name
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
block|}
struct|;
end_struct
begin_endif
endif|#
directive|endif
end_endif
begin_class
DECL|class|QPagePreview
class|class
name|QPagePreview
super|:
specifier|public
name|QWidget
block|{
public|public:
DECL|function|QPagePreview
name|QPagePreview
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
name|parent
argument_list|)
block|{
name|setSizePolicy
argument_list|(
name|QSizePolicy
operator|::
name|Expanding
argument_list|,
name|QSizePolicy
operator|::
name|Expanding
argument_list|)
expr_stmt|;
name|setMinimumSize
argument_list|(
literal|50
argument_list|,
literal|50
argument_list|)
expr_stmt|;
block|}
DECL|function|setPaperSize
name|void
name|setPaperSize
parameter_list|(
specifier|const
name|QSizeF
modifier|&
name|size
parameter_list|)
block|{
name|m_size
operator|=
name|size
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
block|}
DECL|function|setMargins
name|void
name|setMargins
parameter_list|(
name|qreal
name|left
parameter_list|,
name|qreal
name|top
parameter_list|,
name|qreal
name|right
parameter_list|,
name|qreal
name|bottom
parameter_list|)
block|{
name|m_left
operator|=
name|left
expr_stmt|;
name|m_top
operator|=
name|top
expr_stmt|;
name|m_right
operator|=
name|right
expr_stmt|;
name|m_bottom
operator|=
name|bottom
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
block|}
DECL|function|setPagePreviewLayout
name|void
name|setPagePreviewLayout
parameter_list|(
name|int
name|columns
parameter_list|,
name|int
name|rows
parameter_list|)
block|{
name|m_pagePreviewColumns
operator|=
name|columns
expr_stmt|;
name|m_pagePreviewRows
operator|=
name|rows
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
block|}
protected|protected:
DECL|function|paintEvent
name|void
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
parameter_list|)
block|{
name|QRect
name|pageRect
decl_stmt|;
name|QSizeF
name|adjustedSize
argument_list|(
name|m_size
argument_list|)
decl_stmt|;
name|adjustedSize
operator|.
name|scale
argument_list|(
name|width
argument_list|()
operator|-
literal|10
argument_list|,
name|height
argument_list|()
operator|-
literal|10
argument_list|,
name|Qt
operator|::
name|KeepAspectRatio
argument_list|)
expr_stmt|;
name|pageRect
operator|=
name|QRect
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|adjustedSize
operator|.
name|toSize
argument_list|()
argument_list|)
expr_stmt|;
name|pageRect
operator|.
name|moveCenter
argument_list|(
name|rect
argument_list|()
operator|.
name|center
argument_list|()
argument_list|)
expr_stmt|;
name|qreal
name|width_factor
init|=
name|pageRect
operator|.
name|width
argument_list|()
operator|/
name|m_size
operator|.
name|width
argument_list|()
decl_stmt|;
name|qreal
name|height_factor
init|=
name|pageRect
operator|.
name|height
argument_list|()
operator|/
name|m_size
operator|.
name|height
argument_list|()
decl_stmt|;
name|int
name|leftSize
init|=
name|qRound
argument_list|(
name|m_left
operator|*
name|width_factor
argument_list|)
decl_stmt|;
name|int
name|topSize
init|=
name|qRound
argument_list|(
name|m_top
operator|*
name|height_factor
argument_list|)
decl_stmt|;
name|int
name|rightSize
init|=
name|qRound
argument_list|(
name|m_right
operator|*
name|width_factor
argument_list|)
decl_stmt|;
name|int
name|bottomSize
init|=
name|qRound
argument_list|(
name|m_bottom
operator|*
name|height_factor
argument_list|)
decl_stmt|;
name|QRect
name|marginRect
argument_list|(
name|pageRect
operator|.
name|x
argument_list|()
operator|+
name|leftSize
argument_list|,
name|pageRect
operator|.
name|y
argument_list|()
operator|+
name|topSize
argument_list|,
name|pageRect
operator|.
name|width
argument_list|()
operator|-
operator|(
name|leftSize
operator|+
name|rightSize
operator|+
literal|1
operator|)
argument_list|,
name|pageRect
operator|.
name|height
argument_list|()
operator|-
operator|(
name|topSize
operator|+
name|bottomSize
operator|+
literal|1
operator|)
argument_list|)
decl_stmt|;
name|QPainter
name|p
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|QColor
name|shadow
argument_list|(
name|palette
argument_list|()
operator|.
name|mid
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|6
condition|;
operator|++
name|i
control|)
block|{
name|shadow
operator|.
name|setAlpha
argument_list|(
literal|180
operator|-
name|i
operator|*
literal|30
argument_list|)
expr_stmt|;
name|QRect
name|offset
argument_list|(
name|pageRect
operator|.
name|adjusted
argument_list|(
name|i
argument_list|,
name|i
argument_list|,
name|i
argument_list|,
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|p
operator|.
name|setPen
argument_list|(
name|shadow
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawLine
argument_list|(
name|offset
operator|.
name|left
argument_list|()
argument_list|,
name|offset
operator|.
name|bottom
argument_list|()
argument_list|,
name|offset
operator|.
name|right
argument_list|()
argument_list|,
name|offset
operator|.
name|bottom
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawLine
argument_list|(
name|offset
operator|.
name|right
argument_list|()
argument_list|,
name|offset
operator|.
name|top
argument_list|()
argument_list|,
name|offset
operator|.
name|right
argument_list|()
argument_list|,
name|offset
operator|.
name|bottom
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|p
operator|.
name|fillRect
argument_list|(
name|pageRect
argument_list|,
name|palette
argument_list|()
operator|.
name|light
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|marginRect
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|p
operator|.
name|setPen
argument_list|(
name|QPen
argument_list|(
name|palette
argument_list|()
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Dark
argument_list|)
argument_list|,
literal|0
argument_list|,
name|Qt
operator|::
name|DotLine
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawRect
argument_list|(
name|marginRect
argument_list|)
expr_stmt|;
name|marginRect
operator|.
name|adjust
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|p
operator|.
name|setClipRect
argument_list|(
name|marginRect
argument_list|)
expr_stmt|;
name|QFont
name|font
decl_stmt|;
name|font
operator|.
name|setPointSizeF
argument_list|(
name|font
operator|.
name|pointSizeF
argument_list|()
operator|*
literal|0.25
argument_list|)
expr_stmt|;
name|p
operator|.
name|setFont
argument_list|(
name|font
argument_list|)
expr_stmt|;
name|p
operator|.
name|setPen
argument_list|(
name|palette
argument_list|()
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Dark
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|text
argument_list|(
name|QLatin1String
argument_list|(
literal|"Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi."
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
operator|++
name|i
control|)
name|text
operator|+=
name|text
expr_stmt|;
specifier|const
name|int
name|spacing
init|=
name|pageRect
operator|.
name|width
argument_list|()
operator|*
literal|0.1
decl_stmt|;
specifier|const
name|int
name|textWidth
init|=
operator|(
name|marginRect
operator|.
name|width
argument_list|()
operator|-
operator|(
name|spacing
operator|*
operator|(
name|m_pagePreviewColumns
operator|-
literal|1
operator|)
operator|)
operator|)
operator|/
name|m_pagePreviewColumns
decl_stmt|;
specifier|const
name|int
name|textHeight
init|=
operator|(
name|marginRect
operator|.
name|height
argument_list|()
operator|-
operator|(
name|spacing
operator|*
operator|(
name|m_pagePreviewRows
operator|-
literal|1
operator|)
operator|)
operator|)
operator|/
name|m_pagePreviewRows
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|m_pagePreviewColumns
condition|;
operator|++
name|x
control|)
block|{
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|m_pagePreviewRows
condition|;
operator|++
name|y
control|)
block|{
name|QRect
name|textRect
argument_list|(
name|marginRect
operator|.
name|left
argument_list|()
operator|+
name|x
operator|*
operator|(
name|textWidth
operator|+
name|spacing
operator|)
argument_list|,
name|marginRect
operator|.
name|top
argument_list|()
operator|+
name|y
operator|*
operator|(
name|textHeight
operator|+
name|spacing
operator|)
argument_list|,
name|textWidth
argument_list|,
name|textHeight
argument_list|)
decl_stmt|;
name|p
operator|.
name|drawText
argument_list|(
name|textRect
argument_list|,
name|Qt
operator|::
name|TextWordWrap
operator||
name|Qt
operator|::
name|AlignVCenter
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
private|private:
comment|// all these are in points
DECL|member|m_left
DECL|member|m_top
DECL|member|m_right
DECL|member|m_bottom
name|qreal
name|m_left
decl_stmt|,
name|m_top
decl_stmt|,
name|m_right
decl_stmt|,
name|m_bottom
decl_stmt|;
comment|// specify width / height of one page in preview
DECL|member|m_pagePreviewColumns
DECL|member|m_pagePreviewRows
name|int
name|m_pagePreviewColumns
decl_stmt|,
name|m_pagePreviewRows
decl_stmt|;
DECL|member|m_size
name|QSizeF
name|m_size
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|QUnixPageSetupDialogPrivate
class|class
name|QUnixPageSetupDialogPrivate
super|:
specifier|public
name|QPageSetupDialogPrivate
block|{
name|Q_DECLARE_PUBLIC
parameter_list|(
name|QPageSetupDialog
parameter_list|)
specifier|public
private|:
name|QUnixPageSetupDialogPrivate
parameter_list|(
name|QPrinter
modifier|*
name|printer
parameter_list|)
constructor_decl|;
name|~
name|QUnixPageSetupDialogPrivate
parameter_list|()
destructor_decl|;
name|void
name|init
parameter_list|()
function_decl|;
DECL|member|widget
name|QPageSetupWidget
modifier|*
name|widget
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|QUnixPageSetupDialogPrivate
name|QUnixPageSetupDialogPrivate
operator|::
name|QUnixPageSetupDialogPrivate
parameter_list|(
name|QPrinter
modifier|*
name|printer
parameter_list|)
member_init_list|:
name|QPageSetupDialogPrivate
argument_list|(
name|printer
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QUnixPageSetupDialogPrivate
name|QUnixPageSetupDialogPrivate
operator|::
name|~
name|QUnixPageSetupDialogPrivate
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|init
name|void
name|QUnixPageSetupDialogPrivate
operator|::
name|init
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QPageSetupDialog
argument_list|)
expr_stmt|;
name|widget
operator|=
operator|new
name|QPageSetupWidget
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|widget
operator|->
name|setPrinter
argument_list|(
name|printer
argument_list|)
expr_stmt|;
name|QDialogButtonBox
modifier|*
name|buttons
init|=
operator|new
name|QDialogButtonBox
argument_list|(
name|QDialogButtonBox
operator|::
name|Ok
operator||
name|QDialogButtonBox
operator|::
name|Cancel
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|,
name|q
argument_list|)
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|buttons
argument_list|,
name|SIGNAL
argument_list|(
name|accepted
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|accept
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|buttons
argument_list|,
name|SIGNAL
argument_list|(
name|rejected
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|reject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVBoxLayout
modifier|*
name|lay
init|=
operator|new
name|QVBoxLayout
argument_list|(
name|q
argument_list|)
decl_stmt|;
name|lay
operator|->
name|addWidget
argument_list|(
name|widget
argument_list|)
expr_stmt|;
name|lay
operator|->
name|addWidget
argument_list|(
name|buttons
argument_list|)
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|QPageSetupWidget
name|QPageSetupWidget
operator|::
name|QPageSetupWidget
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|m_printer
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_blockSignals
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|m_cups
argument_list|(
literal|false
argument_list|)
block|{
name|widget
operator|.
name|setupUi
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|QString
name|suffix
init|=
operator|(
name|QLocale
operator|::
name|system
argument_list|()
operator|.
name|measurementSystem
argument_list|()
operator|==
name|QLocale
operator|::
name|ImperialSystem
operator|)
condition|?
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|" in"
argument_list|)
else|:
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|" mm"
argument_list|)
decl_stmt|;
name|widget
operator|.
name|topMargin
operator|->
name|setSuffix
argument_list|(
name|suffix
argument_list|)
expr_stmt|;
name|widget
operator|.
name|bottomMargin
operator|->
name|setSuffix
argument_list|(
name|suffix
argument_list|)
expr_stmt|;
name|widget
operator|.
name|leftMargin
operator|->
name|setSuffix
argument_list|(
name|suffix
argument_list|)
expr_stmt|;
name|widget
operator|.
name|rightMargin
operator|->
name|setSuffix
argument_list|(
name|suffix
argument_list|)
expr_stmt|;
name|widget
operator|.
name|paperWidth
operator|->
name|setSuffix
argument_list|(
name|suffix
argument_list|)
expr_stmt|;
name|widget
operator|.
name|paperHeight
operator|->
name|setSuffix
argument_list|(
name|suffix
argument_list|)
expr_stmt|;
name|QVBoxLayout
modifier|*
name|lay
init|=
operator|new
name|QVBoxLayout
argument_list|(
name|widget
operator|.
name|preview
argument_list|)
decl_stmt|;
name|widget
operator|.
name|preview
operator|->
name|setLayout
argument_list|(
name|lay
argument_list|)
expr_stmt|;
name|m_pagePreview
operator|=
operator|new
name|QPagePreview
argument_list|(
name|widget
operator|.
name|preview
argument_list|)
expr_stmt|;
name|m_pagePreview
operator|->
name|setPagePreviewLayout
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|lay
operator|->
name|addWidget
argument_list|(
name|m_pagePreview
argument_list|)
expr_stmt|;
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Polished
argument_list|,
literal|false
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|PSD_ENABLE_PAPERSOURCE
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|paperSourceNames
index|[
name|i
index|]
condition|;
operator|++
name|i
control|)
name|widget
operator|.
name|paperSource
operator|->
name|insertItem
argument_list|(
name|paperSourceNames
index|[
name|i
index|]
argument_list|)
expr_stmt|;
else|#
directive|else
name|widget
operator|.
name|paperSourceLabel
operator|->
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|widget
operator|.
name|paperSource
operator|->
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|widget
operator|.
name|reverseLandscape
operator|->
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|widget
operator|.
name|reversePortrait
operator|->
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|populatePaperSizes
argument_list|(
name|widget
operator|.
name|paperSize
argument_list|)
expr_stmt|;
name|initPagesPerSheet
argument_list|()
expr_stmt|;
name|QStringList
name|units
decl_stmt|;
name|units
operator|<<
name|tr
argument_list|(
literal|"Centimeters (cm)"
argument_list|)
operator|<<
name|tr
argument_list|(
literal|"Millimeters (mm)"
argument_list|)
operator|<<
name|tr
argument_list|(
literal|"Inches (in)"
argument_list|)
operator|<<
name|tr
argument_list|(
literal|"Points (pt)"
argument_list|)
expr_stmt|;
name|widget
operator|.
name|unit
operator|->
name|addItems
argument_list|(
name|units
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|widget
operator|.
name|unit
argument_list|,
name|SIGNAL
argument_list|(
name|activated
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|unitChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|widget
operator|.
name|unit
operator|->
name|setCurrentIndex
argument_list|(
operator|(
name|QLocale
operator|::
name|system
argument_list|()
operator|.
name|measurementSystem
argument_list|()
operator|==
name|QLocale
operator|::
name|ImperialSystem
operator|)
condition|?
literal|2
else|:
literal|1
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|widget
operator|.
name|paperSize
argument_list|,
name|SIGNAL
argument_list|(
name|currentIndexChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_paperSizeChanged
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|widget
operator|.
name|paperWidth
argument_list|,
name|SIGNAL
argument_list|(
name|valueChanged
argument_list|(
name|double
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_paperSizeChanged
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|widget
operator|.
name|paperHeight
argument_list|,
name|SIGNAL
argument_list|(
name|valueChanged
argument_list|(
name|double
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_paperSizeChanged
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|widget
operator|.
name|leftMargin
argument_list|,
name|SIGNAL
argument_list|(
name|valueChanged
argument_list|(
name|double
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|setLeftMargin
argument_list|(
name|double
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|widget
operator|.
name|topMargin
argument_list|,
name|SIGNAL
argument_list|(
name|valueChanged
argument_list|(
name|double
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|setTopMargin
argument_list|(
name|double
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|widget
operator|.
name|rightMargin
argument_list|,
name|SIGNAL
argument_list|(
name|valueChanged
argument_list|(
name|double
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|setRightMargin
argument_list|(
name|double
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|widget
operator|.
name|bottomMargin
argument_list|,
name|SIGNAL
argument_list|(
name|valueChanged
argument_list|(
name|double
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|setBottomMargin
argument_list|(
name|double
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|widget
operator|.
name|portrait
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_pageOrientationChanged
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|widget
operator|.
name|landscape
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_pageOrientationChanged
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|widget
operator|.
name|pagesPerSheetCombo
argument_list|,
name|SIGNAL
argument_list|(
name|currentIndexChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_pagesPerSheetChanged
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|setPrinter
name|void
name|QPageSetupWidget
operator|::
name|setPrinter
parameter_list|(
name|QPrinter
modifier|*
name|printer
parameter_list|)
block|{
name|m_printer
operator|=
name|printer
expr_stmt|;
name|m_blockSignals
operator|=
literal|true
expr_stmt|;
name|selectPdfPsPrinter
argument_list|(
name|printer
argument_list|)
expr_stmt|;
name|printer
operator|->
name|getPageMargins
argument_list|(
operator|&
name|m_leftMargin
argument_list|,
operator|&
name|m_topMargin
argument_list|,
operator|&
name|m_rightMargin
argument_list|,
operator|&
name|m_bottomMargin
argument_list|,
name|QPrinter
operator|::
name|Point
argument_list|)
expr_stmt|;
name|unitChanged
argument_list|(
name|widget
operator|.
name|unit
operator|->
name|currentIndex
argument_list|()
argument_list|)
expr_stmt|;
name|m_pagePreview
operator|->
name|setMargins
argument_list|(
name|m_leftMargin
argument_list|,
name|m_topMargin
argument_list|,
name|m_rightMargin
argument_list|,
name|m_bottomMargin
argument_list|)
expr_stmt|;
name|m_paperSize
operator|=
name|printer
operator|->
name|paperSize
argument_list|(
name|QPrinter
operator|::
name|Point
argument_list|)
expr_stmt|;
name|widget
operator|.
name|paperWidth
operator|->
name|setValue
argument_list|(
name|m_paperSize
operator|.
name|width
argument_list|()
operator|/
name|m_currentMultiplier
argument_list|)
expr_stmt|;
name|widget
operator|.
name|paperHeight
operator|->
name|setValue
argument_list|(
name|m_paperSize
operator|.
name|height
argument_list|()
operator|/
name|m_currentMultiplier
argument_list|)
expr_stmt|;
name|widget
operator|.
name|landscape
operator|->
name|setChecked
argument_list|(
name|printer
operator|->
name|orientation
argument_list|()
operator|==
name|QPrinter
operator|::
name|Landscape
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|PSD_ENABLE_PAPERSOURCE
name|widget
operator|.
name|paperSource
operator|->
name|setCurrentItem
argument_list|(
name|printer
operator|->
name|paperSource
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|Q_ASSERT
argument_list|(
name|m_blockSignals
argument_list|)
expr_stmt|;
name|m_blockSignals
operator|=
literal|false
expr_stmt|;
name|_q_paperSizeChanged
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|// set gui data on printer
end_comment
begin_function
DECL|function|setupPrinter
name|void
name|QPageSetupWidget
operator|::
name|setupPrinter
parameter_list|()
specifier|const
block|{
name|QPrinter
operator|::
name|Orientation
name|orientation
init|=
name|widget
operator|.
name|portrait
operator|->
name|isChecked
argument_list|()
condition|?
name|QPrinter
operator|::
name|Portrait
else|:
name|QPrinter
operator|::
name|Landscape
decl_stmt|;
name|m_printer
operator|->
name|setOrientation
argument_list|(
name|orientation
argument_list|)
expr_stmt|;
comment|// paper format
name|QVariant
name|val
init|=
name|widget
operator|.
name|paperSize
operator|->
name|itemData
argument_list|(
name|widget
operator|.
name|paperSize
operator|->
name|currentIndex
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|ps
init|=
name|m_printer
operator|->
name|pageSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|val
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|Int
condition|)
block|{
name|ps
operator|=
name|val
operator|.
name|toInt
argument_list|()
expr_stmt|;
block|}
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_CUPS
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_LIBRARY
argument_list|)
elseif|else
if|if
condition|(
name|val
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|ByteArray
condition|)
block|{
for|for
control|(
name|int
name|papersize
init|=
literal|0
init|;
name|papersize
operator|<
name|QPrinter
operator|::
name|NPageSize
condition|;
operator|++
name|papersize
control|)
block|{
name|QPdf
operator|::
name|PaperSize
name|size
init|=
name|QPdf
operator|::
name|paperSize
argument_list|(
name|QPrinter
operator|::
name|PaperSize
argument_list|(
name|papersize
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|size
operator|.
name|width
operator|==
name|m_paperSize
operator|.
name|width
argument_list|()
operator|&&
name|size
operator|.
name|height
operator|==
name|m_paperSize
operator|.
name|height
argument_list|()
condition|)
block|{
name|ps
operator|=
cast|static_cast
argument_list|<
name|QPrinter
operator|::
name|PaperSize
argument_list|>
argument_list|(
name|papersize
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
endif|#
directive|endif
if|if
condition|(
name|ps
operator|==
name|QPrinter
operator|::
name|Custom
condition|)
block|{
name|m_printer
operator|->
name|setPaperSize
argument_list|(
name|sizeForOrientation
argument_list|(
name|orientation
argument_list|,
name|m_paperSize
argument_list|)
argument_list|,
name|QPrinter
operator|::
name|Point
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|m_printer
operator|->
name|setPaperSize
argument_list|(
cast|static_cast
argument_list|<
name|QPrinter
operator|::
name|PaperSize
argument_list|>
argument_list|(
name|ps
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|m_printer
operator|->
name|setPaperName
argument_list|(
name|widget
operator|.
name|paperSize
operator|->
name|currentText
argument_list|()
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|PSD_ENABLE_PAPERSOURCE
name|m_printer
operator|->
name|setPaperSource
argument_list|(
operator|(
name|QPrinter
operator|::
name|PaperSource
operator|)
name|widget
operator|.
name|paperSource
operator|->
name|currentIndex
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|m_printer
operator|->
name|setPageMargins
argument_list|(
name|m_leftMargin
argument_list|,
name|m_topMargin
argument_list|,
name|m_rightMargin
argument_list|,
name|m_bottomMargin
argument_list|,
name|QPrinter
operator|::
name|Point
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_CUPS
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_LIBRARY
argument_list|)
name|QCUPSSupport
operator|::
name|PagesPerSheet
name|pagesPerSheet
init|=
name|widget
operator|.
name|pagesPerSheetCombo
operator|->
name|currentData
argument_list|()
operator|.
name|value
argument_list|<
name|QCUPSSupport
operator|::
name|PagesPerSheet
argument_list|>
argument_list|()
decl_stmt|;
name|QCUPSSupport
operator|::
name|PagesPerSheetLayout
name|pagesPerSheetLayout
init|=
name|widget
operator|.
name|pagesPerSheetLayoutCombo
operator|->
name|currentData
argument_list|()
operator|.
name|value
argument_list|<
name|QCUPSSupport
operator|::
name|PagesPerSheetLayout
argument_list|>
argument_list|()
decl_stmt|;
name|QCUPSSupport
operator|::
name|setPagesPerSheetLayout
argument_list|(
name|m_printer
argument_list|,
name|pagesPerSheet
argument_list|,
name|pagesPerSheetLayout
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|selectPrinter
name|void
name|QPageSetupWidget
operator|::
name|selectPrinter
parameter_list|()
block|{
name|widget
operator|.
name|paperSize
operator|->
name|clear
argument_list|()
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_CUPS
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_LIBRARY
argument_list|)
if|if
condition|(
name|QCUPSSupport
operator|::
name|isAvailable
argument_list|()
condition|)
block|{
name|m_cups
operator|=
literal|true
expr_stmt|;
name|QCUPSSupport
name|cups
decl_stmt|;
name|cups
operator|.
name|setCurrentPrinter
argument_list|(
name|m_printer
operator|->
name|printerName
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|ppd_option_t
modifier|*
name|pageSizes
init|=
name|cups
operator|.
name|pageSizes
argument_list|()
decl_stmt|;
specifier|const
name|int
name|numChoices
init|=
name|pageSizes
condition|?
name|pageSizes
operator|->
name|num_choices
else|:
literal|0
decl_stmt|;
name|int
name|cupsDefaultSize
init|=
literal|0
decl_stmt|;
name|QSize
name|qtPreferredSize
init|=
name|m_printer
operator|->
name|paperSize
argument_list|(
name|QPrinter
operator|::
name|Point
argument_list|)
operator|.
name|toSize
argument_list|()
decl_stmt|;
name|QString
name|qtPaperName
init|=
name|m_printer
operator|->
name|paperName
argument_list|()
decl_stmt|;
name|bool
name|preferredSizeMatched
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numChoices
condition|;
operator|++
name|i
control|)
block|{
name|widget
operator|.
name|paperSize
operator|->
name|addItem
argument_list|(
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|pageSizes
operator|->
name|choices
index|[
name|i
index|]
operator|.
name|text
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
name|pageSizes
operator|->
name|choices
index|[
name|i
index|]
operator|.
name|choice
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|pageSizes
operator|->
name|choices
index|[
name|i
index|]
operator|.
name|marked
argument_list|)
operator|==
literal|1
condition|)
name|cupsDefaultSize
operator|=
name|i
expr_stmt|;
if|if
condition|(
name|qtPaperName
operator|==
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|pageSizes
operator|->
name|choices
index|[
name|i
index|]
operator|.
name|text
argument_list|)
condition|)
block|{
name|widget
operator|.
name|paperSize
operator|->
name|setCurrentIndex
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|preferredSizeMatched
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|QRect
name|cupsPaperSize
init|=
name|cups
operator|.
name|paperRect
argument_list|(
name|pageSizes
operator|->
name|choices
index|[
name|i
index|]
operator|.
name|choice
argument_list|)
decl_stmt|;
name|QSize
name|diff
init|=
name|cupsPaperSize
operator|.
name|size
argument_list|()
operator|-
name|qtPreferredSize
decl_stmt|;
if|if
condition|(
name|qAbs
argument_list|(
name|diff
operator|.
name|width
argument_list|()
argument_list|)
operator|<
literal|5
operator|&&
name|qAbs
argument_list|(
name|diff
operator|.
name|height
argument_list|()
argument_list|)
operator|<
literal|5
condition|)
block|{
name|widget
operator|.
name|paperSize
operator|->
name|setCurrentIndex
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|preferredSizeMatched
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|preferredSizeMatched
condition|)
name|widget
operator|.
name|paperSize
operator|->
name|setCurrentIndex
argument_list|(
name|cupsDefaultSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_printer
operator|->
name|d_func
argument_list|()
operator|->
name|hasCustomPageMargins
condition|)
block|{
name|m_printer
operator|->
name|getPageMargins
argument_list|(
operator|&
name|m_leftMargin
argument_list|,
operator|&
name|m_topMargin
argument_list|,
operator|&
name|m_rightMargin
argument_list|,
operator|&
name|m_bottomMargin
argument_list|,
name|QPrinter
operator|::
name|Point
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QByteArray
name|cupsPaperSizeChoice
init|=
name|widget
operator|.
name|paperSize
operator|->
name|itemData
argument_list|(
name|widget
operator|.
name|paperSize
operator|->
name|currentIndex
argument_list|()
argument_list|)
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|QRect
name|paper
init|=
name|cups
operator|.
name|paperRect
argument_list|(
name|cupsPaperSizeChoice
argument_list|)
decl_stmt|;
name|QRect
name|content
init|=
name|cups
operator|.
name|pageRect
argument_list|(
name|cupsPaperSizeChoice
argument_list|)
decl_stmt|;
name|m_leftMargin
operator|=
name|content
operator|.
name|x
argument_list|()
operator|-
name|paper
operator|.
name|x
argument_list|()
expr_stmt|;
name|m_topMargin
operator|=
name|content
operator|.
name|y
argument_list|()
operator|-
name|paper
operator|.
name|y
argument_list|()
expr_stmt|;
name|m_rightMargin
operator|=
name|paper
operator|.
name|right
argument_list|()
operator|-
name|content
operator|.
name|right
argument_list|()
expr_stmt|;
name|m_bottomMargin
operator|=
name|paper
operator|.
name|bottom
argument_list|()
operator|-
name|content
operator|.
name|bottom
argument_list|()
expr_stmt|;
block|}
block|}
else|else
name|m_cups
operator|=
literal|false
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|widget
operator|.
name|paperSize
operator|->
name|count
argument_list|()
operator|==
literal|0
condition|)
block|{
name|populatePaperSizes
argument_list|(
name|widget
operator|.
name|paperSize
argument_list|)
expr_stmt|;
name|widget
operator|.
name|paperSize
operator|->
name|setCurrentIndex
argument_list|(
name|widget
operator|.
name|paperSize
operator|->
name|findData
argument_list|(
name|QLocale
operator|::
name|system
argument_list|()
operator|.
name|measurementSystem
argument_list|()
operator|==
name|QLocale
operator|::
name|ImperialSystem
condition|?
name|QPrinter
operator|::
name|Letter
else|:
name|QPrinter
operator|::
name|A4
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|unitChanged
argument_list|(
name|widget
operator|.
name|unit
operator|->
name|currentIndex
argument_list|()
argument_list|)
expr_stmt|;
name|m_pagePreview
operator|->
name|setMargins
argument_list|(
name|m_leftMargin
argument_list|,
name|m_topMargin
argument_list|,
name|m_rightMargin
argument_list|,
name|m_bottomMargin
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|selectPdfPsPrinter
name|void
name|QPageSetupWidget
operator|::
name|selectPdfPsPrinter
parameter_list|(
specifier|const
name|QPrinter
modifier|*
name|p
parameter_list|)
block|{
name|m_cups
operator|=
literal|false
expr_stmt|;
name|widget
operator|.
name|paperSize
operator|->
name|clear
argument_list|()
expr_stmt|;
name|populatePaperSizes
argument_list|(
name|widget
operator|.
name|paperSize
argument_list|)
expr_stmt|;
name|widget
operator|.
name|paperSize
operator|->
name|setCurrentIndex
argument_list|(
name|widget
operator|.
name|paperSize
operator|->
name|findData
argument_list|(
name|p
operator|->
name|paperSize
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|unitChanged
argument_list|(
name|widget
operator|.
name|unit
operator|->
name|currentIndex
argument_list|()
argument_list|)
expr_stmt|;
name|m_pagePreview
operator|->
name|setMargins
argument_list|(
name|m_leftMargin
argument_list|,
name|m_topMargin
argument_list|,
name|m_rightMargin
argument_list|,
name|m_bottomMargin
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Updates size/preview after the combobox has been changed.
end_comment
begin_function
DECL|function|_q_paperSizeChanged
name|void
name|QPageSetupWidget
operator|::
name|_q_paperSizeChanged
parameter_list|()
block|{
name|QVariant
name|val
init|=
name|widget
operator|.
name|paperSize
operator|->
name|itemData
argument_list|(
name|widget
operator|.
name|paperSize
operator|->
name|currentIndex
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|index
init|=
name|m_printer
operator|->
name|pageSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|val
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|Int
condition|)
block|{
name|index
operator|=
name|val
operator|.
name|toInt
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|m_blockSignals
condition|)
return|return;
name|m_blockSignals
operator|=
literal|true
expr_stmt|;
name|QPrinter
operator|::
name|PaperSize
name|size
init|=
name|QPrinter
operator|::
name|PaperSize
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|QPrinter
operator|::
name|Orientation
name|orientation
init|=
name|widget
operator|.
name|portrait
operator|->
name|isChecked
argument_list|()
condition|?
name|QPrinter
operator|::
name|Portrait
else|:
name|QPrinter
operator|::
name|Landscape
decl_stmt|;
name|bool
name|custom
init|=
name|size
operator|==
name|QPrinter
operator|::
name|Custom
decl_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_CUPS
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_LIBRARY
argument_list|)
name|custom
operator|=
name|custom
operator|&&
name|m_cups
operator|&&
operator|(
name|m_printer
operator|->
name|paperName
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"Custom"
argument_list|)
operator|)
expr_stmt|;
endif|#
directive|endif
name|widget
operator|.
name|paperWidth
operator|->
name|setEnabled
argument_list|(
name|custom
argument_list|)
expr_stmt|;
name|widget
operator|.
name|paperHeight
operator|->
name|setEnabled
argument_list|(
name|custom
argument_list|)
expr_stmt|;
name|widget
operator|.
name|widthLabel
operator|->
name|setEnabled
argument_list|(
name|custom
argument_list|)
expr_stmt|;
name|widget
operator|.
name|heightLabel
operator|->
name|setEnabled
argument_list|(
name|custom
argument_list|)
expr_stmt|;
if|if
condition|(
name|custom
condition|)
block|{
name|m_paperSize
operator|.
name|setWidth
argument_list|(
name|widget
operator|.
name|paperWidth
operator|->
name|value
argument_list|()
operator|*
name|m_currentMultiplier
argument_list|)
expr_stmt|;
name|m_paperSize
operator|.
name|setHeight
argument_list|(
name|widget
operator|.
name|paperHeight
operator|->
name|value
argument_list|()
operator|*
name|m_currentMultiplier
argument_list|)
expr_stmt|;
name|m_pagePreview
operator|->
name|setPaperSize
argument_list|(
name|m_paperSize
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Q_ASSERT
argument_list|(
name|m_printer
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_CUPS
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_LIBRARY
argument_list|)
if|if
condition|(
name|m_cups
operator|&&
name|QCUPSSupport
operator|::
name|isAvailable
argument_list|()
condition|)
block|{
comment|// combobox is filled with cups based data
name|QCUPSSupport
name|cups
decl_stmt|;
name|QByteArray
name|cupsPageSize
init|=
name|widget
operator|.
name|paperSize
operator|->
name|itemData
argument_list|(
name|widget
operator|.
name|paperSize
operator|->
name|currentIndex
argument_list|()
argument_list|)
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|m_paperSize
operator|=
name|cups
operator|.
name|paperRect
argument_list|(
name|cupsPageSize
argument_list|)
operator|.
name|size
argument_list|()
expr_stmt|;
if|if
condition|(
name|orientation
operator|==
name|QPrinter
operator|::
name|Landscape
condition|)
name|m_paperSize
operator|=
name|QSizeF
argument_list|(
name|m_paperSize
operator|.
name|height
argument_list|()
argument_list|,
name|m_paperSize
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
comment|// swap
block|}
else|else
endif|#
directive|endif
name|m_paperSize
operator|=
name|qt_printerPaperSize
argument_list|(
name|orientation
argument_list|,
name|size
argument_list|,
name|QPrinter
operator|::
name|Point
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|m_pagePreview
operator|->
name|setPaperSize
argument_list|(
name|m_paperSize
argument_list|)
expr_stmt|;
name|widget
operator|.
name|paperWidth
operator|->
name|setValue
argument_list|(
name|m_paperSize
operator|.
name|width
argument_list|()
operator|/
name|m_currentMultiplier
argument_list|)
expr_stmt|;
name|widget
operator|.
name|paperHeight
operator|->
name|setValue
argument_list|(
name|m_paperSize
operator|.
name|height
argument_list|()
operator|/
name|m_currentMultiplier
argument_list|)
expr_stmt|;
block|}
name|m_blockSignals
operator|=
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|_q_pageOrientationChanged
name|void
name|QPageSetupWidget
operator|::
name|_q_pageOrientationChanged
parameter_list|()
block|{
if|if
condition|(
name|QPrinter
operator|::
name|PaperSize
argument_list|(
name|widget
operator|.
name|paperSize
operator|->
name|currentIndex
argument_list|()
argument_list|)
operator|==
name|QPrinter
operator|::
name|Custom
condition|)
block|{
name|double
name|tmp
init|=
name|widget
operator|.
name|paperWidth
operator|->
name|value
argument_list|()
decl_stmt|;
name|widget
operator|.
name|paperWidth
operator|->
name|setValue
argument_list|(
name|widget
operator|.
name|paperHeight
operator|->
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|widget
operator|.
name|paperHeight
operator|->
name|setValue
argument_list|(
name|tmp
argument_list|)
expr_stmt|;
block|}
name|_q_paperSizeChanged
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|_q_pagesPerSheetChanged
name|void
name|QPageSetupWidget
operator|::
name|_q_pagesPerSheetChanged
parameter_list|()
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_CUPS
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_LIBRARY
argument_list|)
name|QCUPSSupport
operator|::
name|PagesPerSheet
name|pagesPerSheet
init|=
name|widget
operator|.
name|pagesPerSheetCombo
operator|->
name|currentData
argument_list|()
operator|.
name|value
argument_list|<
name|QCUPSSupport
operator|::
name|PagesPerSheet
argument_list|>
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|pagesPerSheet
condition|)
block|{
case|case
name|QCUPSSupport
operator|::
name|TwoPagesPerSheet
case|:
name|m_pagePreview
operator|->
name|setPagePreviewLayout
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
break|break;
case|case
name|QCUPSSupport
operator|::
name|FourPagesPerSheet
case|:
name|m_pagePreview
operator|->
name|setPagePreviewLayout
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
break|break;
case|case
name|QCUPSSupport
operator|::
name|SixPagesPerSheet
case|:
name|m_pagePreview
operator|->
name|setPagePreviewLayout
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|)
expr_stmt|;
break|break;
case|case
name|QCUPSSupport
operator|::
name|NinePagesPerSheet
case|:
name|m_pagePreview
operator|->
name|setPagePreviewLayout
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|)
expr_stmt|;
break|break;
case|case
name|QCUPSSupport
operator|::
name|SixteenPagesPerSheet
case|:
name|m_pagePreview
operator|->
name|setPagePreviewLayout
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|)
expr_stmt|;
break|break;
case|case
name|QCUPSSupport
operator|::
name|OnePagePerSheet
case|:
default|default:
name|m_pagePreview
operator|->
name|setPagePreviewLayout
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
break|break;
block|}
endif|#
directive|endif
block|}
end_function
begin_function_decl
specifier|extern
name|double
name|qt_multiplierForUnit
parameter_list|(
name|QPrinter
operator|::
name|Unit
name|unit
parameter_list|,
name|int
name|resolution
parameter_list|)
function_decl|;
end_function_decl
begin_function
DECL|function|unitChanged
name|void
name|QPageSetupWidget
operator|::
name|unitChanged
parameter_list|(
name|int
name|item
parameter_list|)
block|{
name|QString
name|suffix
decl_stmt|;
switch|switch
condition|(
name|item
condition|)
block|{
case|case
literal|0
case|:
name|m_currentMultiplier
operator|=
literal|10
operator|*
name|qt_multiplierForUnit
argument_list|(
name|QPrinter
operator|::
name|Millimeter
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|suffix
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|" cm"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|m_currentMultiplier
operator|=
name|qt_multiplierForUnit
argument_list|(
name|QPrinter
operator|::
name|Inch
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|suffix
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|" in"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|m_currentMultiplier
operator|=
name|qt_multiplierForUnit
argument_list|(
name|QPrinter
operator|::
name|Point
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|suffix
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|" pt"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
default|default:
name|m_currentMultiplier
operator|=
name|qt_multiplierForUnit
argument_list|(
name|QPrinter
operator|::
name|Millimeter
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|suffix
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|" mm"
argument_list|)
expr_stmt|;
break|break;
block|}
specifier|const
name|bool
name|old
init|=
name|m_blockSignals
decl_stmt|;
name|m_blockSignals
operator|=
literal|true
expr_stmt|;
name|widget
operator|.
name|topMargin
operator|->
name|setSuffix
argument_list|(
name|suffix
argument_list|)
expr_stmt|;
name|widget
operator|.
name|leftMargin
operator|->
name|setSuffix
argument_list|(
name|suffix
argument_list|)
expr_stmt|;
name|widget
operator|.
name|rightMargin
operator|->
name|setSuffix
argument_list|(
name|suffix
argument_list|)
expr_stmt|;
name|widget
operator|.
name|bottomMargin
operator|->
name|setSuffix
argument_list|(
name|suffix
argument_list|)
expr_stmt|;
name|widget
operator|.
name|paperWidth
operator|->
name|setSuffix
argument_list|(
name|suffix
argument_list|)
expr_stmt|;
name|widget
operator|.
name|paperHeight
operator|->
name|setSuffix
argument_list|(
name|suffix
argument_list|)
expr_stmt|;
name|widget
operator|.
name|topMargin
operator|->
name|setValue
argument_list|(
name|m_topMargin
operator|/
name|m_currentMultiplier
argument_list|)
expr_stmt|;
name|widget
operator|.
name|leftMargin
operator|->
name|setValue
argument_list|(
name|m_leftMargin
operator|/
name|m_currentMultiplier
argument_list|)
expr_stmt|;
name|widget
operator|.
name|rightMargin
operator|->
name|setValue
argument_list|(
name|m_rightMargin
operator|/
name|m_currentMultiplier
argument_list|)
expr_stmt|;
name|widget
operator|.
name|bottomMargin
operator|->
name|setValue
argument_list|(
name|m_bottomMargin
operator|/
name|m_currentMultiplier
argument_list|)
expr_stmt|;
name|widget
operator|.
name|paperWidth
operator|->
name|setValue
argument_list|(
name|m_paperSize
operator|.
name|width
argument_list|()
operator|/
name|m_currentMultiplier
argument_list|)
expr_stmt|;
name|widget
operator|.
name|paperHeight
operator|->
name|setValue
argument_list|(
name|m_paperSize
operator|.
name|height
argument_list|()
operator|/
name|m_currentMultiplier
argument_list|)
expr_stmt|;
name|m_blockSignals
operator|=
name|old
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setTopMargin
name|void
name|QPageSetupWidget
operator|::
name|setTopMargin
parameter_list|(
name|double
name|newValue
parameter_list|)
block|{
if|if
condition|(
name|m_blockSignals
condition|)
return|return;
name|m_topMargin
operator|=
name|newValue
operator|*
name|m_currentMultiplier
expr_stmt|;
name|m_pagePreview
operator|->
name|setMargins
argument_list|(
name|m_leftMargin
argument_list|,
name|m_topMargin
argument_list|,
name|m_rightMargin
argument_list|,
name|m_bottomMargin
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setBottomMargin
name|void
name|QPageSetupWidget
operator|::
name|setBottomMargin
parameter_list|(
name|double
name|newValue
parameter_list|)
block|{
if|if
condition|(
name|m_blockSignals
condition|)
return|return;
name|m_bottomMargin
operator|=
name|newValue
operator|*
name|m_currentMultiplier
expr_stmt|;
name|m_pagePreview
operator|->
name|setMargins
argument_list|(
name|m_leftMargin
argument_list|,
name|m_topMargin
argument_list|,
name|m_rightMargin
argument_list|,
name|m_bottomMargin
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setLeftMargin
name|void
name|QPageSetupWidget
operator|::
name|setLeftMargin
parameter_list|(
name|double
name|newValue
parameter_list|)
block|{
if|if
condition|(
name|m_blockSignals
condition|)
return|return;
name|m_leftMargin
operator|=
name|newValue
operator|*
name|m_currentMultiplier
expr_stmt|;
name|m_pagePreview
operator|->
name|setMargins
argument_list|(
name|m_leftMargin
argument_list|,
name|m_topMargin
argument_list|,
name|m_rightMargin
argument_list|,
name|m_bottomMargin
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setRightMargin
name|void
name|QPageSetupWidget
operator|::
name|setRightMargin
parameter_list|(
name|double
name|newValue
parameter_list|)
block|{
if|if
condition|(
name|m_blockSignals
condition|)
return|return;
name|m_rightMargin
operator|=
name|newValue
operator|*
name|m_currentMultiplier
expr_stmt|;
name|m_pagePreview
operator|->
name|setMargins
argument_list|(
name|m_leftMargin
argument_list|,
name|m_topMargin
argument_list|,
name|m_rightMargin
argument_list|,
name|m_bottomMargin
argument_list|)
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|QPageSetupDialog
name|QPageSetupDialog
operator|::
name|QPageSetupDialog
parameter_list|(
name|QPrinter
modifier|*
name|printer
parameter_list|,
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QDialog
argument_list|(
operator|*
operator|(
operator|new
name|QUnixPageSetupDialogPrivate
argument_list|(
name|printer
argument_list|)
operator|)
argument_list|,
name|parent
argument_list|)
block|{
name|Q_D
argument_list|(
name|QPageSetupDialog
argument_list|)
expr_stmt|;
name|setWindowTitle
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPrintPreviewDialog"
argument_list|,
literal|"Page Setup"
argument_list|)
argument_list|)
expr_stmt|;
cast|static_cast
argument_list|<
name|QUnixPageSetupDialogPrivate
operator|*
argument_list|>
argument_list|(
name|d
argument_list|)
operator|->
name|init
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_constructor
DECL|function|QPageSetupDialog
name|QPageSetupDialog
operator|::
name|QPageSetupDialog
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QDialog
argument_list|(
operator|*
operator|(
operator|new
name|QUnixPageSetupDialogPrivate
argument_list|(
literal|0
argument_list|)
operator|)
argument_list|,
name|parent
argument_list|)
block|{
name|Q_D
argument_list|(
name|QPageSetupDialog
argument_list|)
expr_stmt|;
name|setWindowTitle
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPrintPreviewDialog"
argument_list|,
literal|"Page Setup"
argument_list|)
argument_list|)
expr_stmt|;
cast|static_cast
argument_list|<
name|QUnixPageSetupDialogPrivate
operator|*
argument_list|>
argument_list|(
name|d
argument_list|)
operator|->
name|init
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|exec
name|int
name|QPageSetupDialog
operator|::
name|exec
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QPageSetupDialog
argument_list|)
expr_stmt|;
name|int
name|ret
init|=
name|QDialog
operator|::
name|exec
argument_list|()
decl_stmt|;
if|if
condition|(
name|ret
operator|==
name|Accepted
condition|)
cast|static_cast
argument_list|<
name|QUnixPageSetupDialogPrivate
operator|*
argument_list|>
argument_list|(
name|d
argument_list|)
operator|->
name|widget
operator|->
name|setupPrinter
argument_list|()
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|initPagesPerSheet
name|void
name|QPageSetupWidget
operator|::
name|initPagesPerSheet
parameter_list|()
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_CUPS
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_LIBRARY
argument_list|)
name|widget
operator|.
name|pagesPerSheetLayoutCombo
operator|->
name|addItem
argument_list|(
name|QPrintDialog
operator|::
name|tr
argument_list|(
literal|"Left to Right, Top to Bottom"
argument_list|)
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QCUPSSupport
operator|::
name|LeftToRightTopToBottom
argument_list|)
argument_list|)
expr_stmt|;
name|widget
operator|.
name|pagesPerSheetLayoutCombo
operator|->
name|addItem
argument_list|(
name|QPrintDialog
operator|::
name|tr
argument_list|(
literal|"Left to Right, Bottom to Top"
argument_list|)
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QCUPSSupport
operator|::
name|LeftToRightBottomToTop
argument_list|)
argument_list|)
expr_stmt|;
name|widget
operator|.
name|pagesPerSheetLayoutCombo
operator|->
name|addItem
argument_list|(
name|QPrintDialog
operator|::
name|tr
argument_list|(
literal|"Right to Left, Bottom to Top"
argument_list|)
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QCUPSSupport
operator|::
name|RightToLeftBottomToTop
argument_list|)
argument_list|)
expr_stmt|;
name|widget
operator|.
name|pagesPerSheetLayoutCombo
operator|->
name|addItem
argument_list|(
name|QPrintDialog
operator|::
name|tr
argument_list|(
literal|"Right to Left, Top to Bottom"
argument_list|)
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QCUPSSupport
operator|::
name|RightToLeftTopToBottom
argument_list|)
argument_list|)
expr_stmt|;
name|widget
operator|.
name|pagesPerSheetLayoutCombo
operator|->
name|addItem
argument_list|(
name|QPrintDialog
operator|::
name|tr
argument_list|(
literal|"Bottom to Top, Left to Right"
argument_list|)
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QCUPSSupport
operator|::
name|BottomToTopLeftToRight
argument_list|)
argument_list|)
expr_stmt|;
name|widget
operator|.
name|pagesPerSheetLayoutCombo
operator|->
name|addItem
argument_list|(
name|QPrintDialog
operator|::
name|tr
argument_list|(
literal|"Bottom to Top, Right to Left"
argument_list|)
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QCUPSSupport
operator|::
name|BottomToTopRightToLeft
argument_list|)
argument_list|)
expr_stmt|;
name|widget
operator|.
name|pagesPerSheetLayoutCombo
operator|->
name|addItem
argument_list|(
name|QPrintDialog
operator|::
name|tr
argument_list|(
literal|"Top to Bottom, Left to Right"
argument_list|)
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QCUPSSupport
operator|::
name|TopToBottomLeftToRight
argument_list|)
argument_list|)
expr_stmt|;
name|widget
operator|.
name|pagesPerSheetLayoutCombo
operator|->
name|addItem
argument_list|(
name|QPrintDialog
operator|::
name|tr
argument_list|(
literal|"Top to Bottom, Right to Left"
argument_list|)
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QCUPSSupport
operator|::
name|TopToBottomRightToLeft
argument_list|)
argument_list|)
expr_stmt|;
name|widget
operator|.
name|pagesPerSheetCombo
operator|->
name|addItem
argument_list|(
name|QPrintDialog
operator|::
name|tr
argument_list|(
literal|"1 (1x1)"
argument_list|)
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QCUPSSupport
operator|::
name|OnePagePerSheet
argument_list|)
argument_list|)
expr_stmt|;
name|widget
operator|.
name|pagesPerSheetCombo
operator|->
name|addItem
argument_list|(
name|QPrintDialog
operator|::
name|tr
argument_list|(
literal|"2 (2x1)"
argument_list|)
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QCUPSSupport
operator|::
name|TwoPagesPerSheet
argument_list|)
argument_list|)
expr_stmt|;
name|widget
operator|.
name|pagesPerSheetCombo
operator|->
name|addItem
argument_list|(
name|QPrintDialog
operator|::
name|tr
argument_list|(
literal|"4 (2x2)"
argument_list|)
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QCUPSSupport
operator|::
name|FourPagesPerSheet
argument_list|)
argument_list|)
expr_stmt|;
name|widget
operator|.
name|pagesPerSheetCombo
operator|->
name|addItem
argument_list|(
name|QPrintDialog
operator|::
name|tr
argument_list|(
literal|"6 (2x3)"
argument_list|)
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QCUPSSupport
operator|::
name|SixPagesPerSheet
argument_list|)
argument_list|)
expr_stmt|;
name|widget
operator|.
name|pagesPerSheetCombo
operator|->
name|addItem
argument_list|(
name|QPrintDialog
operator|::
name|tr
argument_list|(
literal|"9 (3x3)"
argument_list|)
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QCUPSSupport
operator|::
name|NinePagesPerSheet
argument_list|)
argument_list|)
expr_stmt|;
name|widget
operator|.
name|pagesPerSheetCombo
operator|->
name|addItem
argument_list|(
name|QPrintDialog
operator|::
name|tr
argument_list|(
literal|"16 (4x4)"
argument_list|)
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QCUPSSupport
operator|::
name|SixteenPagesPerSheet
argument_list|)
argument_list|)
expr_stmt|;
comment|// Set the combo to "1 (1x1)" -- QCUPSSupport::OnePagePerSheet
name|widget
operator|.
name|pagesPerSheetCombo
operator|->
name|setCurrentIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Set the layout combo to QCUPSSupport::LeftToRightTopToBottom
name|widget
operator|.
name|pagesPerSheetLayoutCombo
operator|->
name|setCurrentIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
else|#
directive|else
comment|// Disable if CUPS wasn't found
name|widget
operator|.
name|pagesPerSheetButtonGroup
operator|->
name|hide
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_include
include|#
directive|include
file|"moc_qpagesetupdialog.cpp"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_PRINTDIALOG
end_comment
end_unit
