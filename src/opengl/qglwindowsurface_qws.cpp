begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtOpenGL module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtGui/QPaintDevice>
end_include
begin_include
include|#
directive|include
file|<QtGui/QWidget>
end_include
begin_include
include|#
directive|include
file|<QtOpenGL/QGLWidget>
end_include
begin_include
include|#
directive|include
file|"private/qglwindowsurface_qws_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qpaintengine_opengl_p.h"
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_comment
comment|/*!     \class QWSGLWindowSurface     \since 4.3     \ingroup qws     \preliminary      \brief The QWSGLWindowSurface class provides the drawing area for top-level     windows with Qt for Embedded Linux on EGL/OpenGL ES. It also provides the     drawing area for \l{QGLWidget}s whether they are top-level windows or     children of another QWidget.      Note that this class is only available in Qt for Embedded Linux and only     available if Qt is configured with OpenGL support. */
end_comment
begin_class
DECL|class|QWSGLWindowSurfacePrivate
class|class
name|QWSGLWindowSurfacePrivate
block|{
public|public:
DECL|function|QWSGLWindowSurfacePrivate
name|QWSGLWindowSurfacePrivate
parameter_list|()
member_init_list|:
name|qglContext
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|ownsContext
argument_list|(
literal|false
argument_list|)
block|{}
DECL|member|qglContext
name|QGLContext
modifier|*
name|qglContext
decl_stmt|;
DECL|member|ownsContext
name|bool
name|ownsContext
decl_stmt|;
block|}
class|;
end_class
begin_comment
comment|/*!     Constructs an empty QWSGLWindowSurface for the given top-level \a window.     The window surface is later initialized from chooseContext() and resources for it     is typically allocated in setGeometry(). */
end_comment
begin_constructor
DECL|function|QWSGLWindowSurface
name|QWSGLWindowSurface
operator|::
name|QWSGLWindowSurface
parameter_list|(
name|QWidget
modifier|*
name|window
parameter_list|)
member_init_list|:
name|QWSWindowSurface
argument_list|(
name|window
argument_list|)
member_init_list|,
name|d_ptr
argument_list|(
operator|new
name|QWSGLWindowSurfacePrivate
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Constructs an empty QWSGLWindowSurface. */
end_comment
begin_constructor
DECL|function|QWSGLWindowSurface
name|QWSGLWindowSurface
operator|::
name|QWSGLWindowSurface
parameter_list|()
member_init_list|:
name|d_ptr
argument_list|(
operator|new
name|QWSGLWindowSurfacePrivate
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Destroys the QWSGLWindowSurface object and frees any     allocated resources.  */
end_comment
begin_destructor
DECL|function|~QWSGLWindowSurface
name|QWSGLWindowSurface
operator|::
name|~
name|QWSGLWindowSurface
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QWSGLWindowSurface
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|ownsContext
condition|)
operator|delete
name|d
operator|->
name|qglContext
expr_stmt|;
operator|delete
name|d
expr_stmt|;
block|}
end_destructor
begin_comment
comment|/*!     Returns the QGLContext of the window surface. */
end_comment
begin_function
DECL|function|context
name|QGLContext
modifier|*
name|QWSGLWindowSurface
operator|::
name|context
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWSGLWindowSurface
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|qglContext
condition|)
block|{
name|QWSGLWindowSurface
modifier|*
name|that
init|=
cast|const_cast
argument_list|<
name|QWSGLWindowSurface
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|that
operator|->
name|setContext
argument_list|(
operator|new
name|QGLContext
argument_list|(
name|QGLFormat
operator|::
name|defaultFormat
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|that
operator|->
name|d_func
argument_list|()
operator|->
name|ownsContext
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|d
operator|->
name|qglContext
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the QGLContext for this window surface to \a context. */
end_comment
begin_function
DECL|function|setContext
name|void
name|QWSGLWindowSurface
operator|::
name|setContext
parameter_list|(
name|QGLContext
modifier|*
name|context
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWSGLWindowSurface
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|ownsContext
condition|)
block|{
operator|delete
name|d
operator|->
name|qglContext
expr_stmt|;
name|d
operator|->
name|ownsContext
operator|=
literal|false
expr_stmt|;
block|}
name|d
operator|->
name|qglContext
operator|=
name|context
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
