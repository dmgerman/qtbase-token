begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtOpenGL module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QPIXMAPDATA_GL_P_H
end_ifndef
begin_define
DECL|macro|QPIXMAPDATA_GL_P_H
define|#
directive|define
name|QPIXMAPDATA_GL_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists purely as an
end_comment
begin_comment
comment|// implementation detail.  This header file may change from version to
end_comment
begin_comment
comment|// version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"qgl_p.h"
end_include
begin_include
include|#
directive|include
file|"qgl.h"
end_include
begin_include
include|#
directive|include
file|"private/qpixmapdata_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qglpaintdevice_p.h"
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_SYMBIAN
end_ifdef
begin_include
include|#
directive|include
file|"private/qvolatileimage_p.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QPaintEngine
name|class
name|QPaintEngine
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QGLFramebufferObject
name|class
name|QGLFramebufferObject
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QGLFramebufferObjectFormat
name|class
name|QGLFramebufferObjectFormat
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QGLPixmapData
name|class
name|QGLPixmapData
decl_stmt|;
end_decl_stmt
begin_ifdef
ifdef|#
directive|ifdef
name|QGL_USE_TEXTURE_POOL
end_ifdef
begin_function_decl
name|void
name|qt_gl_register_pixmap
parameter_list|(
name|QGLPixmapData
modifier|*
name|pd
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|qt_gl_unregister_pixmap
parameter_list|(
name|QGLPixmapData
modifier|*
name|pd
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|qt_gl_hibernate_pixmaps
parameter_list|()
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_SYMBIAN
end_ifdef
begin_decl_stmt
DECL|variable|QNativeImageHandleProvider
name|class
name|QNativeImageHandleProvider
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|class
name|QGLFramebufferObjectPool
block|{
name|public
label|:
name|QGLFramebufferObject
modifier|*
name|acquire
parameter_list|(
specifier|const
name|QSize
modifier|&
name|size
parameter_list|,
specifier|const
name|QGLFramebufferObjectFormat
modifier|&
name|format
parameter_list|,
name|bool
name|strictSize
init|=
name|false
parameter_list|)
function_decl|;
name|void
name|release
parameter_list|(
name|QGLFramebufferObject
modifier|*
name|fbo
parameter_list|)
function_decl|;
name|private
label|:
name|QList
operator|<
name|QGLFramebufferObject
operator|*
operator|>
name|m_fbos
expr_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_function_decl
name|QGLFramebufferObjectPool
modifier|*
name|qgl_fbo_pool
parameter_list|()
function_decl|;
end_function_decl
begin_decl_stmt
name|class
name|QGLPixmapGLPaintDevice
range|:
name|public
name|QGLPaintDevice
block|{
name|public
operator|:
name|QPaintEngine
operator|*
name|paintEngine
argument_list|()
specifier|const
block|;
name|void
name|beginPaint
argument_list|()
block|;
name|void
name|endPaint
argument_list|()
block|;
name|QGLContext
operator|*
name|context
argument_list|()
specifier|const
block|;
name|QSize
name|size
argument_list|()
specifier|const
block|;
name|bool
name|alphaRequested
argument_list|()
specifier|const
block|;
name|void
name|setPixmapData
argument_list|(
name|QGLPixmapData
operator|*
argument_list|)
block|;
name|private
operator|:
name|QGLPixmapData
operator|*
name|data
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_OPENGL_EXPORT
name|QGLPixmapData
range|:
name|public
name|QPixmapData
block|{
name|public
operator|:
name|QGLPixmapData
argument_list|(
argument|PixelType type
argument_list|)
block|;
operator|~
name|QGLPixmapData
argument_list|()
block|;
name|QPixmapData
operator|*
name|createCompatiblePixmapData
argument_list|()
specifier|const
block|;
comment|// Re-implemented from QPixmapData:
name|void
name|resize
argument_list|(
argument|int width
argument_list|,
argument|int height
argument_list|)
block|;
name|void
name|fromImage
argument_list|(
argument|const QImage&image
argument_list|,
argument|Qt::ImageConversionFlags flags
argument_list|)
block|;
name|void
name|fromImageReader
argument_list|(
argument|QImageReader *imageReader
argument_list|,
argument|Qt::ImageConversionFlags flags
argument_list|)
block|;
name|bool
name|fromFile
argument_list|(
argument|const QString&filename
argument_list|,
argument|const char *format
argument_list|,
argument|Qt::ImageConversionFlags flags
argument_list|)
block|;
name|bool
name|fromData
argument_list|(
argument|const uchar *buffer
argument_list|,
argument|uint len
argument_list|,
argument|const char *format
argument_list|,
argument|Qt::ImageConversionFlags flags
argument_list|)
block|;
name|void
name|copy
argument_list|(
specifier|const
name|QPixmapData
operator|*
name|data
argument_list|,
specifier|const
name|QRect
operator|&
name|rect
argument_list|)
block|;
name|bool
name|scroll
argument_list|(
argument|int dx
argument_list|,
argument|int dy
argument_list|,
argument|const QRect&rect
argument_list|)
block|;
name|void
name|fill
argument_list|(
specifier|const
name|QColor
operator|&
name|color
argument_list|)
block|;
name|bool
name|hasAlphaChannel
argument_list|()
specifier|const
block|;
name|QImage
name|toImage
argument_list|()
specifier|const
block|;
name|QPaintEngine
operator|*
name|paintEngine
argument_list|()
specifier|const
block|;
name|int
name|metric
argument_list|(
argument|QPaintDevice::PaintDeviceMetric metric
argument_list|)
specifier|const
block|;
comment|// For accessing as a target:
name|QGLPaintDevice
operator|*
name|glDevice
argument_list|()
specifier|const
block|;
comment|// For accessing as a source:
name|bool
name|isValidContext
argument_list|(
argument|const QGLContext *ctx
argument_list|)
specifier|const
block|;
name|GLuint
name|bind
argument_list|(
argument|bool copyBack = true
argument_list|)
specifier|const
block|;
name|QGLTexture
operator|*
name|texture
argument_list|()
specifier|const
block|;
ifdef|#
directive|ifdef
name|QGL_USE_TEXTURE_POOL
name|void
name|destroyTexture
argument_list|()
block|;
comment|// Detach this image from the image pool.
name|void
name|detachTextureFromPool
argument_list|()
block|;
comment|// Release the GL resources associated with this pixmap and copy
comment|// the pixmap's contents out of the GPU back into main memory.
comment|// The GL resource will be automatically recreated the next time
comment|// ensureCreated() is called.  Does nothing if the pixmap cannot be
comment|// hibernated for some reason (e.g. texture is shared with another
comment|// process via a SgImage).
name|void
name|hibernate
argument_list|()
block|;
comment|// Called when the QGLTexturePool wants to reclaim this pixmap's
comment|// texture objects to reuse storage.
name|void
name|reclaimTexture
argument_list|()
block|;
name|void
name|forceToImage
argument_list|()
block|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|Q_OS_SYMBIAN
name|QImage
operator|::
name|Format
name|idealFormat
argument_list|(
argument|QImage&image
argument_list|,
argument|Qt::ImageConversionFlags flags
argument_list|)
block|;
name|void
operator|*
name|toNativeType
argument_list|(
argument|NativeType type
argument_list|)
block|;
name|void
name|fromNativeType
argument_list|(
argument|void* pixmap
argument_list|,
argument|NativeType type
argument_list|)
block|;
name|bool
name|initFromNativeImageHandle
argument_list|(
name|void
operator|*
name|handle
argument_list|,
specifier|const
name|QString
operator|&
name|type
argument_list|)
block|;
name|void
name|createFromNativeImageHandleProvider
argument_list|()
block|;
name|void
name|releaseNativeImageHandle
argument_list|()
block|;
endif|#
directive|endif
name|private
operator|:
name|bool
name|isValid
argument_list|()
specifier|const
block|;
name|void
name|ensureCreated
argument_list|()
specifier|const
block|;
name|bool
name|isUninitialized
argument_list|()
specifier|const
block|{
return|return
name|m_dirty
operator|&&
name|m_source
operator|.
name|isNull
argument_list|()
return|;
block|}
name|bool
name|needsFill
argument_list|()
specifier|const
block|{
return|return
name|m_hasFillColor
return|;
block|}
name|QColor
name|fillColor
argument_list|()
specifier|const
block|{
return|return
name|m_fillColor
return|;
block|}
name|QGLPixmapData
argument_list|(
specifier|const
name|QGLPixmapData
operator|&
name|other
argument_list|)
block|;
name|QGLPixmapData
operator|&
name|operator
operator|=
operator|(
specifier|const
name|QGLPixmapData
operator|&
name|other
operator|)
block|;
name|void
name|copyBackFromRenderFbo
argument_list|(
argument|bool keepCurrentFboBound
argument_list|)
specifier|const
block|;
name|QSize
name|size
argument_list|()
specifier|const
block|{
return|return
name|QSize
argument_list|(
name|w
argument_list|,
name|h
argument_list|)
return|;
block|}
name|bool
name|useFramebufferObjects
argument_list|()
specifier|const
block|;
name|QImage
name|fillImage
argument_list|(
argument|const QColor&color
argument_list|)
specifier|const
block|;
name|void
name|createPixmapForImage
argument_list|(
argument|QImage&image
argument_list|,
argument|Qt::ImageConversionFlags flags
argument_list|,
argument|bool inPlace
argument_list|)
block|;
name|mutable
name|QGLFramebufferObject
operator|*
name|m_renderFbo
block|;
name|mutable
name|QPaintEngine
operator|*
name|m_engine
block|;
name|mutable
name|QGLContext
operator|*
name|m_ctx
block|;
ifdef|#
directive|ifdef
name|Q_OS_SYMBIAN
name|mutable
name|QVolatileImage
name|m_source
block|;
name|mutable
name|QNativeImageHandleProvider
operator|*
name|nativeImageHandleProvider
block|;
name|void
operator|*
name|nativeImageHandle
block|;
name|QString
name|nativeImageType
block|;
else|#
directive|else
name|mutable
name|QImage
name|m_source
block|;
endif|#
directive|endif
name|mutable
name|QGLTexture
name|m_texture
block|;
comment|// the texture is not in sync with the source image
name|mutable
name|bool
name|m_dirty
block|;
comment|// fill has been called and no painting has been done, so the pixmap is
comment|// represented by a single fill color
name|mutable
name|QColor
name|m_fillColor
block|;
name|mutable
name|bool
name|m_hasFillColor
block|;
name|mutable
name|bool
name|m_hasAlpha
block|;
name|mutable
name|QGLPixmapGLPaintDevice
name|m_glDevice
block|;
ifdef|#
directive|ifdef
name|QGL_USE_TEXTURE_POOL
name|QGLPixmapData
operator|*
name|nextLRU
block|;
name|QGLPixmapData
operator|*
name|prevLRU
block|;
name|mutable
name|bool
name|inLRU
block|;
name|mutable
name|bool
name|failedToAlloc
block|;
name|mutable
name|bool
name|inTexturePool
block|;
name|QGLPixmapData
operator|*
name|next
block|;
name|QGLPixmapData
operator|*
name|prev
block|;
name|friend
name|class
name|QGLTexturePool
block|;
name|friend
name|void
name|qt_gl_register_pixmap
argument_list|(
name|QGLPixmapData
operator|*
name|pd
argument_list|)
block|;
name|friend
name|void
name|qt_gl_unregister_pixmap
argument_list|(
name|QGLPixmapData
operator|*
name|pd
argument_list|)
block|;
name|friend
name|void
name|qt_gl_hibernate_pixmaps
argument_list|()
block|;
endif|#
directive|endif
name|friend
name|class
name|QGLPixmapGLPaintDevice
block|;
name|friend
name|class
name|QMeeGoPixmapData
block|;
name|friend
name|class
name|QMeeGoLivePixmapData
block|; }
decl_stmt|;
end_decl_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QPIXMAPDATA_GL_P_H
end_comment
end_unit
