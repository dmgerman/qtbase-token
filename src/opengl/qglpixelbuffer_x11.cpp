begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtOpenGL module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<qlibrary.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<private/qgl_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qt_x11_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qpaintengine_opengl_p.h>
end_include
begin_include
include|#
directive|include
file|<qx11info_x11.h>
end_include
begin_include
include|#
directive|include
file|<GL/glx.h>
end_include
begin_include
include|#
directive|include
file|<qimage.h>
end_include
begin_include
include|#
directive|include
file|"qglpixelbuffer.h"
end_include
begin_include
include|#
directive|include
file|"qglpixelbuffer_p.h"
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_LINUX
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_OS_BSD4
argument_list|)
end_if
begin_include
include|#
directive|include
file|<dlfcn.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_ifndef
ifndef|#
directive|ifndef
name|GLX_VERSION_1_3
end_ifndef
begin_define
DECL|macro|GLX_RGBA_BIT
define|#
directive|define
name|GLX_RGBA_BIT
value|0x00000002
end_define
begin_define
DECL|macro|GLX_PBUFFER_BIT
define|#
directive|define
name|GLX_PBUFFER_BIT
value|0x00000004
end_define
begin_define
DECL|macro|GLX_DRAWABLE_TYPE
define|#
directive|define
name|GLX_DRAWABLE_TYPE
value|0x8010
end_define
begin_define
DECL|macro|GLX_RENDER_TYPE
define|#
directive|define
name|GLX_RENDER_TYPE
value|0x8011
end_define
begin_define
DECL|macro|GLX_RGBA_TYPE
define|#
directive|define
name|GLX_RGBA_TYPE
value|0x8014
end_define
begin_define
DECL|macro|GLX_PBUFFER_HEIGHT
define|#
directive|define
name|GLX_PBUFFER_HEIGHT
value|0x8040
end_define
begin_define
DECL|macro|GLX_PBUFFER_WIDTH
define|#
directive|define
name|GLX_PBUFFER_WIDTH
value|0x8041
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|GLX_ARB_multisample
end_ifndef
begin_define
DECL|macro|GLX_SAMPLE_BUFFERS_ARB
define|#
directive|define
name|GLX_SAMPLE_BUFFERS_ARB
value|100000
end_define
begin_define
DECL|macro|GLX_SAMPLES_ARB
define|#
directive|define
name|GLX_SAMPLES_ARB
value|100001
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_typedef
DECL|typedef|_glXChooseFBConfig
typedef|typedef
name|GLXFBConfig
modifier|*
function_decl|(
modifier|*
name|_glXChooseFBConfig
function_decl|)
parameter_list|(
name|Display
modifier|*
name|dpy
parameter_list|,
name|int
name|screen
parameter_list|,
specifier|const
name|int
modifier|*
name|attrib_list
parameter_list|,
name|int
modifier|*
name|nelements
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|_glXGetFBConfigAttrib
typedef|typedef
name|int
function_decl|(
modifier|*
name|_glXGetFBConfigAttrib
function_decl|)
parameter_list|(
name|Display
modifier|*
name|dpy
parameter_list|,
name|GLXFBConfig
name|config
parameter_list|,
name|int
name|attribute
parameter_list|,
name|int
modifier|*
name|value
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|_glXCreatePbuffer
typedef|typedef
name|GLXPbuffer
function_decl|(
modifier|*
name|_glXCreatePbuffer
function_decl|)
parameter_list|(
name|Display
modifier|*
name|dpy
parameter_list|,
name|GLXFBConfig
name|config
parameter_list|,
specifier|const
name|int
modifier|*
name|attrib_list
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|_glXDestroyPbuffer
typedef|typedef
name|void
function_decl|(
modifier|*
name|_glXDestroyPbuffer
function_decl|)
parameter_list|(
name|Display
modifier|*
name|dpy
parameter_list|,
name|GLXPbuffer
name|pbuf
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|_glXCreateNewContext
typedef|typedef
name|GLXContext
function_decl|(
modifier|*
name|_glXCreateNewContext
function_decl|)
parameter_list|(
name|Display
modifier|*
name|dpy
parameter_list|,
name|GLXFBConfig
name|config
parameter_list|,
name|int
name|render_type
parameter_list|,
name|GLXContext
name|share_list
parameter_list|,
name|Bool
name|direct
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|_glXMakeContextCurrent
typedef|typedef
name|Bool
function_decl|(
modifier|*
name|_glXMakeContextCurrent
function_decl|)
parameter_list|(
name|Display
modifier|*
name|dpy
parameter_list|,
name|GLXDrawable
name|draw
parameter_list|,
name|GLXDrawable
name|read
parameter_list|,
name|GLXContext
name|ctx
parameter_list|)
function_decl|;
end_typedef
begin_decl_stmt
DECL|variable|qt_glXChooseFBConfig
specifier|static
name|_glXChooseFBConfig
name|qt_glXChooseFBConfig
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qt_glXCreateNewContext
specifier|static
name|_glXCreateNewContext
name|qt_glXCreateNewContext
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qt_glXCreatePbuffer
specifier|static
name|_glXCreatePbuffer
name|qt_glXCreatePbuffer
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qt_glXDestroyPbuffer
specifier|static
name|_glXDestroyPbuffer
name|qt_glXDestroyPbuffer
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qt_glXGetFBConfigAttrib
specifier|static
name|_glXGetFBConfigAttrib
name|qt_glXGetFBConfigAttrib
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qt_glXMakeContextCurrent
specifier|static
name|_glXMakeContextCurrent
name|qt_glXMakeContextCurrent
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_define
DECL|macro|glXChooseFBConfig
define|#
directive|define
name|glXChooseFBConfig
value|qt_glXChooseFBConfig
end_define
begin_define
DECL|macro|glXCreateNewContext
define|#
directive|define
name|glXCreateNewContext
value|qt_glXCreateNewContext
end_define
begin_define
DECL|macro|glXCreatePbuffer
define|#
directive|define
name|glXCreatePbuffer
value|qt_glXCreatePbuffer
end_define
begin_define
DECL|macro|glXDestroyPbuffer
define|#
directive|define
name|glXDestroyPbuffer
value|qt_glXDestroyPbuffer
end_define
begin_define
DECL|macro|glXGetFBConfigAttrib
define|#
directive|define
name|glXGetFBConfigAttrib
value|qt_glXGetFBConfigAttrib
end_define
begin_define
DECL|macro|glXMakeContextCurrent
define|#
directive|define
name|glXMakeContextCurrent
value|qt_glXMakeContextCurrent
end_define
begin_function_decl
specifier|extern
name|void
modifier|*
name|qglx_getProcAddress
parameter_list|(
specifier|const
name|char
modifier|*
name|procName
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|// in qgl_x11.cpp
end_comment
begin_function
DECL|function|qt_resolve_pbuffer_extensions
specifier|static
name|bool
name|qt_resolve_pbuffer_extensions
parameter_list|()
block|{
specifier|static
name|int
name|resolved
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|resolved
operator|&&
name|qt_glXMakeContextCurrent
condition|)
return|return
literal|true
return|;
elseif|else
if|if
condition|(
name|resolved
condition|)
return|return
literal|false
return|;
name|qt_glXChooseFBConfig
operator|=
operator|(
name|_glXChooseFBConfig
operator|)
name|qglx_getProcAddress
argument_list|(
literal|"glXChooseFBConfig"
argument_list|)
expr_stmt|;
name|qt_glXCreateNewContext
operator|=
operator|(
name|_glXCreateNewContext
operator|)
name|qglx_getProcAddress
argument_list|(
literal|"glXCreateNewContext"
argument_list|)
expr_stmt|;
name|qt_glXCreatePbuffer
operator|=
operator|(
name|_glXCreatePbuffer
operator|)
name|qglx_getProcAddress
argument_list|(
literal|"glXCreatePbuffer"
argument_list|)
expr_stmt|;
name|qt_glXDestroyPbuffer
operator|=
operator|(
name|_glXDestroyPbuffer
operator|)
name|qglx_getProcAddress
argument_list|(
literal|"glXDestroyPbuffer"
argument_list|)
expr_stmt|;
name|qt_glXGetFBConfigAttrib
operator|=
operator|(
name|_glXGetFBConfigAttrib
operator|)
name|qglx_getProcAddress
argument_list|(
literal|"glXGetFBConfigAttrib"
argument_list|)
expr_stmt|;
name|qt_glXMakeContextCurrent
operator|=
operator|(
name|_glXMakeContextCurrent
operator|)
name|qglx_getProcAddress
argument_list|(
literal|"glXMakeContextCurrent"
argument_list|)
expr_stmt|;
name|resolved
operator|=
name|qt_glXMakeContextCurrent
condition|?
literal|true
else|:
literal|false
expr_stmt|;
return|return
name|resolved
return|;
block|}
end_function
begin_function
DECL|function|qt_format_to_attrib_list
specifier|static
name|void
name|qt_format_to_attrib_list
parameter_list|(
specifier|const
name|QGLFormat
modifier|&
name|f
parameter_list|,
name|int
name|attribs
index|[]
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
name|attribs
index|[
name|i
operator|++
index|]
operator|=
name|GLX_RENDER_TYPE
expr_stmt|;
name|attribs
index|[
name|i
operator|++
index|]
operator|=
name|GLX_RGBA_BIT
expr_stmt|;
name|attribs
index|[
name|i
operator|++
index|]
operator|=
name|GLX_DRAWABLE_TYPE
expr_stmt|;
name|attribs
index|[
name|i
operator|++
index|]
operator|=
name|GLX_PBUFFER_BIT
expr_stmt|;
name|attribs
index|[
name|i
operator|++
index|]
operator|=
name|GLX_RED_SIZE
expr_stmt|;
name|attribs
index|[
name|i
operator|++
index|]
operator|=
name|f
operator|.
name|redBufferSize
argument_list|()
operator|==
operator|-
literal|1
condition|?
literal|1
else|:
name|f
operator|.
name|redBufferSize
argument_list|()
expr_stmt|;
name|attribs
index|[
name|i
operator|++
index|]
operator|=
name|GLX_GREEN_SIZE
expr_stmt|;
name|attribs
index|[
name|i
operator|++
index|]
operator|=
name|f
operator|.
name|greenBufferSize
argument_list|()
operator|==
operator|-
literal|1
condition|?
literal|1
else|:
name|f
operator|.
name|greenBufferSize
argument_list|()
expr_stmt|;
name|attribs
index|[
name|i
operator|++
index|]
operator|=
name|GLX_BLUE_SIZE
expr_stmt|;
name|attribs
index|[
name|i
operator|++
index|]
operator|=
name|f
operator|.
name|blueBufferSize
argument_list|()
operator|==
operator|-
literal|1
condition|?
literal|1
else|:
name|f
operator|.
name|blueBufferSize
argument_list|()
expr_stmt|;
if|if
condition|(
name|f
operator|.
name|doubleBuffer
argument_list|()
condition|)
block|{
name|attribs
index|[
name|i
operator|++
index|]
operator|=
name|GLX_DOUBLEBUFFER
expr_stmt|;
name|attribs
index|[
name|i
operator|++
index|]
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|f
operator|.
name|depth
argument_list|()
condition|)
block|{
name|attribs
index|[
name|i
operator|++
index|]
operator|=
name|GLX_DEPTH_SIZE
expr_stmt|;
name|attribs
index|[
name|i
operator|++
index|]
operator|=
name|f
operator|.
name|depthBufferSize
argument_list|()
operator|==
operator|-
literal|1
condition|?
literal|1
else|:
name|f
operator|.
name|depthBufferSize
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|f
operator|.
name|stereo
argument_list|()
condition|)
block|{
name|attribs
index|[
name|i
operator|++
index|]
operator|=
name|GLX_STEREO
expr_stmt|;
name|attribs
index|[
name|i
operator|++
index|]
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|f
operator|.
name|stencil
argument_list|()
condition|)
block|{
name|attribs
index|[
name|i
operator|++
index|]
operator|=
name|GLX_STENCIL_SIZE
expr_stmt|;
name|attribs
index|[
name|i
operator|++
index|]
operator|=
name|f
operator|.
name|stencilBufferSize
argument_list|()
operator|==
operator|-
literal|1
condition|?
literal|1
else|:
name|f
operator|.
name|stencilBufferSize
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|f
operator|.
name|alpha
argument_list|()
condition|)
block|{
name|attribs
index|[
name|i
operator|++
index|]
operator|=
name|GLX_ALPHA_SIZE
expr_stmt|;
name|attribs
index|[
name|i
operator|++
index|]
operator|=
name|f
operator|.
name|alphaBufferSize
argument_list|()
operator|==
operator|-
literal|1
condition|?
literal|1
else|:
name|f
operator|.
name|alphaBufferSize
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|f
operator|.
name|accum
argument_list|()
condition|)
block|{
name|attribs
index|[
name|i
operator|++
index|]
operator|=
name|GLX_ACCUM_RED_SIZE
expr_stmt|;
name|attribs
index|[
name|i
operator|++
index|]
operator|=
name|f
operator|.
name|accumBufferSize
argument_list|()
operator|==
operator|-
literal|1
condition|?
literal|1
else|:
name|f
operator|.
name|accumBufferSize
argument_list|()
expr_stmt|;
name|attribs
index|[
name|i
operator|++
index|]
operator|=
name|GLX_ACCUM_GREEN_SIZE
expr_stmt|;
name|attribs
index|[
name|i
operator|++
index|]
operator|=
name|f
operator|.
name|accumBufferSize
argument_list|()
operator|==
operator|-
literal|1
condition|?
literal|1
else|:
name|f
operator|.
name|accumBufferSize
argument_list|()
expr_stmt|;
name|attribs
index|[
name|i
operator|++
index|]
operator|=
name|GLX_ACCUM_BLUE_SIZE
expr_stmt|;
name|attribs
index|[
name|i
operator|++
index|]
operator|=
name|f
operator|.
name|accumBufferSize
argument_list|()
operator|==
operator|-
literal|1
condition|?
literal|1
else|:
name|f
operator|.
name|accumBufferSize
argument_list|()
expr_stmt|;
if|if
condition|(
name|f
operator|.
name|alpha
argument_list|()
condition|)
block|{
name|attribs
index|[
name|i
operator|++
index|]
operator|=
name|GLX_ACCUM_ALPHA_SIZE
expr_stmt|;
name|attribs
index|[
name|i
operator|++
index|]
operator|=
name|f
operator|.
name|accumBufferSize
argument_list|()
operator|==
operator|-
literal|1
condition|?
literal|1
else|:
name|f
operator|.
name|accumBufferSize
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|f
operator|.
name|sampleBuffers
argument_list|()
condition|)
block|{
name|attribs
index|[
name|i
operator|++
index|]
operator|=
name|GLX_SAMPLE_BUFFERS_ARB
expr_stmt|;
name|attribs
index|[
name|i
operator|++
index|]
operator|=
literal|1
expr_stmt|;
name|attribs
index|[
name|i
operator|++
index|]
operator|=
name|GLX_SAMPLES_ARB
expr_stmt|;
name|attribs
index|[
name|i
operator|++
index|]
operator|=
name|f
operator|.
name|samples
argument_list|()
operator|==
operator|-
literal|1
condition|?
literal|4
else|:
name|f
operator|.
name|samples
argument_list|()
expr_stmt|;
block|}
name|attribs
index|[
name|i
index|]
operator|=
name|XNone
expr_stmt|;
block|}
end_function
begin_function
DECL|function|init
name|bool
name|QGLPixelBufferPrivate
operator|::
name|init
parameter_list|(
specifier|const
name|QSize
modifier|&
name|size
parameter_list|,
specifier|const
name|QGLFormat
modifier|&
name|f
parameter_list|,
name|QGLWidget
modifier|*
name|shareWidget
parameter_list|)
block|{
if|if
condition|(
operator|!
name|qt_resolve_pbuffer_extensions
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"QGLPixelBuffer: pbuffers are not supported on this system."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|int
name|attribs
index|[
literal|40
index|]
decl_stmt|;
name|int
name|num_configs
init|=
literal|0
decl_stmt|;
name|qt_format_to_attrib_list
argument_list|(
name|f
argument_list|,
name|attribs
argument_list|)
expr_stmt|;
name|int
name|screen
init|=
name|X11
operator|->
name|defaultScreen
decl_stmt|;
if|if
condition|(
name|shareWidget
condition|)
name|screen
operator|=
name|shareWidget
operator|->
name|x11Info
argument_list|()
operator|.
name|screen
argument_list|()
expr_stmt|;
name|GLXFBConfig
modifier|*
name|configs
init|=
name|glXChooseFBConfig
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|screen
argument_list|,
name|attribs
argument_list|,
operator|&
name|num_configs
argument_list|)
decl_stmt|;
if|if
condition|(
name|configs
operator|&&
name|num_configs
condition|)
block|{
name|int
name|res
decl_stmt|;
name|glXGetFBConfigAttrib
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|configs
index|[
literal|0
index|]
argument_list|,
name|GLX_LEVEL
argument_list|,
operator|&
name|res
argument_list|)
expr_stmt|;
name|format
operator|.
name|setPlane
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|glXGetFBConfigAttrib
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|configs
index|[
literal|0
index|]
argument_list|,
name|GLX_DOUBLEBUFFER
argument_list|,
operator|&
name|res
argument_list|)
expr_stmt|;
name|format
operator|.
name|setDoubleBuffer
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|glXGetFBConfigAttrib
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|configs
index|[
literal|0
index|]
argument_list|,
name|GLX_DEPTH_SIZE
argument_list|,
operator|&
name|res
argument_list|)
expr_stmt|;
name|format
operator|.
name|setDepth
argument_list|(
name|res
argument_list|)
expr_stmt|;
if|if
condition|(
name|format
operator|.
name|depth
argument_list|()
condition|)
name|format
operator|.
name|setDepthBufferSize
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|glXGetFBConfigAttrib
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|configs
index|[
literal|0
index|]
argument_list|,
name|GLX_RGBA
argument_list|,
operator|&
name|res
argument_list|)
expr_stmt|;
name|format
operator|.
name|setRgba
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|glXGetFBConfigAttrib
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|configs
index|[
literal|0
index|]
argument_list|,
name|GLX_RED_SIZE
argument_list|,
operator|&
name|res
argument_list|)
expr_stmt|;
name|format
operator|.
name|setRedBufferSize
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|glXGetFBConfigAttrib
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|configs
index|[
literal|0
index|]
argument_list|,
name|GLX_GREEN_SIZE
argument_list|,
operator|&
name|res
argument_list|)
expr_stmt|;
name|format
operator|.
name|setGreenBufferSize
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|glXGetFBConfigAttrib
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|configs
index|[
literal|0
index|]
argument_list|,
name|GLX_BLUE_SIZE
argument_list|,
operator|&
name|res
argument_list|)
expr_stmt|;
name|format
operator|.
name|setBlueBufferSize
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|glXGetFBConfigAttrib
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|configs
index|[
literal|0
index|]
argument_list|,
name|GLX_ALPHA_SIZE
argument_list|,
operator|&
name|res
argument_list|)
expr_stmt|;
name|format
operator|.
name|setAlpha
argument_list|(
name|res
argument_list|)
expr_stmt|;
if|if
condition|(
name|format
operator|.
name|alpha
argument_list|()
condition|)
name|format
operator|.
name|setAlphaBufferSize
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|glXGetFBConfigAttrib
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|configs
index|[
literal|0
index|]
argument_list|,
name|GLX_ACCUM_RED_SIZE
argument_list|,
operator|&
name|res
argument_list|)
expr_stmt|;
name|format
operator|.
name|setAccum
argument_list|(
name|res
argument_list|)
expr_stmt|;
if|if
condition|(
name|format
operator|.
name|accum
argument_list|()
condition|)
name|format
operator|.
name|setAccumBufferSize
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|glXGetFBConfigAttrib
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|configs
index|[
literal|0
index|]
argument_list|,
name|GLX_STENCIL_SIZE
argument_list|,
operator|&
name|res
argument_list|)
expr_stmt|;
name|format
operator|.
name|setStencil
argument_list|(
name|res
argument_list|)
expr_stmt|;
if|if
condition|(
name|format
operator|.
name|stencil
argument_list|()
condition|)
name|format
operator|.
name|setStencilBufferSize
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|glXGetFBConfigAttrib
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|configs
index|[
literal|0
index|]
argument_list|,
name|GLX_STEREO
argument_list|,
operator|&
name|res
argument_list|)
expr_stmt|;
name|format
operator|.
name|setStereo
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|glXGetFBConfigAttrib
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|configs
index|[
literal|0
index|]
argument_list|,
name|GLX_SAMPLE_BUFFERS_ARB
argument_list|,
operator|&
name|res
argument_list|)
expr_stmt|;
name|format
operator|.
name|setSampleBuffers
argument_list|(
name|res
argument_list|)
expr_stmt|;
if|if
condition|(
name|format
operator|.
name|sampleBuffers
argument_list|()
condition|)
block|{
name|glXGetFBConfigAttrib
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|configs
index|[
literal|0
index|]
argument_list|,
name|GLX_SAMPLES_ARB
argument_list|,
operator|&
name|res
argument_list|)
expr_stmt|;
name|format
operator|.
name|setSamples
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
name|int
name|pb_attribs
index|[]
init|=
block|{
name|GLX_PBUFFER_WIDTH
block|,
name|size
operator|.
name|width
argument_list|()
block|,
name|GLX_PBUFFER_HEIGHT
block|,
name|size
operator|.
name|height
argument_list|()
block|,
name|XNone
block|}
decl_stmt|;
name|GLXContext
name|shareContext
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|shareWidget
operator|&&
name|shareWidget
operator|->
name|d_func
argument_list|()
operator|->
name|glcx
condition|)
name|shareContext
operator|=
operator|(
name|GLXContext
operator|)
name|shareWidget
operator|->
name|d_func
argument_list|()
operator|->
name|glcx
operator|->
name|d_func
argument_list|()
operator|->
name|cx
expr_stmt|;
name|pbuf
operator|=
name|glXCreatePbuffer
argument_list|(
name|QX11Info
operator|::
name|display
argument_list|()
argument_list|,
name|configs
index|[
literal|0
index|]
argument_list|,
name|pb_attribs
argument_list|)
expr_stmt|;
name|ctx
operator|=
name|glXCreateNewContext
argument_list|(
name|QX11Info
operator|::
name|display
argument_list|()
argument_list|,
name|configs
index|[
literal|0
index|]
argument_list|,
name|GLX_RGBA_TYPE
argument_list|,
name|shareContext
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|XFree
argument_list|(
name|configs
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|pbuf
operator|||
operator|!
name|ctx
condition|)
block|{
name|qWarning
argument_list|(
literal|"QGLPixelBuffer: Unable to create a pbuffer/context - giving up."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
else|else
block|{
name|qWarning
argument_list|(
literal|"QGLPixelBuffer: Unable to find a context/format match - giving up."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
end_function
begin_function
DECL|function|cleanup
name|bool
name|QGLPixelBufferPrivate
operator|::
name|cleanup
parameter_list|()
block|{
name|glXDestroyPbuffer
argument_list|(
name|QX11Info
operator|::
name|display
argument_list|()
argument_list|,
name|pbuf
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|bindToDynamicTexture
name|bool
name|QGLPixelBuffer
operator|::
name|bindToDynamicTexture
parameter_list|(
name|GLuint
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|releaseFromDynamicTexture
name|void
name|QGLPixelBuffer
operator|::
name|releaseFromDynamicTexture
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|hasOpenGLPbuffers
name|bool
name|QGLPixelBuffer
operator|::
name|hasOpenGLPbuffers
parameter_list|()
block|{
name|bool
name|ret
init|=
name|qt_resolve_pbuffer_extensions
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|ret
condition|)
return|return
literal|false
return|;
name|int
name|attribs
index|[
literal|40
index|]
decl_stmt|;
name|int
name|num_configs
init|=
literal|0
decl_stmt|;
name|qt_format_to_attrib_list
argument_list|(
name|QGLFormat
operator|::
name|defaultFormat
argument_list|()
argument_list|,
name|attribs
argument_list|)
expr_stmt|;
name|GLXFBConfig
modifier|*
name|configs
init|=
name|glXChooseFBConfig
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|X11
operator|->
name|defaultScreen
argument_list|,
name|attribs
argument_list|,
operator|&
name|num_configs
argument_list|)
decl_stmt|;
name|GLXPbuffer
name|pbuf
init|=
literal|0
decl_stmt|;
name|GLXContext
name|ctx
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|configs
operator|&&
name|num_configs
condition|)
block|{
name|int
name|pb_attribs
index|[]
init|=
block|{
name|GLX_PBUFFER_WIDTH
block|,
literal|128
block|,
name|GLX_PBUFFER_HEIGHT
block|,
literal|128
block|,
name|XNone
block|}
decl_stmt|;
name|pbuf
operator|=
name|glXCreatePbuffer
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|configs
index|[
literal|0
index|]
argument_list|,
name|pb_attribs
argument_list|)
expr_stmt|;
name|ctx
operator|=
name|glXCreateNewContext
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|configs
index|[
literal|0
index|]
argument_list|,
name|GLX_RGBA_TYPE
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|XFree
argument_list|(
name|configs
argument_list|)
expr_stmt|;
name|glXDestroyContext
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
name|glXDestroyPbuffer
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|pbuf
argument_list|)
expr_stmt|;
block|}
return|return
name|pbuf
operator|&&
name|ctx
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
