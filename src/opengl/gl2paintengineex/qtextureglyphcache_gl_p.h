begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtOpenGL module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QTEXTUREGLYPHCACHE_GL_P_H
end_ifndef
begin_define
DECL|macro|QTEXTUREGLYPHCACHE_GL_P_H
define|#
directive|define
name|QTEXTUREGLYPHCACHE_GL_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists for the convenience
end_comment
begin_comment
comment|// of the QLibrary class.  This header file may change from
end_comment
begin_comment
comment|// version to version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|<private/qtextureglyphcache_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qgl_p.h>
end_include
begin_include
include|#
directive|include
file|<qglshaderprogram.h>
end_include
begin_include
include|#
directive|include
file|<qglframebufferobject.h>
end_include
begin_comment
comment|// #define QT_GL_TEXTURE_GLYPH_CACHE_DEBUG
end_comment
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QGL2PaintEngineExPrivate
name|class
name|QGL2PaintEngineExPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|struct|QOpenGLSharedResource
name|struct
name|QGLGlyphTexture
range|:
name|public
name|QOpenGLSharedResource
block|{
DECL|function|QGLGlyphTexture
name|QGLGlyphTexture
argument_list|(
specifier|const
name|QGLContext
operator|*
name|ctx
argument_list|)
operator|:
name|QOpenGLSharedResource
argument_list|(
name|ctx
operator|->
name|contextHandle
argument_list|()
operator|->
name|shareGroup
argument_list|()
argument_list|)
block|,
name|m_fbo
argument_list|(
literal|0
argument_list|)
block|,
name|m_width
argument_list|(
literal|0
argument_list|)
block|,
name|m_height
argument_list|(
literal|0
argument_list|)
block|{
if|if
condition|(
name|ctx
operator|&&
name|QGLFramebufferObject
operator|::
name|hasOpenGLFramebufferObjects
argument_list|()
operator|&&
operator|!
name|ctx
operator|->
name|d_ptr
operator|->
name|workaround_brokenFBOReadBack
condition|)
name|glGenFramebuffers
argument_list|(
literal|1
argument_list|,
operator|&
name|m_fbo
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_GL_TEXTURE_GLYPH_CACHE_DEBUG
name|qDebug
argument_list|(
literal|" -> QGLGlyphTexture() %p for context %p."
argument_list|,
name|this
argument_list|,
name|ctx
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|freeResource
name|void
name|freeResource
argument_list|(
argument|QOpenGLContext *context
argument_list|)
block|{
specifier|const
name|QGLContext
operator|*
name|ctx
operator|=
name|QGLContext
operator|::
name|fromOpenGLContext
argument_list|(
name|context
argument_list|)
block|;
ifdef|#
directive|ifdef
name|QT_GL_TEXTURE_GLYPH_CACHE_DEBUG
name|qDebug
argument_list|(
literal|"~QGLGlyphTexture() %p for context %p."
argument_list|,
name|this
argument_list|,
name|ctx
argument_list|)
block|;
else|#
directive|else
name|Q_UNUSED
argument_list|(
name|ctx
argument_list|)
block|;
endif|#
directive|endif
if|if
condition|(
name|m_fbo
condition|)
name|glDeleteFramebuffers
argument_list|(
literal|1
argument_list|,
operator|&
name|m_fbo
argument_list|)
expr_stmt|;
end_decl_stmt
begin_if
if|if
condition|(
name|m_width
operator|||
name|m_height
condition|)
name|glDeleteTextures
argument_list|(
literal|1
argument_list|,
operator|&
name|m_texture
argument_list|)
expr_stmt|;
end_if
begin_macro
unit|}      void
DECL|function|invalidateResource
name|invalidateResource
argument_list|()
end_macro
begin_block
block|{
name|m_texture
operator|=
literal|0
expr_stmt|;
name|m_fbo
operator|=
literal|0
expr_stmt|;
name|m_width
operator|=
literal|0
expr_stmt|;
name|m_height
operator|=
literal|0
expr_stmt|;
block|}
end_block
begin_decl_stmt
DECL|member|m_texture
name|GLuint
name|m_texture
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|m_fbo
name|GLuint
name|m_fbo
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|m_width
name|int
name|m_width
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|m_height
name|int
name|m_height
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|m_height
unit|};
name|class
name|Q_OPENGL_EXPORT
name|QGLTextureGlyphCache
range|:
name|public
name|QImageTextureGlyphCache
block|{
name|public
operator|:
name|QGLTextureGlyphCache
argument_list|(
argument|QFontEngineGlyphCache::Type type
argument_list|,
argument|const QTransform&matrix
argument_list|)
block|;
operator|~
name|QGLTextureGlyphCache
argument_list|()
block|;
name|virtual
name|void
name|createTextureData
argument_list|(
argument|int width
argument_list|,
argument|int height
argument_list|)
block|;
name|virtual
name|void
name|resizeTextureData
argument_list|(
argument|int width
argument_list|,
argument|int height
argument_list|)
block|;
name|virtual
name|void
name|fillTexture
argument_list|(
argument|const Coord&c
argument_list|,
argument|glyph_t glyph
argument_list|,
argument|QFixed subPixelPosition
argument_list|)
block|;
name|virtual
name|int
name|glyphPadding
argument_list|()
specifier|const
block|;
name|virtual
name|int
name|maxTextureWidth
argument_list|()
specifier|const
block|;
name|virtual
name|int
name|maxTextureHeight
argument_list|()
specifier|const
block|;
specifier|inline
name|GLuint
name|texture
argument_list|()
specifier|const
block|{
name|QGLTextureGlyphCache
operator|*
name|that
operator|=
name|const_cast
operator|<
name|QGLTextureGlyphCache
operator|*
operator|>
operator|(
name|this
operator|)
block|;
name|QGLGlyphTexture
operator|*
name|glyphTexture
operator|=
name|that
operator|->
name|m_textureResource
block|;
return|return
name|glyphTexture
condition|?
name|glyphTexture
operator|->
name|m_texture
else|:
literal|0
return|;
block|}
specifier|inline
name|int
name|width
argument_list|()
specifier|const
block|{
name|QGLTextureGlyphCache
operator|*
name|that
operator|=
name|const_cast
operator|<
name|QGLTextureGlyphCache
operator|*
operator|>
operator|(
name|this
operator|)
block|;
name|QGLGlyphTexture
operator|*
name|glyphTexture
operator|=
name|that
operator|->
name|m_textureResource
block|;
return|return
name|glyphTexture
condition|?
name|glyphTexture
operator|->
name|m_width
else|:
literal|0
return|;
block|}
specifier|inline
name|int
name|height
argument_list|()
specifier|const
block|{
name|QGLTextureGlyphCache
operator|*
name|that
operator|=
name|const_cast
operator|<
name|QGLTextureGlyphCache
operator|*
operator|>
operator|(
name|this
operator|)
block|;
name|QGLGlyphTexture
operator|*
name|glyphTexture
operator|=
name|that
operator|->
name|m_textureResource
block|;
return|return
name|glyphTexture
condition|?
name|glyphTexture
operator|->
name|m_height
else|:
literal|0
return|;
block|}
specifier|inline
name|void
name|setPaintEnginePrivate
argument_list|(
argument|QGL2PaintEngineExPrivate *p
argument_list|)
block|{
name|pex
operator|=
name|p
block|; }
specifier|inline
specifier|const
name|QOpenGLContextGroup
operator|*
name|contextGroup
argument_list|()
specifier|const
block|{
return|return
name|m_textureResource
condition|?
name|m_textureResource
operator|->
name|group
argument_list|()
else|:
literal|0
return|;
block|}
specifier|inline
name|int
name|serialNumber
argument_list|()
specifier|const
block|{
return|return
name|m_serialNumber
return|;
block|}
expr|enum
name|FilterMode
block|{
name|Nearest
block|,
name|Linear
block|}
block|;
name|FilterMode
name|filterMode
argument_list|()
specifier|const
block|{
return|return
name|m_filterMode
return|;
block|}
name|void
name|setFilterMode
argument_list|(
argument|FilterMode m
argument_list|)
block|{
name|m_filterMode
operator|=
name|m
block|; }
name|void
name|clear
argument_list|()
block|;
name|private
operator|:
name|QGLGlyphTexture
operator|*
name|m_textureResource
block|;
name|QGL2PaintEngineExPrivate
operator|*
name|pex
block|;
name|QGLShaderProgram
operator|*
name|m_blitProgram
block|;
name|FilterMode
name|m_filterMode
block|;
name|GLfloat
name|m_vertexCoordinateArray
index|[
literal|8
index|]
block|;
name|GLfloat
name|m_textureCoordinateArray
index|[
literal|8
index|]
block|;
name|int
name|m_serialNumber
block|; }
decl_stmt|;
end_decl_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
end_unit
