begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtOpenGL module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia. For licensing terms and ** conditions see http://qt.digia.com/licensing. For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights. These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QPAINTENGINEEX_OPENGL2_P_H
end_ifndef
begin_define
DECL|macro|QPAINTENGINEEX_OPENGL2_P_H
define|#
directive|define
name|QPAINTENGINEEX_OPENGL2_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists purely as an
end_comment
begin_comment
comment|// implementation detail.  This header file may change from version to
end_comment
begin_comment
comment|// version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_include
include|#
directive|include
file|<private/qpaintengineex_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qglengineshadermanager_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qgl2pexvertexarray_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qglpaintdevice_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qfontengine_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qdatabuffer_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qtriangulatingstroker_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qopenglextensions_p.h>
end_include
begin_enum
DECL|enum|EngineMode
enum|enum
name|EngineMode
block|{
DECL|enumerator|ImageDrawingMode
name|ImageDrawingMode
block|,
DECL|enumerator|TextDrawingMode
name|TextDrawingMode
block|,
DECL|enumerator|BrushDrawingMode
name|BrushDrawingMode
block|,
DECL|enumerator|ImageArrayDrawingMode
name|ImageArrayDrawingMode
block|}
enum|;
end_enum
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|macro|GL_STENCIL_HIGH_BIT
define|#
directive|define
name|GL_STENCIL_HIGH_BIT
value|GLuint(0x80)
DECL|macro|QT_BRUSH_TEXTURE_UNIT
define|#
directive|define
name|QT_BRUSH_TEXTURE_UNIT
value|GLuint(0)
DECL|macro|QT_IMAGE_TEXTURE_UNIT
define|#
directive|define
name|QT_IMAGE_TEXTURE_UNIT
value|GLuint(0)
comment|//Can be the same as brush texture unit
DECL|macro|QT_MASK_TEXTURE_UNIT
define|#
directive|define
name|QT_MASK_TEXTURE_UNIT
value|GLuint(1)
DECL|macro|QT_BACKGROUND_TEXTURE_UNIT
define|#
directive|define
name|QT_BACKGROUND_TEXTURE_UNIT
value|GLuint(2)
DECL|variable|QGL2PaintEngineExPrivate
name|class
name|QGL2PaintEngineExPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QGL2PaintEngineState
range|:
name|public
name|QPainterState
block|{
name|public
operator|:
name|QGL2PaintEngineState
argument_list|(
name|QGL2PaintEngineState
operator|&
name|other
argument_list|)
block|;
name|QGL2PaintEngineState
argument_list|()
block|;
operator|~
name|QGL2PaintEngineState
argument_list|()
block|;
name|uint
name|isNew
operator|:
literal|1
block|;
name|uint
name|needsClipBufferClear
operator|:
literal|1
block|;
name|uint
name|clipTestEnabled
operator|:
literal|1
block|;
name|uint
name|canRestoreClip
operator|:
literal|1
block|;
name|uint
name|matrixChanged
operator|:
literal|1
block|;
name|uint
name|compositionModeChanged
operator|:
literal|1
block|;
name|uint
name|opacityChanged
operator|:
literal|1
block|;
name|uint
name|renderHintsChanged
operator|:
literal|1
block|;
name|uint
name|clipChanged
operator|:
literal|1
block|;
name|uint
name|currentClip
operator|:
literal|8
block|;
name|QRect
name|rectangleClip
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_OPENGL_EXPORT
name|QGL2PaintEngineEx
range|:
name|public
name|QPaintEngineEx
block|{
name|Q_DECLARE_PRIVATE
argument_list|(
argument|QGL2PaintEngineEx
argument_list|)
name|public
operator|:
name|QGL2PaintEngineEx
argument_list|()
block|;
operator|~
name|QGL2PaintEngineEx
argument_list|()
block|;
name|bool
name|begin
argument_list|(
name|QPaintDevice
operator|*
name|device
argument_list|)
block|;
name|void
name|ensureActive
argument_list|()
block|;
name|bool
name|end
argument_list|()
block|;
name|virtual
name|void
name|clipEnabledChanged
argument_list|()
block|;
name|virtual
name|void
name|penChanged
argument_list|()
block|;
name|virtual
name|void
name|brushChanged
argument_list|()
block|;
name|virtual
name|void
name|brushOriginChanged
argument_list|()
block|;
name|virtual
name|void
name|opacityChanged
argument_list|()
block|;
name|virtual
name|void
name|compositionModeChanged
argument_list|()
block|;
name|virtual
name|void
name|renderHintsChanged
argument_list|()
block|;
name|virtual
name|void
name|transformChanged
argument_list|()
block|;
name|virtual
name|void
name|drawPixmap
argument_list|(
specifier|const
name|QRectF
operator|&
name|r
argument_list|,
specifier|const
name|QPixmap
operator|&
name|pm
argument_list|,
specifier|const
name|QRectF
operator|&
name|sr
argument_list|)
block|;
name|virtual
name|void
name|drawPixmapFragments
argument_list|(
argument|const QPainter::PixmapFragment *fragments
argument_list|,
argument|int fragmentCount
argument_list|,
argument|const QPixmap&pixmap
argument_list|,
argument|QPainter::PixmapFragmentHints hints
argument_list|)
block|;
name|virtual
name|void
name|drawImage
argument_list|(
argument|const QRectF&r
argument_list|,
argument|const QImage&pm
argument_list|,
argument|const QRectF&sr
argument_list|,
argument|Qt::ImageConversionFlags flags = Qt::AutoColor
argument_list|)
block|;
name|virtual
name|void
name|drawTextItem
argument_list|(
specifier|const
name|QPointF
operator|&
name|p
argument_list|,
specifier|const
name|QTextItem
operator|&
name|textItem
argument_list|)
block|;
name|virtual
name|void
name|fill
argument_list|(
specifier|const
name|QVectorPath
operator|&
name|path
argument_list|,
specifier|const
name|QBrush
operator|&
name|brush
argument_list|)
block|;
name|virtual
name|void
name|stroke
argument_list|(
specifier|const
name|QVectorPath
operator|&
name|path
argument_list|,
specifier|const
name|QPen
operator|&
name|pen
argument_list|)
block|;
name|virtual
name|void
name|clip
argument_list|(
argument|const QVectorPath&path
argument_list|,
argument|Qt::ClipOperation op
argument_list|)
block|;
name|virtual
name|void
name|drawStaticTextItem
argument_list|(
name|QStaticTextItem
operator|*
name|textItem
argument_list|)
block|;
name|bool
name|drawTexture
argument_list|(
argument|const QRectF&r
argument_list|,
argument|GLuint textureId
argument_list|,
argument|const QSize&size
argument_list|,
argument|const QRectF&sr
argument_list|)
block|;
name|Type
name|type
argument_list|()
specifier|const
block|{
return|return
name|OpenGL2
return|;
block|}
name|virtual
name|void
name|setState
argument_list|(
name|QPainterState
operator|*
name|s
argument_list|)
block|;
name|virtual
name|QPainterState
operator|*
name|createState
argument_list|(
argument|QPainterState *orig
argument_list|)
specifier|const
block|;
specifier|inline
name|QGL2PaintEngineState
operator|*
name|state
argument_list|()
block|{
return|return
name|static_cast
operator|<
name|QGL2PaintEngineState
operator|*
operator|>
operator|(
name|QPaintEngineEx
operator|::
name|state
argument_list|()
operator|)
return|;
block|}
specifier|inline
specifier|const
name|QGL2PaintEngineState
operator|*
name|state
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
specifier|const
name|QGL2PaintEngineState
operator|*
operator|>
operator|(
name|QPaintEngineEx
operator|::
name|state
argument_list|()
operator|)
return|;
block|}
name|void
name|beginNativePainting
argument_list|()
block|;
name|void
name|endNativePainting
argument_list|()
block|;
name|void
name|invalidateState
argument_list|()
block|;
name|void
name|setRenderTextActive
argument_list|(
name|bool
argument_list|)
block|;
name|bool
name|isNativePaintingActive
argument_list|()
specifier|const
block|;
name|bool
name|requiresPretransformedGlyphPositions
argument_list|(
argument|QFontEngine *
argument_list|,
argument|const QTransform&
argument_list|)
specifier|const
block|{
return|return
name|false
return|;
block|}
name|bool
name|shouldDrawCachedGlyphs
argument_list|(
argument|QFontEngine *
argument_list|,
argument|const QTransform&
argument_list|)
specifier|const
block|;
name|void
name|setTranslateZ
argument_list|(
argument|GLfloat z
argument_list|)
block|;
name|private
operator|:
name|Q_DISABLE_COPY
argument_list|(
argument|QGL2PaintEngineEx
argument_list|)
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QPaintEngineExPrivate
name|class
name|QGL2PaintEngineExPrivate
range|:
name|public
name|QPaintEngineExPrivate
decl_stmt|,
name|protected
name|QOpenGLExtensions
block|{
name|Q_DECLARE_PUBLIC
argument_list|(
argument|QGL2PaintEngineEx
argument_list|)
name|public
label|:
enum|enum
name|StencilFillMode
block|{
name|OddEvenFillMode
block|,
name|WindingFillMode
block|,
name|TriStripStrokeFillMode
block|}
enum|;
name|QGL2PaintEngineExPrivate
argument_list|(
name|QGL2PaintEngineEx
operator|*
name|q_ptr
argument_list|)
operator|:
name|q
argument_list|(
name|q_ptr
argument_list|)
operator|,
name|shaderManager
argument_list|(
literal|0
argument_list|)
operator|,
name|width
argument_list|(
literal|0
argument_list|)
operator|,
name|height
argument_list|(
literal|0
argument_list|)
operator|,
name|ctx
argument_list|(
literal|0
argument_list|)
operator|,
name|useSystemClip
argument_list|(
name|true
argument_list|)
operator|,
name|elementIndicesVBOId
argument_list|(
literal|0
argument_list|)
operator|,
name|opacityArray
argument_list|(
literal|0
argument_list|)
operator|,
name|snapToPixelGrid
argument_list|(
name|false
argument_list|)
operator|,
name|nativePaintingActive
argument_list|(
name|false
argument_list|)
operator|,
name|inverseScale
argument_list|(
literal|1
argument_list|)
operator|,
name|lastMaskTextureUsed
argument_list|(
literal|0
argument_list|)
operator|,
name|translateZ
argument_list|(
literal|0
argument_list|)
block|{ }
operator|~
name|QGL2PaintEngineExPrivate
argument_list|()
expr_stmt|;
name|void
name|updateBrushTexture
parameter_list|()
function_decl|;
name|void
name|updateBrushUniforms
parameter_list|()
function_decl|;
name|void
name|updateMatrix
parameter_list|()
function_decl|;
name|void
name|updateCompositionMode
parameter_list|()
function_decl|;
name|void
name|updateTextureFilter
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|wrapMode
parameter_list|,
name|bool
name|smoothPixmapTransform
parameter_list|,
name|GLuint
name|id
init|=
name|GLuint
argument_list|(
operator|-
literal|1
argument_list|)
parameter_list|)
function_decl|;
name|void
name|resetGLState
parameter_list|()
function_decl|;
comment|// fill, stroke, drawTexture, drawPixmaps& drawCachedGlyphs are the main rendering entry-points,
comment|// however writeClip can also be thought of as en entry point as it does similar things.
name|void
name|fill
parameter_list|(
specifier|const
name|QVectorPath
modifier|&
name|path
parameter_list|)
function_decl|;
name|void
name|stroke
parameter_list|(
specifier|const
name|QVectorPath
modifier|&
name|path
parameter_list|,
specifier|const
name|QPen
modifier|&
name|pen
parameter_list|)
function_decl|;
name|void
name|drawTexture
parameter_list|(
specifier|const
name|QGLRect
modifier|&
name|dest
parameter_list|,
specifier|const
name|QGLRect
modifier|&
name|src
parameter_list|,
specifier|const
name|QSize
modifier|&
name|textureSize
parameter_list|,
name|bool
name|opaque
parameter_list|,
name|bool
name|pattern
init|=
name|false
parameter_list|)
function_decl|;
name|void
name|drawPixmapFragments
argument_list|(
specifier|const
name|QPainter
operator|::
name|PixmapFragment
operator|*
name|fragments
argument_list|,
name|int
name|fragmentCount
argument_list|,
specifier|const
name|QPixmap
operator|&
name|pixmap
argument_list|,
name|QPainter
operator|::
name|PixmapFragmentHints
name|hints
argument_list|)
decl_stmt|;
name|void
name|drawCachedGlyphs
argument_list|(
name|QFontEngine
operator|::
name|GlyphFormat
name|glyphFormat
argument_list|,
name|QStaticTextItem
operator|*
name|staticTextItem
argument_list|)
decl_stmt|;
comment|// Calls glVertexAttributePointer if the pointer has changed
specifier|inline
name|void
name|setVertexAttributePointer
parameter_list|(
name|unsigned
name|int
name|arrayIndex
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|pointer
parameter_list|)
function_decl|;
comment|// draws whatever is in the vertex array:
name|void
name|drawVertexArrays
parameter_list|(
specifier|const
name|float
modifier|*
name|data
parameter_list|,
name|int
modifier|*
name|stops
parameter_list|,
name|int
name|stopCount
parameter_list|,
name|GLenum
name|primitive
parameter_list|)
function_decl|;
name|void
name|drawVertexArrays
parameter_list|(
name|QGL2PEXVertexArray
modifier|&
name|vertexArray
parameter_list|,
name|GLenum
name|primitive
parameter_list|)
block|{
name|drawVertexArrays
argument_list|(
operator|(
specifier|const
name|float
operator|*
operator|)
name|vertexArray
operator|.
name|data
argument_list|()
argument_list|,
name|vertexArray
operator|.
name|stops
argument_list|()
argument_list|,
name|vertexArray
operator|.
name|stopCount
argument_list|()
argument_list|,
name|primitive
argument_list|)
expr_stmt|;
block|}
comment|// Composites the bounding rect onto dest buffer:
name|void
name|composite
parameter_list|(
specifier|const
name|QGLRect
modifier|&
name|boundingRect
parameter_list|)
function_decl|;
comment|// Calls drawVertexArrays to render into stencil buffer:
name|void
name|fillStencilWithVertexArray
parameter_list|(
specifier|const
name|float
modifier|*
name|data
parameter_list|,
name|int
name|count
parameter_list|,
name|int
modifier|*
name|stops
parameter_list|,
name|int
name|stopCount
parameter_list|,
specifier|const
name|QGLRect
modifier|&
name|bounds
parameter_list|,
name|StencilFillMode
name|mode
parameter_list|)
function_decl|;
name|void
name|fillStencilWithVertexArray
parameter_list|(
name|QGL2PEXVertexArray
modifier|&
name|vertexArray
parameter_list|,
name|bool
name|useWindingFill
parameter_list|)
block|{
name|fillStencilWithVertexArray
argument_list|(
operator|(
specifier|const
name|float
operator|*
operator|)
name|vertexArray
operator|.
name|data
argument_list|()
argument_list|,
literal|0
argument_list|,
name|vertexArray
operator|.
name|stops
argument_list|()
argument_list|,
name|vertexArray
operator|.
name|stopCount
argument_list|()
argument_list|,
name|vertexArray
operator|.
name|boundingRect
argument_list|()
argument_list|,
name|useWindingFill
condition|?
name|WindingFillMode
else|:
name|OddEvenFillMode
argument_list|)
expr_stmt|;
block|}
name|void
name|setBrush
parameter_list|(
specifier|const
name|QBrush
modifier|&
name|brush
parameter_list|)
function_decl|;
name|void
name|transferMode
parameter_list|(
name|EngineMode
name|newMode
parameter_list|)
function_decl|;
name|bool
name|prepareForDraw
parameter_list|(
name|bool
name|srcPixelsAreOpaque
parameter_list|)
function_decl|;
comment|// returns true if the program has changed
name|bool
name|prepareForCachedGlyphDraw
parameter_list|(
specifier|const
name|QFontEngineGlyphCache
modifier|&
name|cache
parameter_list|)
function_decl|;
specifier|inline
name|void
name|useSimpleShader
parameter_list|()
function_decl|;
specifier|inline
name|GLuint
name|location
argument_list|(
specifier|const
name|QGLEngineShaderManager
operator|::
name|Uniform
name|uniform
argument_list|)
block|{
return|return
name|shaderManager
operator|->
name|getUniformLocation
argument_list|(
name|uniform
argument_list|)
return|;
block|}
name|void
name|clearClip
parameter_list|(
name|uint
name|value
parameter_list|)
function_decl|;
name|void
name|writeClip
parameter_list|(
specifier|const
name|QVectorPath
modifier|&
name|path
parameter_list|,
name|uint
name|value
parameter_list|)
function_decl|;
name|void
name|resetClipIfNeeded
parameter_list|()
function_decl|;
name|void
name|updateClipScissorTest
parameter_list|()
function_decl|;
name|void
name|setScissor
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
function_decl|;
name|void
name|regenerateClip
parameter_list|()
function_decl|;
name|void
name|systemStateChanged
parameter_list|()
function_decl|;
specifier|static
name|QGLEngineShaderManager
modifier|*
name|shaderManagerForEngine
parameter_list|(
name|QGL2PaintEngineEx
modifier|*
name|engine
parameter_list|)
block|{
return|return
name|engine
operator|->
name|d_func
argument_list|()
operator|->
name|shaderManager
return|;
block|}
specifier|static
name|QGL2PaintEngineExPrivate
modifier|*
name|getData
parameter_list|(
name|QGL2PaintEngineEx
modifier|*
name|engine
parameter_list|)
block|{
return|return
name|engine
operator|->
name|d_func
argument_list|()
return|;
block|}
specifier|static
name|void
name|cleanupVectorPath
parameter_list|(
name|QPaintEngineEx
modifier|*
name|engine
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
function_decl|;
name|QGL2PaintEngineEx
modifier|*
name|q
decl_stmt|;
name|QGLEngineShaderManager
modifier|*
name|shaderManager
decl_stmt|;
name|QGLPaintDevice
modifier|*
name|device
decl_stmt|;
name|int
name|width
decl_stmt|,
name|height
decl_stmt|;
name|QGLContext
modifier|*
name|ctx
decl_stmt|;
name|EngineMode
name|mode
decl_stmt|;
name|QFontEngine
operator|::
name|GlyphFormat
name|glyphCacheFormat
expr_stmt|;
comment|// Dirty flags
name|bool
name|matrixDirty
decl_stmt|;
comment|// Implies matrix uniforms are also dirty
name|bool
name|compositionModeDirty
decl_stmt|;
name|bool
name|brushTextureDirty
decl_stmt|;
name|bool
name|brushUniformsDirty
decl_stmt|;
name|bool
name|opacityUniformDirty
decl_stmt|;
name|bool
name|matrixUniformDirty
decl_stmt|;
name|bool
name|translateZUniformDirty
decl_stmt|;
name|bool
name|stencilClean
decl_stmt|;
comment|// Has the stencil not been used for clipping so far?
name|bool
name|useSystemClip
decl_stmt|;
name|QRegion
name|dirtyStencilRegion
decl_stmt|;
name|QRect
name|currentScissorBounds
decl_stmt|;
name|uint
name|maxClip
decl_stmt|;
name|QBrush
name|currentBrush
decl_stmt|;
comment|// May not be the state's brush!
specifier|const
name|QBrush
name|noBrush
decl_stmt|;
name|QPixmap
name|currentBrushPixmap
decl_stmt|;
name|QGL2PEXVertexArray
name|vertexCoordinateArray
decl_stmt|;
name|QGL2PEXVertexArray
name|textureCoordinateArray
decl_stmt|;
name|QVector
operator|<
name|GLushort
operator|>
name|elementIndices
expr_stmt|;
name|GLuint
name|elementIndicesVBOId
decl_stmt|;
name|QDataBuffer
operator|<
name|GLfloat
operator|>
name|opacityArray
expr_stmt|;
name|GLfloat
name|staticVertexCoordinateArray
index|[
literal|8
index|]
decl_stmt|;
name|GLfloat
name|staticTextureCoordinateArray
index|[
literal|8
index|]
decl_stmt|;
name|bool
name|snapToPixelGrid
decl_stmt|;
name|bool
name|nativePaintingActive
decl_stmt|;
name|GLfloat
name|pmvMatrix
index|[
literal|3
index|]
index|[
literal|3
index|]
decl_stmt|;
name|GLfloat
name|inverseScale
decl_stmt|;
name|GLuint
name|lastTextureUsed
decl_stmt|;
name|GLuint
name|lastMaskTextureUsed
decl_stmt|;
name|bool
name|needsSync
decl_stmt|;
name|bool
name|multisamplingAlwaysEnabled
decl_stmt|;
name|GLfloat
name|depthRange
index|[
literal|2
index|]
decl_stmt|;
name|float
name|textureInvertedY
decl_stmt|;
name|QTriangulatingStroker
name|stroker
decl_stmt|;
name|QDashedStrokeProcessor
name|dasher
decl_stmt|;
name|QSet
operator|<
name|QVectorPath
operator|::
name|CacheEntry
operator|*
operator|>
name|pathCaches
expr_stmt|;
name|QVector
operator|<
name|GLuint
operator|>
name|unusedVBOSToClean
expr_stmt|;
name|QVector
operator|<
name|GLuint
operator|>
name|unusedIBOSToClean
expr_stmt|;
specifier|const
name|GLfloat
modifier|*
name|vertexAttribPointers
index|[
literal|3
index|]
decl_stmt|;
name|GLfloat
name|translateZ
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_expr_stmt
DECL|function|setVertexAttributePointer
name|void
name|QGL2PaintEngineExPrivate
operator|::
name|setVertexAttributePointer
argument_list|(
argument|unsigned int arrayIndex
argument_list|,
argument|const GLfloat *pointer
argument_list|)
block|{
name|Q_ASSERT
argument_list|(
name|arrayIndex
operator|<
literal|3
argument_list|)
block|;
if|if
condition|(
name|pointer
operator|==
name|vertexAttribPointers
index|[
name|arrayIndex
index|]
condition|)
return|return;
name|vertexAttribPointers
index|[
name|arrayIndex
index|]
operator|=
name|pointer
expr_stmt|;
end_expr_stmt
begin_if
if|if
condition|(
name|arrayIndex
operator|==
name|QT_OPACITY_ATTR
condition|)
name|glVertexAttribPointer
argument_list|(
name|arrayIndex
argument_list|,
literal|1
argument_list|,
name|GL_FLOAT
argument_list|,
name|GL_FALSE
argument_list|,
literal|0
argument_list|,
name|pointer
argument_list|)
expr_stmt|;
else|else
name|glVertexAttribPointer
argument_list|(
name|arrayIndex
argument_list|,
literal|2
argument_list|,
name|GL_FLOAT
argument_list|,
name|GL_FALSE
argument_list|,
literal|0
argument_list|,
name|pointer
argument_list|)
expr_stmt|;
end_if
begin_endif
unit|}  QT_END_NAMESPACE
endif|#
directive|endif
end_endif
begin_comment
comment|// QPAINTENGINEEX_OPENGL2_P_H
end_comment
end_unit
