begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the documentation of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names **     of its contributors may be used to endorse or promote products derived **     from this software without specific prior written permission. ** ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|//! [0]
end_comment
begin_decl_stmt
DECL|variable|fmt
name|QGLFormat
name|fmt
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|fmt
operator|.
name|setAlpha
argument_list|(
literal|true
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|fmt
operator|.
name|setStereo
argument_list|(
literal|true
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QGLFormat
operator|::
name|setDefaultFormat
argument_list|(
name|fmt
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|//! [0]
end_comment
begin_comment
comment|//! [1]
end_comment
begin_decl_stmt
DECL|variable|fmt
name|QGLFormat
name|fmt
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|fmt
operator|.
name|setDoubleBuffer
argument_list|(
literal|false
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// single buffer
end_comment
begin_expr_stmt
name|fmt
operator|.
name|setDirectRendering
argument_list|(
literal|false
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// software rendering
end_comment
begin_decl_stmt
DECL|variable|myWidget
name|MyGLWidget
modifier|*
name|myWidget
init|=
operator|new
name|MyGLWidget
argument_list|(
name|fmt
argument_list|,
operator|...
argument_list|)
decl_stmt|;
end_decl_stmt
begin_comment
comment|//! [1]
end_comment
begin_comment
comment|//! [2]
end_comment
begin_decl_stmt
DECL|variable|fmt
name|QGLFormat
name|fmt
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|fmt
operator|.
name|setOverlay
argument_list|(
literal|true
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|fmt
operator|.
name|setStereo
argument_list|(
literal|true
argument_list|)
expr_stmt|;
end_expr_stmt
begin_decl_stmt
DECL|variable|myWidget
name|MyGLWidget
modifier|*
name|myWidget
init|=
operator|new
name|MyGLWidget
argument_list|(
name|fmt
argument_list|,
operator|...
argument_list|)
decl_stmt|;
end_decl_stmt
begin_if
if|if
condition|(
operator|!
name|myWidget
operator|->
name|format
argument_list|()
operator|.
name|stereo
argument_list|()
condition|)
block|{
comment|// ok, goggles off
if|if
condition|(
operator|!
name|myWidget
operator|->
name|format
argument_list|()
operator|.
name|hasOverlay
argument_list|()
condition|)
block|{
name|qFatal
argument_list|(
literal|"Cool hardware required"
argument_list|)
expr_stmt|;
block|}
block|}
end_if
begin_comment
comment|//! [2]
end_comment
begin_comment
comment|//! [3]
end_comment
begin_comment
comment|// The rendering in MyGLWidget depends on using
end_comment
begin_comment
comment|// stencil buffer and alpha channel
end_comment
begin_constructor
DECL|function|MyGLWidget
name|MyGLWidget
operator|::
name|MyGLWidget
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QGLWidget
argument_list|(
name|QGLFormat
argument_list|(
name|QGL
operator|::
name|StencilBuffer
operator||
name|QGL
operator|::
name|AlphaChannel
argument_list|)
argument_list|,
name|parent
argument_list|)
block|{
if|if
condition|(
operator|!
name|format
argument_list|()
operator|.
name|stencil
argument_list|()
condition|)
name|qWarning
argument_list|(
literal|"Could not get stencil buffer; results will be suboptimal"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|format
argument_list|()
operator|.
name|alpha
argument_list|()
condition|)
name|qWarning
argument_list|(
literal|"Could not get alpha channel; results will be suboptimal"
argument_list|)
expr_stmt|;
operator|...
block|}
end_constructor
begin_comment
comment|//! [3]
end_comment
begin_comment
comment|//! [4]
end_comment
begin_function_decl
name|QApplication
name|a
parameter_list|(
name|argc
parameter_list|,
name|argv
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
DECL|variable|f
name|QGLFormat
name|f
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|f
operator|.
name|setDoubleBuffer
argument_list|(
literal|false
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QGLFormat
operator|::
name|setDefaultFormat
argument_list|(
name|f
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|//! [4]
end_comment
begin_comment
comment|//! [5]
end_comment
begin_decl_stmt
DECL|variable|f
name|QGLFormat
name|f
init|=
name|QGLFormat
operator|::
name|defaultOverlayFormat
argument_list|()
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|f
operator|.
name|setDoubleBuffer
argument_list|(
literal|true
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QGLFormat
operator|::
name|setDefaultOverlayFormat
argument_list|(
name|f
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|//! [5]
end_comment
begin_comment
comment|//! [6]
end_comment
begin_comment
comment|// ...continued from above
end_comment
begin_decl_stmt
DECL|variable|myWidget
name|MyGLWidget
modifier|*
name|myWidget
init|=
operator|new
name|MyGLWidget
argument_list|(
name|QGLFormat
argument_list|(
name|QGL
operator|::
name|HasOverlay
argument_list|)
argument_list|,
operator|...
argument_list|)
decl_stmt|;
end_decl_stmt
begin_if
if|if
condition|(
name|myWidget
operator|->
name|format
argument_list|()
operator|.
name|hasOverlay
argument_list|()
condition|)
block|{
comment|// Yes, we got an overlay, let's check _its_ format:
name|QGLContext
modifier|*
name|olContext
init|=
name|myWidget
operator|->
name|overlayContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|olContext
operator|->
name|format
argument_list|()
operator|.
name|doubleBuffer
argument_list|()
condition|)
empty_stmt|;
comment|// yes, we got a double buffered overlay
else|else
empty_stmt|;
comment|// no, only single buffered overlays are available
block|}
end_if
begin_comment
comment|//! [6]
end_comment
begin_comment
comment|//! [7]
end_comment
begin_decl_stmt
DECL|variable|cx
name|QGLContext
modifier|*
name|cx
decl_stmt|;
end_decl_stmt
begin_comment
comment|//  ...
end_comment
begin_decl_stmt
DECL|variable|f
name|QGLFormat
name|f
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|f
operator|.
name|setStereo
argument_list|(
literal|true
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|cx
operator|->
name|setFormat
argument_list|(
name|f
argument_list|)
expr_stmt|;
end_expr_stmt
begin_if
if|if
condition|(
operator|!
name|cx
operator|->
name|create
argument_list|()
condition|)
name|exit
argument_list|()
expr_stmt|;
end_if
begin_comment
comment|// no OpenGL support, or cannot render on the specified paintdevice
end_comment
begin_if
if|if
condition|(
operator|!
name|cx
operator|->
name|format
argument_list|()
operator|.
name|stereo
argument_list|()
condition|)
name|exit
argument_list|()
expr_stmt|;
end_if
begin_comment
comment|// could not create stereo context
end_comment
begin_comment
comment|//! [7]
end_comment
begin_comment
comment|//! [8]
end_comment
begin_class
DECL|class|MyGLDrawer
class|class
name|MyGLDrawer
super|:
specifier|public
name|QGLWidget
block|{
name|Q_OBJECT
comment|// must include this if you use Qt signals/slots
public|public:
DECL|function|MyGLDrawer
name|MyGLDrawer
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QGLWidget
argument_list|(
name|parent
argument_list|)
block|{}
protected|protected:
DECL|function|initializeGL
name|void
name|initializeGL
parameter_list|()
block|{
comment|// Set up the rendering context, define display lists etc.:
operator|...
name|glClearColor
argument_list|(
literal|0.0
argument_list|,
literal|0.0
argument_list|,
literal|0.0
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
name|glEnable
argument_list|(
name|GL_DEPTH_TEST
argument_list|)
expr_stmt|;
operator|...
block|}
DECL|function|resizeGL
name|void
name|resizeGL
parameter_list|(
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|)
block|{
comment|// setup viewport, projection etc.:
name|glViewport
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|(
name|GLint
operator|)
name|w
argument_list|,
operator|(
name|GLint
operator|)
name|h
argument_list|)
expr_stmt|;
operator|...
name|glFrustum
argument_list|(
operator|...
argument_list|)
expr_stmt|;
operator|...
block|}
DECL|function|paintGL
name|void
name|paintGL
parameter_list|()
block|{
comment|// draw the scene:
operator|...
name|glRotatef
argument_list|(
operator|...
argument_list|)
expr_stmt|;
name|glMaterialfv
argument_list|(
operator|...
argument_list|)
expr_stmt|;
name|glBegin
argument_list|(
name|GL_QUADS
argument_list|)
expr_stmt|;
name|glVertex3f
argument_list|(
operator|...
argument_list|)
expr_stmt|;
name|glVertex3f
argument_list|(
operator|...
argument_list|)
expr_stmt|;
operator|...
name|glEnd
argument_list|()
expr_stmt|;
operator|...
block|}
block|}
class|;
end_class
begin_comment
comment|//! [8]
end_comment
end_unit
