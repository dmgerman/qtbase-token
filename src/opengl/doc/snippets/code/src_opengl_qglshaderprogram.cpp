begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the documentation of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names **     of its contributors may be used to endorse or promote products derived **     from this software without specific prior written permission. ** ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|//! [0]
end_comment
begin_function_decl
name|QGLShader
name|shader
parameter_list|(
name|QGLShader
operator|::
name|Vertex
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|shader
operator|.
name|compileSourceCode
argument_list|(
name|code
argument_list|)
expr_stmt|;
end_expr_stmt
begin_function_decl
name|QGLShaderProgram
name|program
parameter_list|(
name|context
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|program
operator|.
name|addShader
argument_list|(
name|shader
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|program
operator|.
name|link
argument_list|()
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|program
operator|.
name|bind
argument_list|()
expr_stmt|;
end_expr_stmt
begin_comment
comment|//! [0]
end_comment
begin_comment
comment|//! [1]
end_comment
begin_expr_stmt
name|program
operator|.
name|addShaderFromSourceCode
argument_list|(
name|QGLShader
operator|::
name|Vertex
argument_list|,
literal|"attribute highp vec4 vertex;\n"
literal|"uniform highp mat4 matrix;\n"
literal|"void main(void)\n"
literal|"{\n"
literal|"   gl_Position = matrix * vertex;\n"
literal|"}"
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|program
operator|.
name|addShaderFromSourceCode
argument_list|(
name|QGLShader
operator|::
name|Fragment
argument_list|,
literal|"uniform mediump vec4 color;\n"
literal|"void main(void)\n"
literal|"{\n"
literal|"   gl_FragColor = color;\n"
literal|"}"
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|program
operator|.
name|link
argument_list|()
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|program
operator|.
name|bind
argument_list|()
expr_stmt|;
end_expr_stmt
begin_decl_stmt
DECL|variable|vertexLocation
name|int
name|vertexLocation
init|=
name|program
operator|.
name|attributeLocation
argument_list|(
literal|"vertex"
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|matrixLocation
name|int
name|matrixLocation
init|=
name|program
operator|.
name|uniformLocation
argument_list|(
literal|"matrix"
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|colorLocation
name|int
name|colorLocation
init|=
name|program
operator|.
name|uniformLocation
argument_list|(
literal|"color"
argument_list|)
decl_stmt|;
end_decl_stmt
begin_comment
comment|//! [1]
end_comment
begin_comment
comment|//! [2]
end_comment
begin_decl_stmt
DECL|variable|triangleVertices
specifier|static
name|GLfloat
specifier|const
name|triangleVertices
index|[]
init|=
block|{
literal|60.0f
block|,
literal|10.0f
block|,
literal|0.0f
block|,
literal|110.0f
block|,
literal|110.0f
block|,
literal|0.0f
block|,
literal|10.0f
block|,
literal|110.0f
block|,
literal|0.0f
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QColor
name|color
argument_list|(
literal|0
argument_list|,
literal|255
argument_list|,
literal|0
argument_list|,
literal|255
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|pmvMatrix
name|QMatrix4x4
name|pmvMatrix
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|pmvMatrix
operator|.
name|ortho
argument_list|(
name|rect
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|program
operator|.
name|enableAttributeArray
argument_list|(
name|vertexLocation
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|program
operator|.
name|setAttributeArray
argument_list|(
name|vertexLocation
argument_list|,
name|triangleVertices
argument_list|,
literal|3
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|program
operator|.
name|setUniformValue
argument_list|(
name|matrixLocation
argument_list|,
name|pmvMatrix
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|program
operator|.
name|setUniformValue
argument_list|(
name|colorLocation
argument_list|,
name|color
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|glDrawArrays
argument_list|(
name|GL_TRIANGLES
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|program
operator|.
name|disableAttributeArray
argument_list|(
name|vertexLocation
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|//! [2]
end_comment
end_unit
