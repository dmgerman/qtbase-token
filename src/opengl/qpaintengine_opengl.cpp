begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtOpenGL module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<private/qfontengine_p.h>
end_include
begin_include
include|#
directive|include
file|<qmath.h>
end_include
begin_include
include|#
directive|include
file|<private/qmath_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qdrawhelper_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qpaintengine_p.h>
end_include
begin_include
include|#
directive|include
file|"qapplication.h"
end_include
begin_include
include|#
directive|include
file|"qbrush.h"
end_include
begin_include
include|#
directive|include
file|"qgl.h"
end_include
begin_include
include|#
directive|include
file|<private/qgl_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qglpaintdevice_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qpainter_p.h>
end_include
begin_include
include|#
directive|include
file|"qmap.h"
end_include
begin_include
include|#
directive|include
file|<private/qpaintengine_opengl_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qdatabuffer_p.h>
end_include
begin_include
include|#
directive|include
file|"qpen.h"
end_include
begin_include
include|#
directive|include
file|"qvarlengtharray.h"
end_include
begin_include
include|#
directive|include
file|<private/qpainter_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qglpixelbuffer_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qbezier_p.h>
end_include
begin_include
include|#
directive|include
file|<qglframebufferobject.h>
end_include
begin_include
include|#
directive|include
file|<private/qstatictext_p.h>
end_include
begin_include
include|#
directive|include
file|"private/qtessellator_p.h"
end_include
begin_include
include|#
directive|include
file|"util/fragmentprograms_p.h"
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_QWS
end_ifdef
begin_include
include|#
directive|include
file|"private/qglwindowsurface_qws_p.h"
end_include
begin_include
include|#
directive|include
file|"qwsmanager_qws.h"
end_include
begin_include
include|#
directive|include
file|"private/qwsmanager_p.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_define
DECL|macro|QGL_FUNC_CONTEXT
define|#
directive|define
name|QGL_FUNC_CONTEXT
value|QGLContext *ctx = const_cast<QGLContext *>(device->context());
end_define
begin_include
include|#
directive|include
file|<stdlib.h>
end_include
begin_include
include|#
directive|include
file|"qpaintengine_opengl_p.h"
end_include
begin_function_decl
name|QT_BEGIN_NAMESPACE
name|Q_GUI_EXPORT
name|QImage
name|qt_imageForBrush
parameter_list|(
name|int
name|brushStyle
parameter_list|,
name|bool
name|invert
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|//in qbrush.cpp
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|QT_MAC_USE_COCOA
end_ifdef
begin_function_decl
specifier|extern
name|void
modifier|*
name|qt_current_nsopengl_context
parameter_list|()
function_decl|;
end_function_decl
begin_comment
comment|// qgl_mac.mm
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_define
DECL|macro|QREAL_MAX
define|#
directive|define
name|QREAL_MAX
value|9e100
end_define
begin_define
DECL|macro|QREAL_MIN
define|#
directive|define
name|QREAL_MIN
value|-9e100
end_define
begin_function_decl
specifier|extern
name|int
name|qt_next_power_of_two
parameter_list|(
name|int
name|v
parameter_list|)
function_decl|;
end_function_decl
begin_define
DECL|macro|DISABLE_DEBUG_ONCE
define|#
directive|define
name|DISABLE_DEBUG_ONCE
end_define
begin_comment
comment|//#define DEBUG_DISPLAY_MASK_TEXTURE
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|DISABLE_DEBUG_ONCE
end_ifdef
begin_define
DECL|macro|DEBUG_OVERRIDE
define|#
directive|define
name|DEBUG_OVERRIDE
parameter_list|(
name|state
parameter_list|)
value|;
end_define
begin_define
DECL|macro|DEBUG_ONCE_STR
define|#
directive|define
name|DEBUG_ONCE_STR
parameter_list|(
name|str
parameter_list|)
value|;
end_define
begin_define
DECL|macro|DEBUG_ONCE
define|#
directive|define
name|DEBUG_ONCE
value|if (0)
end_define
begin_else
else|#
directive|else
end_else
begin_decl_stmt
DECL|variable|DEBUG_OVERRIDE_FLAG
specifier|static
name|int
name|DEBUG_OVERRIDE_FLAG
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|DEBUG_TEMP_FLAG
specifier|static
name|bool
name|DEBUG_TEMP_FLAG
decl_stmt|;
end_decl_stmt
begin_define
DECL|macro|DEBUG_OVERRIDE
define|#
directive|define
name|DEBUG_OVERRIDE
parameter_list|(
name|state
parameter_list|)
value|{ state ? ++DEBUG_OVERRIDE_FLAG : --DEBUG_OVERRIDE_FLAG; }
end_define
begin_define
DECL|macro|DEBUG_ONCE
define|#
directive|define
name|DEBUG_ONCE
value|if ((DEBUG_TEMP_FLAG = DEBUG_OVERRIDE_FLAG)&& 0) ; else for (static int DEBUG_ONCE_FLAG = false; !DEBUG_ONCE_FLAG || DEBUG_TEMP_FLAG; DEBUG_ONCE_FLAG = true, DEBUG_TEMP_FLAG = false)
end_define
begin_define
DECL|macro|DEBUG_ONCE_STR
define|#
directive|define
name|DEBUG_ONCE_STR
parameter_list|(
name|str
parameter_list|)
value|DEBUG_ONCE qDebug()<< (str);
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_X11
end_ifdef
begin_decl_stmt
DECL|variable|qt_nvidiaFboNeedsFinish
specifier|static
name|bool
name|qt_nvidiaFboNeedsFinish
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|qt_glColor4ubv
specifier|static
specifier|inline
name|void
name|qt_glColor4ubv
parameter_list|(
name|unsigned
name|char
modifier|*
name|col
parameter_list|)
block|{
name|glColor4f
argument_list|(
name|col
index|[
literal|0
index|]
operator|/
literal|255.0f
argument_list|,
name|col
index|[
literal|1
index|]
operator|/
literal|255.0f
argument_list|,
name|col
index|[
literal|2
index|]
operator|/
literal|255.0f
argument_list|,
name|col
index|[
literal|3
index|]
operator|/
literal|255.0f
argument_list|)
expr_stmt|;
block|}
end_function
begin_struct
DECL|struct|QT_PointF
struct|struct
name|QT_PointF
block|{
DECL|member|x
name|qreal
name|x
decl_stmt|;
DECL|member|y
name|qreal
name|y
decl_stmt|;
block|}
struct|;
end_struct
begin_struct
DECL|struct|QGLTrapezoid
struct|struct
name|QGLTrapezoid
block|{
DECL|function|QGLTrapezoid
name|QGLTrapezoid
parameter_list|()
block|{}
DECL|function|QGLTrapezoid
name|QGLTrapezoid
parameter_list|(
name|qreal
name|top_
parameter_list|,
name|qreal
name|bottom_
parameter_list|,
name|qreal
name|topLeftX_
parameter_list|,
name|qreal
name|topRightX_
parameter_list|,
name|qreal
name|bottomLeftX_
parameter_list|,
name|qreal
name|bottomRightX_
parameter_list|)
member_init_list|:
name|top
argument_list|(
name|top_
argument_list|)
member_init_list|,
name|bottom
argument_list|(
name|bottom_
argument_list|)
member_init_list|,
name|topLeftX
argument_list|(
name|topLeftX_
argument_list|)
member_init_list|,
name|topRightX
argument_list|(
name|topRightX_
argument_list|)
member_init_list|,
name|bottomLeftX
argument_list|(
name|bottomLeftX_
argument_list|)
member_init_list|,
name|bottomRightX
argument_list|(
name|bottomRightX_
argument_list|)
block|{}
specifier|const
name|QGLTrapezoid
name|translated
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|delta
parameter_list|)
specifier|const
function_decl|;
DECL|member|top
name|qreal
name|top
decl_stmt|;
DECL|member|bottom
name|qreal
name|bottom
decl_stmt|;
DECL|member|topLeftX
name|qreal
name|topLeftX
decl_stmt|;
DECL|member|topRightX
name|qreal
name|topRightX
decl_stmt|;
DECL|member|bottomLeftX
name|qreal
name|bottomLeftX
decl_stmt|;
DECL|member|bottomRightX
name|qreal
name|bottomRightX
decl_stmt|;
block|}
struct|;
end_struct
begin_function
DECL|function|translated
specifier|const
name|QGLTrapezoid
name|QGLTrapezoid
operator|::
name|translated
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|delta
parameter_list|)
specifier|const
block|{
name|QGLTrapezoid
name|trap
argument_list|(
operator|*
name|this
argument_list|)
decl_stmt|;
name|trap
operator|.
name|top
operator|+=
name|delta
operator|.
name|y
argument_list|()
expr_stmt|;
name|trap
operator|.
name|bottom
operator|+=
name|delta
operator|.
name|y
argument_list|()
expr_stmt|;
name|trap
operator|.
name|topLeftX
operator|+=
name|delta
operator|.
name|x
argument_list|()
expr_stmt|;
name|trap
operator|.
name|topRightX
operator|+=
name|delta
operator|.
name|x
argument_list|()
expr_stmt|;
name|trap
operator|.
name|bottomLeftX
operator|+=
name|delta
operator|.
name|x
argument_list|()
expr_stmt|;
name|trap
operator|.
name|bottomRightX
operator|+=
name|delta
operator|.
name|x
argument_list|()
expr_stmt|;
return|return
name|trap
return|;
block|}
end_function
begin_class_decl
class_decl|class
name|QOpenGLImmediateModeTessellator
class_decl|;
end_class_decl
begin_class_decl
class_decl|class
name|QGLMaskGenerator
class_decl|;
end_class_decl
begin_class_decl
class_decl|class
name|QGLOffscreen
class_decl|;
end_class_decl
begin_class
DECL|class|QGLMaskTextureCache
class|class
name|QGLMaskTextureCache
block|{
public|public:
name|void
name|setOffscreenSize
parameter_list|(
specifier|const
name|QSize
modifier|&
name|offscreenSize
parameter_list|)
function_decl|;
name|void
name|setDrawableSize
parameter_list|(
specifier|const
name|QSize
modifier|&
name|drawableSize
parameter_list|)
function_decl|;
DECL|struct|CacheLocation
struct|struct
name|CacheLocation
block|{
DECL|member|rect
name|QRect
name|rect
decl_stmt|;
DECL|member|channel
name|int
name|channel
decl_stmt|;
DECL|member|screen_rect
name|QRect
name|screen_rect
decl_stmt|;
block|}
struct|;
DECL|struct|CacheInfo
struct|struct
name|CacheInfo
block|{
DECL|function|CacheInfo
specifier|inline
name|CacheInfo
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|p
parameter_list|,
specifier|const
name|QTransform
modifier|&
name|m
parameter_list|,
name|qreal
name|w
init|=
operator|-
literal|1
parameter_list|)
member_init_list|:
name|path
argument_list|(
name|p
argument_list|)
member_init_list|,
name|matrix
argument_list|(
name|m
argument_list|)
member_init_list|,
name|stroke_width
argument_list|(
name|w
argument_list|)
member_init_list|,
name|age
argument_list|(
literal|0
argument_list|)
block|{}
DECL|member|path
name|QPainterPath
name|path
decl_stmt|;
DECL|member|matrix
name|QTransform
name|matrix
decl_stmt|;
DECL|member|stroke_width
name|qreal
name|stroke_width
decl_stmt|;
DECL|member|loc
name|CacheLocation
name|loc
decl_stmt|;
DECL|member|age
name|int
name|age
decl_stmt|;
block|}
struct|;
DECL|struct|QuadTreeNode
struct|struct
name|QuadTreeNode
block|{
DECL|member|key
name|quint64
name|key
decl_stmt|;
DECL|member|largest_available_block
name|int
name|largest_available_block
decl_stmt|;
DECL|member|largest_used_block
name|int
name|largest_used_block
decl_stmt|;
block|}
struct|;
name|CacheLocation
name|getMask
parameter_list|(
name|QGLMaskGenerator
modifier|&
name|maskGenerator
parameter_list|,
name|QOpenGLPaintEnginePrivate
modifier|*
name|engine
parameter_list|)
function_decl|;
DECL|typedef|QGLTextureCacheHash
typedef|typedef
name|QMultiHash
argument_list|<
name|quint64
argument_list|,
name|CacheInfo
argument_list|>
name|QGLTextureCacheHash
typedef|;
DECL|enumerator|block_size
enum|enum
block|{
name|block_size
init|=
literal|64
block|}
enum|;
comment|// throw out keys that are too old
name|void
name|maintainCache
parameter_list|()
function_decl|;
name|void
name|clearCache
parameter_list|()
function_decl|;
private|private:
name|quint64
name|hash
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|p
parameter_list|,
specifier|const
name|QTransform
modifier|&
name|m
parameter_list|,
name|qreal
name|w
parameter_list|)
function_decl|;
name|void
name|createMask
parameter_list|(
name|quint64
name|key
parameter_list|,
name|CacheInfo
modifier|&
name|info
parameter_list|,
name|QGLMaskGenerator
modifier|&
name|maskGenerator
parameter_list|)
function_decl|;
DECL|member|offscreenSize
name|QSize
name|offscreenSize
decl_stmt|;
DECL|member|drawableSize
name|QSize
name|drawableSize
decl_stmt|;
DECL|member|cache
name|QGLTextureCacheHash
name|cache
decl_stmt|;
DECL|member|occupied_quadtree
name|QVector
argument_list|<
name|QuadTreeNode
argument_list|>
name|occupied_quadtree
index|[
literal|4
index|]
decl_stmt|;
name|void
name|quadtreeUpdate
parameter_list|(
name|int
name|channel
parameter_list|,
name|int
name|node
parameter_list|,
name|int
name|current_block_size
parameter_list|)
function_decl|;
name|void
name|quadtreeAllocate
parameter_list|(
name|quint64
name|key
parameter_list|,
specifier|const
name|QSize
modifier|&
name|size
parameter_list|,
name|QRect
modifier|*
name|rect
parameter_list|,
name|int
modifier|*
name|channel
parameter_list|)
function_decl|;
name|bool
name|quadtreeFindAvailableLocation
parameter_list|(
specifier|const
name|QSize
modifier|&
name|size
parameter_list|,
name|QRect
modifier|*
name|rect
parameter_list|,
name|int
modifier|*
name|channel
parameter_list|)
function_decl|;
name|void
name|quadtreeFindExistingLocation
parameter_list|(
specifier|const
name|QSize
modifier|&
name|size
parameter_list|,
name|QRect
modifier|*
name|rect
parameter_list|,
name|int
modifier|*
name|channel
parameter_list|)
function_decl|;
name|void
name|quadtreeInsert
parameter_list|(
name|int
name|channel
parameter_list|,
name|quint64
name|key
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
name|int
name|node
init|=
literal|0
parameter_list|)
function_decl|;
name|void
name|quadtreeClear
parameter_list|(
name|int
name|channel
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
name|int
name|node
init|=
literal|0
parameter_list|)
function_decl|;
name|int
name|quadtreeBlocksize
parameter_list|(
name|int
name|node
parameter_list|)
function_decl|;
name|QPoint
name|quadtreeLocation
parameter_list|(
name|int
name|node
parameter_list|)
function_decl|;
DECL|member|engine
name|QOpenGLPaintEnginePrivate
modifier|*
name|engine
decl_stmt|;
block|}
class|;
end_class
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|QGLMaskTextureCache
argument_list|,
argument|qt_mask_texture_cache
argument_list|)
end_macro
begin_class
DECL|class|QGLOffscreen
class|class
name|QGLOffscreen
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|QGLOffscreen
name|QGLOffscreen
parameter_list|()
member_init_list|:
name|QObject
argument_list|()
member_init_list|,
name|offscreen
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|ctx
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|mask_dim
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|activated
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|bound
argument_list|(
literal|false
argument_list|)
block|{
name|connect
argument_list|(
name|QGLSignalProxy
operator|::
name|instance
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|aboutToDestroyContext
argument_list|(
specifier|const
name|QGLContext
operator|*
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|cleanupGLContextRefs
argument_list|(
specifier|const
name|QGLContext
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|inline
name|void
name|setDevice
parameter_list|(
name|QPaintDevice
modifier|*
name|pdev
parameter_list|)
function_decl|;
name|void
name|begin
parameter_list|()
function_decl|;
name|void
name|end
parameter_list|()
function_decl|;
specifier|inline
name|void
name|bind
parameter_list|()
function_decl|;
specifier|inline
name|void
name|release
parameter_list|()
function_decl|;
specifier|inline
name|bool
name|isBound
parameter_list|()
specifier|const
function_decl|;
specifier|inline
name|QSize
name|drawableSize
parameter_list|()
specifier|const
function_decl|;
specifier|inline
name|QSize
name|offscreenSize
parameter_list|()
specifier|const
function_decl|;
specifier|inline
name|GLuint
name|offscreenTexture
parameter_list|()
specifier|const
function_decl|;
name|QGLContext
modifier|*
name|context
parameter_list|()
specifier|const
function_decl|;
specifier|static
name|bool
name|isSupported
parameter_list|()
function_decl|;
specifier|inline
name|void
name|initialize
parameter_list|()
function_decl|;
specifier|inline
name|bool
name|isValid
parameter_list|()
specifier|const
function_decl|;
public|public
name|Q_SLOTS
public|:
DECL|function|cleanupGLContextRefs
name|void
name|cleanupGLContextRefs
parameter_list|(
specifier|const
name|QGLContext
modifier|*
name|context
parameter_list|)
block|{
if|if
condition|(
name|context
operator|==
name|ctx
condition|)
block|{
operator|delete
name|offscreen
expr_stmt|;
name|ctx
operator|=
literal|0
expr_stmt|;
name|offscreen
operator|=
literal|0
expr_stmt|;
name|mask_dim
operator|=
literal|0
expr_stmt|;
block|}
block|}
private|private:
DECL|member|device
name|QGLPaintDevice
modifier|*
name|device
decl_stmt|;
DECL|member|offscreen
name|QGLFramebufferObject
modifier|*
name|offscreen
decl_stmt|;
DECL|member|ctx
name|QGLContext
modifier|*
name|ctx
decl_stmt|;
comment|// dimensions of mask texture (square)
DECL|member|mask_dim
name|int
name|mask_dim
decl_stmt|;
DECL|member|last_failed_size
name|QSize
name|last_failed_size
decl_stmt|;
DECL|member|drawable_fbo
name|bool
name|drawable_fbo
decl_stmt|;
DECL|member|activated
name|bool
name|activated
decl_stmt|;
DECL|member|initialized
name|bool
name|initialized
decl_stmt|;
DECL|member|bound
name|bool
name|bound
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|setDevice
specifier|inline
name|void
name|QGLOffscreen
operator|::
name|setDevice
parameter_list|(
name|QPaintDevice
modifier|*
name|pdev
parameter_list|)
block|{
if|if
condition|(
name|pdev
operator|->
name|devType
argument_list|()
operator|==
name|QInternal
operator|::
name|OpenGL
condition|)
name|device
operator|=
cast|static_cast
argument_list|<
name|QGLPaintDevice
operator|*
argument_list|>
argument_list|(
name|pdev
argument_list|)
expr_stmt|;
else|else
name|device
operator|=
name|QGLPaintDevice
operator|::
name|getDevice
argument_list|(
name|pdev
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|device
condition|)
return|return;
name|drawable_fbo
operator|=
operator|(
name|pdev
operator|->
name|devType
argument_list|()
operator|==
name|QInternal
operator|::
name|FramebufferObject
operator|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|begin
name|void
name|QGLOffscreen
operator|::
name|begin
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_OPENGL_ES
name|initialized
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|activated
condition|)
name|initialize
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|initialize
name|void
name|QGLOffscreen
operator|::
name|initialize
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_OPENGL_ES
if|if
condition|(
name|initialized
condition|)
return|return;
name|activated
operator|=
literal|true
expr_stmt|;
name|initialized
operator|=
literal|true
expr_stmt|;
name|int
name|dim
init|=
name|qMax
argument_list|(
literal|2048
argument_list|,
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|qt_next_power_of_two
argument_list|(
name|qMax
argument_list|(
name|device
operator|->
name|size
argument_list|()
operator|.
name|width
argument_list|()
argument_list|,
name|device
operator|->
name|size
argument_list|()
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|bool
name|shared_context
init|=
name|QGLContext
operator|::
name|areSharing
argument_list|(
name|device
operator|->
name|context
argument_list|()
argument_list|,
name|ctx
argument_list|)
decl_stmt|;
name|bool
name|would_fail
init|=
name|last_failed_size
operator|.
name|isValid
argument_list|()
operator|&&
operator|(
name|device
operator|->
name|size
argument_list|()
operator|.
name|width
argument_list|()
operator|>=
name|last_failed_size
operator|.
name|width
argument_list|()
operator|||
name|device
operator|->
name|size
argument_list|()
operator|.
name|height
argument_list|()
operator|>=
name|last_failed_size
operator|.
name|height
argument_list|()
operator|)
decl_stmt|;
name|bool
name|needs_refresh
init|=
name|dim
operator|>
name|mask_dim
operator|||
operator|!
name|shared_context
decl_stmt|;
if|if
condition|(
name|needs_refresh
operator|&&
operator|!
name|would_fail
condition|)
block|{
name|DEBUG_ONCE
name|qDebug
argument_list|()
decl|<< "QGLOffscreen::initialize(): creating offscreen of size"<<
name|dim
decl_stmt|;
operator|delete
name|offscreen
expr_stmt|;
name|offscreen
operator|=
operator|new
name|QGLFramebufferObject
argument_list|(
name|dim
argument_list|,
name|dim
argument_list|,
name|GLenum
argument_list|(
name|GL_TEXTURE_2D
argument_list|)
argument_list|)
expr_stmt|;
name|mask_dim
operator|=
name|dim
expr_stmt|;
if|if
condition|(
operator|!
name|offscreen
operator|->
name|isValid
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"QGLOffscreen: Invalid offscreen fbo (size %dx%d)"
argument_list|,
name|mask_dim
argument_list|,
name|mask_dim
argument_list|)
expr_stmt|;
operator|delete
name|offscreen
expr_stmt|;
name|offscreen
operator|=
literal|0
expr_stmt|;
name|mask_dim
operator|=
literal|0
expr_stmt|;
name|last_failed_size
operator|=
name|device
operator|->
name|size
argument_list|()
expr_stmt|;
block|}
block|}
name|qt_mask_texture_cache
argument_list|()
operator|->
name|setOffscreenSize
argument_list|(
name|offscreenSize
argument_list|()
argument_list|)
expr_stmt|;
name|qt_mask_texture_cache
argument_list|()
operator|->
name|setDrawableSize
argument_list|(
name|device
operator|->
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ctx
operator|=
name|device
operator|->
name|context
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|isValid
specifier|inline
name|bool
name|QGLOffscreen
operator|::
name|isValid
parameter_list|()
specifier|const
block|{
return|return
name|offscreen
return|;
block|}
end_function
begin_function
DECL|function|end
name|void
name|QGLOffscreen
operator|::
name|end
parameter_list|()
block|{
if|if
condition|(
name|bound
condition|)
name|release
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|DEBUG_DISPLAY_MASK_TEXTURE
name|glReadBuffer
argument_list|(
name|GL_BACK
argument_list|)
expr_stmt|;
name|glDrawBuffer
argument_list|(
name|GL_BACK
argument_list|)
expr_stmt|;
name|glMatrixMode
argument_list|(
name|GL_MODELVIEW
argument_list|)
expr_stmt|;
name|glLoadIdentity
argument_list|()
expr_stmt|;
name|glColor4f
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|glDisable
argument_list|(
name|GL_DEPTH_TEST
argument_list|)
expr_stmt|;
name|glBlendFunc
argument_list|(
name|GL_ONE
argument_list|,
name|GL_ZERO
argument_list|)
expr_stmt|;
name|glColorMask
argument_list|(
name|GL_TRUE
argument_list|,
name|GL_TRUE
argument_list|,
name|GL_TRUE
argument_list|,
name|GL_TRUE
argument_list|)
expr_stmt|;
name|glEnable
argument_list|(
name|GL_TEXTURE_2D
argument_list|)
expr_stmt|;
name|glBindTexture
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
name|offscreen
operator|->
name|texture
argument_list|()
argument_list|)
expr_stmt|;
name|glBegin
argument_list|(
name|GL_QUADS
argument_list|)
expr_stmt|;
name|glTexCoord2f
argument_list|(
literal|0.0
argument_list|,
literal|1.0
argument_list|)
expr_stmt|;
name|glVertex2f
argument_list|(
literal|0.0
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
name|glTexCoord2f
argument_list|(
literal|1.0
argument_list|,
literal|1.0
argument_list|)
expr_stmt|;
name|glVertex2f
argument_list|(
name|drawable
operator|.
name|size
argument_list|()
operator|.
name|width
argument_list|()
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
name|glTexCoord2f
argument_list|(
literal|1.0
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
name|glVertex2f
argument_list|(
name|drawable
operator|.
name|size
argument_list|()
operator|.
name|width
argument_list|()
argument_list|,
name|drawable
operator|.
name|size
argument_list|()
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|glTexCoord2f
argument_list|(
literal|0.0
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
name|glVertex2f
argument_list|(
literal|0.0
argument_list|,
name|drawable
operator|.
name|size
argument_list|()
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|glEnd
argument_list|()
expr_stmt|;
name|glBindTexture
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|glDisable
argument_list|(
name|GL_TEXTURE_2D
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|bind
specifier|inline
name|void
name|QGLOffscreen
operator|::
name|bind
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_OPENGL_ES
name|Q_ASSERT
argument_list|(
name|initialized
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|offscreen
operator|||
name|bound
condition|)
return|return;
name|DEBUG_ONCE
name|qDebug
argument_list|()
decl|<< "QGLOffscreen: binding offscreen"
decl_stmt|;
name|offscreen
operator|->
name|bind
argument_list|()
expr_stmt|;
name|bound
operator|=
literal|true
expr_stmt|;
name|glViewport
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|offscreenSize
argument_list|()
operator|.
name|width
argument_list|()
argument_list|,
name|offscreenSize
argument_list|()
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|glMatrixMode
argument_list|(
name|GL_PROJECTION
argument_list|)
expr_stmt|;
name|glLoadIdentity
argument_list|()
expr_stmt|;
name|glOrtho
argument_list|(
literal|0
argument_list|,
name|offscreenSize
argument_list|()
operator|.
name|width
argument_list|()
argument_list|,
name|offscreenSize
argument_list|()
operator|.
name|height
argument_list|()
argument_list|,
literal|0
argument_list|,
operator|-
literal|999999
argument_list|,
literal|999999
argument_list|)
expr_stmt|;
name|glMatrixMode
argument_list|(
name|GL_MODELVIEW
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|release
specifier|inline
name|void
name|QGLOffscreen
operator|::
name|release
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_OPENGL_ES
if|if
condition|(
operator|!
name|offscreen
operator|||
operator|!
name|bound
condition|)
return|return;
ifdef|#
directive|ifdef
name|Q_WS_X11
comment|// workaround for bug in nvidia driver versions 9x.xx
if|if
condition|(
name|qt_nvidiaFboNeedsFinish
condition|)
name|glFinish
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|DEBUG_ONCE_STR
argument_list|(
literal|"QGLOffscreen: releasing offscreen"
argument_list|)
expr_stmt|;
if|if
condition|(
name|drawable_fbo
condition|)
name|device
operator|->
name|ensureActiveTarget
argument_list|()
expr_stmt|;
comment|//###
else|else
name|offscreen
operator|->
name|release
argument_list|()
expr_stmt|;
name|QSize
name|sz
argument_list|(
name|device
operator|->
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|glViewport
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|sz
operator|.
name|width
argument_list|()
argument_list|,
name|sz
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|glMatrixMode
argument_list|(
name|GL_PROJECTION
argument_list|)
expr_stmt|;
name|glLoadIdentity
argument_list|()
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_OPENGL_ES
name|glOrtho
argument_list|(
literal|0
argument_list|,
name|sz
operator|.
name|width
argument_list|()
argument_list|,
name|sz
operator|.
name|height
argument_list|()
argument_list|,
literal|0
argument_list|,
operator|-
literal|999999
argument_list|,
literal|999999
argument_list|)
expr_stmt|;
else|#
directive|else
name|glOrthof
argument_list|(
literal|0
argument_list|,
name|sz
operator|.
name|width
argument_list|()
argument_list|,
name|sz
operator|.
name|height
argument_list|()
argument_list|,
literal|0
argument_list|,
operator|-
literal|999999
argument_list|,
literal|999999
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|glMatrixMode
argument_list|(
name|GL_MODELVIEW
argument_list|)
expr_stmt|;
name|bound
operator|=
literal|false
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|isBound
specifier|inline
name|bool
name|QGLOffscreen
operator|::
name|isBound
parameter_list|()
specifier|const
block|{
return|return
name|bound
return|;
block|}
end_function
begin_function
DECL|function|drawableSize
specifier|inline
name|QSize
name|QGLOffscreen
operator|::
name|drawableSize
parameter_list|()
specifier|const
block|{
return|return
name|device
operator|->
name|size
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|offscreenSize
specifier|inline
name|QSize
name|QGLOffscreen
operator|::
name|offscreenSize
parameter_list|()
specifier|const
block|{
return|return
name|QSize
argument_list|(
name|mask_dim
argument_list|,
name|mask_dim
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|offscreenTexture
specifier|inline
name|GLuint
name|QGLOffscreen
operator|::
name|offscreenTexture
parameter_list|()
specifier|const
block|{
return|return
name|offscreen
condition|?
name|offscreen
operator|->
name|texture
argument_list|()
else|:
literal|0
return|;
block|}
end_function
begin_function
DECL|function|context
specifier|inline
name|QGLContext
modifier|*
name|QGLOffscreen
operator|::
name|context
parameter_list|()
specifier|const
block|{
return|return
name|ctx
return|;
block|}
end_function
begin_function
DECL|function|isSupported
name|bool
name|QGLOffscreen
operator|::
name|isSupported
parameter_list|()
block|{
return|return
operator|(
name|QGLExtensions
operator|::
name|glExtensions
argument_list|()
operator|&
name|QGLExtensions
operator|::
name|FramebufferObject
operator|)
return|;
comment|// for fbo
block|}
end_function
begin_struct
DECL|struct|QDrawQueueItem
struct|struct
name|QDrawQueueItem
block|{
DECL|function|QDrawQueueItem
name|QDrawQueueItem
parameter_list|(
name|qreal
name|_opacity
parameter_list|,
name|QBrush
name|_brush
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|_brush_origion
parameter_list|,
name|QPainter
operator|::
name|CompositionMode
name|_composition_mode
parameter_list|,
specifier|const
name|QTransform
modifier|&
name|_matrix
parameter_list|,
name|QGLMaskTextureCache
operator|::
name|CacheLocation
name|_location
parameter_list|)
member_init_list|:
name|opacity
argument_list|(
name|_opacity
argument_list|)
member_init_list|,
name|brush
argument_list|(
name|_brush
argument_list|)
member_init_list|,
name|brush_origin
argument_list|(
name|_brush_origion
argument_list|)
member_init_list|,
name|composition_mode
argument_list|(
name|_composition_mode
argument_list|)
member_init_list|,
name|matrix
argument_list|(
name|_matrix
argument_list|)
member_init_list|,
name|location
argument_list|(
name|_location
argument_list|)
block|{}
DECL|member|opacity
name|qreal
name|opacity
decl_stmt|;
DECL|member|brush
name|QBrush
name|brush
decl_stmt|;
DECL|member|brush_origin
name|QPointF
name|brush_origin
decl_stmt|;
DECL|member|composition_mode
name|QPainter
operator|::
name|CompositionMode
name|composition_mode
decl_stmt|;
DECL|member|matrix
name|QTransform
name|matrix
decl_stmt|;
DECL|member|location
name|QGLMaskTextureCache
operator|::
name|CacheLocation
name|location
decl_stmt|;
block|}
struct|;
end_struct
begin_comment
comment|////////// GL program cache: start
end_comment
begin_struct
DECL|struct|GLProgram
struct|struct
name|GLProgram
block|{
DECL|member|brush
name|int
name|brush
decl_stmt|;
comment|// brush index or mask index
DECL|member|mode
name|int
name|mode
decl_stmt|;
comment|// composition mode index
DECL|member|mask
name|bool
name|mask
decl_stmt|;
DECL|member|program
name|GLuint
name|program
decl_stmt|;
block|}
struct|;
end_struct
begin_typedef
DECL|typedef|QGLProgramHash
typedef|typedef
name|QMultiHash
argument_list|<
specifier|const
name|QGLContext
modifier|*
argument_list|,
name|GLProgram
argument_list|>
name|QGLProgramHash
typedef|;
end_typedef
begin_class
DECL|class|QGLProgramCache
class|class
name|QGLProgramCache
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|QGLProgramCache
name|QGLProgramCache
parameter_list|()
block|{
comment|// we have to know when a context is deleted so we can free
comment|// any program handles it holds
name|connect
argument_list|(
name|QGLSignalProxy
operator|::
name|instance
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|aboutToDestroyContext
argument_list|(
specifier|const
name|QGLContext
operator|*
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|cleanupPrograms
argument_list|(
specifier|const
name|QGLContext
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|~QGLProgramCache
name|~
name|QGLProgramCache
parameter_list|()
block|{
comment|// at this point the cache should contain 0 elements
comment|// Q_ASSERT(program.size() == 0);
block|}
DECL|function|getProgram
name|GLuint
name|getProgram
parameter_list|(
specifier|const
name|QGLContext
modifier|*
name|ctx
parameter_list|,
name|int
name|brush
parameter_list|,
name|int
name|mode
parameter_list|,
name|bool
name|mask_mode
parameter_list|)
block|{
comment|// 1. see if we have an entry for the ctx context
name|QList
argument_list|<
name|GLProgram
argument_list|>
name|progs
init|=
name|programs
operator|.
name|values
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|progs
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|GLProgram
modifier|&
name|prg
init|=
name|progs
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|mask_mode
condition|)
block|{
if|if
condition|(
name|prg
operator|.
name|mask
operator|&&
name|prg
operator|.
name|brush
operator|==
name|brush
condition|)
return|return
name|prg
operator|.
name|program
return|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|prg
operator|.
name|mask
operator|&&
name|prg
operator|.
name|brush
operator|==
name|brush
operator|&&
name|prg
operator|.
name|mode
operator|==
name|mode
condition|)
return|return
name|prg
operator|.
name|program
return|;
block|}
block|}
comment|// 2. try to find a match in a shared context, and update the
comment|// hash with the entry found
name|QList
argument_list|<
specifier|const
name|QGLContext
modifier|*
argument_list|>
name|contexts
init|=
name|programs
operator|.
name|uniqueKeys
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|contexts
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QGLContext
modifier|*
name|cx
init|=
name|contexts
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|cx
operator|!=
name|ctx
operator|&&
name|QGLContext
operator|::
name|areSharing
argument_list|(
name|cx
argument_list|,
name|ctx
argument_list|)
condition|)
block|{
name|QList
argument_list|<
name|GLProgram
argument_list|>
name|progs
init|=
name|programs
operator|.
name|values
argument_list|(
name|cx
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|progs
operator|.
name|size
argument_list|()
condition|;
operator|++
name|k
control|)
block|{
specifier|const
name|GLProgram
modifier|&
name|prg
init|=
name|progs
operator|.
name|at
argument_list|(
name|k
argument_list|)
decl_stmt|;
if|if
condition|(
name|mask_mode
condition|)
block|{
if|if
condition|(
name|prg
operator|.
name|mask
operator|&&
name|prg
operator|.
name|brush
operator|==
name|brush
condition|)
block|{
name|programs
operator|.
name|insert
argument_list|(
name|ctx
argument_list|,
name|prg
argument_list|)
expr_stmt|;
return|return
name|prg
operator|.
name|program
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|prg
operator|.
name|mask
operator|&&
name|prg
operator|.
name|brush
operator|==
name|brush
operator|&&
name|prg
operator|.
name|mode
operator|==
name|mode
condition|)
block|{
name|programs
operator|.
name|insert
argument_list|(
name|ctx
argument_list|,
name|prg
argument_list|)
expr_stmt|;
return|return
name|prg
operator|.
name|program
return|;
block|}
block|}
block|}
block|}
block|}
comment|// 3. compile a new program and place it into the cache
comment|// NB! assumes ctx is the current GL context
name|GLProgram
name|prg
decl_stmt|;
name|prg
operator|.
name|brush
operator|=
name|brush
expr_stmt|;
name|prg
operator|.
name|mode
operator|=
name|mode
expr_stmt|;
name|prg
operator|.
name|mask
operator|=
name|mask_mode
expr_stmt|;
name|glGenProgramsARB
argument_list|(
literal|1
argument_list|,
operator|&
name|prg
operator|.
name|program
argument_list|)
expr_stmt|;
name|glBindProgramARB
argument_list|(
name|GL_FRAGMENT_PROGRAM_ARB
argument_list|,
name|prg
operator|.
name|program
argument_list|)
expr_stmt|;
specifier|const
name|char
modifier|*
name|src
init|=
name|mask_mode
condition|?
name|mask_fragment_program_sources
index|[
name|brush
index|]
else|:
name|painter_fragment_program_sources
index|[
name|brush
index|]
index|[
name|mode
index|]
decl_stmt|;
comment|// necessary for .NET 2002, apparently
specifier|const
name|GLbyte
modifier|*
name|gl_src
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|GLbyte
operator|*
argument_list|>
argument_list|(
name|src
argument_list|)
decl_stmt|;
while|while
condition|(
name|glGetError
argument_list|()
operator|!=
name|GL_NO_ERROR
condition|)
block|{}
comment|// reset error state
name|glProgramStringARB
argument_list|(
name|GL_FRAGMENT_PROGRAM_ARB
argument_list|,
name|GL_PROGRAM_FORMAT_ASCII_ARB
argument_list|,
name|int
argument_list|(
name|strlen
argument_list|(
name|src
argument_list|)
argument_list|)
argument_list|,
name|gl_src
argument_list|)
expr_stmt|;
if|if
condition|(
name|glGetError
argument_list|()
operator|!=
name|GL_NO_ERROR
condition|)
block|{
comment|//            qDebug()<< "QGLProgramCache: Unable to compile fragment program.";
name|glDeleteProgramsARB
argument_list|(
literal|1
argument_list|,
operator|&
name|prg
operator|.
name|program
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|//        qDebug()<< "QGLProgramCache: Creating GL program:"<< prg.program<< hex<< ctx;
name|programs
operator|.
name|insert
argument_list|(
name|ctx
argument_list|,
name|prg
argument_list|)
expr_stmt|;
return|return
name|prg
operator|.
name|program
return|;
block|}
public|public
name|Q_SLOTS
public|:
DECL|function|cleanupPrograms
name|void
name|cleanupPrograms
parameter_list|(
specifier|const
name|QGLContext
modifier|*
name|context
parameter_list|)
block|{
name|QGLProgramHash
operator|::
name|iterator
name|it
init|=
name|programs
operator|.
name|begin
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|programs
operator|.
name|end
argument_list|()
condition|)
block|{
if|if
condition|(
name|it
operator|.
name|key
argument_list|()
operator|==
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|context
operator|->
name|isSharing
argument_list|()
condition|)
block|{
comment|// the ctx variable below is needed for the glDeleteProgramARB call
comment|// since it is resolved from our extension system
comment|// NB! assumes context is the current GL context
specifier|const
name|QGLContext
modifier|*
name|ctx
init|=
name|context
decl_stmt|;
comment|// qDebug()<< "QGLProgramHash: Deleting GL program:"<< it.value().program<< hex<< it.key();
name|glDeleteProgramsARB
argument_list|(
literal|1
argument_list|,
operator|&
name|it
operator|.
name|value
argument_list|()
operator|.
name|program
argument_list|)
expr_stmt|;
block|}
name|it
operator|=
name|programs
operator|.
name|erase
argument_list|(
name|it
argument_list|)
expr_stmt|;
block|}
else|else
block|{
operator|++
name|it
expr_stmt|;
block|}
block|}
block|}
private|private:
DECL|member|programs
name|QGLProgramHash
name|programs
decl_stmt|;
block|}
class|;
end_class
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|QGLProgramCache
argument_list|,
argument|qt_gl_program_cache
argument_list|)
end_macro
begin_comment
comment|////////// GL program cache: end
end_comment
begin_class_decl
class_decl|class
name|QOpenGLPaintEnginePrivate
class_decl|;
end_class_decl
begin_class
DECL|class|QGLPrivateCleanup
class|class
name|QGLPrivateCleanup
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|QGLPrivateCleanup
name|QGLPrivateCleanup
parameter_list|(
name|QOpenGLPaintEnginePrivate
modifier|*
name|priv
parameter_list|)
member_init_list|:
name|p
argument_list|(
name|priv
argument_list|)
block|{
name|connect
argument_list|(
name|QGLSignalProxy
operator|::
name|instance
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|aboutToDestroyContext
argument_list|(
specifier|const
name|QGLContext
operator|*
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|cleanupGLContextRefs
argument_list|(
specifier|const
name|QGLContext
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
public|public
name|Q_SLOTS
public|:
name|void
name|cleanupGLContextRefs
parameter_list|(
specifier|const
name|QGLContext
modifier|*
name|context
parameter_list|)
function_decl|;
private|private:
DECL|member|p
name|QOpenGLPaintEnginePrivate
modifier|*
name|p
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|QOpenGLPaintEnginePrivate
class|class
name|QOpenGLPaintEnginePrivate
super|:
specifier|public
name|QPaintEngineExPrivate
block|{
name|Q_DECLARE_PUBLIC
parameter_list|(
name|QOpenGLPaintEngine
parameter_list|)
specifier|public
private|:
DECL|function|QOpenGLPaintEnginePrivate
name|QOpenGLPaintEnginePrivate
parameter_list|()
member_init_list|:
name|opacity
argument_list|(
literal|1
argument_list|)
member_init_list|,
name|composition_mode
argument_list|(
name|QPainter
operator|::
name|CompositionMode_SourceOver
argument_list|)
member_init_list|,
name|has_fast_pen
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|use_stencil_method
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|dirty_drawable_texture
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|has_stencil_face_ext
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|use_fragment_programs
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|high_quality_antialiasing
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|use_smooth_pixmap_transform
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|use_emulation
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|txop
argument_list|(
name|QTransform
operator|::
name|TxNone
argument_list|)
member_init_list|,
name|inverseScale
argument_list|(
literal|1
argument_list|)
member_init_list|,
name|moveToCount
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|last_created_state
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|shader_ctx
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|grad_palette
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|tess_points
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|drawable_texture
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|ref_cleaner
argument_list|(
name|this
argument_list|)
block|{}
DECL|function|setGLPen
specifier|inline
name|void
name|setGLPen
parameter_list|(
specifier|const
name|QColor
modifier|&
name|c
parameter_list|)
block|{
name|uint
name|alpha
init|=
name|qRound
argument_list|(
name|c
operator|.
name|alpha
argument_list|()
operator|*
name|opacity
argument_list|)
decl_stmt|;
name|pen_color
index|[
literal|0
index|]
operator|=
name|qt_div_255
argument_list|(
name|c
operator|.
name|red
argument_list|()
operator|*
name|alpha
argument_list|)
expr_stmt|;
name|pen_color
index|[
literal|1
index|]
operator|=
name|qt_div_255
argument_list|(
name|c
operator|.
name|green
argument_list|()
operator|*
name|alpha
argument_list|)
expr_stmt|;
name|pen_color
index|[
literal|2
index|]
operator|=
name|qt_div_255
argument_list|(
name|c
operator|.
name|blue
argument_list|()
operator|*
name|alpha
argument_list|)
expr_stmt|;
name|pen_color
index|[
literal|3
index|]
operator|=
name|alpha
expr_stmt|;
block|}
DECL|function|setGLBrush
specifier|inline
name|void
name|setGLBrush
parameter_list|(
specifier|const
name|QColor
modifier|&
name|c
parameter_list|)
block|{
name|uint
name|alpha
init|=
name|qRound
argument_list|(
name|c
operator|.
name|alpha
argument_list|()
operator|*
name|opacity
argument_list|)
decl_stmt|;
name|brush_color
index|[
literal|0
index|]
operator|=
name|qt_div_255
argument_list|(
name|c
operator|.
name|red
argument_list|()
operator|*
name|alpha
argument_list|)
expr_stmt|;
name|brush_color
index|[
literal|1
index|]
operator|=
name|qt_div_255
argument_list|(
name|c
operator|.
name|green
argument_list|()
operator|*
name|alpha
argument_list|)
expr_stmt|;
name|brush_color
index|[
literal|2
index|]
operator|=
name|qt_div_255
argument_list|(
name|c
operator|.
name|blue
argument_list|()
operator|*
name|alpha
argument_list|)
expr_stmt|;
name|brush_color
index|[
literal|3
index|]
operator|=
name|alpha
expr_stmt|;
block|}
specifier|inline
name|void
name|setGradientOps
parameter_list|(
specifier|const
name|QBrush
modifier|&
name|brush
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|bounds
parameter_list|)
function_decl|;
name|void
name|createGradientPaletteTexture
parameter_list|(
specifier|const
name|QGradient
modifier|&
name|g
parameter_list|)
function_decl|;
name|void
name|updateGradient
parameter_list|(
specifier|const
name|QBrush
modifier|&
name|brush
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|bounds
parameter_list|)
function_decl|;
specifier|inline
name|void
name|lineToStencil
parameter_list|(
name|qreal
name|x
parameter_list|,
name|qreal
name|y
parameter_list|)
function_decl|;
specifier|inline
name|void
name|curveToStencil
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|cp1
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|cp2
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|ep
parameter_list|)
function_decl|;
name|void
name|pathToVertexArrays
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|path
parameter_list|)
function_decl|;
name|void
name|fillVertexArray
parameter_list|(
name|Qt
operator|::
name|FillRule
name|fillRule
parameter_list|)
function_decl|;
name|void
name|drawVertexArrays
parameter_list|()
function_decl|;
name|void
name|fillPath
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|path
parameter_list|)
function_decl|;
name|void
name|fillPolygon_dev
parameter_list|(
specifier|const
name|QPointF
modifier|*
name|polygonPoints
parameter_list|,
name|int
name|pointCount
parameter_list|,
name|Qt
operator|::
name|FillRule
name|fill
parameter_list|)
function_decl|;
name|void
name|drawFastRect
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|rect
parameter_list|)
function_decl|;
name|void
name|strokePath
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|path
parameter_list|,
name|bool
name|use_cache
parameter_list|)
function_decl|;
name|void
name|strokePathFastPen
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|path
parameter_list|,
name|bool
name|needsResolving
parameter_list|)
function_decl|;
name|void
name|strokeLines
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|path
parameter_list|)
function_decl|;
name|void
name|updateDepthClip
parameter_list|()
function_decl|;
name|void
name|systemStateChanged
parameter_list|()
function_decl|;
DECL|function|cleanupGLContextRefs
name|void
name|cleanupGLContextRefs
parameter_list|(
specifier|const
name|QGLContext
modifier|*
name|context
parameter_list|)
block|{
if|if
condition|(
name|context
operator|==
name|shader_ctx
condition|)
name|shader_ctx
operator|=
literal|0
expr_stmt|;
block|}
DECL|function|updateFastPen
specifier|inline
name|void
name|updateFastPen
parameter_list|()
block|{
name|qreal
name|pen_width
init|=
name|cpen
operator|.
name|widthF
argument_list|()
decl_stmt|;
name|has_fast_pen
operator|=
operator|(
operator|(
name|pen_width
operator|==
literal|0
operator|||
operator|(
name|pen_width
operator|<=
literal|1
operator|&&
name|matrix
operator|.
name|type
argument_list|()
operator|<=
name|QTransform
operator|::
name|TxTranslate
operator|)
operator|)
operator|||
name|cpen
operator|.
name|isCosmetic
argument_list|()
operator|)
operator|&&
name|cpen
operator|.
name|style
argument_list|()
operator|==
name|Qt
operator|::
name|SolidLine
operator|&&
name|cpen
operator|.
name|isSolid
argument_list|()
expr_stmt|;
block|}
name|void
name|disableClipping
parameter_list|()
function_decl|;
name|void
name|enableClipping
parameter_list|()
function_decl|;
name|void
name|ensureDrawableTexture
parameter_list|()
function_decl|;
DECL|member|cpen
name|QPen
name|cpen
decl_stmt|;
DECL|member|cbrush
name|QBrush
name|cbrush
decl_stmt|;
DECL|member|brush_style
name|Qt
operator|::
name|BrushStyle
name|brush_style
decl_stmt|;
DECL|member|brush_origin
name|QPointF
name|brush_origin
decl_stmt|;
DECL|member|pen_brush_style
name|Qt
operator|::
name|BrushStyle
name|pen_brush_style
decl_stmt|;
DECL|member|opacity
name|qreal
name|opacity
decl_stmt|;
DECL|member|composition_mode
name|QPainter
operator|::
name|CompositionMode
name|composition_mode
decl_stmt|;
DECL|member|current_style
name|Qt
operator|::
name|BrushStyle
name|current_style
decl_stmt|;
name|uint
name|has_pen
range|:
literal|1
decl_stmt|;
name|uint
name|has_brush
range|:
literal|1
decl_stmt|;
name|uint
name|has_fast_pen
range|:
literal|1
decl_stmt|;
name|uint
name|use_stencil_method
range|:
literal|1
decl_stmt|;
name|uint
name|dirty_drawable_texture
range|:
literal|1
decl_stmt|;
name|uint
name|has_stencil_face_ext
range|:
literal|1
decl_stmt|;
name|uint
name|use_fragment_programs
range|:
literal|1
decl_stmt|;
name|uint
name|high_quality_antialiasing
range|:
literal|1
decl_stmt|;
name|uint
name|has_antialiasing
range|:
literal|1
decl_stmt|;
name|uint
name|has_fast_composition_mode
range|:
literal|1
decl_stmt|;
name|uint
name|use_smooth_pixmap_transform
range|:
literal|1
decl_stmt|;
name|uint
name|use_system_clip
range|:
literal|1
decl_stmt|;
name|uint
name|use_emulation
range|:
literal|1
decl_stmt|;
DECL|member|dirty_stencil
name|QRegion
name|dirty_stencil
decl_stmt|;
name|void
name|updateUseEmulation
parameter_list|()
function_decl|;
DECL|member|matrix
name|QTransform
name|matrix
decl_stmt|;
DECL|member|pen_color
name|GLubyte
name|pen_color
index|[
literal|4
index|]
decl_stmt|;
DECL|member|brush_color
name|GLubyte
name|brush_color
index|[
literal|4
index|]
decl_stmt|;
DECL|member|txop
name|QTransform
operator|::
name|TransformationType
name|txop
decl_stmt|;
DECL|member|device
name|QGLPaintDevice
modifier|*
name|device
decl_stmt|;
DECL|member|offscreen
name|QGLOffscreen
name|offscreen
decl_stmt|;
DECL|member|inverseScale
name|qreal
name|inverseScale
decl_stmt|;
DECL|member|moveToCount
name|int
name|moveToCount
decl_stmt|;
DECL|member|path_start
name|QPointF
name|path_start
decl_stmt|;
name|bool
name|isFastRect
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|r
parameter_list|)
function_decl|;
name|void
name|drawImageAsPath
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|r
parameter_list|,
specifier|const
name|QImage
modifier|&
name|img
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|sr
parameter_list|)
function_decl|;
name|void
name|drawTiledImageAsPath
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|r
parameter_list|,
specifier|const
name|QImage
modifier|&
name|img
parameter_list|,
name|qreal
name|sx
parameter_list|,
name|qreal
name|sy
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|offset
parameter_list|)
function_decl|;
name|void
name|drawOffscreenPath
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|path
parameter_list|)
function_decl|;
name|void
name|composite
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|rect
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|maskOffset
init|=
name|QPoint
argument_list|()
parameter_list|)
function_decl|;
name|void
name|composite
parameter_list|(
name|GLuint
name|primitive
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|vertexArray
parameter_list|,
name|int
name|vertexCount
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|maskOffset
init|=
name|QPoint
argument_list|()
parameter_list|)
function_decl|;
name|bool
name|createFragmentPrograms
parameter_list|()
function_decl|;
name|void
name|deleteFragmentPrograms
parameter_list|()
function_decl|;
name|void
name|updateFragmentProgramData
parameter_list|(
name|int
name|locations
index|[]
parameter_list|)
function_decl|;
name|void
name|cacheItemErased
parameter_list|(
name|int
name|channel
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
function_decl|;
name|void
name|addItem
parameter_list|(
specifier|const
name|QGLMaskTextureCache
operator|::
name|CacheLocation
modifier|&
name|location
parameter_list|)
function_decl|;
name|void
name|drawItem
parameter_list|(
specifier|const
name|QDrawQueueItem
modifier|&
name|item
parameter_list|)
function_decl|;
name|void
name|flushDrawQueue
parameter_list|()
function_decl|;
name|void
name|copyDrawable
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|rect
parameter_list|)
function_decl|;
name|void
name|updateGLMatrix
parameter_list|()
specifier|const
function_decl|;
DECL|member|last_created_state
specifier|mutable
name|QPainterState
modifier|*
name|last_created_state
decl_stmt|;
DECL|member|shader_ctx
name|QGLContext
modifier|*
name|shader_ctx
decl_stmt|;
DECL|member|grad_palette
name|GLuint
name|grad_palette
decl_stmt|;
DECL|member|painter_fragment_programs
name|GLuint
name|painter_fragment_programs
index|[
name|num_fragment_brushes
index|]
index|[
name|num_fragment_composition_modes
index|]
decl_stmt|;
DECL|member|mask_fragment_programs
name|GLuint
name|mask_fragment_programs
index|[
name|num_fragment_masks
index|]
decl_stmt|;
DECL|member|inv_matrix_data
name|float
name|inv_matrix_data
index|[
literal|3
index|]
index|[
literal|4
index|]
decl_stmt|;
DECL|member|fmp_data
name|float
name|fmp_data
index|[
literal|4
index|]
decl_stmt|;
DECL|member|fmp2_m_radius2_data
name|float
name|fmp2_m_radius2_data
index|[
literal|4
index|]
decl_stmt|;
DECL|member|angle_data
name|float
name|angle_data
index|[
literal|4
index|]
decl_stmt|;
DECL|member|linear_data
name|float
name|linear_data
index|[
literal|4
index|]
decl_stmt|;
DECL|member|porterduff_ab_data
name|float
name|porterduff_ab_data
index|[
literal|4
index|]
decl_stmt|;
DECL|member|porterduff_xyz_data
name|float
name|porterduff_xyz_data
index|[
literal|4
index|]
decl_stmt|;
DECL|member|mask_offset_data
name|float
name|mask_offset_data
index|[
literal|4
index|]
decl_stmt|;
DECL|member|mask_channel_data
name|float
name|mask_channel_data
index|[
literal|4
index|]
decl_stmt|;
DECL|member|fragment_brush
name|FragmentBrushType
name|fragment_brush
decl_stmt|;
DECL|member|fragment_composition_mode
name|FragmentCompositionModeType
name|fragment_composition_mode
decl_stmt|;
name|void
name|setPorterDuffData
parameter_list|(
name|float
name|a
parameter_list|,
name|float
name|b
parameter_list|,
name|float
name|x
parameter_list|,
name|float
name|y
parameter_list|,
name|float
name|z
parameter_list|)
function_decl|;
name|void
name|setInvMatrixData
parameter_list|(
specifier|const
name|QTransform
modifier|&
name|inv_matrix
parameter_list|)
function_decl|;
DECL|member|max_x
name|qreal
name|max_x
decl_stmt|;
DECL|member|max_y
name|qreal
name|max_y
decl_stmt|;
DECL|member|min_x
name|qreal
name|min_x
decl_stmt|;
DECL|member|min_y
name|qreal
name|min_y
decl_stmt|;
DECL|member|tess_points
name|QDataBuffer
argument_list|<
name|QPointF
argument_list|>
name|tess_points
decl_stmt|;
DECL|member|tess_points_stops
name|QVector
argument_list|<
name|int
argument_list|>
name|tess_points_stops
decl_stmt|;
DECL|member|projection_matrix
name|GLdouble
name|projection_matrix
index|[
literal|4
index|]
index|[
literal|4
index|]
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_1
argument_list|)
operator|||
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
DECL|member|mv_matrix
name|GLfloat
name|mv_matrix
index|[
literal|4
index|]
index|[
literal|4
index|]
decl_stmt|;
else|#
directive|else
DECL|member|mv_matrix
name|GLdouble
name|mv_matrix
index|[
literal|4
index|]
index|[
literal|4
index|]
decl_stmt|;
endif|#
directive|endif
DECL|member|drawQueue
name|QList
argument_list|<
name|QDrawQueueItem
argument_list|>
name|drawQueue
decl_stmt|;
DECL|member|drawable_texture
name|GLuint
name|drawable_texture
decl_stmt|;
DECL|member|drawable_texture_size
name|QSize
name|drawable_texture_size
decl_stmt|;
DECL|member|max_texture_size
name|int
name|max_texture_size
decl_stmt|;
DECL|member|ref_cleaner
name|QGLPrivateCleanup
name|ref_cleaner
decl_stmt|;
friend|friend
class_decl|class
name|QGLMaskTextureCache
class_decl|;
block|}
class|;
end_class
begin_class
DECL|class|QOpenGLCoordinateOffset
class|class
name|QOpenGLCoordinateOffset
block|{
public|public:
name|QOpenGLCoordinateOffset
parameter_list|(
name|QOpenGLPaintEnginePrivate
modifier|*
name|d
parameter_list|)
constructor_decl|;
name|~
name|QOpenGLCoordinateOffset
parameter_list|()
destructor_decl|;
specifier|static
name|void
name|enableOffset
parameter_list|(
name|QOpenGLPaintEnginePrivate
modifier|*
name|d
parameter_list|)
function_decl|;
specifier|static
name|void
name|disableOffset
parameter_list|(
name|QOpenGLPaintEnginePrivate
modifier|*
name|d
parameter_list|)
function_decl|;
private|private:
DECL|member|d
name|QOpenGLPaintEnginePrivate
modifier|*
name|d
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|QOpenGLCoordinateOffset
name|QOpenGLCoordinateOffset
operator|::
name|QOpenGLCoordinateOffset
parameter_list|(
name|QOpenGLPaintEnginePrivate
modifier|*
name|d_
parameter_list|)
member_init_list|:
name|d
argument_list|(
name|d_
argument_list|)
block|{
name|enableOffset
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|enableOffset
name|void
name|QOpenGLCoordinateOffset
operator|::
name|enableOffset
parameter_list|(
name|QOpenGLPaintEnginePrivate
modifier|*
name|d
parameter_list|)
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|has_antialiasing
condition|)
block|{
name|glMatrixMode
argument_list|(
name|GL_MODELVIEW
argument_list|)
expr_stmt|;
name|glPushMatrix
argument_list|()
expr_stmt|;
name|d
operator|->
name|mv_matrix
index|[
literal|3
index|]
index|[
literal|0
index|]
operator|+=
literal|0.5
expr_stmt|;
name|d
operator|->
name|mv_matrix
index|[
literal|3
index|]
index|[
literal|1
index|]
operator|+=
literal|0.5
expr_stmt|;
name|d
operator|->
name|updateGLMatrix
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_destructor
DECL|function|~QOpenGLCoordinateOffset
name|QOpenGLCoordinateOffset
operator|::
name|~
name|QOpenGLCoordinateOffset
parameter_list|()
block|{
name|disableOffset
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|disableOffset
name|void
name|QOpenGLCoordinateOffset
operator|::
name|disableOffset
parameter_list|(
name|QOpenGLPaintEnginePrivate
modifier|*
name|d
parameter_list|)
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|has_antialiasing
condition|)
block|{
name|glMatrixMode
argument_list|(
name|GL_MODELVIEW
argument_list|)
expr_stmt|;
name|glPopMatrix
argument_list|()
expr_stmt|;
name|d
operator|->
name|mv_matrix
index|[
literal|3
index|]
index|[
literal|0
index|]
operator|-=
literal|0.5
expr_stmt|;
name|d
operator|->
name|mv_matrix
index|[
literal|3
index|]
index|[
literal|1
index|]
operator|-=
literal|0.5
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|cleanupGLContextRefs
name|void
name|QGLPrivateCleanup
operator|::
name|cleanupGLContextRefs
parameter_list|(
specifier|const
name|QGLContext
modifier|*
name|context
parameter_list|)
block|{
name|p
operator|->
name|cleanupGLContextRefs
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateTextureFilter
specifier|static
specifier|inline
name|void
name|updateTextureFilter
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|wrapMode
parameter_list|,
name|bool
name|smoothPixmapTransform
parameter_list|)
block|{
if|if
condition|(
name|smoothPixmapTransform
condition|)
block|{
name|glTexParameterf
argument_list|(
name|target
argument_list|,
name|GL_TEXTURE_MAG_FILTER
argument_list|,
name|GL_LINEAR
argument_list|)
expr_stmt|;
name|glTexParameterf
argument_list|(
name|target
argument_list|,
name|GL_TEXTURE_MIN_FILTER
argument_list|,
name|GL_LINEAR
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|glTexParameterf
argument_list|(
name|target
argument_list|,
name|GL_TEXTURE_MAG_FILTER
argument_list|,
name|GL_NEAREST
argument_list|)
expr_stmt|;
name|glTexParameterf
argument_list|(
name|target
argument_list|,
name|GL_TEXTURE_MIN_FILTER
argument_list|,
name|GL_NEAREST
argument_list|)
expr_stmt|;
block|}
name|glTexParameterf
argument_list|(
name|target
argument_list|,
name|GL_TEXTURE_WRAP_S
argument_list|,
name|wrapMode
argument_list|)
expr_stmt|;
name|glTexParameterf
argument_list|(
name|target
argument_list|,
name|GL_TEXTURE_WRAP_T
argument_list|,
name|wrapMode
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|strokeForPath
specifier|static
specifier|inline
name|QPainterPath
name|strokeForPath
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|path
parameter_list|,
specifier|const
name|QPen
modifier|&
name|cpen
parameter_list|)
block|{
name|QPainterPathStroker
name|stroker
decl_stmt|;
if|if
condition|(
name|cpen
operator|.
name|style
argument_list|()
operator|==
name|Qt
operator|::
name|CustomDashLine
condition|)
name|stroker
operator|.
name|setDashPattern
argument_list|(
name|cpen
operator|.
name|dashPattern
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|stroker
operator|.
name|setDashPattern
argument_list|(
name|cpen
operator|.
name|style
argument_list|()
argument_list|)
expr_stmt|;
name|stroker
operator|.
name|setCapStyle
argument_list|(
name|cpen
operator|.
name|capStyle
argument_list|()
argument_list|)
expr_stmt|;
name|stroker
operator|.
name|setJoinStyle
argument_list|(
name|cpen
operator|.
name|joinStyle
argument_list|()
argument_list|)
expr_stmt|;
name|stroker
operator|.
name|setMiterLimit
argument_list|(
name|cpen
operator|.
name|miterLimit
argument_list|()
argument_list|)
expr_stmt|;
name|stroker
operator|.
name|setDashOffset
argument_list|(
name|cpen
operator|.
name|dashOffset
argument_list|()
argument_list|)
expr_stmt|;
name|qreal
name|width
init|=
name|cpen
operator|.
name|widthF
argument_list|()
decl_stmt|;
if|if
condition|(
name|width
operator|==
literal|0
condition|)
name|stroker
operator|.
name|setWidth
argument_list|(
literal|1
argument_list|)
expr_stmt|;
else|else
name|stroker
operator|.
name|setWidth
argument_list|(
name|width
argument_list|)
expr_stmt|;
name|QPainterPath
name|stroke
init|=
name|stroker
operator|.
name|createStroke
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|stroke
operator|.
name|setFillRule
argument_list|(
name|Qt
operator|::
name|WindingFill
argument_list|)
expr_stmt|;
return|return
name|stroke
return|;
block|}
end_function
begin_class
DECL|class|QGLStrokeCache
class|class
name|QGLStrokeCache
block|{
DECL|struct|CacheInfo
struct|struct
name|CacheInfo
block|{
DECL|function|CacheInfo
specifier|inline
name|CacheInfo
parameter_list|(
name|QPainterPath
name|p
parameter_list|,
name|QPainterPath
name|sp
parameter_list|,
name|QPen
name|stroke_pen
parameter_list|)
member_init_list|:
name|path
argument_list|(
name|p
argument_list|)
member_init_list|,
name|stroked_path
argument_list|(
name|sp
argument_list|)
member_init_list|,
name|pen
argument_list|(
name|stroke_pen
argument_list|)
block|{}
DECL|member|path
name|QPainterPath
name|path
decl_stmt|;
DECL|member|stroked_path
name|QPainterPath
name|stroked_path
decl_stmt|;
DECL|member|pen
name|QPen
name|pen
decl_stmt|;
block|}
struct|;
DECL|typedef|QGLStrokeTableHash
typedef|typedef
name|QMultiHash
argument_list|<
name|quint64
argument_list|,
name|CacheInfo
argument_list|>
name|QGLStrokeTableHash
typedef|;
public|public:
DECL|function|getStrokedPath
specifier|inline
name|QPainterPath
name|getStrokedPath
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|path
parameter_list|,
specifier|const
name|QPen
modifier|&
name|pen
parameter_list|)
block|{
name|quint64
name|hash_val
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|path
operator|.
name|elementCount
argument_list|()
operator|&&
name|i
operator|<=
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|hash_val
operator|+=
name|quint64
argument_list|(
name|path
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
operator|.
name|x
argument_list|)
expr_stmt|;
name|hash_val
operator|+=
name|quint64
argument_list|(
name|path
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
operator|.
name|y
argument_list|)
expr_stmt|;
block|}
name|QGLStrokeTableHash
operator|::
name|const_iterator
name|it
init|=
name|cache
operator|.
name|constFind
argument_list|(
name|hash_val
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|==
name|cache
operator|.
name|constEnd
argument_list|()
condition|)
return|return
name|addCacheElement
argument_list|(
name|hash_val
argument_list|,
name|path
argument_list|,
name|pen
argument_list|)
return|;
else|else
block|{
do|do
block|{
specifier|const
name|CacheInfo
modifier|&
name|cache_info
init|=
name|it
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|cache_info
operator|.
name|path
operator|==
name|path
operator|&&
name|cache_info
operator|.
name|pen
operator|==
name|pen
condition|)
return|return
name|cache_info
operator|.
name|stroked_path
return|;
operator|++
name|it
expr_stmt|;
block|}
do|while
condition|(
name|it
operator|!=
name|cache
operator|.
name|constEnd
argument_list|()
operator|&&
name|it
operator|.
name|key
argument_list|()
operator|==
name|hash_val
condition|)
do|;
comment|// an exact match for this path was not found, create new cache element
return|return
name|addCacheElement
argument_list|(
name|hash_val
argument_list|,
name|path
argument_list|,
name|pen
argument_list|)
return|;
block|}
block|}
protected|protected:
DECL|function|maxCacheSize
specifier|inline
name|int
name|maxCacheSize
parameter_list|()
specifier|const
block|{
return|return
literal|500
return|;
block|}
DECL|function|addCacheElement
name|QPainterPath
name|addCacheElement
parameter_list|(
name|quint64
name|hash_val
parameter_list|,
name|QPainterPath
name|path
parameter_list|,
specifier|const
name|QPen
modifier|&
name|pen
parameter_list|)
block|{
if|if
condition|(
name|cache
operator|.
name|size
argument_list|()
operator|==
name|maxCacheSize
argument_list|()
condition|)
block|{
name|int
name|elem_to_remove
init|=
name|qrand
argument_list|()
operator|%
name|maxCacheSize
argument_list|()
decl_stmt|;
name|cache
operator|.
name|remove
argument_list|(
name|cache
operator|.
name|keys
argument_list|()
index|[
name|elem_to_remove
index|]
argument_list|)
expr_stmt|;
comment|// may remove more than 1, but OK
block|}
name|QPainterPath
name|stroke
init|=
name|strokeForPath
argument_list|(
name|path
argument_list|,
name|pen
argument_list|)
decl_stmt|;
name|CacheInfo
name|cache_entry
argument_list|(
name|path
argument_list|,
name|stroke
argument_list|,
name|pen
argument_list|)
decl_stmt|;
return|return
name|cache
operator|.
name|insert
argument_list|(
name|hash_val
argument_list|,
name|cache_entry
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|stroked_path
return|;
block|}
DECL|member|cache
name|QGLStrokeTableHash
name|cache
decl_stmt|;
block|}
class|;
end_class
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|QGLStrokeCache
argument_list|,
argument|qt_opengl_stroke_cache
argument_list|)
end_macro
begin_class
DECL|class|QGLGradientCache
class|class
name|QGLGradientCache
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
DECL|struct|CacheInfo
struct|struct
name|CacheInfo
block|{
DECL|function|CacheInfo
specifier|inline
name|CacheInfo
parameter_list|(
name|QGradientStops
name|s
parameter_list|,
name|qreal
name|op
parameter_list|,
name|QGradient
operator|::
name|InterpolationMode
name|mode
parameter_list|)
member_init_list|:
name|stops
argument_list|(
name|s
argument_list|)
member_init_list|,
name|opacity
argument_list|(
name|op
argument_list|)
member_init_list|,
name|interpolationMode
argument_list|(
name|mode
argument_list|)
block|{}
DECL|member|texId
name|GLuint
name|texId
decl_stmt|;
DECL|member|stops
name|QGradientStops
name|stops
decl_stmt|;
DECL|member|opacity
name|qreal
name|opacity
decl_stmt|;
DECL|member|interpolationMode
name|QGradient
operator|::
name|InterpolationMode
name|interpolationMode
decl_stmt|;
block|}
struct|;
DECL|typedef|QGLGradientColorTableHash
typedef|typedef
name|QMultiHash
argument_list|<
name|quint64
argument_list|,
name|CacheInfo
argument_list|>
name|QGLGradientColorTableHash
typedef|;
public|public:
DECL|function|QGLGradientCache
name|QGLGradientCache
parameter_list|()
member_init_list|:
name|QObject
argument_list|()
member_init_list|,
name|buffer_ctx
argument_list|(
literal|0
argument_list|)
block|{
name|connect
argument_list|(
name|QGLSignalProxy
operator|::
name|instance
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|aboutToDestroyContext
argument_list|(
specifier|const
name|QGLContext
operator|*
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|cleanupGLContextRefs
argument_list|(
specifier|const
name|QGLContext
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|getBuffer
specifier|inline
name|GLuint
name|getBuffer
parameter_list|(
specifier|const
name|QGradient
modifier|&
name|gradient
parameter_list|,
name|qreal
name|opacity
parameter_list|,
name|QGLContext
modifier|*
name|ctx
parameter_list|)
block|{
if|if
condition|(
name|buffer_ctx
operator|&&
operator|!
name|QGLContext
operator|::
name|areSharing
argument_list|(
name|buffer_ctx
argument_list|,
name|ctx
argument_list|)
condition|)
name|cleanCache
argument_list|()
expr_stmt|;
name|buffer_ctx
operator|=
name|ctx
expr_stmt|;
name|quint64
name|hash_val
init|=
literal|0
decl_stmt|;
name|QGradientStops
name|stops
init|=
name|gradient
operator|.
name|stops
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|stops
operator|.
name|size
argument_list|()
operator|&&
name|i
operator|<=
literal|2
condition|;
name|i
operator|++
control|)
name|hash_val
operator|+=
name|stops
index|[
name|i
index|]
operator|.
name|second
operator|.
name|rgba
argument_list|()
expr_stmt|;
name|QGLGradientColorTableHash
operator|::
name|const_iterator
name|it
init|=
name|cache
operator|.
name|constFind
argument_list|(
name|hash_val
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|==
name|cache
operator|.
name|constEnd
argument_list|()
condition|)
return|return
name|addCacheElement
argument_list|(
name|hash_val
argument_list|,
name|gradient
argument_list|,
name|opacity
argument_list|)
return|;
else|else
block|{
do|do
block|{
specifier|const
name|CacheInfo
modifier|&
name|cache_info
init|=
name|it
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|cache_info
operator|.
name|stops
operator|==
name|stops
operator|&&
name|cache_info
operator|.
name|opacity
operator|==
name|opacity
operator|&&
name|cache_info
operator|.
name|interpolationMode
operator|==
name|gradient
operator|.
name|interpolationMode
argument_list|()
condition|)
block|{
return|return
name|cache_info
operator|.
name|texId
return|;
block|}
operator|++
name|it
expr_stmt|;
block|}
do|while
condition|(
name|it
operator|!=
name|cache
operator|.
name|constEnd
argument_list|()
operator|&&
name|it
operator|.
name|key
argument_list|()
operator|==
name|hash_val
condition|)
do|;
comment|// an exact match for these stops and opacity was not found, create new cache
return|return
name|addCacheElement
argument_list|(
name|hash_val
argument_list|,
name|gradient
argument_list|,
name|opacity
argument_list|)
return|;
block|}
block|}
DECL|function|paletteSize
specifier|inline
name|int
name|paletteSize
parameter_list|()
specifier|const
block|{
return|return
literal|1024
return|;
block|}
protected|protected:
DECL|function|maxCacheSize
specifier|inline
name|int
name|maxCacheSize
parameter_list|()
specifier|const
block|{
return|return
literal|60
return|;
block|}
specifier|inline
name|void
name|generateGradientColorTable
parameter_list|(
specifier|const
name|QGradient
modifier|&
name|g
parameter_list|,
name|uint
modifier|*
name|colorTable
parameter_list|,
name|int
name|size
parameter_list|,
name|qreal
name|opacity
parameter_list|)
specifier|const
function_decl|;
DECL|function|addCacheElement
name|GLuint
name|addCacheElement
parameter_list|(
name|quint64
name|hash_val
parameter_list|,
specifier|const
name|QGradient
modifier|&
name|gradient
parameter_list|,
name|qreal
name|opacity
parameter_list|)
block|{
if|if
condition|(
name|cache
operator|.
name|size
argument_list|()
operator|==
name|maxCacheSize
argument_list|()
condition|)
block|{
name|int
name|elem_to_remove
init|=
name|qrand
argument_list|()
operator|%
name|maxCacheSize
argument_list|()
decl_stmt|;
name|quint64
name|key
init|=
name|cache
operator|.
name|keys
argument_list|()
index|[
name|elem_to_remove
index|]
decl_stmt|;
comment|// need to call glDeleteTextures on each removed cache entry:
name|QGLGradientColorTableHash
operator|::
name|const_iterator
name|it
init|=
name|cache
operator|.
name|constFind
argument_list|(
name|key
argument_list|)
decl_stmt|;
do|do
block|{
name|glDeleteTextures
argument_list|(
literal|1
argument_list|,
operator|&
name|it
operator|.
name|value
argument_list|()
operator|.
name|texId
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
operator|++
name|it
operator|!=
name|cache
operator|.
name|constEnd
argument_list|()
operator|&&
name|it
operator|.
name|key
argument_list|()
operator|==
name|key
condition|)
do|;
name|cache
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
comment|// may remove more than 1, but OK
block|}
name|CacheInfo
name|cache_entry
argument_list|(
name|gradient
operator|.
name|stops
argument_list|()
argument_list|,
name|opacity
argument_list|,
name|gradient
operator|.
name|interpolationMode
argument_list|()
argument_list|)
decl_stmt|;
name|uint
name|buffer
index|[
literal|1024
index|]
decl_stmt|;
name|generateGradientColorTable
argument_list|(
name|gradient
argument_list|,
name|buffer
argument_list|,
name|paletteSize
argument_list|()
argument_list|,
name|opacity
argument_list|)
expr_stmt|;
name|glGenTextures
argument_list|(
literal|1
argument_list|,
operator|&
name|cache_entry
operator|.
name|texId
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_OPENGL_ES
name|glBindTexture
argument_list|(
name|GL_TEXTURE_1D
argument_list|,
name|cache_entry
operator|.
name|texId
argument_list|)
expr_stmt|;
name|glTexImage1D
argument_list|(
name|GL_TEXTURE_1D
argument_list|,
literal|0
argument_list|,
name|GL_RGBA
argument_list|,
name|paletteSize
argument_list|()
argument_list|,
literal|0
argument_list|,
name|GL_BGRA
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
else|#
directive|else
comment|// create 2D one-line texture instead. This requires an impl of manual GL_TEXGEN for all primitives
endif|#
directive|endif
return|return
name|cache
operator|.
name|insert
argument_list|(
name|hash_val
argument_list|,
name|cache_entry
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|texId
return|;
block|}
DECL|function|cleanCache
name|void
name|cleanCache
parameter_list|()
block|{
name|QGLShareContextScope
name|scope
argument_list|(
name|buffer_ctx
argument_list|)
decl_stmt|;
name|QGLGradientColorTableHash
operator|::
name|const_iterator
name|it
init|=
name|cache
operator|.
name|constBegin
argument_list|()
decl_stmt|;
for|for
control|(
init|;
name|it
operator|!=
name|cache
operator|.
name|constEnd
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
specifier|const
name|CacheInfo
modifier|&
name|cache_info
init|=
name|it
operator|.
name|value
argument_list|()
decl_stmt|;
name|glDeleteTextures
argument_list|(
literal|1
argument_list|,
operator|&
name|cache_info
operator|.
name|texId
argument_list|)
expr_stmt|;
block|}
name|cache
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|member|cache
name|QGLGradientColorTableHash
name|cache
decl_stmt|;
DECL|member|buffer_ctx
name|QGLContext
modifier|*
name|buffer_ctx
decl_stmt|;
public|public
name|Q_SLOTS
public|:
DECL|function|cleanupGLContextRefs
name|void
name|cleanupGLContextRefs
parameter_list|(
specifier|const
name|QGLContext
modifier|*
name|context
parameter_list|)
block|{
if|if
condition|(
name|context
operator|==
name|buffer_ctx
condition|)
block|{
name|cleanCache
argument_list|()
expr_stmt|;
name|buffer_ctx
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
class|;
end_class
begin_function
DECL|function|endianColor
specifier|static
specifier|inline
name|uint
name|endianColor
parameter_list|(
name|uint
name|c
parameter_list|)
block|{
if|#
directive|if
name|Q_BYTE_ORDER
operator|==
name|Q_LITTLE_ENDIAN
return|return
name|c
return|;
else|#
directive|else
return|return
operator|(
operator|(
name|c
operator|<<
literal|24
operator|)
operator|&
literal|0xff000000
operator|)
operator||
operator|(
operator|(
name|c
operator|>>
literal|24
operator|)
operator|&
literal|0x000000ff
operator|)
operator||
operator|(
operator|(
name|c
operator|<<
literal|8
operator|)
operator|&
literal|0x00ff0000
operator|)
operator||
operator|(
operator|(
name|c
operator|>>
literal|8
operator|)
operator|&
literal|0x0000ff00
operator|)
return|;
endif|#
directive|endif
comment|// Q_BYTE_ORDER
block|}
end_function
begin_function
DECL|function|generateGradientColorTable
name|void
name|QGLGradientCache
operator|::
name|generateGradientColorTable
parameter_list|(
specifier|const
name|QGradient
modifier|&
name|gradient
parameter_list|,
name|uint
modifier|*
name|colorTable
parameter_list|,
name|int
name|size
parameter_list|,
name|qreal
name|opacity
parameter_list|)
specifier|const
block|{
name|int
name|pos
init|=
literal|0
decl_stmt|;
name|QGradientStops
name|s
init|=
name|gradient
operator|.
name|stops
argument_list|()
decl_stmt|;
name|QVector
argument_list|<
name|uint
argument_list|>
name|colors
argument_list|(
name|s
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|s
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|colors
index|[
name|i
index|]
operator|=
name|s
index|[
name|i
index|]
operator|.
name|second
operator|.
name|rgba
argument_list|()
expr_stmt|;
name|bool
name|colorInterpolation
init|=
operator|(
name|gradient
operator|.
name|interpolationMode
argument_list|()
operator|==
name|QGradient
operator|::
name|ColorInterpolation
operator|)
decl_stmt|;
name|uint
name|alpha
init|=
name|qRound
argument_list|(
name|opacity
operator|*
literal|256
argument_list|)
decl_stmt|;
name|uint
name|current_color
init|=
name|ARGB_COMBINE_ALPHA
argument_list|(
name|colors
index|[
literal|0
index|]
argument_list|,
name|alpha
argument_list|)
decl_stmt|;
name|qreal
name|incr
init|=
literal|1.0
operator|/
name|qreal
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|qreal
name|fpos
init|=
literal|1.5
operator|*
name|incr
decl_stmt|;
name|colorTable
index|[
name|pos
operator|++
index|]
operator|=
name|endianColor
argument_list|(
name|PREMUL
argument_list|(
name|current_color
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|fpos
operator|<=
name|s
operator|.
name|first
argument_list|()
operator|.
name|first
condition|)
block|{
name|colorTable
index|[
name|pos
index|]
operator|=
name|colorTable
index|[
name|pos
operator|-
literal|1
index|]
expr_stmt|;
name|pos
operator|++
expr_stmt|;
name|fpos
operator|+=
name|incr
expr_stmt|;
block|}
if|if
condition|(
name|colorInterpolation
condition|)
name|current_color
operator|=
name|PREMUL
argument_list|(
name|current_color
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|s
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|;
operator|++
name|i
control|)
block|{
name|qreal
name|delta
init|=
literal|1
operator|/
operator|(
name|s
index|[
name|i
operator|+
literal|1
index|]
operator|.
name|first
operator|-
name|s
index|[
name|i
index|]
operator|.
name|first
operator|)
decl_stmt|;
name|uint
name|next_color
init|=
name|ARGB_COMBINE_ALPHA
argument_list|(
name|colors
index|[
name|i
operator|+
literal|1
index|]
argument_list|,
name|alpha
argument_list|)
decl_stmt|;
if|if
condition|(
name|colorInterpolation
condition|)
name|next_color
operator|=
name|PREMUL
argument_list|(
name|next_color
argument_list|)
expr_stmt|;
while|while
condition|(
name|fpos
operator|<
name|s
index|[
name|i
operator|+
literal|1
index|]
operator|.
name|first
operator|&&
name|pos
operator|<
name|size
condition|)
block|{
name|int
name|dist
init|=
name|int
argument_list|(
literal|256
operator|*
operator|(
operator|(
name|fpos
operator|-
name|s
index|[
name|i
index|]
operator|.
name|first
operator|)
operator|*
name|delta
operator|)
argument_list|)
decl_stmt|;
name|int
name|idist
init|=
literal|256
operator|-
name|dist
decl_stmt|;
if|if
condition|(
name|colorInterpolation
condition|)
name|colorTable
index|[
name|pos
index|]
operator|=
name|endianColor
argument_list|(
name|INTERPOLATE_PIXEL_256
argument_list|(
name|current_color
argument_list|,
name|idist
argument_list|,
name|next_color
argument_list|,
name|dist
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|colorTable
index|[
name|pos
index|]
operator|=
name|endianColor
argument_list|(
name|PREMUL
argument_list|(
name|INTERPOLATE_PIXEL_256
argument_list|(
name|current_color
argument_list|,
name|idist
argument_list|,
name|next_color
argument_list|,
name|dist
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|pos
expr_stmt|;
name|fpos
operator|+=
name|incr
expr_stmt|;
block|}
name|current_color
operator|=
name|next_color
expr_stmt|;
block|}
name|Q_ASSERT
argument_list|(
name|s
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|uint
name|last_color
init|=
name|endianColor
argument_list|(
name|PREMUL
argument_list|(
name|ARGB_COMBINE_ALPHA
argument_list|(
name|colors
index|[
name|s
operator|.
name|size
argument_list|()
operator|-
literal|1
index|]
argument_list|,
name|alpha
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
init|;
name|pos
operator|<
name|size
condition|;
operator|++
name|pos
control|)
name|colorTable
index|[
name|pos
index|]
operator|=
name|last_color
expr_stmt|;
comment|// Make sure the last color stop is represented at the end of the table
name|colorTable
index|[
name|size
operator|-
literal|1
index|]
operator|=
name|last_color
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|Q_WS_QWS
end_ifndef
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|QGLGradientCache
argument_list|,
argument|qt_opengl_gradient_cache
argument_list|)
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|createGradientPaletteTexture
name|void
name|QOpenGLPaintEnginePrivate
operator|::
name|createGradientPaletteTexture
parameter_list|(
specifier|const
name|QGradient
modifier|&
name|g
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_OPENGL_ES
comment|//###
name|Q_UNUSED
argument_list|(
name|g
argument_list|)
expr_stmt|;
else|#
directive|else
name|GLuint
name|texId
init|=
name|qt_opengl_gradient_cache
argument_list|()
operator|->
name|getBuffer
argument_list|(
name|g
argument_list|,
name|opacity
argument_list|,
name|device
operator|->
name|context
argument_list|()
argument_list|)
decl_stmt|;
name|glBindTexture
argument_list|(
name|GL_TEXTURE_1D
argument_list|,
name|texId
argument_list|)
expr_stmt|;
name|grad_palette
operator|=
name|texId
expr_stmt|;
if|if
condition|(
name|g
operator|.
name|spread
argument_list|()
operator|==
name|QGradient
operator|::
name|RepeatSpread
operator|||
name|g
operator|.
name|type
argument_list|()
operator|==
name|QGradient
operator|::
name|ConicalGradient
condition|)
name|glTexParameteri
argument_list|(
name|GL_TEXTURE_1D
argument_list|,
name|GL_TEXTURE_WRAP_S
argument_list|,
name|GL_REPEAT
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|g
operator|.
name|spread
argument_list|()
operator|==
name|QGradient
operator|::
name|ReflectSpread
condition|)
name|glTexParameteri
argument_list|(
name|GL_TEXTURE_1D
argument_list|,
name|GL_TEXTURE_WRAP_S
argument_list|,
name|GL_MIRRORED_REPEAT_IBM
argument_list|)
expr_stmt|;
else|else
name|glTexParameteri
argument_list|(
name|GL_TEXTURE_1D
argument_list|,
name|GL_TEXTURE_WRAP_S
argument_list|,
name|GL_CLAMP_TO_EDGE
argument_list|)
expr_stmt|;
name|glTexParameteri
argument_list|(
name|GL_TEXTURE_1D
argument_list|,
name|GL_TEXTURE_MIN_FILTER
argument_list|,
name|GL_LINEAR
argument_list|)
expr_stmt|;
name|glTexParameteri
argument_list|(
name|GL_TEXTURE_1D
argument_list|,
name|GL_TEXTURE_MAG_FILTER
argument_list|,
name|GL_LINEAR
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|setGradientOps
specifier|inline
name|void
name|QOpenGLPaintEnginePrivate
operator|::
name|setGradientOps
parameter_list|(
specifier|const
name|QBrush
modifier|&
name|brush
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|bounds
parameter_list|)
block|{
name|current_style
operator|=
name|brush
operator|.
name|style
argument_list|()
expr_stmt|;
if|if
condition|(
name|current_style
argument_list|<
name|Qt
operator|::
name|LinearGradientPattern
operator|||
name|current_style
argument_list|>
name|Qt
operator|::
name|ConicalGradientPattern
condition|)
block|{
name|setGLBrush
argument_list|(
name|brush
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|qt_glColor4ubv
argument_list|(
name|brush_color
argument_list|)
expr_stmt|;
block|}
name|updateGradient
argument_list|(
name|brush
argument_list|,
name|bounds
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_OPENGL_ES
comment|//### GLES does not have GL_TEXTURE_GEN_ so we are falling back for gradients
name|glDisable
argument_list|(
name|GL_TEXTURE_GEN_S
argument_list|)
expr_stmt|;
name|glDisable
argument_list|(
name|GL_TEXTURE_1D
argument_list|)
expr_stmt|;
if|if
condition|(
name|current_style
operator|==
name|Qt
operator|::
name|LinearGradientPattern
condition|)
block|{
if|if
condition|(
name|high_quality_antialiasing
operator|||
operator|!
name|has_fast_composition_mode
condition|)
block|{
name|fragment_brush
operator|=
name|FRAGMENT_PROGRAM_BRUSH_LINEAR
expr_stmt|;
block|}
else|else
block|{
name|glEnable
argument_list|(
name|GL_TEXTURE_GEN_S
argument_list|)
expr_stmt|;
name|glEnable
argument_list|(
name|GL_TEXTURE_1D
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|use_fragment_programs
condition|)
block|{
if|if
condition|(
name|current_style
operator|==
name|Qt
operator|::
name|RadialGradientPattern
condition|)
name|fragment_brush
operator|=
name|FRAGMENT_PROGRAM_BRUSH_RADIAL
expr_stmt|;
elseif|else
if|if
condition|(
name|current_style
operator|==
name|Qt
operator|::
name|ConicalGradientPattern
condition|)
name|fragment_brush
operator|=
name|FRAGMENT_PROGRAM_BRUSH_CONICAL
expr_stmt|;
elseif|else
if|if
condition|(
name|current_style
operator|==
name|Qt
operator|::
name|SolidPattern
condition|)
name|fragment_brush
operator|=
name|FRAGMENT_PROGRAM_BRUSH_SOLID
expr_stmt|;
elseif|else
if|if
condition|(
name|current_style
operator|==
name|Qt
operator|::
name|TexturePattern
operator|&&
operator|!
name|brush
operator|.
name|texture
argument_list|()
operator|.
name|isQBitmap
argument_list|()
condition|)
name|fragment_brush
operator|=
name|FRAGMENT_PROGRAM_BRUSH_TEXTURE
expr_stmt|;
else|else
name|fragment_brush
operator|=
name|FRAGMENT_PROGRAM_BRUSH_PATTERN
expr_stmt|;
block|}
block|}
endif|#
directive|endif
block|}
end_function
begin_constructor
DECL|function|QOpenGLPaintEngine
name|QOpenGLPaintEngine
operator|::
name|QOpenGLPaintEngine
parameter_list|()
member_init_list|:
name|QPaintEngineEx
argument_list|(
operator|*
operator|(
operator|new
name|QOpenGLPaintEnginePrivate
operator|)
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QOpenGLPaintEngine
name|QOpenGLPaintEngine
operator|::
name|~
name|QOpenGLPaintEngine
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|begin
name|bool
name|QOpenGLPaintEngine
operator|::
name|begin
parameter_list|(
name|QPaintDevice
modifier|*
name|pdev
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QOpenGLPaintEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|pdev
operator|->
name|devType
argument_list|()
operator|==
name|QInternal
operator|::
name|OpenGL
condition|)
name|d
operator|->
name|device
operator|=
cast|static_cast
argument_list|<
name|QGLPaintDevice
operator|*
argument_list|>
argument_list|(
name|pdev
argument_list|)
expr_stmt|;
else|else
name|d
operator|->
name|device
operator|=
name|QGLPaintDevice
operator|::
name|getDevice
argument_list|(
name|pdev
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|device
condition|)
return|return
literal|false
return|;
name|d
operator|->
name|offscreen
operator|.
name|setDevice
argument_list|(
name|pdev
argument_list|)
expr_stmt|;
name|d
operator|->
name|has_fast_pen
operator|=
literal|false
expr_stmt|;
name|d
operator|->
name|inverseScale
operator|=
literal|1
expr_stmt|;
name|d
operator|->
name|opacity
operator|=
literal|1
expr_stmt|;
name|d
operator|->
name|device
operator|->
name|beginPaint
argument_list|()
expr_stmt|;
name|d
operator|->
name|matrix
operator|=
name|QTransform
argument_list|()
expr_stmt|;
name|d
operator|->
name|has_antialiasing
operator|=
literal|false
expr_stmt|;
name|d
operator|->
name|high_quality_antialiasing
operator|=
literal|false
expr_stmt|;
name|QSize
name|sz
argument_list|(
name|d
operator|->
name|device
operator|->
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|d
operator|->
name|dirty_stencil
operator|=
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|sz
operator|.
name|width
argument_list|()
argument_list|,
name|sz
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|use_emulation
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|4
condition|;
operator|++
name|j
control|)
name|d
operator|->
name|mv_matrix
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
operator|(
name|i
operator|==
name|j
condition|?
name|qreal
argument_list|(
literal|1
argument_list|)
else|:
name|qreal
argument_list|(
literal|0
argument_list|)
operator|)
expr_stmt|;
name|bool
name|has_frag_program
init|=
operator|(
name|QGLExtensions
operator|::
name|glExtensions
argument_list|()
operator|&
name|QGLExtensions
operator|::
name|FragmentProgram
operator|)
operator|&&
operator|(
name|pdev
operator|->
name|devType
argument_list|()
operator|!=
name|QInternal
operator|::
name|Pixmap
operator|)
decl_stmt|;
name|QGLContext
modifier|*
name|ctx
init|=
cast|const_cast
argument_list|<
name|QGLContext
operator|*
argument_list|>
argument_list|(
name|d
operator|->
name|device
operator|->
name|context
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ctx
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"QOpenGLPaintEngine: paint device doesn't have a valid GL context."
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|has_frag_program
condition|)
name|has_frag_program
operator|=
name|qt_resolve_frag_program_extensions
argument_list|(
name|ctx
argument_list|)
operator|&&
name|qt_resolve_version_1_3_functions
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|d
operator|->
name|use_stencil_method
operator|=
name|d
operator|->
name|device
operator|->
name|format
argument_list|()
operator|.
name|stencil
argument_list|()
operator|&&
operator|(
name|QGLExtensions
operator|::
name|glExtensions
argument_list|()
operator|&
name|QGLExtensions
operator|::
name|StencilWrap
operator|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|device
operator|->
name|format
argument_list|()
operator|.
name|directRendering
argument_list|()
operator|&&
operator|(
name|d
operator|->
name|use_stencil_method
operator|&&
name|QGLExtensions
operator|::
name|glExtensions
argument_list|()
operator|&
name|QGLExtensions
operator|::
name|StencilTwoSide
operator|)
condition|)
name|d
operator|->
name|has_stencil_face_ext
operator|=
name|qt_resolve_stencil_face_extension
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_X11
specifier|static
name|bool
name|nvidia_workaround_needs_init
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|nvidia_workaround_needs_init
condition|)
block|{
comment|// nvidia 9x.xx unix drivers contain a bug which requires us to
comment|// call glFinish before releasing an fbo to avoid painting
comment|// artifacts
specifier|const
name|QByteArray
name|versionString
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|glGetString
argument_list|(
name|GL_VERSION
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|int
name|pos
init|=
name|versionString
operator|.
name|indexOf
argument_list|(
literal|"NVIDIA"
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|>=
literal|0
condition|)
block|{
specifier|const
name|float
name|nvidiaDriverVersion
init|=
name|versionString
operator|.
name|mid
argument_list|(
name|pos
operator|+
name|strlen
argument_list|(
literal|"NVIDIA"
argument_list|)
argument_list|)
operator|.
name|toFloat
argument_list|()
decl_stmt|;
name|qt_nvidiaFboNeedsFinish
operator|=
name|nvidiaDriverVersion
operator|>=
literal|90.0
operator|&&
name|nvidiaDriverVersion
operator|<
literal|100.0
expr_stmt|;
block|}
name|nvidia_workaround_needs_init
operator|=
literal|false
expr_stmt|;
block|}
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_OPENGL_ES
if|if
condition|(
operator|!
name|ctx
operator|->
name|d_ptr
operator|->
name|internal_context
condition|)
block|{
name|glGetDoublev
argument_list|(
name|GL_PROJECTION_MATRIX
argument_list|,
operator|&
name|d
operator|->
name|projection_matrix
index|[
literal|0
index|]
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|glPushClientAttrib
argument_list|(
name|GL_CLIENT_ALL_ATTRIB_BITS
argument_list|)
expr_stmt|;
name|glPushAttrib
argument_list|(
name|GL_ALL_ATTRIB_BITS
argument_list|)
expr_stmt|;
name|glDisableClientState
argument_list|(
name|GL_EDGE_FLAG_ARRAY
argument_list|)
expr_stmt|;
name|glDisableClientState
argument_list|(
name|GL_INDEX_ARRAY
argument_list|)
expr_stmt|;
name|glPolygonMode
argument_list|(
name|GL_FRONT_AND_BACK
argument_list|,
name|GL_FILL
argument_list|)
expr_stmt|;
name|glDisable
argument_list|(
name|GL_TEXTURE_1D
argument_list|)
expr_stmt|;
name|glTexEnvf
argument_list|(
name|GL_TEXTURE_ENV
argument_list|,
name|GL_TEXTURE_ENV_MODE
argument_list|,
name|GL_MODULATE
argument_list|)
expr_stmt|;
name|glPixelTransferi
argument_list|(
name|GL_MAP_COLOR
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|glPixelTransferi
argument_list|(
name|GL_MAP_STENCIL
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|glDisable
argument_list|(
name|GL_TEXTURE_GEN_S
argument_list|)
expr_stmt|;
name|glPixelStorei
argument_list|(
name|GL_PACK_SWAP_BYTES
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|glPixelStorei
argument_list|(
name|GL_PACK_LSB_FIRST
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|glPixelStorei
argument_list|(
name|GL_PACK_ROW_LENGTH
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|glPixelStorei
argument_list|(
name|GL_PACK_SKIP_ROWS
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|glPixelStorei
argument_list|(
name|GL_PACK_SKIP_PIXELS
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|glPixelStorei
argument_list|(
name|GL_PACK_ALIGNMENT
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|glPixelStorei
argument_list|(
name|GL_UNPACK_SWAP_BYTES
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|glPixelStorei
argument_list|(
name|GL_UNPACK_LSB_FIRST
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|glPixelStorei
argument_list|(
name|GL_UNPACK_ROW_LENGTH
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|glPixelStorei
argument_list|(
name|GL_UNPACK_SKIP_ROWS
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|glPixelStorei
argument_list|(
name|GL_UNPACK_SKIP_PIXELS
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|glPixelStorei
argument_list|(
name|GL_UNPACK_ALIGNMENT
argument_list|,
literal|4
argument_list|)
expr_stmt|;
if|if
condition|(
name|QGLFormat
operator|::
name|openGLVersionFlags
argument_list|()
operator|&
name|QGLFormat
operator|::
name|OpenGL_Version_1_2
condition|)
block|{
name|glPixelStorei
argument_list|(
name|GL_PACK_IMAGE_HEIGHT
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|glPixelStorei
argument_list|(
name|GL_PACK_SKIP_IMAGES
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|glPixelStorei
argument_list|(
name|GL_UNPACK_IMAGE_HEIGHT
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|glPixelStorei
argument_list|(
name|GL_UNPACK_SKIP_IMAGES
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
endif|#
directive|endif
if|if
condition|(
operator|!
name|ctx
operator|->
name|d_ptr
operator|->
name|internal_context
condition|)
block|{
name|glMatrixMode
argument_list|(
name|GL_MODELVIEW
argument_list|)
expr_stmt|;
name|glPushMatrix
argument_list|()
expr_stmt|;
name|glMatrixMode
argument_list|(
name|GL_TEXTURE
argument_list|)
expr_stmt|;
name|glPushMatrix
argument_list|()
expr_stmt|;
name|glLoadIdentity
argument_list|()
expr_stmt|;
name|glDisableClientState
argument_list|(
name|GL_COLOR_ARRAY
argument_list|)
expr_stmt|;
name|glDisableClientState
argument_list|(
name|GL_NORMAL_ARRAY
argument_list|)
expr_stmt|;
name|glDisableClientState
argument_list|(
name|GL_TEXTURE_COORD_ARRAY
argument_list|)
expr_stmt|;
name|glDisableClientState
argument_list|(
name|GL_VERTEX_ARRAY
argument_list|)
expr_stmt|;
if|if
condition|(
name|QGLExtensions
operator|::
name|glExtensions
argument_list|()
operator|&
name|QGLExtensions
operator|::
name|SampleBuffers
condition|)
name|glDisable
argument_list|(
name|GL_MULTISAMPLE
argument_list|)
expr_stmt|;
name|glDisable
argument_list|(
name|GL_TEXTURE_2D
argument_list|)
expr_stmt|;
if|if
condition|(
name|QGLExtensions
operator|::
name|glExtensions
argument_list|()
operator|&
name|QGLExtensions
operator|::
name|TextureRectangle
condition|)
name|glDisable
argument_list|(
name|GL_TEXTURE_RECTANGLE_NV
argument_list|)
expr_stmt|;
name|glDisable
argument_list|(
name|GL_STENCIL_TEST
argument_list|)
expr_stmt|;
name|glDisable
argument_list|(
name|GL_CULL_FACE
argument_list|)
expr_stmt|;
name|glDisable
argument_list|(
name|GL_LIGHTING
argument_list|)
expr_stmt|;
name|glColorMask
argument_list|(
name|GL_TRUE
argument_list|,
name|GL_TRUE
argument_list|,
name|GL_TRUE
argument_list|,
name|GL_TRUE
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|offscreen
operator|.
name|begin
argument_list|()
expr_stmt|;
name|glViewport
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|sz
operator|.
name|width
argument_list|()
argument_list|,
name|sz
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
comment|// XXX (Embedded): We need a solution for GLWidgets that draw in a part or a bigger surface...
name|glMatrixMode
argument_list|(
name|GL_PROJECTION
argument_list|)
expr_stmt|;
name|glLoadIdentity
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_OPENGL_ES
name|glOrthof
argument_list|(
literal|0
argument_list|,
name|sz
operator|.
name|width
argument_list|()
argument_list|,
name|sz
operator|.
name|height
argument_list|()
argument_list|,
literal|0
argument_list|,
operator|-
literal|999999
argument_list|,
literal|999999
argument_list|)
expr_stmt|;
else|#
directive|else
name|glOrtho
argument_list|(
literal|0
argument_list|,
name|sz
operator|.
name|width
argument_list|()
argument_list|,
name|sz
operator|.
name|height
argument_list|()
argument_list|,
literal|0
argument_list|,
operator|-
literal|999999
argument_list|,
literal|999999
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|glMatrixMode
argument_list|(
name|GL_MODELVIEW
argument_list|)
expr_stmt|;
name|glLoadIdentity
argument_list|()
expr_stmt|;
name|glEnable
argument_list|(
name|GL_BLEND
argument_list|)
expr_stmt|;
name|d
operator|->
name|composition_mode
operator|=
name|QPainter
operator|::
name|CompositionMode_SourceOver
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_OPENGL_ES
name|d
operator|->
name|max_texture_size
operator|=
name|ctx
operator|->
name|d_func
argument_list|()
operator|->
name|maxTextureSize
argument_list|()
expr_stmt|;
else|#
directive|else
name|bool
name|shared_ctx
init|=
name|QGLContext
operator|::
name|areSharing
argument_list|(
name|d
operator|->
name|device
operator|->
name|context
argument_list|()
argument_list|,
name|d
operator|->
name|shader_ctx
argument_list|)
decl_stmt|;
if|if
condition|(
name|shared_ctx
condition|)
block|{
name|d
operator|->
name|max_texture_size
operator|=
name|d
operator|->
name|shader_ctx
operator|->
name|d_func
argument_list|()
operator|->
name|maxTextureSize
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|max_texture_size
operator|=
name|ctx
operator|->
name|d_func
argument_list|()
operator|->
name|maxTextureSize
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|shader_ctx
condition|)
block|{
name|d
operator|->
name|shader_ctx
operator|->
name|makeCurrent
argument_list|()
expr_stmt|;
name|glBindTexture
argument_list|(
name|GL_TEXTURE_1D
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|glDeleteTextures
argument_list|(
literal|1
argument_list|,
operator|&
name|d
operator|->
name|grad_palette
argument_list|)
expr_stmt|;
if|if
condition|(
name|has_frag_program
operator|&&
name|d
operator|->
name|use_fragment_programs
condition|)
name|glDeleteTextures
argument_list|(
literal|1
argument_list|,
operator|&
name|d
operator|->
name|drawable_texture
argument_list|)
expr_stmt|;
name|ctx
operator|->
name|makeCurrent
argument_list|()
expr_stmt|;
block|}
name|d
operator|->
name|shader_ctx
operator|=
name|d
operator|->
name|device
operator|->
name|context
argument_list|()
expr_stmt|;
name|glGenTextures
argument_list|(
literal|1
argument_list|,
operator|&
name|d
operator|->
name|grad_palette
argument_list|)
expr_stmt|;
name|qt_mask_texture_cache
argument_list|()
operator|->
name|clearCache
argument_list|()
expr_stmt|;
name|d
operator|->
name|use_fragment_programs
operator|=
name|has_frag_program
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|->
name|use_fragment_programs
operator|&&
operator|(
operator|!
name|shared_ctx
operator|||
name|sz
operator|.
name|width
argument_list|()
operator|>
name|d
operator|->
name|drawable_texture_size
operator|.
name|width
argument_list|()
operator|||
name|sz
operator|.
name|height
argument_list|()
operator|>
name|d
operator|->
name|drawable_texture_size
operator|.
name|height
argument_list|()
operator|)
condition|)
block|{
comment|// delete old texture if size has increased, otherwise it was deleted earlier
if|if
condition|(
name|shared_ctx
condition|)
name|glDeleteTextures
argument_list|(
literal|1
argument_list|,
operator|&
name|d
operator|->
name|drawable_texture
argument_list|)
expr_stmt|;
name|d
operator|->
name|dirty_drawable_texture
operator|=
literal|true
expr_stmt|;
name|d
operator|->
name|drawable_texture_size
operator|=
name|QSize
argument_list|(
name|qt_next_power_of_two
argument_list|(
name|sz
operator|.
name|width
argument_list|()
argument_list|)
argument_list|,
name|qt_next_power_of_two
argument_list|(
name|sz
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
name|updateClipRegion
argument_list|(
name|QRegion
argument_list|()
argument_list|,
name|Qt
operator|::
name|NoClip
argument_list|)
expr_stmt|;
name|penChanged
argument_list|()
expr_stmt|;
name|brushChanged
argument_list|()
expr_stmt|;
name|opacityChanged
argument_list|()
expr_stmt|;
name|compositionModeChanged
argument_list|()
expr_stmt|;
name|renderHintsChanged
argument_list|()
expr_stmt|;
name|transformChanged
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|end
name|bool
name|QOpenGLPaintEngine
operator|::
name|end
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QOpenGLPaintEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|flushDrawQueue
argument_list|()
expr_stmt|;
name|d
operator|->
name|offscreen
operator|.
name|end
argument_list|()
expr_stmt|;
name|QGLContext
modifier|*
name|ctx
init|=
cast|const_cast
argument_list|<
name|QGLContext
operator|*
argument_list|>
argument_list|(
name|d
operator|->
name|device
operator|->
name|context
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ctx
operator|->
name|d_ptr
operator|->
name|internal_context
condition|)
block|{
name|glMatrixMode
argument_list|(
name|GL_TEXTURE
argument_list|)
expr_stmt|;
name|glPopMatrix
argument_list|()
expr_stmt|;
name|glMatrixMode
argument_list|(
name|GL_MODELVIEW
argument_list|)
expr_stmt|;
name|glPopMatrix
argument_list|()
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|QT_OPENGL_ES
if|if
condition|(
name|ctx
operator|->
name|d_ptr
operator|->
name|internal_context
condition|)
block|{
name|glDisable
argument_list|(
name|GL_SCISSOR_TEST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|glMatrixMode
argument_list|(
name|GL_PROJECTION
argument_list|)
expr_stmt|;
name|glLoadMatrixd
argument_list|(
operator|&
name|d
operator|->
name|projection_matrix
index|[
literal|0
index|]
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|glPopAttrib
argument_list|()
expr_stmt|;
name|glPopClientAttrib
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
name|d
operator|->
name|device
operator|->
name|endPaint
argument_list|()
expr_stmt|;
name|qt_mask_texture_cache
argument_list|()
operator|->
name|maintainCache
argument_list|()
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_X11
argument_list|)
comment|// clear out the references we hold for textures bound with the
comment|// texture_from_pixmap extension
name|ctx
operator|->
name|d_func
argument_list|()
operator|->
name|boundPixmaps
operator|.
name|clear
argument_list|()
expr_stmt|;
endif|#
directive|endif
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|updateState
name|void
name|QOpenGLPaintEngine
operator|::
name|updateState
parameter_list|(
specifier|const
name|QPaintEngineState
modifier|&
name|state
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QOpenGLPaintEngine
argument_list|)
expr_stmt|;
name|QPaintEngine
operator|::
name|DirtyFlags
name|flags
init|=
name|state
operator|.
name|state
argument_list|()
decl_stmt|;
name|bool
name|update_fast_pen
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|flags
operator|&
name|DirtyOpacity
condition|)
block|{
name|update_fast_pen
operator|=
literal|true
expr_stmt|;
name|d
operator|->
name|opacity
operator|=
name|state
operator|.
name|opacity
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|opacity
operator|>
literal|1.0f
condition|)
name|d
operator|->
name|opacity
operator|=
literal|1.0f
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|opacity
operator|<
literal|0.f
condition|)
name|d
operator|->
name|opacity
operator|=
literal|0.f
expr_stmt|;
comment|// force update
name|flags
operator||=
name|DirtyPen
expr_stmt|;
name|flags
operator||=
name|DirtyBrush
expr_stmt|;
block|}
if|if
condition|(
name|flags
operator|&
name|DirtyTransform
condition|)
block|{
name|update_fast_pen
operator|=
literal|true
expr_stmt|;
name|updateMatrix
argument_list|(
name|state
operator|.
name|transform
argument_list|()
argument_list|)
expr_stmt|;
comment|// brush setup depends on transform state
if|if
condition|(
name|state
operator|.
name|brush
argument_list|()
operator|.
name|style
argument_list|()
operator|!=
name|Qt
operator|::
name|NoBrush
condition|)
name|flags
operator||=
name|DirtyBrush
expr_stmt|;
block|}
if|if
condition|(
name|flags
operator|&
name|DirtyPen
condition|)
block|{
name|update_fast_pen
operator|=
literal|true
expr_stmt|;
name|updatePen
argument_list|(
name|state
operator|.
name|pen
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|flags
operator|&
operator|(
name|DirtyBrush
operator||
name|DirtyBrushOrigin
operator|)
condition|)
block|{
name|updateBrush
argument_list|(
name|state
operator|.
name|brush
argument_list|()
argument_list|,
name|state
operator|.
name|brushOrigin
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|flags
operator|&
name|DirtyFont
condition|)
block|{
name|updateFont
argument_list|(
name|state
operator|.
name|font
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|state
operator|.
name|state
argument_list|()
operator|&
name|DirtyClipEnabled
condition|)
block|{
if|if
condition|(
name|state
operator|.
name|isClipEnabled
argument_list|()
condition|)
name|updateClipRegion
argument_list|(
name|painter
argument_list|()
operator|->
name|clipRegion
argument_list|()
argument_list|,
name|Qt
operator|::
name|ReplaceClip
argument_list|)
expr_stmt|;
else|else
name|updateClipRegion
argument_list|(
name|QRegion
argument_list|()
argument_list|,
name|Qt
operator|::
name|NoClip
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|flags
operator|&
name|DirtyClipPath
condition|)
block|{
name|updateClipRegion
argument_list|(
name|QRegion
argument_list|(
name|state
operator|.
name|clipPath
argument_list|()
operator|.
name|toFillPolygon
argument_list|()
operator|.
name|toPolygon
argument_list|()
argument_list|,
name|state
operator|.
name|clipPath
argument_list|()
operator|.
name|fillRule
argument_list|()
argument_list|)
argument_list|,
name|state
operator|.
name|clipOperation
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|flags
operator|&
name|DirtyClipRegion
condition|)
block|{
name|updateClipRegion
argument_list|(
name|state
operator|.
name|clipRegion
argument_list|()
argument_list|,
name|state
operator|.
name|clipOperation
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|flags
operator|&
name|DirtyHints
condition|)
block|{
name|updateRenderHints
argument_list|(
name|state
operator|.
name|renderHints
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|flags
operator|&
name|DirtyCompositionMode
condition|)
block|{
name|updateCompositionMode
argument_list|(
name|state
operator|.
name|compositionMode
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|update_fast_pen
condition|)
block|{
name|Q_D
argument_list|(
name|QOpenGLPaintEngine
argument_list|)
expr_stmt|;
name|qreal
name|pen_width
init|=
name|d
operator|->
name|cpen
operator|.
name|widthF
argument_list|()
decl_stmt|;
name|d
operator|->
name|has_fast_pen
operator|=
operator|(
operator|(
name|pen_width
operator|==
literal|0
operator|||
operator|(
name|pen_width
operator|<=
literal|1
operator|&&
name|d
operator|->
name|txop
operator|<=
name|QTransform
operator|::
name|TxTranslate
operator|)
operator|)
operator|||
name|d
operator|->
name|cpen
operator|.
name|isCosmetic
argument_list|()
operator|)
operator|&&
name|d
operator|->
name|cpen
operator|.
name|style
argument_list|()
operator|==
name|Qt
operator|::
name|SolidLine
operator|&&
name|d
operator|->
name|cpen
operator|.
name|isSolid
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setInvMatrixData
name|void
name|QOpenGLPaintEnginePrivate
operator|::
name|setInvMatrixData
parameter_list|(
specifier|const
name|QTransform
modifier|&
name|inv_matrix
parameter_list|)
block|{
name|inv_matrix_data
index|[
literal|0
index|]
index|[
literal|0
index|]
operator|=
name|inv_matrix
operator|.
name|m11
argument_list|()
expr_stmt|;
name|inv_matrix_data
index|[
literal|1
index|]
index|[
literal|0
index|]
operator|=
name|inv_matrix
operator|.
name|m21
argument_list|()
expr_stmt|;
name|inv_matrix_data
index|[
literal|2
index|]
index|[
literal|0
index|]
operator|=
name|inv_matrix
operator|.
name|m31
argument_list|()
expr_stmt|;
name|inv_matrix_data
index|[
literal|0
index|]
index|[
literal|1
index|]
operator|=
name|inv_matrix
operator|.
name|m12
argument_list|()
expr_stmt|;
name|inv_matrix_data
index|[
literal|1
index|]
index|[
literal|1
index|]
operator|=
name|inv_matrix
operator|.
name|m22
argument_list|()
expr_stmt|;
name|inv_matrix_data
index|[
literal|2
index|]
index|[
literal|1
index|]
operator|=
name|inv_matrix
operator|.
name|m32
argument_list|()
expr_stmt|;
name|inv_matrix_data
index|[
literal|0
index|]
index|[
literal|2
index|]
operator|=
name|inv_matrix
operator|.
name|m13
argument_list|()
expr_stmt|;
name|inv_matrix_data
index|[
literal|1
index|]
index|[
literal|2
index|]
operator|=
name|inv_matrix
operator|.
name|m23
argument_list|()
expr_stmt|;
name|inv_matrix_data
index|[
literal|2
index|]
index|[
literal|2
index|]
operator|=
name|inv_matrix
operator|.
name|m33
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateGradient
name|void
name|QOpenGLPaintEnginePrivate
operator|::
name|updateGradient
parameter_list|(
specifier|const
name|QBrush
modifier|&
name|brush
parameter_list|,
specifier|const
name|QRectF
modifier|&
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_OPENGL_ES
name|Q_UNUSED
argument_list|(
name|brush
argument_list|)
expr_stmt|;
else|#
directive|else
name|bool
name|has_mirrored_repeat
init|=
name|QGLExtensions
operator|::
name|glExtensions
argument_list|()
operator|&
name|QGLExtensions
operator|::
name|MirroredRepeat
decl_stmt|;
name|Qt
operator|::
name|BrushStyle
name|style
init|=
name|brush
operator|.
name|style
argument_list|()
decl_stmt|;
name|QTransform
name|m
init|=
name|brush
operator|.
name|transform
argument_list|()
decl_stmt|;
if|if
condition|(
name|has_mirrored_repeat
operator|&&
name|style
operator|==
name|Qt
operator|::
name|LinearGradientPattern
condition|)
block|{
specifier|const
name|QLinearGradient
modifier|*
name|g
init|=
cast|static_cast
argument_list|<
specifier|const
name|QLinearGradient
operator|*
argument_list|>
argument_list|(
name|brush
operator|.
name|gradient
argument_list|()
argument_list|)
decl_stmt|;
name|QTransform
name|m
init|=
name|brush
operator|.
name|transform
argument_list|()
decl_stmt|;
name|QPointF
name|realStart
init|=
name|g
operator|->
name|start
argument_list|()
decl_stmt|;
name|QPointF
name|realFinal
init|=
name|g
operator|->
name|finalStop
argument_list|()
decl_stmt|;
name|QPointF
name|start
init|=
name|m
operator|.
name|map
argument_list|(
name|realStart
argument_list|)
decl_stmt|;
name|QPointF
name|stop
decl_stmt|;
if|if
condition|(
name|qFuzzyCompare
argument_list|(
name|m
operator|.
name|m11
argument_list|()
argument_list|,
name|m
operator|.
name|m22
argument_list|()
argument_list|)
operator|&&
name|m
operator|.
name|m12
argument_list|()
operator|==
literal|0.0
operator|&&
name|m
operator|.
name|m21
argument_list|()
operator|==
literal|0.0
condition|)
block|{
comment|// It is a simple uniform scale and/or translation
name|stop
operator|=
name|m
operator|.
name|map
argument_list|(
name|realFinal
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// It is not enough to just transform the endpoints.
comment|// We have to make sure the _pattern_ is transformed correctly.
name|qreal
name|odx
init|=
name|realFinal
operator|.
name|x
argument_list|()
operator|-
name|realStart
operator|.
name|x
argument_list|()
decl_stmt|;
name|qreal
name|ody
init|=
name|realFinal
operator|.
name|y
argument_list|()
operator|-
name|realStart
operator|.
name|y
argument_list|()
decl_stmt|;
comment|// nx, ny and dx, dy are normal and gradient direction after transform:
name|qreal
name|nx
init|=
name|m
operator|.
name|m11
argument_list|()
operator|*
name|ody
operator|-
name|m
operator|.
name|m21
argument_list|()
operator|*
name|odx
decl_stmt|;
name|qreal
name|ny
init|=
name|m
operator|.
name|m12
argument_list|()
operator|*
name|ody
operator|-
name|m
operator|.
name|m22
argument_list|()
operator|*
name|odx
decl_stmt|;
name|qreal
name|dx
init|=
name|m
operator|.
name|m11
argument_list|()
operator|*
name|odx
operator|+
name|m
operator|.
name|m21
argument_list|()
operator|*
name|ody
decl_stmt|;
name|qreal
name|dy
init|=
name|m
operator|.
name|m12
argument_list|()
operator|*
name|odx
operator|+
name|m
operator|.
name|m22
argument_list|()
operator|*
name|ody
decl_stmt|;
name|qreal
name|lx
init|=
literal|1
operator|/
operator|(
name|dx
operator|-
name|dy
operator|*
name|nx
operator|/
name|ny
operator|)
decl_stmt|;
name|qreal
name|ly
init|=
literal|1
operator|/
operator|(
name|dy
operator|-
name|dx
operator|*
name|ny
operator|/
name|nx
operator|)
decl_stmt|;
name|qreal
name|l
init|=
literal|1
operator|/
name|qSqrt
argument_list|(
name|lx
operator|*
name|lx
operator|+
name|ly
operator|*
name|ly
argument_list|)
decl_stmt|;
name|stop
operator|=
name|start
operator|+
name|QPointF
argument_list|(
operator|-
name|ny
argument_list|,
name|nx
argument_list|)
operator|*
name|l
operator|/
name|qSqrt
argument_list|(
name|nx
operator|*
name|nx
operator|+
name|ny
operator|*
name|ny
argument_list|)
expr_stmt|;
block|}
name|float
name|tr
index|[
literal|4
index|]
decl_stmt|,
name|f
decl_stmt|;
name|tr
index|[
literal|0
index|]
operator|=
name|stop
operator|.
name|x
argument_list|()
operator|-
name|start
operator|.
name|x
argument_list|()
expr_stmt|;
name|tr
index|[
literal|1
index|]
operator|=
name|stop
operator|.
name|y
argument_list|()
operator|-
name|start
operator|.
name|y
argument_list|()
expr_stmt|;
name|f
operator|=
literal|1.0
operator|/
operator|(
name|tr
index|[
literal|0
index|]
operator|*
name|tr
index|[
literal|0
index|]
operator|+
name|tr
index|[
literal|1
index|]
operator|*
name|tr
index|[
literal|1
index|]
operator|)
expr_stmt|;
name|tr
index|[
literal|0
index|]
operator|*=
name|f
expr_stmt|;
name|tr
index|[
literal|1
index|]
operator|*=
name|f
expr_stmt|;
name|tr
index|[
literal|2
index|]
operator|=
literal|0
expr_stmt|;
name|tr
index|[
literal|3
index|]
operator|=
operator|-
operator|(
name|start
operator|.
name|x
argument_list|()
operator|*
name|tr
index|[
literal|0
index|]
operator|+
name|start
operator|.
name|y
argument_list|()
operator|*
name|tr
index|[
literal|1
index|]
operator|)
expr_stmt|;
name|brush_color
index|[
literal|0
index|]
operator|=
name|brush_color
index|[
literal|1
index|]
operator|=
name|brush_color
index|[
literal|2
index|]
operator|=
name|brush_color
index|[
literal|3
index|]
operator|=
literal|255
expr_stmt|;
name|qt_glColor4ubv
argument_list|(
name|brush_color
argument_list|)
expr_stmt|;
name|glTexGeni
argument_list|(
name|GL_S
argument_list|,
name|GL_TEXTURE_GEN_MODE
argument_list|,
name|GL_OBJECT_LINEAR
argument_list|)
expr_stmt|;
name|glTexGenfv
argument_list|(
name|GL_S
argument_list|,
name|GL_OBJECT_PLANE
argument_list|,
name|tr
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|use_fragment_programs
condition|)
block|{
if|if
condition|(
name|style
operator|==
name|Qt
operator|::
name|RadialGradientPattern
condition|)
block|{
specifier|const
name|QRadialGradient
modifier|*
name|g
init|=
cast|static_cast
argument_list|<
specifier|const
name|QRadialGradient
operator|*
argument_list|>
argument_list|(
name|brush
operator|.
name|gradient
argument_list|()
argument_list|)
decl_stmt|;
name|QPointF
name|realCenter
init|=
name|g
operator|->
name|center
argument_list|()
decl_stmt|;
name|QPointF
name|realFocal
init|=
name|g
operator|->
name|focalPoint
argument_list|()
decl_stmt|;
name|qreal
name|realRadius
init|=
name|g
operator|->
name|radius
argument_list|()
decl_stmt|;
name|QTransform
name|translate
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
operator|-
name|realFocal
operator|.
name|x
argument_list|()
argument_list|,
operator|-
name|realFocal
operator|.
name|y
argument_list|()
argument_list|)
decl_stmt|;
name|QTransform
name|gl_to_qt
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
name|pdev
operator|->
name|height
argument_list|()
argument_list|)
decl_stmt|;
name|QTransform
name|m
init|=
name|QTransform
argument_list|(
name|matrix
argument_list|)
operator|.
name|translate
argument_list|(
name|brush_origin
operator|.
name|x
argument_list|()
argument_list|,
name|brush_origin
operator|.
name|y
argument_list|()
argument_list|)
decl_stmt|;
name|QTransform
name|inv_matrix
init|=
name|gl_to_qt
operator|*
operator|(
name|brush
operator|.
name|transform
argument_list|()
operator|*
name|m
operator|)
operator|.
name|inverted
argument_list|()
operator|*
name|translate
decl_stmt|;
name|setInvMatrixData
argument_list|(
name|inv_matrix
argument_list|)
expr_stmt|;
name|fmp_data
index|[
literal|0
index|]
operator|=
name|realCenter
operator|.
name|x
argument_list|()
operator|-
name|realFocal
operator|.
name|x
argument_list|()
expr_stmt|;
name|fmp_data
index|[
literal|1
index|]
operator|=
name|realCenter
operator|.
name|y
argument_list|()
operator|-
name|realFocal
operator|.
name|y
argument_list|()
expr_stmt|;
name|fmp2_m_radius2_data
index|[
literal|0
index|]
operator|=
operator|-
name|fmp_data
index|[
literal|0
index|]
operator|*
name|fmp_data
index|[
literal|0
index|]
operator|-
name|fmp_data
index|[
literal|1
index|]
operator|*
name|fmp_data
index|[
literal|1
index|]
operator|+
name|realRadius
operator|*
name|realRadius
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|style
operator|==
name|Qt
operator|::
name|ConicalGradientPattern
condition|)
block|{
specifier|const
name|QConicalGradient
modifier|*
name|g
init|=
cast|static_cast
argument_list|<
specifier|const
name|QConicalGradient
operator|*
argument_list|>
argument_list|(
name|brush
operator|.
name|gradient
argument_list|()
argument_list|)
decl_stmt|;
name|QPointF
name|realCenter
init|=
name|g
operator|->
name|center
argument_list|()
decl_stmt|;
name|QTransform
name|translate
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
operator|-
name|realCenter
operator|.
name|x
argument_list|()
argument_list|,
operator|-
name|realCenter
operator|.
name|y
argument_list|()
argument_list|)
decl_stmt|;
name|QTransform
name|gl_to_qt
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
name|pdev
operator|->
name|height
argument_list|()
argument_list|)
decl_stmt|;
name|QTransform
name|m
init|=
name|QTransform
argument_list|(
name|matrix
argument_list|)
operator|.
name|translate
argument_list|(
name|brush_origin
operator|.
name|x
argument_list|()
argument_list|,
name|brush_origin
operator|.
name|y
argument_list|()
argument_list|)
decl_stmt|;
name|QTransform
name|inv_matrix
init|=
name|gl_to_qt
operator|*
operator|(
name|brush
operator|.
name|transform
argument_list|()
operator|*
name|m
operator|)
operator|.
name|inverted
argument_list|()
operator|*
name|translate
decl_stmt|;
name|setInvMatrixData
argument_list|(
name|inv_matrix
argument_list|)
expr_stmt|;
name|angle_data
index|[
literal|0
index|]
operator|=
operator|-
operator|(
name|g
operator|->
name|angle
argument_list|()
operator|*
literal|2
operator|*
name|Q_PI
operator|)
operator|/
literal|360.0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|style
operator|==
name|Qt
operator|::
name|LinearGradientPattern
condition|)
block|{
specifier|const
name|QLinearGradient
modifier|*
name|g
init|=
cast|static_cast
argument_list|<
specifier|const
name|QLinearGradient
operator|*
argument_list|>
argument_list|(
name|brush
operator|.
name|gradient
argument_list|()
argument_list|)
decl_stmt|;
name|QPointF
name|realStart
init|=
name|g
operator|->
name|start
argument_list|()
decl_stmt|;
name|QPointF
name|realFinal
init|=
name|g
operator|->
name|finalStop
argument_list|()
decl_stmt|;
name|QTransform
name|translate
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
operator|-
name|realStart
operator|.
name|x
argument_list|()
argument_list|,
operator|-
name|realStart
operator|.
name|y
argument_list|()
argument_list|)
decl_stmt|;
name|QTransform
name|gl_to_qt
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
name|pdev
operator|->
name|height
argument_list|()
argument_list|)
decl_stmt|;
name|QTransform
name|m
init|=
name|QTransform
argument_list|(
name|matrix
argument_list|)
operator|.
name|translate
argument_list|(
name|brush_origin
operator|.
name|x
argument_list|()
argument_list|,
name|brush_origin
operator|.
name|y
argument_list|()
argument_list|)
decl_stmt|;
name|QTransform
name|inv_matrix
init|=
name|gl_to_qt
operator|*
operator|(
name|brush
operator|.
name|transform
argument_list|()
operator|*
name|m
operator|)
operator|.
name|inverted
argument_list|()
operator|*
name|translate
decl_stmt|;
name|setInvMatrixData
argument_list|(
name|inv_matrix
argument_list|)
expr_stmt|;
name|QPointF
name|l
init|=
name|realFinal
operator|-
name|realStart
decl_stmt|;
name|linear_data
index|[
literal|0
index|]
operator|=
name|l
operator|.
name|x
argument_list|()
expr_stmt|;
name|linear_data
index|[
literal|1
index|]
operator|=
name|l
operator|.
name|y
argument_list|()
expr_stmt|;
name|linear_data
index|[
literal|2
index|]
operator|=
literal|1.0f
operator|/
operator|(
name|l
operator|.
name|x
argument_list|()
operator|*
name|l
operator|.
name|x
argument_list|()
operator|+
name|l
operator|.
name|y
argument_list|()
operator|*
name|l
operator|.
name|y
argument_list|()
operator|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|style
operator|!=
name|Qt
operator|::
name|SolidPattern
condition|)
block|{
name|QTransform
name|gl_to_qt
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
name|pdev
operator|->
name|height
argument_list|()
argument_list|)
decl_stmt|;
name|QTransform
name|m
init|=
name|QTransform
argument_list|(
name|matrix
argument_list|)
operator|.
name|translate
argument_list|(
name|brush_origin
operator|.
name|x
argument_list|()
argument_list|,
name|brush_origin
operator|.
name|y
argument_list|()
argument_list|)
decl_stmt|;
name|QTransform
name|inv_matrix
init|=
name|gl_to_qt
operator|*
operator|(
name|brush
operator|.
name|transform
argument_list|()
operator|*
name|m
operator|)
operator|.
name|inverted
argument_list|()
decl_stmt|;
name|setInvMatrixData
argument_list|(
name|inv_matrix
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|style
operator|>=
name|Qt
operator|::
name|LinearGradientPattern
operator|&&
name|style
operator|<=
name|Qt
operator|::
name|ConicalGradientPattern
condition|)
block|{
name|createGradientPaletteTexture
argument_list|(
operator|*
name|brush
operator|.
name|gradient
argument_list|()
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_class
DECL|class|QOpenGLTessellator
class|class
name|QOpenGLTessellator
super|:
specifier|public
name|QTessellator
block|{
public|public:
DECL|function|QOpenGLTessellator
name|QOpenGLTessellator
parameter_list|()
block|{}
DECL|function|~QOpenGLTessellator
name|~
name|QOpenGLTessellator
parameter_list|()
block|{ }
name|QGLTrapezoid
name|toGLTrapezoid
parameter_list|(
specifier|const
name|Trapezoid
modifier|&
name|trap
parameter_list|)
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|toGLTrapezoid
name|QGLTrapezoid
name|QOpenGLTessellator
operator|::
name|toGLTrapezoid
parameter_list|(
specifier|const
name|Trapezoid
modifier|&
name|trap
parameter_list|)
block|{
name|QGLTrapezoid
name|t
decl_stmt|;
name|t
operator|.
name|top
operator|=
name|Q27Dot5ToDouble
argument_list|(
name|trap
operator|.
name|top
argument_list|)
expr_stmt|;
name|t
operator|.
name|bottom
operator|=
name|Q27Dot5ToDouble
argument_list|(
name|trap
operator|.
name|bottom
argument_list|)
expr_stmt|;
name|Q27Dot5
name|y
init|=
name|trap
operator|.
name|topLeft
operator|->
name|y
operator|-
name|trap
operator|.
name|bottomLeft
operator|->
name|y
decl_stmt|;
name|qreal
name|topLeftY
init|=
name|Q27Dot5ToDouble
argument_list|(
name|trap
operator|.
name|topLeft
operator|->
name|y
argument_list|)
decl_stmt|;
name|qreal
name|tx
init|=
name|Q27Dot5ToDouble
argument_list|(
name|trap
operator|.
name|topLeft
operator|->
name|x
argument_list|)
decl_stmt|;
name|qreal
name|m
init|=
operator|(
operator|-
name|tx
operator|+
name|Q27Dot5ToDouble
argument_list|(
name|trap
operator|.
name|bottomLeft
operator|->
name|x
argument_list|)
operator|)
operator|/
name|Q27Dot5ToDouble
argument_list|(
name|y
argument_list|)
decl_stmt|;
name|t
operator|.
name|topLeftX
operator|=
name|tx
operator|+
name|m
operator|*
operator|(
name|topLeftY
operator|-
name|t
operator|.
name|top
operator|)
expr_stmt|;
name|t
operator|.
name|bottomLeftX
operator|=
name|tx
operator|+
name|m
operator|*
operator|(
name|topLeftY
operator|-
name|t
operator|.
name|bottom
operator|)
expr_stmt|;
name|y
operator|=
name|trap
operator|.
name|topRight
operator|->
name|y
operator|-
name|trap
operator|.
name|bottomRight
operator|->
name|y
expr_stmt|;
name|qreal
name|topRightY
init|=
name|Q27Dot5ToDouble
argument_list|(
name|trap
operator|.
name|topRight
operator|->
name|y
argument_list|)
decl_stmt|;
name|tx
operator|=
name|Q27Dot5ToDouble
argument_list|(
name|trap
operator|.
name|topRight
operator|->
name|x
argument_list|)
expr_stmt|;
name|m
operator|=
operator|(
operator|-
name|tx
operator|+
name|Q27Dot5ToDouble
argument_list|(
name|trap
operator|.
name|bottomRight
operator|->
name|x
argument_list|)
operator|)
operator|/
name|Q27Dot5ToDouble
argument_list|(
name|y
argument_list|)
expr_stmt|;
name|t
operator|.
name|topRightX
operator|=
name|tx
operator|+
name|m
operator|*
operator|(
name|topRightY
operator|-
name|Q27Dot5ToDouble
argument_list|(
name|trap
operator|.
name|top
argument_list|)
operator|)
expr_stmt|;
name|t
operator|.
name|bottomRightX
operator|=
name|tx
operator|+
name|m
operator|*
operator|(
name|topRightY
operator|-
name|Q27Dot5ToDouble
argument_list|(
name|trap
operator|.
name|bottom
argument_list|)
operator|)
expr_stmt|;
return|return
name|t
return|;
block|}
end_function
begin_class
DECL|class|QOpenGLImmediateModeTessellator
class|class
name|QOpenGLImmediateModeTessellator
super|:
specifier|public
name|QOpenGLTessellator
block|{
public|public:
name|void
name|addTrap
parameter_list|(
specifier|const
name|Trapezoid
modifier|&
name|trap
parameter_list|)
function_decl|;
DECL|function|tessellate
name|void
name|tessellate
parameter_list|(
specifier|const
name|QPointF
modifier|*
name|points
parameter_list|,
name|int
name|nPoints
parameter_list|,
name|bool
name|winding
parameter_list|)
block|{
name|trapezoids
operator|.
name|reserve
argument_list|(
name|trapezoids
operator|.
name|size
argument_list|()
operator|+
name|nPoints
argument_list|)
expr_stmt|;
name|setWinding
argument_list|(
name|winding
argument_list|)
expr_stmt|;
name|QTessellator
operator|::
name|tessellate
argument_list|(
name|points
argument_list|,
name|nPoints
argument_list|)
expr_stmt|;
block|}
DECL|member|trapezoids
name|QVector
argument_list|<
name|QGLTrapezoid
argument_list|>
name|trapezoids
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|addTrap
name|void
name|QOpenGLImmediateModeTessellator
operator|::
name|addTrap
parameter_list|(
specifier|const
name|Trapezoid
modifier|&
name|trap
parameter_list|)
block|{
name|trapezoids
operator|.
name|append
argument_list|(
name|toGLTrapezoid
argument_list|(
name|trap
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_OPENGL_ES
end_ifndef
begin_function
DECL|function|drawTrapezoid
specifier|static
name|void
name|drawTrapezoid
parameter_list|(
specifier|const
name|QGLTrapezoid
modifier|&
name|trap
parameter_list|,
specifier|const
name|qreal
name|offscreenHeight
parameter_list|,
name|QGLContext
modifier|*
name|ctx
parameter_list|)
block|{
name|qreal
name|minX
init|=
name|qMin
argument_list|(
name|trap
operator|.
name|topLeftX
argument_list|,
name|trap
operator|.
name|bottomLeftX
argument_list|)
decl_stmt|;
name|qreal
name|maxX
init|=
name|qMax
argument_list|(
name|trap
operator|.
name|topRightX
argument_list|,
name|trap
operator|.
name|bottomRightX
argument_list|)
decl_stmt|;
if|if
condition|(
name|qFuzzyCompare
argument_list|(
name|trap
operator|.
name|top
argument_list|,
name|trap
operator|.
name|bottom
argument_list|)
operator|||
name|qFuzzyCompare
argument_list|(
name|minX
argument_list|,
name|maxX
argument_list|)
operator|||
operator|(
name|qFuzzyCompare
argument_list|(
name|trap
operator|.
name|topLeftX
argument_list|,
name|trap
operator|.
name|topRightX
argument_list|)
operator|&&
name|qFuzzyCompare
argument_list|(
name|trap
operator|.
name|bottomLeftX
argument_list|,
name|trap
operator|.
name|bottomRightX
argument_list|)
operator|)
condition|)
return|return;
specifier|const
name|qreal
name|xpadding
init|=
literal|1.0
decl_stmt|;
specifier|const
name|qreal
name|ypadding
init|=
literal|1.0
decl_stmt|;
name|qreal
name|topDist
init|=
name|offscreenHeight
operator|-
name|trap
operator|.
name|top
decl_stmt|;
name|qreal
name|bottomDist
init|=
name|offscreenHeight
operator|-
name|trap
operator|.
name|bottom
decl_stmt|;
name|qreal
name|reciprocal
init|=
name|bottomDist
operator|/
operator|(
name|bottomDist
operator|-
name|topDist
operator|)
decl_stmt|;
name|qreal
name|leftB
init|=
name|trap
operator|.
name|bottomLeftX
operator|+
operator|(
name|trap
operator|.
name|topLeftX
operator|-
name|trap
operator|.
name|bottomLeftX
operator|)
operator|*
name|reciprocal
decl_stmt|;
name|qreal
name|rightB
init|=
name|trap
operator|.
name|bottomRightX
operator|+
operator|(
name|trap
operator|.
name|topRightX
operator|-
name|trap
operator|.
name|bottomRightX
operator|)
operator|*
name|reciprocal
decl_stmt|;
specifier|const
name|bool
name|topZero
init|=
name|qFuzzyIsNull
argument_list|(
name|topDist
argument_list|)
decl_stmt|;
name|reciprocal
operator|=
name|topZero
condition|?
literal|1.0
operator|/
name|bottomDist
else|:
literal|1.0
operator|/
name|topDist
expr_stmt|;
name|qreal
name|leftA
init|=
name|topZero
condition|?
operator|(
name|trap
operator|.
name|bottomLeftX
operator|-
name|leftB
operator|)
operator|*
name|reciprocal
else|:
operator|(
name|trap
operator|.
name|topLeftX
operator|-
name|leftB
operator|)
operator|*
name|reciprocal
decl_stmt|;
name|qreal
name|rightA
init|=
name|topZero
condition|?
operator|(
name|trap
operator|.
name|bottomRightX
operator|-
name|rightB
operator|)
operator|*
name|reciprocal
else|:
operator|(
name|trap
operator|.
name|topRightX
operator|-
name|rightB
operator|)
operator|*
name|reciprocal
decl_stmt|;
name|qreal
name|invLeftA
init|=
name|qFuzzyIsNull
argument_list|(
name|leftA
argument_list|)
condition|?
literal|0.0
else|:
literal|1.0
operator|/
name|leftA
decl_stmt|;
name|qreal
name|invRightA
init|=
name|qFuzzyIsNull
argument_list|(
name|rightA
argument_list|)
condition|?
literal|0.0
else|:
literal|1.0
operator|/
name|rightA
decl_stmt|;
comment|// fragment program needs the negative of invRightA as it mirrors the line
name|glTexCoord4f
argument_list|(
name|topDist
argument_list|,
name|bottomDist
argument_list|,
name|invLeftA
argument_list|,
operator|-
name|invRightA
argument_list|)
expr_stmt|;
name|glMultiTexCoord4f
argument_list|(
name|GL_TEXTURE1
argument_list|,
name|leftA
argument_list|,
name|leftB
argument_list|,
name|rightA
argument_list|,
name|rightB
argument_list|)
expr_stmt|;
name|qreal
name|topY
init|=
name|trap
operator|.
name|top
operator|-
name|ypadding
decl_stmt|;
name|qreal
name|bottomY
init|=
name|trap
operator|.
name|bottom
operator|+
name|ypadding
decl_stmt|;
name|qreal
name|bounds_bottomLeftX
init|=
name|leftA
operator|*
operator|(
name|offscreenHeight
operator|-
name|bottomY
operator|)
operator|+
name|leftB
decl_stmt|;
name|qreal
name|bounds_bottomRightX
init|=
name|rightA
operator|*
operator|(
name|offscreenHeight
operator|-
name|bottomY
operator|)
operator|+
name|rightB
decl_stmt|;
name|qreal
name|bounds_topLeftX
init|=
name|leftA
operator|*
operator|(
name|offscreenHeight
operator|-
name|topY
operator|)
operator|+
name|leftB
decl_stmt|;
name|qreal
name|bounds_topRightX
init|=
name|rightA
operator|*
operator|(
name|offscreenHeight
operator|-
name|topY
operator|)
operator|+
name|rightB
decl_stmt|;
name|QPointF
name|leftNormal
argument_list|(
literal|1
argument_list|,
operator|-
name|leftA
argument_list|)
decl_stmt|;
name|leftNormal
operator|/=
name|qSqrt
argument_list|(
name|leftNormal
operator|.
name|x
argument_list|()
operator|*
name|leftNormal
operator|.
name|x
argument_list|()
operator|+
name|leftNormal
operator|.
name|y
argument_list|()
operator|*
name|leftNormal
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|QPointF
name|rightNormal
argument_list|(
literal|1
argument_list|,
operator|-
name|rightA
argument_list|)
decl_stmt|;
name|rightNormal
operator|/=
name|qSqrt
argument_list|(
name|rightNormal
operator|.
name|x
argument_list|()
operator|*
name|rightNormal
operator|.
name|x
argument_list|()
operator|+
name|rightNormal
operator|.
name|y
argument_list|()
operator|*
name|rightNormal
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|qreal
name|left_padding
init|=
name|xpadding
operator|/
name|qAbs
argument_list|(
name|leftNormal
operator|.
name|x
argument_list|()
argument_list|)
decl_stmt|;
name|qreal
name|right_padding
init|=
name|xpadding
operator|/
name|qAbs
argument_list|(
name|rightNormal
operator|.
name|x
argument_list|()
argument_list|)
decl_stmt|;
name|glVertex2d
argument_list|(
name|bounds_topLeftX
operator|-
name|left_padding
argument_list|,
name|topY
argument_list|)
expr_stmt|;
name|glVertex2d
argument_list|(
name|bounds_topRightX
operator|+
name|right_padding
argument_list|,
name|topY
argument_list|)
expr_stmt|;
name|glVertex2d
argument_list|(
name|bounds_bottomRightX
operator|+
name|right_padding
argument_list|,
name|bottomY
argument_list|)
expr_stmt|;
name|glVertex2d
argument_list|(
name|bounds_bottomLeftX
operator|-
name|left_padding
argument_list|,
name|bottomY
argument_list|)
expr_stmt|;
name|glTexCoord4f
argument_list|(
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// !Q_WS_QWS
end_comment
begin_class
DECL|class|QOpenGLTrapezoidToArrayTessellator
class|class
name|QOpenGLTrapezoidToArrayTessellator
super|:
specifier|public
name|QOpenGLTessellator
block|{
public|public:
DECL|function|QOpenGLTrapezoidToArrayTessellator
name|QOpenGLTrapezoidToArrayTessellator
parameter_list|()
member_init_list|:
name|vertices
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|allocated
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|size
argument_list|(
literal|0
argument_list|)
block|{}
DECL|function|~QOpenGLTrapezoidToArrayTessellator
name|~
name|QOpenGLTrapezoidToArrayTessellator
parameter_list|()
block|{
name|free
argument_list|(
name|vertices
argument_list|)
expr_stmt|;
block|}
DECL|member|vertices
name|GLfloat
modifier|*
name|vertices
decl_stmt|;
DECL|member|allocated
name|int
name|allocated
decl_stmt|;
DECL|member|size
name|int
name|size
decl_stmt|;
DECL|member|bounds
name|QRectF
name|bounds
decl_stmt|;
name|void
name|addTrap
parameter_list|(
specifier|const
name|Trapezoid
modifier|&
name|trap
parameter_list|)
function_decl|;
DECL|function|tessellate
name|void
name|tessellate
parameter_list|(
specifier|const
name|QPointF
modifier|*
name|points
parameter_list|,
name|int
name|nPoints
parameter_list|,
name|bool
name|winding
parameter_list|)
block|{
name|size
operator|=
literal|0
expr_stmt|;
name|setWinding
argument_list|(
name|winding
argument_list|)
expr_stmt|;
name|bounds
operator|=
name|QTessellator
operator|::
name|tessellate
argument_list|(
name|points
argument_list|,
name|nPoints
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|addTrap
name|void
name|QOpenGLTrapezoidToArrayTessellator
operator|::
name|addTrap
parameter_list|(
specifier|const
name|Trapezoid
modifier|&
name|trap
parameter_list|)
block|{
comment|// On OpenGL ES we convert the trap to 2 triangles
ifndef|#
directive|ifndef
name|QT_OPENGL_ES
if|if
condition|(
name|size
operator|>
name|allocated
operator|-
literal|8
condition|)
block|{
else|#
directive|else
if|if
condition|(
name|size
operator|>
name|allocated
operator|-
literal|12
condition|)
block|{
endif|#
directive|endif
name|allocated
operator|=
name|qMax
argument_list|(
literal|2
operator|*
name|allocated
argument_list|,
literal|512
argument_list|)
expr_stmt|;
name|vertices
operator|=
operator|(
name|GLfloat
operator|*
operator|)
name|realloc
argument_list|(
name|vertices
argument_list|,
name|allocated
operator|*
sizeof|sizeof
argument_list|(
name|GLfloat
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QGLTrapezoid
name|t
init|=
name|toGLTrapezoid
argument_list|(
name|trap
argument_list|)
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_OPENGL_ES
name|vertices
index|[
name|size
operator|++
index|]
operator|=
name|t
operator|.
name|topLeftX
expr_stmt|;
name|vertices
index|[
name|size
operator|++
index|]
operator|=
name|t
operator|.
name|top
expr_stmt|;
name|vertices
index|[
name|size
operator|++
index|]
operator|=
name|t
operator|.
name|topRightX
expr_stmt|;
name|vertices
index|[
name|size
operator|++
index|]
operator|=
name|t
operator|.
name|top
expr_stmt|;
name|vertices
index|[
name|size
operator|++
index|]
operator|=
name|t
operator|.
name|bottomRightX
expr_stmt|;
name|vertices
index|[
name|size
operator|++
index|]
operator|=
name|t
operator|.
name|bottom
expr_stmt|;
name|vertices
index|[
name|size
operator|++
index|]
operator|=
name|t
operator|.
name|bottomLeftX
expr_stmt|;
name|vertices
index|[
name|size
operator|++
index|]
operator|=
name|t
operator|.
name|bottom
expr_stmt|;
else|#
directive|else
comment|// First triangle
name|vertices
index|[
name|size
operator|++
index|]
operator|=
name|t
operator|.
name|topLeftX
expr_stmt|;
name|vertices
index|[
name|size
operator|++
index|]
operator|=
name|t
operator|.
name|top
expr_stmt|;
name|vertices
index|[
name|size
operator|++
index|]
operator|=
name|t
operator|.
name|topRightX
expr_stmt|;
name|vertices
index|[
name|size
operator|++
index|]
operator|=
name|t
operator|.
name|top
expr_stmt|;
name|vertices
index|[
name|size
operator|++
index|]
operator|=
name|t
operator|.
name|bottomRightX
expr_stmt|;
name|vertices
index|[
name|size
operator|++
index|]
operator|=
name|t
operator|.
name|bottom
expr_stmt|;
comment|// Second triangle
name|vertices
index|[
name|size
operator|++
index|]
operator|=
name|t
operator|.
name|bottomLeftX
expr_stmt|;
name|vertices
index|[
name|size
operator|++
index|]
operator|=
name|t
operator|.
name|bottom
expr_stmt|;
name|vertices
index|[
name|size
operator|++
index|]
operator|=
name|t
operator|.
name|topLeftX
expr_stmt|;
name|vertices
index|[
name|size
operator|++
index|]
operator|=
name|t
operator|.
name|top
expr_stmt|;
name|vertices
index|[
name|size
operator|++
index|]
operator|=
name|t
operator|.
name|bottomRightX
expr_stmt|;
name|vertices
index|[
name|size
operator|++
index|]
operator|=
name|t
operator|.
name|bottom
expr_stmt|;
endif|#
directive|endif
block|}
DECL|function|fillPolygon_dev
name|void
name|QOpenGLPaintEnginePrivate
operator|::
name|fillPolygon_dev
parameter_list|(
specifier|const
name|QPointF
modifier|*
name|polygonPoints
parameter_list|,
name|int
name|pointCount
parameter_list|,
name|Qt
operator|::
name|FillRule
name|fill
parameter_list|)
block|{
name|QOpenGLTrapezoidToArrayTessellator
name|tessellator
decl_stmt|;
name|tessellator
operator|.
name|tessellate
argument_list|(
name|polygonPoints
argument_list|,
name|pointCount
argument_list|,
name|fill
operator|==
name|Qt
operator|::
name|WindingFill
argument_list|)
expr_stmt|;
name|DEBUG_ONCE
name|qDebug
argument_list|()
decl|<< "QOpenGLPaintEnginePrivate: Drawing polygon with"<<
name|pointCount
decl|<< "points using fillPolygon_dev"
decl_stmt|;
name|setGradientOps
argument_list|(
name|cbrush
argument_list|,
name|tessellator
operator|.
name|bounds
argument_list|)
expr_stmt|;
name|bool
name|fast_style
init|=
name|current_style
operator|==
name|Qt
operator|::
name|LinearGradientPattern
operator|||
name|current_style
operator|==
name|Qt
operator|::
name|SolidPattern
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_OPENGL_ES
name|GLenum
name|geometry_mode
init|=
name|GL_QUADS
decl_stmt|;
else|#
directive|else
name|GLenum
name|geometry_mode
init|=
name|GL_TRIANGLES
decl_stmt|;
endif|#
directive|endif
if|if
condition|(
name|use_fragment_programs
operator|&&
operator|!
operator|(
name|fast_style
operator|&&
name|has_fast_composition_mode
operator|)
condition|)
block|{
name|composite
argument_list|(
name|geometry_mode
argument_list|,
name|tessellator
operator|.
name|vertices
argument_list|,
name|tessellator
operator|.
name|size
operator|/
literal|2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|glVertexPointer
argument_list|(
literal|2
argument_list|,
name|GL_FLOAT
argument_list|,
literal|0
argument_list|,
name|tessellator
operator|.
name|vertices
argument_list|)
expr_stmt|;
name|glEnableClientState
argument_list|(
name|GL_VERTEX_ARRAY
argument_list|)
expr_stmt|;
name|glDrawArrays
argument_list|(
name|geometry_mode
argument_list|,
literal|0
argument_list|,
name|tessellator
operator|.
name|size
operator|/
literal|2
argument_list|)
expr_stmt|;
name|glDisableClientState
argument_list|(
name|GL_VERTEX_ARRAY
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|lineToStencil
specifier|inline
name|void
name|QOpenGLPaintEnginePrivate
operator|::
name|lineToStencil
parameter_list|(
name|qreal
name|x
parameter_list|,
name|qreal
name|y
parameter_list|)
block|{
name|tess_points
operator|.
name|add
argument_list|(
name|QPointF
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|x
operator|>
name|max_x
condition|)
name|max_x
operator|=
name|x
expr_stmt|;
elseif|else
if|if
condition|(
name|x
operator|<
name|min_x
condition|)
name|min_x
operator|=
name|x
expr_stmt|;
if|if
condition|(
name|y
operator|>
name|max_y
condition|)
name|max_y
operator|=
name|y
expr_stmt|;
elseif|else
if|if
condition|(
name|y
operator|<
name|min_y
condition|)
name|min_y
operator|=
name|y
expr_stmt|;
block|}
DECL|function|curveToStencil
specifier|inline
name|void
name|QOpenGLPaintEnginePrivate
operator|::
name|curveToStencil
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|cp1
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|cp2
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|ep
parameter_list|)
block|{
name|qreal
name|inverseScaleHalf
init|=
name|inverseScale
operator|/
literal|2
decl_stmt|;
name|QBezier
name|beziers
index|[
literal|32
index|]
decl_stmt|;
name|beziers
index|[
literal|0
index|]
operator|=
name|QBezier
operator|::
name|fromPoints
argument_list|(
name|tess_points
operator|.
name|last
argument_list|()
argument_list|,
name|cp1
argument_list|,
name|cp2
argument_list|,
name|ep
argument_list|)
expr_stmt|;
name|QBezier
modifier|*
name|b
init|=
name|beziers
decl_stmt|;
while|while
condition|(
name|b
operator|>=
name|beziers
condition|)
block|{
comment|// check if we can pop the top bezier curve from the stack
name|qreal
name|l
init|=
name|qAbs
argument_list|(
name|b
operator|->
name|x4
operator|-
name|b
operator|->
name|x1
argument_list|)
operator|+
name|qAbs
argument_list|(
name|b
operator|->
name|y4
operator|-
name|b
operator|->
name|y1
argument_list|)
decl_stmt|;
name|qreal
name|d
decl_stmt|;
if|if
condition|(
name|l
operator|>
name|inverseScale
condition|)
block|{
name|d
operator|=
name|qAbs
argument_list|(
operator|(
name|b
operator|->
name|x4
operator|-
name|b
operator|->
name|x1
operator|)
operator|*
operator|(
name|b
operator|->
name|y1
operator|-
name|b
operator|->
name|y2
operator|)
operator|-
operator|(
name|b
operator|->
name|y4
operator|-
name|b
operator|->
name|y1
operator|)
operator|*
operator|(
name|b
operator|->
name|x1
operator|-
name|b
operator|->
name|x2
operator|)
argument_list|)
operator|+
name|qAbs
argument_list|(
operator|(
name|b
operator|->
name|x4
operator|-
name|b
operator|->
name|x1
operator|)
operator|*
operator|(
name|b
operator|->
name|y1
operator|-
name|b
operator|->
name|y3
operator|)
operator|-
operator|(
name|b
operator|->
name|y4
operator|-
name|b
operator|->
name|y1
operator|)
operator|*
operator|(
name|b
operator|->
name|x1
operator|-
name|b
operator|->
name|x3
operator|)
argument_list|)
expr_stmt|;
name|d
operator|/=
name|l
expr_stmt|;
block|}
else|else
block|{
name|d
operator|=
name|qAbs
argument_list|(
name|b
operator|->
name|x1
operator|-
name|b
operator|->
name|x2
argument_list|)
operator|+
name|qAbs
argument_list|(
name|b
operator|->
name|y1
operator|-
name|b
operator|->
name|y2
argument_list|)
operator|+
name|qAbs
argument_list|(
name|b
operator|->
name|x1
operator|-
name|b
operator|->
name|x3
argument_list|)
operator|+
name|qAbs
argument_list|(
name|b
operator|->
name|y1
operator|-
name|b
operator|->
name|y3
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|<
name|inverseScaleHalf
operator|||
name|b
operator|==
name|beziers
operator|+
literal|31
condition|)
block|{
comment|// good enough, we pop it off and add the endpoint
name|lineToStencil
argument_list|(
name|b
operator|->
name|x4
argument_list|,
name|b
operator|->
name|y4
argument_list|)
expr_stmt|;
operator|--
name|b
expr_stmt|;
block|}
else|else
block|{
comment|// split, second half of the polygon goes lower into the stack
name|b
operator|->
name|split
argument_list|(
name|b
operator|+
literal|1
argument_list|,
name|b
argument_list|)
expr_stmt|;
operator|++
name|b
expr_stmt|;
block|}
block|}
block|}
DECL|function|pathToVertexArrays
name|void
name|QOpenGLPaintEnginePrivate
operator|::
name|pathToVertexArrays
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|path
parameter_list|)
block|{
specifier|const
name|QPainterPath
operator|::
name|Element
modifier|&
name|first
init|=
name|path
operator|.
name|elementAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|min_x
operator|=
name|max_x
operator|=
name|first
operator|.
name|x
expr_stmt|;
name|min_y
operator|=
name|max_y
operator|=
name|first
operator|.
name|y
expr_stmt|;
name|tess_points
operator|.
name|reset
argument_list|()
expr_stmt|;
name|tess_points_stops
operator|.
name|clear
argument_list|()
expr_stmt|;
name|lineToStencil
argument_list|(
name|first
operator|.
name|x
argument_list|,
name|first
operator|.
name|y
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|path
operator|.
name|elementCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QPainterPath
operator|::
name|Element
modifier|&
name|e
init|=
name|path
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|e
operator|.
name|type
condition|)
block|{
case|case
name|QPainterPath
operator|::
name|MoveToElement
case|:
name|tess_points_stops
operator|.
name|append
argument_list|(
name|tess_points
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|lineToStencil
argument_list|(
name|e
operator|.
name|x
argument_list|,
name|e
operator|.
name|y
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPainterPath
operator|::
name|LineToElement
case|:
name|lineToStencil
argument_list|(
name|e
operator|.
name|x
argument_list|,
name|e
operator|.
name|y
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPainterPath
operator|::
name|CurveToElement
case|:
name|curveToStencil
argument_list|(
name|e
argument_list|,
name|path
operator|.
name|elementAt
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|,
name|path
operator|.
name|elementAt
argument_list|(
name|i
operator|+
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|+=
literal|2
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
name|lineToStencil
argument_list|(
name|first
operator|.
name|x
argument_list|,
name|first
operator|.
name|y
argument_list|)
expr_stmt|;
name|tess_points_stops
operator|.
name|append
argument_list|(
name|tess_points
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|function|drawVertexArrays
name|void
name|QOpenGLPaintEnginePrivate
operator|::
name|drawVertexArrays
parameter_list|()
block|{
if|if
condition|(
name|tess_points_stops
operator|.
name|count
argument_list|()
operator|==
literal|0
condition|)
return|return;
name|glEnableClientState
argument_list|(
name|GL_VERTEX_ARRAY
argument_list|)
expr_stmt|;
name|glVertexPointer
argument_list|(
literal|2
argument_list|,
name|GL_DOUBLE
argument_list|,
literal|0
argument_list|,
name|tess_points
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|previous_stop
init|=
literal|0
decl_stmt|;
foreach|foreach
control|(
name|int
name|stop
decl|,
name|tess_points_stops
control|)
block|{
name|glDrawArrays
argument_list|(
name|GL_TRIANGLE_FAN
argument_list|,
name|previous_stop
argument_list|,
name|stop
operator|-
name|previous_stop
argument_list|)
expr_stmt|;
name|previous_stop
operator|=
name|stop
expr_stmt|;
block|}
name|glDisableClientState
argument_list|(
name|GL_VERTEX_ARRAY
argument_list|)
expr_stmt|;
block|}
DECL|function|fillVertexArray
name|void
name|QOpenGLPaintEnginePrivate
operator|::
name|fillVertexArray
parameter_list|(
name|Qt
operator|::
name|FillRule
name|fillRule
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QOpenGLPaintEngine
argument_list|)
expr_stmt|;
name|QRect
name|rect
init|=
name|dirty_stencil
operator|.
name|boundingRect
argument_list|()
decl_stmt|;
if|if
condition|(
name|use_system_clip
condition|)
name|rect
operator|=
name|q
operator|->
name|systemClip
argument_list|()
operator|.
name|intersected
argument_list|(
name|dirty_stencil
argument_list|)
operator|.
name|boundingRect
argument_list|()
expr_stmt|;
name|glStencilMask
argument_list|(
operator|~
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|rect
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|disableClipping
argument_list|()
expr_stmt|;
name|glEnable
argument_list|(
name|GL_SCISSOR_TEST
argument_list|)
expr_stmt|;
specifier|const
name|int
name|left
init|=
name|rect
operator|.
name|left
argument_list|()
decl_stmt|;
specifier|const
name|int
name|width
init|=
name|rect
operator|.
name|width
argument_list|()
decl_stmt|;
specifier|const
name|int
name|bottom
init|=
name|device
operator|->
name|size
argument_list|()
operator|.
name|height
argument_list|()
operator|-
operator|(
name|rect
operator|.
name|bottom
argument_list|()
operator|+
literal|1
operator|)
decl_stmt|;
specifier|const
name|int
name|height
init|=
name|rect
operator|.
name|height
argument_list|()
decl_stmt|;
name|glScissor
argument_list|(
name|left
argument_list|,
name|bottom
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
name|glClearStencil
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|glClear
argument_list|(
name|GL_STENCIL_BUFFER_BIT
argument_list|)
expr_stmt|;
name|dirty_stencil
operator|-=
name|rect
expr_stmt|;
name|glDisable
argument_list|(
name|GL_SCISSOR_TEST
argument_list|)
expr_stmt|;
name|enableClipping
argument_list|()
expr_stmt|;
block|}
comment|// Enable stencil.
name|glEnable
argument_list|(
name|GL_STENCIL_TEST
argument_list|)
expr_stmt|;
comment|// Disable color writes.
name|glColorMask
argument_list|(
name|GL_FALSE
argument_list|,
name|GL_FALSE
argument_list|,
name|GL_FALSE
argument_list|,
name|GL_FALSE
argument_list|)
expr_stmt|;
name|GLuint
name|stencilMask
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|fillRule
operator|==
name|Qt
operator|::
name|OddEvenFill
condition|)
block|{
name|stencilMask
operator|=
literal|1
expr_stmt|;
comment|// Enable stencil writes.
name|glStencilMask
argument_list|(
name|stencilMask
argument_list|)
expr_stmt|;
comment|// Set stencil xor mode.
name|glStencilOp
argument_list|(
name|GL_KEEP
argument_list|,
name|GL_KEEP
argument_list|,
name|GL_INVERT
argument_list|)
expr_stmt|;
comment|// Disable stencil func.
name|glStencilFunc
argument_list|(
name|GL_ALWAYS
argument_list|,
literal|0
argument_list|,
operator|~
literal|0
argument_list|)
expr_stmt|;
name|drawVertexArrays
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fillRule
operator|==
name|Qt
operator|::
name|WindingFill
condition|)
block|{
name|stencilMask
operator|=
operator|~
literal|0
expr_stmt|;
if|if
condition|(
name|has_stencil_face_ext
condition|)
block|{
name|QGL_FUNC_CONTEXT
expr_stmt|;
name|glEnable
argument_list|(
name|GL_STENCIL_TEST_TWO_SIDE_EXT
argument_list|)
expr_stmt|;
name|glActiveStencilFaceEXT
argument_list|(
name|GL_BACK
argument_list|)
expr_stmt|;
name|glStencilOp
argument_list|(
name|GL_KEEP
argument_list|,
name|GL_KEEP
argument_list|,
name|GL_DECR_WRAP_EXT
argument_list|)
expr_stmt|;
name|glStencilFunc
argument_list|(
name|GL_ALWAYS
argument_list|,
literal|0
argument_list|,
operator|~
literal|0
argument_list|)
expr_stmt|;
name|glActiveStencilFaceEXT
argument_list|(
name|GL_FRONT
argument_list|)
expr_stmt|;
name|glStencilOp
argument_list|(
name|GL_KEEP
argument_list|,
name|GL_KEEP
argument_list|,
name|GL_INCR_WRAP_EXT
argument_list|)
expr_stmt|;
name|glStencilFunc
argument_list|(
name|GL_ALWAYS
argument_list|,
literal|0
argument_list|,
operator|~
literal|0
argument_list|)
expr_stmt|;
name|drawVertexArrays
argument_list|()
expr_stmt|;
name|glDisable
argument_list|(
name|GL_STENCIL_TEST_TWO_SIDE_EXT
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|glStencilFunc
argument_list|(
name|GL_ALWAYS
argument_list|,
literal|0
argument_list|,
operator|~
literal|0
argument_list|)
expr_stmt|;
name|glEnable
argument_list|(
name|GL_CULL_FACE
argument_list|)
expr_stmt|;
name|glCullFace
argument_list|(
name|GL_BACK
argument_list|)
expr_stmt|;
name|glStencilOp
argument_list|(
name|GL_KEEP
argument_list|,
name|GL_KEEP
argument_list|,
name|GL_INCR_WRAP_EXT
argument_list|)
expr_stmt|;
name|drawVertexArrays
argument_list|()
expr_stmt|;
name|glCullFace
argument_list|(
name|GL_FRONT
argument_list|)
expr_stmt|;
name|glStencilOp
argument_list|(
name|GL_KEEP
argument_list|,
name|GL_KEEP
argument_list|,
name|GL_DECR_WRAP_EXT
argument_list|)
expr_stmt|;
name|drawVertexArrays
argument_list|()
expr_stmt|;
name|glDisable
argument_list|(
name|GL_CULL_FACE
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Enable color writes.
name|glColorMask
argument_list|(
name|GL_TRUE
argument_list|,
name|GL_TRUE
argument_list|,
name|GL_TRUE
argument_list|,
name|GL_TRUE
argument_list|)
expr_stmt|;
name|glStencilMask
argument_list|(
name|stencilMask
argument_list|)
expr_stmt|;
name|setGradientOps
argument_list|(
name|cbrush
argument_list|,
name|QRectF
argument_list|(
name|QPointF
argument_list|(
name|min_x
argument_list|,
name|min_y
argument_list|)
argument_list|,
name|QSizeF
argument_list|(
name|max_x
operator|-
name|min_x
argument_list|,
name|max_y
operator|-
name|min_y
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|bool
name|fast_fill
init|=
name|has_fast_composition_mode
operator|&&
operator|(
name|current_style
operator|==
name|Qt
operator|::
name|LinearGradientPattern
operator|||
name|current_style
operator|==
name|Qt
operator|::
name|SolidPattern
operator|)
decl_stmt|;
if|if
condition|(
name|use_fragment_programs
operator|&&
operator|!
name|fast_fill
condition|)
block|{
name|DEBUG_ONCE
name|qDebug
argument_list|()
decl|<< "QOpenGLPaintEnginePrivate: Drawing polygon using stencil method (fragment programs)"
decl_stmt|;
name|QRectF
name|rect
argument_list|(
name|QPointF
argument_list|(
name|min_x
argument_list|,
name|min_y
argument_list|)
argument_list|,
name|QSizeF
argument_list|(
name|max_x
operator|-
name|min_x
argument_list|,
name|max_y
operator|-
name|min_y
argument_list|)
argument_list|)
decl_stmt|;
comment|// Enable stencil func.
name|glStencilFunc
argument_list|(
name|GL_NOTEQUAL
argument_list|,
literal|0
argument_list|,
name|stencilMask
argument_list|)
expr_stmt|;
name|glStencilOp
argument_list|(
name|GL_REPLACE
argument_list|,
name|GL_REPLACE
argument_list|,
name|GL_REPLACE
argument_list|)
expr_stmt|;
name|composite
argument_list|(
name|rect
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|DEBUG_ONCE
name|qDebug
argument_list|()
decl|<< "QOpenGLPaintEnginePrivate: Drawing polygon using stencil method (no fragment programs)"
decl_stmt|;
comment|// Enable stencil func.
name|glStencilFunc
argument_list|(
name|GL_NOTEQUAL
argument_list|,
literal|0
argument_list|,
name|stencilMask
argument_list|)
expr_stmt|;
name|glStencilOp
argument_list|(
name|GL_REPLACE
argument_list|,
name|GL_REPLACE
argument_list|,
name|GL_REPLACE
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_OPENGL_ES
name|glBegin
argument_list|(
name|GL_QUADS
argument_list|)
expr_stmt|;
name|glVertex2f
argument_list|(
name|min_x
argument_list|,
name|min_y
argument_list|)
expr_stmt|;
name|glVertex2f
argument_list|(
name|max_x
argument_list|,
name|min_y
argument_list|)
expr_stmt|;
name|glVertex2f
argument_list|(
name|max_x
argument_list|,
name|max_y
argument_list|)
expr_stmt|;
name|glVertex2f
argument_list|(
name|min_x
argument_list|,
name|max_y
argument_list|)
expr_stmt|;
name|glEnd
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
comment|// Disable stencil writes.
name|glStencilOp
argument_list|(
name|GL_KEEP
argument_list|,
name|GL_KEEP
argument_list|,
name|GL_KEEP
argument_list|)
expr_stmt|;
name|glStencilMask
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|glDisable
argument_list|(
name|GL_STENCIL_TEST
argument_list|)
expr_stmt|;
block|}
DECL|function|fillPath
name|void
name|QOpenGLPaintEnginePrivate
operator|::
name|fillPath
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|path
parameter_list|)
block|{
if|if
condition|(
name|path
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
if|if
condition|(
name|use_stencil_method
operator|&&
operator|!
name|high_quality_antialiasing
condition|)
block|{
name|pathToVertexArrays
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|fillVertexArray
argument_list|(
name|path
operator|.
name|fillRule
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|glMatrixMode
argument_list|(
name|GL_MODELVIEW
argument_list|)
expr_stmt|;
name|glLoadIdentity
argument_list|()
expr_stmt|;
if|if
condition|(
name|high_quality_antialiasing
condition|)
name|drawOffscreenPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
else|else
block|{
name|QPolygonF
name|poly
init|=
name|path
operator|.
name|toFillPolygon
argument_list|(
name|matrix
argument_list|)
decl_stmt|;
name|fillPolygon_dev
argument_list|(
name|poly
operator|.
name|data
argument_list|()
argument_list|,
name|poly
operator|.
name|count
argument_list|()
argument_list|,
name|path
operator|.
name|fillRule
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|updateGLMatrix
argument_list|()
expr_stmt|;
block|}
specifier|extern
name|bool
name|qt_isExtendedRadialGradient
argument_list|(
specifier|const
name|QBrush
operator|&
name|brush
argument_list|)
decl_stmt|;
DECL|function|needsEmulation
specifier|static
specifier|inline
name|bool
name|needsEmulation
parameter_list|(
name|Qt
operator|::
name|BrushStyle
name|style
parameter_list|)
block|{
return|return
operator|!
operator|(
name|style
operator|==
name|Qt
operator|::
name|SolidPattern
operator|||
operator|(
name|style
operator|==
name|Qt
operator|::
name|LinearGradientPattern
operator|&&
operator|(
name|QGLExtensions
operator|::
name|glExtensions
argument_list|()
operator|&
name|QGLExtensions
operator|::
name|MirroredRepeat
operator|)
operator|)
operator|)
return|;
block|}
DECL|function|updateUseEmulation
name|void
name|QOpenGLPaintEnginePrivate
operator|::
name|updateUseEmulation
parameter_list|()
block|{
name|use_emulation
operator|=
operator|(
operator|!
name|use_fragment_programs
operator|&&
operator|(
operator|(
name|has_pen
operator|&&
name|needsEmulation
argument_list|(
name|pen_brush_style
argument_list|)
operator|)
operator|||
operator|(
name|has_brush
operator|&&
name|needsEmulation
argument_list|(
name|brush_style
argument_list|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|has_pen
operator|&&
name|qt_isExtendedRadialGradient
argument_list|(
name|cpen
operator|.
name|brush
argument_list|()
argument_list|)
operator|)
operator|||
operator|(
name|has_brush
operator|&&
name|qt_isExtendedRadialGradient
argument_list|(
name|cbrush
argument_list|)
operator|)
expr_stmt|;
block|}
DECL|function|updatePen
name|void
name|QOpenGLPaintEngine
operator|::
name|updatePen
parameter_list|(
specifier|const
name|QPen
modifier|&
name|pen
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QOpenGLPaintEngine
argument_list|)
expr_stmt|;
name|Qt
operator|::
name|PenStyle
name|pen_style
init|=
name|pen
operator|.
name|style
argument_list|()
decl_stmt|;
name|d
operator|->
name|pen_brush_style
operator|=
name|pen
operator|.
name|brush
argument_list|()
operator|.
name|style
argument_list|()
expr_stmt|;
name|d
operator|->
name|cpen
operator|=
name|pen
expr_stmt|;
name|d
operator|->
name|has_pen
operator|=
operator|(
name|pen_style
operator|!=
name|Qt
operator|::
name|NoPen
operator|)
operator|&&
operator|(
name|d
operator|->
name|pen_brush_style
operator|!=
name|Qt
operator|::
name|NoBrush
operator|)
expr_stmt|;
name|d
operator|->
name|updateUseEmulation
argument_list|()
expr_stmt|;
if|if
condition|(
name|pen
operator|.
name|isCosmetic
argument_list|()
condition|)
block|{
name|GLfloat
name|width
init|=
name|pen
operator|.
name|widthF
argument_list|()
operator|==
literal|0.0f
condition|?
literal|1.0f
else|:
name|pen
operator|.
name|widthF
argument_list|()
decl_stmt|;
name|glLineWidth
argument_list|(
name|width
argument_list|)
expr_stmt|;
name|glPointSize
argument_list|(
name|width
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|->
name|pen_brush_style
operator|>=
name|Qt
operator|::
name|LinearGradientPattern
operator|&&
name|d
operator|->
name|pen_brush_style
operator|<=
name|Qt
operator|::
name|ConicalGradientPattern
condition|)
block|{
name|d
operator|->
name|setGLPen
argument_list|(
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|setGLPen
argument_list|(
name|pen
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|updateFastPen
argument_list|()
expr_stmt|;
block|}
DECL|function|updateBrush
name|void
name|QOpenGLPaintEngine
operator|::
name|updateBrush
parameter_list|(
specifier|const
name|QBrush
modifier|&
name|brush
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|origin
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QOpenGLPaintEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|cbrush
operator|=
name|brush
expr_stmt|;
name|d
operator|->
name|brush_style
operator|=
name|brush
operator|.
name|style
argument_list|()
expr_stmt|;
name|d
operator|->
name|brush_origin
operator|=
name|origin
expr_stmt|;
name|d
operator|->
name|has_brush
operator|=
operator|(
name|d
operator|->
name|brush_style
operator|!=
name|Qt
operator|::
name|NoBrush
operator|)
expr_stmt|;
name|d
operator|->
name|updateUseEmulation
argument_list|()
expr_stmt|;
block|}
DECL|function|updateFont
name|void
name|QOpenGLPaintEngine
operator|::
name|updateFont
parameter_list|(
specifier|const
name|QFont
modifier|&
parameter_list|)
block|{ }
DECL|function|updateMatrix
name|void
name|QOpenGLPaintEngine
operator|::
name|updateMatrix
parameter_list|(
specifier|const
name|QTransform
modifier|&
name|mtx
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QOpenGLPaintEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|matrix
operator|=
name|mtx
expr_stmt|;
name|d
operator|->
name|mv_matrix
index|[
literal|0
index|]
index|[
literal|0
index|]
operator|=
name|mtx
operator|.
name|m11
argument_list|()
expr_stmt|;
name|d
operator|->
name|mv_matrix
index|[
literal|0
index|]
index|[
literal|1
index|]
operator|=
name|mtx
operator|.
name|m12
argument_list|()
expr_stmt|;
name|d
operator|->
name|mv_matrix
index|[
literal|0
index|]
index|[
literal|2
index|]
operator|=
literal|0
expr_stmt|;
name|d
operator|->
name|mv_matrix
index|[
literal|0
index|]
index|[
literal|3
index|]
operator|=
name|mtx
operator|.
name|m13
argument_list|()
expr_stmt|;
name|d
operator|->
name|mv_matrix
index|[
literal|1
index|]
index|[
literal|0
index|]
operator|=
name|mtx
operator|.
name|m21
argument_list|()
expr_stmt|;
name|d
operator|->
name|mv_matrix
index|[
literal|1
index|]
index|[
literal|1
index|]
operator|=
name|mtx
operator|.
name|m22
argument_list|()
expr_stmt|;
name|d
operator|->
name|mv_matrix
index|[
literal|1
index|]
index|[
literal|2
index|]
operator|=
literal|0
expr_stmt|;
name|d
operator|->
name|mv_matrix
index|[
literal|1
index|]
index|[
literal|3
index|]
operator|=
name|mtx
operator|.
name|m23
argument_list|()
expr_stmt|;
name|d
operator|->
name|mv_matrix
index|[
literal|2
index|]
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
name|d
operator|->
name|mv_matrix
index|[
literal|2
index|]
index|[
literal|1
index|]
operator|=
literal|0
expr_stmt|;
name|d
operator|->
name|mv_matrix
index|[
literal|2
index|]
index|[
literal|2
index|]
operator|=
literal|1
expr_stmt|;
name|d
operator|->
name|mv_matrix
index|[
literal|2
index|]
index|[
literal|3
index|]
operator|=
literal|0
expr_stmt|;
name|d
operator|->
name|mv_matrix
index|[
literal|3
index|]
index|[
literal|0
index|]
operator|=
name|mtx
operator|.
name|dx
argument_list|()
expr_stmt|;
name|d
operator|->
name|mv_matrix
index|[
literal|3
index|]
index|[
literal|1
index|]
operator|=
name|mtx
operator|.
name|dy
argument_list|()
expr_stmt|;
name|d
operator|->
name|mv_matrix
index|[
literal|3
index|]
index|[
literal|2
index|]
operator|=
literal|0
expr_stmt|;
name|d
operator|->
name|mv_matrix
index|[
literal|3
index|]
index|[
literal|3
index|]
operator|=
name|mtx
operator|.
name|m33
argument_list|()
expr_stmt|;
name|d
operator|->
name|txop
operator|=
name|mtx
operator|.
name|type
argument_list|()
expr_stmt|;
comment|// 1/10000 == 0.0001, so we have good enough res to cover curves
comment|// that span the entire widget...
name|d
operator|->
name|inverseScale
operator|=
name|qMax
argument_list|(
literal|1
operator|/
name|qMax
argument_list|(
name|qMax
argument_list|(
name|qAbs
argument_list|(
name|mtx
operator|.
name|m11
argument_list|()
argument_list|)
argument_list|,
name|qAbs
argument_list|(
name|mtx
operator|.
name|m22
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|qMax
argument_list|(
name|qAbs
argument_list|(
name|mtx
operator|.
name|m12
argument_list|()
argument_list|)
argument_list|,
name|qAbs
argument_list|(
name|mtx
operator|.
name|m21
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|qreal
argument_list|(
literal|0.0001
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|updateGLMatrix
argument_list|()
expr_stmt|;
name|d
operator|->
name|updateFastPen
argument_list|()
expr_stmt|;
block|}
DECL|function|updateGLMatrix
name|void
name|QOpenGLPaintEnginePrivate
operator|::
name|updateGLMatrix
parameter_list|()
specifier|const
block|{
name|glMatrixMode
argument_list|(
name|GL_MODELVIEW
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_OPENGL_ES
name|glLoadMatrixd
argument_list|(
operator|&
name|mv_matrix
index|[
literal|0
index|]
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
else|#
directive|else
name|glLoadMatrixf
argument_list|(
operator|&
name|mv_matrix
index|[
literal|0
index|]
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
DECL|function|disableClipping
name|void
name|QOpenGLPaintEnginePrivate
operator|::
name|disableClipping
parameter_list|()
block|{
name|glDisable
argument_list|(
name|GL_DEPTH_TEST
argument_list|)
expr_stmt|;
name|glDisable
argument_list|(
name|GL_SCISSOR_TEST
argument_list|)
expr_stmt|;
block|}
DECL|function|enableClipping
name|void
name|QOpenGLPaintEnginePrivate
operator|::
name|enableClipping
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QOpenGLPaintEngine
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|q
operator|->
name|state
argument_list|()
operator|->
name|hasClipping
condition|)
return|return;
if|if
condition|(
name|q
operator|->
name|state
argument_list|()
operator|->
name|fastClip
operator|.
name|isEmpty
argument_list|()
condition|)
name|glEnable
argument_list|(
name|GL_DEPTH_TEST
argument_list|)
expr_stmt|;
else|else
name|updateDepthClip
argument_list|()
expr_stmt|;
comment|// this will enable the scissor test
block|}
DECL|function|updateDepthClip
name|void
name|QOpenGLPaintEnginePrivate
operator|::
name|updateDepthClip
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QOpenGLPaintEngine
argument_list|)
expr_stmt|;
operator|++
name|q
operator|->
name|state
argument_list|()
operator|->
name|depthClipId
expr_stmt|;
name|glDisable
argument_list|(
name|GL_DEPTH_TEST
argument_list|)
expr_stmt|;
name|glDisable
argument_list|(
name|GL_SCISSOR_TEST
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|q
operator|->
name|state
argument_list|()
operator|->
name|hasClipping
condition|)
return|return;
name|QRect
name|fastClip
decl_stmt|;
if|if
condition|(
name|q
operator|->
name|state
argument_list|()
operator|->
name|clipEnabled
condition|)
block|{
name|fastClip
operator|=
name|q
operator|->
name|state
argument_list|()
operator|->
name|fastClip
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|use_system_clip
operator|&&
name|q
operator|->
name|systemClip
argument_list|()
operator|.
name|rects
argument_list|()
operator|.
name|count
argument_list|()
operator|==
literal|1
condition|)
block|{
name|fastClip
operator|=
name|q
operator|->
name|systemClip
argument_list|()
operator|.
name|rects
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|fastClip
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|glEnable
argument_list|(
name|GL_SCISSOR_TEST
argument_list|)
expr_stmt|;
specifier|const
name|int
name|left
init|=
name|fastClip
operator|.
name|left
argument_list|()
decl_stmt|;
specifier|const
name|int
name|width
init|=
name|fastClip
operator|.
name|width
argument_list|()
decl_stmt|;
specifier|const
name|int
name|bottom
init|=
name|device
operator|->
name|size
argument_list|()
operator|.
name|height
argument_list|()
operator|-
operator|(
name|fastClip
operator|.
name|bottom
argument_list|()
operator|+
literal|1
operator|)
decl_stmt|;
specifier|const
name|int
name|height
init|=
name|fastClip
operator|.
name|height
argument_list|()
decl_stmt|;
name|glScissor
argument_list|(
name|left
argument_list|,
name|bottom
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
return|return;
block|}
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_1
argument_list|)
operator|||
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
name|glClearDepthf
argument_list|(
literal|0.0f
argument_list|)
expr_stmt|;
else|#
directive|else
name|glClearDepth
argument_list|(
literal|0.0f
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|glEnable
argument_list|(
name|GL_DEPTH_TEST
argument_list|)
expr_stmt|;
name|glDepthMask
argument_list|(
name|GL_TRUE
argument_list|)
expr_stmt|;
name|glClear
argument_list|(
name|GL_DEPTH_BUFFER_BIT
argument_list|)
expr_stmt|;
name|glColorMask
argument_list|(
name|GL_FALSE
argument_list|,
name|GL_FALSE
argument_list|,
name|GL_FALSE
argument_list|,
name|GL_FALSE
argument_list|)
expr_stmt|;
name|glDepthFunc
argument_list|(
name|GL_ALWAYS
argument_list|)
expr_stmt|;
specifier|const
name|QVector
argument_list|<
name|QRect
argument_list|>
name|rects
init|=
name|q
operator|->
name|state
argument_list|()
operator|->
name|clipEnabled
condition|?
name|q
operator|->
name|state
argument_list|()
operator|->
name|clipRegion
operator|.
name|rects
argument_list|()
else|:
name|q
operator|->
name|systemClip
argument_list|()
operator|.
name|rects
argument_list|()
decl_stmt|;
comment|// rectangle count * 2 (triangles) * vertex count * component count (Z omitted)
name|QDataBuffer
argument_list|<
name|GLfloat
argument_list|>
name|clipVertex
argument_list|(
name|rects
operator|.
name|size
argument_list|()
operator|*
literal|2
operator|*
literal|3
operator|*
literal|2
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rects
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|GLfloat
name|x
init|=
name|GLfloat
argument_list|(
name|rects
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|left
argument_list|()
argument_list|)
decl_stmt|;
name|GLfloat
name|w
init|=
name|GLfloat
argument_list|(
name|rects
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|width
argument_list|()
argument_list|)
decl_stmt|;
name|GLfloat
name|h
init|=
name|GLfloat
argument_list|(
name|rects
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
name|GLfloat
name|y
init|=
name|GLfloat
argument_list|(
name|rects
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|top
argument_list|()
argument_list|)
decl_stmt|;
comment|// First triangle
name|clipVertex
operator|.
name|add
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|clipVertex
operator|.
name|add
argument_list|(
name|y
argument_list|)
expr_stmt|;
name|clipVertex
operator|.
name|add
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|clipVertex
operator|.
name|add
argument_list|(
name|y
operator|+
name|h
argument_list|)
expr_stmt|;
name|clipVertex
operator|.
name|add
argument_list|(
name|x
operator|+
name|w
argument_list|)
expr_stmt|;
name|clipVertex
operator|.
name|add
argument_list|(
name|y
argument_list|)
expr_stmt|;
comment|// Second triangle
name|clipVertex
operator|.
name|add
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|clipVertex
operator|.
name|add
argument_list|(
name|y
operator|+
name|h
argument_list|)
expr_stmt|;
name|clipVertex
operator|.
name|add
argument_list|(
name|x
operator|+
name|w
argument_list|)
expr_stmt|;
name|clipVertex
operator|.
name|add
argument_list|(
name|y
operator|+
name|h
argument_list|)
expr_stmt|;
name|clipVertex
operator|.
name|add
argument_list|(
name|x
operator|+
name|w
argument_list|)
expr_stmt|;
name|clipVertex
operator|.
name|add
argument_list|(
name|y
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rects
operator|.
name|size
argument_list|()
condition|)
block|{
name|glMatrixMode
argument_list|(
name|GL_MODELVIEW
argument_list|)
expr_stmt|;
name|glLoadIdentity
argument_list|()
expr_stmt|;
name|glEnableClientState
argument_list|(
name|GL_VERTEX_ARRAY
argument_list|)
expr_stmt|;
name|glVertexPointer
argument_list|(
literal|2
argument_list|,
name|GL_FLOAT
argument_list|,
literal|0
argument_list|,
name|clipVertex
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|glDrawArrays
argument_list|(
name|GL_TRIANGLES
argument_list|,
literal|0
argument_list|,
name|rects
operator|.
name|size
argument_list|()
operator|*
literal|2
operator|*
literal|3
argument_list|)
expr_stmt|;
name|glDisableClientState
argument_list|(
name|GL_VERTEX_ARRAY
argument_list|)
expr_stmt|;
name|updateGLMatrix
argument_list|()
expr_stmt|;
block|}
name|glColorMask
argument_list|(
name|GL_TRUE
argument_list|,
name|GL_TRUE
argument_list|,
name|GL_TRUE
argument_list|,
name|GL_TRUE
argument_list|)
expr_stmt|;
name|glDepthMask
argument_list|(
name|GL_FALSE
argument_list|)
expr_stmt|;
name|glDepthFunc
argument_list|(
name|GL_LEQUAL
argument_list|)
expr_stmt|;
block|}
DECL|function|systemStateChanged
name|void
name|QOpenGLPaintEnginePrivate
operator|::
name|systemStateChanged
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QOpenGLPaintEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|painter
argument_list|()
operator|->
name|hasClipping
argument_list|()
condition|)
name|q
operator|->
name|updateClipRegion
argument_list|(
name|q
operator|->
name|painter
argument_list|()
operator|->
name|clipRegion
argument_list|()
argument_list|,
name|Qt
operator|::
name|ReplaceClip
argument_list|)
expr_stmt|;
else|else
name|q
operator|->
name|updateClipRegion
argument_list|(
name|QRegion
argument_list|()
argument_list|,
name|Qt
operator|::
name|NoClip
argument_list|)
expr_stmt|;
block|}
DECL|function|updateClipRegion
name|void
name|QOpenGLPaintEngine
operator|::
name|updateClipRegion
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|clipRegion
parameter_list|,
name|Qt
operator|::
name|ClipOperation
name|op
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QOpenGLPaintEngine
argument_list|)
expr_stmt|;
comment|// clipping is only supported when a stencil or depth buffer is
comment|// available
if|if
condition|(
operator|!
name|d
operator|->
name|device
operator|->
name|format
argument_list|()
operator|.
name|depth
argument_list|()
condition|)
return|return;
name|d
operator|->
name|use_system_clip
operator|=
literal|false
expr_stmt|;
name|QRegion
name|sysClip
init|=
name|systemClip
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|sysClip
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|pdev
operator|->
name|devType
argument_list|()
operator|!=
name|QInternal
operator|::
name|Widget
condition|)
block|{
name|d
operator|->
name|use_system_clip
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
ifndef|#
directive|ifndef
name|Q_WS_QWS
comment|// Only use the system clip if we're currently rendering a widget with a GL painter.
if|if
condition|(
name|d
operator|->
name|currentClipWidget
condition|)
block|{
name|QWidgetPrivate
modifier|*
name|widgetPrivate
init|=
name|qt_widget_private
argument_list|(
name|d
operator|->
name|currentClipWidget
operator|->
name|window
argument_list|()
argument_list|)
decl_stmt|;
name|d
operator|->
name|use_system_clip
operator|=
name|widgetPrivate
operator|->
name|extra
operator|&&
name|widgetPrivate
operator|->
name|extra
operator|->
name|inRenderWithPainter
expr_stmt|;
block|}
endif|#
directive|endif
block|}
block|}
name|d
operator|->
name|flushDrawQueue
argument_list|()
expr_stmt|;
if|if
condition|(
name|op
operator|==
name|Qt
operator|::
name|NoClip
operator|&&
operator|!
name|d
operator|->
name|use_system_clip
condition|)
block|{
name|state
argument_list|()
operator|->
name|hasClipping
operator|=
literal|false
expr_stmt|;
name|state
argument_list|()
operator|->
name|clipRegion
operator|=
name|QRegion
argument_list|()
expr_stmt|;
name|d
operator|->
name|updateDepthClip
argument_list|()
expr_stmt|;
return|return;
block|}
name|bool
name|isScreenClip
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|use_system_clip
condition|)
block|{
name|QVector
argument_list|<
name|QRect
argument_list|>
name|untransformedRects
init|=
name|clipRegion
operator|.
name|rects
argument_list|()
decl_stmt|;
if|if
condition|(
name|untransformedRects
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|QPainterPath
name|path
decl_stmt|;
name|path
operator|.
name|addRect
argument_list|(
name|untransformedRects
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|path
operator|=
name|d
operator|->
name|matrix
operator|.
name|map
argument_list|(
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|path
operator|.
name|contains
argument_list|(
name|QRectF
argument_list|(
name|QPointF
argument_list|()
argument_list|,
name|d
operator|->
name|device
operator|->
name|size
argument_list|()
argument_list|)
argument_list|)
condition|)
name|isScreenClip
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|QRegion
name|region
init|=
name|isScreenClip
condition|?
name|QRegion
argument_list|()
else|:
name|clipRegion
operator|*
name|d
operator|->
name|matrix
decl_stmt|;
switch|switch
condition|(
name|op
condition|)
block|{
case|case
name|Qt
operator|::
name|NoClip
case|:
if|if
condition|(
operator|!
name|d
operator|->
name|use_system_clip
condition|)
break|break;
name|state
argument_list|()
operator|->
name|clipRegion
operator|=
name|sysClip
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|IntersectClip
case|:
if|if
condition|(
name|isScreenClip
condition|)
return|return;
if|if
condition|(
name|state
argument_list|()
operator|->
name|hasClipping
condition|)
block|{
name|state
argument_list|()
operator|->
name|clipRegion
operator|&=
name|region
expr_stmt|;
break|break;
block|}
comment|// fall through
case|case
name|Qt
operator|::
name|ReplaceClip
case|:
if|if
condition|(
name|d
operator|->
name|use_system_clip
condition|)
name|state
argument_list|()
operator|->
name|clipRegion
operator|=
name|region
operator|&
name|sysClip
expr_stmt|;
else|else
name|state
argument_list|()
operator|->
name|clipRegion
operator|=
name|region
expr_stmt|;
break|break;
default|default:
break|break;
block|}
if|if
condition|(
name|isScreenClip
condition|)
block|{
name|state
argument_list|()
operator|->
name|hasClipping
operator|=
literal|false
expr_stmt|;
name|state
argument_list|()
operator|->
name|clipRegion
operator|=
name|QRegion
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|state
argument_list|()
operator|->
name|hasClipping
operator|=
name|op
operator|!=
name|Qt
operator|::
name|NoClip
operator|||
name|d
operator|->
name|use_system_clip
expr_stmt|;
block|}
if|if
condition|(
name|state
argument_list|()
operator|->
name|hasClipping
operator|&&
name|state
argument_list|()
operator|->
name|clipRegion
operator|.
name|rects
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
name|state
argument_list|()
operator|->
name|fastClip
operator|=
name|state
argument_list|()
operator|->
name|clipRegion
operator|.
name|rects
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
expr_stmt|;
else|else
name|state
argument_list|()
operator|->
name|fastClip
operator|=
name|QRect
argument_list|()
expr_stmt|;
name|d
operator|->
name|updateDepthClip
argument_list|()
expr_stmt|;
block|}
DECL|function|updateRenderHints
name|void
name|QOpenGLPaintEngine
operator|::
name|updateRenderHints
parameter_list|(
name|QPainter
operator|::
name|RenderHints
name|hints
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QOpenGLPaintEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|flushDrawQueue
argument_list|()
expr_stmt|;
name|d
operator|->
name|use_smooth_pixmap_transform
operator|=
name|bool
argument_list|(
name|hints
operator|&
name|QPainter
operator|::
name|SmoothPixmapTransform
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|hints
operator|&
name|QPainter
operator|::
name|Antialiasing
operator|)
operator|||
operator|(
name|hints
operator|&
name|QPainter
operator|::
name|HighQualityAntialiasing
operator|)
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|use_fragment_programs
operator|&&
name|QGLOffscreen
operator|::
name|isSupported
argument_list|()
operator|&&
operator|(
name|hints
operator|&
name|QPainter
operator|::
name|HighQualityAntialiasing
operator|)
condition|)
block|{
name|d
operator|->
name|high_quality_antialiasing
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|high_quality_antialiasing
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|QGLExtensions
operator|::
name|glExtensions
argument_list|()
operator|&
name|QGLExtensions
operator|::
name|SampleBuffers
condition|)
name|glEnable
argument_list|(
name|GL_MULTISAMPLE
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|d
operator|->
name|high_quality_antialiasing
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|QGLExtensions
operator|::
name|glExtensions
argument_list|()
operator|&
name|QGLExtensions
operator|::
name|SampleBuffers
condition|)
name|glDisable
argument_list|(
name|GL_MULTISAMPLE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|->
name|high_quality_antialiasing
condition|)
block|{
name|d
operator|->
name|offscreen
operator|.
name|initialize
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|offscreen
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|DEBUG_ONCE_STR
argument_list|(
literal|"Unable to initialize offscreen, disabling high quality antialiasing"
argument_list|)
expr_stmt|;
name|d
operator|->
name|high_quality_antialiasing
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|QGLExtensions
operator|::
name|glExtensions
argument_list|()
operator|&
name|QGLExtensions
operator|::
name|SampleBuffers
condition|)
name|glEnable
argument_list|(
name|GL_MULTISAMPLE
argument_list|)
expr_stmt|;
block|}
block|}
name|d
operator|->
name|has_antialiasing
operator|=
name|d
operator|->
name|high_quality_antialiasing
operator|||
operator|(
operator|(
name|hints
operator|&
name|QPainter
operator|::
name|Antialiasing
operator|)
operator|&&
operator|(
name|QGLExtensions
operator|::
name|glExtensions
argument_list|()
operator|&
name|QGLExtensions
operator|::
name|SampleBuffers
operator|)
operator|)
expr_stmt|;
block|}
DECL|function|setPorterDuffData
name|void
name|QOpenGLPaintEnginePrivate
operator|::
name|setPorterDuffData
parameter_list|(
name|float
name|a
parameter_list|,
name|float
name|b
parameter_list|,
name|float
name|x
parameter_list|,
name|float
name|y
parameter_list|,
name|float
name|z
parameter_list|)
block|{
name|porterduff_ab_data
index|[
literal|0
index|]
operator|=
name|a
expr_stmt|;
name|porterduff_ab_data
index|[
literal|1
index|]
operator|=
name|b
expr_stmt|;
name|porterduff_xyz_data
index|[
literal|0
index|]
operator|=
name|x
expr_stmt|;
name|porterduff_xyz_data
index|[
literal|1
index|]
operator|=
name|y
expr_stmt|;
name|porterduff_xyz_data
index|[
literal|2
index|]
operator|=
name|z
expr_stmt|;
block|}
DECL|function|updateCompositionMode
name|void
name|QOpenGLPaintEngine
operator|::
name|updateCompositionMode
parameter_list|(
name|QPainter
operator|::
name|CompositionMode
name|composition_mode
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QOpenGLPaintEngine
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|use_fragment_programs
operator|&&
name|composition_mode
operator|>
name|QPainter
operator|::
name|CompositionMode_Plus
condition|)
name|composition_mode
operator|=
name|QPainter
operator|::
name|CompositionMode_SourceOver
expr_stmt|;
name|d
operator|->
name|composition_mode
operator|=
name|composition_mode
expr_stmt|;
name|d
operator|->
name|has_fast_composition_mode
operator|=
operator|(
operator|!
name|d
operator|->
name|high_quality_antialiasing
operator|&&
name|composition_mode
operator|<=
name|QPainter
operator|::
name|CompositionMode_Plus
operator|)
operator|||
name|composition_mode
operator|==
name|QPainter
operator|::
name|CompositionMode_SourceOver
operator|||
name|composition_mode
operator|==
name|QPainter
operator|::
name|CompositionMode_Destination
operator|||
name|composition_mode
operator|==
name|QPainter
operator|::
name|CompositionMode_DestinationOver
operator|||
name|composition_mode
operator|==
name|QPainter
operator|::
name|CompositionMode_DestinationOut
operator|||
name|composition_mode
operator|==
name|QPainter
operator|::
name|CompositionMode_SourceAtop
operator|||
name|composition_mode
operator|==
name|QPainter
operator|::
name|CompositionMode_Xor
operator|||
name|composition_mode
operator|==
name|QPainter
operator|::
name|CompositionMode_Plus
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|has_fast_composition_mode
condition|)
name|d
operator|->
name|fragment_composition_mode
operator|=
name|d
operator|->
name|high_quality_antialiasing
condition|?
name|COMPOSITION_MODE_BLEND_MODE_MASK
else|:
name|COMPOSITION_MODE_BLEND_MODE_NOMASK
expr_stmt|;
elseif|else
if|if
condition|(
name|composition_mode
operator|<=
name|QPainter
operator|::
name|CompositionMode_Plus
condition|)
name|d
operator|->
name|fragment_composition_mode
operator|=
name|d
operator|->
name|high_quality_antialiasing
condition|?
name|COMPOSITION_MODES_SIMPLE_PORTER_DUFF
else|:
name|COMPOSITION_MODES_SIMPLE_PORTER_DUFF_NOMASK
expr_stmt|;
else|else
switch|switch
condition|(
name|composition_mode
condition|)
block|{
case|case
name|QPainter
operator|::
name|CompositionMode_Multiply
case|:
name|d
operator|->
name|fragment_composition_mode
operator|=
name|d
operator|->
name|high_quality_antialiasing
condition|?
name|COMPOSITION_MODES_MULTIPLY
else|:
name|COMPOSITION_MODES_MULTIPLY_NOMASK
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_Screen
case|:
name|d
operator|->
name|fragment_composition_mode
operator|=
name|d
operator|->
name|high_quality_antialiasing
condition|?
name|COMPOSITION_MODES_SCREEN
else|:
name|COMPOSITION_MODES_SCREEN_NOMASK
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_Overlay
case|:
name|d
operator|->
name|fragment_composition_mode
operator|=
name|d
operator|->
name|high_quality_antialiasing
condition|?
name|COMPOSITION_MODES_OVERLAY
else|:
name|COMPOSITION_MODES_OVERLAY_NOMASK
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_Darken
case|:
name|d
operator|->
name|fragment_composition_mode
operator|=
name|d
operator|->
name|high_quality_antialiasing
condition|?
name|COMPOSITION_MODES_DARKEN
else|:
name|COMPOSITION_MODES_DARKEN_NOMASK
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_Lighten
case|:
name|d
operator|->
name|fragment_composition_mode
operator|=
name|d
operator|->
name|high_quality_antialiasing
condition|?
name|COMPOSITION_MODES_LIGHTEN
else|:
name|COMPOSITION_MODES_LIGHTEN_NOMASK
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_ColorDodge
case|:
name|d
operator|->
name|fragment_composition_mode
operator|=
name|d
operator|->
name|high_quality_antialiasing
condition|?
name|COMPOSITION_MODES_COLORDODGE
else|:
name|COMPOSITION_MODES_COLORDODGE_NOMASK
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_ColorBurn
case|:
name|d
operator|->
name|fragment_composition_mode
operator|=
name|d
operator|->
name|high_quality_antialiasing
condition|?
name|COMPOSITION_MODES_COLORBURN
else|:
name|COMPOSITION_MODES_COLORBURN_NOMASK
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_HardLight
case|:
name|d
operator|->
name|fragment_composition_mode
operator|=
name|d
operator|->
name|high_quality_antialiasing
condition|?
name|COMPOSITION_MODES_HARDLIGHT
else|:
name|COMPOSITION_MODES_HARDLIGHT_NOMASK
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_SoftLight
case|:
name|d
operator|->
name|fragment_composition_mode
operator|=
name|d
operator|->
name|high_quality_antialiasing
condition|?
name|COMPOSITION_MODES_SOFTLIGHT
else|:
name|COMPOSITION_MODES_SOFTLIGHT_NOMASK
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_Difference
case|:
name|d
operator|->
name|fragment_composition_mode
operator|=
name|d
operator|->
name|high_quality_antialiasing
condition|?
name|COMPOSITION_MODES_DIFFERENCE
else|:
name|COMPOSITION_MODES_DIFFERENCE_NOMASK
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_Exclusion
case|:
name|d
operator|->
name|fragment_composition_mode
operator|=
name|d
operator|->
name|high_quality_antialiasing
condition|?
name|COMPOSITION_MODES_EXCLUSION
else|:
name|COMPOSITION_MODES_EXCLUSION_NOMASK
expr_stmt|;
break|break;
default|default:
name|Q_ASSERT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|composition_mode
condition|)
block|{
case|case
name|QPainter
operator|::
name|CompositionMode_DestinationOver
case|:
name|glBlendFunc
argument_list|(
name|GL_ONE_MINUS_DST_ALPHA
argument_list|,
name|GL_ONE
argument_list|)
expr_stmt|;
name|d
operator|->
name|setPorterDuffData
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_Clear
case|:
name|glBlendFunc
argument_list|(
name|GL_ZERO
argument_list|,
name|GL_ZERO
argument_list|)
expr_stmt|;
name|d
operator|->
name|setPorterDuffData
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_Source
case|:
name|glBlendFunc
argument_list|(
name|GL_ONE
argument_list|,
name|GL_ZERO
argument_list|)
expr_stmt|;
name|d
operator|->
name|setPorterDuffData
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_Destination
case|:
name|glBlendFunc
argument_list|(
name|GL_ZERO
argument_list|,
name|GL_ONE
argument_list|)
expr_stmt|;
name|d
operator|->
name|setPorterDuffData
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_SourceIn
case|:
name|glBlendFunc
argument_list|(
name|GL_DST_ALPHA
argument_list|,
name|GL_ZERO
argument_list|)
expr_stmt|;
name|d
operator|->
name|setPorterDuffData
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_DestinationIn
case|:
name|glBlendFunc
argument_list|(
name|GL_ZERO
argument_list|,
name|GL_SRC_ALPHA
argument_list|)
expr_stmt|;
name|d
operator|->
name|setPorterDuffData
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_SourceOut
case|:
name|glBlendFunc
argument_list|(
name|GL_ONE_MINUS_DST_ALPHA
argument_list|,
name|GL_ZERO
argument_list|)
expr_stmt|;
name|d
operator|->
name|setPorterDuffData
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_DestinationOut
case|:
name|glBlendFunc
argument_list|(
name|GL_ZERO
argument_list|,
name|GL_ONE_MINUS_SRC_ALPHA
argument_list|)
expr_stmt|;
name|d
operator|->
name|setPorterDuffData
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_SourceAtop
case|:
name|glBlendFunc
argument_list|(
name|GL_DST_ALPHA
argument_list|,
name|GL_ONE_MINUS_SRC_ALPHA
argument_list|)
expr_stmt|;
name|d
operator|->
name|setPorterDuffData
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_DestinationAtop
case|:
name|glBlendFunc
argument_list|(
name|GL_ONE_MINUS_DST_ALPHA
argument_list|,
name|GL_SRC_ALPHA
argument_list|)
expr_stmt|;
name|d
operator|->
name|setPorterDuffData
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_Xor
case|:
name|glBlendFunc
argument_list|(
name|GL_ONE_MINUS_DST_ALPHA
argument_list|,
name|GL_ONE_MINUS_SRC_ALPHA
argument_list|)
expr_stmt|;
name|d
operator|->
name|setPorterDuffData
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_SourceOver
case|:
name|glBlendFunc
argument_list|(
name|GL_ONE
argument_list|,
name|GL_ONE_MINUS_SRC_ALPHA
argument_list|)
expr_stmt|;
name|d
operator|->
name|setPorterDuffData
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_Plus
case|:
name|glBlendFunc
argument_list|(
name|GL_ONE
argument_list|,
name|GL_ONE
argument_list|)
expr_stmt|;
name|d
operator|->
name|setPorterDuffData
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
DECL|class|QGLMaskGenerator
class|class
name|QGLMaskGenerator
block|{
public|public:
DECL|function|QGLMaskGenerator
name|QGLMaskGenerator
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|path
parameter_list|,
specifier|const
name|QTransform
modifier|&
name|matrix
parameter_list|,
name|qreal
name|stroke_width
init|=
operator|-
literal|1
parameter_list|)
member_init_list|:
name|p
argument_list|(
name|path
argument_list|)
member_init_list|,
name|m
argument_list|(
name|matrix
argument_list|)
member_init_list|,
name|w
argument_list|(
name|stroke_width
argument_list|)
block|{     }
specifier|virtual
name|QRect
name|screenRect
parameter_list|()
function_decl|=
literal|0
function_decl|;
specifier|virtual
name|void
name|drawMask
argument_list|(
specifier|const
name|QRect
operator|&
name|rect
argument_list|)
init|=
literal|0
decl_stmt|;
DECL|function|path
name|QPainterPath
name|path
parameter_list|()
specifier|const
block|{
return|return
name|p
return|;
block|}
DECL|function|matrix
name|QTransform
name|matrix
parameter_list|()
specifier|const
block|{
return|return
name|m
return|;
block|}
DECL|function|strokeWidth
name|qreal
name|strokeWidth
parameter_list|()
specifier|const
block|{
return|return
name|w
return|;
block|}
DECL|function|~QGLMaskGenerator
specifier|virtual
name|~
name|QGLMaskGenerator
parameter_list|()
block|{}
private|private:
DECL|member|p
name|QPainterPath
name|p
decl_stmt|;
DECL|member|m
name|QTransform
name|m
decl_stmt|;
DECL|member|w
name|qreal
name|w
decl_stmt|;
block|}
class|;
DECL|function|setOffscreenSize
name|void
name|QGLMaskTextureCache
operator|::
name|setOffscreenSize
parameter_list|(
specifier|const
name|QSize
modifier|&
name|sz
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|sz
operator|.
name|width
argument_list|()
operator|==
name|sz
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|offscreenSize
operator|!=
name|sz
condition|)
block|{
name|offscreenSize
operator|=
name|sz
expr_stmt|;
name|clearCache
argument_list|()
expr_stmt|;
block|}
block|}
DECL|function|clearCache
name|void
name|QGLMaskTextureCache
operator|::
name|clearCache
parameter_list|()
block|{
name|cache
operator|.
name|clear
argument_list|()
expr_stmt|;
name|int
name|quad_tree_size
init|=
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|block_size
init|;
name|i
operator|<
name|offscreenSize
operator|.
name|width
argument_list|()
condition|;
name|i
operator|*=
literal|2
control|)
name|quad_tree_size
operator|+=
name|quad_tree_size
operator|*
literal|4
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
block|{
name|occupied_quadtree
index|[
name|i
index|]
operator|.
name|resize
argument_list|(
name|quad_tree_size
argument_list|)
expr_stmt|;
name|occupied_quadtree
index|[
name|i
index|]
index|[
literal|0
index|]
operator|.
name|key
operator|=
literal|0
expr_stmt|;
name|occupied_quadtree
index|[
name|i
index|]
index|[
literal|0
index|]
operator|.
name|largest_available_block
operator|=
name|offscreenSize
operator|.
name|width
argument_list|()
expr_stmt|;
name|occupied_quadtree
index|[
name|i
index|]
index|[
literal|0
index|]
operator|.
name|largest_used_block
operator|=
literal|0
expr_stmt|;
name|DEBUG_ONCE
name|qDebug
argument_list|()
decl|<< "QGLMaskTextureCache:: created quad tree of size"<<
name|quad_tree_size
decl_stmt|;
block|}
block|}
DECL|function|setDrawableSize
name|void
name|QGLMaskTextureCache
operator|::
name|setDrawableSize
parameter_list|(
specifier|const
name|QSize
modifier|&
name|sz
parameter_list|)
block|{
name|drawableSize
operator|=
name|sz
expr_stmt|;
block|}
DECL|function|maintainCache
name|void
name|QGLMaskTextureCache
operator|::
name|maintainCache
parameter_list|()
block|{
name|QGLTextureCacheHash
operator|::
name|iterator
name|it
init|=
name|cache
operator|.
name|begin
argument_list|()
decl_stmt|;
name|QGLTextureCacheHash
operator|::
name|iterator
name|end
init|=
name|cache
operator|.
name|end
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|end
condition|)
block|{
name|CacheInfo
modifier|&
name|cache_info
init|=
name|it
operator|.
name|value
argument_list|()
decl_stmt|;
operator|++
name|cache_info
operator|.
name|age
expr_stmt|;
if|if
condition|(
name|cache_info
operator|.
name|age
operator|>
literal|1
condition|)
block|{
name|quadtreeInsert
argument_list|(
name|cache_info
operator|.
name|loc
operator|.
name|channel
argument_list|,
literal|0
argument_list|,
name|cache_info
operator|.
name|loc
operator|.
name|rect
argument_list|)
expr_stmt|;
name|it
operator|=
name|cache
operator|.
name|erase
argument_list|(
name|it
argument_list|)
expr_stmt|;
block|}
else|else
block|{
operator|++
name|it
expr_stmt|;
block|}
block|}
block|}
comment|//#define DISABLE_MASK_CACHE
DECL|function|getMask
name|QGLMaskTextureCache
operator|::
name|CacheLocation
name|QGLMaskTextureCache
operator|::
name|getMask
parameter_list|(
name|QGLMaskGenerator
modifier|&
name|maskGenerator
parameter_list|,
name|QOpenGLPaintEnginePrivate
modifier|*
name|e
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|DISABLE_MASK_CACHE
name|engine
operator|=
name|e
expr_stmt|;
name|quint64
name|key
init|=
name|hash
argument_list|(
name|maskGenerator
operator|.
name|path
argument_list|()
argument_list|,
name|maskGenerator
operator|.
name|matrix
argument_list|()
argument_list|,
name|maskGenerator
operator|.
name|strokeWidth
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|==
literal|0
condition|)
name|key
operator|=
literal|1
expr_stmt|;
name|CacheInfo
name|info
argument_list|(
name|maskGenerator
operator|.
name|path
argument_list|()
argument_list|,
name|maskGenerator
operator|.
name|matrix
argument_list|()
argument_list|,
name|maskGenerator
operator|.
name|strokeWidth
argument_list|()
argument_list|)
decl_stmt|;
name|QGLTextureCacheHash
operator|::
name|iterator
name|it
init|=
name|cache
operator|.
name|find
argument_list|(
name|key
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|cache
operator|.
name|end
argument_list|()
operator|&&
name|it
operator|.
name|key
argument_list|()
operator|==
name|key
condition|)
block|{
name|CacheInfo
modifier|&
name|cache_info
init|=
name|it
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|stroke_width
operator|==
name|cache_info
operator|.
name|stroke_width
operator|&&
name|info
operator|.
name|matrix
operator|==
name|cache_info
operator|.
name|matrix
operator|&&
name|info
operator|.
name|path
operator|==
name|cache_info
operator|.
name|path
condition|)
block|{
name|DEBUG_ONCE_STR
argument_list|(
literal|"QGLMaskTextureCache::getMask(): Using cached mask"
argument_list|)
expr_stmt|;
name|cache_info
operator|.
name|age
operator|=
literal|0
expr_stmt|;
return|return
name|cache_info
operator|.
name|loc
return|;
block|}
operator|++
name|it
expr_stmt|;
block|}
comment|// mask was not found, create new mask
name|DEBUG_ONCE_STR
argument_list|(
literal|"QGLMaskTextureCache::getMask(): Creating new mask..."
argument_list|)
expr_stmt|;
name|createMask
argument_list|(
name|key
argument_list|,
name|info
argument_list|,
name|maskGenerator
argument_list|)
expr_stmt|;
name|cache
operator|.
name|insert
argument_list|(
name|key
argument_list|,
name|info
argument_list|)
expr_stmt|;
return|return
name|info
operator|.
name|loc
return|;
else|#
directive|else
name|CacheInfo
name|info
argument_list|(
name|maskGenerator
operator|.
name|path
argument_list|()
argument_list|,
name|maskGenerator
operator|.
name|matrix
argument_list|()
argument_list|)
decl_stmt|;
name|createMask
argument_list|(
literal|0
argument_list|,
name|info
argument_list|,
name|maskGenerator
argument_list|)
expr_stmt|;
return|return
name|info
operator|.
name|loc
return|;
endif|#
directive|endif
block|}
ifndef|#
directive|ifndef
name|FloatToQuint64
DECL|macro|FloatToQuint64
define|#
directive|define
name|FloatToQuint64
parameter_list|(
name|i
parameter_list|)
value|(quint64)((i) * 32)
endif|#
directive|endif
DECL|function|hash
name|quint64
name|QGLMaskTextureCache
operator|::
name|hash
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|p
parameter_list|,
specifier|const
name|QTransform
modifier|&
name|m
parameter_list|,
name|qreal
name|w
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
sizeof|sizeof
argument_list|(
name|quint64
argument_list|)
operator|==
literal|8
argument_list|)
expr_stmt|;
name|quint64
name|h
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|p
operator|.
name|elementCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|h
operator|+=
name|FloatToQuint64
argument_list|(
name|p
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
operator|.
name|x
argument_list|)
operator|<<
literal|32
expr_stmt|;
name|h
operator|+=
name|FloatToQuint64
argument_list|(
name|p
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
operator|.
name|y
argument_list|)
expr_stmt|;
name|h
operator|+=
name|p
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
operator|.
name|type
expr_stmt|;
block|}
name|h
operator|+=
name|FloatToQuint64
argument_list|(
name|m
operator|.
name|m11
argument_list|()
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_OS_WINCE
comment|//  ###
comment|//Compiler crashes for arm on WinCE
name|h
operator|+=
name|FloatToQuint64
argument_list|(
name|m
operator|.
name|m12
argument_list|()
argument_list|)
operator|<<
literal|4
expr_stmt|;
name|h
operator|+=
name|FloatToQuint64
argument_list|(
name|m
operator|.
name|m13
argument_list|()
argument_list|)
operator|<<
literal|8
expr_stmt|;
name|h
operator|+=
name|FloatToQuint64
argument_list|(
name|m
operator|.
name|m21
argument_list|()
argument_list|)
operator|<<
literal|12
expr_stmt|;
name|h
operator|+=
name|FloatToQuint64
argument_list|(
name|m
operator|.
name|m22
argument_list|()
argument_list|)
operator|<<
literal|16
expr_stmt|;
name|h
operator|+=
name|FloatToQuint64
argument_list|(
name|m
operator|.
name|m23
argument_list|()
argument_list|)
operator|<<
literal|20
expr_stmt|;
name|h
operator|+=
name|FloatToQuint64
argument_list|(
name|m
operator|.
name|m31
argument_list|()
argument_list|)
operator|<<
literal|24
expr_stmt|;
name|h
operator|+=
name|FloatToQuint64
argument_list|(
name|m
operator|.
name|m32
argument_list|()
argument_list|)
operator|<<
literal|28
expr_stmt|;
endif|#
directive|endif
name|h
operator|+=
name|FloatToQuint64
argument_list|(
name|m
operator|.
name|m33
argument_list|()
argument_list|)
operator|<<
literal|32
expr_stmt|;
name|h
operator|+=
name|FloatToQuint64
argument_list|(
name|w
argument_list|)
expr_stmt|;
return|return
name|h
return|;
block|}
DECL|function|createMask
name|void
name|QGLMaskTextureCache
operator|::
name|createMask
parameter_list|(
name|quint64
name|key
parameter_list|,
name|CacheInfo
modifier|&
name|info
parameter_list|,
name|QGLMaskGenerator
modifier|&
name|maskGenerator
parameter_list|)
block|{
name|info
operator|.
name|loc
operator|.
name|screen_rect
operator|=
name|maskGenerator
operator|.
name|screenRect
argument_list|()
expr_stmt|;
if|if
condition|(
name|info
operator|.
name|loc
operator|.
name|screen_rect
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|info
operator|.
name|loc
operator|.
name|channel
operator|=
literal|0
expr_stmt|;
name|info
operator|.
name|loc
operator|.
name|rect
operator|=
name|QRect
argument_list|()
expr_stmt|;
return|return;
block|}
name|quadtreeAllocate
argument_list|(
name|key
argument_list|,
name|info
operator|.
name|loc
operator|.
name|screen_rect
operator|.
name|size
argument_list|()
argument_list|,
operator|&
name|info
operator|.
name|loc
operator|.
name|rect
argument_list|,
operator|&
name|info
operator|.
name|loc
operator|.
name|channel
argument_list|)
expr_stmt|;
name|int
name|ch
init|=
name|info
operator|.
name|loc
operator|.
name|channel
decl_stmt|;
name|glColorMask
argument_list|(
name|ch
operator|==
literal|0
argument_list|,
name|ch
operator|==
literal|1
argument_list|,
name|ch
operator|==
literal|2
argument_list|,
name|ch
operator|==
literal|3
argument_list|)
expr_stmt|;
name|maskGenerator
operator|.
name|drawMask
argument_list|(
name|info
operator|.
name|loc
operator|.
name|rect
argument_list|)
expr_stmt|;
name|glColorMask
argument_list|(
name|GL_TRUE
argument_list|,
name|GL_TRUE
argument_list|,
name|GL_TRUE
argument_list|,
name|GL_TRUE
argument_list|)
expr_stmt|;
block|}
DECL|function|quadtreeBlocksize
name|int
name|QGLMaskTextureCache
operator|::
name|quadtreeBlocksize
parameter_list|(
name|int
name|node
parameter_list|)
block|{
name|DEBUG_ONCE
name|qDebug
argument_list|()
decl|<< "Offscreen size:"<<
name|offscreenSize
operator|.
name|width
argument_list|()
decl_stmt|;
name|int
name|blocksize
init|=
name|offscreenSize
operator|.
name|width
argument_list|()
decl_stmt|;
while|while
condition|(
name|node
condition|)
block|{
name|node
operator|=
operator|(
name|node
operator|-
literal|1
operator|)
operator|/
literal|4
expr_stmt|;
name|blocksize
operator|/=
literal|2
expr_stmt|;
block|}
return|return
name|blocksize
return|;
block|}
DECL|function|quadtreeLocation
name|QPoint
name|QGLMaskTextureCache
operator|::
name|quadtreeLocation
parameter_list|(
name|int
name|node
parameter_list|)
block|{
name|QPoint
name|location
decl_stmt|;
name|int
name|blocksize
init|=
name|quadtreeBlocksize
argument_list|(
name|node
argument_list|)
decl_stmt|;
while|while
condition|(
name|node
condition|)
block|{
operator|--
name|node
expr_stmt|;
if|if
condition|(
name|node
operator|&
literal|1
condition|)
name|location
operator|.
name|setX
argument_list|(
name|location
operator|.
name|x
argument_list|()
operator|+
name|blocksize
argument_list|)
expr_stmt|;
if|if
condition|(
name|node
operator|&
literal|2
condition|)
name|location
operator|.
name|setY
argument_list|(
name|location
operator|.
name|y
argument_list|()
operator|+
name|blocksize
argument_list|)
expr_stmt|;
name|node
operator|/=
literal|4
expr_stmt|;
name|blocksize
operator|*=
literal|2
expr_stmt|;
block|}
return|return
name|location
return|;
block|}
DECL|function|quadtreeUpdate
name|void
name|QGLMaskTextureCache
operator|::
name|quadtreeUpdate
parameter_list|(
name|int
name|channel
parameter_list|,
name|int
name|node
parameter_list|,
name|int
name|current_block_size
parameter_list|)
block|{
while|while
condition|(
name|node
condition|)
block|{
name|node
operator|=
operator|(
name|node
operator|-
literal|1
operator|)
operator|/
literal|4
expr_stmt|;
name|int
name|first_child
init|=
name|node
operator|*
literal|4
operator|+
literal|1
decl_stmt|;
name|int
name|largest_available
init|=
literal|0
decl_stmt|;
name|int
name|largest_used
init|=
literal|0
decl_stmt|;
name|bool
name|all_empty
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
block|{
name|largest_available
operator|=
name|qMax
argument_list|(
name|largest_available
argument_list|,
name|occupied_quadtree
index|[
name|channel
index|]
index|[
name|first_child
operator|+
name|i
index|]
operator|.
name|largest_available_block
argument_list|)
expr_stmt|;
name|largest_used
operator|=
name|qMax
argument_list|(
name|largest_used
argument_list|,
name|occupied_quadtree
index|[
name|channel
index|]
index|[
name|first_child
operator|+
name|i
index|]
operator|.
name|largest_used_block
argument_list|)
expr_stmt|;
if|if
condition|(
name|occupied_quadtree
index|[
name|channel
index|]
index|[
name|first_child
operator|+
name|i
index|]
operator|.
name|largest_available_block
operator|<
name|current_block_size
condition|)
name|all_empty
operator|=
literal|false
expr_stmt|;
block|}
name|current_block_size
operator|*=
literal|2
expr_stmt|;
if|if
condition|(
name|all_empty
condition|)
block|{
name|occupied_quadtree
index|[
name|channel
index|]
index|[
name|node
index|]
operator|.
name|largest_available_block
operator|=
name|current_block_size
expr_stmt|;
name|occupied_quadtree
index|[
name|channel
index|]
index|[
name|node
index|]
operator|.
name|largest_used_block
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|occupied_quadtree
index|[
name|channel
index|]
index|[
name|node
index|]
operator|.
name|largest_available_block
operator|=
name|largest_available
expr_stmt|;
name|occupied_quadtree
index|[
name|channel
index|]
index|[
name|node
index|]
operator|.
name|largest_used_block
operator|=
name|largest_used
expr_stmt|;
block|}
block|}
block|}
DECL|function|quadtreeInsert
name|void
name|QGLMaskTextureCache
operator|::
name|quadtreeInsert
parameter_list|(
name|int
name|channel
parameter_list|,
name|quint64
name|key
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
name|int
name|node
parameter_list|)
block|{
name|int
name|current_block_size
init|=
name|quadtreeBlocksize
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|QPoint
name|location
init|=
name|quadtreeLocation
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|QRect
name|relative
init|=
name|rect
operator|.
name|translated
argument_list|(
operator|-
name|location
argument_list|)
decl_stmt|;
if|if
condition|(
name|relative
operator|.
name|left
argument_list|()
operator|>=
name|current_block_size
operator|||
name|relative
operator|.
name|top
argument_list|()
operator|>=
name|current_block_size
operator|||
name|relative
operator|.
name|right
argument_list|()
operator|<
literal|0
operator|||
name|relative
operator|.
name|bottom
argument_list|()
operator|<
literal|0
condition|)
return|return;
if|if
condition|(
name|current_block_size
operator|==
name|block_size
comment|// no more refining possible
operator|||
operator|(
name|relative
operator|.
name|top
argument_list|()
operator|<
name|block_size
operator|&&
name|relative
operator|.
name|bottom
argument_list|()
operator|>=
operator|(
name|current_block_size
operator|-
name|block_size
operator|)
operator|&&
name|relative
operator|.
name|left
argument_list|()
operator|<
name|block_size
operator|&&
name|relative
operator|.
name|right
argument_list|()
operator|>=
operator|(
name|current_block_size
operator|-
name|block_size
operator|)
operator|)
condition|)
block|{
if|if
condition|(
name|key
operator|!=
literal|0
condition|)
block|{
name|occupied_quadtree
index|[
name|channel
index|]
index|[
name|node
index|]
operator|.
name|largest_available_block
operator|=
literal|0
expr_stmt|;
name|occupied_quadtree
index|[
name|channel
index|]
index|[
name|node
index|]
operator|.
name|largest_used_block
operator|=
name|rect
operator|.
name|width
argument_list|()
operator|*
name|rect
operator|.
name|height
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|occupied_quadtree
index|[
name|channel
index|]
index|[
name|node
index|]
operator|.
name|largest_available_block
operator|=
name|current_block_size
expr_stmt|;
name|occupied_quadtree
index|[
name|channel
index|]
index|[
name|node
index|]
operator|.
name|largest_used_block
operator|=
literal|0
expr_stmt|;
block|}
name|occupied_quadtree
index|[
name|channel
index|]
index|[
name|node
index|]
operator|.
name|key
operator|=
name|key
expr_stmt|;
name|quadtreeUpdate
argument_list|(
name|channel
argument_list|,
name|node
argument_list|,
name|current_block_size
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|key
operator|&&
name|occupied_quadtree
index|[
name|channel
index|]
index|[
name|node
index|]
operator|.
name|largest_available_block
operator|==
name|current_block_size
condition|)
block|{
comment|// refining the quad tree, initialize child nodes
name|int
name|half_block_size
init|=
name|current_block_size
operator|/
literal|2
decl_stmt|;
name|int
name|temp
init|=
name|node
operator|*
literal|4
operator|+
literal|1
decl_stmt|;
for|for
control|(
name|int
name|sibling
init|=
literal|0
init|;
name|sibling
operator|<
literal|4
condition|;
operator|++
name|sibling
control|)
block|{
name|occupied_quadtree
index|[
name|channel
index|]
index|[
name|temp
operator|+
name|sibling
index|]
operator|.
name|largest_available_block
operator|=
name|half_block_size
expr_stmt|;
name|occupied_quadtree
index|[
name|channel
index|]
index|[
name|temp
operator|+
name|sibling
index|]
operator|.
name|largest_used_block
operator|=
literal|0
expr_stmt|;
name|occupied_quadtree
index|[
name|channel
index|]
index|[
name|temp
operator|+
name|sibling
index|]
operator|.
name|key
operator|=
literal|0
expr_stmt|;
block|}
block|}
name|node
operator|=
name|node
operator|*
literal|4
operator|+
literal|1
expr_stmt|;
for|for
control|(
name|int
name|sibling
init|=
literal|0
init|;
name|sibling
operator|<
literal|4
condition|;
operator|++
name|sibling
control|)
name|quadtreeInsert
argument_list|(
name|channel
argument_list|,
name|key
argument_list|,
name|rect
argument_list|,
name|node
operator|+
name|sibling
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|quadtreeClear
name|void
name|QGLMaskTextureCache
operator|::
name|quadtreeClear
parameter_list|(
name|int
name|channel
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
name|int
name|node
parameter_list|)
block|{
specifier|const
name|quint64
modifier|&
name|key
init|=
name|occupied_quadtree
index|[
name|channel
index|]
index|[
name|node
index|]
operator|.
name|key
decl_stmt|;
name|int
name|current_block_size
init|=
name|quadtreeBlocksize
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|QPoint
name|location
init|=
name|quadtreeLocation
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|QRect
name|relative
init|=
name|rect
operator|.
name|translated
argument_list|(
operator|-
name|location
argument_list|)
decl_stmt|;
if|if
condition|(
name|relative
operator|.
name|left
argument_list|()
operator|>=
name|current_block_size
operator|||
name|relative
operator|.
name|top
argument_list|()
operator|>=
name|current_block_size
operator|||
name|relative
operator|.
name|right
argument_list|()
operator|<
literal|0
operator|||
name|relative
operator|.
name|bottom
argument_list|()
operator|<
literal|0
condition|)
return|return;
if|if
condition|(
name|key
operator|!=
literal|0
condition|)
block|{
name|QGLTextureCacheHash
operator|::
name|iterator
name|it
init|=
name|cache
operator|.
name|find
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|it
operator|!=
name|cache
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|it
operator|!=
name|cache
operator|.
name|end
argument_list|()
operator|&&
name|it
operator|.
name|key
argument_list|()
operator|==
name|key
condition|)
block|{
specifier|const
name|CacheInfo
modifier|&
name|cache_info
init|=
name|it
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|cache_info
operator|.
name|loc
operator|.
name|channel
operator|==
name|channel
operator|&&
name|cache_info
operator|.
name|loc
operator|.
name|rect
operator|.
name|left
argument_list|()
operator|<=
name|location
operator|.
name|x
argument_list|()
operator|&&
name|cache_info
operator|.
name|loc
operator|.
name|rect
operator|.
name|top
argument_list|()
operator|<=
name|location
operator|.
name|y
argument_list|()
operator|&&
name|cache_info
operator|.
name|loc
operator|.
name|rect
operator|.
name|right
argument_list|()
operator|>=
name|location
operator|.
name|x
argument_list|()
operator|&&
name|cache_info
operator|.
name|loc
operator|.
name|rect
operator|.
name|bottom
argument_list|()
operator|>=
name|location
operator|.
name|y
argument_list|()
condition|)
block|{
name|quadtreeInsert
argument_list|(
name|channel
argument_list|,
literal|0
argument_list|,
name|cache_info
operator|.
name|loc
operator|.
name|rect
argument_list|)
expr_stmt|;
name|engine
operator|->
name|cacheItemErased
argument_list|(
name|channel
argument_list|,
name|cache_info
operator|.
name|loc
operator|.
name|rect
argument_list|)
expr_stmt|;
name|cache
operator|.
name|erase
argument_list|(
name|it
argument_list|)
expr_stmt|;
goto|goto
name|found
goto|;
block|}
else|else
block|{
operator|++
name|it
expr_stmt|;
block|}
block|}
comment|// if we don't find the key there's an error in the quadtree
name|Q_ASSERT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|found
label|:
name|Q_ASSERT
argument_list|(
name|occupied_quadtree
index|[
name|channel
index|]
index|[
name|node
index|]
operator|.
name|key
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|occupied_quadtree
index|[
name|channel
index|]
index|[
name|node
index|]
operator|.
name|largest_available_block
operator|<
name|current_block_size
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|current_block_size
operator|>=
name|block_size
argument_list|)
expr_stmt|;
name|node
operator|=
name|node
operator|*
literal|4
operator|+
literal|1
expr_stmt|;
for|for
control|(
name|int
name|sibling
init|=
literal|0
init|;
name|sibling
operator|<
literal|4
condition|;
operator|++
name|sibling
control|)
name|quadtreeClear
argument_list|(
name|channel
argument_list|,
name|rect
argument_list|,
name|node
operator|+
name|sibling
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|quadtreeFindAvailableLocation
name|bool
name|QGLMaskTextureCache
operator|::
name|quadtreeFindAvailableLocation
parameter_list|(
specifier|const
name|QSize
modifier|&
name|size
parameter_list|,
name|QRect
modifier|*
name|rect
parameter_list|,
name|int
modifier|*
name|channel
parameter_list|)
block|{
name|int
name|needed_block_size
init|=
name|qMax
argument_list|(
literal|1
argument_list|,
name|qMax
argument_list|(
name|size
operator|.
name|width
argument_list|()
argument_list|,
name|size
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
block|{
name|int
name|current_block_size
init|=
name|offscreenSize
operator|.
name|width
argument_list|()
decl_stmt|;
if|if
condition|(
name|occupied_quadtree
index|[
name|i
index|]
index|[
literal|0
index|]
operator|.
name|largest_available_block
operator|>=
name|needed_block_size
condition|)
block|{
name|int
name|node
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|current_block_size
operator|!=
name|occupied_quadtree
index|[
name|i
index|]
index|[
name|node
index|]
operator|.
name|largest_available_block
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|current_block_size
operator|>
name|block_size
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|current_block_size
operator|>
name|occupied_quadtree
index|[
name|i
index|]
index|[
name|node
index|]
operator|.
name|largest_available_block
argument_list|)
expr_stmt|;
name|node
operator|=
name|node
operator|*
literal|4
operator|+
literal|1
expr_stmt|;
name|current_block_size
operator|/=
literal|2
expr_stmt|;
name|int
name|sibling
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|occupied_quadtree
index|[
name|i
index|]
index|[
name|node
operator|+
name|sibling
index|]
operator|.
name|largest_available_block
operator|<
name|needed_block_size
condition|)
operator|++
name|sibling
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|sibling
operator|<
literal|4
argument_list|)
expr_stmt|;
name|node
operator|+=
name|sibling
expr_stmt|;
block|}
operator|*
name|channel
operator|=
name|i
expr_stmt|;
operator|*
name|rect
operator|=
name|QRect
argument_list|(
name|quadtreeLocation
argument_list|(
name|node
argument_list|)
argument_list|,
name|size
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|function|quadtreeFindExistingLocation
name|void
name|QGLMaskTextureCache
operator|::
name|quadtreeFindExistingLocation
parameter_list|(
specifier|const
name|QSize
modifier|&
name|size
parameter_list|,
name|QRect
modifier|*
name|rect
parameter_list|,
name|int
modifier|*
name|channel
parameter_list|)
block|{
comment|// try to pick small masks to throw out, as large masks are more expensive to recompute
operator|*
name|channel
operator|=
name|qrand
argument_list|()
operator|%
literal|4
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|occupied_quadtree
index|[
name|i
index|]
index|[
literal|0
index|]
operator|.
name|largest_used_block
operator|<
name|occupied_quadtree
index|[
operator|*
name|channel
index|]
index|[
literal|0
index|]
operator|.
name|largest_used_block
condition|)
operator|*
name|channel
operator|=
name|i
expr_stmt|;
name|int
name|needed_block_size
init|=
name|qt_next_power_of_two
argument_list|(
name|qMax
argument_list|(
literal|1
argument_list|,
name|qMax
argument_list|(
name|size
operator|.
name|width
argument_list|()
argument_list|,
name|size
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|node
init|=
literal|0
decl_stmt|;
name|int
name|current_block_size
init|=
name|offscreenSize
operator|.
name|width
argument_list|()
decl_stmt|;
while|while
condition|(
name|current_block_size
operator|>
name|block_size
operator|&&
name|current_block_size
operator|>=
name|needed_block_size
operator|*
literal|2
operator|&&
name|occupied_quadtree
index|[
operator|*
name|channel
index|]
index|[
name|node
index|]
operator|.
name|key
operator|==
literal|0
condition|)
block|{
name|node
operator|=
name|node
operator|*
literal|4
operator|+
literal|1
expr_stmt|;
name|int
name|sibling
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|occupied_quadtree
index|[
operator|*
name|channel
index|]
index|[
name|node
operator|+
name|i
index|]
operator|.
name|largest_used_block
operator|<=
name|occupied_quadtree
index|[
operator|*
name|channel
index|]
index|[
name|node
operator|+
name|sibling
index|]
operator|.
name|largest_used_block
condition|)
block|{
name|sibling
operator|=
name|i
expr_stmt|;
block|}
block|}
name|node
operator|+=
name|sibling
expr_stmt|;
name|current_block_size
operator|/=
literal|2
expr_stmt|;
block|}
operator|*
name|rect
operator|=
name|QRect
argument_list|(
name|quadtreeLocation
argument_list|(
name|node
argument_list|)
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
DECL|function|quadtreeAllocate
name|void
name|QGLMaskTextureCache
operator|::
name|quadtreeAllocate
parameter_list|(
name|quint64
name|key
parameter_list|,
specifier|const
name|QSize
modifier|&
name|size
parameter_list|,
name|QRect
modifier|*
name|rect
parameter_list|,
name|int
modifier|*
name|channel
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|DISABLE_MASK_CACHE
if|if
condition|(
operator|!
name|quadtreeFindAvailableLocation
argument_list|(
name|size
argument_list|,
name|rect
argument_list|,
name|channel
argument_list|)
condition|)
block|{
name|quadtreeFindExistingLocation
argument_list|(
name|size
argument_list|,
name|rect
argument_list|,
name|channel
argument_list|)
expr_stmt|;
name|quadtreeClear
argument_list|(
operator|*
name|channel
argument_list|,
operator|*
name|rect
argument_list|)
expr_stmt|;
block|}
name|quadtreeInsert
argument_list|(
operator|*
name|channel
argument_list|,
name|key
argument_list|,
operator|*
name|rect
argument_list|)
expr_stmt|;
else|#
directive|else
operator|*
name|channel
operator|=
literal|0
expr_stmt|;
operator|*
name|rect
operator|=
name|QRect
argument_list|(
name|QPoint
argument_list|()
argument_list|,
name|size
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
DECL|class|QGLTrapezoidMaskGenerator
class|class
name|QGLTrapezoidMaskGenerator
super|:
specifier|public
name|QGLMaskGenerator
block|{
public|public:
name|QGLTrapezoidMaskGenerator
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|path
parameter_list|,
specifier|const
name|QTransform
modifier|&
name|matrix
parameter_list|,
name|QGLOffscreen
modifier|&
name|offscreen
parameter_list|,
name|GLuint
name|maskFragmentProgram
parameter_list|,
name|qreal
name|strokeWidth
init|=
operator|-
literal|1.0
parameter_list|)
constructor_decl|;
name|QRect
name|screenRect
parameter_list|()
function_decl|;
name|void
name|drawMask
argument_list|(
specifier|const
name|QRect
operator|&
name|rect
argument_list|)
decl_stmt|;
private|private:
DECL|member|screen_rect
name|QRect
name|screen_rect
decl_stmt|;
DECL|member|has_screen_rect
name|bool
name|has_screen_rect
decl_stmt|;
DECL|member|offscreen
name|QGLOffscreen
modifier|*
name|offscreen
decl_stmt|;
DECL|member|maskFragmentProgram
name|GLuint
name|maskFragmentProgram
decl_stmt|;
specifier|virtual
name|QVector
argument_list|<
name|QGLTrapezoid
argument_list|>
name|generateTrapezoids
parameter_list|()
function_decl|=
literal|0
function_decl|;
specifier|virtual
name|QRect
name|computeScreenRect
parameter_list|()
function_decl|=
literal|0
function_decl|;
block|}
class|;
DECL|class|QGLPathMaskGenerator
class|class
name|QGLPathMaskGenerator
super|:
specifier|public
name|QGLTrapezoidMaskGenerator
block|{
public|public:
name|QGLPathMaskGenerator
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|path
parameter_list|,
specifier|const
name|QTransform
modifier|&
name|matrix
parameter_list|,
name|QGLOffscreen
modifier|&
name|offscreen
parameter_list|,
name|GLuint
name|maskFragmentProgram
parameter_list|)
constructor_decl|;
private|private:
name|QVector
argument_list|<
name|QGLTrapezoid
argument_list|>
name|generateTrapezoids
parameter_list|()
function_decl|;
name|QRect
name|computeScreenRect
parameter_list|()
function_decl|;
DECL|member|poly
name|QPolygonF
name|poly
decl_stmt|;
block|}
class|;
DECL|class|QGLLineMaskGenerator
class|class
name|QGLLineMaskGenerator
super|:
specifier|public
name|QGLTrapezoidMaskGenerator
block|{
public|public:
name|QGLLineMaskGenerator
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|path
parameter_list|,
specifier|const
name|QTransform
modifier|&
name|matrix
parameter_list|,
name|qreal
name|width
parameter_list|,
name|QGLOffscreen
modifier|&
name|offscreen
parameter_list|,
name|GLuint
name|maskFragmentProgram
parameter_list|)
constructor_decl|;
private|private:
name|QVector
argument_list|<
name|QGLTrapezoid
argument_list|>
name|generateTrapezoids
parameter_list|()
function_decl|;
name|QRect
name|computeScreenRect
parameter_list|()
function_decl|;
DECL|member|transformedPath
name|QPainterPath
name|transformedPath
decl_stmt|;
block|}
class|;
DECL|class|QGLRectMaskGenerator
class|class
name|QGLRectMaskGenerator
super|:
specifier|public
name|QGLTrapezoidMaskGenerator
block|{
public|public:
name|QGLRectMaskGenerator
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|path
parameter_list|,
specifier|const
name|QTransform
modifier|&
name|matrix
parameter_list|,
name|QGLOffscreen
modifier|&
name|offscreen
parameter_list|,
name|GLuint
name|maskFragmentProgram
parameter_list|)
constructor_decl|;
private|private:
name|QVector
argument_list|<
name|QGLTrapezoid
argument_list|>
name|generateTrapezoids
parameter_list|()
function_decl|;
name|QRect
name|computeScreenRect
parameter_list|()
function_decl|;
DECL|member|transformedPath
name|QPainterPath
name|transformedPath
decl_stmt|;
block|}
class|;
DECL|class|QGLEllipseMaskGenerator
class|class
name|QGLEllipseMaskGenerator
super|:
specifier|public
name|QGLMaskGenerator
block|{
public|public:
name|QGLEllipseMaskGenerator
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|rect
parameter_list|,
specifier|const
name|QTransform
modifier|&
name|matrix
parameter_list|,
name|QGLOffscreen
modifier|&
name|offscreen
parameter_list|,
name|GLuint
name|maskFragmentProgram
parameter_list|,
name|int
modifier|*
name|maskVariableLocations
parameter_list|)
constructor_decl|;
name|QRect
name|screenRect
parameter_list|()
function_decl|;
name|void
name|drawMask
argument_list|(
specifier|const
name|QRect
operator|&
name|rect
argument_list|)
decl_stmt|;
private|private:
DECL|member|screen_rect
name|QRect
name|screen_rect
decl_stmt|;
DECL|member|ellipseRect
name|QRectF
name|ellipseRect
decl_stmt|;
DECL|member|offscreen
name|QGLOffscreen
modifier|*
name|offscreen
decl_stmt|;
DECL|member|maskFragmentProgram
name|GLuint
name|maskFragmentProgram
decl_stmt|;
DECL|member|maskVariableLocations
name|int
modifier|*
name|maskVariableLocations
decl_stmt|;
DECL|member|vertexArray
name|float
name|vertexArray
index|[
literal|4
operator|*
literal|2
index|]
decl_stmt|;
block|}
class|;
DECL|function|QGLTrapezoidMaskGenerator
name|QGLTrapezoidMaskGenerator
operator|::
name|QGLTrapezoidMaskGenerator
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|path
parameter_list|,
specifier|const
name|QTransform
modifier|&
name|matrix
parameter_list|,
name|QGLOffscreen
modifier|&
name|offs
parameter_list|,
name|GLuint
name|program
parameter_list|,
name|qreal
name|stroke_width
parameter_list|)
member_init_list|:
name|QGLMaskGenerator
argument_list|(
name|path
argument_list|,
name|matrix
argument_list|,
name|stroke_width
argument_list|)
member_init_list|,
name|has_screen_rect
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|offscreen
argument_list|(
operator|&
name|offs
argument_list|)
member_init_list|,
name|maskFragmentProgram
argument_list|(
name|program
argument_list|)
block|{ }
specifier|extern
name|void
name|qt_add_rect_to_array
argument_list|(
specifier|const
name|QRectF
operator|&
name|r
argument_list|,
name|GLfloat
operator|*
name|array
argument_list|)
decl_stmt|;
specifier|extern
name|void
name|qt_add_texcoords_to_array
argument_list|(
name|qreal
name|x1
argument_list|,
name|qreal
name|y1
argument_list|,
name|qreal
name|x2
argument_list|,
name|qreal
name|y2
argument_list|,
name|GLfloat
operator|*
name|array
argument_list|)
decl_stmt|;
DECL|function|drawMask
name|void
name|QGLTrapezoidMaskGenerator
operator|::
name|drawMask
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_OPENGL_ES
name|Q_UNUSED
argument_list|(
name|rect
argument_list|)
expr_stmt|;
else|#
directive|else
name|glMatrixMode
argument_list|(
name|GL_MODELVIEW
argument_list|)
expr_stmt|;
name|glPushMatrix
argument_list|()
expr_stmt|;
name|glLoadIdentity
argument_list|()
expr_stmt|;
name|QGLContext
modifier|*
name|ctx
init|=
name|offscreen
operator|->
name|context
argument_list|()
decl_stmt|;
name|offscreen
operator|->
name|bind
argument_list|()
expr_stmt|;
name|glDisable
argument_list|(
name|GL_TEXTURE_GEN_S
argument_list|)
expr_stmt|;
name|glDisable
argument_list|(
name|GL_TEXTURE_1D
argument_list|)
expr_stmt|;
name|GLfloat
name|vertexArray
index|[
literal|4
operator|*
literal|2
index|]
decl_stmt|;
name|qt_add_rect_to_array
argument_list|(
name|rect
argument_list|,
name|vertexArray
argument_list|)
expr_stmt|;
name|bool
name|needs_scissor
init|=
name|rect
operator|!=
name|screen_rect
decl_stmt|;
if|if
condition|(
name|needs_scissor
condition|)
block|{
name|glEnable
argument_list|(
name|GL_SCISSOR_TEST
argument_list|)
expr_stmt|;
name|glScissor
argument_list|(
name|rect
operator|.
name|left
argument_list|()
argument_list|,
name|offscreen
operator|->
name|offscreenSize
argument_list|()
operator|.
name|height
argument_list|()
operator|-
name|rect
operator|.
name|bottom
argument_list|()
operator|-
literal|1
argument_list|,
name|rect
operator|.
name|width
argument_list|()
argument_list|,
name|rect
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QVector
argument_list|<
name|QGLTrapezoid
argument_list|>
name|trapezoids
init|=
name|generateTrapezoids
argument_list|()
decl_stmt|;
comment|// clear mask
name|glBlendFunc
argument_list|(
name|GL_ZERO
argument_list|,
name|GL_ZERO
argument_list|)
expr_stmt|;
comment|// clear
name|glVertexPointer
argument_list|(
literal|2
argument_list|,
name|GL_FLOAT
argument_list|,
literal|0
argument_list|,
name|vertexArray
argument_list|)
expr_stmt|;
name|glEnableClientState
argument_list|(
name|GL_VERTEX_ARRAY
argument_list|)
expr_stmt|;
name|glDrawArrays
argument_list|(
name|GL_TRIANGLE_FAN
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|glDisableClientState
argument_list|(
name|GL_VERTEX_ARRAY
argument_list|)
expr_stmt|;
name|glBlendFunc
argument_list|(
name|GL_ONE
argument_list|,
name|GL_ONE
argument_list|)
expr_stmt|;
comment|// add mask
name|glEnable
argument_list|(
name|GL_FRAGMENT_PROGRAM_ARB
argument_list|)
expr_stmt|;
name|glBindProgramARB
argument_list|(
name|GL_FRAGMENT_PROGRAM_ARB
argument_list|,
name|maskFragmentProgram
argument_list|)
expr_stmt|;
name|QPoint
name|delta
init|=
name|rect
operator|.
name|topLeft
argument_list|()
operator|-
name|screen_rect
operator|.
name|topLeft
argument_list|()
decl_stmt|;
name|glBegin
argument_list|(
name|GL_QUADS
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|trapezoids
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|drawTrapezoid
argument_list|(
name|trapezoids
index|[
name|i
index|]
operator|.
name|translated
argument_list|(
name|delta
argument_list|)
argument_list|,
name|offscreen
operator|->
name|offscreenSize
argument_list|()
operator|.
name|height
argument_list|()
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
name|glEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|needs_scissor
condition|)
name|glDisable
argument_list|(
name|GL_SCISSOR_TEST
argument_list|)
expr_stmt|;
name|glDisable
argument_list|(
name|GL_FRAGMENT_PROGRAM_ARB
argument_list|)
expr_stmt|;
name|glMatrixMode
argument_list|(
name|GL_MODELVIEW
argument_list|)
expr_stmt|;
name|glPopMatrix
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
DECL|function|screenRect
name|QRect
name|QGLTrapezoidMaskGenerator
operator|::
name|screenRect
parameter_list|()
block|{
if|if
condition|(
operator|!
name|has_screen_rect
condition|)
block|{
name|screen_rect
operator|=
name|computeScreenRect
argument_list|()
expr_stmt|;
name|has_screen_rect
operator|=
literal|true
expr_stmt|;
block|}
name|screen_rect
operator|=
name|screen_rect
operator|.
name|intersected
argument_list|(
name|QRect
argument_list|(
name|QPoint
argument_list|()
argument_list|,
name|offscreen
operator|->
name|drawableSize
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|screen_rect
return|;
block|}
DECL|function|QGLPathMaskGenerator
name|QGLPathMaskGenerator
operator|::
name|QGLPathMaskGenerator
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|path
parameter_list|,
specifier|const
name|QTransform
modifier|&
name|matrix
parameter_list|,
name|QGLOffscreen
modifier|&
name|offs
parameter_list|,
name|GLuint
name|program
parameter_list|)
member_init_list|:
name|QGLTrapezoidMaskGenerator
argument_list|(
name|path
argument_list|,
name|matrix
argument_list|,
name|offs
argument_list|,
name|program
argument_list|)
block|{ }
DECL|function|computeScreenRect
name|QRect
name|QGLPathMaskGenerator
operator|::
name|computeScreenRect
parameter_list|()
block|{
name|poly
operator|=
name|path
argument_list|()
operator|.
name|toFillPolygon
argument_list|(
name|matrix
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|poly
operator|.
name|boundingRect
argument_list|()
operator|.
name|toAlignedRect
argument_list|()
return|;
block|}
DECL|function|generateTrapezoids
name|QVector
argument_list|<
name|QGLTrapezoid
argument_list|>
name|QGLPathMaskGenerator
operator|::
name|generateTrapezoids
parameter_list|()
block|{
name|QOpenGLImmediateModeTessellator
name|tessellator
decl_stmt|;
name|tessellator
operator|.
name|tessellate
argument_list|(
name|poly
operator|.
name|data
argument_list|()
argument_list|,
name|poly
operator|.
name|count
argument_list|()
argument_list|,
name|path
argument_list|()
operator|.
name|fillRule
argument_list|()
operator|==
name|Qt
operator|::
name|WindingFill
argument_list|)
expr_stmt|;
return|return
name|tessellator
operator|.
name|trapezoids
return|;
block|}
DECL|function|QGLRectMaskGenerator
name|QGLRectMaskGenerator
operator|::
name|QGLRectMaskGenerator
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|path
parameter_list|,
specifier|const
name|QTransform
modifier|&
name|matrix
parameter_list|,
name|QGLOffscreen
modifier|&
name|offs
parameter_list|,
name|GLuint
name|program
parameter_list|)
member_init_list|:
name|QGLTrapezoidMaskGenerator
argument_list|(
name|path
argument_list|,
name|matrix
argument_list|,
name|offs
argument_list|,
name|program
argument_list|)
block|{ }
DECL|function|QGLLineMaskGenerator
name|QGLLineMaskGenerator
operator|::
name|QGLLineMaskGenerator
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|path
parameter_list|,
specifier|const
name|QTransform
modifier|&
name|matrix
parameter_list|,
name|qreal
name|width
parameter_list|,
name|QGLOffscreen
modifier|&
name|offs
parameter_list|,
name|GLuint
name|program
parameter_list|)
member_init_list|:
name|QGLTrapezoidMaskGenerator
argument_list|(
name|path
argument_list|,
name|matrix
argument_list|,
name|offs
argument_list|,
name|program
argument_list|,
name|width
argument_list|)
block|{ }
DECL|function|computeScreenRect
name|QRect
name|QGLRectMaskGenerator
operator|::
name|computeScreenRect
parameter_list|()
block|{
name|transformedPath
operator|=
name|matrix
argument_list|()
operator|.
name|map
argument_list|(
name|path
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|transformedPath
operator|.
name|controlPointRect
argument_list|()
operator|.
name|adjusted
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
operator|.
name|toAlignedRect
argument_list|()
return|;
block|}
DECL|function|computeScreenRect
name|QRect
name|QGLLineMaskGenerator
operator|::
name|computeScreenRect
parameter_list|()
block|{
name|transformedPath
operator|=
name|matrix
argument_list|()
operator|.
name|map
argument_list|(
name|path
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|transformedPath
operator|.
name|controlPointRect
argument_list|()
operator|.
name|adjusted
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
operator|.
name|toAlignedRect
argument_list|()
return|;
block|}
DECL|function|generateTrapezoids
name|QVector
argument_list|<
name|QGLTrapezoid
argument_list|>
name|QGLLineMaskGenerator
operator|::
name|generateTrapezoids
parameter_list|()
block|{
name|QOpenGLImmediateModeTessellator
name|tessellator
decl_stmt|;
name|QPointF
name|last
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|transformedPath
operator|.
name|elementCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QPainterPath
operator|::
name|Element
name|element
init|=
name|transformedPath
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
operator|!
name|element
operator|.
name|isCurveTo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|element
operator|.
name|isLineTo
argument_list|()
condition|)
name|tessellator
operator|.
name|tessellateRect
argument_list|(
name|last
argument_list|,
name|element
argument_list|,
name|strokeWidth
argument_list|()
argument_list|)
expr_stmt|;
name|last
operator|=
name|element
expr_stmt|;
block|}
return|return
name|tessellator
operator|.
name|trapezoids
return|;
block|}
DECL|function|generateTrapezoids
name|QVector
argument_list|<
name|QGLTrapezoid
argument_list|>
name|QGLRectMaskGenerator
operator|::
name|generateTrapezoids
parameter_list|()
block|{
name|Q_ASSERT
argument_list|(
name|transformedPath
operator|.
name|elementCount
argument_list|()
operator|==
literal|5
argument_list|)
expr_stmt|;
name|QOpenGLImmediateModeTessellator
name|tessellator
decl_stmt|;
if|if
condition|(
name|matrix
argument_list|()
operator|.
name|type
argument_list|()
operator|<=
name|QTransform
operator|::
name|TxScale
condition|)
block|{
name|QPointF
name|a
init|=
name|transformedPath
operator|.
name|elementAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QPointF
name|b
init|=
name|transformedPath
operator|.
name|elementAt
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|QPointF
name|c
init|=
name|transformedPath
operator|.
name|elementAt
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|QPointF
name|d
init|=
name|transformedPath
operator|.
name|elementAt
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|QPointF
name|first
init|=
operator|(
name|a
operator|+
name|d
operator|)
operator|*
literal|0.5
decl_stmt|;
name|QPointF
name|last
init|=
operator|(
name|b
operator|+
name|c
operator|)
operator|*
literal|0.5
decl_stmt|;
name|QPointF
name|delta
init|=
name|a
operator|-
name|d
decl_stmt|;
comment|// manhattan distance (no rotation)
name|qreal
name|width
init|=
name|qAbs
argument_list|(
name|delta
operator|.
name|x
argument_list|()
argument_list|)
operator|+
name|qAbs
argument_list|(
name|delta
operator|.
name|y
argument_list|()
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|qFuzzyIsNull
argument_list|(
name|delta
operator|.
name|x
argument_list|()
argument_list|)
operator|||
name|qFuzzyIsNull
argument_list|(
name|delta
operator|.
name|y
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|tessellator
operator|.
name|tessellateRect
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|width
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QPointF
name|points
index|[
literal|5
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
operator|++
name|i
control|)
name|points
index|[
name|i
index|]
operator|=
name|transformedPath
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|tessellator
operator|.
name|tessellateConvex
argument_list|(
name|points
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
return|return
name|tessellator
operator|.
name|trapezoids
return|;
block|}
DECL|function|ellipseRectToPath
specifier|static
name|QPainterPath
name|ellipseRectToPath
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|rect
parameter_list|)
block|{
name|QPainterPath
name|path
decl_stmt|;
name|path
operator|.
name|addEllipse
argument_list|(
name|rect
argument_list|)
expr_stmt|;
return|return
name|path
return|;
block|}
DECL|function|QGLEllipseMaskGenerator
name|QGLEllipseMaskGenerator
operator|::
name|QGLEllipseMaskGenerator
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|rect
parameter_list|,
specifier|const
name|QTransform
modifier|&
name|matrix
parameter_list|,
name|QGLOffscreen
modifier|&
name|offs
parameter_list|,
name|GLuint
name|program
parameter_list|,
name|int
modifier|*
name|locations
parameter_list|)
member_init_list|:
name|QGLMaskGenerator
argument_list|(
name|ellipseRectToPath
argument_list|(
name|rect
argument_list|)
argument_list|,
name|matrix
argument_list|)
member_init_list|,
name|ellipseRect
argument_list|(
name|rect
argument_list|)
member_init_list|,
name|offscreen
argument_list|(
operator|&
name|offs
argument_list|)
member_init_list|,
name|maskFragmentProgram
argument_list|(
name|program
argument_list|)
member_init_list|,
name|maskVariableLocations
argument_list|(
name|locations
argument_list|)
block|{ }
DECL|function|screenRect
name|QRect
name|QGLEllipseMaskGenerator
operator|::
name|screenRect
parameter_list|()
block|{
name|QPointF
name|center
init|=
name|ellipseRect
operator|.
name|center
argument_list|()
decl_stmt|;
name|QPointF
name|points
index|[]
init|=
block|{
name|QPointF
argument_list|(
name|ellipseRect
operator|.
name|left
argument_list|()
argument_list|,
name|center
operator|.
name|y
argument_list|()
argument_list|)
block|,
name|QPointF
argument_list|(
name|ellipseRect
operator|.
name|right
argument_list|()
argument_list|,
name|center
operator|.
name|y
argument_list|()
argument_list|)
block|,
name|QPointF
argument_list|(
name|center
operator|.
name|x
argument_list|()
argument_list|,
name|ellipseRect
operator|.
name|top
argument_list|()
argument_list|)
block|,
name|QPointF
argument_list|(
argument|center.x()
argument_list|,
argument|ellipseRect.bottom()
argument_list|)
block|}
decl_stmt|;
name|qreal
name|min_screen_delta_len
init|=
name|QREAL_MAX
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
block|{
name|QPointF
name|delta
init|=
name|points
index|[
name|i
index|]
operator|-
name|center
decl_stmt|;
comment|// normalize
name|delta
operator|/=
name|qSqrt
argument_list|(
name|delta
operator|.
name|x
argument_list|()
operator|*
name|delta
operator|.
name|x
argument_list|()
operator|+
name|delta
operator|.
name|y
argument_list|()
operator|*
name|delta
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|QPointF
name|screen_delta
argument_list|(
name|matrix
argument_list|()
operator|.
name|m11
argument_list|()
operator|*
name|delta
operator|.
name|x
argument_list|()
operator|+
name|matrix
argument_list|()
operator|.
name|m21
argument_list|()
operator|*
name|delta
operator|.
name|y
argument_list|()
argument_list|,
name|matrix
argument_list|()
operator|.
name|m12
argument_list|()
operator|*
name|delta
operator|.
name|x
argument_list|()
operator|+
name|matrix
argument_list|()
operator|.
name|m22
argument_list|()
operator|*
name|delta
operator|.
name|y
argument_list|()
argument_list|)
decl_stmt|;
name|min_screen_delta_len
operator|=
name|qMin
argument_list|(
name|min_screen_delta_len
argument_list|,
name|qreal
argument_list|(
name|qSqrt
argument_list|(
name|screen_delta
operator|.
name|x
argument_list|()
operator|*
name|screen_delta
operator|.
name|x
argument_list|()
operator|+
name|screen_delta
operator|.
name|y
argument_list|()
operator|*
name|screen_delta
operator|.
name|y
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|const
name|qreal
name|padding
init|=
literal|2.0f
decl_stmt|;
name|qreal
name|grow
init|=
name|padding
operator|/
name|min_screen_delta_len
decl_stmt|;
name|QRectF
name|boundingRect
init|=
name|ellipseRect
operator|.
name|adjusted
argument_list|(
operator|-
name|grow
argument_list|,
operator|-
name|grow
argument_list|,
name|grow
argument_list|,
name|grow
argument_list|)
decl_stmt|;
name|boundingRect
operator|=
name|matrix
argument_list|()
operator|.
name|mapRect
argument_list|(
name|boundingRect
argument_list|)
expr_stmt|;
name|QPointF
name|p
argument_list|(
literal|0.5
argument_list|,
literal|0.5
argument_list|)
decl_stmt|;
name|screen_rect
operator|=
name|QRect
argument_list|(
operator|(
name|boundingRect
operator|.
name|topLeft
argument_list|()
operator|-
name|p
operator|)
operator|.
name|toPoint
argument_list|()
argument_list|,
operator|(
name|boundingRect
operator|.
name|bottomRight
argument_list|()
operator|+
name|p
operator|)
operator|.
name|toPoint
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|screen_rect
return|;
block|}
DECL|function|drawMask
name|void
name|QGLEllipseMaskGenerator
operator|::
name|drawMask
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_OPENGL_ES
name|Q_UNUSED
argument_list|(
name|rect
argument_list|)
expr_stmt|;
else|#
directive|else
name|QGLContext
modifier|*
name|ctx
init|=
name|offscreen
operator|->
name|context
argument_list|()
decl_stmt|;
name|offscreen
operator|->
name|bind
argument_list|()
expr_stmt|;
name|glDisable
argument_list|(
name|GL_TEXTURE_GEN_S
argument_list|)
expr_stmt|;
name|glDisable
argument_list|(
name|GL_TEXTURE_1D
argument_list|)
expr_stmt|;
comment|// fragment program needs the inverse radii of the ellipse
name|glTexCoord2f
argument_list|(
literal|1.0f
operator|/
operator|(
name|ellipseRect
operator|.
name|width
argument_list|()
operator|*
literal|0.5f
operator|)
argument_list|,
literal|1.0f
operator|/
operator|(
name|ellipseRect
operator|.
name|height
argument_list|()
operator|*
literal|0.5f
operator|)
argument_list|)
expr_stmt|;
name|QTransform
name|translate
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
operator|-
name|ellipseRect
operator|.
name|center
argument_list|()
operator|.
name|x
argument_list|()
argument_list|,
operator|-
name|ellipseRect
operator|.
name|center
argument_list|()
operator|.
name|y
argument_list|()
argument_list|)
decl_stmt|;
name|QTransform
name|gl_to_qt
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
name|offscreen
operator|->
name|drawableSize
argument_list|()
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
name|QTransform
name|inv_matrix
init|=
name|gl_to_qt
operator|*
name|matrix
argument_list|()
operator|.
name|inverted
argument_list|()
operator|*
name|translate
decl_stmt|;
name|float
name|m
index|[
literal|3
index|]
index|[
literal|4
index|]
init|=
block|{
block|{
name|float
argument_list|(
name|inv_matrix
operator|.
name|m11
argument_list|()
argument_list|)
block|,
name|float
argument_list|(
name|inv_matrix
operator|.
name|m12
argument_list|()
argument_list|)
block|,
name|float
argument_list|(
argument|inv_matrix.m13()
argument_list|)
block|}
block|,
block|{
name|float
argument_list|(
name|inv_matrix
operator|.
name|m21
argument_list|()
argument_list|)
block|,
name|float
argument_list|(
name|inv_matrix
operator|.
name|m22
argument_list|()
argument_list|)
block|,
name|float
argument_list|(
argument|inv_matrix.m23()
argument_list|)
block|}
block|,
block|{
name|float
argument_list|(
name|inv_matrix
operator|.
name|m31
argument_list|()
argument_list|)
block|,
name|float
argument_list|(
name|inv_matrix
operator|.
name|m32
argument_list|()
argument_list|)
block|,
name|float
argument_list|(
argument|inv_matrix.m33()
argument_list|)
block|}
block|}
decl_stmt|;
name|QPoint
name|offs
argument_list|(
name|screen_rect
operator|.
name|left
argument_list|()
operator|-
name|rect
operator|.
name|left
argument_list|()
argument_list|,
operator|(
name|offscreen
operator|->
name|drawableSize
argument_list|()
operator|.
name|height
argument_list|()
operator|-
name|screen_rect
operator|.
name|top
argument_list|()
operator|)
operator|-
operator|(
name|offscreen
operator|->
name|offscreenSize
argument_list|()
operator|.
name|height
argument_list|()
operator|-
name|rect
operator|.
name|top
argument_list|()
operator|)
argument_list|)
decl_stmt|;
comment|// last component needs to be 1.0f to avoid Nvidia bug on linux
name|float
name|ellipse_offset
index|[
literal|4
index|]
init|=
block|{
name|float
argument_list|(
name|offs
operator|.
name|x
argument_list|()
argument_list|)
block|,
name|float
argument_list|(
name|offs
operator|.
name|y
argument_list|()
argument_list|)
block|,
literal|0.0f
block|,
literal|1.0f
block|}
decl_stmt|;
name|GLfloat
name|vertexArray
index|[
literal|4
operator|*
literal|2
index|]
decl_stmt|;
name|qt_add_rect_to_array
argument_list|(
name|rect
argument_list|,
name|vertexArray
argument_list|)
expr_stmt|;
name|glBlendFunc
argument_list|(
name|GL_ONE
argument_list|,
name|GL_ZERO
argument_list|)
expr_stmt|;
comment|// set mask
name|glEnable
argument_list|(
name|GL_FRAGMENT_PROGRAM_ARB
argument_list|)
expr_stmt|;
name|glBindProgramARB
argument_list|(
name|GL_FRAGMENT_PROGRAM_ARB
argument_list|,
name|maskFragmentProgram
argument_list|)
expr_stmt|;
name|glProgramLocalParameter4fvARB
argument_list|(
name|GL_FRAGMENT_PROGRAM_ARB
argument_list|,
name|maskVariableLocations
index|[
name|VAR_INV_MATRIX_M0
index|]
argument_list|,
name|m
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|glProgramLocalParameter4fvARB
argument_list|(
name|GL_FRAGMENT_PROGRAM_ARB
argument_list|,
name|maskVariableLocations
index|[
name|VAR_INV_MATRIX_M1
index|]
argument_list|,
name|m
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|glProgramLocalParameter4fvARB
argument_list|(
name|GL_FRAGMENT_PROGRAM_ARB
argument_list|,
name|maskVariableLocations
index|[
name|VAR_INV_MATRIX_M2
index|]
argument_list|,
name|m
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|glProgramLocalParameter4fvARB
argument_list|(
name|GL_FRAGMENT_PROGRAM_ARB
argument_list|,
name|maskVariableLocations
index|[
name|VAR_ELLIPSE_OFFSET
index|]
argument_list|,
name|ellipse_offset
argument_list|)
expr_stmt|;
name|glEnableClientState
argument_list|(
name|GL_VERTEX_ARRAY
argument_list|)
expr_stmt|;
name|glVertexPointer
argument_list|(
literal|2
argument_list|,
name|GL_FLOAT
argument_list|,
literal|0
argument_list|,
name|vertexArray
argument_list|)
expr_stmt|;
name|glDrawArrays
argument_list|(
name|GL_TRIANGLE_FAN
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|glDisableClientState
argument_list|(
name|GL_VERTEX_ARRAY
argument_list|)
expr_stmt|;
name|glDisable
argument_list|(
name|GL_FRAGMENT_PROGRAM_ARB
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
DECL|function|drawOffscreenPath
name|void
name|QOpenGLPaintEnginePrivate
operator|::
name|drawOffscreenPath
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|path
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|Q_WS_QWS
name|Q_UNUSED
argument_list|(
name|path
argument_list|)
expr_stmt|;
else|#
directive|else
name|DEBUG_ONCE_STR
argument_list|(
literal|"QOpenGLPaintEnginePrivate::drawOffscreenPath()"
argument_list|)
expr_stmt|;
name|disableClipping
argument_list|()
expr_stmt|;
name|GLuint
name|program
init|=
name|qt_gl_program_cache
argument_list|()
operator|->
name|getProgram
argument_list|(
name|device
operator|->
name|context
argument_list|()
argument_list|,
name|FRAGMENT_PROGRAM_MASK_TRAPEZOID_AA
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|QGLPathMaskGenerator
name|maskGenerator
argument_list|(
name|path
argument_list|,
name|matrix
argument_list|,
name|offscreen
argument_list|,
name|program
argument_list|)
decl_stmt|;
name|addItem
argument_list|(
name|qt_mask_texture_cache
argument_list|()
operator|->
name|getMask
argument_list|(
name|maskGenerator
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|enableClipping
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
DECL|function|drawFastRect
name|void
name|QOpenGLPaintEnginePrivate
operator|::
name|drawFastRect
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|r
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QOpenGLPaintEngine
argument_list|)
expr_stmt|;
name|DEBUG_ONCE_STR
argument_list|(
literal|"QOpenGLPaintEngine::drawRects(): drawing fast rect"
argument_list|)
expr_stmt|;
name|GLfloat
name|vertexArray
index|[
literal|10
index|]
decl_stmt|;
name|qt_add_rect_to_array
argument_list|(
name|r
argument_list|,
name|vertexArray
argument_list|)
expr_stmt|;
if|if
condition|(
name|has_pen
condition|)
name|QOpenGLCoordinateOffset
operator|::
name|enableOffset
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|has_brush
condition|)
block|{
name|flushDrawQueue
argument_list|()
expr_stmt|;
name|bool
name|temp
init|=
name|high_quality_antialiasing
decl_stmt|;
name|high_quality_antialiasing
operator|=
literal|false
expr_stmt|;
name|q
operator|->
name|updateCompositionMode
argument_list|(
name|composition_mode
argument_list|)
expr_stmt|;
name|setGradientOps
argument_list|(
name|cbrush
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|bool
name|fast_style
init|=
name|current_style
operator|==
name|Qt
operator|::
name|LinearGradientPattern
operator|||
name|current_style
operator|==
name|Qt
operator|::
name|SolidPattern
decl_stmt|;
if|if
condition|(
name|fast_style
operator|&&
name|has_fast_composition_mode
condition|)
block|{
name|glEnableClientState
argument_list|(
name|GL_VERTEX_ARRAY
argument_list|)
expr_stmt|;
name|glVertexPointer
argument_list|(
literal|2
argument_list|,
name|GL_FLOAT
argument_list|,
literal|0
argument_list|,
name|vertexArray
argument_list|)
expr_stmt|;
name|glDrawArrays
argument_list|(
name|GL_TRIANGLE_FAN
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|glDisableClientState
argument_list|(
name|GL_VERTEX_ARRAY
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|composite
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
name|high_quality_antialiasing
operator|=
name|temp
expr_stmt|;
name|q
operator|->
name|updateCompositionMode
argument_list|(
name|composition_mode
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|has_pen
condition|)
block|{
if|if
condition|(
name|has_fast_pen
operator|&&
operator|!
name|high_quality_antialiasing
condition|)
block|{
name|setGradientOps
argument_list|(
name|cpen
operator|.
name|brush
argument_list|()
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|vertexArray
index|[
literal|8
index|]
operator|=
name|vertexArray
index|[
literal|0
index|]
expr_stmt|;
name|vertexArray
index|[
literal|9
index|]
operator|=
name|vertexArray
index|[
literal|1
index|]
expr_stmt|;
name|glVertexPointer
argument_list|(
literal|2
argument_list|,
name|GL_FLOAT
argument_list|,
literal|0
argument_list|,
name|vertexArray
argument_list|)
expr_stmt|;
name|glEnableClientState
argument_list|(
name|GL_VERTEX_ARRAY
argument_list|)
expr_stmt|;
name|glDrawArrays
argument_list|(
name|GL_LINE_STRIP
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|glDisableClientState
argument_list|(
name|GL_VERTEX_ARRAY
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QPainterPath
name|path
decl_stmt|;
name|path
operator|.
name|setFillRule
argument_list|(
name|Qt
operator|::
name|WindingFill
argument_list|)
expr_stmt|;
name|qreal
name|left
init|=
name|r
operator|.
name|left
argument_list|()
decl_stmt|;
name|qreal
name|right
init|=
name|r
operator|.
name|right
argument_list|()
decl_stmt|;
name|qreal
name|top
init|=
name|r
operator|.
name|top
argument_list|()
decl_stmt|;
name|qreal
name|bottom
init|=
name|r
operator|.
name|bottom
argument_list|()
decl_stmt|;
name|path
operator|.
name|moveTo
argument_list|(
name|left
argument_list|,
name|top
argument_list|)
expr_stmt|;
name|path
operator|.
name|lineTo
argument_list|(
name|right
argument_list|,
name|top
argument_list|)
expr_stmt|;
name|path
operator|.
name|lineTo
argument_list|(
name|right
argument_list|,
name|bottom
argument_list|)
expr_stmt|;
name|path
operator|.
name|lineTo
argument_list|(
name|left
argument_list|,
name|bottom
argument_list|)
expr_stmt|;
name|path
operator|.
name|lineTo
argument_list|(
name|left
argument_list|,
name|top
argument_list|)
expr_stmt|;
name|strokePath
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|QOpenGLCoordinateOffset
operator|::
name|disableOffset
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|isFastRect
name|bool
name|QOpenGLPaintEnginePrivate
operator|::
name|isFastRect
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|rect
parameter_list|)
block|{
if|if
condition|(
name|matrix
operator|.
name|type
argument_list|()
operator|<
name|QTransform
operator|::
name|TxRotate
condition|)
block|{
name|QRectF
name|r
init|=
name|matrix
operator|.
name|mapRect
argument_list|(
name|rect
argument_list|)
decl_stmt|;
return|return
name|r
operator|.
name|topLeft
argument_list|()
operator|.
name|toPoint
argument_list|()
operator|==
name|r
operator|.
name|topLeft
argument_list|()
operator|&&
name|r
operator|.
name|bottomRight
argument_list|()
operator|.
name|toPoint
argument_list|()
operator|==
name|r
operator|.
name|bottomRight
argument_list|()
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|function|drawRects
name|void
name|QOpenGLPaintEngine
operator|::
name|drawRects
parameter_list|(
specifier|const
name|QRect
modifier|*
name|rects
parameter_list|,
name|int
name|rectCount
parameter_list|)
block|{
struct|struct
name|RectF
block|{
name|qreal
name|x
decl_stmt|;
name|qreal
name|y
decl_stmt|;
name|qreal
name|w
decl_stmt|;
name|qreal
name|h
decl_stmt|;
block|}
struct|;
name|Q_ASSERT
argument_list|(
sizeof|sizeof
argument_list|(
name|RectF
argument_list|)
operator|==
sizeof|sizeof
argument_list|(
name|QRectF
argument_list|)
argument_list|)
expr_stmt|;
name|RectF
name|fr
index|[
literal|256
index|]
decl_stmt|;
while|while
condition|(
name|rectCount
condition|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|rectCount
operator|&&
name|i
operator|<
literal|256
condition|)
block|{
name|fr
index|[
name|i
index|]
operator|.
name|x
operator|=
name|rects
index|[
name|i
index|]
operator|.
name|x
argument_list|()
expr_stmt|;
name|fr
index|[
name|i
index|]
operator|.
name|y
operator|=
name|rects
index|[
name|i
index|]
operator|.
name|y
argument_list|()
expr_stmt|;
name|fr
index|[
name|i
index|]
operator|.
name|w
operator|=
name|rects
index|[
name|i
index|]
operator|.
name|width
argument_list|()
expr_stmt|;
name|fr
index|[
name|i
index|]
operator|.
name|h
operator|=
name|rects
index|[
name|i
index|]
operator|.
name|height
argument_list|()
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
name|drawRects
argument_list|(
operator|(
name|QRectF
operator|*
operator|)
operator|(
name|void
operator|*
operator|)
name|fr
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|rects
operator|+=
name|i
expr_stmt|;
name|rectCount
operator|-=
name|i
expr_stmt|;
block|}
block|}
DECL|function|drawRects
name|void
name|QOpenGLPaintEngine
operator|::
name|drawRects
parameter_list|(
specifier|const
name|QRectF
modifier|*
name|rects
parameter_list|,
name|int
name|rectCount
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QOpenGLPaintEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|use_emulation
condition|)
block|{
name|QPaintEngineEx
operator|::
name|drawRects
argument_list|(
name|rects
argument_list|,
name|rectCount
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rectCount
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QRectF
modifier|&
name|r
init|=
name|rects
index|[
name|i
index|]
decl_stmt|;
comment|// optimization for rects which can be drawn aliased
if|if
condition|(
operator|!
name|d
operator|->
name|high_quality_antialiasing
operator|||
name|d
operator|->
name|isFastRect
argument_list|(
name|r
argument_list|)
condition|)
block|{
name|d
operator|->
name|drawFastRect
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QPainterPath
name|path
decl_stmt|;
name|path
operator|.
name|addRect
argument_list|(
name|r
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|has_brush
condition|)
block|{
name|d
operator|->
name|disableClipping
argument_list|()
expr_stmt|;
name|GLuint
name|program
init|=
name|qt_gl_program_cache
argument_list|()
operator|->
name|getProgram
argument_list|(
name|d
operator|->
name|device
operator|->
name|context
argument_list|()
argument_list|,
name|FRAGMENT_PROGRAM_MASK_TRAPEZOID_AA
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|matrix
operator|.
name|type
argument_list|()
operator|>=
name|QTransform
operator|::
name|TxProject
condition|)
block|{
name|QGLPathMaskGenerator
name|maskGenerator
argument_list|(
name|path
argument_list|,
name|d
operator|->
name|matrix
argument_list|,
name|d
operator|->
name|offscreen
argument_list|,
name|program
argument_list|)
decl_stmt|;
name|d
operator|->
name|addItem
argument_list|(
name|qt_mask_texture_cache
argument_list|()
operator|->
name|getMask
argument_list|(
name|maskGenerator
argument_list|,
name|d
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QGLRectMaskGenerator
name|maskGenerator
argument_list|(
name|path
argument_list|,
name|d
operator|->
name|matrix
argument_list|,
name|d
operator|->
name|offscreen
argument_list|,
name|program
argument_list|)
decl_stmt|;
name|d
operator|->
name|addItem
argument_list|(
name|qt_mask_texture_cache
argument_list|()
operator|->
name|getMask
argument_list|(
name|maskGenerator
argument_list|,
name|d
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|enableClipping
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|->
name|has_pen
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|has_fast_pen
condition|)
name|d
operator|->
name|strokeLines
argument_list|(
name|path
argument_list|)
expr_stmt|;
else|else
name|d
operator|->
name|strokePath
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|function|addQuadAsTriangle
specifier|static
name|void
name|addQuadAsTriangle
parameter_list|(
name|GLfloat
modifier|*
name|quad
parameter_list|,
name|GLfloat
modifier|*
name|triangle
parameter_list|)
block|{
name|triangle
index|[
literal|0
index|]
operator|=
name|quad
index|[
literal|0
index|]
expr_stmt|;
name|triangle
index|[
literal|1
index|]
operator|=
name|quad
index|[
literal|1
index|]
expr_stmt|;
name|triangle
index|[
literal|2
index|]
operator|=
name|quad
index|[
literal|2
index|]
expr_stmt|;
name|triangle
index|[
literal|3
index|]
operator|=
name|quad
index|[
literal|3
index|]
expr_stmt|;
name|triangle
index|[
literal|4
index|]
operator|=
name|quad
index|[
literal|4
index|]
expr_stmt|;
name|triangle
index|[
literal|5
index|]
operator|=
name|quad
index|[
literal|5
index|]
expr_stmt|;
name|triangle
index|[
literal|6
index|]
operator|=
name|quad
index|[
literal|4
index|]
expr_stmt|;
name|triangle
index|[
literal|7
index|]
operator|=
name|quad
index|[
literal|5
index|]
expr_stmt|;
name|triangle
index|[
literal|8
index|]
operator|=
name|quad
index|[
literal|6
index|]
expr_stmt|;
name|triangle
index|[
literal|9
index|]
operator|=
name|quad
index|[
literal|7
index|]
expr_stmt|;
name|triangle
index|[
literal|10
index|]
operator|=
name|quad
index|[
literal|0
index|]
expr_stmt|;
name|triangle
index|[
literal|11
index|]
operator|=
name|quad
index|[
literal|1
index|]
expr_stmt|;
block|}
DECL|function|drawPoints
name|void
name|QOpenGLPaintEngine
operator|::
name|drawPoints
parameter_list|(
specifier|const
name|QPoint
modifier|*
name|points
parameter_list|,
name|int
name|pointCount
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
sizeof|sizeof
argument_list|(
name|QT_PointF
argument_list|)
operator|==
sizeof|sizeof
argument_list|(
name|QPointF
argument_list|)
argument_list|)
expr_stmt|;
name|QT_PointF
name|fp
index|[
literal|256
index|]
decl_stmt|;
while|while
condition|(
name|pointCount
condition|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|pointCount
operator|&&
name|i
operator|<
literal|256
condition|)
block|{
name|fp
index|[
name|i
index|]
operator|.
name|x
operator|=
name|points
index|[
name|i
index|]
operator|.
name|x
argument_list|()
expr_stmt|;
name|fp
index|[
name|i
index|]
operator|.
name|y
operator|=
name|points
index|[
name|i
index|]
operator|.
name|y
argument_list|()
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
name|drawPoints
argument_list|(
operator|(
name|QPointF
operator|*
operator|)
operator|(
name|void
operator|*
operator|)
name|fp
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|points
operator|+=
name|i
expr_stmt|;
name|pointCount
operator|-=
name|i
expr_stmt|;
block|}
block|}
DECL|function|drawPoints
name|void
name|QOpenGLPaintEngine
operator|::
name|drawPoints
parameter_list|(
specifier|const
name|QPointF
modifier|*
name|points
parameter_list|,
name|int
name|pointCount
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QOpenGLPaintEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|use_emulation
condition|)
block|{
name|QPaintEngineEx
operator|::
name|drawPoints
argument_list|(
name|points
argument_list|,
name|pointCount
argument_list|)
expr_stmt|;
return|return;
block|}
name|d
operator|->
name|setGradientOps
argument_list|(
name|d
operator|->
name|cpen
operator|.
name|brush
argument_list|()
argument_list|,
name|QRectF
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|cpen
operator|.
name|isCosmetic
argument_list|()
operator|||
name|d
operator|->
name|high_quality_antialiasing
condition|)
block|{
name|Qt
operator|::
name|PenCapStyle
name|capStyle
init|=
name|d
operator|->
name|cpen
operator|.
name|capStyle
argument_list|()
decl_stmt|;
if|if
condition|(
name|capStyle
operator|==
name|Qt
operator|::
name|FlatCap
condition|)
name|d
operator|->
name|cpen
operator|.
name|setCapStyle
argument_list|(
name|Qt
operator|::
name|SquareCap
argument_list|)
expr_stmt|;
name|QPaintEngine
operator|::
name|drawPoints
argument_list|(
name|points
argument_list|,
name|pointCount
argument_list|)
expr_stmt|;
name|d
operator|->
name|cpen
operator|.
name|setCapStyle
argument_list|(
name|capStyle
argument_list|)
expr_stmt|;
return|return;
block|}
name|d
operator|->
name|flushDrawQueue
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|has_fast_pen
condition|)
block|{
name|QVarLengthArray
argument_list|<
name|GLfloat
argument_list|>
name|vertexArray
argument_list|(
literal|6
operator|*
name|pointCount
argument_list|)
decl_stmt|;
name|glMatrixMode
argument_list|(
name|GL_MODELVIEW
argument_list|)
expr_stmt|;
name|glPushMatrix
argument_list|()
expr_stmt|;
name|glLoadIdentity
argument_list|()
expr_stmt|;
name|int
name|j
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pointCount
condition|;
operator|++
name|i
control|)
block|{
name|QPointF
name|mapped
init|=
name|d
operator|->
name|matrix
operator|.
name|map
argument_list|(
name|points
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|GLfloat
name|x
init|=
name|GLfloat
argument_list|(
name|qRound
argument_list|(
name|mapped
operator|.
name|x
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|GLfloat
name|y
init|=
name|GLfloat
argument_list|(
name|qRound
argument_list|(
name|mapped
operator|.
name|y
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|vertexArray
index|[
name|j
operator|++
index|]
operator|=
name|x
expr_stmt|;
name|vertexArray
index|[
name|j
operator|++
index|]
operator|=
name|y
operator|-
literal|0.5f
expr_stmt|;
name|vertexArray
index|[
name|j
operator|++
index|]
operator|=
name|x
operator|+
literal|1.5f
expr_stmt|;
name|vertexArray
index|[
name|j
operator|++
index|]
operator|=
name|y
operator|+
literal|1.0f
expr_stmt|;
name|vertexArray
index|[
name|j
operator|++
index|]
operator|=
name|x
expr_stmt|;
name|vertexArray
index|[
name|j
operator|++
index|]
operator|=
name|y
operator|+
literal|1.0f
expr_stmt|;
block|}
name|glEnableClientState
argument_list|(
name|GL_VERTEX_ARRAY
argument_list|)
expr_stmt|;
name|glVertexPointer
argument_list|(
literal|2
argument_list|,
name|GL_FLOAT
argument_list|,
literal|0
argument_list|,
name|vertexArray
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|glDrawArrays
argument_list|(
name|GL_TRIANGLES
argument_list|,
literal|0
argument_list|,
name|pointCount
operator|*
literal|3
argument_list|)
expr_stmt|;
name|glDisableClientState
argument_list|(
name|GL_VERTEX_ARRAY
argument_list|)
expr_stmt|;
name|glPopMatrix
argument_list|()
expr_stmt|;
return|return;
block|}
specifier|const
name|qreal
modifier|*
name|vertexArray
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|qreal
operator|*
argument_list|>
argument_list|(
operator|&
name|points
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
sizeof|sizeof
argument_list|(
name|qreal
argument_list|)
operator|==
sizeof|sizeof
argument_list|(
name|double
argument_list|)
condition|)
block|{
name|Q_ASSERT
argument_list|(
sizeof|sizeof
argument_list|(
name|QPointF
argument_list|)
operator|==
literal|16
argument_list|)
expr_stmt|;
name|glVertexPointer
argument_list|(
literal|2
argument_list|,
name|GL_DOUBLE
argument_list|,
literal|0
argument_list|,
name|vertexArray
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Q_ASSERT
argument_list|(
sizeof|sizeof
argument_list|(
name|QPointF
argument_list|)
operator|==
literal|8
argument_list|)
expr_stmt|;
name|glVertexPointer
argument_list|(
literal|2
argument_list|,
name|GL_FLOAT
argument_list|,
literal|0
argument_list|,
name|vertexArray
argument_list|)
expr_stmt|;
block|}
name|glEnableClientState
argument_list|(
name|GL_VERTEX_ARRAY
argument_list|)
expr_stmt|;
name|glDrawArrays
argument_list|(
name|GL_POINTS
argument_list|,
literal|0
argument_list|,
name|pointCount
argument_list|)
expr_stmt|;
name|glDisableClientState
argument_list|(
name|GL_VERTEX_ARRAY
argument_list|)
expr_stmt|;
block|}
DECL|function|drawLines
name|void
name|QOpenGLPaintEngine
operator|::
name|drawLines
parameter_list|(
specifier|const
name|QLine
modifier|*
name|lines
parameter_list|,
name|int
name|lineCount
parameter_list|)
block|{
struct|struct
name|PointF
block|{
name|qreal
name|x
decl_stmt|;
name|qreal
name|y
decl_stmt|;
block|}
struct|;
struct|struct
name|LineF
block|{
name|PointF
name|p1
decl_stmt|;
name|PointF
name|p2
decl_stmt|;
block|}
struct|;
name|Q_ASSERT
argument_list|(
sizeof|sizeof
argument_list|(
name|PointF
argument_list|)
operator|==
sizeof|sizeof
argument_list|(
name|QPointF
argument_list|)
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
sizeof|sizeof
argument_list|(
name|LineF
argument_list|)
operator|==
sizeof|sizeof
argument_list|(
name|QLineF
argument_list|)
argument_list|)
expr_stmt|;
name|LineF
name|fl
index|[
literal|256
index|]
decl_stmt|;
while|while
condition|(
name|lineCount
condition|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|lineCount
operator|&&
name|i
operator|<
literal|256
condition|)
block|{
name|fl
index|[
name|i
index|]
operator|.
name|p1
operator|.
name|x
operator|=
name|lines
index|[
name|i
index|]
operator|.
name|x1
argument_list|()
expr_stmt|;
name|fl
index|[
name|i
index|]
operator|.
name|p1
operator|.
name|y
operator|=
name|lines
index|[
name|i
index|]
operator|.
name|y1
argument_list|()
expr_stmt|;
name|fl
index|[
name|i
index|]
operator|.
name|p2
operator|.
name|x
operator|=
name|lines
index|[
name|i
index|]
operator|.
name|x2
argument_list|()
expr_stmt|;
name|fl
index|[
name|i
index|]
operator|.
name|p2
operator|.
name|y
operator|=
name|lines
index|[
name|i
index|]
operator|.
name|y2
argument_list|()
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
name|drawLines
argument_list|(
operator|(
name|QLineF
operator|*
operator|)
operator|(
name|void
operator|*
operator|)
name|fl
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|lines
operator|+=
name|i
expr_stmt|;
name|lineCount
operator|-=
name|i
expr_stmt|;
block|}
block|}
DECL|function|drawLines
name|void
name|QOpenGLPaintEngine
operator|::
name|drawLines
parameter_list|(
specifier|const
name|QLineF
modifier|*
name|lines
parameter_list|,
name|int
name|lineCount
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QOpenGLPaintEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|use_emulation
condition|)
block|{
name|QPaintEngineEx
operator|::
name|drawLines
argument_list|(
name|lines
argument_list|,
name|lineCount
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|d
operator|->
name|has_pen
condition|)
block|{
name|QOpenGLCoordinateOffset
name|offset
argument_list|(
name|d
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|has_fast_pen
operator|&&
operator|!
name|d
operator|->
name|high_quality_antialiasing
condition|)
block|{
comment|//### gradient resolving on lines isn't correct
name|d
operator|->
name|setGradientOps
argument_list|(
name|d
operator|->
name|cpen
operator|.
name|brush
argument_list|()
argument_list|,
name|QRectF
argument_list|()
argument_list|)
expr_stmt|;
name|bool
name|useRects
init|=
literal|false
decl_stmt|;
comment|// scale or 90 degree rotation?
if|if
condition|(
name|d
operator|->
name|matrix
operator|.
name|type
argument_list|()
operator|<=
name|QTransform
operator|::
name|TxTranslate
operator|||
operator|(
operator|!
name|d
operator|->
name|cpen
operator|.
name|isCosmetic
argument_list|()
operator|&&
operator|(
name|d
operator|->
name|matrix
operator|.
name|type
argument_list|()
operator|<=
name|QTransform
operator|::
name|TxScale
operator|||
operator|(
name|d
operator|->
name|matrix
operator|.
name|type
argument_list|()
operator|==
name|QTransform
operator|::
name|TxRotate
operator|&&
name|d
operator|->
name|matrix
operator|.
name|m11
argument_list|()
operator|==
literal|0
operator|&&
name|d
operator|->
name|matrix
operator|.
name|m22
argument_list|()
operator|==
literal|0
operator|)
operator|)
operator|)
condition|)
block|{
name|useRects
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lineCount
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|lines
index|[
name|i
index|]
operator|.
name|p1
argument_list|()
operator|.
name|x
argument_list|()
operator|!=
name|lines
index|[
name|i
index|]
operator|.
name|p2
argument_list|()
operator|.
name|x
argument_list|()
operator|&&
name|lines
index|[
name|i
index|]
operator|.
name|p1
argument_list|()
operator|.
name|y
argument_list|()
operator|!=
name|lines
index|[
name|i
index|]
operator|.
name|p2
argument_list|()
operator|.
name|y
argument_list|()
condition|)
block|{
name|useRects
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
block|}
name|GLfloat
name|endCap
init|=
name|d
operator|->
name|cpen
operator|.
name|capStyle
argument_list|()
operator|==
name|Qt
operator|::
name|FlatCap
condition|?
literal|0.0f
else|:
literal|0.5f
decl_stmt|;
if|if
condition|(
name|useRects
condition|)
block|{
name|QVarLengthArray
argument_list|<
name|GLfloat
argument_list|>
name|vertexArray
argument_list|(
literal|12
operator|*
name|lineCount
argument_list|)
decl_stmt|;
name|GLfloat
name|quad
index|[
literal|8
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lineCount
condition|;
operator|++
name|i
control|)
block|{
name|GLfloat
name|x1
init|=
name|lines
index|[
name|i
index|]
operator|.
name|x1
argument_list|()
decl_stmt|;
name|GLfloat
name|x2
init|=
name|lines
index|[
name|i
index|]
operator|.
name|x2
argument_list|()
decl_stmt|;
name|GLfloat
name|y1
init|=
name|lines
index|[
name|i
index|]
operator|.
name|y1
argument_list|()
decl_stmt|;
name|GLfloat
name|y2
init|=
name|lines
index|[
name|i
index|]
operator|.
name|y2
argument_list|()
decl_stmt|;
if|if
condition|(
name|x1
operator|==
name|x2
condition|)
block|{
if|if
condition|(
name|y1
operator|>
name|y2
condition|)
name|qSwap
argument_list|(
name|y1
argument_list|,
name|y2
argument_list|)
expr_stmt|;
name|quad
index|[
literal|0
index|]
operator|=
name|x1
operator|-
literal|0.5f
expr_stmt|;
name|quad
index|[
literal|1
index|]
operator|=
name|y1
operator|-
name|endCap
expr_stmt|;
name|quad
index|[
literal|2
index|]
operator|=
name|x1
operator|+
literal|0.5f
expr_stmt|;
name|quad
index|[
literal|3
index|]
operator|=
name|y1
operator|-
name|endCap
expr_stmt|;
name|quad
index|[
literal|4
index|]
operator|=
name|x1
operator|+
literal|0.5f
expr_stmt|;
name|quad
index|[
literal|5
index|]
operator|=
name|y2
operator|+
name|endCap
expr_stmt|;
name|quad
index|[
literal|6
index|]
operator|=
name|x1
operator|-
literal|0.5f
expr_stmt|;
name|quad
index|[
literal|7
index|]
operator|=
name|y2
operator|+
name|endCap
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|x1
operator|>
name|x2
condition|)
name|qSwap
argument_list|(
name|x1
argument_list|,
name|x2
argument_list|)
expr_stmt|;
name|quad
index|[
literal|0
index|]
operator|=
name|x1
operator|-
name|endCap
expr_stmt|;
name|quad
index|[
literal|1
index|]
operator|=
name|y1
operator|+
literal|0.5f
expr_stmt|;
name|quad
index|[
literal|2
index|]
operator|=
name|x1
operator|-
name|endCap
expr_stmt|;
name|quad
index|[
literal|3
index|]
operator|=
name|y1
operator|-
literal|0.5f
expr_stmt|;
name|quad
index|[
literal|4
index|]
operator|=
name|x2
operator|+
name|endCap
expr_stmt|;
name|quad
index|[
literal|5
index|]
operator|=
name|y1
operator|-
literal|0.5f
expr_stmt|;
name|quad
index|[
literal|6
index|]
operator|=
name|x2
operator|+
name|endCap
expr_stmt|;
name|quad
index|[
literal|7
index|]
operator|=
name|y1
operator|+
literal|0.5f
expr_stmt|;
block|}
name|addQuadAsTriangle
argument_list|(
name|quad
argument_list|,
operator|&
name|vertexArray
index|[
literal|12
operator|*
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|glEnableClientState
argument_list|(
name|GL_VERTEX_ARRAY
argument_list|)
expr_stmt|;
name|glVertexPointer
argument_list|(
literal|2
argument_list|,
name|GL_FLOAT
argument_list|,
literal|0
argument_list|,
name|vertexArray
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|glDrawArrays
argument_list|(
name|GL_TRIANGLES
argument_list|,
literal|0
argument_list|,
name|lineCount
operator|*
literal|6
argument_list|)
expr_stmt|;
name|glDisableClientState
argument_list|(
name|GL_VERTEX_ARRAY
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVarLengthArray
argument_list|<
name|GLfloat
argument_list|>
name|vertexArray
argument_list|(
literal|4
operator|*
name|lineCount
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lineCount
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QPointF
name|a
init|=
name|lines
index|[
name|i
index|]
operator|.
name|p1
argument_list|()
decl_stmt|;
name|vertexArray
index|[
literal|4
operator|*
name|i
index|]
operator|=
name|lines
index|[
name|i
index|]
operator|.
name|x1
argument_list|()
expr_stmt|;
name|vertexArray
index|[
literal|4
operator|*
name|i
operator|+
literal|1
index|]
operator|=
name|lines
index|[
name|i
index|]
operator|.
name|y1
argument_list|()
expr_stmt|;
name|vertexArray
index|[
literal|4
operator|*
name|i
operator|+
literal|2
index|]
operator|=
name|lines
index|[
name|i
index|]
operator|.
name|x2
argument_list|()
expr_stmt|;
name|vertexArray
index|[
literal|4
operator|*
name|i
operator|+
literal|3
index|]
operator|=
name|lines
index|[
name|i
index|]
operator|.
name|y2
argument_list|()
expr_stmt|;
block|}
name|glEnableClientState
argument_list|(
name|GL_VERTEX_ARRAY
argument_list|)
expr_stmt|;
name|glVertexPointer
argument_list|(
literal|2
argument_list|,
name|GL_FLOAT
argument_list|,
literal|0
argument_list|,
name|vertexArray
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|glDrawArrays
argument_list|(
name|GL_LINES
argument_list|,
literal|0
argument_list|,
name|lineCount
operator|*
literal|2
argument_list|)
expr_stmt|;
name|glVertexPointer
argument_list|(
literal|2
argument_list|,
name|GL_FLOAT
argument_list|,
literal|4
operator|*
sizeof|sizeof
argument_list|(
name|GLfloat
argument_list|)
argument_list|,
name|vertexArray
operator|.
name|constData
argument_list|()
operator|+
literal|2
argument_list|)
expr_stmt|;
name|glDrawArrays
argument_list|(
name|GL_POINTS
argument_list|,
literal|0
argument_list|,
name|lineCount
argument_list|)
expr_stmt|;
name|glDisableClientState
argument_list|(
name|GL_VERTEX_ARRAY
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|QPainterPath
name|path
decl_stmt|;
name|path
operator|.
name|setFillRule
argument_list|(
name|Qt
operator|::
name|WindingFill
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lineCount
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QLineF
modifier|&
name|l
init|=
name|lines
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|l
operator|.
name|p1
argument_list|()
operator|==
name|l
operator|.
name|p2
argument_list|()
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|cpen
operator|.
name|capStyle
argument_list|()
operator|!=
name|Qt
operator|::
name|FlatCap
condition|)
block|{
name|QPointF
name|p
init|=
name|l
operator|.
name|p1
argument_list|()
decl_stmt|;
name|drawPoints
argument_list|(
operator|&
name|p
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
name|path
operator|.
name|moveTo
argument_list|(
name|l
operator|.
name|x1
argument_list|()
argument_list|,
name|l
operator|.
name|y1
argument_list|()
argument_list|)
expr_stmt|;
name|path
operator|.
name|lineTo
argument_list|(
name|l
operator|.
name|x2
argument_list|()
argument_list|,
name|l
operator|.
name|y2
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|->
name|has_fast_pen
operator|&&
name|d
operator|->
name|high_quality_antialiasing
condition|)
name|d
operator|->
name|strokeLines
argument_list|(
name|path
argument_list|)
expr_stmt|;
else|else
name|d
operator|->
name|strokePath
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|function|drawPolygon
name|void
name|QOpenGLPaintEngine
operator|::
name|drawPolygon
parameter_list|(
specifier|const
name|QPoint
modifier|*
name|points
parameter_list|,
name|int
name|pointCount
parameter_list|,
name|PolygonDrawMode
name|mode
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
sizeof|sizeof
argument_list|(
name|QT_PointF
argument_list|)
operator|==
sizeof|sizeof
argument_list|(
name|QPointF
argument_list|)
argument_list|)
expr_stmt|;
name|QVarLengthArray
argument_list|<
name|QT_PointF
argument_list|>
name|p
argument_list|(
name|pointCount
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pointCount
condition|;
operator|++
name|i
control|)
block|{
name|p
index|[
name|i
index|]
operator|.
name|x
operator|=
name|points
index|[
name|i
index|]
operator|.
name|x
argument_list|()
expr_stmt|;
name|p
index|[
name|i
index|]
operator|.
name|y
operator|=
name|points
index|[
name|i
index|]
operator|.
name|y
argument_list|()
expr_stmt|;
block|}
name|drawPolygon
argument_list|(
operator|(
name|QPointF
operator|*
operator|)
name|p
operator|.
name|data
argument_list|()
argument_list|,
name|pointCount
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
DECL|function|drawPolygon
name|void
name|QOpenGLPaintEngine
operator|::
name|drawPolygon
parameter_list|(
specifier|const
name|QPointF
modifier|*
name|points
parameter_list|,
name|int
name|pointCount
parameter_list|,
name|PolygonDrawMode
name|mode
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QOpenGLPaintEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|pointCount
operator|<
literal|2
condition|)
return|return;
if|if
condition|(
name|d
operator|->
name|use_emulation
condition|)
block|{
name|QPaintEngineEx
operator|::
name|drawPolygon
argument_list|(
name|points
argument_list|,
name|pointCount
argument_list|,
name|mode
argument_list|)
expr_stmt|;
return|return;
block|}
name|QRectF
name|bounds
decl_stmt|;
if|if
condition|(
operator|(
name|mode
operator|==
name|ConvexMode
operator|&&
operator|!
name|d
operator|->
name|high_quality_antialiasing
operator|&&
name|state
argument_list|()
operator|->
name|brushNeedsResolving
argument_list|()
operator|)
operator|||
operator|(
operator|(
name|d
operator|->
name|has_fast_pen
operator|&&
operator|!
name|d
operator|->
name|high_quality_antialiasing
operator|)
operator|&&
name|state
argument_list|()
operator|->
name|penNeedsResolving
argument_list|()
operator|)
condition|)
block|{
name|qreal
name|minx
init|=
name|points
index|[
literal|0
index|]
operator|.
name|x
argument_list|()
decl_stmt|,
name|miny
init|=
name|points
index|[
literal|0
index|]
operator|.
name|y
argument_list|()
decl_stmt|,
name|maxx
init|=
name|points
index|[
literal|0
index|]
operator|.
name|x
argument_list|()
decl_stmt|,
name|maxy
init|=
name|points
index|[
literal|0
index|]
operator|.
name|y
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|pointCount
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QPointF
modifier|&
name|pt
init|=
name|points
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|minx
operator|>
name|pt
operator|.
name|x
argument_list|()
condition|)
name|minx
operator|=
name|pt
operator|.
name|x
argument_list|()
expr_stmt|;
if|if
condition|(
name|miny
operator|>
name|pt
operator|.
name|y
argument_list|()
condition|)
name|miny
operator|=
name|pt
operator|.
name|y
argument_list|()
expr_stmt|;
if|if
condition|(
name|maxx
operator|<
name|pt
operator|.
name|x
argument_list|()
condition|)
name|maxx
operator|=
name|pt
operator|.
name|x
argument_list|()
expr_stmt|;
if|if
condition|(
name|maxy
operator|<
name|pt
operator|.
name|y
argument_list|()
condition|)
name|maxy
operator|=
name|pt
operator|.
name|y
argument_list|()
expr_stmt|;
block|}
name|bounds
operator|=
name|QRectF
argument_list|(
name|minx
argument_list|,
name|maxx
argument_list|,
name|maxx
operator|-
name|minx
argument_list|,
name|maxy
operator|-
name|miny
argument_list|)
expr_stmt|;
block|}
name|QOpenGLCoordinateOffset
name|offset
argument_list|(
name|d
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|has_brush
operator|&&
name|mode
operator|!=
name|PolylineMode
condition|)
block|{
if|if
condition|(
name|mode
operator|==
name|ConvexMode
operator|&&
operator|!
name|d
operator|->
name|high_quality_antialiasing
condition|)
block|{
comment|//### resolving on polygon from points isn't correct
name|d
operator|->
name|setGradientOps
argument_list|(
name|d
operator|->
name|cbrush
argument_list|,
name|bounds
argument_list|)
expr_stmt|;
specifier|const
name|qreal
modifier|*
name|vertexArray
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|qreal
operator|*
argument_list|>
argument_list|(
operator|&
name|points
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
sizeof|sizeof
argument_list|(
name|qreal
argument_list|)
operator|==
sizeof|sizeof
argument_list|(
name|double
argument_list|)
condition|)
block|{
name|Q_ASSERT
argument_list|(
sizeof|sizeof
argument_list|(
name|QPointF
argument_list|)
operator|==
literal|16
argument_list|)
expr_stmt|;
name|glVertexPointer
argument_list|(
literal|2
argument_list|,
name|GL_DOUBLE
argument_list|,
literal|0
argument_list|,
name|vertexArray
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Q_ASSERT
argument_list|(
sizeof|sizeof
argument_list|(
name|QPointF
argument_list|)
operator|==
literal|8
argument_list|)
expr_stmt|;
name|glVertexPointer
argument_list|(
literal|2
argument_list|,
name|GL_FLOAT
argument_list|,
literal|0
argument_list|,
name|vertexArray
argument_list|)
expr_stmt|;
block|}
name|glEnableClientState
argument_list|(
name|GL_VERTEX_ARRAY
argument_list|)
expr_stmt|;
name|glDrawArrays
argument_list|(
name|GL_TRIANGLE_FAN
argument_list|,
literal|0
argument_list|,
name|pointCount
argument_list|)
expr_stmt|;
name|glDisableClientState
argument_list|(
name|GL_VERTEX_ARRAY
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QPainterPath
name|path
decl_stmt|;
name|path
operator|.
name|setFillRule
argument_list|(
name|mode
operator|==
name|WindingMode
condition|?
name|Qt
operator|::
name|WindingFill
else|:
name|Qt
operator|::
name|OddEvenFill
argument_list|)
expr_stmt|;
name|path
operator|.
name|moveTo
argument_list|(
name|points
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|pointCount
condition|;
operator|++
name|i
control|)
name|path
operator|.
name|lineTo
argument_list|(
name|points
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|d
operator|->
name|fillPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|d
operator|->
name|has_pen
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|has_fast_pen
operator|&&
operator|!
name|d
operator|->
name|high_quality_antialiasing
condition|)
block|{
name|d
operator|->
name|setGradientOps
argument_list|(
name|d
operator|->
name|cpen
operator|.
name|brush
argument_list|()
argument_list|,
name|bounds
argument_list|)
expr_stmt|;
name|QVarLengthArray
argument_list|<
name|GLfloat
argument_list|>
name|vertexArray
argument_list|(
name|pointCount
operator|*
literal|2
operator|+
literal|2
argument_list|)
decl_stmt|;
name|glVertexPointer
argument_list|(
literal|2
argument_list|,
name|GL_FLOAT
argument_list|,
literal|0
argument_list|,
name|vertexArray
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|pointCount
condition|;
operator|++
name|i
control|)
block|{
name|vertexArray
index|[
name|i
operator|*
literal|2
index|]
operator|=
name|points
index|[
name|i
index|]
operator|.
name|x
argument_list|()
expr_stmt|;
name|vertexArray
index|[
name|i
operator|*
literal|2
operator|+
literal|1
index|]
operator|=
name|points
index|[
name|i
index|]
operator|.
name|y
argument_list|()
expr_stmt|;
block|}
name|glEnableClientState
argument_list|(
name|GL_VERTEX_ARRAY
argument_list|)
expr_stmt|;
if|if
condition|(
name|mode
operator|!=
name|PolylineMode
condition|)
block|{
name|vertexArray
index|[
name|i
operator|*
literal|2
index|]
operator|=
name|vertexArray
index|[
literal|0
index|]
expr_stmt|;
name|vertexArray
index|[
name|i
operator|*
literal|2
operator|+
literal|1
index|]
operator|=
name|vertexArray
index|[
literal|1
index|]
expr_stmt|;
name|glDrawArrays
argument_list|(
name|GL_LINE_STRIP
argument_list|,
literal|0
argument_list|,
name|pointCount
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|glDrawArrays
argument_list|(
name|GL_LINE_STRIP
argument_list|,
literal|0
argument_list|,
name|pointCount
argument_list|)
expr_stmt|;
name|glDrawArrays
argument_list|(
name|GL_POINTS
argument_list|,
name|pointCount
operator|-
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|glDisableClientState
argument_list|(
name|GL_VERTEX_ARRAY
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QPainterPath
name|path
argument_list|(
name|points
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|pointCount
condition|;
operator|++
name|i
control|)
name|path
operator|.
name|lineTo
argument_list|(
name|points
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|mode
operator|!=
name|PolylineMode
condition|)
name|path
operator|.
name|lineTo
argument_list|(
name|points
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|has_fast_pen
condition|)
name|d
operator|->
name|strokeLines
argument_list|(
name|path
argument_list|)
expr_stmt|;
else|else
name|d
operator|->
name|strokePath
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|function|strokeLines
name|void
name|QOpenGLPaintEnginePrivate
operator|::
name|strokeLines
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|path
parameter_list|)
block|{
name|DEBUG_ONCE_STR
argument_list|(
literal|"QOpenGLPaintEnginePrivate::strokeLines()"
argument_list|)
expr_stmt|;
name|qreal
name|penWidth
init|=
name|cpen
operator|.
name|widthF
argument_list|()
decl_stmt|;
name|GLuint
name|program
init|=
name|qt_gl_program_cache
argument_list|()
operator|->
name|getProgram
argument_list|(
name|device
operator|->
name|context
argument_list|()
argument_list|,
name|FRAGMENT_PROGRAM_MASK_TRAPEZOID_AA
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|QGLLineMaskGenerator
name|maskGenerator
argument_list|(
name|path
argument_list|,
name|matrix
argument_list|,
name|penWidth
operator|==
literal|0
condition|?
literal|1.0
else|:
name|penWidth
argument_list|,
name|offscreen
argument_list|,
name|program
argument_list|)
decl_stmt|;
name|disableClipping
argument_list|()
expr_stmt|;
name|QBrush
name|temp
init|=
name|cbrush
decl_stmt|;
name|QPointF
name|origin
init|=
name|brush_origin
decl_stmt|;
name|cbrush
operator|=
name|cpen
operator|.
name|brush
argument_list|()
expr_stmt|;
name|brush_origin
operator|=
name|QPointF
argument_list|()
expr_stmt|;
name|addItem
argument_list|(
name|qt_mask_texture_cache
argument_list|()
operator|->
name|getMask
argument_list|(
name|maskGenerator
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|cbrush
operator|=
name|temp
expr_stmt|;
name|brush_origin
operator|=
name|origin
expr_stmt|;
name|enableClipping
argument_list|()
expr_stmt|;
block|}
name|Q_GUI_EXPORT
name|bool
name|qt_scaleForTransform
argument_list|(
specifier|const
name|QTransform
operator|&
name|transform
argument_list|,
name|qreal
operator|*
name|scale
argument_list|)
decl_stmt|;
comment|// qtransform.cpp
DECL|function|strokePath
name|void
name|QOpenGLPaintEnginePrivate
operator|::
name|strokePath
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|path
parameter_list|,
name|bool
name|use_cache
parameter_list|)
block|{
name|QBrush
name|old_brush
init|=
name|cbrush
decl_stmt|;
name|cbrush
operator|=
name|cpen
operator|.
name|brush
argument_list|()
expr_stmt|;
name|qreal
name|txscale
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|cpen
operator|.
name|isCosmetic
argument_list|()
operator|||
operator|(
name|qt_scaleForTransform
argument_list|(
name|matrix
argument_list|,
operator|&
name|txscale
argument_list|)
operator|&&
name|txscale
operator|!=
literal|1
operator|)
condition|)
block|{
name|QTransform
name|temp
init|=
name|matrix
decl_stmt|;
name|matrix
operator|=
name|QTransform
argument_list|()
expr_stmt|;
name|glPushMatrix
argument_list|()
expr_stmt|;
if|if
condition|(
name|has_antialiasing
condition|)
block|{
name|glLoadIdentity
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|float
name|offs_matrix
index|[]
init|=
block|{
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0.5
block|,
literal|0.5
block|,
literal|0
block|,
literal|1
block|}
decl_stmt|;
name|glLoadMatrixf
argument_list|(
name|offs_matrix
argument_list|)
expr_stmt|;
block|}
name|QPen
name|pen
init|=
name|cpen
decl_stmt|;
if|if
condition|(
name|txscale
operator|!=
literal|1
condition|)
name|pen
operator|.
name|setWidthF
argument_list|(
name|pen
operator|.
name|widthF
argument_list|()
operator|*
name|txscale
argument_list|)
expr_stmt|;
if|if
condition|(
name|use_cache
condition|)
name|fillPath
argument_list|(
name|qt_opengl_stroke_cache
argument_list|()
operator|->
name|getStrokedPath
argument_list|(
name|temp
operator|.
name|map
argument_list|(
name|path
argument_list|)
argument_list|,
name|pen
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|fillPath
argument_list|(
name|strokeForPath
argument_list|(
name|temp
operator|.
name|map
argument_list|(
name|path
argument_list|)
argument_list|,
name|pen
argument_list|)
argument_list|)
expr_stmt|;
name|glPopMatrix
argument_list|()
expr_stmt|;
name|matrix
operator|=
name|temp
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|use_cache
condition|)
block|{
name|fillPath
argument_list|(
name|qt_opengl_stroke_cache
argument_list|()
operator|->
name|getStrokedPath
argument_list|(
name|path
argument_list|,
name|cpen
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fillPath
argument_list|(
name|strokeForPath
argument_list|(
name|path
argument_list|,
name|cpen
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|cbrush
operator|=
name|old_brush
expr_stmt|;
block|}
DECL|function|strokePathFastPen
name|void
name|QOpenGLPaintEnginePrivate
operator|::
name|strokePathFastPen
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|path
parameter_list|,
name|bool
name|needsResolving
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_OPENGL_ES
name|QRectF
name|bounds
decl_stmt|;
if|if
condition|(
name|needsResolving
condition|)
name|bounds
operator|=
name|path
operator|.
name|controlPointRect
argument_list|()
expr_stmt|;
name|setGradientOps
argument_list|(
name|cpen
operator|.
name|brush
argument_list|()
argument_list|,
name|bounds
argument_list|)
expr_stmt|;
name|QBezier
name|beziers
index|[
literal|32
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|path
operator|.
name|elementCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QPainterPath
operator|::
name|Element
modifier|&
name|e
init|=
name|path
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|e
operator|.
name|type
condition|)
block|{
case|case
name|QPainterPath
operator|::
name|MoveToElement
case|:
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
name|glEnd
argument_list|()
expr_stmt|;
comment|// GL_LINE_STRIP
name|glBegin
argument_list|(
name|GL_LINE_STRIP
argument_list|)
expr_stmt|;
name|glVertex2d
argument_list|(
name|e
operator|.
name|x
argument_list|,
name|e
operator|.
name|y
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPainterPath
operator|::
name|LineToElement
case|:
name|glVertex2d
argument_list|(
name|e
operator|.
name|x
argument_list|,
name|e
operator|.
name|y
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPainterPath
operator|::
name|CurveToElement
case|:
block|{
name|QPointF
name|sp
init|=
name|path
operator|.
name|elementAt
argument_list|(
name|i
operator|-
literal|1
argument_list|)
decl_stmt|;
name|QPointF
name|cp2
init|=
name|path
operator|.
name|elementAt
argument_list|(
name|i
operator|+
literal|1
argument_list|)
decl_stmt|;
name|QPointF
name|ep
init|=
name|path
operator|.
name|elementAt
argument_list|(
name|i
operator|+
literal|2
argument_list|)
decl_stmt|;
name|i
operator|+=
literal|2
expr_stmt|;
name|qreal
name|inverseScaleHalf
init|=
name|inverseScale
operator|/
literal|2
decl_stmt|;
name|beziers
index|[
literal|0
index|]
operator|=
name|QBezier
operator|::
name|fromPoints
argument_list|(
name|sp
argument_list|,
name|e
argument_list|,
name|cp2
argument_list|,
name|ep
argument_list|)
expr_stmt|;
name|QBezier
modifier|*
name|b
init|=
name|beziers
decl_stmt|;
while|while
condition|(
name|b
operator|>=
name|beziers
condition|)
block|{
comment|// check if we can pop the top bezier curve from the stack
name|qreal
name|l
init|=
name|qAbs
argument_list|(
name|b
operator|->
name|x4
operator|-
name|b
operator|->
name|x1
argument_list|)
operator|+
name|qAbs
argument_list|(
name|b
operator|->
name|y4
operator|-
name|b
operator|->
name|y1
argument_list|)
decl_stmt|;
name|qreal
name|d
decl_stmt|;
if|if
condition|(
name|l
operator|>
name|inverseScale
condition|)
block|{
name|d
operator|=
name|qAbs
argument_list|(
operator|(
name|b
operator|->
name|x4
operator|-
name|b
operator|->
name|x1
operator|)
operator|*
operator|(
name|b
operator|->
name|y1
operator|-
name|b
operator|->
name|y2
operator|)
operator|-
operator|(
name|b
operator|->
name|y4
operator|-
name|b
operator|->
name|y1
operator|)
operator|*
operator|(
name|b
operator|->
name|x1
operator|-
name|b
operator|->
name|x2
operator|)
argument_list|)
operator|+
name|qAbs
argument_list|(
operator|(
name|b
operator|->
name|x4
operator|-
name|b
operator|->
name|x1
operator|)
operator|*
operator|(
name|b
operator|->
name|y1
operator|-
name|b
operator|->
name|y3
operator|)
operator|-
operator|(
name|b
operator|->
name|y4
operator|-
name|b
operator|->
name|y1
operator|)
operator|*
operator|(
name|b
operator|->
name|x1
operator|-
name|b
operator|->
name|x3
operator|)
argument_list|)
expr_stmt|;
name|d
operator|/=
name|l
expr_stmt|;
block|}
else|else
block|{
name|d
operator|=
name|qAbs
argument_list|(
name|b
operator|->
name|x1
operator|-
name|b
operator|->
name|x2
argument_list|)
operator|+
name|qAbs
argument_list|(
name|b
operator|->
name|y1
operator|-
name|b
operator|->
name|y2
argument_list|)
operator|+
name|qAbs
argument_list|(
name|b
operator|->
name|x1
operator|-
name|b
operator|->
name|x3
argument_list|)
operator|+
name|qAbs
argument_list|(
name|b
operator|->
name|y1
operator|-
name|b
operator|->
name|y3
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|<
name|inverseScaleHalf
operator|||
name|b
operator|==
name|beziers
operator|+
literal|31
condition|)
block|{
comment|// good enough, we pop it off and add the endpoint
name|glVertex2d
argument_list|(
name|b
operator|->
name|x4
argument_list|,
name|b
operator|->
name|y4
argument_list|)
expr_stmt|;
operator|--
name|b
expr_stmt|;
block|}
else|else
block|{
comment|// split, second half of the polygon goes lower into the stack
name|b
operator|->
name|split
argument_list|(
name|b
operator|+
literal|1
argument_list|,
name|b
argument_list|)
expr_stmt|;
operator|++
name|b
expr_stmt|;
block|}
block|}
block|}
comment|// case CurveToElement
default|default:
break|break;
block|}
comment|// end of switch
block|}
name|glEnd
argument_list|()
expr_stmt|;
comment|// GL_LINE_STRIP
else|#
directive|else
comment|// have to use vertex arrays on embedded
name|QRectF
name|bounds
decl_stmt|;
if|if
condition|(
name|needsResolving
condition|)
name|bounds
operator|=
name|path
operator|.
name|controlPointRect
argument_list|()
expr_stmt|;
name|setGradientOps
argument_list|(
name|cpen
operator|.
name|brush
argument_list|()
argument_list|,
name|bounds
argument_list|)
expr_stmt|;
name|glEnableClientState
argument_list|(
name|GL_VERTEX_ARRAY
argument_list|)
expr_stmt|;
name|tess_points
operator|.
name|reset
argument_list|()
expr_stmt|;
name|QBezier
name|beziers
index|[
literal|32
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|path
operator|.
name|elementCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QPainterPath
operator|::
name|Element
modifier|&
name|e
init|=
name|path
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|e
operator|.
name|type
condition|)
block|{
case|case
name|QPainterPath
operator|::
name|MoveToElement
case|:
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
block|{
name|glVertexPointer
argument_list|(
literal|2
argument_list|,
name|GL_FLOAT
argument_list|,
literal|0
argument_list|,
name|tess_points
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|glDrawArrays
argument_list|(
name|GL_LINE_STRIP
argument_list|,
literal|0
argument_list|,
name|tess_points
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|tess_points
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
name|tess_points
operator|.
name|add
argument_list|(
name|QPointF
argument_list|(
name|e
operator|.
name|x
argument_list|,
name|e
operator|.
name|y
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPainterPath
operator|::
name|LineToElement
case|:
name|tess_points
operator|.
name|add
argument_list|(
name|QPointF
argument_list|(
name|e
operator|.
name|x
argument_list|,
name|e
operator|.
name|y
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPainterPath
operator|::
name|CurveToElement
case|:
block|{
name|QPointF
name|sp
init|=
name|path
operator|.
name|elementAt
argument_list|(
name|i
operator|-
literal|1
argument_list|)
decl_stmt|;
name|QPointF
name|cp2
init|=
name|path
operator|.
name|elementAt
argument_list|(
name|i
operator|+
literal|1
argument_list|)
decl_stmt|;
name|QPointF
name|ep
init|=
name|path
operator|.
name|elementAt
argument_list|(
name|i
operator|+
literal|2
argument_list|)
decl_stmt|;
name|i
operator|+=
literal|2
expr_stmt|;
name|qreal
name|inverseScaleHalf
init|=
name|inverseScale
operator|/
literal|2
decl_stmt|;
name|beziers
index|[
literal|0
index|]
operator|=
name|QBezier
operator|::
name|fromPoints
argument_list|(
name|sp
argument_list|,
name|e
argument_list|,
name|cp2
argument_list|,
name|ep
argument_list|)
expr_stmt|;
name|QBezier
modifier|*
name|b
init|=
name|beziers
decl_stmt|;
while|while
condition|(
name|b
operator|>=
name|beziers
condition|)
block|{
comment|// check if we can pop the top bezier curve from the stack
name|qreal
name|l
init|=
name|qAbs
argument_list|(
name|b
operator|->
name|x4
operator|-
name|b
operator|->
name|x1
argument_list|)
operator|+
name|qAbs
argument_list|(
name|b
operator|->
name|y4
operator|-
name|b
operator|->
name|y1
argument_list|)
decl_stmt|;
name|qreal
name|d
decl_stmt|;
if|if
condition|(
name|l
operator|>
name|inverseScale
condition|)
block|{
name|d
operator|=
name|qAbs
argument_list|(
operator|(
name|b
operator|->
name|x4
operator|-
name|b
operator|->
name|x1
operator|)
operator|*
operator|(
name|b
operator|->
name|y1
operator|-
name|b
operator|->
name|y2
operator|)
operator|-
operator|(
name|b
operator|->
name|y4
operator|-
name|b
operator|->
name|y1
operator|)
operator|*
operator|(
name|b
operator|->
name|x1
operator|-
name|b
operator|->
name|x2
operator|)
argument_list|)
operator|+
name|qAbs
argument_list|(
operator|(
name|b
operator|->
name|x4
operator|-
name|b
operator|->
name|x1
operator|)
operator|*
operator|(
name|b
operator|->
name|y1
operator|-
name|b
operator|->
name|y3
operator|)
operator|-
operator|(
name|b
operator|->
name|y4
operator|-
name|b
operator|->
name|y1
operator|)
operator|*
operator|(
name|b
operator|->
name|x1
operator|-
name|b
operator|->
name|x3
operator|)
argument_list|)
expr_stmt|;
name|d
operator|/=
name|l
expr_stmt|;
block|}
else|else
block|{
name|d
operator|=
name|qAbs
argument_list|(
name|b
operator|->
name|x1
operator|-
name|b
operator|->
name|x2
argument_list|)
operator|+
name|qAbs
argument_list|(
name|b
operator|->
name|y1
operator|-
name|b
operator|->
name|y2
argument_list|)
operator|+
name|qAbs
argument_list|(
name|b
operator|->
name|x1
operator|-
name|b
operator|->
name|x3
argument_list|)
operator|+
name|qAbs
argument_list|(
name|b
operator|->
name|y1
operator|-
name|b
operator|->
name|y3
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|<
name|inverseScaleHalf
operator|||
name|b
operator|==
name|beziers
operator|+
literal|31
condition|)
block|{
comment|// good enough, we pop it off and add the endpoint
name|tess_points
operator|.
name|add
argument_list|(
name|QPointF
argument_list|(
name|b
operator|->
name|x4
argument_list|,
name|b
operator|->
name|y4
argument_list|)
argument_list|)
expr_stmt|;
operator|--
name|b
expr_stmt|;
block|}
else|else
block|{
comment|// split, second half of the polygon goes lower into the stack
name|b
operator|->
name|split
argument_list|(
name|b
operator|+
literal|1
argument_list|,
name|b
argument_list|)
expr_stmt|;
operator|++
name|b
expr_stmt|;
block|}
block|}
block|}
comment|// case CurveToElement
default|default:
break|break;
block|}
comment|// end of switch
block|}
name|glVertexPointer
argument_list|(
literal|2
argument_list|,
name|GL_FLOAT
argument_list|,
literal|0
argument_list|,
name|tess_points
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|glDrawArrays
argument_list|(
name|GL_LINE_STRIP
argument_list|,
literal|0
argument_list|,
name|tess_points
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|glDisableClientState
argument_list|(
name|GL_VERTEX_ARRAY
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
DECL|function|pathClosed
specifier|static
name|bool
name|pathClosed
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|path
parameter_list|)
block|{
name|QPointF
name|lastMoveTo
init|=
name|path
operator|.
name|elementAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QPointF
name|lastPoint
init|=
name|lastMoveTo
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|path
operator|.
name|elementCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QPainterPath
operator|::
name|Element
modifier|&
name|e
init|=
name|path
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|e
operator|.
name|type
condition|)
block|{
case|case
name|QPainterPath
operator|::
name|MoveToElement
case|:
if|if
condition|(
name|lastMoveTo
operator|!=
name|lastPoint
condition|)
return|return
literal|false
return|;
name|lastMoveTo
operator|=
name|lastPoint
operator|=
name|e
expr_stmt|;
break|break;
case|case
name|QPainterPath
operator|::
name|LineToElement
case|:
name|lastPoint
operator|=
name|e
expr_stmt|;
break|break;
case|case
name|QPainterPath
operator|::
name|CurveToElement
case|:
name|lastPoint
operator|=
name|path
operator|.
name|elementAt
argument_list|(
name|i
operator|+
literal|2
argument_list|)
expr_stmt|;
name|i
operator|+=
literal|2
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
return|return
name|lastMoveTo
operator|==
name|lastPoint
return|;
block|}
DECL|function|drawPath
name|void
name|QOpenGLPaintEngine
operator|::
name|drawPath
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|path
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QOpenGLPaintEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|path
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
if|if
condition|(
name|d
operator|->
name|use_emulation
condition|)
block|{
name|QPaintEngineEx
operator|::
name|drawPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
return|return;
block|}
name|QOpenGLCoordinateOffset
name|offset
argument_list|(
name|d
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|has_brush
condition|)
block|{
name|bool
name|path_closed
init|=
name|pathClosed
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|bool
name|has_thick_pen
init|=
name|path_closed
operator|&&
name|d
operator|->
name|has_pen
operator|&&
name|d
operator|->
name|cpen
operator|.
name|style
argument_list|()
operator|==
name|Qt
operator|::
name|SolidLine
operator|&&
name|d
operator|->
name|cpen
operator|.
name|isSolid
argument_list|()
operator|&&
name|d
operator|->
name|cpen
operator|.
name|color
argument_list|()
operator|.
name|alpha
argument_list|()
operator|==
literal|255
operator|&&
name|d
operator|->
name|txop
operator|<
name|QTransform
operator|::
name|TxProject
operator|&&
name|d
operator|->
name|cpen
operator|.
name|widthF
argument_list|()
operator|>=
literal|2
operator|/
name|qSqrt
argument_list|(
name|qMin
argument_list|(
name|d
operator|->
name|matrix
operator|.
name|m11
argument_list|()
operator|*
name|d
operator|->
name|matrix
operator|.
name|m11
argument_list|()
operator|+
name|d
operator|->
name|matrix
operator|.
name|m21
argument_list|()
operator|*
name|d
operator|->
name|matrix
operator|.
name|m21
argument_list|()
argument_list|,
name|d
operator|->
name|matrix
operator|.
name|m12
argument_list|()
operator|*
name|d
operator|->
name|matrix
operator|.
name|m12
argument_list|()
operator|+
name|d
operator|->
name|matrix
operator|.
name|m22
argument_list|()
operator|*
name|d
operator|->
name|matrix
operator|.
name|m22
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|has_thick_pen
condition|)
block|{
name|DEBUG_ONCE
name|qDebug
argument_list|()
decl|<< "QOpenGLPaintEngine::drawPath(): Using thick pen optimization, style:"<<
name|d
operator|->
name|cbrush
operator|.
name|style
argument_list|()
decl_stmt|;
name|d
operator|->
name|flushDrawQueue
argument_list|()
expr_stmt|;
name|bool
name|temp
init|=
name|d
operator|->
name|high_quality_antialiasing
decl_stmt|;
name|d
operator|->
name|high_quality_antialiasing
operator|=
literal|false
expr_stmt|;
name|updateCompositionMode
argument_list|(
name|d
operator|->
name|composition_mode
argument_list|)
expr_stmt|;
name|d
operator|->
name|fillPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|d
operator|->
name|high_quality_antialiasing
operator|=
name|temp
expr_stmt|;
name|updateCompositionMode
argument_list|(
name|d
operator|->
name|composition_mode
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|fillPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|d
operator|->
name|has_pen
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|has_fast_pen
operator|&&
operator|!
name|d
operator|->
name|high_quality_antialiasing
condition|)
name|d
operator|->
name|strokePathFastPen
argument_list|(
name|path
argument_list|,
name|state
argument_list|()
operator|->
name|penNeedsResolving
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|d
operator|->
name|strokePath
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|drawImageAsPath
name|void
name|QOpenGLPaintEnginePrivate
operator|::
name|drawImageAsPath
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|r
parameter_list|,
specifier|const
name|QImage
modifier|&
name|img
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|sr
parameter_list|)
block|{
name|QBrush
name|old_brush
init|=
name|cbrush
decl_stmt|;
name|QPointF
name|old_brush_origin
init|=
name|brush_origin
decl_stmt|;
name|qreal
name|scaleX
init|=
name|r
operator|.
name|width
argument_list|()
operator|/
name|sr
operator|.
name|width
argument_list|()
decl_stmt|;
name|qreal
name|scaleY
init|=
name|r
operator|.
name|height
argument_list|()
operator|/
name|sr
operator|.
name|height
argument_list|()
decl_stmt|;
name|QTransform
name|brush_matrix
init|=
name|QTransform
operator|::
name|fromTranslate
argument_list|(
name|r
operator|.
name|left
argument_list|()
argument_list|,
name|r
operator|.
name|top
argument_list|()
argument_list|)
decl_stmt|;
name|brush_matrix
operator|.
name|scale
argument_list|(
name|scaleX
argument_list|,
name|scaleY
argument_list|)
expr_stmt|;
name|brush_matrix
operator|.
name|translate
argument_list|(
operator|-
name|sr
operator|.
name|left
argument_list|()
argument_list|,
operator|-
name|sr
operator|.
name|top
argument_list|()
argument_list|)
expr_stmt|;
name|cbrush
operator|=
name|QBrush
argument_list|(
name|img
argument_list|)
expr_stmt|;
name|cbrush
operator|.
name|setTransform
argument_list|(
name|brush_matrix
argument_list|)
expr_stmt|;
name|brush_origin
operator|=
name|QPointF
argument_list|()
expr_stmt|;
name|QPainterPath
name|p
decl_stmt|;
name|p
operator|.
name|addRect
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|fillPath
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|cbrush
operator|=
name|old_brush
expr_stmt|;
name|brush_origin
operator|=
name|old_brush_origin
expr_stmt|;
block|}
DECL|function|drawTiledImageAsPath
name|void
name|QOpenGLPaintEnginePrivate
operator|::
name|drawTiledImageAsPath
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|r
parameter_list|,
specifier|const
name|QImage
modifier|&
name|img
parameter_list|,
name|qreal
name|sx
parameter_list|,
name|qreal
name|sy
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|offset
parameter_list|)
block|{
name|QBrush
name|old_brush
init|=
name|cbrush
decl_stmt|;
name|QPointF
name|old_brush_origin
init|=
name|brush_origin
decl_stmt|;
name|QTransform
name|brush_matrix
init|=
name|QTransform
operator|::
name|fromTranslate
argument_list|(
name|r
operator|.
name|left
argument_list|()
argument_list|,
name|r
operator|.
name|top
argument_list|()
argument_list|)
decl_stmt|;
name|brush_matrix
operator|.
name|scale
argument_list|(
name|sx
argument_list|,
name|sy
argument_list|)
expr_stmt|;
name|brush_matrix
operator|.
name|translate
argument_list|(
operator|-
name|offset
operator|.
name|x
argument_list|()
argument_list|,
operator|-
name|offset
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|cbrush
operator|=
name|QBrush
argument_list|(
name|img
argument_list|)
expr_stmt|;
name|cbrush
operator|.
name|setTransform
argument_list|(
name|brush_matrix
argument_list|)
expr_stmt|;
name|brush_origin
operator|=
name|QPointF
argument_list|()
expr_stmt|;
name|QPainterPath
name|p
decl_stmt|;
name|p
operator|.
name|addRect
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|fillPath
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|cbrush
operator|=
name|old_brush
expr_stmt|;
name|brush_origin
operator|=
name|old_brush_origin
expr_stmt|;
block|}
DECL|function|scaleRect
specifier|static
specifier|const
name|QRectF
name|scaleRect
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|r
parameter_list|,
name|qreal
name|sx
parameter_list|,
name|qreal
name|sy
parameter_list|)
block|{
return|return
name|QRectF
argument_list|(
name|r
operator|.
name|x
argument_list|()
operator|*
name|sx
argument_list|,
name|r
operator|.
name|y
argument_list|()
operator|*
name|sy
argument_list|,
name|r
operator|.
name|width
argument_list|()
operator|*
name|sx
argument_list|,
name|r
operator|.
name|height
argument_list|()
operator|*
name|sy
argument_list|)
return|;
block|}
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|qSubImage
specifier|static
specifier|const
name|T
name|qSubImage
parameter_list|(
specifier|const
name|T
modifier|&
name|image
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|src
parameter_list|,
name|QRectF
modifier|*
name|srcNew
parameter_list|)
block|{
specifier|const
name|int
name|sx1
init|=
name|qMax
argument_list|(
literal|0
argument_list|,
name|qFloor
argument_list|(
name|src
operator|.
name|left
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|int
name|sy1
init|=
name|qMax
argument_list|(
literal|0
argument_list|,
name|qFloor
argument_list|(
name|src
operator|.
name|top
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|int
name|sx2
init|=
name|qMin
argument_list|(
name|image
operator|.
name|width
argument_list|()
argument_list|,
name|qCeil
argument_list|(
name|src
operator|.
name|right
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|int
name|sy2
init|=
name|qMin
argument_list|(
name|image
operator|.
name|height
argument_list|()
argument_list|,
name|qCeil
argument_list|(
name|src
operator|.
name|bottom
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|T
name|sub
init|=
name|image
operator|.
name|copy
argument_list|(
name|sx1
argument_list|,
name|sy1
argument_list|,
name|sx2
operator|-
name|sx1
argument_list|,
name|sy2
operator|-
name|sy1
argument_list|)
decl_stmt|;
if|if
condition|(
name|srcNew
condition|)
operator|*
name|srcNew
operator|=
name|src
operator|.
name|translated
argument_list|(
operator|-
name|sx1
argument_list|,
operator|-
name|sy1
argument_list|)
expr_stmt|;
return|return
name|sub
return|;
block|}
DECL|function|drawPixmap
name|void
name|QOpenGLPaintEngine
operator|::
name|drawPixmap
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|r
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|pm
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|sr
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QOpenGLPaintEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|pm
operator|.
name|depth
argument_list|()
operator|==
literal|1
condition|)
block|{
name|QPixmap
name|tpx
argument_list|(
name|pm
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|tpx
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|transparent
argument_list|)
expr_stmt|;
name|QPainter
name|p
argument_list|(
operator|&
name|tpx
argument_list|)
decl_stmt|;
name|p
operator|.
name|setPen
argument_list|(
name|d
operator|->
name|cpen
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawPixmap
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|pm
argument_list|)
expr_stmt|;
name|p
operator|.
name|end
argument_list|()
expr_stmt|;
name|drawPixmap
argument_list|(
name|r
argument_list|,
name|tpx
argument_list|,
name|sr
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|const
name|int
name|sz
init|=
name|d
operator|->
name|max_texture_size
decl_stmt|;
if|if
condition|(
name|pm
operator|.
name|width
argument_list|()
operator|>
name|sz
operator|||
name|pm
operator|.
name|height
argument_list|()
operator|>
name|sz
condition|)
block|{
name|QRectF
name|subsr
decl_stmt|;
specifier|const
name|QPixmap
name|sub
init|=
name|qSubImage
argument_list|(
name|pm
argument_list|,
name|sr
argument_list|,
operator|&
name|subsr
argument_list|)
decl_stmt|;
if|if
condition|(
name|sub
operator|.
name|width
argument_list|()
operator|<=
name|sz
operator|&&
name|sub
operator|.
name|height
argument_list|()
operator|<=
name|sz
condition|)
block|{
name|drawPixmap
argument_list|(
name|r
argument_list|,
name|sub
argument_list|,
name|subsr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|const
name|QPixmap
name|scaled
init|=
name|sub
operator|.
name|scaled
argument_list|(
name|sz
argument_list|,
name|sz
argument_list|,
name|Qt
operator|::
name|KeepAspectRatio
argument_list|)
decl_stmt|;
specifier|const
name|qreal
name|sx
init|=
name|scaled
operator|.
name|width
argument_list|()
operator|/
name|qreal
argument_list|(
name|sub
operator|.
name|width
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|qreal
name|sy
init|=
name|scaled
operator|.
name|height
argument_list|()
operator|/
name|qreal
argument_list|(
name|sub
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
name|drawPixmap
argument_list|(
name|r
argument_list|,
name|scaled
argument_list|,
name|scaleRect
argument_list|(
name|subsr
argument_list|,
name|sx
argument_list|,
name|sy
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
if|if
condition|(
name|d
operator|->
name|composition_mode
operator|>
name|QPainter
operator|::
name|CompositionMode_Plus
operator|||
operator|(
name|d
operator|->
name|high_quality_antialiasing
operator|&&
operator|!
name|d
operator|->
name|isFastRect
argument_list|(
name|r
argument_list|)
operator|)
condition|)
name|d
operator|->
name|drawImageAsPath
argument_list|(
name|r
argument_list|,
name|pm
operator|.
name|toImage
argument_list|()
argument_list|,
name|sr
argument_list|)
expr_stmt|;
else|else
block|{
name|GLenum
name|target
init|=
name|qt_gl_preferredTextureTarget
argument_list|()
decl_stmt|;
name|d
operator|->
name|flushDrawQueue
argument_list|()
expr_stmt|;
name|QGLTexture
modifier|*
name|tex
init|=
name|d
operator|->
name|device
operator|->
name|context
argument_list|()
operator|->
name|d_func
argument_list|()
operator|->
name|bindTexture
argument_list|(
name|pm
argument_list|,
name|target
argument_list|,
name|GL_RGBA
argument_list|,
name|QGLContext
operator|::
name|InternalBindOption
argument_list|)
decl_stmt|;
name|drawTextureRect
argument_list|(
name|pm
operator|.
name|width
argument_list|()
argument_list|,
name|pm
operator|.
name|height
argument_list|()
argument_list|,
name|r
argument_list|,
name|sr
argument_list|,
name|target
argument_list|,
name|tex
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|drawTiledPixmap
name|void
name|QOpenGLPaintEngine
operator|::
name|drawTiledPixmap
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|r
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|pm
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|offset
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QOpenGLPaintEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|pm
operator|.
name|depth
argument_list|()
operator|==
literal|1
condition|)
block|{
name|QPixmap
name|tpx
argument_list|(
name|pm
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|tpx
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|transparent
argument_list|)
expr_stmt|;
name|QPainter
name|p
argument_list|(
operator|&
name|tpx
argument_list|)
decl_stmt|;
name|p
operator|.
name|setPen
argument_list|(
name|d
operator|->
name|cpen
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawPixmap
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|pm
argument_list|)
expr_stmt|;
name|p
operator|.
name|end
argument_list|()
expr_stmt|;
name|drawTiledPixmap
argument_list|(
name|r
argument_list|,
name|tpx
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return;
block|}
name|QImage
name|scaled
decl_stmt|;
specifier|const
name|int
name|sz
init|=
name|d
operator|->
name|max_texture_size
decl_stmt|;
if|if
condition|(
name|pm
operator|.
name|width
argument_list|()
operator|>
name|sz
operator|||
name|pm
operator|.
name|height
argument_list|()
operator|>
name|sz
condition|)
block|{
name|int
name|rw
init|=
name|qCeil
argument_list|(
name|r
operator|.
name|width
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|rh
init|=
name|qCeil
argument_list|(
name|r
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|rw
operator|<
name|pm
operator|.
name|width
argument_list|()
operator|&&
name|rh
operator|<
name|pm
operator|.
name|height
argument_list|()
condition|)
block|{
name|drawTiledPixmap
argument_list|(
name|r
argument_list|,
name|pm
operator|.
name|copy
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|rw
argument_list|,
name|rh
argument_list|)
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return;
block|}
name|scaled
operator|=
name|pm
operator|.
name|toImage
argument_list|()
operator|.
name|scaled
argument_list|(
name|sz
argument_list|,
name|sz
argument_list|,
name|Qt
operator|::
name|KeepAspectRatio
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|->
name|composition_mode
operator|>
name|QPainter
operator|::
name|CompositionMode_Plus
operator|||
operator|(
name|d
operator|->
name|high_quality_antialiasing
operator|&&
operator|!
name|d
operator|->
name|isFastRect
argument_list|(
name|r
argument_list|)
operator|)
condition|)
block|{
if|if
condition|(
name|scaled
operator|.
name|isNull
argument_list|()
condition|)
name|d
operator|->
name|drawTiledImageAsPath
argument_list|(
name|r
argument_list|,
name|pm
operator|.
name|toImage
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|offset
argument_list|)
expr_stmt|;
else|else
block|{
specifier|const
name|qreal
name|sx
init|=
name|pm
operator|.
name|width
argument_list|()
operator|/
name|qreal
argument_list|(
name|scaled
operator|.
name|width
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|qreal
name|sy
init|=
name|pm
operator|.
name|height
argument_list|()
operator|/
name|qreal
argument_list|(
name|scaled
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
name|d
operator|->
name|drawTiledImageAsPath
argument_list|(
name|r
argument_list|,
name|scaled
argument_list|,
name|sx
argument_list|,
name|sy
argument_list|,
name|offset
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|d
operator|->
name|flushDrawQueue
argument_list|()
expr_stmt|;
name|QGLTexture
modifier|*
name|tex
decl_stmt|;
if|if
condition|(
name|scaled
operator|.
name|isNull
argument_list|()
condition|)
name|tex
operator|=
name|d
operator|->
name|device
operator|->
name|context
argument_list|()
operator|->
name|d_func
argument_list|()
operator|->
name|bindTexture
argument_list|(
name|pm
argument_list|,
name|GL_TEXTURE_2D
argument_list|,
name|GL_RGBA
argument_list|,
name|QGLContext
operator|::
name|InternalBindOption
argument_list|)
expr_stmt|;
else|else
name|tex
operator|=
name|d
operator|->
name|device
operator|->
name|context
argument_list|()
operator|->
name|d_func
argument_list|()
operator|->
name|bindTexture
argument_list|(
name|scaled
argument_list|,
name|GL_TEXTURE_2D
argument_list|,
name|GL_RGBA
argument_list|,
name|QGLContext
operator|::
name|InternalBindOption
argument_list|)
expr_stmt|;
name|updateTextureFilter
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
name|GL_REPEAT
argument_list|,
name|d
operator|->
name|use_smooth_pixmap_transform
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_OPENGL_ES
name|glPushAttrib
argument_list|(
name|GL_CURRENT_BIT
argument_list|)
expr_stmt|;
name|glDisable
argument_list|(
name|GL_TEXTURE_GEN_S
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|glColor4f
argument_list|(
name|d
operator|->
name|opacity
argument_list|,
name|d
operator|->
name|opacity
argument_list|,
name|d
operator|->
name|opacity
argument_list|,
name|d
operator|->
name|opacity
argument_list|)
expr_stmt|;
name|glEnable
argument_list|(
name|GL_TEXTURE_2D
argument_list|)
expr_stmt|;
name|GLdouble
name|tc_w
init|=
name|r
operator|.
name|width
argument_list|()
operator|/
name|pm
operator|.
name|width
argument_list|()
decl_stmt|;
name|GLdouble
name|tc_h
init|=
name|r
operator|.
name|height
argument_list|()
operator|/
name|pm
operator|.
name|height
argument_list|()
decl_stmt|;
comment|// Rotate the texture so that it is aligned correctly and the
comment|// wrapping is done correctly
if|if
condition|(
name|tex
operator|->
name|options
operator|&
name|QGLContext
operator|::
name|InvertedYBindOption
condition|)
block|{
name|glMatrixMode
argument_list|(
name|GL_TEXTURE
argument_list|)
expr_stmt|;
name|glPushMatrix
argument_list|()
expr_stmt|;
name|glRotatef
argument_list|(
literal|180.0
argument_list|,
literal|0.0
argument_list|,
literal|1.0
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
name|glRotatef
argument_list|(
literal|180.0
argument_list|,
literal|0.0
argument_list|,
literal|0.0
argument_list|,
literal|1.0
argument_list|)
expr_stmt|;
block|}
name|GLfloat
name|vertexArray
index|[
literal|4
operator|*
literal|2
index|]
decl_stmt|;
name|GLfloat
name|texCoordArray
index|[
literal|4
operator|*
literal|2
index|]
decl_stmt|;
name|double
name|offset_x
init|=
name|offset
operator|.
name|x
argument_list|()
operator|/
name|pm
operator|.
name|width
argument_list|()
decl_stmt|;
name|double
name|offset_y
init|=
name|offset
operator|.
name|y
argument_list|()
operator|/
name|pm
operator|.
name|height
argument_list|()
decl_stmt|;
name|qt_add_rect_to_array
argument_list|(
name|r
argument_list|,
name|vertexArray
argument_list|)
expr_stmt|;
name|qt_add_texcoords_to_array
argument_list|(
name|offset_x
argument_list|,
name|offset_y
argument_list|,
name|tc_w
operator|+
name|offset_x
argument_list|,
name|tc_h
operator|+
name|offset_y
argument_list|,
name|texCoordArray
argument_list|)
expr_stmt|;
name|glVertexPointer
argument_list|(
literal|2
argument_list|,
name|GL_FLOAT
argument_list|,
literal|0
argument_list|,
name|vertexArray
argument_list|)
expr_stmt|;
name|glTexCoordPointer
argument_list|(
literal|2
argument_list|,
name|GL_FLOAT
argument_list|,
literal|0
argument_list|,
name|texCoordArray
argument_list|)
expr_stmt|;
name|glEnableClientState
argument_list|(
name|GL_VERTEX_ARRAY
argument_list|)
expr_stmt|;
name|glEnableClientState
argument_list|(
name|GL_TEXTURE_COORD_ARRAY
argument_list|)
expr_stmt|;
name|glDrawArrays
argument_list|(
name|GL_TRIANGLE_FAN
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|glDisableClientState
argument_list|(
name|GL_TEXTURE_COORD_ARRAY
argument_list|)
expr_stmt|;
name|glDisableClientState
argument_list|(
name|GL_VERTEX_ARRAY
argument_list|)
expr_stmt|;
if|if
condition|(
name|tex
operator|->
name|options
operator|&
name|QGLContext
operator|::
name|InvertedYBindOption
condition|)
name|glPopMatrix
argument_list|()
expr_stmt|;
name|glDisable
argument_list|(
name|GL_TEXTURE_2D
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_OPENGL_ES
name|glPopAttrib
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
block|}
DECL|function|drawImage
name|void
name|QOpenGLPaintEngine
operator|::
name|drawImage
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|r
parameter_list|,
specifier|const
name|QImage
modifier|&
name|image
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|sr
parameter_list|,
name|Qt
operator|::
name|ImageConversionFlags
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QOpenGLPaintEngine
argument_list|)
expr_stmt|;
specifier|const
name|int
name|sz
init|=
name|d
operator|->
name|max_texture_size
decl_stmt|;
if|if
condition|(
name|image
operator|.
name|width
argument_list|()
operator|>
name|sz
operator|||
name|image
operator|.
name|height
argument_list|()
operator|>
name|sz
condition|)
block|{
name|QRectF
name|subsr
decl_stmt|;
specifier|const
name|QImage
name|sub
init|=
name|qSubImage
argument_list|(
name|image
argument_list|,
name|sr
argument_list|,
operator|&
name|subsr
argument_list|)
decl_stmt|;
if|if
condition|(
name|sub
operator|.
name|width
argument_list|()
operator|<=
name|sz
operator|&&
name|sub
operator|.
name|height
argument_list|()
operator|<=
name|sz
condition|)
block|{
name|drawImage
argument_list|(
name|r
argument_list|,
name|sub
argument_list|,
name|subsr
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|const
name|QImage
name|scaled
init|=
name|sub
operator|.
name|scaled
argument_list|(
name|sz
argument_list|,
name|sz
argument_list|,
name|Qt
operator|::
name|KeepAspectRatio
argument_list|)
decl_stmt|;
specifier|const
name|qreal
name|sx
init|=
name|scaled
operator|.
name|width
argument_list|()
operator|/
name|qreal
argument_list|(
name|sub
operator|.
name|width
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|qreal
name|sy
init|=
name|scaled
operator|.
name|height
argument_list|()
operator|/
name|qreal
argument_list|(
name|sub
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
name|drawImage
argument_list|(
name|r
argument_list|,
name|scaled
argument_list|,
name|scaleRect
argument_list|(
name|subsr
argument_list|,
name|sx
argument_list|,
name|sy
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
if|if
condition|(
name|d
operator|->
name|composition_mode
operator|>
name|QPainter
operator|::
name|CompositionMode_Plus
operator|||
operator|(
name|d
operator|->
name|high_quality_antialiasing
operator|&&
operator|!
name|d
operator|->
name|isFastRect
argument_list|(
name|r
argument_list|)
operator|)
condition|)
name|d
operator|->
name|drawImageAsPath
argument_list|(
name|r
argument_list|,
name|image
argument_list|,
name|sr
argument_list|)
expr_stmt|;
else|else
block|{
name|GLenum
name|target
init|=
name|qt_gl_preferredTextureTarget
argument_list|()
decl_stmt|;
name|d
operator|->
name|flushDrawQueue
argument_list|()
expr_stmt|;
name|QGLTexture
modifier|*
name|tex
init|=
name|d
operator|->
name|device
operator|->
name|context
argument_list|()
operator|->
name|d_func
argument_list|()
operator|->
name|bindTexture
argument_list|(
name|image
argument_list|,
name|target
argument_list|,
name|GL_RGBA
argument_list|,
name|QGLContext
operator|::
name|InternalBindOption
argument_list|)
decl_stmt|;
name|drawTextureRect
argument_list|(
name|image
operator|.
name|width
argument_list|()
argument_list|,
name|image
operator|.
name|height
argument_list|()
argument_list|,
name|r
argument_list|,
name|sr
argument_list|,
name|target
argument_list|,
name|tex
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|drawTextureRect
name|void
name|QOpenGLPaintEngine
operator|::
name|drawTextureRect
parameter_list|(
name|int
name|tx_width
parameter_list|,
name|int
name|tx_height
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|r
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|sr
parameter_list|,
name|GLenum
name|target
parameter_list|,
name|QGLTexture
modifier|*
name|tex
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QOpenGLPaintEngine
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_OPENGL_ES
name|glPushAttrib
argument_list|(
name|GL_CURRENT_BIT
argument_list|)
expr_stmt|;
name|glDisable
argument_list|(
name|GL_TEXTURE_GEN_S
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|glColor4f
argument_list|(
name|d
operator|->
name|opacity
argument_list|,
name|d
operator|->
name|opacity
argument_list|,
name|d
operator|->
name|opacity
argument_list|,
name|d
operator|->
name|opacity
argument_list|)
expr_stmt|;
name|glEnable
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|updateTextureFilter
argument_list|(
name|target
argument_list|,
name|GL_CLAMP_TO_EDGE
argument_list|,
name|d
operator|->
name|use_smooth_pixmap_transform
argument_list|)
expr_stmt|;
name|qreal
name|x1
decl_stmt|,
name|x2
decl_stmt|,
name|y1
decl_stmt|,
name|y2
decl_stmt|;
if|if
condition|(
name|target
operator|==
name|GL_TEXTURE_2D
condition|)
block|{
name|x1
operator|=
name|sr
operator|.
name|x
argument_list|()
operator|/
name|tx_width
expr_stmt|;
name|x2
operator|=
name|x1
operator|+
name|sr
operator|.
name|width
argument_list|()
operator|/
name|tx_width
expr_stmt|;
if|if
condition|(
name|tex
operator|->
name|options
operator|&
name|QGLContext
operator|::
name|InvertedYBindOption
condition|)
block|{
name|y1
operator|=
literal|1
operator|-
operator|(
name|sr
operator|.
name|bottom
argument_list|()
operator|/
name|tx_height
operator|)
expr_stmt|;
name|y2
operator|=
literal|1
operator|-
operator|(
name|sr
operator|.
name|y
argument_list|()
operator|/
name|tx_height
operator|)
expr_stmt|;
block|}
else|else
block|{
name|y1
operator|=
name|sr
operator|.
name|bottom
argument_list|()
operator|/
name|tx_height
expr_stmt|;
name|y2
operator|=
name|sr
operator|.
name|y
argument_list|()
operator|/
name|tx_height
expr_stmt|;
block|}
block|}
else|else
block|{
name|x1
operator|=
name|sr
operator|.
name|x
argument_list|()
expr_stmt|;
name|x2
operator|=
name|sr
operator|.
name|right
argument_list|()
expr_stmt|;
name|y1
operator|=
name|sr
operator|.
name|bottom
argument_list|()
expr_stmt|;
name|y2
operator|=
name|sr
operator|.
name|y
argument_list|()
expr_stmt|;
block|}
name|GLfloat
name|vertexArray
index|[
literal|4
operator|*
literal|2
index|]
decl_stmt|;
name|GLfloat
name|texCoordArray
index|[
literal|4
operator|*
literal|2
index|]
decl_stmt|;
name|qt_add_rect_to_array
argument_list|(
name|r
argument_list|,
name|vertexArray
argument_list|)
expr_stmt|;
name|qt_add_texcoords_to_array
argument_list|(
name|x1
argument_list|,
name|y2
argument_list|,
name|x2
argument_list|,
name|y1
argument_list|,
name|texCoordArray
argument_list|)
expr_stmt|;
name|glVertexPointer
argument_list|(
literal|2
argument_list|,
name|GL_FLOAT
argument_list|,
literal|0
argument_list|,
name|vertexArray
argument_list|)
expr_stmt|;
name|glTexCoordPointer
argument_list|(
literal|2
argument_list|,
name|GL_FLOAT
argument_list|,
literal|0
argument_list|,
name|texCoordArray
argument_list|)
expr_stmt|;
name|glEnableClientState
argument_list|(
name|GL_VERTEX_ARRAY
argument_list|)
expr_stmt|;
name|glEnableClientState
argument_list|(
name|GL_TEXTURE_COORD_ARRAY
argument_list|)
expr_stmt|;
name|glDrawArrays
argument_list|(
name|GL_TRIANGLE_FAN
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|glDisableClientState
argument_list|(
name|GL_TEXTURE_COORD_ARRAY
argument_list|)
expr_stmt|;
name|glDisableClientState
argument_list|(
name|GL_VERTEX_ARRAY
argument_list|)
expr_stmt|;
name|glDisable
argument_list|(
name|target
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_OPENGL_ES
name|glPopAttrib
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
ifdef|#
directive|ifdef
name|Q_WS_WIN
name|HDC
else|#
directive|else
name|Qt
operator|::
name|HANDLE
endif|#
directive|endif
DECL|function|handle
name|QOpenGLPaintEngine
operator|::
name|handle
parameter_list|()
specifier|const
block|{
return|return
literal|0
return|;
block|}
DECL|variable|x_margin
specifier|static
specifier|const
name|int
name|x_margin
init|=
literal|1
decl_stmt|;
DECL|variable|y_margin
specifier|static
specifier|const
name|int
name|y_margin
init|=
literal|0
decl_stmt|;
DECL|struct|QGLGlyphCoord
struct|struct
name|QGLGlyphCoord
block|{
comment|// stores the offset and size of a glyph texture
DECL|member|x
name|qreal
name|x
decl_stmt|;
DECL|member|y
name|qreal
name|y
decl_stmt|;
DECL|member|width
name|qreal
name|width
decl_stmt|;
DECL|member|height
name|qreal
name|height
decl_stmt|;
DECL|member|log_width
name|qreal
name|log_width
decl_stmt|;
DECL|member|log_height
name|qreal
name|log_height
decl_stmt|;
DECL|member|x_offset
name|QFixed
name|x_offset
decl_stmt|;
DECL|member|y_offset
name|QFixed
name|y_offset
decl_stmt|;
block|}
struct|;
DECL|struct|QGLFontTexture
struct|struct
name|QGLFontTexture
block|{
DECL|member|x_offset
name|int
name|x_offset
decl_stmt|;
comment|// glyph offset within the
DECL|member|y_offset
name|int
name|y_offset
decl_stmt|;
DECL|member|texture
name|GLuint
name|texture
decl_stmt|;
DECL|member|width
name|int
name|width
decl_stmt|;
DECL|member|height
name|int
name|height
decl_stmt|;
block|}
struct|;
DECL|typedef|QGLGlyphHash
typedef|typedef
name|QHash
argument_list|<
name|glyph_t
argument_list|,
name|QGLGlyphCoord
modifier|*
argument_list|>
name|QGLGlyphHash
typedef|;
DECL|typedef|QGLFontGlyphHash
typedef|typedef
name|QHash
argument_list|<
name|QFontEngine
modifier|*
argument_list|,
name|QGLGlyphHash
modifier|*
argument_list|>
name|QGLFontGlyphHash
typedef|;
DECL|typedef|QGLFontTexHash
typedef|typedef
name|QHash
argument_list|<
name|quint64
argument_list|,
name|QGLFontTexture
modifier|*
argument_list|>
name|QGLFontTexHash
typedef|;
DECL|typedef|QGLContextHash
typedef|typedef
name|QHash
argument_list|<
specifier|const
name|QGLContext
modifier|*
argument_list|,
name|QGLFontGlyphHash
modifier|*
argument_list|>
name|QGLContextHash
typedef|;
DECL|function|qt_delete_glyph_hash
specifier|static
specifier|inline
name|void
name|qt_delete_glyph_hash
parameter_list|(
name|QGLGlyphHash
modifier|*
name|hash
parameter_list|)
block|{
name|qDeleteAll
argument_list|(
operator|*
name|hash
argument_list|)
expr_stmt|;
operator|delete
name|hash
expr_stmt|;
block|}
DECL|class|QGLGlyphCache
class|class
name|QGLGlyphCache
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|QGLGlyphCache
name|QGLGlyphCache
parameter_list|()
member_init_list|:
name|QObject
argument_list|(
literal|0
argument_list|)
block|{
name|current_cache
operator|=
literal|0
expr_stmt|;
block|}
name|~
name|QGLGlyphCache
argument_list|()
expr_stmt|;
name|QGLGlyphCoord
modifier|*
name|lookup
argument_list|(
name|QFontEngine
operator|*
argument_list|,
name|glyph_t
argument_list|)
decl_stmt|;
name|void
name|cacheGlyphs
argument_list|(
name|QGLContext
operator|*
argument_list|,
name|QFontEngine
operator|*
argument_list|,
name|glyph_t
operator|*
name|glyphs
argument_list|,
name|int
name|numGlyphs
argument_list|)
decl_stmt|;
name|void
name|cleanCache
parameter_list|()
function_decl|;
name|void
name|allocTexture
argument_list|(
name|int
name|width
argument_list|,
name|int
name|height
argument_list|,
name|GLuint
name|texture
argument_list|)
decl_stmt|;
public|public
name|slots
public|:
name|void
name|cleanupContext
argument_list|(
specifier|const
name|QGLContext
operator|*
argument_list|)
decl_stmt|;
name|void
name|fontEngineDestroyed
argument_list|(
name|QObject
operator|*
argument_list|)
decl_stmt|;
name|void
name|widgetDestroyed
argument_list|(
name|QObject
operator|*
argument_list|)
decl_stmt|;
protected|protected:
DECL|member|current_cache
name|QGLGlyphHash
modifier|*
name|current_cache
decl_stmt|;
DECL|member|qt_font_textures
name|QGLFontTexHash
name|qt_font_textures
decl_stmt|;
DECL|member|qt_context_cache
name|QGLContextHash
name|qt_context_cache
decl_stmt|;
block|}
class|;
DECL|function|~QGLGlyphCache
name|QGLGlyphCache
operator|::
name|~
name|QGLGlyphCache
parameter_list|()
block|{
comment|//     qDebug()<< "cleaning out the QGLGlyphCache";
name|cleanCache
argument_list|()
expr_stmt|;
block|}
DECL|function|fontEngineDestroyed
name|void
name|QGLGlyphCache
operator|::
name|fontEngineDestroyed
parameter_list|(
name|QObject
modifier|*
name|o
parameter_list|)
block|{
comment|//     qDebug()<< "fontEngineDestroyed()";
name|QFontEngine
modifier|*
name|fe
init|=
cast|static_cast
argument_list|<
name|QFontEngine
operator|*
argument_list|>
argument_list|(
name|o
argument_list|)
decl_stmt|;
comment|// safe, since only the type is used
name|QList
argument_list|<
specifier|const
name|QGLContext
modifier|*
argument_list|>
name|keys
init|=
name|qt_context_cache
operator|.
name|keys
argument_list|()
decl_stmt|;
specifier|const
name|QGLContext
modifier|*
name|ctx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keys
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QGLFontGlyphHash
modifier|*
name|font_cache
init|=
name|qt_context_cache
operator|.
name|value
argument_list|(
name|keys
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|font_cache
operator|->
name|find
argument_list|(
name|fe
argument_list|)
operator|!=
name|font_cache
operator|->
name|end
argument_list|()
condition|)
block|{
name|ctx
operator|=
name|keys
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|QGLGlyphHash
modifier|*
name|cache
init|=
name|font_cache
operator|->
name|take
argument_list|(
name|fe
argument_list|)
decl_stmt|;
name|qt_delete_glyph_hash
argument_list|(
name|cache
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|quint64
name|font_key
init|=
operator|(
cast|reinterpret_cast
argument_list|<
name|quint64
argument_list|>
argument_list|(
name|ctx
argument_list|)
operator|<<
literal|32
operator|)
operator||
cast|reinterpret_cast
argument_list|<
name|quint64
argument_list|>
argument_list|(
name|fe
argument_list|)
decl_stmt|;
name|QGLFontTexture
modifier|*
name|tex
init|=
name|qt_font_textures
operator|.
name|take
argument_list|(
name|font_key
argument_list|)
decl_stmt|;
if|if
condition|(
name|tex
condition|)
block|{
ifdef|#
directive|ifdef
name|Q_WS_MAC
if|if
condition|(
ifndef|#
directive|ifndef
name|QT_MAC_USE_COCOA
name|aglGetCurrentContext
argument_list|()
operator|!=
literal|0
else|#
directive|else
name|qt_current_nsopengl_context
argument_list|()
operator|!=
literal|0
endif|#
directive|endif
condition|)
endif|#
directive|endif
name|glDeleteTextures
argument_list|(
literal|1
argument_list|,
operator|&
name|tex
operator|->
name|texture
argument_list|)
expr_stmt|;
operator|delete
name|tex
expr_stmt|;
block|}
block|}
DECL|function|widgetDestroyed
name|void
name|QGLGlyphCache
operator|::
name|widgetDestroyed
parameter_list|(
name|QObject
modifier|*
parameter_list|)
block|{
comment|//     qDebug()<< "widget destroyed";
name|cleanCache
argument_list|()
expr_stmt|;
comment|// ###
block|}
DECL|function|cleanupContext
name|void
name|QGLGlyphCache
operator|::
name|cleanupContext
parameter_list|(
specifier|const
name|QGLContext
modifier|*
name|ctx
parameter_list|)
block|{
comment|//     qDebug()<< "==> cleaning for: "<< hex<< ctx;
name|QGLFontGlyphHash
modifier|*
name|font_cache
init|=
name|qt_context_cache
operator|.
name|take
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
if|if
condition|(
name|font_cache
condition|)
block|{
name|QList
argument_list|<
name|QFontEngine
modifier|*
argument_list|>
name|keys
init|=
name|font_cache
operator|->
name|keys
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keys
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QFontEngine
modifier|*
name|fe
init|=
name|keys
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|qt_delete_glyph_hash
argument_list|(
name|font_cache
operator|->
name|take
argument_list|(
name|fe
argument_list|)
argument_list|)
expr_stmt|;
name|quint64
name|font_key
init|=
operator|(
cast|reinterpret_cast
argument_list|<
name|quint64
argument_list|>
argument_list|(
name|ctx
argument_list|)
operator|<<
literal|32
operator|)
operator||
cast|reinterpret_cast
argument_list|<
name|quint64
argument_list|>
argument_list|(
name|fe
argument_list|)
decl_stmt|;
name|QGLFontTexture
modifier|*
name|font_tex
init|=
name|qt_font_textures
operator|.
name|take
argument_list|(
name|font_key
argument_list|)
decl_stmt|;
if|if
condition|(
name|font_tex
condition|)
block|{
ifdef|#
directive|ifdef
name|Q_WS_MAC
if|if
condition|(
ifndef|#
directive|ifndef
name|QT_MAC_USE_COCOA
name|aglGetCurrentContext
argument_list|()
operator|==
literal|0
else|#
directive|else
name|qt_current_nsopengl_context
argument_list|()
operator|!=
literal|0
endif|#
directive|endif
condition|)
endif|#
directive|endif
name|glDeleteTextures
argument_list|(
literal|1
argument_list|,
operator|&
name|font_tex
operator|->
name|texture
argument_list|)
expr_stmt|;
operator|delete
name|font_tex
expr_stmt|;
block|}
block|}
operator|delete
name|font_cache
expr_stmt|;
block|}
comment|//    qDebug()<< "<=== done cleaning, num tex:"<< qt_font_textures.size()<< "num ctx:"<< qt_context_cache.size();
block|}
DECL|function|cleanCache
name|void
name|QGLGlyphCache
operator|::
name|cleanCache
parameter_list|()
block|{
name|QGLFontTexHash
operator|::
name|const_iterator
name|it
init|=
name|qt_font_textures
operator|.
name|constBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|QGLContext
operator|::
name|currentContext
argument_list|()
condition|)
block|{
while|while
condition|(
name|it
operator|!=
name|qt_font_textures
operator|.
name|constEnd
argument_list|()
condition|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_MAC
argument_list|)
operator|&&
name|defined
argument_list|(
name|QT_MAC_USE_COCOA
argument_list|)
if|if
condition|(
name|qt_current_nsopengl_context
argument_list|()
operator|==
literal|0
condition|)
break|break;
endif|#
directive|endif
name|glDeleteTextures
argument_list|(
literal|1
argument_list|,
operator|&
name|it
operator|.
name|value
argument_list|()
operator|->
name|texture
argument_list|)
expr_stmt|;
operator|++
name|it
expr_stmt|;
block|}
block|}
name|qDeleteAll
argument_list|(
name|qt_font_textures
argument_list|)
expr_stmt|;
name|qt_font_textures
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QList
argument_list|<
specifier|const
name|QGLContext
modifier|*
argument_list|>
name|keys
init|=
name|qt_context_cache
operator|.
name|keys
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keys
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QGLFontGlyphHash
modifier|*
name|font_cache
init|=
name|qt_context_cache
operator|.
name|value
argument_list|(
name|keys
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|QGLFontGlyphHash
operator|::
name|Iterator
name|it
init|=
name|font_cache
operator|->
name|begin
argument_list|()
decl_stmt|;
for|for
control|(
init|;
name|it
operator|!=
name|font_cache
operator|->
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
name|qt_delete_glyph_hash
argument_list|(
name|it
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|font_cache
operator|->
name|clear
argument_list|()
expr_stmt|;
block|}
name|qDeleteAll
argument_list|(
name|qt_context_cache
argument_list|)
expr_stmt|;
name|qt_context_cache
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|function|allocTexture
name|void
name|QGLGlyphCache
operator|::
name|allocTexture
parameter_list|(
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|,
name|GLuint
name|texture
parameter_list|)
block|{
name|uchar
modifier|*
name|tex_data
init|=
operator|(
name|uchar
operator|*
operator|)
name|malloc
argument_list|(
name|width
operator|*
name|height
operator|*
literal|2
argument_list|)
decl_stmt|;
name|memset
argument_list|(
name|tex_data
argument_list|,
literal|0
argument_list|,
name|width
operator|*
name|height
operator|*
literal|2
argument_list|)
expr_stmt|;
name|glBindTexture
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
name|texture
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_OPENGL_ES
name|glTexImage2D
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
literal|0
argument_list|,
name|GL_LUMINANCE8_ALPHA8
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
literal|0
argument_list|,
name|GL_LUMINANCE_ALPHA
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|tex_data
argument_list|)
expr_stmt|;
else|#
directive|else
name|glTexImage2D
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
literal|0
argument_list|,
name|GL_LUMINANCE_ALPHA
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
literal|0
argument_list|,
name|GL_LUMINANCE_ALPHA
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|tex_data
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|free
argument_list|(
name|tex_data
argument_list|)
expr_stmt|;
block|}
if|#
directive|if
literal|0
comment|// useful for debugging the glyph cache
block|static QImage getCurrentTexture(const QColor&color, QGLFontTexture *font_tex) {     ushort *old_tex_data = (ushort *) malloc(font_tex->width*font_tex->height*2);     glGetTexImage(GL_TEXTURE_2D, 0, GL_LUMINANCE_ALPHA, GL_UNSIGNED_BYTE, old_tex_data);     QImage im(font_tex->width, font_tex->height, QImage::Format_ARGB32);     for (int y=0; y<font_tex->height; ++y) {         for (int x=0; x<font_tex->width; ++x) {             im.setPixel(x, y, ((*(old_tex_data+x+y*font_tex->width))<< 24) | (0x00ffffff& color.rgb()));         }     }     delete old_tex_data;     return im; }
endif|#
directive|endif
DECL|function|cacheGlyphs
name|void
name|QGLGlyphCache
operator|::
name|cacheGlyphs
parameter_list|(
name|QGLContext
modifier|*
name|context
parameter_list|,
name|QFontEngine
modifier|*
name|fontEngine
parameter_list|,
name|glyph_t
modifier|*
name|glyphs
parameter_list|,
name|int
name|numGlyphs
parameter_list|)
block|{
name|QGLContextHash
operator|::
name|const_iterator
name|dev_it
init|=
name|qt_context_cache
operator|.
name|constFind
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|QGLFontGlyphHash
modifier|*
name|font_cache
init|=
literal|0
decl_stmt|;
specifier|const
name|QGLContext
modifier|*
name|context_key
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|dev_it
operator|==
name|qt_context_cache
operator|.
name|constEnd
argument_list|()
condition|)
block|{
comment|// check for shared contexts
name|QList
argument_list|<
specifier|const
name|QGLContext
modifier|*
argument_list|>
name|contexts
init|=
name|qt_context_cache
operator|.
name|keys
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|contexts
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QGLContext
modifier|*
name|ctx
init|=
name|contexts
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|ctx
operator|!=
name|context
operator|&&
name|QGLContext
operator|::
name|areSharing
argument_list|(
name|context
argument_list|,
name|ctx
argument_list|)
condition|)
block|{
name|context_key
operator|=
name|ctx
expr_stmt|;
name|dev_it
operator|=
name|qt_context_cache
operator|.
name|constFind
argument_list|(
name|context_key
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|dev_it
operator|==
name|qt_context_cache
operator|.
name|constEnd
argument_list|()
condition|)
block|{
comment|// no shared contexts either - create a new entry
name|font_cache
operator|=
operator|new
name|QGLFontGlyphHash
expr_stmt|;
comment|//         qDebug()<< "new context"<< context<< font_cache;
name|qt_context_cache
operator|.
name|insert
argument_list|(
name|context
argument_list|,
name|font_cache
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|->
name|isValid
argument_list|()
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|device
argument_list|()
operator|&&
name|context
operator|->
name|device
argument_list|()
operator|->
name|devType
argument_list|()
operator|==
name|QInternal
operator|::
name|Widget
condition|)
block|{
name|QWidget
modifier|*
name|widget
init|=
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|context
operator|->
name|device
argument_list|()
argument_list|)
decl_stmt|;
name|connect
argument_list|(
name|widget
argument_list|,
name|SIGNAL
argument_list|(
name|destroyed
argument_list|(
name|QObject
operator|*
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|widgetDestroyed
argument_list|(
name|QObject
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|connect
argument_list|(
name|QGLSignalProxy
operator|::
name|instance
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|aboutToDestroyContext
argument_list|(
specifier|const
name|QGLContext
operator|*
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|cleanupContext
argument_list|(
specifier|const
name|QGLContext
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|font_cache
operator|=
name|dev_it
operator|.
name|value
argument_list|()
expr_stmt|;
block|}
name|Q_ASSERT
argument_list|(
name|font_cache
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QGLFontGlyphHash
operator|::
name|const_iterator
name|cache_it
init|=
name|font_cache
operator|->
name|constFind
argument_list|(
name|fontEngine
argument_list|)
decl_stmt|;
name|QGLGlyphHash
modifier|*
name|cache
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|cache_it
operator|==
name|font_cache
operator|->
name|constEnd
argument_list|()
condition|)
block|{
name|cache
operator|=
operator|new
name|QGLGlyphHash
expr_stmt|;
name|font_cache
operator|->
name|insert
argument_list|(
name|fontEngine
argument_list|,
name|cache
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|fontEngine
argument_list|,
name|SIGNAL
argument_list|(
name|destroyed
argument_list|(
name|QObject
operator|*
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|fontEngineDestroyed
argument_list|(
name|QObject
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cache
operator|=
name|cache_it
operator|.
name|value
argument_list|()
expr_stmt|;
block|}
name|current_cache
operator|=
name|cache
expr_stmt|;
name|quint64
name|font_key
init|=
operator|(
cast|reinterpret_cast
argument_list|<
name|quint64
argument_list|>
argument_list|(
name|context_key
condition|?
name|context_key
else|:
name|context
argument_list|)
operator|<<
literal|32
operator|)
operator||
cast|reinterpret_cast
argument_list|<
name|quint64
argument_list|>
argument_list|(
name|fontEngine
argument_list|)
decl_stmt|;
name|QGLFontTexHash
operator|::
name|const_iterator
name|it
init|=
name|qt_font_textures
operator|.
name|constFind
argument_list|(
name|font_key
argument_list|)
decl_stmt|;
name|QGLFontTexture
modifier|*
name|font_tex
decl_stmt|;
if|if
condition|(
name|it
operator|==
name|qt_font_textures
operator|.
name|constEnd
argument_list|()
condition|)
block|{
name|GLuint
name|font_texture
decl_stmt|;
name|glGenTextures
argument_list|(
literal|1
argument_list|,
operator|&
name|font_texture
argument_list|)
expr_stmt|;
name|GLint
name|tex_height
init|=
name|qt_next_power_of_two
argument_list|(
name|qRound
argument_list|(
name|fontEngine
operator|->
name|ascent
argument_list|()
operator|.
name|toReal
argument_list|()
operator|+
name|fontEngine
operator|->
name|descent
argument_list|()
operator|.
name|toReal
argument_list|()
argument_list|)
operator|+
literal|2
argument_list|)
decl_stmt|;
name|GLint
name|tex_width
init|=
name|qt_next_power_of_two
argument_list|(
name|tex_height
operator|*
literal|30
argument_list|)
decl_stmt|;
comment|// ###
name|GLint
name|max_tex_size
decl_stmt|;
name|glGetIntegerv
argument_list|(
name|GL_MAX_TEXTURE_SIZE
argument_list|,
operator|&
name|max_tex_size
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|max_tex_size
operator|>
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|tex_width
operator|>
name|max_tex_size
condition|)
name|tex_width
operator|=
name|max_tex_size
expr_stmt|;
name|allocTexture
argument_list|(
name|tex_width
argument_list|,
name|tex_height
argument_list|,
name|font_texture
argument_list|)
expr_stmt|;
name|font_tex
operator|=
operator|new
name|QGLFontTexture
expr_stmt|;
name|font_tex
operator|->
name|texture
operator|=
name|font_texture
expr_stmt|;
name|font_tex
operator|->
name|x_offset
operator|=
name|x_margin
expr_stmt|;
name|font_tex
operator|->
name|y_offset
operator|=
name|y_margin
expr_stmt|;
name|font_tex
operator|->
name|width
operator|=
name|tex_width
expr_stmt|;
name|font_tex
operator|->
name|height
operator|=
name|tex_height
expr_stmt|;
comment|//         qDebug()<< "new font tex - width:"<< tex_width<< "height:"<< tex_height
comment|//<< hex<< "tex id:"<< font_tex->texture<< "key:"<< font_key<< "num cached:"<< qt_font_textures.size();
name|qt_font_textures
operator|.
name|insert
argument_list|(
name|font_key
argument_list|,
name|font_tex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|font_tex
operator|=
name|it
operator|.
name|value
argument_list|()
expr_stmt|;
name|glBindTexture
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
name|font_tex
operator|->
name|texture
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numGlyphs
condition|;
operator|++
name|i
control|)
block|{
name|QGLGlyphHash
operator|::
name|const_iterator
name|it
init|=
name|cache
operator|->
name|constFind
argument_list|(
name|glyphs
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|==
name|cache
operator|->
name|constEnd
argument_list|()
condition|)
block|{
comment|// render new glyph and put it in the cache
name|glyph_metrics_t
name|metrics
init|=
name|fontEngine
operator|->
name|boundingBox
argument_list|(
name|glyphs
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|int
name|glyph_width
init|=
name|qRound
argument_list|(
name|metrics
operator|.
name|width
operator|.
name|toReal
argument_list|()
argument_list|)
operator|+
literal|2
decl_stmt|;
name|int
name|glyph_height
init|=
name|qRound
argument_list|(
name|fontEngine
operator|->
name|ascent
argument_list|()
operator|.
name|toReal
argument_list|()
operator|+
name|fontEngine
operator|->
name|descent
argument_list|()
operator|.
name|toReal
argument_list|()
argument_list|)
operator|+
literal|2
decl_stmt|;
if|if
condition|(
name|font_tex
operator|->
name|x_offset
operator|+
name|glyph_width
operator|+
name|x_margin
operator|>
name|font_tex
operator|->
name|width
condition|)
block|{
name|int
name|strip_height
init|=
name|qt_next_power_of_two
argument_list|(
name|qRound
argument_list|(
name|fontEngine
operator|->
name|ascent
argument_list|()
operator|.
name|toReal
argument_list|()
operator|+
name|fontEngine
operator|->
name|descent
argument_list|()
operator|.
name|toReal
argument_list|()
argument_list|)
operator|+
literal|2
argument_list|)
decl_stmt|;
name|font_tex
operator|->
name|x_offset
operator|=
name|x_margin
expr_stmt|;
name|font_tex
operator|->
name|y_offset
operator|+=
name|strip_height
expr_stmt|;
if|if
condition|(
name|font_tex
operator|->
name|y_offset
operator|>=
name|font_tex
operator|->
name|height
condition|)
block|{
comment|// get hold of the old font texture
name|uchar
modifier|*
name|old_tex_data
init|=
operator|(
name|uchar
operator|*
operator|)
name|malloc
argument_list|(
name|font_tex
operator|->
name|width
operator|*
name|font_tex
operator|->
name|height
operator|*
literal|2
argument_list|)
decl_stmt|;
name|int
name|old_tex_height
init|=
name|font_tex
operator|->
name|height
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_OPENGL_ES
name|glGetTexImage
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
literal|0
argument_list|,
name|GL_LUMINANCE_ALPHA
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|old_tex_data
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// realloc a larger texture
name|glDeleteTextures
argument_list|(
literal|1
argument_list|,
operator|&
name|font_tex
operator|->
name|texture
argument_list|)
expr_stmt|;
name|glGenTextures
argument_list|(
literal|1
argument_list|,
operator|&
name|font_tex
operator|->
name|texture
argument_list|)
expr_stmt|;
name|font_tex
operator|->
name|height
operator|=
name|qt_next_power_of_two
argument_list|(
name|font_tex
operator|->
name|height
operator|+
name|strip_height
argument_list|)
expr_stmt|;
name|allocTexture
argument_list|(
name|font_tex
operator|->
name|width
argument_list|,
name|font_tex
operator|->
name|height
argument_list|,
name|font_tex
operator|->
name|texture
argument_list|)
expr_stmt|;
comment|// write back the old texture data
name|glTexSubImage2D
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|font_tex
operator|->
name|width
argument_list|,
name|old_tex_height
argument_list|,
name|GL_LUMINANCE_ALPHA
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|old_tex_data
argument_list|)
expr_stmt|;
name|free
argument_list|(
name|old_tex_data
argument_list|)
expr_stmt|;
comment|// update the texture coords and the y offset for the existing glyphs in
comment|// the cache, because of the texture size change
name|QGLGlyphHash
operator|::
name|iterator
name|it
init|=
name|cache
operator|->
name|begin
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|cache
operator|->
name|end
argument_list|()
condition|)
block|{
name|it
operator|.
name|value
argument_list|()
operator|->
name|height
operator|=
operator|(
name|it
operator|.
name|value
argument_list|()
operator|->
name|height
operator|*
name|old_tex_height
operator|)
operator|/
name|font_tex
operator|->
name|height
expr_stmt|;
name|it
operator|.
name|value
argument_list|()
operator|->
name|y
operator|=
operator|(
name|it
operator|.
name|value
argument_list|()
operator|->
name|y
operator|*
name|old_tex_height
operator|)
operator|/
name|font_tex
operator|->
name|height
expr_stmt|;
operator|++
name|it
expr_stmt|;
block|}
block|}
block|}
name|QImage
name|glyph_im
argument_list|(
name|fontEngine
operator|->
name|alphaMapForGlyph
argument_list|(
name|glyphs
index|[
name|i
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|glyph_width
operator|=
name|glyph_im
operator|.
name|width
argument_list|()
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|glyph_width
operator|>=
literal|0
argument_list|)
expr_stmt|;
comment|// pad the glyph width to an even number
if|if
condition|(
name|glyph_width
operator|%
literal|2
operator|!=
literal|0
condition|)
operator|++
name|glyph_width
expr_stmt|;
name|QGLGlyphCoord
modifier|*
name|qgl_glyph
init|=
operator|new
name|QGLGlyphCoord
decl_stmt|;
name|qgl_glyph
operator|->
name|x
operator|=
name|qreal
argument_list|(
name|font_tex
operator|->
name|x_offset
argument_list|)
operator|/
name|font_tex
operator|->
name|width
expr_stmt|;
name|qgl_glyph
operator|->
name|y
operator|=
name|qreal
argument_list|(
name|font_tex
operator|->
name|y_offset
argument_list|)
operator|/
name|font_tex
operator|->
name|height
expr_stmt|;
name|qgl_glyph
operator|->
name|width
operator|=
name|qreal
argument_list|(
name|glyph_width
argument_list|)
operator|/
name|font_tex
operator|->
name|width
expr_stmt|;
name|qgl_glyph
operator|->
name|height
operator|=
name|qreal
argument_list|(
name|glyph_height
argument_list|)
operator|/
name|font_tex
operator|->
name|height
expr_stmt|;
name|qgl_glyph
operator|->
name|log_width
operator|=
name|qreal
argument_list|(
name|glyph_width
argument_list|)
expr_stmt|;
name|qgl_glyph
operator|->
name|log_height
operator|=
name|qgl_glyph
operator|->
name|height
operator|*
name|font_tex
operator|->
name|height
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_MAC
name|qgl_glyph
operator|->
name|x_offset
operator|=
operator|-
name|metrics
operator|.
name|x
operator|+
literal|1
expr_stmt|;
name|qgl_glyph
operator|->
name|y_offset
operator|=
name|metrics
operator|.
name|y
operator|-
literal|2
expr_stmt|;
else|#
directive|else
name|qgl_glyph
operator|->
name|x_offset
operator|=
operator|-
name|metrics
operator|.
name|x
expr_stmt|;
name|qgl_glyph
operator|->
name|y_offset
operator|=
name|metrics
operator|.
name|y
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|glyph_im
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|int
name|idx
init|=
literal|0
decl_stmt|;
name|uchar
modifier|*
name|tex_data
init|=
operator|(
name|uchar
operator|*
operator|)
name|malloc
argument_list|(
name|glyph_width
operator|*
name|glyph_im
operator|.
name|height
argument_list|()
operator|*
literal|2
argument_list|)
decl_stmt|;
name|memset
argument_list|(
name|tex_data
argument_list|,
literal|0
argument_list|,
name|glyph_width
operator|*
name|glyph_im
operator|.
name|height
argument_list|()
operator|*
literal|2
argument_list|)
expr_stmt|;
name|bool
name|is8BitGray
init|=
literal|false
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_QPA
if|if
condition|(
name|glyph_im
operator|.
name|format
argument_list|()
operator|==
name|QImage
operator|::
name|Format_Indexed8
condition|)
block|{
name|is8BitGray
operator|=
literal|true
expr_stmt|;
block|}
endif|#
directive|endif
name|glyph_im
operator|=
name|glyph_im
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_Indexed8
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|glyph_im
operator|.
name|height
argument_list|()
condition|;
operator|++
name|y
control|)
block|{
name|uchar
modifier|*
name|s
init|=
operator|(
name|uchar
operator|*
operator|)
name|glyph_im
operator|.
name|scanLine
argument_list|(
name|y
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|glyph_im
operator|.
name|width
argument_list|()
condition|;
operator|++
name|x
control|)
block|{
name|uchar
name|alpha
init|=
name|is8BitGray
condition|?
operator|*
name|s
else|:
name|qAlpha
argument_list|(
name|glyph_im
operator|.
name|color
argument_list|(
operator|*
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|tex_data
index|[
name|idx
index|]
operator|=
name|alpha
expr_stmt|;
name|tex_data
index|[
name|idx
operator|+
literal|1
index|]
operator|=
name|alpha
expr_stmt|;
operator|++
name|s
expr_stmt|;
name|idx
operator|+=
literal|2
expr_stmt|;
block|}
if|if
condition|(
name|glyph_im
operator|.
name|width
argument_list|()
operator|%
literal|2
operator|!=
literal|0
condition|)
name|idx
operator|+=
literal|2
expr_stmt|;
block|}
name|glTexSubImage2D
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
literal|0
argument_list|,
name|font_tex
operator|->
name|x_offset
argument_list|,
name|font_tex
operator|->
name|y_offset
argument_list|,
name|glyph_width
argument_list|,
name|glyph_im
operator|.
name|height
argument_list|()
argument_list|,
name|GL_LUMINANCE_ALPHA
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|tex_data
argument_list|)
expr_stmt|;
name|free
argument_list|(
name|tex_data
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|font_tex
operator|->
name|x_offset
operator|+
name|glyph_width
operator|+
name|x_margin
operator|>
name|font_tex
operator|->
name|width
condition|)
block|{
name|font_tex
operator|->
name|x_offset
operator|=
name|x_margin
expr_stmt|;
name|font_tex
operator|->
name|y_offset
operator|+=
name|glyph_height
operator|+
name|y_margin
expr_stmt|;
block|}
else|else
block|{
name|font_tex
operator|->
name|x_offset
operator|+=
name|glyph_width
operator|+
name|x_margin
expr_stmt|;
block|}
name|cache
operator|->
name|insert
argument_list|(
name|glyphs
index|[
name|i
index|]
argument_list|,
name|qgl_glyph
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|function|lookup
name|QGLGlyphCoord
modifier|*
name|QGLGlyphCache
operator|::
name|lookup
parameter_list|(
name|QFontEngine
modifier|*
parameter_list|,
name|glyph_t
name|g
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|current_cache
operator|!=
literal|0
argument_list|)
expr_stmt|;
comment|// ### careful here
name|QGLGlyphHash
operator|::
name|const_iterator
name|it
init|=
name|current_cache
operator|->
name|constFind
argument_list|(
name|g
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|==
name|current_cache
operator|->
name|constEnd
argument_list|()
condition|)
return|return
literal|0
return|;
else|else
return|return
name|it
operator|.
name|value
argument_list|()
return|;
block|}
name|Q_GLOBAL_STATIC
argument_list|(
argument|QGLGlyphCache
argument_list|,
argument|qt_glyph_cache
argument_list|)
comment|//
comment|// assumption: the context that this is called for has to be the
comment|// current context
comment|//
DECL|function|qgl_cleanup_glyph_cache
name|void
name|qgl_cleanup_glyph_cache
parameter_list|(
name|QGLContext
modifier|*
name|ctx
parameter_list|)
block|{
name|qt_glyph_cache
argument_list|()
operator|->
name|cleanupContext
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
DECL|function|drawStaticTextItem
name|void
name|QOpenGLPaintEngine
operator|::
name|drawStaticTextItem
parameter_list|(
name|QStaticTextItem
modifier|*
name|textItem
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QOpenGLPaintEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|flushDrawQueue
argument_list|()
expr_stmt|;
comment|// make sure the glyphs we want to draw are in the cache
name|qt_glyph_cache
argument_list|()
operator|->
name|cacheGlyphs
argument_list|(
name|d
operator|->
name|device
operator|->
name|context
argument_list|()
argument_list|,
name|textItem
operator|->
name|fontEngine
argument_list|()
argument_list|,
name|textItem
operator|->
name|glyphs
argument_list|,
name|textItem
operator|->
name|numGlyphs
argument_list|)
expr_stmt|;
name|d
operator|->
name|setGradientOps
argument_list|(
name|Qt
operator|::
name|SolidPattern
argument_list|,
name|QRectF
argument_list|()
argument_list|)
expr_stmt|;
comment|// turns off gradient ops
name|qt_glColor4ubv
argument_list|(
name|d
operator|->
name|pen_color
argument_list|)
expr_stmt|;
name|glEnable
argument_list|(
name|GL_TEXTURE_2D
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_QWS
comment|// XXX: it is necessary to disable alpha writes on GLES/embedded because we don't want
comment|// text rendering to update the alpha in the window surface.
comment|// XXX: This may not be needed as this behavior does seem to be caused by driver bug
name|glColorMask
argument_list|(
name|GL_TRUE
argument_list|,
name|GL_TRUE
argument_list|,
name|GL_TRUE
argument_list|,
name|GL_FALSE
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// do the actual drawing
name|GLfloat
name|vertexArray
index|[
literal|4
operator|*
literal|2
index|]
decl_stmt|;
name|GLfloat
name|texCoordArray
index|[
literal|4
operator|*
literal|2
index|]
decl_stmt|;
name|glVertexPointer
argument_list|(
literal|2
argument_list|,
name|GL_FLOAT
argument_list|,
literal|0
argument_list|,
name|vertexArray
argument_list|)
expr_stmt|;
name|glTexCoordPointer
argument_list|(
literal|2
argument_list|,
name|GL_FLOAT
argument_list|,
literal|0
argument_list|,
name|texCoordArray
argument_list|)
expr_stmt|;
name|glEnableClientState
argument_list|(
name|GL_VERTEX_ARRAY
argument_list|)
expr_stmt|;
name|glEnableClientState
argument_list|(
name|GL_TEXTURE_COORD_ARRAY
argument_list|)
expr_stmt|;
name|bool
name|antialias
init|=
operator|!
operator|(
name|textItem
operator|->
name|fontEngine
argument_list|()
operator|->
name|fontDef
operator|.
name|styleStrategy
operator|&
name|QFont
operator|::
name|NoAntialias
operator|)
operator|&&
operator|(
name|d
operator|->
name|matrix
operator|.
name|type
argument_list|()
operator|>
name|QTransform
operator|::
name|TxTranslate
operator|)
decl_stmt|;
name|glTexParameterf
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
name|GL_TEXTURE_MIN_FILTER
argument_list|,
name|antialias
condition|?
name|GL_LINEAR
else|:
name|GL_NEAREST
argument_list|)
expr_stmt|;
name|glTexParameterf
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
name|GL_TEXTURE_MAG_FILTER
argument_list|,
name|antialias
condition|?
name|GL_LINEAR
else|:
name|GL_NEAREST
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|textItem
operator|->
name|numGlyphs
condition|;
operator|++
name|i
control|)
block|{
name|QGLGlyphCoord
modifier|*
name|g
init|=
name|qt_glyph_cache
argument_list|()
operator|->
name|lookup
argument_list|(
name|textItem
operator|->
name|fontEngine
argument_list|()
argument_list|,
name|textItem
operator|->
name|glyphs
index|[
name|i
index|]
argument_list|)
decl_stmt|;
comment|// we don't cache glyphs with no width/height
if|if
condition|(
operator|!
name|g
condition|)
continue|continue;
name|qreal
name|x1
decl_stmt|,
name|x2
decl_stmt|,
name|y1
decl_stmt|,
name|y2
decl_stmt|;
name|x1
operator|=
name|g
operator|->
name|x
expr_stmt|;
name|y1
operator|=
name|g
operator|->
name|y
expr_stmt|;
name|x2
operator|=
name|x1
operator|+
name|g
operator|->
name|width
expr_stmt|;
name|y2
operator|=
name|y1
operator|+
name|g
operator|->
name|height
expr_stmt|;
name|QPointF
name|logical_pos
argument_list|(
operator|(
name|textItem
operator|->
name|glyphPositions
index|[
name|i
index|]
operator|.
name|x
operator|-
name|g
operator|->
name|x_offset
operator|)
operator|.
name|toReal
argument_list|()
argument_list|,
operator|(
name|textItem
operator|->
name|glyphPositions
index|[
name|i
index|]
operator|.
name|y
operator|+
name|g
operator|->
name|y_offset
operator|)
operator|.
name|toReal
argument_list|()
argument_list|)
decl_stmt|;
name|qt_add_rect_to_array
argument_list|(
name|QRectF
argument_list|(
name|logical_pos
argument_list|,
name|QSizeF
argument_list|(
name|g
operator|->
name|log_width
argument_list|,
name|g
operator|->
name|log_height
argument_list|)
argument_list|)
argument_list|,
name|vertexArray
argument_list|)
expr_stmt|;
name|qt_add_texcoords_to_array
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|,
name|texCoordArray
argument_list|)
expr_stmt|;
name|glDrawArrays
argument_list|(
name|GL_TRIANGLE_FAN
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
name|glDisableClientState
argument_list|(
name|GL_TEXTURE_COORD_ARRAY
argument_list|)
expr_stmt|;
name|glDisableClientState
argument_list|(
name|GL_VERTEX_ARRAY
argument_list|)
expr_stmt|;
name|glDisable
argument_list|(
name|GL_TEXTURE_2D
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_QWS
comment|// XXX: This may not be needed as this behavior does seem to be caused by driver bug
name|glColorMask
argument_list|(
name|GL_TRUE
argument_list|,
name|GL_TRUE
argument_list|,
name|GL_TRUE
argument_list|,
name|GL_TRUE
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
DECL|function|drawTextItem
name|void
name|QOpenGLPaintEngine
operator|::
name|drawTextItem
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|p
parameter_list|,
specifier|const
name|QTextItem
modifier|&
name|textItem
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QOpenGLPaintEngine
argument_list|)
expr_stmt|;
specifier|const
name|QTextItemInt
modifier|&
name|ti
init|=
cast|static_cast
argument_list|<
specifier|const
name|QTextItemInt
operator|&
argument_list|>
argument_list|(
name|textItem
argument_list|)
decl_stmt|;
comment|// fall back to drawing a polygon if the scale factor is large, or
comment|// we use a gradient pen
if|if
condition|(
operator|(
name|d
operator|->
name|matrix
operator|.
name|det
argument_list|()
operator|>
literal|1
operator|)
operator|||
operator|(
name|d
operator|->
name|pen_brush_style
operator|>=
name|Qt
operator|::
name|LinearGradientPattern
operator|&&
name|d
operator|->
name|pen_brush_style
operator|<=
name|Qt
operator|::
name|ConicalGradientPattern
operator|)
condition|)
block|{
name|QPaintEngine
operator|::
name|drawTextItem
argument_list|(
name|p
argument_list|,
name|textItem
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// add the glyphs used to the glyph texture cache
name|QVarLengthArray
argument_list|<
name|QFixedPoint
argument_list|>
name|positions
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|glyph_t
argument_list|>
name|glyphs
decl_stmt|;
name|QTransform
name|matrix
init|=
name|QTransform
operator|::
name|fromTranslate
argument_list|(
name|qRound
argument_list|(
name|p
operator|.
name|x
argument_list|()
argument_list|)
argument_list|,
name|qRound
argument_list|(
name|p
operator|.
name|y
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|ti
operator|.
name|fontEngine
operator|->
name|getGlyphPositions
argument_list|(
name|ti
operator|.
name|glyphs
argument_list|,
name|matrix
argument_list|,
name|ti
operator|.
name|flags
argument_list|,
name|glyphs
argument_list|,
name|positions
argument_list|)
expr_stmt|;
block|{
name|QStaticTextItem
name|staticTextItem
decl_stmt|;
name|staticTextItem
operator|.
name|chars
operator|=
cast|const_cast
argument_list|<
name|QChar
operator|*
argument_list|>
argument_list|(
name|ti
operator|.
name|chars
argument_list|)
expr_stmt|;
name|staticTextItem
operator|.
name|setFontEngine
argument_list|(
name|ti
operator|.
name|fontEngine
argument_list|)
expr_stmt|;
name|staticTextItem
operator|.
name|glyphs
operator|=
name|glyphs
operator|.
name|data
argument_list|()
expr_stmt|;
name|staticTextItem
operator|.
name|numChars
operator|=
name|ti
operator|.
name|num_chars
expr_stmt|;
name|staticTextItem
operator|.
name|numGlyphs
operator|=
name|glyphs
operator|.
name|size
argument_list|()
expr_stmt|;
name|staticTextItem
operator|.
name|glyphPositions
operator|=
name|positions
operator|.
name|data
argument_list|()
expr_stmt|;
name|drawStaticTextItem
argument_list|(
operator|&
name|staticTextItem
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|drawEllipse
name|void
name|QOpenGLPaintEngine
operator|::
name|drawEllipse
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|rect
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|Q_WS_QWS
name|Q_D
argument_list|(
name|QOpenGLPaintEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|use_emulation
condition|)
block|{
name|QPaintEngineEx
operator|::
name|drawEllipse
argument_list|(
name|rect
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|d
operator|->
name|high_quality_antialiasing
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|has_brush
condition|)
block|{
name|d
operator|->
name|disableClipping
argument_list|()
expr_stmt|;
name|glMatrixMode
argument_list|(
name|GL_MODELVIEW
argument_list|)
expr_stmt|;
name|glPushMatrix
argument_list|()
expr_stmt|;
name|glLoadIdentity
argument_list|()
expr_stmt|;
name|GLuint
name|program
init|=
name|qt_gl_program_cache
argument_list|()
operator|->
name|getProgram
argument_list|(
name|d
operator|->
name|device
operator|->
name|context
argument_list|()
argument_list|,
name|FRAGMENT_PROGRAM_MASK_ELLIPSE_AA
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|QGLEllipseMaskGenerator
name|maskGenerator
argument_list|(
name|rect
argument_list|,
name|d
operator|->
name|matrix
argument_list|,
name|d
operator|->
name|offscreen
argument_list|,
name|program
argument_list|,
name|mask_variable_locations
index|[
name|FRAGMENT_PROGRAM_MASK_ELLIPSE_AA
index|]
argument_list|)
decl_stmt|;
name|d
operator|->
name|addItem
argument_list|(
name|qt_mask_texture_cache
argument_list|()
operator|->
name|getMask
argument_list|(
name|maskGenerator
argument_list|,
name|d
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|enableClipping
argument_list|()
expr_stmt|;
name|glMatrixMode
argument_list|(
name|GL_MODELVIEW
argument_list|)
expr_stmt|;
name|glPopMatrix
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|->
name|has_pen
condition|)
block|{
name|QPainterPath
name|path
decl_stmt|;
name|path
operator|.
name|addEllipse
argument_list|(
name|rect
argument_list|)
expr_stmt|;
name|d
operator|->
name|strokePath
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|DEBUG_ONCE_STR
argument_list|(
literal|"QOpenGLPaintEngine::drawEllipse(): falling back to drawPath()"
argument_list|)
expr_stmt|;
name|QPainterPath
name|path
decl_stmt|;
name|path
operator|.
name|addEllipse
argument_list|(
name|rect
argument_list|)
expr_stmt|;
name|drawPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
else|#
directive|else
name|QPaintEngineEx
operator|::
name|drawEllipse
argument_list|(
name|rect
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
DECL|function|updateFragmentProgramData
name|void
name|QOpenGLPaintEnginePrivate
operator|::
name|updateFragmentProgramData
parameter_list|(
name|int
name|locations
index|[]
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|Q_WS_QWS
name|Q_UNUSED
argument_list|(
name|locations
argument_list|)
expr_stmt|;
else|#
directive|else
name|QGL_FUNC_CONTEXT
expr_stmt|;
name|QSize
name|sz
init|=
name|offscreen
operator|.
name|offscreenSize
argument_list|()
decl_stmt|;
name|float
name|inv_mask_size_data
index|[
literal|4
index|]
init|=
block|{
literal|1.0f
operator|/
name|sz
operator|.
name|width
argument_list|()
block|,
literal|1.0f
operator|/
name|sz
operator|.
name|height
argument_list|()
block|,
literal|0.0f
block|,
literal|0.0f
block|}
decl_stmt|;
name|sz
operator|=
name|drawable_texture_size
expr_stmt|;
name|float
name|inv_dst_size_data
index|[
literal|4
index|]
init|=
block|{
literal|1.0f
operator|/
name|sz
operator|.
name|width
argument_list|()
block|,
literal|1.0f
operator|/
name|sz
operator|.
name|height
argument_list|()
block|,
literal|0.0f
block|,
literal|0.0f
block|}
decl_stmt|;
comment|// default inv size 0.125f == 1.0f / 8.0f for pattern brushes
name|float
name|inv_brush_texture_size_data
index|[
literal|4
index|]
init|=
block|{
literal|0.125f
block|,
literal|0.125f
block|}
decl_stmt|;
comment|// texture patterns have their own size
if|if
condition|(
name|current_style
operator|==
name|Qt
operator|::
name|TexturePattern
condition|)
block|{
name|QSize
name|sz
init|=
name|cbrush
operator|.
name|texture
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|inv_brush_texture_size_data
index|[
literal|0
index|]
operator|=
literal|1.0f
operator|/
name|sz
operator|.
name|width
argument_list|()
expr_stmt|;
name|inv_brush_texture_size_data
index|[
literal|1
index|]
operator|=
literal|1.0f
operator|/
name|sz
operator|.
name|height
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|unsigned
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|num_fragment_variables
condition|;
operator|++
name|i
control|)
block|{
name|int
name|location
init|=
name|locations
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|location
operator|<
literal|0
condition|)
continue|continue;
switch|switch
condition|(
name|i
condition|)
block|{
case|case
name|VAR_ANGLE
case|:
name|glProgramLocalParameter4fvARB
argument_list|(
name|GL_FRAGMENT_PROGRAM_ARB
argument_list|,
name|location
argument_list|,
name|angle_data
argument_list|)
expr_stmt|;
break|break;
case|case
name|VAR_LINEAR
case|:
name|glProgramLocalParameter4fvARB
argument_list|(
name|GL_FRAGMENT_PROGRAM_ARB
argument_list|,
name|location
argument_list|,
name|linear_data
argument_list|)
expr_stmt|;
break|break;
case|case
name|VAR_FMP
case|:
name|glProgramLocalParameter4fvARB
argument_list|(
name|GL_FRAGMENT_PROGRAM_ARB
argument_list|,
name|location
argument_list|,
name|fmp_data
argument_list|)
expr_stmt|;
break|break;
case|case
name|VAR_FMP2_M_RADIUS2
case|:
name|glProgramLocalParameter4fvARB
argument_list|(
name|GL_FRAGMENT_PROGRAM_ARB
argument_list|,
name|location
argument_list|,
name|fmp2_m_radius2_data
argument_list|)
expr_stmt|;
break|break;
case|case
name|VAR_INV_MASK_SIZE
case|:
name|glProgramLocalParameter4fvARB
argument_list|(
name|GL_FRAGMENT_PROGRAM_ARB
argument_list|,
name|location
argument_list|,
name|inv_mask_size_data
argument_list|)
expr_stmt|;
break|break;
case|case
name|VAR_INV_DST_SIZE
case|:
name|glProgramLocalParameter4fvARB
argument_list|(
name|GL_FRAGMENT_PROGRAM_ARB
argument_list|,
name|location
argument_list|,
name|inv_dst_size_data
argument_list|)
expr_stmt|;
break|break;
case|case
name|VAR_INV_MATRIX_M0
case|:
name|glProgramLocalParameter4fvARB
argument_list|(
name|GL_FRAGMENT_PROGRAM_ARB
argument_list|,
name|location
argument_list|,
name|inv_matrix_data
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
name|VAR_INV_MATRIX_M1
case|:
name|glProgramLocalParameter4fvARB
argument_list|(
name|GL_FRAGMENT_PROGRAM_ARB
argument_list|,
name|location
argument_list|,
name|inv_matrix_data
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
name|VAR_INV_MATRIX_M2
case|:
name|glProgramLocalParameter4fvARB
argument_list|(
name|GL_FRAGMENT_PROGRAM_ARB
argument_list|,
name|location
argument_list|,
name|inv_matrix_data
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
name|VAR_PORTERDUFF_AB
case|:
name|glProgramLocalParameter4fvARB
argument_list|(
name|GL_FRAGMENT_PROGRAM_ARB
argument_list|,
name|location
argument_list|,
name|porterduff_ab_data
argument_list|)
expr_stmt|;
break|break;
case|case
name|VAR_PORTERDUFF_XYZ
case|:
name|glProgramLocalParameter4fvARB
argument_list|(
name|GL_FRAGMENT_PROGRAM_ARB
argument_list|,
name|location
argument_list|,
name|porterduff_xyz_data
argument_list|)
expr_stmt|;
break|break;
case|case
name|VAR_INV_BRUSH_TEXTURE_SIZE
case|:
name|glProgramLocalParameter4fvARB
argument_list|(
name|GL_FRAGMENT_PROGRAM_ARB
argument_list|,
name|location
argument_list|,
name|inv_brush_texture_size_data
argument_list|)
expr_stmt|;
break|break;
case|case
name|VAR_MASK_OFFSET
case|:
name|glProgramLocalParameter4fvARB
argument_list|(
name|GL_FRAGMENT_PROGRAM_ARB
argument_list|,
name|location
argument_list|,
name|mask_offset_data
argument_list|)
expr_stmt|;
break|break;
case|case
name|VAR_MASK_CHANNEL
case|:
name|glProgramLocalParameter4fvARB
argument_list|(
name|GL_FRAGMENT_PROGRAM_ARB
argument_list|,
name|location
argument_list|,
name|mask_channel_data
argument_list|)
expr_stmt|;
break|break;
case|case
name|VAR_DST_TEXTURE
case|:
case|case
name|VAR_MASK_TEXTURE
case|:
case|case
name|VAR_PALETTE
case|:
case|case
name|VAR_BRUSH_TEXTURE
case|:
comment|// texture variables, not handled here
break|break;
default|default:
name|qDebug
argument_list|()
operator|<<
literal|"QOpenGLPaintEnginePrivate: Unhandled fragment variable:"
operator|<<
name|i
expr_stmt|;
block|}
block|}
endif|#
directive|endif
block|}
DECL|function|copyDrawable
name|void
name|QOpenGLPaintEnginePrivate
operator|::
name|copyDrawable
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|rect
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|Q_WS_QWS
name|Q_UNUSED
argument_list|(
name|rect
argument_list|)
expr_stmt|;
else|#
directive|else
name|ensureDrawableTexture
argument_list|()
expr_stmt|;
name|DEBUG_ONCE
name|qDebug
argument_list|()
decl|<< "Refreshing drawable_texture for rectangle"<<
name|rect
decl_stmt|;
name|QRectF
name|screen_rect
init|=
name|rect
operator|.
name|adjusted
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|int
name|left
init|=
name|qMax
argument_list|(
literal|0
argument_list|,
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|screen_rect
operator|.
name|left
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|width
init|=
name|qMin
argument_list|(
name|device
operator|->
name|size
argument_list|()
operator|.
name|width
argument_list|()
operator|-
name|left
argument_list|,
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|screen_rect
operator|.
name|width
argument_list|()
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
name|int
name|bottom
init|=
name|qMax
argument_list|(
literal|0
argument_list|,
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|device
operator|->
name|size
argument_list|()
operator|.
name|height
argument_list|()
operator|-
name|screen_rect
operator|.
name|bottom
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|height
init|=
name|qMin
argument_list|(
name|device
operator|->
name|size
argument_list|()
operator|.
name|height
argument_list|()
operator|-
name|bottom
argument_list|,
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|screen_rect
operator|.
name|height
argument_list|()
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
name|glBindTexture
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
name|drawable_texture
argument_list|)
expr_stmt|;
name|glCopyTexSubImage2D
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
literal|0
argument_list|,
name|left
argument_list|,
name|bottom
argument_list|,
name|left
argument_list|,
name|bottom
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
DECL|function|composite
name|void
name|QOpenGLPaintEnginePrivate
operator|::
name|composite
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|rect
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|maskOffset
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|Q_WS_QWS
name|Q_UNUSED
argument_list|(
name|rect
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|maskOffset
argument_list|)
expr_stmt|;
else|#
directive|else
name|GLfloat
name|vertexArray
index|[
literal|8
index|]
decl_stmt|;
name|qt_add_rect_to_array
argument_list|(
name|rect
argument_list|,
name|vertexArray
argument_list|)
expr_stmt|;
name|composite
argument_list|(
name|GL_TRIANGLE_FAN
argument_list|,
name|vertexArray
argument_list|,
literal|4
argument_list|,
name|maskOffset
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
DECL|function|composite
name|void
name|QOpenGLPaintEnginePrivate
operator|::
name|composite
parameter_list|(
name|GLuint
name|primitive
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|vertexArray
parameter_list|,
name|int
name|vertexCount
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|maskOffset
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_OPENGL_ES
name|Q_UNUSED
argument_list|(
name|primitive
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|vertexArray
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|vertexCount
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|maskOffset
argument_list|)
expr_stmt|;
else|#
directive|else
name|Q_Q
argument_list|(
name|QOpenGLPaintEngine
argument_list|)
expr_stmt|;
name|QGL_FUNC_CONTEXT
expr_stmt|;
if|if
condition|(
name|current_style
operator|==
name|Qt
operator|::
name|NoBrush
condition|)
return|return;
name|DEBUG_ONCE
name|qDebug
argument_list|()
decl|<< "QOpenGLPaintEnginePrivate: Using compositing program: fragment_brush ="<<
name|fragment_brush
decl|<< ", fragment_composition_mode ="<<
name|fragment_composition_mode
decl_stmt|;
if|if
condition|(
name|has_fast_composition_mode
condition|)
name|q
operator|->
name|updateCompositionMode
argument_list|(
name|composition_mode
argument_list|)
expr_stmt|;
else|else
block|{
name|qreal
name|minX
init|=
literal|1e9
decl_stmt|,
name|minY
init|=
literal|1e9
decl_stmt|,
name|maxX
init|=
operator|-
literal|1e9
decl_stmt|,
name|maxY
init|=
operator|-
literal|1e9
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vertexCount
condition|;
operator|++
name|i
control|)
block|{
name|qreal
name|x
init|=
name|vertexArray
index|[
literal|2
operator|*
name|i
index|]
decl_stmt|;
name|qreal
name|y
init|=
name|vertexArray
index|[
literal|2
operator|*
name|i
operator|+
literal|1
index|]
decl_stmt|;
name|qreal
name|tx
decl_stmt|,
name|ty
decl_stmt|;
name|matrix
operator|.
name|map
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
operator|&
name|tx
argument_list|,
operator|&
name|ty
argument_list|)
expr_stmt|;
name|minX
operator|=
name|qMin
argument_list|(
name|minX
argument_list|,
name|tx
argument_list|)
expr_stmt|;
name|minY
operator|=
name|qMin
argument_list|(
name|minY
argument_list|,
name|ty
argument_list|)
expr_stmt|;
name|maxX
operator|=
name|qMax
argument_list|(
name|maxX
argument_list|,
name|tx
argument_list|)
expr_stmt|;
name|maxY
operator|=
name|qMax
argument_list|(
name|maxY
argument_list|,
name|ty
argument_list|)
expr_stmt|;
block|}
name|QRectF
name|r
argument_list|(
name|minX
argument_list|,
name|minY
argument_list|,
name|maxX
operator|-
name|minX
argument_list|,
name|maxY
operator|-
name|minY
argument_list|)
decl_stmt|;
name|copyDrawable
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|glBlendFunc
argument_list|(
name|GL_ONE
argument_list|,
name|GL_ZERO
argument_list|)
expr_stmt|;
block|}
name|int
modifier|*
name|locations
init|=
name|painter_variable_locations
index|[
name|fragment_brush
index|]
index|[
name|fragment_composition_mode
index|]
decl_stmt|;
name|int
name|texture_locations
index|[]
init|=
block|{
name|locations
index|[
name|VAR_DST_TEXTURE
index|]
block|,
name|locations
index|[
name|VAR_MASK_TEXTURE
index|]
block|,
name|locations
index|[
name|VAR_PALETTE
index|]
block|}
decl_stmt|;
name|int
name|brush_texture_location
init|=
name|locations
index|[
name|VAR_BRUSH_TEXTURE
index|]
decl_stmt|;
name|GLuint
name|texture_targets
index|[]
init|=
block|{
name|GL_TEXTURE_2D
block|,
name|GL_TEXTURE_2D
block|,
name|GL_TEXTURE_1D
block|}
decl_stmt|;
name|GLuint
name|textures
index|[]
init|=
block|{
name|drawable_texture
block|,
name|offscreen
operator|.
name|offscreenTexture
argument_list|()
block|,
name|grad_palette
block|}
decl_stmt|;
specifier|const
name|int
name|num_textures
init|=
sizeof|sizeof
argument_list|(
name|textures
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
operator|*
name|textures
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|num_textures
operator|==
sizeof|sizeof
argument_list|(
name|texture_locations
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
operator|*
name|texture_locations
argument_list|)
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|num_textures
operator|==
sizeof|sizeof
argument_list|(
name|texture_targets
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
operator|*
name|texture_targets
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|num_textures
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|texture_locations
index|[
name|i
index|]
operator|>=
literal|0
condition|)
block|{
name|glActiveTexture
argument_list|(
name|GL_TEXTURE0
operator|+
name|texture_locations
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|glBindTexture
argument_list|(
name|texture_targets
index|[
name|i
index|]
argument_list|,
name|textures
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|brush_texture_location
operator|>=
literal|0
condition|)
block|{
name|glActiveTexture
argument_list|(
name|GL_TEXTURE0
operator|+
name|brush_texture_location
argument_list|)
expr_stmt|;
if|if
condition|(
name|current_style
operator|==
name|Qt
operator|::
name|TexturePattern
condition|)
name|device
operator|->
name|context
argument_list|()
operator|->
name|d_func
argument_list|()
operator|->
name|bindTexture
argument_list|(
name|cbrush
operator|.
name|textureImage
argument_list|()
argument_list|,
name|GL_TEXTURE_2D
argument_list|,
name|GL_RGBA
argument_list|,
name|QGLContext
operator|::
name|InternalBindOption
argument_list|)
expr_stmt|;
else|else
name|device
operator|->
name|context
argument_list|()
operator|->
name|d_func
argument_list|()
operator|->
name|bindTexture
argument_list|(
name|qt_imageForBrush
argument_list|(
name|current_style
argument_list|,
literal|false
argument_list|)
argument_list|,
name|GL_TEXTURE_2D
argument_list|,
name|GL_RGBA
argument_list|,
name|QGLContext
operator|::
name|InternalBindOption
argument_list|)
expr_stmt|;
name|updateTextureFilter
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
name|GL_REPEAT
argument_list|,
name|use_smooth_pixmap_transform
argument_list|)
expr_stmt|;
block|}
name|glEnableClientState
argument_list|(
name|GL_VERTEX_ARRAY
argument_list|)
expr_stmt|;
name|glVertexPointer
argument_list|(
literal|2
argument_list|,
name|GL_FLOAT
argument_list|,
literal|0
argument_list|,
name|vertexArray
argument_list|)
expr_stmt|;
name|glEnable
argument_list|(
name|GL_FRAGMENT_PROGRAM_ARB
argument_list|)
expr_stmt|;
name|GLuint
name|program
init|=
name|qt_gl_program_cache
argument_list|()
operator|->
name|getProgram
argument_list|(
name|device
operator|->
name|context
argument_list|()
argument_list|,
name|fragment_brush
argument_list|,
name|fragment_composition_mode
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|glBindProgramARB
argument_list|(
name|GL_FRAGMENT_PROGRAM_ARB
argument_list|,
name|program
argument_list|)
expr_stmt|;
name|mask_offset_data
index|[
literal|0
index|]
operator|=
name|maskOffset
operator|.
name|x
argument_list|()
expr_stmt|;
name|mask_offset_data
index|[
literal|1
index|]
operator|=
operator|-
name|maskOffset
operator|.
name|y
argument_list|()
expr_stmt|;
name|updateFragmentProgramData
argument_list|(
name|locations
argument_list|)
expr_stmt|;
name|glDrawArrays
argument_list|(
name|primitive
argument_list|,
literal|0
argument_list|,
name|vertexCount
argument_list|)
expr_stmt|;
name|glDisable
argument_list|(
name|GL_FRAGMENT_PROGRAM_ARB
argument_list|)
expr_stmt|;
name|glDisableClientState
argument_list|(
name|GL_VERTEX_ARRAY
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|num_textures
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|texture_locations
index|[
name|i
index|]
operator|>=
literal|0
condition|)
block|{
name|glActiveTexture
argument_list|(
name|GL_TEXTURE0
operator|+
name|texture_locations
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|glBindTexture
argument_list|(
name|texture_targets
index|[
name|i
index|]
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|brush_texture_location
operator|>=
literal|0
condition|)
block|{
name|glActiveTexture
argument_list|(
name|GL_TEXTURE0
operator|+
name|brush_texture_location
argument_list|)
expr_stmt|;
name|glBindTexture
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|glActiveTexture
argument_list|(
name|GL_TEXTURE0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|has_fast_composition_mode
condition|)
name|q
operator|->
name|updateCompositionMode
argument_list|(
name|composition_mode
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
DECL|function|cacheItemErased
name|void
name|QOpenGLPaintEnginePrivate
operator|::
name|cacheItemErased
parameter_list|(
name|int
name|channel
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
block|{
name|bool
name|isInDrawQueue
init|=
literal|false
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QDrawQueueItem
modifier|&
name|item
decl|,
name|drawQueue
control|)
block|{
if|if
condition|(
name|item
operator|.
name|location
operator|.
name|channel
operator|==
name|channel
operator|&&
name|item
operator|.
name|location
operator|.
name|rect
operator|==
name|rect
condition|)
block|{
name|isInDrawQueue
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|isInDrawQueue
condition|)
name|flushDrawQueue
argument_list|()
expr_stmt|;
block|}
DECL|function|addItem
name|void
name|QOpenGLPaintEnginePrivate
operator|::
name|addItem
parameter_list|(
specifier|const
name|QGLMaskTextureCache
operator|::
name|CacheLocation
modifier|&
name|location
parameter_list|)
block|{
name|drawQueue
operator|<<
name|QDrawQueueItem
argument_list|(
name|opacity
argument_list|,
name|cbrush
argument_list|,
name|brush_origin
argument_list|,
name|composition_mode
argument_list|,
name|matrix
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
DECL|function|drawItem
name|void
name|QOpenGLPaintEnginePrivate
operator|::
name|drawItem
parameter_list|(
specifier|const
name|QDrawQueueItem
modifier|&
name|item
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QOpenGLPaintEngine
argument_list|)
expr_stmt|;
name|opacity
operator|=
name|item
operator|.
name|opacity
expr_stmt|;
name|brush_origin
operator|=
name|item
operator|.
name|brush_origin
expr_stmt|;
name|q
operator|->
name|updateCompositionMode
argument_list|(
name|item
operator|.
name|composition_mode
argument_list|)
expr_stmt|;
name|matrix
operator|=
name|item
operator|.
name|matrix
expr_stmt|;
name|cbrush
operator|=
name|item
operator|.
name|brush
expr_stmt|;
name|brush_style
operator|=
name|item
operator|.
name|brush
operator|.
name|style
argument_list|()
expr_stmt|;
name|mask_channel_data
index|[
literal|0
index|]
operator|=
name|item
operator|.
name|location
operator|.
name|channel
operator|==
literal|0
expr_stmt|;
name|mask_channel_data
index|[
literal|1
index|]
operator|=
name|item
operator|.
name|location
operator|.
name|channel
operator|==
literal|1
expr_stmt|;
name|mask_channel_data
index|[
literal|2
index|]
operator|=
name|item
operator|.
name|location
operator|.
name|channel
operator|==
literal|2
expr_stmt|;
name|mask_channel_data
index|[
literal|3
index|]
operator|=
name|item
operator|.
name|location
operator|.
name|channel
operator|==
literal|3
expr_stmt|;
name|setGradientOps
argument_list|(
name|item
operator|.
name|brush
argument_list|,
name|item
operator|.
name|location
operator|.
name|screen_rect
argument_list|)
expr_stmt|;
name|composite
argument_list|(
name|item
operator|.
name|location
operator|.
name|screen_rect
argument_list|,
name|item
operator|.
name|location
operator|.
name|rect
operator|.
name|topLeft
argument_list|()
operator|-
name|item
operator|.
name|location
operator|.
name|screen_rect
operator|.
name|topLeft
argument_list|()
operator|-
name|QPoint
argument_list|(
literal|0
argument_list|,
name|offscreen
operator|.
name|offscreenSize
argument_list|()
operator|.
name|height
argument_list|()
operator|-
name|device
operator|->
name|size
argument_list|()
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|flushDrawQueue
name|void
name|QOpenGLPaintEnginePrivate
operator|::
name|flushDrawQueue
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_OPENGL_ES
name|Q_Q
argument_list|(
name|QOpenGLPaintEngine
argument_list|)
expr_stmt|;
name|offscreen
operator|.
name|release
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|drawQueue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|DEBUG_ONCE
name|qDebug
argument_list|()
decl|<< "QOpenGLPaintEngine::flushDrawQueue():"<<
name|drawQueue
operator|.
name|size
argument_list|()
decl|<< "items"
decl_stmt|;
name|glPushMatrix
argument_list|()
expr_stmt|;
name|glLoadIdentity
argument_list|()
expr_stmt|;
name|qreal
name|old_opacity
init|=
name|opacity
decl_stmt|;
name|QPointF
name|old_brush_origin
init|=
name|brush_origin
decl_stmt|;
name|QPainter
operator|::
name|CompositionMode
name|old_composition_mode
init|=
name|composition_mode
decl_stmt|;
name|QTransform
name|old_matrix
init|=
name|matrix
decl_stmt|;
name|QBrush
name|old_brush
init|=
name|cbrush
decl_stmt|;
name|bool
name|hqaa_old
init|=
name|high_quality_antialiasing
decl_stmt|;
name|high_quality_antialiasing
operator|=
literal|true
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QDrawQueueItem
modifier|&
name|item
decl|,
name|drawQueue
control|)
name|drawItem
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|opacity
operator|=
name|old_opacity
expr_stmt|;
name|brush_origin
operator|=
name|old_brush_origin
expr_stmt|;
name|q
operator|->
name|updateCompositionMode
argument_list|(
name|old_composition_mode
argument_list|)
expr_stmt|;
name|matrix
operator|=
name|old_matrix
expr_stmt|;
name|cbrush
operator|=
name|old_brush
expr_stmt|;
name|brush_style
operator|=
name|old_brush
operator|.
name|style
argument_list|()
expr_stmt|;
name|high_quality_antialiasing
operator|=
name|hqaa_old
expr_stmt|;
name|setGLBrush
argument_list|(
name|old_brush
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|qt_glColor4ubv
argument_list|(
name|brush_color
argument_list|)
expr_stmt|;
name|drawQueue
operator|.
name|clear
argument_list|()
expr_stmt|;
name|glPopMatrix
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
block|}
DECL|function|clipEnabledChanged
name|void
name|QOpenGLPaintEngine
operator|::
name|clipEnabledChanged
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QOpenGLPaintEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|updateDepthClip
argument_list|()
expr_stmt|;
block|}
DECL|function|penChanged
name|void
name|QOpenGLPaintEngine
operator|::
name|penChanged
parameter_list|()
block|{
name|updatePen
argument_list|(
name|state
argument_list|()
operator|->
name|pen
argument_list|)
expr_stmt|;
block|}
DECL|function|brushChanged
name|void
name|QOpenGLPaintEngine
operator|::
name|brushChanged
parameter_list|()
block|{
name|updateBrush
argument_list|(
name|state
argument_list|()
operator|->
name|brush
argument_list|,
name|state
argument_list|()
operator|->
name|brushOrigin
argument_list|)
expr_stmt|;
block|}
DECL|function|brushOriginChanged
name|void
name|QOpenGLPaintEngine
operator|::
name|brushOriginChanged
parameter_list|()
block|{
name|updateBrush
argument_list|(
name|state
argument_list|()
operator|->
name|brush
argument_list|,
name|state
argument_list|()
operator|->
name|brushOrigin
argument_list|)
expr_stmt|;
block|}
DECL|function|opacityChanged
name|void
name|QOpenGLPaintEngine
operator|::
name|opacityChanged
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QOpenGLPaintEngine
argument_list|)
expr_stmt|;
name|QPainterState
modifier|*
name|s
init|=
name|state
argument_list|()
decl_stmt|;
name|d
operator|->
name|opacity
operator|=
name|s
operator|->
name|opacity
expr_stmt|;
name|updateBrush
argument_list|(
name|s
operator|->
name|brush
argument_list|,
name|s
operator|->
name|brushOrigin
argument_list|)
expr_stmt|;
name|updatePen
argument_list|(
name|s
operator|->
name|pen
argument_list|)
expr_stmt|;
block|}
DECL|function|compositionModeChanged
name|void
name|QOpenGLPaintEngine
operator|::
name|compositionModeChanged
parameter_list|()
block|{
name|updateCompositionMode
argument_list|(
name|state
argument_list|()
operator|->
name|composition_mode
argument_list|)
expr_stmt|;
block|}
DECL|function|renderHintsChanged
name|void
name|QOpenGLPaintEngine
operator|::
name|renderHintsChanged
parameter_list|()
block|{
name|updateRenderHints
argument_list|(
name|state
argument_list|()
operator|->
name|renderHints
argument_list|)
expr_stmt|;
block|}
DECL|function|transformChanged
name|void
name|QOpenGLPaintEngine
operator|::
name|transformChanged
parameter_list|()
block|{
name|updateMatrix
argument_list|(
name|state
argument_list|()
operator|->
name|matrix
argument_list|)
expr_stmt|;
block|}
specifier|extern
name|QPainterPath
name|qt_painterPathFromVectorPath
argument_list|(
specifier|const
name|QVectorPath
operator|&
name|path
argument_list|)
decl_stmt|;
DECL|function|fill
name|void
name|QOpenGLPaintEngine
operator|::
name|fill
parameter_list|(
specifier|const
name|QVectorPath
modifier|&
name|path
parameter_list|,
specifier|const
name|QBrush
modifier|&
name|brush
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QOpenGLPaintEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|brush
operator|.
name|style
argument_list|()
operator|==
name|Qt
operator|::
name|NoBrush
condition|)
return|return;
if|if
condition|(
operator|(
operator|!
name|d
operator|->
name|use_fragment_programs
operator|&&
name|needsEmulation
argument_list|(
name|brush
operator|.
name|style
argument_list|()
argument_list|)
operator|)
operator|||
name|qt_isExtendedRadialGradient
argument_list|(
name|brush
argument_list|)
condition|)
block|{
name|QPainter
modifier|*
name|p
init|=
name|painter
argument_list|()
decl_stmt|;
name|QBrush
name|oldBrush
init|=
name|p
operator|->
name|brush
argument_list|()
decl_stmt|;
name|p
operator|->
name|setBrush
argument_list|(
name|brush
argument_list|)
expr_stmt|;
name|qt_draw_helper
argument_list|(
name|p
operator|->
name|d_ptr
operator|.
name|data
argument_list|()
argument_list|,
name|qt_painterPathFromVectorPath
argument_list|(
name|path
argument_list|)
argument_list|,
name|QPainterPrivate
operator|::
name|FillDraw
argument_list|)
expr_stmt|;
name|p
operator|->
name|setBrush
argument_list|(
name|oldBrush
argument_list|)
expr_stmt|;
return|return;
block|}
name|QBrush
name|old_brush
init|=
name|state
argument_list|()
operator|->
name|brush
decl_stmt|;
name|updateBrush
argument_list|(
name|brush
argument_list|,
name|state
argument_list|()
operator|->
name|brushOrigin
argument_list|)
expr_stmt|;
specifier|const
name|qreal
modifier|*
name|points
init|=
name|path
operator|.
name|points
argument_list|()
decl_stmt|;
specifier|const
name|QPainterPath
operator|::
name|ElementType
modifier|*
name|types
init|=
name|path
operator|.
name|elements
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|types
operator|&&
name|path
operator|.
name|shape
argument_list|()
operator|==
name|QVectorPath
operator|::
name|RectangleHint
condition|)
block|{
name|QRectF
name|r
argument_list|(
name|points
index|[
literal|0
index|]
argument_list|,
name|points
index|[
literal|1
index|]
argument_list|,
name|points
index|[
literal|4
index|]
operator|-
name|points
index|[
literal|0
index|]
argument_list|,
name|points
index|[
literal|5
index|]
operator|-
name|points
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|QPen
name|old_pen
init|=
name|state
argument_list|()
operator|->
name|pen
decl_stmt|;
name|updatePen
argument_list|(
name|Qt
operator|::
name|NoPen
argument_list|)
expr_stmt|;
name|drawRects
argument_list|(
operator|&
name|r
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|updatePen
argument_list|(
name|old_pen
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|fillPath
argument_list|(
name|qt_painterPathFromVectorPath
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|updateBrush
argument_list|(
name|old_brush
argument_list|,
name|state
argument_list|()
operator|->
name|brushOrigin
argument_list|)
expr_stmt|;
block|}
DECL|function|isRect
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
specifier|static
specifier|inline
name|bool
name|isRect
parameter_list|(
specifier|const
name|T
modifier|*
name|pts
parameter_list|,
name|int
name|elementCount
parameter_list|)
block|{
return|return
operator|(
name|elementCount
operator|==
literal|5
comment|// 5-point polygon, check for closed rect
operator|&&
name|pts
index|[
literal|0
index|]
operator|==
name|pts
index|[
literal|8
index|]
operator|&&
name|pts
index|[
literal|1
index|]
operator|==
name|pts
index|[
literal|9
index|]
comment|// last point == first point
operator|&&
name|pts
index|[
literal|0
index|]
operator|==
name|pts
index|[
literal|6
index|]
operator|&&
name|pts
index|[
literal|2
index|]
operator|==
name|pts
index|[
literal|4
index|]
comment|// x values equal
operator|&&
name|pts
index|[
literal|1
index|]
operator|==
name|pts
index|[
literal|3
index|]
operator|&&
name|pts
index|[
literal|5
index|]
operator|==
name|pts
index|[
literal|7
index|]
comment|// y values equal...
operator|)
operator|||
operator|(
name|elementCount
operator|==
literal|4
comment|// 4-point polygon, check for unclosed rect
operator|&&
name|pts
index|[
literal|0
index|]
operator|==
name|pts
index|[
literal|6
index|]
operator|&&
name|pts
index|[
literal|2
index|]
operator|==
name|pts
index|[
literal|4
index|]
comment|// x values equal
operator|&&
name|pts
index|[
literal|1
index|]
operator|==
name|pts
index|[
literal|3
index|]
operator|&&
name|pts
index|[
literal|5
index|]
operator|==
name|pts
index|[
literal|7
index|]
comment|// y values equal...
operator|)
return|;
block|}
DECL|function|clip
name|void
name|QOpenGLPaintEngine
operator|::
name|clip
parameter_list|(
specifier|const
name|QVectorPath
modifier|&
name|path
parameter_list|,
name|Qt
operator|::
name|ClipOperation
name|op
parameter_list|)
block|{
specifier|const
name|qreal
modifier|*
name|points
init|=
name|path
operator|.
name|points
argument_list|()
decl_stmt|;
specifier|const
name|QPainterPath
operator|::
name|ElementType
modifier|*
name|types
init|=
name|path
operator|.
name|elements
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|types
operator|&&
name|path
operator|.
name|shape
argument_list|()
operator|==
name|QVectorPath
operator|::
name|RectangleHint
condition|)
block|{
name|QRectF
name|r
argument_list|(
name|points
index|[
literal|0
index|]
argument_list|,
name|points
index|[
literal|1
index|]
argument_list|,
name|points
index|[
literal|4
index|]
operator|-
name|points
index|[
literal|0
index|]
argument_list|,
name|points
index|[
literal|5
index|]
operator|-
name|points
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|updateClipRegion
argument_list|(
name|QRegion
argument_list|(
name|r
operator|.
name|toRect
argument_list|()
argument_list|)
argument_list|,
name|op
argument_list|)
expr_stmt|;
return|return;
block|}
name|QPainterPath
name|p
decl_stmt|;
if|if
condition|(
name|types
condition|)
block|{
name|int
name|id
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|path
operator|.
name|elementCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
switch|switch
condition|(
name|types
index|[
name|i
index|]
condition|)
block|{
case|case
name|QPainterPath
operator|::
name|MoveToElement
case|:
name|p
operator|.
name|moveTo
argument_list|(
name|QPointF
argument_list|(
name|points
index|[
name|id
index|]
argument_list|,
name|points
index|[
name|id
operator|+
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|id
operator|+=
literal|2
expr_stmt|;
break|break;
case|case
name|QPainterPath
operator|::
name|LineToElement
case|:
name|p
operator|.
name|lineTo
argument_list|(
name|QPointF
argument_list|(
name|points
index|[
name|id
index|]
argument_list|,
name|points
index|[
name|id
operator|+
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|id
operator|+=
literal|2
expr_stmt|;
break|break;
case|case
name|QPainterPath
operator|::
name|CurveToElement
case|:
block|{
name|QPointF
name|p1
argument_list|(
name|points
index|[
name|id
index|]
argument_list|,
name|points
index|[
name|id
operator|+
literal|1
index|]
argument_list|)
decl_stmt|;
name|QPointF
name|p2
argument_list|(
name|points
index|[
name|id
operator|+
literal|2
index|]
argument_list|,
name|points
index|[
name|id
operator|+
literal|3
index|]
argument_list|)
decl_stmt|;
name|QPointF
name|p3
argument_list|(
name|points
index|[
name|id
operator|+
literal|4
index|]
argument_list|,
name|points
index|[
name|id
operator|+
literal|5
index|]
argument_list|)
decl_stmt|;
name|p
operator|.
name|cubicTo
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|,
name|p3
argument_list|)
expr_stmt|;
name|id
operator|+=
literal|6
expr_stmt|;
break|break;
block|}
case|case
name|QPainterPath
operator|::
name|CurveToDataElement
case|:
empty_stmt|;
break|break;
block|}
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|path
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|p
operator|.
name|moveTo
argument_list|(
name|QPointF
argument_list|(
name|points
index|[
literal|0
index|]
argument_list|,
name|points
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|id
init|=
literal|2
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|path
operator|.
name|elementCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|p
operator|.
name|lineTo
argument_list|(
name|QPointF
argument_list|(
name|points
index|[
name|id
index|]
argument_list|,
name|points
index|[
name|id
operator|+
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|id
operator|+=
literal|2
expr_stmt|;
block|}
block|}
if|if
condition|(
name|path
operator|.
name|hints
argument_list|()
operator|&
name|QVectorPath
operator|::
name|WindingFill
condition|)
name|p
operator|.
name|setFillRule
argument_list|(
name|Qt
operator|::
name|WindingFill
argument_list|)
expr_stmt|;
name|updateClipRegion
argument_list|(
name|QRegion
argument_list|(
name|p
operator|.
name|toFillPolygon
argument_list|()
operator|.
name|toPolygon
argument_list|()
argument_list|,
name|p
operator|.
name|fillRule
argument_list|()
argument_list|)
argument_list|,
name|op
argument_list|)
expr_stmt|;
return|return;
block|}
DECL|function|setState
name|void
name|QOpenGLPaintEngine
operator|::
name|setState
parameter_list|(
name|QPainterState
modifier|*
name|s
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QOpenGLPaintEngine
argument_list|)
expr_stmt|;
name|QOpenGLPaintEngineState
modifier|*
name|new_state
init|=
cast|static_cast
argument_list|<
name|QOpenGLPaintEngineState
operator|*
argument_list|>
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|QOpenGLPaintEngineState
modifier|*
name|old_state
init|=
name|state
argument_list|()
decl_stmt|;
name|QPaintEngineEx
operator|::
name|setState
argument_list|(
name|s
argument_list|)
expr_stmt|;
comment|// are we in a save() ?
if|if
condition|(
name|s
operator|==
name|d
operator|->
name|last_created_state
condition|)
block|{
name|d
operator|->
name|last_created_state
operator|=
literal|0
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|isActive
argument_list|()
condition|)
block|{
if|if
condition|(
name|old_state
operator|->
name|depthClipId
operator|!=
name|new_state
operator|->
name|depthClipId
condition|)
name|d
operator|->
name|updateDepthClip
argument_list|()
expr_stmt|;
name|penChanged
argument_list|()
expr_stmt|;
name|brushChanged
argument_list|()
expr_stmt|;
name|opacityChanged
argument_list|()
expr_stmt|;
name|compositionModeChanged
argument_list|()
expr_stmt|;
name|renderHintsChanged
argument_list|()
expr_stmt|;
name|transformChanged
argument_list|()
expr_stmt|;
block|}
block|}
DECL|function|createState
name|QPainterState
modifier|*
name|QOpenGLPaintEngine
operator|::
name|createState
parameter_list|(
name|QPainterState
modifier|*
name|orig
parameter_list|)
specifier|const
block|{
specifier|const
name|Q_D
argument_list|(
name|QOpenGLPaintEngine
argument_list|)
expr_stmt|;
name|QOpenGLPaintEngineState
modifier|*
name|s
decl_stmt|;
if|if
condition|(
operator|!
name|orig
condition|)
name|s
operator|=
operator|new
name|QOpenGLPaintEngineState
argument_list|()
expr_stmt|;
else|else
name|s
operator|=
operator|new
name|QOpenGLPaintEngineState
argument_list|(
operator|*
cast|static_cast
argument_list|<
name|QOpenGLPaintEngineState
operator|*
argument_list|>
argument_list|(
name|orig
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|last_created_state
operator|=
name|s
expr_stmt|;
return|return
name|s
return|;
block|}
comment|//
comment|//  QOpenGLPaintEngineState
comment|//
DECL|function|QOpenGLPaintEngineState
name|QOpenGLPaintEngineState
operator|::
name|QOpenGLPaintEngineState
parameter_list|(
name|QOpenGLPaintEngineState
modifier|&
name|other
parameter_list|)
member_init_list|:
name|QPainterState
argument_list|(
name|other
argument_list|)
block|{
name|clipRegion
operator|=
name|other
operator|.
name|clipRegion
expr_stmt|;
name|hasClipping
operator|=
name|other
operator|.
name|hasClipping
expr_stmt|;
name|fastClip
operator|=
name|other
operator|.
name|fastClip
expr_stmt|;
name|depthClipId
operator|=
name|other
operator|.
name|depthClipId
expr_stmt|;
block|}
DECL|function|QOpenGLPaintEngineState
name|QOpenGLPaintEngineState
operator|::
name|QOpenGLPaintEngineState
parameter_list|()
block|{
name|hasClipping
operator|=
literal|false
expr_stmt|;
name|depthClipId
operator|=
literal|0
expr_stmt|;
block|}
DECL|function|~QOpenGLPaintEngineState
name|QOpenGLPaintEngineState
operator|::
name|~
name|QOpenGLPaintEngineState
parameter_list|()
block|{ }
DECL|function|ensureDrawableTexture
name|void
name|QOpenGLPaintEnginePrivate
operator|::
name|ensureDrawableTexture
parameter_list|()
block|{
if|if
condition|(
operator|!
name|dirty_drawable_texture
condition|)
return|return;
name|dirty_drawable_texture
operator|=
literal|false
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_OPENGL_ES
name|glGenTextures
argument_list|(
literal|1
argument_list|,
operator|&
name|drawable_texture
argument_list|)
expr_stmt|;
name|glBindTexture
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
name|drawable_texture
argument_list|)
expr_stmt|;
name|glTexImage2D
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
literal|0
argument_list|,
name|GL_RGBA8
argument_list|,
name|drawable_texture_size
operator|.
name|width
argument_list|()
argument_list|,
name|drawable_texture_size
operator|.
name|height
argument_list|()
argument_list|,
literal|0
argument_list|,
name|GL_RGBA
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|glTexParameteri
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
name|GL_TEXTURE_MIN_FILTER
argument_list|,
name|GL_NEAREST
argument_list|)
expr_stmt|;
name|glTexParameteri
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
name|GL_TEXTURE_MAG_FILTER
argument_list|,
name|GL_NEAREST
argument_list|)
expr_stmt|;
name|glTexParameteri
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
name|GL_TEXTURE_WRAP_S
argument_list|,
name|GL_CLAMP_TO_EDGE
argument_list|)
expr_stmt|;
name|glTexParameteri
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
name|GL_TEXTURE_WRAP_T
argument_list|,
name|GL_CLAMP_TO_EDGE
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
name|QT_END_NAMESPACE
end_function
begin_include
include|#
directive|include
file|"qpaintengine_opengl.moc"
end_include
end_unit
