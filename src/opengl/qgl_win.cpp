begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtOpenGL module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<qgl.h>
end_include
begin_include
include|#
directive|include
file|<qlist.h>
end_include
begin_include
include|#
directive|include
file|<qmap.h>
end_include
begin_include
include|#
directive|include
file|<qpixmap.h>
end_include
begin_include
include|#
directive|include
file|<qevent.h>
end_include
begin_include
include|#
directive|include
file|<private/qgl_p.h>
end_include
begin_include
include|#
directive|include
file|<qcolormap.h>
end_include
begin_include
include|#
directive|include
file|<qvarlengtharray.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<qcolor.h>
end_include
begin_include
include|#
directive|include
file|<qt_windows.h>
end_include
begin_typedef
DECL|typedef|PFNWGLGETPIXELFORMATATTRIBIVARB
typedef|typedef
name|bool
function_decl|(
name|APIENTRY
modifier|*
name|PFNWGLGETPIXELFORMATATTRIBIVARB
function_decl|)
parameter_list|(
name|HDC
name|hdc
parameter_list|,
name|int
name|iPixelFormat
parameter_list|,
name|int
name|iLayerPlane
parameter_list|,
name|uint
name|nAttributes
parameter_list|,
specifier|const
name|int
modifier|*
name|piAttributes
parameter_list|,
name|int
modifier|*
name|piValues
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|PFNWGLCHOOSEPIXELFORMATARB
typedef|typedef
name|bool
function_decl|(
name|APIENTRY
modifier|*
name|PFNWGLCHOOSEPIXELFORMATARB
function_decl|)
parameter_list|(
name|HDC
name|hdc
parameter_list|,
specifier|const
name|int
modifier|*
name|piAttribList
parameter_list|,
specifier|const
name|float
modifier|*
name|pfAttribFList
parameter_list|,
name|uint
name|nMaxFormats
parameter_list|,
name|int
modifier|*
name|piFormats
parameter_list|,
name|UINT
modifier|*
name|nNumFormats
parameter_list|)
function_decl|;
end_typedef
begin_ifndef
ifndef|#
directive|ifndef
name|WGL_ARB_multisample
end_ifndef
begin_define
DECL|macro|WGL_SAMPLE_BUFFERS_ARB
define|#
directive|define
name|WGL_SAMPLE_BUFFERS_ARB
value|0x2041
end_define
begin_define
DECL|macro|WGL_SAMPLES_ARB
define|#
directive|define
name|WGL_SAMPLES_ARB
value|0x2042
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|WGL_ARB_pixel_format
end_ifndef
begin_define
DECL|macro|WGL_NUMBER_PIXEL_FORMATS_ARB
define|#
directive|define
name|WGL_NUMBER_PIXEL_FORMATS_ARB
value|0x2000
end_define
begin_define
DECL|macro|WGL_DRAW_TO_WINDOW_ARB
define|#
directive|define
name|WGL_DRAW_TO_WINDOW_ARB
value|0x2001
end_define
begin_define
DECL|macro|WGL_DRAW_TO_BITMAP_ARB
define|#
directive|define
name|WGL_DRAW_TO_BITMAP_ARB
value|0x2002
end_define
begin_define
DECL|macro|WGL_ACCELERATION_ARB
define|#
directive|define
name|WGL_ACCELERATION_ARB
value|0x2003
end_define
begin_define
DECL|macro|WGL_NEED_PALETTE_ARB
define|#
directive|define
name|WGL_NEED_PALETTE_ARB
value|0x2004
end_define
begin_define
DECL|macro|WGL_NEED_SYSTEM_PALETTE_ARB
define|#
directive|define
name|WGL_NEED_SYSTEM_PALETTE_ARB
value|0x2005
end_define
begin_define
DECL|macro|WGL_SWAP_LAYER_BUFFERS_ARB
define|#
directive|define
name|WGL_SWAP_LAYER_BUFFERS_ARB
value|0x2006
end_define
begin_define
DECL|macro|WGL_SWAP_METHOD_ARB
define|#
directive|define
name|WGL_SWAP_METHOD_ARB
value|0x2007
end_define
begin_define
DECL|macro|WGL_NUMBER_OVERLAYS_ARB
define|#
directive|define
name|WGL_NUMBER_OVERLAYS_ARB
value|0x2008
end_define
begin_define
DECL|macro|WGL_NUMBER_UNDERLAYS_ARB
define|#
directive|define
name|WGL_NUMBER_UNDERLAYS_ARB
value|0x2009
end_define
begin_define
DECL|macro|WGL_TRANSPARENT_ARB
define|#
directive|define
name|WGL_TRANSPARENT_ARB
value|0x200A
end_define
begin_define
DECL|macro|WGL_TRANSPARENT_RED_VALUE_ARB
define|#
directive|define
name|WGL_TRANSPARENT_RED_VALUE_ARB
value|0x2037
end_define
begin_define
DECL|macro|WGL_TRANSPARENT_GREEN_VALUE_ARB
define|#
directive|define
name|WGL_TRANSPARENT_GREEN_VALUE_ARB
value|0x2038
end_define
begin_define
DECL|macro|WGL_TRANSPARENT_BLUE_VALUE_ARB
define|#
directive|define
name|WGL_TRANSPARENT_BLUE_VALUE_ARB
value|0x2039
end_define
begin_define
DECL|macro|WGL_TRANSPARENT_ALPHA_VALUE_ARB
define|#
directive|define
name|WGL_TRANSPARENT_ALPHA_VALUE_ARB
value|0x203A
end_define
begin_define
DECL|macro|WGL_TRANSPARENT_INDEX_VALUE_ARB
define|#
directive|define
name|WGL_TRANSPARENT_INDEX_VALUE_ARB
value|0x203B
end_define
begin_define
DECL|macro|WGL_SHARE_DEPTH_ARB
define|#
directive|define
name|WGL_SHARE_DEPTH_ARB
value|0x200C
end_define
begin_define
DECL|macro|WGL_SHARE_STENCIL_ARB
define|#
directive|define
name|WGL_SHARE_STENCIL_ARB
value|0x200D
end_define
begin_define
DECL|macro|WGL_SHARE_ACCUM_ARB
define|#
directive|define
name|WGL_SHARE_ACCUM_ARB
value|0x200E
end_define
begin_define
DECL|macro|WGL_SUPPORT_GDI_ARB
define|#
directive|define
name|WGL_SUPPORT_GDI_ARB
value|0x200F
end_define
begin_define
DECL|macro|WGL_SUPPORT_OPENGL_ARB
define|#
directive|define
name|WGL_SUPPORT_OPENGL_ARB
value|0x2010
end_define
begin_define
DECL|macro|WGL_DOUBLE_BUFFER_ARB
define|#
directive|define
name|WGL_DOUBLE_BUFFER_ARB
value|0x2011
end_define
begin_define
DECL|macro|WGL_STEREO_ARB
define|#
directive|define
name|WGL_STEREO_ARB
value|0x2012
end_define
begin_define
DECL|macro|WGL_PIXEL_TYPE_ARB
define|#
directive|define
name|WGL_PIXEL_TYPE_ARB
value|0x2013
end_define
begin_define
DECL|macro|WGL_COLOR_BITS_ARB
define|#
directive|define
name|WGL_COLOR_BITS_ARB
value|0x2014
end_define
begin_define
DECL|macro|WGL_RED_BITS_ARB
define|#
directive|define
name|WGL_RED_BITS_ARB
value|0x2015
end_define
begin_define
DECL|macro|WGL_RED_SHIFT_ARB
define|#
directive|define
name|WGL_RED_SHIFT_ARB
value|0x2016
end_define
begin_define
DECL|macro|WGL_GREEN_BITS_ARB
define|#
directive|define
name|WGL_GREEN_BITS_ARB
value|0x2017
end_define
begin_define
DECL|macro|WGL_GREEN_SHIFT_ARB
define|#
directive|define
name|WGL_GREEN_SHIFT_ARB
value|0x2018
end_define
begin_define
DECL|macro|WGL_BLUE_BITS_ARB
define|#
directive|define
name|WGL_BLUE_BITS_ARB
value|0x2019
end_define
begin_define
DECL|macro|WGL_BLUE_SHIFT_ARB
define|#
directive|define
name|WGL_BLUE_SHIFT_ARB
value|0x201A
end_define
begin_define
DECL|macro|WGL_ALPHA_BITS_ARB
define|#
directive|define
name|WGL_ALPHA_BITS_ARB
value|0x201B
end_define
begin_define
DECL|macro|WGL_ALPHA_SHIFT_ARB
define|#
directive|define
name|WGL_ALPHA_SHIFT_ARB
value|0x201C
end_define
begin_define
DECL|macro|WGL_ACCUM_BITS_ARB
define|#
directive|define
name|WGL_ACCUM_BITS_ARB
value|0x201D
end_define
begin_define
DECL|macro|WGL_ACCUM_RED_BITS_ARB
define|#
directive|define
name|WGL_ACCUM_RED_BITS_ARB
value|0x201E
end_define
begin_define
DECL|macro|WGL_ACCUM_GREEN_BITS_ARB
define|#
directive|define
name|WGL_ACCUM_GREEN_BITS_ARB
value|0x201F
end_define
begin_define
DECL|macro|WGL_ACCUM_BLUE_BITS_ARB
define|#
directive|define
name|WGL_ACCUM_BLUE_BITS_ARB
value|0x2020
end_define
begin_define
DECL|macro|WGL_ACCUM_ALPHA_BITS_ARB
define|#
directive|define
name|WGL_ACCUM_ALPHA_BITS_ARB
value|0x2021
end_define
begin_define
DECL|macro|WGL_DEPTH_BITS_ARB
define|#
directive|define
name|WGL_DEPTH_BITS_ARB
value|0x2022
end_define
begin_define
DECL|macro|WGL_STENCIL_BITS_ARB
define|#
directive|define
name|WGL_STENCIL_BITS_ARB
value|0x2023
end_define
begin_define
DECL|macro|WGL_AUX_BUFFERS_ARB
define|#
directive|define
name|WGL_AUX_BUFFERS_ARB
value|0x2024
end_define
begin_define
DECL|macro|WGL_NO_ACCELERATION_ARB
define|#
directive|define
name|WGL_NO_ACCELERATION_ARB
value|0x2025
end_define
begin_define
DECL|macro|WGL_GENERIC_ACCELERATION_ARB
define|#
directive|define
name|WGL_GENERIC_ACCELERATION_ARB
value|0x2026
end_define
begin_define
DECL|macro|WGL_FULL_ACCELERATION_ARB
define|#
directive|define
name|WGL_FULL_ACCELERATION_ARB
value|0x2027
end_define
begin_define
DECL|macro|WGL_SWAP_EXCHANGE_ARB
define|#
directive|define
name|WGL_SWAP_EXCHANGE_ARB
value|0x2028
end_define
begin_define
DECL|macro|WGL_SWAP_COPY_ARB
define|#
directive|define
name|WGL_SWAP_COPY_ARB
value|0x2029
end_define
begin_define
DECL|macro|WGL_SWAP_UNDEFINED_ARB
define|#
directive|define
name|WGL_SWAP_UNDEFINED_ARB
value|0x202A
end_define
begin_define
DECL|macro|WGL_TYPE_RGBA_ARB
define|#
directive|define
name|WGL_TYPE_RGBA_ARB
value|0x202B
end_define
begin_define
DECL|macro|WGL_TYPE_COLORINDEX_ARB
define|#
directive|define
name|WGL_TYPE_COLORINDEX_ARB
value|0x202C
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|WGL_ARB_create_context
end_ifndef
begin_define
DECL|macro|WGL_CONTEXT_MAJOR_VERSION_ARB
define|#
directive|define
name|WGL_CONTEXT_MAJOR_VERSION_ARB
value|0x2091
end_define
begin_define
DECL|macro|WGL_CONTEXT_MINOR_VERSION_ARB
define|#
directive|define
name|WGL_CONTEXT_MINOR_VERSION_ARB
value|0x2092
end_define
begin_define
DECL|macro|WGL_CONTEXT_LAYER_PLANE_ARB
define|#
directive|define
name|WGL_CONTEXT_LAYER_PLANE_ARB
value|0x2093
end_define
begin_define
DECL|macro|WGL_CONTEXT_FLAGS_ARB
define|#
directive|define
name|WGL_CONTEXT_FLAGS_ARB
value|0x2094
end_define
begin_define
DECL|macro|WGL_CONTEXT_PROFILE_MASK_ARB
define|#
directive|define
name|WGL_CONTEXT_PROFILE_MASK_ARB
value|0x9126
end_define
begin_define
DECL|macro|WGL_CONTEXT_DEBUG_BIT_ARB
define|#
directive|define
name|WGL_CONTEXT_DEBUG_BIT_ARB
value|0x0001
end_define
begin_define
DECL|macro|WGL_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB
define|#
directive|define
name|WGL_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB
value|0x0002
end_define
begin_define
DECL|macro|WGL_CONTEXT_CORE_PROFILE_BIT_ARB
define|#
directive|define
name|WGL_CONTEXT_CORE_PROFILE_BIT_ARB
value|0x0001
end_define
begin_define
DECL|macro|WGL_CONTEXT_COMPATIBILITY_PROFILE_BIT_ARB
define|#
directive|define
name|WGL_CONTEXT_COMPATIBILITY_PROFILE_BIT_ARB
value|0x0002
end_define
begin_comment
comment|// Error codes returned by GetLastError().
end_comment
begin_define
DECL|macro|ERROR_INVALID_VERSION_ARB
define|#
directive|define
name|ERROR_INVALID_VERSION_ARB
value|0x2095
end_define
begin_define
DECL|macro|ERROR_INVALID_PROFILE_ARB
define|#
directive|define
name|ERROR_INVALID_PROFILE_ARB
value|0x2096
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|GL_VERSION_3_2
end_ifndef
begin_define
DECL|macro|GL_CONTEXT_PROFILE_MASK
define|#
directive|define
name|GL_CONTEXT_PROFILE_MASK
value|0x9126
end_define
begin_define
DECL|macro|GL_MAJOR_VERSION
define|#
directive|define
name|GL_MAJOR_VERSION
value|0x821B
end_define
begin_define
DECL|macro|GL_MINOR_VERSION
define|#
directive|define
name|GL_MINOR_VERSION
value|0x821C
end_define
begin_define
DECL|macro|GL_NUM_EXTENSIONS
define|#
directive|define
name|GL_NUM_EXTENSIONS
value|0x821D
end_define
begin_define
DECL|macro|GL_CONTEXT_FLAGS
define|#
directive|define
name|GL_CONTEXT_FLAGS
value|0x821E
end_define
begin_define
DECL|macro|GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT
define|#
directive|define
name|GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT
value|0x0001
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_class
DECL|class|QGLCmapPrivate
class|class
name|QGLCmapPrivate
block|{
public|public:
DECL|function|QGLCmapPrivate
name|QGLCmapPrivate
parameter_list|()
member_init_list|:
name|count
argument_list|(
literal|1
argument_list|)
block|{ }
DECL|function|ref
name|void
name|ref
parameter_list|()
block|{
operator|++
name|count
expr_stmt|;
block|}
DECL|function|deref
name|bool
name|deref
parameter_list|()
block|{
return|return
operator|!
operator|--
name|count
return|;
block|}
DECL|member|count
name|uint
name|count
decl_stmt|;
DECL|enum|AllocState
DECL|enumerator|UnAllocated
DECL|enumerator|Allocated
DECL|enumerator|Reserved
enum|enum
name|AllocState
block|{
name|UnAllocated
init|=
literal|0
block|,
name|Allocated
init|=
literal|0x01
block|,
name|Reserved
init|=
literal|0x02
block|}
enum|;
DECL|member|maxSize
name|int
name|maxSize
decl_stmt|;
DECL|member|colorArray
name|QVector
argument_list|<
name|uint
argument_list|>
name|colorArray
decl_stmt|;
DECL|member|allocArray
name|QVector
argument_list|<
name|quint8
argument_list|>
name|allocArray
decl_stmt|;
DECL|member|contextArray
name|QVector
argument_list|<
name|quint8
argument_list|>
name|contextArray
decl_stmt|;
DECL|member|colorMap
name|QMap
argument_list|<
name|uint
argument_list|,
name|int
argument_list|>
name|colorMap
decl_stmt|;
block|}
class|;
end_class
begin_comment
comment|/*****************************************************************************   QColorMap class - temporarily here, until it is ready for prime time  *****************************************************************************/
end_comment
begin_comment
comment|/**************************************************************************** ** ** Definition of QColorMap class ** ****************************************************************************/
end_comment
begin_class_decl
class_decl|class
name|QGLCmapPrivate
class_decl|;
end_class_decl
begin_class
DECL|class|QGLCmap
class|class
comment|/*Q_EXPORT*/
name|QGLCmap
block|{
public|public:
DECL|enum|Flags
DECL|enumerator|Reserved
enum|enum
name|Flags
block|{
name|Reserved
init|=
literal|0x01
block|}
enum|;
name|QGLCmap
parameter_list|(
name|int
name|maxSize
init|=
literal|256
parameter_list|)
constructor_decl|;
name|QGLCmap
parameter_list|(
specifier|const
name|QGLCmap
modifier|&
name|map
parameter_list|)
constructor_decl|;
name|~
name|QGLCmap
parameter_list|()
destructor_decl|;
name|QGLCmap
modifier|&
name|operator
name|=
parameter_list|(
specifier|const
name|QGLCmap
modifier|&
name|map
parameter_list|)
function_decl|;
comment|// isEmpty and/or isNull ?
name|int
name|size
parameter_list|()
specifier|const
function_decl|;
name|int
name|maxSize
parameter_list|()
specifier|const
function_decl|;
name|void
name|resize
parameter_list|(
name|int
name|newSize
parameter_list|)
function_decl|;
name|int
name|find
parameter_list|(
name|QRgb
name|color
parameter_list|)
specifier|const
function_decl|;
name|int
name|findNearest
parameter_list|(
name|QRgb
name|color
parameter_list|)
specifier|const
function_decl|;
name|int
name|allocate
parameter_list|(
name|QRgb
name|color
parameter_list|,
name|uint
name|flags
init|=
literal|0
parameter_list|,
name|quint8
name|context
init|=
literal|0
parameter_list|)
function_decl|;
name|void
name|setEntry
parameter_list|(
name|int
name|idx
parameter_list|,
name|QRgb
name|color
parameter_list|,
name|uint
name|flags
init|=
literal|0
parameter_list|,
name|quint8
name|context
init|=
literal|0
parameter_list|)
function_decl|;
specifier|const
name|QRgb
modifier|*
name|colors
parameter_list|()
specifier|const
function_decl|;
private|private:
name|void
name|detach
parameter_list|()
function_decl|;
DECL|member|d
name|QGLCmapPrivate
modifier|*
name|d
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|QGLCmap
name|QGLCmap
operator|::
name|QGLCmap
parameter_list|(
name|int
name|maxSize
parameter_list|)
comment|// add a bool prealloc?
block|{
name|d
operator|=
operator|new
name|QGLCmapPrivate
expr_stmt|;
name|d
operator|->
name|maxSize
operator|=
name|maxSize
expr_stmt|;
block|}
end_constructor
begin_constructor
DECL|function|QGLCmap
name|QGLCmap
operator|::
name|QGLCmap
parameter_list|(
specifier|const
name|QGLCmap
modifier|&
name|map
parameter_list|)
block|{
name|d
operator|=
name|map
operator|.
name|d
expr_stmt|;
name|d
operator|->
name|ref
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QGLCmap
name|QGLCmap
operator|::
name|~
name|QGLCmap
parameter_list|()
block|{
if|if
condition|(
name|d
operator|&&
name|d
operator|->
name|deref
argument_list|()
condition|)
operator|delete
name|d
expr_stmt|;
name|d
operator|=
literal|0
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|operator =
name|QGLCmap
modifier|&
name|QGLCmap
operator|::
name|operator
name|=
parameter_list|(
specifier|const
name|QGLCmap
modifier|&
name|map
parameter_list|)
block|{
name|map
operator|.
name|d
operator|->
name|ref
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|deref
argument_list|()
condition|)
operator|delete
name|d
expr_stmt|;
name|d
operator|=
name|map
operator|.
name|d
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_function
begin_function
DECL|function|size
name|int
name|QGLCmap
operator|::
name|size
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|colorArray
operator|.
name|size
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|maxSize
name|int
name|QGLCmap
operator|::
name|maxSize
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|maxSize
return|;
block|}
end_function
begin_function
DECL|function|detach
name|void
name|QGLCmap
operator|::
name|detach
parameter_list|()
block|{
if|if
condition|(
name|d
operator|->
name|count
operator|!=
literal|1
condition|)
block|{
name|d
operator|->
name|deref
argument_list|()
expr_stmt|;
name|QGLCmapPrivate
modifier|*
name|newd
init|=
operator|new
name|QGLCmapPrivate
decl_stmt|;
name|newd
operator|->
name|maxSize
operator|=
name|d
operator|->
name|maxSize
expr_stmt|;
name|newd
operator|->
name|colorArray
operator|=
name|d
operator|->
name|colorArray
expr_stmt|;
name|newd
operator|->
name|allocArray
operator|=
name|d
operator|->
name|allocArray
expr_stmt|;
name|newd
operator|->
name|contextArray
operator|=
name|d
operator|->
name|contextArray
expr_stmt|;
name|newd
operator|->
name|colorArray
operator|.
name|detach
argument_list|()
expr_stmt|;
name|newd
operator|->
name|allocArray
operator|.
name|detach
argument_list|()
expr_stmt|;
name|newd
operator|->
name|contextArray
operator|.
name|detach
argument_list|()
expr_stmt|;
name|newd
operator|->
name|colorMap
operator|=
name|d
operator|->
name|colorMap
expr_stmt|;
name|d
operator|=
name|newd
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|resize
name|void
name|QGLCmap
operator|::
name|resize
parameter_list|(
name|int
name|newSize
parameter_list|)
block|{
if|if
condition|(
name|newSize
argument_list|<
literal|0
operator|||
name|newSize
argument_list|>
name|d
operator|->
name|maxSize
condition|)
block|{
name|qWarning
argument_list|(
literal|"QGLCmap::resize(): size out of range"
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|oldSize
init|=
name|size
argument_list|()
decl_stmt|;
name|detach
argument_list|()
expr_stmt|;
comment|//if shrinking; remove the lost elems from colorMap
name|d
operator|->
name|colorArray
operator|.
name|resize
argument_list|(
name|newSize
argument_list|)
expr_stmt|;
name|d
operator|->
name|allocArray
operator|.
name|resize
argument_list|(
name|newSize
argument_list|)
expr_stmt|;
name|d
operator|->
name|contextArray
operator|.
name|resize
argument_list|(
name|newSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|newSize
operator|>
name|oldSize
condition|)
block|{
name|memset
argument_list|(
name|d
operator|->
name|allocArray
operator|.
name|data
argument_list|()
operator|+
name|oldSize
argument_list|,
literal|0
argument_list|,
name|newSize
operator|-
name|oldSize
argument_list|)
expr_stmt|;
name|memset
argument_list|(
name|d
operator|->
name|contextArray
operator|.
name|data
argument_list|()
operator|+
name|oldSize
argument_list|,
literal|0
argument_list|,
name|newSize
operator|-
name|oldSize
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|find
name|int
name|QGLCmap
operator|::
name|find
parameter_list|(
name|QRgb
name|color
parameter_list|)
specifier|const
block|{
name|QMap
argument_list|<
name|uint
argument_list|,
name|int
argument_list|>
operator|::
name|ConstIterator
name|it
init|=
name|d
operator|->
name|colorMap
operator|.
name|find
argument_list|(
name|color
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|!=
name|d
operator|->
name|colorMap
operator|.
name|end
argument_list|()
condition|)
return|return
operator|*
name|it
return|;
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|findNearest
name|int
name|QGLCmap
operator|::
name|findNearest
parameter_list|(
name|QRgb
name|color
parameter_list|)
specifier|const
block|{
name|int
name|idx
init|=
name|find
argument_list|(
name|color
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|>=
literal|0
condition|)
return|return
name|idx
return|;
name|int
name|mapSize
init|=
name|size
argument_list|()
decl_stmt|;
name|int
name|mindist
init|=
literal|200000
decl_stmt|;
name|int
name|r
init|=
name|qRed
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|int
name|g
init|=
name|qGreen
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|int
name|b
init|=
name|qBlue
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|int
name|rx
decl_stmt|,
name|gx
decl_stmt|,
name|bx
decl_stmt|,
name|dist
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mapSize
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|d
operator|->
name|allocArray
index|[
name|i
index|]
operator|&
name|QGLCmapPrivate
operator|::
name|Allocated
operator|)
condition|)
continue|continue;
name|QRgb
name|ci
init|=
name|d
operator|->
name|colorArray
index|[
name|i
index|]
decl_stmt|;
name|rx
operator|=
name|r
operator|-
name|qRed
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|gx
operator|=
name|g
operator|-
name|qGreen
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|bx
operator|=
name|b
operator|-
name|qBlue
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|dist
operator|=
name|rx
operator|*
name|rx
operator|+
name|gx
operator|*
name|gx
operator|+
name|bx
operator|*
name|bx
expr_stmt|;
comment|// calculate distance
if|if
condition|(
name|dist
operator|<
name|mindist
condition|)
block|{
comment|// minimal?
name|mindist
operator|=
name|dist
expr_stmt|;
name|idx
operator|=
name|i
expr_stmt|;
block|}
block|}
return|return
name|idx
return|;
block|}
end_function
begin_comment
comment|// Does not always allocate; returns existing c idx if found
end_comment
begin_function
DECL|function|allocate
name|int
name|QGLCmap
operator|::
name|allocate
parameter_list|(
name|QRgb
name|color
parameter_list|,
name|uint
name|flags
parameter_list|,
name|quint8
name|context
parameter_list|)
block|{
name|int
name|idx
init|=
name|find
argument_list|(
name|color
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|>=
literal|0
condition|)
return|return
name|idx
return|;
name|int
name|mapSize
init|=
name|d
operator|->
name|colorArray
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|newIdx
init|=
name|d
operator|->
name|allocArray
operator|.
name|indexOf
argument_list|(
name|QGLCmapPrivate
operator|::
name|UnAllocated
argument_list|)
decl_stmt|;
if|if
condition|(
name|newIdx
operator|<
literal|0
condition|)
block|{
comment|// Must allocate more room
if|if
condition|(
name|mapSize
operator|<
name|d
operator|->
name|maxSize
condition|)
block|{
name|newIdx
operator|=
name|mapSize
expr_stmt|;
name|mapSize
operator|++
expr_stmt|;
name|resize
argument_list|(
name|mapSize
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//# add a bool param that says what to do in case no more room -
comment|// fail (-1) or return nearest?
return|return
operator|-
literal|1
return|;
block|}
block|}
name|d
operator|->
name|colorArray
index|[
name|newIdx
index|]
operator|=
name|color
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|QGLCmap
operator|::
name|Reserved
condition|)
block|{
name|d
operator|->
name|allocArray
index|[
name|newIdx
index|]
operator|=
name|QGLCmapPrivate
operator|::
name|Reserved
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|allocArray
index|[
name|newIdx
index|]
operator|=
name|QGLCmapPrivate
operator|::
name|Allocated
expr_stmt|;
name|d
operator|->
name|colorMap
operator|.
name|insert
argument_list|(
name|color
argument_list|,
name|newIdx
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|contextArray
index|[
name|newIdx
index|]
operator|=
name|context
expr_stmt|;
return|return
name|newIdx
return|;
block|}
end_function
begin_function
DECL|function|setEntry
name|void
name|QGLCmap
operator|::
name|setEntry
parameter_list|(
name|int
name|idx
parameter_list|,
name|QRgb
name|color
parameter_list|,
name|uint
name|flags
parameter_list|,
name|quint8
name|context
parameter_list|)
block|{
if|if
condition|(
name|idx
operator|<
literal|0
operator|||
name|idx
operator|>=
name|d
operator|->
name|maxSize
condition|)
block|{
name|qWarning
argument_list|(
literal|"QGLCmap::set(): Index out of range"
argument_list|)
expr_stmt|;
return|return;
block|}
name|detach
argument_list|()
expr_stmt|;
name|int
name|mapSize
init|=
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|idx
operator|>=
name|mapSize
condition|)
block|{
name|mapSize
operator|=
name|idx
operator|+
literal|1
expr_stmt|;
name|resize
argument_list|(
name|mapSize
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|colorArray
index|[
name|idx
index|]
operator|=
name|color
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|QGLCmap
operator|::
name|Reserved
condition|)
block|{
name|d
operator|->
name|allocArray
index|[
name|idx
index|]
operator|=
name|QGLCmapPrivate
operator|::
name|Reserved
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|allocArray
index|[
name|idx
index|]
operator|=
name|QGLCmapPrivate
operator|::
name|Allocated
expr_stmt|;
name|d
operator|->
name|colorMap
operator|.
name|insert
argument_list|(
name|color
argument_list|,
name|idx
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|contextArray
index|[
name|idx
index|]
operator|=
name|context
expr_stmt|;
block|}
end_function
begin_function
DECL|function|colors
specifier|const
name|QRgb
modifier|*
name|QGLCmap
operator|::
name|colors
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|colorArray
operator|.
name|data
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*****************************************************************************   QGLFormat Win32/WGL-specific code  *****************************************************************************/
end_comment
begin_function
DECL|function|qwglError
name|void
name|qwglError
parameter_list|(
specifier|const
name|char
modifier|*
name|method
parameter_list|,
specifier|const
name|char
modifier|*
name|func
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_DEBUG
name|char
modifier|*
name|lpMsgBuf
decl_stmt|;
name|FormatMessageA
argument_list|(
name|FORMAT_MESSAGE_ALLOCATE_BUFFER
operator||
name|FORMAT_MESSAGE_FROM_SYSTEM
argument_list|,
literal|0
argument_list|,
name|GetLastError
argument_list|()
argument_list|,
name|MAKELANGID
argument_list|(
name|LANG_NEUTRAL
argument_list|,
name|SUBLANG_DEFAULT
argument_list|)
argument_list|,
operator|(
name|char
operator|*
operator|)
operator|&
name|lpMsgBuf
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|qWarning
argument_list|(
literal|"%s : %s failed: %s"
argument_list|,
name|method
argument_list|,
name|func
argument_list|,
name|lpMsgBuf
argument_list|)
expr_stmt|;
name|LocalFree
argument_list|(
name|lpMsgBuf
argument_list|)
expr_stmt|;
else|#
directive|else
name|Q_UNUSED
argument_list|(
name|method
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|func
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|hasOpenGL
name|bool
name|QGLFormat
operator|::
name|hasOpenGL
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
end_function
begin_decl_stmt
DECL|variable|opengl32dll
specifier|static
name|bool
name|opengl32dll
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|hasOpenGLOverlays
name|bool
name|QGLFormat
operator|::
name|hasOpenGLOverlays
parameter_list|()
block|{
comment|// workaround for matrox driver:
comment|// make a cheap call to opengl to force loading of DLL
if|if
condition|(
operator|!
name|opengl32dll
condition|)
block|{
name|GLint
name|params
decl_stmt|;
name|glGetIntegerv
argument_list|(
name|GL_DEPTH_BITS
argument_list|,
operator|&
name|params
argument_list|)
expr_stmt|;
name|opengl32dll
operator|=
literal|true
expr_stmt|;
block|}
specifier|static
name|bool
name|checkDone
init|=
literal|false
decl_stmt|;
specifier|static
name|bool
name|hasOl
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|checkDone
condition|)
block|{
name|checkDone
operator|=
literal|true
expr_stmt|;
name|HDC
name|display_dc
init|=
name|GetDC
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|int
name|pfiMax
init|=
name|DescribePixelFormat
argument_list|(
name|display_dc
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|NULL
argument_list|)
decl_stmt|;
name|PIXELFORMATDESCRIPTOR
name|pfd
decl_stmt|;
for|for
control|(
name|int
name|pfi
init|=
literal|1
init|;
name|pfi
operator|<=
name|pfiMax
condition|;
name|pfi
operator|++
control|)
block|{
name|DescribePixelFormat
argument_list|(
name|display_dc
argument_list|,
name|pfi
argument_list|,
sizeof|sizeof
argument_list|(
name|PIXELFORMATDESCRIPTOR
argument_list|)
argument_list|,
operator|&
name|pfd
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|pfd
operator|.
name|bReserved
operator|&
literal|0x0f
operator|)
operator|&&
operator|(
name|pfd
operator|.
name|dwFlags
operator|&
name|PFD_SUPPORT_OPENGL
operator|)
condition|)
block|{
comment|// This format has overlays/underlays
name|LAYERPLANEDESCRIPTOR
name|lpd
decl_stmt|;
name|wglDescribeLayerPlane
argument_list|(
name|display_dc
argument_list|,
name|pfi
argument_list|,
literal|1
argument_list|,
sizeof|sizeof
argument_list|(
name|LAYERPLANEDESCRIPTOR
argument_list|)
argument_list|,
operator|&
name|lpd
argument_list|)
expr_stmt|;
if|if
condition|(
name|lpd
operator|.
name|dwFlags
operator|&
name|LPD_SUPPORT_OPENGL
condition|)
block|{
name|hasOl
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
name|ReleaseDC
argument_list|(
literal|0
argument_list|,
name|display_dc
argument_list|)
expr_stmt|;
block|}
return|return
name|hasOl
return|;
block|}
end_function
begin_comment
comment|/*****************************************************************************   QGLContext Win32/WGL-specific code  *****************************************************************************/
end_comment
begin_function
DECL|function|qgl_rgb_palette_comp
specifier|static
name|uchar
name|qgl_rgb_palette_comp
parameter_list|(
name|int
name|idx
parameter_list|,
name|uint
name|nbits
parameter_list|,
name|uint
name|shift
parameter_list|)
block|{
specifier|const
name|uchar
name|map_3_to_8
index|[
literal|8
index|]
init|=
block|{
literal|0
block|,
literal|0111
operator|>>
literal|1
block|,
literal|0222
operator|>>
literal|1
block|,
literal|0333
operator|>>
literal|1
block|,
literal|0444
operator|>>
literal|1
block|,
literal|0555
operator|>>
literal|1
block|,
literal|0666
operator|>>
literal|1
block|,
literal|0377
block|}
decl_stmt|;
specifier|const
name|uchar
name|map_2_to_8
index|[
literal|4
index|]
init|=
block|{
literal|0
block|,
literal|0x55
block|,
literal|0xaa
block|,
literal|0xff
block|}
decl_stmt|;
specifier|const
name|uchar
name|map_1_to_8
index|[
literal|2
index|]
init|=
block|{
literal|0
block|,
literal|255
block|}
decl_stmt|;
name|uchar
name|val
init|=
call|(
name|uchar
call|)
argument_list|(
name|idx
operator|>>
name|shift
argument_list|)
decl_stmt|;
name|uchar
name|res
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|nbits
condition|)
block|{
case|case
literal|1
case|:
name|val
operator|&=
literal|0x1
expr_stmt|;
name|res
operator|=
name|map_1_to_8
index|[
name|val
index|]
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|val
operator|&=
literal|0x3
expr_stmt|;
name|res
operator|=
name|map_2_to_8
index|[
name|val
index|]
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|val
operator|&=
literal|0x7
expr_stmt|;
name|res
operator|=
name|map_3_to_8
index|[
name|val
index|]
expr_stmt|;
break|break;
default|default:
name|res
operator|=
literal|0
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
end_function
begin_function
DECL|function|qgl_create_rgb_palette
specifier|static
name|QRgb
modifier|*
name|qgl_create_rgb_palette
parameter_list|(
specifier|const
name|PIXELFORMATDESCRIPTOR
modifier|*
name|pfd
parameter_list|)
block|{
if|if
condition|(
operator|(
name|pfd
operator|->
name|iPixelType
operator|!=
name|PFD_TYPE_RGBA
operator|)
operator|||
operator|!
operator|(
name|pfd
operator|->
name|dwFlags
operator|&
name|PFD_NEED_PALETTE
operator|)
operator|||
operator|(
name|pfd
operator|->
name|cColorBits
operator|!=
literal|8
operator|)
condition|)
return|return
literal|0
return|;
name|int
name|numEntries
init|=
literal|1
operator|<<
name|pfd
operator|->
name|cColorBits
decl_stmt|;
name|QRgb
modifier|*
name|pal
init|=
operator|new
name|QRgb
index|[
name|numEntries
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numEntries
condition|;
name|i
operator|++
control|)
block|{
name|int
name|r
init|=
name|qgl_rgb_palette_comp
argument_list|(
name|i
argument_list|,
name|pfd
operator|->
name|cRedBits
argument_list|,
name|pfd
operator|->
name|cRedShift
argument_list|)
decl_stmt|;
name|int
name|g
init|=
name|qgl_rgb_palette_comp
argument_list|(
name|i
argument_list|,
name|pfd
operator|->
name|cGreenBits
argument_list|,
name|pfd
operator|->
name|cGreenShift
argument_list|)
decl_stmt|;
name|int
name|b
init|=
name|qgl_rgb_palette_comp
argument_list|(
name|i
argument_list|,
name|pfd
operator|->
name|cBlueBits
argument_list|,
name|pfd
operator|->
name|cBlueShift
argument_list|)
decl_stmt|;
name|pal
index|[
name|i
index|]
operator|=
name|qRgb
argument_list|(
name|r
argument_list|,
name|g
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
specifier|const
name|int
name|syscol_indices
index|[
literal|12
index|]
init|=
block|{
literal|3
block|,
literal|24
block|,
literal|27
block|,
literal|64
block|,
literal|67
block|,
literal|88
block|,
literal|173
block|,
literal|181
block|,
literal|236
block|,
literal|247
block|,
literal|164
block|,
literal|91
block|}
decl_stmt|;
specifier|const
name|uint
name|syscols
index|[
literal|20
index|]
init|=
block|{
literal|0x000000
block|,
literal|0x800000
block|,
literal|0x008000
block|,
literal|0x808000
block|,
literal|0x000080
block|,
literal|0x800080
block|,
literal|0x008080
block|,
literal|0xc0c0c0
block|,
literal|0xc0dcc0
block|,
literal|0xa6caf0
block|,
literal|0xfffbf0
block|,
literal|0xa0a0a4
block|,
literal|0x808080
block|,
literal|0xff0000
block|,
literal|0x00ff00
block|,
literal|0xffff00
block|,
literal|0x0000ff
block|,
literal|0xff00ff
block|,
literal|0x00ffff
block|,
literal|0xffffff
block|}
decl_stmt|;
comment|// colors #1 - #12 are not present in pal; gets added below
if|if
condition|(
operator|(
name|pfd
operator|->
name|cColorBits
operator|==
literal|8
operator|)
operator|&&
operator|(
name|pfd
operator|->
name|cRedBits
operator|==
literal|3
operator|)
operator|&&
operator|(
name|pfd
operator|->
name|cRedShift
operator|==
literal|0
operator|)
operator|&&
operator|(
name|pfd
operator|->
name|cGreenBits
operator|==
literal|3
operator|)
operator|&&
operator|(
name|pfd
operator|->
name|cGreenShift
operator|==
literal|3
operator|)
operator|&&
operator|(
name|pfd
operator|->
name|cBlueBits
operator|==
literal|2
operator|)
operator|&&
operator|(
name|pfd
operator|->
name|cBlueShift
operator|==
literal|6
operator|)
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|12
condition|;
name|j
operator|++
control|)
name|pal
index|[
name|syscol_indices
index|[
name|j
index|]
index|]
operator|=
name|QRgb
argument_list|(
name|syscols
index|[
name|j
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|pal
return|;
block|}
end_function
begin_function
DECL|function|pfdToQGLFormat
specifier|static
name|QGLFormat
name|pfdToQGLFormat
parameter_list|(
specifier|const
name|PIXELFORMATDESCRIPTOR
modifier|*
name|pfd
parameter_list|)
block|{
name|QGLFormat
name|fmt
decl_stmt|;
name|fmt
operator|.
name|setDoubleBuffer
argument_list|(
name|pfd
operator|->
name|dwFlags
operator|&
name|PFD_DOUBLEBUFFER
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setDepth
argument_list|(
name|pfd
operator|->
name|cDepthBits
argument_list|)
expr_stmt|;
if|if
condition|(
name|fmt
operator|.
name|depth
argument_list|()
condition|)
name|fmt
operator|.
name|setDepthBufferSize
argument_list|(
name|pfd
operator|->
name|cDepthBits
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setRgba
argument_list|(
name|pfd
operator|->
name|iPixelType
operator|==
name|PFD_TYPE_RGBA
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setRedBufferSize
argument_list|(
name|pfd
operator|->
name|cRedBits
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setGreenBufferSize
argument_list|(
name|pfd
operator|->
name|cGreenBits
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setBlueBufferSize
argument_list|(
name|pfd
operator|->
name|cBlueBits
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setAlpha
argument_list|(
name|pfd
operator|->
name|cAlphaBits
argument_list|)
expr_stmt|;
if|if
condition|(
name|fmt
operator|.
name|alpha
argument_list|()
condition|)
name|fmt
operator|.
name|setAlphaBufferSize
argument_list|(
name|pfd
operator|->
name|cAlphaBits
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setAccum
argument_list|(
name|pfd
operator|->
name|cAccumBits
argument_list|)
expr_stmt|;
if|if
condition|(
name|fmt
operator|.
name|accum
argument_list|()
condition|)
name|fmt
operator|.
name|setAccumBufferSize
argument_list|(
name|pfd
operator|->
name|cAccumRedBits
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setStencil
argument_list|(
name|pfd
operator|->
name|cStencilBits
argument_list|)
expr_stmt|;
if|if
condition|(
name|fmt
operator|.
name|stencil
argument_list|()
condition|)
name|fmt
operator|.
name|setStencilBufferSize
argument_list|(
name|pfd
operator|->
name|cStencilBits
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setStereo
argument_list|(
name|pfd
operator|->
name|dwFlags
operator|&
name|PFD_STEREO
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setDirectRendering
argument_list|(
operator|(
name|pfd
operator|->
name|dwFlags
operator|&
name|PFD_GENERIC_ACCELERATED
operator|)
operator|||
operator|!
operator|(
name|pfd
operator|->
name|dwFlags
operator|&
name|PFD_GENERIC_FORMAT
operator|)
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setOverlay
argument_list|(
operator|(
name|pfd
operator|->
name|bReserved
operator|&
literal|0x0f
operator|)
operator|!=
literal|0
argument_list|)
expr_stmt|;
return|return
name|fmt
return|;
block|}
end_function
begin_comment
comment|/*    NB! requires a current GL context to work */
end_comment
begin_function
DECL|function|pfiToQGLFormat
name|QGLFormat
name|pfiToQGLFormat
parameter_list|(
name|HDC
name|hdc
parameter_list|,
name|int
name|pfi
parameter_list|)
block|{
name|QGLFormat
name|fmt
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|int
argument_list|>
name|iAttributes
argument_list|(
literal|40
argument_list|)
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|int
argument_list|>
name|iValues
argument_list|(
literal|40
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|bool
name|has_sample_buffers
init|=
name|QGLExtensions
operator|::
name|glExtensions
argument_list|()
operator|&
name|QGLExtensions
operator|::
name|SampleBuffers
decl_stmt|;
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|WGL_DOUBLE_BUFFER_ARB
expr_stmt|;
comment|// 0
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|WGL_DEPTH_BITS_ARB
expr_stmt|;
comment|// 1
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|WGL_PIXEL_TYPE_ARB
expr_stmt|;
comment|// 2
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|WGL_RED_BITS_ARB
expr_stmt|;
comment|// 3
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|WGL_GREEN_BITS_ARB
expr_stmt|;
comment|// 4
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|WGL_BLUE_BITS_ARB
expr_stmt|;
comment|// 5
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|WGL_ALPHA_BITS_ARB
expr_stmt|;
comment|// 6
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|WGL_ACCUM_BITS_ARB
expr_stmt|;
comment|// 7
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|WGL_STENCIL_BITS_ARB
expr_stmt|;
comment|// 8
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|WGL_STEREO_ARB
expr_stmt|;
comment|// 9
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|WGL_ACCELERATION_ARB
expr_stmt|;
comment|// 10
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|WGL_NUMBER_OVERLAYS_ARB
expr_stmt|;
comment|// 11
if|if
condition|(
name|has_sample_buffers
condition|)
block|{
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|WGL_SAMPLE_BUFFERS_ARB
expr_stmt|;
comment|// 12
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|WGL_SAMPLES_ARB
expr_stmt|;
comment|// 13
block|}
name|PFNWGLGETPIXELFORMATATTRIBIVARB
name|wglGetPixelFormatAttribivARB
init|=
operator|(
name|PFNWGLGETPIXELFORMATATTRIBIVARB
operator|)
name|wglGetProcAddress
argument_list|(
literal|"wglGetPixelFormatAttribivARB"
argument_list|)
decl_stmt|;
if|if
condition|(
name|wglGetPixelFormatAttribivARB
operator|&&
name|wglGetPixelFormatAttribivARB
argument_list|(
name|hdc
argument_list|,
name|pfi
argument_list|,
literal|0
argument_list|,
name|i
argument_list|,
name|iAttributes
operator|.
name|constData
argument_list|()
argument_list|,
name|iValues
operator|.
name|data
argument_list|()
argument_list|)
condition|)
block|{
name|fmt
operator|.
name|setDoubleBuffer
argument_list|(
name|iValues
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setDepth
argument_list|(
name|iValues
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|fmt
operator|.
name|depth
argument_list|()
condition|)
name|fmt
operator|.
name|setDepthBufferSize
argument_list|(
name|iValues
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setRgba
argument_list|(
name|iValues
index|[
literal|2
index|]
operator|==
name|WGL_TYPE_RGBA_ARB
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setRedBufferSize
argument_list|(
name|iValues
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setGreenBufferSize
argument_list|(
name|iValues
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setBlueBufferSize
argument_list|(
name|iValues
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setAlpha
argument_list|(
name|iValues
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|fmt
operator|.
name|alpha
argument_list|()
condition|)
name|fmt
operator|.
name|setAlphaBufferSize
argument_list|(
name|iValues
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setAccum
argument_list|(
name|iValues
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|fmt
operator|.
name|accum
argument_list|()
condition|)
name|fmt
operator|.
name|setAccumBufferSize
argument_list|(
name|iValues
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setStencil
argument_list|(
name|iValues
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|fmt
operator|.
name|stencil
argument_list|()
condition|)
name|fmt
operator|.
name|setStencilBufferSize
argument_list|(
name|iValues
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setStereo
argument_list|(
name|iValues
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|iValues
index|[
literal|10
index|]
operator|==
name|WGL_FULL_ACCELERATION_ARB
condition|)
name|fmt
operator|.
name|setDirectRendering
argument_list|(
literal|true
argument_list|)
expr_stmt|;
else|else
name|fmt
operator|.
name|setDirectRendering
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setOverlay
argument_list|(
name|iValues
index|[
literal|11
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|has_sample_buffers
condition|)
block|{
name|fmt
operator|.
name|setSampleBuffers
argument_list|(
name|iValues
index|[
literal|12
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|fmt
operator|.
name|sampleBuffers
argument_list|()
condition|)
name|fmt
operator|.
name|setSamples
argument_list|(
name|iValues
index|[
literal|13
index|]
argument_list|)
expr_stmt|;
block|}
block|}
if|#
directive|if
literal|0
block|qDebug()<< "values for pfi:"<< pfi;     qDebug()<< "doublebuffer  0:"<< fmt.doubleBuffer();     qDebug()<< "depthbuffer   1:"<< fmt.depthBufferSize();     qDebug()<< "rgba          2:"<< fmt.rgba();     qDebug()<< "red size      3:"<< fmt.redBufferSize();     qDebug()<< "green size    4:"<< fmt.greenBufferSize();     qDebug()<< "blue size     5:"<< fmt.blueBufferSize();     qDebug()<< "alpha size    6:"<< fmt.alphaBufferSize();     qDebug()<< "accum size    7:"<< fmt.accumBufferSize();     qDebug()<< "stencil size  8:"<< fmt.stencilBufferSize();     qDebug()<< "stereo        9:"<< fmt.stereo();     qDebug()<< "direct       10:"<< fmt.directRendering();     qDebug()<< "has overlays 11:"<< fmt.hasOverlay();     qDebug()<< "sample buff  12:"<< fmt.sampleBuffers();     qDebug()<< "num samples  13:"<< fmt.samples();
endif|#
directive|endif
return|return
name|fmt
return|;
block|}
end_function
begin_comment
comment|/*     QGLTemporaryContext implementation */
end_comment
begin_function_decl
name|Q_GUI_EXPORT
specifier|const
name|QString
name|qt_getRegisteredWndClass
parameter_list|()
function_decl|;
end_function_decl
begin_class
DECL|class|QGLTemporaryContextPrivate
class|class
name|QGLTemporaryContextPrivate
block|{
public|public:
DECL|member|dmy_pdc
name|HDC
name|dmy_pdc
decl_stmt|;
DECL|member|dmy_rc
name|HGLRC
name|dmy_rc
decl_stmt|;
DECL|member|old_dc
name|HDC
name|old_dc
decl_stmt|;
DECL|member|old_context
name|HGLRC
name|old_context
decl_stmt|;
DECL|member|dmy_id
name|WId
name|dmy_id
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|QGLTemporaryContext
name|QGLTemporaryContext
operator|::
name|QGLTemporaryContext
parameter_list|(
name|bool
name|directRendering
parameter_list|,
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|d
argument_list|(
operator|new
name|QGLTemporaryContextPrivate
argument_list|)
block|{
name|QString
name|windowClassName
init|=
name|qt_getRegisteredWndClass
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|&&
operator|!
name|parent
operator|->
name|internalWinId
argument_list|()
condition|)
name|parent
operator|=
name|parent
operator|->
name|nativeParentWidget
argument_list|()
expr_stmt|;
name|d
operator|->
name|dmy_id
operator|=
name|CreateWindow
argument_list|(
operator|(
specifier|const
name|wchar_t
operator|*
operator|)
name|windowClassName
operator|.
name|utf16
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|parent
condition|?
name|parent
operator|->
name|winId
argument_list|()
else|:
literal|0
argument_list|,
literal|0
argument_list|,
name|qWinAppInst
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|d
operator|->
name|dmy_pdc
operator|=
name|GetDC
argument_list|(
name|d
operator|->
name|dmy_id
argument_list|)
expr_stmt|;
name|PIXELFORMATDESCRIPTOR
name|dmy_pfd
decl_stmt|;
name|memset
argument_list|(
operator|&
name|dmy_pfd
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|PIXELFORMATDESCRIPTOR
argument_list|)
argument_list|)
expr_stmt|;
name|dmy_pfd
operator|.
name|nSize
operator|=
sizeof|sizeof
argument_list|(
name|PIXELFORMATDESCRIPTOR
argument_list|)
expr_stmt|;
name|dmy_pfd
operator|.
name|nVersion
operator|=
literal|1
expr_stmt|;
name|dmy_pfd
operator|.
name|dwFlags
operator|=
name|PFD_SUPPORT_OPENGL
operator||
name|PFD_DRAW_TO_WINDOW
expr_stmt|;
name|dmy_pfd
operator|.
name|iPixelType
operator|=
name|PFD_TYPE_RGBA
expr_stmt|;
if|if
condition|(
operator|!
name|directRendering
condition|)
name|dmy_pfd
operator|.
name|dwFlags
operator||=
name|PFD_GENERIC_FORMAT
expr_stmt|;
name|int
name|dmy_pf
init|=
name|ChoosePixelFormat
argument_list|(
name|d
operator|->
name|dmy_pdc
argument_list|,
operator|&
name|dmy_pfd
argument_list|)
decl_stmt|;
name|SetPixelFormat
argument_list|(
name|d
operator|->
name|dmy_pdc
argument_list|,
name|dmy_pf
argument_list|,
operator|&
name|dmy_pfd
argument_list|)
expr_stmt|;
name|d
operator|->
name|dmy_rc
operator|=
name|wglCreateContext
argument_list|(
name|d
operator|->
name|dmy_pdc
argument_list|)
expr_stmt|;
name|d
operator|->
name|old_dc
operator|=
name|wglGetCurrentDC
argument_list|()
expr_stmt|;
name|d
operator|->
name|old_context
operator|=
name|wglGetCurrentContext
argument_list|()
expr_stmt|;
name|wglMakeCurrent
argument_list|(
name|d
operator|->
name|dmy_pdc
argument_list|,
name|d
operator|->
name|dmy_rc
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QGLTemporaryContext
name|QGLTemporaryContext
operator|::
name|~
name|QGLTemporaryContext
parameter_list|()
block|{
name|wglMakeCurrent
argument_list|(
name|d
operator|->
name|dmy_pdc
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|wglDeleteContext
argument_list|(
name|d
operator|->
name|dmy_rc
argument_list|)
expr_stmt|;
name|ReleaseDC
argument_list|(
name|d
operator|->
name|dmy_id
argument_list|,
name|d
operator|->
name|dmy_pdc
argument_list|)
expr_stmt|;
name|DestroyWindow
argument_list|(
name|d
operator|->
name|dmy_id
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|old_dc
operator|&&
name|d
operator|->
name|old_context
condition|)
name|wglMakeCurrent
argument_list|(
name|d
operator|->
name|old_dc
argument_list|,
name|d
operator|->
name|old_context
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|qgl_create_context
specifier|static
name|bool
name|qgl_create_context
parameter_list|(
name|HDC
name|hdc
parameter_list|,
name|QGLContextPrivate
modifier|*
name|d
parameter_list|,
name|QGLContextPrivate
modifier|*
name|shareContext
parameter_list|)
block|{
name|d
operator|->
name|rc
operator|=
literal|0
expr_stmt|;
typedef|typedef
name|HGLRC
function_decl|(
name|APIENTRYP
name|PFNWGLCREATECONTEXTATTRIBSARB
function_decl|)
parameter_list|(
name|HDC
parameter_list|,
name|HGLRC
parameter_list|,
specifier|const
name|int
modifier|*
parameter_list|)
function_decl|;
name|PFNWGLCREATECONTEXTATTRIBSARB
name|wglCreateContextAttribsARB
init|=
operator|(
name|PFNWGLCREATECONTEXTATTRIBSARB
operator|)
name|wglGetProcAddress
argument_list|(
literal|"wglCreateContextAttribsARB"
argument_list|)
decl_stmt|;
if|if
condition|(
name|wglCreateContextAttribsARB
condition|)
block|{
name|int
name|attributes
index|[
literal|11
index|]
decl_stmt|;
name|int
name|attribIndex
init|=
literal|0
decl_stmt|;
specifier|const
name|int
name|major
init|=
name|d
operator|->
name|reqFormat
operator|.
name|majorVersion
argument_list|()
decl_stmt|;
specifier|const
name|int
name|minor
init|=
name|d
operator|->
name|reqFormat
operator|.
name|minorVersion
argument_list|()
decl_stmt|;
name|attributes
index|[
name|attribIndex
operator|++
index|]
operator|=
name|WGL_CONTEXT_MAJOR_VERSION_ARB
expr_stmt|;
name|attributes
index|[
name|attribIndex
operator|++
index|]
operator|=
name|major
expr_stmt|;
name|attributes
index|[
name|attribIndex
operator|++
index|]
operator|=
name|WGL_CONTEXT_MINOR_VERSION_ARB
expr_stmt|;
name|attributes
index|[
name|attribIndex
operator|++
index|]
operator|=
name|minor
expr_stmt|;
if|if
condition|(
name|major
operator|>=
literal|3
operator|&&
operator|!
name|d
operator|->
name|reqFormat
operator|.
name|testOption
argument_list|(
name|QGL
operator|::
name|DeprecatedFunctions
argument_list|)
condition|)
block|{
name|attributes
index|[
name|attribIndex
operator|++
index|]
operator|=
name|WGL_CONTEXT_FLAGS_ARB
expr_stmt|;
name|attributes
index|[
name|attribIndex
operator|++
index|]
operator|=
name|WGL_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|major
operator|==
literal|3
operator|&&
name|minor
operator|>=
literal|2
operator|)
operator|||
name|major
operator|>
literal|3
condition|)
block|{
switch|switch
condition|(
name|d
operator|->
name|reqFormat
operator|.
name|profile
argument_list|()
condition|)
block|{
case|case
name|QGLFormat
operator|::
name|NoProfile
case|:
break|break;
case|case
name|QGLFormat
operator|::
name|CoreProfile
case|:
name|attributes
index|[
name|attribIndex
operator|++
index|]
operator|=
name|WGL_CONTEXT_PROFILE_MASK_ARB
expr_stmt|;
name|attributes
index|[
name|attribIndex
operator|++
index|]
operator|=
name|WGL_CONTEXT_CORE_PROFILE_BIT_ARB
expr_stmt|;
break|break;
case|case
name|QGLFormat
operator|::
name|CompatibilityProfile
case|:
name|attributes
index|[
name|attribIndex
operator|++
index|]
operator|=
name|WGL_CONTEXT_PROFILE_MASK_ARB
expr_stmt|;
name|attributes
index|[
name|attribIndex
operator|++
index|]
operator|=
name|WGL_CONTEXT_COMPATIBILITY_PROFILE_BIT_ARB
expr_stmt|;
break|break;
default|default:
name|qWarning
argument_list|(
literal|"QGLContext::chooseContext(): Context profile not supported."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
name|d
operator|->
name|reqFormat
operator|.
name|plane
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|attributes
index|[
name|attribIndex
operator|++
index|]
operator|=
name|WGL_CONTEXT_LAYER_PLANE_ARB
expr_stmt|;
name|attributes
index|[
name|attribIndex
operator|++
index|]
operator|=
name|d
operator|->
name|reqFormat
operator|.
name|plane
argument_list|()
expr_stmt|;
block|}
name|attributes
index|[
name|attribIndex
operator|++
index|]
operator|=
literal|0
expr_stmt|;
comment|// Terminate list.
name|d
operator|->
name|rc
operator|=
name|wglCreateContextAttribsARB
argument_list|(
name|hdc
argument_list|,
name|shareContext
operator|&&
name|shareContext
operator|->
name|valid
condition|?
name|shareContext
operator|->
name|rc
else|:
literal|0
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|rc
condition|)
block|{
if|if
condition|(
name|shareContext
condition|)
name|shareContext
operator|->
name|sharing
operator|=
name|d
operator|->
name|sharing
operator|=
literal|true
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
name|d
operator|->
name|rc
operator|=
name|wglCreateLayerContext
argument_list|(
name|hdc
argument_list|,
name|d
operator|->
name|reqFormat
operator|.
name|plane
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|rc
operator|&&
name|shareContext
operator|&&
name|shareContext
operator|->
name|valid
condition|)
name|shareContext
operator|->
name|sharing
operator|=
name|d
operator|->
name|sharing
operator|=
name|wglShareLists
argument_list|(
name|shareContext
operator|->
name|rc
argument_list|,
name|d
operator|->
name|rc
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|rc
operator|!=
literal|0
return|;
block|}
end_function
begin_function
DECL|function|updateFormatVersion
name|void
name|QGLContextPrivate
operator|::
name|updateFormatVersion
parameter_list|()
block|{
specifier|const
name|GLubyte
modifier|*
name|s
init|=
name|glGetString
argument_list|(
name|GL_VERSION
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|s
operator|&&
name|s
index|[
literal|0
index|]
operator|>=
literal|'0'
operator|&&
name|s
index|[
literal|0
index|]
operator|<=
literal|'9'
operator|&&
name|s
index|[
literal|1
index|]
operator|==
literal|'.'
operator|&&
name|s
index|[
literal|2
index|]
operator|>=
literal|'0'
operator|&&
name|s
index|[
literal|2
index|]
operator|<=
literal|'9'
operator|)
condition|)
block|{
if|if
condition|(
operator|!
name|s
condition|)
name|qWarning
argument_list|(
literal|"QGLContext::chooseContext(): OpenGL version string is null."
argument_list|)
expr_stmt|;
else|else
name|qWarning
argument_list|(
literal|"QGLContext::chooseContext(): Unexpected OpenGL version string format."
argument_list|)
expr_stmt|;
name|glFormat
operator|.
name|setVersion
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|glFormat
operator|.
name|setProfile
argument_list|(
name|QGLFormat
operator|::
name|NoProfile
argument_list|)
expr_stmt|;
name|glFormat
operator|.
name|setOption
argument_list|(
name|QGL
operator|::
name|DeprecatedFunctions
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|major
init|=
name|s
index|[
literal|0
index|]
operator|-
literal|'0'
decl_stmt|;
name|int
name|minor
init|=
name|s
index|[
literal|2
index|]
operator|-
literal|'0'
decl_stmt|;
name|glFormat
operator|.
name|setVersion
argument_list|(
name|major
argument_list|,
name|minor
argument_list|)
expr_stmt|;
if|if
condition|(
name|major
operator|<
literal|3
condition|)
block|{
name|glFormat
operator|.
name|setProfile
argument_list|(
name|QGLFormat
operator|::
name|NoProfile
argument_list|)
expr_stmt|;
name|glFormat
operator|.
name|setOption
argument_list|(
name|QGL
operator|::
name|DeprecatedFunctions
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|GLint
name|value
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|major
operator|>
literal|3
operator|||
name|minor
operator|>=
literal|2
condition|)
name|glGetIntegerv
argument_list|(
name|GL_CONTEXT_PROFILE_MASK
argument_list|,
operator|&
name|value
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|value
condition|)
block|{
case|case
name|WGL_CONTEXT_CORE_PROFILE_BIT_ARB
case|:
name|glFormat
operator|.
name|setProfile
argument_list|(
name|QGLFormat
operator|::
name|CoreProfile
argument_list|)
expr_stmt|;
break|break;
case|case
name|WGL_CONTEXT_COMPATIBILITY_PROFILE_BIT_ARB
case|:
name|glFormat
operator|.
name|setProfile
argument_list|(
name|QGLFormat
operator|::
name|CompatibilityProfile
argument_list|)
expr_stmt|;
break|break;
default|default:
name|glFormat
operator|.
name|setProfile
argument_list|(
name|QGLFormat
operator|::
name|NoProfile
argument_list|)
expr_stmt|;
break|break;
block|}
name|glGetIntegerv
argument_list|(
name|GL_CONTEXT_FLAGS
argument_list|,
operator|&
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|&
name|GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT
condition|)
name|glFormat
operator|.
name|setOption
argument_list|(
name|QGL
operator|::
name|NoDeprecatedFunctions
argument_list|)
expr_stmt|;
else|else
name|glFormat
operator|.
name|setOption
argument_list|(
name|QGL
operator|::
name|DeprecatedFunctions
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|chooseContext
name|bool
name|QGLContext
operator|::
name|chooseContext
parameter_list|(
specifier|const
name|QGLContext
modifier|*
name|shareContext
parameter_list|)
block|{
name|QGLContextPrivate
modifier|*
name|share
init|=
name|shareContext
condition|?
cast|const_cast
argument_list|<
name|QGLContext
operator|*
argument_list|>
argument_list|(
name|shareContext
argument_list|)
operator|->
name|d_func
argument_list|()
else|:
literal|0
decl_stmt|;
name|Q_D
argument_list|(
name|QGLContext
argument_list|)
expr_stmt|;
comment|// workaround for matrox driver:
comment|// make a cheap call to opengl to force loading of DLL
if|if
condition|(
operator|!
name|opengl32dll
condition|)
block|{
name|GLint
name|params
decl_stmt|;
name|glGetIntegerv
argument_list|(
name|GL_DEPTH_BITS
argument_list|,
operator|&
name|params
argument_list|)
expr_stmt|;
name|opengl32dll
operator|=
literal|true
expr_stmt|;
block|}
name|bool
name|result
init|=
literal|true
decl_stmt|;
name|HDC
name|myDc
decl_stmt|;
name|QWidget
modifier|*
name|widget
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|deviceIsPixmap
argument_list|()
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|glFormat
operator|.
name|plane
argument_list|()
condition|)
return|return
literal|false
return|;
comment|// Pixmaps can't have overlay
name|d
operator|->
name|win
operator|=
literal|0
expr_stmt|;
name|HDC
name|display_dc
init|=
name|GetDC
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|myDc
operator|=
name|d
operator|->
name|hbitmap_hdc
operator|=
name|CreateCompatibleDC
argument_list|(
name|display_dc
argument_list|)
expr_stmt|;
name|QPixmap
modifier|*
name|px
init|=
cast|static_cast
argument_list|<
name|QPixmap
operator|*
argument_list|>
argument_list|(
name|d
operator|->
name|paintDevice
argument_list|)
decl_stmt|;
name|BITMAPINFO
name|bmi
decl_stmt|;
name|memset
argument_list|(
operator|&
name|bmi
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|bmi
argument_list|)
argument_list|)
expr_stmt|;
name|bmi
operator|.
name|bmiHeader
operator|.
name|biSize
operator|=
sizeof|sizeof
argument_list|(
name|BITMAPINFOHEADER
argument_list|)
expr_stmt|;
name|bmi
operator|.
name|bmiHeader
operator|.
name|biWidth
operator|=
name|px
operator|->
name|width
argument_list|()
expr_stmt|;
name|bmi
operator|.
name|bmiHeader
operator|.
name|biHeight
operator|=
name|px
operator|->
name|height
argument_list|()
expr_stmt|;
name|bmi
operator|.
name|bmiHeader
operator|.
name|biPlanes
operator|=
literal|1
expr_stmt|;
name|bmi
operator|.
name|bmiHeader
operator|.
name|biBitCount
operator|=
literal|32
expr_stmt|;
name|bmi
operator|.
name|bmiHeader
operator|.
name|biCompression
operator|=
name|BI_RGB
expr_stmt|;
name|d
operator|->
name|hbitmap
operator|=
name|CreateDIBSection
argument_list|(
name|display_dc
argument_list|,
operator|&
name|bmi
argument_list|,
name|DIB_RGB_COLORS
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|SelectObject
argument_list|(
name|myDc
argument_list|,
name|d
operator|->
name|hbitmap
argument_list|)
expr_stmt|;
name|ReleaseDC
argument_list|(
literal|0
argument_list|,
name|display_dc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|widget
operator|=
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|d
operator|->
name|paintDevice
argument_list|)
expr_stmt|;
name|d
operator|->
name|win
operator|=
name|widget
operator|->
name|winId
argument_list|()
expr_stmt|;
name|myDc
operator|=
name|GetDC
argument_list|(
name|d
operator|->
name|win
argument_list|)
expr_stmt|;
block|}
comment|// NB! the QGLTemporaryContext object is needed for the
comment|// wglGetProcAddress() calls to succeed and are absolutely
comment|// necessary - don't remove!
name|QGLTemporaryContext
name|tmp_ctx
argument_list|(
name|d
operator|->
name|glFormat
operator|.
name|directRendering
argument_list|()
argument_list|,
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|myDc
condition|)
block|{
name|qWarning
argument_list|(
literal|"QGLContext::chooseContext(): Paint device cannot be null"
argument_list|)
expr_stmt|;
name|result
operator|=
literal|false
expr_stmt|;
goto|goto
name|end
goto|;
block|}
if|if
condition|(
name|d
operator|->
name|glFormat
operator|.
name|plane
argument_list|()
condition|)
block|{
name|d
operator|->
name|pixelFormatId
operator|=
operator|(
operator|(
name|QGLWidget
operator|*
operator|)
name|d
operator|->
name|paintDevice
operator|)
operator|->
name|context
argument_list|()
operator|->
name|d_func
argument_list|()
operator|->
name|pixelFormatId
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|pixelFormatId
condition|)
block|{
comment|// I.e. the glwidget is invalid
name|qWarning
argument_list|(
literal|"QGLContext::chooseContext(): Cannot create overlay context for invalid widget"
argument_list|)
expr_stmt|;
name|result
operator|=
literal|false
expr_stmt|;
goto|goto
name|end
goto|;
block|}
if|if
condition|(
operator|!
name|qgl_create_context
argument_list|(
name|myDc
argument_list|,
name|d
argument_list|,
name|share
argument_list|)
condition|)
block|{
name|qwglError
argument_list|(
literal|"QGLContext::chooseContext()"
argument_list|,
literal|"CreateLayerContext"
argument_list|)
expr_stmt|;
name|result
operator|=
literal|false
expr_stmt|;
goto|goto
name|end
goto|;
block|}
name|LAYERPLANEDESCRIPTOR
name|lpfd
decl_stmt|;
name|wglDescribeLayerPlane
argument_list|(
name|myDc
argument_list|,
name|d
operator|->
name|pixelFormatId
argument_list|,
name|d
operator|->
name|glFormat
operator|.
name|plane
argument_list|()
argument_list|,
sizeof|sizeof
argument_list|(
name|LAYERPLANEDESCRIPTOR
argument_list|)
argument_list|,
operator|&
name|lpfd
argument_list|)
expr_stmt|;
name|d
operator|->
name|glFormat
operator|.
name|setDoubleBuffer
argument_list|(
name|lpfd
operator|.
name|dwFlags
operator|&
name|LPD_DOUBLEBUFFER
argument_list|)
expr_stmt|;
name|d
operator|->
name|glFormat
operator|.
name|setDepth
argument_list|(
name|lpfd
operator|.
name|cDepthBits
argument_list|)
expr_stmt|;
name|d
operator|->
name|glFormat
operator|.
name|setRgba
argument_list|(
name|lpfd
operator|.
name|iPixelType
operator|==
name|PFD_TYPE_RGBA
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|glFormat
operator|.
name|rgba
argument_list|()
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|glFormat
operator|.
name|redBufferSize
argument_list|()
operator|!=
operator|-
literal|1
condition|)
name|d
operator|->
name|glFormat
operator|.
name|setRedBufferSize
argument_list|(
name|lpfd
operator|.
name|cRedBits
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|glFormat
operator|.
name|greenBufferSize
argument_list|()
operator|!=
operator|-
literal|1
condition|)
name|d
operator|->
name|glFormat
operator|.
name|setGreenBufferSize
argument_list|(
name|lpfd
operator|.
name|cGreenBits
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|glFormat
operator|.
name|blueBufferSize
argument_list|()
operator|!=
operator|-
literal|1
condition|)
name|d
operator|->
name|glFormat
operator|.
name|setBlueBufferSize
argument_list|(
name|lpfd
operator|.
name|cBlueBits
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|glFormat
operator|.
name|setAlpha
argument_list|(
name|lpfd
operator|.
name|cAlphaBits
argument_list|)
expr_stmt|;
name|d
operator|->
name|glFormat
operator|.
name|setAccum
argument_list|(
name|lpfd
operator|.
name|cAccumBits
argument_list|)
expr_stmt|;
name|d
operator|->
name|glFormat
operator|.
name|setStencil
argument_list|(
name|lpfd
operator|.
name|cStencilBits
argument_list|)
expr_stmt|;
name|d
operator|->
name|glFormat
operator|.
name|setStereo
argument_list|(
name|lpfd
operator|.
name|dwFlags
operator|&
name|LPD_STEREO
argument_list|)
expr_stmt|;
name|d
operator|->
name|glFormat
operator|.
name|setDirectRendering
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|glFormat
operator|.
name|depth
argument_list|()
condition|)
name|d
operator|->
name|glFormat
operator|.
name|setDepthBufferSize
argument_list|(
name|lpfd
operator|.
name|cDepthBits
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|glFormat
operator|.
name|alpha
argument_list|()
condition|)
name|d
operator|->
name|glFormat
operator|.
name|setAlphaBufferSize
argument_list|(
name|lpfd
operator|.
name|cAlphaBits
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|glFormat
operator|.
name|accum
argument_list|()
condition|)
name|d
operator|->
name|glFormat
operator|.
name|setAccumBufferSize
argument_list|(
name|lpfd
operator|.
name|cAccumRedBits
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|glFormat
operator|.
name|stencil
argument_list|()
condition|)
name|d
operator|->
name|glFormat
operator|.
name|setStencilBufferSize
argument_list|(
name|lpfd
operator|.
name|cStencilBits
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|glFormat
operator|.
name|rgba
argument_list|()
condition|)
block|{
if|if
condition|(
name|lpfd
operator|.
name|dwFlags
operator|&
name|LPD_TRANSPARENT
condition|)
name|d
operator|->
name|transpColor
operator|=
name|QColor
argument_list|(
name|lpfd
operator|.
name|crTransparent
operator|&
literal|0xff
argument_list|,
operator|(
name|lpfd
operator|.
name|crTransparent
operator|>>
literal|8
operator|)
operator|&
literal|0xff
argument_list|,
operator|(
name|lpfd
operator|.
name|crTransparent
operator|>>
literal|16
operator|)
operator|&
literal|0xff
argument_list|)
expr_stmt|;
else|else
name|d
operator|->
name|transpColor
operator|=
name|QColor
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|lpfd
operator|.
name|dwFlags
operator|&
name|LPD_TRANSPARENT
condition|)
name|d
operator|->
name|transpColor
operator|=
name|QColor
argument_list|(
name|qRgb
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
comment|//, lpfd.crTransparent);
else|else
name|d
operator|->
name|transpColor
operator|=
name|QColor
argument_list|(
name|qRgb
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
comment|//, 0);
name|d
operator|->
name|cmap
operator|=
operator|new
name|QGLCmap
argument_list|(
literal|1
operator|<<
name|lpfd
operator|.
name|cColorBits
argument_list|)
expr_stmt|;
name|d
operator|->
name|cmap
operator|->
name|setEntry
argument_list|(
name|lpfd
operator|.
name|crTransparent
argument_list|,
name|qRgb
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
comment|//, QGLCmap::Reserved);
block|}
block|}
else|else
block|{
name|PIXELFORMATDESCRIPTOR
name|pfd
decl_stmt|;
name|PIXELFORMATDESCRIPTOR
name|realPfd
decl_stmt|;
name|d
operator|->
name|pixelFormatId
operator|=
name|choosePixelFormat
argument_list|(
operator|&
name|pfd
argument_list|,
name|myDc
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|pixelFormatId
operator|==
literal|0
condition|)
block|{
name|qwglError
argument_list|(
literal|"QGLContext::chooseContext()"
argument_list|,
literal|"ChoosePixelFormat"
argument_list|)
expr_stmt|;
name|result
operator|=
literal|false
expr_stmt|;
goto|goto
name|end
goto|;
block|}
name|bool
name|overlayRequested
init|=
name|d
operator|->
name|glFormat
operator|.
name|hasOverlay
argument_list|()
decl_stmt|;
name|DescribePixelFormat
argument_list|(
name|myDc
argument_list|,
name|d
operator|->
name|pixelFormatId
argument_list|,
sizeof|sizeof
argument_list|(
name|PIXELFORMATDESCRIPTOR
argument_list|)
argument_list|,
operator|&
name|realPfd
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|deviceIsPixmap
argument_list|()
operator|&&
name|wglGetProcAddress
argument_list|(
literal|"wglGetPixelFormatAttribivARB"
argument_list|)
condition|)
name|d
operator|->
name|glFormat
operator|=
name|pfiToQGLFormat
argument_list|(
name|myDc
argument_list|,
name|d
operator|->
name|pixelFormatId
argument_list|)
expr_stmt|;
else|else
name|d
operator|->
name|glFormat
operator|=
name|pfdToQGLFormat
argument_list|(
operator|&
name|realPfd
argument_list|)
expr_stmt|;
name|d
operator|->
name|glFormat
operator|.
name|setOverlay
argument_list|(
name|d
operator|->
name|glFormat
operator|.
name|hasOverlay
argument_list|()
operator|&&
name|overlayRequested
argument_list|)
expr_stmt|;
if|if
condition|(
name|deviceIsPixmap
argument_list|()
operator|&&
operator|!
operator|(
name|realPfd
operator|.
name|dwFlags
operator|&
name|PFD_DRAW_TO_BITMAP
operator|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"QGLContext::chooseContext(): Failed to get pixmap rendering context."
argument_list|)
expr_stmt|;
name|result
operator|=
literal|false
expr_stmt|;
goto|goto
name|end
goto|;
block|}
if|if
condition|(
name|deviceIsPixmap
argument_list|()
operator|&&
operator|(
operator|(
operator|(
name|QPixmap
operator|*
operator|)
name|d
operator|->
name|paintDevice
operator|)
operator|->
name|depth
argument_list|()
operator|!=
name|realPfd
operator|.
name|cColorBits
operator|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"QGLContext::chooseContext(): Failed to get pixmap rendering context of suitable depth."
argument_list|)
expr_stmt|;
name|result
operator|=
literal|false
expr_stmt|;
goto|goto
name|end
goto|;
block|}
if|if
condition|(
operator|!
name|SetPixelFormat
argument_list|(
name|myDc
argument_list|,
name|d
operator|->
name|pixelFormatId
argument_list|,
operator|&
name|realPfd
argument_list|)
condition|)
block|{
name|qwglError
argument_list|(
literal|"QGLContext::chooseContext()"
argument_list|,
literal|"SetPixelFormat"
argument_list|)
expr_stmt|;
name|result
operator|=
literal|false
expr_stmt|;
goto|goto
name|end
goto|;
block|}
if|if
condition|(
operator|!
name|qgl_create_context
argument_list|(
name|myDc
argument_list|,
name|d
argument_list|,
name|share
argument_list|)
condition|)
block|{
name|qwglError
argument_list|(
literal|"QGLContext::chooseContext()"
argument_list|,
literal|"wglCreateContext"
argument_list|)
expr_stmt|;
name|result
operator|=
literal|false
expr_stmt|;
goto|goto
name|end
goto|;
block|}
if|if
condition|(
operator|!
name|deviceIsPixmap
argument_list|()
condition|)
block|{
name|QRgb
modifier|*
name|pal
init|=
name|qgl_create_rgb_palette
argument_list|(
operator|&
name|realPfd
argument_list|)
decl_stmt|;
if|if
condition|(
name|pal
condition|)
block|{
name|QGLColormap
name|cmap
decl_stmt|;
name|cmap
operator|.
name|setEntries
argument_list|(
literal|256
argument_list|,
name|pal
argument_list|)
expr_stmt|;
operator|(
operator|(
name|QGLWidget
operator|*
operator|)
name|d
operator|->
name|paintDevice
operator|)
operator|->
name|setColormap
argument_list|(
name|cmap
argument_list|)
expr_stmt|;
operator|delete
index|[]
name|pal
expr_stmt|;
block|}
block|}
block|}
name|end
label|:
comment|// vblanking
name|wglMakeCurrent
argument_list|(
name|myDc
argument_list|,
name|d
operator|->
name|rc
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|rc
condition|)
name|d
operator|->
name|updateFormatVersion
argument_list|()
expr_stmt|;
typedef|typedef
name|BOOL
function_decl|(
name|APIENTRYP
name|PFNWGLSWAPINTERVALEXT
function_decl|)
parameter_list|(
name|int
name|interval
parameter_list|)
function_decl|;
typedef|typedef
name|int
function_decl|(
name|APIENTRYP
name|PFNWGLGETSWAPINTERVALEXT
function_decl|)
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|PFNWGLSWAPINTERVALEXT
name|wglSwapIntervalEXT
init|=
operator|(
name|PFNWGLSWAPINTERVALEXT
operator|)
name|wglGetProcAddress
argument_list|(
literal|"wglSwapIntervalEXT"
argument_list|)
decl_stmt|;
name|PFNWGLGETSWAPINTERVALEXT
name|wglGetSwapIntervalEXT
init|=
operator|(
name|PFNWGLGETSWAPINTERVALEXT
operator|)
name|wglGetProcAddress
argument_list|(
literal|"wglGetSwapIntervalEXT"
argument_list|)
decl_stmt|;
if|if
condition|(
name|wglSwapIntervalEXT
operator|&&
name|wglGetSwapIntervalEXT
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|reqFormat
operator|.
name|swapInterval
argument_list|()
operator|!=
operator|-
literal|1
condition|)
name|wglSwapIntervalEXT
argument_list|(
name|d
operator|->
name|reqFormat
operator|.
name|swapInterval
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|glFormat
operator|.
name|setSwapInterval
argument_list|(
name|wglGetSwapIntervalEXT
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|->
name|win
condition|)
name|ReleaseDC
argument_list|(
name|d
operator|->
name|win
argument_list|,
name|myDc
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|qLogEq
specifier|static
name|bool
name|qLogEq
parameter_list|(
name|bool
name|a
parameter_list|,
name|bool
name|b
parameter_list|)
block|{
return|return
operator|(
operator|(
operator|(
operator|!
name|a
operator|)
operator|&&
operator|(
operator|!
name|b
operator|)
operator|)
operator|||
operator|(
name|a
operator|&&
name|b
operator|)
operator|)
return|;
block|}
end_function
begin_comment
comment|/*   See qgl.cpp for qdoc comment.  */
end_comment
begin_function
DECL|function|choosePixelFormat
name|int
name|QGLContext
operator|::
name|choosePixelFormat
parameter_list|(
name|void
modifier|*
name|dummyPfd
parameter_list|,
name|HDC
name|pdc
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGLContext
argument_list|)
expr_stmt|;
comment|// workaround for matrox driver:
comment|// make a cheap call to opengl to force loading of DLL
if|if
condition|(
operator|!
name|opengl32dll
condition|)
block|{
name|GLint
name|params
decl_stmt|;
name|glGetIntegerv
argument_list|(
name|GL_DEPTH_BITS
argument_list|,
operator|&
name|params
argument_list|)
expr_stmt|;
name|opengl32dll
operator|=
literal|true
expr_stmt|;
block|}
name|PFNWGLCHOOSEPIXELFORMATARB
name|wglChoosePixelFormatARB
init|=
operator|(
name|PFNWGLCHOOSEPIXELFORMATARB
operator|)
name|wglGetProcAddress
argument_list|(
literal|"wglChoosePixelFormatARB"
argument_list|)
decl_stmt|;
name|int
name|chosenPfi
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|deviceIsPixmap
argument_list|()
operator|&&
name|wglChoosePixelFormatARB
condition|)
block|{
name|bool
name|valid
decl_stmt|;
name|int
name|pixelFormat
init|=
literal|0
decl_stmt|;
name|uint
name|numFormats
init|=
literal|0
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|int
argument_list|>
name|iAttributes
argument_list|(
literal|40
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|WGL_ACCELERATION_ARB
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|glFormat
operator|.
name|directRendering
argument_list|()
condition|)
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|WGL_FULL_ACCELERATION_ARB
expr_stmt|;
else|else
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|WGL_NO_ACCELERATION_ARB
expr_stmt|;
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|WGL_SUPPORT_OPENGL_ARB
expr_stmt|;
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|TRUE
expr_stmt|;
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|WGL_DRAW_TO_WINDOW_ARB
expr_stmt|;
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|TRUE
expr_stmt|;
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|WGL_COLOR_BITS_ARB
expr_stmt|;
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
literal|24
expr_stmt|;
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|WGL_DOUBLE_BUFFER_ARB
expr_stmt|;
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|d
operator|->
name|glFormat
operator|.
name|doubleBuffer
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|glFormat
operator|.
name|stereo
argument_list|()
condition|)
block|{
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|WGL_STEREO_ARB
expr_stmt|;
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|TRUE
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|->
name|glFormat
operator|.
name|depth
argument_list|()
condition|)
block|{
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|WGL_DEPTH_BITS_ARB
expr_stmt|;
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|d
operator|->
name|glFormat
operator|.
name|depthBufferSize
argument_list|()
operator|==
operator|-
literal|1
condition|?
literal|24
else|:
name|d
operator|->
name|glFormat
operator|.
name|depthBufferSize
argument_list|()
expr_stmt|;
block|}
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|WGL_PIXEL_TYPE_ARB
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|glFormat
operator|.
name|rgba
argument_list|()
condition|)
block|{
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|WGL_TYPE_RGBA_ARB
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|glFormat
operator|.
name|redBufferSize
argument_list|()
operator|!=
operator|-
literal|1
condition|)
block|{
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|WGL_RED_BITS_ARB
expr_stmt|;
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|d
operator|->
name|glFormat
operator|.
name|redBufferSize
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|->
name|glFormat
operator|.
name|greenBufferSize
argument_list|()
operator|!=
operator|-
literal|1
condition|)
block|{
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|WGL_GREEN_BITS_ARB
expr_stmt|;
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|d
operator|->
name|glFormat
operator|.
name|greenBufferSize
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|->
name|glFormat
operator|.
name|blueBufferSize
argument_list|()
operator|!=
operator|-
literal|1
condition|)
block|{
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|WGL_BLUE_BITS_ARB
expr_stmt|;
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|d
operator|->
name|glFormat
operator|.
name|blueBufferSize
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|WGL_TYPE_COLORINDEX_ARB
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|->
name|glFormat
operator|.
name|alpha
argument_list|()
condition|)
block|{
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|WGL_ALPHA_BITS_ARB
expr_stmt|;
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|d
operator|->
name|glFormat
operator|.
name|alphaBufferSize
argument_list|()
operator|==
operator|-
literal|1
condition|?
literal|8
else|:
name|d
operator|->
name|glFormat
operator|.
name|alphaBufferSize
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|->
name|glFormat
operator|.
name|accum
argument_list|()
condition|)
block|{
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|WGL_ACCUM_BITS_ARB
expr_stmt|;
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|d
operator|->
name|glFormat
operator|.
name|accumBufferSize
argument_list|()
operator|==
operator|-
literal|1
condition|?
literal|16
else|:
name|d
operator|->
name|glFormat
operator|.
name|accumBufferSize
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|->
name|glFormat
operator|.
name|stencil
argument_list|()
condition|)
block|{
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|WGL_STENCIL_BITS_ARB
expr_stmt|;
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|d
operator|->
name|glFormat
operator|.
name|stencilBufferSize
argument_list|()
operator|==
operator|-
literal|1
condition|?
literal|8
else|:
name|d
operator|->
name|glFormat
operator|.
name|stencilBufferSize
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|->
name|glFormat
operator|.
name|hasOverlay
argument_list|()
condition|)
block|{
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|WGL_NUMBER_OVERLAYS_ARB
expr_stmt|;
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
literal|1
expr_stmt|;
block|}
name|int
name|si
init|=
literal|0
decl_stmt|;
name|bool
name|trySampleBuffers
init|=
name|QGLExtensions
operator|::
name|glExtensions
argument_list|()
operator|&
name|QGLExtensions
operator|::
name|SampleBuffers
decl_stmt|;
if|if
condition|(
name|trySampleBuffers
operator|&&
name|d
operator|->
name|glFormat
operator|.
name|sampleBuffers
argument_list|()
condition|)
block|{
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|WGL_SAMPLE_BUFFERS_ARB
expr_stmt|;
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|TRUE
expr_stmt|;
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|WGL_SAMPLES_ARB
expr_stmt|;
name|si
operator|=
name|i
expr_stmt|;
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|d
operator|->
name|glFormat
operator|.
name|samples
argument_list|()
operator|==
operator|-
literal|1
condition|?
literal|4
else|:
name|d
operator|->
name|glFormat
operator|.
name|samples
argument_list|()
expr_stmt|;
block|}
name|iAttributes
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
do|do
block|{
name|valid
operator|=
name|wglChoosePixelFormatARB
argument_list|(
name|pdc
argument_list|,
name|iAttributes
operator|.
name|constData
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
operator|&
name|pixelFormat
argument_list|,
operator|&
name|numFormats
argument_list|)
expr_stmt|;
if|if
condition|(
name|trySampleBuffers
operator|&&
operator|(
operator|!
name|valid
operator|||
name|numFormats
operator|<
literal|1
operator|)
operator|&&
name|d
operator|->
name|glFormat
operator|.
name|sampleBuffers
argument_list|()
condition|)
name|iAttributes
index|[
name|si
index|]
operator|/=
literal|2
expr_stmt|;
comment|// try different no. samples - we aim for the best one
else|else
break|break;
block|}
do|while
condition|(
operator|(
operator|!
name|valid
operator|||
name|numFormats
operator|<
literal|1
operator|)
operator|&&
name|iAttributes
index|[
name|si
index|]
operator|>
literal|1
condition|)
do|;
name|chosenPfi
operator|=
name|pixelFormat
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|chosenPfi
condition|)
block|{
comment|// fallback if wglChoosePixelFormatARB() failed
name|int
name|pmDepth
init|=
name|deviceIsPixmap
argument_list|()
condition|?
operator|(
operator|(
name|QPixmap
operator|*
operator|)
name|d
operator|->
name|paintDevice
operator|)
operator|->
name|depth
argument_list|()
else|:
literal|0
decl_stmt|;
name|PIXELFORMATDESCRIPTOR
modifier|*
name|p
init|=
operator|(
name|PIXELFORMATDESCRIPTOR
operator|*
operator|)
name|dummyPfd
decl_stmt|;
name|memset
argument_list|(
name|p
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|PIXELFORMATDESCRIPTOR
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|->
name|nSize
operator|=
sizeof|sizeof
argument_list|(
name|PIXELFORMATDESCRIPTOR
argument_list|)
expr_stmt|;
name|p
operator|->
name|nVersion
operator|=
literal|1
expr_stmt|;
name|p
operator|->
name|dwFlags
operator|=
name|PFD_SUPPORT_OPENGL
expr_stmt|;
if|if
condition|(
name|deviceIsPixmap
argument_list|()
condition|)
name|p
operator|->
name|dwFlags
operator||=
name|PFD_DRAW_TO_BITMAP
expr_stmt|;
else|else
name|p
operator|->
name|dwFlags
operator||=
name|PFD_DRAW_TO_WINDOW
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|glFormat
operator|.
name|directRendering
argument_list|()
condition|)
name|p
operator|->
name|dwFlags
operator||=
name|PFD_GENERIC_FORMAT
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|glFormat
operator|.
name|doubleBuffer
argument_list|()
operator|&&
operator|!
name|deviceIsPixmap
argument_list|()
condition|)
name|p
operator|->
name|dwFlags
operator||=
name|PFD_DOUBLEBUFFER
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|glFormat
operator|.
name|stereo
argument_list|()
condition|)
name|p
operator|->
name|dwFlags
operator||=
name|PFD_STEREO
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|glFormat
operator|.
name|depth
argument_list|()
condition|)
name|p
operator|->
name|cDepthBits
operator|=
name|d
operator|->
name|glFormat
operator|.
name|depthBufferSize
argument_list|()
operator|==
operator|-
literal|1
condition|?
literal|32
else|:
name|d
operator|->
name|glFormat
operator|.
name|depthBufferSize
argument_list|()
expr_stmt|;
else|else
name|p
operator|->
name|dwFlags
operator||=
name|PFD_DEPTH_DONTCARE
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|glFormat
operator|.
name|rgba
argument_list|()
condition|)
block|{
name|p
operator|->
name|iPixelType
operator|=
name|PFD_TYPE_RGBA
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|glFormat
operator|.
name|redBufferSize
argument_list|()
operator|!=
operator|-
literal|1
condition|)
name|p
operator|->
name|cRedBits
operator|=
name|d
operator|->
name|glFormat
operator|.
name|redBufferSize
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|glFormat
operator|.
name|greenBufferSize
argument_list|()
operator|!=
operator|-
literal|1
condition|)
name|p
operator|->
name|cGreenBits
operator|=
name|d
operator|->
name|glFormat
operator|.
name|greenBufferSize
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|glFormat
operator|.
name|blueBufferSize
argument_list|()
operator|!=
operator|-
literal|1
condition|)
name|p
operator|->
name|cBlueBits
operator|=
name|d
operator|->
name|glFormat
operator|.
name|blueBufferSize
argument_list|()
expr_stmt|;
if|if
condition|(
name|deviceIsPixmap
argument_list|()
condition|)
name|p
operator|->
name|cColorBits
operator|=
name|pmDepth
expr_stmt|;
else|else
name|p
operator|->
name|cColorBits
operator|=
literal|32
expr_stmt|;
block|}
else|else
block|{
name|p
operator|->
name|iPixelType
operator|=
name|PFD_TYPE_COLORINDEX
expr_stmt|;
name|p
operator|->
name|cColorBits
operator|=
literal|8
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|->
name|glFormat
operator|.
name|alpha
argument_list|()
condition|)
name|p
operator|->
name|cAlphaBits
operator|=
name|d
operator|->
name|glFormat
operator|.
name|alphaBufferSize
argument_list|()
operator|==
operator|-
literal|1
condition|?
literal|8
else|:
name|d
operator|->
name|glFormat
operator|.
name|alphaBufferSize
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|glFormat
operator|.
name|accum
argument_list|()
condition|)
block|{
name|p
operator|->
name|cAccumRedBits
operator|=
name|p
operator|->
name|cAccumGreenBits
operator|=
name|p
operator|->
name|cAccumBlueBits
operator|=
name|p
operator|->
name|cAccumAlphaBits
operator|=
name|d
operator|->
name|glFormat
operator|.
name|accumBufferSize
argument_list|()
operator|==
operator|-
literal|1
condition|?
literal|16
else|:
name|d
operator|->
name|glFormat
operator|.
name|accumBufferSize
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|->
name|glFormat
operator|.
name|stencil
argument_list|()
condition|)
name|p
operator|->
name|cStencilBits
operator|=
name|d
operator|->
name|glFormat
operator|.
name|stencilBufferSize
argument_list|()
operator|==
operator|-
literal|1
condition|?
literal|8
else|:
name|d
operator|->
name|glFormat
operator|.
name|stencilBufferSize
argument_list|()
expr_stmt|;
name|p
operator|->
name|iLayerType
operator|=
name|PFD_MAIN_PLANE
expr_stmt|;
name|chosenPfi
operator|=
name|ChoosePixelFormat
argument_list|(
name|pdc
argument_list|,
name|p
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|chosenPfi
condition|)
name|qErrnoWarning
argument_list|(
literal|"QGLContext: ChoosePixelFormat failed"
argument_list|)
expr_stmt|;
comment|// Since the GDI function ChoosePixelFormat() does not handle
comment|// overlay and direct-rendering requests, we must roll our own here
name|bool
name|doSearch
init|=
name|chosenPfi
operator|<=
literal|0
decl_stmt|;
name|PIXELFORMATDESCRIPTOR
name|pfd
decl_stmt|;
name|QGLFormat
name|fmt
decl_stmt|;
if|if
condition|(
operator|!
name|doSearch
condition|)
block|{
name|DescribePixelFormat
argument_list|(
name|pdc
argument_list|,
name|chosenPfi
argument_list|,
sizeof|sizeof
argument_list|(
name|PIXELFORMATDESCRIPTOR
argument_list|)
argument_list|,
operator|&
name|pfd
argument_list|)
expr_stmt|;
name|fmt
operator|=
name|pfdToQGLFormat
argument_list|(
operator|&
name|pfd
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|glFormat
operator|.
name|hasOverlay
argument_list|()
operator|&&
operator|!
name|fmt
operator|.
name|hasOverlay
argument_list|()
condition|)
name|doSearch
operator|=
literal|true
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|qLogEq
argument_list|(
name|d
operator|->
name|glFormat
operator|.
name|directRendering
argument_list|()
argument_list|,
name|fmt
operator|.
name|directRendering
argument_list|()
argument_list|)
condition|)
name|doSearch
operator|=
literal|true
expr_stmt|;
elseif|else
if|if
condition|(
name|deviceIsPixmap
argument_list|()
operator|&&
operator|(
operator|!
operator|(
name|pfd
operator|.
name|dwFlags
operator|&
name|PFD_DRAW_TO_BITMAP
operator|)
operator|||
name|pfd
operator|.
name|cColorBits
operator|!=
name|pmDepth
operator|)
condition|)
name|doSearch
operator|=
literal|true
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|deviceIsPixmap
argument_list|()
operator|&&
operator|!
operator|(
name|pfd
operator|.
name|dwFlags
operator|&
name|PFD_DRAW_TO_WINDOW
operator|)
condition|)
name|doSearch
operator|=
literal|true
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|qLogEq
argument_list|(
name|d
operator|->
name|glFormat
operator|.
name|rgba
argument_list|()
argument_list|,
name|fmt
operator|.
name|rgba
argument_list|()
argument_list|)
condition|)
name|doSearch
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|doSearch
condition|)
block|{
name|int
name|pfiMax
init|=
name|DescribePixelFormat
argument_list|(
name|pdc
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|NULL
argument_list|)
decl_stmt|;
name|int
name|bestScore
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|bestPfi
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|pfi
init|=
literal|1
init|;
name|pfi
operator|<=
name|pfiMax
condition|;
name|pfi
operator|++
control|)
block|{
name|DescribePixelFormat
argument_list|(
name|pdc
argument_list|,
name|pfi
argument_list|,
sizeof|sizeof
argument_list|(
name|PIXELFORMATDESCRIPTOR
argument_list|)
argument_list|,
operator|&
name|pfd
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|pfd
operator|.
name|dwFlags
operator|&
name|PFD_SUPPORT_OPENGL
operator|)
condition|)
continue|continue;
if|if
condition|(
name|deviceIsPixmap
argument_list|()
operator|&&
operator|(
operator|!
operator|(
name|pfd
operator|.
name|dwFlags
operator|&
name|PFD_DRAW_TO_BITMAP
operator|)
operator|||
name|pfd
operator|.
name|cColorBits
operator|!=
name|pmDepth
operator|)
condition|)
continue|continue;
if|if
condition|(
operator|!
name|deviceIsPixmap
argument_list|()
operator|&&
operator|!
operator|(
name|pfd
operator|.
name|dwFlags
operator|&
name|PFD_DRAW_TO_WINDOW
operator|)
condition|)
continue|continue;
name|fmt
operator|=
name|pfdToQGLFormat
argument_list|(
operator|&
name|pfd
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|glFormat
operator|.
name|hasOverlay
argument_list|()
operator|&&
operator|!
name|fmt
operator|.
name|hasOverlay
argument_list|()
condition|)
continue|continue;
name|int
name|score
init|=
name|pfd
operator|.
name|cColorBits
decl_stmt|;
if|if
condition|(
name|qLogEq
argument_list|(
name|d
operator|->
name|glFormat
operator|.
name|depth
argument_list|()
argument_list|,
name|fmt
operator|.
name|depth
argument_list|()
argument_list|)
condition|)
name|score
operator|+=
name|pfd
operator|.
name|cDepthBits
expr_stmt|;
if|if
condition|(
name|qLogEq
argument_list|(
name|d
operator|->
name|glFormat
operator|.
name|alpha
argument_list|()
argument_list|,
name|fmt
operator|.
name|alpha
argument_list|()
argument_list|)
condition|)
name|score
operator|+=
name|pfd
operator|.
name|cAlphaBits
expr_stmt|;
if|if
condition|(
name|qLogEq
argument_list|(
name|d
operator|->
name|glFormat
operator|.
name|accum
argument_list|()
argument_list|,
name|fmt
operator|.
name|accum
argument_list|()
argument_list|)
condition|)
name|score
operator|+=
name|pfd
operator|.
name|cAccumBits
expr_stmt|;
if|if
condition|(
name|qLogEq
argument_list|(
name|d
operator|->
name|glFormat
operator|.
name|stencil
argument_list|()
argument_list|,
name|fmt
operator|.
name|stencil
argument_list|()
argument_list|)
condition|)
name|score
operator|+=
name|pfd
operator|.
name|cStencilBits
expr_stmt|;
if|if
condition|(
name|qLogEq
argument_list|(
name|d
operator|->
name|glFormat
operator|.
name|doubleBuffer
argument_list|()
argument_list|,
name|fmt
operator|.
name|doubleBuffer
argument_list|()
argument_list|)
condition|)
name|score
operator|+=
literal|1000
expr_stmt|;
if|if
condition|(
name|qLogEq
argument_list|(
name|d
operator|->
name|glFormat
operator|.
name|stereo
argument_list|()
argument_list|,
name|fmt
operator|.
name|stereo
argument_list|()
argument_list|)
condition|)
name|score
operator|+=
literal|2000
expr_stmt|;
if|if
condition|(
name|qLogEq
argument_list|(
name|d
operator|->
name|glFormat
operator|.
name|directRendering
argument_list|()
argument_list|,
name|fmt
operator|.
name|directRendering
argument_list|()
argument_list|)
condition|)
name|score
operator|+=
literal|4000
expr_stmt|;
if|if
condition|(
name|qLogEq
argument_list|(
name|d
operator|->
name|glFormat
operator|.
name|rgba
argument_list|()
argument_list|,
name|fmt
operator|.
name|rgba
argument_list|()
argument_list|)
condition|)
name|score
operator|+=
literal|8000
expr_stmt|;
if|if
condition|(
name|score
operator|>
name|bestScore
condition|)
block|{
name|bestScore
operator|=
name|score
expr_stmt|;
name|bestPfi
operator|=
name|pfi
expr_stmt|;
block|}
block|}
if|if
condition|(
name|bestPfi
operator|>
literal|0
condition|)
name|chosenPfi
operator|=
name|bestPfi
expr_stmt|;
block|}
block|}
return|return
name|chosenPfi
return|;
block|}
end_function
begin_function
DECL|function|reset
name|void
name|QGLContext
operator|::
name|reset
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QGLContext
argument_list|)
expr_stmt|;
comment|// workaround for matrox driver:
comment|// make a cheap call to opengl to force loading of DLL
if|if
condition|(
operator|!
name|opengl32dll
condition|)
block|{
name|GLint
name|params
decl_stmt|;
name|glGetIntegerv
argument_list|(
name|GL_DEPTH_BITS
argument_list|,
operator|&
name|params
argument_list|)
expr_stmt|;
name|opengl32dll
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|d
operator|->
name|valid
condition|)
return|return;
name|d
operator|->
name|cleanup
argument_list|()
expr_stmt|;
name|doneCurrent
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|rc
condition|)
name|wglDeleteContext
argument_list|(
name|d
operator|->
name|rc
argument_list|)
expr_stmt|;
name|d
operator|->
name|rc
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|win
operator|&&
name|d
operator|->
name|dc
condition|)
name|ReleaseDC
argument_list|(
name|d
operator|->
name|win
argument_list|,
name|d
operator|->
name|dc
argument_list|)
expr_stmt|;
if|if
condition|(
name|deviceIsPixmap
argument_list|()
condition|)
block|{
name|DeleteDC
argument_list|(
name|d
operator|->
name|hbitmap_hdc
argument_list|)
expr_stmt|;
name|DeleteObject
argument_list|(
name|d
operator|->
name|hbitmap
argument_list|)
expr_stmt|;
name|d
operator|->
name|hbitmap_hdc
operator|=
literal|0
expr_stmt|;
name|d
operator|->
name|hbitmap
operator|=
literal|0
expr_stmt|;
block|}
name|d
operator|->
name|dc
operator|=
literal|0
expr_stmt|;
name|d
operator|->
name|win
operator|=
literal|0
expr_stmt|;
name|d
operator|->
name|threadId
operator|=
literal|0
expr_stmt|;
name|d
operator|->
name|pixelFormatId
operator|=
literal|0
expr_stmt|;
name|d
operator|->
name|sharing
operator|=
literal|false
expr_stmt|;
name|d
operator|->
name|valid
operator|=
literal|false
expr_stmt|;
name|d
operator|->
name|transpColor
operator|=
name|QColor
argument_list|()
expr_stmt|;
operator|delete
name|d
operator|->
name|cmap
expr_stmt|;
name|d
operator|->
name|cmap
operator|=
literal|0
expr_stmt|;
name|d
operator|->
name|initDone
operator|=
literal|false
expr_stmt|;
name|QGLContextGroup
operator|::
name|removeShare
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//
end_comment
begin_comment
comment|// NOTE: In a multi-threaded environment, each thread has a current
end_comment
begin_comment
comment|// context. If we want to make this code thread-safe, we probably
end_comment
begin_comment
comment|// have to use TLS (thread local storage) for keeping current contexts.
end_comment
begin_comment
comment|//
end_comment
begin_function
DECL|function|makeCurrent
name|void
name|QGLContext
operator|::
name|makeCurrent
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QGLContext
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|rc
operator|==
name|wglGetCurrentContext
argument_list|()
operator|||
operator|!
name|d
operator|->
name|valid
condition|)
comment|// already current
return|return;
if|if
condition|(
name|d
operator|->
name|win
operator|&&
operator|(
operator|!
name|d
operator|->
name|dc
operator|||
name|d
operator|->
name|threadId
operator|!=
name|QThread
operator|::
name|currentThreadId
argument_list|()
operator|)
condition|)
block|{
name|d
operator|->
name|dc
operator|=
name|GetDC
argument_list|(
name|d
operator|->
name|win
argument_list|)
expr_stmt|;
name|d
operator|->
name|threadId
operator|=
name|QThread
operator|::
name|currentThreadId
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|dc
condition|)
block|{
name|qwglError
argument_list|(
literal|"QGLContext::makeCurrent()"
argument_list|,
literal|"GetDC()"
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
elseif|else
if|if
condition|(
name|deviceIsPixmap
argument_list|()
condition|)
block|{
name|d
operator|->
name|dc
operator|=
name|d
operator|->
name|hbitmap_hdc
expr_stmt|;
block|}
name|HPALETTE
name|hpal
init|=
name|QColormap
operator|::
name|hPal
argument_list|()
decl_stmt|;
if|if
condition|(
name|hpal
condition|)
block|{
name|SelectPalette
argument_list|(
name|d
operator|->
name|dc
argument_list|,
name|hpal
argument_list|,
name|FALSE
argument_list|)
expr_stmt|;
name|RealizePalette
argument_list|(
name|d
operator|->
name|dc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|->
name|glFormat
operator|.
name|plane
argument_list|()
condition|)
block|{
name|wglRealizeLayerPalette
argument_list|(
name|d
operator|->
name|dc
argument_list|,
name|d
operator|->
name|glFormat
operator|.
name|plane
argument_list|()
argument_list|,
name|TRUE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|wglMakeCurrent
argument_list|(
name|d
operator|->
name|dc
argument_list|,
name|d
operator|->
name|rc
argument_list|)
condition|)
block|{
name|QGLContextPrivate
operator|::
name|setCurrentContext
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qwglError
argument_list|(
literal|"QGLContext::makeCurrent()"
argument_list|,
literal|"wglMakeCurrent"
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|doneCurrent
name|void
name|QGLContext
operator|::
name|doneCurrent
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QGLContext
argument_list|)
expr_stmt|;
name|wglMakeCurrent
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QGLContextPrivate
operator|::
name|setCurrentContext
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|deviceIsPixmap
argument_list|()
operator|&&
name|d
operator|->
name|hbitmap
condition|)
block|{
name|QPixmap
modifier|*
name|pm
init|=
cast|static_cast
argument_list|<
name|QPixmap
operator|*
argument_list|>
argument_list|(
name|d
operator|->
name|paintDevice
argument_list|)
decl_stmt|;
operator|*
name|pm
operator|=
name|QPixmap
operator|::
name|fromWinHBITMAP
argument_list|(
name|d
operator|->
name|hbitmap
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|->
name|win
operator|&&
name|d
operator|->
name|dc
condition|)
block|{
name|ReleaseDC
argument_list|(
name|d
operator|->
name|win
argument_list|,
name|d
operator|->
name|dc
argument_list|)
expr_stmt|;
name|d
operator|->
name|dc
operator|=
literal|0
expr_stmt|;
name|d
operator|->
name|threadId
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|swapBuffers
name|void
name|QGLContext
operator|::
name|swapBuffers
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGLContext
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|dc
operator|&&
name|d
operator|->
name|glFormat
operator|.
name|doubleBuffer
argument_list|()
operator|&&
operator|!
name|deviceIsPixmap
argument_list|()
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|glFormat
operator|.
name|plane
argument_list|()
condition|)
name|wglSwapLayerBuffers
argument_list|(
name|d
operator|->
name|dc
argument_list|,
name|WGL_SWAP_OVERLAY1
argument_list|)
expr_stmt|;
else|else
block|{
if|if
condition|(
name|d
operator|->
name|glFormat
operator|.
name|hasOverlay
argument_list|()
condition|)
name|wglSwapLayerBuffers
argument_list|(
name|d
operator|->
name|dc
argument_list|,
name|WGL_SWAP_MAIN_PLANE
argument_list|)
expr_stmt|;
else|else
name|SwapBuffers
argument_list|(
name|d
operator|->
name|dc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|overlayTransparentColor
name|QColor
name|QGLContext
operator|::
name|overlayTransparentColor
parameter_list|()
specifier|const
block|{
return|return
name|d_func
argument_list|()
operator|->
name|transpColor
return|;
block|}
end_function
begin_function
DECL|function|colorIndex
name|uint
name|QGLContext
operator|::
name|colorIndex
parameter_list|(
specifier|const
name|QColor
modifier|&
name|c
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGLContext
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isValid
argument_list|()
condition|)
return|return
literal|0
return|;
if|if
condition|(
name|d
operator|->
name|cmap
condition|)
block|{
name|int
name|idx
init|=
name|d
operator|->
name|cmap
operator|->
name|find
argument_list|(
name|c
operator|.
name|rgb
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|>=
literal|0
condition|)
return|return
name|idx
return|;
if|if
condition|(
name|d
operator|->
name|dc
operator|&&
name|d
operator|->
name|glFormat
operator|.
name|plane
argument_list|()
condition|)
block|{
name|idx
operator|=
name|d
operator|->
name|cmap
operator|->
name|allocate
argument_list|(
name|c
operator|.
name|rgb
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|idx
operator|>=
literal|0
condition|)
block|{
name|COLORREF
name|r
init|=
name|RGB
argument_list|(
name|qRed
argument_list|(
name|c
operator|.
name|rgb
argument_list|()
argument_list|)
argument_list|,
name|qGreen
argument_list|(
name|c
operator|.
name|rgb
argument_list|()
argument_list|)
argument_list|,
name|qBlue
argument_list|(
name|c
operator|.
name|rgb
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|wglSetLayerPaletteEntries
argument_list|(
name|d
operator|->
name|dc
argument_list|,
name|d
operator|->
name|glFormat
operator|.
name|plane
argument_list|()
argument_list|,
name|idx
argument_list|,
literal|1
argument_list|,
operator|&
name|r
argument_list|)
expr_stmt|;
name|wglRealizeLayerPalette
argument_list|(
name|d
operator|->
name|dc
argument_list|,
name|d
operator|->
name|glFormat
operator|.
name|plane
argument_list|()
argument_list|,
name|TRUE
argument_list|)
expr_stmt|;
return|return
name|idx
return|;
block|}
block|}
return|return
name|d
operator|->
name|cmap
operator|->
name|findNearest
argument_list|(
name|c
operator|.
name|rgb
argument_list|()
argument_list|)
return|;
block|}
name|QColormap
name|cmap
init|=
name|QColormap
operator|::
name|instance
argument_list|()
decl_stmt|;
return|return
name|cmap
operator|.
name|pixel
argument_list|(
name|c
argument_list|)
operator|&
literal|0x00ffffff
return|;
comment|// Assumes standard palette
block|}
end_function
begin_function
DECL|function|generateFontDisplayLists
name|void
name|QGLContext
operator|::
name|generateFontDisplayLists
parameter_list|(
specifier|const
name|QFont
modifier|&
name|fnt
parameter_list|,
name|int
name|listBase
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isValid
argument_list|()
condition|)
return|return;
name|HDC
name|display_dc
init|=
name|GetDC
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|HDC
name|tmp_dc
init|=
name|CreateCompatibleDC
argument_list|(
name|display_dc
argument_list|)
decl_stmt|;
name|HGDIOBJ
name|old_font
init|=
name|SelectObject
argument_list|(
name|tmp_dc
argument_list|,
name|fnt
operator|.
name|handle
argument_list|()
argument_list|)
decl_stmt|;
name|ReleaseDC
argument_list|(
literal|0
argument_list|,
name|display_dc
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|wglUseFontBitmaps
argument_list|(
name|tmp_dc
argument_list|,
literal|0
argument_list|,
literal|256
argument_list|,
name|listBase
argument_list|)
condition|)
name|qWarning
argument_list|(
literal|"QGLContext::generateFontDisplayLists: Could not generate display lists for font '%s'"
argument_list|,
name|fnt
operator|.
name|family
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|SelectObject
argument_list|(
name|tmp_dc
argument_list|,
name|old_font
argument_list|)
expr_stmt|;
name|DeleteDC
argument_list|(
name|tmp_dc
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|getProcAddress
name|void
modifier|*
name|QGLContext
operator|::
name|getProcAddress
parameter_list|(
specifier|const
name|QString
modifier|&
name|proc
parameter_list|)
specifier|const
block|{
return|return
operator|(
name|void
operator|*
operator|)
name|wglGetProcAddress
argument_list|(
name|proc
operator|.
name|toLatin1
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*****************************************************************************   QGLWidget Win32/WGL-specific code  *****************************************************************************/
end_comment
begin_function
DECL|function|init
name|void
name|QGLWidgetPrivate
operator|::
name|init
parameter_list|(
name|QGLContext
modifier|*
name|ctx
parameter_list|,
specifier|const
name|QGLWidget
modifier|*
name|shareWidget
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QGLWidget
argument_list|)
expr_stmt|;
name|olcx
operator|=
literal|0
expr_stmt|;
name|initContext
argument_list|(
name|ctx
argument_list|,
name|shareWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|isValid
argument_list|()
operator|&&
name|q
operator|->
name|context
argument_list|()
operator|->
name|format
argument_list|()
operator|.
name|hasOverlay
argument_list|()
condition|)
block|{
name|olcx
operator|=
operator|new
name|QGLContext
argument_list|(
name|QGLFormat
operator|::
name|defaultOverlayFormat
argument_list|()
argument_list|,
name|q
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|olcx
operator|->
name|create
argument_list|(
name|shareWidget
condition|?
name|shareWidget
operator|->
name|overlayContext
argument_list|()
else|:
literal|0
argument_list|)
condition|)
block|{
operator|delete
name|olcx
expr_stmt|;
name|olcx
operator|=
literal|0
expr_stmt|;
name|glcx
operator|->
name|d_func
argument_list|()
operator|->
name|glFormat
operator|.
name|setOverlay
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|olcx
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*\internal   Store color values in the given colormap. */
end_comment
begin_function
DECL|function|qStoreColors
specifier|static
name|void
name|qStoreColors
parameter_list|(
name|HPALETTE
name|cmap
parameter_list|,
specifier|const
name|QGLColormap
modifier|&
name|cols
parameter_list|)
block|{
name|QRgb
name|color
decl_stmt|;
name|PALETTEENTRY
name|pe
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cols
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|color
operator|=
name|cols
operator|.
name|entryRgb
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|pe
operator|.
name|peRed
operator|=
name|qRed
argument_list|(
name|color
argument_list|)
expr_stmt|;
name|pe
operator|.
name|peGreen
operator|=
name|qGreen
argument_list|(
name|color
argument_list|)
expr_stmt|;
name|pe
operator|.
name|peBlue
operator|=
name|qBlue
argument_list|(
name|color
argument_list|)
expr_stmt|;
name|pe
operator|.
name|peFlags
operator|=
literal|0
expr_stmt|;
name|SetPaletteEntries
argument_list|(
name|cmap
argument_list|,
name|i
argument_list|,
literal|1
argument_list|,
operator|&
name|pe
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|updateColormap
name|void
name|QGLWidgetPrivate
operator|::
name|updateColormap
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QGLWidget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|cmap
operator|.
name|handle
argument_list|()
condition|)
return|return;
name|HDC
name|hdc
init|=
name|GetDC
argument_list|(
name|q
operator|->
name|winId
argument_list|()
argument_list|)
decl_stmt|;
name|SelectPalette
argument_list|(
name|hdc
argument_list|,
operator|(
name|HPALETTE
operator|)
name|cmap
operator|.
name|handle
argument_list|()
argument_list|,
name|TRUE
argument_list|)
expr_stmt|;
name|qStoreColors
argument_list|(
operator|(
name|HPALETTE
operator|)
name|cmap
operator|.
name|handle
argument_list|()
argument_list|,
name|cmap
argument_list|)
expr_stmt|;
name|RealizePalette
argument_list|(
name|hdc
argument_list|)
expr_stmt|;
name|ReleaseDC
argument_list|(
name|q
operator|->
name|winId
argument_list|()
argument_list|,
name|hdc
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setMouseTracking
name|void
name|QGLWidget
operator|::
name|setMouseTracking
parameter_list|(
name|bool
name|enable
parameter_list|)
block|{
name|QWidget
operator|::
name|setMouseTracking
argument_list|(
name|enable
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|resizeEvent
name|void
name|QGLWidget
operator|::
name|resizeEvent
parameter_list|(
name|QResizeEvent
modifier|*
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGLWidget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isValid
argument_list|()
condition|)
return|return;
name|makeCurrent
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|glcx
operator|->
name|initialized
argument_list|()
condition|)
name|glInit
argument_list|()
expr_stmt|;
name|resizeGL
argument_list|(
name|width
argument_list|()
argument_list|,
name|height
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|olcx
condition|)
block|{
name|makeOverlayCurrent
argument_list|()
expr_stmt|;
name|resizeOverlayGL
argument_list|(
name|width
argument_list|()
argument_list|,
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|overlayContext
specifier|const
name|QGLContext
modifier|*
name|QGLWidget
operator|::
name|overlayContext
parameter_list|()
specifier|const
block|{
return|return
name|d_func
argument_list|()
operator|->
name|olcx
return|;
block|}
end_function
begin_function
DECL|function|makeOverlayCurrent
name|void
name|QGLWidget
operator|::
name|makeOverlayCurrent
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QGLWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|olcx
condition|)
block|{
name|d
operator|->
name|olcx
operator|->
name|makeCurrent
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|olcx
operator|->
name|initialized
argument_list|()
condition|)
block|{
name|initializeOverlayGL
argument_list|()
expr_stmt|;
name|d
operator|->
name|olcx
operator|->
name|setInitialized
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|updateOverlayGL
name|void
name|QGLWidget
operator|::
name|updateOverlayGL
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QGLWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|olcx
condition|)
block|{
name|makeOverlayCurrent
argument_list|()
expr_stmt|;
name|paintOverlayGL
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|olcx
operator|->
name|format
argument_list|()
operator|.
name|doubleBuffer
argument_list|()
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|autoSwap
condition|)
name|d
operator|->
name|olcx
operator|->
name|swapBuffers
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|glFlush
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|setContext
name|void
name|QGLWidget
operator|::
name|setContext
parameter_list|(
name|QGLContext
modifier|*
name|context
parameter_list|,
specifier|const
name|QGLContext
modifier|*
name|shareContext
parameter_list|,
name|bool
name|deleteOldContext
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGLWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|==
literal|0
condition|)
block|{
name|qWarning
argument_list|(
literal|"QGLWidget::setContext: Cannot set null context"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|context
operator|->
name|deviceIsPixmap
argument_list|()
operator|&&
name|context
operator|->
name|device
argument_list|()
operator|!=
name|this
condition|)
block|{
name|qWarning
argument_list|(
literal|"QGLWidget::setContext: Context must refer to this widget"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|d
operator|->
name|glcx
condition|)
name|d
operator|->
name|glcx
operator|->
name|doneCurrent
argument_list|()
expr_stmt|;
name|QGLContext
modifier|*
name|oldcx
init|=
name|d
operator|->
name|glcx
decl_stmt|;
name|d
operator|->
name|glcx
operator|=
name|context
expr_stmt|;
name|bool
name|doShow
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|oldcx
operator|&&
name|oldcx
operator|->
name|d_func
argument_list|()
operator|->
name|win
operator|==
name|winId
argument_list|()
operator|&&
operator|!
name|d
operator|->
name|glcx
operator|->
name|deviceIsPixmap
argument_list|()
condition|)
block|{
comment|// We already have a context and must therefore create a new
comment|// window since Windows does not permit setting a new OpenGL
comment|// context for a window that already has one set.
name|doShow
operator|=
name|isVisible
argument_list|()
expr_stmt|;
name|QWidget
modifier|*
name|pW
init|=
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|parent
argument_list|()
argument_list|)
decl_stmt|;
name|QPoint
name|pos
init|=
name|geometry
argument_list|()
operator|.
name|topLeft
argument_list|()
decl_stmt|;
name|setParent
argument_list|(
name|pW
argument_list|,
name|windowFlags
argument_list|()
argument_list|)
expr_stmt|;
name|move
argument_list|(
name|pos
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|d
operator|->
name|glcx
operator|->
name|isValid
argument_list|()
condition|)
block|{
name|bool
name|wasSharing
init|=
name|shareContext
operator|||
operator|(
name|oldcx
operator|&&
name|oldcx
operator|->
name|isSharing
argument_list|()
operator|)
decl_stmt|;
name|d
operator|->
name|glcx
operator|->
name|create
argument_list|(
name|shareContext
condition|?
name|shareContext
else|:
name|oldcx
argument_list|)
expr_stmt|;
comment|// the above is a trick to keep disp lists etc when a
comment|// QGLWidget has been reparented, so remove the sharing
comment|// flag if we don't actually have a sharing context.
if|if
condition|(
operator|!
name|wasSharing
condition|)
name|d
operator|->
name|glcx
operator|->
name|d_ptr
operator|->
name|sharing
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|deleteOldContext
condition|)
operator|delete
name|oldcx
expr_stmt|;
if|if
condition|(
name|doShow
condition|)
name|show
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|renderCxPm
name|bool
name|QGLWidgetPrivate
operator|::
name|renderCxPm
parameter_list|(
name|QPixmap
modifier|*
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|cleanupColormaps
name|void
name|QGLWidgetPrivate
operator|::
name|cleanupColormaps
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QGLWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmap
operator|.
name|handle
argument_list|()
condition|)
block|{
name|HDC
name|hdc
init|=
name|GetDC
argument_list|(
name|q
operator|->
name|winId
argument_list|()
argument_list|)
decl_stmt|;
name|SelectPalette
argument_list|(
name|hdc
argument_list|,
operator|(
name|HPALETTE
operator|)
name|GetStockObject
argument_list|(
name|DEFAULT_PALETTE
argument_list|)
argument_list|,
name|FALSE
argument_list|)
expr_stmt|;
name|DeleteObject
argument_list|(
operator|(
name|HPALETTE
operator|)
name|cmap
operator|.
name|handle
argument_list|()
argument_list|)
expr_stmt|;
name|ReleaseDC
argument_list|(
name|q
operator|->
name|winId
argument_list|()
argument_list|,
name|hdc
argument_list|)
expr_stmt|;
name|cmap
operator|.
name|setHandle
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
end_function
begin_function
DECL|function|colormap
specifier|const
name|QGLColormap
modifier|&
name|QGLWidget
operator|::
name|colormap
parameter_list|()
specifier|const
block|{
return|return
name|d_func
argument_list|()
operator|->
name|cmap
return|;
block|}
end_function
begin_function
DECL|function|setColormap
name|void
name|QGLWidget
operator|::
name|setColormap
parameter_list|(
specifier|const
name|QGLColormap
modifier|&
name|c
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGLWidget
argument_list|)
expr_stmt|;
name|d
operator|->
name|cmap
operator|=
name|c
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|cmap
operator|.
name|handle
argument_list|()
condition|)
block|{
comment|// already have an allocated cmap
name|d
operator|->
name|updateColormap
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|LOGPALETTE
modifier|*
name|lpal
init|=
operator|(
name|LOGPALETTE
operator|*
operator|)
name|malloc
argument_list|(
sizeof|sizeof
argument_list|(
name|LOGPALETTE
argument_list|)
operator|+
name|c
operator|.
name|size
argument_list|()
operator|*
sizeof|sizeof
argument_list|(
name|PALETTEENTRY
argument_list|)
argument_list|)
decl_stmt|;
name|lpal
operator|->
name|palVersion
operator|=
literal|0x300
expr_stmt|;
name|lpal
operator|->
name|palNumEntries
operator|=
name|c
operator|.
name|size
argument_list|()
expr_stmt|;
name|d
operator|->
name|cmap
operator|.
name|setHandle
argument_list|(
name|CreatePalette
argument_list|(
name|lpal
argument_list|)
argument_list|)
expr_stmt|;
name|free
argument_list|(
name|lpal
argument_list|)
expr_stmt|;
name|d
operator|->
name|updateColormap
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
