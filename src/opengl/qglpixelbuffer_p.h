begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtOpenGL module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QGLPIXELBUFFER_P_H
end_ifndef
begin_define
DECL|macro|QGLPIXELBUFFER_P_H
define|#
directive|define
name|QGLPIXELBUFFER_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists for the convenience
end_comment
begin_comment
comment|// of the QLibrary class.  This header file may change from
end_comment
begin_comment
comment|// version to version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_expr_stmt
name|QT_BEGIN_NAMESPACE
name|QT_BEGIN_INCLUDE_NAMESPACE
end_expr_stmt
begin_include
include|#
directive|include
file|"QtOpenGL/qglpixelbuffer.h"
end_include
begin_include
include|#
directive|include
file|<private/qgl_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qglpaintdevice_p.h>
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_X11
argument_list|)
operator|&&
name|defined
argument_list|(
name|QT_NO_EGL
argument_list|)
end_if
begin_include
include|#
directive|include
file|<GL/glx.h>
end_include
begin_comment
comment|// The below is needed to for compilation on HPUX, due to broken GLX
end_comment
begin_comment
comment|// headers. Some of the systems define GLX_VERSION_1_3 without
end_comment
begin_comment
comment|// defining the GLXFBConfig structure, which is wrong.
end_comment
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_HPUX
argument_list|)
operator|&&
name|defined
argument_list|(
name|QT_DEFINE_GLXFBCONFIG_STRUCT
argument_list|)
end_if
begin_typedef
DECL|typedef|GLXPbuffer
typedef|typedef
name|unsigned
name|long
name|GLXPbuffer
typedef|;
end_typedef
begin_struct
DECL|struct|GLXFBConfig
struct|struct
name|GLXFBConfig
block|{
DECL|member|visualType
name|int
name|visualType
decl_stmt|;
DECL|member|transparentType
name|int
name|transparentType
decl_stmt|;
comment|/*    colors are floats scaled to ints */
DECL|member|transparentRed
DECL|member|transparentGreen
DECL|member|transparentBlue
DECL|member|transparentAlpha
name|int
name|transparentRed
decl_stmt|,
name|transparentGreen
decl_stmt|,
name|transparentBlue
decl_stmt|,
name|transparentAlpha
decl_stmt|;
DECL|member|transparentIndex
name|int
name|transparentIndex
decl_stmt|;
DECL|member|visualCaveat
name|int
name|visualCaveat
decl_stmt|;
DECL|member|associatedVisualId
name|int
name|associatedVisualId
decl_stmt|;
DECL|member|screen
name|int
name|screen
decl_stmt|;
DECL|member|drawableType
name|int
name|drawableType
decl_stmt|;
DECL|member|renderType
name|int
name|renderType
decl_stmt|;
DECL|member|maxPbufferWidth
DECL|member|maxPbufferHeight
DECL|member|maxPbufferPixels
name|int
name|maxPbufferWidth
decl_stmt|,
name|maxPbufferHeight
decl_stmt|,
name|maxPbufferPixels
decl_stmt|;
DECL|member|optimalPbufferWidth
DECL|member|optimalPbufferHeight
name|int
name|optimalPbufferWidth
decl_stmt|,
name|optimalPbufferHeight
decl_stmt|;
comment|/* for SGIX_pbuffer */
DECL|member|visualSelectGroup
name|int
name|visualSelectGroup
decl_stmt|;
comment|/* visuals grouped by select priority */
DECL|member|id
name|unsigned
name|int
name|id
decl_stmt|;
DECL|member|rgbMode
name|GLboolean
name|rgbMode
decl_stmt|;
DECL|member|colorIndexMode
name|GLboolean
name|colorIndexMode
decl_stmt|;
DECL|member|doubleBufferMode
name|GLboolean
name|doubleBufferMode
decl_stmt|;
DECL|member|stereoMode
name|GLboolean
name|stereoMode
decl_stmt|;
DECL|member|haveAccumBuffer
name|GLboolean
name|haveAccumBuffer
decl_stmt|;
DECL|member|haveDepthBuffer
name|GLboolean
name|haveDepthBuffer
decl_stmt|;
DECL|member|haveStencilBuffer
name|GLboolean
name|haveStencilBuffer
decl_stmt|;
comment|/* The number of bits present in various buffers */
DECL|member|accumRedBits
DECL|member|accumGreenBits
DECL|member|accumBlueBits
DECL|member|accumAlphaBits
name|GLint
name|accumRedBits
decl_stmt|,
name|accumGreenBits
decl_stmt|,
name|accumBlueBits
decl_stmt|,
name|accumAlphaBits
decl_stmt|;
DECL|member|depthBits
name|GLint
name|depthBits
decl_stmt|;
DECL|member|stencilBits
name|GLint
name|stencilBits
decl_stmt|;
DECL|member|indexBits
name|GLint
name|indexBits
decl_stmt|;
DECL|member|redBits
DECL|member|greenBits
DECL|member|blueBits
DECL|member|alphaBits
name|GLint
name|redBits
decl_stmt|,
name|greenBits
decl_stmt|,
name|blueBits
decl_stmt|,
name|alphaBits
decl_stmt|;
DECL|member|redMask
DECL|member|greenMask
DECL|member|blueMask
DECL|member|alphaMask
name|GLuint
name|redMask
decl_stmt|,
name|greenMask
decl_stmt|,
name|blueMask
decl_stmt|,
name|alphaMask
decl_stmt|;
DECL|member|multiSampleSize
name|GLuint
name|multiSampleSize
decl_stmt|;
comment|/* Number of samples per pixel (0 if no ms) */
DECL|member|nMultiSampleBuffers
name|GLuint
name|nMultiSampleBuffers
decl_stmt|;
comment|/* Number of available ms buffers */
DECL|member|maxAuxBuffers
name|GLint
name|maxAuxBuffers
decl_stmt|;
comment|/* frame buffer level */
DECL|member|level
name|GLint
name|level
decl_stmt|;
comment|/* color ranges (for SGI_color_range) */
DECL|member|extendedRange
name|GLboolean
name|extendedRange
decl_stmt|;
DECL|member|minRed
DECL|member|maxRed
name|GLdouble
name|minRed
decl_stmt|,
name|maxRed
decl_stmt|;
DECL|member|minGreen
DECL|member|maxGreen
name|GLdouble
name|minGreen
decl_stmt|,
name|maxGreen
decl_stmt|;
DECL|member|minBlue
DECL|member|maxBlue
name|GLdouble
name|minBlue
decl_stmt|,
name|maxBlue
decl_stmt|;
DECL|member|minAlpha
DECL|member|maxAlpha
name|GLdouble
name|minAlpha
decl_stmt|,
name|maxAlpha
decl_stmt|;
block|}
struct|;
end_struct
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Q_OS_HPUX
end_comment
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|Q_WS_WIN
argument_list|)
end_elif
begin_expr_stmt
name|DECLARE_HANDLE
argument_list|(
name|HPBUFFERARB
argument_list|)
expr_stmt|;
end_expr_stmt
begin_elif
elif|#
directive|elif
operator|!
name|defined
argument_list|(
name|QT_NO_EGL
argument_list|)
end_elif
begin_include
include|#
directive|include
file|<QtGui/private/qegl_p.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|QT_END_INCLUDE_NAMESPACE
DECL|variable|QEglContext
name|class
name|QEglContext
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QGLPBufferGLPaintDevice
range|:
name|public
name|QGLPaintDevice
block|{
name|public
operator|:
name|virtual
name|QPaintEngine
operator|*
name|paintEngine
argument_list|()
specifier|const
block|{
return|return
name|pbuf
operator|->
name|paintEngine
argument_list|()
return|;
block|}
name|virtual
name|QSize
name|size
argument_list|()
specifier|const
block|{
return|return
name|pbuf
operator|->
name|size
argument_list|()
return|;
block|}
name|virtual
name|QGLContext
operator|*
name|context
argument_list|()
specifier|const
block|;
name|virtual
name|void
name|endPaint
argument_list|()
block|;
name|void
name|setPBuffer
argument_list|(
name|QGLPixelBuffer
operator|*
name|pb
argument_list|)
block|;
name|private
operator|:
name|QGLPixelBuffer
operator|*
name|pbuf
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QGLPixelBufferPrivate
block|{
name|Q_DECLARE_PUBLIC
argument_list|(
argument|QGLPixelBuffer
argument_list|)
name|public
label|:
name|QGLPixelBufferPrivate
argument_list|(
name|QGLPixelBuffer
operator|*
name|q
argument_list|)
operator|:
name|q_ptr
argument_list|(
name|q
argument_list|)
operator|,
name|invalid
argument_list|(
name|true
argument_list|)
operator|,
name|qctx
argument_list|(
literal|0
argument_list|)
operator|,
name|pbuf
argument_list|(
literal|0
argument_list|)
operator|,
name|ctx
argument_list|(
literal|0
argument_list|)
block|{
ifdef|#
directive|ifdef
name|Q_WS_WIN
name|dc
operator|=
literal|0
block|;
elif|#
directive|elif
name|defined
argument_list|(
name|Q_WS_MACX
argument_list|)
name|share_ctx
operator|=
literal|0
block|;
endif|#
directive|endif
block|}
name|bool
name|init
argument_list|(
specifier|const
name|QSize
operator|&
name|size
argument_list|,
specifier|const
name|QGLFormat
operator|&
name|f
argument_list|,
name|QGLWidget
operator|*
name|shareWidget
argument_list|)
expr_stmt|;
name|void
name|common_init
parameter_list|(
specifier|const
name|QSize
modifier|&
name|size
parameter_list|,
specifier|const
name|QGLFormat
modifier|&
name|f
parameter_list|,
name|QGLWidget
modifier|*
name|shareWidget
parameter_list|)
function_decl|;
name|bool
name|cleanup
parameter_list|()
function_decl|;
name|QGLPixelBuffer
modifier|*
name|q_ptr
decl_stmt|;
name|bool
name|invalid
decl_stmt|;
name|QGLContext
modifier|*
name|qctx
decl_stmt|;
name|QGLPBufferGLPaintDevice
name|glDevice
decl_stmt|;
name|QGLFormat
name|format
decl_stmt|;
name|QGLFormat
name|req_format
decl_stmt|;
name|QPointer
operator|<
name|QGLWidget
operator|>
name|req_shareWidget
expr_stmt|;
name|QSize
name|req_size
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_X11
argument_list|)
operator|&&
name|defined
argument_list|(
name|QT_NO_EGL
argument_list|)
name|GLXPbuffer
name|pbuf
decl_stmt|;
name|GLXContext
name|ctx
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|Q_WS_WIN
argument_list|)
name|HDC
name|dc
decl_stmt|;
name|bool
name|has_render_texture
range|:
literal|1
decl_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_OPENGL_ES
argument_list|)
name|HPBUFFERARB
name|pbuf
decl_stmt|;
name|HGLRC
name|ctx
decl_stmt|;
endif|#
directive|endif
elif|#
directive|elif
name|defined
argument_list|(
name|Q_WS_MACX
argument_list|)
ifdef|#
directive|ifdef
name|QT_MAC_USE_COCOA
name|void
modifier|*
name|pbuf
decl_stmt|;
name|void
modifier|*
name|ctx
decl_stmt|;
name|void
modifier|*
name|share_ctx
decl_stmt|;
else|#
directive|else
name|AGLPbuffer
name|pbuf
decl_stmt|;
name|AGLContext
name|ctx
decl_stmt|;
name|AGLContext
name|share_ctx
decl_stmt|;
endif|#
directive|endif
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_EGL
name|EGLSurface
name|pbuf
decl_stmt|;
name|QEglContext
modifier|*
name|ctx
decl_stmt|;
name|int
name|textureFormat
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|Q_WS_QPA
argument_list|)
comment|//stubs
name|void
modifier|*
name|pbuf
decl_stmt|;
name|void
modifier|*
name|ctx
decl_stmt|;
endif|#
directive|endif
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QGLPIXELBUFFER_P_H
end_comment
end_unit
