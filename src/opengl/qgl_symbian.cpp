begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtOpenGL module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qgl.h"
end_include
begin_include
include|#
directive|include
file|<fbs.h>
end_include
begin_include
include|#
directive|include
file|<private/qt_s60_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qpixmap_s60_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qimagepixmapcleanuphooks_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qgl_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qpaintengine_opengl_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qwidget_p.h>
end_include
begin_comment
comment|// to access QWExtra
end_comment
begin_include
include|#
directive|include
file|<private/qnativeimagehandleprovider_p.h>
end_include
begin_include
include|#
directive|include
file|"qgl_egl_p.h"
end_include
begin_include
include|#
directive|include
file|"qplatformpixmap_gl_p.h"
end_include
begin_include
include|#
directive|include
file|"qgltexturepool_p.h"
end_include
begin_include
include|#
directive|include
file|"qcolormap.h"
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
comment|// Turn off "direct to window" rendering if EGL cannot support it.
if|#
directive|if
operator|!
name|defined
argument_list|(
name|EGL_RENDER_BUFFER
argument_list|)
operator|||
operator|!
name|defined
argument_list|(
name|EGL_SINGLE_BUFFER
argument_list|)
if|#
directive|if
name|defined
argument_list|(
name|QGL_DIRECT_TO_WINDOW
argument_list|)
DECL|macro|QGL_DIRECT_TO_WINDOW
undef|#
directive|undef
name|QGL_DIRECT_TO_WINDOW
endif|#
directive|endif
endif|#
directive|endif
comment|// Determine if preserved window contents should be used.
if|#
directive|if
operator|!
name|defined
argument_list|(
name|EGL_SWAP_BEHAVIOR
argument_list|)
operator|||
operator|!
name|defined
argument_list|(
name|EGL_BUFFER_PRESERVED
argument_list|)
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QGL_NO_PRESERVED_SWAP
argument_list|)
DECL|macro|QGL_NO_PRESERVED_SWAP
define|#
directive|define
name|QGL_NO_PRESERVED_SWAP
value|1
endif|#
directive|endif
endif|#
directive|endif
specifier|extern
name|int
name|qt_gl_pixmap_serial
decl_stmt|;
end_decl_stmt
begin_comment
comment|/*     QGLTemporaryContext implementation */
end_comment
begin_class
DECL|class|QGLTemporaryContextPrivate
class|class
name|QGLTemporaryContextPrivate
block|{
public|public:
DECL|member|initialized
name|bool
name|initialized
decl_stmt|;
DECL|member|window
name|RWindow
modifier|*
name|window
decl_stmt|;
DECL|member|context
name|EGLContext
name|context
decl_stmt|;
DECL|member|surface
name|EGLSurface
name|surface
decl_stmt|;
DECL|member|display
name|EGLDisplay
name|display
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|QGLTemporaryContext
name|QGLTemporaryContext
operator|::
name|QGLTemporaryContext
parameter_list|(
name|bool
parameter_list|,
name|QWidget
modifier|*
parameter_list|)
member_init_list|:
name|d
argument_list|(
operator|new
name|QGLTemporaryContextPrivate
argument_list|)
block|{
name|d
operator|->
name|initialized
operator|=
literal|false
expr_stmt|;
name|d
operator|->
name|window
operator|=
literal|0
expr_stmt|;
name|d
operator|->
name|context
operator|=
literal|0
expr_stmt|;
name|d
operator|->
name|surface
operator|=
literal|0
expr_stmt|;
name|d
operator|->
name|display
operator|=
name|d
operator|->
name|display
operator|=
name|QEgl
operator|::
name|display
argument_list|()
expr_stmt|;
name|EGLConfig
name|config
decl_stmt|;
name|int
name|numConfigs
init|=
literal|0
decl_stmt|;
name|EGLint
name|attribs
index|[]
init|=
block|{
name|EGL_SURFACE_TYPE
block|,
name|EGL_WINDOW_BIT
block|,
ifdef|#
directive|ifdef
name|QT_OPENGL_ES_2
name|EGL_RENDERABLE_TYPE
block|,
name|EGL_OPENGL_ES2_BIT
block|,
endif|#
directive|endif
name|EGL_NONE
block|}
decl_stmt|;
name|eglChooseConfig
argument_list|(
name|d
operator|->
name|display
argument_list|,
name|attribs
argument_list|,
operator|&
name|config
argument_list|,
literal|1
argument_list|,
operator|&
name|numConfigs
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|numConfigs
condition|)
block|{
name|qWarning
argument_list|(
literal|"QGLTemporaryContext: No EGL configurations available."
argument_list|)
expr_stmt|;
return|return;
block|}
name|d
operator|->
name|window
operator|=
operator|new
name|RWindow
argument_list|(
name|CCoeEnv
operator|::
name|Static
argument_list|()
operator|->
name|WsSession
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|window
operator|->
name|Construct
argument_list|(
name|CCoeEnv
operator|::
name|Static
argument_list|()
operator|->
name|RootWin
argument_list|()
argument_list|,
operator|(
name|uint
operator|)
name|this
argument_list|)
expr_stmt|;
name|d
operator|->
name|surface
operator|=
name|eglCreateWindowSurface
argument_list|(
name|d
operator|->
name|display
argument_list|,
name|config
argument_list|,
operator|(
name|EGLNativeWindowType
operator|)
name|d
operator|->
name|window
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|surface
operator|==
name|EGL_NO_SURFACE
condition|)
block|{
name|qWarning
argument_list|(
literal|"QGLTemporaryContext: Error creating EGL surface."
argument_list|)
expr_stmt|;
operator|delete
name|d
operator|->
name|window
expr_stmt|;
name|d
operator|->
name|window
operator|=
literal|0
expr_stmt|;
return|return;
block|}
name|EGLint
name|contextAttribs
index|[]
init|=
block|{
ifdef|#
directive|ifdef
name|QT_OPENGL_ES_2
name|EGL_CONTEXT_CLIENT_VERSION
block|,
literal|2
block|,
endif|#
directive|endif
name|EGL_NONE
block|}
decl_stmt|;
name|d
operator|->
name|context
operator|=
name|eglCreateContext
argument_list|(
name|d
operator|->
name|display
argument_list|,
name|config
argument_list|,
literal|0
argument_list|,
name|contextAttribs
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|context
operator|!=
name|EGL_NO_CONTEXT
operator|&&
name|eglMakeCurrent
argument_list|(
name|d
operator|->
name|display
argument_list|,
name|d
operator|->
name|surface
argument_list|,
name|d
operator|->
name|surface
argument_list|,
name|d
operator|->
name|context
argument_list|)
condition|)
block|{
name|d
operator|->
name|initialized
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|(
literal|"QGLTemporaryContext: Error creating EGL context."
argument_list|)
expr_stmt|;
name|d
operator|->
name|window
operator|=
literal|0
expr_stmt|;
return|return;
block|}
block|}
end_constructor
begin_destructor
DECL|function|~QGLTemporaryContext
name|QGLTemporaryContext
operator|::
name|~
name|QGLTemporaryContext
parameter_list|()
block|{
if|if
condition|(
name|d
operator|->
name|initialized
condition|)
block|{
name|eglMakeCurrent
argument_list|(
name|d
operator|->
name|display
argument_list|,
name|EGL_NO_SURFACE
argument_list|,
name|EGL_NO_SURFACE
argument_list|,
name|EGL_NO_CONTEXT
argument_list|)
expr_stmt|;
name|eglDestroyContext
argument_list|(
name|d
operator|->
name|display
argument_list|,
name|d
operator|->
name|context
argument_list|)
expr_stmt|;
name|eglDestroySurface
argument_list|(
name|d
operator|->
name|display
argument_list|,
name|d
operator|->
name|surface
argument_list|)
expr_stmt|;
operator|delete
name|d
operator|->
name|window
expr_stmt|;
block|}
block|}
end_destructor
begin_function
DECL|function|hasOpenGLOverlays
name|bool
name|QGLFormat
operator|::
name|hasOpenGLOverlays
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|// Chooses the EGL config and creates the EGL context
end_comment
begin_function
DECL|function|chooseContext
name|bool
name|QGLContext
operator|::
name|chooseContext
parameter_list|(
specifier|const
name|QGLContext
modifier|*
name|shareContext
parameter_list|)
comment|// almost same as in qgl_x11egl.cpp
block|{
name|Q_D
argument_list|(
name|QGLContext
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|device
argument_list|()
condition|)
return|return
literal|false
return|;
name|int
name|devType
init|=
name|device
argument_list|()
operator|->
name|devType
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|devType
operator|!=
name|QInternal
operator|::
name|Widget
operator|)
operator|&&
operator|(
name|devType
operator|!=
name|QInternal
operator|::
name|Pbuffer
operator|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"WARNING: Creating a QGLContext not supported on device type %d"
argument_list|,
name|devType
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// Get the display and initialize it.
if|if
condition|(
name|d
operator|->
name|eglContext
operator|==
literal|0
condition|)
block|{
name|d
operator|->
name|eglContext
operator|=
operator|new
name|QEglContext
argument_list|()
expr_stmt|;
name|d
operator|->
name|ownsEglContext
operator|=
literal|true
expr_stmt|;
name|d
operator|->
name|eglContext
operator|->
name|setApi
argument_list|(
name|QEgl
operator|::
name|OpenGL
argument_list|)
expr_stmt|;
comment|// If the device is a widget with WA_TranslucentBackground set, make sure the glFormat
comment|// has the alpha channel option set:
if|if
condition|(
name|devType
operator|==
name|QInternal
operator|::
name|Widget
condition|)
block|{
name|QWidget
modifier|*
name|widget
init|=
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|device
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|widget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_TranslucentBackground
argument_list|)
condition|)
name|d
operator|->
name|glFormat
operator|.
name|setAlpha
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// Construct the configuration we need for this surface.
name|QEglProperties
name|configProps
decl_stmt|;
name|configProps
operator|.
name|setDeviceType
argument_list|(
name|devType
argument_list|)
expr_stmt|;
name|configProps
operator|.
name|setPaintDeviceFormat
argument_list|(
name|device
argument_list|()
argument_list|)
expr_stmt|;
name|configProps
operator|.
name|setRenderableType
argument_list|(
name|QEgl
operator|::
name|OpenGL
argument_list|)
expr_stmt|;
name|configProps
operator|.
name|setValue
argument_list|(
name|EGL_SURFACE_TYPE
argument_list|,
name|EGL_WINDOW_BIT
operator||
name|EGL_SWAP_BEHAVIOR_PRESERVED_BIT
argument_list|)
expr_stmt|;
name|qt_eglproperties_set_glformat
argument_list|(
name|configProps
argument_list|,
name|d
operator|->
name|glFormat
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|eglContext
operator|->
name|chooseConfig
argument_list|(
name|configProps
argument_list|,
name|QEgl
operator|::
name|BestPixelFormat
argument_list|)
condition|)
block|{
operator|delete
name|d
operator|->
name|eglContext
expr_stmt|;
name|d
operator|->
name|eglContext
operator|=
literal|0
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// Create a new context for the configuration.
name|QEglContext
modifier|*
name|eglSharedContext
init|=
name|shareContext
condition|?
name|shareContext
operator|->
name|d_func
argument_list|()
operator|->
name|eglContext
else|:
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|eglContext
operator|->
name|createContext
argument_list|(
name|eglSharedContext
argument_list|)
condition|)
block|{
operator|delete
name|d
operator|->
name|eglContext
expr_stmt|;
name|d
operator|->
name|eglContext
operator|=
literal|0
expr_stmt|;
return|return
literal|false
return|;
block|}
name|d
operator|->
name|sharing
operator|=
name|d
operator|->
name|eglContext
operator|->
name|isSharing
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|sharing
operator|&&
name|shareContext
condition|)
cast|const_cast
argument_list|<
name|QGLContext
operator|*
argument_list|>
argument_list|(
name|shareContext
argument_list|)
operator|->
name|d_func
argument_list|()
operator|->
name|sharing
operator|=
literal|true
expr_stmt|;
block|}
comment|// Inform the higher layers about the actual format properties
name|qt_glformat_from_eglconfig
argument_list|(
name|d
operator|->
name|glFormat
argument_list|,
name|d
operator|->
name|eglContext
operator|->
name|config
argument_list|()
argument_list|)
expr_stmt|;
comment|// Do don't create the EGLSurface for everything.
comment|//    QWidget - yes, create the EGLSurface and store it in QGLContextPrivate::eglSurface
comment|//    QGLWidget - yes, create the EGLSurface and store it in QGLContextPrivate::eglSurface
comment|//    QGLPixelBuffer - no, it creates the surface itself and stores it in QGLPixelBufferPrivate::pbuf
if|if
condition|(
name|devType
operator|==
name|QInternal
operator|::
name|Widget
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|eglSurface
operator|!=
name|EGL_NO_SURFACE
condition|)
name|eglDestroySurface
argument_list|(
name|d
operator|->
name|eglContext
operator|->
name|display
argument_list|()
argument_list|,
name|d
operator|->
name|eglSurface
argument_list|)
expr_stmt|;
name|d
operator|->
name|eglSurface
operator|=
name|QEgl
operator|::
name|createSurface
argument_list|(
name|device
argument_list|()
argument_list|,
name|d
operator|->
name|eglContext
operator|->
name|config
argument_list|()
argument_list|)
expr_stmt|;
name|eglGetError
argument_list|()
expr_stmt|;
comment|// Clear error state first.
ifdef|#
directive|ifdef
name|QGL_NO_PRESERVED_SWAP
name|eglSurfaceAttrib
argument_list|(
name|QEgl
operator|::
name|display
argument_list|()
argument_list|,
name|d
operator|->
name|eglSurface
argument_list|,
name|EGL_SWAP_BEHAVIOR
argument_list|,
name|EGL_BUFFER_DESTROYED
argument_list|)
expr_stmt|;
if|if
condition|(
name|eglGetError
argument_list|()
operator|!=
name|EGL_SUCCESS
condition|)
name|qWarning
argument_list|(
literal|"QGLContext: could not enable destroyed swap behaviour"
argument_list|)
expr_stmt|;
else|#
directive|else
name|eglSurfaceAttrib
argument_list|(
name|QEgl
operator|::
name|display
argument_list|()
argument_list|,
name|d
operator|->
name|eglSurface
argument_list|,
name|EGL_SWAP_BEHAVIOR
argument_list|,
name|EGL_BUFFER_PRESERVED
argument_list|)
expr_stmt|;
if|if
condition|(
name|eglGetError
argument_list|()
operator|!=
name|EGL_SUCCESS
condition|)
name|qWarning
argument_list|(
literal|"QGLContext: could not enable preserved swap behaviour"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|setWindowCreated
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|resizeEvent
name|void
name|QGLWidget
operator|::
name|resizeEvent
parameter_list|(
name|QResizeEvent
modifier|*
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGLWidget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isValid
argument_list|()
condition|)
return|return;
if|if
condition|(
name|QGLContext
operator|::
name|currentContext
argument_list|()
condition|)
name|doneCurrent
argument_list|()
expr_stmt|;
comment|// Symbian needs to recreate the surface on resize.
name|d
operator|->
name|recreateEglSurface
argument_list|()
expr_stmt|;
name|makeCurrent
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|glcx
operator|->
name|initialized
argument_list|()
condition|)
name|glInit
argument_list|()
expr_stmt|;
name|resizeGL
argument_list|(
name|width
argument_list|()
argument_list|,
name|height
argument_list|()
argument_list|)
expr_stmt|;
comment|//handle overlay
block|}
end_function
begin_function
DECL|function|overlayContext
specifier|const
name|QGLContext
modifier|*
name|QGLWidget
operator|::
name|overlayContext
parameter_list|()
specifier|const
block|{
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|makeOverlayCurrent
name|void
name|QGLWidget
operator|::
name|makeOverlayCurrent
parameter_list|()
block|{
comment|//handle overlay
block|}
end_function
begin_function
DECL|function|updateOverlayGL
name|void
name|QGLWidget
operator|::
name|updateOverlayGL
parameter_list|()
block|{
comment|//handle overlay
block|}
end_function
begin_function
DECL|function|setContext
name|void
name|QGLWidget
operator|::
name|setContext
parameter_list|(
name|QGLContext
modifier|*
name|context
parameter_list|,
specifier|const
name|QGLContext
modifier|*
name|shareContext
parameter_list|,
name|bool
name|deleteOldContext
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGLWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|==
literal|0
condition|)
block|{
name|qWarning
argument_list|(
literal|"QGLWidget::setContext: Cannot set null context"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|context
operator|->
name|deviceIsPixmap
argument_list|()
operator|&&
name|context
operator|->
name|device
argument_list|()
operator|!=
name|this
condition|)
block|{
name|qWarning
argument_list|(
literal|"QGLWidget::setContext: Context must refer to this widget"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|d
operator|->
name|glcx
condition|)
name|d
operator|->
name|glcx
operator|->
name|doneCurrent
argument_list|()
expr_stmt|;
name|QGLContext
modifier|*
name|oldcx
init|=
name|d
operator|->
name|glcx
decl_stmt|;
name|d
operator|->
name|glcx
operator|=
name|context
expr_stmt|;
name|bool
name|createFailed
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|glcx
operator|->
name|isValid
argument_list|()
condition|)
block|{
comment|// Create the QGLContext here, which in turn chooses the EGL config
comment|// and creates the EGL context:
if|if
condition|(
operator|!
name|d
operator|->
name|glcx
operator|->
name|create
argument_list|(
name|shareContext
condition|?
name|shareContext
else|:
name|oldcx
argument_list|)
condition|)
name|createFailed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|createFailed
condition|)
block|{
if|if
condition|(
name|deleteOldContext
condition|)
operator|delete
name|oldcx
expr_stmt|;
return|return;
block|}
name|d
operator|->
name|eglSurfaceWindowId
operator|=
name|winId
argument_list|()
expr_stmt|;
comment|// Remember the window id we created the surface for
block|}
end_function
begin_function
DECL|function|init
name|void
name|QGLWidgetPrivate
operator|::
name|init
parameter_list|(
name|QGLContext
modifier|*
name|context
parameter_list|,
specifier|const
name|QGLWidget
modifier|*
name|shareWidget
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QGLWidget
argument_list|)
expr_stmt|;
name|initContext
argument_list|(
name|context
argument_list|,
name|shareWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|isValid
argument_list|()
operator|&&
name|glcx
operator|->
name|format
argument_list|()
operator|.
name|hasOverlay
argument_list|()
condition|)
block|{
comment|//no overlay
name|qWarning
argument_list|(
literal|"QtOpenGL ES doesn't currently support overlays"
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|cleanupColormaps
name|void
name|QGLWidgetPrivate
operator|::
name|cleanupColormaps
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|colormap
specifier|const
name|QGLColormap
modifier|&
name|QGLWidget
operator|::
name|colormap
parameter_list|()
specifier|const
block|{
return|return
name|d_func
argument_list|()
operator|->
name|cmap
return|;
block|}
end_function
begin_function
DECL|function|setColormap
name|void
name|QGLWidget
operator|::
name|setColormap
parameter_list|(
specifier|const
name|QGLColormap
modifier|&
parameter_list|)
block|{ }
end_function
begin_function
DECL|function|recreateEglSurface
name|void
name|QGLWidgetPrivate
operator|::
name|recreateEglSurface
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QGLWidget
argument_list|)
expr_stmt|;
name|WId
name|currentId
init|=
name|q
operator|->
name|winId
argument_list|()
decl_stmt|;
if|if
condition|(
name|glcx
operator|->
name|d_func
argument_list|()
operator|->
name|eglSurface
operator|!=
name|EGL_NO_SURFACE
condition|)
block|{
name|eglDestroySurface
argument_list|(
name|glcx
operator|->
name|d_func
argument_list|()
operator|->
name|eglContext
operator|->
name|display
argument_list|()
argument_list|,
name|glcx
operator|->
name|d_func
argument_list|()
operator|->
name|eglSurface
argument_list|)
expr_stmt|;
block|}
name|glcx
operator|->
name|d_func
argument_list|()
operator|->
name|eglSurface
operator|=
name|QEgl
operator|::
name|createSurface
argument_list|(
name|glcx
operator|->
name|device
argument_list|()
argument_list|,
name|glcx
operator|->
name|d_func
argument_list|()
operator|->
name|eglContext
operator|->
name|config
argument_list|()
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QGL_NO_PRESERVED_SWAP
argument_list|)
name|eglGetError
argument_list|()
expr_stmt|;
comment|// Clear error state first.
name|eglSurfaceAttrib
argument_list|(
name|QEgl
operator|::
name|display
argument_list|()
argument_list|,
name|glcx
operator|->
name|d_func
argument_list|()
operator|->
name|eglSurface
argument_list|,
name|EGL_SWAP_BEHAVIOR
argument_list|,
name|EGL_BUFFER_PRESERVED
argument_list|)
expr_stmt|;
if|if
condition|(
name|eglGetError
argument_list|()
operator|!=
name|EGL_SUCCESS
condition|)
block|{
name|qWarning
argument_list|(
literal|"QGLContext: could not enable preserved swap"
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
name|eglSurfaceWindowId
operator|=
name|currentId
expr_stmt|;
block|}
end_function
begin_function
DECL|function|knownGoodFormat
specifier|static
specifier|inline
name|bool
name|knownGoodFormat
parameter_list|(
name|QImage
operator|::
name|Format
name|format
parameter_list|)
block|{
switch|switch
condition|(
name|format
condition|)
block|{
case|case
name|QImage
operator|::
name|Format_RGB16
case|:
comment|// EColor64K
case|case
name|QImage
operator|::
name|Format_RGB32
case|:
comment|// EColor16MU
case|case
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
case|:
comment|// EColor16MAP
return|return
literal|true
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
end_function
begin_function
DECL|function|fromNativeType
name|void
name|QGLPlatformPixmap
operator|::
name|fromNativeType
parameter_list|(
name|void
modifier|*
name|pixmap
parameter_list|,
name|NativeType
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
name|QPlatformPixmap
operator|::
name|FbsBitmap
condition|)
block|{
name|CFbsBitmap
modifier|*
name|bitmap
init|=
cast|reinterpret_cast
argument_list|<
name|CFbsBitmap
operator|*
argument_list|>
argument_list|(
name|pixmap
argument_list|)
decl_stmt|;
name|QSize
name|size
argument_list|(
name|bitmap
operator|->
name|SizeInPixels
argument_list|()
operator|.
name|iWidth
argument_list|,
name|bitmap
operator|->
name|SizeInPixels
argument_list|()
operator|.
name|iHeight
argument_list|)
decl_stmt|;
if|if
condition|(
name|size
operator|.
name|width
argument_list|()
operator|==
name|w
operator|&&
name|size
operator|.
name|height
argument_list|()
operator|==
name|h
condition|)
name|setSerialNumber
argument_list|(
operator|++
name|qt_gl_pixmap_serial
argument_list|)
expr_stmt|;
name|resize
argument_list|(
name|size
operator|.
name|width
argument_list|()
argument_list|,
name|size
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|m_source
operator|=
name|QVolatileImage
argument_list|(
name|bitmap
argument_list|)
expr_stmt|;
if|if
condition|(
name|pixelType
argument_list|()
operator|==
name|BitmapType
condition|)
block|{
name|m_source
operator|.
name|ensureFormat
argument_list|(
name|QImage
operator|::
name|Format_MonoLSB
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|knownGoodFormat
argument_list|(
name|m_source
operator|.
name|format
argument_list|()
argument_list|)
condition|)
block|{
name|m_source
operator|.
name|beginDataAccess
argument_list|()
expr_stmt|;
name|QImage
operator|::
name|Format
name|format
init|=
name|idealFormat
argument_list|(
name|m_source
operator|.
name|imageRef
argument_list|()
argument_list|,
name|Qt
operator|::
name|AutoColor
argument_list|)
decl_stmt|;
name|m_source
operator|.
name|endDataAccess
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|m_source
operator|.
name|ensureFormat
argument_list|(
name|format
argument_list|)
expr_stmt|;
block|}
name|m_hasAlpha
operator|=
name|m_source
operator|.
name|hasAlphaChannel
argument_list|()
expr_stmt|;
name|m_hasFillColor
operator|=
literal|false
expr_stmt|;
name|m_dirty
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|QPlatformPixmap
operator|::
name|VolatileImage
operator|&&
name|pixmap
condition|)
block|{
comment|// Support QS60Style in more efficient skin graphics retrieval.
name|QVolatileImage
modifier|*
name|img
init|=
cast|static_cast
argument_list|<
name|QVolatileImage
operator|*
argument_list|>
argument_list|(
name|pixmap
argument_list|)
decl_stmt|;
if|if
condition|(
name|img
operator|->
name|width
argument_list|()
operator|==
name|w
operator|&&
name|img
operator|->
name|height
argument_list|()
operator|==
name|h
condition|)
name|setSerialNumber
argument_list|(
operator|++
name|qt_gl_pixmap_serial
argument_list|)
expr_stmt|;
name|resize
argument_list|(
name|img
operator|->
name|width
argument_list|()
argument_list|,
name|img
operator|->
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|m_source
operator|=
operator|*
name|img
expr_stmt|;
name|m_hasAlpha
operator|=
name|m_source
operator|.
name|hasAlphaChannel
argument_list|()
expr_stmt|;
name|m_hasFillColor
operator|=
literal|false
expr_stmt|;
name|m_dirty
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|QPlatformPixmap
operator|::
name|NativeImageHandleProvider
operator|&&
name|pixmap
condition|)
block|{
name|destroyTexture
argument_list|()
expr_stmt|;
name|nativeImageHandleProvider
operator|=
cast|static_cast
argument_list|<
name|QNativeImageHandleProvider
operator|*
argument_list|>
argument_list|(
name|pixmap
argument_list|)
expr_stmt|;
comment|// Cannot defer the retrieval, we need at least the size right away.
name|createFromNativeImageHandleProvider
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|toNativeType
name|void
modifier|*
name|QGLPlatformPixmap
operator|::
name|toNativeType
parameter_list|(
name|NativeType
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
name|QPlatformPixmap
operator|::
name|FbsBitmap
condition|)
block|{
if|if
condition|(
name|m_source
operator|.
name|isNull
argument_list|()
condition|)
name|m_source
operator|=
name|QVolatileImage
argument_list|(
name|w
argument_list|,
name|h
argument_list|,
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
expr_stmt|;
return|return
name|m_source
operator|.
name|duplicateNativeImage
argument_list|()
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|initFromNativeImageHandle
name|bool
name|QGLPlatformPixmap
operator|::
name|initFromNativeImageHandle
parameter_list|(
name|void
modifier|*
name|handle
parameter_list|,
specifier|const
name|QString
modifier|&
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
name|QLatin1String
argument_list|(
literal|"RSgImage"
argument_list|)
condition|)
block|{
name|fromNativeType
argument_list|(
name|handle
argument_list|,
name|QPlatformPixmap
operator|::
name|SgImage
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|QLatin1String
argument_list|(
literal|"CFbsBitmap"
argument_list|)
condition|)
block|{
name|fromNativeType
argument_list|(
name|handle
argument_list|,
name|QPlatformPixmap
operator|::
name|FbsBitmap
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|createFromNativeImageHandleProvider
name|void
name|QGLPlatformPixmap
operator|::
name|createFromNativeImageHandleProvider
parameter_list|()
block|{
name|void
modifier|*
name|handle
init|=
literal|0
decl_stmt|;
name|QString
name|type
decl_stmt|;
name|nativeImageHandleProvider
operator|->
name|get
argument_list|(
operator|&
name|handle
argument_list|,
operator|&
name|type
argument_list|)
expr_stmt|;
if|if
condition|(
name|handle
condition|)
block|{
if|if
condition|(
name|initFromNativeImageHandle
argument_list|(
name|handle
argument_list|,
name|type
argument_list|)
condition|)
block|{
name|nativeImageHandle
operator|=
name|handle
expr_stmt|;
name|nativeImageType
operator|=
name|type
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|(
literal|"QGLPlatformPixmap: Unknown native image type '%s'"
argument_list|,
name|qPrintable
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|qWarning
argument_list|(
literal|"QGLPlatformPixmap: Native handle is null"
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|releaseNativeImageHandle
name|void
name|QGLPlatformPixmap
operator|::
name|releaseNativeImageHandle
parameter_list|()
block|{
if|if
condition|(
name|nativeImageHandleProvider
operator|&&
name|nativeImageHandle
condition|)
block|{
name|nativeImageHandleProvider
operator|->
name|release
argument_list|(
name|nativeImageHandle
argument_list|,
name|nativeImageType
argument_list|)
expr_stmt|;
name|nativeImageHandle
operator|=
literal|0
expr_stmt|;
name|nativeImageType
operator|=
name|QString
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
