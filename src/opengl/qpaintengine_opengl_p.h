begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtOpenGL module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QPAINTENGINE_OPENGL_P_H
end_ifndef
begin_define
DECL|macro|QPAINTENGINE_OPENGL_P_H
define|#
directive|define
name|QPAINTENGINE_OPENGL_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists for the convenience
end_comment
begin_comment
comment|// of the QLibrary class.  This header file may change from
end_comment
begin_comment
comment|// version to version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|<private/qpaintengineex_p.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QOpenGLPaintEnginePrivate
name|class
name|QOpenGLPaintEnginePrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QGLTexture
name|class
name|QGLTexture
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QOpenGLPaintEngineState
range|:
name|public
name|QPainterState
block|{
name|public
operator|:
name|QOpenGLPaintEngineState
argument_list|(
name|QOpenGLPaintEngineState
operator|&
name|other
argument_list|)
block|;
name|QOpenGLPaintEngineState
argument_list|()
block|;
operator|~
name|QOpenGLPaintEngineState
argument_list|()
block|;
name|QRegion
name|clipRegion
block|;
name|bool
name|hasClipping
block|;
name|QRect
name|fastClip
block|;
name|uint
name|depthClipId
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QOpenGLPaintEngine
range|:
name|public
name|QPaintEngineEx
block|{
name|Q_DECLARE_PRIVATE
argument_list|(
argument|QOpenGLPaintEngine
argument_list|)
name|public
operator|:
name|QOpenGLPaintEngine
argument_list|()
block|;
operator|~
name|QOpenGLPaintEngine
argument_list|()
block|;
name|bool
name|begin
argument_list|(
name|QPaintDevice
operator|*
name|pdev
argument_list|)
block|;
name|bool
name|end
argument_list|()
block|;
comment|// new stuff
name|void
name|clipEnabledChanged
argument_list|()
block|;
name|void
name|penChanged
argument_list|()
block|;
name|void
name|brushChanged
argument_list|()
block|;
name|void
name|brushOriginChanged
argument_list|()
block|;
name|void
name|opacityChanged
argument_list|()
block|;
name|void
name|compositionModeChanged
argument_list|()
block|;
name|void
name|renderHintsChanged
argument_list|()
block|;
name|void
name|transformChanged
argument_list|()
block|;
name|void
name|fill
argument_list|(
specifier|const
name|QVectorPath
operator|&
name|path
argument_list|,
specifier|const
name|QBrush
operator|&
name|brush
argument_list|)
block|;
name|void
name|clip
argument_list|(
argument|const QVectorPath&path
argument_list|,
argument|Qt::ClipOperation op
argument_list|)
block|;
name|void
name|setState
argument_list|(
name|QPainterState
operator|*
name|s
argument_list|)
block|;
name|QPainterState
operator|*
name|createState
argument_list|(
argument|QPainterState *orig
argument_list|)
specifier|const
block|;
specifier|inline
name|QOpenGLPaintEngineState
operator|*
name|state
argument_list|()
block|{
return|return
name|static_cast
operator|<
name|QOpenGLPaintEngineState
operator|*
operator|>
operator|(
name|QPaintEngineEx
operator|::
name|state
argument_list|()
operator|)
return|;
block|}
specifier|inline
specifier|const
name|QOpenGLPaintEngineState
operator|*
name|state
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
specifier|const
name|QOpenGLPaintEngineState
operator|*
operator|>
operator|(
name|QPaintEngineEx
operator|::
name|state
argument_list|()
operator|)
return|;
block|}
comment|// old stuff
name|void
name|updateState
argument_list|(
specifier|const
name|QPaintEngineState
operator|&
name|state
argument_list|)
block|;
name|void
name|updatePen
argument_list|(
specifier|const
name|QPen
operator|&
name|pen
argument_list|)
block|;
name|void
name|updateBrush
argument_list|(
specifier|const
name|QBrush
operator|&
name|brush
argument_list|,
specifier|const
name|QPointF
operator|&
name|pt
argument_list|)
block|;
name|void
name|updateFont
argument_list|(
specifier|const
name|QFont
operator|&
name|font
argument_list|)
block|;
name|void
name|updateMatrix
argument_list|(
specifier|const
name|QTransform
operator|&
name|matrix
argument_list|)
block|;
name|void
name|updateClipRegion
argument_list|(
argument|const QRegion&region
argument_list|,
argument|Qt::ClipOperation op
argument_list|)
block|;
name|void
name|updateRenderHints
argument_list|(
argument|QPainter::RenderHints hints
argument_list|)
block|;
name|void
name|updateCompositionMode
argument_list|(
argument|QPainter::CompositionMode composition_mode
argument_list|)
block|;
name|void
name|drawRects
argument_list|(
argument|const QRectF *r
argument_list|,
argument|int rectCount
argument_list|)
block|;
name|void
name|drawLines
argument_list|(
argument|const QLineF *lines
argument_list|,
argument|int lineCount
argument_list|)
block|;
name|void
name|drawPoints
argument_list|(
argument|const QPointF *p
argument_list|,
argument|int pointCount
argument_list|)
block|;
name|void
name|drawRects
argument_list|(
argument|const QRect *r
argument_list|,
argument|int rectCount
argument_list|)
block|;
name|void
name|drawLines
argument_list|(
argument|const QLine *lines
argument_list|,
argument|int lineCount
argument_list|)
block|;
name|void
name|drawPoints
argument_list|(
argument|const QPoint *p
argument_list|,
argument|int pointCount
argument_list|)
block|;
name|void
name|drawPixmap
argument_list|(
specifier|const
name|QRectF
operator|&
name|r
argument_list|,
specifier|const
name|QPixmap
operator|&
name|pm
argument_list|,
specifier|const
name|QRectF
operator|&
name|sr
argument_list|)
block|;
name|void
name|drawPath
argument_list|(
specifier|const
name|QPainterPath
operator|&
name|path
argument_list|)
block|;
name|void
name|drawPolygon
argument_list|(
argument|const QPointF *points
argument_list|,
argument|int pointCount
argument_list|,
argument|PolygonDrawMode mode
argument_list|)
block|;
name|void
name|drawPolygon
argument_list|(
argument|const QPoint *points
argument_list|,
argument|int pointCount
argument_list|,
argument|PolygonDrawMode mode
argument_list|)
block|;
name|void
name|drawTiledPixmap
argument_list|(
specifier|const
name|QRectF
operator|&
name|r
argument_list|,
specifier|const
name|QPixmap
operator|&
name|pixmap
argument_list|,
specifier|const
name|QPointF
operator|&
name|s
argument_list|)
block|;
name|void
name|drawImage
argument_list|(
argument|const QRectF&r
argument_list|,
argument|const QImage&image
argument_list|,
argument|const QRectF&sr
argument_list|,
argument|Qt::ImageConversionFlags conversionFlags
argument_list|)
block|;
name|void
name|drawTextItem
argument_list|(
specifier|const
name|QPointF
operator|&
name|p
argument_list|,
specifier|const
name|QTextItem
operator|&
name|ti
argument_list|)
block|;
name|void
name|drawStaticTextItem
argument_list|(
name|QStaticTextItem
operator|*
name|staticTextItem
argument_list|)
block|;
name|void
name|drawEllipse
argument_list|(
specifier|const
name|QRectF
operator|&
name|rect
argument_list|)
block|;
ifdef|#
directive|ifdef
name|Q_WS_WIN
name|HDC
name|handle
argument_list|()
specifier|const
block|;
else|#
directive|else
name|Qt
operator|::
name|HANDLE
name|handle
argument_list|()
specifier|const
block|;
endif|#
directive|endif
specifier|inline
name|Type
name|type
argument_list|()
specifier|const
block|{
return|return
name|QPaintEngine
operator|::
name|OpenGL
return|;
block|}
name|private
operator|:
name|void
name|drawPolyInternal
argument_list|(
argument|const QPolygonF&pa
argument_list|,
argument|bool close = true
argument_list|)
block|;
name|void
name|drawTextureRect
argument_list|(
argument|int tx_width
argument_list|,
argument|int tx_height
argument_list|,
argument|const QRectF&r
argument_list|,
argument|const QRectF&sr
argument_list|,
argument|GLenum target
argument_list|,
argument|QGLTexture *tex
argument_list|)
block|;
name|Q_DISABLE_COPY
argument_list|(
argument|QOpenGLPaintEngine
argument_list|)
block|}
decl_stmt|;
end_decl_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QPAINTENGINE_OPENGL_P_H
end_comment
end_unit
