begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtOpenGL module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QFile>
end_include
begin_include
include|#
directive|include
file|<QList>
end_include
begin_include
include|#
directive|include
file|<QMap>
end_include
begin_include
include|#
directive|include
file|<QPair>
end_include
begin_include
include|#
directive|include
file|<QSet>
end_include
begin_include
include|#
directive|include
file|<QString>
end_include
begin_include
include|#
directive|include
file|<QTextStream>
end_include
begin_include
include|#
directive|include
file|<QtDebug>
end_include
begin_include
include|#
directive|include
file|<cstdlib>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
name|QT_USE_NAMESPACE
DECL|macro|TAB
define|#
directive|define
name|TAB
value|"    "
decl|typedef
DECL|typedef|QStringPair
name|QPair
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
name|QStringPair
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|readSourceFile
name|QString
name|readSourceFile
parameter_list|(
specifier|const
name|QString
modifier|&
name|sourceFile
parameter_list|,
name|bool
name|fragmentProgram
init|=
literal|false
parameter_list|)
block|{
name|QFile
name|file
argument_list|(
name|sourceFile
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
operator||
name|QIODevice
operator|::
name|Text
argument_list|)
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"Missing source file"
operator|<<
name|sourceFile
expr_stmt|;
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|QString
name|source
decl_stmt|;
name|QTextStream
name|in
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|in
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|QString
name|line
init|=
name|in
operator|.
name|readLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|fragmentProgram
operator|&&
name|line
index|[
literal|0
index|]
operator|==
literal|'#'
operator|&&
operator|!
name|line
operator|.
name|startsWith
argument_list|(
literal|"#var"
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|fragmentProgram
condition|)
name|source
operator|.
name|append
argument_list|(
literal|"    \""
argument_list|)
expr_stmt|;
name|source
operator|.
name|append
argument_list|(
name|line
argument_list|)
expr_stmt|;
if|if
condition|(
name|fragmentProgram
condition|)
name|source
operator|.
name|append
argument_list|(
literal|"\\n\""
argument_list|)
expr_stmt|;
name|source
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fragmentProgram
condition|)
name|source
operator|.
name|append
argument_list|(
literal|"    ;\n"
argument_list|)
expr_stmt|;
return|return
name|source
return|;
block|}
end_function
begin_function
DECL|function|readConf
name|QList
argument_list|<
name|QStringPair
argument_list|>
name|readConf
parameter_list|(
specifier|const
name|QString
modifier|&
name|confFile
parameter_list|)
block|{
name|QFile
name|file
argument_list|(
name|confFile
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
operator||
name|QIODevice
operator|::
name|Text
argument_list|)
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"Missing file"
operator|<<
name|confFile
expr_stmt|;
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|QList
argument_list|<
name|QStringPair
argument_list|>
name|result
decl_stmt|;
name|QTextStream
name|in
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|in
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|QString
name|line
init|=
name|in
operator|.
name|readLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
literal|'#'
argument_list|)
condition|)
continue|continue;
name|QTextStream
name|lineStream
argument_list|(
operator|&
name|line
argument_list|)
decl_stmt|;
name|QString
name|enumerator
decl_stmt|;
name|QString
name|sourceFile
decl_stmt|;
name|lineStream
operator|>>
name|enumerator
expr_stmt|;
if|if
condition|(
name|lineStream
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"Error in file"
operator|<<
name|confFile
operator|<<
literal|'('
operator|<<
name|enumerator
operator|<<
literal|')'
expr_stmt|;
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|lineStream
operator|>>
name|sourceFile
expr_stmt|;
name|result
operator|<<
name|QStringPair
argument_list|(
name|enumerator
argument_list|,
name|readSourceFile
argument_list|(
name|sourceFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|compileSource
name|QString
name|compileSource
parameter_list|(
specifier|const
name|QString
modifier|&
name|source
parameter_list|)
block|{
block|{
name|QFile
name|tempSourceFile
argument_list|(
literal|"__tmp__.glsl"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|tempSourceFile
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
operator||
name|QIODevice
operator|::
name|Text
argument_list|)
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"Failed opening __tmp__.glsl"
expr_stmt|;
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|QTextStream
name|out
argument_list|(
operator|&
name|tempSourceFile
argument_list|)
decl_stmt|;
name|out
operator|<<
name|source
expr_stmt|;
block|}
if|if
condition|(
name|std
operator|::
name|system
argument_list|(
literal|"cgc -quiet -oglsl -profile arbfp1 __tmp__.glsl>__tmp__.frag"
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"Failed running cgc"
expr_stmt|;
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
name|readSourceFile
argument_list|(
literal|"__tmp__.frag"
argument_list|,
literal|true
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|getWord
name|QString
name|getWord
parameter_list|(
name|QString
name|line
parameter_list|,
name|int
name|word
parameter_list|)
block|{
name|QTextStream
name|in
argument_list|(
operator|&
name|line
argument_list|)
decl_stmt|;
name|QString
name|result
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|word
condition|;
operator|++
name|i
control|)
name|in
operator|>>
name|result
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|toInt
specifier|static
name|int
name|toInt
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|str
parameter_list|)
block|{
name|int
name|value
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|str
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|str
index|[
name|i
index|]
operator|<
literal|'0'
operator|||
name|str
index|[
name|i
index|]
operator|>
literal|'9'
condition|)
break|break;
name|value
operator|*=
literal|10
expr_stmt|;
name|value
operator|+=
operator|(
name|str
index|[
name|i
index|]
operator|-
literal|'0'
operator|)
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
end_function
begin_function
DECL|function|getLocations
name|QList
argument_list|<
name|int
argument_list|>
name|getLocations
parameter_list|(
specifier|const
name|QSet
argument_list|<
name|QString
argument_list|>
modifier|&
name|variables
parameter_list|,
name|QString
name|source
parameter_list|)
block|{
name|QTextStream
name|in
argument_list|(
operator|&
name|source
argument_list|)
decl_stmt|;
name|QMap
argument_list|<
name|QString
argument_list|,
name|int
argument_list|>
name|locations
decl_stmt|;
foreach|foreach
control|(
name|QString
name|variable
decl|,
name|variables
control|)
name|locations
index|[
name|variable
index|]
operator|=
operator|-
literal|1
expr_stmt|;
while|while
condition|(
operator|!
name|in
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|QString
name|line
init|=
name|in
operator|.
name|readLine
argument_list|()
operator|.
name|trimmed
argument_list|()
decl_stmt|;
name|line
operator|=
name|line
operator|.
name|right
argument_list|(
name|line
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
literal|"#var"
argument_list|)
condition|)
block|{
name|QByteArray
name|temp
decl_stmt|;
name|QByteArray
name|name
decl_stmt|;
name|QTextStream
name|lineStream
argument_list|(
operator|&
name|line
argument_list|)
decl_stmt|;
name|lineStream
operator|>>
name|temp
operator|>>
name|temp
operator|>>
name|name
expr_stmt|;
name|int
name|location
init|=
operator|-
literal|1
decl_stmt|;
while|while
condition|(
operator|!
name|lineStream
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|lineStream
operator|>>
name|temp
expr_stmt|;
if|if
condition|(
name|temp
operator|.
name|startsWith
argument_list|(
literal|"c["
argument_list|)
condition|)
block|{
name|location
operator|=
name|toInt
argument_list|(
name|temp
operator|.
name|right
argument_list|(
name|temp
operator|.
name|size
argument_list|()
operator|-
literal|2
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|temp
operator|==
literal|"texunit"
condition|)
block|{
name|lineStream
operator|>>
name|temp
expr_stmt|;
name|location
operator|=
name|toInt
argument_list|(
name|temp
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|locations
index|[
name|name
index|]
operator|=
name|location
expr_stmt|;
block|}
block|}
name|QList
argument_list|<
name|int
argument_list|>
name|result
decl_stmt|;
foreach|foreach
control|(
name|QString
name|variable
decl|,
name|variables
control|)
name|result
operator|<<
name|locations
index|[
name|variable
index|]
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_comment
comment|// remove #var statements
end_comment
begin_function
DECL|function|trimmed
name|QString
name|trimmed
parameter_list|(
name|QString
name|source
parameter_list|)
block|{
name|QTextStream
name|in
argument_list|(
operator|&
name|source
argument_list|)
decl_stmt|;
name|QString
name|result
decl_stmt|;
while|while
condition|(
operator|!
name|in
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|QString
name|line
init|=
name|in
operator|.
name|readLine
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|line
operator|.
name|trimmed
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"\"#"
argument_list|)
condition|)
name|result
operator|+=
name|line
operator|+
literal|'\n'
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|writeVariablesEnum
name|void
name|writeVariablesEnum
parameter_list|(
name|QTextStream
modifier|&
name|out
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|QSet
argument_list|<
name|QString
argument_list|>
modifier|&
name|s
parameter_list|)
block|{
name|out
operator|<<
literal|"enum "
operator|<<
name|name
operator|<<
literal|" {"
expr_stmt|;
name|QSet
argument_list|<
name|QString
argument_list|>
operator|::
name|const_iterator
name|it
init|=
name|s
operator|.
name|begin
argument_list|()
decl_stmt|;
if|if
condition|(
name|it
operator|!=
name|s
operator|.
name|end
argument_list|()
condition|)
block|{
name|out
operator|<<
literal|"\n"
name|TAB
literal|"VAR_"
operator|<<
name|it
operator|->
name|toUpper
argument_list|()
expr_stmt|;
for|for
control|(
operator|++
name|it
init|;
name|it
operator|!=
name|s
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
name|out
operator|<<
literal|",\n"
name|TAB
literal|"VAR_"
operator|<<
name|it
operator|->
name|toUpper
argument_list|()
expr_stmt|;
block|}
name|out
operator|<<
literal|"\n};\n\n"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeTypesEnum
name|void
name|writeTypesEnum
parameter_list|(
name|QTextStream
modifier|&
name|out
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|QList
argument_list|<
name|QStringPair
argument_list|>
modifier|&
name|s
parameter_list|)
block|{
name|out
operator|<<
literal|"enum "
operator|<<
name|name
operator|<<
literal|" {"
expr_stmt|;
name|QList
argument_list|<
name|QStringPair
argument_list|>
operator|::
name|const_iterator
name|it
init|=
name|s
operator|.
name|begin
argument_list|()
decl_stmt|;
if|if
condition|(
name|it
operator|!=
name|s
operator|.
name|end
argument_list|()
condition|)
block|{
name|out
operator|<<
literal|"\n"
name|TAB
operator|<<
name|it
operator|->
name|first
expr_stmt|;
for|for
control|(
operator|++
name|it
init|;
name|it
operator|!=
name|s
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
name|out
operator|<<
literal|",\n"
name|TAB
operator|<<
name|it
operator|->
name|first
expr_stmt|;
block|}
name|out
operator|<<
literal|"\n};\n\n"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeIncludeFile
name|void
name|writeIncludeFile
parameter_list|(
specifier|const
name|QSet
argument_list|<
name|QString
argument_list|>
modifier|&
name|variables
parameter_list|,
specifier|const
name|QList
argument_list|<
name|QStringPair
argument_list|>
modifier|&
name|brushes
parameter_list|,
specifier|const
name|QList
argument_list|<
name|QStringPair
argument_list|>
modifier|&
name|compositionModes
parameter_list|,
specifier|const
name|QList
argument_list|<
name|QStringPair
argument_list|>
modifier|&
name|masks
parameter_list|,
specifier|const
name|QMap
argument_list|<
name|QString
argument_list|,
name|QMap
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
argument_list|>
modifier|&
name|compiled
parameter_list|)
block|{
name|QFile
name|includeFile
argument_list|(
literal|"fragmentprograms_p.h"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|includeFile
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
operator||
name|QIODevice
operator|::
name|Text
argument_list|)
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"Failed opening fragmentprograms_p.h"
expr_stmt|;
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|QTextStream
name|out
argument_list|(
operator|&
name|includeFile
argument_list|)
decl_stmt|;
name|QLatin1String
name|tab
argument_list|(
name|TAB
argument_list|)
decl_stmt|;
name|out
operator|<<
literal|"/****************************************************************************\n"
literal|"**\n"
literal|"** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies).\n"
literal|"** All rights reserved.\n"
literal|"** Contact: Nokia Corporation (qt-info@nokia.com)\n"
literal|"**\n"
literal|"** This file is part of the QtOpenGL module of the Qt Toolkit.\n"
literal|"**\n"
literal|"** $QT_BEGIN_LICENSE:LGPL$\n"
literal|"** GNU Lesser General Public License Usage\n"
literal|"** This file may be used under the terms of the GNU Lesser General Public\n"
literal|"** License version 2.1 as published by the Free Software Foundation and\n"
literal|"** appearing in the file LICENSE.LGPL included in the packaging of this\n"
literal|"** file. Please review the following information to ensure the GNU Lesser\n"
literal|"** General Public License version 2.1 requirements will be met:\n"
literal|"** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.\n"
literal|"**\n"
literal|"** In addition, as a special exception, Nokia gives you certain additional\n"
literal|"** rights. These rights are described in the Nokia Qt LGPL Exception\n"
literal|"** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.\n"
literal|"**\n"
literal|"** GNU General Public License Usage\n"
literal|"** Alternatively, this file may be used under the terms of the GNU General\n"
literal|"** Public License version 3.0 as published by the Free Software Foundation\n"
literal|"** and appearing in the file LICENSE.GPL included in the packaging of this\n"
literal|"** file. Please review the following information to ensure the GNU General\n"
literal|"** Public License version 3.0 requirements will be met:\n"
literal|"** http://www.gnu.org/copyleft/gpl.html.\n"
literal|"**\n"
literal|"** Other Usage\n"
literal|"** Alternatively, this file may be used in accordance with the terms and\n"
literal|"** conditions contained in a signed written agreement between you and Nokia.\n"
literal|"**\n"
literal|"**\n"
literal|"**\n"
literal|"**\n"
literal|"**\n"
literal|"** $QT_END_LICENSE$\n"
literal|"**\n"
literal|"****************************************************************************/\n"
literal|"\n"
literal|"#ifndef FRAGMENTPROGRAMS_P_H\n"
literal|"#define FRAGMENTPROGRAMS_P_H\n"
literal|"\n"
literal|"//\n"
literal|"//  W A R N I N G\n"
literal|"//  -------------\n"
literal|"//\n"
literal|"// This file is not part of the Qt API.  It exists purely as an\n"
literal|"// implementation detail.  This header file may change from version to\n"
literal|"// version without notice, or even be removed.\n"
literal|"//\n"
literal|"// We mean it.\n"
literal|"//\n"
literal|"\n"
expr_stmt|;
name|writeVariablesEnum
argument_list|(
name|out
argument_list|,
literal|"FragmentVariable"
argument_list|,
name|variables
argument_list|)
expr_stmt|;
name|writeTypesEnum
argument_list|(
name|out
argument_list|,
literal|"FragmentBrushType"
argument_list|,
name|brushes
argument_list|)
expr_stmt|;
name|writeTypesEnum
argument_list|(
name|out
argument_list|,
literal|"FragmentCompositionModeType"
argument_list|,
name|compositionModes
argument_list|)
expr_stmt|;
name|writeTypesEnum
argument_list|(
name|out
argument_list|,
literal|"FragmentMaskType"
argument_list|,
name|masks
argument_list|)
expr_stmt|;
name|out
operator|<<
literal|"static const unsigned int num_fragment_variables = "
operator|<<
name|variables
operator|.
name|size
argument_list|()
operator|<<
literal|";\n\n"
expr_stmt|;
name|out
operator|<<
literal|"static const unsigned int num_fragment_brushes = "
operator|<<
name|brushes
operator|.
name|size
argument_list|()
operator|<<
literal|";\n"
expr_stmt|;
name|out
operator|<<
literal|"static const unsigned int num_fragment_composition_modes = "
operator|<<
name|compositionModes
operator|.
name|size
argument_list|()
operator|<<
literal|";\n"
expr_stmt|;
name|out
operator|<<
literal|"static const unsigned int num_fragment_masks = "
operator|<<
name|masks
operator|.
name|size
argument_list|()
operator|<<
literal|";\n\n"
expr_stmt|;
foreach|foreach
control|(
name|QStringPair
name|mask
decl|,
name|masks
control|)
block|{
specifier|const
name|QString
name|compiledSource
init|=
name|compiled
index|[
name|mask
operator|.
name|first
index|]
index|[
literal|"MASK__"
index|]
decl_stmt|;
name|out
operator|<<
literal|"static const char *FragmentProgram_"
operator|<<
name|mask
operator|.
name|first
operator|<<
literal|" =\n"
operator|<<
name|trimmed
argument_list|(
name|compiledSource
argument_list|)
operator|<<
literal|'\n'
expr_stmt|;
block|}
foreach|foreach
control|(
name|QStringPair
name|brush
decl|,
name|brushes
control|)
block|{
foreach|foreach
control|(
name|QStringPair
name|mode
decl|,
name|compositionModes
control|)
block|{
specifier|const
name|QString
name|compiledSource
init|=
name|compiled
index|[
name|brush
operator|.
name|first
index|]
index|[
name|mode
operator|.
name|first
index|]
decl_stmt|;
name|out
operator|<<
literal|"static const char *FragmentProgram_"
operator|<<
name|brush
operator|.
name|first
operator|<<
literal|'_'
operator|<<
name|mode
operator|.
name|first
operator|<<
literal|" =\n"
operator|<<
name|trimmed
argument_list|(
name|compiledSource
argument_list|)
operator|<<
literal|'\n'
expr_stmt|;
block|}
block|}
name|out
operator|<<
literal|"static const char *mask_fragment_program_sources[num_fragment_masks] = {\n"
expr_stmt|;
foreach|foreach
control|(
name|QStringPair
name|mask
decl|,
name|masks
control|)
name|out
operator|<<
name|tab
operator|<<
literal|"FragmentProgram_"
operator|<<
name|mask
operator|.
name|first
operator|<<
literal|",\n"
expr_stmt|;
name|out
operator|<<
literal|"};\n\n"
expr_stmt|;
name|out
operator|<<
literal|"static const char *painter_fragment_program_sources[num_fragment_brushes][num_fragment_composition_modes] = {\n"
expr_stmt|;
foreach|foreach
control|(
name|QStringPair
name|brush
decl|,
name|brushes
control|)
block|{
name|out
operator|<<
name|tab
operator|<<
literal|"{\n"
expr_stmt|;
foreach|foreach
control|(
name|QStringPair
name|mode
decl|,
name|compositionModes
control|)
name|out
operator|<<
name|tab
operator|<<
name|tab
operator|<<
literal|"FragmentProgram_"
operator|<<
name|brush
operator|.
name|first
operator|<<
literal|'_'
operator|<<
name|mode
operator|.
name|first
operator|<<
literal|",\n"
expr_stmt|;
name|out
operator|<<
name|tab
operator|<<
literal|"},\n"
expr_stmt|;
block|}
name|out
operator|<<
literal|"};\n\n"
expr_stmt|;
name|out
operator|<<
literal|"static int painter_variable_locations[num_fragment_brushes][num_fragment_composition_modes][num_fragment_variables] = {\n"
expr_stmt|;
foreach|foreach
control|(
name|QStringPair
name|brush
decl|,
name|brushes
control|)
block|{
name|out
operator|<<
name|tab
operator|<<
literal|"{\n"
expr_stmt|;
foreach|foreach
control|(
name|QStringPair
name|mode
decl|,
name|compositionModes
control|)
block|{
name|out
operator|<<
name|tab
operator|<<
name|tab
operator|<<
literal|"{ "
expr_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|locations
init|=
name|getLocations
argument_list|(
name|variables
argument_list|,
name|compiled
index|[
name|brush
operator|.
name|first
index|]
index|[
name|mode
operator|.
name|first
index|]
argument_list|)
decl_stmt|;
foreach|foreach
control|(
name|int
name|location
decl|,
name|locations
control|)
name|out
operator|<<
name|location
operator|<<
literal|", "
expr_stmt|;
name|out
operator|<<
literal|"},\n"
expr_stmt|;
block|}
name|out
operator|<<
name|tab
operator|<<
literal|"},\n"
expr_stmt|;
block|}
name|out
operator|<<
literal|"};\n\n"
expr_stmt|;
name|out
operator|<<
literal|"static int mask_variable_locations[num_fragment_masks][num_fragment_variables] = {\n"
expr_stmt|;
foreach|foreach
control|(
name|QStringPair
name|mask
decl|,
name|masks
control|)
block|{
name|out
operator|<<
name|tab
operator|<<
literal|"{ "
expr_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|locations
init|=
name|getLocations
argument_list|(
name|variables
argument_list|,
name|compiled
index|[
name|mask
operator|.
name|first
index|]
index|[
literal|"MASK__"
index|]
argument_list|)
decl_stmt|;
foreach|foreach
control|(
name|int
name|location
decl|,
name|locations
control|)
name|out
operator|<<
name|location
operator|<<
literal|", "
expr_stmt|;
name|out
operator|<<
literal|"},\n"
expr_stmt|;
block|}
name|out
operator|<<
literal|"};\n\n"
expr_stmt|;
name|out
operator|<<
literal|"#endif\n"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|getVariables
name|QList
argument_list|<
name|QString
argument_list|>
name|getVariables
parameter_list|(
name|QString
name|program
parameter_list|)
block|{
name|QList
argument_list|<
name|QString
argument_list|>
name|result
decl_stmt|;
name|QTextStream
name|in
argument_list|(
operator|&
name|program
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|in
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|QString
name|line
init|=
name|in
operator|.
name|readLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
literal|"uniform"
argument_list|)
condition|)
block|{
name|QString
name|word
init|=
name|getWord
argument_list|(
name|line
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|result
operator|<<
name|word
operator|.
name|left
argument_list|(
name|word
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
literal|"#include"
argument_list|)
condition|)
block|{
name|QString
name|file
init|=
name|getWord
argument_list|(
name|line
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|result
operator|<<
name|getVariables
argument_list|(
name|readSourceFile
argument_list|(
name|file
operator|.
name|mid
argument_list|(
literal|1
argument_list|,
name|file
operator|.
name|size
argument_list|()
operator|-
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|main
name|int
name|main
parameter_list|()
block|{
name|QList
argument_list|<
name|QStringPair
argument_list|>
name|brushes
init|=
name|readConf
argument_list|(
name|QLatin1String
argument_list|(
literal|"brushes.conf"
argument_list|)
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|QStringPair
argument_list|>
name|compositionModes
init|=
name|readConf
argument_list|(
name|QLatin1String
argument_list|(
literal|"composition_modes.conf"
argument_list|)
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|QStringPair
argument_list|>
name|masks
init|=
name|readConf
argument_list|(
name|QLatin1String
argument_list|(
literal|"masks.conf"
argument_list|)
argument_list|)
decl_stmt|;
name|QString
name|painterSource
init|=
name|readSourceFile
argument_list|(
literal|"painter.glsl"
argument_list|)
decl_stmt|;
name|QString
name|painterNoMaskSource
init|=
name|readSourceFile
argument_list|(
literal|"painter_nomask.glsl"
argument_list|)
decl_stmt|;
name|QString
name|fastPainterSource
init|=
name|readSourceFile
argument_list|(
literal|"fast_painter.glsl"
argument_list|)
decl_stmt|;
name|QString
name|brushPainterSource
init|=
name|readSourceFile
argument_list|(
literal|"brush_painter.glsl"
argument_list|)
decl_stmt|;
name|QSet
argument_list|<
name|QString
argument_list|>
name|variables
decl_stmt|;
name|QList
argument_list|<
name|QStringPair
argument_list|>
name|programs
index|[
literal|3
index|]
init|=
block|{
name|brushes
block|,
name|compositionModes
block|,
name|masks
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
operator|++
name|i
control|)
foreach|foreach
control|(
name|QStringPair
name|value
decl|,
name|programs
index|[
name|i
index|]
control|)
name|variables
operator|+=
name|QSet
argument_list|<
name|QString
argument_list|>
operator|::
name|fromList
argument_list|(
name|getVariables
argument_list|(
name|value
operator|.
name|second
argument_list|)
argument_list|)
expr_stmt|;
name|variables
operator|+=
name|QSet
argument_list|<
name|QString
argument_list|>
operator|::
name|fromList
argument_list|(
name|getVariables
argument_list|(
name|painterSource
argument_list|)
argument_list|)
expr_stmt|;
name|variables
operator|+=
name|QSet
argument_list|<
name|QString
argument_list|>
operator|::
name|fromList
argument_list|(
name|getVariables
argument_list|(
name|fastPainterSource
argument_list|)
argument_list|)
expr_stmt|;
name|QMap
argument_list|<
name|QString
argument_list|,
name|QMap
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
argument_list|>
name|compiled
decl_stmt|;
foreach|foreach
control|(
name|QStringPair
name|brush
decl|,
name|brushes
control|)
block|{
foreach|foreach
control|(
name|QStringPair
name|mode
decl|,
name|compositionModes
control|)
block|{
name|QString
name|combinedSource
init|=
name|brush
operator|.
name|second
operator|+
name|mode
operator|.
name|second
operator|+
name|painterSource
decl_stmt|;
name|compiled
index|[
name|brush
operator|.
name|first
index|]
index|[
name|mode
operator|.
name|first
index|]
operator|=
name|compileSource
argument_list|(
name|combinedSource
argument_list|)
expr_stmt|;
name|combinedSource
operator|=
name|brush
operator|.
name|second
operator|+
name|mode
operator|.
name|second
operator|+
name|painterNoMaskSource
expr_stmt|;
name|compiled
index|[
name|brush
operator|.
name|first
index|]
index|[
name|mode
operator|.
name|first
operator|+
literal|"_NOMASK"
index|]
operator|=
name|compileSource
argument_list|(
name|combinedSource
argument_list|)
expr_stmt|;
block|}
name|QString
name|fastSource
init|=
name|brush
operator|.
name|second
operator|+
name|fastPainterSource
decl_stmt|;
name|QString
name|brushSource
init|=
name|brush
operator|.
name|second
operator|+
name|brushPainterSource
decl_stmt|;
name|compiled
index|[
name|brush
operator|.
name|first
index|]
index|[
literal|"COMPOSITION_MODE_BLEND_MODE_MASK"
index|]
operator|=
name|compileSource
argument_list|(
name|fastSource
argument_list|)
expr_stmt|;
name|compiled
index|[
name|brush
operator|.
name|first
index|]
index|[
literal|"COMPOSITION_MODE_BLEND_MODE_NOMASK"
index|]
operator|=
name|compileSource
argument_list|(
name|brushSource
argument_list|)
expr_stmt|;
block|}
name|QList
argument_list|<
name|QStringPair
argument_list|>
name|temp
decl_stmt|;
foreach|foreach
control|(
name|QStringPair
name|mode
decl|,
name|compositionModes
control|)
name|temp
operator|<<
name|QStringPair
argument_list|(
name|mode
operator|.
name|first
operator|+
literal|"_NOMASK"
argument_list|,
name|mode
operator|.
name|second
argument_list|)
expr_stmt|;
name|compositionModes
operator|+=
name|temp
expr_stmt|;
name|compositionModes
operator|<<
name|QStringPair
argument_list|(
literal|"COMPOSITION_MODE_BLEND_MODE_MASK"
argument_list|,
literal|""
argument_list|)
operator|<<
name|QStringPair
argument_list|(
literal|"COMPOSITION_MODE_BLEND_MODE_NOMASK"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|QStringPair
name|mask
decl|,
name|masks
control|)
name|compiled
index|[
name|mask
operator|.
name|first
index|]
index|[
literal|"MASK__"
index|]
operator|=
name|compileSource
argument_list|(
name|mask
operator|.
name|second
argument_list|)
expr_stmt|;
name|writeIncludeFile
argument_list|(
name|variables
argument_list|,
name|brushes
argument_list|,
name|compositionModes
argument_list|,
name|masks
argument_list|,
name|compiled
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
