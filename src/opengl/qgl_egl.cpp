begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtOpenGL module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtCore/qdebug.h>
end_include
begin_include
include|#
directive|include
file|<QtOpenGL/qgl.h>
end_include
begin_include
include|#
directive|include
file|<QtOpenGL/qglpixelbuffer.h>
end_include
begin_include
include|#
directive|include
file|"qgl_p.h"
end_include
begin_include
include|#
directive|include
file|"qgl_egl_p.h"
end_include
begin_include
include|#
directive|include
file|"qglpixelbuffer_p.h"
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_X11
end_ifdef
begin_include
include|#
directive|include
file|<QtGui/private/qpixmap_x11_p.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|member|extraWindowSurfaceCreationProps
name|QEglProperties
modifier|*
name|QGLContextPrivate
operator|::
name|extraWindowSurfaceCreationProps
init|=
name|NULL
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|qt_eglproperties_set_glformat
name|void
name|qt_eglproperties_set_glformat
parameter_list|(
name|QEglProperties
modifier|&
name|eglProperties
parameter_list|,
specifier|const
name|QGLFormat
modifier|&
name|glFormat
parameter_list|)
block|{
name|int
name|redSize
init|=
name|glFormat
operator|.
name|redBufferSize
argument_list|()
decl_stmt|;
name|int
name|greenSize
init|=
name|glFormat
operator|.
name|greenBufferSize
argument_list|()
decl_stmt|;
name|int
name|blueSize
init|=
name|glFormat
operator|.
name|blueBufferSize
argument_list|()
decl_stmt|;
name|int
name|alphaSize
init|=
name|glFormat
operator|.
name|alphaBufferSize
argument_list|()
decl_stmt|;
name|int
name|depthSize
init|=
name|glFormat
operator|.
name|depthBufferSize
argument_list|()
decl_stmt|;
name|int
name|stencilSize
init|=
name|glFormat
operator|.
name|stencilBufferSize
argument_list|()
decl_stmt|;
name|int
name|sampleCount
init|=
name|glFormat
operator|.
name|samples
argument_list|()
decl_stmt|;
comment|// QGLFormat uses a magic value of -1 to indicate "don't care", even when a buffer of that
comment|// type has been requested. So we must check QGLFormat's booleans too if size is -1:
if|if
condition|(
name|glFormat
operator|.
name|alpha
argument_list|()
operator|&&
name|alphaSize
operator|<=
literal|0
condition|)
name|alphaSize
operator|=
literal|1
expr_stmt|;
if|if
condition|(
name|glFormat
operator|.
name|depth
argument_list|()
operator|&&
name|depthSize
operator|<=
literal|0
condition|)
name|depthSize
operator|=
literal|1
expr_stmt|;
if|if
condition|(
name|glFormat
operator|.
name|stencil
argument_list|()
operator|&&
name|stencilSize
operator|<=
literal|0
condition|)
name|stencilSize
operator|=
literal|1
expr_stmt|;
if|if
condition|(
name|glFormat
operator|.
name|sampleBuffers
argument_list|()
operator|&&
name|sampleCount
operator|<=
literal|0
condition|)
name|sampleCount
operator|=
literal|1
expr_stmt|;
comment|// We want to make sure 16-bit configs are chosen over 32-bit configs as they will provide
comment|// the best performance. The EGL config selection algorithm is a bit stange in this regard:
comment|// The selection criteria for EGL_BUFFER_SIZE is "AtLeast", so we can't use it to discard
comment|// 32-bit configs completely from the selection. So it then comes to the sorting algorithm.
comment|// The red/green/blue sizes have a sort priority of 3, so they are sorted by first. The sort
comment|// order is special and described as "by larger _total_ number of color bits.". So EGL will
comment|// put 32-bit configs in the list before the 16-bit configs. However, the spec also goes on
comment|// to say "If the requested number of bits in attrib_list for a particular component is 0,
comment|// then the number of bits for that component is not considered". This part of the spec also
comment|// seems to imply that setting the red/green/blue bits to zero means none of the components
comment|// are considered and EGL disregards the entire sorting rule. It then looks to the next
comment|// highest priority rule, which is EGL_BUFFER_SIZE. Despite the selection criteria being
comment|// "AtLeast" for EGL_BUFFER_SIZE, it's sort order is "smaller" meaning 16-bit configs are
comment|// put in the list before 32-bit configs. So, to make sure 16-bit is preffered over 32-bit,
comment|// we must set the red/green/blue sizes to zero. This has an unfortunate consequence that
comment|// if the application sets the red/green/blue size to 5/6/5 on the QGLFormat, they will
comment|// probably get a 32-bit config, even when there's an RGB565 config available. Oh well.
comment|// Now normalize the values so -1 becomes 0
name|redSize
operator|=
name|redSize
operator|>
literal|0
condition|?
name|redSize
else|:
literal|0
expr_stmt|;
name|greenSize
operator|=
name|greenSize
operator|>
literal|0
condition|?
name|greenSize
else|:
literal|0
expr_stmt|;
name|blueSize
operator|=
name|blueSize
operator|>
literal|0
condition|?
name|blueSize
else|:
literal|0
expr_stmt|;
name|alphaSize
operator|=
name|alphaSize
operator|>
literal|0
condition|?
name|alphaSize
else|:
literal|0
expr_stmt|;
name|depthSize
operator|=
name|depthSize
operator|>
literal|0
condition|?
name|depthSize
else|:
literal|0
expr_stmt|;
name|stencilSize
operator|=
name|stencilSize
operator|>
literal|0
condition|?
name|stencilSize
else|:
literal|0
expr_stmt|;
name|sampleCount
operator|=
name|sampleCount
operator|>
literal|0
condition|?
name|sampleCount
else|:
literal|0
expr_stmt|;
name|eglProperties
operator|.
name|setValue
argument_list|(
name|EGL_RED_SIZE
argument_list|,
name|redSize
argument_list|)
expr_stmt|;
name|eglProperties
operator|.
name|setValue
argument_list|(
name|EGL_GREEN_SIZE
argument_list|,
name|greenSize
argument_list|)
expr_stmt|;
name|eglProperties
operator|.
name|setValue
argument_list|(
name|EGL_BLUE_SIZE
argument_list|,
name|blueSize
argument_list|)
expr_stmt|;
name|eglProperties
operator|.
name|setValue
argument_list|(
name|EGL_ALPHA_SIZE
argument_list|,
name|alphaSize
argument_list|)
expr_stmt|;
name|eglProperties
operator|.
name|setValue
argument_list|(
name|EGL_DEPTH_SIZE
argument_list|,
name|depthSize
argument_list|)
expr_stmt|;
name|eglProperties
operator|.
name|setValue
argument_list|(
name|EGL_STENCIL_SIZE
argument_list|,
name|stencilSize
argument_list|)
expr_stmt|;
name|eglProperties
operator|.
name|setValue
argument_list|(
name|EGL_SAMPLES
argument_list|,
name|sampleCount
argument_list|)
expr_stmt|;
name|eglProperties
operator|.
name|setValue
argument_list|(
name|EGL_SAMPLE_BUFFERS
argument_list|,
name|sampleCount
condition|?
literal|1
else|:
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Updates "format" with the parameters of the selected configuration.
end_comment
begin_function
DECL|function|qt_glformat_from_eglconfig
name|void
name|qt_glformat_from_eglconfig
parameter_list|(
name|QGLFormat
modifier|&
name|format
parameter_list|,
specifier|const
name|EGLConfig
name|config
parameter_list|)
block|{
name|EGLint
name|redSize
init|=
literal|0
decl_stmt|;
name|EGLint
name|greenSize
init|=
literal|0
decl_stmt|;
name|EGLint
name|blueSize
init|=
literal|0
decl_stmt|;
name|EGLint
name|alphaSize
init|=
literal|0
decl_stmt|;
name|EGLint
name|depthSize
init|=
literal|0
decl_stmt|;
name|EGLint
name|stencilSize
init|=
literal|0
decl_stmt|;
name|EGLint
name|sampleCount
init|=
literal|0
decl_stmt|;
name|EGLint
name|level
init|=
literal|0
decl_stmt|;
name|EGLDisplay
name|display
init|=
name|QEgl
operator|::
name|display
argument_list|()
decl_stmt|;
name|eglGetConfigAttrib
argument_list|(
name|display
argument_list|,
name|config
argument_list|,
name|EGL_RED_SIZE
argument_list|,
operator|&
name|redSize
argument_list|)
expr_stmt|;
name|eglGetConfigAttrib
argument_list|(
name|display
argument_list|,
name|config
argument_list|,
name|EGL_GREEN_SIZE
argument_list|,
operator|&
name|greenSize
argument_list|)
expr_stmt|;
name|eglGetConfigAttrib
argument_list|(
name|display
argument_list|,
name|config
argument_list|,
name|EGL_BLUE_SIZE
argument_list|,
operator|&
name|blueSize
argument_list|)
expr_stmt|;
name|eglGetConfigAttrib
argument_list|(
name|display
argument_list|,
name|config
argument_list|,
name|EGL_ALPHA_SIZE
argument_list|,
operator|&
name|alphaSize
argument_list|)
expr_stmt|;
name|eglGetConfigAttrib
argument_list|(
name|display
argument_list|,
name|config
argument_list|,
name|EGL_DEPTH_SIZE
argument_list|,
operator|&
name|depthSize
argument_list|)
expr_stmt|;
name|eglGetConfigAttrib
argument_list|(
name|display
argument_list|,
name|config
argument_list|,
name|EGL_STENCIL_SIZE
argument_list|,
operator|&
name|stencilSize
argument_list|)
expr_stmt|;
name|eglGetConfigAttrib
argument_list|(
name|display
argument_list|,
name|config
argument_list|,
name|EGL_SAMPLES
argument_list|,
operator|&
name|sampleCount
argument_list|)
expr_stmt|;
name|eglGetConfigAttrib
argument_list|(
name|display
argument_list|,
name|config
argument_list|,
name|EGL_LEVEL
argument_list|,
operator|&
name|level
argument_list|)
expr_stmt|;
name|format
operator|.
name|setRedBufferSize
argument_list|(
name|redSize
argument_list|)
expr_stmt|;
name|format
operator|.
name|setGreenBufferSize
argument_list|(
name|greenSize
argument_list|)
expr_stmt|;
name|format
operator|.
name|setBlueBufferSize
argument_list|(
name|blueSize
argument_list|)
expr_stmt|;
name|format
operator|.
name|setAlphaBufferSize
argument_list|(
name|alphaSize
argument_list|)
expr_stmt|;
name|format
operator|.
name|setDepthBufferSize
argument_list|(
name|depthSize
argument_list|)
expr_stmt|;
name|format
operator|.
name|setStencilBufferSize
argument_list|(
name|stencilSize
argument_list|)
expr_stmt|;
name|format
operator|.
name|setSamples
argument_list|(
name|sampleCount
argument_list|)
expr_stmt|;
name|format
operator|.
name|setPlane
argument_list|(
name|level
argument_list|)
expr_stmt|;
name|format
operator|.
name|setDirectRendering
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// All EGL contexts are direct-rendered
name|format
operator|.
name|setRgba
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// EGL doesn't support colour index rendering
name|format
operator|.
name|setStereo
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// EGL doesn't support stereo buffers
name|format
operator|.
name|setAccumBufferSize
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// EGL doesn't support accululation buffers
name|format
operator|.
name|setDoubleBuffer
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// We don't support single buffered EGL contexts
comment|// Clear the EGL error state because some of the above may
comment|// have errored out because the attribute is not applicable
comment|// to the surface type.  Such errors don't matter.
name|eglGetError
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|hasOpenGL
name|bool
name|QGLFormat
operator|::
name|hasOpenGL
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|reset
name|void
name|QGLContext
operator|::
name|reset
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QGLContext
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|valid
condition|)
return|return;
name|d
operator|->
name|cleanup
argument_list|()
expr_stmt|;
name|doneCurrent
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|eglContext
operator|&&
name|d
operator|->
name|ownsEglContext
condition|)
block|{
name|d
operator|->
name|destroyEglSurfaceForDevice
argument_list|()
expr_stmt|;
operator|delete
name|d
operator|->
name|eglContext
expr_stmt|;
block|}
name|d
operator|->
name|ownsEglContext
operator|=
literal|false
expr_stmt|;
name|d
operator|->
name|eglContext
operator|=
literal|0
expr_stmt|;
name|d
operator|->
name|eglSurface
operator|=
name|EGL_NO_SURFACE
expr_stmt|;
name|d
operator|->
name|crWin
operator|=
literal|false
expr_stmt|;
name|d
operator|->
name|sharing
operator|=
literal|false
expr_stmt|;
name|d
operator|->
name|valid
operator|=
literal|false
expr_stmt|;
name|d
operator|->
name|transpColor
operator|=
name|QColor
argument_list|()
expr_stmt|;
name|d
operator|->
name|initDone
operator|=
literal|false
expr_stmt|;
name|QGLContextGroup
operator|::
name|removeShare
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|makeCurrent
name|void
name|QGLContext
operator|::
name|makeCurrent
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QGLContext
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|valid
operator|||
operator|!
name|d
operator|->
name|eglContext
operator|||
name|d
operator|->
name|eglSurfaceForDevice
argument_list|()
operator|==
name|EGL_NO_SURFACE
condition|)
block|{
name|qWarning
argument_list|(
literal|"QGLContext::makeCurrent(): Cannot make invalid context current"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|d
operator|->
name|eglContext
operator|->
name|makeCurrent
argument_list|(
name|d
operator|->
name|eglSurfaceForDevice
argument_list|()
argument_list|)
condition|)
block|{
name|QGLContextPrivate
operator|::
name|setCurrentContext
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|workaroundsCached
condition|)
block|{
name|d
operator|->
name|workaroundsCached
operator|=
literal|true
expr_stmt|;
specifier|const
name|char
modifier|*
name|renderer
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|glGetString
argument_list|(
name|GL_RENDERER
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|renderer
operator|&&
operator|(
name|strstr
argument_list|(
name|renderer
argument_list|,
literal|"SGX"
argument_list|)
operator|||
name|strstr
argument_list|(
name|renderer
argument_list|,
literal|"MBX"
argument_list|)
operator|)
condition|)
block|{
comment|// PowerVR MBX/SGX chips needs to clear all buffers when starting to render
comment|// a new frame, otherwise there will be a performance penalty to pay for
comment|// each frame.
name|qDebug
argument_list|()
operator|<<
literal|"Found SGX/MBX driver, enabling FullClearOnEveryFrame"
expr_stmt|;
name|d
operator|->
name|workaround_needsFullClearOnEveryFrame
operator|=
literal|true
expr_stmt|;
comment|// Older PowerVR SGX drivers (like the one in the N900) have a
comment|// bug which prevents glCopyTexSubImage2D() to work with a POT
comment|// or GL_ALPHA texture bound to an FBO. The only way to
comment|// identify that driver is to check the EGL version number for it.
specifier|const
name|char
modifier|*
name|egl_version
init|=
name|eglQueryString
argument_list|(
name|d
operator|->
name|eglContext
operator|->
name|display
argument_list|()
argument_list|,
name|EGL_VERSION
argument_list|)
decl_stmt|;
if|if
condition|(
name|egl_version
operator|&&
name|strstr
argument_list|(
name|egl_version
argument_list|,
literal|"1.3"
argument_list|)
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"Found v1.3 driver, enabling brokenFBOReadBack"
expr_stmt|;
name|d
operator|->
name|workaround_brokenFBOReadBack
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|egl_version
operator|&&
name|strstr
argument_list|(
name|egl_version
argument_list|,
literal|"1.4"
argument_list|)
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"Found v1.4 driver, enabling brokenTexSubImage"
expr_stmt|;
name|d
operator|->
name|workaround_brokenTexSubImage
operator|=
literal|true
expr_stmt|;
comment|// this is a bit complicated; 1.4 version SGX drivers from
comment|// Nokia have fixed the brokenFBOReadBack problem, but
comment|// official drivers from TI haven't, meaning that things
comment|// like the beagleboard are broken unless we hack around it
comment|// - but at the same time, we want to not reduce performance
comment|// by not enabling this elsewhere.
comment|//
comment|// so, let's check for a Nokia-specific addon, and only
comment|// enable if it isn't present.
comment|// (see MeeGo bug #5616)
if|if
condition|(
operator|!
name|QEgl
operator|::
name|hasExtension
argument_list|(
literal|"EGL_NOK_image_shared"
argument_list|)
condition|)
block|{
comment|// no Nokia extension, this is probably a standard SGX
comment|// driver, so enable the workaround
name|qDebug
argument_list|()
operator|<<
literal|"Found non-Nokia v1.4 driver, enabling brokenFBOReadBack"
expr_stmt|;
name|d
operator|->
name|workaround_brokenFBOReadBack
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
end_function
begin_function
DECL|function|doneCurrent
name|void
name|QGLContext
operator|::
name|doneCurrent
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QGLContext
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|eglContext
condition|)
name|d
operator|->
name|eglContext
operator|->
name|doneCurrent
argument_list|()
expr_stmt|;
name|QGLContextPrivate
operator|::
name|setCurrentContext
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|swapBuffers
name|void
name|QGLContext
operator|::
name|swapBuffers
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGLContext
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|valid
operator|||
operator|!
name|d
operator|->
name|eglContext
condition|)
return|return;
name|d
operator|->
name|eglContext
operator|->
name|swapBuffers
argument_list|(
name|d
operator|->
name|eglSurfaceForDevice
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|destroyEglSurfaceForDevice
name|void
name|QGLContextPrivate
operator|::
name|destroyEglSurfaceForDevice
parameter_list|()
block|{
if|if
condition|(
name|eglSurface
operator|!=
name|EGL_NO_SURFACE
condition|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_X11
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
comment|// Make sure we don't call eglDestroySurface on a surface which
comment|// was created for a different winId. This applies only to QGLWidget
comment|// paint device, so make sure this is the one we're operating on.
if|if
condition|(
name|paintDevice
operator|&&
name|paintDevice
operator|->
name|devType
argument_list|()
operator|==
name|QInternal
operator|::
name|Widget
condition|)
block|{
name|QWidget
modifier|*
name|w
init|=
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|paintDevice
argument_list|)
decl_stmt|;
if|if
condition|(
name|QGLWidget
modifier|*
name|wgl
init|=
name|qobject_cast
argument_list|<
name|QGLWidget
operator|*
argument_list|>
argument_list|(
name|w
argument_list|)
condition|)
block|{
if|if
condition|(
name|wgl
operator|->
name|d_func
argument_list|()
operator|->
name|eglSurfaceWindowId
operator|!=
name|wgl
operator|->
name|winId
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"WARNING: Potential EGL surface leak! Not destroying surface."
argument_list|)
expr_stmt|;
name|eglSurface
operator|=
name|EGL_NO_SURFACE
expr_stmt|;
return|return;
block|}
block|}
block|}
endif|#
directive|endif
name|eglDestroySurface
argument_list|(
name|eglContext
operator|->
name|display
argument_list|()
argument_list|,
name|eglSurface
argument_list|)
expr_stmt|;
name|eglSurface
operator|=
name|EGL_NO_SURFACE
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|eglSurfaceForDevice
name|EGLSurface
name|QGLContextPrivate
operator|::
name|eglSurfaceForDevice
parameter_list|()
specifier|const
block|{
comment|// If a QPlatformPixmap had to create the QGLContext, we don't have a paintDevice
if|if
condition|(
operator|!
name|paintDevice
condition|)
return|return
name|eglSurface
return|;
ifdef|#
directive|ifdef
name|Q_WS_X11
if|if
condition|(
name|paintDevice
operator|->
name|devType
argument_list|()
operator|==
name|QInternal
operator|::
name|Pixmap
condition|)
block|{
name|QPlatformPixmap
modifier|*
name|pmd
init|=
cast|static_cast
argument_list|<
name|QPixmap
operator|*
argument_list|>
argument_list|(
name|paintDevice
argument_list|)
operator|->
name|data_ptr
argument_list|()
operator|.
name|data
argument_list|()
decl_stmt|;
if|if
condition|(
name|pmd
operator|->
name|classId
argument_list|()
operator|==
name|QPlatformPixmap
operator|::
name|X11Class
condition|)
block|{
name|QX11PlatformPixmap
modifier|*
name|x11PlatformPixmap
init|=
cast|static_cast
argument_list|<
name|QX11PlatformPixmap
operator|*
argument_list|>
argument_list|(
name|pmd
argument_list|)
decl_stmt|;
return|return
operator|(
name|EGLSurface
operator|)
name|x11PlatformPixmap
operator|->
name|gl_surface
return|;
block|}
block|}
endif|#
directive|endif
if|if
condition|(
name|paintDevice
operator|->
name|devType
argument_list|()
operator|==
name|QInternal
operator|::
name|Pbuffer
condition|)
block|{
name|QGLPixelBuffer
modifier|*
name|pbuf
init|=
cast|static_cast
argument_list|<
name|QGLPixelBuffer
operator|*
argument_list|>
argument_list|(
name|paintDevice
argument_list|)
decl_stmt|;
return|return
name|pbuf
operator|->
name|d_func
argument_list|()
operator|->
name|pbuf
return|;
block|}
return|return
name|eglSurface
return|;
block|}
end_function
begin_function
DECL|function|swapRegion
name|void
name|QGLContextPrivate
operator|::
name|swapRegion
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|)
block|{
if|if
condition|(
operator|!
name|valid
operator|||
operator|!
name|eglContext
condition|)
return|return;
name|eglContext
operator|->
name|swapBuffersRegion2NOK
argument_list|(
name|eglSurfaceForDevice
argument_list|()
argument_list|,
operator|&
name|region
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setExtraWindowSurfaceCreationProps
name|void
name|QGLContextPrivate
operator|::
name|setExtraWindowSurfaceCreationProps
parameter_list|(
name|QEglProperties
modifier|*
name|props
parameter_list|)
block|{
name|extraWindowSurfaceCreationProps
operator|=
name|props
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setMouseTracking
name|void
name|QGLWidget
operator|::
name|setMouseTracking
parameter_list|(
name|bool
name|enable
parameter_list|)
block|{
name|QWidget
operator|::
name|setMouseTracking
argument_list|(
name|enable
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|overlayTransparentColor
name|QColor
name|QGLContext
operator|::
name|overlayTransparentColor
parameter_list|()
specifier|const
block|{
return|return
name|d_func
argument_list|()
operator|->
name|transpColor
return|;
block|}
end_function
begin_function
DECL|function|colorIndex
name|uint
name|QGLContext
operator|::
name|colorIndex
parameter_list|(
specifier|const
name|QColor
modifier|&
name|c
parameter_list|)
specifier|const
block|{
name|Q_UNUSED
argument_list|(
name|c
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|generateFontDisplayLists
name|void
name|QGLContext
operator|::
name|generateFontDisplayLists
parameter_list|(
specifier|const
name|QFont
modifier|&
name|fnt
parameter_list|,
name|int
name|listBase
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|fnt
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|listBase
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|getProcAddress
name|void
modifier|*
name|QGLContext
operator|::
name|getProcAddress
parameter_list|(
specifier|const
name|QString
modifier|&
name|proc
parameter_list|)
specifier|const
block|{
return|return
operator|(
name|void
operator|*
operator|)
name|eglGetProcAddress
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|proc
operator|.
name|toLatin1
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|renderCxPm
name|bool
name|QGLWidgetPrivate
operator|::
name|renderCxPm
parameter_list|(
name|QPixmap
modifier|*
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
