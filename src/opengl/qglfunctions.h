begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtOpenGL module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QGLFUNCTIONS_H
end_ifndef
begin_define
DECL|macro|QGLFUNCTIONS_H
define|#
directive|define
name|QGLFUNCTIONS_H
end_define
begin_ifdef
ifdef|#
directive|ifdef
name|__GLEW_H__
end_ifdef
begin_warning
warning|#
directive|warning
warning|qglfunctions.h is not compatible with GLEW, GLEW defines will be undefined
end_warning
begin_warning
warning|#
directive|warning
warning|To use GLEW with Qt, do not include<QtOpenGL> or<QGLFunctions> after glew.h
end_warning
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<QtOpenGL/qgl.h>
end_include
begin_decl_stmt
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
name|QT_MODULE
argument_list|(
name|OpenGL
argument_list|)
comment|// Types that aren't defined in all system's gl.h files.
decl|typedef
DECL|typedef|qgl_GLintptr
name|ptrdiff_t
name|qgl_GLintptr
decl_stmt|;
end_decl_stmt
begin_typedef
DECL|typedef|qgl_GLsizeiptr
typedef|typedef
name|ptrdiff_t
name|qgl_GLsizeiptr
typedef|;
end_typedef
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_WIN
end_ifdef
begin_define
DECL|macro|QGLF_APIENTRY
define|#
directive|define
name|QGLF_APIENTRY
value|APIENTRY
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|Q_WS_MAC
end_ifndef
begin_ifndef
ifndef|#
directive|ifndef
name|QGLF_APIENTRYP
end_ifndef
begin_ifdef
ifdef|#
directive|ifdef
name|QGLF_APIENTRY
end_ifdef
begin_define
DECL|macro|QGLF_APIENTRYP
define|#
directive|define
name|QGLF_APIENTRYP
value|QGLF_APIENTRY *
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|QGLF_APIENTRY
define|#
directive|define
name|QGLF_APIENTRY
end_define
begin_define
DECL|macro|QGLF_APIENTRYP
define|#
directive|define
name|QGLF_APIENTRYP
value|*
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|QGLF_APIENTRY
define|#
directive|define
name|QGLF_APIENTRY
end_define
begin_define
DECL|macro|QGLF_APIENTRYP
define|#
directive|define
name|QGLF_APIENTRYP
value|*
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_struct_decl
struct_decl|struct
name|QGLFunctionsPrivate
struct_decl|;
end_struct_decl
begin_comment
comment|// Undefine any macros from GLEW, qglextensions_p.h, etc that
end_comment
begin_comment
comment|// may interfere with the definition of QGLFunctions.
end_comment
begin_undef
DECL|macro|glActiveTexture
undef|#
directive|undef
name|glActiveTexture
end_undef
begin_undef
DECL|macro|glAttachShader
undef|#
directive|undef
name|glAttachShader
end_undef
begin_undef
DECL|macro|glBindAttribLocation
undef|#
directive|undef
name|glBindAttribLocation
end_undef
begin_undef
DECL|macro|glBindBuffer
undef|#
directive|undef
name|glBindBuffer
end_undef
begin_undef
DECL|macro|glBindFramebuffer
undef|#
directive|undef
name|glBindFramebuffer
end_undef
begin_undef
DECL|macro|glBindRenderbuffer
undef|#
directive|undef
name|glBindRenderbuffer
end_undef
begin_undef
DECL|macro|glBlendColor
undef|#
directive|undef
name|glBlendColor
end_undef
begin_undef
DECL|macro|glBlendEquation
undef|#
directive|undef
name|glBlendEquation
end_undef
begin_undef
DECL|macro|glBlendEquationSeparate
undef|#
directive|undef
name|glBlendEquationSeparate
end_undef
begin_undef
DECL|macro|glBlendFuncSeparate
undef|#
directive|undef
name|glBlendFuncSeparate
end_undef
begin_undef
DECL|macro|glBufferData
undef|#
directive|undef
name|glBufferData
end_undef
begin_undef
DECL|macro|glBufferSubData
undef|#
directive|undef
name|glBufferSubData
end_undef
begin_undef
DECL|macro|glCheckFramebufferStatus
undef|#
directive|undef
name|glCheckFramebufferStatus
end_undef
begin_undef
DECL|macro|glClearDepthf
undef|#
directive|undef
name|glClearDepthf
end_undef
begin_undef
DECL|macro|glCompileShader
undef|#
directive|undef
name|glCompileShader
end_undef
begin_undef
DECL|macro|glCompressedTexImage2D
undef|#
directive|undef
name|glCompressedTexImage2D
end_undef
begin_undef
DECL|macro|glCompressedTexSubImage2D
undef|#
directive|undef
name|glCompressedTexSubImage2D
end_undef
begin_undef
DECL|macro|glCreateProgram
undef|#
directive|undef
name|glCreateProgram
end_undef
begin_undef
DECL|macro|glCreateShader
undef|#
directive|undef
name|glCreateShader
end_undef
begin_undef
DECL|macro|glDeleteBuffers
undef|#
directive|undef
name|glDeleteBuffers
end_undef
begin_undef
DECL|macro|glDeleteFramebuffers
undef|#
directive|undef
name|glDeleteFramebuffers
end_undef
begin_undef
DECL|macro|glDeleteProgram
undef|#
directive|undef
name|glDeleteProgram
end_undef
begin_undef
DECL|macro|glDeleteRenderbuffers
undef|#
directive|undef
name|glDeleteRenderbuffers
end_undef
begin_undef
DECL|macro|glDeleteShader
undef|#
directive|undef
name|glDeleteShader
end_undef
begin_undef
DECL|macro|glDepthRangef
undef|#
directive|undef
name|glDepthRangef
end_undef
begin_undef
DECL|macro|glDetachShader
undef|#
directive|undef
name|glDetachShader
end_undef
begin_undef
DECL|macro|glDisableVertexAttribArray
undef|#
directive|undef
name|glDisableVertexAttribArray
end_undef
begin_undef
DECL|macro|glEnableVertexAttribArray
undef|#
directive|undef
name|glEnableVertexAttribArray
end_undef
begin_undef
DECL|macro|glFramebufferRenderbuffer
undef|#
directive|undef
name|glFramebufferRenderbuffer
end_undef
begin_undef
DECL|macro|glFramebufferTexture2D
undef|#
directive|undef
name|glFramebufferTexture2D
end_undef
begin_undef
DECL|macro|glGenBuffers
undef|#
directive|undef
name|glGenBuffers
end_undef
begin_undef
DECL|macro|glGenerateMipmap
undef|#
directive|undef
name|glGenerateMipmap
end_undef
begin_undef
DECL|macro|glGenFramebuffers
undef|#
directive|undef
name|glGenFramebuffers
end_undef
begin_undef
DECL|macro|glGenRenderbuffers
undef|#
directive|undef
name|glGenRenderbuffers
end_undef
begin_undef
DECL|macro|glGetActiveAttrib
undef|#
directive|undef
name|glGetActiveAttrib
end_undef
begin_undef
DECL|macro|glGetActiveUniform
undef|#
directive|undef
name|glGetActiveUniform
end_undef
begin_undef
DECL|macro|glGetAttachedShaders
undef|#
directive|undef
name|glGetAttachedShaders
end_undef
begin_undef
DECL|macro|glGetAttribLocation
undef|#
directive|undef
name|glGetAttribLocation
end_undef
begin_undef
DECL|macro|glGetBufferParameteriv
undef|#
directive|undef
name|glGetBufferParameteriv
end_undef
begin_undef
DECL|macro|glGetFramebufferAttachmentParameteriv
undef|#
directive|undef
name|glGetFramebufferAttachmentParameteriv
end_undef
begin_undef
DECL|macro|glGetProgramiv
undef|#
directive|undef
name|glGetProgramiv
end_undef
begin_undef
DECL|macro|glGetProgramInfoLog
undef|#
directive|undef
name|glGetProgramInfoLog
end_undef
begin_undef
DECL|macro|glGetRenderbufferParameteriv
undef|#
directive|undef
name|glGetRenderbufferParameteriv
end_undef
begin_undef
DECL|macro|glGetShaderiv
undef|#
directive|undef
name|glGetShaderiv
end_undef
begin_undef
DECL|macro|glGetShaderInfoLog
undef|#
directive|undef
name|glGetShaderInfoLog
end_undef
begin_undef
DECL|macro|glGetShaderPrecisionFormat
undef|#
directive|undef
name|glGetShaderPrecisionFormat
end_undef
begin_undef
DECL|macro|glGetShaderSource
undef|#
directive|undef
name|glGetShaderSource
end_undef
begin_undef
DECL|macro|glGetUniformfv
undef|#
directive|undef
name|glGetUniformfv
end_undef
begin_undef
DECL|macro|glGetUniformiv
undef|#
directive|undef
name|glGetUniformiv
end_undef
begin_undef
DECL|macro|glGetUniformLocation
undef|#
directive|undef
name|glGetUniformLocation
end_undef
begin_undef
DECL|macro|glGetVertexAttribfv
undef|#
directive|undef
name|glGetVertexAttribfv
end_undef
begin_undef
DECL|macro|glGetVertexAttribiv
undef|#
directive|undef
name|glGetVertexAttribiv
end_undef
begin_undef
DECL|macro|glGetVertexAttribPointerv
undef|#
directive|undef
name|glGetVertexAttribPointerv
end_undef
begin_undef
DECL|macro|glIsBuffer
undef|#
directive|undef
name|glIsBuffer
end_undef
begin_undef
DECL|macro|glIsFramebuffer
undef|#
directive|undef
name|glIsFramebuffer
end_undef
begin_undef
DECL|macro|glIsProgram
undef|#
directive|undef
name|glIsProgram
end_undef
begin_undef
DECL|macro|glIsRenderbuffer
undef|#
directive|undef
name|glIsRenderbuffer
end_undef
begin_undef
DECL|macro|glIsShader
undef|#
directive|undef
name|glIsShader
end_undef
begin_undef
DECL|macro|glLinkProgram
undef|#
directive|undef
name|glLinkProgram
end_undef
begin_undef
DECL|macro|glReleaseShaderCompiler
undef|#
directive|undef
name|glReleaseShaderCompiler
end_undef
begin_undef
DECL|macro|glRenderbufferStorage
undef|#
directive|undef
name|glRenderbufferStorage
end_undef
begin_undef
DECL|macro|glSampleCoverage
undef|#
directive|undef
name|glSampleCoverage
end_undef
begin_undef
DECL|macro|glShaderBinary
undef|#
directive|undef
name|glShaderBinary
end_undef
begin_undef
DECL|macro|glShaderSource
undef|#
directive|undef
name|glShaderSource
end_undef
begin_undef
DECL|macro|glStencilFuncSeparate
undef|#
directive|undef
name|glStencilFuncSeparate
end_undef
begin_undef
DECL|macro|glStencilMaskSeparate
undef|#
directive|undef
name|glStencilMaskSeparate
end_undef
begin_undef
DECL|macro|glStencilOpSeparate
undef|#
directive|undef
name|glStencilOpSeparate
end_undef
begin_undef
DECL|macro|glUniform1f
undef|#
directive|undef
name|glUniform1f
end_undef
begin_undef
DECL|macro|glUniform1fv
undef|#
directive|undef
name|glUniform1fv
end_undef
begin_undef
DECL|macro|glUniform1i
undef|#
directive|undef
name|glUniform1i
end_undef
begin_undef
DECL|macro|glUniform1iv
undef|#
directive|undef
name|glUniform1iv
end_undef
begin_undef
DECL|macro|glUniform2f
undef|#
directive|undef
name|glUniform2f
end_undef
begin_undef
DECL|macro|glUniform2fv
undef|#
directive|undef
name|glUniform2fv
end_undef
begin_undef
DECL|macro|glUniform2i
undef|#
directive|undef
name|glUniform2i
end_undef
begin_undef
DECL|macro|glUniform2iv
undef|#
directive|undef
name|glUniform2iv
end_undef
begin_undef
DECL|macro|glUniform3f
undef|#
directive|undef
name|glUniform3f
end_undef
begin_undef
DECL|macro|glUniform3fv
undef|#
directive|undef
name|glUniform3fv
end_undef
begin_undef
DECL|macro|glUniform3i
undef|#
directive|undef
name|glUniform3i
end_undef
begin_undef
DECL|macro|glUniform3iv
undef|#
directive|undef
name|glUniform3iv
end_undef
begin_undef
DECL|macro|glUniform4f
undef|#
directive|undef
name|glUniform4f
end_undef
begin_undef
DECL|macro|glUniform4fv
undef|#
directive|undef
name|glUniform4fv
end_undef
begin_undef
DECL|macro|glUniform4i
undef|#
directive|undef
name|glUniform4i
end_undef
begin_undef
DECL|macro|glUniform4iv
undef|#
directive|undef
name|glUniform4iv
end_undef
begin_undef
DECL|macro|glUniformMatrix2fv
undef|#
directive|undef
name|glUniformMatrix2fv
end_undef
begin_undef
DECL|macro|glUniformMatrix3fv
undef|#
directive|undef
name|glUniformMatrix3fv
end_undef
begin_undef
DECL|macro|glUniformMatrix4fv
undef|#
directive|undef
name|glUniformMatrix4fv
end_undef
begin_undef
DECL|macro|glUseProgram
undef|#
directive|undef
name|glUseProgram
end_undef
begin_undef
DECL|macro|glValidateProgram
undef|#
directive|undef
name|glValidateProgram
end_undef
begin_undef
DECL|macro|glVertexAttrib1f
undef|#
directive|undef
name|glVertexAttrib1f
end_undef
begin_undef
DECL|macro|glVertexAttrib1fv
undef|#
directive|undef
name|glVertexAttrib1fv
end_undef
begin_undef
DECL|macro|glVertexAttrib2f
undef|#
directive|undef
name|glVertexAttrib2f
end_undef
begin_undef
DECL|macro|glVertexAttrib2fv
undef|#
directive|undef
name|glVertexAttrib2fv
end_undef
begin_undef
DECL|macro|glVertexAttrib3f
undef|#
directive|undef
name|glVertexAttrib3f
end_undef
begin_undef
DECL|macro|glVertexAttrib3fv
undef|#
directive|undef
name|glVertexAttrib3fv
end_undef
begin_undef
DECL|macro|glVertexAttrib4f
undef|#
directive|undef
name|glVertexAttrib4f
end_undef
begin_undef
DECL|macro|glVertexAttrib4fv
undef|#
directive|undef
name|glVertexAttrib4fv
end_undef
begin_undef
DECL|macro|glVertexAttribPointer
undef|#
directive|undef
name|glVertexAttribPointer
end_undef
begin_decl_stmt
name|class
name|Q_OPENGL_EXPORT
name|QGLFunctions
block|{
name|public
label|:
name|QGLFunctions
argument_list|()
expr_stmt|;
name|explicit
name|QGLFunctions
parameter_list|(
specifier|const
name|QGLContext
modifier|*
name|context
parameter_list|)
function_decl|;
operator|~
name|QGLFunctions
argument_list|()
block|{}
expr|enum
name|OpenGLFeature
block|{
name|Multitexture
operator|=
literal|0x0001
block|,
name|Shaders
operator|=
literal|0x0002
block|,
name|Buffers
operator|=
literal|0x0004
block|,
name|Framebuffers
operator|=
literal|0x0008
block|,
name|BlendColor
operator|=
literal|0x0010
block|,
name|BlendEquation
operator|=
literal|0x0020
block|,
name|BlendEquationSeparate
operator|=
literal|0x0040
block|,
name|BlendFuncSeparate
operator|=
literal|0x0080
block|,
name|BlendSubtract
operator|=
literal|0x0100
block|,
name|CompressedTextures
operator|=
literal|0x0200
block|,
name|Multisample
operator|=
literal|0x0400
block|,
name|StencilSeparate
operator|=
literal|0x0800
block|,
name|NPOTTextures
operator|=
literal|0x1000
block|}
expr_stmt|;
name|Q_DECLARE_FLAGS
argument_list|(
argument|OpenGLFeatures
argument_list|,
argument|OpenGLFeature
argument_list|)
name|QGLFunctions
operator|::
name|OpenGLFeatures
name|openGLFeatures
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|hasOpenGLFeature
argument_list|(
name|QGLFunctions
operator|::
name|OpenGLFeature
name|feature
argument_list|)
decl|const
decl_stmt|;
name|void
name|initializeGLFunctions
parameter_list|(
specifier|const
name|QGLContext
modifier|*
name|context
init|=
literal|0
parameter_list|)
function_decl|;
name|void
name|glActiveTexture
parameter_list|(
name|GLenum
name|texture
parameter_list|)
function_decl|;
name|void
name|glAttachShader
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLuint
name|shader
parameter_list|)
function_decl|;
name|void
name|glBindAttribLocation
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLuint
name|index
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
name|void
name|glBindBuffer
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLuint
name|buffer
parameter_list|)
function_decl|;
name|void
name|glBindFramebuffer
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLuint
name|framebuffer
parameter_list|)
function_decl|;
name|void
name|glBindRenderbuffer
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLuint
name|renderbuffer
parameter_list|)
function_decl|;
name|void
name|glBlendColor
parameter_list|(
name|GLclampf
name|red
parameter_list|,
name|GLclampf
name|green
parameter_list|,
name|GLclampf
name|blue
parameter_list|,
name|GLclampf
name|alpha
parameter_list|)
function_decl|;
name|void
name|glBlendEquation
parameter_list|(
name|GLenum
name|mode
parameter_list|)
function_decl|;
name|void
name|glBlendEquationSeparate
parameter_list|(
name|GLenum
name|modeRGB
parameter_list|,
name|GLenum
name|modeAlpha
parameter_list|)
function_decl|;
name|void
name|glBlendFuncSeparate
parameter_list|(
name|GLenum
name|srcRGB
parameter_list|,
name|GLenum
name|dstRGB
parameter_list|,
name|GLenum
name|srcAlpha
parameter_list|,
name|GLenum
name|dstAlpha
parameter_list|)
function_decl|;
name|void
name|glBufferData
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|qgl_GLsizeiptr
name|size
parameter_list|,
specifier|const
name|void
modifier|*
name|data
parameter_list|,
name|GLenum
name|usage
parameter_list|)
function_decl|;
name|void
name|glBufferSubData
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|qgl_GLintptr
name|offset
parameter_list|,
name|qgl_GLsizeiptr
name|size
parameter_list|,
specifier|const
name|void
modifier|*
name|data
parameter_list|)
function_decl|;
name|GLenum
name|glCheckFramebufferStatus
parameter_list|(
name|GLenum
name|target
parameter_list|)
function_decl|;
name|void
name|glClearDepthf
parameter_list|(
name|GLclampf
name|depth
parameter_list|)
function_decl|;
name|void
name|glCompileShader
parameter_list|(
name|GLuint
name|shader
parameter_list|)
function_decl|;
name|void
name|glCompressedTexImage2D
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLenum
name|internalformat
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLint
name|border
parameter_list|,
name|GLsizei
name|imageSize
parameter_list|,
specifier|const
name|void
modifier|*
name|data
parameter_list|)
function_decl|;
name|void
name|glCompressedTexSubImage2D
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLsizei
name|imageSize
parameter_list|,
specifier|const
name|void
modifier|*
name|data
parameter_list|)
function_decl|;
name|GLuint
name|glCreateProgram
parameter_list|()
function_decl|;
name|GLuint
name|glCreateShader
parameter_list|(
name|GLenum
name|type
parameter_list|)
function_decl|;
name|void
name|glDeleteBuffers
parameter_list|(
name|GLsizei
name|n
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|buffers
parameter_list|)
function_decl|;
name|void
name|glDeleteFramebuffers
parameter_list|(
name|GLsizei
name|n
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|framebuffers
parameter_list|)
function_decl|;
name|void
name|glDeleteProgram
parameter_list|(
name|GLuint
name|program
parameter_list|)
function_decl|;
name|void
name|glDeleteRenderbuffers
parameter_list|(
name|GLsizei
name|n
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|renderbuffers
parameter_list|)
function_decl|;
name|void
name|glDeleteShader
parameter_list|(
name|GLuint
name|shader
parameter_list|)
function_decl|;
name|void
name|glDepthRangef
parameter_list|(
name|GLclampf
name|zNear
parameter_list|,
name|GLclampf
name|zFar
parameter_list|)
function_decl|;
name|void
name|glDetachShader
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLuint
name|shader
parameter_list|)
function_decl|;
name|void
name|glDisableVertexAttribArray
parameter_list|(
name|GLuint
name|index
parameter_list|)
function_decl|;
name|void
name|glEnableVertexAttribArray
parameter_list|(
name|GLuint
name|index
parameter_list|)
function_decl|;
name|void
name|glFramebufferRenderbuffer
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|attachment
parameter_list|,
name|GLenum
name|renderbuffertarget
parameter_list|,
name|GLuint
name|renderbuffer
parameter_list|)
function_decl|;
name|void
name|glFramebufferTexture2D
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|attachment
parameter_list|,
name|GLenum
name|textarget
parameter_list|,
name|GLuint
name|texture
parameter_list|,
name|GLint
name|level
parameter_list|)
function_decl|;
name|void
name|glGenBuffers
parameter_list|(
name|GLsizei
name|n
parameter_list|,
name|GLuint
modifier|*
name|buffers
parameter_list|)
function_decl|;
name|void
name|glGenerateMipmap
parameter_list|(
name|GLenum
name|target
parameter_list|)
function_decl|;
name|void
name|glGenFramebuffers
parameter_list|(
name|GLsizei
name|n
parameter_list|,
name|GLuint
modifier|*
name|framebuffers
parameter_list|)
function_decl|;
name|void
name|glGenRenderbuffers
parameter_list|(
name|GLsizei
name|n
parameter_list|,
name|GLuint
modifier|*
name|renderbuffers
parameter_list|)
function_decl|;
name|void
name|glGetActiveAttrib
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLuint
name|index
parameter_list|,
name|GLsizei
name|bufsize
parameter_list|,
name|GLsizei
modifier|*
name|length
parameter_list|,
name|GLint
modifier|*
name|size
parameter_list|,
name|GLenum
modifier|*
name|type
parameter_list|,
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
name|void
name|glGetActiveUniform
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLuint
name|index
parameter_list|,
name|GLsizei
name|bufsize
parameter_list|,
name|GLsizei
modifier|*
name|length
parameter_list|,
name|GLint
modifier|*
name|size
parameter_list|,
name|GLenum
modifier|*
name|type
parameter_list|,
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
name|void
name|glGetAttachedShaders
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLsizei
name|maxcount
parameter_list|,
name|GLsizei
modifier|*
name|count
parameter_list|,
name|GLuint
modifier|*
name|shaders
parameter_list|)
function_decl|;
name|int
name|glGetAttribLocation
parameter_list|(
name|GLuint
name|program
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
name|void
name|glGetBufferParameteriv
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
function_decl|;
name|void
name|glGetFramebufferAttachmentParameteriv
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|attachment
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
function_decl|;
name|void
name|glGetProgramiv
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
function_decl|;
name|void
name|glGetProgramInfoLog
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLsizei
name|bufsize
parameter_list|,
name|GLsizei
modifier|*
name|length
parameter_list|,
name|char
modifier|*
name|infolog
parameter_list|)
function_decl|;
name|void
name|glGetRenderbufferParameteriv
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
function_decl|;
name|void
name|glGetShaderiv
parameter_list|(
name|GLuint
name|shader
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
function_decl|;
name|void
name|glGetShaderInfoLog
parameter_list|(
name|GLuint
name|shader
parameter_list|,
name|GLsizei
name|bufsize
parameter_list|,
name|GLsizei
modifier|*
name|length
parameter_list|,
name|char
modifier|*
name|infolog
parameter_list|)
function_decl|;
name|void
name|glGetShaderPrecisionFormat
parameter_list|(
name|GLenum
name|shadertype
parameter_list|,
name|GLenum
name|precisiontype
parameter_list|,
name|GLint
modifier|*
name|range
parameter_list|,
name|GLint
modifier|*
name|precision
parameter_list|)
function_decl|;
name|void
name|glGetShaderSource
parameter_list|(
name|GLuint
name|shader
parameter_list|,
name|GLsizei
name|bufsize
parameter_list|,
name|GLsizei
modifier|*
name|length
parameter_list|,
name|char
modifier|*
name|source
parameter_list|)
function_decl|;
name|void
name|glGetUniformfv
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLint
name|location
parameter_list|,
name|GLfloat
modifier|*
name|params
parameter_list|)
function_decl|;
name|void
name|glGetUniformiv
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLint
name|location
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
function_decl|;
name|int
name|glGetUniformLocation
parameter_list|(
name|GLuint
name|program
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
name|void
name|glGetVertexAttribfv
parameter_list|(
name|GLuint
name|index
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLfloat
modifier|*
name|params
parameter_list|)
function_decl|;
name|void
name|glGetVertexAttribiv
parameter_list|(
name|GLuint
name|index
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
function_decl|;
name|void
name|glGetVertexAttribPointerv
parameter_list|(
name|GLuint
name|index
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|void
modifier|*
modifier|*
name|pointer
parameter_list|)
function_decl|;
name|GLboolean
name|glIsBuffer
parameter_list|(
name|GLuint
name|buffer
parameter_list|)
function_decl|;
name|GLboolean
name|glIsFramebuffer
parameter_list|(
name|GLuint
name|framebuffer
parameter_list|)
function_decl|;
name|GLboolean
name|glIsProgram
parameter_list|(
name|GLuint
name|program
parameter_list|)
function_decl|;
name|GLboolean
name|glIsRenderbuffer
parameter_list|(
name|GLuint
name|renderbuffer
parameter_list|)
function_decl|;
name|GLboolean
name|glIsShader
parameter_list|(
name|GLuint
name|shader
parameter_list|)
function_decl|;
name|void
name|glLinkProgram
parameter_list|(
name|GLuint
name|program
parameter_list|)
function_decl|;
name|void
name|glReleaseShaderCompiler
parameter_list|()
function_decl|;
name|void
name|glRenderbufferStorage
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|internalformat
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|)
function_decl|;
name|void
name|glSampleCoverage
parameter_list|(
name|GLclampf
name|value
parameter_list|,
name|GLboolean
name|invert
parameter_list|)
function_decl|;
name|void
name|glShaderBinary
parameter_list|(
name|GLint
name|n
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|shaders
parameter_list|,
name|GLenum
name|binaryformat
parameter_list|,
specifier|const
name|void
modifier|*
name|binary
parameter_list|,
name|GLint
name|length
parameter_list|)
function_decl|;
name|void
name|glShaderSource
parameter_list|(
name|GLuint
name|shader
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|string
parameter_list|,
specifier|const
name|GLint
modifier|*
name|length
parameter_list|)
function_decl|;
name|void
name|glStencilFuncSeparate
parameter_list|(
name|GLenum
name|face
parameter_list|,
name|GLenum
name|func
parameter_list|,
name|GLint
name|ref
parameter_list|,
name|GLuint
name|mask
parameter_list|)
function_decl|;
name|void
name|glStencilMaskSeparate
parameter_list|(
name|GLenum
name|face
parameter_list|,
name|GLuint
name|mask
parameter_list|)
function_decl|;
name|void
name|glStencilOpSeparate
parameter_list|(
name|GLenum
name|face
parameter_list|,
name|GLenum
name|fail
parameter_list|,
name|GLenum
name|zfail
parameter_list|,
name|GLenum
name|zpass
parameter_list|)
function_decl|;
name|void
name|glUniform1f
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLfloat
name|x
parameter_list|)
function_decl|;
name|void
name|glUniform1fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|v
parameter_list|)
function_decl|;
name|void
name|glUniform1i
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLint
name|x
parameter_list|)
function_decl|;
name|void
name|glUniform1iv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLint
modifier|*
name|v
parameter_list|)
function_decl|;
name|void
name|glUniform2f
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLfloat
name|x
parameter_list|,
name|GLfloat
name|y
parameter_list|)
function_decl|;
name|void
name|glUniform2fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|v
parameter_list|)
function_decl|;
name|void
name|glUniform2i
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLint
name|x
parameter_list|,
name|GLint
name|y
parameter_list|)
function_decl|;
name|void
name|glUniform2iv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLint
modifier|*
name|v
parameter_list|)
function_decl|;
name|void
name|glUniform3f
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLfloat
name|x
parameter_list|,
name|GLfloat
name|y
parameter_list|,
name|GLfloat
name|z
parameter_list|)
function_decl|;
name|void
name|glUniform3fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|v
parameter_list|)
function_decl|;
name|void
name|glUniform3i
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLint
name|x
parameter_list|,
name|GLint
name|y
parameter_list|,
name|GLint
name|z
parameter_list|)
function_decl|;
name|void
name|glUniform3iv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLint
modifier|*
name|v
parameter_list|)
function_decl|;
name|void
name|glUniform4f
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLfloat
name|x
parameter_list|,
name|GLfloat
name|y
parameter_list|,
name|GLfloat
name|z
parameter_list|,
name|GLfloat
name|w
parameter_list|)
function_decl|;
name|void
name|glUniform4fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|v
parameter_list|)
function_decl|;
name|void
name|glUniform4i
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLint
name|x
parameter_list|,
name|GLint
name|y
parameter_list|,
name|GLint
name|z
parameter_list|,
name|GLint
name|w
parameter_list|)
function_decl|;
name|void
name|glUniform4iv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLint
modifier|*
name|v
parameter_list|)
function_decl|;
name|void
name|glUniformMatrix2fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLboolean
name|transpose
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|value
parameter_list|)
function_decl|;
name|void
name|glUniformMatrix3fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLboolean
name|transpose
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|value
parameter_list|)
function_decl|;
name|void
name|glUniformMatrix4fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLboolean
name|transpose
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|value
parameter_list|)
function_decl|;
name|void
name|glUseProgram
parameter_list|(
name|GLuint
name|program
parameter_list|)
function_decl|;
name|void
name|glValidateProgram
parameter_list|(
name|GLuint
name|program
parameter_list|)
function_decl|;
name|void
name|glVertexAttrib1f
parameter_list|(
name|GLuint
name|indx
parameter_list|,
name|GLfloat
name|x
parameter_list|)
function_decl|;
name|void
name|glVertexAttrib1fv
parameter_list|(
name|GLuint
name|indx
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|values
parameter_list|)
function_decl|;
name|void
name|glVertexAttrib2f
parameter_list|(
name|GLuint
name|indx
parameter_list|,
name|GLfloat
name|x
parameter_list|,
name|GLfloat
name|y
parameter_list|)
function_decl|;
name|void
name|glVertexAttrib2fv
parameter_list|(
name|GLuint
name|indx
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|values
parameter_list|)
function_decl|;
name|void
name|glVertexAttrib3f
parameter_list|(
name|GLuint
name|indx
parameter_list|,
name|GLfloat
name|x
parameter_list|,
name|GLfloat
name|y
parameter_list|,
name|GLfloat
name|z
parameter_list|)
function_decl|;
name|void
name|glVertexAttrib3fv
parameter_list|(
name|GLuint
name|indx
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|values
parameter_list|)
function_decl|;
name|void
name|glVertexAttrib4f
parameter_list|(
name|GLuint
name|indx
parameter_list|,
name|GLfloat
name|x
parameter_list|,
name|GLfloat
name|y
parameter_list|,
name|GLfloat
name|z
parameter_list|,
name|GLfloat
name|w
parameter_list|)
function_decl|;
name|void
name|glVertexAttrib4fv
parameter_list|(
name|GLuint
name|indx
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|values
parameter_list|)
function_decl|;
name|void
name|glVertexAttribPointer
parameter_list|(
name|GLuint
name|indx
parameter_list|,
name|GLint
name|size
parameter_list|,
name|GLenum
name|type
parameter_list|,
name|GLboolean
name|normalized
parameter_list|,
name|GLsizei
name|stride
parameter_list|,
specifier|const
name|void
modifier|*
name|ptr
parameter_list|)
function_decl|;
name|private
label|:
name|QGLFunctionsPrivate
modifier|*
name|d_ptr
decl_stmt|;
specifier|static
name|bool
name|isInitialized
parameter_list|(
specifier|const
name|QGLFunctionsPrivate
modifier|*
name|d
parameter_list|)
block|{
return|return
name|d
operator|!=
literal|0
return|;
block|}
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_macro
name|Q_DECLARE_OPERATORS_FOR_FLAGS
argument_list|(
argument|QGLFunctions::OpenGLFeatures
argument_list|)
end_macro
begin_struct
DECL|struct|QGLFunctionsPrivate
struct|struct
name|QGLFunctionsPrivate
block|{
name|QGLFunctionsPrivate
argument_list|(
specifier|const
name|QGLContext
operator|*
name|context
operator|=
literal|0
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_OPENGL_ES_2
name|void
function_decl|(
name|QGLF_APIENTRYP
name|activeTexture
function_decl|)
parameter_list|(
name|GLenum
name|texture
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|attachShader
function_decl|)
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLuint
name|shader
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|bindAttribLocation
function_decl|)
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLuint
name|index
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|bindBuffer
function_decl|)
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLuint
name|buffer
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|bindFramebuffer
function_decl|)
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLuint
name|framebuffer
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|bindRenderbuffer
function_decl|)
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLuint
name|renderbuffer
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|blendColor
function_decl|)
parameter_list|(
name|GLclampf
name|red
parameter_list|,
name|GLclampf
name|green
parameter_list|,
name|GLclampf
name|blue
parameter_list|,
name|GLclampf
name|alpha
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|blendEquation
function_decl|)
parameter_list|(
name|GLenum
name|mode
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|blendEquationSeparate
function_decl|)
parameter_list|(
name|GLenum
name|modeRGB
parameter_list|,
name|GLenum
name|modeAlpha
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|blendFuncSeparate
function_decl|)
parameter_list|(
name|GLenum
name|srcRGB
parameter_list|,
name|GLenum
name|dstRGB
parameter_list|,
name|GLenum
name|srcAlpha
parameter_list|,
name|GLenum
name|dstAlpha
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|bufferData
function_decl|)
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|qgl_GLsizeiptr
name|size
parameter_list|,
specifier|const
name|void
modifier|*
name|data
parameter_list|,
name|GLenum
name|usage
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|bufferSubData
function_decl|)
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|qgl_GLintptr
name|offset
parameter_list|,
name|qgl_GLsizeiptr
name|size
parameter_list|,
specifier|const
name|void
modifier|*
name|data
parameter_list|)
function_decl|;
name|GLenum
function_decl|(
name|QGLF_APIENTRYP
name|checkFramebufferStatus
function_decl|)
parameter_list|(
name|GLenum
name|target
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|compileShader
function_decl|)
parameter_list|(
name|GLuint
name|shader
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|compressedTexImage2D
function_decl|)
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLenum
name|internalformat
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLint
name|border
parameter_list|,
name|GLsizei
name|imageSize
parameter_list|,
specifier|const
name|void
modifier|*
name|data
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|compressedTexSubImage2D
function_decl|)
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLsizei
name|imageSize
parameter_list|,
specifier|const
name|void
modifier|*
name|data
parameter_list|)
function_decl|;
name|GLuint
function_decl|(
name|QGLF_APIENTRYP
name|createProgram
function_decl|)
parameter_list|()
function_decl|;
name|GLuint
function_decl|(
name|QGLF_APIENTRYP
name|createShader
function_decl|)
parameter_list|(
name|GLenum
name|type
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|deleteBuffers
function_decl|)
parameter_list|(
name|GLsizei
name|n
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|buffers
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|deleteFramebuffers
function_decl|)
parameter_list|(
name|GLsizei
name|n
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|framebuffers
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|deleteProgram
function_decl|)
parameter_list|(
name|GLuint
name|program
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|deleteRenderbuffers
function_decl|)
parameter_list|(
name|GLsizei
name|n
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|renderbuffers
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|deleteShader
function_decl|)
parameter_list|(
name|GLuint
name|shader
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|detachShader
function_decl|)
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLuint
name|shader
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|disableVertexAttribArray
function_decl|)
parameter_list|(
name|GLuint
name|index
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|enableVertexAttribArray
function_decl|)
parameter_list|(
name|GLuint
name|index
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|framebufferRenderbuffer
function_decl|)
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|attachment
parameter_list|,
name|GLenum
name|renderbuffertarget
parameter_list|,
name|GLuint
name|renderbuffer
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|framebufferTexture2D
function_decl|)
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|attachment
parameter_list|,
name|GLenum
name|textarget
parameter_list|,
name|GLuint
name|texture
parameter_list|,
name|GLint
name|level
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|genBuffers
function_decl|)
parameter_list|(
name|GLsizei
name|n
parameter_list|,
name|GLuint
modifier|*
name|buffers
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|generateMipmap
function_decl|)
parameter_list|(
name|GLenum
name|target
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|genFramebuffers
function_decl|)
parameter_list|(
name|GLsizei
name|n
parameter_list|,
name|GLuint
modifier|*
name|framebuffers
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|genRenderbuffers
function_decl|)
parameter_list|(
name|GLsizei
name|n
parameter_list|,
name|GLuint
modifier|*
name|renderbuffers
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|getActiveAttrib
function_decl|)
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLuint
name|index
parameter_list|,
name|GLsizei
name|bufsize
parameter_list|,
name|GLsizei
modifier|*
name|length
parameter_list|,
name|GLint
modifier|*
name|size
parameter_list|,
name|GLenum
modifier|*
name|type
parameter_list|,
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|getActiveUniform
function_decl|)
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLuint
name|index
parameter_list|,
name|GLsizei
name|bufsize
parameter_list|,
name|GLsizei
modifier|*
name|length
parameter_list|,
name|GLint
modifier|*
name|size
parameter_list|,
name|GLenum
modifier|*
name|type
parameter_list|,
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|getAttachedShaders
function_decl|)
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLsizei
name|maxcount
parameter_list|,
name|GLsizei
modifier|*
name|count
parameter_list|,
name|GLuint
modifier|*
name|shaders
parameter_list|)
function_decl|;
name|int
function_decl|(
name|QGLF_APIENTRYP
name|getAttribLocation
function_decl|)
parameter_list|(
name|GLuint
name|program
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|getBufferParameteriv
function_decl|)
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|getFramebufferAttachmentParameteriv
function_decl|)
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|attachment
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|getProgramiv
function_decl|)
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|getProgramInfoLog
function_decl|)
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLsizei
name|bufsize
parameter_list|,
name|GLsizei
modifier|*
name|length
parameter_list|,
name|char
modifier|*
name|infolog
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|getRenderbufferParameteriv
function_decl|)
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|getShaderiv
function_decl|)
parameter_list|(
name|GLuint
name|shader
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|getShaderInfoLog
function_decl|)
parameter_list|(
name|GLuint
name|shader
parameter_list|,
name|GLsizei
name|bufsize
parameter_list|,
name|GLsizei
modifier|*
name|length
parameter_list|,
name|char
modifier|*
name|infolog
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|getShaderPrecisionFormat
function_decl|)
parameter_list|(
name|GLenum
name|shadertype
parameter_list|,
name|GLenum
name|precisiontype
parameter_list|,
name|GLint
modifier|*
name|range
parameter_list|,
name|GLint
modifier|*
name|precision
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|getShaderSource
function_decl|)
parameter_list|(
name|GLuint
name|shader
parameter_list|,
name|GLsizei
name|bufsize
parameter_list|,
name|GLsizei
modifier|*
name|length
parameter_list|,
name|char
modifier|*
name|source
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|getUniformfv
function_decl|)
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLint
name|location
parameter_list|,
name|GLfloat
modifier|*
name|params
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|getUniformiv
function_decl|)
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLint
name|location
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
function_decl|;
name|int
function_decl|(
name|QGLF_APIENTRYP
name|getUniformLocation
function_decl|)
parameter_list|(
name|GLuint
name|program
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|getVertexAttribfv
function_decl|)
parameter_list|(
name|GLuint
name|index
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLfloat
modifier|*
name|params
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|getVertexAttribiv
function_decl|)
parameter_list|(
name|GLuint
name|index
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|getVertexAttribPointerv
function_decl|)
parameter_list|(
name|GLuint
name|index
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|void
modifier|*
modifier|*
name|pointer
parameter_list|)
function_decl|;
name|GLboolean
function_decl|(
name|QGLF_APIENTRYP
name|isBuffer
function_decl|)
parameter_list|(
name|GLuint
name|buffer
parameter_list|)
function_decl|;
name|GLboolean
function_decl|(
name|QGLF_APIENTRYP
name|isFramebuffer
function_decl|)
parameter_list|(
name|GLuint
name|framebuffer
parameter_list|)
function_decl|;
name|GLboolean
function_decl|(
name|QGLF_APIENTRYP
name|isProgram
function_decl|)
parameter_list|(
name|GLuint
name|program
parameter_list|)
function_decl|;
name|GLboolean
function_decl|(
name|QGLF_APIENTRYP
name|isRenderbuffer
function_decl|)
parameter_list|(
name|GLuint
name|renderbuffer
parameter_list|)
function_decl|;
name|GLboolean
function_decl|(
name|QGLF_APIENTRYP
name|isShader
function_decl|)
parameter_list|(
name|GLuint
name|shader
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|linkProgram
function_decl|)
parameter_list|(
name|GLuint
name|program
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|releaseShaderCompiler
function_decl|)
parameter_list|()
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|renderbufferStorage
function_decl|)
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|internalformat
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|sampleCoverage
function_decl|)
parameter_list|(
name|GLclampf
name|value
parameter_list|,
name|GLboolean
name|invert
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|shaderBinary
function_decl|)
parameter_list|(
name|GLint
name|n
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|shaders
parameter_list|,
name|GLenum
name|binaryformat
parameter_list|,
specifier|const
name|void
modifier|*
name|binary
parameter_list|,
name|GLint
name|length
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|shaderSource
function_decl|)
parameter_list|(
name|GLuint
name|shader
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|string
parameter_list|,
specifier|const
name|GLint
modifier|*
name|length
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|stencilFuncSeparate
function_decl|)
parameter_list|(
name|GLenum
name|face
parameter_list|,
name|GLenum
name|func
parameter_list|,
name|GLint
name|ref
parameter_list|,
name|GLuint
name|mask
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|stencilMaskSeparate
function_decl|)
parameter_list|(
name|GLenum
name|face
parameter_list|,
name|GLuint
name|mask
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|stencilOpSeparate
function_decl|)
parameter_list|(
name|GLenum
name|face
parameter_list|,
name|GLenum
name|fail
parameter_list|,
name|GLenum
name|zfail
parameter_list|,
name|GLenum
name|zpass
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|uniform1f
function_decl|)
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLfloat
name|x
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|uniform1fv
function_decl|)
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|v
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|uniform1i
function_decl|)
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLint
name|x
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|uniform1iv
function_decl|)
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLint
modifier|*
name|v
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|uniform2f
function_decl|)
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLfloat
name|x
parameter_list|,
name|GLfloat
name|y
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|uniform2fv
function_decl|)
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|v
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|uniform2i
function_decl|)
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLint
name|x
parameter_list|,
name|GLint
name|y
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|uniform2iv
function_decl|)
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLint
modifier|*
name|v
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|uniform3f
function_decl|)
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLfloat
name|x
parameter_list|,
name|GLfloat
name|y
parameter_list|,
name|GLfloat
name|z
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|uniform3fv
function_decl|)
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|v
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|uniform3i
function_decl|)
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLint
name|x
parameter_list|,
name|GLint
name|y
parameter_list|,
name|GLint
name|z
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|uniform3iv
function_decl|)
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLint
modifier|*
name|v
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|uniform4f
function_decl|)
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLfloat
name|x
parameter_list|,
name|GLfloat
name|y
parameter_list|,
name|GLfloat
name|z
parameter_list|,
name|GLfloat
name|w
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|uniform4fv
function_decl|)
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|v
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|uniform4i
function_decl|)
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLint
name|x
parameter_list|,
name|GLint
name|y
parameter_list|,
name|GLint
name|z
parameter_list|,
name|GLint
name|w
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|uniform4iv
function_decl|)
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLint
modifier|*
name|v
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|uniformMatrix2fv
function_decl|)
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLboolean
name|transpose
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|value
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|uniformMatrix3fv
function_decl|)
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLboolean
name|transpose
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|value
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|uniformMatrix4fv
function_decl|)
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLboolean
name|transpose
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|value
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|useProgram
function_decl|)
parameter_list|(
name|GLuint
name|program
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|validateProgram
function_decl|)
parameter_list|(
name|GLuint
name|program
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|vertexAttrib1f
function_decl|)
parameter_list|(
name|GLuint
name|indx
parameter_list|,
name|GLfloat
name|x
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|vertexAttrib1fv
function_decl|)
parameter_list|(
name|GLuint
name|indx
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|values
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|vertexAttrib2f
function_decl|)
parameter_list|(
name|GLuint
name|indx
parameter_list|,
name|GLfloat
name|x
parameter_list|,
name|GLfloat
name|y
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|vertexAttrib2fv
function_decl|)
parameter_list|(
name|GLuint
name|indx
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|values
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|vertexAttrib3f
function_decl|)
parameter_list|(
name|GLuint
name|indx
parameter_list|,
name|GLfloat
name|x
parameter_list|,
name|GLfloat
name|y
parameter_list|,
name|GLfloat
name|z
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|vertexAttrib3fv
function_decl|)
parameter_list|(
name|GLuint
name|indx
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|values
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|vertexAttrib4f
function_decl|)
parameter_list|(
name|GLuint
name|indx
parameter_list|,
name|GLfloat
name|x
parameter_list|,
name|GLfloat
name|y
parameter_list|,
name|GLfloat
name|z
parameter_list|,
name|GLfloat
name|w
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|vertexAttrib4fv
function_decl|)
parameter_list|(
name|GLuint
name|indx
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|values
parameter_list|)
function_decl|;
name|void
function_decl|(
name|QGLF_APIENTRYP
name|vertexAttribPointer
function_decl|)
parameter_list|(
name|GLuint
name|indx
parameter_list|,
name|GLint
name|size
parameter_list|,
name|GLenum
name|type
parameter_list|,
name|GLboolean
name|normalized
parameter_list|,
name|GLsizei
name|stride
parameter_list|,
specifier|const
name|void
modifier|*
name|ptr
parameter_list|)
function_decl|;
endif|#
directive|endif
block|}
struct|;
end_struct
begin_expr_stmt
DECL|function|glActiveTexture
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glActiveTexture
argument_list|(
argument|GLenum texture
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_1
argument_list|)
operator|||
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glActiveTexture
argument_list|(
name|texture
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|activeTexture
argument_list|(
name|texture
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glAttachShader
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glAttachShader
argument_list|(
argument|GLuint program
argument_list|,
argument|GLuint shader
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glAttachShader
argument_list|(
name|program
argument_list|,
name|shader
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|attachShader
argument_list|(
name|program
argument_list|,
name|shader
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glBindAttribLocation
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glBindAttribLocation
argument_list|(
argument|GLuint program
argument_list|,
argument|GLuint index
argument_list|,
argument|const char* name
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glBindAttribLocation
argument_list|(
name|program
argument_list|,
name|index
argument_list|,
name|name
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|bindAttribLocation
argument_list|(
name|program
argument_list|,
name|index
argument_list|,
name|name
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glBindBuffer
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glBindBuffer
argument_list|(
argument|GLenum target
argument_list|,
argument|GLuint buffer
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_1
argument_list|)
operator|||
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glBindBuffer
argument_list|(
name|target
argument_list|,
name|buffer
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|bindBuffer
argument_list|(
name|target
argument_list|,
name|buffer
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glBindFramebuffer
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glBindFramebuffer
argument_list|(
argument|GLenum target
argument_list|,
argument|GLuint framebuffer
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glBindFramebuffer
argument_list|(
name|target
argument_list|,
name|framebuffer
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|bindFramebuffer
argument_list|(
name|target
argument_list|,
name|framebuffer
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glBindRenderbuffer
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glBindRenderbuffer
argument_list|(
argument|GLenum target
argument_list|,
argument|GLuint renderbuffer
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glBindRenderbuffer
argument_list|(
name|target
argument_list|,
name|renderbuffer
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|bindRenderbuffer
argument_list|(
name|target
argument_list|,
name|renderbuffer
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glBlendColor
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glBlendColor
argument_list|(
argument|GLclampf red
argument_list|,
argument|GLclampf green
argument_list|,
argument|GLclampf blue
argument_list|,
argument|GLclampf alpha
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glBlendColor
argument_list|(
name|red
argument_list|,
name|green
argument_list|,
name|blue
argument_list|,
name|alpha
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|blendColor
argument_list|(
name|red
argument_list|,
name|green
argument_list|,
name|blue
argument_list|,
name|alpha
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glBlendEquation
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glBlendEquation
argument_list|(
argument|GLenum mode
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glBlendEquation
argument_list|(
name|mode
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|blendEquation
argument_list|(
name|mode
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glBlendEquationSeparate
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glBlendEquationSeparate
argument_list|(
argument|GLenum modeRGB
argument_list|,
argument|GLenum modeAlpha
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glBlendEquationSeparate
argument_list|(
name|modeRGB
argument_list|,
name|modeAlpha
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|blendEquationSeparate
argument_list|(
name|modeRGB
argument_list|,
name|modeAlpha
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glBlendFuncSeparate
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glBlendFuncSeparate
argument_list|(
argument|GLenum srcRGB
argument_list|,
argument|GLenum dstRGB
argument_list|,
argument|GLenum srcAlpha
argument_list|,
argument|GLenum dstAlpha
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glBlendFuncSeparate
argument_list|(
name|srcRGB
argument_list|,
name|dstRGB
argument_list|,
name|srcAlpha
argument_list|,
name|dstAlpha
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|blendFuncSeparate
argument_list|(
name|srcRGB
argument_list|,
name|dstRGB
argument_list|,
name|srcAlpha
argument_list|,
name|dstAlpha
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glBufferData
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glBufferData
argument_list|(
argument|GLenum target
argument_list|,
argument|qgl_GLsizeiptr size
argument_list|,
argument|const void* data
argument_list|,
argument|GLenum usage
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_1
argument_list|)
operator|||
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glBufferData
argument_list|(
name|target
argument_list|,
name|size
argument_list|,
name|data
argument_list|,
name|usage
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|bufferData
argument_list|(
name|target
argument_list|,
name|size
argument_list|,
name|data
argument_list|,
name|usage
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glBufferSubData
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glBufferSubData
argument_list|(
argument|GLenum target
argument_list|,
argument|qgl_GLintptr offset
argument_list|,
argument|qgl_GLsizeiptr size
argument_list|,
argument|const void* data
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_1
argument_list|)
operator|||
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glBufferSubData
argument_list|(
name|target
argument_list|,
name|offset
argument_list|,
name|size
argument_list|,
name|data
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|bufferSubData
argument_list|(
name|target
argument_list|,
name|offset
argument_list|,
name|size
argument_list|,
name|data
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glCheckFramebufferStatus
specifier|inline
name|GLenum
name|QGLFunctions
operator|::
name|glCheckFramebufferStatus
argument_list|(
argument|GLenum target
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
return|return
operator|::
name|glCheckFramebufferStatus
argument_list|(
name|target
argument_list|)
return|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|d_ptr
operator|->
name|checkFramebufferStatus
argument_list|(
name|target
argument_list|)
return|;
end_return
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
unit|}  inline
DECL|function|glClearDepthf
name|void
name|QGLFunctions
operator|::
name|glClearDepthf
argument_list|(
argument|GLclampf depth
argument_list|)
block|{
ifndef|#
directive|ifndef
name|QT_OPENGL_ES
operator|::
name|glClearDepth
argument_list|(
name|depth
argument_list|)
block|;
else|#
directive|else
operator|::
name|glClearDepthf
argument_list|(
name|depth
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glCompileShader
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glCompileShader
argument_list|(
argument|GLuint shader
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glCompileShader
argument_list|(
name|shader
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|compileShader
argument_list|(
name|shader
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glCompressedTexImage2D
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glCompressedTexImage2D
argument_list|(
argument|GLenum target
argument_list|,
argument|GLint level
argument_list|,
argument|GLenum internalformat
argument_list|,
argument|GLsizei width
argument_list|,
argument|GLsizei height
argument_list|,
argument|GLint border
argument_list|,
argument|GLsizei imageSize
argument_list|,
argument|const void* data
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_1
argument_list|)
operator|||
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glCompressedTexImage2D
argument_list|(
name|target
argument_list|,
name|level
argument_list|,
name|internalformat
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|border
argument_list|,
name|imageSize
argument_list|,
name|data
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|compressedTexImage2D
argument_list|(
name|target
argument_list|,
name|level
argument_list|,
name|internalformat
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|border
argument_list|,
name|imageSize
argument_list|,
name|data
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glCompressedTexSubImage2D
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glCompressedTexSubImage2D
argument_list|(
argument|GLenum target
argument_list|,
argument|GLint level
argument_list|,
argument|GLint xoffset
argument_list|,
argument|GLint yoffset
argument_list|,
argument|GLsizei width
argument_list|,
argument|GLsizei height
argument_list|,
argument|GLenum format
argument_list|,
argument|GLsizei imageSize
argument_list|,
argument|const void* data
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_1
argument_list|)
operator|||
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glCompressedTexSubImage2D
argument_list|(
name|target
argument_list|,
name|level
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|format
argument_list|,
name|imageSize
argument_list|,
name|data
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|compressedTexSubImage2D
argument_list|(
name|target
argument_list|,
name|level
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|format
argument_list|,
name|imageSize
argument_list|,
name|data
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glCreateProgram
specifier|inline
name|GLuint
name|QGLFunctions
operator|::
name|glCreateProgram
argument_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
return|return
operator|::
name|glCreateProgram
argument_list|()
return|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|d_ptr
operator|->
name|createProgram
argument_list|()
return|;
end_return
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
unit|}  inline
DECL|function|glCreateShader
name|GLuint
name|QGLFunctions
operator|::
name|glCreateShader
argument_list|(
argument|GLenum type
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
return|return
operator|::
name|glCreateShader
argument_list|(
name|type
argument_list|)
return|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|d_ptr
operator|->
name|createShader
argument_list|(
name|type
argument_list|)
return|;
end_return
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
unit|}  inline
DECL|function|glDeleteBuffers
name|void
name|QGLFunctions
operator|::
name|glDeleteBuffers
argument_list|(
argument|GLsizei n
argument_list|,
argument|const GLuint* buffers
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_1
argument_list|)
operator|||
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glDeleteBuffers
argument_list|(
name|n
argument_list|,
name|buffers
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|deleteBuffers
argument_list|(
name|n
argument_list|,
name|buffers
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glDeleteFramebuffers
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glDeleteFramebuffers
argument_list|(
argument|GLsizei n
argument_list|,
argument|const GLuint* framebuffers
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glDeleteFramebuffers
argument_list|(
name|n
argument_list|,
name|framebuffers
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|deleteFramebuffers
argument_list|(
name|n
argument_list|,
name|framebuffers
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glDeleteProgram
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glDeleteProgram
argument_list|(
argument|GLuint program
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glDeleteProgram
argument_list|(
name|program
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|deleteProgram
argument_list|(
name|program
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glDeleteRenderbuffers
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glDeleteRenderbuffers
argument_list|(
argument|GLsizei n
argument_list|,
argument|const GLuint* renderbuffers
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glDeleteRenderbuffers
argument_list|(
name|n
argument_list|,
name|renderbuffers
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|deleteRenderbuffers
argument_list|(
name|n
argument_list|,
name|renderbuffers
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glDeleteShader
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glDeleteShader
argument_list|(
argument|GLuint shader
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glDeleteShader
argument_list|(
name|shader
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|deleteShader
argument_list|(
name|shader
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glDepthRangef
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glDepthRangef
argument_list|(
argument|GLclampf zNear
argument_list|,
argument|GLclampf zFar
argument_list|)
block|{
ifndef|#
directive|ifndef
name|QT_OPENGL_ES
operator|::
name|glDepthRange
argument_list|(
name|zNear
argument_list|,
name|zFar
argument_list|)
block|;
else|#
directive|else
operator|::
name|glDepthRangef
argument_list|(
name|zNear
argument_list|,
name|zFar
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glDetachShader
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glDetachShader
argument_list|(
argument|GLuint program
argument_list|,
argument|GLuint shader
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glDetachShader
argument_list|(
name|program
argument_list|,
name|shader
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|detachShader
argument_list|(
name|program
argument_list|,
name|shader
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glDisableVertexAttribArray
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glDisableVertexAttribArray
argument_list|(
argument|GLuint index
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glDisableVertexAttribArray
argument_list|(
name|index
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|disableVertexAttribArray
argument_list|(
name|index
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glEnableVertexAttribArray
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glEnableVertexAttribArray
argument_list|(
argument|GLuint index
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glEnableVertexAttribArray
argument_list|(
name|index
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|enableVertexAttribArray
argument_list|(
name|index
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glFramebufferRenderbuffer
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glFramebufferRenderbuffer
argument_list|(
argument|GLenum target
argument_list|,
argument|GLenum attachment
argument_list|,
argument|GLenum renderbuffertarget
argument_list|,
argument|GLuint renderbuffer
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glFramebufferRenderbuffer
argument_list|(
name|target
argument_list|,
name|attachment
argument_list|,
name|renderbuffertarget
argument_list|,
name|renderbuffer
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|framebufferRenderbuffer
argument_list|(
name|target
argument_list|,
name|attachment
argument_list|,
name|renderbuffertarget
argument_list|,
name|renderbuffer
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glFramebufferTexture2D
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glFramebufferTexture2D
argument_list|(
argument|GLenum target
argument_list|,
argument|GLenum attachment
argument_list|,
argument|GLenum textarget
argument_list|,
argument|GLuint texture
argument_list|,
argument|GLint level
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glFramebufferTexture2D
argument_list|(
name|target
argument_list|,
name|attachment
argument_list|,
name|textarget
argument_list|,
name|texture
argument_list|,
name|level
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|framebufferTexture2D
argument_list|(
name|target
argument_list|,
name|attachment
argument_list|,
name|textarget
argument_list|,
name|texture
argument_list|,
name|level
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glGenBuffers
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glGenBuffers
argument_list|(
argument|GLsizei n
argument_list|,
argument|GLuint* buffers
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_1
argument_list|)
operator|||
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glGenBuffers
argument_list|(
name|n
argument_list|,
name|buffers
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|genBuffers
argument_list|(
name|n
argument_list|,
name|buffers
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glGenerateMipmap
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glGenerateMipmap
argument_list|(
argument|GLenum target
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glGenerateMipmap
argument_list|(
name|target
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|generateMipmap
argument_list|(
name|target
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glGenFramebuffers
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glGenFramebuffers
argument_list|(
argument|GLsizei n
argument_list|,
argument|GLuint* framebuffers
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glGenFramebuffers
argument_list|(
name|n
argument_list|,
name|framebuffers
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|genFramebuffers
argument_list|(
name|n
argument_list|,
name|framebuffers
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glGenRenderbuffers
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glGenRenderbuffers
argument_list|(
argument|GLsizei n
argument_list|,
argument|GLuint* renderbuffers
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glGenRenderbuffers
argument_list|(
name|n
argument_list|,
name|renderbuffers
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|genRenderbuffers
argument_list|(
name|n
argument_list|,
name|renderbuffers
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glGetActiveAttrib
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glGetActiveAttrib
argument_list|(
argument|GLuint program
argument_list|,
argument|GLuint index
argument_list|,
argument|GLsizei bufsize
argument_list|,
argument|GLsizei* length
argument_list|,
argument|GLint* size
argument_list|,
argument|GLenum* type
argument_list|,
argument|char* name
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glGetActiveAttrib
argument_list|(
name|program
argument_list|,
name|index
argument_list|,
name|bufsize
argument_list|,
name|length
argument_list|,
name|size
argument_list|,
name|type
argument_list|,
name|name
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|getActiveAttrib
argument_list|(
name|program
argument_list|,
name|index
argument_list|,
name|bufsize
argument_list|,
name|length
argument_list|,
name|size
argument_list|,
name|type
argument_list|,
name|name
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glGetActiveUniform
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glGetActiveUniform
argument_list|(
argument|GLuint program
argument_list|,
argument|GLuint index
argument_list|,
argument|GLsizei bufsize
argument_list|,
argument|GLsizei* length
argument_list|,
argument|GLint* size
argument_list|,
argument|GLenum* type
argument_list|,
argument|char* name
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glGetActiveUniform
argument_list|(
name|program
argument_list|,
name|index
argument_list|,
name|bufsize
argument_list|,
name|length
argument_list|,
name|size
argument_list|,
name|type
argument_list|,
name|name
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|getActiveUniform
argument_list|(
name|program
argument_list|,
name|index
argument_list|,
name|bufsize
argument_list|,
name|length
argument_list|,
name|size
argument_list|,
name|type
argument_list|,
name|name
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glGetAttachedShaders
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glGetAttachedShaders
argument_list|(
argument|GLuint program
argument_list|,
argument|GLsizei maxcount
argument_list|,
argument|GLsizei* count
argument_list|,
argument|GLuint* shaders
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glGetAttachedShaders
argument_list|(
name|program
argument_list|,
name|maxcount
argument_list|,
name|count
argument_list|,
name|shaders
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|getAttachedShaders
argument_list|(
name|program
argument_list|,
name|maxcount
argument_list|,
name|count
argument_list|,
name|shaders
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glGetAttribLocation
specifier|inline
name|int
name|QGLFunctions
operator|::
name|glGetAttribLocation
argument_list|(
argument|GLuint program
argument_list|,
argument|const char* name
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
return|return
operator|::
name|glGetAttribLocation
argument_list|(
name|program
argument_list|,
name|name
argument_list|)
return|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|d_ptr
operator|->
name|getAttribLocation
argument_list|(
name|program
argument_list|,
name|name
argument_list|)
return|;
end_return
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
unit|}  inline
DECL|function|glGetBufferParameteriv
name|void
name|QGLFunctions
operator|::
name|glGetBufferParameteriv
argument_list|(
argument|GLenum target
argument_list|,
argument|GLenum pname
argument_list|,
argument|GLint* params
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glGetBufferParameteriv
argument_list|(
name|target
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|getBufferParameteriv
argument_list|(
name|target
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glGetFramebufferAttachmentParameteriv
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glGetFramebufferAttachmentParameteriv
argument_list|(
argument|GLenum target
argument_list|,
argument|GLenum attachment
argument_list|,
argument|GLenum pname
argument_list|,
argument|GLint* params
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glGetFramebufferAttachmentParameteriv
argument_list|(
name|target
argument_list|,
name|attachment
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|getFramebufferAttachmentParameteriv
argument_list|(
name|target
argument_list|,
name|attachment
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glGetProgramiv
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glGetProgramiv
argument_list|(
argument|GLuint program
argument_list|,
argument|GLenum pname
argument_list|,
argument|GLint* params
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glGetProgramiv
argument_list|(
name|program
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|getProgramiv
argument_list|(
name|program
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glGetProgramInfoLog
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glGetProgramInfoLog
argument_list|(
argument|GLuint program
argument_list|,
argument|GLsizei bufsize
argument_list|,
argument|GLsizei* length
argument_list|,
argument|char* infolog
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glGetProgramInfoLog
argument_list|(
name|program
argument_list|,
name|bufsize
argument_list|,
name|length
argument_list|,
name|infolog
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|getProgramInfoLog
argument_list|(
name|program
argument_list|,
name|bufsize
argument_list|,
name|length
argument_list|,
name|infolog
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glGetRenderbufferParameteriv
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glGetRenderbufferParameteriv
argument_list|(
argument|GLenum target
argument_list|,
argument|GLenum pname
argument_list|,
argument|GLint* params
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glGetRenderbufferParameteriv
argument_list|(
name|target
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|getRenderbufferParameteriv
argument_list|(
name|target
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glGetShaderiv
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glGetShaderiv
argument_list|(
argument|GLuint shader
argument_list|,
argument|GLenum pname
argument_list|,
argument|GLint* params
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glGetShaderiv
argument_list|(
name|shader
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|getShaderiv
argument_list|(
name|shader
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glGetShaderInfoLog
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glGetShaderInfoLog
argument_list|(
argument|GLuint shader
argument_list|,
argument|GLsizei bufsize
argument_list|,
argument|GLsizei* length
argument_list|,
argument|char* infolog
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glGetShaderInfoLog
argument_list|(
name|shader
argument_list|,
name|bufsize
argument_list|,
name|length
argument_list|,
name|infolog
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|getShaderInfoLog
argument_list|(
name|shader
argument_list|,
name|bufsize
argument_list|,
name|length
argument_list|,
name|infolog
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glGetShaderPrecisionFormat
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glGetShaderPrecisionFormat
argument_list|(
argument|GLenum shadertype
argument_list|,
argument|GLenum precisiontype
argument_list|,
argument|GLint* range
argument_list|,
argument|GLint* precision
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glGetShaderPrecisionFormat
argument_list|(
name|shadertype
argument_list|,
name|precisiontype
argument_list|,
name|range
argument_list|,
name|precision
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|getShaderPrecisionFormat
argument_list|(
name|shadertype
argument_list|,
name|precisiontype
argument_list|,
name|range
argument_list|,
name|precision
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glGetShaderSource
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glGetShaderSource
argument_list|(
argument|GLuint shader
argument_list|,
argument|GLsizei bufsize
argument_list|,
argument|GLsizei* length
argument_list|,
argument|char* source
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glGetShaderSource
argument_list|(
name|shader
argument_list|,
name|bufsize
argument_list|,
name|length
argument_list|,
name|source
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|getShaderSource
argument_list|(
name|shader
argument_list|,
name|bufsize
argument_list|,
name|length
argument_list|,
name|source
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glGetUniformfv
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glGetUniformfv
argument_list|(
argument|GLuint program
argument_list|,
argument|GLint location
argument_list|,
argument|GLfloat* params
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glGetUniformfv
argument_list|(
name|program
argument_list|,
name|location
argument_list|,
name|params
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|getUniformfv
argument_list|(
name|program
argument_list|,
name|location
argument_list|,
name|params
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glGetUniformiv
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glGetUniformiv
argument_list|(
argument|GLuint program
argument_list|,
argument|GLint location
argument_list|,
argument|GLint* params
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glGetUniformiv
argument_list|(
name|program
argument_list|,
name|location
argument_list|,
name|params
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|getUniformiv
argument_list|(
name|program
argument_list|,
name|location
argument_list|,
name|params
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glGetUniformLocation
specifier|inline
name|int
name|QGLFunctions
operator|::
name|glGetUniformLocation
argument_list|(
argument|GLuint program
argument_list|,
argument|const char* name
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
return|return
operator|::
name|glGetUniformLocation
argument_list|(
name|program
argument_list|,
name|name
argument_list|)
return|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|d_ptr
operator|->
name|getUniformLocation
argument_list|(
name|program
argument_list|,
name|name
argument_list|)
return|;
end_return
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
unit|}  inline
DECL|function|glGetVertexAttribfv
name|void
name|QGLFunctions
operator|::
name|glGetVertexAttribfv
argument_list|(
argument|GLuint index
argument_list|,
argument|GLenum pname
argument_list|,
argument|GLfloat* params
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glGetVertexAttribfv
argument_list|(
name|index
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|getVertexAttribfv
argument_list|(
name|index
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glGetVertexAttribiv
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glGetVertexAttribiv
argument_list|(
argument|GLuint index
argument_list|,
argument|GLenum pname
argument_list|,
argument|GLint* params
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glGetVertexAttribiv
argument_list|(
name|index
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|getVertexAttribiv
argument_list|(
name|index
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glGetVertexAttribPointerv
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glGetVertexAttribPointerv
argument_list|(
argument|GLuint index
argument_list|,
argument|GLenum pname
argument_list|,
argument|void** pointer
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glGetVertexAttribPointerv
argument_list|(
name|index
argument_list|,
name|pname
argument_list|,
name|pointer
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|getVertexAttribPointerv
argument_list|(
name|index
argument_list|,
name|pname
argument_list|,
name|pointer
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glIsBuffer
specifier|inline
name|GLboolean
name|QGLFunctions
operator|::
name|glIsBuffer
argument_list|(
argument|GLuint buffer
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_1
argument_list|)
operator|||
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
return|return
operator|::
name|glIsBuffer
argument_list|(
name|buffer
argument_list|)
return|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|d_ptr
operator|->
name|isBuffer
argument_list|(
name|buffer
argument_list|)
return|;
end_return
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
unit|}  inline
DECL|function|glIsFramebuffer
name|GLboolean
name|QGLFunctions
operator|::
name|glIsFramebuffer
argument_list|(
argument|GLuint framebuffer
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
return|return
operator|::
name|glIsFramebuffer
argument_list|(
name|framebuffer
argument_list|)
return|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|d_ptr
operator|->
name|isFramebuffer
argument_list|(
name|framebuffer
argument_list|)
return|;
end_return
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
unit|}  inline
DECL|function|glIsProgram
name|GLboolean
name|QGLFunctions
operator|::
name|glIsProgram
argument_list|(
argument|GLuint program
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
return|return
operator|::
name|glIsProgram
argument_list|(
name|program
argument_list|)
return|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|d_ptr
operator|->
name|isProgram
argument_list|(
name|program
argument_list|)
return|;
end_return
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
unit|}  inline
DECL|function|glIsRenderbuffer
name|GLboolean
name|QGLFunctions
operator|::
name|glIsRenderbuffer
argument_list|(
argument|GLuint renderbuffer
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
return|return
operator|::
name|glIsRenderbuffer
argument_list|(
name|renderbuffer
argument_list|)
return|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|d_ptr
operator|->
name|isRenderbuffer
argument_list|(
name|renderbuffer
argument_list|)
return|;
end_return
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
unit|}  inline
DECL|function|glIsShader
name|GLboolean
name|QGLFunctions
operator|::
name|glIsShader
argument_list|(
argument|GLuint shader
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
return|return
operator|::
name|glIsShader
argument_list|(
name|shader
argument_list|)
return|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|d_ptr
operator|->
name|isShader
argument_list|(
name|shader
argument_list|)
return|;
end_return
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
unit|}  inline
DECL|function|glLinkProgram
name|void
name|QGLFunctions
operator|::
name|glLinkProgram
argument_list|(
argument|GLuint program
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glLinkProgram
argument_list|(
name|program
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|linkProgram
argument_list|(
name|program
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glReleaseShaderCompiler
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glReleaseShaderCompiler
argument_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glReleaseShaderCompiler
argument_list|()
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|releaseShaderCompiler
argument_list|()
block|;
endif|#
directive|endif
block|}
DECL|function|glRenderbufferStorage
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glRenderbufferStorage
argument_list|(
argument|GLenum target
argument_list|,
argument|GLenum internalformat
argument_list|,
argument|GLsizei width
argument_list|,
argument|GLsizei height
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glRenderbufferStorage
argument_list|(
name|target
argument_list|,
name|internalformat
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|renderbufferStorage
argument_list|(
name|target
argument_list|,
name|internalformat
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glSampleCoverage
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glSampleCoverage
argument_list|(
argument|GLclampf value
argument_list|,
argument|GLboolean invert
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_1
argument_list|)
operator|||
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glSampleCoverage
argument_list|(
name|value
argument_list|,
name|invert
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|sampleCoverage
argument_list|(
name|value
argument_list|,
name|invert
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glShaderBinary
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glShaderBinary
argument_list|(
argument|GLint n
argument_list|,
argument|const GLuint* shaders
argument_list|,
argument|GLenum binaryformat
argument_list|,
argument|const void* binary
argument_list|,
argument|GLint length
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glShaderBinary
argument_list|(
name|n
argument_list|,
name|shaders
argument_list|,
name|binaryformat
argument_list|,
name|binary
argument_list|,
name|length
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|shaderBinary
argument_list|(
name|n
argument_list|,
name|shaders
argument_list|,
name|binaryformat
argument_list|,
name|binary
argument_list|,
name|length
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glShaderSource
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glShaderSource
argument_list|(
argument|GLuint shader
argument_list|,
argument|GLsizei count
argument_list|,
argument|const char** string
argument_list|,
argument|const GLint* length
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glShaderSource
argument_list|(
name|shader
argument_list|,
name|count
argument_list|,
name|string
argument_list|,
name|length
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|shaderSource
argument_list|(
name|shader
argument_list|,
name|count
argument_list|,
name|string
argument_list|,
name|length
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glStencilFuncSeparate
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glStencilFuncSeparate
argument_list|(
argument|GLenum face
argument_list|,
argument|GLenum func
argument_list|,
argument|GLint ref
argument_list|,
argument|GLuint mask
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glStencilFuncSeparate
argument_list|(
name|face
argument_list|,
name|func
argument_list|,
name|ref
argument_list|,
name|mask
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|stencilFuncSeparate
argument_list|(
name|face
argument_list|,
name|func
argument_list|,
name|ref
argument_list|,
name|mask
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glStencilMaskSeparate
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glStencilMaskSeparate
argument_list|(
argument|GLenum face
argument_list|,
argument|GLuint mask
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glStencilMaskSeparate
argument_list|(
name|face
argument_list|,
name|mask
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|stencilMaskSeparate
argument_list|(
name|face
argument_list|,
name|mask
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glStencilOpSeparate
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glStencilOpSeparate
argument_list|(
argument|GLenum face
argument_list|,
argument|GLenum fail
argument_list|,
argument|GLenum zfail
argument_list|,
argument|GLenum zpass
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glStencilOpSeparate
argument_list|(
name|face
argument_list|,
name|fail
argument_list|,
name|zfail
argument_list|,
name|zpass
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|stencilOpSeparate
argument_list|(
name|face
argument_list|,
name|fail
argument_list|,
name|zfail
argument_list|,
name|zpass
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glUniform1f
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glUniform1f
argument_list|(
argument|GLint location
argument_list|,
argument|GLfloat x
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glUniform1f
argument_list|(
name|location
argument_list|,
name|x
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|uniform1f
argument_list|(
name|location
argument_list|,
name|x
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glUniform1fv
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glUniform1fv
argument_list|(
argument|GLint location
argument_list|,
argument|GLsizei count
argument_list|,
argument|const GLfloat* v
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glUniform1fv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|v
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|uniform1fv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|v
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glUniform1i
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glUniform1i
argument_list|(
argument|GLint location
argument_list|,
argument|GLint x
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glUniform1i
argument_list|(
name|location
argument_list|,
name|x
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|uniform1i
argument_list|(
name|location
argument_list|,
name|x
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glUniform1iv
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glUniform1iv
argument_list|(
argument|GLint location
argument_list|,
argument|GLsizei count
argument_list|,
argument|const GLint* v
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glUniform1iv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|v
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|uniform1iv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|v
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glUniform2f
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glUniform2f
argument_list|(
argument|GLint location
argument_list|,
argument|GLfloat x
argument_list|,
argument|GLfloat y
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glUniform2f
argument_list|(
name|location
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|uniform2f
argument_list|(
name|location
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glUniform2fv
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glUniform2fv
argument_list|(
argument|GLint location
argument_list|,
argument|GLsizei count
argument_list|,
argument|const GLfloat* v
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glUniform2fv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|v
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|uniform2fv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|v
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glUniform2i
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glUniform2i
argument_list|(
argument|GLint location
argument_list|,
argument|GLint x
argument_list|,
argument|GLint y
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glUniform2i
argument_list|(
name|location
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|uniform2i
argument_list|(
name|location
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glUniform2iv
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glUniform2iv
argument_list|(
argument|GLint location
argument_list|,
argument|GLsizei count
argument_list|,
argument|const GLint* v
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glUniform2iv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|v
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|uniform2iv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|v
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glUniform3f
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glUniform3f
argument_list|(
argument|GLint location
argument_list|,
argument|GLfloat x
argument_list|,
argument|GLfloat y
argument_list|,
argument|GLfloat z
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glUniform3f
argument_list|(
name|location
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|uniform3f
argument_list|(
name|location
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glUniform3fv
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glUniform3fv
argument_list|(
argument|GLint location
argument_list|,
argument|GLsizei count
argument_list|,
argument|const GLfloat* v
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glUniform3fv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|v
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|uniform3fv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|v
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glUniform3i
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glUniform3i
argument_list|(
argument|GLint location
argument_list|,
argument|GLint x
argument_list|,
argument|GLint y
argument_list|,
argument|GLint z
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glUniform3i
argument_list|(
name|location
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|uniform3i
argument_list|(
name|location
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glUniform3iv
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glUniform3iv
argument_list|(
argument|GLint location
argument_list|,
argument|GLsizei count
argument_list|,
argument|const GLint* v
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glUniform3iv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|v
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|uniform3iv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|v
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glUniform4f
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glUniform4f
argument_list|(
argument|GLint location
argument_list|,
argument|GLfloat x
argument_list|,
argument|GLfloat y
argument_list|,
argument|GLfloat z
argument_list|,
argument|GLfloat w
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glUniform4f
argument_list|(
name|location
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|w
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|uniform4f
argument_list|(
name|location
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|w
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glUniform4fv
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glUniform4fv
argument_list|(
argument|GLint location
argument_list|,
argument|GLsizei count
argument_list|,
argument|const GLfloat* v
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glUniform4fv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|v
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|uniform4fv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|v
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glUniform4i
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glUniform4i
argument_list|(
argument|GLint location
argument_list|,
argument|GLint x
argument_list|,
argument|GLint y
argument_list|,
argument|GLint z
argument_list|,
argument|GLint w
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glUniform4i
argument_list|(
name|location
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|w
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|uniform4i
argument_list|(
name|location
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|w
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glUniform4iv
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glUniform4iv
argument_list|(
argument|GLint location
argument_list|,
argument|GLsizei count
argument_list|,
argument|const GLint* v
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glUniform4iv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|v
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|uniform4iv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|v
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glUniformMatrix2fv
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glUniformMatrix2fv
argument_list|(
argument|GLint location
argument_list|,
argument|GLsizei count
argument_list|,
argument|GLboolean transpose
argument_list|,
argument|const GLfloat* value
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glUniformMatrix2fv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|,
name|value
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|uniformMatrix2fv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|,
name|value
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glUniformMatrix3fv
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glUniformMatrix3fv
argument_list|(
argument|GLint location
argument_list|,
argument|GLsizei count
argument_list|,
argument|GLboolean transpose
argument_list|,
argument|const GLfloat* value
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glUniformMatrix3fv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|,
name|value
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|uniformMatrix3fv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|,
name|value
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glUniformMatrix4fv
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glUniformMatrix4fv
argument_list|(
argument|GLint location
argument_list|,
argument|GLsizei count
argument_list|,
argument|GLboolean transpose
argument_list|,
argument|const GLfloat* value
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glUniformMatrix4fv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|,
name|value
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|uniformMatrix4fv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|,
name|value
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glUseProgram
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glUseProgram
argument_list|(
argument|GLuint program
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glUseProgram
argument_list|(
name|program
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|useProgram
argument_list|(
name|program
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glValidateProgram
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glValidateProgram
argument_list|(
argument|GLuint program
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glValidateProgram
argument_list|(
name|program
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|validateProgram
argument_list|(
name|program
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glVertexAttrib1f
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glVertexAttrib1f
argument_list|(
argument|GLuint indx
argument_list|,
argument|GLfloat x
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glVertexAttrib1f
argument_list|(
name|indx
argument_list|,
name|x
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|vertexAttrib1f
argument_list|(
name|indx
argument_list|,
name|x
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glVertexAttrib1fv
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glVertexAttrib1fv
argument_list|(
argument|GLuint indx
argument_list|,
argument|const GLfloat* values
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glVertexAttrib1fv
argument_list|(
name|indx
argument_list|,
name|values
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|vertexAttrib1fv
argument_list|(
name|indx
argument_list|,
name|values
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glVertexAttrib2f
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glVertexAttrib2f
argument_list|(
argument|GLuint indx
argument_list|,
argument|GLfloat x
argument_list|,
argument|GLfloat y
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glVertexAttrib2f
argument_list|(
name|indx
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|vertexAttrib2f
argument_list|(
name|indx
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glVertexAttrib2fv
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glVertexAttrib2fv
argument_list|(
argument|GLuint indx
argument_list|,
argument|const GLfloat* values
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glVertexAttrib2fv
argument_list|(
name|indx
argument_list|,
name|values
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|vertexAttrib2fv
argument_list|(
name|indx
argument_list|,
name|values
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glVertexAttrib3f
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glVertexAttrib3f
argument_list|(
argument|GLuint indx
argument_list|,
argument|GLfloat x
argument_list|,
argument|GLfloat y
argument_list|,
argument|GLfloat z
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glVertexAttrib3f
argument_list|(
name|indx
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|vertexAttrib3f
argument_list|(
name|indx
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glVertexAttrib3fv
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glVertexAttrib3fv
argument_list|(
argument|GLuint indx
argument_list|,
argument|const GLfloat* values
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glVertexAttrib3fv
argument_list|(
name|indx
argument_list|,
name|values
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|vertexAttrib3fv
argument_list|(
name|indx
argument_list|,
name|values
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glVertexAttrib4f
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glVertexAttrib4f
argument_list|(
argument|GLuint indx
argument_list|,
argument|GLfloat x
argument_list|,
argument|GLfloat y
argument_list|,
argument|GLfloat z
argument_list|,
argument|GLfloat w
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glVertexAttrib4f
argument_list|(
name|indx
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|w
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|vertexAttrib4f
argument_list|(
name|indx
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|w
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glVertexAttrib4fv
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glVertexAttrib4fv
argument_list|(
argument|GLuint indx
argument_list|,
argument|const GLfloat* values
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glVertexAttrib4fv
argument_list|(
name|indx
argument_list|,
name|values
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|vertexAttrib4fv
argument_list|(
name|indx
argument_list|,
name|values
argument_list|)
block|;
endif|#
directive|endif
block|}
DECL|function|glVertexAttribPointer
specifier|inline
name|void
name|QGLFunctions
operator|::
name|glVertexAttribPointer
argument_list|(
argument|GLuint indx
argument_list|,
argument|GLint size
argument_list|,
argument|GLenum type
argument_list|,
argument|GLboolean normalized
argument_list|,
argument|GLsizei stride
argument_list|,
argument|const void* ptr
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|::
name|glVertexAttribPointer
argument_list|(
name|indx
argument_list|,
name|size
argument_list|,
name|type
argument_list|,
name|normalized
argument_list|,
name|stride
argument_list|,
name|ptr
argument_list|)
block|;
else|#
directive|else
name|Q_ASSERT
argument_list|(
name|QGLFunctions
operator|::
name|isInitialized
argument_list|(
name|d_ptr
argument_list|)
argument_list|)
block|;
name|d_ptr
operator|->
name|vertexAttribPointer
argument_list|(
name|indx
argument_list|,
name|size
argument_list|,
name|type
argument_list|,
name|normalized
argument_list|,
name|stride
argument_list|,
name|ptr
argument_list|)
block|;
endif|#
directive|endif
block|}
ifndef|#
directive|ifndef
name|GL_ACTIVE_ATTRIBUTE_MAX_LENGTH
DECL|macro|GL_ACTIVE_ATTRIBUTE_MAX_LENGTH
define|#
directive|define
name|GL_ACTIVE_ATTRIBUTE_MAX_LENGTH
value|0x8B8A
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_ACTIVE_ATTRIBUTES
DECL|macro|GL_ACTIVE_ATTRIBUTES
define|#
directive|define
name|GL_ACTIVE_ATTRIBUTES
value|0x8B89
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_ACTIVE_TEXTURE
DECL|macro|GL_ACTIVE_TEXTURE
define|#
directive|define
name|GL_ACTIVE_TEXTURE
value|0x84E0
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_ACTIVE_UNIFORM_MAX_LENGTH
DECL|macro|GL_ACTIVE_UNIFORM_MAX_LENGTH
define|#
directive|define
name|GL_ACTIVE_UNIFORM_MAX_LENGTH
value|0x8B87
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_ACTIVE_UNIFORMS
DECL|macro|GL_ACTIVE_UNIFORMS
define|#
directive|define
name|GL_ACTIVE_UNIFORMS
value|0x8B86
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_ALIASED_LINE_WIDTH_RANGE
DECL|macro|GL_ALIASED_LINE_WIDTH_RANGE
define|#
directive|define
name|GL_ALIASED_LINE_WIDTH_RANGE
value|0x846E
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_ALIASED_POINT_SIZE_RANGE
DECL|macro|GL_ALIASED_POINT_SIZE_RANGE
define|#
directive|define
name|GL_ALIASED_POINT_SIZE_RANGE
value|0x846D
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_ALPHA
DECL|macro|GL_ALPHA
define|#
directive|define
name|GL_ALPHA
value|0x1906
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_ALPHA_BITS
DECL|macro|GL_ALPHA_BITS
define|#
directive|define
name|GL_ALPHA_BITS
value|0x0D55
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_ALWAYS
DECL|macro|GL_ALWAYS
define|#
directive|define
name|GL_ALWAYS
value|0x0207
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_ARRAY_BUFFER
DECL|macro|GL_ARRAY_BUFFER
define|#
directive|define
name|GL_ARRAY_BUFFER
value|0x8892
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_ARRAY_BUFFER_BINDING
DECL|macro|GL_ARRAY_BUFFER_BINDING
define|#
directive|define
name|GL_ARRAY_BUFFER_BINDING
value|0x8894
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_ATTACHED_SHADERS
DECL|macro|GL_ATTACHED_SHADERS
define|#
directive|define
name|GL_ATTACHED_SHADERS
value|0x8B85
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_BACK
DECL|macro|GL_BACK
define|#
directive|define
name|GL_BACK
value|0x0405
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_BLEND
DECL|macro|GL_BLEND
define|#
directive|define
name|GL_BLEND
value|0x0BE2
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_BLEND_COLOR
DECL|macro|GL_BLEND_COLOR
define|#
directive|define
name|GL_BLEND_COLOR
value|0x8005
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_BLEND_DST_ALPHA
DECL|macro|GL_BLEND_DST_ALPHA
define|#
directive|define
name|GL_BLEND_DST_ALPHA
value|0x80CA
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_BLEND_DST_RGB
DECL|macro|GL_BLEND_DST_RGB
define|#
directive|define
name|GL_BLEND_DST_RGB
value|0x80C8
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_BLEND_EQUATION
DECL|macro|GL_BLEND_EQUATION
define|#
directive|define
name|GL_BLEND_EQUATION
value|0x8009
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_BLEND_EQUATION_ALPHA
DECL|macro|GL_BLEND_EQUATION_ALPHA
define|#
directive|define
name|GL_BLEND_EQUATION_ALPHA
value|0x883D
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_BLEND_EQUATION_RGB
DECL|macro|GL_BLEND_EQUATION_RGB
define|#
directive|define
name|GL_BLEND_EQUATION_RGB
value|0x8009
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_BLEND_SRC_ALPHA
DECL|macro|GL_BLEND_SRC_ALPHA
define|#
directive|define
name|GL_BLEND_SRC_ALPHA
value|0x80CB
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_BLEND_SRC_RGB
DECL|macro|GL_BLEND_SRC_RGB
define|#
directive|define
name|GL_BLEND_SRC_RGB
value|0x80C9
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_BLUE_BITS
DECL|macro|GL_BLUE_BITS
define|#
directive|define
name|GL_BLUE_BITS
value|0x0D54
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_BOOL
DECL|macro|GL_BOOL
define|#
directive|define
name|GL_BOOL
value|0x8B56
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_BOOL_VEC2
DECL|macro|GL_BOOL_VEC2
define|#
directive|define
name|GL_BOOL_VEC2
value|0x8B57
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_BOOL_VEC3
DECL|macro|GL_BOOL_VEC3
define|#
directive|define
name|GL_BOOL_VEC3
value|0x8B58
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_BOOL_VEC4
DECL|macro|GL_BOOL_VEC4
define|#
directive|define
name|GL_BOOL_VEC4
value|0x8B59
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_BUFFER_SIZE
DECL|macro|GL_BUFFER_SIZE
define|#
directive|define
name|GL_BUFFER_SIZE
value|0x8764
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_BUFFER_USAGE
DECL|macro|GL_BUFFER_USAGE
define|#
directive|define
name|GL_BUFFER_USAGE
value|0x8765
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_BYTE
DECL|macro|GL_BYTE
define|#
directive|define
name|GL_BYTE
value|0x1400
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_CCW
DECL|macro|GL_CCW
define|#
directive|define
name|GL_CCW
value|0x0901
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_CLAMP_TO_EDGE
DECL|macro|GL_CLAMP_TO_EDGE
define|#
directive|define
name|GL_CLAMP_TO_EDGE
value|0x812F
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_COLOR_ATTACHMENT0
DECL|macro|GL_COLOR_ATTACHMENT0
define|#
directive|define
name|GL_COLOR_ATTACHMENT0
value|0x8CE0
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_COLOR_BUFFER_BIT
DECL|macro|GL_COLOR_BUFFER_BIT
define|#
directive|define
name|GL_COLOR_BUFFER_BIT
value|0x00004000
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_COLOR_CLEAR_VALUE
DECL|macro|GL_COLOR_CLEAR_VALUE
define|#
directive|define
name|GL_COLOR_CLEAR_VALUE
value|0x0C22
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_COLOR_WRITEMASK
DECL|macro|GL_COLOR_WRITEMASK
define|#
directive|define
name|GL_COLOR_WRITEMASK
value|0x0C23
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_COMPILE_STATUS
DECL|macro|GL_COMPILE_STATUS
define|#
directive|define
name|GL_COMPILE_STATUS
value|0x8B81
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_COMPRESSED_TEXTURE_FORMATS
DECL|macro|GL_COMPRESSED_TEXTURE_FORMATS
define|#
directive|define
name|GL_COMPRESSED_TEXTURE_FORMATS
value|0x86A3
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_CONSTANT_ALPHA
DECL|macro|GL_CONSTANT_ALPHA
define|#
directive|define
name|GL_CONSTANT_ALPHA
value|0x8003
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_CONSTANT_COLOR
DECL|macro|GL_CONSTANT_COLOR
define|#
directive|define
name|GL_CONSTANT_COLOR
value|0x8001
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_CULL_FACE
DECL|macro|GL_CULL_FACE
define|#
directive|define
name|GL_CULL_FACE
value|0x0B44
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_CULL_FACE_MODE
DECL|macro|GL_CULL_FACE_MODE
define|#
directive|define
name|GL_CULL_FACE_MODE
value|0x0B45
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_CURRENT_PROGRAM
DECL|macro|GL_CURRENT_PROGRAM
define|#
directive|define
name|GL_CURRENT_PROGRAM
value|0x8B8D
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_CURRENT_VERTEX_ATTRIB
DECL|macro|GL_CURRENT_VERTEX_ATTRIB
define|#
directive|define
name|GL_CURRENT_VERTEX_ATTRIB
value|0x8626
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_CW
DECL|macro|GL_CW
define|#
directive|define
name|GL_CW
value|0x0900
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_DECR
DECL|macro|GL_DECR
define|#
directive|define
name|GL_DECR
value|0x1E03
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_DECR_WRAP
DECL|macro|GL_DECR_WRAP
define|#
directive|define
name|GL_DECR_WRAP
value|0x8508
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_DELETE_STATUS
DECL|macro|GL_DELETE_STATUS
define|#
directive|define
name|GL_DELETE_STATUS
value|0x8B80
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_DEPTH_ATTACHMENT
DECL|macro|GL_DEPTH_ATTACHMENT
define|#
directive|define
name|GL_DEPTH_ATTACHMENT
value|0x8D00
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_DEPTH_BITS
DECL|macro|GL_DEPTH_BITS
define|#
directive|define
name|GL_DEPTH_BITS
value|0x0D56
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_DEPTH_BUFFER_BIT
DECL|macro|GL_DEPTH_BUFFER_BIT
define|#
directive|define
name|GL_DEPTH_BUFFER_BIT
value|0x00000100
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_DEPTH_CLEAR_VALUE
DECL|macro|GL_DEPTH_CLEAR_VALUE
define|#
directive|define
name|GL_DEPTH_CLEAR_VALUE
value|0x0B73
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_DEPTH_COMPONENT
DECL|macro|GL_DEPTH_COMPONENT
define|#
directive|define
name|GL_DEPTH_COMPONENT
value|0x1902
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_DEPTH_COMPONENT16
DECL|macro|GL_DEPTH_COMPONENT16
define|#
directive|define
name|GL_DEPTH_COMPONENT16
value|0x81A5
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_DEPTH_FUNC
DECL|macro|GL_DEPTH_FUNC
define|#
directive|define
name|GL_DEPTH_FUNC
value|0x0B74
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_DEPTH_RANGE
DECL|macro|GL_DEPTH_RANGE
define|#
directive|define
name|GL_DEPTH_RANGE
value|0x0B70
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_DEPTH_TEST
DECL|macro|GL_DEPTH_TEST
define|#
directive|define
name|GL_DEPTH_TEST
value|0x0B71
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_DEPTH_WRITEMASK
DECL|macro|GL_DEPTH_WRITEMASK
define|#
directive|define
name|GL_DEPTH_WRITEMASK
value|0x0B72
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_DITHER
DECL|macro|GL_DITHER
define|#
directive|define
name|GL_DITHER
value|0x0BD0
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_DONT_CARE
DECL|macro|GL_DONT_CARE
define|#
directive|define
name|GL_DONT_CARE
value|0x1100
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_DST_ALPHA
DECL|macro|GL_DST_ALPHA
define|#
directive|define
name|GL_DST_ALPHA
value|0x0304
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_DST_COLOR
DECL|macro|GL_DST_COLOR
define|#
directive|define
name|GL_DST_COLOR
value|0x0306
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_DYNAMIC_DRAW
DECL|macro|GL_DYNAMIC_DRAW
define|#
directive|define
name|GL_DYNAMIC_DRAW
value|0x88E8
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_ELEMENT_ARRAY_BUFFER
DECL|macro|GL_ELEMENT_ARRAY_BUFFER
define|#
directive|define
name|GL_ELEMENT_ARRAY_BUFFER
value|0x8893
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_ELEMENT_ARRAY_BUFFER_BINDING
DECL|macro|GL_ELEMENT_ARRAY_BUFFER_BINDING
define|#
directive|define
name|GL_ELEMENT_ARRAY_BUFFER_BINDING
value|0x8895
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_EQUAL
DECL|macro|GL_EQUAL
define|#
directive|define
name|GL_EQUAL
value|0x0202
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_EXTENSIONS
DECL|macro|GL_EXTENSIONS
define|#
directive|define
name|GL_EXTENSIONS
value|0x1F03
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_FALSE
DECL|macro|GL_FALSE
define|#
directive|define
name|GL_FALSE
value|0
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_FASTEST
DECL|macro|GL_FASTEST
define|#
directive|define
name|GL_FASTEST
value|0x1101
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_FIXED
DECL|macro|GL_FIXED
define|#
directive|define
name|GL_FIXED
value|0x140C
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_FLOAT
DECL|macro|GL_FLOAT
define|#
directive|define
name|GL_FLOAT
value|0x1406
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_FLOAT_MAT2
DECL|macro|GL_FLOAT_MAT2
define|#
directive|define
name|GL_FLOAT_MAT2
value|0x8B5A
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_FLOAT_MAT3
DECL|macro|GL_FLOAT_MAT3
define|#
directive|define
name|GL_FLOAT_MAT3
value|0x8B5B
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_FLOAT_MAT4
DECL|macro|GL_FLOAT_MAT4
define|#
directive|define
name|GL_FLOAT_MAT4
value|0x8B5C
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_FLOAT_VEC2
DECL|macro|GL_FLOAT_VEC2
define|#
directive|define
name|GL_FLOAT_VEC2
value|0x8B50
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_FLOAT_VEC3
DECL|macro|GL_FLOAT_VEC3
define|#
directive|define
name|GL_FLOAT_VEC3
value|0x8B51
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_FLOAT_VEC4
DECL|macro|GL_FLOAT_VEC4
define|#
directive|define
name|GL_FLOAT_VEC4
value|0x8B52
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_FRAGMENT_SHADER
DECL|macro|GL_FRAGMENT_SHADER
define|#
directive|define
name|GL_FRAGMENT_SHADER
value|0x8B30
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_FRAMEBUFFER
DECL|macro|GL_FRAMEBUFFER
define|#
directive|define
name|GL_FRAMEBUFFER
value|0x8D40
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME
DECL|macro|GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME
define|#
directive|define
name|GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME
value|0x8CD1
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE
DECL|macro|GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE
define|#
directive|define
name|GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE
value|0x8CD0
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE
DECL|macro|GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE
define|#
directive|define
name|GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE
value|0x8CD3
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL
DECL|macro|GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL
define|#
directive|define
name|GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL
value|0x8CD2
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_FRAMEBUFFER_BINDING
DECL|macro|GL_FRAMEBUFFER_BINDING
define|#
directive|define
name|GL_FRAMEBUFFER_BINDING
value|0x8CA6
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_FRAMEBUFFER_COMPLETE
DECL|macro|GL_FRAMEBUFFER_COMPLETE
define|#
directive|define
name|GL_FRAMEBUFFER_COMPLETE
value|0x8CD5
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
DECL|macro|GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
define|#
directive|define
name|GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
value|0x8CD6
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS
DECL|macro|GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS
define|#
directive|define
name|GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS
value|0x8CD9
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT
DECL|macro|GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT
define|#
directive|define
name|GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT
value|0x8CD7
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_FRAMEBUFFER_UNSUPPORTED
DECL|macro|GL_FRAMEBUFFER_UNSUPPORTED
define|#
directive|define
name|GL_FRAMEBUFFER_UNSUPPORTED
value|0x8CDD
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_FRONT
DECL|macro|GL_FRONT
define|#
directive|define
name|GL_FRONT
value|0x0404
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_FRONT_AND_BACK
DECL|macro|GL_FRONT_AND_BACK
define|#
directive|define
name|GL_FRONT_AND_BACK
value|0x0408
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_FRONT_FACE
DECL|macro|GL_FRONT_FACE
define|#
directive|define
name|GL_FRONT_FACE
value|0x0B46
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_FUNC_ADD
DECL|macro|GL_FUNC_ADD
define|#
directive|define
name|GL_FUNC_ADD
value|0x8006
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_FUNC_REVERSE_SUBTRACT
DECL|macro|GL_FUNC_REVERSE_SUBTRACT
define|#
directive|define
name|GL_FUNC_REVERSE_SUBTRACT
value|0x800B
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_FUNC_SUBTRACT
DECL|macro|GL_FUNC_SUBTRACT
define|#
directive|define
name|GL_FUNC_SUBTRACT
value|0x800A
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_GENERATE_MIPMAP_HINT
DECL|macro|GL_GENERATE_MIPMAP_HINT
define|#
directive|define
name|GL_GENERATE_MIPMAP_HINT
value|0x8192
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_GEQUAL
DECL|macro|GL_GEQUAL
define|#
directive|define
name|GL_GEQUAL
value|0x0206
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_GREATER
DECL|macro|GL_GREATER
define|#
directive|define
name|GL_GREATER
value|0x0204
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_GREEN_BITS
DECL|macro|GL_GREEN_BITS
define|#
directive|define
name|GL_GREEN_BITS
value|0x0D53
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_HIGH_FLOAT
DECL|macro|GL_HIGH_FLOAT
define|#
directive|define
name|GL_HIGH_FLOAT
value|0x8DF2
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_HIGH_INT
DECL|macro|GL_HIGH_INT
define|#
directive|define
name|GL_HIGH_INT
value|0x8DF5
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_IMPLEMENTATION_COLOR_READ_FORMAT
DECL|macro|GL_IMPLEMENTATION_COLOR_READ_FORMAT
define|#
directive|define
name|GL_IMPLEMENTATION_COLOR_READ_FORMAT
value|0x8B9B
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_IMPLEMENTATION_COLOR_READ_TYPE
DECL|macro|GL_IMPLEMENTATION_COLOR_READ_TYPE
define|#
directive|define
name|GL_IMPLEMENTATION_COLOR_READ_TYPE
value|0x8B9A
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_INCR
DECL|macro|GL_INCR
define|#
directive|define
name|GL_INCR
value|0x1E02
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_INCR_WRAP
DECL|macro|GL_INCR_WRAP
define|#
directive|define
name|GL_INCR_WRAP
value|0x8507
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_INFO_LOG_LENGTH
DECL|macro|GL_INFO_LOG_LENGTH
define|#
directive|define
name|GL_INFO_LOG_LENGTH
value|0x8B84
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_INT
DECL|macro|GL_INT
define|#
directive|define
name|GL_INT
value|0x1404
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_INT_VEC2
DECL|macro|GL_INT_VEC2
define|#
directive|define
name|GL_INT_VEC2
value|0x8B53
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_INT_VEC3
DECL|macro|GL_INT_VEC3
define|#
directive|define
name|GL_INT_VEC3
value|0x8B54
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_INT_VEC4
DECL|macro|GL_INT_VEC4
define|#
directive|define
name|GL_INT_VEC4
value|0x8B55
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_INVALID_ENUM
DECL|macro|GL_INVALID_ENUM
define|#
directive|define
name|GL_INVALID_ENUM
value|0x0500
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_INVALID_FRAMEBUFFER_OPERATION
DECL|macro|GL_INVALID_FRAMEBUFFER_OPERATION
define|#
directive|define
name|GL_INVALID_FRAMEBUFFER_OPERATION
value|0x0506
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_INVALID_OPERATION
DECL|macro|GL_INVALID_OPERATION
define|#
directive|define
name|GL_INVALID_OPERATION
value|0x0502
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_INVALID_VALUE
DECL|macro|GL_INVALID_VALUE
define|#
directive|define
name|GL_INVALID_VALUE
value|0x0501
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_INVERT
DECL|macro|GL_INVERT
define|#
directive|define
name|GL_INVERT
value|0x150A
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_KEEP
DECL|macro|GL_KEEP
define|#
directive|define
name|GL_KEEP
value|0x1E00
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_LEQUAL
DECL|macro|GL_LEQUAL
define|#
directive|define
name|GL_LEQUAL
value|0x0203
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_LESS
DECL|macro|GL_LESS
define|#
directive|define
name|GL_LESS
value|0x0201
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_LINEAR
DECL|macro|GL_LINEAR
define|#
directive|define
name|GL_LINEAR
value|0x2601
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_LINEAR_MIPMAP_LINEAR
DECL|macro|GL_LINEAR_MIPMAP_LINEAR
define|#
directive|define
name|GL_LINEAR_MIPMAP_LINEAR
value|0x2703
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_LINEAR_MIPMAP_NEAREST
DECL|macro|GL_LINEAR_MIPMAP_NEAREST
define|#
directive|define
name|GL_LINEAR_MIPMAP_NEAREST
value|0x2701
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_LINE_LOOP
DECL|macro|GL_LINE_LOOP
define|#
directive|define
name|GL_LINE_LOOP
value|0x0002
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_LINES
DECL|macro|GL_LINES
define|#
directive|define
name|GL_LINES
value|0x0001
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_LINE_STRIP
DECL|macro|GL_LINE_STRIP
define|#
directive|define
name|GL_LINE_STRIP
value|0x0003
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_LINE_WIDTH
DECL|macro|GL_LINE_WIDTH
define|#
directive|define
name|GL_LINE_WIDTH
value|0x0B21
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_LINK_STATUS
DECL|macro|GL_LINK_STATUS
define|#
directive|define
name|GL_LINK_STATUS
value|0x8B82
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_LOW_FLOAT
DECL|macro|GL_LOW_FLOAT
define|#
directive|define
name|GL_LOW_FLOAT
value|0x8DF0
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_LOW_INT
DECL|macro|GL_LOW_INT
define|#
directive|define
name|GL_LOW_INT
value|0x8DF3
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_LUMINANCE
DECL|macro|GL_LUMINANCE
define|#
directive|define
name|GL_LUMINANCE
value|0x1909
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_LUMINANCE_ALPHA
DECL|macro|GL_LUMINANCE_ALPHA
define|#
directive|define
name|GL_LUMINANCE_ALPHA
value|0x190A
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS
DECL|macro|GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS
define|#
directive|define
name|GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS
value|0x8B4D
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_MAX_CUBE_MAP_TEXTURE_SIZE
DECL|macro|GL_MAX_CUBE_MAP_TEXTURE_SIZE
define|#
directive|define
name|GL_MAX_CUBE_MAP_TEXTURE_SIZE
value|0x851C
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_MAX_FRAGMENT_UNIFORM_VECTORS
DECL|macro|GL_MAX_FRAGMENT_UNIFORM_VECTORS
define|#
directive|define
name|GL_MAX_FRAGMENT_UNIFORM_VECTORS
value|0x8DFD
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_MAX_RENDERBUFFER_SIZE
DECL|macro|GL_MAX_RENDERBUFFER_SIZE
define|#
directive|define
name|GL_MAX_RENDERBUFFER_SIZE
value|0x84E8
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_MAX_TEXTURE_IMAGE_UNITS
DECL|macro|GL_MAX_TEXTURE_IMAGE_UNITS
define|#
directive|define
name|GL_MAX_TEXTURE_IMAGE_UNITS
value|0x8872
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_MAX_TEXTURE_SIZE
DECL|macro|GL_MAX_TEXTURE_SIZE
define|#
directive|define
name|GL_MAX_TEXTURE_SIZE
value|0x0D33
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_MAX_VARYING_VECTORS
DECL|macro|GL_MAX_VARYING_VECTORS
define|#
directive|define
name|GL_MAX_VARYING_VECTORS
value|0x8DFC
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_MAX_VERTEX_ATTRIBS
DECL|macro|GL_MAX_VERTEX_ATTRIBS
define|#
directive|define
name|GL_MAX_VERTEX_ATTRIBS
value|0x8869
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS
DECL|macro|GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS
define|#
directive|define
name|GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS
value|0x8B4C
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_MAX_VERTEX_UNIFORM_VECTORS
DECL|macro|GL_MAX_VERTEX_UNIFORM_VECTORS
define|#
directive|define
name|GL_MAX_VERTEX_UNIFORM_VECTORS
value|0x8DFB
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_MAX_VIEWPORT_DIMS
DECL|macro|GL_MAX_VIEWPORT_DIMS
define|#
directive|define
name|GL_MAX_VIEWPORT_DIMS
value|0x0D3A
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_MEDIUM_FLOAT
DECL|macro|GL_MEDIUM_FLOAT
define|#
directive|define
name|GL_MEDIUM_FLOAT
value|0x8DF1
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_MEDIUM_INT
DECL|macro|GL_MEDIUM_INT
define|#
directive|define
name|GL_MEDIUM_INT
value|0x8DF4
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_MIRRORED_REPEAT
DECL|macro|GL_MIRRORED_REPEAT
define|#
directive|define
name|GL_MIRRORED_REPEAT
value|0x8370
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_NEAREST
DECL|macro|GL_NEAREST
define|#
directive|define
name|GL_NEAREST
value|0x2600
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_NEAREST_MIPMAP_LINEAR
DECL|macro|GL_NEAREST_MIPMAP_LINEAR
define|#
directive|define
name|GL_NEAREST_MIPMAP_LINEAR
value|0x2702
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_NEAREST_MIPMAP_NEAREST
DECL|macro|GL_NEAREST_MIPMAP_NEAREST
define|#
directive|define
name|GL_NEAREST_MIPMAP_NEAREST
value|0x2700
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_NEVER
DECL|macro|GL_NEVER
define|#
directive|define
name|GL_NEVER
value|0x0200
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_NICEST
DECL|macro|GL_NICEST
define|#
directive|define
name|GL_NICEST
value|0x1102
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_NO_ERROR
DECL|macro|GL_NO_ERROR
define|#
directive|define
name|GL_NO_ERROR
value|0
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_NONE
DECL|macro|GL_NONE
define|#
directive|define
name|GL_NONE
value|0
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_NOTEQUAL
DECL|macro|GL_NOTEQUAL
define|#
directive|define
name|GL_NOTEQUAL
value|0x0205
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_NUM_COMPRESSED_TEXTURE_FORMATS
DECL|macro|GL_NUM_COMPRESSED_TEXTURE_FORMATS
define|#
directive|define
name|GL_NUM_COMPRESSED_TEXTURE_FORMATS
value|0x86A2
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_NUM_SHADER_BINARY_FORMATS
DECL|macro|GL_NUM_SHADER_BINARY_FORMATS
define|#
directive|define
name|GL_NUM_SHADER_BINARY_FORMATS
value|0x8DF9
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_ONE
DECL|macro|GL_ONE
define|#
directive|define
name|GL_ONE
value|1
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_ONE_MINUS_CONSTANT_ALPHA
DECL|macro|GL_ONE_MINUS_CONSTANT_ALPHA
define|#
directive|define
name|GL_ONE_MINUS_CONSTANT_ALPHA
value|0x8004
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_ONE_MINUS_CONSTANT_COLOR
DECL|macro|GL_ONE_MINUS_CONSTANT_COLOR
define|#
directive|define
name|GL_ONE_MINUS_CONSTANT_COLOR
value|0x8002
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_ONE_MINUS_DST_ALPHA
DECL|macro|GL_ONE_MINUS_DST_ALPHA
define|#
directive|define
name|GL_ONE_MINUS_DST_ALPHA
value|0x0305
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_ONE_MINUS_DST_COLOR
DECL|macro|GL_ONE_MINUS_DST_COLOR
define|#
directive|define
name|GL_ONE_MINUS_DST_COLOR
value|0x0307
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_ONE_MINUS_SRC_ALPHA
DECL|macro|GL_ONE_MINUS_SRC_ALPHA
define|#
directive|define
name|GL_ONE_MINUS_SRC_ALPHA
value|0x0303
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_ONE_MINUS_SRC_COLOR
DECL|macro|GL_ONE_MINUS_SRC_COLOR
define|#
directive|define
name|GL_ONE_MINUS_SRC_COLOR
value|0x0301
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_OUT_OF_MEMORY
DECL|macro|GL_OUT_OF_MEMORY
define|#
directive|define
name|GL_OUT_OF_MEMORY
value|0x0505
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_PACK_ALIGNMENT
DECL|macro|GL_PACK_ALIGNMENT
define|#
directive|define
name|GL_PACK_ALIGNMENT
value|0x0D05
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_POINTS
DECL|macro|GL_POINTS
define|#
directive|define
name|GL_POINTS
value|0x0000
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_POLYGON_OFFSET_FACTOR
DECL|macro|GL_POLYGON_OFFSET_FACTOR
define|#
directive|define
name|GL_POLYGON_OFFSET_FACTOR
value|0x8038
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_POLYGON_OFFSET_FILL
DECL|macro|GL_POLYGON_OFFSET_FILL
define|#
directive|define
name|GL_POLYGON_OFFSET_FILL
value|0x8037
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_POLYGON_OFFSET_UNITS
DECL|macro|GL_POLYGON_OFFSET_UNITS
define|#
directive|define
name|GL_POLYGON_OFFSET_UNITS
value|0x2A00
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_RED_BITS
DECL|macro|GL_RED_BITS
define|#
directive|define
name|GL_RED_BITS
value|0x0D52
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_RENDERBUFFER
DECL|macro|GL_RENDERBUFFER
define|#
directive|define
name|GL_RENDERBUFFER
value|0x8D41
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_RENDERBUFFER_ALPHA_SIZE
DECL|macro|GL_RENDERBUFFER_ALPHA_SIZE
define|#
directive|define
name|GL_RENDERBUFFER_ALPHA_SIZE
value|0x8D53
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_RENDERBUFFER_BINDING
DECL|macro|GL_RENDERBUFFER_BINDING
define|#
directive|define
name|GL_RENDERBUFFER_BINDING
value|0x8CA7
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_RENDERBUFFER_BLUE_SIZE
DECL|macro|GL_RENDERBUFFER_BLUE_SIZE
define|#
directive|define
name|GL_RENDERBUFFER_BLUE_SIZE
value|0x8D52
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_RENDERBUFFER_DEPTH_SIZE
DECL|macro|GL_RENDERBUFFER_DEPTH_SIZE
define|#
directive|define
name|GL_RENDERBUFFER_DEPTH_SIZE
value|0x8D54
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_RENDERBUFFER_GREEN_SIZE
DECL|macro|GL_RENDERBUFFER_GREEN_SIZE
define|#
directive|define
name|GL_RENDERBUFFER_GREEN_SIZE
value|0x8D51
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_RENDERBUFFER_HEIGHT
DECL|macro|GL_RENDERBUFFER_HEIGHT
define|#
directive|define
name|GL_RENDERBUFFER_HEIGHT
value|0x8D43
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_RENDERBUFFER_INTERNAL_FORMAT
DECL|macro|GL_RENDERBUFFER_INTERNAL_FORMAT
define|#
directive|define
name|GL_RENDERBUFFER_INTERNAL_FORMAT
value|0x8D44
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_RENDERBUFFER_RED_SIZE
DECL|macro|GL_RENDERBUFFER_RED_SIZE
define|#
directive|define
name|GL_RENDERBUFFER_RED_SIZE
value|0x8D50
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_RENDERBUFFER_STENCIL_SIZE
DECL|macro|GL_RENDERBUFFER_STENCIL_SIZE
define|#
directive|define
name|GL_RENDERBUFFER_STENCIL_SIZE
value|0x8D55
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_RENDERBUFFER_WIDTH
DECL|macro|GL_RENDERBUFFER_WIDTH
define|#
directive|define
name|GL_RENDERBUFFER_WIDTH
value|0x8D42
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_RENDERER
DECL|macro|GL_RENDERER
define|#
directive|define
name|GL_RENDERER
value|0x1F01
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_REPEAT
DECL|macro|GL_REPEAT
define|#
directive|define
name|GL_REPEAT
value|0x2901
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_REPLACE
DECL|macro|GL_REPLACE
define|#
directive|define
name|GL_REPLACE
value|0x1E01
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_RGB
DECL|macro|GL_RGB
define|#
directive|define
name|GL_RGB
value|0x1907
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_RGB565
DECL|macro|GL_RGB565
define|#
directive|define
name|GL_RGB565
value|0x8D62
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_RGB5_A1
DECL|macro|GL_RGB5_A1
define|#
directive|define
name|GL_RGB5_A1
value|0x8057
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_RGBA
DECL|macro|GL_RGBA
define|#
directive|define
name|GL_RGBA
value|0x1908
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_RGBA4
DECL|macro|GL_RGBA4
define|#
directive|define
name|GL_RGBA4
value|0x8056
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_BGRA
DECL|macro|GL_BGRA
define|#
directive|define
name|GL_BGRA
value|0x80E1
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_SAMPLE_ALPHA_TO_COVERAGE
DECL|macro|GL_SAMPLE_ALPHA_TO_COVERAGE
define|#
directive|define
name|GL_SAMPLE_ALPHA_TO_COVERAGE
value|0x809E
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_SAMPLE_BUFFERS
DECL|macro|GL_SAMPLE_BUFFERS
define|#
directive|define
name|GL_SAMPLE_BUFFERS
value|0x80A8
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_SAMPLE_COVERAGE
DECL|macro|GL_SAMPLE_COVERAGE
define|#
directive|define
name|GL_SAMPLE_COVERAGE
value|0x80A0
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_SAMPLE_COVERAGE_INVERT
DECL|macro|GL_SAMPLE_COVERAGE_INVERT
define|#
directive|define
name|GL_SAMPLE_COVERAGE_INVERT
value|0x80AB
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_SAMPLE_COVERAGE_VALUE
DECL|macro|GL_SAMPLE_COVERAGE_VALUE
define|#
directive|define
name|GL_SAMPLE_COVERAGE_VALUE
value|0x80AA
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_SAMPLER_2D
DECL|macro|GL_SAMPLER_2D
define|#
directive|define
name|GL_SAMPLER_2D
value|0x8B5E
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_SAMPLER_CUBE
DECL|macro|GL_SAMPLER_CUBE
define|#
directive|define
name|GL_SAMPLER_CUBE
value|0x8B60
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_SAMPLES
DECL|macro|GL_SAMPLES
define|#
directive|define
name|GL_SAMPLES
value|0x80A9
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_SCISSOR_BOX
DECL|macro|GL_SCISSOR_BOX
define|#
directive|define
name|GL_SCISSOR_BOX
value|0x0C10
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_SCISSOR_TEST
DECL|macro|GL_SCISSOR_TEST
define|#
directive|define
name|GL_SCISSOR_TEST
value|0x0C11
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_SHADER_BINARY_FORMATS
DECL|macro|GL_SHADER_BINARY_FORMATS
define|#
directive|define
name|GL_SHADER_BINARY_FORMATS
value|0x8DF8
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_SHADER_COMPILER
DECL|macro|GL_SHADER_COMPILER
define|#
directive|define
name|GL_SHADER_COMPILER
value|0x8DFA
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_SHADER_SOURCE_LENGTH
DECL|macro|GL_SHADER_SOURCE_LENGTH
define|#
directive|define
name|GL_SHADER_SOURCE_LENGTH
value|0x8B88
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_SHADER_TYPE
DECL|macro|GL_SHADER_TYPE
define|#
directive|define
name|GL_SHADER_TYPE
value|0x8B4F
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_SHADING_LANGUAGE_VERSION
DECL|macro|GL_SHADING_LANGUAGE_VERSION
define|#
directive|define
name|GL_SHADING_LANGUAGE_VERSION
value|0x8B8C
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_SHORT
DECL|macro|GL_SHORT
define|#
directive|define
name|GL_SHORT
value|0x1402
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_SRC_ALPHA
DECL|macro|GL_SRC_ALPHA
define|#
directive|define
name|GL_SRC_ALPHA
value|0x0302
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_SRC_ALPHA_SATURATE
DECL|macro|GL_SRC_ALPHA_SATURATE
define|#
directive|define
name|GL_SRC_ALPHA_SATURATE
value|0x0308
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_SRC_COLOR
DECL|macro|GL_SRC_COLOR
define|#
directive|define
name|GL_SRC_COLOR
value|0x0300
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_STATIC_DRAW
DECL|macro|GL_STATIC_DRAW
define|#
directive|define
name|GL_STATIC_DRAW
value|0x88E4
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_STENCIL_ATTACHMENT
DECL|macro|GL_STENCIL_ATTACHMENT
define|#
directive|define
name|GL_STENCIL_ATTACHMENT
value|0x8D20
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_STENCIL_BACK_FAIL
DECL|macro|GL_STENCIL_BACK_FAIL
define|#
directive|define
name|GL_STENCIL_BACK_FAIL
value|0x8801
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_STENCIL_BACK_FUNC
DECL|macro|GL_STENCIL_BACK_FUNC
define|#
directive|define
name|GL_STENCIL_BACK_FUNC
value|0x8800
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_STENCIL_BACK_PASS_DEPTH_FAIL
DECL|macro|GL_STENCIL_BACK_PASS_DEPTH_FAIL
define|#
directive|define
name|GL_STENCIL_BACK_PASS_DEPTH_FAIL
value|0x8802
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_STENCIL_BACK_PASS_DEPTH_PASS
DECL|macro|GL_STENCIL_BACK_PASS_DEPTH_PASS
define|#
directive|define
name|GL_STENCIL_BACK_PASS_DEPTH_PASS
value|0x8803
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_STENCIL_BACK_REF
DECL|macro|GL_STENCIL_BACK_REF
define|#
directive|define
name|GL_STENCIL_BACK_REF
value|0x8CA3
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_STENCIL_BACK_VALUE_MASK
DECL|macro|GL_STENCIL_BACK_VALUE_MASK
define|#
directive|define
name|GL_STENCIL_BACK_VALUE_MASK
value|0x8CA4
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_STENCIL_BACK_WRITEMASK
DECL|macro|GL_STENCIL_BACK_WRITEMASK
define|#
directive|define
name|GL_STENCIL_BACK_WRITEMASK
value|0x8CA5
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_STENCIL_BITS
DECL|macro|GL_STENCIL_BITS
define|#
directive|define
name|GL_STENCIL_BITS
value|0x0D57
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_STENCIL_BUFFER_BIT
DECL|macro|GL_STENCIL_BUFFER_BIT
define|#
directive|define
name|GL_STENCIL_BUFFER_BIT
value|0x00000400
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_STENCIL_CLEAR_VALUE
DECL|macro|GL_STENCIL_CLEAR_VALUE
define|#
directive|define
name|GL_STENCIL_CLEAR_VALUE
value|0x0B91
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_STENCIL_FAIL
DECL|macro|GL_STENCIL_FAIL
define|#
directive|define
name|GL_STENCIL_FAIL
value|0x0B94
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_STENCIL_FUNC
DECL|macro|GL_STENCIL_FUNC
define|#
directive|define
name|GL_STENCIL_FUNC
value|0x0B92
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_STENCIL_INDEX
DECL|macro|GL_STENCIL_INDEX
define|#
directive|define
name|GL_STENCIL_INDEX
value|0x1901
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_STENCIL_INDEX8
DECL|macro|GL_STENCIL_INDEX8
define|#
directive|define
name|GL_STENCIL_INDEX8
value|0x8D48
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_STENCIL_PASS_DEPTH_FAIL
DECL|macro|GL_STENCIL_PASS_DEPTH_FAIL
define|#
directive|define
name|GL_STENCIL_PASS_DEPTH_FAIL
value|0x0B95
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_STENCIL_PASS_DEPTH_PASS
DECL|macro|GL_STENCIL_PASS_DEPTH_PASS
define|#
directive|define
name|GL_STENCIL_PASS_DEPTH_PASS
value|0x0B96
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_STENCIL_REF
DECL|macro|GL_STENCIL_REF
define|#
directive|define
name|GL_STENCIL_REF
value|0x0B97
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_STENCIL_TEST
DECL|macro|GL_STENCIL_TEST
define|#
directive|define
name|GL_STENCIL_TEST
value|0x0B90
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_STENCIL_VALUE_MASK
DECL|macro|GL_STENCIL_VALUE_MASK
define|#
directive|define
name|GL_STENCIL_VALUE_MASK
value|0x0B93
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_STENCIL_WRITEMASK
DECL|macro|GL_STENCIL_WRITEMASK
define|#
directive|define
name|GL_STENCIL_WRITEMASK
value|0x0B98
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_STREAM_DRAW
DECL|macro|GL_STREAM_DRAW
define|#
directive|define
name|GL_STREAM_DRAW
value|0x88E0
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_SUBPIXEL_BITS
DECL|macro|GL_SUBPIXEL_BITS
define|#
directive|define
name|GL_SUBPIXEL_BITS
value|0x0D50
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_TEXTURE0
DECL|macro|GL_TEXTURE0
define|#
directive|define
name|GL_TEXTURE0
value|0x84C0
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_TEXTURE
DECL|macro|GL_TEXTURE
define|#
directive|define
name|GL_TEXTURE
value|0x1702
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_TEXTURE10
DECL|macro|GL_TEXTURE10
define|#
directive|define
name|GL_TEXTURE10
value|0x84CA
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_TEXTURE1
DECL|macro|GL_TEXTURE1
define|#
directive|define
name|GL_TEXTURE1
value|0x84C1
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_TEXTURE11
DECL|macro|GL_TEXTURE11
define|#
directive|define
name|GL_TEXTURE11
value|0x84CB
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_TEXTURE12
DECL|macro|GL_TEXTURE12
define|#
directive|define
name|GL_TEXTURE12
value|0x84CC
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_TEXTURE13
DECL|macro|GL_TEXTURE13
define|#
directive|define
name|GL_TEXTURE13
value|0x84CD
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_TEXTURE14
DECL|macro|GL_TEXTURE14
define|#
directive|define
name|GL_TEXTURE14
value|0x84CE
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_TEXTURE15
DECL|macro|GL_TEXTURE15
define|#
directive|define
name|GL_TEXTURE15
value|0x84CF
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_TEXTURE16
DECL|macro|GL_TEXTURE16
define|#
directive|define
name|GL_TEXTURE16
value|0x84D0
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_TEXTURE17
DECL|macro|GL_TEXTURE17
define|#
directive|define
name|GL_TEXTURE17
value|0x84D1
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_TEXTURE18
DECL|macro|GL_TEXTURE18
define|#
directive|define
name|GL_TEXTURE18
value|0x84D2
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_TEXTURE19
DECL|macro|GL_TEXTURE19
define|#
directive|define
name|GL_TEXTURE19
value|0x84D3
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_TEXTURE20
DECL|macro|GL_TEXTURE20
define|#
directive|define
name|GL_TEXTURE20
value|0x84D4
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_TEXTURE2
DECL|macro|GL_TEXTURE2
define|#
directive|define
name|GL_TEXTURE2
value|0x84C2
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_TEXTURE21
DECL|macro|GL_TEXTURE21
define|#
directive|define
name|GL_TEXTURE21
value|0x84D5
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_TEXTURE22
DECL|macro|GL_TEXTURE22
define|#
directive|define
name|GL_TEXTURE22
value|0x84D6
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_TEXTURE23
DECL|macro|GL_TEXTURE23
define|#
directive|define
name|GL_TEXTURE23
value|0x84D7
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_TEXTURE24
DECL|macro|GL_TEXTURE24
define|#
directive|define
name|GL_TEXTURE24
value|0x84D8
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_TEXTURE25
DECL|macro|GL_TEXTURE25
define|#
directive|define
name|GL_TEXTURE25
value|0x84D9
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_TEXTURE26
DECL|macro|GL_TEXTURE26
define|#
directive|define
name|GL_TEXTURE26
value|0x84DA
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_TEXTURE27
DECL|macro|GL_TEXTURE27
define|#
directive|define
name|GL_TEXTURE27
value|0x84DB
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_TEXTURE28
DECL|macro|GL_TEXTURE28
define|#
directive|define
name|GL_TEXTURE28
value|0x84DC
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_TEXTURE29
DECL|macro|GL_TEXTURE29
define|#
directive|define
name|GL_TEXTURE29
value|0x84DD
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_TEXTURE_2D
DECL|macro|GL_TEXTURE_2D
define|#
directive|define
name|GL_TEXTURE_2D
value|0x0DE1
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_TEXTURE30
DECL|macro|GL_TEXTURE30
define|#
directive|define
name|GL_TEXTURE30
value|0x84DE
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_TEXTURE3
DECL|macro|GL_TEXTURE3
define|#
directive|define
name|GL_TEXTURE3
value|0x84C3
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_TEXTURE31
DECL|macro|GL_TEXTURE31
define|#
directive|define
name|GL_TEXTURE31
value|0x84DF
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_TEXTURE4
DECL|macro|GL_TEXTURE4
define|#
directive|define
name|GL_TEXTURE4
value|0x84C4
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_TEXTURE5
DECL|macro|GL_TEXTURE5
define|#
directive|define
name|GL_TEXTURE5
value|0x84C5
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_TEXTURE6
DECL|macro|GL_TEXTURE6
define|#
directive|define
name|GL_TEXTURE6
value|0x84C6
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_TEXTURE7
DECL|macro|GL_TEXTURE7
define|#
directive|define
name|GL_TEXTURE7
value|0x84C7
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_TEXTURE8
DECL|macro|GL_TEXTURE8
define|#
directive|define
name|GL_TEXTURE8
value|0x84C8
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_TEXTURE9
DECL|macro|GL_TEXTURE9
define|#
directive|define
name|GL_TEXTURE9
value|0x84C9
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_TEXTURE_BINDING_2D
DECL|macro|GL_TEXTURE_BINDING_2D
define|#
directive|define
name|GL_TEXTURE_BINDING_2D
value|0x8069
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_TEXTURE_BINDING_CUBE_MAP
DECL|macro|GL_TEXTURE_BINDING_CUBE_MAP
define|#
directive|define
name|GL_TEXTURE_BINDING_CUBE_MAP
value|0x8514
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_TEXTURE_CUBE_MAP
DECL|macro|GL_TEXTURE_CUBE_MAP
define|#
directive|define
name|GL_TEXTURE_CUBE_MAP
value|0x8513
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_TEXTURE_CUBE_MAP_NEGATIVE_X
DECL|macro|GL_TEXTURE_CUBE_MAP_NEGATIVE_X
define|#
directive|define
name|GL_TEXTURE_CUBE_MAP_NEGATIVE_X
value|0x8516
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
DECL|macro|GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
define|#
directive|define
name|GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
value|0x8518
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
DECL|macro|GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
define|#
directive|define
name|GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
value|0x851A
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_TEXTURE_CUBE_MAP_POSITIVE_X
DECL|macro|GL_TEXTURE_CUBE_MAP_POSITIVE_X
define|#
directive|define
name|GL_TEXTURE_CUBE_MAP_POSITIVE_X
value|0x8515
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_TEXTURE_CUBE_MAP_POSITIVE_Y
DECL|macro|GL_TEXTURE_CUBE_MAP_POSITIVE_Y
define|#
directive|define
name|GL_TEXTURE_CUBE_MAP_POSITIVE_Y
value|0x8517
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_TEXTURE_CUBE_MAP_POSITIVE_Z
DECL|macro|GL_TEXTURE_CUBE_MAP_POSITIVE_Z
define|#
directive|define
name|GL_TEXTURE_CUBE_MAP_POSITIVE_Z
value|0x8519
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_TEXTURE_MAG_FILTER
DECL|macro|GL_TEXTURE_MAG_FILTER
define|#
directive|define
name|GL_TEXTURE_MAG_FILTER
value|0x2800
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_TEXTURE_MIN_FILTER
DECL|macro|GL_TEXTURE_MIN_FILTER
define|#
directive|define
name|GL_TEXTURE_MIN_FILTER
value|0x2801
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_TEXTURE_WRAP_S
DECL|macro|GL_TEXTURE_WRAP_S
define|#
directive|define
name|GL_TEXTURE_WRAP_S
value|0x2802
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_TEXTURE_WRAP_T
DECL|macro|GL_TEXTURE_WRAP_T
define|#
directive|define
name|GL_TEXTURE_WRAP_T
value|0x2803
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_TRIANGLE_FAN
DECL|macro|GL_TRIANGLE_FAN
define|#
directive|define
name|GL_TRIANGLE_FAN
value|0x0006
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_TRIANGLES
DECL|macro|GL_TRIANGLES
define|#
directive|define
name|GL_TRIANGLES
value|0x0004
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_TRIANGLE_STRIP
DECL|macro|GL_TRIANGLE_STRIP
define|#
directive|define
name|GL_TRIANGLE_STRIP
value|0x0005
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_TRUE
DECL|macro|GL_TRUE
define|#
directive|define
name|GL_TRUE
value|1
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_UNPACK_ALIGNMENT
DECL|macro|GL_UNPACK_ALIGNMENT
define|#
directive|define
name|GL_UNPACK_ALIGNMENT
value|0x0CF5
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_UNSIGNED_BYTE
DECL|macro|GL_UNSIGNED_BYTE
define|#
directive|define
name|GL_UNSIGNED_BYTE
value|0x1401
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_UNSIGNED_INT
DECL|macro|GL_UNSIGNED_INT
define|#
directive|define
name|GL_UNSIGNED_INT
value|0x1405
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_UNSIGNED_SHORT
DECL|macro|GL_UNSIGNED_SHORT
define|#
directive|define
name|GL_UNSIGNED_SHORT
value|0x1403
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_UNSIGNED_SHORT_4_4_4_4
DECL|macro|GL_UNSIGNED_SHORT_4_4_4_4
define|#
directive|define
name|GL_UNSIGNED_SHORT_4_4_4_4
value|0x8033
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_UNSIGNED_SHORT_5_5_5_1
DECL|macro|GL_UNSIGNED_SHORT_5_5_5_1
define|#
directive|define
name|GL_UNSIGNED_SHORT_5_5_5_1
value|0x8034
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_UNSIGNED_SHORT_5_6_5
DECL|macro|GL_UNSIGNED_SHORT_5_6_5
define|#
directive|define
name|GL_UNSIGNED_SHORT_5_6_5
value|0x8363
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_VALIDATE_STATUS
DECL|macro|GL_VALIDATE_STATUS
define|#
directive|define
name|GL_VALIDATE_STATUS
value|0x8B83
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_VENDOR
DECL|macro|GL_VENDOR
define|#
directive|define
name|GL_VENDOR
value|0x1F00
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_VERSION
DECL|macro|GL_VERSION
define|#
directive|define
name|GL_VERSION
value|0x1F02
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING
DECL|macro|GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING
define|#
directive|define
name|GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING
value|0x889F
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_VERTEX_ATTRIB_ARRAY_ENABLED
DECL|macro|GL_VERTEX_ATTRIB_ARRAY_ENABLED
define|#
directive|define
name|GL_VERTEX_ATTRIB_ARRAY_ENABLED
value|0x8622
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_VERTEX_ATTRIB_ARRAY_NORMALIZED
DECL|macro|GL_VERTEX_ATTRIB_ARRAY_NORMALIZED
define|#
directive|define
name|GL_VERTEX_ATTRIB_ARRAY_NORMALIZED
value|0x886A
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_VERTEX_ATTRIB_ARRAY_POINTER
DECL|macro|GL_VERTEX_ATTRIB_ARRAY_POINTER
define|#
directive|define
name|GL_VERTEX_ATTRIB_ARRAY_POINTER
value|0x8645
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_VERTEX_ATTRIB_ARRAY_SIZE
DECL|macro|GL_VERTEX_ATTRIB_ARRAY_SIZE
define|#
directive|define
name|GL_VERTEX_ATTRIB_ARRAY_SIZE
value|0x8623
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_VERTEX_ATTRIB_ARRAY_STRIDE
DECL|macro|GL_VERTEX_ATTRIB_ARRAY_STRIDE
define|#
directive|define
name|GL_VERTEX_ATTRIB_ARRAY_STRIDE
value|0x8624
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_VERTEX_ATTRIB_ARRAY_TYPE
DECL|macro|GL_VERTEX_ATTRIB_ARRAY_TYPE
define|#
directive|define
name|GL_VERTEX_ATTRIB_ARRAY_TYPE
value|0x8625
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_VERTEX_SHADER
DECL|macro|GL_VERTEX_SHADER
define|#
directive|define
name|GL_VERTEX_SHADER
value|0x8B31
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_VIEWPORT
DECL|macro|GL_VIEWPORT
define|#
directive|define
name|GL_VIEWPORT
value|0x0BA2
endif|#
directive|endif
ifndef|#
directive|ifndef
name|GL_ZERO
DECL|macro|GL_ZERO
define|#
directive|define
name|GL_ZERO
value|0
endif|#
directive|endif
name|QT_END_NAMESPACE
name|QT_END_HEADER
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
end_unit
