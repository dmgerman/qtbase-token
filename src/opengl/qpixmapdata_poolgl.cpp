begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtOpenGL module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qpixmap.h"
end_include
begin_include
include|#
directive|include
file|"qglframebufferobject.h"
end_include
begin_include
include|#
directive|include
file|<private/qpaintengine_raster_p.h>
end_include
begin_include
include|#
directive|include
file|"qpixmapdata_gl_p.h"
end_include
begin_include
include|#
directive|include
file|<private/qgl_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qdrawhelper_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qimage_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qnativeimagehandleprovider_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qfont_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qpaintengineex_opengl2_p.h>
end_include
begin_include
include|#
directive|include
file|<qdesktopwidget.h>
end_include
begin_include
include|#
directive|include
file|<qfile.h>
end_include
begin_include
include|#
directive|include
file|<qimagereader.h>
end_include
begin_include
include|#
directive|include
file|<qbuffer.h>
end_include
begin_include
include|#
directive|include
file|"qgltexturepool_p.h"
end_include
begin_function_decl
name|QT_BEGIN_NAMESPACE
name|Q_OPENGL_EXPORT
specifier|extern
name|QGLWidget
modifier|*
name|qt_gl_share_widget
parameter_list|()
function_decl|;
end_function_decl
begin_function
DECL|function|areaDiff
specifier|static
specifier|inline
name|int
name|areaDiff
parameter_list|(
specifier|const
name|QSize
modifier|&
name|size
parameter_list|,
specifier|const
name|QGLFramebufferObject
modifier|*
name|fbo
parameter_list|)
block|{
return|return
name|qAbs
argument_list|(
name|size
operator|.
name|width
argument_list|()
operator|*
name|size
operator|.
name|height
argument_list|()
operator|-
name|fbo
operator|->
name|width
argument_list|()
operator|*
name|fbo
operator|->
name|height
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function_decl
specifier|extern
name|int
name|qt_next_power_of_two
parameter_list|(
name|int
name|v
parameter_list|)
function_decl|;
end_function_decl
begin_function
DECL|function|maybeRoundToNextPowerOfTwo
specifier|static
specifier|inline
name|QSize
name|maybeRoundToNextPowerOfTwo
parameter_list|(
specifier|const
name|QSize
modifier|&
name|sz
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_OPENGL_ES_2
name|QSize
name|rounded
argument_list|(
name|qt_next_power_of_two
argument_list|(
name|sz
operator|.
name|width
argument_list|()
argument_list|)
argument_list|,
name|qt_next_power_of_two
argument_list|(
name|sz
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|rounded
operator|.
name|width
argument_list|()
operator|*
name|rounded
operator|.
name|height
argument_list|()
operator|<
literal|1.20
operator|*
name|sz
operator|.
name|width
argument_list|()
operator|*
name|sz
operator|.
name|height
argument_list|()
condition|)
return|return
name|rounded
return|;
endif|#
directive|endif
return|return
name|sz
return|;
block|}
end_function
begin_function
DECL|function|acquire
name|QGLFramebufferObject
modifier|*
name|QGLFramebufferObjectPool
operator|::
name|acquire
parameter_list|(
specifier|const
name|QSize
modifier|&
name|requestSize
parameter_list|,
specifier|const
name|QGLFramebufferObjectFormat
modifier|&
name|requestFormat
parameter_list|,
name|bool
name|strictSize
parameter_list|)
block|{
name|QGLFramebufferObject
modifier|*
name|chosen
init|=
literal|0
decl_stmt|;
name|QGLFramebufferObject
modifier|*
name|candidate
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
operator|!
name|chosen
operator|&&
name|i
operator|<
name|m_fbos
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QGLFramebufferObject
modifier|*
name|fbo
init|=
name|m_fbos
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|strictSize
condition|)
block|{
if|if
condition|(
name|fbo
operator|->
name|size
argument_list|()
operator|==
name|requestSize
operator|&&
name|fbo
operator|->
name|format
argument_list|()
operator|==
name|requestFormat
condition|)
block|{
name|chosen
operator|=
name|fbo
expr_stmt|;
break|break;
block|}
else|else
block|{
continue|continue;
block|}
block|}
if|if
condition|(
name|fbo
operator|->
name|format
argument_list|()
operator|==
name|requestFormat
condition|)
block|{
comment|// choose the fbo with a matching format and the closest size
if|if
condition|(
operator|!
name|candidate
operator|||
name|areaDiff
argument_list|(
name|requestSize
argument_list|,
name|candidate
argument_list|)
operator|>
name|areaDiff
argument_list|(
name|requestSize
argument_list|,
name|fbo
argument_list|)
condition|)
name|candidate
operator|=
name|fbo
expr_stmt|;
block|}
if|if
condition|(
name|candidate
condition|)
block|{
name|m_fbos
operator|.
name|removeOne
argument_list|(
name|candidate
argument_list|)
expr_stmt|;
specifier|const
name|QSize
name|fboSize
init|=
name|candidate
operator|->
name|size
argument_list|()
decl_stmt|;
name|QSize
name|sz
init|=
name|fboSize
decl_stmt|;
if|if
condition|(
name|sz
operator|.
name|width
argument_list|()
operator|<
name|requestSize
operator|.
name|width
argument_list|()
condition|)
name|sz
operator|.
name|setWidth
argument_list|(
name|qMax
argument_list|(
name|requestSize
operator|.
name|width
argument_list|()
argument_list|,
name|qRound
argument_list|(
name|sz
operator|.
name|width
argument_list|()
operator|*
literal|1.5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|sz
operator|.
name|height
argument_list|()
operator|<
name|requestSize
operator|.
name|height
argument_list|()
condition|)
name|sz
operator|.
name|setHeight
argument_list|(
name|qMax
argument_list|(
name|requestSize
operator|.
name|height
argument_list|()
argument_list|,
name|qRound
argument_list|(
name|sz
operator|.
name|height
argument_list|()
operator|*
literal|1.5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// wasting too much space?
if|if
condition|(
name|sz
operator|.
name|width
argument_list|()
operator|*
name|sz
operator|.
name|height
argument_list|()
operator|>
name|requestSize
operator|.
name|width
argument_list|()
operator|*
name|requestSize
operator|.
name|height
argument_list|()
operator|*
literal|4
condition|)
name|sz
operator|=
name|requestSize
expr_stmt|;
if|if
condition|(
name|sz
operator|!=
name|fboSize
condition|)
block|{
operator|delete
name|candidate
expr_stmt|;
name|candidate
operator|=
operator|new
name|QGLFramebufferObject
argument_list|(
name|maybeRoundToNextPowerOfTwo
argument_list|(
name|sz
argument_list|)
argument_list|,
name|requestFormat
argument_list|)
expr_stmt|;
block|}
name|chosen
operator|=
name|candidate
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|chosen
condition|)
block|{
if|if
condition|(
name|strictSize
condition|)
name|chosen
operator|=
operator|new
name|QGLFramebufferObject
argument_list|(
name|requestSize
argument_list|,
name|requestFormat
argument_list|)
expr_stmt|;
else|else
name|chosen
operator|=
operator|new
name|QGLFramebufferObject
argument_list|(
name|maybeRoundToNextPowerOfTwo
argument_list|(
name|requestSize
argument_list|)
argument_list|,
name|requestFormat
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|chosen
operator|->
name|isValid
argument_list|()
condition|)
block|{
operator|delete
name|chosen
expr_stmt|;
name|chosen
operator|=
literal|0
expr_stmt|;
block|}
return|return
name|chosen
return|;
block|}
end_function
begin_function
DECL|function|release
name|void
name|QGLFramebufferObjectPool
operator|::
name|release
parameter_list|(
name|QGLFramebufferObject
modifier|*
name|fbo
parameter_list|)
block|{
if|if
condition|(
name|fbo
condition|)
name|m_fbos
operator|<<
name|fbo
expr_stmt|;
block|}
end_function
begin_function
DECL|function|paintEngine
name|QPaintEngine
modifier|*
name|QGLPixmapGLPaintDevice
operator|::
name|paintEngine
parameter_list|()
specifier|const
block|{
return|return
name|data
operator|->
name|paintEngine
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|beginPaint
name|void
name|QGLPixmapGLPaintDevice
operator|::
name|beginPaint
parameter_list|()
block|{
if|if
condition|(
operator|!
name|data
operator|->
name|isValid
argument_list|()
condition|)
return|return;
comment|// QGLPaintDevice::beginPaint will store the current binding and replace
comment|// it with m_thisFBO:
name|m_thisFBO
operator|=
name|data
operator|->
name|m_renderFbo
operator|->
name|handle
argument_list|()
expr_stmt|;
name|QGLPaintDevice
operator|::
name|beginPaint
argument_list|()
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|data
operator|->
name|paintEngine
argument_list|()
operator|->
name|type
argument_list|()
operator|==
name|QPaintEngine
operator|::
name|OpenGL2
argument_list|)
expr_stmt|;
comment|// QPixmap::fill() is deferred until now, where we actually need to do the fill:
if|if
condition|(
name|data
operator|->
name|needsFill
argument_list|()
condition|)
block|{
specifier|const
name|QColor
modifier|&
name|c
init|=
name|data
operator|->
name|fillColor
argument_list|()
decl_stmt|;
name|float
name|alpha
init|=
name|c
operator|.
name|alphaF
argument_list|()
decl_stmt|;
name|glDisable
argument_list|(
name|GL_SCISSOR_TEST
argument_list|)
expr_stmt|;
name|glClearColor
argument_list|(
name|c
operator|.
name|redF
argument_list|()
operator|*
name|alpha
argument_list|,
name|c
operator|.
name|greenF
argument_list|()
operator|*
name|alpha
argument_list|,
name|c
operator|.
name|blueF
argument_list|()
operator|*
name|alpha
argument_list|,
name|alpha
argument_list|)
expr_stmt|;
name|glClear
argument_list|(
name|GL_COLOR_BUFFER_BIT
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|data
operator|->
name|isUninitialized
argument_list|()
condition|)
block|{
comment|// If the pixmap (GL Texture) has valid content (it has been
comment|// uploaded from an image or rendered into before), we need to
comment|// copy it from the texture to the render FBO.
name|glDisable
argument_list|(
name|GL_DEPTH_TEST
argument_list|)
expr_stmt|;
name|glDisable
argument_list|(
name|GL_SCISSOR_TEST
argument_list|)
expr_stmt|;
name|glDisable
argument_list|(
name|GL_BLEND
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
name|glMatrixMode
argument_list|(
name|GL_MODELVIEW
argument_list|)
expr_stmt|;
name|glLoadIdentity
argument_list|()
expr_stmt|;
name|glMatrixMode
argument_list|(
name|GL_PROJECTION
argument_list|)
expr_stmt|;
name|glLoadIdentity
argument_list|()
expr_stmt|;
name|glOrtho
argument_list|(
literal|0
argument_list|,
name|data
operator|->
name|width
argument_list|()
argument_list|,
name|data
operator|->
name|height
argument_list|()
argument_list|,
literal|0
argument_list|,
operator|-
literal|999999
argument_list|,
literal|999999
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|glViewport
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|data
operator|->
name|width
argument_list|()
argument_list|,
name|data
operator|->
name|height
argument_list|()
argument_list|)
expr_stmt|;
comment|// Pass false to bind so it doesn't copy the FBO into the texture!
name|context
argument_list|()
operator|->
name|drawTexture
argument_list|(
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|data
operator|->
name|width
argument_list|()
argument_list|,
name|data
operator|->
name|height
argument_list|()
argument_list|)
argument_list|,
name|data
operator|->
name|bind
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|endPaint
name|void
name|QGLPixmapGLPaintDevice
operator|::
name|endPaint
parameter_list|()
block|{
if|if
condition|(
operator|!
name|data
operator|->
name|isValid
argument_list|()
condition|)
return|return;
name|data
operator|->
name|copyBackFromRenderFbo
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Base's endPaint will restore the previous FBO binding
name|QGLPaintDevice
operator|::
name|endPaint
argument_list|()
expr_stmt|;
name|qgl_fbo_pool
argument_list|()
operator|->
name|release
argument_list|(
name|data
operator|->
name|m_renderFbo
argument_list|)
expr_stmt|;
name|data
operator|->
name|m_renderFbo
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|context
name|QGLContext
modifier|*
name|QGLPixmapGLPaintDevice
operator|::
name|context
parameter_list|()
specifier|const
block|{
name|data
operator|->
name|ensureCreated
argument_list|()
expr_stmt|;
return|return
name|data
operator|->
name|m_ctx
return|;
block|}
end_function
begin_function
DECL|function|size
name|QSize
name|QGLPixmapGLPaintDevice
operator|::
name|size
parameter_list|()
specifier|const
block|{
return|return
name|data
operator|->
name|size
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|alphaRequested
name|bool
name|QGLPixmapGLPaintDevice
operator|::
name|alphaRequested
parameter_list|()
specifier|const
block|{
return|return
name|data
operator|->
name|m_hasAlpha
return|;
block|}
end_function
begin_function
DECL|function|setPixmapData
name|void
name|QGLPixmapGLPaintDevice
operator|::
name|setPixmapData
parameter_list|(
name|QGLPixmapData
modifier|*
name|d
parameter_list|)
block|{
name|data
operator|=
name|d
expr_stmt|;
block|}
end_function
begin_decl_stmt
DECL|variable|qt_gl_pixmap_serial
name|int
name|qt_gl_pixmap_serial
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_constructor
DECL|function|QGLPixmapData
name|QGLPixmapData
operator|::
name|QGLPixmapData
parameter_list|(
name|PixelType
name|type
parameter_list|)
member_init_list|:
name|QPixmapData
argument_list|(
name|type
argument_list|,
name|OpenGLClass
argument_list|)
member_init_list|,
name|m_renderFbo
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_engine
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_ctx
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|nativeImageHandleProvider
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|nativeImageHandle
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_dirty
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|m_hasFillColor
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|m_hasAlpha
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|inLRU
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|failedToAlloc
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|inTexturePool
argument_list|(
literal|false
argument_list|)
block|{
name|setSerialNumber
argument_list|(
operator|++
name|qt_gl_pixmap_serial
argument_list|)
expr_stmt|;
name|m_glDevice
operator|.
name|setPixmapData
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|qt_gl_register_pixmap
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QGLPixmapData
name|QGLPixmapData
operator|::
name|~
name|QGLPixmapData
parameter_list|()
block|{
operator|delete
name|m_engine
expr_stmt|;
name|destroyTexture
argument_list|()
expr_stmt|;
name|qt_gl_unregister_pixmap
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|destroyTexture
name|void
name|QGLPixmapData
operator|::
name|destroyTexture
parameter_list|()
block|{
if|if
condition|(
name|inTexturePool
condition|)
block|{
name|QGLTexturePool
modifier|*
name|pool
init|=
name|QGLTexturePool
operator|::
name|instance
argument_list|()
decl_stmt|;
if|if
condition|(
name|m_texture
operator|.
name|id
condition|)
name|pool
operator|->
name|releaseTexture
argument_list|(
name|this
argument_list|,
name|m_texture
operator|.
name|id
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|m_texture
operator|.
name|id
condition|)
block|{
name|QGLWidget
modifier|*
name|shareWidget
init|=
name|qt_gl_share_widget
argument_list|()
decl_stmt|;
if|if
condition|(
name|shareWidget
condition|)
block|{
name|QGLShareContextScope
name|ctx
argument_list|(
name|shareWidget
operator|->
name|context
argument_list|()
argument_list|)
decl_stmt|;
name|glDeleteTextures
argument_list|(
literal|1
argument_list|,
operator|&
name|m_texture
operator|.
name|id
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|m_texture
operator|.
name|id
operator|=
literal|0
expr_stmt|;
name|inTexturePool
operator|=
literal|false
expr_stmt|;
name|releaseNativeImageHandle
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|createCompatiblePixmapData
name|QPixmapData
modifier|*
name|QGLPixmapData
operator|::
name|createCompatiblePixmapData
parameter_list|()
specifier|const
block|{
return|return
operator|new
name|QGLPixmapData
argument_list|(
name|pixelType
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|isValid
name|bool
name|QGLPixmapData
operator|::
name|isValid
parameter_list|()
specifier|const
block|{
return|return
name|w
operator|>
literal|0
operator|&&
name|h
operator|>
literal|0
return|;
block|}
end_function
begin_function
DECL|function|isValidContext
name|bool
name|QGLPixmapData
operator|::
name|isValidContext
parameter_list|(
specifier|const
name|QGLContext
modifier|*
name|ctx
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|ctx
operator|==
name|m_ctx
condition|)
return|return
literal|true
return|;
specifier|const
name|QGLContext
modifier|*
name|share_ctx
init|=
name|qt_gl_share_widget
argument_list|()
operator|->
name|context
argument_list|()
decl_stmt|;
return|return
name|ctx
operator|==
name|share_ctx
operator|||
name|QGLContext
operator|::
name|areSharing
argument_list|(
name|ctx
argument_list|,
name|share_ctx
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|resize
name|void
name|QGLPixmapData
operator|::
name|resize
parameter_list|(
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|)
block|{
if|if
condition|(
name|width
operator|==
name|w
operator|&&
name|height
operator|==
name|h
condition|)
return|return;
if|if
condition|(
name|width
operator|<=
literal|0
operator|||
name|height
operator|<=
literal|0
condition|)
block|{
name|width
operator|=
literal|0
expr_stmt|;
name|height
operator|=
literal|0
expr_stmt|;
block|}
name|w
operator|=
name|width
expr_stmt|;
name|h
operator|=
name|height
expr_stmt|;
name|is_null
operator|=
operator|(
name|w
operator|<=
literal|0
operator|||
name|h
operator|<=
literal|0
operator|)
expr_stmt|;
name|d
operator|=
name|pixelType
argument_list|()
operator|==
name|QPixmapData
operator|::
name|PixmapType
condition|?
literal|32
else|:
literal|1
expr_stmt|;
name|destroyTexture
argument_list|()
expr_stmt|;
name|m_source
operator|=
name|QVolatileImage
argument_list|()
expr_stmt|;
name|m_dirty
operator|=
name|isValid
argument_list|()
expr_stmt|;
name|setSerialNumber
argument_list|(
operator|++
name|qt_gl_pixmap_serial
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|ensureCreated
name|void
name|QGLPixmapData
operator|::
name|ensureCreated
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|m_dirty
condition|)
return|return;
name|m_dirty
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|nativeImageHandleProvider
operator|&&
operator|!
name|nativeImageHandle
condition|)
cast|const_cast
argument_list|<
name|QGLPixmapData
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
operator|->
name|createFromNativeImageHandleProvider
argument_list|()
expr_stmt|;
name|QGLShareContextScope
name|ctx
argument_list|(
name|qt_gl_share_widget
argument_list|()
operator|->
name|context
argument_list|()
argument_list|)
decl_stmt|;
name|m_ctx
operator|=
name|ctx
expr_stmt|;
specifier|const
name|GLenum
name|internal_format
init|=
name|m_hasAlpha
condition|?
name|GL_RGBA
else|:
name|GL_RGB
decl_stmt|;
ifdef|#
directive|ifdef
name|QT_OPENGL_ES_2
specifier|const
name|GLenum
name|external_format
init|=
name|internal_format
decl_stmt|;
else|#
directive|else
specifier|const
name|GLenum
name|external_format
init|=
name|qt_gl_preferredTextureFormat
argument_list|()
decl_stmt|;
endif|#
directive|endif
specifier|const
name|GLenum
name|target
init|=
name|GL_TEXTURE_2D
decl_stmt|;
name|GLenum
name|type
init|=
name|GL_UNSIGNED_BYTE
decl_stmt|;
comment|// Avoid conversion when pixmap is created from CFbsBitmap of EColor64K.
if|if
condition|(
operator|!
name|m_source
operator|.
name|isNull
argument_list|()
operator|&&
name|m_source
operator|.
name|format
argument_list|()
operator|==
name|QImage
operator|::
name|Format_RGB16
condition|)
name|type
operator|=
name|GL_UNSIGNED_SHORT_5_6_5
expr_stmt|;
name|m_texture
operator|.
name|options
operator|&=
operator|~
name|QGLContext
operator|::
name|MemoryManagedBindOption
expr_stmt|;
if|if
condition|(
operator|!
name|m_texture
operator|.
name|id
condition|)
block|{
name|m_texture
operator|.
name|id
operator|=
name|QGLTexturePool
operator|::
name|instance
argument_list|()
operator|->
name|createTextureForPixmap
argument_list|(
name|target
argument_list|,
literal|0
argument_list|,
name|internal_format
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|external_format
argument_list|,
name|type
argument_list|,
cast|const_cast
argument_list|<
name|QGLPixmapData
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|m_texture
operator|.
name|id
condition|)
block|{
name|failedToAlloc
operator|=
literal|true
expr_stmt|;
return|return;
block|}
name|glTexParameterf
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
name|GL_TEXTURE_MAG_FILTER
argument_list|,
name|GL_NEAREST
argument_list|)
expr_stmt|;
name|glTexParameterf
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
name|GL_TEXTURE_MIN_FILTER
argument_list|,
name|GL_NEAREST
argument_list|)
expr_stmt|;
name|inTexturePool
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|inTexturePool
condition|)
block|{
name|glBindTexture
argument_list|(
name|target
argument_list|,
name|m_texture
operator|.
name|id
argument_list|)
expr_stmt|;
name|QGLTexturePool
operator|::
name|instance
argument_list|()
operator|->
name|useTexture
argument_list|(
cast|const_cast
argument_list|<
name|QGLPixmapData
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|m_source
operator|.
name|isNull
argument_list|()
operator|&&
name|m_texture
operator|.
name|id
condition|)
block|{
if|if
condition|(
name|external_format
operator|==
name|GL_RGB
condition|)
block|{
name|m_source
operator|.
name|beginDataAccess
argument_list|()
expr_stmt|;
name|QImage
name|tx
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|GL_UNSIGNED_BYTE
condition|)
name|tx
operator|=
name|m_source
operator|.
name|imageRef
argument_list|()
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_RGB888
argument_list|)
operator|.
name|mirrored
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|type
operator|==
name|GL_UNSIGNED_SHORT_5_6_5
condition|)
name|tx
operator|=
name|m_source
operator|.
name|imageRef
argument_list|()
operator|.
name|mirrored
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|m_source
operator|.
name|endDataAccess
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|glBindTexture
argument_list|(
name|target
argument_list|,
name|m_texture
operator|.
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|tx
operator|.
name|isNull
argument_list|()
condition|)
name|glTexSubImage2D
argument_list|(
name|target
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|external_format
argument_list|,
name|type
argument_list|,
name|tx
operator|.
name|constBits
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|qWarning
argument_list|(
literal|"QGLPixmapData: Failed to create GL_RGB image of size %dx%d"
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// do byte swizzling ARGB -> RGBA
name|m_source
operator|.
name|beginDataAccess
argument_list|()
expr_stmt|;
specifier|const
name|QImage
name|tx
init|=
name|ctx
operator|->
name|d_func
argument_list|()
operator|->
name|convertToGLFormat
argument_list|(
name|m_source
operator|.
name|imageRef
argument_list|()
argument_list|,
literal|true
argument_list|,
name|external_format
argument_list|)
decl_stmt|;
name|m_source
operator|.
name|endDataAccess
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|glBindTexture
argument_list|(
name|target
argument_list|,
name|m_texture
operator|.
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|tx
operator|.
name|isNull
argument_list|()
condition|)
name|glTexSubImage2D
argument_list|(
name|target
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|external_format
argument_list|,
name|type
argument_list|,
name|tx
operator|.
name|constBits
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|qWarning
argument_list|(
literal|"QGLPixmapData: Failed to create GL_RGBA image of size %dx%d"
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|useFramebufferObjects
argument_list|()
condition|)
name|m_source
operator|=
name|QVolatileImage
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|fromImage
name|void
name|QGLPixmapData
operator|::
name|fromImage
parameter_list|(
specifier|const
name|QImage
modifier|&
name|image
parameter_list|,
name|Qt
operator|::
name|ImageConversionFlags
name|flags
parameter_list|)
block|{
name|QImage
name|img
init|=
name|image
decl_stmt|;
name|createPixmapForImage
argument_list|(
name|img
argument_list|,
name|flags
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fromImageReader
name|void
name|QGLPixmapData
operator|::
name|fromImageReader
parameter_list|(
name|QImageReader
modifier|*
name|imageReader
parameter_list|,
name|Qt
operator|::
name|ImageConversionFlags
name|flags
parameter_list|)
block|{
name|QImage
name|image
init|=
name|imageReader
operator|->
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|image
operator|.
name|isNull
argument_list|()
condition|)
return|return;
name|createPixmapForImage
argument_list|(
name|image
argument_list|,
name|flags
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fromFile
name|bool
name|QGLPixmapData
operator|::
name|fromFile
parameter_list|(
specifier|const
name|QString
modifier|&
name|filename
parameter_list|,
specifier|const
name|char
modifier|*
name|format
parameter_list|,
name|Qt
operator|::
name|ImageConversionFlags
name|flags
parameter_list|)
block|{
if|if
condition|(
name|pixelType
argument_list|()
operator|==
name|QPixmapData
operator|::
name|BitmapType
condition|)
return|return
name|QPixmapData
operator|::
name|fromFile
argument_list|(
name|filename
argument_list|,
name|format
argument_list|,
name|flags
argument_list|)
return|;
name|QFile
name|file
argument_list|(
name|filename
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
condition|)
block|{
name|QByteArray
name|data
init|=
name|file
operator|.
name|peek
argument_list|(
literal|64
argument_list|)
decl_stmt|;
name|bool
name|alpha
decl_stmt|;
if|if
condition|(
name|m_texture
operator|.
name|canBindCompressedTexture
argument_list|(
name|data
operator|.
name|constData
argument_list|()
argument_list|,
name|data
operator|.
name|size
argument_list|()
argument_list|,
name|format
argument_list|,
operator|&
name|alpha
argument_list|)
condition|)
block|{
name|resize
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|data
operator|=
name|file
operator|.
name|readAll
argument_list|()
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
name|QGLShareContextScope
name|ctx
argument_list|(
name|qt_gl_share_widget
argument_list|()
operator|->
name|context
argument_list|()
argument_list|)
decl_stmt|;
name|QSize
name|size
init|=
name|m_texture
operator|.
name|bindCompressedTexture
argument_list|(
name|data
operator|.
name|constData
argument_list|()
argument_list|,
name|data
operator|.
name|size
argument_list|()
argument_list|,
name|format
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|size
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|w
operator|=
name|size
operator|.
name|width
argument_list|()
expr_stmt|;
name|h
operator|=
name|size
operator|.
name|height
argument_list|()
expr_stmt|;
name|is_null
operator|=
literal|false
expr_stmt|;
name|d
operator|=
literal|32
expr_stmt|;
name|m_hasAlpha
operator|=
name|alpha
expr_stmt|;
name|m_source
operator|=
name|QVolatileImage
argument_list|()
expr_stmt|;
name|m_dirty
operator|=
name|isValid
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
name|QImage
name|image
init|=
name|QImageReader
argument_list|(
name|filename
argument_list|,
name|format
argument_list|)
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|image
operator|.
name|isNull
argument_list|()
condition|)
return|return
literal|false
return|;
name|createPixmapForImage
argument_list|(
name|image
argument_list|,
name|flags
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
operator|!
name|isNull
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|fromData
name|bool
name|QGLPixmapData
operator|::
name|fromData
parameter_list|(
specifier|const
name|uchar
modifier|*
name|buffer
parameter_list|,
name|uint
name|len
parameter_list|,
specifier|const
name|char
modifier|*
name|format
parameter_list|,
name|Qt
operator|::
name|ImageConversionFlags
name|flags
parameter_list|)
block|{
name|bool
name|alpha
decl_stmt|;
specifier|const
name|char
modifier|*
name|buf
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_texture
operator|.
name|canBindCompressedTexture
argument_list|(
name|buf
argument_list|,
name|int
argument_list|(
name|len
argument_list|)
argument_list|,
name|format
argument_list|,
operator|&
name|alpha
argument_list|)
condition|)
block|{
name|resize
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QGLShareContextScope
name|ctx
argument_list|(
name|qt_gl_share_widget
argument_list|()
operator|->
name|context
argument_list|()
argument_list|)
decl_stmt|;
name|QSize
name|size
init|=
name|m_texture
operator|.
name|bindCompressedTexture
argument_list|(
name|buf
argument_list|,
name|int
argument_list|(
name|len
argument_list|)
argument_list|,
name|format
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|size
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|w
operator|=
name|size
operator|.
name|width
argument_list|()
expr_stmt|;
name|h
operator|=
name|size
operator|.
name|height
argument_list|()
expr_stmt|;
name|is_null
operator|=
literal|false
expr_stmt|;
name|d
operator|=
literal|32
expr_stmt|;
name|m_hasAlpha
operator|=
name|alpha
expr_stmt|;
name|m_source
operator|=
name|QVolatileImage
argument_list|()
expr_stmt|;
name|m_dirty
operator|=
name|isValid
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
name|QByteArray
name|a
init|=
name|QByteArray
operator|::
name|fromRawData
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|buffer
argument_list|)
argument_list|,
name|len
argument_list|)
decl_stmt|;
name|QBuffer
name|b
argument_list|(
operator|&
name|a
argument_list|)
decl_stmt|;
name|b
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|QImage
name|image
init|=
name|QImageReader
argument_list|(
operator|&
name|b
argument_list|,
name|format
argument_list|)
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|image
operator|.
name|isNull
argument_list|()
condition|)
return|return
literal|false
return|;
name|createPixmapForImage
argument_list|(
name|image
argument_list|,
name|flags
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
operator|!
name|isNull
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|idealFormat
name|QImage
operator|::
name|Format
name|QGLPixmapData
operator|::
name|idealFormat
parameter_list|(
name|QImage
modifier|&
name|image
parameter_list|,
name|Qt
operator|::
name|ImageConversionFlags
name|flags
parameter_list|)
block|{
name|QImage
operator|::
name|Format
name|format
init|=
name|QImage
operator|::
name|Format_RGB32
decl_stmt|;
if|if
condition|(
name|qApp
operator|->
name|desktop
argument_list|()
operator|->
name|depth
argument_list|()
operator|==
literal|16
condition|)
name|format
operator|=
name|QImage
operator|::
name|Format_RGB16
expr_stmt|;
if|if
condition|(
name|image
operator|.
name|hasAlphaChannel
argument_list|()
operator|&&
operator|(
operator|(
name|flags
operator|&
name|Qt
operator|::
name|NoOpaqueDetection
operator|)
operator|||
cast|const_cast
argument_list|<
name|QImage
operator|&
argument_list|>
argument_list|(
name|image
argument_list|)
operator|.
name|data_ptr
argument_list|()
operator|->
name|checkForAlphaPixels
argument_list|()
operator|)
condition|)
name|format
operator|=
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
expr_stmt|;
return|return
name|format
return|;
block|}
end_function
begin_function
DECL|function|createPixmapForImage
name|void
name|QGLPixmapData
operator|::
name|createPixmapForImage
parameter_list|(
name|QImage
modifier|&
name|image
parameter_list|,
name|Qt
operator|::
name|ImageConversionFlags
name|flags
parameter_list|,
name|bool
name|inPlace
parameter_list|)
block|{
if|if
condition|(
name|image
operator|.
name|size
argument_list|()
operator|==
name|QSize
argument_list|(
name|w
argument_list|,
name|h
argument_list|)
condition|)
name|setSerialNumber
argument_list|(
operator|++
name|qt_gl_pixmap_serial
argument_list|)
expr_stmt|;
name|resize
argument_list|(
name|image
operator|.
name|width
argument_list|()
argument_list|,
name|image
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|pixelType
argument_list|()
operator|==
name|BitmapType
condition|)
block|{
name|QImage
name|convertedImage
init|=
name|image
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_MonoLSB
argument_list|)
decl_stmt|;
if|if
condition|(
name|image
operator|.
name|format
argument_list|()
operator|==
name|QImage
operator|::
name|Format_MonoLSB
condition|)
name|convertedImage
operator|.
name|detach
argument_list|()
expr_stmt|;
name|m_source
operator|=
name|QVolatileImage
argument_list|(
name|convertedImage
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QImage
operator|::
name|Format
name|format
init|=
name|idealFormat
argument_list|(
name|image
argument_list|,
name|flags
argument_list|)
decl_stmt|;
if|if
condition|(
name|inPlace
operator|&&
name|image
operator|.
name|data_ptr
argument_list|()
operator|->
name|convertInPlace
argument_list|(
name|format
argument_list|,
name|flags
argument_list|)
condition|)
block|{
name|m_source
operator|=
name|QVolatileImage
argument_list|(
name|image
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QImage
name|convertedImage
init|=
name|image
operator|.
name|convertToFormat
argument_list|(
name|format
argument_list|)
decl_stmt|;
comment|// convertToFormat won't detach the image if format stays the same.
if|if
condition|(
name|image
operator|.
name|format
argument_list|()
operator|==
name|format
condition|)
name|convertedImage
operator|.
name|detach
argument_list|()
expr_stmt|;
name|m_source
operator|=
name|QVolatileImage
argument_list|(
name|convertedImage
argument_list|)
expr_stmt|;
block|}
block|}
name|m_dirty
operator|=
literal|true
expr_stmt|;
name|m_hasFillColor
operator|=
literal|false
expr_stmt|;
name|m_hasAlpha
operator|=
name|m_source
operator|.
name|hasAlphaChannel
argument_list|()
expr_stmt|;
name|w
operator|=
name|image
operator|.
name|width
argument_list|()
expr_stmt|;
name|h
operator|=
name|image
operator|.
name|height
argument_list|()
expr_stmt|;
name|is_null
operator|=
operator|(
name|w
operator|<=
literal|0
operator|||
name|h
operator|<=
literal|0
operator|)
expr_stmt|;
name|d
operator|=
name|m_source
operator|.
name|depth
argument_list|()
expr_stmt|;
name|destroyTexture
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|scroll
name|bool
name|QGLPixmapData
operator|::
name|scroll
parameter_list|(
name|int
name|dx
parameter_list|,
name|int
name|dy
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|dx
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|dy
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|rect
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|copy
name|void
name|QGLPixmapData
operator|::
name|copy
parameter_list|(
specifier|const
name|QPixmapData
modifier|*
name|data
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
block|{
if|if
condition|(
name|data
operator|->
name|classId
argument_list|()
operator|!=
name|QPixmapData
operator|::
name|OpenGLClass
operator|||
operator|!
cast|static_cast
argument_list|<
specifier|const
name|QGLPixmapData
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
operator|->
name|useFramebufferObjects
argument_list|()
condition|)
block|{
name|QPixmapData
operator|::
name|copy
argument_list|(
name|data
argument_list|,
name|rect
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|const
name|QGLPixmapData
modifier|*
name|other
init|=
cast|static_cast
argument_list|<
specifier|const
name|QGLPixmapData
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
decl_stmt|;
if|if
condition|(
name|other
operator|->
name|m_renderFbo
condition|)
block|{
name|QGLShareContextScope
name|ctx
argument_list|(
name|qt_gl_share_widget
argument_list|()
operator|->
name|context
argument_list|()
argument_list|)
decl_stmt|;
name|resize
argument_list|(
name|rect
operator|.
name|width
argument_list|()
argument_list|,
name|rect
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|m_hasAlpha
operator|=
name|other
operator|->
name|m_hasAlpha
expr_stmt|;
name|ensureCreated
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|ctx
operator|->
name|d_ptr
operator|->
name|fbo
condition|)
name|glGenFramebuffers
argument_list|(
literal|1
argument_list|,
operator|&
name|ctx
operator|->
name|d_ptr
operator|->
name|fbo
argument_list|)
expr_stmt|;
name|glBindFramebuffer
argument_list|(
name|GL_DRAW_FRAMEBUFFER_EXT
argument_list|,
name|ctx
operator|->
name|d_ptr
operator|->
name|fbo
argument_list|)
expr_stmt|;
name|glFramebufferTexture2D
argument_list|(
name|GL_DRAW_FRAMEBUFFER_EXT
argument_list|,
name|GL_COLOR_ATTACHMENT0_EXT
argument_list|,
name|GL_TEXTURE_2D
argument_list|,
name|m_texture
operator|.
name|id
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|other
operator|->
name|m_renderFbo
operator|->
name|isBound
argument_list|()
condition|)
name|glBindFramebuffer
argument_list|(
name|GL_READ_FRAMEBUFFER_EXT
argument_list|,
name|other
operator|->
name|m_renderFbo
operator|->
name|handle
argument_list|()
argument_list|)
expr_stmt|;
name|glDisable
argument_list|(
name|GL_SCISSOR_TEST
argument_list|)
expr_stmt|;
if|if
condition|(
name|ctx
operator|->
name|d_ptr
operator|->
name|active_engine
operator|&&
name|ctx
operator|->
name|d_ptr
operator|->
name|active_engine
operator|->
name|type
argument_list|()
operator|==
name|QPaintEngine
operator|::
name|OpenGL2
condition|)
cast|static_cast
argument_list|<
name|QGL2PaintEngineEx
operator|*
argument_list|>
argument_list|(
name|ctx
operator|->
name|d_ptr
operator|->
name|active_engine
argument_list|)
operator|->
name|invalidateState
argument_list|()
expr_stmt|;
name|glBlitFramebufferEXT
argument_list|(
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|rect
operator|.
name|y
argument_list|()
argument_list|,
name|rect
operator|.
name|x
argument_list|()
operator|+
name|rect
operator|.
name|width
argument_list|()
argument_list|,
name|rect
operator|.
name|y
argument_list|()
operator|+
name|rect
operator|.
name|height
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|GL_COLOR_BUFFER_BIT
argument_list|,
name|GL_NEAREST
argument_list|)
expr_stmt|;
name|glBindFramebuffer
argument_list|(
name|GL_FRAMEBUFFER_EXT
argument_list|,
name|ctx
operator|->
name|d_ptr
operator|->
name|current_fbo
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QPixmapData
operator|::
name|copy
argument_list|(
name|data
argument_list|,
name|rect
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|fill
name|void
name|QGLPixmapData
operator|::
name|fill
parameter_list|(
specifier|const
name|QColor
modifier|&
name|color
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isValid
argument_list|()
condition|)
return|return;
name|bool
name|hasAlpha
init|=
name|color
operator|.
name|alpha
argument_list|()
operator|!=
literal|255
decl_stmt|;
if|if
condition|(
name|hasAlpha
operator|&&
operator|!
name|m_hasAlpha
condition|)
block|{
if|if
condition|(
name|m_texture
operator|.
name|id
condition|)
block|{
name|destroyTexture
argument_list|()
expr_stmt|;
name|m_dirty
operator|=
literal|true
expr_stmt|;
block|}
name|m_hasAlpha
operator|=
name|color
operator|.
name|alpha
argument_list|()
operator|!=
literal|255
expr_stmt|;
block|}
if|if
condition|(
name|useFramebufferObjects
argument_list|()
condition|)
block|{
name|m_source
operator|=
name|QVolatileImage
argument_list|()
expr_stmt|;
name|m_hasFillColor
operator|=
literal|true
expr_stmt|;
name|m_fillColor
operator|=
name|color
expr_stmt|;
block|}
else|else
block|{
name|forceToImage
argument_list|()
expr_stmt|;
if|if
condition|(
name|m_source
operator|.
name|depth
argument_list|()
operator|==
literal|32
condition|)
block|{
name|m_source
operator|.
name|fill
argument_list|(
name|PREMUL
argument_list|(
name|color
operator|.
name|rgba
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|m_source
operator|.
name|depth
argument_list|()
operator|==
literal|1
condition|)
block|{
if|if
condition|(
name|color
operator|==
name|Qt
operator|::
name|color1
condition|)
name|m_source
operator|.
name|fill
argument_list|(
literal|1
argument_list|)
expr_stmt|;
else|else
name|m_source
operator|.
name|fill
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|hasAlphaChannel
name|bool
name|QGLPixmapData
operator|::
name|hasAlphaChannel
parameter_list|()
specifier|const
block|{
return|return
name|m_hasAlpha
return|;
block|}
end_function
begin_function
DECL|function|fillImage
name|QImage
name|QGLPixmapData
operator|::
name|fillImage
parameter_list|(
specifier|const
name|QColor
modifier|&
name|color
parameter_list|)
specifier|const
block|{
name|QImage
name|img
decl_stmt|;
if|if
condition|(
name|pixelType
argument_list|()
operator|==
name|BitmapType
condition|)
block|{
name|img
operator|=
name|QImage
argument_list|(
name|w
argument_list|,
name|h
argument_list|,
name|QImage
operator|::
name|Format_MonoLSB
argument_list|)
expr_stmt|;
name|img
operator|.
name|setColorCount
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|img
operator|.
name|setColor
argument_list|(
literal|0
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|color0
argument_list|)
operator|.
name|rgba
argument_list|()
argument_list|)
expr_stmt|;
name|img
operator|.
name|setColor
argument_list|(
literal|1
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|color1
argument_list|)
operator|.
name|rgba
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|color
operator|==
name|Qt
operator|::
name|color1
condition|)
name|img
operator|.
name|fill
argument_list|(
literal|1
argument_list|)
expr_stmt|;
else|else
name|img
operator|.
name|fill
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|img
operator|=
name|QImage
argument_list|(
name|w
argument_list|,
name|h
argument_list|,
name|m_hasAlpha
condition|?
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
else|:
name|QImage
operator|::
name|Format_RGB32
argument_list|)
expr_stmt|;
name|img
operator|.
name|fill
argument_list|(
name|PREMUL
argument_list|(
name|color
operator|.
name|rgba
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|img
return|;
block|}
end_function
begin_function_decl
specifier|extern
name|QImage
name|qt_gl_read_texture
parameter_list|(
specifier|const
name|QSize
modifier|&
name|size
parameter_list|,
name|bool
name|alpha_format
parameter_list|,
name|bool
name|include_alpha
parameter_list|)
function_decl|;
end_function_decl
begin_function
DECL|function|toImage
name|QImage
name|QGLPixmapData
operator|::
name|toImage
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|isValid
argument_list|()
condition|)
return|return
name|QImage
argument_list|()
return|;
if|if
condition|(
name|m_renderFbo
condition|)
block|{
name|copyBackFromRenderFbo
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|m_source
operator|.
name|isNull
argument_list|()
condition|)
block|{
comment|// QVolatileImage::toImage() will make a copy always so no check
comment|// for active painting is needed.
name|QImage
name|img
init|=
name|m_source
operator|.
name|toImage
argument_list|()
decl_stmt|;
if|if
condition|(
name|img
operator|.
name|format
argument_list|()
operator|==
name|QImage
operator|::
name|Format_MonoLSB
condition|)
block|{
name|img
operator|.
name|setColorCount
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|img
operator|.
name|setColor
argument_list|(
literal|0
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|color0
argument_list|)
operator|.
name|rgba
argument_list|()
argument_list|)
expr_stmt|;
name|img
operator|.
name|setColor
argument_list|(
literal|1
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|color1
argument_list|)
operator|.
name|rgba
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|img
return|;
block|}
elseif|else
if|if
condition|(
name|m_dirty
operator|||
name|m_hasFillColor
condition|)
block|{
return|return
name|fillImage
argument_list|(
name|m_fillColor
argument_list|)
return|;
block|}
else|else
block|{
name|ensureCreated
argument_list|()
expr_stmt|;
block|}
name|QGLShareContextScope
name|ctx
argument_list|(
name|qt_gl_share_widget
argument_list|()
operator|->
name|context
argument_list|()
argument_list|)
decl_stmt|;
name|glBindTexture
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
name|m_texture
operator|.
name|id
argument_list|)
expr_stmt|;
return|return
name|qt_gl_read_texture
argument_list|(
name|QSize
argument_list|(
name|w
argument_list|,
name|h
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
return|;
block|}
end_function
begin_struct
DECL|struct|TextureBuffer
struct|struct
name|TextureBuffer
block|{
DECL|member|fbo
name|QGLFramebufferObject
modifier|*
name|fbo
decl_stmt|;
DECL|member|engine
name|QGL2PaintEngineEx
modifier|*
name|engine
decl_stmt|;
block|}
struct|;
end_struct
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|QGLFramebufferObjectPool
argument_list|,
argument|_qgl_fbo_pool
argument_list|)
end_macro
begin_function
DECL|function|qgl_fbo_pool
name|QGLFramebufferObjectPool
modifier|*
name|qgl_fbo_pool
parameter_list|()
block|{
return|return
name|_qgl_fbo_pool
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|copyBackFromRenderFbo
name|void
name|QGLPixmapData
operator|::
name|copyBackFromRenderFbo
parameter_list|(
name|bool
name|keepCurrentFboBound
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|isValid
argument_list|()
condition|)
return|return;
name|m_hasFillColor
operator|=
literal|false
expr_stmt|;
specifier|const
name|QGLContext
modifier|*
name|share_ctx
init|=
name|qt_gl_share_widget
argument_list|()
operator|->
name|context
argument_list|()
decl_stmt|;
name|QGLShareContextScope
name|ctx
argument_list|(
name|share_ctx
argument_list|)
decl_stmt|;
name|ensureCreated
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|ctx
operator|->
name|d_ptr
operator|->
name|fbo
condition|)
name|glGenFramebuffers
argument_list|(
literal|1
argument_list|,
operator|&
name|ctx
operator|->
name|d_ptr
operator|->
name|fbo
argument_list|)
expr_stmt|;
name|glBindFramebuffer
argument_list|(
name|GL_DRAW_FRAMEBUFFER_EXT
argument_list|,
name|ctx
operator|->
name|d_ptr
operator|->
name|fbo
argument_list|)
expr_stmt|;
name|glFramebufferTexture2D
argument_list|(
name|GL_DRAW_FRAMEBUFFER_EXT
argument_list|,
name|GL_COLOR_ATTACHMENT0_EXT
argument_list|,
name|GL_TEXTURE_2D
argument_list|,
name|m_texture
operator|.
name|id
argument_list|,
literal|0
argument_list|)
expr_stmt|;
specifier|const
name|int
name|x0
init|=
literal|0
decl_stmt|;
specifier|const
name|int
name|x1
init|=
name|w
decl_stmt|;
specifier|const
name|int
name|y0
init|=
literal|0
decl_stmt|;
specifier|const
name|int
name|y1
init|=
name|h
decl_stmt|;
if|if
condition|(
operator|!
name|m_renderFbo
operator|->
name|isBound
argument_list|()
condition|)
name|glBindFramebuffer
argument_list|(
name|GL_READ_FRAMEBUFFER_EXT
argument_list|,
name|m_renderFbo
operator|->
name|handle
argument_list|()
argument_list|)
expr_stmt|;
name|glDisable
argument_list|(
name|GL_SCISSOR_TEST
argument_list|)
expr_stmt|;
name|glBlitFramebufferEXT
argument_list|(
name|x0
argument_list|,
name|y0
argument_list|,
name|x1
argument_list|,
name|y1
argument_list|,
name|x0
argument_list|,
name|y0
argument_list|,
name|x1
argument_list|,
name|y1
argument_list|,
name|GL_COLOR_BUFFER_BIT
argument_list|,
name|GL_NEAREST
argument_list|)
expr_stmt|;
if|if
condition|(
name|keepCurrentFboBound
condition|)
block|{
name|glBindFramebuffer
argument_list|(
name|GL_FRAMEBUFFER_EXT
argument_list|,
name|ctx
operator|->
name|d_ptr
operator|->
name|current_fbo
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|glBindFramebuffer
argument_list|(
name|GL_DRAW_FRAMEBUFFER_EXT
argument_list|,
name|m_renderFbo
operator|->
name|handle
argument_list|()
argument_list|)
expr_stmt|;
name|ctx
operator|->
name|d_ptr
operator|->
name|current_fbo
operator|=
name|m_renderFbo
operator|->
name|handle
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|useFramebufferObjects
name|bool
name|QGLPixmapData
operator|::
name|useFramebufferObjects
parameter_list|()
specifier|const
block|{
ifdef|#
directive|ifdef
name|Q_OS_SYMBIAN
comment|// We don't want to use FBOs on Symbian
return|return
literal|false
return|;
else|#
directive|else
return|return
name|QGLFramebufferObject
operator|::
name|hasOpenGLFramebufferObjects
argument_list|()
operator|&&
name|QGLFramebufferObject
operator|::
name|hasOpenGLFramebufferBlit
argument_list|()
operator|&&
name|qt_gl_preferGL2Engine
argument_list|()
operator|&&
operator|(
name|w
operator|*
name|h
operator|>
literal|32
operator|*
literal|32
operator|)
return|;
comment|// avoid overhead of FBOs for small pixmaps
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|paintEngine
name|QPaintEngine
modifier|*
name|QGLPixmapData
operator|::
name|paintEngine
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|isValid
argument_list|()
condition|)
return|return
literal|0
return|;
if|if
condition|(
name|m_renderFbo
condition|)
return|return
name|m_engine
return|;
if|if
condition|(
name|useFramebufferObjects
argument_list|()
condition|)
block|{
specifier|extern
name|QGLWidget
modifier|*
name|qt_gl_share_widget
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|QGLContext
operator|::
name|currentContext
argument_list|()
condition|)
name|qt_gl_share_widget
argument_list|()
operator|->
name|makeCurrent
argument_list|()
expr_stmt|;
name|QGLShareContextScope
name|ctx
argument_list|(
name|qt_gl_share_widget
argument_list|()
operator|->
name|context
argument_list|()
argument_list|)
decl_stmt|;
name|QGLFramebufferObjectFormat
name|format
decl_stmt|;
name|format
operator|.
name|setAttachment
argument_list|(
name|QGLFramebufferObject
operator|::
name|CombinedDepthStencil
argument_list|)
expr_stmt|;
name|format
operator|.
name|setSamples
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|format
operator|.
name|setInternalTextureFormat
argument_list|(
name|GLenum
argument_list|(
name|m_hasAlpha
condition|?
name|GL_RGBA
else|:
name|GL_RGB
argument_list|)
argument_list|)
expr_stmt|;
name|m_renderFbo
operator|=
name|qgl_fbo_pool
argument_list|()
operator|->
name|acquire
argument_list|(
name|size
argument_list|()
argument_list|,
name|format
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_renderFbo
condition|)
block|{
if|if
condition|(
operator|!
name|m_engine
condition|)
name|m_engine
operator|=
operator|new
name|QGL2PaintEngineEx
expr_stmt|;
return|return
name|m_engine
return|;
block|}
name|qWarning
argument_list|()
operator|<<
literal|"Failed to create pixmap texture buffer of size "
operator|<<
name|size
argument_list|()
operator|<<
literal|", falling back to raster paint engine"
expr_stmt|;
block|}
comment|// If the application wants to paint into the QPixmap, we first
comment|// force it to QImage format and then paint into that.
comment|// This is simpler than juggling multiple GL contexts.
cast|const_cast
argument_list|<
name|QGLPixmapData
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
operator|->
name|forceToImage
argument_list|()
expr_stmt|;
if|if
condition|(
name|m_hasFillColor
condition|)
block|{
name|m_source
operator|.
name|fill
argument_list|(
name|PREMUL
argument_list|(
name|m_fillColor
operator|.
name|rgba
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|m_hasFillColor
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|m_source
operator|.
name|paintEngine
argument_list|()
return|;
block|}
end_function
begin_function_decl
specifier|extern
name|QRgb
name|qt_gl_convertToGLFormat
parameter_list|(
name|QRgb
name|src_pixel
parameter_list|,
name|GLenum
name|texture_format
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|// If copyBack is true, bind will copy the contents of the render
end_comment
begin_comment
comment|// FBO to the texture (which is not bound to the texture, as it's
end_comment
begin_comment
comment|// a multisample FBO).
end_comment
begin_function
DECL|function|bind
name|GLuint
name|QGLPixmapData
operator|::
name|bind
parameter_list|(
name|bool
name|copyBack
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|m_renderFbo
operator|&&
name|copyBack
condition|)
block|{
name|copyBackFromRenderFbo
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ensureCreated
argument_list|()
expr_stmt|;
block|}
name|GLuint
name|id
init|=
name|m_texture
operator|.
name|id
decl_stmt|;
name|glBindTexture
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_hasFillColor
condition|)
block|{
if|if
condition|(
operator|!
name|useFramebufferObjects
argument_list|()
condition|)
block|{
name|m_source
operator|=
name|QVolatileImage
argument_list|(
name|w
argument_list|,
name|h
argument_list|,
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
expr_stmt|;
name|m_source
operator|.
name|fill
argument_list|(
name|PREMUL
argument_list|(
name|m_fillColor
operator|.
name|rgba
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|m_hasFillColor
operator|=
literal|false
expr_stmt|;
name|GLenum
name|format
init|=
name|qt_gl_preferredTextureFormat
argument_list|()
decl_stmt|;
name|QImage
name|tx
argument_list|(
name|w
argument_list|,
name|h
argument_list|,
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
decl_stmt|;
name|tx
operator|.
name|fill
argument_list|(
name|qt_gl_convertToGLFormat
argument_list|(
name|m_fillColor
operator|.
name|rgba
argument_list|()
argument_list|,
name|format
argument_list|)
argument_list|)
expr_stmt|;
name|glTexSubImage2D
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|format
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|tx
operator|.
name|constBits
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|id
return|;
block|}
end_function
begin_function
DECL|function|texture
name|QGLTexture
modifier|*
name|QGLPixmapData
operator|::
name|texture
parameter_list|()
specifier|const
block|{
return|return
operator|&
name|m_texture
return|;
block|}
end_function
begin_function
DECL|function|detachTextureFromPool
name|void
name|QGLPixmapData
operator|::
name|detachTextureFromPool
parameter_list|()
block|{
if|if
condition|(
name|inTexturePool
condition|)
block|{
name|QGLTexturePool
operator|::
name|instance
argument_list|()
operator|->
name|detachTexture
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|inTexturePool
operator|=
literal|false
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|hibernate
name|void
name|QGLPixmapData
operator|::
name|hibernate
parameter_list|()
block|{
comment|// If the image was imported (e.g, from an SgImage under Symbian), then
comment|// skip the hibernation, there is no sense in copying it back to main
comment|// memory because the data is most likely shared between several processes.
name|bool
name|skipHibernate
init|=
operator|(
name|m_texture
operator|.
name|id
operator|&&
name|m_source
operator|.
name|isNull
argument_list|()
operator|)
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
comment|// However we have to proceed normally if the image was retrieved via
comment|// a handle provider.
name|skipHibernate
operator|&=
operator|!
name|nativeImageHandleProvider
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|skipHibernate
condition|)
return|return;
name|forceToImage
argument_list|()
expr_stmt|;
name|destroyTexture
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|reclaimTexture
name|void
name|QGLPixmapData
operator|::
name|reclaimTexture
parameter_list|()
block|{
if|if
condition|(
operator|!
name|inTexturePool
condition|)
return|return;
name|forceToImage
argument_list|()
expr_stmt|;
name|destroyTexture
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|metric
name|int
name|QGLPixmapData
operator|::
name|metric
parameter_list|(
name|QPaintDevice
operator|::
name|PaintDeviceMetric
name|metric
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|w
operator|==
literal|0
condition|)
return|return
literal|0
return|;
switch|switch
condition|(
name|metric
condition|)
block|{
case|case
name|QPaintDevice
operator|::
name|PdmWidth
case|:
return|return
name|w
return|;
case|case
name|QPaintDevice
operator|::
name|PdmHeight
case|:
return|return
name|h
return|;
case|case
name|QPaintDevice
operator|::
name|PdmNumColors
case|:
return|return
literal|0
return|;
case|case
name|QPaintDevice
operator|::
name|PdmDepth
case|:
return|return
name|d
return|;
case|case
name|QPaintDevice
operator|::
name|PdmWidthMM
case|:
return|return
name|qRound
argument_list|(
name|w
operator|*
literal|25.4
operator|/
name|qt_defaultDpiX
argument_list|()
argument_list|)
return|;
case|case
name|QPaintDevice
operator|::
name|PdmHeightMM
case|:
return|return
name|qRound
argument_list|(
name|h
operator|*
literal|25.4
operator|/
name|qt_defaultDpiY
argument_list|()
argument_list|)
return|;
case|case
name|QPaintDevice
operator|::
name|PdmDpiX
case|:
case|case
name|QPaintDevice
operator|::
name|PdmPhysicalDpiX
case|:
return|return
name|qt_defaultDpiX
argument_list|()
return|;
case|case
name|QPaintDevice
operator|::
name|PdmDpiY
case|:
case|case
name|QPaintDevice
operator|::
name|PdmPhysicalDpiY
case|:
return|return
name|qt_defaultDpiY
argument_list|()
return|;
default|default:
name|qWarning
argument_list|(
literal|"QGLPixmapData::metric(): Invalid metric"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
end_function
begin_comment
comment|// Force the pixmap data to be backed by some valid data.
end_comment
begin_function
DECL|function|forceToImage
name|void
name|QGLPixmapData
operator|::
name|forceToImage
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isValid
argument_list|()
condition|)
return|return;
if|if
condition|(
name|m_source
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|QImage
operator|::
name|Format
name|format
init|=
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
decl_stmt|;
if|if
condition|(
name|pixelType
argument_list|()
operator|==
name|BitmapType
condition|)
name|format
operator|=
name|QImage
operator|::
name|Format_MonoLSB
expr_stmt|;
name|m_source
operator|=
name|QVolatileImage
argument_list|(
name|w
argument_list|,
name|h
argument_list|,
name|format
argument_list|)
expr_stmt|;
block|}
name|m_dirty
operator|=
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|glDevice
name|QGLPaintDevice
modifier|*
name|QGLPixmapData
operator|::
name|glDevice
parameter_list|()
specifier|const
block|{
return|return
operator|&
name|m_glDevice
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
