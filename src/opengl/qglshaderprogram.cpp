begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtOpenGL module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qglshaderprogram.h"
end_include
begin_include
include|#
directive|include
file|"qglextensions_p.h"
end_include
begin_include
include|#
directive|include
file|"qgl_p.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/private/qobject_p.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qdebug.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qfile.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qvarlengtharray.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qvector.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_comment
comment|/*!     \class QGLShaderProgram     \inmodule QtOpenGL     \brief The QGLShaderProgram class allows OpenGL shader programs to be linked and used.     \since 4.6     \obsolete     \ingroup painting-3D      \section1 Introduction      This class supports shader programs written in the OpenGL Shading     Language (GLSL) and in the OpenGL/ES Shading Language (GLSL/ES).      QGLShader and QGLShaderProgram shelter the programmer from the details of     compiling and linking vertex and fragment shaders.      The following example creates a vertex shader program using the     supplied source \c{code}.  Once compiled and linked, the shader     program is activated in the current QGLContext by calling     QGLShaderProgram::bind():      \snippet code/src_opengl_qglshaderprogram.cpp 0      \section1 Writing portable shaders      Shader programs can be difficult to reuse across OpenGL implementations     because of varying levels of support for standard vertex attributes and     uniform variables.  In particular, GLSL/ES lacks all of the     standard variables that are present on desktop OpenGL systems:     \c{gl_Vertex}, \c{gl_Normal}, \c{gl_Color}, and so on.  Desktop OpenGL     lacks the variable qualifiers \c{highp}, \c{mediump}, and \c{lowp}.      The QGLShaderProgram class makes the process of writing portable shaders     easier by prefixing all shader programs with the following lines on     desktop OpenGL:      \code     #define highp     #define mediump     #define lowp     \endcode      This makes it possible to run most GLSL/ES shader programs     on desktop systems.  The programmer should restrict themselves     to just features that are present in GLSL/ES, and avoid     standard variable names that only work on the desktop.      \section1 Simple shader example      \snippet code/src_opengl_qglshaderprogram.cpp 1      With the above shader program active, we can draw a green triangle     as follows:      \snippet code/src_opengl_qglshaderprogram.cpp 2      \section1 Binary shaders and programs      Binary shaders may be specified using \c{glShaderBinary()} on     the return value from QGLShader::shaderId().  The QGLShader instance     containing the binary can then be added to the shader program with     addShader() and linked in the usual fashion with link().      Binary programs may be specified using \c{glProgramBinaryOES()}     on the return value from programId().  Then the application should     call link(), which will notice that the program has already been     specified and linked, allowing other operations to be performed     on the shader program.      \note This class has been deprecated in favor of QOpenGLShaderProgram.      \sa QGLShader */
end_comment
begin_comment
comment|/*!     \class QGLShader     \inmodule QtOpenGL     \brief The QGLShader class allows OpenGL shaders to be compiled.     \since 4.6     \obsolete     \ingroup painting-3D      This class supports shaders written in the OpenGL Shading Language (GLSL)     and in the OpenGL/ES Shading Language (GLSL/ES).      QGLShader and QGLShaderProgram shelter the programmer from the details of     compiling and linking vertex and fragment shaders.      \note This class has been deprecated in favor of QOpenGLShader.      \sa QGLShaderProgram */
end_comment
begin_comment
comment|/*!     \enum QGLShader::ShaderTypeBit     This enum specifies the type of QGLShader that is being created.      \value Vertex Vertex shader written in the OpenGL Shading Language (GLSL).     \value Fragment Fragment shader written in the OpenGL Shading Language (GLSL).     \value Geometry Geometry shaders written in the OpenGL Shading            Language (GLSL), based on the GL_EXT_geometry_shader4 extension. */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|GL_FRAGMENT_SHADER
end_ifndef
begin_define
DECL|macro|GL_FRAGMENT_SHADER
define|#
directive|define
name|GL_FRAGMENT_SHADER
value|0x8B30
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|GL_VERTEX_SHADER
end_ifndef
begin_define
DECL|macro|GL_VERTEX_SHADER
define|#
directive|define
name|GL_VERTEX_SHADER
value|0x8B31
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|GL_COMPILE_STATUS
end_ifndef
begin_define
DECL|macro|GL_COMPILE_STATUS
define|#
directive|define
name|GL_COMPILE_STATUS
value|0x8B81
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|GL_LINK_STATUS
end_ifndef
begin_define
DECL|macro|GL_LINK_STATUS
define|#
directive|define
name|GL_LINK_STATUS
value|0x8B82
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|GL_INFO_LOG_LENGTH
end_ifndef
begin_define
DECL|macro|GL_INFO_LOG_LENGTH
define|#
directive|define
name|GL_INFO_LOG_LENGTH
value|0x8B84
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|GL_ACTIVE_UNIFORMS
end_ifndef
begin_define
DECL|macro|GL_ACTIVE_UNIFORMS
define|#
directive|define
name|GL_ACTIVE_UNIFORMS
value|0x8B86
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|GL_ACTIVE_UNIFORM_MAX_LENGTH
end_ifndef
begin_define
DECL|macro|GL_ACTIVE_UNIFORM_MAX_LENGTH
define|#
directive|define
name|GL_ACTIVE_UNIFORM_MAX_LENGTH
value|0x8B87
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|GL_ACTIVE_ATTRIBUTES
end_ifndef
begin_define
DECL|macro|GL_ACTIVE_ATTRIBUTES
define|#
directive|define
name|GL_ACTIVE_ATTRIBUTES
value|0x8B89
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|GL_ACTIVE_ATTRIBUTE_MAX_LENGTH
end_ifndef
begin_define
DECL|macro|GL_ACTIVE_ATTRIBUTE_MAX_LENGTH
define|#
directive|define
name|GL_ACTIVE_ATTRIBUTE_MAX_LENGTH
value|0x8B8A
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|GL_CURRENT_VERTEX_ATTRIB
end_ifndef
begin_define
DECL|macro|GL_CURRENT_VERTEX_ATTRIB
define|#
directive|define
name|GL_CURRENT_VERTEX_ATTRIB
value|0x8626
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|GL_SHADER_SOURCE_LENGTH
end_ifndef
begin_define
DECL|macro|GL_SHADER_SOURCE_LENGTH
define|#
directive|define
name|GL_SHADER_SOURCE_LENGTH
value|0x8B88
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|GL_SHADER_BINARY_FORMATS
end_ifndef
begin_define
DECL|macro|GL_SHADER_BINARY_FORMATS
define|#
directive|define
name|GL_SHADER_BINARY_FORMATS
value|0x8DF8
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|GL_NUM_SHADER_BINARY_FORMATS
end_ifndef
begin_define
DECL|macro|GL_NUM_SHADER_BINARY_FORMATS
define|#
directive|define
name|GL_NUM_SHADER_BINARY_FORMATS
value|0x8DF9
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_class
DECL|class|QGLShaderPrivate
class|class
name|QGLShaderPrivate
super|:
specifier|public
name|QObjectPrivate
block|{
name|Q_DECLARE_PUBLIC
parameter_list|(
name|QGLShader
parameter_list|)
specifier|public
private|:
DECL|function|QGLShaderPrivate
name|QGLShaderPrivate
parameter_list|(
specifier|const
name|QGLContext
modifier|*
parameter_list|,
name|QGLShader
operator|::
name|ShaderType
name|type
parameter_list|)
member_init_list|:
name|shaderGuard
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|shaderType
argument_list|(
name|type
argument_list|)
member_init_list|,
name|compiled
argument_list|(
literal|false
argument_list|)
block|{     }
name|~
name|QGLShaderPrivate
parameter_list|()
destructor_decl|;
DECL|member|shaderGuard
name|QGLSharedResourceGuardBase
modifier|*
name|shaderGuard
decl_stmt|;
DECL|member|shaderType
name|QGLShader
operator|::
name|ShaderType
name|shaderType
decl_stmt|;
DECL|member|compiled
name|bool
name|compiled
decl_stmt|;
DECL|member|log
name|QString
name|log
decl_stmt|;
name|bool
name|create
parameter_list|()
function_decl|;
name|bool
name|compile
parameter_list|(
name|QGLShader
modifier|*
name|q
parameter_list|)
function_decl|;
name|void
name|deleteShader
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_namespace
namespace|namespace
block|{
DECL|function|freeShaderFunc
name|void
name|freeShaderFunc
parameter_list|(
name|QGLContext
modifier|*
name|ctx
parameter_list|,
name|GLuint
name|id
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|glDeleteShader
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
end_namespace
begin_define
DECL|macro|ctx
define|#
directive|define
name|ctx
value|QGLContext::currentContext()
end_define
begin_destructor
DECL|function|~QGLShaderPrivate
name|QGLShaderPrivate
operator|::
name|~
name|QGLShaderPrivate
parameter_list|()
block|{
if|if
condition|(
name|shaderGuard
condition|)
name|shaderGuard
operator|->
name|free
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|create
name|bool
name|QGLShaderPrivate
operator|::
name|create
parameter_list|()
block|{
name|QGLContext
modifier|*
name|context
init|=
cast|const_cast
argument_list|<
name|QGLContext
operator|*
argument_list|>
argument_list|(
name|QGLContext
operator|::
name|currentContext
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|context
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|qt_resolve_glsl_extensions
argument_list|(
name|context
argument_list|)
condition|)
block|{
name|GLuint
name|shader
decl_stmt|;
if|if
condition|(
name|shaderType
operator|==
name|QGLShader
operator|::
name|Vertex
condition|)
name|shader
operator|=
name|glCreateShader
argument_list|(
name|GL_VERTEX_SHADER
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
elseif|else
if|if
condition|(
name|shaderType
operator|==
name|QGLShader
operator|::
name|Geometry
condition|)
name|shader
operator|=
name|glCreateShader
argument_list|(
name|GL_GEOMETRY_SHADER_EXT
argument_list|)
expr_stmt|;
endif|#
directive|endif
else|else
name|shader
operator|=
name|glCreateShader
argument_list|(
name|GL_FRAGMENT_SHADER
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|shader
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: Could not create shader of type %d."
argument_list|,
name|Q_FUNC_INFO
argument_list|,
name|int
argument_list|(
name|shaderType
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|shaderGuard
operator|=
name|createSharedResourceGuard
argument_list|(
name|context
argument_list|,
name|shader
argument_list|,
name|freeShaderFunc
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
end_function
begin_function
DECL|function|compile
name|bool
name|QGLShaderPrivate
operator|::
name|compile
parameter_list|(
name|QGLShader
modifier|*
name|q
parameter_list|)
block|{
name|GLuint
name|shader
init|=
name|shaderGuard
condition|?
name|shaderGuard
operator|->
name|id
argument_list|()
else|:
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|shader
condition|)
return|return
literal|false
return|;
name|glCompileShader
argument_list|(
name|shader
argument_list|)
expr_stmt|;
name|GLint
name|value
init|=
literal|0
decl_stmt|;
name|glGetShaderiv
argument_list|(
name|shader
argument_list|,
name|GL_COMPILE_STATUS
argument_list|,
operator|&
name|value
argument_list|)
expr_stmt|;
name|compiled
operator|=
operator|(
name|value
operator|!=
literal|0
operator|)
expr_stmt|;
name|value
operator|=
literal|0
expr_stmt|;
name|glGetShaderiv
argument_list|(
name|shader
argument_list|,
name|GL_INFO_LOG_LENGTH
argument_list|,
operator|&
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|compiled
operator|&&
name|value
operator|>
literal|1
condition|)
block|{
name|char
modifier|*
name|logbuf
init|=
operator|new
name|char
index|[
name|value
index|]
decl_stmt|;
name|GLint
name|len
decl_stmt|;
name|glGetShaderInfoLog
argument_list|(
name|shader
argument_list|,
name|value
argument_list|,
operator|&
name|len
argument_list|,
name|logbuf
argument_list|)
expr_stmt|;
name|log
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
name|logbuf
argument_list|)
expr_stmt|;
name|QString
name|name
init|=
name|q
operator|->
name|objectName
argument_list|()
decl_stmt|;
specifier|const
name|char
modifier|*
name|types
index|[]
init|=
block|{
literal|"Fragment"
block|,
literal|"Vertex"
block|,
literal|"Geometry"
block|,
literal|""
block|}
decl_stmt|;
specifier|const
name|char
modifier|*
name|type
init|=
name|types
index|[
literal|3
index|]
decl_stmt|;
if|if
condition|(
name|shaderType
operator|==
name|QGLShader
operator|::
name|Fragment
condition|)
name|type
operator|=
name|types
index|[
literal|0
index|]
expr_stmt|;
elseif|else
if|if
condition|(
name|shaderType
operator|==
name|QGLShader
operator|::
name|Vertex
condition|)
name|type
operator|=
name|types
index|[
literal|1
index|]
expr_stmt|;
elseif|else
if|if
condition|(
name|shaderType
operator|==
name|QGLShader
operator|::
name|Geometry
condition|)
name|type
operator|=
name|types
index|[
literal|2
index|]
expr_stmt|;
if|if
condition|(
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
name|qWarning
argument_list|(
literal|"QGLShader::compile(%s): %s"
argument_list|,
name|type
argument_list|,
name|qPrintable
argument_list|(
name|log
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|qWarning
argument_list|(
literal|"QGLShader::compile(%s)[%s]: %s"
argument_list|,
name|type
argument_list|,
name|qPrintable
argument_list|(
name|name
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|log
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
index|[]
name|logbuf
expr_stmt|;
block|}
return|return
name|compiled
return|;
block|}
end_function
begin_function
DECL|function|deleteShader
name|void
name|QGLShaderPrivate
operator|::
name|deleteShader
parameter_list|()
block|{
if|if
condition|(
name|shaderGuard
condition|)
block|{
name|shaderGuard
operator|->
name|free
argument_list|()
expr_stmt|;
name|shaderGuard
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     Constructs a new QGLShader object of the specified \a type     and attaches it to \a parent.  If shader programs are not supported,     QGLShaderProgram::hasOpenGLShaderPrograms() will return false.      This constructor is normally followed by a call to compileSourceCode()     or compileSourceFile().      The shader will be associated with the current QGLContext.      \sa compileSourceCode(), compileSourceFile() */
end_comment
begin_constructor
DECL|function|QGLShader
name|QGLShader
operator|::
name|QGLShader
parameter_list|(
name|QGLShader
operator|::
name|ShaderType
name|type
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
operator|*
operator|new
name|QGLShaderPrivate
argument_list|(
name|QGLContext
operator|::
name|currentContext
argument_list|()
argument_list|,
name|type
argument_list|)
argument_list|,
name|parent
argument_list|)
block|{
name|Q_D
argument_list|(
name|QGLShader
argument_list|)
expr_stmt|;
name|d
operator|->
name|create
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Constructs a new QGLShader object of the specified \a type     and attaches it to \a parent.  If shader programs are not supported,     then QGLShaderProgram::hasOpenGLShaderPrograms() will return false.      This constructor is normally followed by a call to compileSourceCode()     or compileSourceFile().      The shader will be associated with \a context.      \sa compileSourceCode(), compileSourceFile() */
end_comment
begin_constructor
DECL|function|QGLShader
name|QGLShader
operator|::
name|QGLShader
parameter_list|(
name|QGLShader
operator|::
name|ShaderType
name|type
parameter_list|,
specifier|const
name|QGLContext
modifier|*
name|context
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
operator|*
operator|new
name|QGLShaderPrivate
argument_list|(
name|context
condition|?
name|context
else|:
name|QGLContext
operator|::
name|currentContext
argument_list|()
argument_list|,
name|type
argument_list|)
argument_list|,
name|parent
argument_list|)
block|{
name|Q_D
argument_list|(
name|QGLShader
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_DEBUG
if|if
condition|(
name|context
operator|&&
operator|!
name|QGLContext
operator|::
name|areSharing
argument_list|(
name|context
argument_list|,
name|QGLContext
operator|::
name|currentContext
argument_list|()
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"QGLShader::QGLShader: \'context\' must be the current context or sharing with it."
argument_list|)
expr_stmt|;
return|return;
block|}
endif|#
directive|endif
name|d
operator|->
name|create
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Deletes this shader.  If the shader has been attached to a     QGLShaderProgram object, then the actual shader will stay around     until the QGLShaderProgram is destroyed. */
end_comment
begin_destructor
DECL|function|~QGLShader
name|QGLShader
operator|::
name|~
name|QGLShader
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     Returns the type of this shader. */
end_comment
begin_function
DECL|function|shaderType
name|QGLShader
operator|::
name|ShaderType
name|QGLShader
operator|::
name|shaderType
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGLShader
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|shaderType
return|;
block|}
end_function
begin_comment
comment|// The precision qualifiers are useful on OpenGL/ES systems,
end_comment
begin_comment
comment|// but usually not present on desktop systems.  Define the
end_comment
begin_comment
comment|// keywords to empty strings on desktop systems.
end_comment
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_OPENGL_ES
argument_list|)
operator|||
name|defined
argument_list|(
name|QT_OPENGL_FORCE_SHADER_DEFINES
argument_list|)
end_if
begin_define
DECL|macro|QGL_DEFINE_QUALIFIERS
define|#
directive|define
name|QGL_DEFINE_QUALIFIERS
value|1
end_define
begin_decl_stmt
DECL|variable|qualifierDefines
specifier|static
specifier|const
name|char
name|qualifierDefines
index|[]
init|=
literal|"#define lowp\n"
literal|"#define mediump\n"
literal|"#define highp\n"
decl_stmt|;
end_decl_stmt
begin_else
else|#
directive|else
end_else
begin_comment
comment|// The "highp" qualifier doesn't exist in fragment shaders
end_comment
begin_comment
comment|// on all ES platforms.  When it doesn't exist, use "mediump".
end_comment
begin_define
DECL|macro|QGL_REDEFINE_HIGHP
define|#
directive|define
name|QGL_REDEFINE_HIGHP
value|1
end_define
begin_decl_stmt
DECL|variable|redefineHighp
specifier|static
specifier|const
name|char
name|redefineHighp
index|[]
init|=
literal|"#ifndef GL_FRAGMENT_PRECISION_HIGH\n"
literal|"#define highp mediump\n"
literal|"#endif\n"
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*!     Sets the \a source code for this shader and compiles it.     Returns true if the source was successfully compiled, false otherwise.      \sa compileSourceFile() */
end_comment
begin_function
DECL|function|compileSourceCode
name|bool
name|QGLShader
operator|::
name|compileSourceCode
parameter_list|(
specifier|const
name|char
modifier|*
name|source
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGLShader
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|shaderGuard
operator|&&
name|d
operator|->
name|shaderGuard
operator|->
name|id
argument_list|()
condition|)
block|{
name|QVarLengthArray
argument_list|<
specifier|const
name|char
modifier|*
argument_list|,
literal|4
argument_list|>
name|src
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|GLint
argument_list|,
literal|4
argument_list|>
name|srclen
decl_stmt|;
name|int
name|headerLen
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|source
operator|&&
name|source
index|[
name|headerLen
index|]
operator|==
literal|'#'
condition|)
block|{
comment|// Skip #version and #extension directives at the start of
comment|// the shader code.  We need to insert the qualifierDefines
comment|// and redefineHighp just after them.
if|if
condition|(
name|qstrncmp
argument_list|(
name|source
operator|+
name|headerLen
argument_list|,
literal|"#version"
argument_list|,
literal|8
argument_list|)
operator|!=
literal|0
operator|&&
name|qstrncmp
argument_list|(
name|source
operator|+
name|headerLen
argument_list|,
literal|"#extension"
argument_list|,
literal|10
argument_list|)
operator|!=
literal|0
condition|)
block|{
break|break;
block|}
while|while
condition|(
name|source
index|[
name|headerLen
index|]
operator|!=
literal|'\0'
operator|&&
name|source
index|[
name|headerLen
index|]
operator|!=
literal|'\n'
condition|)
operator|++
name|headerLen
expr_stmt|;
if|if
condition|(
name|source
index|[
name|headerLen
index|]
operator|==
literal|'\n'
condition|)
operator|++
name|headerLen
expr_stmt|;
block|}
if|if
condition|(
name|headerLen
operator|>
literal|0
condition|)
block|{
name|src
operator|.
name|append
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|srclen
operator|.
name|append
argument_list|(
name|GLint
argument_list|(
name|headerLen
argument_list|)
argument_list|)
expr_stmt|;
block|}
ifdef|#
directive|ifdef
name|QGL_DEFINE_QUALIFIERS
name|src
operator|.
name|append
argument_list|(
name|qualifierDefines
argument_list|)
expr_stmt|;
name|srclen
operator|.
name|append
argument_list|(
name|GLint
argument_list|(
sizeof|sizeof
argument_list|(
name|qualifierDefines
argument_list|)
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|QGL_REDEFINE_HIGHP
if|if
condition|(
name|d
operator|->
name|shaderType
operator|==
name|Fragment
condition|)
block|{
name|src
operator|.
name|append
argument_list|(
name|redefineHighp
argument_list|)
expr_stmt|;
name|srclen
operator|.
name|append
argument_list|(
name|GLint
argument_list|(
sizeof|sizeof
argument_list|(
name|redefineHighp
argument_list|)
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
name|src
operator|.
name|append
argument_list|(
name|source
operator|+
name|headerLen
argument_list|)
expr_stmt|;
name|srclen
operator|.
name|append
argument_list|(
name|GLint
argument_list|(
name|qstrlen
argument_list|(
name|source
operator|+
name|headerLen
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|glShaderSource
argument_list|(
name|d
operator|->
name|shaderGuard
operator|->
name|id
argument_list|()
argument_list|,
name|src
operator|.
name|size
argument_list|()
argument_list|,
name|src
operator|.
name|data
argument_list|()
argument_list|,
name|srclen
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|compile
argument_list|(
name|this
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
end_function
begin_comment
comment|/*!     \overload      Sets the \a source code for this shader and compiles it.     Returns true if the source was successfully compiled, false otherwise.      \sa compileSourceFile() */
end_comment
begin_function
DECL|function|compileSourceCode
name|bool
name|QGLShader
operator|::
name|compileSourceCode
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|source
parameter_list|)
block|{
return|return
name|compileSourceCode
argument_list|(
name|source
operator|.
name|constData
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \overload      Sets the \a source code for this shader and compiles it.     Returns true if the source was successfully compiled, false otherwise.      \sa compileSourceFile() */
end_comment
begin_function
DECL|function|compileSourceCode
name|bool
name|QGLShader
operator|::
name|compileSourceCode
parameter_list|(
specifier|const
name|QString
modifier|&
name|source
parameter_list|)
block|{
return|return
name|compileSourceCode
argument_list|(
name|source
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the source code for this shader to the contents of \a fileName     and compiles it.  Returns true if the file could be opened and the     source compiled, false otherwise.      \sa compileSourceCode() */
end_comment
begin_function
DECL|function|compileSourceFile
name|bool
name|QGLShader
operator|::
name|compileSourceFile
parameter_list|(
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|)
block|{
name|QFile
name|file
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
argument_list|)
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"QGLShader: Unable to open file"
operator|<<
name|fileName
expr_stmt|;
return|return
literal|false
return|;
block|}
name|QByteArray
name|contents
init|=
name|file
operator|.
name|readAll
argument_list|()
decl_stmt|;
return|return
name|compileSourceCode
argument_list|(
name|contents
operator|.
name|constData
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the source code for this shader.      \sa compileSourceCode() */
end_comment
begin_function
DECL|function|sourceCode
name|QByteArray
name|QGLShader
operator|::
name|sourceCode
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGLShader
argument_list|)
expr_stmt|;
name|GLuint
name|shader
init|=
name|d
operator|->
name|shaderGuard
condition|?
name|d
operator|->
name|shaderGuard
operator|->
name|id
argument_list|()
else|:
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|shader
condition|)
return|return
name|QByteArray
argument_list|()
return|;
name|GLint
name|size
init|=
literal|0
decl_stmt|;
name|glGetShaderiv
argument_list|(
name|shader
argument_list|,
name|GL_SHADER_SOURCE_LENGTH
argument_list|,
operator|&
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|size
operator|<=
literal|0
condition|)
return|return
name|QByteArray
argument_list|()
return|;
name|GLint
name|len
init|=
literal|0
decl_stmt|;
name|char
modifier|*
name|source
init|=
operator|new
name|char
index|[
name|size
index|]
decl_stmt|;
name|glGetShaderSource
argument_list|(
name|shader
argument_list|,
name|size
argument_list|,
operator|&
name|len
argument_list|,
name|source
argument_list|)
expr_stmt|;
name|QByteArray
name|src
argument_list|(
name|source
argument_list|)
decl_stmt|;
operator|delete
index|[]
name|source
expr_stmt|;
return|return
name|src
return|;
block|}
end_function
begin_comment
comment|/*!     Returns true if this shader has been compiled; false otherwise.      \sa compileSourceCode(), compileSourceFile() */
end_comment
begin_function
DECL|function|isCompiled
name|bool
name|QGLShader
operator|::
name|isCompiled
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGLShader
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|compiled
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the errors and warnings that occurred during the last compile.      \sa compileSourceCode(), compileSourceFile() */
end_comment
begin_function
DECL|function|log
name|QString
name|QGLShader
operator|::
name|log
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGLShader
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|log
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the OpenGL identifier associated with this shader.      \sa QGLShaderProgram::programId() */
end_comment
begin_function
DECL|function|shaderId
name|GLuint
name|QGLShader
operator|::
name|shaderId
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGLShader
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|shaderGuard
condition|?
name|d
operator|->
name|shaderGuard
operator|->
name|id
argument_list|()
else|:
literal|0
return|;
block|}
end_function
begin_undef
DECL|macro|ctx
undef|#
directive|undef
name|ctx
end_undef
begin_class
DECL|class|QGLShaderProgramPrivate
class|class
name|QGLShaderProgramPrivate
super|:
specifier|public
name|QObjectPrivate
block|{
name|Q_DECLARE_PUBLIC
parameter_list|(
name|QGLShaderProgram
parameter_list|)
specifier|public
private|:
DECL|function|QGLShaderProgramPrivate
name|QGLShaderProgramPrivate
parameter_list|(
specifier|const
name|QGLContext
modifier|*
parameter_list|)
member_init_list|:
name|programGuard
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|linked
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|inited
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|removingShaders
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|geometryVertexCount
argument_list|(
literal|64
argument_list|)
member_init_list|,
name|geometryInputType
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|geometryOutputType
argument_list|(
literal|0
argument_list|)
block|{     }
name|~
name|QGLShaderProgramPrivate
parameter_list|()
destructor_decl|;
DECL|member|programGuard
name|QGLSharedResourceGuardBase
modifier|*
name|programGuard
decl_stmt|;
DECL|member|linked
name|bool
name|linked
decl_stmt|;
DECL|member|inited
name|bool
name|inited
decl_stmt|;
DECL|member|removingShaders
name|bool
name|removingShaders
decl_stmt|;
DECL|member|geometryVertexCount
name|int
name|geometryVertexCount
decl_stmt|;
DECL|member|geometryInputType
name|GLenum
name|geometryInputType
decl_stmt|;
DECL|member|geometryOutputType
name|GLenum
name|geometryOutputType
decl_stmt|;
DECL|member|log
name|QString
name|log
decl_stmt|;
DECL|member|shaders
name|QList
argument_list|<
name|QGLShader
modifier|*
argument_list|>
name|shaders
decl_stmt|;
DECL|member|anonShaders
name|QList
argument_list|<
name|QGLShader
modifier|*
argument_list|>
name|anonShaders
decl_stmt|;
name|bool
name|hasShader
parameter_list|(
name|QGLShader
operator|::
name|ShaderType
name|type
parameter_list|)
specifier|const
function_decl|;
block|}
class|;
end_class
begin_namespace
namespace|namespace
block|{
DECL|function|freeProgramFunc
name|void
name|freeProgramFunc
parameter_list|(
name|QGLContext
modifier|*
name|ctx
parameter_list|,
name|GLuint
name|id
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|glDeleteProgram
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
end_namespace
begin_destructor
DECL|function|~QGLShaderProgramPrivate
name|QGLShaderProgramPrivate
operator|::
name|~
name|QGLShaderProgramPrivate
parameter_list|()
block|{
if|if
condition|(
name|programGuard
condition|)
name|programGuard
operator|->
name|free
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|hasShader
name|bool
name|QGLShaderProgramPrivate
operator|::
name|hasShader
parameter_list|(
name|QGLShader
operator|::
name|ShaderType
name|type
parameter_list|)
specifier|const
block|{
foreach|foreach
control|(
name|QGLShader
modifier|*
name|shader
decl|,
name|shaders
control|)
block|{
if|if
condition|(
name|shader
operator|->
name|shaderType
argument_list|()
operator|==
name|type
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_define
DECL|macro|ctx
define|#
directive|define
name|ctx
value|QGLContext::currentContext()
end_define
begin_comment
comment|/*!     Constructs a new shader program and attaches it to \a parent.     The program will be invalid until addShader() is called.      The shader program will be associated with the current QGLContext.      \sa addShader() */
end_comment
begin_constructor
DECL|function|QGLShaderProgram
name|QGLShaderProgram
operator|::
name|QGLShaderProgram
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
operator|*
operator|new
name|QGLShaderProgramPrivate
argument_list|(
name|QGLContext
operator|::
name|currentContext
argument_list|()
argument_list|)
argument_list|,
name|parent
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Constructs a new shader program and attaches it to \a parent.     The program will be invalid until addShader() is called.      The shader program will be associated with \a context.      \sa addShader() */
end_comment
begin_constructor
DECL|function|QGLShaderProgram
name|QGLShaderProgram
operator|::
name|QGLShaderProgram
parameter_list|(
specifier|const
name|QGLContext
modifier|*
name|context
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
operator|*
operator|new
name|QGLShaderProgramPrivate
argument_list|(
name|context
argument_list|)
argument_list|,
name|parent
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Deletes this shader program. */
end_comment
begin_destructor
DECL|function|~QGLShaderProgram
name|QGLShaderProgram
operator|::
name|~
name|QGLShaderProgram
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|init
name|bool
name|QGLShaderProgram
operator|::
name|init
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QGLShaderProgram
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|d
operator|->
name|programGuard
operator|&&
name|d
operator|->
name|programGuard
operator|->
name|id
argument_list|()
operator|)
operator|||
name|d
operator|->
name|inited
condition|)
return|return
literal|true
return|;
name|d
operator|->
name|inited
operator|=
literal|true
expr_stmt|;
name|QGLContext
modifier|*
name|context
init|=
cast|const_cast
argument_list|<
name|QGLContext
operator|*
argument_list|>
argument_list|(
name|QGLContext
operator|::
name|currentContext
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|context
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|qt_resolve_glsl_extensions
argument_list|(
name|context
argument_list|)
condition|)
block|{
name|GLuint
name|program
init|=
name|glCreateProgram
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|program
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"QGLShaderProgram: could not create shader program"
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|d
operator|->
name|programGuard
condition|)
operator|delete
name|d
operator|->
name|programGuard
expr_stmt|;
name|d
operator|->
name|programGuard
operator|=
name|createSharedResourceGuard
argument_list|(
name|context
argument_list|,
name|program
argument_list|,
name|freeProgramFunc
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
name|qWarning
argument_list|()
operator|<<
literal|"QGLShaderProgram: shader programs are not supported"
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
end_function
begin_comment
comment|/*!     Adds a compiled \a shader to this shader program.  Returns true     if the shader could be added, or false otherwise.      Ownership of the \a shader object remains with the caller.     It will not be deleted when this QGLShaderProgram instance     is deleted.  This allows the caller to add the same shader     to multiple shader programs.      \sa addShaderFromSourceCode(), addShaderFromSourceFile()     \sa removeShader(), link(), removeAllShaders() */
end_comment
begin_function
DECL|function|addShader
name|bool
name|QGLShaderProgram
operator|::
name|addShader
parameter_list|(
name|QGLShader
modifier|*
name|shader
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGLShaderProgram
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|init
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|d
operator|->
name|shaders
operator|.
name|contains
argument_list|(
name|shader
argument_list|)
condition|)
return|return
literal|true
return|;
comment|// Already added to this shader program.
if|if
condition|(
name|d
operator|->
name|programGuard
operator|&&
name|d
operator|->
name|programGuard
operator|->
name|id
argument_list|()
operator|&&
name|shader
condition|)
block|{
if|if
condition|(
operator|!
name|shader
operator|->
name|d_func
argument_list|()
operator|->
name|shaderGuard
operator|||
operator|!
name|shader
operator|->
name|d_func
argument_list|()
operator|->
name|shaderGuard
operator|->
name|id
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|d
operator|->
name|programGuard
operator|->
name|group
argument_list|()
operator|!=
name|shader
operator|->
name|d_func
argument_list|()
operator|->
name|shaderGuard
operator|->
name|group
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"QGLShaderProgram::addShader: Program and shader are not associated with same context."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|glAttachShader
argument_list|(
name|d
operator|->
name|programGuard
operator|->
name|id
argument_list|()
argument_list|,
name|shader
operator|->
name|d_func
argument_list|()
operator|->
name|shaderGuard
operator|->
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|linked
operator|=
literal|false
expr_stmt|;
comment|// Program needs to be relinked.
name|d
operator|->
name|shaders
operator|.
name|append
argument_list|(
name|shader
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|shader
argument_list|,
name|SIGNAL
argument_list|(
name|destroyed
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|shaderDestroyed
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
end_function
begin_comment
comment|/*!     Compiles \a source as a shader of the specified \a type and     adds it to this shader program.  Returns true if compilation     was successful, false otherwise.  The compilation errors     and warnings will be made available via log().      This function is intended to be a short-cut for quickly     adding vertex and fragment shaders to a shader program without     creating an instance of QGLShader first.      \sa addShader(), addShaderFromSourceFile()     \sa removeShader(), link(), log(), removeAllShaders() */
end_comment
begin_function
DECL|function|addShaderFromSourceCode
name|bool
name|QGLShaderProgram
operator|::
name|addShaderFromSourceCode
parameter_list|(
name|QGLShader
operator|::
name|ShaderType
name|type
parameter_list|,
specifier|const
name|char
modifier|*
name|source
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGLShaderProgram
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|init
argument_list|()
condition|)
return|return
literal|false
return|;
name|QGLShader
modifier|*
name|shader
init|=
operator|new
name|QGLShader
argument_list|(
name|type
argument_list|,
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|shader
operator|->
name|compileSourceCode
argument_list|(
name|source
argument_list|)
condition|)
block|{
name|d
operator|->
name|log
operator|=
name|shader
operator|->
name|log
argument_list|()
expr_stmt|;
operator|delete
name|shader
expr_stmt|;
return|return
literal|false
return|;
block|}
name|d
operator|->
name|anonShaders
operator|.
name|append
argument_list|(
name|shader
argument_list|)
expr_stmt|;
return|return
name|addShader
argument_list|(
name|shader
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \overload      Compiles \a source as a shader of the specified \a type and     adds it to this shader program.  Returns true if compilation     was successful, false otherwise.  The compilation errors     and warnings will be made available via log().      This function is intended to be a short-cut for quickly     adding vertex and fragment shaders to a shader program without     creating an instance of QGLShader first.      \sa addShader(), addShaderFromSourceFile()     \sa removeShader(), link(), log(), removeAllShaders() */
end_comment
begin_function
DECL|function|addShaderFromSourceCode
name|bool
name|QGLShaderProgram
operator|::
name|addShaderFromSourceCode
parameter_list|(
name|QGLShader
operator|::
name|ShaderType
name|type
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|source
parameter_list|)
block|{
return|return
name|addShaderFromSourceCode
argument_list|(
name|type
argument_list|,
name|source
operator|.
name|constData
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \overload      Compiles \a source as a shader of the specified \a type and     adds it to this shader program.  Returns true if compilation     was successful, false otherwise.  The compilation errors     and warnings will be made available via log().      This function is intended to be a short-cut for quickly     adding vertex and fragment shaders to a shader program without     creating an instance of QGLShader first.      \sa addShader(), addShaderFromSourceFile()     \sa removeShader(), link(), log(), removeAllShaders() */
end_comment
begin_function
DECL|function|addShaderFromSourceCode
name|bool
name|QGLShaderProgram
operator|::
name|addShaderFromSourceCode
parameter_list|(
name|QGLShader
operator|::
name|ShaderType
name|type
parameter_list|,
specifier|const
name|QString
modifier|&
name|source
parameter_list|)
block|{
return|return
name|addShaderFromSourceCode
argument_list|(
name|type
argument_list|,
name|source
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Compiles the contents of \a fileName as a shader of the specified     \a type and adds it to this shader program.  Returns true if     compilation was successful, false otherwise.  The compilation errors     and warnings will be made available via log().      This function is intended to be a short-cut for quickly     adding vertex and fragment shaders to a shader program without     creating an instance of QGLShader first.      \sa addShader(), addShaderFromSourceCode() */
end_comment
begin_function
DECL|function|addShaderFromSourceFile
name|bool
name|QGLShaderProgram
operator|::
name|addShaderFromSourceFile
parameter_list|(
name|QGLShader
operator|::
name|ShaderType
name|type
parameter_list|,
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGLShaderProgram
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|init
argument_list|()
condition|)
return|return
literal|false
return|;
name|QGLShader
modifier|*
name|shader
init|=
operator|new
name|QGLShader
argument_list|(
name|type
argument_list|,
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|shader
operator|->
name|compileSourceFile
argument_list|(
name|fileName
argument_list|)
condition|)
block|{
name|d
operator|->
name|log
operator|=
name|shader
operator|->
name|log
argument_list|()
expr_stmt|;
operator|delete
name|shader
expr_stmt|;
return|return
literal|false
return|;
block|}
name|d
operator|->
name|anonShaders
operator|.
name|append
argument_list|(
name|shader
argument_list|)
expr_stmt|;
return|return
name|addShader
argument_list|(
name|shader
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Removes \a shader from this shader program.  The object is not deleted.      The shader program must be valid in the current QGLContext.      \sa addShader(), link(), removeAllShaders() */
end_comment
begin_function
DECL|function|removeShader
name|void
name|QGLShaderProgram
operator|::
name|removeShader
parameter_list|(
name|QGLShader
modifier|*
name|shader
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGLShaderProgram
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|programGuard
operator|&&
name|d
operator|->
name|programGuard
operator|->
name|id
argument_list|()
operator|&&
name|shader
operator|&&
name|shader
operator|->
name|d_func
argument_list|()
operator|->
name|shaderGuard
condition|)
block|{
name|glDetachShader
argument_list|(
name|d
operator|->
name|programGuard
operator|->
name|id
argument_list|()
argument_list|,
name|shader
operator|->
name|d_func
argument_list|()
operator|->
name|shaderGuard
operator|->
name|id
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|linked
operator|=
literal|false
expr_stmt|;
comment|// Program needs to be relinked.
if|if
condition|(
name|shader
condition|)
block|{
name|d
operator|->
name|shaders
operator|.
name|removeAll
argument_list|(
name|shader
argument_list|)
expr_stmt|;
name|d
operator|->
name|anonShaders
operator|.
name|removeAll
argument_list|(
name|shader
argument_list|)
expr_stmt|;
name|disconnect
argument_list|(
name|shader
argument_list|,
name|SIGNAL
argument_list|(
name|destroyed
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|shaderDestroyed
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     Returns a list of all shaders that have been added to this shader     program using addShader().      \sa addShader(), removeShader() */
end_comment
begin_function
DECL|function|shaders
name|QList
argument_list|<
name|QGLShader
modifier|*
argument_list|>
name|QGLShaderProgram
operator|::
name|shaders
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGLShaderProgram
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|shaders
return|;
block|}
end_function
begin_comment
comment|/*!     Removes all of the shaders that were added to this program previously.     The QGLShader objects for the shaders will not be deleted if they     were constructed externally.  QGLShader objects that are constructed     internally by QGLShaderProgram will be deleted.      \sa addShader(), removeShader() */
end_comment
begin_function
DECL|function|removeAllShaders
name|void
name|QGLShaderProgram
operator|::
name|removeAllShaders
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QGLShaderProgram
argument_list|)
expr_stmt|;
name|d
operator|->
name|removingShaders
operator|=
literal|true
expr_stmt|;
foreach|foreach
control|(
name|QGLShader
modifier|*
name|shader
decl|,
name|d
operator|->
name|shaders
control|)
block|{
if|if
condition|(
name|d
operator|->
name|programGuard
operator|&&
name|d
operator|->
name|programGuard
operator|->
name|id
argument_list|()
operator|&&
name|shader
operator|&&
name|shader
operator|->
name|d_func
argument_list|()
operator|->
name|shaderGuard
condition|)
block|{
name|glDetachShader
argument_list|(
name|d
operator|->
name|programGuard
operator|->
name|id
argument_list|()
argument_list|,
name|shader
operator|->
name|d_func
argument_list|()
operator|->
name|shaderGuard
operator|->
name|id
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
foreach|foreach
control|(
name|QGLShader
modifier|*
name|shader
decl|,
name|d
operator|->
name|anonShaders
control|)
block|{
comment|// Delete shader objects that were created anonymously.
operator|delete
name|shader
expr_stmt|;
block|}
name|d
operator|->
name|shaders
operator|.
name|clear
argument_list|()
expr_stmt|;
name|d
operator|->
name|anonShaders
operator|.
name|clear
argument_list|()
expr_stmt|;
name|d
operator|->
name|linked
operator|=
literal|false
expr_stmt|;
comment|// Program needs to be relinked.
name|d
operator|->
name|removingShaders
operator|=
literal|false
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Links together the shaders that were added to this program with     addShader().  Returns true if the link was successful or     false otherwise.  If the link failed, the error messages can     be retrieved with log().      Subclasses can override this function to initialize attributes     and uniform variables for use in specific shader programs.      If the shader program was already linked, calling this     function again will force it to be re-linked.      \sa addShader(), log() */
end_comment
begin_function
DECL|function|link
name|bool
name|QGLShaderProgram
operator|::
name|link
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QGLShaderProgram
argument_list|)
expr_stmt|;
name|GLuint
name|program
init|=
name|d
operator|->
name|programGuard
condition|?
name|d
operator|->
name|programGuard
operator|->
name|id
argument_list|()
else|:
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|program
condition|)
return|return
literal|false
return|;
name|GLint
name|value
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|shaders
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// If there are no explicit shaders, then it is possible that the
comment|// application added a program binary with glProgramBinaryOES(),
comment|// or otherwise populated the shaders itself.  Check to see if the
comment|// program is already linked and bail out if so.
name|value
operator|=
literal|0
expr_stmt|;
name|glGetProgramiv
argument_list|(
name|program
argument_list|,
name|GL_LINK_STATUS
argument_list|,
operator|&
name|value
argument_list|)
expr_stmt|;
name|d
operator|->
name|linked
operator|=
operator|(
name|value
operator|!=
literal|0
operator|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|linked
condition|)
return|return
literal|true
return|;
block|}
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
comment|// Set up the geometry shader parameters
if|if
condition|(
name|glProgramParameteriEXT
condition|)
block|{
foreach|foreach
control|(
name|QGLShader
modifier|*
name|shader
decl|,
name|d
operator|->
name|shaders
control|)
block|{
if|if
condition|(
name|shader
operator|->
name|shaderType
argument_list|()
operator|&
name|QGLShader
operator|::
name|Geometry
condition|)
block|{
name|glProgramParameteriEXT
argument_list|(
name|program
argument_list|,
name|GL_GEOMETRY_INPUT_TYPE_EXT
argument_list|,
name|d
operator|->
name|geometryInputType
argument_list|)
expr_stmt|;
name|glProgramParameteriEXT
argument_list|(
name|program
argument_list|,
name|GL_GEOMETRY_OUTPUT_TYPE_EXT
argument_list|,
name|d
operator|->
name|geometryOutputType
argument_list|)
expr_stmt|;
name|glProgramParameteriEXT
argument_list|(
name|program
argument_list|,
name|GL_GEOMETRY_VERTICES_OUT_EXT
argument_list|,
name|d
operator|->
name|geometryVertexCount
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
endif|#
directive|endif
name|glLinkProgram
argument_list|(
name|program
argument_list|)
expr_stmt|;
name|value
operator|=
literal|0
expr_stmt|;
name|glGetProgramiv
argument_list|(
name|program
argument_list|,
name|GL_LINK_STATUS
argument_list|,
operator|&
name|value
argument_list|)
expr_stmt|;
name|d
operator|->
name|linked
operator|=
operator|(
name|value
operator|!=
literal|0
operator|)
expr_stmt|;
name|value
operator|=
literal|0
expr_stmt|;
name|glGetProgramiv
argument_list|(
name|program
argument_list|,
name|GL_INFO_LOG_LENGTH
argument_list|,
operator|&
name|value
argument_list|)
expr_stmt|;
name|d
operator|->
name|log
operator|=
name|QString
argument_list|()
expr_stmt|;
if|if
condition|(
name|value
operator|>
literal|1
condition|)
block|{
name|char
modifier|*
name|logbuf
init|=
operator|new
name|char
index|[
name|value
index|]
decl_stmt|;
name|GLint
name|len
decl_stmt|;
name|glGetProgramInfoLog
argument_list|(
name|program
argument_list|,
name|value
argument_list|,
operator|&
name|len
argument_list|,
name|logbuf
argument_list|)
expr_stmt|;
name|d
operator|->
name|log
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
name|logbuf
argument_list|)
expr_stmt|;
name|QString
name|name
init|=
name|objectName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
name|qWarning
argument_list|()
operator|<<
literal|"QGLShader::link:"
operator|<<
name|d
operator|->
name|log
expr_stmt|;
else|else
name|qWarning
argument_list|()
operator|<<
literal|"QGLShader::link["
operator|<<
name|name
operator|<<
literal|"]:"
operator|<<
name|d
operator|->
name|log
expr_stmt|;
operator|delete
index|[]
name|logbuf
expr_stmt|;
block|}
return|return
name|d
operator|->
name|linked
return|;
block|}
end_function
begin_comment
comment|/*!     Returns true if this shader program has been linked; false otherwise.      \sa link() */
end_comment
begin_function
DECL|function|isLinked
name|bool
name|QGLShaderProgram
operator|::
name|isLinked
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGLShaderProgram
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|linked
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the errors and warnings that occurred during the last link()     or addShader() with explicitly specified source code.      \sa link() */
end_comment
begin_function
DECL|function|log
name|QString
name|QGLShaderProgram
operator|::
name|log
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGLShaderProgram
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|log
return|;
block|}
end_function
begin_comment
comment|/*!     Binds this shader program to the active QGLContext and makes     it the current shader program.  Any previously bound shader program     is released.  This is equivalent to calling \c{glUseProgram()} on     programId().  Returns true if the program was successfully bound;     false otherwise.  If the shader program has not yet been linked,     or it needs to be re-linked, this function will call link().      \sa link(), release() */
end_comment
begin_function
DECL|function|bind
name|bool
name|QGLShaderProgram
operator|::
name|bind
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QGLShaderProgram
argument_list|)
expr_stmt|;
name|GLuint
name|program
init|=
name|d
operator|->
name|programGuard
condition|?
name|d
operator|->
name|programGuard
operator|->
name|id
argument_list|()
else|:
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|program
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|d
operator|->
name|linked
operator|&&
operator|!
name|link
argument_list|()
condition|)
return|return
literal|false
return|;
ifndef|#
directive|ifndef
name|QT_NO_DEBUG
if|if
condition|(
name|d
operator|->
name|programGuard
operator|->
name|group
argument_list|()
operator|!=
name|QOpenGLContextGroup
operator|::
name|currentContextGroup
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"QGLShaderProgram::bind: program is not valid in the current context."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
endif|#
directive|endif
name|glUseProgram
argument_list|(
name|program
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_undef
DECL|macro|ctx
undef|#
directive|undef
name|ctx
end_undef
begin_define
DECL|macro|ctx
define|#
directive|define
name|ctx
value|QGLContext::currentContext()
end_define
begin_comment
comment|/*!     Releases the active shader program from the current QGLContext.     This is equivalent to calling \c{glUseProgram(0)}.      \sa bind() */
end_comment
begin_function
DECL|function|release
name|void
name|QGLShaderProgram
operator|::
name|release
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_NO_DEBUG
name|Q_D
argument_list|(
name|QGLShaderProgram
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|programGuard
operator|&&
name|d
operator|->
name|programGuard
operator|->
name|group
argument_list|()
operator|!=
name|QOpenGLContextGroup
operator|::
name|currentContextGroup
argument_list|()
condition|)
name|qWarning
argument_list|(
literal|"QGLShaderProgram::release: program is not valid in the current context."
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
name|glUseProgram
argument_list|(
literal|0
argument_list|)
expr_stmt|;
else|#
directive|else
if|if
condition|(
name|glUseProgram
condition|)
name|glUseProgram
argument_list|(
literal|0
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*!     Returns the OpenGL identifier associated with this shader program.      \sa QGLShader::shaderId() */
end_comment
begin_function
DECL|function|programId
name|GLuint
name|QGLShaderProgram
operator|::
name|programId
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGLShaderProgram
argument_list|)
expr_stmt|;
name|GLuint
name|id
init|=
name|d
operator|->
name|programGuard
condition|?
name|d
operator|->
name|programGuard
operator|->
name|id
argument_list|()
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|id
condition|)
return|return
name|id
return|;
comment|// Create the identifier if we don't have one yet.  This is for
comment|// applications that want to create the attached shader configuration
comment|// themselves, particularly those using program binaries.
if|if
condition|(
operator|!
cast|const_cast
argument_list|<
name|QGLShaderProgram
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
operator|->
name|init
argument_list|()
condition|)
return|return
literal|0
return|;
return|return
name|d
operator|->
name|programGuard
condition|?
name|d
operator|->
name|programGuard
operator|->
name|id
argument_list|()
else|:
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     Binds the attribute \a name to the specified \a location.  This     function can be called before or after the program has been linked.     Any attributes that have not been explicitly bound when the program     is linked will be assigned locations automatically.      When this function is called after the program has been linked,     the program will need to be relinked for the change to take effect.      \sa attributeLocation() */
end_comment
begin_function
DECL|function|bindAttributeLocation
name|void
name|QGLShaderProgram
operator|::
name|bindAttributeLocation
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|int
name|location
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGLShaderProgram
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|init
argument_list|()
operator|||
operator|!
name|d
operator|->
name|programGuard
operator|||
operator|!
name|d
operator|->
name|programGuard
operator|->
name|id
argument_list|()
condition|)
return|return;
name|glBindAttribLocation
argument_list|(
name|d
operator|->
name|programGuard
operator|->
name|id
argument_list|()
argument_list|,
name|location
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|d
operator|->
name|linked
operator|=
literal|false
expr_stmt|;
comment|// Program needs to be relinked.
block|}
end_function
begin_comment
comment|/*!     \overload      Binds the attribute \a name to the specified \a location.  This     function can be called before or after the program has been linked.     Any attributes that have not been explicitly bound when the program     is linked will be assigned locations automatically.      When this function is called after the program has been linked,     the program will need to be relinked for the change to take effect.      \sa attributeLocation() */
end_comment
begin_function
DECL|function|bindAttributeLocation
name|void
name|QGLShaderProgram
operator|::
name|bindAttributeLocation
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|name
parameter_list|,
name|int
name|location
parameter_list|)
block|{
name|bindAttributeLocation
argument_list|(
name|name
operator|.
name|constData
argument_list|()
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \overload      Binds the attribute \a name to the specified \a location.  This     function can be called before or after the program has been linked.     Any attributes that have not been explicitly bound when the program     is linked will be assigned locations automatically.      When this function is called after the program has been linked,     the program will need to be relinked for the change to take effect.      \sa attributeLocation() */
end_comment
begin_function
DECL|function|bindAttributeLocation
name|void
name|QGLShaderProgram
operator|::
name|bindAttributeLocation
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|,
name|int
name|location
parameter_list|)
block|{
name|bindAttributeLocation
argument_list|(
name|name
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the location of the attribute \a name within this shader     program's parameter list.  Returns -1 if \a name is not a valid     attribute for this shader program.      \sa uniformLocation(), bindAttributeLocation() */
end_comment
begin_function
DECL|function|attributeLocation
name|int
name|QGLShaderProgram
operator|::
name|attributeLocation
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGLShaderProgram
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|linked
operator|&&
name|d
operator|->
name|programGuard
operator|&&
name|d
operator|->
name|programGuard
operator|->
name|id
argument_list|()
condition|)
block|{
return|return
name|glGetAttribLocation
argument_list|(
name|d
operator|->
name|programGuard
operator|->
name|id
argument_list|()
argument_list|,
name|name
argument_list|)
return|;
block|}
else|else
block|{
name|qWarning
argument_list|()
operator|<<
literal|"QGLShaderProgram::attributeLocation("
operator|<<
name|name
operator|<<
literal|"): shader program is not linked"
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
block|}
end_function
begin_comment
comment|/*!     \overload      Returns the location of the attribute \a name within this shader     program's parameter list.  Returns -1 if \a name is not a valid     attribute for this shader program.      \sa uniformLocation(), bindAttributeLocation() */
end_comment
begin_function
DECL|function|attributeLocation
name|int
name|QGLShaderProgram
operator|::
name|attributeLocation
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|name
parameter_list|)
specifier|const
block|{
return|return
name|attributeLocation
argument_list|(
name|name
operator|.
name|constData
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \overload      Returns the location of the attribute \a name within this shader     program's parameter list.  Returns -1 if \a name is not a valid     attribute for this shader program.      \sa uniformLocation(), bindAttributeLocation() */
end_comment
begin_function
DECL|function|attributeLocation
name|int
name|QGLShaderProgram
operator|::
name|attributeLocation
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
specifier|const
block|{
return|return
name|attributeLocation
argument_list|(
name|name
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the attribute at \a location in the current context to \a value.      \sa setUniformValue() */
end_comment
begin_function
DECL|function|setAttributeValue
name|void
name|QGLShaderProgram
operator|::
name|setAttributeValue
parameter_list|(
name|int
name|location
parameter_list|,
name|GLfloat
name|value
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGLShaderProgram
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|d
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|!=
operator|-
literal|1
condition|)
name|glVertexAttrib1fv
argument_list|(
name|location
argument_list|,
operator|&
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \overload      Sets the attribute called \a name in the current context to \a value.      \sa setUniformValue() */
end_comment
begin_function
DECL|function|setAttributeValue
name|void
name|QGLShaderProgram
operator|::
name|setAttributeValue
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|GLfloat
name|value
parameter_list|)
block|{
name|setAttributeValue
argument_list|(
name|attributeLocation
argument_list|(
name|name
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the attribute at \a location in the current context to     the 2D vector (\a x, \a y).      \sa setUniformValue() */
end_comment
begin_function
DECL|function|setAttributeValue
name|void
name|QGLShaderProgram
operator|::
name|setAttributeValue
parameter_list|(
name|int
name|location
parameter_list|,
name|GLfloat
name|x
parameter_list|,
name|GLfloat
name|y
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGLShaderProgram
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|d
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|!=
operator|-
literal|1
condition|)
block|{
name|GLfloat
name|values
index|[
literal|2
index|]
init|=
block|{
name|x
block|,
name|y
block|}
decl_stmt|;
name|glVertexAttrib2fv
argument_list|(
name|location
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \overload      Sets the attribute called \a name in the current context to     the 2D vector (\a x, \a y).      \sa setUniformValue() */
end_comment
begin_function
DECL|function|setAttributeValue
name|void
name|QGLShaderProgram
operator|::
name|setAttributeValue
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|GLfloat
name|x
parameter_list|,
name|GLfloat
name|y
parameter_list|)
block|{
name|setAttributeValue
argument_list|(
name|attributeLocation
argument_list|(
name|name
argument_list|)
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the attribute at \a location in the current context to     the 3D vector (\a x, \a y, \a z).      \sa setUniformValue() */
end_comment
begin_function
DECL|function|setAttributeValue
name|void
name|QGLShaderProgram
operator|::
name|setAttributeValue
parameter_list|(
name|int
name|location
parameter_list|,
name|GLfloat
name|x
parameter_list|,
name|GLfloat
name|y
parameter_list|,
name|GLfloat
name|z
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGLShaderProgram
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|d
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|!=
operator|-
literal|1
condition|)
block|{
name|GLfloat
name|values
index|[
literal|3
index|]
init|=
block|{
name|x
block|,
name|y
block|,
name|z
block|}
decl_stmt|;
name|glVertexAttrib3fv
argument_list|(
name|location
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \overload      Sets the attribute called \a name in the current context to     the 3D vector (\a x, \a y, \a z).      \sa setUniformValue() */
end_comment
begin_function
DECL|function|setAttributeValue
name|void
name|QGLShaderProgram
operator|::
name|setAttributeValue
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|GLfloat
name|x
parameter_list|,
name|GLfloat
name|y
parameter_list|,
name|GLfloat
name|z
parameter_list|)
block|{
name|setAttributeValue
argument_list|(
name|attributeLocation
argument_list|(
name|name
argument_list|)
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the attribute at \a location in the current context to     the 4D vector (\a x, \a y, \a z, \a w).      \sa setUniformValue() */
end_comment
begin_function
DECL|function|setAttributeValue
name|void
name|QGLShaderProgram
operator|::
name|setAttributeValue
parameter_list|(
name|int
name|location
parameter_list|,
name|GLfloat
name|x
parameter_list|,
name|GLfloat
name|y
parameter_list|,
name|GLfloat
name|z
parameter_list|,
name|GLfloat
name|w
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGLShaderProgram
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|d
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|!=
operator|-
literal|1
condition|)
block|{
name|GLfloat
name|values
index|[
literal|4
index|]
init|=
block|{
name|x
block|,
name|y
block|,
name|z
block|,
name|w
block|}
decl_stmt|;
name|glVertexAttrib4fv
argument_list|(
name|location
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \overload      Sets the attribute called \a name in the current context to     the 4D vector (\a x, \a y, \a z, \a w).      \sa setUniformValue() */
end_comment
begin_function
DECL|function|setAttributeValue
name|void
name|QGLShaderProgram
operator|::
name|setAttributeValue
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|GLfloat
name|x
parameter_list|,
name|GLfloat
name|y
parameter_list|,
name|GLfloat
name|z
parameter_list|,
name|GLfloat
name|w
parameter_list|)
block|{
name|setAttributeValue
argument_list|(
name|attributeLocation
argument_list|(
name|name
argument_list|)
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the attribute at \a location in the current context to \a value.      \sa setUniformValue() */
end_comment
begin_function
DECL|function|setAttributeValue
name|void
name|QGLShaderProgram
operator|::
name|setAttributeValue
parameter_list|(
name|int
name|location
parameter_list|,
specifier|const
name|QVector2D
modifier|&
name|value
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGLShaderProgram
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|d
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|!=
operator|-
literal|1
condition|)
name|glVertexAttrib2fv
argument_list|(
name|location
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|GLfloat
operator|*
argument_list|>
argument_list|(
operator|&
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \overload      Sets the attribute called \a name in the current context to \a value.      \sa setUniformValue() */
end_comment
begin_function
DECL|function|setAttributeValue
name|void
name|QGLShaderProgram
operator|::
name|setAttributeValue
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|QVector2D
modifier|&
name|value
parameter_list|)
block|{
name|setAttributeValue
argument_list|(
name|attributeLocation
argument_list|(
name|name
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the attribute at \a location in the current context to \a value.      \sa setUniformValue() */
end_comment
begin_function
DECL|function|setAttributeValue
name|void
name|QGLShaderProgram
operator|::
name|setAttributeValue
parameter_list|(
name|int
name|location
parameter_list|,
specifier|const
name|QVector3D
modifier|&
name|value
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGLShaderProgram
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|d
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|!=
operator|-
literal|1
condition|)
name|glVertexAttrib3fv
argument_list|(
name|location
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|GLfloat
operator|*
argument_list|>
argument_list|(
operator|&
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \overload      Sets the attribute called \a name in the current context to \a value.      \sa setUniformValue() */
end_comment
begin_function
DECL|function|setAttributeValue
name|void
name|QGLShaderProgram
operator|::
name|setAttributeValue
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|QVector3D
modifier|&
name|value
parameter_list|)
block|{
name|setAttributeValue
argument_list|(
name|attributeLocation
argument_list|(
name|name
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the attribute at \a location in the current context to \a value.      \sa setUniformValue() */
end_comment
begin_function
DECL|function|setAttributeValue
name|void
name|QGLShaderProgram
operator|::
name|setAttributeValue
parameter_list|(
name|int
name|location
parameter_list|,
specifier|const
name|QVector4D
modifier|&
name|value
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGLShaderProgram
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|d
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|!=
operator|-
literal|1
condition|)
name|glVertexAttrib4fv
argument_list|(
name|location
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|GLfloat
operator|*
argument_list|>
argument_list|(
operator|&
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \overload      Sets the attribute called \a name in the current context to \a value.      \sa setUniformValue() */
end_comment
begin_function
DECL|function|setAttributeValue
name|void
name|QGLShaderProgram
operator|::
name|setAttributeValue
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|QVector4D
modifier|&
name|value
parameter_list|)
block|{
name|setAttributeValue
argument_list|(
name|attributeLocation
argument_list|(
name|name
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the attribute at \a location in the current context to \a value.      \sa setUniformValue() */
end_comment
begin_function
DECL|function|setAttributeValue
name|void
name|QGLShaderProgram
operator|::
name|setAttributeValue
parameter_list|(
name|int
name|location
parameter_list|,
specifier|const
name|QColor
modifier|&
name|value
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGLShaderProgram
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|d
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|!=
operator|-
literal|1
condition|)
block|{
name|GLfloat
name|values
index|[
literal|4
index|]
init|=
block|{
name|GLfloat
argument_list|(
name|value
operator|.
name|redF
argument_list|()
argument_list|)
block|,
name|GLfloat
argument_list|(
name|value
operator|.
name|greenF
argument_list|()
argument_list|)
block|,
name|GLfloat
argument_list|(
name|value
operator|.
name|blueF
argument_list|()
argument_list|)
block|,
name|GLfloat
argument_list|(
argument|value.alphaF()
argument_list|)
block|}
decl_stmt|;
name|glVertexAttrib4fv
argument_list|(
name|location
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \overload      Sets the attribute called \a name in the current context to \a value.      \sa setUniformValue() */
end_comment
begin_function
DECL|function|setAttributeValue
name|void
name|QGLShaderProgram
operator|::
name|setAttributeValue
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|QColor
modifier|&
name|value
parameter_list|)
block|{
name|setAttributeValue
argument_list|(
name|attributeLocation
argument_list|(
name|name
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the attribute at \a location in the current context to the     contents of \a values, which contains \a columns elements, each     consisting of \a rows elements.  The \a rows value should be     1, 2, 3, or 4.  This function is typically used to set matrix     values and column vectors.      \sa setUniformValue() */
end_comment
begin_function
DECL|function|setAttributeValue
name|void
name|QGLShaderProgram
operator|::
name|setAttributeValue
parameter_list|(
name|int
name|location
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|values
parameter_list|,
name|int
name|columns
parameter_list|,
name|int
name|rows
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGLShaderProgram
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|d
argument_list|)
expr_stmt|;
if|if
condition|(
name|rows
argument_list|<
literal|1
operator|||
name|rows
argument_list|>
literal|4
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"QGLShaderProgram::setAttributeValue: rows"
operator|<<
name|rows
operator|<<
literal|"not supported"
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|location
operator|!=
operator|-
literal|1
condition|)
block|{
while|while
condition|(
name|columns
operator|--
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|rows
operator|==
literal|1
condition|)
name|glVertexAttrib1fv
argument_list|(
name|location
argument_list|,
name|values
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|rows
operator|==
literal|2
condition|)
name|glVertexAttrib2fv
argument_list|(
name|location
argument_list|,
name|values
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|rows
operator|==
literal|3
condition|)
name|glVertexAttrib3fv
argument_list|(
name|location
argument_list|,
name|values
argument_list|)
expr_stmt|;
else|else
name|glVertexAttrib4fv
argument_list|(
name|location
argument_list|,
name|values
argument_list|)
expr_stmt|;
name|values
operator|+=
name|rows
expr_stmt|;
operator|++
name|location
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|/*!     \overload      Sets the attribute called \a name in the current context to the     contents of \a values, which contains \a columns elements, each     consisting of \a rows elements.  The \a rows value should be     1, 2, 3, or 4.  This function is typically used to set matrix     values and column vectors.      \sa setUniformValue() */
end_comment
begin_function
DECL|function|setAttributeValue
name|void
name|QGLShaderProgram
operator|::
name|setAttributeValue
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|values
parameter_list|,
name|int
name|columns
parameter_list|,
name|int
name|rows
parameter_list|)
block|{
name|setAttributeValue
argument_list|(
name|attributeLocation
argument_list|(
name|name
argument_list|)
argument_list|,
name|values
argument_list|,
name|columns
argument_list|,
name|rows
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets an array of vertex \a values on the attribute at \a location     in this shader program.  The \a tupleSize indicates the number of     components per vertex (1, 2, 3, or 4), and the \a stride indicates     the number of bytes between vertices.  A default \a stride value     of zero indicates that the vertices are densely packed in \a values.      The array will become active when enableAttributeArray() is called     on the \a location.  Otherwise the value specified with     setAttributeValue() for \a location will be used.      \sa setAttributeValue(), setUniformValue(), enableAttributeArray()     \sa disableAttributeArray() */
end_comment
begin_function
DECL|function|setAttributeArray
name|void
name|QGLShaderProgram
operator|::
name|setAttributeArray
parameter_list|(
name|int
name|location
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|values
parameter_list|,
name|int
name|tupleSize
parameter_list|,
name|int
name|stride
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGLShaderProgram
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|d
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|!=
operator|-
literal|1
condition|)
block|{
name|glVertexAttribPointer
argument_list|(
name|location
argument_list|,
name|tupleSize
argument_list|,
name|GL_FLOAT
argument_list|,
name|GL_FALSE
argument_list|,
name|stride
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     Sets an array of 2D vertex \a values on the attribute at \a location     in this shader program.  The \a stride indicates the number of bytes     between vertices.  A default \a stride value of zero indicates that     the vertices are densely packed in \a values.      The array will become active when enableAttributeArray() is called     on the \a location.  Otherwise the value specified with     setAttributeValue() for \a location will be used.      \sa setAttributeValue(), setUniformValue(), enableAttributeArray()     \sa disableAttributeArray() */
end_comment
begin_function
DECL|function|setAttributeArray
name|void
name|QGLShaderProgram
operator|::
name|setAttributeArray
parameter_list|(
name|int
name|location
parameter_list|,
specifier|const
name|QVector2D
modifier|*
name|values
parameter_list|,
name|int
name|stride
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGLShaderProgram
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|d
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|!=
operator|-
literal|1
condition|)
block|{
name|glVertexAttribPointer
argument_list|(
name|location
argument_list|,
literal|2
argument_list|,
name|GL_FLOAT
argument_list|,
name|GL_FALSE
argument_list|,
name|stride
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     Sets an array of 3D vertex \a values on the attribute at \a location     in this shader program.  The \a stride indicates the number of bytes     between vertices.  A default \a stride value of zero indicates that     the vertices are densely packed in \a values.      The array will become active when enableAttributeArray() is called     on the \a location.  Otherwise the value specified with     setAttributeValue() for \a location will be used.      \sa setAttributeValue(), setUniformValue(), enableAttributeArray()     \sa disableAttributeArray() */
end_comment
begin_function
DECL|function|setAttributeArray
name|void
name|QGLShaderProgram
operator|::
name|setAttributeArray
parameter_list|(
name|int
name|location
parameter_list|,
specifier|const
name|QVector3D
modifier|*
name|values
parameter_list|,
name|int
name|stride
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGLShaderProgram
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|d
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|!=
operator|-
literal|1
condition|)
block|{
name|glVertexAttribPointer
argument_list|(
name|location
argument_list|,
literal|3
argument_list|,
name|GL_FLOAT
argument_list|,
name|GL_FALSE
argument_list|,
name|stride
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     Sets an array of 4D vertex \a values on the attribute at \a location     in this shader program.  The \a stride indicates the number of bytes     between vertices.  A default \a stride value of zero indicates that     the vertices are densely packed in \a values.      The array will become active when enableAttributeArray() is called     on the \a location.  Otherwise the value specified with     setAttributeValue() for \a location will be used.      \sa setAttributeValue(), setUniformValue(), enableAttributeArray()     \sa disableAttributeArray() */
end_comment
begin_function
DECL|function|setAttributeArray
name|void
name|QGLShaderProgram
operator|::
name|setAttributeArray
parameter_list|(
name|int
name|location
parameter_list|,
specifier|const
name|QVector4D
modifier|*
name|values
parameter_list|,
name|int
name|stride
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGLShaderProgram
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|d
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|!=
operator|-
literal|1
condition|)
block|{
name|glVertexAttribPointer
argument_list|(
name|location
argument_list|,
literal|4
argument_list|,
name|GL_FLOAT
argument_list|,
name|GL_FALSE
argument_list|,
name|stride
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     Sets an array of vertex \a values on the attribute at \a location     in this shader program.  The \a stride indicates the number of bytes     between vertices.  A default \a stride value of zero indicates that     the vertices are densely packed in \a values.      The \a type indicates the type of elements in the \a values array,     usually \c{GL_FLOAT}, \c{GL_UNSIGNED_BYTE}, etc.  The \a tupleSize     indicates the number of components per vertex: 1, 2, 3, or 4.      The array will become active when enableAttributeArray() is called     on the \a location.  Otherwise the value specified with     setAttributeValue() for \a location will be used.      The setAttributeBuffer() function can be used to set the attribute     array to an offset within a vertex buffer.      \sa setAttributeValue(), setUniformValue(), enableAttributeArray()     \sa disableAttributeArray(), setAttributeBuffer()     \since 4.7 */
end_comment
begin_function
DECL|function|setAttributeArray
name|void
name|QGLShaderProgram
operator|::
name|setAttributeArray
parameter_list|(
name|int
name|location
parameter_list|,
name|GLenum
name|type
parameter_list|,
specifier|const
name|void
modifier|*
name|values
parameter_list|,
name|int
name|tupleSize
parameter_list|,
name|int
name|stride
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGLShaderProgram
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|d
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|!=
operator|-
literal|1
condition|)
block|{
name|glVertexAttribPointer
argument_list|(
name|location
argument_list|,
name|tupleSize
argument_list|,
name|type
argument_list|,
name|GL_TRUE
argument_list|,
name|stride
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \overload      Sets an array of vertex \a values on the attribute called \a name     in this shader program.  The \a tupleSize indicates the number of     components per vertex (1, 2, 3, or 4), and the \a stride indicates     the number of bytes between vertices.  A default \a stride value     of zero indicates that the vertices are densely packed in \a values.      The array will become active when enableAttributeArray() is called     on \a name.  Otherwise the value specified with setAttributeValue()     for \a name will be used.      \sa setAttributeValue(), setUniformValue(), enableAttributeArray()     \sa disableAttributeArray() */
end_comment
begin_function
DECL|function|setAttributeArray
name|void
name|QGLShaderProgram
operator|::
name|setAttributeArray
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|values
parameter_list|,
name|int
name|tupleSize
parameter_list|,
name|int
name|stride
parameter_list|)
block|{
name|setAttributeArray
argument_list|(
name|attributeLocation
argument_list|(
name|name
argument_list|)
argument_list|,
name|values
argument_list|,
name|tupleSize
argument_list|,
name|stride
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \overload      Sets an array of 2D vertex \a values on the attribute called \a name     in this shader program.  The \a stride indicates the number of bytes     between vertices.  A default \a stride value of zero indicates that     the vertices are densely packed in \a values.      The array will become active when enableAttributeArray() is called     on \a name.  Otherwise the value specified with setAttributeValue()     for \a name will be used.      \sa setAttributeValue(), setUniformValue(), enableAttributeArray()     \sa disableAttributeArray() */
end_comment
begin_function
DECL|function|setAttributeArray
name|void
name|QGLShaderProgram
operator|::
name|setAttributeArray
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|QVector2D
modifier|*
name|values
parameter_list|,
name|int
name|stride
parameter_list|)
block|{
name|setAttributeArray
argument_list|(
name|attributeLocation
argument_list|(
name|name
argument_list|)
argument_list|,
name|values
argument_list|,
name|stride
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \overload      Sets an array of 3D vertex \a values on the attribute called \a name     in this shader program.  The \a stride indicates the number of bytes     between vertices.  A default \a stride value of zero indicates that     the vertices are densely packed in \a values.      The array will become active when enableAttributeArray() is called     on \a name.  Otherwise the value specified with setAttributeValue()     for \a name will be used.      \sa setAttributeValue(), setUniformValue(), enableAttributeArray()     \sa disableAttributeArray() */
end_comment
begin_function
DECL|function|setAttributeArray
name|void
name|QGLShaderProgram
operator|::
name|setAttributeArray
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|QVector3D
modifier|*
name|values
parameter_list|,
name|int
name|stride
parameter_list|)
block|{
name|setAttributeArray
argument_list|(
name|attributeLocation
argument_list|(
name|name
argument_list|)
argument_list|,
name|values
argument_list|,
name|stride
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \overload      Sets an array of 4D vertex \a values on the attribute called \a name     in this shader program.  The \a stride indicates the number of bytes     between vertices.  A default \a stride value of zero indicates that     the vertices are densely packed in \a values.      The array will become active when enableAttributeArray() is called     on \a name.  Otherwise the value specified with setAttributeValue()     for \a name will be used.      \sa setAttributeValue(), setUniformValue(), enableAttributeArray()     \sa disableAttributeArray() */
end_comment
begin_function
DECL|function|setAttributeArray
name|void
name|QGLShaderProgram
operator|::
name|setAttributeArray
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|QVector4D
modifier|*
name|values
parameter_list|,
name|int
name|stride
parameter_list|)
block|{
name|setAttributeArray
argument_list|(
name|attributeLocation
argument_list|(
name|name
argument_list|)
argument_list|,
name|values
argument_list|,
name|stride
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \overload      Sets an array of vertex \a values on the attribute called \a name     in this shader program.  The \a stride indicates the number of bytes     between vertices.  A default \a stride value of zero indicates that     the vertices are densely packed in \a values.      The \a type indicates the type of elements in the \a values array,     usually \c{GL_FLOAT}, \c{GL_UNSIGNED_BYTE}, etc.  The \a tupleSize     indicates the number of components per vertex: 1, 2, 3, or 4.      The array will become active when enableAttributeArray() is called     on the \a name.  Otherwise the value specified with     setAttributeValue() for \a name will be used.      The setAttributeBuffer() function can be used to set the attribute     array to an offset within a vertex buffer.      \sa setAttributeValue(), setUniformValue(), enableAttributeArray()     \sa disableAttributeArray(), setAttributeBuffer()     \since 4.7 */
end_comment
begin_function
DECL|function|setAttributeArray
name|void
name|QGLShaderProgram
operator|::
name|setAttributeArray
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|GLenum
name|type
parameter_list|,
specifier|const
name|void
modifier|*
name|values
parameter_list|,
name|int
name|tupleSize
parameter_list|,
name|int
name|stride
parameter_list|)
block|{
name|setAttributeArray
argument_list|(
name|attributeLocation
argument_list|(
name|name
argument_list|)
argument_list|,
name|type
argument_list|,
name|values
argument_list|,
name|tupleSize
argument_list|,
name|stride
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets an array of vertex values on the attribute at \a location in     this shader program, starting at a specific \a offset in the     currently bound vertex buffer.  The \a stride indicates the number     of bytes between vertices.  A default \a stride value of zero     indicates that the vertices are densely packed in the value array.      The \a type indicates the type of elements in the vertex value     array, usually \c{GL_FLOAT}, \c{GL_UNSIGNED_BYTE}, etc.  The \a     tupleSize indicates the number of components per vertex: 1, 2, 3,     or 4.      The array will become active when enableAttributeArray() is called     on the \a location.  Otherwise the value specified with     setAttributeValue() for \a location will be used.      \sa setAttributeArray()     \since 4.7 */
end_comment
begin_function
DECL|function|setAttributeBuffer
name|void
name|QGLShaderProgram
operator|::
name|setAttributeBuffer
parameter_list|(
name|int
name|location
parameter_list|,
name|GLenum
name|type
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|tupleSize
parameter_list|,
name|int
name|stride
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGLShaderProgram
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|d
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|!=
operator|-
literal|1
condition|)
block|{
name|glVertexAttribPointer
argument_list|(
name|location
argument_list|,
name|tupleSize
argument_list|,
name|type
argument_list|,
name|GL_TRUE
argument_list|,
name|stride
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|void
operator|*
argument_list|>
argument_list|(
name|offset
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \overload      Sets an array of vertex values on the attribute called \a name     in this shader program, starting at a specific \a offset in the     currently bound vertex buffer.  The \a stride indicates the number     of bytes between vertices.  A default \a stride value of zero     indicates that the vertices are densely packed in the value array.      The \a type indicates the type of elements in the vertex value     array, usually \c{GL_FLOAT}, \c{GL_UNSIGNED_BYTE}, etc.  The \a     tupleSize indicates the number of components per vertex: 1, 2, 3,     or 4.      The array will become active when enableAttributeArray() is called     on the \a name.  Otherwise the value specified with     setAttributeValue() for \a name will be used.      \sa setAttributeArray()     \since 4.7 */
end_comment
begin_function
DECL|function|setAttributeBuffer
name|void
name|QGLShaderProgram
operator|::
name|setAttributeBuffer
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|GLenum
name|type
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|tupleSize
parameter_list|,
name|int
name|stride
parameter_list|)
block|{
name|setAttributeBuffer
argument_list|(
name|attributeLocation
argument_list|(
name|name
argument_list|)
argument_list|,
name|type
argument_list|,
name|offset
argument_list|,
name|tupleSize
argument_list|,
name|stride
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Enables the vertex array at \a location in this shader program     so that the value set by setAttributeArray() on \a location     will be used by the shader program.      \sa disableAttributeArray(), setAttributeArray(), setAttributeValue()     \sa setUniformValue() */
end_comment
begin_function
DECL|function|enableAttributeArray
name|void
name|QGLShaderProgram
operator|::
name|enableAttributeArray
parameter_list|(
name|int
name|location
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGLShaderProgram
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|d
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|!=
operator|-
literal|1
condition|)
name|glEnableVertexAttribArray
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \overload      Enables the vertex array called \a name in this shader program     so that the value set by setAttributeArray() on \a name     will be used by the shader program.      \sa disableAttributeArray(), setAttributeArray(), setAttributeValue()     \sa setUniformValue() */
end_comment
begin_function
DECL|function|enableAttributeArray
name|void
name|QGLShaderProgram
operator|::
name|enableAttributeArray
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|)
block|{
name|enableAttributeArray
argument_list|(
name|attributeLocation
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Disables the vertex array at \a location in this shader program     that was enabled by a previous call to enableAttributeArray().      \sa enableAttributeArray(), setAttributeArray(), setAttributeValue()     \sa setUniformValue() */
end_comment
begin_function
DECL|function|disableAttributeArray
name|void
name|QGLShaderProgram
operator|::
name|disableAttributeArray
parameter_list|(
name|int
name|location
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGLShaderProgram
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|d
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|!=
operator|-
literal|1
condition|)
name|glDisableVertexAttribArray
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \overload      Disables the vertex array called \a name in this shader program     that was enabled by a previous call to enableAttributeArray().      \sa enableAttributeArray(), setAttributeArray(), setAttributeValue()     \sa setUniformValue() */
end_comment
begin_function
DECL|function|disableAttributeArray
name|void
name|QGLShaderProgram
operator|::
name|disableAttributeArray
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|)
block|{
name|disableAttributeArray
argument_list|(
name|attributeLocation
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the location of the uniform variable \a name within this shader     program's parameter list.  Returns -1 if \a name is not a valid     uniform variable for this shader program.      \sa attributeLocation() */
end_comment
begin_function
DECL|function|uniformLocation
name|int
name|QGLShaderProgram
operator|::
name|uniformLocation
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGLShaderProgram
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|d
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|linked
operator|&&
name|d
operator|->
name|programGuard
operator|&&
name|d
operator|->
name|programGuard
operator|->
name|id
argument_list|()
condition|)
block|{
return|return
name|glGetUniformLocation
argument_list|(
name|d
operator|->
name|programGuard
operator|->
name|id
argument_list|()
argument_list|,
name|name
argument_list|)
return|;
block|}
else|else
block|{
name|qWarning
argument_list|()
operator|<<
literal|"QGLShaderProgram::uniformLocation("
operator|<<
name|name
operator|<<
literal|"): shader program is not linked"
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
block|}
end_function
begin_comment
comment|/*!     \overload      Returns the location of the uniform variable \a name within this shader     program's parameter list.  Returns -1 if \a name is not a valid     uniform variable for this shader program.      \sa attributeLocation() */
end_comment
begin_function
DECL|function|uniformLocation
name|int
name|QGLShaderProgram
operator|::
name|uniformLocation
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|name
parameter_list|)
specifier|const
block|{
return|return
name|uniformLocation
argument_list|(
name|name
operator|.
name|constData
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \overload      Returns the location of the uniform variable \a name within this shader     program's parameter list.  Returns -1 if \a name is not a valid     uniform variable for this shader program.      \sa attributeLocation() */
end_comment
begin_function
DECL|function|uniformLocation
name|int
name|QGLShaderProgram
operator|::
name|uniformLocation
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
specifier|const
block|{
return|return
name|uniformLocation
argument_list|(
name|name
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the uniform variable at \a location in the current context to \a value.      \sa setAttributeValue() */
end_comment
begin_function
DECL|function|setUniformValue
name|void
name|QGLShaderProgram
operator|::
name|setUniformValue
parameter_list|(
name|int
name|location
parameter_list|,
name|GLfloat
name|value
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGLShaderProgram
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|d
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|!=
operator|-
literal|1
condition|)
name|glUniform1fv
argument_list|(
name|location
argument_list|,
literal|1
argument_list|,
operator|&
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \overload      Sets the uniform variable called \a name in the current context     to \a value.      \sa setAttributeValue() */
end_comment
begin_function
DECL|function|setUniformValue
name|void
name|QGLShaderProgram
operator|::
name|setUniformValue
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|GLfloat
name|value
parameter_list|)
block|{
name|setUniformValue
argument_list|(
name|uniformLocation
argument_list|(
name|name
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the uniform variable at \a location in the current context to \a value.      \sa setAttributeValue() */
end_comment
begin_function
DECL|function|setUniformValue
name|void
name|QGLShaderProgram
operator|::
name|setUniformValue
parameter_list|(
name|int
name|location
parameter_list|,
name|GLint
name|value
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGLShaderProgram
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|d
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|!=
operator|-
literal|1
condition|)
name|glUniform1i
argument_list|(
name|location
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \overload      Sets the uniform variable called \a name in the current context     to \a value.      \sa setAttributeValue() */
end_comment
begin_function
DECL|function|setUniformValue
name|void
name|QGLShaderProgram
operator|::
name|setUniformValue
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|GLint
name|value
parameter_list|)
block|{
name|setUniformValue
argument_list|(
name|uniformLocation
argument_list|(
name|name
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the uniform variable at \a location in the current context to \a value.     This function should be used when setting sampler values.      \sa setAttributeValue() */
end_comment
begin_function
DECL|function|setUniformValue
name|void
name|QGLShaderProgram
operator|::
name|setUniformValue
parameter_list|(
name|int
name|location
parameter_list|,
name|GLuint
name|value
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGLShaderProgram
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|d
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|!=
operator|-
literal|1
condition|)
name|glUniform1i
argument_list|(
name|location
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \overload      Sets the uniform variable called \a name in the current context     to \a value.  This function should be used when setting sampler values.      \sa setAttributeValue() */
end_comment
begin_function
DECL|function|setUniformValue
name|void
name|QGLShaderProgram
operator|::
name|setUniformValue
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|GLuint
name|value
parameter_list|)
block|{
name|setUniformValue
argument_list|(
name|uniformLocation
argument_list|(
name|name
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the uniform variable at \a location in the current context to     the 2D vector (\a x, \a y).      \sa setAttributeValue() */
end_comment
begin_function
DECL|function|setUniformValue
name|void
name|QGLShaderProgram
operator|::
name|setUniformValue
parameter_list|(
name|int
name|location
parameter_list|,
name|GLfloat
name|x
parameter_list|,
name|GLfloat
name|y
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGLShaderProgram
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|d
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|!=
operator|-
literal|1
condition|)
block|{
name|GLfloat
name|values
index|[
literal|2
index|]
init|=
block|{
name|x
block|,
name|y
block|}
decl_stmt|;
name|glUniform2fv
argument_list|(
name|location
argument_list|,
literal|1
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \overload      Sets the uniform variable called \a name in the current context to     the 2D vector (\a x, \a y).      \sa setAttributeValue() */
end_comment
begin_function
DECL|function|setUniformValue
name|void
name|QGLShaderProgram
operator|::
name|setUniformValue
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|GLfloat
name|x
parameter_list|,
name|GLfloat
name|y
parameter_list|)
block|{
name|setUniformValue
argument_list|(
name|uniformLocation
argument_list|(
name|name
argument_list|)
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the uniform variable at \a location in the current context to     the 3D vector (\a x, \a y, \a z).      \sa setAttributeValue() */
end_comment
begin_function
DECL|function|setUniformValue
name|void
name|QGLShaderProgram
operator|::
name|setUniformValue
parameter_list|(
name|int
name|location
parameter_list|,
name|GLfloat
name|x
parameter_list|,
name|GLfloat
name|y
parameter_list|,
name|GLfloat
name|z
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGLShaderProgram
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|d
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|!=
operator|-
literal|1
condition|)
block|{
name|GLfloat
name|values
index|[
literal|3
index|]
init|=
block|{
name|x
block|,
name|y
block|,
name|z
block|}
decl_stmt|;
name|glUniform3fv
argument_list|(
name|location
argument_list|,
literal|1
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \overload      Sets the uniform variable called \a name in the current context to     the 3D vector (\a x, \a y, \a z).      \sa setAttributeValue() */
end_comment
begin_function
DECL|function|setUniformValue
name|void
name|QGLShaderProgram
operator|::
name|setUniformValue
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|GLfloat
name|x
parameter_list|,
name|GLfloat
name|y
parameter_list|,
name|GLfloat
name|z
parameter_list|)
block|{
name|setUniformValue
argument_list|(
name|uniformLocation
argument_list|(
name|name
argument_list|)
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the uniform variable at \a location in the current context to     the 4D vector (\a x, \a y, \a z, \a w).      \sa setAttributeValue() */
end_comment
begin_function
DECL|function|setUniformValue
name|void
name|QGLShaderProgram
operator|::
name|setUniformValue
parameter_list|(
name|int
name|location
parameter_list|,
name|GLfloat
name|x
parameter_list|,
name|GLfloat
name|y
parameter_list|,
name|GLfloat
name|z
parameter_list|,
name|GLfloat
name|w
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGLShaderProgram
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|d
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|!=
operator|-
literal|1
condition|)
block|{
name|GLfloat
name|values
index|[
literal|4
index|]
init|=
block|{
name|x
block|,
name|y
block|,
name|z
block|,
name|w
block|}
decl_stmt|;
name|glUniform4fv
argument_list|(
name|location
argument_list|,
literal|1
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \overload      Sets the uniform variable called \a name in the current context to     the 4D vector (\a x, \a y, \a z, \a w).      \sa setAttributeValue() */
end_comment
begin_function
DECL|function|setUniformValue
name|void
name|QGLShaderProgram
operator|::
name|setUniformValue
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|GLfloat
name|x
parameter_list|,
name|GLfloat
name|y
parameter_list|,
name|GLfloat
name|z
parameter_list|,
name|GLfloat
name|w
parameter_list|)
block|{
name|setUniformValue
argument_list|(
name|uniformLocation
argument_list|(
name|name
argument_list|)
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the uniform variable at \a location in the current context to \a value.      \sa setAttributeValue() */
end_comment
begin_function
DECL|function|setUniformValue
name|void
name|QGLShaderProgram
operator|::
name|setUniformValue
parameter_list|(
name|int
name|location
parameter_list|,
specifier|const
name|QVector2D
modifier|&
name|value
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGLShaderProgram
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|d
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|!=
operator|-
literal|1
condition|)
name|glUniform2fv
argument_list|(
name|location
argument_list|,
literal|1
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|GLfloat
operator|*
argument_list|>
argument_list|(
operator|&
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \overload      Sets the uniform variable called \a name in the current context     to \a value.      \sa setAttributeValue() */
end_comment
begin_function
DECL|function|setUniformValue
name|void
name|QGLShaderProgram
operator|::
name|setUniformValue
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|QVector2D
modifier|&
name|value
parameter_list|)
block|{
name|setUniformValue
argument_list|(
name|uniformLocation
argument_list|(
name|name
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the uniform variable at \a location in the current context to \a value.      \sa setAttributeValue() */
end_comment
begin_function
DECL|function|setUniformValue
name|void
name|QGLShaderProgram
operator|::
name|setUniformValue
parameter_list|(
name|int
name|location
parameter_list|,
specifier|const
name|QVector3D
modifier|&
name|value
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGLShaderProgram
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|d
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|!=
operator|-
literal|1
condition|)
name|glUniform3fv
argument_list|(
name|location
argument_list|,
literal|1
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|GLfloat
operator|*
argument_list|>
argument_list|(
operator|&
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \overload      Sets the uniform variable called \a name in the current context     to \a value.      \sa setAttributeValue() */
end_comment
begin_function
DECL|function|setUniformValue
name|void
name|QGLShaderProgram
operator|::
name|setUniformValue
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|QVector3D
modifier|&
name|value
parameter_list|)
block|{
name|setUniformValue
argument_list|(
name|uniformLocation
argument_list|(
name|name
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the uniform variable at \a location in the current context to \a value.      \sa setAttributeValue() */
end_comment
begin_function
DECL|function|setUniformValue
name|void
name|QGLShaderProgram
operator|::
name|setUniformValue
parameter_list|(
name|int
name|location
parameter_list|,
specifier|const
name|QVector4D
modifier|&
name|value
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGLShaderProgram
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|d
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|!=
operator|-
literal|1
condition|)
name|glUniform4fv
argument_list|(
name|location
argument_list|,
literal|1
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|GLfloat
operator|*
argument_list|>
argument_list|(
operator|&
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \overload      Sets the uniform variable called \a name in the current context     to \a value.      \sa setAttributeValue() */
end_comment
begin_function
DECL|function|setUniformValue
name|void
name|QGLShaderProgram
operator|::
name|setUniformValue
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|QVector4D
modifier|&
name|value
parameter_list|)
block|{
name|setUniformValue
argument_list|(
name|uniformLocation
argument_list|(
name|name
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the uniform variable at \a location in the current context to     the red, green, blue, and alpha components of \a color.      \sa setAttributeValue() */
end_comment
begin_function
DECL|function|setUniformValue
name|void
name|QGLShaderProgram
operator|::
name|setUniformValue
parameter_list|(
name|int
name|location
parameter_list|,
specifier|const
name|QColor
modifier|&
name|color
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGLShaderProgram
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|d
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|!=
operator|-
literal|1
condition|)
block|{
name|GLfloat
name|values
index|[
literal|4
index|]
init|=
block|{
name|GLfloat
argument_list|(
name|color
operator|.
name|redF
argument_list|()
argument_list|)
block|,
name|GLfloat
argument_list|(
name|color
operator|.
name|greenF
argument_list|()
argument_list|)
block|,
name|GLfloat
argument_list|(
name|color
operator|.
name|blueF
argument_list|()
argument_list|)
block|,
name|GLfloat
argument_list|(
argument|color.alphaF()
argument_list|)
block|}
decl_stmt|;
name|glUniform4fv
argument_list|(
name|location
argument_list|,
literal|1
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \overload      Sets the uniform variable called \a name in the current context to     the red, green, blue, and alpha components of \a color.      \sa setAttributeValue() */
end_comment
begin_function
DECL|function|setUniformValue
name|void
name|QGLShaderProgram
operator|::
name|setUniformValue
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|QColor
modifier|&
name|color
parameter_list|)
block|{
name|setUniformValue
argument_list|(
name|uniformLocation
argument_list|(
name|name
argument_list|)
argument_list|,
name|color
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the uniform variable at \a location in the current context to     the x and y coordinates of \a point.      \sa setAttributeValue() */
end_comment
begin_function
DECL|function|setUniformValue
name|void
name|QGLShaderProgram
operator|::
name|setUniformValue
parameter_list|(
name|int
name|location
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|point
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGLShaderProgram
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|d
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|!=
operator|-
literal|1
condition|)
block|{
name|GLfloat
name|values
index|[
literal|4
index|]
init|=
block|{
name|GLfloat
argument_list|(
name|point
operator|.
name|x
argument_list|()
argument_list|)
block|,
name|GLfloat
argument_list|(
argument|point.y()
argument_list|)
block|}
decl_stmt|;
name|glUniform2fv
argument_list|(
name|location
argument_list|,
literal|1
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \overload      Sets the uniform variable associated with \a name in the current     context to the x and y coordinates of \a point.      \sa setAttributeValue() */
end_comment
begin_function
DECL|function|setUniformValue
name|void
name|QGLShaderProgram
operator|::
name|setUniformValue
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|point
parameter_list|)
block|{
name|setUniformValue
argument_list|(
name|uniformLocation
argument_list|(
name|name
argument_list|)
argument_list|,
name|point
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the uniform variable at \a location in the current context to     the x and y coordinates of \a point.      \sa setAttributeValue() */
end_comment
begin_function
DECL|function|setUniformValue
name|void
name|QGLShaderProgram
operator|::
name|setUniformValue
parameter_list|(
name|int
name|location
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|point
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGLShaderProgram
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|d
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|!=
operator|-
literal|1
condition|)
block|{
name|GLfloat
name|values
index|[
literal|4
index|]
init|=
block|{
name|GLfloat
argument_list|(
name|point
operator|.
name|x
argument_list|()
argument_list|)
block|,
name|GLfloat
argument_list|(
argument|point.y()
argument_list|)
block|}
decl_stmt|;
name|glUniform2fv
argument_list|(
name|location
argument_list|,
literal|1
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \overload      Sets the uniform variable associated with \a name in the current     context to the x and y coordinates of \a point.      \sa setAttributeValue() */
end_comment
begin_function
DECL|function|setUniformValue
name|void
name|QGLShaderProgram
operator|::
name|setUniformValue
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|point
parameter_list|)
block|{
name|setUniformValue
argument_list|(
name|uniformLocation
argument_list|(
name|name
argument_list|)
argument_list|,
name|point
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the uniform variable at \a location in the current context to     the width and height of the given \a size.      \sa setAttributeValue() */
end_comment
begin_function
DECL|function|setUniformValue
name|void
name|QGLShaderProgram
operator|::
name|setUniformValue
parameter_list|(
name|int
name|location
parameter_list|,
specifier|const
name|QSize
modifier|&
name|size
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGLShaderProgram
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|d
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|!=
operator|-
literal|1
condition|)
block|{
name|GLfloat
name|values
index|[
literal|4
index|]
init|=
block|{
name|GLfloat
argument_list|(
name|size
operator|.
name|width
argument_list|()
argument_list|)
block|,
name|GLfloat
argument_list|(
argument|size.height()
argument_list|)
block|}
decl_stmt|;
name|glUniform2fv
argument_list|(
name|location
argument_list|,
literal|1
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \overload      Sets the uniform variable associated with \a name in the current     context to the width and height of the given \a size.      \sa setAttributeValue() */
end_comment
begin_function
DECL|function|setUniformValue
name|void
name|QGLShaderProgram
operator|::
name|setUniformValue
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|QSize
modifier|&
name|size
parameter_list|)
block|{
name|setUniformValue
argument_list|(
name|uniformLocation
argument_list|(
name|name
argument_list|)
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the uniform variable at \a location in the current context to     the width and height of the given \a size.      \sa setAttributeValue() */
end_comment
begin_function
DECL|function|setUniformValue
name|void
name|QGLShaderProgram
operator|::
name|setUniformValue
parameter_list|(
name|int
name|location
parameter_list|,
specifier|const
name|QSizeF
modifier|&
name|size
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGLShaderProgram
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|d
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|!=
operator|-
literal|1
condition|)
block|{
name|GLfloat
name|values
index|[
literal|4
index|]
init|=
block|{
name|GLfloat
argument_list|(
name|size
operator|.
name|width
argument_list|()
argument_list|)
block|,
name|GLfloat
argument_list|(
argument|size.height()
argument_list|)
block|}
decl_stmt|;
name|glUniform2fv
argument_list|(
name|location
argument_list|,
literal|1
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \overload      Sets the uniform variable associated with \a name in the current     context to the width and height of the given \a size.      \sa setAttributeValue() */
end_comment
begin_function
DECL|function|setUniformValue
name|void
name|QGLShaderProgram
operator|::
name|setUniformValue
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|QSizeF
modifier|&
name|size
parameter_list|)
block|{
name|setUniformValue
argument_list|(
name|uniformLocation
argument_list|(
name|name
argument_list|)
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the uniform variable at \a location in the current context     to a 2x2 matrix \a value.      \sa setAttributeValue() */
end_comment
begin_function
DECL|function|setUniformValue
name|void
name|QGLShaderProgram
operator|::
name|setUniformValue
parameter_list|(
name|int
name|location
parameter_list|,
specifier|const
name|QMatrix2x2
modifier|&
name|value
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGLShaderProgram
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|glUniformMatrix2fv
argument_list|(
name|location
argument_list|,
literal|1
argument_list|,
name|GL_FALSE
argument_list|,
name|value
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \overload      Sets the uniform variable called \a name in the current context     to a 2x2 matrix \a value.      \sa setAttributeValue() */
end_comment
begin_function
DECL|function|setUniformValue
name|void
name|QGLShaderProgram
operator|::
name|setUniformValue
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|QMatrix2x2
modifier|&
name|value
parameter_list|)
block|{
name|setUniformValue
argument_list|(
name|uniformLocation
argument_list|(
name|name
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the uniform variable at \a location in the current context     to a 2x3 matrix \a value.      \sa setAttributeValue() */
end_comment
begin_function
DECL|function|setUniformValue
name|void
name|QGLShaderProgram
operator|::
name|setUniformValue
parameter_list|(
name|int
name|location
parameter_list|,
specifier|const
name|QMatrix2x3
modifier|&
name|value
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGLShaderProgram
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|glUniform3fv
argument_list|(
name|location
argument_list|,
literal|2
argument_list|,
name|value
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \overload      Sets the uniform variable called \a name in the current context     to a 2x3 matrix \a value.      \sa setAttributeValue() */
end_comment
begin_function
DECL|function|setUniformValue
name|void
name|QGLShaderProgram
operator|::
name|setUniformValue
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|QMatrix2x3
modifier|&
name|value
parameter_list|)
block|{
name|setUniformValue
argument_list|(
name|uniformLocation
argument_list|(
name|name
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the uniform variable at \a location in the current context     to a 2x4 matrix \a value.      \sa setAttributeValue() */
end_comment
begin_function
DECL|function|setUniformValue
name|void
name|QGLShaderProgram
operator|::
name|setUniformValue
parameter_list|(
name|int
name|location
parameter_list|,
specifier|const
name|QMatrix2x4
modifier|&
name|value
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGLShaderProgram
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|glUniform4fv
argument_list|(
name|location
argument_list|,
literal|2
argument_list|,
name|value
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \overload      Sets the uniform variable called \a name in the current context     to a 2x4 matrix \a value.      \sa setAttributeValue() */
end_comment
begin_function
DECL|function|setUniformValue
name|void
name|QGLShaderProgram
operator|::
name|setUniformValue
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|QMatrix2x4
modifier|&
name|value
parameter_list|)
block|{
name|setUniformValue
argument_list|(
name|uniformLocation
argument_list|(
name|name
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the uniform variable at \a location in the current context     to a 3x2 matrix \a value.      \sa setAttributeValue() */
end_comment
begin_function
DECL|function|setUniformValue
name|void
name|QGLShaderProgram
operator|::
name|setUniformValue
parameter_list|(
name|int
name|location
parameter_list|,
specifier|const
name|QMatrix3x2
modifier|&
name|value
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGLShaderProgram
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|glUniform2fv
argument_list|(
name|location
argument_list|,
literal|3
argument_list|,
name|value
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \overload      Sets the uniform variable called \a name in the current context     to a 3x2 matrix \a value.      \sa setAttributeValue() */
end_comment
begin_function
DECL|function|setUniformValue
name|void
name|QGLShaderProgram
operator|::
name|setUniformValue
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|QMatrix3x2
modifier|&
name|value
parameter_list|)
block|{
name|setUniformValue
argument_list|(
name|uniformLocation
argument_list|(
name|name
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the uniform variable at \a location in the current context     to a 3x3 matrix \a value.      \sa setAttributeValue() */
end_comment
begin_function
DECL|function|setUniformValue
name|void
name|QGLShaderProgram
operator|::
name|setUniformValue
parameter_list|(
name|int
name|location
parameter_list|,
specifier|const
name|QMatrix3x3
modifier|&
name|value
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGLShaderProgram
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|glUniformMatrix3fv
argument_list|(
name|location
argument_list|,
literal|1
argument_list|,
name|GL_FALSE
argument_list|,
name|value
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \overload      Sets the uniform variable called \a name in the current context     to a 3x3 matrix \a value.      \sa setAttributeValue() */
end_comment
begin_function
DECL|function|setUniformValue
name|void
name|QGLShaderProgram
operator|::
name|setUniformValue
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|QMatrix3x3
modifier|&
name|value
parameter_list|)
block|{
name|setUniformValue
argument_list|(
name|uniformLocation
argument_list|(
name|name
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the uniform variable at \a location in the current context     to a 3x4 matrix \a value.      \sa setAttributeValue() */
end_comment
begin_function
DECL|function|setUniformValue
name|void
name|QGLShaderProgram
operator|::
name|setUniformValue
parameter_list|(
name|int
name|location
parameter_list|,
specifier|const
name|QMatrix3x4
modifier|&
name|value
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGLShaderProgram
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|glUniform4fv
argument_list|(
name|location
argument_list|,
literal|3
argument_list|,
name|value
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \overload      Sets the uniform variable called \a name in the current context     to a 3x4 matrix \a value.      \sa setAttributeValue() */
end_comment
begin_function
DECL|function|setUniformValue
name|void
name|QGLShaderProgram
operator|::
name|setUniformValue
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|QMatrix3x4
modifier|&
name|value
parameter_list|)
block|{
name|setUniformValue
argument_list|(
name|uniformLocation
argument_list|(
name|name
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the uniform variable at \a location in the current context     to a 4x2 matrix \a value.      \sa setAttributeValue() */
end_comment
begin_function
DECL|function|setUniformValue
name|void
name|QGLShaderProgram
operator|::
name|setUniformValue
parameter_list|(
name|int
name|location
parameter_list|,
specifier|const
name|QMatrix4x2
modifier|&
name|value
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGLShaderProgram
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|glUniform2fv
argument_list|(
name|location
argument_list|,
literal|4
argument_list|,
name|value
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \overload      Sets the uniform variable called \a name in the current context     to a 4x2 matrix \a value.      \sa setAttributeValue() */
end_comment
begin_function
DECL|function|setUniformValue
name|void
name|QGLShaderProgram
operator|::
name|setUniformValue
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|QMatrix4x2
modifier|&
name|value
parameter_list|)
block|{
name|setUniformValue
argument_list|(
name|uniformLocation
argument_list|(
name|name
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the uniform variable at \a location in the current context     to a 4x3 matrix \a value.      \sa setAttributeValue() */
end_comment
begin_function
DECL|function|setUniformValue
name|void
name|QGLShaderProgram
operator|::
name|setUniformValue
parameter_list|(
name|int
name|location
parameter_list|,
specifier|const
name|QMatrix4x3
modifier|&
name|value
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGLShaderProgram
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|glUniform3fv
argument_list|(
name|location
argument_list|,
literal|4
argument_list|,
name|value
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \overload      Sets the uniform variable called \a name in the current context     to a 4x3 matrix \a value.      \sa setAttributeValue() */
end_comment
begin_function
DECL|function|setUniformValue
name|void
name|QGLShaderProgram
operator|::
name|setUniformValue
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|QMatrix4x3
modifier|&
name|value
parameter_list|)
block|{
name|setUniformValue
argument_list|(
name|uniformLocation
argument_list|(
name|name
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the uniform variable at \a location in the current context     to a 4x4 matrix \a value.      \sa setAttributeValue() */
end_comment
begin_function
DECL|function|setUniformValue
name|void
name|QGLShaderProgram
operator|::
name|setUniformValue
parameter_list|(
name|int
name|location
parameter_list|,
specifier|const
name|QMatrix4x4
modifier|&
name|value
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGLShaderProgram
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|glUniformMatrix4fv
argument_list|(
name|location
argument_list|,
literal|1
argument_list|,
name|GL_FALSE
argument_list|,
name|value
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \overload      Sets the uniform variable called \a name in the current context     to a 4x4 matrix \a value.      \sa setAttributeValue() */
end_comment
begin_function
DECL|function|setUniformValue
name|void
name|QGLShaderProgram
operator|::
name|setUniformValue
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|QMatrix4x4
modifier|&
name|value
parameter_list|)
block|{
name|setUniformValue
argument_list|(
name|uniformLocation
argument_list|(
name|name
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \overload      Sets the uniform variable at \a location in the current context     to a 2x2 matrix \a value.  The matrix elements must be specified     in column-major order.      \sa setAttributeValue()     \since 4.7 */
end_comment
begin_function
DECL|function|setUniformValue
name|void
name|QGLShaderProgram
operator|::
name|setUniformValue
parameter_list|(
name|int
name|location
parameter_list|,
specifier|const
name|GLfloat
name|value
index|[
literal|2
index|]
index|[
literal|2
index|]
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGLShaderProgram
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|d
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|!=
operator|-
literal|1
condition|)
name|glUniformMatrix2fv
argument_list|(
name|location
argument_list|,
literal|1
argument_list|,
name|GL_FALSE
argument_list|,
name|value
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \overload      Sets the uniform variable at \a location in the current context     to a 3x3 matrix \a value.  The matrix elements must be specified     in column-major order.      \sa setAttributeValue()     \since 4.7 */
end_comment
begin_function
DECL|function|setUniformValue
name|void
name|QGLShaderProgram
operator|::
name|setUniformValue
parameter_list|(
name|int
name|location
parameter_list|,
specifier|const
name|GLfloat
name|value
index|[
literal|3
index|]
index|[
literal|3
index|]
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGLShaderProgram
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|d
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|!=
operator|-
literal|1
condition|)
name|glUniformMatrix3fv
argument_list|(
name|location
argument_list|,
literal|1
argument_list|,
name|GL_FALSE
argument_list|,
name|value
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \overload      Sets the uniform variable at \a location in the current context     to a 4x4 matrix \a value.  The matrix elements must be specified     in column-major order.      \sa setAttributeValue() */
end_comment
begin_function
DECL|function|setUniformValue
name|void
name|QGLShaderProgram
operator|::
name|setUniformValue
parameter_list|(
name|int
name|location
parameter_list|,
specifier|const
name|GLfloat
name|value
index|[
literal|4
index|]
index|[
literal|4
index|]
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGLShaderProgram
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|d
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|!=
operator|-
literal|1
condition|)
name|glUniformMatrix4fv
argument_list|(
name|location
argument_list|,
literal|1
argument_list|,
name|GL_FALSE
argument_list|,
name|value
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \overload      Sets the uniform variable called \a name in the current context     to a 2x2 matrix \a value.  The matrix elements must be specified     in column-major order.      \sa setAttributeValue()     \since 4.7 */
end_comment
begin_function
DECL|function|setUniformValue
name|void
name|QGLShaderProgram
operator|::
name|setUniformValue
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|GLfloat
name|value
index|[
literal|2
index|]
index|[
literal|2
index|]
parameter_list|)
block|{
name|setUniformValue
argument_list|(
name|uniformLocation
argument_list|(
name|name
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \overload      Sets the uniform variable called \a name in the current context     to a 3x3 matrix \a value.  The matrix elements must be specified     in column-major order.      \sa setAttributeValue()     \since 4.7 */
end_comment
begin_function
DECL|function|setUniformValue
name|void
name|QGLShaderProgram
operator|::
name|setUniformValue
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|GLfloat
name|value
index|[
literal|3
index|]
index|[
literal|3
index|]
parameter_list|)
block|{
name|setUniformValue
argument_list|(
name|uniformLocation
argument_list|(
name|name
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \overload      Sets the uniform variable called \a name in the current context     to a 4x4 matrix \a value.  The matrix elements must be specified     in column-major order.      \sa setAttributeValue() */
end_comment
begin_function
DECL|function|setUniformValue
name|void
name|QGLShaderProgram
operator|::
name|setUniformValue
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|GLfloat
name|value
index|[
literal|4
index|]
index|[
literal|4
index|]
parameter_list|)
block|{
name|setUniformValue
argument_list|(
name|uniformLocation
argument_list|(
name|name
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the uniform variable at \a location in the current context to a     3x3 transformation matrix \a value that is specified as a QTransform value.      To set a QTransform value as a 4x4 matrix in a shader, use     \c{setUniformValue(location, QMatrix4x4(value))}. */
end_comment
begin_function
DECL|function|setUniformValue
name|void
name|QGLShaderProgram
operator|::
name|setUniformValue
parameter_list|(
name|int
name|location
parameter_list|,
specifier|const
name|QTransform
modifier|&
name|value
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGLShaderProgram
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|d
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|!=
operator|-
literal|1
condition|)
block|{
name|GLfloat
name|mat
index|[
literal|3
index|]
index|[
literal|3
index|]
init|=
block|{
block|{
name|GLfloat
argument_list|(
name|value
operator|.
name|m11
argument_list|()
argument_list|)
block|,
name|GLfloat
argument_list|(
name|value
operator|.
name|m12
argument_list|()
argument_list|)
block|,
name|GLfloat
argument_list|(
argument|value.m13()
argument_list|)
block|}
block|,
block|{
name|GLfloat
argument_list|(
name|value
operator|.
name|m21
argument_list|()
argument_list|)
block|,
name|GLfloat
argument_list|(
name|value
operator|.
name|m22
argument_list|()
argument_list|)
block|,
name|GLfloat
argument_list|(
argument|value.m23()
argument_list|)
block|}
block|,
block|{
name|GLfloat
argument_list|(
name|value
operator|.
name|m31
argument_list|()
argument_list|)
block|,
name|GLfloat
argument_list|(
name|value
operator|.
name|m32
argument_list|()
argument_list|)
block|,
name|GLfloat
argument_list|(
argument|value.m33()
argument_list|)
block|}
block|}
decl_stmt|;
name|glUniformMatrix3fv
argument_list|(
name|location
argument_list|,
literal|1
argument_list|,
name|GL_FALSE
argument_list|,
name|mat
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \overload      Sets the uniform variable called \a name in the current context to a     3x3 transformation matrix \a value that is specified as a QTransform value.      To set a QTransform value as a 4x4 matrix in a shader, use     \c{setUniformValue(name, QMatrix4x4(value))}. */
end_comment
begin_function
DECL|function|setUniformValue
name|void
name|QGLShaderProgram
operator|::
name|setUniformValue
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|QTransform
modifier|&
name|value
parameter_list|)
block|{
name|setUniformValue
argument_list|(
name|uniformLocation
argument_list|(
name|name
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the uniform variable array at \a location in the current     context to the \a count elements of \a values.      \sa setAttributeValue() */
end_comment
begin_function
DECL|function|setUniformValueArray
name|void
name|QGLShaderProgram
operator|::
name|setUniformValueArray
parameter_list|(
name|int
name|location
parameter_list|,
specifier|const
name|GLint
modifier|*
name|values
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGLShaderProgram
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|d
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|!=
operator|-
literal|1
condition|)
name|glUniform1iv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \overload      Sets the uniform variable array called \a name in the current     context to the \a count elements of \a values.      \sa setAttributeValue() */
end_comment
begin_function
DECL|function|setUniformValueArray
name|void
name|QGLShaderProgram
operator|::
name|setUniformValueArray
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|GLint
modifier|*
name|values
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|setUniformValueArray
argument_list|(
name|uniformLocation
argument_list|(
name|name
argument_list|)
argument_list|,
name|values
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the uniform variable array at \a location in the current     context to the \a count elements of \a values.  This overload     should be used when setting an array of sampler values.      \sa setAttributeValue() */
end_comment
begin_function
DECL|function|setUniformValueArray
name|void
name|QGLShaderProgram
operator|::
name|setUniformValueArray
parameter_list|(
name|int
name|location
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|values
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGLShaderProgram
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|d
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|!=
operator|-
literal|1
condition|)
name|glUniform1iv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|GLint
operator|*
argument_list|>
argument_list|(
name|values
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \overload      Sets the uniform variable array called \a name in the current     context to the \a count elements of \a values.  This overload     should be used when setting an array of sampler values.      \sa setAttributeValue() */
end_comment
begin_function
DECL|function|setUniformValueArray
name|void
name|QGLShaderProgram
operator|::
name|setUniformValueArray
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|values
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|setUniformValueArray
argument_list|(
name|uniformLocation
argument_list|(
name|name
argument_list|)
argument_list|,
name|values
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the uniform variable array at \a location in the current     context to the \a count elements of \a values.  Each element     has \a tupleSize components.  The \a tupleSize must be 1, 2, 3, or 4.      \sa setAttributeValue() */
end_comment
begin_function
DECL|function|setUniformValueArray
name|void
name|QGLShaderProgram
operator|::
name|setUniformValueArray
parameter_list|(
name|int
name|location
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|values
parameter_list|,
name|int
name|count
parameter_list|,
name|int
name|tupleSize
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGLShaderProgram
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|d
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|!=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|tupleSize
operator|==
literal|1
condition|)
name|glUniform1fv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|values
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|tupleSize
operator|==
literal|2
condition|)
name|glUniform2fv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|values
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|tupleSize
operator|==
literal|3
condition|)
name|glUniform3fv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|values
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|tupleSize
operator|==
literal|4
condition|)
name|glUniform4fv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|values
argument_list|)
expr_stmt|;
else|else
name|qWarning
argument_list|()
operator|<<
literal|"QGLShaderProgram::setUniformValue: size"
operator|<<
name|tupleSize
operator|<<
literal|"not supported"
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \overload      Sets the uniform variable array called \a name in the current     context to the \a count elements of \a values.  Each element     has \a tupleSize components.  The \a tupleSize must be 1, 2, 3, or 4.      \sa setAttributeValue() */
end_comment
begin_function
DECL|function|setUniformValueArray
name|void
name|QGLShaderProgram
operator|::
name|setUniformValueArray
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|values
parameter_list|,
name|int
name|count
parameter_list|,
name|int
name|tupleSize
parameter_list|)
block|{
name|setUniformValueArray
argument_list|(
name|uniformLocation
argument_list|(
name|name
argument_list|)
argument_list|,
name|values
argument_list|,
name|count
argument_list|,
name|tupleSize
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the uniform variable array at \a location in the current     context to the \a count 2D vector elements of \a values.      \sa setAttributeValue() */
end_comment
begin_function
DECL|function|setUniformValueArray
name|void
name|QGLShaderProgram
operator|::
name|setUniformValueArray
parameter_list|(
name|int
name|location
parameter_list|,
specifier|const
name|QVector2D
modifier|*
name|values
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGLShaderProgram
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|d
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|!=
operator|-
literal|1
condition|)
name|glUniform2fv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|GLfloat
operator|*
argument_list|>
argument_list|(
name|values
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \overload      Sets the uniform variable array called \a name in the current     context to the \a count 2D vector elements of \a values.      \sa setAttributeValue() */
end_comment
begin_function
DECL|function|setUniformValueArray
name|void
name|QGLShaderProgram
operator|::
name|setUniformValueArray
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|QVector2D
modifier|*
name|values
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|setUniformValueArray
argument_list|(
name|uniformLocation
argument_list|(
name|name
argument_list|)
argument_list|,
name|values
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the uniform variable array at \a location in the current     context to the \a count 3D vector elements of \a values.      \sa setAttributeValue() */
end_comment
begin_function
DECL|function|setUniformValueArray
name|void
name|QGLShaderProgram
operator|::
name|setUniformValueArray
parameter_list|(
name|int
name|location
parameter_list|,
specifier|const
name|QVector3D
modifier|*
name|values
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGLShaderProgram
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|d
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|!=
operator|-
literal|1
condition|)
name|glUniform3fv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|GLfloat
operator|*
argument_list|>
argument_list|(
name|values
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \overload      Sets the uniform variable array called \a name in the current     context to the \a count 3D vector elements of \a values.      \sa setAttributeValue() */
end_comment
begin_function
DECL|function|setUniformValueArray
name|void
name|QGLShaderProgram
operator|::
name|setUniformValueArray
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|QVector3D
modifier|*
name|values
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|setUniformValueArray
argument_list|(
name|uniformLocation
argument_list|(
name|name
argument_list|)
argument_list|,
name|values
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the uniform variable array at \a location in the current     context to the \a count 4D vector elements of \a values.      \sa setAttributeValue() */
end_comment
begin_function
DECL|function|setUniformValueArray
name|void
name|QGLShaderProgram
operator|::
name|setUniformValueArray
parameter_list|(
name|int
name|location
parameter_list|,
specifier|const
name|QVector4D
modifier|*
name|values
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGLShaderProgram
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|d
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|!=
operator|-
literal|1
condition|)
name|glUniform4fv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|GLfloat
operator|*
argument_list|>
argument_list|(
name|values
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \overload      Sets the uniform variable array called \a name in the current     context to the \a count 4D vector elements of \a values.      \sa setAttributeValue() */
end_comment
begin_function
DECL|function|setUniformValueArray
name|void
name|QGLShaderProgram
operator|::
name|setUniformValueArray
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|QVector4D
modifier|*
name|values
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|setUniformValueArray
argument_list|(
name|uniformLocation
argument_list|(
name|name
argument_list|)
argument_list|,
name|values
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// We have to repack matrix arrays from qreal to GLfloat.
end_comment
begin_define
DECL|macro|setUniformMatrixArray
define|#
directive|define
name|setUniformMatrixArray
parameter_list|(
name|func
parameter_list|,
name|location
parameter_list|,
name|values
parameter_list|,
name|count
parameter_list|,
name|type
parameter_list|,
name|cols
parameter_list|,
name|rows
parameter_list|)
define|\
value|if (location == -1 || count<= 0) \         return; \     if (sizeof(type) == sizeof(GLfloat) * cols * rows) { \         func(location, count, GL_FALSE, \              reinterpret_cast<const GLfloat *>(values[0].constData())); \     } else { \         QVarLengthArray<GLfloat> temp(cols * rows * count); \         for (int index = 0; index< count; ++index) { \             for (int index2 = 0; index2< (cols * rows); ++index2) { \                 temp.data()[cols * rows * index + index2] = \                     values[index].constData()[index2]; \             } \         } \         func(location, count, GL_FALSE, temp.constData()); \     }
end_define
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
end_if
begin_define
DECL|macro|setUniformGenericMatrixArray
define|#
directive|define
name|setUniformGenericMatrixArray
parameter_list|(
name|func
parameter_list|,
name|colfunc
parameter_list|,
name|location
parameter_list|,
name|values
parameter_list|,
name|count
parameter_list|,
name|type
parameter_list|,
name|cols
parameter_list|,
name|rows
parameter_list|)
define|\
value|if (location == -1 || count<= 0) \         return; \     if (sizeof(type) == sizeof(GLfloat) * cols * rows) { \         const GLfloat *data = reinterpret_cast<const GLfloat *> \             (values[0].constData());  \         if (func) \             func(location, count, GL_FALSE, data); \         else \             colfunc(location, count * cols, data); \     } else { \         QVarLengthArray<GLfloat> temp(cols * rows * count); \         for (int index = 0; index< count; ++index) { \             for (int index2 = 0; index2< (cols * rows); ++index2) { \                 temp.data()[cols * rows * index + index2] = \                     values[index].constData()[index2]; \             } \         } \         if (func) \             func(location, count, GL_FALSE, temp.constData()); \         else \             colfunc(location, count * cols, temp.constData()); \     }
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|setUniformGenericMatrixArray
define|#
directive|define
name|setUniformGenericMatrixArray
parameter_list|(
name|func
parameter_list|,
name|colfunc
parameter_list|,
name|location
parameter_list|,
name|values
parameter_list|,
name|count
parameter_list|,
name|type
parameter_list|,
name|cols
parameter_list|,
name|rows
parameter_list|)
define|\
value|if (location == -1 || count<= 0) \         return; \     if (sizeof(type) == sizeof(GLfloat) * cols * rows) { \         const GLfloat *data = reinterpret_cast<const GLfloat *> \             (values[0].constData());  \         colfunc(location, count * cols, data); \     } else { \         QVarLengthArray<GLfloat> temp(cols * rows * count); \         for (int index = 0; index< count; ++index) { \             for (int index2 = 0; index2< (cols * rows); ++index2) { \                 temp.data()[cols * rows * index + index2] = \                     values[index].constData()[index2]; \             } \         } \         colfunc(location, count * cols, temp.constData()); \     }
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*!     Sets the uniform variable array at \a location in the current     context to the \a count 2x2 matrix elements of \a values.      \sa setAttributeValue() */
end_comment
begin_function
DECL|function|setUniformValueArray
name|void
name|QGLShaderProgram
operator|::
name|setUniformValueArray
parameter_list|(
name|int
name|location
parameter_list|,
specifier|const
name|QMatrix2x2
modifier|*
name|values
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGLShaderProgram
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|setUniformMatrixArray
argument_list|(
name|glUniformMatrix2fv
argument_list|,
name|location
argument_list|,
name|values
argument_list|,
name|count
argument_list|,
name|QMatrix2x2
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \overload      Sets the uniform variable array called \a name in the current     context to the \a count 2x2 matrix elements of \a values.      \sa setAttributeValue() */
end_comment
begin_function
DECL|function|setUniformValueArray
name|void
name|QGLShaderProgram
operator|::
name|setUniformValueArray
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|QMatrix2x2
modifier|*
name|values
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|setUniformValueArray
argument_list|(
name|uniformLocation
argument_list|(
name|name
argument_list|)
argument_list|,
name|values
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the uniform variable array at \a location in the current     context to the \a count 2x3 matrix elements of \a values.      \sa setAttributeValue() */
end_comment
begin_function
DECL|function|setUniformValueArray
name|void
name|QGLShaderProgram
operator|::
name|setUniformValueArray
parameter_list|(
name|int
name|location
parameter_list|,
specifier|const
name|QMatrix2x3
modifier|*
name|values
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGLShaderProgram
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|setUniformGenericMatrixArray
argument_list|(
name|glUniformMatrix2x3fv
argument_list|,
name|glUniform3fv
argument_list|,
name|location
argument_list|,
name|values
argument_list|,
name|count
argument_list|,
name|QMatrix2x3
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \overload      Sets the uniform variable array called \a name in the current     context to the \a count 2x3 matrix elements of \a values.      \sa setAttributeValue() */
end_comment
begin_function
DECL|function|setUniformValueArray
name|void
name|QGLShaderProgram
operator|::
name|setUniformValueArray
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|QMatrix2x3
modifier|*
name|values
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|setUniformValueArray
argument_list|(
name|uniformLocation
argument_list|(
name|name
argument_list|)
argument_list|,
name|values
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the uniform variable array at \a location in the current     context to the \a count 2x4 matrix elements of \a values.      \sa setAttributeValue() */
end_comment
begin_function
DECL|function|setUniformValueArray
name|void
name|QGLShaderProgram
operator|::
name|setUniformValueArray
parameter_list|(
name|int
name|location
parameter_list|,
specifier|const
name|QMatrix2x4
modifier|*
name|values
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGLShaderProgram
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|setUniformGenericMatrixArray
argument_list|(
name|glUniformMatrix2x4fv
argument_list|,
name|glUniform4fv
argument_list|,
name|location
argument_list|,
name|values
argument_list|,
name|count
argument_list|,
name|QMatrix2x4
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \overload      Sets the uniform variable array called \a name in the current     context to the \a count 2x4 matrix elements of \a values.      \sa setAttributeValue() */
end_comment
begin_function
DECL|function|setUniformValueArray
name|void
name|QGLShaderProgram
operator|::
name|setUniformValueArray
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|QMatrix2x4
modifier|*
name|values
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|setUniformValueArray
argument_list|(
name|uniformLocation
argument_list|(
name|name
argument_list|)
argument_list|,
name|values
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the uniform variable array at \a location in the current     context to the \a count 3x2 matrix elements of \a values.      \sa setAttributeValue() */
end_comment
begin_function
DECL|function|setUniformValueArray
name|void
name|QGLShaderProgram
operator|::
name|setUniformValueArray
parameter_list|(
name|int
name|location
parameter_list|,
specifier|const
name|QMatrix3x2
modifier|*
name|values
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGLShaderProgram
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|setUniformGenericMatrixArray
argument_list|(
name|glUniformMatrix3x2fv
argument_list|,
name|glUniform2fv
argument_list|,
name|location
argument_list|,
name|values
argument_list|,
name|count
argument_list|,
name|QMatrix3x2
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \overload      Sets the uniform variable array called \a name in the current     context to the \a count 3x2 matrix elements of \a values.      \sa setAttributeValue() */
end_comment
begin_function
DECL|function|setUniformValueArray
name|void
name|QGLShaderProgram
operator|::
name|setUniformValueArray
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|QMatrix3x2
modifier|*
name|values
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|setUniformValueArray
argument_list|(
name|uniformLocation
argument_list|(
name|name
argument_list|)
argument_list|,
name|values
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the uniform variable array at \a location in the current     context to the \a count 3x3 matrix elements of \a values.      \sa setAttributeValue() */
end_comment
begin_function
DECL|function|setUniformValueArray
name|void
name|QGLShaderProgram
operator|::
name|setUniformValueArray
parameter_list|(
name|int
name|location
parameter_list|,
specifier|const
name|QMatrix3x3
modifier|*
name|values
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGLShaderProgram
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|setUniformMatrixArray
argument_list|(
name|glUniformMatrix3fv
argument_list|,
name|location
argument_list|,
name|values
argument_list|,
name|count
argument_list|,
name|QMatrix3x3
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \overload      Sets the uniform variable array called \a name in the current     context to the \a count 3x3 matrix elements of \a values.      \sa setAttributeValue() */
end_comment
begin_function
DECL|function|setUniformValueArray
name|void
name|QGLShaderProgram
operator|::
name|setUniformValueArray
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|QMatrix3x3
modifier|*
name|values
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|setUniformValueArray
argument_list|(
name|uniformLocation
argument_list|(
name|name
argument_list|)
argument_list|,
name|values
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the uniform variable array at \a location in the current     context to the \a count 3x4 matrix elements of \a values.      \sa setAttributeValue() */
end_comment
begin_function
DECL|function|setUniformValueArray
name|void
name|QGLShaderProgram
operator|::
name|setUniformValueArray
parameter_list|(
name|int
name|location
parameter_list|,
specifier|const
name|QMatrix3x4
modifier|*
name|values
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGLShaderProgram
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|setUniformGenericMatrixArray
argument_list|(
name|glUniformMatrix3x4fv
argument_list|,
name|glUniform4fv
argument_list|,
name|location
argument_list|,
name|values
argument_list|,
name|count
argument_list|,
name|QMatrix3x4
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \overload      Sets the uniform variable array called \a name in the current     context to the \a count 3x4 matrix elements of \a values.      \sa setAttributeValue() */
end_comment
begin_function
DECL|function|setUniformValueArray
name|void
name|QGLShaderProgram
operator|::
name|setUniformValueArray
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|QMatrix3x4
modifier|*
name|values
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|setUniformValueArray
argument_list|(
name|uniformLocation
argument_list|(
name|name
argument_list|)
argument_list|,
name|values
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the uniform variable array at \a location in the current     context to the \a count 4x2 matrix elements of \a values.      \sa setAttributeValue() */
end_comment
begin_function
DECL|function|setUniformValueArray
name|void
name|QGLShaderProgram
operator|::
name|setUniformValueArray
parameter_list|(
name|int
name|location
parameter_list|,
specifier|const
name|QMatrix4x2
modifier|*
name|values
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGLShaderProgram
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|setUniformGenericMatrixArray
argument_list|(
name|glUniformMatrix4x2fv
argument_list|,
name|glUniform2fv
argument_list|,
name|location
argument_list|,
name|values
argument_list|,
name|count
argument_list|,
name|QMatrix4x2
argument_list|,
literal|4
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \overload      Sets the uniform variable array called \a name in the current     context to the \a count 4x2 matrix elements of \a values.      \sa setAttributeValue() */
end_comment
begin_function
DECL|function|setUniformValueArray
name|void
name|QGLShaderProgram
operator|::
name|setUniformValueArray
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|QMatrix4x2
modifier|*
name|values
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|setUniformValueArray
argument_list|(
name|uniformLocation
argument_list|(
name|name
argument_list|)
argument_list|,
name|values
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the uniform variable array at \a location in the current     context to the \a count 4x3 matrix elements of \a values.      \sa setAttributeValue() */
end_comment
begin_function
DECL|function|setUniformValueArray
name|void
name|QGLShaderProgram
operator|::
name|setUniformValueArray
parameter_list|(
name|int
name|location
parameter_list|,
specifier|const
name|QMatrix4x3
modifier|*
name|values
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGLShaderProgram
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|setUniformGenericMatrixArray
argument_list|(
name|glUniformMatrix4x3fv
argument_list|,
name|glUniform3fv
argument_list|,
name|location
argument_list|,
name|values
argument_list|,
name|count
argument_list|,
name|QMatrix4x3
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \overload      Sets the uniform variable array called \a name in the current     context to the \a count 4x3 matrix elements of \a values.      \sa setAttributeValue() */
end_comment
begin_function
DECL|function|setUniformValueArray
name|void
name|QGLShaderProgram
operator|::
name|setUniformValueArray
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|QMatrix4x3
modifier|*
name|values
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|setUniformValueArray
argument_list|(
name|uniformLocation
argument_list|(
name|name
argument_list|)
argument_list|,
name|values
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the uniform variable array at \a location in the current     context to the \a count 4x4 matrix elements of \a values.      \sa setAttributeValue() */
end_comment
begin_function
DECL|function|setUniformValueArray
name|void
name|QGLShaderProgram
operator|::
name|setUniformValueArray
parameter_list|(
name|int
name|location
parameter_list|,
specifier|const
name|QMatrix4x4
modifier|*
name|values
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGLShaderProgram
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|setUniformMatrixArray
argument_list|(
name|glUniformMatrix4fv
argument_list|,
name|location
argument_list|,
name|values
argument_list|,
name|count
argument_list|,
name|QMatrix4x4
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \overload      Sets the uniform variable array called \a name in the current     context to the \a count 4x4 matrix elements of \a values.      \sa setAttributeValue() */
end_comment
begin_function
DECL|function|setUniformValueArray
name|void
name|QGLShaderProgram
operator|::
name|setUniformValueArray
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|QMatrix4x4
modifier|*
name|values
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|setUniformValueArray
argument_list|(
name|uniformLocation
argument_list|(
name|name
argument_list|)
argument_list|,
name|values
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
end_function
begin_undef
DECL|macro|ctx
undef|#
directive|undef
name|ctx
end_undef
begin_comment
comment|/*!     Returns the hardware limit for how many vertices a geometry shader     can output.      \since 4.7      \sa setGeometryOutputVertexCount() */
end_comment
begin_function
DECL|function|maxGeometryOutputVertices
name|int
name|QGLShaderProgram
operator|::
name|maxGeometryOutputVertices
parameter_list|()
specifier|const
block|{
name|GLint
name|n
init|=
literal|0
decl_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
name|glGetIntegerv
argument_list|(
name|GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT
argument_list|,
operator|&
name|n
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|n
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the maximum number of vertices the current geometry shader     program will produce, if active, to \a count.      \since 4.7      This parameter takes effect the next time the program is linked. */
end_comment
begin_function
DECL|function|setGeometryOutputVertexCount
name|void
name|QGLShaderProgram
operator|::
name|setGeometryOutputVertexCount
parameter_list|(
name|int
name|count
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_DEBUG
name|int
name|max
init|=
name|maxGeometryOutputVertices
argument_list|()
decl_stmt|;
if|if
condition|(
name|count
operator|>
name|max
condition|)
block|{
name|qWarning
argument_list|(
literal|"QGLShaderProgram::setGeometryOutputVertexCount: count: %d higher than maximum: %d"
argument_list|,
name|count
argument_list|,
name|max
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
name|d_func
argument_list|()
operator|->
name|geometryVertexCount
operator|=
name|count
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the maximum number of vertices the current geometry shader     program will produce, if active.      \since 4.7      This parameter takes effect the ntext time the program is linked. */
end_comment
begin_function
DECL|function|geometryOutputVertexCount
name|int
name|QGLShaderProgram
operator|::
name|geometryOutputVertexCount
parameter_list|()
specifier|const
block|{
return|return
name|d_func
argument_list|()
operator|->
name|geometryVertexCount
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the input type from \a inputType.      This parameter takes effect the next time the program is linked. */
end_comment
begin_function
DECL|function|setGeometryInputType
name|void
name|QGLShaderProgram
operator|::
name|setGeometryInputType
parameter_list|(
name|GLenum
name|inputType
parameter_list|)
block|{
name|d_func
argument_list|()
operator|->
name|geometryInputType
operator|=
name|inputType
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the geometry shader input type, if active.      This parameter takes effect the next time the program is linked.      \since 4.7  */
end_comment
begin_function
DECL|function|geometryInputType
name|GLenum
name|QGLShaderProgram
operator|::
name|geometryInputType
parameter_list|()
specifier|const
block|{
return|return
name|d_func
argument_list|()
operator|->
name|geometryInputType
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the output type from the geometry shader, if active, to     \a outputType.      This parameter takes effect the next time the program is linked.      \since 4.7 */
end_comment
begin_function
DECL|function|setGeometryOutputType
name|void
name|QGLShaderProgram
operator|::
name|setGeometryOutputType
parameter_list|(
name|GLenum
name|outputType
parameter_list|)
block|{
name|d_func
argument_list|()
operator|->
name|geometryOutputType
operator|=
name|outputType
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the geometry shader output type, if active.      This parameter takes effect the next time the program is linked.      \since 4.7  */
end_comment
begin_function
DECL|function|geometryOutputType
name|GLenum
name|QGLShaderProgram
operator|::
name|geometryOutputType
parameter_list|()
specifier|const
block|{
return|return
name|d_func
argument_list|()
operator|->
name|geometryOutputType
return|;
block|}
end_function
begin_comment
comment|/*!     Returns true if shader programs written in the OpenGL Shading     Language (GLSL) are supported on this system; false otherwise.      The \a context is used to resolve the GLSL extensions.     If \a context is null, then QGLContext::currentContext() is used. */
end_comment
begin_function
DECL|function|hasOpenGLShaderPrograms
name|bool
name|QGLShaderProgram
operator|::
name|hasOpenGLShaderPrograms
parameter_list|(
specifier|const
name|QGLContext
modifier|*
name|context
parameter_list|)
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
if|if
condition|(
operator|!
name|context
condition|)
name|context
operator|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|context
condition|)
return|return
literal|false
return|;
return|return
name|qt_resolve_glsl_extensions
argument_list|(
cast|const_cast
argument_list|<
name|QGLContext
operator|*
argument_list|>
argument_list|(
name|context
argument_list|)
argument_list|)
return|;
else|#
directive|else
name|Q_UNUSED
argument_list|(
name|context
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|shaderDestroyed
name|void
name|QGLShaderProgram
operator|::
name|shaderDestroyed
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QGLShaderProgram
argument_list|)
expr_stmt|;
name|QGLShader
modifier|*
name|shader
init|=
name|qobject_cast
argument_list|<
name|QGLShader
operator|*
argument_list|>
argument_list|(
name|sender
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|shader
operator|&&
operator|!
name|d
operator|->
name|removingShaders
condition|)
name|removeShader
argument_list|(
name|shader
argument_list|)
expr_stmt|;
block|}
end_function
begin_undef
DECL|macro|ctx
undef|#
directive|undef
name|ctx
end_undef
begin_undef
DECL|macro|context
undef|#
directive|undef
name|context
end_undef
begin_comment
comment|/*!     Returns true if shader programs of type \a type are supported on     this system; false otherwise.      The \a context is used to resolve the GLSL extensions.     If \a context is null, then QGLContext::currentContext() is used.      \since 4.7 */
end_comment
begin_function
DECL|function|hasOpenGLShaders
name|bool
name|QGLShader
operator|::
name|hasOpenGLShaders
parameter_list|(
name|ShaderType
name|type
parameter_list|,
specifier|const
name|QGLContext
modifier|*
name|context
parameter_list|)
block|{
if|if
condition|(
operator|!
name|context
condition|)
name|context
operator|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|context
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|(
name|type
operator|&
operator|~
operator|(
name|Geometry
operator||
name|Vertex
operator||
name|Fragment
operator|)
operator|)
operator|||
name|type
operator|==
literal|0
condition|)
return|return
literal|false
return|;
name|bool
name|resolved
init|=
name|qt_resolve_glsl_extensions
argument_list|(
cast|const_cast
argument_list|<
name|QGLContext
operator|*
argument_list|>
argument_list|(
name|context
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|resolved
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|(
name|type
operator|&
name|Geometry
operator|)
operator|&&
operator|!
name|QByteArray
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|)
name|glGetString
argument_list|(
name|GL_EXTENSIONS
argument_list|)
argument_list|)
operator|.
name|contains
argument_list|(
literal|"GL_EXT_geometry_shader4"
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
