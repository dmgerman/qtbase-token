begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtOpenGL module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"private/qpixmapfilter_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qpaintengineex_opengl2_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qglengineshadermanager_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qpixmapdata_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qimagepixmapcleanuphooks_p.h"
end_include
begin_include
include|#
directive|include
file|"qglpixmapfilter_p.h"
end_include
begin_include
include|#
directive|include
file|"qpaintengine_opengl_p.h"
end_include
begin_include
include|#
directive|include
file|"qcache.h"
end_include
begin_include
include|#
directive|include
file|"qglframebufferobject.h"
end_include
begin_include
include|#
directive|include
file|"qglshaderprogram.h"
end_include
begin_include
include|#
directive|include
file|"qgl_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qapplication_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qdrawhelper_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qmemrotate_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qmath_p.h"
end_include
begin_include
include|#
directive|include
file|"qmath.h"
end_include
begin_function_decl
name|QT_BEGIN_NAMESPACE
comment|// qpixmapfilter.cpp
name|Q_GUI_EXPORT
name|void
name|qt_blurImage
parameter_list|(
name|QImage
modifier|&
name|blurImage
parameter_list|,
name|qreal
name|radius
parameter_list|,
name|bool
name|quality
parameter_list|,
name|int
name|transposed
init|=
literal|0
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|Q_GUI_EXPORT
name|QImage
name|qt_halfScaled
parameter_list|(
specifier|const
name|QImage
modifier|&
name|source
parameter_list|)
function_decl|;
end_function_decl
begin_function
DECL|function|bindTexture
name|void
name|QGLPixmapFilterBase
operator|::
name|bindTexture
parameter_list|(
specifier|const
name|QPixmap
modifier|&
name|src
parameter_list|)
specifier|const
block|{
cast|const_cast
argument_list|<
name|QGLContext
operator|*
argument_list|>
argument_list|(
name|QGLContext
operator|::
name|currentContext
argument_list|()
argument_list|)
operator|->
name|d_func
argument_list|()
operator|->
name|bindTexture
argument_list|(
name|src
argument_list|,
name|GL_TEXTURE_2D
argument_list|,
name|GL_RGBA
argument_list|,
name|QGLContext
operator|::
name|BindOptions
argument_list|(
name|QGLContext
operator|::
name|DefaultBindOption
operator||
name|QGLContext
operator|::
name|MemoryManagedBindOption
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawImpl
name|void
name|QGLPixmapFilterBase
operator|::
name|drawImpl
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|pos
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|src
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|source
parameter_list|)
specifier|const
block|{
name|processGL
argument_list|(
name|painter
argument_list|,
name|pos
argument_list|,
name|src
argument_list|,
name|source
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|QGLPixmapColorizeFilter
class|class
name|QGLPixmapColorizeFilter
super|:
specifier|public
name|QGLCustomShaderStage
super|,
specifier|public
name|QGLPixmapFilter
argument_list|<
name|QPixmapColorizeFilter
argument_list|>
block|{
public|public:
name|QGLPixmapColorizeFilter
parameter_list|()
constructor_decl|;
name|void
name|setUniforms
parameter_list|(
name|QGLShaderProgram
modifier|*
name|program
parameter_list|)
function_decl|;
protected|protected:
name|bool
name|processGL
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|pos
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|pixmap
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|srcRect
parameter_list|)
specifier|const
function_decl|;
block|}
class|;
end_class
begin_class
DECL|class|QGLPixmapConvolutionFilter
class|class
name|QGLPixmapConvolutionFilter
super|:
specifier|public
name|QGLCustomShaderStage
super|,
specifier|public
name|QGLPixmapFilter
argument_list|<
name|QPixmapConvolutionFilter
argument_list|>
block|{
public|public:
name|QGLPixmapConvolutionFilter
parameter_list|()
constructor_decl|;
name|~
name|QGLPixmapConvolutionFilter
parameter_list|()
destructor_decl|;
name|void
name|setUniforms
parameter_list|(
name|QGLShaderProgram
modifier|*
name|program
parameter_list|)
function_decl|;
protected|protected:
name|bool
name|processGL
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|pos
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|src
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|srcRect
parameter_list|)
specifier|const
function_decl|;
private|private:
name|QByteArray
name|generateConvolutionShader
parameter_list|()
specifier|const
function_decl|;
DECL|member|m_srcSize
specifier|mutable
name|QSize
name|m_srcSize
decl_stmt|;
DECL|member|m_prevKernelSize
specifier|mutable
name|int
name|m_prevKernelSize
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|QGLPixmapBlurFilter
class|class
name|QGLPixmapBlurFilter
super|:
specifier|public
name|QGLCustomShaderStage
super|,
specifier|public
name|QGLPixmapFilter
argument_list|<
name|QPixmapBlurFilter
argument_list|>
block|{
public|public:
name|QGLPixmapBlurFilter
parameter_list|()
constructor_decl|;
protected|protected:
name|bool
name|processGL
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|pos
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|src
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|srcRect
parameter_list|)
specifier|const
function_decl|;
block|}
class|;
end_class
begin_class
DECL|class|QGLPixmapDropShadowFilter
class|class
name|QGLPixmapDropShadowFilter
super|:
specifier|public
name|QGLCustomShaderStage
super|,
specifier|public
name|QGLPixmapFilter
argument_list|<
name|QPixmapDropShadowFilter
argument_list|>
block|{
public|public:
name|QGLPixmapDropShadowFilter
parameter_list|()
constructor_decl|;
name|void
name|setUniforms
parameter_list|(
name|QGLShaderProgram
modifier|*
name|program
parameter_list|)
function_decl|;
protected|protected:
name|bool
name|processGL
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|pos
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|src
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|srcRect
parameter_list|)
specifier|const
function_decl|;
block|}
class|;
end_class
begin_function_decl
specifier|extern
specifier|const
name|QGLContext
modifier|*
name|qt_gl_share_context
parameter_list|()
function_decl|;
end_function_decl
begin_function
DECL|function|pixmapFilter
name|QPixmapFilter
modifier|*
name|QGL2PaintEngineEx
operator|::
name|pixmapFilter
parameter_list|(
name|int
name|type
parameter_list|,
specifier|const
name|QPixmapFilter
modifier|*
name|prototype
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGL2PaintEngineEx
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|QPixmapFilter
operator|::
name|ColorizeFilter
case|:
if|if
condition|(
operator|!
name|d
operator|->
name|colorizeFilter
condition|)
name|d
operator|->
name|colorizeFilter
operator|.
name|reset
argument_list|(
operator|new
name|QGLPixmapColorizeFilter
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|colorizeFilter
operator|.
name|data
argument_list|()
return|;
case|case
name|QPixmapFilter
operator|::
name|BlurFilter
case|:
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|blurFilter
condition|)
name|d
operator|->
name|blurFilter
operator|.
name|reset
argument_list|(
operator|new
name|QGLPixmapBlurFilter
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|blurFilter
operator|.
name|data
argument_list|()
return|;
block|}
case|case
name|QPixmapFilter
operator|::
name|DropShadowFilter
case|:
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|dropShadowFilter
condition|)
name|d
operator|->
name|dropShadowFilter
operator|.
name|reset
argument_list|(
operator|new
name|QGLPixmapDropShadowFilter
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|dropShadowFilter
operator|.
name|data
argument_list|()
return|;
block|}
case|case
name|QPixmapFilter
operator|::
name|ConvolutionFilter
case|:
if|if
condition|(
operator|!
name|d
operator|->
name|convolutionFilter
condition|)
name|d
operator|->
name|convolutionFilter
operator|.
name|reset
argument_list|(
operator|new
name|QGLPixmapConvolutionFilter
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|convolutionFilter
operator|.
name|data
argument_list|()
return|;
default|default:
break|break;
block|}
return|return
name|QPaintEngineEx
operator|::
name|pixmapFilter
argument_list|(
name|type
argument_list|,
name|prototype
argument_list|)
return|;
block|}
end_function
begin_decl_stmt
DECL|variable|qt_gl_colorize_filter
specifier|static
specifier|const
name|char
modifier|*
name|qt_gl_colorize_filter
init|=
literal|"uniform lowp vec4 colorizeColor;"
literal|"uniform lowp float colorizeStrength;"
literal|"lowp vec4 customShader(lowp sampler2D src, highp vec2 srcCoords)"
literal|"{"
literal|"        lowp vec4 srcPixel = texture2D(src, srcCoords);"
literal|"        lowp float gray = dot(srcPixel.rgb, vec3(0.212671, 0.715160, 0.072169));"
literal|"        lowp vec3 colorized = 1.0-((1.0-gray)*(1.0-colorizeColor.rgb));"
literal|"        return vec4(mix(srcPixel.rgb, colorized * srcPixel.a, colorizeStrength), srcPixel.a);"
literal|"}"
decl_stmt|;
end_decl_stmt
begin_constructor
DECL|function|QGLPixmapColorizeFilter
name|QGLPixmapColorizeFilter
operator|::
name|QGLPixmapColorizeFilter
parameter_list|()
block|{
name|setSource
argument_list|(
name|qt_gl_colorize_filter
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|processGL
name|bool
name|QGLPixmapColorizeFilter
operator|::
name|processGL
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|pos
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|src
parameter_list|,
specifier|const
name|QRectF
modifier|&
parameter_list|)
specifier|const
block|{
name|QGLPixmapColorizeFilter
modifier|*
name|filter
init|=
cast|const_cast
argument_list|<
name|QGLPixmapColorizeFilter
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|filter
operator|->
name|setOnPainter
argument_list|(
name|painter
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawPixmap
argument_list|(
name|pos
argument_list|,
name|src
argument_list|)
expr_stmt|;
name|filter
operator|->
name|removeFromPainter
argument_list|(
name|painter
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|setUniforms
name|void
name|QGLPixmapColorizeFilter
operator|::
name|setUniforms
parameter_list|(
name|QGLShaderProgram
modifier|*
name|program
parameter_list|)
block|{
name|program
operator|->
name|setUniformValue
argument_list|(
literal|"colorizeColor"
argument_list|,
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|program
operator|->
name|setUniformValue
argument_list|(
literal|"colorizeStrength"
argument_list|,
name|float
argument_list|(
name|strength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setUniforms
name|void
name|QGLPixmapConvolutionFilter
operator|::
name|setUniforms
parameter_list|(
name|QGLShaderProgram
modifier|*
name|program
parameter_list|)
block|{
specifier|const
name|qreal
modifier|*
name|kernel
init|=
name|convolutionKernel
argument_list|()
decl_stmt|;
name|int
name|kernelWidth
init|=
name|columns
argument_list|()
decl_stmt|;
name|int
name|kernelHeight
init|=
name|rows
argument_list|()
decl_stmt|;
name|int
name|kernelSize
init|=
name|kernelWidth
operator|*
name|kernelHeight
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|GLfloat
argument_list|>
name|matrix
argument_list|(
name|kernelSize
argument_list|)
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|GLfloat
argument_list|>
name|offset
argument_list|(
name|kernelSize
operator|*
literal|2
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|kernelSize
condition|;
operator|++
name|i
control|)
name|matrix
index|[
name|i
index|]
operator|=
name|kernel
index|[
name|i
index|]
expr_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|kernelHeight
condition|;
operator|++
name|y
control|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|kernelWidth
condition|;
operator|++
name|x
control|)
block|{
name|offset
index|[
operator|(
name|y
operator|*
name|kernelWidth
operator|+
name|x
operator|)
operator|*
literal|2
index|]
operator|=
name|x
operator|-
operator|(
name|kernelWidth
operator|/
literal|2
operator|)
expr_stmt|;
name|offset
index|[
operator|(
name|y
operator|*
name|kernelWidth
operator|+
name|x
operator|)
operator|*
literal|2
operator|+
literal|1
index|]
operator|=
operator|(
name|kernelHeight
operator|/
literal|2
operator|)
operator|-
name|y
expr_stmt|;
block|}
block|}
specifier|const
name|qreal
name|iw
init|=
literal|1.0
operator|/
name|m_srcSize
operator|.
name|width
argument_list|()
decl_stmt|;
specifier|const
name|qreal
name|ih
init|=
literal|1.0
operator|/
name|m_srcSize
operator|.
name|height
argument_list|()
decl_stmt|;
name|program
operator|->
name|setUniformValue
argument_list|(
literal|"inv_texture_size"
argument_list|,
name|iw
argument_list|,
name|ih
argument_list|)
expr_stmt|;
name|program
operator|->
name|setUniformValueArray
argument_list|(
literal|"matrix"
argument_list|,
name|matrix
operator|.
name|constData
argument_list|()
argument_list|,
name|kernelSize
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|program
operator|->
name|setUniformValueArray
argument_list|(
literal|"offset"
argument_list|,
name|offset
operator|.
name|constData
argument_list|()
argument_list|,
name|kernelSize
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// generates convolution filter code for arbitrary sized kernel
end_comment
begin_function
DECL|function|generateConvolutionShader
name|QByteArray
name|QGLPixmapConvolutionFilter
operator|::
name|generateConvolutionShader
parameter_list|()
specifier|const
block|{
name|QByteArray
name|code
decl_stmt|;
name|int
name|kernelWidth
init|=
name|columns
argument_list|()
decl_stmt|;
name|int
name|kernelHeight
init|=
name|rows
argument_list|()
decl_stmt|;
name|int
name|kernelSize
init|=
name|kernelWidth
operator|*
name|kernelHeight
decl_stmt|;
name|code
operator|.
name|append
argument_list|(
literal|"uniform highp vec2 inv_texture_size;\n"
literal|"uniform mediump float matrix["
argument_list|)
expr_stmt|;
name|code
operator|.
name|append
argument_list|(
name|QByteArray
operator|::
name|number
argument_list|(
name|kernelSize
argument_list|)
argument_list|)
expr_stmt|;
name|code
operator|.
name|append
argument_list|(
literal|"];\n"
literal|"uniform highp vec2 offset["
argument_list|)
expr_stmt|;
name|code
operator|.
name|append
argument_list|(
name|QByteArray
operator|::
name|number
argument_list|(
name|kernelSize
argument_list|)
argument_list|)
expr_stmt|;
name|code
operator|.
name|append
argument_list|(
literal|"];\n"
argument_list|)
expr_stmt|;
name|code
operator|.
name|append
argument_list|(
literal|"lowp vec4 customShader(lowp sampler2D src, highp vec2 srcCoords) {\n"
argument_list|)
expr_stmt|;
name|code
operator|.
name|append
argument_list|(
literal|"  int i = 0;\n"
literal|"  lowp vec4 sum = vec4(0.0);\n"
literal|"  for (i = 0; i< "
argument_list|)
expr_stmt|;
name|code
operator|.
name|append
argument_list|(
name|QByteArray
operator|::
name|number
argument_list|(
name|kernelSize
argument_list|)
argument_list|)
expr_stmt|;
name|code
operator|.
name|append
argument_list|(
literal|"; i++) {\n"
literal|"    sum += matrix[i] * texture2D(src,srcCoords+inv_texture_size*offset[i]);\n"
literal|"  }\n"
literal|"  return sum;\n"
literal|"}"
argument_list|)
expr_stmt|;
return|return
name|code
return|;
block|}
end_function
begin_constructor
DECL|function|QGLPixmapConvolutionFilter
name|QGLPixmapConvolutionFilter
operator|::
name|QGLPixmapConvolutionFilter
parameter_list|()
member_init_list|:
name|m_prevKernelSize
argument_list|(
operator|-
literal|1
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QGLPixmapConvolutionFilter
name|QGLPixmapConvolutionFilter
operator|::
name|~
name|QGLPixmapConvolutionFilter
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|processGL
name|bool
name|QGLPixmapConvolutionFilter
operator|::
name|processGL
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|pos
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|src
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|srcRect
parameter_list|)
specifier|const
block|{
name|QGLPixmapConvolutionFilter
modifier|*
name|filter
init|=
cast|const_cast
argument_list|<
name|QGLPixmapConvolutionFilter
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|m_srcSize
operator|=
name|src
operator|.
name|size
argument_list|()
expr_stmt|;
name|int
name|kernelSize
init|=
name|rows
argument_list|()
operator|*
name|columns
argument_list|()
decl_stmt|;
if|if
condition|(
name|m_prevKernelSize
operator|==
operator|-
literal|1
operator|||
name|m_prevKernelSize
operator|!=
name|kernelSize
condition|)
block|{
name|filter
operator|->
name|setSource
argument_list|(
name|generateConvolutionShader
argument_list|()
argument_list|)
expr_stmt|;
name|m_prevKernelSize
operator|=
name|kernelSize
expr_stmt|;
block|}
name|filter
operator|->
name|setOnPainter
argument_list|(
name|painter
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawPixmap
argument_list|(
name|pos
argument_list|,
name|src
argument_list|,
name|srcRect
argument_list|)
expr_stmt|;
name|filter
operator|->
name|removeFromPainter
argument_list|(
name|painter
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_constructor
DECL|function|QGLPixmapBlurFilter
name|QGLPixmapBlurFilter
operator|::
name|QGLPixmapBlurFilter
parameter_list|()
block|{ }
end_constructor
begin_class
DECL|class|QGLBlurTextureInfo
class|class
name|QGLBlurTextureInfo
block|{
public|public:
DECL|function|QGLBlurTextureInfo
name|QGLBlurTextureInfo
parameter_list|(
specifier|const
name|QImage
modifier|&
name|image
parameter_list|,
name|GLuint
name|tex
parameter_list|,
name|qreal
name|r
parameter_list|)
member_init_list|:
name|m_texture
argument_list|(
name|tex
argument_list|)
member_init_list|,
name|m_radius
argument_list|(
name|r
argument_list|)
block|{
name|m_paddedImage
operator|<<
name|image
expr_stmt|;
block|}
DECL|function|~QGLBlurTextureInfo
name|~
name|QGLBlurTextureInfo
parameter_list|()
block|{
name|glDeleteTextures
argument_list|(
literal|1
argument_list|,
operator|&
name|m_texture
argument_list|)
expr_stmt|;
block|}
name|QImage
name|paddedImage
parameter_list|(
name|int
name|scaleLevel
init|=
literal|0
parameter_list|)
specifier|const
function_decl|;
DECL|function|texture
name|GLuint
name|texture
parameter_list|()
specifier|const
block|{
return|return
name|m_texture
return|;
block|}
DECL|function|radius
name|qreal
name|radius
parameter_list|()
specifier|const
block|{
return|return
name|m_radius
return|;
block|}
private|private:
DECL|member|m_paddedImage
specifier|mutable
name|QList
argument_list|<
name|QImage
argument_list|>
name|m_paddedImage
decl_stmt|;
DECL|member|m_texture
name|GLuint
name|m_texture
decl_stmt|;
DECL|member|m_radius
name|qreal
name|m_radius
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|paddedImage
name|QImage
name|QGLBlurTextureInfo
operator|::
name|paddedImage
parameter_list|(
name|int
name|scaleLevel
parameter_list|)
specifier|const
block|{
for|for
control|(
name|int
name|i
init|=
name|m_paddedImage
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|<=
name|scaleLevel
condition|;
operator|++
name|i
control|)
name|m_paddedImage
operator|<<
name|qt_halfScaled
argument_list|(
name|m_paddedImage
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|m_paddedImage
operator|.
name|at
argument_list|(
name|scaleLevel
argument_list|)
return|;
block|}
end_function
begin_class
DECL|class|QGLBlurTextureCache
class|class
name|QGLBlurTextureCache
super|:
specifier|public
name|QObject
block|{
public|public:
specifier|static
name|QGLBlurTextureCache
modifier|*
name|cacheForContext
parameter_list|(
specifier|const
name|QGLContext
modifier|*
name|context
parameter_list|)
function_decl|;
name|QGLBlurTextureCache
parameter_list|(
specifier|const
name|QGLContext
modifier|*
parameter_list|)
constructor_decl|;
name|~
name|QGLBlurTextureCache
parameter_list|()
destructor_decl|;
name|QGLBlurTextureInfo
modifier|*
name|takeBlurTextureInfo
parameter_list|(
specifier|const
name|QPixmap
modifier|&
name|pixmap
parameter_list|)
function_decl|;
name|bool
name|hasBlurTextureInfo
parameter_list|(
name|quint64
name|cacheKey
parameter_list|)
specifier|const
function_decl|;
name|void
name|insertBlurTextureInfo
parameter_list|(
specifier|const
name|QPixmap
modifier|&
name|pixmap
parameter_list|,
name|QGLBlurTextureInfo
modifier|*
name|info
parameter_list|)
function_decl|;
name|void
name|clearBlurTextureInfo
parameter_list|(
name|quint64
name|cacheKey
parameter_list|)
function_decl|;
name|void
name|timerEvent
parameter_list|(
name|QTimerEvent
modifier|*
name|event
parameter_list|)
function_decl|;
private|private:
specifier|static
name|void
name|pixmapDestroyed
parameter_list|(
name|QPixmapData
modifier|*
name|pixmap
parameter_list|)
function_decl|;
DECL|member|cache
name|QCache
argument_list|<
name|quint64
argument_list|,
name|QGLBlurTextureInfo
argument_list|>
name|cache
decl_stmt|;
DECL|member|blurTextureCaches
specifier|static
name|QList
argument_list|<
name|QGLBlurTextureCache
modifier|*
argument_list|>
name|blurTextureCaches
decl_stmt|;
DECL|member|timerId
name|int
name|timerId
decl_stmt|;
block|}
class|;
end_class
begin_decl_stmt
DECL|member|blurTextureCaches
name|QList
argument_list|<
name|QGLBlurTextureCache
modifier|*
argument_list|>
name|QGLBlurTextureCache
operator|::
name|blurTextureCaches
decl_stmt|;
end_decl_stmt
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|QGLContextGroupResource<QGLBlurTextureCache>
argument_list|,
argument|qt_blur_texture_caches
argument_list|)
end_macro
begin_constructor
DECL|function|QGLBlurTextureCache
name|QGLBlurTextureCache
operator|::
name|QGLBlurTextureCache
parameter_list|(
specifier|const
name|QGLContext
modifier|*
parameter_list|)
member_init_list|:
name|timerId
argument_list|(
literal|0
argument_list|)
block|{
name|cache
operator|.
name|setMaxCost
argument_list|(
literal|4
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|blurTextureCaches
operator|.
name|append
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QGLBlurTextureCache
name|QGLBlurTextureCache
operator|::
name|~
name|QGLBlurTextureCache
parameter_list|()
block|{
name|blurTextureCaches
operator|.
name|removeAt
argument_list|(
name|blurTextureCaches
operator|.
name|indexOf
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|timerEvent
name|void
name|QGLBlurTextureCache
operator|::
name|timerEvent
parameter_list|(
name|QTimerEvent
modifier|*
parameter_list|)
block|{
name|killTimer
argument_list|(
name|timerId
argument_list|)
expr_stmt|;
name|timerId
operator|=
literal|0
expr_stmt|;
name|cache
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cacheForContext
name|QGLBlurTextureCache
modifier|*
name|QGLBlurTextureCache
operator|::
name|cacheForContext
parameter_list|(
specifier|const
name|QGLContext
modifier|*
name|context
parameter_list|)
block|{
return|return
name|qt_blur_texture_caches
argument_list|()
operator|->
name|value
argument_list|(
name|context
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|takeBlurTextureInfo
name|QGLBlurTextureInfo
modifier|*
name|QGLBlurTextureCache
operator|::
name|takeBlurTextureInfo
parameter_list|(
specifier|const
name|QPixmap
modifier|&
name|pixmap
parameter_list|)
block|{
return|return
name|cache
operator|.
name|take
argument_list|(
name|pixmap
operator|.
name|cacheKey
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|clearBlurTextureInfo
name|void
name|QGLBlurTextureCache
operator|::
name|clearBlurTextureInfo
parameter_list|(
name|quint64
name|cacheKey
parameter_list|)
block|{
name|cache
operator|.
name|remove
argument_list|(
name|cacheKey
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|hasBlurTextureInfo
name|bool
name|QGLBlurTextureCache
operator|::
name|hasBlurTextureInfo
parameter_list|(
name|quint64
name|cacheKey
parameter_list|)
specifier|const
block|{
return|return
name|cache
operator|.
name|contains
argument_list|(
name|cacheKey
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|insertBlurTextureInfo
name|void
name|QGLBlurTextureCache
operator|::
name|insertBlurTextureInfo
parameter_list|(
specifier|const
name|QPixmap
modifier|&
name|pixmap
parameter_list|,
name|QGLBlurTextureInfo
modifier|*
name|info
parameter_list|)
block|{
specifier|static
name|bool
name|hookAdded
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|hookAdded
condition|)
block|{
name|QImagePixmapCleanupHooks
operator|::
name|instance
argument_list|()
operator|->
name|addPixmapDataDestructionHook
argument_list|(
name|pixmapDestroyed
argument_list|)
expr_stmt|;
name|QImagePixmapCleanupHooks
operator|::
name|instance
argument_list|()
operator|->
name|addPixmapDataModificationHook
argument_list|(
name|pixmapDestroyed
argument_list|)
expr_stmt|;
name|hookAdded
operator|=
literal|true
expr_stmt|;
block|}
name|QImagePixmapCleanupHooks
operator|::
name|enableCleanupHooks
argument_list|(
name|pixmap
argument_list|)
expr_stmt|;
name|cache
operator|.
name|insert
argument_list|(
name|pixmap
operator|.
name|cacheKey
argument_list|()
argument_list|,
name|info
argument_list|,
name|pixmap
operator|.
name|width
argument_list|()
operator|*
name|pixmap
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|timerId
condition|)
name|killTimer
argument_list|(
name|timerId
argument_list|)
expr_stmt|;
name|timerId
operator|=
name|startTimer
argument_list|(
literal|8000
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|pixmapDestroyed
name|void
name|QGLBlurTextureCache
operator|::
name|pixmapDestroyed
parameter_list|(
name|QPixmapData
modifier|*
name|pmd
parameter_list|)
block|{
foreach|foreach
control|(
name|QGLBlurTextureCache
modifier|*
name|cache
decl|,
name|blurTextureCaches
control|)
block|{
if|if
condition|(
name|cache
operator|->
name|hasBlurTextureInfo
argument_list|(
name|pmd
operator|->
name|cacheKey
argument_list|()
argument_list|)
condition|)
name|cache
operator|->
name|clearBlurTextureInfo
argument_list|(
name|pmd
operator|->
name|cacheKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_decl_stmt
DECL|variable|qAnimatedBlurLevelIncrement
specifier|static
specifier|const
name|int
name|qAnimatedBlurLevelIncrement
init|=
literal|16
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qMaxBlurHalfScaleLevel
specifier|static
specifier|const
name|int
name|qMaxBlurHalfScaleLevel
init|=
literal|1
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|generateBlurTexture
specifier|static
name|GLuint
name|generateBlurTexture
parameter_list|(
specifier|const
name|QSize
modifier|&
name|size
parameter_list|,
name|GLenum
name|format
init|=
name|GL_RGBA
parameter_list|)
block|{
name|GLuint
name|texture
decl_stmt|;
name|glGenTextures
argument_list|(
literal|1
argument_list|,
operator|&
name|texture
argument_list|)
expr_stmt|;
name|glBindTexture
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
name|texture
argument_list|)
expr_stmt|;
name|glTexImage2D
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
literal|0
argument_list|,
name|format
argument_list|,
name|size
operator|.
name|width
argument_list|()
argument_list|,
name|size
operator|.
name|height
argument_list|()
argument_list|,
literal|0
argument_list|,
name|format
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|texture
return|;
block|}
end_function
begin_function
DECL|function|nextMultiple
specifier|static
specifier|inline
name|uint
name|nextMultiple
parameter_list|(
name|uint
name|x
parameter_list|,
name|uint
name|multiplier
parameter_list|)
block|{
name|uint
name|mod
init|=
name|x
operator|%
name|multiplier
decl_stmt|;
if|if
condition|(
name|mod
operator|==
literal|0
condition|)
return|return
name|x
return|;
return|return
name|x
operator|+
name|multiplier
operator|-
name|mod
return|;
block|}
end_function
begin_function_decl
name|Q_GUI_EXPORT
name|void
name|qt_memrotate90_gl
parameter_list|(
specifier|const
name|quint32
modifier|*
name|src
parameter_list|,
name|int
name|srcWidth
parameter_list|,
name|int
name|srcHeight
parameter_list|,
name|int
name|srcStride
parameter_list|,
name|quint32
modifier|*
name|dest
parameter_list|,
name|int
name|dstStride
parameter_list|)
function_decl|;
end_function_decl
begin_function
DECL|function|processGL
name|bool
name|QGLPixmapBlurFilter
operator|::
name|processGL
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|pos
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|src
parameter_list|,
specifier|const
name|QRectF
modifier|&
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|radius
argument_list|()
operator|<
literal|1
condition|)
block|{
name|painter
operator|->
name|drawPixmap
argument_list|(
name|pos
argument_list|,
name|src
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|qreal
name|actualRadius
init|=
name|radius
argument_list|()
decl_stmt|;
name|QGLContext
modifier|*
name|ctx
init|=
cast|const_cast
argument_list|<
name|QGLContext
operator|*
argument_list|>
argument_list|(
name|QGLContext
operator|::
name|currentContext
argument_list|()
argument_list|)
decl_stmt|;
name|QGLBlurTextureCache
modifier|*
name|blurTextureCache
init|=
name|QGLBlurTextureCache
operator|::
name|cacheForContext
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
name|QGLBlurTextureInfo
modifier|*
name|info
init|=
literal|0
decl_stmt|;
name|int
name|padding
init|=
name|nextMultiple
argument_list|(
name|qCeil
argument_list|(
name|actualRadius
argument_list|)
argument_list|,
name|qAnimatedBlurLevelIncrement
argument_list|)
decl_stmt|;
name|QRect
name|targetRect
init|=
name|src
operator|.
name|rect
argument_list|()
operator|.
name|adjusted
argument_list|(
operator|-
name|padding
argument_list|,
operator|-
name|padding
argument_list|,
name|padding
argument_list|,
name|padding
argument_list|)
decl_stmt|;
comment|// pad so that we'll be able to half-scale qMaxBlurHalfScaleLevel times
name|targetRect
operator|.
name|setWidth
argument_list|(
operator|(
name|targetRect
operator|.
name|width
argument_list|()
operator|+
operator|(
name|qMaxBlurHalfScaleLevel
operator|-
literal|1
operator|)
operator|)
operator|&
operator|~
operator|(
name|qMaxBlurHalfScaleLevel
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
name|targetRect
operator|.
name|setHeight
argument_list|(
operator|(
name|targetRect
operator|.
name|height
argument_list|()
operator|+
operator|(
name|qMaxBlurHalfScaleLevel
operator|-
literal|1
operator|)
operator|)
operator|&
operator|~
operator|(
name|qMaxBlurHalfScaleLevel
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
name|QSize
name|textureSize
decl_stmt|;
name|info
operator|=
name|blurTextureCache
operator|->
name|takeBlurTextureInfo
argument_list|(
name|src
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|info
operator|||
name|info
operator|->
name|radius
argument_list|()
operator|<
name|actualRadius
condition|)
block|{
name|QSize
name|paddedSize
init|=
name|targetRect
operator|.
name|size
argument_list|()
operator|/
literal|2
decl_stmt|;
name|QImage
name|padded
argument_list|(
name|paddedSize
operator|.
name|height
argument_list|()
argument_list|,
name|paddedSize
operator|.
name|width
argument_list|()
argument_list|,
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
decl_stmt|;
name|padded
operator|.
name|fill
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|info
condition|)
block|{
name|int
name|oldPadding
init|=
name|qRound
argument_list|(
name|info
operator|->
name|radius
argument_list|()
argument_list|)
decl_stmt|;
name|QPainter
name|p
argument_list|(
operator|&
name|padded
argument_list|)
decl_stmt|;
name|p
operator|.
name|setCompositionMode
argument_list|(
name|QPainter
operator|::
name|CompositionMode_Source
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawImage
argument_list|(
operator|(
name|padding
operator|-
name|oldPadding
operator|)
operator|/
literal|2
argument_list|,
operator|(
name|padding
operator|-
name|oldPadding
operator|)
operator|/
literal|2
argument_list|,
name|info
operator|->
name|paddedImage
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// TODO: combine byteswapping and memrotating into one by declaring
comment|// custom GL_RGBA pixel type and qt_colorConvert template for it
name|QImage
name|prepadded
init|=
name|qt_halfScaled
argument_list|(
name|src
operator|.
name|toImage
argument_list|()
argument_list|)
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
decl_stmt|;
comment|// byte-swap and memrotates in one go
name|qt_memrotate90_gl
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|quint32
operator|*
argument_list|>
argument_list|(
name|prepadded
operator|.
name|bits
argument_list|()
argument_list|)
argument_list|,
name|prepadded
operator|.
name|width
argument_list|()
argument_list|,
name|prepadded
operator|.
name|height
argument_list|()
argument_list|,
name|prepadded
operator|.
name|bytesPerLine
argument_list|()
argument_list|,
cast|reinterpret_cast
argument_list|<
name|quint32
operator|*
argument_list|>
argument_list|(
name|padded
operator|.
name|scanLine
argument_list|(
name|padding
operator|/
literal|2
argument_list|)
argument_list|)
operator|+
name|padding
operator|/
literal|2
argument_list|,
name|padded
operator|.
name|bytesPerLine
argument_list|()
argument_list|)
expr_stmt|;
block|}
operator|delete
name|info
expr_stmt|;
name|info
operator|=
operator|new
name|QGLBlurTextureInfo
argument_list|(
name|padded
argument_list|,
name|generateBlurTexture
argument_list|(
name|paddedSize
argument_list|)
argument_list|,
name|padding
argument_list|)
expr_stmt|;
name|textureSize
operator|=
name|paddedSize
expr_stmt|;
block|}
else|else
block|{
name|textureSize
operator|=
name|QSize
argument_list|(
name|info
operator|->
name|paddedImage
argument_list|()
operator|.
name|height
argument_list|()
argument_list|,
name|info
operator|->
name|paddedImage
argument_list|()
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|actualRadius
operator|*=
name|qreal
argument_list|(
literal|0.5
argument_list|)
expr_stmt|;
name|int
name|level
init|=
literal|1
decl_stmt|;
for|for
control|(
init|;
name|level
operator|<
name|qMaxBlurHalfScaleLevel
condition|;
operator|++
name|level
control|)
block|{
if|if
condition|(
name|actualRadius
operator|<=
literal|16
condition|)
break|break;
name|actualRadius
operator|*=
name|qreal
argument_list|(
literal|0.5
argument_list|)
expr_stmt|;
block|}
specifier|const
name|int
name|s
init|=
operator|(
literal|1
operator|<<
name|level
operator|)
decl_stmt|;
name|int
name|prepadding
init|=
name|qRound
argument_list|(
name|info
operator|->
name|radius
argument_list|()
argument_list|)
decl_stmt|;
name|padding
operator|=
name|qMin
argument_list|(
name|prepadding
argument_list|,
name|qCeil
argument_list|(
name|actualRadius
argument_list|)
operator|<<
name|level
argument_list|)
expr_stmt|;
name|targetRect
operator|=
name|src
operator|.
name|rect
argument_list|()
operator|.
name|adjusted
argument_list|(
operator|-
name|padding
argument_list|,
operator|-
name|padding
argument_list|,
name|padding
argument_list|,
name|padding
argument_list|)
expr_stmt|;
name|targetRect
operator|.
name|setWidth
argument_list|(
name|targetRect
operator|.
name|width
argument_list|()
operator|&
operator|~
operator|(
name|s
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
name|targetRect
operator|.
name|setHeight
argument_list|(
name|targetRect
operator|.
name|height
argument_list|()
operator|&
operator|~
operator|(
name|s
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
name|int
name|paddingDelta
init|=
operator|(
name|prepadding
operator|-
name|padding
operator|)
operator|>>
name|level
decl_stmt|;
name|QRect
name|subRect
argument_list|(
name|paddingDelta
argument_list|,
name|paddingDelta
argument_list|,
name|targetRect
operator|.
name|width
argument_list|()
operator|>>
name|level
argument_list|,
name|targetRect
operator|.
name|height
argument_list|()
operator|>>
name|level
argument_list|)
decl_stmt|;
name|QImage
name|sourceImage
init|=
name|info
operator|->
name|paddedImage
argument_list|(
name|level
operator|-
literal|1
argument_list|)
decl_stmt|;
name|QImage
name|subImage
argument_list|(
name|subRect
operator|.
name|height
argument_list|()
argument_list|,
name|subRect
operator|.
name|width
argument_list|()
argument_list|,
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
decl_stmt|;
name|qt_rectcopy
argument_list|(
operator|(
name|QRgb
operator|*
operator|)
name|subImage
operator|.
name|bits
argument_list|()
argument_list|,
operator|(
operator|(
name|QRgb
operator|*
operator|)
name|sourceImage
operator|.
name|scanLine
argument_list|(
name|paddingDelta
argument_list|)
operator|)
operator|+
name|paddingDelta
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|subRect
operator|.
name|height
argument_list|()
argument_list|,
name|subRect
operator|.
name|width
argument_list|()
argument_list|,
name|subImage
operator|.
name|bytesPerLine
argument_list|()
argument_list|,
name|sourceImage
operator|.
name|bytesPerLine
argument_list|()
argument_list|)
expr_stmt|;
name|GLuint
name|texture
init|=
name|info
operator|->
name|texture
argument_list|()
decl_stmt|;
name|qt_blurImage
argument_list|(
name|subImage
argument_list|,
name|actualRadius
argument_list|,
name|blurHints
argument_list|()
operator|&
name|QGraphicsBlurEffect
operator|::
name|QualityHint
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// subtract one pixel off the end to prevent the bilinear sampling from sampling uninitialized data
name|QRect
name|textureSubRect
init|=
name|subImage
operator|.
name|rect
argument_list|()
operator|.
name|adjusted
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|QRectF
name|targetRectF
init|=
name|QRectF
argument_list|(
name|targetRect
argument_list|)
operator|.
name|adjusted
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
name|targetRect
operator|.
name|width
argument_list|()
operator|/
name|qreal
argument_list|(
name|textureSize
operator|.
name|width
argument_list|()
argument_list|)
argument_list|,
operator|-
name|targetRect
operator|.
name|height
argument_list|()
operator|/
name|qreal
argument_list|(
name|textureSize
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|glBindTexture
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
name|texture
argument_list|)
expr_stmt|;
name|glTexSubImage2D
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|subImage
operator|.
name|width
argument_list|()
argument_list|,
name|subImage
operator|.
name|height
argument_list|()
argument_list|,
name|GL_RGBA
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
cast|const_cast
argument_list|<
specifier|const
name|QImage
operator|&
argument_list|>
argument_list|(
name|subImage
argument_list|)
operator|.
name|bits
argument_list|()
argument_list|)
expr_stmt|;
name|QGL2PaintEngineEx
modifier|*
name|engine
init|=
cast|static_cast
argument_list|<
name|QGL2PaintEngineEx
operator|*
argument_list|>
argument_list|(
name|painter
operator|->
name|paintEngine
argument_list|()
argument_list|)
decl_stmt|;
name|painter
operator|->
name|setRenderHint
argument_list|(
name|QPainter
operator|::
name|SmoothPixmapTransform
argument_list|)
expr_stmt|;
comment|// texture is flipped on the y-axis
name|targetRectF
operator|=
name|QRectF
argument_list|(
name|targetRectF
operator|.
name|x
argument_list|()
argument_list|,
name|targetRectF
operator|.
name|bottom
argument_list|()
argument_list|,
name|targetRectF
operator|.
name|width
argument_list|()
argument_list|,
operator|-
name|targetRectF
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|engine
operator|->
name|drawTexture
argument_list|(
name|targetRectF
operator|.
name|translated
argument_list|(
name|pos
argument_list|)
argument_list|,
name|texture
argument_list|,
name|textureSize
argument_list|,
name|textureSubRect
argument_list|)
expr_stmt|;
name|blurTextureCache
operator|->
name|insertBlurTextureInfo
argument_list|(
name|src
argument_list|,
name|info
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_decl_stmt
DECL|variable|qt_gl_drop_shadow_filter
specifier|static
specifier|const
name|char
modifier|*
name|qt_gl_drop_shadow_filter
init|=
literal|"uniform lowp vec4 shadowColor;"
literal|"lowp vec4 customShader(lowp sampler2D src, highp vec2 srcCoords)"
literal|"{"
literal|"    return shadowColor * texture2D(src, srcCoords.yx).a;"
literal|"}"
decl_stmt|;
end_decl_stmt
begin_constructor
DECL|function|QGLPixmapDropShadowFilter
name|QGLPixmapDropShadowFilter
operator|::
name|QGLPixmapDropShadowFilter
parameter_list|()
block|{
name|setSource
argument_list|(
name|qt_gl_drop_shadow_filter
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|processGL
name|bool
name|QGLPixmapDropShadowFilter
operator|::
name|processGL
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|pos
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|src
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|srcRect
parameter_list|)
specifier|const
block|{
name|QGLPixmapDropShadowFilter
modifier|*
name|filter
init|=
cast|const_cast
argument_list|<
name|QGLPixmapDropShadowFilter
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|qreal
name|r
init|=
name|blurRadius
argument_list|()
decl_stmt|;
name|QRectF
name|targetRectUnaligned
init|=
name|QRectF
argument_list|(
name|src
operator|.
name|rect
argument_list|()
argument_list|)
operator|.
name|translated
argument_list|(
name|pos
operator|+
name|offset
argument_list|()
argument_list|)
operator|.
name|adjusted
argument_list|(
operator|-
name|r
argument_list|,
operator|-
name|r
argument_list|,
name|r
argument_list|,
name|r
argument_list|)
decl_stmt|;
name|QRect
name|targetRect
init|=
name|targetRectUnaligned
operator|.
name|toAlignedRect
argument_list|()
decl_stmt|;
comment|// ensure even dimensions (going to divide by two)
name|targetRect
operator|.
name|setWidth
argument_list|(
operator|(
name|targetRect
operator|.
name|width
argument_list|()
operator|+
literal|1
operator|)
operator|&
operator|~
literal|1
argument_list|)
expr_stmt|;
name|targetRect
operator|.
name|setHeight
argument_list|(
operator|(
name|targetRect
operator|.
name|height
argument_list|()
operator|+
literal|1
operator|)
operator|&
operator|~
literal|1
argument_list|)
expr_stmt|;
name|QGLContext
modifier|*
name|ctx
init|=
cast|const_cast
argument_list|<
name|QGLContext
operator|*
argument_list|>
argument_list|(
name|QGLContext
operator|::
name|currentContext
argument_list|()
argument_list|)
decl_stmt|;
name|QGLBlurTextureCache
modifier|*
name|blurTextureCache
init|=
name|QGLBlurTextureCache
operator|::
name|cacheForContext
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
name|QGLBlurTextureInfo
modifier|*
name|info
init|=
name|blurTextureCache
operator|->
name|takeBlurTextureInfo
argument_list|(
name|src
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|info
operator|||
name|info
operator|->
name|radius
argument_list|()
operator|!=
name|r
condition|)
block|{
name|QImage
name|half
init|=
name|qt_halfScaled
argument_list|(
name|src
operator|.
name|toImage
argument_list|()
operator|.
name|alphaChannel
argument_list|()
argument_list|)
decl_stmt|;
name|qreal
name|rx
init|=
name|r
operator|+
name|targetRect
operator|.
name|left
argument_list|()
operator|-
name|targetRectUnaligned
operator|.
name|left
argument_list|()
decl_stmt|;
name|qreal
name|ry
init|=
name|r
operator|+
name|targetRect
operator|.
name|top
argument_list|()
operator|-
name|targetRectUnaligned
operator|.
name|top
argument_list|()
decl_stmt|;
name|QImage
name|image
init|=
name|QImage
argument_list|(
name|targetRect
operator|.
name|size
argument_list|()
operator|/
literal|2
argument_list|,
name|QImage
operator|::
name|Format_Indexed8
argument_list|)
decl_stmt|;
name|image
operator|.
name|setColorTable
argument_list|(
name|half
operator|.
name|colorTable
argument_list|()
argument_list|)
expr_stmt|;
name|image
operator|.
name|fill
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|int
name|dx
init|=
name|qRound
argument_list|(
name|rx
operator|*
name|qreal
argument_list|(
literal|0.5
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|dy
init|=
name|qRound
argument_list|(
name|ry
operator|*
name|qreal
argument_list|(
literal|0.5
argument_list|)
argument_list|)
decl_stmt|;
name|qt_rectcopy
argument_list|(
name|image
operator|.
name|bits
argument_list|()
argument_list|,
name|half
operator|.
name|bits
argument_list|()
argument_list|,
name|dx
argument_list|,
name|dy
argument_list|,
name|half
operator|.
name|width
argument_list|()
argument_list|,
name|half
operator|.
name|height
argument_list|()
argument_list|,
name|image
operator|.
name|bytesPerLine
argument_list|()
argument_list|,
name|half
operator|.
name|bytesPerLine
argument_list|()
argument_list|)
expr_stmt|;
name|qt_blurImage
argument_list|(
name|image
argument_list|,
name|r
operator|*
name|qreal
argument_list|(
literal|0.5
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|GLuint
name|texture
decl_stmt|;
name|glGenTextures
argument_list|(
literal|1
argument_list|,
operator|&
name|texture
argument_list|)
expr_stmt|;
name|glBindTexture
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
name|texture
argument_list|)
expr_stmt|;
name|glTexImage2D
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
literal|0
argument_list|,
name|GL_ALPHA
argument_list|,
name|image
operator|.
name|width
argument_list|()
argument_list|,
name|image
operator|.
name|height
argument_list|()
argument_list|,
literal|0
argument_list|,
name|GL_ALPHA
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|image
operator|.
name|bits
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|=
operator|new
name|QGLBlurTextureInfo
argument_list|(
name|image
argument_list|,
name|texture
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
name|GLuint
name|texture
init|=
name|info
operator|->
name|texture
argument_list|()
decl_stmt|;
name|filter
operator|->
name|setOnPainter
argument_list|(
name|painter
argument_list|)
expr_stmt|;
name|QGL2PaintEngineEx
modifier|*
name|engine
init|=
cast|static_cast
argument_list|<
name|QGL2PaintEngineEx
operator|*
argument_list|>
argument_list|(
name|painter
operator|->
name|paintEngine
argument_list|()
argument_list|)
decl_stmt|;
name|painter
operator|->
name|setRenderHint
argument_list|(
name|QPainter
operator|::
name|SmoothPixmapTransform
argument_list|)
expr_stmt|;
name|engine
operator|->
name|drawTexture
argument_list|(
name|targetRect
argument_list|,
name|texture
argument_list|,
name|info
operator|->
name|paddedImage
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|info
operator|->
name|paddedImage
argument_list|()
operator|.
name|rect
argument_list|()
argument_list|)
expr_stmt|;
name|filter
operator|->
name|removeFromPainter
argument_list|(
name|painter
argument_list|)
expr_stmt|;
comment|// Now draw the actual pixmap over the top.
name|painter
operator|->
name|drawPixmap
argument_list|(
name|pos
argument_list|,
name|src
argument_list|,
name|srcRect
argument_list|)
expr_stmt|;
name|blurTextureCache
operator|->
name|insertBlurTextureInfo
argument_list|(
name|src
argument_list|,
name|info
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|setUniforms
name|void
name|QGLPixmapDropShadowFilter
operator|::
name|setUniforms
parameter_list|(
name|QGLShaderProgram
modifier|*
name|program
parameter_list|)
block|{
name|QColor
name|col
init|=
name|color
argument_list|()
decl_stmt|;
name|qreal
name|alpha
init|=
name|col
operator|.
name|alphaF
argument_list|()
decl_stmt|;
name|program
operator|->
name|setUniformValue
argument_list|(
literal|"shadowColor"
argument_list|,
name|col
operator|.
name|redF
argument_list|()
operator|*
name|alpha
argument_list|,
name|col
operator|.
name|greenF
argument_list|()
operator|*
name|alpha
argument_list|,
name|col
operator|.
name|blueF
argument_list|()
operator|*
name|alpha
argument_list|,
name|alpha
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
