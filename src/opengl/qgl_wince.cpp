begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtOpenGL module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<qgl.h>
end_include
begin_include
include|#
directive|include
file|<qlist.h>
end_include
begin_include
include|#
directive|include
file|<qmap.h>
end_include
begin_include
include|#
directive|include
file|<qpixmap.h>
end_include
begin_include
include|#
directive|include
file|<qevent.h>
end_include
begin_include
include|#
directive|include
file|<private/qgl_p.h>
end_include
begin_include
include|#
directive|include
file|<qcolormap.h>
end_include
begin_include
include|#
directive|include
file|<qvarlengtharray.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<qapplication.h>
end_include
begin_include
include|#
directive|include
file|<qdesktopwidget>
end_include
begin_include
include|#
directive|include
file|<windows.h>
end_include
begin_include
include|#
directive|include
file|<private/qeglproperties_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qeglcontext_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qgl_egl_p.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_class
DECL|class|QGLCmapPrivate
class|class
name|QGLCmapPrivate
block|{
public|public:
DECL|function|QGLCmapPrivate
name|QGLCmapPrivate
parameter_list|()
member_init_list|:
name|count
argument_list|(
literal|1
argument_list|)
block|{ }
DECL|function|ref
name|void
name|ref
parameter_list|()
block|{
operator|++
name|count
expr_stmt|;
block|}
DECL|function|deref
name|bool
name|deref
parameter_list|()
block|{
return|return
operator|!
operator|--
name|count
return|;
block|}
DECL|member|count
name|uint
name|count
decl_stmt|;
DECL|enum|AllocState
DECL|enumerator|UnAllocated
DECL|enumerator|Allocated
DECL|enumerator|Reserved
enum|enum
name|AllocState
block|{
name|UnAllocated
init|=
literal|0
block|,
name|Allocated
init|=
literal|0x01
block|,
name|Reserved
init|=
literal|0x02
block|}
enum|;
DECL|member|maxSize
name|int
name|maxSize
decl_stmt|;
DECL|member|colorArray
name|QVector
argument_list|<
name|uint
argument_list|>
name|colorArray
decl_stmt|;
DECL|member|allocArray
name|QVector
argument_list|<
name|quint8
argument_list|>
name|allocArray
decl_stmt|;
DECL|member|contextArray
name|QVector
argument_list|<
name|quint8
argument_list|>
name|contextArray
decl_stmt|;
DECL|member|colorMap
name|QMap
argument_list|<
name|uint
argument_list|,
name|int
argument_list|>
name|colorMap
decl_stmt|;
block|}
class|;
end_class
begin_comment
comment|/*****************************************************************************   QColorMap class - temporarily here, until it is ready for prime time  *****************************************************************************/
end_comment
begin_comment
comment|/**************************************************************************** ** ** Definition of QColorMap class ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QGLCMAP_H
end_ifndef
begin_define
DECL|macro|QGLCMAP_H
define|#
directive|define
name|QGLCMAP_H
end_define
begin_include
include|#
directive|include
file|<qcolor.h>
end_include
begin_comment
comment|/*     QGLTemporaryContext implementation */
end_comment
begin_class
DECL|class|QGLTemporaryContextPrivate
class|class
name|QGLTemporaryContextPrivate
block|{
public|public:
DECL|member|widget
name|QGLWidget
modifier|*
name|widget
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|QGLTemporaryContext
name|QGLTemporaryContext
operator|::
name|QGLTemporaryContext
parameter_list|(
name|bool
parameter_list|,
name|QWidget
modifier|*
parameter_list|)
member_init_list|:
name|d
argument_list|(
operator|new
name|QGLTemporaryContextPrivate
argument_list|)
block|{
name|d
operator|->
name|widget
operator|=
operator|new
name|QGLWidget
expr_stmt|;
name|d
operator|->
name|widget
operator|->
name|makeCurrent
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QGLTemporaryContext
name|QGLTemporaryContext
operator|::
name|~
name|QGLTemporaryContext
parameter_list|()
block|{
operator|delete
name|d
operator|->
name|widget
expr_stmt|;
block|}
end_destructor
begin_comment
comment|/*****************************************************************************   QGLFormat Win32/WGL-specific code  *****************************************************************************/
end_comment
begin_decl_stmt
DECL|variable|opengl32dll
specifier|static
name|bool
name|opengl32dll
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|hasOpenGLOverlays
name|bool
name|QGLFormat
operator|::
name|hasOpenGLOverlays
parameter_list|()
block|{
return|return
literal|false
return|;
comment|// ###
block|}
end_function
begin_function
DECL|function|chooseContext
name|bool
name|QGLContext
operator|::
name|chooseContext
parameter_list|(
specifier|const
name|QGLContext
modifier|*
name|shareContext
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGLContext
argument_list|)
expr_stmt|;
comment|// Validate the device.
if|if
condition|(
operator|!
name|device
argument_list|()
condition|)
return|return
literal|false
return|;
name|int
name|devType
init|=
name|device
argument_list|()
operator|->
name|devType
argument_list|()
decl_stmt|;
if|if
condition|(
name|devType
operator|!=
name|QInternal
operator|::
name|Pixmap
operator|&&
name|devType
operator|!=
name|QInternal
operator|::
name|Image
operator|&&
name|devType
operator|!=
name|QInternal
operator|::
name|Widget
condition|)
block|{
name|qWarning
argument_list|(
literal|"QGLContext::chooseContext(): Cannot create QGLContext's for paint device type %d"
argument_list|,
name|devType
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// Get the display and initialize it.
name|d
operator|->
name|eglContext
operator|=
operator|new
name|QEglContext
argument_list|()
expr_stmt|;
name|d
operator|->
name|ownsEglContext
operator|=
literal|true
expr_stmt|;
name|d
operator|->
name|eglContext
operator|->
name|setApi
argument_list|(
name|QEgl
operator|::
name|OpenGL
argument_list|)
expr_stmt|;
comment|// Construct the configuration we need for this surface.
name|QEglProperties
name|configProps
decl_stmt|;
name|qt_eglproperties_set_glformat
argument_list|(
name|configProps
argument_list|,
name|d
operator|->
name|glFormat
argument_list|)
expr_stmt|;
name|configProps
operator|.
name|setDeviceType
argument_list|(
name|devType
argument_list|)
expr_stmt|;
name|configProps
operator|.
name|setPaintDeviceFormat
argument_list|(
name|device
argument_list|()
argument_list|)
expr_stmt|;
name|configProps
operator|.
name|setRenderableType
argument_list|(
name|QEgl
operator|::
name|OpenGL
argument_list|)
expr_stmt|;
comment|// Search for a matching configuration, reducing the complexity
comment|// each time until we get something that matches.
if|if
condition|(
operator|!
name|d
operator|->
name|eglContext
operator|->
name|chooseConfig
argument_list|(
name|configProps
argument_list|)
condition|)
block|{
operator|delete
name|d
operator|->
name|eglContext
expr_stmt|;
name|d
operator|->
name|eglContext
operator|=
literal|0
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// Inform the higher layers about the actual format properties.
name|qt_glformat_from_eglconfig
argument_list|(
name|d
operator|->
name|glFormat
argument_list|,
name|d
operator|->
name|eglContext
operator|->
name|config
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create a new context for the configuration.
if|if
condition|(
operator|!
name|d
operator|->
name|eglContext
operator|->
name|createContext
argument_list|(
name|shareContext
condition|?
name|shareContext
operator|->
name|d_func
argument_list|()
operator|->
name|eglContext
else|:
literal|0
argument_list|)
condition|)
block|{
operator|delete
name|d
operator|->
name|eglContext
expr_stmt|;
name|d
operator|->
name|eglContext
operator|=
literal|0
expr_stmt|;
return|return
literal|false
return|;
block|}
name|d
operator|->
name|sharing
operator|=
name|d
operator|->
name|eglContext
operator|->
name|isSharing
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|sharing
operator|&&
name|shareContext
condition|)
cast|const_cast
argument_list|<
name|QGLContext
operator|*
argument_list|>
argument_list|(
name|shareContext
argument_list|)
operator|->
name|d_func
argument_list|()
operator|->
name|sharing
operator|=
literal|true
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|EGL_VERSION_1_1
argument_list|)
if|if
condition|(
name|d
operator|->
name|glFormat
operator|.
name|swapInterval
argument_list|()
operator|!=
operator|-
literal|1
operator|&&
name|devType
operator|==
name|QInternal
operator|::
name|Widget
condition|)
name|eglSwapInterval
argument_list|(
name|d
operator|->
name|eglContext
operator|->
name|display
argument_list|()
argument_list|,
name|d
operator|->
name|glFormat
operator|.
name|swapInterval
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// Create the EGL surface to draw into.
name|d
operator|->
name|eglSurface
operator|=
name|d
operator|->
name|eglContext
operator|->
name|createSurface
argument_list|(
name|device
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|eglSurface
operator|==
name|EGL_NO_SURFACE
condition|)
block|{
operator|delete
name|d
operator|->
name|eglContext
expr_stmt|;
name|d
operator|->
name|eglContext
operator|=
literal|0
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|qLogEq
specifier|static
name|bool
name|qLogEq
parameter_list|(
name|bool
name|a
parameter_list|,
name|bool
name|b
parameter_list|)
block|{
return|return
operator|(
operator|(
operator|(
operator|!
name|a
operator|)
operator|&&
operator|(
operator|!
name|b
operator|)
operator|)
operator|||
operator|(
name|a
operator|&&
name|b
operator|)
operator|)
return|;
block|}
end_function
begin_function
DECL|function|choosePixelFormat
name|int
name|QGLContext
operator|::
name|choosePixelFormat
parameter_list|(
name|void
modifier|*
parameter_list|,
name|HDC
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
end_function
begin_class_decl
class_decl|class
name|QGLCmapPrivate
class_decl|;
end_class_decl
begin_class
DECL|class|QGLCmap
class|class
comment|/*Q_EXPORT*/
name|QGLCmap
block|{
public|public:
DECL|enum|Flags
DECL|enumerator|Reserved
enum|enum
name|Flags
block|{
name|Reserved
init|=
literal|0x01
block|}
enum|;
name|QGLCmap
parameter_list|(
name|int
name|maxSize
init|=
literal|256
parameter_list|)
constructor_decl|;
name|QGLCmap
parameter_list|(
specifier|const
name|QGLCmap
modifier|&
name|map
parameter_list|)
constructor_decl|;
name|~
name|QGLCmap
parameter_list|()
destructor_decl|;
name|QGLCmap
modifier|&
name|operator
name|=
parameter_list|(
specifier|const
name|QGLCmap
modifier|&
name|map
parameter_list|)
function_decl|;
comment|// isEmpty and/or isNull ?
name|int
name|size
parameter_list|()
specifier|const
function_decl|;
name|int
name|maxSize
parameter_list|()
specifier|const
function_decl|;
name|void
name|resize
parameter_list|(
name|int
name|newSize
parameter_list|)
function_decl|;
name|int
name|find
parameter_list|(
name|QRgb
name|color
parameter_list|)
specifier|const
function_decl|;
name|int
name|findNearest
parameter_list|(
name|QRgb
name|color
parameter_list|)
specifier|const
function_decl|;
name|int
name|allocate
parameter_list|(
name|QRgb
name|color
parameter_list|,
name|uint
name|flags
init|=
literal|0
parameter_list|,
name|quint8
name|context
init|=
literal|0
parameter_list|)
function_decl|;
name|void
name|setEntry
parameter_list|(
name|int
name|idx
parameter_list|,
name|QRgb
name|color
parameter_list|,
name|uint
name|flags
init|=
literal|0
parameter_list|,
name|quint8
name|context
init|=
literal|0
parameter_list|)
function_decl|;
specifier|const
name|QRgb
modifier|*
name|colors
parameter_list|()
specifier|const
function_decl|;
private|private:
name|void
name|detach
parameter_list|()
function_decl|;
DECL|member|d
name|QGLCmapPrivate
modifier|*
name|d
decl_stmt|;
block|}
class|;
end_class
begin_endif
endif|#
directive|endif
end_endif
begin_constructor
DECL|function|QGLCmap
name|QGLCmap
operator|::
name|QGLCmap
parameter_list|(
name|int
name|maxSize
parameter_list|)
comment|// add a bool prealloc?
block|{
name|d
operator|=
operator|new
name|QGLCmapPrivate
expr_stmt|;
name|d
operator|->
name|maxSize
operator|=
name|maxSize
expr_stmt|;
block|}
end_constructor
begin_constructor
DECL|function|QGLCmap
name|QGLCmap
operator|::
name|QGLCmap
parameter_list|(
specifier|const
name|QGLCmap
modifier|&
name|map
parameter_list|)
block|{
name|d
operator|=
name|map
operator|.
name|d
expr_stmt|;
name|d
operator|->
name|ref
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QGLCmap
name|QGLCmap
operator|::
name|~
name|QGLCmap
parameter_list|()
block|{
if|if
condition|(
name|d
operator|&&
name|d
operator|->
name|deref
argument_list|()
condition|)
operator|delete
name|d
expr_stmt|;
name|d
operator|=
literal|0
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|operator =
name|QGLCmap
modifier|&
name|QGLCmap
operator|::
name|operator
name|=
parameter_list|(
specifier|const
name|QGLCmap
modifier|&
name|map
parameter_list|)
block|{
name|map
operator|.
name|d
operator|->
name|ref
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|deref
argument_list|()
condition|)
operator|delete
name|d
expr_stmt|;
name|d
operator|=
name|map
operator|.
name|d
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_function
begin_function
DECL|function|size
name|int
name|QGLCmap
operator|::
name|size
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|colorArray
operator|.
name|size
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|maxSize
name|int
name|QGLCmap
operator|::
name|maxSize
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|maxSize
return|;
block|}
end_function
begin_function
DECL|function|detach
name|void
name|QGLCmap
operator|::
name|detach
parameter_list|()
block|{
if|if
condition|(
name|d
operator|->
name|count
operator|!=
literal|1
condition|)
block|{
name|d
operator|->
name|deref
argument_list|()
expr_stmt|;
name|QGLCmapPrivate
modifier|*
name|newd
init|=
operator|new
name|QGLCmapPrivate
decl_stmt|;
name|newd
operator|->
name|maxSize
operator|=
name|d
operator|->
name|maxSize
expr_stmt|;
name|newd
operator|->
name|colorArray
operator|=
name|d
operator|->
name|colorArray
expr_stmt|;
name|newd
operator|->
name|allocArray
operator|=
name|d
operator|->
name|allocArray
expr_stmt|;
name|newd
operator|->
name|contextArray
operator|=
name|d
operator|->
name|contextArray
expr_stmt|;
name|newd
operator|->
name|colorArray
operator|.
name|detach
argument_list|()
expr_stmt|;
name|newd
operator|->
name|allocArray
operator|.
name|detach
argument_list|()
expr_stmt|;
name|newd
operator|->
name|contextArray
operator|.
name|detach
argument_list|()
expr_stmt|;
name|newd
operator|->
name|colorMap
operator|=
name|d
operator|->
name|colorMap
expr_stmt|;
name|d
operator|=
name|newd
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|resize
name|void
name|QGLCmap
operator|::
name|resize
parameter_list|(
name|int
name|newSize
parameter_list|)
block|{
if|if
condition|(
name|newSize
argument_list|<
literal|0
operator|||
name|newSize
argument_list|>
name|d
operator|->
name|maxSize
condition|)
block|{
name|qWarning
argument_list|(
literal|"QGLCmap::resize(): size out of range"
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|oldSize
init|=
name|size
argument_list|()
decl_stmt|;
name|detach
argument_list|()
expr_stmt|;
comment|//if shrinking; remove the lost elems from colorMap
name|d
operator|->
name|colorArray
operator|.
name|resize
argument_list|(
name|newSize
argument_list|)
expr_stmt|;
name|d
operator|->
name|allocArray
operator|.
name|resize
argument_list|(
name|newSize
argument_list|)
expr_stmt|;
name|d
operator|->
name|contextArray
operator|.
name|resize
argument_list|(
name|newSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|newSize
operator|>
name|oldSize
condition|)
block|{
name|memset
argument_list|(
name|d
operator|->
name|allocArray
operator|.
name|data
argument_list|()
operator|+
name|oldSize
argument_list|,
literal|0
argument_list|,
name|newSize
operator|-
name|oldSize
argument_list|)
expr_stmt|;
name|memset
argument_list|(
name|d
operator|->
name|contextArray
operator|.
name|data
argument_list|()
operator|+
name|oldSize
argument_list|,
literal|0
argument_list|,
name|newSize
operator|-
name|oldSize
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|find
name|int
name|QGLCmap
operator|::
name|find
parameter_list|(
name|QRgb
name|color
parameter_list|)
specifier|const
block|{
name|QMap
argument_list|<
name|uint
argument_list|,
name|int
argument_list|>
operator|::
name|ConstIterator
name|it
init|=
name|d
operator|->
name|colorMap
operator|.
name|find
argument_list|(
name|color
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|!=
name|d
operator|->
name|colorMap
operator|.
name|end
argument_list|()
condition|)
return|return
operator|*
name|it
return|;
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|findNearest
name|int
name|QGLCmap
operator|::
name|findNearest
parameter_list|(
name|QRgb
name|color
parameter_list|)
specifier|const
block|{
name|int
name|idx
init|=
name|find
argument_list|(
name|color
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|>=
literal|0
condition|)
return|return
name|idx
return|;
name|int
name|mapSize
init|=
name|size
argument_list|()
decl_stmt|;
name|int
name|mindist
init|=
literal|200000
decl_stmt|;
name|int
name|r
init|=
name|qRed
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|int
name|g
init|=
name|qGreen
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|int
name|b
init|=
name|qBlue
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|int
name|rx
decl_stmt|,
name|gx
decl_stmt|,
name|bx
decl_stmt|,
name|dist
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mapSize
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|d
operator|->
name|allocArray
index|[
name|i
index|]
operator|&
name|QGLCmapPrivate
operator|::
name|Allocated
operator|)
condition|)
continue|continue;
name|QRgb
name|ci
init|=
name|d
operator|->
name|colorArray
index|[
name|i
index|]
decl_stmt|;
name|rx
operator|=
name|r
operator|-
name|qRed
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|gx
operator|=
name|g
operator|-
name|qGreen
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|bx
operator|=
name|b
operator|-
name|qBlue
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|dist
operator|=
name|rx
operator|*
name|rx
operator|+
name|gx
operator|*
name|gx
operator|+
name|bx
operator|*
name|bx
expr_stmt|;
comment|// calculate distance
if|if
condition|(
name|dist
operator|<
name|mindist
condition|)
block|{
comment|// minimal?
name|mindist
operator|=
name|dist
expr_stmt|;
name|idx
operator|=
name|i
expr_stmt|;
block|}
block|}
return|return
name|idx
return|;
block|}
end_function
begin_comment
comment|// Does not always allocate; returns existing c idx if found
end_comment
begin_function
DECL|function|allocate
name|int
name|QGLCmap
operator|::
name|allocate
parameter_list|(
name|QRgb
name|color
parameter_list|,
name|uint
name|flags
parameter_list|,
name|quint8
name|context
parameter_list|)
block|{
name|int
name|idx
init|=
name|find
argument_list|(
name|color
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|>=
literal|0
condition|)
return|return
name|idx
return|;
name|int
name|mapSize
init|=
name|d
operator|->
name|colorArray
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|newIdx
init|=
name|d
operator|->
name|allocArray
operator|.
name|indexOf
argument_list|(
name|QGLCmapPrivate
operator|::
name|UnAllocated
argument_list|)
decl_stmt|;
if|if
condition|(
name|newIdx
operator|<
literal|0
condition|)
block|{
comment|// Must allocate more room
if|if
condition|(
name|mapSize
operator|<
name|d
operator|->
name|maxSize
condition|)
block|{
name|newIdx
operator|=
name|mapSize
expr_stmt|;
name|mapSize
operator|++
expr_stmt|;
name|resize
argument_list|(
name|mapSize
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//# add a bool param that says what to do in case no more room -
comment|// fail (-1) or return nearest?
return|return
operator|-
literal|1
return|;
block|}
block|}
name|d
operator|->
name|colorArray
index|[
name|newIdx
index|]
operator|=
name|color
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|QGLCmap
operator|::
name|Reserved
condition|)
block|{
name|d
operator|->
name|allocArray
index|[
name|newIdx
index|]
operator|=
name|QGLCmapPrivate
operator|::
name|Reserved
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|allocArray
index|[
name|newIdx
index|]
operator|=
name|QGLCmapPrivate
operator|::
name|Allocated
expr_stmt|;
name|d
operator|->
name|colorMap
operator|.
name|insert
argument_list|(
name|color
argument_list|,
name|newIdx
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|contextArray
index|[
name|newIdx
index|]
operator|=
name|context
expr_stmt|;
return|return
name|newIdx
return|;
block|}
end_function
begin_function
DECL|function|setEntry
name|void
name|QGLCmap
operator|::
name|setEntry
parameter_list|(
name|int
name|idx
parameter_list|,
name|QRgb
name|color
parameter_list|,
name|uint
name|flags
parameter_list|,
name|quint8
name|context
parameter_list|)
block|{
if|if
condition|(
name|idx
operator|<
literal|0
operator|||
name|idx
operator|>=
name|d
operator|->
name|maxSize
condition|)
block|{
name|qWarning
argument_list|(
literal|"QGLCmap::set(): Index out of range"
argument_list|)
expr_stmt|;
return|return;
block|}
name|detach
argument_list|()
expr_stmt|;
name|int
name|mapSize
init|=
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|idx
operator|>=
name|mapSize
condition|)
block|{
name|mapSize
operator|=
name|idx
operator|+
literal|1
expr_stmt|;
name|resize
argument_list|(
name|mapSize
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|colorArray
index|[
name|idx
index|]
operator|=
name|color
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|QGLCmap
operator|::
name|Reserved
condition|)
block|{
name|d
operator|->
name|allocArray
index|[
name|idx
index|]
operator|=
name|QGLCmapPrivate
operator|::
name|Reserved
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|allocArray
index|[
name|idx
index|]
operator|=
name|QGLCmapPrivate
operator|::
name|Allocated
expr_stmt|;
name|d
operator|->
name|colorMap
operator|.
name|insert
argument_list|(
name|color
argument_list|,
name|idx
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|contextArray
index|[
name|idx
index|]
operator|=
name|context
expr_stmt|;
block|}
end_function
begin_function
DECL|function|colors
specifier|const
name|QRgb
modifier|*
name|QGLCmap
operator|::
name|colors
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|colorArray
operator|.
name|data
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*****************************************************************************   QGLWidget Win32/WGL-specific code  *****************************************************************************/
end_comment
begin_function
DECL|function|init
name|void
name|QGLWidgetPrivate
operator|::
name|init
parameter_list|(
name|QGLContext
modifier|*
name|ctx
parameter_list|,
specifier|const
name|QGLWidget
modifier|*
name|shareWidget
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QGLWidget
argument_list|)
expr_stmt|;
name|olcx
operator|=
literal|0
expr_stmt|;
name|initContext
argument_list|(
name|ctx
argument_list|,
name|shareWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|isValid
argument_list|()
operator|&&
name|q
operator|->
name|context
argument_list|()
operator|->
name|format
argument_list|()
operator|.
name|hasOverlay
argument_list|()
condition|)
block|{
name|olcx
operator|=
operator|new
name|QGLContext
argument_list|(
name|QGLFormat
operator|::
name|defaultOverlayFormat
argument_list|()
argument_list|,
name|q
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|olcx
operator|->
name|create
argument_list|(
name|shareWidget
condition|?
name|shareWidget
operator|->
name|overlayContext
argument_list|()
else|:
literal|0
argument_list|)
condition|)
block|{
operator|delete
name|olcx
expr_stmt|;
name|olcx
operator|=
literal|0
expr_stmt|;
name|glcx
operator|->
name|d_func
argument_list|()
operator|->
name|glFormat
operator|.
name|setOverlay
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|olcx
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*\internal   Store color values in the given colormap. */
end_comment
begin_function
DECL|function|qStoreColors
specifier|static
name|void
name|qStoreColors
parameter_list|(
name|HPALETTE
name|cmap
parameter_list|,
specifier|const
name|QGLColormap
modifier|&
name|cols
parameter_list|)
block|{
name|QRgb
name|color
decl_stmt|;
name|PALETTEENTRY
name|pe
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cols
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|color
operator|=
name|cols
operator|.
name|entryRgb
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|pe
operator|.
name|peRed
operator|=
name|qRed
argument_list|(
name|color
argument_list|)
expr_stmt|;
name|pe
operator|.
name|peGreen
operator|=
name|qGreen
argument_list|(
name|color
argument_list|)
expr_stmt|;
name|pe
operator|.
name|peBlue
operator|=
name|qBlue
argument_list|(
name|color
argument_list|)
expr_stmt|;
name|pe
operator|.
name|peFlags
operator|=
literal|0
expr_stmt|;
name|SetPaletteEntries
argument_list|(
name|cmap
argument_list|,
name|i
argument_list|,
literal|1
argument_list|,
operator|&
name|pe
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|updateColormap
name|void
name|QGLWidgetPrivate
operator|::
name|updateColormap
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QGLWidget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|cmap
operator|.
name|handle
argument_list|()
condition|)
return|return;
name|HDC
name|hdc
init|=
name|GetDC
argument_list|(
name|q
operator|->
name|winId
argument_list|()
argument_list|)
decl_stmt|;
name|SelectPalette
argument_list|(
name|hdc
argument_list|,
operator|(
name|HPALETTE
operator|)
name|cmap
operator|.
name|handle
argument_list|()
argument_list|,
name|TRUE
argument_list|)
expr_stmt|;
name|qStoreColors
argument_list|(
operator|(
name|HPALETTE
operator|)
name|cmap
operator|.
name|handle
argument_list|()
argument_list|,
name|cmap
argument_list|)
expr_stmt|;
name|RealizePalette
argument_list|(
name|hdc
argument_list|)
expr_stmt|;
name|ReleaseDC
argument_list|(
name|q
operator|->
name|winId
argument_list|()
argument_list|,
name|hdc
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|event
name|bool
name|QGLWidget
operator|::
name|event
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGLWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|ParentChange
condition|)
block|{
name|setContext
argument_list|(
operator|new
name|QGLContext
argument_list|(
name|d
operator|->
name|glcx
operator|->
name|requestedFormat
argument_list|()
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
comment|// the overlay needs to be recreated as well
operator|delete
name|d
operator|->
name|olcx
expr_stmt|;
if|if
condition|(
name|isValid
argument_list|()
operator|&&
name|context
argument_list|()
operator|->
name|format
argument_list|()
operator|.
name|hasOverlay
argument_list|()
condition|)
block|{
name|d
operator|->
name|olcx
operator|=
operator|new
name|QGLContext
argument_list|(
name|QGLFormat
operator|::
name|defaultOverlayFormat
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|olcx
operator|->
name|create
argument_list|(
name|isSharing
argument_list|()
condition|?
name|d
operator|->
name|glcx
else|:
literal|0
argument_list|)
condition|)
block|{
operator|delete
name|d
operator|->
name|olcx
expr_stmt|;
name|d
operator|->
name|olcx
operator|=
literal|0
expr_stmt|;
name|d
operator|->
name|glcx
operator|->
name|d_func
argument_list|()
operator|->
name|glFormat
operator|.
name|setOverlay
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|d
operator|->
name|olcx
operator|=
literal|0
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|Show
operator|&&
operator|!
name|format
argument_list|()
operator|.
name|rgba
argument_list|()
condition|)
block|{
name|d
operator|->
name|updateColormap
argument_list|()
expr_stmt|;
block|}
return|return
name|QWidget
operator|::
name|event
argument_list|(
name|e
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|resizeEvent
name|void
name|QGLWidget
operator|::
name|resizeEvent
parameter_list|(
name|QResizeEvent
modifier|*
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGLWidget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isValid
argument_list|()
condition|)
return|return;
name|makeCurrent
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|glcx
operator|->
name|initialized
argument_list|()
condition|)
name|glInit
argument_list|()
expr_stmt|;
name|resizeGL
argument_list|(
name|width
argument_list|()
argument_list|,
name|height
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|olcx
condition|)
block|{
name|makeOverlayCurrent
argument_list|()
expr_stmt|;
name|resizeOverlayGL
argument_list|(
name|width
argument_list|()
argument_list|,
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|overlayContext
specifier|const
name|QGLContext
modifier|*
name|QGLWidget
operator|::
name|overlayContext
parameter_list|()
specifier|const
block|{
return|return
name|d_func
argument_list|()
operator|->
name|olcx
return|;
block|}
end_function
begin_function
DECL|function|makeOverlayCurrent
name|void
name|QGLWidget
operator|::
name|makeOverlayCurrent
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QGLWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|olcx
condition|)
block|{
name|d
operator|->
name|olcx
operator|->
name|makeCurrent
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|olcx
operator|->
name|initialized
argument_list|()
condition|)
block|{
name|initializeOverlayGL
argument_list|()
expr_stmt|;
name|d
operator|->
name|olcx
operator|->
name|setInitialized
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|updateOverlayGL
name|void
name|QGLWidget
operator|::
name|updateOverlayGL
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QGLWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|olcx
condition|)
block|{
name|makeOverlayCurrent
argument_list|()
expr_stmt|;
name|paintOverlayGL
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|olcx
operator|->
name|format
argument_list|()
operator|.
name|doubleBuffer
argument_list|()
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|autoSwap
condition|)
name|d
operator|->
name|olcx
operator|->
name|swapBuffers
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|glFlush
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|setContext
name|void
name|QGLWidget
operator|::
name|setContext
parameter_list|(
name|QGLContext
modifier|*
name|context
parameter_list|,
specifier|const
name|QGLContext
modifier|*
name|shareContext
parameter_list|,
name|bool
name|deleteOldContext
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGLWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|==
literal|0
condition|)
block|{
name|qWarning
argument_list|(
literal|"QGLWidget::setContext: Cannot set null context"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|context
operator|->
name|deviceIsPixmap
argument_list|()
operator|&&
name|context
operator|->
name|device
argument_list|()
operator|!=
name|this
condition|)
block|{
name|qWarning
argument_list|(
literal|"QGLWidget::setContext: Context must refer to this widget"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|d
operator|->
name|glcx
condition|)
name|d
operator|->
name|glcx
operator|->
name|doneCurrent
argument_list|()
expr_stmt|;
name|QGLContext
modifier|*
name|oldcx
init|=
name|d
operator|->
name|glcx
decl_stmt|;
name|d
operator|->
name|glcx
operator|=
name|context
expr_stmt|;
name|bool
name|doShow
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|oldcx
operator|&&
name|oldcx
operator|->
name|d_func
argument_list|()
operator|->
name|win
operator|==
name|winId
argument_list|()
operator|&&
operator|!
name|d
operator|->
name|glcx
operator|->
name|deviceIsPixmap
argument_list|()
condition|)
block|{
comment|// We already have a context and must therefore create a new
comment|// window since Windows does not permit setting a new OpenGL
comment|// context for a window that already has one set.
name|doShow
operator|=
name|isVisible
argument_list|()
expr_stmt|;
name|QWidget
modifier|*
name|pW
init|=
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|parent
argument_list|()
argument_list|)
decl_stmt|;
name|QPoint
name|pos
init|=
name|geometry
argument_list|()
operator|.
name|topLeft
argument_list|()
decl_stmt|;
name|setParent
argument_list|(
name|pW
argument_list|,
name|windowFlags
argument_list|()
argument_list|)
expr_stmt|;
name|move
argument_list|(
name|pos
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|d
operator|->
name|glcx
operator|->
name|isValid
argument_list|()
condition|)
block|{
name|d
operator|->
name|glcx
operator|->
name|create
argument_list|(
name|shareContext
condition|?
name|shareContext
else|:
name|oldcx
argument_list|)
expr_stmt|;
comment|// the above is a trick to keep disp lists etc when a
comment|// QGLWidget has been reparented, so remove the sharing
comment|// flag if we don't actually have a sharing context.
if|if
condition|(
operator|!
name|shareContext
condition|)
name|d
operator|->
name|glcx
operator|->
name|d_ptr
operator|->
name|sharing
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|deleteOldContext
condition|)
operator|delete
name|oldcx
expr_stmt|;
if|if
condition|(
name|doShow
condition|)
name|show
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanupColormaps
name|void
name|QGLWidgetPrivate
operator|::
name|cleanupColormaps
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QGLWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmap
operator|.
name|handle
argument_list|()
condition|)
block|{
name|HDC
name|hdc
init|=
name|GetDC
argument_list|(
name|q
operator|->
name|winId
argument_list|()
argument_list|)
decl_stmt|;
name|SelectPalette
argument_list|(
name|hdc
argument_list|,
operator|(
name|HPALETTE
operator|)
name|GetStockObject
argument_list|(
name|DEFAULT_PALETTE
argument_list|)
argument_list|,
name|FALSE
argument_list|)
expr_stmt|;
name|DeleteObject
argument_list|(
operator|(
name|HPALETTE
operator|)
name|cmap
operator|.
name|handle
argument_list|()
argument_list|)
expr_stmt|;
name|ReleaseDC
argument_list|(
name|q
operator|->
name|winId
argument_list|()
argument_list|,
name|hdc
argument_list|)
expr_stmt|;
name|cmap
operator|.
name|setHandle
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
end_function
begin_function
DECL|function|colormap
specifier|const
name|QGLColormap
modifier|&
name|QGLWidget
operator|::
name|colormap
parameter_list|()
specifier|const
block|{
return|return
name|d_func
argument_list|()
operator|->
name|cmap
return|;
block|}
end_function
begin_function
DECL|function|setColormap
name|void
name|QGLWidget
operator|::
name|setColormap
parameter_list|(
specifier|const
name|QGLColormap
modifier|&
name|c
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGLWidget
argument_list|)
expr_stmt|;
name|d
operator|->
name|cmap
operator|=
name|c
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|cmap
operator|.
name|handle
argument_list|()
condition|)
block|{
comment|// already have an allocated cmap
name|d
operator|->
name|updateColormap
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|LOGPALETTE
modifier|*
name|lpal
init|=
operator|(
name|LOGPALETTE
operator|*
operator|)
name|malloc
argument_list|(
sizeof|sizeof
argument_list|(
name|LOGPALETTE
argument_list|)
operator|+
name|c
operator|.
name|size
argument_list|()
operator|*
sizeof|sizeof
argument_list|(
name|PALETTEENTRY
argument_list|)
argument_list|)
decl_stmt|;
name|lpal
operator|->
name|palVersion
operator|=
literal|0x300
expr_stmt|;
name|lpal
operator|->
name|palNumEntries
operator|=
name|c
operator|.
name|size
argument_list|()
expr_stmt|;
name|d
operator|->
name|cmap
operator|.
name|setHandle
argument_list|(
name|CreatePalette
argument_list|(
name|lpal
argument_list|)
argument_list|)
expr_stmt|;
name|free
argument_list|(
name|lpal
argument_list|)
expr_stmt|;
name|d
operator|->
name|updateColormap
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
