begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtOpenGL module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qgraphicssystem_gl_p.h"
end_include
begin_include
include|#
directive|include
file|<QGraphicsView>
end_include
begin_include
include|#
directive|include
file|"private/qpixmap_raster_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qpixmapdata_gl_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qwindowsurface_gl_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qgl_p.h"
end_include
begin_include
include|#
directive|include
file|<private/qwindowsurface_raster_p.h>
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_X11
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_EGL
argument_list|)
end_if
begin_include
include|#
directive|include
file|"private/qpixmapdata_x11gl_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qwindowsurface_x11gl_p.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
end_if
begin_include
include|#
directive|include
file|<QtGui/private/qapplication_p.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|QGL_USE_TEXTURE_POOL
end_ifdef
begin_include
include|#
directive|include
file|"private/qgltexturepool_p.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_function_decl
name|QT_BEGIN_NAMESPACE
specifier|extern
name|QGLWidget
modifier|*
name|qt_gl_getShareWidget
parameter_list|()
function_decl|;
end_function_decl
begin_function
DECL|function|createPixmapData
name|QPixmapData
modifier|*
name|QGLGraphicsSystem
operator|::
name|createPixmapData
parameter_list|(
name|QPixmapData
operator|::
name|PixelType
name|type
parameter_list|)
specifier|const
block|{
return|return
operator|new
name|QGLPixmapData
argument_list|(
name|type
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|createWindowSurface
name|QWindowSurface
modifier|*
name|QGLGraphicsSystem
operator|::
name|createWindowSurface
parameter_list|(
name|QWindow
modifier|*
name|window
parameter_list|)
specifier|const
block|{
ifdef|#
directive|ifdef
name|Q_WS_WIN
comment|// On Windows the QGLWindowSurface class can't handle
comment|// drop shadows and native effects, e.g. fading a menu in/out using
comment|// top level window opacity.
if|if
condition|(
name|window
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Popup
condition|)
return|return
operator|new
name|QRasterWindowSurface
argument_list|(
name|window
argument_list|)
return|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
if|if
condition|(
operator|!
name|QApplicationPrivate
operator|::
name|instance
argument_list|()
operator|->
name|useTranslucentEGLSurfaces
condition|)
block|{
name|QWidgetPrivate
modifier|*
name|d
init|=
name|qt_widget_private
argument_list|(
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|isOpaque
operator|&&
name|widget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_TranslucentBackground
argument_list|)
condition|)
return|return
name|d
operator|->
name|createDefaultWindowSurface_sys
argument_list|()
return|;
block|}
endif|#
directive|endif
return|return
operator|new
name|QGLWindowSurface
argument_list|(
name|window
argument_list|)
return|;
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|QGL_USE_TEXTURE_POOL
end_ifdef
begin_function
DECL|function|releaseCachedResources
name|void
name|QGLGraphicsSystem
operator|::
name|releaseCachedResources
parameter_list|()
block|{
name|QGLTexturePool
operator|::
name|instance
argument_list|()
operator|->
name|hibernate
argument_list|()
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
