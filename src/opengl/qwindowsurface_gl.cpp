begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtOpenGL module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtGui/QApplication>
end_include
begin_include
include|#
directive|include
file|<QtGui/QColormap>
end_include
begin_include
include|#
directive|include
file|<QtGui/QDesktopWidget>
end_include
begin_include
include|#
directive|include
file|<QtGui/QPaintDevice>
end_include
begin_include
include|#
directive|include
file|<QtGui/QWidget>
end_include
begin_include
include|#
directive|include
file|<qglframebufferobject.h>
end_include
begin_include
include|#
directive|include
file|<qglpixelbuffer.h>
end_include
begin_include
include|#
directive|include
file|<qcolormap.h>
end_include
begin_include
include|#
directive|include
file|<qdesktopwidget.h>
end_include
begin_include
include|#
directive|include
file|<private/qwidget_p.h>
end_include
begin_include
include|#
directive|include
file|"qdebug.h"
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_X11
end_ifdef
begin_include
include|#
directive|include
file|<private/qt_x11_p.h>
end_include
begin_include
include|#
directive|include
file|<qx11info_x11.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_OPENGL_ES
end_ifndef
begin_include
include|#
directive|include
file|<GL/glx.h>
end_include
begin_include
include|#
directive|include
file|<X11/Xlib.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//Q_WS_X11
end_comment
begin_include
include|#
directive|include
file|<private/qglextensions_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qwindowsurface_gl_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qgl_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qglpixelbuffer_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qgraphicssystem_gl_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qpaintengineex_opengl2_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qpixmapdata_gl_p.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_OPENGL_ES_2
end_ifndef
begin_include
include|#
directive|include
file|<private/qpaintengine_opengl_p.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|GLX_ARB_multisample
end_ifndef
begin_define
DECL|macro|GLX_SAMPLE_BUFFERS_ARB
define|#
directive|define
name|GLX_SAMPLE_BUFFERS_ARB
value|100000
end_define
begin_define
DECL|macro|GLX_SAMPLES_ARB
define|#
directive|define
name|GLX_SAMPLES_ARB
value|100001
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_EGL
end_ifndef
begin_include
include|#
directive|include
file|<private/qeglcontext_p.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
comment|//
comment|// QGLGraphicsSystem
comment|//
ifdef|#
directive|ifdef
name|Q_WS_WIN
specifier|extern
name|Q_GUI_EXPORT
name|bool
name|qt_win_owndc_required
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_constructor
DECL|function|QGLGraphicsSystem
name|QGLGraphicsSystem
operator|::
name|QGLGraphicsSystem
parameter_list|(
name|bool
name|useX11GL
parameter_list|)
member_init_list|:
name|QGraphicsSystem
argument_list|()
member_init_list|,
name|m_useX11GL
argument_list|(
name|useX11GL
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_X11
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_OPENGL_ES
argument_list|)
comment|// only override the system defaults if the user hasn't already
comment|// picked a visual
if|if
condition|(
name|X11
operator|->
name|visual
operator|==
literal|0
operator|&&
name|X11
operator|->
name|visual_id
operator|==
operator|-
literal|1
operator|&&
name|X11
operator|->
name|visual_class
operator|==
operator|-
literal|1
condition|)
block|{
comment|// find a double buffered, RGBA visual that supports OpenGL
comment|// and set that as the default visual for windows in Qt
name|int
name|i
init|=
literal|0
decl_stmt|;
name|int
name|spec
index|[
literal|16
index|]
decl_stmt|;
name|spec
index|[
name|i
operator|++
index|]
operator|=
name|GLX_RGBA
expr_stmt|;
name|spec
index|[
name|i
operator|++
index|]
operator|=
name|GLX_DOUBLEBUFFER
expr_stmt|;
if|if
condition|(
operator|!
name|qgetenv
argument_list|(
literal|"QT_GL_SWAPBUFFER_PRESERVE"
argument_list|)
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|spec
index|[
name|i
operator|++
index|]
operator|=
name|GLX_DEPTH_SIZE
expr_stmt|;
name|spec
index|[
name|i
operator|++
index|]
operator|=
literal|8
expr_stmt|;
name|spec
index|[
name|i
operator|++
index|]
operator|=
name|GLX_STENCIL_SIZE
expr_stmt|;
name|spec
index|[
name|i
operator|++
index|]
operator|=
literal|8
expr_stmt|;
name|spec
index|[
name|i
operator|++
index|]
operator|=
name|GLX_SAMPLE_BUFFERS_ARB
expr_stmt|;
name|spec
index|[
name|i
operator|++
index|]
operator|=
literal|1
expr_stmt|;
name|spec
index|[
name|i
operator|++
index|]
operator|=
name|GLX_SAMPLES_ARB
expr_stmt|;
name|spec
index|[
name|i
operator|++
index|]
operator|=
literal|4
expr_stmt|;
block|}
name|spec
index|[
name|i
operator|++
index|]
operator|=
name|XNone
expr_stmt|;
name|XVisualInfo
modifier|*
name|vi
init|=
name|glXChooseVisual
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|X11
operator|->
name|defaultScreen
argument_list|,
name|spec
argument_list|)
decl_stmt|;
if|if
condition|(
name|vi
condition|)
block|{
name|X11
operator|->
name|visual_id
operator|=
name|vi
operator|->
name|visualid
expr_stmt|;
name|X11
operator|->
name|visual_class
operator|=
name|vi
operator|->
name|c_class
expr_stmt|;
name|QGLFormat
name|format
decl_stmt|;
name|int
name|res
decl_stmt|;
name|glXGetConfig
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|vi
argument_list|,
name|GLX_LEVEL
argument_list|,
operator|&
name|res
argument_list|)
expr_stmt|;
name|format
operator|.
name|setPlane
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|glXGetConfig
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|vi
argument_list|,
name|GLX_DOUBLEBUFFER
argument_list|,
operator|&
name|res
argument_list|)
expr_stmt|;
name|format
operator|.
name|setDoubleBuffer
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|glXGetConfig
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|vi
argument_list|,
name|GLX_DEPTH_SIZE
argument_list|,
operator|&
name|res
argument_list|)
expr_stmt|;
name|format
operator|.
name|setDepth
argument_list|(
name|res
argument_list|)
expr_stmt|;
if|if
condition|(
name|format
operator|.
name|depth
argument_list|()
condition|)
name|format
operator|.
name|setDepthBufferSize
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|glXGetConfig
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|vi
argument_list|,
name|GLX_RGBA
argument_list|,
operator|&
name|res
argument_list|)
expr_stmt|;
name|format
operator|.
name|setRgba
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|glXGetConfig
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|vi
argument_list|,
name|GLX_RED_SIZE
argument_list|,
operator|&
name|res
argument_list|)
expr_stmt|;
name|format
operator|.
name|setRedBufferSize
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|glXGetConfig
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|vi
argument_list|,
name|GLX_GREEN_SIZE
argument_list|,
operator|&
name|res
argument_list|)
expr_stmt|;
name|format
operator|.
name|setGreenBufferSize
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|glXGetConfig
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|vi
argument_list|,
name|GLX_BLUE_SIZE
argument_list|,
operator|&
name|res
argument_list|)
expr_stmt|;
name|format
operator|.
name|setBlueBufferSize
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|glXGetConfig
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|vi
argument_list|,
name|GLX_ALPHA_SIZE
argument_list|,
operator|&
name|res
argument_list|)
expr_stmt|;
name|format
operator|.
name|setAlpha
argument_list|(
name|res
argument_list|)
expr_stmt|;
if|if
condition|(
name|format
operator|.
name|alpha
argument_list|()
condition|)
name|format
operator|.
name|setAlphaBufferSize
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|glXGetConfig
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|vi
argument_list|,
name|GLX_ACCUM_RED_SIZE
argument_list|,
operator|&
name|res
argument_list|)
expr_stmt|;
name|format
operator|.
name|setAccum
argument_list|(
name|res
argument_list|)
expr_stmt|;
if|if
condition|(
name|format
operator|.
name|accum
argument_list|()
condition|)
name|format
operator|.
name|setAccumBufferSize
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|glXGetConfig
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|vi
argument_list|,
name|GLX_STENCIL_SIZE
argument_list|,
operator|&
name|res
argument_list|)
expr_stmt|;
name|format
operator|.
name|setStencil
argument_list|(
name|res
argument_list|)
expr_stmt|;
if|if
condition|(
name|format
operator|.
name|stencil
argument_list|()
condition|)
name|format
operator|.
name|setStencilBufferSize
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|glXGetConfig
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|vi
argument_list|,
name|GLX_STEREO
argument_list|,
operator|&
name|res
argument_list|)
expr_stmt|;
name|format
operator|.
name|setStereo
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|glXGetConfig
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|vi
argument_list|,
name|GLX_SAMPLE_BUFFERS_ARB
argument_list|,
operator|&
name|res
argument_list|)
expr_stmt|;
name|format
operator|.
name|setSampleBuffers
argument_list|(
name|res
argument_list|)
expr_stmt|;
if|if
condition|(
name|format
operator|.
name|sampleBuffers
argument_list|()
condition|)
block|{
name|glXGetConfig
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|vi
argument_list|,
name|GLX_SAMPLES_ARB
argument_list|,
operator|&
name|res
argument_list|)
expr_stmt|;
name|format
operator|.
name|setSamples
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
name|QGLWindowSurface
operator|::
name|surfaceFormat
operator|=
name|format
expr_stmt|;
name|XFree
argument_list|(
name|vi
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"using visual class %x, id %x\n"
argument_list|,
name|X11
operator|->
name|visual_class
argument_list|,
name|X11
operator|->
name|visual_id
argument_list|)
expr_stmt|;
block|}
block|}
elif|#
directive|elif
name|defined
argument_list|(
name|Q_WS_WIN
argument_list|)
name|QGLWindowSurface
operator|::
name|surfaceFormat
operator|.
name|setDoubleBuffer
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|qt_win_owndc_required
operator|=
literal|true
expr_stmt|;
endif|#
directive|endif
block|}
end_constructor
begin_function_decl
specifier|static
name|void
name|qt_cleanup_gl_share_widget
parameter_list|()
function_decl|;
end_function_decl
begin_comment
comment|//
end_comment
begin_comment
comment|// QGLWindowSurface
end_comment
begin_comment
comment|//
end_comment
begin_class
DECL|class|QGLGlobalShareWidget
class|class
name|QGLGlobalShareWidget
block|{
public|public:
DECL|function|QGLGlobalShareWidget
name|QGLGlobalShareWidget
parameter_list|()
member_init_list|:
name|firstPixmap
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|widgetRefCount
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|widget
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|initializing
argument_list|(
literal|false
argument_list|)
block|{
comment|// ### FIXME - readd the post routine if the qApp is recreated
name|qAddPostRoutine
argument_list|(
name|qt_cleanup_gl_share_widget
argument_list|)
expr_stmt|;
name|created
operator|=
literal|true
expr_stmt|;
block|}
DECL|function|shareWidget
name|QGLWidget
modifier|*
name|shareWidget
parameter_list|()
block|{
if|if
condition|(
operator|!
name|initializing
operator|&&
operator|!
name|widget
operator|&&
operator|!
name|cleanedUp
condition|)
block|{
name|initializing
operator|=
literal|true
expr_stmt|;
name|widget
operator|=
operator|new
name|QGLWidget
argument_list|(
name|QGLFormat
argument_list|(
name|QGL
operator|::
name|SingleBuffer
operator||
name|QGL
operator|::
name|NoDepthBuffer
operator||
name|QGL
operator|::
name|NoStencilBuffer
argument_list|)
argument_list|)
expr_stmt|;
name|widget
operator|->
name|resize
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// We don't need this internal widget to appear in QApplication::topLevelWidgets()
if|if
condition|(
name|QWidgetPrivate
operator|::
name|allWidgets
condition|)
name|QWidgetPrivate
operator|::
name|allWidgets
operator|->
name|remove
argument_list|(
name|widget
argument_list|)
expr_stmt|;
name|initializing
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|widget
return|;
block|}
comment|// destroys the share widget and prevents recreation
DECL|function|cleanup
name|void
name|cleanup
parameter_list|()
block|{
name|QGLWidget
modifier|*
name|w
init|=
name|widget
decl_stmt|;
name|cleanedUp
operator|=
literal|true
expr_stmt|;
name|widget
operator|=
literal|0
expr_stmt|;
operator|delete
name|w
expr_stmt|;
block|}
comment|// destroys the share widget, but allows it to be recreated later on
DECL|function|destroy
name|void
name|destroy
parameter_list|()
block|{
if|if
condition|(
name|cleanedUp
condition|)
return|return;
name|QGLWidget
modifier|*
name|w
init|=
name|widget
decl_stmt|;
comment|// prevent potential recursions
name|cleanedUp
operator|=
literal|true
expr_stmt|;
name|widget
operator|=
literal|0
expr_stmt|;
operator|delete
name|w
expr_stmt|;
name|cleanedUp
operator|=
literal|false
expr_stmt|;
block|}
DECL|member|cleanedUp
specifier|static
name|bool
name|cleanedUp
decl_stmt|;
DECL|member|created
specifier|static
name|bool
name|created
decl_stmt|;
DECL|member|firstPixmap
name|QGLPixmapData
modifier|*
name|firstPixmap
decl_stmt|;
DECL|member|widgetRefCount
name|int
name|widgetRefCount
decl_stmt|;
private|private:
DECL|member|widget
name|QGLWidget
modifier|*
name|widget
decl_stmt|;
DECL|member|initializing
name|bool
name|initializing
decl_stmt|;
block|}
class|;
end_class
begin_decl_stmt
DECL|member|cleanedUp
name|bool
name|QGLGlobalShareWidget
operator|::
name|cleanedUp
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|created
name|bool
name|QGLGlobalShareWidget
operator|::
name|created
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|QGLGlobalShareWidget
argument_list|,
argument|_qt_gl_share_widget
argument_list|)
end_macro
begin_function
DECL|function|qt_cleanup_gl_share_widget
specifier|static
name|void
name|qt_cleanup_gl_share_widget
parameter_list|()
block|{
if|if
condition|(
name|QGLGlobalShareWidget
operator|::
name|created
condition|)
name|_qt_gl_share_widget
argument_list|()
operator|->
name|cleanup
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_gl_share_widget
name|QGLWidget
modifier|*
name|qt_gl_share_widget
parameter_list|()
block|{
if|if
condition|(
name|QGLGlobalShareWidget
operator|::
name|cleanedUp
condition|)
return|return
literal|0
return|;
return|return
name|_qt_gl_share_widget
argument_list|()
operator|->
name|shareWidget
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|qt_destroy_gl_share_widget
name|void
name|qt_destroy_gl_share_widget
parameter_list|()
block|{
if|if
condition|(
name|QGLGlobalShareWidget
operator|::
name|created
condition|)
name|_qt_gl_share_widget
argument_list|()
operator|->
name|destroy
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_gl_share_context
specifier|const
name|QGLContext
modifier|*
name|qt_gl_share_context
parameter_list|()
block|{
name|QGLWidget
modifier|*
name|widget
init|=
name|qt_gl_share_widget
argument_list|()
decl_stmt|;
if|if
condition|(
name|widget
condition|)
return|return
name|widget
operator|->
name|context
argument_list|()
return|;
return|return
literal|0
return|;
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|QGL_USE_TEXTURE_POOL
end_ifdef
begin_function
DECL|function|qt_gl_register_pixmap
name|void
name|qt_gl_register_pixmap
parameter_list|(
name|QGLPixmapData
modifier|*
name|pd
parameter_list|)
block|{
name|QGLGlobalShareWidget
modifier|*
name|shared
init|=
name|_qt_gl_share_widget
argument_list|()
decl_stmt|;
name|pd
operator|->
name|next
operator|=
name|shared
operator|->
name|firstPixmap
expr_stmt|;
name|pd
operator|->
name|prev
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|shared
operator|->
name|firstPixmap
condition|)
name|shared
operator|->
name|firstPixmap
operator|->
name|prev
operator|=
name|pd
expr_stmt|;
name|shared
operator|->
name|firstPixmap
operator|=
name|pd
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_gl_unregister_pixmap
name|void
name|qt_gl_unregister_pixmap
parameter_list|(
name|QGLPixmapData
modifier|*
name|pd
parameter_list|)
block|{
if|if
condition|(
name|pd
operator|->
name|next
condition|)
name|pd
operator|->
name|next
operator|->
name|prev
operator|=
name|pd
operator|->
name|prev
expr_stmt|;
if|if
condition|(
name|pd
operator|->
name|prev
condition|)
block|{
name|pd
operator|->
name|prev
operator|->
name|next
operator|=
name|pd
operator|->
name|next
expr_stmt|;
block|}
else|else
block|{
name|QGLGlobalShareWidget
modifier|*
name|shared
init|=
name|_qt_gl_share_widget
argument_list|()
decl_stmt|;
if|if
condition|(
name|shared
condition|)
name|shared
operator|->
name|firstPixmap
operator|=
name|pd
operator|->
name|next
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|qt_gl_hibernate_pixmaps
name|void
name|qt_gl_hibernate_pixmaps
parameter_list|()
block|{
name|QGLGlobalShareWidget
modifier|*
name|shared
init|=
name|_qt_gl_share_widget
argument_list|()
decl_stmt|;
comment|// Scan all QGLPixmapData objects in the system and hibernate them.
name|QGLPixmapData
modifier|*
name|pd
init|=
name|shared
operator|->
name|firstPixmap
decl_stmt|;
while|while
condition|(
name|pd
operator|!=
literal|0
condition|)
block|{
name|pd
operator|->
name|hibernate
argument_list|()
expr_stmt|;
name|pd
operator|=
name|pd
operator|->
name|next
expr_stmt|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_struct
DECL|struct|QGLWindowSurfacePrivate
struct|struct
name|QGLWindowSurfacePrivate
block|{
DECL|member|fbo
name|QGLFramebufferObject
modifier|*
name|fbo
decl_stmt|;
DECL|member|pb
name|QGLPixelBuffer
modifier|*
name|pb
decl_stmt|;
DECL|member|tex_id
name|GLuint
name|tex_id
decl_stmt|;
DECL|member|pb_tex_id
name|GLuint
name|pb_tex_id
decl_stmt|;
DECL|member|tried_fbo
name|int
name|tried_fbo
range|:
literal|1
decl_stmt|;
DECL|member|tried_pb
name|int
name|tried_pb
range|:
literal|1
decl_stmt|;
DECL|member|destructive_swap_buffers
name|int
name|destructive_swap_buffers
range|:
literal|1
decl_stmt|;
DECL|member|geometry_updated
name|int
name|geometry_updated
range|:
literal|1
decl_stmt|;
DECL|member|did_paint
name|int
name|did_paint
range|:
literal|1
decl_stmt|;
DECL|member|ctx
name|QGLContext
modifier|*
name|ctx
decl_stmt|;
DECL|member|contexts
name|QList
argument_list|<
name|QGLContext
modifier|*
modifier|*
argument_list|>
name|contexts
decl_stmt|;
DECL|member|paintedRegion
name|QRegion
name|paintedRegion
decl_stmt|;
DECL|member|size
name|QSize
name|size
decl_stmt|;
DECL|member|textureSize
name|QSize
name|textureSize
decl_stmt|;
DECL|member|buffers
name|QList
argument_list|<
name|QImage
argument_list|>
name|buffers
decl_stmt|;
DECL|member|glDevice
name|QGLWindowSurfaceGLPaintDevice
name|glDevice
decl_stmt|;
DECL|member|q_ptr
name|QGLWindowSurface
modifier|*
name|q_ptr
decl_stmt|;
DECL|member|swap_region_support
name|bool
name|swap_region_support
decl_stmt|;
block|}
struct|;
end_struct
begin_decl_stmt
DECL|member|surfaceFormat
name|QGLFormat
name|QGLWindowSurface
operator|::
name|surfaceFormat
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|swapBehavior
name|QGLWindowSurface
operator|::
name|SwapMode
name|QGLWindowSurface
operator|::
name|swapBehavior
init|=
name|QGLWindowSurface
operator|::
name|AutomaticSwap
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|endPaint
name|void
name|QGLWindowSurfaceGLPaintDevice
operator|::
name|endPaint
parameter_list|()
block|{
name|glFlush
argument_list|()
expr_stmt|;
name|QGLPaintDevice
operator|::
name|endPaint
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|size
name|QSize
name|QGLWindowSurfaceGLPaintDevice
operator|::
name|size
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|size
return|;
block|}
end_function
begin_function
DECL|function|context
name|QGLContext
modifier|*
name|QGLWindowSurfaceGLPaintDevice
operator|::
name|context
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|ctx
return|;
block|}
end_function
begin_function
DECL|function|metric
name|int
name|QGLWindowSurfaceGLPaintDevice
operator|::
name|metric
parameter_list|(
name|PaintDeviceMetric
name|m
parameter_list|)
specifier|const
block|{
return|return
name|qt_paint_device_metric
argument_list|(
name|d
operator|->
name|q_ptr
operator|->
name|window
argument_list|()
argument_list|,
name|m
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|paintEngine
name|QPaintEngine
modifier|*
name|QGLWindowSurfaceGLPaintDevice
operator|::
name|paintEngine
parameter_list|()
specifier|const
block|{
return|return
name|qt_qgl_paint_engine
argument_list|()
return|;
block|}
end_function
begin_constructor
DECL|function|QGLWindowSurface
name|QGLWindowSurface
operator|::
name|QGLWindowSurface
parameter_list|(
name|QWidget
modifier|*
name|window
parameter_list|)
member_init_list|:
name|QWindowSurface
argument_list|(
name|window
argument_list|)
member_init_list|,
name|d_ptr
argument_list|(
operator|new
name|QGLWindowSurfacePrivate
argument_list|)
block|{
comment|//    Q_ASSERT(window->isTopLevel());
name|d_ptr
operator|->
name|pb
operator|=
literal|0
expr_stmt|;
name|d_ptr
operator|->
name|fbo
operator|=
literal|0
expr_stmt|;
name|d_ptr
operator|->
name|ctx
operator|=
literal|0
expr_stmt|;
name|d_ptr
operator|->
name|tex_id
operator|=
literal|0
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
name|d_ptr
operator|->
name|tried_fbo
operator|=
literal|true
expr_stmt|;
name|d_ptr
operator|->
name|tried_pb
operator|=
literal|true
expr_stmt|;
else|#
directive|else
name|d_ptr
operator|->
name|tried_fbo
operator|=
literal|false
expr_stmt|;
name|d_ptr
operator|->
name|tried_pb
operator|=
literal|false
expr_stmt|;
endif|#
directive|endif
name|d_ptr
operator|->
name|destructive_swap_buffers
operator|=
name|qgetenv
argument_list|(
literal|"QT_GL_SWAPBUFFER_PRESERVE"
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|d_ptr
operator|->
name|glDevice
operator|.
name|d
operator|=
name|d_ptr
expr_stmt|;
name|d_ptr
operator|->
name|q_ptr
operator|=
name|this
expr_stmt|;
name|d_ptr
operator|->
name|geometry_updated
operator|=
literal|false
expr_stmt|;
name|d_ptr
operator|->
name|did_paint
operator|=
literal|false
expr_stmt|;
name|d_ptr
operator|->
name|swap_region_support
operator|=
literal|false
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QGLWindowSurface
name|QGLWindowSurface
operator|::
name|~
name|QGLWindowSurface
parameter_list|()
block|{
if|if
condition|(
name|d_ptr
operator|->
name|ctx
condition|)
name|glDeleteTextures
argument_list|(
literal|1
argument_list|,
operator|&
name|d_ptr
operator|->
name|tex_id
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_WS_QPA
comment|// Dont delete the contexts. Destroying the window does that for us
foreach|foreach
control|(
name|QGLContext
modifier|*
modifier|*
name|ctx
decl|,
name|d_ptr
operator|->
name|contexts
control|)
block|{
operator|delete
operator|*
name|ctx
expr_stmt|;
operator|*
name|ctx
operator|=
literal|0
expr_stmt|;
block|}
endif|#
directive|endif
operator|delete
name|d_ptr
operator|->
name|pb
expr_stmt|;
operator|delete
name|d_ptr
operator|->
name|fbo
expr_stmt|;
operator|delete
name|d_ptr
expr_stmt|;
if|if
condition|(
name|QGLGlobalShareWidget
operator|::
name|cleanedUp
condition|)
return|return;
operator|--
operator|(
name|_qt_gl_share_widget
argument_list|()
operator|->
name|widgetRefCount
operator|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QGL_USE_TEXTURE_POOL
if|if
condition|(
name|_qt_gl_share_widget
argument_list|()
operator|->
name|widgetRefCount
operator|<=
literal|0
condition|)
block|{
comment|// All of the widget window surfaces have been destroyed
comment|// but we still have GL pixmaps active.  Ask them to hibernate
comment|// to free up GPU resources until a widget is shown again.
comment|// This may eventually cause the EGLContext to be destroyed
comment|// because nothing in the system needs a context, which will
comment|// free up even more GPU resources.
name|qt_gl_hibernate_pixmaps
argument_list|()
expr_stmt|;
comment|// Destroy the context if necessary.
if|if
condition|(
operator|!
name|qt_gl_share_widget
argument_list|()
operator|->
name|context
argument_list|()
operator|->
name|isSharing
argument_list|()
condition|)
name|qt_destroy_gl_share_widget
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
comment|// QGL_USE_TEXTURE_POOL
block|}
end_destructor
begin_function
DECL|function|deleted
name|void
name|QGLWindowSurface
operator|::
name|deleted
parameter_list|(
name|QObject
modifier|*
name|object
parameter_list|)
block|{
name|QWidget
modifier|*
name|widget
init|=
name|qobject_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|object
argument_list|)
decl_stmt|;
if|if
condition|(
name|widget
condition|)
block|{
if|if
condition|(
name|widget
operator|==
name|window
argument_list|()
condition|)
block|{
comment|// Make sure that the fbo is destroyed before destroying its context.
operator|delete
name|d_ptr
operator|->
name|fbo
expr_stmt|;
name|d_ptr
operator|->
name|fbo
operator|=
literal|0
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|Q_WS_QPA
comment|//no need to specifically delete the QGLContext as it will be deleted by QWidget
name|QWidgetPrivate
modifier|*
name|widgetPrivate
init|=
name|widget
operator|->
name|d_func
argument_list|()
decl_stmt|;
if|if
condition|(
name|widgetPrivate
operator|->
name|extraData
argument_list|()
condition|)
block|{
union|union
block|{
name|QGLContext
modifier|*
modifier|*
name|ctxPtrPtr
decl_stmt|;
name|void
modifier|*
modifier|*
name|voidPtrPtr
decl_stmt|;
block|}
union|;
name|voidPtrPtr
operator|=
operator|&
name|widgetPrivate
operator|->
name|extraData
argument_list|()
operator|->
name|glContext
expr_stmt|;
name|int
name|index
init|=
name|d_ptr
operator|->
name|contexts
operator|.
name|indexOf
argument_list|(
name|ctxPtrPtr
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
condition|)
block|{
operator|delete
operator|*
name|ctxPtrPtr
expr_stmt|;
operator|*
name|ctxPtrPtr
operator|=
literal|0
expr_stmt|;
name|d_ptr
operator|->
name|contexts
operator|.
name|removeAt
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
endif|#
directive|endif
block|}
block|}
end_function
begin_function
DECL|function|hijackWindow
name|void
name|QGLWindowSurface
operator|::
name|hijackWindow
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
name|QWidgetPrivate
modifier|*
name|widgetPrivate
init|=
name|widget
operator|->
name|d_func
argument_list|()
decl_stmt|;
name|widgetPrivate
operator|->
name|createExtra
argument_list|()
expr_stmt|;
if|if
condition|(
name|widgetPrivate
operator|->
name|extraData
argument_list|()
operator|->
name|glContext
condition|)
return|return;
name|QGLContext
modifier|*
name|ctx
init|=
name|NULL
decl_stmt|;
comment|// For translucent top-level widgets we need alpha in the format.
if|if
condition|(
name|widget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_TranslucentBackground
argument_list|)
condition|)
block|{
name|QGLFormat
name|modFormat
argument_list|(
name|surfaceFormat
argument_list|)
decl_stmt|;
name|modFormat
operator|.
name|setSampleBuffers
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|modFormat
operator|.
name|setSamples
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|modFormat
operator|.
name|setAlpha
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ctx
operator|=
operator|new
name|QGLContext
argument_list|(
name|modFormat
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
else|else
name|ctx
operator|=
operator|new
name|QGLContext
argument_list|(
name|surfaceFormat
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|ctx
operator|->
name|create
argument_list|(
name|qt_gl_share_context
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|widget
operator|!=
name|qt_gl_share_widget
argument_list|()
condition|)
operator|++
operator|(
name|_qt_gl_share_widget
argument_list|()
operator|->
name|widgetRefCount
operator|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_EGL
specifier|static
name|bool
name|checkedForNOKSwapRegion
init|=
literal|false
decl_stmt|;
specifier|static
name|bool
name|haveNOKSwapRegion
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|checkedForNOKSwapRegion
condition|)
block|{
name|haveNOKSwapRegion
operator|=
name|QEgl
operator|::
name|hasExtension
argument_list|(
literal|"EGL_NOK_swap_region2"
argument_list|)
expr_stmt|;
name|checkedForNOKSwapRegion
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|haveNOKSwapRegion
condition|)
name|qDebug
argument_list|()
operator|<<
literal|"Found EGL_NOK_swap_region2 extension. Using partial updates."
expr_stmt|;
block|}
name|d_ptr
operator|->
name|destructive_swap_buffers
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|ctx
operator|->
name|d_func
argument_list|()
operator|->
name|eglContext
operator|->
name|configAttrib
argument_list|(
name|EGL_SURFACE_TYPE
argument_list|)
operator|&
name|EGL_SWAP_BEHAVIOR_PRESERVED_BIT
condition|)
block|{
name|EGLint
name|swapBehavior
decl_stmt|;
if|if
condition|(
name|eglQuerySurface
argument_list|(
name|ctx
operator|->
name|d_func
argument_list|()
operator|->
name|eglContext
operator|->
name|display
argument_list|()
argument_list|,
name|ctx
operator|->
name|d_func
argument_list|()
operator|->
name|eglSurface
argument_list|,
name|EGL_SWAP_BEHAVIOR
argument_list|,
operator|&
name|swapBehavior
argument_list|)
condition|)
block|{
name|d_ptr
operator|->
name|destructive_swap_buffers
operator|=
operator|(
name|swapBehavior
operator|!=
name|EGL_BUFFER_PRESERVED
operator|)
expr_stmt|;
block|}
block|}
name|d_ptr
operator|->
name|swap_region_support
operator|=
name|haveNOKSwapRegion
expr_stmt|;
endif|#
directive|endif
name|widgetPrivate
operator|->
name|extraData
argument_list|()
operator|->
name|glContext
operator|=
name|ctx
expr_stmt|;
union|union
block|{
name|QGLContext
modifier|*
modifier|*
name|ctxPtrPtr
decl_stmt|;
name|void
modifier|*
modifier|*
name|voidPtrPtr
decl_stmt|;
block|}
union|;
name|connect
argument_list|(
name|widget
argument_list|,
name|SIGNAL
argument_list|(
name|destroyed
argument_list|(
name|QObject
operator|*
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|deleted
argument_list|(
name|QObject
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|voidPtrPtr
operator|=
operator|&
name|widgetPrivate
operator|->
name|extraData
argument_list|()
operator|->
name|glContext
expr_stmt|;
name|d_ptr
operator|->
name|contexts
operator|<<
name|ctxPtrPtr
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_OS_SYMBIAN
name|qDebug
argument_list|()
operator|<<
literal|"hijackWindow() context created for"
operator|<<
name|widget
operator|<<
name|d_ptr
operator|->
name|contexts
operator|.
name|size
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|context
name|QGLContext
modifier|*
name|QGLWindowSurface
operator|::
name|context
parameter_list|()
specifier|const
block|{
return|return
name|d_ptr
operator|->
name|ctx
return|;
block|}
end_function
begin_function
DECL|function|paintDevice
name|QPaintDevice
modifier|*
name|QGLWindowSurface
operator|::
name|paintDevice
parameter_list|()
block|{
name|updateGeometry
argument_list|()
expr_stmt|;
if|if
condition|(
name|d_ptr
operator|->
name|pb
condition|)
return|return
name|d_ptr
operator|->
name|pb
return|;
if|if
condition|(
name|d_ptr
operator|->
name|ctx
condition|)
return|return
operator|&
name|d_ptr
operator|->
name|glDevice
return|;
name|QGLContext
modifier|*
name|ctx
init|=
cast|reinterpret_cast
argument_list|<
name|QGLContext
operator|*
argument_list|>
argument_list|(
name|window
argument_list|()
operator|->
name|d_func
argument_list|()
operator|->
name|extraData
argument_list|()
operator|->
name|glContext
argument_list|)
decl_stmt|;
name|ctx
operator|->
name|makeCurrent
argument_list|()
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|d_ptr
operator|->
name|fbo
argument_list|)
expr_stmt|;
return|return
name|d_ptr
operator|->
name|fbo
return|;
block|}
end_function
begin_function_decl
specifier|static
name|void
name|drawTexture
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|rect
parameter_list|,
name|GLuint
name|tex_id
parameter_list|,
specifier|const
name|QSize
modifier|&
name|texSize
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|src
init|=
name|QRectF
argument_list|()
parameter_list|)
function_decl|;
end_function_decl
begin_function
DECL|function|beginPaint
name|void
name|QGLWindowSurface
operator|::
name|beginPaint
parameter_list|(
specifier|const
name|QRegion
modifier|&
parameter_list|)
block|{
name|d_ptr
operator|->
name|did_paint
operator|=
literal|true
expr_stmt|;
name|updateGeometry
argument_list|()
expr_stmt|;
name|int
name|clearFlags
init|=
literal|0
decl_stmt|;
name|QGLContext
modifier|*
name|ctx
init|=
cast|reinterpret_cast
argument_list|<
name|QGLContext
operator|*
argument_list|>
argument_list|(
name|window
argument_list|()
operator|->
name|d_func
argument_list|()
operator|->
name|extraData
argument_list|()
operator|->
name|glContext
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ctx
condition|)
return|return;
if|if
condition|(
name|ctx
operator|->
name|d_func
argument_list|()
operator|->
name|workaround_needsFullClearOnEveryFrame
condition|)
name|clearFlags
operator|=
name|GL_COLOR_BUFFER_BIT
operator||
name|GL_DEPTH_BUFFER_BIT
operator||
name|GL_STENCIL_BUFFER_BIT
expr_stmt|;
elseif|else
if|if
condition|(
name|ctx
operator|->
name|format
argument_list|()
operator|.
name|alpha
argument_list|()
condition|)
name|clearFlags
operator|=
name|GL_COLOR_BUFFER_BIT
expr_stmt|;
if|if
condition|(
name|clearFlags
condition|)
block|{
if|if
condition|(
name|d_ptr
operator|->
name|fbo
condition|)
name|d_ptr
operator|->
name|fbo
operator|->
name|bind
argument_list|()
expr_stmt|;
name|glClearColor
argument_list|(
literal|0.0
argument_list|,
literal|0.0
argument_list|,
literal|0.0
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
name|glClear
argument_list|(
name|clearFlags
argument_list|)
expr_stmt|;
if|if
condition|(
name|d_ptr
operator|->
name|fbo
condition|)
name|d_ptr
operator|->
name|fbo
operator|->
name|release
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|endPaint
name|void
name|QGLWindowSurface
operator|::
name|endPaint
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|rgn
parameter_list|)
block|{
if|if
condition|(
name|context
argument_list|()
condition|)
name|d_ptr
operator|->
name|paintedRegion
operator||=
name|rgn
expr_stmt|;
name|d_ptr
operator|->
name|buffers
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|blitTexture
specifier|static
name|void
name|blitTexture
parameter_list|(
name|QGLContext
modifier|*
name|ctx
parameter_list|,
name|GLuint
name|texture
parameter_list|,
specifier|const
name|QSize
modifier|&
name|viewport
parameter_list|,
specifier|const
name|QSize
modifier|&
name|texSize
parameter_list|,
specifier|const
name|QRect
modifier|&
name|targetRect
parameter_list|,
specifier|const
name|QRect
modifier|&
name|sourceRect
parameter_list|)
block|{
name|glDisable
argument_list|(
name|GL_DEPTH_TEST
argument_list|)
expr_stmt|;
name|glDisable
argument_list|(
name|GL_SCISSOR_TEST
argument_list|)
expr_stmt|;
name|glDisable
argument_list|(
name|GL_BLEND
argument_list|)
expr_stmt|;
name|glViewport
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|viewport
operator|.
name|width
argument_list|()
argument_list|,
name|viewport
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|QGLShaderProgram
modifier|*
name|blitProgram
init|=
name|QGLEngineSharedShaders
operator|::
name|shadersForContext
argument_list|(
name|ctx
argument_list|)
operator|->
name|blitProgram
argument_list|()
decl_stmt|;
name|blitProgram
operator|->
name|bind
argument_list|()
expr_stmt|;
name|blitProgram
operator|->
name|setUniformValue
argument_list|(
literal|"imageTexture"
argument_list|,
literal|0
comment|/*QT_IMAGE_TEXTURE_UNIT*/
argument_list|)
expr_stmt|;
comment|// The shader manager's blit program does not multiply the
comment|// vertices by the pmv matrix, so we need to do the effect
comment|// of the orthographic projection here ourselves.
name|QRectF
name|r
decl_stmt|;
name|qreal
name|w
init|=
name|viewport
operator|.
name|width
argument_list|()
decl_stmt|;
name|qreal
name|h
init|=
name|viewport
operator|.
name|height
argument_list|()
decl_stmt|;
name|r
operator|.
name|setLeft
argument_list|(
operator|(
name|targetRect
operator|.
name|left
argument_list|()
operator|/
name|w
operator|)
operator|*
literal|2.0f
operator|-
literal|1.0f
argument_list|)
expr_stmt|;
if|if
condition|(
name|targetRect
operator|.
name|right
argument_list|()
operator|==
operator|(
name|viewport
operator|.
name|width
argument_list|()
operator|-
literal|1
operator|)
condition|)
name|r
operator|.
name|setRight
argument_list|(
literal|1.0f
argument_list|)
expr_stmt|;
else|else
name|r
operator|.
name|setRight
argument_list|(
operator|(
name|targetRect
operator|.
name|right
argument_list|()
operator|/
name|w
operator|)
operator|*
literal|2.0f
operator|-
literal|1.0f
argument_list|)
expr_stmt|;
name|r
operator|.
name|setBottom
argument_list|(
operator|(
name|targetRect
operator|.
name|top
argument_list|()
operator|/
name|h
operator|)
operator|*
literal|2.0f
operator|-
literal|1.0f
argument_list|)
expr_stmt|;
if|if
condition|(
name|targetRect
operator|.
name|bottom
argument_list|()
operator|==
operator|(
name|viewport
operator|.
name|height
argument_list|()
operator|-
literal|1
operator|)
condition|)
name|r
operator|.
name|setTop
argument_list|(
literal|1.0f
argument_list|)
expr_stmt|;
else|else
name|r
operator|.
name|setTop
argument_list|(
operator|(
name|targetRect
operator|.
name|bottom
argument_list|()
operator|/
name|w
operator|)
operator|*
literal|2.0f
operator|-
literal|1.0f
argument_list|)
expr_stmt|;
name|drawTexture
argument_list|(
name|r
argument_list|,
name|texture
argument_list|,
name|texSize
argument_list|,
name|sourceRect
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|flush
name|void
name|QGLWindowSurface
operator|::
name|flush
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|,
specifier|const
name|QRegion
modifier|&
name|rgn
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|offset
parameter_list|)
block|{
comment|//### Find out why d_ptr->geometry_updated isn't always false.
comment|// flush() should not be called when d_ptr->geometry_updated is true. It assumes that either
comment|// d_ptr->fbo or d_ptr->pb is allocated and has the correct size.
if|if
condition|(
name|d_ptr
operator|->
name|geometry_updated
condition|)
return|return;
comment|// did_paint is set to true in ::beginPaint. ::beginPaint means that we
comment|// at least cleared the background (= painted something). In EGL API it's a
comment|// mistake to call swapBuffers if nothing was painted unless
comment|// EGL_BUFFER_PRESERVED is set. This check protects the flush func from
comment|// being executed if it's for nothing.
if|if
condition|(
operator|!
name|d_ptr
operator|->
name|destructive_swap_buffers
operator|&&
operator|!
name|d_ptr
operator|->
name|did_paint
condition|)
return|return;
ifdef|#
directive|ifdef
name|Q_OS_SYMBIAN
if|if
condition|(
name|window
argument_list|()
operator|!=
name|widget
condition|)
block|{
comment|// For performance reasons we don't support
comment|// flushing native child widgets on Symbian.
comment|// It breaks overlapping native child widget
comment|// rendering in some cases but we prefer performance.
return|return;
block|}
endif|#
directive|endif
name|QWidget
modifier|*
name|parent
init|=
name|widget
operator|->
name|internalWinId
argument_list|()
condition|?
name|widget
else|:
name|widget
operator|->
name|nativeParentWidget
argument_list|()
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|parent
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_WS_QPA
argument_list|)
if|if
condition|(
operator|!
name|geometry
argument_list|()
operator|.
name|isValid
argument_list|()
condition|)
return|return;
else|#
directive|else
if|if
condition|(
operator|!
name|size
argument_list|()
operator|.
name|isValid
argument_list|()
condition|)
return|return;
endif|#
directive|endif
comment|// Needed to support native child-widgets...
name|hijackWindow
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|QRect
name|br
init|=
name|rgn
operator|.
name|boundingRect
argument_list|()
operator|.
name|translated
argument_list|(
name|offset
argument_list|)
decl_stmt|;
name|br
operator|=
name|br
operator|.
name|intersected
argument_list|(
name|window
argument_list|()
operator|->
name|rect
argument_list|()
argument_list|)
expr_stmt|;
name|QPoint
name|wOffset
init|=
name|qt_qwidget_data
argument_list|(
name|parent
argument_list|)
operator|->
name|wrect
operator|.
name|topLeft
argument_list|()
decl_stmt|;
name|QRect
name|rect
init|=
name|br
operator|.
name|translated
argument_list|(
operator|-
name|offset
operator|-
name|wOffset
argument_list|)
decl_stmt|;
specifier|const
name|GLenum
name|target
init|=
name|GL_TEXTURE_2D
decl_stmt|;
name|Q_UNUSED
argument_list|(
name|target
argument_list|)
expr_stmt|;
if|if
condition|(
name|QGLWindowSurface
operator|::
name|swapBehavior
operator|==
name|QGLWindowSurface
operator|::
name|KillSwap
condition|)
return|return;
if|if
condition|(
name|context
argument_list|()
condition|)
block|{
name|context
argument_list|()
operator|->
name|makeCurrent
argument_list|()
expr_stmt|;
if|if
condition|(
name|context
argument_list|()
operator|->
name|format
argument_list|()
operator|.
name|doubleBuffer
argument_list|()
condition|)
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
if|if
condition|(
name|d_ptr
operator|->
name|destructive_swap_buffers
condition|)
block|{
name|glBindTexture
argument_list|(
name|target
argument_list|,
name|d_ptr
operator|->
name|tex_id
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|QRect
argument_list|>
name|rects
init|=
name|d_ptr
operator|->
name|paintedRegion
operator|.
name|rects
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rects
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QRect
name|br
init|=
name|rects
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|br
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
specifier|const
name|uint
name|bottom
init|=
name|window
argument_list|()
operator|->
name|height
argument_list|()
operator|-
operator|(
name|br
operator|.
name|y
argument_list|()
operator|+
name|br
operator|.
name|height
argument_list|()
operator|)
decl_stmt|;
name|glCopyTexSubImage2D
argument_list|(
name|target
argument_list|,
literal|0
argument_list|,
name|br
operator|.
name|x
argument_list|()
argument_list|,
name|bottom
argument_list|,
name|br
operator|.
name|x
argument_list|()
argument_list|,
name|bottom
argument_list|,
name|br
operator|.
name|width
argument_list|()
argument_list|,
name|br
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|glBindTexture
argument_list|(
name|target
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QRegion
name|dirtyRegion
init|=
name|QRegion
argument_list|(
name|window
argument_list|()
operator|->
name|rect
argument_list|()
argument_list|)
operator|-
name|d_ptr
operator|->
name|paintedRegion
decl_stmt|;
if|if
condition|(
operator|!
name|dirtyRegion
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|glMatrixMode
argument_list|(
name|GL_MODELVIEW
argument_list|)
expr_stmt|;
name|glLoadIdentity
argument_list|()
expr_stmt|;
name|glMatrixMode
argument_list|(
name|GL_PROJECTION
argument_list|)
expr_stmt|;
name|glLoadIdentity
argument_list|()
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_OPENGL_ES
name|glOrtho
argument_list|(
literal|0
argument_list|,
name|window
argument_list|()
operator|->
name|width
argument_list|()
argument_list|,
name|window
argument_list|()
operator|->
name|height
argument_list|()
argument_list|,
literal|0
argument_list|,
operator|-
literal|999999
argument_list|,
literal|999999
argument_list|)
expr_stmt|;
else|#
directive|else
name|glOrthof
argument_list|(
literal|0
argument_list|,
name|window
argument_list|()
operator|->
name|width
argument_list|()
argument_list|,
name|window
argument_list|()
operator|->
name|height
argument_list|()
argument_list|,
literal|0
argument_list|,
operator|-
literal|999999
argument_list|,
literal|999999
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|glViewport
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|window
argument_list|()
operator|->
name|width
argument_list|()
argument_list|,
name|window
argument_list|()
operator|->
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|QRect
argument_list|>
name|rects
init|=
name|dirtyRegion
operator|.
name|rects
argument_list|()
decl_stmt|;
name|glColor4f
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rects
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QRect
name|rect
init|=
name|rects
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|rect
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|drawTexture
argument_list|(
name|rect
argument_list|,
name|d_ptr
operator|->
name|tex_id
argument_list|,
name|window
argument_list|()
operator|->
name|size
argument_list|()
argument_list|,
name|rect
argument_list|)
expr_stmt|;
block|}
block|}
block|}
endif|#
directive|endif
name|bool
name|doingPartialUpdate
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|d_ptr
operator|->
name|swap_region_support
condition|)
block|{
if|if
condition|(
name|QGLWindowSurface
operator|::
name|swapBehavior
operator|==
name|QGLWindowSurface
operator|::
name|AutomaticSwap
condition|)
name|doingPartialUpdate
operator|=
name|br
operator|.
name|width
argument_list|()
operator|*
name|br
operator|.
name|height
argument_list|()
operator|<
name|parent
operator|->
name|geometry
argument_list|()
operator|.
name|width
argument_list|()
operator|*
name|parent
operator|->
name|geometry
argument_list|()
operator|.
name|height
argument_list|()
operator|*
literal|0.2
expr_stmt|;
elseif|else
if|if
condition|(
name|QGLWindowSurface
operator|::
name|swapBehavior
operator|==
name|QGLWindowSurface
operator|::
name|AlwaysPartialSwap
condition|)
name|doingPartialUpdate
operator|=
literal|true
expr_stmt|;
block|}
name|QGLContext
modifier|*
name|ctx
init|=
cast|reinterpret_cast
argument_list|<
name|QGLContext
operator|*
argument_list|>
argument_list|(
name|parent
operator|->
name|d_func
argument_list|()
operator|->
name|extraData
argument_list|()
operator|->
name|glContext
argument_list|)
decl_stmt|;
if|if
condition|(
name|widget
operator|!=
name|window
argument_list|()
condition|)
block|{
if|if
condition|(
name|initializeOffscreenTexture
argument_list|(
name|window
argument_list|()
operator|->
name|size
argument_list|()
argument_list|)
condition|)
name|qWarning
argument_list|()
operator|<<
literal|"QGLWindowSurface: Flushing to native child widget, may lead to significant performance loss"
expr_stmt|;
name|glBindTexture
argument_list|(
name|target
argument_list|,
name|d_ptr
operator|->
name|tex_id
argument_list|)
expr_stmt|;
specifier|const
name|uint
name|bottom
init|=
name|window
argument_list|()
operator|->
name|height
argument_list|()
operator|-
operator|(
name|br
operator|.
name|y
argument_list|()
operator|+
name|br
operator|.
name|height
argument_list|()
operator|)
decl_stmt|;
name|glCopyTexSubImage2D
argument_list|(
name|target
argument_list|,
literal|0
argument_list|,
name|br
operator|.
name|x
argument_list|()
argument_list|,
name|bottom
argument_list|,
name|br
operator|.
name|x
argument_list|()
argument_list|,
name|bottom
argument_list|,
name|br
operator|.
name|width
argument_list|()
argument_list|,
name|br
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|glBindTexture
argument_list|(
name|target
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ctx
operator|->
name|makeCurrent
argument_list|()
expr_stmt|;
if|if
condition|(
name|doingPartialUpdate
condition|)
name|blitTexture
argument_list|(
name|ctx
argument_list|,
name|d_ptr
operator|->
name|tex_id
argument_list|,
name|parent
operator|->
name|size
argument_list|()
argument_list|,
name|window
argument_list|()
operator|->
name|size
argument_list|()
argument_list|,
name|rect
argument_list|,
name|br
argument_list|)
expr_stmt|;
else|else
name|blitTexture
argument_list|(
name|ctx
argument_list|,
name|d_ptr
operator|->
name|tex_id
argument_list|,
name|parent
operator|->
name|size
argument_list|()
argument_list|,
name|window
argument_list|()
operator|->
name|size
argument_list|()
argument_list|,
name|parent
operator|->
name|rect
argument_list|()
argument_list|,
name|parent
operator|->
name|rect
argument_list|()
operator|.
name|translated
argument_list|(
name|offset
operator|+
name|wOffset
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|doingPartialUpdate
condition|)
name|ctx
operator|->
name|d_func
argument_list|()
operator|->
name|swapRegion
argument_list|(
name|br
argument_list|)
expr_stmt|;
else|else
name|ctx
operator|->
name|swapBuffers
argument_list|()
expr_stmt|;
name|d_ptr
operator|->
name|paintedRegion
operator|=
name|QRegion
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|glFlush
argument_list|()
expr_stmt|;
block|}
return|return;
block|}
name|QGLContext
modifier|*
name|previous_ctx
init|=
cast|const_cast
argument_list|<
name|QGLContext
operator|*
argument_list|>
argument_list|(
name|QGLContext
operator|::
name|currentContext
argument_list|()
argument_list|)
decl_stmt|;
name|QGLContext
modifier|*
name|ctx
init|=
cast|reinterpret_cast
argument_list|<
name|QGLContext
operator|*
argument_list|>
argument_list|(
name|parent
operator|->
name|d_func
argument_list|()
operator|->
name|extraData
argument_list|()
operator|->
name|glContext
argument_list|)
decl_stmt|;
comment|// QPainter::end() should have unbound the fbo, otherwise something is very wrong...
name|Q_ASSERT
argument_list|(
operator|!
name|d_ptr
operator|->
name|fbo
operator|||
operator|!
name|d_ptr
operator|->
name|fbo
operator|->
name|isBound
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ctx
operator|!=
name|previous_ctx
condition|)
block|{
name|ctx
operator|->
name|makeCurrent
argument_list|()
expr_stmt|;
block|}
name|QSize
name|size
init|=
name|widget
operator|->
name|rect
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|d_ptr
operator|->
name|destructive_swap_buffers
operator|&&
name|ctx
operator|->
name|format
argument_list|()
operator|.
name|doubleBuffer
argument_list|()
condition|)
block|{
name|rect
operator|=
name|parent
operator|->
name|rect
argument_list|()
expr_stmt|;
name|br
operator|=
name|rect
operator|.
name|translated
argument_list|(
name|wOffset
operator|+
name|offset
argument_list|)
expr_stmt|;
name|size
operator|=
name|parent
operator|->
name|size
argument_list|()
expr_stmt|;
block|}
name|glDisable
argument_list|(
name|GL_SCISSOR_TEST
argument_list|)
expr_stmt|;
if|if
condition|(
name|d_ptr
operator|->
name|fbo
operator|&&
operator|(
name|QGLExtensions
operator|::
name|glExtensions
argument_list|()
operator|&
name|QGLExtensions
operator|::
name|FramebufferBlit
operator|)
condition|)
block|{
specifier|const
name|int
name|h
init|=
name|d_ptr
operator|->
name|fbo
operator|->
name|height
argument_list|()
decl_stmt|;
specifier|const
name|int
name|sx0
init|=
name|br
operator|.
name|left
argument_list|()
decl_stmt|;
specifier|const
name|int
name|sx1
init|=
name|br
operator|.
name|left
argument_list|()
operator|+
name|br
operator|.
name|width
argument_list|()
decl_stmt|;
specifier|const
name|int
name|sy0
init|=
name|h
operator|-
operator|(
name|br
operator|.
name|top
argument_list|()
operator|+
name|br
operator|.
name|height
argument_list|()
operator|)
decl_stmt|;
specifier|const
name|int
name|sy1
init|=
name|h
operator|-
name|br
operator|.
name|top
argument_list|()
decl_stmt|;
specifier|const
name|int
name|tx0
init|=
name|rect
operator|.
name|left
argument_list|()
decl_stmt|;
specifier|const
name|int
name|tx1
init|=
name|rect
operator|.
name|left
argument_list|()
operator|+
name|rect
operator|.
name|width
argument_list|()
decl_stmt|;
specifier|const
name|int
name|ty0
init|=
name|parent
operator|->
name|height
argument_list|()
operator|-
operator|(
name|rect
operator|.
name|top
argument_list|()
operator|+
name|rect
operator|.
name|height
argument_list|()
operator|)
decl_stmt|;
specifier|const
name|int
name|ty1
init|=
name|parent
operator|->
name|height
argument_list|()
operator|-
name|rect
operator|.
name|top
argument_list|()
decl_stmt|;
if|if
condition|(
name|window
argument_list|()
operator|==
name|parent
operator|||
name|d_ptr
operator|->
name|fbo
operator|->
name|format
argument_list|()
operator|.
name|samples
argument_list|()
operator|<=
literal|1
condition|)
block|{
if|if
condition|(
name|ctx
operator|->
name|d_ptr
operator|->
name|current_fbo
operator|!=
literal|0
condition|)
name|glBindFramebuffer
argument_list|(
name|GL_DRAW_FRAMEBUFFER_EXT
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|glBindFramebuffer
argument_list|(
name|GL_READ_FRAMEBUFFER_EXT
argument_list|,
name|d_ptr
operator|->
name|fbo
operator|->
name|handle
argument_list|()
argument_list|)
expr_stmt|;
name|glBlitFramebufferEXT
argument_list|(
name|sx0
argument_list|,
name|sy0
argument_list|,
name|sx1
argument_list|,
name|sy1
argument_list|,
name|tx0
argument_list|,
name|ty0
argument_list|,
name|tx1
argument_list|,
name|ty1
argument_list|,
name|GL_COLOR_BUFFER_BIT
argument_list|,
name|GL_NEAREST
argument_list|)
expr_stmt|;
name|glBindFramebuffer
argument_list|(
name|GL_READ_FRAMEBUFFER_EXT
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// can't do sub-region blits with multisample FBOs
name|QGLFramebufferObject
modifier|*
name|temp
init|=
name|qgl_fbo_pool
argument_list|()
operator|->
name|acquire
argument_list|(
name|d_ptr
operator|->
name|fbo
operator|->
name|size
argument_list|()
argument_list|,
name|QGLFramebufferObjectFormat
argument_list|()
argument_list|)
decl_stmt|;
name|glBindFramebuffer
argument_list|(
name|GL_DRAW_FRAMEBUFFER_EXT
argument_list|,
name|temp
operator|->
name|handle
argument_list|()
argument_list|)
expr_stmt|;
name|glBindFramebuffer
argument_list|(
name|GL_READ_FRAMEBUFFER_EXT
argument_list|,
name|d_ptr
operator|->
name|fbo
operator|->
name|handle
argument_list|()
argument_list|)
expr_stmt|;
name|glBlitFramebufferEXT
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|d_ptr
operator|->
name|fbo
operator|->
name|width
argument_list|()
argument_list|,
name|d_ptr
operator|->
name|fbo
operator|->
name|height
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|d_ptr
operator|->
name|fbo
operator|->
name|width
argument_list|()
argument_list|,
name|d_ptr
operator|->
name|fbo
operator|->
name|height
argument_list|()
argument_list|,
name|GL_COLOR_BUFFER_BIT
argument_list|,
name|GL_NEAREST
argument_list|)
expr_stmt|;
name|glBindFramebuffer
argument_list|(
name|GL_READ_FRAMEBUFFER_EXT
argument_list|,
name|temp
operator|->
name|handle
argument_list|()
argument_list|)
expr_stmt|;
name|glBindFramebuffer
argument_list|(
name|GL_DRAW_FRAMEBUFFER_EXT
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|glBlitFramebufferEXT
argument_list|(
name|sx0
argument_list|,
name|sy0
argument_list|,
name|sx1
argument_list|,
name|sy1
argument_list|,
name|tx0
argument_list|,
name|ty0
argument_list|,
name|tx1
argument_list|,
name|ty1
argument_list|,
name|GL_COLOR_BUFFER_BIT
argument_list|,
name|GL_NEAREST
argument_list|)
expr_stmt|;
name|glBindFramebuffer
argument_list|(
name|GL_READ_FRAMEBUFFER_EXT
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|qgl_fbo_pool
argument_list|()
operator|->
name|release
argument_list|(
name|temp
argument_list|)
expr_stmt|;
block|}
name|ctx
operator|->
name|d_ptr
operator|->
name|current_fbo
operator|=
literal|0
expr_stmt|;
block|}
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
else|else
block|{
name|GLuint
name|texture
decl_stmt|;
if|if
condition|(
name|d_ptr
operator|->
name|fbo
condition|)
block|{
name|texture
operator|=
name|d_ptr
operator|->
name|fbo
operator|->
name|texture
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|d_ptr
operator|->
name|pb
operator|->
name|makeCurrent
argument_list|()
expr_stmt|;
name|glBindTexture
argument_list|(
name|target
argument_list|,
name|d_ptr
operator|->
name|pb_tex_id
argument_list|)
expr_stmt|;
specifier|const
name|uint
name|bottom
init|=
name|window
argument_list|()
operator|->
name|height
argument_list|()
operator|-
operator|(
name|br
operator|.
name|y
argument_list|()
operator|+
name|br
operator|.
name|height
argument_list|()
operator|)
decl_stmt|;
name|glCopyTexSubImage2D
argument_list|(
name|target
argument_list|,
literal|0
argument_list|,
name|br
operator|.
name|x
argument_list|()
argument_list|,
name|bottom
argument_list|,
name|br
operator|.
name|x
argument_list|()
argument_list|,
name|bottom
argument_list|,
name|br
operator|.
name|width
argument_list|()
argument_list|,
name|br
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|texture
operator|=
name|d_ptr
operator|->
name|pb_tex_id
expr_stmt|;
name|glBindTexture
argument_list|(
name|target
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|glDisable
argument_list|(
name|GL_DEPTH_TEST
argument_list|)
expr_stmt|;
if|if
condition|(
name|d_ptr
operator|->
name|fbo
condition|)
block|{
name|d_ptr
operator|->
name|fbo
operator|->
name|release
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|ctx
operator|->
name|makeCurrent
argument_list|()
expr_stmt|;
block|}
name|glMatrixMode
argument_list|(
name|GL_MODELVIEW
argument_list|)
expr_stmt|;
name|glLoadIdentity
argument_list|()
expr_stmt|;
name|glMatrixMode
argument_list|(
name|GL_PROJECTION
argument_list|)
expr_stmt|;
name|glLoadIdentity
argument_list|()
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_OPENGL_ES
name|glOrtho
argument_list|(
literal|0
argument_list|,
name|size
operator|.
name|width
argument_list|()
argument_list|,
name|size
operator|.
name|height
argument_list|()
argument_list|,
literal|0
argument_list|,
operator|-
literal|999999
argument_list|,
literal|999999
argument_list|)
expr_stmt|;
else|#
directive|else
name|glOrthof
argument_list|(
literal|0
argument_list|,
name|size
operator|.
name|width
argument_list|()
argument_list|,
name|size
operator|.
name|height
argument_list|()
argument_list|,
literal|0
argument_list|,
operator|-
literal|999999
argument_list|,
literal|999999
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|glViewport
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|size
operator|.
name|width
argument_list|()
argument_list|,
name|size
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|glColor4f
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|drawTexture
argument_list|(
name|rect
argument_list|,
name|texture
argument_list|,
name|window
argument_list|()
operator|->
name|size
argument_list|()
argument_list|,
name|br
argument_list|)
expr_stmt|;
if|if
condition|(
name|d_ptr
operator|->
name|fbo
condition|)
name|d_ptr
operator|->
name|fbo
operator|->
name|bind
argument_list|()
expr_stmt|;
block|}
else|#
directive|else
comment|// OpenGL/ES 2.0 version of the fbo blit.
elseif|else
if|if
condition|(
name|d_ptr
operator|->
name|fbo
condition|)
block|{
name|Q_UNUSED
argument_list|(
name|target
argument_list|)
expr_stmt|;
if|if
condition|(
name|d_ptr
operator|->
name|fbo
operator|->
name|isBound
argument_list|()
condition|)
name|d_ptr
operator|->
name|fbo
operator|->
name|release
argument_list|()
expr_stmt|;
name|blitTexture
argument_list|(
name|ctx
argument_list|,
name|d_ptr
operator|->
name|fbo
operator|->
name|texture
argument_list|()
argument_list|,
name|size
argument_list|,
name|window
argument_list|()
operator|->
name|size
argument_list|()
argument_list|,
name|rect
argument_list|,
name|br
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
name|ctx
operator|->
name|format
argument_list|()
operator|.
name|doubleBuffer
argument_list|()
condition|)
name|ctx
operator|->
name|swapBuffers
argument_list|()
expr_stmt|;
else|else
name|glFlush
argument_list|()
expr_stmt|;
name|d_ptr
operator|->
name|did_paint
operator|=
literal|false
expr_stmt|;
block|}
end_function
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_WS_QPA
argument_list|)
end_if
begin_function
DECL|function|setGeometry
name|void
name|QGLWindowSurface
operator|::
name|setGeometry
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
block|{
name|QWindowSurface
operator|::
name|setGeometry
argument_list|(
name|rect
argument_list|)
expr_stmt|;
name|d_ptr
operator|->
name|geometry_updated
operator|=
literal|true
expr_stmt|;
block|}
end_function
begin_else
else|#
directive|else
end_else
begin_function
DECL|function|resize
name|void
name|QGLWindowSurface
operator|::
name|resize
parameter_list|(
specifier|const
name|QSize
modifier|&
name|size
parameter_list|)
block|{
name|QWindowSurface
operator|::
name|resize
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|d_ptr
operator|->
name|geometry_updated
operator|=
literal|true
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|updateGeometry
name|void
name|QGLWindowSurface
operator|::
name|updateGeometry
parameter_list|()
block|{
if|if
condition|(
operator|!
name|d_ptr
operator|->
name|geometry_updated
condition|)
return|return;
name|d_ptr
operator|->
name|geometry_updated
operator|=
literal|false
expr_stmt|;
name|bool
name|hijack
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|QWidgetPrivate
modifier|*
name|wd
init|=
name|window
argument_list|()
operator|->
name|d_func
argument_list|()
decl_stmt|;
if|if
condition|(
name|wd
operator|->
name|extraData
argument_list|()
operator|&&
name|wd
operator|->
name|extraData
argument_list|()
operator|->
name|glContext
condition|)
block|{
ifdef|#
directive|ifdef
name|Q_OS_SYMBIAN
comment|// Symbian needs to recreate the context when native window size changes
if|if
condition|(
name|d_ptr
operator|->
name|size
operator|!=
name|geometry
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
if|if
condition|(
name|window
argument_list|()
operator|!=
name|qt_gl_share_widget
argument_list|()
condition|)
operator|--
operator|(
name|_qt_gl_share_widget
argument_list|()
operator|->
name|widgetRefCount
operator|)
expr_stmt|;
operator|delete
name|wd
operator|->
name|extraData
argument_list|()
operator|->
name|glContext
expr_stmt|;
name|wd
operator|->
name|extraData
argument_list|()
operator|->
name|glContext
operator|=
literal|0
expr_stmt|;
name|d_ptr
operator|->
name|ctx
operator|=
literal|0
expr_stmt|;
block|}
else|else
endif|#
directive|endif
block|{
name|hijack
operator|=
literal|false
expr_stmt|;
comment|// we already have gl context for widget
block|}
block|}
if|if
condition|(
name|hijack
condition|)
name|hijackWindow
argument_list|(
name|window
argument_list|()
argument_list|)
expr_stmt|;
name|QGLContext
modifier|*
name|ctx
init|=
cast|reinterpret_cast
argument_list|<
name|QGLContext
operator|*
argument_list|>
argument_list|(
name|wd
operator|->
name|extraData
argument_list|()
operator|->
name|glContext
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_MAC
name|ctx
operator|->
name|updatePaintDevice
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|QSize
name|surfSize
init|=
name|geometry
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|surfSize
operator|.
name|width
argument_list|()
operator|<=
literal|0
operator|||
name|surfSize
operator|.
name|height
argument_list|()
operator|<=
literal|0
condition|)
return|return;
if|if
condition|(
name|d_ptr
operator|->
name|size
operator|==
name|surfSize
condition|)
return|return;
name|d_ptr
operator|->
name|size
operator|=
name|surfSize
expr_stmt|;
if|if
condition|(
name|d_ptr
operator|->
name|ctx
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_OPENGL_ES_2
if|if
condition|(
name|d_ptr
operator|->
name|destructive_swap_buffers
condition|)
name|initializeOffscreenTexture
argument_list|(
name|surfSize
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return;
block|}
specifier|const
name|GLenum
name|target
init|=
name|GL_TEXTURE_2D
decl_stmt|;
if|if
condition|(
name|d_ptr
operator|->
name|destructive_swap_buffers
operator|&&
operator|(
name|QGLExtensions
operator|::
name|glExtensions
argument_list|()
operator|&
name|QGLExtensions
operator|::
name|FramebufferObject
operator|)
operator|&&
operator|(
name|d_ptr
operator|->
name|fbo
operator|||
operator|!
name|d_ptr
operator|->
name|tried_fbo
operator|)
operator|&&
name|qt_gl_preferGL2Engine
argument_list|()
condition|)
block|{
name|d_ptr
operator|->
name|tried_fbo
operator|=
literal|true
expr_stmt|;
name|ctx
operator|->
name|d_ptr
operator|->
name|internal_context
operator|=
literal|true
expr_stmt|;
name|ctx
operator|->
name|makeCurrent
argument_list|()
expr_stmt|;
operator|delete
name|d_ptr
operator|->
name|fbo
expr_stmt|;
name|QGLFramebufferObjectFormat
name|format
decl_stmt|;
name|format
operator|.
name|setAttachment
argument_list|(
name|QGLFramebufferObject
operator|::
name|CombinedDepthStencil
argument_list|)
expr_stmt|;
name|format
operator|.
name|setInternalTextureFormat
argument_list|(
name|GLenum
argument_list|(
name|GL_RGBA
argument_list|)
argument_list|)
expr_stmt|;
name|format
operator|.
name|setTextureTarget
argument_list|(
name|target
argument_list|)
expr_stmt|;
if|if
condition|(
name|QGLExtensions
operator|::
name|glExtensions
argument_list|()
operator|&
name|QGLExtensions
operator|::
name|FramebufferBlit
condition|)
name|format
operator|.
name|setSamples
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|d_ptr
operator|->
name|fbo
operator|=
operator|new
name|QGLFramebufferObject
argument_list|(
name|surfSize
argument_list|,
name|format
argument_list|)
expr_stmt|;
if|if
condition|(
name|d_ptr
operator|->
name|fbo
operator|->
name|isValid
argument_list|()
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"Created Window Surface FBO"
operator|<<
name|surfSize
operator|<<
literal|"with samples"
operator|<<
name|d_ptr
operator|->
name|fbo
operator|->
name|format
argument_list|()
operator|.
name|samples
argument_list|()
expr_stmt|;
return|return;
block|}
else|else
block|{
name|qDebug
argument_list|()
operator|<<
literal|"QGLWindowSurface: Failed to create valid FBO, falling back"
expr_stmt|;
operator|delete
name|d_ptr
operator|->
name|fbo
expr_stmt|;
name|d_ptr
operator|->
name|fbo
operator|=
literal|0
expr_stmt|;
block|}
block|}
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_WS_QPA
argument_list|)
comment|//QPA doesn't support pixelbuffers
if|if
condition|(
name|d_ptr
operator|->
name|destructive_swap_buffers
operator|&&
operator|(
name|d_ptr
operator|->
name|pb
operator|||
operator|!
name|d_ptr
operator|->
name|tried_pb
operator|)
condition|)
block|{
name|d_ptr
operator|->
name|tried_pb
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|d_ptr
operator|->
name|pb
condition|)
block|{
name|d_ptr
operator|->
name|pb
operator|->
name|makeCurrent
argument_list|()
expr_stmt|;
name|glDeleteTextures
argument_list|(
literal|1
argument_list|,
operator|&
name|d_ptr
operator|->
name|pb_tex_id
argument_list|)
expr_stmt|;
block|}
operator|delete
name|d_ptr
operator|->
name|pb
expr_stmt|;
name|d_ptr
operator|->
name|pb
operator|=
operator|new
name|QGLPixelBuffer
argument_list|(
name|surfSize
operator|.
name|width
argument_list|()
argument_list|,
name|surfSize
operator|.
name|height
argument_list|()
argument_list|,
name|QGLFormat
argument_list|(
name|QGL
operator|::
name|SampleBuffers
operator||
name|QGL
operator|::
name|StencilBuffer
operator||
name|QGL
operator|::
name|DepthBuffer
argument_list|)
argument_list|,
name|qt_gl_share_widget
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|d_ptr
operator|->
name|pb
operator|->
name|isValid
argument_list|()
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"Created Window Surface Pixelbuffer, Sample buffers:"
operator|<<
name|d_ptr
operator|->
name|pb
operator|->
name|format
argument_list|()
operator|.
name|sampleBuffers
argument_list|()
expr_stmt|;
name|d_ptr
operator|->
name|pb
operator|->
name|makeCurrent
argument_list|()
expr_stmt|;
name|glGenTextures
argument_list|(
literal|1
argument_list|,
operator|&
name|d_ptr
operator|->
name|pb_tex_id
argument_list|)
expr_stmt|;
name|glBindTexture
argument_list|(
name|target
argument_list|,
name|d_ptr
operator|->
name|pb_tex_id
argument_list|)
expr_stmt|;
name|glTexImage2D
argument_list|(
name|target
argument_list|,
literal|0
argument_list|,
name|GL_RGBA
argument_list|,
name|surfSize
operator|.
name|width
argument_list|()
argument_list|,
name|surfSize
operator|.
name|height
argument_list|()
argument_list|,
literal|0
argument_list|,
name|GL_RGBA
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|glTexParameterf
argument_list|(
name|target
argument_list|,
name|GL_TEXTURE_MAG_FILTER
argument_list|,
name|GL_NEAREST
argument_list|)
expr_stmt|;
name|glTexParameterf
argument_list|(
name|target
argument_list|,
name|GL_TEXTURE_MIN_FILTER
argument_list|,
name|GL_NEAREST
argument_list|)
expr_stmt|;
name|glBindTexture
argument_list|(
name|target
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|glMatrixMode
argument_list|(
name|GL_PROJECTION
argument_list|)
expr_stmt|;
name|glLoadIdentity
argument_list|()
expr_stmt|;
name|glOrtho
argument_list|(
literal|0
argument_list|,
name|d_ptr
operator|->
name|pb
operator|->
name|width
argument_list|()
argument_list|,
name|d_ptr
operator|->
name|pb
operator|->
name|height
argument_list|()
argument_list|,
literal|0
argument_list|,
operator|-
literal|999999
argument_list|,
literal|999999
argument_list|)
expr_stmt|;
name|d_ptr
operator|->
name|pb
operator|->
name|d_ptr
operator|->
name|qctx
operator|->
name|d_func
argument_list|()
operator|->
name|internal_context
operator|=
literal|true
expr_stmt|;
return|return;
block|}
else|else
block|{
name|qDebug
argument_list|()
operator|<<
literal|"QGLWindowSurface: Failed to create valid pixelbuffer, falling back"
expr_stmt|;
operator|delete
name|d_ptr
operator|->
name|pb
expr_stmt|;
name|d_ptr
operator|->
name|pb
operator|=
literal|0
expr_stmt|;
block|}
block|}
endif|#
directive|endif
comment|// !defined(QT_OPENGL_ES_2) !defined(Q_WS_QPA)
name|ctx
operator|->
name|makeCurrent
argument_list|()
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_OPENGL_ES_2
if|if
condition|(
name|d_ptr
operator|->
name|destructive_swap_buffers
condition|)
name|initializeOffscreenTexture
argument_list|(
name|surfSize
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|Q_OS_SYMBIAN
name|qDebug
argument_list|()
operator|<<
literal|"QGLWindowSurface: Using plain widget as window surface"
operator|<<
name|this
expr_stmt|;
endif|#
directive|endif
name|d_ptr
operator|->
name|ctx
operator|=
name|ctx
expr_stmt|;
name|d_ptr
operator|->
name|ctx
operator|->
name|d_ptr
operator|->
name|internal_context
operator|=
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|initializeOffscreenTexture
name|bool
name|QGLWindowSurface
operator|::
name|initializeOffscreenTexture
parameter_list|(
specifier|const
name|QSize
modifier|&
name|size
parameter_list|)
block|{
if|if
condition|(
name|size
operator|==
name|d_ptr
operator|->
name|textureSize
condition|)
return|return
literal|false
return|;
name|glGenTextures
argument_list|(
literal|1
argument_list|,
operator|&
name|d_ptr
operator|->
name|tex_id
argument_list|)
expr_stmt|;
name|glBindTexture
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
name|d_ptr
operator|->
name|tex_id
argument_list|)
expr_stmt|;
name|glTexImage2D
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
literal|0
argument_list|,
name|GL_RGB
argument_list|,
name|size
operator|.
name|width
argument_list|()
argument_list|,
name|size
operator|.
name|height
argument_list|()
argument_list|,
literal|0
argument_list|,
name|GL_RGB
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|glTexParameterf
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
name|GL_TEXTURE_MAG_FILTER
argument_list|,
name|GL_NEAREST
argument_list|)
expr_stmt|;
name|glTexParameterf
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
name|GL_TEXTURE_MIN_FILTER
argument_list|,
name|GL_NEAREST
argument_list|)
expr_stmt|;
name|glBindTexture
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|d_ptr
operator|->
name|textureSize
operator|=
name|size
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|scroll
name|bool
name|QGLWindowSurface
operator|::
name|scroll
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|area
parameter_list|,
name|int
name|dx
parameter_list|,
name|int
name|dy
parameter_list|)
block|{
comment|// this code randomly fails currently for unknown reasons
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|d_ptr
operator|->
name|pb
condition|)
return|return
literal|false
return|;
name|d_ptr
operator|->
name|pb
operator|->
name|makeCurrent
argument_list|()
expr_stmt|;
name|QRect
name|br
init|=
name|area
operator|.
name|boundingRect
argument_list|()
decl_stmt|;
if|#
directive|if
literal|0
comment|// ## workaround driver issue (scrolling by these deltas is unbearably slow for some reason)
comment|// ## maybe we should use glCopyTexSubImage insteadk
block|if (dx == 1 || dx == -1 || dy == 1 || dy == -1 || dy == 2)         return false;      glRasterPos2i(br.x() + dx, br.y() + br.height() + dy);     glCopyPixels(br.x(), d_ptr->pb->height() - (br.y() + br.height()), br.width(), br.height(), GL_COLOR);     return true;
endif|#
directive|endif
specifier|const
name|GLenum
name|target
init|=
name|GL_TEXTURE_2D
decl_stmt|;
name|glBindTexture
argument_list|(
name|target
argument_list|,
name|d_ptr
operator|->
name|tex_id
argument_list|)
expr_stmt|;
name|glCopyTexImage2D
argument_list|(
name|target
argument_list|,
literal|0
argument_list|,
name|GL_RGBA
argument_list|,
name|br
operator|.
name|x
argument_list|()
argument_list|,
name|d_ptr
operator|->
name|pb
operator|->
name|height
argument_list|()
operator|-
operator|(
name|br
operator|.
name|y
argument_list|()
operator|+
name|br
operator|.
name|height
argument_list|()
operator|)
argument_list|,
name|br
operator|.
name|width
argument_list|()
argument_list|,
name|br
operator|.
name|height
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|glBindTexture
argument_list|(
name|target
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|drawTexture
argument_list|(
name|br
operator|.
name|translated
argument_list|(
name|dx
argument_list|,
name|dy
argument_list|)
argument_list|,
name|d_ptr
operator|->
name|tex_id
argument_list|,
name|window
argument_list|()
operator|->
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|drawTexture
specifier|static
name|void
name|drawTexture
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|rect
parameter_list|,
name|GLuint
name|tex_id
parameter_list|,
specifier|const
name|QSize
modifier|&
name|texSize
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|br
parameter_list|)
block|{
specifier|const
name|GLenum
name|target
init|=
name|GL_TEXTURE_2D
decl_stmt|;
name|QRectF
name|src
init|=
name|br
operator|.
name|isEmpty
argument_list|()
condition|?
name|QRectF
argument_list|(
name|QPointF
argument_list|()
argument_list|,
name|texSize
argument_list|)
else|:
name|QRectF
argument_list|(
name|QPointF
argument_list|(
name|br
operator|.
name|x
argument_list|()
argument_list|,
name|texSize
operator|.
name|height
argument_list|()
operator|-
name|br
operator|.
name|bottom
argument_list|()
argument_list|)
argument_list|,
name|br
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|target
operator|==
name|GL_TEXTURE_2D
condition|)
block|{
name|qreal
name|width
init|=
name|texSize
operator|.
name|width
argument_list|()
decl_stmt|;
name|qreal
name|height
init|=
name|texSize
operator|.
name|height
argument_list|()
decl_stmt|;
name|src
operator|.
name|setLeft
argument_list|(
name|src
operator|.
name|left
argument_list|()
operator|/
name|width
argument_list|)
expr_stmt|;
name|src
operator|.
name|setRight
argument_list|(
name|src
operator|.
name|right
argument_list|()
operator|/
name|width
argument_list|)
expr_stmt|;
name|src
operator|.
name|setTop
argument_list|(
name|src
operator|.
name|top
argument_list|()
operator|/
name|height
argument_list|)
expr_stmt|;
name|src
operator|.
name|setBottom
argument_list|(
name|src
operator|.
name|bottom
argument_list|()
operator|/
name|height
argument_list|)
expr_stmt|;
block|}
specifier|const
name|GLfloat
name|tx1
init|=
name|src
operator|.
name|left
argument_list|()
decl_stmt|;
specifier|const
name|GLfloat
name|tx2
init|=
name|src
operator|.
name|right
argument_list|()
decl_stmt|;
specifier|const
name|GLfloat
name|ty1
init|=
name|src
operator|.
name|top
argument_list|()
decl_stmt|;
specifier|const
name|GLfloat
name|ty2
init|=
name|src
operator|.
name|bottom
argument_list|()
decl_stmt|;
name|GLfloat
name|texCoordArray
index|[
literal|4
operator|*
literal|2
index|]
init|=
block|{
name|tx1
block|,
name|ty2
block|,
name|tx2
block|,
name|ty2
block|,
name|tx2
block|,
name|ty1
block|,
name|tx1
block|,
name|ty1
block|}
decl_stmt|;
name|GLfloat
name|vertexArray
index|[
literal|4
operator|*
literal|2
index|]
decl_stmt|;
specifier|extern
name|void
name|qt_add_rect_to_array
argument_list|(
specifier|const
name|QRectF
operator|&
name|r
argument_list|,
name|GLfloat
operator|*
name|array
argument_list|)
decl_stmt|;
comment|// qpaintengine_opengl.cpp
name|qt_add_rect_to_array
argument_list|(
name|rect
argument_list|,
name|vertexArray
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
name|glVertexPointer
argument_list|(
literal|2
argument_list|,
name|GL_FLOAT
argument_list|,
literal|0
argument_list|,
name|vertexArray
argument_list|)
expr_stmt|;
name|glTexCoordPointer
argument_list|(
literal|2
argument_list|,
name|GL_FLOAT
argument_list|,
literal|0
argument_list|,
name|texCoordArray
argument_list|)
expr_stmt|;
name|glBindTexture
argument_list|(
name|target
argument_list|,
name|tex_id
argument_list|)
expr_stmt|;
name|glEnable
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|glEnableClientState
argument_list|(
name|GL_VERTEX_ARRAY
argument_list|)
expr_stmt|;
name|glEnableClientState
argument_list|(
name|GL_TEXTURE_COORD_ARRAY
argument_list|)
expr_stmt|;
name|glDrawArrays
argument_list|(
name|GL_TRIANGLE_FAN
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|glDisableClientState
argument_list|(
name|GL_VERTEX_ARRAY
argument_list|)
expr_stmt|;
name|glDisableClientState
argument_list|(
name|GL_TEXTURE_COORD_ARRAY
argument_list|)
expr_stmt|;
name|glDisable
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|glBindTexture
argument_list|(
name|target
argument_list|,
literal|0
argument_list|)
expr_stmt|;
else|#
directive|else
name|glVertexAttribPointer
argument_list|(
name|QT_VERTEX_COORDS_ATTR
argument_list|,
literal|2
argument_list|,
name|GL_FLOAT
argument_list|,
name|GL_FALSE
argument_list|,
literal|0
argument_list|,
name|vertexArray
argument_list|)
expr_stmt|;
name|glVertexAttribPointer
argument_list|(
name|QT_TEXTURE_COORDS_ATTR
argument_list|,
literal|2
argument_list|,
name|GL_FLOAT
argument_list|,
name|GL_FALSE
argument_list|,
literal|0
argument_list|,
name|texCoordArray
argument_list|)
expr_stmt|;
name|glBindTexture
argument_list|(
name|target
argument_list|,
name|tex_id
argument_list|)
expr_stmt|;
name|glEnableVertexAttribArray
argument_list|(
name|QT_VERTEX_COORDS_ATTR
argument_list|)
expr_stmt|;
name|glEnableVertexAttribArray
argument_list|(
name|QT_TEXTURE_COORDS_ATTR
argument_list|)
expr_stmt|;
name|glDrawArrays
argument_list|(
name|GL_TRIANGLE_FAN
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|glDisableVertexAttribArray
argument_list|(
name|QT_VERTEX_COORDS_ATTR
argument_list|)
expr_stmt|;
name|glDisableVertexAttribArray
argument_list|(
name|QT_TEXTURE_COORDS_ATTR
argument_list|)
expr_stmt|;
name|glBindTexture
argument_list|(
name|target
argument_list|,
literal|0
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|buffer
name|QImage
modifier|*
name|QGLWindowSurface
operator|::
name|buffer
parameter_list|(
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
name|QImage
name|image
decl_stmt|;
if|if
condition|(
name|d_ptr
operator|->
name|pb
condition|)
name|image
operator|=
name|d_ptr
operator|->
name|pb
operator|->
name|toImage
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|d_ptr
operator|->
name|fbo
condition|)
name|image
operator|=
name|d_ptr
operator|->
name|fbo
operator|->
name|toImage
argument_list|()
expr_stmt|;
if|if
condition|(
name|image
operator|.
name|isNull
argument_list|()
condition|)
return|return
literal|0
return|;
name|QRect
name|rect
init|=
name|widget
operator|->
name|rect
argument_list|()
decl_stmt|;
name|rect
operator|.
name|translate
argument_list|(
name|widget
operator|->
name|mapTo
argument_list|(
name|widget
operator|->
name|window
argument_list|()
argument_list|,
name|QPoint
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QImage
name|subImage
init|=
name|image
operator|.
name|copy
argument_list|(
name|rect
argument_list|)
decl_stmt|;
name|d_ptr
operator|->
name|buffers
operator|<<
name|subImage
expr_stmt|;
return|return
operator|&
name|d_ptr
operator|->
name|buffers
operator|.
name|last
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|features
name|QWindowSurface
operator|::
name|WindowSurfaceFeatures
name|QGLWindowSurface
operator|::
name|features
parameter_list|()
specifier|const
block|{
name|WindowSurfaceFeatures
name|features
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|d_ptr
operator|->
name|destructive_swap_buffers
operator|||
name|d_ptr
operator|->
name|swap_region_support
condition|)
name|features
operator||=
name|PartialUpdates
expr_stmt|;
if|if
condition|(
operator|!
name|d_ptr
operator|->
name|destructive_swap_buffers
condition|)
name|features
operator||=
name|PreservedContents
expr_stmt|;
return|return
name|features
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
