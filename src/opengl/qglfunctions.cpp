begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtOpenGL module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qglfunctions.h"
end_include
begin_include
include|#
directive|include
file|"qgl_p.h"
end_include
begin_include
include|#
directive|include
file|"QtGui/private/qopenglcontext_p.h"
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_comment
comment|/*!     \class QGLFunctions     \brief The QGLFunctions class provides cross-platform access to the OpenGL/ES 2.0 API.     \since 4.8     \obsolete     \ingroup painting-3D      OpenGL/ES 2.0 defines a subset of the OpenGL specification that is     common across many desktop and embedded OpenGL implementations.     However, it can be difficult to use the functions from that subset     because they need to be resolved manually on desktop systems.      QGLFunctions provides a guaranteed API that is available on all     OpenGL systems and takes care of function resolution on systems     that need it.  The recommended way to use QGLFunctions is by     direct inheritance:      \code     class MyGLWidget : public QGLWidget, protected QGLFunctions     {         Q_OBJECT     public:         MyGLWidget(QWidget *parent = 0) : QGLWidget(parent) {}      protected:         void initializeGL();         void paintGL();     };      void MyGLWidget::initializeGL()     {         initializeGLFunctions();     }     \endcode      The \c{paintGL()} function can then use any of the OpenGL/ES 2.0     functions without explicit resolution, such as glActiveTexture()     in the following example:      \code     void MyGLWidget::paintGL()     {         glActiveTexture(GL_TEXTURE1);         glBindTexture(GL_TEXTURE_2D, textureId);         ...     }     \endcode      QGLFunctions can also be used directly for ad-hoc invocation     of OpenGL/ES 2.0 functions on all platforms:      \code     QGLFunctions glFuncs(QGLContext::currentContext());     glFuncs.glActiveTexture(GL_TEXTURE1);     \endcode      QGLFunctions provides wrappers for all OpenGL/ES 2.0 functions,     except those like \c{glDrawArrays()}, \c{glViewport()}, and     \c{glBindTexture()} that don't have portability issues.      Including the header for QGLFunctions will also define all of     the OpenGL/ES 2.0 macro constants that are not already defined by     the system's OpenGL headers, such as \c{GL_TEXTURE1} above.      The hasOpenGLFeature() and openGLFeatures() functions can be used     to determine if the OpenGL implementation has a major OpenGL/ES 2.0     feature.  For example, the following checks if non power of two     textures are available:      \code     QGLFunctions funcs(QGLContext::currentContext());     bool npot = funcs.hasOpenGLFeature(QGLFunctions::NPOTTextures);     \endcode      \note This class has been deprecated in favor of QOpenGLFunctions. */
end_comment
begin_comment
comment|/*!     \enum QGLFunctions::OpenGLFeature     This enum defines OpenGL/ES 2.0 features that may be optional     on other platforms.      \value Multitexture glActiveTexture() function is available.     \value Shaders Shader functions are available.     \value Buffers Vertex and index buffer functions are available.     \value Framebuffers Framebuffer object functions are available.     \value BlendColor glBlendColor() is available.     \value BlendEquation glBlendEquation() is available.     \value BlendEquationSeparate glBlendEquationSeparate() is available.     \value BlendFuncSeparate glBlendFuncSeparate() is available.     \value BlendSubtract Blend subtract mode is available.     \value CompressedTextures Compressed texture functions are available.     \value Multisample glSampleCoverage() function is available.     \value StencilSeparate Separate stencil functions are available.     \value NPOTTextures Non power of two textures are available. */
end_comment
begin_comment
comment|// Hidden private fields for additional extension data.
end_comment
begin_struct
DECL|struct|QGLFunctionsPrivateEx
struct|struct
name|QGLFunctionsPrivateEx
super|:
specifier|public
name|QGLFunctionsPrivate
super|,
specifier|public
name|QOpenGLSharedResource
block|{
DECL|function|QGLFunctionsPrivateEx
name|QGLFunctionsPrivateEx
parameter_list|(
name|QOpenGLContext
modifier|*
name|context
parameter_list|)
member_init_list|:
name|QGLFunctionsPrivate
argument_list|(
name|QGLContext
operator|::
name|fromOpenGLContext
argument_list|(
name|context
argument_list|)
argument_list|)
member_init_list|,
name|QOpenGLSharedResource
argument_list|(
name|context
operator|->
name|shareGroup
argument_list|()
argument_list|)
member_init_list|,
name|m_features
argument_list|(
operator|-
literal|1
argument_list|)
block|{}
DECL|function|invalidateResource
name|void
name|invalidateResource
parameter_list|()
block|{
name|m_features
operator|=
operator|-
literal|1
expr_stmt|;
block|}
DECL|function|freeResource
name|void
name|freeResource
parameter_list|(
name|QOpenGLContext
modifier|*
parameter_list|)
block|{
comment|// no gl resources to free
block|}
DECL|member|m_features
name|int
name|m_features
decl_stmt|;
block|}
struct|;
end_struct
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|QOpenGLMultiGroupSharedResource
argument_list|,
argument|qt_gl_functions_resource
argument_list|)
end_macro
begin_function
DECL|function|qt_gl_functions
specifier|static
name|QGLFunctionsPrivateEx
modifier|*
name|qt_gl_functions
parameter_list|(
specifier|const
name|QGLContext
modifier|*
name|context
init|=
literal|0
parameter_list|)
block|{
if|if
condition|(
operator|!
name|context
condition|)
name|context
operator|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|QGLFunctionsPrivateEx
modifier|*
name|funcs
init|=
cast|reinterpret_cast
argument_list|<
name|QGLFunctionsPrivateEx
operator|*
argument_list|>
argument_list|(
name|qt_gl_functions_resource
argument_list|()
operator|->
name|value
argument_list|<
name|QGLFunctionsPrivateEx
argument_list|>
argument_list|(
name|context
operator|->
name|contextHandle
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|funcs
return|;
block|}
end_function
begin_comment
comment|/*!     Constructs a default function resolver.  The resolver cannot     be used until initializeGLFunctions() is called to specify     the context.      \sa initializeGLFunctions() */
end_comment
begin_constructor
DECL|function|QGLFunctions
name|QGLFunctions
operator|::
name|QGLFunctions
parameter_list|()
member_init_list|:
name|d_ptr
argument_list|(
literal|0
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Constructs a function resolver for \a context.  If \a context     is null, then the resolver will be created for the current QGLContext.      An object constructed in this way can only be used with \a context     and other contexts that share with it.  Use initializeGLFunctions()     to change the object's context association.      \sa initializeGLFunctions() */
end_comment
begin_constructor
DECL|function|QGLFunctions
name|QGLFunctions
operator|::
name|QGLFunctions
parameter_list|(
specifier|const
name|QGLContext
modifier|*
name|context
parameter_list|)
member_init_list|:
name|d_ptr
argument_list|(
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     \fn QGLFunctions::~QGLFunctions()      Destroys this function resolver. */
end_comment
begin_function
DECL|function|qt_gl_resolve_features
specifier|static
name|int
name|qt_gl_resolve_features
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
name|int
name|features
init|=
name|QGLFunctions
operator|::
name|Multitexture
operator||
name|QGLFunctions
operator|::
name|Shaders
operator||
name|QGLFunctions
operator|::
name|Buffers
operator||
name|QGLFunctions
operator|::
name|Framebuffers
operator||
name|QGLFunctions
operator|::
name|BlendColor
operator||
name|QGLFunctions
operator|::
name|BlendEquation
operator||
name|QGLFunctions
operator|::
name|BlendEquationSeparate
operator||
name|QGLFunctions
operator|::
name|BlendFuncSeparate
operator||
name|QGLFunctions
operator|::
name|BlendSubtract
operator||
name|QGLFunctions
operator|::
name|CompressedTextures
operator||
name|QGLFunctions
operator|::
name|Multisample
operator||
name|QGLFunctions
operator|::
name|StencilSeparate
decl_stmt|;
name|QGLExtensionMatcher
name|extensions
decl_stmt|;
if|if
condition|(
name|extensions
operator|.
name|match
argument_list|(
literal|"GL_OES_texture_npot"
argument_list|)
condition|)
name|features
operator||=
name|QGLFunctions
operator|::
name|NPOTTextures
expr_stmt|;
if|if
condition|(
name|extensions
operator|.
name|match
argument_list|(
literal|"GL_IMG_texture_npot"
argument_list|)
condition|)
name|features
operator||=
name|QGLFunctions
operator|::
name|NPOTTextures
expr_stmt|;
return|return
name|features
return|;
elif|#
directive|elif
name|defined
argument_list|(
name|QT_OPENGL_ES
argument_list|)
name|int
name|features
init|=
name|QGLFunctions
operator|::
name|Multitexture
operator||
name|QGLFunctions
operator|::
name|Buffers
operator||
name|QGLFunctions
operator|::
name|CompressedTextures
operator||
name|QGLFunctions
operator|::
name|Multisample
decl_stmt|;
name|QGLExtensionMatcher
name|extensions
decl_stmt|;
if|if
condition|(
name|extensions
operator|.
name|match
argument_list|(
literal|"GL_OES_framebuffer_object"
argument_list|)
condition|)
name|features
operator||=
name|QGLFunctions
operator|::
name|Framebuffers
expr_stmt|;
if|if
condition|(
name|extensions
operator|.
name|match
argument_list|(
literal|"GL_OES_blend_equation_separate"
argument_list|)
condition|)
name|features
operator||=
name|QGLFunctions
operator|::
name|BlendEquationSeparate
expr_stmt|;
if|if
condition|(
name|extensions
operator|.
name|match
argument_list|(
literal|"GL_OES_blend_func_separate"
argument_list|)
condition|)
name|features
operator||=
name|QGLFunctions
operator|::
name|BlendFuncSeparate
expr_stmt|;
if|if
condition|(
name|extensions
operator|.
name|match
argument_list|(
literal|"GL_OES_blend_subtract"
argument_list|)
condition|)
name|features
operator||=
name|QGLFunctions
operator|::
name|BlendSubtract
expr_stmt|;
if|if
condition|(
name|extensions
operator|.
name|match
argument_list|(
literal|"GL_OES_texture_npot"
argument_list|)
condition|)
name|features
operator||=
name|QGLFunctions
operator|::
name|NPOTTextures
expr_stmt|;
if|if
condition|(
name|extensions
operator|.
name|match
argument_list|(
literal|"GL_IMG_texture_npot"
argument_list|)
condition|)
name|features
operator||=
name|QGLFunctions
operator|::
name|NPOTTextures
expr_stmt|;
return|return
name|features
return|;
else|#
directive|else
name|int
name|features
init|=
literal|0
decl_stmt|;
name|QGLFormat
operator|::
name|OpenGLVersionFlags
name|versions
init|=
name|QGLFormat
operator|::
name|openGLVersionFlags
argument_list|()
decl_stmt|;
name|QGLExtensionMatcher
name|extensions
decl_stmt|;
comment|// Recognize features by extension name.
if|if
condition|(
name|extensions
operator|.
name|match
argument_list|(
literal|"GL_ARB_multitexture"
argument_list|)
condition|)
name|features
operator||=
name|QGLFunctions
operator|::
name|Multitexture
expr_stmt|;
if|if
condition|(
name|extensions
operator|.
name|match
argument_list|(
literal|"GL_ARB_shader_objects"
argument_list|)
condition|)
name|features
operator||=
name|QGLFunctions
operator|::
name|Shaders
expr_stmt|;
if|if
condition|(
name|extensions
operator|.
name|match
argument_list|(
literal|"GL_EXT_framebuffer_object"
argument_list|)
operator|||
name|extensions
operator|.
name|match
argument_list|(
literal|"GL_ARB_framebuffer_object"
argument_list|)
condition|)
name|features
operator||=
name|QGLFunctions
operator|::
name|Framebuffers
expr_stmt|;
if|if
condition|(
name|extensions
operator|.
name|match
argument_list|(
literal|"GL_EXT_blend_color"
argument_list|)
condition|)
name|features
operator||=
name|QGLFunctions
operator|::
name|BlendColor
expr_stmt|;
if|if
condition|(
name|extensions
operator|.
name|match
argument_list|(
literal|"GL_EXT_blend_equation_separate"
argument_list|)
condition|)
name|features
operator||=
name|QGLFunctions
operator|::
name|BlendEquationSeparate
expr_stmt|;
if|if
condition|(
name|extensions
operator|.
name|match
argument_list|(
literal|"GL_EXT_blend_func_separate"
argument_list|)
condition|)
name|features
operator||=
name|QGLFunctions
operator|::
name|BlendFuncSeparate
expr_stmt|;
if|if
condition|(
name|extensions
operator|.
name|match
argument_list|(
literal|"GL_EXT_blend_subtract"
argument_list|)
condition|)
name|features
operator||=
name|QGLFunctions
operator|::
name|BlendSubtract
expr_stmt|;
if|if
condition|(
name|extensions
operator|.
name|match
argument_list|(
literal|"GL_ARB_texture_compression"
argument_list|)
condition|)
name|features
operator||=
name|QGLFunctions
operator|::
name|CompressedTextures
expr_stmt|;
if|if
condition|(
name|extensions
operator|.
name|match
argument_list|(
literal|"GL_ARB_multisample"
argument_list|)
condition|)
name|features
operator||=
name|QGLFunctions
operator|::
name|Multisample
expr_stmt|;
if|if
condition|(
name|extensions
operator|.
name|match
argument_list|(
literal|"GL_ARB_texture_non_power_of_two"
argument_list|)
condition|)
name|features
operator||=
name|QGLFunctions
operator|::
name|NPOTTextures
expr_stmt|;
comment|// Recognize features by minimum OpenGL version.
if|if
condition|(
name|versions
operator|&
name|QGLFormat
operator|::
name|OpenGL_Version_1_2
condition|)
block|{
name|features
operator||=
name|QGLFunctions
operator|::
name|BlendColor
operator||
name|QGLFunctions
operator|::
name|BlendEquation
expr_stmt|;
block|}
if|if
condition|(
name|versions
operator|&
name|QGLFormat
operator|::
name|OpenGL_Version_1_3
condition|)
block|{
name|features
operator||=
name|QGLFunctions
operator|::
name|Multitexture
operator||
name|QGLFunctions
operator|::
name|CompressedTextures
operator||
name|QGLFunctions
operator|::
name|Multisample
expr_stmt|;
block|}
if|if
condition|(
name|versions
operator|&
name|QGLFormat
operator|::
name|OpenGL_Version_1_4
condition|)
name|features
operator||=
name|QGLFunctions
operator|::
name|BlendFuncSeparate
expr_stmt|;
if|if
condition|(
name|versions
operator|&
name|QGLFormat
operator|::
name|OpenGL_Version_1_5
condition|)
name|features
operator||=
name|QGLFunctions
operator|::
name|Buffers
expr_stmt|;
if|if
condition|(
name|versions
operator|&
name|QGLFormat
operator|::
name|OpenGL_Version_2_0
condition|)
block|{
name|features
operator||=
name|QGLFunctions
operator|::
name|Shaders
operator||
name|QGLFunctions
operator|::
name|StencilSeparate
operator||
name|QGLFunctions
operator|::
name|BlendEquationSeparate
operator||
name|QGLFunctions
operator|::
name|NPOTTextures
expr_stmt|;
block|}
return|return
name|features
return|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*!     Returns the set of features that are present on this system's     OpenGL implementation.      It is assumed that the QGLContext associated with this function     resolver is current.      \sa hasOpenGLFeature() */
end_comment
begin_function
DECL|function|openGLFeatures
name|QGLFunctions
operator|::
name|OpenGLFeatures
name|QGLFunctions
operator|::
name|openGLFeatures
parameter_list|()
specifier|const
block|{
name|QGLFunctionsPrivateEx
modifier|*
name|d
init|=
cast|static_cast
argument_list|<
name|QGLFunctionsPrivateEx
operator|*
argument_list|>
argument_list|(
name|d_ptr
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|d
condition|)
return|return
literal|0
return|;
if|if
condition|(
name|d
operator|->
name|m_features
operator|==
operator|-
literal|1
condition|)
name|d
operator|->
name|m_features
operator|=
name|qt_gl_resolve_features
argument_list|()
expr_stmt|;
return|return
name|QGLFunctions
operator|::
name|OpenGLFeatures
argument_list|(
name|d
operator|->
name|m_features
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns true if \a feature is present on this system's OpenGL     implementation; false otherwise.      It is assumed that the QGLContext associated with this function     resolver is current.      \sa openGLFeatures() */
end_comment
begin_function
DECL|function|hasOpenGLFeature
name|bool
name|QGLFunctions
operator|::
name|hasOpenGLFeature
parameter_list|(
name|QGLFunctions
operator|::
name|OpenGLFeature
name|feature
parameter_list|)
specifier|const
block|{
name|QGLFunctionsPrivateEx
modifier|*
name|d
init|=
cast|static_cast
argument_list|<
name|QGLFunctionsPrivateEx
operator|*
argument_list|>
argument_list|(
name|d_ptr
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|d
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|d
operator|->
name|m_features
operator|==
operator|-
literal|1
condition|)
name|d
operator|->
name|m_features
operator|=
name|qt_gl_resolve_features
argument_list|()
expr_stmt|;
return|return
operator|(
name|d
operator|->
name|m_features
operator|&
name|int
argument_list|(
name|feature
argument_list|)
operator|)
operator|!=
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     Initializes GL function resolution for \a context.  If \a context     is null, then the current QGLContext will be used.      After calling this function, the QGLFunctions object can only be     used with \a context and other contexts that share with it.     Call initializeGLFunctions() again to change the object's context     association. */
end_comment
begin_function
DECL|function|initializeGLFunctions
name|void
name|QGLFunctions
operator|::
name|initializeGLFunctions
parameter_list|(
specifier|const
name|QGLContext
modifier|*
name|context
parameter_list|)
block|{
name|d_ptr
operator|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \fn void QGLFunctions::glActiveTexture(GLenum texture)      Convenience function that calls glActiveTexture(\a texture).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glActiveTexture.xml}{glActiveTexture()}. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glAttachShader(GLuint program, GLuint shader)      Convenience function that calls glAttachShader(\a program, \a shader).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glAttachShader.xml}{glAttachShader()}.      This convenience function will do nothing on OpenGL/ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glBindAttribLocation(GLuint program, GLuint index, const char* name)      Convenience function that calls glBindAttribLocation(\a program, \a index, \a name).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glBindAttribLocation.xml}{glBindAttribLocation()}.      This convenience function will do nothing on OpenGL/ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glBindBuffer(GLenum target, GLuint buffer)      Convenience function that calls glBindBuffer(\a target, \a buffer).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glBindBuffer.xml}{glBindBuffer()}. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glBindFramebuffer(GLenum target, GLuint framebuffer)      Convenience function that calls glBindFramebuffer(\a target, \a framebuffer).      Note that Qt will translate a \a framebuffer argument of 0 to the currently     bound QOpenGLContext's defaultFramebufferObject().      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glBindFramebuffer.xml}{glBindFramebuffer()}. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glBindRenderbuffer(GLenum target, GLuint renderbuffer)      Convenience function that calls glBindRenderbuffer(\a target, \a renderbuffer).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glBindRenderbuffer.xml}{glBindRenderbuffer()}. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glBlendColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)      Convenience function that calls glBlendColor(\a red, \a green, \a blue, \a alpha).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glBlendColor.xml}{glBlendColor()}. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glBlendEquation(GLenum mode)      Convenience function that calls glBlendEquation(\a mode).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glBlendEquation.xml}{glBlendEquation()}. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha)      Convenience function that calls glBlendEquationSeparate(\a modeRGB, \a modeAlpha).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glBlendEquationSeparate.xml}{glBlendEquationSeparate()}. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glBlendFuncSeparate(GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)      Convenience function that calls glBlendFuncSeparate(\a srcRGB, \a dstRGB, \a srcAlpha, \a dstAlpha).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glBlendFuncSeparate.xml}{glBlendFuncSeparate()}. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glBufferData(GLenum target, qgl_GLsizeiptr size, const void* data, GLenum usage)      Convenience function that calls glBufferData(\a target, \a size, \a data, \a usage).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glBufferData.xml}{glBufferData()}. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glBufferSubData(GLenum target, qgl_GLintptr offset, qgl_GLsizeiptr size, const void* data)      Convenience function that calls glBufferSubData(\a target, \a offset, \a size, \a data).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glBufferSubData.xml}{glBufferSubData()}. */
end_comment
begin_comment
comment|/*!     \fn GLenum QGLFunctions::glCheckFramebufferStatus(GLenum target)      Convenience function that calls glCheckFramebufferStatus(\a target).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glCheckFramebufferStatus.xml}{glCheckFramebufferStatus()}. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glClearDepthf(GLclampf depth)      Convenience function that calls glClearDepth(\a depth) on     desktop OpenGL systems and glClearDepthf(\a depth) on     embedded OpenGL/ES systems.      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glClearDepthf.xml}{glClearDepthf()}. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glCompileShader(GLuint shader)      Convenience function that calls glCompileShader(\a shader).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glCompileShader.xml}{glCompileShader()}.      This convenience function will do nothing on OpenGL/ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void* data)      Convenience function that calls glCompressedTexImage2D(\a target, \a level, \a internalformat, \a width, \a height, \a border, \a imageSize, \a data).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glCompressedTexImage2D.xml}{glCompressedTexImage2D()}. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void* data)      Convenience function that calls glCompressedTexSubImage2D(\a target, \a level, \a xoffset, \a yoffset, \a width, \a height, \a format, \a imageSize, \a data).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glCompressedTexSubImage2D.xml}{glCompressedTexSubImage2D()}. */
end_comment
begin_comment
comment|/*!     \fn GLuint QGLFunctions::glCreateProgram()      Convenience function that calls glCreateProgram().      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glCreateProgram.xml}{glCreateProgram()}.      This convenience function will do nothing on OpenGL/ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn GLuint QGLFunctions::glCreateShader(GLenum type)      Convenience function that calls glCreateShader(\a type).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glCreateShader.xml}{glCreateShader()}.      This convenience function will do nothing on OpenGL/ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glDeleteBuffers(GLsizei n, const GLuint* buffers)      Convenience function that calls glDeleteBuffers(\a n, \a buffers).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glDeleteBuffers.xml}{glDeleteBuffers()}. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glDeleteFramebuffers(GLsizei n, const GLuint* framebuffers)      Convenience function that calls glDeleteFramebuffers(\a n, \a framebuffers).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glDeleteFramebuffers.xml}{glDeleteFramebuffers()}. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glDeleteProgram(GLuint program)      Convenience function that calls glDeleteProgram(\a program).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glDeleteProgram.xml}{glDeleteProgram()}.      This convenience function will do nothing on OpenGL/ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glDeleteRenderbuffers(GLsizei n, const GLuint* renderbuffers)      Convenience function that calls glDeleteRenderbuffers(\a n, \a renderbuffers).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glDeleteRenderbuffers.xml}{glDeleteRenderbuffers()}. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glDeleteShader(GLuint shader)      Convenience function that calls glDeleteShader(\a shader).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glDeleteShader.xml}{glDeleteShader()}.      This convenience function will do nothing on OpenGL/ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glDepthRangef(GLclampf zNear, GLclampf zFar)      Convenience function that calls glDepthRange(\a zNear, \a zFar) on     desktop OpenGL systems and glDepthRangef(\a zNear, \a zFar) on     embedded OpenGL/ES systems.      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glDepthRangef.xml}{glDepthRangef()}. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glDetachShader(GLuint program, GLuint shader)      Convenience function that calls glDetachShader(\a program, \a shader).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glDetachShader.xml}{glDetachShader()}.      This convenience function will do nothing on OpenGL/ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glDisableVertexAttribArray(GLuint index)      Convenience function that calls glDisableVertexAttribArray(\a index).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glDisableVertexAttribArray.xml}{glDisableVertexAttribArray()}.      This convenience function will do nothing on OpenGL/ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glEnableVertexAttribArray(GLuint index)      Convenience function that calls glEnableVertexAttribArray(\a index).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glEnableVertexAttribArray.xml}{glEnableVertexAttribArray()}.      This convenience function will do nothing on OpenGL/ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)      Convenience function that calls glFramebufferRenderbuffer(\a target, \a attachment, \a renderbuffertarget, \a renderbuffer).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glFramebufferRenderbuffer.xml}{glFramebufferRenderbuffer()}. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)      Convenience function that calls glFramebufferTexture2D(\a target, \a attachment, \a textarget, \a texture, \a level).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glFramebufferTexture2D.xml}{glFramebufferTexture2D()}. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glGenBuffers(GLsizei n, GLuint* buffers)      Convenience function that calls glGenBuffers(\a n, \a buffers).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGenBuffers.xml}{glGenBuffers()}. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glGenerateMipmap(GLenum target)      Convenience function that calls glGenerateMipmap(\a target).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGenerateMipmap.xml}{glGenerateMipmap()}. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glGenFramebuffers(GLsizei n, GLuint* framebuffers)      Convenience function that calls glGenFramebuffers(\a n, \a framebuffers).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGenFramebuffers.xml}{glGenFramebuffers()}. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glGenRenderbuffers(GLsizei n, GLuint* renderbuffers)      Convenience function that calls glGenRenderbuffers(\a n, \a renderbuffers).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGenRenderbuffers.xml}{glGenRenderbuffers()}. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufsize, GLsizei* length, GLint* size, GLenum* type, char* name)      Convenience function that calls glGetActiveAttrib(\a program, \a index, \a bufsize, \a length, \a size, \a type, \a name).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGetActiveAttrib.xml}{glGetActiveAttrib()}.      This convenience function will do nothing on OpenGL/ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glGetActiveUniform(GLuint program, GLuint index, GLsizei bufsize, GLsizei* length, GLint* size, GLenum* type, char* name)      Convenience function that calls glGetActiveUniform(\a program, \a index, \a bufsize, \a length, \a size, \a type, \a name).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGetActiveUniform.xml}{glGetActiveUniform()}.      This convenience function will do nothing on OpenGL/ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glGetAttachedShaders(GLuint program, GLsizei maxcount, GLsizei* count, GLuint* shaders)      Convenience function that calls glGetAttachedShaders(\a program, \a maxcount, \a count, \a shaders).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGetAttachedShaders.xml}{glGetAttachedShaders()}.      This convenience function will do nothing on OpenGL/ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn int QGLFunctions::glGetAttribLocation(GLuint program, const char* name)      Convenience function that calls glGetAttribLocation(\a program, \a name).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGetAttribLocation.xml}{glGetAttribLocation()}.      This convenience function will do nothing on OpenGL/ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glGetBufferParameteriv(GLenum target, GLenum pname, GLint* params)      Convenience function that calls glGetBufferParameteriv(\a target, \a pname, \a params).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGetBufferParameteriv.xml}{glGetBufferParameteriv()}. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint* params)      Convenience function that calls glGetFramebufferAttachmentParameteriv(\a target, \a attachment, \a pname, \a params).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGetFramebufferAttachmentParameteriv.xml}{glGetFramebufferAttachmentParameteriv()}. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glGetProgramiv(GLuint program, GLenum pname, GLint* params)      Convenience function that calls glGetProgramiv(\a program, \a pname, \a params).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGetProgramiv.xml}{glGetProgramiv()}.      This convenience function will do nothing on OpenGL/ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glGetProgramInfoLog(GLuint program, GLsizei bufsize, GLsizei* length, char* infolog)      Convenience function that calls glGetProgramInfoLog(\a program, \a bufsize, \a length, \a infolog).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGetProgramInfoLog.xml}{glGetProgramInfoLog()}.      This convenience function will do nothing on OpenGL/ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint* params)      Convenience function that calls glGetRenderbufferParameteriv(\a target, \a pname, \a params).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGetRenderbufferParameteriv.xml}{glGetRenderbufferParameteriv()}. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glGetShaderiv(GLuint shader, GLenum pname, GLint* params)      Convenience function that calls glGetShaderiv(\a shader, \a pname, \a params).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGetShaderiv.xml}{glGetShaderiv()}.      This convenience function will do nothing on OpenGL/ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glGetShaderInfoLog(GLuint shader, GLsizei bufsize, GLsizei* length, char* infolog)      Convenience function that calls glGetShaderInfoLog(\a shader, \a bufsize, \a length, \a infolog).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGetShaderInfoLog.xml}{glGetShaderInfoLog()}.      This convenience function will do nothing on OpenGL/ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glGetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, GLint* range, GLint* precision)      Convenience function that calls glGetShaderPrecisionFormat(\a shadertype, \a precisiontype, \a range, \a precision).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGetShaderPrecisionFormat.xml}{glGetShaderPrecisionFormat()}.      This convenience function will do nothing on OpenGL/ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glGetShaderSource(GLuint shader, GLsizei bufsize, GLsizei* length, char* source)      Convenience function that calls glGetShaderSource(\a shader, \a bufsize, \a length, \a source).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGetShaderSource.xml}{glGetShaderSource()}.      This convenience function will do nothing on OpenGL/ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glGetUniformfv(GLuint program, GLint location, GLfloat* params)      Convenience function that calls glGetUniformfv(\a program, \a location, \a params).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGetUniformfv.xml}{glGetUniformfv()}.      This convenience function will do nothing on OpenGL/ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glGetUniformiv(GLuint program, GLint location, GLint* params)      Convenience function that calls glGetUniformiv(\a program, \a location, \a params).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGetUniformiv.xml}{glGetUniformiv()}.      This convenience function will do nothing on OpenGL/ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn int QGLFunctions::glGetUniformLocation(GLuint program, const char* name)      Convenience function that calls glGetUniformLocation(\a program, \a name).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGetUniformLocation.xml}{glGetUniformLocation()}.      This convenience function will do nothing on OpenGL/ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat* params)      Convenience function that calls glGetVertexAttribfv(\a index, \a pname, \a params).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGetVertexAttribfv.xml}{glGetVertexAttribfv()}.      This convenience function will do nothing on OpenGL/ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glGetVertexAttribiv(GLuint index, GLenum pname, GLint* params)      Convenience function that calls glGetVertexAttribiv(\a index, \a pname, \a params).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGetVertexAttribiv.xml}{glGetVertexAttribiv()}.      This convenience function will do nothing on OpenGL/ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glGetVertexAttribPointerv(GLuint index, GLenum pname, void** pointer)      Convenience function that calls glGetVertexAttribPointerv(\a index, \a pname, \a pointer).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glGetVertexAttribPointerv.xml}{glGetVertexAttribPointerv()}.      This convenience function will do nothing on OpenGL/ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn GLboolean QGLFunctions::glIsBuffer(GLuint buffer)      Convenience function that calls glIsBuffer(\a buffer).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glIsBuffer.xml}{glIsBuffer()}. */
end_comment
begin_comment
comment|/*!     \fn GLboolean QGLFunctions::glIsFramebuffer(GLuint framebuffer)      Convenience function that calls glIsFramebuffer(\a framebuffer).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glIsFramebuffer.xml}{glIsFramebuffer()}. */
end_comment
begin_comment
comment|/*!     \fn GLboolean QGLFunctions::glIsProgram(GLuint program)      Convenience function that calls glIsProgram(\a program).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glIsProgram.xml}{glIsProgram()}.      This convenience function will do nothing on OpenGL/ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn GLboolean QGLFunctions::glIsRenderbuffer(GLuint renderbuffer)      Convenience function that calls glIsRenderbuffer(\a renderbuffer).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glIsRenderbuffer.xml}{glIsRenderbuffer()}. */
end_comment
begin_comment
comment|/*!     \fn GLboolean QGLFunctions::glIsShader(GLuint shader)      Convenience function that calls glIsShader(\a shader).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glIsShader.xml}{glIsShader()}.      This convenience function will do nothing on OpenGL/ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glLinkProgram(GLuint program)      Convenience function that calls glLinkProgram(\a program).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glLinkProgram.xml}{glLinkProgram()}.      This convenience function will do nothing on OpenGL/ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glReleaseShaderCompiler()      Convenience function that calls glReleaseShaderCompiler().      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glReleaseShaderCompiler.xml}{glReleaseShaderCompiler()}.      This convenience function will do nothing on OpenGL/ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)      Convenience function that calls glRenderbufferStorage(\a target, \a internalformat, \a width, \a height).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glRenderbufferStorage.xml}{glRenderbufferStorage()}. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glSampleCoverage(GLclampf value, GLboolean invert)      Convenience function that calls glSampleCoverage(\a value, \a invert).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glSampleCoverage.xml}{glSampleCoverage()}. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glShaderBinary(GLint n, const GLuint* shaders, GLenum binaryformat, const void* binary, GLint length)      Convenience function that calls glShaderBinary(\a n, \a shaders, \a binaryformat, \a binary, \a length).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glShaderBinary.xml}{glShaderBinary()}.      This convenience function will do nothing on OpenGL/ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glShaderSource(GLuint shader, GLsizei count, const char** string, const GLint* length)      Convenience function that calls glShaderSource(\a shader, \a count, \a string, \a length).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glShaderSource.xml}{glShaderSource()}.      This convenience function will do nothing on OpenGL/ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask)      Convenience function that calls glStencilFuncSeparate(\a face, \a func, \a ref, \a mask).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glStencilFuncSeparate.xml}{glStencilFuncSeparate()}. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glStencilMaskSeparate(GLenum face, GLuint mask)      Convenience function that calls glStencilMaskSeparate(\a face, \a mask).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glStencilMaskSeparate.xml}{glStencilMaskSeparate()}. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glStencilOpSeparate(GLenum face, GLenum fail, GLenum zfail, GLenum zpass)      Convenience function that calls glStencilOpSeparate(\a face, \a fail, \a zfail, \a zpass).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glStencilOpSeparate.xml}{glStencilOpSeparate()}. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glUniform1f(GLint location, GLfloat x)      Convenience function that calls glUniform1f(\a location, \a x).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glUniform1f.xml}{glUniform1f()}.      This convenience function will do nothing on OpenGL/ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glUniform1fv(GLint location, GLsizei count, const GLfloat* v)      Convenience function that calls glUniform1fv(\a location, \a count, \a v).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glUniform1fv.xml}{glUniform1fv()}.      This convenience function will do nothing on OpenGL/ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glUniform1i(GLint location, GLint x)      Convenience function that calls glUniform1i(\a location, \a x).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glUniform1i.xml}{glUniform1i()}.      This convenience function will do nothing on OpenGL/ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glUniform1iv(GLint location, GLsizei count, const GLint* v)      Convenience function that calls glUniform1iv(\a location, \a count, \a v).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glUniform1iv.xml}{glUniform1iv()}.      This convenience function will do nothing on OpenGL/ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glUniform2f(GLint location, GLfloat x, GLfloat y)      Convenience function that calls glUniform2f(\a location, \a x, \a y).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glUniform2f.xml}{glUniform2f()}.      This convenience function will do nothing on OpenGL/ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glUniform2fv(GLint location, GLsizei count, const GLfloat* v)      Convenience function that calls glUniform2fv(\a location, \a count, \a v).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glUniform2fv.xml}{glUniform2fv()}.      This convenience function will do nothing on OpenGL/ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glUniform2i(GLint location, GLint x, GLint y)      Convenience function that calls glUniform2i(\a location, \a x, \a y).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glUniform2i.xml}{glUniform2i()}.      This convenience function will do nothing on OpenGL/ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glUniform2iv(GLint location, GLsizei count, const GLint* v)      Convenience function that calls glUniform2iv(\a location, \a count, \a v).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glUniform2iv.xml}{glUniform2iv()}.      This convenience function will do nothing on OpenGL/ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glUniform3f(GLint location, GLfloat x, GLfloat y, GLfloat z)      Convenience function that calls glUniform3f(\a location, \a x, \a y, \a z).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glUniform3f.xml}{glUniform3f()}.      This convenience function will do nothing on OpenGL/ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glUniform3fv(GLint location, GLsizei count, const GLfloat* v)      Convenience function that calls glUniform3fv(\a location, \a count, \a v).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glUniform3fv.xml}{glUniform3fv()}.      This convenience function will do nothing on OpenGL/ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glUniform3i(GLint location, GLint x, GLint y, GLint z)      Convenience function that calls glUniform3i(\a location, \a x, \a y, \a z).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glUniform3i.xml}{glUniform3i()}.      This convenience function will do nothing on OpenGL/ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glUniform3iv(GLint location, GLsizei count, const GLint* v)      Convenience function that calls glUniform3iv(\a location, \a count, \a v).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glUniform3iv.xml}{glUniform3iv()}.      This convenience function will do nothing on OpenGL/ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glUniform4f(GLint location, GLfloat x, GLfloat y, GLfloat z, GLfloat w)      Convenience function that calls glUniform4f(\a location, \a x, \a y, \a z, \a w).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glUniform4f.xml}{glUniform4f()}.      This convenience function will do nothing on OpenGL/ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glUniform4fv(GLint location, GLsizei count, const GLfloat* v)      Convenience function that calls glUniform4fv(\a location, \a count, \a v).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glUniform4fv.xml}{glUniform4fv()}.      This convenience function will do nothing on OpenGL/ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glUniform4i(GLint location, GLint x, GLint y, GLint z, GLint w)      Convenience function that calls glUniform4i(\a location, \a x, \a y, \a z, \a w).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glUniform4i.xml}{glUniform4i()}.      This convenience function will do nothing on OpenGL/ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glUniform4iv(GLint location, GLsizei count, const GLint* v)      Convenience function that calls glUniform4iv(\a location, \a count, \a v).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glUniform4iv.xml}{glUniform4iv()}.      This convenience function will do nothing on OpenGL/ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)      Convenience function that calls glUniformMatrix2fv(\a location, \a count, \a transpose, \a value).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glUniformMatrix2fv.xml}{glUniformMatrix2fv()}.      This convenience function will do nothing on OpenGL/ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)      Convenience function that calls glUniformMatrix3fv(\a location, \a count, \a transpose, \a value).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glUniformMatrix3fv.xml}{glUniformMatrix3fv()}.      This convenience function will do nothing on OpenGL/ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)      Convenience function that calls glUniformMatrix4fv(\a location, \a count, \a transpose, \a value).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glUniformMatrix4fv.xml}{glUniformMatrix4fv()}.      This convenience function will do nothing on OpenGL/ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glUseProgram(GLuint program)      Convenience function that calls glUseProgram(\a program).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glUseProgram.xml}{glUseProgram()}.      This convenience function will do nothing on OpenGL/ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glValidateProgram(GLuint program)      Convenience function that calls glValidateProgram(\a program).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glValidateProgram.xml}{glValidateProgram()}.      This convenience function will do nothing on OpenGL/ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glVertexAttrib1f(GLuint indx, GLfloat x)      Convenience function that calls glVertexAttrib1f(\a indx, \a x).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glVertexAttrib1f.xml}{glVertexAttrib1f()}.      This convenience function will do nothing on OpenGL/ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glVertexAttrib1fv(GLuint indx, const GLfloat* values)      Convenience function that calls glVertexAttrib1fv(\a indx, \a values).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glVertexAttrib1fv.xml}{glVertexAttrib1fv()}.      This convenience function will do nothing on OpenGL/ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glVertexAttrib2f(GLuint indx, GLfloat x, GLfloat y)      Convenience function that calls glVertexAttrib2f(\a indx, \a x, \a y).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glVertexAttrib2f.xml}{glVertexAttrib2f()}.      This convenience function will do nothing on OpenGL/ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glVertexAttrib2fv(GLuint indx, const GLfloat* values)      Convenience function that calls glVertexAttrib2fv(\a indx, \a values).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glVertexAttrib2fv.xml}{glVertexAttrib2fv()}.      This convenience function will do nothing on OpenGL/ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glVertexAttrib3f(GLuint indx, GLfloat x, GLfloat y, GLfloat z)      Convenience function that calls glVertexAttrib3f(\a indx, \a x, \a y, \a z).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glVertexAttrib3f.xml}{glVertexAttrib3f()}.      This convenience function will do nothing on OpenGL/ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glVertexAttrib3fv(GLuint indx, const GLfloat* values)      Convenience function that calls glVertexAttrib3fv(\a indx, \a values).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glVertexAttrib3fv.xml}{glVertexAttrib3fv()}.      This convenience function will do nothing on OpenGL/ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glVertexAttrib4f(GLuint indx, GLfloat x, GLfloat y, GLfloat z, GLfloat w)      Convenience function that calls glVertexAttrib4f(\a indx, \a x, \a y, \a z, \a w).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glVertexAttrib4f.xml}{glVertexAttrib4f()}.      This convenience function will do nothing on OpenGL/ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glVertexAttrib4fv(GLuint indx, const GLfloat* values)      Convenience function that calls glVertexAttrib4fv(\a indx, \a values).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glVertexAttrib4fv.xml}{glVertexAttrib4fv()}.      This convenience function will do nothing on OpenGL/ES 1.x systems. */
end_comment
begin_comment
comment|/*!     \fn void QGLFunctions::glVertexAttribPointer(GLuint indx, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void* ptr)      Convenience function that calls glVertexAttribPointer(\a indx, \a size, \a type, \a normalized, \a stride, \a ptr).      For more information, see the OpenGL/ES 2.0 documentation for     \l{http://www.khronos.org/opengles/sdk/docs/man/glVertexAttribPointer.xml}{glVertexAttribPointer()}.      This convenience function will do nothing on OpenGL/ES 1.x systems. */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_OPENGL_ES_2
end_ifndef
begin_function
DECL|function|qglfResolveActiveTexture
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveActiveTexture
parameter_list|(
name|GLenum
name|texture
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glActiveTexture
function_decl|)
parameter_list|(
name|GLenum
name|texture
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|activeTexture
operator|=
operator|(
name|type_glActiveTexture
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glActiveTexture"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|funcs
operator|->
name|activeTexture
condition|)
block|{
name|funcs
operator|->
name|activeTexture
operator|=
operator|(
name|type_glActiveTexture
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glActiveTextureARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|activeTexture
condition|)
name|funcs
operator|->
name|activeTexture
argument_list|(
name|texture
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|activeTexture
operator|=
name|qglfResolveActiveTexture
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveAttachShader
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveAttachShader
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLuint
name|shader
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glAttachShader
function_decl|)
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLuint
name|shader
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|attachShader
operator|=
operator|(
name|type_glAttachShader
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glAttachShader"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|funcs
operator|->
name|attachShader
condition|)
block|{
name|funcs
operator|->
name|attachShader
operator|=
operator|(
name|type_glAttachShader
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glAttachObjectARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|attachShader
condition|)
name|funcs
operator|->
name|attachShader
argument_list|(
name|program
argument_list|,
name|shader
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|attachShader
operator|=
name|qglfResolveAttachShader
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveBindAttribLocation
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveBindAttribLocation
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLuint
name|index
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glBindAttribLocation
function_decl|)
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLuint
name|index
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|bindAttribLocation
operator|=
operator|(
name|type_glBindAttribLocation
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glBindAttribLocation"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|funcs
operator|->
name|bindAttribLocation
condition|)
block|{
name|funcs
operator|->
name|bindAttribLocation
operator|=
operator|(
name|type_glBindAttribLocation
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glBindAttribLocationARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|bindAttribLocation
condition|)
name|funcs
operator|->
name|bindAttribLocation
argument_list|(
name|program
argument_list|,
name|index
argument_list|,
name|name
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|bindAttribLocation
operator|=
name|qglfResolveBindAttribLocation
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveBindBuffer
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveBindBuffer
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLuint
name|buffer
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glBindBuffer
function_decl|)
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLuint
name|buffer
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|bindBuffer
operator|=
operator|(
name|type_glBindBuffer
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glBindBuffer"
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_OPENGL_ES
if|if
condition|(
operator|!
name|funcs
operator|->
name|bindBuffer
condition|)
block|{
name|funcs
operator|->
name|bindBuffer
operator|=
operator|(
name|type_glBindBuffer
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glBindBufferOES"
argument_list|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
operator|!
name|funcs
operator|->
name|bindBuffer
condition|)
block|{
name|funcs
operator|->
name|bindBuffer
operator|=
operator|(
name|type_glBindBuffer
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glBindBufferEXT"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|funcs
operator|->
name|bindBuffer
condition|)
block|{
name|funcs
operator|->
name|bindBuffer
operator|=
operator|(
name|type_glBindBuffer
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glBindBufferARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|bindBuffer
condition|)
name|funcs
operator|->
name|bindBuffer
argument_list|(
name|target
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|bindBuffer
operator|=
name|qglfResolveBindBuffer
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveBindFramebuffer
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveBindFramebuffer
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLuint
name|framebuffer
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glBindFramebuffer
function_decl|)
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLuint
name|framebuffer
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|bindFramebuffer
operator|=
operator|(
name|type_glBindFramebuffer
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glBindFramebuffer"
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_OPENGL_ES
if|if
condition|(
operator|!
name|funcs
operator|->
name|bindFramebuffer
condition|)
block|{
name|funcs
operator|->
name|bindFramebuffer
operator|=
operator|(
name|type_glBindFramebuffer
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glBindFramebufferOES"
argument_list|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
operator|!
name|funcs
operator|->
name|bindFramebuffer
condition|)
block|{
name|funcs
operator|->
name|bindFramebuffer
operator|=
operator|(
name|type_glBindFramebuffer
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glBindFramebufferEXT"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|funcs
operator|->
name|bindFramebuffer
condition|)
block|{
name|funcs
operator|->
name|bindFramebuffer
operator|=
operator|(
name|type_glBindFramebuffer
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glBindFramebufferARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|bindFramebuffer
condition|)
name|funcs
operator|->
name|bindFramebuffer
argument_list|(
name|target
argument_list|,
name|framebuffer
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|bindFramebuffer
operator|=
name|qglfResolveBindFramebuffer
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveBindRenderbuffer
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveBindRenderbuffer
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLuint
name|renderbuffer
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glBindRenderbuffer
function_decl|)
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLuint
name|renderbuffer
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|bindRenderbuffer
operator|=
operator|(
name|type_glBindRenderbuffer
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glBindRenderbuffer"
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_OPENGL_ES
if|if
condition|(
operator|!
name|funcs
operator|->
name|bindRenderbuffer
condition|)
block|{
name|funcs
operator|->
name|bindRenderbuffer
operator|=
operator|(
name|type_glBindRenderbuffer
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glBindRenderbufferOES"
argument_list|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
operator|!
name|funcs
operator|->
name|bindRenderbuffer
condition|)
block|{
name|funcs
operator|->
name|bindRenderbuffer
operator|=
operator|(
name|type_glBindRenderbuffer
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glBindRenderbufferEXT"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|funcs
operator|->
name|bindRenderbuffer
condition|)
block|{
name|funcs
operator|->
name|bindRenderbuffer
operator|=
operator|(
name|type_glBindRenderbuffer
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glBindRenderbufferARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|bindRenderbuffer
condition|)
name|funcs
operator|->
name|bindRenderbuffer
argument_list|(
name|target
argument_list|,
name|renderbuffer
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|bindRenderbuffer
operator|=
name|qglfResolveBindRenderbuffer
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveBlendColor
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveBlendColor
parameter_list|(
name|GLclampf
name|red
parameter_list|,
name|GLclampf
name|green
parameter_list|,
name|GLclampf
name|blue
parameter_list|,
name|GLclampf
name|alpha
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glBlendColor
function_decl|)
parameter_list|(
name|GLclampf
name|red
parameter_list|,
name|GLclampf
name|green
parameter_list|,
name|GLclampf
name|blue
parameter_list|,
name|GLclampf
name|alpha
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|blendColor
operator|=
operator|(
name|type_glBlendColor
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glBlendColor"
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_OPENGL_ES
if|if
condition|(
operator|!
name|funcs
operator|->
name|blendColor
condition|)
block|{
name|funcs
operator|->
name|blendColor
operator|=
operator|(
name|type_glBlendColor
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glBlendColorOES"
argument_list|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
operator|!
name|funcs
operator|->
name|blendColor
condition|)
block|{
name|funcs
operator|->
name|blendColor
operator|=
operator|(
name|type_glBlendColor
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glBlendColorEXT"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|funcs
operator|->
name|blendColor
condition|)
block|{
name|funcs
operator|->
name|blendColor
operator|=
operator|(
name|type_glBlendColor
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glBlendColorARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|blendColor
condition|)
name|funcs
operator|->
name|blendColor
argument_list|(
name|red
argument_list|,
name|green
argument_list|,
name|blue
argument_list|,
name|alpha
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|blendColor
operator|=
name|qglfResolveBlendColor
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveBlendEquation
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveBlendEquation
parameter_list|(
name|GLenum
name|mode
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glBlendEquation
function_decl|)
parameter_list|(
name|GLenum
name|mode
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|blendEquation
operator|=
operator|(
name|type_glBlendEquation
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glBlendEquation"
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_OPENGL_ES
if|if
condition|(
operator|!
name|funcs
operator|->
name|blendEquation
condition|)
block|{
name|funcs
operator|->
name|blendEquation
operator|=
operator|(
name|type_glBlendEquation
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glBlendEquationOES"
argument_list|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
operator|!
name|funcs
operator|->
name|blendEquation
condition|)
block|{
name|funcs
operator|->
name|blendEquation
operator|=
operator|(
name|type_glBlendEquation
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glBlendEquationEXT"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|funcs
operator|->
name|blendEquation
condition|)
block|{
name|funcs
operator|->
name|blendEquation
operator|=
operator|(
name|type_glBlendEquation
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glBlendEquationARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|blendEquation
condition|)
name|funcs
operator|->
name|blendEquation
argument_list|(
name|mode
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|blendEquation
operator|=
name|qglfResolveBlendEquation
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveBlendEquationSeparate
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveBlendEquationSeparate
parameter_list|(
name|GLenum
name|modeRGB
parameter_list|,
name|GLenum
name|modeAlpha
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glBlendEquationSeparate
function_decl|)
parameter_list|(
name|GLenum
name|modeRGB
parameter_list|,
name|GLenum
name|modeAlpha
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|blendEquationSeparate
operator|=
operator|(
name|type_glBlendEquationSeparate
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glBlendEquationSeparate"
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_OPENGL_ES
if|if
condition|(
operator|!
name|funcs
operator|->
name|blendEquationSeparate
condition|)
block|{
name|funcs
operator|->
name|blendEquationSeparate
operator|=
operator|(
name|type_glBlendEquationSeparate
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glBlendEquationSeparateOES"
argument_list|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
operator|!
name|funcs
operator|->
name|blendEquationSeparate
condition|)
block|{
name|funcs
operator|->
name|blendEquationSeparate
operator|=
operator|(
name|type_glBlendEquationSeparate
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glBlendEquationSeparateEXT"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|funcs
operator|->
name|blendEquationSeparate
condition|)
block|{
name|funcs
operator|->
name|blendEquationSeparate
operator|=
operator|(
name|type_glBlendEquationSeparate
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glBlendEquationSeparateARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|blendEquationSeparate
condition|)
name|funcs
operator|->
name|blendEquationSeparate
argument_list|(
name|modeRGB
argument_list|,
name|modeAlpha
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|blendEquationSeparate
operator|=
name|qglfResolveBlendEquationSeparate
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveBlendFuncSeparate
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveBlendFuncSeparate
parameter_list|(
name|GLenum
name|srcRGB
parameter_list|,
name|GLenum
name|dstRGB
parameter_list|,
name|GLenum
name|srcAlpha
parameter_list|,
name|GLenum
name|dstAlpha
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glBlendFuncSeparate
function_decl|)
parameter_list|(
name|GLenum
name|srcRGB
parameter_list|,
name|GLenum
name|dstRGB
parameter_list|,
name|GLenum
name|srcAlpha
parameter_list|,
name|GLenum
name|dstAlpha
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|blendFuncSeparate
operator|=
operator|(
name|type_glBlendFuncSeparate
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glBlendFuncSeparate"
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_OPENGL_ES
if|if
condition|(
operator|!
name|funcs
operator|->
name|blendFuncSeparate
condition|)
block|{
name|funcs
operator|->
name|blendFuncSeparate
operator|=
operator|(
name|type_glBlendFuncSeparate
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glBlendFuncSeparateOES"
argument_list|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
operator|!
name|funcs
operator|->
name|blendFuncSeparate
condition|)
block|{
name|funcs
operator|->
name|blendFuncSeparate
operator|=
operator|(
name|type_glBlendFuncSeparate
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glBlendFuncSeparateEXT"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|funcs
operator|->
name|blendFuncSeparate
condition|)
block|{
name|funcs
operator|->
name|blendFuncSeparate
operator|=
operator|(
name|type_glBlendFuncSeparate
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glBlendFuncSeparateARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|blendFuncSeparate
condition|)
name|funcs
operator|->
name|blendFuncSeparate
argument_list|(
name|srcRGB
argument_list|,
name|dstRGB
argument_list|,
name|srcAlpha
argument_list|,
name|dstAlpha
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|blendFuncSeparate
operator|=
name|qglfResolveBlendFuncSeparate
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveBufferData
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveBufferData
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|qgl_GLsizeiptr
name|size
parameter_list|,
specifier|const
name|void
modifier|*
name|data
parameter_list|,
name|GLenum
name|usage
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glBufferData
function_decl|)
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|qgl_GLsizeiptr
name|size
parameter_list|,
specifier|const
name|void
modifier|*
name|data
parameter_list|,
name|GLenum
name|usage
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|bufferData
operator|=
operator|(
name|type_glBufferData
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glBufferData"
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_OPENGL_ES
if|if
condition|(
operator|!
name|funcs
operator|->
name|bufferData
condition|)
block|{
name|funcs
operator|->
name|bufferData
operator|=
operator|(
name|type_glBufferData
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glBufferDataOES"
argument_list|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
operator|!
name|funcs
operator|->
name|bufferData
condition|)
block|{
name|funcs
operator|->
name|bufferData
operator|=
operator|(
name|type_glBufferData
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glBufferDataEXT"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|funcs
operator|->
name|bufferData
condition|)
block|{
name|funcs
operator|->
name|bufferData
operator|=
operator|(
name|type_glBufferData
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glBufferDataARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|bufferData
condition|)
name|funcs
operator|->
name|bufferData
argument_list|(
name|target
argument_list|,
name|size
argument_list|,
name|data
argument_list|,
name|usage
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|bufferData
operator|=
name|qglfResolveBufferData
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveBufferSubData
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveBufferSubData
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|qgl_GLintptr
name|offset
parameter_list|,
name|qgl_GLsizeiptr
name|size
parameter_list|,
specifier|const
name|void
modifier|*
name|data
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glBufferSubData
function_decl|)
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|qgl_GLintptr
name|offset
parameter_list|,
name|qgl_GLsizeiptr
name|size
parameter_list|,
specifier|const
name|void
modifier|*
name|data
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|bufferSubData
operator|=
operator|(
name|type_glBufferSubData
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glBufferSubData"
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_OPENGL_ES
if|if
condition|(
operator|!
name|funcs
operator|->
name|bufferSubData
condition|)
block|{
name|funcs
operator|->
name|bufferSubData
operator|=
operator|(
name|type_glBufferSubData
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glBufferSubDataOES"
argument_list|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
operator|!
name|funcs
operator|->
name|bufferSubData
condition|)
block|{
name|funcs
operator|->
name|bufferSubData
operator|=
operator|(
name|type_glBufferSubData
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glBufferSubDataEXT"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|funcs
operator|->
name|bufferSubData
condition|)
block|{
name|funcs
operator|->
name|bufferSubData
operator|=
operator|(
name|type_glBufferSubData
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glBufferSubDataARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|bufferSubData
condition|)
name|funcs
operator|->
name|bufferSubData
argument_list|(
name|target
argument_list|,
name|offset
argument_list|,
name|size
argument_list|,
name|data
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|bufferSubData
operator|=
name|qglfResolveBufferSubData
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveCheckFramebufferStatus
specifier|static
name|GLenum
name|QGLF_APIENTRY
name|qglfResolveCheckFramebufferStatus
parameter_list|(
name|GLenum
name|target
parameter_list|)
block|{
typedef|typedef
name|GLenum
function_decl|(
name|QGLF_APIENTRYP
name|type_glCheckFramebufferStatus
function_decl|)
parameter_list|(
name|GLenum
name|target
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|checkFramebufferStatus
operator|=
operator|(
name|type_glCheckFramebufferStatus
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glCheckFramebufferStatus"
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_OPENGL_ES
if|if
condition|(
operator|!
name|funcs
operator|->
name|checkFramebufferStatus
condition|)
block|{
name|funcs
operator|->
name|checkFramebufferStatus
operator|=
operator|(
name|type_glCheckFramebufferStatus
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glCheckFramebufferStatusOES"
argument_list|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
operator|!
name|funcs
operator|->
name|checkFramebufferStatus
condition|)
block|{
name|funcs
operator|->
name|checkFramebufferStatus
operator|=
operator|(
name|type_glCheckFramebufferStatus
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glCheckFramebufferStatusEXT"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|funcs
operator|->
name|checkFramebufferStatus
condition|)
block|{
name|funcs
operator|->
name|checkFramebufferStatus
operator|=
operator|(
name|type_glCheckFramebufferStatus
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glCheckFramebufferStatusARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|checkFramebufferStatus
condition|)
return|return
name|funcs
operator|->
name|checkFramebufferStatus
argument_list|(
name|target
argument_list|)
return|;
name|funcs
operator|->
name|checkFramebufferStatus
operator|=
name|qglfResolveCheckFramebufferStatus
expr_stmt|;
return|return
name|GLenum
argument_list|(
literal|0
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qglfResolveCompileShader
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveCompileShader
parameter_list|(
name|GLuint
name|shader
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glCompileShader
function_decl|)
parameter_list|(
name|GLuint
name|shader
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|compileShader
operator|=
operator|(
name|type_glCompileShader
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glCompileShader"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|funcs
operator|->
name|compileShader
condition|)
block|{
name|funcs
operator|->
name|compileShader
operator|=
operator|(
name|type_glCompileShader
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glCompileShader"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|compileShader
condition|)
name|funcs
operator|->
name|compileShader
argument_list|(
name|shader
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|compileShader
operator|=
name|qglfResolveCompileShader
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveCompressedTexImage2D
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveCompressedTexImage2D
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLenum
name|internalformat
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLint
name|border
parameter_list|,
name|GLsizei
name|imageSize
parameter_list|,
specifier|const
name|void
modifier|*
name|data
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glCompressedTexImage2D
function_decl|)
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLenum
name|internalformat
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLint
name|border
parameter_list|,
name|GLsizei
name|imageSize
parameter_list|,
specifier|const
name|void
modifier|*
name|data
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|compressedTexImage2D
operator|=
operator|(
name|type_glCompressedTexImage2D
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glCompressedTexImage2D"
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_OPENGL_ES
if|if
condition|(
operator|!
name|funcs
operator|->
name|compressedTexImage2D
condition|)
block|{
name|funcs
operator|->
name|compressedTexImage2D
operator|=
operator|(
name|type_glCompressedTexImage2D
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glCompressedTexImage2DOES"
argument_list|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
operator|!
name|funcs
operator|->
name|compressedTexImage2D
condition|)
block|{
name|funcs
operator|->
name|compressedTexImage2D
operator|=
operator|(
name|type_glCompressedTexImage2D
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glCompressedTexImage2DEXT"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|funcs
operator|->
name|compressedTexImage2D
condition|)
block|{
name|funcs
operator|->
name|compressedTexImage2D
operator|=
operator|(
name|type_glCompressedTexImage2D
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glCompressedTexImage2DARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|compressedTexImage2D
condition|)
name|funcs
operator|->
name|compressedTexImage2D
argument_list|(
name|target
argument_list|,
name|level
argument_list|,
name|internalformat
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|border
argument_list|,
name|imageSize
argument_list|,
name|data
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|compressedTexImage2D
operator|=
name|qglfResolveCompressedTexImage2D
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveCompressedTexSubImage2D
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveCompressedTexSubImage2D
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLsizei
name|imageSize
parameter_list|,
specifier|const
name|void
modifier|*
name|data
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glCompressedTexSubImage2D
function_decl|)
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLsizei
name|imageSize
parameter_list|,
specifier|const
name|void
modifier|*
name|data
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|compressedTexSubImage2D
operator|=
operator|(
name|type_glCompressedTexSubImage2D
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glCompressedTexSubImage2D"
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_OPENGL_ES
if|if
condition|(
operator|!
name|funcs
operator|->
name|compressedTexSubImage2D
condition|)
block|{
name|funcs
operator|->
name|compressedTexSubImage2D
operator|=
operator|(
name|type_glCompressedTexSubImage2D
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glCompressedTexSubImage2DOES"
argument_list|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
operator|!
name|funcs
operator|->
name|compressedTexSubImage2D
condition|)
block|{
name|funcs
operator|->
name|compressedTexSubImage2D
operator|=
operator|(
name|type_glCompressedTexSubImage2D
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glCompressedTexSubImage2DEXT"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|funcs
operator|->
name|compressedTexSubImage2D
condition|)
block|{
name|funcs
operator|->
name|compressedTexSubImage2D
operator|=
operator|(
name|type_glCompressedTexSubImage2D
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glCompressedTexSubImage2DARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|compressedTexSubImage2D
condition|)
name|funcs
operator|->
name|compressedTexSubImage2D
argument_list|(
name|target
argument_list|,
name|level
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|format
argument_list|,
name|imageSize
argument_list|,
name|data
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|compressedTexSubImage2D
operator|=
name|qglfResolveCompressedTexSubImage2D
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveCreateProgram
specifier|static
name|GLuint
name|QGLF_APIENTRY
name|qglfResolveCreateProgram
parameter_list|()
block|{
typedef|typedef
name|GLuint
function_decl|(
name|QGLF_APIENTRYP
name|type_glCreateProgram
function_decl|)
parameter_list|()
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|createProgram
operator|=
operator|(
name|type_glCreateProgram
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glCreateProgram"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|funcs
operator|->
name|createProgram
condition|)
block|{
name|funcs
operator|->
name|createProgram
operator|=
operator|(
name|type_glCreateProgram
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glCreateProgramObjectARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|createProgram
condition|)
return|return
name|funcs
operator|->
name|createProgram
argument_list|()
return|;
name|funcs
operator|->
name|createProgram
operator|=
name|qglfResolveCreateProgram
expr_stmt|;
return|return
name|GLuint
argument_list|(
literal|0
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qglfResolveCreateShader
specifier|static
name|GLuint
name|QGLF_APIENTRY
name|qglfResolveCreateShader
parameter_list|(
name|GLenum
name|type
parameter_list|)
block|{
typedef|typedef
name|GLuint
function_decl|(
name|QGLF_APIENTRYP
name|type_glCreateShader
function_decl|)
parameter_list|(
name|GLenum
name|type
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|createShader
operator|=
operator|(
name|type_glCreateShader
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glCreateShader"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|funcs
operator|->
name|createShader
condition|)
block|{
name|funcs
operator|->
name|createShader
operator|=
operator|(
name|type_glCreateShader
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glCreateShaderObjectARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|createShader
condition|)
return|return
name|funcs
operator|->
name|createShader
argument_list|(
name|type
argument_list|)
return|;
name|funcs
operator|->
name|createShader
operator|=
name|qglfResolveCreateShader
expr_stmt|;
return|return
name|GLuint
argument_list|(
literal|0
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qglfResolveDeleteBuffers
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveDeleteBuffers
parameter_list|(
name|GLsizei
name|n
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|buffers
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glDeleteBuffers
function_decl|)
parameter_list|(
name|GLsizei
name|n
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|buffers
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|deleteBuffers
operator|=
operator|(
name|type_glDeleteBuffers
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glDeleteBuffers"
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_OPENGL_ES
if|if
condition|(
operator|!
name|funcs
operator|->
name|deleteBuffers
condition|)
block|{
name|funcs
operator|->
name|deleteBuffers
operator|=
operator|(
name|type_glDeleteBuffers
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glDeleteBuffersOES"
argument_list|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
operator|!
name|funcs
operator|->
name|deleteBuffers
condition|)
block|{
name|funcs
operator|->
name|deleteBuffers
operator|=
operator|(
name|type_glDeleteBuffers
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glDeleteBuffersEXT"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|funcs
operator|->
name|deleteBuffers
condition|)
block|{
name|funcs
operator|->
name|deleteBuffers
operator|=
operator|(
name|type_glDeleteBuffers
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glDeleteBuffersARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|deleteBuffers
condition|)
name|funcs
operator|->
name|deleteBuffers
argument_list|(
name|n
argument_list|,
name|buffers
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|deleteBuffers
operator|=
name|qglfResolveDeleteBuffers
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveDeleteFramebuffers
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveDeleteFramebuffers
parameter_list|(
name|GLsizei
name|n
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|framebuffers
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glDeleteFramebuffers
function_decl|)
parameter_list|(
name|GLsizei
name|n
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|framebuffers
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|deleteFramebuffers
operator|=
operator|(
name|type_glDeleteFramebuffers
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glDeleteFramebuffers"
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_OPENGL_ES
if|if
condition|(
operator|!
name|funcs
operator|->
name|deleteFramebuffers
condition|)
block|{
name|funcs
operator|->
name|deleteFramebuffers
operator|=
operator|(
name|type_glDeleteFramebuffers
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glDeleteFramebuffersOES"
argument_list|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
operator|!
name|funcs
operator|->
name|deleteFramebuffers
condition|)
block|{
name|funcs
operator|->
name|deleteFramebuffers
operator|=
operator|(
name|type_glDeleteFramebuffers
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glDeleteFramebuffersEXT"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|funcs
operator|->
name|deleteFramebuffers
condition|)
block|{
name|funcs
operator|->
name|deleteFramebuffers
operator|=
operator|(
name|type_glDeleteFramebuffers
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glDeleteFramebuffersARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|deleteFramebuffers
condition|)
name|funcs
operator|->
name|deleteFramebuffers
argument_list|(
name|n
argument_list|,
name|framebuffers
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|deleteFramebuffers
operator|=
name|qglfResolveDeleteFramebuffers
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveDeleteProgram
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveDeleteProgram
parameter_list|(
name|GLuint
name|program
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glDeleteProgram
function_decl|)
parameter_list|(
name|GLuint
name|program
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|deleteProgram
operator|=
operator|(
name|type_glDeleteProgram
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glDeleteProgram"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|funcs
operator|->
name|deleteProgram
condition|)
block|{
name|funcs
operator|->
name|deleteProgram
operator|=
operator|(
name|type_glDeleteProgram
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glDeleteObjectARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|deleteProgram
condition|)
name|funcs
operator|->
name|deleteProgram
argument_list|(
name|program
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|deleteProgram
operator|=
name|qglfResolveDeleteProgram
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveDeleteRenderbuffers
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveDeleteRenderbuffers
parameter_list|(
name|GLsizei
name|n
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|renderbuffers
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glDeleteRenderbuffers
function_decl|)
parameter_list|(
name|GLsizei
name|n
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|renderbuffers
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|deleteRenderbuffers
operator|=
operator|(
name|type_glDeleteRenderbuffers
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glDeleteRenderbuffers"
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_OPENGL_ES
if|if
condition|(
operator|!
name|funcs
operator|->
name|deleteRenderbuffers
condition|)
block|{
name|funcs
operator|->
name|deleteRenderbuffers
operator|=
operator|(
name|type_glDeleteRenderbuffers
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glDeleteRenderbuffersOES"
argument_list|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
operator|!
name|funcs
operator|->
name|deleteRenderbuffers
condition|)
block|{
name|funcs
operator|->
name|deleteRenderbuffers
operator|=
operator|(
name|type_glDeleteRenderbuffers
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glDeleteRenderbuffersEXT"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|funcs
operator|->
name|deleteRenderbuffers
condition|)
block|{
name|funcs
operator|->
name|deleteRenderbuffers
operator|=
operator|(
name|type_glDeleteRenderbuffers
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glDeleteRenderbuffersARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|deleteRenderbuffers
condition|)
name|funcs
operator|->
name|deleteRenderbuffers
argument_list|(
name|n
argument_list|,
name|renderbuffers
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|deleteRenderbuffers
operator|=
name|qglfResolveDeleteRenderbuffers
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveDeleteShader
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveDeleteShader
parameter_list|(
name|GLuint
name|shader
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glDeleteShader
function_decl|)
parameter_list|(
name|GLuint
name|shader
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|deleteShader
operator|=
operator|(
name|type_glDeleteShader
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glDeleteShader"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|funcs
operator|->
name|deleteShader
condition|)
block|{
name|funcs
operator|->
name|deleteShader
operator|=
operator|(
name|type_glDeleteShader
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glDeleteObjectARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|deleteShader
condition|)
name|funcs
operator|->
name|deleteShader
argument_list|(
name|shader
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|deleteShader
operator|=
name|qglfResolveDeleteShader
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveDetachShader
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveDetachShader
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLuint
name|shader
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glDetachShader
function_decl|)
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLuint
name|shader
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|detachShader
operator|=
operator|(
name|type_glDetachShader
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glDetachShader"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|funcs
operator|->
name|detachShader
condition|)
block|{
name|funcs
operator|->
name|detachShader
operator|=
operator|(
name|type_glDetachShader
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glDetachObjectARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|detachShader
condition|)
name|funcs
operator|->
name|detachShader
argument_list|(
name|program
argument_list|,
name|shader
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|detachShader
operator|=
name|qglfResolveDetachShader
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveDisableVertexAttribArray
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveDisableVertexAttribArray
parameter_list|(
name|GLuint
name|index
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glDisableVertexAttribArray
function_decl|)
parameter_list|(
name|GLuint
name|index
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|disableVertexAttribArray
operator|=
operator|(
name|type_glDisableVertexAttribArray
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glDisableVertexAttribArray"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|funcs
operator|->
name|disableVertexAttribArray
condition|)
block|{
name|funcs
operator|->
name|disableVertexAttribArray
operator|=
operator|(
name|type_glDisableVertexAttribArray
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glDisableVertexAttribArrayARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|disableVertexAttribArray
condition|)
name|funcs
operator|->
name|disableVertexAttribArray
argument_list|(
name|index
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|disableVertexAttribArray
operator|=
name|qglfResolveDisableVertexAttribArray
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveEnableVertexAttribArray
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveEnableVertexAttribArray
parameter_list|(
name|GLuint
name|index
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glEnableVertexAttribArray
function_decl|)
parameter_list|(
name|GLuint
name|index
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|enableVertexAttribArray
operator|=
operator|(
name|type_glEnableVertexAttribArray
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glEnableVertexAttribArray"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|funcs
operator|->
name|enableVertexAttribArray
condition|)
block|{
name|funcs
operator|->
name|enableVertexAttribArray
operator|=
operator|(
name|type_glEnableVertexAttribArray
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glEnableVertexAttribArrayARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|enableVertexAttribArray
condition|)
name|funcs
operator|->
name|enableVertexAttribArray
argument_list|(
name|index
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|enableVertexAttribArray
operator|=
name|qglfResolveEnableVertexAttribArray
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveFramebufferRenderbuffer
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveFramebufferRenderbuffer
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|attachment
parameter_list|,
name|GLenum
name|renderbuffertarget
parameter_list|,
name|GLuint
name|renderbuffer
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glFramebufferRenderbuffer
function_decl|)
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|attachment
parameter_list|,
name|GLenum
name|renderbuffertarget
parameter_list|,
name|GLuint
name|renderbuffer
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|framebufferRenderbuffer
operator|=
operator|(
name|type_glFramebufferRenderbuffer
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glFramebufferRenderbuffer"
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_OPENGL_ES
if|if
condition|(
operator|!
name|funcs
operator|->
name|framebufferRenderbuffer
condition|)
block|{
name|funcs
operator|->
name|framebufferRenderbuffer
operator|=
operator|(
name|type_glFramebufferRenderbuffer
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glFramebufferRenderbufferOES"
argument_list|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
operator|!
name|funcs
operator|->
name|framebufferRenderbuffer
condition|)
block|{
name|funcs
operator|->
name|framebufferRenderbuffer
operator|=
operator|(
name|type_glFramebufferRenderbuffer
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glFramebufferRenderbufferEXT"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|funcs
operator|->
name|framebufferRenderbuffer
condition|)
block|{
name|funcs
operator|->
name|framebufferRenderbuffer
operator|=
operator|(
name|type_glFramebufferRenderbuffer
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glFramebufferRenderbufferARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|framebufferRenderbuffer
condition|)
name|funcs
operator|->
name|framebufferRenderbuffer
argument_list|(
name|target
argument_list|,
name|attachment
argument_list|,
name|renderbuffertarget
argument_list|,
name|renderbuffer
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|framebufferRenderbuffer
operator|=
name|qglfResolveFramebufferRenderbuffer
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveFramebufferTexture2D
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveFramebufferTexture2D
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|attachment
parameter_list|,
name|GLenum
name|textarget
parameter_list|,
name|GLuint
name|texture
parameter_list|,
name|GLint
name|level
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glFramebufferTexture2D
function_decl|)
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|attachment
parameter_list|,
name|GLenum
name|textarget
parameter_list|,
name|GLuint
name|texture
parameter_list|,
name|GLint
name|level
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|framebufferTexture2D
operator|=
operator|(
name|type_glFramebufferTexture2D
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glFramebufferTexture2D"
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_OPENGL_ES
if|if
condition|(
operator|!
name|funcs
operator|->
name|framebufferTexture2D
condition|)
block|{
name|funcs
operator|->
name|framebufferTexture2D
operator|=
operator|(
name|type_glFramebufferTexture2D
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glFramebufferTexture2DOES"
argument_list|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
operator|!
name|funcs
operator|->
name|framebufferTexture2D
condition|)
block|{
name|funcs
operator|->
name|framebufferTexture2D
operator|=
operator|(
name|type_glFramebufferTexture2D
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glFramebufferTexture2DEXT"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|funcs
operator|->
name|framebufferTexture2D
condition|)
block|{
name|funcs
operator|->
name|framebufferTexture2D
operator|=
operator|(
name|type_glFramebufferTexture2D
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glFramebufferTexture2DARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|framebufferTexture2D
condition|)
name|funcs
operator|->
name|framebufferTexture2D
argument_list|(
name|target
argument_list|,
name|attachment
argument_list|,
name|textarget
argument_list|,
name|texture
argument_list|,
name|level
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|framebufferTexture2D
operator|=
name|qglfResolveFramebufferTexture2D
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveGenBuffers
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveGenBuffers
parameter_list|(
name|GLsizei
name|n
parameter_list|,
name|GLuint
modifier|*
name|buffers
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glGenBuffers
function_decl|)
parameter_list|(
name|GLsizei
name|n
parameter_list|,
name|GLuint
modifier|*
name|buffers
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|genBuffers
operator|=
operator|(
name|type_glGenBuffers
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glGenBuffers"
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_OPENGL_ES
if|if
condition|(
operator|!
name|funcs
operator|->
name|genBuffers
condition|)
block|{
name|funcs
operator|->
name|genBuffers
operator|=
operator|(
name|type_glGenBuffers
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glGenBuffersOES"
argument_list|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
operator|!
name|funcs
operator|->
name|genBuffers
condition|)
block|{
name|funcs
operator|->
name|genBuffers
operator|=
operator|(
name|type_glGenBuffers
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glGenBuffersEXT"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|funcs
operator|->
name|genBuffers
condition|)
block|{
name|funcs
operator|->
name|genBuffers
operator|=
operator|(
name|type_glGenBuffers
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glGenBuffersARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|genBuffers
condition|)
name|funcs
operator|->
name|genBuffers
argument_list|(
name|n
argument_list|,
name|buffers
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|genBuffers
operator|=
name|qglfResolveGenBuffers
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveGenerateMipmap
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveGenerateMipmap
parameter_list|(
name|GLenum
name|target
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glGenerateMipmap
function_decl|)
parameter_list|(
name|GLenum
name|target
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|generateMipmap
operator|=
operator|(
name|type_glGenerateMipmap
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glGenerateMipmap"
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_OPENGL_ES
if|if
condition|(
operator|!
name|funcs
operator|->
name|generateMipmap
condition|)
block|{
name|funcs
operator|->
name|generateMipmap
operator|=
operator|(
name|type_glGenerateMipmap
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glGenerateMipmapOES"
argument_list|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
operator|!
name|funcs
operator|->
name|generateMipmap
condition|)
block|{
name|funcs
operator|->
name|generateMipmap
operator|=
operator|(
name|type_glGenerateMipmap
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glGenerateMipmapEXT"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|funcs
operator|->
name|generateMipmap
condition|)
block|{
name|funcs
operator|->
name|generateMipmap
operator|=
operator|(
name|type_glGenerateMipmap
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glGenerateMipmapARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|generateMipmap
condition|)
name|funcs
operator|->
name|generateMipmap
argument_list|(
name|target
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|generateMipmap
operator|=
name|qglfResolveGenerateMipmap
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveGenFramebuffers
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveGenFramebuffers
parameter_list|(
name|GLsizei
name|n
parameter_list|,
name|GLuint
modifier|*
name|framebuffers
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glGenFramebuffers
function_decl|)
parameter_list|(
name|GLsizei
name|n
parameter_list|,
name|GLuint
modifier|*
name|framebuffers
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|genFramebuffers
operator|=
operator|(
name|type_glGenFramebuffers
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glGenFramebuffers"
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_OPENGL_ES
if|if
condition|(
operator|!
name|funcs
operator|->
name|genFramebuffers
condition|)
block|{
name|funcs
operator|->
name|genFramebuffers
operator|=
operator|(
name|type_glGenFramebuffers
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glGenFramebuffersOES"
argument_list|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
operator|!
name|funcs
operator|->
name|genFramebuffers
condition|)
block|{
name|funcs
operator|->
name|genFramebuffers
operator|=
operator|(
name|type_glGenFramebuffers
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glGenFramebuffersEXT"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|funcs
operator|->
name|genFramebuffers
condition|)
block|{
name|funcs
operator|->
name|genFramebuffers
operator|=
operator|(
name|type_glGenFramebuffers
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glGenFramebuffersARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|genFramebuffers
condition|)
name|funcs
operator|->
name|genFramebuffers
argument_list|(
name|n
argument_list|,
name|framebuffers
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|genFramebuffers
operator|=
name|qglfResolveGenFramebuffers
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveGenRenderbuffers
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveGenRenderbuffers
parameter_list|(
name|GLsizei
name|n
parameter_list|,
name|GLuint
modifier|*
name|renderbuffers
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glGenRenderbuffers
function_decl|)
parameter_list|(
name|GLsizei
name|n
parameter_list|,
name|GLuint
modifier|*
name|renderbuffers
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|genRenderbuffers
operator|=
operator|(
name|type_glGenRenderbuffers
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glGenRenderbuffers"
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_OPENGL_ES
if|if
condition|(
operator|!
name|funcs
operator|->
name|genRenderbuffers
condition|)
block|{
name|funcs
operator|->
name|genRenderbuffers
operator|=
operator|(
name|type_glGenRenderbuffers
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glGenRenderbuffersOES"
argument_list|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
operator|!
name|funcs
operator|->
name|genRenderbuffers
condition|)
block|{
name|funcs
operator|->
name|genRenderbuffers
operator|=
operator|(
name|type_glGenRenderbuffers
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glGenRenderbuffersEXT"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|funcs
operator|->
name|genRenderbuffers
condition|)
block|{
name|funcs
operator|->
name|genRenderbuffers
operator|=
operator|(
name|type_glGenRenderbuffers
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glGenRenderbuffersARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|genRenderbuffers
condition|)
name|funcs
operator|->
name|genRenderbuffers
argument_list|(
name|n
argument_list|,
name|renderbuffers
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|genRenderbuffers
operator|=
name|qglfResolveGenRenderbuffers
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveGetActiveAttrib
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveGetActiveAttrib
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLuint
name|index
parameter_list|,
name|GLsizei
name|bufsize
parameter_list|,
name|GLsizei
modifier|*
name|length
parameter_list|,
name|GLint
modifier|*
name|size
parameter_list|,
name|GLenum
modifier|*
name|type
parameter_list|,
name|char
modifier|*
name|name
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glGetActiveAttrib
function_decl|)
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLuint
name|index
parameter_list|,
name|GLsizei
name|bufsize
parameter_list|,
name|GLsizei
modifier|*
name|length
parameter_list|,
name|GLint
modifier|*
name|size
parameter_list|,
name|GLenum
modifier|*
name|type
parameter_list|,
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|getActiveAttrib
operator|=
operator|(
name|type_glGetActiveAttrib
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glGetActiveAttrib"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|funcs
operator|->
name|getActiveAttrib
condition|)
block|{
name|funcs
operator|->
name|getActiveAttrib
operator|=
operator|(
name|type_glGetActiveAttrib
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glGetActiveAttribARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|getActiveAttrib
condition|)
name|funcs
operator|->
name|getActiveAttrib
argument_list|(
name|program
argument_list|,
name|index
argument_list|,
name|bufsize
argument_list|,
name|length
argument_list|,
name|size
argument_list|,
name|type
argument_list|,
name|name
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|getActiveAttrib
operator|=
name|qglfResolveGetActiveAttrib
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveGetActiveUniform
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveGetActiveUniform
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLuint
name|index
parameter_list|,
name|GLsizei
name|bufsize
parameter_list|,
name|GLsizei
modifier|*
name|length
parameter_list|,
name|GLint
modifier|*
name|size
parameter_list|,
name|GLenum
modifier|*
name|type
parameter_list|,
name|char
modifier|*
name|name
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glGetActiveUniform
function_decl|)
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLuint
name|index
parameter_list|,
name|GLsizei
name|bufsize
parameter_list|,
name|GLsizei
modifier|*
name|length
parameter_list|,
name|GLint
modifier|*
name|size
parameter_list|,
name|GLenum
modifier|*
name|type
parameter_list|,
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|getActiveUniform
operator|=
operator|(
name|type_glGetActiveUniform
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glGetActiveUniform"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|funcs
operator|->
name|getActiveUniform
condition|)
block|{
name|funcs
operator|->
name|getActiveUniform
operator|=
operator|(
name|type_glGetActiveUniform
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glGetActiveUniformARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|getActiveUniform
condition|)
name|funcs
operator|->
name|getActiveUniform
argument_list|(
name|program
argument_list|,
name|index
argument_list|,
name|bufsize
argument_list|,
name|length
argument_list|,
name|size
argument_list|,
name|type
argument_list|,
name|name
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|getActiveUniform
operator|=
name|qglfResolveGetActiveUniform
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveGetAttachedShaders
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveGetAttachedShaders
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLsizei
name|maxcount
parameter_list|,
name|GLsizei
modifier|*
name|count
parameter_list|,
name|GLuint
modifier|*
name|shaders
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glGetAttachedShaders
function_decl|)
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLsizei
name|maxcount
parameter_list|,
name|GLsizei
modifier|*
name|count
parameter_list|,
name|GLuint
modifier|*
name|shaders
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|getAttachedShaders
operator|=
operator|(
name|type_glGetAttachedShaders
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glGetAttachedShaders"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|funcs
operator|->
name|getAttachedShaders
condition|)
block|{
name|funcs
operator|->
name|getAttachedShaders
operator|=
operator|(
name|type_glGetAttachedShaders
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glGetAttachedObjectsARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|getAttachedShaders
condition|)
name|funcs
operator|->
name|getAttachedShaders
argument_list|(
name|program
argument_list|,
name|maxcount
argument_list|,
name|count
argument_list|,
name|shaders
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|getAttachedShaders
operator|=
name|qglfResolveGetAttachedShaders
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveGetAttribLocation
specifier|static
name|int
name|QGLF_APIENTRY
name|qglfResolveGetAttribLocation
parameter_list|(
name|GLuint
name|program
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
block|{
typedef|typedef
name|int
function_decl|(
name|QGLF_APIENTRYP
name|type_glGetAttribLocation
function_decl|)
parameter_list|(
name|GLuint
name|program
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|getAttribLocation
operator|=
operator|(
name|type_glGetAttribLocation
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glGetAttribLocation"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|funcs
operator|->
name|getAttribLocation
condition|)
block|{
name|funcs
operator|->
name|getAttribLocation
operator|=
operator|(
name|type_glGetAttribLocation
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glGetAttribLocationARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|getAttribLocation
condition|)
return|return
name|funcs
operator|->
name|getAttribLocation
argument_list|(
name|program
argument_list|,
name|name
argument_list|)
return|;
name|funcs
operator|->
name|getAttribLocation
operator|=
name|qglfResolveGetAttribLocation
expr_stmt|;
return|return
name|int
argument_list|(
literal|0
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qglfResolveGetBufferParameteriv
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveGetBufferParameteriv
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glGetBufferParameteriv
function_decl|)
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|getBufferParameteriv
operator|=
operator|(
name|type_glGetBufferParameteriv
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glGetBufferParameteriv"
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_OPENGL_ES
if|if
condition|(
operator|!
name|funcs
operator|->
name|getBufferParameteriv
condition|)
block|{
name|funcs
operator|->
name|getBufferParameteriv
operator|=
operator|(
name|type_glGetBufferParameteriv
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glGetBufferParameterivOES"
argument_list|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
operator|!
name|funcs
operator|->
name|getBufferParameteriv
condition|)
block|{
name|funcs
operator|->
name|getBufferParameteriv
operator|=
operator|(
name|type_glGetBufferParameteriv
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glGetBufferParameterivEXT"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|funcs
operator|->
name|getBufferParameteriv
condition|)
block|{
name|funcs
operator|->
name|getBufferParameteriv
operator|=
operator|(
name|type_glGetBufferParameteriv
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glGetBufferParameterivARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|getBufferParameteriv
condition|)
name|funcs
operator|->
name|getBufferParameteriv
argument_list|(
name|target
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|getBufferParameteriv
operator|=
name|qglfResolveGetBufferParameteriv
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveGetFramebufferAttachmentParameteriv
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveGetFramebufferAttachmentParameteriv
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|attachment
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glGetFramebufferAttachmentParameteriv
function_decl|)
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|attachment
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|getFramebufferAttachmentParameteriv
operator|=
operator|(
name|type_glGetFramebufferAttachmentParameteriv
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glGetFramebufferAttachmentParameteriv"
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_OPENGL_ES
if|if
condition|(
operator|!
name|funcs
operator|->
name|getFramebufferAttachmentParameteriv
condition|)
block|{
name|funcs
operator|->
name|getFramebufferAttachmentParameteriv
operator|=
operator|(
name|type_glGetFramebufferAttachmentParameteriv
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glGetFramebufferAttachmentParameterivOES"
argument_list|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
operator|!
name|funcs
operator|->
name|getFramebufferAttachmentParameteriv
condition|)
block|{
name|funcs
operator|->
name|getFramebufferAttachmentParameteriv
operator|=
operator|(
name|type_glGetFramebufferAttachmentParameteriv
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glGetFramebufferAttachmentParameterivEXT"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|funcs
operator|->
name|getFramebufferAttachmentParameteriv
condition|)
block|{
name|funcs
operator|->
name|getFramebufferAttachmentParameteriv
operator|=
operator|(
name|type_glGetFramebufferAttachmentParameteriv
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glGetFramebufferAttachmentParameterivARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|getFramebufferAttachmentParameteriv
condition|)
name|funcs
operator|->
name|getFramebufferAttachmentParameteriv
argument_list|(
name|target
argument_list|,
name|attachment
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|getFramebufferAttachmentParameteriv
operator|=
name|qglfResolveGetFramebufferAttachmentParameteriv
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveGetProgramiv
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveGetProgramiv
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glGetProgramiv
function_decl|)
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|getProgramiv
operator|=
operator|(
name|type_glGetProgramiv
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glGetProgramiv"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|funcs
operator|->
name|getProgramiv
condition|)
block|{
name|funcs
operator|->
name|getProgramiv
operator|=
operator|(
name|type_glGetProgramiv
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glGetObjectParameterivARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|getProgramiv
condition|)
name|funcs
operator|->
name|getProgramiv
argument_list|(
name|program
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|getProgramiv
operator|=
name|qglfResolveGetProgramiv
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveGetProgramInfoLog
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveGetProgramInfoLog
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLsizei
name|bufsize
parameter_list|,
name|GLsizei
modifier|*
name|length
parameter_list|,
name|char
modifier|*
name|infolog
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glGetProgramInfoLog
function_decl|)
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLsizei
name|bufsize
parameter_list|,
name|GLsizei
modifier|*
name|length
parameter_list|,
name|char
modifier|*
name|infolog
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|getProgramInfoLog
operator|=
operator|(
name|type_glGetProgramInfoLog
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glGetProgramInfoLog"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|funcs
operator|->
name|getProgramInfoLog
condition|)
block|{
name|funcs
operator|->
name|getProgramInfoLog
operator|=
operator|(
name|type_glGetProgramInfoLog
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glGetInfoLogARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|getProgramInfoLog
condition|)
name|funcs
operator|->
name|getProgramInfoLog
argument_list|(
name|program
argument_list|,
name|bufsize
argument_list|,
name|length
argument_list|,
name|infolog
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|getProgramInfoLog
operator|=
name|qglfResolveGetProgramInfoLog
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveGetRenderbufferParameteriv
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveGetRenderbufferParameteriv
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glGetRenderbufferParameteriv
function_decl|)
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|getRenderbufferParameteriv
operator|=
operator|(
name|type_glGetRenderbufferParameteriv
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glGetRenderbufferParameteriv"
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_OPENGL_ES
if|if
condition|(
operator|!
name|funcs
operator|->
name|getRenderbufferParameteriv
condition|)
block|{
name|funcs
operator|->
name|getRenderbufferParameteriv
operator|=
operator|(
name|type_glGetRenderbufferParameteriv
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glGetRenderbufferParameterivOES"
argument_list|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
operator|!
name|funcs
operator|->
name|getRenderbufferParameteriv
condition|)
block|{
name|funcs
operator|->
name|getRenderbufferParameteriv
operator|=
operator|(
name|type_glGetRenderbufferParameteriv
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glGetRenderbufferParameterivEXT"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|funcs
operator|->
name|getRenderbufferParameteriv
condition|)
block|{
name|funcs
operator|->
name|getRenderbufferParameteriv
operator|=
operator|(
name|type_glGetRenderbufferParameteriv
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glGetRenderbufferParameterivARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|getRenderbufferParameteriv
condition|)
name|funcs
operator|->
name|getRenderbufferParameteriv
argument_list|(
name|target
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|getRenderbufferParameteriv
operator|=
name|qglfResolveGetRenderbufferParameteriv
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveGetShaderiv
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveGetShaderiv
parameter_list|(
name|GLuint
name|shader
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glGetShaderiv
function_decl|)
parameter_list|(
name|GLuint
name|shader
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|getShaderiv
operator|=
operator|(
name|type_glGetShaderiv
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glGetShaderiv"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|funcs
operator|->
name|getShaderiv
condition|)
block|{
name|funcs
operator|->
name|getShaderiv
operator|=
operator|(
name|type_glGetShaderiv
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glGetObjectParameterivARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|getShaderiv
condition|)
name|funcs
operator|->
name|getShaderiv
argument_list|(
name|shader
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|getShaderiv
operator|=
name|qglfResolveGetShaderiv
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveGetShaderInfoLog
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveGetShaderInfoLog
parameter_list|(
name|GLuint
name|shader
parameter_list|,
name|GLsizei
name|bufsize
parameter_list|,
name|GLsizei
modifier|*
name|length
parameter_list|,
name|char
modifier|*
name|infolog
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glGetShaderInfoLog
function_decl|)
parameter_list|(
name|GLuint
name|shader
parameter_list|,
name|GLsizei
name|bufsize
parameter_list|,
name|GLsizei
modifier|*
name|length
parameter_list|,
name|char
modifier|*
name|infolog
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|getShaderInfoLog
operator|=
operator|(
name|type_glGetShaderInfoLog
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glGetShaderInfoLog"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|funcs
operator|->
name|getShaderInfoLog
condition|)
block|{
name|funcs
operator|->
name|getShaderInfoLog
operator|=
operator|(
name|type_glGetShaderInfoLog
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glGetInfoLogARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|getShaderInfoLog
condition|)
name|funcs
operator|->
name|getShaderInfoLog
argument_list|(
name|shader
argument_list|,
name|bufsize
argument_list|,
name|length
argument_list|,
name|infolog
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|getShaderInfoLog
operator|=
name|qglfResolveGetShaderInfoLog
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfSpecialGetShaderPrecisionFormat
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfSpecialGetShaderPrecisionFormat
parameter_list|(
name|GLenum
name|shadertype
parameter_list|,
name|GLenum
name|precisiontype
parameter_list|,
name|GLint
modifier|*
name|range
parameter_list|,
name|GLint
modifier|*
name|precision
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|shadertype
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|precisiontype
argument_list|)
expr_stmt|;
name|range
index|[
literal|0
index|]
operator|=
name|range
index|[
literal|1
index|]
operator|=
name|precision
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveGetShaderPrecisionFormat
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveGetShaderPrecisionFormat
parameter_list|(
name|GLenum
name|shadertype
parameter_list|,
name|GLenum
name|precisiontype
parameter_list|,
name|GLint
modifier|*
name|range
parameter_list|,
name|GLint
modifier|*
name|precision
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glGetShaderPrecisionFormat
function_decl|)
parameter_list|(
name|GLenum
name|shadertype
parameter_list|,
name|GLenum
name|precisiontype
parameter_list|,
name|GLint
modifier|*
name|range
parameter_list|,
name|GLint
modifier|*
name|precision
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|getShaderPrecisionFormat
operator|=
operator|(
name|type_glGetShaderPrecisionFormat
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glGetShaderPrecisionFormat"
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_OPENGL_ES
if|if
condition|(
operator|!
name|funcs
operator|->
name|getShaderPrecisionFormat
condition|)
block|{
name|funcs
operator|->
name|getShaderPrecisionFormat
operator|=
operator|(
name|type_glGetShaderPrecisionFormat
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glGetShaderPrecisionFormatOES"
argument_list|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
operator|!
name|funcs
operator|->
name|getShaderPrecisionFormat
condition|)
block|{
name|funcs
operator|->
name|getShaderPrecisionFormat
operator|=
operator|(
name|type_glGetShaderPrecisionFormat
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glGetShaderPrecisionFormatEXT"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|funcs
operator|->
name|getShaderPrecisionFormat
condition|)
block|{
name|funcs
operator|->
name|getShaderPrecisionFormat
operator|=
operator|(
name|type_glGetShaderPrecisionFormat
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glGetShaderPrecisionFormatARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|funcs
operator|->
name|getShaderPrecisionFormat
condition|)
name|funcs
operator|->
name|getShaderPrecisionFormat
operator|=
name|qglfSpecialGetShaderPrecisionFormat
expr_stmt|;
name|funcs
operator|->
name|getShaderPrecisionFormat
argument_list|(
name|shadertype
argument_list|,
name|precisiontype
argument_list|,
name|range
argument_list|,
name|precision
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveGetShaderSource
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveGetShaderSource
parameter_list|(
name|GLuint
name|shader
parameter_list|,
name|GLsizei
name|bufsize
parameter_list|,
name|GLsizei
modifier|*
name|length
parameter_list|,
name|char
modifier|*
name|source
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glGetShaderSource
function_decl|)
parameter_list|(
name|GLuint
name|shader
parameter_list|,
name|GLsizei
name|bufsize
parameter_list|,
name|GLsizei
modifier|*
name|length
parameter_list|,
name|char
modifier|*
name|source
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|getShaderSource
operator|=
operator|(
name|type_glGetShaderSource
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glGetShaderSource"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|funcs
operator|->
name|getShaderSource
condition|)
block|{
name|funcs
operator|->
name|getShaderSource
operator|=
operator|(
name|type_glGetShaderSource
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glGetShaderSourceARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|getShaderSource
condition|)
name|funcs
operator|->
name|getShaderSource
argument_list|(
name|shader
argument_list|,
name|bufsize
argument_list|,
name|length
argument_list|,
name|source
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|getShaderSource
operator|=
name|qglfResolveGetShaderSource
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveGetUniformfv
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveGetUniformfv
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLint
name|location
parameter_list|,
name|GLfloat
modifier|*
name|params
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glGetUniformfv
function_decl|)
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLint
name|location
parameter_list|,
name|GLfloat
modifier|*
name|params
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|getUniformfv
operator|=
operator|(
name|type_glGetUniformfv
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glGetUniformfv"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|funcs
operator|->
name|getUniformfv
condition|)
block|{
name|funcs
operator|->
name|getUniformfv
operator|=
operator|(
name|type_glGetUniformfv
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glGetUniformfvARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|getUniformfv
condition|)
name|funcs
operator|->
name|getUniformfv
argument_list|(
name|program
argument_list|,
name|location
argument_list|,
name|params
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|getUniformfv
operator|=
name|qglfResolveGetUniformfv
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveGetUniformiv
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveGetUniformiv
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLint
name|location
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glGetUniformiv
function_decl|)
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLint
name|location
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|getUniformiv
operator|=
operator|(
name|type_glGetUniformiv
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glGetUniformiv"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|funcs
operator|->
name|getUniformiv
condition|)
block|{
name|funcs
operator|->
name|getUniformiv
operator|=
operator|(
name|type_glGetUniformiv
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glGetUniformivARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|getUniformiv
condition|)
name|funcs
operator|->
name|getUniformiv
argument_list|(
name|program
argument_list|,
name|location
argument_list|,
name|params
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|getUniformiv
operator|=
name|qglfResolveGetUniformiv
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveGetUniformLocation
specifier|static
name|int
name|QGLF_APIENTRY
name|qglfResolveGetUniformLocation
parameter_list|(
name|GLuint
name|program
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
block|{
typedef|typedef
name|int
function_decl|(
name|QGLF_APIENTRYP
name|type_glGetUniformLocation
function_decl|)
parameter_list|(
name|GLuint
name|program
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|getUniformLocation
operator|=
operator|(
name|type_glGetUniformLocation
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glGetUniformLocation"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|funcs
operator|->
name|getUniformLocation
condition|)
block|{
name|funcs
operator|->
name|getUniformLocation
operator|=
operator|(
name|type_glGetUniformLocation
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glGetUniformLocationARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|getUniformLocation
condition|)
return|return
name|funcs
operator|->
name|getUniformLocation
argument_list|(
name|program
argument_list|,
name|name
argument_list|)
return|;
name|funcs
operator|->
name|getUniformLocation
operator|=
name|qglfResolveGetUniformLocation
expr_stmt|;
return|return
name|int
argument_list|(
literal|0
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qglfResolveGetVertexAttribfv
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveGetVertexAttribfv
parameter_list|(
name|GLuint
name|index
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLfloat
modifier|*
name|params
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glGetVertexAttribfv
function_decl|)
parameter_list|(
name|GLuint
name|index
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLfloat
modifier|*
name|params
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|getVertexAttribfv
operator|=
operator|(
name|type_glGetVertexAttribfv
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glGetVertexAttribfv"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|funcs
operator|->
name|getVertexAttribfv
condition|)
block|{
name|funcs
operator|->
name|getVertexAttribfv
operator|=
operator|(
name|type_glGetVertexAttribfv
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glGetVertexAttribfvARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|getVertexAttribfv
condition|)
name|funcs
operator|->
name|getVertexAttribfv
argument_list|(
name|index
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|getVertexAttribfv
operator|=
name|qglfResolveGetVertexAttribfv
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveGetVertexAttribiv
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveGetVertexAttribiv
parameter_list|(
name|GLuint
name|index
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glGetVertexAttribiv
function_decl|)
parameter_list|(
name|GLuint
name|index
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|getVertexAttribiv
operator|=
operator|(
name|type_glGetVertexAttribiv
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glGetVertexAttribiv"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|funcs
operator|->
name|getVertexAttribiv
condition|)
block|{
name|funcs
operator|->
name|getVertexAttribiv
operator|=
operator|(
name|type_glGetVertexAttribiv
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glGetVertexAttribivARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|getVertexAttribiv
condition|)
name|funcs
operator|->
name|getVertexAttribiv
argument_list|(
name|index
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|getVertexAttribiv
operator|=
name|qglfResolveGetVertexAttribiv
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveGetVertexAttribPointerv
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveGetVertexAttribPointerv
parameter_list|(
name|GLuint
name|index
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|void
modifier|*
modifier|*
name|pointer
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glGetVertexAttribPointerv
function_decl|)
parameter_list|(
name|GLuint
name|index
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|void
modifier|*
modifier|*
name|pointer
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|getVertexAttribPointerv
operator|=
operator|(
name|type_glGetVertexAttribPointerv
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glGetVertexAttribPointerv"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|funcs
operator|->
name|getVertexAttribPointerv
condition|)
block|{
name|funcs
operator|->
name|getVertexAttribPointerv
operator|=
operator|(
name|type_glGetVertexAttribPointerv
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glGetVertexAttribPointervARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|getVertexAttribPointerv
condition|)
name|funcs
operator|->
name|getVertexAttribPointerv
argument_list|(
name|index
argument_list|,
name|pname
argument_list|,
name|pointer
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|getVertexAttribPointerv
operator|=
name|qglfResolveGetVertexAttribPointerv
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveIsBuffer
specifier|static
name|GLboolean
name|QGLF_APIENTRY
name|qglfResolveIsBuffer
parameter_list|(
name|GLuint
name|buffer
parameter_list|)
block|{
typedef|typedef
name|GLboolean
function_decl|(
name|QGLF_APIENTRYP
name|type_glIsBuffer
function_decl|)
parameter_list|(
name|GLuint
name|buffer
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|isBuffer
operator|=
operator|(
name|type_glIsBuffer
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glIsBuffer"
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_OPENGL_ES
if|if
condition|(
operator|!
name|funcs
operator|->
name|isBuffer
condition|)
block|{
name|funcs
operator|->
name|isBuffer
operator|=
operator|(
name|type_glIsBuffer
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glIsBufferOES"
argument_list|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
operator|!
name|funcs
operator|->
name|isBuffer
condition|)
block|{
name|funcs
operator|->
name|isBuffer
operator|=
operator|(
name|type_glIsBuffer
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glIsBufferEXT"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|funcs
operator|->
name|isBuffer
condition|)
block|{
name|funcs
operator|->
name|isBuffer
operator|=
operator|(
name|type_glIsBuffer
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glIsBufferARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|isBuffer
condition|)
return|return
name|funcs
operator|->
name|isBuffer
argument_list|(
name|buffer
argument_list|)
return|;
name|funcs
operator|->
name|isBuffer
operator|=
name|qglfResolveIsBuffer
expr_stmt|;
return|return
name|GLboolean
argument_list|(
literal|0
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qglfResolveIsFramebuffer
specifier|static
name|GLboolean
name|QGLF_APIENTRY
name|qglfResolveIsFramebuffer
parameter_list|(
name|GLuint
name|framebuffer
parameter_list|)
block|{
typedef|typedef
name|GLboolean
function_decl|(
name|QGLF_APIENTRYP
name|type_glIsFramebuffer
function_decl|)
parameter_list|(
name|GLuint
name|framebuffer
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|isFramebuffer
operator|=
operator|(
name|type_glIsFramebuffer
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glIsFramebuffer"
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_OPENGL_ES
if|if
condition|(
operator|!
name|funcs
operator|->
name|isFramebuffer
condition|)
block|{
name|funcs
operator|->
name|isFramebuffer
operator|=
operator|(
name|type_glIsFramebuffer
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glIsFramebufferOES"
argument_list|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
operator|!
name|funcs
operator|->
name|isFramebuffer
condition|)
block|{
name|funcs
operator|->
name|isFramebuffer
operator|=
operator|(
name|type_glIsFramebuffer
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glIsFramebufferEXT"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|funcs
operator|->
name|isFramebuffer
condition|)
block|{
name|funcs
operator|->
name|isFramebuffer
operator|=
operator|(
name|type_glIsFramebuffer
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glIsFramebufferARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|isFramebuffer
condition|)
return|return
name|funcs
operator|->
name|isFramebuffer
argument_list|(
name|framebuffer
argument_list|)
return|;
name|funcs
operator|->
name|isFramebuffer
operator|=
name|qglfResolveIsFramebuffer
expr_stmt|;
return|return
name|GLboolean
argument_list|(
literal|0
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qglfSpecialIsProgram
specifier|static
name|GLboolean
name|QGLF_APIENTRY
name|qglfSpecialIsProgram
parameter_list|(
name|GLuint
name|program
parameter_list|)
block|{
return|return
name|program
operator|!=
literal|0
return|;
block|}
end_function
begin_function
DECL|function|qglfResolveIsProgram
specifier|static
name|GLboolean
name|QGLF_APIENTRY
name|qglfResolveIsProgram
parameter_list|(
name|GLuint
name|program
parameter_list|)
block|{
typedef|typedef
name|GLboolean
function_decl|(
name|QGLF_APIENTRYP
name|type_glIsProgram
function_decl|)
parameter_list|(
name|GLuint
name|program
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|isProgram
operator|=
operator|(
name|type_glIsProgram
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glIsProgram"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|funcs
operator|->
name|isProgram
condition|)
block|{
name|funcs
operator|->
name|isProgram
operator|=
operator|(
name|type_glIsProgram
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glIsProgramARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|funcs
operator|->
name|isProgram
condition|)
name|funcs
operator|->
name|isProgram
operator|=
name|qglfSpecialIsProgram
expr_stmt|;
return|return
name|funcs
operator|->
name|isProgram
argument_list|(
name|program
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qglfResolveIsRenderbuffer
specifier|static
name|GLboolean
name|QGLF_APIENTRY
name|qglfResolveIsRenderbuffer
parameter_list|(
name|GLuint
name|renderbuffer
parameter_list|)
block|{
typedef|typedef
name|GLboolean
function_decl|(
name|QGLF_APIENTRYP
name|type_glIsRenderbuffer
function_decl|)
parameter_list|(
name|GLuint
name|renderbuffer
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|isRenderbuffer
operator|=
operator|(
name|type_glIsRenderbuffer
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glIsRenderbuffer"
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_OPENGL_ES
if|if
condition|(
operator|!
name|funcs
operator|->
name|isRenderbuffer
condition|)
block|{
name|funcs
operator|->
name|isRenderbuffer
operator|=
operator|(
name|type_glIsRenderbuffer
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glIsRenderbufferOES"
argument_list|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
operator|!
name|funcs
operator|->
name|isRenderbuffer
condition|)
block|{
name|funcs
operator|->
name|isRenderbuffer
operator|=
operator|(
name|type_glIsRenderbuffer
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glIsRenderbufferEXT"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|funcs
operator|->
name|isRenderbuffer
condition|)
block|{
name|funcs
operator|->
name|isRenderbuffer
operator|=
operator|(
name|type_glIsRenderbuffer
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glIsRenderbufferARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|isRenderbuffer
condition|)
return|return
name|funcs
operator|->
name|isRenderbuffer
argument_list|(
name|renderbuffer
argument_list|)
return|;
name|funcs
operator|->
name|isRenderbuffer
operator|=
name|qglfResolveIsRenderbuffer
expr_stmt|;
return|return
name|GLboolean
argument_list|(
literal|0
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qglfSpecialIsShader
specifier|static
name|GLboolean
name|QGLF_APIENTRY
name|qglfSpecialIsShader
parameter_list|(
name|GLuint
name|shader
parameter_list|)
block|{
return|return
name|shader
operator|!=
literal|0
return|;
block|}
end_function
begin_function
DECL|function|qglfResolveIsShader
specifier|static
name|GLboolean
name|QGLF_APIENTRY
name|qglfResolveIsShader
parameter_list|(
name|GLuint
name|shader
parameter_list|)
block|{
typedef|typedef
name|GLboolean
function_decl|(
name|QGLF_APIENTRYP
name|type_glIsShader
function_decl|)
parameter_list|(
name|GLuint
name|shader
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|isShader
operator|=
operator|(
name|type_glIsShader
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glIsShader"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|funcs
operator|->
name|isShader
condition|)
block|{
name|funcs
operator|->
name|isShader
operator|=
operator|(
name|type_glIsShader
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glIsShaderARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|funcs
operator|->
name|isShader
condition|)
name|funcs
operator|->
name|isShader
operator|=
name|qglfSpecialIsShader
expr_stmt|;
return|return
name|funcs
operator|->
name|isShader
argument_list|(
name|shader
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qglfResolveLinkProgram
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveLinkProgram
parameter_list|(
name|GLuint
name|program
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glLinkProgram
function_decl|)
parameter_list|(
name|GLuint
name|program
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|linkProgram
operator|=
operator|(
name|type_glLinkProgram
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glLinkProgram"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|funcs
operator|->
name|linkProgram
condition|)
block|{
name|funcs
operator|->
name|linkProgram
operator|=
operator|(
name|type_glLinkProgram
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glLinkProgramARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|linkProgram
condition|)
name|funcs
operator|->
name|linkProgram
argument_list|(
name|program
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|linkProgram
operator|=
name|qglfResolveLinkProgram
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfSpecialReleaseShaderCompiler
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfSpecialReleaseShaderCompiler
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|qglfResolveReleaseShaderCompiler
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveReleaseShaderCompiler
parameter_list|()
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glReleaseShaderCompiler
function_decl|)
parameter_list|()
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|releaseShaderCompiler
operator|=
operator|(
name|type_glReleaseShaderCompiler
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glReleaseShaderCompiler"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|funcs
operator|->
name|releaseShaderCompiler
condition|)
block|{
name|funcs
operator|->
name|releaseShaderCompiler
operator|=
operator|(
name|type_glReleaseShaderCompiler
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glReleaseShaderCompilerARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|funcs
operator|->
name|releaseShaderCompiler
condition|)
name|funcs
operator|->
name|releaseShaderCompiler
operator|=
name|qglfSpecialReleaseShaderCompiler
expr_stmt|;
name|funcs
operator|->
name|releaseShaderCompiler
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveRenderbufferStorage
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveRenderbufferStorage
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|internalformat
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glRenderbufferStorage
function_decl|)
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|internalformat
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|renderbufferStorage
operator|=
operator|(
name|type_glRenderbufferStorage
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glRenderbufferStorage"
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_OPENGL_ES
if|if
condition|(
operator|!
name|funcs
operator|->
name|renderbufferStorage
condition|)
block|{
name|funcs
operator|->
name|renderbufferStorage
operator|=
operator|(
name|type_glRenderbufferStorage
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glRenderbufferStorageOES"
argument_list|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
operator|!
name|funcs
operator|->
name|renderbufferStorage
condition|)
block|{
name|funcs
operator|->
name|renderbufferStorage
operator|=
operator|(
name|type_glRenderbufferStorage
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glRenderbufferStorageEXT"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|funcs
operator|->
name|renderbufferStorage
condition|)
block|{
name|funcs
operator|->
name|renderbufferStorage
operator|=
operator|(
name|type_glRenderbufferStorage
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glRenderbufferStorageARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|renderbufferStorage
condition|)
name|funcs
operator|->
name|renderbufferStorage
argument_list|(
name|target
argument_list|,
name|internalformat
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|renderbufferStorage
operator|=
name|qglfResolveRenderbufferStorage
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveSampleCoverage
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveSampleCoverage
parameter_list|(
name|GLclampf
name|value
parameter_list|,
name|GLboolean
name|invert
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glSampleCoverage
function_decl|)
parameter_list|(
name|GLclampf
name|value
parameter_list|,
name|GLboolean
name|invert
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|sampleCoverage
operator|=
operator|(
name|type_glSampleCoverage
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glSampleCoverage"
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_OPENGL_ES
if|if
condition|(
operator|!
name|funcs
operator|->
name|sampleCoverage
condition|)
block|{
name|funcs
operator|->
name|sampleCoverage
operator|=
operator|(
name|type_glSampleCoverage
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glSampleCoverageOES"
argument_list|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
operator|!
name|funcs
operator|->
name|sampleCoverage
condition|)
block|{
name|funcs
operator|->
name|sampleCoverage
operator|=
operator|(
name|type_glSampleCoverage
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glSampleCoverageEXT"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|funcs
operator|->
name|sampleCoverage
condition|)
block|{
name|funcs
operator|->
name|sampleCoverage
operator|=
operator|(
name|type_glSampleCoverage
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glSampleCoverageARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|sampleCoverage
condition|)
name|funcs
operator|->
name|sampleCoverage
argument_list|(
name|value
argument_list|,
name|invert
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|sampleCoverage
operator|=
name|qglfResolveSampleCoverage
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveShaderBinary
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveShaderBinary
parameter_list|(
name|GLint
name|n
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|shaders
parameter_list|,
name|GLenum
name|binaryformat
parameter_list|,
specifier|const
name|void
modifier|*
name|binary
parameter_list|,
name|GLint
name|length
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glShaderBinary
function_decl|)
parameter_list|(
name|GLint
name|n
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|shaders
parameter_list|,
name|GLenum
name|binaryformat
parameter_list|,
specifier|const
name|void
modifier|*
name|binary
parameter_list|,
name|GLint
name|length
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|shaderBinary
operator|=
operator|(
name|type_glShaderBinary
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glShaderBinary"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|funcs
operator|->
name|shaderBinary
condition|)
block|{
name|funcs
operator|->
name|shaderBinary
operator|=
operator|(
name|type_glShaderBinary
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glShaderBinaryARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|shaderBinary
condition|)
name|funcs
operator|->
name|shaderBinary
argument_list|(
name|n
argument_list|,
name|shaders
argument_list|,
name|binaryformat
argument_list|,
name|binary
argument_list|,
name|length
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|shaderBinary
operator|=
name|qglfResolveShaderBinary
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveShaderSource
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveShaderSource
parameter_list|(
name|GLuint
name|shader
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|string
parameter_list|,
specifier|const
name|GLint
modifier|*
name|length
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glShaderSource
function_decl|)
parameter_list|(
name|GLuint
name|shader
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|string
parameter_list|,
specifier|const
name|GLint
modifier|*
name|length
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|shaderSource
operator|=
operator|(
name|type_glShaderSource
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glShaderSource"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|funcs
operator|->
name|shaderSource
condition|)
block|{
name|funcs
operator|->
name|shaderSource
operator|=
operator|(
name|type_glShaderSource
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glShaderSourceARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|shaderSource
condition|)
name|funcs
operator|->
name|shaderSource
argument_list|(
name|shader
argument_list|,
name|count
argument_list|,
name|string
argument_list|,
name|length
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|shaderSource
operator|=
name|qglfResolveShaderSource
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveStencilFuncSeparate
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveStencilFuncSeparate
parameter_list|(
name|GLenum
name|face
parameter_list|,
name|GLenum
name|func
parameter_list|,
name|GLint
name|ref
parameter_list|,
name|GLuint
name|mask
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glStencilFuncSeparate
function_decl|)
parameter_list|(
name|GLenum
name|face
parameter_list|,
name|GLenum
name|func
parameter_list|,
name|GLint
name|ref
parameter_list|,
name|GLuint
name|mask
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|stencilFuncSeparate
operator|=
operator|(
name|type_glStencilFuncSeparate
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glStencilFuncSeparate"
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_OPENGL_ES
if|if
condition|(
operator|!
name|funcs
operator|->
name|stencilFuncSeparate
condition|)
block|{
name|funcs
operator|->
name|stencilFuncSeparate
operator|=
operator|(
name|type_glStencilFuncSeparate
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glStencilFuncSeparateOES"
argument_list|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
operator|!
name|funcs
operator|->
name|stencilFuncSeparate
condition|)
block|{
name|funcs
operator|->
name|stencilFuncSeparate
operator|=
operator|(
name|type_glStencilFuncSeparate
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glStencilFuncSeparateEXT"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|funcs
operator|->
name|stencilFuncSeparate
condition|)
block|{
name|funcs
operator|->
name|stencilFuncSeparate
operator|=
operator|(
name|type_glStencilFuncSeparate
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glStencilFuncSeparateARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|stencilFuncSeparate
condition|)
name|funcs
operator|->
name|stencilFuncSeparate
argument_list|(
name|face
argument_list|,
name|func
argument_list|,
name|ref
argument_list|,
name|mask
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|stencilFuncSeparate
operator|=
name|qglfResolveStencilFuncSeparate
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveStencilMaskSeparate
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveStencilMaskSeparate
parameter_list|(
name|GLenum
name|face
parameter_list|,
name|GLuint
name|mask
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glStencilMaskSeparate
function_decl|)
parameter_list|(
name|GLenum
name|face
parameter_list|,
name|GLuint
name|mask
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|stencilMaskSeparate
operator|=
operator|(
name|type_glStencilMaskSeparate
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glStencilMaskSeparate"
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_OPENGL_ES
if|if
condition|(
operator|!
name|funcs
operator|->
name|stencilMaskSeparate
condition|)
block|{
name|funcs
operator|->
name|stencilMaskSeparate
operator|=
operator|(
name|type_glStencilMaskSeparate
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glStencilMaskSeparateOES"
argument_list|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
operator|!
name|funcs
operator|->
name|stencilMaskSeparate
condition|)
block|{
name|funcs
operator|->
name|stencilMaskSeparate
operator|=
operator|(
name|type_glStencilMaskSeparate
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glStencilMaskSeparateEXT"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|funcs
operator|->
name|stencilMaskSeparate
condition|)
block|{
name|funcs
operator|->
name|stencilMaskSeparate
operator|=
operator|(
name|type_glStencilMaskSeparate
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glStencilMaskSeparateARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|stencilMaskSeparate
condition|)
name|funcs
operator|->
name|stencilMaskSeparate
argument_list|(
name|face
argument_list|,
name|mask
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|stencilMaskSeparate
operator|=
name|qglfResolveStencilMaskSeparate
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveStencilOpSeparate
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveStencilOpSeparate
parameter_list|(
name|GLenum
name|face
parameter_list|,
name|GLenum
name|fail
parameter_list|,
name|GLenum
name|zfail
parameter_list|,
name|GLenum
name|zpass
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glStencilOpSeparate
function_decl|)
parameter_list|(
name|GLenum
name|face
parameter_list|,
name|GLenum
name|fail
parameter_list|,
name|GLenum
name|zfail
parameter_list|,
name|GLenum
name|zpass
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|stencilOpSeparate
operator|=
operator|(
name|type_glStencilOpSeparate
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glStencilOpSeparate"
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_OPENGL_ES
if|if
condition|(
operator|!
name|funcs
operator|->
name|stencilOpSeparate
condition|)
block|{
name|funcs
operator|->
name|stencilOpSeparate
operator|=
operator|(
name|type_glStencilOpSeparate
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glStencilOpSeparateOES"
argument_list|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
operator|!
name|funcs
operator|->
name|stencilOpSeparate
condition|)
block|{
name|funcs
operator|->
name|stencilOpSeparate
operator|=
operator|(
name|type_glStencilOpSeparate
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glStencilOpSeparateEXT"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|funcs
operator|->
name|stencilOpSeparate
condition|)
block|{
name|funcs
operator|->
name|stencilOpSeparate
operator|=
operator|(
name|type_glStencilOpSeparate
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glStencilOpSeparateARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|stencilOpSeparate
condition|)
name|funcs
operator|->
name|stencilOpSeparate
argument_list|(
name|face
argument_list|,
name|fail
argument_list|,
name|zfail
argument_list|,
name|zpass
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|stencilOpSeparate
operator|=
name|qglfResolveStencilOpSeparate
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveUniform1f
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveUniform1f
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLfloat
name|x
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glUniform1f
function_decl|)
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLfloat
name|x
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|uniform1f
operator|=
operator|(
name|type_glUniform1f
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glUniform1f"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|funcs
operator|->
name|uniform1f
condition|)
block|{
name|funcs
operator|->
name|uniform1f
operator|=
operator|(
name|type_glUniform1f
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glUniform1fARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|uniform1f
condition|)
name|funcs
operator|->
name|uniform1f
argument_list|(
name|location
argument_list|,
name|x
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|uniform1f
operator|=
name|qglfResolveUniform1f
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveUniform1fv
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveUniform1fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|v
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glUniform1fv
function_decl|)
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|v
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|uniform1fv
operator|=
operator|(
name|type_glUniform1fv
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glUniform1fv"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|funcs
operator|->
name|uniform1fv
condition|)
block|{
name|funcs
operator|->
name|uniform1fv
operator|=
operator|(
name|type_glUniform1fv
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glUniform1fvARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|uniform1fv
condition|)
name|funcs
operator|->
name|uniform1fv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|v
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|uniform1fv
operator|=
name|qglfResolveUniform1fv
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveUniform1i
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveUniform1i
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLint
name|x
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glUniform1i
function_decl|)
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLint
name|x
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|uniform1i
operator|=
operator|(
name|type_glUniform1i
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glUniform1i"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|funcs
operator|->
name|uniform1i
condition|)
block|{
name|funcs
operator|->
name|uniform1i
operator|=
operator|(
name|type_glUniform1i
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glUniform1iARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|uniform1i
condition|)
name|funcs
operator|->
name|uniform1i
argument_list|(
name|location
argument_list|,
name|x
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|uniform1i
operator|=
name|qglfResolveUniform1i
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveUniform1iv
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveUniform1iv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLint
modifier|*
name|v
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glUniform1iv
function_decl|)
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLint
modifier|*
name|v
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|uniform1iv
operator|=
operator|(
name|type_glUniform1iv
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glUniform1iv"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|funcs
operator|->
name|uniform1iv
condition|)
block|{
name|funcs
operator|->
name|uniform1iv
operator|=
operator|(
name|type_glUniform1iv
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glUniform1ivARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|uniform1iv
condition|)
name|funcs
operator|->
name|uniform1iv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|v
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|uniform1iv
operator|=
name|qglfResolveUniform1iv
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveUniform2f
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveUniform2f
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLfloat
name|x
parameter_list|,
name|GLfloat
name|y
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glUniform2f
function_decl|)
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLfloat
name|x
parameter_list|,
name|GLfloat
name|y
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|uniform2f
operator|=
operator|(
name|type_glUniform2f
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glUniform2f"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|funcs
operator|->
name|uniform2f
condition|)
block|{
name|funcs
operator|->
name|uniform2f
operator|=
operator|(
name|type_glUniform2f
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glUniform2fARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|uniform2f
condition|)
name|funcs
operator|->
name|uniform2f
argument_list|(
name|location
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|uniform2f
operator|=
name|qglfResolveUniform2f
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveUniform2fv
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveUniform2fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|v
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glUniform2fv
function_decl|)
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|v
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|uniform2fv
operator|=
operator|(
name|type_glUniform2fv
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glUniform2fv"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|funcs
operator|->
name|uniform2fv
condition|)
block|{
name|funcs
operator|->
name|uniform2fv
operator|=
operator|(
name|type_glUniform2fv
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glUniform2fvARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|uniform2fv
condition|)
name|funcs
operator|->
name|uniform2fv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|v
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|uniform2fv
operator|=
name|qglfResolveUniform2fv
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveUniform2i
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveUniform2i
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLint
name|x
parameter_list|,
name|GLint
name|y
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glUniform2i
function_decl|)
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLint
name|x
parameter_list|,
name|GLint
name|y
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|uniform2i
operator|=
operator|(
name|type_glUniform2i
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glUniform2i"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|funcs
operator|->
name|uniform2i
condition|)
block|{
name|funcs
operator|->
name|uniform2i
operator|=
operator|(
name|type_glUniform2i
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glUniform2iARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|uniform2i
condition|)
name|funcs
operator|->
name|uniform2i
argument_list|(
name|location
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|uniform2i
operator|=
name|qglfResolveUniform2i
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveUniform2iv
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveUniform2iv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLint
modifier|*
name|v
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glUniform2iv
function_decl|)
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLint
modifier|*
name|v
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|uniform2iv
operator|=
operator|(
name|type_glUniform2iv
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glUniform2iv"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|funcs
operator|->
name|uniform2iv
condition|)
block|{
name|funcs
operator|->
name|uniform2iv
operator|=
operator|(
name|type_glUniform2iv
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glUniform2ivARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|uniform2iv
condition|)
name|funcs
operator|->
name|uniform2iv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|v
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|uniform2iv
operator|=
name|qglfResolveUniform2iv
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveUniform3f
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveUniform3f
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLfloat
name|x
parameter_list|,
name|GLfloat
name|y
parameter_list|,
name|GLfloat
name|z
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glUniform3f
function_decl|)
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLfloat
name|x
parameter_list|,
name|GLfloat
name|y
parameter_list|,
name|GLfloat
name|z
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|uniform3f
operator|=
operator|(
name|type_glUniform3f
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glUniform3f"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|funcs
operator|->
name|uniform3f
condition|)
block|{
name|funcs
operator|->
name|uniform3f
operator|=
operator|(
name|type_glUniform3f
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glUniform3fARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|uniform3f
condition|)
name|funcs
operator|->
name|uniform3f
argument_list|(
name|location
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|uniform3f
operator|=
name|qglfResolveUniform3f
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveUniform3fv
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveUniform3fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|v
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glUniform3fv
function_decl|)
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|v
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|uniform3fv
operator|=
operator|(
name|type_glUniform3fv
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glUniform3fv"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|funcs
operator|->
name|uniform3fv
condition|)
block|{
name|funcs
operator|->
name|uniform3fv
operator|=
operator|(
name|type_glUniform3fv
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glUniform3fvARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|uniform3fv
condition|)
name|funcs
operator|->
name|uniform3fv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|v
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|uniform3fv
operator|=
name|qglfResolveUniform3fv
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveUniform3i
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveUniform3i
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLint
name|x
parameter_list|,
name|GLint
name|y
parameter_list|,
name|GLint
name|z
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glUniform3i
function_decl|)
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLint
name|x
parameter_list|,
name|GLint
name|y
parameter_list|,
name|GLint
name|z
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|uniform3i
operator|=
operator|(
name|type_glUniform3i
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glUniform3i"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|funcs
operator|->
name|uniform3i
condition|)
block|{
name|funcs
operator|->
name|uniform3i
operator|=
operator|(
name|type_glUniform3i
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glUniform3iARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|uniform3i
condition|)
name|funcs
operator|->
name|uniform3i
argument_list|(
name|location
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|uniform3i
operator|=
name|qglfResolveUniform3i
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveUniform3iv
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveUniform3iv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLint
modifier|*
name|v
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glUniform3iv
function_decl|)
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLint
modifier|*
name|v
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|uniform3iv
operator|=
operator|(
name|type_glUniform3iv
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glUniform3iv"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|funcs
operator|->
name|uniform3iv
condition|)
block|{
name|funcs
operator|->
name|uniform3iv
operator|=
operator|(
name|type_glUniform3iv
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glUniform3ivARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|uniform3iv
condition|)
name|funcs
operator|->
name|uniform3iv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|v
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|uniform3iv
operator|=
name|qglfResolveUniform3iv
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveUniform4f
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveUniform4f
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLfloat
name|x
parameter_list|,
name|GLfloat
name|y
parameter_list|,
name|GLfloat
name|z
parameter_list|,
name|GLfloat
name|w
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glUniform4f
function_decl|)
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLfloat
name|x
parameter_list|,
name|GLfloat
name|y
parameter_list|,
name|GLfloat
name|z
parameter_list|,
name|GLfloat
name|w
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|uniform4f
operator|=
operator|(
name|type_glUniform4f
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glUniform4f"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|funcs
operator|->
name|uniform4f
condition|)
block|{
name|funcs
operator|->
name|uniform4f
operator|=
operator|(
name|type_glUniform4f
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glUniform4fARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|uniform4f
condition|)
name|funcs
operator|->
name|uniform4f
argument_list|(
name|location
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|w
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|uniform4f
operator|=
name|qglfResolveUniform4f
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveUniform4fv
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveUniform4fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|v
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glUniform4fv
function_decl|)
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|v
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|uniform4fv
operator|=
operator|(
name|type_glUniform4fv
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glUniform4fv"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|funcs
operator|->
name|uniform4fv
condition|)
block|{
name|funcs
operator|->
name|uniform4fv
operator|=
operator|(
name|type_glUniform4fv
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glUniform4fvARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|uniform4fv
condition|)
name|funcs
operator|->
name|uniform4fv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|v
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|uniform4fv
operator|=
name|qglfResolveUniform4fv
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveUniform4i
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveUniform4i
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLint
name|x
parameter_list|,
name|GLint
name|y
parameter_list|,
name|GLint
name|z
parameter_list|,
name|GLint
name|w
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glUniform4i
function_decl|)
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLint
name|x
parameter_list|,
name|GLint
name|y
parameter_list|,
name|GLint
name|z
parameter_list|,
name|GLint
name|w
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|uniform4i
operator|=
operator|(
name|type_glUniform4i
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glUniform4i"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|funcs
operator|->
name|uniform4i
condition|)
block|{
name|funcs
operator|->
name|uniform4i
operator|=
operator|(
name|type_glUniform4i
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glUniform4iARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|uniform4i
condition|)
name|funcs
operator|->
name|uniform4i
argument_list|(
name|location
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|w
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|uniform4i
operator|=
name|qglfResolveUniform4i
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveUniform4iv
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveUniform4iv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLint
modifier|*
name|v
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glUniform4iv
function_decl|)
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLint
modifier|*
name|v
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|uniform4iv
operator|=
operator|(
name|type_glUniform4iv
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glUniform4iv"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|funcs
operator|->
name|uniform4iv
condition|)
block|{
name|funcs
operator|->
name|uniform4iv
operator|=
operator|(
name|type_glUniform4iv
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glUniform4ivARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|uniform4iv
condition|)
name|funcs
operator|->
name|uniform4iv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|v
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|uniform4iv
operator|=
name|qglfResolveUniform4iv
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveUniformMatrix2fv
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveUniformMatrix2fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLboolean
name|transpose
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|value
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glUniformMatrix2fv
function_decl|)
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLboolean
name|transpose
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|value
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|uniformMatrix2fv
operator|=
operator|(
name|type_glUniformMatrix2fv
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glUniformMatrix2fv"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|funcs
operator|->
name|uniformMatrix2fv
condition|)
block|{
name|funcs
operator|->
name|uniformMatrix2fv
operator|=
operator|(
name|type_glUniformMatrix2fv
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glUniformMatrix2fvARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|uniformMatrix2fv
condition|)
name|funcs
operator|->
name|uniformMatrix2fv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|,
name|value
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|uniformMatrix2fv
operator|=
name|qglfResolveUniformMatrix2fv
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveUniformMatrix3fv
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveUniformMatrix3fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLboolean
name|transpose
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|value
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glUniformMatrix3fv
function_decl|)
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLboolean
name|transpose
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|value
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|uniformMatrix3fv
operator|=
operator|(
name|type_glUniformMatrix3fv
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glUniformMatrix3fv"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|funcs
operator|->
name|uniformMatrix3fv
condition|)
block|{
name|funcs
operator|->
name|uniformMatrix3fv
operator|=
operator|(
name|type_glUniformMatrix3fv
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glUniformMatrix3fvARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|uniformMatrix3fv
condition|)
name|funcs
operator|->
name|uniformMatrix3fv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|,
name|value
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|uniformMatrix3fv
operator|=
name|qglfResolveUniformMatrix3fv
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveUniformMatrix4fv
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveUniformMatrix4fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLboolean
name|transpose
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|value
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glUniformMatrix4fv
function_decl|)
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLboolean
name|transpose
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|value
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|uniformMatrix4fv
operator|=
operator|(
name|type_glUniformMatrix4fv
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glUniformMatrix4fv"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|funcs
operator|->
name|uniformMatrix4fv
condition|)
block|{
name|funcs
operator|->
name|uniformMatrix4fv
operator|=
operator|(
name|type_glUniformMatrix4fv
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glUniformMatrix4fvARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|uniformMatrix4fv
condition|)
name|funcs
operator|->
name|uniformMatrix4fv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|,
name|value
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|uniformMatrix4fv
operator|=
name|qglfResolveUniformMatrix4fv
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveUseProgram
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveUseProgram
parameter_list|(
name|GLuint
name|program
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glUseProgram
function_decl|)
parameter_list|(
name|GLuint
name|program
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|useProgram
operator|=
operator|(
name|type_glUseProgram
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glUseProgram"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|funcs
operator|->
name|useProgram
condition|)
block|{
name|funcs
operator|->
name|useProgram
operator|=
operator|(
name|type_glUseProgram
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glUseProgramObjectARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|useProgram
condition|)
name|funcs
operator|->
name|useProgram
argument_list|(
name|program
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|useProgram
operator|=
name|qglfResolveUseProgram
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveValidateProgram
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveValidateProgram
parameter_list|(
name|GLuint
name|program
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glValidateProgram
function_decl|)
parameter_list|(
name|GLuint
name|program
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|validateProgram
operator|=
operator|(
name|type_glValidateProgram
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glValidateProgram"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|funcs
operator|->
name|validateProgram
condition|)
block|{
name|funcs
operator|->
name|validateProgram
operator|=
operator|(
name|type_glValidateProgram
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glValidateProgramARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|validateProgram
condition|)
name|funcs
operator|->
name|validateProgram
argument_list|(
name|program
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|validateProgram
operator|=
name|qglfResolveValidateProgram
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveVertexAttrib1f
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveVertexAttrib1f
parameter_list|(
name|GLuint
name|indx
parameter_list|,
name|GLfloat
name|x
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glVertexAttrib1f
function_decl|)
parameter_list|(
name|GLuint
name|indx
parameter_list|,
name|GLfloat
name|x
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|vertexAttrib1f
operator|=
operator|(
name|type_glVertexAttrib1f
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glVertexAttrib1f"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|funcs
operator|->
name|vertexAttrib1f
condition|)
block|{
name|funcs
operator|->
name|vertexAttrib1f
operator|=
operator|(
name|type_glVertexAttrib1f
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glVertexAttrib1fARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|vertexAttrib1f
condition|)
name|funcs
operator|->
name|vertexAttrib1f
argument_list|(
name|indx
argument_list|,
name|x
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|vertexAttrib1f
operator|=
name|qglfResolveVertexAttrib1f
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveVertexAttrib1fv
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveVertexAttrib1fv
parameter_list|(
name|GLuint
name|indx
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|values
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glVertexAttrib1fv
function_decl|)
parameter_list|(
name|GLuint
name|indx
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|values
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|vertexAttrib1fv
operator|=
operator|(
name|type_glVertexAttrib1fv
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glVertexAttrib1fv"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|funcs
operator|->
name|vertexAttrib1fv
condition|)
block|{
name|funcs
operator|->
name|vertexAttrib1fv
operator|=
operator|(
name|type_glVertexAttrib1fv
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glVertexAttrib1fvARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|vertexAttrib1fv
condition|)
name|funcs
operator|->
name|vertexAttrib1fv
argument_list|(
name|indx
argument_list|,
name|values
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|vertexAttrib1fv
operator|=
name|qglfResolveVertexAttrib1fv
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveVertexAttrib2f
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveVertexAttrib2f
parameter_list|(
name|GLuint
name|indx
parameter_list|,
name|GLfloat
name|x
parameter_list|,
name|GLfloat
name|y
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glVertexAttrib2f
function_decl|)
parameter_list|(
name|GLuint
name|indx
parameter_list|,
name|GLfloat
name|x
parameter_list|,
name|GLfloat
name|y
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|vertexAttrib2f
operator|=
operator|(
name|type_glVertexAttrib2f
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glVertexAttrib2f"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|funcs
operator|->
name|vertexAttrib2f
condition|)
block|{
name|funcs
operator|->
name|vertexAttrib2f
operator|=
operator|(
name|type_glVertexAttrib2f
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glVertexAttrib2fARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|vertexAttrib2f
condition|)
name|funcs
operator|->
name|vertexAttrib2f
argument_list|(
name|indx
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|vertexAttrib2f
operator|=
name|qglfResolveVertexAttrib2f
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveVertexAttrib2fv
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveVertexAttrib2fv
parameter_list|(
name|GLuint
name|indx
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|values
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glVertexAttrib2fv
function_decl|)
parameter_list|(
name|GLuint
name|indx
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|values
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|vertexAttrib2fv
operator|=
operator|(
name|type_glVertexAttrib2fv
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glVertexAttrib2fv"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|funcs
operator|->
name|vertexAttrib2fv
condition|)
block|{
name|funcs
operator|->
name|vertexAttrib2fv
operator|=
operator|(
name|type_glVertexAttrib2fv
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glVertexAttrib2fvARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|vertexAttrib2fv
condition|)
name|funcs
operator|->
name|vertexAttrib2fv
argument_list|(
name|indx
argument_list|,
name|values
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|vertexAttrib2fv
operator|=
name|qglfResolveVertexAttrib2fv
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveVertexAttrib3f
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveVertexAttrib3f
parameter_list|(
name|GLuint
name|indx
parameter_list|,
name|GLfloat
name|x
parameter_list|,
name|GLfloat
name|y
parameter_list|,
name|GLfloat
name|z
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glVertexAttrib3f
function_decl|)
parameter_list|(
name|GLuint
name|indx
parameter_list|,
name|GLfloat
name|x
parameter_list|,
name|GLfloat
name|y
parameter_list|,
name|GLfloat
name|z
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|vertexAttrib3f
operator|=
operator|(
name|type_glVertexAttrib3f
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glVertexAttrib3f"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|funcs
operator|->
name|vertexAttrib3f
condition|)
block|{
name|funcs
operator|->
name|vertexAttrib3f
operator|=
operator|(
name|type_glVertexAttrib3f
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glVertexAttrib3fARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|vertexAttrib3f
condition|)
name|funcs
operator|->
name|vertexAttrib3f
argument_list|(
name|indx
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|vertexAttrib3f
operator|=
name|qglfResolveVertexAttrib3f
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveVertexAttrib3fv
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveVertexAttrib3fv
parameter_list|(
name|GLuint
name|indx
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|values
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glVertexAttrib3fv
function_decl|)
parameter_list|(
name|GLuint
name|indx
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|values
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|vertexAttrib3fv
operator|=
operator|(
name|type_glVertexAttrib3fv
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glVertexAttrib3fv"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|funcs
operator|->
name|vertexAttrib3fv
condition|)
block|{
name|funcs
operator|->
name|vertexAttrib3fv
operator|=
operator|(
name|type_glVertexAttrib3fv
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glVertexAttrib3fvARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|vertexAttrib3fv
condition|)
name|funcs
operator|->
name|vertexAttrib3fv
argument_list|(
name|indx
argument_list|,
name|values
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|vertexAttrib3fv
operator|=
name|qglfResolveVertexAttrib3fv
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveVertexAttrib4f
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveVertexAttrib4f
parameter_list|(
name|GLuint
name|indx
parameter_list|,
name|GLfloat
name|x
parameter_list|,
name|GLfloat
name|y
parameter_list|,
name|GLfloat
name|z
parameter_list|,
name|GLfloat
name|w
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glVertexAttrib4f
function_decl|)
parameter_list|(
name|GLuint
name|indx
parameter_list|,
name|GLfloat
name|x
parameter_list|,
name|GLfloat
name|y
parameter_list|,
name|GLfloat
name|z
parameter_list|,
name|GLfloat
name|w
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|vertexAttrib4f
operator|=
operator|(
name|type_glVertexAttrib4f
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glVertexAttrib4f"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|funcs
operator|->
name|vertexAttrib4f
condition|)
block|{
name|funcs
operator|->
name|vertexAttrib4f
operator|=
operator|(
name|type_glVertexAttrib4f
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glVertexAttrib4fARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|vertexAttrib4f
condition|)
name|funcs
operator|->
name|vertexAttrib4f
argument_list|(
name|indx
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|w
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|vertexAttrib4f
operator|=
name|qglfResolveVertexAttrib4f
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveVertexAttrib4fv
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveVertexAttrib4fv
parameter_list|(
name|GLuint
name|indx
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|values
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glVertexAttrib4fv
function_decl|)
parameter_list|(
name|GLuint
name|indx
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|values
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|vertexAttrib4fv
operator|=
operator|(
name|type_glVertexAttrib4fv
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glVertexAttrib4fv"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|funcs
operator|->
name|vertexAttrib4fv
condition|)
block|{
name|funcs
operator|->
name|vertexAttrib4fv
operator|=
operator|(
name|type_glVertexAttrib4fv
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glVertexAttrib4fvARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|vertexAttrib4fv
condition|)
name|funcs
operator|->
name|vertexAttrib4fv
argument_list|(
name|indx
argument_list|,
name|values
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|vertexAttrib4fv
operator|=
name|qglfResolveVertexAttrib4fv
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qglfResolveVertexAttribPointer
specifier|static
name|void
name|QGLF_APIENTRY
name|qglfResolveVertexAttribPointer
parameter_list|(
name|GLuint
name|indx
parameter_list|,
name|GLint
name|size
parameter_list|,
name|GLenum
name|type
parameter_list|,
name|GLboolean
name|normalized
parameter_list|,
name|GLsizei
name|stride
parameter_list|,
specifier|const
name|void
modifier|*
name|ptr
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
name|QGLF_APIENTRYP
name|type_glVertexAttribPointer
function_decl|)
parameter_list|(
name|GLuint
name|indx
parameter_list|,
name|GLint
name|size
parameter_list|,
name|GLenum
name|type
parameter_list|,
name|GLboolean
name|normalized
parameter_list|,
name|GLsizei
name|stride
parameter_list|,
specifier|const
name|void
modifier|*
name|ptr
parameter_list|)
function_decl|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|QGLFunctionsPrivate
modifier|*
name|funcs
init|=
name|qt_gl_functions
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|funcs
operator|->
name|vertexAttribPointer
operator|=
operator|(
name|type_glVertexAttribPointer
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glVertexAttribPointer"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|funcs
operator|->
name|vertexAttribPointer
condition|)
block|{
name|funcs
operator|->
name|vertexAttribPointer
operator|=
operator|(
name|type_glVertexAttribPointer
operator|)
name|context
operator|->
name|getProcAddress
argument_list|(
name|QLatin1String
argument_list|(
literal|"glVertexAttribPointerARB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcs
operator|->
name|vertexAttribPointer
condition|)
name|funcs
operator|->
name|vertexAttribPointer
argument_list|(
name|indx
argument_list|,
name|size
argument_list|,
name|type
argument_list|,
name|normalized
argument_list|,
name|stride
argument_list|,
name|ptr
argument_list|)
expr_stmt|;
else|else
name|funcs
operator|->
name|vertexAttribPointer
operator|=
name|qglfResolveVertexAttribPointer
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// !QT_OPENGL_ES_2
end_comment
begin_constructor
DECL|function|QGLFunctionsPrivate
name|QGLFunctionsPrivate
operator|::
name|QGLFunctionsPrivate
parameter_list|(
specifier|const
name|QGLContext
modifier|*
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_OPENGL_ES_2
name|activeTexture
operator|=
name|qglfResolveActiveTexture
expr_stmt|;
name|attachShader
operator|=
name|qglfResolveAttachShader
expr_stmt|;
name|bindAttribLocation
operator|=
name|qglfResolveBindAttribLocation
expr_stmt|;
name|bindBuffer
operator|=
name|qglfResolveBindBuffer
expr_stmt|;
name|bindFramebuffer
operator|=
name|qglfResolveBindFramebuffer
expr_stmt|;
name|bindRenderbuffer
operator|=
name|qglfResolveBindRenderbuffer
expr_stmt|;
name|blendColor
operator|=
name|qglfResolveBlendColor
expr_stmt|;
name|blendEquation
operator|=
name|qglfResolveBlendEquation
expr_stmt|;
name|blendEquationSeparate
operator|=
name|qglfResolveBlendEquationSeparate
expr_stmt|;
name|blendFuncSeparate
operator|=
name|qglfResolveBlendFuncSeparate
expr_stmt|;
name|bufferData
operator|=
name|qglfResolveBufferData
expr_stmt|;
name|bufferSubData
operator|=
name|qglfResolveBufferSubData
expr_stmt|;
name|checkFramebufferStatus
operator|=
name|qglfResolveCheckFramebufferStatus
expr_stmt|;
name|compileShader
operator|=
name|qglfResolveCompileShader
expr_stmt|;
name|compressedTexImage2D
operator|=
name|qglfResolveCompressedTexImage2D
expr_stmt|;
name|compressedTexSubImage2D
operator|=
name|qglfResolveCompressedTexSubImage2D
expr_stmt|;
name|createProgram
operator|=
name|qglfResolveCreateProgram
expr_stmt|;
name|createShader
operator|=
name|qglfResolveCreateShader
expr_stmt|;
name|deleteBuffers
operator|=
name|qglfResolveDeleteBuffers
expr_stmt|;
name|deleteFramebuffers
operator|=
name|qglfResolveDeleteFramebuffers
expr_stmt|;
name|deleteProgram
operator|=
name|qglfResolveDeleteProgram
expr_stmt|;
name|deleteRenderbuffers
operator|=
name|qglfResolveDeleteRenderbuffers
expr_stmt|;
name|deleteShader
operator|=
name|qglfResolveDeleteShader
expr_stmt|;
name|detachShader
operator|=
name|qglfResolveDetachShader
expr_stmt|;
name|disableVertexAttribArray
operator|=
name|qglfResolveDisableVertexAttribArray
expr_stmt|;
name|enableVertexAttribArray
operator|=
name|qglfResolveEnableVertexAttribArray
expr_stmt|;
name|framebufferRenderbuffer
operator|=
name|qglfResolveFramebufferRenderbuffer
expr_stmt|;
name|framebufferTexture2D
operator|=
name|qglfResolveFramebufferTexture2D
expr_stmt|;
name|genBuffers
operator|=
name|qglfResolveGenBuffers
expr_stmt|;
name|generateMipmap
operator|=
name|qglfResolveGenerateMipmap
expr_stmt|;
name|genFramebuffers
operator|=
name|qglfResolveGenFramebuffers
expr_stmt|;
name|genRenderbuffers
operator|=
name|qglfResolveGenRenderbuffers
expr_stmt|;
name|getActiveAttrib
operator|=
name|qglfResolveGetActiveAttrib
expr_stmt|;
name|getActiveUniform
operator|=
name|qglfResolveGetActiveUniform
expr_stmt|;
name|getAttachedShaders
operator|=
name|qglfResolveGetAttachedShaders
expr_stmt|;
name|getAttribLocation
operator|=
name|qglfResolveGetAttribLocation
expr_stmt|;
name|getBufferParameteriv
operator|=
name|qglfResolveGetBufferParameteriv
expr_stmt|;
name|getFramebufferAttachmentParameteriv
operator|=
name|qglfResolveGetFramebufferAttachmentParameteriv
expr_stmt|;
name|getProgramiv
operator|=
name|qglfResolveGetProgramiv
expr_stmt|;
name|getProgramInfoLog
operator|=
name|qglfResolveGetProgramInfoLog
expr_stmt|;
name|getRenderbufferParameteriv
operator|=
name|qglfResolveGetRenderbufferParameteriv
expr_stmt|;
name|getShaderiv
operator|=
name|qglfResolveGetShaderiv
expr_stmt|;
name|getShaderInfoLog
operator|=
name|qglfResolveGetShaderInfoLog
expr_stmt|;
name|getShaderPrecisionFormat
operator|=
name|qglfResolveGetShaderPrecisionFormat
expr_stmt|;
name|getShaderSource
operator|=
name|qglfResolveGetShaderSource
expr_stmt|;
name|getUniformfv
operator|=
name|qglfResolveGetUniformfv
expr_stmt|;
name|getUniformiv
operator|=
name|qglfResolveGetUniformiv
expr_stmt|;
name|getUniformLocation
operator|=
name|qglfResolveGetUniformLocation
expr_stmt|;
name|getVertexAttribfv
operator|=
name|qglfResolveGetVertexAttribfv
expr_stmt|;
name|getVertexAttribiv
operator|=
name|qglfResolveGetVertexAttribiv
expr_stmt|;
name|getVertexAttribPointerv
operator|=
name|qglfResolveGetVertexAttribPointerv
expr_stmt|;
name|isBuffer
operator|=
name|qglfResolveIsBuffer
expr_stmt|;
name|isFramebuffer
operator|=
name|qglfResolveIsFramebuffer
expr_stmt|;
name|isProgram
operator|=
name|qglfResolveIsProgram
expr_stmt|;
name|isRenderbuffer
operator|=
name|qglfResolveIsRenderbuffer
expr_stmt|;
name|isShader
operator|=
name|qglfResolveIsShader
expr_stmt|;
name|linkProgram
operator|=
name|qglfResolveLinkProgram
expr_stmt|;
name|releaseShaderCompiler
operator|=
name|qglfResolveReleaseShaderCompiler
expr_stmt|;
name|renderbufferStorage
operator|=
name|qglfResolveRenderbufferStorage
expr_stmt|;
name|sampleCoverage
operator|=
name|qglfResolveSampleCoverage
expr_stmt|;
name|shaderBinary
operator|=
name|qglfResolveShaderBinary
expr_stmt|;
name|shaderSource
operator|=
name|qglfResolveShaderSource
expr_stmt|;
name|stencilFuncSeparate
operator|=
name|qglfResolveStencilFuncSeparate
expr_stmt|;
name|stencilMaskSeparate
operator|=
name|qglfResolveStencilMaskSeparate
expr_stmt|;
name|stencilOpSeparate
operator|=
name|qglfResolveStencilOpSeparate
expr_stmt|;
name|uniform1f
operator|=
name|qglfResolveUniform1f
expr_stmt|;
name|uniform1fv
operator|=
name|qglfResolveUniform1fv
expr_stmt|;
name|uniform1i
operator|=
name|qglfResolveUniform1i
expr_stmt|;
name|uniform1iv
operator|=
name|qglfResolveUniform1iv
expr_stmt|;
name|uniform2f
operator|=
name|qglfResolveUniform2f
expr_stmt|;
name|uniform2fv
operator|=
name|qglfResolveUniform2fv
expr_stmt|;
name|uniform2i
operator|=
name|qglfResolveUniform2i
expr_stmt|;
name|uniform2iv
operator|=
name|qglfResolveUniform2iv
expr_stmt|;
name|uniform3f
operator|=
name|qglfResolveUniform3f
expr_stmt|;
name|uniform3fv
operator|=
name|qglfResolveUniform3fv
expr_stmt|;
name|uniform3i
operator|=
name|qglfResolveUniform3i
expr_stmt|;
name|uniform3iv
operator|=
name|qglfResolveUniform3iv
expr_stmt|;
name|uniform4f
operator|=
name|qglfResolveUniform4f
expr_stmt|;
name|uniform4fv
operator|=
name|qglfResolveUniform4fv
expr_stmt|;
name|uniform4i
operator|=
name|qglfResolveUniform4i
expr_stmt|;
name|uniform4iv
operator|=
name|qglfResolveUniform4iv
expr_stmt|;
name|uniformMatrix2fv
operator|=
name|qglfResolveUniformMatrix2fv
expr_stmt|;
name|uniformMatrix3fv
operator|=
name|qglfResolveUniformMatrix3fv
expr_stmt|;
name|uniformMatrix4fv
operator|=
name|qglfResolveUniformMatrix4fv
expr_stmt|;
name|useProgram
operator|=
name|qglfResolveUseProgram
expr_stmt|;
name|validateProgram
operator|=
name|qglfResolveValidateProgram
expr_stmt|;
name|vertexAttrib1f
operator|=
name|qglfResolveVertexAttrib1f
expr_stmt|;
name|vertexAttrib1fv
operator|=
name|qglfResolveVertexAttrib1fv
expr_stmt|;
name|vertexAttrib2f
operator|=
name|qglfResolveVertexAttrib2f
expr_stmt|;
name|vertexAttrib2fv
operator|=
name|qglfResolveVertexAttrib2fv
expr_stmt|;
name|vertexAttrib3f
operator|=
name|qglfResolveVertexAttrib3f
expr_stmt|;
name|vertexAttrib3fv
operator|=
name|qglfResolveVertexAttrib3fv
expr_stmt|;
name|vertexAttrib4f
operator|=
name|qglfResolveVertexAttrib4f
expr_stmt|;
name|vertexAttrib4fv
operator|=
name|qglfResolveVertexAttrib4fv
expr_stmt|;
name|vertexAttribPointer
operator|=
name|qglfResolveVertexAttribPointer
expr_stmt|;
endif|#
directive|endif
comment|// !QT_OPENGL_ES_2
block|}
end_constructor
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
