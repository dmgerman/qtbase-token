begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtOpenGL module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QTime>
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_include
include|#
directive|include
file|<private/qt_x11_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qimagepixmapcleanuphooks_p.h>
end_include
begin_include
include|#
directive|include
file|"qwindowsurface_x11gl_p.h"
end_include
begin_include
include|#
directive|include
file|"qpixmapdata_x11gl_p.h"
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_constructor
DECL|function|QX11GLWindowSurface
name|QX11GLWindowSurface
operator|::
name|QX11GLWindowSurface
parameter_list|(
name|QWidget
modifier|*
name|window
parameter_list|)
member_init_list|:
name|QWindowSurface
argument_list|(
name|window
argument_list|)
member_init_list|,
name|m_windowGC
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_pixmapGC
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_window
argument_list|(
name|window
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QX11GLWindowSurface
name|QX11GLWindowSurface
operator|::
name|~
name|QX11GLWindowSurface
parameter_list|()
block|{
if|if
condition|(
name|m_windowGC
condition|)
name|XFree
argument_list|(
name|m_windowGC
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_pixmapGC
condition|)
name|XFree
argument_list|(
name|m_pixmapGC
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|paintDevice
name|QPaintDevice
modifier|*
name|QX11GLWindowSurface
operator|::
name|paintDevice
parameter_list|()
block|{
return|return
operator|&
name|m_backBuffer
return|;
block|}
end_function
begin_function_decl
specifier|extern
name|void
modifier|*
name|qt_getClipRects
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|r
parameter_list|,
name|int
modifier|&
name|num
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|// in qpaintengine_x11.cpp
end_comment
begin_function
DECL|function|flush
name|void
name|QX11GLWindowSurface
operator|::
name|flush
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|,
specifier|const
name|QRegion
modifier|&
name|widgetRegion
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|offset
parameter_list|)
block|{
comment|// We don't need to know the widget which initiated the flush. Instead we just use the offset
comment|// to translate the widgetRegion:
name|Q_UNUSED
argument_list|(
name|widget
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_backBuffer
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|qDebug
argument_list|(
literal|"QX11GLWindowSurface::flush() - backBuffer is null, not flushing anything"
argument_list|)
expr_stmt|;
return|return;
block|}
name|Q_ASSERT
argument_list|(
name|window
argument_list|()
operator|->
name|size
argument_list|()
operator|!=
name|m_backBuffer
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Wait for all GL rendering to the back buffer pixmap to complete before trying to
comment|// copy it to the window. We do this by making sure the pixmap's context is current
comment|// and then call eglWaitClient. The EGL 1.4 spec says eglWaitClient doesn't have to
comment|// block, just that "All rendering calls...are guaranteed to be executed before native
comment|// rendering calls". This makes it potentially less expensive than glFinish.
name|QGLContext
modifier|*
name|ctx
init|=
cast|static_cast
argument_list|<
name|QX11GLPixmapData
operator|*
argument_list|>
argument_list|(
name|m_backBuffer
operator|.
name|data_ptr
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
operator|->
name|context
argument_list|()
decl_stmt|;
if|if
condition|(
name|QGLContext
operator|::
name|currentContext
argument_list|()
operator|!=
name|ctx
operator|&&
name|ctx
operator|&&
name|ctx
operator|->
name|isValid
argument_list|()
condition|)
name|ctx
operator|->
name|makeCurrent
argument_list|()
expr_stmt|;
name|eglWaitClient
argument_list|()
expr_stmt|;
if|if
condition|(
name|m_windowGC
operator|==
literal|0
condition|)
block|{
name|XGCValues
name|attribs
decl_stmt|;
name|attribs
operator|.
name|graphics_exposures
operator|=
name|False
expr_stmt|;
name|m_windowGC
operator|=
name|XCreateGC
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|m_window
operator|->
name|handle
argument_list|()
argument_list|,
name|GCGraphicsExposures
argument_list|,
operator|&
name|attribs
argument_list|)
expr_stmt|;
block|}
name|int
name|rectCount
decl_stmt|;
name|XRectangle
modifier|*
name|rects
init|=
operator|(
name|XRectangle
operator|*
operator|)
name|qt_getClipRects
argument_list|(
name|widgetRegion
argument_list|,
name|rectCount
argument_list|)
decl_stmt|;
if|if
condition|(
name|rectCount
operator|<=
literal|0
condition|)
return|return;
name|XSetClipRectangles
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|m_windowGC
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|rects
argument_list|,
name|rectCount
argument_list|,
name|YXBanded
argument_list|)
expr_stmt|;
name|QRect
name|dirtyRect
init|=
name|widgetRegion
operator|.
name|boundingRect
argument_list|()
operator|.
name|translated
argument_list|(
operator|-
name|offset
argument_list|)
decl_stmt|;
name|XCopyArea
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|m_backBuffer
operator|.
name|handle
argument_list|()
argument_list|,
name|m_window
operator|->
name|handle
argument_list|()
argument_list|,
name|m_windowGC
argument_list|,
name|dirtyRect
operator|.
name|x
argument_list|()
argument_list|,
name|dirtyRect
operator|.
name|y
argument_list|()
argument_list|,
name|dirtyRect
operator|.
name|width
argument_list|()
argument_list|,
name|dirtyRect
operator|.
name|height
argument_list|()
argument_list|,
name|dirtyRect
operator|.
name|x
argument_list|()
argument_list|,
name|dirtyRect
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
comment|// Make sure the blit of the update from the back buffer to the window completes
comment|// before allowing rendering to start again to the back buffer. Otherwise the GPU
comment|// might start rendering to the back buffer again while the blit takes place.
name|eglWaitNative
argument_list|(
name|EGL_CORE_NATIVE_ENGINE
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setGeometry
name|void
name|QX11GLWindowSurface
operator|::
name|setGeometry
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
block|{
if|if
condition|(
name|rect
operator|.
name|width
argument_list|()
operator|>
name|m_backBuffer
operator|.
name|size
argument_list|()
operator|.
name|width
argument_list|()
operator|||
name|rect
operator|.
name|height
argument_list|()
operator|>
name|m_backBuffer
operator|.
name|size
argument_list|()
operator|.
name|height
argument_list|()
condition|)
block|{
name|QX11GLPixmapData
modifier|*
name|pd
init|=
operator|new
name|QX11GLPixmapData
decl_stmt|;
name|QSize
name|newSize
init|=
name|rect
operator|.
name|size
argument_list|()
decl_stmt|;
name|pd
operator|->
name|resize
argument_list|(
name|newSize
operator|.
name|width
argument_list|()
argument_list|,
name|newSize
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|m_backBuffer
operator|=
name|QPixmap
argument_list|(
name|pd
argument_list|)
expr_stmt|;
if|if
condition|(
name|window
argument_list|()
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_TranslucentBackground
argument_list|)
condition|)
name|m_backBuffer
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|transparent
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_pixmapGC
condition|)
block|{
name|XFreeGC
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|m_pixmapGC
argument_list|)
expr_stmt|;
name|m_pixmapGC
operator|=
literal|0
expr_stmt|;
block|}
block|}
name|QWindowSurface
operator|::
name|setGeometry
argument_list|(
name|rect
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|scroll
name|bool
name|QX11GLWindowSurface
operator|::
name|scroll
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|area
parameter_list|,
name|int
name|dx
parameter_list|,
name|int
name|dy
parameter_list|)
block|{
if|if
condition|(
name|m_backBuffer
operator|.
name|isNull
argument_list|()
condition|)
return|return
literal|false
return|;
name|Q_ASSERT
argument_list|(
name|m_backBuffer
operator|.
name|data_ptr
argument_list|()
operator|->
name|classId
argument_list|()
operator|==
name|QPixmapData
operator|::
name|X11Class
argument_list|)
expr_stmt|;
comment|// Make sure all GL rendering is complete before starting the scroll operation:
name|QGLContext
modifier|*
name|ctx
init|=
cast|static_cast
argument_list|<
name|QX11GLPixmapData
operator|*
argument_list|>
argument_list|(
name|m_backBuffer
operator|.
name|data_ptr
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
operator|->
name|context
argument_list|()
decl_stmt|;
if|if
condition|(
name|QGLContext
operator|::
name|currentContext
argument_list|()
operator|!=
name|ctx
operator|&&
name|ctx
operator|&&
name|ctx
operator|->
name|isValid
argument_list|()
condition|)
name|ctx
operator|->
name|makeCurrent
argument_list|()
expr_stmt|;
name|eglWaitClient
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|m_pixmapGC
condition|)
name|m_pixmapGC
operator|=
name|XCreateGC
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|m_backBuffer
operator|.
name|handle
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QRect
modifier|&
name|rect
decl|,
name|area
operator|.
name|rects
argument_list|()
control|)
block|{
name|XCopyArea
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|m_backBuffer
operator|.
name|handle
argument_list|()
argument_list|,
name|m_backBuffer
operator|.
name|handle
argument_list|()
argument_list|,
name|m_pixmapGC
argument_list|,
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|rect
operator|.
name|y
argument_list|()
argument_list|,
name|rect
operator|.
name|width
argument_list|()
argument_list|,
name|rect
operator|.
name|height
argument_list|()
argument_list|,
name|rect
operator|.
name|x
argument_list|()
operator|+
name|dx
argument_list|,
name|rect
operator|.
name|y
argument_list|()
operator|+
name|dy
argument_list|)
expr_stmt|;
block|}
comment|// Make sure the scroll operation is complete before allowing GL rendering to resume
name|eglWaitNative
argument_list|(
name|EGL_CORE_NATIVE_ENGINE
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|grabWidget
name|QPixmap
name|QX11GLWindowSurface
operator|::
name|grabWidget
parameter_list|(
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|widget
operator|||
name|m_backBuffer
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|QPixmap
argument_list|()
return|;
name|QRect
name|srcRect
decl_stmt|;
comment|// make sure the rect is inside the widget& clip to widget's rect
if|if
condition|(
operator|!
name|rect
operator|.
name|isEmpty
argument_list|()
condition|)
name|srcRect
operator|=
name|rect
operator|&
name|widget
operator|->
name|rect
argument_list|()
expr_stmt|;
else|else
name|srcRect
operator|=
name|widget
operator|->
name|rect
argument_list|()
expr_stmt|;
if|if
condition|(
name|srcRect
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|QPixmap
argument_list|()
return|;
comment|// If it's a child widget we have to translate the coordinates
if|if
condition|(
name|widget
operator|!=
name|window
argument_list|()
condition|)
name|srcRect
operator|.
name|translate
argument_list|(
name|widget
operator|->
name|mapTo
argument_list|(
name|window
argument_list|()
argument_list|,
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QPixmap
operator|::
name|x11SetDefaultScreen
argument_list|(
name|widget
operator|->
name|x11Info
argument_list|()
operator|.
name|screen
argument_list|()
argument_list|)
expr_stmt|;
name|QX11PixmapData
modifier|*
name|pmd
init|=
operator|new
name|QX11PixmapData
argument_list|(
name|QPixmapData
operator|::
name|PixmapType
argument_list|)
decl_stmt|;
name|pmd
operator|->
name|resize
argument_list|(
name|srcRect
operator|.
name|width
argument_list|()
argument_list|,
name|srcRect
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|QPixmap
name|px
argument_list|(
name|pmd
argument_list|)
decl_stmt|;
name|GC
name|tmpGc
init|=
name|XCreateGC
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|m_backBuffer
operator|.
name|handle
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// Make sure all GL rendering is complete before copying the window
name|QGLContext
modifier|*
name|ctx
init|=
cast|static_cast
argument_list|<
name|QX11GLPixmapData
operator|*
argument_list|>
argument_list|(
name|m_backBuffer
operator|.
name|pixmapData
argument_list|()
argument_list|)
operator|->
name|context
argument_list|()
decl_stmt|;
if|if
condition|(
name|QGLContext
operator|::
name|currentContext
argument_list|()
operator|!=
name|ctx
operator|&&
name|ctx
operator|&&
name|ctx
operator|->
name|isValid
argument_list|()
condition|)
name|ctx
operator|->
name|makeCurrent
argument_list|()
expr_stmt|;
name|eglWaitClient
argument_list|()
expr_stmt|;
comment|// Copy srcRect from the backing store to the new pixmap
name|XSetGraphicsExposures
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|tmpGc
argument_list|,
name|False
argument_list|)
expr_stmt|;
name|XCopyArea
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|m_backBuffer
operator|.
name|handle
argument_list|()
argument_list|,
name|px
operator|.
name|handle
argument_list|()
argument_list|,
name|tmpGc
argument_list|,
name|srcRect
operator|.
name|x
argument_list|()
argument_list|,
name|srcRect
operator|.
name|y
argument_list|()
argument_list|,
name|srcRect
operator|.
name|width
argument_list|()
argument_list|,
name|srcRect
operator|.
name|height
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|XFreeGC
argument_list|(
name|X11
operator|->
name|display
argument_list|,
name|tmpGc
argument_list|)
expr_stmt|;
comment|// Wait until the copy has finised before allowing more rendering into the back buffer
name|eglWaitNative
argument_list|(
name|EGL_CORE_NATIVE_ENGINE
argument_list|)
expr_stmt|;
return|return
name|px
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
