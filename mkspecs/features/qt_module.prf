# This file is loaded on-demand, before any .qmake.cache (sometimes *in* .qmake.cache), to loaded
# important settings for modules, such as paths to QtBase, settings etc.
# Consequently, we have to do some stunts to figure out where to find qmodule.pri.

isEmpty(QMAKE_QT_MODULE)|!exists($$QMAKE_QT_MODULE) {
   exists($$QTDIR/mkspecs/qmodule.pri):QMAKE_QT_MODULE = $$QTDIR/mkspecs/qmodule.pri
   QMAKE_CACHE_DIR = $$dirname(_QMAKE_CACHE_)
   !exists($$QMAKE_QT_MODULE):exists($$QMAKE_CACHE_DIR/mkspecs/qmodule.pri):QMAKE_QT_MODULE = $$QMAKE_CACHE_DIR/mkspecs/qmodule.pri
   !exists($$QMAKE_QT_MODULE):exists($$QMAKE_CACHE_DIR/qtbase/mkspecs/qmodule.pri):QMAKE_QT_MODULE = $$QMAKE_CACHE_DIR/qtbase/mkspecs/qmodule.pri
   !exists($$QMAKE_QT_MODULE):if(!isEmpty(QT_BUILD_TREE) & exists($$QT_BUILD_TREE/mkspecs/qmodule.pri)):QMAKE_QT_MODULE = $$QT_BUILD_TREE/mkspecs/qmodule.pri
   !exists($$QMAKE_QT_MODULE):exists($$[QT_HOST_DATA]/mkspecs/qmodule.pri):QMAKE_QT_MODULE = $$[QT_HOST_DATA]/mkspecs/qmodule.pri
}

!contains(QMAKE_INTERNAL_INCLUDED_FILES, .*qmodule\\.pri) {
    !exists($$QMAKE_QT_MODULE)|!include($$QMAKE_QT_MODULE, "", true) {
        error("Cannot load qmodule.pri!")
    } else {
        QMAKE_QT_MODULE_PRI_LOADED = 1
        debug(1, "Loaded qmodule.pri from ($$QMAKE_QT_MODULE)")
    }
} else {
    QMAKE_QT_MODULE_PRI_LOADED = 1  # covers 'preloading' from .qmake.cache
    debug(1, "Not loading qmodule.pri twice")
}

mac {
   !isEmpty(QMAKE_RPATHDIR){
       CONFIG += absolute_library_soname
   }
}

# Qt modules get compiled without exceptions enabled by default
CONFIG += exceptions_off
